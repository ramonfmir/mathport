{"respects_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\ntheorem stable_under_composition.respects_iso (hP : ring_hom.stable_under_composition @P)\n    (hP' : ∀ {R S : Type _} [CommRing R] [CommRing S] (e : «expr ≃+* » R S), P e.to_ring_hom) :\n    ring_hom.respects_iso @P := by\n  constructor\n  · introv H\n    skip\n    apply hP\n    exacts[H, hP' e]\n  · introv H\n    skip\n    apply hP\n    exacts[hP' e, H]\n#align stable_under_composition.respects_iso stable_under_composition.respects_iso\n\n",
 "pushout_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem stable_under_base_change.pushout_inl (hP : ring_hom.stable_under_base_change @P)\n    (hP' : ring_hom.respects_iso @P) {R S T : CommRing} (f : «expr ⟶ » R S) (g : «expr ⟶ » R T) (H : P g) :\n    P (pushout.inl : «expr ⟶ » S (pushout f g)) :=\n  by\n  rw [←\n    show _ = pushout.inl from\n      colimit.iso_colimit_cocone_ι_inv ⟨_, CommRing.pushout_cocone_is_colimit f g⟩ walking_span.left,\n    hP'.cancel_right_is_iso]\n  letI := f.to_algebra\n  letI := g.to_algebra\n  dsimp only [CommRing.pushout_cocone_inl, pushout_cocone.ι_app_left]\n  apply hP R T S (tensor_product R S T)\n  exact H\n#align stable_under_base_change.pushout_inl stable_under_base_change.pushout_inl\n\n",
 "mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem stable_under_base_change.mk (h₁ : respects_iso @P)\n    (h₂ :\n      ∀ ⦃R S T⦄ [CommRing R] [CommRing S] [CommRing T],\n        ∀ [algebra R S] [algebra R T],\n          P (algebra_map R T) →\n            P (algebra.tensor_product.include_left.to_ring_hom : «expr →+* » S (tensor_product R S T))) :\n    stable_under_base_change @P := by\n  introv R h H\n  skip\n  let e := h.symm.1.equiv\n  let f' := algebra.tensor_product.product_map (is_scalar_tower.to_alg_hom R R' S') (is_scalar_tower.to_alg_hom R S S')\n  have : ∀ x, e x = f' x := by\n    intro x\n    change e.to_linear_map.restrict_scalars R x = f'.to_linear_map x\n    congr 1\n    apply tensor_product.ext'\n    intro x y\n    simp [is_base_change.equiv_tmul, algebra.smul_def]\n  convert h₁.1 _ _ (h₂ H : P (_ : «expr →+* » R' _))\n  swap\n  · refine' { e with map_mul' := fun x y => _ }\n    change e (x * y) = e x * e y\n    simp_rw [this]\n    exact map_mul f' _ _\n  · ext\n    change _ = e («expr ⊗ₜ[ ] » x R 1)\n    dsimp only [e]\n    rw [h.symm.1.equiv_tmul, algebra.smul_def, alg_hom.to_linear_map_apply, map_one, mul_one]\n#align stable_under_base_change.mk stable_under_base_change.mk\n\n",
 "is_localization_away_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem respects_iso.is_localization_away_iff (hP : ring_hom.respects_iso @P) {R S : Type _} (R' S' : Type _)\n    [CommRing R] [CommRing S] [CommRing R'] [CommRing S'] [algebra R R'] [algebra S S'] (f : «expr →+* » R S) (r : R)\n    [is_localization.away r R'] [is_localization.away (f r) S'] :\n    P (localization.away_map f r) ↔ P (is_localization.away.map R' S' f r) :=\n  by\n  let e₁ : «expr ≃+* » R' (localization.away r) := (is_localization.alg_equiv (submonoid.powers r) _ _).to_ring_equiv\n  let e₂ : «expr ≃+* » (localization.away (f r)) S' :=\n    (is_localization.alg_equiv (submonoid.powers (f r)) _ _).to_ring_equiv\n  refine' (hP.cancel_left_is_iso e₁.to_CommRing_iso.hom (CommRing.of_hom _)).symm.trans _\n  refine' (hP.cancel_right_is_iso (CommRing.of_hom _) e₂.to_CommRing_iso.hom).symm.trans _\n  rw [← eq_iff_iff]\n  congr 1\n  dsimp [CommRing.of_hom, CommRing.of, bundled.of]\n  refine' is_localization.ring_hom_ext (submonoid.powers r) _\n  ext1\n  revert e₁ e₂\n  dsimp [RingEquiv.toRingHom, is_localization.away.map]\n  simp only [category_theory.comp_apply, RingEquiv.refl_apply, is_localization.alg_equiv_apply,\n    is_localization.ring_equiv_of_ring_equiv_apply, RingHom.coe_mk, [anonymous],\n    is_localization.ring_equiv_of_ring_equiv_eq, is_localization.map_eq]\n#align respects_iso.is_localization_away_iff respects_iso.is_localization_away_iff\n\n",
 "cancel_right_is_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem respects_iso.cancel_right_is_iso (hP : respects_iso @P) {R S T : CommRing} (f : «expr ⟶ » R S)\n    (g : «expr ⟶ » S T) [IsIso g] : P («expr ≫ » f g) ↔ P f :=\n  ⟨fun H => by\n    convert hP.1 («expr ≫ » f g) (as_iso g).symm.CommRing_iso_to_ring_equiv H\n    change f = «expr ≫ » f («expr ≫ » g (inv g))\n    simp, hP.1 f (asIso g).CommRing_iso_to_ring_equiv⟩\n#align respects_iso.cancel_right_is_iso respects_iso.cancel_right_is_iso\n\n",
 "cancel_left_is_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem respects_iso.cancel_left_is_iso (hP : respects_iso @P) {R S T : CommRing} (f : «expr ⟶ » R S)\n    (g : «expr ⟶ » S T) [IsIso f] : P («expr ≫ » f g) ↔ P g :=\n  ⟨fun H => by\n    convert hP.2 («expr ≫ » f g) (as_iso f).symm.CommRing_iso_to_ring_equiv H\n    exact (is_iso.inv_hom_id_assoc _ _).symm, hP.2 g (asIso f).CommRing_iso_to_ring_equiv⟩\n#align respects_iso.cancel_left_is_iso respects_iso.cancel_left_is_iso\n\n"}