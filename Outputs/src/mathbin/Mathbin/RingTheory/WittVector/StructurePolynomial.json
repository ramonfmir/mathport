{"witt_structure_rat_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n-- we could relax the fintype on `idx`, but then we need to cast from finset to set.\n-- for our applications `idx` is always finite.\ntheorem witt_structure_rat_vars [fintype idx] (Φ : mv_polynomial idx (exprℚ)) (n : ℕ) :\n    (witt_structure_rat p Φ n).vars ⊆ finset.product finset.univ (Finset.range (n + 1)) :=\n  by\n  rw [witt_structure_rat]\n  intro x hx\n  simp only [finset.mem_product, true_and_iff, finset.mem_univ, Finset.mem_range]\n  obtain ⟨k, hk, hx'⟩ := mem_vars_bind₁ _ _ hx\n  obtain ⟨i, -, hx''⟩ := mem_vars_bind₁ _ _ hx'\n  obtain ⟨j, hj, rfl⟩ := mem_vars_rename _ _ hx''\n  rw [witt_polynomial_vars, Finset.mem_range] at hj\n  replace hk := X_in_terms_of_W_vars_subset p _ hk\n  rw [Finset.mem_range] at hk\n  exact lt_of_lt_of_le hj hk\n#align witt_structure_rat_vars witt_structure_rat_vars\n\n",
 "witt_structure_rat_rec_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem witt_structure_rat_rec_aux (Φ : mv_polynomial idx (exprℚ)) (n : ℕ) :\n    witt_structure_rat p Φ n * C (p ^ n : exprℚ) =\n      bind₁ (fun b => rename (fun i => (b, i)) ((witt_polynomial) (exprℚ) n)) Φ -\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (C (p ^ i : exprℚ) * witt_structure_rat p Φ i ^ p ^ (n - i)) :=\n  by\n  have := X_in_terms_of_W_aux p (exprℚ) n\n  replace := congr_arg (bind₁ fun k : ℕ => bind₁ (fun i => rename (prod.mk i) ((witt_polynomial) (exprℚ) k)) Φ) this\n  rw [alg_hom.map_mul, bind₁_C_right] at this\n  rw [witt_structure_rat, this]; clear this\n  conv_lhs => simp only [alg_hom.map_sub, bind₁_X_right]\n  rw [sub_right_inj]\n  simp only [alg_hom.map_sum, alg_hom.map_mul, bind₁_C_right, alg_hom.map_pow]\n  rfl\n#align witt_structure_rat_rec_aux witt_structure_rat_rec_aux\n\n",
 "witt_structure_rat_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- Write `witt_structure_rat p φ n` in terms of `witt_structure_rat p φ i` for `i < n`. -/\ntheorem witt_structure_rat_rec (Φ : mv_polynomial idx (exprℚ)) (n : ℕ) :\n    witt_structure_rat p Φ n =\n      C (1 / p ^ n : exprℚ) *\n        (bind₁ (fun b => rename (fun i => (b, i)) ((witt_polynomial) (exprℚ) n)) Φ -\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n            (C (p ^ i : exprℚ) * witt_structure_rat p Φ i ^ p ^ (n - i))) :=\n  by\n  calc\n    witt_structure_rat p Φ n = C (1 / p ^ n : exprℚ) * (witt_structure_rat p Φ n * C (p ^ n : exprℚ)) := _\n    _ = _ := by rw [witt_structure_rat_rec_aux]\n    \n  rw [mul_left_comm, ← C_mul, div_mul_cancel, C_1, mul_one]\n  exact pow_ne_zero _ (Nat.cast_ne_zero.2 hp.1.ne_zero)\n#align witt_structure_rat_rec witt_structure_rat_rec\n\n",
 "witt_structure_rat_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Robert Y. Lewis\n-/\n-- This lemma reduces a bundled morphism to a \"mere\" function,\n-- and consequently the simplifier cannot use a lot of powerful simp-lemmas.\n-- We disable this locally, and probably it should be disabled globally in mathlib.\ntheorem witt_structure_rat_prop (Φ : mv_polynomial idx (exprℚ)) (n : ℕ) :\n    bind₁ (witt_structure_rat p Φ) ((witt_polynomial) (exprℚ) n) =\n      bind₁ (fun i => rename (prod.mk i) ((witt_polynomial) (exprℚ) n)) Φ :=\n  calc\n    bind₁ (witt_structure_rat p Φ) ((witt_polynomial) (exprℚ) n) =\n        bind₁ (fun k => bind₁ (fun i => (rename (prod.mk i)) ((witt_polynomial) (exprℚ) k)) Φ)\n          (bind₁ (X_in_terms_of_W p (exprℚ)) ((witt_polynomial) (exprℚ) n)) :=\n      by\n      rw [bind₁_bind₁]\n      exact eval₂_hom_congr (RingHom.ext_rat _ _) rfl rfl\n    _ = bind₁ (fun i => rename (prod.mk i) ((witt_polynomial) (exprℚ) n)) Φ := by\n      rw [bind₁_X_in_terms_of_W_witt_polynomial p _ n, bind₁_X_right]\n    \n#align witt_structure_rat_prop witt_structure_rat_prop\n\n",
 "witt_structure_rat_exists_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem witt_structure_rat_exists_unique (Φ : mv_polynomial idx (exprℚ)) :\n    ∃! φ : ℕ → mv_polynomial (idx × ℕ) (exprℚ),\n      ∀ n : ℕ,\n        bind₁ φ ((witt_polynomial) (exprℚ) n) = bind₁ (fun i => rename (prod.mk i) ((witt_polynomial) (exprℚ) n)) Φ :=\n  by\n  refine' ⟨witt_structure_rat p Φ, _, _⟩\n  · intro n\n    apply witt_structure_rat_prop\n  · intro φ H\n    funext n\n    rw [show φ n = bind₁ φ (bind₁ ((witt_polynomial) (exprℚ)) (X_in_terms_of_W p (exprℚ) n)) by\n        rw [bind₁_witt_polynomial_X_in_terms_of_W p, bind₁_X_right]]\n    rw [bind₁_bind₁]\n    exact eval₂_hom_congr (RingHom.ext_rat _ _) (funext H) rfl\n#align witt_structure_rat_exists_unique witt_structure_rat_exists_unique\n\n",
 "witt_structure_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial.infer -/\ntheorem witt_structure_prop (Φ : mv_polynomial idx ℤ) (n) :\n    aeval (fun i => map (Int.castRingHom R) (witt_structure_int p Φ i)) (witt_polynomial p ℤ n) =\n      aeval (fun i => rename (prod.mk i) ((witt_polynomial.infer) n)) Φ :=\n  by\n  convert congr_arg (map (Int.castRingHom R)) (witt_structure_int_prop p Φ n) using 1 <;> rw [hom_bind₁] <;>\n    apply eval₂_hom_congr (RingHom.ext_int _ _) _ rfl\n  · rfl\n  · simp only [map_rename, map_witt_polynomial]\n#align witt_structure_prop witt_structure_prop\n\n",
 "witt_structure_int_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n-- we could relax the fintype on `idx`, but then we need to cast from finset to set.\n-- for our applications `idx` is always finite.\ntheorem witt_structure_int_vars [fintype idx] (Φ : mv_polynomial idx ℤ) (n : ℕ) :\n    (witt_structure_int p Φ n).vars ⊆ finset.product finset.univ (Finset.range (n + 1)) :=\n  by\n  have : function.injective (Int.castRingHom (exprℚ)) := Int.cast_injective\n  rw [← vars_map_of_injective _ this, map_witt_structure_int]\n  apply witt_structure_rat_vars\n#align witt_structure_int_vars witt_structure_int_vars\n\n",
 "witt_structure_int_rename":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem witt_structure_int_rename {σ : Type _} (Φ : mv_polynomial idx ℤ) (f : idx → σ) (n : ℕ) :\n    witt_structure_int p (rename f Φ) n = rename (prod.map f id) (witt_structure_int p Φ n) :=\n  by\n  apply mv_polynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [map_rename, map_witt_structure_int, witt_structure_rat, rename_bind₁, rename_rename, bind₁_rename]\n  rfl\n#align witt_structure_int_rename witt_structure_int_rename\n\n",
 "witt_structure_int_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\ntheorem witt_structure_int_prop (Φ : mv_polynomial idx ℤ) (n) :\n    bind₁ (witt_structure_int p Φ) (witt_polynomial p ℤ n) =\n      bind₁ (fun i => rename (prod.mk i) ((witt_polynomial) ℤ n)) Φ :=\n  by\n  apply mv_polynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  have := witt_structure_rat_prop p (map (Int.castRingHom (exprℚ)) Φ) n\n  simpa only [map_bind₁, ← eval₂_hom_map_hom, eval₂_hom_C_left, map_rename, map_witt_polynomial,\n    alg_hom.coe_to_ring_hom, map_witt_structure_int]\n#align witt_structure_int_prop witt_structure_int_prop\n\n",
 "witt_structure_int_exists_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\ntheorem witt_structure_int_exists_unique (Φ : mv_polynomial idx ℤ) :\n    ∃! φ : ℕ → mv_polynomial (idx × ℕ) ℤ,\n      ∀ n : ℕ, bind₁ φ (witt_polynomial p ℤ n) = bind₁ (fun i : idx => rename (prod.mk i) ((witt_polynomial) ℤ n)) Φ :=\n  ⟨witt_structure_int p Φ, witt_structure_int_prop _ _, eq_witt_structure_int _ _⟩\n#align witt_structure_int_exists_unique witt_structure_int_exists_unique\n\n",
 "map_witt_structure_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem map_witt_structure_int (Φ : mv_polynomial idx ℤ) (n : ℕ) :\n    map (Int.castRingHom (exprℚ)) (witt_structure_int p Φ n) =\n      witt_structure_rat p (map (Int.castRingHom (exprℚ)) Φ) n :=\n  by\n  apply nat.strong_induction_on n\n  clear n\n  intro n IH\n  rw [witt_structure_int, map_map_range_eq_iff, Int.coe_castRingHom]\n  intro c\n  rw [witt_structure_rat_rec, coeff_C_mul, mul_comm, mul_div_assoc', mul_one]\n  have sum_induction_steps :\n    map (Int.castRingHom (exprℚ))\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (C (p ^ i : ℤ) * witt_structure_int p Φ i ^ p ^ (n - i))) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        (C (p ^ i : exprℚ) * witt_structure_rat p (map (Int.castRingHom (exprℚ)) Φ) i ^ p ^ (n - i)) :=\n    by\n    rw [ring_hom.map_sum]\n    apply finset.sum_congr rfl\n    intro i hi\n    rw [Finset.mem_range] at hi\n    simp only [IH i hi, RingHom.map_mul, RingHom.map_pow, map_C]\n    rfl\n  simp only [← sum_induction_steps, ← map_witt_polynomial p (Int.castRingHom (exprℚ)), ← map_rename, ← map_bind₁, ←\n    RingHom.map_sub, coeff_map]\n  rw [show (p : exprℚ) ^ n = ((p ^ n : ℕ) : ℤ) by norm_cast]\n  rw [← Rat.den_eq_one_iff, eq_intCast, Rat.den_div_cast_eq_one_iff]\n  swap\n  · exact_mod_cast pow_ne_zero n hp.1.ne_zero\n  revert c\n  rw [← C_dvd_iff_dvd_coeff]\n  exact C_p_pow_dvd_bind₁_rename_witt_polynomial_sub_sum Φ n IH\n#align map_witt_structure_int map_witt_structure_int\n\n",
 "eq_witt_structure_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\ntheorem eq_witt_structure_int (Φ : mv_polynomial idx ℤ) (φ : ℕ → mv_polynomial (idx × ℕ) ℤ)\n    (h : ∀ n, bind₁ φ (witt_polynomial p ℤ n) = bind₁ (fun i => rename (prod.mk i) ((witt_polynomial) ℤ n)) Φ) :\n    φ = witt_structure_int p Φ := by\n  funext k\n  apply mv_polynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  rw [map_witt_structure_int]\n  refine' congr_fun _ k\n  apply ExistsUnique.unique (witt_structure_rat_exists_unique p (map (Int.castRingHom (exprℚ)) Φ))\n  · intro n\n    specialize h n\n    apply_fun map (Int.castRingHom (exprℚ))  at h\n    simpa only [map_bind₁, ← eval₂_hom_map_hom, eval₂_hom_C_left, map_rename, map_witt_polynomial,\n      alg_hom.coe_to_ring_hom] using h\n  · intro n\n    apply witt_structure_rat_prop\n#align eq_witt_structure_int eq_witt_structure_int\n\n",
 "constant_coeff_witt_structure_rat_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem constant_coeff_witt_structure_rat_zero (Φ : mv_polynomial idx (exprℚ)) :\n    constant_coeff (witt_structure_rat p Φ 0) = constant_coeff Φ := by\n  simp only [witt_structure_rat, bind₁, map_aeval, X_in_terms_of_W_zero, constant_coeff_rename,\n    constant_coeff_witt_polynomial, aeval_X, constant_coeff_comp_algebra_map, eval₂_hom_zero'_apply, RingHom.id_apply]\n#align constant_coeff_witt_structure_rat_zero constant_coeff_witt_structure_rat_zero\n\n",
 "constant_coeff_witt_structure_rat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem constant_coeff_witt_structure_rat (Φ : mv_polynomial idx (exprℚ)) (h : constant_coeff Φ = 0) (n : ℕ) :\n    constant_coeff (witt_structure_rat p Φ n) = 0 := by\n  simp only [witt_structure_rat, eval₂_hom_zero'_apply, h, bind₁, map_aeval, constant_coeff_rename,\n    constant_coeff_witt_polynomial, constant_coeff_comp_algebra_map, RingHom.id_apply, constant_coeff_X_in_terms_of_W]\n#align constant_coeff_witt_structure_rat constant_coeff_witt_structure_rat\n\n",
 "constant_coeff_witt_structure_int_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem constant_coeff_witt_structure_int_zero (Φ : mv_polynomial idx ℤ) :\n    constant_coeff (witt_structure_int p Φ 0) = constant_coeff Φ :=\n  by\n  have inj : function.injective (Int.castRingHom (exprℚ)) :=\n    by\n    intro m n\n    exact int.cast_inj.mp\n  apply inj\n  rw [← constant_coeff_map, map_witt_structure_int, constant_coeff_witt_structure_rat_zero, constant_coeff_map]\n#align constant_coeff_witt_structure_int_zero constant_coeff_witt_structure_int_zero\n\n",
 "constant_coeff_witt_structure_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem constant_coeff_witt_structure_int (Φ : mv_polynomial idx ℤ) (h : constant_coeff Φ = 0) (n : ℕ) :\n    constant_coeff (witt_structure_int p Φ n) = 0 :=\n  by\n  have inj : function.injective (Int.castRingHom (exprℚ)) :=\n    by\n    intro m n\n    exact int.cast_inj.mp\n  apply inj\n  rw [← constant_coeff_map, map_witt_structure_int, constant_coeff_witt_structure_rat, RingHom.map_zero]\n  rw [constant_coeff_map, h, RingHom.map_zero]\n#align constant_coeff_witt_structure_int constant_coeff_witt_structure_int\n\n",
 "bind₁_rename_expand_witt_polynomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\ntheorem bind₁_rename_expand_witt_polynomial (Φ : mv_polynomial idx ℤ) (n : ℕ)\n    (IH :\n      ∀ m : ℕ,\n        m < n + 1 →\n          map (Int.castRingHom (exprℚ)) (witt_structure_int p Φ m) =\n            witt_structure_rat p (map (Int.castRingHom (exprℚ)) Φ) m) :\n    bind₁ (fun b => rename (fun i => (b, i)) (expand p ((witt_polynomial) ℤ n))) Φ =\n      bind₁ (fun i => expand p (witt_structure_int p Φ i)) ((witt_polynomial) ℤ n) :=\n  by\n  apply mv_polynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [map_bind₁, map_rename, map_expand, rename_expand, map_witt_polynomial]\n  have key := (witt_structure_rat_prop p (map (Int.castRingHom (exprℚ)) Φ) n).symm\n  apply_fun expand p  at key\n  simp only [expand_bind₁] at key\n  rw [key]; clear key\n  apply eval₂_hom_congr' rfl _ rfl\n  rintro i hi -\n  rw [witt_polynomial_vars, Finset.mem_range] at hi\n  simp only [IH i hi]\n#align bind₁_rename_expand_witt_polynomial bind₁_rename_expand_witt_polynomial\n\n",
 "C_p_pow_dvd_bind₁_rename_witt_polynomial_sub_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem C_p_pow_dvd_bind₁_rename_witt_polynomial_sub_sum (Φ : mv_polynomial idx ℤ) (n : ℕ)\n    (IH :\n      ∀ m : ℕ,\n        m < n →\n          map (Int.castRingHom (exprℚ)) (witt_structure_int p Φ m) =\n            witt_structure_rat p (map (Int.castRingHom (exprℚ)) Φ) m) :\n    C ↑(p ^ n) ∣\n      bind₁ (fun b : idx => rename (fun i => (b, i)) (witt_polynomial p ℤ n)) Φ -\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (C (↑p ^ i) * witt_structure_int p Φ i ^ p ^ (n - i)) :=\n  by\n  cases n\n  · simp only [isUnit_one, Int.ofNat_zero, Int.ofNat_succ, zero_add, pow_zero, C_1, is_unit.dvd]\n  -- prepare a useful equation for rewriting\n  have key := bind₁_rename_expand_witt_polynomial Φ n IH\n  apply_fun map (Int.castRingHom (zmod (p ^ (n + 1))))  at key\n  conv_lhs at key => simp only [map_bind₁, map_rename, map_expand, map_witt_polynomial]\n  -- clean up and massage\n  rw [nat.succ_eq_add_one, C_dvd_iff_zmod, RingHom.map_sub, sub_eq_zero, map_bind₁]\n  simp only [map_rename, map_witt_polynomial, witt_polynomial_zmod_self]\n  rw [key]; clear key IH\n  rw [bind₁, aeval_witt_polynomial, ring_hom.map_sum, ring_hom.map_sum, finset.sum_congr rfl]\n  intro k hk\n  rw [Finset.mem_range, Nat.lt_succ_iff] at hk\n  simp only [← sub_eq_zero, ← RingHom.map_sub, ← C_dvd_iff_zmod, C_eq_coe_nat, ← mul_sub, ← Nat.cast_pow]\n  rw [show p ^ (n + 1) = p ^ k * p ^ (n - k + 1) by rw [← pow_add, ← add_assoc]; congr 2;\n      rw [add_comm, ← tsub_eq_iff_eq_add_of_le hk]]\n  rw [nat.cast_mul, Nat.cast_pow, Nat.cast_pow]\n  apply mul_dvd_mul_left\n  rw [show p ^ (n + 1 - k) = p * p ^ (n - k) by rw [← pow_succ, ← tsub_add_eq_add_tsub hk]]\n  rw [pow_mul]\n  -- the machine!\n  apply dvd_sub_pow_of_dvd_sub\n  rw [← C_eq_coe_nat, C_dvd_iff_zmod, RingHom.map_sub, sub_eq_zero, map_expand, RingHom.map_pow,\n    mv_polynomial.expand_zmod]\n#align C_p_pow_dvd_bind₁_rename_witt_polynomial_sub_sum C_p_pow_dvd_bind₁_rename_witt_polynomial_sub_sum\n\n"}