{"zsmul":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem zsmul (z : ℤ) : map_fun f («expr • » z x) = «expr • » z (map_fun f x) := by\n  run_tac\n    map_fun_tac\n#align zsmul zsmul\n\n",
 "zero":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n-- We do not tag these lemmas as `@[simp]` because they will be bundled in `map` later on.\ntheorem zero : map_fun f (0 : (expr𝕎) R) = 0 := by\n  run_tac\n    map_fun_tac\n#align zero zero\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem surjective (f : α → β) (hf : surjective f) : surjective (map_fun f : (expr𝕎) α → (expr𝕎) β) := fun x =>\n  ⟨mk _ fun n => Classical.choose <| hf <| x.coeff n, by\n    ext n\n    dsimp [map_fun]\n    rw [Classical.choose_spec (hf (x.coeff n))]⟩\n#align surjective surjective\n\n",
 "sub":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\ntheorem sub : map_fun f (x - y) = map_fun f x - map_fun f y := by\n  run_tac\n    map_fun_tac\n#align sub sub\n\n",
 "pow":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\ntheorem pow (n : ℕ) : map_fun f (x ^ n) = map_fun f x ^ n := by\n  run_tac\n    map_fun_tac\n#align pow pow\n\n",
 "one":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem one : map_fun f (1 : (expr𝕎) R) = 1 := by\n  run_tac\n    map_fun_tac\n#align one one\n\n",
 "nsmul":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem nsmul (n : ℕ) : map_fun f («expr • » n x) = «expr • » n (map_fun f x) := by\n  run_tac\n    map_fun_tac\n#align nsmul nsmul\n\n",
 "neg":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\ntheorem neg : map_fun f (-x) = -map_fun f x := by\n  run_tac\n    map_fun_tac\n#align neg neg\n\n",
 "nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem nat_cast (n : ℕ) : map_fun f (n : (expr𝕎) R) = n :=\n  show map_fun f n.unary_cast = coe n by induction n <;> simp [*, Nat.unaryCast, add, one, zero] <;> rfl\n#align nat_cast nat_cast\n\n",
 "mul":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\ntheorem mul : map_fun f (x * y) = map_fun f x * map_fun f y := by\n  run_tac\n    map_fun_tac\n#align mul mul\n\n",
 "matrix_vec_empty_coeff":
 "-- The following lemmas are not `@[simp]` because they will be bundled in `ghost_map` later on.\n@[local simp]\ntheorem matrix_vec_empty_coeff {R} (i j) : @coeff p R (matrix.vec_empty i) j = (matrix.vec_empty i : ℕ → R) j := by\n  rcases i with ⟨_ | _ | _ | _ | i_val, ⟨⟩⟩\n#align matrix_vec_empty_coeff matrix_vec_empty_coeff\n\n",
 "map_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem map_surjective (f : «expr →+* » R S) (hf : surjective f) : surjective (map f : (expr𝕎) R → (expr𝕎) S) :=\n  map_fun.surjective f hf\n#align map_surjective map_surjective\n\n",
 "map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem map_injective (f : «expr →+* » R S) (hf : injective f) : injective (map f : (expr𝕎) R → (expr𝕎) S) :=\n  map_fun.injective f hf\n#align map_injective map_injective\n\n",
 "map_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n@[simp]\ntheorem map_coeff (f : «expr →+* » R S) (x : (expr𝕎) R) (n : ℕ) : (map f x).coeff n = f (x.coeff n) :=\n  rfl\n#align map_coeff map_coeff\n\n",
 "int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem int_cast (n : ℤ) : map_fun f (n : (expr𝕎) R) = n :=\n  show map_fun f n.cast_def = coe n by cases n <;> simp [*, Int.castDef, add, one, neg, zero, nat_cast] <;> rfl\n#align int_cast int_cast\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Robert Y. Lewis\n-/\n-- type as `\\bbW`\ntheorem injective (f : α → β) (hf : injective f) : injective (map_fun f : (expr𝕎) α → (expr𝕎) β) := fun x y h =>\n  ext fun n => hf (congr_arg (fun x => coeff x n) h : _)\n#align injective injective\n\n",
 "ghost_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n@[simp]\ntheorem ghost_map_apply (x : (expr𝕎) R) (n : ℕ) : ghost_map x n = ghost_component n x :=\n  rfl\n#align ghost_map_apply ghost_map_apply\n\n",
 "ghost_fun_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem ghost_fun_zsmul (m : ℤ) : ghost_fun («expr • » m x) = «expr • » m (ghost_fun x) := by\n  ghost_fun_tac «expr • » m (X 0),\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_zsmul ghost_fun_zsmul\n\n",
 "ghost_fun_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\nprivate theorem ghost_fun_zero : ghost_fun (0 : (expr𝕎) R) = 0 := by\n  ghost_fun_tac 0, «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_zero ghost_fun_zero\n\n",
 "ghost_fun_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\nprivate theorem ghost_fun_sub : ghost_fun (x - y) = ghost_fun x - ghost_fun y := by\n  ghost_fun_tac X 0 - X 1,\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_sub ghost_fun_sub\n\n",
 "ghost_fun_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\nprivate theorem ghost_fun_pow (m : ℕ) : ghost_fun (x ^ m) = ghost_fun x ^ m := by\n  ghost_fun_tac X 0 ^ m,\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_pow ghost_fun_pow\n\n",
 "ghost_fun_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\nprivate theorem ghost_fun_one : ghost_fun (1 : (expr𝕎) R) = 1 := by\n  ghost_fun_tac 1, «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_one ghost_fun_one\n\n",
 "ghost_fun_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem ghost_fun_nsmul (m : ℕ) : ghost_fun («expr • » m x) = «expr • » m (ghost_fun x) := by\n  ghost_fun_tac «expr • » m (X 0),\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_nsmul ghost_fun_nsmul\n\n",
 "ghost_fun_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\nprivate theorem ghost_fun_neg : ghost_fun (-x) = -ghost_fun x := by\n  ghost_fun_tac -X 0, «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_neg ghost_fun_neg\n\n",
 "ghost_fun_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\nprivate theorem ghost_fun_nat_cast (i : ℕ) : ghost_fun (i : (expr𝕎) R) = i :=\n  show ghost_fun i.unary_cast = _ by\n    induction i <;> simp [*, Nat.unaryCast, ghost_fun_zero, ghost_fun_one, ghost_fun_add, -pi.coe_nat]\n#align ghost_fun_nat_cast ghost_fun_nat_cast\n\n",
 "ghost_fun_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\nprivate theorem ghost_fun_mul : ghost_fun (x * y) = ghost_fun x * ghost_fun y := by\n  ghost_fun_tac X 0 * X 1,\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_mul ghost_fun_mul\n\n",
 "ghost_fun_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\nprivate theorem ghost_fun_int_cast (i : ℤ) : ghost_fun (i : (expr𝕎) R) = i :=\n  show ghost_fun i.cast_def = _ by\n    cases i <;> simp [*, Int.castDef, ghost_fun_nat_cast, ghost_fun_neg, -pi.coe_nat, -Pi.coe_int]\n#align ghost_fun_int_cast ghost_fun_int_cast\n\n",
 "ghost_fun_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\nprivate theorem ghost_fun_add : ghost_fun (x + y) = ghost_fun x + ghost_fun y := by\n  ghost_fun_tac X 0 + X 1,\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n#align ghost_fun_add ghost_fun_add\n\n",
 "ghost_equiv_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n@[simp]\ntheorem ghost_equiv_coe : (ghost_equiv p R : «expr →+* » ((expr𝕎) R) (ℕ → R)) = ghost_map :=\n  rfl\n#align ghost_equiv_coe ghost_equiv_coe\n\n",
 "ghost_component_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `witt_polynomial -/\ntheorem ghost_component_apply (n : ℕ) (x : (expr𝕎) R) : ghost_component n x = aeval x.coeff ((witt_polynomial) ℤ n) :=\n  rfl\n#align ghost_component_apply ghost_component_apply\n\n",
 "bijective_of_invertible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem ghost_map.bijective_of_invertible : function.bijective (ghost_map : (expr𝕎) R → ℕ → R) :=\n  (ghost_equiv p R).bijective\n#align ghost_map.bijective_of_invertible ghost_map.bijective_of_invertible\n\n",
 "add":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:72:18: unsupported non-interactive tactic witt_vector.map_fun.map_fun_tac -/\ntheorem add : map_fun f (x + y) = map_fun f x + map_fun f y := by\n  run_tac\n    map_fun_tac\n#align add add\n\n"}