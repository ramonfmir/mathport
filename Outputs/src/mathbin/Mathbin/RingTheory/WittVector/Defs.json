{"zsmul_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem zsmul_coeff (m : ℤ) (x : (expr𝕎) R) (n : ℕ) :\n    («expr • » m x).coeff n =\n      peval (witt_zsmul p m n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [has_smul.smul, eval, Matrix.cons_fin_one]\n#align zsmul_coeff zsmul_coeff\n\n",
 "zero_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n@[simp]\ntheorem zero_coeff (n : ℕ) : (0 : (expr𝕎) R).coeff n = 0 :=\n  show (aeval _ (witt_zero p n) : R) = 0 by simp only [witt_zero_eq_zero, AlgHom.map_zero]\n#align zero_coeff zero_coeff\n\n",
 "witt_zsmul_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_zsmul_vars (m : ℤ) (n : ℕ) : (witt_zsmul p m n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_zsmul_vars witt_zsmul_vars\n\n",
 "witt_zero_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- These instances are not needed for the rest of the development,\nbut it is interesting to establish early on that `witt_vector p` is a lawful functor. -/\n@[simp]\ntheorem witt_zero_eq_zero (n : ℕ) : witt_zero p n = 0 :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_zero, witt_structure_rat, bind₁, aeval_zero', constant_coeff_X_in_terms_of_W, RingHom.map_zero,\n    AlgHom.map_zero, map_witt_structure_int]\n#align witt_zero_eq_zero witt_zero_eq_zero\n\n",
 "witt_sub_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem witt_sub_zero : witt_sub p 0 = X (0, 0) - X (1, 0) :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_sub, witt_structure_rat, AlgHom.map_sub, RingHom.map_sub, rename_X, X_in_terms_of_W_zero, map_X,\n    witt_polynomial_zero, bind₁_X_right, map_witt_structure_int]\n#align witt_sub_zero witt_sub_zero\n\n",
 "witt_sub_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_sub_vars (n : ℕ) : (witt_sub p n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_sub_vars witt_sub_vars\n\n",
 "witt_pow_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_pow_vars (m : ℕ) (n : ℕ) : (witt_pow p m n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_pow_vars witt_pow_vars\n\n",
 "witt_one_zero_eq_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem witt_one_zero_eq_one : witt_one p 0 = 1 :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_one, witt_structure_rat, X_in_terms_of_W_zero, AlgHom.map_one, RingHom.map_one, bind₁_X_right,\n    map_witt_structure_int]\n#align witt_one_zero_eq_one witt_one_zero_eq_one\n\n",
 "witt_one_pos_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem witt_one_pos_eq_zero (n : ℕ) (hn : 0 < n) : witt_one p n = 0 :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_one, witt_structure_rat, RingHom.map_zero, AlgHom.map_one, RingHom.map_one, map_witt_structure_int]\n  revert hn; apply nat.strong_induction_on n; clear n\n  intro n IH hn\n  rw [X_in_terms_of_W_eq]\n  simp only [AlgHom.map_mul, AlgHom.map_sub, AlgHom.map_sum, AlgHom.map_pow, bind₁_X_right, bind₁_C_right]\n  rw [sub_mul, one_mul]\n  rw [Finset.sum_eq_single 0]\n  · simp only [invOf_eq_inv, one_mul, inv_pow, tsub_zero, RingHom.map_one, pow_zero]\n    simp only [one_pow, one_mul, X_in_terms_of_W_zero, sub_self, bind₁_X_right]\n  · intro i hin hi0\n    rw [Finset.mem_range] at hin\n    rw [IH _ hin (nat.pos_of_ne_zero hi0), zero_pow (pow_pos hp.1.pos _), MulZeroClass.mul_zero]\n  · rw [Finset.mem_range]\n    intro\n    contradiction\n#align witt_one_pos_eq_zero witt_one_pos_eq_zero\n\n",
 "witt_nsmul_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_nsmul_vars (m : ℕ) (n : ℕ) : (witt_nsmul p m n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_nsmul_vars witt_nsmul_vars\n\n",
 "witt_neg_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem witt_neg_zero : witt_neg p 0 = -X (0, 0) :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_neg, witt_structure_rat, rename_X, X_in_terms_of_W_zero, map_X, witt_polynomial_zero, RingHom.map_neg,\n    AlgHom.map_neg, bind₁_X_right, map_witt_structure_int]\n#align witt_neg_zero witt_neg_zero\n\n",
 "witt_neg_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_neg_vars (n : ℕ) : (witt_neg p n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_neg_vars witt_neg_vars\n\n",
 "witt_mul_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem witt_mul_zero : witt_mul p 0 = X (0, 0) * X (1, 0) :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_mul, witt_structure_rat, rename_X, X_in_terms_of_W_zero, map_X, witt_polynomial_zero, RingHom.map_mul,\n    bind₁_X_right, AlgHom.map_mul, map_witt_structure_int]\n#align witt_mul_zero witt_mul_zero\n\n",
 "witt_mul_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_mul_vars (n : ℕ) : (witt_mul p n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_mul_vars witt_mul_vars\n\n",
 "witt_add_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem witt_add_zero : witt_add p 0 = X (0, 0) + X (1, 0) :=\n  by\n  apply MvPolynomial.map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [witt_add, witt_structure_rat, AlgHom.map_add, RingHom.map_add, rename_X, X_in_terms_of_W_zero, map_X,\n    witt_polynomial_zero, bind₁_X_right, map_witt_structure_int]\n#align witt_add_zero witt_add_zero\n\n",
 "witt_add_vars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem witt_add_vars (n : ℕ) : (witt_add p n).vars ⊆ finset.product Finset.univ (Finset.range (n + 1)) :=\n  witt_structure_int_vars _ _ _\n#align witt_add_vars witt_add_vars\n\n",
 "v2_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem v2_coeff {p' R'} (x y : witt_vector p' R') (i : Fin 2) :\n    ((«expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") i).coeff =\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") i :=\n  by fin_cases i <;> simp\n#align v2_coeff v2_coeff\n\n",
 "sub_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem sub_coeff (x y : (expr𝕎) R) (n : ℕ) :\n    (x - y).coeff n =\n      peval (witt_sub p n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [has_sub.sub, eval]\n#align sub_coeff sub_coeff\n\n",
 "pow_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem pow_coeff (m : ℕ) (x : (expr𝕎) R) (n : ℕ) :\n    (x ^ m).coeff n =\n      peval (witt_pow p m n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [has_pow.pow, eval, Matrix.cons_fin_one]\n#align pow_coeff pow_coeff\n\n",
 "one_coeff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n@[simp]\ntheorem one_coeff_zero : (1 : (expr𝕎) R).coeff 0 = 1 :=\n  show (aeval _ (witt_one p 0) : R) = 1 by simp only [witt_one_zero_eq_one, AlgHom.map_one]\n#align one_coeff_zero one_coeff_zero\n\n",
 "one_coeff_eq_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n@[simp]\ntheorem one_coeff_eq_of_pos (n : ℕ) (hn : 0 < n) : coeff (1 : (expr𝕎) R) n = 0 :=\n  show (aeval _ (witt_one p n) : R) = 0 by simp only [hn, witt_one_pos_eq_zero, AlgHom.map_zero]\n#align one_coeff_eq_of_pos one_coeff_eq_of_pos\n\n",
 "nsmul_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem nsmul_coeff (m : ℕ) (x : (expr𝕎) R) (n : ℕ) :\n    («expr • » m x).coeff n =\n      peval (witt_nsmul p m n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [has_smul.smul, eval, Matrix.cons_fin_one]\n#align nsmul_coeff nsmul_coeff\n\n",
 "neg_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem neg_coeff (x : (expr𝕎) R) (n : ℕ) :\n    (-x).coeff n =\n      peval (witt_neg p n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [has_neg.neg, eval, Matrix.cons_fin_one]\n#align neg_coeff neg_coeff\n\n",
 "mul_coeff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem mul_coeff_zero (x y : (expr𝕎) R) : (x * y).coeff 0 = x.coeff 0 * y.coeff 0 := by simp [mul_coeff, peval]\n#align mul_coeff_zero mul_coeff_zero\n\n",
 "mul_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem mul_coeff (x y : (expr𝕎) R) (n : ℕ) :\n    (x * y).coeff n =\n      peval (witt_mul p n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [(· * ·), eval]\n#align mul_coeff mul_coeff\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem ext_iff {x y : (expr𝕎) R} : x = y ↔ ∀ n, x.coeff n = y.coeff n :=\n  ⟨fun h n => by rw [h], ext⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Robert Y. Lewis\n-/\n/- We cannot make this `localized` notation, because the `p` on the RHS doesn't occur on the left\nHiding the `p` in the notation is very convenient, so we opt for repeating the `local notation`\nin other files that use Witt vectors. -/\n-- type as `\\bbW`\n@[ext]\ntheorem ext {x y : (expr𝕎) R} (h : ∀ n, x.coeff n = y.coeff n) : x = y :=\n  by\n  cases x\n  cases y\n  simp only at h\n  simp [Function.funext_iff, h]\n#align ext ext\n\n",
 "constant_coeff_witt_zsmul":
 "@[simp]\ntheorem constant_coeff_witt_zsmul (z : ℤ) (n : ℕ) : constantCoeff (witt_zsmul p z n) = 0 :=\n  by\n  apply constant_coeff_witt_structure_int p _ _ n\n  simp only [smul_zero, map_zsmul, constant_coeff_X]\n#align constant_coeff_witt_zsmul constant_coeff_witt_zsmul\n\n",
 "constant_coeff_witt_sub":
 "@[simp]\ntheorem constant_coeff_witt_sub (n : ℕ) : constantCoeff (witt_sub p n) = 0 :=\n  by\n  apply constant_coeff_witt_structure_int p _ _ n\n  simp only [sub_zero, RingHom.map_sub, constant_coeff_X]\n#align constant_coeff_witt_sub constant_coeff_witt_sub\n\n",
 "constant_coeff_witt_nsmul":
 "@[simp]\ntheorem constant_coeff_witt_nsmul (m : ℕ) (n : ℕ) : constantCoeff (witt_nsmul p m n) = 0 :=\n  by\n  apply constant_coeff_witt_structure_int p _ _ n\n  simp only [smul_zero, map_nsmul, constant_coeff_X]\n#align constant_coeff_witt_nsmul constant_coeff_witt_nsmul\n\n",
 "constant_coeff_witt_neg":
 "@[simp]\ntheorem constant_coeff_witt_neg (n : ℕ) : constantCoeff (witt_neg p n) = 0 :=\n  by\n  apply constant_coeff_witt_structure_int p _ _ n\n  simp only [neg_zero, RingHom.map_neg, constant_coeff_X]\n#align constant_coeff_witt_neg constant_coeff_witt_neg\n\n",
 "constant_coeff_witt_mul":
 "@[simp]\ntheorem constant_coeff_witt_mul (n : ℕ) : constantCoeff (witt_mul p n) = 0 :=\n  by\n  apply constant_coeff_witt_structure_int p _ _ n\n  simp only [MulZeroClass.mul_zero, RingHom.map_mul, constant_coeff_X]\n#align constant_coeff_witt_mul constant_coeff_witt_mul\n\n",
 "constant_coeff_witt_add":
 "@[simp]\ntheorem constant_coeff_witt_add (n : ℕ) : constantCoeff (witt_add p n) = 0 :=\n  by\n  apply constant_coeff_witt_structure_int p _ _ n\n  simp only [add_zero, RingHom.map_add, constant_coeff_X]\n#align constant_coeff_witt_add constant_coeff_witt_add\n\n",
 "coeff_mk":
 "theorem coeff_mk (x : ℕ → R) : (mk p x).coeff = x :=\n  rfl\n#align coeff_mk coeff_mk\n\n",
 "add_coeff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\ntheorem add_coeff_zero (x y : (expr𝕎) R) : (x + y).coeff 0 = x.coeff 0 + y.coeff 0 := by simp [add_coeff, peval]\n#align add_coeff_zero add_coeff_zero\n\n",
 "add_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr𝕎 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem add_coeff (x y : (expr𝕎) R) (n : ℕ) :\n    (x + y).coeff n =\n      peval (witt_add p n)\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by simp [(· + ·), eval]\n#align add_coeff add_coeff\n\n"}