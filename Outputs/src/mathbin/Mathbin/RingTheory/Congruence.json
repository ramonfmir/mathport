{"trans":
 "#print trans /-\nprotected theorem trans {x y z} : c x y → c y z → c x z :=\n  c.trans'\n#align trans trans\n-/\n\n",
 "symm":
 "#print symm /-\nprotected theorem symm {x y} : c x y → c y x :=\n  c.symm'\n#align symm symm\n-/\n\n",
 "rel_mk":
 "@[simp]\ntheorem rel_mk {s : setoid R} {ha hm a b} : ring_con.mk s ha hm a b ↔ Setoid.r a b :=\n  iff.rfl\n#align rel_mk rel_mk\n\n",
 "rel_eq_coe":
 "/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/- Note: we can't extend both `add_con R` and `mul_con R` in Lean 3 due to interactions between old-\nand new-style structures. We can revisit this in Lean 4. (After and not during the port!) -/\n@[simp]\ntheorem rel_eq_coe : c.r = c :=\n  rfl\n#align rel_eq_coe rel_eq_coe\n\n",
 "refl":
 "#print refl /-\nprotected theorem refl (x) : c x x :=\n  c.refl' x\n#align refl refl\n-/\n\n",
 "quot_mk_eq_coe":
 "-- Lower the priority since it unifies with any quotient type.\n@[simp]\ntheorem quot_mk_eq_coe (x : R) : Quot.mk c x = (x : c.quotient) :=\n  rfl\n#align quot_mk_eq_coe quot_mk_eq_coe\n\n",
 "mul":
 "protected theorem mul {w x y z} : c w x → c y z → c (w * y) (x * z) :=\n  c.mul'\n#align mul mul\n\n",
 "coe_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, norm_cast]\ntheorem coe_zsmul (z : ℤ) (x : R) : (↑(«expr • » z x) : c.quotient) = «expr • » z x :=\n  rfl\n#align coe_zsmul coe_zsmul\n\n",
 "coe_zero":
 "@[simp, norm_cast]\ntheorem coe_zero : (↑(0 : R) : c.quotient) = 0 :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_sub":
 "@[simp, norm_cast]\ntheorem coe_sub (x y : R) : (↑(x - y) : c.quotient) = x - y :=\n  rfl\n#align coe_sub coe_sub\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, norm_cast]\ntheorem coe_smul (a : α) (x : R) : (↑(«expr • » a x) : c.quotient) = «expr • » a x :=\n  rfl\n#align coe_smul coe_smul\n\n",
 "coe_pow":
 "@[simp, norm_cast]\ntheorem coe_pow (x : R) (n : ℕ) : (↑(x ^ n) : c.quotient) = x ^ n :=\n  rfl\n#align coe_pow coe_pow\n\n",
 "coe_one":
 "@[simp, norm_cast]\ntheorem coe_one : (↑(1 : R) : c.quotient) = 1 :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, norm_cast]\ntheorem coe_nsmul (n : ℕ) (x : R) : (↑(«expr • » n x) : c.quotient) = «expr • » n x :=\n  rfl\n#align coe_nsmul coe_nsmul\n\n",
 "coe_neg":
 "@[simp, norm_cast]\ntheorem coe_neg (x : R) : (↑(-x) : c.quotient) = -x :=\n  rfl\n#align coe_neg coe_neg\n\n",
 "coe_nat_cast":
 "@[simp, norm_cast]\ntheorem coe_nat_cast (n : ℕ) : (↑(n : R) : c.quotient) = n :=\n  rfl\n#align coe_nat_cast coe_nat_cast\n\n",
 "coe_mul":
 "@[simp, norm_cast]\ntheorem coe_mul (x y : R) : (↑(x * y) : c.quotient) = ↑x * ↑y :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "coe_int_cast":
 "@[simp, norm_cast]\ntheorem coe_int_cast (n : ℕ) : (↑(n : R) : c.quotient) = n :=\n  rfl\n#align coe_int_cast coe_int_cast\n\n",
 "coe_add":
 "@[simp, norm_cast]\ntheorem coe_add (x y : R) : (↑(x + y) : c.quotient) = ↑x + ↑y :=\n  rfl\n#align coe_add coe_add\n\n",
 "add":
 "protected theorem add {w x y z} : c w x → c y z → c (w + y) (x + z) :=\n  c.add'\n#align add add\n\n",
 "Eq":
 "#print Eq /-\n/-- Two elements are related by a congruence relation `c` iff they are represented by the same\nelement of the quotient by `c`. -/\n@[simp]\nprotected theorem Eq {a b : R} : (a : c.quotient) = b ↔ c a b :=\n  Quotient.eq''\n#align eq Eq\n-/\n\n"}