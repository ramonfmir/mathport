{"is_idempotent_elem_iff_of_fg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∙ » -/\n/-\nCopyright (c) 2018 Mario Carneiro, Kevin Buzzard. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Kevin Buzzard\n-/\n/-- A finitely generated idempotent ideal is generated by an idempotent element -/\ntheorem is_idempotent_elem_iff_of_fg {R : Type _} [CommRing R] (I : ideal R) (h : I.fg) :\n    IsIdempotentElem I ↔ ∃ e : R, IsIdempotentElem e ∧ I = «expr ∙ » R e :=\n  by\n  constructor\n  · intro e\n    obtain ⟨r, hr, hr'⟩ :=\n      submodule.exists_mem_and_smul_eq_self_of_fg_of_le_smul I I h\n        (by\n          rw [smul_eq_mul]\n          exact e.ge)\n    simp_rw [smul_eq_mul] at hr'\n    refine' ⟨r, hr' r hr, antisymm _ ((submodule.span_singleton_le_iff_mem _ _).mpr hr)⟩\n    intro x hx\n    rw [← hr' x hx]\n    exact ideal.mem_span_singleton'.mpr ⟨_, mul_comm _ _⟩\n  · rintro ⟨e, he, rfl⟩\n    simp [IsIdempotentElem, ideal.span_singleton_mul_span_singleton, he.eq]\n#align is_idempotent_elem_iff_of_fg is_idempotent_elem_iff_of_fg\n\n",
 "is_idempotent_elem_iff_eq_bot_or_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_idempotent_elem_iff_eq_bot_or_top {R : Type _} [CommRing R] [IsDomain R] (I : ideal R) (h : I.fg) :\n    IsIdempotentElem I ↔ I = «expr⊥» ∨ I = «expr⊤» := by\n  constructor\n  · intro H\n    obtain ⟨e, he, rfl⟩ := (I.is_idempotent_elem_iff_of_fg h).mp H\n    simp only [ideal.submodule_span_eq, ideal.span_singleton_eq_bot]\n    apply or_of_or_of_imp_of_imp (is_idempotent_elem.iff_eq_zero_or_one.mp he) id\n    rintro rfl\n    simp\n  · rintro (rfl | rfl) <;> simp [IsIdempotentElem]\n#align is_idempotent_elem_iff_eq_bot_or_top is_idempotent_elem_iff_eq_bot_or_top\n\n"}