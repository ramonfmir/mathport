{"quotient_map_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem quotient_map_surjective {J : Ideal R} {I : Ideal S} {f : «expr →+* » R S} {H : J ≤ I.comap f}\n    (hf : function.surjective f) : function.surjective (quotientMap I f H) := fun x =>\n  let ⟨x, hx⟩ := Quotient.mk_surjective x\n  let ⟨y, hy⟩ := hf x\n  ⟨(Quotient.mk J) y, by simp [hx, hy]⟩\n#align quotient_map_surjective quotient_map_surjective\n\n",
 "quotient_map_mkₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem quotient_map_mkₐ {I : Ideal A} (J : Ideal B) (f : «expr →ₐ[ ] » A R₁ B) (H : I ≤ J.comap f) {x : A} :\n    quotientMapₐ J f H (Quotient.mk I x) = Quotient.mkₐ R₁ J (f x) :=\n  rfl\n#align quotient_map_mkₐ quotient_map_mkₐ\n\n",
 "quotient_map_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem quotient_map_mk {J : Ideal R} {I : Ideal S} {f : «expr →+* » R S} {H : J ≤ I.comap f} {x : R} :\n    quotientMap I f H (Quotient.mk J x) = Quotient.mk I (f x) :=\n  Quotient.lift_mk J _ _\n#align quotient_map_mk quotient_map_mk\n\n",
 "quotient_map_injective'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-- `H` and `h` are kept as separate hypothesis since H is used in constructing the quotient map. -/\ntheorem quotient_map_injective' {J : Ideal R} {I : Ideal S} {f : «expr →+* » R S} {H : J ≤ I.comap f}\n    (h : I.comap f ≤ J) : function.injective (quotientMap I f H) :=\n  by\n  refine' (injective_iff_map_eq_zero (QuotientMap I f H)).2 fun a ha => _\n  obtain ⟨r, rfl⟩ := quotient.mk_surjective a\n  rw [quotient_map_mk, quotient.eq_zero_iff_mem] at ha\n  exact quotient.eq_zero_iff_mem.mpr (h ha)\n#align quotient_map_injective' quotient_map_injective'\n\n",
 "quotient_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-- If we take `J = I.comap f` then `quotient_map` is injective automatically. -/\ntheorem quotient_map_injective {I : Ideal S} {f : «expr →+* » R S} : function.injective (quotientMap I f le_rfl) :=\n  quotientMap_injective' le_rfl\n#align quotient_map_injective quotient_map_injective\n\n",
 "quotient_map_comp_mkₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem quotient_map_comp_mkₐ {I : Ideal A} (J : Ideal B) (f : «expr →ₐ[ ] » A R₁ B) (H : I ≤ J.comap f) :\n    (quotientMapₐ J f H).comp (Quotient.mkₐ R₁ I) = (Quotient.mkₐ R₁ J).comp f :=\n  AlgHom.ext fun x => by simp only [quotient_map_mkₐ, quotient.mkₐ_eq_mk, AlgHom.comp_apply]\n#align quotient_map_comp_mkₐ quotient_map_comp_mkₐ\n\n",
 "quotient_map_comp_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem quotient_map_comp_mk {J : Ideal R} {I : Ideal S} {f : «expr →+* » R S} (H : J ≤ I.comap f) :\n    (quotientMap I f H).comp (Quotient.mk J) = (Quotient.mk I).comp f :=\n  RingHom.ext fun x => by simp only [Function.comp_apply, RingHom.coe_comp, Ideal.quotientMap_mk]\n#align quotient_map_comp_mk quotient_map_comp_mk\n\n",
 "quotient_map_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem quotient_map_algebra_map {J : Ideal A} {I : Ideal S} {f : «expr →+* » A S} {H : J ≤ I.comap f} {x : R₁} :\n    quotientMap I f H (algebraMap R₁ («expr ⧸ » A J) x) = Quotient.mk I (f (algebraMap _ _ x)) :=\n  Quotient.lift_mk J _ _\n#align quotient_map_algebra_map quotient_map_algebra_map\n\n",
 "quotient_equiv_symm_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem quotient_equiv_symm_mk (I : Ideal R) (J : Ideal S) (f : «expr ≃+* » R S) (hIJ : J = I.map (f : «expr →+* » R S))\n    (x : S) : (quotientEquiv I J f hIJ).symm (Ideal.Quotient.mk J x) = Ideal.Quotient.mk I (f.symm x) :=\n  rfl\n#align quotient_equiv_symm_mk quotient_equiv_symm_mk\n\n",
 "quotient_equiv_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem quotient_equiv_mk (I : Ideal R) (J : Ideal S) (f : «expr ≃+* » R S) (hIJ : J = I.map (f : «expr →+* » R S))\n    (x : R) : quotientEquiv I J f hIJ (Ideal.Quotient.mk I x) = Ideal.Quotient.mk J (f x) :=\n  rfl\n#align quotient_equiv_mk quotient_equiv_mk\n\n",
 "quotient_equiv_alg_of_eq_symm":
 "@[simp]\ntheorem quotient_equiv_alg_of_eq_symm {I J : Ideal A} (h : I = J) :\n    (quotientEquivAlgOfEq R₁ h).symm = quotientEquivAlgOfEq R₁ h.symm := by ext <;> rfl\n#align quotient_equiv_alg_of_eq_symm quotient_equiv_alg_of_eq_symm\n\n",
 "quotient_equiv_alg_of_eq_mk":
 "@[simp]\ntheorem quotient_equiv_alg_of_eq_mk {I J : Ideal A} (h : I = J) (x : A) :\n    quotientEquivAlgOfEq R₁ h (Ideal.Quotient.mk I x) = Ideal.Quotient.mk J x :=\n  rfl\n#align quotient_equiv_alg_of_eq_mk quotient_equiv_alg_of_eq_mk\n\n",
 "quot_quot_to_quot_supₐ_to_ring_hom":
 "@[simp]\ntheorem quot_quot_to_quot_supₐ_to_ring_hom : (quot_quot_to_quot_supₐ R I J).to_ring_hom = quotQuotToQuotSup I J :=\n  rfl\n#align quot_quot_to_quot_supₐ_to_ring_hom quot_quot_to_quot_supₐ_to_ring_hom\n\n",
 "quot_quot_mkₐ_to_ring_hom":
 "@[simp]\ntheorem quot_quot_mkₐ_to_ring_hom : (quot_quot_mkₐ R I J).to_ring_hom = quotQuotMk I J :=\n  rfl\n#align quot_quot_mkₐ_to_ring_hom quot_quot_mkₐ_to_ring_hom\n\n",
 "quot_quot_equiv_quot_supₐ_to_ring_equiv":
 "@[simp]\ntheorem quot_quot_equiv_quot_supₐ_to_ring_equiv :\n    (quot_quot_equiv_quot_supₐ R I J).to_ring_equiv = quotQuotEquivQuotSup I J :=\n  rfl\n#align quot_quot_equiv_quot_supₐ_to_ring_equiv quot_quot_equiv_quot_supₐ_to_ring_equiv\n\n",
 "quot_quot_equiv_quot_supₐ_symm_to_ring_equiv":
 "@[simp]\ntheorem quot_quot_equiv_quot_supₐ_symm_to_ring_equiv :\n    (quot_quot_equiv_quot_supₐ R I J).symm.to_ring_equiv = (quotQuotEquivQuotSup I J).symm :=\n  rfl\n#align quot_quot_equiv_quot_supₐ_symm_to_ring_equiv quot_quot_equiv_quot_supₐ_symm_to_ring_equiv\n\n",
 "quot_quot_equiv_quot_sup_symm_quot_quot_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem quot_quot_equiv_quot_sup_symm_quot_quot_mk (x : R) :\n    (quotQuotEquivQuotSup I J).symm (Ideal.Quotient.mk («expr ⊔ » I J) x) = quotQuotMk I J x :=\n  rfl\n#align quot_quot_equiv_quot_sup_symm_quot_quot_mk quot_quot_equiv_quot_sup_symm_quot_quot_mk\n\n",
 "quot_quot_equiv_quot_sup_quot_quot_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem quot_quot_equiv_quot_sup_quot_quot_mk (x : R) :\n    quotQuotEquivQuotSup I J (quotQuotMk I J x) = Ideal.Quotient.mk («expr ⊔ » I J) x :=\n  rfl\n#align quot_quot_equiv_quot_sup_quot_quot_mk quot_quot_equiv_quot_sup_quot_quot_mk\n\n",
 "quot_quot_equiv_quot_sup_quot_quot_algebra_map":
 "@[simp]\ntheorem quot_quot_equiv_quot_sup_quot_quot_algebra_map (x : R) :\n    DoubleQuot.quotQuotEquivQuotSup I J (algebraMap R _ x) = algebraMap _ _ x :=\n  rfl\n#align quot_quot_equiv_quot_sup_quot_quot_algebra_map quot_quot_equiv_quot_sup_quot_quot_algebra_map\n\n",
 "quot_quot_equiv_quot_of_leₐ_to_ring_equiv":
 "@[simp]\ntheorem quot_quot_equiv_quot_of_leₐ_to_ring_equiv (h : I ≤ J) :\n    (quot_quot_equiv_quot_of_leₐ R h).to_ring_equiv = quotQuotEquivQuotOfLe h :=\n  rfl\n#align quot_quot_equiv_quot_of_leₐ_to_ring_equiv quot_quot_equiv_quot_of_leₐ_to_ring_equiv\n\n",
 "quot_quot_equiv_quot_of_leₐ_symm_to_ring_equiv":
 "@[simp]\ntheorem quot_quot_equiv_quot_of_leₐ_symm_to_ring_equiv (h : I ≤ J) :\n    (quot_quot_equiv_quot_of_leₐ R h).symm.to_ring_equiv = (quotQuotEquivQuotOfLe h).symm :=\n  rfl\n#align quot_quot_equiv_quot_of_leₐ_symm_to_ring_equiv quot_quot_equiv_quot_of_leₐ_symm_to_ring_equiv\n\n",
 "quot_quot_equiv_quot_of_le_symm_mk":
 "@[simp]\ntheorem quot_quot_equiv_quot_of_le_symm_mk (x : R) (h : I ≤ J) :\n    (quotQuotEquivQuotOfLe h).symm (J.quotient.mk x) = quotQuotMk I J x :=\n  rfl\n#align quot_quot_equiv_quot_of_le_symm_mk quot_quot_equiv_quot_of_le_symm_mk\n\n",
 "quot_quot_equiv_quot_of_le_symm_comp_mkₐ":
 "@[simp]\ntheorem quot_quot_equiv_quot_of_le_symm_comp_mkₐ (h : I ≤ J) :\n    AlgHom.comp (↑(quot_quot_equiv_quot_of_leₐ R h).symm) (J.quotient.mkₐ R) = quot_quot_mkₐ R I J :=\n  rfl\n#align quot_quot_equiv_quot_of_le_symm_comp_mkₐ quot_quot_equiv_quot_of_le_symm_comp_mkₐ\n\n",
 "quot_quot_equiv_quot_of_le_symm_comp_mk":
 "theorem quot_quot_equiv_quot_of_le_symm_comp_mk (h : I ≤ J) :\n    RingHom.comp (↑(quotQuotEquivQuotOfLe h).symm) J.quotient.mk = quotQuotMk I J := by ext <;> rfl\n#align quot_quot_equiv_quot_of_le_symm_comp_mk quot_quot_equiv_quot_of_le_symm_comp_mk\n\n",
 "quot_quot_equiv_quot_of_le_quot_quot_mk":
 "@[simp]\ntheorem quot_quot_equiv_quot_of_le_quot_quot_mk (x : R) (h : I ≤ J) :\n    quotQuotEquivQuotOfLe h (quotQuotMk I J x) = J.quotient.mk x :=\n  rfl\n#align quot_quot_equiv_quot_of_le_quot_quot_mk quot_quot_equiv_quot_of_le_quot_quot_mk\n\n",
 "quot_quot_equiv_quot_of_le_comp_quot_quot_mkₐ":
 "@[simp]\ntheorem quot_quot_equiv_quot_of_le_comp_quot_quot_mkₐ (h : I ≤ J) :\n    AlgHom.comp (↑(quot_quot_equiv_quot_of_leₐ R h)) (quot_quot_mkₐ R I J) = J.quotient.mkₐ R :=\n  rfl\n#align quot_quot_equiv_quot_of_le_comp_quot_quot_mkₐ quot_quot_equiv_quot_of_le_comp_quot_quot_mkₐ\n\n",
 "quot_quot_equiv_quot_of_le_comp_quot_quot_mk":
 "theorem quot_quot_equiv_quot_of_le_comp_quot_quot_mk (h : I ≤ J) :\n    RingHom.comp (↑(quotQuotEquivQuotOfLe h)) (quotQuotMk I J) = J.quotient.mk := by ext <;> rfl\n#align quot_quot_equiv_quot_of_le_comp_quot_quot_mk quot_quot_equiv_quot_of_le_comp_quot_quot_mk\n\n",
 "quot_quot_equiv_commₐ_to_ring_equiv":
 "@[simp]\ntheorem quot_quot_equiv_commₐ_to_ring_equiv : (quot_quot_equiv_commₐ R I J).to_ring_equiv = quotQuotEquivComm I J :=\n  rfl\n#align quot_quot_equiv_commₐ_to_ring_equiv quot_quot_equiv_commₐ_to_ring_equiv\n\n",
 "quot_quot_equiv_comm_symmₐ":
 "@[simp]\ntheorem quot_quot_equiv_comm_symmₐ : (quot_quot_equiv_commₐ R I J).symm = quot_quot_equiv_commₐ R J I :=\n  -- TODO: should be `rfl` but times out\n    AlgEquiv.ext\n    fun x => (FunLike.congr_fun (quotQuotEquivComm_symm I J) x : _)\n#align quot_quot_equiv_comm_symmₐ quot_quot_equiv_comm_symmₐ\n\n",
 "quot_quot_equiv_comm_symm":
 "@[simp]\ntheorem quot_quot_equiv_comm_symm : (quotQuotEquivComm I J).symm = quotQuotEquivComm J I :=\n  rfl\n#align quot_quot_equiv_comm_symm quot_quot_equiv_comm_symm\n\n",
 "quot_quot_equiv_comm_quot_quot_mk":
 "@[simp]\ntheorem quot_quot_equiv_comm_quot_quot_mk (x : R) : quotQuotEquivComm I J (quotQuotMk I J x) = quotQuotMk J I x :=\n  rfl\n#align quot_quot_equiv_comm_quot_quot_mk quot_quot_equiv_comm_quot_quot_mk\n\n",
 "quot_quot_equiv_comm_mk_mk":
 "@[simp]\ntheorem quot_quot_equiv_comm_mk_mk [CommRing R] (I J : Ideal R) (x : R) :\n    quotQuotEquivComm I J (Ideal.Quotient.mk _ (Ideal.Quotient.mk _ x)) = algebraMap R _ x :=\n  rfl\n#align quot_quot_equiv_comm_mk_mk quot_quot_equiv_comm_mk_mk\n\n",
 "quot_quot_equiv_comm_comp_quot_quot_mkₐ":
 "@[simp]\ntheorem quot_quot_equiv_comm_comp_quot_quot_mkₐ :\n    AlgHom.comp (↑(quot_quot_equiv_commₐ R I J)) (quot_quot_mkₐ R I J) = quot_quot_mkₐ R J I :=\n  AlgHom.ext <| quotQuotEquivComm_quotQuotMk I J\n#align quot_quot_equiv_comm_comp_quot_quot_mkₐ quot_quot_equiv_comm_comp_quot_quot_mkₐ\n\n",
 "quot_quot_equiv_comm_comp_quot_quot_mk":
 "@[simp]\ntheorem quot_quot_equiv_comm_comp_quot_quot_mk :\n    RingHom.comp (↑(quotQuotEquivComm I J)) (quotQuotMk I J) = quotQuotMk J I :=\n  RingHom.ext <| quotQuotEquivComm_quotQuotMk I J\n#align quot_quot_equiv_comm_comp_quot_quot_mk quot_quot_equiv_comm_comp_quot_quot_mk\n\n",
 "quot_quot_equiv_comm_algebra_map":
 "@[simp]\ntheorem quot_quot_equiv_comm_algebra_map (x : R) : quotQuotEquivComm I J (algebraMap R _ x) = algebraMap _ _ x :=\n  rfl\n#align quot_quot_equiv_comm_algebra_map quot_quot_equiv_comm_algebra_map\n\n",
 "quot_left_to_quot_supₐ_to_ring_hom":
 "@[simp]\ntheorem quot_left_to_quot_supₐ_to_ring_hom : (quot_left_to_quot_supₐ R I J).to_ring_hom = quotLeftToQuotSup I J :=\n  rfl\n#align quot_left_to_quot_supₐ_to_ring_hom quot_left_to_quot_supₐ_to_ring_hom\n\n",
 "mkₐ_to_ring_hom":
 "theorem quotient.mkₐ_to_ring_hom (I : Ideal A) : (Quotient.mkₐ R₁ I).to_ring_hom = Ideal.Quotient.mk I :=\n  rfl\n#align quotient.mkₐ_to_ring_hom quotient.mkₐ_to_ring_hom\n\n",
 "mkₐ_surjective":
 "/-- The canonical morphism `A →ₐ[R₁] I.quotient` is surjective. -/\ntheorem quotient.mkₐ_surjective (I : Ideal A) : function.surjective (Quotient.mkₐ R₁ I) :=\n  surjective_quot_mk _\n#align quotient.mkₐ_surjective quotient.mkₐ_surjective\n\n",
 "mkₐ_ker":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/-- The kernel of `A →ₐ[R₁] I.quotient` is `I`. -/\n@[simp]\ntheorem quotient.mkₐ_ker (I : Ideal A) : (Quotient.mkₐ R₁ I : «expr →+* » A («expr ⧸ » A I)).ker = I :=\n  Ideal.mk_ker\n#align quotient.mkₐ_ker quotient.mkₐ_ker\n\n",
 "mkₐ_eq_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem quotient.mkₐ_eq_mk (I : Ideal A) : «expr⇑ » (Quotient.mkₐ R₁ I) = Ideal.Quotient.mk I :=\n  rfl\n#align quotient.mkₐ_eq_mk quotient.mkₐ_eq_mk\n\n",
 "mk_ker":
 "@[simp]\ntheorem mk_ker {I : Ideal R} : (Quotient.mk I).ker = I := by\n  ext <;> rw [RingHom.ker, mem_comap, Submodule.mem_bot, quotient.eq_zero_iff_mem]\n#align mk_ker mk_ker\n\n",
 "mk_comp_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem quotient.mk_comp_algebra_map (I : Ideal A) :\n    (Quotient.mk I).comp (algebraMap R₁ A) = algebraMap R₁ («expr ⧸ » A I) :=\n  rfl\n#align quotient.mk_comp_algebra_map quotient.mk_comp_algebra_map\n\n",
 "mk_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem quotient.mk_algebra_map (I : Ideal A) (x : R₁) :\n    Quotient.mk I (algebraMap R₁ A x) = algebraMap R₁ («expr ⧸ » A I) x :=\n  rfl\n#align quotient.mk_algebra_map quotient.mk_algebra_map\n\n",
 "mem_quotient_iff_mem_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-- See also `ideal.mem_quotient_iff_mem` in case `I ≤ J`. -/\n@[simp]\ntheorem mem_quotient_iff_mem_sup {I J : Ideal R} {x : R} :\n    Quotient.mk I x ∈ J.map (Quotient.mk I) ↔ x ∈ «expr ⊔ » J I := by\n  rw [← mem_comap, comap_map_of_surjective (Quotient.mk' I) quotient.mk_surjective, ← RingHom.ker_eq_comap_bot, mk_ker]\n#align mem_quotient_iff_mem_sup mem_quotient_iff_mem_sup\n\n",
 "mem_quotient_iff_mem":
 "/-- See also `ideal.mem_quotient_iff_mem_sup` if the assumption `I ≤ J` is not available. -/\ntheorem mem_quotient_iff_mem {I J : Ideal R} (hIJ : I ≤ J) {x : R} : Quotient.mk I x ∈ J.map (Quotient.mk I) ↔ x ∈ J :=\n  by rw [mem_quotient_iff_mem_sup, sup_eq_left.mpr hIJ]\n#align mem_quotient_iff_mem mem_quotient_iff_mem\n\n",
 "map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem ker_lift.map_smul (f : «expr →ₐ[ ] » A R₁ B) (r : R₁) (x : «expr ⧸ » A f.to_ring_hom.ker) :\n    f.to_ring_hom.ker_lift («expr • » r x) = «expr • » r (f.to_ring_hom.ker_lift x) :=\n  by\n  obtain ⟨a, rfl⟩ := quotient.mkₐ_surjective R₁ _ x\n  rw [← AlgHom.map_smul, quotient.mkₐ_eq_mk, RingHom.kerLift_mk]\n  exact f.map_smul _ _\n#align ker_lift.map_smul ker_lift.map_smul\n\n",
 "map_quotient_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem map_quotient_self (I : Ideal R) : map (Quotient.mk I) I = «expr⊥» :=\n  eq_bot_iff.2 <|\n    Ideal.map_le_iff_le_comap.2 fun x hx => (Submodule.mem_bot («expr ⧸ » R I)).2 <| Ideal.Quotient.eq_zero_iff_mem.2 hx\n#align map_quotient_self map_quotient_self\n\n",
 "map_mk_eq_bot_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem map_mk_eq_bot_of_le {I J : Ideal R} (h : I ≤ J) : I.map J.quotient.mk = «expr⊥» :=\n  by\n  rw [map_eq_bot_iff_le_ker, mk_ker]\n  exact h\n#align map_mk_eq_bot_of_le map_mk_eq_bot_of_le\n\n",
 "liftₐ_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem quotient.liftₐ_comp (I : Ideal A) (f : «expr →ₐ[ ] » A R₁ B) (hI : ∀ a : A, a ∈ I → f a = 0) :\n    (Ideal.Quotient.liftₐ I f hI).comp (Ideal.Quotient.mkₐ R₁ I) = f :=\n  AlgHom.ext fun x => (Ideal.Quotient.lift_mk I (f : «expr →+* » A B) hI : _)\n#align quotient.liftₐ_comp quotient.liftₐ_comp\n\n",
 "liftₐ_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n-- this is is_scalar_tower.algebra_map_apply R₁ A (A ⧸ I) but the file `algebra.algebra.tower`\n-- imports this file.\n@[simp]\ntheorem quotient.liftₐ_apply (I : Ideal A) (f : «expr →ₐ[ ] » A R₁ B) (hI : ∀ a : A, a ∈ I → f a = 0) (x) :\n    Ideal.Quotient.liftₐ I f hI x = Ideal.Quotient.lift I (f : «expr →+* » A B) hI x :=\n  rfl\n#align quotient.liftₐ_apply quotient.liftₐ_apply\n\n",
 "lift_sup_quot_quot_mkₐ_to_ring_hom":
 "@[simp]\ntheorem lift_sup_quot_quot_mkₐ_to_ring_hom : (lift_sup_quot_quot_mkₐ R I J).to_ring_hom = liftSupQuotQuotMk I J :=\n  rfl\n#align lift_sup_quot_quot_mkₐ_to_ring_hom lift_sup_quot_quot_mkₐ_to_ring_hom\n\n",
 "lift_injective_of_ker_le_ideal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem lift_injective_of_ker_le_ideal (I : Ideal R) {f : «expr →+* » R S} (H : ∀ a : R, a ∈ I → f a = 0)\n    (hI : f.ker ≤ I) : function.injective (Ideal.Quotient.lift I f H) :=\n  by\n  rw [RingHom.injective_iff_ker_eq_bot, RingHom.ker_eq_bot_iff_eq_zero]\n  intro u hu\n  obtain ⟨v, rfl⟩ := Ideal.Quotient.mk_surjective u\n  rw [Ideal.Quotient.lift_mk] at hu\n  rw [Ideal.Quotient.eq_zero_iff_mem]\n  exact hI ((RingHom.mem_ker f).mpr hu)\n#align lift_injective_of_ker_le_ideal lift_injective_of_ker_le_ideal\n\n",
 "ker_quotient_lift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem ker_quotient_lift {S : Type v} [CommRing S] {I : Ideal R} (f : «expr →+* » R S) (H : I ≤ f.ker) :\n    (Ideal.Quotient.lift I f H).ker = f.ker.map I.quotient.mk :=\n  by\n  ext x\n  constructor\n  · intro hx\n    obtain ⟨y, hy⟩ := quotient.mk_surjective x\n    rw [RingHom.mem_ker, ← hy, Ideal.Quotient.lift_mk, ← RingHom.mem_ker] at hx\n    rw [← hy, mem_map_iff_of_surjective I.quotient.mk quotient.mk_surjective]\n    exact ⟨y, hx, rfl⟩\n  · intro hx\n    rw [mem_map_iff_of_surjective I.quotient.mk quotient.mk_surjective] at hx\n    obtain ⟨y, hy⟩ := hx\n    rw [RingHom.mem_ker, ← hy.right, Ideal.Quotient.lift_mk, ← RingHom.mem_ker f]\n    exact hy.left\n#align ker_quotient_lift ker_quotient_lift\n\n",
 "ker_quot_quot_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-- The kernel of `quot_quot_mk` -/\ntheorem ker_quot_quot_mk : (quotQuotMk I J).ker = «expr ⊔ » I J := by\n  rw [RingHom.ker_eq_comap_bot, quot_quot_mk, ← comap_comap, ← RingHom.ker, mk_ker,\n    comap_map_of_surjective (Ideal.Quotient.mk I) quotient.mk_surjective, ← RingHom.ker, mk_ker, sup_comm]\n#align ker_quot_quot_mk ker_quot_quot_mk\n\n",
 "ker_quot_left_to_quot_sup":
 "/-- The kernel of `quot_left_to_quot_sup` -/\ntheorem ker_quot_left_to_quot_sup : (quotLeftToQuotSup I J).ker = J.map (Ideal.Quotient.mk I) := by\n  simp only [mk_ker, sup_idem, sup_comm, quot_left_to_quot_sup, quotient.factor, ker_quotient_lift,\n    map_eq_iff_sup_ker_eq_of_surjective I.quotient.mk quotient.mk_surjective, ← sup_assoc]\n#align ker_quot_left_to_quot_sup ker_quot_left_to_quot_sup\n\n",
 "ker_lift_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\n@[simp]\ntheorem ker_lift_mk (f : «expr →+* » R S) (r : R) : kerLift f (Ideal.Quotient.mk f.ker r) = f r :=\n  Ideal.Quotient.lift_mk _ _ _\n#align ker_lift_mk ker_lift_mk\n\n",
 "ker_lift_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-- The induced map from the quotient by the kernel is injective. -/\ntheorem ker_lift_injective (f : «expr →+* » R S) : function.injective (kerLift f) := fun a b =>\n  Quotient.inductionOn₂' a b fun a b (h : f a = f b) =>\n    Ideal.Quotient.eq.2 <| show a - b ∈ ker f by rw [mem_ker, map_sub, h, sub_self]\n#align ker_lift_injective ker_lift_injective\n\n",
 "ker_lift_alg_to_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem ker_lift_alg_to_ring_hom (f : «expr →ₐ[ ] » A R₁ B) : (kerLiftAlg f).to_ring_hom = RingHom.kerLift f :=\n  rfl\n#align ker_lift_alg_to_ring_hom ker_lift_alg_to_ring_hom\n\n",
 "ker_lift_alg_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem ker_lift_alg_mk (f : «expr →ₐ[ ] » A R₁ B) (a : A) : kerLiftAlg f (Quotient.mk f.to_ring_hom.ker a) = f a :=\n  rfl\n#align ker_lift_alg_mk ker_lift_alg_mk\n\n",
 "ker_lift_alg_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/-- The induced algebra morphism from the quotient by the kernel is injective. -/\ntheorem ker_lift_alg_injective (f : «expr →ₐ[ ] » A R₁ B) : function.injective (kerLiftAlg f) :=\n  RingHom.kerLift_injective f\n#align ker_lift_alg_injective ker_lift_alg_injective\n\n",
 "comp_quotient_map_eq_of_comp_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-- Commutativity of a square is preserved when taking quotients by an ideal. -/\ntheorem comp_quotient_map_eq_of_comp_eq {R' S' : Type _} [CommRing R'] [CommRing S'] {f : «expr →+* » R S}\n    {f' : «expr →+* » R' S'} {g : «expr →+* » R R'} {g' : «expr →+* » S S'} (hfg : f'.comp g = g'.comp f)\n    (I : Ideal S') :\n    (quotientMap I g' le_rfl).comp (quotientMap (I.comap g') f le_rfl) =\n      (quotientMap I f' le_rfl).comp\n        (quotientMap (I.comap f') g (le_of_eq (trans (comap_comap f g') (hfg ▸ comap_comap g f')))) :=\n  by\n  refine' RingHom.ext fun a => _\n  obtain ⟨r, rfl⟩ := quotient.mk_surjective a\n  simp only [RingHom.comp_apply, quotient_map_mk]\n  exact congr_arg (Quotient.mk' I) (trans (g'.comp_apply f r).symm (hfg ▸ f'.comp_apply g r))\n#align comp_quotient_map_eq_of_comp_eq comp_quotient_map_eq_of_comp_eq\n\n",
 "comap_map_mk":
 "theorem comap_map_mk {I J : Ideal R} (h : I ≤ J) :\n    Ideal.comap (Ideal.Quotient.mk I) (Ideal.map (Ideal.Quotient.mk I) J) = J :=\n  by\n  ext\n  rw [← Ideal.mem_quotient_iff_mem h, Ideal.mem_comap]\n#align comap_map_mk comap_map_mk\n\n",
 "coe_quot_quot_to_quot_supₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_to_quot_supₐ : «expr⇑ » (quot_quot_to_quot_supₐ R I J) = quotQuotToQuotSup I J :=\n  rfl\n#align coe_quot_quot_to_quot_supₐ coe_quot_quot_to_quot_supₐ\n\n",
 "coe_quot_quot_mkₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_mkₐ : «expr⇑ » (quot_quot_mkₐ R I J) = quotQuotMk I J :=\n  rfl\n#align coe_quot_quot_mkₐ coe_quot_quot_mkₐ\n\n",
 "coe_quot_quot_equiv_quot_supₐ_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_equiv_quot_supₐ_symm :\n    «expr⇑ » (quot_quot_equiv_quot_supₐ R I J).symm = (quotQuotEquivQuotSup I J).symm :=\n  rfl\n#align coe_quot_quot_equiv_quot_supₐ_symm coe_quot_quot_equiv_quot_supₐ_symm\n\n",
 "coe_quot_quot_equiv_quot_supₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_equiv_quot_supₐ : «expr⇑ » (quot_quot_equiv_quot_supₐ R I J) = quotQuotEquivQuotSup I J :=\n  rfl\n#align coe_quot_quot_equiv_quot_supₐ coe_quot_quot_equiv_quot_supₐ\n\n",
 "coe_quot_quot_equiv_quot_of_leₐ_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_equiv_quot_of_leₐ_symm (h : I ≤ J) :\n    «expr⇑ » (quot_quot_equiv_quot_of_leₐ R h).symm = (quotQuotEquivQuotOfLe h).symm :=\n  rfl\n#align coe_quot_quot_equiv_quot_of_leₐ_symm coe_quot_quot_equiv_quot_of_leₐ_symm\n\n",
 "coe_quot_quot_equiv_quot_of_leₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_equiv_quot_of_leₐ (h : I ≤ J) :\n    «expr⇑ » (quot_quot_equiv_quot_of_leₐ R h) = quotQuotEquivQuotOfLe h :=\n  rfl\n#align coe_quot_quot_equiv_quot_of_leₐ coe_quot_quot_equiv_quot_of_leₐ\n\n",
 "coe_quot_quot_equiv_commₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_quot_equiv_commₐ : «expr⇑ » (quot_quot_equiv_commₐ R I J) = quotQuotEquivComm I J :=\n  rfl\n#align coe_quot_quot_equiv_commₐ coe_quot_quot_equiv_commₐ\n\n",
 "coe_quot_left_to_quot_supₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_quot_left_to_quot_supₐ : «expr⇑ » (quot_left_to_quot_supₐ R I J) = quotLeftToQuotSup I J :=\n  rfl\n#align coe_quot_left_to_quot_supₐ coe_quot_left_to_quot_supₐ\n\n",
 "coe_lift_sup_quot_quot_mkₐ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_lift_sup_quot_quot_mkₐ : «expr⇑ » (lift_sup_quot_quot_mkₐ R I J) = liftSupQuotQuotMk I J :=\n  rfl\n#align coe_lift_sup_quot_quot_mkₐ coe_lift_sup_quot_quot_mkₐ\n\n",
 "bot_quotient_is_maximal_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem bot_quotient_is_maximal_iff (I : Ideal R) : («expr⊥» : Ideal («expr ⧸ » R I)).is_maximal ↔ I.is_maximal :=\n  ⟨fun hI =>\n    @mk_ker _ _ I ▸ @comap_isMaximal_of_surjective _ _ _ _ _ _ (Quotient.mk I) Quotient.mk_surjective («expr⊥») hI,\n    fun hI => by\n    skip\n    letI := quotient.field I\n    exact bot_is_maximal⟩\n#align bot_quotient_is_maximal_iff bot_quotient_is_maximal_iff\n\n",
 "apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem quotient_ker_alg_equiv_of_right_inverse_symm.apply {f : «expr →ₐ[ ] » A R₁ B} {g : B → A}\n    (hf : function.right_inverse g f) (x : B) :\n    (quotientKerAlgEquivOfRightInverse hf).symm x = Quotient.mkₐ R₁ f.to_ring_hom.ker (g x) :=\n  rfl\n#align quotient_ker_alg_equiv_of_right_inverse_symm.apply quotient_ker_alg_equiv_of_right_inverse_symm.apply\n\n",
 "algebra_map_quotient_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\ntheorem algebra_map_quotient_injective {I : Ideal A} [Algebra R A] :\n    function.injective (algebraMap («expr ⧸ » R (I.comap (algebraMap R A))) («expr ⧸ » A I)) :=\n  by\n  rintro ⟨a⟩ ⟨b⟩ hab\n  replace hab := quotient.eq.mp hab\n  rw [← RingHom.map_sub] at hab\n  exact quotient.eq.mpr hab\n#align algebra_map_quotient_injective algebra_map_quotient_injective\n\n",
 "algebra_map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem quotient.algebra_map_eq (I : Ideal R) : algebraMap R («expr ⧸ » R I) = I.quotient.mk :=\n  rfl\n#align quotient.algebra_map_eq quotient.algebra_map_eq\n\n",
 "alg_map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\ntheorem quotient.alg_map_eq (I : Ideal A) :\n    algebraMap R₁ («expr ⧸ » A I) = (algebraMap A («expr ⧸ » A I)).comp (algebraMap R₁ A) :=\n  rfl\n#align quotient.alg_map_eq quotient.alg_map_eq\n\n",
 "alg_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n-- Lean can struggle to find this instance later if we don't provide this shortcut\ntheorem quotient.alg_hom_ext {I : Ideal A} {S} [Semiring S] [Algebra R₁ S] ⦃f g : «expr →ₐ[ ] » («expr ⧸ » A I) R₁ S⦄\n    (h : f.comp (Quotient.mkₐ R₁ I) = g.comp (Quotient.mkₐ R₁ I)) : f = g :=\n  AlgHom.ext fun x => Quotient.inductionOn' x <| AlgHom.congr_fun h\n#align quotient.alg_hom_ext quotient.alg_hom_ext\n\n"}