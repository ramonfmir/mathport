{"to_quotient_square_range":
 "theorem to_quotient_square_range : I.cotangent_to_quotient_square.range = I.cotangent_ideal.restrict_scalars R :=\n  by\n  trans (I.cotangent_to_quotient_square.comp I.to_cotangent).range\n  · rw [LinearMap.range_comp, I.to_cotangent_range, Submodule.map_top]\n  · rw [to_quotient_square_comp_to_cotangent, LinearMap.range_comp, I.range_subtype]\n    ext\n    rfl\n#align to_quotient_square_range to_quotient_square_range\n\n",
 "to_quotient_square_comp_to_cotangent":
 "theorem to_quotient_square_comp_to_cotangent :\n    I.cotangent_to_quotient_square.comp I.to_cotangent = (I ^ 2).mkq.comp (Submodule.subtype I) :=\n  LinearMap.ext fun _ => rfl\n#align to_quotient_square_comp_to_cotangent to_quotient_square_comp_to_cotangent\n\n",
 "to_cotangent_to_quotient_square":
 "@[simp]\ntheorem to_cotangent_to_quotient_square (x : I) : I.cotangent_to_quotient_square (I.to_cotangent x) = (I ^ 2).mkq x :=\n  rfl\n#align to_cotangent_to_quotient_square to_cotangent_to_quotient_square\n\n",
 "to_cotangent_surjective":
 "theorem to_cotangent_surjective : function.surjective I.to_cotangent :=\n  Submodule.mkQ_surjective _\n#align to_cotangent_surjective to_cotangent_surjective\n\n",
 "to_cotangent_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem to_cotangent_range : I.to_cotangent.range = «expr⊤» :=\n  Submodule.range_mkQ _\n#align to_cotangent_range to_cotangent_range\n\n",
 "to_cotangent_eq_zero":
 "theorem to_cotangent_eq_zero (x : I) : I.to_cotangent x = 0 ↔ (x : R) ∈ I ^ 2 :=\n  I.mem_to_cotangent_ker\n#align to_cotangent_eq_zero to_cotangent_eq_zero\n\n",
 "to_cotangent_eq":
 "theorem to_cotangent_eq {x y : I} : I.to_cotangent x = I.to_cotangent y ↔ (x - y : R) ∈ I ^ 2 :=\n  by\n  rw [← sub_eq_zero, ← map_sub]\n  exact I.mem_to_cotangent_ker\n#align to_cotangent_eq to_cotangent_eq\n\n",
 "mem_to_cotangent_ker":
 "theorem mem_to_cotangent_ker {x : I} : x ∈ I.to_cotangent.ker ↔ (x : R) ∈ I ^ 2 :=\n  by\n  rw [← I.map_to_cotangent_ker]\n  simp\n#align mem_to_cotangent_ker mem_to_cotangent_ker\n\n",
 "map_to_cotangent_ker":
 "/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem map_to_cotangent_ker : I.to_cotangent.ker.map I.subtype = I ^ 2 := by\n  simp [ideal.to_cotangent, Submodule.map_smul'', pow_two]\n#align map_to_cotangent_ker map_to_cotangent_ker\n\n",
 "ker_ker_sqare_lift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem _root_.alg_hom.ker_ker_sqare_lift (f : «expr →ₐ[ ] » A R B) :\n    f.ker_square_lift.to_ring_hom.ker = f.to_ring_hom.ker.cotangent_ideal :=\n  by\n  apply le_antisymm\n  · intro x hx\n    obtain ⟨x, rfl⟩ := Ideal.Quotient.mk_surjective x\n    exact ⟨x, hx, rfl⟩\n  · rintro _ ⟨x, hx, rfl⟩\n    exact hx\n#align alg_hom.ker_ker_sqare_lift alg_hom.ker_ker_sqare_lift\n\n",
 "cotangent_subsingleton_iff":
 "theorem cotangent_subsingleton_iff : subsingleton I.cotangent ↔ IsIdempotentElem I :=\n  by\n  constructor\n  · intro H\n    refine' (pow_two I).symm.trans (le_antisymm (Ideal.pow_le_self two_ne_zero) _)\n    exact fun x hx => (I.to_cotangent_eq_zero ⟨x, hx⟩).mp (subsingleton.elim _ _)\n  ·\n    exact fun e =>\n      ⟨fun x y =>\n        Quotient.inductionOn₂' x y fun x y =>\n          I.to_cotangent_eq.mpr <| ((pow_two I).trans e).symm ▸ I.sub_mem x.prop y.prop⟩\n#align cotangent_subsingleton_iff cotangent_subsingleton_iff\n\n",
 "cotangent_ideal_square":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem cotangent_ideal_square (I : Ideal R) : I.cotangent_ideal ^ 2 = «expr⊥» :=\n  by\n  rw [eq_bot_iff, pow_two I.cotangent_ideal, ← smul_eq_mul]\n  intro x hx\n  apply Submodule.smul_induction_on hx\n  · rintro _ ⟨x, hx, rfl⟩ _ ⟨y, hy, rfl⟩\n    apply (Submodule.Quotient.eq _).mpr _\n    rw [sub_zero, pow_two]\n    exact Ideal.mul_mem_mul hx hy\n  · intro x y hx hy\n    exact add_mem hx hy\n#align cotangent_ideal_square cotangent_ideal_square\n\n",
 "cotangent_equiv_ideal_symm_apply":
 "theorem cotangent_equiv_ideal_symm_apply (x : R) (hx : x ∈ I) :\n    I.cotangent_equiv_ideal.symm ⟨(I ^ 2).mkq x, Submodule.mem_map_of_mem hx⟩ = I.to_cotangent ⟨x, hx⟩ :=\n  by\n  apply I.cotangent_equiv_ideal.injective\n  rw [I.cotangent_equiv_ideal.apply_symm_apply]\n  ext\n  rfl\n#align cotangent_equiv_ideal_symm_apply cotangent_equiv_ideal_symm_apply\n\n",
 "cotangent_equiv_ideal_apply":
 "@[simp, nolint simp_nf]\ntheorem cotangent_equiv_ideal_apply (x : I.cotangent) :\n    ↑(I.cotangent_equiv_ideal x) = I.cotangent_to_quotient_square x :=\n  rfl\n#align cotangent_equiv_ideal_apply cotangent_equiv_ideal_apply\n\n"}