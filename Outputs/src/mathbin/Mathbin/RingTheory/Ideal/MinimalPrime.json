{"radical_minimal_primes":
 "@[simp]\ntheorem ideal.radical_minimal_primes : I.radical.minimal_primes = I.minimal_primes :=\n  by\n  rw [ideal.minimal_primes, ideal.minimal_primes]\n  congr\n  ext p\n  exact ⟨fun ⟨a, b⟩ => ⟨a, ideal.le_radical.trans b⟩, fun ⟨a, b⟩ => ⟨a, a.radical_le_iff.mpr b⟩⟩\n#align ideal.radical_minimal_primes ideal.radical_minimal_primes\n\n",
 "minimal_primes_eq_subsingleton_self":
 "theorem ideal.minimal_primes_eq_subsingleton_self [I.is_prime] : I.minimal_primes = {I} :=\n  by\n  ext J\n  constructor\n  · exact fun H => (H.2 ⟨infer_instance, rfl.le⟩ H.1.2).antisymm H.1.2\n  · rintro (rfl : J = I)\n    refine' ⟨⟨infer_instance, rfl.le⟩, fun _ h _ => h.2⟩\n#align ideal.minimal_primes_eq_subsingleton_self ideal.minimal_primes_eq_subsingleton_self\n\n",
 "minimal_primes_eq_subsingleton":
 "theorem ideal.minimal_primes_eq_subsingleton (hI : I.is_primary) : I.minimal_primes = {I.radical} :=\n  by\n  ext J\n  constructor\n  ·\n    exact fun H =>\n      let e := H.1.1.radical_le_iff.mpr H.1.2\n      (H.2 ⟨ideal.is_prime_radical hI, ideal.le_radical⟩ e).antisymm e\n  · rintro (rfl : J = I.radical)\n    exact ⟨⟨ideal.is_prime_radical hI, ideal.le_radical⟩, fun _ H _ => H.1.radical_le_iff.mpr H.2⟩\n#align ideal.minimal_primes_eq_subsingleton ideal.minimal_primes_eq_subsingleton\n\n",
 "minimal_primes_eq_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\ntheorem ideal.minimal_primes_eq_comap :\n    I.minimal_primes = «expr '' » (ideal.comap I) (minimal_primes («expr ⧸ » R I)) := by\n  rw [minimal_primes, ← ideal.comap_minimal_primes_eq_of_surjective ideal.quotient.mk_surjective, ←\n    ring_hom.ker_eq_comap_bot, ideal.mk_ker]\n#align ideal.minimal_primes_eq_comap ideal.minimal_primes_eq_comap\n\n",
 "mimimal_primes_comap_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem ideal.mimimal_primes_comap_of_surjective {f : «expr →+* » R S} (hf : function.surjective f) {I J : ideal S}\n    (h : J ∈ I.minimal_primes) : J.comap f ∈ (I.comap f).minimal_primes :=\n  by\n  haveI := h.1.1\n  refine' ⟨⟨infer_instance, ideal.comap_mono h.1.2⟩, _⟩\n  rintro K ⟨hK, e₁⟩ e₂\n  have : f.ker ≤ K := (ideal.comap_mono bot_le).trans e₁\n  rw [← sup_eq_left.mpr this, ring_hom.ker_eq_comap_bot, ← ideal.comap_map_of_surjective f hf]\n  apply ideal.comap_mono _\n  apply h.2 _ _\n  · exact ⟨ideal.map_is_prime_of_surjective hf this, ideal.le_map_of_comap_le_of_surjective f hf e₁⟩\n  · exact ideal.map_le_of_le_comap e₂\n#align ideal.mimimal_primes_comap_of_surjective ideal.mimimal_primes_comap_of_surjective\n\n",
 "exists_minimal_primes_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem ideal.exists_minimal_primes_le [J.is_prime] (e : I ≤ J) : ∃ p ∈ I.minimal_primes, p ≤ J :=\n  by\n  suffices\n    ∃ m ∈ { p : «expr ᵒᵈ» (ideal R) | ideal.is_prime p ∧ I ≤ OrderDual.ofDual p },\n      OrderDual.toDual J ≤ m ∧ ∀ z ∈ { p : «expr ᵒᵈ» (ideal R) | ideal.is_prime p ∧ I ≤ p }, m ≤ z → z = m\n    by\n    obtain ⟨p, h₁, h₂, h₃⟩ := this\n    simp_rw [← @eq_comm _ p] at h₃\n    exact ⟨p, ⟨h₁, fun a b c => (h₃ a b c).le⟩, h₂⟩\n  apply zorn_nonempty_partialOrder₀\n  swap\n  · refine' ⟨show J.is_prime by infer_instance, e⟩\n  rintro (c : set (ideal R)) hc hc' J' hJ'\n  refine' ⟨OrderDual.toDual (Inf c), ⟨ideal.Inf_is_prime_of_is_chain ⟨J', hJ'⟩ hc'.symm fun x hx => (hc hx).1, _⟩, _⟩\n  · rw [OrderDual.ofDual_toDual]\n    convert le_infₛ _\n    intro x hx\n    exact (hc hx).2\n  · rintro z hz\n    rw [OrderDual.le_toDual]\n    exact infₛ_le hz\n#align ideal.exists_minimal_primes_le ideal.exists_minimal_primes_le\n\n",
 "exists_minimal_primes_comap_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (p «expr ∈ » (I.comap f).minimal_primes) -/\ntheorem ideal.exists_minimal_primes_comap_eq {I : ideal S} (f : «expr →+* » R S) (p)\n    (_ : p ∈ (I.comap f).minimal_primes) : ∃ p' ∈ I.minimal_primes, ideal.comap f p' = p :=\n  by\n  obtain ⟨p', h₁, h₂, h₃⟩ := ideal.exists_comap_eq_of_mem_minimal_primes f p H\n  skip\n  obtain ⟨q, hq, hq'⟩ := ideal.exists_minimal_primes_le h₂\n  refine' ⟨q, hq, eq.symm _⟩\n  haveI := hq.1.1\n  have := (ideal.comap_mono hq').trans_eq h₃\n  exact (H.2 ⟨infer_instance, ideal.comap_mono hq.1.2⟩ this).antisymm this\n#align ideal.exists_minimal_primes_comap_eq ideal.exists_minimal_primes_comap_eq\n\n",
 "exists_comap_eq_of_mem_minimal_primes_of_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (p «expr ∈ » minimal_primes[minimal_primes] R) -/\ntheorem ideal.exists_comap_eq_of_mem_minimal_primes_of_injective {f : «expr →+* » R S} (hf : function.injective f) (p)\n    (_ : p ∈ minimal_primes R) : ∃ p' : ideal S, p'.is_prime ∧ p'.comap f = p :=\n  by\n  haveI := H.1.1\n  have : nontrivial (localization (Submonoid.map f p.prime_compl)) :=\n    by\n    refine' ⟨⟨1, 0, _⟩⟩\n    convert\n      (is_localization.map_injective_of_injective p.prime_compl (localization.at_prime p)\n            (localization <| p.prime_compl.map f) hf).ne\n        one_ne_zero\n    · rw [map_one]\n    · rw [map_zero]\n  obtain ⟨M, hM⟩ := ideal.exists_maximal (localization (Submonoid.map f p.prime_compl))\n  skip\n  refine' ⟨M.comap (algebra_map S <| localization (Submonoid.map f p.prime_compl)), infer_instance, _⟩\n  rw [ideal.comap_comap, ←\n    @is_localization.map_comp _ _ _ _ localization.is_localization _ p.prime_compl.le_comap_map _\n      localization.is_localization,\n    ← ideal.comap_comap]\n  suffices _ ≤ p by exact this.antisymm (H.2 ⟨infer_instance, bot_le⟩ this)\n  intro x hx\n  by_contra h\n  apply hM.ne_top\n  apply M.eq_top_of_is_unit_mem hx\n  apply IsUnit.map\n  apply is_localization.map_units _ (show p.prime_compl from ⟨x, h⟩)\n  infer_instance\n#align ideal.exists_comap_eq_of_mem_minimal_primes_of_injective ideal.exists_comap_eq_of_mem_minimal_primes_of_injective\n\n",
 "exists_comap_eq_of_mem_minimal_primes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (p «expr ∈ » (I.comap f).minimal_primes) -/\ntheorem ideal.exists_comap_eq_of_mem_minimal_primes {I : ideal S} (f : «expr →+* » R S) (p)\n    (_ : p ∈ (I.comap f).minimal_primes) : ∃ p' : ideal S, p'.is_prime ∧ I ≤ p' ∧ p'.comap f = p :=\n  by\n  haveI := H.1.1\n  let f' := I f\n  have e : (I f).ker = I.comap f := by\n    ext1\n    exact submodule.quotient.mk_eq_zero _\n  have : (I f).ker ≤ p := by\n    rw [ideal.mk_ker, e]\n    exact H.1.2\n  obtain ⟨p', hp₁, hp₂⟩ :=\n    ideal.exists_comap_eq_of_mem_minimal_primes_of_injective (I f).ker_lift_injective (p.map (I f).ker) _\n  · skip\n    refine' ⟨p'.comap I, ideal.is_prime.comap _, _, _⟩\n    · exact ideal.mk_ker.symm.trans_le (ideal.comap_mono bot_le)\n    convert congr_arg (ideal.comap (I f).ker) hp₂\n    rwa [ideal.comap_map_of_surjective (I f).ker ideal.quotient.mk_surjective, eq_comm, sup_eq_left]\n  refine' ⟨⟨_, bot_le⟩, _⟩\n  · apply ideal.map_is_prime_of_surjective _ this\n    exact ideal.quotient.mk_surjective\n  · rintro q ⟨hq, -⟩ hq'\n    rw [← ideal.map_comap_of_surjective (I f).ker ideal.quotient.mk_surjective q]\n    apply ideal.map_mono\n    skip\n    apply H.2\n    · refine' ⟨infer_instance, (ideal.mk_ker.trans e).symm.trans_le (ideal.comap_mono bot_le)⟩\n    · refine' (ideal.comap_mono hq').trans _\n      rw [ideal.comap_map_of_surjective]\n      exacts[sup_le rfl.le this, ideal.quotient.mk_surjective]\n#align ideal.exists_comap_eq_of_mem_minimal_primes ideal.exists_comap_eq_of_mem_minimal_primes\n\n",
 "comap_minimal_primes_eq_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem ideal.comap_minimal_primes_eq_of_surjective {f : «expr →+* » R S} (hf : function.surjective f) (I : ideal S) :\n    (I.comap f).minimal_primes = «expr '' » (ideal.comap f) I.minimal_primes :=\n  by\n  ext J\n  constructor\n  · intro H\n    obtain ⟨p, h, rfl⟩ := ideal.exists_minimal_primes_comap_eq f J H\n    exact ⟨p, h, rfl⟩\n  · rintro ⟨J, hJ, rfl⟩\n    exact ideal.mimimal_primes_comap_of_surjective hf hJ\n#align ideal.comap_minimal_primes_eq_of_surjective ideal.comap_minimal_primes_eq_of_surjective\n\n",
 "Inf_minimal_primes":
 "@[simp]\ntheorem ideal.Inf_minimal_primes : infₛ I.minimal_primes = I.radical :=\n  by\n  rw [I.radical_eq_Inf]\n  apply le_antisymm\n  · intro x hx\n    rw [ideal.mem_Inf] at hx⊢\n    rintro J ⟨e, hJ⟩\n    skip\n    obtain ⟨p, hp, hp'⟩ := ideal.exists_minimal_primes_le e\n    exact hp' (hx hp)\n  · apply infₛ_le_infₛ _\n    intro I hI\n    exact hI.1.symm\n#align ideal.Inf_minimal_primes ideal.Inf_minimal_primes\n\n"}