{"zero_ne_one_of_proper":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem zero_ne_one_of_proper {I : ideal α} (h : I ≠ «expr⊤») : (0 : α) ≠ 1 := fun hz =>\n  I.ne_top_iff_one.1 h <| hz ▸ I.zero_mem\n#align zero_ne_one_of_proper zero_ne_one_of_proper\n\n",
 "zero_mem_nonunits":
 "theorem zero_mem_nonunits [Semiring α] : 0 ∈ nonunits α ↔ (0 : α) ≠ 1 :=\n  not_congr isUnit_zero_iff\n#align zero_mem_nonunits zero_mem_nonunits\n\n",
 "zero_mem":
 "/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Chris Hughes, Mario Carneiro\n-/\nprotected theorem zero_mem : (0 : α) ∈ I :=\n  I.zero_mem\n#align zero_mem zero_mem\n\n",
 "unit_mul_mem_iff_mem":
 "@[simp]\ntheorem unit_mul_mem_iff_mem {x y : α} (hy : is_unit y) : y * x ∈ I ↔ x ∈ I :=\n  by\n  refine' ⟨fun h => _, fun h => I.mul_mem_left y h⟩\n  obtain ⟨y', hy'⟩ := hy.exists_left_inv\n  have := I.mul_mem_left y' h\n  rwa [← mul_assoc, hy', one_mul] at this\n#align unit_mul_mem_iff_mem unit_mul_mem_iff_mem\n\n",
 "sum_pow_mem_span_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem sum_pow_mem_span_pow {ι} (s : Finset ι) (f : ι → α) (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) ^\n        (s.card * n + 1) ∈\n      span («expr '' » (fun i => f i ^ (n + 1)) s) :=\n  by\n  convert pow_multiset_sum_mem_span_pow (s.1.map f) n\n  · rw [Multiset.card_map]\n    rfl\n  rw [Multiset.map_map, Multiset.toFinset_map, Finset.val_toFinset, Finset.coe_image]\n#align sum_pow_mem_span_pow sum_pow_mem_span_pow\n\n",
 "sum_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem sum_mem (I : ideal α) {ι : Type _} {t : Finset ι} {f : ι → α} :\n    (∀ c ∈ t, f c ∈ I) →\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (f i) ∈ I :=\n  submodule.sum_mem I\n#align sum_mem sum_mem\n\n",
 "subset_span":
 "theorem subset_span {s : set α} : s ⊆ span s :=\n  submodule.subset_span\n#align subset_span subset_span\n\n",
 "submodule_span_eq":
 "@[simp]\ntheorem submodule_span_eq {s : set α} : submodule.span α s = ideal.span s :=\n  rfl\n#align submodule_span_eq submodule_span_eq\n\n",
 "sub_mem":
 "protected theorem sub_mem : a ∈ I → b ∈ I → a - b ∈ I :=\n  sub_mem\n#align sub_mem sub_mem\n\n",
 "span_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem span_zero : span (0 : set α) = «expr⊥» := by rw [← set.singleton_zero, span_singleton_eq_bot]\n#align span_zero span_zero\n\n",
 "span_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem span_univ : span (Set.univ : set α) = «expr⊤» :=\n  submodule.span_univ\n#align span_univ span_univ\n\n",
 "span_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem span_union (s t : set α) : span (s ∪ t) = «expr ⊔ » (span s) (span t) :=\n  submodule.span_union _ _\n#align span_union span_union\n\n",
 "span_singleton_prime":
 "theorem span_singleton_prime {p : α} (hp : p ≠ 0) : is_prime (span ({p} : set α)) ↔ Prime p := by\n  simp [is_prime_iff, Prime, span_singleton_eq_top, hp, mem_span_singleton]\n#align span_singleton_prime span_singleton_prime\n\n",
 "span_singleton_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem span_singleton_one : span ({1} : set α) = «expr⊤» :=\n  (eq_top_iff_one _).2 <| subset_span <| mem_singleton _\n#align span_singleton_one span_singleton_one\n\n",
 "span_singleton_neg":
 "@[simp]\ntheorem span_singleton_neg (x : α) : (span {-x} : ideal α) = span {x} :=\n  by\n  ext\n  simp only [mem_span_singleton']\n  exact ⟨fun ⟨y, h⟩ => ⟨-y, h ▸ neg_mul_comm y x⟩, fun ⟨y, h⟩ => ⟨-y, h ▸ neg_mul_neg y x⟩⟩\n#align span_singleton_neg span_singleton_neg\n\n",
 "span_singleton_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem span_singleton_ne_top {α : Type _} [CommSemiring α] {x : α} (hx : ¬is_unit x) :\n    ideal.span ({x} : set α) ≠ «expr⊤» :=\n  (ideal.ne_top_iff_one _).mpr fun h1 =>\n    let ⟨y, hy⟩ := ideal.mem_span_singleton'.mp h1\n    hx ⟨⟨x, y, mul_comm y x ▸ hy, hy⟩, rfl⟩\n#align span_singleton_ne_top span_singleton_ne_top\n\n",
 "span_singleton_mul_right_unit":
 "theorem span_singleton_mul_right_unit {a : α} (h2 : is_unit a) (x : α) : span ({x * a} : set α) = span {x} := by\n  rw [mul_comm, span_singleton_mul_left_unit h2]\n#align span_singleton_mul_right_unit span_singleton_mul_right_unit\n\n",
 "span_singleton_mul_left_unit":
 "theorem span_singleton_mul_left_unit {a : α} (h2 : is_unit a) (x : α) : span ({a * x} : set α) = span {x} :=\n  by\n  apply le_antisymm <;> rw [span_singleton_le_iff_mem, mem_span_singleton']\n  exacts[⟨a, rfl⟩, ⟨_, h2.unit.inv_mul_cancel_left x⟩]\n#align span_singleton_mul_left_unit span_singleton_mul_left_unit\n\n",
 "span_singleton_lt_span_singleton":
 "-- see Note [lower instance priority]\ntheorem span_singleton_lt_span_singleton [CommRing β] [IsDomain β] {x y : β} :\n    span ({x} : set β) < span ({y} : set β) ↔ DvdNotUnit y x := by\n  rw [lt_iff_le_not_le, span_singleton_le_span_singleton, span_singleton_le_span_singleton, dvd_and_not_dvd_iff]\n#align span_singleton_lt_span_singleton span_singleton_lt_span_singleton\n\n",
 "span_singleton_le_span_singleton":
 "theorem span_singleton_le_span_singleton {x y : α} : span ({x} : set α) ≤ span ({y} : set α) ↔ y ∣ x :=\n  span_le.trans <| singleton_subset_iff.trans mem_span_singleton\n#align span_singleton_le_span_singleton span_singleton_le_span_singleton\n\n",
 "span_singleton_le_iff_mem":
 "theorem span_singleton_le_iff_mem {x : α} : span {x} ≤ I ↔ x ∈ I :=\n  submodule.span_singleton_le_iff_mem _ _\n#align span_singleton_le_iff_mem span_singleton_le_iff_mem\n\n",
 "span_singleton_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem span_singleton_eq_top {x} : span ({x} : set α) = «expr⊤» ↔ is_unit x := by\n  rw [isUnit_iff_dvd_one, ← span_singleton_le_span_singleton, span_singleton_one, eq_top_iff]\n#align span_singleton_eq_top span_singleton_eq_top\n\n",
 "span_singleton_eq_span_singleton":
 "theorem span_singleton_eq_span_singleton {α : Type u} [CommRing α] [IsDomain α] {x y : α} :\n    span ({x} : set α) = span ({y} : set α) ↔ Associated x y :=\n  by\n  rw [← dvd_dvd_iff_associated, le_antisymm_iff, and_comm']\n  apply and_congr <;> rw [span_singleton_le_span_singleton]\n#align span_singleton_eq_span_singleton span_singleton_eq_span_singleton\n\n",
 "span_singleton_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem span_singleton_eq_bot {x} : span ({x} : set α) = «expr⊥» ↔ x = 0 :=\n  submodule.span_singleton_eq_bot\n#align span_singleton_eq_bot span_singleton_eq_bot\n\n",
 "span_pow_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem span_pow_eq_top (s : set α) (hs : span s = «expr⊤») (n : ℕ) : span («expr '' » (fun x => x ^ n) s) = «expr⊤» :=\n  by\n  rw [eq_top_iff_one]\n  cases n\n  · obtain rfl | ⟨x, hx⟩ := eq_empty_or_nonempty s\n    · rw [Set.image_empty, hs]\n      trivial\n    · exact subset_span ⟨_, hx, pow_zero _⟩\n  rw [eq_top_iff_one, span, finsupp.mem_span_iff_total] at hs\n  rcases hs with ⟨f, hf⟩\n  change (f.support.sum fun a => f a * a) = 1 at hf\n  have := sum_pow_mem_span_pow f.support (fun a => f a * a) n\n  rw [hf, one_pow] at this\n  refine' span_le.mpr _ this\n  rintro _ hx\n  simp_rw [Finset.mem_coe, Set.mem_image] at hx\n  rcases hx with ⟨x, hx, rfl⟩\n  have : span ({x ^ (n + 1)} : set α) ≤ span («expr '' » (fun x : α => x ^ (n + 1)) s) :=\n    by\n    rw [span_le, Set.singleton_subset_iff]\n    exact subset_span ⟨x, x.prop, rfl⟩\n  refine' this _\n  rw [mul_pow, mem_span_singleton]\n  exact ⟨f x ^ (n + 1), mul_comm _ _⟩\n#align span_pow_eq_top span_pow_eq_top\n\n",
 "span_pair_comm":
 "theorem span_pair_comm {x y : α} : (span {x, y} : ideal α) = span {y, x} := by simp only [span_insert, sup_comm]\n#align span_pair_comm span_pair_comm\n\n",
 "span_pair_add_mul_right":
 "@[simp]\ntheorem span_pair_add_mul_right {R : Type u} [CommRing R] {x y : R} (z : R) :\n    (span {x, y + x * z} : ideal R) = span {x, y} := by rw [span_pair_comm, span_pair_add_mul_left, span_pair_comm]\n#align span_pair_add_mul_right span_pair_add_mul_right\n\n",
 "span_pair_add_mul_left":
 "@[simp]\ntheorem span_pair_add_mul_left {R : Type u} [CommRing R] {x y : R} (z : R) :\n    (span {x + y * z, y} : ideal R) = span {x, y} := by\n  ext\n  rw [mem_span_pair, mem_span_pair]\n  exact\n    ⟨fun ⟨a, b, h⟩ =>\n      ⟨a, b + a * z, by\n        rw [← h]\n        ring1⟩,\n      fun ⟨a, b, h⟩ =>\n      ⟨a, b - a * z, by\n        rw [← h]\n        ring1⟩⟩\n#align span_pair_add_mul_left span_pair_add_mul_left\n\n",
 "span_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem span_one : span (1 : set α) = «expr⊤» := by rw [← Set.singleton_one, span_singleton_one]\n#align span_one span_one\n\n",
 "span_mono":
 "theorem span_mono {s t : set α} : s ⊆ t → span s ≤ span t :=\n  submodule.span_mono\n#align span_mono span_mono\n\n",
 "span_le":
 "theorem span_le {s : set α} {I} : span s ≤ I ↔ s ⊆ I :=\n  submodule.span_le\n#align span_le span_le\n\n",
 "span_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem span_insert (x) (s : set α) : span (insert x s) = «expr ⊔ » (span ({x} : set α)) (span s) :=\n  submodule.span_insert x s\n#align span_insert span_insert\n\n",
 "span_eq_top_iff_finite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem span_eq_top_iff_finite (s : set α) :\n    span s = «expr⊤» ↔ ∃ s' : Finset α, ↑s' ⊆ s ∧ span (s' : set α) = «expr⊤» :=\n  by\n  simp_rw [eq_top_iff_one]\n  exact ⟨submodule.mem_span_finite_of_mem_span, fun ⟨s', h₁, h₂⟩ => span_mono h₁ h₂⟩\n#align span_eq_top_iff_finite span_eq_top_iff_finite\n\n",
 "span_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem span_eq_bot {s : set α} : span s = «expr⊥» ↔ ∀ x ∈ s, (x : α) = 0 :=\n  submodule.span_eq_bot\n#align span_eq_bot span_eq_bot\n\n",
 "span_eq":
 "@[simp]\ntheorem span_eq : span (I : set α) = I :=\n  submodule.span_eq _\n#align span_eq span_eq\n\n",
 "span_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem span_empty : span (∅ : set α) = «expr⊥» :=\n  submodule.span_empty\n#align span_empty span_empty\n\n",
 "span_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem span_Union {ι} (s : ι → set α) :\n    span («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (span (s i)) :=\n  submodule.span_Union _\n#align span_Union span_Union\n\n",
 "pow_multiset_sum_mem_span_pow":
 "theorem pow_multiset_sum_mem_span_pow (s : Multiset α) (n : ℕ) :\n    s.sum ^ (s.card * n + 1) ∈ span ((s.map fun x => x ^ (n + 1)).to_finset : set α) :=\n  by\n  induction' s using Multiset.induction_on with a s hs\n  · simp\n  simp only [Finset.coe_insert, Multiset.map_cons, Multiset.toFinset_cons, multiset.sum_cons, Multiset.card_cons,\n    add_pow]\n  refine' submodule.sum_mem _ _\n  intro c hc\n  rw [mem_span_insert]\n  by_cases h : n + 1 ≤ c\n  · refine'\n      ⟨a ^ (c - (n + 1)) * s.sum ^ ((s.card + 1) * n + 1 - c) * ((s.card + 1) * n + 1).choose c, 0,\n        submodule.zero_mem _, _⟩\n    rw [mul_comm _ (a ^ (n + 1))]\n    simp_rw [← mul_assoc]\n    rw [← pow_add, add_zero, add_tsub_cancel_of_le h]\n  · use 0\n    simp_rw [zero_mul, zero_add]\n    refine' ⟨_, _, rfl⟩\n    replace h : c ≤ n := nat.lt_succ_iff.mp (not_le.mp h)\n    have : (s.card + 1) * n + 1 - c = s.card * n + 1 + (n - c) := by\n      rw [add_mul, one_mul, add_assoc, add_comm n 1, ← add_assoc, add_tsub_assoc_of_le h]\n    rw [this, pow_add]\n    simp_rw [mul_assoc, mul_comm (s.sum ^ (s.card * n + 1)), ← mul_assoc]\n    exact mul_mem_left _ _ hs\n#align pow_multiset_sum_mem_span_pow pow_multiset_sum_mem_span_pow\n\n",
 "pow_mem_of_mem":
 "theorem pow_mem_of_mem (ha : a ∈ I) (n : ℕ) (hn : 0 < n) : a ^ n ∈ I :=\n  nat.cases_on n (not.elim (by decide)) (fun m hm => (pow_succ a m).symm ▸ I.mul_mem_right (a ^ m) ha) hn\n#align pow_mem_of_mem pow_mem_of_mem\n\n",
 "pow_mem_iff_mem":
 "theorem is_prime.pow_mem_iff_mem {I : ideal α} (hI : I.is_prime) {r : α} (n : ℕ) (hn : 0 < n) : r ^ n ∈ I ↔ r ∈ I :=\n  ⟨hI.mem_of_pow_mem n, fun hr => I.pow_mem_of_mem hr n hn⟩\n#align is_prime.pow_mem_iff_mem is_prime.pow_mem_iff_mem\n\n",
 "one_not_mem_nonunits":
 "@[simp]\ntheorem one_not_mem_nonunits [monoid α] : (1 : α) ∉ nonunits α :=\n  not_not_intro isUnit_one\n#align one_not_mem_nonunits one_not_mem_nonunits\n\n",
 "not_is_prime_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x «expr ∉ » I) -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (y «expr ∉ » I) -/\ntheorem not_is_prime_iff {I : ideal α} :\n    ¬I.is_prime ↔ I = «expr⊤» ∨ ∃ (x : _)(_ : x ∉ I)(y : _)(_ : y ∉ I), x * y ∈ I :=\n  by\n  simp_rw [ideal.is_prime_iff, not_and_or, ne.def, not_not, not_forall, not_or]\n  exact\n    or_congr iff.rfl ⟨fun ⟨x, y, hxy, hx, hy⟩ => ⟨x, hx, y, hy, hxy⟩, fun ⟨x, hx, y, hy, hxy⟩ => ⟨x, y, hxy, hx, hy⟩⟩\n#align not_is_prime_iff not_is_prime_iff\n\n",
 "not_is_field_iff_exists_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem not_is_field_iff_exists_prime [nontrivial R] : ¬IsField R ↔ ∃ p : ideal R, p ≠ «expr⊥» ∧ p.is_prime :=\n  not_is_field_iff_exists_ideal_bot_lt_and_lt_top.trans\n    ⟨fun ⟨I, bot_lt, lt_top⟩ =>\n      let ⟨p, hp, le_p⟩ := I.exists_le_maximal (lt_top_iff_ne_top.mp lt_top)\n      ⟨p, bot_lt_iff_ne_bot.mp (lt_of_lt_of_le bot_lt le_p), hp.is_prime⟩,\n      fun ⟨p, ne_bot, Prime⟩ => ⟨p, bot_lt_iff_ne_bot.mpr ne_bot, lt_top_iff_ne_top.mpr Prime.1⟩⟩\n#align not_is_field_iff_exists_prime not_is_field_iff_exists_prime\n\n",
 "not_is_field_iff_exists_ideal_bot_lt_and_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem not_is_field_iff_exists_ideal_bot_lt_and_lt_top [nontrivial R] :\n    ¬IsField R ↔ ∃ I : ideal R, «expr⊥» < I ∧ I < «expr⊤» :=\n  by\n  constructor\n  · intro h\n    obtain ⟨x, nz, nu⟩ := exists_not_is_unit_of_not_is_field h\n    use ideal.span {x}\n    rw [bot_lt_iff_ne_bot, lt_top_iff_ne_top]\n    exact ⟨mt ideal.span_singleton_eq_bot.mp nz, mt ideal.span_singleton_eq_top.mp nu⟩\n  · rintro ⟨I, bot_lt, lt_top⟩ hf\n    obtain ⟨x, mem, ne_zero⟩ := SetLike.exists_of_lt bot_lt\n    rw [submodule.mem_bot] at ne_zero\n    obtain ⟨y, hy⟩ := hf.mul_inv_cancel ne_zero\n    rw [lt_top_iff_ne_top, ne.def, ideal.eq_top_iff_one, ← hy] at lt_top\n    exact lt_top (I.mul_mem_right _ mem)\n#align not_is_field_iff_exists_ideal_bot_lt_and_lt_top not_is_field_iff_exists_ideal_bot_lt_and_lt_top\n\n",
 "not_isField_of_subsingleton":
 "#print not_isField_of_subsingleton /-\ntheorem not_isField_of_subsingleton {R : Type _} [Ring R] [subsingleton R] : ¬IsField R := fun ⟨⟨x, y, hxy⟩, _, _⟩ =>\n  hxy (subsingleton.elim x y)\n#align not_is_field_of_subsingleton not_isField_of_subsingleton\n-/\n\n",
 "neg_mem_iff":
 "protected theorem neg_mem_iff : -a ∈ I ↔ a ∈ I :=\n  neg_mem_iff\n#align neg_mem_iff neg_mem_iff\n\n",
 "ne_top_iff_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem ne_top_iff_one : I ≠ «expr⊤» ↔ (1 : α) ∉ I :=\n  not_congr I.eq_top_iff_one\n#align ne_top_iff_one ne_top_iff_one\n\n",
 "ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_maximal.ne_top {I : ideal α} (h : I.is_maximal) : I ≠ «expr⊤» :=\n  (is_maximal_def.1 h).1\n#align is_maximal.ne_top is_maximal.ne_top\n\n",
 "ne_bot_of_is_maximal_of_not_is_field":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- When a ring is not a field, the maximal ideals are nontrivial. -/\ntheorem ne_bot_of_is_maximal_of_not_is_field [nontrivial R] {M : ideal R} (max : M.is_maximal)\n    (not_field : ¬IsField R) : M ≠ «expr⊥» := by\n  rintro h\n  rw [h] at max\n  rcases max with ⟨⟨h1, h2⟩⟩\n  obtain ⟨I, hIbot, hItop⟩ := not_is_field_iff_exists_ideal_bot_lt_and_lt_top.mp not_field\n  exact ne_of_lt hItop (h2 I hIbot)\n#align ne_bot_of_is_maximal_of_not_is_field ne_bot_of_is_maximal_of_not_is_field\n\n",
 "mul_unit_mem_iff_mem":
 "-- A separate namespace definition is needed because the variables were historically in a different\n-- order.\n@[simp]\ntheorem mul_unit_mem_iff_mem {x y : α} (hy : is_unit y) : x * y ∈ I ↔ x ∈ I :=\n  mul_comm y x ▸ unit_mul_mem_iff_mem I hy\n#align mul_unit_mem_iff_mem mul_unit_mem_iff_mem\n\n",
 "mul_sub_mul_mem":
 "theorem mul_sub_mul_mem {R : Type _} [CommRing R] (I : ideal R) {a b c d : R} (h1 : a - b ∈ I) (h2 : c - d ∈ I) :\n    a * c - b * d ∈ I :=\n  by\n  rw [show a * c - b * d = (a - b) * c + b * (c - d)\n      by\n      rw [sub_mul, mul_sub]\n      abel]\n  exact I.add_mem (I.mul_mem_right _ h1) (I.mul_mem_left _ h2)\n#align mul_sub_mul_mem mul_sub_mul_mem\n\n",
 "mul_mem_right":
 "theorem mul_mem_right (h : a ∈ I) : a * b ∈ I :=\n  mul_comm b a ▸ I.mul_mem_left b h\n#align mul_mem_right mul_mem_right\n\n",
 "mul_mem_nonunits_right":
 "theorem mul_mem_nonunits_right [comm_monoid α] : b ∈ nonunits α → a * b ∈ nonunits α :=\n  mt isUnit_of_mul_isUnit_right\n#align mul_mem_nonunits_right mul_mem_nonunits_right\n\n",
 "mul_mem_nonunits_left":
 "theorem mul_mem_nonunits_left [comm_monoid α] : a ∈ nonunits α → a * b ∈ nonunits α :=\n  mt isUnit_of_mul_isUnit_left\n#align mul_mem_nonunits_left mul_mem_nonunits_left\n\n",
 "mul_mem_left":
 "theorem mul_mem_left : b ∈ I → a * b ∈ I :=\n  I.smul_mem a\n#align mul_mem_left mul_mem_left\n\n",
 "mul_mem_iff_mem_or_mem":
 "theorem is_prime.mul_mem_iff_mem_or_mem {I : ideal α} (hI : I.is_prime) : ∀ {x y : α}, x * y ∈ I ↔ x ∈ I ∨ y ∈ I :=\n  fun x y =>\n  ⟨hI.mem_or_mem, by\n    rintro (h | h)\n    exacts[I.mul_mem_right y h, I.mul_mem_left x h]⟩\n#align is_prime.mul_mem_iff_mem_or_mem is_prime.mul_mem_iff_mem_or_mem\n\n",
 "mem_supr_of_mem":
 "theorem mem_supr_of_mem {ι : Sort _} {S : ι → ideal R} (i : ι) : ∀ {x : R}, x ∈ S i → x ∈ supᵢ S :=\n  show S i ≤ supᵢ S from le_supᵢ _ _\n#align mem_supr_of_mem mem_supr_of_mem\n\n",
 "mem_sup_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem mem_sup_right {S T : ideal R} : ∀ {x : R}, x ∈ T → x ∈ «expr ⊔ » S T :=\n  show T ≤ «expr ⊔ » S T from le_sup_right\n#align mem_sup_right mem_sup_right\n\n",
 "mem_sup_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem mem_sup_left {S T : ideal R} : ∀ {x : R}, x ∈ S → x ∈ «expr ⊔ » S T :=\n  show S ≤ «expr ⊔ » S T from le_sup_left\n#align mem_sup_left mem_sup_left\n\n",
 "mem_span_singleton_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem mem_span_singleton_sup {S : Type _} [CommSemiring S] {x y : S} {I : ideal S} :\n    x ∈ «expr ⊔ » (ideal.span {y}) I ↔ ∃ a : S, ∃ b ∈ I, a * y + b = x :=\n  by\n  rw [submodule.mem_sup]\n  constructor\n  · rintro ⟨ya, hya, b, hb, rfl⟩\n    obtain ⟨a, rfl⟩ := mem_span_singleton'.mp hya\n    exact ⟨a, b, hb, rfl⟩\n  · rintro ⟨a, b, hb, rfl⟩\n    exact ⟨a * y, ideal.mem_span_singleton'.mpr ⟨a, rfl⟩, b, hb, rfl⟩\n#align mem_span_singleton_sup mem_span_singleton_sup\n\n",
 "mem_span_singleton_self":
 "theorem mem_span_singleton_self (x : α) : x ∈ span ({x} : set α) :=\n  mem_span_singleton.mpr dvd_rfl\n#align mem_span_singleton_self mem_span_singleton_self\n\n",
 "mem_span_singleton'":
 "theorem mem_span_singleton' {x y : α} : x ∈ span ({y} : set α) ↔ ∃ a, a * y = x :=\n  submodule.mem_span_singleton\n#align mem_span_singleton' mem_span_singleton'\n\n",
 "mem_span_singleton":
 "theorem mem_span_singleton {x y : α} : x ∈ span ({y} : set α) ↔ y ∣ x :=\n  mem_span_singleton'.trans <| exists_congr fun _ => by rw [eq_comm, mul_comm]\n#align mem_span_singleton mem_span_singleton\n\n",
 "mem_span_pair":
 "theorem mem_span_pair {x y z : α} : z ∈ span ({x, y} : set α) ↔ ∃ a b, a * x + b * y = z :=\n  submodule.mem_span_pair\n#align mem_span_pair mem_span_pair\n\n",
 "mem_span_insert'":
 "theorem mem_span_insert' {s : set α} {x y} : x ∈ span (insert y s) ↔ ∃ a, x + a * y ∈ span s :=\n  submodule.mem_span_insert'\n#align mem_span_insert' mem_span_insert'\n\n",
 "mem_span_insert":
 "theorem mem_span_insert {s : set α} {x y} : x ∈ span (insert y s) ↔ ∃ a, ∃ z ∈ span s, x = a * y + z :=\n  submodule.mem_span_insert\n#align mem_span_insert mem_span_insert\n\n",
 "mem_span":
 "theorem mem_span {s : set α} (x) : x ∈ span s ↔ ∀ p : ideal α, s ⊆ p → x ∈ p :=\n  mem_Inter₂\n#align mem_span mem_span\n\n",
 "mem_pi":
 "theorem mem_pi (x : ι → α) : x ∈ I.pi ι ↔ ∀ i, x i ∈ I :=\n  iff.rfl\n#align mem_pi mem_pi\n\n",
 "mem_or_mem_of_mul_eq_zero":
 "theorem is_prime.mem_or_mem_of_mul_eq_zero {I : ideal α} (hI : I.is_prime) {x y : α} (h : x * y = 0) : x ∈ I ∨ y ∈ I :=\n  hI.mem_or_mem (h.symm ▸ I.zero_mem)\n#align is_prime.mem_or_mem_of_mul_eq_zero is_prime.mem_or_mem_of_mul_eq_zero\n\n",
 "mem_or_mem":
 "theorem is_prime.mem_or_mem {I : ideal α} (hI : I.is_prime) {x y : α} : x * y ∈ I → x ∈ I ∨ y ∈ I :=\n  hI.2\n#align is_prime.mem_or_mem is_prime.mem_or_mem\n\n",
 "mem_of_pow_mem":
 "theorem is_prime.mem_of_pow_mem {I : ideal α} (hI : I.is_prime) {r : α} (n : ℕ) (H : r ^ n ∈ I) : r ∈ I :=\n  by\n  induction' n with n ih\n  · rw [pow_zero] at H\n    exact (mt (eq_top_iff_one _).2 hI.1).elim H\n  · rw [pow_succ] at H\n    exact or.cases_on (hI.mem_or_mem H) id ih\n#align is_prime.mem_of_pow_mem is_prime.mem_of_pow_mem\n\n",
 "mem_nonunits_iff":
 "@[simp]\ntheorem mem_nonunits_iff [monoid α] : a ∈ nonunits α ↔ ¬is_unit a :=\n  iff.rfl\n#align mem_nonunits_iff mem_nonunits_iff\n\n",
 "mem_infi":
 "@[simp]\ntheorem mem_infi {ι : Sort _} {I : ι → ideal R} {x : R} : x ∈ infᵢ I ↔ ∀ i, x ∈ I i :=\n  submodule.mem_infi _\n#align mem_infi mem_infi\n\n",
 "mem_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem mem_inf {I J : ideal R} {x : R} : x ∈ «expr ⊓ » I J ↔ x ∈ I ∧ x ∈ J :=\n  iff.rfl\n#align mem_inf mem_inf\n\n",
 "mem_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem mem_bot {x : R} : x ∈ («expr⊥» : ideal R) ↔ x = 0 :=\n  submodule.mem_bot _\n#align mem_bot mem_bot\n\n",
 "mem_Sup_of_mem":
 "theorem mem_Sup_of_mem {S : set (ideal R)} {s : ideal R} (hs : s ∈ S) : ∀ {x : R}, x ∈ s → x ∈ supₛ S :=\n  show s ≤ supₛ S from le_supₛ hs\n#align mem_Sup_of_mem mem_Sup_of_mem\n\n",
 "mem_Inf":
 "theorem mem_Inf {s : set (ideal R)} {x : R} : x ∈ infₛ s ↔ ∀ ⦃I⦄, I ∈ s → x ∈ I :=\n  ⟨fun hx I his => hx I ⟨I, infᵢ_pos his⟩, fun H I ⟨J, hij⟩ => hij ▸ fun S ⟨hj, hS⟩ => hS ▸ H hj⟩\n#align mem_Inf mem_Inf\n\n",
 "maximal_of_no_maximal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- If P is not properly contained in any maximal ideal then it is not properly contained\n  in any proper ideal -/\ntheorem maximal_of_no_maximal {R : Type u} [Semiring R] {P : ideal R} (hmax : ∀ m : ideal R, P < m → ¬is_maximal m)\n    (J : ideal R) (hPJ : P < J) : J = «expr⊤» := by\n  by_contra hnonmax\n  rcases exists_le_maximal J hnonmax with ⟨M, hM1, hM2⟩\n  exact hmax M (lt_of_lt_of_le hPJ hM2) hM1\n#align maximal_of_no_maximal maximal_of_no_maximal\n\n",
 "is_prime_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_prime_iff {I : ideal α} : is_prime I ↔ I ≠ «expr⊤» ∧ ∀ {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I :=\n  ⟨fun h => ⟨h.1, fun _ _ => h.2⟩, fun h => ⟨h.1, fun _ _ => h.2⟩⟩\n#align is_prime_iff is_prime_iff\n\n",
 "is_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_maximal.is_prime {I : ideal α} (H : I.is_maximal) : I.is_prime :=\n  ⟨H.1.1, fun x y hxy =>\n    or_iff_not_imp_left.2 fun hx => by\n      let J : ideal α := submodule.span α (insert x ↑I)\n      have IJ : I ≤ J := Set.Subset.trans (subset_insert _ _) subset_span\n      have xJ : x ∈ J := ideal.subset_span (Set.mem_insert x I)\n      cases' is_maximal_iff.1 H with _ oJ\n      specialize oJ J x IJ hx xJ\n      rcases submodule.mem_span_insert.mp oJ with ⟨a, b, h, oe⟩\n      obtain F : y * 1 = y * («expr • » a x + b) := congr_arg (fun g : α => y * g) oe\n      rw [← mul_one y, F, mul_add, mul_comm, smul_eq_mul, mul_assoc]\n      refine' submodule.add_mem I (I.mul_mem_left a hxy) (submodule.smul_mem I y _)\n      rwa [submodule.span_eq] at h⟩\n#align is_maximal.is_prime is_maximal.is_prime\n\n",
 "is_maximal_iff":
 "theorem is_maximal_iff {I : ideal α} :\n    I.is_maximal ↔ (1 : α) ∉ I ∧ ∀ (J : ideal α) (x), I ≤ J → x ∉ I → x ∈ J → (1 : α) ∈ J :=\n  is_maximal_def.trans <|\n    and_congr I.ne_top_iff_one <|\n      forall_congr' fun J => by\n        rw [lt_iff_le_not_le] <;>\n          exact\n            ⟨fun H x h hx₁ hx₂ => J.eq_top_iff_one.1 <| H ⟨h, not_subset.2 ⟨_, hx₂, hx₁⟩⟩, fun H ⟨h₁, h₂⟩ =>\n              let ⟨x, xJ, xI⟩ := not_subset.1 h₂\n              J.eq_top_iff_one.2 <| H x h₁ xI xJ⟩\n#align is_maximal_iff is_maximal_iff\n\n",
 "is_maximal_def":
 "theorem is_maximal_def {I : ideal α} : I.is_maximal ↔ IsCoatom I :=\n  ⟨fun h => h.1, fun h => ⟨h⟩⟩\n#align is_maximal_def is_maximal_def\n\n",
 "factors_decreasing":
 "theorem factors_decreasing [CommRing β] [IsDomain β] (b₁ b₂ : β) (h₁ : b₁ ≠ 0) (h₂ : ¬is_unit b₂) :\n    span ({b₁ * b₂} : set β) < span {b₁} :=\n  lt_of_le_not_le (ideal.span_le.2 <| singleton_subset_iff.2 <| ideal.mem_span_singleton.2 ⟨b₂, rfl⟩) fun h =>\n    h₂ <|\n      isUnit_of_dvd_one _ <| (mul_dvd_mul_iff_left h₁).1 <| by rwa [mul_one, ← ideal.span_singleton_le_span_singleton]\n#align factors_decreasing factors_decreasing\n\n",
 "ext":
 "@[ext]\ntheorem ext {I J : ideal α} (h : ∀ x, x ∈ I ↔ x ∈ J) : I = J :=\n  submodule.ext h\n#align ext ext\n\n",
 "exists_not_is_unit_of_not_is_field":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x «expr ≠ » (0 : R)) -/\ntheorem exists_not_is_unit_of_not_is_field [nontrivial R] (hf : ¬IsField R) : ∃ (x : _)(_ : x ≠ (0 : R)), ¬is_unit x :=\n  by\n  have : ¬_ := fun h => hf ⟨exists_pair_ne R, mul_comm, h⟩\n  simp_rw [isUnit_iff_exists_inv]\n  push_neg  at this⊢\n  obtain ⟨x, hx, not_unit⟩ := this\n  exact ⟨x, hx, not_unit⟩\n#align exists_not_is_unit_of_not_is_field exists_not_is_unit_of_not_is_field\n\n",
 "exists_maximal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- Krull's theorem: a nontrivial ring has a maximal ideal. -/\ntheorem exists_maximal [nontrivial α] : ∃ M : ideal α, M.is_maximal :=\n  let ⟨I, ⟨hI, _⟩⟩ := exists_le_maximal («expr⊥» : ideal α) bot_ne_top\n  ⟨I, hI⟩\n#align exists_maximal exists_maximal\n\n",
 "exists_max_ideal_of_mem_nonunits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem exists_max_ideal_of_mem_nonunits [CommSemiring α] (h : a ∈ nonunits α) : ∃ I : ideal α, I.is_maximal ∧ a ∈ I :=\n  by\n  have : ideal.span ({a} : set α) ≠ «expr⊤» := by\n    intro H\n    rw [ideal.span_singleton_eq_top] at H\n    contradiction\n  rcases ideal.exists_le_maximal _ this with ⟨I, Imax, H⟩\n  use I, Imax\n  apply H\n  apply ideal.subset_span\n  exact Set.mem_singleton a\n#align exists_max_ideal_of_mem_nonunits exists_max_ideal_of_mem_nonunits\n\n",
 "exists_le_maximal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- **Krull's theorem**: if `I` is an ideal that is not the whole ring, then it is included in some\n    maximal ideal. -/\ntheorem exists_le_maximal (I : ideal α) (hI : I ≠ «expr⊤») : ∃ M : ideal α, M.is_maximal ∧ I ≤ M :=\n  let ⟨m, hm⟩ := (eq_top_or_exists_le_coatom I).resolve_left hI\n  ⟨m, ⟨⟨hm.1⟩, hm.2⟩⟩\n#align exists_le_maximal exists_le_maximal\n\n",
 "exists_inv":
 "theorem is_maximal.exists_inv {I : ideal α} (hI : I.is_maximal) {x} (hx : x ∉ I) : ∃ y, ∃ i ∈ I, y * x + i = 1 :=\n  by\n  cases' is_maximal_iff.1 hI with H₁ H₂\n  rcases mem_span_insert.1\n      (H₂ (span (insert x I)) x (Set.Subset.trans (subset_insert _ _) subset_span) hx\n        (subset_span (mem_insert _ _))) with\n    ⟨y, z, hz, hy⟩\n  refine' ⟨y, z, _, hy.symm⟩\n  rwa [← span_eq I]\n#align is_maximal.exists_inv is_maximal.exists_inv\n\n",
 "eq_top_of_unit_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem eq_top_of_unit_mem (x y : α) (hx : x ∈ I) (h : y * x = 1) : I = «expr⊤» :=\n  eq_top_iff.2 fun z _ =>\n    calc\n      z = z * (y * x) := by simp [h]\n      _ = z * y * x := eq.symm <| mul_assoc z y x\n      _ ∈ I := I.mul_mem_left _ hx\n      \n#align eq_top_of_unit_mem eq_top_of_unit_mem\n\n",
 "eq_top_of_is_unit_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem eq_top_of_is_unit_mem {x} (hx : x ∈ I) (h : is_unit x) : I = «expr⊤» :=\n  let ⟨y, hy⟩ := h.exists_left_inv\n  eq_top_of_unit_mem I x y hx hy\n#align eq_top_of_is_unit_mem eq_top_of_is_unit_mem\n\n",
 "eq_top_iff_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem eq_top_iff_one : I = «expr⊤» ↔ (1 : α) ∈ I :=\n  ⟨by rintro rfl <;> trivial, fun h => eq_top_of_unit_mem _ _ 1 h (by simp)⟩\n#align eq_top_iff_one eq_top_iff_one\n\n",
 "eq_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_maximal.eq_of_le {I J : ideal α} (hI : I.is_maximal) (hJ : J ≠ «expr⊤») (IJ : I ≤ J) : I = J :=\n  eq_iff_le_not_lt.2 ⟨IJ, fun h => hJ (hI.1.2 _ h)⟩\n#align is_maximal.eq_of_le is_maximal.eq_of_le\n\n",
 "eq_bot_or_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- All ideals in a division ring are trivial. -/\ntheorem eq_bot_or_top : I = «expr⊥» ∨ I = «expr⊤» :=\n  by\n  rw [or_iff_not_imp_right]\n  change _ ≠ _ → _\n  rw [ideal.ne_top_iff_one]\n  intro h1\n  rw [eq_bot_iff]\n  intro r hr\n  by_cases H : r = 0; · simpa\n  simpa [H, h1] using I.mul_mem_left r⁻¹ hr\n#align eq_bot_or_top eq_bot_or_top\n\n",
 "eq_bot_of_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem eq_bot_of_prime [h : I.is_prime] : I = «expr⊥» :=\n  or_iff_not_imp_right.mp I.eq_bot_or_top h.1\n#align eq_bot_of_prime eq_bot_of_prime\n\n",
 "coe_subset_nonunits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem coe_subset_nonunits [Semiring α] {I : ideal α} (h : I ≠ «expr⊤») : (I : set α) ⊆ nonunits α := fun x hx hu =>\n  h <| I.eq_top_of_is_unit_mem hx hu\n#align coe_subset_nonunits coe_subset_nonunits\n\n",
 "bot_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem bot_prime {R : Type _} [Ring R] [IsDomain R] : («expr⊥» : ideal R).is_prime :=\n  ⟨fun h => one_ne_zero (by rwa [ideal.eq_top_iff_one, submodule.mem_bot] at h), fun x y h =>\n    mul_eq_zero.mp (by simpa only [submodule.mem_bot] using h)⟩\n#align bot_prime bot_prime\n\n",
 "bot_lt_of_maximal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem bot_lt_of_maximal (M : ideal R) [hm : M.is_maximal] (non_field : ¬IsField R) : «expr⊥» < M :=\n  by\n  rcases ring.not_is_field_iff_exists_ideal_bot_lt_and_lt_top.1 non_field with ⟨I, Ibot, Itop⟩\n  constructor; · simp\n  intro mle\n  apply @irrefl _ (· < ·) _ («expr⊤» : ideal R)\n  have : M = «expr⊥» := eq_bot_iff.mpr mle\n  rw [this] at *\n  rwa [hm.1.2 I Ibot] at Itop\n#align bot_lt_of_maximal bot_lt_of_maximal\n\n",
 "bot_is_maximal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem bot_is_maximal : is_maximal («expr⊥» : ideal K) :=\n  ⟨⟨fun h => absurd ((eq_top_iff_one («expr⊤» : ideal K)).mp rfl) (by rw [← h] <;> simp), fun I hI =>\n      or_iff_not_imp_left.mp (eq_bot_or_top I) (ne_of_gt hI)⟩⟩\n#align bot_is_maximal bot_is_maximal\n\n",
 "add_mem_iff_right":
 "protected theorem add_mem_iff_right : a ∈ I → (a + b ∈ I ↔ b ∈ I) :=\n  I.add_mem_iff_right\n#align add_mem_iff_right add_mem_iff_right\n\n",
 "add_mem_iff_left":
 "protected theorem add_mem_iff_left : b ∈ I → (a + b ∈ I ↔ a ∈ I) :=\n  I.add_mem_iff_left\n#align add_mem_iff_left add_mem_iff_left\n\n",
 "add_mem":
 "protected theorem add_mem : a ∈ I → b ∈ I → a + b ∈ I :=\n  I.add_mem\n#align add_mem add_mem\n\n",
 "Inf_is_prime_of_is_chain":
 "theorem Inf_is_prime_of_is_chain {s : set (ideal α)} (hs : s.nonempty) (hs' : IsChain (· ≤ ·) s)\n    (H : ∀ p ∈ s, ideal.is_prime p) : (infₛ s).is_prime :=\n  ⟨fun e =>\n    let ⟨x, hx⟩ := hs\n    (H x hx).ne_top (eq_top_iff.mpr (e.symm.trans_le (infₛ_le hx))),\n    fun x y e =>\n    or_iff_not_imp_left.mpr fun hx => by\n      rw [ideal.mem_Inf] at hx e⊢\n      push_neg  at hx\n      obtain ⟨I, hI, hI'⟩ := hx\n      intro J hJ\n      cases hs'.total hI hJ\n      · exact h (((H I hI).mem_or_mem (e hI)).resolve_left hI')\n      · exact ((H J hJ).mem_or_mem (e hJ)).resolve_left fun x => hI' <| h x⟩\n#align Inf_is_prime_of_is_chain Inf_is_prime_of_is_chain\n\n"}