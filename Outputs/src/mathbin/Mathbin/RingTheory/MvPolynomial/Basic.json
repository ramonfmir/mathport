{"mem_restrict_total_degree":
 "theorem mem_restrict_total_degree (p : MvPolynomial σ R) : p ∈ restrictTotalDegree σ R m ↔ p.total_degree ≤ m :=\n  by\n  rw [total_degree, Finset.sup_le_iff]\n  rfl\n#align mem_restrict_total_degree mem_restrict_total_degree\n\n",
 "mem_restrict_degree_iff_sup":
 "theorem mem_restrict_degree_iff_sup (p : MvPolynomial σ R) (n : ℕ) :\n    p ∈ restrictDegree σ R n ↔ ∀ i, p.degrees.count i ≤ n :=\n  by\n  simp only [mem_restrict_degree, degrees, Multiset.count_finset_sup, Finsupp.count_toMultiset, Finset.sup_le_iff]\n  exact ⟨fun h n s hs => h s hs n, fun h s hs n => h n s hs⟩\n#align mem_restrict_degree_iff_sup mem_restrict_degree_iff_sup\n\n",
 "mem_restrict_degree":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem mem_restrict_degree (p : MvPolynomial σ R) (n : ℕ) :\n    p ∈ restrictDegree σ R n ↔ ∀ s ∈ p.support, ∀ i, (s : «expr →₀ » σ ℕ) i ≤ n :=\n  by\n  rw [restrict_degree, Finsupp.mem_supported]\n  rfl\n#align mem_restrict_degree mem_restrict_degree\n\n",
 "map_range_eq_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-\nCopyright (c) 2019 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\ntheorem map_range_eq_map {R S : Type _} [CommRing R] [CommRing S] (p : MvPolynomial σ R) (f : «expr →+* » R S) :\n    Finsupp.mapRange f f.map_zero p = map f p :=\n  by\n  -- `finsupp.map_range_finset_sum` expects `f : R →+ S`\n  change Finsupp.mapRange (f : «expr →+ » R S) (f : «expr →+ » R S).map_zero p = map f p\n  rw [p.as_sum, Finsupp.mapRange_finset_sum, (map f).map_sum]\n  refine' Finset.sum_congr rfl fun n _ => _\n  rw [map_monomial, ← single_eq_monomial, Finsupp.mapRange_single, single_eq_monomial, f.coe_add_monoid_hom]\n#align map_range_eq_map map_range_eq_map\n\n",
 "linear_independent_X":
 "theorem linear_independent_X : LinearIndependent R (X : σ → MvPolynomial σ R) :=\n  (basisMonomials σ R).linear_independent.comp (fun s : σ => Finsupp.single s 1)\n    (Finsupp.single_left_injective one_ne_zero)\n#align linear_independent_X linear_independent_X\n\n",
 "coe_basis_monomials":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n-- this is here to avoid import cycle issues\n@[simp]\ntheorem coe_basis_monomials : (basisMonomials R : ℕ → polynomial R) = fun s => monomial s 1 :=\n  _root_.funext fun n => ofFinsupp_single _ _\n#align coe_basis_monomials coe_basis_monomials\n\n"}