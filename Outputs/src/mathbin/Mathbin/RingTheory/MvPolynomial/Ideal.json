{"mem_ideal_span_monomial_image_iff_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem mem_ideal_span_monomial_image_iff_dvd {x : MvPolynomial σ R} {s : Set («expr →₀ » σ ℕ)} :\n    x ∈ Ideal.span («expr '' » (fun s => monomial s (1 : R)) s) ↔\n      ∀ xi ∈ x.support, ∃ si ∈ s, monomial si 1 ∣ monomial xi (x.coeff xi) :=\n  by\n  refine' mem_ideal_span_monomial_image.trans (forall₂_congr fun xi hxi => _)\n  simp_rw [monomial_dvd_monomial, one_dvd, and_true_iff, mem_support_iff.mp hxi, false_or_iff]\n#align mem_ideal_span_monomial_image_iff_dvd mem_ideal_span_monomial_image_iff_dvd\n\n",
 "mem_ideal_span_monomial_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-\nCopyright (c) 2023 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- `x` is in a monomial ideal generated by `s` iff every element of of its support dominates one of\nthe generators. Note that `si ≤ xi` is analogous to saying that the monomial corresponding to `si`\ndivides the monomial corresponding to `xi`. -/\ntheorem mem_ideal_span_monomial_image {x : MvPolynomial σ R} {s : Set («expr →₀ » σ ℕ)} :\n    x ∈ Ideal.span («expr '' » (fun s => monomial s (1 : R)) s) ↔ ∀ xi ∈ x.support, ∃ si ∈ s, si ≤ xi :=\n  by\n  refine' add_monoid_algebra.mem_ideal_span_of'_image.trans _\n  simp_rw [le_iff_exists_add, add_comm]\n  rfl\n#align mem_ideal_span_monomial_image mem_ideal_span_monomial_image\n\n",
 "mem_ideal_span_X_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/-- `x` is in a monomial ideal generated by variables `X` iff every element of of its support\nhas a component in `s`. -/\ntheorem mem_ideal_span_X_image {x : MvPolynomial σ R} {s : Set σ} :\n    x ∈ Ideal.span («expr '' » MvPolynomial.X s : Set (MvPolynomial σ R)) ↔\n      ∀ m ∈ x.support, ∃ i ∈ s, (m : «expr →₀ » σ ℕ) i ≠ 0 :=\n  by\n  have := @mem_ideal_span_monomial_image σ R _ _ («expr '' » (fun i => Finsupp.single i 1) s)\n  rw [Set.image_image] at this\n  refine' this.trans _\n  simp [Nat.one_le_iff_ne_zero]\n#align mem_ideal_span_X_image mem_ideal_span_X_image\n\n"}