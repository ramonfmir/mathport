{"weighted_total_degree_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- The `weighted_total_degree` of the zero polynomial is `⊥`. -/\ntheorem weighted_total_degree_zero (w : σ → M) : weightedTotalDegree w (0 : MvPolynomial σ R) = «expr⊥» := by\n  simp only [weighted_total_degree, support_zero, Finset.sup_empty]\n#align weighted_total_degree_zero weighted_total_degree_zero\n\n",
 "weighted_total_degree_coe":
 "/-- This lemma relates `weighted_total_degree` and `weighted_total_degree'`. -/\ntheorem weighted_total_degree_coe (w : σ → M) (p : MvPolynomial σ R) (hp : p ≠ 0) :\n    weightedTotalDegree' w p = ↑(weightedTotalDegree w p) :=\n  by\n  rw [ne.def, ← weighted_total_degree'_eq_bot_iff w p, ← ne.def, WithBot.ne_bot_iff_exists] at hp\n  obtain ⟨m, hm⟩ := hp\n  apply le_antisymm\n  · simp only [weighted_total_degree, weighted_total_degree', Finset.sup_le_iff, WithBot.coe_le_coe]\n    intro b\n    exact Finset.le_sup\n  · simp only [weighted_total_degree]\n    have hm' : weighted_total_degree' w p ≤ m := le_of_eq hm.symm\n    rw [← hm]\n    simpa [weighted_total_degree'] using hm'\n#align weighted_total_degree_coe weighted_total_degree_coe\n\n",
 "weighted_total_degree'_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- The `weighted_total_degree'` of the zero polynomial is `⊥`. -/\ntheorem weighted_total_degree'_zero (w : σ → M) : weightedTotalDegree' w (0 : MvPolynomial σ R) = «expr⊥» := by\n  simp only [weighted_total_degree', support_zero, Finset.sup_empty]\n#align weighted_total_degree'_zero weighted_total_degree'_zero\n\n",
 "weighted_total_degree'_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2022 María Inés de Frutos-Fernández. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Antoine Chambert-Loir, María Inés de Frutos-Fernández\n-/\n/-- The `weighted_total_degree'` of a polynomial `p` is `⊥` if and only if `p = 0`. -/\ntheorem weighted_total_degree'_eq_bot_iff (w : σ → M) (p : MvPolynomial σ R) :\n    weightedTotalDegree' w p = «expr⊥» ↔ p = 0 :=\n  by\n  simp only [weighted_total_degree', Finset.sup_eq_bot_iff, mem_support_iff, WithBot.coe_ne_bot,\n    MvPolynomial.eq_zero_iff]\n  exact forall_congr' fun _ => Classical.not_not\n#align weighted_total_degree'_eq_bot_iff weighted_total_degree'_eq_bot_iff\n\n",
 "weighted_total_degree":
 "/-- A non zero weighted homogeneous polynomial of weighted degree `n` has weighted total degree\n  `n`. -/\ntheorem weighted_total_degree [SemilatticeSup M] {w : σ → M} (hφ : IsWeightedHomogeneous w φ n) (h : φ ≠ 0) :\n    weightedTotalDegree' w φ = n := by\n  simp only [weighted_total_degree']\n  apply le_antisymm\n  · simp only [Finset.sup_le_iff, mem_support_iff, WithBot.coe_le_coe]\n    exact fun d hd => le_of_eq (hφ hd)\n  · obtain ⟨d, hd⟩ : ∃ d, coeff d φ ≠ 0 := exists_coeff_ne_zero h\n    simp only [← hφ hd, Finsupp.sum]\n    replace hd := finsupp.mem_support_iff.mpr hd\n    exact Finset.le_sup hd\n#align weighted_total_degree weighted_total_degree\n\n",
 "weighted_homogeneous_submodule_mul":
 "/-- The submodule generated by products `Pm *Pn` of weighted homogeneous polynomials of degrees `m`\n  and `n` is contained in the submodule of weighted homogeneous polynomials of degree `m + n`. -/\ntheorem weighted_homogeneous_submodule_mul (w : σ → M) (m n : M) :\n    weightedHomogeneousSubmodule R w m * weightedHomogeneousSubmodule R w n ≤\n      weightedHomogeneousSubmodule R w (m + n) :=\n  by\n  rw [Submodule.mul_le]\n  intro φ hφ ψ hψ c hc\n  rw [coeff_mul] at hc\n  obtain ⟨⟨d, e⟩, hde, H⟩ := Finset.exists_ne_zero_of_sum_ne_zero hc\n  have aux : coeff d φ ≠ 0 ∧ coeff e ψ ≠ 0 := by\n    contrapose! H\n    by_cases h : coeff d φ = 0 <;> simp_all only [ne.def, not_false_iff, MulZeroClass.zero_mul, MulZeroClass.mul_zero]\n  rw [← finsupp.mem_antidiagonal.mp hde, ← hφ aux.1, ← hψ aux.2, map_add]\n#align weighted_homogeneous_submodule_mul weighted_homogeneous_submodule_mul\n\n",
 "weighted_homogeneous_submodule_eq_finsupp_supported":
 "/-- The submodule ` weighted_homogeneous_submodule R w m` of homogeneous `mv_polynomial`s of\n  degree `n` is equal to the `R`-submodule of all `p : (σ →₀ ℕ) →₀ R` such that\n  `p.support ⊆ {d | weighted_degree' w d = m}`. While equal, the former has a\n  convenient definitional reduction. -/\ntheorem weighted_homogeneous_submodule_eq_finsupp_supported (w : σ → M) (m : M) :\n    weightedHomogeneousSubmodule R w m = Finsupp.supported _ R { d | weightedDegree' w d = m } :=\n  by\n  ext\n  simp only [mem_supported, Set.subset_def, Finsupp.mem_support_iff, mem_coe]\n  rfl\n#align weighted_homogeneous_submodule_eq_finsupp_supported weighted_homogeneous_submodule_eq_finsupp_supported\n\n",
 "weighted_homogeneous_component_zero":
 "/-- If `M` is a `canonically_ordered_add_monoid`, then the `weighted_homogeneous_component`\n  of weighted degree `0` of a polynomial is its constant coefficient. -/\n@[simp]\ntheorem weighted_homogeneous_component_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :\n    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ) :=\n  by\n  ext1 d\n  rcases em (d = 0) with (rfl | hd)\n  · simp only [coeff_weighted_homogeneous_component, if_pos, map_zero, coeff_zero_C]\n  · rw [coeff_weighted_homogeneous_component, if_neg, coeff_C, if_neg (ne.symm hd)]\n    simp only [weighted_degree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum, sum_eq_zero_iff,\n      Finsupp.mem_support_iff, ne.def, smul_eq_zero, not_forall, not_or, and_self_left, exists_prop]\n    simp only [Finsupp.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd\n    obtain ⟨i, hi⟩ := hd\n    exact ⟨i, hi, hw i⟩\n#align weighted_homogeneous_component_zero weighted_homogeneous_component_zero\n\n",
 "weighted_homogeneous_component_weighted_homogeneous_polynomial":
 "/-- The weighted homogeneous components of a weighted homogeneous polynomial. -/\ntheorem weighted_homogeneous_component_weighted_homogeneous_polynomial (m n : M) (p : MvPolynomial σ R)\n    (h : p ∈ weightedHomogeneousSubmodule R w n) : weightedHomogeneousComponent w m p = if m = n then p else 0 :=\n  by\n  simp only [mem_weighted_homogeneous_submodule] at h\n  ext x\n  rw [coeff_weighted_homogeneous_component]\n  by_cases zero_coeff : coeff x p = 0\n  · split_ifs\n    all_goals simp only [zero_coeff, coeff_zero]\n  · rw [h zero_coeff]\n    simp only [show n = m ↔ m = n from eq_comm]\n    split_ifs with h1\n    · rfl\n    · simp only [coeff_zero]\n#align weighted_homogeneous_component_weighted_homogeneous_polynomial weighted_homogeneous_component_weighted_homogeneous_polynomial\n\n",
 "weighted_homogeneous_component_is_weighted_homogeneous":
 "/-- The `n` weighted homogeneous component of a polynomial is weighted homogeneous of\nweighted degree `n`. -/\ntheorem weighted_homogeneous_component_is_weighted_homogeneous :\n    (weightedHomogeneousComponent w n φ).is_weighted_homogeneous w n :=\n  by\n  intro d hd\n  contrapose! hd\n  rw [coeff_weighted_homogeneous_component, if_neg hd]\n#align weighted_homogeneous_component_is_weighted_homogeneous weighted_homogeneous_component_is_weighted_homogeneous\n\n",
 "weighted_homogeneous_component_finsupp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem weighted_homogeneous_component_finsupp :\n    (Function.support fun m => weightedHomogeneousComponent w m φ).finite :=\n  by\n  suffices\n    (Function.support fun m => weighted_homogeneous_component w m φ) ⊆\n      «expr '' » (fun d => weighted_degree' w d) φ.support\n    by exact finite.subset («expr '' » (fun d : «expr →₀ » σ ℕ => (weighted_degree' w) d) ↑(support φ)).to_finite this\n  intro m hm\n  by_contra hm'\n  apply hm\n  simp only [mem_support, ne.def] at hm\n  simp only [Set.mem_image, not_exists, not_and] at hm'\n  exact weighted_homogeneous_component_eq_zero' m φ hm'\n#align weighted_homogeneous_component_finsupp weighted_homogeneous_component_finsupp\n\n",
 "weighted_homogeneous_component_eq_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem weighted_homogeneous_component_eq_zero' (h : ∀ d : «expr →₀ » σ ℕ, d ∈ φ.support → weightedDegree' w d ≠ n) :\n    weightedHomogeneousComponent w n φ = 0 :=\n  by\n  rw [weighted_homogeneous_component_apply, sum_eq_zero]\n  intro d hd; rw [mem_filter] at hd\n  exfalso; exact h _ hd.1 hd.2\n#align weighted_homogeneous_component_eq_zero' weighted_homogeneous_component_eq_zero'\n\n",
 "weighted_homogeneous_component_eq_zero":
 "theorem weighted_homogeneous_component_eq_zero [SemilatticeSup M] [OrderBot M] (h : weightedTotalDegree w φ < n) :\n    weightedHomogeneousComponent w n φ = 0 :=\n  by\n  rw [weighted_homogeneous_component_apply, sum_eq_zero]\n  intro d hd; rw [mem_filter] at hd\n  exfalso\n  apply lt_irrefl n\n  nth_rw 1 [← hd.2]\n  exact lt_of_le_of_lt (le_weighted_total_degree w hd.1) h\n#align weighted_homogeneous_component_eq_zero weighted_homogeneous_component_eq_zero\n\n",
 "weighted_homogeneous_component_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem weighted_homogeneous_component_apply :\n    weightedHomogeneousComponent w n φ =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (φ.support.filter fun d => weightedDegree' w d = n) (monomial d (coeff d φ)) :=\n  Finsupp.filter_eq_sum (fun d : «expr →₀ » σ ℕ => weightedDegree' w d = n) φ\n#align weighted_homogeneous_component_apply weighted_homogeneous_component_apply\n\n",
 "weighted_homogeneous_component_C_mul":
 "@[simp]\ntheorem weighted_homogeneous_component_C_mul (n : M) (r : R) :\n    weightedHomogeneousComponent w n (C r * φ) = C r * weightedHomogeneousComponent w n φ := by\n  simp only [C_mul', LinearMap.map_smul]\n#align weighted_homogeneous_component_C_mul weighted_homogeneous_component_C_mul\n\n",
 "sum_weighted_homogeneous_component":
 "/-- Every polynomial is the sum of its weighted homogeneous components. -/\ntheorem sum_weighted_homogeneous_component : (finsum fun m => weightedHomogeneousComponent w m φ) = φ :=\n  by\n  rw [finsum_eq_sum _ (weighted_homogeneous_component_finsupp φ)]\n  ext1 d\n  simp only [coeff_sum, coeff_weighted_homogeneous_component]\n  rw [Finset.sum_eq_single (weighted_degree' w d)]\n  · rw [if_pos rfl]\n  · intro m hm hm'\n    rw [if_neg hm'.symm]\n  · intro hm\n    rw [if_pos rfl]\n    simp only [finite.mem_to_finset, mem_support, ne.def, Classical.not_not] at hm\n    have := coeff_weighted_homogeneous_component _ φ d\n    rw [hm, if_pos rfl, coeff_zero] at this\n    exact this.symm\n#align sum_weighted_homogeneous_component sum_weighted_homogeneous_component\n\n",
 "mul":
 "/-- The product of weighted homogeneous polynomials of weighted degrees `m` and `n` is weighted\n  homogeneous of weighted degree `m + n`. -/\ntheorem mul {w : σ → M} (hφ : IsWeightedHomogeneous w φ m) (hψ : IsWeightedHomogeneous w ψ n) :\n    IsWeightedHomogeneous w (φ * ψ) (m + n) :=\n  weightedHomogeneousSubmodule_mul w m n <| Submodule.mul_mem_mul hφ hψ\n#align mul mul\n\n",
 "mem_weighted_homogeneous_submodule":
 "@[simp]\ntheorem mem_weighted_homogeneous_submodule (w : σ → M) (m : M) (p : MvPolynomial σ R) :\n    p ∈ weightedHomogeneousSubmodule R w m ↔ p.is_weighted_homogeneous w m :=\n  iff.rfl\n#align mem_weighted_homogeneous_submodule mem_weighted_homogeneous_submodule\n\n",
 "le_weighted_total_degree":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem le_weighted_total_degree (w : σ → M) {φ : MvPolynomial σ R} {d : «expr →₀ » σ ℕ} (hd : d ∈ φ.support) :\n    weightedDegree' w d ≤ φ.weighted_total_degree w :=\n  le_sup hd\n#align le_weighted_total_degree le_weighted_total_degree\n\n",
 "is_weighted_homogeneous_zero":
 "/-- 0 is weighted homogeneous of any degree. -/\ntheorem is_weighted_homogeneous_zero (w : σ → M) (m : M) : IsWeightedHomogeneous w (0 : MvPolynomial σ R) m :=\n  (weightedHomogeneousSubmodule R w m).zero_mem\n#align is_weighted_homogeneous_zero is_weighted_homogeneous_zero\n\n",
 "is_weighted_homogeneous_one":
 "/-- 1 is weighted homogeneous of degree 0. -/\ntheorem is_weighted_homogeneous_one (w : σ → M) : IsWeightedHomogeneous w (1 : MvPolynomial σ R) 0 :=\n  isWeightedHomogeneous_C _ _\n#align is_weighted_homogeneous_one is_weighted_homogeneous_one\n\n",
 "is_weighted_homogeneous_of_total_degree_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- A polynomial of weighted_total_degree `⊥` is weighted_homogeneous of degree `⊥`. -/\ntheorem is_weighted_homogeneous_of_total_degree_zero [SemilatticeSup M] [OrderBot M] (w : σ → M) {p : MvPolynomial σ R}\n    (hp : weightedTotalDegree w p = («expr⊥» : M)) : IsWeightedHomogeneous w p («expr⊥» : M) :=\n  by\n  intro d hd\n  have h := weighted_total_degree_coe w p (mv_polynomial.ne_zero_iff.mpr ⟨d, hd⟩)\n  simp only [weighted_total_degree', hp] at h\n  rw [eq_bot_iff, ← WithBot.coe_le_coe, ← h]\n  exact Finset.le_sup (mem_support_iff.mpr hd)\n#align is_weighted_homogeneous_of_total_degree_zero is_weighted_homogeneous_of_total_degree_zero\n\n",
 "is_weighted_homogeneous_monomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/-- Monomials are weighted homogeneous. -/\ntheorem is_weighted_homogeneous_monomial (w : σ → M) (d : «expr →₀ » σ ℕ) (r : R) {m : M}\n    (hm : weightedDegree' w d = m) : IsWeightedHomogeneous w (monomial d r) m :=\n  by\n  intro c hc\n  rw [coeff_monomial] at hc\n  split_ifs  at hc with h\n  · subst c\n    exact hm\n  · contradiction\n#align is_weighted_homogeneous_monomial is_weighted_homogeneous_monomial\n\n",
 "is_weighted_homogeneous_X":
 "/-- An indeterminate `i : σ` is weighted homogeneous of degree `w i`. -/\ntheorem is_weighted_homogeneous_X (w : σ → M) (i : σ) : IsWeightedHomogeneous w (X i : MvPolynomial σ R) (w i) :=\n  by\n  apply is_weighted_homogeneous_monomial\n  simp only [weighted_degree', LinearMap.toAddMonoidHom_coe, total_single, one_nsmul]\n#align is_weighted_homogeneous_X is_weighted_homogeneous_X\n\n",
 "is_weighted_homogeneous_C":
 "/-- Constant polynomials are weighted homogeneous of degree 0. -/\ntheorem is_weighted_homogeneous_C (w : σ → M) (r : R) : IsWeightedHomogeneous w (C r : MvPolynomial σ R) 0 :=\n  isWeightedHomogeneous_monomial _ _ _ (map_zero _)\n#align is_weighted_homogeneous_C is_weighted_homogeneous_C\n\n",
 "inj_right":
 "/-- The weighted degree of a nonzero weighted homogeneous polynomial is well-defined. -/\ntheorem inj_right {w : σ → M} (hφ : φ ≠ 0) (hm : IsWeightedHomogeneous w φ m) (hn : IsWeightedHomogeneous w φ n) :\n    m = n := by\n  obtain ⟨d, hd⟩ : ∃ d, coeff d φ ≠ 0 := exists_coeff_ne_zero hφ\n  rw [← hm hd, ← hn hd]\n#align inj_right inj_right\n\n",
 "coeff_weighted_homogeneous_component":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem coeff_weighted_homogeneous_component (d : «expr →₀ » σ ℕ) :\n    coeff d (weightedHomogeneousComponent w n φ) = if weightedDegree' w d = n then coeff d φ else 0 :=\n  Finsupp.filter_apply (fun d : «expr →₀ » σ ℕ => weightedDegree' w d = n) φ d\n#align coeff_weighted_homogeneous_component coeff_weighted_homogeneous_component\n\n",
 "coeff_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/-- The weighted degree of a weighted homogeneous polynomial controls its support. -/\ntheorem coeff_eq_zero {w : σ → M} (hφ : IsWeightedHomogeneous w φ n) (d : «expr →₀ » σ ℕ)\n    (hd : weightedDegree' w d ≠ n) : coeff d φ = 0 :=\n  by\n  have aux := mt (@hφ d) hd\n  rwa [Classical.not_not] at aux\n#align coeff_eq_zero coeff_eq_zero\n\n",
 "add":
 "/-- The sum of two weighted homogeneous polynomials of degree `n` is weighted homogeneous of\n  weighted degree `n`. -/\ntheorem add {w : σ → M} (hφ : IsWeightedHomogeneous w φ n) (hψ : IsWeightedHomogeneous w ψ n) :\n    IsWeightedHomogeneous w (φ + ψ) n :=\n  (weightedHomogeneousSubmodule R w n).add_mem hφ hψ\n#align add add\n\n",
 "Sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Sum /-\n/-- The sum of weighted homogeneous polynomials of degree `n` is weighted homogeneous of\n  weighted degree `n`. -/\ntheorem Sum {ι : Type _} (s : Finset ι) (φ : ι → MvPolynomial σ R) (n : M) {w : σ → M}\n    (h : ∀ i ∈ s, IsWeightedHomogeneous w (φ i) n) :\n    IsWeightedHomogeneous w\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (φ i)) n :=\n  (weightedHomogeneousSubmodule R w n).sum_mem h\n#align sum Sum\n-/\n\n",
 "Prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Prod /-\n/-- A product of weighted homogeneous polynomials is weighted homogeneous, with weighted degree\n  equal to the sum of the weighted degrees. -/\ntheorem Prod {ι : Type _} (s : Finset ι) (φ : ι → MvPolynomial σ R) (n : ι → M) {w : σ → M} :\n    (∀ i ∈ s, IsWeightedHomogeneous w (φ i) (n i)) →\n      IsWeightedHomogeneous w\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (φ i))\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (n i)) :=\n  by\n  apply Finset.induction_on s\n  · intro\n    simp only [is_weighted_homogeneous_one, Finset.sum_empty, Finset.prod_empty]\n  · intro i s his IH h\n    simp only [his, Finset.prod_insert, Finset.sum_insert, not_false_iff]\n    apply (h i (Finset.mem_insert_self _ _)).mul (IH _)\n    intro j hjs\n    exact h j (Finset.mem_insert_of_mem hjs)\n#align prod Prod\n-/\n\n"}