{"trace_complex_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem algebra.trace_complex_apply (z : exprℂ) : algebra.trace (exprℝ) (exprℂ) z = 2 * z.re :=\n  by\n  rw [algebra.trace_eq_matrix_trace Complex.basisOneI, algebra.left_mul_matrix_complex, Matrix.trace_fin_two]\n  exact (two_mul _).symm\n#align algebra.trace_complex_apply algebra.trace_complex_apply\n\n",
 "norm_complex_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem algebra.norm_complex_eq : algebra.norm (exprℝ) = normSq.to_monoid_hom :=\n  MonoidHom.ext algebra.norm_complex_apply\n#align algebra.norm_complex_eq algebra.norm_complex_eq\n\n",
 "norm_complex_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem algebra.norm_complex_apply (z : exprℂ) : algebra.norm (exprℝ) z = z.norm_sq :=\n  by\n  rw [algebra.norm_eq_matrix_det Complex.basisOneI, algebra.left_mul_matrix_complex, Matrix.det_fin_two, norm_sq_apply]\n  simp\n#align algebra.norm_complex_apply algebra.norm_complex_apply\n\n",
 "left_mul_matrix_complex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-\nCopyright (c) 2023 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\ntheorem algebra.left_mul_matrix_complex (z : exprℂ) :\n    Algebra.leftMulMatrix Complex.basisOneI z = !![z.re, -z.im; z.im, z.re] :=\n  by\n  ext (i j)\n  rw [Algebra.leftMulMatrix_eq_repr_mul, Complex.coe_basisOneI_repr, Complex.coe_basisOneI, mul_re, mul_im,\n    Matrix.of_apply]\n  fin_cases j\n  · simp_rw [Matrix.cons_val_zero, one_re, one_im, MulZeroClass.mul_zero, mul_one, sub_zero, zero_add]\n    fin_cases i <;> rfl\n  · simp_rw [Matrix.cons_val_one, Matrix.head_cons, I_re, I_im, MulZeroClass.mul_zero, mul_one, zero_sub, add_zero]\n    fin_cases i <;> rfl\n#align algebra.left_mul_matrix_complex algebra.left_mul_matrix_complex\n\n"}