{"pochhammer_zero_eval_zero":
 "#print pochhammer_zero_eval_zero /-\ntheorem pochhammer_zero_eval_zero : (pochhammer S 0).eval 0 = 1 := by simp\n#align pochhammer_zero_eval_zero pochhammer_zero_eval_zero\n-/\n\n",
 "pochhammer_zero":
 "#print pochhammer_zero /-\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n@[simp]\ntheorem pochhammer_zero : pochhammer S 0 = 1 :=\n  rfl\n#align pochhammer_zero pochhammer_zero\n-/\n\n",
 "pochhammer_succ_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n#print pochhammer_succ_right /-\ntheorem pochhammer_succ_right (n : ℕ) : pochhammer S (n + 1) = pochhammer S n * (X + n) :=\n  by\n  suffices h : pochhammer ℕ (n + 1) = pochhammer ℕ n * (X + n)\n  · apply_fun Polynomial.map (algebraMap ℕ S)  at h\n    simpa only [pochhammer_map, Polynomial.map_mul, Polynomial.map_add, map_X, Polynomial.map_nat_cast] using h\n  induction' n with n ih\n  · simp\n  ·\n    conv_lhs =>\n      rw [pochhammer_succ_left, ih, mul_comp, ← mul_assoc, ← pochhammer_succ_left, add_comp, X_comp, nat_cast_comp,\n        add_assoc, add_comm (1 : polynomial ℕ), ← Nat.cast_succ]\n#align pochhammer_succ_right pochhammer_succ_right\n-/\n\n",
 "pochhammer_succ_left":
 "#print pochhammer_succ_left /-\ntheorem pochhammer_succ_left (n : ℕ) : pochhammer S (n + 1) = X * (pochhammer S n).comp (X + 1) := by rw [pochhammer]\n#align pochhammer_succ_left pochhammer_succ_left\n-/\n\n",
 "pochhammer_succ_eval":
 "#print pochhammer_succ_eval /-\ntheorem pochhammer_succ_eval {S : Type _} [Semiring S] (n : ℕ) (k : S) :\n    (pochhammer S (n + 1)).eval k = (pochhammer S n).eval k * (k + n) := by\n  rw [pochhammer_succ_right, mul_add, eval_add, eval_mul_X, ← Nat.cast_comm, ← C_eq_nat_cast, eval_C_mul, Nat.cast_comm,\n    ← mul_add]\n#align pochhammer_succ_eval pochhammer_succ_eval\n-/\n\n",
 "pochhammer_succ_comp_X_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print pochhammer_succ_comp_X_add_one /-\ntheorem pochhammer_succ_comp_X_add_one (n : ℕ) :\n    (pochhammer S (n + 1)).comp (X + 1) = pochhammer S (n + 1) + «expr • » (n + 1) ((pochhammer S n).comp (X + 1)) :=\n  by\n  suffices (pochhammer ℕ (n + 1)).comp (X + 1) = pochhammer ℕ (n + 1) + (n + 1) * (pochhammer ℕ n).comp (X + 1) by\n    simpa [map_comp] using congr_arg (Polynomial.map (Nat.castRingHom S)) this\n  nth_rw 2 [pochhammer_succ_left]\n  rw [← add_mul, pochhammer_succ_right ℕ n, mul_comp, mul_comm, add_comp, X_comp, nat_cast_comp, add_comm ↑n, ←\n    add_assoc]\n#align pochhammer_succ_comp_X_add_one pochhammer_succ_comp_X_add_one\n-/\n\n",
 "pochhammer_pos":
 "#print pochhammer_pos /-\ntheorem pochhammer_pos (n : ℕ) (s : S) (h : 0 < s) : 0 < (pochhammer S n).eval s :=\n  by\n  induction' n with n ih\n  · simp only [Nat.zero_eq, pochhammer_zero, eval_one]\n    exact zero_lt_one\n  · rw [pochhammer_succ_right, mul_add, eval_add, ← Nat.cast_comm, eval_nat_cast_mul, eval_mul_X, Nat.cast_comm, ←\n      mul_add]\n    exact mul_pos ih (lt_of_lt_of_le h ((le_add_iff_nonneg_right _).mpr (Nat.cast_nonneg n)))\n#align pochhammer_pos pochhammer_pos\n-/\n\n",
 "pochhammer_one":
 "#print pochhammer_one /-\n@[simp]\ntheorem pochhammer_one : pochhammer S 1 = X := by simp [pochhammer]\n#align pochhammer_one pochhammer_one\n-/\n\n",
 "pochhammer_ne_zero_eval_zero":
 "#print pochhammer_ne_zero_eval_zero /-\n@[simp]\ntheorem pochhammer_ne_zero_eval_zero {n : ℕ} (h : n ≠ 0) : (pochhammer S n).eval 0 = 0 := by\n  simp [pochhammer_eval_zero, h]\n#align pochhammer_ne_zero_eval_zero pochhammer_ne_zero_eval_zero\n-/\n\n",
 "pochhammer_nat_eval_succ":
 "#print pochhammer_nat_eval_succ /-\ntheorem pochhammer_nat_eval_succ (r : ℕ) :\n    ∀ n : ℕ, n * (pochhammer ℕ r).eval (n + 1) = (n + r) * (pochhammer ℕ r).eval n\n  | 0 => by\n    by_cases h : r = 0\n    · simp only [h, MulZeroClass.zero_mul, zero_add]\n    · simp only [pochhammer_eval_zero, MulZeroClass.zero_mul, if_neg h, MulZeroClass.mul_zero]\n  | k + 1 => by simp only [pochhammer_nat_eq_ascFactorial, Nat.succ_ascFactorial, add_right_comm]\n#align pochhammer_nat_eval_succ pochhammer_nat_eval_succ\n-/\n\n",
 "pochhammer_nat_eq_descFactorial":
 "#print pochhammer_nat_eq_descFactorial /-\ntheorem pochhammer_nat_eq_descFactorial (a b : ℕ) : (pochhammer ℕ b).eval a = (a + b - 1).desc_factorial b :=\n  by\n  cases b\n  · rw [Nat.descFactorial_zero, pochhammer_zero, Polynomial.eval_one]\n  rw [nat.add_succ, nat.succ_sub_succ, tsub_zero]\n  cases a\n  · rw [pochhammer_ne_zero_eval_zero _ b.succ_ne_zero, zero_add, Nat.descFactorial_of_lt b.lt_succ_self]\n  · rw [nat.succ_add, ← nat.add_succ, Nat.add_descFactorial_eq_ascFactorial, pochhammer_nat_eq_ascFactorial]\n#align pochhammer_nat_eq_desc_factorial pochhammer_nat_eq_descFactorial\n-/\n\n",
 "pochhammer_nat_eq_ascFactorial":
 "#print pochhammer_nat_eq_ascFactorial /-\ntheorem pochhammer_nat_eq_ascFactorial (n : ℕ) : ∀ k, (pochhammer ℕ k).eval (n + 1) = n.asc_factorial k\n  | 0 => by erw [eval_one] <;> rfl\n  | t + 1 => by\n    rw [pochhammer_succ_right, eval_mul, pochhammer_nat_eq_ascFactorial t]\n    suffices n.asc_factorial t * (n + 1 + t) = n.asc_factorial (t + 1) by simpa\n    rw [Nat.ascFactorial_succ, add_right_comm, mul_comm]\n#align pochhammer_nat_eq_asc_factorial pochhammer_nat_eq_ascFactorial\n-/\n\n",
 "pochhammer_mul":
 "#print pochhammer_mul /-\ntheorem pochhammer_mul (n m : ℕ) : pochhammer S n * (pochhammer S m).comp (X + n) = pochhammer S (n + m) :=\n  by\n  induction' m with m ih\n  · simp\n  ·\n    rw [pochhammer_succ_right, Polynomial.mul_X_add_nat_cast_comp, ← mul_assoc, ih, nat.succ_eq_add_one, ← add_assoc,\n      pochhammer_succ_right, Nat.cast_add, add_assoc]\n#align pochhammer_mul pochhammer_mul\n-/\n\n",
 "pochhammer_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print pochhammer_map /-\n@[simp]\ntheorem pochhammer_map (f : «expr →+* » S T) (n : ℕ) : (pochhammer S n).map f = pochhammer T n :=\n  by\n  induction' n with n ih\n  · simp\n  · simp [ih, pochhammer_succ_left, map_comp]\n#align pochhammer_map pochhammer_map\n-/\n\n",
 "pochhammer_eval_zero":
 "#print pochhammer_eval_zero /-\ntheorem pochhammer_eval_zero {n : ℕ} : (pochhammer S n).eval 0 = if n = 0 then 1 else 0 :=\n  by\n  cases n\n  · simp\n  · simp [X_mul, nat.succ_ne_zero, pochhammer_succ_left]\n#align pochhammer_eval_zero pochhammer_eval_zero\n-/\n\n",
 "pochhammer_eval_succ":
 "#print pochhammer_eval_succ /-\ntheorem pochhammer_eval_succ (r n : ℕ) :\n    (n : S) * (pochhammer S r).eval (n + 1 : S) = (n + r) * (pochhammer S r).eval n := by\n  exact_mod_cast congr_arg Nat.cast (pochhammer_nat_eval_succ r n)\n#align pochhammer_eval_succ pochhammer_eval_succ\n-/\n\n",
 "pochhammer_eval_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n#print pochhammer_eval_one /-\n@[simp]\ntheorem pochhammer_eval_one (S : Type _) [Semiring S] (n : ℕ) : (pochhammer S n).eval (1 : S) = (nat.factorial n : S) :=\n  by rw_mod_cast [pochhammer_nat_eq_ascFactorial, Nat.zero_ascFactorial]\n#align pochhammer_eval_one pochhammer_eval_one\n-/\n\n",
 "pochhammer_eval_cast":
 "#print pochhammer_eval_cast /-\n@[simp, norm_cast]\ntheorem pochhammer_eval_cast (n k : ℕ) : ((pochhammer ℕ n).eval k : S) = (pochhammer S n).eval k := by\n  rw [← pochhammer_map (algebraMap ℕ S), eval_map, ← eq_natCast (algebraMap ℕ S), eval₂_at_nat_cast, Nat.cast_id,\n    eq_natCast]\n#align pochhammer_eval_cast pochhammer_eval_cast\n-/\n\n",
 "mul_X_add_nat_cast_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n#print Polynomial.mul_X_add_nat_cast_comp /-\ntheorem Polynomial.mul_X_add_nat_cast_comp {p q : polynomial S} {n : ℕ} : (p * (X + n)).comp q = p.comp q * (q + n) :=\n  by rw [mul_add, add_comp, mul_X_comp, ← Nat.cast_comm, nat_cast_mul_comp, Nat.cast_comm, mul_add]\n#align polynomial.mul_X_add_nat_cast_comp Polynomial.mul_X_add_nat_cast_comp\n-/\n\n",
 "factorial_mul_pochhammer":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n#print factorial_mul_pochhammer /-\ntheorem factorial_mul_pochhammer (S : Type _) [Semiring S] (r n : ℕ) :\n    (nat.factorial r : S) * (pochhammer S n).eval (r + 1) = nat.factorial (r + n) := by\n  rw_mod_cast [pochhammer_nat_eq_ascFactorial, Nat.factorial_mul_ascFactorial]\n#align factorial_mul_pochhammer factorial_mul_pochhammer\n-/\n\n"}