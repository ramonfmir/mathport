{"map_dickson":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem map_dickson (f : «expr →+* » R S) : ∀ n : ℕ, map f (dickson k a n) = dickson k (f a) n\n  | 0 => by\n    simp only [dickson_zero, Polynomial.map_sub, Polynomial.map_nat_cast, bit1, bit0, Polynomial.map_add,\n      Polynomial.map_one]\n  | 1 => by simp only [dickson_one, map_X]\n  | n + 2 => by\n    simp only [dickson_add_two, Polynomial.map_sub, Polynomial.map_mul, map_X, map_C]\n    rw [map_dickson, map_dickson]\n#align map_dickson map_dickson\n\n",
 "dickson_zero":
 "/-\nCopyright (c) 2021 Julian Kuelshammer. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Julian Kuelshammer\n-/\n@[simp]\ntheorem dickson_zero : dickson k a 0 = 3 - k :=\n  rfl\n#align dickson_zero dickson_zero\n\n",
 "dickson_two_zero":
 "@[simp]\ntheorem dickson_two_zero : ∀ n : ℕ, dickson 2 (0 : R) n = X ^ n\n  | 0 => by\n    simp only [dickson_zero, pow_zero]\n    norm_num\n  | 1 => by simp only [dickson_one, pow_one]\n  | n + 2 => by\n    simp only [dickson_add_two, C_0, MulZeroClass.zero_mul, sub_zero]\n    rw [dickson_two_zero, pow_add X (n + 1) 1, mul_comm, pow_one]\n#align dickson_two_zero dickson_two_zero\n\n",
 "dickson_two":
 "theorem dickson_two : dickson k a 2 = X ^ 2 - C a * (3 - k) := by simp only [dickson, sq]\n#align dickson_two dickson_two\n\n",
 "dickson_one_one_zmod_p":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem dickson_one_one_zmod_p (p : ℕ) [Fact p.prime] : dickson 1 (1 : ZMod p) p = X ^ p :=\n  by\n  -- Recall that `dickson_eval_add_inv` characterises `dickson 1 1 p`\n  -- as a polynomial that maps `x + x⁻¹` to `x ^ p + (x⁻¹) ^ p`.\n  -- Since `X ^ p` also satisfies this property in characteristic `p`,\n  -- we can use a variant on `polynomial.funext` to conclude that these polynomials are equal.\n  -- For this argument, we need an arbitrary infinite field of characteristic `p`.\n  obtain ⟨K, _, _, H⟩ : ∃ (K : Type)(_ : Field K), ∃ _ : CharP K p, Infinite K :=\n    by\n    let K := FractionRing (Polynomial (ZMod p))\n    let f : «expr →+* » (ZMod p) K := (algebraMap _ (FractionRing _)).comp C\n    have : CharP K p := by\n      rw [← f.char_p_iff_char_p]\n      infer_instance\n    haveI : Infinite K :=\n      Infinite.of_injective (algebraMap (Polynomial (ZMod p)) (FractionRing (Polynomial (ZMod p))))\n        (IsFractionRing.injective _ _)\n    refine' ⟨K, _, _, _⟩ <;> infer_instance\n  skip\n  apply map_injective (ZMod.castHom (dvd_refl p) K) (RingHom.injective _)\n  rw [map_dickson, Polynomial.map_pow, map_X]\n  apply eq_of_infinite_eval_eq\n  -- The two polynomials agree on all `x` of the form `x = y + y⁻¹`.\n  apply @Set.Infinite.mono _ { x : K | ∃ y, x = y + y⁻¹ ∧ y ≠ 0 }\n  · rintro _ ⟨x, rfl, hx⟩\n    simp only [eval_X, eval_pow, Set.mem_setOf_eq, @add_pow_char K _ p,\n      dickson_one_one_eval_add_inv _ _ (mul_inv_cancel hx), inv_pow, ZMod.castHom_apply, ZMod.cast_one']\n  -- Now we need to show that the set of such `x` is infinite.\n  -- If the set is finite, then we will show that `K` is also finite.\n  · intro h\n    rw [← Set.infinite_univ_iff] at H\n    apply H\n    -- To each `x` of the form `x = y + y⁻¹`\n    -- we `bind` the set of `y` that solve the equation `x = y + y⁻¹`.\n    -- For every `x`, that set is finite (since it is governed by a quadratic equation).\n    -- For the moment, we claim that all these sets together cover `K`.\n    suffices (Set.univ : Set K) = { x : K | ∃ y : K, x = y + y⁻¹ ∧ y ≠ 0 } >>= fun x => { y | x = y + y⁻¹ ∨ y = 0 }\n      by\n      rw [this]\n      clear this\n      refine' h.bUnion fun x hx => _\n      -- The following quadratic polynomial has as solutions the `y` for which `x = y + y⁻¹`.\n      let φ : polynomial K := X ^ 2 - C x * X + 1\n      have hφ : φ ≠ 0 := by\n        intro H\n        have : φ.eval 0 = 0 := by rw [H, eval_zero]\n        simpa [eval_X, eval_one, eval_pow, eval_sub, sub_zero, eval_add, eval_mul, MulZeroClass.mul_zero, sq, zero_add,\n          one_ne_zero]\n      classical\n        convert(φ.roots ∪ {0}).to_finset.finite_to_set using 1\n        ext1 y\n        simp only [Multiset.mem_toFinset, Set.mem_setOf_eq, Finset.mem_coe, Multiset.mem_union, mem_roots hφ, is_root,\n          eval_add, eval_sub, eval_pow, eval_mul, eval_X, eval_C, eval_one, Multiset.mem_singleton]\n        by_cases hy : y = 0\n        · simp only [hy, eq_self_iff_true, or_true_iff]\n        apply or_congr _ iff.rfl\n        rw [← mul_left_inj' hy, eq_comm, ← sub_eq_zero, add_mul, inv_mul_cancel hy]\n        apply eq_iff_eq_cancel_right.mpr\n        ring\n    -- Finally, we prove the claim that our finite union of finite sets covers all of `K`.\n    · apply (Set.eq_univ_of_forall _).symm\n      intro x\n      simp only [exists_prop, Set.mem_unionᵢ, Set.bind_def, ne.def, Set.mem_setOf_eq]\n      by_cases hx : x = 0\n      · simp only [hx, and_true_iff, eq_self_iff_true, inv_zero, or_true_iff]\n        exact ⟨_, 1, rfl, one_ne_zero⟩\n      · simp only [hx, or_false_iff, exists_eq_right]\n        exact ⟨_, rfl, hx⟩\n#align dickson_one_one_zmod_p dickson_one_one_zmod_p\n\n",
 "dickson_one_one_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- The `(m * n)`-th Dickson polynomial of the first kind is the composition of the `m`-th and\n`n`-th. -/\ntheorem dickson_one_one_mul (m n : ℕ) : dickson 1 (1 : R) (m * n) = (dickson 1 1 m).comp (dickson 1 1 n) :=\n  by\n  have h : (1 : R) = Int.castRingHom R 1\n  simp only [eq_intCast, Int.cast_one]\n  rw [h]\n  simp only [← map_dickson (Int.castRingHom R), ← map_comp]\n  congr 1\n  apply map_injective (Int.castRingHom (exprℚ)) Int.cast_injective\n  simp only [map_dickson, map_comp, eq_intCast, Int.cast_one, dickson_one_one_eq_chebyshev_T, chebyshev.T_mul, two_mul,\n    ← add_comp]\n  simp only [← two_mul, ← comp_assoc]\n  apply eval₂_congr rfl rfl\n  rw [comp_assoc]\n  apply eval₂_congr rfl _ rfl\n  rw [mul_comp, C_comp, X_comp, ← mul_assoc, ← C_1, ← C_bit0, ← C_mul, invOf_mul_self, C_1, one_mul]\n#align dickson_one_one_mul dickson_one_one_mul\n\n",
 "dickson_one_one_eval_add_inv":
 "theorem dickson_one_one_eval_add_inv (x y : R) (h : x * y = 1) : ∀ n, (dickson 1 (1 : R) n).eval (x + y) = x ^ n + y ^ n\n  | 0 => by\n    simp only [bit0, eval_one, eval_add, pow_zero, dickson_zero]\n    norm_num\n  | 1 => by simp only [eval_X, dickson_one, pow_one]\n  | n + 2 =>\n    by\n    simp only [eval_sub, eval_mul, dickson_one_one_eval_add_inv, eval_X, dickson_add_two, C_1, eval_one]\n    conv_lhs => simp only [pow_succ, add_mul, mul_add, h, ← mul_assoc, mul_comm y x, one_mul]\n    ring\n#align dickson_one_one_eval_add_inv dickson_one_one_eval_add_inv\n\n",
 "dickson_one_one_eq_chebyshev_T":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\ntheorem dickson_one_one_eq_chebyshev_T [Invertible (2 : R)] :\n    ∀ n, dickson 1 (1 : R) n = 2 * (Chebyshev.T R n).comp (C ((«expr⅟») 2) * X)\n  | 0 => by\n    simp only [chebyshev.T_zero, mul_one, one_comp, dickson_zero]\n    norm_num\n  | 1 => by\n    rw [dickson_one, chebyshev.T_one, X_comp, ← mul_assoc, ← C_1, ← C_bit0, ← C_mul, mul_invOf_self, C_1, one_mul]\n  | n + 2 =>\n    by\n    simp only [dickson_add_two, chebyshev.T_add_two, dickson_one_one_eq_chebyshev_T (n + 1),\n      dickson_one_one_eq_chebyshev_T n, sub_comp, mul_comp, add_comp, X_comp, bit0_comp, one_comp]\n    simp only [← C_1, ← C_bit0, ← mul_assoc, ← C_mul, mul_invOf_self]\n    rw [C_1, one_mul]\n    ring\n#align dickson_one_one_eq_chebyshev_T dickson_one_one_eq_chebyshev_T\n\n",
 "dickson_one_one_comp_comm":
 "theorem dickson_one_one_comp_comm (m n : ℕ) :\n    (dickson 1 (1 : R) m).comp (dickson 1 1 n) = (dickson 1 1 n).comp (dickson 1 1 m) := by\n  rw [← dickson_one_one_mul, mul_comm, dickson_one_one_mul]\n#align dickson_one_one_comp_comm dickson_one_one_comp_comm\n\n",
 "dickson_one_one_char_p":
 "theorem dickson_one_one_char_p (p : ℕ) [Fact p.prime] [CharP R p] : dickson 1 (1 : R) p = X ^ p :=\n  by\n  have h : (1 : R) = ZMod.castHom (dvd_refl p) R 1\n  simp only [ZMod.castHom_apply, ZMod.cast_one']\n  rw [h, ← map_dickson (ZMod.castHom (dvd_refl p) R), dickson_one_one_zmod_p, Polynomial.map_pow, map_X]\n#align dickson_one_one_char_p dickson_one_one_char_p\n\n",
 "dickson_one":
 "@[simp]\ntheorem dickson_one : dickson k a 1 = X :=\n  rfl\n#align dickson_one dickson_one\n\n",
 "dickson_of_two_le":
 "theorem dickson_of_two_le {n : ℕ} (h : 2 ≤ n) : dickson k a n = X * dickson k a (n - 1) - C a * dickson k a (n - 2) :=\n  by\n  obtain ⟨n, rfl⟩ := Nat.exists_eq_add_of_le h\n  rw [add_comm]\n  exact dickson_add_two k a n\n#align dickson_of_two_le dickson_of_two_le\n\n",
 "dickson_add_two":
 "@[simp]\ntheorem dickson_add_two (n : ℕ) : dickson k a (n + 2) = X * dickson k a (n + 1) - C a * dickson k a n := by rw [dickson]\n#align dickson_add_two dickson_add_two\n\n",
 "chebyshev_T_eq_dickson_one_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\ntheorem chebyshev_T_eq_dickson_one_one [Invertible (2 : R)] (n : ℕ) :\n    Chebyshev.T R n = C ((«expr⅟») 2) * (dickson 1 1 n).comp (2 * X) :=\n  by\n  rw [dickson_one_one_eq_chebyshev_T]\n  simp only [comp_assoc, mul_comp, C_comp, X_comp, ← mul_assoc, ← C_1, ← C_bit0, ← C_mul]\n  rw [invOf_mul_self, C_1, one_mul, one_mul, comp_X]\n#align chebyshev_T_eq_dickson_one_one chebyshev_T_eq_dickson_one_one\n\n"}