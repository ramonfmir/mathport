{"of_injective":
 "/-\nCopyright (c) 2019 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Johan Commelin\n-/\ntheorem of_injective : function.injective (of : α → FreeRing α) :=\n  FreeAbelianGroup.of_injective.comp FreeMonoid.of_injective\n#align of_injective of_injective\n\n",
 "map_of":
 "@[simp]\ntheorem map_of (x : α) : map f (of x) = of (f x) :=\n  lift_of _ _\n#align map_of map_of\n\n",
 "lift_of":
 "@[simp]\ntheorem lift_of (x : α) : lift f (of x) = f x :=\n  congr_fun (lift.left_inv f) x\n#align lift_of lift_of\n\n",
 "lift_comp_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem lift_comp_of (f : «expr →+* » (FreeRing α) R) : lift (f ∘ of) = f :=\n  lift.right_inv f\n#align lift_comp_of lift_comp_of\n\n",
 "induction_on":
 "@[elab_as_elim]\nprotected theorem induction_on {C : FreeRing α → Prop} (z : FreeRing α) (hn1 : C (-1)) (hb : ∀ b, C (of b))\n    (ha : ∀ x y, C x → C y → C (x + y)) (hm : ∀ x y, C x → C y → C (x * y)) : C z :=\n  have hn : ∀ x, C x → C (-x) := fun x ih => neg_one_mul x ▸ hm _ _ hn1 ih\n  have h1 : C 1 := neg_neg (1 : FreeRing α) ▸ hn _ hn1\n  FreeAbelianGroup.induction_on z (add_left_neg (1 : FreeRing α) ▸ ha _ _ hn1 h1)\n    (fun m => list.rec_on m h1 fun a m ih => hm _ _ (hb a) ih) (fun m ih => hn _ ih) ha\n#align induction_on induction_on\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[ext]\ntheorem hom_ext ⦃f g : «expr →+* » (FreeRing α) R⦄ (h : ∀ x, f (of x) = g (of x)) : f = g :=\n  lift.symm.injective (funext h)\n#align hom_ext hom_ext\n\n"}