{"proj_recompose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\ntheorem graded_algebra.proj_recompose\n    (a : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (𝒜 i))\n    (i : ι) : graded_algebra.proj 𝒜 i ((decompose 𝒜).symm a) = (decompose 𝒜).symm (of _ i (a i)) := by\n  rw [graded_algebra.proj_apply, decompose_symm_of, Equiv.apply_symm_apply]\n#align graded_algebra.proj_recompose graded_algebra.proj_recompose\n\n",
 "proj_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n@[simp]\ntheorem graded_algebra.proj_apply (i : ι) (r : A) :\n    graded_algebra.proj 𝒜 i r =\n      (decompose 𝒜 r :\n          direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (𝒜 i))\n        i :=\n  rfl\n#align graded_algebra.proj_apply graded_algebra.proj_apply\n\n",
 "mem_support_iff":
 "theorem graded_algebra.mem_support_iff [DecidableEq A] (r : A) (i : ι) :\n    i ∈ (decompose 𝒜 r).support ↔ graded_algebra.proj 𝒜 i r ≠ 0 :=\n  Dfinsupp.mem_support_iff.trans Submodule.coe_eq_zero.not.symm\n#align graded_algebra.mem_support_iff graded_algebra.mem_support_iff\n\n",
 "decompose_symm_one":
 "@[simp]\ntheorem decompose_symm_one : (decompose 𝒜).symm 1 = (1 : A) :=\n  map_one (decompose_ring_equiv 𝒜).symm\n#align decompose_symm_one decompose_symm_one\n\n",
 "decompose_symm_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n@[simp]\ntheorem decompose_symm_mul\n    (x y : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (𝒜 i)) :\n    (decompose 𝒜).symm (x * y) = (decompose 𝒜).symm x * (decompose 𝒜).symm y :=\n  map_mul (decompose_ring_equiv 𝒜).symm x y\n#align decompose_symm_mul decompose_symm_mul\n\n",
 "decompose_one":
 "/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser, Kevin Buzzard, Jujian Zhang\n-/\n@[simp]\ntheorem decompose_one : decompose 𝒜 (1 : A) = 1 :=\n  map_one (decompose_ring_equiv 𝒜)\n#align decompose_one decompose_one\n\n",
 "decompose_mul_add_right":
 "theorem decompose_mul_add_right [AddRightCancelMonoid ι] [graded_ring 𝒜] {a : A} (b : 𝒜 j) :\n    decompose 𝒜 (a * ↑b) (i + j) = @graded_monoid.ghas_mul.mul ι (fun i => 𝒜 i) _ _ _ _ (decompose 𝒜 a i) b :=\n  Subtype.ext <| coe_decompose_mul_add_of_right_mem 𝒜 b.2\n#align decompose_mul_add_right decompose_mul_add_right\n\n",
 "decompose_mul_add_left":
 "theorem decompose_mul_add_left [AddLeftCancelMonoid ι] [graded_ring 𝒜] (a : 𝒜 i) {b : A} :\n    decompose 𝒜 (↑a * b) (i + j) = @graded_monoid.ghas_mul.mul ι (fun i => 𝒜 i) _ _ _ _ a (decompose 𝒜 b j) :=\n  Subtype.ext <| coe_decompose_mul_add_of_left_mem 𝒜 a.2\n#align decompose_mul_add_left decompose_mul_add_left\n\n",
 "decompose_mul":
 "@[simp]\ntheorem decompose_mul (x y : A) : decompose 𝒜 (x * y) = decompose 𝒜 x * decompose 𝒜 y :=\n  map_mul (decompose_ring_equiv 𝒜) x y\n#align decompose_mul decompose_mul\n\n",
 "coe_decompose_mul_of_right_mem_of_not_le":
 "theorem coe_decompose_mul_of_right_mem_of_not_le (b_mem : b ∈ 𝒜 i) (h : ¬i ≤ n) : (decompose 𝒜 (a * b) n : A) = 0 :=\n  by\n  lift b to 𝒜 i using b_mem\n  rwa [decompose_mul, decompose_coe, coe_mul_of_apply_of_not_le]\n#align coe_decompose_mul_of_right_mem_of_not_le coe_decompose_mul_of_right_mem_of_not_le\n\n",
 "coe_decompose_mul_of_right_mem_of_le":
 "theorem coe_decompose_mul_of_right_mem_of_le (b_mem : b ∈ 𝒜 i) (h : i ≤ n) :\n    (decompose 𝒜 (a * b) n : A) = decompose 𝒜 a (n - i) * b :=\n  by\n  lift b to 𝒜 i using b_mem\n  rwa [decompose_mul, decompose_coe, coe_mul_of_apply_of_le]\n#align coe_decompose_mul_of_right_mem_of_le coe_decompose_mul_of_right_mem_of_le\n\n",
 "coe_decompose_mul_of_right_mem":
 "theorem coe_decompose_mul_of_right_mem (n) [Decidable (i ≤ n)] (b_mem : b ∈ 𝒜 i) :\n    (decompose 𝒜 (a * b) n : A) = if i ≤ n then decompose 𝒜 a (n - i) * b else 0 :=\n  by\n  lift b to 𝒜 i using b_mem\n  rwa [decompose_mul, decompose_coe, coe_mul_of_apply]\n#align coe_decompose_mul_of_right_mem coe_decompose_mul_of_right_mem\n\n",
 "coe_decompose_mul_of_left_mem_of_not_le":
 "theorem coe_decompose_mul_of_left_mem_of_not_le (a_mem : a ∈ 𝒜 i) (h : ¬i ≤ n) : (decompose 𝒜 (a * b) n : A) = 0 :=\n  by\n  lift a to 𝒜 i using a_mem\n  rwa [decompose_mul, decompose_coe, coe_of_mul_apply_of_not_le]\n#align coe_decompose_mul_of_left_mem_of_not_le coe_decompose_mul_of_left_mem_of_not_le\n\n",
 "coe_decompose_mul_of_left_mem_of_le":
 "theorem coe_decompose_mul_of_left_mem_of_le (a_mem : a ∈ 𝒜 i) (h : i ≤ n) :\n    (decompose 𝒜 (a * b) n : A) = a * decompose 𝒜 b (n - i) :=\n  by\n  lift a to 𝒜 i using a_mem\n  rwa [decompose_mul, decompose_coe, coe_of_mul_apply_of_le]\n#align coe_decompose_mul_of_left_mem_of_le coe_decompose_mul_of_left_mem_of_le\n\n",
 "coe_decompose_mul_of_left_mem":
 "theorem coe_decompose_mul_of_left_mem (n) [Decidable (i ≤ n)] (a_mem : a ∈ 𝒜 i) :\n    (decompose 𝒜 (a * b) n : A) = if i ≤ n then a * decompose 𝒜 b (n - i) else 0 :=\n  by\n  lift a to 𝒜 i using a_mem\n  rwa [decompose_mul, decompose_coe, coe_of_mul_apply]\n#align coe_decompose_mul_of_left_mem coe_decompose_mul_of_left_mem\n\n",
 "coe_decompose_mul_add_of_right_mem":
 "theorem coe_decompose_mul_add_of_right_mem [AddRightCancelMonoid ι] [graded_ring 𝒜] {a b : A} (b_mem : b ∈ 𝒜 j) :\n    (decompose 𝒜 (a * b) (i + j) : A) = decompose 𝒜 a i * b :=\n  by\n  lift b to 𝒜 j using b_mem\n  rw [decompose_mul, decompose_coe, coe_mul_of_apply_add]\n#align coe_decompose_mul_add_of_right_mem coe_decompose_mul_add_of_right_mem\n\n",
 "coe_decompose_mul_add_of_left_mem":
 "theorem coe_decompose_mul_add_of_left_mem [AddLeftCancelMonoid ι] [graded_ring 𝒜] {a b : A} (a_mem : a ∈ 𝒜 i) :\n    (decompose 𝒜 (a * b) (i + j) : A) = a * decompose 𝒜 b j :=\n  by\n  lift a to 𝒜 i using a_mem\n  rw [decompose_mul, decompose_coe, coe_of_mul_apply_add]\n#align coe_decompose_mul_add_of_left_mem coe_decompose_mul_add_of_left_mem\n\n"}