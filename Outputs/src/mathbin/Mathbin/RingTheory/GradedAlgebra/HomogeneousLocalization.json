{"zero_val":
 "theorem zero_val : (0 : homogeneous_localization 𝒜 x).val = 0 :=\n  localization.mk_zero _\n#align zero_val zero_val\n\n",
 "zero_eq":
 "theorem zero_eq : (0 : homogeneous_localization 𝒜 x) = quotient.mk' 0 :=\n  rfl\n#align zero_eq zero_eq\n\n",
 "val_mk'":
 "@[simp]\ntheorem val_mk' (i : num_denom_same_deg 𝒜 x) : val (quotient.mk' i) = localization.mk i.num ⟨i.denom, i.denom_mem⟩ :=\n  rfl\n#align val_mk' val_mk'\n\n",
 "val_injective":
 "theorem val_injective : function.injective (@homogeneous_localization.val _ _ _ _ _ _ _ _ 𝒜 _ x) := fun a b =>\n  quotient.rec_on_subsingleton₂' a b fun a b h => quotient.sound' h\n#align val_injective val_injective\n\n",
 "sub_val":
 "@[simp]\ntheorem sub_val (y1 y2 : homogeneous_localization 𝒜 x) : (y1 - y2).val = y1.val - y2.val := by\n  rw [show y1 - y2 = y1 + -y2 from rfl, add_val, neg_val] <;> rfl\n#align sub_val sub_val\n\n",
 "smul_val":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_val (y : homogeneous_localization 𝒜 x) (n : α) : («expr • » n y).val = «expr • » n y.val :=\n  by\n  induction y using Quotient.inductionOn\n  unfold homogeneous_localization.val has_smul.smul\n  simp only [Quotient.liftOn₂'_mk, Quotient.liftOn'_mk]\n  change localization.mk _ _ = «expr • » n (localization.mk _ _)\n  dsimp only\n  rw [localization.smul_mk]\n  congr 1\n#align smul_val smul_val\n\n",
 "pow_val":
 "@[simp]\ntheorem pow_val (y : homogeneous_localization 𝒜 x) (n : ℕ) : (y ^ n).val = y.val ^ n :=\n  by\n  induction y using Quotient.inductionOn\n  unfold homogeneous_localization.val has_pow.pow\n  simp only [Quotient.liftOn₂'_mk, Quotient.liftOn'_mk]\n  change localization.mk _ _ = localization.mk _ _ ^ n\n  rw [localization.mk_pow]\n  dsimp only\n  congr 1\n#align pow_val pow_val\n\n",
 "one_val":
 "theorem one_val : (1 : homogeneous_localization 𝒜 x).val = 1 :=\n  localization.mk_one\n#align one_val one_val\n\n",
 "one_eq":
 "theorem one_eq : (1 : homogeneous_localization 𝒜 x) = quotient.mk' 1 :=\n  rfl\n#align one_eq one_eq\n\n",
 "num_zero":
 "@[simp]\ntheorem num_zero : (0 : num_denom_same_deg 𝒜 x).num = 0 :=\n  rfl\n#align num_zero num_zero\n\n",
 "num_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem num_smul (c : num_denom_same_deg 𝒜 x) (m : α) : ((«expr • » m c).num : A) = «expr • » m c.num :=\n  rfl\n#align num_smul num_smul\n\n",
 "num_pow":
 "@[simp]\ntheorem num_pow (c : num_denom_same_deg 𝒜 x) (n : ℕ) : ((c ^ n).num : A) = c.num ^ n :=\n  rfl\n#align num_pow num_pow\n\n",
 "num_one":
 "@[simp]\ntheorem num_one : ((1 : num_denom_same_deg 𝒜 x).num : A) = 1 :=\n  rfl\n#align num_one num_one\n\n",
 "num_neg":
 "@[simp]\ntheorem num_neg (c : num_denom_same_deg 𝒜 x) : ((-c).num : A) = -c.num :=\n  rfl\n#align num_neg num_neg\n\n",
 "num_mul":
 "@[simp]\ntheorem num_mul (c1 c2 : num_denom_same_deg 𝒜 x) : ((c1 * c2).num : A) = c1.num * c2.num :=\n  rfl\n#align num_mul num_mul\n\n",
 "num_mem_deg":
 "theorem num_mem_deg (f : homogeneous_localization 𝒜 x) : f.num ∈ 𝒜 f.deg :=\n  (quotient.out' f).num.2\n#align num_mem_deg num_mem_deg\n\n",
 "num_add":
 "@[simp]\ntheorem num_add (c1 c2 : num_denom_same_deg 𝒜 x) : ((c1 + c2).num : A) = c1.denom * c2.num + c2.denom * c1.num :=\n  rfl\n#align num_add num_add\n\n",
 "neg_val":
 "@[simp]\ntheorem neg_val (y : homogeneous_localization 𝒜 x) : (-y).val = -y.val :=\n  by\n  induction y using Quotient.inductionOn\n  unfold homogeneous_localization.val has_neg.neg\n  simp only [Quotient.liftOn₂'_mk, Quotient.liftOn'_mk]\n  change localization.mk _ _ = -localization.mk _ _\n  dsimp only\n  rw [localization.neg_mk]\n  rfl\n#align neg_val neg_val\n\n",
 "nat_cast_val":
 "@[simp]\ntheorem nat_cast_val (n : ℕ) : (n : homogeneous_localization 𝒜 x).val = n :=\n  show val (Nat.unaryCast n) = _ by induction n <;> simp [Nat.unaryCast, zero_val, one_val, *]\n#align nat_cast_val nat_cast_val\n\n",
 "mul_val":
 "@[simp]\ntheorem mul_val (y1 y2 : homogeneous_localization 𝒜 x) : (y1 * y2).val = y1.val * y2.val :=\n  by\n  induction y1 using Quotient.inductionOn\n  induction y2 using Quotient.inductionOn\n  unfold homogeneous_localization.val has_mul.mul\n  simp only [Quotient.liftOn₂'_mk, Quotient.liftOn'_mk]\n  change localization.mk _ _ = localization.mk _ _ * localization.mk _ _\n  dsimp only\n  rw [localization.mk_mul]\n  rfl\n#align mul_val mul_val\n\n",
 "is_unit_iff_is_unit_val":
 "theorem is_unit_iff_is_unit_val (f : homogeneous_localization.at_prime 𝒜 𝔭) : is_unit f.val ↔ is_unit f :=\n  ⟨fun h1 => by\n    rcases h1 with ⟨⟨a, b, eq0, eq1⟩, eq2 : a = f.val⟩\n    rw [eq2] at eq0 eq1\n    clear a eq2\n    induction' b using localization.induction_on with data\n    rcases data with ⟨a, ⟨b, hb⟩⟩\n    dsimp only at eq0 eq1\n    have b_f_denom_not_mem : b * f.denom ∈ 𝔭.prime_compl := fun r =>\n      or.elim (ideal.is_prime.mem_or_mem infer_instance r) (fun r2 => hb r2) fun r2 => f.denom_mem r2\n    rw [f.eq_num_div_denom, localization.mk_mul,\n      show (⟨b, hb⟩ : 𝔭.prime_compl) * ⟨f.denom, _⟩ = ⟨b * f.denom, _⟩ from rfl,\n      show (1 : localization.at_prime 𝔭) = localization.mk 1 1 by erw [localization.mk_self 1], localization.mk_eq_mk',\n      is_localization.eq] at eq1\n    rcases eq1 with ⟨⟨c, hc⟩, eq1⟩\n    simp only [← subtype.val_eq_coe] at eq1\n    change a * f.num * 1 * c = _ at eq1\n    simp only [one_mul, mul_one] at eq1\n    have mem1 : a * f.num * c ∈ 𝔭.prime_compl :=\n      eq1.symm ▸ fun r => or.elim (ideal.is_prime.mem_or_mem infer_instance r) (by tauto) (by tauto)\n    have mem2 : f.num ∉ 𝔭 := by\n      contrapose! mem1\n      erw [not_not]\n      exact ideal.mul_mem_right _ _ (ideal.mul_mem_left _ _ mem1)\n    refine' ⟨⟨f, quotient.mk' ⟨f.deg, ⟨f.denom, f.denom_mem_deg⟩, ⟨f.num, f.num_mem_deg⟩, mem2⟩, _, _⟩, rfl⟩ <;>\n          simp only [ext_iff_val, mul_val, val_mk', ← subtype.val_eq_coe, f.eq_num_div_denom, localization.mk_mul,\n            one_val] <;>\n        convert localization.mk_self _ <;>\n      simpa only [mul_comm] ,\n    fun ⟨⟨_, b, eq1, eq2⟩, rfl⟩ =>\n    by\n    simp only [ext_iff_val, mul_val, one_val] at eq1 eq2\n    exact ⟨⟨f.val, b.val, eq1, eq2⟩, rfl⟩⟩\n#align is_unit_iff_is_unit_val is_unit_iff_is_unit_val\n\n",
 "int_cast_val":
 "@[simp]\ntheorem int_cast_val (n : ℤ) : (n : homogeneous_localization 𝒜 x).val = n :=\n  show val (Int.castDef n) = _ by cases n <;> simp [Int.castDef, zero_val, one_val, *]\n#align int_cast_val int_cast_val\n\n",
 "ext_iff_val":
 "theorem ext_iff_val (f g : homogeneous_localization 𝒜 x) : f = g ↔ f.val = g.val :=\n  { mp := fun h => h ▸ rfl\n    mpr := fun h => by\n      induction f using Quotient.inductionOn\n      induction g using Quotient.inductionOn\n      rw [quotient.eq]\n      unfold homogeneous_localization.val at h\n      simpa only [Quotient.liftOn'_mk] using h }\n#align ext_iff_val ext_iff_val\n\n",
 "ext":
 "/-\nCopyright (c) 2022 Jujian Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jujian Zhang, Eric Wieser\n-/\n@[ext]\ntheorem ext {c1 c2 : num_denom_same_deg 𝒜 x} (hdeg : c1.deg = c2.deg) (hnum : (c1.num : A) = c2.num)\n    (hdenom : (c1.denom : A) = c2.denom) : c1 = c2 :=\n  by\n  rcases c1 with ⟨i1, ⟨n1, hn1⟩, ⟨d1, hd1⟩, h1⟩\n  rcases c2 with ⟨i2, ⟨n2, hn2⟩, ⟨d2, hd2⟩, h2⟩\n  dsimp only [subtype.coe_mk] at *\n  simp only; exact ⟨hdeg, by subst hdeg <;> subst hnum, by subst hdeg <;> subst hdenom⟩\n#align ext ext\n\n",
 "eq_num_div_denom":
 "theorem eq_num_div_denom (f : homogeneous_localization 𝒜 x) : f.val = localization.mk f.num ⟨f.denom, f.denom_mem⟩ :=\n  by\n  have := quotient.out_eq' f\n  apply_fun homogeneous_localization.val  at this\n  rw [← this]\n  unfold homogeneous_localization.val\n  simp only [quotient.lift_on'_mk']\n  rfl\n#align eq_num_div_denom eq_num_div_denom\n\n",
 "denom_zero":
 "@[simp]\ntheorem denom_zero : ((0 : num_denom_same_deg 𝒜 x).denom : A) = 1 :=\n  rfl\n#align denom_zero denom_zero\n\n",
 "denom_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem denom_smul (c : num_denom_same_deg 𝒜 x) (m : α) : ((«expr • » m c).denom : A) = c.denom :=\n  rfl\n#align denom_smul denom_smul\n\n",
 "denom_pow":
 "@[simp]\ntheorem denom_pow (c : num_denom_same_deg 𝒜 x) (n : ℕ) : ((c ^ n).denom : A) = c.denom ^ n :=\n  rfl\n#align denom_pow denom_pow\n\n",
 "denom_one":
 "@[simp]\ntheorem denom_one : ((1 : num_denom_same_deg 𝒜 x).denom : A) = 1 :=\n  rfl\n#align denom_one denom_one\n\n",
 "denom_neg":
 "@[simp]\ntheorem denom_neg (c : num_denom_same_deg 𝒜 x) : ((-c).denom : A) = c.denom :=\n  rfl\n#align denom_neg denom_neg\n\n",
 "denom_mul":
 "@[simp]\ntheorem denom_mul (c1 c2 : num_denom_same_deg 𝒜 x) : ((c1 * c2).denom : A) = c1.denom * c2.denom :=\n  rfl\n#align denom_mul denom_mul\n\n",
 "denom_mem_deg":
 "theorem denom_mem_deg (f : homogeneous_localization 𝒜 x) : f.denom ∈ 𝒜 f.deg :=\n  (quotient.out' f).denom.2\n#align denom_mem_deg denom_mem_deg\n\n",
 "denom_mem":
 "theorem denom_mem (f : homogeneous_localization 𝒜 x) : f.denom ∈ x :=\n  (quotient.out' f).denom_mem\n#align denom_mem denom_mem\n\n",
 "denom_add":
 "@[simp]\ntheorem denom_add (c1 c2 : num_denom_same_deg 𝒜 x) : ((c1 + c2).denom : A) = c1.denom * c2.denom :=\n  rfl\n#align denom_add denom_add\n\n",
 "deg_zero":
 "@[simp]\ntheorem deg_zero : (0 : num_denom_same_deg 𝒜 x).deg = 0 :=\n  rfl\n#align deg_zero deg_zero\n\n",
 "deg_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem deg_smul (c : num_denom_same_deg 𝒜 x) (m : α) : («expr • » m c).deg = c.deg :=\n  rfl\n#align deg_smul deg_smul\n\n",
 "deg_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem deg_pow (c : num_denom_same_deg 𝒜 x) (n : ℕ) : (c ^ n).deg = «expr • » n c.deg :=\n  rfl\n#align deg_pow deg_pow\n\n",
 "deg_one":
 "@[simp]\ntheorem deg_one : (1 : num_denom_same_deg 𝒜 x).deg = 0 :=\n  rfl\n#align deg_one deg_one\n\n",
 "deg_neg":
 "@[simp]\ntheorem deg_neg (c : num_denom_same_deg 𝒜 x) : (-c).deg = c.deg :=\n  rfl\n#align deg_neg deg_neg\n\n",
 "deg_mul":
 "@[simp]\ntheorem deg_mul (c1 c2 : num_denom_same_deg 𝒜 x) : (c1 * c2).deg = c1.deg + c2.deg :=\n  rfl\n#align deg_mul deg_mul\n\n",
 "deg_add":
 "@[simp]\ntheorem deg_add (c1 c2 : num_denom_same_deg 𝒜 x) : (c1 + c2).deg = c1.deg + c2.deg :=\n  rfl\n#align deg_add deg_add\n\n",
 "add_val":
 "@[simp]\ntheorem add_val (y1 y2 : homogeneous_localization 𝒜 x) : (y1 + y2).val = y1.val + y2.val :=\n  by\n  induction y1 using Quotient.inductionOn\n  induction y2 using Quotient.inductionOn\n  unfold homogeneous_localization.val has_add.add\n  simp only [Quotient.liftOn₂'_mk, Quotient.liftOn'_mk]\n  change localization.mk _ _ = localization.mk _ _ + localization.mk _ _\n  dsimp only\n  rw [localization.add_mk]\n  rfl\n#align add_val add_val\n\n"}