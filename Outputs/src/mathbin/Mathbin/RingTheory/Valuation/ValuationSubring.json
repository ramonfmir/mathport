{"zero_mem":
 "theorem zero_mem : (0 : K) ∈ A :=\n  A.to_subring.zero_mem\n#align zero_mem zero_mem\n\n",
 "valuation_unit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem valuation_unit (a : «expr ˣ» A) : A.valuation a = 1 :=\n  by\n  rw [← A.valuation.map_one, valuation_eq_iff]\n  use a\n  simp\n#align valuation_unit valuation_unit\n\n",
 "valuation_surjective":
 "theorem valuation_surjective : function.surjective A.valuation :=\n  surjective_quot_mk _\n#align valuation_surjective valuation_surjective\n\n",
 "valuation_subring_valuation":
 "@[simp]\ntheorem valuation_subring_valuation : A.valuation.valuation_subring = A :=\n  by\n  ext\n  rw [← A.valuation_le_one_iff]\n  rfl\n#align valuation_subring_valuation valuation_subring_valuation\n\n",
 "valuation_lt_one_or_eq_one":
 "theorem valuation_lt_one_or_eq_one (a : A) : A.valuation a < 1 ∨ A.valuation a = 1 :=\n  lt_or_eq_of_le (A.valuation_le_one a)\n#align valuation_lt_one_or_eq_one valuation_lt_one_or_eq_one\n\n",
 "valuation_lt_one_iff":
 "theorem valuation_lt_one_iff (a : A) : a ∈ local_ring.maximal_ideal A ↔ A.valuation a < 1 :=\n  by\n  rw [local_ring.mem_maximal_ideal]\n  dsimp [nonunits]; rw [valuation_eq_one_iff]\n  exact (A.valuation_le_one a).lt_iff_ne.symm\n#align valuation_lt_one_iff valuation_lt_one_iff\n\n",
 "valuation_le_one_iff":
 "theorem valuation_le_one_iff (x : K) : A.valuation x ≤ 1 ↔ x ∈ A :=\n  ⟨mem_of_valuation_le_one _ _, fun ha => A.valuation_le_one ⟨x, ha⟩⟩\n#align valuation_le_one_iff valuation_le_one_iff\n\n",
 "valuation_le_one":
 "theorem valuation_le_one (a : A) : A.valuation a ≤ 1 :=\n  (valuation_ring.mem_integer_iff A K _).2 ⟨a, rfl⟩\n#align valuation_le_one valuation_le_one\n\n",
 "valuation_le_iff":
 "theorem valuation_le_iff (x y : K) : A.valuation x ≤ A.valuation y ↔ ∃ a : A, (a : K) * y = x :=\n  iff.rfl\n#align valuation_le_iff valuation_le_iff\n\n",
 "valuation_eq_one_iff":
 "theorem valuation_eq_one_iff (a : A) : is_unit a ↔ A.valuation a = 1 :=\n  ⟨fun h => A.valuation_unit h.unit, fun h =>\n    by\n    have ha : (a : K) ≠ 0 := by\n      intro c\n      rw [c, A.valuation.map_zero] at h\n      exact zero_ne_one h\n    have ha' : (a : K)⁻¹ ∈ A := by rw [← valuation_le_one_iff, map_inv₀, h, inv_one]\n    apply isUnit_of_mul_eq_one a ⟨a⁻¹, ha'⟩\n    ext\n    field_simp⟩\n#align valuation_eq_one_iff valuation_eq_one_iff\n\n",
 "valuation_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem valuation_eq_iff (x y : K) : A.valuation x = A.valuation y ↔ ∃ a : «expr ˣ» A, (a : K) * y = x :=\n  quotient.eq'\n#align valuation_eq_iff valuation_eq_iff\n\n",
 "units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk_apply":
 "@[simp]\ntheorem units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk_apply (x : A.unit_group) :\n    A.units_mod_principal_units_equiv_residue_field_units.to_monoid_hom (quotient_group.mk x) =\n      A.unit_group_to_residue_field_units x :=\n  rfl\n#align\n  units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk_apply units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk_apply\n\n",
 "units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk":
 "@[simp]\ntheorem units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk :\n    A.units_mod_principal_units_equiv_residue_field_units.to_monoid_hom.comp (quotient_group.mk' _) =\n      A.unit_group_to_residue_field_units :=\n  rfl\n#align\n  units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk units_mod_principal_units_equiv_residue_field_units_comp_quotient_group_mk\n\n",
 "unit_group_strict_mono":
 "theorem unit_group_strict_mono : strict_mono (unit_group : valuation_subring K → subgroup _) :=\n  unit_group_order_embedding.strict_mono\n#align unit_group_strict_mono unit_group_strict_mono\n\n",
 "unit_group_le_unit_group":
 "theorem unit_group_le_unit_group {A B : valuation_subring K} : A.unit_group ≤ B.unit_group ↔ A ≤ B :=\n  by\n  constructor\n  · intro h x hx\n    rw [← A.valuation_le_one_iff x, le_iff_lt_or_eq] at hx\n    by_cases h_1 : x = 0\n    · simp only [h_1, zero_mem]\n    by_cases h_2 : 1 + x = 0\n    · simp only [← add_eq_zero_iff_neg_eq.1 h_2, neg_mem _ _ (one_mem _)]\n    cases hx\n    · have := h (show Units.mk0 _ h_2 ∈ A.unit_group from A.valuation.map_one_add_of_lt hx)\n      simpa using\n        B.add_mem _ _ (show 1 + x ∈ B from SetLike.coe_mem (B.unit_group_mul_equiv ⟨_, this⟩ : B))\n          (B.neg_mem _ B.one_mem)\n    · have := h (show Units.mk0 x h_1 ∈ A.unit_group from hx)\n      refine' SetLike.coe_mem (B.unit_group_mul_equiv ⟨_, this⟩ : B)\n  · rintro h x (hx : A.valuation x = 1)\n    apply_fun A.map_of_le B h  at hx\n    simpa using hx\n#align unit_group_le_unit_group unit_group_le_unit_group\n\n",
 "unit_group_injective":
 "theorem unit_group_injective : function.injective (unit_group : valuation_subring K → subgroup _) := fun A B h => by\n  simpa only [le_antisymm_iff, unit_group_le_unit_group] using h\n#align unit_group_injective unit_group_injective\n\n",
 "to_subring_injective":
 "theorem to_subring_injective : function.injective (to_subring : valuation_subring K → subring K) := fun x y h =>\n  by\n  cases x\n  cases y\n  congr\n#align to_subring_injective to_subring_injective\n\n",
 "surjective_unit_group_to_residue_field_units":
 "theorem surjective_unit_group_to_residue_field_units : function.surjective A.unit_group_to_residue_field_units :=\n  (local_ring.surjective_units_map_of_local_ring_hom _ ideal.quotient.mk_surjective\n        local_ring.is_local_ring_hom_residue).comp\n    (MulEquiv.surjective _)\n#align surjective_unit_group_to_residue_field_units surjective_unit_group_to_residue_field_units\n\n",
 "subset_pointwise_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem subset_pointwise_smul_iff {g : G} {S T : valuation_subring K} : S ≤ «expr • » g T ↔ «expr • » g⁻¹ S ≤ T :=\n  Set.subset_set_smul_iff\n#align subset_pointwise_smul_iff subset_pointwise_smul_iff\n\n",
 "smul_mem_pointwise_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_mem_pointwise_smul_iff {g : G} {S : valuation_subring K} {x : K} : «expr • » g x ∈ «expr • » g S ↔ x ∈ S :=\n  Set.smul_mem_smul_set_iff\n#align smul_mem_pointwise_smul_iff smul_mem_pointwise_smul_iff\n\n",
 "smul_mem_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_mem_pointwise_smul (g : G) (x : K) (S : valuation_subring K) : x ∈ S → «expr • » g x ∈ «expr • » g S :=\n  (Set.smul_mem_smul_set : _ → _ ∈ «expr • » g (S : set K))\n#align smul_mem_pointwise_smul smul_mem_pointwise_smul\n\n",
 "principal_units_le_units":
 "theorem principal_units_le_units : A.principal_unit_group ≤ A.unit_group := fun a h => by\n  simpa only [add_sub_cancel'_right] using A.valuation.map_one_add_of_lt h\n#align principal_units_le_units principal_units_le_units\n\n",
 "principal_unit_group_symm_apply":
 "@[simp]\ntheorem principal_unit_group_symm_apply (a : (Units.map (local_ring.residue A).to_monoid_hom).ker) :\n    (A.principal_unit_group_equiv.symm a : K) = a :=\n  rfl\n#align principal_unit_group_symm_apply principal_unit_group_symm_apply\n\n",
 "principal_unit_group_le_principal_unit_group":
 "theorem principal_unit_group_le_principal_unit_group {A B : valuation_subring K} :\n    B.principal_unit_group ≤ A.principal_unit_group ↔ A ≤ B :=\n  by\n  constructor\n  · intro h x hx\n    by_cases h_1 : x = 0\n    · simp only [h_1, zero_mem]\n    by_cases h_2 : x⁻¹ + 1 = 0\n    · rw [add_eq_zero_iff_eq_neg, inv_eq_iff_inv_eq, inv_neg, inv_one] at h_2\n      simpa only [h_2] using B.neg_mem _ B.one_mem\n    · rw [← valuation_le_one_iff, ← not_lt, valuation.one_lt_val_iff _ h_1, ← add_sub_cancel x⁻¹, ← Units.val_mk0 h_2, ←\n        mem_principal_unit_group_iff] at hx⊢\n      simpa only [hx] using @h (Units.mk0 (x⁻¹ + 1) h_2)\n  · intro h x hx\n    by_contra h_1\n    exact not_lt.2 (monotone_map_of_le _ _ h (not_lt.1 h_1)) hx\n#align principal_unit_group_le_principal_unit_group principal_unit_group_le_principal_unit_group\n\n",
 "principal_unit_group_injective":
 "theorem principal_unit_group_injective : function.injective (principal_unit_group : valuation_subring K → subgroup _) :=\n  fun A B h => by simpa [le_antisymm_iff, principal_unit_group_le_principal_unit_group] using h.symm\n#align principal_unit_group_injective principal_unit_group_injective\n\n",
 "principal_unit_group_equiv_apply":
 "@[simp]\ntheorem principal_unit_group_equiv_apply (a : A.principal_unit_group) : (principal_unit_group_equiv A a : K) = a :=\n  rfl\n#align principal_unit_group_equiv_apply principal_unit_group_equiv_apply\n\n",
 "pointwise_smul_to_subring":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_to_subring (g : G) (S : valuation_subring K) :\n    («expr • » g S).to_subring = «expr • » g S.to_subring :=\n  rfl\n#align pointwise_smul_to_subring pointwise_smul_to_subring\n\n",
 "pointwise_smul_subset_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem pointwise_smul_subset_iff {g : G} {S T : valuation_subring K} : «expr • » g S ≤ T ↔ S ≤ «expr • » g⁻¹ T :=\n  Set.set_smul_subset_iff\n#align pointwise_smul_subset_iff pointwise_smul_subset_iff\n\n",
 "pointwise_smul_le_pointwise_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_le_pointwise_smul_iff {g : G} {S T : valuation_subring K} :\n    «expr • » g S ≤ «expr • » g T ↔ S ≤ T :=\n  Set.set_smul_subset_set_smul_iff\n#align pointwise_smul_le_pointwise_smul_iff pointwise_smul_le_pointwise_smul_iff\n\n",
 "one_mem":
 "theorem one_mem : (1 : K) ∈ A :=\n  A.to_subring.one_mem\n#align one_mem one_mem\n\n",
 "of_prime_valuation_eq_one_iff_mem_prime_compl":
 "theorem of_prime_valuation_eq_one_iff_mem_prime_compl (A : valuation_subring K) (P : ideal A) [P.is_prime] (x : A) :\n    (of_prime A P).valuation x = 1 ↔ x ∈ P.prime_compl := by\n  rw [← is_localization.at_prime.is_unit_to_map_iff (A.of_prime P) P x, valuation_eq_one_iff]; rfl\n#align of_prime_valuation_eq_one_iff_mem_prime_compl of_prime_valuation_eq_one_iff_mem_prime_compl\n\n",
 "of_prime_le_of_le":
 "theorem of_prime_le_of_le (P Q : ideal A) [P.is_prime] [Q.is_prime] (h : P ≤ Q) : of_prime A Q ≤ of_prime A P :=\n  fun x ⟨a, s, hs, he⟩ => ⟨a, s, fun c => hs (h c), he⟩\n#align of_prime_le_of_le of_prime_le_of_le\n\n",
 "of_prime_ideal_of_le":
 "@[simp]\ntheorem of_prime_ideal_of_le (R S : valuation_subring K) (h : R ≤ S) : of_prime R (ideal_of_le R S h) = S :=\n  by\n  ext x; constructor\n  · rintro ⟨a, r, hr, rfl⟩\n    apply mul_mem\n    · exact h a.2\n    · rw [← valuation_le_one_iff, map_inv₀, ← inv_one, inv_le_inv₀]\n      · exact not_lt.1 ((not_iff_not.2 <| valuation_lt_one_iff S _).1 hr)\n      · intro hh\n        erw [valuation.zero_iff, subring.coe_eq_zero_iff] at hh\n        apply hr\n        rw [hh]\n        apply ideal.zero_mem (R.ideal_of_le S h)\n      · exact one_ne_zero\n  · intro hx\n    by_cases hr : x ∈ R\n    · exact R.le_of_prime _ hr\n    have : x ≠ 0 := fun h =>\n      hr\n        (by\n          rw [h]\n          exact R.zero_mem)\n    replace hr := (R.mem_or_inv_mem x).resolve_left hr\n    · use 1, x⁻¹, hr\n      constructor\n      · change (⟨x⁻¹, h hr⟩ : S) ∉ nonunits S\n        erw [mem_nonunits_iff, not_not]\n        apply isUnit_of_mul_eq_one _ (⟨x, hx⟩ : S)\n        ext\n        field_simp\n      · field_simp\n#align of_prime_ideal_of_le of_prime_ideal_of_le\n\n",
 "nonunits_subset":
 "theorem nonunits_subset : (A.nonunits : set K) ⊆ A :=\n  nonunits_le\n#align nonunits_subset nonunits_subset\n\n",
 "nonunits_le_nonunits":
 "theorem nonunits_le_nonunits {A B : valuation_subring K} : B.nonunits ≤ A.nonunits ↔ A ≤ B :=\n  by\n  constructor\n  · intro h x hx\n    by_cases h_1 : x = 0\n    · simp only [h_1, zero_mem]\n    rw [← valuation_le_one_iff, ← not_lt, valuation.one_lt_val_iff _ h_1] at hx⊢\n    by_contra h_2\n    exact hx (h h_2)\n  · intro h x hx\n    by_contra h_1\n    exact not_lt.2 (monotone_map_of_le _ _ h (not_lt.1 h_1)) hx\n#align nonunits_le_nonunits nonunits_le_nonunits\n\n",
 "nonunits_le":
 "theorem nonunits_le : A.nonunits ≤ A.to_subring.to_submonoid.to_subsemigroup := fun a ha =>\n  (A.valuation_le_one_iff _).mp (A.mem_nonunits_iff.mp ha).le\n#align nonunits_le nonunits_le\n\n",
 "nonunits_injective":
 "theorem nonunits_injective : function.injective (nonunits : valuation_subring K → Subsemigroup _) := fun A B h => by\n  simpa only [le_antisymm_iff, nonunits_le_nonunits] using h.symm\n#align nonunits_injective nonunits_injective\n\n",
 "nonunits_inj":
 "theorem nonunits_inj {A B : valuation_subring K} : A.nonunits = B.nonunits ↔ A = B :=\n  nonunits_injective.eq_iff\n#align nonunits_inj nonunits_inj\n\n",
 "neg_mem":
 "theorem neg_mem (x : K) : x ∈ A → -x ∈ A :=\n  A.to_subring.neg_mem\n#align neg_mem neg_mem\n\n",
 "mul_mem":
 "theorem mul_mem (x y : K) : x ∈ A → y ∈ A → x * y ∈ A :=\n  A.to_subring.mul_mem\n#align mul_mem mul_mem\n\n",
 "monotone_map_of_le":
 "@[mono]\ntheorem monotone_map_of_le (R S : valuation_subring K) (h : R ≤ S) : monotone (R.map_of_le S h) :=\n  by\n  rintro ⟨⟩ ⟨⟩ ⟨a, ha⟩\n  exact ⟨R.inclusion S h a, ha⟩\n#align monotone_map_of_le monotone_map_of_le\n\n",
 "mem_valuation_subring_iff":
 "@[simp]\ntheorem mem_valuation_subring_iff (x : K) : x ∈ v.valuation_subring ↔ v x ≤ 1 :=\n  iff.refl _\n#align mem_valuation_subring_iff mem_valuation_subring_iff\n\n",
 "mem_unit_group_iff":
 "@[simp]\ntheorem mem_unit_group_iff : x ∈ v.valuation_subring.unit_group ↔ v x = 1 :=\n  (valuation.is_equiv_iff_val_eq_one _ _).mp (valuation.is_equiv_valuation_valuation_subring _).symm\n#align mem_unit_group_iff mem_unit_group_iff\n\n",
 "mem_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem mem_top (x : K) : x ∈ («expr⊤» : valuation_subring K) :=\n  trivial\n#align mem_top mem_top\n\n",
 "mem_to_subring":
 "@[simp]\ntheorem mem_to_subring (x : K) : x ∈ A.to_subring ↔ x ∈ A :=\n  iff.refl _\n#align mem_to_subring mem_to_subring\n\n",
 "mem_smul_pointwise_iff_exists":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mem_smul_pointwise_iff_exists (g : G) (x : K) (S : valuation_subring K) :\n    x ∈ «expr • » g S ↔ ∃ s : K, s ∈ S ∧ «expr • » g s = x :=\n  (Set.mem_smul_set : x ∈ «expr • » g (S : set K) ↔ _)\n#align mem_smul_pointwise_iff_exists mem_smul_pointwise_iff_exists\n\n",
 "mem_principal_unit_group_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem mem_principal_unit_group_iff (x : «expr ˣ» K) : x ∈ A.principal_unit_group ↔ A.valuation ((x : K) - 1) < 1 :=\n  iff.rfl\n#align mem_principal_unit_group_iff mem_principal_unit_group_iff\n\n",
 "mem_pointwise_smul_iff_inv_smul_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mem_pointwise_smul_iff_inv_smul_mem {g : G} {S : valuation_subring K} {x : K} :\n    x ∈ «expr • » g S ↔ «expr • » g⁻¹ x ∈ S :=\n  Set.mem_smul_set_iff_inv_smul_mem\n#align mem_pointwise_smul_iff_inv_smul_mem mem_pointwise_smul_iff_inv_smul_mem\n\n",
 "mem_or_inv_mem":
 "theorem mem_or_inv_mem (x : K) : x ∈ A ∨ x⁻¹ ∈ A :=\n  A.mem_or_inv_mem' _\n#align mem_or_inv_mem mem_or_inv_mem\n\n",
 "mem_of_valuation_le_one":
 "theorem mem_of_valuation_le_one (x : K) (h : A.valuation x ≤ 1) : x ∈ A :=\n  let ⟨a, ha⟩ := (valuation_ring.mem_integer_iff A K x).1 h\n  ha ▸ a.2\n#align mem_of_valuation_le_one mem_of_valuation_le_one\n\n",
 "mem_of_subring":
 "@[simp]\ntheorem mem_of_subring (R : subring K) (hR : ∀ x : K, x ∈ R ∨ x⁻¹ ∈ R) (x : K) : x ∈ of_subring R hR ↔ x ∈ R :=\n  iff.refl _\n#align mem_of_subring mem_of_subring\n\n",
 "mem_nonunits_iff_exists_mem_maximal_ideal":
 "/-- The elements of `A.nonunits` are those of the maximal ideal of `A`.\n\nSee also `coe_mem_nonunits_iff`, which has a simpler right hand side but requires the element\nto be in `A` already.\n -/\ntheorem mem_nonunits_iff_exists_mem_maximal_ideal {a : K} :\n    a ∈ A.nonunits ↔ ∃ ha, (⟨a, ha⟩ : A) ∈ local_ring.maximal_ideal A :=\n  ⟨fun h => ⟨nonunits_subset h, coe_mem_nonunits_iff.mp h⟩, fun ⟨ha, h⟩ => coe_mem_nonunits_iff.mpr h⟩\n#align mem_nonunits_iff_exists_mem_maximal_ideal mem_nonunits_iff_exists_mem_maximal_ideal\n\n",
 "mem_nonunits_iff":
 "theorem mem_nonunits_iff {x : K} : x ∈ A.nonunits ↔ A.valuation x < 1 :=\n  iff.rfl\n#align mem_nonunits_iff mem_nonunits_iff\n\n",
 "mem_inv_pointwise_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mem_inv_pointwise_smul_iff {g : G} {S : valuation_subring K} {x : K} :\n    x ∈ «expr • » g⁻¹ S ↔ «expr • » g x ∈ S :=\n  Set.mem_inv_smul_set_iff\n#align mem_inv_pointwise_smul_iff mem_inv_pointwise_smul_iff\n\n",
 "mem_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem mem_comap {A : valuation_subring L} {f : «expr →+* » K L} {x : K} : x ∈ A.comap f ↔ f x ∈ A :=\n  iff.rfl\n#align mem_comap mem_comap\n\n",
 "mem_carrier":
 "/-\nCopyright (c) 2022 Adam Topaz. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Adam Topaz, Junyan Xu, Jack McKoen\n-/\n@[simp]\ntheorem mem_carrier (x : K) : x ∈ A.carrier ↔ x ∈ A :=\n  iff.refl _\n#align mem_carrier mem_carrier\n\n",
 "map_of_le_valuation_apply":
 "@[simp]\ntheorem map_of_le_valuation_apply (R S : valuation_subring K) (h : R ≤ S) (x : K) :\n    R.map_of_le S h (R.valuation x) = S.valuation x :=\n  rfl\n#align map_of_le_valuation_apply map_of_le_valuation_apply\n\n",
 "map_of_le_comp_valuation":
 "@[simp]\ntheorem map_of_le_comp_valuation (R S : valuation_subring K) (h : R ≤ S) :\n    R.map_of_le S h ∘ R.valuation = S.valuation := by\n  ext\n  rfl\n#align map_of_le_comp_valuation map_of_le_comp_valuation\n\n",
 "le_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print le_top /-\ntheorem le_top : A ≤ «expr⊤» := fun a ha => mem_top _\n#align le_top le_top\n-/\n\n",
 "le_of_prime":
 "theorem le_of_prime (A : valuation_subring K) (P : ideal A) [P.is_prime] : A ≤ of_prime A P := fun a ha =>\n  subalgebra.algebra_map_mem _ (⟨a, ha⟩ : A)\n#align le_of_prime le_of_prime\n\n",
 "ker_unit_group_to_residue_field_units":
 "theorem ker_unit_group_to_residue_field_units :\n    A.unit_group_to_residue_field_units.ker = A.principal_unit_group.comap A.unit_group.subtype :=\n  by\n  ext\n  simpa only [subgroup.mem_comap, subgroup.coe_subtype, coe_mem_principal_unit_group_iff]\n#align ker_unit_group_to_residue_field_units ker_unit_group_to_residue_field_units\n\n",
 "is_equiv_valuation_valuation_subring":
 "theorem is_equiv_valuation_valuation_subring : v.is_equiv v.valuation_subring.valuation :=\n  by\n  rw [is_equiv_iff_val_le_one]\n  intro x\n  rw [valuation_subring.valuation_le_one_iff]\n  rfl\n#align is_equiv_valuation_valuation_subring is_equiv_valuation_valuation_subring\n\n",
 "is_equiv_iff_valuation_subring":
 "theorem is_equiv_iff_valuation_subring : v₁.is_equiv v₂ ↔ v₁.valuation_subring = v₂.valuation_subring :=\n  by\n  constructor\n  · intro h\n    ext x\n    specialize h x 1\n    simpa using h\n  · intro h\n    apply is_equiv_of_val_le_one\n    intro x\n    have : x ∈ v₁.valuation_subring ↔ x ∈ v₂.valuation_subring := by rw [h]\n    simpa using this\n#align is_equiv_iff_valuation_subring is_equiv_iff_valuation_subring\n\n",
 "image_maximal_ideal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- `A.nonunits` agrees with the maximal ideal of `A`, after taking its image in `K`. -/\ntheorem image_maximal_ideal : «expr '' » (coe : A → K) (local_ring.maximal_ideal A) = A.nonunits :=\n  by\n  ext a\n  simp only [Set.mem_image, SetLike.mem_coe, mem_nonunits_iff_exists_mem_maximal_ideal]\n  erw [subtype.exists]\n  simp_rw [subtype.coe_mk, exists_and_right, exists_eq_right]\n#align image_maximal_ideal image_maximal_ideal\n\n",
 "ideal_of_le_of_prime":
 "@[simp]\ntheorem ideal_of_le_of_prime (A : valuation_subring K) (P : ideal A) [P.is_prime] :\n    ideal_of_le A (of_prime A P) (le_of_prime A P) = P := by\n  ext\n  apply is_localization.at_prime.to_map_mem_maximal_iff\n#align ideal_of_le_of_prime ideal_of_le_of_prime\n\n",
 "ideal_of_le_le_of_le":
 "theorem ideal_of_le_le_of_le (R S : valuation_subring K) (hR : A ≤ R) (hS : A ≤ S) (h : R ≤ S) :\n    ideal_of_le A S hS ≤ ideal_of_le A R hR := fun x hx =>\n  (valuation_lt_one_iff R _).2\n    (by\n      by_contra c; push_neg  at c; replace c := monotone_map_of_le R S h c\n      rw [(map_of_le _ _ _).map_one, map_of_le_valuation_apply] at c\n      apply not_le_of_lt ((valuation_lt_one_iff S _).1 hx) c)\n#align ideal_of_le_le_of_le ideal_of_le_le_of_le\n\n",
 "ext":
 "@[ext]\ntheorem ext (A B : valuation_subring K) (h : ∀ x, x ∈ A ↔ x ∈ B) : A = B :=\n  SetLike.ext h\n#align ext ext\n\n",
 "eq_iff_unit_group":
 "theorem eq_iff_unit_group {A B : valuation_subring K} : A = B ↔ A.unit_group = B.unit_group :=\n  unit_group_injective.eq_iff.symm\n#align eq_iff_unit_group eq_iff_unit_group\n\n",
 "eq_iff_principal_unit_group":
 "theorem eq_iff_principal_unit_group {A B : valuation_subring K} :\n    A = B ↔ A.principal_unit_group = B.principal_unit_group :=\n  principal_unit_group_injective.eq_iff.symm\n#align eq_iff_principal_unit_group eq_iff_principal_unit_group\n\n",
 "comap_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_comap (A : valuation_subring J) (g : «expr →+* » L J) (f : «expr →+* » K L) :\n    (A.comap g).comap f = A.comap (g.comp f) :=\n  rfl\n#align comap_comap comap_comap\n\n",
 "coe_unit_group_to_residue_field_units_apply":
 "@[simp]\ntheorem coe_unit_group_to_residue_field_units_apply (x : A.unit_group) :\n    (A.unit_group_to_residue_field_units x : local_ring.residue_field A) =\n      ideal.quotient.mk _ (A.unit_group_mul_equiv x : A) :=\n  rfl\n#align coe_unit_group_to_residue_field_units_apply coe_unit_group_to_residue_field_units_apply\n\n",
 "coe_unit_group_mul_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n@[simp]\ntheorem coe_unit_group_mul_equiv_symm_apply (a : «expr ˣ» A) : (A.unit_group_mul_equiv.symm a : K) = a :=\n  rfl\n#align coe_unit_group_mul_equiv_symm_apply coe_unit_group_mul_equiv_symm_apply\n\n",
 "coe_unit_group_mul_equiv_apply":
 "@[simp]\ntheorem coe_unit_group_mul_equiv_apply (a : A.unit_group) : (A.unit_group_mul_equiv a : K) = a :=\n  rfl\n#align coe_unit_group_mul_equiv_apply coe_unit_group_mul_equiv_apply\n\n",
 "coe_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- TODO: if we add `valuation_subring.map` at a later date, we should use it here\n@[simp]\ntheorem coe_pointwise_smul (g : G) (S : valuation_subring K) : ↑(«expr • » g S) = «expr • » g (S : set K) :=\n  rfl\n#align coe_pointwise_smul coe_pointwise_smul\n\n",
 "coe_mem_principal_unit_group_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem coe_mem_principal_unit_group_iff {x : A.unit_group} :\n    (x : «expr ˣ» K) ∈ A.principal_unit_group ↔\n      A.unit_group_mul_equiv x ∈ (Units.map (local_ring.residue A).to_monoid_hom).ker :=\n  by\n  rw [monoid_hom.mem_ker, Units.ext_iff]\n  let π := ideal.quotient.mk (local_ring.maximal_ideal A); convert_to _ ↔ π _ = 1\n  rw [← π.map_one, ← sub_eq_zero, ← π.map_sub, ideal.quotient.eq_zero_iff_mem, valuation_lt_one_iff]\n  simpa\n#align coe_mem_principal_unit_group_iff coe_mem_principal_unit_group_iff\n\n",
 "coe_mem_nonunits_iff":
 "/-- The elements of `A.nonunits` are those of the maximal ideal of `A` after coercion to `K`.\n\nSee also `mem_nonunits_iff_exists_mem_maximal_ideal`, which gets rid of the coercion to `K`,\nat the expense of a more complicated right hand side.\n -/\ntheorem coe_mem_nonunits_iff {a : A} : (a : K) ∈ A.nonunits ↔ a ∈ local_ring.maximal_ideal A :=\n  (valuation_lt_one_iff _ _).symm\n#align coe_mem_nonunits_iff coe_mem_nonunits_iff\n\n",
 "coe_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem coe_comap (A : valuation_subring L) (f : «expr →+* » K L) : (A.comap f : set K) = «expr ⁻¹' » f A :=\n  rfl\n#align coe_comap coe_comap\n\n",
 "algebra_map_apply":
 "@[simp]\ntheorem algebra_map_apply (a : A) : algebra_map A K a = a :=\n  rfl\n#align algebra_map_apply algebra_map_apply\n\n",
 "add_mem":
 "theorem add_mem (x y : K) : x ∈ A → y ∈ A → x + y ∈ A :=\n  A.to_subring.add_mem\n#align add_mem add_mem\n\n"}