{"zero_iff":
 "-- The following definition is not an instance, because we have more than one `v` on a given `R`.\n-- In addition, type class inference would not be able to infer `v`.\n/-- If `v` is a valuation on a division ring then `v(x) = 0` iff `x = 0`. -/\n@[simp]\ntheorem zero_iff [Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K} : v x = 0 ↔ x = 0 :=\n  map_eq_zero v\n#align zero_iff zero_iff\n\n",
 "valuation_apply":
 "@[simp]\ntheorem valuation_apply (r : R) : v.valuation r = Multiplicative.ofAdd (OrderDual.toDual (v r)) :=\n  rfl\n#align valuation_apply valuation_apply\n\n",
 "val_eq":
 "theorem val_eq (h : v₁.is_equiv v₂) {r s : R} : v₁ r = v₁ s ↔ v₂ r = v₂ s :=\n  h.val_eq\n#align val_eq val_eq\n\n",
 "unit_map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\ntheorem unit_map_eq (u : «expr ˣ» R) : (Units.map (v : «expr →* » R Γ₀) u : Γ₀) = v u :=\n  rfl\n#align unit_map_eq unit_map_eq\n\n",
 "trans":
 "#print trans /-\n@[trans]\ntheorem trans (h₁₂ : v₁.is_equiv v₂) (h₂₃ : v₂.is_equiv v₃) : v₁.is_equiv v₃ :=\n  h₁₂.trans h₂₃\n#align trans trans\n-/\n\n",
 "top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n-- The following definition is not an instance, because we have more than one `v` on a given `R`.\n-- In addition, type class inference would not be able to infer `v`.\n/-- If `v` is an additive valuation on a division ring then `v(x) = ⊤` iff `x = 0`. -/\n@[simp]\ntheorem top_iff [Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K} : v x = «expr⊤» ↔ x = 0 :=\n  v.zero_iff\n#align top_iff top_iff\n\n",
 "to_fun_eq_coe":
 "/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin Buzzard, Johan Commelin, Patrick Massot\n-/\n@[simp]\ntheorem to_fun_eq_coe (v : Valuation R Γ₀) : v.to_fun = v :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "symm":
 "#print symm /-\n@[symm]\ntheorem symm (h : v₁.is_equiv v₂) : v₂.is_equiv v₁ :=\n  h.symm\n#align symm symm\n-/\n\n",
 "refl":
 "#print refl /-\n@[refl]\ntheorem refl : v.is_equiv v :=\n  Valuation.IsEquiv.refl\n#align refl refl\n-/\n\n",
 "one_lt_val_iff":
 "theorem one_lt_val_iff (v : Valuation K Γ₀) {x : K} (h : x ≠ 0) : 1 < v x ↔ v x⁻¹ < 1 := by\n  simpa using (inv_lt_inv₀ (v.ne_zero_iff.2 h) one_ne_zero).symm\n#align one_lt_val_iff one_lt_val_iff\n\n",
 "of_eq":
 "#print of_eq /-\ntheorem of_eq {v' : AddValuation R Γ₀} (h : v = v') : v.is_equiv v' :=\n  Valuation.IsEquiv.of_eq h\n#align of_eq of_eq\n-/\n\n",
 "of_apply":
 "-- end of section\n@[simp]\ntheorem of_apply : (of f h0 h1 hadd hmul) r = f r :=\n  rfl\n#align of_apply of_apply\n\n",
 "ne_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem ne_top_iff [Nontrivial Γ₀] (v : AddValuation K Γ₀) {x : K} : v x ≠ «expr⊤» ↔ x ≠ 0 :=\n  v.ne_zero_iff\n#align ne_top_iff ne_top_iff\n\n",
 "ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem ne_top (h : v₁.is_equiv v₂) {r : R} : v₁ r ≠ «expr⊤» ↔ v₂ r ≠ «expr⊤» :=\n  h.ne_zero\n#align ne_top ne_top\n\n",
 "neZero_iff":
 "#print neZero_iff /-\ntheorem neZero_iff [Nontrivial Γ₀] (v : Valuation K Γ₀) {x : K} : v x ≠ 0 ↔ x ≠ 0 :=\n  map_ne_zero v\n#align ne_zero_iff neZero_iff\n-/\n\n",
 "mem_supp_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem mem_supp_iff (x : R) : x ∈ supp v ↔ v x = «expr⊤» :=\n  v.mem_supp_iff x\n#align mem_supp_iff mem_supp_iff\n\n",
 "map_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print map_zero /-\n@[simp]\ntheorem map_zero : v 0 = «expr⊤» :=\n  v.map_zero\n#align map_zero map_zero\n-/\n\n",
 "map_sum_lt'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_sum_lt' {ι : Type _} {s : Finset ι} {f : ι → R} {g : Γ₀} (hg : 0 < g) (hf : ∀ i ∈ s, v (f i) < g) :\n    v (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) < g :=\n  v.map_sum_lt (ne_of_gt hg) hf\n#align map_sum_lt' map_sum_lt'\n\n",
 "map_sum_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_sum_lt {ι : Type _} {s : Finset ι} {f : ι → R} {g : Γ₀} (hg : g ≠ 0) (hf : ∀ i ∈ s, v (f i) < g) :\n    v (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) < g :=\n  by\n  refine'\n    Finset.induction_on s (fun _ => trans_rel_right (· < ·) v.map_zero (zero_lt_iff.2 hg)) (fun a s has ih hf => _) hf\n  rw [Finset.forall_mem_insert] at hf; rw [Finset.sum_insert has]\n  exact v.map_add_lt hf.1 (ih hf.2)\n#align map_sum_lt map_sum_lt\n\n",
 "map_sum_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_sum_le {ι : Type _} {s : Finset ι} {f : ι → R} {g : Γ₀} (hf : ∀ i ∈ s, v (f i) ≤ g) :\n    v (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) ≤ g :=\n  by\n  refine' Finset.induction_on s (fun _ => trans_rel_right (· ≤ ·) v.map_zero zero_le') (fun a s has ih hf => _) hf\n  rw [Finset.forall_mem_insert] at hf; rw [Finset.sum_insert has]\n  exact v.map_add_le hf.1 (ih hf.2)\n#align map_sum_le map_sum_le\n\n",
 "map_sub_swap":
 "theorem map_sub_swap (x y : R) : v (x - y) = v (y - x) :=\n  v.map_sub_swap x y\n#align map_sub_swap map_sub_swap\n\n",
 "map_sub_le":
 "theorem map_sub_le {x y g} (hx : v x ≤ g) (hy : v y ≤ g) : v (x - y) ≤ g :=\n  by\n  rw [sub_eq_add_neg]\n  exact v.map_add_le hx (le_trans (le_of_eq (v.map_neg y)) hy)\n#align map_sub_le map_sub_le\n\n",
 "map_sub":
 "#print map_sub /-\ntheorem map_sub (x y : R) : min (v x) (v y) ≤ v (x - y) :=\n  v.map_sub x y\n#align map_sub map_sub\n-/\n\n",
 "map_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print map_pow /-\n@[simp]\ntheorem map_pow : ∀ (x) (n : ℕ), v (x ^ n) = «expr • » n (v x) :=\n  v.map_pow\n#align map_pow map_pow\n-/\n\n",
 "map_one_sub_of_lt":
 "theorem map_one_sub_of_lt (h : v x < 1) : v (1 - x) = 1 :=\n  by\n  rw [← v.map_one, ← v.map_neg] at h\n  rw [sub_eq_add_neg 1 x]\n  simpa only [v.map_one, v.map_neg] using v.map_add_eq_of_lt_left h\n#align map_one_sub_of_lt map_one_sub_of_lt\n\n",
 "map_one_add_of_lt":
 "theorem map_one_add_of_lt (h : v x < 1) : v (1 + x) = 1 :=\n  by\n  rw [← v.map_one] at h\n  simpa only [v.map_one] using v.map_add_eq_of_lt_left h\n#align map_one_add_of_lt map_one_add_of_lt\n\n",
 "map_one":
 "#print map_one /-\n@[simp]\ntheorem map_one : v 1 = 0 :=\n  v.map_one\n#align map_one map_one\n-/\n\n",
 "map_neg":
 "#print map_neg /-\n@[simp]\ntheorem map_neg (x : R) : v (-x) = v x :=\n  v.map_neg x\n#align map_neg map_neg\n-/\n\n",
 "map_mul":
 "#print map_mul /-\n@[simp]\ntheorem map_mul : ∀ x y, v (x * y) = v x + v y :=\n  v.map_mul\n#align map_mul map_mul\n-/\n\n",
 "map_lt_sum'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_lt_sum' {ι : Type _} {s : Finset ι} {f : ι → R} {g : Γ₀} (hg : g < «expr⊤») (hf : ∀ i ∈ s, g < v (f i)) :\n    g < v (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) :=\n  v.map_sum_lt' hg hf\n#align map_lt_sum' map_lt_sum'\n\n",
 "map_lt_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_lt_sum {ι : Type _} {s : Finset ι} {f : ι → R} {g : Γ₀} (hg : g ≠ «expr⊤») (hf : ∀ i ∈ s, g < v (f i)) :\n    g < v (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) :=\n  v.map_sum_lt hg hf\n#align map_lt_sum map_lt_sum\n\n",
 "map_lt_add":
 "theorem map_lt_add {x y g} (hx : g < v x) (hy : g < v y) : g < v (x + y) :=\n  v.map_add_lt hx hy\n#align map_lt_add map_lt_add\n\n",
 "map_le_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_le_sum {ι : Type _} {s : Finset ι} {f : ι → R} {g : Γ₀} (hf : ∀ i ∈ s, g ≤ v (f i)) :\n    g ≤ v (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) :=\n  v.map_sum_le hf\n#align map_le_sum map_le_sum\n\n",
 "map_le_sub":
 "theorem map_le_sub {x y g} (hx : g ≤ v x) (hy : g ≤ v y) : g ≤ v (x - y) :=\n  v.map_sub_le hx hy\n#align map_le_sub map_le_sub\n\n",
 "map_le_add":
 "theorem map_le_add {x y g} (hx : g ≤ v x) (hy : g ≤ v y) : g ≤ v (x + y) :=\n  v.map_add_le hx hy\n#align map_le_add map_le_add\n\n",
 "map_inv":
 "#print map_inv /-\n@[simp]\ntheorem map_inv (v : AddValuation K Γ₀) {x : K} : v x⁻¹ = -v x :=\n  map_inv₀ v.valuation x\n#align map_inv map_inv\n-/\n\n",
 "map_eq_of_sub_lt":
 "theorem map_eq_of_sub_lt (h : v (y - x) < v x) : v y = v x :=\n  by\n  have := Valuation.map_add_of_distinct_val v (ne_of_gt h).symm\n  rw [max_eq_right (le_of_lt h)] at this\n  simpa using this\n#align map_eq_of_sub_lt map_eq_of_sub_lt\n\n",
 "map_eq_of_lt_sub":
 "theorem map_eq_of_lt_sub (h : v x < v (y - x)) : v y = v x :=\n  v.map_eq_of_sub_lt h\n#align map_eq_of_lt_sub map_eq_of_lt_sub\n\n",
 "map_add_supp":
 "theorem map_add_supp (a : R) {s : R} (h : s ∈ supp v) : v (a + s) = v a :=\n  v.map_add_supp a h\n#align map_add_supp map_add_supp\n\n",
 "map_add_of_distinct_val":
 "theorem map_add_of_distinct_val (h : v x ≠ v y) : v (x + y) = min (v x) (v y) :=\n  v.map_add_of_distinct_val h\n#align map_add_of_distinct_val map_add_of_distinct_val\n\n",
 "map_add_lt":
 "theorem map_add_lt {x y g} (hx : v x < g) (hy : v y < g) : v (x + y) < g :=\n  lt_of_le_of_lt (v.map_add x y) <| max_lt hx hy\n#align map_add_lt map_add_lt\n\n",
 "map_add_le":
 "theorem map_add_le {x y g} (hx : v x ≤ g) (hy : v y ≤ g) : v (x + y) ≤ g :=\n  le_trans (v.map_add x y) <| max_le hx hy\n#align map_add_le map_add_le\n\n",
 "map_add_eq_of_lt_right":
 "theorem map_add_eq_of_lt_right (h : v x < v y) : v (x + y) = v y :=\n  by\n  convert v.map_add_of_distinct_val _\n  · symm\n    rw [max_eq_right_iff]\n    exact le_of_lt h\n  · exact ne_of_lt h\n#align map_add_eq_of_lt_right map_add_eq_of_lt_right\n\n",
 "map_add_eq_of_lt_left":
 "theorem map_add_eq_of_lt_left (h : v y < v x) : v (x + y) = v x := by rw [add_comm]; exact map_add_eq_of_lt_right _ h\n#align map_add_eq_of_lt_left map_add_eq_of_lt_left\n\n",
 "map_add":
 "#print map_add /-\n@[simp]\ntheorem map_add : ∀ x y, min (v x) (v y) ≤ v (x + y) :=\n  v.map_add\n#align map_add map_add\n-/\n\n",
 "map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem map {v' : AddValuation R Γ₀} (f : «expr →+ » Γ₀ Γ'₀) (ht : f («expr⊤») = «expr⊤») (hf : Monotone f)\n    (inf : injective f) (h : v.is_equiv v') : (v.map f ht hf).is_equiv (v'.map f ht hf) :=\n  h.map\n    { to_fun := f\n      map_mul' := f.map_add\n      map_one' := f.map_zero\n      map_zero' := ht } (fun x y h => hf h) inf\n#align map map\n\n",
 "is_equiv_tfae":
 "theorem is_equiv_tfae [LinearOrderedCommGroupWithZero Γ₀] [LinearOrderedCommGroupWithZero Γ'₀] (v : Valuation K Γ₀)\n    (v' : Valuation K Γ'₀) :\n    [v.is_equiv v', ∀ {x}, v x ≤ 1 ↔ v' x ≤ 1, ∀ {x}, v x = 1 ↔ v' x = 1, ∀ {x}, v x < 1 ↔ v' x < 1,\n        ∀ {x}, v (x - 1) < 1 ↔ v' (x - 1) < 1].tfae :=\n  by\n  tfae_have 1 ↔ 2; · apply is_equiv_iff_val_le_one\n  tfae_have 1 ↔ 3; · apply is_equiv_iff_val_eq_one\n  tfae_have 1 ↔ 4; · apply is_equiv_iff_val_lt_one\n  tfae_have 1 ↔ 5; · apply is_equiv_iff_val_sub_one_lt_one\n  tfae_finish\n#align is_equiv_tfae is_equiv_tfae\n\n",
 "is_equiv_of_val_le_one":
 "theorem is_equiv_of_val_le_one [LinearOrderedCommGroupWithZero Γ₀] [LinearOrderedCommGroupWithZero Γ'₀]\n    (v : Valuation K Γ₀) (v' : Valuation K Γ'₀) (h : ∀ {x : K}, v x ≤ 1 ↔ v' x ≤ 1) : v.is_equiv v' :=\n  by\n  intro x y\n  by_cases hy : y = 0; · simp [hy, zero_iff]\n  rw [show y = 1 * y by rw [one_mul]]\n  rw [← inv_mul_cancel_right₀ hy x]\n  iterate 2 rw [v.map_mul _ y, v'.map_mul _ y]\n  rw [v.map_one, v'.map_one]\n  constructor <;> intro H\n  · apply mul_le_mul_right'\n    replace hy := v.ne_zero_iff.mpr hy\n    replace H := le_of_le_mul_right hy H\n    rwa [h] at H\n  · apply mul_le_mul_right'\n    replace hy := v'.ne_zero_iff.mpr hy\n    replace H := le_of_le_mul_right hy H\n    rwa [h]\n#align is_equiv_of_val_le_one is_equiv_of_val_le_one\n\n",
 "is_equiv_of_map_strict_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n-- end of namespace\ntheorem is_equiv_of_map_strict_mono [LinearOrderedCommMonoidWithZero Γ₀] [LinearOrderedCommMonoidWithZero Γ'₀] [Ring R]\n    {v : Valuation R Γ₀} (f : «expr →*₀ » Γ₀ Γ'₀) (H : StrictMono f) : IsEquiv (v.map f H.monotone) v := fun x y =>\n  ⟨H.le_iff_le.mp, fun h => H.monotone h⟩\n#align is_equiv_of_map_strict_mono is_equiv_of_map_strict_mono\n\n",
 "is_equiv_iff_val_sub_one_lt_one":
 "theorem is_equiv_iff_val_sub_one_lt_one [LinearOrderedCommGroupWithZero Γ₀] [LinearOrderedCommGroupWithZero Γ'₀]\n    (v : Valuation K Γ₀) (v' : Valuation K Γ'₀) : v.is_equiv v' ↔ ∀ {x : K}, v (x - 1) < 1 ↔ v' (x - 1) < 1 :=\n  by\n  rw [is_equiv_iff_val_lt_one]\n  exact (Equiv.subRight 1).surjective.forall\n#align is_equiv_iff_val_sub_one_lt_one is_equiv_iff_val_sub_one_lt_one\n\n",
 "is_equiv_iff_val_lt_one":
 "theorem is_equiv_iff_val_lt_one [LinearOrderedCommGroupWithZero Γ₀] [LinearOrderedCommGroupWithZero Γ'₀]\n    (v : Valuation K Γ₀) (v' : Valuation K Γ'₀) : v.is_equiv v' ↔ ∀ {x : K}, v x < 1 ↔ v' x < 1 :=\n  by\n  constructor\n  · intro h x\n    simp only [lt_iff_le_and_ne, and_congr ((is_equiv_iff_val_le_one _ _).1 h) ((is_equiv_iff_val_eq_one _ _).1 h).not]\n  · rw [is_equiv_iff_val_eq_one]\n    intro h x\n    by_cases hx : x = 0\n    · simp only [(zero_iff _).2 hx, zero_ne_one]\n    constructor\n    · intro hh\n      by_contra h_1\n      cases ne_iff_lt_or_gt.1 h_1\n      · simpa [hh, lt_self_iff_false] using h.2 h_2\n      · rw [← inv_one, ← inv_eq_iff_eq_inv, ← map_inv₀] at hh\n        exact hh.not_lt (h.2 ((one_lt_val_iff v' hx).1 h_2))\n    · intro hh\n      by_contra h_1\n      cases ne_iff_lt_or_gt.1 h_1\n      · simpa [hh, lt_self_iff_false] using h.1 h_2\n      · rw [← inv_one, ← inv_eq_iff_eq_inv, ← map_inv₀] at hh\n        exact hh.not_lt (h.1 ((one_lt_val_iff v hx).1 h_2))\n#align is_equiv_iff_val_lt_one is_equiv_iff_val_lt_one\n\n",
 "is_equiv_iff_val_le_one":
 "theorem is_equiv_iff_val_le_one [LinearOrderedCommGroupWithZero Γ₀] [LinearOrderedCommGroupWithZero Γ'₀]\n    (v : Valuation K Γ₀) (v' : Valuation K Γ'₀) : v.is_equiv v' ↔ ∀ {x : K}, v x ≤ 1 ↔ v' x ≤ 1 :=\n  ⟨fun h x => by simpa using h x 1, isEquiv_of_val_le_one _ _⟩\n#align is_equiv_iff_val_le_one is_equiv_iff_val_le_one\n\n",
 "is_equiv_iff_val_eq_one":
 "theorem is_equiv_iff_val_eq_one [LinearOrderedCommGroupWithZero Γ₀] [LinearOrderedCommGroupWithZero Γ'₀]\n    (v : Valuation K Γ₀) (v' : Valuation K Γ'₀) : v.is_equiv v' ↔ ∀ {x : K}, v x = 1 ↔ v' x = 1 :=\n  by\n  constructor\n  · intro h x\n    simpa using @is_equiv.val_eq _ _ _ _ _ _ v v' h x 1\n  · intro h\n    apply is_equiv_of_val_le_one\n    intro x\n    constructor\n    · intro hx\n      cases' lt_or_eq_of_le hx with hx' hx'\n      · have : v (1 + x) = 1 := by\n          rw [← v.map_one]\n          apply map_add_eq_of_lt_left\n          simpa\n        rw [h] at this\n        rw [show x = -1 + (1 + x) by simp]\n        refine' le_trans (v'.map_add _ _) _\n        simp [this]\n      · rw [h] at hx'\n        exact le_of_eq hx'\n    · intro hx\n      cases' lt_or_eq_of_le hx with hx' hx'\n      · have : v' (1 + x) = 1 := by\n          rw [← v'.map_one]\n          apply map_add_eq_of_lt_left\n          simpa\n        rw [← h] at this\n        rw [show x = -1 + (1 + x) by simp]\n        refine' le_trans (v.map_add _ _) _\n        simp [this]\n      · rw [← h] at hx'\n        exact le_of_eq hx'\n#align is_equiv_iff_val_eq_one is_equiv_iff_val_eq_one\n\n",
 "ext_iff":
 "theorem ext_iff {v₁ v₂ : AddValuation R Γ₀} : v₁ = v₂ ↔ ∀ r, v₁ r = v₂ r :=\n  Valuation.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext {v₁ v₂ : AddValuation R Γ₀} (h : ∀ r, v₁ r = v₂ r) : v₁ = v₂ :=\n  Valuation.ext h\n#align ext ext\n\n",
 "comap_supp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_supp {S : Type _} [CommRing S] (f : «expr →+* » S R) : supp (v.comap f) = Ideal.comap f v.supp :=\n  Ideal.ext fun x => by\n    rw [mem_supp_iff, Ideal.mem_comap, mem_supp_iff]\n    rfl\n#align comap_supp comap_supp\n\n",
 "comap_id":
 "@[simp]\ntheorem comap_id : v.comap (RingHom.id R) = v :=\n  v.comap_id\n#align comap_id comap_id\n\n",
 "comap_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_comp {S₁ : Type _} {S₂ : Type _} [Ring S₁] [Ring S₂] (f : «expr →+* » S₁ S₂) (g : «expr →+* » S₂ R) :\n    v.comap (g.comp f) = (v.comap g).comap f :=\n  v.comap_comp f g\n#align comap_comp comap_comp\n\n",
 "comap_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem comap_apply {S : Type _} [Ring S] (f : «expr →+* » S R) (v : Valuation R Γ₀) (s : S) : v.comap f s = v (f s) :=\n  rfl\n#align comap_apply comap_apply\n\n",
 "comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-- `comap` preserves equivalence. -/\ntheorem comap {S : Type _} [Ring S] (f : «expr →+* » S R) (h : v₁.is_equiv v₂) : (v₁.comap f).is_equiv (v₂.comap f) :=\n  h.comap f\n#align comap comap\n\n",
 "coe_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n@[simp, norm_cast]\ntheorem coe_coe : «expr⇑ » (v : «expr →*₀ » R Γ₀) = v :=\n  rfl\n#align coe_coe coe_coe\n\n",
 "NeZero":
 "#print NeZero /-\ntheorem NeZero (h : v₁.is_equiv v₂) {r : R} : v₁ r ≠ 0 ↔ v₂ r ≠ 0 :=\n  by\n  have : v₁ r ≠ v₁ 0 ↔ v₂ r ≠ v₂ 0 := not_congr h.val_eq\n  rwa [v₁.map_zero, v₂.map_zero] at this\n#align ne_zero NeZero\n-/\n\n"}