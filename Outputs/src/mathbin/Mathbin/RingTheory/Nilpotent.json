{"zero_isRadical_iff":
 "#print zero_isRadical_iff /-\ntheorem zero_isRadical_iff [MonoidWithZero R] : IsRadical (0 : R) ↔ IsReduced R :=\n  by\n  simp_rw [is_reduced_iff, IsNilpotent, exists_imp, ← zero_dvd_iff]\n  exact forall_swap\n#align zero_is_radical_iff zero_isRadical_iff\n-/\n\n",
 "zero":
 "#print IsNilpotent.zero /-\ntheorem IsNilpotent.zero [MonoidWithZero R] : IsNilpotent (0 : R) :=\n  ⟨1, pow_one 0⟩\n#align is_nilpotent.zero IsNilpotent.zero\n-/\n\n",
 "nilradical_le_prime":
 "#print nilradical_le_prime /-\ntheorem nilradical_le_prime (J : Ideal R) [H : J.is_prime] : nilradical R ≤ J :=\n  (nilradical_eq_infₛ R).symm ▸ infₛ_le H\n#align nilradical_le_prime nilradical_le_prime\n-/\n\n",
 "nilradical_eq_zero":
 "#print nilradical_eq_zero /-\n@[simp]\ntheorem nilradical_eq_zero (R : Type _) [CommSemiring R] [IsReduced R] : nilradical R = 0 :=\n  Ideal.ext fun _ => isNilpotent_iff_eq_zero\n#align nilradical_eq_zero nilradical_eq_zero\n-/\n\n",
 "nilradical_eq_infₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print nilradical_eq_infₛ /-\ntheorem nilradical_eq_infₛ (R : Type _) [CommSemiring R] : nilradical R = infₛ { J : Ideal R | J.is_prime } :=\n  (Ideal.radical_eq_infₛ («expr⊥»)).trans <| by simp_rw [and_iff_right bot_le]\n#align nilradical_eq_Inf nilradical_eq_infₛ\n-/\n\n",
 "nilpotent_iff_mem_prime":
 "#print nilpotent_iff_mem_prime /-\ntheorem nilpotent_iff_mem_prime : IsNilpotent x ↔ ∀ J : Ideal R, J.is_prime → x ∈ J :=\n  by\n  rw [← mem_nilradical, nilradical_eq_infₛ, Submodule.mem_infₛ]\n  rfl\n#align nilpotent_iff_mem_prime nilpotent_iff_mem_prime\n-/\n\n",
 "neg":
 "#print IsNilpotent.neg /-\ntheorem IsNilpotent.neg [Ring R] (h : IsNilpotent x) : IsNilpotent (-x) :=\n  by\n  obtain ⟨n, hn⟩ := h\n  use n\n  rw [neg_pow, hn, MulZeroClass.mul_zero]\n#align is_nilpotent.neg IsNilpotent.neg\n-/\n\n",
 "mk":
 "#print IsNilpotent.mk /-\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\ntheorem IsNilpotent.mk [Zero R] [Pow R ℕ] (x : R) (n : ℕ) (e : x ^ n = 0) : IsNilpotent x :=\n  ⟨n, e⟩\n#align is_nilpotent.mk IsNilpotent.mk\n-/\n\n",
 "mem_nilradical":
 "#print mem_nilradical /-\ntheorem mem_nilradical : x ∈ nilradical R ↔ IsNilpotent x :=\n  iff.rfl\n#align mem_nilradical mem_nilradical\n-/\n\n",
 "mapq":
 "theorem is_nilpotent.mapq (hnp : IsNilpotent f) : IsNilpotent (p.mapq p f hp) :=\n  by\n  obtain ⟨k, hk⟩ := hnp\n  use k\n  simp [← p.mapq_pow, hk]\n#align is_nilpotent.mapq is_nilpotent.mapq\n\n",
 "map":
 "#print IsNilpotent.map /-\ntheorem IsNilpotent.map [MonoidWithZero R] [MonoidWithZero S] {r : R} {F : Type _} [MonoidWithZeroHomClass F R S]\n    (hr : IsNilpotent r) (f : F) : IsNilpotent (f r) :=\n  by\n  use hr.some\n  rw [← map_pow, hr.some_spec, map_zero]\n#align is_nilpotent.map IsNilpotent.map\n-/\n\n",
 "ker_isRadical_iff_reduced_of_surjective":
 "#print RingHom.ker_isRadical_iff_reduced_of_surjective /-\ntheorem RingHom.ker_isRadical_iff_reduced_of_surjective {S F} [CommSemiring R] [CommRing S] [RingHomClass F R S] {f : F}\n    (hf : function.surjective f) : (RingHom.ker f).is_radical ↔ IsReduced S := by\n  simp_rw [is_reduced_iff, hf.forall, IsNilpotent, ← map_pow, ← RingHom.mem_ker] <;> rfl\n#align ring_hom.ker_is_radical_iff_reduced_of_surjective RingHom.ker_isRadical_iff_reduced_of_surjective\n-/\n\n",
 "is_nilpotent_sub":
 "theorem is_nilpotent_sub (hx : IsNilpotent x) (hy : IsNilpotent y) : IsNilpotent (x - y) :=\n  by\n  rw [← neg_right_iff] at h_comm\n  rw [← isNilpotent_neg_iff] at hy\n  rw [sub_eq_add_neg]\n  exact h_comm.is_nilpotent_add hx hy\n#align is_nilpotent_sub is_nilpotent_sub\n\n",
 "is_nilpotent_mul_right_iff":
 "@[simp]\ntheorem is_nilpotent_mul_right_iff (a : A) : IsNilpotent (mulRight R a) ↔ IsNilpotent a := by\n  constructor <;> rintro ⟨n, hn⟩ <;> use n <;> simp only [mul_right_eq_zero_iff, pow_mul_right] at hn⊢ <;> exact hn\n#align is_nilpotent_mul_right_iff is_nilpotent_mul_right_iff\n\n",
 "is_nilpotent_mul_right":
 "theorem is_nilpotent_mul_right (h : IsNilpotent y) : IsNilpotent (x * y) :=\n  by\n  rw [h_comm.eq]\n  exact h_comm.symm.is_nilpotent_mul_left h\n#align is_nilpotent_mul_right is_nilpotent_mul_right\n\n",
 "is_nilpotent_mul_left_iff":
 "@[simp]\ntheorem is_nilpotent_mul_left_iff (a : A) : IsNilpotent (mulLeft R a) ↔ IsNilpotent a := by\n  constructor <;> rintro ⟨n, hn⟩ <;> use n <;> simp only [mul_left_eq_zero_iff, pow_mul_left] at hn⊢ <;> exact hn\n#align is_nilpotent_mul_left_iff is_nilpotent_mul_left_iff\n\n",
 "is_nilpotent_mul_left":
 "theorem is_nilpotent_mul_left (h : IsNilpotent x) : IsNilpotent (x * y) :=\n  by\n  obtain ⟨n, hn⟩ := h\n  use n\n  rw [h_comm.mul_pow, hn, MulZeroClass.zero_mul]\n#align is_nilpotent_mul_left is_nilpotent_mul_left\n\n",
 "is_nilpotent_add":
 "theorem is_nilpotent_add (hx : IsNilpotent x) (hy : IsNilpotent y) : IsNilpotent (x + y) :=\n  by\n  obtain ⟨n, hn⟩ := hx\n  obtain ⟨m, hm⟩ := hy\n  use n + m - 1\n  rw [h_comm.add_pow']\n  apply Finset.sum_eq_zero\n  rintro ⟨i, j⟩ hij\n  suffices x ^ i * y ^ j = 0 by simp only [this, nsmul_eq_mul, MulZeroClass.mul_zero]\n  cases' Nat.le_or_le_of_add_eq_add_pred (finset.nat.mem_antidiagonal.mp hij) with hi hj\n  · rw [pow_eq_zero_of_le hi hn, MulZeroClass.zero_mul]\n  · rw [pow_eq_zero_of_le hj hm, MulZeroClass.mul_zero]\n#align is_nilpotent_add is_nilpotent_add\n\n",
 "isReduced_of_injective":
 "#print isReduced_of_injective /-\ntheorem isReduced_of_injective [MonoidWithZero R] [MonoidWithZero S] {F : Type _} [MonoidWithZeroHomClass F R S] (f : F)\n    (hf : function.injective f) [IsReduced S] : IsReduced R :=\n  by\n  constructor\n  intro x hx\n  apply hf\n  rw [map_zero]\n  exact (hx.map f).eq_zero\n#align is_reduced_of_injective isReduced_of_injective\n-/\n\n",
 "isReduced_iff_pow_one_lt":
 "#print isReduced_iff_pow_one_lt /-\ntheorem isReduced_iff_pow_one_lt [MonoidWithZero R] (k : ℕ) (hk : 1 < k) : IsReduced R ↔ ∀ x : R, x ^ k = 0 → x = 0 :=\n  by simp_rw [← zero_isRadical_iff, isRadical_iff_pow_one_lt k hk, zero_dvd_iff]\n#align is_reduced_iff_pow_one_lt isReduced_iff_pow_one_lt\n-/\n\n",
 "isRadical_iff_span_singleton":
 "#print isRadical_iff_span_singleton /-\ntheorem isRadical_iff_span_singleton [CommSemiring R] : IsRadical y ↔ (Ideal.span ({y} : Set R)).is_radical :=\n  by\n  simp_rw [IsRadical, ← Ideal.mem_span_singleton]\n  exact forall_swap.trans (forall_congr' fun r => exists_imp_distrib.symm)\n#align is_radical_iff_span_singleton isRadical_iff_span_singleton\n-/\n\n",
 "isRadical_iff_pow_one_lt":
 "#print isRadical_iff_pow_one_lt /-\ntheorem isRadical_iff_pow_one_lt [MonoidWithZero R] (k : ℕ) (hk : 1 < k) : IsRadical y ↔ ∀ x, y ∣ x ^ k → y ∣ x :=\n  ⟨fun h x => h k x, fun h =>\n    k.cauchy_induction_mul (fun n h x hd => h x <| (pow_succ' x n).symm ▸ hd.mul_right x) 0 hk\n      (fun x hd => pow_one x ▸ hd) fun n _ hn x hd => h x <| hn _ <| (pow_mul x k n).subst hd⟩\n#align is_radical_iff_pow_one_lt isRadical_iff_pow_one_lt\n-/\n\n",
 "isNilpotent_neg_iff":
 "#print isNilpotent_neg_iff /-\n@[simp]\ntheorem isNilpotent_neg_iff [Ring R] : IsNilpotent (-x) ↔ IsNilpotent x :=\n  ⟨fun h => neg_neg x ▸ h.neg, fun h => h.neg⟩\n#align is_nilpotent_neg_iff isNilpotent_neg_iff\n-/\n\n",
 "isNilpotent_iff_eq_zero":
 "#print isNilpotent_iff_eq_zero /-\n@[simp]\ntheorem isNilpotent_iff_eq_zero [MonoidWithZero R] [IsReduced R] : IsNilpotent x ↔ x = 0 :=\n  ⟨fun h => h.eq_zero, fun h => h.symm ▸ IsNilpotent.zero⟩\n#align is_nilpotent_iff_eq_zero isNilpotent_iff_eq_zero\n-/\n\n",
 "eq_zero":
 "#print IsNilpotent.eq_zero /-\ntheorem IsNilpotent.eq_zero [Zero R] [Pow R ℕ] [IsReduced R] (h : IsNilpotent x) : x = 0 :=\n  is_reduced.eq_zero x h\n#align is_nilpotent.eq_zero IsNilpotent.eq_zero\n-/\n\n"}