{"symm":
 "#print IsCoprime.symm /-\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Ken Lee, Chris Hughes\n-/\ntheorem IsCoprime.symm (H : IsCoprime x y) : IsCoprime y x :=\n  let ⟨a, b, H⟩ := H\n  ⟨b, a, by rw [add_comm, H]⟩\n#align is_coprime.symm IsCoprime.symm\n-/\n\n",
 "sq_add_sq_ne_zero":
 "theorem sq_add_sq_ne_zero {R : Type _} [LinearOrderedCommRing R] {a b : R} (h : IsCoprime a b) : a ^ 2 + b ^ 2 ≠ 0 :=\n  by\n  intro h'\n  obtain ⟨ha, hb⟩ := (add_eq_zero_iff' (sq_nonneg a) (sq_nonneg b)).mp h'\n  obtain rfl := pow_eq_zero ha\n  obtain rfl := pow_eq_zero hb\n  exact not_isCoprime_zero_zero h\n#align sq_add_sq_ne_zero sq_add_sq_ne_zero\n\n",
 "of_mul_right_right":
 "#print IsCoprime.of_mul_right_right /-\ntheorem IsCoprime.of_mul_right_right (H : IsCoprime x (y * z)) : IsCoprime x z :=\n  by\n  rw [mul_comm] at H\n  exact H.of_mul_right_left\n#align is_coprime.of_mul_right_right IsCoprime.of_mul_right_right\n-/\n\n",
 "of_mul_right_left":
 "#print IsCoprime.of_mul_right_left /-\ntheorem IsCoprime.of_mul_right_left (H : IsCoprime x (y * z)) : IsCoprime x y :=\n  by\n  rw [isCoprime_comm] at H⊢\n  exact H.of_mul_left_left\n#align is_coprime.of_mul_right_left IsCoprime.of_mul_right_left\n-/\n\n",
 "of_mul_left_right":
 "#print IsCoprime.of_mul_left_right /-\ntheorem IsCoprime.of_mul_left_right (H : IsCoprime (x * y) z) : IsCoprime y z :=\n  by\n  rw [mul_comm] at H\n  exact H.of_mul_left_left\n#align is_coprime.of_mul_left_right IsCoprime.of_mul_left_right\n-/\n\n",
 "of_mul_left_left":
 "#print IsCoprime.of_mul_left_left /-\ntheorem IsCoprime.of_mul_left_left (H : IsCoprime (x * y) z) : IsCoprime x z :=\n  let ⟨a, b, h⟩ := H\n  ⟨a * y, b, by rwa [mul_right_comm, mul_assoc]⟩\n#align is_coprime.of_mul_left_left IsCoprime.of_mul_left_left\n-/\n\n",
 "of_mul_add_right_right":
 "#print IsCoprime.of_mul_add_right_right /-\ntheorem IsCoprime.of_mul_add_right_right (h : IsCoprime x (z * x + y)) : IsCoprime x y :=\n  by\n  rw [add_comm] at h\n  exact h.of_add_mul_right_right\n#align is_coprime.of_mul_add_right_right IsCoprime.of_mul_add_right_right\n-/\n\n",
 "of_mul_add_right_left":
 "#print IsCoprime.of_mul_add_right_left /-\ntheorem IsCoprime.of_mul_add_right_left (h : IsCoprime (z * y + x) y) : IsCoprime x y :=\n  by\n  rw [add_comm] at h\n  exact h.of_add_mul_right_left\n#align is_coprime.of_mul_add_right_left IsCoprime.of_mul_add_right_left\n-/\n\n",
 "of_mul_add_left_right":
 "#print IsCoprime.of_mul_add_left_right /-\ntheorem IsCoprime.of_mul_add_left_right (h : IsCoprime x (x * z + y)) : IsCoprime x y :=\n  by\n  rw [add_comm] at h\n  exact h.of_add_mul_left_right\n#align is_coprime.of_mul_add_left_right IsCoprime.of_mul_add_left_right\n-/\n\n",
 "of_mul_add_left_left":
 "#print IsCoprime.of_mul_add_left_left /-\ntheorem IsCoprime.of_mul_add_left_left (h : IsCoprime (y * z + x) y) : IsCoprime x y :=\n  by\n  rw [add_comm] at h\n  exact h.of_add_mul_left_left\n#align is_coprime.of_mul_add_left_left IsCoprime.of_mul_add_left_left\n-/\n\n",
 "of_isCoprime_of_dvd_right":
 "#print IsCoprime.of_isCoprime_of_dvd_right /-\ntheorem IsCoprime.of_isCoprime_of_dvd_right (h : IsCoprime z y) (hdvd : x ∣ y) : IsCoprime z x :=\n  (h.symm.of_coprime_of_dvd_left hdvd).symm\n#align is_coprime.of_coprime_of_dvd_right IsCoprime.of_isCoprime_of_dvd_right\n-/\n\n",
 "of_isCoprime_of_dvd_left":
 "#print IsCoprime.of_isCoprime_of_dvd_left /-\ntheorem IsCoprime.of_isCoprime_of_dvd_left (h : IsCoprime y z) (hdvd : x ∣ y) : IsCoprime x z :=\n  by\n  obtain ⟨d, rfl⟩ := hdvd\n  exact IsCoprime.of_mul_left_left h\n#align is_coprime.of_coprime_of_dvd_left IsCoprime.of_isCoprime_of_dvd_left\n-/\n\n",
 "of_add_mul_right_right":
 "#print IsCoprime.of_add_mul_right_right /-\ntheorem IsCoprime.of_add_mul_right_right (h : IsCoprime x (y + z * x)) : IsCoprime x y :=\n  by\n  rw [mul_comm] at h\n  exact h.of_add_mul_left_right\n#align is_coprime.of_add_mul_right_right IsCoprime.of_add_mul_right_right\n-/\n\n",
 "of_add_mul_right_left":
 "#print IsCoprime.of_add_mul_right_left /-\ntheorem IsCoprime.of_add_mul_right_left (h : IsCoprime (x + z * y) y) : IsCoprime x y :=\n  by\n  rw [mul_comm] at h\n  exact h.of_add_mul_left_left\n#align is_coprime.of_add_mul_right_left IsCoprime.of_add_mul_right_left\n-/\n\n",
 "of_add_mul_left_right":
 "#print IsCoprime.of_add_mul_left_right /-\ntheorem IsCoprime.of_add_mul_left_right (h : IsCoprime x (y + x * z)) : IsCoprime x y :=\n  by\n  rw [isCoprime_comm] at h⊢\n  exact h.of_add_mul_left_left\n#align is_coprime.of_add_mul_left_right IsCoprime.of_add_mul_left_right\n-/\n\n",
 "of_add_mul_left_left":
 "#print IsCoprime.of_add_mul_left_left /-\ntheorem IsCoprime.of_add_mul_left_left (h : IsCoprime (x + y * z) y) : IsCoprime x y :=\n  let ⟨a, b, H⟩ := h\n  ⟨a, a * z + b, by\n    simpa only [add_mul, mul_add, add_assoc, add_comm, add_left_comm, mul_assoc, mul_comm, mul_left_comm] using H⟩\n#align is_coprime.of_add_mul_left_left IsCoprime.of_add_mul_left_left\n-/\n\n",
 "not_isCoprime_zero_zero":
 "#print not_isCoprime_zero_zero /-\ntheorem not_isCoprime_zero_zero [Nontrivial R] : ¬IsCoprime (0 : R) 0 :=\n  mt isCoprime_zero_right.mp not_isUnit_zero\n#align not_coprime_zero_zero not_isCoprime_zero_zero\n-/\n\n",
 "neg_right_iff":
 "theorem neg_right_iff (x y : R) : IsCoprime x (-y) ↔ IsCoprime x y :=\n  ⟨fun h => neg_neg y ▸ h.neg_right, neg_right⟩\n#align neg_right_iff neg_right_iff\n\n",
 "neg_right":
 "theorem neg_right {x y : R} (h : IsCoprime x y) : IsCoprime x (-y) :=\n  h.symm.neg_left.symm\n#align neg_right neg_right\n\n",
 "neg_neg_iff":
 "theorem neg_neg_iff (x y : R) : IsCoprime (-x) (-y) ↔ IsCoprime x y :=\n  (neg_left_iff _ _).trans (neg_right_iff _ _)\n#align neg_neg_iff neg_neg_iff\n\n",
 "neg_neg":
 "#print neg_neg /-\ntheorem neg_neg {x y : R} (h : IsCoprime x y) : IsCoprime (-x) (-y) :=\n  h.neg_left.neg_right\n#align neg_neg neg_neg\n-/\n\n",
 "neg_left_iff":
 "theorem neg_left_iff (x y : R) : IsCoprime (-x) y ↔ IsCoprime x y :=\n  ⟨fun h => neg_neg x ▸ h.neg_left, neg_left⟩\n#align neg_left_iff neg_left_iff\n\n",
 "neg_left":
 "theorem neg_left {x y : R} (h : IsCoprime x y) : IsCoprime (-x) y :=\n  by\n  obtain ⟨a, b, h⟩ := h\n  use -a, b\n  rwa [neg_mul_neg]\n#align neg_left neg_left\n\n",
 "ne_zero":
 "#print IsCoprime.ne_zero /-\n/-- If a 2-vector `p` satisfies `is_coprime (p 0) (p 1)`, then `p ≠ 0`. -/\ntheorem IsCoprime.ne_zero [Nontrivial R] {p : Fin 2 → R} (h : IsCoprime (p 0) (p 1)) : p ≠ 0 :=\n  by\n  rintro rfl\n  exact not_isCoprime_zero_zero h\n#align is_coprime.ne_zero IsCoprime.ne_zero\n-/\n\n",
 "mul_right_iff":
 "#print IsCoprime.mul_right_iff /-\ntheorem IsCoprime.mul_right_iff : IsCoprime x (y * z) ↔ IsCoprime x y ∧ IsCoprime x z := by\n  rw [isCoprime_comm, IsCoprime.mul_left_iff, isCoprime_comm, @isCoprime_comm _ _ z]\n#align is_coprime.mul_right_iff IsCoprime.mul_right_iff\n-/\n\n",
 "mul_right":
 "#print IsCoprime.mul_right /-\ntheorem IsCoprime.mul_right (H1 : IsCoprime x y) (H2 : IsCoprime x z) : IsCoprime x (y * z) :=\n  by\n  rw [isCoprime_comm] at H1 H2⊢\n  exact H1.mul_left H2\n#align is_coprime.mul_right IsCoprime.mul_right\n-/\n\n",
 "mul_left_iff":
 "#print IsCoprime.mul_left_iff /-\ntheorem IsCoprime.mul_left_iff : IsCoprime (x * y) z ↔ IsCoprime x z ∧ IsCoprime y z :=\n  ⟨fun H => ⟨H.of_mul_left_left, H.of_mul_left_right⟩, fun ⟨H1, H2⟩ => H1.mul_left H2⟩\n#align is_coprime.mul_left_iff IsCoprime.mul_left_iff\n-/\n\n",
 "mul_left":
 "#print IsCoprime.mul_left /-\ntheorem IsCoprime.mul_left (H1 : IsCoprime x z) (H2 : IsCoprime y z) : IsCoprime (x * y) z :=\n  let ⟨a, b, h1⟩ := H1\n  let ⟨c, d, h2⟩ := H2\n  ⟨a * c, a * x * d + b * c * y + b * d * z,\n    calc\n      a * c * (x * y) + (a * x * d + b * c * y + b * d * z) * z = (a * x + b * z) * (c * y + d * z) := by ring\n      _ = 1 := by rw [h1, h2, mul_one]\n      ⟩\n#align is_coprime.mul_left IsCoprime.mul_left\n-/\n\n",
 "mul_dvd":
 "#print IsCoprime.mul_dvd /-\ntheorem IsCoprime.mul_dvd (H : IsCoprime x y) (H1 : x ∣ z) (H2 : y ∣ z) : x * y ∣ z :=\n  by\n  obtain ⟨a, b, h⟩ := H\n  rw [← mul_one z, ← h, mul_add]\n  apply dvd_add\n  · rw [mul_comm z, mul_assoc]\n    exact (mul_dvd_mul_left _ H2).mul_left _\n  · rw [mul_comm b, ← mul_assoc]\n    exact (mul_dvd_mul_right H1 _).mul_right _\n#align is_coprime.mul_dvd IsCoprime.mul_dvd\n-/\n\n",
 "mul_add_right_right_iff":
 "theorem mul_add_right_right_iff {x y z : R} : IsCoprime x (z * x + y) ↔ IsCoprime x y :=\n  ⟨of_mul_add_right_right, fun h => h.mul_add_right_right z⟩\n#align mul_add_right_right_iff mul_add_right_right_iff\n\n",
 "mul_add_right_right":
 "theorem mul_add_right_right {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime x (z * x + y) :=\n  by\n  rw [add_comm]\n  exact h.add_mul_right_right z\n#align mul_add_right_right mul_add_right_right\n\n",
 "mul_add_right_left_iff":
 "theorem mul_add_right_left_iff {x y z : R} : IsCoprime (z * y + x) y ↔ IsCoprime x y :=\n  ⟨of_mul_add_right_left, fun h => h.mul_add_right_left z⟩\n#align mul_add_right_left_iff mul_add_right_left_iff\n\n",
 "mul_add_right_left":
 "theorem mul_add_right_left {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime (z * y + x) y :=\n  by\n  rw [add_comm]\n  exact h.add_mul_right_left z\n#align mul_add_right_left mul_add_right_left\n\n",
 "mul_add_left_right_iff":
 "theorem mul_add_left_right_iff {x y z : R} : IsCoprime x (x * z + y) ↔ IsCoprime x y :=\n  ⟨of_mul_add_left_right, fun h => h.mul_add_left_right z⟩\n#align mul_add_left_right_iff mul_add_left_right_iff\n\n",
 "mul_add_left_right":
 "theorem mul_add_left_right {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime x (x * z + y) :=\n  by\n  rw [add_comm]\n  exact h.add_mul_left_right z\n#align mul_add_left_right mul_add_left_right\n\n",
 "mul_add_left_left_iff":
 "theorem mul_add_left_left_iff {x y z : R} : IsCoprime (y * z + x) y ↔ IsCoprime x y :=\n  ⟨of_mul_add_left_left, fun h => h.mul_add_left_left z⟩\n#align mul_add_left_left_iff mul_add_left_left_iff\n\n",
 "mul_add_left_left":
 "theorem mul_add_left_left {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime (y * z + x) y :=\n  by\n  rw [add_comm]\n  exact h.add_mul_left_left z\n#align mul_add_left_left mul_add_left_left\n\n",
 "map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print IsCoprime.map /-\ntheorem IsCoprime.map (H : IsCoprime x y) {S : Type v} [CommSemiring S] (f : «expr →+* » R S) : IsCoprime (f x) (f y) :=\n  let ⟨a, b, h⟩ := H\n  ⟨f a, f b, by rw [← f.map_mul, ← f.map_mul, ← f.map_add, h, f.map_one]⟩\n#align is_coprime.map IsCoprime.map\n-/\n\n",
 "isUnit_of_dvd'":
 "#print IsCoprime.isUnit_of_dvd' /-\ntheorem IsCoprime.isUnit_of_dvd' {a b x : R} (h : IsCoprime a b) (ha : x ∣ a) (hb : x ∣ b) : IsUnit x :=\n  (h.of_coprime_of_dvd_left ha).is_unit_of_dvd hb\n#align is_coprime.is_unit_of_dvd' IsCoprime.isUnit_of_dvd'\n-/\n\n",
 "isUnit_of_dvd":
 "#print IsCoprime.isUnit_of_dvd /-\ntheorem IsCoprime.isUnit_of_dvd (H : IsCoprime x y) (d : x ∣ y) : IsUnit x :=\n  let ⟨k, hk⟩ := d\n  isCoprime_self.1 <| IsCoprime.of_mul_right_left <| show IsCoprime x (x * k) from hk ▸ H\n#align is_coprime.is_unit_of_dvd IsCoprime.isUnit_of_dvd\n-/\n\n",
 "isCoprime_zero_right":
 "#print isCoprime_zero_right /-\ntheorem isCoprime_zero_right : IsCoprime x 0 ↔ IsUnit x :=\n  isCoprime_comm.trans isCoprime_zero_left\n#align is_coprime_zero_right isCoprime_zero_right\n-/\n\n",
 "isCoprime_zero_left":
 "#print isCoprime_zero_left /-\ntheorem isCoprime_zero_left : IsCoprime 0 x ↔ IsUnit x :=\n  ⟨fun ⟨a, b, H⟩ => isUnit_of_mul_eq_one x b <| by rwa [MulZeroClass.mul_zero, zero_add, mul_comm] at H, fun H =>\n    let ⟨b, hb⟩ := isUnit_iff_exists_inv'.1 H\n    ⟨1, b, by rwa [one_mul, zero_add]⟩⟩\n#align is_coprime_zero_left isCoprime_zero_left\n-/\n\n",
 "isCoprime_self":
 "#print isCoprime_self /-\ntheorem isCoprime_self : IsCoprime x x ↔ IsUnit x :=\n  ⟨fun ⟨a, b, h⟩ => isUnit_of_mul_eq_one x (a + b) <| by rwa [mul_comm, add_mul], fun h =>\n    let ⟨b, hb⟩ := isUnit_iff_exists_inv'.1 h\n    ⟨b, 0, by rwa [MulZeroClass.zero_mul, add_zero]⟩⟩\n#align is_coprime_self isCoprime_self\n-/\n\n",
 "isCoprime_one_right":
 "#print isCoprime_one_right /-\ntheorem isCoprime_one_right : IsCoprime x 1 :=\n  ⟨0, 1, by rw [one_mul, MulZeroClass.zero_mul, zero_add]⟩\n#align is_coprime_one_right isCoprime_one_right\n-/\n\n",
 "isCoprime_one_left":
 "#print isCoprime_one_left /-\ntheorem isCoprime_one_left : IsCoprime 1 x :=\n  ⟨1, 0, by rw [one_mul, MulZeroClass.zero_mul, add_zero]⟩\n#align is_coprime_one_left isCoprime_one_left\n-/\n\n",
 "isCoprime_mul_unit_right_right":
 "#print isCoprime_mul_unit_right_right /-\ntheorem isCoprime_mul_unit_right_right : IsCoprime y (z * x) ↔ IsCoprime y z :=\n  mul_comm x z ▸ isCoprime_mul_unit_left_right hu y z\n#align is_coprime_mul_unit_right_right isCoprime_mul_unit_right_right\n-/\n\n",
 "isCoprime_mul_unit_right_left":
 "#print isCoprime_mul_unit_right_left /-\ntheorem isCoprime_mul_unit_right_left : IsCoprime (y * x) z ↔ IsCoprime y z :=\n  mul_comm x y ▸ isCoprime_mul_unit_left_left hu y z\n#align is_coprime_mul_unit_right_left isCoprime_mul_unit_right_left\n-/\n\n",
 "isCoprime_mul_unit_right":
 "#print isCoprime_mul_unit_right /-\ntheorem isCoprime_mul_unit_right : IsCoprime (y * x) (z * x) ↔ IsCoprime y z :=\n  (isCoprime_mul_unit_right_left hu y (z * x)).trans (isCoprime_mul_unit_right_right hu y z)\n#align is_coprime_mul_unit_right isCoprime_mul_unit_right\n-/\n\n",
 "isCoprime_mul_unit_left_right":
 "#print isCoprime_mul_unit_left_right /-\ntheorem isCoprime_mul_unit_left_right : IsCoprime y (x * z) ↔ IsCoprime y z :=\n  let ⟨u, hu⟩ := hu\n  hu ▸ isCoprime_group_smul_right u y z\n#align is_coprime_mul_unit_left_right isCoprime_mul_unit_left_right\n-/\n\n",
 "isCoprime_mul_unit_left_left":
 "#print isCoprime_mul_unit_left_left /-\ntheorem isCoprime_mul_unit_left_left : IsCoprime (x * y) z ↔ IsCoprime y z :=\n  let ⟨u, hu⟩ := hu\n  hu ▸ isCoprime_group_smul_left u y z\n#align is_coprime_mul_unit_left_left isCoprime_mul_unit_left_left\n-/\n\n",
 "isCoprime_mul_unit_left":
 "#print isCoprime_mul_unit_left /-\ntheorem isCoprime_mul_unit_left : IsCoprime (x * y) (x * z) ↔ IsCoprime y z :=\n  (isCoprime_mul_unit_left_left hu y (x * z)).trans (isCoprime_mul_unit_left_right hu y z)\n#align is_coprime_mul_unit_left isCoprime_mul_unit_left\n-/\n\n",
 "isCoprime_group_smul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print isCoprime_group_smul_right /-\ntheorem isCoprime_group_smul_right : IsCoprime y («expr • » x z) ↔ IsCoprime y z :=\n  isCoprime_comm.trans <| (isCoprime_group_smul_left x z y).trans isCoprime_comm\n#align is_coprime_group_smul_right isCoprime_group_smul_right\n-/\n\n",
 "isCoprime_group_smul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print isCoprime_group_smul_left /-\ntheorem isCoprime_group_smul_left : IsCoprime («expr • » x y) z ↔ IsCoprime y z :=\n  ⟨fun ⟨a, b, h⟩ => ⟨«expr • » x a, b, by rwa [smul_mul_assoc, ← mul_smul_comm]⟩, fun ⟨a, b, h⟩ =>\n    ⟨«expr • » x⁻¹ a, b, by rwa [smul_mul_smul, inv_mul_self, one_smul]⟩⟩\n#align is_coprime_group_smul_left isCoprime_group_smul_left\n-/\n\n",
 "isCoprime_group_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print isCoprime_group_smul /-\ntheorem isCoprime_group_smul : IsCoprime («expr • » x y) («expr • » x z) ↔ IsCoprime y z :=\n  (isCoprime_group_smul_left x y («expr • » x z)).trans (isCoprime_group_smul_right x y z)\n#align is_coprime_group_smul isCoprime_group_smul\n-/\n\n",
 "isCoprime_comm":
 "#print isCoprime_comm /-\ntheorem isCoprime_comm : IsCoprime x y ↔ IsCoprime y x :=\n  ⟨IsCoprime.symm, IsCoprime.symm⟩\n#align is_coprime_comm isCoprime_comm\n-/\n\n",
 "dvd_of_dvd_mul_right":
 "#print IsCoprime.dvd_of_dvd_mul_right /-\ntheorem IsCoprime.dvd_of_dvd_mul_right (H1 : IsCoprime x z) (H2 : x ∣ y * z) : x ∣ y :=\n  by\n  let ⟨a, b, H⟩ := H1\n  rw [← mul_one y, ← H, mul_add, ← mul_assoc, mul_left_comm]\n  exact dvd_add (dvd_mul_left _ _) (H2.mul_left _)\n#align is_coprime.dvd_of_dvd_mul_right IsCoprime.dvd_of_dvd_mul_right\n-/\n\n",
 "dvd_of_dvd_mul_left":
 "#print IsCoprime.dvd_of_dvd_mul_left /-\ntheorem IsCoprime.dvd_of_dvd_mul_left (H1 : IsCoprime x y) (H2 : x ∣ y * z) : x ∣ z :=\n  by\n  let ⟨a, b, H⟩ := H1\n  rw [← one_mul z, ← H, add_mul, mul_right_comm, mul_assoc b]\n  exact dvd_add (dvd_mul_left _ _) (H2.mul_left _)\n#align is_coprime.dvd_of_dvd_mul_left IsCoprime.dvd_of_dvd_mul_left\n-/\n\n",
 "add_mul_right_right_iff":
 "theorem add_mul_right_right_iff {x y z : R} : IsCoprime x (y + z * x) ↔ IsCoprime x y :=\n  ⟨of_add_mul_right_right, fun h => h.add_mul_right_right z⟩\n#align add_mul_right_right_iff add_mul_right_right_iff\n\n",
 "add_mul_right_right":
 "theorem add_mul_right_right {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime x (y + z * x) :=\n  by\n  rw [isCoprime_comm]\n  exact h.symm.add_mul_right_left z\n#align add_mul_right_right add_mul_right_right\n\n",
 "add_mul_right_left_iff":
 "theorem add_mul_right_left_iff {x y z : R} : IsCoprime (x + z * y) y ↔ IsCoprime x y :=\n  ⟨of_add_mul_right_left, fun h => h.add_mul_right_left z⟩\n#align add_mul_right_left_iff add_mul_right_left_iff\n\n",
 "add_mul_right_left":
 "theorem add_mul_right_left {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime (x + z * y) y :=\n  by\n  rw [mul_comm]\n  exact h.add_mul_left_left z\n#align add_mul_right_left add_mul_right_left\n\n",
 "add_mul_left_right_iff":
 "theorem add_mul_left_right_iff {x y z : R} : IsCoprime x (y + x * z) ↔ IsCoprime x y :=\n  ⟨of_add_mul_left_right, fun h => h.add_mul_left_right z⟩\n#align add_mul_left_right_iff add_mul_left_right_iff\n\n",
 "add_mul_left_right":
 "theorem add_mul_left_right {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime x (y + x * z) :=\n  by\n  rw [isCoprime_comm]\n  exact h.symm.add_mul_left_left z\n#align add_mul_left_right add_mul_left_right\n\n",
 "add_mul_left_left_iff":
 "theorem add_mul_left_left_iff {x y z : R} : IsCoprime (x + y * z) y ↔ IsCoprime x y :=\n  ⟨of_add_mul_left_left, fun h => h.add_mul_left_left z⟩\n#align add_mul_left_left_iff add_mul_left_left_iff\n\n",
 "add_mul_left_left":
 "theorem add_mul_left_left {x y : R} (h : IsCoprime x y) (z : R) : IsCoprime (x + y * z) y :=\n  @of_add_mul_left_left R _ _ _ (-z) <| by simpa only [mul_neg, add_neg_cancel_right] using h\n#align add_mul_left_left add_mul_left_left\n\n"}