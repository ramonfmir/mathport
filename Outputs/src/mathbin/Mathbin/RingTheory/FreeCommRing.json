{"restriction_of":
 "@[simp]\ntheorem restriction_of (p) : restriction s (of p) = if H : p ∈ s then of ⟨p, H⟩ else 0 :=\n  lift_of _ _\n#align restriction_of restriction_of\n\n",
 "of_injective":
 "/-\nCopyright (c) 2019 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Johan Commelin\n-/\ntheorem of_injective : function.injective (of : α → free_comm_ring α) :=\n  FreeAbelianGroup.of_injective.comp fun x y => (Multiset.coe_eq_coe.trans List.singleton_perm_singleton).mp\n#align of_injective of_injective\n\n",
 "map_subtype_val_restriction":
 "theorem map_subtype_val_restriction {x} (s : Set α) [DecidablePred (· ∈ s)] (hxs : is_supported x s) :\n    map (Subtype.val : s → α) (restriction s x) = x :=\n  by\n  refine' Subring.InClosure.recOn hxs _ _ _ _\n  · rw [RingHom.map_one]\n    rfl\n  · rw [RingHom.map_neg, RingHom.map_neg, RingHom.map_one]\n    rfl\n  · rintro _ ⟨p, hps, rfl⟩ n ih\n    rw [RingHom.map_mul, restriction_of, dif_pos hps, RingHom.map_mul, map_of, ih]\n  · intro x y ihx ihy\n    rw [RingHom.map_add, RingHom.map_add, ihx, ihy]\n#align map_subtype_val_restriction map_subtype_val_restriction\n\n",
 "map_of":
 "@[simp]\ntheorem map_of (x : α) : map f (of x) = of (f x) :=\n  lift_of _ _\n#align map_of map_of\n\n",
 "lift_of":
 "@[simp]\ntheorem lift_of (x : α) : lift f (of x) = f x :=\n  (FreeAbelianGroup.lift.of _ _).trans <| mul_one _\n#align lift_of lift_of\n\n",
 "lift_comp_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem lift_comp_of (f : «expr →+* » (free_comm_ring α) R) : lift (f ∘ of) = f :=\n  RingHom.ext fun x =>\n    free_comm_ring.induction_on x (by rw [RingHom.map_neg, RingHom.map_one, f.map_neg, f.map_one]) (lift_of _)\n      (fun x y ihx ihy => by rw [RingHom.map_add, f.map_add, ihx, ihy]) fun x y ihx ihy => by\n      rw [RingHom.map_mul, f.map_mul, ihx, ihy]\n#align lift_comp_of lift_comp_of\n\n",
 "is_supported_zero":
 "theorem is_supported_zero : is_supported 0 s :=\n  Subring.zero_mem _\n#align is_supported_zero is_supported_zero\n\n",
 "is_supported_upwards":
 "theorem is_supported_upwards (hs : is_supported x s) (hst : s ⊆ t) : is_supported x t :=\n  Subring.closure_mono (Set.monotone_image hst) hs\n#align is_supported_upwards is_supported_upwards\n\n",
 "is_supported_sub":
 "theorem is_supported_sub (hxs : is_supported x s) (hys : is_supported y s) : is_supported (x - y) s :=\n  Subring.sub_mem _ hxs hys\n#align is_supported_sub is_supported_sub\n\n",
 "is_supported_one":
 "theorem is_supported_one : is_supported 1 s :=\n  Subring.one_mem _\n#align is_supported_one is_supported_one\n\n",
 "is_supported_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem is_supported_of {p} {s : Set α} : is_supported (of p) s ↔ p ∈ s :=\n  suffices is_supported (of p) s → p ∈ s from ⟨this, fun hps => Subring.subset_closure ⟨p, hps, rfl⟩⟩\n  fun hps : is_supported (of p) s => by\n  haveI := Classical.decPred s\n  have : ∀ x, is_supported x s → ∃ n : ℤ, lift (fun a => if a ∈ s then (0 : polynomial ℤ) else Polynomial.X) x = n :=\n    by\n    intro x hx\n    refine' Subring.InClosure.recOn hx _ _ _ _\n    · use 1\n      rw [RingHom.map_one]\n      norm_cast\n    · use -1\n      rw [RingHom.map_neg, RingHom.map_one, Int.cast_neg, Int.cast_one]\n    · rintro _ ⟨z, hzs, rfl⟩ _ _\n      use 0\n      rw [RingHom.map_mul, lift_of, if_pos hzs, MulZeroClass.zero_mul]\n      norm_cast\n    · rintro x y ⟨q, hq⟩ ⟨r, hr⟩\n      refine' ⟨q + r, _⟩\n      rw [RingHom.map_add, hq, hr]\n      norm_cast\n  specialize this (of p) hps\n  rw [lift_of] at this\n  split_ifs  at this\n  · exact h\n  exfalso\n  apply ne.symm int.zero_ne_one\n  rcases this with ⟨w, H⟩\n  rw [← Polynomial.C_eq_int_cast] at H\n  have : polynomial.X.coeff 1 = (Polynomial.C ↑w).coeff 1 := by rw [H]\n  rwa [Polynomial.coeff_C, if_neg (one_ne_zero : 1 ≠ 0), Polynomial.coeff_X, if_pos rfl] at this\n#align is_supported_of is_supported_of\n\n",
 "is_supported_neg":
 "theorem is_supported_neg (hxs : is_supported x s) : is_supported (-x) s :=\n  Subring.neg_mem _ hxs\n#align is_supported_neg is_supported_neg\n\n",
 "is_supported_mul":
 "theorem is_supported_mul (hxs : is_supported x s) (hys : is_supported y s) : is_supported (x * y) s :=\n  Subring.mul_mem _ hxs hys\n#align is_supported_mul is_supported_mul\n\n",
 "is_supported_int":
 "theorem is_supported_int {i : ℤ} {s : Set α} : is_supported (↑i) s :=\n  Int.induction_on i is_supported_zero\n    (fun i hi => by rw [Int.cast_add, Int.cast_one] <;> exact is_supported_add hi is_supported_one) fun i hi => by\n    rw [Int.cast_sub, Int.cast_one] <;> exact is_supported_sub hi is_supported_one\n#align is_supported_int is_supported_int\n\n",
 "is_supported_add":
 "theorem is_supported_add (hxs : is_supported x s) (hys : is_supported y s) : is_supported (x + y) s :=\n  Subring.add_mem _ hxs hys\n#align is_supported_add is_supported_add\n\n",
 "induction_on":
 "@[elab_as_elim]\nprotected theorem induction_on {C : free_comm_ring α → Prop} (z : free_comm_ring α) (hn1 : C (-1)) (hb : ∀ b, C (of b))\n    (ha : ∀ x y, C x → C y → C (x + y)) (hm : ∀ x y, C x → C y → C (x * y)) : C z :=\n  have hn : ∀ x, C x → C (-x) := fun x ih => neg_one_mul x ▸ hm _ _ hn1 ih\n  have h1 : C 1 := neg_neg (1 : free_comm_ring α) ▸ hn _ hn1\n  FreeAbelianGroup.induction_on z (add_left_neg (1 : free_comm_ring α) ▸ ha _ _ hn1 h1)\n    (fun m => Multiset.induction_on m h1 fun a m ih => hm _ _ (hb a) ih) (fun m ih => hn _ ih) ha\n#align induction_on induction_on\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[ext]\ntheorem hom_ext ⦃f g : «expr →+* » (free_comm_ring α) R⦄ (h : ∀ x, f (of x) = g (of x)) : f = g :=\n  lift.symm.injective (funext h)\n#align hom_ext hom_ext\n\n",
 "exists_finset_support":
 "theorem exists_finset_support (x : free_comm_ring α) : ∃ s : Finset α, is_supported x ↑s :=\n  let ⟨s, hfs, hxs⟩ := exists_finite_support x\n  ⟨hfs.to_finset, by rwa [Set.Finite.coe_toFinset]⟩\n#align exists_finset_support exists_finset_support\n\n",
 "exists_finite_support":
 "theorem exists_finite_support (x : free_comm_ring α) : ∃ s : Set α, Set.Finite s ∧ is_supported x s :=\n  free_comm_ring.induction_on x ⟨∅, Set.finite_empty, is_supported_neg is_supported_one⟩\n    (fun p => ⟨{p}, Set.finite_singleton p, is_supported_of.2 <| Set.mem_singleton _⟩)\n    (fun x y ⟨s, hfs, hxs⟩ ⟨t, hft, hxt⟩ =>\n      ⟨s ∪ t, hfs.union hft,\n        is_supported_add (is_supported_upwards hxs <| Set.subset_union_left s t)\n          (is_supported_upwards hxt <| Set.subset_union_right s t)⟩)\n    fun x y ⟨s, hfs, hxs⟩ ⟨t, hft, hxt⟩ =>\n    ⟨s ∪ t, hfs.union hft,\n      is_supported_mul (is_supported_upwards hxs <| Set.subset_union_left s t)\n        (is_supported_upwards hxt <| Set.subset_union_right s t)⟩\n#align exists_finite_support exists_finite_support\n\n",
 "coe_zero":
 "@[simp, norm_cast]\nprotected theorem coe_zero : ↑(0 : FreeRing α) = (0 : free_comm_ring α) :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_surjective":
 "protected theorem coe_surjective : surjective (coe : FreeRing α → free_comm_ring α) := fun x =>\n  by\n  apply free_comm_ring.induction_on x\n  · use -1\n    rfl\n  · intro x\n    use FreeRing.of x\n    rfl\n  · rintro _ _ ⟨x, rfl⟩ ⟨y, rfl⟩\n    use x + y\n    exact (FreeRing.lift _).map_add _ _\n  · rintro _ _ ⟨x, rfl⟩ ⟨y, rfl⟩\n    use x * y\n    exact (FreeRing.lift _).map_mul _ _\n#align coe_surjective coe_surjective\n\n",
 "coe_sub":
 "@[simp, norm_cast]\nprotected theorem coe_sub (x y : FreeRing α) : ↑(x - y) = (x : free_comm_ring α) - y :=\n  (FreeRing.lift _).map_sub _ _\n#align coe_sub coe_sub\n\n",
 "coe_one":
 "@[simp, norm_cast]\nprotected theorem coe_one : ↑(1 : FreeRing α) = (1 : free_comm_ring α) :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_of":
 "@[simp]\nprotected theorem coe_of (a : α) : ↑(FreeRing.of a) = free_comm_ring.of a :=\n  FreeRing.lift_of _ _\n#align coe_of coe_of\n\n",
 "coe_neg":
 "@[simp, norm_cast]\nprotected theorem coe_neg (x : FreeRing α) : ↑(-x) = -(x : free_comm_ring α) :=\n  (FreeRing.lift _).map_neg _\n#align coe_neg coe_neg\n\n",
 "coe_mul":
 "@[simp, norm_cast]\nprotected theorem coe_mul (x y : FreeRing α) : ↑(x * y) = (x : free_comm_ring α) * y :=\n  (FreeRing.lift _).map_mul _ _\n#align coe_mul coe_mul\n\n",
 "coe_eq":
 "theorem coe_eq :\n    (coe : FreeRing α → free_comm_ring α) = @functor.map FreeAbelianGroup _ _ _ fun l : List α => (l : Multiset α) :=\n  funext fun x =>\n    FreeAbelianGroup.lift.unique _ _ fun L =>\n      by\n      simp_rw [FreeAbelianGroup.lift.of, (· ∘ ·)]\n      exact\n        FreeMonoid.recOn L rfl fun hd tl ih =>\n          by\n          rw [(FreeMonoid.lift _).map_mul, FreeMonoid.lift_eval_of, ih]\n          rfl\n#align coe_eq coe_eq\n\n",
 "coe_add":
 "@[simp, norm_cast]\nprotected theorem coe_add (x y : FreeRing α) : ↑(x + y) = (x : free_comm_ring α) + y :=\n  (FreeRing.lift _).map_add _ _\n#align coe_add coe_add\n\n"}