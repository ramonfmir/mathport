{"to_inv_submonoid_surjective":
 "theorem to_inv_submonoid_surjective : function.surjective (to_inv_submonoid M S) :=\n  function.surjective.comp (Equiv.surjective _) (MonoidHom.submonoidMap_surjective _ _)\n#align to_inv_submonoid_surjective to_inv_submonoid_surjective\n\n",
 "to_inv_submonoid_mul":
 "@[simp]\ntheorem to_inv_submonoid_mul (m : M) : (to_inv_submonoid M S m : S) * algebra_map R S m = 1 :=\n  submonoid.left_inv_equiv_symm_mul _ _ _\n#align to_inv_submonoid_mul to_inv_submonoid_mul\n\n",
 "to_inv_submonoid_eq_mk'":
 "theorem to_inv_submonoid_eq_mk' (x : M) : (to_inv_submonoid M S x : S) = mk' S 1 x :=\n  by\n  rw [← (is_localization.map_units S x).mul_left_inj]\n  simp\n#align to_inv_submonoid_eq_mk' to_inv_submonoid_eq_mk'\n\n",
 "surj'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem surj' (z : S) : ∃ (r : R)(m : M), z = «expr • » r (to_inv_submonoid M S m) :=\n  by\n  rcases is_localization.surj M z with ⟨⟨r, m⟩, e : z * _ = algebra_map R S r⟩\n  refine' ⟨r, m, _⟩\n  rw [algebra.smul_def, ← e, mul_assoc]\n  simp\n#align surj' surj'\n\n",
 "submonoid_map_le_is_unit":
 "/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Mario Carneiro, Johan Commelin, Amelia Livingston, Anne Baanen\n-/\ntheorem submonoid_map_le_is_unit : M.map (algebra_map R S) ≤ IsUnit.submonoid S :=\n  by\n  rintro _ ⟨a, ha, rfl⟩\n  exact is_localization.map_units S ⟨_, ha⟩\n#align submonoid_map_le_is_unit submonoid_map_le_is_unit\n\n",
 "span_inv_submonoid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem span_inv_submonoid : submodule.span R (inv_submonoid M S : set S) = «expr⊤» :=\n  by\n  rw [eq_top_iff]\n  rintro x -\n  rcases is_localization.surj' M x with ⟨r, m, rfl⟩\n  exact submodule.smul_mem _ _ (submodule.subset_span (to_inv_submonoid M S m).prop)\n#align span_inv_submonoid span_inv_submonoid\n\n",
 "smul_to_inv_submonoid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_to_inv_submonoid (m : M) : «expr • » m (to_inv_submonoid M S m : S) = 1 :=\n  by\n  convert mul_to_inv_submonoid M S m\n  rw [← algebra.smul_def]\n  rfl\n#align smul_to_inv_submonoid smul_to_inv_submonoid\n\n",
 "mul_to_inv_submonoid":
 "@[simp]\ntheorem mul_to_inv_submonoid (m : M) : algebra_map R S m * (to_inv_submonoid M S m : S) = 1 :=\n  submonoid.mul_left_inv_equiv_symm _ _ ⟨_, _⟩\n#align mul_to_inv_submonoid mul_to_inv_submonoid\n\n",
 "mem_inv_submonoid_iff_exists_mk'":
 "theorem mem_inv_submonoid_iff_exists_mk' (x : S) : x ∈ inv_submonoid M S ↔ ∃ m : M, mk' S 1 m = x :=\n  by\n  simp_rw [← to_inv_submonoid_eq_mk']\n  exact\n    ⟨fun h => ⟨_, congr_arg subtype.val (to_inv_submonoid_surjective M S ⟨x, h⟩).some_spec⟩, fun h =>\n      h.some_spec ▸ (to_inv_submonoid M S h.some).prop⟩\n#align mem_inv_submonoid_iff_exists_mk' mem_inv_submonoid_iff_exists_mk'\n\n",
 "finite_type_of_monoid_fg":
 "theorem finite_type_of_monoid_fg [monoid.fg M] : algebra.finite_type R S :=\n  by\n  have := monoid.fg_of_surjective _ (to_inv_submonoid_surjective M S)\n  rw [monoid.fg_iff_submonoid_fg] at this\n  rcases this with ⟨s, hs⟩\n  refine' ⟨⟨s, _⟩⟩\n  rw [eq_top_iff]\n  rintro x -\n  change x ∈ ((algebra.adjoin R _ : subalgebra R S).to_submodule : set S)\n  rw [algebra.adjoin_eq_span, hs, span_inv_submonoid]\n  trivial\n#align finite_type_of_monoid_fg finite_type_of_monoid_fg\n\n"}