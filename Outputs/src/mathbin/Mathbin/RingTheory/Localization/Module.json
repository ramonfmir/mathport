{"localization":
 "/-\nCopyright (c) 2022 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Junyan Xu, Anne Baanen\n-/\ntheorem linear_independent.localization {ι : Type _} {b : ι → M} (hli : linear_independent R b) :\n    linear_independent Rₛ b := by\n  rw [linear_independent_iff'] at hli⊢\n  intro s g hg i hi\n  choose a g' hg' using is_localization.exist_integer_multiples S s g\n  letI := fun i => classical.prop_decidable (i ∈ s)\n  specialize hli s (fun i => if hi : i ∈ s then g' i hi else 0) _ i hi\n  · rw [← @smul_zero _ M _ _ (a : R), ← hg, finset.smul_sum]\n    refine' finset.sum_congr rfl fun i hi => _\n    dsimp only\n    rw [dif_pos hi, ← is_scalar_tower.algebra_map_smul Rₛ, hg' i hi, smul_assoc]\n    infer_instance\n  refine' (is_localization.map_units Rₛ a).mul_right_eq_zero.mp _\n  rw [← algebra.smul_def, ← map_zero (algebra_map R Rₛ), ← hli]\n  simp [hi, hg']\n#align linear_independent.localization linear_independent.localization\n\n",
 "iff_fraction_ring":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem linear_independent.iff_fraction_ring {ι : Type _} {b : ι → V} :\n    linear_independent R b ↔ linear_independent K b :=\n  ⟨linear_independent.localization K (non_zero_divisors R),\n    linear_independent.restrict_scalars (smul_left_injective R one_ne_zero)⟩\n#align linear_independent.iff_fraction_ring linear_independent.iff_fraction_ring\n\n"}