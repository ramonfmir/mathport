{"to_map_ne_zero_of_mem_non_zero_divisors":
 "protected theorem to_map_ne_zero_of_mem_non_zero_divisors [Nontrivial R] {x : R} (hx : x ∈ nonZeroDivisors R) :\n    algebraMap R K x ≠ 0 :=\n  IsLocalization.to_map_ne_zero_of_mem_nonZeroDivisors _ le_rfl hx\n#align to_map_ne_zero_of_mem_non_zero_divisors to_map_ne_zero_of_mem_non_zero_divisors\n\n",
 "to_map_eq_zero_iff":
 "/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Mario Carneiro, Johan Commelin, Amelia Livingston, Anne Baanen\n-/\n-- TODO: should this extend `algebra` instead of assuming it?\ntheorem to_map_eq_zero_iff {x : R} : algebraMap R K x = 0 ↔ x = 0 :=\n  to_map_eq_zero_iff _ (le_of_eq rfl)\n#align to_map_eq_zero_iff to_map_eq_zero_iff\n\n",
 "mul_inv_cancel":
 "#print mul_inv_cancel /-\nprotected theorem mul_inv_cancel (x : K) (hx : x ≠ 0) : x * IsFractionRing.inv A x = 1 :=\n  by\n  rw [IsFractionRing.inv, dif_neg hx, ←\n    IsUnit.mul_left_inj\n      (map_units K\n        ⟨(sec _ x).1,\n          mem_nonZeroDivisors_iff_ne_zero.2 fun h0 =>\n            hx <| eq_zero_of_fst_eq_zero (sec_spec (nonZeroDivisors A) x) h0⟩),\n    one_mul, mul_assoc]\n  rw [mk'_spec, ← eq_mk'_iff_mul_eq]\n  exact (mk'_sec _ x).symm\n#align mul_inv_cancel mul_inv_cancel\n-/\n\n",
 "mk_eq_div":
 "@[simp]\ntheorem mk_eq_div {r s} :\n    (Localization.mk r s : FractionRing A) = (algebraMap _ _ r / algebraMap A _ s : FractionRing A) := by\n  rw [Localization.mk_eq_mk', IsFractionRing.mk'_eq_div]\n#align mk_eq_div mk_eq_div\n\n",
 "mk'_mk_eq_div":
 "theorem mk'_mk_eq_div {r s} (hs : s ∈ nonZeroDivisors A) : mk' K r ⟨s, hs⟩ = algebraMap A K r / algebraMap A K s :=\n  mk'_eq_iff_eq_mul.2 <|\n    (div_mul_cancel (algebraMap A K r) (IsFractionRing.to_map_ne_zero_of_mem_nonZeroDivisors hs)).symm\n#align mk'_mk_eq_div mk'_mk_eq_div\n\n",
 "mk'_eq_zero_iff_eq_zero":
 "@[simp]\ntheorem mk'_eq_zero_iff_eq_zero [Algebra R K] [IsFractionRing R K] {x : R} {y : nonZeroDivisors R} :\n    mk' K x y = 0 ↔ x = 0 := by\n  refine' ⟨fun hxy => _, fun h => by rw [h, mk'_zero]⟩\n  · simp_rw [mk'_eq_zero_iff, mul_left_coe_nonZeroDivisors_eq_zero_iff] at hxy\n    exact (exists_const _).mp hxy\n#align mk'_eq_zero_iff_eq_zero mk'_eq_zero_iff_eq_zero\n\n",
 "mk'_eq_one_iff_eq":
 "theorem mk'_eq_one_iff_eq {x : A} {y : nonZeroDivisors A} : mk' K x y = 1 ↔ x = y :=\n  by\n  refine' ⟨_, fun hxy => by rw [hxy, mk'_self']⟩\n  · intro hxy\n    have hy : (algebraMap A K) ↑y ≠ (0 : K) := IsFractionRing.to_map_ne_zero_of_mem_nonZeroDivisors y.property\n    rw [IsFractionRing.mk'_eq_div, div_eq_one_iff_eq hy] at hxy\n    exact IsFractionRing.injective A K hxy\n#align mk'_eq_one_iff_eq mk'_eq_one_iff_eq\n\n",
 "mk'_eq_div":
 "@[simp]\ntheorem mk'_eq_div {r} (s : nonZeroDivisors A) : mk' K r s = algebraMap A K r / algebraMap A K s :=\n  mk'_mk_eq_div s.2\n#align mk'_eq_div mk'_eq_div\n\n",
 "lift_mk'":
 "/-- Given an integral domain `A` with field of fractions `K`,\nand an injective ring hom `g : A →+* L` where `L` is a field,\nfield hom induced from `K` to `L` maps `f x / f y` to `g x / g y` for all\n`x : A, y ∈ non_zero_divisors A`. -/\ntheorem lift_mk' (hg : injective g) (x) (y : nonZeroDivisors A) : lift hg (mk' K x y) = g x / g y := by\n  simp only [mk'_eq_div, map_div₀, lift_algebra_map]\n#align lift_mk' lift_mk'\n\n",
 "lift_algebra_map":
 "/-- Given an integral domain `A` with field of fractions `K`,\nand an injective ring hom `g : A →+* L` where `L` is a field,\nthe field hom induced from `K` to `L` maps `x` to `g x` for all\n`x : A`. -/\n@[simp]\ntheorem lift_algebra_map (hg : injective g) (x) : lift hg (algebraMap A K x) = g x :=\n  lift_eq _ _\n#align lift_algebra_map lift_algebra_map\n\n",
 "is_unit_map_of_injective":
 "theorem is_unit_map_of_injective (hg : function.injective g) (y : nonZeroDivisors A) : IsUnit (g y) :=\n  IsUnit.mk0 (g y) <| show g.to_monoid_with_zero_hom y ≠ 0 from map_ne_zero_of_mem_nonZeroDivisors g hg y.2\n#align is_unit_map_of_injective is_unit_map_of_injective\n\n",
 "is_fraction_ring_iff_of_base_ring_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\ntheorem is_fraction_ring_iff_of_base_ring_equiv (h : «expr ≃+* » R P) :\n    IsFractionRing R S ↔ @IsFractionRing P _ S _ ((algebraMap R S).comp h.symm.to_ring_hom).to_algebra :=\n  by\n  delta IsFractionRing\n  convert is_localization_iff_of_base_ring_equiv _ _ h\n  ext x\n  erw [Submonoid.map_equiv_eq_comap_symm]\n  simp only [MulEquiv.coe_toMonoidHom, RingEquiv.toMulEquiv_eq_coe, Submonoid.mem_comap]\n  constructor\n  · rintro hx z (hz : z * h.symm x = 0)\n    rw [← h.map_eq_zero_iff]\n    apply hx\n    simpa only [h.map_zero, h.apply_symm_apply, h.map_mul] using congr_arg h hz\n  · rintro (hx : h.symm x ∈ _) z hz\n    rw [← h.symm.map_eq_zero_iff]\n    apply hx\n    rw [← h.symm.map_mul, hz, h.symm.map_zero]\n#align is_fraction_ring_iff_of_base_ring_equiv is_fraction_ring_iff_of_base_ring_equiv\n\n",
 "injective":
 "protected theorem injective : function.injective (algebraMap R K) :=\n  IsLocalization.injective _ (le_of_eq rfl)\n#align injective injective\n\n",
 "div_surjective":
 "theorem div_surjective (z : K) : ∃ (x y : A)(hy : y ∈ nonZeroDivisors A), algebraMap _ _ x / algebraMap _ _ y = z :=\n  let ⟨x, ⟨y, hy⟩, h⟩ := mk'_surjective (nonZeroDivisors A) z\n  ⟨x, y, hy, by rwa [mk'_eq_div] at h⟩\n#align div_surjective div_surjective\n\n",
 "coe_inj":
 "@[norm_cast, simp]\ntheorem coe_inj {a b : R} : (↑a : K) = ↑b ↔ a = b :=\n  (IsFractionRing.injective R K).eq_iff\n#align coe_inj coe_inj\n\n",
 "Nontrivial":
 "#print Nontrivial /-\nprotected theorem Nontrivial (R S : Type _) [CommRing R] [Nontrivial R] [CommRing S] [Algebra R S]\n    [IsFractionRing R S] : Nontrivial S := by\n  apply nontrivial_of_ne\n  intro h\n  apply @zero_ne_one R\n  exact\n    IsLocalization.injective S (le_of_eq rfl) (((algebraMap R S).map_zero.trans h).trans (algebraMap R S).map_one.symm)\n#align nontrivial Nontrivial\n-/\n\n",
 "IsDomain":
 "#print IsDomain /-\n/-- A `comm_ring` `K` which is the localization of an integral domain `R` at `R - {0}` is an\nintegral domain. -/\nprotected theorem IsDomain : IsDomain K :=\n  isDomain_of_le_nonZeroDivisors _ (le_refl (nonZeroDivisors A))\n#align is_domain IsDomain\n-/\n\n"}