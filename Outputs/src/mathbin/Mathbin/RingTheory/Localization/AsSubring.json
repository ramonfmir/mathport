{"mem_range_map_to_fraction_ring_iff_of_field":
 "theorem mem_range_map_to_fraction_ring_iff_of_field (B : Type _) [CommRing B] [algebra A B] [is_localization S B]\n    (x : K) :\n    x ∈ (map_to_fraction_ring K S B hS).range ↔\n      ∃ (a s : A)(hs : s ∈ S), x = algebra_map A K a * (algebra_map A K s)⁻¹ :=\n  by\n  rw [mem_range_map_to_fraction_ring_iff]\n  iterate 3 congr with ; convert iff.rfl; rw [Units.val_inv_eq_inv_val]; rfl\n#align mem_range_map_to_fraction_ring_iff_of_field mem_range_map_to_fraction_ring_iff_of_field\n\n",
 "mem_range_map_to_fraction_ring_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem mem_range_map_to_fraction_ring_iff (B : Type _) [CommRing B] [algebra A B] [is_localization S B]\n    (hS : S ≤ non_zero_divisors A) (x : K) :\n    x ∈ (map_to_fraction_ring K S B hS).range ↔ ∃ (a s : A)(hs : s ∈ S), x = is_localization.mk' K a ⟨s, hS hs⟩ :=\n  ⟨by\n    rintro ⟨x, rfl⟩\n    obtain ⟨a, s, rfl⟩ := is_localization.mk'_surjective S x\n    use a, s, s.2\n    apply is_localization.lift_mk', by\n    rintro ⟨a, s, hs, rfl⟩\n    use is_localization.mk' _ a ⟨s, hs⟩\n    apply is_localization.lift_mk'⟩\n#align mem_range_map_to_fraction_ring_iff mem_range_map_to_fraction_ring_iff\n\n",
 "map_to_fraction_ring_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n@[simp]\ntheorem map_to_fraction_ring_apply {B : Type _} [CommRing B] [algebra A B] [is_localization S B]\n    (hS : S ≤ non_zero_divisors A) (b : B) :\n    map_to_fraction_ring K S B hS b = is_localization.lift (map_is_unit_of_le K S hS) b :=\n  rfl\n#align map_to_fraction_ring_apply map_to_fraction_ring_apply\n\n",
 "map_is_unit_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/-\nCopyright (c) 2022 Adam Topaz. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Adam Topaz, Junyan Xu\n-/\ntheorem map_is_unit_of_le (hS : S ≤ non_zero_divisors A) (s : S) : is_unit (algebra_map A K s) := by\n  apply is_localization.map_units K (⟨s.1, hS s.2⟩ : non_zero_divisors A)\n#align map_is_unit_of_le map_is_unit_of_le\n\n"}