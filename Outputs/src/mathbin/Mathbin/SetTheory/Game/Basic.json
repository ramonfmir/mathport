{"zero_mul_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `0 * x` is equivalent to `0`. -/\ntheorem zero_mul_equiv (x : pgame) : pgame.equiv (0 * x) 0 :=\n  (zero_mul_relabelling x).equiv\n#align zero_mul_equiv zero_mul_equiv\n\n",
 "zero_lf_inv'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem zero_lf_inv' : ∀ x : pgame, pgame.lf 0 (inv' x)\n  | ⟨xl, xr, xL, xR⟩ => by\n    convert lf_mk _ _ inv_ty.zero\n    rfl\n#align zero_lf_inv' zero_lf_inv'\n\n",
 "right_moves_mul_cases":
 "theorem right_moves_mul_cases {x y : pgame} (k) {P : (x * y).right_moves → Prop}\n    (hl : ∀ ix jy, P <| to_right_moves_mul (sum.inl ⟨ix, jy⟩))\n    (hr : ∀ jx iy, P <| to_right_moves_mul (sum.inr ⟨jx, iy⟩)) : P k :=\n  by\n  rw [← to_right_moves_mul.apply_symm_apply k]\n  rcases to_right_moves_mul.symm k with (⟨ix, iy⟩ | ⟨jx, jy⟩)\n  · apply hl\n  · apply hr\n#align right_moves_mul_cases right_moves_mul_cases\n\n",
 "right_moves_mul":
 "theorem right_moves_mul :\n    ∀ x y : pgame.{u}, (x * y).right_moves = Sum (x.left_moves × y.right_moves) (x.right_moves × y.left_moves)\n  | ⟨_, _, _, _⟩, ⟨_, _, _, _⟩ => rfl\n#align right_moves_mul right_moves_mul\n\n",
 "right_distrib_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `(x + y) * z` is equivalent to `x * z + y * z.`-/\ntheorem right_distrib_equiv (x y z : pgame) : pgame.equiv ((x + y) * z) (x * z + y * z) :=\n  quotient.exact <| quot_right_distrib _ _ _\n#align right_distrib_equiv right_distrib_equiv\n\n",
 "quot_zero_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_zero_mul (x : pgame) : «expr⟦ ⟧» (0 * x) = «expr⟦ ⟧» 0 :=\n  @quotient.sound _ _ (0 * x) _ x.zero_mul_equiv\n#align quot_zero_mul quot_zero_mul\n\n",
 "quot_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_sub (a b : pgame) : «expr⟦ ⟧» (a - b) = «expr⟦ ⟧» a - «expr⟦ ⟧» b :=\n  rfl\n#align quot_sub quot_sub\n\n",
 "quot_right_distrib_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_right_distrib_sub (x y z : pgame) : «expr⟦ ⟧» ((y - z) * x) = «expr⟦ ⟧» (y * x) - «expr⟦ ⟧» (z * x) :=\n  by\n  change «expr⟦ ⟧» ((y + -z) * x) = «expr⟦ ⟧» (y * x) + -«expr⟦ ⟧» (z * x)\n  rw [quot_right_distrib, quot_neg_mul]\n#align quot_right_distrib_sub quot_right_distrib_sub\n\n",
 "quot_right_distrib":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_right_distrib (x y z : pgame) : «expr⟦ ⟧» ((x + y) * z) = «expr⟦ ⟧» (x * z) + «expr⟦ ⟧» (y * z) := by\n  simp only [quot_mul_comm, quot_left_distrib]\n#align quot_right_distrib quot_right_distrib\n\n",
 "quot_one_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_one_mul (x : pgame) : «expr⟦ ⟧» (1 * x) = «expr⟦ ⟧» x :=\n  quot.sound <| one_mul_relabelling x\n#align quot_one_mul quot_one_mul\n\n",
 "quot_neg_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_neg_mul (x y : pgame) : «expr⟦ ⟧» (-x * y) = -«expr⟦ ⟧» (x * y) :=\n  quot.sound (neg_mul_relabelling x y).equiv\n#align quot_neg_mul quot_neg_mul\n\n",
 "quot_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_neg (a : pgame) : «expr⟦ ⟧» (-a) = -«expr⟦ ⟧» a :=\n  rfl\n#align quot_neg quot_neg\n\n",
 "quot_mul_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_mul_zero (x : pgame) : «expr⟦ ⟧» (x * 0) = «expr⟦ ⟧» 0 :=\n  @quotient.sound _ _ (x * 0) _ x.mul_zero_equiv\n#align quot_mul_zero quot_mul_zero\n\n",
 "quot_mul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_mul_one (x : pgame) : «expr⟦ ⟧» (x * 1) = «expr⟦ ⟧» x :=\n  quot.sound <| mul_one_relabelling x\n#align quot_mul_one quot_mul_one\n\n",
 "quot_mul_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_mul_neg (x y : pgame) : «expr⟦ ⟧» (x * -y) = -«expr⟦ ⟧» (x * y) :=\n  quot.sound (mul_neg_relabelling x y).equiv\n#align quot_mul_neg quot_mul_neg\n\n",
 "quot_mul_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem quot_mul_comm (x y : pgame.{u}) : «expr⟦ ⟧» (x * y) = «expr⟦ ⟧» (y * x) :=\n  quot.sound (mul_comm_relabelling x y).equiv\n#align quot_mul_comm quot_mul_comm\n\n",
 "quot_mul_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem quot_mul_assoc : ∀ x y z : pgame, «expr⟦ ⟧» (x * y * z) = «expr⟦ ⟧» (x * (y * z))\n  | mk xl xr xL xR, mk yl yr yL yR, mk zl zr zL zR =>\n    by\n    let x := mk xl xr xL xR\n    let y := mk yl yr yL yR\n    let z := mk zl zr zL zR\n    refine' quot_eq_of_mk_quot_eq _ _ _ _\n    · fconstructor\n      ·\n        rintro (⟨⟨_, _⟩ | ⟨_, _⟩, _⟩ | ⟨⟨_, _⟩ | ⟨_, _⟩, _⟩) <;>\n          solve_by_elim (config := { max_depth := 7 }) [sum.inl, sum.inr, prod.mk]\n      ·\n        rintro (⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩) <;>\n          solve_by_elim (config := { max_depth := 7 }) [sum.inl, sum.inr, prod.mk]\n      · rintro (⟨⟨_, _⟩ | ⟨_, _⟩, _⟩ | ⟨⟨_, _⟩ | ⟨_, _⟩, _⟩) <;> rfl\n      · rintro (⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩) <;> rfl\n    · fconstructor\n      ·\n        rintro (⟨⟨_, _⟩ | ⟨_, _⟩, _⟩ | ⟨⟨_, _⟩ | ⟨_, _⟩, _⟩) <;>\n          solve_by_elim (config := { max_depth := 7 }) [sum.inl, sum.inr, prod.mk]\n      ·\n        rintro (⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩) <;>\n          solve_by_elim (config := { max_depth := 7 }) [sum.inl, sum.inr, prod.mk]\n      · rintro (⟨⟨_, _⟩ | ⟨_, _⟩, _⟩ | ⟨⟨_, _⟩ | ⟨_, _⟩, _⟩) <;> rfl\n      · rintro (⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, ⟨_, _⟩ | ⟨_, _⟩⟩) <;> rfl\n    · rintro (⟨⟨i, j⟩ | ⟨i, j⟩, k⟩ | ⟨⟨i, j⟩ | ⟨i, j⟩, k⟩)\n      · change\n          «expr⟦ ⟧»\n              ((xL i * y + x * yL j - xL i * yL j) * z + x * y * zL k - (xL i * y + x * yL j - xL i * yL j) * zL k) =\n            «expr⟦ ⟧»\n              (xL i * (y * z) + x * (yL j * z + y * zL k - yL j * zL k) - xL i * (yL j * z + y * zL k - yL j * zL k))\n        simp [quot_mul_assoc]\n        abel\n      · change\n          «expr⟦ ⟧»\n              ((xR i * y + x * yR j - xR i * yR j) * z + x * y * zL k - (xR i * y + x * yR j - xR i * yR j) * zL k) =\n            «expr⟦ ⟧»\n              (xR i * (y * z) + x * (yR j * z + y * zL k - yR j * zL k) - xR i * (yR j * z + y * zL k - yR j * zL k))\n        simp [quot_mul_assoc]\n        abel\n      · change\n          «expr⟦ ⟧»\n              ((xL i * y + x * yR j - xL i * yR j) * z + x * y * zR k - (xL i * y + x * yR j - xL i * yR j) * zR k) =\n            «expr⟦ ⟧»\n              (xL i * (y * z) + x * (yR j * z + y * zR k - yR j * zR k) - xL i * (yR j * z + y * zR k - yR j * zR k))\n        simp [quot_mul_assoc]\n        abel\n      · change\n          «expr⟦ ⟧»\n              ((xR i * y + x * yL j - xR i * yL j) * z + x * y * zR k - (xR i * y + x * yL j - xR i * yL j) * zR k) =\n            «expr⟦ ⟧»\n              (xR i * (y * z) + x * (yL j * z + y * zR k - yL j * zR k) - xR i * (yL j * z + y * zR k - yL j * zR k))\n        simp [quot_mul_assoc]\n        abel\n    · rintro (⟨⟨i, j⟩ | ⟨i, j⟩, k⟩ | ⟨⟨i, j⟩ | ⟨i, j⟩, k⟩)\n      · change\n          «expr⟦ ⟧»\n              ((xL i * y + x * yL j - xL i * yL j) * z + x * y * zR k - (xL i * y + x * yL j - xL i * yL j) * zR k) =\n            «expr⟦ ⟧»\n              (xL i * (y * z) + x * (yL j * z + y * zR k - yL j * zR k) - xL i * (yL j * z + y * zR k - yL j * zR k))\n        simp [quot_mul_assoc]\n        abel\n      · change\n          «expr⟦ ⟧»\n              ((xR i * y + x * yR j - xR i * yR j) * z + x * y * zR k - (xR i * y + x * yR j - xR i * yR j) * zR k) =\n            «expr⟦ ⟧»\n              (xR i * (y * z) + x * (yR j * z + y * zR k - yR j * zR k) - xR i * (yR j * z + y * zR k - yR j * zR k))\n        simp [quot_mul_assoc]\n        abel\n      · change\n          «expr⟦ ⟧»\n              ((xL i * y + x * yR j - xL i * yR j) * z + x * y * zL k - (xL i * y + x * yR j - xL i * yR j) * zL k) =\n            «expr⟦ ⟧»\n              (xL i * (y * z) + x * (yR j * z + y * zL k - yR j * zL k) - xL i * (yR j * z + y * zL k - yR j * zL k))\n        simp [quot_mul_assoc]\n        abel\n      · change\n          «expr⟦ ⟧»\n              ((xR i * y + x * yL j - xR i * yL j) * z + x * y * zL k - (xR i * y + x * yL j - xR i * yL j) * zL k) =\n            «expr⟦ ⟧»\n              (xR i * (y * z) + x * (yL j * z + y * zL k - yL j * zL k) - xR i * (yL j * z + y * zL k - yL j * zL k))\n        simp [quot_mul_assoc]\n        abel decreasing_by pgame_wf_tac\n#align quot_mul_assoc quot_mul_assoc\n\n",
 "quot_left_distrib_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_left_distrib_sub (x y z : pgame) : «expr⟦ ⟧» (x * (y - z)) = «expr⟦ ⟧» (x * y) - «expr⟦ ⟧» (x * z) :=\n  by\n  change «expr⟦ ⟧» (x * (y + -z)) = «expr⟦ ⟧» (x * y) + -«expr⟦ ⟧» (x * z)\n  rw [quot_left_distrib, quot_mul_neg]\n#align quot_left_distrib_sub quot_left_distrib_sub\n\n",
 "quot_left_distrib":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_left_distrib : ∀ x y z : pgame, «expr⟦ ⟧» (x * (y + z)) = «expr⟦ ⟧» (x * y) + «expr⟦ ⟧» (x * z)\n  | mk xl xr xL xR, mk yl yr yL yR, mk zl zr zL zR =>\n    by\n    let x := mk xl xr xL xR\n    let y := mk yl yr yL yR\n    let z := mk zl zr zL zR\n    refine' quot_eq_of_mk_quot_eq _ _ _ _\n    · fconstructor\n      · rintro (⟨_, _ | _⟩ | ⟨_, _ | _⟩) <;> solve_by_elim (config := { max_depth := 5 }) [sum.inl, sum.inr, prod.mk]\n      ·\n        rintro (⟨⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, _⟩ | ⟨_, _⟩) <;>\n          solve_by_elim (config := { max_depth := 5 }) [sum.inl, sum.inr, prod.mk]\n      · rintro (⟨_, _ | _⟩ | ⟨_, _ | _⟩) <;> rfl\n      · rintro (⟨⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, _⟩ | ⟨_, _⟩) <;> rfl\n    · fconstructor\n      · rintro (⟨_, _ | _⟩ | ⟨_, _ | _⟩) <;> solve_by_elim (config := { max_depth := 5 }) [sum.inl, sum.inr, prod.mk]\n      ·\n        rintro (⟨⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, _⟩ | ⟨_, _⟩) <;>\n          solve_by_elim (config := { max_depth := 5 }) [sum.inl, sum.inr, prod.mk]\n      · rintro (⟨_, _ | _⟩ | ⟨_, _ | _⟩) <;> rfl\n      · rintro (⟨⟨_, _⟩ | ⟨_, _⟩⟩ | ⟨_, _⟩ | ⟨_, _⟩) <;> rfl\n    · rintro (⟨i, j | k⟩ | ⟨i, j | k⟩)\n      · change\n          «expr⟦ ⟧» (xL i * (y + z) + x * (yL j + z) - xL i * (yL j + z)) =\n            «expr⟦ ⟧» (xL i * y + x * yL j - xL i * yL j + x * z)\n        simp [quot_left_distrib]\n        abel\n      · change\n          «expr⟦ ⟧» (xL i * (y + z) + x * (y + zL k) - xL i * (y + zL k)) =\n            «expr⟦ ⟧» (x * y + (xL i * z + x * zL k - xL i * zL k))\n        simp [quot_left_distrib]\n        abel\n      · change\n          «expr⟦ ⟧» (xR i * (y + z) + x * (yR j + z) - xR i * (yR j + z)) =\n            «expr⟦ ⟧» (xR i * y + x * yR j - xR i * yR j + x * z)\n        simp [quot_left_distrib]\n        abel\n      · change\n          «expr⟦ ⟧» (xR i * (y + z) + x * (y + zR k) - xR i * (y + zR k)) =\n            «expr⟦ ⟧» (x * y + (xR i * z + x * zR k - xR i * zR k))\n        simp [quot_left_distrib]\n        abel\n    · rintro (⟨i, j | k⟩ | ⟨i, j | k⟩)\n      · change\n          «expr⟦ ⟧» (xL i * (y + z) + x * (yR j + z) - xL i * (yR j + z)) =\n            «expr⟦ ⟧» (xL i * y + x * yR j - xL i * yR j + x * z)\n        simp [quot_left_distrib]\n        abel\n      · change\n          «expr⟦ ⟧» (xL i * (y + z) + x * (y + zR k) - xL i * (y + zR k)) =\n            «expr⟦ ⟧» (x * y + (xL i * z + x * zR k - xL i * zR k))\n        simp [quot_left_distrib]\n        abel\n      · change\n          «expr⟦ ⟧» (xR i * (y + z) + x * (yL j + z) - xR i * (yL j + z)) =\n            «expr⟦ ⟧» (xR i * y + x * yL j - xR i * yL j + x * z)\n        simp [quot_left_distrib]\n        abel\n      · change\n          «expr⟦ ⟧» (xR i * (y + z) + x * (y + zL k) - xR i * (y + zL k)) =\n            «expr⟦ ⟧» (x * y + (xR i * z + x * zL k - xR i * zL k))\n        simp [quot_left_distrib]\n        abel decreasing_by pgame_wf_tac\n#align quot_left_distrib quot_left_distrib\n\n",
 "quot_eq_of_mk_quot_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem quot_eq_of_mk_quot_eq {x y : pgame} (L : «expr ≃ » x.left_moves y.left_moves)\n    (R : «expr ≃ » x.right_moves y.right_moves) (hl : ∀ i, «expr⟦ ⟧» (x.move_left i) = «expr⟦ ⟧» (y.move_left (L i)))\n    (hr : ∀ j, «expr⟦ ⟧» (x.move_right j) = «expr⟦ ⟧» (y.move_right (R j))) : «expr⟦ ⟧» x = «expr⟦ ⟧» y :=\n  by\n  simp_rw [quotient.eq] at hl hr\n  exact quot.sound (equiv_of_mk_equiv L R hl hr)\n#align quot_eq_of_mk_quot_eq quot_eq_of_mk_quot_eq\n\n",
 "quot_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem quot_add (a b : pgame) : «expr⟦ ⟧» (a + b) = «expr⟦ ⟧» a + «expr⟦ ⟧» b :=\n  rfl\n#align quot_add quot_add\n\n",
 "one_mul_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `1 * x` is equivalent to `x`. -/\ntheorem one_mul_equiv (x : pgame) : pgame.equiv (1 * x) x :=\n  quotient.exact <| quot_one_mul x\n#align one_mul_equiv one_mul_equiv\n\n",
 "not_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\n/-- On `game`, simp-normal inequalities should use as few negations as possible. -/\n@[simp]\ntheorem not_lf : ∀ {x y : game}, ¬«expr ⧏ » x y ↔ y ≤ x :=\n  by\n  rintro ⟨x⟩ ⟨y⟩\n  exact not_lf\n#align not_lf not_lf\n\n",
 "not_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\n#print not_le /-\n/-\nCopyright (c) 2019 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Reid Barton, Mario Carneiro, Isabel Longbottom, Scott Morrison, Apurva Nakade\n-/\n/-- On `game`, simp-normal inequalities should use as few negations as possible. -/\n@[simp]\ntheorem not_le : ∀ {x y : game}, ¬x ≤ y ↔ «expr ⧏ » y x :=\n  by\n  rintro ⟨x⟩ ⟨y⟩\n  exact pgame.not_le\n#align not_le not_le\n-/\n\n",
 "neg_mk_mul_move_right_inr":
 "@[simp]\ntheorem neg_mk_mul_move_right_inr {xl xr yl yr} {xL xR yL yR} {i j} :\n    (-(mk xl xr xL xR * mk yl yr yL yR)).move_right (sum.inr (i, j)) =\n      -(xR i * mk yl yr yL yR + mk xl xr xL xR * yR j - xR i * yR j) :=\n  rfl\n#align neg_mk_mul_move_right_inr neg_mk_mul_move_right_inr\n\n",
 "neg_mk_mul_move_right_inl":
 "@[simp]\ntheorem neg_mk_mul_move_right_inl {xl xr yl yr} {xL xR yL yR} {i j} :\n    (-(mk xl xr xL xR * mk yl yr yL yR)).move_right (sum.inl (i, j)) =\n      -(xL i * mk yl yr yL yR + mk xl xr xL xR * yL j - xL i * yL j) :=\n  rfl\n#align neg_mk_mul_move_right_inl neg_mk_mul_move_right_inl\n\n",
 "neg_mk_mul_move_left_inr":
 "@[simp]\ntheorem neg_mk_mul_move_left_inr {xl xr yl yr} {xL xR yL yR} {i j} :\n    (-(mk xl xr xL xR * mk yl yr yL yR)).move_left (sum.inr (i, j)) =\n      -(xR i * mk yl yr yL yR + mk xl xr xL xR * yL j - xR i * yL j) :=\n  rfl\n#align neg_mk_mul_move_left_inr neg_mk_mul_move_left_inr\n\n",
 "neg_mk_mul_move_left_inl":
 "@[simp]\ntheorem neg_mk_mul_move_left_inl {xl xr yl yr} {xL xR yL yR} {i j} :\n    (-(mk xl xr xL xR * mk yl yr yL yR)).move_left (sum.inl (i, j)) =\n      -(xL i * mk yl yr yL yR + mk xl xr xL xR * yR j - xL i * yR j) :=\n  rfl\n#align neg_mk_mul_move_left_inl neg_mk_mul_move_left_inl\n\n",
 "mul_zero_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `x * 0` is equivalent to `0`. -/\ntheorem mul_zero_equiv (x : pgame) : pgame.equiv (x * 0) 0 :=\n  (mul_zero_relabelling x).equiv\n#align mul_zero_equiv mul_zero_equiv\n\n",
 "mul_one_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `x * 1` is equivalent to `x`. -/\ntheorem mul_one_equiv (x : pgame) : pgame.equiv (x * 1) x :=\n  quotient.exact <| quot_mul_one x\n#align mul_one_equiv mul_one_equiv\n\n",
 "mul_move_right_inr":
 "@[simp]\ntheorem mul_move_right_inr {x y : pgame} {i j} :\n    (x * y).move_right (to_right_moves_mul (sum.inr (i, j))) =\n      x.move_right i * y + x * y.move_left j - x.move_right i * y.move_left j :=\n  by\n  cases x\n  cases y\n  rfl\n#align mul_move_right_inr mul_move_right_inr\n\n",
 "mul_move_right_inl":
 "@[simp]\ntheorem mul_move_right_inl {x y : pgame} {i j} :\n    (x * y).move_right (to_right_moves_mul (sum.inl (i, j))) =\n      x.move_left i * y + x * y.move_right j - x.move_left i * y.move_right j :=\n  by\n  cases x\n  cases y\n  rfl\n#align mul_move_right_inl mul_move_right_inl\n\n",
 "mul_move_left_inr":
 "@[simp]\ntheorem mul_move_left_inr {x y : pgame} {i j} :\n    (x * y).move_left (to_left_moves_mul (sum.inr (i, j))) =\n      x.move_right i * y + x * y.move_right j - x.move_right i * y.move_right j :=\n  by\n  cases x\n  cases y\n  rfl\n#align mul_move_left_inr mul_move_left_inr\n\n",
 "mul_move_left_inl":
 "@[simp]\ntheorem mul_move_left_inl {x y : pgame} {i j} :\n    (x * y).move_left (to_left_moves_mul (sum.inl (i, j))) =\n      x.move_left i * y + x * y.move_left j - x.move_left i * y.move_left j :=\n  by\n  cases x\n  cases y\n  rfl\n#align mul_move_left_inl mul_move_left_inl\n\n",
 "mul_comm_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `x * y` is equivalent to `y * x`. -/\ntheorem mul_comm_equiv (x y : pgame) : pgame.equiv (x * y) (y * x) :=\n  quotient.exact <| quot_mul_comm _ _\n#align mul_comm_equiv mul_comm_equiv\n\n",
 "mul_assoc_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `x * y * z` is equivalent to `x * (y * z).`-/\ntheorem mul_assoc_equiv (x y z : pgame) : pgame.equiv (x * y * z) (x * (y * z)) :=\n  quotient.exact <| quot_mul_assoc _ _ _\n#align mul_assoc_equiv mul_assoc_equiv\n\n",
 "mk_mul_move_right_inr":
 "@[simp]\ntheorem mk_mul_move_right_inr {xl xr yl yr} {xL xR yL yR} {i j} :\n    (mk xl xr xL xR * mk yl yr yL yR).move_right (sum.inr (i, j)) =\n      xR i * mk yl yr yL yR + mk xl xr xL xR * yL j - xR i * yL j :=\n  rfl\n#align mk_mul_move_right_inr mk_mul_move_right_inr\n\n",
 "mk_mul_move_right_inl":
 "@[simp]\ntheorem mk_mul_move_right_inl {xl xr yl yr} {xL xR yL yR} {i j} :\n    (mk xl xr xL xR * mk yl yr yL yR).move_right (sum.inl (i, j)) =\n      xL i * mk yl yr yL yR + mk xl xr xL xR * yR j - xL i * yR j :=\n  rfl\n#align mk_mul_move_right_inl mk_mul_move_right_inl\n\n",
 "mk_mul_move_left_inr":
 "@[simp]\ntheorem mk_mul_move_left_inr {xl xr yl yr} {xL xR yL yR} {i j} :\n    (mk xl xr xL xR * mk yl yr yL yR).move_left (sum.inr (i, j)) =\n      xR i * mk yl yr yL yR + mk xl xr xL xR * yR j - xR i * yR j :=\n  rfl\n#align mk_mul_move_left_inr mk_mul_move_left_inr\n\n",
 "mk_mul_move_left_inl":
 "@[simp]\ntheorem mk_mul_move_left_inl {xl xr yl yr} {xL xR yL yR} {i j} :\n    (mk xl xr xL xR * mk yl yr yL yR).move_left (sum.inl (i, j)) =\n      xL i * mk yl yr yL yR + mk xl xr xL xR * yL j - xL i * yL j :=\n  rfl\n#align mk_mul_move_left_inl mk_mul_move_left_inl\n\n",
 "lt_iff_game_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem _root_.pgame.lt_iff_game_lt {x y : pgame} : x < y ↔ «expr⟦ ⟧» x < «expr⟦ ⟧» y :=\n  iff.rfl\n#align pgame.lt_iff_game_lt pgame.lt_iff_game_lt\n\n",
 "lf_iff_game_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem _root_.pgame.lf_iff_game_lf {x y : pgame} : pgame.lf x y ↔ «expr ⧏ » («expr⟦ ⟧» x) («expr⟦ ⟧» y) :=\n  iff.rfl\n#align pgame.lf_iff_game_lf pgame.lf_iff_game_lf\n\n",
 "left_moves_mul_cases":
 "theorem left_moves_mul_cases {x y : pgame} (k) {P : (x * y).left_moves → Prop}\n    (hl : ∀ ix iy, P <| to_left_moves_mul (sum.inl ⟨ix, iy⟩))\n    (hr : ∀ jx jy, P <| to_left_moves_mul (sum.inr ⟨jx, jy⟩)) : P k :=\n  by\n  rw [← to_left_moves_mul.apply_symm_apply k]\n  rcases to_left_moves_mul.symm k with (⟨ix, iy⟩ | ⟨jx, jy⟩)\n  · apply hl\n  · apply hr\n#align left_moves_mul_cases left_moves_mul_cases\n\n",
 "left_moves_mul":
 "theorem left_moves_mul :\n    ∀ x y : pgame.{u}, (x * y).left_moves = Sum (x.left_moves × y.left_moves) (x.right_moves × y.right_moves)\n  | ⟨_, _, _, _⟩, ⟨_, _, _, _⟩ => rfl\n#align left_moves_mul left_moves_mul\n\n",
 "left_distrib_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `x * (y + z)` is equivalent to `x * y + x * z.`-/\ntheorem left_distrib_equiv (x y z : pgame) : pgame.equiv (x * (y + z)) (x * y + x * z) :=\n  quotient.exact <| quot_left_distrib _ _ _\n#align left_distrib_equiv left_distrib_equiv\n\n",
 "le_iff_game_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem _root_.pgame.le_iff_game_le {x y : pgame} : x ≤ y ↔ «expr⟦ ⟧» x ≤ «expr⟦ ⟧» y :=\n  iff.rfl\n#align pgame.le_iff_game_le pgame.le_iff_game_le\n\n",
 "inv_zero":
 "@[simp]\ntheorem inv_zero : (0 : pgame)⁻¹ = 0 :=\n  inv_eq_of_equiv_zero (equiv_refl _)\n#align inv_zero inv_zero\n\n",
 "inv_val_is_empty":
 "@[simp]\ntheorem inv_val_is_empty {l r : Type u} {b} (L R IHl IHr) (i : inv_ty l r b) [is_empty l] [is_empty r] :\n    inv_val L R IHl IHr i = 0 := by\n  cases' i with a _ a _ a _ a\n  · rfl\n  all_goals exact is_empty_elim a\n#align inv_val_is_empty inv_val_is_empty\n\n",
 "inv_one_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem inv_one_equiv : pgame.equiv 1⁻¹ 1 :=\n  inv_one.equiv\n#align inv_one_equiv inv_one_equiv\n\n",
 "inv_eq_of_pos":
 "theorem inv_eq_of_pos {x : pgame} (h : 0 < x) : x⁻¹ = inv' x :=\n  (if_neg h.lf.not_equiv').trans (if_pos h)\n#align inv_eq_of_pos inv_eq_of_pos\n\n",
 "inv_eq_of_lf_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem inv_eq_of_lf_zero {x : pgame} (h : pgame.lf x 0) : x⁻¹ = -inv' (-x) :=\n  (if_neg h.not_equiv).trans (if_neg h.not_gt)\n#align inv_eq_of_lf_zero inv_eq_of_lf_zero\n\n",
 "inv_eq_of_equiv_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem inv_eq_of_equiv_zero {x : pgame} (h : pgame.equiv x 0) : x⁻¹ = 0 :=\n  if_pos h\n#align inv_eq_of_equiv_zero inv_eq_of_equiv_zero\n\n",
 "inv'_zero_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem inv'_zero_equiv : pgame.equiv (inv' 0) 1 :=\n  inv'_zero.equiv\n#align inv'_zero_equiv inv'_zero_equiv\n\n",
 "inv'_one_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem inv'_one_equiv : pgame.equiv (inv' 1) 1 :=\n  inv'_one.equiv\n#align inv'_one_equiv inv'_one_equiv\n\n",
 "fuzzy_iff_game_fuzzy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ‖ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem _root_.pgame.fuzzy_iff_game_fuzzy {x y : pgame} : pgame.fuzzy x y ↔ «expr ‖ » («expr⟦ ⟧» x) («expr⟦ ⟧» y) :=\n  iff.rfl\n#align pgame.fuzzy_iff_game_fuzzy pgame.fuzzy_iff_game_fuzzy\n\n",
 "equiv_iff_game_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem _root_.pgame.equiv_iff_game_eq {x y : pgame} : pgame.equiv x y ↔ «expr⟦ ⟧» x = «expr⟦ ⟧» y :=\n  (@quotient.eq _ _ x y).symm\n#align pgame.equiv_iff_game_eq pgame.equiv_iff_game_eq\n\n",
 "add_lf_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\ntheorem add_lf_add_right : ∀ {b c : game} (h : «expr ⧏ » b c) (a), «expr ⧏ » (b + a) (c + a) :=\n  by\n  rintro ⟨b⟩ ⟨c⟩ h ⟨a⟩\n  apply add_lf_add_right h\n#align add_lf_add_right add_lf_add_right\n\n",
 "add_lf_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧏ » -/\ntheorem add_lf_add_left : ∀ {b c : game} (h : «expr ⧏ » b c) (a), «expr ⧏ » (a + b) (a + c) :=\n  by\n  rintro ⟨b⟩ ⟨c⟩ h ⟨a⟩\n  apply add_lf_add_left h\n#align add_lf_add_left add_lf_add_left\n\n"}