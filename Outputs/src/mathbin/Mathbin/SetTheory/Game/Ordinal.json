{"to_pgame_right_moves":
 "@[simp]\ntheorem to_pgame_right_moves (o : Ordinal) : o.to_pgame.right_moves = PEmpty := by rw [to_pgame, right_moves]\n#align to_pgame_right_moves to_pgame_right_moves\n\n",
 "to_pgame_nonneg":
 "theorem to_pgame_nonneg (a : Ordinal) : 0 ≤ a.to_pgame :=\n  zero_to_pgame_relabelling.ge.trans <| to_pgame_le <| Ordinal.zero_le a\n#align to_pgame_nonneg to_pgame_nonneg\n\n",
 "to_pgame_move_left_heq":
 "theorem to_pgame_move_left_heq {o : Ordinal} :\n    HEq o.to_pgame.move_left fun x : o.out.α => (typein (· < ·) x).to_pgame :=\n  by\n  rw [to_pgame]\n  rfl\n#align to_pgame_move_left_heq to_pgame_move_left_heq\n\n",
 "to_pgame_move_left'":
 "@[simp]\ntheorem to_pgame_move_left' {o : Ordinal} (i) : o.to_pgame.move_left i = (to_left_moves_to_pgame.symm i).val.to_pgame :=\n  (congr_heq to_pgame_move_left_heq.symm (cast_heq _ i)).symm\n#align to_pgame_move_left' to_pgame_move_left'\n\n",
 "to_pgame_move_left":
 "theorem to_pgame_move_left {o : Ordinal} (i) : o.to_pgame.move_left (to_left_moves_to_pgame i) = i.val.to_pgame := by\n  simp\n#align to_pgame_move_left to_pgame_move_left\n\n",
 "to_pgame_lt_iff":
 "@[simp]\ntheorem to_pgame_lt_iff {a b : Ordinal} : a.to_pgame < b.to_pgame ↔ a < b :=\n  ⟨by\n    contrapose\n    rw [not_lt]\n    exact fun h => not_lt_of_le (to_pgame_le h), to_pgame_lt⟩\n#align to_pgame_lt_iff to_pgame_lt_iff\n\n",
 "to_pgame_lt":
 "theorem to_pgame_lt {a b : Ordinal} (h : a < b) : a.to_pgame < b.to_pgame :=\n  ⟨to_pgame_le h.le, to_pgame_lf h⟩\n#align to_pgame_lt to_pgame_lt\n\n",
 "to_pgame_lf_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[simp]\ntheorem to_pgame_lf_iff {a b : Ordinal} : pgame.lf a.to_pgame b.to_pgame ↔ a < b :=\n  ⟨by\n    contrapose\n    rw [not_lt, not_lf]\n    exact to_pgame_le, to_pgame_lf⟩\n#align to_pgame_lf_iff to_pgame_lf_iff\n\n",
 "to_pgame_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem to_pgame_lf {a b : Ordinal} (h : a < b) : pgame.lf a.to_pgame b.to_pgame :=\n  by\n  convert move_left_lf (to_left_moves_to_pgame ⟨a, h⟩)\n  rw [to_pgame_move_left]\n#align to_pgame_lf to_pgame_lf\n\n",
 "to_pgame_left_moves":
 "@[simp]\ntheorem to_pgame_left_moves (o : Ordinal) : o.to_pgame.left_moves = o.out.α := by rw [to_pgame, left_moves]\n#align to_pgame_left_moves to_pgame_left_moves\n\n",
 "to_pgame_le_iff":
 "@[simp]\ntheorem to_pgame_le_iff {a b : Ordinal} : a.to_pgame ≤ b.to_pgame ↔ a ≤ b :=\n  ⟨by\n    contrapose\n    rw [not_le, pgame.not_le]\n    exact to_pgame_lf, to_pgame_le⟩\n#align to_pgame_le_iff to_pgame_le_iff\n\n",
 "to_pgame_le":
 "theorem to_pgame_le {a b : Ordinal} (h : a ≤ b) : a.to_pgame ≤ b.to_pgame :=\n  by\n  refine' le_iff_forall_lf.2 ⟨fun i => _, isEmptyElim⟩\n  rw [to_pgame_move_left']\n  exact to_pgame_lf ((to_left_moves_to_pgame_symm_lt i).trans_le h)\n#align to_pgame_le to_pgame_le\n\n",
 "to_pgame_injective":
 "theorem to_pgame_injective : function.injective ordinal.to_pgame := fun a b h => to_pgame_equiv_iff.1 <| equiv_of_eq h\n#align to_pgame_injective to_pgame_injective\n\n",
 "to_pgame_equiv_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem to_pgame_equiv_iff {a b : Ordinal} : pgame.equiv a.to_pgame b.to_pgame ↔ a = b := by\n  rw [pgame.equiv, le_antisymm_iff, to_pgame_le_iff, to_pgame_le_iff]\n#align to_pgame_equiv_iff to_pgame_equiv_iff\n\n",
 "to_pgame_eq_iff":
 "@[simp]\ntheorem to_pgame_eq_iff {a b : Ordinal} : a.to_pgame = b.to_pgame ↔ a = b :=\n  to_pgame_injective.eq_iff\n#align to_pgame_eq_iff to_pgame_eq_iff\n\n",
 "to_pgame_def":
 "/-\nCopyright (c) 2022 Violeta Hernández Palacios. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Violeta Hernández Palacios\n-/\ntheorem to_pgame_def (o : Ordinal) :\n    o.to_pgame = ⟨o.out.α, PEmpty, fun x => (typein (· < ·) x).to_pgame, PEmpty.elim⟩ := by rw [to_pgame]\n#align to_pgame_def to_pgame_def\n\n",
 "to_pgame_add_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.nadd -/\n@[simp]\ntheorem to_pgame_add_mk (a b : Ordinal) :\n    «expr⟦ ⟧» a.to_pgame + «expr⟦ ⟧» b.to_pgame = «expr⟦ ⟧» (ordinal.nadd a b).to_pgame :=\n  quot.sound (to_pgame_add a b)\n#align to_pgame_add_mk to_pgame_add_mk\n\n",
 "to_pgame_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.nadd -/\n/-- The sum of ordinals as games corresponds to natural addition of ordinals. -/\ntheorem to_pgame_add : ∀ a b : Ordinal.{u}, pgame.equiv (a.to_pgame + b.to_pgame) (ordinal.nadd a b).to_pgame\n  | a, b => by\n    refine' ⟨le_of_forall_lf (fun i => _) isEmptyElim, le_of_forall_lf (fun i => _) isEmptyElim⟩\n    · apply left_moves_add_cases i <;> intro i <;> let wf := to_left_moves_to_pgame_symm_lt i <;>\n            try rw [add_move_left_inl] <;> try rw [add_move_left_inr] <;>\n        rw [to_pgame_move_left', lf_congr_left (to_pgame_add _ _), to_pgame_lf_iff]\n      · exact nadd_lt_nadd_right wf _\n      · exact nadd_lt_nadd_left wf _\n    · rw [to_pgame_move_left']\n      rcases lt_nadd_iff.1 (to_left_moves_to_pgame_symm_lt i) with (⟨c, hc, hc'⟩ | ⟨c, hc, hc'⟩) <;>\n          rw [← to_pgame_le_iff, ← le_congr_right (to_pgame_add _ _)] at hc' <;>\n        apply lf_of_le_of_lf hc'\n      · apply add_lf_add_right\n        rwa [to_pgame_lf_iff]\n      · apply add_lf_add_left\n        rwa [to_pgame_lf_iff]decreasing_by solve_by_elim [psigma.lex.left, psigma.lex.right]\n#align to_pgame_add to_pgame_add\n\n",
 "to_left_moves_to_pgame_symm_lt":
 "@[simp]\ntheorem to_left_moves_to_pgame_symm_lt {o : Ordinal} (i : o.to_pgame.left_moves) :\n    ↑(to_left_moves_to_pgame.symm i) < o :=\n  (to_left_moves_to_pgame.symm i).prop\n#align to_left_moves_to_pgame_symm_lt to_left_moves_to_pgame_symm_lt\n\n",
 "to_left_moves_one_to_pgame_symm":
 "@[simp]\ntheorem to_left_moves_one_to_pgame_symm (i) : (@to_left_moves_to_pgame 1).symm i = ⟨0, zero_lt_one⟩ := by simp\n#align to_left_moves_one_to_pgame_symm to_left_moves_one_to_pgame_symm\n\n",
 "one_to_pgame_move_left":
 "theorem one_to_pgame_move_left (x) : (to_pgame 1).move_left x = to_pgame 0 := by simp\n#align one_to_pgame_move_left one_to_pgame_move_left\n\n",
 "one_to_pgame_left_moves_default_eq":
 "@[simp]\ntheorem one_to_pgame_left_moves_default_eq :\n    (default : (to_pgame 1).left_moves) = @to_left_moves_to_pgame 1 ⟨0, zero_lt_one⟩ :=\n  rfl\n#align one_to_pgame_left_moves_default_eq one_to_pgame_left_moves_default_eq\n\n"}