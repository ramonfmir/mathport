{"not_fuzzy_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem not_fuzzy_zero_iff : ¬pgame.fuzzy G 0 ↔ pgame.equiv G 0 :=\n  ⟨(equiv_or_fuzzy_zero G).resolve_right, equiv.not_fuzzy⟩\n#align not_fuzzy_zero_iff not_fuzzy_zero_iff\n\n",
 "not_equiv_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[simp]\ntheorem not_equiv_zero_iff : ¬pgame.equiv G 0 ↔ pgame.fuzzy G 0 :=\n  ⟨(equiv_or_fuzzy_zero G).resolve_left, fuzzy.not_equiv⟩\n#align not_equiv_zero_iff not_equiv_zero_iff\n\n",
 "nonpos":
 "theorem nonpos : ¬0 < G := fun h => by\n  have h' := neg_lt_neg_iff.2 h\n  rw [neg_zero, lt_congr_left (neg_equiv_self G).symm] at h'\n  exact (h.trans h').false\n#align nonpos nonpos\n\n",
 "nonneg":
 "theorem nonneg : ¬G < 0 := fun h => by\n  have h' := neg_lt_neg_iff.2 h\n  rw [neg_zero, lt_congr_right (neg_equiv_self G).symm] at h'\n  exact (h.trans h').false\n#align nonneg nonneg\n\n",
 "neg_equiv_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem neg_equiv_self (G : pgame) [h : G.impartial] : pgame.equiv G (-G) :=\n  (impartial_def.1 h).1\n#align neg_equiv_self neg_equiv_self\n\n",
 "mk_neg_equiv_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem mk_neg_equiv_self (G : pgame) [h : G.impartial] : -«expr⟦ ⟧» G = «expr⟦ ⟧» G :=\n  quot.sound (neg_equiv_self G).symm\n#align mk_neg_equiv_self mk_neg_equiv_self\n\n",
 "mk_add_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem mk_add_self : «expr⟦ ⟧» G + «expr⟦ ⟧» G = 0 :=\n  quot.sound (add_self G)\n#align mk_add_self mk_add_self\n\n",
 "lf_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_zero_iff {G : pgame} [G.impartial] : pgame.lf G 0 ↔ pgame.lf 0 G := by\n  rw [← zero_lf_neg_iff, lf_congr_right (neg_equiv_self G)]\n#align lf_zero_iff lf_zero_iff\n\n",
 "le_zero_iff":
 "#print le_zero_iff /-\ntheorem le_zero_iff {G : pgame} [G.impartial] : G ≤ 0 ↔ 0 ≤ G := by\n  rw [← zero_le_neg_iff, le_congr_right (neg_equiv_self G)]\n#align le_zero_iff le_zero_iff\n-/\n\n",
 "impartial_iff_aux":
 "theorem impartial_iff_aux {G : pgame} : G.impartial ↔ G.impartial_aux :=\n  ⟨fun h => h.1, fun h => ⟨h⟩⟩\n#align impartial_iff_aux impartial_iff_aux\n\n",
 "impartial_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem impartial_def {G : pgame} :\n    G.impartial ↔ pgame.equiv G (-G) ∧ (∀ i, impartial (G.move_left i)) ∧ ∀ j, impartial (G.move_right j) := by\n  simpa only [impartial_iff_aux] using impartial_aux_def\n#align impartial_def impartial_def\n\n",
 "impartial_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.relabelling -/\ntheorem impartial_congr : ∀ {G H : pgame} (e : pgame.relabelling G H) [G.impartial], H.impartial\n  | G, H => fun e => by\n    intro h\n    exact\n      impartial_def.2\n        ⟨e.symm.equiv.trans ((neg_equiv_self G).trans (neg_equiv_neg_iff.2 e.equiv)), fun i =>\n          impartial_congr (e.move_left_symm i), fun j => impartial_congr (e.move_right_symm j)⟩decreasing_by\n  pgame_wf_tac\n#align impartial_congr impartial_congr\n\n",
 "impartial_aux_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-\nCopyright (c) 2020 Fox Thomson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Fox Thomson\n-/\ntheorem impartial_aux_def {G : pgame} :\n    G.impartial_aux ↔ pgame.equiv G (-G) ∧ (∀ i, impartial_aux (G.move_left i)) ∧ ∀ j, impartial_aux (G.move_right j) :=\n  by rw [impartial_aux]\n#align impartial_aux_def impartial_aux_def\n\n",
 "fuzzy_zero_iff_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem fuzzy_zero_iff_lf : pgame.fuzzy G 0 ↔ pgame.lf G 0 :=\n  ⟨And.left, fun h => ⟨h, lf_zero_iff.1 h⟩⟩\n#align fuzzy_zero_iff_lf fuzzy_zero_iff_lf\n\n",
 "fuzzy_zero_iff_gf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem fuzzy_zero_iff_gf : pgame.fuzzy G 0 ↔ pgame.lf 0 G :=\n  ⟨And.right, fun h => ⟨lf_zero_iff.2 h, h⟩⟩\n#align fuzzy_zero_iff_gf fuzzy_zero_iff_gf\n\n",
 "forall_right_moves_fuzzy_iff_equiv_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem forall_right_moves_fuzzy_iff_equiv_zero : (∀ j, pgame.fuzzy (G.move_right j) 0) ↔ pgame.equiv G 0 :=\n  by\n  refine' ⟨fun hb => _, fun hp i => _⟩\n  · rw [equiv_zero_iff_ge G, zero_le_lf]\n    exact fun i => (hb i).2\n  · rw [fuzzy_zero_iff_gf]\n    exact hp.2.lf_move_right i\n#align forall_right_moves_fuzzy_iff_equiv_zero forall_right_moves_fuzzy_iff_equiv_zero\n\n",
 "forall_left_moves_fuzzy_iff_equiv_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem forall_left_moves_fuzzy_iff_equiv_zero : (∀ i, pgame.fuzzy (G.move_left i) 0) ↔ pgame.equiv G 0 :=\n  by\n  refine' ⟨fun hb => _, fun hp i => _⟩\n  · rw [equiv_zero_iff_le G, le_zero_lf]\n    exact fun i => (hb i).1\n  · rw [fuzzy_zero_iff_lf]\n    exact hp.1.move_left_lf i\n#align forall_left_moves_fuzzy_iff_equiv_zero forall_left_moves_fuzzy_iff_equiv_zero\n\n",
 "exists_right_move_equiv_iff_fuzzy_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem exists_right_move_equiv_iff_fuzzy_zero : (∃ j, pgame.equiv (G.move_right j) 0) ↔ pgame.fuzzy G 0 :=\n  by\n  refine' ⟨fun ⟨i, hi⟩ => (fuzzy_zero_iff_lf G).2 (lf_of_move_right_le hi.1), fun hn => _⟩\n  rw [fuzzy_zero_iff_lf G, lf_zero_le] at hn\n  cases' hn with i hi\n  exact ⟨i, (equiv_zero_iff_le _).2 hi⟩\n#align exists_right_move_equiv_iff_fuzzy_zero exists_right_move_equiv_iff_fuzzy_zero\n\n",
 "exists_left_move_equiv_iff_fuzzy_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem exists_left_move_equiv_iff_fuzzy_zero : (∃ i, pgame.equiv (G.move_left i) 0) ↔ pgame.fuzzy G 0 :=\n  by\n  refine' ⟨fun ⟨i, hi⟩ => (fuzzy_zero_iff_gf G).2 (lf_of_le_move_left hi.2), fun hn => _⟩\n  rw [fuzzy_zero_iff_gf G, zero_lf_le] at hn\n  cases' hn with i hi\n  exact ⟨i, (equiv_zero_iff_ge _).2 hi⟩\n#align exists_left_move_equiv_iff_fuzzy_zero exists_left_move_equiv_iff_fuzzy_zero\n\n",
 "equiv_zero_iff_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_zero_iff_le : pgame.equiv G 0 ↔ G ≤ 0 :=\n  ⟨And.left, fun h => ⟨h, le_zero_iff.1 h⟩⟩\n#align equiv_zero_iff_le equiv_zero_iff_le\n\n",
 "equiv_zero_iff_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_zero_iff_ge : pgame.equiv G 0 ↔ 0 ≤ G :=\n  ⟨And.right, fun h => ⟨le_zero_iff.2 h, h⟩⟩\n#align equiv_zero_iff_ge equiv_zero_iff_ge\n\n",
 "equiv_or_fuzzy_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/-- In an impartial game, either the first player always wins, or the second player always wins. -/\ntheorem equiv_or_fuzzy_zero : pgame.equiv G 0 ∨ pgame.fuzzy G 0 :=\n  by\n  rcases lt_or_equiv_or_gt_or_fuzzy G 0 with (h | h | h | h)\n  · exact ((nonneg G) h).elim\n  · exact or.inl h\n  · exact ((nonpos G) h).elim\n  · exact or.inr h\n#align equiv_or_fuzzy_zero equiv_or_fuzzy_zero\n\n",
 "equiv_iff_add_equiv_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- This lemma doesn't require `H` to be impartial. -/\ntheorem equiv_iff_add_equiv_zero' (H : pgame) : pgame.equiv G H ↔ pgame.equiv (G + H) 0 :=\n  by\n  rw [equiv_iff_game_eq, equiv_iff_game_eq, ← @add_left_cancel_iff _ _ _ (-«expr⟦ ⟧» G), eq_comm]\n  simpa\n#align equiv_iff_add_equiv_zero' equiv_iff_add_equiv_zero'\n\n",
 "equiv_iff_add_equiv_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- This lemma doesn't require `H` to be impartial. -/\ntheorem equiv_iff_add_equiv_zero (H : pgame) : pgame.equiv H G ↔ pgame.equiv (H + G) 0 :=\n  by\n  rw [equiv_iff_game_eq, equiv_iff_game_eq, ← @add_right_cancel_iff _ _ _ (-«expr⟦ ⟧» G)]\n  simpa\n#align equiv_iff_add_equiv_zero equiv_iff_add_equiv_zero\n\n",
 "add_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_self : pgame.equiv (G + G) 0 :=\n  (add_congr_left (neg_equiv_self G)).trans (add_left_neg_equiv G)\n#align add_self add_self\n\n"}