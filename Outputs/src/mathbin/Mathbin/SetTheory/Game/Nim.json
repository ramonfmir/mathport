{"to_right_moves_nim_symm_lt":
 "@[simp]\ntheorem to_right_moves_nim_symm_lt {o : Ordinal} (i : (nim o).right_moves) : ↑(to_right_moves_nim.symm i) < o :=\n  (to_right_moves_nim.symm i).prop\n#align to_right_moves_nim_symm_lt to_right_moves_nim_symm_lt\n\n",
 "to_right_moves_nim_one_symm":
 "@[simp]\ntheorem to_right_moves_nim_one_symm (i) : (@to_right_moves_nim 1).symm i = ⟨0, zero_lt_one⟩ := by simp\n#align to_right_moves_nim_one_symm to_right_moves_nim_one_symm\n\n",
 "to_left_moves_nim_symm_lt":
 "@[simp]\ntheorem to_left_moves_nim_symm_lt {o : Ordinal} (i : (nim o).left_moves) : ↑(to_left_moves_nim.symm i) < o :=\n  (to_left_moves_nim.symm i).prop\n#align to_left_moves_nim_symm_lt to_left_moves_nim_symm_lt\n\n",
 "to_left_moves_nim_one_symm":
 "@[simp]\ntheorem to_left_moves_nim_one_symm (i) : (@to_left_moves_nim 1).symm i = ⟨0, zero_lt_one⟩ := by simp\n#align to_left_moves_nim_one_symm to_left_moves_nim_one_symm\n\n",
 "right_moves_nim":
 "theorem right_moves_nim (o : Ordinal) : (nim o).right_moves = o.out.α :=\n  by\n  rw [nim_def]\n  rfl\n#align right_moves_nim right_moves_nim\n\n",
 "nim_zero_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem nim_zero_equiv : pgame.equiv (nim 0) 0 :=\n  equiv.is_empty _\n#align nim_zero_equiv nim_zero_equiv\n\n",
 "nim_one_move_right":
 "theorem nim_one_move_right (x) : (nim 1).move_right x = nim 0 := by simp\n#align nim_one_move_right nim_one_move_right\n\n",
 "nim_one_move_left":
 "theorem nim_one_move_left (x) : (nim 1).move_left x = nim 0 := by simp\n#align nim_one_move_left nim_one_move_left\n\n",
 "nim_one_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem nim_one_equiv : pgame.equiv (nim 1) star :=\n  nim_one_relabelling.equiv\n#align nim_one_equiv nim_one_equiv\n\n",
 "nim_grundy_value":
 "@[simp]\ntheorem nim_grundy_value (o : Ordinal.{u}) : grundy_value (nim o) = o :=\n  grundy_value_eq_iff_equiv_nim.2 pgame.equiv_rfl\n#align nim_grundy_value nim_grundy_value\n\n",
 "nim_fuzzy_zero_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem nim_fuzzy_zero_of_ne_zero {o : Ordinal} (ho : o ≠ 0) : pgame.fuzzy (nim o) 0 :=\n  by\n  rw [impartial.fuzzy_zero_iff_lf, nim_def, lf_zero_le]\n  rw [← Ordinal.pos_iff_ne_zero] at ho\n  exact ⟨(Ordinal.principalSegOut ho).top, by simp⟩\n#align nim_fuzzy_zero_of_ne_zero nim_fuzzy_zero_of_ne_zero\n\n",
 "nim_equiv_iff_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem nim_equiv_iff_eq {o₁ o₂ : Ordinal} : pgame.equiv (nim o₁) (nim o₂) ↔ o₁ = o₂ := by\n  rw [impartial.equiv_iff_add_equiv_zero, nim_add_equiv_zero_iff]\n#align nim_equiv_iff_eq nim_equiv_iff_eq\n\n",
 "nim_def":
 "/-\nCopyright (c) 2020 Fox Thomson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Fox Thomson, Markus Himmel\n-/\n-- Uses `noncomputable!` to avoid `rec_fn_macro only allowed in meta definitions` VM error\ntheorem nim_def (o : Ordinal) :\n    nim o =\n      pgame.mk o.out.α o.out.α (fun o₂ => nim (Ordinal.typein (· < ·) o₂)) fun o₂ => nim (Ordinal.typein (· < ·) o₂) :=\n  by\n  rw [nim]\n  rfl\n#align nim_def nim_def\n\n",
 "nim_birthday":
 "@[simp]\ntheorem nim_birthday (o : Ordinal) : (nim o).birthday = o :=\n  by\n  induction' o using Ordinal.induction with o IH\n  rw [nim_def, birthday_def]\n  dsimp\n  rw [max_eq_right le_rfl]\n  convert lsub_typein o\n  exact funext fun i => IH _ (typein_lt_self i)\n#align nim_birthday nim_birthday\n\n",
 "nim_add_nim_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem nim_add_nim_equiv {n m : ℕ} : pgame.equiv (nim n + nim m) (nim (Nat.lxor' n m)) := by\n  rw [← grundy_value_eq_iff_equiv_nim, grundy_value_nim_add_nim]\n#align nim_add_nim_equiv nim_add_nim_equiv\n\n",
 "nim_add_fuzzy_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[simp]\ntheorem nim_add_fuzzy_zero_iff {o₁ o₂ : Ordinal} : pgame.fuzzy (nim o₁ + nim o₂) 0 ↔ o₁ ≠ o₂ := by\n  rw [iff_not_comm, impartial.not_fuzzy_zero_iff, nim_add_equiv_zero_iff]\n#align nim_add_fuzzy_zero_iff nim_add_fuzzy_zero_iff\n\n",
 "nim_add_equiv_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem nim_add_equiv_zero_iff (o₁ o₂ : Ordinal) : pgame.equiv (nim o₁ + nim o₂) 0 ↔ o₁ = o₂ :=\n  by\n  constructor\n  · refine' not_imp_not.1 fun hne : _ ≠ _ => (impartial.not_equiv_zero_iff _).2 _\n    wlog h : o₁ < o₂\n    · exact (fuzzy_congr_left add_comm_equiv).1 (this _ _ hne.symm (hne.lt_or_lt.resolve_left h))\n    rw [impartial.fuzzy_zero_iff_gf, zero_lf_le, nim_def o₂]\n    refine' ⟨to_left_moves_add (Sum.inr _), _⟩\n    · exact (Ordinal.principalSegOut h).top\n    · simpa using (impartial.add_self (nim o₁)).2\n  · rintro rfl\n    exact impartial.add_self (nim o₁)\n#align nim_add_equiv_zero_iff nim_add_equiv_zero_iff\n\n",
 "neg_nim":
 "@[simp]\ntheorem neg_nim (o : Ordinal) : -nim o = nim o :=\n  by\n  induction' o using Ordinal.induction with o IH\n  rw [nim_def]; dsimp <;> congr <;> funext i <;> exact IH _ (Ordinal.typein_lt_self i)\n#align neg_nim neg_nim\n\n",
 "move_right_nim_heq":
 "theorem move_right_nim_heq (o : Ordinal) : HEq (nim o).move_right fun i : o.out.α => nim (typein (· < ·) i) :=\n  by\n  rw [nim_def]\n  rfl\n#align move_right_nim_heq move_right_nim_heq\n\n",
 "move_right_nim'":
 "@[simp]\ntheorem move_right_nim' {o : Ordinal} (i) : (nim o).move_right i = nim (to_right_moves_nim.symm i).val :=\n  (congr_heq (move_right_nim_heq o).symm (cast_heq _ i)).symm\n#align move_right_nim' move_right_nim'\n\n",
 "move_right_nim":
 "theorem move_right_nim {o : Ordinal} (i) : (nim o).move_right (to_right_moves_nim i) = nim i := by simp\n#align move_right_nim move_right_nim\n\n",
 "move_left_nim_heq":
 "theorem move_left_nim_heq (o : Ordinal) : HEq (nim o).move_left fun i : o.out.α => nim (typein (· < ·) i) :=\n  by\n  rw [nim_def]\n  rfl\n#align move_left_nim_heq move_left_nim_heq\n\n",
 "move_left_nim'":
 "@[simp]\ntheorem move_left_nim' {o : Ordinal.{u}} (i) : (nim o).move_left i = nim (to_left_moves_nim.symm i).val :=\n  (congr_heq (move_left_nim_heq o).symm (cast_heq _ i)).symm\n#align move_left_nim' move_left_nim'\n\n",
 "move_left_nim":
 "theorem move_left_nim {o : Ordinal} (i) : (nim o).move_left (to_left_moves_nim i) = nim i := by simp\n#align move_left_nim move_left_nim\n\n",
 "left_moves_nim":
 "theorem left_moves_nim (o : Ordinal) : (nim o).left_moves = o.out.α :=\n  by\n  rw [nim_def]\n  rfl\n#align left_moves_nim left_moves_nim\n\n",
 "grundy_value_zero":
 "@[simp]\ntheorem grundy_value_zero : grundy_value 0 = 0 :=\n  grundy_value_eq_iff_equiv_nim.2 nim_zero_equiv.symm\n#align grundy_value_zero grundy_value_zero\n\n",
 "grundy_value_star":
 "@[simp]\ntheorem grundy_value_star : grundy_value star = 1 :=\n  grundy_value_eq_iff_equiv_nim.2 nim_one_equiv.symm\n#align grundy_value_star grundy_value_star\n\n",
 "grundy_value_nim_add_nim":
 "-- Todo: this actually generalizes to all ordinals, by defining `ordinal.lxor` as the pairwise\n-- `nat.lxor` of base `ω` Cantor normal forms.\n/-- The Grundy value of the sum of two nim games with natural numbers of piles equals their bitwise\nxor. -/\n@[simp]\ntheorem grundy_value_nim_add_nim (n m : ℕ) : grundy_value (nim.{u} n + nim.{u} m) = Nat.lxor' n m :=\n  by\n  -- We do strong induction on both variables.\n  induction' n using nat.strong_induction_on with n hn generalizing m\n  induction' m using nat.strong_induction_on with m hm\n  rw [grundy_value_eq_mex_left]\n  apply (Ordinal.mex_le_of_ne.{u, u} fun i => _).antisymm (Ordinal.le_mex_of_forall fun ou hu => _)\n  -- The Grundy value `nat.lxor n m` can't be reached by left moves.\n  ·\n    apply left_moves_add_cases i <;>\n      · -- A left move leaves us with a Grundy value of `nat.lxor k m` for `k < n`, or `nat.lxor n k`\n        -- for `k < m`.\n        refine' fun a => left_moves_nim_rec_on a fun ok hk => _\n        obtain ⟨k, rfl⟩ := Ordinal.lt_omega.1 (hk.trans (Ordinal.nat_lt_omega _))\n        simp only [add_move_left_inl, add_move_left_inr, move_left_nim', Equiv.symm_apply_apply]\n        -- The inequality follows from injectivity.\n        rw [nat_cast_lt] at hk\n        first |rw [hn _ hk]|rw [hm _ hk]\n        refine' fun h => hk.ne _\n        rw [Ordinal.nat_cast_inj] at h\n        first |rwa [Nat.lxor'_left_inj] at h|rwa [Nat.lxor'_right_inj] at h\n  -- Every other smaller Grundy value can be reached by left moves.\n  · -- If `u < nat.lxor m n`, then either `nat.lxor u n < m` or `nat.lxor u m < n`.\n    obtain ⟨u, rfl⟩ := Ordinal.lt_omega.1 (hu.trans (Ordinal.nat_lt_omega _))\n    replace hu := Ordinal.nat_cast_lt.1 hu\n    cases' Nat.lt_lxor'_cases hu with h h\n    -- In the first case, reducing the `m` pile to `nat.lxor u n` gives the desired Grundy value.\n    · refine' ⟨to_left_moves_add (Sum.inl <| to_left_moves_nim ⟨_, Ordinal.nat_cast_lt.2 h⟩), _⟩\n      simp [Nat.lxor_cancel_right, hn _ h]\n    -- In the second case, reducing the `n` pile to `nat.lxor u m` gives the desired Grundy value.\n    · refine' ⟨to_left_moves_add (Sum.inr <| to_left_moves_nim ⟨_, Ordinal.nat_cast_lt.2 h⟩), _⟩\n      have : n.lxor (u.lxor n) = u\n      rw [Nat.lxor'_comm u, Nat.lxor'_cancel_left]\n      simpa [hm _ h] using this\n#align grundy_value_nim_add_nim grundy_value_nim_add_nim\n\n",
 "grundy_value_neg":
 "@[simp]\ntheorem grundy_value_neg (G : pgame) [G.impartial] : grundy_value (-G) = grundy_value G := by\n  rw [grundy_value_eq_iff_equiv_nim, neg_equiv_iff, neg_nim, ← grundy_value_eq_iff_equiv_nim]\n#align grundy_value_neg grundy_value_neg\n\n",
 "grundy_value_iff_equiv_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem grundy_value_iff_equiv_zero (G : pgame) [G.impartial] : grundy_value G = 0 ↔ pgame.equiv G 0 := by\n  rw [← grundy_value_eq_iff_equiv, grundy_value_zero]\n#align grundy_value_iff_equiv_zero grundy_value_iff_equiv_zero\n\n",
 "grundy_value_eq_mex_right":
 "theorem grundy_value_eq_mex_right :\n    ∀ (G : pgame) [G.impartial], grundy_value G = Ordinal.mex.{u, u} fun i => grundy_value (G.move_right i)\n  | ⟨l, r, L, R⟩ => by\n    intro H\n    rw [← grundy_value_neg, grundy_value_eq_mex_left]\n    congr\n    ext i\n    haveI : (R i).impartial := @impartial.move_right_impartial ⟨l, r, L, R⟩ _ i\n    apply grundy_value_neg\n#align grundy_value_eq_mex_right grundy_value_eq_mex_right\n\n",
 "grundy_value_eq_mex_left":
 "theorem grundy_value_eq_mex_left (G : pgame) :\n    grundy_value G = Ordinal.mex.{u, u} fun i => grundy_value (G.move_left i) := by rw [grundy_value]\n#align grundy_value_eq_mex_left grundy_value_eq_mex_left\n\n",
 "grundy_value_eq_iff_equiv_nim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem grundy_value_eq_iff_equiv_nim {G : pgame} [G.impartial] {o : Ordinal} :\n    grundy_value G = o ↔ pgame.equiv G (nim o) :=\n  ⟨by\n    rintro rfl\n    exact equiv_nim_grundy_value G, by\n    intro h\n    rw [← nim_equiv_iff_eq]\n    exact (equiv_nim_grundy_value G).symm.trans h⟩\n#align grundy_value_eq_iff_equiv_nim grundy_value_eq_iff_equiv_nim\n\n",
 "grundy_value_eq_iff_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem grundy_value_eq_iff_equiv (G H : pgame) [G.impartial] [H.impartial] :\n    grundy_value G = grundy_value H ↔ pgame.equiv G H :=\n  grundy_value_eq_iff_equiv_nim.trans (equiv_congr_left.1 (equiv_nim_grundy_value H) _).symm\n#align grundy_value_eq_iff_equiv grundy_value_eq_iff_equiv\n\n",
 "grundy_value_add":
 "theorem grundy_value_add (G H : pgame) [G.impartial] [H.impartial] {n m : ℕ} (hG : grundy_value G = n)\n    (hH : grundy_value H = m) : grundy_value (G + H) = Nat.lxor' n m :=\n  by\n  rw [← nim_grundy_value (Nat.lxor' n m), grundy_value_eq_iff_equiv]\n  refine' Equiv.trans _ nim_add_nim_equiv\n  convert add_congr (equiv_nim_grundy_value G) (equiv_nim_grundy_value H) <;> simp only [hG, hH]\n#align grundy_value_add grundy_value_add\n\n",
 "equiv_nim_grundy_value":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- The Sprague-Grundy theorem which states that every impartial game is equivalent to a game of\n nim, namely the game of nim corresponding to the games Grundy value -/\ntheorem equiv_nim_grundy_value : ∀ (G : pgame.{u}) [G.impartial], pgame.equiv G (nim (grundy_value G))\n  | G => by\n    intro hG\n    rw [impartial.equiv_iff_add_equiv_zero, ← impartial.forall_left_moves_fuzzy_iff_equiv_zero]\n    intro i\n    apply left_moves_add_cases i\n    · intro i₁\n      rw [add_move_left_inl]\n      apply (fuzzy_congr_left (add_congr_left (equiv_nim_grundy_value (G.move_left i₁)).symm)).1\n      rw [nim_add_fuzzy_zero_iff]\n      intro heq\n      rw [eq_comm, grundy_value_eq_mex_left G] at heq\n      have h := Ordinal.ne_mex _\n      rw [HEq] at h\n      exact (h i₁).irrefl\n    · intro i₂\n      rw [add_move_left_inr, ← impartial.exists_left_move_equiv_iff_fuzzy_zero]\n      revert i₂\n      rw [nim_def]\n      intro i₂\n      have h' :\n        ∃ i : G.left_moves, grundy_value (G.move_left i) = Ordinal.typein (Quotient.out (grundy_value G)).r i₂ :=\n        by\n        revert i₂\n        rw [grundy_value_eq_mex_left]\n        intro i₂\n        have hnotin : _ ∉ _ := fun hin => (le_not_le_of_lt (Ordinal.typein_lt_self i₂)).2 (cinfₛ_le' hin)\n        simpa using hnotin\n      cases' h' with i hi\n      use to_left_moves_add (Sum.inl i)\n      rw [add_move_left_inl, move_left_mk]\n      apply (add_congr_left (equiv_nim_grundy_value (G.move_left i))).trans\n      simpa only [hi] using impartial.add_self (nim (grundy_value (G.move_left i)))decreasing_by pgame_wf_tac\n#align equiv_nim_grundy_value equiv_nim_grundy_value\n\n",
 "default_nim_one_right_moves_eq":
 "@[simp]\ntheorem default_nim_one_right_moves_eq : (default : (nim 1).right_moves) = @to_right_moves_nim 1 ⟨0, zero_lt_one⟩ :=\n  rfl\n#align default_nim_one_right_moves_eq default_nim_one_right_moves_eq\n\n",
 "default_nim_one_left_moves_eq":
 "@[simp]\ntheorem default_nim_one_left_moves_eq : (default : (nim 1).left_moves) = @to_left_moves_nim 1 ⟨0, zero_lt_one⟩ :=\n  rfl\n#align default_nim_one_left_moves_eq default_nim_one_left_moves_eq\n\n"}