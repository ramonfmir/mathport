{"zero_right_moves":
 "@[simp]\ntheorem zero_right_moves : right_moves 0 = PEmpty :=\n  rfl\n#align zero_right_moves zero_right_moves\n\n",
 "zero_lt_one":
 "#print zero_lt_one /-\n@[simp]\nprotected theorem zero_lt_one : (0 : pgame) < 1 :=\n  lt_of_le_of_lf (zero_le_of_is_empty_right_moves 1) (zero_lf_le.2 ⟨default, le_rfl⟩)\n#align zero_lt_one zero_lt_one\n-/\n\n",
 "zero_lt_neg_iff":
 "@[simp]\ntheorem zero_lt_neg_iff {x : pgame} : 0 < -x ↔ x < 0 := by rw [lt_neg_iff, neg_zero]\n#align zero_lt_neg_iff zero_lt_neg_iff\n\n",
 "zero_lf_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[simp]\ntheorem zero_lf_one : pgame.lf (0 : pgame) 1 :=\n  pgame.zero_lt_one.lf\n#align zero_lf_one zero_lf_one\n\n",
 "zero_lf_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[simp]\ntheorem zero_lf_neg_iff {x : pgame} : pgame.lf 0 (-x) ↔ pgame.lf x 0 := by rw [lf_neg_iff, neg_zero]\n#align zero_lf_neg_iff zero_lf_neg_iff\n\n",
 "zero_lf_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `0 ⧏ x` on pre-games, in terms of `0 ≤`. -/\ntheorem zero_lf_le {x : pgame} : pgame.lf 0 x ↔ ∃ i, 0 ≤ x.move_left i :=\n  by\n  rw [lf_iff_exists_le]\n  simp\n#align zero_lf_le zero_lf_le\n\n",
 "zero_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `0 ⧏ x` on pre-games, in terms of `0 ⧏` two moves later. -/\ntheorem zero_lf {x : pgame} : pgame.lf 0 x ↔ ∃ i, ∀ j, pgame.lf 0 ((x.move_left i).move_right j) :=\n  by\n  rw [lf_def]\n  simp\n#align zero_lf zero_lf\n\n",
 "zero_left_moves":
 "@[simp]\ntheorem zero_left_moves : left_moves 0 = PEmpty :=\n  rfl\n#align zero_left_moves zero_left_moves\n\n",
 "zero_le_of_is_empty_right_moves":
 "@[simp]\ntheorem zero_le_of_is_empty_right_moves (x : pgame) [is_empty x.right_moves] : 0 ≤ x :=\n  zero_le.2 is_empty_elim\n#align zero_le_of_is_empty_right_moves zero_le_of_is_empty_right_moves\n\n",
 "zero_le_neg_iff":
 "@[simp]\ntheorem zero_le_neg_iff {x : pgame} : 0 ≤ -x ↔ x ≤ 0 := by rw [le_neg_iff, neg_zero]\n#align zero_le_neg_iff zero_le_neg_iff\n\n",
 "zero_le_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `0 ≤ x` on pre-games, in terms of `0 ⧏`. -/\ntheorem zero_le_lf {x : pgame} : 0 ≤ x ↔ ∀ j, pgame.lf 0 (x.move_right j) :=\n  by\n  rw [le_iff_forall_lf]\n  simp\n#align zero_le_lf zero_le_lf\n\n",
 "zero_le_add_right_neg":
 "theorem zero_le_add_right_neg (x : pgame) : 0 ≤ x + -x :=\n  (zero_le_add_left_neg x).trans add_comm_le\n#align zero_le_add_right_neg zero_le_add_right_neg\n\n",
 "zero_le_add_left_neg":
 "theorem zero_le_add_left_neg (x : pgame) : 0 ≤ -x + x :=\n  by\n  rw [← neg_le_neg_iff, neg_zero]\n  exact neg_add_le.trans (add_left_neg_le_zero _)\n#align zero_le_add_left_neg zero_le_add_left_neg\n\n",
 "zero_le":
 "#print zero_le /-\n/-- The definition of `0 ≤ x` on pre-games, in terms of `0 ≤` two moves later. -/\ntheorem zero_le {x : pgame} : 0 ≤ x ↔ ∀ j, ∃ i, 0 ≤ (x.move_right j).move_left i :=\n  by\n  rw [le_def]\n  simp\n#align zero_le zero_le\n-/\n\n",
 "zero_fuzzy_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[simp]\ntheorem zero_fuzzy_neg_iff {x : pgame} : pgame.fuzzy 0 (-x) ↔ pgame.fuzzy 0 x := by rw [← neg_fuzzy_iff, neg_zero]\n#align zero_fuzzy_neg_iff zero_fuzzy_neg_iff\n\n",
 "zero_equiv_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem zero_equiv_neg_iff {x : pgame} : pgame.equiv 0 (-x) ↔ pgame.equiv 0 x := by rw [← neg_equiv_iff, neg_zero]\n#align zero_equiv_neg_iff zero_equiv_neg_iff\n\n",
 "zero_add_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `0 + x` is equivalent to `x`. -/\ntheorem zero_add_equiv (x : pgame.{u}) : pgame.equiv (0 + x) x :=\n  (zero_add_relabelling x).equiv\n#align zero_add_equiv zero_add_equiv\n\n",
 "wf_subsequent":
 "theorem wf_subsequent : well_founded subsequent :=\n  wf_is_option.trans_gen\n#align wf_subsequent wf_subsequent\n\n",
 "wf_is_option":
 "theorem wf_is_option : well_founded is_option :=\n  ⟨fun x =>\n    move_rec_on x fun x IHl IHr =>\n      acc.intro x fun y h => by\n        induction' h with _ i _ j\n        · exact IHl i\n        · exact IHr j⟩\n#align wf_is_option wf_is_option\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[trans]\nprotected theorem equiv.trans {x y z} : pgame.equiv x y → pgame.equiv y z → pgame.equiv x z :=\n  trans\n#align equiv.trans equiv.trans\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[symm]\nprotected theorem equiv.symm {x y} : pgame.equiv x y → pgame.equiv y x :=\n  symm\n#align equiv.symm equiv.symm\n\n",
 "swap_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem fuzzy.swap_iff {x y : pgame} : pgame.fuzzy x y ↔ pgame.fuzzy y x :=\n  ⟨fuzzy.swap, fuzzy.swap⟩\n#align fuzzy.swap_iff fuzzy.swap_iff\n\n",
 "swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[symm]\ntheorem fuzzy.swap {x y : pgame} : pgame.fuzzy x y → pgame.fuzzy y x :=\n  And.symm\n#align fuzzy.swap fuzzy.swap\n\n",
 "sub_zero":
 "#print sub_zero /-\n@[simp]\ntheorem sub_zero (x : pgame) : x - 0 = x + 0 :=\n  show x + -0 = x + 0 by rw [neg_zero]\n#align sub_zero sub_zero\n-/\n\n",
 "sub_self_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem sub_self_equiv : ∀ x, pgame.equiv (x - x) 0 :=\n  add_right_neg_equiv\n#align sub_self_equiv sub_self_equiv\n\n",
 "sub_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem sub_congr_right {x y z : pgame} : pgame.equiv y z → pgame.equiv (x - y) (x - z) :=\n  sub_congr equiv_rfl\n#align sub_congr_right sub_congr_right\n\n",
 "sub_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem sub_congr_left {x y z : pgame} (h : pgame.equiv x y) : pgame.equiv (x - z) (y - z) :=\n  sub_congr h equiv_rfl\n#align sub_congr_left sub_congr_left\n\n",
 "sub_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem sub_congr {w x y z : pgame} (h₁ : pgame.equiv w x) (h₂ : pgame.equiv y z) : pgame.equiv (w - y) (x - z) :=\n  add_congr h₁ (neg_equiv_neg_iff.2 h₂)\n#align sub_congr sub_congr\n\n",
 "star_right_moves":
 "@[simp]\ntheorem star_right_moves : star.right_moves = PUnit :=\n  rfl\n#align star_right_moves star_right_moves\n\n",
 "star_move_right":
 "@[simp]\ntheorem star_move_right (x) : star.move_right x = 0 :=\n  rfl\n#align star_move_right star_move_right\n\n",
 "star_move_left":
 "@[simp]\ntheorem star_move_left (x) : star.move_left x = 0 :=\n  rfl\n#align star_move_left star_move_left\n\n",
 "star_left_moves":
 "@[simp]\ntheorem star_left_moves : star.left_moves = PUnit :=\n  rfl\n#align star_left_moves star_left_moves\n\n",
 "star_fuzzy_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem star_fuzzy_zero : pgame.fuzzy star 0 :=\n  ⟨by\n    rw [lf_zero]\n    use default\n    rintro ⟨⟩, by\n    rw [zero_lf]\n    use default\n    rintro ⟨⟩⟩\n#align star_fuzzy_zero star_fuzzy_zero\n\n",
 "right_response_spec":
 "/-- Show that the response for right provided by `right_response` preserves the right-player-wins\ncondition. -/\ntheorem right_response_spec {x : pgame} (h : x ≤ 0) (i : x.left_moves) :\n    (x.move_left i).move_right (right_response h i) ≤ 0 :=\n  Classical.choose_spec <| (le_zero.1 h) i\n#align right_response_spec right_response_spec\n\n",
 "right_moves_of_lists":
 "theorem right_moves_of_lists (L R : list pgame) : (of_lists L R).right_moves = ULift (fin R.length) :=\n  rfl\n#align right_moves_of_lists right_moves_of_lists\n\n",
 "right_moves_neg":
 "theorem right_moves_neg : ∀ x : pgame, (-x).right_moves = x.left_moves\n  | ⟨_, _, _, _⟩ => rfl\n#align right_moves_neg right_moves_neg\n\n",
 "right_moves_mk":
 "@[simp]\ntheorem right_moves_mk {xl xr xL xR} : (⟨xl, xr, xL, xR⟩ : pgame).right_moves = xr :=\n  rfl\n#align right_moves_mk right_moves_mk\n\n",
 "right_moves_add_cases":
 "theorem right_moves_add_cases {x y : pgame} (k) {P : (x + y).right_moves → Prop}\n    (hl : ∀ j, P <| to_right_moves_add (sum.inl j)) (hr : ∀ j, P <| to_right_moves_add (sum.inr j)) : P k :=\n  by\n  rw [← to_right_moves_add.apply_symm_apply k]\n  cases' to_right_moves_add.symm k with i i\n  · exact hl i\n  · exact hr i\n#align right_moves_add_cases right_moves_add_cases\n\n",
 "right_moves_add":
 "theorem right_moves_add : ∀ x y : pgame.{u}, (x + y).right_moves = Sum x.right_moves y.right_moves\n  | ⟨_, _, _, _⟩, ⟨_, _, _, _⟩ => rfl\n#align right_moves_add right_moves_add\n\n",
 "relabel_move_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem relabel_move_right' {x : pgame} {xl' xr'} (el : «expr ≃ » xl' x.left_moves) (er : «expr ≃ » xr' x.right_moves)\n    (j : xr') : move_right (relabel el er) j = x.move_right (er j) :=\n  rfl\n#align relabel_move_right' relabel_move_right'\n\n",
 "relabel_move_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem relabel_move_right {x : pgame} {xl' xr'} (el : «expr ≃ » xl' x.left_moves) (er : «expr ≃ » xr' x.right_moves)\n    (j : x.right_moves) : move_right (relabel el er) (er.symm j) = x.move_right j := by simp\n#align relabel_move_right relabel_move_right\n\n",
 "relabel_move_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem relabel_move_left' {x : pgame} {xl' xr'} (el : «expr ≃ » xl' x.left_moves) (er : «expr ≃ » xr' x.right_moves)\n    (i : xl') : move_left (relabel el er) i = x.move_left (el i) :=\n  rfl\n#align relabel_move_left' relabel_move_left'\n\n",
 "relabel_move_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem relabel_move_left {x : pgame} {xl' xr'} (el : «expr ≃ » xl' x.left_moves) (er : «expr ≃ » xr' x.right_moves)\n    (i : x.left_moves) : move_left (relabel el er) (el.symm i) = x.move_left i := by simp\n#align relabel_move_left relabel_move_left\n\n",
 "one_right_moves":
 "@[simp]\ntheorem one_right_moves : right_moves 1 = PEmpty :=\n  rfl\n#align one_right_moves one_right_moves\n\n",
 "one_move_left":
 "@[simp]\ntheorem one_move_left (x) : move_left 1 x = 0 :=\n  rfl\n#align one_move_left one_move_left\n\n",
 "one_left_moves":
 "@[simp]\ntheorem one_left_moves : left_moves 1 = PUnit :=\n  rfl\n#align one_left_moves one_left_moves\n\n",
 "of_lists_move_right'":
 "@[simp]\ntheorem of_lists_move_right' {L R : list pgame} (i : (of_lists L R).right_moves) :\n    (of_lists L R).move_right i = R.nth_le (to_of_lists_right_moves.symm i) (to_of_lists_right_moves.symm i).is_lt :=\n  rfl\n#align of_lists_move_right' of_lists_move_right'\n\n",
 "of_lists_move_right":
 "theorem of_lists_move_right {L R : list pgame} (i : fin R.length) :\n    (of_lists L R).move_right (to_of_lists_right_moves i) = R.nth_le i i.is_lt :=\n  rfl\n#align of_lists_move_right of_lists_move_right\n\n",
 "of_lists_move_left'":
 "@[simp]\ntheorem of_lists_move_left' {L R : list pgame} (i : (of_lists L R).left_moves) :\n    (of_lists L R).move_left i = L.nth_le (to_of_lists_left_moves.symm i) (to_of_lists_left_moves.symm i).is_lt :=\n  rfl\n#align of_lists_move_left' of_lists_move_left'\n\n",
 "of_lists_move_left":
 "theorem of_lists_move_left {L R : list pgame} (i : fin L.length) :\n    (of_lists L R).move_left (to_of_lists_left_moves i) = L.nth_le i i.is_lt :=\n  rfl\n#align of_lists_move_left of_lists_move_left\n\n",
 "not_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[simp]\ntheorem not_lf {x y : pgame} : ¬pgame.lf x y ↔ y ≤ x :=\n  not_le_lf.2\n#align not_lf not_lf\n\n",
 "not_le_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\nprivate theorem not_le_lf {x y : pgame} : (¬x ≤ y ↔ pgame.lf y x) ∧ (¬pgame.lf x y ↔ y ≤ x) :=\n  by\n  induction' x with xl xr xL xR IHxl IHxr generalizing y\n  induction' y with yl yr yL yR IHyl IHyr\n  simp only [mk_le_mk, mk_lf_mk, IHxl, IHxr, IHyl, IHyr, not_and_or, not_or, not_forall, not_exists, and_comm',\n    or_comm', iff_self_iff, and_self_iff]\n#align not_le_lf not_le_lf\n\n",
 "not_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n#print not_le /-\n@[simp]\nprotected theorem not_le {x y : pgame} : ¬x ≤ y ↔ pgame.lf y x :=\n  not_le_lf.1\n#align not_le not_le\n-/\n\n",
 "not_gt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf.not_gt {x y} (h : pgame.lf x y) : ¬y < x := fun h' => h.not_ge h'.le\n#align lf.not_gt lf.not_gt\n\n",
 "not_gf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem _root_.has_le.le.not_gf {x y : pgame} : x ≤ y → ¬pgame.lf y x :=\n  not_lf.2\n#align has_le.le.not_gf has_le.le.not_gf\n\n",
 "not_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf.not_ge {x y : pgame} : pgame.lf x y → ¬y ≤ x :=\n  pgame.not_le.2\n#align lf.not_ge lf.not_ge\n\n",
 "not_fuzzy_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem not_fuzzy_of_le {x y : pgame} (h : x ≤ y) : ¬pgame.fuzzy x y := fun h' => h'.2.not_ge h\n#align not_fuzzy_of_le not_fuzzy_of_le\n\n",
 "not_fuzzy_of_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem not_fuzzy_of_ge {x y : pgame} (h : y ≤ x) : ¬pgame.fuzzy x y := fun h' => h'.1.not_ge h\n#align not_fuzzy_of_ge not_fuzzy_of_ge\n\n",
 "not_fuzzy'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem equiv.not_fuzzy' {x y : pgame} (h : pgame.equiv x y) : ¬pgame.fuzzy y x :=\n  not_fuzzy_of_le h.2\n#align equiv.not_fuzzy' equiv.not_fuzzy'\n\n",
 "not_fuzzy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem equiv.not_fuzzy {x y : pgame} (h : pgame.equiv x y) : ¬pgame.fuzzy x y :=\n  not_fuzzy_of_le h.1\n#align equiv.not_fuzzy equiv.not_fuzzy\n\n",
 "not_equiv'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem fuzzy.not_equiv' {x y : pgame} (h : pgame.fuzzy x y) : ¬pgame.equiv y x := fun h' => h'.2.not_gf h.2\n#align fuzzy.not_equiv' fuzzy.not_equiv'\n\n",
 "not_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem fuzzy.not_equiv {x y : pgame} (h : pgame.fuzzy x y) : ¬pgame.equiv x y := fun h' => h'.1.not_gf h.2\n#align fuzzy.not_equiv fuzzy.not_equiv\n\n",
 "neg_star":
 "@[simp]\ntheorem neg_star : -star = star := by simp [star]\n#align neg_star neg_star\n\n",
 "neg_of_lists":
 "@[simp]\ntheorem neg_of_lists (L R : list pgame) : -of_lists L R = of_lists (R.map fun x => -x) (L.map fun x => -x) :=\n  by\n  simp only [of_lists, neg_def, list.length_map, List.nthLe_map', eq_self_iff_true, true_and_iff]\n  constructor;\n  all_goals\n    apply hfunext\n    · simp\n    · intro a a' ha\n      congr 2\n      have : ∀ {m n} (h₁ : m = n) {b : ULift (fin m)} {c : ULift (fin n)} (h₂ : HEq b c), (b.down : ℕ) = ↑c.down :=\n        by\n        rintro m n rfl b c rfl\n        rfl\n      exact this (list.length_map _ _).symm ha\n#align neg_of_lists neg_of_lists\n\n",
 "neg_lt_zero_iff":
 "@[simp]\ntheorem neg_lt_zero_iff {x : pgame} : -x < 0 ↔ 0 < x := by rw [neg_lt_iff, neg_zero]\n#align neg_lt_zero_iff neg_lt_zero_iff\n\n",
 "neg_lt_neg_iff":
 "#print neg_lt_neg_iff /-\n@[simp]\ntheorem neg_lt_neg_iff {x y : pgame} : -y < -x ↔ x < y := by\n  rw [lt_iff_le_and_lf, lt_iff_le_and_lf, neg_le_neg_iff, neg_lf_neg_iff]\n#align neg_lt_neg_iff neg_lt_neg_iff\n-/\n\n",
 "neg_lt_iff":
 "theorem neg_lt_iff {x y : pgame} : -y < x ↔ -x < y := by rw [← neg_neg x, neg_lt_neg_iff, neg_neg]\n#align neg_lt_iff neg_lt_iff\n\n",
 "neg_lf_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[simp]\ntheorem neg_lf_zero_iff {x : pgame} : pgame.lf (-x) 0 ↔ pgame.lf 0 x := by rw [neg_lf_iff, neg_zero]\n#align neg_lf_zero_iff neg_lf_zero_iff\n\n",
 "neg_lf_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[simp]\ntheorem neg_lf_neg_iff {x y : pgame} : pgame.lf (-y) (-x) ↔ pgame.lf x y :=\n  neg_le_lf_neg_iff.2\n#align neg_lf_neg_iff neg_lf_neg_iff\n\n",
 "neg_lf_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem neg_lf_iff {x y : pgame} : pgame.lf (-y) x ↔ pgame.lf (-x) y := by rw [← neg_neg x, neg_lf_neg_iff, neg_neg]\n#align neg_lf_iff neg_lf_iff\n\n",
 "neg_le_zero_iff":
 "@[simp]\ntheorem neg_le_zero_iff {x : pgame} : -x ≤ 0 ↔ 0 ≤ x := by rw [neg_le_iff, neg_zero]\n#align neg_le_zero_iff neg_le_zero_iff\n\n",
 "neg_le_neg_iff":
 "#print neg_le_neg_iff /-\n@[simp]\ntheorem neg_le_neg_iff {x y : pgame} : -y ≤ -x ↔ x ≤ y :=\n  neg_le_lf_neg_iff.1\n#align neg_le_neg_iff neg_le_neg_iff\n-/\n\n",
 "neg_le_lf_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\nprivate theorem neg_le_lf_neg_iff : ∀ {x y : pgame.{u}}, (-y ≤ -x ↔ x ≤ y) ∧ (pgame.lf (-y) (-x) ↔ pgame.lf x y)\n  | mk xl xr xL xR, mk yl yr yL yR =>\n    by\n    simp_rw [neg_def, mk_le_mk, mk_lf_mk, ← neg_def]\n    constructor\n    · rw [and_comm']\n      apply and_congr <;> exact forall_congr' fun _ => neg_le_lf_neg_iff.2\n    · rw [or_comm']\n      apply or_congr <;> exact exists_congr fun _ => neg_le_lf_neg_iff.1decreasing_by pgame_wf_tac\n#align neg_le_lf_neg_iff neg_le_lf_neg_iff\n\n",
 "neg_le_iff":
 "theorem neg_le_iff {x y : pgame} : -y ≤ x ↔ -x ≤ y := by rw [← neg_neg x, neg_le_neg_iff, neg_neg]\n#align neg_le_iff neg_le_iff\n\n",
 "neg_fuzzy_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[simp]\ntheorem neg_fuzzy_zero_iff {x : pgame} : pgame.fuzzy (-x) 0 ↔ pgame.fuzzy x 0 := by rw [neg_fuzzy_iff, neg_zero]\n#align neg_fuzzy_zero_iff neg_fuzzy_zero_iff\n\n",
 "neg_fuzzy_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[simp]\ntheorem neg_fuzzy_neg_iff {x y : pgame} : pgame.fuzzy (-x) (-y) ↔ pgame.fuzzy x y := by\n  rw [fuzzy, fuzzy, neg_lf_neg_iff, neg_lf_neg_iff, and_comm]\n#align neg_fuzzy_neg_iff neg_fuzzy_neg_iff\n\n",
 "neg_fuzzy_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem neg_fuzzy_iff {x y : pgame} : pgame.fuzzy (-x) y ↔ pgame.fuzzy x (-y) := by\n  rw [← neg_neg y, neg_fuzzy_neg_iff, neg_neg]\n#align neg_fuzzy_iff neg_fuzzy_iff\n\n",
 "neg_equiv_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem neg_equiv_zero_iff {x : pgame} : pgame.equiv (-x) 0 ↔ pgame.equiv x 0 := by rw [neg_equiv_iff, neg_zero]\n#align neg_equiv_zero_iff neg_equiv_zero_iff\n\n",
 "neg_equiv_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[simp]\ntheorem neg_equiv_neg_iff {x y : pgame} : pgame.equiv (-x) (-y) ↔ pgame.equiv x y := by\n  rw [equiv, equiv, neg_le_neg_iff, neg_le_neg_iff, and_comm]\n#align neg_equiv_neg_iff neg_equiv_neg_iff\n\n",
 "neg_equiv_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem neg_equiv_iff {x y : pgame} : pgame.equiv (-x) y ↔ pgame.equiv x (-y) := by\n  rw [← neg_neg y, neg_equiv_neg_iff, neg_neg]\n#align neg_equiv_iff neg_equiv_iff\n\n",
 "neg_def":
 "@[simp]\ntheorem neg_def {xl xr xL xR} : -mk xl xr xL xR = mk xr xl (fun j => -xR j) fun i => -xL i :=\n  rfl\n#align neg_def neg_def\n\n",
 "neg_add_le":
 "theorem neg_add_le {x y : pgame} : -(x + y) ≤ -x + -y :=\n  (neg_add_relabelling x y).le\n#align neg_add_le neg_add_le\n\n",
 "nat_succ":
 "@[simp]\nprotected theorem nat_succ (n : ℕ) : ((n + 1 : ℕ) : pgame) = n + 1 :=\n  rfl\n#align nat_succ nat_succ\n\n",
 "move_right_neg_symm'":
 "theorem move_right_neg_symm' {x : pgame} (i) : x.move_right i = -(-x).move_left (to_left_moves_neg i) := by simp\n#align move_right_neg_symm' move_right_neg_symm'\n\n",
 "move_right_neg_symm":
 "theorem move_right_neg_symm {x : pgame} (i) : x.move_right (to_left_moves_neg.symm i) = -(-x).move_left i := by simp\n#align move_right_neg_symm move_right_neg_symm\n\n",
 "move_right_neg'":
 "@[simp]\ntheorem move_right_neg' {x : pgame} (i) : (-x).move_right i = -x.move_left (to_right_moves_neg.symm i) :=\n  by\n  cases x\n  rfl\n#align move_right_neg' move_right_neg'\n\n",
 "move_right_neg":
 "theorem move_right_neg {x : pgame} (i) : (-x).move_right (to_right_moves_neg i) = -x.move_left i :=\n  by\n  cases x\n  rfl\n#align move_right_neg move_right_neg\n\n",
 "move_right_mk":
 "@[simp]\ntheorem move_right_mk {xl xr xL xR} : (⟨xl, xr, xL, xR⟩ : pgame).move_right = xR :=\n  rfl\n#align move_right_mk move_right_mk\n\n",
 "move_right":
 "theorem subsequent.move_right {x : pgame} (j : x.right_moves) : subsequent (x.move_right j) x :=\n  trans_gen.single (is_option.move_right j)\n#align subsequent.move_right subsequent.move_right\n\n",
 "move_left_neg_symm'":
 "theorem move_left_neg_symm' {x : pgame} (i) : x.move_left i = -(-x).move_right (to_right_moves_neg i) := by simp\n#align move_left_neg_symm' move_left_neg_symm'\n\n",
 "move_left_neg_symm":
 "theorem move_left_neg_symm {x : pgame} (i) : x.move_left (to_right_moves_neg.symm i) = -(-x).move_right i := by simp\n#align move_left_neg_symm move_left_neg_symm\n\n",
 "move_left_neg'":
 "@[simp]\ntheorem move_left_neg' {x : pgame} (i) : (-x).move_left i = -x.move_right (to_left_moves_neg.symm i) :=\n  by\n  cases x\n  rfl\n#align move_left_neg' move_left_neg'\n\n",
 "move_left_neg":
 "theorem move_left_neg {x : pgame} (i) : (-x).move_left (to_left_moves_neg i) = -x.move_right i :=\n  by\n  cases x\n  rfl\n#align move_left_neg move_left_neg\n\n",
 "move_left_mk":
 "@[simp]\ntheorem move_left_mk {xl xr xL xR} : (⟨xl, xr, xL, xR⟩ : pgame).move_left = xL :=\n  rfl\n#align move_left_mk move_left_mk\n\n",
 "move_left_lf_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem move_left_lf_of_le {x y : pgame} (h : x ≤ y) (i) : pgame.lf (x.move_left i) y :=\n  (le_iff_forall_lf.1 h).1 i\n#align move_left_lf_of_le move_left_lf_of_le\n\n",
 "move_left_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem move_left_lf {x : pgame} : ∀ i, pgame.lf (x.move_left i) x :=\n  le_rfl.move_left_lf\n#align move_left_lf move_left_lf\n\n",
 "move_left":
 "theorem subsequent.move_left {x : pgame} (i : x.left_moves) : subsequent (x.move_left i) x :=\n  trans_gen.single (is_option.move_left i)\n#align subsequent.move_left subsequent.move_left\n\n",
 "mk_right_moves_equiv":
 "@[simp]\ntheorem mk_right_moves_equiv {x y L R hL hR} : (@relabelling.mk x y L R hL hR).right_moves_equiv = R :=\n  rfl\n#align mk_right_moves_equiv mk_right_moves_equiv\n\n",
 "mk_right":
 "theorem subsequent.mk_right {xl xr} (xL : xl → pgame) (xR : xr → pgame) (j : xr) : subsequent (xR j) (mk xl xr xL xR) :=\n  @subsequent.move_right (mk _ _ _ _) j\n#align subsequent.mk_right subsequent.mk_right\n\n",
 "mk_lf_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem mk_lf_of_le {xl xr y j} (xL) {xR : xr → pgame} : xR j ≤ y → pgame.lf (mk xl xr xL xR) y :=\n  @lf_of_move_right_le (mk _ _ _ _) y j\n#align mk_lf_of_le mk_lf_of_le\n\n",
 "mk_lf_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- Definition of `x ⧏ y` on pre-games built using the constructor. -/\n@[simp]\ntheorem mk_lf_mk {xl xr xL xR yl yr yL yR} :\n    pgame.lf (mk xl xr xL xR) (mk yl yr yL yR) ↔ (∃ i, mk xl xr xL xR ≤ yL i) ∨ ∃ j, xR j ≤ mk yl yr yL yR :=\n  show (le_lf _ _).2 ↔ _ by\n    rw [le_lf]\n    rfl\n#align mk_lf_mk mk_lf_mk\n\n",
 "mk_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem mk_lf {xl xr} (xL : xl → pgame) (xR : xr → pgame) (j) : pgame.lf (mk xl xr xL xR) (xR j) :=\n  @lf_move_right (mk _ _ _ _) j\n#align mk_lf mk_lf\n\n",
 "mk_left_moves_equiv":
 "@[simp]\ntheorem mk_left_moves_equiv {x y L R hL hR} : (@relabelling.mk x y L R hL hR).left_moves_equiv = L :=\n  rfl\n#align mk_left_moves_equiv mk_left_moves_equiv\n\n",
 "mk_left":
 "theorem subsequent.mk_left {xl xr} (xL : xl → pgame) (xR : xr → pgame) (i : xl) : subsequent (xL i) (mk xl xr xL xR) :=\n  @subsequent.move_left (mk _ _ _ _) i\n#align subsequent.mk_left subsequent.mk_left\n\n",
 "mk_le_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n-- the orderings of the clauses here are carefully chosen so that\n--   and.left/or.inl refer to moves by Left, and\n--   and.right/or.inr refer to moves by Right.\n/-- Definition of `x ≤ y` on pre-games built using the constructor. -/\n@[simp]\ntheorem mk_le_mk {xl xr xL xR yl yr yL yR} :\n    mk xl xr xL xR ≤ mk yl yr yL yR ↔ (∀ i, pgame.lf (xL i) (mk yl yr yL yR)) ∧ ∀ j, pgame.lf (mk xl xr xL xR) (yR j) :=\n  show (le_lf _ _).1 ↔ _ by\n    rw [le_lf]\n    rfl\n#align mk_le_mk mk_le_mk\n\n",
 "mk_add_move_right_inr":
 "@[simp]\ntheorem mk_add_move_right_inr {xl xr yl yr} {xL xR yL yR} {i} :\n    (mk xl xr xL xR + mk yl yr yL yR).move_right (sum.inr i) = mk xl xr xL xR + (mk yl yr yL yR).move_right i :=\n  rfl\n#align mk_add_move_right_inr mk_add_move_right_inr\n\n",
 "mk_add_move_right_inl":
 "@[simp]\ntheorem mk_add_move_right_inl {xl xr yl yr} {xL xR yL yR} {i} :\n    (mk xl xr xL xR + mk yl yr yL yR).move_right (sum.inl i) = (mk xl xr xL xR).move_right i + mk yl yr yL yR :=\n  rfl\n#align mk_add_move_right_inl mk_add_move_right_inl\n\n",
 "mk_add_move_left_inr":
 "@[simp]\ntheorem mk_add_move_left_inr {xl xr yl yr} {xL xR yL yR} {i} :\n    (mk xl xr xL xR + mk yl yr yL yR).move_left (sum.inr i) = mk xl xr xL xR + (mk yl yr yL yR).move_left i :=\n  rfl\n#align mk_add_move_left_inr mk_add_move_left_inr\n\n",
 "mk_add_move_left_inl":
 "@[simp]\ntheorem mk_add_move_left_inl {xl xr yl yr} {xL xR yL yR} {i} :\n    (mk xl xr xL xR + mk yl yr yL yR).move_left (sum.inl i) = (mk xl xr xL xR).move_left i + mk yl yr yL yR :=\n  rfl\n#align mk_add_move_left_inl mk_add_move_left_inl\n\n",
 "mk'_right_moves_equiv":
 "@[simp]\ntheorem mk'_right_moves_equiv {x y L R hL hR} : (@relabelling.mk' x y L R hL hR).right_moves_equiv = R.symm :=\n  rfl\n#align mk'_right_moves_equiv mk'_right_moves_equiv\n\n",
 "mk'_left_moves_equiv":
 "@[simp]\ntheorem mk'_left_moves_equiv {x y L R hL hR} : (@relabelling.mk' x y L R hL hR).left_moves_equiv = L.symm :=\n  rfl\n#align mk'_left_moves_equiv mk'_left_moves_equiv\n\n",
 "lt_or_fuzzy_of_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem lt_or_fuzzy_of_lf {x y : pgame} : pgame.lf x y → x < y ∨ pgame.fuzzy x y :=\n  lf_iff_lt_or_fuzzy.1\n#align lt_or_fuzzy_of_lf lt_or_fuzzy_of_lf\n\n",
 "lt_or_equiv_or_gt_or_fuzzy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/-- Exactly one of the following is true (although we don't prove this here). -/\ntheorem lt_or_equiv_or_gt_or_fuzzy (x y : pgame) : x < y ∨ pgame.equiv x y ∨ y < x ∨ pgame.fuzzy x y :=\n  by\n  cases' le_or_gf x y with h₁ h₁ <;> cases' le_or_gf y x with h₂ h₂\n  · right\n    left\n    exact ⟨h₁, h₂⟩\n  · left\n    exact ⟨h₁, h₂⟩\n  · right\n    right\n    left\n    exact ⟨h₂, h₁⟩\n  · right\n    right\n    right\n    exact ⟨h₂, h₁⟩\n#align lt_or_equiv_or_gt_or_fuzzy lt_or_equiv_or_gt_or_fuzzy\n\n",
 "lt_or_equiv_or_gf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lt_or_equiv_or_gf (x y : pgame) : x < y ∨ pgame.equiv x y ∨ pgame.lf y x :=\n  by\n  rw [lf_iff_lt_or_fuzzy, fuzzy.swap_iff]\n  exact lt_or_equiv_or_gt_or_fuzzy x y\n#align lt_or_equiv_or_gf lt_or_equiv_or_gf\n\n",
 "lt_or_equiv_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem lt_or_equiv_of_le {x y : pgame} (h : x ≤ y) : x < y ∨ pgame.equiv x y :=\n  and_or_left.mp ⟨h, (em <| y ≤ x).swap.imp_left pgame.not_le.1⟩\n#align lt_or_equiv_of_le lt_or_equiv_of_le\n\n",
 "lt_of_lt_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[trans]\ntheorem lt_of_lt_of_equiv {x y z} (h₁ : x < y) (h₂ : pgame.equiv y z) : x < z :=\n  h₁.trans_le h₂.1\n#align lt_of_lt_of_equiv lt_of_lt_of_equiv\n\n",
 "lt_of_le_of_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lt_of_le_of_lf {x y : pgame} (h₁ : x ≤ y) (h₂ : pgame.lf x y) : x < y :=\n  ⟨h₁, h₂⟩\n#align lt_of_le_of_lf lt_of_le_of_lf\n\n",
 "lt_of_equiv_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[trans]\ntheorem lt_of_equiv_of_lt {x y z} (h₁ : pgame.equiv x y) : y < z → x < z :=\n  h₁.1.trans_lt\n#align lt_of_equiv_of_lt lt_of_equiv_of_lt\n\n",
 "lt_neg_iff":
 "theorem lt_neg_iff {x y : pgame} : y < -x ↔ x < -y := by rw [← neg_neg x, neg_lt_neg_iff, neg_neg]\n#align lt_neg_iff lt_neg_iff\n\n",
 "lt_iff_sub_pos":
 "theorem lt_iff_sub_pos {x y : pgame} : x < y ↔ 0 < y - x :=\n  ⟨fun h => lt_of_le_of_lt (zero_le_add_right_neg x) (add_lt_add_right h _), fun h =>\n    calc\n      x ≤ 0 + x := (zero_add_relabelling x).symm.le\n      _ < y - x + x := add_lt_add_right h _\n      _ ≤ y + (-x + x) := (add_assoc_relabelling _ _ _).le\n      _ ≤ y + 0 := add_le_add_left (add_left_neg_le_zero x) _\n      _ ≤ y := (add_zero_relabelling y).le\n      ⟩\n#align lt_iff_sub_pos lt_iff_sub_pos\n\n",
 "lt_iff_le_and_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lt_iff_le_and_lf {x y : pgame} : x < y ↔ x ≤ y ∧ pgame.lf x y :=\n  iff.rfl\n#align lt_iff_le_and_lf lt_iff_le_and_lf\n\n",
 "lt_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem lt_congr_right {x y₁ y₂} (hy : pgame.equiv y₁ y₂) : x < y₁ ↔ x < y₂ :=\n  lt_congr equiv_rfl hy\n#align lt_congr_right lt_congr_right\n\n",
 "lt_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem lt_congr_left {x₁ x₂ y} (hx : pgame.equiv x₁ x₂) : x₁ < y ↔ x₂ < y :=\n  lt_congr hx equiv_rfl\n#align lt_congr_left lt_congr_left\n\n",
 "lt_congr_imp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem lt_congr_imp {x₁ y₁ x₂ y₂} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) (h : x₁ < y₁) : x₂ < y₂ :=\n  hx.2.trans_lt (h.trans_le hy.1)\n#align lt_congr_imp lt_congr_imp\n\n",
 "lt_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem lt_congr {x₁ y₁ x₂ y₂} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) : x₁ < y₁ ↔ x₂ < y₂ :=\n  ⟨lt_congr_imp hx hy, lt_congr_imp hx.symm hy.symm⟩\n#align lt_congr lt_congr\n\n",
 "lf_zero_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `x ⧏ 0` on pre-games, in terms of `≤ 0`. -/\ntheorem lf_zero_le {x : pgame} : pgame.lf x 0 ↔ ∃ j, x.move_right j ≤ 0 :=\n  by\n  rw [lf_iff_exists_le]\n  simp\n#align lf_zero_le lf_zero_le\n\n",
 "lf_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `x ⧏ 0` on pre-games, in terms of `⧏ 0` two moves later. -/\ntheorem lf_zero {x : pgame} : pgame.lf x 0 ↔ ∃ j, ∀ i, pgame.lf ((x.move_right j).move_left i) 0 :=\n  by\n  rw [lf_def]\n  simp\n#align lf_zero lf_zero\n\n",
 "lf_or_equiv_or_gf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_or_equiv_or_gf (x y : pgame) : pgame.lf x y ∨ pgame.equiv x y ∨ pgame.lf y x :=\n  by\n  by_cases h : pgame.lf x y\n  · exact or.inl h\n  · right\n    cases' lt_or_equiv_of_le (pgame.not_lf.1 h) with h' h'\n    · exact or.inr h'.lf\n    · exact or.inl h'.symm\n#align lf_or_equiv_or_gf lf_or_equiv_or_gf\n\n",
 "lf_of_move_right_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_of_move_right_le {x y : pgame} {j} (h : x.move_right j ≤ y) : pgame.lf x y :=\n  lf_iff_exists_le.2 <| or.inr ⟨j, h⟩\n#align lf_of_move_right_le lf_of_move_right_le\n\n",
 "lf_of_mk_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_of_mk_le {x yl yr yL yR} : x ≤ mk yl yr yL yR → ∀ j, pgame.lf x (yR j) :=\n  lf_move_right_of_le\n#align lf_of_mk_le lf_of_mk_le\n\n",
 "lf_of_lt_of_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[trans]\ntheorem lf_of_lt_of_lf {x y z : pgame} (h₁ : x < y) (h₂ : pgame.lf y z) : pgame.lf x z :=\n  h₁.le.trans_lf h₂\n#align lf_of_lt_of_lf lf_of_lt_of_lf\n\n",
 "lf_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_of_lt {x y : pgame} (h : x < y) : pgame.lf x y :=\n  h.2\n#align lf_of_lt lf_of_lt\n\n",
 "lf_of_lf_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[trans]\ntheorem lf_of_lf_of_lt {x y z : pgame} (h₁ : pgame.lf x y) (h₂ : y < z) : pgame.lf x z :=\n  h₁.trans_le h₂.le\n#align lf_of_lf_of_lt lf_of_lf_of_lt\n\n",
 "lf_of_lf_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[trans]\ntheorem lf_of_lf_of_le {x y z : pgame} (h₁ : pgame.lf x y) (h₂ : y ≤ z) : pgame.lf x z :=\n  by\n  rw [← pgame.not_le] at h₁⊢\n  exact fun h₃ => h₁ (h₂.trans h₃)\n#align lf_of_lf_of_le lf_of_lf_of_le\n\n",
 "lf_of_lf_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[trans]\ntheorem lf_of_lf_of_equiv {x y z} (h₁ : pgame.lf x y) (h₂ : pgame.equiv y z) : pgame.lf x z :=\n  lf_congr_imp equiv_rfl h₂ h₁\n#align lf_of_lf_of_equiv lf_of_lf_of_equiv\n\n",
 "lf_of_le_of_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[trans]\ntheorem lf_of_le_of_lf {x y z : pgame} (h₁ : x ≤ y) (h₂ : pgame.lf y z) : pgame.lf x z :=\n  by\n  rw [← pgame.not_le] at h₂⊢\n  exact fun h₃ => h₂ (h₃.trans h₁)\n#align lf_of_le_of_lf lf_of_le_of_lf\n\n",
 "lf_of_le_move_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_of_le_move_left {x y : pgame} {i} (h : x ≤ y.move_left i) : pgame.lf x y :=\n  lf_iff_exists_le.2 <| or.inl ⟨i, h⟩\n#align lf_of_le_move_left lf_of_le_move_left\n\n",
 "lf_of_le_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_of_le_mk {xl xr xL xR y} : mk xl xr xL xR ≤ y → ∀ i, pgame.lf (xL i) y :=\n  move_left_lf_of_le\n#align lf_of_le_mk lf_of_le_mk\n\n",
 "lf_of_fuzzy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_of_fuzzy {x y : pgame} (h : pgame.fuzzy x y) : pgame.lf x y :=\n  lf_iff_lt_or_fuzzy.2 (or.inr h)\n#align lf_of_fuzzy lf_of_fuzzy\n\n",
 "lf_of_equiv_of_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n@[trans]\ntheorem lf_of_equiv_of_lf {x y z} (h₁ : pgame.equiv x y) : pgame.lf y z → pgame.lf x z :=\n  lf_congr_imp h₁.symm equiv_rfl\n#align lf_of_equiv_of_lf lf_of_equiv_of_lf\n\n",
 "lf_neg_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_neg_iff {x y : pgame} : pgame.lf y (-x) ↔ pgame.lf x (-y) := by rw [← neg_neg x, neg_lf_neg_iff, neg_neg]\n#align lf_neg_iff lf_neg_iff\n\n",
 "lf_move_right_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_move_right_of_le {x y : pgame} (h : x ≤ y) (j) : pgame.lf x (y.move_right j) :=\n  (le_iff_forall_lf.1 h).2 j\n#align lf_move_right_of_le lf_move_right_of_le\n\n",
 "lf_move_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_move_right {x : pgame} : ∀ j, pgame.lf x (x.move_right j) :=\n  le_rfl.lf_move_right\n#align lf_move_right lf_move_right\n\n",
 "lf_mk_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_mk_of_le {x yl yr} {yL : yl → pgame} (yR) {i} : x ≤ yL i → pgame.lf x (mk yl yr yL yR) :=\n  @lf_of_le_move_left x (mk _ _ _ _) i\n#align lf_mk_of_le lf_mk_of_le\n\n",
 "lf_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_mk {xl xr} (xL : xl → pgame) (xR : xr → pgame) (i) : pgame.lf (xL i) (mk xl xr xL xR) :=\n  @move_left_lf (mk _ _ _ _) i\n#align lf_mk lf_mk\n\n",
 "lf_irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_irrefl (x : pgame) : ¬pgame.lf x x :=\n  le_rfl.not_gf\n#align lf_irrefl lf_irrefl\n\n",
 "lf_iff_sub_zero_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_iff_sub_zero_lf {x y : pgame} : pgame.lf x y ↔ pgame.lf 0 (y - x) :=\n  ⟨fun h => (zero_le_add_right_neg x).trans_lf (add_lf_add_right h _), fun h =>\n    calc\n      x ≤ 0 + x := (zero_add_relabelling x).symm.le\n      pgame.lf _ (y - x + x) := add_lf_add_right h _\n      _ ≤ y + (-x + x) := (add_assoc_relabelling _ _ _).le\n      _ ≤ y + 0 := add_le_add_left (add_left_neg_le_zero x) _\n      _ ≤ y := (add_zero_relabelling y).le\n      ⟩\n#align lf_iff_sub_zero_lf lf_iff_sub_zero_lf\n\n",
 "lf_iff_lt_or_fuzzy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem lf_iff_lt_or_fuzzy {x y : pgame} : pgame.lf x y ↔ x < y ∨ pgame.fuzzy x y :=\n  by\n  simp only [lt_iff_le_and_lf, fuzzy, ← pgame.not_le]\n  tauto\n#align lf_iff_lt_or_fuzzy lf_iff_lt_or_fuzzy\n\n",
 "lf_iff_exists_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- Definition of `x ⧏ y` on pre-games, in terms of `≤` -/\ntheorem lf_iff_exists_le {x y : pgame} : pgame.lf x y ↔ (∃ i, x ≤ y.move_left i) ∨ ∃ j, x.move_right j ≤ y :=\n  by\n  cases x\n  cases y\n  exact mk_lf_mk\n#align lf_iff_exists_le lf_iff_exists_le\n\n",
 "lf_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `x ⧏ y` on pre-games, in terms of `⧏` two moves later. -/\ntheorem lf_def {x y : pgame} :\n    pgame.lf x y ↔\n      (∃ i, (∀ i', pgame.lf (x.move_left i') (y.move_left i)) ∧ ∀ j, pgame.lf x ((y.move_left i).move_right j)) ∨\n        ∃ j, (∀ i, pgame.lf ((x.move_right j).move_left i) y) ∧ ∀ j', pgame.lf (x.move_right j) (y.move_right j') :=\n  by\n  rw [lf_iff_exists_le]\n  conv =>\n    lhs\n    simp only [le_iff_forall_lf]\n#align lf_def lf_def\n\n",
 "lf_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_congr_right {x y₁ y₂} (hy : pgame.equiv y₁ y₂) : pgame.lf x y₁ ↔ pgame.lf x y₂ :=\n  lf_congr equiv_rfl hy\n#align lf_congr_right lf_congr_right\n\n",
 "lf_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_congr_left {x₁ x₂ y} (hx : pgame.equiv x₁ x₂) : pgame.lf x₁ y ↔ pgame.lf x₂ y :=\n  lf_congr hx equiv_rfl\n#align lf_congr_left lf_congr_left\n\n",
 "lf_congr_imp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_congr_imp {x₁ y₁ x₂ y₂} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) :\n    pgame.lf x₁ y₁ → pgame.lf x₂ y₂ :=\n  (lf_congr hx hy).1\n#align lf_congr_imp lf_congr_imp\n\n",
 "lf_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem lf_congr {x₁ y₁ x₂ y₂} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) : pgame.lf x₁ y₁ ↔ pgame.lf x₂ y₂ :=\n  pgame.not_le.symm.trans <| (not_congr (le_congr hy hx)).trans pgame.not_le\n#align lf_congr lf_congr\n\n",
 "left_response_spec":
 "/-- Show that the response for left provided by `left_response` preserves the left-player-wins\ncondition. -/\ntheorem left_response_spec {x : pgame} (h : 0 ≤ x) (j : x.right_moves) :\n    0 ≤ (x.move_right j).move_left (left_response h j) :=\n  Classical.choose_spec <| (zero_le.1 h) j\n#align left_response_spec left_response_spec\n\n",
 "left_moves_of_lists":
 "-- TODO define this at the level of games, as well, and perhaps also for finsets of games.\ntheorem left_moves_of_lists (L R : list pgame) : (of_lists L R).left_moves = ULift (fin L.length) :=\n  rfl\n#align left_moves_of_lists left_moves_of_lists\n\n",
 "left_moves_neg":
 "theorem left_moves_neg : ∀ x : pgame, (-x).left_moves = x.right_moves\n  | ⟨_, _, _, _⟩ => rfl\n#align left_moves_neg left_moves_neg\n\n",
 "left_moves_mk":
 "/-\nCopyright (c) 2019 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Reid Barton, Mario Carneiro, Isabel Longbottom, Scott Morrison\n-/\n@[simp]\ntheorem left_moves_mk {xl xr xL xR} : (⟨xl, xr, xL, xR⟩ : pgame).left_moves = xl :=\n  rfl\n#align left_moves_mk left_moves_mk\n\n",
 "left_moves_add_cases":
 "theorem left_moves_add_cases {x y : pgame} (k) {P : (x + y).left_moves → Prop}\n    (hl : ∀ i, P <| to_left_moves_add (sum.inl i)) (hr : ∀ i, P <| to_left_moves_add (sum.inr i)) : P k :=\n  by\n  rw [← to_left_moves_add.apply_symm_apply k]\n  cases' to_left_moves_add.symm k with i i\n  · exact hl i\n  · exact hr i\n#align left_moves_add_cases left_moves_add_cases\n\n",
 "left_moves_add":
 "theorem left_moves_add : ∀ x y : pgame.{u}, (x + y).left_moves = Sum x.left_moves y.left_moves\n  | ⟨_, _, _, _⟩, ⟨_, _, _, _⟩ => rfl\n#align left_moves_add left_moves_add\n\n",
 "le_zero_of_is_empty_left_moves":
 "@[simp]\ntheorem le_zero_of_is_empty_left_moves (x : pgame) [is_empty x.left_moves] : x ≤ 0 :=\n  le_zero.2 is_empty_elim\n#align le_zero_of_is_empty_left_moves le_zero_of_is_empty_left_moves\n\n",
 "le_zero_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- The definition of `x ≤ 0` on pre-games, in terms of `⧏ 0`. -/\ntheorem le_zero_lf {x : pgame} : x ≤ 0 ↔ ∀ i, pgame.lf (x.move_left i) 0 :=\n  by\n  rw [le_iff_forall_lf]\n  simp\n#align le_zero_lf le_zero_lf\n\n",
 "le_zero":
 "/-- The definition of `x ≤ 0` on pre-games, in terms of `≤ 0` two moves later. -/\ntheorem le_zero {x : pgame} : x ≤ 0 ↔ ∀ i, ∃ j, (x.move_left i).move_right j ≤ 0 :=\n  by\n  rw [le_def]\n  simp\n#align le_zero le_zero\n\n",
 "le_trans_aux":
 "/- We prove that `x ≤ y → y ≤ z ← x ≤ z` inductively, by also simultaneously proving its cyclic\nreorderings. This auxiliary lemma is used during said induction. -/\nprivate theorem le_trans_aux {x y z : pgame} (h₁ : ∀ {i}, y ≤ z → z ≤ x.move_left i → y ≤ x.move_left i)\n    (h₂ : ∀ {j}, z.move_right j ≤ x → x ≤ y → z.move_right j ≤ y) (hxy : x ≤ y) (hyz : y ≤ z) : x ≤ z :=\n  le_of_forall_lf (fun i => pgame.not_le.1 fun h => (h₁ hyz h).not_gf <| hxy.move_left_lf i) fun j =>\n    pgame.not_le.1 fun h => (h₂ h hxy).not_gf <| hyz.lf_move_right j\n#align le_trans_aux le_trans_aux\n\n",
 "le_or_gf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem le_or_gf (x y : pgame) : x ≤ y ∨ pgame.lf y x :=\n  by\n  rw [← pgame.not_le]\n  apply em\n#align le_or_gf le_or_gf\n\n",
 "le_of_le_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[trans]\ntheorem le_of_le_of_equiv {x y z} (h₁ : x ≤ y) (h₂ : pgame.equiv y z) : x ≤ z :=\n  h₁.trans h₂.1\n#align le_of_le_of_equiv le_of_le_of_equiv\n\n",
 "le_of_forall_lt":
 "#print le_of_forall_lt /-\n/-- This special case of `pgame.le_of_forall_lf` is useful when dealing with surreals, where `<` is\npreferred over `⧏`. -/\ntheorem le_of_forall_lt {x y : pgame} (h₁ : ∀ i, x.move_left i < y) (h₂ : ∀ j, x < y.move_right j) : x ≤ y :=\n  le_of_forall_lf (fun i => (h₁ i).lf) fun i => (h₂ i).lf\n#align le_of_forall_lt le_of_forall_lt\n-/\n\n",
 "le_of_forall_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem le_of_forall_lf {x y : pgame} (h₁ : ∀ i, pgame.lf (x.move_left i) y) (h₂ : ∀ j, pgame.lf x (y.move_right j)) :\n    x ≤ y :=\n  le_iff_forall_lf.2 ⟨h₁, h₂⟩\n#align le_of_forall_lf le_of_forall_lf\n\n",
 "le_of_equiv_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[trans]\ntheorem le_of_equiv_of_le {x y z} (h₁ : pgame.equiv x y) : y ≤ z → x ≤ z :=\n  h₁.1.trans\n#align le_of_equiv_of_le le_of_equiv_of_le\n\n",
 "le_neg_iff":
 "theorem le_neg_iff {x y : pgame} : y ≤ -x ↔ x ≤ -y := by rw [← neg_neg x, neg_le_neg_iff, neg_neg]\n#align le_neg_iff le_neg_iff\n\n",
 "le_iff_sub_nonneg":
 "theorem le_iff_sub_nonneg {x y : pgame} : x ≤ y ↔ 0 ≤ y - x :=\n  ⟨fun h => (zero_le_add_right_neg x).trans (add_le_add_right h _), fun h =>\n    calc\n      x ≤ 0 + x := (zero_add_relabelling x).symm.le\n      _ ≤ y - x + x := add_le_add_right h _\n      _ ≤ y + (-x + x) := (add_assoc_relabelling _ _ _).le\n      _ ≤ y + 0 := add_le_add_left (add_left_neg_le_zero x) _\n      _ ≤ y := (add_zero_relabelling y).le\n      ⟩\n#align le_iff_sub_nonneg le_iff_sub_nonneg\n\n",
 "le_iff_forall_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/-- Definition of `x ≤ y` on pre-games, in terms of `⧏` -/\ntheorem le_iff_forall_lf {x y : pgame} : x ≤ y ↔ (∀ i, pgame.lf (x.move_left i) y) ∧ ∀ j, pgame.lf x (y.move_right j) :=\n  by\n  cases x\n  cases y\n  exact mk_le_mk\n#align le_iff_forall_lf le_iff_forall_lf\n\n",
 "le_def":
 "/-- The definition of `x ≤ y` on pre-games, in terms of `≤` two moves later. -/\ntheorem le_def {x y : pgame} :\n    x ≤ y ↔\n      (∀ i, (∃ i', x.move_left i ≤ y.move_left i') ∨ ∃ j, (x.move_left i).move_right j ≤ y) ∧\n        ∀ j, (∃ i, x ≤ (y.move_right j).move_left i) ∨ ∃ j', x.move_right j' ≤ y.move_right j :=\n  by\n  rw [le_iff_forall_lf]\n  conv =>\n    lhs\n    simp only [lf_iff_exists_le]\n#align le_def le_def\n\n",
 "le_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem le_congr_right {x y₁ y₂} (hy : pgame.equiv y₁ y₂) : x ≤ y₁ ↔ x ≤ y₂ :=\n  le_congr equiv_rfl hy\n#align le_congr_right le_congr_right\n\n",
 "le_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem le_congr_left {x₁ x₂ y} (hx : pgame.equiv x₁ x₂) : x₁ ≤ y ↔ x₂ ≤ y :=\n  le_congr hx equiv_rfl\n#align le_congr_left le_congr_left\n\n",
 "le_congr_imp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem le_congr_imp {x₁ y₁ x₂ y₂} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) (h : x₁ ≤ y₁) : x₂ ≤ y₂ :=\n  hx.2.trans (h.trans hy.1)\n#align le_congr_imp le_congr_imp\n\n",
 "le_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem le_congr {x₁ y₁ x₂ y₂} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) : x₁ ≤ y₁ ↔ x₂ ≤ y₂ :=\n  ⟨le_congr_imp hx hy, le_congr_imp hx.symm hy.symm⟩\n#align le_congr le_congr\n\n",
 "le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.relabelling -/\ntheorem le : ∀ {x y : pgame} (r : pgame.relabelling x y), x ≤ y\n  | x, y, r =>\n    le_def.2 ⟨fun i => or.inl ⟨_, (r.move_left i).le⟩, fun j => or.inr ⟨_, (r.move_right_symm j).le⟩⟩decreasing_by\n  pgame_wf_tac\n#align le le\n\n",
 "is_option_neg_neg":
 "@[simp]\ntheorem is_option_neg_neg {x y : pgame} : is_option (-x) (-y) ↔ is_option x y := by rw [is_option_neg, neg_neg]\n#align is_option_neg_neg is_option_neg_neg\n\n",
 "is_option_neg":
 "theorem is_option_neg {x y : pgame} : is_option x (-y) ↔ is_option (-x) y :=\n  by\n  rw [is_option_iff, is_option_iff, or_comm']\n  cases y;\n  apply or_congr <;>\n    · apply exists_congr\n      intro\n      rw [← neg_eq_iff_neg_eq]\n      exact eq_comm\n#align is_option_neg is_option_neg\n\n",
 "isEmpty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n#print Equiv.isEmpty /-\ntheorem Equiv.isEmpty (x : pgame) [is_empty x.left_moves] [is_empty x.right_moves] : pgame.equiv x 0 :=\n  (relabelling.is_empty x).equiv\n#align equiv.is_empty Equiv.isEmpty\n-/\n\n",
 "ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.relabelling -/\n#print GE.ge /-\ntheorem GE.ge {x y : pgame} (r : pgame.relabelling x y) : y ≤ x :=\n  r.symm.le\n#align ge GE.ge\n-/\n\n",
 "fuzzy_of_fuzzy_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[trans]\ntheorem fuzzy_of_fuzzy_of_equiv {x y z} (h₁ : pgame.fuzzy x y) (h₂ : pgame.equiv y z) : pgame.fuzzy x z :=\n  (fuzzy_congr_right h₂).1 h₁\n#align fuzzy_of_fuzzy_of_equiv fuzzy_of_fuzzy_of_equiv\n\n",
 "fuzzy_of_equiv_of_fuzzy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n@[trans]\ntheorem fuzzy_of_equiv_of_fuzzy {x y z} (h₁ : pgame.equiv x y) (h₂ : pgame.fuzzy y z) : pgame.fuzzy x z :=\n  (fuzzy_congr_left h₁).2 h₂\n#align fuzzy_of_equiv_of_fuzzy fuzzy_of_equiv_of_fuzzy\n\n",
 "fuzzy_irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem fuzzy_irrefl (x : pgame) : ¬pgame.fuzzy x x := fun h => lf_irrefl x h.1\n#align fuzzy_irrefl fuzzy_irrefl\n\n",
 "fuzzy_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem fuzzy_congr_right {x y₁ y₂} (hy : pgame.equiv y₁ y₂) : pgame.fuzzy x y₁ ↔ pgame.fuzzy x y₂ :=\n  fuzzy_congr equiv_rfl hy\n#align fuzzy_congr_right fuzzy_congr_right\n\n",
 "fuzzy_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem fuzzy_congr_left {x₁ x₂ y} (hx : pgame.equiv x₁ x₂) : pgame.fuzzy x₁ y ↔ pgame.fuzzy x₂ y :=\n  fuzzy_congr hx equiv_rfl\n#align fuzzy_congr_left fuzzy_congr_left\n\n",
 "fuzzy_congr_imp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem fuzzy_congr_imp {x₁ y₁ x₂ y₂ : pgame} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) :\n    pgame.fuzzy x₁ y₁ → pgame.fuzzy x₂ y₂ :=\n  (fuzzy_congr hx hy).1\n#align fuzzy_congr_imp fuzzy_congr_imp\n\n",
 "fuzzy_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.fuzzy -/\ntheorem fuzzy_congr {x₁ y₁ x₂ y₂ : pgame} (hx : pgame.equiv x₁ x₂) (hy : pgame.equiv y₁ y₂) :\n    pgame.fuzzy x₁ y₁ ↔ pgame.fuzzy x₂ y₂ :=\n  show _ ∧ _ ↔ _ ∧ _ by rw [lf_congr hx hy, lf_congr hy hx]\n#align fuzzy_congr fuzzy_congr\n\n",
 "equiv_rfl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n@[refl, simp]\ntheorem equiv_rfl {x} : pgame.equiv x x :=\n  refl x\n#align equiv_rfl equiv_rfl\n\n",
 "equiv_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_refl (x) : pgame.equiv x x :=\n  refl x\n#align equiv_refl equiv_refl\n\n",
 "equiv_of_mk_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_of_mk_equiv {x y : pgame} (L : «expr ≃ » x.left_moves y.left_moves)\n    (R : «expr ≃ » x.right_moves y.right_moves) (hl : ∀ i, pgame.equiv (x.move_left i) (y.move_left (L i)))\n    (hr : ∀ j, pgame.equiv (x.move_right j) (y.move_right (R j))) : pgame.equiv x y :=\n  by\n  fconstructor <;> rw [le_def]\n  · exact ⟨fun i => or.inl ⟨_, (hl i).1⟩, fun j => or.inr ⟨_, by simpa using (hr (R.symm j)).1⟩⟩\n  · exact ⟨fun i => or.inl ⟨_, by simpa using (hl (L.symm i)).2⟩, fun j => or.inr ⟨_, (hr j).2⟩⟩\n#align equiv_of_mk_equiv equiv_of_mk_equiv\n\n",
 "equiv_of_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_of_eq {x y} (h : x = y) : pgame.equiv x y := by subst h\n#align equiv_of_eq equiv_of_eq\n\n",
 "equiv_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_congr_right {x₁ x₂} : pgame.equiv x₁ x₂ ↔ ∀ y₁, pgame.equiv x₁ y₁ ↔ pgame.equiv x₂ y₁ :=\n  ⟨fun h y₁ => ⟨fun h' => h.symm.trans h', fun h' => h.trans h'⟩, fun h => (h x₂).2 <| equiv_rfl⟩\n#align equiv_congr_right equiv_congr_right\n\n",
 "equiv_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem equiv_congr_left {y₁ y₂} : pgame.equiv y₁ y₂ ↔ ∀ x₁, pgame.equiv x₁ y₁ ↔ pgame.equiv x₁ y₂ :=\n  ⟨fun h x₁ => ⟨fun h' => h'.trans h, fun h' => h'.trans h.symm⟩, fun h => (h y₁).1 <| equiv_rfl⟩\n#align equiv_congr_left equiv_congr_left\n\n",
 "equiv_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\nprotected theorem equiv_comm {x y} : pgame.equiv x y ↔ pgame.equiv y x :=\n  comm\n#align equiv_comm equiv_comm\n\n",
 "equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.relabelling -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- A relabelling lets us prove equivalence of games. -/\ntheorem equiv (r : pgame.relabelling x y) : pgame.equiv x y :=\n  ⟨r.le, r.ge⟩\n#align equiv equiv\n\n",
 "add_zero_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/-- `x + 0` is equivalent to `x`. -/\ntheorem add_zero_equiv (x : pgame.{u}) : pgame.equiv (x + 0) x :=\n  (add_zero_relabelling x).equiv\n#align add_zero_equiv add_zero_equiv\n\n",
 "add_right_neg_le_zero":
 "theorem add_right_neg_le_zero (x : pgame) : x + -x ≤ 0 :=\n  add_comm_le.trans (add_left_neg_le_zero x)\n#align add_right_neg_le_zero add_right_neg_le_zero\n\n",
 "add_right_neg_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_right_neg_equiv (x : pgame) : pgame.equiv (x + -x) 0 :=\n  ⟨add_right_neg_le_zero x, zero_le_add_right_neg x⟩\n#align add_right_neg_equiv add_right_neg_equiv\n\n",
 "add_move_right_inr":
 "@[simp]\ntheorem add_move_right_inr (x : pgame) {y : pgame} (i) :\n    (x + y).move_right (to_right_moves_add (sum.inr i)) = x + y.move_right i :=\n  by\n  cases x\n  cases y\n  rfl\n#align add_move_right_inr add_move_right_inr\n\n",
 "add_move_right_inl":
 "@[simp]\ntheorem add_move_right_inl {x : pgame} (y : pgame) (i) :\n    (x + y).move_right (to_right_moves_add (sum.inl i)) = x.move_right i + y :=\n  by\n  cases x\n  cases y\n  rfl\n#align add_move_right_inl add_move_right_inl\n\n",
 "add_move_left_inr":
 "@[simp]\ntheorem add_move_left_inr (x : pgame) {y : pgame} (i) :\n    (x + y).move_left (to_left_moves_add (sum.inr i)) = x + y.move_left i :=\n  by\n  cases x\n  cases y\n  rfl\n#align add_move_left_inr add_move_left_inr\n\n",
 "add_move_left_inl":
 "@[simp]\ntheorem add_move_left_inl {x : pgame} (y : pgame) (i) :\n    (x + y).move_left (to_left_moves_add (sum.inl i)) = x.move_left i + y :=\n  by\n  cases x\n  cases y\n  rfl\n#align add_move_left_inl add_move_left_inl\n\n",
 "add_lf_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem add_lf_add_right {y z : pgame} (h : pgame.lf y z) (x) : pgame.lf (y + x) (z + x) :=\n  suffices z + x ≤ y + x → z ≤ y by\n    rw [← pgame.not_le] at h⊢\n    exact mt this h\n  fun w =>\n  calc\n    z ≤ z + 0 := (add_zero_relabelling _).symm.le\n    _ ≤ z + (x + -x) := add_le_add_left (zero_le_add_right_neg x) _\n    _ ≤ z + x + -x := (add_assoc_relabelling _ _ _).symm.le\n    _ ≤ y + x + -x := add_le_add_right w _\n    _ ≤ y + (x + -x) := (add_assoc_relabelling _ _ _).le\n    _ ≤ y + 0 := add_le_add_left (add_right_neg_le_zero x) _\n    _ ≤ y := (add_zero_relabelling _).le\n    \n#align add_lf_add_right add_lf_add_right\n\n",
 "add_lf_add_of_lf_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem add_lf_add_of_lf_of_le {w x y z : pgame} (hwx : pgame.lf w x) (hyz : y ≤ z) : pgame.lf (w + y) (x + z) :=\n  lf_of_lf_of_le (add_lf_add_right hwx y) (add_le_add_left hyz x)\n#align add_lf_add_of_lf_of_le add_lf_add_of_lf_of_le\n\n",
 "add_lf_add_of_le_of_lf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem add_lf_add_of_le_of_lf {w x y z : pgame} (hwx : w ≤ x) (hyz : pgame.lf y z) : pgame.lf (w + y) (x + z) :=\n  lf_of_le_of_lf (add_le_add_right hwx y) (add_lf_add_left hyz x)\n#align add_lf_add_of_le_of_lf add_lf_add_of_le_of_lf\n\n",
 "add_lf_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.lf -/\ntheorem add_lf_add_left {y z : pgame} (h : pgame.lf y z) (x) : pgame.lf (x + y) (x + z) :=\n  by\n  rw [lf_congr add_comm_equiv add_comm_equiv]\n  apply add_lf_add_right h\n#align add_lf_add_left add_lf_add_left\n\n",
 "add_left_neg_le_zero":
 "theorem add_left_neg_le_zero : ∀ x : pgame, -x + x ≤ 0\n  | ⟨xl, xr, xL, xR⟩ =>\n    le_zero.2 fun i => by\n      cases i\n      · -- If Left played in -x, Right responds with the same move in x.\n        refine' ⟨@to_right_moves_add _ ⟨_, _, _, _⟩ (sum.inr i), _⟩\n        convert @add_left_neg_le_zero (xR i)\n        apply add_move_right_inr\n      · -- If Left in x, Right responds with the same move in -x.\n        dsimp\n        refine' ⟨@to_right_moves_add ⟨_, _, _, _⟩ _ (sum.inl i), _⟩\n        convert @add_left_neg_le_zero (xL i)\n        apply add_move_right_inl\n#align add_left_neg_le_zero add_left_neg_le_zero\n\n",
 "add_left_neg_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_left_neg_equiv (x : pgame) : pgame.equiv (-x + x) 0 :=\n  ⟨add_left_neg_le_zero x, zero_le_add_left_neg x⟩\n#align add_left_neg_equiv add_left_neg_equiv\n\n",
 "add_le_add_right'":
 "private theorem add_le_add_right' : ∀ {x y z : pgame} (h : x ≤ y), x + z ≤ y + z\n  | mk xl xr xL xR, mk yl yr yL yR, mk zl zr zL zR => fun h =>\n    by\n    refine' le_def.2 ⟨fun i => _, fun i => _⟩ <;> cases i\n    · rw [le_def] at h\n      cases h\n      rcases h_left i with (⟨i', ih⟩ | ⟨j, jh⟩)\n      · exact or.inl ⟨to_left_moves_add (sum.inl i'), add_le_add_right' ih⟩\n      · refine' or.inr ⟨to_right_moves_add (sum.inl j), _⟩\n        convert add_le_add_right' jh\n        apply add_move_right_inl\n    · exact or.inl ⟨@to_left_moves_add _ ⟨_, _, _, _⟩ (sum.inr i), add_le_add_right' h⟩\n    · rw [le_def] at h\n      cases h\n      rcases h_right i with (⟨i, ih⟩ | ⟨j', jh⟩)\n      · refine' or.inl ⟨to_left_moves_add (sum.inl i), _⟩\n        convert add_le_add_right' ih\n        apply add_move_left_inl\n      · exact or.inr ⟨to_right_moves_add (sum.inl j'), add_le_add_right' jh⟩\n    · exact or.inr ⟨@to_right_moves_add _ ⟨_, _, _, _⟩ (sum.inr i), add_le_add_right' h⟩decreasing_by pgame_wf_tac\n#align add_le_add_right' add_le_add_right'\n\n",
 "add_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_congr_right {x y z : pgame} : pgame.equiv y z → pgame.equiv (x + y) (x + z) :=\n  add_congr equiv_rfl\n#align add_congr_right add_congr_right\n\n",
 "add_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_congr_left {x y z : pgame} (h : pgame.equiv x y) : pgame.equiv (x + z) (y + z) :=\n  add_congr h equiv_rfl\n#align add_congr_left add_congr_left\n\n",
 "add_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_congr {w x y z : pgame} (h₁ : pgame.equiv w x) (h₂ : pgame.equiv y z) : pgame.equiv (w + y) (x + z) :=\n  ⟨(add_le_add_left h₂.1 w).trans (add_le_add_right h₁.1 z), (add_le_add_left h₂.2 x).trans (add_le_add_right h₁.2 y)⟩\n#align add_congr add_congr\n\n",
 "add_comm_le":
 "theorem add_comm_le {x y : pgame} : x + y ≤ y + x :=\n  (add_comm_relabelling x y).le\n#align add_comm_le add_comm_le\n\n",
 "add_comm_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_comm_equiv {x y : pgame} : pgame.equiv (x + y) (y + x) :=\n  (add_comm_relabelling x y).equiv\n#align add_comm_equiv add_comm_equiv\n\n",
 "add_assoc_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pgame.equiv -/\ntheorem add_assoc_equiv {x y z : pgame} : pgame.equiv (x + y + z) (x + (y + z)) :=\n  (add_assoc_relabelling x y z).equiv\n#align add_assoc_equiv add_assoc_equiv\n\n"}