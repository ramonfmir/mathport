{"zero_CNF":
 "theorem zero_CNF {o : ordinal} (ho : o ≠ 0) : CNF 0 o = [⟨0, o⟩] := by simp [CNF_ne_zero ho]\n#align zero_CNF zero_CNF\n\n",
 "one_CNF":
 "theorem one_CNF {o : ordinal} (ho : o ≠ 0) : CNF 1 o = [⟨0, o⟩] := by simp [CNF_ne_zero ho]\n#align one_CNF one_CNF\n\n",
 "CNF_zero":
 "@[simp]\ntheorem CNF_zero (b : ordinal) : CNF b 0 = [] :=\n  CNF_rec_zero b _ _\n#align CNF_zero CNF_zero\n\n",
 "CNF_sorted":
 "/-- The exponents of the Cantor normal form are decreasing. -/\ntheorem CNF_sorted (b o : ordinal) : ((CNF b o).map prod.fst).sorted (· > ·) :=\n  by\n  refine' CNF_rec b _ (fun o ho IH => _) o\n  · simp\n  · cases' le_or_lt b 1 with hb hb\n    · simp [CNF_of_le_one hb ho]\n    · cases' lt_or_le o b with hob hbo\n      · simp [CNF_of_lt ho hob]\n      · rw [CNF_ne_zero ho, list.map_cons, list.sorted_cons]\n        refine' ⟨fun a H => _, IH⟩\n        rw [List.mem_map'] at H\n        rcases H with ⟨⟨a, a'⟩, H, rfl⟩\n        exact (CNF_fst_le_log H).trans_lt (log_mod_opow_log_lt_log_self hb ho hbo)\n#align CNF_sorted CNF_sorted\n\n",
 "CNF_snd_lt":
 "/-- Every coefficient in the Cantor normal form `CNF b o` is less than `b`. -/\ntheorem CNF_snd_lt {b o : ordinal.{u}} (hb : 1 < b) {x : ordinal × ordinal} : x ∈ CNF b o → x.2 < b :=\n  by\n  refine' CNF_rec b _ (fun o ho IH => _) o\n  · simp\n  · rw [CNF_ne_zero ho]\n    rintro (rfl | h)\n    · simpa using div_opow_log_lt o hb\n    · exact IH h\n#align CNF_snd_lt CNF_snd_lt\n\n",
 "CNF_rec_zero":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem CNF_rec_zero {C : ordinal → Sort _} (b : ordinal) (H0 : C 0) (H : ∀ o, o ≠ 0 → C (o % b ^ log b o) → C o) :\n    @CNF_rec b C H0 H 0 = H0 := by\n  rw [CNF_rec, dif_pos rfl]\n  rfl\n#align CNF_rec_zero CNF_rec_zero\n\n",
 "CNF_rec_pos":
 "theorem CNF_rec_pos (b : ordinal) {o : ordinal} {C : ordinal → Sort _} (ho : o ≠ 0) (H0 : C 0)\n    (H : ∀ o, o ≠ 0 → C (o % b ^ log b o) → C o) : @CNF_rec b C H0 H o = H o ho (@CNF_rec b C H0 H _) := by\n  rw [CNF_rec, dif_neg ho]\n#align CNF_rec_pos CNF_rec_pos\n\n",
 "CNF_of_lt":
 "theorem CNF_of_lt {b o : ordinal} (ho : o ≠ 0) (hb : o < b) : CNF b o = [⟨0, o⟩] := by\n  simp [CNF_ne_zero ho, log_eq_zero hb]\n#align CNF_of_lt CNF_of_lt\n\n",
 "CNF_of_le_one":
 "theorem CNF_of_le_one {b o : ordinal} (hb : b ≤ 1) (ho : o ≠ 0) : CNF b o = [⟨0, o⟩] :=\n  by\n  rcases le_one_iff.1 hb with (rfl | rfl)\n  · exact zero_CNF ho\n  · exact one_CNF ho\n#align CNF_of_le_one CNF_of_le_one\n\n",
 "CNF_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n/-- Recursive definition for the Cantor normal form. -/\ntheorem CNF_ne_zero {b o : ordinal} (ho : o ≠ 0) :\n    CNF b o = sym.cons' (log b o, o / b ^ log b o) (CNF b (o % b ^ log b o)) :=\n  CNF_rec_pos b ho _ _\n#align CNF_ne_zero CNF_ne_zero\n\n",
 "CNF_lt_snd":
 "/-- Every coefficient in a Cantor normal form is positive. -/\ntheorem CNF_lt_snd {b o : ordinal.{u}} {x : ordinal × ordinal} : x ∈ CNF b o → 0 < x.2 :=\n  by\n  refine' CNF_rec b _ (fun o ho IH => _) o\n  · simp\n  · rcases eq_zero_or_pos b with (rfl | hb)\n    · rw [zero_CNF ho, List.mem_singleton]\n      rintro rfl\n      exact ordinal.pos_iff_ne_zero.2 ho\n    · rw [CNF_ne_zero ho]\n      rintro (rfl | h)\n      · simp\n        rw [div_pos]\n        · exact opow_log_le_self _ ho\n        · exact (opow_pos _ hb).ne'\n      · exact IH h\n#align CNF_lt_snd CNF_lt_snd\n\n",
 "CNF_fst_le_log":
 "/-- Every exponent in the Cantor normal form `CNF b o` is less or equal to `log b o`. -/\ntheorem CNF_fst_le_log {b o : ordinal.{u}} {x : ordinal × ordinal} : x ∈ CNF b o → x.1 ≤ log b o :=\n  by\n  refine' CNF_rec b _ (fun o ho H => _) o\n  · rw [CNF_zero]\n    exact false.elim\n  · rw [CNF_ne_zero ho, List.mem_cons]\n    rintro (rfl | h)\n    · exact le_rfl\n    · exact (H h).trans (log_mono_right _ (mod_opow_log_lt_self b ho).le)\n#align CNF_fst_le_log CNF_fst_le_log\n\n",
 "CNF_fst_le":
 "/-- Every exponent in the Cantor normal form `CNF b o` is less or equal to `o`. -/\ntheorem CNF_fst_le {b o : ordinal.{u}} {x : ordinal × ordinal} (h : x ∈ CNF b o) : x.1 ≤ o :=\n  (CNF_fst_le_log h).trans <| log_le_self _ _\n#align CNF_fst_le CNF_fst_le\n\n",
 "CNF_foldr":
 "/-- Evaluating the Cantor normal form of an ordinal returns the ordinal. -/\ntheorem CNF_foldr (b o : ordinal) : (CNF b o).foldr (fun p r => b ^ p.1 * p.2 + r) 0 = o :=\n  CNF_rec b\n    (by\n      rw [CNF_zero]\n      rfl)\n    (fun o ho IH => by rw [CNF_ne_zero ho, List.foldr_cons, IH, div_add_mod]) o\n#align CNF_foldr CNF_foldr\n\n"}