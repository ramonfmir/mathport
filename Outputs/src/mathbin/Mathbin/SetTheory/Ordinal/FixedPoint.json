{"sup_iterate_eq_nfp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n@[simp]\ntheorem sup_iterate_eq_nfp (f : Ordinal.{u} → Ordinal.{u}) : (fun a => sup fun n : ℕ => («expr ^[ ]» f n) a) = nfp f :=\n  by\n  refine' funext fun a => le_antisymm _ (sup_le fun l => _)\n  · rw [sup_le_iff]\n    intro n\n    rw [← List.length_replicate n Unit.unit, ← List.foldr_const f a]\n    apply le_sup\n  · rw [List.foldr_const f a l]\n    exact le_sup _ _\n#align sup_iterate_eq_nfp sup_iterate_eq_nfp\n\n",
 "nfp_zero_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n@[simp]\ntheorem nfp_zero_mul : nfp ((· * ·) 0) = id := by\n  rw [← sup_iterate_eq_nfp]\n  refine' funext fun a => (sup_le fun n => _).antisymm (le_sup (fun n => («expr ^[ ]» ((· * ·) 0) n) a) 0)\n  induction' n with n hn; · rfl\n  rw [Function.iterate_succ']\n  change 0 * _ ≤ a\n  rw [MulZeroClass.zero_mul]\n  exact Ordinal.zero_le a\n#align nfp_zero_mul nfp_zero_mul\n\n",
 "nfp_mul_zero":
 "@[simp]\ntheorem nfp_mul_zero (a : Ordinal) : nfp ((· * ·) a) 0 = 0 :=\n  by\n  rw [← Ordinal.le_zero, nfp_le_iff]\n  intro n\n  induction' n with n hn; · rfl\n  rwa [iterate_succ_apply, MulZeroClass.mul_zero]\n#align nfp_mul_zero nfp_mul_zero\n\n",
 "nfp_mul_opow_omega_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\ntheorem nfp_mul_opow_omega_add {a c : Ordinal} (b) (ha : 0 < a) (hc : 0 < c) (hca : c ≤ ordinal.pow a omega) :\n    nfp ((· * ·) a) (ordinal.pow a omega * b + c) = ordinal.pow a omega.{u} * succ b :=\n  by\n  apply le_antisymm\n  · apply nfp_le_fp (mul_is_normal ha).monotone\n    · rw [mul_succ]\n      apply add_le_add_left hca\n    · rw [← mul_assoc, ← opow_one_add, one_add_omega]\n  · cases' mul_eq_right_iff_opow_omega_dvd.1 ((mul_is_normal ha).nfp_fp (ordinal.pow a omega * b + c)) with d hd\n    rw [hd]\n    apply mul_le_mul_left'\n    have := le_nfp (has_mul.mul a) (ordinal.pow a omega * b + c)\n    rw [hd] at this\n    have := (add_lt_add_left hc (ordinal.pow a omega * b)).trans_le this\n    rw [add_zero, mul_lt_mul_iff_left (opow_pos omega ha)] at this\n    rwa [succ_le_iff]\n#align nfp_mul_opow_omega_add nfp_mul_opow_omega_add\n\n",
 "nfp_mul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n@[simp]\ntheorem nfp_mul_one {a : Ordinal} (ha : 0 < a) : nfp ((· * ·) a) 1 = ordinal.pow a omega :=\n  by\n  rw [← sup_iterate_eq_nfp, ← sup_opow_nat]\n  · dsimp\n    congr\n    funext\n    induction' n with n hn\n    · rw [Nat.cast_zero, opow_zero, iterate_zero_apply]\n    nth_rw 2 [Nat.succ_eq_one_add]\n    rw [Nat.cast_add, Nat.cast_one, opow_add, opow_one, iterate_succ_apply', hn]\n  · exact ha\n#align nfp_mul_one nfp_mul_one\n\n",
 "nfp_mul_eq_opow_omega":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\ntheorem nfp_mul_eq_opow_omega {a b : Ordinal} (hb : 0 < b) (hba : b ≤ ordinal.pow a omega) :\n    nfp ((· * ·) a) b = ordinal.pow a omega.{u} :=\n  by\n  cases' eq_zero_or_pos a with ha ha\n  · rw [ha, zero_opow omega_ne_zero] at *\n    rw [Ordinal.le_zero.1 hba, nfp_zero_mul]\n    rfl\n  apply le_antisymm\n  · apply nfp_le_fp (mul_is_normal ha).monotone hba\n    rw [← opow_one_add, one_add_omega]\n  rw [← nfp_mul_one ha]\n  exact nfp_monotone (mul_is_normal ha).monotone (one_le_iff_pos.2 hb)\n#align nfp_mul_eq_opow_omega nfp_mul_eq_opow_omega\n\n",
 "nfp_monotone":
 "theorem nfp_monotone (hf : Monotone f) : Monotone (nfp f) :=\n  nfpFamily_monotone fun i => hf\n#align nfp_monotone nfp_monotone\n\n",
 "nfp_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem nfp_le_iff {a b} : nfp f a ≤ b ↔ ∀ n, («expr ^[ ]» f n) a ≤ b :=\n  by\n  rw [← sup_iterate_eq_nfp]\n  exact sup_le_iff\n#align nfp_le_iff nfp_le_iff\n\n",
 "nfp_le_fp":
 "theorem nfp_le_fp {f} (H : Monotone f) {a b} (ab : a ≤ b) (h : f b ≤ b) : nfp f a ≤ b :=\n  nfpFamily_le_fp (fun _ => H) ab fun _ => h\n#align nfp_le_fp nfp_le_fp\n\n",
 "nfp_le_apply":
 "theorem is_normal.nfp_le_apply {f} (H : IsNormal f) {a b} : nfp f a ≤ f b ↔ nfp f a ≤ b :=\n  le_iff_le_iff_lt_iff_lt.2 H.apply_lt_nfp\n#align is_normal.nfp_le_apply is_normal.nfp_le_apply\n\n",
 "nfp_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem nfp_le {a b} : (∀ n, («expr ^[ ]» f n) a ≤ b) → nfp f a ≤ b :=\n  nfp_le_iff.2\n#align nfp_le nfp_le\n\n",
 "nfp_id":
 "@[simp]\ntheorem nfp_id : nfp id = id :=\n  funext fun a => by\n    simp_rw [← sup_iterate_eq_nfp, iterate_id]\n    exact sup_const a\n#align nfp_id nfp_id\n\n",
 "nfp_fp":
 "theorem is_normal.nfp_fp {f} (H : IsNormal f) : ∀ a, f (nfp f a) = nfp f a :=\n  @nfpFamily_fp Unit (fun _ => f) Unit.unit H\n#align is_normal.nfp_fp is_normal.nfp_fp\n\n",
 "nfp_family_monotone":
 "theorem nfp_family_monotone (hf : ∀ i, Monotone (f i)) : Monotone (nfpFamily f) := fun a b h =>\n  sup_le fun l => (List.foldr_monotone hf l h).trans (le_sup _ l)\n#align nfp_family_monotone nfp_family_monotone\n\n",
 "nfp_family_le_iff":
 "theorem nfp_family_le_iff {a b} : nfpFamily f a ≤ b ↔ ∀ l, list.foldr f a l ≤ b :=\n  sup_le_iff\n#align nfp_family_le_iff nfp_family_le_iff\n\n",
 "nfp_family_le_fp":
 "theorem nfp_family_le_fp (H : ∀ i, Monotone (f i)) {a b} (ab : a ≤ b) (h : ∀ i, f i b ≤ b) : nfpFamily f a ≤ b :=\n  sup_le fun l => by\n    by_cases hι : IsEmpty ι\n    · skip\n      rwa [Unique.eq_default l]\n    · haveI := not_isEmpty_iff.1 hι\n      induction' l with i l IH generalizing a\n      · exact ab\n      exact (H i (IH ab)).trans (h i)\n#align nfp_family_le_fp nfp_family_le_fp\n\n",
 "nfp_family_le_apply":
 "theorem nfp_family_le_apply [Nonempty ι] (H : ∀ i, IsNormal (f i)) {a b} :\n    (∃ i, nfpFamily f a ≤ f i b) ↔ nfpFamily f a ≤ b :=\n  by\n  rw [← not_iff_not]\n  push_neg\n  exact apply_lt_nfp_family_iff H\n#align nfp_family_le_apply nfp_family_le_apply\n\n",
 "nfp_family_le":
 "theorem nfp_family_le {a b} : (∀ l, list.foldr f a l ≤ b) → nfpFamily f a ≤ b :=\n  sup_le\n#align nfp_family_le nfp_family_le\n\n",
 "nfp_family_fp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\ntheorem nfp_family_fp {i} (H : IsNormal (f i)) (a) : f i (nfpFamily f a) = nfpFamily f a :=\n  by\n  unfold nfp_family\n  rw [@is_normal.sup _ H _ _ ⟨[]⟩]\n  apply le_antisymm <;> refine' Ordinal.sup_le fun l => _\n  · exact le_sup _ (sym.cons' i l)\n  · exact (H.self_le _).trans (le_sup _ _)\n#align nfp_family_fp nfp_family_fp\n\n",
 "nfp_family_eq_sup":
 "/-\nCopyright (c) 2018 Violeta Hernández Palacios, Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Violeta Hernández Palacios, Mario Carneiro\n-/\ntheorem nfp_family_eq_sup (f : ι → Ordinal → Ordinal) (a) : nfpFamily f a = sup (list.foldr f a) :=\n  rfl\n#align nfp_family_eq_sup nfp_family_eq_sup\n\n",
 "nfp_family_eq_self":
 "theorem nfp_family_eq_self {f : ι → Ordinal → Ordinal} {a} (h : ∀ i, f i a = a) : nfpFamily f a = a :=\n  le_antisymm (sup_le fun l => by rw [List.foldr_fixed' h l]) <| le_nfpFamily f a\n#align nfp_family_eq_self nfp_family_eq_self\n\n",
 "nfp_eq_self":
 "theorem nfp_eq_self {f : Ordinal → Ordinal} {a} (h : f a = a) : nfp f a = a :=\n  nfpFamily_eq_self fun _ => h\n#align nfp_eq_self nfp_eq_self\n\n",
 "nfp_eq_nfp_family":
 "theorem nfp_eq_nfp_family (f : Ordinal → Ordinal) : nfp f = nfpFamily fun _ : Unit => f :=\n  rfl\n#align nfp_eq_nfp_family nfp_eq_nfp_family\n\n",
 "nfp_bfamily_monotone":
 "theorem nfp_bfamily_monotone (hf : ∀ i hi, Monotone (f i hi)) : Monotone (nfpBFamily o f) :=\n  nfpFamily_monotone fun i => hf _ _\n#align nfp_bfamily_monotone nfp_bfamily_monotone\n\n",
 "nfp_bfamily_le_iff":
 "theorem nfp_bfamily_le_iff {o : Ordinal} {f : ∀ b < o, Ordinal → Ordinal} {a b} :\n    nfpBFamily o f a ≤ b ↔ ∀ l, list.foldr (familyOfBFamily o f) a l ≤ b :=\n  sup_le_iff\n#align nfp_bfamily_le_iff nfp_bfamily_le_iff\n\n",
 "nfp_bfamily_le_fp":
 "theorem nfp_bfamily_le_fp (H : ∀ i hi, Monotone (f i hi)) {a b} (ab : a ≤ b) (h : ∀ i hi, f i hi b ≤ b) :\n    nfpBFamily o f a ≤ b :=\n  nfpFamily_le_fp (fun _ => H _ _) ab fun i => h _ _\n#align nfp_bfamily_le_fp nfp_bfamily_le_fp\n\n",
 "nfp_bfamily_le_apply":
 "theorem nfp_bfamily_le_apply (ho : o ≠ 0) (H : ∀ i hi, IsNormal (f i hi)) {a b} :\n    (∃ i hi, nfpBFamily o f a ≤ f i hi b) ↔ nfpBFamily o f a ≤ b :=\n  by\n  rw [← not_iff_not]\n  push_neg\n  convert apply_lt_nfp_bfamily_iff ho H\n  simp only [not_le]\n#align nfp_bfamily_le_apply nfp_bfamily_le_apply\n\n",
 "nfp_bfamily_le":
 "theorem nfp_bfamily_le {o : Ordinal} {f : ∀ b < o, Ordinal → Ordinal} {a b} :\n    (∀ l, list.foldr (familyOfBFamily o f) a l ≤ b) → nfpBFamily o f a ≤ b :=\n  sup_le\n#align nfp_bfamily_le nfp_bfamily_le\n\n",
 "nfp_bfamily_fp":
 "theorem nfp_bfamily_fp {i hi} (H : IsNormal (f i hi)) (a) : f i hi (nfpBFamily o f a) = nfpBFamily o f a :=\n  by\n  rw [← family_of_bfamily_enum o f]\n  apply nfp_family_fp\n  rw [family_of_bfamily_enum]\n  exact H\n#align nfp_bfamily_fp nfp_bfamily_fp\n\n",
 "nfp_bfamily_eq_self":
 "theorem nfp_bfamily_eq_self {a} (h : ∀ i hi, f i hi a = a) : nfpBFamily o f a = a :=\n  nfpFamily_eq_self fun _ => h _ _\n#align nfp_bfamily_eq_self nfp_bfamily_eq_self\n\n",
 "nfp_bfamily_eq_nfp_family":
 "theorem nfp_bfamily_eq_nfp_family {o : Ordinal} (f : ∀ b < o, Ordinal → Ordinal) :\n    nfpBFamily o f = nfpFamily (familyOfBFamily o f) :=\n  rfl\n#align nfp_bfamily_eq_nfp_family nfp_bfamily_eq_nfp_family\n\n",
 "nfp_add_zero":
 "@[simp]\ntheorem nfp_add_zero (a) : nfp ((· + ·) a) 0 = a * omega :=\n  by\n  simp_rw [← sup_iterate_eq_nfp, ← sup_mul_nat]\n  congr ; funext\n  induction' n with n hn\n  · rw [Nat.cast_zero, MulZeroClass.mul_zero, iterate_zero_apply]\n  · nth_rw 2 [Nat.succ_eq_one_add]\n    rw [Nat.cast_add, Nat.cast_one, mul_one_add, iterate_succ_apply', hn]\n#align nfp_add_zero nfp_add_zero\n\n",
 "nfp_add_eq_mul_omega":
 "theorem nfp_add_eq_mul_omega {a b} (hba : b ≤ a * omega) : nfp ((· + ·) a) b = a * omega :=\n  by\n  apply le_antisymm (nfp_le_fp (add_is_normal a).monotone hba _)\n  · rw [← nfp_add_zero]\n    exact nfp_monotone (add_is_normal a).monotone (Ordinal.zero_le b)\n  · rw [← mul_one_add, one_add_omega]\n#align nfp_add_eq_mul_omega nfp_add_eq_mul_omega\n\n",
 "mul_le_right_iff_opow_omega_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\ntheorem mul_le_right_iff_opow_omega_dvd {a b : Ordinal} (ha : 0 < a) : a * b ≤ b ↔ ordinal.pow a omega ∣ b :=\n  by\n  rw [← mul_eq_right_iff_opow_omega_dvd]\n  exact (mul_is_normal ha).le_iff_eq\n#align mul_le_right_iff_opow_omega_dvd mul_le_right_iff_opow_omega_dvd\n\n",
 "mul_eq_right_iff_opow_omega_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\ntheorem mul_eq_right_iff_opow_omega_dvd {a b : Ordinal} : a * b = b ↔ ordinal.pow a omega ∣ b :=\n  by\n  cases' eq_zero_or_pos a with ha ha\n  · rw [ha, MulZeroClass.zero_mul, zero_opow omega_ne_zero, zero_dvd_iff]\n    exact eq_comm\n  refine' ⟨fun hab => _, fun h => _⟩\n  · rw [dvd_iff_mod_eq_zero]\n    rw [← div_add_mod b (ordinal.pow a omega), mul_add, ← mul_assoc, ← opow_one_add, one_add_omega, add_left_cancel] at\n      hab\n    cases' eq_zero_or_opow_omega_le_of_mul_eq_right hab with hab hab\n    · exact hab\n    refine' (not_lt_of_le hab (mod_lt b (opow_ne_zero omega _))).elim\n    rwa [← Ordinal.pos_iff_ne_zero]\n  cases' h with c hc\n  rw [hc, ← mul_assoc, ← opow_one_add, one_add_omega]\n#align mul_eq_right_iff_opow_omega_dvd mul_eq_right_iff_opow_omega_dvd\n\n",
 "lt_nfp_family":
 "theorem lt_nfp_family {a b} : a < nfpFamily f b ↔ ∃ l, a < list.foldr f b l :=\n  lt_sup\n#align lt_nfp_family lt_nfp_family\n\n",
 "lt_nfp_bfamily":
 "theorem lt_nfp_bfamily {a b} : a < nfpBFamily o f b ↔ ∃ l, a < list.foldr (familyOfBFamily o f) b l :=\n  lt_sup\n#align lt_nfp_bfamily lt_nfp_bfamily\n\n",
 "lt_nfp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem lt_nfp {a b} : a < nfp f b ↔ ∃ n, a < («expr ^[ ]» f n) b :=\n  by\n  rw [← sup_iterate_eq_nfp]\n  exact lt_sup\n#align lt_nfp lt_nfp\n\n",
 "le_nfp_family":
 "theorem le_nfp_family (f : ι → Ordinal → Ordinal) (a) : a ≤ nfpFamily f a :=\n  le_sup _ []\n#align le_nfp_family le_nfp_family\n\n",
 "le_nfp_bfamily":
 "theorem le_nfp_bfamily {o : Ordinal} (f : ∀ b < o, Ordinal → Ordinal) (a) : a ≤ nfpBFamily o f a :=\n  le_sup _ []\n#align le_nfp_bfamily le_nfp_bfamily\n\n",
 "le_nfp":
 "theorem le_nfp (f a) : a ≤ nfp f a :=\n  iterate_le_nfp f a 0\n#align le_nfp le_nfp\n\n",
 "le_iff_deriv_family":
 "theorem le_iff_deriv_family (H : ∀ i, IsNormal (f i)) {a} : (∀ i, f i a ≤ a) ↔ ∃ o, derivFamily f o = a :=\n  ⟨fun ha => by\n    suffices : ∀ (o) (_ : a ≤ deriv_family f o), ∃ o, deriv_family f o = a\n    exact this a ((deriv_family_is_normal _).self_le _)\n    refine' fun o => limit_rec_on o (fun h₁ => ⟨0, le_antisymm _ h₁⟩) (fun o IH h₁ => _) fun o l IH h₁ => _\n    · rw [deriv_family_zero]\n      exact nfp_family_le_fp (fun i => (H i).monotone) (Ordinal.zero_le _) ha\n    · cases le_or_lt a (deriv_family f o)\n      · exact IH h\n      refine' ⟨succ o, le_antisymm _ h₁⟩\n      rw [deriv_family_succ]\n      exact nfp_family_le_fp (fun i => (H i).monotone) (succ_le_of_lt h) ha\n    · cases eq_or_lt_of_le h₁\n      · exact ⟨_, h.symm⟩\n      rw [deriv_family_limit _ l, ← not_le, bsup_le_iff, not_ball] at h\n      exact\n        let ⟨o', h, hl⟩ := h\n        IH o' h (le_of_not_le hl),\n    fun ⟨o, e⟩ i => e ▸ (derivFamily_fp (H i) _).le⟩\n#align le_iff_deriv_family le_iff_deriv_family\n\n",
 "le_iff_deriv_bfamily":
 "theorem le_iff_deriv_bfamily (H : ∀ i hi, IsNormal (f i hi)) {a} :\n    (∀ i hi, f i hi a ≤ a) ↔ ∃ b, derivBFamily o f b = a :=\n  by\n  unfold deriv_bfamily\n  rw [← le_iff_deriv_family]\n  · refine' ⟨fun h i => h _ _, fun h i hi => _⟩\n    rw [← family_of_bfamily_enum o f]\n    apply h\n  · exact fun _ => H _ _\n#align le_iff_deriv_bfamily le_iff_deriv_bfamily\n\n",
 "le_iff_deriv":
 "theorem is_normal.le_iff_deriv {f} (H : IsNormal f) {a} : f a ≤ a ↔ ∃ o, deriv f o = a :=\n  by\n  unfold deriv\n  rw [← le_iff_deriv_family fun _ : Unit => H]\n  exact ⟨fun h _ => h, fun h => h Unit.unit⟩\n#align is_normal.le_iff_deriv is_normal.le_iff_deriv\n\n",
 "iterate_le_nfp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_le_nfp (f a n) : («expr ^[ ]» f n) a ≤ nfp f a :=\n  by\n  rw [← sup_iterate_eq_nfp]\n  exact le_sup _ n\n#align iterate_le_nfp iterate_le_nfp\n\n",
 "fp_unbounded":
 "/-- The fixed point lemma for normal functions: any normal function has an unbounded set of\nfixed points. -/\ntheorem fp_unbounded (H : IsNormal f) : (Function.fixedPoints f).unbounded (· < ·) :=\n  by\n  convert fp_family_unbounded fun _ : Unit => H\n  exact (Set.interᵢ_const _).symm\n#align fp_unbounded fp_unbounded\n\n",
 "fp_iff_deriv_family":
 "theorem fp_iff_deriv_family (H : ∀ i, IsNormal (f i)) {a} : (∀ i, f i a = a) ↔ ∃ o, derivFamily f o = a :=\n  iff.trans ⟨fun h i => le_of_eq (h i), fun h i => (H i).le_iff_eq.1 (h i)⟩ (le_iff_derivFamily H)\n#align fp_iff_deriv_family fp_iff_deriv_family\n\n",
 "fp_iff_deriv_bfamily":
 "theorem fp_iff_deriv_bfamily (H : ∀ i hi, IsNormal (f i hi)) {a} :\n    (∀ i hi, f i hi a = a) ↔ ∃ b, derivBFamily o f b = a :=\n  by\n  rw [← le_iff_deriv_bfamily H]\n  refine' ⟨fun h i hi => le_of_eq (h i hi), fun h i hi => _⟩\n  rw [← (H i hi).le_iff_eq]\n  exact h i hi\n#align fp_iff_deriv_bfamily fp_iff_deriv_bfamily\n\n",
 "fp_iff_deriv":
 "theorem is_normal.fp_iff_deriv {f} (H : IsNormal f) {a} : f a = a ↔ ∃ o, deriv f o = a := by\n  rw [← H.le_iff_eq, H.le_iff_deriv]\n#align is_normal.fp_iff_deriv is_normal.fp_iff_deriv\n\n",
 "fp_family_unbounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n-- Todo: This is actually a special case of the fact the intersection of club sets is a club set.\n/-- A generalization of the fixed point lemma for normal functions: any family of normal functions\n    has an unbounded set of common fixed points. -/\ntheorem fp_family_unbounded (H : ∀ i, IsNormal (f i)) :\n    («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          (Function.fixedPoints (f i))).unbounded\n      (· < ·) :=\n  fun a =>\n  ⟨_, fun s ⟨i, hi⟩ => by\n    rw [← hi]\n    exact nfp_family_fp (H i) a, (le_nfpFamily f a).not_lt⟩\n#align fp_family_unbounded fp_family_unbounded\n\n",
 "fp_bfamily_unbounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/-- A generalization of the fixed point lemma for normal functions: any family of normal functions\n    has an unbounded set of common fixed points. -/\ntheorem fp_bfamily_unbounded (H : ∀ i hi, IsNormal (f i hi)) :\n    («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          (Function.fixedPoints (f i hi))).unbounded\n      (· < ·) :=\n  fun a =>\n  ⟨_, by\n    rw [Set.mem_interᵢ₂]\n    exact fun i hi => nfp_bfamily_fp (H i hi) _, (le_nfpBFamily f a).not_lt⟩\n#align fp_bfamily_unbounded fp_bfamily_unbounded\n\n",
 "foldr_le_nfp_family":
 "theorem foldr_le_nfp_family (f : ι → Ordinal → Ordinal) (a l) : list.foldr f a l ≤ nfpFamily f a :=\n  le_sup _ _\n#align foldr_le_nfp_family foldr_le_nfp_family\n\n",
 "foldr_le_nfp_bfamily":
 "theorem foldr_le_nfp_bfamily {o : Ordinal} (f : ∀ b < o, Ordinal → Ordinal) (a l) :\n    list.foldr (familyOfBFamily o f) a l ≤ nfpBFamily o f a :=\n  le_sup _ _\n#align foldr_le_nfp_bfamily foldr_le_nfp_bfamily\n\n",
 "eq_zero_or_opow_omega_le_of_mul_eq_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\ntheorem eq_zero_or_opow_omega_le_of_mul_eq_right {a b : Ordinal} (hab : a * b = b) :\n    b = 0 ∨ ordinal.pow a omega.{u} ≤ b :=\n  by\n  cases' eq_zero_or_pos a with ha ha\n  · rw [ha, zero_opow omega_ne_zero]\n    exact or.inr (Ordinal.zero_le b)\n  rw [or_iff_not_imp_left]\n  intro hb\n  change b ≠ 0 at hb\n  rw [← nfp_mul_one ha]\n  rw [← one_le_iff_ne_zero] at hb\n  exact nfp_le_fp (mul_is_normal ha).monotone hb (le_of_eq hab)\n#align eq_zero_or_opow_omega_le_of_mul_eq_right eq_zero_or_opow_omega_le_of_mul_eq_right\n\n",
 "deriv_zero":
 "@[simp]\ntheorem deriv_zero (f) : deriv f 0 = nfp f 0 :=\n  derivFamily_zero _\n#align deriv_zero deriv_zero\n\n",
 "deriv_succ":
 "@[simp]\ntheorem deriv_succ (f o) : deriv f (succ o) = nfp f (succ (deriv f o)) :=\n  derivFamily_succ _ _\n#align deriv_succ deriv_succ\n\n",
 "deriv_mul_zero":
 "@[simp]\ntheorem deriv_mul_zero : deriv ((· * ·) 0) = id :=\n  deriv_eq_id_of_nfp_eq_id nfp_zero_mul\n#align deriv_mul_zero deriv_mul_zero\n\n",
 "deriv_mul_eq_opow_omega_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ordinal.pow -/\ntheorem deriv_mul_eq_opow_omega_mul {a : Ordinal.{u}} (ha : 0 < a) (b) :\n    deriv ((· * ·) a) b = ordinal.pow a omega * b := by\n  revert b\n  rw [← funext_iff, is_normal.eq_iff_zero_and_succ (deriv_is_normal _) (mul_is_normal (opow_pos omega ha))]\n  refine' ⟨_, fun c h => _⟩\n  · rw [deriv_zero, nfp_mul_zero, MulZeroClass.mul_zero]\n  · rw [deriv_succ, h]\n    exact nfp_mul_opow_omega_add c ha zero_lt_one (one_le_iff_pos.2 (opow_pos _ ha))\n#align deriv_mul_eq_opow_omega_mul deriv_mul_eq_opow_omega_mul\n\n",
 "deriv_limit":
 "theorem deriv_limit (f) {o} : IsLimit o → deriv f o = bsup.{u, 0} o fun a _ => deriv f a :=\n  derivFamily_limit _\n#align deriv_limit deriv_limit\n\n",
 "deriv_is_normal":
 "theorem deriv_is_normal (f) : IsNormal (deriv f) :=\n  derivFamily_isNormal _\n#align deriv_is_normal deriv_is_normal\n\n",
 "deriv_id_of_nfp_id":
 "theorem deriv_id_of_nfp_id {f : Ordinal → Ordinal} (h : nfp f = id) : deriv f = id :=\n  ((deriv_isNormal _).eq_iff_zero_and_succ IsNormal.refl).2 (by simp [h])\n#align deriv_id_of_nfp_id deriv_id_of_nfp_id\n\n",
 "deriv_fp":
 "theorem is_normal.deriv_fp {f} (H : IsNormal f) : ∀ o, f (deriv f o) = deriv f o :=\n  @derivFamily_fp Unit (fun _ => f) Unit.unit H\n#align is_normal.deriv_fp is_normal.deriv_fp\n\n",
 "deriv_family_zero":
 "@[simp]\ntheorem deriv_family_zero (f : ι → Ordinal → Ordinal) : derivFamily f 0 = nfpFamily f 0 :=\n  limitRecOn_zero _ _ _\n#align deriv_family_zero deriv_family_zero\n\n",
 "deriv_family_succ":
 "@[simp]\ntheorem deriv_family_succ (f : ι → Ordinal → Ordinal) (o) :\n    derivFamily f (succ o) = nfpFamily f (succ (derivFamily f o)) :=\n  limitRecOn_succ _ _ _ _\n#align deriv_family_succ deriv_family_succ\n\n",
 "deriv_family_limit":
 "theorem deriv_family_limit (f : ι → Ordinal → Ordinal) {o} :\n    IsLimit o → derivFamily f o = bsup.{max u v, u} o fun a _ => derivFamily f a :=\n  limitRecOn_limit _ _ _ _\n#align deriv_family_limit deriv_family_limit\n\n",
 "deriv_family_is_normal":
 "theorem deriv_family_is_normal (f : ι → Ordinal → Ordinal) : IsNormal (derivFamily f) :=\n  ⟨fun o => by rw [deriv_family_succ, ← succ_le_iff] <;> apply le_nfp_family, fun o l a => by\n    rw [deriv_family_limit _ l, bsup_le_iff]⟩\n#align deriv_family_is_normal deriv_family_is_normal\n\n",
 "deriv_family_fp":
 "theorem deriv_family_fp {i} (H : IsNormal (f i)) (o : Ordinal.{max u v}) : f i (derivFamily f o) = derivFamily f o :=\n  by\n  refine' limit_rec_on o _ (fun o IH => _) _\n  · rw [deriv_family_zero]\n    exact nfp_family_fp H 0\n  · rw [deriv_family_succ]\n    exact nfp_family_fp H _\n  · intro o l IH\n    rw [deriv_family_limit _ l, IsNormal.bsup.{max u v, u, max u v} H (fun a _ => deriv_family f a) l.1]\n    refine' eq_of_forall_ge_iff fun c => _\n    simp (config := { contextual := true }) only [bsup_le_iff, IH]\n#align deriv_family_fp deriv_family_fp\n\n",
 "deriv_family_eq_enum_ord":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/-- For a family of normal functions, `ordinal.deriv_family` enumerates the common fixed points. -/\ntheorem deriv_family_eq_enum_ord (H : ∀ i, IsNormal (f i)) :\n    derivFamily f =\n      enumOrd\n        («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          (Function.fixedPoints (f i))) :=\n  by\n  rw [← eq_enum_ord _ (fp_family_unbounded H)]\n  use (deriv_family_is_normal f).strict_mono\n  rw [Set.range_eq_iff]\n  refine' ⟨_, fun a ha => _⟩\n  · rintro a S ⟨i, hi⟩\n    rw [← hi]\n    exact deriv_family_fp (H i) a\n  rw [Set.mem_interᵢ] at ha\n  rwa [← fp_iff_deriv_family H]\n#align deriv_family_eq_enum_ord deriv_family_eq_enum_ord\n\n",
 "deriv_eq_id_of_nfp_eq_id":
 "theorem deriv_eq_id_of_nfp_eq_id {f : Ordinal → Ordinal} (h : nfp f = id) : deriv f = id :=\n  (IsNormal.eq_iff_zero_and_succ (deriv_isNormal _) IsNormal.refl).2 <| by simp [h]\n#align deriv_eq_id_of_nfp_eq_id deriv_eq_id_of_nfp_eq_id\n\n",
 "deriv_eq_enum_ord":
 "/-- `ordinal.deriv` enumerates the fixed points of a normal function. -/\ntheorem deriv_eq_enum_ord (H : IsNormal f) : deriv f = enumOrd (Function.fixedPoints f) :=\n  by\n  convert deriv_family_eq_enum_ord fun _ : Unit => H\n  exact (Set.interᵢ_const _).symm\n#align deriv_eq_enum_ord deriv_eq_enum_ord\n\n",
 "deriv_eq_deriv_family":
 "theorem deriv_eq_deriv_family (f : Ordinal → Ordinal) : deriv f = derivFamily fun _ : Unit => f :=\n  rfl\n#align deriv_eq_deriv_family deriv_eq_deriv_family\n\n",
 "deriv_bfamily_is_normal":
 "theorem deriv_bfamily_is_normal {o : Ordinal} (f : ∀ b < o, Ordinal → Ordinal) : IsNormal (derivBFamily o f) :=\n  derivFamily_isNormal _\n#align deriv_bfamily_is_normal deriv_bfamily_is_normal\n\n",
 "deriv_bfamily_fp":
 "theorem deriv_bfamily_fp {i hi} (H : IsNormal (f i hi)) (a : Ordinal) :\n    f i hi (derivBFamily o f a) = derivBFamily o f a :=\n  by\n  rw [← family_of_bfamily_enum o f]\n  apply deriv_family_fp\n  rw [family_of_bfamily_enum]\n  exact H\n#align deriv_bfamily_fp deriv_bfamily_fp\n\n",
 "deriv_bfamily_eq_enum_ord":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/-- For a family of normal functions, `ordinal.deriv_bfamily` enumerates the common fixed points. -/\ntheorem deriv_bfamily_eq_enum_ord (H : ∀ i hi, IsNormal (f i hi)) :\n    derivBFamily o f =\n      enumOrd\n        («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          (Function.fixedPoints (f i hi))) :=\n  by\n  rw [← eq_enum_ord _ (fp_bfamily_unbounded H)]\n  use (deriv_bfamily_is_normal f).strict_mono\n  rw [Set.range_eq_iff]\n  refine' ⟨fun a => Set.mem_interᵢ₂.2 fun i hi => deriv_bfamily_fp (H i hi) a, fun a ha => _⟩\n  rw [Set.mem_interᵢ₂] at ha\n  rwa [← fp_iff_deriv_bfamily H]\n#align deriv_bfamily_eq_enum_ord deriv_bfamily_eq_enum_ord\n\n",
 "deriv_bfamily_eq_deriv_family":
 "theorem deriv_bfamily_eq_deriv_family {o : Ordinal} (f : ∀ b < o, Ordinal → Ordinal) :\n    derivBFamily o f = derivFamily (familyOfBFamily o f) :=\n  rfl\n#align deriv_bfamily_eq_deriv_family deriv_bfamily_eq_deriv_family\n\n",
 "deriv_add_eq_mul_omega_add":
 "theorem deriv_add_eq_mul_omega_add (a b : Ordinal.{u}) : deriv ((· + ·) a) b = a * omega + b :=\n  by\n  revert b\n  rw [← funext_iff, is_normal.eq_iff_zero_and_succ (deriv_is_normal _) (add_is_normal _)]\n  refine' ⟨_, fun a h => _⟩\n  · rw [deriv_zero, add_zero]\n    exact nfp_add_zero a\n  · rw [deriv_succ, h, add_succ]\n    exact nfp_eq_self (add_eq_right_iff_mul_omega_le.2 ((le_add_right _ _).trans (le_succ _)))\n#align deriv_add_eq_mul_omega_add deriv_add_eq_mul_omega_add\n\n",
 "apply_lt_nfp_family_iff":
 "theorem apply_lt_nfp_family_iff [Nonempty ι] (H : ∀ i, IsNormal (f i)) {a b} :\n    (∀ i, f i b < nfpFamily f a) ↔ b < nfpFamily f a :=\n  ⟨fun h =>\n    lt_nfpFamily.2 <|\n      let ⟨l, hl⟩ := lt_sup.1 <| h <| Classical.arbitrary ι\n      ⟨l, ((H _).self_le b).trans_lt hl⟩,\n    apply_lt_nfpFamily H⟩\n#align apply_lt_nfp_family_iff apply_lt_nfp_family_iff\n\n",
 "apply_lt_nfp_family":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\ntheorem apply_lt_nfp_family (H : ∀ i, IsNormal (f i)) {a b} (hb : b < nfpFamily f a) (i) : f i b < nfpFamily f a :=\n  let ⟨l, hl⟩ := lt_nfpFamily.1 hb\n  lt_sup.2 ⟨sym.cons' i l, (H i).strict_mono hl⟩\n#align apply_lt_nfp_family apply_lt_nfp_family\n\n",
 "apply_lt_nfp_bfamily_iff":
 "theorem apply_lt_nfp_bfamily_iff (ho : o ≠ 0) (H : ∀ i hi, IsNormal (f i hi)) {a b} :\n    (∀ i hi, f i hi b < nfpBFamily o f a) ↔ b < nfpBFamily o f a :=\n  ⟨fun h => by\n    haveI := out_nonempty_iff_ne_zero.2 ho\n    refine' (apply_lt_nfp_family_iff _).1 fun _ => h _ _\n    exact fun _ => H _ _, apply_lt_nfpBFamily H⟩\n#align apply_lt_nfp_bfamily_iff apply_lt_nfp_bfamily_iff\n\n",
 "apply_lt_nfp_bfamily":
 "theorem apply_lt_nfp_bfamily (H : ∀ i hi, IsNormal (f i hi)) {a b} (hb : b < nfpBFamily o f a) (i hi) :\n    f i hi b < nfpBFamily o f a := by\n  rw [← family_of_bfamily_enum o f]\n  apply apply_lt_nfp_family _ hb\n  exact fun _ => H _ _\n#align apply_lt_nfp_bfamily apply_lt_nfp_bfamily\n\n",
 "apply_lt_nfp":
 "theorem is_normal.apply_lt_nfp {f} (H : IsNormal f) {a b} : f b < nfp f a ↔ b < nfp f a :=\n  by\n  unfold nfp\n  rw [← @apply_lt_nfp_family_iff Unit (fun _ => f) _ (fun _ => H) a b]\n  exact ⟨fun h _ => h, fun h => h Unit.unit⟩\n#align is_normal.apply_lt_nfp is_normal.apply_lt_nfp\n\n",
 "apply_le_nfp_family":
 "theorem apply_le_nfp_family [hι : Nonempty ι] {f : ι → Ordinal → Ordinal} (H : ∀ i, IsNormal (f i)) {a b} :\n    (∀ i, f i b ≤ nfpFamily f a) ↔ b ≤ nfpFamily f a :=\n  by\n  refine' ⟨fun h => _, fun h i => _⟩\n  · cases' hι with i\n    exact ((H i).self_le b).trans (h i)\n  rw [← nfp_family_fp (H i)]\n  exact (H i).monotone h\n#align apply_le_nfp_family apply_le_nfp_family\n\n",
 "apply_le_nfp_bfamily":
 "theorem apply_le_nfp_bfamily (ho : o ≠ 0) (H : ∀ i hi, IsNormal (f i hi)) {a b} :\n    (∀ i hi, f i hi b ≤ nfpBFamily o f a) ↔ b ≤ nfpBFamily o f a :=\n  by\n  refine' ⟨fun h => _, fun h i hi => _⟩\n  · have ho' : 0 < o := Ordinal.pos_iff_ne_zero.2 ho\n    exact ((H 0 ho').self_le b).trans (h 0 ho')\n  · rw [← nfp_bfamily_fp (H i hi)]\n    exact (H i hi).monotone h\n#align apply_le_nfp_bfamily apply_le_nfp_bfamily\n\n",
 "apply_le_nfp":
 "theorem is_normal.apply_le_nfp {f} (H : IsNormal f) {a b} : f b ≤ nfp f a ↔ b ≤ nfp f a :=\n  ⟨le_trans (H.self_le _), fun h => by simpa only [H.nfp_fp] using H.le_iff.2 h⟩\n#align is_normal.apply_le_nfp is_normal.apply_le_nfp\n\n",
 "add_le_right_iff_mul_omega_le":
 "theorem add_le_right_iff_mul_omega_le {a b : Ordinal} : a + b ≤ b ↔ a * omega ≤ b :=\n  by\n  rw [← add_eq_right_iff_mul_omega_le]\n  exact (add_is_normal a).le_iff_eq\n#align add_le_right_iff_mul_omega_le add_le_right_iff_mul_omega_le\n\n",
 "add_eq_right_iff_mul_omega_le":
 "theorem add_eq_right_iff_mul_omega_le {a b : Ordinal} : a + b = b ↔ a * omega ≤ b :=\n  by\n  refine' ⟨fun h => _, fun h => _⟩\n  · rw [← nfp_add_zero a, ← deriv_zero]\n    cases' (add_is_normal a).fp_iff_deriv.1 h with c hc\n    rw [← hc]\n    exact (deriv_is_normal _).monotone (Ordinal.zero_le _)\n  · have := Ordinal.add_sub_cancel_of_le h\n    nth_rw 1 [← this]\n    rwa [← add_assoc, ← mul_one_add, one_add_omega]\n#align add_eq_right_iff_mul_omega_le add_eq_right_iff_mul_omega_le\n\n"}