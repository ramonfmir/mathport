{"subgroup_cyclic":
 "/-- Every subgroup of `ℤ` is cyclic. -/\ntheorem int.subgroup_cyclic (H : add_subgroup ℤ) : ∃ a, H = add_subgroup.closure {a} :=\n  by\n  cases' add_subgroup.bot_or_exists_ne_zero H with h h\n  · use 0\n    rw [h]\n    exact add_subgroup.closure_singleton_zero.symm\n  let s := { g : ℤ | g ∈ H ∧ 0 < g }\n  have h_bdd : ∀ g ∈ s, (0 : ℤ) ≤ g := fun _ h => le_of_lt h.2\n  obtain ⟨g₀, g₀_in, g₀_ne⟩ := h\n  obtain ⟨g₁, g₁_in, g₁_pos⟩ : ∃ g₁ : ℤ, g₁ ∈ H ∧ 0 < g₁ :=\n    by\n    cases' lt_or_gt_of_ne g₀_ne with Hg₀ Hg₀\n    · exact ⟨-g₀, H.neg_mem g₀_in, neg_pos.mpr Hg₀⟩\n    · exact ⟨g₀, g₀_in, Hg₀⟩\n  obtain ⟨a, ha, ha'⟩ := Int.exists_least_of_bdd ⟨(0 : ℤ), h_bdd⟩ ⟨g₁, g₁_in, g₁_pos⟩\n  exact ⟨a, add_subgroup.cyclic_of_min ⟨ha, ha'⟩⟩\n#align int.subgroup_cyclic int.subgroup_cyclic\n\n",
 "cyclic_of_min":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2020 Heather Macbeth, Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Heather Macbeth, Patrick Massot\n-/\n/-- Given a subgroup `H` of a decidable linearly ordered archimedean abelian group `G`, if there\nexists a minimal element `a` of `H ∩ G_{>0}` then `H` is generated by `a`. -/\ntheorem add_subgroup.cyclic_of_min {H : add_subgroup G} {a : G} (ha : IsLeast { g : G | g ∈ H ∧ 0 < g } a) :\n    H = add_subgroup.closure {a} := by\n  obtain ⟨⟨a_in, a_pos⟩, a_min⟩ := ha\n  refine' le_antisymm _ (H.closure_le.mpr <| by simp [a_in])\n  intro g g_in\n  obtain ⟨k, ⟨nonneg, lt⟩, _⟩ : ∃! k, 0 ≤ g - «expr • » k a ∧ g - «expr • » k a < a :=\n    existsUnique_zsmul_near_of_pos' a_pos g\n  have h_zero : g - «expr • » k a = 0 := by\n    by_contra h\n    have h : a ≤ g - «expr • » k a := by\n      refine' a_min ⟨_, _⟩\n      · exact add_subgroup.sub_mem H g_in (add_subgroup.zsmul_mem H a_in k)\n      · exact lt_of_le_of_ne nonneg (ne.symm h)\n    have h' : ¬a ≤ g - «expr • » k a := not_le.mpr lt\n    contradiction\n  simp [sub_eq_zero.mp h_zero, add_subgroup.mem_closure_singleton]\n#align add_subgroup.cyclic_of_min add_subgroup.cyclic_of_min\n\n"}