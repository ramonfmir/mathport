{"trans":
 "#print trans /-\n@[trans]\ntheorem trans {H K L : Subgroup G} (hhk : Commensurable H K) (hkl : Commensurable K L) : Commensurable H L :=\n  ⟨Subgroup.relindex_ne_zero_trans hhk.1 hkl.1, Subgroup.relindex_ne_zero_trans hkl.2 hhk.2⟩\n#align trans trans\n-/\n\n",
 "symm":
 "#print symm /-\n@[symm]\ntheorem symm {H K : Subgroup G} : Commensurable H K → Commensurable K H :=\n  And.symm\n#align symm symm\n-/\n\n",
 "refl":
 "#print refl /-\n/-\nCopyright (c) 2021 Chris Birkbeck. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Birkbeck\n-/\n@[refl]\nprotected theorem refl (H : Subgroup G) : Commensurable H H := by simp [Commensurable]\n#align refl refl\n-/\n\n",
 "equivalence":
 "theorem equivalence : equivalence (@Commensurable G _) :=\n  ⟨Commensurable.refl, fun _ _ => Commensurable.symm, fun _ _ _ => Commensurable.trans⟩\n#align equivalence equivalence\n\n",
 "commensurator_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem commensurator_mem_iff (H : Subgroup G) (g : G) :\n    g ∈ commensurator H ↔ Commensurable («expr • » (ConjAct.toConjAct g) H) H :=\n  iff.rfl\n#align commensurator_mem_iff commensurator_mem_iff\n\n",
 "commensurator'_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem commensurator'_mem_iff (H : Subgroup G) (g : ConjAct G) :\n    g ∈ commensurator' H ↔ Commensurable («expr • » g H) H :=\n  iff.rfl\n#align commensurator'_mem_iff commensurator'_mem_iff\n\n",
 "commensurable_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem commensurable_inv (H : Subgroup G) (g : ConjAct G) :\n    Commensurable («expr • » g H) H ↔ Commensurable H («expr • » g⁻¹ H) := by rw [commensurable_conj, inv_smul_smul]\n#align commensurable_inv commensurable_inv\n\n",
 "commensurable_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem commensurable_conj {H K : Subgroup G} (g : ConjAct G) :\n    Commensurable H K ↔ Commensurable («expr • » g H) («expr • » g K) :=\n  and_congr (not_iff_not.mpr (Eq.congr_left (Cardinal.toNat_congr (quotConjEquiv H K g))))\n    (not_iff_not.mpr (Eq.congr_left (Cardinal.toNat_congr (quotConjEquiv K H g))))\n#align commensurable_conj commensurable_conj\n\n",
 "comm":
 "#print comm /-\ntheorem comm {H K : Subgroup G} : Commensurable H K ↔ Commensurable K H :=\n  and_comm\n#align comm comm\n-/\n\n",
 "Eq":
 "#print Eq /-\ntheorem Eq {H K : Subgroup G} (hk : Commensurable H K) : commensurator H = commensurator K :=\n  Subgroup.ext fun x =>\n    let hx := (commensurable_conj x).1 hk\n    ⟨fun h => hx.symm.trans (h.trans hk), fun h => hx.trans (h.trans hk.symm)⟩\n#align eq Eq\n-/\n\n"}