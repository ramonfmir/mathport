{"zpow_mul_right":
 "@[simp, to_additive zpow_add_right]\ntheorem zpow_mul_right : ∀ n : ℤ, Equiv.mulRight a ^ n = Equiv.mulRight (a ^ n)\n  | int.of_nat n => by simp\n  | Int.negSucc n => by simp\n#align zpow_mul_right zpow_mul_right\n\n",
 "zpow_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp, to_additive zpow_add_left]\ntheorem zpow_mul_left (n : ℤ) : Equiv.mulLeft a ^ n = Equiv.mulLeft (a ^ n) :=\n  (map_zpow (⟨Equiv.mulLeft, mul_left_one, mul_left_mul⟩ : «expr →* » α (perm α)) _ _).symm\n#align zpow_mul_left zpow_mul_left\n\n",
 "zpow_aux":
 "private theorem zpow_aux (hf : ∀ x, p x ↔ p (f x)) : ∀ {n : ℤ} (x), p x ↔ p ((f ^ n) x)\n  | int.of_nat n => pow_aux hf\n  | Int.negSucc n => by\n    rw [zpow_negSucc]\n    exact inv_aux.1 (pow_aux hf)\n#align zpow_aux zpow_aux\n\n",
 "zpow_apply_comm":
 "theorem zpow_apply_comm {α : Type _} (σ : perm α) (m n : ℤ) {x : α} : (σ ^ m) ((σ ^ n) x) = (σ ^ n) ((σ ^ m) x) := by\n  rw [← Equiv.Perm.mul_apply, ← Equiv.Perm.mul_apply, zpow_mul_comm]\n#align zpow_apply_comm zpow_apply_comm\n\n",
 "zpow_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵃᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem zpow_add_right (n : ℤ) : Equiv.addRight a ^ n = Equiv.addRight («expr • » n a) :=\n  @zpow_add_left («expr ᵃᵒᵖ» α) _ _ _\n#align zpow_add_right zpow_add_right\n\n",
 "zpow_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem zpow_add_left (n : ℤ) : Equiv.addLeft a ^ n = Equiv.addLeft («expr • » n a) :=\n  (map_zsmul (⟨Equiv.addLeft, add_left_zero, add_left_add⟩ : «expr →+ » α (Additive (perm α))) _ _).symm\n#align zpow_add_left zpow_add_left\n\n",
 "trans_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem trans_one {α : Sort _} {β : Type _} (e : «expr ≃ » α β) : e.trans (1 : perm β) = e :=\n  equiv.trans_refl e\n#align trans_one trans_one\n\n",
 "symm_mul":
 "@[simp]\ntheorem symm_mul (e : perm α) : e.symm * e = 1 :=\n  equiv.self_trans_symm e\n#align symm_mul symm_mul\n\n",
 "swap_mul_swap_mul_swap":
 "theorem swap_mul_swap_mul_swap {x y z : α} (hwz : x ≠ y) (hxz : x ≠ z) : swap y z * swap x y * swap y z = swap z x :=\n  equiv.ext fun n => by\n    simp only [swap_apply_def, perm.mul_apply]\n    split_ifs <;> cc\n#align swap_mul_swap_mul_swap swap_mul_swap_mul_swap\n\n",
 "swap_mul_self_mul":
 "/-- Left-multiplying a permutation with `swap i j` twice gives the original permutation.\n\n  This specialization of `swap_mul_self` is useful when using cosets of permutations.\n-/\n@[simp]\ntheorem swap_mul_self_mul (i j : α) (σ : perm α) : Equiv.swap i j * (Equiv.swap i j * σ) = σ := by\n  rw [← mul_assoc, swap_mul_self, one_mul]\n#align swap_mul_self_mul swap_mul_self_mul\n\n",
 "swap_mul_self":
 "@[simp]\ntheorem swap_mul_self (i j : α) : swap i j * swap i j = 1 :=\n  swap_swap i j\n#align swap_mul_self swap_mul_self\n\n",
 "swap_mul_involutive":
 "/-- A stronger version of `mul_right_injective` -/\n@[simp]\ntheorem swap_mul_involutive (i j : α) : function.involutive ((· * ·) (Equiv.swap i j)) :=\n  swap_mul_self_mul i j\n#align swap_mul_involutive swap_mul_involutive\n\n",
 "swap_mul_eq_mul_swap":
 "theorem swap_mul_eq_mul_swap (f : perm α) (x y : α) : swap x y * f = f * swap (f⁻¹ x) (f⁻¹ y) :=\n  equiv.ext fun z => by\n    simp only [perm.mul_apply, swap_apply_def]\n    split_ifs <;> simp_all only [perm.apply_inv_self, perm.eq_inv_iff_eq, eq_self_iff_true, not_true]\n#align swap_mul_eq_mul_swap swap_mul_eq_mul_swap\n\n",
 "swap_mul_eq_iff":
 "theorem swap_mul_eq_iff {i j : α} {σ : perm α} : swap i j * σ = σ ↔ i = j :=\n  ⟨fun h => by\n    have swap_id : swap i j = 1 := mul_right_cancel (trans h (one_mul σ).symm)\n    rw [← swap_apply_right i j, swap_id]\n    rfl, fun h => by erw [h, swap_self, one_mul]⟩\n#align swap_mul_eq_iff swap_mul_eq_iff\n\n",
 "swap_inv":
 "@[simp]\ntheorem swap_inv (x y : α) : (swap x y)⁻¹ = swap x y :=\n  rfl\n#align swap_inv swap_inv\n\n",
 "swap_eq_one_iff":
 "@[simp]\ntheorem swap_eq_one_iff {i j : α} : swap i j = (1 : perm α) ↔ i = j :=\n  swap_eq_refl_iff\n#align swap_eq_one_iff swap_eq_one_iff\n\n",
 "swap_apply_apply":
 "theorem swap_apply_apply (f : perm α) (x y : α) : swap (f x) (f y) = f * swap x y * f⁻¹ := by\n  rw [mul_swap_eq_swap_mul, mul_inv_cancel_right]\n#align swap_apply_apply swap_apply_apply\n\n",
 "sum_congr_swap_one":
 "@[simp]\ntheorem sum_congr_swap_one {α β : Type _} [decidable_eq α] [decidable_eq β] (i j : α) :\n    sumCongr (Equiv.swap i j) (1 : perm β) = Equiv.swap (sum.inl i) (sum.inl j) :=\n  sumCongr_swap_refl i j\n#align sum_congr_swap_one sum_congr_swap_one\n\n",
 "sum_congr_one_swap":
 "@[simp]\ntheorem sum_congr_one_swap {α β : Type _} [decidable_eq α] [decidable_eq β] (i j : β) :\n    sumCongr (1 : perm α) (Equiv.swap i j) = Equiv.swap (sum.inr i) (sum.inr j) :=\n  sum_congr_refl_swap i j\n#align sum_congr_one_swap sum_congr_one_swap\n\n",
 "sum_congr_one":
 "@[simp]\ntheorem sum_congr_one {α β : Type _} : sumCongr (1 : perm α) (1 : perm β) = 1 :=\n  sum_congr_refl\n#align sum_congr_one sum_congr_one\n\n",
 "sum_congr_mul":
 "@[simp]\ntheorem sum_congr_mul {α β : Type _} (e : perm α) (f : perm β) (g : perm α) (h : perm β) :\n    sumCongr e f * sumCongr g h = sumCongr (e * g) (f * h) :=\n  sumCongr_trans g h e f\n#align sum_congr_mul sum_congr_mul\n\n",
 "sum_congr_inv":
 "@[simp]\ntheorem sum_congr_inv {α β : Type _} (e : perm α) (f : perm β) : (sumCongr e f)⁻¹ = sumCongr e⁻¹ f⁻¹ :=\n  sumCongr_symm e f\n#align sum_congr_inv sum_congr_inv\n\n",
 "sum_congr_hom_injective":
 "theorem sum_congr_hom_injective {α β : Type _} : function.injective (sumCongrHom α β) :=\n  by\n  rintro ⟨⟩ ⟨⟩ h\n  rw [prod.mk.inj_iff]\n  constructor <;> ext i\n  · simpa using equiv.congr_fun h (sum.inl i)\n  · simpa using equiv.congr_fun h (sum.inr i)\n#align sum_congr_hom_injective sum_congr_hom_injective\n\n",
 "subtype_perm_zpow":
 "@[simp]\ntheorem subtype_perm_zpow (f : perm α) (n : ℤ) (hf) :\n    (f.subtype_perm hf ^ n : perm { x // p x }) = (f ^ n).subtype_perm (zpow_aux hf) :=\n  by\n  induction' n with n ih\n  · exact subtype_perm_pow _ _ _\n  · simp only [zpow_negSucc, subtype_perm_pow, subtype_perm_inv]\n#align subtype_perm_zpow subtype_perm_zpow\n\n",
 "subtype_perm_pow":
 "@[simp]\ntheorem subtype_perm_pow (f : perm α) (n : ℕ) (hf) :\n    (f.subtype_perm hf : perm { x // p x }) ^ n = (f ^ n).subtype_perm (pow_aux hf) :=\n  by\n  induction' n with n ih\n  · simp\n  · simp_rw [pow_succ', ih, subtype_perm_mul]\n#align subtype_perm_pow subtype_perm_pow\n\n",
 "subtype_perm_one":
 "@[simp]\ntheorem subtype_perm_one (p : α → Prop) (h := fun _ => iff.rfl) : @subtypePerm α p 1 h = 1 :=\n  equiv.ext fun ⟨_, _⟩ => rfl\n#align subtype_perm_one subtype_perm_one\n\n",
 "subtype_perm_of_subtype":
 "@[simp]\ntheorem subtype_perm_of_subtype (f : perm (subtype p)) :\n    subtypePerm (ofSubtype f) (mem_iff_ofSubtype_apply_mem f) = f :=\n  equiv.ext fun x => subtype.coe_injective (ofSubtype_apply_coe f x)\n#align subtype_perm_of_subtype subtype_perm_of_subtype\n\n",
 "subtype_perm_mul":
 "@[simp]\ntheorem subtype_perm_mul (f g : perm α) (hf hg) :\n    (f.subtype_perm hf * g.subtype_perm hg : perm { x // p x }) = (f * g).subtype_perm fun x => (hg _).trans <| hf _ :=\n  rfl\n#align subtype_perm_mul subtype_perm_mul\n\n",
 "subtype_perm_inv":
 "/-- See `equiv.perm.inv_subtype_perm`-/\ntheorem subtype_perm_inv (f : perm α) (hf) :\n    f⁻¹.subtype_perm hf = (f.subtype_perm <| inv_aux.2 hf : perm { x // p x })⁻¹ :=\n  rfl\n#align subtype_perm_inv subtype_perm_inv\n\n",
 "subtype_perm_apply":
 "@[simp]\ntheorem subtype_perm_apply (f : perm α) (h : ∀ x, p x ↔ p (f x)) (x : { x // p x }) :\n    subtypePerm f h x = ⟨f x, (h _).1 x.2⟩ :=\n  rfl\n#align subtype_perm_apply subtype_perm_apply\n\n",
 "subtype_equiv_subtype_perm_apply_of_not_mem":
 "theorem subtype_equiv_subtype_perm_apply_of_not_mem (f : perm (subtype p)) (h : ¬p a) :\n    Perm.subtypeEquivSubtypePerm p f a = a :=\n  f.of_subtype_apply_of_not_mem h\n#align subtype_equiv_subtype_perm_apply_of_not_mem subtype_equiv_subtype_perm_apply_of_not_mem\n\n",
 "subtype_equiv_subtype_perm_apply_of_mem":
 "theorem subtype_equiv_subtype_perm_apply_of_mem (f : perm (subtype p)) (h : p a) :\n    Perm.subtypeEquivSubtypePerm p f a = f ⟨a, h⟩ :=\n  f.of_subtype_apply_of_mem h\n#align subtype_equiv_subtype_perm_apply_of_mem subtype_equiv_subtype_perm_apply_of_mem\n\n",
 "subtype_congr_hom_injective":
 "theorem subtype_congr_hom_injective (p : α → Prop) [decidable_pred p] : function.injective (subtypeCongrHom p) :=\n  by\n  rintro ⟨⟩ ⟨⟩ h\n  rw [prod.mk.inj_iff]\n  constructor <;> ext i <;> simpa using equiv.congr_fun h i\n#align subtype_congr_hom_injective subtype_congr_hom_injective\n\n",
 "sigma_congr_right_one":
 "@[simp]\ntheorem sigma_congr_right_one {α : Type _} {β : α → Type _} : sigma_congr_right (1 : ∀ a, equiv.perm <| β a) = 1 :=\n  sigma_congr_right_refl\n#align sigma_congr_right_one sigma_congr_right_one\n\n",
 "sigma_congr_right_mul":
 "@[simp]\ntheorem sigma_congr_right_mul {α : Type _} {β : α → Type _} (F : ∀ a, perm (β a)) (G : ∀ a, perm (β a)) :\n    sigma_congr_right F * sigma_congr_right G = sigma_congr_right (F * G) :=\n  sigmaCongrRight_trans G F\n#align sigma_congr_right_mul sigma_congr_right_mul\n\n",
 "sigma_congr_right_inv":
 "@[simp]\ntheorem sigma_congr_right_inv {α : Type _} {β : α → Type _} (F : ∀ a, perm (β a)) :\n    (sigma_congr_right F)⁻¹ = sigma_congr_right fun a => (F a)⁻¹ :=\n  sigmaCongrRight_symm F\n#align sigma_congr_right_inv sigma_congr_right_inv\n\n",
 "sigma_congr_right_hom_injective":
 "theorem sigma_congr_right_hom_injective {α : Type _} {β : α → Type _} : function.injective (sigmaCongrRightHom β) :=\n  by\n  intro x y h\n  ext (a b)\n  simpa using equiv.congr_fun h ⟨a, b⟩\n#align sigma_congr_right_hom_injective sigma_congr_right_hom_injective\n\n",
 "self_trans_inv":
 "@[simp]\ntheorem self_trans_inv (e : perm α) : e.trans e⁻¹ = 1 :=\n  equiv.self_trans_symm e\n#align self_trans_inv self_trans_inv\n\n",
 "refl_mul":
 "@[simp]\ntheorem refl_mul (e : perm α) : equiv.refl α * e = e :=\n  equiv.refl_trans e\n#align refl_mul refl_mul\n\n",
 "refl_inv":
 "@[simp]\ntheorem refl_inv : (equiv.refl α : perm α)⁻¹ = 1 :=\n  equiv.refl_symm\n#align refl_inv refl_inv\n\n",
 "preimage_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem preimage_inv (f : perm α) (s : set α) : «expr ⁻¹' » («expr⇑ » f⁻¹) s = «expr '' » f s :=\n  (f.image_eq_preimage _).symm\n#align preimage_inv preimage_inv\n\n",
 "pow_mul_right":
 "@[simp, to_additive pow_add_right]\ntheorem pow_mul_right (n : ℕ) : Equiv.mulRight a ^ n = Equiv.mulRight (a ^ n) :=\n  by\n  ext\n  simp [perm.coe_pow]\n#align pow_mul_right pow_mul_right\n\n",
 "pow_mul_left":
 "@[simp, to_additive pow_add_left]\ntheorem pow_mul_left (n : ℕ) : Equiv.mulLeft a ^ n = Equiv.mulLeft (a ^ n) :=\n  by\n  ext\n  simp [perm.coe_pow]\n#align pow_mul_left pow_mul_left\n\n",
 "pow_aux":
 "private theorem pow_aux (hf : ∀ x, p x ↔ p (f x)) : ∀ {n : ℕ} (x), p x ↔ p ((f ^ n) x)\n  | 0, x => iff.rfl\n  | n + 1, x => (pow_aux _).trans (hf _)\n#align pow_aux pow_aux\n\n",
 "pow_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pow_add_right (n : ℕ) : Equiv.addRight a ^ n = Equiv.addRight («expr • » n a) :=\n  by\n  ext\n  simp [perm.coe_pow]\n#align pow_add_right pow_add_right\n\n",
 "pow_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pow_add_left (n : ℕ) : Equiv.addLeft a ^ n = Equiv.addLeft («expr • » n a) :=\n  by\n  ext\n  simp [perm.coe_pow]\n#align pow_add_left pow_add_left\n\n",
 "perm_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem bij_on.perm_zpow (hf : BijOn f s s) : ∀ n : ℤ, BijOn («expr⇑ » (f ^ n)) s s\n  | int.of_nat n => hf.perm_pow _\n  | Int.negSucc n => by\n    rw [zpow_negSucc]\n    exact (hf.perm_pow _).perm_inv\n#align bij_on.perm_zpow bij_on.perm_zpow\n\n",
 "perm_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem bij_on.perm_pow : BijOn f s s → ∀ n : ℕ, BijOn («expr⇑ » (f ^ n)) s s :=\n  by\n  simp_rw [Equiv.Perm.coe_pow]\n  exact bij_on.iterate\n#align bij_on.perm_pow bij_on.perm_pow\n\n",
 "perm_congr_eq_mul":
 "/-- If `e` is also a permutation, we can write `perm_congr`\ncompletely in terms of the group structure. -/\n@[simp]\ntheorem perm_congr_eq_mul (e p : perm α) : e.perm_congr p = e * p * e⁻¹ :=\n  rfl\n#align perm_congr_eq_mul perm_congr_eq_mul\n\n",
 "one_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem one_trans {α : Type _} {β : Sort _} (e : «expr ≃ » α β) : (1 : perm α).trans e = e :=\n  equiv.refl_trans e\n#align one_trans one_trans\n\n",
 "one_symm":
 "@[simp]\ntheorem one_symm : (1 : perm α).symm = 1 :=\n  equiv.refl_symm\n#align one_symm one_symm\n\n",
 "one_def":
 "theorem one_def : (1 : perm α) = equiv.refl α :=\n  rfl\n#align one_def one_def\n\n",
 "one_apply":
 "theorem one_apply (x) : (1 : perm α) x = x :=\n  rfl\n#align one_apply one_apply\n\n",
 "of_subtype_subtype_perm":
 "theorem of_subtype_subtype_perm {f : perm α} (h₁ : ∀ x, p x ↔ p (f x)) (h₂ : ∀ x, f x ≠ x → p x) :\n    ofSubtype (subtypePerm f h₁) = f :=\n  equiv.ext fun x => by\n    by_cases hx : p x\n    · exact (subtype_perm f h₁).extend_domain_apply_subtype _ hx\n    · rw [of_subtype, MonoidHom.coe_mk, Equiv.Perm.extendDomain_apply_not_subtype]\n      · exact not_not.mp fun h => hx (h₂ x (ne.symm h))\n      · exact hx\n#align of_subtype_subtype_perm of_subtype_subtype_perm\n\n",
 "of_subtype_apply_of_not_mem":
 "theorem of_subtype_apply_of_not_mem (f : perm (subtype p)) (ha : ¬p a) : ofSubtype f a = a :=\n  extendDomain_apply_not_subtype _ _ ha\n#align of_subtype_apply_of_not_mem of_subtype_apply_of_not_mem\n\n",
 "of_subtype_apply_of_mem":
 "theorem of_subtype_apply_of_mem (f : perm (subtype p)) (ha : p a) : ofSubtype f a = f ⟨a, ha⟩ :=\n  extendDomain_apply_subtype _ _ _\n#align of_subtype_apply_of_mem of_subtype_apply_of_mem\n\n",
 "of_subtype_apply_coe":
 "@[simp]\ntheorem of_subtype_apply_coe (f : perm (subtype p)) (x : subtype p) : ofSubtype f x = f x :=\n  subtype.cases_on x fun _ => ofSubtype_apply_of_mem f\n#align of_subtype_apply_coe of_subtype_apply_coe\n\n",
 "mul_symm":
 "@[simp]\ntheorem mul_symm (e : perm α) : e * e.symm = 1 :=\n  equiv.symm_trans_self e\n#align mul_symm mul_symm\n\n",
 "mul_swap_mul_self":
 "/-- Right-multiplying a permutation with `swap i j` twice gives the original permutation.\n\n  This specialization of `swap_mul_self` is useful when using cosets of permutations.\n-/\n@[simp]\ntheorem mul_swap_mul_self (i j : α) (σ : perm α) : σ * Equiv.swap i j * Equiv.swap i j = σ := by\n  rw [mul_assoc, swap_mul_self, mul_one]\n#align mul_swap_mul_self mul_swap_mul_self\n\n",
 "mul_swap_involutive":
 "/-- A stronger version of `mul_left_injective` -/\n@[simp]\ntheorem mul_swap_involutive (i j : α) : function.involutive (· * Equiv.swap i j) :=\n  mul_swap_mul_self i j\n#align mul_swap_involutive mul_swap_involutive\n\n",
 "mul_swap_eq_swap_mul":
 "theorem mul_swap_eq_swap_mul (f : perm α) (x y : α) : f * swap x y = swap (f x) (f y) * f := by\n  rw [swap_mul_eq_mul_swap, perm.inv_apply_self, perm.inv_apply_self]\n#align mul_swap_eq_swap_mul mul_swap_eq_swap_mul\n\n",
 "mul_swap_eq_iff":
 "theorem mul_swap_eq_iff {i j : α} {σ : perm α} : σ * swap i j = σ ↔ i = j :=\n  ⟨fun h => by\n    have swap_id : swap i j = 1 := mul_left_cancel (trans h (one_mul σ).symm)\n    rw [← swap_apply_right i j, swap_id]\n    rfl, fun h => by erw [h, swap_self, mul_one]⟩\n#align mul_swap_eq_iff mul_swap_eq_iff\n\n",
 "mul_right_one":
 "@[simp, to_additive]\ntheorem mul_right_one : Equiv.mulRight (1 : α) = 1 :=\n  ext mul_one\n#align mul_right_one mul_right_one\n\n",
 "mul_right_mul":
 "@[simp, to_additive]\ntheorem mul_right_mul : Equiv.mulRight (a * b) = Equiv.mulRight b * Equiv.mulRight a :=\n  ext fun _ => (mul_assoc _ _ _).symm\n#align mul_right_mul mul_right_mul\n\n",
 "mul_refl":
 "@[simp]\ntheorem mul_refl (e : perm α) : e * equiv.refl α = e :=\n  equiv.trans_refl e\n#align mul_refl mul_refl\n\n",
 "mul_left_one":
 "@[simp, to_additive]\ntheorem mul_left_one : Equiv.mulLeft (1 : α) = 1 :=\n  ext one_mul\n#align mul_left_one mul_left_one\n\n",
 "mul_left_mul":
 "@[simp, to_additive]\ntheorem mul_left_mul : Equiv.mulLeft (a * b) = Equiv.mulLeft a * Equiv.mulLeft b :=\n  ext <| mul_assoc _ _\n#align mul_left_mul mul_left_mul\n\n",
 "mul_def":
 "theorem mul_def (f g : perm α) : f * g = g.trans f :=\n  rfl\n#align mul_def mul_def\n\n",
 "mul_apply":
 "theorem mul_apply (f g : perm α) (x) : (f * g) x = f (g x) :=\n  equiv.trans_apply _ _ _\n#align mul_apply mul_apply\n\n",
 "mem_iff_of_subtype_apply_mem":
 "theorem mem_iff_of_subtype_apply_mem (f : perm (subtype p)) (x : α) : p x ↔ p ((ofSubtype f : α → α) x) :=\n  if h : p x then by simpa only [h, true_iff_iff, MonoidHom.coe_mk, of_subtype_apply_of_mem f h] using (f ⟨x, h⟩).2\n  else by simp [h, of_subtype_apply_of_not_mem f h]\n#align mem_iff_of_subtype_apply_mem mem_iff_of_subtype_apply_mem\n\n",
 "iterate_eq_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem iterate_eq_pow (f : perm α) (n : ℕ) : «expr ^[ ]» f n = «expr⇑ » (f ^ n) :=\n  (coe_pow _ _).symm\n#align iterate_eq_pow iterate_eq_pow\n\n",
 "inv_trans_self":
 "@[simp]\ntheorem inv_trans_self (e : perm α) : e⁻¹.trans e = 1 :=\n  equiv.symm_trans_self e\n#align inv_trans_self inv_trans_self\n\n",
 "inv_subtype_perm":
 "/-- See `equiv.perm.subtype_perm_inv`-/\n@[simp]\ntheorem inv_subtype_perm (f : perm α) (hf) :\n    (f.subtype_perm hf : perm { x // p x })⁻¹ = f⁻¹.subtype_perm (inv_aux.1 hf) :=\n  rfl\n#align inv_subtype_perm inv_subtype_perm\n\n",
 "inv_mul_right":
 "@[simp, to_additive inv_add_right]\ntheorem inv_mul_right : (Equiv.mulRight a)⁻¹ = Equiv.mulRight a⁻¹ :=\n  equiv.coe_inj.1 rfl\n#align inv_mul_right inv_mul_right\n\n",
 "inv_mul_left":
 "@[simp, to_additive inv_add_left]\ntheorem inv_mul_left : (Equiv.mulLeft a)⁻¹ = Equiv.mulLeft a⁻¹ :=\n  equiv.coe_inj.1 rfl\n#align inv_mul_left inv_mul_left\n\n",
 "inv_eq_iff_eq":
 "theorem inv_eq_iff_eq {f : perm α} {x y : α} : f⁻¹ x = y ↔ x = f y :=\n  f.symm_apply_eq\n#align inv_eq_iff_eq inv_eq_iff_eq\n\n",
 "inv_def":
 "theorem inv_def (f : perm α) : f⁻¹ = f.symm :=\n  rfl\n#align inv_def inv_def\n\n",
 "inv_aux":
 "private theorem inv_aux : (∀ x, p x ↔ p (f x)) ↔ ∀ x, p x ↔ p (f⁻¹ x) :=\n  f⁻¹.surjective.forall.trans <| by simp_rw [f.apply_inv_self, iff.comm]\n#align inv_aux inv_aux\n\n",
 "inv_apply_self":
 "@[simp]\ntheorem inv_apply_self (f : perm α) (x) : f⁻¹ (f x) = x :=\n  f.symm_apply_apply x\n#align inv_apply_self inv_apply_self\n\n",
 "inv_add_right":
 "@[simp]\ntheorem inv_add_right : (Equiv.addRight a)⁻¹ = Equiv.addRight (-a) :=\n  equiv.coe_inj.1 rfl\n#align inv_add_right inv_add_right\n\n",
 "inv_add_left":
 "@[simp]\ntheorem inv_add_left : (Equiv.addLeft a)⁻¹ = Equiv.addLeft (-a) :=\n  equiv.coe_inj.1 rfl\n#align inv_add_left inv_add_left\n\n",
 "image_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem image_inv (f : perm α) (s : set α) : «expr '' » («expr⇑ » f⁻¹) s = «expr ⁻¹' » f s :=\n  f⁻¹.image_eq_preimage _\n#align image_inv image_inv\n\n",
 "extend_domain_zpow":
 "@[simp]\ntheorem extend_domain_zpow (n : ℤ) : (e ^ n).extend_domain f = e.extend_domain f ^ n :=\n  map_zpow (extendDomainHom f) _ _\n#align extend_domain_zpow extend_domain_zpow\n\n",
 "extend_domain_pow":
 "@[simp]\ntheorem extend_domain_pow (n : ℕ) : (e ^ n).extend_domain f = e.extend_domain f ^ n :=\n  map_pow (extendDomainHom f) _ _\n#align extend_domain_pow extend_domain_pow\n\n",
 "extend_domain_one":
 "@[simp]\ntheorem extend_domain_one : extendDomain 1 f = 1 :=\n  extendDomain_refl f\n#align extend_domain_one extend_domain_one\n\n",
 "extend_domain_mul":
 "@[simp]\ntheorem extend_domain_mul (e e' : perm α) : e.extend_domain f * e'.extend_domain f = (e * e').extend_domain f :=\n  extendDomain_trans _ _ _\n#align extend_domain_mul extend_domain_mul\n\n",
 "extend_domain_inv":
 "@[simp]\ntheorem extend_domain_inv : (e.extend_domain f)⁻¹ = e⁻¹.extend_domain f :=\n  rfl\n#align extend_domain_inv extend_domain_inv\n\n",
 "extend_domain_hom_injective":
 "theorem extend_domain_hom_injective : function.injective (extendDomainHom f) :=\n  (injective_iff_map_eq_one (extendDomainHom f)).mpr fun e he =>\n    ext fun x => f.injective (subtype.ext ((extendDomain_apply_image e f x).symm.trans (ext_iff.mp he (f x))))\n#align extend_domain_hom_injective extend_domain_hom_injective\n\n",
 "extend_domain_eq_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem extend_domain_eq_one_iff {e : perm α} {f : «expr ≃ » α (subtype p)} : e.extend_domain f = 1 ↔ e = 1 :=\n  (injective_iff_map_eq_one' (extendDomainHom f)).mp (extendDomainHom_injective f) e\n#align extend_domain_eq_one_iff extend_domain_eq_one_iff\n\n",
 "eq_inv_iff_eq":
 "theorem eq_inv_iff_eq {f : perm α} {x y : α} : x = f⁻¹ y ↔ f x = y :=\n  f.eq_symm_apply\n#align eq_inv_iff_eq eq_inv_iff_eq\n\n",
 "default_eq":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Mario Carneiro\n-/\n@[simp]\ntheorem default_eq : (default : perm α) = 1 :=\n  rfl\n#align default_eq default_eq\n\n",
 "coe_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n@[norm_cast]\ntheorem coe_pow (f : perm α) (n : ℕ) : «expr⇑ » (f ^ n) = «expr ^[ ]» f n :=\n  hom_coe_pow _ rfl (fun _ _ => rfl) _ _\n#align coe_pow coe_pow\n\n",
 "coe_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_one : «expr⇑ » (1 : perm α) = id :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_mul (f g : perm α) : «expr⇑ » (f * g) = f ∘ g :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "bij_on_perm_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem bij_on_perm_inv : BijOn («expr⇑ » f⁻¹) t s ↔ BijOn f s t :=\n  Equiv.bijOn_symm\n#align bij_on_perm_inv bij_on_perm_inv\n\n",
 "apply_inv_self":
 "@[simp]\ntheorem apply_inv_self (f : perm α) (x) : f (f⁻¹ x) = x :=\n  f.apply_symm_apply x\n#align apply_inv_self apply_inv_self\n\n",
 "add_right_zero":
 "@[simp]\ntheorem add_right_zero : Equiv.addRight (0 : α) = 1 :=\n  ext add_zero\n#align add_right_zero add_right_zero\n\n",
 "add_right_add":
 "@[simp]\ntheorem add_right_add : Equiv.addRight (a + b) = Equiv.addRight b * Equiv.addRight a :=\n  ext fun _ => (add_assoc _ _ _).symm\n#align add_right_add add_right_add\n\n",
 "add_left_zero":
 "@[simp]\ntheorem add_left_zero : Equiv.addLeft (0 : α) = 1 :=\n  ext zero_add\n#align add_left_zero add_left_zero\n\n",
 "add_left_add":
 "@[simp]\ntheorem add_left_add : Equiv.addLeft (a + b) = Equiv.addLeft a * Equiv.addLeft b :=\n  ext <| add_assoc _ _\n#align add_left_add add_left_add\n\n"}