{"zpow_disjoint_zpow":
 "theorem disjoint.zpow_disjoint_zpow {σ τ : Perm α} (hστ : Disjoint σ τ) (m n : ℤ) : Disjoint (σ ^ m) (τ ^ n) := fun x =>\n  Or.imp (fun h => zpow_apply_eq_self_of_apply_eq_self h m) (fun h => zpow_apply_eq_self_of_apply_eq_self h n) (hστ x)\n#align disjoint.zpow_disjoint_zpow disjoint.zpow_disjoint_zpow\n\n",
 "zpow_apply_mem_support":
 "@[simp]\ntheorem zpow_apply_mem_support {n : ℤ} {x : α} : (f ^ n) x ∈ f.support ↔ x ∈ f.support :=\n  by\n  cases n\n  · rw [Int.ofNat_eq_coe, zpow_ofNat, pow_apply_mem_support]\n  · rw [zpow_negSucc, ← support_inv, ← inv_pow, pow_apply_mem_support]\n#align zpow_apply_mem_support zpow_apply_mem_support\n\n",
 "zpow_apply_eq_self_of_apply_eq_self":
 "theorem zpow_apply_eq_self_of_apply_eq_self {x : α} (hfx : f x = x) : ∀ n : ℤ, (f ^ n) x = x\n  | (n : ℕ) => pow_apply_eq_self_of_apply_eq_self hfx n\n  | -[n+1] => by rw [zpow_negSucc, inv_eq_iff_eq, pow_apply_eq_self_of_apply_eq_self hfx]\n#align zpow_apply_eq_self_of_apply_eq_self zpow_apply_eq_self_of_apply_eq_self\n\n",
 "zpow_apply_eq_of_apply_apply_eq_self":
 "theorem zpow_apply_eq_of_apply_apply_eq_self {x : α} (hffx : f (f x) = x) : ∀ i : ℤ, (f ^ i) x = x ∨ (f ^ i) x = f x\n  | (n : ℕ) => pow_apply_eq_of_apply_apply_eq_self hffx n\n  | -[n+1] =>\n    by\n    rw [zpow_negSucc, inv_eq_iff_eq, ← f.injective.eq_iff, ← mul_apply, ← pow_succ, eq_comm, inv_eq_iff_eq, ← mul_apply,\n      ← pow_succ', @eq_comm _ x, or_comm]\n    exact pow_apply_eq_of_apply_apply_eq_self hffx _\n#align zpow_apply_eq_of_apply_apply_eq_self zpow_apply_eq_of_apply_apply_eq_self\n\n",
 "two_le_card_support_of_ne_one":
 "theorem two_le_card_support_of_ne_one {f : Perm α} (h : f ≠ 1) : 2 ≤ f.support.card :=\n  one_lt_card_support_of_ne_one h\n#align two_le_card_support_of_ne_one two_le_card_support_of_ne_one\n\n",
 "symmetric":
 "theorem disjoint.symmetric : symmetric (@Disjoint α) := fun _ _ => Disjoint.symm\n#align disjoint.symmetric disjoint.symmetric\n\n",
 "symm":
 "#print Disjoint.symm /-\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Aaron Anderson, Yakov Pechersky\n-/\n@[symm]\ntheorem Disjoint.symm : Disjoint f g → Disjoint g f := by simp only [Disjoint, or_comm, imp_self]\n#align disjoint.symm Disjoint.symm\n-/\n\n",
 "support_zpow_le":
 "theorem support_zpow_le (σ : Perm α) (n : ℤ) : (σ ^ n).support ≤ σ.support := fun x h1 =>\n  mem_support.mpr fun h2 => mem_support.mp h1 (zpow_apply_eq_self_of_apply_eq_self h2 n)\n#align support_zpow_le support_zpow_le\n\n",
 "support_swap_mul_swap":
 "theorem support_swap_mul_swap {x y z : α} (h : List.Nodup [x, y, z]) : support (swap x y * swap y z) = {x, y, z} :=\n  by\n  simp only [list.not_mem_nil, and_true_iff, List.mem_cons, not_false_iff, List.nodup_cons, List.mem_singleton,\n    and_self_iff, List.nodup_nil] at h\n  push_neg  at h\n  apply le_antisymm\n  · convert support_mul_le _ _\n    rw [support_swap h.left.left, support_swap h.right]\n    ext\n    simp [or_comm, or_left_comm]\n  · intro\n    simp only [mem_insert, mem_singleton]\n    rintro (rfl | rfl | rfl | _) <;>\n      simp [swap_apply_of_ne_of_ne, h.left.left, h.left.left.symm, h.left.right, h.left.right.symm, h.right.symm]\n#align support_swap_mul_swap support_swap_mul_swap\n\n",
 "support_swap_mul_ge_support_diff":
 "theorem support_swap_mul_ge_support_diff (f : Perm α) (x y : α) : f.support \\ {x, y} ≤ (swap x y * f).support :=\n  by\n  intro\n  simp only [and_imp, perm.coe_mul, Function.comp_apply, ne.def, mem_support, mem_insert, mem_sdiff, mem_singleton]\n  push_neg\n  rintro ha ⟨hx, hy⟩ H\n  rw [swap_apply_eq_iff, swap_apply_of_ne_of_ne hx hy] at H\n  exact ha H\n#align support_swap_mul_ge_support_diff support_swap_mul_ge_support_diff\n\n",
 "support_swap_mul_eq":
 "theorem support_swap_mul_eq (f : Perm α) (x : α) (h : f (f x) ≠ x) : (swap x (f x) * f).support = f.support \\ {x} :=\n  by\n  by_cases hx : f x = x\n  · simp [hx, sdiff_singleton_eq_erase, not_mem_support.mpr hx, erase_eq_of_not_mem]\n  ext z\n  by_cases hzx : z = x\n  · simp [hzx]\n  by_cases hzf : z = f x\n  · simp [hzf, hx, h, swap_apply_of_ne_of_ne]\n  by_cases hzfx : f z = x\n  · simp [ne.symm hzx, hzx, ne.symm hzf, hzfx]\n  · simp [ne.symm hzx, hzx, ne.symm hzf, hzfx, f.injective.ne hzx, swap_apply_of_ne_of_ne]\n#align support_swap_mul_eq support_swap_mul_eq\n\n",
 "support_swap_iff":
 "theorem support_swap_iff (x y : α) : support (swap x y) = {x, y} ↔ x ≠ y :=\n  by\n  refine' ⟨fun h H => _, support_swap⟩\n  subst H\n  simp only [swap_self, support_refl, pair_eq_singleton] at h\n  have : x ∈ ∅ := by\n    rw [h]\n    exact mem_singleton.mpr rfl\n  simpa\n#align support_swap_iff support_swap_iff\n\n",
 "support_swap":
 "@[simp]\ntheorem support_swap {x y : α} (h : x ≠ y) : support (swap x y) = {x, y} :=\n  by\n  ext z\n  by_cases hx : z = x\n  any_goals simpa [hx] using h.symm\n  by_cases hy : z = y <;> · simp [swap_apply_of_ne_of_ne, hx, hy] <;> cc\n#align support_swap support_swap\n\n",
 "support_subtype_perm":
 "@[simp]\ntheorem support_subtype_perm [DecidableEq α] {s : Finset α} (f : Perm α) (h) :\n    (f.subtype_perm h : Perm { x // x ∈ s }).support = s.attach.filter fun x => f x ≠ x :=\n  by\n  ext\n  simp [Subtype.ext_iff]\n#align support_subtype_perm support_subtype_perm\n\n",
 "support_refl":
 "@[simp]\ntheorem support_refl : support (Equiv.refl α) = ∅ :=\n  support_one\n#align support_refl support_refl\n\n",
 "support_prod_of_pairwise_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem support_prod_of_pairwise_disjoint (l : List (Perm α)) (h : l.pairwise Disjoint) :\n    l.prod.support = (l.map support).foldr («expr ⊔ » · ·) («expr⊥») :=\n  by\n  induction' l with hd tl hl\n  · simp\n  · rw [List.pairwise_cons] at h\n    have : Disjoint hd tl.prod := disjoint_prod_right _ h.left\n    simp [this.support_mul, hl h.right]\n#align support_prod_of_pairwise_disjoint support_prod_of_pairwise_disjoint\n\n",
 "support_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem support_prod_le (l : List (Perm α)) : l.prod.support ≤ (l.map support).foldr («expr ⊔ » · ·) («expr⊥») :=\n  by\n  induction' l with hd tl hl\n  · simp\n  · rw [List.prod_cons, list.map_cons, List.foldr_cons]\n    refine' (support_mul_le hd tl.prod).trans _\n    exact sup_le_sup le_rfl hl\n#align support_prod_le support_prod_le\n\n",
 "support_pow_le":
 "theorem support_pow_le (σ : Perm α) (n : ℕ) : (σ ^ n).support ≤ σ.support := fun x h1 =>\n  mem_support.mpr fun h2 => mem_support.mp h1 (pow_apply_eq_self_of_apply_eq_self h2 n)\n#align support_pow_le support_pow_le\n\n",
 "support_one":
 "@[simp]\ntheorem support_one : (1 : Perm α).support = ∅ := by rw [support_eq_empty_iff]\n#align support_one support_one\n\n",
 "support_mul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem support_mul_le (f g : Perm α) : (f * g).support ≤ «expr ⊔ » f.support g.support := fun x =>\n  by\n  rw [sup_eq_union, mem_union, mem_support, mem_support, mem_support, mul_apply, ← not_and_or, not_imp_not]\n  rintro ⟨hf, hg⟩\n  rw [hg, hf]\n#align support_mul_le support_mul_le\n\n",
 "support_mul":
 "theorem disjoint.support_mul (h : Disjoint f g) : (f * g).support = f.support ∪ g.support :=\n  by\n  refine' le_antisymm (support_mul_le _ _) fun a => _\n  rw [mem_union, mem_support, mem_support, mem_support, mul_apply, ← not_and_or, not_imp_not]\n  exact\n    (h a).elim (fun hf h => ⟨hf, f.apply_eq_iff_eq.mp (h.trans hf.symm)⟩) fun hg h =>\n      ⟨(congr_arg f hg).symm.trans h, hg⟩\n#align disjoint.support_mul disjoint.support_mul\n\n",
 "support_le_prod_of_mem":
 "theorem support_le_prod_of_mem {l : List (Perm α)} (h : f ∈ l) (hl : l.pairwise Disjoint) :\n    f.support ≤ l.prod.support := by\n  intro x hx\n  rwa [mem_support, ← eq_on_support_mem_disjoint h hl _ hx, ← mem_support]\n#align support_le_prod_of_mem support_le_prod_of_mem\n\n",
 "support_inv":
 "@[simp]\ntheorem support_inv (σ : Perm α) : support σ⁻¹ = σ.support := by\n  simp_rw [Finset.ext_iff, mem_support, not_iff_not, inv_eq_iff_eq.trans eq_comm, iff_self_iff, imp_true_iff]\n#align support_inv support_inv\n\n",
 "support_extend_domain":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem support_extend_domain (f : «expr ≃ » α (Subtype p)) {g : Perm α} :\n    support (g.extend_domain f) = g.support.map f.as_embedding :=\n  by\n  ext b\n  simp only [exists_prop, Function.Embedding.coeFn_mk, to_embedding_apply, mem_map, ne.def,\n    Function.Embedding.trans_apply, mem_support]\n  by_cases pb : p b\n  · rw [extend_domain_apply_subtype _ _ pb]\n    constructor\n    · rintro h\n      refine' ⟨f.symm ⟨b, pb⟩, _, by simp⟩\n      contrapose! h\n      simp [h]\n    · rintro ⟨a, ha, hb⟩\n      contrapose! ha\n      obtain rfl : a = f.symm ⟨b, pb⟩ := by\n        rw [eq_symm_apply]\n        exact Subtype.coe_injective hb\n      rw [eq_symm_apply]\n      exact Subtype.coe_injective ha\n  · rw [extend_domain_apply_not_subtype _ _ pb]\n    simp only [not_exists, false_iff_iff, not_and, eq_self_iff_true, not_true]\n    rintro a ha rfl\n    exact pb (Subtype.prop _)\n#align support_extend_domain support_extend_domain\n\n",
 "support_eq_empty_iff":
 "@[simp]\ntheorem support_eq_empty_iff {σ : Perm α} : σ.support = ∅ ↔ σ = 1 := by\n  simp_rw [Finset.ext_iff, mem_support, Finset.not_mem_empty, iff_false_iff, Classical.not_not, Equiv.Perm.ext_iff,\n    one_apply]\n#align support_eq_empty_iff support_eq_empty_iff\n\n",
 "support_congr":
 "theorem support_congr (h : f.support ⊆ g.support) (h' : ∀ x ∈ g.support, f x = g x) : f = g :=\n  by\n  ext x\n  by_cases hx : x ∈ g.support\n  · exact h' x hx\n  · rw [not_mem_support.mp hx, ← not_mem_support]\n    exact fun H => hx (h H)\n#align support_congr support_congr\n\n",
 "set_support_zpow_subset":
 "theorem set_support_zpow_subset (n : ℤ) : { x | (p ^ n) x ≠ x } ⊆ { x | p x ≠ x } :=\n  by\n  intro x\n  simp only [Set.mem_setOf_eq, ne.def]\n  intro hx H\n  simpa [zpow_apply_eq_self_of_apply_eq_self H] using hx\n#align set_support_zpow_subset set_support_zpow_subset\n\n",
 "set_support_mul_subset":
 "theorem set_support_mul_subset : { x | (p * q) x ≠ x } ⊆ { x | p x ≠ x } ∪ { x | q x ≠ x } :=\n  by\n  intro x\n  simp only [perm.coe_mul, Function.comp_apply, ne.def, Set.mem_union, Set.mem_setOf_eq]\n  by_cases hq : q x = x <;> simp [hq]\n#align set_support_mul_subset set_support_mul_subset\n\n",
 "set_support_inv_eq":
 "theorem set_support_inv_eq : { x | p⁻¹ x ≠ x } = { x | p x ≠ x } :=\n  by\n  ext x\n  simp only [Set.mem_setOf_eq, ne.def]\n  rw [inv_def, symm_apply_eq, eq_comm]\n#align set_support_inv_eq set_support_inv_eq\n\n",
 "set_support_apply_mem":
 "theorem set_support_apply_mem {p : Perm α} {a : α} : p a ∈ { x | p x ≠ x } ↔ a ∈ { x | p x ≠ x } := by simp\n#align set_support_apply_mem set_support_apply_mem\n\n",
 "pow_eq_on_of_mem_support":
 "theorem pow_eq_on_of_mem_support (h : ∀ x ∈ f.support ∩ g.support, f x = g x) (k : ℕ) :\n    ∀ x ∈ f.support ∩ g.support, (f ^ k) x = (g ^ k) x :=\n  by\n  induction' k with k hk\n  · simp\n  · intro x hx\n    rw [pow_succ', mul_apply, pow_succ', mul_apply, h _ hx, hk]\n    rwa [mem_inter, apply_mem_support, ← h _ hx, apply_mem_support, ← mem_inter]\n#align pow_eq_on_of_mem_support pow_eq_on_of_mem_support\n\n",
 "pow_disjoint_pow":
 "theorem disjoint.pow_disjoint_pow {σ τ : Perm α} (hστ : Disjoint σ τ) (m n : ℕ) : Disjoint (σ ^ m) (τ ^ n) :=\n  hστ.zpow_disjoint_zpow m n\n#align disjoint.pow_disjoint_pow disjoint.pow_disjoint_pow\n\n",
 "pow_apply_mem_support":
 "@[simp]\ntheorem pow_apply_mem_support {n : ℕ} {x : α} : (f ^ n) x ∈ f.support ↔ x ∈ f.support :=\n  by\n  induction' n with n ih\n  · rfl\n  rw [pow_succ, perm.mul_apply, apply_mem_support, ih]\n#align pow_apply_mem_support pow_apply_mem_support\n\n",
 "pow_apply_eq_self_of_apply_eq_self":
 "theorem pow_apply_eq_self_of_apply_eq_self {x : α} (hfx : f x = x) : ∀ n : ℕ, (f ^ n) x = x\n  | 0 => rfl\n  | n + 1 => by rw [pow_succ', mul_apply, hfx, pow_apply_eq_self_of_apply_eq_self]\n#align pow_apply_eq_self_of_apply_eq_self pow_apply_eq_self_of_apply_eq_self\n\n",
 "pow_apply_eq_of_apply_apply_eq_self":
 "theorem pow_apply_eq_of_apply_apply_eq_self {x : α} (hffx : f (f x) = x) : ∀ n : ℕ, (f ^ n) x = x ∨ (f ^ n) x = f x\n  | 0 => or.inl rfl\n  | n + 1 =>\n    (pow_apply_eq_of_apply_apply_eq_self n).elim (fun h => or.inr (by rw [pow_succ, mul_apply, h])) fun h =>\n      or.inl (by rw [pow_succ, mul_apply, h, hffx])\n#align pow_apply_eq_of_apply_apply_eq_self pow_apply_eq_of_apply_apply_eq_self\n\n",
 "one_lt_card_support_of_ne_one":
 "theorem one_lt_card_support_of_ne_one {f : Perm α} (h : f ≠ 1) : 1 < f.support.card :=\n  by\n  simp_rw [one_lt_card_iff, mem_support, ← not_or]\n  contrapose! h\n  ext a\n  specialize h (f a) a\n  rwa [apply_eq_iff_eq, or_self_iff, or_self_iff] at h\n#align one_lt_card_support_of_ne_one one_lt_card_support_of_ne_one\n\n",
 "of_subtype_swap_eq":
 "@[simp]\ntheorem of_subtype_swap_eq {p : α → Prop} [DecidablePred p] (x y : Subtype p) :\n    (Equiv.swap x y).of_subtype = Equiv.swap ↑x ↑y :=\n  Equiv.ext fun z => by\n    by_cases hz : p z\n    · rw [swap_apply_def, of_subtype_apply_of_mem _ hz]\n      split_ifs with hzx hzy\n      · simp_rw [hzx, Subtype.coe_eta, swap_apply_left]\n      · simp_rw [hzy, Subtype.coe_eta, swap_apply_right]\n      · rw [swap_apply_of_ne_of_ne]\n        rfl\n        intro h\n        apply hzx\n        rw [← h]\n        rfl\n        intro h\n        apply hzy\n        rw [← h]\n        rfl\n    · rw [of_subtype_apply_of_not_mem _ hz, swap_apply_of_ne_of_ne]\n      intro h\n      apply hz\n      rw [h]\n      exact Subtype.prop x\n      intro h\n      apply hz\n      rw [h]\n      exact Subtype.prop y\n#align of_subtype_swap_eq of_subtype_swap_eq\n\n",
 "of_subtype_is_swap":
 "theorem is_swap.of_subtype_is_swap {p : α → Prop} [DecidablePred p] {f : Perm (Subtype p)} (h : f.is_swap) :\n    (ofSubtype f).is_swap :=\n  let ⟨⟨x, hx⟩, ⟨y, hy⟩, hxy⟩ := h\n  ⟨x, y, by\n    simp only [ne.def] at hxy\n    exact hxy.1, by\n    simp only [hxy.2, of_subtype_swap_eq]\n    rfl⟩\n#align is_swap.of_subtype_is_swap is_swap.of_subtype_is_swap\n\n",
 "not_mem_support":
 "theorem not_mem_support {x : α} : x ∉ f.support ↔ f x = x := by simp\n#align not_mem_support not_mem_support\n\n",
 "nodup_of_pairwise_disjoint":
 "theorem nodup_of_pairwise_disjoint {l : List (Perm α)} (h1 : (1 : Perm α) ∉ l) (h2 : l.pairwise Disjoint) : l.nodup :=\n  by\n  refine' List.Pairwise.imp_of_mem _ h2\n  rintro σ - h_mem - h_disjoint rfl\n  suffices σ = 1 by\n    rw [this] at h_mem\n    exact h1 h_mem\n  exact ext fun a => (or_self_iff _).mp (h_disjoint a)\n#align nodup_of_pairwise_disjoint nodup_of_pairwise_disjoint\n\n",
 "ne_and_ne_of_swap_mul_apply_ne_self":
 "theorem ne_and_ne_of_swap_mul_apply_ne_self {f : Perm α} {x y : α} (hy : (swap x (f x) * f) y ≠ y) : f y ≠ y ∧ y ≠ x :=\n  by\n  simp only [swap_apply_def, mul_apply, f.injective.eq_iff] at *\n  by_cases h : f y = x\n  · constructor <;> intro <;> simp_all only [if_true, eq_self_iff_true, not_true, ne.def]\n  · split_ifs  at hy <;> cc\n#align ne_and_ne_of_swap_mul_apply_ne_self ne_and_ne_of_swap_mul_apply_ne_self\n\n",
 "mul_right":
 "theorem disjoint.mul_right (H1 : Disjoint f g) (H2 : Disjoint f h) : Disjoint f (g * h) :=\n  by\n  rw [disjoint_comm]\n  exact H1.symm.mul_left H2.symm\n#align disjoint.mul_right disjoint.mul_right\n\n",
 "mul_left":
 "theorem disjoint.mul_left (H1 : Disjoint f h) (H2 : Disjoint g h) : Disjoint (f * g) h := fun x => by\n  cases H1 x <;> cases H2 x <;> simp [*]\n#align disjoint.mul_left disjoint.mul_left\n\n",
 "mul_eq_one_iff":
 "theorem disjoint.mul_eq_one_iff {σ τ : Perm α} (hστ : Disjoint σ τ) : σ * τ = 1 ↔ σ = 1 ∧ τ = 1 := by\n  simp_rw [ext_iff, one_apply, hστ.mul_apply_eq_iff, forall_and]\n#align disjoint.mul_eq_one_iff disjoint.mul_eq_one_iff\n\n",
 "mul_apply_eq_iff":
 "theorem disjoint.mul_apply_eq_iff {σ τ : Perm α} (hστ : Disjoint σ τ) {a : α} : (σ * τ) a = a ↔ σ a = a ∧ τ a = a :=\n  by\n  refine' ⟨fun h => _, fun h => by rw [mul_apply, h.2, h.1]⟩\n  cases' hστ a with hσ hτ\n  · exact ⟨hσ, σ.injective (h.trans hσ.symm)⟩\n  · exact ⟨(congr_arg σ hτ).symm.trans h, hτ⟩\n#align disjoint.mul_apply_eq_iff disjoint.mul_apply_eq_iff\n\n",
 "mono":
 "#print Disjoint.mono /-\ntheorem Disjoint.mono {x y : Perm α} (h : Disjoint f g) (hf : x.support ≤ f.support) (hg : y.support ≤ g.support) :\n    Disjoint x y := by\n  rw [disjoint_iff_disjoint_support] at h⊢\n  exact h.mono hf hg\n#align disjoint.mono Disjoint.mono\n-/\n\n",
 "mem_support_swap_mul_imp_mem_support_ne":
 "theorem mem_support_swap_mul_imp_mem_support_ne {x y : α} (hy : y ∈ support (swap x (f x) * f)) :\n    y ∈ support f ∧ y ≠ x :=\n  by\n  simp only [mem_support, swap_apply_def, mul_apply, f.injective.eq_iff] at *\n  by_cases h : f y = x\n  · constructor <;> intro <;> simp_all only [if_true, eq_self_iff_true, not_true, ne.def]\n  · split_ifs  at hy <;> cc\n#align mem_support_swap_mul_imp_mem_support_ne mem_support_swap_mul_imp_mem_support_ne\n\n",
 "mem_support":
 "@[simp]\ntheorem mem_support {x : α} : x ∈ f.support ↔ f x ≠ x := by rw [support, mem_filter, and_iff_right (mem_univ x)]\n#align mem_support mem_support\n\n",
 "mem_imp":
 "theorem disjoint.mem_imp (h : Disjoint f g) {x : α} (hx : x ∈ f.support) : x ∉ g.support :=\n  disjoint_left.mp h.disjoint_support hx\n#align disjoint.mem_imp disjoint.mem_imp\n\n",
 "inv_right":
 "theorem disjoint.inv_right (h : Disjoint f g) : Disjoint f g⁻¹ :=\n  h.symm.inv_left.symm\n#align disjoint.inv_right disjoint.inv_right\n\n",
 "inv_left":
 "theorem disjoint.inv_left (h : Disjoint f g) : Disjoint f⁻¹ g :=\n  by\n  intro x\n  rw [inv_eq_iff_eq, eq_comm]\n  exact h x\n#align disjoint.inv_left disjoint.inv_left\n\n",
 "exists_mem_support_of_mem_support_prod":
 "theorem exists_mem_support_of_mem_support_prod {l : List (Perm α)} {x : α} (hx : x ∈ l.prod.support) :\n    ∃ f : Perm α, f ∈ l ∧ x ∈ f.support := by\n  contrapose! hx\n  simp_rw [mem_support, Classical.not_not] at hx⊢\n  induction' l with f l ih generalizing hx\n  · rfl\n  · rw [List.prod_cons, mul_apply, ih fun g hg => hx g (or.inr hg), hx f (or.inl rfl)]\n#align exists_mem_support_of_mem_support_prod exists_mem_support_of_mem_support_prod\n\n",
 "eq_on_support_mem_disjoint":
 "theorem eq_on_support_mem_disjoint {l : List (Perm α)} (h : f ∈ l) (hl : l.pairwise Disjoint) :\n    ∀ x ∈ f.support, f x = l.prod x := by\n  induction' l with hd tl IH\n  · simpa using h\n  · intro x hx\n    rw [List.pairwise_cons] at hl\n    rw [List.mem_cons] at h\n    rcases h with (rfl | h)\n    · rw [List.prod_cons, mul_apply, not_mem_support.mp ((disjoint_prod_right tl hl.left).mem_imp hx)]\n    · rw [List.prod_cons, mul_apply, ← IH h hl.right _ hx, eq_comm, ← not_mem_support]\n      refine' (hl.left _ h).symm.mem_imp _\n      simpa using hx\n#align eq_on_support_mem_disjoint eq_on_support_mem_disjoint\n\n",
 "disjoint_support":
 "theorem disjoint.disjoint_support (h : Disjoint f g) : Disjoint f.support g.support :=\n  disjoint_iff_disjoint_support.1 h\n#align disjoint.disjoint_support disjoint.disjoint_support\n\n",
 "disjoint_refl_iff":
 "@[simp]\ntheorem disjoint_refl_iff : Disjoint f f ↔ f = 1 :=\n  by\n  refine' ⟨fun h => _, fun h => h.symm ▸ disjoint_one_left 1⟩\n  ext x\n  cases' h x with hx hx <;> simp [hx]\n#align disjoint_refl_iff disjoint_refl_iff\n\n",
 "disjoint_prod_right":
 "theorem disjoint_prod_right (l : List (Perm α)) (h : ∀ g ∈ l, Disjoint f g) : Disjoint f l.prod :=\n  by\n  induction' l with g l ih\n  · exact disjoint_one_right _\n  · rw [List.prod_cons]\n    exact (h _ (list.mem_cons_self _ _)).mul_right (ih fun g hg => h g (list.mem_cons_of_mem _ hg))\n#align disjoint_prod_right disjoint_prod_right\n\n",
 "disjoint_prod_perm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem disjoint_prod_perm {l₁ l₂ : List (Perm α)} (hl : l₁.pairwise Disjoint) (hp : list.perm l₁ l₂) :\n    l₁.prod = l₂.prod :=\n  hp.prod_eq' <| hl.imp fun f g => Disjoint.commute\n#align disjoint_prod_perm disjoint_prod_perm\n\n",
 "disjoint_one_right":
 "@[simp]\ntheorem disjoint_one_right (f : Perm α) : Disjoint f 1 := fun _ => or.inr rfl\n#align disjoint_one_right disjoint_one_right\n\n",
 "disjoint_one_left":
 "@[simp]\ntheorem disjoint_one_left (f : Perm α) : Disjoint 1 f := fun _ => or.inl rfl\n#align disjoint_one_left disjoint_one_left\n\n",
 "disjoint_inv_right_iff":
 "@[simp]\ntheorem disjoint_inv_right_iff : Disjoint f g⁻¹ ↔ Disjoint f g := by\n  rw [disjoint_comm, disjoint_inv_left_iff, disjoint_comm]\n#align disjoint_inv_right_iff disjoint_inv_right_iff\n\n",
 "disjoint_inv_left_iff":
 "@[simp]\ntheorem disjoint_inv_left_iff : Disjoint f⁻¹ g ↔ Disjoint f g :=\n  by\n  refine' ⟨fun h => _, disjoint.inv_left⟩\n  convert h.inv_left\n  exact (inv_inv _).symm\n#align disjoint_inv_left_iff disjoint_inv_left_iff\n\n",
 "disjoint_iff_eq_or_eq":
 "theorem disjoint_iff_eq_or_eq : Disjoint f g ↔ ∀ x : α, f x = x ∨ g x = x :=\n  iff.rfl\n#align disjoint_iff_eq_or_eq disjoint_iff_eq_or_eq\n\n",
 "disjoint_iff_disjoint_support":
 "theorem disjoint_iff_disjoint_support : Disjoint f g ↔ Disjoint f.support g.support := by\n  simp [disjoint_iff_eq_or_eq, disjoint_iff, Finset.ext_iff, not_and_or]\n#align disjoint_iff_disjoint_support disjoint_iff_disjoint_support\n\n",
 "disjoint_comm":
 "/- warning: disjoint_comm clashes with disjoint.comm -> disjoint_comm\nCase conversion may be inaccurate. Consider using '#align disjoint_comm disjoint_commₓ'. -/\n#print disjoint_comm /-\ntheorem disjoint_comm : Disjoint f g ↔ Disjoint g f :=\n  ⟨Disjoint.symm, Disjoint.symm⟩\n#align disjoint_comm disjoint_comm\n-/\n\n",
 "commute":
 "theorem disjoint.commute (h : Disjoint f g) : Commute f g :=\n  Equiv.ext fun x =>\n    (h x).elim\n      (fun hf =>\n        (h (g x)).elim (fun hg => by simp [mul_apply, hf, hg]) fun hg => by simp [mul_apply, hf, g.injective hg])\n      fun hg => (h (f x)).elim (fun hf => by simp [mul_apply, f.injective hf, hg]) fun hf => by simp [mul_apply, hf, hg]\n#align disjoint.commute disjoint.commute\n\n",
 "coe_support_eq_set_support":
 "theorem coe_support_eq_set_support (f : Perm α) : (f.support : Set α) = { x | f x ≠ x } :=\n  by\n  ext\n  simp\n#align coe_support_eq_set_support coe_support_eq_set_support\n\n",
 "card_support_swap_mul":
 "theorem card_support_swap_mul {f : Perm α} {x : α} (hx : f x ≠ x) : (swap x (f x) * f).support.card < f.support.card :=\n  Finset.card_lt_card\n    ⟨fun z hz => (mem_support_swap_mul_imp_mem_support_ne hz).left, fun h =>\n      absurd (h (mem_support.2 hx)) (mt mem_support.1 (by simp))⟩\n#align card_support_swap_mul card_support_swap_mul\n\n",
 "card_support_swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\ntheorem card_support_swap {x y : α} (hxy : x ≠ y) : (swap x y).support.card = 2 :=\n  show (swap x y).support.card = Finset.card ⟨«expr ::ₘ » x («expr ::ₘ » y 0), by simp [hxy]⟩ from\n    congr_arg card <| by simp [support_swap hxy, *, Finset.ext_iff]\n#align card_support_swap card_support_swap\n\n",
 "card_support_prod_list_of_pairwise_disjoint":
 "theorem card_support_prod_list_of_pairwise_disjoint {l : List (Perm α)} (h : l.pairwise Disjoint) :\n    l.prod.support.card = (l.map (Finset.card ∘ support)).sum :=\n  by\n  induction' l with a t ih\n  · exact card_support_eq_zero.mpr rfl\n  · obtain ⟨ha, ht⟩ := List.pairwise_cons.1 h\n    rw [List.prod_cons, list.map_cons, List.sum_cons, ← ih ht]\n    exact (disjoint_prod_right _ ha).card_support_mul\n#align card_support_prod_list_of_pairwise_disjoint card_support_prod_list_of_pairwise_disjoint\n\n",
 "card_support_ne_one":
 "theorem card_support_ne_one (f : Perm α) : f.support.card ≠ 1 :=\n  by\n  by_cases h : f = 1\n  · exact ne_of_eq_of_ne (card_support_eq_zero.mpr h) zero_ne_one\n  · exact ne_of_gt (one_lt_card_support_of_ne_one h)\n#align card_support_ne_one card_support_ne_one\n\n",
 "card_support_mul":
 "theorem disjoint.card_support_mul (h : Disjoint f g) : (f * g).support.card = f.support.card + g.support.card :=\n  by\n  rw [← Finset.card_disjoint_union]\n  · congr\n    ext\n    simp [h.support_mul]\n  · simpa using h.disjoint_support\n#align disjoint.card_support_mul disjoint.card_support_mul\n\n",
 "card_support_le_one":
 "@[simp]\ntheorem card_support_le_one {f : Perm α} : f.support.card ≤ 1 ↔ f = 1 := by\n  rw [le_iff_lt_or_eq, Nat.lt_succ_iff, le_zero_iff, card_support_eq_zero, or_iff_not_imp_right,\n    imp_iff_right f.card_support_ne_one]\n#align card_support_le_one card_support_le_one\n\n",
 "card_support_extend_domain":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem card_support_extend_domain (f : «expr ≃ » α (Subtype p)) {g : Perm α} :\n    (g.extend_domain f).support.card = g.support.card := by simp\n#align card_support_extend_domain card_support_extend_domain\n\n",
 "card_support_eq_zero":
 "@[simp]\ntheorem card_support_eq_zero {f : Perm α} : f.support.card = 0 ↔ f = 1 := by\n  rw [Finset.card_eq_zero, support_eq_empty_iff]\n#align card_support_eq_zero card_support_eq_zero\n\n",
 "card_support_eq_two":
 "@[simp]\ntheorem card_support_eq_two {f : Perm α} : f.support.card = 2 ↔ IsSwap f :=\n  by\n  constructor <;> intro h\n  · obtain ⟨x, t, hmem, hins, ht⟩ := card_eq_succ.1 h\n    obtain ⟨y, rfl⟩ := card_eq_one.1 ht\n    rw [mem_singleton] at hmem\n    refine' ⟨x, y, hmem, _⟩\n    ext a\n    have key : ∀ b, f b ≠ b ↔ _ := fun b => by rw [← mem_support, ← hins, mem_insert, mem_singleton]\n    by_cases ha : f a = a\n    · have ha' := not_or_distrib.mp (mt (key a).mpr (not_not.mpr ha))\n      rw [ha, swap_apply_of_ne_of_ne ha'.1 ha'.2]\n    · have ha' := (key (f a)).mp (mt f.apply_eq_iff_eq.mp ha)\n      obtain rfl | rfl := (key a).mp ha\n      · rw [or.resolve_left ha' ha, swap_apply_left]\n      · rw [or.resolve_right ha' ha, swap_apply_right]\n  · obtain ⟨x, y, hxy, rfl⟩ := h\n    exact card_support_swap hxy\n#align card_support_eq_two card_support_eq_two\n\n",
 "apply_mem_support":
 "@[simp]\ntheorem apply_mem_support {x : α} : f x ∈ f.support ↔ x ∈ f.support := by\n  rw [mem_support, mem_support, ne.def, ne.def, not_iff_not, apply_eq_iff_eq]\n#align apply_mem_support apply_mem_support\n\n"}