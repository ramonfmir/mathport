{"unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[to_additive]\ntheorem prod.unique (g : «expr →* » (FreeGroup α) α) (hg : ∀ x, g (of x) = x) {x} : g x = prod x :=\n  lift.unique g hg\n#align prod.unique prod.unique\n\n",
 "trans":
 "@[trans, to_additive]\ntheorem red.trans : Red L₁ L₂ → Red L₂ L₃ → Red L₁ L₃ :=\n  ReflTransGen.trans\n#align red.trans red.trans\n\n",
 "to_word_one":
 "@[simp, to_additive]\ntheorem to_word_one : (1 : FreeGroup α).to_word = [] :=\n  rfl\n#align to_word_one to_word_one\n\n",
 "to_word_mk":
 "@[simp, to_additive]\ntheorem to_word_mk : (mk L₁).to_word = reduce L₁ :=\n  rfl\n#align to_word_mk to_word_mk\n\n",
 "to_word_inv":
 "@[to_additive]\ntheorem to_word_inv {x : FreeGroup α} : x⁻¹.to_word = invRev x.to_word :=\n  by\n  rcases x with ⟨L⟩\n  rw [quot_mk_eq_mk, inv_mk, to_word_mk, to_word_mk, reduce_inv_rev]\n#align to_word_inv to_word_inv\n\n",
 "to_word_injective":
 "@[to_additive]\ntheorem to_word_injective : function.injective (toWord : FreeGroup α → List (α × Bool)) := by\n  rintro ⟨L₁⟩ ⟨L₂⟩ <;> exact reduce.exact\n#align to_word_injective to_word_injective\n\n",
 "to_word_inj":
 "@[simp, to_additive]\ntheorem to_word_inj {x y : FreeGroup α} : toWord x = toWord y ↔ x = y :=\n  toWord_injective.eq_iff\n#align to_word_inj to_word_inj\n\n",
 "to_word_eq_nil_iff":
 "@[simp, to_additive]\ntheorem to_word_eq_nil_iff {x : FreeGroup α} : x.to_word = [] ↔ x = 1 :=\n  toWord_injective.eq_iff' toWord_one\n#align to_word_eq_nil_iff to_word_eq_nil_iff\n\n",
 "to_red":
 "@[to_additive]\ntheorem step.to_red : Step L₁ L₂ → Red L₁ L₂ :=\n  ReflTransGen.single\n#align step.to_red step.to_red\n\n",
 "to_append_iff":
 "@[to_additive]\ntheorem to_append_iff : Red L (L₁ ++ L₂) ↔ ∃ L₃ L₄, L = L₃ ++ L₄ ∧ Red L₃ L₁ ∧ Red L₄ L₂ :=\n  iff.intro\n    (by\n      generalize eq : L₁ ++ L₂ = L₁₂\n      intro h\n      induction' h with L' L₁₂ hLL' h ih generalizing L₁ L₂\n      · exact ⟨_, _, Eq.symm, by rfl, by rfl⟩\n      · cases' h with s e a b\n        rcases List.append_eq_append_iff.1 Eq with (⟨s', rfl, rfl⟩ | ⟨e', rfl, rfl⟩)\n        · have : L₁ ++ (s' ++ (a, b) :: (a, not b) :: e) = L₁ ++ s' ++ (a, b) :: (a, not b) :: e := by simp\n          rcases ih this with ⟨w₁, w₂, rfl, h₁, h₂⟩\n          exact ⟨w₁, w₂, rfl, h₁, h₂.tail step.bnot⟩\n        · have : s ++ (a, b) :: (a, not b) :: e' ++ L₂ = s ++ (a, b) :: (a, not b) :: (e' ++ L₂) := by simp\n          rcases ih this with ⟨w₁, w₂, rfl, h₁, h₂⟩\n          exact ⟨w₁, w₂, rfl, h₁.tail step.bnot, h₂⟩)\n    fun ⟨L₃, L₄, Eq, h₃, h₄⟩ => Eq.symm ▸ append_append h₃ h₄\n#align to_append_iff to_append_iff\n\n",
 "sum_mk":
 "@[simp]\ntheorem sum_mk : sum (mk L) = List.sum (L.map fun x => cond x.2 x.1 (-x.1)) :=\n  rfl\n#align sum_mk sum_mk\n\n",
 "sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\n/-- If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of `w₁`. -/\n@[to_additive \"If `w₁ w₂` are words such that `w₁` reduces to `w₂`,\\nthen `w₂` is a sublist of `w₁`.\"]\nprotected theorem sublist : Red L₁ L₂ → «expr <+ » L₂ L₁ :=\n  reflTransGen_of_transitive_reflexive (fun l => List.Sublist.refl l) (fun a b c hab hbc => List.Sublist.trans hbc hab)\n    fun a b => Red.Step.sublist\n#align sublist sublist\n\n",
 "step_inv_rev_iff":
 "@[simp, to_additive]\ntheorem red.step_inv_rev_iff : Red.Step (invRev L₁) (invRev L₂) ↔ Red.Step L₁ L₂ :=\n  ⟨fun h => by simpa only [inv_rev_inv_rev] using h.inv_rev, fun h => h.inv_rev⟩\n#align red.step_inv_rev_iff red.step_inv_rev_iff\n\n",
 "sound":
 "-- TODO @[to_additive] doesn't succeed, possibly due to a bug\ntheorem red.enum.sound (H : L₂ ∈ Red.enum L₁) : Red L₁ L₂ :=\n  List.of_mem_filter H\n#align red.enum.sound red.enum.sound\n\n",
 "sizeof_of_step":
 "@[to_additive]\ntheorem sizeof_of_step : ∀ {L₁ L₂ : List (α × Bool)}, Step L₁ L₂ → L₂.sizeof < L₁.sizeof\n  | _, _, @step.bnot _ L1 L2 x b => by\n    induction' L1 with hd tl ih\n    case nil =>\n      dsimp [list.sizeof]\n      have H :\n        1 + SizeOf.sizeOf (x, b) + (1 + SizeOf.sizeOf (x, not b) + list.sizeof L2) =\n          list.sizeof L2 + 1 + (SizeOf.sizeOf (x, b) + SizeOf.sizeOf (x, not b) + 1) :=\n        by ac_rfl\n      rw [H]\n      exact nat.le_add_right _ _\n    case cons =>\n      dsimp [list.sizeof]\n      exact nat.add_lt_add_left ih _\n#align sizeof_of_step sizeof_of_step\n\n",
 "singleton_iff":
 "/-- A letter only reduces to itself. -/\n@[to_additive \"A letter only reduces to itself.\"]\ntheorem singleton_iff {x} : Red [x] L₁ ↔ L₁ = [x] :=\n  reflTransGen_iff_eq fun l => not_step_singleton\n#align singleton_iff singleton_iff\n\n",
 "self":
 "/-- A word and its maximal reduction correspond to\nthe same element of the free group. -/\n@[to_additive \"A word and its maximal reduction correspond to\\nthe same element of the additive free group.\"]\ntheorem reduce.self : mk (reduce L) = mk L :=\n  reduce.exact reduce.idem\n#align reduce.self reduce.self\n\n",
 "rev":
 "/-- If words `w₁ w₂` are such that `w₁` reduces to `w₂`,\nthen `w₂` reduces to the maximal reduction of `w₁`. -/\n@[to_additive\n      \"If words `w₁ w₂` are such that `w₁` reduces to `w₂`,\\nthen `w₂` reduces to the maximal reduction of `w₁`.\"]\ntheorem reduce.rev (H : Red L₁ L₂) : Red L₂ (reduce L₁) :=\n  (reduce.eq_of_red H).symm ▸ reduce.red\n#align reduce.rev reduce.rev\n\n",
 "refl":
 "/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\n@[refl, to_additive]\ntheorem red.refl : Red L L :=\n  refl_trans_gen.refl\n#align red.refl red.refl\n\n",
 "reduce_to_word":
 "@[simp, to_additive]\ntheorem reduce_to_word : ∀ x : FreeGroup α, reduce (toWord x) = toWord x :=\n  by\n  rintro ⟨L⟩\n  exact reduce.idem\n#align reduce_to_word reduce_to_word\n\n",
 "reduce_right":
 "@[to_additive]\ntheorem red.reduce_right (h : Red L₁ L₂) : Red L₁ (reduce L₂) :=\n  reduce.eq_of_red h ▸ reduce.red\n#align red.reduce_right red.reduce_right\n\n",
 "reduce_left":
 "@[to_additive]\ntheorem red.reduce_left (h : Red L₁ L₂) : Red L₂ (reduce L₁) :=\n  (reduce.eq_of_red h).symm ▸ reduce.red\n#align red.reduce_left red.reduce_left\n\n",
 "reduce_inv_rev":
 "@[to_additive]\ntheorem reduce_inv_rev {w : List (α × Bool)} : reduce (invRev w) = invRev (reduce w) :=\n  by\n  apply reduce.min\n  rw [← red_inv_rev_iff, inv_rev_inv_rev]\n  apply red.reduce_left\n  have : red (inv_rev (inv_rev w)) (inv_rev (reduce (inv_rev w))) := reduce.red.inv_rev\n  rwa [inv_rev_inv_rev] at this\n#align reduce_inv_rev reduce_inv_rev\n\n",
 "red_inv_rev_iff":
 "@[simp, to_additive]\ntheorem red_inv_rev_iff : Red (invRev L₁) (invRev L₂) ↔ Red L₁ L₂ :=\n  ⟨fun h => by simpa only [inv_rev_inv_rev] using h.inv_rev, fun h => h.inv_rev⟩\n#align red_inv_rev_iff red_inv_rev_iff\n\n",
 "red_iff_irreducible":
 "@[to_additive]\ntheorem red_iff_irreducible {x1 b1 x2 b2} (h : (x1, b1) ≠ (x2, b2)) :\n    Red [(x1, not b1), (x2, b2)] L ↔ L = [(x1, not b1), (x2, b2)] :=\n  by\n  apply refl_trans_gen_iff_eq\n  generalize eq : [(x1, not b1), (x2, b2)] = L'\n  intro L h'\n  cases h'\n  simp [List.cons_eq_append_iff, List.nil_eq_append] at eq\n  rcases Eq with ⟨rfl, ⟨rfl, rfl⟩, ⟨rfl, rfl⟩, rfl⟩; subst_vars\n  simp at h\n  contradiction\n#align red_iff_irreducible red_iff_irreducible\n\n",
 "red":
 "/-- The first theorem that characterises the function\n`reduce`: a word reduces to its maximal reduction. -/\n@[to_additive \"The first theorem that characterises the function\\n`reduce`: a word reduces to its maximal reduction.\"]\ntheorem reduce.red : Red L (reduce L) := by\n  induction' L with hd1 tl1 ih\n  case nil => constructor\n  case cons =>\n    dsimp\n    revert ih\n    generalize htl : reduce tl1 = TL\n    intro ih\n    cases' TL with hd2 tl2\n    case nil => exact red.cons_cons ih\n    case cons =>\n      dsimp only\n      split_ifs with h\n      · trans\n        · exact red.cons_cons ih\n        · cases hd1\n          cases hd2\n          cases h\n          dsimp at *\n          subst_vars\n          exact red.step.cons_bnot_rev.to_red\n      · exact red.cons_cons ih\n#align reduce.red reduce.red\n\n",
 "range_le":
 "@[to_additive]\ntheorem lift.range_le {s : Subgroup β} (H : Set.range f ⊆ s) : (lift f).range ≤ s := by\n  rintro _ ⟨⟨L⟩, rfl⟩ <;>\n    exact\n      list.rec_on L s.one_mem fun ⟨x, b⟩ tl ih =>\n        bool.rec_on b (by simp at ih⊢ <;> exact s.mul_mem (s.inv_mem <| H ⟨x, rfl⟩) ih)\n          (by simp at ih⊢ <;> exact s.mul_mem (H ⟨x, rfl⟩) ih)\n#align lift.range_le lift.range_le\n\n",
 "range_eq_closure":
 "@[to_additive]\ntheorem lift.range_eq_closure : (lift f).range = Subgroup.closure (Set.range f) :=\n  by\n  apply le_antisymm (lift.range_le Subgroup.subset_closure)\n  rw [Subgroup.closure_le]\n  rintro _ ⟨a, rfl⟩\n  exact ⟨of a, by simp only [lift.of]⟩\n#align lift.range_eq_closure lift.range_eq_closure\n\n",
 "quot_mk_eq_mk":
 "@[simp, to_additive]\ntheorem quot_mk_eq_mk : Quot.mk Red.Step L = mk L :=\n  rfl\n#align quot_mk_eq_mk quot_mk_eq_mk\n\n",
 "quot_map_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⇒ » -/\n@[simp, to_additive]\ntheorem quot_map_mk (β : Type v) (f : List (α × Bool) → List (β × Bool)) (H : («expr ⇒ » Red.Step Red.Step) f f) :\n    Quot.map f H (mk L) = mk (f L) :=\n  rfl\n#align quot_map_mk quot_map_mk\n\n",
 "quot_lift_on_mk":
 "@[simp, to_additive]\ntheorem quot_lift_on_mk (β : Type v) (f : List (α × Bool) → β) (H : ∀ L₁ L₂, Red.Step L₁ L₂ → f L₁ = f L₂) :\n    quot.lift_on (mk L) f H = f L :=\n  rfl\n#align quot_lift_on_mk quot_lift_on_mk\n\n",
 "quot_lift_mk":
 "@[simp, to_additive]\ntheorem quot_lift_mk (β : Type v) (f : List (α × Bool) → β) (H : ∀ L₁ L₂, Red.Step L₁ L₂ → f L₁ = f L₂) :\n    Quot.lift f H (mk L) = f L :=\n  rfl\n#align quot_lift_mk quot_lift_mk\n\n",
 "pure_bind":
 "@[simp, to_additive]\ntheorem pure_bind (f : α → FreeGroup β) (x) : pure x >>= f = f x :=\n  lift.of\n#align pure_bind pure_bind\n\n",
 "prod_mk":
 "@[simp, to_additive]\ntheorem prod_mk : prod (mk L) = List.prod (L.map fun x => cond x.2 x.1 x.1⁻¹) :=\n  rfl\n#align prod_mk prod_mk\n\n",
 "one_eq_mk":
 "@[to_additive]\ntheorem one_eq_mk : (1 : FreeGroup α) = mk [] :=\n  rfl\n#align one_eq_mk one_eq_mk\n\n",
 "one_bind":
 "@[simp, to_additive]\ntheorem one_bind (f : α → FreeGroup β) : 1 >>= f = 1 :=\n  (lift f).map_one\n#align one_bind one_bind\n\n",
 "of_injective":
 "/-- The canonical map from the type to the free group is an injection. -/\n@[to_additive \"The canonical map from the type to the additive free group is an injection.\"]\ntheorem of_injective : function.injective (@of α) := fun _ _ H =>\n  by\n  let ⟨L₁, hx, hy⟩ := Red.exact.1 H\n  simp [red.singleton_iff] at hx hy <;> cc\n#align of_injective of_injective\n\n",
 "of_eq":
 "@[to_additive]\ntheorem lift.of_eq (x : FreeGroup α) : lift of x = x :=\n  MonoidHom.congr_fun (lift.apply_symm_apply (MonoidHom.id _)) x\n#align lift.of_eq lift.of_eq\n\n",
 "of":
 "@[simp]\ntheorem sum.of {x : α} : sum (of x) = x :=\n  prod.of\n#align sum.of sum.of\n\n",
 "not_step_singleton":
 "@[to_additive]\ntheorem not_step_singleton : ∀ {p : α × Bool}, ¬Step [p] L\n  | (a, b) => by simp [step.cons_left_iff, not_step_nil]\n#align not_step_singleton not_step_singleton\n\n",
 "not_step_nil":
 "@[to_additive]\ntheorem not_step_nil : ¬Step [] L := by\n  generalize h' : [] = L'\n  intro h\n  cases' h with L₁ L₂\n  simp [List.nil_eq_append] at h'\n  contradiction\n#align not_step_nil not_step_nil\n\n",
 "not":
 "@[to_additive]\ntheorem reduce.not {p : Prop} : ∀ {L₁ L₂ L₃ : List (α × Bool)} {x b}, reduce L₁ = L₂ ++ (x, b) :: (x, not b) :: L₃ → p\n  | [], L2, L3, _, _ => fun h => by cases L2 <;> injections\n  | (x, b) :: L1, L2, L3, x', b' => by\n    dsimp\n    cases r : reduce L1\n    · dsimp\n      intro h\n      have := congr_arg list.length h\n      simp [-add_comm] at this\n      exact absurd this (by decide)\n    cases' hd with y c\n    dsimp only\n    split_ifs with h <;> intro H\n    · rw [H] at r\n      exact @reduce.not L1 ((y, c) :: L2) L3 x' b' r\n    rcases L2 with (_ | ⟨a, L2⟩)\n    · injections\n      subst_vars\n      simp at h\n      cc\n    · refine' @reduce.not L1 L2 L3 x' b' _\n      injection H with _ H\n      rw [r, H]\n      rfl\n#align reduce.not reduce.not\n\n",
 "norm_one":
 "@[simp, to_additive]\ntheorem norm_one : norm (1 : FreeGroup α) = 0 :=\n  rfl\n#align norm_one norm_one\n\n",
 "norm_mul_le":
 "#print norm_mul_le /-\n@[to_additive]\ntheorem norm_mul_le (x y : FreeGroup α) : norm (x * y) ≤ norm x + norm y :=\n  calc\n    norm (x * y) = norm (mk (x.to_word ++ y.to_word)) := by rw [← mul_mk, mk_to_word, mk_to_word]\n    _ ≤ (x.to_word ++ y.to_word).length := norm_mk_le\n    _ = norm x + norm y := list.length_append _ _\n    \n#align norm_mul_le norm_mul_le\n-/\n\n",
 "norm_mk_le":
 "@[to_additive]\ntheorem norm_mk_le : norm (mk L₁) ≤ L₁.length :=\n  reduce.red.length_le\n#align norm_mk_le norm_mk_le\n\n",
 "norm_inv_eq":
 "@[simp, to_additive]\ntheorem norm_inv_eq {x : FreeGroup α} : norm x⁻¹ = norm x := by simp only [norm, to_word_inv, inv_rev_length]\n#align norm_inv_eq norm_inv_eq\n\n",
 "norm_eq_zero":
 "#print norm_eq_zero /-\n@[simp, to_additive]\ntheorem norm_eq_zero {x : FreeGroup α} : norm x = 0 ↔ x = 1 := by\n  simp only [norm, List.length_eq_zero, to_word_eq_nil_iff]\n#align norm_eq_zero norm_eq_zero\n-/\n\n",
 "nil_iff":
 "/-- The empty word `[]` only reduces to itself. -/\n@[to_additive \"The empty word `[]` only reduces to itself.\"]\ntheorem nil_iff : Red [] L ↔ L = [] :=\n  reflTransGen_iff_eq fun l => Red.not_step_nil\n#align nil_iff nil_iff\n\n",
 "mul_mk":
 "@[simp, to_additive]\ntheorem mul_mk : mk L₁ * mk L₂ = mk (L₁ ++ L₂) :=\n  rfl\n#align mul_mk mul_mk\n\n",
 "mul_bind":
 "@[simp, to_additive]\ntheorem mul_bind (f : α → FreeGroup β) (x y : FreeGroup α) : x * y >>= f = (x >>= f) * (y >>= f) :=\n  (lift f).map_mul _ _\n#align mul_bind mul_bind\n\n",
 "mk_to_word":
 "@[to_additive]\ntheorem mk_to_word : ∀ {x : FreeGroup α}, mk (toWord x) = x := by rintro ⟨L⟩ <;> exact reduce.self\n#align mk_to_word mk_to_word\n\n",
 "mk":
 "@[simp, to_additive]\ntheorem map.mk : map f (mk L) = mk (L.map fun x => (f x.1, x.2)) :=\n  rfl\n#align map.mk map.mk\n\n",
 "min":
 "/-- The second theorem that characterises the\nfunction `reduce`: the maximal reduction of a word\nonly reduces to itself. -/\n@[to_additive\n      \"The second theorem that characterises the\\nfunction `reduce`: the maximal reduction of a word\\nonly reduces to itself.\"]\ntheorem reduce.min (H : Red (reduce L₁) L₂) : reduce L₁ = L₂ :=\n  by\n  induction' H with L1 L' L2 H1 H2 ih\n  · rfl\n  · cases' H1 with L4 L5 x b\n    exact reduce.not H2\n#align reduce.min reduce.min\n\n",
 "map_pure":
 "@[simp, to_additive]\ntheorem map_pure (f : α → β) (x : α) : f <$> (pure x : FreeGroup α) = pure (f x) :=\n  map.of\n#align map_pure map_pure\n\n",
 "map_one":
 "#print map_one /-\n@[simp, to_additive]\ntheorem map_one (f : α → β) : f <$> (1 : FreeGroup α) = 1 :=\n  (map f).map_one\n#align map_one map_one\n#align map_zero map_zero\n-/\n\n",
 "map_mul":
 "#print map_mul /-\n@[simp, to_additive]\ntheorem map_mul (f : α → β) (x y : FreeGroup α) : f <$> (x * y) = f <$> x * f <$> y :=\n  (map f).map_mul x y\n#align map_mul map_mul\n#align map_add map_add\n-/\n\n",
 "map_inv":
 "#print map_inv /-\n@[simp, to_additive]\ntheorem map_inv (f : α → β) (x : FreeGroup α) : f <$> x⁻¹ = (f <$> x)⁻¹ :=\n  (map f).map_inv x\n#align map_inv map_inv\n#align map_neg map_neg\n-/\n\n",
 "map_eq_lift":
 "@[to_additive]\ntheorem map_eq_lift : map f x = lift (of ∘ f) x :=\n  Eq.symm <| map.unique _ fun x => by simp\n#align map_eq_lift map_eq_lift\n\n",
 "lift_eq_prod_map":
 "@[to_additive]\ntheorem lift_eq_prod_map {β : Type v} [Group β] {f : α → β} {x} : lift f x = prod (map f x) :=\n  by\n  rw [← lift.unique (prod.comp (map f))]\n  · rfl\n  · simp\n#align lift_eq_prod_map lift_eq_prod_map\n\n",
 "lift":
 "@[to_additive]\ntheorem red.step.lift {f : α → β} (H : Red.Step L₁ L₂) : Lift.aux f L₁ = Lift.aux f L₂ := by\n  cases' H with _ _ _ b <;> cases b <;> simp [lift.aux]\n#align red.step.lift red.step.lift\n\n",
 "length_le":
 "@[to_additive]\ntheorem length_le (h : Red L₁ L₂) : L₂.length ≤ L₁.length :=\n  h.sublist.length_le\n#align length_le length_le\n\n",
 "length":
 "@[to_additive]\ntheorem length (h : Red L₁ L₂) : ∃ n, L₁.length = L₂.length + 2 * n :=\n  by\n  induction' h with L₂ L₃ h₁₂ h₂₃ ih\n  · exact ⟨0, rfl⟩\n  · rcases ih with ⟨n, eq⟩\n    exists 1 + n\n    simp [mul_add, Eq, (step.length h₂₃).symm, add_assoc]\n#align length length\n\n",
 "join_red_of_step":
 "@[to_additive]\ntheorem join_red_of_step (h : Red.Step L₁ L₂) : Join Red L₁ L₂ :=\n  join_of_single reflexive_reflTransGen h.to_red\n#align join_red_of_step join_red_of_step\n\n",
 "inv_rev_surjective":
 "@[to_additive]\ntheorem inv_rev_surjective : function.surjective (@invRev α) :=\n  invRev_involutive.surjective\n#align inv_rev_surjective inv_rev_surjective\n\n",
 "inv_rev_length":
 "@[simp, to_additive]\ntheorem inv_rev_length : (invRev L₁).length = L₁.length := by simp [inv_rev]\n#align inv_rev_length inv_rev_length\n\n",
 "inv_rev_involutive":
 "@[to_additive]\ntheorem inv_rev_involutive : Function.Involutive (@invRev α) := fun _ => invRev_invRev\n#align inv_rev_involutive inv_rev_involutive\n\n",
 "inv_rev_inv_rev":
 "@[simp, to_additive]\ntheorem inv_rev_inv_rev : invRev (invRev L₁) = L₁ := by simp [inv_rev, (· ∘ ·)]\n#align inv_rev_inv_rev inv_rev_inv_rev\n\n",
 "inv_rev_injective":
 "@[to_additive]\ntheorem inv_rev_injective : function.injective (@invRev α) :=\n  invRev_involutive.injective\n#align inv_rev_injective inv_rev_injective\n\n",
 "inv_rev_empty":
 "@[simp, to_additive]\ntheorem inv_rev_empty : invRev ([] : List (α × Bool)) = [] :=\n  rfl\n#align inv_rev_empty inv_rev_empty\n\n",
 "inv_rev_bijective":
 "@[to_additive]\ntheorem inv_rev_bijective : function.bijective (@invRev α) :=\n  invRev_involutive.bijective\n#align inv_rev_bijective inv_rev_bijective\n\n",
 "inv_rev":
 "@[to_additive]\ntheorem red.inv_rev {L₁ L₂ : List (α × Bool)} (h : Red L₁ L₂) : Red (invRev L₁) (invRev L₂) :=\n  Relation.ReflTransGen.lift _ (fun a b => Red.Step.invRev) h\n#align red.inv_rev red.inv_rev\n\n",
 "inv_of_red_of_ne":
 "/-- If `x` and `y` are distinct letters and `w₁ w₂` are words such that `xw₁` reduces to `yw₂`, then\n`w₁` reduces to `x⁻¹yw₂`. -/\n@[to_additive\n      \"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `x + w₁` reduces to `y + w₂`,\\nthen `w₁` reduces to `-x + y + w₂`.\"]\ntheorem inv_of_red_of_ne {x1 b1 x2 b2} (H1 : (x1, b1) ≠ (x2, b2)) (H2 : Red ((x1, b1) :: L₁) ((x2, b2) :: L₂)) :\n    Red L₁ ((x1, not b1) :: (x2, b2) :: L₂) :=\n  by\n  have : red ((x1, b1) :: L₁) ([(x2, b2)] ++ L₂) := H2\n  rcases to_append_iff.1 this with ⟨_ | ⟨p, L₃⟩, L₄, eq, h₁, h₂⟩\n  · simp [nil_iff] at h₁\n    contradiction\n  · cases Eq\n    show red (L₃ ++ L₄) ([(x1, not b1), (x2, b2)] ++ L₂)\n    apply append_append _ h₂\n    have h₁ : red ((x1, not b1) :: (x1, b1) :: L₃) [(x1, not b1), (x2, b2)] := cons_cons h₁\n    have h₂ : red ((x1, not b1) :: (x1, b1) :: L₃) L₃ := step.cons_bnot_rev.to_red\n    rcases church_rosser h₁ h₂ with ⟨L', h₁, h₂⟩\n    rw [red_iff_irreducible H1] at h₁\n    rwa [h₁] at h₂\n#align inv_of_red_of_ne inv_of_red_of_ne\n\n",
 "inv_mk":
 "@[simp, to_additive]\ntheorem inv_mk : (mk L)⁻¹ = mk (invRev L) :=\n  rfl\n#align inv_mk inv_mk\n\n",
 "inv_bind":
 "@[simp, to_additive]\ntheorem inv_bind (f : α → FreeGroup β) (x : FreeGroup α) : x⁻¹ >>= f = (x >>= f)⁻¹ :=\n  (lift f).map_inv _\n#align inv_bind inv_bind\n\n",
 "induction_on":
 "@[elab_as_elim, to_additive]\nprotected theorem induction_on {C : FreeGroup α → Prop} (z : FreeGroup α) (C1 : C 1) (Cp : ∀ x, C <| pure x)\n    (Ci : ∀ x, C (pure x) → C (pure x)⁻¹) (Cm : ∀ x y, C x → C y → C (x * y)) : C z :=\n  Quot.inductionOn z fun L =>\n    list.rec_on L C1 fun ⟨x, b⟩ tl ih => bool.rec_on b (Cm _ _ (Ci _ <| Cp x) ih) (Cm _ _ (Cp x) ih)\n#align induction_on induction_on\n\n",
 "idem":
 "/-- `reduce` is idempotent, i.e. the maximal reduction\nof the maximal reduction of a word is the maximal\nreduction of the word. -/\n@[simp,\n  to_additive\n      \"`reduce` is idempotent, i.e. the maximal reduction\\nof the maximal reduction of a word is the maximal\\nreduction of the word.\"]\ntheorem reduce.idem : reduce (reduce L) = reduce L :=\n  Eq.symm <| reduce.min reduce.red\n#align reduce.idem reduce.idem\n\n",
 "id'":
 "@[simp, to_additive]\ntheorem map.id' (x : FreeGroup α) : map (fun z => z) x = x :=\n  map.id x\n#align map.id' map.id'\n\n",
 "id":
 "@[simp, to_additive]\ntheorem map.id (x : FreeGroup α) : map id x = x := by rcases x with ⟨L⟩ <;> simp [List.map_id']\n#align map.id map.id\n\n",
 "free_group_congr_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[to_additive]\ntheorem free_group_congr_trans {α β γ} (e : «expr ≃ » α β) (f : «expr ≃ » β γ) :\n    (freeGroupCongr e).trans (freeGroupCongr f) = freeGroupCongr (e.trans f) :=\n  MulEquiv.ext <| map.comp _ _\n#align free_group_congr_trans free_group_congr_trans\n\n",
 "free_group_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp, to_additive]\ntheorem free_group_congr_symm {α β} (e : «expr ≃ » α β) : (freeGroupCongr e).symm = freeGroupCongr e.symm :=\n  rfl\n#align free_group_congr_symm free_group_congr_symm\n\n",
 "free_group_congr_refl":
 "@[simp, to_additive]\ntheorem free_group_congr_refl : freeGroupCongr (Equiv.refl α) = MulEquiv.refl _ :=\n  MulEquiv.ext map.id\n#align free_group_congr_refl free_group_congr_refl\n\n",
 "ext_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/-- Two homomorphisms out of a free group are equal if they are equal on generators.\n\nSee note [partially-applied ext lemmas]. -/\n@[ext,\n  to_additive\n      \"Two homomorphisms out of a free additive group are equal if they are equal on generators.\\n\\nSee note [partially-applied ext lemmas].\"]\ntheorem ext_hom {G : Type _} [Group G] (f g : «expr →* » (FreeGroup α) G) (h : ∀ a, f (of a) = g (of a)) : f = g :=\n  lift.symm.injective <| funext h\n#align ext_hom ext_hom\n\n",
 "exact":
 "/-- If two words have a common maximal reduction,\nthen they correspond to the same element in the free group. -/\n@[to_additive\n      \"If two words have a common maximal reduction,\\nthen they correspond to the same element in the additive free group.\"]\ntheorem reduce.exact (H : reduce L₁ = reduce L₂) : mk L₁ = mk L₂ :=\n  Red.exact.2 ⟨reduce L₂, H ▸ reduce.red, reduce.red⟩\n#align reduce.exact reduce.exact\n\n",
 "eqv_gen_step_iff_join_red":
 "@[to_additive]\ntheorem eqv_gen_step_iff_join_red : EqvGen Red.Step L₁ L₂ ↔ Join Red L₁ L₂ :=\n  iff.intro\n    (fun h =>\n      have : EqvGen (Join Red) L₁ L₂ := h.mono fun a b => join_red_of_step\n      equivalence_join_red.eqv_gen_iff.1 this)\n    (join_of_equivalence (eqv_gen.is_equivalence _) fun a b =>\n      reflTransGen_of_equivalence (eqv_gen.is_equivalence _) eqv_gen.rel)\n#align eqv_gen_step_iff_join_red eqv_gen_step_iff_join_red\n\n",
 "equivalence_join_red":
 "@[to_additive]\ntheorem equivalence_join_red : equivalence (Join (@Red α)) :=\n  equivalence_join_reflTransGen fun a b c hab hac =>\n    match b, c, Red.Step.diamond hab hac rfl with\n    | b, _, or.inl rfl => ⟨b, by rfl, by rfl⟩\n    | b, c, or.inr ⟨d, hbd, hcd⟩ => ⟨d, refl_gen.single hbd, ReflTransGen.single hcd⟩\n#align equivalence_join_red equivalence_join_red\n\n",
 "eq_of_red":
 "/-- If a word reduces to another word, then they have\na common maximal reduction. -/\n@[to_additive \"If a word reduces to another word, then they have\\na common maximal reduction.\"]\ntheorem reduce.eq_of_red (H : Red L₁ L₂) : reduce L₁ = reduce L₂ :=\n  let ⟨L₃, HR13, HR23⟩ := Red.church_rosser reduce.red (Red.trans H reduce.red)\n  (reduce.min HR13).trans (reduce.min HR23).symm\n#align reduce.eq_of_red reduce.eq_of_red\n\n",
 "eq":
 "@[to_additive]\ntheorem reduce.step.eq (H : Red.Step L₁ L₂) : reduce L₁ = reduce L₂ :=\n  let ⟨L₃, HR13, HR23⟩ := Red.church_rosser reduce.red (reduce.red.head H)\n  (reduce.min HR13).trans (reduce.min HR23).symm\n#align reduce.step.eq reduce.step.eq\n\n",
 "diamond_aux":
 "@[to_additive]\ntheorem step.diamond_aux :\n    ∀ {L₁ L₂ L₃ L₄ : List (α × Bool)} {x1 b1 x2 b2},\n      L₁ ++ (x1, b1) :: (x1, not b1) :: L₂ = L₃ ++ (x2, b2) :: (x2, not b2) :: L₄ →\n        L₁ ++ L₂ = L₃ ++ L₄ ∨ ∃ L₅, Red.Step (L₁ ++ L₂) L₅ ∧ Red.Step (L₃ ++ L₄) L₅\n  | [], _, [], _, _, _, _, _, H => by injections <;> subst_vars <;> simp\n  | [], _, [(x3, b3)], _, _, _, _, _, H => by injections <;> subst_vars <;> simp\n  | [(x3, b3)], _, [], _, _, _, _, _, H => by injections <;> subst_vars <;> simp\n  | [], _, (x3, b3) :: (x4, b4) :: tl, _, _, _, _, _, H => by\n    injections <;> subst_vars <;> simp <;> right <;> exact ⟨_, red.step.bnot, red.step.cons_bnot⟩\n  | (x3, b3) :: (x4, b4) :: tl, _, [], _, _, _, _, _, H => by\n    injections <;> subst_vars <;> simp <;> right <;> exact ⟨_, red.step.cons_bnot, red.step.bnot⟩\n  | (x3, b3) :: tl, _, (x4, b4) :: tl2, _, _, _, _, _, H =>\n    let ⟨H1, H2⟩ := list.cons.inj H\n    match step.diamond_aux H2 with\n    | or.inl H3 => or.inl <| by simp [H1, H3]\n    | or.inr ⟨L₅, H3, H4⟩ => or.inr ⟨_, Step.cons H3, by simpa [H1] using step.cons H4⟩\n#align step.diamond_aux step.diamond_aux\n\n",
 "diamond":
 "@[to_additive]\ntheorem step.diamond :\n    ∀ {L₁ L₂ L₃ L₄ : List (α × Bool)},\n      Red.Step L₁ L₃ → Red.Step L₂ L₄ → L₁ = L₂ → L₃ = L₄ ∨ ∃ L₅, Red.Step L₃ L₅ ∧ Red.Step L₄ L₅\n  | _, _, _, _, red.step.bnot, red.step.bnot, H => Step.diamond_aux H\n#align step.diamond step.diamond\n\n",
 "cons_nil_iff_singleton":
 "/-- If `x` is a letter and `w` is a word such that `xw` reduces to the empty word, then `w` reduces\nto `x⁻¹` -/\n@[to_additive\n      \"If `x` is a letter and `w` is a word such that `x + w` reduces to the empty word,\\nthen `w` reduces to `-x`.\"]\ntheorem cons_nil_iff_singleton {x b} : Red ((x, b) :: L) [] ↔ Red L [(x, not b)] :=\n  iff.intro\n    (fun h => by\n      have h₁ : Red ((x, not b) :: (x, b) :: L) [(x, not b)] := cons_cons h\n      have h₂ : Red ((x, not b) :: (x, b) :: L) L := ReflTransGen.single Step.cons_not_rev\n      let ⟨L', h₁, h₂⟩ := church_rosser h₁ h₂\n      rw [singleton_iff] at h₁ <;> subst L' <;> assumption)\n    fun h => (cons_cons h).tail Step.cons_not\n#align cons_nil_iff_singleton cons_nil_iff_singleton\n\n",
 "cons_left_iff":
 "@[to_additive]\ntheorem step.cons_left_iff {a : α} {b : Bool} :\n    Step ((a, b) :: L₁) L₂ ↔ (∃ L, Step L₁ L ∧ L₂ = (a, b) :: L) ∨ L₁ = (a, not b) :: L₂ :=\n  by\n  constructor\n  · generalize hL : ((a, b) :: L₁ : List _) = L\n    rintro @⟨_ | ⟨p, s'⟩, e, a', b'⟩\n    · simp at hL\n      simp [*]\n    · simp at hL\n      rcases hL with ⟨rfl, rfl⟩\n      refine' or.inl ⟨s' ++ e, step.bnot, _⟩\n      simp\n  · rintro (⟨L, h, rfl⟩ | rfl)\n    · exact step.cons h\n    · exact step.cons_bnot\n#align step.cons_left_iff step.cons_left_iff\n\n",
 "cons_cons_iff":
 "@[to_additive]\ntheorem cons_cons_iff (p) : Red (p :: L₁) (p :: L₂) ↔ Red L₁ L₂ :=\n  iff.intro\n    (by\n      generalize eq₁ : (p :: L₁ : List _) = LL₁\n      generalize eq₂ : (p :: L₂ : List _) = LL₂\n      intro h\n      induction' h using Relation.ReflTransGen.head_induction_on with L₁ L₂ h₁₂ h ih generalizing L₁ L₂\n      · subst_vars\n        cases eq₂\n        constructor\n      · subst_vars\n        cases' p with a b\n        rw [step.cons_left_iff] at h₁₂\n        rcases h₁₂ with (⟨L, h₁₂, rfl⟩ | rfl)\n        · exact (ih rfl rfl).head h₁₂\n        · exact (cons_cons h).tail step.cons_bnot_rev)\n    cons_cons\n#align cons_cons_iff cons_cons_iff\n\n",
 "cons_cons":
 "@[to_additive]\ntheorem cons_cons {p} : Red L₁ L₂ → Red (p :: L₁) (p :: L₂) :=\n  ReflTransGen.lift (List.cons p) fun a b => Step.cons\n#align cons_cons cons_cons\n\n",
 "cons_bnot_rev":
 "@[simp, to_additive]\ntheorem step.cons_bnot_rev {x b} : Red.Step ((x, not b) :: (x, b) :: L) L :=\n  @Red.Step.not_rev _ [] _ _ _\n#align step.cons_bnot_rev step.cons_bnot_rev\n\n",
 "cons_bnot":
 "@[simp, to_additive]\ntheorem step.cons_bnot {x b} : Red.Step ((x, b) :: (x, not b) :: L) L :=\n  @step.bnot _ [] _ _ _\n#align step.cons_bnot step.cons_bnot\n\n",
 "cons":
 "@[simp, to_additive]\ntheorem reduce.cons (x) :\n    reduce (x :: L) =\n      list.cases_on (reduce L) [x] fun hd tl => if x.1 = hd.1 ∧ x.2 = not hd.2 then tl else x :: hd :: tl :=\n  rfl\n#align reduce.cons reduce.cons\n\n",
 "complete":
 "theorem red.enum.complete (H : Red L₁ L₂) : L₂ ∈ Red.enum L₁ :=\n  List.mem_filter_of_mem (List.mem_sublists.2 <| Red.sublist H) H\n#align red.enum.complete red.enum.complete\n\n",
 "comp":
 "@[to_additive]\ntheorem map.comp {γ : Type w} (f : α → β) (g : β → γ) (x) : map g (map f x) = map (g ∘ f) x := by\n  rcases x with ⟨L⟩ <;> simp\n#align map.comp map.comp\n\n",
 "church_rosser":
 "/-- **Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma. -/\n@[to_additive\n      \"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\\nrespectively. This is also known as Newman's diamond lemma.\"]\ntheorem church_rosser : Red L₁ L₂ → Red L₁ L₃ → Join Red L₂ L₃ :=\n  Relation.church_rosser fun a b c hab hac =>\n    match b, c, Red.Step.diamond hab hac rfl with\n    | b, _, or.inl rfl => ⟨b, by rfl, by rfl⟩\n    | b, c, or.inr ⟨d, hbd, hcd⟩ => ⟨d, refl_gen.single hbd, hcd.to_red⟩\n#align church_rosser church_rosser\n\n",
 "bnot_rev":
 "@[simp, to_additive]\ntheorem step.bnot_rev {x b} : Step (L₁ ++ (x, not b) :: (x, b) :: L₂) (L₁ ++ L₂) := by cases b <;> exact step.bnot\n#align step.bnot_rev step.bnot_rev\n\n",
 "append_right":
 "@[to_additive]\ntheorem step.append_right : ∀ {L₁ L₂ L₃ : List (α × Bool)}, Step L₁ L₂ → Step (L₁ ++ L₃) (L₂ ++ L₃)\n  | _, _, _, red.step.bnot => by simp\n#align step.append_right step.append_right\n\n",
 "append_left_iff":
 "@[to_additive]\ntheorem step.append_left_iff : ∀ L, Step (L ++ L₁) (L ++ L₂) ↔ Step L₁ L₂\n  | [] => by simp\n  | p :: l => by simp [step.append_left_iff l, step.cons_cons_iff]\n#align step.append_left_iff step.append_left_iff\n\n",
 "append_left":
 "@[to_additive]\ntheorem step.append_left : ∀ {L₁ L₂ L₃ : List (α × Bool)}, Step L₂ L₃ → Step (L₁ ++ L₂) (L₁ ++ L₃)\n  | _, _, _, red.step.bnot => by rw [← list.append_assoc, ← list.append_assoc] <;> constructor\n#align step.append_left step.append_left\n\n",
 "append_append_left_iff":
 "@[to_additive]\ntheorem append_append_left_iff : ∀ L, Red (L ++ L₁) (L ++ L₂) ↔ Red L₁ L₂\n  | [] => iff.rfl\n  | p :: L => by simp [append_append_left_iff L, cons_cons_iff]\n#align append_append_left_iff append_append_left_iff\n\n",
 "append_append":
 "@[to_additive]\ntheorem append_append (h₁ : Red L₁ L₃) (h₂ : Red L₂ L₄) : Red (L₁ ++ L₂) (L₃ ++ L₄) :=\n  (h₁.lift (fun L => L ++ L₂) fun a b => Step.append_right).trans ((append_append_left_iff _).2 h₂)\n#align append_append append_append\n\n",
 "antisymm":
 "#print antisymm /-\n@[to_additive]\ntheorem antisymm (h₁₂ : Red L₁ L₂) (h₂₁ : Red L₂ L₁) : L₁ = L₂ :=\n  h₂₁.sublist.antisymm h₁₂.sublist\n#align antisymm antisymm\n-/\n\n"}