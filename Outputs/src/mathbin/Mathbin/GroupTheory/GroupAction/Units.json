{"smul_is_unit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_is_unit [Monoid M] [SMul M α] {m : M} (hm : IsUnit m) (a : α) : «expr • » hm.unit a = «expr • » m a :=\n  rfl\n#align smul_is_unit smul_is_unit\n\n",
 "smul_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_inv /-\n/-- Note that this lemma exists more generally as the global `smul_inv` -/\n@[simp]\ntheorem smul_inv [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M] (g : G)\n    (m : «expr ˣ» M) : («expr • » g m)⁻¹ = «expr • » g⁻¹ m⁻¹ :=\n  ext rfl\n#align smul_inv smul_inv\n-/\n\n",
 "smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n@[to_additive]\ntheorem smul_def [Monoid M] [SMul M α] (m : «expr ˣ» M) (a : α) : «expr • » m a = «expr • » (m : M) a :=\n  rfl\n#align smul_def smul_def\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print IsUnit.smul /-\n-- Just to prove this transfers a particularly useful instance.\ntheorem IsUnit.smul [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M] {m : M} (g : G)\n    (h : IsUnit m) : IsUnit («expr • » g m) :=\n  let ⟨u, hu⟩ := h\n  hu ▸ ⟨«expr • » g u, Units.val_smul _ _⟩\n#align is_unit.smul IsUnit.smul\n-/\n\n",
 "inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print IsUnit.inv_smul /-\ntheorem IsUnit.inv_smul [Monoid α] {a : α} (h : IsUnit a) : «expr • » h.unit⁻¹ a = 1 :=\n  h.coe_inv_mul\n#align is_unit.inv_smul IsUnit.inv_smul\n-/\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_smul [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M] (g : G)\n    (m : «expr ˣ» M) : ↑(«expr • » g m) = «expr • » g (m : M) :=\n  rfl\n#align coe_smul coe_smul\n\n"}