{"toPerm_injective":
 "#print MulAction.toPerm_injective /-\n/-- `mul_action.to_perm` is injective on faithful actions. -/\n@[to_additive \"`add_action.to_perm` is injective on faithful actions.\"]\ntheorem MulAction.toPerm_injective [FaithfulSMul α β] : function.injective (MulAction.toPerm : α → equiv.perm β) :=\n  (show function.injective (equiv.to_fun ∘ MulAction.toPerm) from smul_left_injective').of_comp\n#align mul_action.to_perm_injective MulAction.toPerm_injective\n-/\n\n",
 "surjective₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print MulAction.surjective₀ /-\nprotected theorem MulAction.surjective₀ (ha : a ≠ 0) : surjective ((«expr • » · ·) a : β → β) :=\n  (MulAction.bijective₀ ha).surjective\n#align mul_action.surjective₀ MulAction.surjective₀\n-/\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print MulAction.surjective /-\n@[to_additive]\nprotected theorem MulAction.surjective (g : α) : surjective ((«expr • » · ·) g : β → β) :=\n  (MulAction.bijective g).surjective\n#align mul_action.surjective MulAction.surjective\n-/\n\n",
 "smul_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_zpow /-\ntheorem smul_zpow [group β] [SMulCommClass α β β] [IsScalarTower α β β] (c : α) (x : β) (p : ℤ) :\n    «expr • » c x ^ p = «expr • » (c ^ p) (x ^ p) := by cases p <;> simp [smul_pow, smul_inv]\n#align smul_zpow smul_zpow\n-/\n\n",
 "smul_sub_iff_sub_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print IsUnit.smul_sub_iff_sub_inv_smul /-\ntheorem IsUnit.smul_sub_iff_sub_inv_smul [add_group β] [DistribMulAction α β] [IsScalarTower α β β]\n    [SMulCommClass α β β] (r : α) (a : β) : is_unit («expr • » r 1 - a) ↔ is_unit (1 - «expr • » r⁻¹ a) := by\n  rw [← isUnit_smul_iff r (1 - «expr • » r⁻¹ a), smul_sub, smul_inv_smul]\n#align is_unit.smul_sub_iff_sub_inv_smul IsUnit.smul_sub_iff_sub_inv_smul\n-/\n\n",
 "smul_right_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Commute.smul_right_iff₀ /-\n@[simp]\ntheorem Commute.smul_right_iff₀ [Mul β] [SMulCommClass α β β] [IsScalarTower α β β] {a b : β} {c : α} (hc : c ≠ 0) :\n    Commute a («expr • » c b) ↔ Commute a b :=\n  Commute.smul_right_iff (Units.mk0 c hc)\n#align commute.smul_right_iff₀ Commute.smul_right_iff₀\n-/\n\n",
 "smul_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Commute.smul_right_iff /-\n@[simp]\ntheorem Commute.smul_right_iff [Mul β] [SMulCommClass α β β] [IsScalarTower α β β] {a b : β} (r : α) :\n    Commute a («expr • » r b) ↔ Commute a b :=\n  ⟨fun h => inv_smul_smul r b ▸ h.smul_right r⁻¹, fun h => h.smul_right r⟩\n#align commute.smul_right_iff Commute.smul_right_iff\n-/\n\n",
 "smul_ne_zero_iff_ne'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_ne_zero_iff_ne' /-\ntheorem smul_ne_zero_iff_ne' {a : α} (ha : a ≠ 0) {x : β} : «expr • » a x ≠ 0 ↔ x ≠ 0 :=\n  show «expr • » (Units.mk0 a ha) x ≠ 0 ↔ x ≠ 0 from smul_ne_zero_iff_ne _\n#align smul_ne_zero_iff_ne' smul_ne_zero_iff_ne'\n-/\n\n",
 "smul_ne_zero_iff_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_ne_zero_iff_ne /-\ntheorem smul_ne_zero_iff_ne (a : α) {x : β} : «expr • » a x ≠ 0 ↔ x ≠ 0 :=\n  not_congr <| smul_eq_zero_iff_eq a\n#align smul_ne_zero_iff_ne smul_ne_zero_iff_ne\n-/\n\n",
 "smul_left_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Commute.smul_left_iff₀ /-\n@[simp]\ntheorem Commute.smul_left_iff₀ [Mul β] [SMulCommClass α β β] [IsScalarTower α β β] {a b : β} {c : α} (hc : c ≠ 0) :\n    Commute («expr • » c a) b ↔ Commute a b :=\n  Commute.smul_left_iff (Units.mk0 c hc)\n#align commute.smul_left_iff₀ Commute.smul_left_iff₀\n-/\n\n",
 "smul_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Commute.smul_left_iff /-\n@[simp]\ntheorem Commute.smul_left_iff [Mul β] [SMulCommClass α β β] [IsScalarTower α β β] {a b : β} (r : α) :\n    Commute («expr • » r a) b ↔ Commute a b := by rw [Commute.symm_iff, Commute.smul_right_iff, Commute.symm_iff]\n#align commute.smul_left_iff Commute.smul_left_iff\n-/\n\n",
 "smul_left_cancel_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_left_cancel_iff /-\n@[simp, to_additive]\ntheorem smul_left_cancel_iff (g : α) {x y : β} : «expr • » g x = «expr • » g y ↔ x = y :=\n  (MulAction.injective g).eq_iff\n#align smul_left_cancel_iff smul_left_cancel_iff\n-/\n\n",
 "smul_left_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_left_cancel /-\n@[to_additive]\ntheorem smul_left_cancel {a : α} (ha : is_unit a) {x y : β} : «expr • » a x = «expr • » a y ↔ x = y :=\n  let ⟨u, hu⟩ := ha\n  hu ▸ smul_left_cancel_iff u\n#align smul_left_cancel smul_left_cancel\n-/\n\n",
 "smul_inv_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_inv_smul₀ /-\n@[simp]\ntheorem smul_inv_smul₀ {c : α} (hc : c ≠ 0) (x : β) : «expr • » c («expr • » c⁻¹ x) = x :=\n  smul_inv_smul (Units.mk0 c hc) x\n#align smul_inv_smul₀ smul_inv_smul₀\n-/\n\n",
 "smul_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_inv_smul /-\n@[simp, to_additive]\ntheorem smul_inv_smul (c : α) (x : β) : «expr • » c («expr • » c⁻¹ x) = x := by rw [smul_smul, mul_right_inv, one_smul]\n#align smul_inv_smul smul_inv_smul\n-/\n\n",
 "smul_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_inv /-\ntheorem smul_inv [group β] [SMulCommClass α β β] [IsScalarTower α β β] (c : α) (x : β) :\n    («expr • » c x)⁻¹ = «expr • » c⁻¹ x⁻¹ := by\n  rw [inv_eq_iff_mul_eq_one, smul_mul_smul, mul_right_inv, mul_right_inv, one_smul]\n#align smul_inv smul_inv\n-/\n\n",
 "smul_eq_zero_iff_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_eq_zero_iff_eq' /-\ntheorem smul_eq_zero_iff_eq' {a : α} (ha : a ≠ 0) {x : β} : «expr • » a x = 0 ↔ x = 0 :=\n  show «expr • » (Units.mk0 a ha) x = 0 ↔ x = 0 from smul_eq_zero_iff_eq _\n#align smul_eq_zero_iff_eq' smul_eq_zero_iff_eq'\n-/\n\n",
 "smul_eq_zero_iff_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_eq_zero_iff_eq /-\ntheorem smul_eq_zero_iff_eq (a : α) {x : β} : «expr • » a x = 0 ↔ x = 0 :=\n  ⟨fun h => by rw [← inv_smul_smul a x, h, smul_zero], fun h => h.symm ▸ smul_zero _⟩\n#align smul_eq_zero_iff_eq smul_eq_zero_iff_eq\n-/\n\n",
 "smul_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_eq_zero /-\n@[simp]\ntheorem smul_eq_zero {u : α} (hu : is_unit u) {x : β} : «expr • » u x = 0 ↔ x = 0 :=\n  exists.elim hu fun u hu => hu ▸ show «expr • » u x = 0 ↔ x = 0 from smul_eq_zero_iff_eq u\n#align smul_eq_zero smul_eq_zero\n-/\n\n",
 "smul_eq_iff_eq_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_eq_iff_eq_inv_smul /-\n@[to_additive]\ntheorem smul_eq_iff_eq_inv_smul (g : α) {x y : β} : «expr • » g x = y ↔ x = «expr • » g⁻¹ y :=\n  (MulAction.toPerm g).apply_eq_iff_eq_symm_apply\n#align smul_eq_iff_eq_inv_smul smul_eq_iff_eq_inv_smul\n-/\n\n",
 "smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Equiv.Perm.smul_def /-\n@[simp]\nprotected theorem Equiv.Perm.smul_def {α : Type _} (f : equiv.perm α) (a : α) : «expr • » f a = f a :=\n  rfl\n#align equiv.perm.smul_def Equiv.Perm.smul_def\n-/\n\n",
 "isUnit_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print isUnit_smul_iff /-\n@[simp]\ntheorem isUnit_smul_iff [MulAction α β] [SMulCommClass α β β] [IsScalarTower α β β] (g : α) (m : β) :\n    is_unit («expr • » g m) ↔ is_unit m :=\n  ⟨fun h => inv_smul_smul g m ▸ h.smul g⁻¹, IsUnit.smul g⟩\n#align is_unit_smul_iff isUnit_smul_iff\n-/\n\n",
 "inv_smul_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print inv_smul_smul₀ /-\n@[simp]\ntheorem inv_smul_smul₀ {c : α} (hc : c ≠ 0) (x : β) : «expr • » c⁻¹ («expr • » c x) = x :=\n  inv_smul_smul (Units.mk0 c hc) x\n#align inv_smul_smul₀ inv_smul_smul₀\n-/\n\n",
 "inv_smul_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print inv_smul_smul /-\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes\n-/\n@[simp, to_additive]\ntheorem inv_smul_smul (c : α) (x : β) : «expr • » c⁻¹ («expr • » c x) = x := by rw [smul_smul, mul_left_inv, one_smul]\n#align inv_smul_smul inv_smul_smul\n-/\n\n",
 "inv_smul_eq_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print inv_smul_eq_iff₀ /-\ntheorem inv_smul_eq_iff₀ {a : α} (ha : a ≠ 0) {x y : β} : «expr • » a⁻¹ x = y ↔ x = «expr • » a y :=\n  (MulAction.toPerm (Units.mk0 a ha)).symm_apply_eq\n#align inv_smul_eq_iff₀ inv_smul_eq_iff₀\n-/\n\n",
 "inv_smul_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print inv_smul_eq_iff /-\n@[to_additive]\ntheorem inv_smul_eq_iff {a : α} {x y : β} : «expr • » a⁻¹ x = y ↔ x = «expr • » a y :=\n  (MulAction.toPerm a).symm_apply_eq\n#align inv_smul_eq_iff inv_smul_eq_iff\n-/\n\n",
 "injective₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print MulAction.injective₀ /-\nprotected theorem MulAction.injective₀ (ha : a ≠ 0) : injective ((«expr • » · ·) a : β → β) :=\n  (MulAction.bijective₀ ha).injective\n#align mul_action.injective₀ MulAction.injective₀\n-/\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print MulAction.injective /-\n@[to_additive]\nprotected theorem MulAction.injective (g : α) : injective ((«expr • » · ·) g : β → β) :=\n  (MulAction.bijective g).injective\n#align mul_action.injective MulAction.injective\n-/\n\n",
 "eq_inv_smul_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print eq_inv_smul_iff₀ /-\ntheorem eq_inv_smul_iff₀ {a : α} (ha : a ≠ 0) {x y : β} : x = «expr • » a⁻¹ y ↔ «expr • » a x = y :=\n  (MulAction.toPerm (Units.mk0 a ha)).eq_symm_apply\n#align eq_inv_smul_iff₀ eq_inv_smul_iff₀\n-/\n\n",
 "eq_inv_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print eq_inv_smul_iff /-\n@[to_additive]\ntheorem eq_inv_smul_iff {a : α} {x y : β} : x = «expr • » a⁻¹ y ↔ «expr • » a x = y :=\n  (MulAction.toPerm a).eq_symm_apply\n#align eq_inv_smul_iff eq_inv_smul_iff\n-/\n\n",
 "bijective₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print MulAction.bijective₀ /-\nprotected theorem MulAction.bijective₀ (ha : a ≠ 0) : bijective ((«expr • » · ·) a : β → β) :=\n  MulAction.bijective <| Units.mk0 a ha\n#align mul_action.bijective₀ MulAction.bijective₀\n-/\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print MulAction.bijective /-\n@[to_additive]\nprotected theorem MulAction.bijective (g : α) : bijective ((«expr • » · ·) g : β → β) :=\n  (MulAction.toPerm g).bijective\n#align mul_action.bijective MulAction.bijective\n-/\n\n"}