{"saturated_iff_zpow":
 "@[to_additive]\ntheorem saturated_iff_zpow {H : Subgroup G} : Saturated H ↔ ∀ (n : ℤ) (g : G), g ^ n ∈ H → n = 0 ∨ g ∈ H :=\n  by\n  constructor\n  · rintro hH ⟨n⟩ g hgn\n    · simp only [Int.coe_nat_eq_zero, Int.ofNat_eq_coe, zpow_ofNat] at hgn⊢\n      exact hH hgn\n    · suffices g ^ (n + 1) ∈ H by\n        refine' (hH this).imp _ id\n        simp only [IsEmpty.forall_iff, nat.succ_ne_zero]\n      simpa only [inv_mem_iff, zpow_negSucc] using hgn\n  · intro h n g hgn\n    specialize h n g\n    simp only [Int.coe_nat_eq_zero, zpow_ofNat] at h\n    apply h hgn\n#align saturated_iff_zpow saturated_iff_zpow\n\n",
 "saturated_iff_npow":
 "/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[to_additive]\ntheorem saturated_iff_npow {H : Subgroup G} : Saturated H ↔ ∀ (n : ℕ) (g : G), g ^ n ∈ H → n = 0 ∨ g ∈ H :=\n  iff.rfl\n#align saturated_iff_npow saturated_iff_npow\n\n",
 "ker_saturated":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem ker_saturated {A₁ A₂ : Type _} [AddCommGroup A₁] [AddCommGroup A₂] [NoZeroSMulDivisors ℕ A₂]\n    (f : «expr →+ » A₁ A₂) : f.ker.saturated := by\n  intro n g hg\n  simpa only [f.mem_ker, nsmul_eq_smul, f.map_nsmul, smul_eq_zero] using hg\n#align ker_saturated ker_saturated\n\n"}