{"xa_sq":
 "@[simp]\ntheorem xa_sq (i : zmod (2 * n)) : xa i ^ 2 = a n := by simp [sq]\n#align xa_sq xa_sq\n\n",
 "xa_pow_four":
 "@[simp]\ntheorem xa_pow_four (i : zmod (2 * n)) : xa i ^ 4 = 1 :=\n  by\n  simp only [pow_succ, sq, xa_mul_xa, xa_mul_a, add_sub_cancel, add_sub_assoc, add_sub_cancel', sub_self, add_zero]\n  norm_cast\n  rw [← two_mul]\n  simp [one_def]\n#align xa_pow_four xa_pow_four\n\n",
 "xa_mul_xa":
 "@[simp]\ntheorem xa_mul_xa (i j : zmod (2 * n)) : xa i * xa j = a (n + j - i) :=\n  rfl\n#align xa_mul_xa xa_mul_xa\n\n",
 "xa_mul_a":
 "@[simp]\ntheorem xa_mul_a (i j : zmod (2 * n)) : xa i * a j = xa (i + j) :=\n  rfl\n#align xa_mul_a xa_mul_a\n\n",
 "quaternion_group_one_is_cyclic":
 "/-- In the special case `n = 1`, `quaternion 1` is a cyclic group (of order `4`). -/\ntheorem quaternion_group_one_is_cyclic : is_cyclic (quaternion_group 1) :=\n  by\n  apply is_cyclic_of_order_of_eq_card\n  rw [card, mul_one]\n  exact order_of_xa 0\n#align quaternion_group_one_is_cyclic quaternion_group_one_is_cyclic\n\n",
 "order_of_xa":
 "/-- If `0 < n`, then `xa i` has order 4.\n-/\n@[simp]\ntheorem order_of_xa [ne_zero n] (i : zmod (2 * n)) : order_of (xa i) = 4 :=\n  by\n  change _ = 2 ^ 2\n  haveI : fact (Nat.Prime 2) := fact.mk Nat.prime_two\n  apply order_of_eq_prime_pow\n  · intro h\n    simp only [pow_one, xa_sq] at h\n    injection h with h'\n    apply_fun zmod.val  at h'\n    apply_fun (· / n)  at h'\n    simp only [zmod.val_nat_cast, zmod.val_zero, nat.zero_div, Nat.mod_mul_left_div_self,\n      nat.div_self (NeZero.pos n)] at h'\n    norm_num at h'\n  · norm_num\n#align order_of_xa order_of_xa\n\n",
 "order_of_a_one":
 "/-- If `0 < n`, then `a 1` has order `2 * n`.\n-/\n@[simp]\ntheorem order_of_a_one : order_of (a 1 : quaternion_group n) = 2 * n :=\n  by\n  cases' eq_zero_or_neZero n with hn hn\n  · subst hn\n    simp_rw [mul_zero, order_of_eq_zero_iff']\n    intro n h\n    rw [one_def, a_one_pow]\n    apply mt a.inj\n    haveI : CharZero (zmod (2 * 0)) := zmod.char_zero\n    simpa using h.ne'\n  apply (nat.le_of_dvd (NeZero.pos _) (order_of_dvd_of_pow_eq_one (@a_one_pow_n n))).lt_or_eq.resolve_left\n  intro h\n  have h1 : (a 1 : quaternion_group n) ^ order_of (a 1) = 1 := pow_order_of_eq_one _\n  rw [a_one_pow] at h1\n  injection h1 with h2\n  rw [← zmod.val_eq_zero, zmod.val_nat_cast, nat.mod_eq_of_lt h] at h2\n  exact absurd h2.symm (order_of_pos _).ne\n#align order_of_a_one order_of_a_one\n\n",
 "order_of_a":
 "/-- If `0 < n`, then `a i` has order `(2 * n) / gcd (2 * n) i`.\n-/\ntheorem order_of_a [ne_zero n] (i : zmod (2 * n)) : order_of (a i) = 2 * n / nat.gcd (2 * n) i.val :=\n  by\n  conv_lhs => rw [← zmod.nat_cast_zmod_val i]\n  rw [← a_one_pow, order_of_pow, order_of_a_one]\n#align order_of_a order_of_a\n\n",
 "one_def":
 "theorem one_def : (1 : quaternion_group n) = a 0 :=\n  rfl\n#align one_def one_def\n\n",
 "exponent":
 "theorem exponent : monoid.exponent (quaternion_group n) = 2 * lcm n 2 :=\n  by\n  rw [← normalize_eq 2, ← lcm_mul_left, normalize_eq]\n  norm_num\n  cases' eq_zero_or_neZero n with hn hn\n  · subst hn\n    simp only [lcm_zero_left, mul_zero]\n    exact monoid.exponent_eq_zero_of_order_zero order_of_a_one\n  apply nat.dvd_antisymm\n  · apply monoid.exponent_dvd_of_forall_pow_eq_one\n    rintro (m | m)\n    · rw [← order_of_dvd_iff_pow_eq_one, order_of_a]\n      refine' nat.dvd_trans ⟨gcd (2 * n) m.val, _⟩ (dvd_lcm_left (2 * n) 4)\n      exact (Nat.div_mul_cancel (nat.gcd_dvd_left (2 * n) m.val)).symm\n    · rw [← order_of_dvd_iff_pow_eq_one, order_of_xa]\n      exact dvd_lcm_right (2 * n) 4\n  · apply lcm_dvd\n    · convert monoid.order_dvd_exponent (a 1)\n      exact order_of_a_one.symm\n    · convert monoid.order_dvd_exponent (xa 0)\n      exact (order_of_xa 0).symm\n#align exponent exponent\n\n",
 "card":
 "/-- If `0 < n`, then `quaternion_group n` has `4n` elements.\n-/\ntheorem card [ne_zero n] : fintype.card (quaternion_group n) = 4 * n :=\n  by\n  rw [← fintype.card_eq.mpr ⟨fintype_helper⟩, fintype.card_sum, zmod.card, two_mul]\n  ring\n#align card card\n\n",
 "a_one_pow_n":
 "@[simp]\ntheorem a_one_pow_n : (a 1 : quaternion_group n) ^ (2 * n) = 1 :=\n  by\n  rw [a_one_pow, one_def]\n  congr 1\n  exact zmod.nat_cast_self _\n#align a_one_pow_n a_one_pow_n\n\n",
 "a_one_pow":
 "@[simp]\ntheorem a_one_pow (k : ℕ) : (a 1 : quaternion_group n) ^ k = a k :=\n  by\n  induction' k with k IH\n  · rw [Nat.cast_zero]\n    rfl\n  · rw [pow_succ, IH, a_mul_a]\n    congr 1\n    norm_cast\n    rw [Nat.one_add]\n#align a_one_pow a_one_pow\n\n",
 "a_mul_xa":
 "@[simp]\ntheorem a_mul_xa (i j : zmod (2 * n)) : a i * xa j = xa (j - i) :=\n  rfl\n#align a_mul_xa a_mul_xa\n\n",
 "a_mul_a":
 "/-\nCopyright (c) 2021 Julian Kuelshammer. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Julian Kuelshammer\n-/\n@[simp]\ntheorem a_mul_a (i j : zmod (2 * n)) : a i * a j = a (i + j) :=\n  rfl\n#align a_mul_a a_mul_a\n\n"}