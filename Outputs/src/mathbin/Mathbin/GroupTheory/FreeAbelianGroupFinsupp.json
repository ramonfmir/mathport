{"to_finsupp_to_free_abelian_group":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem to_finsupp_to_free_abelian_group (f : «expr →₀ » X ℤ) : f.to_free_abelian_group.to_finsupp = f := by\n  rw [← AddMonoidHom.comp_apply, to_finsupp_comp_to_free_abelian_group, AddMonoidHom.id_apply]\n#align to_finsupp_to_free_abelian_group to_finsupp_to_free_abelian_group\n\n",
 "to_finsupp_of":
 "@[simp]\ntheorem to_finsupp_of (x : X) : toFinsupp (of x) = Finsupp.single x 1 := by simp only [to_finsupp, lift.of]\n#align to_finsupp_of to_finsupp_of\n\n",
 "toFreeAbelianGroup_toFinsupp":
 "#print Finsupp.toFreeAbelianGroup_toFinsupp /-\n@[simp]\ntheorem Finsupp.toFreeAbelianGroup_toFinsupp {X} (x : FreeAbelianGroup X) : x.to_finsupp.to_free_abelian_group = x := by\n  rw [← AddMonoidHom.comp_apply, Finsupp.toFreeAbelianGroup_comp_toFinsupp, AddMonoidHom.id_apply]\n#align finsupp.to_free_abelian_group_to_finsupp Finsupp.toFreeAbelianGroup_toFinsupp\n-/\n\n",
 "toFreeAbelianGroup_comp_toFinsupp":
 "#print Finsupp.toFreeAbelianGroup_comp_toFinsupp /-\n@[simp]\ntheorem Finsupp.toFreeAbelianGroup_comp_toFinsupp :\n    toFreeAbelianGroup.comp toFinsupp = AddMonoidHom.id (FreeAbelianGroup X) :=\n  by\n  ext\n  rw [to_free_abelian_group, to_finsupp, AddMonoidHom.comp_apply, lift.of, lift_add_hom_apply_single,\n    AddMonoidHom.flip_apply, smulAddHom_apply, one_smul, AddMonoidHom.id_apply]\n#align finsupp.to_free_abelian_group_comp_to_finsupp Finsupp.toFreeAbelianGroup_comp_toFinsupp\n-/\n\n",
 "toFreeAbelianGroup_comp_singleAddHom":
 "#print Finsupp.toFreeAbelianGroup_comp_singleAddHom /-\n/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[simp]\ntheorem Finsupp.toFreeAbelianGroup_comp_singleAddHom (x : X) :\n    Finsupp.toFreeAbelianGroup.comp (Finsupp.singleAddHom x) = (smulAddHom ℤ (FreeAbelianGroup X)).flip (of x) :=\n  by\n  ext\n  simp only [AddMonoidHom.coe_comp, finsupp.single_add_hom_apply, Function.comp_apply, one_smul, to_free_abelian_group,\n    Finsupp.liftAddHom_apply_single]\n#align finsupp.to_free_abelian_group_comp_single_add_hom Finsupp.toFreeAbelianGroup_comp_singleAddHom\n-/\n\n",
 "toFinsupp_comp_toFreeAbelianGroup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n#print FreeAbelianGroup.toFinsupp_comp_toFreeAbelianGroup /-\n@[simp]\ntheorem FreeAbelianGroup.toFinsupp_comp_toFreeAbelianGroup :\n    toFinsupp.comp toFreeAbelianGroup = AddMonoidHom.id («expr →₀ » X ℤ) :=\n  by\n  ext (x y); simp only [AddMonoidHom.id_comp]\n  rw [AddMonoidHom.comp_assoc, Finsupp.toFreeAbelianGroup_comp_singleAddHom]\n  simp only [to_finsupp, AddMonoidHom.coe_comp, finsupp.single_add_hom_apply, Function.comp_apply, one_smul, lift.of,\n    AddMonoidHom.flip_apply, smulAddHom_apply, AddMonoidHom.id_apply]\n#align free_abelian_group.to_finsupp_comp_to_free_abelian_group FreeAbelianGroup.toFinsupp_comp_toFreeAbelianGroup\n-/\n\n",
 "support_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem support_zsmul (k : ℤ) (h : k ≠ 0) (a : FreeAbelianGroup X) : support («expr • » k a) = support a :=\n  by\n  ext x\n  simp only [mem_support_iff, AddMonoidHom.map_zsmul]\n  simp only [h, zsmul_int_int, false_or_iff, ne.def, mul_eq_zero]\n#align support_zsmul support_zsmul\n\n",
 "support_zero":
 "@[simp]\ntheorem support_zero : support (0 : FreeAbelianGroup X) = ∅ := by\n  simp only [support, Finsupp.support_zero, AddMonoidHom.map_zero]\n#align support_zero support_zero\n\n",
 "support_of":
 "@[simp]\ntheorem support_of (x : X) : support (of x) = {x} := by\n  simp only [support, to_finsupp_of, Finsupp.support_single_ne_zero _ one_ne_zero]\n#align support_of support_of\n\n",
 "support_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem support_nsmul (k : ℕ) (h : k ≠ 0) (a : FreeAbelianGroup X) : support («expr • » k a) = support a :=\n  by\n  apply support_zsmul k _ a\n  exact_mod_cast h\n#align support_nsmul support_nsmul\n\n",
 "support_neg":
 "@[simp]\ntheorem support_neg (a : FreeAbelianGroup X) : support (-a) = support a := by\n  simp only [support, AddMonoidHom.map_neg, Finsupp.support_neg]\n#align support_neg support_neg\n\n",
 "support_add":
 "theorem support_add (a b : FreeAbelianGroup X) : support (a + b) ⊆ a.support ∪ b.support :=\n  by\n  simp only [support, AddMonoidHom.map_add]\n  apply Finsupp.support_add\n#align support_add support_add\n\n",
 "not_mem_support_iff":
 "theorem not_mem_support_iff (x : X) (a : FreeAbelianGroup X) : x ∉ a.support ↔ coeff x a = 0 :=\n  by\n  rw [support, Finsupp.not_mem_support_iff]\n  exact iff.rfl\n#align not_mem_support_iff not_mem_support_iff\n\n",
 "mem_support_iff":
 "theorem mem_support_iff (x : X) (a : FreeAbelianGroup X) : x ∈ a.support ↔ coeff x a ≠ 0 :=\n  by\n  rw [support, Finsupp.mem_support_iff]\n  exact iff.rfl\n#align mem_support_iff mem_support_iff\n\n"}