{"equiv_lp_pi_Lp_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem equiv_lp_pi_Lp_norm (f : lp E p) : «expr‖ ‖» (equiv.lp_pi_Lp f) = «expr‖ ‖» f :=\n  by\n  rcases p.trichotomy with (rfl | rfl | h)\n  · rw [pi_Lp.norm_eq_card, lp.norm_eq_card_dsupport]\n    rfl\n  · rw [pi_Lp.norm_eq_csupr, lp.norm_eq_csupr]\n    rfl\n  · rw [pi_Lp.norm_eq_sum h, lp.norm_eq_tsum_rpow h, tsum_fintype]\n    rfl\n#align equiv_lp_pi_Lp_norm equiv_lp_pi_Lp_norm\n\n",
 "coe_ring_equiv_lp_bcf_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem coe_ring_equiv_lp_bcf_symm (f : bounded_continuous_function α R) : ((ring_equiv.lp_bcf R).symm f : α → R) = f :=\n  rfl\n#align coe_ring_equiv_lp_bcf_symm coe_ring_equiv_lp_bcf_symm\n\n",
 "coe_ring_equiv_lp_bcf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem coe_ring_equiv_lp_bcf (f : lp (fun _ : α => R) (ennreal.top)) : (ring_equiv.lp_bcf R f : α → R) = f :=\n  rfl\n#align coe_ring_equiv_lp_bcf coe_ring_equiv_lp_bcf\n\n",
 "coe_lp_pi_Lpₗᵢ_symm":
 "theorem coe_lp_pi_Lpₗᵢ_symm [fact (1 ≤ p)] (f : pi_Lp p E) : ((lp_pi_Lpₗᵢ 𝕜).symm f : ∀ i, E i) = f :=\n  rfl\n#align coe_lp_pi_Lpₗᵢ_symm coe_lp_pi_Lpₗᵢ_symm\n\n",
 "coe_lp_pi_Lpₗᵢ":
 "theorem coe_lp_pi_Lpₗᵢ [fact (1 ≤ p)] (f : lp E p) : lp_pi_Lpₗᵢ 𝕜 f = f :=\n  rfl\n#align coe_lp_pi_Lpₗᵢ coe_lp_pi_Lpₗᵢ\n\n",
 "coe_lp_bcfₗᵢ_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem coe_lp_bcfₗᵢ_symm (f : bounded_continuous_function α E) : ((lp_bcfₗᵢ 𝕜).symm f : α → E) = f :=\n  rfl\n#align coe_lp_bcfₗᵢ_symm coe_lp_bcfₗᵢ_symm\n\n",
 "coe_lp_bcfₗᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem coe_lp_bcfₗᵢ (f : lp (fun _ : α => E) (ennreal.top)) : (lp_bcfₗᵢ 𝕜 f : α → E) = f :=\n  rfl\n#align coe_lp_bcfₗᵢ coe_lp_bcfₗᵢ\n\n",
 "coe_equiv_lp_pi_Lp_symm":
 "theorem coe_equiv_lp_pi_Lp_symm (f : pi_Lp p E) : (equiv.lp_pi_Lp.symm f : ∀ i, E i) = f :=\n  rfl\n#align coe_equiv_lp_pi_Lp_symm coe_equiv_lp_pi_Lp_symm\n\n",
 "coe_equiv_lp_pi_Lp":
 "theorem coe_equiv_lp_pi_Lp (f : lp E p) : equiv.lp_pi_Lp f = f :=\n  rfl\n#align coe_equiv_lp_pi_Lp coe_equiv_lp_pi_Lp\n\n",
 "coe_alg_equiv_lp_bcf_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem coe_alg_equiv_lp_bcf_symm (f : bounded_continuous_function α A) :\n    ((alg_equiv.lp_bcf α A 𝕜).symm f : α → A) = f :=\n  rfl\n#align coe_alg_equiv_lp_bcf_symm coe_alg_equiv_lp_bcf_symm\n\n",
 "coe_alg_equiv_lp_bcf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n-- even `α` needs to be explicit here for elaboration\n-- the `norm_one_class A` shouldn't really be necessary, but currently it is for\n-- `one_mem_ℓp_infty` to get the `ring` instance on `lp`.\ntheorem coe_alg_equiv_lp_bcf (f : lp (fun _ : α => A) (ennreal.top)) : (alg_equiv.lp_bcf α A 𝕜 f : α → A) = f :=\n  rfl\n#align coe_alg_equiv_lp_bcf coe_alg_equiv_lp_bcf\n\n",
 "coe_add_equiv_lp_pi_Lp_symm":
 "theorem coe_add_equiv_lp_pi_Lp_symm [fact (1 ≤ p)] (f : pi_Lp p E) : (add_equiv.lp_pi_Lp.symm f : ∀ i, E i) = f :=\n  rfl\n#align coe_add_equiv_lp_pi_Lp_symm coe_add_equiv_lp_pi_Lp_symm\n\n",
 "coe_add_equiv_lp_pi_Lp":
 "theorem coe_add_equiv_lp_pi_Lp [fact (1 ≤ p)] (f : lp E p) : add_equiv.lp_pi_Lp f = f :=\n  rfl\n#align coe_add_equiv_lp_pi_Lp coe_add_equiv_lp_pi_Lp\n\n",
 "coe_add_equiv_lp_bcf_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem coe_add_equiv_lp_bcf_symm (f : bounded_continuous_function α E) : (add_equiv.lp_bcf.symm f : α → E) = f :=\n  rfl\n#align coe_add_equiv_lp_bcf_symm coe_add_equiv_lp_bcf_symm\n\n",
 "coe_add_equiv_lp_bcf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n-- note: `R` and `A` are explicit because otherwise Lean has elaboration problems\ntheorem coe_add_equiv_lp_bcf (f : lp (fun _ : α => E) (ennreal.top)) : (add_equiv.lp_bcf f : α → E) = f :=\n  rfl\n#align coe_add_equiv_lp_bcf coe_add_equiv_lp_bcf\n\n",
 "all":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-\nCopyright (c) 2022 Jireh Loreaux. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jireh Loreaux\n-/\n/-- When `α` is `finite`, every `f : pre_lp E p` satisfies `mem_ℓp f p`. -/\ntheorem mem_ℓp.all [Finite α] (f : ∀ i, E i) : mem_ℓp f p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | h)\n  · exact mem_ℓp_zero_iff.mpr { i : α | f i ≠ 0 }.to_finite\n  · exact mem_ℓp_infty_iff.mpr (set.finite.bdd_above (Set.range fun i : α => «expr‖ ‖» (f i)).to_finite)\n  · cases nonempty_fintype α\n    exact mem_ℓp_gen ⟨finset.univ.sum _, has_sum_fintype _⟩\n#align mem_ℓp.all mem_ℓp.all\n\n"}