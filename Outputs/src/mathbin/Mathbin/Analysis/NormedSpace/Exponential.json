{"update_exp":
 "theorem function.update_exp {ι : Type _} {𝔸 : ι → Type _} [Fintype ι] [DecidableEq ι] [∀ i, NormedRing (𝔸 i)]\n    [∀ i, NormedAlgebra 𝕂 (𝔸 i)] [∀ i, CompleteSpace (𝔸 i)] (x : ∀ i, 𝔸 i) (j : ι) (xj : 𝔸 j) :\n    Function.update (exp 𝕂 x) j (exp 𝕂 xj) = exp 𝕂 (Function.update x j xj) :=\n  by\n  ext i\n  simp_rw [pi.exp_def]\n  exact (Function.apply_update (fun i => exp 𝕂) x j xj i).symm\n#align function.update_exp function.update_exp\n\n",
 "star_exp":
 "theorem star_exp [T2Space 𝔸] [StarRing 𝔸] [ContinuousStar 𝔸] (x : 𝔸) : star (exp 𝕂 x) = exp 𝕂 (star x) := by\n  simp_rw [exp_eq_tsum, ← star_pow, ← star_inv_nat_cast_smul, ← tsum_star]\n#align star_exp star_exp\n\n",
 "snd_exp":
 "@[simp]\ntheorem prod.snd_exp [CompleteSpace 𝔹] (x : 𝔸 × 𝔹) : (exp 𝕂 x).snd = exp 𝕂 x.snd :=\n  map_exp _ (RingHom.snd 𝔸 𝔹) continuous_snd x\n#align prod.snd_exp prod.snd_exp\n\n",
 "of_real_exp_ℝ_ℝ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- A version of `complex.of_real_exp` for `exp` instead of `complex.exp` -/\n@[simp, norm_cast]\ntheorem of_real_exp_ℝ_ℝ (r : exprℝ) : ↑(exp (exprℝ) r) = exp (exprℂ) (r : exprℂ) :=\n  (map_exp (exprℝ) (algebraMap (exprℝ) (exprℂ)) (continuous_algebraMap _ _) r).trans (congr_fun exp_ℝ_ℂ_eq_exp_ℂ_ℂ _)\n#align of_real_exp_ℝ_ℝ of_real_exp_ℝ_ℝ\n\n",
 "norm_exp_series_summable_of_mem_ball'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem norm_exp_series_summable_of_mem_ball' (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    Summable fun n => «expr‖ ‖» («expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n)) :=\n  by\n  change Summable (norm ∘ _)\n  rw [← exp_series_apply_eq']\n  exact norm_exp_series_summable_of_mem_ball x hx\n#align norm_exp_series_summable_of_mem_ball' norm_exp_series_summable_of_mem_ball'\n\n",
 "norm_exp_series_summable_of_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_exp_series_summable_of_mem_ball (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    Summable fun n => «expr‖ ‖» (exp_series 𝕂 𝔸 n fun _ => x) :=\n  (exp_series 𝕂 𝔸).summable_norm_apply hx\n#align norm_exp_series_summable_of_mem_ball norm_exp_series_summable_of_mem_ball\n\n",
 "norm_exp_series_summable'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem norm_exp_series_summable' (x : 𝔸) : Summable fun n => «expr‖ ‖» («expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n)) :=\n  norm_exp_series_summable_of_mem_ball' x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align norm_exp_series_summable' norm_exp_series_summable'\n\n",
 "norm_exp_series_summable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_exp_series_summable (x : 𝔸) : Summable fun n => «expr‖ ‖» (exp_series 𝕂 𝔸 n fun _ => x) :=\n  norm_exp_series_summable_of_mem_ball x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align norm_exp_series_summable norm_exp_series_summable\n\n",
 "norm_exp_series_div_summable_of_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem norm_exp_series_div_summable_of_mem_ball (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    Summable fun n => «expr‖ ‖» (x ^ n / nat.factorial n) :=\n  by\n  change Summable (norm ∘ _)\n  rw [← exp_series_apply_eq_div' x]\n  exact norm_exp_series_summable_of_mem_ball x hx\n#align norm_exp_series_div_summable_of_mem_ball norm_exp_series_div_summable_of_mem_ball\n\n",
 "norm_exp_series_div_summable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem norm_exp_series_div_summable (x : 𝔸) : Summable fun n => «expr‖ ‖» (x ^ n / nat.factorial n) :=\n  norm_exp_series_div_summable_of_mem_ball 𝕂 x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align norm_exp_series_div_summable norm_exp_series_div_summable\n\n",
 "map_exp_of_mem_ball":
 "/-- Any continuous ring homomorphism commutes with `exp`. -/\ntheorem map_exp_of_mem_ball {F} [RingHomClass F 𝔸 𝔹] (f : F) (hf : Continuous f) (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) : f (exp 𝕂 x) = exp 𝕂 (f x) :=\n  by\n  rw [exp_eq_tsum, exp_eq_tsum]\n  refine' ((exp_series_summable_of_mem_ball' _ hx).has_sum.map f hf).tsum_eq.symm.trans _\n  dsimp only [Function.comp]\n  simp_rw [one_div, map_inv_nat_cast_smul f 𝕂 𝕂, map_pow]\n#align map_exp_of_mem_ball map_exp_of_mem_ball\n\n",
 "map_exp":
 "/-- Any continuous ring homomorphism commutes with `exp`. -/\ntheorem map_exp {F} [RingHomClass F 𝔸 𝔹] (f : F) (hf : Continuous f) (x : 𝔸) : f (exp 𝕂 x) = exp 𝕂 (f x) :=\n  map_exp_of_mem_ball f hf x <| (exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n#align map_exp map_exp\n\n",
 "is_unit_exp_of_mem_ball":
 "theorem is_unit_exp_of_mem_ball [CharZero 𝕂] {x : 𝔸} (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    IsUnit (exp 𝕂 x) :=\n  @isUnit_of_invertible _ _ _ (invertible_exp_of_mem_ball hx)\n#align is_unit_exp_of_mem_ball is_unit_exp_of_mem_ball\n\n",
 "is_unit_exp":
 "theorem is_unit_exp (x : 𝔸) : IsUnit (exp 𝕂 x) :=\n  is_unit_exp_of_mem_ball <| (exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n#align is_unit_exp is_unit_exp\n\n",
 "inverse_exp":
 "theorem ring.inverse_exp (x : 𝔸) : Ring.inverse (exp 𝕂 x) = exp 𝕂 (-x) :=\n  letI := invertible_exp 𝕂 x\n  Ring.inverse_invertible _\n#align ring.inverse_exp ring.inverse_exp\n\n",
 "inv_of_exp_of_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\ntheorem inv_of_exp_of_mem_ball [CharZero 𝕂] {x : 𝔸} (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius)\n    [Invertible (exp 𝕂 x)] : («expr⅟») (exp 𝕂 x) = exp 𝕂 (-x) :=\n  by\n  letI := invertible_exp_of_mem_ball hx\n  convert(rfl : («expr⅟») (exp 𝕂 x) = _)\n#align inv_of_exp_of_mem_ball inv_of_exp_of_mem_ball\n\n",
 "inv_of_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\ntheorem inv_of_exp (x : 𝔸) [Invertible (exp 𝕂 x)] : («expr⅟») (exp 𝕂 x) = exp 𝕂 (-x) :=\n  inv_of_exp_of_mem_ball <| (exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n#align inv_of_exp inv_of_exp\n\n",
 "has_fpower_series_on_ball_exp_of_radius_pos":
 "theorem has_fpower_series_on_ball_exp_of_radius_pos (h : 0 < (exp_series 𝕂 𝔸).radius) :\n    has_fpower_series_on_ball (exp 𝕂) (exp_series 𝕂 𝔸) 0 (exp_series 𝕂 𝔸).radius :=\n  (exp_series 𝕂 𝔸).has_fpower_series_on_ball h\n#align has_fpower_series_on_ball_exp_of_radius_pos has_fpower_series_on_ball_exp_of_radius_pos\n\n",
 "has_fpower_series_at_exp_zero_of_radius_pos":
 "theorem has_fpower_series_at_exp_zero_of_radius_pos (h : 0 < (exp_series 𝕂 𝔸).radius) :\n    has_fpower_series_at (exp 𝕂) (exp_series 𝕂 𝔸) 0 :=\n  (has_fpower_series_on_ball_exp_of_radius_pos h).has_fpower_series_at\n#align has_fpower_series_at_exp_zero_of_radius_pos has_fpower_series_at_exp_zero_of_radius_pos\n\n",
 "fst_exp":
 "@[simp]\ntheorem prod.fst_exp [CompleteSpace 𝔹] (x : 𝔸 × 𝔹) : (exp 𝕂 x).fst = exp 𝕂 x.fst :=\n  map_exp _ (RingHom.fst 𝔸 𝔹) continuous_fst x\n#align prod.fst_exp prod.fst_exp\n\n",
 "exp_ℝ_ℂ_eq_exp_ℂ_ℂ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem exp_ℝ_ℂ_eq_exp_ℂ_ℂ : (exp (exprℝ) : exprℂ → exprℂ) = exp (exprℂ) :=\n  exp_eq_exp (exprℝ) (exprℂ) (exprℂ)\n#align exp_ℝ_ℂ_eq_exp_ℂ_ℂ exp_ℝ_ℂ_eq_exp_ℂ_ℂ\n\n",
 "exp_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem exp_zsmul (z : ℤ) (x : 𝔸) : exp 𝕂 («expr • » z x) = exp 𝕂 x ^ z :=\n  by\n  obtain ⟨n, rfl | rfl⟩ := z.eq_coe_or_neg\n  · rw [zpow_ofNat, coe_nat_zsmul, exp_nsmul]\n  · rw [zpow_neg, zpow_ofNat, neg_smul, exp_neg, coe_nat_zsmul, exp_nsmul]\n#align exp_zsmul exp_zsmul\n\n",
 "exp_zero":
 "@[simp]\ntheorem exp_zero [T2Space 𝔸] : exp 𝕂 (0 : 𝔸) = 1 := by\n  simp_rw [exp_eq_tsum, ← exp_series_apply_eq, exp_series_apply_zero, tsum_pi_single]\n#align exp_zero exp_zero\n\n",
 "exp_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem exp_unop [T2Space 𝔸] (x : «expr ᵐᵒᵖ» 𝔸) : exp 𝕂 (MulOpposite.unop x) = MulOpposite.unop (exp 𝕂 x) := by\n  simp_rw [exp, exp_series_sum_eq, ← MulOpposite.unop_pow, ← MulOpposite.unop_smul, tsum_unop]\n#align exp_unop exp_unop\n\n",
 "exp_units_conj'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem exp_units_conj' (y : «expr ˣ» 𝔸) (x : 𝔸) : exp 𝕂 (↑y⁻¹ * x * y) = ↑y⁻¹ * exp 𝕂 x * y :=\n  exp_units_conj _ _ _\n#align exp_units_conj' exp_units_conj'\n\n",
 "exp_units_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem exp_units_conj (y : «expr ˣ» 𝔸) (x : 𝔸) : exp 𝕂 (y * x * ↑y⁻¹ : 𝔸) = y * exp 𝕂 x * ↑y⁻¹ :=\n  exp_smul _ (ConjAct.toConjAct y) x\n#align exp_units_conj exp_units_conj\n\n",
 "exp_sum_of_commute":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- In a Banach-algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`, if a family of elements `f i` mutually\ncommute then `exp 𝕂 (∑ i, f i) = ∏ i, exp 𝕂 (f i)`. -/\ntheorem exp_sum_of_commute {ι} (s : Finset ι) (f : ι → 𝔸) (h : (s : Set ι).pairwise fun i j => Commute (f i) (f j)) :\n    exp 𝕂 (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) =\n      s.noncomm_prod (fun i => exp 𝕂 (f i)) fun i hi j hj _ => (h.of_refl hi hj).exp 𝕂 :=\n  by\n  classical\n    induction' s using Finset.induction_on with a s ha ih\n    · simp\n    rw [Finset.noncommProd_insert_of_not_mem _ _ _ _ ha, Finset.sum_insert ha, exp_add_of_commute,\n      ih (h.mono <| Finset.subset_insert _ _)]\n    refine' Commute.sum_right _ _ _ fun i hi => _\n    exact h.of_refl (Finset.mem_insert_self _ _) (Finset.mem_insert_of_mem hi)\n#align exp_sum_of_commute exp_sum_of_commute\n\n",
 "exp_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/-- A version of `exp_sum_of_commute` for a commutative Banach-algebra. -/\ntheorem exp_sum {ι} (s : Finset ι) (f : ι → 𝔸) :\n    exp 𝕂 (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) =\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s\n        (exp 𝕂 (f i)) :=\n  by\n  rw [exp_sum_of_commute, Finset.noncommProd_eq_prod]\n  exact fun i hi j hj _ => Commute.all _ _\n#align exp_sum exp_sum\n\n",
 "exp_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem exp_smul {G} [Monoid G] [MulSemiringAction G 𝔸] [ContinuousConstSMul G 𝔸] (g : G) (x : 𝔸) :\n    exp 𝕂 («expr • » g x) = «expr • » g (exp 𝕂 x) :=\n  (map_exp 𝕂 (MulSemiringAction.toRingHom G 𝔸 g) (continuous_const_smul _) x).symm\n#align exp_smul exp_smul\n\n",
 "exp_series_summable_of_mem_ball'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_summable_of_mem_ball' (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    Summable fun n => «expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n) :=\n  summable_of_summable_norm (norm_exp_series_summable_of_mem_ball' x hx)\n#align exp_series_summable_of_mem_ball' exp_series_summable_of_mem_ball'\n\n",
 "exp_series_summable_of_mem_ball":
 "theorem exp_series_summable_of_mem_ball (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    Summable fun n => exp_series 𝕂 𝔸 n fun _ => x :=\n  summable_of_summable_norm (norm_exp_series_summable_of_mem_ball x hx)\n#align exp_series_summable_of_mem_ball exp_series_summable_of_mem_ball\n\n",
 "exp_series_summable'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_summable' (x : 𝔸) : Summable fun n => «expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n) :=\n  summable_of_summable_norm (norm_exp_series_summable' x)\n#align exp_series_summable' exp_series_summable'\n\n",
 "exp_series_summable":
 "theorem exp_series_summable (x : 𝔸) : Summable fun n => exp_series 𝕂 𝔸 n fun _ => x :=\n  summable_of_summable_norm (norm_exp_series_summable x)\n#align exp_series_summable exp_series_summable\n\n",
 "exp_series_sum_eq_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_sum_eq_div (x : 𝔸) :\n    (exp_series 𝕂 𝔸).sum x =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (x ^ n / nat.factorial n) :=\n  tsum_congr (exp_series_apply_eq_div x)\n#align exp_series_sum_eq_div exp_series_sum_eq_div\n\n",
 "exp_series_sum_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_sum_eq (x : 𝔸) :\n    (exp_series 𝕂 𝔸).sum x =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        («expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n)) :=\n  tsum_congr fun n => exp_series_apply_eq x n\n#align exp_series_sum_eq exp_series_sum_eq\n\n",
 "exp_series_radius_pos":
 "theorem exp_series_radius_pos : 0 < (exp_series 𝕂 𝔸).radius :=\n  by\n  rw [exp_series_radius_eq_top]\n  exact WithTop.zero_lt_top\n#align exp_series_radius_pos exp_series_radius_pos\n\n",
 "exp_series_radius_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- In a normed algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`, the series defining the exponential map\nhas an infinite radius of convergence. -/\ntheorem exp_series_radius_eq_top : (exp_series 𝕂 𝔸).radius = ennreal.top :=\n  by\n  refine' (exp_series 𝕂 𝔸).radius_eq_top_of_summable_norm fun r => _\n  refine' summable_of_norm_bounded_eventually _ (Real.summable_pow_div_factorial r) _\n  filter_upwards [eventually_cofinite_ne 0]with n hn\n  rw [norm_mul, norm_norm (exp_series 𝕂 𝔸 n), exp_series, norm_smul, norm_inv, norm_pow, NNReal.norm_eq, norm_eq_abs,\n    abs_cast_nat, mul_comm, ← mul_assoc, ← div_eq_mul_inv]\n  have : «expr‖ ‖» (ContinuousMultilinearMap.mkPiAlgebraFin 𝕂 n 𝔸) ≤ 1 :=\n    norm_mk_pi_algebra_fin_le_of_pos (nat.pos_of_ne_zero hn)\n  exact mul_le_of_le_one_right (div_nonneg (pow_nonneg r.coe_nonneg n) (nat.factorial n).cast_nonneg) this\n#align exp_series_radius_eq_top exp_series_radius_eq_top\n\n",
 "exp_series_has_sum_exp_of_mem_ball'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_has_sum_exp_of_mem_ball' (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    HasSum (fun n => «expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n)) (exp 𝕂 x) :=\n  by\n  rw [← exp_series_apply_eq']\n  exact exp_series_has_sum_exp_of_mem_ball x hx\n#align exp_series_has_sum_exp_of_mem_ball' exp_series_has_sum_exp_of_mem_ball'\n\n",
 "exp_series_has_sum_exp_of_mem_ball":
 "theorem exp_series_has_sum_exp_of_mem_ball (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    HasSum (fun n => exp_series 𝕂 𝔸 n fun _ => x) (exp 𝕂 x) :=\n  formal_multilinear_series.has_sum (exp_series 𝕂 𝔸) hx\n#align exp_series_has_sum_exp_of_mem_ball exp_series_has_sum_exp_of_mem_ball\n\n",
 "exp_series_has_sum_exp'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_has_sum_exp' (x : 𝔸) : HasSum (fun n => «expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n)) (exp 𝕂 x) :=\n  exp_series_has_sum_exp_of_mem_ball' x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align exp_series_has_sum_exp' exp_series_has_sum_exp'\n\n",
 "exp_series_has_sum_exp":
 "theorem exp_series_has_sum_exp (x : 𝔸) : HasSum (fun n => exp_series 𝕂 𝔸 n fun _ => x) (exp 𝕂 x) :=\n  exp_series_has_sum_exp_of_mem_ball x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align exp_series_has_sum_exp exp_series_has_sum_exp\n\n",
 "exp_series_eq_exp_series":
 "/-- If a normed ring `𝔸` is a normed algebra over two fields, then they define the same\n`exp_series` on `𝔸`. -/\ntheorem exp_series_eq_exp_series (n : ℕ) (x : 𝔸) : (exp_series 𝕂 𝔸 n fun _ => x) = exp_series 𝕂' 𝔸 n fun _ => x := by\n  rw [exp_series_apply_eq, exp_series_apply_eq, inv_nat_cast_smul_eq 𝕂 𝕂']\n#align exp_series_eq_exp_series exp_series_eq_exp_series\n\n",
 "exp_series_div_summable_of_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_div_summable_of_mem_ball [CompleteSpace 𝔸] (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) : Summable fun n => x ^ n / nat.factorial n :=\n  summable_of_summable_norm (norm_exp_series_div_summable_of_mem_ball 𝕂 x hx)\n#align exp_series_div_summable_of_mem_ball exp_series_div_summable_of_mem_ball\n\n",
 "exp_series_div_summable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_div_summable (x : 𝔸) : Summable fun n => x ^ n / nat.factorial n :=\n  summable_of_summable_norm (norm_exp_series_div_summable 𝕂 x)\n#align exp_series_div_summable exp_series_div_summable\n\n",
 "exp_series_div_has_sum_exp_of_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_div_has_sum_exp_of_mem_ball [CompleteSpace 𝔸] (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) : HasSum (fun n => x ^ n / nat.factorial n) (exp 𝕂 x) :=\n  by\n  rw [← exp_series_apply_eq_div' x]\n  exact exp_series_has_sum_exp_of_mem_ball x hx\n#align exp_series_div_has_sum_exp_of_mem_ball exp_series_div_has_sum_exp_of_mem_ball\n\n",
 "exp_series_div_has_sum_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_div_has_sum_exp (x : 𝔸) : HasSum (fun n => x ^ n / nat.factorial n) (exp 𝕂 x) :=\n  exp_series_div_has_sum_exp_of_mem_ball 𝕂 x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align exp_series_div_has_sum_exp exp_series_div_has_sum_exp\n\n",
 "exp_series_apply_zero":
 "theorem exp_series_apply_zero (n : ℕ) : (exp_series 𝕂 𝔸 n fun _ => (0 : 𝔸)) = Pi.single 0 1 n :=\n  by\n  rw [exp_series_apply_eq]\n  cases n\n  · rw [pow_zero, Nat.factorial_zero, Nat.cast_one, inv_one, one_smul, Pi.single_eq_same]\n  · rw [zero_pow (nat.succ_pos _), smul_zero, Pi.single_eq_of_ne n.succ_ne_zero]\n#align exp_series_apply_zero exp_series_apply_zero\n\n",
 "exp_series_apply_eq_div'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_apply_eq_div' (x : 𝔸) : (fun n => exp_series 𝕂 𝔸 n fun _ => x) = fun n => x ^ n / nat.factorial n :=\n  funext (exp_series_apply_eq_div x)\n#align exp_series_apply_eq_div' exp_series_apply_eq_div'\n\n",
 "exp_series_apply_eq_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_apply_eq_div (x : 𝔸) (n : ℕ) : (exp_series 𝕂 𝔸 n fun _ => x) = x ^ n / nat.factorial n := by\n  rw [div_eq_mul_inv, ← (Nat.cast_commute (nat.factorial n) (x ^ n)).inv_left₀.eq, ← smul_eq_mul, exp_series_apply_eq,\n    inv_nat_cast_smul_eq _ _ _ _]\n#align exp_series_apply_eq_div exp_series_apply_eq_div\n\n",
 "exp_series_apply_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_series_apply_eq' (x : 𝔸) :\n    (fun n => exp_series 𝕂 𝔸 n fun _ => x) = fun n => «expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n) :=\n  funext (exp_series_apply_eq x)\n#align exp_series_apply_eq' exp_series_apply_eq'\n\n",
 "exp_series_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-\nCopyright (c) 2021 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anatole Dedecker, Eric Wieser\n-/\ntheorem exp_series_apply_eq (x : 𝔸) (n : ℕ) :\n    (exp_series 𝕂 𝔸 n fun _ => x) = «expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n) := by simp [exp_series]\n#align exp_series_apply_eq exp_series_apply_eq\n\n",
 "exp_right":
 "theorem commute.exp_right [T2Space 𝔸] {x y : 𝔸} (h : Commute x y) : Commute x (exp 𝕂 y) :=\n  by\n  rw [exp_eq_tsum]\n  exact Commute.tsum_right x fun n => (h.pow_right n).smul_right _\n#align commute.exp_right commute.exp_right\n\n",
 "exp_op":
 "@[simp]\ntheorem exp_op [T2Space 𝔸] (x : 𝔸) : exp 𝕂 (MulOpposite.op x) = MulOpposite.op (exp 𝕂 x) := by\n  simp_rw [exp, exp_series_sum_eq, ← MulOpposite.op_pow, ← MulOpposite.op_smul, tsum_op]\n#align exp_op exp_op\n\n",
 "exp_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem exp_nsmul (n : ℕ) (x : 𝔸) : exp 𝕂 («expr • » n x) = exp 𝕂 x ^ n :=\n  by\n  induction' n with n ih\n  · rw [zero_smul, pow_zero, exp_zero]\n  · rw [succ_nsmul, pow_succ, exp_add_of_commute ((Commute.refl x).smul_right n), ih]\n#align exp_nsmul exp_nsmul\n\n",
 "exp_neg_of_mem_ball":
 "theorem exp_neg_of_mem_ball [CharZero 𝕂] [CompleteSpace 𝔸] {x : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) : exp 𝕂 (-x) = (exp 𝕂 x)⁻¹ :=\n  letI := invertible_exp_of_mem_ball hx\n  invOf_eq_inv (exp 𝕂 x)\n#align exp_neg_of_mem_ball exp_neg_of_mem_ball\n\n",
 "exp_neg":
 "theorem exp_neg (x : 𝔸) : exp 𝕂 (-x) = (exp 𝕂 x)⁻¹ :=\n  exp_neg_of_mem_ball <| (exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n#align exp_neg exp_neg\n\n",
 "exp_mem_unitary_of_mem_skew_adjoint":
 "theorem exp_mem_unitary_of_mem_skew_adjoint [StarRing 𝔸] [ContinuousStar 𝔸] {x : 𝔸} (h : x ∈ skewAdjoint 𝔸) :\n    exp 𝕂 x ∈ unitary 𝔸 := by\n  rw [unitary.mem_iff, star_exp, skew_adjoint.mem_iff.mp h, ← exp_add_of_commute (Commute.refl x).neg_left, ←\n    exp_add_of_commute (Commute.refl x).neg_right, add_left_neg, add_right_neg, exp_zero, and_self_iff]\n#align exp_mem_unitary_of_mem_skew_adjoint exp_mem_unitary_of_mem_skew_adjoint\n\n",
 "exp_left":
 "theorem commute.exp_left [T2Space 𝔸] {x y : 𝔸} (h : Commute x y) : Commute (exp 𝕂 x) y :=\n  (h.symm.exp_right 𝕂).symm\n#align commute.exp_left commute.exp_left\n\n",
 "exp_has_fpower_series_on_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem exp_has_fpower_series_on_ball : has_fpower_series_on_ball (exp 𝕂) (exp_series 𝕂 𝔸) 0 (ennreal.top) :=\n  exp_series_radius_eq_top 𝕂 𝔸 ▸ has_fpower_series_on_ball_exp_of_radius_pos (exp_series_radius_pos _ _)\n#align exp_has_fpower_series_on_ball exp_has_fpower_series_on_ball\n\n",
 "exp_has_fpower_series_at_zero":
 "theorem exp_has_fpower_series_at_zero : has_fpower_series_at (exp 𝕂) (exp_series 𝕂 𝔸) 0 :=\n  exp_has_fpower_series_on_ball.has_fpower_series_at\n#align exp_has_fpower_series_at_zero exp_has_fpower_series_at_zero\n\n",
 "exp_eq_tsum_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_eq_tsum_div :\n    exp 𝕂 = fun x : 𝔸 =>\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (x ^ n / nat.factorial n) :=\n  funext exp_series_sum_eq_div\n#align exp_eq_tsum_div exp_eq_tsum_div\n\n",
 "exp_eq_tsum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem exp_eq_tsum :\n    exp 𝕂 = fun x : 𝔸 =>\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        («expr • » ((nat.factorial n)⁻¹ : 𝕂) (x ^ n)) :=\n  funext exp_series_sum_eq\n#align exp_eq_tsum exp_eq_tsum\n\n",
 "exp_eq_exp":
 "/-- If a normed ring `𝔸` is a normed algebra over two fields, then they define the same\nexponential function on `𝔸`. -/\ntheorem exp_eq_exp : (exp 𝕂 : 𝔸 → 𝔸) = exp 𝕂' := by\n  ext\n  rw [exp, exp]\n  refine' tsum_congr fun n => _\n  rw [exp_series_eq_exp_series 𝕂 𝕂' 𝔸 n x]\n#align exp_eq_exp exp_eq_exp\n\n",
 "exp_def":
 "theorem pi.exp_def {ι : Type _} {𝔸 : ι → Type _} [Fintype ι] [∀ i, NormedRing (𝔸 i)] [∀ i, NormedAlgebra 𝕂 (𝔸 i)]\n    [∀ i, CompleteSpace (𝔸 i)] (x : ∀ i, 𝔸 i) : exp 𝕂 x = fun i => exp 𝕂 (x i) :=\n  funext <| pi.exp_apply 𝕂 x\n#align pi.exp_def pi.exp_def\n\n",
 "exp_continuous":
 "theorem exp_continuous : Continuous (exp 𝕂 : 𝔸 → 𝔸) :=\n  by\n  rw [continuous_iff_continuousOn_univ, ← Metric.eball_top_eq_univ (0 : 𝔸), ← exp_series_radius_eq_top 𝕂 𝔸]\n  exact continuous_on_exp\n#align exp_continuous exp_continuous\n\n",
 "exp_conj'":
 "theorem exp_conj' (y : 𝔸) (x : 𝔸) (hy : y ≠ 0) : exp 𝕂 (y⁻¹ * x * y) = y⁻¹ * exp 𝕂 x * y :=\n  exp_units_conj' _ (Units.mk0 y hy) x\n#align exp_conj' exp_conj'\n\n",
 "exp_conj":
 "theorem exp_conj (y : 𝔸) (x : 𝔸) (hy : y ≠ 0) : exp 𝕂 (y * x * y⁻¹) = y * exp 𝕂 x * y⁻¹ :=\n  exp_units_conj _ (Units.mk0 y hy) x\n#align exp_conj exp_conj\n\n",
 "exp_apply":
 "@[simp]\ntheorem pi.exp_apply {ι : Type _} {𝔸 : ι → Type _} [Fintype ι] [∀ i, NormedRing (𝔸 i)] [∀ i, NormedAlgebra 𝕂 (𝔸 i)]\n    [∀ i, CompleteSpace (𝔸 i)] (x : ∀ i, 𝔸 i) (i : ι) : exp 𝕂 x i = exp 𝕂 (x i) :=\n  letI-- Lean struggles to infer this instance due to it wanting `[Π i, semi_normed_ring (𝔸 i)]`\n   : NormedAlgebra 𝕂 (∀ i, 𝔸 i) := Pi.normedAlgebra _\n  map_exp _ (Pi.evalRingHom 𝔸 i) (continuous_apply _) x\n#align pi.exp_apply pi.exp_apply\n\n",
 "exp_analytic":
 "theorem exp_analytic (x : 𝔸) : analytic_at 𝕂 (exp 𝕂) x :=\n  analytic_at_exp_of_mem_ball x ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align exp_analytic exp_analytic\n\n",
 "exp_add_of_mem_ball":
 "/-- In a commutative Banach-algebra `𝔸` over a normed field `𝕂` of characteristic zero,\n`exp 𝕂 (x+y) = (exp 𝕂 x) * (exp 𝕂 y)` for all `x`, `y` in the disk of convergence. -/\ntheorem exp_add_of_mem_ball [CharZero 𝕂] {x y : 𝔸} (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius)\n    (hy : y ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  exp_add_of_commute_of_mem_ball (Commute.all x y) hx hy\n#align exp_add_of_mem_ball exp_add_of_mem_ball\n\n",
 "exp_add_of_commute_of_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- In a Banach-algebra `𝔸` over a normed field `𝕂` of characteristic zero, if `x` and `y` are\nin the disk of convergence and commute, then `exp 𝕂 (x + y) = (exp 𝕂 x) * (exp 𝕂 y)`. -/\ntheorem exp_add_of_commute_of_mem_ball [CharZero 𝕂] {x y : 𝔸} (hxy : Commute x y)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) (hy : y ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  by\n  rw [exp_eq_tsum,\n    tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm (norm_exp_series_summable_of_mem_ball' x hx)\n      (norm_exp_series_summable_of_mem_ball' y hy)]\n  dsimp only\n  conv_lhs =>\n    congr\n    ext\n    rw [hxy.add_pow' _, Finset.smul_sum]\n  refine' tsum_congr fun n => Finset.sum_congr rfl fun kl hkl => _\n  rw [nsmul_eq_smul_cast 𝕂, smul_smul, smul_mul_smul, ← finset.nat.mem_antidiagonal.mp hkl, Nat.cast_add_choose,\n    finset.nat.mem_antidiagonal.mp hkl]\n  congr 1\n  have : (nat.factorial n : 𝕂) ≠ 0 := nat.cast_ne_zero.mpr n.factorial_ne_zero\n  field_simp [this]\n#align exp_add_of_commute_of_mem_ball exp_add_of_commute_of_mem_ball\n\n",
 "exp_add_of_commute":
 "/-- In a Banach-algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`, if `x` and `y` commute, then\n`exp 𝕂 (x+y) = (exp 𝕂 x) * (exp 𝕂 y)`. -/\ntheorem exp_add_of_commute {x y : 𝔸} (hxy : Commute x y) : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  exp_add_of_commute_of_mem_ball hxy ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n    ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align exp_add_of_commute exp_add_of_commute\n\n",
 "exp_add":
 "/-- In a commutative Banach-algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`,\n`exp 𝕂 (x+y) = (exp 𝕂 x) * (exp 𝕂 y)`. -/\ntheorem exp_add {x y : 𝔸} : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  exp_add_of_mem_ball ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n    ((exp_series_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n#align exp_add exp_add\n\n",
 "exp":
 "theorem commute.exp [T2Space 𝔸] {x y : 𝔸} (h : Commute x y) : Commute (exp 𝕂 x) (exp 𝕂 y) :=\n  (h.exp_left _).exp_right _\n#align commute.exp commute.exp\n\n",
 "continuous_on_exp":
 "theorem continuous_on_exp : ContinuousOn (exp 𝕂 : 𝔸 → 𝔸) (EMetric.ball 0 (exp_series 𝕂 𝔸).radius) :=\n  formal_multilinear_series.continuous_on\n#align continuous_on_exp continuous_on_exp\n\n",
 "analytic_at_exp_of_mem_ball":
 "theorem analytic_at_exp_of_mem_ball (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (exp_series 𝕂 𝔸).radius) :\n    analytic_at 𝕂 (exp 𝕂) x := by\n  by_cases h : (exp_series 𝕂 𝔸).radius = 0\n  · rw [h] at hx\n    exact (ENNReal.not_lt_zero hx).elim\n  · have h := pos_iff_ne_zero.mpr h\n    exact (has_fpower_series_on_ball_exp_of_radius_pos h).analytic_at_of_mem hx\n#align analytic_at_exp_of_mem_ball analytic_at_exp_of_mem_ball\n\n",
 "algebra_map_exp_comm_of_mem_ball":
 "theorem algebra_map_exp_comm_of_mem_ball [CompleteSpace 𝕂] (x : 𝕂)\n    (hx : x ∈ EMetric.ball (0 : 𝕂) (exp_series 𝕂 𝕂).radius) : algebraMap 𝕂 𝔸 (exp 𝕂 x) = exp 𝕂 (algebraMap 𝕂 𝔸 x) :=\n  map_exp_of_mem_ball _ (continuous_algebraMap 𝕂 𝔸) _ hx\n#align algebra_map_exp_comm_of_mem_ball algebra_map_exp_comm_of_mem_ball\n\n",
 "algebra_map_exp_comm":
 "theorem algebra_map_exp_comm (x : 𝕂) : algebraMap 𝕂 𝔸 (exp 𝕂 x) = exp 𝕂 (algebraMap 𝕂 𝔸 x) :=\n  algebra_map_exp_comm_of_mem_ball x <| (exp_series_radius_eq_top 𝕂 𝕂).symm ▸ edist_lt_top _ _\n#align algebra_map_exp_comm algebra_map_exp_comm\n\n"}