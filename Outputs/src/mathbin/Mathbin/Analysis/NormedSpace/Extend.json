{"norm_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprabs𝕜 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprabs𝕜 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprabs𝕜 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprabs𝕜 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprabs𝕜 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The norm of the extension is bounded by `‖fr‖`. -/\ntheorem norm_bound [normed_space (exprℝ) F] [IsScalarTower (exprℝ) 𝕜 F] (fr : «expr →L[ ] » F (exprℝ) (exprℝ)) (x : F) :\n    «expr‖ ‖» (fr.to_linear_map.extend_to_𝕜' x : 𝕜) ≤ «expr‖ ‖» fr * «expr‖ ‖» x :=\n  by\n  let lm : «expr →ₗ[ ] » F 𝕜 𝕜 := fr.to_linear_map.extend_to_𝕜'\n  classical\n    -- We aim to find a `t : 𝕜` such that\n    -- * `lm (t • x) = fr (t • x)` (so `lm (t • x) = t * lm x ∈ ℝ`)\n    -- * `‖lm x‖ = ‖lm (t • x)‖` (so `t.abs` must be 1)\n    -- If `lm x ≠ 0`, `(lm x)⁻¹` satisfies the first requirement, and after normalizing, it\n    -- satisfies the second.\n    -- (If `lm x = 0`, the goal is trivial.)\n    by_cases h : lm x = 0\n    · rw [h, norm_zero]\n      apply mul_nonneg <;> exact norm_nonneg _\n    let fx := (lm x)⁻¹\n    let t := fx / ((exprabs𝕜) fx : 𝕜)\n    have ht : (exprabs𝕜) t = 1 := by\n      field_simp [abs_of_real, of_real_inv, is_R_or_C.abs_inv, is_R_or_C.abs_div, is_R_or_C.abs_abs, h]\n    have h1 : (fr («expr • » t x) : 𝕜) = lm («expr • » t x) :=\n      by\n      apply ext\n      · simp only [lm, of_real_re, linear_map.extend_to_𝕜'_apply, mul_re, I_re, of_real_im, zero_mul,\n          AddMonoidHom.map_sub, sub_zero, mul_zero]\n        rfl\n      · symm\n        calc\n          im (lm («expr • » t x)) = im (t * lm x) := by rw [lm.map_smul, smul_eq_mul]\n          _ = im ((lm x)⁻¹ / (exprabs𝕜) (lm x)⁻¹ * lm x) := rfl\n          _ = im (1 / ((exprabs𝕜) (lm x)⁻¹ : 𝕜)) := by rw [div_mul_eq_mul_div, inv_mul_cancel h]\n          _ = 0 := by rw [← of_real_one, ← of_real_div, of_real_im]\n          _ = im (fr («expr • » t x) : 𝕜) := by rw [of_real_im]\n          \n    calc\n      «expr‖ ‖» (lm x) = (exprabs𝕜) t * «expr‖ ‖» (lm x) := by rw [ht, one_mul]\n      _ = «expr‖ ‖» (t * lm x) := by rw [← norm_eq_abs, norm_mul]\n      _ = «expr‖ ‖» (lm («expr • » t x)) := by rw [← smul_eq_mul, lm.map_smul]\n      _ = «expr‖ ‖» (fr («expr • » t x) : 𝕜) := by rw [h1]\n      _ = «expr‖ ‖» (fr («expr • » t x)) := by rw [norm_eq_abs, abs_of_real, norm_eq_abs, abs_to_real]\n      _ ≤ «expr‖ ‖» fr * «expr‖ ‖» («expr • » t x) := continuous_linear_map.le_op_norm _ _\n      _ = «expr‖ ‖» fr * («expr‖ ‖» t * «expr‖ ‖» x) := by rw [norm_smul]\n      _ ≤ «expr‖ ‖» fr * «expr‖ ‖» x := by rw [norm_eq_abs, ht, one_mul]\n      \n#align norm_bound norm_bound\n\n",
 "extend_to_𝕜_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_linear_map.extend_to_𝕜_apply (fr : «expr →L[ ] » (restrict_scalars (exprℝ) 𝕜 F) (exprℝ) (exprℝ))\n    (x : F) : fr.extend_to_𝕜 x = (fr x : 𝕜) - (I : 𝕜) * fr («expr • » (I : 𝕜) x : _) :=\n  rfl\n#align continuous_linear_map.extend_to_𝕜_apply continuous_linear_map.extend_to_𝕜_apply\n\n",
 "extend_to_𝕜'_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_linear_map.extend_to_𝕜'_apply [normed_space (exprℝ) F] [IsScalarTower (exprℝ) 𝕜 F]\n    (fr : «expr →L[ ] » F (exprℝ) (exprℝ)) (x : F) :\n    fr.extend_to_𝕜' x = (fr x : 𝕜) - (I : 𝕜) * fr («expr • » (I : 𝕜) x) :=\n  rfl\n#align continuous_linear_map.extend_to_𝕜'_apply continuous_linear_map.extend_to_𝕜'_apply\n\n"}