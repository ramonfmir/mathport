{"smooth_barycentric_coord":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →A[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem smooth_barycentric_coord (b : affine_basis ι 𝕜 E) (i : ι) : cont_diff 𝕜 («expr⊤») (b.coord i) :=\n  (⟨b.coord i, continuous_barycentric_coord b i⟩ : «expr →A[ ] » E 𝕜 𝕜).cont_diff\n#align smooth_barycentric_coord smooth_barycentric_coord\n\n",
 "is_open_map_barycentric_coord":
 "/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\ntheorem is_open_map_barycentric_coord [nontrivial ι] (b : affine_basis ι 𝕜 P) (i : ι) : is_open_map (b.coord i) :=\n  affine_map.is_open_map_linear_iff.mp <|\n    (b.coord i).linear.is_open_map_of_finite_dimensional <| (b.coord i).linear_surjective_iff.mpr (b.surjective_coord i)\n#align is_open_map_barycentric_coord is_open_map_barycentric_coord\n\n",
 "interior_nonempty_iff_affine_span_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem convex.interior_nonempty_iff_affine_span_eq_top [finite_dimensional (exprℝ) V] {s : set V}\n    (hs : convex (exprℝ) s) : (interior s).nonempty ↔ affine_span (exprℝ) s = «expr⊤» := by\n  rw [← interior_convex_hull_nonempty_iff_affine_span_eq_top, hs.convex_hull_eq]\n#align convex.interior_nonempty_iff_affine_span_eq_top convex.interior_nonempty_iff_affine_span_eq_top\n\n",
 "interior_convex_hull_nonempty_iff_affine_span_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem interior_convex_hull_nonempty_iff_affine_span_eq_top [finite_dimensional (exprℝ) V] {s : set V} :\n    (interior (convex_hull (exprℝ) s)).nonempty ↔ affine_span (exprℝ) s = «expr⊤» :=\n  by\n  refine' ⟨affine_span_eq_top_of_nonempty_interior, fun h => _⟩\n  obtain ⟨t, hts, b, hb⟩ := affine_basis.exists_affine_subbasis h\n  suffices (interior (convex_hull (exprℝ) (range b.points))).nonempty\n    by\n    rw [hb, Subtype.range_coe_subtype, set_of_mem_eq] at this\n    refine' this.mono _\n    mono*\n  lift t to Finset V using b.finite_set\n  exact ⟨_, b.centroid_mem_interior_convex_hull⟩\n#align interior_convex_hull_nonempty_iff_affine_span_eq_top interior_convex_hull_nonempty_iff_affine_span_eq_top\n\n",
 "interior_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a finite-dimensional normed real vector space, the interior of the convex hull of an\naffine basis is the set of points whose barycentric coordinates are strictly positive with respect\nto this basis.\n\nTODO Restate this result for affine spaces (instead of vector spaces) once the definition of\nconvexity is generalised to this setting. -/\ntheorem affine_basis.interior_convex_hull {ι E : Type _} [Finite ι] [normed_add_comm_group E] [normed_space (exprℝ) E]\n    (b : affine_basis ι (exprℝ) E) : interior (convex_hull (exprℝ) (range b.points)) = { x | ∀ i, 0 < b.coord i x } :=\n  by\n  cases subsingleton_or_nontrivial ι\n  · -- The zero-dimensional case.\n    have : range b.points = univ := affine_subspace.eq_univ_of_subsingleton_span_eq_top (subsingleton_range _) b.tot\n    simp [this]\n  · -- The positive-dimensional case.\n    haveI : finite_dimensional (exprℝ) E := b.finite_dimensional\n    have :\n      convex_hull (exprℝ) (range b.points) =\n        «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          («expr ⁻¹' » (b.coord i) (Ici 0)) :=\n      by\n      rw [convex_hull_affine_basis_eq_nonneg_barycentric b, set_of_forall]\n      rfl\n    ext\n    simp only [this, interior_Inter, ←\n      is_open_map.preimage_interior_eq_interior_preimage (is_open_map_barycentric_coord b _)\n        (continuous_barycentric_coord b _),\n      interior_Ici, mem_Inter, mem_set_of_eq, mem_Ioi, mem_preimage]\n#align affine_basis.interior_convex_hull affine_basis.interior_convex_hull\n\n",
 "exists_subset_affine_independent_span_eq_top":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (s «expr ⊆ » u) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_open.exists_subset_affine_independent_span_eq_top {u : set P} (hu : is_open u) (hne : u.nonempty) :\n    ∃ (s : _)(_ : s ⊆ u), affine_independent (exprℝ) (coe : s → P) ∧ affine_span (exprℝ) s = «expr⊤» :=\n  by\n  rcases hne with ⟨x, hx⟩\n  rcases hu.exists_between_affine_independent_span_eq_top (singleton_subset_iff.mpr hx) (singleton_nonempty _)\n      (affine_independent_of_subsingleton _ _) with\n    ⟨s, -, hsu, hs⟩\n  exact ⟨s, hsu, hs⟩\n#align is_open.exists_subset_affine_independent_span_eq_top is_open.exists_subset_affine_independent_span_eq_top\n\n",
 "exists_between_affine_independent_span_eq_top":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (y «expr ∉ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- Given a set `s` of affine-independent points belonging to an open set `u`, we may extend `s` to\nan affine basis, all of whose elements belong to `u`. -/\ntheorem is_open.exists_between_affine_independent_span_eq_top {s u : set P} (hu : is_open u) (hsu : s ⊆ u)\n    (hne : s.nonempty) (h : affine_independent (exprℝ) (coe : s → P)) :\n    ∃ t : set P, s ⊆ t ∧ t ⊆ u ∧ affine_independent (exprℝ) (coe : t → P) ∧ affine_span (exprℝ) t = «expr⊤» :=\n  by\n  obtain ⟨q, hq⟩ := hne\n  obtain ⟨ε, ε0, hεu⟩ := metric.nhds_basis_closed_ball.mem_iff.1 (hu.mem_nhds <| hsu hq)\n  obtain ⟨t, ht₁, ht₂, ht₃⟩ := exists_subset_affine_independent_affine_span_eq_top h\n  let f : P → P := fun y => line_map q y (ε / dist y q)\n  have hf : ∀ y, f y ∈ u := by\n    refine' fun y => hεu _\n    simp only [f]\n    rw [metric.mem_closed_ball, line_map_apply, dist_vadd_left, norm_smul, real.norm_eq_abs, dist_eq_norm_vsub V y q,\n      abs_div, abs_of_pos ε0, abs_of_nonneg (norm_nonneg _), div_mul_comm]\n    exact mul_le_of_le_one_left ε0.le (div_self_le_one _)\n  have hεyq : ∀ (y) (_ : y ∉ s), ε / dist y q ≠ 0 := fun y hy =>\n    div_ne_zero ε0.ne' (dist_ne_zero.2 (ne_of_mem_of_not_mem hq hy).symm)\n  classical\n    let w : t → «expr ˣ» (exprℝ) := fun p => if hp : (p : P) ∈ s then 1 else Units.mk0 _ (hεyq (↑p) hp)\n    refine' ⟨Set.range fun p : t => line_map q p (w p : exprℝ), _, _, _, _⟩\n    · intro p hp\n      use ⟨p, ht₁ hp⟩\n      simp [w, hp]\n    · rintro y ⟨⟨p, hp⟩, rfl⟩\n      by_cases hps : p ∈ s <;>\n          simp only [w, hps, line_map_apply_one, Units.val_mk0, dif_neg, dif_pos, not_false_iff, Units.val_one,\n            subtype.coe_mk] <;>\n        [exact hsu hps, exact hf p]\n    · exact (ht₂.units_line_map ⟨q, ht₁ hq⟩ w).range\n    · rw [affine_span_eq_affine_span_line_map_units (ht₁ hq) w, ht₃]\n#align is_open.exists_between_affine_independent_span_eq_top is_open.exists_between_affine_independent_span_eq_top\n\n",
 "continuous_barycentric_coord":
 "@[continuity]\ntheorem continuous_barycentric_coord (i : ι) : continuous (b.coord i) :=\n  (b.coord i).continuous_of_finite_dimensional\n#align continuous_barycentric_coord continuous_barycentric_coord\n\n",
 "centroid_mem_interior_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem affine_basis.centroid_mem_interior_convex_hull {ι} [fintype ι] (b : affine_basis ι (exprℝ) V) :\n    finset.univ.centroid (exprℝ) b.points ∈ interior (convex_hull (exprℝ) (range b.points)) :=\n  by\n  haveI := b.nonempty\n  simp only [b.interior_convex_hull, mem_set_of_eq, b.coord_apply_centroid (finset.mem_univ _), inv_pos, nat.cast_pos,\n    finset.card_pos, finset.univ_nonempty, forall_true_iff]\n#align affine_basis.centroid_mem_interior_convex_hull affine_basis.centroid_mem_interior_convex_hull\n\n",
 "affine_span_eq_top_of_nonempty_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem affine_span_eq_top_of_nonempty_interior {s : set V} (hs : (interior <| convex_hull (exprℝ) s).nonempty) :\n    affine_span (exprℝ) s = «expr⊤» :=\n  top_unique <|\n    is_open_interior.affine_span_eq_top hs ▸ (affine_span_mono _ interior_subset).trans_eq (affine_span_convex_hull _)\n#align affine_span_eq_top_of_nonempty_interior affine_span_eq_top_of_nonempty_interior\n\n",
 "affine_span_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- The affine span of a nonempty open set is `⊤`. -/\ntheorem is_open.affine_span_eq_top {u : set P} (hu : is_open u) (hne : u.nonempty) : affine_span (exprℝ) u = «expr⊤» :=\n  let ⟨s, hsu, hs, hs'⟩ := hu.exists_subset_affine_independent_span_eq_top hne\n  top_unique <| hs' ▸ affine_span_mono _ hsu\n#align is_open.affine_span_eq_top is_open.affine_span_eq_top\n\n"}