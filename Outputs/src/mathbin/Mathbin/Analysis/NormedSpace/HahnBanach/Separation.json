{"separate_convex_open_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ.[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2022 Bhavik Mehta All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta, Yaël Dillies\n-/\n/-- Given a set `s` which is a convex neighbourhood of `0` and a point `x₀` outside of it, there is\na continuous linear functional `f` separating `x₀` and `s`, in the sense that it sends `x₀` to 1 and\nall of `s` to values strictly below `1`. -/\ntheorem separate_convex_open_set [topological_space E] [add_comm_group E] [topological_add_group E] [Module (exprℝ) E]\n    [has_continuous_smul (exprℝ) E] {s : set E} (hs₀ : (0 : E) ∈ s) (hs₁ : convex (exprℝ) s) (hs₂ : is_open s) {x₀ : E}\n    (hx₀ : x₀ ∉ s) : ∃ f : «expr →L[ ] » E (exprℝ) (exprℝ), f x₀ = 1 ∧ ∀ x ∈ s, f x < 1 :=\n  by\n  let f : «expr →ₗ.[ ] » E (exprℝ) (exprℝ) := linear_pmap.mk_span_singleton x₀ 1 (ne_of_mem_of_not_mem hs₀ hx₀).symm\n  obtain ⟨φ, hφ₁, hφ₂⟩ :=\n    exists_extension_of_le_sublinear f (gauge s) (fun c hc => gauge_smul_of_nonneg hc.le)\n      (gauge_add_le hs₁ <| absorbent_nhds_zero <| hs₂.mem_nhds hs₀) _\n  have hφ₃ : φ x₀ = 1 := by\n    rw [← submodule.coe_mk x₀ (submodule.mem_span_singleton_self _), hφ₁, linear_pmap.mk_span_singleton'_apply_self]\n  have hφ₄ : ∀ x ∈ s, φ x < 1 := fun x hx => (hφ₂ x).trans_lt (gauge_lt_one_of_mem_of_open hs₁ hs₀ hs₂ hx)\n  · refine' ⟨⟨φ, _⟩, hφ₃, hφ₄⟩\n    refine'\n      φ.continuous_of_nonzero_on_open _ (hs₂.vadd (-x₀)) (nonempty.vadd_set ⟨0, hs₀⟩)\n        (vadd_set_subset_iff.mpr fun x hx => _)\n    change φ (-x₀ + x) ≠ 0\n    rw [map_add, map_neg]\n    specialize hφ₄ x hx\n    linarith\n  rintro ⟨x, hx⟩\n  obtain ⟨y, rfl⟩ := submodule.mem_span_singleton.1 hx\n  rw [linear_pmap.mk_span_singleton'_apply]\n  simp only [mul_one, algebra.id.smul_eq_mul, submodule.coe_mk]\n  obtain h | h := le_or_lt y 0\n  · exact h.trans (gauge_nonneg _)\n  · rw [gauge_smul_of_nonneg h.le, smul_eq_mul, le_mul_iff_one_le_right h]\n    exact one_le_gauge_of_not_mem (hs₁.star_convex hs₀) (absorbent_nhds_zero <| hs₂.mem_nhds hs₀).absorbs hx₀\n    infer_instance\n#align separate_convex_open_set separate_convex_open_set\n\n",
 "geometric_hahn_banach_point_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- See also `normed_space.eq_iff_forall_dual_eq`. -/\ntheorem geometric_hahn_banach_point_point [t1_space E] (hxy : x ≠ y) :\n    ∃ f : «expr →L[ ] » E (exprℝ) (exprℝ), f x < f y :=\n  by\n  obtain ⟨f, s, t, hs, st, ht⟩ :=\n    geometric_hahn_banach_compact_closed (convex_singleton x) is_compact_singleton (convex_singleton y)\n      is_closed_singleton (disjoint_singleton.2 hxy)\n  exact ⟨f, by linarith [hs x rfl, ht y rfl]⟩\n#align geometric_hahn_banach_point_point geometric_hahn_banach_point_point\n\n",
 "geometric_hahn_banach_point_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem geometric_hahn_banach_point_open (ht₁ : convex (exprℝ) t) (ht₂ : is_open t) (disj : x ∉ t) :\n    ∃ f : «expr →L[ ] » E (exprℝ) (exprℝ), ∀ b ∈ t, f x < f b :=\n  let ⟨f, hf⟩ := geometric_hahn_banach_open_point ht₁ ht₂ disj\n  ⟨-f, by simpa⟩\n#align geometric_hahn_banach_point_open geometric_hahn_banach_point_open\n\n",
 "geometric_hahn_banach_point_closed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem geometric_hahn_banach_point_closed (ht₁ : convex (exprℝ) t) (ht₂ : is_closed t) (disj : x ∉ t) :\n    ∃ (f : «expr →L[ ] » E (exprℝ) (exprℝ))(u : exprℝ), f x < u ∧ ∀ b ∈ t, u < f b :=\n  let ⟨f, u, v, ha, hst, hb⟩ :=\n    geometric_hahn_banach_compact_closed (convex_singleton x) is_compact_singleton ht₁ ht₂\n      (disjoint_singleton_left.2 disj)\n  ⟨f, v, hst.trans' <| ha x <| mem_singleton _, hb⟩\n#align geometric_hahn_banach_point_closed geometric_hahn_banach_point_closed\n\n",
 "geometric_hahn_banach_open_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem geometric_hahn_banach_open_point (hs₁ : convex (exprℝ) s) (hs₂ : is_open s) (disj : x ∉ s) :\n    ∃ f : «expr →L[ ] » E (exprℝ) (exprℝ), ∀ a ∈ s, f a < f x :=\n  let ⟨f, s, hs, hx⟩ := geometric_hahn_banach_open hs₁ hs₂ (convex_singleton x) (disjoint_singleton_right.2 disj)\n  ⟨f, fun a ha => lt_of_lt_of_le (hs a ha) (hx x (mem_singleton _))⟩\n#align geometric_hahn_banach_open_point geometric_hahn_banach_open_point\n\n",
 "geometric_hahn_banach_open_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem geometric_hahn_banach_open_open (hs₁ : convex (exprℝ) s) (hs₂ : is_open s) (ht₁ : convex (exprℝ) t)\n    (ht₃ : is_open t) (disj : Disjoint s t) :\n    ∃ (f : «expr →L[ ] » E (exprℝ) (exprℝ))(u : exprℝ), (∀ a ∈ s, f a < u) ∧ ∀ b ∈ t, u < f b :=\n  by\n  obtain rfl | ⟨a₀, ha₀⟩ := s.eq_empty_or_nonempty\n  · exact ⟨0, -1, by simp, fun b hb => by norm_num⟩\n  obtain rfl | ⟨b₀, hb₀⟩ := t.eq_empty_or_nonempty\n  · exact ⟨0, 1, fun a ha => by norm_num, by simp⟩\n  obtain ⟨f, s, hf₁, hf₂⟩ := geometric_hahn_banach_open hs₁ hs₂ ht₁ disj\n  have hf : is_open_map f := by\n    refine' f.is_open_map_of_ne_zero _\n    rintro rfl\n    exact (hf₁ _ ha₀).not_le (hf₂ _ hb₀)\n  refine' ⟨f, s, hf₁, image_subset_iff.1 (_ : «expr '' » f t ⊆ Ioi s)⟩\n  rw [← interior_Ici]\n  refine' interior_maximal (image_subset_iff.2 hf₂) (f.is_open_map_of_ne_zero _ _ ht₃)\n  rintro rfl\n  exact (hf₁ _ ha₀).not_le (hf₂ _ hb₀)\n#align geometric_hahn_banach_open_open geometric_hahn_banach_open_open\n\n",
 "geometric_hahn_banach_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is open,\nthere is a continuous linear functional which separates them. -/\ntheorem geometric_hahn_banach_open (hs₁ : convex (exprℝ) s) (hs₂ : is_open s) (ht : convex (exprℝ) t)\n    (disj : Disjoint s t) : ∃ (f : «expr →L[ ] » E (exprℝ) (exprℝ))(u : exprℝ), (∀ a ∈ s, f a < u) ∧ ∀ b ∈ t, u ≤ f b :=\n  by\n  obtain rfl | ⟨a₀, ha₀⟩ := s.eq_empty_or_nonempty\n  · exact ⟨0, 0, by simp, fun b hb => le_rfl⟩\n  obtain rfl | ⟨b₀, hb₀⟩ := t.eq_empty_or_nonempty\n  · exact ⟨0, 1, fun a ha => zero_lt_one, by simp⟩\n  let x₀ := b₀ - a₀\n  let C := «expr +ᵥ » x₀ (s - t)\n  have : (0 : E) ∈ C := ⟨a₀ - b₀, sub_mem_sub ha₀ hb₀, by rw [vadd_eq_add, sub_add_sub_cancel', sub_self]⟩\n  have : convex (exprℝ) C := (hs₁.sub ht).vadd _\n  have : x₀ ∉ C := by\n    intro hx₀\n    rw [← add_zero x₀] at hx₀\n    exact disj.zero_not_mem_sub_set (vadd_mem_vadd_set_iff.1 hx₀)\n  obtain ⟨f, hf₁, hf₂⟩ := separate_convex_open_set ‹0 ∈ C› ‹_› (hs₂.sub_right.vadd _) ‹x₀ ∉ C›\n  have : f b₀ = f a₀ + 1 := by simp [← hf₁]\n  have forall_le : ∀ a ∈ s, ∀ b ∈ t, f a ≤ f b := by\n    intro a ha b hb\n    have := hf₂ (x₀ + (a - b)) (vadd_mem_vadd_set <| sub_mem_sub ha hb)\n    simp only [f.map_add, f.map_sub, hf₁] at this\n    linarith\n  refine' ⟨f, Inf («expr '' » f t), image_subset_iff.1 (_ : «expr '' » f s ⊆ Iio (Inf («expr '' » f t))), fun b hb => _⟩\n  · rw [← interior_Iic]\n    refine' interior_maximal (image_subset_iff.2 fun a ha => _) (f.is_open_map_of_ne_zero _ _ hs₂)\n    · exact le_cinfₛ (nonempty.image _ ⟨_, hb₀⟩) (ball_image_of_ball <| forall_le _ ha)\n    · rintro rfl\n      simpa using hf₁\n  · exact cinfₛ_le ⟨f a₀, ball_image_of_ball <| forall_le _ ha₀⟩ (mem_image_of_mem _ hb)\n#align geometric_hahn_banach_open geometric_hahn_banach_open\n\n",
 "geometric_hahn_banach_compact_closed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is\ncompact and `t` is closed, there is a continuous linear functional which strongly separates them. -/\ntheorem geometric_hahn_banach_compact_closed (hs₁ : convex (exprℝ) s) (hs₂ : is_compact s) (ht₁ : convex (exprℝ) t)\n    (ht₂ : is_closed t) (disj : Disjoint s t) :\n    ∃ (f : «expr →L[ ] » E (exprℝ) (exprℝ))(u v : exprℝ), (∀ a ∈ s, f a < u) ∧ u < v ∧ ∀ b ∈ t, v < f b :=\n  by\n  obtain rfl | hs := s.eq_empty_or_nonempty\n  · exact ⟨0, -2, -1, by simp, by norm_num, fun b hb => by norm_num⟩\n  obtain rfl | ht := t.eq_empty_or_nonempty\n  · exact ⟨0, 1, 2, fun a ha => by norm_num, by norm_num, by simp⟩\n  obtain ⟨U, V, hU, hV, hU₁, hV₁, sU, tV, disj'⟩ := disj.exists_open_convexes hs₁ hs₂ ht₁ ht₂\n  obtain ⟨f, u, hf₁, hf₂⟩ := geometric_hahn_banach_open_open hU₁ hU hV₁ hV disj'\n  obtain ⟨x, hx₁, hx₂⟩ := hs₂.exists_forall_ge hs f.continuous.continuous_on\n  have : f x < u := hf₁ x (sU hx₁)\n  exact ⟨f, (f x + u) / 2, u, fun a ha => by linarith [hx₂ a ha], by linarith, fun b hb => hf₂ b (tV hb)⟩\n#align geometric_hahn_banach_compact_closed geometric_hahn_banach_compact_closed\n\n",
 "geometric_hahn_banach_closed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem geometric_hahn_banach_closed_point (hs₁ : convex (exprℝ) s) (hs₂ : is_closed s) (disj : x ∉ s) :\n    ∃ (f : «expr →L[ ] » E (exprℝ) (exprℝ))(u : exprℝ), (∀ a ∈ s, f a < u) ∧ u < f x :=\n  let ⟨f, s, t, ha, hst, hb⟩ :=\n    geometric_hahn_banach_closed_compact hs₁ hs₂ (convex_singleton x) is_compact_singleton\n      (disjoint_singleton_right.2 disj)\n  ⟨f, s, ha, hst.trans <| hb x <| mem_singleton _⟩\n#align geometric_hahn_banach_closed_point geometric_hahn_banach_closed_point\n\n",
 "geometric_hahn_banach_closed_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A version of the **Hahn-Banach theorem**: given disjoint convex sets `s`, `t` where `s` is\nclosed, and `t` is compact, there is a continuous linear functional which strongly separates them.\n-/\ntheorem geometric_hahn_banach_closed_compact (hs₁ : convex (exprℝ) s) (hs₂ : is_closed s) (ht₁ : convex (exprℝ) t)\n    (ht₂ : is_compact t) (disj : Disjoint s t) :\n    ∃ (f : «expr →L[ ] » E (exprℝ) (exprℝ))(u v : exprℝ), (∀ a ∈ s, f a < u) ∧ u < v ∧ ∀ b ∈ t, v < f b :=\n  let ⟨f, s, t, hs, st, ht⟩ := geometric_hahn_banach_compact_closed ht₁ ht₂ hs₁ hs₂ disj.symm\n  ⟨-f, -t, -s, by simpa using ht, by simpa using st, by simpa using hs⟩\n#align geometric_hahn_banach_closed_compact geometric_hahn_banach_closed_compact\n\n",
 "Inter_halfspaces_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/-- A closed convex set is the intersection of the halfspaces containing it. -/\ntheorem Inter_halfspaces_eq (hs₁ : convex (exprℝ) s) (hs₂ : is_closed s) :\n    «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        { x | ∃ y ∈ s, l x ≤ l y } =\n      s :=\n  by\n  rw [Set.interᵢ_setOf]\n  refine' Set.Subset.antisymm (fun x hx => _) fun x hx l => ⟨x, hx, le_rfl⟩\n  by_contra\n  obtain ⟨l, s, hlA, hl⟩ := geometric_hahn_banach_closed_point hs₁ hs₂ h\n  obtain ⟨y, hy, hxy⟩ := hx l\n  exact ((hxy.trans_lt (hlA y hy)).trans hl).not_le le_rfl\n#align Inter_halfspaces_eq Inter_halfspaces_eq\n\n"}