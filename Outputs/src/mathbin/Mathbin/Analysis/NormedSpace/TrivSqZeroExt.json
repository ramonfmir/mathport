{"snd_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem snd_exp (x : (exprtsze) R M) : snd (exp 𝕜 x) = «expr • » (exp 𝕜 x.fst) x.snd := by\n  rw [exp_def, snd_add, snd_inl, snd_inr, zero_add]\n#align snd_exp snd_exp\n\n",
 "has_sum_exp_series":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2023 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- If `exp R x.fst` converges to `e` then `exp R x` converges to `inl e + inr (e • x.snd)`. -/\ntheorem has_sum_exp_series [Field 𝕜] [CharZero 𝕜] [CommRing R] [AddCommGroup M] [Algebra 𝕜 R] [Module R M]\n    [Module («expr ᵐᵒᵖ» R) M] [IsCentralScalar R M] [Module 𝕜 M] [IsScalarTower 𝕜 R M] [TopologicalRing R]\n    [TopologicalAddGroup M] [ContinuousSMul R M] (x : (exprtsze) R M) {e : R}\n    (h : HasSum (fun n => exp_series 𝕜 R n fun _ => x.fst) e) :\n    HasSum (fun n => exp_series 𝕜 ((exprtsze) R M) n fun _ => x) (inl e + inr («expr • » e x.snd)) :=\n  by\n  simp_rw [exp_series_apply_eq] at *\n  conv =>\n    congr\n    ext\n    rw [← inl_fst_add_inr_snd_eq (x ^ _), fst_pow, snd_pow, smul_add, ← inr_smul, ← inl_smul, nsmul_eq_smul_cast 𝕜 n,\n      smul_smul, inv_mul_eq_div, ← inv_div, ← smul_assoc]\n  refine' (has_sum_inl M h).add (has_sum_inr M _)\n  apply HasSum.smul_const\n  rw [← hasSum_nat_add_iff' 1]; swap; infer_instance\n  rw [Finset.range_one, Finset.sum_singleton, Nat.cast_zero, div_zero, inv_zero, zero_smul, sub_zero]\n  simp_rw [← nat.succ_eq_add_one, nat.pred_succ, Nat.factorial_succ, Nat.cast_mul, ← nat.succ_eq_add_one,\n    mul_div_cancel_left _ ((@Nat.cast_ne_zero 𝕜 _ _ _).mpr <| nat.succ_ne_zero _)]\n  exact h\n#align has_sum_exp_series has_sum_exp_series\n\n",
 "fst_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n@[simp]\ntheorem fst_exp (x : (exprtsze) R M) : fst (exp 𝕜 x) = exp 𝕜 x.fst := by\n  rw [exp_def, fst_add, fst_inl, fst_inr, add_zero]\n#align fst_exp fst_exp\n\n",
 "exp_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n@[simp]\ntheorem exp_inr (m : M) : exp 𝕜 (inr m : (exprtsze) R M) = 1 + inr m := by\n  rw [exp_def, fst_inr, exp_zero, snd_inr, one_smul, inl_one]\n#align exp_inr exp_inr\n\n",
 "exp_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n@[simp]\ntheorem exp_inl (x : R) : exp 𝕜 (inl x : (exprtsze) R M) = inl (exp 𝕜 x) := by\n  rw [exp_def, fst_inl, snd_inl, smul_zero, inr_zero, add_zero]\n#align exp_inl exp_inl\n\n",
 "exp_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem exp_def (x : (exprtsze) R M) : exp 𝕜 x = inl (exp 𝕜 x.fst) + inr («expr • » (exp 𝕜 x.fst) x.snd) :=\n  by\n  simp_rw [exp, formal_multilinear_series.sum]\n  refine' (has_sum_exp_series 𝕜 x _).tsum_eq\n  exact exp_series_has_sum_exp _\n#align exp_def exp_def\n\n",
 "eq_smul_exp_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- More convenient version of `triv_sq_zero_ext.eq_smul_exp_of_invertible` for when `R` is a\nfield. -/\ntheorem eq_smul_exp_of_ne_zero (x : (exprtsze) R M) (hx : x.fst ≠ 0) :\n    x = «expr • » x.fst (exp 𝕜 («expr • » x.fst⁻¹ (inr x.snd))) :=\n  letI : Invertible x.fst := invertibleOfNonzero hx\n  eq_smul_exp_of_invertible _ _\n#align eq_smul_exp_of_ne_zero eq_smul_exp_of_ne_zero\n\n",
 "eq_smul_exp_of_invertible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtsze -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/-- Polar form of trivial-square-zero extension. -/\ntheorem eq_smul_exp_of_invertible (x : (exprtsze) R M) [Invertible x.fst] :\n    x = «expr • » x.fst (exp 𝕜 («expr • » ((«expr⅟») x.fst) (inr x.snd))) := by\n  rw [← inr_smul, exp_inr, smul_add, ← inl_one, ← inl_smul, ← inr_smul, smul_eq_mul, mul_one, smul_smul, mul_invOf_self,\n    one_smul, inl_fst_add_inr_snd_eq]\n#align eq_smul_exp_of_invertible eq_smul_exp_of_invertible\n\n"}