{"subset_circle_of_unitary":
 "theorem spectrum.subset_circle_of_unitary {u : E} (h : u ∈ unitary E) : spectrum 𝕜 u ⊆ Metric.sphere 0 1 :=\n  unitary.spectrum_subset_circle ⟨u, h⟩\n#align spectrum.subset_circle_of_unitary spectrum.subset_circle_of_unitary\n\n",
 "spectrum_subset_circle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-\nCopyright (c) 2022 Jireh Loreaux. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jireh Loreaux\n-/\ntheorem unitary.spectrum_subset_circle (u : unitary E) : spectrum 𝕜 (u : E) ⊆ Metric.sphere 0 1 :=\n  by\n  nontriviality E\n  refine' fun k hk => mem_sphere_zero_iff_norm.mpr (le_antisymm _ _)\n  · simpa only [CstarRing.norm_coe_unitary u] using norm_le_norm_of_mem hk\n  · rw [← unitary.coe_to_units_apply u] at hk\n    have hnk := ne_zero_of_mem_of_unit hk\n    rw [← inv_inv (unitary.toUnits u), ← spectrum.map_inv, Set.mem_inv] at hk\n    have : («expr‖ ‖» k)⁻¹ ≤ «expr‖ ‖» ↑(unitary.toUnits u)⁻¹\n    simpa only [norm_inv] using norm_le_norm_of_mem hk\n    simpa using inv_le_of_inv_le (norm_pos_iff.mpr hnk) this\n#align unitary.spectrum_subset_circle unitary.spectrum_subset_circle\n\n",
 "spectral_radius_eq_nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem is_star_normal.spectral_radius_eq_nnnorm (a : A) [IsStarNormal a] : spectral_radius (exprℂ) a = «expr‖ ‖₊» a :=\n  by\n  refine' (ENNReal.pow_strictMono two_ne_zero).injective _\n  have heq :\n    (fun n : ℕ => («expr‖ ‖₊» ((«expr ⋆» a * a) ^ n) ^ (1 / n : exprℝ) : ennreal)) =\n      (fun x => x ^ 2) ∘ fun n : ℕ => («expr‖ ‖₊» (a ^ n) ^ (1 / n : exprℝ) : ennreal) :=\n    by\n    funext\n    rw [Function.comp_apply, ← rpow_nat_cast, ← rpow_mul, mul_comm, rpow_mul, rpow_nat_cast, ← coe_pow, sq, ←\n      nnnorm_star_mul_self, Commute.mul_pow (star_comm_self' a), star_pow]\n  have h₂ :=\n    ((ENNReal.continuous_pow 2).tendsto (spectral_radius (exprℂ) a)).comp\n      (spectrum.pow_nnnorm_pow_one_div_tendsto_nhds_spectral_radius a)\n  rw [← HEq] at h₂\n  convert tendsto_nhds_unique h₂ (pow_nnnorm_pow_one_div_tendsto_nhds_spectral_radius («expr ⋆» a * a))\n  rw [(IsSelfAdjoint.star_mul_self a).spectral_radius_eq_nnnorm, sq, nnnorm_star_mul_self, coe_mul]\n#align is_star_normal.spectral_radius_eq_nnnorm is_star_normal.spectral_radius_eq_nnnorm\n\n",
 "norm_apply_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A star algebra homomorphism of complex C⋆-algebras is norm contractive. -/\ntheorem norm_apply_le (a : A) : «expr‖ ‖» (φ a : B) ≤ «expr‖ ‖» a :=\n  nnnorm_apply_le φ a\n#align norm_apply_le norm_apply_le\n\n",
 "nnnorm_apply_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/-- A star algebra homomorphism of complex C⋆-algebras is norm contractive. -/\ntheorem nnnorm_apply_le (a : A) : «expr‖ ‖₊» (φ a : B) ≤ «expr‖ ‖₊» a :=\n  by\n  suffices ∀ s : A, IsSelfAdjoint s → «expr‖ ‖₊» (φ s) ≤ «expr‖ ‖₊» s by\n    exact\n      nonneg_le_nonneg_of_sq_le_sq zero_le'\n        (by simpa only [nnnorm_star_mul_self, map_star, map_mul] using this _ (IsSelfAdjoint.star_mul_self a))\n  · intro s hs\n    simpa only [hs.spectral_radius_eq_nnnorm, (hs.star_hom_apply φ).spectral_radius_eq_nnnorm, coe_le_coe] using\n      show spectral_radius (exprℂ) (φ s) ≤ spectral_radius (exprℂ) s from\n        supᵢ_le_supᵢ_of_subset (alg_hom.spectrum_apply_subset φ s)\n#align nnnorm_apply_le nnnorm_apply_le\n\n",
 "mem_spectrum_eq_re":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- Any element of the spectrum of a selfadjoint is real. -/\ntheorem self_adjoint.mem_spectrum_eq_re [StarModule (exprℂ) A] (a : selfAdjoint A) {z : exprℂ}\n    (hz : z ∈ spectrum (exprℂ) (a : A)) : z = z.re :=\n  a.prop.mem_spectrum_eq_re hz\n#align self_adjoint.mem_spectrum_eq_re self_adjoint.mem_spectrum_eq_re\n\n",
 "coe_re_map_spectrum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- The spectrum of a selfadjoint is real -/\ntheorem self_adjoint.coe_re_map_spectrum [StarModule (exprℂ) A] (a : selfAdjoint A) :\n    spectrum (exprℂ) (a : A) = («expr '' » (coe ∘ re) (spectrum (exprℂ) (a : A)) : Set (exprℂ)) :=\n  a.property.coe_re_map_spectrum\n#align self_adjoint.coe_re_map_spectrum self_adjoint.coe_re_map_spectrum\n\n"}