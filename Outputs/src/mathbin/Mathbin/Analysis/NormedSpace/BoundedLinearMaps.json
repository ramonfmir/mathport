{"zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem zero : is_bounded_linear_map 𝕜 fun x : E => (0 : F) :=\n  (0 : «expr →ₗ[ ] » E 𝕜 F).is_linear.with_bound 0 <| by simp [le_refl]\n#align zero zero\n\n",
 "with_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-\nCopyright (c) 2018 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Johannes Hölzl\n-/\ntheorem is_linear_map.with_bound {f : E → F} (hf : is_linear_map 𝕜 f) (M : exprℝ)\n    (h : ∀ x : E, «expr‖ ‖» (f x) ≤ M * «expr‖ ‖» x) : is_bounded_linear_map 𝕜 f :=\n  ⟨hf,\n    by_cases\n      (fun this : M ≤ 0 =>\n        ⟨1, zero_lt_one, fun x => (h x).trans <| mul_le_mul_of_nonneg_right (this.trans zero_le_one) (norm_nonneg x)⟩)\n      fun this : ¬M ≤ 0 => ⟨M, lt_of_not_ge this, h⟩⟩\n#align is_linear_map.with_bound is_linear_map.with_bound\n\n",
 "tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\nprotected theorem tendsto (x : E) (hf : is_bounded_linear_map 𝕜 f) : tendsto f ((nhds) x) ((nhds) (f x)) :=\n  let ⟨hf, M, hMp, hM⟩ := hf\n  tendsto_iff_norm_tendsto_zero.2 <|\n    squeeze_zero (fun e => norm_nonneg _)\n      (fun e =>\n        calc\n          «expr‖ ‖» (f e - f x) = «expr‖ ‖» (hf.mk' f (e - x)) := by rw [(hf.mk' _).map_sub e x] <;> rfl\n          _ ≤ M * «expr‖ ‖» (e - x) := hM (e - x)\n          )\n      (suffices tendsto (fun e : E => M * «expr‖ ‖» (e - x)) ((nhds) x) ((nhds) (M * 0)) by simpa\n      tendsto_const_nhds.mul (tendsto_norm_sub_self _))\n#align tendsto tendsto\n\n",
 "sub":
 "theorem sub (hf : is_bounded_linear_map 𝕜 f) (hg : is_bounded_linear_map 𝕜 g) :\n    is_bounded_linear_map 𝕜 fun e => f e - g e := by simpa [sub_eq_add_neg] using add hf (neg hg)\n#align sub sub\n\n",
 "snd":
 "theorem snd : is_bounded_linear_map 𝕜 fun x : E × F => x.2 :=\n  by\n  refine' (linear_map.snd 𝕜 E F).is_linear.with_bound 1 fun x => _\n  rw [one_mul]\n  exact le_max_right _ _\n#align snd snd\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul (c : 𝕜) (hf : is_bounded_linear_map 𝕜 f) : is_bounded_linear_map 𝕜 («expr • » c f) :=\n  let ⟨hlf, M, hMp, hM⟩ := hf\n  («expr • » c (hlf.mk' f)).is_linear.with_bound («expr‖ ‖» c * M) fun x =>\n    calc\n      «expr‖ ‖» («expr • » c (f x)) = «expr‖ ‖» c * «expr‖ ‖» (f x) := norm_smul c (f x)\n      _ ≤ «expr‖ ‖» c * (M * «expr‖ ‖» x) := mul_le_mul_of_nonneg_left (hM _) (norm_nonneg _)\n      _ = «expr‖ ‖» c * M * «expr‖ ‖» x := (mul_assoc _ _ _).symm\n      \n#align smul smul\n\n",
 "nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\nprotected theorem nhds [complete_space E] (e : «expr ≃L[ ] » E 𝕜 F) :\n    range (coe : «expr ≃L[ ] » E 𝕜 F → «expr →L[ ] » E 𝕜 F) ∈ (nhds) (e : «expr →L[ ] » E 𝕜 F) :=\n  is_open.mem_nhds continuous_linear_equiv.is_open (by simp)\n#align nhds nhds\n\n",
 "neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem neg (hf : is_bounded_linear_map 𝕜 f) : is_bounded_linear_map 𝕜 fun e => -f e :=\n  by\n  rw [show (fun e => -f e) = fun e => «expr • » (-1 : 𝕜) (f e) by funext ; simp]\n  exact smul (-1) hf\n#align neg neg\n\n",
 "mul_left_right_is_bounded_bilinear":
 "/-- The function `continuous_linear_map.mul_left_right : 𝕜' × 𝕜' → (𝕜' →L[𝕜] 𝕜')` is a bounded\nbilinear map. -/\ntheorem continuous_linear_map.mul_left_right_is_bounded_bilinear (𝕜' : Type _) [normed_ring 𝕜'] [normed_algebra 𝕜 𝕜'] :\n    is_bounded_bilinear_map 𝕜 fun p : 𝕜' × 𝕜' => continuous_linear_map.mul_left_right 𝕜 𝕜' p.1 p.2 :=\n  (continuous_linear_map.mul_left_right 𝕜 𝕜').is_bounded_bilinear_map\n#align continuous_linear_map.mul_left_right_is_bounded_bilinear continuous_linear_map.mul_left_right_is_bounded_bilinear\n\n",
 "map_zero₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\ntheorem map_zero₂ (f : «expr →SL[ ] » M ρ₁₂ («expr →SL[ ] » F σ₁₂ G')) (y : F) : f 0 y = 0 := by\n  rw [f.map_zero, zero_apply]\n#align map_zero₂ map_zero₂\n\n",
 "map_sub₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\ntheorem map_sub₂ (f : «expr →SL[ ] » M ρ₁₂ («expr →SL[ ] » F σ₁₂ G')) (x x' : M) (y : F) :\n    f (x - x') y = f x y - f x' y := by rw [f.map_sub, sub_apply]\n#align map_sub₂ map_sub₂\n\n",
 "map_sub_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_bounded_bilinear_map.map_sub_right (h : is_bounded_bilinear_map 𝕜 f) {x : E} {y z : F} :\n    f (x, y - z) = f (x, y) - f (x, z) :=\n  calc\n    f (x, y - z) = f (x, y + «expr • » (-1 : 𝕜) z) := by simp [sub_eq_add_neg]\n    _ = f (x, y) + «expr • » (-1 : 𝕜) (f (x, z)) := by simp only [h.add_right, h.smul_right]\n    _ = f (x, y) - f (x, z) := by simp [sub_eq_add_neg]\n    \n#align is_bounded_bilinear_map.map_sub_right is_bounded_bilinear_map.map_sub_right\n\n",
 "map_sub_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_bounded_bilinear_map.map_sub_left (h : is_bounded_bilinear_map 𝕜 f) {x y : E} {z : F} :\n    f (x - y, z) = f (x, z) - f (y, z) :=\n  calc\n    f (x - y, z) = f (x + «expr • » (-1 : 𝕜) y, z) := by simp [sub_eq_add_neg]\n    _ = f (x, z) + «expr • » (-1 : 𝕜) (f (y, z)) := by simp only [h.add_left, h.smul_left]\n    _ = f (x, z) - f (y, z) := by simp [sub_eq_add_neg]\n    \n#align is_bounded_bilinear_map.map_sub_left is_bounded_bilinear_map.map_sub_left\n\n",
 "map_smulₛₗ₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem map_smulₛₗ₂ (f : «expr →SL[ ] » M ρ₁₂ («expr →SL[ ] » F σ₁₂ G')) (c : R) (x : M) (y : F) :\n    f («expr • » c x) y = «expr • » (ρ₁₂ c) (f x y) := by rw [f.map_smulₛₗ, smul_apply]\n#align map_smulₛₗ₂ map_smulₛₗ₂\n\n",
 "map_smul₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem map_smul₂ (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) (c : 𝕜) (x : E) (y : F) :\n    f («expr • » c x) y = «expr • » c (f x y) := by rw [f.map_smul, smul_apply]\n#align map_smul₂ map_smul₂\n\n",
 "map_neg₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\ntheorem map_neg₂ (f : «expr →SL[ ] » M ρ₁₂ («expr →SL[ ] » F σ₁₂ G')) (x : M) (y : F) : f (-x) y = -f x y := by\n  rw [f.map_neg, neg_apply]\n#align map_neg₂ map_neg₂\n\n",
 "map_add₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\ntheorem map_add₂ (f : «expr →SL[ ] » M ρ₁₂ («expr →SL[ ] » F σ₁₂ G')) (x x' : M) (y : F) :\n    f (x + x') y = f x y + f x' y := by rw [f.map_add, add_apply]\n#align map_add₂ map_add₂\n\n",
 "lim_zero_bounded_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem lim_zero_bounded_linear_map (hf : is_bounded_linear_map 𝕜 f) : tendsto f ((nhds) 0) ((nhds) 0) :=\n  (hf.1.mk' _).map_zero ▸ continuous_iff_continuous_at.1 hf.continuous 0\n#align lim_zero_bounded_linear_map lim_zero_bounded_linear_map\n\n",
 "is_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\nprotected theorem is_open [complete_space E] : is_open (range (coe : «expr ≃L[ ] » E 𝕜 F → «expr →L[ ] » E 𝕜 F)) :=\n  by\n  rw [is_open_iff_mem_nhds, forall_range_iff]\n  refine' fun e => is_open.mem_nhds _ (mem_range_self _)\n  let O : «expr →L[ ] » E 𝕜 F → «expr →L[ ] » E 𝕜 E := fun f => (e.symm : «expr →L[ ] » F 𝕜 E).comp f\n  have h_O : continuous O := is_bounded_bilinear_map_comp.continuous_right\n  convert show is_open («expr ⁻¹' » O { x | is_unit x }) from units.is_open.preimage h_O using 1\n  ext f'\n  constructor\n  · rintro ⟨e', rfl⟩\n    exact ⟨(e'.trans e.symm).to_unit, rfl⟩\n  · rintro ⟨w, hw⟩\n    use (units_equiv 𝕜 E w).trans e\n    ext x\n    simp [coe_fn_coe_base' w, hw]\n#align is_open is_open\n\n",
 "is_bounded_linear_map_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr mul_le_mul_of_nonneg_right, \",\", expr norm_nonneg, \",\", expr mul_le_mul_of_nonneg_left, \",\", expr le_of_lt\n   C_pos, \"]\"],\n  []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\ntheorem is_bounded_bilinear_map.is_bounded_linear_map_right (h : is_bounded_bilinear_map 𝕜 f) (x : E) :\n    is_bounded_linear_map 𝕜 fun y => f (x, y) :=\n  { map_add := fun y y' => h.add_right _ _ _\n    map_smul := fun c y => h.smul_right _ _ _\n    bound := by\n      rcases h.bound with ⟨C, C_pos, hC⟩\n      refine' ⟨C * («expr‖ ‖» x + 1), mul_pos C_pos (lt_of_lt_of_le zero_lt_one (by simp)), fun y => _⟩\n      have : «expr‖ ‖» x ≤ «expr‖ ‖» x + 1 := by simp [zero_le_one]\n      calc\n        «expr‖ ‖» (f (x, y)) ≤ C * «expr‖ ‖» x * «expr‖ ‖» y := hC x y\n        _ ≤ C * («expr‖ ‖» x + 1) * «expr‖ ‖» y := by\n          trace\n            \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr mul_le_mul_of_nonneg_right, \\\",\\\", expr norm_nonneg, \\\",\\\", expr mul_le_mul_of_nonneg_left, \\\",\\\", expr le_of_lt\\n   C_pos, \\\"]\\\"],\\n  []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n         }\n#align is_bounded_bilinear_map.is_bounded_linear_map_right is_bounded_bilinear_map.is_bounded_linear_map_right\n\n",
 "is_bounded_linear_map_prod_multilinear":
 "/-- Taking the cartesian product of two continuous multilinear maps\nis a bounded linear operation. -/\ntheorem is_bounded_linear_map_prod_multilinear {E : ι → Type _} [∀ i, normed_add_comm_group (E i)]\n    [∀ i, normed_space 𝕜 (E i)] :\n    is_bounded_linear_map 𝕜 fun p : continuous_multilinear_map 𝕜 E F × continuous_multilinear_map 𝕜 E G =>\n      p.1.prod p.2 :=\n  { map_add := fun p₁ p₂ => by\n      ext1 m\n      rfl\n    map_smul := fun c p => by\n      ext1 m\n      rfl\n    bound :=\n      ⟨1, zero_lt_one, fun p => by\n        rw [one_mul]\n        apply continuous_multilinear_map.op_norm_le_bound _ (norm_nonneg _) fun m => _\n        rw [continuous_multilinear_map.prod_apply, norm_prod_le_iff]\n        constructor\n        ·\n          exact\n            (p.1.le_op_norm m).trans\n              (mul_le_mul_of_nonneg_right (norm_fst_le p) (finset.prod_nonneg fun i hi => norm_nonneg _))\n        ·\n          exact\n            (p.2.le_op_norm m).trans\n              (mul_le_mul_of_nonneg_right (norm_snd_le p) (finset.prod_nonneg fun i hi => norm_nonneg _))⟩ }\n#align is_bounded_linear_map_prod_multilinear is_bounded_linear_map_prod_multilinear\n\n",
 "is_bounded_linear_map_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr norm_nonneg, \",\", expr mul_le_mul_of_nonneg_left, \",\", expr le_of_lt C_pos, \",\", expr mul_nonneg, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_bounded_bilinear_map.is_bounded_linear_map_left (h : is_bounded_bilinear_map 𝕜 f) (y : F) :\n    is_bounded_linear_map 𝕜 fun x => f (x, y) :=\n  { map_add := fun x x' => h.add_left _ _ _\n    map_smul := fun c x => h.smul_left _ _ _\n    bound := by\n      rcases h.bound with ⟨C, C_pos, hC⟩\n      refine' ⟨C * («expr‖ ‖» y + 1), mul_pos C_pos (lt_of_lt_of_le zero_lt_one (by simp)), fun x => _⟩\n      have : «expr‖ ‖» y ≤ «expr‖ ‖» y + 1 := by simp [zero_le_one]\n      calc\n        «expr‖ ‖» (f (x, y)) ≤ C * «expr‖ ‖» x * «expr‖ ‖» y := hC x y\n        _ ≤ C * «expr‖ ‖» x * («expr‖ ‖» y + 1) := by\n          trace\n            \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr norm_nonneg, \\\",\\\", expr mul_le_mul_of_nonneg_left, \\\",\\\", expr le_of_lt C_pos, \\\",\\\", expr mul_nonneg, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n        _ = C * («expr‖ ‖» y + 1) * «expr‖ ‖» x := by ring\n         }\n#align is_bounded_bilinear_map.is_bounded_linear_map_left is_bounded_bilinear_map.is_bounded_linear_map_left\n\n",
 "is_bounded_linear_map_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr add_le_add, \",\", expr mul_le_mul, \",\", expr norm_nonneg, \",\", expr Cpos.le, \",\", expr le_refl, \",\", expr le_max_left, \",\", expr le_max_right, \",\", expr mul_nonneg, \"]\"],\n  []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Given a bounded bilinear map `f`, the map associating to a point `p` the derivative of `f` at\n`p` is itself a bounded linear map. -/\ntheorem is_bounded_bilinear_map.is_bounded_linear_map_deriv (h : is_bounded_bilinear_map 𝕜 f) :\n    is_bounded_linear_map 𝕜 fun p : E × F => h.deriv p :=\n  by\n  rcases h.bound with ⟨C, Cpos : 0 < C, hC⟩\n  refine' is_linear_map.with_bound ⟨fun p₁ p₂ => _, fun c p => _⟩ (C + C) fun p => _\n  ·\n    ext <;>\n        simp only [h.add_left, h.add_right, coe_comp', Function.comp_apply, inl_apply,\n          is_bounded_bilinear_map_deriv_coe, Prod.fst_add, Prod.snd_add, add_apply] <;>\n      abel\n  ·\n    ext <;>\n      simp only [h.smul_left, h.smul_right, smul_add, coe_comp', Function.comp_apply, is_bounded_bilinear_map_deriv_coe,\n        Prod.smul_fst, Prod.smul_snd, coe_smul', pi.smul_apply]\n  · refine'\n      continuous_linear_map.op_norm_le_bound _ (mul_nonneg (add_nonneg Cpos.le Cpos.le) (norm_nonneg _)) fun q => _\n    calc\n      «expr‖ ‖» (f (p.1, q.2) + f (q.1, p.2)) ≤ C * «expr‖ ‖» p.1 * «expr‖ ‖» q.2 + C * «expr‖ ‖» q.1 * «expr‖ ‖» p.2 :=\n        norm_add_le_of_le (hC _ _) (hC _ _)\n      _ ≤ C * «expr‖ ‖» p * «expr‖ ‖» q + C * «expr‖ ‖» q * «expr‖ ‖» p := by\n        trace\n          \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr add_le_add, \\\",\\\", expr mul_le_mul, \\\",\\\", expr norm_nonneg, \\\",\\\", expr Cpos.le, \\\",\\\", expr le_refl, \\\",\\\", expr le_max_left, \\\",\\\", expr le_max_right, \\\",\\\", expr mul_nonneg, \\\"]\\\"],\\n  []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n      _ = (C + C) * «expr‖ ‖» p * «expr‖ ‖» q := by ring\n      \n#align is_bounded_bilinear_map.is_bounded_linear_map_deriv is_bounded_bilinear_map.is_bounded_linear_map_deriv\n\n",
 "is_bounded_linear_map_continuous_multilinear_map_comp_linear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr mul_nonneg, \",\", expr pow_nonneg, \",\", expr norm_nonneg, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-- Given a fixed continuous linear map `g`, associating to a continuous multilinear map `f` the\ncontinuous multilinear map `f (g m₁, ..., g mₙ)` is a bounded linear operation. -/\ntheorem is_bounded_linear_map_continuous_multilinear_map_comp_linear (g : «expr →L[ ] » G 𝕜 E) :\n    is_bounded_linear_map 𝕜 fun f : continuous_multilinear_map 𝕜 (fun i : ι => E) F =>\n      f.comp_continuous_linear_map fun _ => g :=\n  by\n  refine'\n    is_linear_map.with_bound\n      ⟨fun f₁ f₂ => by\n        ext m\n        rfl, fun c f => by\n        ext m\n        rfl⟩\n      («expr‖ ‖» g ^ fintype.card ι) fun f => _\n  apply continuous_multilinear_map.op_norm_le_bound _ _ fun m => _\n  ·\n    trace\n      \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr mul_nonneg, \\\",\\\", expr pow_nonneg, \\\",\\\", expr norm_nonneg, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n  calc\n    «expr‖ ‖» (f (g ∘ m)) ≤\n        «expr‖ ‖» f *\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            («expr‖ ‖» (g (m i))) :=\n      f.le_op_norm _\n    _ ≤\n        «expr‖ ‖» f *\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            («expr‖ ‖» g * «expr‖ ‖» (m i)) :=\n      by\n      apply mul_le_mul_of_nonneg_left _ (norm_nonneg _)\n      exact finset.prod_le_prod (fun i hi => norm_nonneg _) fun i hi => g.le_op_norm _\n    _ =\n        «expr‖ ‖» g ^ fintype.card ι * «expr‖ ‖» f *\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            («expr‖ ‖» (m i)) :=\n      by\n      simp [finset.prod_mul_distrib, finset.card_univ]\n      ring\n    \n#align\n  is_bounded_linear_map_continuous_multilinear_map_comp_linear is_bounded_linear_map_continuous_multilinear_map_comp_linear\n\n",
 "is_bounded_linear_map_comp_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem continuous_linear_map.is_bounded_linear_map_comp_right (f : «expr →L[ ] » E 𝕜 F) :\n    is_bounded_linear_map 𝕜 fun g : «expr →L[ ] » F 𝕜 G => continuous_linear_map.comp g f :=\n  is_bounded_bilinear_map_comp.is_bounded_linear_map_left _\n#align continuous_linear_map.is_bounded_linear_map_comp_right continuous_linear_map.is_bounded_linear_map_comp_right\n\n",
 "is_bounded_linear_map_comp_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem continuous_linear_map.is_bounded_linear_map_comp_left (g : «expr →L[ ] » F 𝕜 G) :\n    is_bounded_linear_map 𝕜 fun f : «expr →L[ ] » E 𝕜 F => continuous_linear_map.comp g f :=\n  is_bounded_bilinear_map_comp.is_bounded_linear_map_right _\n#align continuous_linear_map.is_bounded_linear_map_comp_left continuous_linear_map.is_bounded_linear_map_comp_left\n\n",
 "is_bounded_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-- A continuous linear map satisfies `is_bounded_linear_map` -/\ntheorem continuous_linear_map.is_bounded_linear_map (f : «expr →L[ ] » E 𝕜 F) : is_bounded_linear_map 𝕜 f :=\n  { f.to_linear_map.is_linear with bound := f.bound }\n#align continuous_linear_map.is_bounded_linear_map continuous_linear_map.is_bounded_linear_map\n\n",
 "is_bounded_bilinear_map_smul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-- The function `continuous_linear_map.smul_right`, associating to a continuous linear map\n`f : E → 𝕜` and a scalar `c : F` the tensor product `f ⊗ c` as a continuous linear map from `E` to\n`F`, is a bounded bilinear map. -/\ntheorem is_bounded_bilinear_map_smul_right :\n    is_bounded_bilinear_map 𝕜 fun p =>\n      (continuous_linear_map.smul_right : «expr →L[ ] » E 𝕜 𝕜 → F → «expr →L[ ] » E 𝕜 F) p.1 p.2 :=\n  (smul_rightL 𝕜 E F).is_bounded_bilinear_map\n#align is_bounded_bilinear_map_smul_right is_bounded_bilinear_map_smul_right\n\n",
 "is_bounded_bilinear_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_bounded_bilinear_map_smul {𝕜' : Type _} [normed_field 𝕜'] [normed_algebra 𝕜 𝕜'] {E : Type _}\n    [normed_add_comm_group E] [normed_space 𝕜 E] [normed_space 𝕜' E] [IsScalarTower 𝕜 𝕜' E] :\n    is_bounded_bilinear_map 𝕜 fun p : 𝕜' × E => «expr • » p.1 p.2 :=\n  (lsmul 𝕜 𝕜' : «expr →L[ ] » 𝕜' 𝕜 («expr →L[ ] » E 𝕜 E)).is_bounded_bilinear_map\n#align is_bounded_bilinear_map_smul is_bounded_bilinear_map_smul\n\n",
 "is_bounded_bilinear_map_mul":
 "theorem is_bounded_bilinear_map_mul : is_bounded_bilinear_map 𝕜 fun p : 𝕜 × 𝕜 => p.1 * p.2 := by\n  simp_rw [← smul_eq_mul] <;> exact is_bounded_bilinear_map_smul\n#align is_bounded_bilinear_map_mul is_bounded_bilinear_map_mul\n\n",
 "is_bounded_bilinear_map_deriv_coe":
 "@[simp]\ntheorem is_bounded_bilinear_map_deriv_coe (h : is_bounded_bilinear_map 𝕜 f) (p q : E × F) :\n    h.deriv p q = f (p.1, q.2) + f (q.1, p.2) :=\n  rfl\n#align is_bounded_bilinear_map_deriv_coe is_bounded_bilinear_map_deriv_coe\n\n",
 "is_bounded_bilinear_map_comp_multilinear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-- The composition of a continuous linear map with a continuous multilinear map is a bounded\nbilinear operation. -/\ntheorem is_bounded_bilinear_map_comp_multilinear {ι : Type _} {E : ι → Type _} [decidable_eq ι] [fintype ι]\n    [∀ i, normed_add_comm_group (E i)] [∀ i, normed_space 𝕜 (E i)] :\n    is_bounded_bilinear_map 𝕜 fun p : «expr →L[ ] » F 𝕜 G × continuous_multilinear_map 𝕜 E F =>\n      p.1.comp_continuous_multilinear_map p.2 :=\n  (comp_continuous_multilinear_mapL 𝕜 E F G).is_bounded_bilinear_map\n#align is_bounded_bilinear_map_comp_multilinear is_bounded_bilinear_map_comp_multilinear\n\n",
 "is_bounded_bilinear_map_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem is_bounded_bilinear_map_comp :\n    is_bounded_bilinear_map 𝕜 fun p : «expr →L[ ] » F 𝕜 G × «expr →L[ ] » E 𝕜 F => p.1.comp p.2 :=\n  (compL 𝕜 E F G).is_bounded_bilinear_map\n#align is_bounded_bilinear_map_comp is_bounded_bilinear_map_comp\n\n",
 "is_bounded_bilinear_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem is_bounded_bilinear_map_apply : is_bounded_bilinear_map 𝕜 fun p : «expr →L[ ] » E 𝕜 F × E => p.1 p.2 :=\n  (continuous_linear_map.flip\n      (apply 𝕜 F : «expr →L[ ] » E 𝕜 («expr →L[ ] » («expr →L[ ] » E 𝕜 F) 𝕜 F))).is_bounded_bilinear_map\n#align is_bounded_bilinear_map_apply is_bounded_bilinear_map_apply\n\n",
 "is_bounded_bilinear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr mul_le_mul_of_nonneg_right, \",\", expr norm_nonneg, \",\", expr le_max_left, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem continuous_linear_map.is_bounded_bilinear_map (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) :\n    is_bounded_bilinear_map 𝕜 fun x : E × F => f x.1 x.2 :=\n  { add_left := f.map_add₂\n    smul_left := f.map_smul₂\n    add_right := fun x => (f x).map_add\n    smul_right := fun c x => (f x).map_smul c\n    bound :=\n      ⟨max («expr‖ ‖» f) 1, zero_lt_one.trans_le (le_max_right _ _), fun x y =>\n        (f.le_op_norm₂ x y).trans <| by\n          trace\n            \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr mul_le_mul_of_nonneg_right, \\\",\\\", expr norm_nonneg, \\\",\\\", expr le_max_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"⟩ }\n#align continuous_linear_map.is_bounded_bilinear_map continuous_linear_map.is_bounded_bilinear_map\n\n",
 "is_O_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_sub {f : E → F} (h : is_bounded_linear_map 𝕜 f) (l : filter E) (x : E) :\n    «expr =O[ ] » (fun x' => f (x' - x)) l fun x' => x' - x :=\n  is_O_comp h l\n#align is_O_sub is_O_sub\n\n",
 "is_O_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_id {f : E → F} (h : is_bounded_linear_map 𝕜 f) (l : filter E) : «expr =O[ ] » f l fun x => x :=\n  let ⟨M, hMp, hM⟩ := h.bound\n  is_O.of_bound _ (mem_of_superset univ_mem fun x _ => hM x)\n#align is_O_id is_O_id\n\n",
 "is_O_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_bounded_bilinear_map.is_O_comp {α : Type _} (H : is_bounded_bilinear_map 𝕜 f) {g : α → E} {h : α → F}\n    {l : filter α} : «expr =O[ ] » (fun x => f (g x, h x)) l fun x => «expr‖ ‖» (g x) * «expr‖ ‖» (h x) :=\n  H.is_O.comp_tendsto le_top\n#align is_bounded_bilinear_map.is_O_comp is_bounded_bilinear_map.is_O_comp\n\n",
 "is_O'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem is_bounded_bilinear_map.is_O' (h : is_bounded_bilinear_map 𝕜 f) :\n    «expr =O[ ] » f («expr⊤») fun p : E × F => «expr‖ ‖» p * «expr‖ ‖» p :=\n  h.is_O.trans <|\n    (@asymptotics.is_O_fst_prod' _ E F _ _ _ _).norm_norm.mul (@asymptotics.is_O_snd_prod' _ E F _ _ _ _).norm_norm\n#align is_bounded_bilinear_map.is_O' is_bounded_bilinear_map.is_O'\n\n",
 "is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem is_bounded_bilinear_map.is_O (h : is_bounded_bilinear_map 𝕜 f) :\n    «expr =O[ ] » f («expr⊤») fun p : E × F => «expr‖ ‖» p.1 * «expr‖ ‖» p.2 :=\n  let ⟨C, Cpos, hC⟩ := h.bound\n  asymptotics.is_O.of_bound _ <| filter.eventually_of_forall fun ⟨x, y⟩ => by simpa [mul_assoc] using hC x y\n#align is_bounded_bilinear_map.is_O is_bounded_bilinear_map.is_O\n\n",
 "id":
 "#print id /-\ntheorem id : is_bounded_linear_map 𝕜 fun x : E => x :=\n  linear_map.id.is_linear.with_bound 1 <| by simp [le_refl]\n#align id id\n-/\n\n",
 "fst":
 "theorem fst : is_bounded_linear_map 𝕜 fun x : E × F => x.1 :=\n  by\n  refine' (linear_map.fst 𝕜 E F).is_linear.with_bound 1 fun x => _\n  rw [one_mul]\n  exact le_max_left _ _\n#align fst fst\n\n",
 "continuous₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-- Useful to use together with `continuous.comp₂`. -/\ntheorem continuous_linear_map.continuous₂ (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) :\n    continuous (function.uncurry fun x y => f x y) :=\n  f.is_bounded_bilinear_map.continuous\n#align continuous_linear_map.continuous₂ continuous_linear_map.continuous₂\n\n",
 "continuous_right":
 "theorem is_bounded_bilinear_map.continuous_right (h : is_bounded_bilinear_map 𝕜 f) {e₁ : E} :\n    continuous fun e₂ => f (e₁, e₂) :=\n  h.continuous.comp (continuous_const.prod_mk continuous_id)\n#align is_bounded_bilinear_map.continuous_right is_bounded_bilinear_map.continuous_right\n\n",
 "continuous_left":
 "theorem is_bounded_bilinear_map.continuous_left (h : is_bounded_bilinear_map 𝕜 f) {e₂ : F} :\n    continuous fun e₁ => f (e₁, e₂) :=\n  h.continuous.comp (continuous_id.prod_mk continuous_const)\n#align is_bounded_bilinear_map.continuous_left is_bounded_bilinear_map.continuous_left\n\n",
 "continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Useful to use together with `continuous.comp₂`. -/\ntheorem is_bounded_bilinear_map.continuous (h : is_bounded_bilinear_map 𝕜 f) : continuous f :=\n  by\n  have one_ne : (1 : exprℝ) ≠ 0 := by simp\n  obtain ⟨C, Cpos : 0 < C, hC⟩ := h.bound\n  rw [continuous_iff_continuous_at]\n  intro x\n  have H : ∀ (a : E) (b : F), «expr‖ ‖» (f (a, b)) ≤ C * «expr‖ ‖» («expr‖ ‖» a * «expr‖ ‖» b) :=\n    by\n    intro a b\n    simpa [mul_assoc] using hC a b\n  have h₁ : «expr =o[ ] » (fun e : E × F => f (e.1 - x.1, e.2)) ((nhds) x) fun e => (1 : exprℝ) :=\n    by\n    refine' (asymptotics.is_O_of_le' ((nhds) x) fun e => H (e.1 - x.1) e.2).trans_is_o _\n    rw [asymptotics.is_o_const_iff one_ne]\n    convert ((continuous_fst.sub continuous_const).norm.mul continuous_snd.norm).continuous_at\n    · simp\n    infer_instance\n  have h₂ : «expr =o[ ] » (fun e : E × F => f (x.1, e.2 - x.2)) ((nhds) x) fun e => (1 : exprℝ) :=\n    by\n    refine' (asymptotics.is_O_of_le' ((nhds) x) fun e => H x.1 (e.2 - x.2)).trans_is_o _\n    rw [asymptotics.is_o_const_iff one_ne]\n    convert (continuous_const.mul (continuous_snd.sub continuous_const).norm).continuous_at\n    · simp\n    infer_instance\n  have := h₁.add h₂\n  rw [asymptotics.is_o_const_iff one_ne] at this\n  change tendsto _ _ _\n  convert this.add_const (f x)\n  · ext e\n    simp [h.map_sub_left, h.map_sub_right]\n  · simp\n#align is_bounded_bilinear_map.continuous is_bounded_bilinear_map.continuous\n\n",
 "comp":
 "theorem comp {g : F → G} (hg : is_bounded_linear_map 𝕜 g) (hf : is_bounded_linear_map 𝕜 f) :\n    is_bounded_linear_map 𝕜 (g ∘ f) :=\n  (hg.to_continuous_linear_map.comp hf.to_continuous_linear_map).is_bounded_linear_map\n#align comp comp\n\n",
 "clm_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem continuous_on.clm_comp {X} [topological_space X] {g : X → «expr →L[ ] » F 𝕜 G} {f : X → «expr →L[ ] » E 𝕜 F}\n    {s : set X} (hg : continuous_on g s) (hf : continuous_on f s) : continuous_on (fun x => (g x).comp (f x)) s :=\n  (compL 𝕜 E F G).continuous₂.comp_continuous_on (hg.prod hf)\n#align continuous_on.clm_comp continuous_on.clm_comp\n\n",
 "add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem add (hf : is_bounded_linear_map 𝕜 f) (hg : is_bounded_linear_map 𝕜 g) :\n    is_bounded_linear_map 𝕜 fun e => f e + g e :=\n  let ⟨hlf, Mf, hMfp, hMf⟩ := hf\n  let ⟨hlg, Mg, hMgp, hMg⟩ := hg\n  (hlf.mk' _ + hlg.mk' _).is_linear.with_bound (Mf + Mg) fun x =>\n    calc\n      «expr‖ ‖» (f x + g x) ≤ Mf * «expr‖ ‖» x + Mg * «expr‖ ‖» x := norm_add_le_of_le (hMf x) (hMg x)\n      _ ≤ (Mf + Mg) * «expr‖ ‖» x := by rw [add_mul]\n      \n#align add add\n\n"}