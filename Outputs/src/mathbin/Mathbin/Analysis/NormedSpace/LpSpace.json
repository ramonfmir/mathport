{"zero_mem_ℓp'":
 "theorem zero_mem_ℓp' : mem_ℓp (fun i : α => (0 : E i)) p :=\n  zero_mem_ℓp\n#align zero_mem_ℓp' zero_mem_ℓp'\n\n",
 "zero_mem_ℓp":
 "theorem zero_mem_ℓp : mem_ℓp (0 : ∀ i, E i) p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · apply mem_ℓp_zero\n    simp\n  · apply mem_ℓp_infty\n    simp only [norm_zero, Pi.zero_apply]\n    exact bdd_above_singleton.mono Set.range_const_subset\n  · apply mem_ℓp_gen\n    simp [real.zero_rpow hp.ne', summable_zero]\n#align zero_mem_ℓp zero_mem_ℓp\n\n",
 "uniform_continuous_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The coercion from `lp E p` to `Π i, E i` is uniformly continuous. -/\ntheorem uniform_continuous_coe [_i : Fact (1 ≤ p)] : UniformContinuous (coe : lp E p → ∀ i, E i) :=\n  by\n  have hp : p ≠ 0 := (zero_lt_one.trans_le _i.elim).ne'\n  rw [uniformContinuous_pi]\n  intro i\n  rw [normed_add_comm_group.uniformity_basis_dist.uniform_continuous_iff NormedAddCommGroup.uniformity_basis_dist]\n  intro ε hε\n  refine' ⟨ε, hε, _⟩\n  rintro f g (hfg : «expr‖ ‖» (f - g) < ε)\n  have : «expr‖ ‖» (f i - g i) ≤ «expr‖ ‖» (f - g) := norm_apply_le_norm hp (f - g) i\n  exact this.trans_lt hfg\n#align uniform_continuous_coe uniform_continuous_coe\n\n",
 "tsum_mul_le_mul_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem tsum_mul_le_mul_norm' {p q : ennreal} (hpq : p.to_real.is_conjugate_exponent q.to_real) (f : lp E p)\n    (g : lp E q) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        («expr‖ ‖» (f i) * «expr‖ ‖» (g i)) ≤\n      «expr‖ ‖» f * «expr‖ ‖» g :=\n  (lp.tsum_mul_le_mul_norm hpq f g).2\n#align tsum_mul_le_mul_norm' tsum_mul_le_mul_norm'\n\n",
 "tsum_mul_le_mul_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n-- apply Minkowski's inequality\n-- TODO: define an `ennreal` version of `is_conjugate_exponent`, and then express this inequality\n-- in a better version which also covers the case `p = 1, q = ∞`.\n/-- Hölder inequality -/\nprotected theorem tsum_mul_le_mul_norm {p q : ennreal} (hpq : p.to_real.is_conjugate_exponent q.to_real) (f : lp E p)\n    (g : lp E q) :\n    (Summable fun i => «expr‖ ‖» (f i) * «expr‖ ‖» (g i)) ∧\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          («expr‖ ‖» (f i) * «expr‖ ‖» (g i)) ≤\n        «expr‖ ‖» f * «expr‖ ‖» g :=\n  by\n  have hf₁ : ∀ i, 0 ≤ «expr‖ ‖» (f i) := fun i => norm_nonneg _\n  have hg₁ : ∀ i, 0 ≤ «expr‖ ‖» (g i) := fun i => norm_nonneg _\n  have hf₂ := lp.has_sum_norm hpq.pos f\n  have hg₂ := lp.has_sum_norm hpq.symm.pos g\n  obtain ⟨C, -, hC', hC⟩ :=\n    real.inner_le_Lp_mul_Lq_has_sum_of_nonneg hpq (norm_nonneg' _) (norm_nonneg' _) hf₁ hg₁ hf₂ hg₂\n  rw [← hC.tsum_eq] at hC'\n  exact ⟨hC.summable, hC'⟩\n#align tsum_mul_le_mul_norm tsum_mul_le_mul_norm\n\n",
 "tendsto_lp_of_tendsto_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to a element `f` of\n`lp E p`, then it converges to `f` in the `lp E p` topology. -/\ntheorem tendsto_lp_of_tendsto_pi {F : ℕ → lp E p} (hF : CauchySeq F) {f : lp E p}\n    (hf : Tendsto (id fun i => F i : ℕ → ∀ a, E a) atTop ((nhds) f)) : Tendsto F atTop ((nhds) f) :=\n  by\n  rw [metric.nhds_basis_closed_ball.tendsto_right_iff]\n  intro ε hε\n  have hε' : { p : lp E p × lp E p | «expr‖ ‖» (p.1 - p.2) < ε } ∈ (uniformity) (lp E p) :=\n    normed_add_comm_group.uniformity_basis_dist.mem_of_mem hε\n  refine' (hF.eventually_eventually hε').mono _\n  rintro n\n    (hn :\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" at_top\n          («expr‖ ‖» ((fun f => F n - f) (F l)) < ε))\n  refine' norm_le_of_tendsto (hn.mono fun k hk => hk.le) _\n  rw [tendsto_pi_nhds]\n  intro a\n  exact (hf.apply a).const_sub (F n a)\n#align tendsto_lp_of_tendsto_pi tendsto_lp_of_tendsto_pi\n\n",
 "summable_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem summable_mul {p q : ennreal} (hpq : p.to_real.is_conjugate_exponent q.to_real) (f : lp E p)\n    (g : lp E q) : Summable fun i => «expr‖ ‖» (f i) * «expr‖ ‖» (g i) :=\n  (lp.tsum_mul_le_mul_norm hpq f g).1\n#align summable_mul summable_mul\n\n",
 "sum_rpow_le_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem sum_rpow_le_of_tendsto (hp : p ≠ ennreal.top) {C : exprℝ} {F : ι → lp E p}\n    (hCF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (F k) ≤ C))\n    {f : ∀ a, E a} (hf : Tendsto (id fun i => F i : ι → ∀ a, E a) l ((nhds) f)) (s : Finset α) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i) ^ p.to_real) ≤\n      C ^ p.to_real :=\n  by\n  have hp' : p ≠ 0 := (zero_lt_one.trans_le _i.elim).ne'\n  have hp'' : 0 < p.to_real := ENNReal.toReal_pos hp' hp\n  let G : (∀ a, E a) → exprℝ := fun f =>\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n      («expr‖ ‖» (f a) ^ p.to_real)\n  have hG : Continuous G := by\n    refine' continuous_finset_sum s _\n    intro a ha\n    have : Continuous fun f : ∀ a, E a => f a := continuous_apply a\n    exact this.norm.rpow_const fun _ => or.inr hp''.le\n  refine' le_of_tendsto (hG.continuous_at.tendsto.comp hf) _\n  refine' hCF.mono _\n  intro k hCFk\n  refine' (lp.sum_rpow_le_norm_rpow hp'' (F k) s).trans _\n  exact real.rpow_le_rpow (norm_nonneg _) hCFk hp''.le\n#align sum_rpow_le_of_tendsto sum_rpow_le_of_tendsto\n\n",
 "sum_rpow_le_norm_rpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem sum_rpow_le_norm_rpow (hp : 0 < p.to_real) (f : lp E p) (s : Finset α) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i) ^ p.to_real) ≤\n      «expr‖ ‖» f ^ p.to_real :=\n  by\n  rw [lp.norm_rpow_eq_tsum hp f]\n  have : ∀ i, 0 ≤ «expr‖ ‖» (f i) ^ p.to_real := fun i => real.rpow_nonneg_of_nonneg (norm_nonneg _) _\n  refine' sum_le_tsum _ (fun i hi => this i) _\n  exact (lp.mem_ℓp f).summable hp\n#align sum_rpow_le_norm_rpow sum_rpow_le_norm_rpow\n\n",
 "sub":
 "theorem sub {f g : ∀ i, E i} (hf : mem_ℓp f p) (hg : mem_ℓp g p) : mem_ℓp (f - g) p :=\n  by\n  rw [sub_eq_add_neg]\n  exact hf.add hg.neg\n#align sub sub\n\n",
 "star_mem":
 "theorem _root_.mem_ℓp.star_mem {f : ∀ i, E i} (hf : mem_ℓp f p) : mem_ℓp (star f) p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · apply mem_ℓp_zero\n    simp [hf.finite_dsupport]\n  · apply mem_ℓp_infty\n    simpa using hf.bdd_above\n  · apply mem_ℓp_gen\n    simpa using hf.summable hp\n#align mem_ℓp.star_mem mem_ℓp.star_mem\n\n",
 "star_iff":
 "@[simp]\ntheorem _root_.mem_ℓp.star_iff {f : ∀ i, E i} : mem_ℓp (star f) p ↔ mem_ℓp f p :=\n  ⟨fun h => star_star f ▸ mem_ℓp.star_mem h, mem_ℓp.star_mem⟩\n#align mem_ℓp.star_iff mem_ℓp.star_iff\n\n",
 "star_apply":
 "@[simp]\nprotected theorem star_apply (f : lp E p) (i : α) : star f i = star (f i) :=\n  rfl\n#align star_apply star_apply\n\n",
 "single_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\nprotected theorem single_smul (p) (i : α) (a : E i) (c : 𝕜) :\n    lp.single p i («expr • » c a) = «expr • » c (lp.single p i a) :=\n  by\n  ext j\n  by_cases hi : j = i\n  · subst hi\n    simp [lp.single_apply_self]\n  · simp [lp.single_apply_ne p i _ hi]\n#align single_smul single_smul\n\n",
 "single_neg":
 "@[simp]\nprotected theorem single_neg (p) (i : α) (a : E i) : lp.single p i (-a) = -lp.single p i a :=\n  by\n  ext j\n  by_cases hi : j = i\n  · subst hi\n    simp [lp.single_apply_self]\n  · simp [lp.single_apply_ne p i _ hi]\n#align single_neg single_neg\n\n",
 "single_apply_self":
 "protected theorem single_apply_self (p) (i : α) (a : E i) : lp.single p i a i = a := by\n  rw [lp.single_apply, dif_pos rfl]\n#align single_apply_self single_apply_self\n\n",
 "single_apply_ne":
 "protected theorem single_apply_ne (p) (i : α) (a : E i) {j : α} (hij : j ≠ i) : lp.single p i a j = 0 := by\n  rw [lp.single_apply, dif_neg hij]\n#align single_apply_ne single_apply_ne\n\n",
 "single_apply":
 "protected theorem single_apply (p) (i : α) (a : E i) (j : α) :\n    lp.single p i a j = if h : j = i then eq.rec a h.symm else 0 :=\n  rfl\n#align single_apply single_apply\n\n",
 "one_mem_ℓp_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n-- we also want a `non_unital_normed_comm_ring` instance, but this has to wait for #13719\ntheorem _root_.one_mem_ℓp_infty : mem_ℓp (1 : ∀ i, B i) (ennreal.top) :=\n  ⟨1, by\n    rintro i ⟨i, rfl⟩\n    exact norm_one.le⟩\n#align one_mem_ℓp_infty one_mem_ℓp_infty\n\n",
 "of_exponent_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (i «expr ∉ » hfq.finite_dsupport.to_finset) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem of_exponent_ge {p q : ennreal} {f : ∀ i, E i} (hfq : mem_ℓp f q) (hpq : q ≤ p) : mem_ℓp f p :=\n  by\n  rcases ENNReal.trichotomy₂ hpq with (⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ | ⟨rfl, hp⟩ | ⟨rfl, rfl⟩ | ⟨hq, rfl⟩ | ⟨hq, hp, hpq'⟩)\n  · exact hfq\n  · apply mem_ℓp_infty\n    obtain ⟨C, hC⟩ := (hfq.finite_dsupport.image fun i => «expr‖ ‖» (f i)).bdd_above\n    use max 0 C\n    rintro x ⟨i, rfl⟩\n    by_cases hi : f i = 0\n    · simp [hi]\n    · exact (hC ⟨i, hi, rfl⟩).trans (le_max_right _ _)\n  · apply mem_ℓp_gen\n    have : ∀ (i) (_ : i ∉ hfq.finite_dsupport.to_finset), «expr‖ ‖» (f i) ^ p.to_real = 0 :=\n      by\n      intro i hi\n      have : f i = 0 := by simpa using hi\n      simp [this, real.zero_rpow hp.ne']\n    exact summable_of_ne_finset_zero this\n  · exact hfq\n  · apply mem_ℓp_infty\n    obtain ⟨A, hA⟩ := (hfq.summable hq).tendsto_cofinite_zero.bdd_above_range_of_cofinite\n    use A ^ q.to_real⁻¹\n    rintro x ⟨i, rfl⟩\n    have : 0 ≤ «expr‖ ‖» (f i) ^ q.to_real := real.rpow_nonneg_of_nonneg (norm_nonneg _) _\n    simpa [← real.rpow_mul, mul_inv_cancel hq.ne'] using real.rpow_le_rpow this (hA ⟨i, rfl⟩) (inv_nonneg.mpr hq.le)\n  · apply mem_ℓp_gen\n    have hf' := hfq.summable hq\n    refine' summable_of_norm_bounded_eventually _ hf' (@Set.Finite.subset _ { i | 1 ≤ «expr‖ ‖» (f i) } _ _ _)\n    · have H : { x : α | 1 ≤ «expr‖ ‖» (f x) ^ q.to_real }.finite := by\n        simpa using eventually_lt_of_tendsto_lt (by norm_num : (0 : exprℝ) < 1) hf'.tendsto_cofinite_zero\n      exact H.subset fun i hi => real.one_le_rpow hi hq.le\n    · show ∀ i, ¬|«expr‖ ‖» (f i) ^ p.to_real| ≤ «expr‖ ‖» (f i) ^ q.to_real → 1 ≤ «expr‖ ‖» (f i)\n      intro i hi\n      have : 0 ≤ «expr‖ ‖» (f i) ^ p.to_real := real.rpow_nonneg_of_nonneg (norm_nonneg _) p.to_real\n      simp only [abs_of_nonneg, this] at hi\n      contrapose! hi\n      exact real.rpow_le_rpow_of_exponent_ge' (norm_nonneg _) hi.le hq.le hpq'\n#align of_exponent_ge of_exponent_ge\n\n",
 "norm_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_zero /-\n@[simp]\ntheorem norm_zero : «expr‖ ‖» (0 : lp E p) = 0 :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · simp [lp.norm_eq_card_dsupport]\n  · simp [lp.norm_eq_csupr]\n  · rw [lp.norm_eq_tsum_rpow hp]\n    have hp' : 1 / p.to_real ≠ 0 := one_div_ne_zero hp.ne'\n    simpa [real.zero_rpow hp.ne'] using real.zero_rpow hp'\n#align norm_zero norm_zero\n-/\n\n",
 "norm_sum_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (i «expr ∉ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem norm_sum_single (hp : 0 < p.to_real) (f : ∀ i, E i) (s : Finset α) :\n    «expr‖ ‖»\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n            (lp.single p i (f i))) ^\n        p.to_real =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i) ^ p.to_real) :=\n  by\n  refine'\n    (has_sum_norm hp\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n            (lp.single p i (f i)))).unique\n      _\n  simp only [lp.single_apply, coe_fn_sum, Finset.sum_apply, Finset.sum_dite_eq]\n  have h : ∀ (i) (_ : i ∉ s), «expr‖ ‖» (ite (i ∈ s) (f i) 0) ^ p.to_real = 0 :=\n    by\n    intro i hi\n    simp [if_neg hi, real.zero_rpow hp.ne']\n  have h' : ∀ i ∈ s, «expr‖ ‖» (f i) ^ p.to_real = «expr‖ ‖» (ite (i ∈ s) (f i) 0) ^ p.to_real :=\n    by\n    intro i hi\n    rw [if_pos hi]\n  simpa [Finset.sum_congr rfl h'] using hasSum_sum_of_ne_finset_zero h\n#align norm_sum_single norm_sum_single\n\n",
 "norm_sub_norm_compl_sub_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (i «expr ∉ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem norm_sub_norm_compl_sub_single (hp : 0 < p.to_real) (f : lp E p) (s : Finset α) :\n    «expr‖ ‖» f ^ p.to_real -\n        «expr‖ ‖»\n            (f -\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                (lp.single p i (f i))) ^\n          p.to_real =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i) ^ p.to_real) :=\n  by\n  refine'\n    ((has_sum_norm hp f).sub\n          (has_sum_norm hp\n            (f -\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                (lp.single p i (f i))))).unique\n      _\n  let F : α → exprℝ := fun i =>\n    «expr‖ ‖» (f i) ^ p.to_real -\n      «expr‖ ‖»\n          ((f -\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                (lp.single p i (f i)))\n            i) ^\n        p.to_real\n  have hF : ∀ (i) (_ : i ∉ s), F i = 0 := by\n    intro i hi\n    suffices «expr‖ ‖» (f i) ^ p.to_real - «expr‖ ‖» (f i - ite (i ∈ s) (f i) 0) ^ p.to_real = 0 by\n      simpa only [F, coe_fn_sum, lp.single_apply, coe_fn_sub, Pi.sub_apply, Finset.sum_apply, Finset.sum_dite_eq] using\n        this\n    simp only [if_neg hi, sub_zero, sub_self]\n  have hF' : ∀ i ∈ s, F i = «expr‖ ‖» (f i) ^ p.to_real :=\n    by\n    intro i hi\n    simp only [F, coe_fn_sum, lp.single_apply, if_pos hi, sub_self, eq_self_iff_true, coe_fn_sub, Pi.sub_apply,\n      Finset.sum_apply, Finset.sum_dite_eq, sub_eq_self]\n    simp [real.zero_rpow hp.ne']\n  have :\n    HasSum F\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (F i)) :=\n    hasSum_sum_of_ne_finset_zero hF\n  rwa [Finset.sum_congr rfl hF'] at this\n#align norm_sub_norm_compl_sub_single norm_sub_norm_compl_sub_single\n\n",
 "norm_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem norm_single (hp : 0 < p.to_real) (f : ∀ i, E i) (i : α) :\n    «expr‖ ‖» (lp.single p i (f i)) = «expr‖ ‖» (f i) :=\n  by\n  refine' real.rpow_left_inj_on hp.ne' (norm_nonneg' _) (norm_nonneg _) _\n  simpa using lp.norm_sum_single hp f {i}\n#align norm_single norm_single\n\n",
 "norm_rpow_eq_tsum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_rpow_eq_tsum (hp : 0 < p.to_real) (f : lp E p) :\n    «expr‖ ‖» f ^ p.to_real =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        («expr‖ ‖» (f i) ^ p.to_real) :=\n  by\n  rw [norm_eq_tsum_rpow hp, ← real.rpow_mul]\n  · field_simp [hp.ne']\n  apply tsum_nonneg\n  intro i\n  calc\n    (0 : exprℝ) = 0 ^ p.to_real := by rw [real.zero_rpow hp.ne']\n    _ ≤ _ := real.rpow_le_rpow rfl.le (norm_nonneg (f i)) hp.le\n    \n#align norm_rpow_eq_tsum norm_rpow_eq_tsum\n\n",
 "norm_nonneg'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_nonneg' /-\ntheorem norm_nonneg' (f : lp E p) : 0 ≤ «expr‖ ‖» f :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · simp [lp.norm_eq_card_dsupport f]\n  · cases' isEmpty_or_nonempty α with _i _i <;> skip\n    · rw [lp.norm_eq_csupr]\n      simp [Real.csupᵢ_empty]\n    inhabit α\n    exact (norm_nonneg (f default)).trans ((lp.is_lub_norm f).1 ⟨default, rfl⟩)\n  · rw [lp.norm_eq_tsum_rpow hp f]\n    refine' real.rpow_nonneg_of_nonneg (tsum_nonneg _) _\n    exact fun i => real.rpow_nonneg_of_nonneg (norm_nonneg _) _\n#align norm_nonneg' norm_nonneg'\n-/\n\n",
 "norm_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_neg /-\n@[simp]\ntheorem norm_neg ⦃f : lp E p⦄ : «expr‖ ‖» (-f) = «expr‖ ‖» f :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · simp [lp.norm_eq_card_dsupport]\n  · cases isEmpty_or_nonempty α <;> skip\n    · simp [lp.eq_zero' f]\n    apply (lp.is_lub_norm (-f)).unique\n    simpa using lp.is_lub_norm f\n  · suffices «expr‖ ‖» (-f) ^ p.to_real = «expr‖ ‖» f ^ p.to_real by\n      exact real.rpow_left_inj_on hp.ne' (norm_nonneg' _) (norm_nonneg' _) this\n    apply (lp.has_sum_norm hp (-f)).unique\n    simpa using lp.has_sum_norm hp f\n#align norm_neg norm_neg\n-/\n\n",
 "norm_le_of_tsum_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_le_of_tsum_le (hp : 0 < p.to_real) {C : exprℝ} (hC : 0 ≤ C) {f : lp E p}\n    (hf :\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          («expr‖ ‖» (f i) ^ p.to_real) ≤\n        C ^ p.to_real) :\n    «expr‖ ‖» f ≤ C := by\n  rw [← real.rpow_le_rpow_iff (norm_nonneg' _) hC hp, norm_rpow_eq_tsum hp]\n  exact hf\n#align norm_le_of_tsum_le norm_le_of_tsum_le\n\n",
 "norm_le_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- \"Semicontinuity of the `lp` norm\": If all sufficiently large elements of a sequence in `lp E p`\n have `lp` norm `≤ C`, then the pointwise limit, if it exists, also has `lp` norm `≤ C`. -/\ntheorem norm_le_of_tendsto {C : exprℝ} {F : ι → lp E p}\n    (hCF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (F k) ≤ C))\n    {f : lp E p} (hf : Tendsto (id fun i => F i : ι → ∀ a, E a) l ((nhds) f)) : «expr‖ ‖» f ≤ C :=\n  by\n  obtain ⟨i, hi⟩ := hCF.exists\n  have hC : 0 ≤ C := (norm_nonneg _).trans hi\n  rcases eq_top_or_lt_top p with (rfl | hp)\n  · apply norm_le_of_forall_le hC\n    exact norm_apply_le_of_tendsto hCF hf\n  · have : 0 < p := zero_lt_one.trans_le _i.elim\n    have hp' : 0 < p.to_real := ENNReal.toReal_pos this.ne' hp.ne\n    apply norm_le_of_forall_sum_le hp' hC\n    exact sum_rpow_le_of_tendsto hp.ne hCF hf\n#align norm_le_of_tendsto norm_le_of_tendsto\n\n",
 "norm_le_of_forall_sum_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_le_of_forall_sum_le (hp : 0 < p.to_real) {C : exprℝ} (hC : 0 ≤ C) {f : lp E p}\n    (hf :\n      ∀ s : Finset α,\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n            («expr‖ ‖» (f i) ^ p.to_real) ≤\n          C ^ p.to_real) :\n    «expr‖ ‖» f ≤ C :=\n  norm_le_of_tsum_le hp hC (tsum_le_of_sum_le ((lp.mem_ℓp f).summable hp) hf)\n#align norm_le_of_forall_sum_le norm_le_of_forall_sum_le\n\n",
 "norm_le_of_forall_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_le_of_forall_le' [Nonempty α] {f : lp E (ennreal.top)} (C : exprℝ) (hCf : ∀ i, «expr‖ ‖» (f i) ≤ C) :\n    «expr‖ ‖» f ≤ C := by\n  refine' (is_lub_norm f).2 _\n  rintro - ⟨i, rfl⟩\n  exact hCf i\n#align norm_le_of_forall_le' norm_le_of_forall_le'\n\n",
 "norm_le_of_forall_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_le_of_forall_le {f : lp E (ennreal.top)} {C : exprℝ} (hC : 0 ≤ C) (hCf : ∀ i, «expr‖ ‖» (f i) ≤ C) :\n    «expr‖ ‖» f ≤ C := by\n  cases isEmpty_or_nonempty α\n  · simpa [eq_zero' f] using hC\n  · exact norm_le_of_forall_le' C hCf\n#align norm_le_of_forall_le norm_le_of_forall_le\n\n",
 "norm_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_zero_iff {f : lp E p} : «expr‖ ‖» f = 0 ↔ f = 0 := by\n  classical\n    refine'\n      ⟨fun h => _, by\n        rintro rfl\n        exact norm_zero⟩\n    rcases p.trichotomy with (rfl | rfl | hp)\n    · ext i\n      have : { i : α | ¬f i = 0 } = ∅ := by simpa [lp.norm_eq_card_dsupport f] using h\n      have : (¬f i = 0) = False := congr_fun this i\n      tauto\n    · cases' isEmpty_or_nonempty α with _i _i <;> skip\n      · simp\n      have H : IsLUB (Set.range fun i => «expr‖ ‖» (f i)) 0 := by simpa [h] using lp.is_lub_norm f\n      ext i\n      have : «expr‖ ‖» (f i) = 0 := le_antisymm (H.1 ⟨i, rfl⟩) (norm_nonneg _)\n      simpa using this\n    · have hf : HasSum (fun i : α => «expr‖ ‖» (f i) ^ p.to_real) 0 :=\n        by\n        have := lp.has_sum_norm hp f\n        rwa [h, real.zero_rpow hp.ne'] at this\n      have : ∀ i, 0 ≤ «expr‖ ‖» (f i) ^ p.to_real := fun i => real.rpow_nonneg_of_nonneg (norm_nonneg _) _\n      rw [hasSum_zero_iff_of_nonneg this] at hf\n      ext i\n      have : f i = 0 ∧ p.to_real ≠ 0 := by\n        simpa [real.rpow_eq_zero_iff_of_nonneg (norm_nonneg (f i))] using congr_fun hf i\n      exact this.1\n#align norm_eq_zero_iff norm_eq_zero_iff\n\n",
 "norm_eq_tsum_rpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_tsum_rpow (hp : 0 < p.to_real) (f : lp E p) :\n    «expr‖ ‖» f =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          («expr‖ ‖» (f i) ^ p.to_real) ^\n        (1 / p.to_real) :=\n  by\n  dsimp [norm]\n  rw [ENNReal.toReal_pos_iff] at hp\n  rw [dif_neg hp.1.ne', if_neg hp.2.ne]\n#align norm_eq_tsum_rpow norm_eq_tsum_rpow\n\n",
 "norm_eq_csupr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_csupr (f : lp E (ennreal.top)) :\n    «expr‖ ‖» f =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        («expr‖ ‖» (f i)) :=\n  by\n  dsimp [norm]\n  rw [dif_neg ENNReal.top_ne_zero, if_pos rfl]\n#align norm_eq_csupr norm_eq_csupr\n\n",
 "norm_eq_card_dsupport":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_card_dsupport (f : lp E 0) : «expr‖ ‖» f = (lp.mem_ℓp f).finite_dsupport.to_finset.card :=\n  dif_pos rfl\n#align norm_eq_card_dsupport norm_eq_card_dsupport\n\n",
 "norm_const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_const_smul (hp : p ≠ 0) {c : 𝕜} (f : lp E p) : «expr‖ ‖» («expr • » c f) = «expr‖ ‖» c * «expr‖ ‖» f :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · exact absurd rfl hp\n  · cases isEmpty_or_nonempty α <;> skip\n    · simp [lp.eq_zero' f]\n    apply (lp.is_lub_norm («expr • » c f)).unique\n    convert(lp.is_lub_norm f).mul_left (norm_nonneg c)\n    ext a\n    simp [coe_fn_smul, norm_smul]\n  · suffices «expr‖ ‖» («expr • » c f) ^ p.to_real = («expr‖ ‖» c * «expr‖ ‖» f) ^ p.to_real\n      by\n      refine' real.rpow_left_inj_on hp.ne' _ _ this\n      · exact norm_nonneg' _\n      · exact mul_nonneg (norm_nonneg _) (norm_nonneg' _)\n    apply (lp.has_sum_norm hp («expr • » c f)).unique\n    convert(lp.has_sum_norm hp f).mul_left («expr‖ ‖» c ^ p.to_real)\n    · simp [coe_fn_smul, norm_smul, real.mul_rpow (norm_nonneg c) (norm_nonneg _)]\n    have hf : 0 ≤ «expr‖ ‖» f := lp.norm_nonneg' f\n    simp [coe_fn_smul, norm_smul, real.mul_rpow (norm_nonneg c) hf]\n#align norm_const_smul norm_const_smul\n\n",
 "norm_compl_sum_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem norm_compl_sum_single (hp : 0 < p.to_real) (f : lp E p) (s : Finset α) :\n    «expr‖ ‖»\n          (f -\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n              (lp.single p i (f i))) ^\n        p.to_real =\n      «expr‖ ‖» f ^ p.to_real -\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n          («expr‖ ‖» (f i) ^ p.to_real) :=\n  by linarith [lp.norm_sub_norm_compl_sub_single hp f s]\n#align norm_compl_sum_single norm_compl_sum_single\n\n",
 "norm_apply_le_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_apply_le_of_tendsto {C : exprℝ} {F : ι → lp E (ennreal.top)}\n    (hCF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (F k) ≤ C))\n    {f : ∀ a, E a} (hf : Tendsto (id fun i => F i : ι → ∀ a, E a) l ((nhds) f)) (a : α) : «expr‖ ‖» (f a) ≤ C :=\n  by\n  have : tendsto (fun k => «expr‖ ‖» (F k a)) l ((nhds) («expr‖ ‖» (f a))) :=\n    (tendsto.comp (continuous_apply a).continuous_at hf).norm\n  refine' le_of_tendsto this (hCF.mono _)\n  intro k hCFk\n  exact (norm_apply_le_norm ENNReal.top_ne_zero (F k) a).trans hCFk\n#align norm_apply_le_of_tendsto norm_apply_le_of_tendsto\n\n",
 "norm_apply_le_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_apply_le_norm (hp : p ≠ 0) (f : lp E p) (i : α) : «expr‖ ‖» (f i) ≤ «expr‖ ‖» f :=\n  by\n  rcases eq_or_ne p (ennreal.top) with (rfl | hp')\n  · haveI : Nonempty α := ⟨i⟩\n    exact (is_lub_norm f).1 ⟨i, rfl⟩\n  have hp'' : 0 < p.to_real := ENNReal.toReal_pos hp hp'\n  have : ∀ i, 0 ≤ «expr‖ ‖» (f i) ^ p.to_real := fun i => real.rpow_nonneg_of_nonneg (norm_nonneg _) _\n  rw [← real.rpow_le_rpow_iff (norm_nonneg _) (norm_nonneg' _) hp'']\n  convert le_hasSum (has_sum_norm hp'' f) i fun i hi => this i\n#align norm_apply_le_norm norm_apply_le_norm\n\n",
 "neg_iff":
 "@[simp]\ntheorem neg_iff {f : ∀ i, E i} : mem_ℓp (-f) p ↔ mem_ℓp f p :=\n  ⟨fun h => neg_neg f ▸ h.neg, mem_ℓp.neg⟩\n#align neg_iff neg_iff\n\n",
 "neg":
 "theorem neg {f : ∀ i, E i} (hf : mem_ℓp f p) : mem_ℓp (-f) p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · apply mem_ℓp_zero\n    simp [hf.finite_dsupport]\n  · apply mem_ℓp_infty\n    simpa using hf.bdd_above\n  · apply mem_ℓp_gen\n    simpa using hf.summable hp\n#align neg neg\n\n",
 "nat_cast_mem_ℓp_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.nat_cast_mem_ℓp_infty (n : ℕ) : mem_ℓp (n : ∀ i, B i) (ennreal.top) :=\n  natCast_mem (lp_infty_subring B) n\n#align nat_cast_mem_ℓp_infty nat_cast_mem_ℓp_infty\n\n",
 "mem_ℓp_zero_iff":
 "/-\nCopyright (c) 2021 Heather Macbeth. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Heather Macbeth\n-/\ntheorem mem_ℓp_zero_iff {f : ∀ i, E i} : mem_ℓp f 0 ↔ Set.Finite { i | f i ≠ 0 } := by\n  dsimp [mem_ℓp] <;> rw [if_pos rfl]\n#align mem_ℓp_zero_iff mem_ℓp_zero_iff\n\n",
 "mem_ℓp_zero":
 "theorem mem_ℓp_zero {f : ∀ i, E i} (hf : Set.Finite { i | f i ≠ 0 }) : mem_ℓp f 0 :=\n  mem_ℓp_zero_iff.2 hf\n#align mem_ℓp_zero mem_ℓp_zero\n\n",
 "mem_ℓp_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. -/\ntheorem mem_ℓp_of_tendsto {F : ι → lp E p} (hF : Metric.Bounded (Set.range F)) {f : ∀ a, E a}\n    (hf : Tendsto (id fun i => F i : ι → ∀ a, E a) l ((nhds) f)) : mem_ℓp f p :=\n  by\n  obtain ⟨C, hC, hCF'⟩ := hF.exists_pos_norm_le\n  have hCF : ∀ k, «expr‖ ‖» (F k) ≤ C := fun k => hCF' _ ⟨k, rfl⟩\n  rcases eq_top_or_lt_top p with (rfl | hp)\n  · apply mem_ℓp_infty\n    use C\n    rintro _ ⟨a, rfl⟩\n    refine' norm_apply_le_of_tendsto (eventually_of_forall hCF) hf a\n  · apply mem_ℓp_gen'\n    exact sum_rpow_le_of_tendsto hp.ne (eventually_of_forall hCF) hf\n#align mem_ℓp_of_tendsto mem_ℓp_of_tendsto\n\n",
 "mem_ℓp_infty_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem mem_ℓp_infty_iff {f : ∀ i, E i} : mem_ℓp f (ennreal.top) ↔ BddAbove (Set.range fun i => «expr‖ ‖» (f i)) := by\n  dsimp [mem_ℓp] <;> rw [if_neg ENNReal.top_ne_zero, if_pos rfl]\n#align mem_ℓp_infty_iff mem_ℓp_infty_iff\n\n",
 "mem_ℓp_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem mem_ℓp_infty {f : ∀ i, E i} (hf : BddAbove (Set.range fun i => «expr‖ ‖» (f i))) : mem_ℓp f (ennreal.top) :=\n  mem_ℓp_infty_iff.2 hf\n#align mem_ℓp_infty mem_ℓp_infty\n\n",
 "mem_ℓp_gen_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem mem_ℓp_gen_iff (hp : 0 < p.to_real) {f : ∀ i, E i} :\n    mem_ℓp f p ↔ Summable fun i => «expr‖ ‖» (f i) ^ p.to_real :=\n  by\n  rw [ENNReal.toReal_pos_iff] at hp\n  dsimp [mem_ℓp]\n  rw [if_neg hp.1.ne', if_neg hp.2.ne]\n#align mem_ℓp_gen_iff mem_ℓp_gen_iff\n\n",
 "mem_ℓp_gen'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem mem_ℓp_gen' {C : exprℝ} {f : ∀ i, E i}\n    (hf :\n      ∀ s : Finset α,\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n            («expr‖ ‖» (f i) ^ p.to_real) ≤\n          C) :\n    mem_ℓp f p := by\n  apply mem_ℓp_gen\n  use\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i) ^ p.to_real))\n  apply hasSum_of_isLUB_of_nonneg\n  · intro b\n    exact real.rpow_nonneg_of_nonneg (norm_nonneg _) _\n  apply isLUB_csupᵢ\n  use C\n  rintro - ⟨s, rfl⟩\n  exact hf s\n#align mem_ℓp_gen' mem_ℓp_gen'\n\n",
 "mem_ℓp_gen":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem mem_ℓp_gen {f : ∀ i, E i} (hf : Summable fun i => «expr‖ ‖» (f i) ^ p.to_real) : mem_ℓp f p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · apply mem_ℓp_zero\n    have H : Summable fun i : α => (1 : exprℝ) := by simpa using hf\n    exact (Set.Finite.of_summable_const (by norm_num) H).subset (Set.subset_univ _)\n  · apply mem_ℓp_infty\n    have H : Summable fun i : α => (1 : exprℝ) := by simpa using hf\n    simpa using ((Set.Finite.of_summable_const (by norm_num) H).image fun i => «expr‖ ‖» (f i)).bdd_above\n  exact (mem_ℓp_gen_iff hp).2 hf\n#align mem_ℓp_gen mem_ℓp_gen\n\n",
 "mem_ℓp":
 "protected theorem mem_ℓp (f : lp E p) : mem_ℓp f p :=\n  f.prop\n#align mem_ℓp mem_ℓp\n\n",
 "mem_lp_const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mem_lp_const_smul (c : 𝕜) (f : lp E p) : «expr • » c (f : pre_lp E) ∈ lp E p :=\n  (lp.mem_ℓp f).const_smul c\n#align mem_lp_const_smul mem_lp_const_smul\n\n",
 "is_lub_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_lub_norm [Nonempty α] (f : lp E (ennreal.top)) : IsLUB (Set.range fun i => «expr‖ ‖» (f i)) («expr‖ ‖» f) :=\n  by\n  rw [lp.norm_eq_csupr]\n  exact isLUB_csupᵢ (lp.mem_ℓp f)\n#align is_lub_norm is_lub_norm\n\n",
 "int_cast_mem_ℓp_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.int_cast_mem_ℓp_infty (z : ℤ) : mem_ℓp (z : ∀ i, B i) (ennreal.top) :=\n  coe_int_mem (lp_infty_subring B) z\n#align int_cast_mem_ℓp_infty int_cast_mem_ℓp_infty\n\n",
 "infty_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.mem_ℓp.infty_pow {f : ∀ i, B i} (hf : mem_ℓp f (ennreal.top)) (n : ℕ) : mem_ℓp (f ^ n) (ennreal.top) :=\n  (lp_infty_subring B).pow_mem hf n\n#align mem_ℓp.infty_pow mem_ℓp.infty_pow\n\n",
 "infty_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.mem_ℓp.infty_mul {f g : ∀ i, B i} (hf : mem_ℓp f (ennreal.top)) (hg : mem_ℓp g (ennreal.top)) :\n    mem_ℓp (f * g) (ennreal.top) := by\n  rw [mem_ℓp_infty_iff]\n  obtain ⟨⟨Cf, hCf⟩, ⟨Cg, hCg⟩⟩ := hf.bdd_above, hg.bdd_above\n  refine' ⟨Cf * Cg, _⟩\n  rintro _ ⟨i, rfl⟩\n  calc\n    «expr‖ ‖» ((f * g) i) ≤ «expr‖ ‖» (f i) * «expr‖ ‖» (g i) := norm_mul_le (f i) (g i)\n    _ ≤ Cf * Cg := mul_le_mul (hCf ⟨i, rfl⟩) (hCg ⟨i, rfl⟩) (norm_nonneg _) ((norm_nonneg _).trans (hCf ⟨i, rfl⟩))\n    \n#align mem_ℓp.infty_mul mem_ℓp.infty_mul\n\n",
 "infty_coe_fn_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem infty_coe_fn_pow (f : lp B (ennreal.top)) (n : ℕ) : «expr⇑ » (f ^ n) = f ^ n :=\n  rfl\n#align infty_coe_fn_pow infty_coe_fn_pow\n\n",
 "infty_coe_fn_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n@[simp]\ntheorem infty_coe_fn_one : «expr⇑ » (1 : lp B (ennreal.top)) = 1 :=\n  rfl\n#align infty_coe_fn_one infty_coe_fn_one\n\n",
 "infty_coe_fn_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n@[simp]\ntheorem infty_coe_fn_nat_cast (n : ℕ) : «expr⇑ » (n : lp B (ennreal.top)) = n :=\n  rfl\n#align infty_coe_fn_nat_cast infty_coe_fn_nat_cast\n\n",
 "infty_coe_fn_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem infty_coe_fn_mul (f g : lp B (ennreal.top)) : «expr⇑ » (f * g) = f * g :=\n  rfl\n#align infty_coe_fn_mul infty_coe_fn_mul\n\n",
 "infty_coe_fn_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n@[simp]\ntheorem infty_coe_fn_int_cast (z : ℤ) : «expr⇑ » (z : lp B (ennreal.top)) = z :=\n  rfl\n#align infty_coe_fn_int_cast infty_coe_fn_int_cast\n\n",
 "has_sum_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem has_sum_norm (hp : 0 < p.to_real) (f : lp E p) :\n    HasSum (fun i => «expr‖ ‖» (f i) ^ p.to_real) («expr‖ ‖» f ^ p.to_real) :=\n  by\n  rw [norm_rpow_eq_tsum hp]\n  exact ((lp.mem_ℓp f).summable hp).has_sum\n#align has_sum_norm has_sum_norm\n\n",
 "hasSum_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print hasSum_single /-\n/-- The canonical finitely-supported approximations to an element `f` of `lp` converge to it, in the\n`lp` topology. -/\nprotected theorem hasSum_single [Fact (1 ≤ p)] (hp : p ≠ «expr⊤») (f : lp E p) :\n    HasSum (fun i : α => lp.single p i (f i : E i)) f :=\n  by\n  have hp₀ : 0 < p := zero_lt_one.trans_le (fact.out _)\n  have hp' : 0 < p.to_real := ENNReal.toReal_pos hp₀.ne' hp\n  have := lp.has_sum_norm hp' f\n  rw [HasSum, Metric.tendsto_nhds] at this⊢\n  intro ε hε\n  refine' (this _ (real.rpow_pos_of_pos hε p.to_real)).mono _\n  intro s hs\n  rw [← real.rpow_lt_rpow_iff dist_nonneg (le_of_lt hε) hp']\n  rw [dist_comm] at hs\n  simp only [dist_eq_norm, Real.norm_eq_abs] at hs⊢\n  have H :\n    «expr‖ ‖»\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n              (lp.single p i (f i : E i)) -\n            f) ^\n        p.to_real =\n      «expr‖ ‖» f ^ p.to_real -\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n          («expr‖ ‖» (f i) ^ p.to_real) :=\n    by\n    simpa only [coe_fn_neg, Pi.neg_apply, lp.single_neg, Finset.sum_neg_distrib, neg_sub_neg, norm_neg,\n      _root_.norm_neg] using lp.norm_compl_sum_single hp' (-f) s\n  rw [← H] at hs\n  have :\n    |«expr‖ ‖»\n            (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                (lp.single p i (f i : E i)) -\n              f) ^\n          p.to_real| =\n      «expr‖ ‖»\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n              (lp.single p i (f i : E i)) -\n            f) ^\n        p.to_real :=\n    by simp only [real.abs_rpow_of_nonneg (norm_nonneg _), abs_norm]\n  linarith\n#align has_sum_single hasSum_single\n-/\n\n",
 "finset_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem finset_sum {ι} (s : Finset ι) {f : ι → ∀ i, E i} (hf : ∀ i ∈ s, mem_ℓp (f i) p) :\n    mem_ℓp\n      (fun a =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i a))\n      p :=\n  by\n  haveI : DecidableEq ι := Classical.decEq _\n  revert hf\n  refine' Finset.induction_on s _ _\n  · simp only [zero_mem_ℓp', Finset.sum_empty, imp_true_iff]\n  · intro i s his ih hf\n    simp only [his, Finset.sum_insert, not_false_iff]\n    exact (hf i (s.mem_insert_self i)).add (ih fun j hj => hf j (Finset.mem_insert_of_mem hj))\n#align finset_sum finset_sum\n\n",
 "finite_dsupport":
 "theorem finite_dsupport {f : ∀ i, E i} (hf : mem_ℓp f 0) : Set.Finite { i | f i ≠ 0 } :=\n  mem_ℓp_zero_iff.1 hf\n#align finite_dsupport finite_dsupport\n\n",
 "ext_iff":
 "protected theorem ext_iff {f g : lp E p} : f = g ↔ (f : ∀ i, E i) = g :=\n  Subtype.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext {f g : lp E p} (h : (f : ∀ i, E i) = g) : f = g :=\n  Subtype.ext h\n#align ext ext\n\n",
 "eq_zero_iff_coe_fn_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem eq_zero_iff_coe_fn_eq_zero {f : lp E p} : f = 0 ↔ «expr⇑ » f = 0 := by rw [lp.ext_iff, coe_fn_zero]\n#align eq_zero_iff_coe_fn_eq_zero eq_zero_iff_coe_fn_eq_zero\n\n",
 "eq_zero'":
 "theorem eq_zero' [IsEmpty α] (f : lp E p) : f = 0 :=\n  subsingleton.elim f 0\n#align eq_zero' eq_zero'\n\n",
 "const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem const_smul {f : ∀ i, E i} (hf : mem_ℓp f p) (c : 𝕜) : mem_ℓp («expr • » c f) p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · apply mem_ℓp_zero\n    refine' hf.finite_dsupport.subset fun i => (_ : ¬«expr • » c (f i) = 0 → ¬f i = 0)\n    exact not_imp_not.mpr fun hf' => hf'.symm ▸ smul_zero c\n  · obtain ⟨A, hA⟩ := hf.bdd_above\n    refine' mem_ℓp_infty ⟨«expr‖ ‖» c * A, _⟩\n    rintro a ⟨i, rfl⟩\n    simpa [norm_smul] using mul_le_mul_of_nonneg_left (hA ⟨i, rfl⟩) (norm_nonneg c)\n  · apply mem_ℓp_gen\n    convert(hf.summable hp).mul_left («expr‖ ‖» c ^ p.to_real)\n    ext i\n    simp [norm_smul, real.mul_rpow (norm_nonneg c) (norm_nonneg (f i))]\n#align const_smul const_smul\n\n",
 "const_mul":
 "theorem const_mul {f : α → 𝕜} (hf : mem_ℓp f p) (c : 𝕜) : mem_ℓp (fun x => c * f x) p :=\n  @mem_ℓp.const_smul α (fun i => 𝕜) _ _ 𝕜 _ _ _ hf c\n#align const_mul const_mul\n\n",
 "coe_lp_submodule":
 "theorem coe_lp_submodule : (lp_submodule E p 𝕜).to_add_subgroup = lp E p :=\n  rfl\n#align coe_lp_submodule coe_lp_submodule\n\n",
 "coe_fn_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_zero : «expr⇑ » (0 : lp E p) = 0 :=\n  rfl\n#align coe_fn_zero coe_fn_zero\n\n",
 "coe_fn_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_sum {ι : Type _} (f : ι → lp E p) (s : Finset ι) :\n    «expr⇑ » (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr⇑ » (f i)) :=\n  by\n  classical\n    refine' Finset.induction _ _ s\n    · simp\n    intro i s his\n    simp [Finset.sum_insert his]\n#align coe_fn_sum coe_fn_sum\n\n",
 "coe_fn_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_sub (f g : lp E p) : «expr⇑ » (f - g) = f - g :=\n  rfl\n#align coe_fn_sub coe_fn_sub\n\n",
 "coe_fn_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_star (f : lp E p) : «expr⇑ » (star f) = star f :=\n  rfl\n#align coe_fn_star coe_fn_star\n\n",
 "coe_fn_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_fn_smul (c : 𝕜) (f : lp E p) : «expr⇑ » («expr • » c f) = «expr • » c f :=\n  rfl\n#align coe_fn_smul coe_fn_smul\n\n",
 "coe_fn_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_neg (f : lp E p) : «expr⇑ » (-f) = -f :=\n  rfl\n#align coe_fn_neg coe_fn_neg\n\n",
 "coe_fn_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_add (f g : lp E p) : «expr⇑ » (f + g) = f + g :=\n  rfl\n#align coe_fn_add coe_fn_add\n\n",
 "algebra_map_mem_ℓp_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.algebra_map_mem_ℓp_infty (k : 𝕜) : mem_ℓp (algebraMap 𝕜 (∀ i, B i) k) (ennreal.top) :=\n  by\n  rw [Algebra.algebraMap_eq_smul_one]\n  exact (one_mem_ℓp_infty.const_smul k : mem_ℓp («expr • » k 1 : ∀ i, B i) (ennreal.top))\n#align algebra_map_mem_ℓp_infty algebra_map_mem_ℓp_infty\n\n",
 "add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem add {f g : ∀ i, E i} (hf : mem_ℓp f p) (hg : mem_ℓp g p) : mem_ℓp (f + g) p :=\n  by\n  rcases p.trichotomy with (rfl | rfl | hp)\n  · apply mem_ℓp_zero\n    refine' (hf.finite_dsupport.union hg.finite_dsupport).subset fun i => _\n    simp only [Pi.add_apply, ne.def, Set.mem_union, Set.mem_setOf_eq]\n    contrapose!\n    rintro ⟨hf', hg'⟩\n    simp [hf', hg']\n  · apply mem_ℓp_infty\n    obtain ⟨A, hA⟩ := hf.bdd_above\n    obtain ⟨B, hB⟩ := hg.bdd_above\n    refine' ⟨A + B, _⟩\n    rintro a ⟨i, rfl⟩\n    exact le_trans (norm_add_le _ _) (add_le_add (hA ⟨i, rfl⟩) (hB ⟨i, rfl⟩))\n  apply mem_ℓp_gen\n  let C : exprℝ := if p.to_real < 1 then 1 else 2 ^ (p.to_real - 1)\n  refine' summable_of_nonneg_of_le _ (fun i => _) (((hf.summable hp).add (hg.summable hp)).mul_left C)\n  · exact fun b => real.rpow_nonneg_of_nonneg (norm_nonneg (f b + g b)) p.to_real\n  · refine' (real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp.le).trans _\n    dsimp [C]\n    split_ifs with h h\n    · simpa using NNReal.coe_le_coe.2 (nnreal.rpow_add_le_add_rpow («expr‖ ‖₊» (f i)) («expr‖ ‖₊» (g i)) hp.le h.le)\n    · let F : Fin 2 → nnreal :=\n        «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n      have : ∀ i, (0 : exprℝ) ≤ F i := fun i => (F i).coe_nonneg\n      simp only [not_lt] at h\n      simpa [F, Fin.sum_univ_succ] using\n        real.rpow_sum_le_const_mul_sum_rpow_of_nonneg (Finset.univ : Finset (Fin 2)) h fun i _ => (F i).coe_nonneg\n#align add add\n\n",
 "Summable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Summable /-\ntheorem Summable (hp : 0 < p.to_real) {f : ∀ i, E i} (hf : mem_ℓp f p) :\n    Summable fun i => «expr‖ ‖» (f i) ^ p.to_real :=\n  (mem_ℓp_gen_iff hp).1 hf\n#align summable Summable\n-/\n\n",
 "Monotone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n#print Monotone /-\nprotected theorem Monotone {p q : ennreal} (hpq : q ≤ p) : lp E q ≤ lp E p := fun f hf => mem_ℓp.of_exponent_ge hf hpq\n#align monotone Monotone\n-/\n\n",
 "BddAbove":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print BddAbove /-\ntheorem BddAbove {f : ∀ i, E i} (hf : mem_ℓp f (ennreal.top)) : BddAbove (Set.range fun i => «expr‖ ‖» (f i)) :=\n  mem_ℓp_infty_iff.1 hf\n#align bdd_above BddAbove\n-/\n\n"}