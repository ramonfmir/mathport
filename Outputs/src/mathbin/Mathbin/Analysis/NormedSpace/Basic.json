{"zero_smul_isBoundedUnder_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.zero_smul_isBoundedUnder_le /-\ntheorem Filter.Tendsto.zero_smul_isBoundedUnder_le {f : ι → α} {g : ι → E} {l : Filter ι} (hf : Tendsto f l ((nhds) 0))\n    (hg : IsBoundedUnder (· ≤ ·) l (norm ∘ g)) : Tendsto (fun x => «expr • » (f x) (g x)) l ((nhds) 0) :=\n  hf.op_zero_is_bounded_under_le hg («expr • » · ·) norm_smul_le\n#align filter.tendsto.zero_smul_is_bounded_under_le Filter.Tendsto.zero_smul_isBoundedUnder_le\n-/\n\n",
 "unbounded_univ":
 "#print NormedSpace.unbounded_univ /-\nprotected theorem NormedSpace.unbounded_univ : ¬Bounded (univ : Set E) := fun h =>\n  let ⟨R, hR⟩ := bounded_iff_forall_norm_le.1 h\n  let ⟨x, hx⟩ := NormedSpace.exists_lt_norm 𝕜 E R\n  hx.not_le (hR x trivial)\n#align normed_space.unbounded_univ NormedSpace.unbounded_univ\n-/\n\n",
 "smul_tendsto_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.IsBoundedUnder.smul_tendsto_zero /-\ntheorem Filter.IsBoundedUnder.smul_tendsto_zero {f : ι → α} {g : ι → E} {l : Filter ι}\n    (hf : IsBoundedUnder (· ≤ ·) l (norm ∘ f)) (hg : Tendsto g l ((nhds) 0)) :\n    Tendsto (fun x => «expr • » (f x) (g x)) l ((nhds) 0) :=\n  hg.op_zero_is_bounded_under_le hf (flip («expr • » · ·)) fun x y => (norm_smul_le y x).trans_eq (mul_comm _ _)\n#align filter.is_bounded_under.smul_tendsto_zero Filter.IsBoundedUnder.smul_tendsto_zero\n-/\n\n",
 "rescale_to_shell_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print rescale_to_shell_zpow /-\ntheorem rescale_to_shell_zpow {c : α} (hc : 1 < «expr‖ ‖» c) {ε : exprℝ} (εpos : 0 < ε) {x : E} (hx : x ≠ 0) :\n    ∃ n : ℤ,\n      c ^ n ≠ 0 ∧\n        «expr‖ ‖» («expr • » (c ^ n) x) < ε ∧\n          ε / «expr‖ ‖» c ≤ «expr‖ ‖» («expr • » (c ^ n) x) ∧ («expr‖ ‖» (c ^ n))⁻¹ ≤ ε⁻¹ * «expr‖ ‖» c * «expr‖ ‖» x :=\n  rescale_to_shell_semi_normed_zpow hc εpos (mt norm_eq_zero.1 hx)\n#align rescale_to_shell_zpow rescale_to_shell_zpow\n-/\n\n",
 "rescale_to_shell_semi_normed_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print rescale_to_shell_semi_normed_zpow /-\n/-- If there is a scalar `c` with `‖c‖>1`, then any element with nonzero norm can be\nmoved by scalar multiplication to any shell of width `‖c‖`. Also recap information on the norm of\nthe rescaling element that shows up in applications. -/\ntheorem rescale_to_shell_semi_normed_zpow {c : α} (hc : 1 < «expr‖ ‖» c) {ε : exprℝ} (εpos : 0 < ε) {x : E}\n    (hx : «expr‖ ‖» x ≠ 0) :\n    ∃ n : ℤ,\n      c ^ n ≠ 0 ∧\n        «expr‖ ‖» («expr • » (c ^ n) x) < ε ∧\n          ε / «expr‖ ‖» c ≤ «expr‖ ‖» («expr • » (c ^ n) x) ∧ («expr‖ ‖» (c ^ n))⁻¹ ≤ ε⁻¹ * «expr‖ ‖» c * «expr‖ ‖» x :=\n  by\n  have xεpos : 0 < «expr‖ ‖» x / ε := div_pos ((ne.symm hx).le_iff_lt.1 (norm_nonneg x)) εpos\n  rcases exists_mem_Ico_zpow xεpos hc with ⟨n, hn⟩\n  have cpos : 0 < «expr‖ ‖» c := lt_trans (zero_lt_one : (0 : exprℝ) < 1) hc\n  have cnpos : 0 < «expr‖ ‖» (c ^ (n + 1)) := by\n    rw [norm_zpow]\n    exact lt_trans xεpos hn.2\n  refine' ⟨-(n + 1), _, _, _, _⟩\n  show c ^ (-(n + 1)) ≠ 0; exact zpow_ne_zero _ (norm_pos_iff.1 cpos)\n  show «expr‖ ‖» («expr • » (c ^ (-(n + 1))) x) < ε\n  · rw [norm_smul, zpow_neg, norm_inv, ← div_eq_inv_mul, div_lt_iff cnpos, mul_comm, norm_zpow]\n    exact (div_lt_iff εpos).1 hn.2\n  show ε / «expr‖ ‖» c ≤ «expr‖ ‖» («expr • » (c ^ (-(n + 1))) x)\n  · rw [zpow_neg, div_le_iff cpos, norm_smul, norm_inv, norm_zpow, zpow_add₀ (ne_of_gt cpos), zpow_one, mul_inv_rev,\n      mul_comm, ← mul_assoc, ← mul_assoc, mul_inv_cancel (ne_of_gt cpos), one_mul, ← div_eq_inv_mul,\n      le_div_iff (zpow_pos_of_pos cpos _), mul_comm]\n    exact (le_div_iff εpos).1 hn.1\n  show («expr‖ ‖» (c ^ (-(n + 1))))⁻¹ ≤ ε⁻¹ * «expr‖ ‖» c * «expr‖ ‖» x\n  · rw [zpow_neg, norm_inv, inv_inv, norm_zpow, zpow_add₀ cpos.ne', zpow_one, mul_right_comm, ← div_eq_inv_mul]\n    exact mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _)\n#align rescale_to_shell_semi_normed_zpow rescale_to_shell_semi_normed_zpow\n-/\n\n",
 "rescale_to_shell_semi_normed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print rescale_to_shell_semi_normed /-\n/-- If there is a scalar `c` with `‖c‖>1`, then any element with nonzero norm can be\nmoved by scalar multiplication to any shell of width `‖c‖`. Also recap information on the norm of\nthe rescaling element that shows up in applications. -/\ntheorem rescale_to_shell_semi_normed {c : α} (hc : 1 < «expr‖ ‖» c) {ε : exprℝ} (εpos : 0 < ε) {x : E}\n    (hx : «expr‖ ‖» x ≠ 0) :\n    ∃ d : α,\n      d ≠ 0 ∧\n        «expr‖ ‖» («expr • » d x) < ε ∧\n          ε / «expr‖ ‖» c ≤ «expr‖ ‖» («expr • » d x) ∧ («expr‖ ‖» d)⁻¹ ≤ ε⁻¹ * «expr‖ ‖» c * «expr‖ ‖» x :=\n  let ⟨n, hn⟩ := rescale_to_shell_semi_normed_zpow hc εpos hx\n  ⟨_, hn⟩\n#align rescale_to_shell_semi_normed rescale_to_shell_semi_normed\n-/\n\n",
 "rescale_to_shell":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print rescale_to_shell /-\n/-- If there is a scalar `c` with `‖c‖>1`, then any element can be moved by scalar multiplication to\nany shell of width `‖c‖`. Also recap information on the norm of the rescaling element that shows\nup in applications. -/\ntheorem rescale_to_shell {c : α} (hc : 1 < «expr‖ ‖» c) {ε : exprℝ} (εpos : 0 < ε) {x : E} (hx : x ≠ 0) :\n    ∃ d : α,\n      d ≠ 0 ∧\n        «expr‖ ‖» («expr • » d x) < ε ∧\n          ε / «expr‖ ‖» c ≤ «expr‖ ‖» («expr • » d x) ∧ («expr‖ ‖» d)⁻¹ ≤ ε⁻¹ * «expr‖ ‖» c * «expr‖ ‖» x :=\n  rescale_to_shell_semi_normed hc εpos (mt norm_eq_zero.1 hx)\n#align rescale_to_shell rescale_to_shell\n-/\n\n",
 "range_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print range_norm /-\n@[simp]\ntheorem range_norm : range (norm : E → exprℝ) = Ici 0 :=\n  Subset.antisymm (range_subset_iff.2 norm_nonneg) fun _ => exists_norm_eq E\n#align range_norm range_norm\n-/\n\n",
 "range_nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print range_nnnorm /-\n@[simp]\ntheorem range_nnnorm : range (nnnorm : E → nnreal) = univ :=\n  (nnnorm_surjective E).range_eq\n#align range_nnnorm range_nnnorm\n-/\n\n",
 "norm_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_zsmul /-\ntheorem norm_zsmul (α) [NormedField α] [NormedSpace α β] (n : ℤ) (x : β) :\n    «expr‖ ‖» («expr • » n x) = «expr‖ ‖» (n : α) * «expr‖ ‖» x := by\n  rw [← norm_smul, ← Int.smul_one_eq_coe, smul_assoc, one_smul]\n#align norm_zsmul norm_zsmul\n-/\n\n",
 "norm_smul_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_smul_of_nonneg /-\ntheorem norm_smul_of_nonneg [NormedSpace (exprℝ) β] {t : exprℝ} (ht : 0 ≤ t) (x : β) :\n    «expr‖ ‖» («expr • » t x) = t * «expr‖ ‖» x := by rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ht]\n#align norm_smul_of_nonneg norm_smul_of_nonneg\n-/\n\n",
 "norm_smul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_smul_le /-\n/-\nCopyright (c) 2018 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Johannes Hölzl\n-/\n-- Here, we set a rather high priority for the instance `[normed_space α β] : module α β`\n-- to take precedence over `semiring.to_module` as this leads to instance paths with better\n-- unification properties.\n-- note: while these are currently strictly weaker than the versions without `le`, they will cease\n-- to be if we eventually generalize `normed_space` from `normed_field α` to `normed_ring α`.\ntheorem norm_smul_le [NormedSpace α β] (r : α) (x : β) : «expr‖ ‖» («expr • » r x) ≤ «expr‖ ‖» r * «expr‖ ‖» x :=\n  normed_space.norm_smul_le _ _\n#align norm_smul_le norm_smul_le\n-/\n\n",
 "norm_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_smul /-\n-- see Note [lower instance priority]\n-- Shortcut instance, as otherwise this will be found by `normed_space.to_module` and be\n-- noncomputable.\ntheorem norm_smul [NormedSpace α β] (s : α) (x : β) : «expr‖ ‖» («expr • » s x) = «expr‖ ‖» s * «expr‖ ‖» x :=\n  by\n  by_cases h : s = 0\n  · simp [h]\n  · refine' le_antisymm (norm_smul_le s x) _\n    calc\n      «expr‖ ‖» s * «expr‖ ‖» x = «expr‖ ‖» s * «expr‖ ‖» («expr • » s⁻¹ («expr • » s x)) := by rw [inv_smul_smul₀ h]\n      _ ≤ «expr‖ ‖» s * («expr‖ ‖» s⁻¹ * «expr‖ ‖» («expr • » s x)) :=\n        (mul_le_mul_of_nonneg_left (norm_smul_le _ _) (norm_nonneg _))\n      _ = «expr‖ ‖» («expr • » s x) := by rw [norm_inv, ← mul_assoc, mul_inv_cancel (mt norm_eq_zero.1 h), one_mul]\n      \n#align norm_smul norm_smul\n-/\n\n",
 "norm_algebraMap_nNReal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print norm_algebraMap_nNReal /-\n@[simp]\ntheorem norm_algebraMap_nNReal (x : nnreal) : «expr‖ ‖» (algebraMap (nnreal) 𝕜' x) = x :=\n  (norm_algebraMap' 𝕜' (x : exprℝ)).symm ▸ Real.norm_of_nonneg x.prop\n#align norm_algebra_map_nnreal norm_algebraMap_nNReal\n-/\n\n",
 "norm_algebraMap'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_algebraMap' /-\n@[simp]\ntheorem norm_algebraMap' [NormOneClass 𝕜'] (x : 𝕜) : «expr‖ ‖» (algebraMap 𝕜 𝕜' x) = «expr‖ ‖» x := by\n  rw [norm_algebraMap, norm_one, mul_one]\n#align norm_algebra_map' norm_algebraMap'\n-/\n\n",
 "norm_algebraMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_algebraMap /-\ntheorem norm_algebraMap (x : 𝕜) : «expr‖ ‖» (algebraMap 𝕜 𝕜' x) = «expr‖ ‖» x * «expr‖ ‖» (1 : 𝕜') :=\n  by\n  rw [Algebra.algebraMap_eq_smul_one]\n  exact norm_smul _ _\n#align norm_algebra_map norm_algebraMap\n-/\n\n",
 "noncompactSpace":
 "#print NormedSpace.noncompactSpace /-\n/-- A normed vector space over a nontrivially normed field is a noncompact space. This cannot be\nan instance because in order to apply it, Lean would have to search for `normed_space 𝕜 E` with\nunknown `𝕜`. We register this as an instance in two cases: `𝕜 = E` and `𝕜 = ℝ`. -/\nprotected theorem NormedSpace.noncompactSpace : NoncompactSpace E :=\n  ⟨fun h => NormedSpace.unbounded_univ 𝕜 _ h.bounded⟩\n#align normed_space.noncompact_space NormedSpace.noncompactSpace\n-/\n\n",
 "nnnorm_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print nnnorm_surjective /-\ntheorem nnnorm_surjective : surjective (nnnorm : E → nnreal) := fun c =>\n  (exists_norm_eq E c.coe_nonneg).imp fun x h => NNReal.eq h\n#align nnnorm_surjective nnnorm_surjective\n-/\n\n",
 "nnnorm_smul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_smul_le /-\ntheorem nnnorm_smul_le [NormedSpace α β] (s : α) (x : β) : «expr‖ ‖₊» («expr • » s x) ≤ «expr‖ ‖₊» s * «expr‖ ‖₊» x :=\n  norm_smul_le s x\n#align nnnorm_smul_le nnnorm_smul_le\n-/\n\n",
 "nnnorm_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_smul /-\ntheorem nnnorm_smul [NormedSpace α β] (s : α) (x : β) : «expr‖ ‖₊» («expr • » s x) = «expr‖ ‖₊» s * «expr‖ ‖₊» x :=\n  NNReal.eq <| norm_smul s x\n#align nnnorm_smul nnnorm_smul\n-/\n\n",
 "nnnorm_algebraMap_nNReal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print nnnorm_algebraMap_nNReal /-\n@[simp]\ntheorem nnnorm_algebraMap_nNReal (x : nnreal) : «expr‖ ‖₊» (algebraMap (nnreal) 𝕜' x) = x :=\n  Subtype.ext <| norm_algebraMap_nNReal 𝕜' x\n#align nnnorm_algebra_map_nnreal nnnorm_algebraMap_nNReal\n-/\n\n",
 "nnnorm_algebraMap'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_algebraMap' /-\n@[simp]\ntheorem nnnorm_algebraMap' [NormOneClass 𝕜'] (x : 𝕜) : «expr‖ ‖₊» (algebraMap 𝕜 𝕜' x) = «expr‖ ‖₊» x :=\n  Subtype.ext <| norm_algebraMap' _ _\n#align nnnorm_algebra_map' nnnorm_algebraMap'\n-/\n\n",
 "nnnorm_algebraMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_algebraMap /-\ntheorem nnnorm_algebraMap (x : 𝕜) : «expr‖ ‖₊» (algebraMap 𝕜 𝕜' x) = «expr‖ ‖₊» x * «expr‖ ‖₊» (1 : 𝕜') :=\n  Subtype.ext <| norm_algebraMap 𝕜' x\n#align nnnorm_algebra_map nnnorm_algebraMap\n-/\n\n",
 "nndist_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nndist_smul₀ /-\ntheorem nndist_smul₀ [NormedSpace α β] (s : α) (x y : β) :\n    nndist («expr • » s x) («expr • » s y) = «expr‖ ‖₊» s * nndist x y :=\n  NNReal.eq <| dist_smul₀ s x y\n#align nndist_smul₀ nndist_smul₀\n-/\n\n",
 "nndist_smul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nndist_smul_le /-\ntheorem nndist_smul_le [NormedSpace α β] (s : α) (x y : β) :\n    nndist («expr • » s x) («expr • » s y) ≤ «expr‖ ‖₊» s * nndist x y :=\n  dist_smul_le s x y\n#align nndist_smul_le nndist_smul_le\n-/\n\n",
 "lipschitzWith_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print lipschitzWith_smul /-\ntheorem lipschitzWith_smul [NormedSpace α β] (s : α) : LipschitzWith («expr‖ ‖₊» s) ((«expr • » · ·) s : β → β) :=\n  lipschitzWith_iff_dist_le_mul.2 fun x y => by rw [dist_smul₀, coe_nnnorm]\n#align lipschitz_with_smul lipschitzWith_smul\n-/\n\n",
 "inv_norm_smul_mem_closed_unit_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print inv_norm_smul_mem_closed_unit_ball /-\ntheorem inv_norm_smul_mem_closed_unit_ball [NormedSpace (exprℝ) β] (x : β) :\n    «expr • » («expr‖ ‖» x)⁻¹ x ∈ closedBall (0 : β) 1 := by\n  simp only [mem_closedBall_zero_iff, norm_smul, norm_inv, norm_norm, ← div_eq_inv_mul, div_self_le_one]\n#align inv_norm_smul_mem_closed_unit_ball inv_norm_smul_mem_closed_unit_ball\n-/\n\n",
 "interior_sphere'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print interior_sphere' /-\n@[simp]\ntheorem interior_sphere' [NormedSpace (exprℝ) E] [Nontrivial E] (x : E) (r : exprℝ) : interior (sphere x r) = ∅ := by\n  rw [← frontier_closedBall' x, interior_frontier is_closed_ball]\n#align interior_sphere' interior_sphere'\n-/\n\n",
 "interior_sphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print interior_sphere /-\ntheorem interior_sphere [NormedSpace (exprℝ) E] (x : E) {r : exprℝ} (hr : r ≠ 0) : interior (sphere x r) = ∅ := by\n  rw [← frontier_closedBall x hr, interior_frontier is_closed_ball]\n#align interior_sphere interior_sphere\n-/\n\n",
 "interior_closedBall'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print interior_closedBall' /-\ntheorem interior_closedBall' [NormedSpace (exprℝ) E] [Nontrivial E] (x : E) (r : exprℝ) :\n    interior (closedBall x r) = ball x r :=\n  by\n  rcases eq_or_ne r 0 with (rfl | hr)\n  · rw [closed_ball_zero, ball_zero, interior_singleton]\n  · exact interior_closedBall x hr\n#align interior_closed_ball' interior_closedBall'\n-/\n\n",
 "interior_closedBall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print interior_closedBall /-\ntheorem interior_closedBall [NormedSpace (exprℝ) E] (x : E) {r : exprℝ} (hr : r ≠ 0) :\n    interior (closedBall x r) = ball x r := by\n  cases' hr.lt_or_lt with hr hr\n  · rw [closed_ball_eq_empty.2 hr, ball_eq_empty.2 hr.le, interior_empty]\n  refine' subset.antisymm _ ball_subset_interior_closed_ball\n  intro y hy\n  rcases(mem_closed_ball.1 <| interior_subset hy).lt_or_eq with (hr | rfl)\n  · exact hr\n  set f : exprℝ → E := fun c : exprℝ => «expr • » c (y - x) + x\n  suffices «expr ⁻¹' » f (closed_ball x (dist y x)) ⊆ Icc (-1) 1\n    by\n    have hfc : Continuous f := (continuous_id.smul continuous_const).add continuous_const\n    have hf1 : (1 : exprℝ) ∈ «expr ⁻¹' » f (interior (closed_ball x <| dist y x)) := by simpa [f]\n    have h1 : (1 : exprℝ) ∈ interior (Icc (-1 : exprℝ) 1) :=\n      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1)\n    contrapose h1\n    simp\n  intro c hc\n  rw [mem_Icc, ← abs_le, ← Real.norm_eq_abs, ← mul_le_mul_right hr]\n  simpa [f, dist_eq_norm, norm_smul] using hc\n#align interior_closed_ball interior_closedBall\n-/\n\n",
 "frontier_sphere'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print frontier_sphere' /-\n@[simp]\ntheorem frontier_sphere' [NormedSpace (exprℝ) E] [Nontrivial E] (x : E) (r : exprℝ) :\n    frontier (sphere x r) = sphere x r := by rw [is_closed_sphere.frontier_eq, interior_sphere' x, diff_empty]\n#align frontier_sphere' frontier_sphere'\n-/\n\n",
 "frontier_sphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print frontier_sphere /-\ntheorem frontier_sphere [NormedSpace (exprℝ) E] (x : E) {r : exprℝ} (hr : r ≠ 0) : frontier (sphere x r) = sphere x r :=\n  by rw [is_closed_sphere.frontier_eq, interior_sphere x hr, diff_empty]\n#align frontier_sphere frontier_sphere\n-/\n\n",
 "frontier_closedBall'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print frontier_closedBall' /-\ntheorem frontier_closedBall' [NormedSpace (exprℝ) E] [Nontrivial E] (x : E) (r : exprℝ) :\n    frontier (closedBall x r) = sphere x r := by\n  rw [frontier, closure_closed_ball, interior_closedBall' x r, closed_ball_diff_ball]\n#align frontier_closed_ball' frontier_closedBall'\n-/\n\n",
 "frontier_closedBall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print frontier_closedBall /-\ntheorem frontier_closedBall [NormedSpace (exprℝ) E] (x : E) {r : exprℝ} (hr : r ≠ 0) :\n    frontier (closedBall x r) = sphere x r := by\n  rw [frontier, closure_closed_ball, interior_closedBall x hr, closed_ball_diff_ball]\n#align frontier_closed_ball frontier_closedBall\n-/\n\n",
 "frontier_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print frontier_ball /-\ntheorem frontier_ball [NormedSpace (exprℝ) E] (x : E) {r : exprℝ} (hr : r ≠ 0) : frontier (ball x r) = sphere x r :=\n  by\n  rw [frontier, closure_ball x hr, is_open_ball.interior_eq]\n  ext x; exact (@eq_iff_le_not_lt (exprℝ) _ _ _).symm\n#align frontier_ball frontier_ball\n-/\n\n",
 "exists_norm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print exists_norm_eq /-\ntheorem exists_norm_eq {c : exprℝ} (hc : 0 ≤ c) : ∃ x : E, «expr‖ ‖» x = c :=\n  by\n  rcases exists_ne (0 : E) with ⟨x, hx⟩\n  rw [← norm_ne_zero_iff] at hx\n  use «expr • » c («expr • » («expr‖ ‖» x)⁻¹ x)\n  simp [norm_smul, Real.norm_of_nonneg hc, hx]\n#align exists_norm_eq exists_norm_eq\n-/\n\n",
 "exists_lt_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedSpace.exists_lt_norm /-\n/-- If `E` is a nontrivial normed space over a nontrivially normed field `𝕜`, then `E` is unbounded:\nfor any `c : ℝ`, there exists a vector `x : E` with norm strictly greater than `c`. -/\ntheorem NormedSpace.exists_lt_norm (c : exprℝ) : ∃ x : E, c < «expr‖ ‖» x :=\n  by\n  rcases exists_ne (0 : E) with ⟨x, hx⟩\n  rcases NormedField.exists_lt_norm 𝕜 (c / «expr‖ ‖» x) with ⟨r, hr⟩\n  use «expr • » r x\n  rwa [norm_smul, ← div_lt_iff]\n  rwa [norm_pos_iff]\n#align normed_space.exists_lt_norm NormedSpace.exists_lt_norm\n-/\n\n",
 "eventually_nhds_norm_smul_sub_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print eventually_nhds_norm_smul_sub_lt /-\ntheorem eventually_nhds_norm_smul_sub_lt (c : α) (x : E) {ε : exprℝ} (h : 0 < ε) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" ((nhds) x)\n      («expr‖ ‖» («expr • » c (y - x)) < ε) :=\n  have : Tendsto (fun y => «expr‖ ‖» («expr • » c (y - x))) ((nhds) x) ((nhds) 0) :=\n    ((continuous_id.sub continuous_const).const_smul _).norm.tendsto' _ _ (by simp)\n  this.eventually (gt_mem_nhds h)\n#align eventually_nhds_norm_smul_sub_lt eventually_nhds_norm_smul_sub_lt\n-/\n\n",
 "dist_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_smul₀ /-\ntheorem dist_smul₀ [NormedSpace α β] (s : α) (x y : β) :\n    dist («expr • » s x) («expr • » s y) = «expr‖ ‖» s * dist x y := by\n  simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]\n#align dist_smul₀ dist_smul₀\n-/\n\n",
 "dist_smul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_smul_le /-\ntheorem dist_smul_le [NormedSpace α β] (s : α) (x y : β) :\n    dist («expr • » s x) («expr • » s y) ≤ «expr‖ ‖» s * dist x y := by\n  simpa only [dist_eq_norm, ← smul_sub] using norm_smul_le _ _\n#align dist_smul_le dist_smul_le\n-/\n\n",
 "coe_homeomorphUnitBall_apply_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print coe_homeomorphUnitBall_apply_zero /-\n@[simp]\ntheorem coe_homeomorphUnitBall_apply_zero [NormedSpace (exprℝ) E] : (homeomorphUnitBall (0 : E) : E) = 0 := by\n  simp [homeomorphUnitBall]\n#align coe_homeomorph_unit_ball_apply_zero coe_homeomorphUnitBall_apply_zero\n-/\n\n",
 "closure_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print closure_ball /-\ntheorem closure_ball [NormedSpace (exprℝ) E] (x : E) {r : exprℝ} (hr : r ≠ 0) : closure (ball x r) = closedBall x r :=\n  by\n  refine' subset.antisymm closure_ball_subset_closed_ball fun y hy => _\n  have : ContinuousWithinAt (fun c : exprℝ => «expr • » c (y - x) + x) (Ico 0 1) 1 :=\n    ((continuous_id.smul continuous_const).add continuous_const).continuous_within_at\n  convert this.mem_closure _ _\n  · rw [one_smul, sub_add_cancel]\n  · simp [closure_Ico zero_ne_one, zero_le_one]\n  · rintro c ⟨hc0, hc1⟩\n    rw [mem_ball, dist_eq_norm, add_sub_cancel, norm_smul, Real.norm_eq_abs, abs_of_nonneg hc0, mul_comm, ← mul_one r]\n    rw [mem_closed_ball, dist_eq_norm] at hy\n    replace hr : 0 < r\n    exact ((norm_nonneg _).trans hy).lt_of_ne hr.symm\n    apply mul_lt_mul' <;> assumption\n#align closure_ball closure_ball\n-/\n\n",
 "algebraMap_isometry":
 "#print algebraMap_isometry /-\n/-- In a normed algebra, the inclusion of the base field in the extended field is an isometry. -/\ntheorem algebraMap_isometry [NormOneClass 𝕜'] : Isometry (algebraMap 𝕜 𝕜') :=\n  by\n  refine' Isometry.of_dist_eq fun x y => _\n  rw [dist_eq_norm, dist_eq_norm, ← RingHom.map_sub, norm_algebraMap']\n#align algebra_map_isometry algebraMap_isometry\n-/\n\n",
 "abs_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print abs_norm /-\n@[simp]\ntheorem abs_norm (z : β) : |«expr‖ ‖» z| = «expr‖ ‖» z :=\n  abs_of_nonneg <| norm_nonneg z\n#align abs_norm abs_norm\n-/\n\n"}