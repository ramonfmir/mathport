{"tendsto_partial_Gamma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_partial_Gamma {s : exprℂ} (hs : 0 < s.re) :\n    tendsto (fun X : exprℝ => partial_Gamma s X) at_top (nhds <| Gamma_integral s) :=\n  interval_integral_tendsto_integral_Ioi 0 (Gamma_integral_convergent hs) tendsto_id\n#align tendsto_partial_Gamma tendsto_partial_Gamma\n\n",
 "partial_Gamma_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The recurrence relation for the indefinite version of the `Γ` function. -/\ntheorem partial_Gamma_add_one {s : exprℂ} (hs : 0 < s.re) {X : exprℝ} (hX : 0 ≤ X) :\n    partial_Gamma (s + 1) X = s * partial_Gamma s X - (-X).exp * X ^ s :=\n  by\n  rw [partial_Gamma, partial_Gamma, add_sub_cancel]\n  have F_der_I :\n    ∀ x : exprℝ,\n      x ∈ Ioo 0 X →\n        has_deriv_at (fun x => (-x).exp * x ^ s : exprℝ → exprℂ) (-((-x).exp * x ^ s) + (-x).exp * (s * x ^ (s - 1)))\n          x :=\n    by\n    intro x hx\n    have d1 : has_deriv_at (fun y : exprℝ => (-y).exp) (-(-x).exp) x := by simpa using (has_deriv_at_neg x).exp\n    have d2 : has_deriv_at (fun y : exprℝ => ↑y ^ s) (s * x ^ (s - 1)) x :=\n      by\n      have t := @has_deriv_at.cpow_const _ _ _ s (has_deriv_at_id ↑x) _\n      simpa only [mul_one] using t.comp_of_real\n      simpa only [id.def, of_real_re, of_real_im, ne.def, eq_self_iff_true, not_true, or_false_iff, mul_one] using hx.1\n    simpa only [of_real_neg, neg_mul] using d1.of_real_comp.mul d2\n  have cont := (continuous_of_real.comp continuous_neg.exp).mul (continuous_of_real_cpow_const hs)\n  have der_ible := (Gamma_integrand_deriv_integrable_A hs hX).add (Gamma_integrand_deriv_integrable_B hs hX)\n  have int_eval := integral_eq_sub_of_has_deriv_at_of_le hX cont.continuous_on F_der_I der_ible\n  -- We are basically done here but manipulating the output into the right form is fiddly.\n  apply_fun fun x : exprℂ => -x  at int_eval\n  rw [interval_integral.integral_add (Gamma_integrand_deriv_integrable_A hs hX)\n      (Gamma_integrand_deriv_integrable_B hs hX),\n    interval_integral.integral_neg, neg_add, neg_neg] at int_eval\n  rw [eq_sub_of_add_eq int_eval, sub_neg_eq_add, neg_sub, add_comm, add_sub]\n  simp only [sub_left_inj, add_left_inj]\n  have :\n    (fun x => (-x).exp * (s * x ^ (s - 1)) : exprℝ → exprℂ) = (fun x => s * (-x).exp * x ^ (s - 1) : exprℝ → exprℂ) :=\n    by\n    ext1\n    ring\n  rw [this]\n  have t := @integral_const_mul 0 X volume _ _ s fun x : exprℝ => (-x).exp * x ^ (s - 1)\n  dsimp at t\n  rw [← t, of_real_zero, zero_cpow]\n  · rw [mul_zero, add_zero]\n    congr\n    ext1\n    ring\n  · contrapose! hs\n    rw [hs, zero_re]\n#align partial_Gamma_add_one partial_Gamma_add_one\n\n",
 "loc_unif_bound_dGamma_integrand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A uniform bound for the `s`-derivative of the `Γ` integrand for `s` in vertical strips. -/\ntheorem loc_unif_bound_dGamma_integrand {t : exprℂ} {s1 s2 x : exprℝ} (ht1 : s1 ≤ t.re) (ht2 : t.re ≤ s2) (hx : 0 < x) :\n    «expr‖ ‖» (dGamma_integrand t x) ≤ dGamma_integrand_real s1 x + dGamma_integrand_real s2 x :=\n  by\n  rcases le_or_lt 1 x with (h | h)\n  · -- case 1 ≤ x\n    refine' le_add_of_nonneg_of_le (abs_nonneg _) _\n    rw [dGamma_integrand, dGamma_integrand_real, complex.norm_eq_abs, map_mul, abs_mul, ← complex.of_real_mul,\n      complex.abs_of_real]\n    refine' mul_le_mul_of_nonneg_left _ (abs_nonneg _)\n    rw [complex.abs_cpow_eq_rpow_re_of_pos hx]\n    refine' le_trans _ (le_abs_self _)\n    apply rpow_le_rpow_of_exponent_le h\n    rw [complex.sub_re, complex.one_re]\n    linarith\n  · refine' le_add_of_le_of_nonneg _ (abs_nonneg _)\n    rw [dGamma_integrand, dGamma_integrand_real, complex.norm_eq_abs, map_mul, abs_mul, ← complex.of_real_mul,\n      complex.abs_of_real]\n    refine' mul_le_mul_of_nonneg_left _ (abs_nonneg _)\n    rw [complex.abs_cpow_eq_rpow_re_of_pos hx]\n    refine' le_trans _ (le_abs_self _)\n    apply rpow_le_rpow_of_exponent_ge hx h.le\n    rw [complex.sub_re, complex.one_re]\n    linarith\n#align loc_unif_bound_dGamma_integrand loc_unif_bound_dGamma_integrand\n\n",
 "integral_exp_neg_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , » -/\n/-\nCopyright (c) 2022 David Loeffler. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: David Loeffler\n-/\ntheorem integral_exp_neg_Ioi :\n    «expr∫ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , »\" (Ioi 0)\n        (exp (-x)) =\n      1 :=\n  by\n  refine' tendsto_nhds_unique (interval_integral_tendsto_integral_Ioi _ _ tendsto_id) _\n  · simpa only [neg_mul, one_mul] using exp_neg_integrable_on_Ioi 0 zero_lt_one\n  · simpa using tendsto_exp_neg_at_top_nhds_0.const_sub 1\n#align integral_exp_neg_Ioi integral_exp_neg_Ioi\n\n",
 "has_deriv_at_Gamma_integral":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , » -/\n/-- The derivative of the `Γ` integral, at any `s ∈ ℂ` with `1 < re s`, is given by the integral\nof `exp (-x) * log x * x ^ (s - 1)` over `[0, ∞)`. -/\ntheorem has_deriv_at_Gamma_integral {s : exprℂ} (hs : 1 < s.re) :\n    integrable_on (fun x => real.exp (-x) * real.log x * x ^ (s - 1) : exprℝ → exprℂ) (Ioi 0) volume ∧\n      has_deriv_at Gamma_integral\n        («expr∫ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , »\" (Ioi 0)\n          (real.exp (-x) * real.log x * x ^ (s - 1)))\n        s :=\n  by\n  let ε := (s.re - 1) / 2\n  let μ := volume.restrict (Ioi (0 : exprℝ))\n  let bound := fun x : exprℝ => dGamma_integrand_real (s.re - ε) x + dGamma_integrand_real (s.re + ε) x\n  have cont : ∀ t : exprℂ, continuous_on (fun x => real.exp (-x) * x ^ (t - 1) : exprℝ → exprℂ) (Ioi 0) :=\n    by\n    intro t\n    apply (continuous_of_real.comp continuous_neg.exp).continuous_on.mul\n    apply continuous_at.continuous_on\n    intro x hx\n    refine' (continuous_at_cpow_const _).comp continuous_of_real.continuous_at\n    exact or.inl hx\n  have eps_pos : 0 < ε := div_pos (sub_pos.mpr hs) zero_lt_two\n  have hF_meas :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" ((nhds) s)\n      (ae_strongly_measurable (fun x => real.exp (-x) * x ^ (t - 1) : exprℝ → exprℂ) μ) :=\n    by\n    apply eventually_of_forall\n    intro t\n    exact (cont t).ae_strongly_measurable measurable_set_Ioi\n  have hF'_meas : ae_strongly_measurable (dGamma_integrand s) μ :=\n    by\n    refine' continuous_on.ae_strongly_measurable _ measurable_set_Ioi\n    have : dGamma_integrand s = (fun x => real.exp (-x) * x ^ (s - 1) * real.log x : exprℝ → exprℂ) :=\n      by\n      ext1\n      simp only [dGamma_integrand]\n      ring\n    rw [this]\n    refine' continuous_on.mul (cont s) (continuous_at.continuous_on _)\n    exact fun x hx => continuous_of_real.continuous_at.comp (continuous_at_log (mem_Ioi.mp hx).ne')\n  have h_bound :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (∀ t : exprℂ, t ∈ metric.ball s ε → «expr‖ ‖» (dGamma_integrand t x) ≤ bound x) :=\n    by\n    refine' (ae_restrict_iff' measurable_set_Ioi).mpr (ae_of_all _ fun x hx => _)\n    intro t ht\n    rw [metric.mem_ball, complex.dist_eq] at ht\n    replace ht := lt_of_le_of_lt (complex.abs_re_le_abs <| t - s) ht\n    rw [complex.sub_re, @abs_sub_lt_iff (exprℝ) _ t.re s.re ((s.re - 1) / 2)] at ht\n    refine' loc_unif_bound_dGamma_integrand _ _ hx\n    all_goals simp only [ε]; linarith\n  have bound_integrable : integrable bound μ := by\n    apply integrable.add\n    · refine' dGamma_integral_abs_convergent (s.re - ε) _\n      field_simp\n      rw [one_lt_div]\n      · linarith\n      · exact zero_lt_two\n    · refine' dGamma_integral_abs_convergent (s.re + ε) _\n      linarith\n  have h_diff :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (∀ t : exprℂ,\n        t ∈ metric.ball s ε →\n          has_deriv_at (fun u => real.exp (-x) * x ^ (u - 1) : exprℂ → exprℂ) (dGamma_integrand t x) t) :=\n    by\n    refine' (ae_restrict_iff' measurable_set_Ioi).mpr (ae_of_all _ fun x hx => _)\n    intro t ht\n    rw [mem_Ioi] at hx\n    simp only [dGamma_integrand]\n    rw [mul_assoc]\n    apply has_deriv_at.const_mul\n    rw [of_real_log hx.le, mul_comm]\n    have := ((has_deriv_at_id t).sub_const 1).const_cpow (or.inl (of_real_ne_zero.mpr hx.ne'))\n    rwa [mul_one] at this\n  exact\n    has_deriv_at_integral_of_dominated_loc_of_deriv_le eps_pos hF_meas\n      (Gamma_integral_convergent (zero_lt_one.trans hs)) hF'_meas h_bound bound_integrable h_diff\n#align has_deriv_at_Gamma_integral has_deriv_at_Gamma_integral\n\n",
 "differentiable_at_Gamma_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem differentiable_at_Gamma_aux (s : exprℂ) (n : ℕ) (h1 : 1 - s.re < n) (h2 : ∀ m : ℕ, s + m ≠ 0) :\n    differentiable_at (exprℂ) (Gamma_aux n) s :=\n  by\n  induction' n with n hn generalizing s\n  · refine' (has_deriv_at_Gamma_integral _).2.differentiable_at\n    rw [Nat.cast_zero] at h1\n    linarith\n  · dsimp only [Gamma_aux]\n    specialize hn (s + 1)\n    have a : 1 - (s + 1).re < ↑n := by\n      rw [Nat.cast_succ] at h1\n      rw [complex.add_re, complex.one_re]\n      linarith\n    have b : ∀ m : ℕ, s + 1 + m ≠ 0 := by\n      intro m\n      have := h2 (1 + m)\n      rwa [Nat.cast_add, Nat.cast_one, ← add_assoc] at this\n    refine' differentiable_at.div (differentiable_at.comp _ (hn a b) _) _ _\n    simp\n    simp\n    simpa using h2 0\n#align differentiable_at_Gamma_aux differentiable_at_Gamma_aux\n\n",
 "differentiable_at_Gamma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem differentiable_at_Gamma (s : exprℂ) (hs : ∀ m : ℕ, s + m ≠ 0) : differentiable_at (exprℂ) Gamma s :=\n  by\n  let n := «expr⌊ ⌋₊» (1 - s.re) + 1\n  have hn : 1 - s.re < n := by exact_mod_cast Nat.lt_floor_add_one (1 - s.re)\n  apply (differentiable_at_Gamma_aux s n hn hs).congr_of_eventually_eq\n  let S := { t : exprℂ | 1 - t.re < n }\n  have : S ∈ (nhds) s := by\n    rw [mem_nhds_iff]\n    use S\n    refine' ⟨subset.rfl, _, hn⟩\n    have : S = «expr ⁻¹' » re (Ioi (1 - n : exprℝ)) := by\n      ext\n      rw [preimage, Ioi, mem_set_of_eq, mem_set_of_eq, mem_set_of_eq]\n      exact sub_lt_comm\n    rw [this]\n    refine' continuous.is_open_preimage continuous_re _ is_open_Ioi\n  apply eventually_eq_of_mem this\n  intro t ht\n  rw [mem_set_of_eq] at ht\n  apply Gamma_eq_Gamma_aux\n  linarith\n#align differentiable_at_Gamma differentiable_at_Gamma\n\n",
 "dGamma_integrand_is_o_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dGamma_integrand_is_o_at_top (s : exprℝ) :\n    «expr =o[ ] » (fun x : exprℝ => exp (-x) * log x * x ^ (s - 1)) at_top fun x => exp (-(1 / 2) * x) :=\n  by\n  refine' is_o_of_tendsto (fun x hx => _) _\n  · exfalso\n    exact (-(1 / 2) * x).exp_pos.ne' hx\n  have :\n    eventually_eq at_top (fun x : exprℝ => exp (-x) * log x * x ^ (s - 1) / exp (-(1 / 2) * x))\n      (fun x : exprℝ => (fun z : exprℝ => exp (1 / 2 * z) / z ^ s) x * (fun z : exprℝ => z / log z) x)⁻¹ :=\n    by\n    refine' eventually_of_mem (Ioi_mem_at_top 1) _\n    intro x hx\n    dsimp\n    replace hx := lt_trans zero_lt_one (mem_Ioi.mp hx)\n    rw [real.exp_neg, neg_mul, real.exp_neg, rpow_sub hx]\n    have : exp x = exp (x / 2) * exp (x / 2) := by rw [← real.exp_add, add_halves]\n    rw [this]\n    field_simp [hx.ne', exp_ne_zero (x / 2)]\n    ring\n  refine' tendsto.congr' this.symm (tendsto.inv_tendsto_at_top _)\n  apply tendsto.at_top_mul_at_top (tendsto_exp_mul_div_rpow_at_top s (1 / 2) one_half_pos)\n  refine' tendsto.congr' _ ((tendsto_exp_div_pow_at_top 1).comp tendsto_log_at_top)\n  apply eventually_eq_of_mem (Ioi_mem_at_top (0 : exprℝ))\n  intro x hx\n  simp [exp_log hx]\n#align dGamma_integrand_is_o_at_top dGamma_integrand_is_o_at_top\n\n",
 "dGamma_integral_abs_convergent":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Absolute convergence of the integral which will give the derivative of the `Γ` function on\n`1 < re s`. -/\ntheorem dGamma_integral_abs_convergent (s : exprℝ) (hs : 1 < s) :\n    integrable_on (fun x : exprℝ => «expr‖ ‖» (exp (-x) * log x * x ^ (s - 1))) (Ioi 0) :=\n  by\n  rw [← Ioc_union_Ioi_eq_Ioi (@zero_le_one (exprℝ) _ _ _ _), integrable_on_union]\n  refine' ⟨⟨_, _⟩, _⟩\n  · refine' continuous_on.ae_strongly_measurable (continuous_on.mul _ _).norm measurable_set_Ioc\n    · refine' (continuous_exp.comp continuous_neg).continuous_on.mul (continuous_on_log.mono _)\n      simp\n    · apply continuous_on_id.rpow_const\n      intro x hx\n      right\n      linarith\n  · apply has_finite_integral_of_bounded\n    swap\n    · exact 1 / (s - 1)\n    refine' (ae_restrict_iff' measurable_set_Ioc).mpr (ae_of_all _ fun x hx => _)\n    rw [norm_norm, norm_eq_abs, mul_assoc, abs_mul, ← one_mul (1 / (s - 1))]\n    refine' mul_le_mul _ _ (abs_nonneg _) zero_le_one\n    · rw [abs_of_pos (exp_pos (-x)), exp_le_one_iff, neg_le, neg_zero]\n      exact hx.1.le\n    · exact (abs_log_mul_self_rpow_lt x (s - 1) hx.1 hx.2 (sub_pos.mpr hs)).le\n  · have := (dGamma_integrand_is_o_at_top s).is_O.norm_left\n    refine' integrable_of_is_O_exp_neg one_half_pos (continuous_on.mul _ _).norm this\n    · refine' (continuous_exp.comp continuous_neg).continuous_on.mul (continuous_on_log.mono _)\n      simp\n    · apply continuous_at.continuous_on fun x hx => _\n      apply continuous_at_id.rpow continuous_at_const\n      dsimp\n      right\n      linarith\n#align dGamma_integral_abs_convergent dGamma_integral_abs_convergent\n\n",
 "Gamma_nat_eq_factorial":
 "theorem Gamma_nat_eq_factorial (n : ℕ) : Gamma (n + 1) = Nat.factorial n :=\n  by\n  induction' n with n hn\n  · rw [Nat.cast_zero, zero_add]\n    rw [Gamma_eq_integral]\n    simpa using Gamma_integral_one\n    simp\n  rw [Gamma_add_one n.succ <| nat.cast_ne_zero.mpr <| nat.succ_ne_zero n]\n  · simp only [Nat.cast_succ, Nat.factorial_succ, nat.cast_mul]\n    congr\n    exact hn\n#align Gamma_nat_eq_factorial Gamma_nat_eq_factorial\n\n",
 "Gamma_integrand_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Asymptotic bound for the `Γ` function integrand. -/\ntheorem Gamma_integrand_is_o (s : exprℝ) :\n    «expr =o[ ] » (fun x : exprℝ => exp (-x) * x ^ s) at_top fun x : exprℝ => exp (-(1 / 2) * x) :=\n  by\n  refine' is_o_of_tendsto (fun x hx => _) _\n  · exfalso\n    exact (exp_pos (-(1 / 2) * x)).ne' hx\n  have : (fun x : exprℝ => exp (-x) * x ^ s / exp (-(1 / 2) * x)) = (fun x : exprℝ => exp (1 / 2 * x) / x ^ s)⁻¹ :=\n    by\n    ext1 x\n    field_simp [exp_ne_zero, exp_neg, ← real.exp_add]\n    left\n    ring\n  rw [this]\n  exact (tendsto_exp_mul_div_rpow_at_top s (1 / 2) one_half_pos).inv_tendsto_at_top\n#align Gamma_integrand_is_o Gamma_integrand_is_o\n\n",
 "Gamma_integrand_interval_integrable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\nprivate theorem Gamma_integrand_interval_integrable (s : exprℂ) {X : exprℝ} (hs : 0 < s.re) (hX : 0 ≤ X) :\n    interval_integrable (fun x => (-x).exp * x ^ (s - 1) : exprℝ → exprℂ) volume 0 X :=\n  by\n  rw [interval_integrable_iff_integrable_Ioc_of_le hX]\n  exact integrable_on.mono_set (Gamma_integral_convergent hs) Ioc_subset_Ioi_self\n#align Gamma_integrand_interval_integrable Gamma_integrand_interval_integrable\n\n",
 "Gamma_integrand_deriv_integrable_B":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\nprivate theorem Gamma_integrand_deriv_integrable_B {s : exprℂ} (hs : 0 < s.re) {Y : exprℝ} (hY : 0 ≤ Y) :\n    interval_integrable (fun x : exprℝ => (-x).exp * (s * x ^ (s - 1)) : exprℝ → exprℂ) volume 0 Y :=\n  by\n  have :\n    (fun x => (-x).exp * (s * x ^ (s - 1)) : exprℝ → exprℂ) = (fun x => s * ((-x).exp * x ^ (s - 1)) : exprℝ → exprℂ) :=\n    by\n    ext1\n    ring\n  rw [this, interval_integrable_iff_integrable_Ioc_of_le hY]\n  constructor\n  · refine' (continuous_on_const.mul _).ae_strongly_measurable measurable_set_Ioc\n    apply (continuous_of_real.comp continuous_neg.exp).continuous_on.mul\n    apply continuous_at.continuous_on\n    intro x hx\n    refine' (_ : continuous_at (fun x : exprℂ => x ^ (s - 1)) _).comp continuous_of_real.continuous_at\n    apply continuous_at_cpow_const\n    rw [of_real_re]\n    exact or.inl hx.1\n  rw [← has_finite_integral_norm_iff]\n  simp_rw [norm_eq_abs, map_mul]\n  refine' (((real.Gamma_integral_convergent hs).mono_set Ioc_subset_Ioi_self).has_finite_integral.congr _).const_mul _\n  rw [eventually_eq, ae_restrict_iff']\n  · apply ae_of_all\n    intro x hx\n    rw [abs_of_nonneg (exp_pos _).le, abs_cpow_eq_rpow_re_of_pos hx.1]\n    simp\n  · exact measurable_set_Ioc\n#align Gamma_integrand_deriv_integrable_B Gamma_integrand_deriv_integrable_B\n\n",
 "Gamma_integrand_deriv_integrable_A":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\nprivate theorem Gamma_integrand_deriv_integrable_A {s : exprℂ} (hs : 0 < s.re) {X : exprℝ} (hX : 0 ≤ X) :\n    interval_integrable (fun x => -((-x).exp * x ^ s) : exprℝ → exprℂ) volume 0 X :=\n  by\n  convert (Gamma_integrand_interval_integrable (s + 1) _ hX).neg\n  · ext1\n    simp only [add_sub_cancel, pi.neg_apply]\n  · simp only [add_re, one_re]\n    linarith\n#align Gamma_integrand_deriv_integrable_A Gamma_integrand_deriv_integrable_A\n\n",
 "Gamma_integral_one":
 "theorem Gamma_integral_one : Gamma_integral 1 = 1 :=\n  by\n  rw [← of_real_one, Gamma_integral_of_real, of_real_inj]\n  exact real.Gamma_integral_one\n#align Gamma_integral_one Gamma_integral_one\n\n",
 "Gamma_integral_of_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem Gamma_integral_of_real (s : exprℝ) : Gamma_integral ↑s = ↑s.Gamma_integral :=\n  by\n  rw [real.Gamma_integral, ← _root_.integral_of_real]\n  refine' set_integral_congr measurable_set_Ioi _\n  intro x hx; dsimp only\n  rw [of_real_mul, of_real_cpow (mem_Ioi.mp hx).le]\n  simp\n#align Gamma_integral_of_real Gamma_integral_of_real\n\n",
 "Gamma_integral_convergent":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- Technical note: In defining the Gamma integrand exp (-x) * x ^ (s - 1) for s complex, we have to\nmake a choice between ↑(real.exp (-x)), complex.exp (↑(-x)), and complex.exp (-↑x), all of which are\nequal but not definitionally so. We use the first of these throughout. -/\n/-- The integral defining the `Γ` function converges for complex `s` with `0 < re s`.\n\nThis is proved by reduction to the real case. -/\ntheorem Gamma_integral_convergent {s : exprℂ} (hs : 0 < s.re) :\n    integrable_on (fun x => (-x).exp * x ^ (s - 1) : exprℝ → exprℂ) (Ioi 0) :=\n  by\n  constructor\n  · refine' continuous_on.ae_strongly_measurable _ measurable_set_Ioi\n    apply (continuous_of_real.comp continuous_neg.exp).continuous_on.mul\n    apply continuous_at.continuous_on\n    intro x hx\n    have : continuous_at (fun x : exprℂ => x ^ (s - 1)) ↑x :=\n      by\n      apply continuous_at_cpow_const\n      rw [of_real_re]\n      exact or.inl hx\n    exact continuous_at.comp this continuous_of_real.continuous_at\n  · rw [← has_finite_integral_norm_iff]\n    refine' has_finite_integral.congr (real.Gamma_integral_convergent hs).2 _\n    refine' (ae_restrict_iff' measurable_set_Ioi).mpr (ae_of_all _ fun x hx => _)\n    dsimp only\n    rw [norm_eq_abs, map_mul, abs_of_nonneg <| le_of_lt <| exp_pos <| -x, abs_cpow_eq_rpow_re_of_pos hx _]\n    simp\n#align Gamma_integral_convergent Gamma_integral_convergent\n\n",
 "Gamma_integral_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- The recurrence relation for the `Γ` integral. -/\ntheorem Gamma_integral_add_one {s : exprℂ} (hs : 0 < s.re) : Gamma_integral (s + 1) = s * Gamma_integral s :=\n  by\n  suffices tendsto (s + 1).partial_Gamma at_top (nhds <| s * Gamma_integral s)\n    by\n    refine' tendsto_nhds_unique _ this\n    apply tendsto_partial_Gamma\n    rw [add_re, one_re]\n    linarith\n  have : «expr =ᶠ[ ] » (fun X : exprℝ => s * partial_Gamma s X - X ^ s * (-X).exp) at_top (s + 1).partial_Gamma :=\n    by\n    apply eventually_eq_of_mem (Ici_mem_at_top (0 : exprℝ))\n    intro X hX\n    rw [partial_Gamma_add_one hs (mem_Ici.mp hX)]\n    ring_nf\n  refine' tendsto.congr' this _\n  suffices tendsto (fun X => -X ^ s * (-X).exp : exprℝ → exprℂ) at_top ((nhds) 0) by\n    simpa using tendsto.add (tendsto.const_mul s (tendsto_partial_Gamma hs)) this\n  rw [tendsto_zero_iff_norm_tendsto_zero]\n  have :\n    «expr =ᶠ[ ] » (fun e : exprℝ => «expr‖ ‖» (-(e : exprℂ) ^ s * (-e).exp)) at_top fun e : exprℝ =>\n      e ^ s.re * (-1 * e).exp :=\n    by\n    refine' eventually_eq_of_mem (Ioi_mem_at_top 0) _\n    intro x hx\n    dsimp only\n    rw [norm_eq_abs, map_mul, abs.map_neg, abs_cpow_eq_rpow_re_of_pos hx, abs_of_nonneg (exp_pos (-x)).le, neg_mul,\n      one_mul]\n  exact (tendsto_congr' this).mpr (tendsto_rpow_mul_exp_neg_mul_at_top_nhds_0 _ _ zero_lt_one)\n#align Gamma_integral_add_one Gamma_integral_add_one\n\n",
 "Gamma_eq_integral":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem Gamma_eq_integral (s : exprℂ) (hs : 0 < s.re) : Gamma s = Gamma_integral s :=\n  Gamma_eq_Gamma_aux s 0\n    (by\n      norm_cast\n      linarith)\n#align Gamma_eq_integral Gamma_eq_integral\n\n",
 "Gamma_eq_Gamma_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem Gamma_eq_Gamma_aux (s : exprℂ) (n : ℕ) (h1 : -s.re < ↑n) : Gamma s = Gamma_aux n s :=\n  by\n  have u : ∀ k : ℕ, Gamma_aux («expr⌊ ⌋₊» (1 - s.re) + k) s = Gamma s :=\n    by\n    intro k\n    induction' k with k hk\n    · simp [Gamma]\n    · rw [← hk, nat.succ_eq_add_one, ← add_assoc]\n      refine' (Gamma_aux_recurrence2 s («expr⌊ ⌋₊» (1 - s.re) + k) _).symm\n      rw [Nat.cast_add]\n      have i0 := Nat.sub_one_lt_floor (1 - s.re)\n      simp only [sub_sub_cancel_left] at i0\n      refine' lt_add_of_lt_of_nonneg i0 _\n      rw [← Nat.cast_zero, nat.cast_le]\n      exact nat.zero_le k\n  convert (u <| n - «expr⌊ ⌋₊» (1 - s.re)).symm\n  rw [nat.add_sub_of_le]\n  by_cases 0 ≤ 1 - s.re\n  · apply nat.le_of_lt_succ\n    exact_mod_cast lt_of_le_of_lt (Nat.floor_le h) (by linarith : 1 - s.re < n + 1)\n  · rw [Nat.floor_of_nonpos]\n    linarith\n    linarith\n#align Gamma_eq_Gamma_aux Gamma_eq_Gamma_aux\n\n",
 "Gamma_aux_recurrence2":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem Gamma_aux_recurrence2 (s : exprℂ) (n : ℕ) (h1 : -s.re < ↑n) : Gamma_aux n s = Gamma_aux (n + 1) s :=\n  by\n  cases n\n  · simp only [Nat.cast_zero, neg_lt_zero] at h1\n    dsimp only [Gamma_aux]\n    rw [Gamma_integral_add_one h1, mul_div_cancel_left]\n    rintro rfl\n    rw [zero_re] at h1\n    exact h1.false\n  · dsimp only [Gamma_aux]\n    have : Gamma_aux n (s + 1 + 1) / (s + 1) = Gamma_aux n (s + 1) :=\n      by\n      have hh1 : -(s + 1).re < n :=\n        by\n        rw [nat.succ_eq_add_one, Nat.cast_add, Nat.cast_one] at h1\n        rw [add_re, one_re]\n        linarith\n      rw [Gamma_aux_recurrence1 (s + 1) n hh1]\n    rw [this]\n#align Gamma_aux_recurrence2 Gamma_aux_recurrence2\n\n",
 "Gamma_aux_recurrence1":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem Gamma_aux_recurrence1 (s : exprℂ) (n : ℕ) (h1 : -s.re < ↑n) : Gamma_aux n s = Gamma_aux n (s + 1) / s :=\n  by\n  induction' n with n hn generalizing s\n  · simp only [Nat.cast_zero, neg_lt_zero] at h1\n    dsimp only [Gamma_aux]\n    rw [Gamma_integral_add_one h1]\n    rw [mul_comm, mul_div_cancel]\n    contrapose! h1\n    rw [h1]\n    simp\n  · dsimp only [Gamma_aux]\n    have hh1 : -(s + 1).re < n :=\n      by\n      rw [nat.succ_eq_add_one, Nat.cast_add, Nat.cast_one] at h1\n      rw [add_re, one_re]\n      linarith\n    rw [← hn (s + 1) hh1]\n#align Gamma_aux_recurrence1 Gamma_aux_recurrence1\n\n",
 "Gamma_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- The recurrence relation for the `Γ` function. -/\ntheorem Gamma_add_one (s : exprℂ) (h2 : s ≠ 0) : Gamma (s + 1) = s * Gamma s :=\n  by\n  let n := «expr⌊ ⌋₊» (1 - s.re)\n  have t1 : -s.re < n := by simpa only [sub_sub_cancel_left] using Nat.sub_one_lt_floor (1 - s.re)\n  have t2 : -(s + 1).re < n := by\n    rw [add_re, one_re]\n    linarith\n  rw [Gamma_eq_Gamma_aux s n t1, Gamma_eq_Gamma_aux (s + 1) n t2, Gamma_aux_recurrence1 s n t1]\n  field_simp\n  ring\n#align Gamma_add_one Gamma_add_one\n\n"}