{"sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff.sqrt (hf : cont_diff (exprℝ) n f) (h : ∀ x, f x ≠ 0) : cont_diff (exprℝ) n fun y => sqrt (f y) :=\n  cont_diff_iff_cont_diff_at.2 fun x => hf.cont_diff_at.sqrt (h x)\n#align cont_diff.sqrt cont_diff.sqrt\n\n",
 "has_strict_deriv_at_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_strict_deriv_at_sqrt {x : exprℝ} (hx : x ≠ 0) : has_strict_deriv_at sqrt (1 / (2 * sqrt x)) x :=\n  (deriv_sqrt_aux hx).1\n#align has_strict_deriv_at_sqrt has_strict_deriv_at_sqrt\n\n",
 "has_deriv_at_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_deriv_at_sqrt {x : exprℝ} (hx : x ≠ 0) : has_deriv_at sqrt (1 / (2 * sqrt x)) x :=\n  (has_strict_deriv_at_sqrt hx).has_deriv_at\n#align has_deriv_at_sqrt has_deriv_at_sqrt\n\n",
 "fderiv_within_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem fderiv_within_sqrt (hf : differentiable_within_at (exprℝ) f s x) (hx : f x ≠ 0)\n    (hxs : unique_diff_within_at (exprℝ) s x) :\n    fderiv_within (exprℝ) (fun x => sqrt (f x)) s x = «expr • » (1 / (2 * sqrt (f x))) (fderiv_within (exprℝ) f s x) :=\n  (hf.has_fderiv_within_at.sqrt hx).fderiv_within hxs\n#align fderiv_within_sqrt fderiv_within_sqrt\n\n",
 "fderiv_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem fderiv_sqrt (hf : differentiable_at (exprℝ) f x) (hx : f x ≠ 0) :\n    fderiv (exprℝ) (fun x => sqrt (f x)) x = «expr • » (1 / (2 * sqrt (f x))) (fderiv (exprℝ) f x) :=\n  (hf.has_fderiv_at.sqrt hx).fderiv\n#align fderiv_sqrt fderiv_sqrt\n\n",
 "deriv_within_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem deriv_within_sqrt (hf : differentiable_within_at (exprℝ) f s x) (hx : f x ≠ 0)\n    (hxs : unique_diff_within_at (exprℝ) s x) :\n    deriv_within (fun x => sqrt (f x)) s x = deriv_within f s x / (2 * sqrt (f x)) :=\n  (hf.has_deriv_within_at.sqrt hx).deriv_within hxs\n#align deriv_within_sqrt deriv_within_sqrt\n\n",
 "deriv_sqrt_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2021 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem deriv_sqrt_aux {x : exprℝ} (hx : x ≠ 0) :\n    has_strict_deriv_at sqrt (1 / (2 * sqrt x)) x ∧ ∀ n, cont_diff_at (exprℝ) n sqrt x :=\n  by\n  cases' hx.lt_or_lt with hx hx\n  · rw [sqrt_eq_zero_of_nonpos hx.le, MulZeroClass.mul_zero, div_zero]\n    have : «expr =ᶠ[ ] » sqrt ((nhds) x) fun _ => 0 := (gt_mem_nhds hx).mono fun x hx => sqrt_eq_zero_of_nonpos hx.le\n    exact\n      ⟨(has_strict_deriv_at_const x (0 : exprℝ)).congr_of_eventually_eq this.symm, fun n =>\n        cont_diff_at_const.congr_of_eventually_eq this⟩\n  · have : ↑2 * sqrt x ^ (2 - 1) ≠ 0 := by simp [(sqrt_pos.2 hx).ne', @two_ne_zero (exprℝ)]\n    constructor\n    · simpa using sq_local_homeomorph.has_strict_deriv_at_symm hx this (has_strict_deriv_at_pow 2 _)\n    ·\n      exact fun n =>\n        sq_local_homeomorph.cont_diff_at_symm_deriv this hx (has_deriv_at_pow 2 (sqrt x)) (cont_diff_at_id.pow 2)\n#align deriv_sqrt_aux deriv_sqrt_aux\n\n",
 "deriv_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem deriv_sqrt (hf : differentiable_at (exprℝ) f x) (hx : f x ≠ 0) :\n    deriv (fun x => sqrt (f x)) x = deriv f x / (2 * sqrt (f x)) :=\n  (hf.has_deriv_at.sqrt hx).deriv\n#align deriv_sqrt deriv_sqrt\n\n",
 "cont_diff_at_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_at_sqrt {x : exprℝ} {n : «exprℕ∞»} (hx : x ≠ 0) : cont_diff_at (exprℝ) n sqrt x :=\n  (deriv_sqrt_aux hx).2 n\n#align cont_diff_at_sqrt cont_diff_at_sqrt\n\n"}