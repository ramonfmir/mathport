{"tendsto_mul_log_one_plus_div_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The function `x * log (1 + t / x)` tends to `t` at `+∞`. -/\ntheorem tendsto_mul_log_one_plus_div_at_top (t : exprℝ) : tendsto (fun x => x * log (1 + t / x)) at_top ((nhds) t) :=\n  by\n  have h₁ : tendsto (fun h => h⁻¹ * log (1 + t * h)) (nhds_within.ne 0) ((nhds) t) := by\n    simpa [has_deriv_at_iff_tendsto_slope, slope_fun_def] using\n      (((has_deriv_at_id (0 : exprℝ)).const_mul t).const_add 1).log (by simp)\n  have h₂ : tendsto (fun x : exprℝ => x⁻¹) at_top (nhds_within.ne 0) :=\n    tendsto_inv_at_top_zero'.mono_right (nhds_within_mono _ fun x hx => (set.mem_Ioi.mp hx).ne')\n  simpa only [(· ∘ ·), inv_inv] using h₁.comp h₂\n#align tendsto_mul_log_one_plus_div_at_top tendsto_mul_log_one_plus_div_at_top\n\n",
 "log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem fderiv.log (hf : differentiable_at (exprℝ) f x) (hx : f x ≠ 0) :\n    fderiv (exprℝ) (fun x => log (f x)) x = «expr • » (f x)⁻¹ (fderiv (exprℝ) f x) :=\n  (hf.has_fderiv_at.log hx).fderiv\n#align fderiv.log fderiv.log\n\n",
 "has_sum_pow_div_log_of_abs_lt_1":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr div_le_div_of_le_left, \",\", expr pow_nonneg, \",\", expr abs_nonneg, \",\", expr add_le_add_right, \",\", expr i.cast_nonneg, \"]\"],\n  []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Power series expansion of the logarithm around `1`. -/\ntheorem has_sum_pow_div_log_of_abs_lt_1 {x : exprℝ} (h : |x| < 1) :\n    has_sum (fun n : ℕ => x ^ (n + 1) / (n + 1)) (-log (1 - x)) :=\n  by\n  rw [summable.has_sum_iff_tendsto_nat]\n  show\n    tendsto\n      (fun n : ℕ =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (x ^ (i + 1) / (i + 1)))\n      at_top ((nhds) (-log (1 - x)))\n  · rw [tendsto_iff_norm_tendsto_zero]\n    simp only [norm_eq_abs, sub_neg_eq_add]\n    refine' squeeze_zero (fun n => abs_nonneg _) (abs_log_sub_add_sum_range_le h) _\n    suffices tendsto (fun t : ℕ => |x| ^ (t + 1) / (1 - |x|)) at_top ((nhds) (|x| * 0 / (1 - |x|))) by simpa\n    simp only [pow_succ]\n    refine' (tendsto_const_nhds.mul _).div_const\n    exact tendsto_pow_at_top_nhds_0_of_lt_1 (abs_nonneg _) h\n  show summable fun n : ℕ => x ^ (n + 1) / (n + 1)\n  · refine' summable_of_norm_bounded _ (summable_geometric_of_lt_1 (abs_nonneg _) h) fun i => _\n    calc\n      «expr‖ ‖» (x ^ (i + 1) / (i + 1)) = |x| ^ (i + 1) / (i + 1) :=\n        by\n        have : (0 : exprℝ) ≤ i + 1 := le_of_lt (nat.cast_add_one_pos i)\n        rw [norm_eq_abs, abs_div, ← pow_abs, abs_of_nonneg this]\n      _ ≤ |x| ^ (i + 1) / (0 + 1) :=\n        by\n        trace\n          \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr div_le_div_of_le_left, \\\",\\\", expr pow_nonneg, \\\",\\\", expr abs_nonneg, \\\",\\\", expr add_le_add_right, \\\",\\\", expr i.cast_nonneg, \\\"]\\\"],\\n  []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n        norm_num\n      _ ≤ |x| ^ i := by simpa [pow_succ'] using mul_le_of_le_one_right (pow_nonneg (abs_nonneg x) i) (le_of_lt h)\n      \n#align has_sum_pow_div_log_of_abs_lt_1 has_sum_pow_div_log_of_abs_lt_1\n\n",
 "has_sum_log_sub_log_of_abs_lt_1":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Power series expansion of `log(1 + x) - log(1 - x)` for `|x| < 1`. -/\ntheorem has_sum_log_sub_log_of_abs_lt_1 {x : exprℝ} (h : |x| < 1) :\n    has_sum (fun k : ℕ => (2 : exprℝ) * (1 / (2 * k + 1)) * x ^ (2 * k + 1)) (log (1 + x) - log (1 - x)) :=\n  by\n  let term := fun n : ℕ => -1 * ((-x) ^ (n + 1) / ((n : exprℝ) + 1)) + x ^ (n + 1) / (n + 1)\n  have h_term_eq_goal : term ∘ (· * ·) 2 = fun k : ℕ => 2 * (1 / (2 * k + 1)) * x ^ (2 * k + 1) :=\n    by\n    ext n\n    dsimp [term]\n    rw [Odd.neg_pow (⟨n, rfl⟩ : Odd (2 * n + 1)) x]\n    push_cast\n    ring_nf\n  rw [← h_term_eq_goal, (mul_right_injective₀ (two_ne_zero' ℕ)).has_sum_iff]\n  · have h₁ := (has_sum_pow_div_log_of_abs_lt_1 (eq.trans_lt (abs_neg x) h)).mul_left (-1)\n    convert h₁.add (has_sum_pow_div_log_of_abs_lt_1 h)\n    ring_nf\n  · intro m hm\n    rw [range_two_mul, Set.mem_setOf_eq, ← nat.even_add_one] at hm\n    dsimp [term]\n    rw [Even.neg_pow hm, neg_one_mul, neg_add_self]\n#align has_sum_log_sub_log_of_abs_lt_1 has_sum_log_sub_log_of_abs_lt_1\n\n",
 "has_sum_log_one_add_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Expansion of `log (1 + a⁻¹)` as a series in powers of `1 / (2 * a + 1)`. -/\ntheorem has_sum_log_one_add_inv {a : exprℝ} (h : 0 < a) :\n    has_sum (fun k : ℕ => (2 : exprℝ) * (1 / (2 * k + 1)) * (1 / (2 * a + 1)) ^ (2 * k + 1)) (log (1 + a⁻¹)) :=\n  by\n  have h₁ : |1 / (2 * a + 1)| < 1 := by\n    rw [abs_of_pos, div_lt_one]\n    · linarith\n    · linarith\n    · exact div_pos one_pos (by linarith)\n  convert has_sum_log_sub_log_of_abs_lt_1 h₁\n  have h₂ : (2 : exprℝ) * a + 1 ≠ 0 := by linarith\n  have h₃ := h.ne'\n  rw [← log_div]\n  · congr\n    field_simp\n    linarith\n  · field_simp\n    linarith\n  · field_simp\n#align has_sum_log_one_add_inv has_sum_log_one_add_inv\n\n",
 "has_strict_deriv_at_log_of_pos":
 "/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle Sönne\n-/\ntheorem has_strict_deriv_at_log_of_pos (hx : 0 < x) : has_strict_deriv_at log x⁻¹ x :=\n  by\n  have : has_strict_deriv_at log (exp <| log x)⁻¹ x :=\n    (has_strict_deriv_at_exp <| log x).of_local_left_inverse (continuous_at_log hx.ne') (ne_of_gt <| exp_pos _) <|\n      eventually.mono (lt_mem_nhds hx) @exp_log\n  rwa [exp_log hx] at this\n#align has_strict_deriv_at_log_of_pos has_strict_deriv_at_log_of_pos\n\n",
 "has_strict_deriv_at_log":
 "theorem has_strict_deriv_at_log (hx : x ≠ 0) : has_strict_deriv_at log x⁻¹ x :=\n  by\n  cases' hx.lt_or_lt with hx hx\n  · convert (has_strict_deriv_at_log_of_pos (neg_pos.mpr hx)).comp x (has_strict_deriv_at_neg x)\n    · ext y\n      exact (log_neg_eq_log y).symm\n    · field_simp [hx.ne]\n  · exact has_strict_deriv_at_log_of_pos hx\n#align has_strict_deriv_at_log has_strict_deriv_at_log\n\n",
 "has_deriv_at_log":
 "theorem has_deriv_at_log (hx : x ≠ 0) : has_deriv_at log x⁻¹ x :=\n  (has_strict_deriv_at_log hx).has_deriv_at\n#align has_deriv_at_log has_deriv_at_log\n\n",
 "differentiable_on_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem differentiable_on_log : differentiable_on (exprℝ) log («expr ᶜ» {0}) := fun x hx =>\n  (differentiable_at_log hx).differentiable_within_at\n#align differentiable_on_log differentiable_on_log\n\n",
 "differentiable_at_log_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem differentiable_at_log_iff : differentiable_at (exprℝ) log x ↔ x ≠ 0 :=\n  ⟨fun h => continuous_at_log_iff.1 h.continuous_at, differentiable_at_log⟩\n#align differentiable_at_log_iff differentiable_at_log_iff\n\n",
 "differentiable_at_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem differentiable_at_log (hx : x ≠ 0) : differentiable_at (exprℝ) log x :=\n  (has_deriv_at_log hx).differentiable_at\n#align differentiable_at_log differentiable_at_log\n\n",
 "deriv_log'":
 "@[simp]\ntheorem deriv_log' : deriv log = has_inv.inv :=\n  funext deriv_log\n#align deriv_log' deriv_log'\n\n",
 "deriv_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem deriv_log (x : exprℝ) : deriv log x = x⁻¹ :=\n  if hx : x = 0 then by\n    rw [deriv_zero_of_not_differentiable_at (mt differentiable_at_log_iff.1 (not_not.2 hx)), hx, inv_zero]\n  else (has_deriv_at_log hx).deriv\n#align deriv_log deriv_log\n\n",
 "cont_diff_on_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem cont_diff_on_log {n : «exprℕ∞»} : cont_diff_on (exprℝ) n log («expr ᶜ» {0}) :=\n  by\n  suffices : cont_diff_on (exprℝ) («expr⊤») log («expr ᶜ» {0}); exact this.of_le le_top\n  refine' (cont_diff_on_top_iff_deriv_of_open is_open_compl_singleton).2 _\n  simp [differentiable_on_log, cont_diff_on_inv]\n#align cont_diff_on_log cont_diff_on_log\n\n",
 "cont_diff_at_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_at_log {n : «exprℕ∞»} : cont_diff_at (exprℝ) n log x ↔ x ≠ 0 :=\n  ⟨fun h => continuous_at_log_iff.1 h.continuous_at, fun hx =>\n    (cont_diff_on_log x hx).cont_diff_at <| is_open.mem_nhds is_open_compl_singleton hx⟩\n#align cont_diff_at_log cont_diff_at_log\n\n",
 "abs_log_sub_add_sum_range_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr div_le_div, \",\", expr pow_nonneg, \",\", expr abs_nonneg, \",\", expr pow_le_pow_of_le_left, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- A crude lemma estimating the difference between `log (1-x)` and its Taylor series at `0`,\nwhere the main point of the bound is that it tends to `0`. The goal is to deduce the series\nexpansion of the logarithm, in `has_sum_pow_div_log_of_abs_lt_1`.\n-/\ntheorem abs_log_sub_add_sum_range_le {x : exprℝ} (h : |x| < 1) (n : ℕ) :\n    |finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n            (x ^ (i + 1) / (i + 1)) +\n          log (1 - x)| ≤\n      |x| ^ (n + 1) / (1 - |x|) :=\n  by\n  /- For the proof, we show that the derivative of the function to be estimated is small,\n    and then apply the mean value inequality. -/\n  let F : exprℝ → exprℝ := fun x =>\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        (x ^ (i + 1) / (i + 1)) +\n      log (1 - x)\n  -- First step: compute the derivative of `F`\n  have A : ∀ y ∈ Ioo (-1 : exprℝ) 1, deriv F y = -y ^ n / (1 - y) :=\n    by\n    intro y hy\n    have :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          ((↑i + 1) * y ^ i / (↑i + 1)) =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (y ^ i) :=\n      by\n      congr with i\n      exact mul_div_cancel_left _ (nat.cast_add_one_pos i).ne'\n    field_simp [F, this, geom_sum_eq (ne_of_lt hy.2), sub_ne_zero_of_ne (ne_of_gt hy.2),\n      sub_ne_zero_of_ne (ne_of_lt hy.2)]\n    ring\n  -- second step: show that the derivative of `F` is small\n  have B : ∀ y ∈ Icc (-|x|) (|x|), |deriv F y| ≤ |x| ^ n / (1 - |x|) :=\n    by\n    intro y hy\n    have : y ∈ Ioo (-(1 : exprℝ)) 1 := ⟨lt_of_lt_of_le (neg_lt_neg h) hy.1, lt_of_le_of_lt hy.2 h⟩\n    calc\n      |deriv F y| = |-y ^ n / (1 - y)| := by rw [A y this]\n      _ ≤ |x| ^ n / (1 - |x|) := by\n        have : |y| ≤ |x| := abs_le.2 hy\n        have : 0 < 1 - |x| := by linarith\n        have : 1 - |x| ≤ |1 - y| := le_trans (by linarith [hy.2]) (le_abs_self _)\n        simp only [← pow_abs, abs_div, abs_neg]\n        trace\n          \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr div_le_div, \\\",\\\", expr pow_nonneg, \\\",\\\", expr abs_nonneg, \\\",\\\", expr pow_le_pow_of_le_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n      \n  -- third step: apply the mean value inequality\n  have C : «expr‖ ‖» (F x - F 0) ≤ |x| ^ n / (1 - |x|) * «expr‖ ‖» (x - 0) :=\n    by\n    have : ∀ y ∈ Icc (-|x|) (|x|), differentiable_at (exprℝ) F y :=\n      by\n      intro y hy\n      have : 1 - y ≠ 0 := sub_ne_zero_of_ne (ne_of_gt (lt_of_le_of_lt hy.2 h))\n      simp [F, this]\n    apply convex.norm_image_sub_le_of_norm_deriv_le this B (convex_Icc _ _) _ _\n    · simp\n    · simp [le_abs_self x, neg_le.mp (neg_le_abs_self x)]\n  -- fourth step: conclude by massaging the inequality of the third step\n  simpa [F, norm_eq_abs, div_mul_eq_mul_div, pow_succ'] using C\n#align abs_log_sub_add_sum_range_le abs_log_sub_add_sum_range_le\n\n"}