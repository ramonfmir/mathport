{"tendsto_logb_at_top_of_base_lt_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem tendsto_logb_at_top_of_base_lt_one : tendsto (logb b) at_top at_bot :=\n  by\n  rw [tendsto_at_top_at_bot]\n  intro e\n  use «expr ⊔ » 1 (b ^ e)\n  intro a\n  simp only [and_imp, sup_le_iff]\n  intro ha\n  rw [logb_le_iff_le_rpow_of_base_lt_one b_pos b_lt_one]\n  tauto\n  exact lt_of_lt_of_le zero_lt_one ha\n#align tendsto_logb_at_top_of_base_lt_one tendsto_logb_at_top_of_base_lt_one\n\n",
 "tendsto_logb_at_top":
 "theorem tendsto_logb_at_top : tendsto (logb b) at_top at_top :=\n  tendsto.at_top_div_const (log_pos hb) tendsto_log_at_top\n#align tendsto_logb_at_top tendsto_logb_at_top\n\n",
 "surj_on_logb'":
 "theorem surj_on_logb' : SurjOn (logb b) (Iio 0) univ :=\n  by\n  intro x x_in_univ\n  use -b ^ x\n  constructor\n  · simp only [right.neg_neg_iff, Set.mem_Iio]\n    apply rpow_pos_of_pos b_pos\n  · rw [logb_neg_eq_logb, logb_rpow b_pos b_ne_one]\n#align surj_on_logb' surj_on_logb'\n\n",
 "surj_on_logb":
 "theorem surj_on_logb : SurjOn (logb b) (Ioi 0) univ := fun x _ =>\n  ⟨rpow b x, rpow_pos_of_pos b_pos x, logb_rpow b_pos b_ne_one⟩\n#align surj_on_logb surj_on_logb\n\n",
 "strict_mono_on_logb_of_base_lt_one":
 "theorem strict_mono_on_logb_of_base_lt_one : strict_mono_on (logb b) (Set.Iio 0) :=\n  by\n  rintro x (hx : x < 0) y (hy : y < 0) hxy\n  rw [← logb_abs y, ← logb_abs x]\n  refine' logb_lt_logb_of_base_lt_one b_pos b_lt_one (abs_pos.2 hy.ne) _\n  rwa [abs_of_neg hy, abs_of_neg hx, neg_lt_neg_iff]\n#align strict_mono_on_logb_of_base_lt_one strict_mono_on_logb_of_base_lt_one\n\n",
 "strict_mono_on_logb":
 "theorem strict_mono_on_logb : strict_mono_on (logb b) (Set.Ioi 0) := fun x hx y hy hxy => logb_lt_logb hb hx hxy\n#align strict_mono_on_logb strict_mono_on_logb\n\n",
 "strict_anti_on_logb_of_base_lt_one":
 "theorem strict_anti_on_logb_of_base_lt_one : strict_anti_on (logb b) (Set.Ioi 0) := fun x hx y hy hxy =>\n  logb_lt_logb_of_base_lt_one b_pos b_lt_one hx hxy\n#align strict_anti_on_logb_of_base_lt_one strict_anti_on_logb_of_base_lt_one\n\n",
 "strict_anti_on_logb":
 "theorem strict_anti_on_logb : strict_anti_on (logb b) (Set.Iio 0) :=\n  by\n  rintro x (hx : x < 0) y (hy : y < 0) hxy\n  rw [← logb_abs y, ← logb_abs x]\n  refine' logb_lt_logb hb (abs_pos.2 hy.ne) _\n  rwa [abs_of_neg hy, abs_of_neg hx, neg_lt_neg_iff]\n#align strict_anti_on_logb strict_anti_on_logb\n\n",
 "rpow_logb_of_neg":
 "theorem rpow_logb_of_neg (hx : x < 0) : b ^ logb b x = -x :=\n  by\n  rw [rpow_logb_eq_abs b_pos b_ne_one (ne_of_lt hx)]\n  exact abs_of_neg hx\n#align rpow_logb_of_neg rpow_logb_of_neg\n\n",
 "rpow_logb_eq_abs":
 "theorem rpow_logb_eq_abs (hx : x ≠ 0) : b ^ logb b x = |x| :=\n  by\n  apply log_inj_on_pos\n  simp only [Set.mem_Ioi]\n  apply rpow_pos_of_pos b_pos\n  simp only [abs_pos, mem_Ioi, ne.def, hx, not_false_iff]\n  rw [log_rpow b_pos, logb, log_abs]\n  field_simp [log_b_ne_zero b_pos b_ne_one]\n#align rpow_logb_eq_abs rpow_logb_eq_abs\n\n",
 "rpow_logb":
 "@[simp]\ntheorem rpow_logb (hx : 0 < x) : b ^ logb b x = x :=\n  by\n  rw [rpow_logb_eq_abs b_pos b_ne_one hx.ne']\n  exact abs_of_pos hx\n#align rpow_logb rpow_logb\n\n",
 "range_logb":
 "@[simp]\ntheorem range_logb : range (logb b) = univ :=\n  (logb_surjective b_pos b_ne_one).range_eq\n#align range_logb range_logb\n\n",
 "lt_logb_iff_rpow_lt_of_base_lt_one":
 "theorem lt_logb_iff_rpow_lt_of_base_lt_one (hy : 0 < y) : x < logb b y ↔ y < b ^ x := by\n  rw [← rpow_lt_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hy]\n#align lt_logb_iff_rpow_lt_of_base_lt_one lt_logb_iff_rpow_lt_of_base_lt_one\n\n",
 "lt_logb_iff_rpow_lt":
 "theorem lt_logb_iff_rpow_lt (hy : 0 < y) : x < logb b y ↔ b ^ x < y := by\n  rw [← rpow_lt_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one hb) hy]\n#align lt_logb_iff_rpow_lt lt_logb_iff_rpow_lt\n\n",
 "logb_zero":
 "@[simp]\ntheorem logb_zero : logb b 0 = 0 := by simp [logb]\n#align logb_zero logb_zero\n\n",
 "logb_surjective":
 "theorem logb_surjective : surjective (logb b) := fun x => ⟨b ^ x, logb_rpow b_pos b_ne_one⟩\n#align logb_surjective logb_surjective\n\n",
 "logb_rpow":
 "@[simp]\ntheorem logb_rpow : logb b (b ^ x) = x :=\n  by\n  rw [logb, div_eq_iff, log_rpow b_pos]\n  exact log_b_ne_zero b_pos b_ne_one\n#align logb_rpow logb_rpow\n\n",
 "logb_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n-- TODO add other limits and continuous API lemmas analogous to those in log.lean\ntheorem logb_prod {α : Type _} (s : Finset α) (f : α → exprℝ) (hf : ∀ x ∈ s, f x ≠ 0) :\n    logb b (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (logb b (f i)) :=\n  by\n  classical\n    induction' s using Finset.induction_on with a s ha ih\n    · simp\n    simp only [Finset.mem_insert, forall_eq_or_imp] at hf\n    simp [ha, ih hf.2, logb_mul hf.1 (finset.prod_ne_zero_iff.2 hf.2)]\n#align logb_prod logb_prod\n\n",
 "logb_pos_of_base_lt_one":
 "theorem logb_pos_of_base_lt_one (hx : 0 < x) (hx' : x < 1) : 0 < logb b x :=\n  by\n  rw [logb_pos_iff_of_base_lt_one b_pos b_lt_one hx]\n  exact hx'\n#align logb_pos_of_base_lt_one logb_pos_of_base_lt_one\n\n",
 "logb_pos_iff_of_base_lt_one":
 "theorem logb_pos_iff_of_base_lt_one (hx : 0 < x) : 0 < logb b x ↔ x < 1 := by\n  rw [← @logb_one b, logb_lt_logb_iff_of_base_lt_one b_pos b_lt_one zero_lt_one hx]\n#align logb_pos_iff_of_base_lt_one logb_pos_iff_of_base_lt_one\n\n",
 "logb_pos_iff":
 "theorem logb_pos_iff (hx : 0 < x) : 0 < logb b x ↔ 1 < x :=\n  by\n  rw [← @logb_one b]\n  rw [logb_lt_logb_iff hb zero_lt_one hx]\n#align logb_pos_iff logb_pos_iff\n\n",
 "logb_pos":
 "theorem logb_pos (hx : 1 < x) : 0 < logb b x :=\n  by\n  rw [logb_pos_iff hb (lt_trans zero_lt_one hx)]\n  exact hx\n#align logb_pos logb_pos\n\n",
 "logb_one":
 "@[simp]\ntheorem logb_one : logb b 1 = 0 := by simp [logb]\n#align logb_one logb_one\n\n",
 "logb_nonpos_iff_of_base_lt_one":
 "theorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x ≤ 0 ↔ 1 ≤ x := by\n  rw [← not_lt, logb_pos_iff_of_base_lt_one b_pos b_lt_one hx, not_lt]\n#align logb_nonpos_iff_of_base_lt_one logb_nonpos_iff_of_base_lt_one\n\n",
 "logb_nonpos_iff'":
 "theorem logb_nonpos_iff' (hx : 0 ≤ x) : logb b x ≤ 0 ↔ x ≤ 1 :=\n  by\n  rcases hx.eq_or_lt with (rfl | hx)\n  · simp [le_refl, zero_le_one]\n  exact logb_nonpos_iff hb hx\n#align logb_nonpos_iff' logb_nonpos_iff'\n\n",
 "logb_nonpos_iff":
 "theorem logb_nonpos_iff (hx : 0 < x) : logb b x ≤ 0 ↔ x ≤ 1 := by rw [← not_lt, logb_pos_iff hb hx, not_lt]\n#align logb_nonpos_iff logb_nonpos_iff\n\n",
 "logb_nonpos":
 "theorem logb_nonpos (hx : 0 ≤ x) (h'x : x ≤ 1) : logb b x ≤ 0 :=\n  (logb_nonpos_iff' hb hx).2 h'x\n#align logb_nonpos logb_nonpos\n\n",
 "logb_nonneg_of_base_lt_one":
 "theorem logb_nonneg_of_base_lt_one (hx : 0 < x) (hx' : x ≤ 1) : 0 ≤ logb b x :=\n  by\n  rw [logb_nonneg_iff_of_base_lt_one b_pos b_lt_one hx]\n  exact hx'\n#align logb_nonneg_of_base_lt_one logb_nonneg_of_base_lt_one\n\n",
 "logb_nonneg_iff_of_base_lt_one":
 "theorem logb_nonneg_iff_of_base_lt_one (hx : 0 < x) : 0 ≤ logb b x ↔ x ≤ 1 := by\n  rw [← not_lt, logb_neg_iff_of_base_lt_one b_pos b_lt_one hx, not_lt]\n#align logb_nonneg_iff_of_base_lt_one logb_nonneg_iff_of_base_lt_one\n\n",
 "logb_nonneg_iff":
 "theorem logb_nonneg_iff (hx : 0 < x) : 0 ≤ logb b x ↔ 1 ≤ x := by rw [← not_lt, logb_neg_iff hb hx, not_lt]\n#align logb_nonneg_iff logb_nonneg_iff\n\n",
 "logb_nonneg":
 "theorem logb_nonneg (hx : 1 ≤ x) : 0 ≤ logb b x :=\n  (logb_nonneg_iff hb (zero_lt_one.trans_le hx)).2 hx\n#align logb_nonneg logb_nonneg\n\n",
 "logb_neg_of_base_lt_one":
 "theorem logb_neg_of_base_lt_one (h1 : 1 < x) : logb b x < 0 :=\n  (logb_neg_iff_of_base_lt_one b_pos b_lt_one (lt_trans zero_lt_one h1)).2 h1\n#align logb_neg_of_base_lt_one logb_neg_of_base_lt_one\n\n",
 "logb_neg_iff_of_base_lt_one":
 "theorem logb_neg_iff_of_base_lt_one (h : 0 < x) : logb b x < 0 ↔ 1 < x := by\n  rw [← @logb_one b, logb_lt_logb_iff_of_base_lt_one b_pos b_lt_one h zero_lt_one]\n#align logb_neg_iff_of_base_lt_one logb_neg_iff_of_base_lt_one\n\n",
 "logb_neg_iff":
 "theorem logb_neg_iff (h : 0 < x) : logb b x < 0 ↔ x < 1 :=\n  by\n  rw [← logb_one]\n  exact logb_lt_logb_iff hb h zero_lt_one\n#align logb_neg_iff logb_neg_iff\n\n",
 "logb_neg_eq_logb":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem logb_neg_eq_logb (x : exprℝ) : logb b (-x) = logb b x := by rw [← logb_abs x, ← logb_abs (-x), abs_neg]\n#align logb_neg_eq_logb logb_neg_eq_logb\n\n",
 "logb_neg":
 "theorem logb_neg (h0 : 0 < x) (h1 : x < 1) : logb b x < 0 :=\n  (logb_neg_iff hb h0).2 h1\n#align logb_neg logb_neg\n\n",
 "logb_ne_zero_of_pos_of_ne_one_of_base_lt_one":
 "theorem logb_ne_zero_of_pos_of_ne_one_of_base_lt_one (hx_pos : 0 < x) (hx : x ≠ 1) : logb b x ≠ 0 :=\n  mt (eq_one_of_pos_of_logb_eq_zero_of_base_lt_one b_pos b_lt_one hx_pos) hx\n#align logb_ne_zero_of_pos_of_ne_one_of_base_lt_one logb_ne_zero_of_pos_of_ne_one_of_base_lt_one\n\n",
 "logb_ne_zero_of_pos_of_ne_one":
 "theorem logb_ne_zero_of_pos_of_ne_one (hx_pos : 0 < x) (hx : x ≠ 1) : logb b x ≠ 0 :=\n  mt (eq_one_of_pos_of_logb_eq_zero hb hx_pos) hx\n#align logb_ne_zero_of_pos_of_ne_one logb_ne_zero_of_pos_of_ne_one\n\n",
 "logb_mul":
 "theorem logb_mul (hx : x ≠ 0) (hy : y ≠ 0) : logb b (x * y) = logb b x + logb b y := by\n  simp_rw [logb, log_mul hx hy, add_div]\n#align logb_mul logb_mul\n\n",
 "logb_lt_logb_of_base_lt_one":
 "theorem logb_lt_logb_of_base_lt_one (hx : 0 < x) (hxy : x < y) : logb b y < logb b x :=\n  by\n  rw [logb, logb, div_lt_div_right_of_neg (log_neg b_pos b_lt_one)]\n  exact log_lt_log hx hxy\n#align logb_lt_logb_of_base_lt_one logb_lt_logb_of_base_lt_one\n\n",
 "logb_lt_logb_iff_of_base_lt_one":
 "@[simp]\ntheorem logb_lt_logb_iff_of_base_lt_one (hx : 0 < x) (hy : 0 < y) : logb b x < logb b y ↔ y < x :=\n  by\n  rw [logb, logb, div_lt_div_right_of_neg (log_neg b_pos b_lt_one)]\n  exact log_lt_log_iff hy hx\n#align logb_lt_logb_iff_of_base_lt_one logb_lt_logb_iff_of_base_lt_one\n\n",
 "logb_lt_logb_iff":
 "@[simp]\ntheorem logb_lt_logb_iff (hx : 0 < x) (hy : 0 < y) : logb b x < logb b y ↔ x < y :=\n  by\n  rw [logb, logb, div_lt_div_right (log_pos hb)]\n  exact log_lt_log_iff hx hy\n#align logb_lt_logb_iff logb_lt_logb_iff\n\n",
 "logb_lt_logb":
 "theorem logb_lt_logb (hx : 0 < x) (hxy : x < y) : logb b x < logb b y :=\n  by\n  rw [logb, logb, div_lt_div_right (log_pos hb)]\n  exact log_lt_log hx hxy\n#align logb_lt_logb logb_lt_logb\n\n",
 "logb_lt_iff_lt_rpow_of_base_lt_one":
 "theorem logb_lt_iff_lt_rpow_of_base_lt_one (hx : 0 < x) : logb b x < y ↔ b ^ y < x := by\n  rw [← rpow_lt_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hx]\n#align logb_lt_iff_lt_rpow_of_base_lt_one logb_lt_iff_lt_rpow_of_base_lt_one\n\n",
 "logb_lt_iff_lt_rpow":
 "theorem logb_lt_iff_lt_rpow (hx : 0 < x) : logb b x < y ↔ x < b ^ y := by\n  rw [← rpow_lt_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one hb) hx]\n#align logb_lt_iff_lt_rpow logb_lt_iff_lt_rpow\n\n",
 "logb_le_logb_of_base_lt_one":
 "@[simp]\ntheorem logb_le_logb_of_base_lt_one (h : 0 < x) (h₁ : 0 < y) : logb b x ≤ logb b y ↔ y ≤ x := by\n  rw [logb, logb, div_le_div_right_of_neg (log_neg b_pos b_lt_one), log_le_log h₁ h]\n#align logb_le_logb_of_base_lt_one logb_le_logb_of_base_lt_one\n\n",
 "logb_le_logb":
 "@[simp]\ntheorem logb_le_logb (h : 0 < x) (h₁ : 0 < y) : logb b x ≤ logb b y ↔ x ≤ y := by\n  rw [logb, logb, div_le_div_right (log_pos hb), log_le_log h h₁]\n#align logb_le_logb logb_le_logb\n\n",
 "logb_le_iff_le_rpow_of_base_lt_one":
 "theorem logb_le_iff_le_rpow_of_base_lt_one (hx : 0 < x) : logb b x ≤ y ↔ b ^ y ≤ x := by\n  rw [← rpow_le_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hx]\n#align logb_le_iff_le_rpow_of_base_lt_one logb_le_iff_le_rpow_of_base_lt_one\n\n",
 "logb_le_iff_le_rpow":
 "theorem logb_le_iff_le_rpow (hx : 0 < x) : logb b x ≤ y ↔ x ≤ b ^ y := by\n  rw [← rpow_le_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one hb) hx]\n#align logb_le_iff_le_rpow logb_le_iff_le_rpow\n\n",
 "logb_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem logb_inv (x : exprℝ) : logb b x⁻¹ = -logb b x := by simp [logb, neg_div]\n#align logb_inv logb_inv\n\n",
 "logb_inj_on_pos_of_base_lt_one":
 "theorem logb_inj_on_pos_of_base_lt_one : Set.InjOn (logb b) (Set.Ioi 0) :=\n  (strict_anti_on_logb_of_base_lt_one b_pos b_lt_one).inj_on\n#align logb_inj_on_pos_of_base_lt_one logb_inj_on_pos_of_base_lt_one\n\n",
 "logb_inj_on_pos":
 "theorem logb_inj_on_pos : Set.InjOn (logb b) (Set.Ioi 0) :=\n  (strict_mono_on_logb hb).inj_on\n#align logb_inj_on_pos logb_inj_on_pos\n\n",
 "logb_eq_zero":
 "@[simp]\ntheorem logb_eq_zero : logb b x = 0 ↔ b = 0 ∨ b = 1 ∨ b = -1 ∨ x = 0 ∨ x = 1 ∨ x = -1 :=\n  by\n  simp_rw [logb, div_eq_zero_iff, log_eq_zero]\n  tauto\n#align logb_eq_zero logb_eq_zero\n\n",
 "logb_div":
 "theorem logb_div (hx : x ≠ 0) (hy : y ≠ 0) : logb b (x / y) = logb b x - logb b y := by\n  simp_rw [logb, log_div hx hy, sub_div]\n#align logb_div logb_div\n\n",
 "logb_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem logb_abs (x : exprℝ) : logb b (|x|) = logb b x := by rw [logb, logb, log_abs]\n#align logb_abs logb_abs\n\n",
 "log_div_log":
 "/-\nCopyright (c) 2022 Bolton Bailey. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bolton Bailey, Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle Sönne\n-/\ntheorem log_div_log : log x / log b = logb b x :=\n  rfl\n#align log_div_log log_div_log\n\n",
 "log_b_ne_zero":
 "private theorem log_b_ne_zero : log b ≠ 0 := by\n  have b_ne_zero : b ≠ 0; linarith\n  have b_ne_minus_one : b ≠ -1; linarith\n  simp [b_ne_one, b_ne_zero, b_ne_minus_one]\n#align log_b_ne_zero log_b_ne_zero\n\n",
 "le_logb_iff_rpow_le_of_base_lt_one":
 "theorem le_logb_iff_rpow_le_of_base_lt_one (hy : 0 < y) : x ≤ logb b y ↔ y ≤ b ^ x := by\n  rw [← rpow_le_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hy]\n#align le_logb_iff_rpow_le_of_base_lt_one le_logb_iff_rpow_le_of_base_lt_one\n\n",
 "le_logb_iff_rpow_le":
 "theorem le_logb_iff_rpow_le (hy : 0 < y) : x ≤ logb b y ↔ b ^ x ≤ y := by\n  rw [← rpow_le_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one hb) hy]\n#align le_logb_iff_rpow_le le_logb_iff_rpow_le\n\n",
 "floor_logb_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\ntheorem floor_logb_nat_cast {b : ℕ} {r : exprℝ} (hb : 1 < b) (hr : 0 ≤ r) : «expr⌊ ⌋» (logb b r) = int.log b r :=\n  by\n  obtain rfl | hr := hr.eq_or_lt\n  · rw [logb_zero, int.log_zero_right, Int.floor_zero]\n  have hb1' : 1 < (b : exprℝ) := nat.one_lt_cast.mpr hb\n  apply le_antisymm\n  · rw [← int.zpow_le_iff_le_log hb hr, ← rpow_int_cast b]\n    refine' le_of_le_of_eq _ (rpow_logb (zero_lt_one.trans hb1') hb1'.ne' hr)\n    exact rpow_le_rpow_of_exponent_le hb1'.le (Int.floor_le _)\n  · rw [Int.le_floor, le_logb_iff_rpow_le hb1' hr, rpow_int_cast]\n    exact int.zpow_log_le_self hb hr\n#align floor_logb_nat_cast floor_logb_nat_cast\n\n",
 "eq_one_of_pos_of_logb_eq_zero_of_base_lt_one":
 "theorem eq_one_of_pos_of_logb_eq_zero_of_base_lt_one (h₁ : 0 < x) (h₂ : logb b x = 0) : x = 1 :=\n  logb_inj_on_pos_of_base_lt_one b_pos b_lt_one (Set.mem_Ioi.2 h₁) (Set.mem_Ioi.2 zero_lt_one)\n    (h₂.trans real.logb_one.symm)\n#align eq_one_of_pos_of_logb_eq_zero_of_base_lt_one eq_one_of_pos_of_logb_eq_zero_of_base_lt_one\n\n",
 "eq_one_of_pos_of_logb_eq_zero":
 "theorem eq_one_of_pos_of_logb_eq_zero (h₁ : 0 < x) (h₂ : logb b x = 0) : x = 1 :=\n  logb_inj_on_pos hb (Set.mem_Ioi.2 h₁) (Set.mem_Ioi.2 zero_lt_one) (h₂.trans real.logb_one.symm)\n#align eq_one_of_pos_of_logb_eq_zero eq_one_of_pos_of_logb_eq_zero\n\n",
 "ceil_logb_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉» -/\ntheorem ceil_logb_nat_cast {b : ℕ} {r : exprℝ} (hb : 1 < b) (hr : 0 ≤ r) : «expr⌈ ⌉» (logb b r) = int.clog b r :=\n  by\n  obtain rfl | hr := hr.eq_or_lt\n  · rw [logb_zero, int.clog_zero_right, Int.ceil_zero]\n  have hb1' : 1 < (b : exprℝ) := nat.one_lt_cast.mpr hb\n  apply le_antisymm\n  · rw [Int.ceil_le, logb_le_iff_le_rpow hb1' hr, rpow_int_cast]\n    refine' int.self_le_zpow_clog hb r\n  · rw [← int.le_zpow_iff_clog_le hb hr, ← rpow_int_cast b]\n    refine' (rpow_logb (zero_lt_one.trans hb1') hb1'.ne' hr).symm.trans_le _\n    exact rpow_le_rpow_of_exponent_le hb1'.le (Int.le_ceil _)\n#align ceil_logb_nat_cast ceil_logb_nat_cast\n\n",
 "b_pos":
 "private theorem b_pos : 0 < b := by linarith\n#align b_pos b_pos\n\n",
 "b_ne_one":
 "private theorem b_ne_one : b ≠ 1 := by linarith\n#align b_ne_one b_ne_one\n\n"}