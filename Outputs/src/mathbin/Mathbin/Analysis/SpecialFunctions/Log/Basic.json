{"tendsto_pow_log_div_mul_add_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_pow_log_div_mul_add_at_top (a b : exprℝ) (n : ℕ) (ha : a ≠ 0) :\n    tendsto (fun x => log x ^ n / (a * x + b)) at_top ((nhds) 0) :=\n  ((tendsto_div_pow_mul_exp_add_at_top a b n ha.symm).comp tendsto_log_at_top).congr'\n    (by filter_upwards [eventually_gt_at_top (0 : exprℝ)] with x hx using by simp [exp_log hx])\n#align tendsto_pow_log_div_mul_add_at_top tendsto_pow_log_div_mul_add_at_top\n\n",
 "tendsto_log_nhds_within_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\ntheorem tendsto_log_nhds_within_zero : tendsto log (nhds_within.ne 0) at_bot :=\n  by\n  rw [← show _ = log from funext log_abs]\n  refine' tendsto.comp _ tendsto_abs_nhds_within_zero\n  simpa [← tendsto_comp_exp_at_bot] using tendsto_id\n#align tendsto_log_nhds_within_zero tendsto_log_nhds_within_zero\n\n",
 "tendsto_log_at_top":
 "/-- The real logarithm function tends to `+∞` at `+∞`. -/\ntheorem tendsto_log_at_top : tendsto log at_top at_top :=\n  tendsto_comp_exp_at_top.1 <| by simpa only [log_exp] using tendsto_id\n#align tendsto_log_at_top tendsto_log_at_top\n\n",
 "surj_on_log'":
 "theorem surj_on_log' : SurjOn log (Iio 0) univ := fun x _ =>\n  ⟨-exp x, neg_lt_zero.2 <| exp_pos x, by rw [log_neg_eq_log, log_exp]⟩\n#align surj_on_log' surj_on_log'\n\n",
 "surj_on_log":
 "theorem surj_on_log : SurjOn log (Ioi 0) univ := fun x _ => ⟨exp x, exp_pos x, log_exp x⟩\n#align surj_on_log surj_on_log\n\n",
 "strict_mono_on_log":
 "theorem strict_mono_on_log : strict_mono_on log (Set.Ioi 0) := fun x hx y hy hxy => log_lt_log hx hxy\n#align strict_mono_on_log strict_mono_on_log\n\n",
 "strict_anti_on_log":
 "theorem strict_anti_on_log : strict_anti_on log (Set.Iio 0) :=\n  by\n  rintro x (hx : x < 0) y (hy : y < 0) hxy\n  rw [← log_abs y, ← log_abs x]\n  refine' log_lt_log (abs_pos.2 hy.ne) _\n  rwa [abs_of_neg hy, abs_of_neg hx, neg_lt_neg_iff]\n#align strict_anti_on_log strict_anti_on_log\n\n",
 "sinh_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem sinh_log {x : exprℝ} (hx : 0 < x) : sinh (log x) = (x - x⁻¹) / 2 := by rw [sinh_eq, exp_neg, exp_log hx]\n#align sinh_log sinh_log\n\n",
 "range_log":
 "@[simp]\ntheorem range_log : range log = univ :=\n  log_surjective.range_eq\n#align range_log range_log\n\n",
 "lt_log_iff_exp_lt":
 "theorem lt_log_iff_exp_lt (hy : 0 < y) : x < log y ↔ exp x < y := by rw [← exp_lt_exp, exp_log hy]\n#align lt_log_iff_exp_lt lt_log_iff_exp_lt\n\n",
 "log_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_zpow (x : exprℝ) (n : ℤ) : log (x ^ n) = n * log x :=\n  by\n  induction n\n  · rw [Int.ofNat_eq_coe, zpow_ofNat, log_pow, Int.cast_ofNat]\n  rw [zpow_negSucc, log_inv, log_pow, Int.cast_negSucc, Nat.cast_add_one, neg_mul_eq_neg_mul]\n#align log_zpow log_zpow\n\n",
 "log_zero":
 "@[simp]\ntheorem log_zero : log 0 = 0 :=\n  dif_pos rfl\n#align log_zero log_zero\n\n",
 "log_surjective":
 "theorem log_surjective : surjective log := fun x => ⟨exp x, log_exp x⟩\n#align log_surjective log_surjective\n\n",
 "log_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem log_sqrt {x : exprℝ} (hx : 0 ≤ x) : log (sqrt x) = log x / 2 :=\n  by\n  rw [eq_div_iff, mul_comm, ← Nat.cast_two, ← log_pow, sq_sqrt hx]\n  exact two_ne_zero\n#align log_sqrt log_sqrt\n\n",
 "log_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem log_prod {α : Type _} (s : Finset α) (f : α → exprℝ) (hf : ∀ x ∈ s, f x ≠ 0) :\n    log (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (log (f i)) :=\n  by\n  induction' s using Finset.cons_induction_on with a s ha ih\n  · simp\n  · rw [Finset.forall_mem_cons] at hf\n    simp [ih hf.2, log_mul hf.1 (finset.prod_ne_zero_iff.2 hf.2)]\n#align log_prod log_prod\n\n",
 "log_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_pow (x : exprℝ) (n : ℕ) : log (x ^ n) = n * log x :=\n  by\n  induction' n with n ih\n  · simp\n  rcases eq_or_ne x 0 with (rfl | hx)\n  · simp\n  rw [pow_succ', log_mul (pow_ne_zero _ hx) hx, ih, Nat.cast_succ, add_mul, one_mul]\n#align log_pow log_pow\n\n",
 "log_pos_iff":
 "theorem log_pos_iff (hx : 0 < x) : 0 < log x ↔ 1 < x :=\n  by\n  rw [← log_one]\n  exact log_lt_log_iff zero_lt_one hx\n#align log_pos_iff log_pos_iff\n\n",
 "log_pos":
 "theorem log_pos (hx : 1 < x) : 0 < log x :=\n  (log_pos_iff (lt_trans zero_lt_one hx)).2 hx\n#align log_pos log_pos\n\n",
 "log_one":
 "@[simp]\ntheorem log_one : log 1 = 0 :=\n  exp_injective <| by rw [exp_log zero_lt_one, exp_zero]\n#align log_one log_one\n\n",
 "log_of_pos":
 "theorem log_of_pos (hx : 0 < x) : log x = exp_order_iso.symm ⟨x, hx⟩ :=\n  by\n  rw [log_of_ne_zero hx.ne']\n  congr\n  exact abs_of_pos hx\n#align log_of_pos log_of_pos\n\n",
 "log_of_ne_zero":
 "/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle Sönne\n-/\ntheorem log_of_ne_zero (hx : x ≠ 0) : log x = exp_order_iso.symm ⟨|x|, abs_pos.2 hx⟩ :=\n  dif_neg hx\n#align log_of_ne_zero log_of_ne_zero\n\n",
 "log_nonpos_iff'":
 "theorem log_nonpos_iff' (hx : 0 ≤ x) : log x ≤ 0 ↔ x ≤ 1 :=\n  by\n  rcases hx.eq_or_lt with (rfl | hx)\n  · simp [le_refl, zero_le_one]\n  exact log_nonpos_iff hx\n#align log_nonpos_iff' log_nonpos_iff'\n\n",
 "log_nonpos_iff":
 "theorem log_nonpos_iff (hx : 0 < x) : log x ≤ 0 ↔ x ≤ 1 := by rw [← not_lt, log_pos_iff hx, not_lt]\n#align log_nonpos_iff log_nonpos_iff\n\n",
 "log_nonpos":
 "theorem log_nonpos (hx : 0 ≤ x) (h'x : x ≤ 1) : log x ≤ 0 :=\n  (log_nonpos_iff' hx).2 h'x\n#align log_nonpos log_nonpos\n\n",
 "log_nonneg_iff":
 "theorem log_nonneg_iff (hx : 0 < x) : 0 ≤ log x ↔ 1 ≤ x := by rw [← not_lt, log_neg_iff hx, not_lt]\n#align log_nonneg_iff log_nonneg_iff\n\n",
 "log_nonneg":
 "theorem log_nonneg (hx : 1 ≤ x) : 0 ≤ log x :=\n  (log_nonneg_iff (zero_lt_one.trans_le hx)).2 hx\n#align log_nonneg log_nonneg\n\n",
 "log_neg_iff":
 "theorem log_neg_iff (h : 0 < x) : log x < 0 ↔ x < 1 :=\n  by\n  rw [← log_one]\n  exact log_lt_log_iff h zero_lt_one\n#align log_neg_iff log_neg_iff\n\n",
 "log_neg_eq_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_neg_eq_log (x : exprℝ) : log (-x) = log x := by rw [← log_abs x, ← log_abs (-x), abs_neg]\n#align log_neg_eq_log log_neg_eq_log\n\n",
 "log_neg":
 "theorem log_neg (h0 : 0 < x) (h1 : x < 1) : log x < 0 :=\n  (log_neg_iff h0).2 h1\n#align log_neg log_neg\n\n",
 "log_ne_zero_of_pos_of_ne_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem log_ne_zero_of_pos_of_ne_one {x : exprℝ} (hx_pos : 0 < x) (hx : x ≠ 1) : log x ≠ 0 :=\n  mt (eq_one_of_pos_of_log_eq_zero hx_pos) hx\n#align log_ne_zero_of_pos_of_ne_one log_ne_zero_of_pos_of_ne_one\n\n",
 "log_nat_eq_sum_factorization":
 "theorem log_nat_eq_sum_factorization (n : ℕ) : log n = n.factorization.sum fun p t => t * log p :=\n  by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  · simp\n  nth_rw 1 [← nat.factorization_prod_pow_eq_self hn]\n  rw [finsupp.prod, nat.cast_prod, log_prod _ _ fun p hp => _, finsupp.sum]\n  · simp_rw [Nat.cast_pow, log_pow]\n  · norm_cast\n    exact pow_ne_zero _ (nat.prime_of_mem_factorization hp).ne_zero\n#align log_nat_eq_sum_factorization log_nat_eq_sum_factorization\n\n",
 "log_mul":
 "theorem log_mul (hx : x ≠ 0) (hy : y ≠ 0) : log (x * y) = log x + log y :=\n  exp_injective <| by rw [exp_log_eq_abs (mul_ne_zero hx hy), exp_add, exp_log_eq_abs hx, exp_log_eq_abs hy, abs_mul]\n#align log_mul log_mul\n\n",
 "log_lt_log_iff":
 "theorem log_lt_log_iff (hx : 0 < x) (hy : 0 < y) : log x < log y ↔ x < y := by rw [← exp_lt_exp, exp_log hx, exp_log hy]\n#align log_lt_log_iff log_lt_log_iff\n\n",
 "log_lt_log":
 "theorem log_lt_log (hx : 0 < x) : x < y → log x < log y :=\n  by\n  intro h\n  rwa [← exp_lt_exp, exp_log hx, exp_log (lt_trans hx h)]\n#align log_lt_log log_lt_log\n\n",
 "log_lt_iff_lt_exp":
 "theorem log_lt_iff_lt_exp (hx : 0 < x) : log x < y ↔ x < exp y := by rw [← exp_lt_exp, exp_log hx]\n#align log_lt_iff_lt_exp log_lt_iff_lt_exp\n\n",
 "log_le_sub_one_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem log_le_sub_one_of_pos {x : exprℝ} (hx : 0 < x) : log x ≤ x - 1 :=\n  by\n  rw [le_sub_iff_add_le]\n  convert add_one_le_exp (log x)\n  rw [exp_log hx]\n#align log_le_sub_one_of_pos log_le_sub_one_of_pos\n\n",
 "log_le_log":
 "theorem log_le_log (h : 0 < x) (h₁ : 0 < y) : log x ≤ log y ↔ x ≤ y := by rw [← exp_le_exp, exp_log h, exp_log h₁]\n#align log_le_log log_le_log\n\n",
 "log_le_iff_le_exp":
 "theorem log_le_iff_le_exp (hx : 0 < x) : log x ≤ y ↔ x ≤ exp y := by rw [← exp_le_exp, exp_log hx]\n#align log_le_iff_le_exp log_le_iff_le_exp\n\n",
 "log_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_inv (x : exprℝ) : log x⁻¹ = -log x :=\n  by\n  by_cases hx : x = 0; · simp [hx]\n  rw [← exp_eq_exp, exp_log_eq_abs (inv_ne_zero hx), exp_neg, exp_log_eq_abs hx, abs_inv]\n#align log_inv log_inv\n\n",
 "log_inj_on_pos":
 "theorem log_inj_on_pos : Set.InjOn log (Set.Ioi 0) :=\n  strict_mono_on_log.inj_on\n#align log_inj_on_pos log_inj_on_pos\n\n",
 "log_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_exp (x : exprℝ) : log (exp x) = x :=\n  exp_injective <| exp_log (exp_pos x)\n#align log_exp log_exp\n\n",
 "log_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_eq_zero {x : exprℝ} : log x = 0 ↔ x = 0 ∨ x = 1 ∨ x = -1 :=\n  by\n  constructor\n  · intro h\n    rcases lt_trichotomy x 0 with (x_lt_zero | rfl | x_gt_zero)\n    · refine' or.inr (or.inr (eq_neg_iff_eq_neg.mp _))\n      rw [← log_neg_eq_log x] at h\n      exact (eq_one_of_pos_of_log_eq_zero (neg_pos.mpr x_lt_zero) h).symm\n    · exact or.inl rfl\n    · exact or.inr (or.inl (eq_one_of_pos_of_log_eq_zero x_gt_zero h))\n  · rintro (rfl | rfl | rfl) <;> simp only [log_one, log_zero, log_neg_eq_log]\n#align log_eq_zero log_eq_zero\n\n",
 "log_div":
 "theorem log_div (hx : x ≠ 0) (hy : y ≠ 0) : log (x / y) = log x - log y :=\n  exp_injective <| by rw [exp_log_eq_abs (div_ne_zero hx hy), exp_sub, exp_log_eq_abs hx, exp_log_eq_abs hy, abs_div]\n#align log_div log_div\n\n",
 "log_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem log_abs (x : exprℝ) : log (|x|) = log x :=\n  by\n  by_cases h : x = 0\n  · simp [h]\n  · rw [← exp_eq_exp, exp_log_eq_abs h, exp_log_eq_abs (abs_pos.2 h).ne', abs_abs]\n#align log_abs log_abs\n\n",
 "log":
 "theorem continuous_on.log (hf : continuous_on f s) (h₀ : ∀ x ∈ s, f x ≠ 0) : continuous_on (fun x => log (f x)) s :=\n  fun x hx => (hf x hx).log (h₀ x hx)\n#align continuous_on.log continuous_on.log\n\n",
 "le_log_iff_exp_le":
 "theorem le_log_iff_exp_le (hy : 0 < y) : x ≤ log y ↔ exp x ≤ y := by rw [← exp_le_exp, exp_log hy]\n#align le_log_iff_exp_le le_log_iff_exp_le\n\n",
 "le_exp_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem le_exp_log (x : exprℝ) : x ≤ exp (log x) :=\n  by\n  by_cases h_zero : x = 0\n  · rw [h_zero, log, dif_pos rfl, exp_zero]\n    exact zero_le_one\n  · rw [exp_log_eq_abs h_zero]\n    exact le_abs_self _\n#align le_exp_log le_exp_log\n\n",
 "is_o_pow_log_id_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_pow_log_id_at_top {n : ℕ} : «expr =o[ ] » (fun x => log x ^ n) at_top id :=\n  by\n  rw [asymptotics.is_o_iff_tendsto']\n  · simpa using tendsto_pow_log_div_mul_add_at_top 1 0 n one_ne_zero\n  filter_upwards [eventually_ne_at_top (0 : exprℝ)] with x h₁ h₂ using(h₁ h₂).elim\n#align is_o_pow_log_id_at_top is_o_pow_log_id_at_top\n\n",
 "is_o_log_id_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_log_id_at_top : «expr =o[ ] » log at_top id :=\n  is_o_pow_log_id_at_top.congr_left fun x => pow_one _\n#align is_o_log_id_at_top is_o_log_id_at_top\n\n",
 "exp_log_of_neg":
 "theorem exp_log_of_neg (hx : x < 0) : exp (log x) = -x :=\n  by\n  rw [exp_log_eq_abs (ne_of_lt hx)]\n  exact abs_of_neg hx\n#align exp_log_of_neg exp_log_of_neg\n\n",
 "exp_log_eq_abs":
 "theorem exp_log_eq_abs (hx : x ≠ 0) : exp (log x) = |x| := by\n  rw [log_of_ne_zero hx, ← coe_exp_order_iso_apply, OrderIso.apply_symm_apply, subtype.coe_mk]\n#align exp_log_eq_abs exp_log_eq_abs\n\n",
 "exp_log":
 "theorem exp_log (hx : 0 < x) : exp (log x) = x :=\n  by\n  rw [exp_log_eq_abs hx.ne']\n  exact abs_of_pos hx\n#align exp_log exp_log\n\n",
 "eq_one_of_pos_of_log_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem eq_one_of_pos_of_log_eq_zero {x : exprℝ} (h₁ : 0 < x) (h₂ : log x = 0) : x = 1 :=\n  log_inj_on_pos (Set.mem_Ioi.2 h₁) (Set.mem_Ioi.2 zero_lt_one) (h₂.trans real.log_one.symm)\n#align eq_one_of_pos_of_log_eq_zero eq_one_of_pos_of_log_eq_zero\n\n",
 "cosh_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cosh_log {x : exprℝ} (hx : 0 < x) : cosh (log x) = (x + x⁻¹) / 2 := by rw [cosh_eq, exp_neg, exp_log hx]\n#align cosh_log cosh_log\n\n",
 "continuous_on_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem continuous_on_log : continuous_on log («expr ᶜ» {0}) :=\n  by\n  rw [continuous_on_iff_continuous_restrict, restrict]\n  conv in log _ => rw [log_of_ne_zero (show (x : exprℝ) ≠ 0 from x.2)]\n  exact exp_order_iso.symm.continuous.comp (continuous_subtype_coe.norm.subtype_mk _)\n#align continuous_on_log continuous_on_log\n\n",
 "continuous_log'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[continuity]\ntheorem continuous_log' : continuous fun x : { x : exprℝ // 0 < x } => log x :=\n  continuous_on_iff_continuous_restrict.1 <| continuous_on_log.mono fun x hx => ne_of_gt hx\n#align continuous_log' continuous_log'\n\n",
 "continuous_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[continuity]\ntheorem continuous_log : continuous fun x : { x : exprℝ // x ≠ 0 } => log x :=\n  continuous_on_iff_continuous_restrict.1 <| continuous_on_log.mono fun x hx => hx\n#align continuous_log continuous_log\n\n",
 "continuous_at_log_iff":
 "@[simp]\ntheorem continuous_at_log_iff : continuous_at log x ↔ x ≠ 0 :=\n  by\n  refine' ⟨_, continuous_at_log⟩\n  rintro h rfl\n  exact not_tendsto_nhds_of_tendsto_at_bot tendsto_log_nhds_within_zero _ (h.tendsto.mono_left inf_le_left)\n#align continuous_at_log_iff continuous_at_log_iff\n\n",
 "continuous_at_log":
 "theorem continuous_at_log (hx : x ≠ 0) : continuous_at log x :=\n  (continuous_on_log x hx).continuous_at <| is_open.mem_nhds is_open_compl_singleton hx\n#align continuous_at_log continuous_at_log\n\n",
 "abs_log_mul_self_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Bound for `|log x * x|` in the interval `(0, 1]`. -/\ntheorem abs_log_mul_self_lt (x : exprℝ) (h1 : 0 < x) (h2 : x ≤ 1) : |log x * x| < 1 :=\n  by\n  have : 0 < 1 / x := by simpa only [one_div, inv_pos] using h1\n  replace := log_le_sub_one_of_pos this\n  replace : log (1 / x) < 1 / x := by linarith\n  rw [log_div one_ne_zero h1.ne', log_one, zero_sub, lt_div_iff h1] at this\n  have aux : 0 ≤ -log x * x := by\n    refine' mul_nonneg _ h1.le\n    rw [← log_inv]\n    apply log_nonneg\n    rw [← le_inv h1 zero_lt_one, inv_one]\n    exact h2\n  rw [← abs_of_nonneg aux, neg_mul, abs_neg] at this\n  exact this\n#align abs_log_mul_self_lt abs_log_mul_self_lt\n\n"}