{"sqrt_one_add_norm_sq_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-\nCopyright (c) 2022 Moritz Doll. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Moritz Doll\n-/\ntheorem sqrt_one_add_norm_sq_le (x : E) : Real.sqrt (1 + «expr‖ ‖» x ^ 2) ≤ 1 + «expr‖ ‖» x :=\n  by\n  refine' le_of_pow_le_pow 2 (by positivity) two_pos _\n  simp [sq_sqrt (zero_lt_one_add_norm_sq x).le, add_pow_two]\n#align sqrt_one_add_norm_sq_le sqrt_one_add_norm_sq_le\n\n",
 "rpow_neg_one_add_norm_sq_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem rpow_neg_one_add_norm_sq_le {r : exprℝ} (x : E) (hr : 0 < r) :\n    (1 + «expr‖ ‖» x ^ 2) ^ (-r / 2) ≤ 2 ^ (r / 2) * (1 + «expr‖ ‖» x) ^ (-r) :=\n  by\n  have h1 : 0 ≤ (2 : exprℝ) := by positivity\n  have h3 : 0 < sqrt 2 := by positivity\n  have h4 : 0 < 1 + «expr‖ ‖» x := by positivity\n  have h5 : 0 < sqrt (1 + «expr‖ ‖» x ^ 2) := by positivity\n  have h6 : 0 < sqrt 2 * sqrt (1 + «expr‖ ‖» x ^ 2) := mul_pos h3 h5\n  rw [rpow_div_two_eq_sqrt _ h1, rpow_div_two_eq_sqrt _ (zero_lt_one_add_norm_sq x).le, ←\n    inv_mul_le_iff (rpow_pos_of_pos h3 _), rpow_neg h4.le, rpow_neg (sqrt_nonneg _), ← mul_inv, ← mul_rpow h3.le h5.le,\n    inv_le_inv (rpow_pos_of_pos h6 _) (rpow_pos_of_pos h4 _), rpow_le_rpow_iff h4.le h6.le hr]\n  exact one_add_norm_le_sqrt_two_mul_sqrt _\n#align rpow_neg_one_add_norm_sq_le rpow_neg_one_add_norm_sq_le\n\n",
 "one_add_norm_le_sqrt_two_mul_sqrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem one_add_norm_le_sqrt_two_mul_sqrt (x : E) : 1 + «expr‖ ‖» x ≤ Real.sqrt 2 * sqrt (1 + «expr‖ ‖» x ^ 2) :=\n  by\n  suffices (sqrt 2 * sqrt (1 + «expr‖ ‖» x ^ 2)) ^ 2 - (1 + «expr‖ ‖» x) ^ 2 = (1 - «expr‖ ‖» x) ^ 2\n    by\n    refine' le_of_pow_le_pow 2 (by positivity) (by norm_num) _\n    rw [← sub_nonneg, this]\n    positivity\n  rw [mul_pow, sq_sqrt (zero_lt_one_add_norm_sq x).le, add_pow_two, sub_pow_two]\n  norm_num\n  ring\n#align one_add_norm_le_sqrt_two_mul_sqrt one_add_norm_le_sqrt_two_mul_sqrt\n\n",
 "le_rpow_one_add_norm_iff_norm_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem le_rpow_one_add_norm_iff_norm_le {r t : exprℝ} (hr : 0 < r) (ht : 0 < t) (x : E) :\n    t ≤ (1 + «expr‖ ‖» x) ^ (-r) ↔ «expr‖ ‖» x ≤ t ^ (-r⁻¹) - 1 :=\n  by\n  rw [le_sub_iff_add_le', neg_inv]\n  exact (real.le_rpow_inv_iff_of_neg (by positivity) ht (neg_lt_zero.mpr hr)).symm\n#align le_rpow_one_add_norm_iff_norm_le le_rpow_one_add_norm_iff_norm_le\n\n",
 "integrable_rpow_neg_one_add_norm_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem integrable_rpow_neg_one_add_norm_sq [MeasureSpace E] [borel_space E] [(@volume E _).is_add_haar_measure]\n    {r : exprℝ} (hnr : (finrank (exprℝ) E : exprℝ) < r) : integrable fun x : E => (1 + «expr‖ ‖» x ^ 2) ^ (-r / 2) :=\n  by\n  have hr : 0 < r := lt_of_le_of_lt (finrank (exprℝ) E).cast_nonneg hnr\n  refine'\n    ((integrable_one_add_norm hnr).const_mul <| 2 ^ (r / 2)).mono (by measurability) (eventually_of_forall fun x => _)\n  have h1 : 0 ≤ (1 + «expr‖ ‖» x ^ 2) ^ (-r / 2) := by positivity\n  have h2 : 0 ≤ (1 + «expr‖ ‖» x) ^ (-r) := by positivity\n  have h3 : 0 ≤ (2 : exprℝ) ^ (r / 2) := by positivity\n  simp_rw [norm_mul, norm_eq_abs, abs_of_nonneg h1, abs_of_nonneg h2, abs_of_nonneg h3]\n  exact rpow_neg_one_add_norm_sq_le _ hr\n#align integrable_rpow_neg_one_add_norm_sq integrable_rpow_neg_one_add_norm_sq\n\n",
 "integrable_one_add_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem integrable_one_add_norm [MeasureSpace E] [borel_space E] [(@volume E _).is_add_haar_measure] {r : exprℝ}\n    (hnr : (finrank (exprℝ) E : exprℝ) < r) : integrable fun x : E => (1 + «expr‖ ‖» x) ^ (-r) :=\n  by\n  refine' ⟨by measurability, _⟩\n  -- Lower Lebesgue integral\n  have :\n    «expr∫⁻ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , »\"\n        («expr‖ ‖₊» ((1 + «expr‖ ‖» a) ^ (-r))) =\n      «expr∫⁻ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , »\"\n        (ENNReal.ofReal ((1 + «expr‖ ‖» a) ^ (-r))) :=\n    lintegral_nnnorm_eq_of_nonneg fun _ => rpow_nonneg_of_nonneg (by positivity) _\n  rw [has_finite_integral, this]\n  exact finite_integral_one_add_norm hnr\n#align integrable_one_add_norm integrable_one_add_norm\n\n",
 "finite_integral_rpow_sub_one_pow_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem finite_integral_rpow_sub_one_pow_aux {r : exprℝ} (n : ℕ) (hnr : (n : exprℝ) < r) :\n    «expr∫⁻ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , »\" (Ioc 0 1)\n        (ENNReal.ofReal ((x ^ (-r⁻¹) - 1) ^ n)) <\n      ennreal.top :=\n  by\n  have hr : 0 < r := lt_of_le_of_lt n.cast_nonneg hnr\n  have h_int :\n    ∀ (x : exprℝ) (hx : x ∈ Ioc (0 : exprℝ) 1),\n      ENNReal.ofReal ((x ^ (-r⁻¹) - 1) ^ n) ≤ ENNReal.ofReal (x ^ (-(r⁻¹ * n))) :=\n    by\n    intro x hx\n    have hxr : 0 ≤ x ^ (-r⁻¹) := rpow_nonneg_of_nonneg hx.1.le _\n    apply ENNReal.ofReal_le_ofReal\n    rw [← neg_mul, rpow_mul hx.1.le, rpow_nat_cast]\n    refine' pow_le_pow_of_le_left _ (by simp only [sub_le_self_iff, zero_le_one]) n\n    rw [le_sub_iff_add_le', add_zero]\n    refine' real.one_le_rpow_of_pos_of_le_one_of_nonpos hx.1 hx.2 _\n    rw [Right.neg_nonpos_iff, inv_nonneg]\n    exact hr.le\n  refine' lt_of_le_of_lt (set_lintegral_mono (by measurability) (by measurability) h_int) _\n  refine' integrable_on.set_lintegral_lt_top _\n  rw [← interval_integrable_iff_integrable_Ioc_of_le zero_le_one]\n  apply interval_integral.interval_integrable_rpow'\n  rwa [neg_lt_neg_iff, inv_mul_lt_iff' hr, one_mul]\n#align finite_integral_rpow_sub_one_pow_aux finite_integral_rpow_sub_one_pow_aux\n\n",
 "finite_integral_one_add_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem finite_integral_one_add_norm [MeasureSpace E] [borel_space E] [(@volume E _).is_add_haar_measure] {r : exprℝ}\n    (hnr : (finrank (exprℝ) E : exprℝ) < r) :\n    «expr∫⁻ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , »\"\n        (ENNReal.ofReal ((1 + «expr‖ ‖» x) ^ (-r))) <\n      ennreal.top :=\n  by\n  have hr : 0 < r := lt_of_le_of_lt (finrank (exprℝ) E).cast_nonneg hnr\n  -- We start by applying the layer cake formula\n  have h_meas : Measurable fun ω : E => (1 + «expr‖ ‖» ω) ^ (-r) := by measurability\n  have h_pos : ∀ x : E, 0 ≤ (1 + «expr‖ ‖» x) ^ (-r) := by\n    intro x\n    positivity\n  rw [lintegral_eq_lintegral_meas_le volume h_pos h_meas]\n  -- We use the first transformation of the integrant to show that we only have to integrate from\n  -- 0 to 1 and from 1 to ∞\n  have h_int :\n    ∀ (t : exprℝ) (ht : t ∈ Ioi (0 : exprℝ)),\n      (volume { a : E | t ≤ (1 + «expr‖ ‖» a) ^ (-r) } : ENNReal) =\n        volume (Metric.closedBall (0 : E) (t ^ (-r⁻¹) - 1)) :=\n    by\n    intro t ht\n    congr 1\n    ext x\n    simp only [mem_set_of_eq, mem_closedBall_zero_iff]\n    exact le_rpow_one_add_norm_iff_norm_le hr (mem_Ioi.mp ht) x\n  rw [set_lintegral_congr_fun measurable_set_Ioi (ae_of_all volume <| h_int)]\n  have hIoi_eq : Ioi (0 : exprℝ) = Ioc (0 : exprℝ) 1 ∪ Ioi 1 := (Set.Ioc_union_Ioi_eq_Ioi zero_le_one).symm\n  have hdisjoint : Disjoint (Ioc (0 : exprℝ) 1) (Ioi 1) := by simp [disjoint_iff]\n  rw [hIoi_eq, lintegral_union measurable_set_Ioi hdisjoint, ENNReal.add_lt_top]\n  have h_int' :\n    ∀ (t : exprℝ) (ht : t ∈ Ioc (0 : exprℝ) 1),\n      (volume (Metric.closedBall (0 : E) (t ^ (-r⁻¹) - 1)) : ENNReal) =\n        ENNReal.ofReal ((t ^ (-r⁻¹) - 1) ^ FiniteDimensional.finrank (exprℝ) E) * volume (Metric.ball (0 : E) 1) :=\n    by\n    intro t ht\n    refine' volume.add_haar_closed_ball (0 : E) _\n    rw [le_sub_iff_add_le', add_zero]\n    exact real.one_le_rpow_of_pos_of_le_one_of_nonpos ht.1 ht.2 (by simp [hr.le])\n  have h_meas' : Measurable fun a : exprℝ => ENNReal.ofReal ((a ^ (-r⁻¹) - 1) ^ finrank (exprℝ) E) := by measurability\n  constructor\n  -- The integral from 0 to 1:\n  · rw [set_lintegral_congr_fun measurable_set_Ioc (ae_of_all volume <| h_int'), lintegral_mul_const _ h_meas',\n      ENNReal.mul_lt_top_iff]\n    left\n    -- We calculate the integral\n    exact ⟨finite_integral_rpow_sub_one_pow_aux (finrank (exprℝ) E) hnr, measure_ball_lt_top⟩\n  -- The integral from 1 to ∞ is zero:\n  have h_int'' :\n    ∀ (t : exprℝ) (ht : t ∈ Ioi (1 : exprℝ)), (volume (Metric.closedBall (0 : E) (t ^ (-r⁻¹) - 1)) : ENNReal) = 0 :=\n    fun t ht => by rw [closed_ball_rpow_sub_one_eq_empty_aux E hr ht, measure_empty]\n  -- The integral over the constant zero function is finite:\n  rw [set_lintegral_congr_fun measurable_set_Ioi (ae_of_all volume <| h_int''), lintegral_const 0,\n    MulZeroClass.zero_mul]\n  exact WithTop.zero_lt_top\n#align finite_integral_one_add_norm finite_integral_one_add_norm\n\n",
 "closed_ball_rpow_sub_one_eq_empty_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem closed_ball_rpow_sub_one_eq_empty_aux {r t : exprℝ} (hr : 0 < r) (ht : 1 < t) :\n    Metric.closedBall (0 : E) (t ^ (-r⁻¹) - 1) = ∅ :=\n  by\n  rw [Metric.closedBall_eq_empty, sub_neg]\n  exact real.rpow_lt_one_of_one_lt_of_neg ht (by simp only [hr, Right.neg_neg_iff, inv_pos])\n#align closed_ball_rpow_sub_one_eq_empty_aux closed_ball_rpow_sub_one_eq_empty_aux\n\n"}