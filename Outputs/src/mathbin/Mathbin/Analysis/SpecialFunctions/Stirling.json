{"tendsto_stirling_seq_sqrt_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/-- **Stirling's Formula** -/\ntheorem tendsto_stirling_seq_sqrt_pi : Tendsto (fun n : ℕ => stirling_seq n) atTop ((nhds) (sqrt (real.pi))) :=\n  by\n  obtain ⟨a, hapos, halimit⟩ := stirling_seq_has_pos_limit_a\n  have hπ : real.pi / 2 = a ^ 2 / 2 :=\n    tendsto_nhds_unique wallis.tendsto_W_nhds_pi_div_two (second_wallis_limit a hapos.ne' halimit)\n  rwa [(div_left_inj' (two_ne_zero' (exprℝ))).mp hπ, sqrt_sq hapos.le]\n#align tendsto_stirling_seq_sqrt_pi tendsto_stirling_seq_sqrt_pi\n\n",
 "tendsto_self_div_two_mul_self_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The sequence `n / (2 * n + 1)` tends to `1/2` -/\ntheorem tendsto_self_div_two_mul_self_add_one :\n    Tendsto (fun n : ℕ => (n : exprℝ) / (2 * n + 1)) atTop ((nhds) (1 / 2)) :=\n  by\n  conv =>\n    congr\n    skip\n    skip\n    rw [one_div, ← add_zero (2 : exprℝ)]\n  refine'\n    (((tendsto_const_div_atTop_nhds_0_nat 1).const_add (2 : exprℝ)).inv₀\n          ((add_zero (2 : exprℝ)).symm ▸ two_ne_zero)).congr'\n      (eventually_at_top.mpr ⟨1, fun n hn => _⟩)\n  rw [add_div' (1 : exprℝ) 2 n (cast_ne_zero.mpr (one_le_iff_ne_zero.mp hn)), inv_div]\n#align tendsto_self_div_two_mul_self_add_one tendsto_self_div_two_mul_self_add_one\n\n",
 "stirling_seq_zero":
 "/-\nCopyright (c) 2022. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Moritz Firsching, Fabian Kruse, Nikolas Kuhn\n-/\n@[simp]\ntheorem stirling_seq_zero : stirling_seq 0 = 0 := by\n  rw [stirling_seq, cast_zero, MulZeroClass.mul_zero, Real.sqrt_zero, MulZeroClass.zero_mul, div_zero]\n#align stirling_seq_zero stirling_seq_zero\n\n",
 "stirling_seq_pow_four_div_stirling_seq_pow_two_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- For any `n ≠ 0`, we have the identity\n`(stirling_seq n)^4 / (stirling_seq (2*n))^2 * (n / (2 * n + 1)) = W n`, where `W n` is the\n`n`-th partial product of Wallis' formula for `π / 2`. -/\ntheorem stirling_seq_pow_four_div_stirling_seq_pow_two_eq (n : ℕ) (hn : n ≠ 0) :\n    stirling_seq n ^ 4 / stirling_seq (2 * n) ^ 2 * (n / (2 * n + 1)) = wallis.W n :=\n  by\n  rw [bit0_eq_two_mul, stirling_seq, pow_mul, stirling_seq, wallis.W_eq_factorial_ratio]\n  simp_rw [div_pow, mul_pow]\n  rw [sq_sqrt, sq_sqrt]\n  any_goals positivity\n  have : (n : exprℝ) ≠ 0 := cast_ne_zero.mpr hn\n  have : exp 1 ≠ 0 := exp_ne_zero 1\n  have : (nat.factorial (2 * n) : exprℝ) ≠ 0 := cast_ne_zero.mpr (factorial_ne_zero (2 * n))\n  have : 2 * (n : exprℝ) + 1 ≠ 0 := by\n    norm_cast\n    exact succ_ne_zero (2 * n)\n  field_simp\n  simp only [mul_pow, mul_comm 2 n, mul_comm 4 n, pow_mul]\n  ring\n#align stirling_seq_pow_four_div_stirling_seq_pow_two_eq stirling_seq_pow_four_div_stirling_seq_pow_two_eq\n\n",
 "stirling_seq_one":
 "@[simp]\ntheorem stirling_seq_one : stirling_seq 1 = exp 1 / sqrt 2 := by\n  rw [stirling_seq, pow_one, factorial_one, cast_one, mul_one, mul_one_div, one_div_div]\n#align stirling_seq_one stirling_seq_one\n\n",
 "stirling_seq_has_pos_limit_a":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The limit `a` of the sequence `stirling_seq` satisfies `0 < a` -/\ntheorem stirling_seq_has_pos_limit_a : ∃ a : exprℝ, 0 < a ∧ Tendsto stirling_seq atTop ((nhds) a) :=\n  by\n  obtain ⟨x, x_pos, hx⟩ := stirling_seq'_bounded_by_pos_constant\n  have hx' : x ∈ lowerBounds (Set.range (stirling_seq ∘ succ)) := by simpa [lowerBounds] using hx\n  refine' ⟨_, lt_of_lt_of_le x_pos (le_cinfₛ (Set.range_nonempty _) hx'), _⟩\n  rw [← Filter.tendsto_add_atTop_iff_nat 1]\n  exact tendsto_atTop_cinfᵢ stirling_seq'_antitone ⟨x, hx'⟩\n#align stirling_seq_has_pos_limit_a stirling_seq_has_pos_limit_a\n\n",
 "stirling_seq'_pos":
 "/-- The sequence `stirling_seq` is positive for `n > 0`  -/\ntheorem stirling_seq'_pos (n : ℕ) : 0 < stirling_seq n.succ :=\n  by\n  unfold stirling_seq\n  positivity\n#align stirling_seq'_pos stirling_seq'_pos\n\n",
 "stirling_seq'_bounded_by_pos_constant":
 "/-- The sequence `stirling_seq` has a positive lower bound.\n-/\ntheorem stirling_seq'_bounded_by_pos_constant : ∃ a, 0 < a ∧ ∀ n : ℕ, a ≤ stirling_seq n.succ :=\n  by\n  cases' log_stirling_seq_bounded_by_constant with c h\n  refine' ⟨exp c, exp_pos _, fun n => _⟩\n  rw [← le_log_iff_exp_le (stirling_seq'_pos n)]\n  exact h n\n#align stirling_seq'_bounded_by_pos_constant stirling_seq'_bounded_by_pos_constant\n\n",
 "stirling_seq'_antitone":
 "/-- The sequence `stirling_seq ∘ succ` is monotone decreasing -/\ntheorem stirling_seq'_antitone : Antitone (stirling_seq ∘ succ) := fun n m h =>\n  (log_le_log (stirling_seq'_pos m) (stirling_seq'_pos n)).mp (log_stirling_seq'_antitone h)\n#align stirling_seq'_antitone stirling_seq'_antitone\n\n",
 "second_wallis_limit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Suppose the sequence `stirling_seq` (defined above) has the limit `a ≠ 0`.\nThen the Wallis sequence `W n` has limit `a^2 / 2`.\n-/\ntheorem second_wallis_limit (a : exprℝ) (hane : a ≠ 0) (ha : Tendsto stirling_seq atTop ((nhds) a)) :\n    Tendsto wallis.W atTop ((nhds) (a ^ 2 / 2)) :=\n  by\n  refine'\n    tendsto.congr'\n      (eventually_at_top.mpr\n        ⟨1, fun n hn => stirling_seq_pow_four_div_stirling_seq_pow_two_eq n (one_le_iff_ne_zero.mp hn)⟩)\n      _\n  have h : a ^ 2 / 2 = a ^ 4 / a ^ 2 * (1 / 2) :=\n    by\n    rw [mul_one_div, ← mul_one_div (a ^ 4) (a ^ 2), one_div, ← pow_sub_of_lt a]\n    norm_num\n  rw [h]\n  exact\n    ((ha.pow 4).div ((ha.comp (tendsto_id.const_mul_at_top' two_pos)).pow 2) (pow_ne_zero 2 hane)).mul\n      tendsto_self_div_two_mul_self_add_one\n#align second_wallis_limit second_wallis_limit\n\n",
 "log_stirling_seq_sub_log_stirling_seq_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- We have the bound  `log (stirling_seq n) - log (stirling_seq (n+1))` ≤ 1/(4 n^2)\n-/\ntheorem log_stirling_seq_sub_log_stirling_seq_succ (n : ℕ) :\n    log (stirling_seq n.succ) - log (stirling_seq n.succ.succ) ≤ 1 / (4 * n.succ ^ 2) :=\n  by\n  have h₁ : 0 < 4 * ((n : exprℝ) + 1) ^ 2 := by positivity\n  have h₃ : 0 < (2 * ((n : exprℝ) + 1) + 1) ^ 2 := by positivity\n  have h₂ : 0 < 1 - (1 / (2 * ((n : exprℝ) + 1) + 1)) ^ 2 :=\n    by\n    rw [← mul_lt_mul_right h₃]\n    have H : 0 < (2 * ((n : exprℝ) + 1) + 1) ^ 2 - 1 := by nlinarith [@cast_nonneg (exprℝ) _ n]\n    convert H using 1 <;> field_simp [h₃.ne']\n  refine' (log_stirling_seq_diff_le_geo_sum n).trans _\n  push_cast\n  rw [div_le_div_iff h₂ h₁]\n  field_simp [h₃.ne']\n  rw [div_le_div_right h₃]\n  ring_nf\n  norm_cast\n  linarith\n#align log_stirling_seq_sub_log_stirling_seq_succ log_stirling_seq_sub_log_stirling_seq_succ\n\n",
 "log_stirling_seq_formula":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- We have the expression\n`log (stirling_seq (n + 1)) = log(n + 1)! - 1 / 2 * log(2 * n) - n * log ((n + 1) / e)`.\n-/\ntheorem log_stirling_seq_formula (n : ℕ) :\n    log (stirling_seq n.succ) = log (nat.factorial n.succ) - 1 / 2 * log (2 * n.succ) - n.succ * log (n.succ / exp 1) :=\n  by\n  rw [stirling_seq, log_div, log_mul, sqrt_eq_rpow, log_rpow, real.log_pow, tsub_tsub] <;> try apply ne_of_gt <;>\n    positivity\n#align log_stirling_seq_formula log_stirling_seq_formula\n\n",
 "log_stirling_seq_diff_le_geo_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- We have a bound for successive elements in the sequence `log (stirling_seq k)`.\n-/\ntheorem log_stirling_seq_diff_le_geo_sum (n : ℕ) :\n    log (stirling_seq n.succ) - log (stirling_seq n.succ.succ) ≤\n      (1 / (2 * n.succ + 1)) ^ 2 / (1 - (1 / (2 * n.succ + 1)) ^ 2) :=\n  by\n  have h_nonneg : 0 ≤ (1 / (2 * (n.succ : exprℝ) + 1)) ^ 2 := sq_nonneg _\n  have g :\n    HasSum (fun k : ℕ => ((1 / (2 * (n.succ : exprℝ) + 1)) ^ 2) ^ k.succ)\n      ((1 / (2 * n.succ + 1)) ^ 2 / (1 - (1 / (2 * n.succ + 1)) ^ 2)) :=\n    by\n    have := (hasSum_geometric_of_lt_1 h_nonneg _).mul_left ((1 / (2 * (n.succ : exprℝ) + 1)) ^ 2)\n    · simp_rw [← pow_succ] at this\n      exact this\n    rw [one_div, inv_pow]\n    exact inv_lt_one (one_lt_pow ((lt_add_iff_pos_left 1).mpr <| by positivity) two_ne_zero)\n  have hab :\n    ∀ k : ℕ,\n      1 / (2 * (k.succ : exprℝ) + 1) * ((1 / (2 * n.succ + 1)) ^ 2) ^ k.succ ≤ ((1 / (2 * n.succ + 1)) ^ 2) ^ k.succ :=\n    by\n    refine' fun k => mul_le_of_le_one_left (pow_nonneg h_nonneg k.succ) _\n    rw [one_div]\n    exact inv_le_one (le_add_of_nonneg_left <| by positivity)\n  exact hasSum_le hab (log_stirling_seq_diff_has_sum n) g\n#align log_stirling_seq_diff_le_geo_sum log_stirling_seq_diff_le_geo_sum\n\n",
 "log_stirling_seq_diff_has_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n-- TODO: Make `positivity` handle `≠ 0` goals\n/-- The sequence `log (stirling_seq (m + 1)) - log (stirling_seq (m + 2))` has the series expansion\n   `∑ 1 / (2 * (k + 1) + 1) * (1 / 2 * (m + 1) + 1)^(2 * (k + 1))`\n-/\ntheorem log_stirling_seq_diff_has_sum (m : ℕ) :\n    HasSum (fun k : ℕ => (1 : exprℝ) / (2 * k.succ + 1) * ((1 / (2 * m.succ + 1)) ^ 2) ^ k.succ)\n      (log (stirling_seq m.succ) - log (stirling_seq m.succ.succ)) :=\n  by\n  change HasSum ((fun b : ℕ => 1 / (2 * (b : exprℝ) + 1) * ((1 / (2 * m.succ + 1)) ^ 2) ^ b) ∘ succ) _\n  refine' (hasSum_nat_add_iff 1).mpr _\n  convert(has_sum_log_one_add_inv <| cast_pos.mpr (succ_pos m)).mul_left ((m.succ : exprℝ) + 1 / 2)\n  · ext k\n    rw [← pow_mul, pow_add]\n    push_cast\n    have : 2 * (k : exprℝ) + 1 ≠ 0 := by\n      norm_cast\n      exact succ_ne_zero (2 * k)\n    have : 2 * ((m : exprℝ) + 1) + 1 ≠ 0 := by\n      norm_cast\n      exact succ_ne_zero (2 * m.succ)\n    field_simp\n    ring\n  · have h : ∀ (x : exprℝ) (hx : x ≠ 0), 1 + x⁻¹ = (x + 1) / x :=\n      by\n      intros\n      rw [_root_.add_div, div_self hx, inv_eq_one_div]\n    simp (disch :=\n      norm_cast\n      apply_rules [mul_ne_zero, succ_ne_zero, factorial_ne_zero, exp_ne_zero] ) only [log_stirling_seq_formula, log_div,\n      log_mul, log_exp, factorial_succ, cast_mul, cast_succ, cast_zero, range_one, sum_singleton, h]\n    ring\n#align log_stirling_seq_diff_has_sum log_stirling_seq_diff_has_sum\n\n",
 "log_stirling_seq_bounded_by_constant":
 "/-- The sequence `log_stirling_seq` is bounded below for `n ≥ 1`. -/\ntheorem log_stirling_seq_bounded_by_constant : ∃ c, ∀ n : ℕ, c ≤ log (stirling_seq n.succ) :=\n  by\n  obtain ⟨d, h⟩ := log_stirling_seq_bounded_aux\n  exact ⟨log (stirling_seq 1) - d, fun n => sub_le_comm.mp (h n)⟩\n#align log_stirling_seq_bounded_by_constant log_stirling_seq_bounded_by_constant\n\n",
 "log_stirling_seq_bounded_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- For any `n`, we have `log_stirling_seq 1 - log_stirling_seq n ≤ 1/4 * ∑' 1/k^2`  -/\ntheorem log_stirling_seq_bounded_aux : ∃ c : exprℝ, ∀ n : ℕ, log (stirling_seq 1) - log (stirling_seq n.succ) ≤ c :=\n  by\n  let d :=\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n      ((1 : exprℝ) / k.succ ^ 2)\n  use (1 / 4 * d : exprℝ)\n  let log_stirling_seq' : ℕ → exprℝ := fun k => log (stirling_seq k.succ)\n  intro n\n  have h₁ : ∀ k, log_stirling_seq' k - log_stirling_seq' (k + 1) ≤ 1 / 4 * (1 / k.succ ^ 2) :=\n    by\n    intro k\n    convert log_stirling_seq_sub_log_stirling_seq_succ k using 1\n    field_simp\n  have h₂ :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        ((1 : exprℝ) / k.succ ^ 2) ≤\n      d :=\n    sum_le_tsum (range n) (fun k _ => by positivity)\n      ((summable_nat_add_iff 1).mpr <| real.summable_one_div_nat_pow.mpr one_lt_two)\n  calc\n    log (stirling_seq 1) - log (stirling_seq n.succ) = log_stirling_seq' 0 - log_stirling_seq' n := rfl\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (log_stirling_seq' k - log_stirling_seq' (k + 1)) :=\n      by rw [← sum_range_sub' log_stirling_seq' n]\n    _ ≤\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (1 / 4 * (1 / k.succ ^ 2)) :=\n      (sum_le_sum fun k _ => h₁ k)\n    _ =\n        1 / 4 *\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n            (1 / k.succ ^ 2) :=\n      by rw [mul_sum]\n    _ ≤ 1 / 4 * d := mul_le_mul_of_nonneg_left h₂ <| by positivity\n    \n#align log_stirling_seq_bounded_aux log_stirling_seq_bounded_aux\n\n",
 "log_stirling_seq'_antitone":
 "/-- The sequence `log ∘ stirling_seq ∘ succ` is monotone decreasing -/\ntheorem log_stirling_seq'_antitone : Antitone (real.log ∘ stirling_seq ∘ succ) :=\n  antitone_nat_of_succ_le fun n => sub_nonneg.mp <| (log_stirling_seq_diff_has_sum n).nonneg fun m => by positivity\n#align log_stirling_seq'_antitone log_stirling_seq'_antitone\n\n"}