{"sinh_surjective":
 "/-- `sinh` is surjective, `∀ b, ∃ a, sinh a = b`. In this case, we use `a = arsinh b`. -/\ntheorem sinh_surjective : surjective sinh :=\n  LeftInverse.surjective sinh_arsinh\n#align sinh_surjective sinh_surjective\n\n",
 "sinh_bijective":
 "/-- `sinh` is bijective, both injective and surjective. -/\ntheorem sinh_bijective : bijective sinh :=\n  ⟨sinh_injective, sinh_surjective⟩\n#align sinh_bijective sinh_bijective\n\n",
 "sinh_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `arsinh` is the right inverse of `sinh`. -/\n@[simp]\ntheorem sinh_arsinh (x : exprℝ) : sinh (arsinh x) = x :=\n  by\n  rw [sinh_eq, ← arsinh_neg, exp_arsinh, exp_arsinh, neg_sq]\n  field_simp\n#align sinh_arsinh sinh_arsinh\n\n",
 "has_strict_deriv_at_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_strict_deriv_at_arsinh (x : exprℝ) : has_strict_deriv_at arsinh (sqrt (1 + x ^ 2))⁻¹ x :=\n  by\n  convert sinh_homeomorph.to_local_homeomorph.has_strict_deriv_at_symm (mem_univ x) (cosh_pos _).ne'\n      (has_strict_deriv_at_sinh _)\n  exact (cosh_arsinh _).symm\n#align has_strict_deriv_at_arsinh has_strict_deriv_at_arsinh\n\n",
 "has_deriv_at_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_deriv_at_arsinh (x : exprℝ) : has_deriv_at arsinh (sqrt (1 + x ^ 2))⁻¹ x :=\n  (has_strict_deriv_at_arsinh x).has_deriv_at\n#align has_deriv_at_arsinh has_deriv_at_arsinh\n\n",
 "exp_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 James Arthur. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: James Arthur, Chris Hughes, Shing Tak Lam\n-/\ntheorem exp_arsinh (x : exprℝ) : exp (arsinh x) = x + sqrt (1 + x ^ 2) :=\n  by\n  apply exp_log\n  rw [← neg_lt_iff_pos_add']\n  calc\n    -x ≤ sqrt (x ^ 2) := le_sqrt_of_sq_le (neg_pow_bit0 _ _).le\n    _ < sqrt (1 + x ^ 2) := sqrt_lt_sqrt (sq_nonneg _) (lt_one_add _)\n    \n#align exp_arsinh exp_arsinh\n\n",
 "differentiable_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem differentiable_arsinh : differentiable (exprℝ) arsinh := fun x => (has_deriv_at_arsinh x).differentiable_at\n#align differentiable_arsinh differentiable_arsinh\n\n",
 "cosh_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem cosh_arsinh (x : exprℝ) : cosh (arsinh x) = sqrt (1 + x ^ 2) := by\n  rw [← sqrt_sq (cosh_pos _).le, cosh_sq', sinh_arsinh]\n#align cosh_arsinh cosh_arsinh\n\n",
 "continuous_arsinh":
 "@[continuity]\ntheorem continuous_arsinh : Continuous arsinh :=\n  sinh_homeomorph.symm.continuous\n#align continuous_arsinh continuous_arsinh\n\n",
 "cont_diff_arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_arsinh {n : «exprℕ∞»} : cont_diff (exprℝ) n arsinh :=\n  sinh_homeomorph.cont_diff_symm_deriv (fun x => (cosh_pos x).ne') has_deriv_at_sinh cont_diff_sinh\n#align cont_diff_arsinh cont_diff_arsinh\n\n",
 "arsinh_zero":
 "@[simp]\ntheorem arsinh_zero : arsinh 0 = 0 := by simp [arsinh]\n#align arsinh_zero arsinh_zero\n\n",
 "arsinh_surjective":
 "theorem arsinh_surjective : surjective arsinh :=\n  sinh_equiv.symm.surjective\n#align arsinh_surjective arsinh_surjective\n\n",
 "arsinh_strict_mono":
 "theorem arsinh_strict_mono : StrictMono arsinh :=\n  sinh_order_iso.symm.strict_mono\n#align arsinh_strict_mono arsinh_strict_mono\n\n",
 "arsinh_sinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `arsinh` is the left inverse of `sinh`. -/\n@[simp]\ntheorem arsinh_sinh (x : exprℝ) : arsinh (sinh x) = x :=\n  rightInverse_of_injective_of_leftInverse sinh_injective sinh_arsinh x\n#align arsinh_sinh arsinh_sinh\n\n",
 "arsinh_pos_iff":
 "@[simp]\ntheorem arsinh_pos_iff : 0 < arsinh x ↔ 0 < x :=\n  lt_iff_lt_of_le_iff_le arsinh_nonpos_iff\n#align arsinh_pos_iff arsinh_pos_iff\n\n",
 "arsinh_nonpos_iff":
 "@[simp]\ntheorem arsinh_nonpos_iff : arsinh x ≤ 0 ↔ x ≤ 0 := by rw [← sinh_le_sinh, sinh_zero, sinh_arsinh]\n#align arsinh_nonpos_iff arsinh_nonpos_iff\n\n",
 "arsinh_nonneg_iff":
 "@[simp]\ntheorem arsinh_nonneg_iff : 0 ≤ arsinh x ↔ 0 ≤ x := by rw [← sinh_le_sinh, sinh_zero, sinh_arsinh]\n#align arsinh_nonneg_iff arsinh_nonneg_iff\n\n",
 "arsinh_neg_iff":
 "@[simp]\ntheorem arsinh_neg_iff : arsinh x < 0 ↔ x < 0 :=\n  lt_iff_lt_of_le_iff_le arsinh_nonneg_iff\n#align arsinh_neg_iff arsinh_neg_iff\n\n",
 "arsinh_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem arsinh_neg (x : exprℝ) : arsinh (-x) = -arsinh x :=\n  by\n  rw [← exp_eq_exp, exp_arsinh, exp_neg, exp_arsinh]\n  apply eq_inv_of_mul_eq_one_left\n  rw [neg_sq, neg_add_eq_sub, add_comm x, mul_comm, ← sq_sub_sq, sq_sqrt, add_sub_cancel]\n  exact add_nonneg zero_le_one (sq_nonneg _)\n#align arsinh_neg arsinh_neg\n\n",
 "arsinh_lt_arsinh":
 "@[simp]\ntheorem arsinh_lt_arsinh : arsinh x < arsinh y ↔ x < y :=\n  sinh_order_iso.symm.lt_iff_lt\n#align arsinh_lt_arsinh arsinh_lt_arsinh\n\n",
 "arsinh_le_arsinh":
 "@[simp]\ntheorem arsinh_le_arsinh : arsinh x ≤ arsinh y ↔ x ≤ y :=\n  sinh_order_iso.symm.le_iff_le\n#align arsinh_le_arsinh arsinh_le_arsinh\n\n",
 "arsinh_injective":
 "theorem arsinh_injective : injective arsinh :=\n  sinh_equiv.symm.injective\n#align arsinh_injective arsinh_injective\n\n",
 "arsinh_inj":
 "@[simp]\ntheorem arsinh_inj : arsinh x = arsinh y ↔ x = y :=\n  arsinh_injective.eq_iff\n#align arsinh_inj arsinh_inj\n\n",
 "arsinh_eq_zero_iff":
 "@[simp]\ntheorem arsinh_eq_zero_iff : arsinh x = 0 ↔ x = 0 :=\n  arsinh_injective.eq_iff' arsinh_zero\n#align arsinh_eq_zero_iff arsinh_eq_zero_iff\n\n",
 "arsinh_bijective":
 "theorem arsinh_bijective : bijective arsinh :=\n  sinh_equiv.symm.bijective\n#align arsinh_bijective arsinh_bijective\n\n",
 "arsinh":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem has_deriv_within_at.arsinh (hf : has_deriv_within_at f f' s a) :\n    has_deriv_within_at (fun x => arsinh (f x)) («expr • » (sqrt (1 + f a ^ 2))⁻¹ f') s a :=\n  (has_deriv_at_arsinh _).comp_has_deriv_within_at a hf\n#align has_deriv_within_at.arsinh has_deriv_within_at.arsinh\n\n"}