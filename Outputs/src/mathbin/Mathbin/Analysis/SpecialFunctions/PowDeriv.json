{"tendsto_one_plus_div_rpow_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The function `(1 + t/x) ^ x` tends to `exp t` at `+∞`. -/\ntheorem tendsto_one_plus_div_rpow_exp (t : exprℝ) : Tendsto (fun x : exprℝ => (1 + t / x) ^ x) atTop ((nhds) (exp t)) :=\n  by\n  apply ((real.continuous_exp.tendsto _).comp (tendsto_mul_log_one_plus_div_at_top t)).congr' _\n  have h₁ : (1 : exprℝ) / 2 < 1 := by linarith\n  have h₂ : tendsto (fun x : exprℝ => 1 + t / x) at_top ((nhds) 1) := by\n    simpa using (tendsto_inv_at_top_zero.const_mul t).const_add 1\n  refine' (eventually_ge_of_tendsto_gt h₁ h₂).mono fun x hx => _\n  have hx' : 0 < 1 + t / x := by linarith\n  simp [mul_comm x, exp_mul, exp_log hx']\n#align tendsto_one_plus_div_rpow_exp tendsto_one_plus_div_rpow_exp\n\n",
 "tendsto_one_plus_div_pow_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The function `(1 + t/x) ^ x` tends to `exp t` at `+∞` for naturals `x`. -/\ntheorem tendsto_one_plus_div_pow_exp (t : exprℝ) :\n    Tendsto (fun x : ℕ => (1 + t / (x : exprℝ)) ^ x) atTop ((nhds) (Real.exp t)) :=\n  ((tendsto_one_plus_div_rpow_exp t).comp tendsto_nat_cast_atTop_atTop).congr (by simp)\n#align tendsto_one_plus_div_pow_exp tendsto_one_plus_div_pow_exp\n\n",
 "rpow_const_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff.rpow_const_of_ne (hf : cont_diff (exprℝ) n f) (h : ∀ x, f x ≠ 0) :\n    cont_diff (exprℝ) n fun x => f x ^ p :=\n  hf.rpow cont_diff_const h\n#align cont_diff.rpow_const_of_ne cont_diff.rpow_const_of_ne\n\n",
 "rpow_const_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff.rpow_const_of_le (hf : cont_diff (exprℝ) m f) (h : ↑m ≤ p) : cont_diff (exprℝ) m fun x => f x ^ p :=\n  cont_diff_iff_cont_diff_at.mpr fun x => hf.cont_diff_at.rpow_const_of_le h\n#align cont_diff.rpow_const_of_le cont_diff.rpow_const_of_le\n\n",
 "rpow_const":
 "theorem has_deriv_at.rpow_const (hf : has_deriv_at f f' x) (hx : f x ≠ 0 ∨ 1 ≤ p) :\n    has_deriv_at (fun y => f y ^ p) (f' * p * f x ^ (p - 1)) x :=\n  by\n  rw [← has_deriv_within_at_univ] at *\n  exact hf.rpow_const hx\n#align has_deriv_at.rpow_const has_deriv_at.rpow_const\n\n",
 "rpow":
 "theorem has_deriv_at.rpow (hf : has_deriv_at f f' x) (hg : has_deriv_at g g' x) (h : 0 < f x) :\n    has_deriv_at (fun x => f x ^ g x) (f' * g x * f x ^ (g x - 1) + g' * f x ^ g x * log (f x)) x :=\n  by\n  rw [← has_deriv_within_at_univ] at *\n  exact hf.rpow hg h\n#align has_deriv_at.rpow has_deriv_at.rpow\n\n",
 "has_strict_fderiv_at_rpow_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `(x, y) ↦ x ^ y` is strictly differentiable at `p : ℝ × ℝ` such that `0 < p.fst`. -/\ntheorem has_strict_fderiv_at_rpow_of_pos (p : exprℝ × exprℝ) (hp : 0 < p.1) :\n    has_strict_fderiv_at (fun x : exprℝ × exprℝ => x.1 ^ x.2)\n      («expr • » (p.2 * p.1 ^ (p.2 - 1)) (ContinuousLinearMap.fst (exprℝ) (exprℝ) (exprℝ)) +\n        «expr • » (p.1 ^ p.2 * log p.1) (ContinuousLinearMap.snd (exprℝ) (exprℝ) (exprℝ)))\n      p :=\n  by\n  have : «expr =ᶠ[ ] » (fun x : exprℝ × exprℝ => x.1 ^ x.2) ((nhds) p) fun x => exp (log x.1 * x.2) :=\n    (continuous_at_fst.eventually (lt_mem_nhds hp)).mono fun p hp => rpow_def_of_pos hp _\n  refine' has_strict_fderiv_at.congr_of_eventually_eq _ this.symm\n  convert((has_strict_fderiv_at_fst.log hp.ne').mul has_strict_fderiv_at_snd).exp\n  rw [rpow_sub_one hp.ne', ← rpow_def_of_pos hp, smul_add, smul_smul, mul_div_left_comm, div_eq_mul_inv, smul_smul,\n    smul_smul, mul_assoc, add_comm]\n#align has_strict_fderiv_at_rpow_of_pos has_strict_fderiv_at_rpow_of_pos\n\n",
 "has_strict_fderiv_at_rpow_of_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `(x, y) ↦ x ^ y` is strictly differentiable at `p : ℝ × ℝ` such that `p.fst < 0`. -/\ntheorem has_strict_fderiv_at_rpow_of_neg (p : exprℝ × exprℝ) (hp : p.1 < 0) :\n    has_strict_fderiv_at (fun x : exprℝ × exprℝ => x.1 ^ x.2)\n      («expr • » (p.2 * p.1 ^ (p.2 - 1)) (ContinuousLinearMap.fst (exprℝ) (exprℝ) (exprℝ)) +\n        «expr • » (p.1 ^ p.2 * log p.1 - exp (log p.1 * p.2) * sin (p.2 * real.pi) * real.pi)\n          (ContinuousLinearMap.snd (exprℝ) (exprℝ) (exprℝ)))\n      p :=\n  by\n  have :\n    «expr =ᶠ[ ] » (fun x : exprℝ × exprℝ => x.1 ^ x.2) ((nhds) p) fun x => exp (log x.1 * x.2) * cos (x.2 * real.pi) :=\n    (continuous_at_fst.eventually (gt_mem_nhds hp)).mono fun p hp => rpow_def_of_neg hp _\n  refine' has_strict_fderiv_at.congr_of_eventually_eq _ this.symm\n  convert((has_strict_fderiv_at_fst.log hp.ne).mul has_strict_fderiv_at_snd).exp.mul\n      (has_strict_fderiv_at_snd.mul_const _).cos using\n    1\n  simp_rw [rpow_sub_one hp.ne, smul_add, ← add_assoc, smul_smul, ← add_smul, ← mul_assoc, mul_comm (cos _), ←\n    rpow_def_of_neg hp]\n  rw [div_eq_mul_inv, add_comm]\n  congr 2 <;> ring\n#align has_strict_fderiv_at_rpow_of_neg has_strict_fderiv_at_rpow_of_neg\n\n",
 "has_strict_fderiv_at_cpow'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem has_strict_fderiv_at_cpow' {x y : exprℂ} (hp : 0 < x.re ∨ x.im ≠ 0) :\n    has_strict_fderiv_at (fun x : exprℂ × exprℂ => x.1 ^ x.2)\n      («expr • » (y * x ^ (y - 1)) (ContinuousLinearMap.fst (exprℂ) (exprℂ) (exprℂ)) +\n        «expr • » (x ^ y * log x) (ContinuousLinearMap.snd (exprℂ) (exprℂ) (exprℂ)))\n      (x, y) :=\n  @has_strict_fderiv_at_cpow (x, y) hp\n#align has_strict_fderiv_at_cpow' has_strict_fderiv_at_cpow'\n\n",
 "has_strict_fderiv_at_cpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle Sönne, Sébastien Gouëzel,\n  Rémy Degenne\n-/\ntheorem has_strict_fderiv_at_cpow {p : exprℂ × exprℂ} (hp : 0 < p.1.re ∨ p.1.im ≠ 0) :\n    has_strict_fderiv_at (fun x : exprℂ × exprℂ => x.1 ^ x.2)\n      («expr • » (p.2 * p.1 ^ (p.2 - 1)) (ContinuousLinearMap.fst (exprℂ) (exprℂ) (exprℂ)) +\n        «expr • » (p.1 ^ p.2 * log p.1) (ContinuousLinearMap.snd (exprℂ) (exprℂ) (exprℂ)))\n      p :=\n  by\n  have A : p.1 ≠ 0 := by\n    intro h\n    simpa [h, lt_irrefl] using hp\n  have : «expr =ᶠ[ ] » (fun x : exprℂ × exprℂ => x.1 ^ x.2) ((nhds) p) fun x => exp (log x.1 * x.2) :=\n    ((is_open_ne.preimage continuous_fst).eventually_mem A).mono fun p hp => cpow_def_of_ne_zero hp _\n  rw [cpow_sub _ _ A, cpow_one, mul_div_left_comm, mul_smul, mul_smul, ← smul_add]\n  refine' has_strict_fderiv_at.congr_of_eventually_eq _ this.symm\n  simpa only [cpow_def_of_ne_zero A, div_eq_mul_inv, mul_smul, add_comm] using\n    ((has_strict_fderiv_at_fst.clog hp).mul has_strict_fderiv_at_snd).cexp\n#align has_strict_fderiv_at_cpow has_strict_fderiv_at_cpow\n\n",
 "has_strict_deriv_at_rpow_const_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_strict_deriv_at_rpow_const_of_ne {x : exprℝ} (hx : x ≠ 0) (p : exprℝ) :\n    has_strict_deriv_at (fun x => x ^ p) (p * x ^ (p - 1)) x :=\n  by\n  cases' hx.lt_or_lt with hx hx\n  · have :=\n      (has_strict_fderiv_at_rpow_of_neg (x, p) hx).comp_has_strict_deriv_at x\n        ((has_strict_deriv_at_id x).prod (has_strict_deriv_at_const _ _))\n    convert this\n    simp\n  · simpa using (has_strict_deriv_at_id x).rpow (has_strict_deriv_at_const x p) hx\n#align has_strict_deriv_at_rpow_const_of_ne has_strict_deriv_at_rpow_const_of_ne\n\n",
 "has_strict_deriv_at_rpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_strict_deriv_at_rpow_const {x p : exprℝ} (hx : x ≠ 0 ∨ 1 ≤ p) :\n    has_strict_deriv_at (fun x => x ^ p) (p * x ^ (p - 1)) x :=\n  cont_diff_at.has_strict_deriv_at' (cont_diff_at_rpow_const (by rwa [Nat.cast_one])) (has_deriv_at_rpow_const hx)\n    le_rfl\n#align has_strict_deriv_at_rpow_const has_strict_deriv_at_rpow_const\n\n",
 "has_strict_deriv_at_cpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem complex.has_strict_deriv_at_cpow_const (h : 0 < x.re ∨ x.im ≠ 0) :\n    has_strict_deriv_at (fun z : exprℂ => z ^ c) (c * x ^ (c - 1)) x := by\n  simpa only [MulZeroClass.mul_zero, add_zero, mul_one] using\n    (has_strict_deriv_at_id x).cpow (has_strict_deriv_at_const x c) h\n#align complex.has_strict_deriv_at_cpow_const complex.has_strict_deriv_at_cpow_const\n\n",
 "has_strict_deriv_at_const_rpow_of_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/-- This lemma says that `λ x, a ^ x` is strictly differentiable for `a < 0`. Note that these\nvalues of `a` are outside of the \"official\" domain of `a ^ x`, and we may redefine `a ^ x`\nfor negative `a` if some other definition will be more convenient. -/\ntheorem has_strict_deriv_at_const_rpow_of_neg {a x : exprℝ} (ha : a < 0) :\n    has_strict_deriv_at (fun x => a ^ x) (a ^ x * log a - exp (log a * x) * sin (x * real.pi) * real.pi) x := by\n  simpa using\n    (has_strict_fderiv_at_rpow_of_neg (a, x) ha).comp_has_strict_deriv_at x\n      ((has_strict_deriv_at_const _ _).prod (has_strict_deriv_at_id _))\n#align has_strict_deriv_at_const_rpow_of_neg has_strict_deriv_at_const_rpow_of_neg\n\n",
 "has_strict_deriv_at_const_rpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_strict_deriv_at_const_rpow {a : exprℝ} (ha : 0 < a) (x : exprℝ) :\n    has_strict_deriv_at (fun x => a ^ x) (a ^ x * log a) x := by\n  simpa using (has_strict_deriv_at_const _ _).rpow (has_strict_deriv_at_id x) ha\n#align has_strict_deriv_at_const_rpow has_strict_deriv_at_const_rpow\n\n",
 "has_strict_deriv_at_const_cpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem has_strict_deriv_at_const_cpow {x y : exprℂ} (h : x ≠ 0 ∨ y ≠ 0) :\n    has_strict_deriv_at (fun y => x ^ y) (x ^ y * log x) y :=\n  by\n  rcases em (x = 0) with (rfl | hx)\n  · replace h := h.neg_resolve_left rfl\n    rw [log_zero, MulZeroClass.mul_zero]\n    refine' (has_strict_deriv_at_const _ 0).congr_of_eventually_eq _\n    exact (is_open_ne.eventually_mem h).mono fun y hy => (zero_cpow hy).symm\n  · simpa only [cpow_def_of_ne_zero hx, mul_one] using ((has_strict_deriv_at_id y).const_mul (log x)).cexp\n#align has_strict_deriv_at_const_cpow has_strict_deriv_at_const_cpow\n\n",
 "has_fderiv_at_cpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem has_fderiv_at_cpow {p : exprℂ × exprℂ} (hp : 0 < p.1.re ∨ p.1.im ≠ 0) :\n    has_fderiv_at (fun x : exprℂ × exprℂ => x.1 ^ x.2)\n      («expr • » (p.2 * p.1 ^ (p.2 - 1)) (ContinuousLinearMap.fst (exprℂ) (exprℂ) (exprℂ)) +\n        «expr • » (p.1 ^ p.2 * log p.1) (ContinuousLinearMap.snd (exprℂ) (exprℂ) (exprℂ)))\n      p :=\n  (has_strict_fderiv_at_cpow hp).has_fderiv_at\n#align has_fderiv_at_cpow has_fderiv_at_cpow\n\n",
 "has_deriv_at_rpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_deriv_at_rpow_const {x p : exprℝ} (h : x ≠ 0 ∨ 1 ≤ p) : has_deriv_at (fun x => x ^ p) (p * x ^ (p - 1)) x :=\n  by\n  rcases ne_or_eq x 0 with (hx | rfl)\n  · exact (has_strict_deriv_at_rpow_const_of_ne hx _).has_deriv_at\n  replace h : 1 ≤ p := h.neg_resolve_left rfl\n  apply has_deriv_at_of_has_deriv_at_of_ne fun x hx => (has_strict_deriv_at_rpow_const_of_ne hx p).has_deriv_at\n  exacts[continuous_at_id.rpow_const (or.inr (zero_le_one.trans h)),\n    continuous_at_const.mul (continuous_at_id.rpow_const (or.inr (sub_nonneg.2 h)))]\n#align has_deriv_at_rpow_const has_deriv_at_rpow_const\n\n",
 "has_deriv_at_of_real_cpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- Although `λ x, x ^ r` for fixed `r` is *not* complex-differentiable along the negative real\nline, it is still real-differentiable, and the derivative is what one would formally expect. -/\ntheorem has_deriv_at_of_real_cpow {x : exprℝ} (hx : x ≠ 0) {r : exprℂ} (hr : r ≠ -1) :\n    has_deriv_at (fun y : exprℝ => (y : exprℂ) ^ (r + 1) / (r + 1)) (x ^ r) x :=\n  by\n  rw [ne.def, ← add_eq_zero_iff_eq_neg, ← ne.def] at hr\n  rcases lt_or_gt_of_ne hx.symm with (hx | hx)\n  · -- easy case : `0 < x`\n    convert(((has_deriv_at_id (x : exprℂ)).cpow_const _).div_const (r + 1)).comp_of_real\n    · rw [add_sub_cancel, id.def, mul_one, mul_comm, mul_div_cancel _ hr]\n    · rw [id.def, of_real_re]\n      exact or.inl hx\n  · -- harder case : `x < 0`\n    have :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" (nhds x)\n        ((y : exprℂ) ^ (r + 1) / (r + 1) = (-y : exprℂ) ^ (r + 1) * exp (real.pi * I * (r + 1)) / (r + 1)) :=\n      by\n      refine' Filter.eventually_of_mem (Iio_mem_nhds hx) fun y hy => _\n      rw [of_real_cpow_of_nonpos (le_of_lt hy)]\n    refine' has_deriv_at.congr_of_eventually_eq _ this\n    rw [of_real_cpow_of_nonpos (le_of_lt hx)]\n    suffices\n      has_deriv_at (fun y : exprℝ => (-↑y) ^ (r + 1) * exp (↑(real.pi) * I * (r + 1)))\n        ((r + 1) * (-↑x) ^ r * exp (↑(real.pi) * I * r)) x\n      by\n      convert this.div_const (r + 1) using 1\n      conv_rhs => rw [mul_assoc, mul_comm, mul_div_cancel _ hr]\n    rw [mul_add ((real.pi : exprℂ) * _), mul_one, exp_add, exp_pi_mul_I, mul_comm (_ : exprℂ) (-1 : exprℂ), neg_one_mul]\n    simp_rw [mul_neg, ← neg_mul, ← of_real_neg]\n    suffices has_deriv_at (fun y : exprℝ => ↑(-y) ^ (r + 1)) (-(r + 1) * ↑(-x) ^ r) x\n      by\n      convert this.neg.mul_const _\n      ring\n    suffices has_deriv_at (fun y : exprℝ => ↑y ^ (r + 1)) ((r + 1) * ↑(-x) ^ r) (-x)\n      by\n      convert@has_deriv_at.scomp (exprℝ) _ (exprℂ) _ _ x (exprℝ) _ _ _ _ _ _ _ _ this (has_deriv_at_neg x) using 1\n      rw [real_smul, of_real_neg 1, of_real_one]\n      ring\n    suffices has_deriv_at (fun y : exprℂ => y ^ (r + 1)) ((r + 1) * ↑(-x) ^ r) ↑(-x) by exact this.comp_of_real\n    conv in ↑_ ^ _ => rw [(by ring : r = r + 1 - 1)]\n    convert(has_deriv_at_id ((-x : exprℝ) : exprℂ)).cpow_const _ using 1\n    · simp\n    · left\n      rwa [id.def, of_real_re, neg_pos]\n#align has_deriv_at_of_real_cpow has_deriv_at_of_real_cpow\n\n",
 "differentiable_rpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem differentiable_rpow_const {p : exprℝ} (hp : 1 ≤ p) : differentiable (exprℝ) fun x : exprℝ => x ^ p := fun x =>\n  (has_deriv_at_rpow_const (or.inr hp)).differentiable_at\n#align differentiable_rpow_const differentiable_rpow_const\n\n",
 "differentiable_at_rpow_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem differentiable_at_rpow_of_ne (p : exprℝ × exprℝ) (hp : p.1 ≠ 0) :\n    differentiable_at (exprℝ) (fun p : exprℝ × exprℝ => p.1 ^ p.2) p :=\n  (cont_diff_at_rpow_of_ne p hp).differentiable_at le_rfl\n#align differentiable_at_rpow_of_ne differentiable_at_rpow_of_ne\n\n",
 "deriv_within_rpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem deriv_within_rpow_const (hf : differentiable_within_at (exprℝ) f s x) (hx : f x ≠ 0 ∨ 1 ≤ p)\n    (hxs : unique_diff_within_at (exprℝ) s x) :\n    deriv_within (fun x => f x ^ p) s x = deriv_within f s x * p * f x ^ (p - 1) :=\n  (hf.has_deriv_within_at.rpow_const hx).deriv_within hxs\n#align deriv_within_rpow_const deriv_within_rpow_const\n\n",
 "deriv_rpow_const'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem deriv_rpow_const' {p : exprℝ} (h : 1 ≤ p) : (deriv fun x : exprℝ => x ^ p) = fun x => p * x ^ (p - 1) :=\n  funext fun x => deriv_rpow_const (or.inr h)\n#align deriv_rpow_const' deriv_rpow_const'\n\n",
 "deriv_rpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem deriv_rpow_const (hf : differentiable_at (exprℝ) f x) (hx : f x ≠ 0 ∨ 1 ≤ p) :\n    deriv (fun x => f x ^ p) x = deriv f x * p * f x ^ (p - 1) :=\n  (hf.has_deriv_at.rpow_const hx).deriv\n#align deriv_rpow_const deriv_rpow_const\n\n",
 "cpow_const":
 "theorem has_deriv_within_at.cpow_const (hf : has_deriv_within_at f f' s x) (h0 : 0 < (f x).re ∨ (f x).im ≠ 0) :\n    has_deriv_within_at (fun x => f x ^ c) (c * f x ^ (c - 1) * f') s x :=\n  (complex.has_strict_deriv_at_cpow_const h0).has_deriv_at.comp_has_deriv_within_at x hf\n#align has_deriv_within_at.cpow_const has_deriv_within_at.cpow_const\n\n",
 "cpow":
 "theorem has_deriv_within_at.cpow (hf : has_deriv_within_at f f' s x) (hg : has_deriv_within_at g g' s x)\n    (h0 : 0 < (f x).re ∨ (f x).im ≠ 0) :\n    has_deriv_within_at (fun x => f x ^ g x) (g x * f x ^ (g x - 1) * f' + f x ^ g x * log (f x) * g') s x := by\n  simpa only [aux] using (hf.has_fderiv_within_at.cpow hg h0).has_deriv_within_at\n#align has_deriv_within_at.cpow has_deriv_within_at.cpow\n\n",
 "cont_diff_rpow_const_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_rpow_const_of_le {p : exprℝ} {n : ℕ} (h : ↑n ≤ p) : cont_diff (exprℝ) n fun x : exprℝ => x ^ p :=\n  by\n  induction' n with n ihn generalizing p\n  · exact cont_diff_zero.2 (continuous_id.rpow_const fun x => by exact_mod_cast or.inr h)\n  · have h1 : 1 ≤ p := le_trans (by simp) h\n    rw [Nat.cast_succ, ← le_sub_iff_add_le] at h\n    rw [cont_diff_succ_iff_deriv, deriv_rpow_const' h1]\n    refine' ⟨differentiable_rpow_const h1, cont_diff_const.mul (ihn h)⟩\n#align cont_diff_rpow_const_of_le cont_diff_rpow_const_of_le\n\n",
 "cont_diff_at_rpow_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The function `λ (x, y), x ^ y` is infinitely smooth at `(x, y)` unless `x = 0`. -/\ntheorem cont_diff_at_rpow_of_ne (p : exprℝ × exprℝ) (hp : p.1 ≠ 0) {n : «exprℕ∞»} :\n    cont_diff_at (exprℝ) n (fun p : exprℝ × exprℝ => p.1 ^ p.2) p :=\n  by\n  cases' hp.lt_or_lt with hneg hpos\n  exacts[(((cont_diff_at_fst.log hneg.ne).mul cont_diff_at_snd).exp.mul\n          (cont_diff_at_snd.mul cont_diff_at_const).cos).congr_of_eventually_eq\n      ((continuous_at_fst.eventually (gt_mem_nhds hneg)).mono fun p hp => rpow_def_of_neg hp _),\n    ((cont_diff_at_fst.log hpos.ne').mul cont_diff_at_snd).exp.congr_of_eventually_eq\n      ((continuous_at_fst.eventually (lt_mem_nhds hpos)).mono fun p hp => rpow_def_of_pos hp _)]\n#align cont_diff_at_rpow_of_ne cont_diff_at_rpow_of_ne\n\n",
 "cont_diff_at_rpow_const_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_at_rpow_const_of_ne {x p : exprℝ} {n : «exprℕ∞»} (h : x ≠ 0) :\n    cont_diff_at (exprℝ) n (fun x => x ^ p) x :=\n  (cont_diff_at_rpow_of_ne (x, p) h).comp x (cont_diff_at_id.prod cont_diff_at_const)\n#align cont_diff_at_rpow_const_of_ne cont_diff_at_rpow_const_of_ne\n\n",
 "cont_diff_at_rpow_const_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_at_rpow_const_of_le {x p : exprℝ} {n : ℕ} (h : ↑n ≤ p) :\n    cont_diff_at (exprℝ) n (fun x : exprℝ => x ^ p) x :=\n  (cont_diff_rpow_const_of_le h).cont_diff_at\n#align cont_diff_at_rpow_const_of_le cont_diff_at_rpow_const_of_le\n\n",
 "cont_diff_at_rpow_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem cont_diff_at_rpow_const {x p : exprℝ} {n : ℕ} (h : x ≠ 0 ∨ ↑n ≤ p) :\n    cont_diff_at (exprℝ) n (fun x : exprℝ => x ^ p) x :=\n  h.elim cont_diff_at_rpow_const_of_ne cont_diff_at_rpow_const_of_le\n#align cont_diff_at_rpow_const cont_diff_at_rpow_const\n\n",
 "const_rpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem has_strict_fderiv_at.const_rpow (hf : has_strict_fderiv_at f f' x) (hc : 0 < c) :\n    has_strict_fderiv_at (fun x => c ^ f x) («expr • » (c ^ f x * log c) f') x :=\n  (has_strict_deriv_at_const_rpow hc (f x)).comp_has_strict_fderiv_at x hf\n#align has_strict_fderiv_at.const_rpow has_strict_fderiv_at.const_rpow\n\n",
 "const_cpow":
 "theorem has_deriv_within_at.const_cpow (hf : has_deriv_within_at f f' s x) (h0 : c ≠ 0 ∨ f x ≠ 0) :\n    has_deriv_within_at (fun x => c ^ f x) (c ^ f x * log c * f') s x :=\n  (has_strict_deriv_at_const_cpow h0).has_deriv_at.comp_has_deriv_within_at x hf\n#align has_deriv_within_at.const_cpow has_deriv_within_at.const_cpow\n\n",
 "aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- A private lemma that rewrites the output of lemmas like `has_fderiv_at.cpow` to the form\nexpected by lemmas like `has_deriv_at.cpow`. -/\nprivate theorem aux :\n    («expr • » (g x * f x ^ (g x - 1)) ((1 : «expr →L[ ] » (exprℂ) (exprℂ) (exprℂ)).smul_right f') +\n          «expr • » (f x ^ g x * log (f x)) ((1 : «expr →L[ ] » (exprℂ) (exprℂ) (exprℂ)).smul_right g'))\n        1 =\n      g x * f x ^ (g x - 1) * f' + f x ^ g x * log (f x) * g' :=\n  by\n  simp only [Algebra.id.smul_eq_mul, one_mul, ContinuousLinearMap.one_apply, ContinuousLinearMap.smulRight_apply,\n    ContinuousLinearMap.add_apply, Pi.smul_apply, ContinuousLinearMap.coe_smul']\n#align aux aux\n\n"}