{"zero_completion":
 "@[simp]\ntheorem normed_add_group_hom.zero_completion : (0 : normed_add_group_hom G H).completion = 0 :=\n  normed_add_group_hom_completion_hom.map_zero\n#align normed_add_group_hom.zero_completion normed_add_group_hom.zero_completion\n\n",
 "norm_to_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem normed_add_comm_group.norm_to_compl (x : G) : «expr‖ ‖» (to_compl x) = «expr‖ ‖» x :=\n  completion.norm_coe x\n#align normed_add_comm_group.norm_to_compl normed_add_comm_group.norm_to_compl\n\n",
 "norm_completion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem normed_add_group_hom.norm_completion (f : normed_add_group_hom G H) : «expr‖ ‖» f.completion = «expr‖ ‖» f :=\n  by\n  apply f.completion.op_norm_eq_of_bounds (norm_nonneg _)\n  · intro x\n    apply completion.induction_on x\n    · apply is_closed_le\n      continuity\n    · intro g\n      simp [f.le_op_norm g]\n  · intro N N_nonneg hN\n    apply f.op_norm_le_bound N_nonneg\n    intro x\n    simpa using hN x\n#align normed_add_group_hom.norm_completion normed_add_group_hom.norm_completion\n\n",
 "ker_le_ker_completion":
 "theorem normed_add_group_hom.ker_le_ker_completion (f : normed_add_group_hom G H) :\n    (to_compl.comp <| incl f.ker).range ≤ f.completion.ker :=\n  by\n  intro a h\n  replace h : ∃ y : f.ker, to_compl (y : G) = a; · simpa using h\n  rcases h with ⟨⟨g, g_in : g ∈ f.ker⟩, rfl⟩\n  rw [f.mem_ker] at g_in\n  change f.completion (g : completion G) = 0\n  simp [normed_add_group_hom.mem_ker, f.completion_coe g, g_in, completion.coe_zero]\n#align normed_add_group_hom.ker_le_ker_completion normed_add_group_hom.ker_le_ker_completion\n\n",
 "ker_completion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem normed_add_group_hom.ker_completion {f : normed_add_group_hom G H} {C : exprℝ}\n    (h : f.surjective_on_with f.range C) :\n    (f.completion.ker : set <| completion G) = closure (to_compl.comp <| incl f.ker).range :=\n  by\n  rcases h.exists_pos with ⟨C', C'_pos, hC'⟩\n  apply le_antisymm\n  · intro hatg hatg_in\n    rw [seminormed_add_comm_group.mem_closure_iff]\n    intro ε ε_pos\n    have hCf : 0 ≤ C' * «expr‖ ‖» f := (zero_le_mul_left C'_pos).mpr (norm_nonneg f)\n    have ineq : 0 < 1 + C' * «expr‖ ‖» f := by linarith\n    set δ := ε / (1 + C' * «expr‖ ‖» f)\n    have δ_pos : δ > 0 := div_pos ε_pos ineq\n    obtain ⟨_, ⟨g : G, rfl⟩, hg : «expr‖ ‖» (hatg - g) < δ⟩ :=\n      seminormed_add_comm_group.mem_closure_iff.mp (completion.dense_inducing_coe.dense hatg) δ δ_pos\n    obtain ⟨g' : G, hgg' : f g' = f g, hfg : «expr‖ ‖» g' ≤ C' * «expr‖ ‖» (f g)⟩ := hC' (f g) (mem_range_self g)\n    have mem_ker : g - g' ∈ f.ker := by rw [f.mem_ker, map_sub, sub_eq_zero.mpr hgg'.symm]\n    have : «expr‖ ‖» (f g) ≤ «expr‖ ‖» f * «expr‖ ‖» (hatg - g)\n    calc\n      «expr‖ ‖» (f g) = «expr‖ ‖» (f.completion g) := by rw [f.completion_coe, completion.norm_coe]\n      _ = «expr‖ ‖» (f.completion g - 0) := by rw [sub_zero _]\n      _ = «expr‖ ‖» (f.completion g - f.completion hatg) := by rw [(f.completion.mem_ker _).mp hatg_in]\n      _ = «expr‖ ‖» (f.completion (g - hatg)) := by rw [map_sub]\n      _ ≤ «expr‖ ‖» f.completion * «expr‖ ‖» ((g : completion G) - hatg) := f.completion.le_op_norm _\n      _ = «expr‖ ‖» f * «expr‖ ‖» (hatg - g) := by rw [norm_sub_rev, f.norm_completion]\n      \n    have : «expr‖ ‖» (g' : completion G) ≤ C' * «expr‖ ‖» f * «expr‖ ‖» (hatg - g)\n    calc\n      «expr‖ ‖» (g' : completion G) = «expr‖ ‖» g' := completion.norm_coe _\n      _ ≤ C' * «expr‖ ‖» (f g) := hfg\n      _ ≤ C' * «expr‖ ‖» f * «expr‖ ‖» (hatg - g) := by\n        rw [mul_assoc]\n        exact (mul_le_mul_left C'_pos).mpr this\n      \n    refine' ⟨g - g', _, _⟩\n    · norm_cast\n      rw [normed_add_group_hom.comp_range]\n      apply add_subgroup.mem_map_of_mem\n      simp only [incl_range, mem_ker]\n    ·\n      calc\n        «expr‖ ‖» (hatg - (g - g')) = «expr‖ ‖» (hatg - g + g') := by abel\n        _ ≤ «expr‖ ‖» (hatg - g) + «expr‖ ‖» (g' : completion G) := norm_add_le _ _\n        _ < δ + C' * «expr‖ ‖» f * «expr‖ ‖» (hatg - g) := by linarith\n        _ ≤ δ + C' * «expr‖ ‖» f * δ := add_le_add_left (mul_le_mul_of_nonneg_left hg.le hCf) δ\n        _ = (1 + C' * «expr‖ ‖» f) * δ := by ring\n        _ = ε := mul_div_cancel' _ ineq.ne.symm\n        \n  · rw [← f.completion.is_closed_ker.closure_eq]\n    exact closure_mono f.ker_le_ker_completion\n#align normed_add_group_hom.ker_completion normed_add_group_hom.ker_completion\n\n",
 "extension_unique":
 "theorem normed_add_group_hom.extension_unique (f : normed_add_group_hom G H) {g : normed_add_group_hom (completion G) H}\n    (hg : ∀ v, f v = g v) : f.extension = g := by\n  ext v\n  rw [normed_add_group_hom.extension_coe_to_fun,\n    completion.extension_unique f.uniform_continuous g.uniform_continuous fun a => hg a]\n#align normed_add_group_hom.extension_unique normed_add_group_hom.extension_unique\n\n",
 "extension_def":
 "theorem normed_add_group_hom.extension_def (f : normed_add_group_hom G H) (v : G) :\n    f.extension v = completion.extension f v :=\n  rfl\n#align normed_add_group_hom.extension_def normed_add_group_hom.extension_def\n\n",
 "extension_coe_to_fun":
 "theorem normed_add_group_hom.extension_coe_to_fun (f : normed_add_group_hom G H) :\n    (f.extension : completion G → H) = completion.extension f :=\n  rfl\n#align normed_add_group_hom.extension_coe_to_fun normed_add_group_hom.extension_coe_to_fun\n\n",
 "extension_coe":
 "@[simp]\ntheorem normed_add_group_hom.extension_coe (f : normed_add_group_hom G H) (v : G) : f.extension v = f v :=\n  add_monoid_hom.extension_coe _ f.continuous _\n#align normed_add_group_hom.extension_coe normed_add_group_hom.extension_coe\n\n",
 "dense_range_to_compl":
 "theorem normed_add_comm_group.dense_range_to_compl : dense_range (to_compl : G → completion G) :=\n  completion.dense_inducing_coe.dense\n#align normed_add_comm_group.dense_range_to_compl normed_add_comm_group.dense_range_to_compl\n\n",
 "completion_to_compl":
 "@[simp]\ntheorem normed_add_group_hom.completion_to_compl (f : normed_add_group_hom G H) :\n    f.completion.comp to_compl = to_compl.comp f := by\n  ext x\n  change f.completion x = _\n  simpa\n#align normed_add_group_hom.completion_to_compl normed_add_group_hom.completion_to_compl\n\n",
 "completion_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem normed_add_group_hom.completion_sub (f g : normed_add_group_hom G H) :\n    (f - g).completion = f.completion - g.completion :=\n  map_sub (normed_add_group_hom_completion_hom : «expr →+ » (normed_add_group_hom G H) _) f g\n#align normed_add_group_hom.completion_sub normed_add_group_hom.completion_sub\n\n",
 "completion_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem normed_add_group_hom.completion_neg (f : normed_add_group_hom G H) : (-f).completion = -f.completion :=\n  map_neg (normed_add_group_hom_completion_hom : «expr →+ » (normed_add_group_hom G H) _) f\n#align normed_add_group_hom.completion_neg normed_add_group_hom.completion_neg\n\n",
 "completion_id":
 "@[simp]\ntheorem normed_add_group_hom.completion_id :\n    (normed_add_group_hom.id G).completion = normed_add_group_hom.id (completion G) :=\n  by\n  ext x\n  rw [normed_add_group_hom.completion_def, normed_add_group_hom.coe_id, completion.map_id]\n  rfl\n#align normed_add_group_hom.completion_id normed_add_group_hom.completion_id\n\n",
 "completion_def":
 "/-\nCopyright (c) 2021 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot\n-/\ntheorem normed_add_group_hom.completion_def (f : normed_add_group_hom G H) (x : completion G) :\n    f.completion x = completion.map f x :=\n  rfl\n#align normed_add_group_hom.completion_def normed_add_group_hom.completion_def\n\n",
 "completion_comp":
 "theorem normed_add_group_hom.completion_comp (f : normed_add_group_hom G H) (g : normed_add_group_hom H K) :\n    g.completion.comp f.completion = (g.comp f).completion :=\n  by\n  ext x\n  rw [normed_add_group_hom.coe_comp, normed_add_group_hom.completion_def, normed_add_group_hom.completion_coe_to_fun,\n    normed_add_group_hom.completion_coe_to_fun,\n    completion.map_comp (normed_add_group_hom.uniform_continuous _) (normed_add_group_hom.uniform_continuous _)]\n  rfl\n#align normed_add_group_hom.completion_comp normed_add_group_hom.completion_comp\n\n",
 "completion_coe_to_fun":
 "@[simp]\ntheorem normed_add_group_hom.completion_coe_to_fun (f : normed_add_group_hom G H) :\n    (f.completion : completion G → completion H) = completion.map f :=\n  by\n  ext x\n  exact normed_add_group_hom.completion_def f x\n#align normed_add_group_hom.completion_coe_to_fun normed_add_group_hom.completion_coe_to_fun\n\n",
 "completion_coe":
 "@[simp]\ntheorem normed_add_group_hom.completion_coe (f : normed_add_group_hom G H) (g : G) : f.completion g = f g :=\n  completion.map_coe f.uniform_continuous _\n#align normed_add_group_hom.completion_coe normed_add_group_hom.completion_coe\n\n",
 "completion_add":
 "theorem normed_add_group_hom.completion_add (f g : normed_add_group_hom G H) :\n    (f + g).completion = f.completion + g.completion :=\n  normed_add_group_hom_completion_hom.map_add f g\n#align normed_add_group_hom.completion_add normed_add_group_hom.completion_add\n\n"}