{"zero_lt_one_add_norm_sq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print zero_lt_one_add_norm_sq' /-\n@[to_additive zero_lt_one_add_norm_sq]\ntheorem zero_lt_one_add_norm_sq' (x : E) : 0 < 1 + «expr‖ ‖» x ^ 2 := by positivity\n#align zero_lt_one_add_norm_sq' zero_lt_one_add_norm_sq'\n#align zero_lt_one_add_norm_sq zero_lt_one_add_norm_sq\n-/\n\n",
 "uniformity_basis_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedCommGroup.uniformity_basis_dist /-\n@[to_additive]\ntheorem NormedCommGroup.uniformity_basis_dist :\n    ((uniformity) E).has_basis (fun ε : exprℝ => 0 < ε) fun ε => { p : E × E | «expr‖ ‖» (p.fst / p.snd) < ε } :=\n  by\n  convert Metric.uniformity_basis_dist\n  simp [dist_eq_norm_div]\n#align normed_comm_group.uniformity_basis_dist NormedCommGroup.uniformity_basis_dist\n#align normed_add_comm_group.uniformity_basis_dist NormedAddCommGroup.uniformity_basis_dist\n-/\n\n",
 "uniformContinuous_of_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print MonoidHomClass.uniformContinuous_of_bound /-\n@[to_additive]\ntheorem MonoidHomClass.uniformContinuous_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : exprℝ)\n    (h : ∀ x, «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» x) : UniformContinuous f :=\n  (MonoidHomClass.lipschitz_of_bound f C h).uniform_continuous\n#align monoid_hom_class.uniform_continuous_of_bound MonoidHomClass.uniformContinuous_of_bound\n#align add_monoid_hom_class.uniform_continuous_of_bound AddMonoidHomClass.uniformContinuous_of_bound\n-/\n\n",
 "uniformContinuous_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print uniformContinuous_norm' /-\n@[to_additive uniformContinuous_norm]\ntheorem uniformContinuous_norm' : UniformContinuous (norm : E → exprℝ) :=\n  lipschitzWith_one_norm'.uniform_continuous\n#align uniform_continuous_norm' uniformContinuous_norm'\n#align uniform_continuous_norm uniformContinuous_norm\n-/\n\n",
 "uniformContinuous_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print uniformContinuous_nnnorm' /-\n@[to_additive uniformContinuous_nnnorm]\ntheorem uniformContinuous_nnnorm' : UniformContinuous fun a : E => «expr‖ ‖₊» a :=\n  uniformContinuous_norm'.subtype_mk _\n#align uniform_continuous_nnnorm' uniformContinuous_nnnorm'\n#align uniform_continuous_nnnorm uniformContinuous_nnnorm\n-/\n\n",
 "uniformCauchySeqOn_iff_tendstoUniformlyOn_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n#print SeminormedGroup.uniformCauchySeqOn_iff_tendstoUniformlyOn_one /-\n@[to_additive]\ntheorem SeminormedGroup.uniformCauchySeqOn_iff_tendstoUniformlyOn_one {f : ι → κ → G} {s : Set κ} {l : Filter ι} :\n    UniformCauchySeqOn f l s ↔\n      TendstoUniformlyOn (fun n : ι × ι => fun z => f n.fst z / f n.snd z) 1 (filter.prod l l) s :=\n  by\n  rw [tendstoUniformlyOn_iff_tendstoUniformlyOnFilter, uniformCauchySeqOn_iff_uniformCauchySeqOnFilter,\n    SeminormedGroup.uniformCauchySeqOnFilter_iff_tendstoUniformlyOnFilter_one]\n#align seminormed_group.uniform_cauchy_seq_on_iff_tendsto_uniformly_on_one SeminormedGroup.uniformCauchySeqOn_iff_tendstoUniformlyOn_one\n#align seminormed_add_group.uniform_cauchy_seq_on_iff_tendsto_uniformly_on_zero SeminormedAddGroup.uniformCauchySeqOn_iff_tendstoUniformlyOn_zero\n-/\n\n",
 "uniformCauchySeqOnFilter_iff_tendstoUniformlyOnFilter_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n#print SeminormedGroup.uniformCauchySeqOnFilter_iff_tendstoUniformlyOnFilter_one /-\n@[to_additive]\ntheorem SeminormedGroup.uniformCauchySeqOnFilter_iff_tendstoUniformlyOnFilter_one {f : ι → κ → G} {l : Filter ι}\n    {l' : Filter κ} :\n    UniformCauchySeqOnFilter f l l' ↔\n      TendstoUniformlyOnFilter (fun n : ι × ι => fun z => f n.fst z / f n.snd z) 1 (filter.prod l l) l' :=\n  by\n  refine' ⟨fun hf u hu => _, fun hf u hu => _⟩\n  · obtain ⟨ε, hε, H⟩ := uniformity_basis_dist.mem_uniformity_iff.mp hu\n    refine'\n      (hf { p : G × G | dist p.fst p.snd < ε } <| dist_mem_uniformity hε).mono fun x hx =>\n        H 1 (f x.fst.fst x.snd / f x.fst.snd x.snd) _\n    simpa [dist_eq_norm_div, norm_div_rev] using hx\n  · obtain ⟨ε, hε, H⟩ := uniformity_basis_dist.mem_uniformity_iff.mp hu\n    refine'\n      (hf { p : G × G | dist p.fst p.snd < ε } <| dist_mem_uniformity hε).mono fun x hx =>\n        H (f x.fst.fst x.snd) (f x.fst.snd x.snd) _\n    simpa [dist_eq_norm_div, norm_div_rev] using hx\n#align seminormed_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_one SeminormedGroup.uniformCauchySeqOnFilter_iff_tendstoUniformlyOnFilter_one\n#align seminormed_add_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_zero SeminormedAddGroup.uniformCauchySeqOnFilter_iff_tendstoUniformlyOnFilter_zero\n-/\n\n",
 "to_nnreal_eq_nnnorm_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem to_nnreal_eq_nnnorm_of_nonneg (hr : 0 ≤ r) : r.to_nnreal = «expr‖ ‖₊» r :=\n  by\n  rw [Real.toNNReal_of_nonneg hr]\n  congr\n  rw [Real.norm_eq_abs, abs_of_nonneg hr]\n#align to_nnreal_eq_nnnorm_of_nonneg to_nnreal_eq_nnnorm_of_nonneg\n\n",
 "tendsto_one_iff_norm_tendsto_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_one_iff_norm_tendsto_one /-\n@[to_additive]\ntheorem tendsto_one_iff_norm_tendsto_one {f : α → E} {a : Filter α} :\n    Tendsto f a ((nhds) 1) ↔ Tendsto (fun e => «expr‖ ‖» (f e)) a ((nhds) 0) :=\n  by\n  rw [tendsto_iff_norm_tendsto_one]\n  simp only [div_one]\n#align tendsto_one_iff_norm_tendsto_one tendsto_one_iff_norm_tendsto_one\n#align tendsto_zero_iff_norm_tendsto_zero tendsto_zero_iff_norm_tendsto_zero\n-/\n\n",
 "tendsto_norm_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_norm_one /-\n@[to_additive]\ntheorem tendsto_norm_one : Tendsto (fun a : E => «expr‖ ‖» a) ((nhds) 1) ((nhds) 0) := by\n  simpa using tendsto_norm_div_self (1 : E)\n#align tendsto_norm_one tendsto_norm_one\n#align tendsto_norm_zero tendsto_norm_zero\n-/\n\n",
 "tendsto_norm_nhdsWithin_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n#print tendsto_norm_nhdsWithin_one /-\n@[to_additive]\ntheorem tendsto_norm_nhdsWithin_one : Tendsto (norm : E → exprℝ) (nhds_within.ne 1) (nhds_within.gt 0) :=\n  tendsto_norm_one.inf <| tendsto_principal_principal.2 fun x => norm_pos_iff''.2\n#align tendsto_norm_nhds_within_one tendsto_norm_nhdsWithin_one\n#align tendsto_norm_nhds_within_zero tendsto_norm_nhdsWithin_zero\n-/\n\n",
 "tendsto_norm_div_self_punctured_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n#print tendsto_norm_div_self_punctured_nhds /-\n@[to_additive]\ntheorem tendsto_norm_div_self_punctured_nhds (a : E) :\n    Tendsto (fun x => «expr‖ ‖» (x / a)) (nhds_within.ne a) (nhds_within.gt 0) :=\n  (tendsto_norm_div_self a).inf <| tendsto_principal_principal.2 fun x hx => norm_pos_iff''.2 <| div_ne_one.2 hx\n#align tendsto_norm_div_self_punctured_nhds tendsto_norm_div_self_punctured_nhds\n#align tendsto_norm_sub_self_punctured_nhds tendsto_norm_sub_self_punctured_nhds\n-/\n\n",
 "tendsto_norm_div_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_norm_div_self /-\n@[to_additive]\ntheorem tendsto_norm_div_self (x : E) : Tendsto (fun a => «expr‖ ‖» (a / x)) ((nhds) x) ((nhds) 0) := by\n  simpa [dist_eq_norm_div] using tendsto_id.dist (tendsto_const_nhds : tendsto (fun a => (x : E)) ((nhds) x) _)\n#align tendsto_norm_div_self tendsto_norm_div_self\n#align tendsto_norm_sub_self tendsto_norm_sub_self\n-/\n\n",
 "tendsto_norm_cocompact_atTop'":
 "#print tendsto_norm_cocompact_atTop' /-\n@[to_additive tendsto_norm_cocompact_atTop]\ntheorem tendsto_norm_cocompact_atTop' [ProperSpace E] : Tendsto norm (cocompact E) atTop := by\n  simpa only [dist_one_right] using tendsto_dist_right_cocompact_atTop (1 : E)\n#align tendsto_norm_cocompact_at_top' tendsto_norm_cocompact_atTop'\n#align tendsto_norm_cocompact_at_top tendsto_norm_cocompact_atTop\n-/\n\n",
 "tendsto_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print tendsto_norm' /-\n@[to_additive tendsto_norm]\ntheorem tendsto_norm' {x : E} : Tendsto (fun a => «expr‖ ‖» a) ((nhds) x) ((nhds) («expr‖ ‖» x)) := by\n  simpa using tendsto_id.dist (tendsto_const_nhds : tendsto (fun a => (1 : E)) _ _)\n#align tendsto_norm' tendsto_norm'\n#align tendsto_norm tendsto_norm\n-/\n\n",
 "tendsto_nhds_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedCommGroup.tendsto_nhds_one /-\n@[to_additive]\ntheorem NormedCommGroup.tendsto_nhds_one {f : α → E} {l : Filter α} :\n    Tendsto f l ((nhds) 1) ↔\n      ∀ ε > 0,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          («expr‖ ‖» (f x) < ε) :=\n  Metric.tendsto_nhds.trans <| by simp only [dist_one_right]\n#align normed_comm_group.tendsto_nhds_one NormedCommGroup.tendsto_nhds_one\n#align normed_add_comm_group.tendsto_nhds_zero NormedAddCommGroup.tendsto_nhds_zero\n-/\n\n",
 "tendsto_nhds_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedCommGroup.tendsto_nhds_nhds /-\n@[to_additive]\ntheorem NormedCommGroup.tendsto_nhds_nhds {f : E → F} {x : E} {y : F} :\n    Tendsto f ((nhds) x) ((nhds) y) ↔ ∀ ε > 0, ∃ δ > 0, ∀ x', «expr‖ ‖» (x' / x) < δ → «expr‖ ‖» (f x' / y) < ε := by\n  simp_rw [Metric.tendsto_nhds_nhds, dist_eq_norm_div]\n#align normed_comm_group.tendsto_nhds_nhds NormedCommGroup.tendsto_nhds_nhds\n#align normed_add_comm_group.tendsto_nhds_nhds NormedAddCommGroup.tendsto_nhds_nhds\n-/\n\n",
 "tendsto_inv_cobounded":
 "#print Filter.tendsto_inv_cobounded /-\n/-- In a (semi)normed group, inversion `x ↦ x⁻¹` tends to infinity at infinity. TODO: use\n`bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`. -/\n@[to_additive\n      \"In a (semi)normed group, negation `x ↦ -x` tends to infinity at infinity. TODO: use\\n`bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`.\"]\ntheorem Filter.tendsto_inv_cobounded : Tendsto (has_inv.inv : E → E) (comap norm atTop) (comap norm atTop) := by\n  simpa only [norm_inv', tendsto_comap_iff, (· ∘ ·)] using tendsto_comap\n#align filter.tendsto_inv_cobounded Filter.tendsto_inv_cobounded\n#align filter.tendsto_neg_cobounded Filter.tendsto_neg_cobounded\n-/\n\n",
 "tendsto_iff_norm_tendsto_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_iff_norm_tendsto_one /-\n@[to_additive]\ntheorem tendsto_iff_norm_tendsto_one {f : α → E} {a : Filter α} {b : E} :\n    Tendsto f a ((nhds) b) ↔ Tendsto (fun e => «expr‖ ‖» (f e / b)) a ((nhds) 0) :=\n  by\n  convert tendsto_iff_dist_tendsto_zero\n  simp [dist_eq_norm_div]\n#align tendsto_iff_norm_tendsto_one tendsto_iff_norm_tendsto_one\n#align tendsto_iff_norm_tendsto_zero tendsto_iff_norm_tendsto_zero\n-/\n\n",
 "tendstoUniformlyOn_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print SeminormedGroup.tendstoUniformlyOn_one /-\n@[to_additive]\ntheorem SeminormedGroup.tendstoUniformlyOn_one {f : ι → κ → G} {s : Set κ} {l : Filter ι} :\n    TendstoUniformlyOn f 1 l s ↔\n      ∀ ε > 0,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (∀ x ∈ s, «expr‖ ‖» (f i x) < ε) :=\n  by simp_rw [tendsto_uniformly_on_iff, Pi.one_apply, dist_one_left]\n#align seminormed_group.tendsto_uniformly_on_one SeminormedGroup.tendstoUniformlyOn_one\n#align seminormed_add_group.tendsto_uniformly_on_zero SeminormedAddGroup.tendstoUniformlyOn_zero\n-/\n\n",
 "sum_norm_apply_le_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Pi.sum_norm_apply_le_norm' /-\n/-- The $L^1$ norm is less than the $L^\\infty$ norm scaled by the cardinality. -/\n@[to_additive Pi.sum_norm_apply_le_norm \"The $L^1$ norm is less than the $L^\\\\infty$ norm scaled by\\nthe cardinality.\"]\ntheorem Pi.sum_norm_apply_le_norm' :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («expr‖ ‖» (f i)) ≤\n      «expr • » (Fintype.card ι) («expr‖ ‖» f) :=\n  Finset.sum_le_card_nsmul _ _ _ fun i hi => norm_le_pi_norm' _ i\n#align pi.sum_norm_apply_le_norm' Pi.sum_norm_apply_le_norm'\n#align pi.sum_norm_apply_le_norm Pi.sum_norm_apply_le_norm\n-/\n\n",
 "sum_nnnorm_apply_le_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print Pi.sum_nnnorm_apply_le_nnnorm' /-\n/-- The $L^1$ norm is less than the $L^\\infty$ norm scaled by the cardinality. -/\n@[to_additive Pi.sum_nnnorm_apply_le_nnnorm\n      \"The $L^1$ norm is less than the $L^\\\\infty$ norm scaled\\nby the cardinality.\"]\ntheorem Pi.sum_nnnorm_apply_le_nnnorm' :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («expr‖ ‖₊» (f i)) ≤\n      «expr • » (Fintype.card ι) («expr‖ ‖₊» f) :=\n  NNReal.coe_sum.trans_le <| Pi.sum_norm_apply_le_norm' _\n#align pi.sum_nnnorm_apply_le_nnnorm' Pi.sum_nnnorm_apply_le_nnnorm'\n#align pi.sum_nnnorm_apply_le_nnnorm Pi.sum_nnnorm_apply_le_nnnorm\n-/\n\n",
 "squeeze_one_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print squeeze_one_norm' /-\n/-- Special case of the sandwich theorem: if the norm of `f` is eventually bounded by a real\nfunction `a` which tends to `0`, then `f` tends to `1`. In this pair of lemmas (`squeeze_one_norm'`\nand `squeeze_one_norm`), following a convention of similar lemmas in `topology.metric_space.basic`\nand `topology.algebra.order`, the `'` version is phrased using \"eventually\" and the non-`'` version\nis phrased absolutely. -/\n@[to_additive\n      \"Special case of the sandwich theorem: if the norm of `f` is eventually bounded by a\\nreal function `a` which tends to `0`, then `f` tends to `1`. In this pair of lemmas\\n(`squeeze_zero_norm'` and `squeeze_zero_norm`), following a convention of similar lemmas in\\n`topology.metric_space.basic` and `topology.algebra.order`, the `'` version is phrased using\\n\\\"eventually\\\" and the non-`'` version is phrased absolutely.\"]\ntheorem squeeze_one_norm' {f : α → E} {a : α → exprℝ} {t₀ : Filter α}\n    (h :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" t₀\n        («expr‖ ‖» (f n) ≤ a n))\n    (h' : Tendsto a t₀ ((nhds) 0)) : Tendsto f t₀ ((nhds) 1) :=\n  tendsto_one_iff_norm_tendsto_one.2 <| squeeze_zero' (eventually_of_forall fun n => norm_nonneg' _) h h'\n#align squeeze_one_norm' squeeze_one_norm'\n#align squeeze_zero_norm' squeeze_zero_norm'\n-/\n\n",
 "squeeze_one_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print squeeze_one_norm /-\n/-- Special case of the sandwich theorem: if the norm of `f` is bounded by a real function `a` which\ntends to `0`, then `f` tends to `1`. -/\n@[to_additive\n      \"Special case of the sandwich theorem: if the norm of `f` is bounded by a real\\nfunction `a` which tends to `0`, then `f` tends to `0`.\"]\ntheorem squeeze_one_norm {f : α → E} {a : α → exprℝ} {t₀ : Filter α} (h : ∀ n, «expr‖ ‖» (f n) ≤ a n) :\n    Tendsto a t₀ ((nhds) 0) → Tendsto f t₀ ((nhds) 1) :=\n  squeeze_one_norm' <| eventually_of_forall h\n#align squeeze_one_norm squeeze_one_norm\n#align squeeze_zero_norm squeeze_zero_norm\n-/\n\n",
 "smul_closedBall''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_closedBall'' /-\n@[to_additive]\ntheorem smul_closedBall'' : «expr • » a (closedBall b r) = closedBall («expr • » a b) r :=\n  by\n  ext\n  simp [mem_closed_ball, Set.mem_smul_set, dist_eq_norm_div, div_eq_inv_mul, ← eq_inv_mul_iff_mul_eq, mul_assoc]\n#align smul_closed_ball'' smul_closedBall''\n#align vadd_closed_ball'' vadd_closedBall''\n-/\n\n",
 "smul_ball''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_ball'' /-\n@[to_additive]\ntheorem smul_ball'' : «expr • » a (ball b r) = ball («expr • » a b) r :=\n  by\n  ext\n  simp [mem_ball, Set.mem_smul_set, dist_eq_norm_div, div_eq_inv_mul, ← eq_inv_mul_iff_mul_eq, mul_assoc]\n#align smul_ball'' smul_ball''\n#align vadd_ball'' vadd_ball''\n-/\n\n",
 "preimage_mul_sphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print preimage_mul_sphere /-\n@[simp, to_additive]\ntheorem preimage_mul_sphere (a b : E) (r : exprℝ) : «expr ⁻¹' » ((· * ·) b) (sphere a r) = sphere (a / b) r :=\n  by\n  ext c\n  simp only [Set.mem_preimage, mem_sphere_iff_norm', div_div_eq_mul_div, mul_comm]\n#align preimage_mul_sphere preimage_mul_sphere\n#align preimage_add_sphere preimage_add_sphere\n-/\n\n",
 "preimage_mul_closedBall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print preimage_mul_closedBall /-\n@[simp, to_additive]\ntheorem preimage_mul_closedBall (a b : E) (r : exprℝ) :\n    «expr ⁻¹' » ((· * ·) b) (closedBall a r) = closedBall (a / b) r :=\n  by\n  ext c\n  simp only [dist_eq_norm_div, Set.mem_preimage, mem_closed_ball, div_div_eq_mul_div, mul_comm]\n#align preimage_mul_closed_ball preimage_mul_closedBall\n#align preimage_add_closed_ball preimage_add_closedBall\n-/\n\n",
 "preimage_mul_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print preimage_mul_ball /-\n@[simp, to_additive]\ntheorem preimage_mul_ball (a b : E) (r : exprℝ) : «expr ⁻¹' » ((· * ·) b) (ball a r) = ball (a / b) r :=\n  by\n  ext c\n  simp only [dist_eq_norm_div, Set.mem_preimage, mem_ball, div_div_eq_mul_div, mul_comm]\n#align preimage_mul_ball preimage_mul_ball\n#align preimage_add_ball preimage_add_ball\n-/\n\n",
 "pow_mem_closedBall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print pow_mem_closedBall /-\n@[to_additive]\ntheorem pow_mem_closedBall {n : ℕ} (h : a ∈ closedBall b r) : a ^ n ∈ closedBall (b ^ n) («expr • » n r) :=\n  by\n  simp only [mem_closed_ball, dist_eq_norm_div, ← div_pow] at h⊢\n  refine' (norm_pow_le_mul_norm n (a / b)).trans _\n  simpa only [nsmul_eq_mul] using mul_le_mul_of_nonneg_left h n.cast_nonneg\n#align pow_mem_closed_ball pow_mem_closedBall\n#align nsmul_mem_closed_ball nsmul_mem_closedBall\n-/\n\n",
 "pow_mem_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print pow_mem_ball /-\n@[to_additive]\ntheorem pow_mem_ball {n : ℕ} (hn : 0 < n) (h : a ∈ ball b r) : a ^ n ∈ ball (b ^ n) («expr • » n r) :=\n  by\n  simp only [mem_ball, dist_eq_norm_div, ← div_pow] at h⊢\n  refine' lt_of_le_of_lt (norm_pow_le_mul_norm n (a / b)) _\n  replace hn : 0 < (n : exprℝ);\n  · norm_cast\n    assumption\n  rw [nsmul_eq_mul]\n  nlinarith\n#align pow_mem_ball pow_mem_ball\n#align nsmul_mem_ball nsmul_mem_ball\n-/\n\n",
 "pi_norm_lt_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print pi_norm_lt_iff' /-\n/-- The seminorm of an element in a product space is `< r` if and only if the norm of each\ncomponent is. -/\n@[to_additive pi_norm_lt_iff\n      \"The seminorm of an element in a product space is `< r` if and only if\\nthe norm of each component is.\"]\ntheorem pi_norm_lt_iff' (hr : 0 < r) : «expr‖ ‖» x < r ↔ ∀ i, «expr‖ ‖» (x i) < r := by\n  simp only [← dist_one_right, dist_pi_lt_iff hr, Pi.one_apply]\n#align pi_norm_lt_iff' pi_norm_lt_iff'\n#align pi_norm_lt_iff pi_norm_lt_iff\n-/\n\n",
 "pi_norm_le_iff_of_nonneg'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print pi_norm_le_iff_of_nonneg' /-\n/-- The seminorm of an element in a product space is `≤ r` if and only if the norm of each\ncomponent is. -/\n@[to_additive pi_norm_le_iff_of_nonneg\n      \"The seminorm of an element in a product space is `≤ r` if\\nand only if the norm of each component is.\"]\ntheorem pi_norm_le_iff_of_nonneg' (hr : 0 ≤ r) : «expr‖ ‖» x ≤ r ↔ ∀ i, «expr‖ ‖» (x i) ≤ r := by\n  simp only [← dist_one_right, dist_pi_le_iff hr, Pi.one_apply]\n#align pi_norm_le_iff_of_nonneg' pi_norm_le_iff_of_nonneg'\n#align pi_norm_le_iff_of_nonneg pi_norm_le_iff_of_nonneg\n-/\n\n",
 "pi_norm_le_iff_of_nonempty'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print pi_norm_le_iff_of_nonempty' /-\n@[to_additive pi_norm_le_iff_of_nonempty]\ntheorem pi_norm_le_iff_of_nonempty' [Nonempty ι] : «expr‖ ‖» f ≤ r ↔ ∀ b, «expr‖ ‖» (f b) ≤ r :=\n  by\n  by_cases hr : 0 ≤ r\n  · exact pi_norm_le_iff_of_nonneg' hr\n  ·\n    exact\n      iff_of_false (fun h => hr <| (norm_nonneg' _).trans h) fun h =>\n        hr <| (norm_nonneg' _).trans <| h <| Classical.arbitrary _\n#align pi_norm_le_iff_of_nonempty' pi_norm_le_iff_of_nonempty'\n#align pi_norm_le_iff_of_nonempty pi_norm_le_iff_of_nonempty\n-/\n\n",
 "pi_norm_const_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print pi_norm_const_le' /-\n@[to_additive pi_norm_const_le]\ntheorem pi_norm_const_le' (a : E) : («expr‖ ‖» fun _ : ι => a) ≤ «expr‖ ‖» a :=\n  (pi_norm_le_iff_of_nonneg' <| norm_nonneg' _).2 fun _ => le_rfl\n#align pi_norm_const_le' pi_norm_const_le'\n#align pi_norm_const_le pi_norm_const_le\n-/\n\n",
 "pi_norm_const'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print pi_norm_const' /-\n@[simp, to_additive pi_norm_const]\ntheorem pi_norm_const' [Nonempty ι] (a : E) : («expr‖ ‖» fun i : ι => a) = «expr‖ ‖» a := by\n  simpa only [← dist_one_right] using dist_pi_const a 1\n#align pi_norm_const' pi_norm_const'\n#align pi_norm_const pi_norm_const\n-/\n\n",
 "pi_nnnorm_lt_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print pi_nnnorm_lt_iff' /-\n@[to_additive pi_nnnorm_lt_iff]\ntheorem pi_nnnorm_lt_iff' {r : nnreal} (hr : 0 < r) : «expr‖ ‖₊» x < r ↔ ∀ i, «expr‖ ‖₊» (x i) < r :=\n  pi_norm_lt_iff' hr\n#align pi_nnnorm_lt_iff' pi_nnnorm_lt_iff'\n#align pi_nnnorm_lt_iff pi_nnnorm_lt_iff\n-/\n\n",
 "pi_nnnorm_le_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print pi_nnnorm_le_iff' /-\n@[to_additive pi_nnnorm_le_iff]\ntheorem pi_nnnorm_le_iff' {r : nnreal} : «expr‖ ‖₊» x ≤ r ↔ ∀ i, «expr‖ ‖₊» (x i) ≤ r :=\n  pi_norm_le_iff_of_nonneg' r.coe_nonneg\n#align pi_nnnorm_le_iff' pi_nnnorm_le_iff'\n#align pi_nnnorm_le_iff pi_nnnorm_le_iff\n-/\n\n",
 "pi_nnnorm_const_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print pi_nnnorm_const_le' /-\n@[to_additive pi_nnnorm_const_le]\ntheorem pi_nnnorm_const_le' (a : E) : («expr‖ ‖₊» fun _ : ι => a) ≤ «expr‖ ‖₊» a :=\n  pi_norm_const_le' _\n#align pi_nnnorm_const_le' pi_nnnorm_const_le'\n#align pi_nnnorm_const_le pi_nnnorm_const_le\n-/\n\n",
 "pi_nnnorm_const'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print pi_nnnorm_const' /-\n@[simp, to_additive pi_nnnorm_const]\ntheorem pi_nnnorm_const' [Nonempty ι] (a : E) : («expr‖ ‖₊» fun i : ι => a) = «expr‖ ‖₊» a :=\n  NNReal.eq <| pi_norm_const' a\n#align pi_nnnorm_const' pi_nnnorm_const'\n#align pi_nnnorm_const pi_nnnorm_const\n-/\n\n",
 "op_one_isBoundedUnder_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.op_one_isBoundedUnder_le' /-\n/-- A helper lemma used to prove that the (scalar or usual) product of a function that tends to one\nand a bounded function tends to one. This lemma is formulated for any binary operation\n`op : E → F → G` with an estimate `‖op x y‖ ≤ A * ‖x‖ * ‖y‖` for some constant A instead of\nmultiplication so that it can be applied to `(*)`, `flip (*)`, `(•)`, and `flip (•)`. -/\n@[to_additive\n      \"A helper lemma used to prove that the (scalar or usual) product of a function that\\ntends to zero and a bounded function tends to zero. This lemma is formulated for any binary\\noperation `op : E → F → G` with an estimate `‖op x y‖ ≤ A * ‖x‖ * ‖y‖` for some constant A instead\\nof multiplication so that it can be applied to `(*)`, `flip (*)`, `(•)`, and `flip (•)`.\"]\ntheorem Filter.Tendsto.op_one_isBoundedUnder_le' {f : α → E} {g : α → F} {l : Filter α} (hf : Tendsto f l ((nhds) 1))\n    (hg : IsBoundedUnder (· ≤ ·) l (norm ∘ g)) (op : E → F → G)\n    (h_op : ∃ A, ∀ x y, «expr‖ ‖» (op x y) ≤ A * «expr‖ ‖» x * «expr‖ ‖» y) :\n    Tendsto (fun x => op (f x) (g x)) l ((nhds) 1) :=\n  by\n  cases' h_op with A h_op\n  rcases hg with ⟨C, hC⟩; rw [eventually_map] at hC\n  rw [NormedCommGroup.tendsto_nhds_one] at hf⊢\n  intro ε ε₀\n  rcases exists_pos_mul_lt ε₀ (A * C) with ⟨δ, δ₀, hδ⟩\n  filter_upwards [hf δ δ₀, hC]with i hf hg\n  refine' (h_op _ _).trans_lt _\n  cases' le_total A 0 with hA hA\n  ·\n    exact\n      (mul_nonpos_of_nonpos_of_nonneg (mul_nonpos_of_nonpos_of_nonneg hA <| norm_nonneg' _) <| norm_nonneg' _).trans_lt\n        ε₀\n  calc\n    A * «expr‖ ‖» (f i) * «expr‖ ‖» (g i) ≤ A * δ * C :=\n      mul_le_mul (mul_le_mul_of_nonneg_left hf.le hA) hg (norm_nonneg' _) (mul_nonneg hA δ₀.le)\n    _ = A * C * δ := (mul_right_comm _ _ _)\n    _ < ε := hδ\n    \n#align filter.tendsto.op_one_is_bounded_under_le' Filter.Tendsto.op_one_isBoundedUnder_le'\n#align filter.tendsto.op_zero_is_bounded_under_le' Filter.Tendsto.op_zero_isBoundedUnder_le'\n-/\n\n",
 "op_one_isBoundedUnder_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.op_one_isBoundedUnder_le /-\n/-- A helper lemma used to prove that the (scalar or usual) product of a function that tends to one\nand a bounded function tends to one. This lemma is formulated for any binary operation\n`op : E → F → G` with an estimate `‖op x y‖ ≤ ‖x‖ * ‖y‖` instead of multiplication so that it\ncan be applied to `(*)`, `flip (*)`, `(•)`, and `flip (•)`. -/\n@[to_additive\n      \"A helper lemma used to prove that the (scalar or usual) product of a function that\\ntends to zero and a bounded function tends to zero. This lemma is formulated for any binary\\noperation `op : E → F → G` with an estimate `‖op x y‖ ≤ ‖x‖ * ‖y‖` instead of multiplication so that\\nit can be applied to `(*)`, `flip (*)`, `(•)`, and `flip (•)`.\"]\ntheorem Filter.Tendsto.op_one_isBoundedUnder_le {f : α → E} {g : α → F} {l : Filter α} (hf : Tendsto f l ((nhds) 1))\n    (hg : IsBoundedUnder (· ≤ ·) l (norm ∘ g)) (op : E → F → G)\n    (h_op : ∀ x y, «expr‖ ‖» (op x y) ≤ «expr‖ ‖» x * «expr‖ ‖» y) : Tendsto (fun x => op (f x) (g x)) l ((nhds) 1) :=\n  hf.op_one_is_bounded_under_le' hg op ⟨1, fun x y => (one_mul («expr‖ ‖» x)).symm ▸ h_op x y⟩\n#align filter.tendsto.op_one_is_bounded_under_le Filter.Tendsto.op_one_isBoundedUnder_le\n#align filter.tendsto.op_zero_is_bounded_under_le Filter.Tendsto.op_zero_isBoundedUnder_le\n-/\n\n",
 "of_real_le_ennnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem of_real_le_ennnorm (r : exprℝ) : ENNReal.ofReal r ≤ «expr‖ ‖₊» r :=\n  by\n  obtain hr | hr := le_total 0 r\n  · exact (Real.ennnorm_eq_ofReal hr).ge\n  · rw [ENNReal.ofReal_eq_zero.2 hr]\n    exact bot_le\n#align of_real_le_ennnorm of_real_le_ennnorm\n\n",
 "ofReal_norm_eq_coe_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print ofReal_norm_eq_coe_nnnorm' /-\n@[to_additive ofReal_norm_eq_coe_nnnorm]\ntheorem ofReal_norm_eq_coe_nnnorm' (a : E) : ENNReal.ofReal («expr‖ ‖» a) = «expr‖ ‖₊» a :=\n  ENNReal.ofReal_eq_coe_nnreal _\n#align of_real_norm_eq_coe_nnnorm' ofReal_norm_eq_coe_nnnorm'\n#align of_real_norm_eq_coe_nnnorm ofReal_norm_eq_coe_nnnorm\n-/\n\n",
 "norm_zpow_le_mul_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_zpow_le_mul_norm /-\n-- Now that we've installed the norm on `ℤ`,\n-- we can state some lemmas about `zsmul`.\n@[to_additive norm_zsmul_le]\ntheorem norm_zpow_le_mul_norm (n : ℤ) (a : α) : «expr‖ ‖» (a ^ n) ≤ «expr‖ ‖» n * «expr‖ ‖» a := by\n  rcases n.eq_coe_or_neg with ⟨n, rfl | rfl⟩ <;> simpa using norm_pow_le_mul_norm n a\n#align norm_zpow_le_mul_norm norm_zpow_le_mul_norm\n#align norm_zsmul_le norm_zsmul_le\n-/\n\n",
 "norm_up":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem norm_up (x : E) : «expr‖ ‖» (ULift.up x) = «expr‖ ‖» x :=\n  rfl\n#align norm_up norm_up\n\n",
 "norm_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_unop [SeminormedAddGroup E] (a : «expr ᵐᵒᵖ» E) : «expr‖ ‖» (MulOpposite.unop a) = «expr‖ ‖» a :=\n  rfl\n#align norm_unop norm_unop\n\n",
 "norm_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem norm_two : «expr‖ ‖» (2 : exprℝ) = 2 :=\n  abs_of_pos zero_lt_two\n#align norm_two norm_two\n\n",
 "norm_toNNReal'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print norm_toNNReal' /-\n@[to_additive norm_toNNReal]\ntheorem norm_toNNReal' : («expr‖ ‖» a).to_nnreal = «expr‖ ‖₊» a :=\n  @Real.toNNReal_coe («expr‖ ‖₊» a)\n#align norm_to_nnreal' norm_toNNReal'\n#align norm_to_nnreal norm_toNNReal\n-/\n\n",
 "norm_toMul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_toMul /-\n@[simp]\ntheorem norm_toMul (x) : «expr‖ ‖» (toMul x : E) = «expr‖ ‖» x :=\n  rfl\n#align norm_to_mul norm_toMul\n-/\n\n",
 "norm_toDual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_toDual /-\n@[simp]\ntheorem norm_toDual (x : E) : «expr‖ ‖» (toDual x) = «expr‖ ‖» x :=\n  rfl\n#align norm_to_dual norm_toDual\n-/\n\n",
 "norm_toAdd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_toAdd /-\n@[simp]\ntheorem norm_toAdd (x) : «expr‖ ‖» (toAdd x : E) = «expr‖ ‖» x :=\n  rfl\n#align norm_to_add norm_toAdd\n-/\n\n",
 "norm_sum_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_sum_le /-\ntheorem norm_sum_le {E} [SeminormedAddCommGroup E] (s : Finset ι) (f : ι → E) :\n    «expr‖ ‖»\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i)) :=\n  s.le_sum_of_subadditive norm norm_zero norm_add_le f\n#align norm_sum_le norm_sum_le\n-/\n\n",
 "norm_sub_norm_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_sub_norm_le' /-\n@[to_additive norm_sub_norm_le]\ntheorem norm_sub_norm_le' (a b : E) : «expr‖ ‖» a - «expr‖ ‖» b ≤ «expr‖ ‖» (a / b) :=\n  (le_abs_self _).trans (abs_norm_sub_norm_le' a b)\n#align norm_sub_norm_le' norm_sub_norm_le'\n#align norm_sub_norm_le norm_sub_norm_le\n-/\n\n",
 "norm_snd_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_snd_le /-\ntheorem norm_snd_le (x : E × F) : «expr‖ ‖» x.2 ≤ «expr‖ ‖» x :=\n  le_max_right _ _\n#align norm_snd_le norm_snd_le\n-/\n\n",
 "norm_prod_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print norm_prod_le_of_le /-\n@[to_additive]\ntheorem norm_prod_le_of_le (s : Finset ι) {f : ι → E} {n : ι → exprℝ} (h : ∀ b ∈ s, «expr‖ ‖» (f b) ≤ n b) :\n    «expr‖ ‖»\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f b)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (n b) :=\n  (norm_prod_le s f).trans <| Finset.sum_le_sum h\n#align norm_prod_le_of_le norm_prod_le_of_le\n#align norm_sum_le_of_le norm_sum_le_of_le\n-/\n\n",
 "norm_prod_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_prod_le_iff /-\ntheorem norm_prod_le_iff : «expr‖ ‖» x ≤ r ↔ «expr‖ ‖» x.1 ≤ r ∧ «expr‖ ‖» x.2 ≤ r :=\n  max_le_iff\n#align norm_prod_le_iff norm_prod_le_iff\n-/\n\n",
 "norm_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_prod_le /-\n@[to_additive]\ntheorem norm_prod_le (s : Finset ι) (f : ι → E) :\n    «expr‖ ‖»\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖» (f i)) :=\n  by\n  rw [← Multiplicative.ofAdd_le, ofAdd_sum]\n  refine' Finset.le_prod_of_submultiplicative (Multiplicative.ofAdd ∘ norm) _ (fun x y => _) _ _\n  · simp only [comp_app, norm_one', ofAdd_zero]\n  · exact norm_mul_le' _ _\n#align norm_prod_le norm_prod_le\n#align norm_sum_le norm_sum_le\n-/\n\n",
 "norm_pow_le_mul_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_pow_le_mul_norm /-\n@[to_additive norm_nsmul_le]\ntheorem norm_pow_le_mul_norm (n : ℕ) (a : E) : «expr‖ ‖» (a ^ n) ≤ n * «expr‖ ‖» a :=\n  by\n  induction' n with n ih; · simp\n  simpa only [pow_succ', Nat.cast_succ, add_mul, one_mul] using norm_mul_le_of_le ih le_rfl\n#align norm_pow_le_mul_norm norm_pow_le_mul_norm\n#align norm_nsmul_le norm_nsmul_le\n-/\n\n",
 "norm_pos_iff'''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_pos_iff''' /-\n@[to_additive norm_pos_iff']\ntheorem norm_pos_iff''' [T0Space E] {a : E} : 0 < «expr‖ ‖» a ↔ a ≠ 1 := by rw [← not_le, norm_le_zero_iff''']\n#align norm_pos_iff''' norm_pos_iff'''\n#align norm_pos_iff' norm_pos_iff'\n-/\n\n",
 "norm_pos_iff''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_pos_iff'' /-\n@[simp, to_additive norm_pos_iff]\ntheorem norm_pos_iff'' : 0 < «expr‖ ‖» a ↔ a ≠ 1 :=\n  norm_pos_iff'''\n#align norm_pos_iff'' norm_pos_iff''\n#align norm_pos_iff norm_pos_iff\n-/\n\n",
 "norm_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_op [SeminormedAddGroup E] (a : E) : «expr‖ ‖» (MulOpposite.op a) = «expr‖ ‖» a :=\n  rfl\n#align norm_op norm_op\n\n",
 "norm_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_one' /-\n@[simp, to_additive norm_zero]\ntheorem norm_one' : «expr‖ ‖» (1 : E) = 0 := by rw [← dist_one_right, dist_self]\n#align norm_one' norm_one'\n#align norm_zero norm_zero\n-/\n\n",
 "norm_of_subsingleton'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_of_subsingleton' /-\n@[nontriviality, to_additive norm_of_subsingleton]\ntheorem norm_of_subsingleton' [subsingleton E] (a : E) : «expr‖ ‖» a = 0 := by rw [subsingleton.elim a 1, norm_one']\n#align norm_of_subsingleton' norm_of_subsingleton'\n#align norm_of_subsingleton norm_of_subsingleton\n-/\n\n",
 "norm_of_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_of_nonpos (hr : r ≤ 0) : «expr‖ ‖» r = -r :=\n  abs_of_nonpos hr\n#align norm_of_nonpos norm_of_nonpos\n\n",
 "norm_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_of_nonneg (hr : 0 ≤ r) : «expr‖ ‖» r = r :=\n  abs_of_nonneg hr\n#align norm_of_nonneg norm_of_nonneg\n\n",
 "norm_ofMul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_ofMul /-\n@[simp]\ntheorem norm_ofMul (x : E) : «expr‖ ‖» (ofMul x) = «expr‖ ‖» x :=\n  rfl\n#align norm_of_mul norm_ofMul\n-/\n\n",
 "norm_ofDual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_ofDual /-\n@[simp]\ntheorem norm_ofDual (x : «expr ᵒᵈ» E) : «expr‖ ‖» (ofDual x) = «expr‖ ‖» x :=\n  rfl\n#align norm_of_dual norm_ofDual\n-/\n\n",
 "norm_ofAdd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_ofAdd /-\n@[simp]\ntheorem norm_ofAdd (x : E) : «expr‖ ‖» (ofAdd x) = «expr‖ ‖» x :=\n  rfl\n#align norm_of_add norm_ofAdd\n-/\n\n",
 "norm_nonneg'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_nonneg' /-\n@[simp, to_additive norm_nonneg]\ntheorem norm_nonneg' (a : E) : 0 ≤ «expr‖ ‖» a :=\n  by\n  rw [← dist_one_right]\n  exact dist_nonneg\n#align norm_nonneg' norm_nonneg'\n#align norm_nonneg norm_nonneg\n-/\n\n",
 "norm_ne_zero_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_ne_zero_iff' /-\n@[to_additive norm_ne_zero_iff]\ntheorem norm_ne_zero_iff' : «expr‖ ‖» a ≠ 0 ↔ a ≠ 1 :=\n  norm_eq_zero''.not\n#align norm_ne_zero_iff' norm_ne_zero_iff'\n#align norm_ne_zero_iff norm_ne_zero_iff\n-/\n\n",
 "norm_mul₃_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_mul₃_le /-\n@[to_additive norm_add₃_le]\ntheorem norm_mul₃_le (a b c : E) : «expr‖ ‖» (a * b * c) ≤ «expr‖ ‖» a + «expr‖ ‖» b + «expr‖ ‖» c :=\n  norm_mul_le_of_le (norm_mul_le' _ _) le_rfl\n#align norm_mul₃_le norm_mul₃_le\n#align norm_add₃_le norm_add₃_le\n-/\n\n",
 "norm_multiset_sum_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_multiset_sum_le /-\ntheorem norm_multiset_sum_le {E} [SeminormedAddCommGroup E] (m : Multiset E) :\n    «expr‖ ‖» m.sum ≤ (m.map fun x => «expr‖ ‖» x).sum :=\n  m.le_sum_of_subadditive norm norm_zero norm_add_le\n#align norm_multiset_sum_le norm_multiset_sum_le\n-/\n\n",
 "norm_multiset_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_multiset_prod_le /-\n@[to_additive]\ntheorem norm_multiset_prod_le (m : Multiset E) : «expr‖ ‖» m.prod ≤ (m.map fun x => «expr‖ ‖» x).sum :=\n  by\n  rw [← Multiplicative.ofAdd_le, ofAdd_multiset_prod, Multiset.map_map]\n  refine' Multiset.le_prod_of_submultiplicative (Multiplicative.ofAdd ∘ norm) _ (fun x y => _) _\n  · simp only [comp_app, norm_one', ofAdd_zero]\n  · exact norm_mul_le' _ _\n#align norm_multiset_prod_le norm_multiset_prod_le\n#align norm_multiset_sum_le norm_multiset_sum_le\n-/\n\n",
 "norm_mul_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_mul_le_of_le /-\n@[to_additive]\ntheorem norm_mul_le_of_le (h₁ : «expr‖ ‖» a₁ ≤ r₁) (h₂ : «expr‖ ‖» a₂ ≤ r₂) : «expr‖ ‖» (a₁ * a₂) ≤ r₁ + r₂ :=\n  (norm_mul_le' a₁ a₂).trans <| add_le_add h₁ h₂\n#align norm_mul_le_of_le norm_mul_le_of_le\n#align norm_add_le_of_le norm_add_le_of_le\n-/\n\n",
 "norm_mul_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_mul_le' /-\n/-- **Triangle inequality** for the norm. -/\n@[to_additive norm_add_le \"**Triangle inequality** for the norm.\"]\ntheorem norm_mul_le' (a b : E) : «expr‖ ‖» (a * b) ≤ «expr‖ ‖» a + «expr‖ ‖» b := by\n  simpa [dist_eq_norm_div] using dist_triangle a 1 b⁻¹\n#align norm_mul_le' norm_mul_le'\n#align norm_add_le norm_add_le\n-/\n\n",
 "norm_map_of_map_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Isometry.norm_map_of_map_one /-\n@[to_additive]\ntheorem Isometry.norm_map_of_map_one {f : E → F} (hi : Isometry f) (h₁ : f 1 = 1) (x : E) :\n    «expr‖ ‖» (f x) = «expr‖ ‖» x := by rw [← dist_one_right, ← h₁, hi.dist_eq, dist_one_right]\n#align isometry.norm_map_of_map_one Isometry.norm_map_of_map_one\n#align isometry.norm_map_of_map_zero Isometry.norm_map_of_map_zero\n-/\n\n",
 "norm_lt_of_mem_ball'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_lt_of_mem_ball' /-\n@[to_additive norm_lt_of_mem_ball]\ntheorem norm_lt_of_mem_ball' (h : b ∈ ball a r) : «expr‖ ‖» b < «expr‖ ‖» a + r :=\n  (norm_le_norm_add_norm_div' _ _).trans_lt <| add_lt_add_left (by rwa [← dist_eq_norm_div]) _\n#align norm_lt_of_mem_ball' norm_lt_of_mem_ball'\n#align norm_lt_of_mem_ball norm_lt_of_mem_ball\n-/\n\n",
 "norm_le_zero_iff'''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_zero_iff''' /-\n@[to_additive norm_le_zero_iff']\ntheorem norm_le_zero_iff''' [T0Space E] {a : E} : «expr‖ ‖» a ≤ 0 ↔ a = 1 :=\n  by\n  letI : NormedGroup E := { ‹SeminormedGroup E› with to_metric_space := MetricSpace.ofT0PseudoMetricSpace E }\n  rw [← dist_one_right, dist_le_zero]\n#align norm_le_zero_iff''' norm_le_zero_iff'''\n#align norm_le_zero_iff' norm_le_zero_iff'\n-/\n\n",
 "norm_le_zero_iff''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_zero_iff'' /-\n@[simp, to_additive norm_le_zero_iff]\ntheorem norm_le_zero_iff'' : «expr‖ ‖» a ≤ 0 ↔ a = 1 :=\n  norm_le_zero_iff'''\n#align norm_le_zero_iff'' norm_le_zero_iff''\n#align norm_le_zero_iff norm_le_zero_iff\n-/\n\n",
 "norm_le_pi_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_pi_norm' /-\n@[to_additive norm_le_pi_norm]\ntheorem norm_le_pi_norm' (i : ι) : «expr‖ ‖» (f i) ≤ «expr‖ ‖» f :=\n  (pi_norm_le_iff_of_nonneg' <| norm_nonneg' _).1 le_rfl i\n#align norm_le_pi_norm' norm_le_pi_norm'\n#align norm_le_pi_norm norm_le_pi_norm\n-/\n\n",
 "norm_le_of_mem_closedBall'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_of_mem_closedBall' /-\n@[to_additive norm_le_of_mem_closedBall]\ntheorem norm_le_of_mem_closedBall' (h : b ∈ closedBall a r) : «expr‖ ‖» b ≤ «expr‖ ‖» a + r :=\n  (norm_le_norm_add_norm_div' _ _).trans <| add_le_add_left (by rwa [← dist_eq_norm_div]) _\n#align norm_le_of_mem_closed_ball' norm_le_of_mem_closedBall'\n#align norm_le_of_mem_closed_ball norm_le_of_mem_closedBall\n-/\n\n",
 "norm_le_norm_add_norm_div'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_norm_add_norm_div' /-\n@[to_additive]\ntheorem norm_le_norm_add_norm_div' (u v : E) : «expr‖ ‖» u ≤ «expr‖ ‖» v + «expr‖ ‖» (u / v) :=\n  by\n  rw [add_comm]\n  refine' (norm_mul_le' _ _).trans_eq' _\n  rw [div_mul_cancel']\n#align norm_le_norm_add_norm_div' norm_le_norm_add_norm_div'\n#align norm_le_norm_add_norm_sub' norm_le_norm_add_norm_sub'\n-/\n\n",
 "norm_le_norm_add_norm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_norm_add_norm_div /-\n@[to_additive]\ntheorem norm_le_norm_add_norm_div (u v : E) : «expr‖ ‖» v ≤ «expr‖ ‖» u + «expr‖ ‖» (u / v) :=\n  by\n  rw [norm_div_rev]\n  exact norm_le_norm_add_norm_div' v u\n#align norm_le_norm_add_norm_div norm_le_norm_add_norm_div\n#align norm_le_norm_add_norm_sub norm_le_norm_add_norm_sub\n-/\n\n",
 "norm_le_norm_add_const_of_dist_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_norm_add_const_of_dist_le' /-\n@[to_additive norm_le_norm_add_const_of_dist_le]\ntheorem norm_le_norm_add_const_of_dist_le' : dist a b ≤ r → «expr‖ ‖» a ≤ «expr‖ ‖» b + r :=\n  norm_le_of_mem_closedBall'\n#align norm_le_norm_add_const_of_dist_le' norm_le_norm_add_const_of_dist_le'\n#align norm_le_norm_add_const_of_dist_le norm_le_norm_add_const_of_dist_le\n-/\n\n",
 "norm_le_mul_norm_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_le_mul_norm_add /-\n@[to_additive]\ntheorem norm_le_mul_norm_add (u v : E) : «expr‖ ‖» u ≤ «expr‖ ‖» (u * v) + «expr‖ ‖» v :=\n  calc\n    «expr‖ ‖» u = «expr‖ ‖» (u * v / v) := by rw [mul_div_cancel'']\n    _ ≤ «expr‖ ‖» (u * v) + «expr‖ ‖» v := norm_div_le _ _\n    \n#align norm_le_mul_norm_add norm_le_mul_norm_add\n#align norm_le_add_norm_add norm_le_add_norm_add\n-/\n\n",
 "norm_inv'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_inv' /-\n@[simp, to_additive norm_neg]\ntheorem norm_inv' (a : E) : «expr‖ ‖» a⁻¹ = «expr‖ ‖» a := by simpa using norm_div_rev 1 a\n#align norm_inv' norm_inv'\n#align norm_neg norm_neg\n-/\n\n",
 "norm_fst_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_fst_le /-\ntheorem norm_fst_le (x : E × F) : «expr‖ ‖» x.1 ≤ «expr‖ ‖» x :=\n  le_max_left _ _\n#align norm_fst_le norm_fst_le\n-/\n\n",
 "norm_eq_zero'''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_eq_zero''' /-\n@[to_additive norm_eq_zero']\ntheorem norm_eq_zero''' [T0Space E] {a : E} : «expr‖ ‖» a = 0 ↔ a = 1 :=\n  (norm_nonneg' a).le_iff_eq.symm.trans norm_le_zero_iff'''\n#align norm_eq_zero''' norm_eq_zero'''\n#align norm_eq_zero' norm_eq_zero'\n-/\n\n",
 "norm_eq_zero''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_eq_zero'' /-\n@[simp, to_additive norm_eq_zero]\ntheorem norm_eq_zero'' : «expr‖ ‖» a = 0 ↔ a = 1 :=\n  norm_eq_zero'''\n#align norm_eq_zero'' norm_eq_zero''\n#align norm_eq_zero norm_eq_zero\n-/\n\n",
 "norm_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print PUnit.norm_eq_zero /-\n/-\nCopyright (c) 2018 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Johannes Hölzl, Yaël Dillies\n-/\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n@[simp]\ntheorem PUnit.norm_eq_zero (r : PUnit) : «expr‖ ‖» r = 0 :=\n  rfl\n#align punit.norm_eq_zero PUnit.norm_eq_zero\n-/\n\n",
 "norm_eq_of_mem_sphere'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_eq_of_mem_sphere' /-\n@[simp, to_additive norm_eq_of_mem_sphere]\ntheorem norm_eq_of_mem_sphere' (x : sphere (1 : E) r) : «expr‖ ‖» (x : E) = r :=\n  mem_sphere_one_iff_norm.mp x.2\n#align norm_eq_of_mem_sphere' norm_eq_of_mem_sphere'\n#align norm_eq_of_mem_sphere norm_eq_of_mem_sphere\n-/\n\n",
 "norm_eq_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_abs (n : ℤ) : «expr‖ ‖» n = |n| :=\n  rfl\n#align norm_eq_abs norm_eq_abs\n\n",
 "norm_down":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem norm_down (x : ULift E) : «expr‖ ‖» x.down = «expr‖ ‖» x :=\n  rfl\n#align norm_down norm_down\n\n",
 "norm_div_sub_norm_div_le_norm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_div_sub_norm_div_le_norm_div /-\n@[to_additive]\ntheorem norm_div_sub_norm_div_le_norm_div (u v w : E) : «expr‖ ‖» (u / w) - «expr‖ ‖» (v / w) ≤ «expr‖ ‖» (u / v) := by\n  simpa only [div_div_div_cancel_right'] using norm_sub_norm_le' (u / w) (v / w)\n#align norm_div_sub_norm_div_le_norm_div norm_div_sub_norm_div_le_norm_div\n#align norm_sub_sub_norm_sub_le_norm_sub norm_sub_sub_norm_sub_le_norm_sub\n-/\n\n",
 "norm_div_rev":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_div_rev /-\n@[to_additive]\ntheorem norm_div_rev (a b : E) : «expr‖ ‖» (a / b) = «expr‖ ‖» (b / a) := by\n  simpa only [dist_eq_norm_div] using dist_comm a b\n#align norm_div_rev norm_div_rev\n#align norm_sub_rev norm_sub_rev\n-/\n\n",
 "norm_div_pos_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_div_pos_iff /-\n@[to_additive]\ntheorem norm_div_pos_iff : 0 < «expr‖ ‖» (a / b) ↔ a ≠ b :=\n  by\n  rw [(norm_nonneg' _).lt_iff_ne, ne_comm]\n  exact norm_div_eq_zero_iff.not\n#align norm_div_pos_iff norm_div_pos_iff\n#align norm_sub_pos_iff norm_sub_pos_iff\n-/\n\n",
 "norm_div_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print LipschitzWith.norm_div_le_of_le /-\n@[to_additive]\ntheorem LipschitzWith.norm_div_le_of_le {f : E → F} {C : nnreal} (h : LipschitzWith C f) (hr : «expr‖ ‖» (a / b) ≤ r) :\n    «expr‖ ‖» (f a / f b) ≤ C * r :=\n  (h.norm_div_le _ _).trans <| mul_le_mul_of_nonneg_left hr C.2\n#align lipschitz_with.norm_div_le_of_le LipschitzWith.norm_div_le_of_le\n#align lipschitz_with.norm_sub_le_of_le LipschitzWith.norm_sub_le_of_le\n-/\n\n",
 "norm_div_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_div_le /-\n@[to_additive]\ntheorem norm_div_le (a b : E) : «expr‖ ‖» (a / b) ≤ «expr‖ ‖» a + «expr‖ ‖» b := by\n  simpa [dist_eq_norm_div] using dist_triangle a 1 b\n#align norm_div_le norm_div_le\n#align norm_sub_le norm_sub_le\n-/\n\n",
 "norm_div_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_div_eq_zero_iff /-\n@[to_additive]\ntheorem norm_div_eq_zero_iff : «expr‖ ‖» (a / b) = 0 ↔ a = b := by rw [norm_eq_zero'', div_eq_one]\n#align norm_div_eq_zero_iff norm_div_eq_zero_iff\n#align norm_sub_eq_zero_iff norm_sub_eq_zero_iff\n-/\n\n",
 "norm_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print Pi.norm_def' /-\n@[to_additive Pi.norm_def]\ntheorem Pi.norm_def' : «expr‖ ‖» f = ↑(Finset.univ.sup fun b => «expr‖ ‖₊» (f b)) :=\n  rfl\n#align pi.norm_def' Pi.norm_def'\n#align pi.norm_def Pi.norm_def\n-/\n\n",
 "norm_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Prod.norm_def /-\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- See note [lower instance priority]\ntheorem Prod.norm_def (x : E × F) : «expr‖ ‖» x = max («expr‖ ‖» x.1) («expr‖ ‖» x.2) :=\n  rfl\n#align prod.norm_def Prod.norm_def\n-/\n\n",
 "norm_coe_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem norm_coe_nat (n : ℕ) : «expr‖ ‖» (n : ℤ) = n := by simp [Int.norm_eq_abs]\n#align norm_coe_nat norm_coe_nat\n\n",
 "norm_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n-- See note [implicit instance arguments].\n/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `E` is equal to its\nnorm in `s`.\n\nThis is a reversed version of the `simp` lemma `submodule.coe_norm` for use by `norm_cast`. -/\n@[norm_cast]\ntheorem norm_coe {_ : Ring 𝕜} [SeminormedAddCommGroup E] {_ : Module 𝕜 E} {s : Submodule 𝕜 E} (x : s) :\n    «expr‖ ‖» (x : E) = «expr‖ ‖» x :=\n  rfl\n#align norm_coe norm_coe\n\n",
 "norm_cast_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[norm_cast, simp]\ntheorem norm_cast_real (r : exprℚ) : «expr‖ ‖» (r : exprℝ) = «expr‖ ‖» r :=\n  rfl\n#align norm_cast_real norm_cast_real\n\n",
 "norm_cast_rat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Int.norm_cast_rat /-\n@[norm_cast, simp]\ntheorem Int.norm_cast_rat (m : ℤ) : «expr‖ ‖» (m : exprℚ) = «expr‖ ‖» m := by\n  rw [← Rat.norm_cast_real, ← Int.norm_cast_real] <;> congr 1 <;> norm_cast\n#align int.norm_cast_rat Int.norm_cast_rat\n-/\n\n",
 "norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print ContinuousOn.norm' /-\n@[to_additive ContinuousOn.norm]\ntheorem ContinuousOn.norm' {s : Set α} (h : ContinuousOn f s) : ContinuousOn (fun x => «expr‖ ‖» (f x)) s := fun x hx =>\n  (h x hx).norm'\n#align continuous_on.norm' ContinuousOn.norm'\n#align continuous_on.norm ContinuousOn.norm\n-/\n\n",
 "nnorm_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print Prod.nnorm_def /-\n@[to_additive Prod.nnnorm_def']\ntheorem Prod.nnorm_def (x : E × F) : «expr‖ ‖₊» x = max («expr‖ ‖₊» x.1) («expr‖ ‖₊» x.2) :=\n  rfl\n#align prod.nnorm_def Prod.nnorm_def\n#align prod.nnnorm_def' Prod.nnnorm_def'\n-/\n\n",
 "nnnorm_zpow_le_mul_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_zpow_le_mul_norm /-\n@[to_additive nnnorm_zsmul_le]\ntheorem nnnorm_zpow_le_mul_norm (n : ℤ) (a : α) : «expr‖ ‖₊» (a ^ n) ≤ «expr‖ ‖₊» n * «expr‖ ‖₊» a := by\n  simpa only [← NNReal.coe_le_coe, NNReal.coe_mul] using norm_zpow_le_mul_norm n a\n#align nnnorm_zpow_le_mul_norm nnnorm_zpow_le_mul_norm\n#align nnnorm_zsmul_le nnnorm_zsmul_le\n-/\n\n",
 "nnnorm_up":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n@[simp]\ntheorem nnnorm_up (x : E) : «expr‖ ‖₊» (ULift.up x) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_up nnnorm_up\n\n",
 "nnnorm_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_unop [SeminormedAddGroup E] (a : «expr ᵐᵒᵖ» E) : «expr‖ ‖₊» (MulOpposite.unop a) = «expr‖ ‖₊» a :=\n  rfl\n#align nnnorm_unop nnnorm_unop\n\n",
 "nnnorm_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem nnnorm_two : «expr‖ ‖₊» (2 : exprℝ) = 2 :=\n  NNReal.eq <| by simp\n#align nnnorm_two nnnorm_two\n\n",
 "nnnorm_toMul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_toMul /-\n@[simp]\ntheorem nnnorm_toMul (x) : «expr‖ ‖₊» (toMul x : E) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_to_mul nnnorm_toMul\n-/\n\n",
 "nnnorm_toDual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_toDual /-\n@[simp]\ntheorem nnnorm_toDual (x : E) : «expr‖ ‖₊» (toDual x) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_to_dual nnnorm_toDual\n-/\n\n",
 "nnnorm_toAdd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_toAdd /-\n@[simp]\ntheorem nnnorm_toAdd (x) : «expr‖ ‖₊» (toAdd x : E) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_to_add nnnorm_toAdd\n-/\n\n",
 "nnnorm_prod_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print nnnorm_prod_le_of_le /-\n@[to_additive]\ntheorem nnnorm_prod_le_of_le (s : Finset ι) {f : ι → E} {n : ι → nnreal} (h : ∀ b ∈ s, «expr‖ ‖₊» (f b) ≤ n b) :\n    «expr‖ ‖₊»\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f b)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (n b) :=\n  (norm_prod_le_of_le s h).trans_eq NNReal.coe_sum.symm\n#align nnnorm_prod_le_of_le nnnorm_prod_le_of_le\n#align nnnorm_sum_le_of_le nnnorm_sum_le_of_le\n-/\n\n",
 "nnnorm_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_prod_le /-\n@[to_additive]\ntheorem nnnorm_prod_le (s : Finset ι) (f : ι → E) :\n    «expr‖ ‖₊»\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f a)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr‖ ‖₊» (f a)) :=\n  NNReal.coe_le_coe.1 <| by\n    push_cast\n    exact norm_prod_le _ _\n#align nnnorm_prod_le nnnorm_prod_le\n#align nnnorm_sum_le nnnorm_sum_le\n-/\n\n",
 "nnnorm_pow_le_mul_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_pow_le_mul_norm /-\n@[to_additive nnnorm_nsmul_le]\ntheorem nnnorm_pow_le_mul_norm (n : ℕ) (a : E) : «expr‖ ‖₊» (a ^ n) ≤ n * «expr‖ ‖₊» a := by\n  simpa only [← NNReal.coe_le_coe, NNReal.coe_mul, NNReal.coe_nat_cast] using norm_pow_le_mul_norm n a\n#align nnnorm_pow_le_mul_norm nnnorm_pow_le_mul_norm\n#align nnnorm_nsmul_le nnnorm_nsmul_le\n-/\n\n",
 "nnnorm_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_op [SeminormedAddGroup E] (a : E) : «expr‖ ‖₊» (MulOpposite.op a) = «expr‖ ‖₊» a :=\n  rfl\n#align nnnorm_op nnnorm_op\n\n",
 "nnnorm_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_one' /-\n@[simp, to_additive nnnorm_zero]\ntheorem nnnorm_one' : «expr‖ ‖₊» (1 : E) = 0 :=\n  NNReal.eq norm_one'\n#align nnnorm_one' nnnorm_one'\n#align nnnorm_zero nnnorm_zero\n-/\n\n",
 "nnnorm_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_of_nonneg (hr : 0 ≤ r) : «expr‖ ‖₊» r = ⟨r, hr⟩ :=\n  NNReal.eq <| norm_of_nonneg hr\n#align nnnorm_of_nonneg nnnorm_of_nonneg\n\n",
 "nnnorm_ofMul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_ofMul /-\n@[simp]\ntheorem nnnorm_ofMul (x : E) : «expr‖ ‖₊» (ofMul x) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_of_mul nnnorm_ofMul\n-/\n\n",
 "nnnorm_ofDual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_ofDual /-\n@[simp]\ntheorem nnnorm_ofDual (x : «expr ᵒᵈ» E) : «expr‖ ‖₊» (ofDual x) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_of_dual nnnorm_ofDual\n-/\n\n",
 "nnnorm_ofAdd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_ofAdd /-\n@[simp]\ntheorem nnnorm_ofAdd (x : E) : «expr‖ ‖₊» (ofAdd x) = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_of_add nnnorm_ofAdd\n-/\n\n",
 "nnnorm_ne_zero_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_ne_zero_iff' /-\n@[to_additive nnnorm_ne_zero_iff]\ntheorem nnnorm_ne_zero_iff' : «expr‖ ‖₊» a ≠ 0 ↔ a ≠ 1 :=\n  nnnorm_eq_zero'.not\n#align nnnorm_ne_zero_iff' nnnorm_ne_zero_iff'\n#align nnnorm_ne_zero_iff nnnorm_ne_zero_iff\n-/\n\n",
 "nnnorm_multiset_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_multiset_prod_le /-\n@[to_additive]\ntheorem nnnorm_multiset_prod_le (m : Multiset E) : «expr‖ ‖₊» m.prod ≤ (m.map fun x => «expr‖ ‖₊» x).sum :=\n  NNReal.coe_le_coe.1 <| by\n    push_cast\n    rw [Multiset.map_map]\n    exact norm_multiset_prod_le _\n#align nnnorm_multiset_prod_le nnnorm_multiset_prod_le\n#align nnnorm_multiset_sum_le nnnorm_multiset_sum_le\n-/\n\n",
 "nnnorm_mul_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_mul_le' /-\n@[to_additive nnnorm_add_le]\ntheorem nnnorm_mul_le' (a b : E) : «expr‖ ‖₊» (a * b) ≤ «expr‖ ‖₊» a + «expr‖ ‖₊» b :=\n  NNReal.coe_le_coe.1 <| norm_mul_le' a b\n#align nnnorm_mul_le' nnnorm_mul_le'\n#align nnnorm_add_le nnnorm_add_le\n-/\n\n",
 "nnnorm_le_pi_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_le_pi_nnnorm' /-\n@[to_additive nnnorm_le_pi_nnnorm]\ntheorem nnnorm_le_pi_nnnorm' (i : ι) : «expr‖ ‖₊» (f i) ≤ «expr‖ ‖₊» f :=\n  norm_le_pi_norm' _ i\n#align nnnorm_le_pi_nnnorm' nnnorm_le_pi_nnnorm'\n#align nnnorm_le_pi_nnnorm nnnorm_le_pi_nnnorm\n-/\n\n",
 "nnnorm_le_nnnorm_add_nnnorm_div'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_le_nnnorm_add_nnnorm_div' /-\n@[to_additive]\ntheorem nnnorm_le_nnnorm_add_nnnorm_div' (a b : E) : «expr‖ ‖₊» a ≤ «expr‖ ‖₊» b + «expr‖ ‖₊» (a / b) :=\n  norm_le_norm_add_norm_div' _ _\n#align nnnorm_le_nnnorm_add_nnnorm_div' nnnorm_le_nnnorm_add_nnnorm_div'\n#align nnnorm_le_nnnorm_add_nnnorm_sub' nnnorm_le_nnnorm_add_nnnorm_sub'\n-/\n\n",
 "nnnorm_le_nnnorm_add_nnnorm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_le_nnnorm_add_nnnorm_div /-\n@[to_additive]\ntheorem nnnorm_le_nnnorm_add_nnnorm_div (a b : E) : «expr‖ ‖₊» b ≤ «expr‖ ‖₊» a + «expr‖ ‖₊» (a / b) :=\n  norm_le_norm_add_norm_div _ _\n#align nnnorm_le_nnnorm_add_nnnorm_div nnnorm_le_nnnorm_add_nnnorm_div\n#align nnnorm_le_nnnorm_add_nnnorm_sub nnnorm_le_nnnorm_add_nnnorm_sub\n-/\n\n",
 "nnnorm_le_mul_nnnorm_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_le_mul_nnnorm_add /-\n@[to_additive]\ntheorem nnnorm_le_mul_nnnorm_add (a b : E) : «expr‖ ‖₊» a ≤ «expr‖ ‖₊» (a * b) + «expr‖ ‖₊» b :=\n  norm_le_mul_norm_add _ _\n#align nnnorm_le_mul_nnnorm_add nnnorm_le_mul_nnnorm_add\n#align nnnorm_le_add_nnnorm_add nnnorm_le_add_nnnorm_add\n-/\n\n",
 "nnnorm_inv'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_inv' /-\n@[simp, to_additive nnnorm_neg]\ntheorem nnnorm_inv' (a : E) : «expr‖ ‖₊» a⁻¹ = «expr‖ ‖₊» a :=\n  NNReal.eq <| norm_inv' a\n#align nnnorm_inv' nnnorm_inv'\n#align nnnorm_neg nnnorm_neg\n-/\n\n",
 "nnnorm_eq_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_eq_zero' /-\n@[simp, to_additive nnnorm_eq_zero]\ntheorem nnnorm_eq_zero' : «expr‖ ‖₊» a = 0 ↔ a = 1 := by rw [← NNReal.coe_eq_zero, coe_nnnorm', norm_eq_zero'']\n#align nnnorm_eq_zero' nnnorm_eq_zero'\n#align nnnorm_eq_zero nnnorm_eq_zero\n-/\n\n",
 "nnnorm_down":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n@[simp]\ntheorem nnnorm_down (x : ULift E) : «expr‖ ‖₊» x.down = «expr‖ ‖₊» x :=\n  rfl\n#align nnnorm_down nnnorm_down\n\n",
 "nnnorm_div_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nnnorm_div_le /-\n@[to_additive]\ntheorem nnnorm_div_le (a b : E) : «expr‖ ‖₊» (a / b) ≤ «expr‖ ‖₊» a + «expr‖ ‖₊» b :=\n  NNReal.coe_le_coe.1 <| norm_div_le _ _\n#align nnnorm_div_le nnnorm_div_le\n#align nnnorm_sub_le nnnorm_sub_le\n-/\n\n",
 "nnnorm_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print Pi.nnnorm_def' /-\n@[to_additive Pi.nnnorm_def]\ntheorem Pi.nnnorm_def' : «expr‖ ‖₊» f = Finset.univ.sup fun b => «expr‖ ‖₊» (f b) :=\n  Subtype.eta _ _\n#align pi.nnnorm_def' Pi.nnnorm_def'\n#align pi.nnnorm_def Pi.nnnorm_def\n-/\n\n",
 "nnnorm_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_def (x : ULift E) : «expr‖ ‖₊» x = «expr‖ ‖₊» x.down :=\n  rfl\n#align nnnorm_def nnnorm_def\n\n",
 "nnnorm_coe_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem nnnorm_coe_nat (n : ℕ) : «expr‖ ‖₊» (n : exprℝ) = n :=\n  NNReal.eq <| norm_coe_nat _\n#align nnnorm_coe_nat nnnorm_coe_nat\n\n",
 "nnnorm_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n@[simp]\ntheorem nnnorm_abs (r : exprℝ) : «expr‖ ‖₊» (|r|) = «expr‖ ‖₊» r := by simp [nnnorm]\n#align nnnorm_abs nnnorm_abs\n\n",
 "nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print ContinuousOn.nnnorm' /-\n@[to_additive ContinuousOn.nnnorm]\ntheorem ContinuousOn.nnnorm' {s : Set α} (h : ContinuousOn f s) : ContinuousOn (fun x => «expr‖ ‖₊» (f x)) s :=\n  fun x hx => (h x hx).nnnorm'\n#align continuous_on.nnnorm' ContinuousOn.nnnorm'\n#align continuous_on.nnnorm ContinuousOn.nnnorm\n-/\n\n",
 "nndist_nnnorm_nnnorm_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nndist_nnnorm_nnnorm_le' /-\n@[to_additive nndist_nnnorm_nnnorm_le]\ntheorem nndist_nnnorm_nnnorm_le' (a b : E) : nndist («expr‖ ‖₊» a) («expr‖ ‖₊» b) ≤ «expr‖ ‖₊» (a / b) :=\n  NNReal.coe_le_coe.1 <| dist_norm_norm_le' a b\n#align nndist_nnnorm_nnnorm_le' nndist_nnnorm_nnnorm_le'\n#align nndist_nnnorm_nnnorm_le nndist_nnnorm_nnnorm_le\n-/\n\n",
 "nndist_mul_mul_le":
 "#print nndist_mul_mul_le /-\n@[to_additive]\ntheorem nndist_mul_mul_le (a₁ a₂ b₁ b₂ : E) : nndist (a₁ * a₂) (b₁ * b₂) ≤ nndist a₁ b₁ + nndist a₂ b₂ :=\n  NNReal.coe_le_coe.1 <| dist_mul_mul_le a₁ a₂ b₁ b₂\n#align nndist_mul_mul_le nndist_mul_mul_le\n#align nndist_add_add_le nndist_add_add_le\n-/\n\n",
 "nndist_eq_nnnorm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print nndist_eq_nnnorm_div /-\n@[to_additive]\ntheorem nndist_eq_nnnorm_div (a b : E) : nndist a b = «expr‖ ‖₊» (a / b) :=\n  NNReal.eq <| dist_eq_norm_div _ _\n#align nndist_eq_nnnorm_div nndist_eq_nnnorm_div\n#align nndist_eq_nnnorm_sub nndist_eq_nnnorm_sub\n-/\n\n",
 "nhds_one_basis_norm_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedCommGroup.nhds_one_basis_norm_lt /-\n@[to_additive]\ntheorem NormedCommGroup.nhds_one_basis_norm_lt :\n    ((nhds) (1 : E)).has_basis (fun ε : exprℝ => 0 < ε) fun ε => { y | «expr‖ ‖» y < ε } :=\n  by\n  convert NormedCommGroup.nhds_basis_norm_lt (1 : E)\n  simp\n#align normed_comm_group.nhds_one_basis_norm_lt NormedCommGroup.nhds_one_basis_norm_lt\n#align normed_add_comm_group.nhds_zero_basis_norm_lt NormedAddCommGroup.nhds_zero_basis_norm_lt\n-/\n\n",
 "nhds_basis_norm_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedCommGroup.nhds_basis_norm_lt /-\n@[to_additive]\ntheorem NormedCommGroup.nhds_basis_norm_lt (x : E) :\n    ((nhds) x).has_basis (fun ε : exprℝ => 0 < ε) fun ε => { y | «expr‖ ‖» (y / x) < ε } :=\n  by\n  simp_rw [← ball_eq']\n  exact Metric.nhds_basis_ball\n#align normed_comm_group.nhds_basis_norm_lt NormedCommGroup.nhds_basis_norm_lt\n#align normed_add_comm_group.nhds_basis_norm_lt NormedAddCommGroup.nhds_basis_norm_lt\n-/\n\n",
 "ne_one_of_norm_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print ne_one_of_norm_ne_zero /-\n@[to_additive]\ntheorem ne_one_of_norm_ne_zero : «expr‖ ‖» a ≠ 0 → a ≠ 1 :=\n  mt <| by\n    rintro rfl\n    exact norm_one'\n#align ne_one_of_norm_ne_zero ne_one_of_norm_ne_zero\n#align ne_zero_of_norm_ne_zero ne_zero_of_norm_ne_zero\n-/\n\n",
 "ne_one_of_nnnorm_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print ne_one_of_nnnorm_ne_zero /-\n@[to_additive]\ntheorem ne_one_of_nnnorm_ne_zero {a : E} : «expr‖ ‖₊» a ≠ 0 → a ≠ 1 :=\n  mt <| by\n    rintro rfl\n    exact nnnorm_one'\n#align ne_one_of_nnnorm_ne_zero ne_one_of_nnnorm_ne_zero\n#align ne_zero_of_nnnorm_ne_zero ne_zero_of_nnnorm_ne_zero\n-/\n\n",
 "ne_one_of_mem_unit_sphere":
 "#print ne_one_of_mem_unit_sphere /-\n@[to_additive ne_zero_of_mem_unit_sphere]\ntheorem ne_one_of_mem_unit_sphere (x : sphere (1 : E) 1) : (x : E) ≠ 1 :=\n  ne_one_of_mem_sphere one_ne_zero _\n#align ne_one_of_mem_unit_sphere ne_one_of_mem_unit_sphere\n#align ne_zero_of_mem_unit_sphere ne_zero_of_mem_unit_sphere\n-/\n\n",
 "ne_one_of_mem_sphere":
 "#print ne_one_of_mem_sphere /-\n@[to_additive]\ntheorem ne_one_of_mem_sphere (hr : r ≠ 0) (x : sphere (1 : E) r) : (x : E) ≠ 1 :=\n  ne_one_of_norm_ne_zero <| by rwa [norm_eq_of_mem_sphere' x]\n#align ne_one_of_mem_sphere ne_one_of_mem_sphere\n#align ne_zero_of_mem_sphere ne_zero_of_mem_sphere\n-/\n\n",
 "mul_mem_closedBall_mul_iff":
 "#print mul_mem_closedBall_mul_iff /-\n@[simp, to_additive]\ntheorem mul_mem_closedBall_mul_iff {c : E} : a * c ∈ closedBall (b * c) r ↔ a ∈ closedBall b r := by\n  simp only [mem_closed_ball, dist_eq_norm_div, mul_div_mul_right_eq_div]\n#align mul_mem_closed_ball_mul_iff mul_mem_closedBall_mul_iff\n#align add_mem_closed_ball_add_iff add_mem_closedBall_add_iff\n-/\n\n",
 "mul_mem_closedBall_iff_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mul_mem_closedBall_iff_norm /-\n@[to_additive]\ntheorem mul_mem_closedBall_iff_norm : a * b ∈ closedBall a r ↔ «expr‖ ‖» b ≤ r := by\n  rw [mem_closedBall_iff_norm'', mul_div_cancel''']\n#align mul_mem_closed_ball_iff_norm mul_mem_closedBall_iff_norm\n#align add_mem_closed_ball_iff_norm add_mem_closedBall_iff_norm\n-/\n\n",
 "mul_mem_ball_mul_iff":
 "#print mul_mem_ball_mul_iff /-\n@[simp, to_additive]\ntheorem mul_mem_ball_mul_iff {c : E} : a * c ∈ ball (b * c) r ↔ a ∈ ball b r := by\n  simp only [mem_ball, dist_eq_norm_div, mul_div_mul_right_eq_div]\n#align mul_mem_ball_mul_iff mul_mem_ball_mul_iff\n#align add_mem_ball_add_iff add_mem_ball_add_iff\n-/\n\n",
 "mul_mem_ball_iff_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mul_mem_ball_iff_norm /-\n@[to_additive]\ntheorem mul_mem_ball_iff_norm : a * b ∈ ball a r ↔ «expr‖ ‖» b < r := by rw [mem_ball_iff_norm'', mul_div_cancel''']\n#align mul_mem_ball_iff_norm mul_mem_ball_iff_norm\n#align add_mem_ball_iff_norm add_mem_ball_iff_norm\n-/\n\n",
 "mul_lipschitz_with":
 "@[to_additive]\ntheorem mul_lipschitz_with (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg g) (hK : Kg < Kf⁻¹) :\n    AntilipschitzWith (Kf⁻¹ - Kg)⁻¹ fun x => f x * g x :=\n  by\n  letI : PseudoMetricSpace α := PseudoEMetricSpace.toPseudoMetricSpace hf.edist_ne_top\n  refine' AntilipschitzWith.of_le_mul_dist fun x y => _\n  rw [NNReal.coe_inv, ← div_eq_inv_mul]\n  rw [le_div_iff (NNReal.coe_pos.2 <| tsub_pos_iff_lt.2 hK)]\n  rw [mul_comm, NNReal.coe_sub hK.le, sub_mul]\n  calc\n    ↑Kf⁻¹ * dist x y - Kg * dist x y ≤ dist (f x) (f y) - dist (g x) (g y) :=\n      sub_le_sub (hf.mul_le_dist x y) (hg.dist_le_mul x y)\n    _ ≤ _ := le_trans (le_abs_self _) (abs_dist_sub_le_dist_mul_mul _ _ _ _)\n    \n#align mul_lipschitz_with mul_lipschitz_with\n\n",
 "mul_div_lipschitz_with":
 "@[to_additive]\ntheorem mul_div_lipschitz_with (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg (g / f)) (hK : Kg < Kf⁻¹) :\n    AntilipschitzWith (Kf⁻¹ - Kg)⁻¹ g := by\n  simpa only [Pi.div_apply, mul_div_cancel'_right] using hf.mul_lipschitz_with hg hK\n#align mul_div_lipschitz_with mul_div_lipschitz_with\n\n",
 "mul'":
 "@[to_additive add]\ntheorem mul' (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) : LipschitzWith (Kf + Kg) fun x => f x * g x :=\n  fun x y =>\n  calc\n    edist (f x * g x) (f y * g y) ≤ edist (f x) (f y) + edist (g x) (g y) := edist_mul_mul_le _ _ _ _\n    _ ≤ Kf * edist x y + Kg * edist x y := (add_le_add (hf x y) (hg x y))\n    _ = (Kf + Kg) * edist x y := (add_mul _ _ _).symm\n    \n#align mul' mul'\n\n",
 "mem_sphere_one_iff_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_sphere_one_iff_norm /-\n@[simp, to_additive]\ntheorem mem_sphere_one_iff_norm : a ∈ sphere (1 : E) r ↔ «expr‖ ‖» a = r := by simp [dist_eq_norm_div]\n#align mem_sphere_one_iff_norm mem_sphere_one_iff_norm\n#align mem_sphere_zero_iff_norm mem_sphere_zero_iff_norm\n-/\n\n",
 "mem_sphere_iff_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_sphere_iff_norm' /-\n@[simp, to_additive mem_sphere_iff_norm]\ntheorem mem_sphere_iff_norm' : b ∈ sphere a r ↔ «expr‖ ‖» (b / a) = r := by simp [dist_eq_norm_div]\n#align mem_sphere_iff_norm' mem_sphere_iff_norm'\n#align mem_sphere_iff_norm mem_sphere_iff_norm\n-/\n\n",
 "mem_emetric_ball_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print mem_emetric_ball_one_iff /-\n@[to_additive]\ntheorem mem_emetric_ball_one_iff {r : ennreal} : a ∈ EMetric.ball (1 : E) r ↔ ↑(«expr‖ ‖₊» a) < r := by\n  rw [EMetric.mem_ball, edist_eq_coe_nnnorm']\n#align mem_emetric_ball_one_iff mem_emetric_ball_one_iff\n#align mem_emetric_ball_zero_iff mem_emetric_ball_zero_iff\n-/\n\n",
 "mem_closure_one_iff_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_closure_one_iff_norm /-\n@[to_additive]\ntheorem mem_closure_one_iff_norm {x : E} : x ∈ closure ({1} : Set E) ↔ «expr‖ ‖» x = 0 := by\n  rw [← closed_ball_zero', mem_closedBall_one_iff, (norm_nonneg' x).le_iff_eq]\n#align mem_closure_one_iff_norm mem_closure_one_iff_norm\n#align mem_closure_zero_iff_norm mem_closure_zero_iff_norm\n-/\n\n",
 "mem_closure_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print SeminormedCommGroup.mem_closure_iff /-\n@[to_additive]\ntheorem SeminormedCommGroup.mem_closure_iff : a ∈ closure s ↔ ∀ ε, 0 < ε → ∃ b ∈ s, «expr‖ ‖» (a / b) < ε := by\n  simp [Metric.mem_closure_iff, dist_eq_norm_div]\n#align seminormed_comm_group.mem_closure_iff SeminormedCommGroup.mem_closure_iff\n#align seminormed_add_comm_group.mem_closure_iff SeminormedAddCommGroup.mem_closure_iff\n-/\n\n",
 "mem_closedBall_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_closedBall_one_iff /-\n@[simp, to_additive]\ntheorem mem_closedBall_one_iff : a ∈ closedBall (1 : E) r ↔ «expr‖ ‖» a ≤ r := by rw [mem_closed_ball, dist_one_right]\n#align mem_closed_ball_one_iff mem_closedBall_one_iff\n#align mem_closed_ball_zero_iff mem_closedBall_zero_iff\n-/\n\n",
 "mem_closedBall_iff_norm'''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_closedBall_iff_norm''' /-\n@[to_additive mem_closedBall_iff_norm']\ntheorem mem_closedBall_iff_norm''' : b ∈ closedBall a r ↔ «expr‖ ‖» (a / b) ≤ r := by\n  rw [mem_closed_ball', dist_eq_norm_div]\n#align mem_closed_ball_iff_norm''' mem_closedBall_iff_norm'''\n#align mem_closed_ball_iff_norm' mem_closedBall_iff_norm'\n-/\n\n",
 "mem_closedBall_iff_norm''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_closedBall_iff_norm'' /-\n@[to_additive mem_closedBall_iff_norm]\ntheorem mem_closedBall_iff_norm'' : b ∈ closedBall a r ↔ «expr‖ ‖» (b / a) ≤ r := by\n  rw [mem_closed_ball, dist_eq_norm_div]\n#align mem_closed_ball_iff_norm'' mem_closedBall_iff_norm''\n#align mem_closed_ball_iff_norm mem_closedBall_iff_norm\n-/\n\n",
 "mem_ball_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_ball_one_iff /-\n@[simp, to_additive]\ntheorem mem_ball_one_iff : a ∈ ball (1 : E) r ↔ «expr‖ ‖» a < r := by rw [mem_ball, dist_one_right]\n#align mem_ball_one_iff mem_ball_one_iff\n#align mem_ball_zero_iff mem_ball_zero_iff\n-/\n\n",
 "mem_ball_iff_norm'''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_ball_iff_norm''' /-\n@[to_additive mem_ball_iff_norm']\ntheorem mem_ball_iff_norm''' : b ∈ ball a r ↔ «expr‖ ‖» (a / b) < r := by rw [mem_ball', dist_eq_norm_div]\n#align mem_ball_iff_norm''' mem_ball_iff_norm'''\n#align mem_ball_iff_norm' mem_ball_iff_norm'\n-/\n\n",
 "mem_ball_iff_norm''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print mem_ball_iff_norm'' /-\n@[to_additive mem_ball_iff_norm]\ntheorem mem_ball_iff_norm'' : b ∈ ball a r ↔ «expr‖ ‖» (b / a) < r := by rw [mem_ball, dist_eq_norm_div]\n#align mem_ball_iff_norm'' mem_ball_iff_norm''\n#align mem_ball_iff_norm mem_ball_iff_norm\n-/\n\n",
 "lipschitz_of_bound_nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print MonoidHomClass.lipschitz_of_bound_nnnorm /-\n@[to_additive]\ntheorem MonoidHomClass.lipschitz_of_bound_nnnorm [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : nnreal)\n    (h : ∀ x, «expr‖ ‖₊» (f x) ≤ C * «expr‖ ‖₊» x) : LipschitzWith C f :=\n  @Real.toNNReal_coe C ▸ MonoidHomClass.lipschitz_of_bound f C h\n#align monoid_hom_class.lipschitz_of_bound_nnnorm MonoidHomClass.lipschitz_of_bound_nnnorm\n#align add_monoid_hom_class.lipschitz_of_bound_nnnorm AddMonoidHomClass.lipschitz_of_bound_nnnorm\n-/\n\n",
 "lipschitz_of_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print MonoidHomClass.lipschitz_of_bound /-\n/-- A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `normed_space.operator_norm`. -/\n@[to_additive\n      \"A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C`\\nsuch that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\\n(semi)normed spaces is in `normed_space.operator_norm`.\"]\ntheorem MonoidHomClass.lipschitz_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : exprℝ)\n    (h : ∀ x, «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» x) : LipschitzWith (Real.toNNReal C) f :=\n  LipschitzWith.of_dist_le' fun x y => by simpa only [dist_eq_norm_div, map_div] using h (x / y)\n#align monoid_hom_class.lipschitz_of_bound MonoidHomClass.lipschitz_of_bound\n#align add_monoid_hom_class.lipschitz_of_bound AddMonoidHomClass.lipschitz_of_bound\n-/\n\n",
 "lipschitzWith_one_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print lipschitzWith_one_norm' /-\n@[to_additive lipschitzWith_one_norm]\ntheorem lipschitzWith_one_norm' : LipschitzWith 1 (norm : E → exprℝ) := by\n  simpa only [dist_one_left] using LipschitzWith.dist_right (1 : E)\n#align lipschitz_with_one_norm' lipschitzWith_one_norm'\n#align lipschitz_with_one_norm lipschitzWith_one_norm\n-/\n\n",
 "lipschitzWith_one_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print lipschitzWith_one_nnnorm' /-\n@[to_additive lipschitzWith_one_nnnorm]\ntheorem lipschitzWith_one_nnnorm' : LipschitzWith 1 (has_nnnorm.nnnorm : E → nnreal) :=\n  lipschitzWith_one_norm'\n#align lipschitz_with_one_nnnorm' lipschitzWith_one_nnnorm'\n#align lipschitz_with_one_nnnorm lipschitzWith_one_nnnorm\n-/\n\n",
 "lipschitzWith_iff_norm_div_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print lipschitzWith_iff_norm_div_le /-\n@[to_additive]\ntheorem lipschitzWith_iff_norm_div_le {f : E → F} {C : nnreal} :\n    LipschitzWith C f ↔ ∀ x y, «expr‖ ‖» (f x / f y) ≤ C * «expr‖ ‖» (x / y) := by\n  simp only [lipschitzWith_iff_dist_le_mul, dist_eq_norm_div]\n#align lipschitz_with_iff_norm_div_le lipschitzWith_iff_norm_div_le\n#align lipschitz_with_iff_norm_sub_le lipschitzWith_iff_norm_sub_le\n-/\n\n",
 "lipschitzOnWith_iff_norm_div_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print lipschitzOnWith_iff_norm_div_le /-\n@[to_additive]\ntheorem lipschitzOnWith_iff_norm_div_le {f : E → F} {C : nnreal} :\n    LipschitzOnWith C f s ↔ ∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → «expr‖ ‖» (f x / f y) ≤ C * «expr‖ ‖» (x / y) := by\n  simp only [lipschitzOnWith_iff_dist_le_mul, dist_eq_norm_div]\n#align lipschitz_on_with_iff_norm_div_le lipschitzOnWith_iff_norm_div_le\n#align lipschitz_on_with_iff_norm_sub_le lipschitzOnWith_iff_norm_sub_le\n-/\n\n",
 "le_norm_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem le_norm_self (r : exprℝ) : r ≤ «expr‖ ‖» r :=\n  le_abs_self r\n#align le_norm_self le_norm_self\n\n",
 "le_mul_norm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[to_additive]\ntheorem le_mul_norm_div {f : E → F} (hf : AntilipschitzWith K f) (x y : E) :\n    «expr‖ ‖» (x / y) ≤ K * «expr‖ ‖» (f x / f y) := by simp [← dist_eq_norm_div, hf.le_mul_dist x y]\n#align le_mul_norm_div le_mul_norm_div\n\n",
 "isometry_iff_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print MonoidHomClass.isometry_iff_norm /-\n@[to_additive]\ntheorem MonoidHomClass.isometry_iff_norm [MonoidHomClass 𝓕 E F] (f : 𝓕) :\n    Isometry f ↔ ∀ x, «expr‖ ‖» (f x) = «expr‖ ‖» x :=\n  by\n  simp only [isometry_iff_dist_eq, dist_eq_norm_div, ← map_div]\n  refine' ⟨fun h x => _, fun h x y => h _⟩\n  simpa using h x 1\n#align monoid_hom_class.isometry_iff_norm MonoidHomClass.isometry_iff_norm\n#align add_monoid_hom_class.isometry_iff_norm AddMonoidHomClass.isometry_iff_norm\n-/\n\n",
 "inv":
 "@[to_additive]\ntheorem inv (hf : LipschitzWith K f) : LipschitzWith K fun x => (f x)⁻¹ := fun x y =>\n  (edist_inv_inv _ _).trans_le <| hf x y\n#align inv inv\n\n",
 "hasCompactSupport_norm_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print hasCompactSupport_norm_iff /-\ntheorem hasCompactSupport_norm_iff : (HasCompactSupport fun x => «expr‖ ‖» (f x)) ↔ HasCompactSupport f :=\n  hasCompactSupport_comp_left fun x => norm_eq_zero\n#align has_compact_support_norm_iff hasCompactSupport_norm_iff\n-/\n\n",
 "exists_pos_norm_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Metric.Bounded.exists_pos_norm_le' /-\n@[to_additive Metric.Bounded.exists_pos_norm_le]\ntheorem Metric.Bounded.exists_pos_norm_le' (hs : Metric.Bounded s) : ∃ R > 0, ∀ x ∈ s, «expr‖ ‖» x ≤ R :=\n  let ⟨R₀, hR₀⟩ := hs.exists_norm_le'\n  ⟨max R₀ 1, by positivity, fun x hx => (hR₀ x hx).trans <| le_max_left _ _⟩\n#align metric.bounded.exists_pos_norm_le' Metric.Bounded.exists_pos_norm_le'\n#align metric.bounded.exists_pos_norm_le Metric.Bounded.exists_pos_norm_le\n-/\n\n",
 "exists_pos_le_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print HasCompactMulSupport.exists_pos_le_norm /-\n@[to_additive]\ntheorem HasCompactMulSupport.exists_pos_le_norm [One E] (hf : HasCompactMulSupport f) :\n    ∃ R : exprℝ, 0 < R ∧ ∀ x : α, R ≤ «expr‖ ‖» x → f x = 1 :=\n  by\n  obtain ⟨K, ⟨hK1, hK2⟩⟩ := exists_compact_iff_has_compact_mul_support.mpr hf\n  obtain ⟨S, hS, hS'⟩ := hK1.bounded.exists_pos_norm_le\n  refine' ⟨S + 1, by positivity, fun x hx => hK2 x ((mt <| hS' x) _)⟩\n  contrapose! hx\n  exact lt_add_of_le_of_pos hx zero_lt_one\n#align has_compact_mul_support.exists_pos_le_norm HasCompactMulSupport.exists_pos_le_norm\n#align has_compact_support.exists_pos_le_norm HasCompactSupport.exists_pos_le_norm\n-/\n\n",
 "exists_bound_of_continuous_on'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print IsCompact.exists_bound_of_continuous_on' /-\n@[to_additive IsCompact.exists_bound_of_continuousOn]\ntheorem IsCompact.exists_bound_of_continuous_on' [TopologicalSpace α] {s : Set α} (hs : IsCompact s) {f : α → E}\n    (hf : ContinuousOn f s) : ∃ C, ∀ x ∈ s, «expr‖ ‖» (f x) ≤ C :=\n  (bounded_iff_forall_norm_le'.1 (hs.image_of_continuous_on hf).bounded).imp fun C hC x hx =>\n    hC _ <| Set.mem_image_of_mem _ hx\n#align is_compact.exists_bound_of_continuous_on' IsCompact.exists_bound_of_continuous_on'\n#align is_compact.exists_bound_of_continuous_on IsCompact.exists_bound_of_continuousOn\n-/\n\n",
 "eventually_ne_of_tendsto_norm_atTop'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n#print eventually_ne_of_tendsto_norm_atTop' /-\n/-- If `‖y‖ → ∞`, then we can assume `y ≠ x` for any fixed `x`. -/\n@[to_additive eventually_ne_of_tendsto_norm_atTop \"If `‖y‖→∞`, then we can assume `y≠x` for any\\nfixed `x`\"]\ntheorem eventually_ne_of_tendsto_norm_atTop' {l : Filter α} {f : α → E} (h : Tendsto (fun y => «expr‖ ‖» (f y)) l atTop)\n    (x : E) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n      (f y ≠ x) :=\n  (h.eventually_ne_at_top _).mono fun x => ne_of_apply_ne norm\n#align eventually_ne_of_tendsto_norm_at_top' eventually_ne_of_tendsto_norm_atTop'\n#align eventually_ne_of_tendsto_norm_at_top eventually_ne_of_tendsto_norm_atTop\n-/\n\n",
 "eq_of_norm_div_le_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print eq_of_norm_div_le_zero /-\n@[to_additive]\ntheorem eq_of_norm_div_le_zero (h : «expr‖ ‖» (a / b) ≤ 0) : a = b := by rwa [← div_eq_one, ← norm_le_zero_iff'']\n#align eq_of_norm_div_le_zero eq_of_norm_div_le_zero\n#align eq_of_norm_sub_le_zero eq_of_norm_sub_le_zero\n-/\n\n",
 "ennnorm_eq_of_real_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem ennnorm_eq_of_real_abs (r : exprℝ) : («expr‖ ‖₊» r : ennreal) = ENNReal.ofReal (|r|) := by\n  rw [← Real.nnnorm_abs r, Real.ennnorm_eq_ofReal (abs_nonneg _)]\n#align ennnorm_eq_of_real_abs ennnorm_eq_of_real_abs\n\n",
 "ennnorm_eq_of_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem ennnorm_eq_of_real (hr : 0 ≤ r) : («expr‖ ‖₊» r : ennreal) = ENNReal.ofReal r := by\n  rw [← ofReal_norm_eq_coe_nnnorm, norm_of_nonneg hr]\n#align ennnorm_eq_of_real ennnorm_eq_of_real\n\n",
 "edist_mul_mul_le":
 "#print edist_mul_mul_le /-\n@[to_additive]\ntheorem edist_mul_mul_le (a₁ a₂ b₁ b₂ : E) : edist (a₁ * a₂) (b₁ * b₂) ≤ edist a₁ b₁ + edist a₂ b₂ :=\n  by\n  simp only [edist_nndist]\n  norm_cast\n  apply nndist_mul_mul_le\n#align edist_mul_mul_le edist_mul_mul_le\n#align edist_add_add_le edist_add_add_le\n-/\n\n",
 "edist_eq_coe_nnnorm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print edist_eq_coe_nnnorm_div /-\n@[to_additive]\ntheorem edist_eq_coe_nnnorm_div (a b : E) : edist a b = «expr‖ ‖₊» (a / b) := by\n  rw [edist_dist, dist_eq_norm_div, ofReal_norm_eq_coe_nnnorm']\n#align edist_eq_coe_nnnorm_div edist_eq_coe_nnnorm_div\n#align edist_eq_coe_nnnorm_sub edist_eq_coe_nnnorm_sub\n-/\n\n",
 "edist_eq_coe_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n#print edist_eq_coe_nnnorm' /-\n@[to_additive edist_eq_coe_nnnorm]\ntheorem edist_eq_coe_nnnorm' (x : E) : edist x 1 = («expr‖ ‖₊» x : ennreal) := by rw [edist_eq_coe_nnnorm_div, div_one]\n#align edist_eq_coe_nnnorm' edist_eq_coe_nnnorm'\n#align edist_eq_coe_nnnorm edist_eq_coe_nnnorm\n-/\n\n",
 "div":
 "@[to_additive]\ntheorem div (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) : LipschitzWith (Kf + Kg) fun x => f x / g x := by\n  simpa only [div_eq_mul_inv] using hf.mul' hg.inv\n#align div div\n\n",
 "dist_self_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_self_mul_right /-\n@[simp, to_additive]\ntheorem dist_self_mul_right (a b : E) : dist a (a * b) = «expr‖ ‖» b := by\n  rw [← dist_one_left, ← dist_mul_left a 1 b, mul_one]\n#align dist_self_mul_right dist_self_mul_right\n#align dist_self_add_right dist_self_add_right\n-/\n\n",
 "dist_self_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_self_mul_left /-\n@[simp, to_additive]\ntheorem dist_self_mul_left (a b : E) : dist (a * b) a = «expr‖ ‖» b := by rw [dist_comm, dist_self_mul_right]\n#align dist_self_mul_left dist_self_mul_left\n#align dist_self_add_left dist_self_add_left\n-/\n\n",
 "dist_self_div_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_self_div_right /-\n@[simp, to_additive]\ntheorem dist_self_div_right (a b : E) : dist a (a / b) = «expr‖ ‖» b := by\n  rw [div_eq_mul_inv, dist_self_mul_right, norm_inv']\n#align dist_self_div_right dist_self_div_right\n#align dist_self_sub_right dist_self_sub_right\n-/\n\n",
 "dist_self_div_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_self_div_left /-\n@[simp, to_additive]\ntheorem dist_self_div_left (a b : E) : dist (a / b) a = «expr‖ ‖» b := by rw [dist_comm, dist_self_div_right]\n#align dist_self_div_left dist_self_div_left\n#align dist_self_sub_left dist_self_sub_left\n-/\n\n",
 "dist_prod_prod_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print dist_prod_prod_le_of_le /-\n@[to_additive]\ntheorem dist_prod_prod_le_of_le (s : Finset ι) {f a : ι → E} {d : ι → exprℝ} (h : ∀ b ∈ s, dist (f b) (a b) ≤ d b) :\n    dist (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f b))\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (a b)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (d b) :=\n  by\n  simp only [dist_eq_norm_div, ← Finset.prod_div_distrib] at *\n  exact norm_prod_le_of_le s h\n#align dist_prod_prod_le_of_le dist_prod_prod_le_of_le\n#align dist_sum_sum_le_of_le dist_sum_sum_le_of_le\n-/\n\n",
 "dist_prod_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print dist_prod_prod_le /-\n@[to_additive]\ntheorem dist_prod_prod_le (s : Finset ι) (f a : ι → E) :\n    dist (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f b))\n        (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (a b)) ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (dist (f b) (a b)) :=\n  dist_prod_prod_le_of_le s fun _ _ => le_rfl\n#align dist_prod_prod_le dist_prod_prod_le\n#align dist_sum_sum_le dist_sum_sum_le\n-/\n\n",
 "dist_one_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_one_right /-\n@[simp, to_additive]\ntheorem dist_one_right (a : E) : dist a 1 = «expr‖ ‖» a := by rw [dist_eq_norm_div, div_one]\n#align dist_one_right dist_one_right\n#align dist_zero_right dist_zero_right\n-/\n\n",
 "dist_one_left":
 "#print dist_one_left /-\n@[simp, to_additive]\ntheorem dist_one_left : dist (1 : E) = norm :=\n  funext fun a => by rw [dist_comm, dist_one_right]\n#align dist_one_left dist_one_left\n#align dist_zero_left dist_zero_left\n-/\n\n",
 "dist_norm_norm_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_norm_norm_le' /-\n@[to_additive dist_norm_norm_le]\ntheorem dist_norm_norm_le' (a b : E) : dist («expr‖ ‖» a) («expr‖ ‖» b) ≤ «expr‖ ‖» (a / b) :=\n  abs_norm_sub_norm_le' a b\n#align dist_norm_norm_le' dist_norm_norm_le'\n#align dist_norm_norm_le dist_norm_norm_le\n-/\n\n",
 "dist_mul_self_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_mul_self_right /-\n@[simp, to_additive]\ntheorem dist_mul_self_right (a b : E) : dist b (a * b) = «expr‖ ‖» a := by\n  rw [← dist_one_left, ← dist_mul_right 1 a b, one_mul]\n#align dist_mul_self_right dist_mul_self_right\n#align dist_add_self_right dist_add_self_right\n-/\n\n",
 "dist_mul_self_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_mul_self_left /-\n@[simp, to_additive]\ntheorem dist_mul_self_left (a b : E) : dist (a * b) b = «expr‖ ‖» a := by rw [dist_comm, dist_mul_self_right]\n#align dist_mul_self_left dist_mul_self_left\n#align dist_add_self_left dist_add_self_left\n-/\n\n",
 "dist_mul_mul_le_of_le":
 "#print dist_mul_mul_le_of_le /-\n@[to_additive]\ntheorem dist_mul_mul_le_of_le (h₁ : dist a₁ b₁ ≤ r₁) (h₂ : dist a₂ b₂ ≤ r₂) : dist (a₁ * a₂) (b₁ * b₂) ≤ r₁ + r₂ :=\n  (dist_mul_mul_le a₁ a₂ b₁ b₂).trans <| add_le_add h₁ h₂\n#align dist_mul_mul_le_of_le dist_mul_mul_le_of_le\n#align dist_add_add_le_of_le dist_add_add_le_of_le\n-/\n\n",
 "dist_mul_mul_le":
 "#print dist_mul_mul_le /-\n@[to_additive]\ntheorem dist_mul_mul_le (a₁ a₂ b₁ b₂ : E) : dist (a₁ * a₂) (b₁ * b₂) ≤ dist a₁ b₁ + dist a₂ b₂ := by\n  simpa only [dist_mul_left, dist_mul_right] using dist_triangle (a₁ * a₂) (b₁ * a₂) (b₁ * b₂)\n#align dist_mul_mul_le dist_mul_mul_le\n#align dist_add_add_le dist_add_add_le\n-/\n\n",
 "dist_le_norm_mul_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_le_norm_mul_norm /-\n@[to_additive]\ntheorem dist_le_norm_mul_norm (a b : E) : dist a b ≤ «expr‖ ‖» a + «expr‖ ‖» b :=\n  by\n  rw [dist_eq_norm_div]\n  apply norm_div_le\n#align dist_le_norm_mul_norm dist_le_norm_mul_norm\n#align dist_le_norm_add_norm dist_le_norm_add_norm\n-/\n\n",
 "dist_inv":
 "#print dist_inv /-\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances].\n-- See note [reducible non-instances].\n@[to_additive]\ntheorem dist_inv (x y : E) : dist x⁻¹ y = dist x y⁻¹ := by\n  simp_rw [dist_eq_norm_div, ← norm_inv' (x⁻¹ / y), inv_div, div_inv_eq_mul, mul_comm]\n#align dist_inv dist_inv\n#align dist_neg dist_neg\n-/\n\n",
 "dist_eq_norm_div'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_eq_norm_div' /-\n@[to_additive]\ntheorem dist_eq_norm_div' (a b : E) : dist a b = «expr‖ ‖» (b / a) := by rw [dist_comm, dist_eq_norm_div]\n#align dist_eq_norm_div' dist_eq_norm_div'\n#align dist_eq_norm_sub' dist_eq_norm_sub'\n-/\n\n",
 "dist_eq_norm_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print dist_eq_norm_div /-\n@[to_additive]\ntheorem dist_eq_norm_div (a b : E) : dist a b = «expr‖ ‖» (a / b) :=\n  seminormed_group.dist_eq _ _\n#align dist_eq_norm_div dist_eq_norm_div\n#align dist_eq_norm_sub dist_eq_norm_sub\n-/\n\n",
 "dist_div_eq_dist_mul_right":
 "#print dist_div_eq_dist_mul_right /-\n@[simp, to_additive]\ntheorem dist_div_eq_dist_mul_right (a b c : E) : dist a (b / c) = dist (a * c) b := by\n  rw [← dist_mul_right _ _ c, div_mul_cancel']\n#align dist_div_eq_dist_mul_right dist_div_eq_dist_mul_right\n#align dist_sub_eq_dist_add_right dist_sub_eq_dist_add_right\n-/\n\n",
 "dist_div_eq_dist_mul_left":
 "#print dist_div_eq_dist_mul_left /-\n@[simp, to_additive]\ntheorem dist_div_eq_dist_mul_left (a b c : E) : dist (a / b) c = dist a (c * b) := by\n  rw [← dist_mul_right _ _ b, div_mul_cancel']\n#align dist_div_eq_dist_mul_left dist_div_eq_dist_mul_left\n#align dist_sub_eq_dist_add_left dist_sub_eq_dist_add_left\n-/\n\n",
 "dist_div_div_le_of_le":
 "#print dist_div_div_le_of_le /-\n@[to_additive]\ntheorem dist_div_div_le_of_le (h₁ : dist a₁ b₁ ≤ r₁) (h₂ : dist a₂ b₂ ≤ r₂) : dist (a₁ / a₂) (b₁ / b₂) ≤ r₁ + r₂ :=\n  (dist_div_div_le a₁ a₂ b₁ b₂).trans <| add_le_add h₁ h₂\n#align dist_div_div_le_of_le dist_div_div_le_of_le\n#align dist_sub_sub_le_of_le dist_sub_sub_le_of_le\n-/\n\n",
 "dist_div_div_le":
 "#print dist_div_div_le /-\n@[to_additive]\ntheorem dist_div_div_le (a₁ a₂ b₁ b₂ : E) : dist (a₁ / a₂) (b₁ / b₂) ≤ dist a₁ b₁ + dist a₂ b₂ := by\n  simpa only [div_eq_mul_inv, dist_inv_inv] using dist_mul_mul_le a₁ a₂⁻¹ b₁ b₂⁻¹\n#align dist_div_div_le dist_div_div_le\n#align dist_sub_sub_le dist_sub_sub_le\n-/\n\n",
 "controlled_prod_of_mem_closure_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print controlled_prod_of_mem_closure_range /-\n@[to_additive]\ntheorem controlled_prod_of_mem_closure_range {j : «expr →* » E F} {b : F} (hb : b ∈ closure (j.range : Set F))\n    {f : ℕ → exprℝ} (b_pos : ∀ n, 0 < f n) :\n    ∃ a : ℕ → E,\n      Tendsto\n          (fun n =>\n            finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n              (range (n + 1)) (j (a i)))\n          atTop ((nhds) b) ∧\n        «expr‖ ‖» (j (a 0) / b) < f 0 ∧ ∀ n, 0 < n → «expr‖ ‖» (j (a n)) < f n :=\n  by\n  obtain ⟨v, sum_v, v_in, hv₀, hv_pos⟩ := controlled_prod_of_mem_closure hb b_pos\n  choose g hg using v_in\n  refine' ⟨g, by simpa [← hg] using sum_v, by simpa [hg 0] using hv₀, fun n hn => by simpa [hg] using hv_pos n hn⟩\n#align controlled_prod_of_mem_closure_range controlled_prod_of_mem_closure_range\n#align controlled_sum_of_mem_closure_range controlled_sum_of_mem_closure_range\n-/\n\n",
 "controlled_prod_of_mem_closure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print controlled_prod_of_mem_closure /-\n@[to_additive]\ntheorem controlled_prod_of_mem_closure {s : Subgroup E} (hg : a ∈ closure (s : Set E)) {b : ℕ → exprℝ}\n    (b_pos : ∀ n, 0 < b n) :\n    ∃ v : ℕ → E,\n      Tendsto\n          (fun n =>\n            finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n              (range (n + 1)) (v i))\n          atTop ((nhds) a) ∧\n        (∀ n, v n ∈ s) ∧ «expr‖ ‖» (v 0 / a) < b 0 ∧ ∀ n, 0 < n → «expr‖ ‖» (v n) < b n :=\n  by\n  obtain ⟨u : ℕ → E, u_in : ∀ n, u n ∈ s, lim_u : tendsto u at_top ((nhds) a)⟩ := mem_closure_iff_seq_limit.mp hg\n  obtain ⟨n₀, hn₀⟩ : ∃ n₀, ∀ n ≥ n₀, «expr‖ ‖» (u n / a) < b 0 :=\n    haveI : { x | «expr‖ ‖» (x / a) < b 0 } ∈ (nhds) a :=\n      by\n      simp_rw [← dist_eq_norm_div]\n      exact Metric.ball_mem_nhds _ (b_pos _)\n    filter.tendsto_at_top'.mp lim_u _ this\n  set z : ℕ → E := fun n => u (n + n₀)\n  have lim_z : tendsto z at_top ((nhds) a) := lim_u.comp (tendsto_add_at_top_nat n₀)\n  have mem_𝓤 : ∀ n, { p : E × E | «expr‖ ‖» (p.1 / p.2) < b (n + 1) } ∈ (uniformity) E := fun n => by\n    simpa [← dist_eq_norm_div] using Metric.dist_mem_uniformity (b_pos <| n + 1)\n  obtain ⟨φ : ℕ → ℕ, φ_extr : StrictMono φ, hφ : ∀ n, «expr‖ ‖» (z (φ <| n + 1) / z (φ n)) < b (n + 1)⟩ :=\n    lim_z.cauchy_seq.subseq_mem mem_𝓤\n  set w : ℕ → E := z ∘ φ\n  have hw : tendsto w at_top ((nhds) a) := lim_z.comp φ_extr.tendsto_at_top\n  set v : ℕ → E := fun i => if i = 0 then w 0 else w i / w (i - 1)\n  refine' ⟨v, tendsto.congr (Finset.eq_prod_range_div' w) hw, _, hn₀ _ (n₀.le_add_left _), _⟩\n  · rintro ⟨⟩\n    · change w 0 ∈ s\n      apply u_in\n    · apply s.div_mem <;> apply u_in\n  · intro l hl\n    obtain ⟨k, rfl⟩ : ∃ k, l = k + 1\n    exact nat.exists_eq_succ_of_ne_zero hl.ne'\n    apply hφ\n#align controlled_prod_of_mem_closure controlled_prod_of_mem_closure\n#align controlled_sum_of_mem_closure controlled_sum_of_mem_closure\n-/\n\n",
 "continuous_of_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print MonoidHomClass.continuous_of_bound /-\n/-- A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. -/\n@[to_additive\n      \"A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C`\\nsuch that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`\"]\ntheorem MonoidHomClass.continuous_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) (C : exprℝ)\n    (h : ∀ x, «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» x) : Continuous f :=\n  (MonoidHomClass.lipschitz_of_bound f C h).continuous\n#align monoid_hom_class.continuous_of_bound MonoidHomClass.continuous_of_bound\n#align add_monoid_hom_class.continuous_of_bound AddMonoidHomClass.continuous_of_bound\n-/\n\n",
 "continuous_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print continuous_norm' /-\n@[continuity, to_additive continuous_norm]\ntheorem continuous_norm' : Continuous fun a : E => «expr‖ ‖» a := by\n  simpa using continuous_id.dist (continuous_const : Continuous fun a => (1 : E))\n#align continuous_norm' continuous_norm'\n#align continuous_norm continuous_norm\n-/\n\n",
 "continuous_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print continuous_nnnorm' /-\n@[continuity, to_additive continuous_nnnorm]\ntheorem continuous_nnnorm' : Continuous fun a : E => «expr‖ ‖₊» a :=\n  continuous_norm'.subtype_mk _\n#align continuous_nnnorm' continuous_nnnorm'\n#align continuous_nnnorm continuous_nnnorm\n-/\n\n",
 "comap_norm_nhds_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print comap_norm_nhds_one /-\n@[to_additive]\ntheorem comap_norm_nhds_one : comap norm ((nhds) 0) = (nhds) (1 : E) := by\n  simpa only [dist_one_right] using nhds_comap_dist (1 : E)\n#align comap_norm_nhds_one comap_norm_nhds_one\n#align comap_norm_nhds_zero comap_norm_nhds_zero\n-/\n\n",
 "coe_normGroupSeminorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n#print coe_normGroupSeminorm /-\n@[simp, to_additive]\ntheorem coe_normGroupSeminorm : «expr⇑ » (normGroupSeminorm E) = norm :=\n  rfl\n#align coe_norm_group_seminorm coe_normGroupSeminorm\n#align coe_norm_add_group_seminorm coe_normAddGroupSeminorm\n-/\n\n",
 "coe_normGroupNorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n#print coe_normGroupNorm /-\n@[simp]\ntheorem coe_normGroupNorm : «expr⇑ » (normGroupNorm E) = norm :=\n  rfl\n#align coe_norm_group_norm coe_normGroupNorm\n-/\n\n",
 "coe_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n-- See note [implicit instance arguments]\n-- See note [implicit instance arguments].\n/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `s` is equal to its\nnorm in `E`. -/\n@[simp]\ntheorem coe_norm {_ : Ring 𝕜} [SeminormedAddCommGroup E] {_ : Module 𝕜 E} {s : Submodule 𝕜 E} (x : s) :\n    «expr‖ ‖» x = «expr‖ ‖» (x : E) :=\n  rfl\n#align coe_norm coe_norm\n\n",
 "coe_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print coe_nnnorm' /-\n-- See note [lower instance priority]\n@[simp, norm_cast, to_additive coe_nnnorm]\ntheorem coe_nnnorm' (a : E) : («expr‖ ‖₊» a : exprℝ) = «expr‖ ‖» a :=\n  rfl\n#align coe_nnnorm' coe_nnnorm'\n#align coe_nnnorm coe_nnnorm\n-/\n\n",
 "coe_nat_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n#print NNReal.coe_natAbs /-\ntheorem NNReal.coe_natAbs (n : ℤ) : (n.nat_abs : nnreal) = «expr‖ ‖₊» n :=\n  NNReal.eq <|\n    calc\n      ((n.nat_abs : nnreal) : exprℝ) = (n.nat_abs : ℤ) := by simp only [Int.cast_ofNat, NNReal.coe_nat_cast]\n      _ = |n| := by simp only [Int.coe_natAbs, Int.cast_abs]\n      _ = «expr‖ ‖» n := rfl\n      \n#align nnreal.coe_nat_abs NNReal.coe_natAbs\n-/\n\n",
 "coe_comp_nnnorm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print coe_comp_nnnorm' /-\n@[simp, to_additive coe_comp_nnnorm]\ntheorem coe_comp_nnnorm' : (coe : nnreal → exprℝ) ∘ (nnnorm : E → nnreal) = norm :=\n  rfl\n#align coe_comp_nnnorm' coe_comp_nnnorm'\n#align coe_comp_nnnorm coe_comp_nnnorm\n-/\n\n",
 "closure_one_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print closure_one_eq /-\n@[to_additive]\ntheorem closure_one_eq : closure ({1} : Set E) = { x | «expr‖ ‖» x = 0 } :=\n  Set.ext fun x => mem_closure_one_iff_norm\n#align closure_one_eq closure_one_eq\n#align closure_zero_eq closure_zero_eq\n-/\n\n",
 "cauchySeq_prod_of_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n#print cauchySeq_prod_of_eventually_eq /-\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- short-circuit type class inference\n-- See note [lower instance priority]\n@[to_additive]\ntheorem cauchySeq_prod_of_eventually_eq {u v : ℕ → E} {N : ℕ} (huv : ∀ n ≥ N, u n = v n)\n    (hv :\n      CauchySeq fun n =>\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n          (range (n + 1)) (v k)) :\n    CauchySeq fun n =>\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" (range (n + 1))\n        (u k) :=\n  by\n  let d : ℕ → E := fun n =>\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" (range (n + 1))\n      (u k / v k)\n  rw [show\n      (fun n =>\n          finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n            (range (n + 1)) (u k)) =\n        d * fun n =>\n          finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n            (range (n + 1)) (v k)\n      by\n      ext n\n      simp [d]]\n  suffices ∀ n ≥ N, d n = d N by exact (tendsto_atTop_of_eventually_const this).cauchy_seq.mul hv\n  intro n hn\n  dsimp [d]\n  rw [eventually_constant_prod _ hn]\n  intro m hm\n  simp [huv m hm]\n#align cauchy_seq_prod_of_eventually_eq cauchySeq_prod_of_eventually_eq\n#align cauchy_seq_sum_of_eventually_eq cauchySeq_sum_of_eventually_eq\n-/\n\n",
 "cauchySeq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print NormedCommGroup.cauchySeq_iff /-\n@[to_additive]\ntheorem NormedCommGroup.cauchySeq_iff [Nonempty α] [SemilatticeSup α] {u : α → E} :\n    CauchySeq u ↔ ∀ ε > 0, ∃ N, ∀ m, N ≤ m → ∀ n, N ≤ n → «expr‖ ‖» (u m / u n) < ε := by\n  simp [Metric.cauchySeq_iff, dist_eq_norm_div]\n#align normed_comm_group.cauchy_seq_iff NormedCommGroup.cauchySeq_iff\n#align normed_add_comm_group.cauchy_seq_iff NormedAddCommGroup.cauchySeq_iff\n-/\n\n",
 "bounded_iff_forall_norm_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print bounded_iff_forall_norm_le' /-\n@[to_additive bounded_iff_forall_norm_le]\ntheorem bounded_iff_forall_norm_le' : Bounded s ↔ ∃ C, ∀ x ∈ s, «expr‖ ‖» x ≤ C := by\n  simpa only [Set.subset_def, mem_closedBall_one_iff] using bounded_iff_subset_ball (1 : E)\n#align bounded_iff_forall_norm_le' bounded_iff_forall_norm_le'\n#align bounded_iff_forall_norm_le bounded_iff_forall_norm_le\n-/\n\n",
 "bounded_above_of_compact_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print Continuous.bounded_above_of_compact_support /-\ntheorem Continuous.bounded_above_of_compact_support (hf : Continuous f) (h : HasCompactSupport f) :\n    ∃ C, ∀ x, «expr‖ ‖» (f x) ≤ C := by simpa [bddAbove_def] using hf.norm.bdd_above_range_of_has_compact_support h.norm\n#align continuous.bounded_above_of_compact_support Continuous.bounded_above_of_compact_support\n-/\n\n",
 "bound_of_antilipschitz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print MonoidHomClass.bound_of_antilipschitz /-\n@[to_additive]\ntheorem MonoidHomClass.bound_of_antilipschitz [MonoidHomClass 𝓕 E F] (f : 𝓕) {K : nnreal} (h : AntilipschitzWith K f)\n    (x) : «expr‖ ‖» x ≤ K * «expr‖ ‖» (f x) := by simpa only [dist_one_right, map_one] using h.le_mul_dist x 1\n#align monoid_hom_class.bound_of_antilipschitz MonoidHomClass.bound_of_antilipschitz\n#align add_monoid_hom_class.bound_of_antilipschitz AddMonoidHomClass.bound_of_antilipschitz\n-/\n\n",
 "ball_one_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print ball_one_eq /-\n@[to_additive]\ntheorem ball_one_eq (r : exprℝ) : ball (1 : E) r = { x | «expr‖ ‖» x < r } :=\n  Set.ext fun a => by simp\n#align ball_one_eq ball_one_eq\n#align ball_zero_eq ball_zero_eq\n-/\n\n",
 "ball_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print ball_eq' /-\n@[to_additive ball_eq]\ntheorem ball_eq' (y : E) (ε : exprℝ) : ball y ε = { x | «expr‖ ‖» (x / y) < ε } :=\n  Set.ext fun a => by simp [dist_eq_norm_div]\n#align ball_eq' ball_eq'\n#align ball_eq ball_eq\n-/\n\n",
 "antilipschitz_of_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print MonoidHomClass.antilipschitz_of_bound /-\n@[to_additive]\ntheorem MonoidHomClass.antilipschitz_of_bound [MonoidHomClass 𝓕 E F] (f : 𝓕) {K : nnreal}\n    (h : ∀ x, «expr‖ ‖» x ≤ K * «expr‖ ‖» (f x)) : AntilipschitzWith K f :=\n  AntilipschitzWith.of_le_mul_dist fun x y => by simpa only [dist_eq_norm_div, map_div] using h (x / y)\n#align monoid_hom_class.antilipschitz_of_bound MonoidHomClass.antilipschitz_of_bound\n#align add_monoid_hom_class.antilipschitz_of_bound AddMonoidHomClass.antilipschitz_of_bound\n-/\n\n",
 "abs_norm_sub_norm_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print abs_norm_sub_norm_le' /-\n@[to_additive abs_norm_sub_norm_le]\ntheorem abs_norm_sub_norm_le' (a b : E) : |«expr‖ ‖» a - «expr‖ ‖» b| ≤ «expr‖ ‖» (a / b) := by\n  simpa [dist_eq_norm_div] using abs_dist_sub_le a b 1\n#align abs_norm_sub_norm_le' abs_norm_sub_norm_le'\n#align abs_norm_sub_norm_le abs_norm_sub_norm_le\n-/\n\n",
 "abs_le_floor_nnreal_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem abs_le_floor_nnreal_iff (z : ℤ) (c : nnreal) : |z| ≤ «expr⌊ ⌋₊» c ↔ «expr‖ ‖₊» z ≤ c :=\n  by\n  rw [Int.abs_eq_natAbs, Int.ofNat_le, Nat.le_floor_iff (zero_le c)]\n  congr\n  exact NNReal.coe_natAbs z\n#align abs_le_floor_nnreal_iff abs_le_floor_nnreal_iff\n\n",
 "abs_dist_sub_le_dist_mul_mul":
 "#print abs_dist_sub_le_dist_mul_mul /-\n@[to_additive]\ntheorem abs_dist_sub_le_dist_mul_mul (a₁ a₂ b₁ b₂ : E) : |dist a₁ b₁ - dist a₂ b₂| ≤ dist (a₁ * a₂) (b₁ * b₂) := by\n  simpa only [dist_mul_left, dist_mul_right, dist_comm b₂] using abs_dist_sub_le (a₁ * a₂) (b₁ * b₂) (b₁ * a₂)\n#align abs_dist_sub_le_dist_mul_mul abs_dist_sub_le_dist_mul_mul\n#align abs_dist_sub_le_dist_add_add abs_dist_sub_le_dist_add_add\n-/\n\n"}