{"to_fun_eq_coe":
 "@[simp]\ntheorem to_fun_eq_coe (p : mul_ring_norm R) : p.to_fun = p :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "seminorm_one_eq_one_iff_ne_zero":
 "theorem seminorm_one_eq_one_iff_ne_zero (hp : p 1 ≤ 1) : p 1 = 1 ↔ p ≠ 0 :=\n  by\n  refine'\n    ⟨fun h =>\n      ne_zero_iff.mpr\n        ⟨1, by\n          rw [h]\n          exact one_ne_zero⟩,\n      fun h => _⟩\n  obtain hp0 | hp0 := (map_nonneg p (1 : R)).eq_or_gt\n  · cases h (ext fun x => (map_nonneg _ _).antisymm' _)\n    simpa only [hp0, mul_one, mul_zero] using map_mul_le_mul p x 1\n  · refine' hp.antisymm ((le_mul_iff_one_le_left hp0).1 _)\n    simpa only [one_mul] using map_mul_le_mul p (1 : R) _\n#align seminorm_one_eq_one_iff_ne_zero seminorm_one_eq_one_iff_ne_zero\n\n",
 "neZero_iff":
 "#print neZero_iff /-\ntheorem neZero_iff {p : ring_seminorm R} : p ≠ 0 ↔ ∃ x, p x ≠ 0 := by simp [eq_zero_iff]\n#align ne_zero_iff neZero_iff\n-/\n\n",
 "ext":
 "@[ext]\ntheorem ext {p q : mul_ring_norm R} : (∀ x, p x = q x) → p = q :=\n  fun_like.ext p q\n#align ext ext\n\n",
 "eq_zero_iff":
 "theorem eq_zero_iff {p : ring_seminorm R} : p = 0 ↔ ∀ x, p x = 0 :=\n  fun_like.ext_iff\n#align eq_zero_iff eq_zero_iff\n\n",
 "apply_one":
 "@[simp]\ntheorem apply_one (x : R) : (1 : mul_ring_norm R) x = if x = 0 then 0 else 1 :=\n  rfl\n#align apply_one apply_one\n\n"}