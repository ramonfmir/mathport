{"tendsto_uniformly_on_deriv_of_cthickening_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem tendsto_uniformly_on_deriv_of_cthickening_subset (hf : tendsto_locally_uniformly_on F f φ U)\n    (hF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n        (differentiable_on (exprℂ) (F n) U))\n    {δ : exprℝ} (hδ : 0 < δ) (hK : is_compact K) (hU : is_open U) (hKU : cthickening δ K ⊆ U) :\n    tendsto_uniformly_on (deriv ∘ F) (cderiv δ f) φ K :=\n  by\n  have h1 :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n      (continuous_on (F n) (cthickening δ K)) :=\n    by filter_upwards [hF] with n h using h.continuous_on.mono hKU\n  have h2 : is_compact (cthickening δ K) := is_compact_of_is_closed_bounded is_closed_cthickening hK.bounded.cthickening\n  have h3 : tendsto_uniformly_on F f φ (cthickening δ K) :=\n    (tendsto_locally_uniformly_on_iff_forall_is_compact hU).mp hf (cthickening δ K) hKU h2\n  apply (h3.cderiv hδ h1).congr\n  filter_upwards [hF] with n h z hz\n  exact cderiv_eq_deriv hU h hδ ((closed_ball_subset_cthickening hz δ).trans hKU)\n#align tendsto_uniformly_on_deriv_of_cthickening_subset tendsto_uniformly_on_deriv_of_cthickening_subset\n\n",
 "norm_cderiv_sub_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_cderiv_sub_lt (hr : 0 < r) (hfg : ∀ w ∈ sphere z r, «expr‖ ‖» (f w - g w) < M)\n    (hf : continuous_on f (sphere z r)) (hg : continuous_on g (sphere z r)) :\n    «expr‖ ‖» (cderiv r f z - cderiv r g z) < M / r :=\n  cderiv_sub hr hf hg ▸ norm_cderiv_lt hr hfg (hf.sub hg)\n#align norm_cderiv_sub_lt norm_cderiv_sub_lt\n\n",
 "norm_cderiv_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_cderiv_lt (hr : 0 < r) (hfM : ∀ w ∈ sphere z r, «expr‖ ‖» (f w) < M) (hf : continuous_on f (sphere z r)) :\n    «expr‖ ‖» (cderiv r f z) < M / r :=\n  by\n  obtain ⟨L, hL1, hL2⟩ : ∃ L < M, ∀ w ∈ sphere z r, «expr‖ ‖» (f w) ≤ L :=\n    by\n    have e1 : (sphere z r).nonempty := normed_space.sphere_nonempty.mpr hr.le\n    have e2 : continuous_on (fun w => «expr‖ ‖» (f w)) (sphere z r) := continuous_norm.comp_continuous_on hf\n    obtain ⟨x, hx, hx'⟩ := (is_compact_sphere z r).exists_forall_ge e1 e2\n    exact ⟨«expr‖ ‖» (f x), hfM x hx, hx'⟩\n  exact (norm_cderiv_le hr hL2).trans_lt ((div_lt_div_right hr).mpr hL1)\n#align norm_cderiv_lt norm_cderiv_lt\n\n",
 "norm_cderiv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_cderiv_le (hr : 0 < r) (hf : ∀ w ∈ sphere z r, «expr‖ ‖» (f w) ≤ M) : «expr‖ ‖» (cderiv r f z) ≤ M / r :=\n  by\n  have hM : 0 ≤ M :=\n    by\n    obtain ⟨w, hw⟩ : (sphere z r).nonempty := normed_space.sphere_nonempty.mpr hr.le\n    exact (norm_nonneg _).trans (hf w hw)\n  have h1 : ∀ w ∈ sphere z r, «expr‖ ‖» («expr • » ((w - z) ^ 2)⁻¹ (f w)) ≤ M / r ^ 2 :=\n    by\n    intro w hw\n    simp only [mem_sphere_iff_norm, norm_eq_abs] at hw\n    simp only [norm_smul, inv_mul_eq_div, hw, norm_eq_abs, map_inv₀, complex.abs_pow]\n    exact div_le_div hM (hf w hw) (sq_pos_of_pos hr) le_rfl\n  have h2 := circle_integral.norm_integral_le_of_norm_le_const hr.le h1\n  simp only [cderiv, norm_smul]\n  refine' (mul_le_mul le_rfl h2 (norm_nonneg _) (norm_nonneg _)).trans (le_of_eq _)\n  field_simp [_root_.abs_of_nonneg real.pi_pos.le, real.pi_pos.ne.symm, hr.ne.symm]\n  ring\n#align norm_cderiv_le norm_cderiv_le\n\n",
 "exists_cthickening_tendsto_uniformly_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem exists_cthickening_tendsto_uniformly_on (hf : tendsto_locally_uniformly_on F f φ U)\n    (hF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n        (differentiable_on (exprℂ) (F n) U))\n    (hK : is_compact K) (hU : is_open U) (hKU : K ⊆ U) :\n    ∃ δ > 0, cthickening δ K ⊆ U ∧ tendsto_uniformly_on (deriv ∘ F) (cderiv δ f) φ K :=\n  by\n  obtain ⟨δ, hδ, hKδ⟩ := hK.exists_cthickening_subset_open hU hKU\n  exact ⟨δ, hδ, hKδ, tendsto_uniformly_on_deriv_of_cthickening_subset hf hF hδ hK hU hKδ⟩\n#align exists_cthickening_tendsto_uniformly_on exists_cthickening_tendsto_uniformly_on\n\n",
 "differentiable_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- A locally uniform limit of holomorphic functions on an open domain of the complex plane is\nholomorphic (the derivatives converge locally uniformly to that of the limit, which is proved\nas `tendsto_locally_uniformly_on.deriv`). -/\ntheorem _root_.tendsto_locally_uniformly_on.differentiable_on [φ.ne_bot] (hf : tendsto_locally_uniformly_on F f φ U)\n    (hF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n        (differentiable_on (exprℂ) (F n) U))\n    (hU : is_open U) : differentiable_on (exprℂ) f U :=\n  by\n  rintro x hx\n  obtain ⟨K, ⟨hKx, hK⟩, hKU⟩ := (compact_basis_nhds x).mem_iff.mp (hU.mem_nhds hx)\n  obtain ⟨δ, hδ, -, h1⟩ := exists_cthickening_tendsto_uniformly_on hf hF hK hU hKU\n  have h2 : interior K ⊆ U := interior_subset.trans hKU\n  have h3 :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n      (differentiable_on (exprℂ) (F n) (interior K))\n  filter_upwards [hF] with n h using h.mono h2\n  have h4 : tendsto_locally_uniformly_on F f φ (interior K) := hf.mono h2\n  have h5 : tendsto_locally_uniformly_on (deriv ∘ F) (cderiv δ f) φ (interior K) :=\n    h1.tendsto_locally_uniformly_on.mono interior_subset\n  have h6 : ∀ x ∈ interior K, has_deriv_at f (cderiv δ f x) x := fun x h =>\n    has_deriv_at_of_tendsto_locally_uniformly_on' is_open_interior h5 h3 (fun _ => h4.tendsto_at) h\n  have h7 : differentiable_on (exprℂ) f (interior K) := fun x hx => (h6 x hx).differentiable_at.differentiable_within_at\n  exact (h7.differentiable_at (interior_mem_nhds.mpr hKx)).differentiable_within_at\n#align tendsto_locally_uniformly_on.differentiable_on tendsto_locally_uniformly_on.differentiable_on\n\n",
 "deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem _root_.tendsto_locally_uniformly_on.deriv (hf : tendsto_locally_uniformly_on F f φ U)\n    (hF :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n        (differentiable_on (exprℂ) (F n) U))\n    (hU : is_open U) : tendsto_locally_uniformly_on (deriv ∘ F) (deriv f) φ U :=\n  by\n  rw [tendsto_locally_uniformly_on_iff_forall_is_compact hU]\n  by_cases φ = «expr⊥»\n  · simp only [h, tendsto_uniformly_on, eventually_bot, imp_true_iff]\n  haveI : φ.ne_bot := ne_bot_iff.2 h\n  rintro K hKU hK\n  obtain ⟨δ, hδ, hK4, h⟩ := exists_cthickening_tendsto_uniformly_on hf hF hK hU hKU\n  refine' h.congr_right fun z hz => cderiv_eq_deriv hU (hf.differentiable_on hF hU) hδ _\n  exact (closed_ball_subset_cthickening hz δ).trans hK4\n#align tendsto_locally_uniformly_on.deriv tendsto_locally_uniformly_on.deriv\n\n",
 "cderiv_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem cderiv_sub (hr : 0 < r) (hf : continuous_on f (sphere z r)) (hg : continuous_on g (sphere z r)) :\n    cderiv r (f - g) z = cderiv r f z - cderiv r g z :=\n  by\n  have h1 : continuous_on (fun w : exprℂ => ((w - z) ^ 2)⁻¹) (sphere z r) :=\n    by\n    refine' ((continuous_id'.sub continuous_const).pow 2).continuous_on.inv₀ fun w hw h => hr.ne _\n    rwa [mem_sphere_iff_norm, sq_eq_zero_iff.mp h, norm_zero] at hw\n  simp_rw [cderiv, ← smul_sub]\n  congr 1\n  simpa only [pi.sub_apply, smul_sub] using\n    circle_integral.integral_sub ((h1.smul hf).circle_integrable hr.le) ((h1.smul hg).circle_integrable hr.le)\n#align cderiv_sub cderiv_sub\n\n",
 "cderiv_eq_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-\nCopyright (c) 2022 Vincent Beffara. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Vincent Beffara\n-/\ntheorem cderiv_eq_deriv (hU : is_open U) (hf : differentiable_on (exprℂ) f U) (hr : 0 < r) (hzr : closed_ball z r ⊆ U) :\n    cderiv r f z = deriv f z :=\n  two_pi_I_inv_smul_circle_integral_sub_sq_inv_smul_of_differentiable hU hzr hf (mem_ball_self hr)\n#align cderiv_eq_deriv cderiv_eq_deriv\n\n",
 "cderiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem tendsto_uniformly_on.cderiv (hF : tendsto_uniformly_on F f φ (cthickening δ K)) (hδ : 0 < δ)\n    (hFn :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" φ\n        (continuous_on (F n) (cthickening δ K))) :\n    tendsto_uniformly_on (cderiv δ ∘ F) (cderiv δ f) φ K :=\n  by\n  by_cases φ = «expr⊥»\n  · simp only [h, tendsto_uniformly_on, eventually_bot, imp_true_iff]\n  haveI : φ.ne_bot := ne_bot_iff.2 h\n  have e1 : continuous_on f (cthickening δ K) := tendsto_uniformly_on.continuous_on hF hFn\n  rw [tendsto_uniformly_on_iff] at hF⊢\n  rintro ε hε\n  filter_upwards [hF (ε * δ) (mul_pos hε hδ), hFn] with n h h' z hz\n  simp_rw [dist_eq_norm] at h⊢\n  have e2 : ∀ w ∈ sphere z δ, «expr‖ ‖» (f w - F n w) < ε * δ := fun w hw1 =>\n    h w (closed_ball_subset_cthickening hz δ (sphere_subset_closed_ball hw1))\n  have e3 := sphere_subset_closed_ball.trans (closed_ball_subset_cthickening hz δ)\n  have hf : continuous_on f (sphere z δ) :=\n    e1.mono (sphere_subset_closed_ball.trans (closed_ball_subset_cthickening hz δ))\n  simpa only [mul_div_cancel _ hδ.ne.symm] using norm_cderiv_sub_lt hδ e2 hf (h'.mono e3)\n#align tendsto_uniformly_on.cderiv tendsto_uniformly_on.cderiv\n\n"}