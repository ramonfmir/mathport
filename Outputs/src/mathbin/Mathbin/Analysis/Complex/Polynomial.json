{"exists_root":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-\nCopyright (c) 2019 Chris Hughes All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Junyan Xu\n-/\n/-- **Fundamental theorem of algebra**: every non constant complex polynomial\n  has a root -/\ntheorem exists_root {f : polynomial (exprℂ)} (hf : 0 < degree f) : ∃ z : exprℂ, IsRoot f z :=\n  by\n  contrapose! hf\n  obtain ⟨c, hc⟩ := (f.differentiable.inv hf).exists_const_forall_eq_of_bounded _\n  · obtain rfl : f = C c⁻¹ := Polynomial.funext fun z => by rw [eval_C, ← hc z, inv_inv]\n    exact degree_C_le\n  · obtain ⟨z₀, h₀⟩ := f.exists_forall_norm_le\n    simp only [bounded_iff_forall_norm_le, Set.forall_range_iff, norm_inv]\n    exact ⟨(«expr‖ ‖» (eval z₀ f))⁻¹, fun z => inv_le_inv_of_le (norm_pos_iff.2 <| hf z₀) (h₀ z)⟩\n#align exists_root exists_root\n\n"}