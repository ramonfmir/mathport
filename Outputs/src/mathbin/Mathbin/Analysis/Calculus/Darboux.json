{"exists_has_deriv_within_at_eq_of_lt_of_gt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- **Darboux's theorem**: if `a ≤ b` and `f' a > m > f' b`, then `f' c = m` for some `c ∈ [a, b]`.\n-/\ntheorem exists_has_deriv_within_at_eq_of_lt_of_gt (hab : a ≤ b)\n    (hf : ∀ x ∈ Icc a b, has_deriv_within_at f (f' x) (Icc a b) x) {m : exprℝ} (hma : m < f' a) (hmb : f' b < m) :\n    m ∈ «expr '' » f' (Icc a b) :=\n  let ⟨c, cmem, hc⟩ :=\n    exists_has_deriv_within_at_eq_of_gt_of_lt hab (fun x hx => (hf x hx).neg) (neg_lt_neg hma) (neg_lt_neg hmb)\n  ⟨c, cmem, neg_injective hc⟩\n#align exists_has_deriv_within_at_eq_of_lt_of_gt exists_has_deriv_within_at_eq_of_lt_of_gt\n\n",
 "exists_has_deriv_within_at_eq_of_gt_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n/-- **Darboux's theorem**: if `a ≤ b` and `f' a < m < f' b`, then `f' c = m` for some\n`c ∈ [a, b]`. -/\ntheorem exists_has_deriv_within_at_eq_of_gt_of_lt (hab : a ≤ b)\n    (hf : ∀ x ∈ Icc a b, has_deriv_within_at f (f' x) (Icc a b) x) {m : exprℝ} (hma : f' a < m) (hmb : m < f' b) :\n    m ∈ «expr '' » f' (Icc a b) :=\n  by\n  have hab' : a < b := by\n    refine' lt_of_le_of_ne hab fun hab' => _\n    subst b\n    exact lt_asymm hma hmb\n  set g : exprℝ → exprℝ := fun x => f x - m * x\n  have hg : ∀ x ∈ Icc a b, has_deriv_within_at g (f' x - m) (Icc a b) x :=\n    by\n    intro x hx\n    simpa using (hf x hx).sub ((has_deriv_within_at_id x _).const_mul m)\n  obtain ⟨c, cmem, hc⟩ : ∃ c ∈ Icc a b, is_min_on g (Icc a b) c\n  exact is_compact_Icc.exists_forall_le (nonempty_Icc.2 <| hab) fun x hx => (hg x hx).continuous_within_at\n  have cmem' : c ∈ Ioo a b := by\n    cases' eq_or_lt_of_le cmem.1 with hac hac\n    -- Show that `c` can't be equal to `a`\n    · subst c\n      refine' absurd (sub_nonneg.1 <| nonneg_of_mul_nonneg_right _ (sub_pos.2 hab')) (not_le_of_lt hma)\n      have : b - a ∈ pos_tangent_cone_at (Icc a b) a :=\n        mem_pos_tangent_cone_at_of_segment_subset (segment_eq_Icc hab ▸ subset.refl _)\n      simpa [-sub_nonneg, -continuous_linear_map.map_sub] using\n        hc.localize.has_fderiv_within_at_nonneg (hg a (left_mem_Icc.2 hab)) this\n    cases' eq_or_lt_of_le cmem.2 with hbc hbc\n    -- Show that `c` can't be equal to `b`\n    · subst c\n      refine' absurd (sub_nonpos.1 <| nonpos_of_mul_nonneg_right _ (sub_lt_zero.2 hab')) (not_le_of_lt hmb)\n      have : a - b ∈ pos_tangent_cone_at (Icc a b) b :=\n        mem_pos_tangent_cone_at_of_segment_subset (by rw [segment_symm, segment_eq_Icc hab])\n      simpa [-sub_nonneg, -continuous_linear_map.map_sub] using\n        hc.localize.has_fderiv_within_at_nonneg (hg b (right_mem_Icc.2 hab)) this\n    exact ⟨hac, hbc⟩\n  use c, cmem\n  rw [← sub_eq_zero]\n  have : Icc a b ∈ (nhds) c := by rwa [← mem_interior_iff_mem_nhds, interior_Icc]\n  exact (hc.is_local_min this).has_deriv_at_eq_zero ((hg c cmem).has_deriv_at this)\n#align exists_has_deriv_within_at_eq_of_gt_of_lt exists_has_deriv_within_at_eq_of_gt_of_lt\n\n",
 "deriv_forall_lt_or_forall_gt_of_forall_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If the derivative of a function is never equal to `m`, then either\nit is always greater than `m`, or it is always less than `m`. -/\ntheorem deriv_forall_lt_or_forall_gt_of_forall_ne {s : set (exprℝ)} (hs : convex (exprℝ) s)\n    (hf : ∀ x ∈ s, has_deriv_at f (f' x) x) {m : exprℝ} (hf' : ∀ x ∈ s, f' x ≠ m) :\n    (∀ x ∈ s, f' x < m) ∨ ∀ x ∈ s, m < f' x := by\n  contrapose! hf'\n  rcases hf' with ⟨⟨b, hb, hmb⟩, ⟨a, ha, hma⟩⟩\n  exact (convex_image_has_deriv_at hs hf).ord_connected.out (mem_image_of_mem f' ha) (mem_image_of_mem f' hb) ⟨hma, hmb⟩\n#align deriv_forall_lt_or_forall_gt_of_forall_ne deriv_forall_lt_or_forall_gt_of_forall_ne\n\n",
 "convex_image_has_deriv_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- **Darboux's theorem**: the image of a convex set under `f'` is a convex set. -/\ntheorem convex_image_has_deriv_at {s : set (exprℝ)} (hs : convex (exprℝ) s) (hf : ∀ x ∈ s, has_deriv_at f (f' x) x) :\n    convex (exprℝ) («expr '' » f' s) := by\n  refine' ord_connected.convex ⟨_⟩\n  rintro _ ⟨a, ha, rfl⟩ _ ⟨b, hb, rfl⟩ m ⟨hma, hmb⟩\n  cases' eq_or_lt_of_le hma with hma hma\n  · exact hma ▸ mem_image_of_mem f' ha\n  cases' eq_or_lt_of_le hmb with hmb hmb\n  · exact hmb.symm ▸ mem_image_of_mem f' hb\n  cases' le_total a b with hab hab\n  · have : Icc a b ⊆ s := hs.ord_connected.out ha hb\n    rcases exists_has_deriv_within_at_eq_of_gt_of_lt hab (fun x hx => (hf x <| this hx).has_deriv_within_at) hma\n        hmb with\n      ⟨c, cmem, hc⟩\n    exact ⟨c, this cmem, hc⟩\n  · have : Icc b a ⊆ s := hs.ord_connected.out hb ha\n    rcases exists_has_deriv_within_at_eq_of_lt_of_gt hab (fun x hx => (hf x <| this hx).has_deriv_within_at) hmb\n        hma with\n      ⟨c, cmem, hc⟩\n    exact ⟨c, this cmem, hc⟩\n#align convex_image_has_deriv_at convex_image_has_deriv_at\n\n"}