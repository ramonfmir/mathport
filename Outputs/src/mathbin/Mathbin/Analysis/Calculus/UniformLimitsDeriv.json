{"uniform_cauchy_seq_on_filter_of_fderiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-\nCopyright (c) 2022 Kevin H. Wilson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin H. Wilson\n-/\n/-- If a sequence of functions real or complex functions are eventually differentiable on a\nneighborhood of `x`, they are Cauchy _at_ `x`, and their derivatives\nare a uniform Cauchy sequence in a neighborhood of `x`, then the functions form a uniform Cauchy\nsequence in a neighborhood of `x`. -/\ntheorem uniform_cauchy_seq_on_filter_of_fderiv (hf' : uniform_cauchy_seq_on_filter f' l ((nhds) x))\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n        (filter.prod l ((nhds) x)) (has_fderiv_at (f n.1) (f' n.1 n.2) n.2))\n    (hfg : cauchy (map (fun n => f n x) l)) : uniform_cauchy_seq_on_filter f l ((nhds) x) :=\n  by\n  let : normed_space (expr‚Ñù) E\n  exact normed_space.restrict_scalars (expr‚Ñù) ùïú _\n  rw [seminormed_add_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_zero] at hf'‚ä¢\n  suffices\n    tendsto_uniformly_on_filter (fun (n : Œπ √ó Œπ) (z : E) => f n.1 z - f n.2 z - (f n.1 x - f n.2 x)) 0 (filter.prod l l)\n        ((nhds) x) ‚àß\n      tendsto_uniformly_on_filter (fun (n : Œπ √ó Œπ) (z : E) => f n.1 x - f n.2 x) 0 (filter.prod l l) ((nhds) x)\n    by\n    have := this.1.add this.2\n    rw [add_zero] at this\n    exact this.congr (by simp)\n  constructor\n  ¬∑ -- This inequality follows from the mean value theorem. To apply it, we will need to shrink our\n    -- neighborhood to small enough ball\n    rw [metric.tendsto_uniformly_on_filter_iff] at hf'‚ä¢\n    intro Œµ hŒµ\n    have := (tendsto_swap4_prod.eventually (hf.prod_mk hf)).diag_of_prod_right\n    obtain ‚ü®a, b, c, d, e‚ü© := eventually_prod_iff.1 ((hf' Œµ hŒµ).and this)\n    obtain ‚ü®R, hR, hR'‚ü© := metric.nhds_basis_ball.eventually_iff.mp d\n    let r := min 1 R\n    have hr : 0 < r := by simp [hR]\n    have hr' : ‚àÄ ‚¶Éy : E‚¶Ñ, y ‚àà metric.ball x r ‚Üí c y := fun y hy =>\n      hR' (lt_of_lt_of_le (metric.mem_ball.mp hy) (min_le_right _ _))\n    have hxy : ‚àÄ y : E, y ‚àà metric.ball x r ‚Üí ¬´expr‚Äñ ‚Äñ¬ª (y - x) < 1 :=\n      by\n      intro y hy\n      rw [metric.mem_ball, dist_eq_norm] at hy\n      exact lt_of_lt_of_le hy (min_le_left _ _)\n    have hxyŒµ : ‚àÄ y : E, y ‚àà metric.ball x r ‚Üí Œµ * ¬´expr‚Äñ ‚Äñ¬ª (y - x) < Œµ :=\n      by\n      intro y hy\n      exact (mul_lt_iff_lt_one_right hŒµ.lt).mpr (hxy y hy)\n    -- With a small ball in hand, apply the mean value theorem\n    refine'\n      eventually_prod_iff.mpr\n        ‚ü®_, b, fun e : E => metric.ball x r e, eventually_mem_set.mpr (metric.nhds_basis_ball.mem_of_mem hr),\n          fun n hn y hy => _‚ü©\n    simp only [pi.zero_apply, dist_zero_left] at e‚ä¢\n    refine' lt_of_le_of_lt _ (hxyŒµ y hy)\n    exact\n      convex.norm_image_sub_le_of_norm_has_fderiv_within_le\n        (fun y hy => ((e hn (hr' hy)).2.1.sub (e hn (hr' hy)).2.2).has_fderiv_within_at)\n        (fun y hy => (e hn (hr' hy)).1.le) (convex_ball x r) (metric.mem_ball_self hr) hy\n  ¬∑ -- This is just `hfg` run through `eventually_prod_iff`\n    refine' metric.tendsto_uniformly_on_filter_iff.mpr fun Œµ hŒµ => _\n    obtain ‚ü®t, ht, ht'‚ü© := (metric.cauchy_iff.mp hfg).2 Œµ hŒµ\n    exact\n      eventually_prod_iff.mpr\n        ‚ü®fun n : Œπ √ó Œπ => f n.1 x ‚àà t ‚àß f n.2 x ‚àà t,\n          eventually_prod_iff.mpr ‚ü®_, ht, _, ht, fun n hn n' hn' => ‚ü®hn, hn'‚ü©‚ü©, fun y => true, by simp, fun n hn y hy =>\n          by simpa [norm_sub_rev, dist_eq_norm] using ht' _ hn.1 _ hn.2‚ü©\n#align uniform_cauchy_seq_on_filter_of_fderiv uniform_cauchy_seq_on_filter_of_fderiv\n\n",
 "uniform_cauchy_seq_on_filter_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem uniform_cauchy_seq_on_filter_of_deriv (hf' : uniform_cauchy_seq_on_filter f' l ((nhds) x))\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n        (filter.prod l ((nhds) x)) (has_deriv_at (f n.1) (f' n.1 n.2) n.2))\n    (hfg : cauchy (map (fun n => f n x) l)) : uniform_cauchy_seq_on_filter f l ((nhds) x) :=\n  by\n  simp_rw [has_deriv_at_iff_has_fderiv_at] at hf\n  exact uniform_cauchy_seq_on_filter_of_fderiv hf'.one_smul_right hf hfg\n#align uniform_cauchy_seq_on_filter_of_deriv uniform_cauchy_seq_on_filter_of_deriv\n\n",
 "uniform_cauchy_seq_on_ball_of_fderiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- A variant of the second fundamental theorem of calculus (FTC-2): If a sequence of functions\nbetween real or complex normed spaces are differentiable on a ball centered at `x`, they\nform a Cauchy sequence _at_ `x`, and their derivatives are Cauchy uniformly on the ball, then the\nfunctions form a uniform Cauchy sequence on the ball.\n\nNOTE: The fact that we work on a ball is typically all that is necessary to work with power series\nand Dirichlet series (our primary use case). However, this can be generalized by replacing the ball\nwith any connected, bounded, open set and replacing uniform convergence with local uniform\nconvergence. See `cauchy_map_of_uniform_cauchy_seq_on_fderiv`.\n-/\ntheorem uniform_cauchy_seq_on_ball_of_fderiv {r : expr‚Ñù} (hf' : uniform_cauchy_seq_on f' l (metric.ball x r))\n    (hf : ‚àÄ n : Œπ, ‚àÄ y : E, y ‚àà metric.ball x r ‚Üí has_fderiv_at (f n) (f' n y) y)\n    (hfg : cauchy (map (fun n => f n x) l)) : uniform_cauchy_seq_on f l (metric.ball x r) :=\n  by\n  let : normed_space (expr‚Ñù) E\n  exact normed_space.restrict_scalars (expr‚Ñù) ùïú _\n  have : ne_bot l := (cauchy_map_iff.1 hfg).1\n  rcases le_or_lt r 0 with (hr | hr)\n  ¬∑\n    simp only [metric.ball_eq_empty.2 hr, uniform_cauchy_seq_on, Set.mem_empty_iff_false, is_empty.forall_iff,\n      eventually_const, imp_true_iff]\n  rw [seminormed_add_group.uniform_cauchy_seq_on_iff_tendsto_uniformly_on_zero] at hf'‚ä¢\n  suffices\n    tendsto_uniformly_on (fun (n : Œπ √ó Œπ) (z : E) => f n.1 z - f n.2 z - (f n.1 x - f n.2 x)) 0 (filter.prod l l)\n        (metric.ball x r) ‚àß\n      tendsto_uniformly_on (fun (n : Œπ √ó Œπ) (z : E) => f n.1 x - f n.2 x) 0 (filter.prod l l) (metric.ball x r)\n    by\n    have := this.1.add this.2\n    rw [add_zero] at this\n    refine' this.congr _\n    apply eventually_of_forall\n    intro n z hz\n    simp\n  constructor\n  ¬∑ -- This inequality follows from the mean value theorem\n    rw [metric.tendsto_uniformly_on_iff] at hf'‚ä¢\n    intro Œµ hŒµ\n    obtain ‚ü®q, hqpos, hq‚ü© : ‚àÉ q : expr‚Ñù, 0 < q ‚àß q * r < Œµ :=\n      by\n      simp_rw [mul_comm]\n      exact exists_pos_mul_lt hŒµ.lt r\n    apply (hf' q hqpos.gt).mono\n    intro n hn y hy\n    simp_rw [dist_eq_norm, pi.zero_apply, zero_sub, norm_neg] at hn‚ä¢\n    have mvt :=\n      convex.norm_image_sub_le_of_norm_has_fderiv_within_le\n        (fun z hz => ((hf n.1 z hz).sub (hf n.2 z hz)).has_fderiv_within_at) (fun z hz => (hn z hz).le)\n        (convex_ball x r) (metric.mem_ball_self hr) hy\n    refine' lt_of_le_of_lt mvt _\n    have : q * ¬´expr‚Äñ ‚Äñ¬ª (y - x) < q * r :=\n      mul_lt_mul' rfl.le (by simpa only [dist_eq_norm] using metric.mem_ball.mp hy) (norm_nonneg _) hqpos\n    exact this.trans hq\n  ¬∑ -- This is just `hfg` run through `eventually_prod_iff`\n    refine' metric.tendsto_uniformly_on_iff.mpr fun Œµ hŒµ => _\n    obtain ‚ü®t, ht, ht'‚ü© := (metric.cauchy_iff.mp hfg).2 Œµ hŒµ\n    rw [eventually_prod_iff]\n    refine' ‚ü®fun n => f n x ‚àà t, ht, fun n => f n x ‚àà t, ht, _‚ü©\n    intro n hn n' hn' z hz\n    rw [dist_eq_norm, pi.zero_apply, zero_sub, norm_neg, ‚Üê dist_eq_norm]\n    exact ht' _ hn _ hn'\n#align uniform_cauchy_seq_on_ball_of_fderiv uniform_cauchy_seq_on_ball_of_fderiv\n\n",
 "uniform_cauchy_seq_on_ball_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem uniform_cauchy_seq_on_ball_of_deriv {r : expr‚Ñù} (hf' : uniform_cauchy_seq_on f' l (metric.ball x r))\n    (hf : ‚àÄ n : Œπ, ‚àÄ y : ùïú, y ‚àà metric.ball x r ‚Üí has_deriv_at (f n) (f' n y) y)\n    (hfg : cauchy (map (fun n => f n x) l)) : uniform_cauchy_seq_on f l (metric.ball x r) :=\n  by\n  simp_rw [has_deriv_at_iff_has_fderiv_at] at hf\n  rw [uniform_cauchy_seq_on_iff_uniform_cauchy_seq_on_filter] at hf'\n  have hf' :\n    uniform_cauchy_seq_on (fun n => fun z => (1 : ¬´expr ‚ÜíL[ ] ¬ª ùïú ùïú ùïú).smul_right (f' n z)) l (metric.ball x r) :=\n    by\n    rw [uniform_cauchy_seq_on_iff_uniform_cauchy_seq_on_filter]\n    exact hf'.one_smul_right\n  exact uniform_cauchy_seq_on_ball_of_fderiv hf' hf hfg\n#align uniform_cauchy_seq_on_ball_of_deriv uniform_cauchy_seq_on_ball_of_deriv\n\n",
 "one_smul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/-- If our derivatives converge uniformly, then the Fr√©chet derivatives converge uniformly -/\ntheorem uniform_cauchy_seq_on_filter.one_smul_right {l' : filter ùïú} (hf' : uniform_cauchy_seq_on_filter f' l l') :\n    uniform_cauchy_seq_on_filter (fun n => fun z => (1 : ¬´expr ‚ÜíL[ ] ¬ª ùïú ùïú ùïú).smul_right (f' n z)) l l' :=\n  by\n  -- The tricky part of this proof is that operator norms are written in terms of `‚â§` whereas\n  -- metrics are written in terms of `<`. So we need to shrink `Œµ` utilizing the archimedean\n  -- property of `‚Ñù`\n  rw [seminormed_add_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_zero,\n    metric.tendsto_uniformly_on_filter_iff] at hf'‚ä¢\n  intro Œµ hŒµ\n  obtain ‚ü®q, hq, hq'‚ü© := exists_between hŒµ.lt\n  apply (hf' q hq).mono\n  intro n hn\n  refine' lt_of_le_of_lt _ hq'\n  simp only [dist_eq_norm, pi.zero_apply, zero_sub, norm_neg] at hn‚ä¢\n  refine' continuous_linear_map.op_norm_le_bound _ hq.le _\n  intro z\n  simp only [continuous_linear_map.coe_sub', pi.sub_apply, continuous_linear_map.smul_right_apply,\n    continuous_linear_map.one_apply]\n  rw [‚Üê smul_sub, norm_smul, mul_comm]\n  exact mul_le_mul hn.le rfl.le (norm_nonneg _) hq.le\n#align uniform_cauchy_seq_on_filter.one_smul_right uniform_cauchy_seq_on_filter.one_smul_right\n\n",
 "has_fderiv_at_of_tendsto_uniformly_on_filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- `(d/dx) lim_{n ‚Üí ‚àû} f n x = lim_{n ‚Üí ‚àû} f' n x` when the `f' n` converge\n_uniformly_ to their limit at `x`.\n\nIn words the assumptions mean the following:\n  * `hf'`: The `f'` converge \"uniformly at\" `x` to `g'`. This does not mean that the `f' n` even\n    converge away from `x`!\n  * `hf`: For all `(y, n)` with `y` sufficiently close to `x` and `n` sufficiently large, `f' n` is\n    the derivative of `f n`\n  * `hfg`: The `f n` converge pointwise to `g` on a neighborhood of `x` -/\ntheorem has_fderiv_at_of_tendsto_uniformly_on_filter [ne_bot l] (hf' : tendsto_uniformly_on_filter f' g' l ((nhds) x))\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n        (filter.prod l ((nhds) x)) (has_fderiv_at (f n.1) (f' n.1 n.2) n.2))\n    (hfg :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" ((nhds) x)\n        (tendsto (fun n => f n y) l ((nhds) (g y)))) :\n    has_fderiv_at g (g' x) x :=\n  by\n  -- The proof strategy follows several steps:\n  --   1. The quantifiers in the definition of the derivative are\n  --      `‚àÄ Œµ > 0, ‚àÉŒ¥ > 0, ‚àÄy ‚àà B_Œ¥(x)`. We will introduce a quantifier in the middle:\n  --      `‚àÄ Œµ > 0, ‚àÉN, ‚àÄn ‚â• N, ‚àÉŒ¥ > 0, ‚àÄy ‚àà B_Œ¥(x)` which will allow us to introduce the `f(') n`\n  --   2. The order of the quantifiers `hfg` are opposite to what we need. We will be able to swap\n  --      the quantifiers using the uniform convergence assumption\n  rw [has_fderiv_at_iff_tendsto]\n  -- Introduce extra quantifier via curried filters\n  suffices\n    tendsto (fun y : Œπ √ó E => (¬´expr‚Äñ ‚Äñ¬ª (y.2 - x))‚Åª¬π * ¬´expr‚Äñ ‚Äñ¬ª (g y.2 - g x - (g' x) (y.2 - x))) (l.curry ((nhds) x))\n      ((nhds) 0)\n    by\n    rw [metric.tendsto_nhds] at this‚ä¢\n    intro Œµ hŒµ\n    specialize this Œµ hŒµ\n    rw [eventually_curry_iff] at this\n    simp only at this\n    exact (eventually_const.mp this).mono (by simp only [imp_self, forall_const])\n  -- With the new quantifier in hand, we can perform the famous `Œµ/3` proof. Specifically,\n  -- we will break up the limit (the difference functions minus the derivative go to 0) into 3:\n  --   * The difference functions of the `f n` converge *uniformly* to the difference functions\n  --     of the `g n`\n  --   * The `f' n` are the derivatives of the `f n`\n  --   * The `f' n` converge to `g'` at `x`\n  conv =>\n    congr\n    ext\n    rw [‚Üê norm_norm, ‚Üê norm_inv, ‚Üê @is_R_or_C.norm_of_real ùïú _ _, is_R_or_C.of_real_inv, ‚Üê norm_smul]\n  rw [‚Üê tendsto_zero_iff_norm_tendsto_zero]\n  have :\n    (fun a : Œπ √ó E => ¬´expr ‚Ä¢ ¬ª ((¬´expr‚Äñ ‚Äñ¬ª (a.2 - x))‚Åª¬π : ùïú) (g a.2 - g x - (g' x) (a.2 - x))) =\n      ((fun a : Œπ √ó E => ¬´expr ‚Ä¢ ¬ª ((¬´expr‚Äñ ‚Äñ¬ª (a.2 - x))‚Åª¬π : ùïú) (g a.2 - g x - (f a.1 a.2 - f a.1 x))) +\n          fun a : Œπ √ó E =>\n          ¬´expr ‚Ä¢ ¬ª ((¬´expr‚Äñ ‚Äñ¬ª (a.2 - x))‚Åª¬π : ùïú) (f a.1 a.2 - f a.1 x - ((f' a.1 x) a.2 - (f' a.1 x) x))) +\n        fun a : Œπ √ó E => ¬´expr ‚Ä¢ ¬ª ((¬´expr‚Äñ ‚Äñ¬ª (a.2 - x))‚Åª¬π : ùïú) ((f' a.1 x - g' x) (a.2 - x)) :=\n    by\n    ext\n    simp only [pi.add_apply]\n    rw [‚Üê smul_add, ‚Üê smul_add]\n    congr\n    simp only [map_sub, sub_add_sub_cancel, continuous_linear_map.coe_sub', pi.sub_apply]\n  simp_rw [this]\n  have : (nhds) (0 : G) = (nhds) (0 + 0 + 0)\n  simp only [add_zero]\n  rw [this]\n  refine' tendsto.add (tendsto.add _ _) _\n  simp only\n  ¬∑ have := difference_quotients_converge_uniformly hf' hf hfg\n    rw [metric.tendsto_uniformly_on_filter_iff] at this\n    rw [metric.tendsto_nhds]\n    intro Œµ hŒµ\n    apply ((this Œµ hŒµ).filter_mono curry_le_prod).mono\n    intro n hn\n    rw [dist_eq_norm] at hn‚ä¢\n    rw [‚Üê smul_sub] at hn\n    rwa [sub_zero]\n  ¬∑ -- (Almost) the definition of the derivatives\n    rw [metric.tendsto_nhds]\n    intro Œµ hŒµ\n    rw [eventually_curry_iff]\n    refine' hf.curry.mono fun n hn => _\n    have := hn.self_of_nhds\n    rw [has_fderiv_at_iff_tendsto, metric.tendsto_nhds] at this\n    refine' (this Œµ hŒµ).mono fun y hy => _\n    rw [dist_eq_norm] at hy‚ä¢\n    simp only [sub_zero, map_sub, norm_mul, norm_inv, norm_norm] at hy‚ä¢\n    rw [norm_smul, norm_inv, is_R_or_C.norm_coe_norm]\n    exact hy\n  ¬∑ -- hfg' after specializing to `x` and applying the definition of the operator norm\n    refine' tendsto.mono_left _ curry_le_prod\n    have h1 : tendsto (fun n : Œπ √ó E => g' n.2 - f' n.1 n.2) (filter.prod l ((nhds) x)) ((nhds) 0) :=\n      by\n      rw [metric.tendsto_uniformly_on_filter_iff] at hf'\n      exact metric.tendsto_nhds.mpr fun Œµ hŒµ => by simpa using hf' Œµ hŒµ\n    have h2 : tendsto (fun n : Œπ => g' x - f' n x) l ((nhds) 0) :=\n      by\n      rw [metric.tendsto_nhds] at h1‚ä¢\n      exact fun Œµ hŒµ => (h1 Œµ hŒµ).curry.mono fun n hn => hn.self_of_nhds\n    have := tendsto_fst.comp (h2.prod_map tendsto_id)\n    refine' squeeze_zero_norm _ (tendsto_zero_iff_norm_tendsto_zero.mp this)\n    intro n\n    simp_rw [norm_smul, norm_inv, is_R_or_C.norm_coe_norm]\n    by_cases hx : x = n.2\n    ¬∑ simp [hx]\n    have hnx : 0 < ¬´expr‚Äñ ‚Äñ¬ª (n.2 - x) := by\n      rw [norm_pos_iff]\n      intro hx'\n      exact hx (eq_of_sub_eq_zero hx').symm\n    rw [inv_mul_le_iff hnx, mul_comm]\n    simp only [Function.comp_apply, Prod_map]\n    rw [norm_sub_rev]\n    exact (f' n.1 x - g' x).le_op_norm (n.2 - x)\n#align has_fderiv_at_of_tendsto_uniformly_on_filter has_fderiv_at_of_tendsto_uniformly_on_filter\n\n",
 "has_fderiv_at_of_tendsto_uniformly_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- `(d/dx) lim_{n ‚Üí ‚àû} f n x = lim_{n ‚Üí ‚àû} f' n x` when the `f' n` converge\n_uniformly_ to their limit on an open set containing `x`. -/\ntheorem has_fderiv_at_of_tendsto_uniformly_on [ne_bot l] {s : set E} (hs : is_open s)\n    (hf' : tendsto_uniformly_on f' g' l s) (hf : ‚àÄ n : Œπ, ‚àÄ x : E, x ‚àà s ‚Üí has_fderiv_at (f n) (f' n x) x)\n    (hfg : ‚àÄ x : E, x ‚àà s ‚Üí tendsto (fun n => f n x) l ((nhds) (g x))) : ‚àÄ x : E, x ‚àà s ‚Üí has_fderiv_at g (g' x) x :=\n  fun x => has_fderiv_at_of_tendsto_locally_uniformly_on hs hf'.tendsto_locally_uniformly_on hf hfg\n#align has_fderiv_at_of_tendsto_uniformly_on has_fderiv_at_of_tendsto_uniformly_on\n\n",
 "has_fderiv_at_of_tendsto_uniformly":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- `(d/dx) lim_{n ‚Üí ‚àû} f n x = lim_{n ‚Üí ‚àû} f' n x` when the `f' n` converge\n_uniformly_ to their limit. -/\ntheorem has_fderiv_at_of_tendsto_uniformly [ne_bot l] (hf' : tendsto_uniformly f' g' l)\n    (hf : ‚àÄ n : Œπ, ‚àÄ x : E, has_fderiv_at (f n) (f' n x) x) (hfg : ‚àÄ x : E, tendsto (fun n => f n x) l ((nhds) (g x))) :\n    ‚àÄ x : E, has_fderiv_at g (g' x) x := by\n  intro x\n  have hf : ‚àÄ n : Œπ, ‚àÄ x : E, x ‚àà Set.univ ‚Üí has_fderiv_at (f n) (f' n x) x := by simp [hf]\n  have hfg : ‚àÄ x : E, x ‚àà Set.univ ‚Üí tendsto (fun n => f n x) l ((nhds) (g x)) := by simp [hfg]\n  have hf' : tendsto_uniformly_on f' g' l Set.univ := by rwa [tendsto_uniformly_on_univ]\n  refine' has_fderiv_at_of_tendsto_uniformly_on is_open_univ hf' hf hfg x (Set.mem_univ x)\n#align has_fderiv_at_of_tendsto_uniformly has_fderiv_at_of_tendsto_uniformly\n\n",
 "has_fderiv_at_of_tendsto_locally_uniformly_on'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A slight variant of `has_fderiv_at_of_tendsto_locally_uniformly_on` with the assumption stated\nin terms of `differentiable_on` rather than `has_fderiv_at`. This makes a few proofs nicer in\ncomplex analysis where holomorphicity is assumed but the derivative is not known a priori. -/\ntheorem has_fderiv_at_of_tendsto_locally_uniformly_on' [ne_bot l] {s : set E} (hs : is_open s)\n    (hf' : tendsto_locally_uniformly_on (fderiv ùïú ‚àò f) g' l s) (hf : ‚àÄ n, differentiable_on ùïú (f n) s)\n    (hfg : ‚àÄ x ‚àà s, tendsto (fun n => f n x) l ((nhds) (g x))) (hx : x ‚àà s) : has_fderiv_at g (g' x) x :=\n  by\n  refine' has_fderiv_at_of_tendsto_locally_uniformly_on hs hf' (fun n z hz => _) hfg hx\n  exact ((hf n z hz).differentiable_at (hs.mem_nhds hz)).has_fderiv_at\n#align has_fderiv_at_of_tendsto_locally_uniformly_on' has_fderiv_at_of_tendsto_locally_uniformly_on'\n\n",
 "has_fderiv_at_of_tendsto_locally_uniformly_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem has_fderiv_at_of_tendsto_locally_uniformly_on [ne_bot l] {s : set E} (hs : is_open s)\n    (hf' : tendsto_locally_uniformly_on f' g' l s) (hf : ‚àÄ n, ‚àÄ x ‚àà s, has_fderiv_at (f n) (f' n x) x)\n    (hfg : ‚àÄ x ‚àà s, tendsto (fun n => f n x) l ((nhds) (g x))) (hx : x ‚àà s) : has_fderiv_at g (g' x) x :=\n  by\n  have h1 : s ‚àà (nhds) x := hs.mem_nhds hx\n  have h3 : lower_set.prod Set.univ s ‚àà filter.prod l ((nhds) x) := by\n    simp only [h1, prod_mem_prod_iff, univ_mem, and_self_iff]\n  have h4 :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n      (filter.prod l ((nhds) x)) (has_fderiv_at (f n.1) (f' n.1 n.2) n.2) :=\n    eventually_of_mem h3 fun ‚ü®n, z‚ü© ‚ü®hn, hz‚ü© => hf n z hz\n  refine' has_fderiv_at_of_tendsto_uniformly_on_filter _ h4 (eventually_of_mem h1 hfg)\n  simpa [is_open.nhds_within_eq hs hx] using tendsto_locally_uniformly_on_iff_filter.mp hf' x hx\n#align has_fderiv_at_of_tendsto_locally_uniformly_on has_fderiv_at_of_tendsto_locally_uniformly_on\n\n",
 "has_deriv_at_of_tendsto_uniformly_on_filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem has_deriv_at_of_tendsto_uniformly_on_filter [ne_bot l] (hf' : tendsto_uniformly_on_filter f' g' l ((nhds) x))\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n        (filter.prod l ((nhds) x)) (has_deriv_at (f n.1) (f' n.1 n.2) n.2))\n    (hfg :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" ((nhds) x)\n        (tendsto (fun n => f n y) l ((nhds) (g y)))) :\n    has_deriv_at g (g' x) x :=\n  by\n  -- The first part of the proof rewrites `hf` and the goal to be functions so that Lean\n  -- can recognize them when we apply `has_fderiv_at_of_tendsto_uniformly_on_filter`\n  let F' n z := (1 : ¬´expr ‚ÜíL[ ] ¬ª ùïú ùïú ùïú).smul_right (f' n z)\n  let G' z := (1 : ¬´expr ‚ÜíL[ ] ¬ª ùïú ùïú ùïú).smul_right (g' z)\n  simp_rw [has_deriv_at_iff_has_fderiv_at] at hf‚ä¢\n  -- Now we need to rewrite hf' in terms of continuous_linear_maps. The tricky part is that\n  -- operator norms are written in terms of `‚â§` whereas metrics are written in terms of `<`. So we\n  -- need to shrink `Œµ` utilizing the archimedean property of `‚Ñù`\n  have hf' : tendsto_uniformly_on_filter F' G' l ((nhds) x) :=\n    by\n    rw [metric.tendsto_uniformly_on_filter_iff] at hf'‚ä¢\n    intro Œµ hŒµ\n    obtain ‚ü®q, hq, hq'‚ü© := exists_between hŒµ.lt\n    apply (hf' q hq).mono\n    intro n hn\n    refine' lt_of_le_of_lt _ hq'\n    simp only [F', G', dist_eq_norm] at hn‚ä¢\n    refine' continuous_linear_map.op_norm_le_bound _ hq.le _\n    intro z\n    simp only [continuous_linear_map.coe_sub', pi.sub_apply, continuous_linear_map.smul_right_apply,\n      continuous_linear_map.one_apply]\n    rw [‚Üê smul_sub, norm_smul, mul_comm]\n    exact mul_le_mul hn.le rfl.le (norm_nonneg _) hq.le\n  exact has_fderiv_at_of_tendsto_uniformly_on_filter hf' hf hfg\n#align has_deriv_at_of_tendsto_uniformly_on_filter has_deriv_at_of_tendsto_uniformly_on_filter\n\n",
 "has_deriv_at_of_tendsto_uniformly_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem has_deriv_at_of_tendsto_uniformly_on [ne_bot l] {s : set ùïú} (hs : is_open s)\n    (hf' : tendsto_uniformly_on f' g' l s)\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" l\n        (‚àÄ x : ùïú, x ‚àà s ‚Üí has_deriv_at (f n) (f' n x) x))\n    (hfg : ‚àÄ x : ùïú, x ‚àà s ‚Üí tendsto (fun n => f n x) l ((nhds) (g x))) : ‚àÄ x : ùïú, x ‚àà s ‚Üí has_deriv_at g (g' x) x :=\n  fun x => has_deriv_at_of_tendsto_locally_uniformly_on hs hf'.tendsto_locally_uniformly_on hf hfg\n#align has_deriv_at_of_tendsto_uniformly_on has_deriv_at_of_tendsto_uniformly_on\n\n",
 "has_deriv_at_of_tendsto_uniformly":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem has_deriv_at_of_tendsto_uniformly [ne_bot l] (hf' : tendsto_uniformly f' g' l)\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" l\n        (‚àÄ x : ùïú, has_deriv_at (f n) (f' n x) x))\n    (hfg : ‚àÄ x : ùïú, tendsto (fun n => f n x) l ((nhds) (g x))) : ‚àÄ x : ùïú, has_deriv_at g (g' x) x :=\n  by\n  intro x\n  have hf :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" l\n      (‚àÄ x : ùïú, x ‚àà Set.univ ‚Üí has_deriv_at (f n) (f' n x) x) :=\n    by filter_upwards [hf] with n h x hx using h x\n  have hfg : ‚àÄ x : ùïú, x ‚àà Set.univ ‚Üí tendsto (fun n => f n x) l ((nhds) (g x)) := by simp [hfg]\n  have hf' : tendsto_uniformly_on f' g' l Set.univ := by rwa [tendsto_uniformly_on_univ]\n  exact has_deriv_at_of_tendsto_uniformly_on is_open_univ hf' hf hfg x (Set.mem_univ x)\n#align has_deriv_at_of_tendsto_uniformly has_deriv_at_of_tendsto_uniformly\n\n",
 "has_deriv_at_of_tendsto_locally_uniformly_on'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A slight variant of `has_deriv_at_of_tendsto_locally_uniformly_on` with the assumption stated in\nterms of `differentiable_on` rather than `has_deriv_at`. This makes a few proofs nicer in complex\nanalysis where holomorphicity is assumed but the derivative is not known a priori. -/\ntheorem has_deriv_at_of_tendsto_locally_uniformly_on' [ne_bot l] {s : set ùïú} (hs : is_open s)\n    (hf' : tendsto_locally_uniformly_on (deriv ‚àò f) g' l s)\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" l\n        (differentiable_on ùïú (f n) s))\n    (hfg : ‚àÄ x ‚àà s, tendsto (fun n => f n x) l ((nhds) (g x))) (hx : x ‚àà s) : has_deriv_at g (g' x) x :=\n  by\n  refine' has_deriv_at_of_tendsto_locally_uniformly_on hs hf' _ hfg hx\n  filter_upwards [hf] with n h z hz using((h z hz).differentiable_at (hs.mem_nhds hz)).has_deriv_at\n#align has_deriv_at_of_tendsto_locally_uniformly_on' has_deriv_at_of_tendsto_locally_uniformly_on'\n\n",
 "has_deriv_at_of_tendsto_locally_uniformly_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem has_deriv_at_of_tendsto_locally_uniformly_on [ne_bot l] {s : set ùïú} (hs : is_open s)\n    (hf' : tendsto_locally_uniformly_on f' g' l s)\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" l\n        (‚àÄ x ‚àà s, has_deriv_at (f n) (f' n x) x))\n    (hfg : ‚àÄ x ‚àà s, tendsto (fun n => f n x) l ((nhds) (g x))) (hx : x ‚àà s) : has_deriv_at g (g' x) x :=\n  by\n  have h1 : s ‚àà (nhds) x := hs.mem_nhds hx\n  have h2 :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n      (filter.prod l ((nhds) x)) (has_deriv_at (f n.1) (f' n.1 n.2) n.2) :=\n    eventually_prod_iff.2 ‚ü®_, hf, fun x => x ‚àà s, h1, fun n => id‚ü©\n  refine' has_deriv_at_of_tendsto_uniformly_on_filter _ h2 (eventually_of_mem h1 hfg)\n  simpa [is_open.nhds_within_eq hs hx] using tendsto_locally_uniformly_on_iff_filter.mp hf' x hx\n#align has_deriv_at_of_tendsto_locally_uniformly_on has_deriv_at_of_tendsto_locally_uniformly_on\n\n",
 "difference_quotients_converge_uniformly":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚ä•¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `f_n ‚Üí g` pointwise and the derivatives `(f_n)' ‚Üí h` _uniformly_ converge, then\nin fact for a fixed `y`, the difference quotients `‚Äñz - y‚Äñ‚Åª¬π ‚Ä¢ (f_n z - f_n y)` converge\n_uniformly_ to `‚Äñz - y‚Äñ‚Åª¬π ‚Ä¢ (g z - g y)` -/\ntheorem difference_quotients_converge_uniformly (hf' : tendsto_uniformly_on_filter f' g' l ((nhds) x))\n    (hf :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n        (filter.prod l ((nhds) x)) (has_fderiv_at (f n.1) (f' n.1 n.2) n.2))\n    (hfg :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" ((nhds) x)\n        (tendsto (fun n => f n y) l ((nhds) (g y)))) :\n    tendsto_uniformly_on_filter (fun n : Œπ => fun y : E => ¬´expr ‚Ä¢ ¬ª ((¬´expr‚Äñ ‚Äñ¬ª (y - x))‚Åª¬π : ùïú) (f n y - f n x))\n      (fun y : E => ¬´expr ‚Ä¢ ¬ª ((¬´expr‚Äñ ‚Äñ¬ª (y - x))‚Åª¬π : ùïú) (g y - g x)) l ((nhds) x) :=\n  by\n  let : normed_space (expr‚Ñù) E\n  exact normed_space.restrict_scalars (expr‚Ñù) ùïú _\n  rcases eq_or_ne l (¬´expr‚ä•¬ª) with (hl | hl)\n  ¬∑ simp only [hl, tendsto_uniformly_on_filter, bot_prod, eventually_bot, imp_true_iff]\n  haveI : ne_bot l := ‚ü®hl‚ü©\n  refine'\n    uniform_cauchy_seq_on_filter.tendsto_uniformly_on_filter_of_tendsto _\n      ((hfg.and (eventually_const.mpr hfg.self_of_nhds)).mono fun y hy => (hy.1.sub hy.2).const_smul _)\n  rw [seminormed_add_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_zero]\n  rw [metric.tendsto_uniformly_on_filter_iff]\n  have hfg' := hf'.uniform_cauchy_seq_on_filter\n  rw [seminormed_add_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_zero] at hfg'\n  rw [metric.tendsto_uniformly_on_filter_iff] at hfg'\n  intro Œµ hŒµ\n  obtain ‚ü®q, hqpos, hqŒµ‚ü© := exists_pos_rat_lt hŒµ\n  specialize hfg' (q : expr‚Ñù) (by simp [hqpos])\n  have := (tendsto_swap4_prod.eventually (hf.prod_mk hf)).diag_of_prod_right\n  obtain ‚ü®a, b, c, d, e‚ü© := eventually_prod_iff.1 (hfg'.and this)\n  obtain ‚ü®r, hr, hr'‚ü© := metric.nhds_basis_ball.eventually_iff.mp d\n  rw [eventually_prod_iff]\n  refine'\n    ‚ü®_, b, fun e : E => metric.ball x r e, eventually_mem_set.mpr (metric.nhds_basis_ball.mem_of_mem hr),\n      fun n hn y hy => _‚ü©\n  simp only [pi.zero_apply, dist_zero_left]\n  rw [‚Üê smul_sub, norm_smul, norm_inv, is_R_or_C.norm_coe_norm]\n  refine' lt_of_le_of_lt _ hqŒµ\n  by_cases hyz' : x = y\n  ¬∑ simp [hyz', hqpos.le]\n  have hyz : 0 < ¬´expr‚Äñ ‚Äñ¬ª (y - x) := by\n    rw [norm_pos_iff]\n    intro hy'\n    exact hyz' (eq_of_sub_eq_zero hy').symm\n  rw [inv_mul_le_iff hyz, mul_comm, sub_sub_sub_comm]\n  simp only [pi.zero_apply, dist_zero_left] at e\n  refine'\n    convex.norm_image_sub_le_of_norm_has_fderiv_within_le\n      (fun y hy => ((e hn (hr' hy)).2.1.sub (e hn (hr' hy)).2.2).has_fderiv_within_at)\n      (fun y hy => (e hn (hr' hy)).1.le) (convex_ball x r) (metric.mem_ball_self hr) hy\n#align difference_quotients_converge_uniformly difference_quotients_converge_uniformly\n\n",
 "cauchy_map_of_uniform_cauchy_seq_on_fderiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- If a sequence of functions between real or complex normed spaces are differentiable on a\npreconnected open set, they form a Cauchy sequence _at_ `x`, and their derivatives are Cauchy\nuniformly on the set, then the functions form a Cauchy sequence at any point in the set. -/\ntheorem cauchy_map_of_uniform_cauchy_seq_on_fderiv {s : set E} (hs : is_open s) (h's : is_preconnected s)\n    (hf' : uniform_cauchy_seq_on f' l s) (hf : ‚àÄ n : Œπ, ‚àÄ y : E, y ‚àà s ‚Üí has_fderiv_at (f n) (f' n y) y) {x‚ÇÄ x : E}\n    (hx‚ÇÄ : x‚ÇÄ ‚àà s) (hx : x ‚àà s) (hfg : cauchy (map (fun n => f n x‚ÇÄ) l)) : cauchy (map (fun n => f n x) l) :=\n  by\n  have : ne_bot l := (cauchy_map_iff.1 hfg).1\n  let t := { y | y ‚àà s ‚àß cauchy (map (fun n => f n y) l) }\n  suffices H : s ‚äÜ t\n  exact (H hx).2\n  have A : ‚àÄ x Œµ, x ‚àà t ‚Üí metric.ball x Œµ ‚äÜ s ‚Üí metric.ball x Œµ ‚äÜ t := fun x Œµ xt hx y hy =>\n    ‚ü®hx hy, (uniform_cauchy_seq_on_ball_of_fderiv (hf'.mono hx) (fun n y hy => hf n y (hx hy)) xt.2).cauchy_map hy‚ü©\n  have open_t : is_open t := by\n    rw [metric.is_open_iff]\n    intro x hx\n    rcases metric.is_open_iff.1 hs x hx.1 with ‚ü®Œµ, Œµpos, hŒµ‚ü©\n    exact ‚ü®Œµ, Œµpos, A x Œµ hx hŒµ‚ü©\n  have st_nonempty : (s ‚à© t).nonempty := ‚ü®x‚ÇÄ, hx‚ÇÄ, ‚ü®hx‚ÇÄ, hfg‚ü©‚ü©\n  suffices H : closure t ‚à© s ‚äÜ t\n  exact h's.subset_of_closure_inter_subset open_t st_nonempty H\n  rintro x ‚ü®xt, xs‚ü©\n  obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ (Œµ : expr‚Ñù)(H : Œµ > 0), metric.ball x Œµ ‚äÜ s\n  exact metric.is_open_iff.1 hs x xs\n  obtain ‚ü®y, yt, hxy‚ü© : ‚àÉ (y : E)(yt : y ‚àà t), dist x y < Œµ / 2\n  exact metric.mem_closure_iff.1 xt _ (half_pos Œµpos)\n  have B : metric.ball y (Œµ / 2) ‚äÜ metric.ball x Œµ :=\n    by\n    apply metric.ball_subset_ball'\n    rw [dist_comm]\n    linarith\n  exact A y (Œµ / 2) yt (B.trans hŒµ) (metric.mem_ball.2 hxy)\n#align cauchy_map_of_uniform_cauchy_seq_on_fderiv cauchy_map_of_uniform_cauchy_seq_on_fderiv\n\n"}