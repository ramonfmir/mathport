{"norm_iterated_fderiv_within_eq_norm_iterated_deriv_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_iterated_fderiv_within_eq_norm_iterated_deriv_within :\n    «expr‖ ‖» (iterated_fderiv_within 𝕜 n f s x) = «expr‖ ‖» (iterated_deriv_within n f s x) := by\n  rw [iterated_deriv_within_eq_equiv_comp, LinearIsometryEquiv.norm_map]\n#align norm_iterated_fderiv_within_eq_norm_iterated_deriv_within norm_iterated_fderiv_within_eq_norm_iterated_deriv_within\n\n",
 "norm_iterated_fderiv_eq_norm_iterated_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_iterated_fderiv_eq_norm_iterated_deriv :\n    «expr‖ ‖» (iterated_fderiv 𝕜 n f x) = «expr‖ ‖» (iterated_deriv n f x) := by\n  rw [iterated_deriv_eq_equiv_comp, LinearIsometryEquiv.norm_map]\n#align norm_iterated_fderiv_eq_norm_iterated_deriv norm_iterated_fderiv_eq_norm_iterated_deriv\n\n",
 "iterated_fderiv_within_eq_equiv_comp":
 "/-- Write the iterated Fréchet derivative as the composition of a continuous linear equiv and the\niterated derivative. -/\ntheorem iterated_fderiv_within_eq_equiv_comp :\n    iterated_fderiv_within 𝕜 n f s =\n      continuous_multilinear_map.pi_field_equiv 𝕜 (Fin n) F ∘ iterated_deriv_within n f s :=\n  by\n  rw [iterated_deriv_within_eq_equiv_comp, ← function.comp.assoc, LinearIsometryEquiv.self_comp_symm, function.left_id]\n#align iterated_fderiv_within_eq_equiv_comp iterated_fderiv_within_eq_equiv_comp\n\n",
 "iterated_fderiv_within_apply_eq_iterated_deriv_within_mul_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/-- The `n`-th Fréchet derivative applied to a vector `(m 0, ..., m (n-1))` is the derivative\nmultiplied by the product of the `m i`s. -/\ntheorem iterated_fderiv_within_apply_eq_iterated_deriv_within_mul_prod {m : Fin n → 𝕜} :\n    (iterated_fderiv_within 𝕜 n f s x : (Fin n → 𝕜) → F) m =\n      «expr • »\n        (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n          (m i))\n        (iterated_deriv_within n f s x) :=\n  by\n  rw [iterated_deriv_within_eq_iterated_fderiv_within, ← ContinuousMultilinearMap.map_smul_univ]\n  simp\n#align iterated_fderiv_within_apply_eq_iterated_deriv_within_mul_prod iterated_fderiv_within_apply_eq_iterated_deriv_within_mul_prod\n\n",
 "iterated_fderiv_eq_equiv_comp":
 "/-- Write the iterated Fréchet derivative as the composition of a continuous linear equiv and the\niterated derivative. -/\ntheorem iterated_fderiv_eq_equiv_comp :\n    iterated_fderiv 𝕜 n f = continuous_multilinear_map.pi_field_equiv 𝕜 (Fin n) F ∘ iterated_deriv n f := by\n  rw [iterated_deriv_eq_equiv_comp, ← function.comp.assoc, LinearIsometryEquiv.self_comp_symm, function.left_id]\n#align iterated_fderiv_eq_equiv_comp iterated_fderiv_eq_equiv_comp\n\n",
 "iterated_fderiv_apply_eq_iterated_deriv_mul_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/-- The `n`-th Fréchet derivative applied to a vector `(m 0, ..., m (n-1))` is the derivative\nmultiplied by the product of the `m i`s. -/\ntheorem iterated_fderiv_apply_eq_iterated_deriv_mul_prod {m : Fin n → 𝕜} :\n    (iterated_fderiv 𝕜 n f x : (Fin n → 𝕜) → F) m =\n      «expr • »\n        (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n          (m i))\n        (iterated_deriv n f x) :=\n  by\n  rw [iterated_deriv_eq_iterated_fderiv, ← ContinuousMultilinearMap.map_smul_univ]\n  simp\n#align iterated_fderiv_apply_eq_iterated_deriv_mul_prod iterated_fderiv_apply_eq_iterated_deriv_mul_prod\n\n",
 "iterated_deriv_zero":
 "@[simp]\ntheorem iterated_deriv_zero : iterated_deriv 0 f = f := by\n  ext x\n  simp [iterated_deriv]\n#align iterated_deriv_zero iterated_deriv_zero\n\n",
 "iterated_deriv_within_zero":
 "@[simp]\ntheorem iterated_deriv_within_zero : iterated_deriv_within 0 f s = f :=\n  by\n  ext x\n  simp [iterated_deriv_within]\n#align iterated_deriv_within_zero iterated_deriv_within_zero\n\n",
 "iterated_deriv_within_univ":
 "/-\nCopyright (c) 2020 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\ntheorem iterated_deriv_within_univ : iterated_deriv_within n f univ = iterated_deriv n f :=\n  by\n  ext x\n  rw [iterated_deriv_within, iterated_deriv, iterated_fderiv_within_univ]\n#align iterated_deriv_within_univ iterated_deriv_within_univ\n\n",
 "iterated_deriv_within_succ'":
 "/-- The `n+1`-th iterated derivative within a set with unique derivatives can be obtained by\ntaking the `n`-th derivative of the derivative. -/\ntheorem iterated_deriv_within_succ' {x : 𝕜} (hxs : unique_diff_on 𝕜 s) (hx : x ∈ s) :\n    iterated_deriv_within (n + 1) f s x = (iterated_deriv_within n (deriv_within f s) s) x :=\n  by\n  rw [iterated_deriv_within_eq_iterate hxs hx, iterated_deriv_within_eq_iterate hxs hx]\n  rfl\n#align iterated_deriv_within_succ' iterated_deriv_within_succ'\n\n",
 "iterated_deriv_within_succ":
 "/-- The `n+1`-th iterated derivative within a set with unique derivatives can be obtained by\ndifferentiating the `n`-th iterated derivative. -/\ntheorem iterated_deriv_within_succ {x : 𝕜} (hxs : unique_diff_within_at 𝕜 s x) :\n    iterated_deriv_within (n + 1) f s x = deriv_within (iterated_deriv_within n f s) s x :=\n  by\n  rw [iterated_deriv_within_eq_iterated_fderiv_within, iterated_fderiv_within_succ_apply_left,\n    iterated_fderiv_within_eq_equiv_comp, linear_isometry_equiv.comp_fderiv_within _ hxs, deriv_within]\n  change\n    ((continuous_multilinear_map.mk_pi_field 𝕜 (Fin n) ((fderiv_within 𝕜 (iterated_deriv_within n f s) s x : 𝕜 → F) 1) :\n          (Fin n → 𝕜) → F)\n        fun i : Fin n => 1) =\n      (fderiv_within 𝕜 (iterated_deriv_within n f s) s x : 𝕜 → F) 1\n  simp\n#align iterated_deriv_within_succ iterated_deriv_within_succ\n\n",
 "iterated_deriv_within_one":
 "@[simp]\ntheorem iterated_deriv_within_one (hs : unique_diff_on 𝕜 s) {x : 𝕜} (hx : x ∈ s) :\n    iterated_deriv_within 1 f s x = deriv_within f s x :=\n  by\n  simp [iterated_deriv_within, iterated_fderiv_within_one_apply hs hx]\n  rfl\n#align iterated_deriv_within_one iterated_deriv_within_one\n\n",
 "iterated_deriv_within_eq_iterated_fderiv_within":
 "theorem iterated_deriv_within_eq_iterated_fderiv_within :\n    iterated_deriv_within n f s x = (iterated_fderiv_within 𝕜 n f s x : (Fin n → 𝕜) → F) fun i : Fin n => 1 :=\n  rfl\n#align iterated_deriv_within_eq_iterated_fderiv_within iterated_deriv_within_eq_iterated_fderiv_within\n\n",
 "iterated_deriv_within_eq_iterate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- The `n`-th iterated derivative within a set with unique derivatives can be obtained by\niterating `n` times the differentiation operation. -/\ntheorem iterated_deriv_within_eq_iterate {x : 𝕜} (hs : unique_diff_on 𝕜 s) (hx : x ∈ s) :\n    iterated_deriv_within n f s x = («expr ^[ ]» (fun g : 𝕜 → F => deriv_within g s) n) f x :=\n  by\n  induction' n with n IH generalizing x\n  · simp\n  · rw [iterated_deriv_within_succ (hs x hx), Function.iterate_succ']\n    exact deriv_within_congr (hs x hx) (fun y hy => IH hy) (IH hx)\n#align iterated_deriv_within_eq_iterate iterated_deriv_within_eq_iterate\n\n",
 "iterated_deriv_within_eq_equiv_comp":
 "/-- Write the iterated derivative as the composition of a continuous linear equiv and the iterated\nFréchet derivative -/\ntheorem iterated_deriv_within_eq_equiv_comp :\n    iterated_deriv_within n f s =\n      (continuous_multilinear_map.pi_field_equiv 𝕜 (Fin n) F).symm ∘ iterated_fderiv_within 𝕜 n f s :=\n  by\n  ext x\n  rfl\n#align iterated_deriv_within_eq_equiv_comp iterated_deriv_within_eq_equiv_comp\n\n",
 "iterated_deriv_succ'":
 "/-- The `n+1`-th iterated derivative can be obtained by taking the `n`-th derivative of the\nderivative. -/\ntheorem iterated_deriv_succ' : iterated_deriv (n + 1) f = iterated_deriv n (deriv f) :=\n  by\n  rw [iterated_deriv_eq_iterate, iterated_deriv_eq_iterate]\n  rfl\n#align iterated_deriv_succ' iterated_deriv_succ'\n\n",
 "iterated_deriv_succ":
 "/-- The `n+1`-th iterated derivative can be obtained by differentiating the `n`-th\niterated derivative. -/\ntheorem iterated_deriv_succ : iterated_deriv (n + 1) f = deriv (iterated_deriv n f) :=\n  by\n  ext x\n  rw [← iterated_deriv_within_univ, ← iterated_deriv_within_univ, ← deriv_within_univ]\n  exact iterated_deriv_within_succ unique_diff_within_at_univ\n#align iterated_deriv_succ iterated_deriv_succ\n\n",
 "iterated_deriv_one":
 "@[simp]\ntheorem iterated_deriv_one : iterated_deriv 1 f = deriv f :=\n  by\n  ext x\n  simp [iterated_deriv]\n  rfl\n#align iterated_deriv_one iterated_deriv_one\n\n",
 "iterated_deriv_eq_iterated_fderiv":
 "theorem iterated_deriv_eq_iterated_fderiv :\n    iterated_deriv n f x = (iterated_fderiv 𝕜 n f x : (Fin n → 𝕜) → F) fun i : Fin n => 1 :=\n  rfl\n#align iterated_deriv_eq_iterated_fderiv iterated_deriv_eq_iterated_fderiv\n\n",
 "iterated_deriv_eq_iterate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- The `n`-th iterated derivative can be obtained by iterating `n` times the\ndifferentiation operation. -/\ntheorem iterated_deriv_eq_iterate : iterated_deriv n f = («expr ^[ ]» deriv n) f :=\n  by\n  ext x\n  rw [← iterated_deriv_within_univ]\n  convert iterated_deriv_within_eq_iterate unique_diff_on_univ (mem_univ x)\n  simp [deriv_within_univ]\n#align iterated_deriv_eq_iterate iterated_deriv_eq_iterate\n\n",
 "iterated_deriv_eq_equiv_comp":
 "/-- Write the iterated derivative as the composition of a continuous linear equiv and the iterated\nFréchet derivative -/\ntheorem iterated_deriv_eq_equiv_comp :\n    iterated_deriv n f = (continuous_multilinear_map.pi_field_equiv 𝕜 (Fin n) F).symm ∘ iterated_fderiv 𝕜 n f :=\n  by\n  ext x\n  rfl\n#align iterated_deriv_eq_equiv_comp iterated_deriv_eq_equiv_comp\n\n",
 "differentiable_on_iterated_deriv_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- On a set with unique derivatives, a `C^n` function has derivatives less than `n` which are\ndifferentiable. -/\ntheorem cont_diff_on.differentiable_on_iterated_deriv_within {n : «exprℕ∞»} {m : ℕ} (h : cont_diff_on 𝕜 n f s)\n    (hmn : (m : «exprℕ∞») < n) (hs : unique_diff_on 𝕜 s) : differentiable_on 𝕜 (iterated_deriv_within m f s) s := by\n  simpa only [iterated_deriv_within_eq_equiv_comp, linear_isometry_equiv.comp_differentiable_on_iff] using\n    h.differentiable_on_iterated_fderiv_within hmn hs\n#align cont_diff_on.differentiable_on_iterated_deriv_within cont_diff_on.differentiable_on_iterated_deriv_within\n\n",
 "differentiable_iterated_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\ntheorem cont_diff.differentiable_iterated_deriv {n : «exprℕ∞»} (m : ℕ) (h : cont_diff 𝕜 n f)\n    (hmn : (m : «exprℕ∞») < n) : differentiable 𝕜 (iterated_deriv m f) :=\n  (cont_diff_iff_iterated_deriv.1 h).2 m hmn\n#align cont_diff.differentiable_iterated_deriv cont_diff.differentiable_iterated_deriv\n\n",
 "continuous_on_iterated_deriv_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- On a set with unique derivatives, a `C^n` function has derivatives up to `n` which are\ncontinuous. -/\ntheorem cont_diff_on.continuous_on_iterated_deriv_within {n : «exprℕ∞»} {m : ℕ} (h : cont_diff_on 𝕜 n f s)\n    (hmn : (m : «exprℕ∞») ≤ n) (hs : unique_diff_on 𝕜 s) : ContinuousOn (iterated_deriv_within m f s) s := by\n  simpa only [iterated_deriv_within_eq_equiv_comp, LinearIsometryEquiv.comp_continuousOn_iff] using\n    h.continuous_on_iterated_fderiv_within hmn hs\n#align cont_diff_on.continuous_on_iterated_deriv_within cont_diff_on.continuous_on_iterated_deriv_within\n\n",
 "continuous_iterated_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\ntheorem cont_diff.continuous_iterated_deriv {n : «exprℕ∞»} (m : ℕ) (h : cont_diff 𝕜 n f) (hmn : (m : «exprℕ∞») ≤ n) :\n    Continuous (iterated_deriv m f) :=\n  (cont_diff_iff_iterated_deriv.1 h).1 m hmn\n#align cont_diff.continuous_iterated_deriv cont_diff.continuous_iterated_deriv\n\n",
 "cont_diff_on_of_differentiable_on_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- To check that a function is `n` times continuously differentiable, it suffices to check that its\nfirst `n` derivatives are differentiable. This is slightly too strong as the condition we\nrequire on the `n`-th derivative is differentiability instead of continuity, but it has the\nadvantage of avoiding the discussion of continuity in the proof (and for `n = ∞` this is optimal).\n-/\ntheorem cont_diff_on_of_differentiable_on_deriv {n : «exprℕ∞»}\n    (h : ∀ m : ℕ, (m : «exprℕ∞») ≤ n → differentiable_on 𝕜 (iterated_deriv_within m f s) s) : cont_diff_on 𝕜 n f s :=\n  by\n  apply cont_diff_on_of_differentiable_on\n  simpa only [iterated_fderiv_within_eq_equiv_comp, linear_isometry_equiv.comp_differentiable_on_iff]\n#align cont_diff_on_of_differentiable_on_deriv cont_diff_on_of_differentiable_on_deriv\n\n",
 "cont_diff_on_of_continuous_on_differentiable_on_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- If the first `n` derivatives within a set of a function are continuous, and its first `n-1`\nderivatives are differentiable, then the function is `C^n`. This is not an equivalence in general,\nbut this is an equivalence when the set has unique derivatives, see\n`cont_diff_on_iff_continuous_on_differentiable_on_deriv`. -/\ntheorem cont_diff_on_of_continuous_on_differentiable_on_deriv {n : «exprℕ∞»}\n    (Hcont : ∀ m : ℕ, (m : «exprℕ∞») ≤ n → ContinuousOn (fun x => iterated_deriv_within m f s x) s)\n    (Hdiff : ∀ m : ℕ, (m : «exprℕ∞») < n → differentiable_on 𝕜 (fun x => iterated_deriv_within m f s x) s) :\n    cont_diff_on 𝕜 n f s := by\n  apply cont_diff_on_of_continuous_on_differentiable_on\n  · simpa [iterated_fderiv_within_eq_equiv_comp, LinearIsometryEquiv.comp_continuousOn_iff]\n  · simpa [iterated_fderiv_within_eq_equiv_comp, linear_isometry_equiv.comp_differentiable_on_iff]\n#align cont_diff_on_of_continuous_on_differentiable_on_deriv cont_diff_on_of_continuous_on_differentiable_on_deriv\n\n",
 "cont_diff_on_iff_continuous_on_differentiable_on_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- The property of being `C^n`, initially defined in terms of the Fréchet derivative, can be\nreformulated in terms of the one-dimensional derivative on sets with unique derivatives. -/\ntheorem cont_diff_on_iff_continuous_on_differentiable_on_deriv {n : «exprℕ∞»} (hs : unique_diff_on 𝕜 s) :\n    cont_diff_on 𝕜 n f s ↔\n      (∀ m : ℕ, (m : «exprℕ∞») ≤ n → ContinuousOn (iterated_deriv_within m f s) s) ∧\n        ∀ m : ℕ, (m : «exprℕ∞») < n → differentiable_on 𝕜 (iterated_deriv_within m f s) s :=\n  by\n  simp only [cont_diff_on_iff_continuous_on_differentiable_on hs, iterated_fderiv_within_eq_equiv_comp,\n    LinearIsometryEquiv.comp_continuousOn_iff, linear_isometry_equiv.comp_differentiable_on_iff]\n#align cont_diff_on_iff_continuous_on_differentiable_on_deriv cont_diff_on_iff_continuous_on_differentiable_on_deriv\n\n",
 "cont_diff_of_differentiable_iterated_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- To check that a function is `n` times continuously differentiable, it suffices to check that its\nfirst `n` derivatives are differentiable. This is slightly too strong as the condition we\nrequire on the `n`-th derivative is differentiability instead of continuity, but it has the\nadvantage of avoiding the discussion of continuity in the proof (and for `n = ∞` this is optimal).\n-/\ntheorem cont_diff_of_differentiable_iterated_deriv {n : «exprℕ∞»}\n    (h : ∀ m : ℕ, (m : «exprℕ∞») ≤ n → differentiable 𝕜 (iterated_deriv m f)) : cont_diff 𝕜 n f :=\n  cont_diff_iff_iterated_deriv.2 ⟨fun m hm => (h m hm).continuous, fun m hm => h m (le_of_lt hm)⟩\n#align cont_diff_of_differentiable_iterated_deriv cont_diff_of_differentiable_iterated_deriv\n\n",
 "cont_diff_iff_iterated_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/-- The property of being `C^n`, initially defined in terms of the Fréchet derivative, can be\nreformulated in terms of the one-dimensional derivative. -/\ntheorem cont_diff_iff_iterated_deriv {n : «exprℕ∞»} :\n    cont_diff 𝕜 n f ↔\n      (∀ m : ℕ, (m : «exprℕ∞») ≤ n → Continuous (iterated_deriv m f)) ∧\n        ∀ m : ℕ, (m : «exprℕ∞») < n → differentiable 𝕜 (iterated_deriv m f) :=\n  by\n  simp only [cont_diff_iff_continuous_differentiable, iterated_fderiv_eq_equiv_comp,\n    LinearIsometryEquiv.comp_continuous_iff, linear_isometry_equiv.comp_differentiable_iff]\n#align cont_diff_iff_iterated_deriv cont_diff_iff_iterated_deriv\n\n"}