{"taylor_within_zero_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The Taylor polynomial of order zero evaluates to `f x`. -/\n@[simp]\ntheorem taylor_within_zero_eval (f : exprℝ → E) (s : set (exprℝ)) (x₀ x : exprℝ) :\n    taylor_within_eval f 0 s x₀ x = f x₀ := by\n  dsimp only [taylor_within_eval]\n  dsimp only [taylor_within]\n  dsimp only [taylor_coeff_within]\n  simp\n#align taylor_within_zero_eval taylor_within_zero_eval\n\n",
 "taylor_within_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2022 Moritz Doll. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Moritz Doll\n-/\ntheorem taylor_within_succ (f : exprℝ → E) (n : ℕ) (s : set (exprℝ)) (x₀ : exprℝ) :\n    taylor_within f (n + 1) s x₀ =\n      taylor_within f n s x₀ +\n        polynomial_module.comp (polynomial.X - polynomial.C x₀)\n          (polynomial_module.single (exprℝ) (n + 1) (taylor_coeff_within f (n + 1) s x₀)) :=\n  by\n  dsimp only [taylor_within]\n  rw [finset.sum_range_succ]\n#align taylor_within_succ taylor_within_succ\n\n",
 "taylor_within_eval_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n@[simp]\ntheorem taylor_within_eval_succ (f : exprℝ → E) (n : ℕ) (s : set (exprℝ)) (x₀ x : exprℝ) :\n    taylor_within_eval f (n + 1) s x₀ x =\n      taylor_within_eval f n s x₀ x +\n        «expr • » (((n + 1 : exprℝ) * nat.factorial n)⁻¹ * (x - x₀) ^ (n + 1)) (iterated_deriv_within (n + 1) f s x₀) :=\n  by\n  simp_rw [taylor_within_eval, taylor_within_succ, linear_map.map_add, polynomial_module.comp_eval]\n  congr\n  simp only [polynomial.eval_sub, polynomial.eval_X, polynomial.eval_C, polynomial_module.eval_single, mul_inv_rev]\n  dsimp only [taylor_coeff_within]\n  rw [← mul_smul, mul_comm, Nat.factorial_succ, nat.cast_mul, Nat.cast_add, Nat.cast_one, mul_inv_rev]\n#align taylor_within_eval_succ taylor_within_eval_succ\n\n",
 "taylor_within_eval_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Evaluating the Taylor polynomial at `x = x₀` yields `f x`. -/\n@[simp]\ntheorem taylor_within_eval_self (f : exprℝ → E) (n : ℕ) (s : set (exprℝ)) (x₀ : exprℝ) :\n    taylor_within_eval f n s x₀ x₀ = f x₀ := by\n  induction' n with k hk\n  · exact taylor_within_zero_eval _ _ _ _\n  simp [hk]\n#align taylor_within_eval_self taylor_within_eval_self\n\n",
 "taylor_within_eval_has_deriv_at_Ioo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Calculate the derivative of the Taylor polynomial with respect to `x₀`.\n\nVersion for open intervals -/\ntheorem taylor_within_eval_has_deriv_at_Ioo {f : exprℝ → E} {a b t : exprℝ} (x : exprℝ) {n : ℕ} (hx : a < b)\n    (ht : t ∈ Ioo a b) (hf : cont_diff_on (exprℝ) n f (Icc a b))\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within n f (Icc a b)) (Ioo a b)) :\n    has_deriv_at (fun y => taylor_within_eval f n (Icc a b) y x)\n      («expr • » ((nat.factorial n : exprℝ)⁻¹ * (x - t) ^ n) (iterated_deriv_within (n + 1) f (Icc a b) t)) t :=\n  haveI h_nhds := is_open.mem_nhds is_open_Ioo ht\n  (has_deriv_within_at_taylor_within_eval (unique_diff_within_at_Ioo ht) (unique_diff_on_Icc hx)\n        (nhds_within_le_nhds h_nhds) ht Ioo_subset_Icc_self hf hf').has_deriv_at\n    h_nhds\n#align taylor_within_eval_has_deriv_at_Ioo taylor_within_eval_has_deriv_at_Ioo\n\n",
 "taylor_within_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem taylor_within_apply (f : exprℝ → E) (n : ℕ) (s : set (exprℝ)) (x₀ x : exprℝ) :\n    taylor_within_eval f n s x₀ x =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (Finset.range (n + 1))\n        («expr • » ((nat.factorial k : exprℝ)⁻¹ * (x - x₀) ^ k) (iterated_deriv_within k f s x₀)) :=\n  by\n  induction' n with k hk\n  · simp\n  rw [taylor_within_eval_succ, finset.sum_range_succ, hk]\n  simp\n#align taylor_within_apply taylor_within_apply\n\n",
 "taylor_mean_remainder_lagrange":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- **Taylor's theorem** with the Lagrange form of the remainder.\n\nWe assume that `f` is `n+1`-times continuously differentiable in the closed set `Icc x₀ x` and\n`n+1`-times differentiable on the open set `Ioo x₀ x`. Then there exists a `x' ∈ Ioo x₀ x` such that\n$$f(x) - (P_n f)(x₀, x) = \\frac{f^{(n+1)}(x') (x - x₀)^{n+1}}{(n+1)!},$$\nwhere $P_n f$ denotes the Taylor polynomial of degree $n$ and $f^{(n+1)}$ is the $n+1$-th iterated\nderivative. -/\ntheorem taylor_mean_remainder_lagrange {f : exprℝ → exprℝ} {x x₀ : exprℝ} {n : ℕ} (hx : x₀ < x)\n    (hf : cont_diff_on (exprℝ) n f (Icc x₀ x))\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within n f (Icc x₀ x)) (Ioo x₀ x)) :\n    ∃ (x' : exprℝ)(hx' : x' ∈ Ioo x₀ x),\n      f x - taylor_within_eval f n (Icc x₀ x) x₀ x =\n        iterated_deriv_within (n + 1) f (Icc x₀ x) x' * (x - x₀) ^ (n + 1) / nat.factorial (n + 1) :=\n  by\n  have gcont : continuous_on (fun t : exprℝ => (x - t) ^ (n + 1)) (Icc x₀ x) :=\n    by\n    refine' continuous.continuous_on _\n    continuity\n  have xy_ne : ∀ y : exprℝ, y ∈ Ioo x₀ x → (x - y) ^ n ≠ 0 :=\n    by\n    intro y hy\n    refine' pow_ne_zero _ _\n    rw [mem_Ioo] at hy\n    rw [sub_ne_zero]\n    exact hy.2.ne.symm\n  have hg' : ∀ y : exprℝ, y ∈ Ioo x₀ x → -(↑n + 1) * (x - y) ^ n ≠ 0 := fun y hy =>\n    mul_ne_zero (neg_ne_zero.mpr (Nat.cast_add_one_ne_zero n)) (xy_ne y hy)\n  -- We apply the general theorem with g(t) = (x - t)^(n+1)\n  rcases taylor_mean_remainder hx hf hf' gcont (fun y _ => monomial_has_deriv_aux y x _) hg' with ⟨y, hy, h⟩\n  use y, hy\n  simp only [sub_self, zero_pow', ne.def, nat.succ_ne_zero, not_false_iff, zero_sub, mul_neg] at h\n  rw [h, neg_div, ← div_neg, neg_mul, neg_neg]\n  field_simp [n.cast_add_one_ne_zero, n.factorial_ne_zero, xy_ne y hy]\n  ring\n#align taylor_mean_remainder_lagrange taylor_mean_remainder_lagrange\n\n",
 "taylor_mean_remainder_cauchy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- **Taylor's theorem** with the Cauchy form of the remainder.\n\nWe assume that `f` is `n+1`-times continuously differentiable on the closed set `Icc x₀ x` and\n`n+1`-times differentiable on the open set `Ioo x₀ x`. Then there exists a `x' ∈ Ioo x₀ x` such that\n$$f(x) - (P_n f)(x₀, x) = \\frac{f^{(n+1)}(x') (x - x')^n (x-x₀)}{n!},$$\nwhere $P_n f$ denotes the Taylor polynomial of degree $n$ and $f^{(n+1)}$ is the $n+1$-th iterated\nderivative. -/\ntheorem taylor_mean_remainder_cauchy {f : exprℝ → exprℝ} {x x₀ : exprℝ} {n : ℕ} (hx : x₀ < x)\n    (hf : cont_diff_on (exprℝ) n f (Icc x₀ x))\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within n f (Icc x₀ x)) (Ioo x₀ x)) :\n    ∃ (x' : exprℝ)(hx' : x' ∈ Ioo x₀ x),\n      f x - taylor_within_eval f n (Icc x₀ x) x₀ x =\n        iterated_deriv_within (n + 1) f (Icc x₀ x) x' * (x - x') ^ n / nat.factorial n * (x - x₀) :=\n  by\n  have gcont : continuous_on id (Icc x₀ x) := continuous.continuous_on (by continuity)\n  have gdiff : ∀ x_1 : exprℝ, x_1 ∈ Ioo x₀ x → has_deriv_at id ((fun t : exprℝ => (1 : exprℝ)) x_1) x_1 := fun _ _ =>\n    has_deriv_at_id _\n  -- We apply the general theorem with g = id\n  rcases taylor_mean_remainder hx hf hf' gcont gdiff fun _ _ => by simp with ⟨y, hy, h⟩\n  use y, hy\n  rw [h]\n  field_simp [n.factorial_ne_zero]\n  ring\n#align taylor_mean_remainder_cauchy taylor_mean_remainder_cauchy\n\n",
 "taylor_mean_remainder_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- **Taylor's theorem** with a polynomial bound on the remainder\n\nWe assume that `f` is `n+1`-times continuously differentiable on the closed set `Icc a b`.\nThe difference of `f` and its `n`-th Taylor polynomial can be estimated by\n`C * (x - a)^(n+1) / n!` where `C` is a bound for the `n+1`-th iterated derivative of `f`. -/\ntheorem taylor_mean_remainder_bound {f : exprℝ → E} {a b C x : exprℝ} {n : ℕ} (hab : a ≤ b)\n    (hf : cont_diff_on (exprℝ) (n + 1) f (Icc a b)) (hx : x ∈ Icc a b)\n    (hC : ∀ y ∈ Icc a b, «expr‖ ‖» (iterated_deriv_within (n + 1) f (Icc a b) y) ≤ C) :\n    «expr‖ ‖» (f x - taylor_within_eval f n (Icc a b) a x) ≤ C * (x - a) ^ (n + 1) / nat.factorial n :=\n  by\n  rcases eq_or_lt_of_le hab with (rfl | h)\n  · rw [Icc_self, mem_singleton_iff] at hx\n    simp [hx]\n  -- The nth iterated derivative is differentiable\n  have hf' : differentiable_on (exprℝ) (iterated_deriv_within n f (Icc a b)) (Icc a b) :=\n    hf.differentiable_on_iterated_deriv_within (with_top.coe_lt_coe.mpr n.lt_succ_self) (unique_diff_on_Icc h)\n  -- We can uniformly bound the derivative of the Taylor polynomial\n  have h' :\n    ∀ (y : exprℝ) (hy : y ∈ Ico a x),\n      «expr‖ ‖» («expr • » ((nat.factorial n : exprℝ)⁻¹ * (x - y) ^ n) (iterated_deriv_within (n + 1) f (Icc a b) y)) ≤\n        (nat.factorial n : exprℝ)⁻¹ * |x - a| ^ n * C :=\n    by\n    rintro y ⟨hay, hyx⟩\n    rw [norm_smul, real.norm_eq_abs]\n    -- Estimate the iterated derivative by `C`\n    refine' mul_le_mul _ (hC y ⟨hay, hyx.le.trans hx.2⟩) (by positivity) (by positivity)\n    -- The rest is a trivial calculation\n    rw [abs_mul, abs_pow, abs_inv, nat.abs_cast]\n    mono* with 0 ≤ (nat.factorial n : exprℝ)⁻¹\n    any_goals positivity\n    linarith [hx.1, hyx]\n  -- Apply the mean value theorem for vector valued functions:\n  have A :\n    ∀ t ∈ Icc a x,\n      has_deriv_within_at (fun y => taylor_within_eval f n (Icc a b) y x)\n        («expr • » ((↑(nat.factorial n))⁻¹ * (x - t) ^ n) (iterated_deriv_within (n + 1) f (Icc a b) t)) (Icc a x) t :=\n    by\n    intro t ht\n    have I : Icc a x ⊆ Icc a b := Icc_subset_Icc_right hx.2\n    exact (has_deriv_within_taylor_within_eval_at_Icc x h (I ht) hf.of_succ hf').mono I\n  have := norm_image_sub_le_of_norm_deriv_le_segment' A h' x (right_mem_Icc.2 hx.1)\n  simp only [taylor_within_eval_self] at this\n  refine' this.trans_eq _\n  -- The rest is a trivial calculation\n  rw [abs_of_nonneg (sub_nonneg.mpr hx.1)]\n  ring\n#align taylor_mean_remainder_bound taylor_mean_remainder_bound\n\n",
 "taylor_mean_remainder":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- **Taylor's theorem** with the general mean value form of the remainder.\n\nWe assume that `f` is `n+1`-times continuously differentiable in the closed set `Icc x₀ x` and\n`n+1`-times differentiable on the open set `Ioo x₀ x`, and `g` is a differentiable function on\n`Ioo x₀ x` and continuous on `Icc x₀ x`. Then there exists a `x' ∈ Ioo x₀ x` such that\n$$f(x) - (P_n f)(x₀, x) = \\frac{(x - x')^n}{n!} \\frac{g(x) - g(x₀)}{g' x'},$$\nwhere $P_n f$ denotes the Taylor polynomial of degree $n$. -/\ntheorem taylor_mean_remainder {f : exprℝ → exprℝ} {g g' : exprℝ → exprℝ} {x x₀ : exprℝ} {n : ℕ} (hx : x₀ < x)\n    (hf : cont_diff_on (exprℝ) n f (Icc x₀ x))\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within n f (Icc x₀ x)) (Ioo x₀ x))\n    (gcont : continuous_on g (Icc x₀ x)) (gdiff : ∀ x_1 : exprℝ, x_1 ∈ Ioo x₀ x → has_deriv_at g (g' x_1) x_1)\n    (g'_ne : ∀ x_1 : exprℝ, x_1 ∈ Ioo x₀ x → g' x_1 ≠ 0) :\n    ∃ (x' : exprℝ)(hx' : x' ∈ Ioo x₀ x),\n      f x - taylor_within_eval f n (Icc x₀ x) x₀ x =\n        «expr • » ((x - x') ^ n / nat.factorial n * (g x - g x₀) / g' x')\n          (iterated_deriv_within (n + 1) f (Icc x₀ x) x') :=\n  by\n  -- We apply the mean value theorem\n  rcases exists_ratio_has_deriv_at_eq_ratio_slope (fun t => taylor_within_eval f n (Icc x₀ x) t x)\n      (fun t => «expr • » ((nat.factorial n : exprℝ)⁻¹ * (x - t) ^ n) (iterated_deriv_within (n + 1) f (Icc x₀ x) t)) hx\n      (continuous_on_taylor_within_eval (unique_diff_on_Icc hx) hf)\n      (fun _ hy => taylor_within_eval_has_deriv_at_Ioo x hx hy hf hf') g g' gcont gdiff with\n    ⟨y, hy, h⟩\n  use y, hy\n  -- The rest is simplifications and trivial calculations\n  simp only [taylor_within_eval_self] at h\n  rw [mul_comm, ← div_left_inj' (g'_ne y hy), mul_div_cancel _ (g'_ne y hy)] at h\n  rw [← h]\n  field_simp [g'_ne y hy, n.factorial_ne_zero]\n  ring\n#align taylor_mean_remainder taylor_mean_remainder\n\n",
 "monomial_has_deriv_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Helper lemma for calculating the derivative of the monomial that appears in Taylor expansions.-/\ntheorem monomial_has_deriv_aux (t x : exprℝ) (n : ℕ) :\n    has_deriv_at (fun y => (x - y) ^ (n + 1)) (-(n + 1) * (x - t) ^ n) t :=\n  by\n  simp_rw [sub_eq_neg_add]\n  rw [← neg_one_mul, mul_comm (-1 : exprℝ), mul_assoc, mul_comm (-1 : exprℝ), ← mul_assoc]\n  convert @has_deriv_at.pow _ _ _ _ _ (n + 1) ((has_deriv_at_id t).neg.add_const x)\n  simp only [Nat.cast_add, Nat.cast_one]\n#align monomial_has_deriv_aux monomial_has_deriv_aux\n\n",
 "has_deriv_within_taylor_within_eval_at_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Calculate the derivative of the Taylor polynomial with respect to `x₀`.\n\nVersion for closed intervals -/\ntheorem has_deriv_within_taylor_within_eval_at_Icc {f : exprℝ → E} {a b t : exprℝ} (x : exprℝ) {n : ℕ} (hx : a < b)\n    (ht : t ∈ Icc a b) (hf : cont_diff_on (exprℝ) n f (Icc a b))\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within n f (Icc a b)) (Icc a b)) :\n    has_deriv_within_at (fun y => taylor_within_eval f n (Icc a b) y x)\n      («expr • » ((nat.factorial n : exprℝ)⁻¹ * (x - t) ^ n) (iterated_deriv_within (n + 1) f (Icc a b) t)) (Icc a b)\n      t :=\n  has_deriv_within_at_taylor_within_eval (unique_diff_on_Icc hx t ht) (unique_diff_on_Icc hx) self_mem_nhds_within ht\n    rfl.subset hf hf'\n#align has_deriv_within_taylor_within_eval_at_Icc has_deriv_within_taylor_within_eval_at_Icc\n\n",
 "has_deriv_within_at_taylor_within_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Calculate the derivative of the Taylor polynomial with respect to `x₀`.\n\nVersion for arbitrary sets -/\ntheorem has_deriv_within_at_taylor_within_eval {f : exprℝ → E} {x y : exprℝ} {n : ℕ} {s s' : set (exprℝ)}\n    (hs'_unique : unique_diff_within_at (exprℝ) s' y) (hs_unique : unique_diff_on (exprℝ) s)\n    (hs' : s' ∈ nhds_within s y) (hy : y ∈ s') (h : s' ⊆ s) (hf : cont_diff_on (exprℝ) n f s)\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within n f s) s') :\n    has_deriv_within_at (fun t => taylor_within_eval f n s t x)\n      («expr • » ((nat.factorial n : exprℝ)⁻¹ * (x - y) ^ n) (iterated_deriv_within (n + 1) f s y)) s' y :=\n  by\n  induction' n with k hk\n  · simp only [taylor_within_zero_eval, Nat.factorial_zero, Nat.cast_one, inv_one, pow_zero, mul_one, zero_add,\n      one_smul]\n    simp only [iterated_deriv_within_zero] at hf'\n    rw [iterated_deriv_within_one hs_unique (h hy)]\n    refine' has_deriv_within_at.mono _ h\n    refine' differentiable_within_at.has_deriv_within_at _\n    exact (hf' y hy).antimono h hs'\n  simp_rw [nat.add_succ, taylor_within_eval_succ]\n  simp only [add_zero, Nat.factorial_succ, nat.cast_mul, Nat.cast_add, Nat.cast_one]\n  have hdiff : differentiable_on (exprℝ) (iterated_deriv_within k f s) s' :=\n    by\n    have coe_lt_succ : (k : WithTop ℕ) < k.succ :=\n      by\n      rw [WithTop.coe_lt_coe]\n      exact lt_add_one k\n    refine' differentiable_on.mono _ h\n    exact hf.differentiable_on_iterated_deriv_within coe_lt_succ hs_unique\n  specialize hk (cont_diff_on.of_succ hf) hdiff\n  convert hk.add (has_deriv_within_at_taylor_coeff_within hs'_unique hs' hy h hf')\n  exact (add_sub_cancel'_right _ _).symm\n#align has_deriv_within_at_taylor_within_eval has_deriv_within_at_taylor_within_eval\n\n",
 "has_deriv_within_at_taylor_coeff_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_deriv_within_at_taylor_coeff_within {f : exprℝ → E} {x y : exprℝ} {k : ℕ} {s s' : set (exprℝ)}\n    (hs'_unique : unique_diff_within_at (exprℝ) s' y) (hs' : s' ∈ nhds_within s y) (hy : y ∈ s') (h : s' ⊆ s)\n    (hf' : differentiable_on (exprℝ) (iterated_deriv_within (k + 1) f s) s') :\n    has_deriv_within_at\n      (fun t =>\n        «expr • » (((k + 1 : exprℝ) * nat.factorial k)⁻¹ * (x - t) ^ (k + 1)) (iterated_deriv_within (k + 1) f s t))\n      («expr • » (((k + 1 : exprℝ) * nat.factorial k)⁻¹ * (x - y) ^ (k + 1)) (iterated_deriv_within (k + 2) f s y) -\n        «expr • » ((nat.factorial k : exprℝ)⁻¹ * (x - y) ^ k) (iterated_deriv_within (k + 1) f s y))\n      s' y :=\n  by\n  have hf'' :\n    has_deriv_within_at (fun t => iterated_deriv_within (k + 1) f s t) (iterated_deriv_within (k + 2) f s y) s' y :=\n    by\n    convert (hf' y hy).has_deriv_within_at\n    rw [iterated_deriv_within_succ (hs'_unique.mono h)]\n    refine' (deriv_within_subset h hs'_unique _).symm\n    exact (hf' y hy).antimono h hs'\n  have :\n    has_deriv_within_at (fun t => ((k + 1 : exprℝ) * nat.factorial k)⁻¹ * (x - t) ^ (k + 1))\n      (-((nat.factorial k : exprℝ)⁻¹ * (x - y) ^ k)) s' y :=\n    by\n    -- Commuting the factors:\n    have :\n      -((nat.factorial k : exprℝ)⁻¹ * (x - y) ^ k) = ((k + 1 : exprℝ) * nat.factorial k)⁻¹ * (-(k + 1) * (x - y) ^ k) :=\n      by\n      field_simp [Nat.cast_add_one_ne_zero k, Nat.factorial_ne_zero k]\n      ring_nf\n    rw [this]\n    exact (monomial_has_deriv_aux y x _).has_deriv_within_at.const_mul _\n  convert this.smul hf''\n  field_simp [Nat.cast_add_one_ne_zero k, Nat.factorial_ne_zero k]\n  rw [neg_div, neg_smul, sub_eq_add_neg]\n#align has_deriv_within_at_taylor_coeff_within has_deriv_within_at_taylor_coeff_within\n\n",
 "exists_taylor_mean_remainder_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- **Taylor's theorem** with a polynomial bound on the remainder\n\nWe assume that `f` is `n+1`-times continuously differentiable on the closed set `Icc a b`.\nThere exists a constant `C` such that for all `x ∈ Icc a b` the difference of `f` and its `n`-th\nTaylor polynomial can be estimated by `C * (x - a)^(n+1)`. -/\ntheorem exists_taylor_mean_remainder_bound {f : exprℝ → E} {a b : exprℝ} {n : ℕ} (hab : a ≤ b)\n    (hf : cont_diff_on (exprℝ) (n + 1) f (Icc a b)) :\n    ∃ C, ∀ x ∈ Icc a b, «expr‖ ‖» (f x - taylor_within_eval f n (Icc a b) a x) ≤ C * (x - a) ^ (n + 1) :=\n  by\n  rcases eq_or_lt_of_le hab with (rfl | h)\n  · refine' ⟨0, fun x hx => _⟩\n    have : a = x := by simpa [← le_antisymm_iff] using hx\n    simp [← this]\n  -- We estimate by the supremum of the norm of the iterated derivative\n  let g : exprℝ → exprℝ := fun y => «expr‖ ‖» (iterated_deriv_within (n + 1) f (Icc a b) y)\n  use SupSet.supₛ («expr '' » g (Icc a b)) / nat.factorial n\n  intro x hx\n  rw [div_mul_eq_mul_div₀]\n  refine' taylor_mean_remainder_bound hab hf hx fun y => _\n  exact (hf.continuous_on_iterated_deriv_within rfl.le <| unique_diff_on_Icc h).norm.le_Sup_image_Icc\n#align exists_taylor_mean_remainder_bound exists_taylor_mean_remainder_bound\n\n",
 "continuous_on_taylor_within_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If `f` is `n` times continuous differentiable on a set `s`, then the Taylor polynomial\n  `taylor_within_eval f n s x₀ x` is continuous in `x₀`. -/\ntheorem continuous_on_taylor_within_eval {f : exprℝ → E} {x : exprℝ} {n : ℕ} {s : set (exprℝ)}\n    (hs : unique_diff_on (exprℝ) s) (hf : cont_diff_on (exprℝ) n f s) :\n    continuous_on (fun t => taylor_within_eval f n s t x) s :=\n  by\n  simp_rw [taylor_within_apply]\n  refine' continuous_on_finset_sum (Finset.range (n + 1)) fun i hi => _\n  refine' (continuous_on_const.mul ((continuous_on_const.sub continuous_on_id).pow _)).smul _\n  rw [cont_diff_on_iff_continuous_on_differentiable_on_deriv hs] at hf\n  cases hf\n  specialize hf_left i\n  simp only [Finset.mem_range] at hi\n  refine' hf_left _\n  simp only [WithTop.coe_le_coe]\n  exact nat.lt_succ_iff.mp hi\n#align continuous_on_taylor_within_eval continuous_on_taylor_within_eval\n\n"}