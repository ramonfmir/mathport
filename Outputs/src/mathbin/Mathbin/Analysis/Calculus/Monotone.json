{"tendsto_apply_add_mul_sq_div_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n/-- If `(f y - f x) / (y - x)` converges to a limit as `y` tends to `x`, then the same goes if\n`y` is shifted a little bit, i.e., `f (y + (y-x)^2) - f x) / (y - x)` converges to the same limit.\nThis lemma contains a slightly more general version of this statement (where one considers\nconvergence along some subfilter, typically `𝓝[<] x` or `𝓝[>] x`) tailored to the application\nto almost everywhere differentiability of monotone functions. -/\ntheorem tendsto_apply_add_mul_sq_div_sub {f : exprℝ → exprℝ} {x a c d : exprℝ} {l : Filter (exprℝ)}\n    (hl : l ≤ nhds_within.ne x) (hf : Tendsto (fun y => (f y - d) / (y - x)) l ((nhds) a))\n    (h' : Tendsto (fun y => y + c * (y - x) ^ 2) l l) :\n    Tendsto (fun y => (f (y + c * (y - x) ^ 2) - d) / (y - x)) l ((nhds) a) :=\n  by\n  have L : tendsto (fun y => (y + c * (y - x) ^ 2 - x) / (y - x)) l ((nhds) 1) :=\n    by\n    have : tendsto (fun y => 1 + c * (y - x)) l ((nhds) (1 + c * (x - x))) :=\n      by\n      apply tendsto.mono_left _ (hl.trans nhdsWithin_le_nhds)\n      exact ((tendsto_id.sub_const x).const_mul c).const_add 1\n    simp only [_root_.sub_self, add_zero, MulZeroClass.mul_zero] at this\n    apply tendsto.congr' (eventually.filter_mono hl _) this\n    filter_upwards [self_mem_nhdsWithin]with y hy\n    field_simp [sub_ne_zero.2 hy]\n    ring\n  have Z := (hf.comp h').mul L\n  rw [mul_one] at Z\n  apply tendsto.congr' _ Z\n  have :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n      (y + c * (y - x) ^ 2 ≠ x) :=\n    by apply tendsto.mono_right h' hl self_mem_nhdsWithin\n  filter_upwards [this]with y hy\n  field_simp [sub_ne_zero.2 hy]\n#align tendsto_apply_add_mul_sq_div_sub tendsto_apply_add_mul_sq_div_sub\n\n",
 "ae_has_deriv_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ , » -/\n/-- A monotone function is almost everywhere differentiable, with derivative equal to the\nRadon-Nikodym derivative of the associated Stieltjes measure with respect to Lebesgue. -/\ntheorem monotone.ae_has_deriv_at {f : exprℝ → exprℝ} (hf : Monotone f) :\n    «expr∀ᵐ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ , »\"\n      (has_deriv_at f (rn_deriv hf.stieltjes_function.measure volume x).to_real x) :=\n  by\n  /- We already know that the Stieltjes function associated to `f` (i.e., `g : x ↦ f (x^+)`) is\n    differentiable almost everywhere. We reduce to this statement by sandwiching values of `f` with\n    values of `g`, by shifting with `(y - x)^2` (which has no influence on the relevant\n    scale `y - x`.)-/\n  filter_upwards [hf.stieltjes_function.ae_has_deriv_at, hf.countable_not_continuous_at.ae_not_mem volume]with x hx h'x\n  have A : hf.stieltjes_function x = f x :=\n    by\n    rw [Classical.not_not, hf.continuous_at_iff_left_lim_eq_right_lim] at h'x\n    apply le_antisymm _ (hf.le_right_lim (le_refl _))\n    rw [← h'x]\n    exact hf.left_lim_le (le_refl _)\n  rw [has_deriv_at_iff_tendsto_slope, (nhds_left'_sup_nhds_right' x).symm, tendsto_sup, slope_fun_def_field, A] at hx\n  -- prove differentiability on the right, by sandwiching with values of `g`\n  have L1 :\n    tendsto (fun y => (f y - f x) / (y - x)) (nhds_within.gt x)\n      ((nhds) (rn_deriv hf.stieltjes_function.measure volume x).to_real) :=\n    by\n    -- limit of a helper function, with a small shift compared to `g`\n    have :\n      tendsto (fun y => (hf.stieltjes_function (y + -1 * (y - x) ^ 2) - f x) / (y - x)) (nhds_within.gt x)\n        ((nhds) (rn_deriv hf.stieltjes_function.measure volume x).to_real) :=\n      by\n      apply tendsto_apply_add_mul_sq_div_sub (nhds_right'_le_nhds_ne x) hx.2\n      apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within\n      · apply tendsto.mono_left _ nhdsWithin_le_nhds\n        have : tendsto (fun y : exprℝ => y + -1 * (y - x) ^ 2) ((nhds) x) ((nhds) (x + -1 * (x - x) ^ 2)) :=\n          tendsto_id.add (((tendsto_id.sub_const x).pow 2).const_mul (-1))\n        simpa using this\n      · have : Ioo x (x + 1) ∈ nhds_within.gt x :=\n          by\n          apply Ioo_mem_nhdsWithin_Ioi\n          exact ⟨le_refl _, by linarith⟩\n        filter_upwards [this]\n        rintro y ⟨hy : x < y, h'y : y < x + 1⟩\n        rw [mem_Ioi]\n        nlinarith\n    -- apply the sandwiching argument, with the helper function and `g`\n    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' this hx.2\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y (hy : x < y)\n      have : 0 < (y - x) ^ 2 := sq_pos_of_pos (sub_pos.2 hy)\n      apply div_le_div_of_le_of_nonneg _ (sub_pos.2 hy).le\n      exact (sub_le_sub_iff_right _).2 (hf.right_lim_le (by linarith))\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y (hy : x < y)\n      apply div_le_div_of_le_of_nonneg _ (sub_pos.2 hy).le\n      exact (sub_le_sub_iff_right _).2 (hf.le_right_lim (le_refl y))\n  -- prove differentiability on the left, by sandwiching with values of `g`\n  have L2 :\n    tendsto (fun y => (f y - f x) / (y - x)) (nhds_within.lt x)\n      ((nhds) (rn_deriv hf.stieltjes_function.measure volume x).to_real) :=\n    by\n    -- limit of a helper function, with a small shift compared to `g`\n    have :\n      tendsto (fun y => (hf.stieltjes_function (y + -1 * (y - x) ^ 2) - f x) / (y - x)) (nhds_within.lt x)\n        ((nhds) (rn_deriv hf.stieltjes_function.measure volume x).to_real) :=\n      by\n      apply tendsto_apply_add_mul_sq_div_sub (nhds_left'_le_nhds_ne x) hx.1\n      apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within\n      · apply tendsto.mono_left _ nhdsWithin_le_nhds\n        have : tendsto (fun y : exprℝ => y + -1 * (y - x) ^ 2) ((nhds) x) ((nhds) (x + -1 * (x - x) ^ 2)) :=\n          tendsto_id.add (((tendsto_id.sub_const x).pow 2).const_mul (-1))\n        simpa using this\n      · have : Ioo (x - 1) x ∈ nhds_within.lt x :=\n          by\n          apply Ioo_mem_nhdsWithin_Iio\n          exact ⟨by linarith, le_refl _⟩\n        filter_upwards [this]\n        rintro y ⟨hy : x - 1 < y, h'y : y < x⟩\n        rw [mem_Iio]\n        nlinarith\n    -- apply the sandwiching argument, with `g` and the helper function\n    apply tendsto_of_tendsto_of_tendsto_of_le_of_le' hx.1 this\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y (hy : y < x)\n      apply div_le_div_of_nonpos_of_le (sub_neg.2 hy).le\n      exact (sub_le_sub_iff_right _).2 (hf.le_right_lim (le_refl _))\n    · filter_upwards [self_mem_nhdsWithin]\n      rintro y (hy : y < x)\n      have : 0 < (y - x) ^ 2 := sq_pos_of_neg (sub_neg.2 hy)\n      apply div_le_div_of_nonpos_of_le (sub_neg.2 hy).le\n      exact (sub_le_sub_iff_right _).2 (hf.right_lim_le (by linarith))\n  -- conclude global differentiability\n  rw [has_deriv_at_iff_tendsto_slope, slope_fun_def_field, (nhds_left'_sup_nhds_right' x).symm, tendsto_sup]\n  exact ⟨L2, L1⟩\n#align monotone.ae_has_deriv_at monotone.ae_has_deriv_at\n\n",
 "ae_differentiable_within_at_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A real function which is monotone on a set is differentiable Lebesgue-almost everywhere on\nthis set. This version does not assume that `s` is measurable. For a formulation with\n`volume.restrict s` assuming that `s` is measurable, see `monotone_on.ae_differentiable_within_at`.\n-/\ntheorem monotone_on.ae_differentiable_within_at_of_mem {f : exprℝ → exprℝ} {s : Set (exprℝ)} (hf : MonotoneOn f s) :\n    «expr∀ᵐ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ , »\"\n      (x ∈ s → differentiable_within_at (exprℝ) f s x) :=\n  by\n  /- We use a global monotone extension of `f`, and argue that this extension is differentiable\n    almost everywhere. Such an extension need not exist (think of `1/x` on `(0, +∞)`), but it exists\n    if one restricts first the function to a compact interval `[a, b]`. -/\n  apply ae_of_mem_of_ae_of_mem_inter_Ioo\n  intro a b as bs hab\n  obtain ⟨g, hg, gf⟩ : ∃ g : exprℝ → exprℝ, Monotone g ∧ eq_on f g (s ∩ Icc a b) :=\n    (hf.mono (inter_subset_left s (Icc a b))).exists_monotone_extension\n      (hf.map_bdd_below (inter_subset_left _ _) ⟨a, fun x hx => hx.2.1, as⟩)\n      (hf.map_bdd_above (inter_subset_left _ _) ⟨b, fun x hx => hx.2.2, bs⟩)\n  filter_upwards [hg.ae_differentiable_at]with x hx\n  intro h'x\n  apply hx.differentiable_within_at.congr_of_eventually_eq _ (gf ⟨h'x.1, h'x.2.1.le, h'x.2.2.le⟩)\n  have : Ioo a b ∈ nhds_within s x := nhdsWithin_le_nhds (Ioo_mem_nhds h'x.2.1 h'x.2.2)\n  filter_upwards [self_mem_nhdsWithin, this]with y hy h'y\n  exact gf ⟨hy, h'y.1.le, h'y.2.le⟩\n#align monotone_on.ae_differentiable_within_at_of_mem monotone_on.ae_differentiable_within_at_of_mem\n\n",
 "ae_differentiable_within_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A real function which is monotone on a set is differentiable Lebesgue-almost everywhere on\nthis set. This version assumes that `s` is measurable and uses `volume.restrict s`.\nFor a formulation without measurability assumption,\nsee `monotone_on.ae_differentiable_within_at_of_mem`. -/\ntheorem monotone_on.ae_differentiable_within_at {f : exprℝ → exprℝ} {s : Set (exprℝ)} (hf : MonotoneOn f s)\n    (hs : MeasurableSet s) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\"\n      (volume.restrict s) (differentiable_within_at (exprℝ) f s x) :=\n  by\n  rw [ae_restrict_iff' hs]\n  exact hf.ae_differentiable_within_at_of_mem\n#align monotone_on.ae_differentiable_within_at monotone_on.ae_differentiable_within_at\n\n",
 "ae_differentiable_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A monotone real function is differentiable Lebesgue-almost everywhere. -/\ntheorem monotone.ae_differentiable_at {f : exprℝ → exprℝ} (hf : Monotone f) :\n    «expr∀ᵐ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ , »\"\n      (differentiable_at (exprℝ) f x) :=\n  by filter_upwards [hf.ae_has_deriv_at]with x hx using hx.differentiable_at\n#align monotone.ae_differentiable_at monotone.ae_differentiable_at\n\n"}