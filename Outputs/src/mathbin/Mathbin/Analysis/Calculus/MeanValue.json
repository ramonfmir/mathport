{"strict_mono_on_of_deriv_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f'` is positive, then\n`f` is a strictly monotone function on `D`.\nNote that we don't require differentiability explicitly as it already implied by the derivative\nbeing strictly positive. -/\ntheorem convex.strict_mono_on_of_deriv_pos {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : ∀ x ∈ interior D, 0 < deriv f x) : StrictMonoOn f D :=\n  by\n  rintro x hx y hy\n  simpa only [MulZeroClass.zero_mul, sub_pos] using hD.mul_sub_lt_image_sub_of_lt_deriv hf _ hf' x hx y hy\n  exact fun z hz => (differentiable_at_of_deriv_ne_zero (hf' z hz).ne').differentiable_within_at\n#align convex.strict_mono_on_of_deriv_pos convex.strict_mono_on_of_deriv_pos\n\n",
 "strict_mono_of_deriv_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is positive, then\n`f` is a strictly monotone function.\nNote that we don't require differentiability explicitly as it already implied by the derivative\nbeing strictly positive. -/\ntheorem strict_mono_of_deriv_pos {f : exprℝ → exprℝ} (hf' : ∀ x, 0 < deriv f x) : StrictMono f :=\n  strictMonoOn_univ.1 <|\n    convex_univ.strict_mono_on_of_deriv_pos\n      (fun z _ => (differentiable_at_of_deriv_ne_zero (hf' z).ne').differentiable_within_at.continuous_within_at)\n      fun x _ => hf' x\n#align strict_mono_of_deriv_pos strict_mono_of_deriv_pos\n\n",
 "strict_convex_on_univ_of_deriv2_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on `ℝ`, and `f''` is strictly positive on `ℝ`,\nthen `f` is strictly convex on `ℝ`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point.  -/\ntheorem strict_convex_on_univ_of_deriv2_pos {f : exprℝ → exprℝ} (hf : Continuous f)\n    (hf'' : ∀ x, 0 < ((«expr ^[ ]» deriv 2) f) x) : StrictConvexOn (exprℝ) univ f :=\n  strict_convex_on_of_deriv2_pos' convex_univ hf.continuous_on fun x _ => hf'' x\n#align strict_convex_on_univ_of_deriv2_pos strict_convex_on_univ_of_deriv2_pos\n\n",
 "strict_convex_on_univ_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous and `f'` is strictly monotone on `ℝ` then `f` is strictly\nconvex. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict monotonicity of `f'`. -/\ntheorem strict_mono.strict_convex_on_univ_of_deriv {f : exprℝ → exprℝ} (hf : Continuous f)\n    (hf'_mono : StrictMono (deriv f)) : StrictConvexOn (exprℝ) univ f :=\n  (hf'_mono.strict_mono_on _).strict_convex_on_of_deriv convex_univ hf.continuous_on\n#align strict_mono.strict_convex_on_univ_of_deriv strict_mono.strict_convex_on_univ_of_deriv\n\n",
 "strict_convex_on_of_deriv2_pos'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly positive on `D`,\nthen `f` is strictly convex on `D`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point. -/\ntheorem strict_convex_on_of_deriv2_pos' {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ D, 0 < ((«expr ^[ ]» deriv 2) f) x) : StrictConvexOn (exprℝ) D f :=\n  strict_convex_on_of_deriv2_pos hD hf fun x hx => hf'' x (interior_subset hx)\n#align strict_convex_on_of_deriv2_pos' strict_convex_on_of_deriv2_pos'\n\n",
 "strict_convex_on_of_deriv2_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly positive on the\ninterior, then `f` is strictly convex on `D`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point. -/\ntheorem strict_convex_on_of_deriv2_pos {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ interior D, 0 < ((«expr ^[ ]» deriv 2) f) x) : StrictConvexOn (exprℝ) D f :=\n  ((hD.interior.strict_mono_on_of_deriv_pos fun z hz =>\n          (differentiable_at_of_deriv_ne_zero (hf'' z hz).ne').differentiable_within_at.continuous_within_at) <|\n        by rwa [interior_interior]).strict_convex_on_of_deriv\n    hD hf\n#align strict_convex_on_of_deriv2_pos strict_convex_on_of_deriv2_pos\n\n",
 "strict_convex_on_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, and `f'` is strictly monotone on the\ninterior, then `f` is strictly convex on `D`.\nNote that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict monotonicity of `f'`. -/\ntheorem strict_mono_on.strict_convex_on_of_deriv {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : StrictMonoOn (deriv f) (interior D)) : StrictConvexOn (exprℝ) D f :=\n  strictConvexOn_of_slope_strict_mono_adjacent hD\n    (by\n      intro x y z hx hz hxy hyz\n      -- First we prove some trivial inclusions\n      have hxzD : Icc x z ⊆ D := hD.ord_connected.out hx hz\n      have hxyD : Icc x y ⊆ D := subset.trans (Icc_subset_Icc_right <| le_of_lt hyz) hxzD\n      have hxyD' : Ioo x y ⊆ interior D := subset_sUnion_of_mem ⟨isOpen_Ioo, subset.trans Ioo_subset_Icc_self hxyD⟩\n      have hyzD : Icc y z ⊆ D := subset.trans (Icc_subset_Icc_left <| le_of_lt hxy) hxzD\n      have hyzD' : Ioo y z ⊆ interior D := subset_sUnion_of_mem ⟨isOpen_Ioo, subset.trans Ioo_subset_Icc_self hyzD⟩\n      -- Then we get points `a` and `b` in each interval `[x, y]` and `[y, z]` where the derivatives\n      -- can be compared to the slopes between `x, y` and `y, z` respectively.\n      obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, (f y - f x) / (y - x) < deriv f a\n      exact strict_mono_on.exists_slope_lt_deriv (hf.mono hxyD) hxy (hf'.mono hxyD')\n      obtain ⟨b, ⟨hyb, hbz⟩, hb⟩ : ∃ b ∈ Ioo y z, deriv f b < (f z - f y) / (z - y)\n      exact strict_mono_on.exists_deriv_lt_slope (hf.mono hyzD) hyz (hf'.mono hyzD')\n      apply ha.trans (lt_trans _ hb)\n      exact hf' (hxyD' ⟨hxa, hay⟩) (hyzD' ⟨hyb, hbz⟩) (hay.trans hyb))\n#align strict_mono_on.strict_convex_on_of_deriv strict_mono_on.strict_convex_on_of_deriv\n\n",
 "strict_concave_on_univ_of_deriv2_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on `ℝ`, and `f''` is strictly negative on `ℝ`,\nthen `f` is strictly concave on `ℝ`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly negative, except at at most one point.  -/\ntheorem strict_concave_on_univ_of_deriv2_neg {f : exprℝ → exprℝ} (hf : Continuous f)\n    (hf'' : ∀ x, («expr ^[ ]» deriv 2) f x < 0) : StrictConcaveOn (exprℝ) univ f :=\n  strict_concave_on_of_deriv2_neg' convex_univ hf.continuous_on fun x _ => hf'' x\n#align strict_concave_on_univ_of_deriv2_neg strict_concave_on_univ_of_deriv2_neg\n\n",
 "strict_concave_on_univ_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous and `f'` is strictly antitone on `ℝ` then `f` is strictly\nconcave. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict antitonicity of `f'`. -/\ntheorem strict_anti.strict_concave_on_univ_of_deriv {f : exprℝ → exprℝ} (hf : Continuous f)\n    (hf'_anti : StrictAnti (deriv f)) : StrictConcaveOn (exprℝ) univ f :=\n  (hf'_anti.strict_anti_on _).strict_concave_on_of_deriv convex_univ hf.continuous_on\n#align strict_anti.strict_concave_on_univ_of_deriv strict_anti.strict_concave_on_univ_of_deriv\n\n",
 "strict_concave_on_of_deriv2_neg'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly negative on `D`,\nthen `f` is strictly concave on `D`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly negative, except at at most one point. -/\ntheorem strict_concave_on_of_deriv2_neg' {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ D, («expr ^[ ]» deriv 2) f x < 0) : StrictConcaveOn (exprℝ) D f :=\n  strict_concave_on_of_deriv2_neg hD hf fun x hx => hf'' x (interior_subset hx)\n#align strict_concave_on_of_deriv2_neg' strict_concave_on_of_deriv2_neg'\n\n",
 "strict_concave_on_of_deriv2_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly negative on the\ninterior, then `f` is strictly concave on `D`.\nNote that we don't require twice differentiability explicitly as it already implied by the second\nderivative being strictly negative, except at at most one point. -/\ntheorem strict_concave_on_of_deriv2_neg {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ interior D, («expr ^[ ]» deriv 2) f x < 0) : StrictConcaveOn (exprℝ) D f :=\n  ((hD.interior.strict_anti_on_of_deriv_neg fun z hz =>\n          (differentiable_at_of_deriv_ne_zero (hf'' z hz).ne).differentiable_within_at.continuous_within_at) <|\n        by rwa [interior_interior]).strict_concave_on_of_deriv\n    hD hf\n#align strict_concave_on_of_deriv2_neg strict_concave_on_of_deriv2_neg\n\n",
 "strict_concave_on_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f'` is strictly antitone on the\ninterior, then `f` is strictly concave on `D`.\nNote that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict antitonicity of `f'`. -/\ntheorem strict_anti_on.strict_concave_on_of_deriv {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (h_anti : StrictAntiOn (deriv f) (interior D)) : StrictConcaveOn (exprℝ) D f :=\n  haveI : StrictMonoOn (deriv (-f)) (interior D) :=\n    by\n    intro x hx y hy hxy\n    convert neg_lt_neg (h_anti hx hy hxy) <;> convert deriv.neg\n  neg_strict_convex_on_iff.mp (this.strict_convex_on_of_deriv hD hf.neg)\n#align strict_anti_on.strict_concave_on_of_deriv strict_anti_on.strict_concave_on_of_deriv\n\n",
 "strict_anti_on_of_deriv_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f'` is negative, then\n`f` is a strictly antitone function on `D`. -/\ntheorem convex.strict_anti_on_of_deriv_neg {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : ∀ x ∈ interior D, deriv f x < 0) : StrictAntiOn f D := fun x hx y => by\n  simpa only [MulZeroClass.zero_mul, sub_lt_zero] using\n    hD.image_sub_lt_mul_sub_of_deriv_lt hf\n      (fun z hz => (differentiable_at_of_deriv_ne_zero (hf' z hz).ne).differentiable_within_at) hf' x hx y\n#align convex.strict_anti_on_of_deriv_neg convex.strict_anti_on_of_deriv_neg\n\n",
 "strict_anti_of_deriv_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is negative, then\n`f` is a strictly antitone function.\nNote that we don't require differentiability explicitly as it already implied by the derivative\nbeing strictly negative. -/\ntheorem strict_anti_of_deriv_neg {f : exprℝ → exprℝ} (hf' : ∀ x, deriv f x < 0) : StrictAnti f :=\n  strictAntiOn_univ.1 <|\n    convex_univ.strict_anti_on_of_deriv_neg\n      (fun z _ => (differentiable_at_of_deriv_ne_zero (hf' z).ne).differentiable_within_at.continuous_within_at)\n      fun x _ => hf' x\n#align strict_anti_of_deriv_neg strict_anti_of_deriv_neg\n\n",
 "norm_image_sub_le_of_norm_has_fderiv_within_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Variant of the mean value inequality on a convex set, using a bound on the difference between\nthe derivative and a fixed linear map, rather than a bound on the derivative itself. Version with\n`has_fderiv_within`. -/\ntheorem norm_image_sub_le_of_norm_has_fderiv_within_le' (hf : ∀ x ∈ s, has_fderiv_within_at f (f' x) s x)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (f' x - φ) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x - φ (y - x)) ≤ C * «expr‖ ‖» (y - x) :=\n  by\n  /- We subtract `φ` to define a new function `g` for which `g' = 0`, for which the previous theorem\n    applies, `convex.norm_image_sub_le_of_norm_has_fderiv_within_le`. Then, we just need to glue\n    together the pieces, expressing back `f` in terms of `g`. -/\n  let g y := f y - φ y\n  have hg : ∀ x ∈ s, has_fderiv_within_at g (f' x - φ) s x := fun x xs => (hf x xs).sub φ.has_fderiv_within_at\n  calc\n    «expr‖ ‖» (f y - f x - φ (y - x)) = «expr‖ ‖» (f y - f x - (φ y - φ x)) := by simp\n    _ = «expr‖ ‖» (f y - φ y - (f x - φ x)) := by abel\n    _ = «expr‖ ‖» (g y - g x) := by simp\n    _ ≤ C * «expr‖ ‖» (y - x) := convex.norm_image_sub_le_of_norm_has_fderiv_within_le hg bound hs xs ys\n    \n#align norm_image_sub_le_of_norm_has_fderiv_within_le' norm_image_sub_le_of_norm_has_fderiv_within_le'\n\n",
 "norm_image_sub_le_of_norm_has_fderiv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The mean value theorem on a convex set: if the derivative of a function is bounded by `C`, then\nthe function is `C`-Lipschitz. Version with `has_fderiv_within`. -/\ntheorem norm_image_sub_le_of_norm_has_fderiv_within_le (hf : ∀ x ∈ s, has_fderiv_within_at f (f' x) s x)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (f' x) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x) ≤ C * «expr‖ ‖» (y - x) :=\n  by\n  letI : NormedSpace (exprℝ) G := restrict_scalars.normed_space (exprℝ) 𝕜 G\n  /- By composition with `t ↦ x + t • (y-x)`, we reduce to a statement for functions defined\n    on `[0,1]`, for which it is proved in `norm_image_sub_le_of_norm_deriv_le_segment`.\n    We just have to check the differentiability of the composition and bounds on its derivative,\n    which is straightforward but tedious for lack of automation. -/\n  have C0 : 0 ≤ C := le_trans (norm_nonneg _) (bound x xs)\n  set g : exprℝ → E := fun t => x + «expr • » t (y - x)\n  have Dg : ∀ t, has_deriv_at g (y - x) t := by\n    intro t\n    simpa only [one_smul] using ((has_deriv_at_id t).smul_const (y - x)).const_add x\n  have segm : Icc 0 1 ⊆ «expr ⁻¹' » g s :=\n    by\n    rw [← image_subset_iff, ← segment_eq_image']\n    apply hs.segment_subset xs ys\n  have : f x = f (g 0) := by\n    simp only [g]\n    rw [zero_smul, add_zero]\n  rw [this]\n  have : f y = f (g 1) := by\n    simp only [g]\n    rw [one_smul, add_sub_cancel'_right]\n  rw [this]\n  have D2 : ∀ t ∈ Icc (0 : exprℝ) 1, has_deriv_within_at (f ∘ g) (f' (g t) (y - x)) (Icc 0 1) t :=\n    by\n    intro t ht\n    have : has_fderiv_within_at f ((f' (g t)).restrict_scalars (exprℝ)) s (g t) := hf (g t) (segm ht)\n    exact this.comp_has_deriv_within_at _ (Dg t).has_deriv_within_at segm\n  apply norm_image_sub_le_of_norm_deriv_le_segment_01' D2\n  refine' fun t ht => le_of_op_norm_le _ _ _\n  exact bound (g t) (segm <| Ico_subset_Icc_self ht)\n#align norm_image_sub_le_of_norm_has_fderiv_within_le norm_image_sub_le_of_norm_has_fderiv_within_le\n\n",
 "norm_image_sub_le_of_norm_has_deriv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The mean value theorem on a convex set in dimension 1: if the derivative of a function is\nbounded by `C`, then the function is `C`-Lipschitz. Version with `has_deriv_within`. -/\ntheorem norm_image_sub_le_of_norm_has_deriv_within_le {C : exprℝ} (hf : ∀ x ∈ s, has_deriv_within_at f (f' x) s x)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (f' x) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x) ≤ C * «expr‖ ‖» (y - x) :=\n  convex.norm_image_sub_le_of_norm_has_fderiv_within_le (fun x hx => (hf x hx).has_fderiv_within_at)\n    (fun x hx => le_trans (by simp) (bound x hx)) hs xs ys\n#align norm_image_sub_le_of_norm_has_deriv_within_le norm_image_sub_le_of_norm_has_deriv_within_le\n\n",
 "norm_image_sub_le_of_norm_fderiv_within_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Variant of the mean value inequality on a convex set. Version with `fderiv_within`. -/\ntheorem norm_image_sub_le_of_norm_fderiv_within_le' (hf : differentiable_on 𝕜 f s)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (fderiv_within 𝕜 f s x - φ) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x - φ (y - x)) ≤ C * «expr‖ ‖» (y - x) :=\n  hs.norm_image_sub_le_of_norm_has_fderiv_within_le' (fun x hx => (hf x hx).has_fderiv_within_at) bound xs ys\n#align norm_image_sub_le_of_norm_fderiv_within_le' norm_image_sub_le_of_norm_fderiv_within_le'\n\n",
 "norm_image_sub_le_of_norm_fderiv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The mean value theorem on a convex set: if the derivative of a function within this set is\nbounded by `C`, then the function is `C`-Lipschitz. Version with `fderiv_within`. -/\ntheorem norm_image_sub_le_of_norm_fderiv_within_le (hf : differentiable_on 𝕜 f s)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (fderiv_within 𝕜 f s x) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x) ≤ C * «expr‖ ‖» (y - x) :=\n  hs.norm_image_sub_le_of_norm_has_fderiv_within_le (fun x hx => (hf x hx).has_fderiv_within_at) bound xs ys\n#align norm_image_sub_le_of_norm_fderiv_within_le norm_image_sub_le_of_norm_fderiv_within_le\n\n",
 "norm_image_sub_le_of_norm_fderiv_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Variant of the mean value inequality on a convex set. Version with `fderiv`. -/\ntheorem norm_image_sub_le_of_norm_fderiv_le' (hf : ∀ x ∈ s, differentiable_at 𝕜 f x)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (fderiv 𝕜 f x - φ) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x - φ (y - x)) ≤ C * «expr‖ ‖» (y - x) :=\n  hs.norm_image_sub_le_of_norm_has_fderiv_within_le' (fun x hx => (hf x hx).has_fderiv_at.has_fderiv_within_at) bound xs\n    ys\n#align norm_image_sub_le_of_norm_fderiv_le' norm_image_sub_le_of_norm_fderiv_le'\n\n",
 "norm_image_sub_le_of_norm_fderiv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The mean value theorem on a convex set: if the derivative of a function is bounded by `C`,\nthen the function is `C`-Lipschitz. Version with `fderiv`. -/\ntheorem norm_image_sub_le_of_norm_fderiv_le (hf : ∀ x ∈ s, differentiable_at 𝕜 f x)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (fderiv 𝕜 f x) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x) ≤ C * «expr‖ ‖» (y - x) :=\n  hs.norm_image_sub_le_of_norm_has_fderiv_within_le (fun x hx => (hf x hx).has_fderiv_at.has_fderiv_within_at) bound xs\n    ys\n#align norm_image_sub_le_of_norm_fderiv_le norm_image_sub_le_of_norm_fderiv_le\n\n",
 "norm_image_sub_le_of_norm_deriv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The mean value theorem on a convex set in dimension 1: if the derivative of a function within\nthis set is bounded by `C`, then the function is `C`-Lipschitz. Version with `deriv_within` -/\ntheorem norm_image_sub_le_of_norm_deriv_within_le {C : exprℝ} (hf : differentiable_on 𝕜 f s)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (deriv_within f s x) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x) ≤ C * «expr‖ ‖» (y - x) :=\n  hs.norm_image_sub_le_of_norm_has_deriv_within_le (fun x hx => (hf x hx).has_deriv_within_at) bound xs ys\n#align norm_image_sub_le_of_norm_deriv_within_le norm_image_sub_le_of_norm_deriv_within_le\n\n",
 "norm_image_sub_le_of_norm_deriv_right_le_segment":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A function on `[a, b]` with the norm of the right derivative bounded by `C`\nsatisfies `‖f x - f a‖ ≤ C * (x - a)`. -/\ntheorem norm_image_sub_le_of_norm_deriv_right_le_segment {f' : exprℝ → E} {C : exprℝ} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f' x) ≤ C) :\n    ∀ x ∈ Icc a b, «expr‖ ‖» (f x - f a) ≤ C * (x - a) :=\n  by\n  let g x := f x - f a\n  have hg : ContinuousOn g (Icc a b) := hf.sub continuousOn_const\n  have hg' : ∀ x ∈ Ico a b, has_deriv_within_at g (f' x) (Ici x) x :=\n    by\n    intro x hx\n    simpa using (hf' x hx).sub (has_deriv_within_at_const _ _ _)\n  let B x := C * (x - a)\n  have hB : ∀ x, has_deriv_at B C x := by\n    intro x\n    simpa using (has_deriv_at_const x C).mul ((has_deriv_at_id x).sub (has_deriv_at_const x a))\n  convert image_norm_le_of_norm_deriv_right_le_deriv_boundary hg hg' _ hB bound\n  simp only [g, B]\n  rw [sub_self, norm_zero, sub_self, MulZeroClass.mul_zero]\n#align norm_image_sub_le_of_norm_deriv_right_le_segment norm_image_sub_le_of_norm_deriv_right_le_segment\n\n",
 "norm_image_sub_le_of_norm_deriv_le_segment_01'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A function on `[0, 1]` with the norm of the derivative within `[0, 1]`\nbounded by `C` satisfies `‖f 1 - f 0‖ ≤ C`, `has_deriv_within_at`\nversion. -/\ntheorem norm_image_sub_le_of_norm_deriv_le_segment_01' {f' : exprℝ → E} {C : exprℝ}\n    (hf : ∀ x ∈ Icc (0 : exprℝ) 1, has_deriv_within_at f (f' x) (Icc (0 : exprℝ) 1) x)\n    (bound : ∀ x ∈ Ico (0 : exprℝ) 1, «expr‖ ‖» (f' x) ≤ C) : «expr‖ ‖» (f 1 - f 0) ≤ C := by\n  simpa only [sub_zero, mul_one] using\n    norm_image_sub_le_of_norm_deriv_le_segment' hf bound 1 (right_mem_Icc.2 zero_le_one)\n#align norm_image_sub_le_of_norm_deriv_le_segment_01' norm_image_sub_le_of_norm_deriv_le_segment_01'\n\n",
 "norm_image_sub_le_of_norm_deriv_le_segment_01":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A function on `[0, 1]` with the norm of the derivative within `[0, 1]`\nbounded by `C` satisfies `‖f 1 - f 0‖ ≤ C`, `deriv_within` version. -/\ntheorem norm_image_sub_le_of_norm_deriv_le_segment_01 {C : exprℝ} (hf : differentiable_on (exprℝ) f (Icc (0 : exprℝ) 1))\n    (bound : ∀ x ∈ Ico (0 : exprℝ) 1, «expr‖ ‖» (deriv_within f (Icc (0 : exprℝ) 1) x) ≤ C) :\n    «expr‖ ‖» (f 1 - f 0) ≤ C := by\n  simpa only [sub_zero, mul_one] using\n    norm_image_sub_le_of_norm_deriv_le_segment hf bound 1 (right_mem_Icc.2 zero_le_one)\n#align norm_image_sub_le_of_norm_deriv_le_segment_01 norm_image_sub_le_of_norm_deriv_le_segment_01\n\n",
 "norm_image_sub_le_of_norm_deriv_le_segment'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A function on `[a, b]` with the norm of the derivative within `[a, b]`\nbounded by `C` satisfies `‖f x - f a‖ ≤ C * (x - a)`, `has_deriv_within_at`\nversion. -/\ntheorem norm_image_sub_le_of_norm_deriv_le_segment' {f' : exprℝ → E} {C : exprℝ}\n    (hf : ∀ x ∈ Icc a b, has_deriv_within_at f (f' x) (Icc a b) x) (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f' x) ≤ C) :\n    ∀ x ∈ Icc a b, «expr‖ ‖» (f x - f a) ≤ C * (x - a) :=\n  by\n  refine'\n    norm_image_sub_le_of_norm_deriv_right_le_segment (fun x hx => (hf x hx).continuous_within_at) (fun x hx => _) bound\n  exact (hf x <| Ico_subset_Icc_self hx).nhds_within (Icc_mem_nhdsWithin_Ici hx)\n#align norm_image_sub_le_of_norm_deriv_le_segment' norm_image_sub_le_of_norm_deriv_le_segment'\n\n",
 "norm_image_sub_le_of_norm_deriv_le_segment":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A function on `[a, b]` with the norm of the derivative within `[a, b]`\nbounded by `C` satisfies `‖f x - f a‖ ≤ C * (x - a)`, `deriv_within`\nversion. -/\ntheorem norm_image_sub_le_of_norm_deriv_le_segment {C : exprℝ} (hf : differentiable_on (exprℝ) f (Icc a b))\n    (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (deriv_within f (Icc a b) x) ≤ C) :\n    ∀ x ∈ Icc a b, «expr‖ ‖» (f x - f a) ≤ C * (x - a) :=\n  by\n  refine' norm_image_sub_le_of_norm_deriv_le_segment' _ bound\n  exact fun x hx => (hf x hx).has_deriv_within_at\n#align norm_image_sub_le_of_norm_deriv_le_segment norm_image_sub_le_of_norm_deriv_le_segment\n\n",
 "norm_image_sub_le_of_norm_deriv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The mean value theorem on a convex set in dimension 1: if the derivative of a function is\nbounded by `C`, then the function is `C`-Lipschitz. Version with `deriv`. -/\ntheorem norm_image_sub_le_of_norm_deriv_le {C : exprℝ} (hf : ∀ x ∈ s, differentiable_at 𝕜 f x)\n    (bound : ∀ x ∈ s, «expr‖ ‖» (deriv f x) ≤ C) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    «expr‖ ‖» (f y - f x) ≤ C * «expr‖ ‖» (y - x) :=\n  hs.norm_image_sub_le_of_norm_has_deriv_within_le (fun x hx => (hf x hx).has_deriv_at.has_deriv_within_at) bound xs ys\n#align norm_image_sub_le_of_norm_deriv_le norm_image_sub_le_of_norm_deriv_le\n\n",
 "mul_sub_lt_image_sub_of_lt_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `C < f'`, then `f` grows faster than\n`C * x`, i.e., `C * (y - x) < f y - f x` whenever `x < y`. -/\ntheorem mul_sub_lt_image_sub_of_lt_deriv {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f) {C}\n    (hf'_gt : ∀ x, C < deriv f x) ⦃x y⦄ (hxy : x < y) : C * (y - x) < f y - f x :=\n  convex_univ.mul_sub_lt_image_sub_of_lt_deriv hf.continuous.continuous_on hf.differentiable_on (fun x _ => hf'_gt x) x\n    trivial y trivial hxy\n#align mul_sub_lt_image_sub_of_lt_deriv mul_sub_lt_image_sub_of_lt_deriv\n\n",
 "mul_sub_le_image_sub_of_le_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `C ≤ f'`, then `f` grows at least as fast\nas `C * x`, i.e., `C * (y - x) ≤ f y - f x` whenever `x ≤ y`. -/\ntheorem mul_sub_le_image_sub_of_le_deriv {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f) {C}\n    (hf'_ge : ∀ x, C ≤ deriv f x) ⦃x y⦄ (hxy : x ≤ y) : C * (y - x) ≤ f y - f x :=\n  convex_univ.mul_sub_le_image_sub_of_le_deriv hf.continuous.continuous_on hf.differentiable_on (fun x _ => hf'_ge x) x\n    trivial y trivial hxy\n#align mul_sub_le_image_sub_of_le_deriv mul_sub_le_image_sub_of_le_deriv\n\n",
 "monotone_on_of_deriv_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f'` is nonnegative, then\n`f` is a monotone function on `D`. -/\ntheorem convex.monotone_on_of_deriv_nonneg {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : differentiable_on (exprℝ) f (interior D))\n    (hf'_nonneg : ∀ x ∈ interior D, 0 ≤ deriv f x) : MonotoneOn f D := fun x hx y hy hxy => by\n  simpa only [MulZeroClass.zero_mul, sub_nonneg] using\n    hD.mul_sub_le_image_sub_of_le_deriv hf hf' hf'_nonneg x hx y hy hxy\n#align convex.monotone_on_of_deriv_nonneg convex.monotone_on_of_deriv_nonneg\n\n",
 "monotone_of_deriv_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonnegative, then\n`f` is a monotone function. -/\ntheorem monotone_of_deriv_nonneg {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f) (hf' : ∀ x, 0 ≤ deriv f x) :\n    Monotone f :=\n  monotoneOn_univ.1 <|\n    convex_univ.monotone_on_of_deriv_nonneg hf.continuous.continuous_on hf.differentiable_on fun x _ => hf' x\n#align monotone_of_deriv_nonneg monotone_of_deriv_nonneg\n\n",
 "lipschitz_with_of_nnnorm_deriv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/-- The mean value theorem set in dimension 1: if the derivative of a function is bounded by `C`,\nthen the function is `C`-Lipschitz.  Version with `deriv` and `lipschitz_with`. -/\ntheorem _root_.lipschitz_with_of_nnnorm_deriv_le {C : nnreal} (hf : differentiable 𝕜 f)\n    (bound : ∀ x, «expr‖ ‖₊» (deriv f x) ≤ C) : LipschitzWith C f :=\n  lipschitz_on_univ.1 <| convex_univ.lipschitz_on_with_of_nnnorm_deriv_le (fun x hx => hf x) fun x hx => bound x\n#align lipschitz_with_of_nnnorm_deriv_le lipschitz_with_of_nnnorm_deriv_le\n\n",
 "lipschitz_on_with_of_nnnorm_has_fderiv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The mean value theorem on a convex set: if the derivative of a function is bounded by `C` on\n`s`, then the function is `C`-Lipschitz on `s`. Version with `has_fderiv_within` and\n`lipschitz_on_with`. -/\ntheorem lipschitz_on_with_of_nnnorm_has_fderiv_within_le {C : nnreal} (hf : ∀ x ∈ s, has_fderiv_within_at f (f' x) s x)\n    (bound : ∀ x ∈ s, «expr‖ ‖₊» (f' x) ≤ C) (hs : Convex (exprℝ) s) : LipschitzOnWith C f s :=\n  by\n  rw [lipschitzOnWith_iff_norm_sub_le]\n  intro x x_in y y_in\n  exact hs.norm_image_sub_le_of_norm_has_fderiv_within_le hf bound y_in x_in\n#align lipschitz_on_with_of_nnnorm_has_fderiv_within_le lipschitz_on_with_of_nnnorm_has_fderiv_within_le\n\n",
 "lipschitz_on_with_of_nnnorm_has_deriv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/-- The mean value theorem on a convex set in dimension 1: if the derivative of a function is\nbounded by `C` on `s`, then the function is `C`-Lipschitz on `s`.\nVersion with `has_deriv_within` and `lipschitz_on_with`. -/\ntheorem lipschitz_on_with_of_nnnorm_has_deriv_within_le {C : nnreal} (hs : Convex (exprℝ) s)\n    (hf : ∀ x ∈ s, has_deriv_within_at f (f' x) s x) (bound : ∀ x ∈ s, «expr‖ ‖₊» (f' x) ≤ C) : LipschitzOnWith C f s :=\n  convex.lipschitz_on_with_of_nnnorm_has_fderiv_within_le (fun x hx => (hf x hx).has_fderiv_within_at)\n    (fun x hx => le_trans (by simp) (bound x hx)) hs\n#align lipschitz_on_with_of_nnnorm_has_deriv_within_le lipschitz_on_with_of_nnnorm_has_deriv_within_le\n\n",
 "lipschitz_on_with_of_nnnorm_fderiv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The mean value theorem on a convex set: if the derivative of a function is bounded by `C` on\n`s`, then the function is `C`-Lipschitz on `s`. Version with `fderiv_within` and\n`lipschitz_on_with`. -/\ntheorem lipschitz_on_with_of_nnnorm_fderiv_within_le {C : nnreal} (hf : differentiable_on 𝕜 f s)\n    (bound : ∀ x ∈ s, «expr‖ ‖₊» (fderiv_within 𝕜 f s x) ≤ C) (hs : Convex (exprℝ) s) : LipschitzOnWith C f s :=\n  hs.lipschitz_on_with_of_nnnorm_has_fderiv_within_le (fun x hx => (hf x hx).has_fderiv_within_at) bound\n#align lipschitz_on_with_of_nnnorm_fderiv_within_le lipschitz_on_with_of_nnnorm_fderiv_within_le\n\n",
 "lipschitz_on_with_of_nnnorm_fderiv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The mean value theorem on a convex set: if the derivative of a function is bounded by `C` on\n`s`, then the function is `C`-Lipschitz on `s`. Version with `fderiv` and `lipschitz_on_with`. -/\ntheorem lipschitz_on_with_of_nnnorm_fderiv_le {C : nnreal} (hf : ∀ x ∈ s, differentiable_at 𝕜 f x)\n    (bound : ∀ x ∈ s, «expr‖ ‖₊» (fderiv 𝕜 f x) ≤ C) (hs : Convex (exprℝ) s) : LipschitzOnWith C f s :=\n  hs.lipschitz_on_with_of_nnnorm_has_fderiv_within_le (fun x hx => (hf x hx).has_fderiv_at.has_fderiv_within_at) bound\n#align lipschitz_on_with_of_nnnorm_fderiv_le lipschitz_on_with_of_nnnorm_fderiv_le\n\n",
 "lipschitz_on_with_of_nnnorm_deriv_within_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/-- The mean value theorem on a convex set in dimension 1: if the derivative of a function is\nbounded by `C` on `s`, then the function is `C`-Lipschitz on `s`.\nVersion with `deriv_within` and `lipschitz_on_with`. -/\ntheorem lipschitz_on_with_of_nnnorm_deriv_within_le {C : nnreal} (hs : Convex (exprℝ) s) (hf : differentiable_on 𝕜 f s)\n    (bound : ∀ x ∈ s, «expr‖ ‖₊» (deriv_within f s x) ≤ C) : LipschitzOnWith C f s :=\n  hs.lipschitz_on_with_of_nnnorm_has_deriv_within_le (fun x hx => (hf x hx).has_deriv_within_at) bound\n#align lipschitz_on_with_of_nnnorm_deriv_within_le lipschitz_on_with_of_nnnorm_deriv_within_le\n\n",
 "lipschitz_on_with_of_nnnorm_deriv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The mean value theorem on a convex set in dimension 1: if the derivative of a function is\nbounded by `C` on `s`, then the function is `C`-Lipschitz on `s`.\nVersion with `deriv` and `lipschitz_on_with`. -/\ntheorem lipschitz_on_with_of_nnnorm_deriv_le {C : nnreal} (hf : ∀ x ∈ s, differentiable_at 𝕜 f x)\n    (bound : ∀ x ∈ s, «expr‖ ‖₊» (deriv f x) ≤ C) (hs : Convex (exprℝ) s) : LipschitzOnWith C f s :=\n  hs.lipschitz_on_with_of_nnnorm_has_deriv_within_le (fun x hx => (hf x hx).has_deriv_at.has_deriv_within_at) bound\n#align lipschitz_on_with_of_nnnorm_deriv_le lipschitz_on_with_of_nnnorm_deriv_le\n\n",
 "is_const_of_fderiv_within_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function has zero Fréchet derivative at every point of a convex set,\nthen it is a constant on this set. -/\ntheorem is_const_of_fderiv_within_eq_zero (hs : Convex (exprℝ) s) (hf : differentiable_on 𝕜 f s)\n    (hf' : ∀ x ∈ s, fderiv_within 𝕜 f s x = 0) (hx : x ∈ s) (hy : y ∈ s) : f x = f y :=\n  by\n  have bound : ∀ x ∈ s, «expr‖ ‖» (fderiv_within 𝕜 f s x) ≤ 0 := fun x hx => by simp only [hf' x hx, norm_zero]\n  simpa only [(dist_eq_norm _ _).symm, MulZeroClass.zero_mul, dist_le_zero, eq_comm] using\n    hs.norm_image_sub_le_of_norm_fderiv_within_le hf bound hx hy\n#align is_const_of_fderiv_within_eq_zero is_const_of_fderiv_within_eq_zero\n\n",
 "is_const_of_fderiv_eq_zero":
 "theorem _root_.is_const_of_fderiv_eq_zero (hf : differentiable 𝕜 f) (hf' : ∀ x, fderiv 𝕜 f x = 0) (x y : E) :\n    f x = f y :=\n  convex_univ.is_const_of_fderiv_within_eq_zero hf.differentiable_on\n    (fun x _ => by rw [fderiv_within_univ] <;> exact hf' x) trivial trivial\n#align is_const_of_fderiv_eq_zero is_const_of_fderiv_eq_zero\n\n",
 "is_const_of_deriv_eq_zero":
 "/-- If `f : 𝕜 → G`, `𝕜 = R` or `𝕜 = ℂ`, is differentiable everywhere and its derivative equal zero,\nthen it is a constant function. -/\ntheorem _root_.is_const_of_deriv_eq_zero (hf : differentiable 𝕜 f) (hf' : ∀ x, deriv f x = 0) (x y : 𝕜) : f x = f y :=\n  is_const_of_fderiv_eq_zero hf\n    (fun z => by\n      ext\n      simp [← deriv_fderiv, hf'])\n    _ _\n#align is_const_of_deriv_eq_zero is_const_of_deriv_eq_zero\n\n",
 "image_sub_lt_mul_sub_of_deriv_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f' < C`, then `f` grows slower than\n`C * x` on `D`, i.e., `f y - f x < C * (y - x)` whenever `x < y`. -/\ntheorem image_sub_lt_mul_sub_of_deriv_lt {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f) {C}\n    (lt_hf' : ∀ x, deriv f x < C) ⦃x y⦄ (hxy : x < y) : f y - f x < C * (y - x) :=\n  convex_univ.image_sub_lt_mul_sub_of_deriv_lt hf.continuous.continuous_on hf.differentiable_on (fun x _ => lt_hf' x) x\n    trivial y trivial hxy\n#align image_sub_lt_mul_sub_of_deriv_lt image_sub_lt_mul_sub_of_deriv_lt\n\n",
 "image_sub_le_mul_sub_of_deriv_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f' ≤ C`, then `f` grows at most as fast\nas `C * x`, i.e., `f y - f x ≤ C * (y - x)` whenever `x ≤ y`. -/\ntheorem image_sub_le_mul_sub_of_deriv_le {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f) {C}\n    (le_hf' : ∀ x, deriv f x ≤ C) ⦃x y⦄ (hxy : x ≤ y) : f y - f x ≤ C * (y - x) :=\n  convex_univ.image_sub_le_mul_sub_of_deriv_le hf.continuous.continuous_on hf.differentiable_on (fun x _ => le_hf' x) x\n    trivial y trivial hxy\n#align image_sub_le_mul_sub_of_deriv_le image_sub_le_mul_sub_of_deriv_le\n\n",
 "image_norm_le_of_norm_deriv_right_lt_deriv_boundary'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- General fencing theorem for continuous functions with an estimate on the norm of the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `f` and `B` have right derivatives `f'` and `B'` respectively at every point of `[a, b)`;\n* the norm of `f'` is strictly less than `B'` whenever `‖f x‖ = B x`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\nto make this theorem work for piecewise differentiable functions.\n-/\ntheorem image_norm_le_of_norm_deriv_right_lt_deriv_boundary' {f' : exprℝ → E} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : «expr‖ ‖» (f a) ≤ B a)\n    (hB : ContinuousOn B (Icc a b)) (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x)\n    (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f x) = B x → «expr‖ ‖» (f' x) < B' x) :\n    ∀ ⦃x⦄, x ∈ Icc a b → «expr‖ ‖» (f x) ≤ B x :=\n  image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary hf\n    (fun x hx r hr => (hf' x hx).liminf_right_slope_norm_le hr) ha hB hB' bound\n#align image_norm_le_of_norm_deriv_right_lt_deriv_boundary' image_norm_le_of_norm_deriv_right_lt_deriv_boundary'\n\n",
 "image_norm_le_of_norm_deriv_right_lt_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- General fencing theorem for continuous functions with an estimate on the norm of the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* the norm of `f'` is strictly less than `B'` whenever `‖f x‖ = B x`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\nto make this theorem work for piecewise differentiable functions.\n-/\ntheorem image_norm_le_of_norm_deriv_right_lt_deriv_boundary {f' : exprℝ → E} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : «expr‖ ‖» (f a) ≤ B a)\n    (hB : ∀ x, has_deriv_at B (B' x) x) (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f x) = B x → «expr‖ ‖» (f' x) < B' x) :\n    ∀ ⦃x⦄, x ∈ Icc a b → «expr‖ ‖» (f x) ≤ B x :=\n  image_norm_le_of_norm_deriv_right_lt_deriv_boundary' hf hf' ha (fun x hx => (hB x).continuous_at.continuous_within_at)\n    (fun x hx => (hB x).has_deriv_within_at) bound\n#align image_norm_le_of_norm_deriv_right_lt_deriv_boundary image_norm_le_of_norm_deriv_right_lt_deriv_boundary\n\n",
 "image_norm_le_of_norm_deriv_right_le_deriv_boundary'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- General fencing theorem for continuous functions with an estimate on the norm of the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `f` and `B` have right derivatives `f'` and `B'` respectively at every point of `[a, b)`;\n* we have `‖f' x‖ ≤ B x` everywhere on `[a, b)`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\nto make this theorem work for piecewise differentiable functions.\n-/\ntheorem image_norm_le_of_norm_deriv_right_le_deriv_boundary' {f' : exprℝ → E} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : «expr‖ ‖» (f a) ≤ B a)\n    (hB : ContinuousOn B (Icc a b)) (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x)\n    (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f' x) ≤ B' x) : ∀ ⦃x⦄, x ∈ Icc a b → «expr‖ ‖» (f x) ≤ B x :=\n  image_le_of_liminf_slope_right_le_deriv_boundary (continuous_norm.comp_continuous_on hf) ha hB hB' fun x hx r hr =>\n    (hf' x hx).liminf_right_slope_norm_le (lt_of_le_of_lt (bound x hx) hr)\n#align image_norm_le_of_norm_deriv_right_le_deriv_boundary' image_norm_le_of_norm_deriv_right_le_deriv_boundary'\n\n",
 "image_norm_le_of_norm_deriv_right_le_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- General fencing theorem for continuous functions with an estimate on the norm of the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* we have `‖f' x‖ ≤ B x` everywhere on `[a, b)`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. We use one-sided derivatives in the assumptions\nto make this theorem work for piecewise differentiable functions.\n-/\ntheorem image_norm_le_of_norm_deriv_right_le_deriv_boundary {f' : exprℝ → E} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : «expr‖ ‖» (f a) ≤ B a)\n    (hB : ∀ x, has_deriv_at B (B' x) x) (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f' x) ≤ B' x) :\n    ∀ ⦃x⦄, x ∈ Icc a b → «expr‖ ‖» (f x) ≤ B x :=\n  image_norm_le_of_norm_deriv_right_le_deriv_boundary' hf hf' ha (fun x hx => (hB x).continuous_at.continuous_within_at)\n    (fun x hx => (hB x).has_deriv_within_at) bound\n#align image_norm_le_of_norm_deriv_right_le_deriv_boundary image_norm_le_of_norm_deriv_right_le_deriv_boundary\n\n",
 "image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `‖f a‖ ≤ B a`;\n* `B` has right derivative at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(‖f z‖ - ‖f x‖) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `‖f x‖ = B x`.\n\nThen `‖f x‖ ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary {E : Type _} [NormedAddCommGroup E] {f : exprℝ → E}\n    {f' : exprℝ → exprℝ} (hf : ContinuousOn f (Icc a b))\n    -- `hf'` actually says `liminf (‖f z‖ - ‖f x‖) / (z - x) ≤ f' x`\n    (hf' :\n      ∀ x ∈ Ico a b,\n        ∀ r,\n          f' x < r →\n            «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\"\n              (nhds_within.gt x) (slope (norm ∘ f) x z < r))\n    {B B' : exprℝ → exprℝ} (ha : «expr‖ ‖» (f a) ≤ B a) (hB : ContinuousOn B (Icc a b))\n    (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x)\n    (bound : ∀ x ∈ Ico a b, «expr‖ ‖» (f x) = B x → f' x < B' x) : ∀ ⦃x⦄, x ∈ Icc a b → «expr‖ ‖» (f x) ≤ B x :=\n  image_le_of_liminf_slope_right_lt_deriv_boundary' (continuous_norm.comp_continuous_on hf) hf' ha hB hB' bound\n#align image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary image_norm_le_of_liminf_right_slope_norm_lt_deriv_boundary\n\n",
 "image_le_of_liminf_slope_right_lt_deriv_boundary'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2019 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel, Yury Kudryashov\n-/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_le_of_liminf_slope_right_lt_deriv_boundary' {f f' : exprℝ → exprℝ} {a b : exprℝ}\n    (hf : ContinuousOn f (Icc a b))\n    -- `hf'` actually says `liminf (f z - f x) / (z - x) ≤ f' x`\n    (hf' :\n      ∀ x ∈ Ico a b,\n        ∀ r,\n          f' x < r →\n            «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\"\n              (nhds_within.gt x) (slope f x z < r))\n    {B B' : exprℝ → exprℝ} (ha : f a ≤ B a) (hB : ContinuousOn B (Icc a b))\n    (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x) (bound : ∀ x ∈ Ico a b, f x = B x → f' x < B' x) :\n    ∀ ⦃x⦄, x ∈ Icc a b → f x ≤ B x := by\n  change Icc a b ⊆ { x | f x ≤ B x }\n  set s := { x | f x ≤ B x } ∩ Icc a b\n  have A : ContinuousOn (fun x => (f x, B x)) (Icc a b) := hf.prod hB\n  have : IsClosed s := by\n    simp only [s, inter_comm]\n    exact A.preimage_closed_of_closed isClosed_Icc order_closed_topology.is_closed_le'\n  apply this.Icc_subset_of_forall_exists_gt ha\n  rintro x ⟨hxB : f x ≤ B x, xab⟩ y hy\n  cases' hxB.lt_or_eq with hxB hxB\n  · -- If `f x < B x`, then all we need is continuity of both sides\n    refine' nonempty_of_mem (inter_mem _ (Ioc_mem_nhdsWithin_Ioi ⟨le_rfl, hy⟩))\n    have :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within (Icc a b) x) (f x < B x) :=\n      A x (Ico_subset_Icc_self xab) (IsOpen.mem_nhds (isOpen_lt continuous_fst continuous_snd) hxB)\n    have :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within.gt x) (f x < B x) :=\n      nhdsWithin_le_of_mem (Icc_mem_nhdsWithin_Ioi xab) this\n    exact this.mono fun y => le_of_lt\n  · rcases exists_between (bound x xab hxB) with ⟨r, hfr, hrB⟩\n    specialize hf' x xab r hfr\n    have HB :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within.gt x) (r < slope B x z) :=\n      (has_deriv_within_at_iff_tendsto_slope' <| lt_irrefl x).1 (hB' x xab).Ioi_of_Ici (Ioi_mem_nhds hrB)\n    obtain ⟨z, hfz, hzB, hz⟩ : ∃ z, slope f x z < r ∧ r < slope B x z ∧ z ∈ Ioc x y\n    exact (hf'.and_eventually (HB.and (Ioc_mem_nhdsWithin_Ioi ⟨le_rfl, hy⟩))).exists\n    refine' ⟨z, _, hz⟩\n    have := (hfz.trans hzB).le\n    rwa [slope_def_field, slope_def_field, div_le_div_right (sub_pos.2 hz.1), hxB, sub_le_sub_iff_right] at this\n#align image_le_of_liminf_slope_right_lt_deriv_boundary' image_le_of_liminf_slope_right_lt_deriv_boundary'\n\n",
 "image_le_of_liminf_slope_right_lt_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by a function `f'`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_le_of_liminf_slope_right_lt_deriv_boundary {f f' : exprℝ → exprℝ} {a b : exprℝ}\n    (hf : ContinuousOn f (Icc a b))\n    -- `hf'` actually says `liminf (f z - f x) / (z - x) ≤ f' x`\n    (hf' :\n      ∀ x ∈ Ico a b,\n        ∀ r,\n          f' x < r →\n            «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\"\n              (nhds_within.gt x) (slope f x z < r))\n    {B B' : exprℝ → exprℝ} (ha : f a ≤ B a) (hB : ∀ x, has_deriv_at B (B' x) x)\n    (bound : ∀ x ∈ Ico a b, f x = B x → f' x < B' x) : ∀ ⦃x⦄, x ∈ Icc a b → f x ≤ B x :=\n  image_le_of_liminf_slope_right_lt_deriv_boundary' hf hf' ha (fun x hx => (hB x).continuous_at.continuous_within_at)\n    (fun x hx => (hB x).has_deriv_within_at) bound\n#align image_le_of_liminf_slope_right_lt_deriv_boundary image_le_of_liminf_slope_right_lt_deriv_boundary\n\n",
 "image_le_of_liminf_slope_right_le_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* for each `x ∈ [a, b)` the right-side limit inferior of `(f z - f x) / (z - x)`\n  is bounded above by `B'`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_le_of_liminf_slope_right_le_deriv_boundary {f : exprℝ → exprℝ} {a b : exprℝ}\n    (hf : ContinuousOn f (Icc a b)) {B B' : exprℝ → exprℝ} (ha : f a ≤ B a) (hB : ContinuousOn B (Icc a b))\n    (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x)\n    -- `bound` actually says `liminf (f z - f x) / (z - x) ≤ B' x`\n    (bound :\n      ∀ x ∈ Ico a b,\n        ∀ r,\n          B' x < r →\n            «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\"\n              (nhds_within.gt x) (slope f x z < r)) :\n    ∀ ⦃x⦄, x ∈ Icc a b → f x ≤ B x :=\n  by\n  have Hr : ∀ x ∈ Icc a b, ∀ r > 0, f x ≤ B x + r * (x - a) :=\n    by\n    intro x hx r hr\n    apply image_le_of_liminf_slope_right_lt_deriv_boundary' hf bound\n    · rwa [sub_self, MulZeroClass.mul_zero, add_zero]\n    · exact hB.add (continuous_on_const.mul (continuous_id.continuous_on.sub continuousOn_const))\n    · intro x hx\n      exact (hB' x hx).add (((has_deriv_within_at_id x (Ici x)).sub_const a).const_mul r)\n    · intro x hx _\n      rw [mul_one]\n      exact (lt_add_iff_pos_right _).2 hr\n    exact hx\n  intro x hx\n  have : ContinuousWithinAt (fun r => B x + r * (x - a)) (Ioi 0) 0 :=\n    continuous_within_at_const.add (continuous_within_at_id.mul continuousWithinAt_const)\n  convert continuous_within_at_const.closure_le _ this (Hr x hx) <;> simp\n#align image_le_of_liminf_slope_right_le_deriv_boundary image_le_of_liminf_slope_right_le_deriv_boundary\n\n",
 "image_le_of_deriv_right_lt_deriv_boundary'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has right derivative `B'` at every point of `[a, b)`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_le_of_deriv_right_lt_deriv_boundary' {f f' : exprℝ → exprℝ} {a b : exprℝ} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : f a ≤ B a)\n    (hB : ContinuousOn B (Icc a b)) (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x)\n    (bound : ∀ x ∈ Ico a b, f x = B x → f' x < B' x) : ∀ ⦃x⦄, x ∈ Icc a b → f x ≤ B x :=\n  image_le_of_liminf_slope_right_lt_deriv_boundary' hf (fun x hx r hr => (hf' x hx).liminf_right_slope_le hr) ha hB hB'\n    bound\n#align image_le_of_deriv_right_lt_deriv_boundary' image_le_of_deriv_right_lt_deriv_boundary'\n\n",
 "image_le_of_deriv_right_lt_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x < B' x` whenever `f x = B x`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_le_of_deriv_right_lt_deriv_boundary {f f' : exprℝ → exprℝ} {a b : exprℝ} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : f a ≤ B a)\n    (hB : ∀ x, has_deriv_at B (B' x) x) (bound : ∀ x ∈ Ico a b, f x = B x → f' x < B' x) :\n    ∀ ⦃x⦄, x ∈ Icc a b → f x ≤ B x :=\n  image_le_of_deriv_right_lt_deriv_boundary' hf hf' ha (fun x hx => (hB x).continuous_at.continuous_within_at)\n    (fun x hx => (hB x).has_deriv_within_at) bound\n#align image_le_of_deriv_right_lt_deriv_boundary image_le_of_deriv_right_lt_deriv_boundary\n\n",
 "image_le_of_deriv_right_le_deriv_boundary":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- General fencing theorem for continuous functions with an estimate on the derivative.\nLet `f` and `B` be continuous functions on `[a, b]` such that\n\n* `f a ≤ B a`;\n* `B` has derivative `B'` everywhere on `ℝ`;\n* `f` has right derivative `f'` at every point of `[a, b)`;\n* we have `f' x ≤ B' x` on `[a, b)`.\n\nThen `f x ≤ B x` everywhere on `[a, b]`. -/\ntheorem image_le_of_deriv_right_le_deriv_boundary {f f' : exprℝ → exprℝ} {a b : exprℝ} (hf : ContinuousOn f (Icc a b))\n    (hf' : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x) {B B' : exprℝ → exprℝ} (ha : f a ≤ B a)\n    (hB : ContinuousOn B (Icc a b)) (hB' : ∀ x ∈ Ico a b, has_deriv_within_at B (B' x) (Ici x) x)\n    (bound : ∀ x ∈ Ico a b, f' x ≤ B' x) : ∀ ⦃x⦄, x ∈ Icc a b → f x ≤ B x :=\n  image_le_of_liminf_slope_right_le_deriv_boundary hf ha hB hB' fun x hx r hr =>\n    (hf' x hx).liminf_right_slope_le (lt_of_le_of_lt (bound x hx) hr)\n#align image_le_of_deriv_right_le_deriv_boundary image_le_of_deriv_right_le_deriv_boundary\n\n",
 "has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Over the reals or the complexes, a continuously differentiable function is strictly\ndifferentiable. -/\ntheorem has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at\n    (hder :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" ((nhds) x)\n        (has_fderiv_at f (f' y) y))\n    (hcont : ContinuousAt f' x) : has_strict_fderiv_at f (f' x) x :=\n  by\n  -- turn little-o definition of strict_fderiv into an epsilon-delta statement\n  refine' is_o_iff.mpr fun c hc => metric.eventually_nhds_iff_ball.mpr _\n  -- the correct ε is the modulus of continuity of f'\n  rcases metric.mem_nhds_iff.mp (inter_mem hder (hcont <| ball_mem_nhds _ hc)) with ⟨ε, ε0, hε⟩\n  refine' ⟨ε, ε0, _⟩\n  -- simplify formulas involving the product E × E\n  rintro ⟨a, b⟩ h\n  rw [← ball_prod_same, prod_mk_mem_set_prod_eq] at h\n  -- exploit the choice of ε as the modulus of continuity of f'\n  have hf' : ∀ x' ∈ ball x ε, «expr‖ ‖» (f' x' - f' x) ≤ c :=\n    by\n    intro x' H'\n    rw [← dist_eq_norm]\n    exact le_of_lt (hε H').2\n  -- apply mean value theorem\n  letI : NormedSpace (exprℝ) G := restrict_scalars.normed_space (exprℝ) 𝕜 G\n  refine' (convex_ball _ _).norm_image_sub_le_of_norm_has_fderiv_within_le' _ hf' h.2 h.1\n  exact fun y hy => (hε hy).1.has_fderiv_within_at\n#align has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at\n\n",
 "has_strict_deriv_at_of_has_deriv_at_of_continuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Over the reals or the complexes, a continuously differentiable function is strictly\ndifferentiable. -/\ntheorem has_strict_deriv_at_of_has_deriv_at_of_continuous_at {f f' : 𝕜 → G} {x : 𝕜}\n    (hder :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" ((nhds) x)\n        (has_deriv_at f (f' y) y))\n    (hcont : ContinuousAt f' x) : has_strict_deriv_at f (f' x) x :=\n  has_strict_fderiv_at_of_has_fderiv_at_of_continuous_at (hder.mono fun y hy => hy.has_fderiv_at) <|\n    (smul_rightL 𝕜 𝕜 G 1).continuous.continuous_at.comp hcont\n#align has_strict_deriv_at_of_has_deriv_at_of_continuous_at has_strict_deriv_at_of_has_deriv_at_of_continuous_at\n\n",
 "exists_slope_lt_deriv_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_mono_on.exists_slope_lt_deriv_aux {x y : exprℝ} {f : exprℝ → exprℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) (h : ∀ w ∈ Ioo x y, deriv f w ≠ 0) :\n    ∃ a ∈ Ioo x y, (f y - f x) / (y - x) < deriv f a :=\n  by\n  have A : differentiable_on (exprℝ) f (Ioo x y) := fun w wmem =>\n    (differentiable_at_of_deriv_ne_zero (h w wmem)).differentiable_within_at\n  obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, deriv f a = (f y - f x) / (y - x)\n  exact exists_deriv_eq_slope f hxy hf A\n  rcases nonempty_Ioo.2 hay with ⟨b, ⟨hab, hby⟩⟩\n  refine' ⟨b, ⟨hxa.trans hab, hby⟩, _⟩\n  rw [← ha]\n  exact hf'_mono ⟨hxa, hay⟩ ⟨hxa.trans hab, hby⟩ hab\n#align strict_mono_on.exists_slope_lt_deriv_aux strict_mono_on.exists_slope_lt_deriv_aux\n\n",
 "exists_slope_lt_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_mono_on.exists_slope_lt_deriv {x y : exprℝ} {f : exprℝ → exprℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) : ∃ a ∈ Ioo x y, (f y - f x) / (y - x) < deriv f a :=\n  by\n  by_cases h : ∀ w ∈ Ioo x y, deriv f w ≠ 0\n  · apply strict_mono_on.exists_slope_lt_deriv_aux hf hxy hf'_mono h\n  · push_neg  at h\n    rcases h with ⟨w, ⟨hxw, hwy⟩, hw⟩\n    obtain ⟨a, ⟨hxa, haw⟩, ha⟩ : ∃ (a : exprℝ)(H : a ∈ Ioo x w), (f w - f x) / (w - x) < deriv f a :=\n      by\n      apply strict_mono_on.exists_slope_lt_deriv_aux _ hxw _ _\n      · exact hf.mono (Icc_subset_Icc le_rfl hwy.le)\n      · exact hf'_mono.mono (Ioo_subset_Ioo le_rfl hwy.le)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_lt\n        exact hf'_mono ⟨hz.1, hz.2.trans hwy⟩ ⟨hxw, hwy⟩ hz.2\n    obtain ⟨b, ⟨hwb, hby⟩, hb⟩ : ∃ (b : exprℝ)(H : b ∈ Ioo w y), (f y - f w) / (y - w) < deriv f b :=\n      by\n      apply strict_mono_on.exists_slope_lt_deriv_aux _ hwy _ _\n      · refine' hf.mono (Icc_subset_Icc hxw.le le_rfl)\n      · exact hf'_mono.mono (Ioo_subset_Ioo hxw.le le_rfl)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_gt\n        exact hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hz.1, hz.2⟩ hz.1\n    refine' ⟨b, ⟨hxw.trans hwb, hby⟩, _⟩\n    simp only [div_lt_iff, hxy, hxw, hwy, sub_pos] at ha hb⊢\n    have : deriv f a * (w - x) < deriv f b * (w - x) :=\n      by\n      apply mul_lt_mul _ le_rfl (sub_pos.2 hxw) _\n      · exact hf'_mono ⟨hxa, haw.trans hwy⟩ ⟨hxw.trans hwb, hby⟩ (haw.trans hwb)\n      · rw [← hw]\n        exact (hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hwb, hby⟩ hwb).le\n    linarith\n#align strict_mono_on.exists_slope_lt_deriv strict_mono_on.exists_slope_lt_deriv\n\n",
 "exists_ratio_has_deriv_at_eq_ratio_slope'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Cauchy's **Mean Value Theorem**, extended `has_deriv_at` version. -/\ntheorem exists_ratio_has_deriv_at_eq_ratio_slope' {lfa lga lfb lgb : exprℝ}\n    (hff' : ∀ x ∈ Ioo a b, has_deriv_at f (f' x) x) (hgg' : ∀ x ∈ Ioo a b, has_deriv_at g (g' x) x)\n    (hfa : Tendsto f (nhds_within.gt a) ((nhds) lfa)) (hga : Tendsto g (nhds_within.gt a) ((nhds) lga))\n    (hfb : Tendsto f (nhds_within.lt b) ((nhds) lfb)) (hgb : Tendsto g (nhds_within.lt b) ((nhds) lgb)) :\n    ∃ c ∈ Ioo a b, (lgb - lga) * f' c = (lfb - lfa) * g' c :=\n  by\n  let h x := (lgb - lga) * f x - (lfb - lfa) * g x\n  have hha : tendsto h (nhds_within.gt a) (nhds <| lgb * lfa - lfb * lga) :=\n    by\n    have : tendsto h (nhds_within.gt a) (nhds <| (lgb - lga) * lfa - (lfb - lfa) * lga) :=\n      (tendsto_const_nhds.mul hfa).sub (tendsto_const_nhds.mul hga)\n    convert this using 2\n    ring\n  have hhb : tendsto h (nhds_within.lt b) (nhds <| lgb * lfa - lfb * lga) :=\n    by\n    have : tendsto h (nhds_within.lt b) (nhds <| (lgb - lga) * lfb - (lfb - lfa) * lgb) :=\n      (tendsto_const_nhds.mul hfb).sub (tendsto_const_nhds.mul hgb)\n    convert this using 2\n    ring\n  let h' x := (lgb - lga) * f' x - (lfb - lfa) * g' x\n  have hhh' : ∀ x ∈ Ioo a b, has_deriv_at h (h' x) x :=\n    by\n    intro x hx\n    exact ((hff' x hx).const_mul _).sub ((hgg' x hx).const_mul _)\n  rcases exists_has_deriv_at_eq_zero' hab hha hhb hhh' with ⟨c, cmem, hc⟩\n  exact ⟨c, cmem, sub_eq_zero.1 hc⟩\n#align exists_ratio_has_deriv_at_eq_ratio_slope' exists_ratio_has_deriv_at_eq_ratio_slope'\n\n",
 "exists_ratio_has_deriv_at_eq_ratio_slope":
 "-- Declare all variables here to make sure they come in a correct order\n/-- Cauchy's **Mean Value Theorem**, `has_deriv_at` version. -/\ntheorem exists_ratio_has_deriv_at_eq_ratio_slope : ∃ c ∈ Ioo a b, (g b - g a) * f' c = (f b - f a) * g' c :=\n  by\n  let h x := (g b - g a) * f x - (f b - f a) * g x\n  have hI : h a = h b := by\n    simp only [h]\n    ring\n  let h' x := (g b - g a) * f' x - (f b - f a) * g' x\n  have hhh' : ∀ x ∈ Ioo a b, has_deriv_at h (h' x) x := fun x hx =>\n    ((hff' x hx).const_mul (g b - g a)).sub ((hgg' x hx).const_mul (f b - f a))\n  have hhc : ContinuousOn h (Icc a b) := (continuous_on_const.mul hfc).sub (continuous_on_const.mul hgc)\n  rcases exists_has_deriv_at_eq_zero h h' hab hhc hI hhh' with ⟨c, cmem, hc⟩\n  exact ⟨c, cmem, sub_eq_zero.1 hc⟩\n#align exists_ratio_has_deriv_at_eq_ratio_slope exists_ratio_has_deriv_at_eq_ratio_slope\n\n",
 "exists_ratio_deriv_eq_ratio_slope'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Cauchy's Mean Value Theorem, extended `deriv` version. -/\ntheorem exists_ratio_deriv_eq_ratio_slope' {lfa lga lfb lgb : exprℝ} (hdf : differentiable_on (exprℝ) f <| Ioo a b)\n    (hdg : differentiable_on (exprℝ) g <| Ioo a b) (hfa : Tendsto f (nhds_within.gt a) ((nhds) lfa))\n    (hga : Tendsto g (nhds_within.gt a) ((nhds) lga)) (hfb : Tendsto f (nhds_within.lt b) ((nhds) lfb))\n    (hgb : Tendsto g (nhds_within.lt b) ((nhds) lgb)) :\n    ∃ c ∈ Ioo a b, (lgb - lga) * deriv f c = (lfb - lfa) * deriv g c :=\n  exists_ratio_has_deriv_at_eq_ratio_slope' _ _ hab _ _\n    (fun x hx => ((hdf x hx).differentiable_at <| Ioo_mem_nhds hx.1 hx.2).has_deriv_at)\n    (fun x hx => ((hdg x hx).differentiable_at <| Ioo_mem_nhds hx.1 hx.2).has_deriv_at) hfa hga hfb hgb\n#align exists_ratio_deriv_eq_ratio_slope' exists_ratio_deriv_eq_ratio_slope'\n\n",
 "exists_ratio_deriv_eq_ratio_slope":
 "/-- Cauchy's Mean Value Theorem, `deriv` version. -/\ntheorem exists_ratio_deriv_eq_ratio_slope : ∃ c ∈ Ioo a b, (g b - g a) * deriv f c = (f b - f a) * deriv g c :=\n  exists_ratio_has_deriv_at_eq_ratio_slope f (deriv f) hab hfc\n    (fun x hx => ((hfd x hx).differentiable_at <| IsOpen.mem_nhds isOpen_Ioo hx).has_deriv_at) g (deriv g) hgc\n    fun x hx => ((hgd x hx).differentiable_at <| IsOpen.mem_nhds isOpen_Ioo hx).has_deriv_at\n#align exists_ratio_deriv_eq_ratio_slope exists_ratio_deriv_eq_ratio_slope\n\n",
 "exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- Let `s` be a convex set in a real normed vector space `E`, let `f : E → G` be a function\ndifferentiable within `s` in a neighborhood of `x : E` with derivative `f'`. Suppose that `f'` is\ncontinuous within `s` at `x`. Then for any number `K : ℝ≥0` larger than `‖f' x‖₊`, `f` is\n`K`-Lipschitz on some neighborhood of `x` within `s`. See also\n`convex.exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at` for a version that claims\nexistence of `K` instead of an explicit estimate. -/\ntheorem exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt (hs : Convex (exprℝ) s) {f : E → G}\n    (hder :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within s x) (has_fderiv_within_at f (f' y) s y))\n    (hcont : ContinuousWithinAt f' s x) (K : nnreal) (hK : «expr‖ ‖₊» (f' x) < K) :\n    ∃ t ∈ nhds_within s x, LipschitzOnWith K f t :=\n  by\n  obtain ⟨ε, ε0, hε⟩ : ∃ ε > 0, ball x ε ∩ s ⊆ { y | has_fderiv_within_at f (f' y) s y ∧ «expr‖ ‖₊» (f' y) < K }\n  exact mem_nhds_within_iff.1 (hder.and <| hcont.nnnorm.eventually (gt_mem_nhds hK))\n  rw [inter_comm] at hε\n  refine' ⟨s ∩ ball x ε, inter_mem_nhdsWithin _ (ball_mem_nhds _ ε0), _⟩\n  exact\n    (hs.inter (convex_ball _ _)).lipschitz_on_with_of_nnnorm_has_fderiv_within_le\n      (fun y hy => (hε hy).1.mono (inter_subset_left _ _)) fun y hy => (hε hy).2.le\n#align exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt\n\n",
 "exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- Let `s` be a convex set in a real normed vector space `E`, let `f : E → G` be a function\ndifferentiable within `s` in a neighborhood of `x : E` with derivative `f'`. Suppose that `f'` is\ncontinuous within `s` at `x`. Then for any number `K : ℝ≥0` larger than `‖f' x‖₊`, `f` is Lipschitz\non some neighborhood of `x` within `s`. See also\n`convex.exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt` for a version\nwith an explicit estimate on the Lipschitz constant. -/\ntheorem exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at (hs : Convex (exprℝ) s) {f : E → G}\n    (hder :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within s x) (has_fderiv_within_at f (f' y) s y))\n    (hcont : ContinuousWithinAt f' s x) : ∃ K, ∃ t ∈ nhds_within s x, LipschitzOnWith K f t :=\n  (exists_gt _).imp <| hs.exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at_of_nnnorm_lt hder hcont\n#align exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at exists_nhds_within_lipschitz_on_with_of_has_fderiv_within_at\n\n",
 "exists_has_deriv_at_eq_slope":
 "/-- Lagrange's Mean Value Theorem, `has_deriv_at` version -/\ntheorem exists_has_deriv_at_eq_slope : ∃ c ∈ Ioo a b, f' c = (f b - f a) / (b - a) :=\n  by\n  rcases exists_ratio_has_deriv_at_eq_ratio_slope f f' hab hfc hff' id 1 continuous_id.continuous_on fun x hx =>\n      has_deriv_at_id x with\n    ⟨c, cmem, hc⟩\n  use c, cmem\n  simp only [_root_.id, Pi.one_apply, mul_one] at hc\n  rw [← hc, mul_div_cancel_left]\n  exact ne_of_gt (sub_pos.2 hab)\n#align exists_has_deriv_at_eq_slope exists_has_deriv_at_eq_slope\n\n",
 "exists_deriv_lt_slope_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_mono_on.exists_deriv_lt_slope_aux {x y : exprℝ} {f : exprℝ → exprℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) (h : ∀ w ∈ Ioo x y, deriv f w ≠ 0) :\n    ∃ a ∈ Ioo x y, deriv f a < (f y - f x) / (y - x) :=\n  by\n  have A : differentiable_on (exprℝ) f (Ioo x y) := fun w wmem =>\n    (differentiable_at_of_deriv_ne_zero (h w wmem)).differentiable_within_at\n  obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, deriv f a = (f y - f x) / (y - x)\n  exact exists_deriv_eq_slope f hxy hf A\n  rcases nonempty_Ioo.2 hxa with ⟨b, ⟨hxb, hba⟩⟩\n  refine' ⟨b, ⟨hxb, hba.trans hay⟩, _⟩\n  rw [← ha]\n  exact hf'_mono ⟨hxb, hba.trans hay⟩ ⟨hxa, hay⟩ hba\n#align strict_mono_on.exists_deriv_lt_slope_aux strict_mono_on.exists_deriv_lt_slope_aux\n\n",
 "exists_deriv_lt_slope":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_mono_on.exists_deriv_lt_slope {x y : exprℝ} {f : exprℝ → exprℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) : ∃ a ∈ Ioo x y, deriv f a < (f y - f x) / (y - x) :=\n  by\n  by_cases h : ∀ w ∈ Ioo x y, deriv f w ≠ 0\n  · apply strict_mono_on.exists_deriv_lt_slope_aux hf hxy hf'_mono h\n  · push_neg  at h\n    rcases h with ⟨w, ⟨hxw, hwy⟩, hw⟩\n    obtain ⟨a, ⟨hxa, haw⟩, ha⟩ : ∃ (a : exprℝ)(H : a ∈ Ioo x w), deriv f a < (f w - f x) / (w - x) :=\n      by\n      apply strict_mono_on.exists_deriv_lt_slope_aux _ hxw _ _\n      · exact hf.mono (Icc_subset_Icc le_rfl hwy.le)\n      · exact hf'_mono.mono (Ioo_subset_Ioo le_rfl hwy.le)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_lt\n        exact hf'_mono ⟨hz.1, hz.2.trans hwy⟩ ⟨hxw, hwy⟩ hz.2\n    obtain ⟨b, ⟨hwb, hby⟩, hb⟩ : ∃ (b : exprℝ)(H : b ∈ Ioo w y), deriv f b < (f y - f w) / (y - w) :=\n      by\n      apply strict_mono_on.exists_deriv_lt_slope_aux _ hwy _ _\n      · refine' hf.mono (Icc_subset_Icc hxw.le le_rfl)\n      · exact hf'_mono.mono (Ioo_subset_Ioo hxw.le le_rfl)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_gt\n        exact hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hz.1, hz.2⟩ hz.1\n    refine' ⟨a, ⟨hxa, haw.trans hwy⟩, _⟩\n    simp only [lt_div_iff, hxy, hxw, hwy, sub_pos] at ha hb⊢\n    have : deriv f a * (y - w) < deriv f b * (y - w) :=\n      by\n      apply mul_lt_mul _ le_rfl (sub_pos.2 hwy) _\n      · exact hf'_mono ⟨hxa, haw.trans hwy⟩ ⟨hxw.trans hwb, hby⟩ (haw.trans hwb)\n      · rw [← hw]\n        exact (hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hwb, hby⟩ hwb).le\n    linarith\n#align strict_mono_on.exists_deriv_lt_slope strict_mono_on.exists_deriv_lt_slope\n\n",
 "exists_deriv_eq_slope":
 "/-- Lagrange's **Mean Value Theorem**, `deriv` version. -/\ntheorem exists_deriv_eq_slope : ∃ c ∈ Ioo a b, deriv f c = (f b - f a) / (b - a) :=\n  exists_has_deriv_at_eq_slope f (deriv f) hab hfc fun x hx =>\n    ((hfd x hx).differentiable_at <| IsOpen.mem_nhds isOpen_Ioo hx).has_deriv_at\n#align exists_deriv_eq_slope exists_deriv_eq_slope\n\n",
 "eq_of_has_deriv_right_eq":
 "/-- If two continuous functions on `[a, b]` have the same right derivative and are equal at `a`,\n  then they are equal everywhere on `[a, b]`. -/\ntheorem eq_of_has_deriv_right_eq (derivf : ∀ x ∈ Ico a b, has_deriv_within_at f (f' x) (Ici x) x)\n    (derivg : ∀ x ∈ Ico a b, has_deriv_within_at g (f' x) (Ici x) x) (fcont : ContinuousOn f (Icc a b))\n    (gcont : ContinuousOn g (Icc a b)) (hi : f a = g a) : ∀ y ∈ Icc a b, f y = g y :=\n  by\n  simp only [← @sub_eq_zero _ _ (f _)] at hi⊢\n  exact\n    hi ▸\n      constant_of_has_deriv_right_zero (fcont.sub gcont) fun y hy => by\n        simpa only [sub_self] using (derivf y hy).sub (derivg y hy)\n#align eq_of_has_deriv_right_eq eq_of_has_deriv_right_eq\n\n",
 "eq_of_deriv_within_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If two differentiable functions on `[a, b]` have the same derivative within `[a, b]` everywhere\n  on `[a, b)` and are equal at `a`, then they are equal everywhere on `[a, b]`. -/\ntheorem eq_of_deriv_within_eq (fdiff : differentiable_on (exprℝ) f (Icc a b))\n    (gdiff : differentiable_on (exprℝ) g (Icc a b))\n    (hderiv : EqOn (deriv_within f (Icc a b)) (deriv_within g (Icc a b)) (Ico a b)) (hi : f a = g a) :\n    ∀ y ∈ Icc a b, f y = g y :=\n  by\n  have A : ∀ y ∈ Ico a b, has_deriv_within_at f (deriv_within f (Icc a b) y) (Ici y) y := fun y hy =>\n    (fdiff y (mem_Icc_of_Ico hy)).has_deriv_within_at.nhds_within (Icc_mem_nhdsWithin_Ici hy)\n  have B : ∀ y ∈ Ico a b, has_deriv_within_at g (deriv_within g (Icc a b) y) (Ici y) y := fun y hy =>\n    (gdiff y (mem_Icc_of_Ico hy)).has_deriv_within_at.nhds_within (Icc_mem_nhdsWithin_Ici hy)\n  exact eq_of_has_deriv_right_eq A (fun y hy => (hderiv hy).symm ▸ B y hy) fdiff.continuous_on gdiff.continuous_on hi\n#align eq_of_deriv_within_eq eq_of_deriv_within_eq\n\n",
 "domain_mvt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Lagrange's Mean Value Theorem, applied to convex domains. -/\ntheorem domain_mvt {f : E → exprℝ} {s : Set E} {x y : E} {f' : E → «expr →L[ ] » E (exprℝ) (exprℝ)}\n    (hf : ∀ x ∈ s, has_fderiv_within_at f (f' x) s x) (hs : Convex (exprℝ) s) (xs : x ∈ s) (ys : y ∈ s) :\n    ∃ z ∈ segment (exprℝ) x y, f y - f x = f' z (y - x) :=\n  by\n  have hIccIoo := @Ioo_subset_Icc_self (exprℝ) _ 0 1\n  -- parametrize segment\n  set g : exprℝ → E := fun t => x + «expr • » t (y - x)\n  have hseg : ∀ t ∈ Icc (0 : exprℝ) 1, g t ∈ segment (exprℝ) x y :=\n    by\n    rw [segment_eq_image']\n    simp only [mem_image, and_imp, add_right_inj]\n    intro t ht\n    exact ⟨t, ht, rfl⟩\n  have hseg' : Icc 0 1 ⊆ «expr ⁻¹' » g s := by\n    rw [← image_subset_iff]\n    unfold image\n    change ∀ _, _\n    intro z Hz\n    rw [mem_set_of_eq] at Hz\n    rcases Hz with ⟨t, Ht, hgt⟩\n    rw [← hgt]\n    exact hs.segment_subset xs ys (hseg t Ht)\n  -- derivative of pullback of f under parametrization\n  have hfg :\n    ∀ t ∈ Icc (0 : exprℝ) 1, has_deriv_within_at (f ∘ g) ((f' (g t) : E → exprℝ) (y - x)) (Icc (0 : exprℝ) 1) t :=\n    by\n    intro t Ht\n    have hg : has_deriv_at g (y - x) t :=\n      by\n      have := ((has_deriv_at_id t).smul_const (y - x)).const_add x\n      rwa [one_smul] at this\n    exact (hf (g t) <| hseg' Ht).comp_has_deriv_within_at _ hg.has_deriv_within_at hseg'\n  -- apply 1-variable mean value theorem to pullback\n  have hMVT : ∃ t ∈ Ioo (0 : exprℝ) 1, (f' (g t) : E → exprℝ) (y - x) = (f (g 1) - f (g 0)) / (1 - 0) :=\n    by\n    refine' exists_has_deriv_at_eq_slope (f ∘ g) _ (by norm_num) _ _\n    · exact fun t Ht => (hfg t Ht).continuous_within_at\n    · exact fun t Ht => (hfg t <| hIccIoo Ht).has_deriv_at (Icc_mem_nhds Ht.1 Ht.2)\n  -- reinterpret on domain\n  rcases hMVT with ⟨t, Ht, hMVT'⟩\n  use g t\n  refine' ⟨hseg t <| hIccIoo Ht, _⟩\n  simp [g, hMVT']\n#align domain_mvt domain_mvt\n\n",
 "convex_on_univ_of_deriv2_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonnegative on `ℝ`,\nthen `f` is convex on `ℝ`. -/\ntheorem convex_on_univ_of_deriv2_nonneg {f : exprℝ → exprℝ} (hf' : differentiable (exprℝ) f)\n    (hf'' : differentiable (exprℝ) (deriv f)) (hf''_nonneg : ∀ x, 0 ≤ ((«expr ^[ ]» deriv 2) f) x) :\n    ConvexOn (exprℝ) univ f :=\n  convex_on_of_deriv2_nonneg' convex_univ hf'.differentiable_on hf''.differentiable_on fun x _ => hf''_nonneg x\n#align convex_on_univ_of_deriv2_nonneg convex_on_univ_of_deriv2_nonneg\n\n",
 "convex_on_univ_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is differentiable and `f'` is monotone on `ℝ` then `f` is convex. -/\ntheorem monotone.convex_on_univ_of_deriv {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f)\n    (hf'_mono : Monotone (deriv f)) : ConvexOn (exprℝ) univ f :=\n  (hf'_mono.monotone_on _).convex_on_of_deriv convex_univ hf.continuous.continuous_on hf.differentiable_on\n#align monotone.convex_on_univ_of_deriv monotone.convex_on_univ_of_deriv\n\n",
 "convex_on_of_deriv2_nonneg'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is twice differentiable on a open convex set `D ⊆ ℝ` and\n`f''` is nonnegative on `D`, then `f` is convex on `D`. -/\ntheorem convex_on_of_deriv2_nonneg' {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf' : differentiable_on (exprℝ) f D) (hf'' : differentiable_on (exprℝ) (deriv f) D)\n    (hf''_nonneg : ∀ x ∈ D, 0 ≤ ((«expr ^[ ]» deriv 2) f) x) : ConvexOn (exprℝ) D f :=\n  convex_on_of_deriv2_nonneg hD hf'.continuous_on (hf'.mono interior_subset) (hf''.mono interior_subset) fun x hx =>\n    hf''_nonneg x (interior_subset hx)\n#align convex_on_of_deriv2_nonneg' convex_on_of_deriv2_nonneg'\n\n",
 "convex_on_of_deriv2_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonnegative on the interior, then `f` is convex on `D`. -/\ntheorem convex_on_of_deriv2_nonneg {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ} (hf : ContinuousOn f D)\n    (hf' : differentiable_on (exprℝ) f (interior D)) (hf'' : differentiable_on (exprℝ) (deriv f) (interior D))\n    (hf''_nonneg : ∀ x ∈ interior D, 0 ≤ («expr ^[ ]» deriv 2) f x) : ConvexOn (exprℝ) D f :=\n  (hD.interior.monotone_on_of_deriv_nonneg hf''.continuous_on (by rwa [interior_interior]) <| by\n        rwa [interior_interior]).convex_on_of_deriv\n    hD hf hf'\n#align convex_on_of_deriv2_nonneg convex_on_of_deriv2_nonneg\n\n",
 "convex_on_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is differentiable on its interior,\nand `f'` is monotone on the interior, then `f` is convex on `D`. -/\ntheorem monotone_on.convex_on_of_deriv {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : differentiable_on (exprℝ) f (interior D))\n    (hf'_mono : MonotoneOn (deriv f) (interior D)) : ConvexOn (exprℝ) D f :=\n  convexOn_of_slope_mono_adjacent hD\n    (by\n      intro x y z hx hz hxy hyz\n      -- First we prove some trivial inclusions\n      have hxzD : Icc x z ⊆ D := hD.ord_connected.out hx hz\n      have hxyD : Icc x y ⊆ D := subset.trans (Icc_subset_Icc_right <| le_of_lt hyz) hxzD\n      have hxyD' : Ioo x y ⊆ interior D := subset_sUnion_of_mem ⟨isOpen_Ioo, subset.trans Ioo_subset_Icc_self hxyD⟩\n      have hyzD : Icc y z ⊆ D := subset.trans (Icc_subset_Icc_left <| le_of_lt hxy) hxzD\n      have hyzD' : Ioo y z ⊆ interior D := subset_sUnion_of_mem ⟨isOpen_Ioo, subset.trans Ioo_subset_Icc_self hyzD⟩\n      -- Then we apply MVT to both `[x, y]` and `[y, z]`\n      obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, deriv f a = (f y - f x) / (y - x)\n      exact exists_deriv_eq_slope f hxy (hf.mono hxyD) (hf'.mono hxyD')\n      obtain ⟨b, ⟨hyb, hbz⟩, hb⟩ : ∃ b ∈ Ioo y z, deriv f b = (f z - f y) / (z - y)\n      exact exists_deriv_eq_slope f hyz (hf.mono hyzD) (hf'.mono hyzD')\n      rw [← ha, ← hb]\n      exact hf'_mono (hxyD' ⟨hxa, hay⟩) (hyzD' ⟨hyb, hbz⟩) (hay.trans hyb).le)\n#align monotone_on.convex_on_of_deriv monotone_on.convex_on_of_deriv\n\n",
 "constant_of_has_deriv_right_zero":
 "theorem constant_of_has_deriv_right_zero (hcont : ContinuousOn f (Icc a b))\n    (hderiv : ∀ x ∈ Ico a b, has_deriv_within_at f 0 (Ici x) x) : ∀ x ∈ Icc a b, f x = f a := by\n  simpa only [MulZeroClass.zero_mul, norm_le_zero_iff, sub_eq_zero] using fun x hx =>\n    norm_image_sub_le_of_norm_deriv_right_le_segment hcont hderiv (fun y hy => by rw [norm_le_zero_iff]) x hx\n#align constant_of_has_deriv_right_zero constant_of_has_deriv_right_zero\n\n",
 "constant_of_deriv_within_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem constant_of_deriv_within_zero (hdiff : differentiable_on (exprℝ) f (Icc a b))\n    (hderiv : ∀ x ∈ Ico a b, deriv_within f (Icc a b) x = 0) : ∀ x ∈ Icc a b, f x = f a :=\n  by\n  have H : ∀ x ∈ Ico a b, «expr‖ ‖» (deriv_within f (Icc a b) x) ≤ 0 := by\n    simpa only [norm_le_zero_iff] using fun x hx => hderiv x hx\n  simpa only [MulZeroClass.zero_mul, norm_le_zero_iff, sub_eq_zero] using fun x hx =>\n    norm_image_sub_le_of_norm_deriv_le_segment hdiff H x hx\n#align constant_of_deriv_within_zero constant_of_deriv_within_zero\n\n",
 "concave_on_univ_of_deriv2_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonpositive on `ℝ`,\nthen `f` is concave on `ℝ`. -/\ntheorem concave_on_univ_of_deriv2_nonpos {f : exprℝ → exprℝ} (hf' : differentiable (exprℝ) f)\n    (hf'' : differentiable (exprℝ) (deriv f)) (hf''_nonpos : ∀ x, («expr ^[ ]» deriv 2) f x ≤ 0) :\n    ConcaveOn (exprℝ) univ f :=\n  concave_on_of_deriv2_nonpos' convex_univ hf'.differentiable_on hf''.differentiable_on fun x _ => hf''_nonpos x\n#align concave_on_univ_of_deriv2_nonpos concave_on_univ_of_deriv2_nonpos\n\n",
 "concave_on_univ_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is differentiable and `f'` is antitone on `ℝ` then `f` is concave. -/\ntheorem antitone.concave_on_univ_of_deriv {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f)\n    (hf'_anti : Antitone (deriv f)) : ConcaveOn (exprℝ) univ f :=\n  (hf'_anti.antitone_on _).concave_on_of_deriv convex_univ hf.continuous.continuous_on hf.differentiable_on\n#align antitone.concave_on_univ_of_deriv antitone.concave_on_univ_of_deriv\n\n",
 "concave_on_of_deriv2_nonpos'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is twice differentiable on an open convex set `D ⊆ ℝ` and\n`f''` is nonpositive on `D`, then `f` is concave on `D`. -/\ntheorem concave_on_of_deriv2_nonpos' {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf' : differentiable_on (exprℝ) f D) (hf'' : differentiable_on (exprℝ) (deriv f) D)\n    (hf''_nonpos : ∀ x ∈ D, («expr ^[ ]» deriv 2) f x ≤ 0) : ConcaveOn (exprℝ) D f :=\n  concave_on_of_deriv2_nonpos hD hf'.continuous_on (hf'.mono interior_subset) (hf''.mono interior_subset) fun x hx =>\n    hf''_nonpos x (interior_subset hx)\n#align concave_on_of_deriv2_nonpos' concave_on_of_deriv2_nonpos'\n\n",
 "concave_on_of_deriv2_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonpositive on the interior, then `f` is concave on `D`. -/\ntheorem concave_on_of_deriv2_nonpos {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : differentiable_on (exprℝ) f (interior D))\n    (hf'' : differentiable_on (exprℝ) (deriv f) (interior D))\n    (hf''_nonpos : ∀ x ∈ interior D, («expr ^[ ]» deriv 2) f x ≤ 0) : ConcaveOn (exprℝ) D f :=\n  (hD.interior.antitone_on_of_deriv_nonpos hf''.continuous_on (by rwa [interior_interior]) <| by\n        rwa [interior_interior]).concave_on_of_deriv\n    hD hf hf'\n#align concave_on_of_deriv2_nonpos concave_on_of_deriv2_nonpos\n\n",
 "concave_on_of_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is differentiable on its interior,\nand `f'` is antitone on the interior, then `f` is concave on `D`. -/\ntheorem antitone_on.concave_on_of_deriv {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : differentiable_on (exprℝ) f (interior D))\n    (h_anti : AntitoneOn (deriv f) (interior D)) : ConcaveOn (exprℝ) D f :=\n  haveI : MonotoneOn (deriv (-f)) (interior D) := by\n    intro x hx y hy hxy\n    convert neg_le_neg (h_anti hx hy hxy) <;> convert deriv.neg\n  neg_convex_on_iff.mp (this.convex_on_of_deriv hD hf.neg hf'.neg)\n#align antitone_on.concave_on_of_deriv antitone_on.concave_on_of_deriv\n\n",
 "antitone_on_of_deriv_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f` be a function continuous on a convex (or, equivalently, connected) subset `D`\nof the real line. If `f` is differentiable on the interior of `D` and `f'` is nonpositive, then\n`f` is an antitone function on `D`. -/\ntheorem convex.antitone_on_of_deriv_nonpos {D : Set (exprℝ)} (hD : Convex (exprℝ) D) {f : exprℝ → exprℝ}\n    (hf : ContinuousOn f D) (hf' : differentiable_on (exprℝ) f (interior D))\n    (hf'_nonpos : ∀ x ∈ interior D, deriv f x ≤ 0) : AntitoneOn f D := fun x hx y hy hxy => by\n  simpa only [MulZeroClass.zero_mul, sub_nonpos] using\n    hD.image_sub_le_mul_sub_of_deriv_le hf hf' hf'_nonpos x hx y hy hxy\n#align convex.antitone_on_of_deriv_nonpos convex.antitone_on_of_deriv_nonpos\n\n",
 "antitone_of_deriv_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Let `f : ℝ → ℝ` be a differentiable function. If `f'` is nonpositive, then\n`f` is an antitone function. -/\ntheorem antitone_of_deriv_nonpos {f : exprℝ → exprℝ} (hf : differentiable (exprℝ) f) (hf' : ∀ x, deriv f x ≤ 0) :\n    Antitone f :=\n  antitoneOn_univ.1 <|\n    convex_univ.antitone_on_of_deriv_nonpos hf.continuous.continuous_on hf.differentiable_on fun x _ => hf' x\n#align antitone_of_deriv_nonpos antitone_of_deriv_nonpos\n\n"}