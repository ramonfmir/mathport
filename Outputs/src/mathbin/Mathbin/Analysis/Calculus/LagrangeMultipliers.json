{"range_ne_top_of_has_strict_fderiv_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n/-- Lagrange multipliers theorem: if `φ : E → ℝ` has a local extremum on the set `{x | f x = f x₀}`\nat `x₀`, both `f : E → F` and `φ` are strictly differentiable at `x₀`, and the codomain of `f` is\na complete space, then the linear map `x ↦ (f' x, φ' x)` is not surjective. -/\ntheorem is_local_extr_on.range_ne_top_of_has_strict_fderiv_at (hextr : is_local_extr_on φ { x | f x = f x₀ } x₀)\n    (hf' : has_strict_fderiv_at f f' x₀) (hφ' : has_strict_fderiv_at φ φ' x₀) :\n    linear_map.range (f'.prod φ') ≠ «expr⊤» := by\n  intro htop\n  set fφ := fun x => (f x, φ x)\n  have A : map φ (nhds_within («expr ⁻¹' » f {f x₀}) x₀) = (nhds) (φ x₀) :=\n    by\n    change map (prod.snd ∘ fφ) (nhds_within («expr ⁻¹' » fφ { p | p.1 = f x₀ }) x₀) = (nhds) (φ x₀)\n    rw [← map_map, nhds_within, map_inf_principal_preimage, (hf'.prod hφ').map_nhds_eq_of_surj htop]\n    exact map_snd_nhds_within _\n  exact hextr.not_nhds_le_map A.ge\n#align is_local_extr_on.range_ne_top_of_has_strict_fderiv_at is_local_extr_on.range_ne_top_of_has_strict_fderiv_at\n\n",
 "linear_dependent_of_has_strict_fderiv_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Lagrange multipliers theorem. Let `f : ι → E → ℝ` be a finite family of functions.\nSuppose that `φ : E → ℝ` has a local extremum on the set `{x | ∀ i, f i x = f i x₀}` at `x₀`.\nSuppose that all functions `f i` as well as `φ` are strictly differentiable at `x₀`.\nThen the derivatives `f' i : E → L[ℝ] ℝ` and `φ' : E →L[ℝ] ℝ` are linearly dependent.\n\nSee also `is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at` for a version that\nthat states existence of Lagrange multipliers `Λ` and `Λ₀` instead of using\n`¬linear_independent ℝ _` -/\ntheorem is_local_extr_on.linear_dependent_of_has_strict_fderiv_at {ι : Type _} [Finite ι] {f : ι → E → exprℝ}\n    {f' : ι → «expr →L[ ] » E (exprℝ) (exprℝ)} (hextr : is_local_extr_on φ { x | ∀ i, f i x = f i x₀ } x₀)\n    (hf' : ∀ i, has_strict_fderiv_at (f i) (f' i) x₀) (hφ' : has_strict_fderiv_at φ φ' x₀) :\n    ¬linear_independent (exprℝ) (Option.elim' φ' f' : option ι → «expr →L[ ] » E (exprℝ) (exprℝ)) :=\n  by\n  cases nonempty_fintype ι\n  rw [fintype.linear_independent_iff]; push_neg\n  rcases hextr.exists_multipliers_of_has_strict_fderiv_at hf' hφ' with ⟨Λ, Λ₀, hΛ, hΛf⟩\n  refine' ⟨Option.elim' Λ₀ Λ, _, _⟩\n  · simpa [add_comm] using hΛf\n  · simpa [function.funext_iff, not_and_or, or_comm', option.exists] using hΛ\n#align\n  is_local_extr_on.linear_dependent_of_has_strict_fderiv_at is_local_extr_on.linear_dependent_of_has_strict_fderiv_at\n\n",
 "exists_multipliers_of_has_strict_fderiv_at_1d":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Lagrange multipliers theorem: if `φ : E → ℝ` has a local extremum on the set `{x | f x = f x₀}`\nat `x₀`, and both `f : E → ℝ` and `φ` are strictly differentiable at `x₀`, then there exist\n`a b : ℝ` such that `(a, b) ≠ 0` and `a • f' + b • φ' = 0`. -/\ntheorem is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at_1d {f : E → exprℝ}\n    {f' : «expr →L[ ] » E (exprℝ) (exprℝ)} (hextr : is_local_extr_on φ { x | f x = f x₀ } x₀)\n    (hf' : has_strict_fderiv_at f f' x₀) (hφ' : has_strict_fderiv_at φ φ' x₀) :\n    ∃ a b : exprℝ, (a, b) ≠ 0 ∧ «expr • » a f' + «expr • » b φ' = 0 :=\n  by\n  obtain ⟨Λ, Λ₀, hΛ, hfΛ⟩ := hextr.exists_linear_map_of_has_strict_fderiv_at hf' hφ'\n  refine' ⟨Λ 1, Λ₀, _, _⟩\n  · contrapose! hΛ\n    simp only [Prod.mk_eq_zero] at hΛ⊢\n    refine' ⟨linear_map.ext fun x => _, hΛ.2⟩\n    simpa [hΛ.1] using Λ.map_smul x 1\n  · ext x\n    have H₁ : Λ (f' x) = f' x * Λ 1 := by simpa only [mul_one, algebra.id.smul_eq_mul] using Λ.map_smul (f' x) 1\n    have H₂ : f' x * Λ 1 + Λ₀ * φ' x = 0 := by simpa only [algebra.id.smul_eq_mul, H₁] using hfΛ x\n    simpa [mul_comm] using H₂\n#align\n  is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at_1d is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at_1d\n\n",
 "exists_multipliers_of_has_strict_fderiv_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Lagrange multipliers theorem, 1d version. Let `f : ι → E → ℝ` be a finite family of functions.\nSuppose that `φ : E → ℝ` has a local extremum on the set `{x | ∀ i, f i x = f i x₀}` at `x₀`.\nSuppose that all functions `f i` as well as `φ` are strictly differentiable at `x₀`.\nThen the derivatives `f' i : E → L[ℝ] ℝ` and `φ' : E →L[ℝ] ℝ` are linearly dependent:\nthere exist `Λ : ι → ℝ` and `Λ₀ : ℝ`, `(Λ, Λ₀) ≠ 0`, such that `∑ i, Λ i • f' i + Λ₀ • φ' = 0`.\n\nSee also `is_local_extr_on.linear_dependent_of_has_strict_fderiv_at` for a version that\nstates `¬linear_independent ℝ _` instead of existence of `Λ` and `Λ₀`. -/\ntheorem is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at {ι : Type _} [fintype ι] {f : ι → E → exprℝ}\n    {f' : ι → «expr →L[ ] » E (exprℝ) (exprℝ)} (hextr : is_local_extr_on φ { x | ∀ i, f i x = f i x₀ } x₀)\n    (hf' : ∀ i, has_strict_fderiv_at (f i) (f' i) x₀) (hφ' : has_strict_fderiv_at φ φ' x₀) :\n    ∃ (Λ : ι → exprℝ)(Λ₀ : exprℝ),\n      (Λ, Λ₀) ≠ 0 ∧\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              («expr • » (Λ i) (f' i)) +\n            «expr • » Λ₀ φ' =\n          0 :=\n  by\n  letI := classical.dec_eq ι\n  replace hextr : is_local_extr_on φ { x | (fun i => f i x) = fun i => f i x₀ } x₀\n  · simpa only [function.funext_iff] using hextr\n  rcases hextr.exists_linear_map_of_has_strict_fderiv_at (has_strict_fderiv_at_pi.2 fun i => hf' i) hφ' with\n    ⟨Λ, Λ₀, h0, hsum⟩\n  rcases(linear_equiv.pi_ring (exprℝ) (exprℝ) ι (exprℝ)).symm.surjective Λ with ⟨Λ, rfl⟩\n  refine' ⟨Λ, Λ₀, _, _⟩\n  · simpa only [ne.def, prod.ext_iff, linear_equiv.map_eq_zero_iff, Prod.fst_zero] using h0\n  · ext x\n    simpa [mul_comm] using hsum x\n#align\n  is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at is_local_extr_on.exists_multipliers_of_has_strict_fderiv_at\n\n",
 "exists_linear_map_of_has_strict_fderiv_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Lagrange multipliers theorem: if `φ : E → ℝ` has a local extremum on the set `{x | f x = f x₀}`\nat `x₀`, both `f : E → F` and `φ` are strictly differentiable at `x₀`, and the codomain of `f` is\na complete space, then there exist `Λ : dual ℝ F` and `Λ₀ : ℝ` such that `(Λ, Λ₀) ≠ 0` and\n`Λ (f' x) + Λ₀ • φ' x = 0` for all `x`. -/\ntheorem is_local_extr_on.exists_linear_map_of_has_strict_fderiv_at (hextr : is_local_extr_on φ { x | f x = f x₀ } x₀)\n    (hf' : has_strict_fderiv_at f f' x₀) (hφ' : has_strict_fderiv_at φ φ' x₀) :\n    ∃ (Λ : module.dual (exprℝ) F)(Λ₀ : exprℝ), (Λ, Λ₀) ≠ 0 ∧ ∀ x, Λ (f' x) + «expr • » Λ₀ (φ' x) = 0 :=\n  by\n  rcases submodule.exists_le_ker_of_lt_top _\n      (lt_top_iff_ne_top.2 <| hextr.range_ne_top_of_has_strict_fderiv_at hf' hφ') with\n    ⟨Λ', h0, hΛ'⟩\n  set e : «expr ≃ₗ[ ] » («expr →ₗ[ ] » F (exprℝ) (exprℝ) × exprℝ) (exprℝ) («expr →ₗ[ ] » (F × exprℝ) (exprℝ) (exprℝ)) :=\n    ((linear_equiv.refl (exprℝ) («expr →ₗ[ ] » F (exprℝ) (exprℝ))).prod\n          (linear_map.ring_lmap_equiv_self (exprℝ) (exprℝ) (exprℝ)).symm).trans\n      (linear_map.coprod_equiv (exprℝ))\n  rcases e.surjective Λ' with ⟨⟨Λ, Λ₀⟩, rfl⟩\n  refine' ⟨Λ, Λ₀, e.map_ne_zero_iff.1 h0, fun x => _⟩\n  convert linear_map.congr_fun (linear_map.range_le_ker_iff.1 hΛ') x using 1\n  -- squeezed `simp [mul_comm]` to speed up elaboration\n  simp only [mul_comm, algebra.id.smul_eq_mul, linear_equiv.trans_apply, linear_equiv.prod_apply,\n    linear_equiv.refl_apply, linear_map.ring_lmap_equiv_self_symm_apply, linear_map.coprod_equiv_apply,\n    continuous_linear_map.to_linear_map_eq_coe, continuous_linear_map.coe_prod, linear_map.coprod_comp_prod,\n    linear_map.add_apply, linear_map.coe_comp, continuous_linear_map.coe_coe, linear_map.coe_smul_right,\n    linear_map.one_apply]\n#align\n  is_local_extr_on.exists_linear_map_of_has_strict_fderiv_at is_local_extr_on.exists_linear_map_of_has_strict_fderiv_at\n\n"}