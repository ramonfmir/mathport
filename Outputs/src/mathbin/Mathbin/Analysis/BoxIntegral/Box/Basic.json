{"with_bot_coe_subset_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem with_bot_coe_subset_iff {I J : WithBot (box ι)} : (I : set (ι → exprℝ)) ⊆ J ↔ I ≤ J :=\n  by\n  induction I using WithBot.recBotCoe; · simp\n  induction J using WithBot.recBotCoe; · simp [subset_empty_iff]\n  simp\n#align with_bot_coe_subset_iff with_bot_coe_subset_iff\n\n",
 "with_bot_coe_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem with_bot_coe_inj {I J : WithBot (box ι)} : (I : set (ι → exprℝ)) = J ↔ I = J := by\n  simp only [subset.antisymm_iff, ← le_antisymm_iff, with_bot_coe_subset_iff]\n#align with_bot_coe_inj with_bot_coe_inj\n\n",
 "upper_mem_Icc":
 "@[simp]\ntheorem upper_mem_Icc (I : box ι) : I.upper ∈ I.Icc :=\n  right_mem_Icc.2 I.lower_le_upper\n#align upper_mem_Icc upper_mem_Icc\n\n",
 "upper_mem":
 "@[simp]\ntheorem upper_mem : I.upper ∈ I := fun i => right_mem_Ioc.2 <| I.lower_lt_upper i\n#align upper_mem upper_mem\n\n",
 "not_disjoint_coe_iff_nonempty_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem not_disjoint_coe_iff_nonempty_inter : ¬Disjoint (I : WithBot (box ι)) J ↔ (I ∩ J : set (ι → exprℝ)).nonempty :=\n  by rw [disjoint_coe, Set.not_disjoint_iff_nonempty_inter]\n#align not_disjoint_coe_iff_nonempty_inter not_disjoint_coe_iff_nonempty_inter\n\n",
 "nonempty_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem nonempty_coe : Set.Nonempty (I : set (ι → exprℝ)) :=\n  I.exists_mem\n#align nonempty_coe nonempty_coe\n\n",
 "nndist_le_distortion_mul":
 "theorem nndist_le_distortion_mul (I : box ι) (i : ι) :\n    nndist I.lower I.upper ≤ I.distortion * nndist (I.lower i) (I.upper i) :=\n  calc\n    nndist I.lower I.upper = nndist I.lower I.upper / nndist (I.lower i) (I.upper i) * nndist (I.lower i) (I.upper i) :=\n      (div_mul_cancel _ <| mt nndist_eq_zero.1 (I.lower_lt_upper i).ne).symm\n    _ ≤ I.distortion * nndist (I.lower i) (I.upper i) := mul_le_mul_right' (finset.le_sup <| finset.mem_univ i) _\n    \n#align nndist_le_distortion_mul nndist_le_distortion_mul\n\n",
 "ne_of_disjoint_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem ne_of_disjoint_coe (h : Disjoint (I : set (ι → exprℝ)) J) : I ≠ J :=\n  mt coe_inj.2 <| h.ne I.coe_ne_empty\n#align ne_of_disjoint_coe ne_of_disjoint_coe\n\n",
 "monotone_upper":
 "theorem monotone_upper : monotone fun I : box ι => I.upper := fun I J H => (le_iff_bounds.1 H).2\n#align monotone_upper monotone_upper\n\n",
 "monotone_face":
 "theorem monotone_face {n} (i : fin (n + 1)) : monotone fun I => face I i := fun I J h => face_mono h i\n#align monotone_face monotone_face\n\n",
 "mk'_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem mk'_eq_coe {l u : ι → exprℝ} : mk' l u = I ↔ l = I.lower ∧ u = I.upper :=\n  by\n  cases' I with lI uI hI; rw [mk']; split_ifs\n  · simp [WithBot.coe_eq_coe]\n  · suffices l = lI → u ≠ uI by simpa\n    rintro rfl rfl\n    exact h hI\n#align mk'_eq_coe mk'_eq_coe\n\n",
 "mk'_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem mk'_eq_bot {l u : ι → exprℝ} : mk' l u = «expr⊥» ↔ ∃ i, u i ≤ l i :=\n  by\n  rw [mk']\n  split_ifs <;> simpa using h\n#align mk'_eq_bot mk'_eq_bot\n\n",
 "mem_univ_Ioc":
 "theorem mem_univ_Ioc {I : box ι} : (x ∈ pi univ fun i => Ioc (I.lower i) (I.upper i)) ↔ x ∈ I :=\n  mem_univ_pi\n#align mem_univ_Ioc mem_univ_Ioc\n\n",
 "mem_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem mem_mk {l u x : ι → exprℝ} {H} : x ∈ mk l u H ↔ ∀ i, x i ∈ Ioc (l i) (u i) :=\n  iff.rfl\n#align mem_mk mem_mk\n\n",
 "mem_def":
 "theorem mem_def : x ∈ I ↔ ∀ i, x i ∈ Ioc (I.lower i) (I.upper i) :=\n  iff.rfl\n#align mem_def mem_def\n\n",
 "mem_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem mem_coe : x ∈ (I : set (ι → exprℝ)) ↔ x ∈ I :=\n  iff.rfl\n#align mem_coe mem_coe\n\n",
 "maps_to_insert_nth_face_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_insert_nth_face_Icc {n} (I : box (fin (n + 1))) {i : fin (n + 1)} {x : exprℝ}\n    (hx : x ∈ Icc (I.lower i) (I.upper i)) : MapsTo (i.insert_nth x) (I.face i).Icc I.Icc := fun y hy =>\n  fin.insert_nth_mem_Icc.2 ⟨hx, hy⟩\n#align maps_to_insert_nth_face_Icc maps_to_insert_nth_face_Icc\n\n",
 "maps_to_insert_nth_face":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_insert_nth_face {n} (I : box (fin (n + 1))) {i : fin (n + 1)} {x : exprℝ}\n    (hx : x ∈ Ioc (I.lower i) (I.upper i)) : MapsTo (i.insert_nth x) (I.face i) I := fun y hy => by\n  simpa only [mem_coe, mem_def, i.forall_iff_succ_above, hx, fin.insert_nth_apply_same, fin.insert_nth_apply_succ_above,\n    true_and_iff]\n#align maps_to_insert_nth_face maps_to_insert_nth_face\n\n",
 "lower_ne_upper":
 "theorem lower_ne_upper (i) : I.lower i ≠ I.upper i :=\n  (I.lower_lt_upper i).ne\n#align lower_ne_upper lower_ne_upper\n\n",
 "lower_mem_Icc":
 "@[simp]\ntheorem lower_mem_Icc (I : box ι) : I.lower ∈ I.Icc :=\n  left_mem_Icc.2 I.lower_le_upper\n#align lower_mem_Icc lower_mem_Icc\n\n",
 "lower_le_upper":
 "/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\ntheorem lower_le_upper : I.lower ≤ I.upper := fun i => (I.lower_lt_upper i).le\n#align lower_le_upper lower_le_upper\n\n",
 "le_tfae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- failed to parenthesize: parenthesize: uncaught backtrack exception\n[PrettyPrinter.parenthesize.input] (Command.declaration\n     (Command.declModifiers [] [] [] [] [] [])\n     (Command.theorem\n      \"theorem\"\n      (Command.declId `le_tfae [])\n      (Command.declSig\n       []\n       (Term.typeSpec\n        \":\"\n        (Term.app\n         `TFAE\n         [(«term[_]»\n           \"[\"\n           [(«term_≤_» `I \"≤\" `J)\n            \",\"\n            («term_⊆_»\n             (Term.typeAscription \"(\" `I \":\" [(Term.app `set [(Term.arrow `ι \"→\" (Term.app `exprℝ []))])] \")\")\n             \"⊆\"\n             `J)\n            \",\"\n            («term_⊆_»\n             (Term.app `Icc [(Term.proj `I \".\" `lower) (Term.proj `I \".\" `upper)])\n             \"⊆\"\n             (Term.app `Icc [(Term.proj `J \".\" `lower) (Term.proj `J \".\" `upper)]))\n            \",\"\n            («term_∧_»\n             («term_≤_» (Term.proj `J \".\" `lower) \"≤\" (Term.proj `I \".\" `lower))\n             \"∧\"\n             («term_≤_» (Term.proj `I \".\" `upper) \"≤\" (Term.proj `J \".\" `upper)))]\n           \"]\")])))\n      (Command.declValSimple\n       \":=\"\n       (Term.byTactic\n        \"by\"\n        (Tactic.tacticSeq\n         (Tactic.tacticSeq1Indented\n          [(Tactic.tfaeHave \"tfae_have\" [] (num \"1\") \"↔\" (num \"2\"))\n           \";\"\n           (Tactic.exact \"exact\" `iff.rfl)\n           []\n           (Tactic.tfaeHave \"tfae_have\" [] (num \"2\") \"→\" (num \"3\"))\n           []\n           (tactic__\n            (cdotTk (patternIgnore (token.«· » \"·\")))\n            [(Tactic.intro \"intro\" [`h])\n             []\n             (Std.Tactic.Simpa.simpa\n              \"simpa\"\n              []\n              []\n              (Std.Tactic.Simpa.simpaArgsRest\n               []\n               []\n               []\n               [(Tactic.simpArgs\n                 \"[\"\n                 [(Tactic.simpLemma [] [] `coe_eq_pi)\n                  \",\"\n                  (Tactic.simpLemma [] [] `closure_pi_set)\n                  \",\"\n                  (Tactic.simpLemma [] [] `lower_ne_upper)]\n                 \"]\")]\n               [\"using\" (Term.app `closure_mono [`h])]))])\n           []\n           (Tactic.tfaeHave \"tfae_have\" [] (num \"3\") \"↔\" (num \"4\"))\n           \";\"\n           (Tactic.exact \"exact\" (Term.app `Icc_subset_Icc_iff [`I.lower_le_upper]))\n           []\n           (Tactic.tfaeHave \"tfae_have\" [] (num \"4\") \"→\" (num \"2\"))\n           \";\"\n           (Tactic.exact\n            \"exact\"\n            (Term.fun\n             \"fun\"\n             (Term.basicFun\n              [`h `x `hx `i]\n              []\n              \"=>\"\n              (Term.app\n               `Ioc_subset_Ioc\n               [(Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i])\n                (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i])\n                (Term.app `hx [`i])]))))\n           []\n           (Tactic.tfaeFinish \"tfae_finish\")])))\n       [])\n      []\n      []))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Tactic.tfaeHave \"tfae_have\" [] (num \"1\") \"↔\" (num \"2\"))\n          \";\"\n          (Tactic.exact \"exact\" `iff.rfl)\n          []\n          (Tactic.tfaeHave \"tfae_have\" [] (num \"2\") \"→\" (num \"3\"))\n          []\n          (tactic__\n           (cdotTk (patternIgnore (token.«· » \"·\")))\n           [(Tactic.intro \"intro\" [`h])\n            []\n            (Std.Tactic.Simpa.simpa\n             \"simpa\"\n             []\n             []\n             (Std.Tactic.Simpa.simpaArgsRest\n              []\n              []\n              []\n              [(Tactic.simpArgs\n                \"[\"\n                [(Tactic.simpLemma [] [] `coe_eq_pi)\n                 \",\"\n                 (Tactic.simpLemma [] [] `closure_pi_set)\n                 \",\"\n                 (Tactic.simpLemma [] [] `lower_ne_upper)]\n                \"]\")]\n              [\"using\" (Term.app `closure_mono [`h])]))])\n          []\n          (Tactic.tfaeHave \"tfae_have\" [] (num \"3\") \"↔\" (num \"4\"))\n          \";\"\n          (Tactic.exact \"exact\" (Term.app `Icc_subset_Icc_iff [`I.lower_le_upper]))\n          []\n          (Tactic.tfaeHave \"tfae_have\" [] (num \"4\") \"→\" (num \"2\"))\n          \";\"\n          (Tactic.exact\n           \"exact\"\n           (Term.fun\n            \"fun\"\n            (Term.basicFun\n             [`h `x `hx `i]\n             []\n             \"=>\"\n             (Term.app\n              `Ioc_subset_Ioc\n              [(Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i])\n               (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i])\n               (Term.app `hx [`i])]))))\n          []\n          (Tactic.tfaeFinish \"tfae_finish\")])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.tfaeFinish \"tfae_finish\")\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.exact\n       \"exact\"\n       (Term.fun\n        \"fun\"\n        (Term.basicFun\n         [`h `x `hx `i]\n         []\n         \"=>\"\n         (Term.app\n          `Ioc_subset_Ioc\n          [(Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i])\n           (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i])\n           (Term.app `hx [`i])]))))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.fun\n       \"fun\"\n       (Term.basicFun\n        [`h `x `hx `i]\n        []\n        \"=>\"\n        (Term.app\n         `Ioc_subset_Ioc\n         [(Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i])\n          (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i])\n          (Term.app `hx [`i])])))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app\n       `Ioc_subset_Ioc\n       [(Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i])\n        (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i])\n        (Term.app `hx [`i])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `hx [`i])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `i\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `hx\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `hx [`i]) \")\")\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `i\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      (Term.proj `h \".\" (fieldIdx \"2\"))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `h\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app (Term.proj `h \".\" (fieldIdx \"2\")) [`i]) \")\")\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      (Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `i\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      (Term.proj `h \".\" (fieldIdx \"1\"))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `h\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app (Term.proj `h \".\" (fieldIdx \"1\")) [`i]) \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `Ioc_subset_Ioc\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `i\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `hx\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `x\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `h\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.tfaeHave \"tfae_have\" [] (num \"4\") \"→\" (num \"2\"))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«→»', expected 'token.« → »'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«→»', expected 'token.« ↔ »'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«→»', expected 'token.« ← »'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception\ntheorem\n  le_tfae\n  :\n    TFAE\n      [\n        I ≤ J\n          ,\n          ( I : set ι → exprℝ ) ⊆ J\n          ,\n          Icc I . lower I . upper ⊆ Icc J . lower J . upper\n          ,\n          J . lower ≤ I . lower ∧ I . upper ≤ J . upper\n        ]\n  :=\n    by\n      tfae_have 1 ↔ 2\n        ;\n        exact iff.rfl\n        tfae_have 2 → 3\n        · intro h simpa [ coe_eq_pi , closure_pi_set , lower_ne_upper ] using closure_mono h\n        tfae_have 3 ↔ 4\n        ;\n        exact Icc_subset_Icc_iff I.lower_le_upper\n        tfae_have 4 → 2\n        ;\n        exact fun h x hx i => Ioc_subset_Ioc h . 1 i h . 2 i hx i\n        tfae_finish\n#align le_tfae le_tfae\n\n",
 "le_iff_bounds":
 "theorem le_iff_bounds : I ≤ J ↔ J.lower ≤ I.lower ∧ I.upper ≤ J.upper :=\n  (le_tfae I J).out 0 3\n#align le_iff_bounds le_iff_bounds\n\n",
 "le_iff_Icc":
 "theorem le_iff_Icc : I ≤ J ↔ I.Icc ⊆ J.Icc :=\n  (le_tfae I J).out 0 2\n#align le_iff_Icc le_iff_Icc\n\n",
 "le_def":
 "theorem le_def : I ≤ J ↔ ∀ x ∈ I, x ∈ J :=\n  iff.rfl\n#align le_def le_def\n\n",
 "is_some_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_some_iff : ∀ {I : WithBot (box ι)}, I.is_some ↔ (I : set (ι → exprℝ)).nonempty\n  | «expr⊥» => by\n    erw [option.is_some]\n    simp\n  | (I : box ι) => by\n    erw [option.is_some]\n    simp [I.nonempty_coe]\n#align is_some_iff is_some_iff\n\n",
 "is_compact_Icc":
 "protected theorem is_compact_Icc (I : box ι) : is_compact I.Icc :=\n  is_compact_Icc\n#align is_compact_Icc is_compact_Icc\n\n",
 "injective_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem injective_coe : injective (coe : box ι → set (ι → exprℝ)) :=\n  by\n  rintro ⟨l₁, u₁, h₁⟩ ⟨l₂, u₂, h₂⟩ h\n  simp only [subset.antisymm_iff, coe_subset_coe, le_iff_bounds] at h\n  congr\n  exacts[le_antisymm h.2.1 h.1.1, le_antisymm h.1.2 h.2.2]\n#align injective_coe injective_coe\n\n",
 "face_mono":
 "@[mono]\ntheorem face_mono {n} {I J : box (fin (n + 1))} (h : I ≤ J) (i : fin (n + 1)) : face I i ≤ face J i := fun x hx i =>\n  Ioc_subset_Ioc ((le_iff_bounds.1 h).1 _) ((le_iff_bounds.1 h).2 _) (hx _)\n#align face_mono face_mono\n\n",
 "face_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem face_mk {n} (l u : fin (n + 1) → exprℝ) (h : ∀ i, l i < u i) (i : fin (n + 1)) :\n    face ⟨l, u, h⟩ i = ⟨l ∘ Fin.succAbove i, u ∘ Fin.succAbove i, fun j => h _⟩ :=\n  rfl\n#align face_mk face_mk\n\n",
 "ext":
 "@[ext]\ntheorem ext (H : ∀ x, x ∈ I ↔ x ∈ J) : I = J :=\n  injective_coe <| Set.ext H\n#align ext ext\n\n",
 "exists_seq_mono_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem exists_seq_mono_tendsto (I : box ι) :\n    ∃ J : «expr →o » ℕ (box ι),\n      (∀ n, (J n).Icc ⊆ I.Ioo) ∧\n        tendsto (lower ∘ J) at_top ((nhds) I.lower) ∧ tendsto (upper ∘ J) at_top ((nhds) I.upper) :=\n  by\n  choose a b ha_anti hb_mono ha_mem hb_mem hab ha_tendsto hb_tendsto using fun i =>\n    exists_seq_strict_anti_strict_mono_tendsto (I.lower_lt_upper i)\n  exact\n    ⟨⟨fun k => ⟨flip a k, flip b k, fun i => hab _ _ _⟩, fun k l hkl =>\n        le_iff_bounds.2 ⟨fun i => (ha_anti i).antitone hkl, fun i => (hb_mono i).monotone hkl⟩⟩,\n      fun n x hx i hi => ⟨(ha_mem _ _).1.trans_le (hx.1 _), (hx.2 _).trans_lt (hb_mem _ _).2⟩,\n      tendsto_pi_nhds.2 ha_tendsto, tendsto_pi_nhds.2 hb_tendsto⟩\n#align exists_seq_mono_tendsto exists_seq_mono_tendsto\n\n",
 "exists_mem":
 "theorem exists_mem : ∃ x, x ∈ I :=\n  ⟨_, I.upper_mem⟩\n#align exists_mem exists_mem\n\n",
 "empty_ne_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem empty_ne_coe : ∅ ≠ (I : set (ι → exprℝ)) :=\n  I.coe_ne_empty.symm\n#align empty_ne_coe empty_ne_coe\n\n",
 "distortion_eq_of_sub_eq_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem distortion_eq_of_sub_eq_div {I J : box ι} {r : exprℝ}\n    (h : ∀ i, I.upper i - I.lower i = (J.upper i - J.lower i) / r) : distortion I = distortion J :=\n  by\n  simp only [distortion, nndist_pi_def, real.nndist_eq', h, map_div₀]\n  congr 1 with i\n  have : 0 < r := by\n    by_contra hr\n    have := div_nonpos_of_nonneg_of_nonpos (sub_nonneg.2 <| J.lower_le_upper i) (not_lt.1 hr)\n    rw [← h] at this\n    exact this.not_lt (sub_pos.2 <| I.lower_lt_upper i)\n  simp_rw [nnreal.finset_sup_div, div_div_div_cancel_right _ ((map_ne_zero real.nnabs).2 this.ne')]\n#align distortion_eq_of_sub_eq_div distortion_eq_of_sub_eq_div\n\n",
 "dist_le_distortion_mul":
 "theorem dist_le_distortion_mul (I : box ι) (i : ι) : dist I.lower I.upper ≤ I.distortion * (I.upper i - I.lower i) :=\n  by\n  have A : I.lower i - I.upper i < 0 := sub_neg.2 (I.lower_lt_upper i)\n  simpa only [← nnreal.coe_le_coe, ← dist_nndist, nnreal.coe_mul, real.dist_eq, abs_of_neg A, neg_sub] using\n    I.nndist_le_distortion_mul i\n#align dist_le_distortion_mul dist_le_distortion_mul\n\n",
 "disjoint_with_bot_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem disjoint_with_bot_coe {I J : WithBot (box ι)} : Disjoint (I : set (ι → exprℝ)) J ↔ Disjoint I J :=\n  by\n  simp only [disjoint_iff_inf_le, ← with_bot_coe_subset_iff, coe_inf]\n  rfl\n#align disjoint_with_bot_coe disjoint_with_bot_coe\n\n",
 "disjoint_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem disjoint_coe : Disjoint (I : WithBot (box ι)) J ↔ Disjoint (I : set (ι → exprℝ)) J :=\n  disjoint_with_bot_coe.symm\n#align disjoint_coe disjoint_coe\n\n",
 "diam_Icc_le_of_distortion_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem diam_Icc_le_of_distortion_le (I : box ι) (i : ι) {c : nnreal} (h : I.distortion ≤ c) :\n    diam I.Icc ≤ c * (I.upper i - I.lower i) :=\n  have : (0 : exprℝ) ≤ c * (I.upper i - I.lower i) := mul_nonneg c.coe_nonneg (sub_nonneg.2 <| I.lower_le_upper _)\n  diam_le_of_forall_dist_le this fun x hx y hy =>\n    calc\n      dist x y ≤ dist I.lower I.upper := real.dist_le_of_mem_pi_Icc hx hy\n      _ ≤ I.distortion * (I.upper i - I.lower i) := I.dist_le_distortion_mul i\n      _ ≤ c * (I.upper i - I.lower i) := mul_le_mul_of_nonneg_right h (sub_nonneg.2 (I.lower_le_upper i))\n      \n#align diam_Icc_le_of_distortion_le diam_Icc_le_of_distortion_le\n\n",
 "continuous_on_face_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem continuous_on_face_Icc {X} [topological_space X] {n} {f : (fin (n + 1) → exprℝ) → X} {I : box (fin (n + 1))}\n    (h : continuous_on f I.Icc) {i : fin (n + 1)} {x : exprℝ} (hx : x ∈ Icc (I.lower i) (I.upper i)) :\n    continuous_on (f ∘ i.insert_nth x) (I.face i).Icc :=\n  h.comp (continuous_on_const.fin_insert_nth i continuous_on_id) (I.maps_to_insert_nth_face_Icc hx)\n#align continuous_on_face_Icc continuous_on_face_Icc\n\n",
 "coe_subset_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem coe_subset_coe : (I : set (ι → exprℝ)) ⊆ J ↔ I ≤ J :=\n  iff.rfl\n#align coe_subset_coe coe_subset_coe\n\n",
 "coe_subset_Icc":
 "theorem coe_subset_Icc : ↑I ⊆ I.Icc := fun x hx => ⟨fun i => (hx i).1.le, fun i => (hx i).2⟩\n#align coe_subset_Icc coe_subset_Icc\n\n",
 "coe_ne_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem coe_ne_empty : (I : set (ι → exprℝ)) ≠ ∅ :=\n  I.nonempty_coe.ne_empty\n#align coe_ne_empty coe_ne_empty\n\n",
 "coe_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem coe_mk' (l u : ι → exprℝ) : (mk' l u : set (ι → exprℝ)) = pi univ fun i => Ioc (l i) (u i) :=\n  by\n  rw [mk']; split_ifs\n  · exact coe_eq_pi _\n  · rcases not_forall.mp h with ⟨i, hi⟩\n    rw [coe_bot, univ_pi_eq_empty]\n    exact Ioc_eq_empty hi\n#align coe_mk' coe_mk'\n\n",
 "coe_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem coe_inj : (I : set (ι → exprℝ)) = J ↔ I = J :=\n  injective_coe.eq_iff\n#align coe_inj coe_inj\n\n",
 "coe_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem coe_inf (I J : WithBot (box ι)) : (↑(«expr ⊓ » I J) : set (ι → exprℝ)) = I ∩ J :=\n  by\n  induction I using WithBot.recBotCoe;\n  · change ∅ = _\n    simp\n  induction J using WithBot.recBotCoe;\n  · change ∅ = _\n    simp\n  change ↑(mk' _ _) = _\n  simp only [coe_eq_pi, ← pi_inter_distrib, Ioc_inter_Ioc, Pi.sup_apply, Pi.inf_apply, coe_mk', coe_coe]\n#align coe_inf coe_inf\n\n",
 "coe_eq_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem coe_eq_pi : (I : set (ι → exprℝ)) = pi univ fun i => Ioc (I.lower i) (I.upper i) :=\n  Set.ext fun x => mem_univ_Ioc.symm\n#align coe_eq_pi coe_eq_pi\n\n",
 "coe_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem coe_coe : ((I : WithBot (box ι)) : set (ι → exprℝ)) = I :=\n  rfl\n#align coe_coe coe_coe\n\n",
 "coe_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp, norm_cast]\ntheorem coe_bot : ((«expr⊥» : WithBot (box ι)) : set (ι → exprℝ)) = ∅ :=\n  rfl\n#align coe_bot coe_bot\n\n",
 "bUnion_coe_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem bUnion_coe_eq_coe (I : WithBot (box ι)) :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (J : set (ι → exprℝ)) =\n      I :=\n  by induction I using WithBot.recBotCoe <;> simp [WithBot.coe_eq_coe]\n#align bUnion_coe_eq_coe bUnion_coe_eq_coe\n\n",
 "antitone_lower":
 "theorem antitone_lower : antitone fun I : box ι => I.lower := fun I J H => (le_iff_bounds.1 H).1\n#align antitone_lower antitone_lower\n\n",
 "Union_Ioo_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Ioo_of_tendsto [Finite ι] {I : box ι} {J : ℕ → box ι} (hJ : monotone J)\n    (hl : tendsto (lower ∘ J) at_top ((nhds) I.lower)) (hu : tendsto (upper ∘ J) at_top ((nhds) I.upper)) :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (J n).Ioo = I.Ioo :=\n  have hl' : ∀ i, antitone fun n => (J n).lower i := fun i =>\n    (monotone_eval i).comp_antitone (antitone_lower.comp_monotone hJ)\n  have hu' : ∀ i, monotone fun n => (J n).upper i := fun i => (monotone_eval i).comp (monotone_upper.comp hJ)\n  calc\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (J n).Ioo =\n        pi univ fun i =>\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            (Ioo ((J n).lower i) ((J n).upper i)) :=\n      Union_univ_pi_of_monotone fun i => (hl' i).Ioo (hu' i)\n    _ = I.Ioo :=\n      pi_congr rfl fun i hi =>\n        unionᵢ_Ioo_of_mono_of_isGLB_of_isLUB (hl' i) (hu' i) (is_glb_of_tendsto_at_top (hl' i) (tendsto_pi_nhds.1 hl _))\n          (is_lub_of_tendsto_at_top (hu' i) (tendsto_pi_nhds.1 hu _))\n    \n#align Union_Ioo_of_tendsto Union_Ioo_of_tendsto\n\n",
 "Ioo_subset_coe":
 "theorem Ioo_subset_coe (I : box ι) : I.Ioo ⊆ I := fun x hx i => Ioo_subset_Ioc_self (hx i trivial)\n#align Ioo_subset_coe Ioo_subset_coe\n\n",
 "Ioo_subset_Icc":
 "protected theorem Ioo_subset_Icc (I : box ι) : I.Ioo ⊆ I.Icc :=\n  I.Ioo_subset_coe.trans coe_subset_Icc\n#align Ioo_subset_Icc Ioo_subset_Icc\n\n",
 "Icc_eq_pi":
 "theorem Icc_eq_pi : I.Icc = pi univ fun i => Icc (I.lower i) (I.upper i) :=\n  (pi_univ_Icc _ _).symm\n#align Icc_eq_pi Icc_eq_pi\n\n",
 "Icc_def":
 "theorem Icc_def : I.Icc = Icc I.lower I.upper :=\n  rfl\n#align Icc_def Icc_def\n\n"}