{"upper_le_upper":
 "theorem upper_le_upper (hJ : J ∈ π) : J.upper ≤ I.upper :=\n  box.monotone_upper (π.le_of_mem hJ)\n#align upper_le_upper upper_le_upper\n\n",
 "top_boxes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem top_boxes : («expr⊤» : prepartition I).boxes = {I} :=\n  rfl\n#align top_boxes top_boxes\n\n",
 "sum_of_with_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem sum_of_with_bot {M : Type _} [add_comm_monoid M] (boxes : Finset (WithBot (box ι)))\n    (le_of_mem : ∀ J ∈ boxes, (J : WithBot (box ι)) ≤ I)\n    (pairwise_disjoint : Set.Pairwise (boxes : set (WithBot (box ι))) Disjoint) (f : box ι → M) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (of_with_bot boxes le_of_mem pairwise_disjoint).boxes (f J) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" boxes\n        (Option.elim' 0 f J) :=\n  finset.sum_erase_none _ _\n#align sum_of_with_bot sum_of_with_bot\n\n",
 "sum_fiberwise":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem sum_fiberwise {α M} [add_comm_monoid M] (π : prepartition I) (f : box ι → α) (g : box ι → M) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (π.boxes.image f)\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n          (π.filter fun J => f J = y).boxes (g J)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" π.boxes (g J) :=\n  by convert sum_fiberwise_of_maps_to (fun _ => Finset.mem_image_of_mem f) g\n#align sum_fiberwise sum_fiberwise\n\n",
 "sum_disj_union_boxes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem sum_disj_union_boxes {M : Type _} [add_comm_monoid M] (h : Disjoint π₁.Union π₂.Union) (f : box ι → M) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (π₁.boxes ∪ π₂.boxes) (f J) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" π₁.boxes (f J) +\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" π₂.boxes\n          (f J) :=\n  sum_union <| disjoint_boxes_of_disjoint_Union h\n#align sum_disj_union_boxes sum_disj_union_boxes\n\n",
 "sum_bUnion_boxes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem sum_bUnion_boxes {M : Type _} [add_comm_monoid M] (π : prepartition I) (πi : ∀ J, prepartition J)\n    (f : box ι → M) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (π.boxes.bUnion fun J => (πi J).boxes) (f J) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" π.boxes\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (πi J).boxes\n          (f J')) :=\n  by\n  refine' finset.sum_bUnion fun J₁ h₁ J₂ h₂ hne => Finset.disjoint_left.2 fun J' h₁' h₂' => _\n  exact hne (π.eq_of_le_of_le h₁ h₂ ((πi J₁).le_of_mem h₁') ((πi J₂).le_of_mem h₂'))\n#align sum_bUnion_boxes sum_bUnion_boxes\n\n",
 "subset_Union":
 "theorem subset_Union (h : J ∈ π) : ↑J ⊆ π.Union :=\n  subset_bunionᵢ_of_mem h\n#align subset_Union subset_Union\n\n",
 "restrict_self":
 "@[simp]\ntheorem restrict_self : π.restrict I = π :=\n  injective_boxes <| restrict_boxes_of_le π le_rfl\n#align restrict_self restrict_self\n\n",
 "restrict_mono":
 "@[mono]\ntheorem restrict_mono {π₁ π₂ : prepartition I} (Hle : π₁ ≤ π₂) : π₁.restrict J ≤ π₂.restrict J :=\n  by\n  refine' of_with_bot_mono fun J₁ hJ₁ hne => _\n  rw [Finset.mem_image] at hJ₁; rcases hJ₁ with ⟨J₁, hJ₁, rfl⟩\n  rcases Hle hJ₁ with ⟨J₂, hJ₂, hle⟩\n  exact ⟨_, Finset.mem_image_of_mem _ hJ₂, inf_le_inf_left _ <| WithBot.coe_le_coe.2 hle⟩\n#align restrict_mono restrict_mono\n\n",
 "restrict_boxes_of_le":
 "/-- Restricting to a larger box does not change the set of boxes. We cannot claim equality\nof prepartitions because they have different types. -/\ntheorem restrict_boxes_of_le (π : prepartition I) (h : I ≤ J) : (π.restrict J).boxes = π.boxes :=\n  by\n  simp only [restrict, of_with_bot, erase_none_eq_bUnion]\n  refine' finset.image_bUnion.trans _\n  refine' (Finset.bunionᵢ_congr rfl _).trans Finset.bunionᵢ_singleton_eq_self\n  intro J' hJ'\n  rw [inf_of_le_right, ← WithBot.some_eq_coe, option.to_finset_some]\n  exact WithBot.coe_le_coe.2 ((π.le_of_mem hJ').trans h)\n#align restrict_boxes_of_le restrict_boxes_of_le\n\n",
 "restrict_bUnion":
 "@[simp]\ntheorem restrict_bUnion (πi : ∀ J, prepartition J) (hJ : J ∈ π) : (π.bUnion πi).restrict J = πi J :=\n  by\n  refine' (eq_of_boxes_subset_Union_superset (fun J₁ h₁ => _) _).symm\n  · refine' (mem_restrict _).2 ⟨J₁, π.mem_bUnion.2 ⟨J, hJ, h₁⟩, (inf_of_le_right _).symm⟩\n    exact WithBot.coe_le_coe.2 (le_of_mem _ h₁)\n  · simp only [Union_restrict, Union_bUnion, Set.subset_def, Set.mem_inter_iff, Set.mem_unionᵢ]\n    rintro x ⟨hxJ, J₁, h₁, hx⟩\n    obtain rfl : J = J₁\n    exact π.eq_of_mem_of_mem hJ h₁ hxJ (Union_subset _ hx)\n    exact hx\n#align restrict_bUnion restrict_bUnion\n\n",
 "restrict":
 "protected theorem restrict (h : is_partition π) (hJ : J ≤ I) : is_partition (π.restrict J) :=\n  is_partition_iff_Union_eq.2 <| by simp [h.Union_eq, hJ]\n#align restrict restrict\n\n",
 "of_with_bot_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem of_with_bot_mono {boxes₁ : Finset (WithBot (box ι))} {le_of_mem₁ : ∀ J ∈ boxes₁, (J : WithBot (box ι)) ≤ I}\n    {pairwise_disjoint₁ : Set.Pairwise (boxes₁ : set (WithBot (box ι))) Disjoint} {boxes₂ : Finset (WithBot (box ι))}\n    {le_of_mem₂ : ∀ J ∈ boxes₂, (J : WithBot (box ι)) ≤ I}\n    {pairwise_disjoint₂ : Set.Pairwise (boxes₂ : set (WithBot (box ι))) Disjoint}\n    (H : ∀ J ∈ boxes₁, J ≠ «expr⊥» → ∃ J' ∈ boxes₂, J ≤ J') :\n    of_with_bot boxes₁ le_of_mem₁ pairwise_disjoint₁ ≤ of_with_bot boxes₂ le_of_mem₂ pairwise_disjoint₂ :=\n  le_of_with_bot _ fun J hJ => H J (mem_of_with_bot.1 hJ) WithBot.coe_ne_bot\n#align of_with_bot_mono of_with_bot_mono\n\n",
 "of_with_bot_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem of_with_bot_le {boxes : Finset (WithBot (box ι))} {le_of_mem : ∀ J ∈ boxes, (J : WithBot (box ι)) ≤ I}\n    {pairwise_disjoint : Set.Pairwise (boxes : set (WithBot (box ι))) Disjoint}\n    (H : ∀ J ∈ boxes, J ≠ «expr⊥» → ∃ J' ∈ π, J ≤ ↑J') : of_with_bot boxes le_of_mem pairwise_disjoint ≤ π :=\n  by\n  have : ∀ J : box ι, ↑J ∈ boxes → ∃ J' ∈ π, J ≤ J' := fun J hJ => by\n    simpa only [WithBot.coe_le_coe] using H J hJ WithBot.coe_ne_bot\n  simpa [of_with_bot, le_def]\n#align of_with_bot_le of_with_bot_le\n\n",
 "not_mem_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem not_mem_bot : J ∉ («expr⊥» : prepartition I) :=\n  id\n#align not_mem_bot not_mem_bot\n\n",
 "nonempty_boxes":
 "theorem nonempty_boxes (h : π.is_partition) : π.boxes.nonempty :=\n  let ⟨J, hJ, _⟩ := h _ I.upper_mem\n  ⟨J, hJ⟩\n#align nonempty_boxes nonempty_boxes\n\n",
 "monotone_restrict":
 "theorem monotone_restrict : monotone fun π : prepartition I => restrict π J := fun π₁ π₂ => restrict_mono\n#align monotone_restrict monotone_restrict\n\n",
 "mem_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem mem_top : J ∈ («expr⊤» : prepartition I) ↔ J = I :=\n  mem_singleton\n#align mem_top mem_top\n\n",
 "mem_single":
 "@[simp]\ntheorem mem_single {J'} (h : J ≤ I) : J' ∈ single I J h ↔ J' = J :=\n  mem_singleton\n#align mem_single mem_single\n\n",
 "mem_restrict'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem mem_restrict' : J₁ ∈ π.restrict J ↔ ∃ J' ∈ π, (J₁ : set (ι → exprℝ)) = J ∩ J' := by\n  simp only [mem_restrict, ← box.with_bot_coe_inj, box.coe_inf, box.coe_coe]\n#align mem_restrict' mem_restrict'\n\n",
 "mem_restrict":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem mem_restrict : J₁ ∈ π.restrict J ↔ ∃ J' ∈ π, (J₁ : WithBot (box ι)) = «expr ⊓ » J J' := by\n  simp [restrict, eq_comm]\n#align mem_restrict mem_restrict\n\n",
 "mem_of_with_bot":
 "@[simp]\ntheorem mem_of_with_bot {boxes : Finset (WithBot (box ι))} {h₁ h₂} :\n    J ∈ (of_with_bot boxes h₁ h₂ : prepartition I) ↔ (J : WithBot (box ι)) ∈ boxes :=\n  mem_erase_none\n#align mem_of_with_bot mem_of_with_bot\n\n",
 "mem_mk":
 "@[simp]\ntheorem mem_mk {s h₁ h₂} : J ∈ (mk s h₁ h₂ : prepartition I) ↔ J ∈ s :=\n  iff.rfl\n#align mem_mk mem_mk\n\n",
 "mem_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem mem_inf {π₁ π₂ : prepartition I} :\n    J ∈ «expr ⊓ » π₁ π₂ ↔ ∃ J₁ ∈ π₁, ∃ J₂ ∈ π₂, (J : WithBot (box ι)) = «expr ⊓ » J₁ J₂ := by\n  simp only [inf_def, mem_bUnion, mem_restrict]\n#align mem_inf mem_inf\n\n",
 "mem_filter":
 "@[simp]\ntheorem mem_filter {p : box ι → Prop} : J ∈ π.filter p ↔ J ∈ π ∧ p J :=\n  Finset.mem_filter\n#align mem_filter mem_filter\n\n",
 "mem_disj_union":
 "@[simp]\ntheorem mem_disj_union (H : Disjoint π₁.Union π₂.Union) : J ∈ π₁.disj_union π₂ H ↔ J ∈ π₁ ∨ J ∈ π₂ :=\n  Finset.mem_union\n#align mem_disj_union mem_disj_union\n\n",
 "mem_boxes":
 "/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n@[simp]\ntheorem mem_boxes : J ∈ π.boxes ↔ J ∈ π :=\n  iff.rfl\n#align mem_boxes mem_boxes\n\n",
 "mem_bUnion_index":
 "theorem mem_bUnion_index (hJ : J ∈ π.bUnion πi) : J ∈ πi (π.bUnion_index πi J) := by\n  convert (π.mem_bUnion.1 hJ).some_spec.snd <;> exact dif_pos hJ\n#align mem_bUnion_index mem_bUnion_index\n\n",
 "mem_bUnion":
 "@[simp]\ntheorem mem_bUnion : J ∈ π.bUnion πi ↔ ∃ J' ∈ π, J ∈ πi J' := by simp [bUnion]\n#align mem_bUnion mem_bUnion\n\n",
 "mem_Union":
 "@[simp]\ntheorem mem_Union : x ∈ π.Union ↔ ∃ J ∈ π, x ∈ J :=\n  Set.mem_unionᵢ₂\n#align mem_Union mem_Union\n\n",
 "lower_le_lower":
 "theorem lower_le_lower (hJ : J ∈ π) : I.lower ≤ J.lower :=\n  box.antitone_lower (π.le_of_mem hJ)\n#align lower_le_lower lower_le_lower\n\n",
 "le_of_with_bot":
 "theorem le_of_with_bot {boxes : Finset (WithBot (box ι))} {le_of_mem : ∀ J ∈ boxes, (J : WithBot (box ι)) ≤ I}\n    {pairwise_disjoint : Set.Pairwise (boxes : set (WithBot (box ι))) Disjoint} (H : ∀ J ∈ π, ∃ J' ∈ boxes, ↑J ≤ J') :\n    π ≤ of_with_bot boxes le_of_mem pairwise_disjoint :=\n  by\n  intro J hJ\n  rcases H J hJ with ⟨J', J'mem, hle⟩\n  lift J' to box ι using ne_bot_of_le_ne_bot WithBot.coe_ne_bot hle\n  exact ⟨J', mem_of_with_bot.2 J'mem, WithBot.coe_le_coe.1 hle⟩\n#align le_of_with_bot le_of_with_bot\n\n",
 "le_of_mem":
 "theorem le_of_mem (hJ : J ∈ π) : J ≤ I :=\n  π.le_of_mem' J hJ\n#align le_of_mem le_of_mem\n\n",
 "le_iff_nonempty_imp_le_and_Union_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem le_iff_nonempty_imp_le_and_Union_subset :\n    π₁ ≤ π₂ ↔ (∀ J ∈ π₁, ∀ J' ∈ π₂, (J ∩ J' : set (ι → exprℝ)).nonempty → J ≤ J') ∧ π₁.Union ⊆ π₂.Union :=\n  by\n  fconstructor\n  · refine' fun H => ⟨fun J hJ J' hJ' Hne => _, Union_mono H⟩\n    rcases H hJ with ⟨J'', hJ'', Hle⟩\n    rcases Hne with ⟨x, hx, hx'⟩\n    rwa [π₂.eq_of_mem_of_mem hJ' hJ'' hx' (Hle hx)]\n  · rintro ⟨H, HU⟩ J hJ\n    simp only [Set.subset_def, mem_Union] at HU\n    rcases HU J.upper ⟨J, hJ, J.upper_mem⟩ with ⟨J₂, hJ₂, hx⟩\n    exact ⟨J₂, hJ₂, H _ hJ _ hJ₂ ⟨_, J.upper_mem, hx⟩⟩\n#align le_iff_nonempty_imp_le_and_Union_subset le_iff_nonempty_imp_le_and_Union_subset\n\n",
 "le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem le_iff (h : π₂.is_partition) : π₁ ≤ π₂ ↔ ∀ J ∈ π₁, ∀ J' ∈ π₂, (J ∩ J' : set (ι → exprℝ)).nonempty → J ≤ J' :=\n  le_iff_nonempty_imp_le_and_Union_subset.trans <| and_iff_left <| h.Union_subset _\n#align le_iff le_iff\n\n",
 "le_def":
 "theorem le_def : π₁ ≤ π₂ ↔ ∀ J ∈ π₁, ∃ J' ∈ π₂, J ≤ J' :=\n  iff.rfl\n#align le_def le_def\n\n",
 "le_bUnion_index":
 "theorem le_bUnion_index (hJ : J ∈ π.bUnion πi) : J ≤ π.bUnion_index πi J :=\n  le_of_mem _ (π.mem_bUnion_index hJ)\n#align le_bUnion_index le_bUnion_index\n\n",
 "le_bUnion_iff":
 "theorem le_bUnion_iff {πi : ∀ J, prepartition J} {π' : prepartition I} :\n    π' ≤ π.bUnion πi ↔ π' ≤ π ∧ ∀ J ∈ π, π'.restrict J ≤ πi J :=\n  by\n  refine' ⟨fun H => ⟨H.trans (π.bUnion_le πi), fun J hJ => _⟩, _⟩\n  · rw [← π.restrict_bUnion πi hJ]\n    exact restrict_mono H\n  · rintro ⟨H, Hi⟩ J' hJ'\n    rcases H hJ' with ⟨J, hJ, hle⟩\n    have : J' ∈ π'.restrict J := π'.mem_restrict.2 ⟨J', hJ', (inf_of_le_right <| WithBot.coe_le_coe.2 hle).symm⟩\n    rcases Hi J hJ this with ⟨Ji, hJi, hlei⟩\n    exact ⟨Ji, π.mem_bUnion.2 ⟨J, hJ, hJi⟩, hlei⟩\n#align le_bUnion_iff le_bUnion_iff\n\n",
 "is_partition_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_partition_top (I : box ι) : is_partition («expr⊤» : prepartition I) := fun x hx => ⟨I, mem_top.2 rfl, hx⟩\n#align is_partition_top is_partition_top\n\n",
 "is_partition_single_iff":
 "@[simp]\ntheorem is_partition_single_iff (h : J ≤ I) : is_partition (single I J h) ↔ J = I := by simp [is_partition_iff_Union_eq]\n#align is_partition_single_iff is_partition_single_iff\n\n",
 "is_partition_iff_Union_eq":
 "theorem is_partition_iff_Union_eq {π : prepartition I} : π.is_partition ↔ π.Union = I := by\n  simp_rw [is_partition, Set.Subset.antisymm_iff, π.Union_subset, true_and_iff, Set.subset_def, mem_Union, box.mem_coe]\n#align is_partition_iff_Union_eq is_partition_iff_Union_eq\n\n",
 "is_partition_disj_union_of_eq_diff":
 "theorem is_partition_disj_union_of_eq_diff (h : π₂.Union = I \\ π₁.Union) :\n    is_partition (π₁.disj_union π₂ <| h.symm ▸ disjoint_sdiff_self_right) :=\n  is_partition_iff_Union_eq.2 <| (Union_disj_union _).trans <| by simp [h, π₁.Union_subset]\n#align is_partition_disj_union_of_eq_diff is_partition_disj_union_of_eq_diff\n\n",
 "injective_boxes":
 "theorem injective_boxes : function.injective (boxes : prepartition I → Finset (box ι)) :=\n  by\n  rintro ⟨s₁, h₁, h₁'⟩ ⟨s₂, h₂, h₂'⟩ (rfl : s₁ = s₂)\n  rfl\n#align injective_boxes injective_boxes\n\n",
 "inj_on_set_of_mem_Icc_set_of_lower_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- An auxiliary lemma used to prove that the same point can't belong to more than\n`2 ^ fintype.card ι` closed boxes of a prepartition. -/\ntheorem inj_on_set_of_mem_Icc_set_of_lower_eq (x : ι → exprℝ) :\n    InjOn (fun J : box ι => { i | J.lower i = x i }) { J | J ∈ π ∧ x ∈ J.Icc } :=\n  by\n  rintro J₁ ⟨h₁, hx₁⟩ J₂ ⟨h₂, hx₂⟩ (H : { i | J₁.lower i = x i } = { i | J₂.lower i = x i })\n  suffices ∀ i, (Ioc (J₁.lower i) (J₁.upper i) ∩ Ioc (J₂.lower i) (J₂.upper i)).nonempty\n    by\n    choose y hy₁ hy₂\n    exact π.eq_of_mem_of_mem h₁ h₂ hy₁ hy₂\n  intro i\n  simp only [Set.ext_iff, mem_set_of_eq] at H\n  cases' (hx₁.1 i).eq_or_lt with hi₁ hi₁\n  · have hi₂ : J₂.lower i = x i := (H _).1 hi₁\n    have H₁ : x i < J₁.upper i := by simpa only [hi₁] using J₁.lower_lt_upper i\n    have H₂ : x i < J₂.upper i := by simpa only [hi₂] using J₂.lower_lt_upper i\n    rw [Ioc_inter_Ioc, hi₁, hi₂, sup_idem, Set.nonempty_Ioc]\n    exact lt_min H₁ H₂\n  · have hi₂ : J₂.lower i < x i := (hx₂.1 i).lt_of_ne (mt (H _).2 hi₁.ne)\n    exact ⟨x i, ⟨hi₁, hx₁.2 i⟩, ⟨hi₂, hx₂.2 i⟩⟩\n#align inj_on_set_of_mem_Icc_set_of_lower_eq inj_on_set_of_mem_Icc_set_of_lower_eq\n\n",
 "inf_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_def (π₁ π₂ : prepartition I) : «expr ⊓ » π₁ π₂ = π₁.bUnion fun J => π₂.restrict J :=\n  rfl\n#align inf_def inf_def\n\n",
 "inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\nprotected theorem inf (h₁ : is_partition π₁) (h₂ : is_partition π₂) : is_partition («expr ⊓ » π₁ π₂) :=\n  is_partition_iff_Union_eq.2 <| by simp [h₁.Union_eq, h₂.Union_eq]\n#align inf inf\n\n",
 "filter_true":
 "@[simp]\ntheorem filter_true : (π.filter fun _ => true) = π :=\n  π.filter_of_true fun _ _ => trivial\n#align filter_true filter_true\n\n",
 "filter_of_true":
 "theorem filter_of_true {p : box ι → Prop} (hp : ∀ J ∈ π, p J) : π.filter p = π :=\n  by\n  ext J\n  simpa using hp J\n#align filter_of_true filter_of_true\n\n",
 "filter_le":
 "theorem filter_le (π : prepartition I) (p : box ι → Prop) : π.filter p ≤ π := fun J hJ =>\n  let ⟨hπ, hp⟩ := π.mem_filter.1 hJ\n  ⟨J, hπ, le_rfl⟩\n#align filter_le filter_le\n\n",
 "ext":
 "@[ext]\ntheorem ext (h : ∀ J, J ∈ π₁ ↔ J ∈ π₂) : π₁ = π₂ :=\n  injective_boxes <| Finset.ext h\n#align ext ext\n\n",
 "exists_unique":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (J «expr ∈ » π) -/\nprotected theorem exists_unique (h : π.is_partition) (hx : x ∈ I) : ∃! (J : _)(_ : J ∈ π), x ∈ J :=\n  by\n  rcases h x hx with ⟨J, h, hx⟩\n  exact ExistsUnique.intro₂ J h hx fun J' h' hx' => π.eq_of_mem_of_mem h' h hx' hx\n#align exists_unique exists_unique\n\n",
 "eq_of_mem_of_mem":
 "theorem eq_of_mem_of_mem (h₁ : J₁ ∈ π) (h₂ : J₂ ∈ π) (hx₁ : x ∈ J₁) (hx₂ : x ∈ J₂) : J₁ = J₂ :=\n  by_contra fun H => (π.disjoint_coe_of_mem h₁ h₂ H).le_bot ⟨hx₁, hx₂⟩\n#align eq_of_mem_of_mem eq_of_mem_of_mem\n\n",
 "eq_of_le_of_le":
 "theorem eq_of_le_of_le (h₁ : J₁ ∈ π) (h₂ : J₂ ∈ π) (hle₁ : J ≤ J₁) (hle₂ : J ≤ J₂) : J₁ = J₂ :=\n  π.eq_of_mem_of_mem h₁ h₂ (hle₁ J.upper_mem) (hle₂ J.upper_mem)\n#align eq_of_le_of_le eq_of_le_of_le\n\n",
 "eq_of_le":
 "theorem eq_of_le (h₁ : J₁ ∈ π) (h₂ : J₂ ∈ π) (hle : J₁ ≤ J₂) : J₁ = J₂ :=\n  π.eq_of_le_of_le h₁ h₂ le_rfl hle\n#align eq_of_le eq_of_le\n\n",
 "eq_of_boxes_subset_Union_superset":
 "theorem eq_of_boxes_subset_Union_superset (h₁ : π₁.boxes ⊆ π₂.boxes) (h₂ : π₂.Union ⊆ π₁.Union) : π₁ = π₂ :=\n  (le_antisymm fun J hJ => ⟨J, h₁ hJ, le_rfl⟩) <|\n    le_iff_nonempty_imp_le_and_Union_subset.2\n      ⟨fun J₁ hJ₁ J₂ hJ₂ Hne => (π₂.eq_of_mem_of_mem hJ₁ (h₁ hJ₂) Hne.some_spec.1 Hne.some_spec.2).le, h₂⟩\n#align eq_of_boxes_subset_Union_superset eq_of_boxes_subset_Union_superset\n\n",
 "eq_of_boxes_subset":
 "theorem eq_of_boxes_subset (h₁ : π₁.is_partition) (h₂ : π₁.boxes ⊆ π₂.boxes) : π₁ = π₂ :=\n  eq_of_boxes_subset_Union_superset h₂ <| h₁.Union_subset _\n#align eq_of_boxes_subset eq_of_boxes_subset\n\n",
 "distortion_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem distortion_top (I : box ι) : distortion («expr⊤» : prepartition I) = I.distortion :=\n  sup_singleton\n#align distortion_top distortion_top\n\n",
 "distortion_of_const":
 "theorem distortion_of_const {c} (h₁ : π.boxes.nonempty) (h₂ : ∀ J ∈ π, box.distortion J = c) : π.distortion = c :=\n  (sup_congr rfl h₂).trans (sup_const h₁ _)\n#align distortion_of_const distortion_of_const\n\n",
 "distortion_le_of_mem":
 "theorem distortion_le_of_mem (h : J ∈ π) : J.distortion ≤ π.distortion :=\n  le_sup h\n#align distortion_le_of_mem distortion_le_of_mem\n\n",
 "distortion_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem distortion_le_iff {c : nnreal} : π.distortion ≤ c ↔ ∀ J ∈ π, box.distortion J ≤ c :=\n  finset.sup_le_iff\n#align distortion_le_iff distortion_le_iff\n\n",
 "distortion_disj_union":
 "@[simp]\ntheorem distortion_disj_union (h : Disjoint π₁.Union π₂.Union) :\n    (π₁.disj_union π₂ h).distortion = max π₁.distortion π₂.distortion :=\n  sup_union\n#align distortion_disj_union distortion_disj_union\n\n",
 "distortion_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem distortion_bot (I : box ι) : distortion («expr⊥» : prepartition I) = 0 :=\n  sup_empty\n#align distortion_bot distortion_bot\n\n",
 "distortion_bUnion":
 "theorem distortion_bUnion (π : prepartition I) (πi : ∀ J, prepartition J) :\n    (π.bUnion πi).distortion = π.boxes.sup fun J => (πi J).distortion :=\n  sup_bUnion _ _\n#align distortion_bUnion distortion_bUnion\n\n",
 "disjoint_coe_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem disjoint_coe_of_mem (h₁ : J₁ ∈ π) (h₂ : J₂ ∈ π) (h : J₁ ≠ J₂) : Disjoint (J₁ : set (ι → exprℝ)) J₂ :=\n  π.pairwise_disjoint h₁ h₂ h\n#align disjoint_coe_of_mem disjoint_coe_of_mem\n\n",
 "disjoint_boxes_of_disjoint_Union":
 "theorem disjoint_boxes_of_disjoint_Union (h : Disjoint π₁.Union π₂.Union) : Disjoint π₁.boxes π₂.boxes :=\n  Finset.disjoint_left.2 fun J h₁ h₂ =>\n    Disjoint.le_bot (h.mono (π₁.subset_Union h₁) (π₂.subset_Union h₂)) ⟨J.upper_mem, J.upper_mem⟩\n#align disjoint_boxes_of_disjoint_Union disjoint_boxes_of_disjoint_Union\n\n",
 "card_filter_mem_Icc_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The set of boxes of a prepartition that contain `x` in their closures has cardinality\nat most `2 ^ fintype.card ι`. -/\ntheorem card_filter_mem_Icc_le [fintype ι] (x : ι → exprℝ) :\n    (π.boxes.filter fun J : box ι => x ∈ J.Icc).card ≤ 2 ^ fintype.card ι :=\n  by\n  rw [← fintype.card_set]\n  refine' finset.card_le_card_of_inj_on (fun J : box ι => { i | J.lower i = x i }) (fun _ _ => finset.mem_univ _) _\n  simpa only [Finset.mem_filter] using π.inj_on_set_of_mem_Icc_set_of_lower_eq x\n#align card_filter_mem_Icc_le card_filter_mem_Icc_le\n\n",
 "bot_boxes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_boxes : («expr⊥» : prepartition I).boxes = ∅ :=\n  rfl\n#align bot_boxes bot_boxes\n\n",
 "bUnion_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem bUnion_top : (π.bUnion fun _ => «expr⊤») = π := by\n  ext\n  simp\n#align bUnion_top bUnion_top\n\n",
 "bUnion_le_iff":
 "theorem bUnion_le_iff {πi : ∀ J, prepartition J} {π' : prepartition I} :\n    π.bUnion πi ≤ π' ↔ ∀ J ∈ π, πi J ≤ π'.restrict J :=\n  by\n  fconstructor <;> intro H J hJ\n  · rw [← π.restrict_bUnion πi hJ]\n    exact restrict_mono H\n  · rw [mem_bUnion] at hJ\n    rcases hJ with ⟨J₁, h₁, hJ⟩\n    rcases H J₁ h₁ hJ with ⟨J₂, h₂, Hle⟩\n    rcases π'.mem_restrict.mp h₂ with ⟨J₃, h₃, H⟩\n    exact ⟨J₃, h₃, Hle.trans <| WithBot.coe_le_coe.1 <| H.trans_le inf_le_right⟩\n#align bUnion_le_iff bUnion_le_iff\n\n",
 "bUnion_le":
 "theorem bUnion_le (πi : ∀ J, prepartition J) : π.bUnion πi ≤ π := fun J hJ =>\n  let ⟨J', hJ', hJ⟩ := π.mem_bUnion.1 hJ\n  ⟨J', hJ', (πi J').le_of_mem hJ⟩\n#align bUnion_le bUnion_le\n\n",
 "bUnion_index_of_mem":
 "/-- Uniqueness property of `box_integral.partition.bUnion_index`. -/\ntheorem bUnion_index_of_mem (hJ : J ∈ π) {J'} (hJ' : J' ∈ πi J) : π.bUnion_index πi J' = J :=\n  have : J' ∈ π.bUnion πi := π.mem_bUnion.2 ⟨J, hJ, hJ'⟩\n  π.eq_of_le_of_le (π.bUnion_index_mem this) hJ (π.le_bUnion_index this) (le_of_mem _ hJ')\n#align bUnion_index_of_mem bUnion_index_of_mem\n\n",
 "bUnion_index_mem":
 "theorem bUnion_index_mem (hJ : J ∈ π.bUnion πi) : π.bUnion_index πi J ∈ π :=\n  by\n  rw [bUnion_index, dif_pos hJ]\n  exact (π.mem_bUnion.1 hJ).some_spec.fst\n#align bUnion_index_mem bUnion_index_mem\n\n",
 "bUnion_index_le":
 "theorem bUnion_index_le (πi : ∀ J, prepartition J) (J : box ι) : π.bUnion_index πi J ≤ I :=\n  by\n  by_cases hJ : J ∈ π.bUnion πi\n  · exact π.le_of_mem (π.bUnion_index_mem hJ)\n  · rw [bUnion_index, dif_neg hJ]\n    exact le_rfl\n#align bUnion_index_le bUnion_index_le\n\n",
 "bUnion_congr_of_le":
 "theorem bUnion_congr_of_le (h : π₁ = π₂) (hi : ∀ J ≤ I, πi₁ J = πi₂ J) : π₁.bUnion πi₁ = π₂.bUnion πi₂ :=\n  bUnion_congr h fun J hJ => hi J (π₁.le_of_mem hJ)\n#align bUnion_congr_of_le bUnion_congr_of_le\n\n",
 "bUnion_congr":
 "@[congr]\ntheorem bUnion_congr (h : π₁ = π₂) (hi : ∀ J ∈ π₁, πi₁ J = πi₂ J) : π₁.bUnion πi₁ = π₂.bUnion πi₂ :=\n  by\n  subst π₂\n  ext J\n  simp (config := { contextual := true }) [hi]\n#align bUnion_congr bUnion_congr\n\n",
 "bUnion_assoc":
 "theorem bUnion_assoc (πi : ∀ J, prepartition J) (πi' : box ι → ∀ J : box ι, prepartition J) :\n    (π.bUnion fun J => (πi J).bUnion (πi' J)) = (π.bUnion πi).bUnion fun J => πi' (π.bUnion_index πi J) J :=\n  by\n  ext J\n  simp only [mem_bUnion, exists_prop]\n  fconstructor\n  · rintro ⟨J₁, hJ₁, J₂, hJ₂, hJ⟩\n    refine' ⟨J₂, ⟨J₁, hJ₁, hJ₂⟩, _⟩\n    rwa [π.bUnion_index_of_mem hJ₁ hJ₂]\n  · rintro ⟨J₁, ⟨J₂, hJ₂, hJ₁⟩, hJ⟩\n    refine' ⟨J₂, hJ₂, J₁, hJ₁, _⟩\n    rwa [π.bUnion_index_of_mem hJ₂ hJ₁] at hJ\n#align bUnion_assoc bUnion_assoc\n\n",
 "bUnion":
 "protected theorem bUnion (h : is_partition π) (hi : ∀ J ∈ π, is_partition (πi J)) : is_partition (π.bUnion πi) :=\n  fun x hx =>\n  let ⟨J, hJ, hxi⟩ := h x hx\n  let ⟨Ji, hJi, hx⟩ := hi J hJ x hxi\n  ⟨Ji, π.mem_bUnion.2 ⟨J, hJ, hJi⟩, hx⟩\n#align bUnion bUnion\n\n",
 "Union_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem Union_top : («expr⊤» : prepartition I).Union = I := by simp [prepartition.Union]\n#align Union_top Union_top\n\n",
 "Union_subset":
 "theorem Union_subset (h : π.is_partition) (π₁ : prepartition I) : π₁.Union ⊆ π.Union :=\n  h.Union_eq.symm ▸ π₁.Union_subset\n#align Union_subset Union_subset\n\n",
 "Union_single":
 "@[simp]\ntheorem Union_single (h : J ≤ I) : (single I J h).Union = J := by simp [Union_def]\n#align Union_single Union_single\n\n",
 "Union_restrict":
 "@[simp]\ntheorem Union_restrict : (π.restrict J).Union = J ∩ π.Union := by simp [restrict, ← inter_Union, ← Union_def]\n#align Union_restrict Union_restrict\n\n",
 "Union_of_with_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem Union_of_with_bot (boxes : Finset (WithBot (box ι))) (le_of_mem : ∀ J ∈ boxes, (J : WithBot (box ι)) ≤ I)\n    (pairwise_disjoint : Set.Pairwise (boxes : set (WithBot (box ι))) Disjoint) :\n    (of_with_bot boxes le_of_mem pairwise_disjoint).Union =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑J :=\n  by\n  suffices\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑J =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑J\n    by simpa [of_with_bot, prepartition.Union]\n  simp only [← box.bUnion_coe_eq_coe, @Union_comm _ _ (box ι), @Union_comm _ _ (@eq _ _ _), Union_Union_eq_right]\n#align Union_of_with_bot Union_of_with_bot\n\n",
 "Union_mono":
 "@[mono]\ntheorem Union_mono (h : π₁ ≤ π₂) : π₁.Union ⊆ π₂.Union := fun x hx =>\n  let ⟨J₁, hJ₁, hx⟩ := π₁.mem_Union.1 hx\n  let ⟨J₂, hJ₂, hle⟩ := h hJ₁\n  π₂.mem_Union.2 ⟨J₂, hJ₂, hle hx⟩\n#align Union_mono Union_mono\n\n",
 "Union_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem Union_inf (π₁ π₂ : prepartition I) : («expr ⊓ » π₁ π₂).Union = π₁.Union ∩ π₂.Union := by\n  simp only [inf_def, Union_bUnion, Union_restrict, ← Union_inter, ← Union_def]\n#align Union_inf Union_inf\n\n",
 "Union_filter_not":
 "@[simp]\ntheorem Union_filter_not (π : prepartition I) (p : box ι → Prop) :\n    (π.filter fun J => ¬p J).Union = π.Union \\ (π.filter p).Union :=\n  by\n  simp only [prepartition.Union]\n  convert (@Set.bunionᵢ_diff_bunionᵢ_eq _ (box ι) π.boxes (π.filter p).boxes coe _).symm\n  · ext (J x)\n    simp (config := { contextual := true })\n  · convert π.pairwise_disjoint\n    simp\n#align Union_filter_not Union_filter_not\n\n",
 "Union_eq_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem Union_eq_empty : π₁.Union = ∅ ↔ π₁ = «expr⊥» := by\n  simp [← injective_boxes.eq_iff, Finset.ext_iff, prepartition.Union, imp_false]\n#align Union_eq_empty Union_eq_empty\n\n",
 "Union_eq":
 "theorem Union_eq (h : π.is_partition) : π.Union = I :=\n  is_partition_iff_Union_eq.1 h\n#align Union_eq Union_eq\n\n",
 "Union_disj_union":
 "@[simp]\ntheorem Union_disj_union (h : Disjoint π₁.Union π₂.Union) : (π₁.disj_union π₂ h).Union = π₁.Union ∪ π₂.Union := by\n  simp [disj_union, prepartition.Union, Union_or, Union_union_distrib]\n#align Union_disj_union Union_disj_union\n\n",
 "Union_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_def' :\n    π.Union = «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑J :=\n  rfl\n#align Union_def' Union_def'\n\n",
 "Union_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_def :\n    π.Union = «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑J :=\n  rfl\n#align Union_def Union_def\n\n",
 "Union_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem Union_bot : («expr⊥» : prepartition I).Union = ∅ :=\n  Union_eq_empty.2 rfl\n#align Union_bot Union_bot\n\n",
 "Union_bUnion_partition":
 "theorem Union_bUnion_partition (h : ∀ J ∈ π, (πi J).is_partition) : (π.bUnion πi).Union = π.Union :=\n  (Union_bUnion _ _).trans <|\n    unionᵢ_congr_of_surjective id surjective_id fun J =>\n      unionᵢ_congr_of_surjective id surjective_id fun hJ => (h J hJ).Union_eq\n#align Union_bUnion_partition Union_bUnion_partition\n\n",
 "Union_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem Union_bUnion (πi : ∀ J : box ι, prepartition J) :\n    (π.bUnion πi).Union =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (πi J).Union :=\n  by simp [prepartition.Union]\n#align Union_bUnion Union_bUnion\n\n"}