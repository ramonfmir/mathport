{"tag_bUnion_tagged":
 "theorem tag_bUnion_tagged (π : prepartition I) {πi : ∀ J, tagged_prepartition J} (hJ : J ∈ π) {J'} (hJ' : J' ∈ πi J) :\n    (π.bUnion_tagged πi).tag J' = (πi J).tag J' :=\n  by\n  have : J' ∈ π.bUnion_tagged πi := π.mem_bUnion.2 ⟨J, hJ, hJ'⟩\n  obtain rfl := π.bUnion_index_of_mem hJ hJ'\n  rfl\n#align tag_bUnion_tagged tag_bUnion_tagged\n\n",
 "subset_Union":
 "theorem subset_Union (h : J ∈ π) : ↑J ⊆ π.Union :=\n  subset_bunionᵢ_of_mem h\n#align subset_Union subset_Union\n\n",
 "mono'":
 "theorem is_subordinate.mono' [fintype ι] {π : tagged_prepartition I} (hr₁ : π.is_subordinate r₁)\n    (h : ∀ J ∈ π, r₁ (π.tag J) ≤ r₂ (π.tag J)) : π.is_subordinate r₂ := fun J hJ x hx =>\n  closed_ball_subset_closed_ball (h _ hJ) (hr₁ _ hJ hx)\n#align is_subordinate.mono' is_subordinate.mono'\n\n",
 "mono":
 "theorem is_subordinate.mono [fintype ι] {π : tagged_prepartition I} (hr₁ : π.is_subordinate r₁)\n    (h : ∀ x ∈ I.Icc, r₁ x ≤ r₂ x) : π.is_subordinate r₂ :=\n  hr₁.mono' fun J _ => h _ <| π.tag_mem_Icc J\n#align is_subordinate.mono is_subordinate.mono\n\n",
 "mem_to_prepartition":
 "/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n@[simp]\ntheorem mem_to_prepartition {π : tagged_prepartition I} : J ∈ π.to_prepartition ↔ J ∈ π :=\n  iff.rfl\n#align mem_to_prepartition mem_to_prepartition\n\n",
 "mem_single":
 "@[simp]\ntheorem mem_single {J'} (hJ : J ≤ I) (h : x ∈ I.Icc) : J' ∈ single I J hJ x h ↔ J' = J :=\n  Finset.mem_singleton\n#align mem_single mem_single\n\n",
 "mem_mk":
 "@[simp]\ntheorem mem_mk (π : prepartition I) (f h) : J ∈ mk π f h ↔ J ∈ π :=\n  iff.rfl\n#align mem_mk mem_mk\n\n",
 "mem_inf_prepartition_comm":
 "theorem mem_inf_prepartition_comm :\n    J ∈ π₁.inf_prepartition π₂.to_prepartition ↔ J ∈ π₂.inf_prepartition π₁.to_prepartition := by\n  simp only [← mem_to_prepartition, inf_prepartition_to_prepartition, inf_comm]\n#align mem_inf_prepartition_comm mem_inf_prepartition_comm\n\n",
 "mem_filter":
 "@[simp]\ntheorem mem_filter {p : box ι → Prop} : J ∈ π.filter p ↔ J ∈ π ∧ p J :=\n  Finset.mem_filter\n#align mem_filter mem_filter\n\n",
 "mem_disj_union":
 "@[simp]\ntheorem mem_disj_union (h : Disjoint π₁.Union π₂.Union) : J ∈ π₁.disj_union π₂ h ↔ J ∈ π₁ ∨ J ∈ π₂ :=\n  Finset.mem_union\n#align mem_disj_union mem_disj_union\n\n",
 "mem_bUnion_tagged":
 "@[simp]\ntheorem mem_bUnion_tagged (π : prepartition I) {πi : ∀ J, tagged_prepartition J} :\n    J ∈ π.bUnion_tagged πi ↔ ∃ J' ∈ π, J ∈ πi J' :=\n  π.mem_bUnion\n#align mem_bUnion_tagged mem_bUnion_tagged\n\n",
 "mem_Union":
 "@[simp]\ntheorem mem_Union : x ∈ π.Union ↔ ∃ J ∈ π, x ∈ J :=\n  Set.mem_unionᵢ₂\n#align mem_Union mem_Union\n\n",
 "is_subordinate_single":
 "@[simp]\ntheorem is_subordinate_single [fintype ι] (hJ : J ≤ I) (h : x ∈ I.Icc) :\n    is_subordinate (single I J hJ x h) r ↔ J.Icc ⊆ closed_ball x (r x) :=\n  forall_mem_single (fun x J => J.Icc ⊆ closed_ball x (r x)) hJ h\n#align is_subordinate_single is_subordinate_single\n\n",
 "is_subordinate_bUnion_tagged":
 "@[simp]\ntheorem is_subordinate_bUnion_tagged [fintype ι] {π : prepartition I} {πi : ∀ J, tagged_prepartition J} :\n    is_subordinate (π.bUnion_tagged πi) r ↔ ∀ J ∈ π, (πi J).is_subordinate r :=\n  π.forall_bUnion_tagged (fun x J => J.Icc ⊆ closed_ball x (r x)) πi\n#align is_subordinate_bUnion_tagged is_subordinate_bUnion_tagged\n\n",
 "is_partition_single_iff":
 "theorem is_partition_single_iff (hJ : J ≤ I) (h : x ∈ I.Icc) : (single I J hJ x h).is_partition ↔ J = I :=\n  prepartition.is_partition_single_iff hJ\n#align is_partition_single_iff is_partition_single_iff\n\n",
 "is_partition_single":
 "theorem is_partition_single (h : x ∈ I.Icc) : (single I I le_rfl x h).is_partition :=\n  prepartition.is_partition_top I\n#align is_partition_single is_partition_single\n\n",
 "is_partition_iff_Union_eq":
 "theorem is_partition_iff_Union_eq : is_partition π ↔ π.Union = I :=\n  prepartition.is_partition_iff_Union_eq\n#align is_partition_iff_Union_eq is_partition_iff_Union_eq\n\n",
 "is_Henstock_single_iff":
 "@[simp]\ntheorem is_Henstock_single_iff (hJ : J ≤ I) (h : x ∈ I.Icc) : is_Henstock (single I J hJ x h) ↔ x ∈ J.Icc :=\n  forall_mem_single (fun x J => x ∈ J.Icc) hJ h\n#align is_Henstock_single_iff is_Henstock_single_iff\n\n",
 "is_Henstock_single":
 "@[simp]\ntheorem is_Henstock_single (h : x ∈ I.Icc) : is_Henstock (single I I le_rfl x h) :=\n  (is_Henstock_single_iff (le_refl I) h).2 h\n#align is_Henstock_single is_Henstock_single\n\n",
 "is_Henstock_bUnion_tagged":
 "@[simp]\ntheorem is_Henstock_bUnion_tagged {π : prepartition I} {πi : ∀ J, tagged_prepartition J} :\n    is_Henstock (π.bUnion_tagged πi) ↔ ∀ J ∈ π, (πi J).is_Henstock :=\n  π.forall_bUnion_tagged (fun x J => x ∈ J.Icc) πi\n#align is_Henstock_bUnion_tagged is_Henstock_bUnion_tagged\n\n",
 "inf_prepartition_to_prepartition":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_prepartition_to_prepartition (π : tagged_prepartition I) (π' : prepartition I) :\n    (π.inf_prepartition π').to_prepartition = «expr ⊓ » π.to_prepartition π' :=\n  rfl\n#align inf_prepartition_to_prepartition inf_prepartition_to_prepartition\n\n",
 "inf_prepartition":
 "theorem is_subordinate.inf_prepartition [fintype ι] (h : is_subordinate π r) (π' : prepartition I) :\n    is_subordinate (π.inf_prepartition π') r :=\n  h.bUnion_prepartition _\n#align is_subordinate.inf_prepartition is_subordinate.inf_prepartition\n\n",
 "forall_mem_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem forall_mem_single (p : (ι → exprℝ) → box ι → Prop) (hJ : J ≤ I) (h : x ∈ I.Icc) :\n    (∀ J' ∈ single I J hJ x h, p ((single I J hJ x h).tag J') J') ↔ p x J := by simp\n#align forall_mem_single forall_mem_single\n\n",
 "forall_bUnion_tagged":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem forall_bUnion_tagged (p : (ι → exprℝ) → box ι → Prop) (π : prepartition I) (πi : ∀ J, tagged_prepartition J) :\n    (∀ J ∈ π.bUnion_tagged πi, p ((π.bUnion_tagged πi).tag J) J) ↔ ∀ J ∈ π, ∀ J' ∈ πi J, p ((πi J).tag J') J' :=\n  by\n  simp only [bex_imp, mem_bUnion_tagged]\n  refine' ⟨fun H J hJ J' hJ' => _, fun H J' J hJ hJ' => _⟩\n  · rw [← π.tag_bUnion_tagged hJ hJ']\n    exact H J' J hJ hJ'\n  · rw [π.tag_bUnion_tagged hJ hJ']\n    exact H J hJ J' hJ'\n#align forall_bUnion_tagged forall_bUnion_tagged\n\n",
 "distortion_single":
 "@[simp]\ntheorem distortion_single (hJ : J ≤ I) (h : x ∈ I.Icc) : distortion (single I J hJ x h) = J.distortion :=\n  sup_singleton\n#align distortion_single distortion_single\n\n",
 "distortion_of_const":
 "theorem distortion_of_const {c} (h₁ : π.boxes.nonempty) (h₂ : ∀ J ∈ π, box.distortion J = c) : π.distortion = c :=\n  (sup_congr rfl h₂).trans (sup_const h₁ _)\n#align distortion_of_const distortion_of_const\n\n",
 "distortion_le_of_mem":
 "theorem distortion_le_of_mem (h : J ∈ π) : J.distortion ≤ π.distortion :=\n  le_sup h\n#align distortion_le_of_mem distortion_le_of_mem\n\n",
 "distortion_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem distortion_le_iff {c : nnreal} : π.distortion ≤ c ↔ ∀ J ∈ π, box.distortion J ≤ c :=\n  finset.sup_le_iff\n#align distortion_le_iff distortion_le_iff\n\n",
 "distortion_filter_le":
 "theorem distortion_filter_le (p : box ι → Prop) : (π.filter p).distortion ≤ π.distortion :=\n  sup_mono (filter_subset _ _)\n#align distortion_filter_le distortion_filter_le\n\n",
 "distortion_disj_union":
 "@[simp]\ntheorem distortion_disj_union (h : Disjoint π₁.Union π₂.Union) :\n    (π₁.disj_union π₂ h).distortion = max π₁.distortion π₂.distortion :=\n  sup_union\n#align distortion_disj_union distortion_disj_union\n\n",
 "distortion_bUnion_tagged":
 "@[simp]\ntheorem _root_.box_integral.prepartition.distortion_bUnion_tagged (π : prepartition I)\n    (πi : ∀ J, tagged_prepartition J) : (π.bUnion_tagged πi).distortion = π.boxes.sup fun J => (πi J).distortion :=\n  sup_bUnion _ _\n#align box_integral.prepartition.distortion_bUnion_tagged box_integral.prepartition.distortion_bUnion_tagged\n\n",
 "distortion_bUnion_prepartition":
 "@[simp]\ntheorem distortion_bUnion_prepartition (π : tagged_prepartition I) (πi : ∀ J, prepartition J) :\n    (π.bUnion_prepartition πi).distortion = π.boxes.sup fun J => (πi J).distortion :=\n  sup_bUnion _ _\n#align distortion_bUnion_prepartition distortion_bUnion_prepartition\n\n",
 "disj_union_tag_of_mem_right":
 "theorem disj_union_tag_of_mem_right (h : Disjoint π₁.Union π₂.Union) (hJ : J ∈ π₂) :\n    (π₁.disj_union π₂ h).tag J = π₂.tag J :=\n  dif_neg fun h₁ => h.le_bot ⟨π₁.subset_Union h₁ J.upper_mem, π₂.subset_Union hJ J.upper_mem⟩\n#align disj_union_tag_of_mem_right disj_union_tag_of_mem_right\n\n",
 "disj_union_tag_of_mem_left":
 "theorem disj_union_tag_of_mem_left (h : Disjoint π₁.Union π₂.Union) (hJ : J ∈ π₁) :\n    (π₁.disj_union π₂ h).tag J = π₁.tag J :=\n  dif_pos hJ\n#align disj_union_tag_of_mem_left disj_union_tag_of_mem_left\n\n",
 "disj_union_boxes":
 "@[simp]\ntheorem disj_union_boxes (h : Disjoint π₁.Union π₂.Union) : (π₁.disj_union π₂ h).boxes = π₁.boxes ∪ π₂.boxes :=\n  rfl\n#align disj_union_boxes disj_union_boxes\n\n",
 "disj_union":
 "theorem is_Henstock.disj_union (h₁ : is_Henstock π₁) (h₂ : is_Henstock π₂) (h : Disjoint π₁.Union π₂.Union) :\n    is_Henstock (π₁.disj_union π₂ h) :=\n  by\n  refine' fun J hJ => (Finset.mem_union.1 hJ).elim (fun hJ => _) fun hJ => _\n  · rw [disj_union_tag_of_mem_left _ hJ]\n    exact h₁ _ hJ\n  · rw [disj_union_tag_of_mem_right _ hJ]\n    exact h₂ _ hJ\n#align is_Henstock.disj_union is_Henstock.disj_union\n\n",
 "diam_le":
 "theorem is_subordinate.diam_le [fintype ι] {π : tagged_prepartition I} (h : π.is_subordinate r) (hJ : J ∈ π.boxes) :\n    diam J.Icc ≤ 2 * r (π.tag J) :=\n  calc\n    diam J.Icc ≤ diam (closed_ball (π.tag J) (r <| π.tag J)) := diam_mono (h J hJ) bounded_closed_ball\n    _ ≤ 2 * r (π.tag J) := diam_closed_ball (le_of_lt (r _).2)\n    \n#align is_subordinate.diam_le is_subordinate.diam_le\n\n",
 "card_filter_tag_eq_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- In a Henstock prepartition, there are at most `2 ^ fintype.card ι` boxes with a given tag. -/\ntheorem is_Henstock.card_filter_tag_eq_le [fintype ι] (h : π.is_Henstock) (x : ι → exprℝ) :\n    (π.boxes.filter fun J => π.tag J = x).card ≤ 2 ^ fintype.card ι :=\n  calc\n    (π.boxes.filter fun J => π.tag J = x).card ≤ (π.boxes.filter fun J : box ι => x ∈ J.Icc).card :=\n      by\n      refine' finset.card_le_of_subset fun J hJ => _\n      rw [Finset.mem_filter] at hJ⊢; rcases hJ with ⟨hJ, rfl⟩\n      exact ⟨hJ, h J hJ⟩\n    _ ≤ 2 ^ fintype.card ι := π.to_prepartition.card_filter_mem_Icc_le x\n    \n#align is_Henstock.card_filter_tag_eq_le is_Henstock.card_filter_tag_eq_le\n\n",
 "bUnion_tagged":
 "theorem is_partition.bUnion_tagged {π : prepartition I} (h : is_partition π) {πi : ∀ J, tagged_prepartition J}\n    (hi : ∀ J ∈ π, (πi J).is_partition) : (π.bUnion_tagged πi).is_partition :=\n  h.bUnion hi\n#align is_partition.bUnion_tagged is_partition.bUnion_tagged\n\n",
 "bUnion_prepartition":
 "theorem is_subordinate.bUnion_prepartition [fintype ι] (h : is_subordinate π r) (πi : ∀ J, prepartition J) :\n    is_subordinate (π.bUnion_prepartition πi) r := fun J hJ =>\n  Subset.trans (box.le_iff_Icc.1 <| π.to_prepartition.le_bUnion_index hJ) <|\n    h _ <| π.to_prepartition.bUnion_index_mem hJ\n#align is_subordinate.bUnion_prepartition is_subordinate.bUnion_prepartition\n\n",
 "Union_to_prepartition":
 "@[simp]\ntheorem Union_to_prepartition : π.to_prepartition.Union = π.Union :=\n  rfl\n#align Union_to_prepartition Union_to_prepartition\n\n",
 "Union_subset":
 "theorem Union_subset : π.Union ⊆ I :=\n  unionᵢ₂_subset π.le_of_mem'\n#align Union_subset Union_subset\n\n",
 "Union_single":
 "@[simp]\ntheorem Union_single (hJ : J ≤ I) (h : x ∈ I.Icc) : (single I J hJ x h).Union = J :=\n  prepartition.Union_single hJ\n#align Union_single Union_single\n\n",
 "Union_mk":
 "@[simp]\ntheorem Union_mk (π : prepartition I) (f h) : (mk π f h).Union = π.Union :=\n  rfl\n#align Union_mk Union_mk\n\n",
 "Union_filter_not":
 "@[simp]\ntheorem Union_filter_not (π : tagged_prepartition I) (p : box ι → Prop) :\n    (π.filter fun J => ¬p J).Union = π.Union \\ (π.filter p).Union :=\n  π.to_prepartition.Union_filter_not p\n#align Union_filter_not Union_filter_not\n\n",
 "Union_disj_union":
 "@[simp]\ntheorem Union_disj_union (h : Disjoint π₁.Union π₂.Union) : (π₁.disj_union π₂ h).Union = π₁.Union ∪ π₂.Union :=\n  prepartition.Union_disj_union _\n#align Union_disj_union Union_disj_union\n\n",
 "Union_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_def :\n    π.Union = «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑J :=\n  rfl\n#align Union_def Union_def\n\n",
 "Union_bUnion_tagged":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem Union_bUnion_tagged (π : prepartition I) (πi : ∀ J, tagged_prepartition J) :\n    (π.bUnion_tagged πi).Union =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (πi J).Union :=\n  Union_bUnion _ _\n#align Union_bUnion_tagged Union_bUnion_tagged\n\n"}