{"span_gram_schmidt_normed_range":
 "theorem span_gram_schmidt_normed_range (f : ι → E) :\n    span 𝕜 (range (gram_schmidt_normed 𝕜 f)) = span 𝕜 (range (gram_schmidt 𝕜 f)) := by\n  simpa only [image_univ.symm] using span_gram_schmidt_normed f univ\n#align span_gram_schmidt_normed_range span_gram_schmidt_normed_range\n\n",
 "span_gram_schmidt_normed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem span_gram_schmidt_normed (f : ι → E) (s : Set ι) :\n    span 𝕜 («expr '' » (gram_schmidt_normed 𝕜 f) s) = span 𝕜 («expr '' » (gram_schmidt 𝕜 f) s) :=\n  by\n  refine'\n    span_eq_span (Set.image_subset_iff.2 fun i hi => smul_mem _ _ <| subset_span <| mem_image_of_mem _ hi)\n      (Set.image_subset_iff.2 fun i hi => span_mono (image_subset _ <| singleton_subset_set_iff.2 hi) _)\n  simp only [coe_singleton, Set.image_singleton]\n  by_cases h : gram_schmidt 𝕜 f i = 0\n  · simp [h]\n  · refine' mem_span_singleton.2 ⟨«expr‖ ‖» (gram_schmidt 𝕜 f i), smul_inv_smul₀ _ _⟩\n    exact_mod_cast norm_ne_zero_iff.2 h\n#align span_gram_schmidt_normed span_gram_schmidt_normed\n\n",
 "span_gram_schmidt_Iio":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem span_gram_schmidt_Iio (f : ι → E) (c : ι) :\n    span 𝕜 («expr '' » (gram_schmidt 𝕜 f) (Iio c)) = span 𝕜 («expr '' » f (Iio c)) :=\n  span_eq_span\n      (Set.image_subset_iff.2 fun i hi =>\n        span_mono (image_subset _ <| Iic_subset_Iio.2 hi) <| gram_schmidt_mem_span _ _ le_rfl) <|\n    Set.image_subset_iff.2 fun i hi =>\n      span_mono (image_subset _ <| Iic_subset_Iio.2 hi) <| mem_span_gram_schmidt _ _ le_rfl\n#align span_gram_schmidt_Iio span_gram_schmidt_Iio\n\n",
 "span_gram_schmidt_Iic":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem span_gram_schmidt_Iic (f : ι → E) (c : ι) :\n    span 𝕜 («expr '' » (gram_schmidt 𝕜 f) (Iic c)) = span 𝕜 («expr '' » f (Iic c)) :=\n  span_eq_span (Set.image_subset_iff.2 fun i => gram_schmidt_mem_span _ _) <|\n    Set.image_subset_iff.2 fun i => mem_span_gram_schmidt _ _\n#align span_gram_schmidt_Iic span_gram_schmidt_Iic\n\n",
 "span_gram_schmidt":
 "/-- `gram_schmidt` preserves span of vectors. -/\ntheorem span_gram_schmidt (f : ι → E) : span 𝕜 (range (gram_schmidt 𝕜 f)) = span 𝕜 (range f) :=\n  span_eq_span (range_subset_iff.2 fun i => span_mono (image_subset_range _ _) <| gram_schmidt_mem_span _ _ le_rfl) <|\n    range_subset_iff.2 fun i => span_mono (image_subset_range _ _) <| mem_span_gram_schmidt _ _ le_rfl\n#align span_gram_schmidt span_gram_schmidt\n\n",
 "mem_span_gram_schmidt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem mem_span_gram_schmidt (f : ι → E) {i j : ι} (hij : i ≤ j) :\n    f i ∈ span 𝕜 («expr '' » (gram_schmidt 𝕜 f) (Iic j)) :=\n  by\n  rw [gram_schmidt_def' 𝕜 f i]\n  simp_rw [orthogonal_projection_singleton]\n  exact\n    Submodule.add_mem _ (subset_span <| mem_image_of_mem _ hij)\n      (Submodule.sum_mem _ fun k hk =>\n        smul_mem (span 𝕜 («expr '' » (gram_schmidt 𝕜 f) (Iic j))) _ <|\n          subset_span <| mem_image_of_mem (gram_schmidt 𝕜 f) <| (Finset.mem_Iio.1 hk).le.trans hij)\n#align mem_span_gram_schmidt mem_span_gram_schmidt\n\n",
 "inner_gram_schmidt_orthonormal_basis_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem inner_gram_schmidt_orthonormal_basis_eq_zero {f : ι → E} {i : ι} (hi : gram_schmidt_normed 𝕜 f i = 0) (j : ι) :\n    «expr⟪ , ⟫» (gram_schmidt_orthonormal_basis h f i) (f j) = 0 :=\n  by\n  rw [← mem_orthogonal_singleton_iff_inner_right]\n  suffices\n    «expr ⟂ » (span 𝕜 («expr '' » (gram_schmidt_normed 𝕜 f) (Iic j)))\n      («expr ∙ » 𝕜 (gram_schmidt_orthonormal_basis h f i))\n    by\n    apply this\n    rw [span_gram_schmidt_normed]\n    exact mem_span_gram_schmidt 𝕜 f le_rfl\n  rw [is_ortho_span]\n  rintro u ⟨k, hk, rfl⟩ v (rfl : v = _)\n  by_cases hk : gram_schmidt_normed 𝕜 f k = 0\n  · rw [hk, inner_zero_left]\n  rw [← gram_schmidt_orthonormal_basis_apply h hk]\n  have : k ≠ i := by\n    rintro rfl\n    exact hk hi\n  exact (gram_schmidt_orthonormal_basis h f).orthonormal.2 this\n#align inner_gram_schmidt_orthonormal_basis_eq_zero inner_gram_schmidt_orthonormal_basis_eq_zero\n\n",
 "gram_schmidt_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem gram_schmidt_zero {ι : Type _} [linear_order ι] [LocallyFiniteOrder ι] [OrderBot ι] [IsWellOrder ι (· < ·)]\n    (f : ι → E) : gram_schmidt 𝕜 f («expr⊥») = f («expr⊥») := by\n  rw [gram_schmidt_def, Iio_eq_Ico, Finset.Ico_self, Finset.sum_empty, sub_zero]\n#align gram_schmidt_zero gram_schmidt_zero\n\n",
 "gram_schmidt_triangular":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- `gram_schmidt` produces a triangular matrix of vectors when given a basis. -/\ntheorem gram_schmidt_triangular {i j : ι} (hij : i < j) (b : Basis ι 𝕜 E) : b.repr (gram_schmidt 𝕜 b i) j = 0 :=\n  by\n  have : gram_schmidt 𝕜 b i ∈ span 𝕜 («expr '' » (gram_schmidt 𝕜 b) (Set.Iio j)) :=\n    subset_span ((Set.mem_image _ _ _).2 ⟨i, hij, rfl⟩)\n  have : gram_schmidt 𝕜 b i ∈ span 𝕜 («expr '' » b (Set.Iio j)) := by rwa [← span_gram_schmidt_Iio 𝕜 b j]\n  have : ↑(b.repr (gram_schmidt 𝕜 b i)).support ⊆ Set.Iio j := Basis.repr_support_subset_of_mem_span b (Set.Iio j) this\n  exact (Finsupp.mem_supported' _ _).1 ((Finsupp.mem_supported 𝕜 _).2 this) j Set.not_mem_Iio_self\n#align gram_schmidt_triangular gram_schmidt_triangular\n\n",
 "gram_schmidt_pairwise_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- This is another version of `gram_schmidt_orthogonal` using `pairwise` instead. -/\ntheorem gram_schmidt_pairwise_orthogonal (f : ι → E) :\n    Pairwise fun a b => «expr⟪ , ⟫» (gram_schmidt 𝕜 f a) (gram_schmidt 𝕜 f b) = 0 := fun a b =>\n  gram_schmidt_orthogonal 𝕜 f\n#align gram_schmidt_pairwise_orthogonal gram_schmidt_pairwise_orthogonal\n\n",
 "gram_schmidt_orthonormal_basis_inv_triangular'":
 "theorem gram_schmidt_orthonormal_basis_inv_triangular' {i j : ι} (hij : i < j) :\n    (gram_schmidt_orthonormal_basis h f).repr (f i) j = 0 := by\n  simpa [orthonormal_basis.repr_apply_apply] using gram_schmidt_orthonormal_basis_inv_triangular h f hij\n#align gram_schmidt_orthonormal_basis_inv_triangular' gram_schmidt_orthonormal_basis_inv_triangular'\n\n",
 "gram_schmidt_orthonormal_basis_inv_triangular":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem gram_schmidt_orthonormal_basis_inv_triangular {i j : ι} (hij : i < j) :\n    «expr⟪ , ⟫» (gram_schmidt_orthonormal_basis h f j) (f i) = 0 :=\n  by\n  by_cases hi : gram_schmidt_normed 𝕜 f j = 0\n  · rw [inner_gram_schmidt_orthonormal_basis_eq_zero h hi]\n  ·\n    simp [gram_schmidt_orthonormal_basis_apply h hi, gram_schmidt_normed, inner_smul_left,\n      gram_schmidt_inv_triangular 𝕜 f hij]\n#align gram_schmidt_orthonormal_basis_inv_triangular gram_schmidt_orthonormal_basis_inv_triangular\n\n",
 "gram_schmidt_orthonormal_basis_inv_block_triangular":
 "/-- Given an indexed family `f : ι → E` of vectors in an inner product space `E`, for which the\nsize of the index set is the dimension of `E`, the matrix of coefficients of `f` with respect to the\northonormal basis `gram_schmidt_orthonormal_basis` constructed from `f` is upper-triangular. -/\ntheorem gram_schmidt_orthonormal_basis_inv_block_triangular :\n    ((gram_schmidt_orthonormal_basis h f).to_basis.to_matrix f).block_triangular id := fun i j =>\n  gram_schmidt_orthonormal_basis_inv_triangular' h f\n#align gram_schmidt_orthonormal_basis_inv_block_triangular gram_schmidt_orthonormal_basis_inv_block_triangular\n\n",
 "gram_schmidt_orthonormal_basis_det":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem gram_schmidt_orthonormal_basis_det :\n    (gram_schmidt_orthonormal_basis h f).to_basis.det f =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        («expr⟪ , ⟫» (gram_schmidt_orthonormal_basis h f i) (f i)) :=\n  by\n  convert Matrix.det_of_upperTriangular (gram_schmidt_orthonormal_basis_inv_block_triangular h f)\n  ext i\n  exact ((gram_schmidt_orthonormal_basis h f).repr_apply_apply (f i) i).symm\n#align gram_schmidt_orthonormal_basis_det gram_schmidt_orthonormal_basis_det\n\n",
 "gram_schmidt_orthonormal_basis_apply_of_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem gram_schmidt_orthonormal_basis_apply_of_orthogonal {f : ι → E}\n    (hf : Pairwise fun i j => «expr⟪ , ⟫» (f i) (f j) = 0) {i : ι} (hi : f i ≠ 0) :\n    gram_schmidt_orthonormal_basis h f i = «expr • » ((«expr‖ ‖» (f i))⁻¹ : 𝕜) (f i) :=\n  by\n  have H : gram_schmidt_normed 𝕜 f i = «expr • » ((«expr‖ ‖» (f i))⁻¹ : 𝕜) (f i) := by\n    rw [gram_schmidt_normed, gram_schmidt_of_orthogonal 𝕜 hf]\n  rw [gram_schmidt_orthonormal_basis_apply h, H]\n  simpa [H] using hi\n#align gram_schmidt_orthonormal_basis_apply_of_orthogonal gram_schmidt_orthonormal_basis_apply_of_orthogonal\n\n",
 "gram_schmidt_orthonormal_basis_apply":
 "theorem gram_schmidt_orthonormal_basis_apply {f : ι → E} {i : ι} (hi : gram_schmidt_normed 𝕜 f i ≠ 0) :\n    gram_schmidt_orthonormal_basis h f i = gram_schmidt_normed 𝕜 f i :=\n  ((gram_schmidt_orthonormal' f).exists_orthonormal_basis_extension_of_card_eq h).some_spec i hi\n#align gram_schmidt_orthonormal_basis_apply gram_schmidt_orthonormal_basis_apply\n\n",
 "gram_schmidt_orthonormal'":
 "/-- **Gram-Schmidt Orthonormalization**:\n`gram_schmidt_normed` produces an orthornormal system of vectors after removing the vectors which\nbecome zero in the process. -/\ntheorem gram_schmidt_orthonormal' (f : ι → E) :\n    orthonormal 𝕜 fun i : { i | gram_schmidt_normed 𝕜 f i ≠ 0 } => gram_schmidt_normed 𝕜 f i :=\n  by\n  refine' ⟨fun i => gram_schmidt_normed_unit_length' i.prop, _⟩\n  rintro i j (hij : ¬_)\n  rw [Subtype.ext_iff] at hij\n  simp [gram_schmidt_normed, inner_smul_left, inner_smul_right, gram_schmidt_orthogonal 𝕜 f hij]\n#align gram_schmidt_orthonormal' gram_schmidt_orthonormal'\n\n",
 "gram_schmidt_orthonormal":
 "/-- **Gram-Schmidt Orthonormalization**:\n`gram_schmidt_normed` applied to a linearly independent set of vectors produces an orthornormal\nsystem of vectors. -/\ntheorem gram_schmidt_orthonormal {f : ι → E} (h₀ : LinearIndependent 𝕜 f) : orthonormal 𝕜 (gram_schmidt_normed 𝕜 f) :=\n  by\n  unfold orthonormal\n  constructor\n  · simp only [gram_schmidt_normed_unit_length, h₀, eq_self_iff_true, imp_true_iff]\n  · intro i j hij\n    simp only [gram_schmidt_normed, inner_smul_left, inner_smul_right, IsROrC.conj_inv, IsROrC.conj_ofReal, mul_eq_zero,\n      inv_eq_zero, IsROrC.ofReal_eq_zero, norm_eq_zero]\n    repeat' right\n    exact gram_schmidt_orthogonal 𝕜 f hij\n#align gram_schmidt_orthonormal gram_schmidt_orthonormal\n\n",
 "gram_schmidt_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- **Gram-Schmidt Orthogonalisation**:\n`gram_schmidt` produces an orthogonal system of vectors. -/\ntheorem gram_schmidt_orthogonal (f : ι → E) {a b : ι} (h₀ : a ≠ b) :\n    «expr⟪ , ⟫» (gram_schmidt 𝕜 f a) (gram_schmidt 𝕜 f b) = 0 :=\n  by\n  suffices ∀ a b : ι, a < b → «expr⟪ , ⟫» (gram_schmidt 𝕜 f a) (gram_schmidt 𝕜 f b) = 0\n    by\n    cases' h₀.lt_or_lt with ha hb\n    · exact this _ _ ha\n    · rw [inner_eq_zero_symm]\n      exact this _ _ hb\n  clear h₀ a b\n  intro a b h₀\n  revert a\n  apply well_founded.induction (@is_well_founded.wf ι (· < ·) _) b\n  intro b ih a h₀\n  simp only [gram_schmidt_def 𝕜 f b, inner_sub_right, inner_sum, orthogonal_projection_singleton, inner_smul_right]\n  rw [Finset.sum_eq_single_of_mem a (finset.mem_Iio.mpr h₀)]\n  · by_cases h : gram_schmidt 𝕜 f a = 0\n    · simp only [h, inner_zero_left, zero_div, MulZeroClass.zero_mul, sub_zero]\n    · rw [← inner_self_eq_norm_sq_to_K, div_mul_cancel, sub_self]\n      rwa [inner_self_ne_zero]\n  simp_intro i hi hia only [Finset.mem_range]\n  simp only [mul_eq_zero, div_eq_zero_iff, inner_self_eq_zero]\n  right\n  cases' hia.lt_or_lt with hia₁ hia₂\n  · rw [inner_eq_zero_symm]\n    exact ih a h₀ i hia₁\n  · exact ih i (mem_Iio.1 hi) a hia₂\n#align gram_schmidt_orthogonal gram_schmidt_orthogonal\n\n",
 "gram_schmidt_of_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem gram_schmidt_of_orthogonal {f : ι → E} (hf : Pairwise fun i j => «expr⟪ , ⟫» (f i) (f j) = 0) :\n    gram_schmidt 𝕜 f = f := by\n  ext i\n  rw [gram_schmidt_def]\n  trans f i - 0\n  · congr\n    apply Finset.sum_eq_zero\n    intro j hj\n    rw [coe_eq_zero]\n    suffices «expr ⟂ » (span 𝕜 («expr '' » f (Set.Iic j))) («expr ∙ » 𝕜 (f i))\n      by\n      apply orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero\n      rw [mem_orthogonal_singleton_iff_inner_left]\n      rw [← mem_orthogonal_singleton_iff_inner_right]\n      exact this (gram_schmidt_mem_span 𝕜 f (le_refl j))\n    rw [is_ortho_span]\n    rintro u ⟨k, hk, rfl⟩ v (rfl : v = f i)\n    apply hf\n    exact (lt_of_le_of_lt hk (finset.mem_Iio.mp hj)).ne\n  · simp\n#align gram_schmidt_of_orthogonal gram_schmidt_of_orthogonal\n\n",
 "gram_schmidt_normed_unit_length_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem gram_schmidt_normed_unit_length_coe {f : ι → E} (n : ι) (h₀ : LinearIndependent 𝕜 (f ∘ (coe : Set.Iic n → ι))) :\n    «expr‖ ‖» (gram_schmidt_normed 𝕜 f n) = 1 := by\n  simp only [gram_schmidt_ne_zero_coe n h₀, gram_schmidt_normed, norm_smul_inv_norm, ne.def, not_false_iff]\n#align gram_schmidt_normed_unit_length_coe gram_schmidt_normed_unit_length_coe\n\n",
 "gram_schmidt_normed_unit_length'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem gram_schmidt_normed_unit_length' {f : ι → E} {n : ι} (hn : gram_schmidt_normed 𝕜 f n ≠ 0) :\n    «expr‖ ‖» (gram_schmidt_normed 𝕜 f n) = 1 :=\n  by\n  rw [gram_schmidt_normed] at *\n  rw [norm_smul_inv_norm]\n  simpa using hn\n#align gram_schmidt_normed_unit_length' gram_schmidt_normed_unit_length'\n\n",
 "gram_schmidt_normed_unit_length":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem gram_schmidt_normed_unit_length {f : ι → E} (n : ι) (h₀ : LinearIndependent 𝕜 f) :\n    «expr‖ ‖» (gram_schmidt_normed 𝕜 f n) = 1 :=\n  gram_schmidt_normed_unit_length_coe _ (LinearIndependent.comp h₀ _ Subtype.coe_injective)\n#align gram_schmidt_normed_unit_length gram_schmidt_normed_unit_length\n\n",
 "gram_schmidt_ne_zero_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem gram_schmidt_ne_zero_coe {f : ι → E} (n : ι) (h₀ : LinearIndependent 𝕜 (f ∘ (coe : Set.Iic n → ι))) :\n    gram_schmidt 𝕜 f n ≠ 0 := by\n  by_contra h\n  have h₁ : f n ∈ span 𝕜 («expr '' » f (Iio n)) :=\n    by\n    rw [← span_gram_schmidt_Iio 𝕜 f n, gram_schmidt_def' _ f, h, zero_add]\n    apply Submodule.sum_mem _ _\n    simp_intro a ha only [Finset.mem_Ico]\n    simp only [Set.mem_image, Set.mem_Iio, orthogonal_projection_singleton]\n    apply Submodule.smul_mem _ _ _\n    rw [Finset.mem_Iio] at ha\n    refine' subset_span ⟨a, ha, by rfl⟩\n  have h₂ :\n    (f ∘ (coe : Set.Iic n → ι)) ⟨n, le_refl n⟩ ∈ span 𝕜 («expr '' » (f ∘ (coe : Set.Iic n → ι)) (Iio ⟨n, le_refl n⟩)) :=\n    by\n    rw [image_comp]\n    convert h₁ using 3\n    ext i\n    simpa using @le_of_lt _ _ i n\n  apply LinearIndependent.not_mem_span_image h₀ _ h₂\n  simp only [Set.mem_Iio, lt_self_iff_false, not_false_iff]\n#align gram_schmidt_ne_zero_coe gram_schmidt_ne_zero_coe\n\n",
 "gram_schmidt_ne_zero":
 "/-- If the input vectors of `gram_schmidt` are linearly independent,\nthen the output vectors are non-zero. -/\ntheorem gram_schmidt_ne_zero {f : ι → E} (n : ι) (h₀ : LinearIndependent 𝕜 f) : gram_schmidt 𝕜 f n ≠ 0 :=\n  gram_schmidt_ne_zero_coe _ (LinearIndependent.comp h₀ _ Subtype.coe_injective)\n#align gram_schmidt_ne_zero gram_schmidt_ne_zero\n\n",
 "gram_schmidt_mem_span":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem gram_schmidt_mem_span (f : ι → E) : ∀ {j i}, i ≤ j → gram_schmidt 𝕜 f i ∈ span 𝕜 («expr '' » f (Iic j))\n  | j => fun i hij => by\n    rw [gram_schmidt_def 𝕜 f i]\n    simp_rw [orthogonal_projection_singleton]\n    refine' Submodule.sub_mem _ (subset_span (mem_image_of_mem _ hij)) (Submodule.sum_mem _ fun k hk => _)\n    let hkj : k < j := (Finset.mem_Iio.1 hk).trans_le hij\n    exact smul_mem _ _ (span_mono (image_subset f <| Iic_subset_Iic.2 hkj.le) <| gram_schmidt_mem_span le_rfl)\n#align gram_schmidt_mem_span gram_schmidt_mem_span\n\n",
 "gram_schmidt_linear_independent":
 "/-- `gram_schmidt` produces linearly independent vectors when given linearly independent vectors. -/\ntheorem gram_schmidt_linear_independent {f : ι → E} (h₀ : LinearIndependent 𝕜 f) :\n    LinearIndependent 𝕜 (gram_schmidt 𝕜 f) :=\n  linear_independent_of_ne_zero_of_inner_eq_zero (fun i => gram_schmidt_ne_zero _ h₀) fun i j =>\n    gram_schmidt_orthogonal 𝕜 f\n#align gram_schmidt_linear_independent gram_schmidt_linear_independent\n\n",
 "gram_schmidt_inv_triangular":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem gram_schmidt_inv_triangular (v : ι → E) {i j : ι} (hij : i < j) : «expr⟪ , ⟫» (gram_schmidt 𝕜 v j) (v i) = 0 :=\n  by\n  rw [gram_schmidt_def'' 𝕜 v]\n  simp only [inner_add_right, inner_sum, inner_smul_right]\n  set b : ι → E := gram_schmidt 𝕜 v\n  convert zero_add (0 : 𝕜)\n  · exact gram_schmidt_orthogonal 𝕜 v hij.ne'\n  apply Finset.sum_eq_zero\n  rintro k hki'\n  have hki : k < i := by simpa using hki'\n  have : «expr⟪ , ⟫» (b j) (b k) = 0 := gram_schmidt_orthogonal 𝕜 v (hki.trans hij).ne'\n  simp [this]\n#align gram_schmidt_inv_triangular gram_schmidt_inv_triangular\n\n",
 "gram_schmidt_def''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem gram_schmidt_def'' (f : ι → E) (n : ι) :\n    f n =\n      gram_schmidt 𝕜 f n +\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Iio n)\n          («expr • » («expr⟪ , ⟫» (gram_schmidt 𝕜 f i) (f n) / «expr‖ ‖» (gram_schmidt 𝕜 f i) ^ 2)\n            (gram_schmidt 𝕜 f i)) :=\n  by\n  convert gram_schmidt_def' 𝕜 f n\n  ext i\n  rw [orthogonal_projection_singleton]\n#align gram_schmidt_def'' gram_schmidt_def''\n\n",
 "gram_schmidt_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∙ » -/\ntheorem gram_schmidt_def' (f : ι → E) (n : ι) :\n    f n =\n      gram_schmidt 𝕜 f n +\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Iio n)\n          (orthogonal_projection («expr ∙ » 𝕜 (gram_schmidt 𝕜 f i)) (f n)) :=\n  by rw [gram_schmidt_def, sub_add_cancel]\n#align gram_schmidt_def' gram_schmidt_def'\n\n",
 "gram_schmidt_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∙ » -/\n/-\nCopyright (c) 2022 Jiale Miao. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jiale Miao, Kevin Buzzard, Alexander Bentkamp\n-/\n/-- This lemma uses `∑ i in` instead of `∑ i :`.-/\ntheorem gram_schmidt_def (f : ι → E) (n : ι) :\n    gram_schmidt 𝕜 f n =\n      f n -\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Iio n)\n          (orthogonal_projection («expr ∙ » 𝕜 (gram_schmidt 𝕜 f i)) (f n)) :=\n  by\n  rw [← sum_attach, attach_eq_univ, gram_schmidt]\n  rfl\n#align gram_schmidt_def gram_schmidt_def\n\n",
 "coe_gram_schmidt_basis":
 "theorem coe_gram_schmidt_basis (b : Basis ι 𝕜 E) : (gram_schmidt_basis b : ι → E) = gram_schmidt 𝕜 b :=\n  Basis.coe_mk _ _\n#align coe_gram_schmidt_basis coe_gram_schmidt_basis\n\n"}