{"orthogonal_projection_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\ntheorem is_positive.orthogonal_projection_comp {T : «expr →L[ ] » E 𝕜 E} (hT : T.is_positive) (U : Submodule 𝕜 E)\n    [CompleteSpace U] : («expr ∘L » (orthogonal_projection U) («expr ∘L » T U.subtypeL)).is_positive :=\n  by\n  have := hT.conj_adjoint (orthogonal_projection U : «expr →L[ ] » E 𝕜 U)\n  rwa [U.adjoint_orthogonal_projection] at this\n#align is_positive.orthogonal_projection_comp is_positive.orthogonal_projection_comp\n\n",
 "is_self_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-\nCopyright (c) 2022 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anatole Dedecker\n-/\ntheorem is_positive.is_self_adjoint {T : «expr →L[ ] » E 𝕜 E} (hT : is_positive T) : IsSelfAdjoint T :=\n  hT.1\n#align is_positive.is_self_adjoint is_positive.is_self_adjoint\n\n",
 "is_positive_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem is_positive_zero : is_positive (0 : «expr →L[ ] » E 𝕜 E) :=\n  by\n  refine' ⟨isSelfAdjoint_zero _, fun x => _⟩\n  change 0 ≤ re («expr⟪ , ⟫» _ _)\n  rw [zero_apply, inner_zero_left, ZeroHomClass.map_zero]\n#align is_positive_zero is_positive_zero\n\n",
 "is_positive_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem is_positive_one : is_positive (1 : «expr →L[ ] » E 𝕜 E) :=\n  ⟨isSelfAdjoint_one _, fun x => inner_self_nonneg⟩\n#align is_positive_one is_positive_one\n\n",
 "is_positive_iff_complex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫_ℂ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫_ℂ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫_ℂ» -/\ntheorem is_positive_iff_complex (T : «expr →L[ ] » E' (exprℂ) E') :\n    is_positive T ↔\n      ∀ x, (re («expr⟪ , ⟫_ℂ» (T x) x) : exprℂ) = «expr⟪ , ⟫_ℂ» (T x) x ∧ 0 ≤ re («expr⟪ , ⟫_ℂ» (T x) x) :=\n  by\n  simp_rw [is_positive, forall_and, is_self_adjoint_iff_is_symmetric, linear_map.is_symmetric_iff_inner_map_self_real,\n    conj_eq_iff_re]\n  rfl\n#align is_positive_iff_complex is_positive_iff_complex\n\n",
 "inner_nonneg_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem is_positive.inner_nonneg_right {T : «expr →L[ ] » E 𝕜 E} (hT : is_positive T) (x : E) :\n    0 ≤ re («expr⟪ , ⟫» x (T x)) := by rw [inner_re_symm] <;> exact hT.inner_nonneg_left x\n#align is_positive.inner_nonneg_right is_positive.inner_nonneg_right\n\n",
 "inner_nonneg_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem is_positive.inner_nonneg_left {T : «expr →L[ ] » E 𝕜 E} (hT : is_positive T) (x : E) :\n    0 ≤ re («expr⟪ , ⟫» (T x) x) :=\n  hT.2 x\n#align is_positive.inner_nonneg_left is_positive.inner_nonneg_left\n\n",
 "conj_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\ntheorem is_positive.conj_orthogonal_projection (U : Submodule 𝕜 E) {T : «expr →L[ ] » E 𝕜 E} (hT : T.is_positive)\n    [CompleteSpace U] :\n    («expr ∘L » U.subtypeL\n        («expr ∘L » (orthogonal_projection U)\n          («expr ∘L » T («expr ∘L » U.subtypeL (orthogonal_projection U))))).is_positive :=\n  by\n  have := hT.conj_adjoint («expr ∘L » U.subtypeL (orthogonal_projection U))\n  rwa [(orthogonal_projection_is_self_adjoint U).adjoint_eq] at this\n#align is_positive.conj_orthogonal_projection is_positive.conj_orthogonal_projection\n\n",
 "conj_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\ntheorem is_positive.conj_adjoint {T : «expr →L[ ] » E 𝕜 E} (hT : T.is_positive) (S : «expr →L[ ] » E 𝕜 F) :\n    («expr ∘L » S («expr ∘L » T (adjoint S))).is_positive :=\n  by\n  refine' ⟨hT.is_self_adjoint.conj_adjoint S, fun x => _⟩\n  rw [re_apply_inner_self, comp_apply, ← adjoint_inner_right]\n  exact hT.inner_nonneg_left _\n#align is_positive.conj_adjoint is_positive.conj_adjoint\n\n",
 "adjoint_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\ntheorem is_positive.adjoint_conj {T : «expr →L[ ] » E 𝕜 E} (hT : T.is_positive) (S : «expr →L[ ] » F 𝕜 E) :\n    («expr ∘L » (adjoint S) («expr ∘L » T S)).is_positive :=\n  by\n  convert hT.conj_adjoint (adjoint S)\n  rw [adjoint_adjoint]\n#align is_positive.adjoint_conj is_positive.adjoint_conj\n\n",
 "add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem is_positive.add {T S : «expr →L[ ] » E 𝕜 E} (hT : T.is_positive) (hS : S.is_positive) : (T + S).is_positive :=\n  by\n  refine' ⟨hT.is_self_adjoint.add hS.is_self_adjoint, fun x => _⟩\n  rw [re_apply_inner_self, add_apply, inner_add_left, map_add]\n  exact add_nonneg (hT.inner_nonneg_left x) (hS.inner_nonneg_left x)\n#align is_positive.add is_positive.add\n\n"}