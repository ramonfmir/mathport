{"to_self_adjoint_apply":
 "theorem is_symmetric.to_self_adjoint_apply (hT : is_symmetric T) {x : E} : hT.to_self_adjoint x = T x :=\n  rfl\n#align is_symmetric.to_self_adjoint_apply is_symmetric.to_self_adjoint_apply\n\n",
 "to_euclidean_lin_conj_transpose_eq_adjoint":
 "/-- The adjoint of the linear map associated to a matrix is the linear map associated to the\nconjugate transpose of that matrix. -/\ntheorem to_euclidean_lin_conj_transpose_eq_adjoint (A : Matrix m n 𝕜) :\n    A.conj_transpose.to_euclidean_lin = A.to_euclidean_lin.adjoint :=\n  by\n  rw [linear_map.eq_adjoint_iff]\n  intro x y\n  simp_rw [euclidean_space.inner_eq_star_dot_product, pi_Lp_equiv_to_euclidean_lin, to_lin'_apply, star_mul_vec,\n    conj_transpose_conj_transpose, dot_product_mul_vec]\n#align to_euclidean_lin_conj_transpose_eq_adjoint to_euclidean_lin_conj_transpose_eq_adjoint\n\n",
 "star_eq_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem star_eq_adjoint (A : «expr →ₗ[ ] » E 𝕜 E) : star A = A.adjoint :=\n  rfl\n#align star_eq_adjoint star_eq_adjoint\n\n",
 "re_inner_adjoint_mul_self_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- The Gram operator T†T is a positive operator. -/\ntheorem re_inner_adjoint_mul_self_nonneg (T : «expr →ₗ[ ] » E 𝕜 E) (x : E) :\n    0 ≤ re («expr⟪ , ⟫» x ((T.adjoint * T) x)) :=\n  by\n  simp only [mul_apply, adjoint_inner_right, inner_self_eq_norm_sq_to_K]\n  norm_cast\n  exact sq_nonneg _\n#align re_inner_adjoint_mul_self_nonneg re_inner_adjoint_mul_self_nonneg\n\n",
 "orthogonal_projection_is_self_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/-- The orthogonal projection is self-adjoint. -/\ntheorem _root_.orthogonal_projection_is_self_adjoint (U : Submodule 𝕜 E) [CompleteSpace U] :\n    IsSelfAdjoint («expr ∘L » U.subtypeL (orthogonal_projection U)) :=\n  (orthogonal_projection_is_symmetric U).is_self_adjoint\n#align orthogonal_projection_is_self_adjoint orthogonal_projection_is_self_adjoint\n\n",
 "is_symmetric_iff_is_self_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem is_symmetric_iff_is_self_adjoint (A : «expr →ₗ[ ] » E 𝕜 E) : is_symmetric A ↔ IsSelfAdjoint A :=\n  by\n  rw [is_self_adjoint_iff', is_symmetric, ← linear_map.eq_adjoint_iff]\n  exact eq_comm\n#align is_symmetric_iff_is_self_adjoint is_symmetric_iff_is_self_adjoint\n\n",
 "is_symmetric_adjoint_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- The Gram operator T†T is symmetric. -/\ntheorem is_symmetric_adjoint_mul_self (T : «expr →ₗ[ ] » E 𝕜 E) : is_symmetric (T.adjoint * T) := fun x y => by\n  simp only [mul_apply, adjoint_inner_left, adjoint_inner_right]\n#align is_symmetric_adjoint_mul_self is_symmetric_adjoint_mul_self\n\n",
 "is_symmetric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- Every self-adjoint operator on an inner product space is symmetric. -/\ntheorem is_symmetric {A : «expr →L[ ] » E 𝕜 E} (hA : IsSelfAdjoint A) : (A : «expr →ₗ[ ] » E 𝕜 E).is_symmetric :=\n  fun x y => by rw_mod_cast [← A.adjoint_inner_right, hA.adjoint_eq]\n#align is_symmetric is_symmetric\n\n",
 "is_self_adjoint_iff_is_symmetric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem _root_.continuous_linear_map.is_self_adjoint_iff_is_symmetric {A : «expr →L[ ] » E 𝕜 E} :\n    IsSelfAdjoint A ↔ (A : «expr →ₗ[ ] » E 𝕜 E).is_symmetric :=\n  ⟨fun hA => hA.is_symmetric, fun hA =>\n    ext fun x => ext_inner_right 𝕜 fun y => (A.adjoint_inner_left y x).symm ▸ (hA x y).symm⟩\n#align continuous_linear_map.is_self_adjoint_iff_is_symmetric continuous_linear_map.is_self_adjoint_iff_is_symmetric\n\n",
 "is_self_adjoint_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- A continuous linear operator is self-adjoint iff it is equal to its adjoint. -/\ntheorem is_self_adjoint_iff' {A : «expr →ₗ[ ] » E 𝕜 E} : IsSelfAdjoint A ↔ A.adjoint = A :=\n  iff.rfl\n#align is_self_adjoint_iff' is_self_adjoint_iff'\n\n",
 "is_self_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem _root_.linear_map.is_symmetric.is_self_adjoint {A : «expr →L[ ] » E 𝕜 E}\n    (hA : (A : «expr →ₗ[ ] » E 𝕜 E).is_symmetric) : IsSelfAdjoint A := by\n  rwa [← continuous_linear_map.is_self_adjoint_iff_is_symmetric] at hA\n#align linear_map.is_symmetric.is_self_adjoint linear_map.is_symmetric.is_self_adjoint\n\n",
 "is_adjoint_pair_inner":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n-- Todo: Generalize this to `is_R_or_C`.\ntheorem is_adjoint_pair_inner (A : «expr →ₗ[ ] » E' (exprℝ) F') :\n    IsAdjointPair (sesq_form_of_inner : «expr →ₗ[ ] » E' (exprℝ) («expr →ₗ[ ] » E' (exprℝ) (exprℝ)))\n      (sesq_form_of_inner : «expr →ₗ[ ] » F' (exprℝ) («expr →ₗ[ ] » F' (exprℝ) (exprℝ))) A A.adjoint :=\n  fun x y => by simp only [sesq_form_of_inner_apply_apply, adjoint_inner_left]\n#align is_adjoint_pair_inner is_adjoint_pair_inner\n\n",
 "im_inner_adjoint_mul_self_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n@[simp]\ntheorem im_inner_adjoint_mul_self_eq_zero (T : «expr →ₗ[ ] » E 𝕜 E) (x : E) :\n    im («expr⟪ , ⟫» x (linear_map.adjoint T (T x))) = 0 :=\n  by\n  simp only [mul_apply, adjoint_inner_right, inner_self_eq_norm_sq_to_K]\n  norm_cast\n#align im_inner_adjoint_mul_self_eq_zero im_inner_adjoint_mul_self_eq_zero\n\n",
 "eq_adjoint_iff_basis_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem eq_adjoint_iff_basis_right {ι : Type _} (b : Basis ι 𝕜 F) (A : «expr →ₗ[ ] » E 𝕜 F) (B : «expr →ₗ[ ] » F 𝕜 E) :\n    A = B.adjoint ↔ ∀ i x, «expr⟪ , ⟫» (A x) (b i) = «expr⟪ , ⟫» x (B (b i)) :=\n  by\n  refine' ⟨fun h x y => by rw [h, adjoint_inner_left], fun h => _⟩\n  ext x\n  refine' ext_inner_right_basis b fun i => by simp only [h i, adjoint_inner_left]\n#align eq_adjoint_iff_basis_right eq_adjoint_iff_basis_right\n\n",
 "eq_adjoint_iff_basis_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem eq_adjoint_iff_basis_left {ι : Type _} (b : Basis ι 𝕜 E) (A : «expr →ₗ[ ] » E 𝕜 F) (B : «expr →ₗ[ ] » F 𝕜 E) :\n    A = B.adjoint ↔ ∀ i y, «expr⟪ , ⟫» (A (b i)) y = «expr⟪ , ⟫» (b i) (B y) :=\n  by\n  refine' ⟨fun h x y => by rw [h, adjoint_inner_left], fun h => Basis.ext b fun i => _⟩\n  exact ext_inner_right 𝕜 fun y => by simp only [h i, adjoint_inner_left]\n#align eq_adjoint_iff_basis_left eq_adjoint_iff_basis_left\n\n",
 "eq_adjoint_iff_basis":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- The adjoint is unique: a map `A` is the adjoint of `B` iff it satisfies `⟪A x, y⟫ = ⟪x, B y⟫`\nfor all basis vectors `x` and `y`. -/\ntheorem eq_adjoint_iff_basis {ι₁ : Type _} {ι₂ : Type _} (b₁ : Basis ι₁ 𝕜 E) (b₂ : Basis ι₂ 𝕜 F)\n    (A : «expr →ₗ[ ] » E 𝕜 F) (B : «expr →ₗ[ ] » F 𝕜 E) :\n    A = B.adjoint ↔ ∀ (i₁ : ι₁) (i₂ : ι₂), «expr⟪ , ⟫» (A (b₁ i₁)) (b₂ i₂) = «expr⟪ , ⟫» (b₁ i₁) (B (b₂ i₂)) :=\n  by\n  refine' ⟨fun h x y => by rw [h, adjoint_inner_left], fun h => _⟩\n  refine' Basis.ext b₁ fun i₁ => _\n  exact ext_inner_right_basis b₂ fun i₂ => by simp only [adjoint_inner_left, h i₁ i₂]\n#align eq_adjoint_iff_basis eq_adjoint_iff_basis\n\n",
 "eq_adjoint_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- The adjoint is unique: a map `A` is the adjoint of `B` iff it satisfies `⟪A x, y⟫ = ⟪x, B y⟫`\nfor all `x` and `y`. -/\ntheorem eq_adjoint_iff (A : «expr →ₗ[ ] » E 𝕜 F) (B : «expr →ₗ[ ] » F 𝕜 E) :\n    A = B.adjoint ↔ ∀ x y, «expr⟪ , ⟫» (A x) y = «expr⟪ , ⟫» x (B y) :=\n  by\n  refine' ⟨fun h x y => by rw [h, adjoint_inner_left], fun h => _⟩\n  ext x\n  exact ext_inner_right 𝕜 fun y => by simp only [adjoint_inner_left, h x y]\n#align eq_adjoint_iff eq_adjoint_iff\n\n",
 "conj_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\ntheorem conj_orthogonal_projection {T : «expr →L[ ] » E 𝕜 E} (hT : IsSelfAdjoint T) (U : Submodule 𝕜 E)\n    [CompleteSpace U] :\n    IsSelfAdjoint\n      («expr ∘L » U.subtypeL\n        («expr ∘L » (orthogonal_projection U) («expr ∘L » T («expr ∘L » U.subtypeL (orthogonal_projection U))))) :=\n  by\n  rw [← ContinuousLinearMap.comp_assoc]\n  nth_rw 1 [← (orthogonal_projection_is_self_adjoint U).adjoint_eq]\n  refine' hT.adjoint_conj _\n#align conj_orthogonal_projection conj_orthogonal_projection\n\n",
 "conj_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/-- Conjugating preserves self-adjointness -/\ntheorem conj_adjoint {T : «expr →L[ ] » E 𝕜 E} (hT : IsSelfAdjoint T) (S : «expr →L[ ] » E 𝕜 F) :\n    IsSelfAdjoint («expr ∘L » S («expr ∘L » T S.adjoint)) :=\n  by\n  rw [is_self_adjoint_iff'] at hT⊢\n  simp only [hT, adjoint_comp, adjoint_adjoint]\n  exact ContinuousLinearMap.comp_assoc _ _ _\n#align conj_adjoint conj_adjoint\n\n",
 "coe_to_self_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem is_symmetric.coe_to_self_adjoint (hT : is_symmetric T) : (hT.to_self_adjoint : «expr →ₗ[ ] » E 𝕜 E) = T :=\n  rfl\n#align is_symmetric.coe_to_self_adjoint is_symmetric.coe_to_self_adjoint\n\n",
 "apply_norm_sq_eq_inner_adjoint_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\ntheorem apply_norm_sq_eq_inner_adjoint_right (A : «expr →L[ ] » E 𝕜 E) (x : E) :\n    «expr‖ ‖» (A x) ^ 2 = re («expr⟪ , ⟫» x ((adjoint A * A) x)) :=\n  by\n  have h : «expr⟪ , ⟫» x ((adjoint A * A) x) = «expr⟪ , ⟫» (A x) (A x) :=\n    by\n    rw [← adjoint_inner_right]\n    rfl\n  rw [h, ← inner_self_eq_norm_sq _]\n#align apply_norm_sq_eq_inner_adjoint_right apply_norm_sq_eq_inner_adjoint_right\n\n",
 "apply_norm_sq_eq_inner_adjoint_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\ntheorem apply_norm_sq_eq_inner_adjoint_left (A : «expr →L[ ] » E 𝕜 E) (x : E) :\n    «expr‖ ‖» (A x) ^ 2 = re («expr⟪ , ⟫» ((adjoint A * A) x) x) :=\n  by\n  have h : «expr⟪ , ⟫» ((adjoint A * A) x) x = «expr⟪ , ⟫» (A x) (A x) :=\n    by\n    rw [← adjoint_inner_left]\n    rfl\n  rw [h, ← inner_self_eq_norm_sq _]\n#align apply_norm_sq_eq_inner_adjoint_left apply_norm_sq_eq_inner_adjoint_left\n\n",
 "apply_norm_eq_sqrt_inner_adjoint_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\ntheorem apply_norm_eq_sqrt_inner_adjoint_right (A : «expr →L[ ] » E 𝕜 E) (x : E) :\n    «expr‖ ‖» (A x) = Real.sqrt (re («expr⟪ , ⟫» x ((adjoint A * A) x))) := by\n  rw [← apply_norm_sq_eq_inner_adjoint_right, Real.sqrt_sq (norm_nonneg _)]\n#align apply_norm_eq_sqrt_inner_adjoint_right apply_norm_eq_sqrt_inner_adjoint_right\n\n",
 "apply_norm_eq_sqrt_inner_adjoint_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\ntheorem apply_norm_eq_sqrt_inner_adjoint_left (A : «expr →L[ ] » E 𝕜 E) (x : E) :\n    «expr‖ ‖» (A x) = Real.sqrt (re («expr⟪ , ⟫» ((adjoint A * A) x) x)) := by\n  rw [← apply_norm_sq_eq_inner_adjoint_left, Real.sqrt_sq (norm_nonneg _)]\n#align apply_norm_eq_sqrt_inner_adjoint_left apply_norm_eq_sqrt_inner_adjoint_left\n\n",
 "adjoint_to_continuous_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem adjoint_to_continuous_linear_map (A : «expr →ₗ[ ] » E 𝕜 F) :\n    A.adjoint.to_continuous_linear_map = A.to_continuous_linear_map.adjoint :=\n  rfl\n#align adjoint_to_continuous_linear_map adjoint_to_continuous_linear_map\n\n",
 "adjoint_subtypeL":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\ntheorem _root_.submodule.adjoint_subtypeL (U : Submodule 𝕜 E) [CompleteSpace U] :\n    adjoint U.subtypeL = orthogonal_projection U := by\n  symm\n  rw [eq_adjoint_iff]\n  intro x u\n  rw [U.coe_inner, inner_orthogonal_projection_left_eq_right, orthogonal_projection_mem_subspace_eq_self]\n  rfl\n#align submodule.adjoint_subtypeL submodule.adjoint_subtypeL\n\n",
 "adjoint_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `adjoint -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem _root_.submodule.adjoint_orthogonal_projection (U : Submodule 𝕜 E) [CompleteSpace U] :\n    adjoint (orthogonal_projection U : «expr →L[ ] » E 𝕜 U) = U.subtypeL := by\n  rw [← U.adjoint_subtypeL, adjoint_adjoint]\n#align submodule.adjoint_orthogonal_projection submodule.adjoint_orthogonal_projection\n\n",
 "adjoint_inner_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- The fundamental property of the adjoint. -/\ntheorem adjoint_inner_right (A : «expr →ₗ[ ] » E 𝕜 F) (x : E) (y : F) :\n    «expr⟪ , ⟫» x (adjoint A y) = «expr⟪ , ⟫» (A x) y :=\n  by\n  rw [← coe_to_continuous_linear_map A, adjoint_eq_to_clm_adjoint]\n  exact continuous_linear_map.adjoint_inner_right _ x y\n#align adjoint_inner_right adjoint_inner_right\n\n",
 "adjoint_inner_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/-- The fundamental property of the adjoint. -/\ntheorem adjoint_inner_left (A : «expr →ₗ[ ] » E 𝕜 F) (x : E) (y : F) :\n    «expr⟪ , ⟫» (adjoint A y) x = «expr⟪ , ⟫» y (A x) :=\n  by\n  rw [← coe_to_continuous_linear_map A, adjoint_eq_to_clm_adjoint]\n  exact continuous_linear_map.adjoint_inner_left _ x y\n#align adjoint_inner_left adjoint_inner_left\n\n",
 "adjoint_id":
 "@[simp]\ntheorem adjoint_id : (ContinuousLinearMap.id 𝕜 E).adjoint = ContinuousLinearMap.id 𝕜 E :=\n  by\n  refine' Eq.symm _\n  rw [eq_adjoint_iff]\n  simp\n#align adjoint_id adjoint_id\n\n",
 "adjoint_eq_to_clm_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem adjoint_eq_to_clm_adjoint (A : «expr →ₗ[ ] » E 𝕜 F) : A.adjoint = A.to_continuous_linear_map.adjoint :=\n  rfl\n#align adjoint_eq_to_clm_adjoint adjoint_eq_to_clm_adjoint\n\n",
 "adjoint_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem adjoint_eq {A : «expr →L[ ] » E 𝕜 E} (hA : IsSelfAdjoint A) : A.adjoint = A :=\n  hA\n#align adjoint_eq adjoint_eq\n\n",
 "adjoint_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘L » -/\n/-- Conjugating preserves self-adjointness -/\ntheorem adjoint_conj {T : «expr →L[ ] » E 𝕜 E} (hT : IsSelfAdjoint T) (S : «expr →L[ ] » F 𝕜 E) :\n    IsSelfAdjoint («expr ∘L » S.adjoint («expr ∘L » T S)) :=\n  by\n  rw [is_self_adjoint_iff'] at hT⊢\n  simp only [hT, adjoint_comp, adjoint_adjoint]\n  exact ContinuousLinearMap.comp_assoc _ _ _\n#align adjoint_conj adjoint_conj\n\n",
 "adjoint_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/-- The adjoint of the composition of two operators is the composition of the two adjoints\nin reverse order. -/\n@[simp]\ntheorem adjoint_comp (A : «expr →ₗ[ ] » F 𝕜 G) (B : «expr →ₗ[ ] » E 𝕜 F) :\n    («expr ∘ₗ » A B).adjoint = «expr ∘ₗ » B.adjoint A.adjoint :=\n  by\n  ext v\n  refine' ext_inner_left 𝕜 fun w => _\n  simp only [adjoint_inner_right, LinearMap.coe_comp, Function.comp_apply]\n#align adjoint_comp adjoint_comp\n\n",
 "adjoint_aux_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem adjoint_aux_norm (A : «expr →L[ ] » E 𝕜 F) : «expr‖ ‖» (adjoint_aux A) = «expr‖ ‖» A :=\n  by\n  refine' le_antisymm _ _\n  · refine' continuous_linear_map.op_norm_le_bound _ (norm_nonneg _) fun x => _\n    rw [adjoint_aux_apply, LinearIsometryEquiv.norm_map]\n    exact to_sesq_form_apply_norm_le\n  · nth_rw_lhs 1 [← adjoint_aux_adjoint_aux A]\n    refine' continuous_linear_map.op_norm_le_bound _ (norm_nonneg _) fun x => _\n    rw [adjoint_aux_apply, LinearIsometryEquiv.norm_map]\n    exact to_sesq_form_apply_norm_le\n#align adjoint_aux_norm adjoint_aux_norm\n\n",
 "adjoint_aux_inner_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem adjoint_aux_inner_right (A : «expr →L[ ] » E 𝕜 F) (x : E) (y : F) :\n    «expr⟪ , ⟫» x (adjoint_aux A y) = «expr⟪ , ⟫» (A x) y := by\n  rw [← inner_conj_symm, adjoint_aux_inner_left, inner_conj_symm]\n#align adjoint_aux_inner_right adjoint_aux_inner_right\n\n",
 "adjoint_aux_inner_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟪ , ⟫» -/\ntheorem adjoint_aux_inner_left (A : «expr →L[ ] » E 𝕜 F) (x : E) (y : F) :\n    «expr⟪ , ⟫» (adjoint_aux A y) x = «expr⟪ , ⟫» y (A x) := by\n  simp only [adjoint_aux_apply, to_dual_symm_apply, to_sesq_form_apply_coe, coe_comp', innerSL_apply_coe]\n#align adjoint_aux_inner_left adjoint_aux_inner_left\n\n",
 "adjoint_aux_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-\nCopyright (c) 2021 Frédéric Dupuis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Frédéric Dupuis, Heather Macbeth\n-/\n@[simp]\ntheorem adjoint_aux_apply (A : «expr →L[ ] » E 𝕜 F) (x : F) :\n    adjoint_aux A x = ((to_dual 𝕜 E).symm : normed_space.dual 𝕜 E → E) ((to_sesq_form A) x) :=\n  rfl\n#align adjoint_aux_apply adjoint_aux_apply\n\n",
 "adjoint_aux_adjoint_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem adjoint_aux_adjoint_aux (A : «expr →L[ ] » E 𝕜 F) : adjoint_aux (adjoint_aux A) = A :=\n  by\n  ext v\n  refine' ext_inner_left 𝕜 fun w => _\n  rw [adjoint_aux_inner_right, adjoint_aux_inner_left]\n#align adjoint_aux_adjoint_aux adjoint_aux_adjoint_aux\n\n",
 "adjoint_adjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- The adjoint is involutive -/\n@[simp]\ntheorem adjoint_adjoint (A : «expr →ₗ[ ] » E 𝕜 F) : A.adjoint.adjoint = A :=\n  by\n  ext v\n  refine' ext_inner_left 𝕜 fun w => _\n  rw [adjoint_inner_right, adjoint_inner_left]\n#align adjoint_adjoint adjoint_adjoint\n\n"}