{"weaken":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with.weaken (h : IsBigOWith c l f g') (hc : c ≤ c') : IsBigOWith c' l f g' :=\n  IsBigOWith.of_bound <|\n    mem_of_superset h.bound fun x hx =>\n      calc\n        «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g' x) := hx\n        _ ≤ _ := mul_le_mul_of_nonneg_right hc (norm_nonneg _)\n        \n#align is_O_with.weaken is_O_with.weaken\n\n",
 "triangle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.triangle (h₁ : «expr =o[ ] » (fun x => f₁ x - f₂ x) l g) (h₂ : «expr =o[ ] » (fun x => f₂ x - f₃ x) l g) :\n    «expr =o[ ] » (fun x => f₁ x - f₃ x) l g :=\n  (h₁.add h₂).congr_left fun x => sub_add_sub_cancel _ _ _\n#align is_o.triangle is_o.triangle\n\n",
 "trans_tendsto_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O.trans_tendsto_nhds (hfg : «expr =O[ ] » f l g') {y : F'} (hg : Tendsto g' l ((nhds) y)) :\n    «expr =O[ ] » f l (fun x => 1 : α → F) :=\n  hfg.trans <| hg.is_O_one F\n#align is_O.trans_tendsto_nhds is_O.trans_tendsto_nhds\n\n",
 "trans_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o.trans_tendsto (hfg : «expr =o[ ] » f'' l g'') (hg : Tendsto g'' l ((nhds) 0)) : Tendsto f'' l ((nhds) 0) :=\n  hfg.is_O.trans_tendsto hg\n#align is_o.trans_tendsto is_o.trans_tendsto\n\n",
 "trans_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.trans_le (hfg : «expr =o[ ] » f l g) (hgk : ∀ x, «expr‖ ‖» (g x) ≤ «expr‖ ‖» (k x)) :\n    «expr =o[ ] » f l k :=\n  hfg.trans_is_O_with (isBigOWith_of_le _ hgk) zero_lt_one\n#align is_o.trans_le is_o.trans_le\n\n",
 "trans_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[trans]\ntheorem is_O.trans_is_o {f : α → E} {g : α → F'} {k : α → G} (hfg : «expr =O[ ] » f l g) (hgk : «expr =o[ ] » g l k) :\n    «expr =o[ ] » f l k :=\n  let ⟨c, cpos, hc⟩ := hfg.exists_pos\n  hc.trans_is_o hgk cpos\n#align is_O.trans_is_o is_O.trans_is_o\n\n",
 "trans_is_O_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.trans_is_O_with (hfg : «expr =o[ ] » f l g) (hgk : IsBigOWith c l g k) (hc : 0 < c) :\n    «expr =o[ ] » f l k := by\n  unfold is_o at *\n  intro c' c'pos\n  have : 0 < c' / c := div_pos c'pos hc\n  exact ((hfg this).trans hgk this.le).congr_const (div_mul_cancel _ hc.ne')\n#align is_o.trans_is_O_with is_o.trans_is_O_with\n\n",
 "trans_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n#print Filter.Eventually.trans_isBigO /-\ntheorem Filter.Eventually.trans_isBigO {f : α → E} {g : α → F'} {k : α → G}\n    (hfg :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (f x) ≤ «expr‖ ‖» (g x)))\n    (hgk : «expr =O[ ] » g l k) : «expr =O[ ] » f l k :=\n  (IsBigO.of_bound' hfg).trans hgk\n#align filter.eventually.trans_is_O Filter.Eventually.trans_isBigO\n-/\n\n",
 "trans_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[trans]\ntheorem is_o.trans_eventually_eq {f : α → E} {g₁ g₂ : α → F} (h : «expr =o[ ] » f l g₁) (hg : «expr =ᶠ[ ] » g₁ l g₂) :\n    «expr =o[ ] » f l g₂ :=\n  h.congr' EventuallyEq.rfl hg\n#align is_o.trans_eventually_eq is_o.trans_eventually_eq\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[trans]\ntheorem is_o.trans {f : α → E} {g : α → F} {k : α → G} (hfg : «expr =o[ ] » f l g) (hgk : «expr =o[ ] » g l k) :\n    «expr =o[ ] » f l k :=\n  hfg.trans_is_O_with hgk.is_O_with one_pos\n#align is_o.trans is_o.trans\n\n",
 "tendsto_zero_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o.tendsto_zero_of_tendsto {α E 𝕜 : Type _} [NormedAddCommGroup E] [NormedField 𝕜] {u : α → E} {v : α → 𝕜}\n    {l : Filter α} {y : 𝕜} (huv : «expr =o[ ] » u l v) (hv : Tendsto v l ((nhds) y)) : Tendsto u l ((nhds) 0) :=\n  by\n  suffices h : «expr =o[ ] » u l fun x => (1 : 𝕜)\n  · rwa [is_o_one_iff] at h\n  exact huv.trans_is_O (hv.is_O_one 𝕜)\n#align is_o.tendsto_zero_of_tendsto is_o.tendsto_zero_of_tendsto\n\n",
 "tendsto_inv_smul_nhds_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o.tendsto_inv_smul_nhds_zero [NormedSpace 𝕜 E'] {f : α → E'} {g : α → 𝕜} {l : Filter α}\n    (h : «expr =o[ ] » f l g) : Tendsto (fun x => «expr • » (g x)⁻¹ (f x)) l ((nhds) 0) := by\n  simpa only [div_eq_inv_mul, ← norm_inv, ← norm_smul, ← tendsto_zero_iff_norm_tendsto_zero] using\n    h.norm_norm.tendsto_div_nhds_zero\n#align is_o.tendsto_inv_smul_nhds_zero is_o.tendsto_inv_smul_nhds_zero\n\n",
 "tendsto_div_nhds_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o.tendsto_div_nhds_zero {f g : α → 𝕜} (h : «expr =o[ ] » f l g) :\n    Tendsto (fun x => f x / g x) l ((nhds) 0) :=\n  (isLittleO_one_iff 𝕜).mp <|\n    calc\n      «expr =o[ ] » (fun x => f x / g x) l fun x => g x / g x := by\n        simpa only [div_eq_mul_inv] using h.mul_is_O (is_O_refl _ _)\n      «expr =O[ ] » _ l fun x => (1 : 𝕜) := isBigO_of_le _ fun x => by simp [div_self_le_one]\n      \n#align is_o.tendsto_div_nhds_zero is_o.tendsto_div_nhds_zero\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.symm (h : «expr =o[ ] » (fun x => f₁ x - f₂ x) l g) : «expr =o[ ] » (fun x => f₂ x - f₁ x) l g := by\n  simpa only [neg_sub] using h.neg_left\n#align is_o.symm is_o.symm\n\n",
 "sup'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem is_O_with.sup' (h : IsBigOWith c l f g') (h' : IsBigOWith c' l' f g') :\n    IsBigOWith (max c c') («expr ⊔ » l l') f g' :=\n  IsBigOWith.of_bound <| mem_sup.2 ⟨(h.weaken <| le_max_left c c').bound, (h'.weaken <| le_max_right c c').bound⟩\n#align is_O_with.sup' is_O_with.sup'\n\n",
 "sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem is_o.sup (h : «expr =o[ ] » f l g) (h' : «expr =o[ ] » f l' g) : «expr =o[ ] » f («expr ⊔ » l l') g :=\n  IsLittleO.of_isBigOWith fun c cpos => (h.forall_is_O_with cpos).sup (h'.forall_is_O_with cpos)\n#align is_o.sup is_o.sup\n\n",
 "summable_of_isBigO_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n#print summable_of_isBigO_nat /-\ntheorem summable_of_isBigO_nat {E} [NormedAddCommGroup E] [CompleteSpace E] {f : ℕ → E} {g : ℕ → exprℝ}\n    (hg : Summable g) (h : «expr =O[ ] » f atTop g) : Summable f :=\n  summable_of_isBigO hg <| Nat.cofinite_eq_atTop.symm ▸ h\n#align summable_of_is_O_nat summable_of_isBigO_nat\n-/\n\n",
 "summable_of_isBigO":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n#print summable_of_isBigO /-\ntheorem summable_of_isBigO {ι E} [NormedAddCommGroup E] [CompleteSpace E] {f : ι → E} {g : ι → exprℝ} (hg : Summable g)\n    (h : «expr =O[ ] » f cofinite g) : Summable f :=\n  let ⟨C, hC⟩ := h.is_O_with\n  summable_of_norm_bounded_eventually (fun x => C * «expr‖ ‖» (g x)) (hg.abs.mul_left _) hC.bound\n#align summable_of_is_O summable_of_isBigO\n-/\n\n",
 "sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem is_o.sum (h : ∀ i ∈ s, «expr =o[ ] » (A i) l g') :\n    «expr =o[ ] »\n      (fun x =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (A i x))\n      l g' :=\n  by\n  induction' s using Finset.induction_on with i s is IH\n  · simp only [is_o_zero, Finset.sum_empty, forall_true_iff]\n  · simp only [is, Finset.sum_insert, not_false_iff]\n    exact (h _ (Finset.mem_insert_self i s)).add (IH fun j hj => h _ (Finset.mem_insert_of_mem hj))\n#align is_o.sum is_o.sum\n\n",
 "sub_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_O_with.sub_is_o (h₁ : IsBigOWith c₁ l f₁ g) (h₂ : «expr =o[ ] » f₂ l g) (hc : c₁ < c₂) :\n    IsBigOWith c₂ l (fun x => f₁ x - f₂ x) g := by simpa only [sub_eq_add_neg] using h₁.add_is_o h₂.neg_left hc\n#align is_O_with.sub_is_o is_O_with.sub_is_o\n\n",
 "sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.sub (h₁ : «expr =o[ ] » f₁ l g) (h₂ : «expr =o[ ] » f₂ l g) : «expr =o[ ] » (fun x => f₁ x - f₂ x) l g :=\n  by simpa only [sub_eq_add_neg] using h₁.add h₂.neg_left\n#align is_o.sub is_o.sub\n\n",
 "smul_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_O.smul_is_o (h₁ : «expr =O[ ] » k₁ l k₂) (h₂ : «expr =o[ ] » f' l g') :\n    «expr =o[ ] » (fun x => «expr • » (k₁ x) (f' x)) l fun x => «expr • » (k₂ x) (g' x) := by\n  refine' ((h₁.norm_norm.mul_is_o h₂.norm_norm).congr _ _).of_norm_norm <;> · intros <;> simp only [norm_smul]\n#align is_O.smul_is_o is_O.smul_is_o\n\n",
 "smul_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_o.smul_is_O (h₁ : «expr =o[ ] » k₁ l k₂) (h₂ : «expr =O[ ] » f' l g') :\n    «expr =o[ ] » (fun x => «expr • » (k₁ x) (f' x)) l fun x => «expr • » (k₂ x) (g' x) := by\n  refine' ((h₁.norm_norm.mul_is_O h₂.norm_norm).congr _ _).of_norm_norm <;> · intros <;> simp only [norm_smul]\n#align is_o.smul_is_O is_o.smul_is_O\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_o.smul (h₁ : «expr =o[ ] » k₁ l k₂) (h₂ : «expr =o[ ] » f' l g') :\n    «expr =o[ ] » (fun x => «expr • » (k₁ x) (f' x)) l fun x => «expr • » (k₂ x) (g' x) := by\n  refine' ((h₁.norm_norm.mul h₂.norm_norm).congr _ _).of_norm_norm <;> · intros <;> simp only [norm_smul]\n#align is_o.smul is_o.smul\n\n",
 "right_le_sub_of_lt_1":
 "theorem is_O_with.right_le_sub_of_lt_1 {f₁ f₂ : α → E'} (h : IsBigOWith c l f₁ f₂) (hc : c < 1) :\n    IsBigOWith (1 / (1 - c)) l f₂ fun x => f₂ x - f₁ x :=\n  IsBigOWith.of_bound <|\n    mem_of_superset h.bound fun x hx => by\n      simp only [mem_set_of_eq] at hx⊢\n      rw [mul_comm, one_div, ← div_eq_mul_inv, le_div_iff, mul_sub, mul_one, mul_comm]\n      · exact le_trans (sub_le_sub_left hx _) (norm_sub_norm_le _ _)\n      · exact sub_pos.2 hc\n#align is_O_with.right_le_sub_of_lt_1 is_O_with.right_le_sub_of_lt_1\n\n",
 "right_le_add_of_lt_1":
 "theorem is_O_with.right_le_add_of_lt_1 {f₁ f₂ : α → E'} (h : IsBigOWith c l f₁ f₂) (hc : c < 1) :\n    IsBigOWith (1 / (1 - c)) l f₂ fun x => f₁ x + f₂ x :=\n  (h.neg_right.right_le_sub_of_lt_1 hc).neg_right.of_neg_left.congr rfl (fun x => rfl) fun x => by\n    rw [neg_sub, sub_neg_eq_add]\n#align is_O_with.right_le_add_of_lt_1 is_O_with.right_le_add_of_lt_1\n\n",
 "right_is_O_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_o.right_is_O_sub {f₁ f₂ : α → E'} (h : «expr =o[ ] » f₁ l f₂) : «expr =O[ ] » f₂ l fun x => f₂ x - f₁ x :=\n  ((h.def' one_half_pos).right_le_sub_of_lt_1 one_half_lt_one).is_O\n#align is_o.right_is_O_sub is_o.right_is_O_sub\n\n",
 "right_is_O_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_o.right_is_O_add {f₁ f₂ : α → E'} (h : «expr =o[ ] » f₁ l f₂) : «expr =O[ ] » f₂ l fun x => f₁ x + f₂ x :=\n  ((h.def' one_half_pos).right_le_add_of_lt_1 one_half_lt_one).is_O\n#align is_o.right_is_O_add is_o.right_is_O_add\n\n",
 "prod_rightr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.prod_rightr (h : «expr =o[ ] » f l g') : «expr =o[ ] » f l fun x => (f' x, g' x) :=\n  IsLittleO.of_isBigOWith fun c cpos => (h.forall_is_O_with cpos).prod_rightr f' cpos.le\n#align is_o.prod_rightr is_o.prod_rightr\n\n",
 "prod_rightl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.prod_rightl (h : «expr =o[ ] » f l g') : «expr =o[ ] » f l fun x => (g' x, k' x) :=\n  IsLittleO.of_isBigOWith fun c cpos => (h.forall_is_O_with cpos).prod_rightl k' cpos.le\n#align is_o.prod_rightl is_o.prod_rightl\n\n",
 "prod_left_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.prod_left_snd : «expr =o[ ] » (fun x => (f' x, g' x)) l k' → «expr =o[ ] » g' l k' :=\n  IsBigO.trans_isLittleO isBigO_snd_prod\n#align is_o.prod_left_snd is_o.prod_left_snd\n\n",
 "prod_left_same":
 "theorem is_O_with.prod_left_same (hf : IsBigOWith c l f' k') (hg : IsBigOWith c l g' k') :\n    IsBigOWith c l (fun x => (f' x, g' x)) k' := by\n  rw [is_O_with_iff] at * <;> filter_upwards [hf, hg]with x using max_le\n#align is_O_with.prod_left_same is_O_with.prod_left_same\n\n",
 "prod_left_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.prod_left_fst : «expr =o[ ] » (fun x => (f' x, g' x)) l k' → «expr =o[ ] » f' l k' :=\n  IsBigO.trans_isLittleO isBigO_fst_prod\n#align is_o.prod_left_fst is_o.prod_left_fst\n\n",
 "prod_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.prod_left (hf : «expr =o[ ] » f' l k') (hg : «expr =o[ ] » g' l k') :\n    «expr =o[ ] » (fun x => (f' x, g' x)) l k' :=\n  IsLittleO.of_isBigOWith fun c hc => (hf.forall_is_O_with hc).prod_left_same (hg.forall_is_O_with hc)\n#align is_o.prod_left is_o.prod_left\n\n",
 "pow'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with.pow' {f : α → R} {g : α → 𝕜} (h : IsBigOWith c l f g) :\n    ∀ n : ℕ, IsBigOWith (nat.cases_on n («expr‖ ‖» (1 : R)) fun n => c ^ (n + 1)) l (fun x => f x ^ n) fun x => g x ^ n\n  | 0 => by simpa using is_O_with_const_const (1 : R) (one_ne_zero' 𝕜) l\n  | 1 => by simpa\n  | n + 2 => by simpa [pow_succ] using h.mul (is_O_with.pow' (n + 1))\n#align is_O_with.pow' is_O_with.pow'\n\n",
 "pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.pow {f : α → R} {g : α → 𝕜} (h : «expr =o[ ] » f l g) {n : ℕ} (hn : 0 < n) :\n    «expr =o[ ] » (fun x => f x ^ n) l fun x => g x ^ n :=\n  by\n  cases n; exact hn.false.elim; clear hn\n  induction' n with n ihn; · simpa only [pow_one]\n  convert h.mul ihn <;> simp [pow_succ]\n#align is_o.pow is_o.pow\n\n",
 "of_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.of_pow {f : α → 𝕜} {g : α → R} {n : ℕ} (h : «expr =o[ ] » (f ^ n) l (g ^ n)) (hn : n ≠ 0) :\n    «expr =o[ ] » f l g :=\n  IsLittleO.of_isBigOWith fun c hc => (h.def' <| pow_pos hc _).of_pow hn le_rfl hc.le\n#align is_o.of_pow is_o.of_pow\n\n",
 "of_const_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.of_const_mul_right {g : α → R} {c : R} (h : «expr =o[ ] » f l fun x => c * g x) : «expr =o[ ] » f l g :=\n  h.trans_is_O (isBigO_const_mul_self c g l)\n#align is_o.of_const_mul_right is_o.of_const_mul_right\n\n",
 "of_bound'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O.of_bound'\n    (h :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (f x) ≤ «expr‖ ‖» (g x))) :\n    «expr =O[ ] » f l g :=\n  IsBigO.of_bound 1 <| by\n    simp_rw [one_mul]\n    exact h\n#align is_O.of_bound' is_O.of_bound'\n\n",
 "of_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O.of_bound (c : exprℝ)\n    (h :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x))) :\n    «expr =O[ ] » f l g :=\n  isBigO_iff.2 ⟨c, h⟩\n#align is_O.of_bound is_O.of_bound\n\n",
 "not_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_O.not_is_o (h : «expr =O[ ] » f'' l g')\n    (hf :\n      «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" l\n        (f'' x ≠ 0)) :\n    ¬«expr =o[ ] » g' l f'' := fun h' => isLittleO_irrefl hf (h.trans_is_o h')\n#align is_O.not_is_o is_O.not_is_o\n\n",
 "not_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_o.not_is_O (h : «expr =o[ ] » f'' l g')\n    (hf :\n      «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" l\n        (f'' x ≠ 0)) :\n    ¬«expr =O[ ] » g' l f'' := fun h' => isLittleO_irrefl hf (h.trans_is_O h')\n#align is_o.not_is_O is_o.not_is_O\n\n",
 "mul_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_O.mul_is_o {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : «expr =O[ ] » f₁ l g₁) (h₂ : «expr =o[ ] » f₂ l g₂) :\n    «expr =o[ ] » (fun x => f₁ x * f₂ x) l fun x => g₁ x * g₂ x :=\n  by\n  unfold is_o at *\n  intro c cpos\n  rcases h₁.exists_pos with ⟨c', c'pos, hc'⟩\n  exact (hc'.mul (h₂ (div_pos cpos c'pos))).congr_const (mul_div_cancel' _ (ne_of_gt c'pos))\n#align is_O.mul_is_o is_O.mul_is_o\n\n",
 "mul_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.mul_is_O {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : «expr =o[ ] » f₁ l g₁) (h₂ : «expr =O[ ] » f₂ l g₂) :\n    «expr =o[ ] » (fun x => f₁ x * f₂ x) l fun x => g₁ x * g₂ x :=\n  by\n  unfold is_o at *\n  intro c cpos\n  rcases h₂.exists_pos with ⟨c', c'pos, hc'⟩\n  exact ((h₁ (div_pos cpos c'pos)).mul hc').congr_const (div_mul_cancel _ (ne_of_gt c'pos))\n#align is_o.mul_is_O is_o.mul_is_O\n\n",
 "mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.mul {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : «expr =o[ ] » f₁ l g₁) (h₂ : «expr =o[ ] » f₂ l g₂) :\n    «expr =o[ ] » (fun x => f₁ x * f₂ x) l fun x => g₁ x * g₂ x :=\n  h₁.mul_is_O h₂.is_O\n#align is_o.mul is_o.mul\n\n",
 "mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.mono (h : «expr =o[ ] » f l' g) (hl : l ≤ l') : «expr =o[ ] » f l g :=\n  IsLittleO.of_isBigOWith fun c cpos => (h.forall_is_O_with cpos).mono hl\n#align is_o.mono is_o.mono\n\n",
 "is_o_zero_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n@[simp]\ntheorem is_o_zero_right_iff : («expr =o[ ] » f'' l fun x => (0 : F')) ↔ «expr =ᶠ[ ] » f'' l 0 :=\n  ⟨fun h => isBigO_zero_right_iff.1 h.is_O, fun h => IsLittleO.of_isBigOWith fun c hc => isBigOWith_zero_right_iff.2 h⟩\n#align is_o_zero_right_iff is_o_zero_right_iff\n\n",
 "is_o_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_zero : «expr =o[ ] » (fun x => (0 : E')) l g' :=\n  IsLittleO.of_bound fun c hc => univ_mem' fun x => by simpa using mul_nonneg hc.le (norm_nonneg <| g' x)\n#align is_o_zero is_o_zero\n\n",
 "is_o_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem is_o_top : «expr =o[ ] » f'' («expr⊤») g'' ↔ ∀ x, f'' x = 0 :=\n  by\n  refine' ⟨_, fun h => (is_o_zero g'' («expr⊤»)).congr (fun x => (h x).symm) fun x => rfl⟩\n  simp only [is_o_iff, eventually_top]\n  refine' fun h x => norm_le_zero_iff.1 _\n  have : tendsto (fun c : exprℝ => c * «expr‖ ‖» (g'' x)) (nhds_within.gt 0) ((nhds) 0) :=\n    ((continuous_id.mul continuous_const).tendsto' _ _ (MulZeroClass.zero_mul _)).mono_left inf_le_left\n  exact\n    le_of_tendsto_of_tendsto tendsto_const_nhds this\n      (eventually_nhdsWithin_iff.2 <| eventually_of_forall fun c hc => h hc x)\n#align is_o_top is_o_top\n\n",
 "is_o_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_sup : «expr =o[ ] » f («expr ⊔ » l l') g ↔ «expr =o[ ] » f l g ∧ «expr =o[ ] » f l' g :=\n  ⟨fun h => ⟨h.mono le_sup_left, h.mono le_sup_right⟩, fun h => h.1.sup h.2⟩\n#align is_o_sup is_o_sup\n\n",
 "is_o_refl_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_refl_left : «expr =o[ ] » (fun x => f' x - f' x) l g' :=\n  (isLittleO_zero g' l).congr_left fun x => (sub_self _).symm\n#align is_o_refl_left is_o_refl_left\n\n",
 "is_o_pure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_pure {x} : «expr =o[ ] » f'' (pure x) g'' ↔ f'' x = 0 :=\n  calc\n    «expr =o[ ] » f'' (pure x) g'' ↔ «expr =o[ ] » (fun y : α => f'' x) (pure x) fun _ => g'' x :=\n      isLittleO_congr rfl rfl\n    _ ↔ f'' x = 0 := isLittleO_const_const_iff\n    \n#align is_o_pure is_o_pure\n\n",
 "is_o_prod_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_prod_left : «expr =o[ ] » (fun x => (f' x, g' x)) l k' ↔ «expr =o[ ] » f' l k' ∧ «expr =o[ ] » g' l k' :=\n  ⟨fun h => ⟨h.prod_left_fst, h.prod_left_snd⟩, fun h => h.1.prod_left h.2⟩\n#align is_o_prod_left is_o_prod_left\n\n",
 "is_o_pow_sub_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_pow_sub_sub (x₀ : E') {m : ℕ} (h : 1 < m) :\n    «expr =o[ ] » (fun x => «expr‖ ‖» (x - x₀) ^ m) ((nhds) x₀) fun x => x - x₀ := by\n  simpa only [is_o_norm_right, pow_one] using is_o_pow_sub_pow_sub x₀ h\n#align is_o_pow_sub_sub is_o_pow_sub_sub\n\n",
 "is_o_pow_sub_pow_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o_pow_sub_pow_sub (x₀ : E') {n m : ℕ} (h : n < m) :\n    «expr =o[ ] » (fun x => «expr‖ ‖» (x - x₀) ^ m) ((nhds) x₀) fun x => «expr‖ ‖» (x - x₀) ^ n :=\n  haveI : tendsto (fun x => «expr‖ ‖» (x - x₀)) ((nhds) x₀) ((nhds) 0) :=\n    by\n    apply tendsto_norm_zero.comp\n    rw [← sub_self x₀]\n    exact tendsto_id.sub tendsto_const_nhds\n  (is_o_pow_pow h).comp_tendsto this\n#align is_o_pow_sub_pow_sub is_o_pow_sub_pow_sub\n\n",
 "is_o_pow_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_pow_pow {m n : ℕ} (h : m < n) : «expr =o[ ] » (fun x : 𝕜 => x ^ n) ((nhds) 0) fun x => x ^ m :=\n  by\n  rcases lt_iff_exists_add.1 h with ⟨p, hp0 : 0 < p, rfl⟩\n  suffices «expr =o[ ] » (fun x : 𝕜 => x ^ m * x ^ p) ((nhds) 0) fun x => x ^ m * 1 ^ p by\n    simpa only [pow_add, one_pow, mul_one]\n  exact is_O.mul_is_o (is_O_refl _ _) (is_o.pow ((is_o_one_iff _).2 tendsto_id) hp0)\n#align is_o_pow_pow is_o_pow_pow\n\n",
 "is_o_pow_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_pow_id {n : ℕ} (h : 1 < n) : «expr =o[ ] » (fun x : 𝕜 => x ^ n) ((nhds) 0) fun x => x :=\n  by\n  convert is_o_pow_pow h\n  simp only [pow_one]\n#align is_o_pow_id is_o_pow_id\n\n",
 "is_o_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_pi {ι : Type _} [Fintype ι] {E' : ι → Type _} [∀ i, NormedAddCommGroup (E' i)] {f : α → ∀ i, E' i} :\n    «expr =o[ ] » f l g' ↔ ∀ i, «expr =o[ ] » (fun x => f x i) l g' :=\n  by\n  simp (config := { contextual := true }) only [is_o, is_O_with_pi, le_of_lt]\n  exact ⟨fun h i c hc => h hc i, fun h c hc i => h i hc⟩\n#align is_o_pi is_o_pi\n\n",
 "is_o_one_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_o_one_left_iff : «expr =o[ ] » (fun x => 1 : α → F) l f ↔ Tendsto (fun x => «expr‖ ‖» (f x)) l atTop :=\n  calc\n    «expr =o[ ] » (fun x => 1 : α → F) l f ↔\n        ∀ n : ℕ,\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n            (↑n * «expr‖ ‖» (1 : F) ≤ «expr‖ ‖» (f x)) :=\n      isLittleO_iff_nat_mul_le_aux <| or.inl fun x => by simp only [norm_one, zero_le_one]\n    _ ↔\n        ∀ n : ℕ,\n          True →\n            «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n              («expr‖ ‖» (f x) ∈ Ici (n : exprℝ)) :=\n      by simp only [norm_one, mul_one, true_imp_iff, mem_Ici]\n    _ ↔ Tendsto (fun x => «expr‖ ‖» (f x)) l atTop := atTop_hasCountableBasis_of_archimedean.1.tendsto_right_iff.symm\n    \n#align is_o_one_left_iff is_o_one_left_iff\n\n",
 "is_o_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n@[simp]\ntheorem is_o_one_iff : «expr =o[ ] » f' l (fun x => 1 : α → F) ↔ Tendsto f' l ((nhds) 0) := by\n  simp only [is_o_iff, norm_one, mul_one, metric.nhds_basis_closed_ball.tendsto_right_iff, Metric.mem_closedBall,\n    dist_zero_right]\n#align is_o_one_iff is_o_one_iff\n\n",
 "is_o_of_subsingleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[nontriviality]\ntheorem is_o_of_subsingleton [subsingleton E'] : «expr =o[ ] » f' l g' :=\n  IsLittleO.of_bound fun c hc => by simp [subsingleton.elim (f' _) 0, mul_nonneg hc.le]\n#align is_o_of_subsingleton is_o_of_subsingleton\n\n",
 "is_o_norm_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_norm_right : («expr =o[ ] » f l fun x => «expr‖ ‖» (g' x)) ↔ «expr =o[ ] » f l g' :=\n  by\n  unfold is_o\n  exact forall₂_congr fun _ _ => is_O_with_norm_right\n#align is_o_norm_right is_o_norm_right\n\n",
 "is_o_norm_pow_norm_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o_norm_pow_norm_pow {m n : ℕ} (h : m < n) :\n    «expr =o[ ] » (fun x : E' => «expr‖ ‖» x ^ n) ((nhds) 0) fun x => «expr‖ ‖» x ^ m :=\n  (isLittleO_pow_pow h).comp_tendsto tendsto_norm_zero\n#align is_o_norm_pow_norm_pow is_o_norm_pow_norm_pow\n\n",
 "is_o_norm_pow_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_norm_pow_id {n : ℕ} (h : 1 < n) : «expr =o[ ] » (fun x : E' => «expr‖ ‖» x ^ n) ((nhds) 0) fun x => x := by\n  simpa only [pow_one, is_o_norm_right] using @is_o_norm_pow_norm_pow E' _ _ _ h\n#align is_o_norm_pow_id is_o_norm_pow_id\n\n",
 "is_o_norm_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_norm_norm :\n    («expr =o[ ] » (fun x => «expr‖ ‖» (f' x)) l fun x => «expr‖ ‖» (g' x)) ↔ «expr =o[ ] » f' l g' :=\n  isLittleO_norm_left.trans isLittleO_norm_right\n#align is_o_norm_norm is_o_norm_norm\n\n",
 "is_o_norm_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_norm_left : «expr =o[ ] » (fun x => «expr‖ ‖» (f' x)) l g ↔ «expr =o[ ] » f' l g :=\n  by\n  unfold is_o\n  exact forall₂_congr fun _ _ => is_O_with_norm_left\n#align is_o_norm_left is_o_norm_left\n\n",
 "is_o_neg_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_neg_right : («expr =o[ ] » f l fun x => -g' x) ↔ «expr =o[ ] » f l g' :=\n  by\n  unfold is_o\n  exact forall₂_congr fun _ _ => is_O_with_neg_right\n#align is_o_neg_right is_o_neg_right\n\n",
 "is_o_neg_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_neg_left : «expr =o[ ] » (fun x => -f' x) l g ↔ «expr =o[ ] » f' l g :=\n  by\n  unfold is_o\n  exact forall₂_congr fun _ _ => is_O_with_neg_left\n#align is_o_neg_left is_o_neg_left\n\n",
 "is_o_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_map {k : β → α} {l : Filter β} : «expr =o[ ] » f (map k l) g ↔ «expr =o[ ] » (f ∘ k) l (g ∘ k) := by\n  simp only [is_o, is_O_with_map]\n#align is_o_map is_o_map\n\n",
 "is_o_irrefl'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_irrefl'\n    (h :\n      «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" l\n        («expr‖ ‖» (f' x) ≠ 0)) :\n    ¬«expr =o[ ] » f' l f' := by\n  intro ho\n  rcases((ho.bound one_half_pos).and_frequently h).exists with ⟨x, hle, hne⟩\n  rw [one_div, ← div_eq_inv_mul] at hle\n  exact (half_lt_self (lt_of_le_of_ne (norm_nonneg _) hne.symm)).not_le hle\n#align is_o_irrefl' is_o_irrefl'\n\n",
 "is_o_irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_irrefl\n    (h :\n      «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" l\n        (f'' x ≠ 0)) :\n    ¬«expr =o[ ] » f'' l f'' :=\n  isLittleO_irrefl' <| h.mono fun x => norm_ne_zero_iff.mpr\n#align is_o_irrefl is_o_irrefl\n\n",
 "is_o_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem is_o_insert [TopologicalSpace α] {x : α} {s : Set α} {g : α → E'} {g' : α → F'} (h : g x = 0) :\n    «expr =o[ ] » g (nhds_within (insert x s) x) g' ↔ «expr =o[ ] » g (nhds_within s x) g' :=\n  by\n  simp_rw [is_o]\n  refine' forall_congr' fun c => forall_congr' fun hc => _\n  rw [is_O_with_insert]\n  rw [h, norm_zero]\n  exact mul_nonneg hc.le (norm_nonneg _)\n#align is_o_insert is_o_insert\n\n",
 "is_o_iff_tendsto'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_iff_tendsto' {f g : α → 𝕜}\n    (hgf :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (g x = 0 → f x = 0)) :\n    «expr =o[ ] » f l g ↔ Tendsto (fun x => f x / g x) l ((nhds) 0) :=\n  ⟨IsLittleO.tendsto_div_nhds_zero, fun h =>\n    (((isLittleO_one_iff _).mpr h).mul_is_O (isBigO_refl g l)).congr' (hgf.mono fun x => div_mul_cancel_of_imp)\n      (eventually_of_forall fun x => one_mul _)⟩\n#align is_o_iff_tendsto' is_o_iff_tendsto'\n\n",
 "is_o_iff_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_iff_tendsto {f g : α → 𝕜} (hgf : ∀ x, g x = 0 → f x = 0) :\n    «expr =o[ ] » f l g ↔ Tendsto (fun x => f x / g x) l ((nhds) 0) :=\n  isLittleO_iff_tendsto' (eventually_of_forall hgf)\n#align is_o_iff_tendsto is_o_iff_tendsto\n\n",
 "is_o_iff_nat_mul_le_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n-- We prove this lemma with strange assumptions to get two lemmas below automatically\ntheorem is_o_iff_nat_mul_le_aux (h₀ : (∀ x, 0 ≤ «expr‖ ‖» (f x)) ∨ ∀ x, 0 ≤ «expr‖ ‖» (g x)) :\n    «expr =o[ ] » f l g ↔\n      ∀ n : ℕ,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (↑n * «expr‖ ‖» (f x) ≤ «expr‖ ‖» (g x)) :=\n  by\n  constructor\n  · rintro H (_ | n)\n    · refine' (H.def one_pos).mono fun x h₀' => _\n      rw [Nat.cast_zero, MulZeroClass.zero_mul]\n      refine' h₀.elim (fun hf => (hf x).trans _) fun hg => hg x\n      rwa [one_mul] at h₀'\n    · have : (0 : exprℝ) < n.succ := Nat.cast_pos.2 n.succ_pos\n      exact (is_O_with_inv this).1 (H.def' <| inv_pos.2 this)\n  · refine' fun H => is_o_iff.2 fun ε ε0 => _\n    rcases exists_nat_gt ε⁻¹ with ⟨n, hn⟩\n    have hn₀ : (0 : exprℝ) < n := (inv_pos.2 ε0).trans hn\n    refine' ((is_O_with_inv hn₀).2 (H n)).bound.mono fun x hfg => _\n    refine' hfg.trans (mul_le_mul_of_nonneg_right (inv_le_of_inv_le ε0 hn.le) _)\n    refine' h₀.elim (fun hf => nonneg_of_mul_nonneg_right ((hf x).trans hfg) _) fun h => h x\n    exact inv_pos.2 hn₀\n#align is_o_iff_nat_mul_le_aux is_o_iff_nat_mul_le_aux\n\n",
 "is_o_iff_nat_mul_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o_iff_nat_mul_le' :\n    «expr =o[ ] » f' l g ↔\n      ∀ n : ℕ,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (↑n * «expr‖ ‖» (f' x) ≤ «expr‖ ‖» (g x)) :=\n  isLittleO_iff_nat_mul_le_aux (or.inl fun x => norm_nonneg _)\n#align is_o_iff_nat_mul_le' is_o_iff_nat_mul_le'\n\n",
 "is_o_iff_nat_mul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o_iff_nat_mul_le :\n    «expr =o[ ] » f l g' ↔\n      ∀ n : ℕ,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (↑n * «expr‖ ‖» (f x) ≤ «expr‖ ‖» (g' x)) :=\n  isLittleO_iff_nat_mul_le_aux (or.inr fun x => norm_nonneg _)\n#align is_o_iff_nat_mul_le is_o_iff_nat_mul_le\n\n",
 "is_o_iff_forall_is_O_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Definition of `is_o` in terms of `is_O_with`. We record it in a lemma as we will set\n`is_o` to be irreducible at the end of this file. -/\ntheorem is_o_iff_forall_is_O_with : «expr =o[ ] » f l g ↔ ∀ ⦃c : exprℝ⦄, 0 < c → IsBigOWith c l f g := by rw [is_o]\n#align is_o_iff_forall_is_O_with is_o_iff_forall_is_O_with\n\n",
 "is_o_iff_exists_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\ntheorem is_o_iff_exists_eq_mul :\n    «expr =o[ ] » u l v ↔ ∃ (φ : α → 𝕜)(hφ : Tendsto φ l ((nhds) 0)), «expr =ᶠ[ ] » u l (φ * v) :=\n  by\n  constructor\n  · exact fun h => ⟨fun x => u x / v x, h.tendsto_div_nhds_zero, h.eventually_mul_div_cancel.symm⟩\n  · unfold is_o\n    rintro ⟨φ, hφ, huvφ⟩ c hpos\n    rw [NormedAddCommGroup.tendsto_nhds_zero] at hφ\n    exact is_O_with_of_eq_mul _ ((hφ c hpos).mono fun x => le_of_lt) huvφ\n#align is_o_iff_exists_eq_mul is_o_iff_exists_eq_mul\n\n",
 "is_o_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Definition of `is_o` in terms of filters. We record it in a lemma as we will set\n`is_o` to be irreducible at the end of this file. -/\ntheorem is_o_iff :\n    «expr =o[ ] » f l g ↔\n      ∀ ⦃c : exprℝ⦄,\n        0 < c →\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n            («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) :=\n  by simp only [is_o, is_O_with]\n#align is_o_iff is_o_iff\n\n",
 "is_o_id_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_id_const {c : F''} (hc : c ≠ 0) : «expr =o[ ] » (fun x : E'' => x) ((nhds) 0) fun x => c :=\n  (isLittleO_const_iff hc).mpr (continuous_id.tendsto 0)\n#align is_o_id_const is_o_id_const\n\n",
 "is_o_const_smul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_smul_right {c : 𝕜} (hc : c ≠ 0) :\n    («expr =o[ ] » f l fun x => «expr • » c (f' x)) ↔ «expr =o[ ] » f l f' :=\n  by\n  have cne0 : «expr‖ ‖» c ≠ 0 := mt norm_eq_zero.mp hc\n  rw [← is_o_norm_right]\n  simp only [norm_smul]\n  rw [is_o_const_mul_right_iff cne0, is_o_norm_right]\n#align is_o_const_smul_right is_o_const_smul_right\n\n",
 "is_o_const_smul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_smul_left {c : 𝕜} (hc : c ≠ 0) :\n    «expr =o[ ] » (fun x => «expr • » c (f' x)) l g ↔ «expr =o[ ] » f' l g :=\n  by\n  have cne0 : «expr‖ ‖» c ≠ 0 := mt norm_eq_zero.mp hc\n  rw [← is_o_norm_left]\n  simp only [norm_smul]\n  rw [is_o_const_mul_left_iff cne0, is_o_norm_left]\n#align is_o_const_smul_left is_o_const_smul_left\n\n",
 "is_o_const_mul_right_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_mul_right_iff' {g : α → R} {c : R} (hc : IsUnit c) :\n    («expr =o[ ] » f l fun x => c * g x) ↔ «expr =o[ ] » f l g :=\n  ⟨fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc⟩\n#align is_o_const_mul_right_iff' is_o_const_mul_right_iff'\n\n",
 "is_o_const_mul_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_mul_right_iff {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    («expr =o[ ] » f l fun x => c * g x) ↔ «expr =o[ ] » f l g :=\n  isLittleO_const_mul_right_iff' <| IsUnit.mk0 c hc\n#align is_o_const_mul_right_iff is_o_const_mul_right_iff\n\n",
 "is_o_const_mul_left_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_mul_left_iff' {f : α → R} {c : R} (hc : IsUnit c) :\n    «expr =o[ ] » (fun x => c * f x) l g ↔ «expr =o[ ] » f l g :=\n  ⟨(isBigO_self_const_mul' hc f l).trans_is_o, fun h => h.const_mul_left c⟩\n#align is_o_const_mul_left_iff' is_o_const_mul_left_iff'\n\n",
 "is_o_const_mul_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_mul_left_iff {f : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    «expr =o[ ] » (fun x => c * f x) l g ↔ «expr =o[ ] » f l g :=\n  isLittleO_const_mul_left_iff' <| IsUnit.mk0 c hc\n#align is_o_const_mul_left_iff is_o_const_mul_left_iff\n\n",
 "is_o_const_left_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o_const_left_of_ne {c : E''} (hc : c ≠ 0) :\n    «expr =o[ ] » (fun x => c) l g ↔ Tendsto (fun x => «expr‖ ‖» (g x)) l atTop :=\n  by\n  simp only [← is_o_one_left_iff (exprℝ)]\n  exact ⟨(is_O_const_const (1 : exprℝ) hc l).trans_is_o, (is_O_const_one (exprℝ) c l).trans_is_o⟩\n#align is_o_const_left_of_ne is_o_const_left_of_ne\n\n",
 "is_o_const_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_const_left {c : E''} : «expr =o[ ] » (fun x => c) l g'' ↔ c = 0 ∨ Tendsto (norm ∘ g'') l atTop :=\n  by\n  rcases eq_or_ne c 0 with (rfl | hc)\n  · simp only [is_o_zero, eq_self_iff_true, true_or_iff]\n  · simp only [hc, false_or_iff, is_o_const_left_of_ne hc]\n#align is_o_const_left is_o_const_left\n\n",
 "is_o_const_iff_is_o_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_iff_is_o_one {c : F''} (hc : c ≠ 0) :\n    («expr =o[ ] » f l fun x => c) ↔ «expr =o[ ] » f l fun x => (1 : F) :=\n  ⟨fun h => h.trans_is_O_with (isBigOWith_const_one _ _ _) (norm_pos_iff.2 hc), fun h =>\n    h.trans_is_O <| isBigO_const_const _ hc _⟩\n#align is_o_const_iff_is_o_one is_o_const_iff_is_o_one\n\n",
 "is_o_const_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_o_const_iff {c : F''} (hc : c ≠ 0) : («expr =o[ ] » f'' l fun x => c) ↔ Tendsto f'' l ((nhds) 0) :=\n  (isLittleO_const_iff_isLittleO_one (exprℝ) hc).trans (isLittleO_one_iff _)\n#align is_o_const_iff is_o_const_iff\n\n",
 "is_o_const_id_comap_norm_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_const_id_comap_norm_at_top (c : F'') : «expr =o[ ] » (fun x : E'' => c) (comap norm atTop) id :=\n  isLittleO_const_left.2 <| or.inr tendsto_comap\n#align is_o_const_id_comap_norm_at_top is_o_const_id_comap_norm_at_top\n\n",
 "is_o_const_id_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_o_const_id_at_top (c : E'') : «expr =o[ ] » (fun x : exprℝ => c) atTop id :=\n  isLittleO_const_left.2 <| or.inr tendsto_abs_atTop_atTop\n#align is_o_const_id_at_top is_o_const_id_at_top\n\n",
 "is_o_const_id_at_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_o_const_id_at_bot (c : E'') : «expr =o[ ] » (fun x : exprℝ => c) atBot id :=\n  isLittleO_const_left.2 <| or.inr tendsto_abs_atBot_atTop\n#align is_o_const_id_at_bot is_o_const_id_at_bot\n\n",
 "is_o_const_const_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_const_const_iff [NeBot l] {d : E''} {c : F''} : («expr =o[ ] » (fun x => d) l fun x => c) ↔ d = 0 :=\n  by\n  have : ¬Tendsto (Function.const α («expr‖ ‖» c)) l atTop := not_tendsto_atTop_of_tendsto_nhds tendsto_const_nhds\n  simp [Function.const, this]\n#align is_o_const_const_iff is_o_const_const_iff\n\n",
 "is_o_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Transfer `is_o` over a `homeomorph`. -/\ntheorem is_o_congr (e : «expr ≃ₜ » α β) {b : β} {f : β → E} {g : β → F} :\n    «expr =o[ ] » f ((nhds) b) g ↔ «expr =o[ ] » (f ∘ e) ((nhds) (e.symm b)) (g ∘ e) :=\n  by\n  unfold is_o\n  exact forall₂_congr fun c hc => e.is_O_with_congr\n#align is_o_congr is_o_congr\n\n",
 "is_o_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_comm : «expr =o[ ] » (fun x => f₁ x - f₂ x) l g ↔ «expr =o[ ] » (fun x => f₂ x - f₁ x) l g :=\n  ⟨IsLittleO.symm, IsLittleO.symm⟩\n#align is_o_comm is_o_comm\n\n",
 "is_o_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem is_o_bot : «expr =o[ ] » f («expr⊥») g :=\n  IsLittleO.of_isBigOWith fun c _ => isBigOWith_bot c f g\n#align is_o_bot is_o_bot\n\n",
 "is_o_abs_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_abs_right : («expr =o[ ] » f l fun x => |u x|) ↔ «expr =o[ ] » f l u :=\n  @isLittleO_norm_right _ _ (exprℝ) _ _ _ _ _\n#align is_o_abs_right is_o_abs_right\n\n",
 "is_o_abs_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[simp]\ntheorem is_o_abs_left : «expr =o[ ] » (fun x => |u x|) l g ↔ «expr =o[ ] » u l g :=\n  @isLittleO_norm_left _ _ _ _ _ g u l\n#align is_o_abs_left is_o_abs_left\n\n",
 "is_o_abs_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o_abs_abs : («expr =o[ ] » (fun x => |u x|) l fun x => |v x|) ↔ «expr =o[ ] » u l v :=\n  isLittleO_abs_left.trans isLittleO_abs_right\n#align is_o_abs_abs is_o_abs_abs\n\n",
 "is_bounded_under_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O.is_bounded_under_le {c : F} (h : «expr =O[ ] » f l fun x => c) : IsBoundedUnder (· ≤ ·) l (norm ∘ f) :=\n  let ⟨c', hc'⟩ := h.bound\n  ⟨c' * «expr‖ ‖» c, eventually_map.2 hc'⟩\n#align is_O.is_bounded_under_le is_O.is_bounded_under_le\n\n",
 "is_O_zero_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n@[simp]\ntheorem is_O_zero_right_iff : («expr =O[ ] » f'' l fun x => (0 : F')) ↔ «expr =ᶠ[ ] » f'' l 0 :=\n  ⟨fun h =>\n    let ⟨c, hc⟩ := h.is_O_with\n    isBigOWith_zero_right_iff.1 hc,\n    fun h => (isBigOWith_zero_right_iff.2 h : IsBigOWith 1 _ _ _).is_O⟩\n#align is_O_zero_right_iff is_O_zero_right_iff\n\n",
 "is_O_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_zero : «expr =O[ ] » (fun x => (0 : E')) l g :=\n  isBigO_iff_isBigOWith.2 ⟨0, isBigOWith_zero' _ _⟩\n#align is_O_zero is_O_zero\n\n",
 "is_O_with_zero_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n@[simp]\ntheorem is_O_with_zero_right_iff : (IsBigOWith c l f'' fun x => (0 : F')) ↔ «expr =ᶠ[ ] » f'' l 0 := by\n  simp only [is_O_with, exists_prop, true_and_iff, norm_zero, MulZeroClass.mul_zero, norm_le_zero_iff, eventually_eq,\n    Pi.zero_apply]\n#align is_O_with_zero_right_iff is_O_with_zero_right_iff\n\n",
 "is_O_with_zero'":
 "theorem is_O_with_zero' : IsBigOWith 0 l (fun x => (0 : E')) g :=\n  IsBigOWith.of_bound <| univ_mem' fun x => by simp\n#align is_O_with_zero' is_O_with_zero'\n\n",
 "is_O_with_zero":
 "theorem is_O_with_zero (hc : 0 ≤ c) : IsBigOWith c l (fun x => (0 : E')) g' :=\n  IsBigOWith.of_bound <| univ_mem' fun x => by simpa using mul_nonneg hc (norm_nonneg <| g' x)\n#align is_O_with_zero is_O_with_zero\n\n",
 "is_O_with_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_with_top : IsBigOWith c («expr⊤») f g ↔ ∀ x, «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x) := by\n  rw [is_O_with] <;> rfl\n#align is_O_with_top is_O_with_top\n\n",
 "is_O_with_snd_prod":
 "theorem is_O_with_snd_prod : IsBigOWith 1 l g' fun x => (f' x, g' x) :=\n  isBigOWith_of_le l fun x => le_max_right _ _\n#align is_O_with_snd_prod is_O_with_snd_prod\n\n",
 "is_O_with_self_const_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_self_const_mul' (u : «expr ˣ» R) (f : α → R) (l : Filter α) :\n    IsBigOWith («expr‖ ‖» (↑u⁻¹ : R)) l f fun x => ↑u * f x :=\n  (isBigOWith_const_mul_self ↑u⁻¹ _ l).congr_left fun x => u.inv_mul_cancel_left (f x)\n#align is_O_with_self_const_mul' is_O_with_self_const_mul'\n\n",
 "is_O_with_self_const_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_self_const_mul (c : 𝕜) (hc : c ≠ 0) (f : α → 𝕜) (l : Filter α) :\n    IsBigOWith («expr‖ ‖» c)⁻¹ l f fun x => c * f x :=\n  (isBigOWith_self_const_mul' (Units.mk0 c hc) f l).congr_const <| norm_inv c\n#align is_O_with_self_const_mul is_O_with_self_const_mul\n\n",
 "is_O_with_refl":
 "theorem is_O_with_refl (f : α → E) (l : Filter α) : IsBigOWith 1 l f f :=\n  isBigOWith_of_le l fun _ => le_rfl\n#align is_O_with_refl is_O_with_refl\n\n",
 "is_O_with_pure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_with_pure {x} : IsBigOWith c (pure x) f g ↔ «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x) :=\n  isBigOWith_iff\n#align is_O_with_pure is_O_with_pure\n\n",
 "is_O_with_prod_left":
 "theorem is_O_with_prod_left : IsBigOWith c l (fun x => (f' x, g' x)) k' ↔ IsBigOWith c l f' k' ∧ IsBigOWith c l g' k' :=\n  ⟨fun h => ⟨h.prod_left_fst, h.prod_left_snd⟩, fun h => h.1.prod_left_same h.2⟩\n#align is_O_with_prod_left is_O_with_prod_left\n\n",
 "is_O_with_principal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_with_principal {s : Set α} :\n    IsBigOWith c ((filter.principal) s) f g ↔ ∀ x ∈ s, «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x) := by\n  rw [is_O_with] <;> rfl\n#align is_O_with_principal is_O_with_principal\n\n",
 "is_O_with_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_O_with_pi {ι : Type _} [Fintype ι] {E' : ι → Type _} [∀ i, NormedAddCommGroup (E' i)] {f : α → ∀ i, E' i}\n    {C : exprℝ} (hC : 0 ≤ C) : IsBigOWith C l f g' ↔ ∀ i, IsBigOWith C l (fun x => f x i) g' :=\n  by\n  have : ∀ x, 0 ≤ C * «expr‖ ‖» (g' x) := fun x => mul_nonneg hC (norm_nonneg _)\n  simp only [is_O_with_iff, pi_norm_le_iff_of_nonneg (this _), eventually_all]\n#align is_O_with_pi is_O_with_pi\n\n",
 "is_O_with_of_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_of_le' (hfg : ∀ x, «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) : IsBigOWith c l f g :=\n  IsBigOWith.of_bound <| univ_mem' hfg\n#align is_O_with_of_le' is_O_with_of_le'\n\n",
 "is_O_with_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_of_le (hfg : ∀ x, «expr‖ ‖» (f x) ≤ «expr‖ ‖» (g x)) : IsBigOWith 1 l f g :=\n  isBigOWith_of_le' l fun x => by\n    rw [one_mul]\n    exact hfg x\n#align is_O_with_of_le is_O_with_of_le\n\n",
 "is_O_with_of_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/-- If `‖φ‖` is eventually bounded by `c`, and `u =ᶠ[l] φ * v`, then we have `is_O_with c u v l`.\n    This does not require any assumptions on `c`, which is why we keep this version along with\n    `is_O_with_iff_exists_eq_mul`. -/\ntheorem is_O_with_of_eq_mul (φ : α → 𝕜)\n    (hφ :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (φ x) ≤ c))\n    (h : «expr =ᶠ[ ] » u l (φ * v)) : IsBigOWith c l u v :=\n  by\n  unfold is_O_with\n  refine' h.symm.rw (fun x a => «expr‖ ‖» a ≤ c * «expr‖ ‖» (v x)) (hφ.mono fun x hx => _)\n  simp only [norm_mul, Pi.mul_apply]\n  exact mul_le_mul_of_nonneg_right hx (norm_nonneg _)\n#align is_O_with_of_eq_mul is_O_with_of_eq_mul\n\n",
 "is_O_with_norm_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_with_norm_right : (IsBigOWith c l f fun x => «expr‖ ‖» (g' x)) ↔ IsBigOWith c l f g' := by\n  simp only [is_O_with, norm_norm]\n#align is_O_with_norm_right is_O_with_norm_right\n\n",
 "is_O_with_norm_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_norm_norm :\n    (IsBigOWith c l (fun x => «expr‖ ‖» (f' x)) fun x => «expr‖ ‖» (g' x)) ↔ IsBigOWith c l f' g' :=\n  isBigOWith_norm_left.trans isBigOWith_norm_right\n#align is_O_with_norm_norm is_O_with_norm_norm\n\n",
 "is_O_with_norm_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_with_norm_left : IsBigOWith c l (fun x => «expr‖ ‖» (f' x)) g ↔ IsBigOWith c l f' g := by\n  simp only [is_O_with, norm_norm]\n#align is_O_with_norm_left is_O_with_norm_left\n\n",
 "is_O_with_neg_right":
 "@[simp]\ntheorem is_O_with_neg_right : (IsBigOWith c l f fun x => -g' x) ↔ IsBigOWith c l f g' := by\n  simp only [is_O_with, norm_neg]\n#align is_O_with_neg_right is_O_with_neg_right\n\n",
 "is_O_with_neg_left":
 "@[simp]\ntheorem is_O_with_neg_left : IsBigOWith c l (fun x => -f' x) g ↔ IsBigOWith c l f' g := by\n  simp only [is_O_with, norm_neg]\n#align is_O_with_neg_left is_O_with_neg_left\n\n",
 "is_O_with_map":
 "@[simp]\ntheorem is_O_with_map {k : β → α} {l : Filter β} : IsBigOWith c (map k l) f g ↔ IsBigOWith c l (f ∘ k) (g ∘ k) :=\n  by\n  unfold is_O_with\n  exact eventually_map\n#align is_O_with_map is_O_with_map\n\n",
 "is_O_with_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_inv (hc : 0 < c) :\n    IsBigOWith c⁻¹ l f g ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (c * «expr‖ ‖» (f x) ≤ «expr‖ ‖» (g x)) :=\n  by simp only [is_O_with, ← div_eq_inv_mul, le_div_iff' hc]\n#align is_O_with_inv is_O_with_inv\n\n",
 "is_O_with_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem is_O_with_insert [TopologicalSpace α] {x : α} {s : Set α} {C : exprℝ} {g : α → E} {g' : α → F}\n    (h : «expr‖ ‖» (g x) ≤ C * «expr‖ ‖» (g' x)) :\n    IsBigOWith C (nhds_within (insert x s) x) g g' ↔ IsBigOWith C (nhds_within s x) g g' := by\n  simp_rw [is_O_with, nhdsWithin_insert, eventually_sup, eventually_pure, h, true_and_iff]\n#align is_O_with_insert is_O_with_insert\n\n",
 "is_O_with_iff_exists_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\ntheorem is_O_with_iff_exists_eq_mul (hc : 0 ≤ c) :\n    IsBigOWith c l u v ↔\n      ∃ (φ : α → 𝕜)(hφ :\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          («expr‖ ‖» (φ x) ≤ c)),\n        «expr =ᶠ[ ] » u l (φ * v) :=\n  by\n  constructor\n  · intro h\n    use fun x => u x / v x\n    refine' ⟨eventually.mono h.bound fun y hy => _, h.eventually_mul_div_cancel.symm⟩\n    simpa using div_le_of_nonneg_of_le_mul (norm_nonneg _) hc hy\n  · rintro ⟨φ, hφ, h⟩\n    exact is_O_with_of_eq_mul φ hφ h\n#align is_O_with_iff_exists_eq_mul is_O_with_iff_exists_eq_mul\n\n",
 "is_O_with_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-\nCopyright (c) 2019 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Yury Kudryashov\n-/\n/-- Definition of `is_O_with`. We record it in a lemma as `is_O_with` is irreducible. -/\ntheorem is_O_with_iff :\n    IsBigOWith c l f g ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) :=\n  by rw [is_O_with]\n#align is_O_with_iff is_O_with_iff\n\n",
 "is_O_with_fst_prod":
 "theorem is_O_with_fst_prod : IsBigOWith 1 l f' fun x => (f' x, g' x) :=\n  isBigOWith_of_le l fun x => le_max_left _ _\n#align is_O_with_fst_prod is_O_with_fst_prod\n\n",
 "is_O_with_const_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_const_one (c : E) (l : Filter α) : IsBigOWith («expr‖ ‖» c) l (fun x : α => c) fun x => (1 : F) := by\n  simp [is_O_with_iff]\n#align is_O_with_const_one is_O_with_const_one\n\n",
 "is_O_with_const_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_const_mul_self (c : R) (f : α → R) (l : Filter α) : IsBigOWith («expr‖ ‖» c) l (fun x => c * f x) f :=\n  isBigOWith_of_le' _ fun x => norm_mul_le _ _\n#align is_O_with_const_mul_self is_O_with_const_mul_self\n\n",
 "is_O_with_const_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_with_const_const (c : E) {c' : F''} (hc' : c' ≠ 0) (l : Filter α) :\n    IsBigOWith («expr‖ ‖» c / «expr‖ ‖» c') l (fun x : α => c) fun x => c' :=\n  by\n  unfold is_O_with\n  apply univ_mem'\n  intro x\n  rw [mem_set_of_eq, div_mul_cancel]\n  rwa [ne.def, norm_eq_zero]\n#align is_O_with_const_const is_O_with_const_const\n\n",
 "is_O_with_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Transfer `is_O_with` over a `homeomorph`. -/\ntheorem is_O_with_congr (e : «expr ≃ₜ » α β) {b : β} {f : β → E} {g : β → F} {C : exprℝ} :\n    IsBigOWith C ((nhds) b) f g ↔ IsBigOWith C ((nhds) (e.symm b)) (f ∘ e) (g ∘ e) :=\n  e.to_local_homeomorph.is_O_with_congr trivial\n#align is_O_with_congr is_O_with_congr\n\n",
 "is_O_with_comm":
 "theorem is_O_with_comm : IsBigOWith c l (fun x => f₁ x - f₂ x) g ↔ IsBigOWith c l (fun x => f₂ x - f₁ x) g :=\n  ⟨IsBigOWith.symm, IsBigOWith.symm⟩\n#align is_O_with_comm is_O_with_comm\n\n",
 "is_O_with_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem is_O_with_bot : IsBigOWith c («expr⊥») f g :=\n  IsBigOWith.of_bound <| trivial\n#align is_O_with_bot is_O_with_bot\n\n",
 "is_O_with_abs_right":
 "@[simp]\ntheorem is_O_with_abs_right : (IsBigOWith c l f fun x => |u x|) ↔ IsBigOWith c l f u :=\n  @isBigOWith_norm_right _ _ _ _ _ _ f u l\n#align is_O_with_abs_right is_O_with_abs_right\n\n",
 "is_O_with_abs_left":
 "@[simp]\ntheorem is_O_with_abs_left : IsBigOWith c l (fun x => |u x|) g ↔ IsBigOWith c l u g :=\n  @isBigOWith_norm_left _ _ _ _ _ _ g u l\n#align is_O_with_abs_left is_O_with_abs_left\n\n",
 "is_O_with_abs_abs":
 "theorem is_O_with_abs_abs : (IsBigOWith c l (fun x => |u x|) fun x => |v x|) ↔ IsBigOWith c l u v :=\n  isBigOWith_abs_left.trans isBigOWith_abs_right\n#align is_O_with_abs_abs is_O_with_abs_abs\n\n",
 "is_O_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_O.is_O_with : «expr =O[ ] » f l g → ∃ c : exprℝ, IsBigOWith c l f g :=\n  isBigO_iff_isBigOWith.1\n#align is_O.is_O_with is_O.is_O_with\n\n",
 "is_O_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_top : «expr =O[ ] » f («expr⊤») g ↔ ∃ C, ∀ x, «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» (g x) := by\n  rw [is_O_iff] <;> rfl\n#align is_O_top is_O_top\n\n",
 "is_O_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_sup : «expr =O[ ] » f («expr ⊔ » l l') g' ↔ «expr =O[ ] » f l g' ∧ «expr =O[ ] » f l' g' :=\n  ⟨fun h => ⟨h.mono le_sup_left, h.mono le_sup_right⟩, fun h => h.1.sup h.2⟩\n#align is_O_sup is_O_sup\n\n",
 "is_O_snd_prod'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_snd_prod' {f' : α → E' × F'} : «expr =O[ ] » (fun x => (f' x).2) l f' := by\n  simpa [is_O, is_O_with] using is_O_snd_prod\n#align is_O_snd_prod' is_O_snd_prod'\n\n",
 "is_O_snd_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_snd_prod : «expr =O[ ] » g' l fun x => (f' x, g' x) :=\n  isBigOWith_snd_prod.is_O\n#align is_O_snd_prod is_O_snd_prod\n\n",
 "is_O_self_const_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_self_const_mul' {c : R} (hc : IsUnit c) (f : α → R) (l : Filter α) : «expr =O[ ] » f l fun x => c * f x :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ (isBigOWith_self_const_mul' u f l).is_O\n#align is_O_self_const_mul' is_O_self_const_mul'\n\n",
 "is_O_self_const_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_self_const_mul (c : 𝕜) (hc : c ≠ 0) (f : α → 𝕜) (l : Filter α) : «expr =O[ ] » f l fun x => c * f x :=\n  isBigO_self_const_mul' (IsUnit.mk0 c hc) f l\n#align is_O_self_const_mul is_O_self_const_mul\n\n",
 "is_O_refl_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_refl_left : «expr =O[ ] » (fun x => f' x - f' x) l g' :=\n  (isBigO_zero g' l).congr_left fun x => (sub_self _).symm\n#align is_O_refl_left is_O_refl_left\n\n",
 "is_O_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_refl (f : α → E) (l : Filter α) : «expr =O[ ] » f l f :=\n  (isBigOWith_refl f l).is_O\n#align is_O_refl is_O_refl\n\n",
 "is_O_pure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_pure {x} : «expr =O[ ] » f'' (pure x) g'' ↔ g'' x = 0 → f'' x = 0 :=\n  calc\n    «expr =O[ ] » f'' (pure x) g'' ↔ «expr =O[ ] » (fun y : α => f'' x) (pure x) fun _ => g'' x := isBigO_congr rfl rfl\n    _ ↔ g'' x = 0 → f'' x = 0 := isBigO_const_const_iff _\n    \n#align is_O_pure is_O_pure\n\n",
 "is_O_prod_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_prod_left : «expr =O[ ] » (fun x => (f' x, g' x)) l k' ↔ «expr =O[ ] » f' l k' ∧ «expr =O[ ] » g' l k' :=\n  ⟨fun h => ⟨h.prod_left_fst, h.prod_left_snd⟩, fun h => h.1.prod_left h.2⟩\n#align is_O_prod_left is_O_prod_left\n\n",
 "is_O_principal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_principal {s : Set α} :\n    «expr =O[ ] » f ((filter.principal) s) g ↔ ∃ c, ∀ x ∈ s, «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x) := by\n  rw [is_O_iff] <;> rfl\n#align is_O_principal is_O_principal\n\n",
 "is_O_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_pi {ι : Type _} [Fintype ι] {E' : ι → Type _} [∀ i, NormedAddCommGroup (E' i)] {f : α → ∀ i, E' i} :\n    «expr =O[ ] » f l g' ↔ ∀ i, «expr =O[ ] » (fun x => f x i) l g' :=\n  by\n  simp only [is_O_iff_eventually_is_O_with, ← eventually_all]\n  exact eventually_congr (eventually_at_top.2 ⟨0, fun c => is_O_with_pi⟩)\n#align is_O_pi is_O_pi\n\n",
 "is_O_one_nat_at_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_one_nat_at_top_iff {f : ℕ → E''} :\n    «expr =O[ ] » f atTop (fun n => 1 : ℕ → exprℝ) ↔ ∃ C, ∀ n, «expr‖ ‖» (f n) ≤ C :=\n  iff.trans (isBigO_nat_atTop_iff fun n h => (one_ne_zero h).elim) <| by simp only [norm_one, mul_one]\n#align is_O_one_nat_at_top_iff is_O_one_nat_at_top_iff\n\n",
 "is_O_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem is_O_one_iff : «expr =O[ ] » f l (fun x => 1 : α → F) ↔ IsBoundedUnder (· ≤ ·) l fun x => «expr‖ ‖» (f x) :=\n  by\n  simp only [is_O_iff, norm_one, mul_one]\n  rfl\n#align is_O_one_iff is_O_one_iff\n\n",
 "is_O_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n#print Filter.Tendsto.isBigO_one /-\ntheorem Filter.Tendsto.isBigO_one {c : E'} (h : Tendsto f' l ((nhds) c)) : «expr =O[ ] » f' l (fun x => 1 : α → F) :=\n  h.norm.is_bounded_under_le.is_O_one F\n#align filter.tendsto.is_O_one Filter.Tendsto.isBigO_one\n-/\n\n",
 "is_O_of_subsingleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[nontriviality]\ntheorem is_O_of_subsingleton [subsingleton E'] : «expr =O[ ] » f' l g' :=\n  isLittleO_of_subsingleton.is_O\n#align is_O_of_subsingleton is_O_of_subsingleton\n\n",
 "is_O_of_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_of_le' (hfg : ∀ x, «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) : «expr =O[ ] » f l g :=\n  (isBigOWith_of_le' l hfg).is_O\n#align is_O_of_le' is_O_of_le'\n\n",
 "is_O_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_of_le (hfg : ∀ x, «expr‖ ‖» (f x) ≤ «expr‖ ‖» (g x)) : «expr =O[ ] » f l g :=\n  (isBigOWith_of_le l hfg).is_O\n#align is_O_of_le is_O_of_le\n\n",
 "is_O_of_div_tendsto_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_of_div_tendsto_nhds {α : Type _} {l : Filter α} {f g : α → 𝕜}\n    (hgf :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (g x = 0 → f x = 0))\n    (c : 𝕜) (H : Filter.Tendsto (f / g) l ((nhds) c)) : «expr =O[ ] » f l g :=\n  (isBigO_iff_div_isBoundedUnder hgf).2 <| H.norm.is_bounded_under_le\n#align is_O_of_div_tendsto_nhds is_O_of_div_tendsto_nhds\n\n",
 "is_O_norm_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_norm_right : («expr =O[ ] » f l fun x => «expr‖ ‖» (g' x)) ↔ «expr =O[ ] » f l g' :=\n  by\n  unfold is_O\n  exact exists_congr fun _ => is_O_with_norm_right\n#align is_O_norm_right is_O_norm_right\n\n",
 "is_O_norm_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_norm_norm :\n    («expr =O[ ] » (fun x => «expr‖ ‖» (f' x)) l fun x => «expr‖ ‖» (g' x)) ↔ «expr =O[ ] » f' l g' :=\n  isBigO_norm_left.trans isBigO_norm_right\n#align is_O_norm_norm is_O_norm_norm\n\n",
 "is_O_norm_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_norm_left : «expr =O[ ] » (fun x => «expr‖ ‖» (f' x)) l g ↔ «expr =O[ ] » f' l g :=\n  by\n  unfold is_O\n  exact exists_congr fun _ => is_O_with_norm_left\n#align is_O_norm_left is_O_norm_left\n\n",
 "is_O_neg_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_neg_right : («expr =O[ ] » f l fun x => -g' x) ↔ «expr =O[ ] » f l g' :=\n  by\n  unfold is_O\n  exact exists_congr fun _ => is_O_with_neg_right\n#align is_O_neg_right is_O_neg_right\n\n",
 "is_O_neg_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_neg_left : «expr =O[ ] » (fun x => -f' x) l g ↔ «expr =O[ ] » f' l g :=\n  by\n  unfold is_O\n  exact exists_congr fun _ => is_O_with_neg_left\n#align is_O_neg_left is_O_neg_left\n\n",
 "is_O_nat_at_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_nat_at_top_iff {f : ℕ → E''} {g : ℕ → F''} (h : ∀ x, g x = 0 → f x = 0) :\n    «expr =O[ ] » f atTop g ↔ ∃ C, ∀ x, «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» (g x) := by\n  rw [← Nat.cofinite_eq_atTop, is_O_cofinite_iff h]\n#align is_O_nat_at_top_iff is_O_nat_at_top_iff\n\n",
 "is_O_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_map {k : β → α} {l : Filter β} : «expr =O[ ] » f (map k l) g ↔ «expr =O[ ] » (f ∘ k) l (g ∘ k) := by\n  simp only [is_O, is_O_with_map]\n#align is_O_map is_O_map\n\n",
 "is_O_iff_is_bounded_under_le_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_iff_is_bounded_under_le_div\n    (h :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (g'' x ≠ 0)) :\n    «expr =O[ ] » f l g'' ↔ IsBoundedUnder (· ≤ ·) l fun x => «expr‖ ‖» (f x) / «expr‖ ‖» (g'' x) :=\n  by\n  simp only [is_O_iff, is_bounded_under, is_bounded, eventually_map]\n  exact exists_congr fun c => eventually_congr <| h.mono fun x hx => (div_le_iff <| norm_pos_iff.2 hx).symm\n#align is_O_iff_is_bounded_under_le_div is_O_iff_is_bounded_under_le_div\n\n",
 "is_O_iff_is_O_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Definition of `is_O` in terms of `is_O_with`. We record it in a lemma as `is_O` is\nirreducible. -/\ntheorem is_O_iff_is_O_with : «expr =O[ ] » f l g ↔ ∃ c : exprℝ, IsBigOWith c l f g := by rw [is_O]\n#align is_O_iff_is_O_with is_O_iff_is_O_with\n\n",
 "is_O_iff_exists_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\ntheorem is_O_iff_exists_eq_mul :\n    «expr =O[ ] » u l v ↔ ∃ (φ : α → 𝕜)(hφ : l.is_bounded_under (· ≤ ·) (norm ∘ φ)), «expr =ᶠ[ ] » u l (φ * v) :=\n  by\n  constructor\n  · rintro h\n    rcases h.exists_nonneg with ⟨c, hnnc, hc⟩\n    rcases hc.exists_eq_mul hnnc with ⟨φ, hφ, huvφ⟩\n    exact ⟨φ, ⟨c, hφ⟩, huvφ⟩\n  · rintro ⟨φ, ⟨c, hφ⟩, huvφ⟩\n    exact is_O_iff_is_O_with.2 ⟨c, is_O_with_of_eq_mul φ hφ huvφ⟩\n#align is_O_iff_exists_eq_mul is_O_iff_exists_eq_mul\n\n",
 "is_O_iff_eventually_is_O_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/-- `f = O(g)` if and only if `is_O_with c f g` for all sufficiently large `c`. -/\ntheorem is_O_iff_eventually_is_O_with :\n    «expr =O[ ] » f l g' ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" atTop\n        (IsBigOWith c l f g') :=\n  isBigO_iff_isBigOWith.trans ⟨fun ⟨c, hc⟩ => mem_atTop_sets.2 ⟨c, fun c' hc' => hc.weaken hc'⟩, fun h => h.exists⟩\n#align is_O_iff_eventually_is_O_with is_O_iff_eventually_is_O_with\n\n",
 "is_O_iff_eventually":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- `f = O(g)` if and only if `∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖` for all sufficiently large `c`. -/\ntheorem is_O_iff_eventually :\n    «expr =O[ ] » f l g' ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" atTop\n        («expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g' x))) :=\n  isBigO_iff_eventually_isBigOWith.trans <| by simp only [is_O_with]\n#align is_O_iff_eventually is_O_iff_eventually\n\n",
 "is_O_iff_div_is_bounded_under":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_iff_div_is_bounded_under {α : Type _} {l : Filter α} {f g : α → 𝕜}\n    (hgf :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (g x = 0 → f x = 0)) :\n    «expr =O[ ] » f l g ↔ IsBoundedUnder (· ≤ ·) l fun x => «expr‖ ‖» (f x / g x) :=\n  by\n  refine' ⟨div_is_bounded_under_of_is_O, fun h => _⟩\n  obtain ⟨c, hc⟩ := h\n  simp only [eventually_map, norm_div] at hc\n  refine' is_O.of_bound c (hc.mp <| hgf.mono fun x hx₁ hx₂ => _)\n  by_cases hgx : g x = 0\n  · simp [hx₁ hgx, hgx]\n  · exact (div_le_iff (norm_pos_iff.2 hgx)).mp hx₂\n#align is_O_iff_div_is_bounded_under is_O_iff_div_is_bounded_under\n\n",
 "is_O_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Definition of `is_O` in terms of filters. We record it in a lemma as we will set\n`is_O` to be irreducible at the end of this file. -/\ntheorem is_O_iff :\n    «expr =O[ ] » f l g ↔\n      ∃ c : exprℝ,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) :=\n  by simp only [is_O, is_O_with]\n#align is_O_iff is_O_iff\n\n",
 "is_O_fst_prod'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_fst_prod' {f' : α → E' × F'} : «expr =O[ ] » (fun x => (f' x).1) l f' := by\n  simpa [is_O, is_O_with] using is_O_fst_prod\n#align is_O_fst_prod' is_O_fst_prod'\n\n",
 "is_O_fst_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_fst_prod : «expr =O[ ] » f' l fun x => (f' x, g' x) :=\n  isBigOWith_fst_prod.is_O\n#align is_O_fst_prod is_O_fst_prod\n\n",
 "is_O_const_smul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_smul_right {c : 𝕜} (hc : c ≠ 0) :\n    («expr =O[ ] » f l fun x => «expr • » c (f' x)) ↔ «expr =O[ ] » f l f' :=\n  by\n  have cne0 : «expr‖ ‖» c ≠ 0 := mt norm_eq_zero.mp hc\n  rw [← is_O_norm_right]\n  simp only [norm_smul]\n  rw [is_O_const_mul_right_iff cne0, is_O_norm_right]\n#align is_O_const_smul_right is_O_const_smul_right\n\n",
 "is_O_const_smul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_smul_left {c : 𝕜} (hc : c ≠ 0) :\n    «expr =O[ ] » (fun x => «expr • » c (f' x)) l g ↔ «expr =O[ ] » f' l g :=\n  by\n  have cne0 : «expr‖ ‖» c ≠ 0 := mt norm_eq_zero.mp hc\n  rw [← is_O_norm_left]\n  simp only [norm_smul]\n  rw [is_O_const_mul_left_iff cne0, is_O_norm_left]\n#align is_O_const_smul_left is_O_const_smul_left\n\n",
 "is_O_const_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_one (c : E) (l : Filter α) : «expr =O[ ] » (fun x : α => c) l fun x => (1 : F) :=\n  (isBigOWith_const_one F c l).is_O\n#align is_O_const_one is_O_const_one\n\n",
 "is_O_const_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_of_tendsto {y : E''} (h : Tendsto f'' l ((nhds) y)) {c : F''} (hc : c ≠ 0) :\n    «expr =O[ ] » f'' l fun x => c :=\n  h.norm.is_bounded_under_le.is_O_const hc\n#align is_O_const_of_tendsto is_O_const_of_tendsto\n\n",
 "is_O_const_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_of_ne {c : F''} (hc : c ≠ 0) :\n    («expr =O[ ] » f l fun x => c) ↔ IsBoundedUnder (· ≤ ·) l (norm ∘ f) :=\n  ⟨fun h => h.is_bounded_under_le, fun h => h.is_O_const hc⟩\n#align is_O_const_of_ne is_O_const_of_ne\n\n",
 "is_O_const_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_mul_self (c : R) (f : α → R) (l : Filter α) : «expr =O[ ] » (fun x => c * f x) l f :=\n  (isBigOWith_const_mul_self c f l).is_O\n#align is_O_const_mul_self is_O_const_mul_self\n\n",
 "is_O_const_mul_right_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_mul_right_iff' {g : α → R} {c : R} (hc : IsUnit c) :\n    («expr =O[ ] » f l fun x => c * g x) ↔ «expr =O[ ] » f l g :=\n  ⟨fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc⟩\n#align is_O_const_mul_right_iff' is_O_const_mul_right_iff'\n\n",
 "is_O_const_mul_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_mul_right_iff {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    («expr =O[ ] » f l fun x => c * g x) ↔ «expr =O[ ] » f l g :=\n  isBigO_const_mul_right_iff' <| IsUnit.mk0 c hc\n#align is_O_const_mul_right_iff is_O_const_mul_right_iff\n\n",
 "is_O_const_mul_left_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_mul_left_iff' {f : α → R} {c : R} (hc : IsUnit c) :\n    «expr =O[ ] » (fun x => c * f x) l g ↔ «expr =O[ ] » f l g :=\n  ⟨(isBigO_self_const_mul' hc f l).trans, fun h => h.const_mul_left c⟩\n#align is_O_const_mul_left_iff' is_O_const_mul_left_iff'\n\n",
 "is_O_const_mul_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_mul_left_iff {f : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    «expr =O[ ] » (fun x => c * f x) l g ↔ «expr =O[ ] » f l g :=\n  isBigO_const_mul_left_iff' <| IsUnit.mk0 c hc\n#align is_O_const_mul_left_iff is_O_const_mul_left_iff\n\n",
 "is_O_const_left_iff_pos_le_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- `(λ x, c) =O[l] f` if and only if `f` is bounded away from zero. -/\ntheorem is_O_const_left_iff_pos_le_norm {c : E''} (hc : c ≠ 0) :\n    «expr =O[ ] » (fun x => c) l f' ↔\n      ∃ b,\n        0 < b ∧\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n            (b ≤ «expr‖ ‖» (f' x)) :=\n  by\n  constructor\n  · intro h\n    rcases h.exists_pos with ⟨C, hC₀, hC⟩\n    refine' ⟨«expr‖ ‖» c / C, div_pos (norm_pos_iff.2 hc) hC₀, _⟩\n    exact hC.bound.mono fun x => (div_le_iff' hC₀).2\n  · rintro ⟨b, hb₀, hb⟩\n    refine' is_O.of_bound («expr‖ ‖» c / b) (hb.mono fun x hx => _)\n    rw [div_mul_eq_mul_div, mul_div_assoc]\n    exact le_mul_of_one_le_right (norm_nonneg _) ((one_le_div hb₀).2 hx)\n#align is_O_const_left_iff_pos_le_norm is_O_const_left_iff_pos_le_norm\n\n",
 "is_O_const_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_const_iff {c : F''} :\n    («expr =O[ ] » f'' l fun x => c) ↔\n      (c = 0 → «expr =ᶠ[ ] » f'' l 0) ∧ IsBoundedUnder (· ≤ ·) l fun x => «expr‖ ‖» (f'' x) :=\n  by\n  refine' ⟨fun h => ⟨fun hc => is_O_zero_right_iff.1 (by rwa [← hc]), h.is_bounded_under_le⟩, _⟩\n  rintro ⟨hcf, hf⟩\n  rcases eq_or_ne c 0 with (hc | hc)\n  exacts[(hcf hc).trans_is_O (is_O_zero _ _), hf.is_O_const hc]\n#align is_O_const_iff is_O_const_iff\n\n",
 "is_O_const_const_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_const_const_iff {c : E''} {c' : F''} (l : Filter α) [l.ne_bot] :\n    («expr =O[ ] » (fun x : α => c) l fun x => c') ↔ c' = 0 → c = 0 :=\n  by\n  rcases eq_or_ne c' 0 with (rfl | hc')\n  · simp [eventually_eq]\n  · simp [hc', is_O_const_const _ hc']\n#align is_O_const_const_iff is_O_const_const_iff\n\n",
 "is_O_const_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_const_const (c : E) {c' : F''} (hc' : c' ≠ 0) (l : Filter α) :\n    «expr =O[ ] » (fun x : α => c) l fun x => c' :=\n  (isBigOWith_const_const c hc' l).is_O\n#align is_O_const_const is_O_const_const\n\n",
 "is_O_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n#print Filter.IsBoundedUnder.isBigO_const /-\ntheorem Filter.IsBoundedUnder.isBigO_const (h : IsBoundedUnder (· ≤ ·) l (norm ∘ f)) {c : F''} (hc : c ≠ 0) :\n    «expr =O[ ] » f l fun x => c :=\n  (h.is_O_one (exprℝ)).trans (isBigO_const_const _ hc _)\n#align filter.is_bounded_under.is_O_const Filter.IsBoundedUnder.isBigO_const\n-/\n\n",
 "is_O_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Transfer `is_O` over a `homeomorph`. -/\ntheorem is_O_congr (e : «expr ≃ₜ » α β) {b : β} {f : β → E} {g : β → F} :\n    «expr =O[ ] » f ((nhds) b) g ↔ «expr =O[ ] » (f ∘ e) ((nhds) (e.symm b)) (g ∘ e) :=\n  by\n  unfold is_O\n  exact exists_congr fun C => e.is_O_with_congr\n#align is_O_congr is_O_congr\n\n",
 "is_O_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_comm : «expr =O[ ] » (fun x => f₁ x - f₂ x) l g ↔ «expr =O[ ] » (fun x => f₂ x - f₁ x) l g :=\n  ⟨IsBigO.symm, IsBigO.symm⟩\n#align is_O_comm is_O_comm\n\n",
 "is_O_cofinite_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O_cofinite_iff (h : ∀ x, g'' x = 0 → f'' x = 0) :\n    «expr =O[ ] » f'' cofinite g'' ↔ ∃ C, ∀ x, «expr‖ ‖» (f'' x) ≤ C * «expr‖ ‖» (g'' x) :=\n  ⟨fun h' =>\n    let ⟨C, C₀, hC⟩ := bound_of_isBigO_cofinite h'\n    ⟨C, fun x => if hx : g'' x = 0 then by simp [h _ hx, hx] else hC hx⟩,\n    fun h => (isBigO_top.2 h).mono le_top⟩\n#align is_O_cofinite_iff is_O_cofinite_iff\n\n",
 "is_O_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem is_O_bot : «expr =O[ ] » f («expr⊥») g :=\n  (isBigOWith_bot 1 f g).is_O\n#align is_O_bot is_O_bot\n\n",
 "is_O_abs_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_abs_right : («expr =O[ ] » f l fun x => |u x|) ↔ «expr =O[ ] » f l u :=\n  @isBigO_norm_right _ _ (exprℝ) _ _ _ _ _\n#align is_O_abs_right is_O_abs_right\n\n",
 "is_O_abs_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[simp]\ntheorem is_O_abs_left : «expr =O[ ] » (fun x => |u x|) l g ↔ «expr =O[ ] » u l g :=\n  @isBigO_norm_left _ _ _ _ _ g u l\n#align is_O_abs_left is_O_abs_left\n\n",
 "is_O_abs_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O_abs_abs : («expr =O[ ] » (fun x => |u x|) l fun x => |v x|) ↔ «expr =O[ ] » u l v :=\n  isBigO_abs_left.trans isBigO_abs_right\n#align is_O_abs_abs is_O_abs_abs\n\n",
 "is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n#print Filter.Eventually.isBigO /-\ntheorem Filter.Eventually.isBigO {f : α → E} {g : α → exprℝ} {l : Filter α}\n    (hfg :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (f x) ≤ g x)) :\n    «expr =O[ ] » f l g :=\n  IsBigO.of_bound' <| hfg.mono fun x hx => hx.trans <| Real.le_norm_self _\n#align filter.eventually.is_O Filter.Eventually.isBigO\n-/\n\n",
 "inv_rev":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.inv_rev {f : α → 𝕜} {g : α → 𝕜'} (h : «expr =o[ ] » f l g)\n    (h₀ :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (f x = 0 → g x = 0)) :\n    «expr =o[ ] » (fun x => (g x)⁻¹) l fun x => (f x)⁻¹ :=\n  IsLittleO.of_isBigOWith fun c hc => (h.def' hc).inv_rev h₀\n#align is_o.inv_rev is_o.inv_rev\n\n",
 "insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem is_o.insert [TopologicalSpace α] {x : α} {s : Set α} {g : α → E'} {g' : α → F'}\n    (h1 : «expr =o[ ] » g (nhds_within s x) g') (h2 : g x = 0) : «expr =o[ ] » g (nhds_within (insert x s) x) g' :=\n  (isLittleO_insert h2).mpr h1\n#align is_o.insert is_o.insert\n\n",
 "exists_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O.exists_pos (h : «expr =O[ ] » f l g') : ∃ (c : _)(H : 0 < c), IsBigOWith c l f g' :=\n  let ⟨c, hc⟩ := h.is_O_with\n  hc.exists_pos\n#align is_O.exists_pos is_O.exists_pos\n\n",
 "exists_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_O.exists_nonneg (h : «expr =O[ ] » f l g') : ∃ (c : _)(H : 0 ≤ c), IsBigOWith c l f g' :=\n  let ⟨c, hc⟩ := h.is_O_with\n  hc.exists_nonneg\n#align is_O.exists_nonneg is_O.exists_nonneg\n\n",
 "exists_mem_basis":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O.exists_mem_basis {ι} {p : ι → Prop} {s : ι → Set α} (h : «expr =O[ ] » f l g') (hb : l.has_basis p s) :\n    ∃ (c : exprℝ)(hc : 0 < c)(i : ι)(hi : p i), ∀ x ∈ s i, «expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g' x) :=\n  flip Exists₂.imp h.exists_pos fun c hc h => by simpa only [is_O_with_iff, hb.eventually_iff, exists_prop] using h\n#align is_O.exists_mem_basis is_O.exists_mem_basis\n\n",
 "exists_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\ntheorem is_O_with.exists_eq_mul (h : IsBigOWith c l u v) (hc : 0 ≤ c) :\n    ∃ (φ : α → 𝕜)(hφ :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr‖ ‖» (φ x) ≤ c)),\n      «expr =ᶠ[ ] » u l (φ * v) :=\n  (isBigOWith_iff_exists_eq_mul hc).mp h\n#align is_O_with.exists_eq_mul is_O_with.exists_eq_mul\n\n",
 "eventually_mul_div_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/-- If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem is_o.eventually_mul_div_cancel (h : «expr =o[ ] » u l v) : «expr =ᶠ[ ] » (u / v * v) l u :=\n  (h.forall_is_O_with zero_lt_one).eventually_mul_div_cancel\n#align is_o.eventually_mul_div_cancel is_o.eventually_mul_div_cancel\n\n",
 "eq_zero_of_norm_pow_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O.eq_zero_of_norm_pow_within {f : E'' → F''} {s : Set E''} {x₀ : E''} {n : ℕ}\n    (h : «expr =O[ ] » f (nhds_within s x₀) fun x => «expr‖ ‖» (x - x₀) ^ n) (hx₀ : x₀ ∈ s) (hn : 0 < n) : f x₀ = 0 :=\n  mem_of_mem_nhdsWithin hx₀ h.eq_zero_imp <| by simp_rw [sub_self, norm_zero, zero_pow hn]\n#align is_O.eq_zero_of_norm_pow_within is_O.eq_zero_of_norm_pow_within\n\n",
 "eq_zero_of_norm_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O.eq_zero_of_norm_pow {f : E'' → F''} {x₀ : E''} {n : ℕ}\n    (h : «expr =O[ ] » f ((nhds) x₀) fun x => «expr‖ ‖» (x - x₀) ^ n) (hn : 0 < n) : f x₀ = 0 :=\n  by\n  rw [← nhdsWithin_univ] at h\n  exact h.eq_zero_of_norm_pow_within (mem_univ _) hn\n#align is_O.eq_zero_of_norm_pow is_O.eq_zero_of_norm_pow\n\n",
 "eq_zero_imp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem is_O.eq_zero_imp (h : «expr =O[ ] » f'' l g'') :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n      (g'' x = 0 → f'' x = 0) :=\n  let ⟨C, hC⟩ := h.is_O_with\n  hC.eq_zero_imp\n#align is_O.eq_zero_imp is_O.eq_zero_imp\n\n",
 "div_is_bounded_under_of_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem div_is_bounded_under_of_is_O {α : Type _} {l : Filter α} {f g : α → 𝕜} (h : «expr =O[ ] » f l g) :\n    IsBoundedUnder (· ≤ ·) l fun x => «expr‖ ‖» (f x / g x) :=\n  by\n  obtain ⟨c, h₀, hc⟩ := h.exists_nonneg\n  refine' ⟨c, eventually_map.2 (hc.bound.mono fun x hx => _)⟩\n  rw [norm_div]\n  exact div_le_of_nonneg_of_le_mul (norm_nonneg _) h₀ hx\n#align div_is_bounded_under_of_is_O div_is_bounded_under_of_is_O\n\n",
 "def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.def' (h : «expr =o[ ] » f l g) (hc : 0 < c) : IsBigOWith c l f g :=\n  isBigOWith_iff.2 <| isLittleO_iff.1 h hc\n#align is_o.def' is_o.def'\n\n",
 "def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o.def (h : «expr =o[ ] » f l g) (hc : 0 < c) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n      («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) :=\n  isLittleO_iff.1 h hc\n#align is_o.def is_o.def\n\n",
 "const_smul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_o.const_smul_left (h : «expr =o[ ] » f' l g) (c : 𝕜) : «expr =o[ ] » («expr • » c f') l g :=\n  IsLittleO.of_norm_left <| by simpa only [← norm_smul] using h.norm_left.const_mul_left («expr‖ ‖» c)\n#align is_o.const_smul_left is_o.const_smul_left\n\n",
 "const_mul_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.const_mul_right' {g : α → R} {c : R} (hc : IsUnit c) (h : «expr =o[ ] » f l g) :\n    «expr =o[ ] » f l fun x => c * g x :=\n  h.trans_is_O (isBigO_self_const_mul' hc g l)\n#align is_o.const_mul_right' is_o.const_mul_right'\n\n",
 "const_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.const_mul_right {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) (h : «expr =o[ ] » f l g) :\n    «expr =o[ ] » f l fun x => c * g x :=\n  h.const_mul_right' <| IsUnit.mk0 c hc\n#align is_o.const_mul_right is_o.const_mul_right\n\n",
 "const_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.const_mul_left {f : α → R} (h : «expr =o[ ] » f l g) (c : R) : «expr =o[ ] » (fun x => c * f x) l g :=\n  (isBigO_const_mul_self c f l).trans_is_o h\n#align is_o.const_mul_left is_o.const_mul_left\n\n",
 "congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.congr_right (h : «expr =o[ ] » f l g₁) (hg : ∀ x, g₁ x = g₂ x) : «expr =o[ ] » f l g₂ :=\n  h.congr (fun _ => rfl) hg\n#align is_o.congr_right is_o.congr_right\n\n",
 "congr_of_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.congr_of_sub (h : «expr =o[ ] » (fun x => f₁ x - f₂ x) l g) :\n    «expr =o[ ] » f₁ l g ↔ «expr =o[ ] » f₂ l g :=\n  ⟨fun h' => (h'.sub h).congr_left fun x => sub_sub_cancel _ _, fun h' =>\n    (h.add h').congr_left fun x => sub_add_cancel _ _⟩\n#align is_o.congr_of_sub is_o.congr_of_sub\n\n",
 "congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.congr_left (h : «expr =o[ ] » f₁ l g) (hf : ∀ x, f₁ x = f₂ x) : «expr =o[ ] » f₂ l g :=\n  h.congr hf fun _ => rfl\n#align is_o.congr_left is_o.congr_left\n\n",
 "congr_const":
 "theorem is_O_with.congr_const (h : IsBigOWith c₁ l f g) (hc : c₁ = c₂) : IsBigOWith c₂ l f g :=\n  h.congr hc (fun _ => rfl) fun _ => rfl\n#align is_O_with.congr_const is_O_with.congr_const\n\n",
 "congr'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.congr' (h : «expr =o[ ] » f₁ l g₁) (hf : «expr =ᶠ[ ] » f₁ l f₂) (hg : «expr =ᶠ[ ] » g₁ l g₂) :\n    «expr =o[ ] » f₂ l g₂ :=\n  (isLittleO_congr hf hg).mp h\n#align is_o.congr' is_o.congr'\n\n",
 "congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.congr (h : «expr =o[ ] » f₁ l g₁) (hf : ∀ x, f₁ x = f₂ x) (hg : ∀ x, g₁ x = g₂ x) :\n    «expr =o[ ] » f₂ l g₂ :=\n  h.congr' (univ_mem' hf) (univ_mem' hg)\n#align is_o.congr is_o.congr\n\n",
 "comp_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.comp_tendsto (hfg : «expr =o[ ] » f l g) {k : β → α} {l' : Filter β} (hk : Tendsto k l' l) :\n    «expr =o[ ] » (f ∘ k) l' (g ∘ k) :=\n  IsLittleO.of_isBigOWith fun c cpos => (hfg.forall_is_O_with cpos).comp_tendsto hk\n#align is_o.comp_tendsto is_o.comp_tendsto\n\n",
 "bound_of_is_O_nat_at_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem bound_of_is_O_nat_at_top {f : ℕ → E} {g'' : ℕ → E''} (h : «expr =O[ ] » f atTop g'') :\n    ∃ C > 0, ∀ ⦃x⦄, g'' x ≠ 0 → «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» (g'' x) :=\n  bound_of_isBigO_cofinite <| by rwa [Nat.cofinite_eq_atTop]\n#align bound_of_is_O_nat_at_top bound_of_is_O_nat_at_top\n\n",
 "bound_of_is_O_cofinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- If `f x = O(g x)` along `cofinite`, then there exists a positive constant `C` such that\n`‖f x‖ ≤ C * ‖g x‖` whenever `g x ≠ 0`. -/\ntheorem bound_of_is_O_cofinite (h : «expr =O[ ] » f cofinite g'') :\n    ∃ C > 0, ∀ ⦃x⦄, g'' x ≠ 0 → «expr‖ ‖» (f x) ≤ C * «expr‖ ‖» (g'' x) :=\n  by\n  rcases h.exists_pos with ⟨C, C₀, hC⟩\n  rw [is_O_with, eventually_cofinite] at hC\n  rcases(hC.to_finset.image fun x => «expr‖ ‖» (f x) / «expr‖ ‖» (g'' x)).exists_le with ⟨C', hC'⟩\n  have : ∀ x, C * «expr‖ ‖» (g'' x) < «expr‖ ‖» (f x) → «expr‖ ‖» (f x) / «expr‖ ‖» (g'' x) ≤ C' := by simpa using hC'\n  refine' ⟨max C C', lt_max_iff.2 (or.inl C₀), fun x h₀ => _⟩\n  rw [max_mul_of_nonneg _ _ (norm_nonneg _), le_max_iff, or_iff_not_imp_left, not_le]\n  exact fun hx => (div_le_iff (norm_pos_iff.2 h₀)).1 (this _ hx)\n#align bound_of_is_O_cofinite bound_of_is_O_cofinite\n\n",
 "bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_O.bound :\n    «expr =O[ ] » f l g →\n      ∃ c : exprℝ,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          («expr‖ ‖» (f x) ≤ c * «expr‖ ‖» (g x)) :=\n  isBigO_iff.1\n#align is_O.bound is_O.bound\n\n",
 "add_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_O_with.add_is_o (h₁ : IsBigOWith c₁ l f₁ g) (h₂ : «expr =o[ ] » f₂ l g) (hc : c₁ < c₂) :\n    IsBigOWith c₂ l (fun x => f₁ x + f₂ x) g :=\n  (h₁.add (h₂.forall_is_O_with (sub_pos.2 hc))).congr_const (add_sub_cancel'_right _ _)\n#align is_O_with.add_is_o is_O_with.add_is_o\n\n",
 "add_is_O_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.add_is_O_with (h₁ : «expr =o[ ] » f₁ l g) (h₂ : IsBigOWith c₁ l f₂ g) (hc : c₁ < c₂) :\n    IsBigOWith c₂ l (fun x => f₁ x + f₂ x) g :=\n  (h₂.add_is_o h₁ hc).congr_left fun _ => add_comm _ _\n#align is_o.add_is_O_with is_o.add_is_O_with\n\n",
 "add_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_o.add_is_O (h₁ : «expr =o[ ] » f₁ l g) (h₂ : «expr =O[ ] » f₂ l g) :\n    «expr =O[ ] » (fun x => f₁ x + f₂ x) l g :=\n  h₁.is_O.add h₂\n#align is_o.add_is_O is_o.add_is_O\n\n",
 "add_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_o.add_add (h₁ : «expr =o[ ] » f₁ l g₁) (h₂ : «expr =o[ ] » f₂ l g₂) :\n    «expr =o[ ] » (fun x => f₁ x + f₂ x) l fun x => «expr‖ ‖» (g₁ x) + «expr‖ ‖» (g₂ x) := by\n  refine' (h₁.trans_le fun x => _).add (h₂.trans_le _) <;> simp [abs_of_nonneg, add_nonneg]\n#align is_o.add_add is_o.add_add\n\n",
 "add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_o.add (h₁ : «expr =o[ ] » f₁ l g) (h₂ : «expr =o[ ] » f₂ l g) : «expr =o[ ] » (fun x => f₁ x + f₂ x) l g :=\n  IsLittleO.of_isBigOWith fun c cpos =>\n    ((h₁.forall_is_O_with <| half_pos cpos).add (h₂.forall_is_O_with <| half_pos cpos)).congr_const (add_halves c)\n#align is_o.add is_o.add\n\n"}