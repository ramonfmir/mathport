{"zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.zpow {f : α → 𝕜} {g : α → 𝕜'} (h : «expr =Θ[ ] » f l g) (n : ℤ) :\n    «expr =Θ[ ] » (fun x => f x ^ n) l fun x => g x ^ n :=\n  by\n  cases n\n  · simpa only [zpow_ofNat] using h.pow _\n  · simpa only [zpow_negSucc] using (h.pow _).inv\n#align is_Theta.zpow is_Theta.zpow\n\n",
 "trans_is_o":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n@[trans]\ntheorem is_Theta.trans_is_o {f : α → E} {g : α → F'} {k : α → G} (h₁ : «expr =Θ[ ] » f l g) (h₂ : «expr =o[ ] » g l k) :\n    «expr =o[ ] » f l k :=\n  h₁.1.trans_is_o h₂\n#align is_Theta.trans_is_o is_Theta.trans_is_o\n\n",
 "trans_is_Theta":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[trans]\ntheorem _root_.filter.eventually_eq.trans_is_Theta {f₁ f₂ : α → E} {g : α → F} (hf : «expr =ᶠ[ ] » f₁ l f₂)\n    (h : «expr =Θ[ ] » f₂ l g) : «expr =Θ[ ] » f₁ l g :=\n  ⟨hf.trans_is_O h.1, h.2.trans_eventually_eq hf.symm⟩\n#align filter.eventually_eq.trans_is_Theta filter.eventually_eq.trans_is_Theta\n\n",
 "trans_is_O":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n@[trans]\ntheorem is_Theta.trans_is_O {f : α → E} {g : α → F'} {k : α → G} (h₁ : «expr =Θ[ ] » f l g) (h₂ : «expr =O[ ] » g l k) :\n    «expr =O[ ] » f l k :=\n  h₁.1.trans h₂\n#align is_Theta.trans_is_O is_Theta.trans_is_O\n\n",
 "trans_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[trans]\ntheorem is_Theta.trans_eventually_eq {f : α → E} {g₁ g₂ : α → F} (h : «expr =Θ[ ] » f l g₁)\n    (hg : «expr =ᶠ[ ] » g₁ l g₂) : «expr =Θ[ ] » f l g₂ :=\n  ⟨h.1.trans_eventually_eq hg, hg.symm.trans_is_O h.2⟩\n#align is_Theta.trans_eventually_eq is_Theta.trans_eventually_eq\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[trans]\ntheorem is_Theta.trans {f : α → E} {g : α → F'} {k : α → G} (h₁ : «expr =Θ[ ] » f l g) (h₂ : «expr =Θ[ ] » g l k) :\n    «expr =Θ[ ] » f l k :=\n  ⟨h₁.1.trans h₂.1, h₂.2.trans h₁.2⟩\n#align is_Theta.trans is_Theta.trans\n\n",
 "tendsto_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_Theta.tendsto_zero_iff (h : «expr =Θ[ ] » f'' l g'') : tendsto f'' l ((nhds) 0) ↔ tendsto g'' l ((nhds) 0) :=\n  by simp only [← is_o_one_iff (exprℝ), h.is_o_congr_left]\n#align is_Theta.tendsto_zero_iff is_Theta.tendsto_zero_iff\n\n",
 "tendsto_norm_at_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.tendsto_norm_at_top_iff (h : «expr =Θ[ ] » f' l g') :\n    tendsto (norm ∘ f') l at_top ↔ tendsto (norm ∘ g') l at_top := by\n  simp only [← is_o_const_left_of_ne (one_ne_zero' (exprℝ)), h.is_o_congr_right]\n#align is_Theta.tendsto_norm_at_top_iff is_Theta.tendsto_norm_at_top_iff\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[symm]\ntheorem is_Theta.symm (h : «expr =Θ[ ] » f l g) : «expr =Θ[ ] » g l f :=\n  h.symm\n#align is_Theta.symm is_Theta.symm\n\n",
 "sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem is_Theta.sup (h : «expr =Θ[ ] » f' l g') (h' : «expr =Θ[ ] » f' l' g') : «expr =Θ[ ] » f' («expr ⊔ » l l') g' :=\n  ⟨h.1.sup h'.1, h.2.sup h'.2⟩\n#align is_Theta.sup is_Theta.sup\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_Theta.smul [normed_space 𝕜 E'] [normed_space 𝕜' F'] {f₁ : α → 𝕜} {f₂ : α → 𝕜'} {g₁ : α → E'} {g₂ : α → F'}\n    (hf : «expr =Θ[ ] » f₁ l f₂) (hg : «expr =Θ[ ] » g₁ l g₂) :\n    «expr =Θ[ ] » (fun x => «expr • » (f₁ x) (g₁ x)) l fun x => «expr • » (f₂ x) (g₂ x) :=\n  ⟨hf.1.smul hg.1, hf.2.smul hg.2⟩\n#align is_Theta.smul is_Theta.smul\n\n",
 "pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.pow {f : α → 𝕜} {g : α → 𝕜'} (h : «expr =Θ[ ] » f l g) (n : ℕ) :\n    «expr =Θ[ ] » (fun x => f x ^ n) l fun x => g x ^ n :=\n  ⟨h.1.pow n, h.2.pow n⟩\n#align is_Theta.pow is_Theta.pow\n\n",
 "mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.mul {f₁ f₂ : α → 𝕜} {g₁ g₂ : α → 𝕜'} (h₁ : «expr =Θ[ ] » f₁ l g₁) (h₂ : «expr =Θ[ ] » f₂ l g₂) :\n    «expr =Θ[ ] » (fun x => f₁ x * f₂ x) l fun x => g₁ x * g₂ x :=\n  h₁.smul h₂\n#align is_Theta.mul is_Theta.mul\n\n",
 "mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.mono (h : «expr =Θ[ ] » f l g) (hl : l' ≤ l) : «expr =Θ[ ] » f l' g :=\n  ⟨h.1.mono hl, h.2.mono hl⟩\n#align is_Theta.mono is_Theta.mono\n\n",
 "is_o_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_Theta.is_o_congr_right (h : «expr =Θ[ ] » g' l k') : «expr =o[ ] » f l g' ↔ «expr =o[ ] » f l k' :=\n  ⟨fun H => H.trans_is_Theta h, fun H => H.trans_is_Theta h.symm⟩\n#align is_Theta.is_o_congr_right is_Theta.is_o_congr_right\n\n",
 "is_o_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =o[ ] » -/\ntheorem is_Theta.is_o_congr_left (h : «expr =Θ[ ] » f' l g') : «expr =o[ ] » f' l k ↔ «expr =o[ ] » g' l k :=\n  ⟨h.symm.trans_is_o, h.trans_is_o⟩\n#align is_Theta.is_o_congr_left is_Theta.is_o_congr_left\n\n",
 "is_bounded_under_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.is_bounded_under_le_iff (h : «expr =Θ[ ] » f' l g') :\n    is_bounded_under (· ≤ ·) l (norm ∘ f') ↔ is_bounded_under (· ≤ ·) l (norm ∘ g') := by\n  simp only [← is_O_const_of_ne (one_ne_zero' (exprℝ)), h.is_O_congr_left]\n#align is_Theta.is_bounded_under_le_iff is_Theta.is_bounded_under_le_iff\n\n",
 "is_Theta_zero_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n@[simp]\ntheorem is_Theta_zero_right : («expr =Θ[ ] » f'' l fun x => (0 : F')) ↔ «expr =ᶠ[ ] » f'' l 0 :=\n  is_Theta_comm.trans is_Theta_zero_left\n#align is_Theta_zero_right is_Theta_zero_right\n\n",
 "is_Theta_zero_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n@[simp]\ntheorem is_Theta_zero_left : «expr =Θ[ ] » (fun x => (0 : E')) l g'' ↔ «expr =ᶠ[ ] » g'' l 0 := by\n  simp only [is_Theta, is_O_zero, is_O_zero_right_iff, true_and_iff]\n#align is_Theta_zero_left is_Theta_zero_left\n\n",
 "is_Theta_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[simp]\ntheorem is_Theta_sup : «expr =Θ[ ] » f' («expr ⊔ » l l') g' ↔ «expr =Θ[ ] » f' l g' ∧ «expr =Θ[ ] » f' l' g' :=\n  ⟨fun h => ⟨h.mono le_sup_left, h.mono le_sup_right⟩, fun h => h.1.sup h.2⟩\n#align is_Theta_sup is_Theta_sup\n\n",
 "is_Theta_rfl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_rfl : «expr =Θ[ ] » f l f :=\n  is_Theta_refl _ _\n#align is_Theta_rfl is_Theta_rfl\n\n",
 "is_Theta_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[refl]\ntheorem is_Theta_refl (f : α → E) (l : filter α) : «expr =Θ[ ] » f l f :=\n  ⟨is_O_refl _ _, is_O_refl _ _⟩\n#align is_Theta_refl is_Theta_refl\n\n",
 "is_Theta_of_norm_eventually_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_of_norm_eventually_eq' {g : α → exprℝ} (h : «expr =ᶠ[ ] » (fun x => «expr‖ ‖» (f' x)) l g) :\n    «expr =Θ[ ] » f' l g :=\n  is_Theta_of_norm_eventually_eq <| h.mono fun x hx => by simp only [← hx, norm_norm]\n#align is_Theta_of_norm_eventually_eq' is_Theta_of_norm_eventually_eq'\n\n",
 "is_Theta_of_norm_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_of_norm_eventually_eq (h : «expr =ᶠ[ ] » (fun x => «expr‖ ‖» (f x)) l fun x => «expr‖ ‖» (g x)) :\n    «expr =Θ[ ] » f l g :=\n  ⟨is_O.of_bound 1 <| by simpa only [one_mul] using h.le, is_O.of_bound 1 <| by simpa only [one_mul] using h.symm.le⟩\n#align is_Theta_of_norm_eventually_eq is_Theta_of_norm_eventually_eq\n\n",
 "is_Theta_norm_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[simp]\ntheorem is_Theta_norm_right : («expr =Θ[ ] » f l fun x => «expr‖ ‖» (g' x)) ↔ «expr =Θ[ ] » f l g' := by simp [is_Theta]\n#align is_Theta_norm_right is_Theta_norm_right\n\n",
 "is_Theta_norm_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[simp]\ntheorem is_Theta_norm_left : «expr =Θ[ ] » (fun x => «expr‖ ‖» (f' x)) l g ↔ «expr =Θ[ ] » f' l g := by simp [is_Theta]\n#align is_Theta_norm_left is_Theta_norm_left\n\n",
 "is_Theta_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[simp]\ntheorem is_Theta_inv {f : α → 𝕜} {g : α → 𝕜'} :\n    («expr =Θ[ ] » (fun x => (f x)⁻¹) l fun x => (g x)⁻¹) ↔ «expr =Θ[ ] » f l g :=\n  ⟨fun h => by simpa only [inv_inv] using h.inv, is_Theta.inv⟩\n#align is_Theta_inv is_Theta_inv\n\n",
 "is_Theta_const_smul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_const_smul_right [normed_space 𝕜 F'] {c : 𝕜} (hc : c ≠ 0) :\n    («expr =Θ[ ] » f l fun x => «expr • » c (g' x)) ↔ «expr =Θ[ ] » f l g' :=\n  and_congr (is_O_const_smul_right hc) (is_O_const_smul_left hc)\n#align is_Theta_const_smul_right is_Theta_const_smul_right\n\n",
 "is_Theta_const_smul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_const_smul_left [normed_space 𝕜 E'] {c : 𝕜} (hc : c ≠ 0) :\n    «expr =Θ[ ] » (fun x => «expr • » c (f' x)) l g ↔ «expr =Θ[ ] » f' l g :=\n  and_congr (is_O_const_smul_left hc) (is_O_const_smul_right hc)\n#align is_Theta_const_smul_left is_Theta_const_smul_left\n\n",
 "is_Theta_const_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_const_mul_right {c : 𝕜} {g : α → 𝕜} (hc : c ≠ 0) :\n    («expr =Θ[ ] » f l fun x => c * g x) ↔ «expr =Θ[ ] » f l g := by\n  simpa only [← smul_eq_mul] using is_Theta_const_smul_right hc\n#align is_Theta_const_mul_right is_Theta_const_mul_right\n\n",
 "is_Theta_const_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_const_mul_left {c : 𝕜} {f : α → 𝕜} (hc : c ≠ 0) :\n    «expr =Θ[ ] » (fun x => c * f x) l g ↔ «expr =Θ[ ] » f l g := by\n  simpa only [← smul_eq_mul] using is_Theta_const_smul_left hc\n#align is_Theta_const_mul_left is_Theta_const_mul_left\n\n",
 "is_Theta_const_const_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n@[simp]\ntheorem is_Theta_const_const_iff [ne_bot l] {c₁ : E''} {c₂ : F''} :\n    («expr =Θ[ ] » (fun x : α => c₁) l fun x => c₂) ↔ (c₁ = 0 ↔ c₂ = 0) := by\n  simpa only [is_Theta, is_O_const_const_iff, ← iff_def] using iff.comm\n#align is_Theta_const_const_iff is_Theta_const_const_iff\n\n",
 "is_Theta_const_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_const_const {c₁ : E''} {c₂ : F''} (h₁ : c₁ ≠ 0) (h₂ : c₂ ≠ 0) :\n    «expr =Θ[ ] » (fun x : α => c₁) l fun x => c₂ :=\n  ⟨is_O_const_const _ h₂ _, is_O_const_const _ h₁ _⟩\n#align is_Theta_const_const is_Theta_const_const\n\n",
 "is_Theta_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta_comm : «expr =Θ[ ] » f l g ↔ «expr =Θ[ ] » g l f :=\n  ⟨fun h => h.symm, fun h => h.symm⟩\n#align is_Theta_comm is_Theta_comm\n\n",
 "is_O_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_Theta.is_O_congr_right (h : «expr =Θ[ ] » g' l k') : «expr =O[ ] » f l g' ↔ «expr =O[ ] » f l k' :=\n  ⟨fun H => H.trans_is_Theta h, fun H => H.trans_is_Theta h.symm⟩\n#align is_Theta.is_O_congr_right is_Theta.is_O_congr_right\n\n",
 "is_O_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\ntheorem is_Theta.is_O_congr_left (h : «expr =Θ[ ] » f' l g') : «expr =O[ ] » f' l k ↔ «expr =O[ ] » g' l k :=\n  ⟨h.symm.trans_is_O, h.trans_is_O⟩\n#align is_Theta.is_O_congr_left is_Theta.is_O_congr_left\n\n",
 "inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.inv {f : α → 𝕜} {g : α → 𝕜'} (h : «expr =Θ[ ] » f l g) :\n    «expr =Θ[ ] » (fun x => (f x)⁻¹) l fun x => (g x)⁻¹ :=\n  ⟨h.2.inv_rev h.1.eq_zero_imp, h.1.inv_rev h.2.eq_zero_imp⟩\n#align is_Theta.inv is_Theta.inv\n\n",
 "eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem is_Theta.eq_zero_iff (h : «expr =Θ[ ] » f'' l g'') :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n      (f'' x = 0 ↔ g'' x = 0) :=\n  h.1.eq_zero_imp.mp <| h.2.eq_zero_imp.mono fun x => iff.intro\n#align is_Theta.eq_zero_iff is_Theta.eq_zero_iff\n\n",
 "div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\ntheorem is_Theta.div {f₁ f₂ : α → 𝕜} {g₁ g₂ : α → 𝕜'} (h₁ : «expr =Θ[ ] » f₁ l g₁) (h₂ : «expr =Θ[ ] » f₂ l g₂) :\n    «expr =Θ[ ] » (fun x => f₁ x / f₂ x) l fun x => g₁ x / g₂ x := by simpa only [div_eq_mul_inv] using h₁.mul h₂.inv\n#align is_Theta.div is_Theta.div\n\n",
 "antisymm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =Θ[ ] » -/\n/-\nCopyright (c) 2022 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem is_O.antisymm (h₁ : «expr =O[ ] » f l g) (h₂ : «expr =O[ ] » g l f) : «expr =Θ[ ] » f l g :=\n  ⟨h₁, h₂⟩\n#align is_O.antisymm is_O.antisymm\n\n"}