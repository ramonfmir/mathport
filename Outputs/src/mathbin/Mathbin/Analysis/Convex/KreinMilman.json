{"has_extreme_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\n/-- **Krein-Milman lemma**: In a LCTVS, any nonempty compact set has an extreme point. -/\ntheorem is_compact.has_extreme_point (hscomp : IsCompact s) (hsnemp : s.nonempty) :\n    (s.extreme_points (exprℝ)).nonempty :=\n  by\n  let S : Set (Set E) := { t | t.nonempty ∧ IsClosed t ∧ IsExtreme (exprℝ) s t }\n  rsuffices ⟨t, ⟨⟨x, hxt⟩, htclos, hst⟩, hBmin⟩ : ∃ t ∈ S, ∀ u ∈ S, u ⊆ t → u = t\n  · refine' ⟨x, mem_extremePoints_iff_extreme_singleton.2 _⟩\n    rwa [← eq_singleton_iff_unique_mem.2 ⟨hxt, fun y hyB => _⟩]\n    by_contra hyx\n    obtain ⟨l, hl⟩ := geometric_hahn_banach_point_point hyx\n    obtain ⟨z, hzt, hz⟩ :=\n      (isCompact_of_isClosed_subset hscomp htclos hst.1).exists_forall_ge ⟨x, hxt⟩ l.continuous.continuous_on\n    have h : IsExposed (exprℝ) t ({ z ∈ t | ∀ w ∈ t, l w ≤ l z }) := fun h => ⟨l, rfl⟩\n    rw [←\n      hBmin ({ z ∈ t | ∀ w ∈ t, l w ≤ l z }) ⟨⟨z, hzt, hz⟩, h.is_closed htclos, hst.trans h.is_extreme⟩\n        (t.sep_subset _)] at\n      hyB\n    exact hl.not_le (hyB.2 x hxt)\n  refine' zorn_superset _ fun F hFS hF => _\n  obtain rfl | hFnemp := F.eq_empty_or_nonempty\n  · exact ⟨s, ⟨hsnemp, hscomp.is_closed, IsExtreme.rfl⟩, fun _ => false.elim⟩\n  refine'\n    ⟨«expr⋂₀ » F, ⟨_, isClosed_interₛ fun t ht => (hFS ht).2.1, isExtreme_interₛ hFnemp fun t ht => (hFS ht).2.2⟩,\n      fun t ht => sInter_subset_of_mem ht⟩\n  haveI : Nonempty («expr↥ » F) := hFnemp.to_subtype\n  rw [sInter_eq_Inter]\n  refine'\n    IsCompact.nonempty_interᵢ_of_directed_nonempty_compact_closed _ (fun t u => _) (fun t => (hFS t.mem).1)\n      (fun t => isCompact_of_isClosed_subset hscomp (hFS t.mem).2.1 (hFS t.mem).2.2.1) fun t => (hFS t.mem).2.1\n  obtain htu | hut := hF.total t.mem u.mem\n  exacts[⟨t, subset.rfl, htu⟩, ⟨u, hut, subset.rfl⟩]\n#align is_compact.has_extreme_point is_compact.has_extreme_point\n\n",
 "closure_convex_hull_extreme_points":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- **Krein-Milman theorem**: In a LCTVS, any compact convex set is the closure of the convex hull\n    of its extreme points. -/\ntheorem closure_convex_hull_extreme_points (hscomp : IsCompact s) (hAconv : Convex (exprℝ) s) :\n    closure (convexHull (exprℝ) <| s.extreme_points (exprℝ)) = s :=\n  by\n  apply (closure_minimal (convexHull_min extremePoints_subset hAconv) hscomp.is_closed).antisymm\n  by_contra hs\n  obtain ⟨x, hxA, hxt⟩ := not_subset.1 hs\n  obtain ⟨l, r, hlr, hrx⟩ := geometric_hahn_banach_closed_point (convex_convexHull _ _).closure isClosed_closure hxt\n  have h : IsExposed (exprℝ) s ({ y ∈ s | ∀ z ∈ s, l z ≤ l y }) := fun _ => ⟨l, rfl⟩\n  obtain ⟨z, hzA, hz⟩ := hscomp.exists_forall_ge ⟨x, hxA⟩ l.continuous.continuous_on\n  obtain ⟨y, hy⟩ := (h.is_compact hscomp).has_extreme_point ⟨z, hzA, hz⟩\n  linarith [hlr _ (subset_closure <| subset_convexHull _ _ <| h.is_extreme.extreme_points_subset_extreme_points hy),\n    hy.1.2 x hxA]\n#align closure_convex_hull_extreme_points closure_convex_hull_extreme_points\n\n"}