{"vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n#print Convex.vadd /-\ntheorem Convex.vadd (hs : Convex 𝕜 s) (z : E) : Convex 𝕜 («expr +ᵥ » z s) :=\n  by\n  simp_rw [← image_vadd, vadd_eq_add, ← singleton_add]\n  exact (convex_singleton _).add hs\n#align convex.vadd Convex.vadd\n-/\n\n",
 "translate_preimage_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print Convex.translate_preimage_right /-\n/-- The translation of a convex set is also convex. -/\ntheorem Convex.translate_preimage_right (hs : Convex 𝕜 s) (z : E) : Convex 𝕜 («expr ⁻¹' » (fun x => z + x) s) :=\n  by\n  intro x hx y hy a b ha hb hab\n  have h := hs hx hy ha hb hab\n  rwa [smul_add, smul_add, add_add_add_comm, ← add_smul, hab, one_smul] at h\n#align convex.translate_preimage_right Convex.translate_preimage_right\n-/\n\n",
 "translate_preimage_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print Convex.translate_preimage_left /-\n/-- The translation of a convex set is also convex. -/\ntheorem Convex.translate_preimage_left (hs : Convex 𝕜 s) (z : E) : Convex 𝕜 («expr ⁻¹' » (fun x => x + z) s) := by\n  simpa only [add_comm] using hs.translate_preimage_right z\n#align convex.translate_preimage_left Convex.translate_preimage_left\n-/\n\n",
 "translate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print Convex.translate /-\ntheorem Convex.translate (hs : Convex 𝕜 s) (z : E) : Convex 𝕜 («expr '' » (fun x => z + x) s) :=\n  hs.vadd _\n#align convex.translate Convex.translate\n-/\n\n",
 "sub":
 "#print Convex.sub /-\ntheorem Convex.sub (hs : Convex 𝕜 s) (ht : Convex 𝕜 t) : Convex 𝕜 (s - t) :=\n  by\n  rw [sub_eq_add_neg]\n  exact hs.add ht.neg\n#align convex.sub Convex.sub\n-/\n\n",
 "stdSimplex_eq_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n#print stdSimplex_eq_inter /-\ntheorem stdSimplex_eq_inter :\n    stdSimplex 𝕜 ι =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" { f | 0 ≤ f x } ∩\n        { f |\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              (f x) =\n            1 } :=\n  by\n  ext f\n  simp only [stdSimplex, Set.mem_inter_iff, Set.mem_interᵢ, Set.mem_setOf_eq]\n#align std_simplex_eq_inter stdSimplex_eq_inter\n-/\n\n",
 "starConvex_iff":
 "#print Convex.starConvex_iff /-\ntheorem Convex.starConvex_iff (hs : Convex 𝕜 s) (h : s.nonempty) : StarConvex 𝕜 x s ↔ x ∈ s :=\n  ⟨fun hxs => hxs.mem h, hs.star_convex⟩\n#align convex.star_convex_iff Convex.starConvex_iff\n-/\n\n",
 "starConvex":
 "#print Convex.starConvex /-\n/-\nCopyright (c) 2019 Alexander Bentkamp. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alexander Bentkamp, Yury Kudriashov, Yaël Dillies\n-/\ntheorem Convex.starConvex (hs : Convex 𝕜 s) (hx : x ∈ s) : StarConvex 𝕜 x s :=\n  hs hx\n#align convex.star_convex Convex.starConvex\n-/\n\n",
 "smul_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.smul_preimage /-\ntheorem Convex.smul_preimage (hs : Convex 𝕜 s) (c : 𝕜) : Convex 𝕜 («expr ⁻¹' » (fun z => «expr • » c z) s) :=\n  hs.linear_preimage (LinearMap.lsmul _ _ c)\n#align convex.smul_preimage Convex.smul_preimage\n-/\n\n",
 "smul_mem_of_zero_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.smul_mem_of_zero_mem /-\ntheorem Convex.smul_mem_of_zero_mem (hs : Convex 𝕜 s) {x : E} (zero_mem : (0 : E) ∈ s) (hx : x ∈ s) {t : 𝕜}\n    (ht : t ∈ Icc (0 : 𝕜) 1) : «expr • » t x ∈ s := by simpa using hs.add_smul_mem zero_mem (by simpa using hx) ht\n#align convex.smul_mem_of_zero_mem Convex.smul_mem_of_zero_mem\n-/\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.smul /-\ntheorem Convex.smul (hs : Convex 𝕜 s) (c : 𝕜) : Convex 𝕜 («expr • » c s) :=\n  hs.linear_image (LinearMap.lsmul _ _ c)\n#align convex.smul Convex.smul\n-/\n\n",
 "segment_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n#print Convex.segment_subset /-\ntheorem Convex.segment_subset (h : Convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ s) : segment x 𝕜 y ⊆ s :=\n  convex_iff_segment_subset.1 h hx hy\n#align convex.segment_subset Convex.segment_subset\n-/\n\n",
 "prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n#print Convex.prod /-\ntheorem Convex.prod {s : Set E} {t : Set F} (hs : Convex 𝕜 s) (ht : Convex 𝕜 t) : Convex 𝕜 (finset.product s t) :=\n  fun x hx => (hs hx.1).prod (ht hx.2)\n#align convex.prod Convex.prod\n-/\n\n",
 "openSegment_subset":
 "#print Convex.openSegment_subset /-\ntheorem Convex.openSegment_subset (h : Convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ s) : openSegment 𝕜 x y ⊆ s :=\n  (openSegment_subset_segment 𝕜 x y).trans (h.segment_subset hx hy)\n#align convex.open_segment_subset Convex.openSegment_subset\n-/\n\n",
 "neg":
 "#print Convex.neg /-\ntheorem Convex.neg (hs : Convex 𝕜 s) : Convex 𝕜 (-s) :=\n  hs.is_linear_preimage IsLinearMap.isLinearMap_neg\n#align convex.neg Convex.neg\n-/\n\n",
 "mem_smul_of_zero_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.mem_smul_of_zero_mem /-\ntheorem Convex.mem_smul_of_zero_mem (h : Convex 𝕜 s) {x : E} (zero_mem : (0 : E) ∈ s) (hx : x ∈ s) {t : 𝕜}\n    (ht : 1 ≤ t) : x ∈ «expr • » t s :=\n  by\n  rw [mem_smul_set_iff_inv_smul_mem₀ (zero_lt_one.trans_le ht).ne']\n  exact h.smul_mem_of_zero_mem zero_mem hx ⟨inv_nonneg.2 (zero_le_one.trans ht), inv_le_one ht⟩\n#align convex.mem_smul_of_zero_mem Convex.mem_smul_of_zero_mem\n-/\n\n",
 "linear_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print Convex.linear_preimage /-\ntheorem Convex.linear_preimage {s : Set F} (hs : Convex 𝕜 s) (f : «expr →ₗ[ ] » E 𝕜 F) : Convex 𝕜 («expr ⁻¹' » f s) :=\n  by\n  intro x hx y hy a b ha hb hab\n  rw [mem_preimage, f.map_add, f.map_smul, f.map_smul]\n  exact hs hx hy ha hb hab\n#align convex.linear_preimage Convex.linear_preimage\n-/\n\n",
 "linear_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print Convex.linear_image /-\ntheorem Convex.linear_image (hs : Convex 𝕜 s) (f : «expr →ₗ[ ] » E 𝕜 F) : Convex 𝕜 («expr '' » f s) :=\n  by\n  intro x hx y hy a b ha hb hab\n  obtain ⟨x', hx', rfl⟩ := mem_image_iff_bex.1 hx\n  obtain ⟨y', hy', rfl⟩ := mem_image_iff_bex.1 hy\n  exact ⟨«expr • » a x' + «expr • » b y', hs hx' hy' ha hb hab, by rw [f.map_add, f.map_smul, f.map_smul]⟩\n#align convex.linear_image Convex.linear_image\n-/\n\n",
 "ite_eq_mem_stdSimplex":
 "#print ite_eq_mem_stdSimplex /-\ntheorem ite_eq_mem_stdSimplex (i : ι) : (fun j => ite (i = j) (1 : 𝕜) 0) ∈ stdSimplex 𝕜 ι :=\n  ⟨fun j => by simp only <;> split_ifs <;> norm_num, by rw [Finset.sum_ite_eq, if_pos (Finset.mem_univ _)]⟩\n#align ite_eq_mem_std_simplex ite_eq_mem_stdSimplex\n-/\n\n",
 "is_linear_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print Convex.is_linear_preimage /-\ntheorem Convex.is_linear_preimage {s : Set F} (hs : Convex 𝕜 s) {f : E → F} (hf : IsLinearMap 𝕜 f) :\n    Convex 𝕜 («expr ⁻¹' » f s) :=\n  hs.linear_preimage <| hf.mk' f\n#align convex.is_linear_preimage Convex.is_linear_preimage\n-/\n\n",
 "is_linear_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print Convex.is_linear_image /-\ntheorem Convex.is_linear_image (hs : Convex 𝕜 s) {f : E → F} (hf : IsLinearMap 𝕜 f) : Convex 𝕜 («expr '' » f s) :=\n  hs.linear_image <| hf.mk' f\n#align convex.is_linear_image Convex.is_linear_image\n-/\n\n",
 "inter":
 "#print Convex.inter /-\ntheorem Convex.inter {t : Set E} (hs : Convex 𝕜 s) (ht : Convex 𝕜 t) : Convex 𝕜 (s ∩ t) := fun x hx =>\n  (hs hx.1).inter (ht hx.2)\n#align convex.inter Convex.inter\n-/\n\n",
 "convex_univ":
 "#print convex_univ /-\ntheorem convex_univ : Convex 𝕜 (Set.univ : Set E) := fun _ _ => starConvex_univ _\n#align convex_univ convex_univ\n-/\n\n",
 "convex_unionₛ":
 "#print DirectedOn.convex_unionₛ /-\ntheorem DirectedOn.convex_unionₛ {c : Set (Set E)} (hdir : DirectedOn (· ⊆ ·) c)\n    (hc : ∀ ⦃A : Set E⦄, A ∈ c → Convex 𝕜 A) : Convex 𝕜 (⋃₀ c) :=\n  by\n  rw [sUnion_eq_Union]\n  exact (directedOn_iff_directed.1 hdir).convex_Union fun A => hc A.2\n#align directed_on.convex_sUnion DirectedOn.convex_unionₛ\n-/\n\n",
 "convex_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Directed.convex_unionᵢ /-\ntheorem Directed.convex_unionᵢ {ι : Sort _} {s : ι → Set E} (hdir : Directed (· ⊆ ·) s)\n    (hc : ∀ ⦃i : ι⦄, Convex 𝕜 (s i)) :\n    Convex 𝕜 («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) :=\n  by\n  rintro x hx y hy a b ha hb hab\n  rw [mem_Union] at hx hy⊢\n  obtain ⟨i, hx⟩ := hx\n  obtain ⟨j, hy⟩ := hy\n  obtain ⟨k, hik, hjk⟩ := hdir i j\n  exact ⟨k, hc (hik hx) (hjk hy) ha hb hab⟩\n#align directed.convex_Union Directed.convex_unionᵢ\n-/\n\n",
 "convex_uIcc":
 "#print convex_uIcc /-\ntheorem convex_uIcc (r s : β) : Convex 𝕜 (uIcc r s) :=\n  convex_Icc _ _\n#align convex_uIcc convex_uIcc\n-/\n\n",
 "convex_stdSimplex":
 "#print convex_stdSimplex /-\ntheorem convex_stdSimplex : Convex 𝕜 (stdSimplex 𝕜 ι) :=\n  by\n  refine' fun f hf g hg a b ha hb hab => ⟨fun x => _, _⟩\n  · apply_rules [add_nonneg, mul_nonneg, hf.1, hg.1]\n  · erw [Finset.sum_add_distrib, ← Finset.smul_sum, ← Finset.smul_sum, hf.2, hg.2, smul_eq_mul, smul_eq_mul, mul_one,\n      mul_one]\n    exact hab\n#align convex_std_simplex convex_stdSimplex\n-/\n\n",
 "convex_singleton":
 "#print convex_singleton /-\ntheorem convex_singleton (c : E) : Convex 𝕜 ({c} : Set E) :=\n  subsingleton_singleton.convex\n#align convex_singleton convex_singleton\n-/\n\n",
 "convex_segment":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n#print convex_segment /-\ntheorem convex_segment (x y : E) : Convex 𝕜 (segment x 𝕜 y) :=\n  by\n  rintro p ⟨ap, bp, hap, hbp, habp, rfl⟩ q ⟨aq, bq, haq, hbq, habq, rfl⟩ a b ha hb hab\n  refine'\n    ⟨a * ap + b * aq, a * bp + b * bq, add_nonneg (mul_nonneg ha hap) (mul_nonneg hb haq),\n      add_nonneg (mul_nonneg ha hbp) (mul_nonneg hb hbq), _, _⟩\n  · rw [add_add_add_comm, ← mul_add, ← mul_add, habp, habq, mul_one, mul_one, hab]\n  · simp_rw [add_smul, mul_smul, smul_add]\n    exact add_add_add_comm _ _ _ _\n#align convex_segment convex_segment\n-/\n\n",
 "convex_pi":
 "#print convex_pi /-\ntheorem convex_pi {ι : Type _} {E : ι → Type _} [∀ i, AddCommMonoid (E i)] [∀ i, SMul 𝕜 (E i)] {s : Set ι}\n    {t : ∀ i, Set (E i)} (ht : ∀ ⦃i⦄, i ∈ s → Convex 𝕜 (t i)) : Convex 𝕜 (s.pi t) := fun x hx =>\n  starConvex_pi fun i hi => ht hi <| hx _ hi\n#align convex_pi convex_pi\n-/\n\n",
 "convex_openSegment":
 "#print convex_openSegment /-\ntheorem convex_openSegment (a b : E) : Convex 𝕜 (openSegment 𝕜 a b) :=\n  by\n  rw [convex_iff_openSegment_subset]\n  rintro p ⟨ap, bp, hap, hbp, habp, rfl⟩ q ⟨aq, bq, haq, hbq, habq, rfl⟩ z ⟨a, b, ha, hb, hab, rfl⟩\n  refine' ⟨a * ap + b * aq, a * bp + b * bq, by positivity, by positivity, _, _⟩\n  · rw [add_add_add_comm, ← mul_add, ← mul_add, habp, habq, mul_one, mul_one, hab]\n  · simp_rw [add_smul, mul_smul, smul_add, add_add_add_comm]\n#align convex_open_segment convex_openSegment\n-/\n\n",
 "convex_of_chain":
 "#print Set.OrdConnected.convex_of_chain /-\ntheorem Set.OrdConnected.convex_of_chain [OrderedSemiring 𝕜] [OrderedAddCommMonoid E] [Module 𝕜 E] [OrderedSMul 𝕜 E]\n    {s : Set E} (hs : s.ord_connected) (h : IsChain (· ≤ ·) s) : Convex 𝕜 s :=\n  by\n  refine' convex_iff_segment_subset.mpr fun x hx y hy => _\n  obtain hxy | hyx := h.total hx hy\n  · exact (segment_subset_Icc hxy).trans (hs.out hx hy)\n  · rw [segment_symm]\n    exact (segment_subset_Icc hyx).trans (hs.out hy hx)\n#align set.ord_connected.convex_of_chain Set.OrdConnected.convex_of_chain\n-/\n\n",
 "convex_lt":
 "#print Antitone.convex_lt /-\ntheorem Antitone.convex_lt (hf : Antitone f) (r : β) : Convex 𝕜 { x | f x < r } :=\n  Set.sep_univ.subst ((hf.antitone_on univ).convex_lt convex_univ r)\n#align antitone.convex_lt Antitone.convex_lt\n-/\n\n",
 "convex_le":
 "#print Antitone.convex_le /-\ntheorem Antitone.convex_le (hf : Antitone f) (r : β) : Convex 𝕜 { x | f x ≤ r } :=\n  Set.sep_univ.subst ((hf.antitone_on univ).convex_le convex_univ r)\n#align antitone.convex_le Antitone.convex_le\n-/\n\n",
 "convex_interₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n#print convex_interₛ /-\ntheorem convex_interₛ {S : Set (Set E)} (h : ∀ s ∈ S, Convex 𝕜 s) : Convex 𝕜 («expr⋂₀ » S) := fun x hx =>\n  starConvex_interₛ fun s hs => h _ hs <| hx _ hs\n#align convex_sInter convex_interₛ\n-/\n\n",
 "convex_interᵢ₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print convex_interᵢ₂ /-\ntheorem convex_interᵢ₂ {ι : Sort _} {κ : ι → Sort _} {s : ∀ i, κ i → Set E} (h : ∀ i j, Convex 𝕜 (s i j)) :\n    Convex 𝕜\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i j)) :=\n  convex_interᵢ fun i => convex_interᵢ <| h i\n#align convex_Inter₂ convex_interᵢ₂\n-/\n\n",
 "convex_interᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print convex_interᵢ /-\ntheorem convex_interᵢ {ι : Sort _} {s : ι → Set E} (h : ∀ i, Convex 𝕜 (s i)) :\n    Convex 𝕜 («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) :=\n  interₛ_range s ▸ convex_interₛ <| forall_range_iff.2 h\n#align convex_Inter convex_interᵢ\n-/\n\n",
 "convex_iff_segment_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n#print convex_iff_segment_subset /-\ntheorem convex_iff_segment_subset : Convex 𝕜 s ↔ ∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → segment x 𝕜 y ⊆ s :=\n  forall₂_congr fun x hx => starConvex_iff_segment_subset\n#align convex_iff_segment_subset convex_iff_segment_subset\n-/\n\n",
 "convex_iff_pointwise_add_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convex_iff_pointwise_add_subset /-\n/-- Alternative definition of set convexity, in terms of pointwise set operations. -/\ntheorem convex_iff_pointwise_add_subset :\n    Convex 𝕜 s ↔ ∀ ⦃a b : 𝕜⦄, 0 ≤ a → 0 ≤ b → a + b = 1 → «expr • » a s + «expr • » b s ⊆ s :=\n  iff.intro\n    (by\n      rintro hA a b ha hb hab w ⟨au, bv, ⟨u, hu, rfl⟩, ⟨v, hv, rfl⟩, rfl⟩\n      exact hA hu hv ha hb hab)\n    fun h x hx y hy a b ha hb hab => (h ha hb hab) (Set.add_mem_add ⟨_, hx, rfl⟩ ⟨_, hy, rfl⟩)\n#align convex_iff_pointwise_add_subset convex_iff_pointwise_add_subset\n-/\n\n",
 "convex_iff_pairwise_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convex_iff_pairwise_pos /-\ntheorem convex_iff_pairwise_pos :\n    Convex 𝕜 s ↔ s.pairwise fun x y => ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → «expr • » a x + «expr • » b y ∈ s :=\n  by\n  refine' convex_iff_forall_pos.trans ⟨fun h x hx y hy _ => h hx hy, _⟩\n  intro h x hx y hy a b ha hb hab\n  obtain rfl | hxy := eq_or_ne x y\n  · rwa [Convex.combo_self hab]\n  · exact h hx hy hxy ha hb hab\n#align convex_iff_pairwise_pos convex_iff_pairwise_pos\n-/\n\n",
 "convex_iff_ordConnected":
 "#print convex_iff_ordConnected /-\ntheorem convex_iff_ordConnected [LinearOrderedField 𝕜] {s : Set 𝕜} : Convex 𝕜 s ↔ s.ord_connected := by\n  simp_rw [convex_iff_segment_subset, segment_eq_uIcc, ord_connected_iff_uIcc_subset]\n#align convex_iff_ord_connected convex_iff_ordConnected\n-/\n\n",
 "convex_iff_openSegment_subset":
 "#print convex_iff_openSegment_subset /-\ntheorem convex_iff_openSegment_subset : Convex 𝕜 s ↔ ∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → openSegment 𝕜 x y ⊆ s :=\n  forall₂_congr fun x => starConvex_iff_openSegment_subset\n#align convex_iff_open_segment_subset convex_iff_openSegment_subset\n-/\n\n",
 "convex_iff_forall_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convex_iff_forall_pos /-\ntheorem convex_iff_forall_pos :\n    Convex 𝕜 s ↔\n      ∀ ⦃x⦄, x ∈ s → ∀ ⦃y⦄, y ∈ s → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → «expr • » a x + «expr • » b y ∈ s :=\n  forall₂_congr fun x => starConvex_iff_forall_pos\n#align convex_iff_forall_pos convex_iff_forall_pos\n-/\n\n",
 "convex_iff_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convex_iff_div /-\n/-- Alternative definition of set convexity, using division. -/\ntheorem convex_iff_div :\n    Convex 𝕜 s ↔\n      ∀ ⦃x⦄,\n        x ∈ s →\n          ∀ ⦃y⦄,\n            y ∈ s →\n              ∀ ⦃a b : 𝕜⦄, 0 ≤ a → 0 ≤ b → 0 < a + b → «expr • » (a / (a + b)) x + «expr • » (b / (a + b)) y ∈ s :=\n  forall₂_congr fun x hx => starConvex_iff_div\n#align convex_iff_div convex_iff_div\n-/\n\n",
 "convex_hyperplane":
 "#print convex_hyperplane /-\ntheorem convex_hyperplane {f : E → β} (h : IsLinearMap 𝕜 f) (r : β) : Convex 𝕜 { w | f w = r } :=\n  by\n  simp_rw [le_antisymm_iff]\n  exact (convex_halfspace_le h r).inter (convex_halfspace_ge h r)\n#align convex_hyperplane convex_hyperplane\n-/\n\n",
 "convex_halfspace_lt":
 "#print convex_halfspace_lt /-\ntheorem convex_halfspace_lt {f : E → β} (h : IsLinearMap 𝕜 f) (r : β) : Convex 𝕜 { w | f w < r } :=\n  (convex_Iio r).is_linear_preimage h\n#align convex_halfspace_lt convex_halfspace_lt\n-/\n\n",
 "convex_halfspace_le":
 "#print convex_halfspace_le /-\ntheorem convex_halfspace_le {f : E → β} (h : IsLinearMap 𝕜 f) (r : β) : Convex 𝕜 { w | f w ≤ r } :=\n  (convex_Iic r).is_linear_preimage h\n#align convex_halfspace_le convex_halfspace_le\n-/\n\n",
 "convex_halfspace_gt":
 "#print convex_halfspace_gt /-\ntheorem convex_halfspace_gt {f : E → β} (h : IsLinearMap 𝕜 f) (r : β) : Convex 𝕜 { w | r < f w } :=\n  (convex_Ioi r).is_linear_preimage h\n#align convex_halfspace_gt convex_halfspace_gt\n-/\n\n",
 "convex_halfspace_ge":
 "#print convex_halfspace_ge /-\ntheorem convex_halfspace_ge {f : E → β} (h : IsLinearMap 𝕜 f) (r : β) : Convex 𝕜 { w | r ≤ f w } :=\n  (convex_Ici r).is_linear_preimage h\n#align convex_halfspace_ge convex_halfspace_ge\n-/\n\n",
 "convex_gt":
 "#print Antitone.convex_gt /-\ntheorem Antitone.convex_gt (hf : Antitone f) (r : β) : Convex 𝕜 { x | r < f x } :=\n  Set.sep_univ.subst ((hf.antitone_on univ).convex_gt convex_univ r)\n#align antitone.convex_gt Antitone.convex_gt\n-/\n\n",
 "convex_ge":
 "#print Antitone.convex_ge /-\ntheorem Antitone.convex_ge (hf : Antitone f) (r : β) : Convex 𝕜 { x | r ≤ f x } :=\n  Set.sep_univ.subst ((hf.antitone_on univ).convex_ge convex_univ r)\n#align antitone.convex_ge Antitone.convex_ge\n-/\n\n",
 "convex_empty":
 "#print convex_empty /-\ntheorem convex_empty : Convex 𝕜 (∅ : Set E) := fun x => false.elim\n#align convex_empty convex_empty\n-/\n\n",
 "convex_Ioo":
 "#print convex_Ioo /-\ntheorem convex_Ioo (r s : β) : Convex 𝕜 (Ioo r s) :=\n  Ioi_inter_Iio.subst ((convex_Ioi r).inter <| convex_Iio s)\n#align convex_Ioo convex_Ioo\n-/\n\n",
 "convex_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print convex_Ioi /-\ntheorem convex_Ioi (r : β) : Convex 𝕜 (Ioi r) :=\n  @convex_Iio 𝕜 («expr ᵒᵈ» β) _ _ _ _ r\n#align convex_Ioi convex_Ioi\n-/\n\n",
 "convex_Ioc":
 "#print convex_Ioc /-\ntheorem convex_Ioc (r s : β) : Convex 𝕜 (Ioc r s) :=\n  Ioi_inter_Iic.subst ((convex_Ioi r).inter <| convex_Iic s)\n#align convex_Ioc convex_Ioc\n-/\n\n",
 "convex_Iio":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convex_Iio /-\ntheorem convex_Iio (r : β) : Convex 𝕜 (Iio r) :=\n  by\n  intro x hx y hy a b ha hb hab\n  obtain rfl | ha' := ha.eq_or_lt\n  · rw [zero_add] at hab\n    rwa [zero_smul, zero_add, hab, one_smul]\n  rw [mem_Iio] at hx hy\n  calc\n    «expr • » a x + «expr • » b y < «expr • » a r + «expr • » b r :=\n      add_lt_add_of_lt_of_le (smul_lt_smul_of_pos hx ha') (smul_le_smul_of_nonneg hy.le hb)\n    _ = r := Convex.combo_self hab _\n    \n#align convex_Iio convex_Iio\n-/\n\n",
 "convex_Iic":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convex_Iic /-\ntheorem convex_Iic (r : β) : Convex 𝕜 (Iic r) := fun x hx y hy a b ha hb hab =>\n  calc\n    «expr • » a x + «expr • » b y ≤ «expr • » a r + «expr • » b r :=\n      add_le_add (smul_le_smul_of_nonneg hx ha) (smul_le_smul_of_nonneg hy hb)\n    _ = r := Convex.combo_self hab _\n    \n#align convex_Iic convex_Iic\n-/\n\n",
 "convex_Ico":
 "#print convex_Ico /-\ntheorem convex_Ico (r s : β) : Convex 𝕜 (Ico r s) :=\n  Ici_inter_Iio.subst ((convex_Ici r).inter <| convex_Iio s)\n#align convex_Ico convex_Ico\n-/\n\n",
 "convex_Ici":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print convex_Ici /-\ntheorem convex_Ici (r : β) : Convex 𝕜 (Ici r) :=\n  @convex_Iic 𝕜 («expr ᵒᵈ» β) _ _ _ _ r\n#align convex_Ici convex_Ici\n-/\n\n",
 "convex_Icc":
 "#print convex_Icc /-\ntheorem convex_Icc (r s : β) : Convex 𝕜 (Icc r s) :=\n  Ici_inter_Iic.subst ((convex_Ici r).inter <| convex_Iic s)\n#align convex_Icc convex_Icc\n-/\n\n",
 "convex":
 "#print Set.OrdConnected.convex /-\ntheorem Set.OrdConnected.convex [OrderedSemiring 𝕜] [LinearOrderedAddCommMonoid E] [Module 𝕜 E] [OrderedSMul 𝕜 E]\n    {s : Set E} (hs : s.ord_connected) : Convex 𝕜 s :=\n  hs.convex_of_chain <| isChain_of_trichotomous s\n#align set.ord_connected.convex Set.OrdConnected.convex\n-/\n\n",
 "affinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.affinity /-\ntheorem Convex.affinity (hs : Convex 𝕜 s) (z : E) (c : 𝕜) : Convex 𝕜 («expr '' » (fun x => z + «expr • » c x) s) := by\n  simpa only [← image_smul, ← image_vadd, image_image] using (hs.smul c).vadd z\n#align convex.affinity Convex.affinity\n-/\n\n",
 "affine_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print Convex.affine_preimage /-\n/-- The preimage of a convex set under an affine map is convex. -/\ntheorem Convex.affine_preimage (f : «expr →ᵃ[ ] » E 𝕜 F) {s : Set F} (hs : Convex 𝕜 s) : Convex 𝕜 («expr ⁻¹' » f s) :=\n  fun x hx => (hs hx).affine_preimage _\n#align convex.affine_preimage Convex.affine_preimage\n-/\n\n",
 "affine_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print Convex.affine_image /-\n/-- The image of a convex set under an affine map is convex. -/\ntheorem Convex.affine_image (f : «expr →ᵃ[ ] » E 𝕜 F) (hs : Convex 𝕜 s) : Convex 𝕜 («expr '' » f s) :=\n  by\n  rintro _ ⟨x, hx, rfl⟩\n  exact (hs hx).affine_image _\n#align convex.affine_image Convex.affine_image\n-/\n\n",
 "add_smul_sub_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.add_smul_sub_mem /-\ntheorem Convex.add_smul_sub_mem (h : Convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ s) {t : 𝕜} (ht : t ∈ Icc (0 : 𝕜) 1) :\n    x + «expr • » t (y - x) ∈ s := by\n  apply h.segment_subset hx hy\n  rw [segment_eq_image']\n  exact mem_image_of_mem _ ht\n#align convex.add_smul_sub_mem Convex.add_smul_sub_mem\n-/\n\n",
 "add_smul_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.add_smul_mem /-\ntheorem Convex.add_smul_mem (hs : Convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : x + y ∈ s) {t : 𝕜} (ht : t ∈ Icc (0 : 𝕜) 1) :\n    x + «expr • » t y ∈ s :=\n  by\n  have h : x + «expr • » t y = «expr • » (1 - t) x + «expr • » t (x + y) := by\n    rw [smul_add, ← add_assoc, ← add_smul, sub_add_cancel, one_smul]\n  rw [h]\n  exact hs hx hy (sub_nonneg_of_le ht.2) ht.1 (sub_add_cancel _ _)\n#align convex.add_smul_mem Convex.add_smul_mem\n-/\n\n",
 "add_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Convex.add_smul /-\ntheorem Convex.add_smul (h_conv : Convex 𝕜 s) {p q : 𝕜} (hp : 0 ≤ p) (hq : 0 ≤ q) :\n    «expr • » (p + q) s = «expr • » p s + «expr • » q s :=\n  by\n  obtain rfl | hs := s.eq_empty_or_nonempty\n  · simp_rw [smul_set_empty, add_empty]\n  obtain rfl | hp' := hp.eq_or_lt\n  · rw [zero_add, zero_smul_set hs, zero_add]\n  obtain rfl | hq' := hq.eq_or_lt\n  · rw [add_zero, zero_smul_set hs, add_zero]\n  ext\n  constructor\n  · rintro ⟨v, hv, rfl⟩\n    exact ⟨«expr • » p v, «expr • » q v, smul_mem_smul_set hv, smul_mem_smul_set hv, (add_smul _ _ _).symm⟩\n  · rintro ⟨v₁, v₂, ⟨v₁₁, h₁₂, rfl⟩, ⟨v₂₁, h₂₂, rfl⟩, rfl⟩\n    have hpq := add_pos hp' hq'\n    refine'\n        mem_smul_set.2\n          ⟨_, h_conv h₁₂ h₂₂ _ _ (by rw [← div_self hpq.ne', add_div] : p / (p + q) + q / (p + q) = 1), by\n            simp only [← mul_smul, smul_add, mul_div_cancel' _ hpq.ne']⟩ <;>\n      positivity\n#align convex.add_smul Convex.add_smul\n-/\n\n",
 "add":
 "#print Convex.add /-\ntheorem Convex.add {t : Set E} (hs : Convex 𝕜 s) (ht : Convex 𝕜 t) : Convex 𝕜 (s + t) :=\n  by\n  rw [← add_image_prod]\n  exact (hs.prod ht).is_linear_image IsLinearMap.isLinearMap_add\n#align convex.add Convex.add\n-/\n\n",
 "StarConvex":
 "#print StarConvex /-\nprotected theorem StarConvex (K : Submodule 𝕜 E) : StarConvex 𝕜 (0 : E) K :=\n  K.convex K.zero_mem\n#align star_convex StarConvex\n-/\n\n",
 "Convex":
 "#print Convex /-\nprotected theorem Convex (K : Submodule 𝕜 E) : Convex 𝕜 (↑K : Set E) :=\n  by\n  repeat' intro\n  refine' add_mem (smul_mem _ _ _) (smul_mem _ _ _) <;> assumption\n#align convex Convex\n-/\n\n"}