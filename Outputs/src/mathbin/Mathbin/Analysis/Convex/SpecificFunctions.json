{"strict_convex_on_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m` except `0` and `1`. -/\ntheorem strict_convex_on_zpow {m : ℤ} (hm₀ : m ≠ 0) (hm₁ : m ≠ 1) :\n    strict_convex_on (exprℝ) (Ioi 0) fun x : exprℝ => x ^ m :=\n  by\n  apply strict_convex_on_of_deriv2_pos' (convex_Ioi 0)\n  · exact (continuous_on_zpow₀ m).mono fun x hx => ne_of_gt hx\n  intro x hx\n  rw [iter_deriv_zpow]\n  refine' mul_pos _ (zpow_pos_of_pos hx _)\n  exact_mod_cast int_prod_range_pos (even_bit0 1) fun hm => _\n  norm_cast  at hm\n  rw [← finset.coe_Ico] at hm\n  fin_cases hm <;> cc\n#align strict_convex_on_zpow strict_convex_on_zpow\n\n",
 "strict_convex_on_rpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_convex_on_rpow {p : exprℝ} (hp : 1 < p) : strict_convex_on (exprℝ) (Ici 0) fun x : exprℝ => x ^ p :=\n  by\n  have A : (deriv fun x : exprℝ => x ^ p) = fun x => p * x ^ (p - 1) :=\n    by\n    ext x\n    simp [hp.le]\n  apply strict_convex_on_of_deriv2_pos (convex_Ici 0)\n  · exact continuous_on_id.rpow_const fun x _ => or.inr (zero_le_one.trans hp.le)\n  rw [interior_Ici]\n  rintro x (hx : 0 < x)\n  suffices 0 < p * ((p - 1) * x ^ (p - 1 - 1)) by simpa [ne_of_gt hx, A]\n  exact mul_pos (zero_lt_one.trans hp) (mul_pos (sub_pos_of_lt hp) (rpow_pos_of_pos hx _))\n#align strict_convex_on_rpow strict_convex_on_rpow\n\n",
 "strict_convex_on_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `x^n`, `n : ℕ` is strictly convex on `[0, +∞)` for all `n` greater than `2`. -/\ntheorem strict_convex_on_pow {n : ℕ} (hn : 2 ≤ n) : strict_convex_on (exprℝ) (Ici 0) fun x : exprℝ => x ^ n :=\n  by\n  apply strict_mono_on.strict_convex_on_of_deriv (convex_Ici _) (continuous_on_pow _)\n  rw [deriv_pow', interior_Ici]\n  exact fun x (hx : 0 < x) y hy hxy =>\n    mul_lt_mul_of_pos_left (pow_lt_pow_of_lt_left hxy hx.le <| nat.sub_pos_of_lt hn)\n      (nat.cast_pos.2 <| zero_lt_two.trans_le hn)\n#align strict_convex_on_pow strict_convex_on_pow\n\n",
 "strict_convex_on_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov, Sébastien Gouëzel\n-/\n/-- `exp` is strictly convex on the whole real line. -/\ntheorem strict_convex_on_exp : strict_convex_on (exprℝ) univ exp :=\n  strict_convex_on_univ_of_deriv2_pos continuous_exp fun x => (iter_deriv_exp 2).symm ▸ exp_pos x\n#align strict_convex_on_exp strict_convex_on_exp\n\n",
 "strict_concave_on_sqrt_mul_log_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_concave_on_sqrt_mul_log_Ioi : strict_concave_on (exprℝ) (Set.Ioi 1) fun x => sqrt x * log x :=\n  by\n  apply strict_concave_on_of_deriv2_neg' (convex_Ioi 1) _ fun x hx => _\n  · exact continuous_sqrt.continuous_on.mul (continuous_on_log.mono fun x hx => ne_of_gt (zero_lt_one.trans hx))\n  · rw [deriv2_sqrt_mul_log x]\n    exact\n      div_neg_of_neg_of_pos (neg_neg_of_pos (log_pos hx))\n        (mul_pos four_pos (pow_pos (sqrt_pos.mpr (zero_lt_one.trans hx)) 3))\n#align strict_concave_on_sqrt_mul_log_Ioi strict_concave_on_sqrt_mul_log_Ioi\n\n",
 "strict_concave_on_sin_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\ntheorem strict_concave_on_sin_Icc : strict_concave_on (exprℝ) (Icc 0 (real.pi)) sin :=\n  by\n  apply strict_concave_on_of_deriv2_neg (convex_Icc _ _) continuous_on_sin fun x hx => _\n  rw [interior_Icc] at hx\n  simp [sin_pos_of_mem_Ioo hx]\n#align strict_concave_on_sin_Icc strict_concave_on_sin_Icc\n\n",
 "strict_concave_on_log_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_concave_on_log_Ioi : strict_concave_on (exprℝ) (Ioi 0) log :=\n  by\n  have h₁ : Ioi 0 ⊆ «expr ᶜ» ({0} : set (exprℝ)) := fun x (hx : 0 < x) (hx' : x = 0) => hx.ne' hx'\n  refine' strict_concave_on_of_deriv2_neg' (convex_Ioi 0) (continuous_on_log.mono h₁) fun x (hx : 0 < x) => _\n  rw [function.iterate_succ, function.iterate_one]\n  change (deriv (deriv log)) x < 0\n  rw [deriv_log', deriv_inv]\n  exact neg_neg_of_pos (inv_pos.2 <| sq_pos_of_ne_zero _ hx.ne')\n#align strict_concave_on_log_Ioi strict_concave_on_log_Ioi\n\n",
 "strict_concave_on_log_Iio":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem strict_concave_on_log_Iio : strict_concave_on (exprℝ) (Iio 0) log :=\n  by\n  have h₁ : Iio 0 ⊆ «expr ᶜ» ({0} : set (exprℝ)) := fun x (hx : x < 0) (hx' : x = 0) => hx.ne hx'\n  refine' strict_concave_on_of_deriv2_neg' (convex_Iio 0) (continuous_on_log.mono h₁) fun x (hx : x < 0) => _\n  rw [function.iterate_succ, function.iterate_one]\n  change (deriv (deriv log)) x < 0\n  rw [deriv_log', deriv_inv]\n  exact neg_neg_of_pos (inv_pos.2 <| sq_pos_of_ne_zero _ hx.ne)\n#align strict_concave_on_log_Iio strict_concave_on_log_Iio\n\n",
 "strict_concave_on_cos_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `real.pi -/\ntheorem strict_concave_on_cos_Icc : strict_concave_on (exprℝ) (Icc (-(real.pi / 2)) (real.pi / 2)) cos :=\n  by\n  apply strict_concave_on_of_deriv2_neg (convex_Icc _ _) continuous_on_cos fun x hx => _\n  rw [interior_Icc] at hx\n  simp [cos_pos_of_mem_Ioo hx]\n#align strict_concave_on_cos_Icc strict_concave_on_cos_Icc\n\n",
 "prod_nonneg_of_card_nonpos_even":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\ntheorem finset.prod_nonneg_of_card_nonpos_even {α β : Type _} [LinearOrderedCommRing β] {f : α → β}\n    [decidable_pred fun x => f x ≤ 0] {s : Finset α} (h0 : Even (s.filter fun x => f x ≤ 0).card) :\n    0 ≤ finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f x) :=\n  calc\n    0 ≤\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s\n          ((if f x ≤ 0 then (-1 : β) else 1) * f x) :=\n      finset.prod_nonneg fun x _ => by\n        split_ifs with hx hx\n        · simp [hx]\n        simp at hx⊢\n        exact le_of_lt hx\n    _ = _ := by\n      rw [finset.prod_mul_distrib, finset.prod_ite, finset.prod_const_one, mul_one, finset.prod_const,\n        neg_one_pow_eq_pow_mod_two, nat.even_iff.1 h0, pow_zero, one_mul]\n    \n#align finset.prod_nonneg_of_card_nonpos_even finset.prod_nonneg_of_card_nonpos_even\n\n",
 "pow_sum_div_card_le_sum_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem nnreal.pow_sum_div_card_le_sum_pow {α : Type _} (s : Finset α) (f : α → nnreal) (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f x) ^ (n + 1) /\n        s.card ^ n ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (f x ^ (n + 1)) :=\n  by\n  simpa only [← nnreal.coe_le_coe, nnreal.coe_sum, nonneg.coe_div, nnreal.coe_pow] using\n    @real.pow_sum_div_card_le_sum_pow α s (coe ∘ f) n fun _ _ => nnreal.coe_nonneg _\n#align nnreal.pow_sum_div_card_le_sum_pow nnreal.pow_sum_div_card_le_sum_pow\n\n",
 "int_prod_range_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\ntheorem int_prod_range_pos {m : ℤ} {n : ℕ} (hn : Even n) (hm : m ∉ Ico (0 : ℤ) n) :\n    0 <\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" (Finset.range n)\n        (m - k) :=\n  by\n  refine' (int_prod_range_nonneg m n hn).lt_of_ne fun h => hm _\n  rw [eq_comm, finset.prod_eq_zero_iff] at h\n  obtain ⟨a, ha, h⟩ := h\n  rw [sub_eq_zero.1 h]\n  exact ⟨Int.ofNat_zero_le _, Int.ofNat_lt.2 <| Finset.mem_range.1 ha⟩\n#align int_prod_range_pos int_prod_range_pos\n\n",
 "int_prod_range_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\ntheorem int_prod_range_nonneg (m : ℤ) (n : ℕ) (hn : Even n) :\n    0 ≤\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" (Finset.range n)\n        (m - k) :=\n  by\n  rcases hn with ⟨n, rfl⟩\n  induction' n with n ihn; · simp\n  rw [← two_mul] at ihn\n  rw [← two_mul, nat.succ_eq_add_one, mul_add, mul_one, bit0, ← add_assoc, finset.prod_range_succ,\n    finset.prod_range_succ, mul_assoc]\n  refine' mul_nonneg ihn _; generalize (1 + 1) * n = k\n  cases' le_or_lt m k with hmk hmk\n  · have : m ≤ k + 1 := hmk.trans (lt_add_one ↑k).le\n    convert mul_nonneg_of_nonpos_of_nonpos (sub_nonpos_of_le hmk) _\n    convert sub_nonpos_of_le this\n  · exact mul_nonneg (sub_nonneg_of_le hmk.le) (sub_nonneg_of_le hmk)\n#align int_prod_range_nonneg int_prod_range_nonneg\n\n",
 "has_deriv_at_sqrt_mul_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem has_deriv_at_sqrt_mul_log {x : exprℝ} (hx : x ≠ 0) :\n    has_deriv_at (fun x => sqrt x * log x) ((2 + log x) / (2 * sqrt x)) x :=\n  by\n  convert (has_deriv_at_sqrt hx).mul (has_deriv_at_log hx)\n  rw [add_div, div_mul_right (sqrt x) two_ne_zero, ← div_eq_mul_inv, sqrt_div_self', add_comm, div_eq_mul_one_div,\n    mul_comm]\n#align has_deriv_at_sqrt_mul_log has_deriv_at_sqrt_mul_log\n\n",
 "deriv_sqrt_mul_log'":
 "theorem deriv_sqrt_mul_log' : (deriv fun x => sqrt x * log x) = fun x => (2 + log x) / (2 * sqrt x) :=\n  funext deriv_sqrt_mul_log\n#align deriv_sqrt_mul_log' deriv_sqrt_mul_log'\n\n",
 "deriv_sqrt_mul_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem deriv_sqrt_mul_log (x : exprℝ) : deriv (fun x => sqrt x * log x) x = (2 + log x) / (2 * sqrt x) :=\n  by\n  cases' lt_or_le 0 x with hx hx\n  · exact (has_deriv_at_sqrt_mul_log hx.ne').deriv\n  · rw [sqrt_eq_zero_of_nonpos hx, mul_zero, div_zero]\n    refine' has_deriv_within_at.deriv_eq_zero _ (unique_diff_on_Iic 0 x hx)\n    refine' (has_deriv_within_at_const x _ 0).congr_of_mem (fun x hx => _) hx\n    rw [sqrt_eq_zero_of_nonpos hx, zero_mul]\n#align deriv_sqrt_mul_log deriv_sqrt_mul_log\n\n",
 "deriv2_sqrt_mul_log":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem deriv2_sqrt_mul_log (x : exprℝ) :\n    («expr ^[ ]» deriv 2) (fun x => sqrt x * log x) x = -log x / (4 * sqrt x ^ 3) :=\n  by\n  simp only [nat.iterate, deriv_sqrt_mul_log']\n  cases' le_or_lt x 0 with hx hx\n  · rw [sqrt_eq_zero_of_nonpos hx, zero_pow zero_lt_three, mul_zero, div_zero]\n    refine' has_deriv_within_at.deriv_eq_zero _ (unique_diff_on_Iic 0 x hx)\n    refine' (has_deriv_within_at_const _ _ 0).congr_of_mem (fun x hx => _) hx\n    rw [sqrt_eq_zero_of_nonpos hx, mul_zero, div_zero]\n  · have h₀ : sqrt x ≠ 0 := sqrt_ne_zero'.2 hx\n    convert\n      (((has_deriv_at_log hx.ne').const_add 2).div ((has_deriv_at_sqrt hx.ne').const_mul 2) <|\n          mul_ne_zero two_ne_zero h₀).deriv using\n      1\n    nth_rw 3 [← mul_self_sqrt hx.le]\n    field_simp\n    ring\n#align deriv2_sqrt_mul_log deriv2_sqrt_mul_log\n\n",
 "convex_on_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m` -/\ntheorem convex_on_zpow (m : ℤ) : convex_on (exprℝ) (Ioi 0) fun x : exprℝ => x ^ m :=\n  by\n  have : ∀ n : ℤ, differentiable_on (exprℝ) (fun x => x ^ n) (Ioi (0 : exprℝ)) := fun n =>\n    differentiable_on_zpow _ _ (or.inl <| lt_irrefl _)\n  apply convex_on_of_deriv2_nonneg (convex_Ioi 0) <;> try simp only [interior_Ioi, deriv_zpow']\n  · exact (this _).continuous_on\n  · exact this _\n  · exact (this _).const_mul _\n  · intro x hx\n    rw [iter_deriv_zpow]\n    refine' mul_nonneg _ (zpow_nonneg (le_of_lt hx) _)\n    exact_mod_cast int_prod_range_nonneg _ _ (even_bit0 1)\n#align convex_on_zpow convex_on_zpow\n\n",
 "convex_on_rpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex_on_rpow {p : exprℝ} (hp : 1 ≤ p) : convex_on (exprℝ) (Ici 0) fun x : exprℝ => x ^ p :=\n  by\n  have A : (deriv fun x : exprℝ => x ^ p) = fun x => p * x ^ (p - 1) :=\n    by\n    ext x\n    simp [hp]\n  apply convex_on_of_deriv2_nonneg (convex_Ici 0)\n  · exact continuous_on_id.rpow_const fun x _ => or.inr (zero_le_one.trans hp)\n  · exact (differentiable_rpow_const hp).differentiable_on\n  · rw [A]\n    intro x hx\n    replace hx : x ≠ 0\n    · simp at hx\n      exact ne_of_gt hx\n    simp [differentiable_at.differentiable_within_at, hx]\n  · intro x hx\n    replace hx : 0 < x\n    · simpa using hx\n    suffices 0 ≤ p * ((p - 1) * x ^ (p - 1 - 1)) by simpa [ne_of_gt hx, A]\n    apply mul_nonneg (le_trans zero_le_one hp)\n    exact mul_nonneg (sub_nonneg_of_le hp) (rpow_nonneg_of_nonneg hx.le _)\n#align convex_on_rpow convex_on_rpow\n\n",
 "convex_on_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n` -/\ntheorem convex_on_pow (n : ℕ) : convex_on (exprℝ) (Ici 0) fun x : exprℝ => x ^ n :=\n  by\n  apply convex_on_of_deriv2_nonneg (convex_Ici _) (continuous_pow n).continuous_on (differentiable_on_pow n)\n  · simp only [deriv_pow']\n    exact (@differentiable_on_pow (exprℝ) _ _ _).const_mul (n : exprℝ)\n  · intro x hx\n    rw [iter_deriv_pow, finset.prod_range_cast_nat_sub]\n    exact mul_nonneg (nat.cast_nonneg _) (pow_nonneg (interior_subset hx) _)\n#align convex_on_pow convex_on_pow\n\n",
 "convex_on_exp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `exp` is convex on the whole real line. -/\ntheorem convex_on_exp : convex_on (exprℝ) univ exp :=\n  strict_convex_on_exp.convex_on\n#align convex_on_exp convex_on_exp\n\n"}