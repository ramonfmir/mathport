{"thickening":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex.thickening (hs : convex (exprℝ) s) (δ : exprℝ) : convex (exprℝ) (thickening δ s) :=\n  by\n  rw [← add_ball_zero]\n  exact hs.add (convex_ball 0 _)\n#align convex.thickening convex.thickening\n\n",
 "subset_interior_image_homothety_of_one_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/\ntheorem convex.subset_interior_image_homothety_of_one_lt {s : set E} (hs : convex (exprℝ) s) {x : E}\n    (hx : x ∈ interior s) (t : exprℝ) (ht : 1 < t) : s ⊆ interior («expr '' » (homothety x t) s) :=\n  subset_closure.trans <| hs.closure_subset_interior_image_homothety_of_one_lt hx t ht\n#align convex.subset_interior_image_homothety_of_one_lt convex.subset_interior_image_homothety_of_one_lt\n\n",
 "strict_convex'":
 "/-- A convex set `s` is strictly convex provided that for any two distinct points of\n`s \\ interior s`, the line passing through these points has nonempty intersection with\n`interior s`. -/\nprotected theorem convex.strict_convex' {s : set E} (hs : convex 𝕜 s)\n    (h : (s \\ interior s).pairwise fun x y => ∃ c : 𝕜, line_map x y c ∈ interior s) : strict_convex 𝕜 s :=\n  by\n  refine' strict_convex_iff_open_segment_subset.2 _\n  intro x hx y hy hne\n  by_cases hx' : x ∈ interior s; · exact hs.open_segment_interior_self_subset_interior hx' hy\n  by_cases hy' : y ∈ interior s; · exact hs.open_segment_self_interior_subset_interior hx hy'\n  rcases h ⟨hx, hx'⟩ ⟨hy, hy'⟩ hne with ⟨c, hc⟩\n  refine' (open_segment_subset_union x y ⟨c, rfl⟩).trans (insert_subset.2 ⟨hc, union_subset _ _⟩)\n  exacts[hs.open_segment_self_interior_subset_interior hx hc, hs.open_segment_interior_self_subset_interior hc hy]\n#align convex.strict_convex' convex.strict_convex'\n\n",
 "strict_convex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n/-- A convex set `s` is strictly convex provided that for any two distinct points `x`, `y` of\n`s \\ interior s`, the segment with endpoints `x`, `y` has nonempty intersection with\n`interior s`. -/\nprotected theorem convex.strict_convex {s : set E} (hs : convex 𝕜 s)\n    (h : (s \\ interior s).pairwise fun x y => (segment x 𝕜 y \\ frontier s).nonempty) : strict_convex 𝕜 s :=\n  by\n  refine' hs.strict_convex' <| h.imp_on fun x hx y hy hne => _\n  simp only [segment_eq_image_line_map, ← self_diff_frontier]\n  rintro ⟨_, ⟨⟨c, hc, rfl⟩, hcs⟩⟩\n  refine' ⟨c, hs.segment_subset hx.1 hy.1 _, hcs⟩\n  exact (segment_eq_image_line_map 𝕜 x y).symm ▸ mem_image_of_mem _ hc\n#align convex.strict_convex convex.strict_convex\n\n",
 "std_simplex_subset_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Every vector in `std_simplex 𝕜 ι` has `max`-norm at most `1`. -/\ntheorem std_simplex_subset_closed_ball : std_simplex (exprℝ) ι ⊆ metric.closed_ball 0 1 :=\n  by\n  intro f hf\n  rw [metric.mem_closed_ball, dist_zero_right]\n  refine' nnreal.coe_one ▸ nnreal.coe_le_coe.2 <| finset.sup_le fun x hx => _\n  change |f x| ≤ 1\n  rw [abs_of_nonneg <| hf.1 x]\n  exact (mem_Icc_of_mem_std_simplex hf x).2\n#align std_simplex_subset_closed_ball std_simplex_subset_closed_ball\n\n",
 "path_connected":
 "/-- Every topological vector space over ℝ is path connected.\n\nNot an instance, because it creates enormous TC subproblems (turn on `pp.all`).\n-/\nprotected theorem topological_add_group.path_connected : path_connected_space E :=\n  path_connected_space_iff_univ.mpr <| convex_univ.is_path_connected ⟨(0 : E), trivial⟩\n#align topological_add_group.path_connected topological_add_group.path_connected\n\n",
 "open_segment_self_interior_subset_interior":
 "theorem convex.open_segment_self_interior_subset_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s)\n    (hy : y ∈ interior s) : open_segment 𝕜 x y ⊆ interior s :=\n  hs.open_segment_closure_interior_subset_interior (subset_closure hx) hy\n#align convex.open_segment_self_interior_subset_interior convex.open_segment_self_interior_subset_interior\n\n",
 "open_segment_interior_self_subset_interior":
 "theorem convex.open_segment_interior_self_subset_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ interior s)\n    (hy : y ∈ s) : open_segment 𝕜 x y ⊆ interior s :=\n  hs.open_segment_interior_closure_subset_interior hx (subset_closure hy)\n#align convex.open_segment_interior_self_subset_interior convex.open_segment_interior_self_subset_interior\n\n",
 "open_segment_interior_closure_subset_interior":
 "theorem convex.open_segment_interior_closure_subset_interior {s : set E} (hs : convex 𝕜 s) {x y : E}\n    (hx : x ∈ interior s) (hy : y ∈ closure s) : open_segment 𝕜 x y ⊆ interior s :=\n  by\n  rintro _ ⟨a, b, ha, hb, hab, rfl⟩\n  exact hs.combo_interior_closure_mem_interior hx hy ha hb.le hab\n#align convex.open_segment_interior_closure_subset_interior convex.open_segment_interior_closure_subset_interior\n\n",
 "open_segment_closure_interior_subset_interior":
 "theorem convex.open_segment_closure_interior_subset_interior {s : set E} (hs : convex 𝕜 s) {x y : E}\n    (hx : x ∈ closure s) (hy : y ∈ interior s) : open_segment 𝕜 x y ⊆ interior s :=\n  by\n  rintro _ ⟨a, b, ha, hb, hab, rfl⟩\n  exact hs.combo_closure_interior_mem_interior hx hy ha.le hb hab\n#align convex.open_segment_closure_interior_subset_interior convex.open_segment_closure_interior_subset_interior\n\n",
 "is_preconnected":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A convex set is preconnected. -/\nprotected theorem convex.is_preconnected {s : set E} (h : convex (exprℝ) s) : is_preconnected s :=\n  s.eq_empty_or_nonempty.elim (fun h => h.symm ▸ is_preconnected_empty) fun hne => (h.is_connected hne).is_preconnected\n#align convex.is_preconnected convex.is_preconnected\n\n",
 "is_path_connected":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A nonempty convex set is path connected. -/\nprotected theorem convex.is_path_connected {s : set E} (hconv : convex (exprℝ) s) (hne : s.nonempty) :\n    is_path_connected s := by\n  refine' is_path_connected_iff.mpr ⟨hne, _⟩\n  intro x x_in y y_in\n  have H := hconv.segment_subset x_in y_in\n  rw [segment_eq_image_line_map] at H\n  exact\n    joined_in.of_line affine_map.line_map_continuous.continuous_on (line_map_apply_zero _ _) (line_map_apply_one _ _) H\n#align convex.is_path_connected convex.is_path_connected\n\n",
 "is_connected_set_of_same_ray_and_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The set of nonzero vectors in the same ray as the nonzero vector `x` is connected. -/\ntheorem is_connected_set_of_same_ray_and_ne_zero {x : E} (hx : x ≠ 0) :\n    is_connected { y | same_ray (exprℝ) x y ∧ y ≠ 0 } :=\n  by\n  simp_rw [← exists_pos_left_iff_same_ray_and_ne_zero hx]\n  exact is_connected_Ioi.image _ (continuous_id.smul continuous_const).continuous_on\n#align is_connected_set_of_same_ray_and_ne_zero is_connected_set_of_same_ray_and_ne_zero\n\n",
 "is_connected_set_of_same_ray":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The set of vectors in the same ray as `x` is connected. -/\ntheorem is_connected_set_of_same_ray (x : E) : is_connected { y | same_ray (exprℝ) x y } :=\n  by\n  by_cases hx : x = 0; · simpa [hx] using is_connected_univ\n  simp_rw [← exists_nonneg_left_iff_same_ray hx]\n  exact is_connected_Ici.image _ (continuous_id.smul continuous_const).continuous_on\n#align is_connected_set_of_same_ray is_connected_set_of_same_ray\n\n",
 "is_connected":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A nonempty convex set is connected. -/\nprotected theorem convex.is_connected {s : set E} (h : convex (exprℝ) s) (hne : s.nonempty) : is_connected s :=\n  (h.is_path_connected hne).is_connected\n#align convex.is_connected convex.is_connected\n\n",
 "is_compact_std_simplex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `std_simplex ℝ ι` is compact. -/\ntheorem is_compact_std_simplex : is_compact (std_simplex (exprℝ) ι) :=\n  metric.is_compact_iff_is_closed_bounded.2 ⟨is_closed_std_simplex ι, bounded_std_simplex ι⟩\n#align is_compact_std_simplex is_compact_std_simplex\n\n",
 "is_closed_std_simplex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `std_simplex ℝ ι` is closed. -/\ntheorem is_closed_std_simplex : is_closed (std_simplex (exprℝ) ι) :=\n  (std_simplex_eq_inter (exprℝ) ι).symm ▸\n    is_closed.inter (is_closed_Inter fun i => is_closed_le continuous_const (continuous_apply i))\n      (is_closed_eq (continuous_finset_sum _ fun x _ => continuous_apply x) continuous_const)\n#align is_closed_std_simplex is_closed_std_simplex\n\n",
 "is_closed_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Convex hull of a finite set is closed. -/\ntheorem set.finite.is_closed_convex_hull [t2_space E] {s : set E} (hs : s.finite) : is_closed (convex_hull (exprℝ) s) :=\n  hs.compact_convex_hull.is_closed\n#align set.finite.is_closed_convex_hull set.finite.is_closed_convex_hull\n\n",
 "interior":
 "/-- In a topological vector space, the interior of a convex set is convex. -/\nprotected theorem convex.interior {s : set E} (hs : convex 𝕜 s) : convex 𝕜 (interior s) :=\n  convex_iff_open_segment_subset.mpr fun x hx y hy =>\n    hs.open_segment_closure_interior_subset_interior (interior_subset_closure hx) hy\n#align convex.interior convex.interior\n\n",
 "dist_add_dist_of_mem_segment":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dist_add_dist_of_mem_segment {x y z : E} (h : y ∈ segment x (exprℝ) z) : dist x y + dist y z = dist x z :=\n  by\n  simp only [dist_eq_norm, mem_segment_iff_same_ray] at *\n  simpa only [sub_add_sub_cancel', norm_sub_rev] using h.norm_add.symm\n#align dist_add_dist_of_mem_segment dist_add_dist_of_mem_segment\n\n",
 "cthickening":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex.cthickening (hs : convex (exprℝ) s) (δ : exprℝ) : convex (exprℝ) (cthickening δ s) :=\n  by\n  obtain hδ | hδ := le_total 0 δ\n  · rw [cthickening_eq_Inter_thickening hδ]\n    exact convex_Inter₂ fun _ _ => hs.thickening _\n  · rw [cthickening_of_nonpos hδ]\n    exact hs.closure\n#align convex.cthickening convex.cthickening\n\n",
 "convex_on_univ_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The norm on a real normed space is convex on the whole space. See also `seminorm.convex_on`\nand `convex_on_norm`. -/\ntheorem convex_on_univ_norm : convex_on (exprℝ) univ (norm : E → exprℝ) :=\n  convex_on_norm convex_univ\n#align convex_on_univ_norm convex_on_univ_norm\n\n",
 "convex_on_univ_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex_on_univ_dist (z : E) : convex_on (exprℝ) univ fun z' => dist z' z :=\n  convex_on_dist z convex_univ\n#align convex_on_univ_dist convex_on_univ_dist\n\n",
 "convex_on_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The norm on a real normed space is convex on any convex set. See also `seminorm.convex_on`\nand `convex_on_univ_norm`. -/\ntheorem convex_on_norm (hs : convex (exprℝ) s) : convex_on (exprℝ) s norm :=\n  ⟨hs, fun x hx y hy a b ha hb hab =>\n    calc\n      «expr‖ ‖» («expr • » a x + «expr • » b y) ≤ «expr‖ ‖» («expr • » a x) + «expr‖ ‖» («expr • » b y) :=\n        norm_add_le _ _\n      _ = a * «expr‖ ‖» x + b * «expr‖ ‖» y := by\n        rw [norm_smul, norm_smul, real.norm_of_nonneg ha, real.norm_of_nonneg hb]\n      ⟩\n#align convex_on_norm convex_on_norm\n\n",
 "convex_on_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex_on_dist (z : E) (hs : convex (exprℝ) s) : convex_on (exprℝ) s fun z' => dist z' z := by\n  simpa [dist_eq_norm, preimage_preimage] using\n    (convex_on_norm (hs.translate (-z))).comp_affine_map (affine_map.id (exprℝ) E - affine_map.const (exprℝ) E z)\n#align convex_on_dist convex_on_dist\n\n",
 "convex_iff_is_preconnected":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alexander Bentkamp, Yury Kudryashov\n-/\ntheorem real.convex_iff_is_preconnected {s : set (exprℝ)} : convex (exprℝ) s ↔ is_preconnected s :=\n  convex_iff_ord_connected.trans is_preconnected_iff_ord_connected.symm\n#align real.convex_iff_is_preconnected real.convex_iff_is_preconnected\n\n",
 "convex_hull_exists_dist_ge2":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a point `x` in the convex hull of `s` and a point `y` in the convex hull of `t`,\nthere exist points `x' ∈ s` and `y' ∈ t` at distance at least `dist x y`. -/\ntheorem convex_hull_exists_dist_ge2 {s t : set E} {x y : E} (hx : x ∈ convex_hull (exprℝ) s)\n    (hy : y ∈ convex_hull (exprℝ) t) : ∃ x' ∈ s, ∃ y' ∈ t, dist x y ≤ dist x' y' :=\n  by\n  rcases convex_hull_exists_dist_ge hx y with ⟨x', hx', Hx'⟩\n  rcases convex_hull_exists_dist_ge hy x' with ⟨y', hy', Hy'⟩\n  use x', hx', y', hy'\n  exact le_trans Hx' (dist_comm y x' ▸ dist_comm y' x' ▸ Hy')\n#align convex_hull_exists_dist_ge2 convex_hull_exists_dist_ge2\n\n",
 "convex_hull_exists_dist_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a point `x` in the convex hull of `s` and a point `y`, there exists a point\nof `s` at distance at least `dist x y` from `y`. -/\ntheorem convex_hull_exists_dist_ge {s : set E} {x : E} (hx : x ∈ convex_hull (exprℝ) s) (y : E) :\n    ∃ x' ∈ s, dist x y ≤ dist x' y :=\n  (convex_on_dist y (convex_convex_hull (exprℝ) _)).exists_ge_of_mem_convex_hull hx\n#align convex_hull_exists_dist_ge convex_hull_exists_dist_ge\n\n",
 "convex_hull_ediam":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Emetric diameter of the convex hull of a set `s` equals the emetric diameter of `s. -/\n@[simp]\ntheorem convex_hull_ediam (s : set E) : emetric.diam (convex_hull (exprℝ) s) = emetric.diam s :=\n  by\n  refine' (emetric.diam_le fun x hx y hy => _).antisymm (emetric.diam_mono <| subset_convex_hull (exprℝ) s)\n  rcases convex_hull_exists_dist_ge2 hx hy with ⟨x', hx', y', hy', H⟩\n  rw [edist_dist]\n  apply le_trans (ennreal.of_real_le_of_real H)\n  rw [← edist_dist]\n  exact emetric.edist_le_diam_of_mem hx' hy'\n#align convex_hull_ediam convex_hull_ediam\n\n",
 "convex_hull_diam":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Diameter of the convex hull of a set `s` equals the emetric diameter of `s. -/\n@[simp]\ntheorem convex_hull_diam (s : set E) : metric.diam (convex_hull (exprℝ) s) = metric.diam s := by\n  simp only [metric.diam, convex_hull_ediam]\n#align convex_hull_diam convex_hull_diam\n\n",
 "convex_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex_closed_ball (a : E) (r : exprℝ) : convex (exprℝ) (metric.closed_ball a r) := by\n  simpa only [metric.closed_ball, sep_univ] using (convex_on_univ_dist a).convex_le r\n#align convex_closed_ball convex_closed_ball\n\n",
 "convex_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex_ball (a : E) (r : exprℝ) : convex (exprℝ) (metric.ball a r) := by\n  simpa only [metric.ball, sep_univ] using (convex_on_univ_dist a).convex_lt r\n#align convex_ball convex_ball\n\n",
 "compact_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Convex hull of a finite set is compact. -/\ntheorem set.finite.compact_convex_hull {s : set E} (hs : s.finite) : is_compact (convex_hull (exprℝ) s) :=\n  by\n  rw [hs.convex_hull_eq_image]\n  apply (is_compact_std_simplex _).image\n  haveI := hs.fintype\n  apply linear_map.continuous_on_pi\n#align set.finite.compact_convex_hull set.finite.compact_convex_hull\n\n",
 "combo_self_interior_subset_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `s` is a convex set, then `a • s + b • interior s ⊆ interior s` for all `0 ≤ a`, `0 < b`,\n`a + b = 1`. See also `convex.combo_closure_interior_subset_interior` for a stronger version. -/\ntheorem convex.combo_self_interior_subset_interior {s : set E} (hs : convex 𝕜 s) {a b : 𝕜} (ha : 0 ≤ a) (hb : 0 < b)\n    (hab : a + b = 1) : «expr • » a s + «expr • » b (interior s) ⊆ interior s :=\n  by\n  rw [add_comm]\n  exact hs.combo_interior_self_subset_interior hb ha (add_comm a b ▸ hab)\n#align convex.combo_self_interior_subset_interior convex.combo_self_interior_subset_interior\n\n",
 "combo_self_interior_mem_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem convex.combo_self_interior_mem_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s)\n    (hy : y ∈ interior s) {a b : 𝕜} (ha : 0 ≤ a) (hb : 0 < b) (hab : a + b = 1) :\n    «expr • » a x + «expr • » b y ∈ interior s :=\n  hs.combo_closure_interior_mem_interior (subset_closure hx) hy ha hb hab\n#align convex.combo_self_interior_mem_interior convex.combo_self_interior_mem_interior\n\n",
 "combo_interior_self_subset_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `s` is a convex set, then `a • interior s + b • s ⊆ interior s` for all `0 < a`, `0 ≤ b`,\n`a + b = 1`. See also `convex.combo_interior_closure_subset_interior` for a stronger version. -/\ntheorem convex.combo_interior_self_subset_interior {s : set E} (hs : convex 𝕜 s) {a b : 𝕜} (ha : 0 < a) (hb : 0 ≤ b)\n    (hab : a + b = 1) : «expr • » a (interior s) + «expr • » b s ⊆ interior s :=\n  calc\n    «expr • » a (interior s) + «expr • » b s ⊆ «expr • » a (interior s) + «expr • » b (closure s) :=\n      add_subset_add Subset.rfl <| image_subset _ subset_closure\n    _ ⊆ interior s := hs.combo_interior_closure_subset_interior ha hb hab\n    \n#align convex.combo_interior_self_subset_interior convex.combo_interior_self_subset_interior\n\n",
 "combo_interior_self_mem_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem convex.combo_interior_self_mem_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ interior s)\n    (hy : y ∈ s) {a b : 𝕜} (ha : 0 < a) (hb : 0 ≤ b) (hab : a + b = 1) : «expr • » a x + «expr • » b y ∈ interior s :=\n  hs.combo_interior_closure_mem_interior hx (subset_closure hy) ha hb hab\n#align convex.combo_interior_self_mem_interior convex.combo_interior_self_mem_interior\n\n",
 "combo_interior_closure_subset_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `s` is a convex set, then `a • interior s + b • closure s ⊆ interior s` for all `0 < a`,\n`0 ≤ b`, `a + b = 1`. See also `convex.combo_interior_self_subset_interior` for a weaker version. -/\ntheorem convex.combo_interior_closure_subset_interior {s : set E} (hs : convex 𝕜 s) {a b : 𝕜} (ha : 0 < a) (hb : 0 ≤ b)\n    (hab : a + b = 1) : «expr • » a (interior s) + «expr • » b (closure s) ⊆ interior s :=\n  interior_smul₀ ha.ne' s ▸\n    calc\n      interior («expr • » a s) + «expr • » b (closure s) ⊆ interior («expr • » a s) + closure («expr • » b s) :=\n        add_subset_add Subset.rfl (smul_closure_subset b s)\n      _ = interior («expr • » a s) + «expr • » b s := by rw [is_open_interior.add_closure («expr • » b s)]\n      _ ⊆ interior («expr • » a s + «expr • » b s) := subset_interior_add_left\n      _ ⊆ interior s := interior_mono <| hs.set_combo_subset ha.le hb hab\n      \n#align convex.combo_interior_closure_subset_interior convex.combo_interior_closure_subset_interior\n\n",
 "combo_interior_closure_mem_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem convex.combo_interior_closure_mem_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ interior s)\n    (hy : y ∈ closure s) {a b : 𝕜} (ha : 0 < a) (hb : 0 ≤ b) (hab : a + b = 1) :\n    «expr • » a x + «expr • » b y ∈ interior s :=\n  hs.combo_interior_closure_subset_interior ha hb hab <| add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)\n#align convex.combo_interior_closure_mem_interior convex.combo_interior_closure_mem_interior\n\n",
 "combo_closure_interior_subset_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `s` is a convex set, then `a • closure s + b • interior s ⊆ interior s` for all `0 ≤ a`,\n`0 < b`, `a + b = 1`. See also `convex.combo_self_interior_subset_interior` for a weaker version. -/\ntheorem convex.combo_closure_interior_subset_interior {s : set E} (hs : convex 𝕜 s) {a b : 𝕜} (ha : 0 ≤ a) (hb : 0 < b)\n    (hab : a + b = 1) : «expr • » a (closure s) + «expr • » b (interior s) ⊆ interior s :=\n  by\n  rw [add_comm]\n  exact hs.combo_interior_closure_subset_interior hb ha (add_comm a b ▸ hab)\n#align convex.combo_closure_interior_subset_interior convex.combo_closure_interior_subset_interior\n\n",
 "combo_closure_interior_mem_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem convex.combo_closure_interior_mem_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s)\n    (hy : y ∈ interior s) {a b : 𝕜} (ha : 0 ≤ a) (hb : 0 < b) (hab : a + b = 1) :\n    «expr • » a x + «expr • » b y ∈ interior s :=\n  hs.combo_closure_interior_subset_interior ha hb hab <| add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)\n#align convex.combo_closure_interior_mem_interior convex.combo_closure_interior_mem_interior\n\n",
 "closure_subset_interior_image_homothety_of_one_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/\ntheorem convex.closure_subset_interior_image_homothety_of_one_lt {s : set E} (hs : convex (exprℝ) s) {x : E}\n    (hx : x ∈ interior s) (t : exprℝ) (ht : 1 < t) : closure s ⊆ interior («expr '' » (homothety x t) s) :=\n  (hs.closure_subset_image_homothety_interior_of_one_lt hx t ht).trans <|\n    (homothety_is_open_map x t (one_pos.trans ht).ne').image_interior_subset _\n#align convex.closure_subset_interior_image_homothety_of_one_lt convex.closure_subset_interior_image_homothety_of_one_lt\n\n",
 "closure_subset_image_homothety_interior_of_one_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,\nthe result includes the closure of the original set.\n\nTODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/\ntheorem convex.closure_subset_image_homothety_interior_of_one_lt {s : set E} (hs : convex (exprℝ) s) {x : E}\n    (hx : x ∈ interior s) (t : exprℝ) (ht : 1 < t) : closure s ⊆ «expr '' » (homothety x t) (interior s) :=\n  by\n  intro y hy\n  have hne : t ≠ 0 := (one_pos.trans ht).ne'\n  refine'\n    ⟨homothety x t⁻¹ y, hs.open_segment_interior_closure_subset_interior hx hy _,\n      (affine_equiv.homothety_units_mul_hom x (Units.mk0 t hne)).apply_symm_apply y⟩\n  rw [open_segment_eq_image_line_map, ← inv_one, ← inv_Ioi (zero_lt_one' (exprℝ)), ← image_inv, image_image,\n    homothety_eq_line_map]\n  exact mem_image_of_mem _ ht\n#align convex.closure_subset_image_homothety_interior_of_one_lt convex.closure_subset_image_homothety_interior_of_one_lt\n\n",
 "closure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- In a topological vector space, the closure of a convex set is convex. -/\nprotected theorem convex.closure {s : set E} (hs : convex 𝕜 s) : convex 𝕜 (closure s) := fun x hx y hy a b ha hb hab =>\n  let f : E → E → E := fun x' y' => «expr • » a x' + «expr • » b y'\n  have hf : continuous (function.uncurry f) := (continuous_fst.const_smul _).add (continuous_snd.const_smul _)\n  show f x y ∈ closure s from map_mem_closure₂ hf hx hy fun x' hx' y' hy' => hs hx' hy' ha hb hab\n#align convex.closure convex.closure\n\n",
 "bounded_std_simplex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `std_simplex ℝ ι` is bounded. -/\ntheorem bounded_std_simplex : metric.bounded (std_simplex (exprℝ) ι) :=\n  (metric.bounded_iff_subset_ball 0).2 ⟨1, std_simplex_subset_closed_ball⟩\n#align bounded_std_simplex bounded_std_simplex\n\n",
 "bounded_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Convex hull of `s` is bounded if and only if `s` is bounded. -/\n@[simp]\ntheorem bounded_convex_hull {s : set E} : metric.bounded (convex_hull (exprℝ) s) ↔ metric.bounded s := by\n  simp only [metric.bounded_iff_ediam_ne_top, convex_hull_ediam]\n#align bounded_convex_hull bounded_convex_hull\n\n",
 "add_smul_sub_mem_interior'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `x ∈ closure s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`.\n-/\ntheorem convex.add_smul_sub_mem_interior' {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s)\n    (hy : y ∈ interior s) {t : 𝕜} (ht : t ∈ Ioc (0 : 𝕜) 1) : x + «expr • » t (y - x) ∈ interior s := by\n  simpa only [sub_smul, smul_sub, one_smul, add_sub, add_comm] using\n    hs.combo_interior_closure_mem_interior hy hx ht.1 (sub_nonneg.mpr ht.2) (add_sub_cancel'_right _ _)\n#align convex.add_smul_sub_mem_interior' convex.add_smul_sub_mem_interior'\n\n",
 "add_smul_sub_mem_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `x ∈ s` and `y ∈ interior s`, then the segment `(x, y]` is included in `interior s`. -/\ntheorem convex.add_smul_sub_mem_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : y ∈ interior s)\n    {t : 𝕜} (ht : t ∈ Ioc (0 : 𝕜) 1) : x + «expr • » t (y - x) ∈ interior s :=\n  hs.add_smul_sub_mem_interior' (subset_closure hx) hy ht\n#align convex.add_smul_sub_mem_interior convex.add_smul_sub_mem_interior\n\n",
 "add_smul_mem_interior'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `x ∈ closure s` and `x + y ∈ interior s`, then `x + t y ∈ interior s` for `t ∈ (0, 1]`. -/\ntheorem convex.add_smul_mem_interior' {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ closure s)\n    (hy : x + y ∈ interior s) {t : 𝕜} (ht : t ∈ Ioc (0 : 𝕜) 1) : x + «expr • » t y ∈ interior s := by\n  simpa only [add_sub_cancel'] using hs.add_smul_sub_mem_interior' hx hy ht\n#align convex.add_smul_mem_interior' convex.add_smul_mem_interior'\n\n",
 "add_smul_mem_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `x ∈ s` and `x + y ∈ interior s`, then `x + t y ∈ interior s` for `t ∈ (0, 1]`. -/\ntheorem convex.add_smul_mem_interior {s : set E} (hs : convex 𝕜 s) {x y : E} (hx : x ∈ s) (hy : x + y ∈ interior s)\n    {t : 𝕜} (ht : t ∈ Ioc (0 : 𝕜) 1) : x + «expr • » t y ∈ interior s :=\n  hs.add_smul_mem_interior' (subset_closure hx) hy ht\n#align convex.add_smul_mem_interior convex.add_smul_mem_interior\n\n"}