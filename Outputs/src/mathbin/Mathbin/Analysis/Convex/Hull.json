{"subset_convexHull":
 "#print subset_convexHull /-\n/-\nCopyright (c) 2020 Yury Kudriashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudriashov, Yaël Dillies\n-/\ntheorem subset_convexHull : s ⊆ convexHull 𝕜 s :=\n  (convexHull 𝕜).le_closure s\n#align subset_convex_hull subset_convexHull\n-/\n\n",
 "segment_subset_convexHull":
 "#print segment_subset_convexHull /-\ntheorem segment_subset_convexHull (hx : x ∈ s) (hy : y ∈ s) : segment 𝕜 x y ⊆ convexHull 𝕜 s :=\n  (convex_convexHull _ _).segment_subset (subset_convexHull _ _ hx) (subset_convexHull _ _ hy)\n#align segment_subset_convex_hull segment_subset_convexHull\n-/\n\n",
 "mem_convexHull_iff":
 "#print mem_convexHull_iff /-\ntheorem mem_convexHull_iff : x ∈ convexHull 𝕜 s ↔ ∀ t, s ⊆ t → Convex 𝕜 t → x ∈ t := by\n  simp_rw [convexHull_eq_interᵢ, mem_Inter]\n#align mem_convex_hull_iff mem_convexHull_iff\n-/\n\n",
 "image_convexHull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineMap.image_convexHull /-\ntheorem AffineMap.image_convexHull (f : «expr →ᵃ[ ] » E 𝕜 F) :\n    «expr '' » f (convexHull 𝕜 s) = convexHull 𝕜 («expr '' » f s) :=\n  by\n  apply Set.Subset.antisymm\n  · rw [Set.image_subset_iff]\n    refine' convexHull_min _ ((convex_convexHull 𝕜 («expr '' » («expr⇑ » f) s)).affine_preimage f)\n    rw [← Set.image_subset_iff]\n    exact subset_convexHull 𝕜 («expr '' » f s)\n  · exact convexHull_min (Set.image_subset _ (subset_convexHull 𝕜 s)) ((convex_convexHull 𝕜 s).affine_image f)\n#align affine_map.image_convex_hull AffineMap.image_convexHull\n-/\n\n",
 "convex_remove_iff_not_mem_convexHull_remove":
 "#print Convex.convex_remove_iff_not_mem_convexHull_remove /-\ntheorem Convex.convex_remove_iff_not_mem_convexHull_remove {s : Set E} (hs : Convex 𝕜 s) (x : E) :\n    Convex 𝕜 (s \\ {x}) ↔ x ∉ convexHull 𝕜 (s \\ {x}) :=\n  by\n  constructor\n  · rintro hsx hx\n    rw [hsx.convex_hull_eq] at hx\n    exact hx.2 (mem_singleton _)\n  rintro hx\n  suffices h : s \\ {x} = convexHull 𝕜 (s \\ {x}); · convert convex_convexHull 𝕜 _\n  exact\n    subset.antisymm (subset_convexHull 𝕜 _) fun y hy =>\n      ⟨convexHull_min (diff_subset _ _) hs hy, by\n        rintro (rfl : y = x)\n        exact hx hy⟩\n#align convex.convex_remove_iff_not_mem_convex_hull_remove Convex.convex_remove_iff_not_mem_convexHull_remove\n-/\n\n",
 "convex_convexHull":
 "#print convex_convexHull /-\ntheorem convex_convexHull : Convex 𝕜 (convexHull 𝕜 s) :=\n  ClosureOperator.closure_mem_mk₃ s\n#align convex_convex_hull convex_convexHull\n-/\n\n",
 "convexHull_univ":
 "#print convexHull_univ /-\n@[simp]\ntheorem convexHull_univ : convexHull 𝕜 (univ : Set E) = univ :=\n  ClosureOperator.closure_top (convexHull 𝕜)\n#align convex_hull_univ convexHull_univ\n-/\n\n",
 "convexHull_subset_iff":
 "#print Convex.convexHull_subset_iff /-\ntheorem Convex.convexHull_subset_iff (ht : Convex 𝕜 t) : convexHull 𝕜 s ⊆ t ↔ s ⊆ t :=\n  ⟨(subset_convexHull _ _).trans, fun h => convexHull_min h ht⟩\n#align convex.convex_hull_subset_iff Convex.convexHull_subset_iff\n-/\n\n",
 "convexHull_subset_affineSpan":
 "#print convexHull_subset_affineSpan /-\ntheorem convexHull_subset_affineSpan : convexHull 𝕜 s ⊆ (affineSpan 𝕜 s : Set E) :=\n  convexHull_min (subset_affineSpan 𝕜 s) (affineSpan 𝕜 s).convex\n#align convex_hull_subset_affine_span convexHull_subset_affineSpan\n-/\n\n",
 "convexHull_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print convexHull_smul /-\ntheorem convexHull_smul (a : 𝕜) (s : Set E) : convexHull 𝕜 («expr • » a s) = «expr • » a (convexHull 𝕜 s) :=\n  (LinearMap.lsmul _ _ a).convex_hull_image _\n#align convex_hull_smul convexHull_smul\n-/\n\n",
 "convexHull_singleton":
 "#print convexHull_singleton /-\n@[simp]\ntheorem convexHull_singleton (x : E) : convexHull 𝕜 ({x} : Set E) = {x} :=\n  (convex_singleton x).convex_hull_eq\n#align convex_hull_singleton convexHull_singleton\n-/\n\n",
 "convexHull_pair":
 "#print convexHull_pair /-\n@[simp]\ntheorem convexHull_pair (x y : E) : convexHull 𝕜 {x, y} = segment 𝕜 x y :=\n  by\n  refine'\n    (convexHull_min _ <| convex_segment _ _).antisymm\n      (segment_subset_convexHull (mem_insert _ _) <| mem_insert_of_mem _ <| mem_singleton _)\n  rw [insert_subset, singleton_subset_iff]\n  exact ⟨left_mem_segment _ _ _, right_mem_segment _ _ _⟩\n#align convex_hull_pair convexHull_pair\n-/\n\n",
 "convexHull_nonempty_iff":
 "#print convexHull_nonempty_iff /-\n@[simp]\ntheorem convexHull_nonempty_iff : (convexHull 𝕜 s).nonempty ↔ s.nonempty :=\n  by\n  rw [nonempty_iff_ne_empty, nonempty_iff_ne_empty, ne.def, ne.def]\n  exact not_congr convexHull_empty_iff\n#align convex_hull_nonempty_iff convexHull_nonempty_iff\n-/\n\n",
 "convexHull_neg":
 "#print convexHull_neg /-\ntheorem convexHull_neg (s : Set E) : convexHull 𝕜 (-s) = -convexHull 𝕜 s :=\n  by\n  simp_rw [← image_neg]\n  exact (AffineMap.image_convexHull _ <| -1).symm\n#align convex_hull_neg convexHull_neg\n-/\n\n",
 "convexHull_mono":
 "#print convexHull_mono /-\n@[mono]\ntheorem convexHull_mono (hst : s ⊆ t) : convexHull 𝕜 s ⊆ convexHull 𝕜 t :=\n  (convexHull 𝕜).monotone hst\n#align convex_hull_mono convexHull_mono\n-/\n\n",
 "convexHull_min":
 "#print convexHull_min /-\ntheorem convexHull_min (hst : s ⊆ t) (ht : Convex 𝕜 t) : convexHull 𝕜 s ⊆ t :=\n  ClosureOperator.closure_le_mk₃_iff (show s ≤ t from hst) ht\n#align convex_hull_min convexHull_min\n-/\n\n",
 "convexHull_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print LinearMap.convexHull_image /-\ntheorem LinearMap.convexHull_image (f : «expr →ₗ[ ] » E 𝕜 F) (s : Set E) :\n    convexHull 𝕜 («expr '' » f s) = «expr '' » f (convexHull 𝕜 s) :=\n  f.is_linear.convex_hull_image s\n#align linear_map.convex_hull_image LinearMap.convexHull_image\n-/\n\n",
 "convexHull_eq_interᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print convexHull_eq_interᵢ /-\ntheorem convexHull_eq_interᵢ :\n    convexHull 𝕜 s =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" t :=\n  rfl\n#align convex_hull_eq_Inter convexHull_eq_interᵢ\n-/\n\n",
 "convexHull_eq":
 "#print Convex.convexHull_eq /-\ntheorem Convex.convexHull_eq (hs : Convex 𝕜 s) : convexHull 𝕜 s = s :=\n  ClosureOperator.mem_mk₃_closed hs\n#align convex.convex_hull_eq Convex.convexHull_eq\n-/\n\n",
 "convexHull_empty_iff":
 "#print convexHull_empty_iff /-\n@[simp]\ntheorem convexHull_empty_iff : convexHull 𝕜 s = ∅ ↔ s = ∅ :=\n  by\n  constructor\n  · intro h\n    rw [← Set.subset_empty_iff, ← h]\n    exact subset_convexHull 𝕜 _\n  · rintro rfl\n    exact convexHull_empty\n#align convex_hull_empty_iff convexHull_empty_iff\n-/\n\n",
 "convexHull_empty":
 "#print convexHull_empty /-\n@[simp]\ntheorem convexHull_empty : convexHull 𝕜 (∅ : Set E) = ∅ :=\n  convex_empty.convex_hull_eq\n#align convex_hull_empty convexHull_empty\n-/\n\n",
 "convexHull_convexHull_union_right":
 "#print convexHull_convexHull_union_right /-\ntheorem convexHull_convexHull_union_right (s t : Set E) : convexHull 𝕜 (s ∪ convexHull 𝕜 t) = convexHull 𝕜 (s ∪ t) :=\n  ClosureOperator.closure_sup_closure_right _ _ _\n#align convex_hull_convex_hull_union_right convexHull_convexHull_union_right\n-/\n\n",
 "convexHull_convexHull_union_left":
 "#print convexHull_convexHull_union_left /-\ntheorem convexHull_convexHull_union_left (s t : Set E) : convexHull 𝕜 (convexHull 𝕜 s ∪ t) = convexHull 𝕜 (s ∪ t) :=\n  ClosureOperator.closure_sup_closure_left _ _ _\n#align convex_hull_convex_hull_union_left convexHull_convexHull_union_left\n-/\n\n",
 "affineSpan_convexHull":
 "#print affineSpan_convexHull /-\n@[simp]\ntheorem affineSpan_convexHull : affineSpan 𝕜 (convexHull 𝕜 s) = affineSpan 𝕜 s :=\n  by\n  refine' le_antisymm _ (affineSpan_mono 𝕜 (subset_convexHull 𝕜 s))\n  rw [affineSpan_le]\n  exact convexHull_subset_affineSpan s\n#align affine_span_convex_hull affineSpan_convexHull\n-/\n\n"}