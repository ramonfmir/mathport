{"subset_convex_hull":
 "/-\nCopyright (c) 2020 Yury Kudriashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudriashov, Yaël Dillies\n-/\ntheorem subset_convex_hull : s ⊆ convex_hull 𝕜 s :=\n  (convex_hull 𝕜).le_closure s\n#align subset_convex_hull subset_convex_hull\n\n",
 "segment_subset_convex_hull":
 "theorem segment_subset_convex_hull (hx : x ∈ s) (hy : y ∈ s) : segment 𝕜 x y ⊆ convex_hull 𝕜 s :=\n  (convex_convex_hull _ _).segment_subset (subset_convex_hull _ _ hx) (subset_convex_hull _ _ hy)\n#align segment_subset_convex_hull segment_subset_convex_hull\n\n",
 "mem_convex_hull_iff":
 "theorem mem_convex_hull_iff : x ∈ convex_hull 𝕜 s ↔ ∀ t, s ⊆ t → convex 𝕜 t → x ∈ t := by\n  simp_rw [convex_hull_eq_Inter, mem_Inter]\n#align mem_convex_hull_iff mem_convex_hull_iff\n\n",
 "image_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem affine_map.image_convex_hull (f : «expr →ᵃ[ ] » E 𝕜 F) :\n    «expr '' » f (convex_hull 𝕜 s) = convex_hull 𝕜 («expr '' » f s) :=\n  by\n  apply Set.Subset.antisymm\n  · rw [Set.image_subset_iff]\n    refine' convex_hull_min _ ((convex_convex_hull 𝕜 («expr '' » («expr⇑ » f) s)).affine_preimage f)\n    rw [← Set.image_subset_iff]\n    exact subset_convex_hull 𝕜 («expr '' » f s)\n  · exact convex_hull_min (Set.image_subset _ (subset_convex_hull 𝕜 s)) ((convex_convex_hull 𝕜 s).affine_image f)\n#align affine_map.image_convex_hull affine_map.image_convex_hull\n\n",
 "convex_remove_iff_not_mem_convex_hull_remove":
 "theorem convex.convex_remove_iff_not_mem_convex_hull_remove {s : set E} (hs : convex 𝕜 s) (x : E) :\n    convex 𝕜 (s \\ {x}) ↔ x ∉ convex_hull 𝕜 (s \\ {x}) :=\n  by\n  constructor\n  · rintro hsx hx\n    rw [hsx.convex_hull_eq] at hx\n    exact hx.2 (mem_singleton _)\n  rintro hx\n  suffices h : s \\ {x} = convex_hull 𝕜 (s \\ {x}); · convert convex_convex_hull 𝕜 _\n  exact\n    subset.antisymm (subset_convex_hull 𝕜 _) fun y hy =>\n      ⟨convex_hull_min (diff_subset _ _) hs hy, by\n        rintro (rfl : y = x)\n        exact hx hy⟩\n#align convex.convex_remove_iff_not_mem_convex_hull_remove convex.convex_remove_iff_not_mem_convex_hull_remove\n\n",
 "convex_hull_univ":
 "@[simp]\ntheorem convex_hull_univ : convex_hull 𝕜 (univ : set E) = univ :=\n  ClosureOperator.closure_top (convex_hull 𝕜)\n#align convex_hull_univ convex_hull_univ\n\n",
 "convex_hull_subset_iff":
 "theorem convex.convex_hull_subset_iff (ht : convex 𝕜 t) : convex_hull 𝕜 s ⊆ t ↔ s ⊆ t :=\n  ⟨(subset_convex_hull _ _).trans, fun h => convex_hull_min h ht⟩\n#align convex.convex_hull_subset_iff convex.convex_hull_subset_iff\n\n",
 "convex_hull_subset_affine_span":
 "theorem convex_hull_subset_affine_span : convex_hull 𝕜 s ⊆ (affine_span 𝕜 s : set E) :=\n  convex_hull_min (subset_affine_span 𝕜 s) (affine_span 𝕜 s).convex\n#align convex_hull_subset_affine_span convex_hull_subset_affine_span\n\n",
 "convex_hull_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem convex_hull_smul (a : 𝕜) (s : set E) : convex_hull 𝕜 («expr • » a s) = «expr • » a (convex_hull 𝕜 s) :=\n  (linear_map.lsmul _ _ a).convex_hull_image _\n#align convex_hull_smul convex_hull_smul\n\n",
 "convex_hull_singleton":
 "@[simp]\ntheorem convex_hull_singleton (x : E) : convex_hull 𝕜 ({x} : set E) = {x} :=\n  (convex_singleton x).convex_hull_eq\n#align convex_hull_singleton convex_hull_singleton\n\n",
 "convex_hull_pair":
 "@[simp]\ntheorem convex_hull_pair (x y : E) : convex_hull 𝕜 {x, y} = segment 𝕜 x y :=\n  by\n  refine'\n    (convex_hull_min _ <| convex_segment _ _).antisymm\n      (segment_subset_convex_hull (mem_insert _ _) <| mem_insert_of_mem _ <| mem_singleton _)\n  rw [insert_subset, singleton_subset_iff]\n  exact ⟨left_mem_segment _ _ _, right_mem_segment _ _ _⟩\n#align convex_hull_pair convex_hull_pair\n\n",
 "convex_hull_nonempty_iff":
 "@[simp]\ntheorem convex_hull_nonempty_iff : (convex_hull 𝕜 s).nonempty ↔ s.nonempty :=\n  by\n  rw [nonempty_iff_ne_empty, nonempty_iff_ne_empty, ne.def, ne.def]\n  exact not_congr convex_hull_empty_iff\n#align convex_hull_nonempty_iff convex_hull_nonempty_iff\n\n",
 "convex_hull_neg":
 "theorem convex_hull_neg (s : set E) : convex_hull 𝕜 (-s) = -convex_hull 𝕜 s :=\n  by\n  simp_rw [← image_neg]\n  exact (affine_map.image_convex_hull _ <| -1).symm\n#align convex_hull_neg convex_hull_neg\n\n",
 "convex_hull_mono":
 "@[mono]\ntheorem convex_hull_mono (hst : s ⊆ t) : convex_hull 𝕜 s ⊆ convex_hull 𝕜 t :=\n  (convex_hull 𝕜).monotone hst\n#align convex_hull_mono convex_hull_mono\n\n",
 "convex_hull_min":
 "theorem convex_hull_min (hst : s ⊆ t) (ht : convex 𝕜 t) : convex_hull 𝕜 s ⊆ t :=\n  ClosureOperator.closure_le_mk₃_iff (show s ≤ t from hst) ht\n#align convex_hull_min convex_hull_min\n\n",
 "convex_hull_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem linear_map.convex_hull_image (f : «expr →ₗ[ ] » E 𝕜 F) (s : set E) :\n    convex_hull 𝕜 («expr '' » f s) = «expr '' » f (convex_hull 𝕜 s) :=\n  f.is_linear.convex_hull_image s\n#align linear_map.convex_hull_image linear_map.convex_hull_image\n\n",
 "convex_hull_eq_Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem convex_hull_eq_Inter :\n    convex_hull 𝕜 s =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" t :=\n  rfl\n#align convex_hull_eq_Inter convex_hull_eq_Inter\n\n",
 "convex_hull_eq":
 "theorem convex.convex_hull_eq (hs : convex 𝕜 s) : convex_hull 𝕜 s = s :=\n  ClosureOperator.mem_mk₃_closed hs\n#align convex.convex_hull_eq convex.convex_hull_eq\n\n",
 "convex_hull_empty_iff":
 "@[simp]\ntheorem convex_hull_empty_iff : convex_hull 𝕜 s = ∅ ↔ s = ∅ :=\n  by\n  constructor\n  · intro h\n    rw [← Set.subset_empty_iff, ← h]\n    exact subset_convex_hull 𝕜 _\n  · rintro rfl\n    exact convex_hull_empty\n#align convex_hull_empty_iff convex_hull_empty_iff\n\n",
 "convex_hull_empty":
 "@[simp]\ntheorem convex_hull_empty : convex_hull 𝕜 (∅ : set E) = ∅ :=\n  convex_empty.convex_hull_eq\n#align convex_hull_empty convex_hull_empty\n\n",
 "convex_hull_convex_hull_union_right":
 "theorem convex_hull_convex_hull_union_right (s t : set E) :\n    convex_hull 𝕜 (s ∪ convex_hull 𝕜 t) = convex_hull 𝕜 (s ∪ t) :=\n  ClosureOperator.closure_sup_closure_right _ _ _\n#align convex_hull_convex_hull_union_right convex_hull_convex_hull_union_right\n\n",
 "convex_hull_convex_hull_union_left":
 "theorem convex_hull_convex_hull_union_left (s t : set E) :\n    convex_hull 𝕜 (convex_hull 𝕜 s ∪ t) = convex_hull 𝕜 (s ∪ t) :=\n  ClosureOperator.closure_sup_closure_left _ _ _\n#align convex_hull_convex_hull_union_left convex_hull_convex_hull_union_left\n\n",
 "convex_convex_hull":
 "theorem convex_convex_hull : convex 𝕜 (convex_hull 𝕜 s) :=\n  ClosureOperator.closure_mem_mk₃ s\n#align convex_convex_hull convex_convex_hull\n\n",
 "affine_span_convex_hull":
 "@[simp]\ntheorem affine_span_convex_hull : affine_span 𝕜 (convex_hull 𝕜 s) = affine_span 𝕜 s :=\n  by\n  refine' le_antisymm _ (affine_span_mono 𝕜 (subset_convex_hull 𝕜 s))\n  rw [affine_span_le]\n  exact convex_hull_subset_affine_span s\n#align affine_span_convex_hull affine_span_convex_hull\n\n"}