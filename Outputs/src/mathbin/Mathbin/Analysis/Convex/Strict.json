{"vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n#print StrictConvex.vadd /-\n/-- The translation of a strictly convex set is also strictly convex. -/\ntheorem StrictConvex.vadd (hs : StrictConvex 𝕜 s) (x : E) : StrictConvex 𝕜 («expr +ᵥ » x s) :=\n  hs.add_left x\n#align strict_convex.vadd StrictConvex.vadd\n-/\n\n",
 "sub":
 "#print StrictConvex.sub /-\ntheorem StrictConvex.sub (hs : StrictConvex 𝕜 s) (ht : StrictConvex 𝕜 t) : StrictConvex 𝕜 (s - t) :=\n  (sub_eq_add_neg s t).symm ▸ hs.add ht.neg\n#align strict_convex.sub StrictConvex.sub\n-/\n\n",
 "strictConvex_univ":
 "#print strictConvex_univ /-\ntheorem strictConvex_univ : StrictConvex 𝕜 (univ : Set E) :=\n  by\n  intro x hx y hy hxy a b ha hb hab\n  rw [interior_univ]\n  exact mem_univ _\n#align strict_convex_univ strictConvex_univ\n-/\n\n",
 "strictConvex_unionₛ":
 "#print DirectedOn.strictConvex_unionₛ /-\ntheorem DirectedOn.strictConvex_unionₛ {S : Set (Set E)} (hdir : DirectedOn (· ⊆ ·) S)\n    (hS : ∀ s ∈ S, StrictConvex 𝕜 s) : StrictConvex 𝕜 (⋃₀ S) :=\n  by\n  rw [sUnion_eq_Union]\n  exact (directedOn_iff_directed.1 hdir).strict_convex_Union fun s => hS _ s.2\n#align directed_on.strict_convex_sUnion DirectedOn.strictConvex_unionₛ\n-/\n\n",
 "strictConvex_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Directed.strictConvex_unionᵢ /-\ntheorem Directed.strictConvex_unionᵢ {ι : Sort _} {s : ι → Set E} (hdir : Directed (· ⊆ ·) s)\n    (hs : ∀ ⦃i : ι⦄, StrictConvex 𝕜 (s i)) :\n    StrictConvex 𝕜\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) :=\n  by\n  rintro x hx y hy hxy a b ha hb hab\n  rw [mem_Union] at hx hy\n  obtain ⟨i, hx⟩ := hx\n  obtain ⟨j, hy⟩ := hy\n  obtain ⟨k, hik, hjk⟩ := hdir i j\n  exact interior_mono (subset_Union s k) (hs (hik hx) (hjk hy) hxy ha hb hab)\n#align directed.strict_convex_Union Directed.strictConvex_unionᵢ\n-/\n\n",
 "strictConvex_uIoc":
 "#print strictConvex_uIoc /-\ntheorem strictConvex_uIoc (r s : β) : StrictConvex 𝕜 (uIoc r s) :=\n  strictConvex_Ioc _ _\n#align strict_convex_uIoc strictConvex_uIoc\n-/\n\n",
 "strictConvex_uIcc":
 "#print strictConvex_uIcc /-\ntheorem strictConvex_uIcc (r s : β) : StrictConvex 𝕜 (uIcc r s) :=\n  strictConvex_Icc _ _\n#align strict_convex_uIcc strictConvex_uIcc\n-/\n\n",
 "strictConvex_singleton":
 "#print strictConvex_singleton /-\ntheorem strictConvex_singleton (c : E) : StrictConvex 𝕜 ({c} : Set E) :=\n  pairwise_singleton _ _\n#align strict_convex_singleton strictConvex_singleton\n-/\n\n",
 "strictConvex_of_open":
 "#print Convex.strictConvex_of_open /-\n/-- An open convex set is strictly convex. -/\nprotected theorem Convex.strictConvex_of_open (h : IsOpen s) (hs : Convex 𝕜 s) : StrictConvex 𝕜 s :=\n  fun x hx y hy _ a b ha hb hab => h.interior_eq.symm ▸ hs hx hy ha.le hb.le hab\n#align convex.strict_convex_of_open Convex.strictConvex_of_open\n-/\n\n",
 "strictConvex_iff_ordConnected":
 "#print strictConvex_iff_ordConnected /-\ntheorem strictConvex_iff_ordConnected : StrictConvex 𝕜 s ↔ s.ord_connected :=\n  strictConvex_iff_convex.trans convex_iff_ordConnected\n#align strict_convex_iff_ord_connected strictConvex_iff_ordConnected\n-/\n\n",
 "strictConvex_iff_openSegment_subset":
 "#print strictConvex_iff_openSegment_subset /-\n/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem strictConvex_iff_openSegment_subset : StrictConvex 𝕜 s ↔ s.pairwise fun x y => openSegment 𝕜 x y ⊆ interior s :=\n  forall₅_congr fun x hx y hy hxy => (openSegment_subset_iff 𝕜).symm\n#align strict_convex_iff_open_segment_subset strictConvex_iff_openSegment_subset\n-/\n\n",
 "strictConvex_iff_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print strictConvex_iff_div /-\n/-- Alternative definition of set strict convexity, using division. -/\ntheorem strictConvex_iff_div :\n    StrictConvex 𝕜 s ↔\n      s.pairwise fun x y =>\n        ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → «expr • » (a / (a + b)) x + «expr • » (b / (a + b)) y ∈ interior s :=\n  ⟨fun h x hx y hy hxy a b ha hb =>\n    by\n    apply h hx hy hxy (div_pos ha <| add_pos ha hb) (div_pos hb <| add_pos ha hb)\n    rw [← add_div]\n    exact div_self (add_pos ha hb).ne', fun h x hx y hy hxy a b ha hb hab => by\n    convert h hx hy hxy ha hb <;> rw [hab, div_one]⟩\n#align strict_convex_iff_div strictConvex_iff_div\n-/\n\n",
 "strictConvex_iff_convex":
 "#print strictConvex_iff_convex /-\n/-- A set in a linear ordered field is strictly convex if and only if it is convex. -/\n@[simp]\ntheorem strictConvex_iff_convex : StrictConvex 𝕜 s ↔ Convex 𝕜 s :=\n  ⟨StrictConvex.convex, fun hs => hs.ord_connected.strict_convex⟩\n#align strict_convex_iff_convex strictConvex_iff_convex\n-/\n\n",
 "strictConvex_iff":
 "#print IsOpen.strictConvex_iff /-\ntheorem IsOpen.strictConvex_iff (h : IsOpen s) : StrictConvex 𝕜 s ↔ Convex 𝕜 s :=\n  ⟨StrictConvex.convex, Convex.strictConvex_of_open h⟩\n#align is_open.strict_convex_iff IsOpen.strictConvex_iff\n-/\n\n",
 "strictConvex_empty":
 "#print strictConvex_empty /-\ntheorem strictConvex_empty : StrictConvex 𝕜 (∅ : Set E) :=\n  pairwise_empty _\n#align strict_convex_empty strictConvex_empty\n-/\n\n",
 "strictConvex_Ioo":
 "#print strictConvex_Ioo /-\ntheorem strictConvex_Ioo (r s : β) : StrictConvex 𝕜 (Ioo r s) :=\n  ordConnected_Ioo.strict_convex\n#align strict_convex_Ioo strictConvex_Ioo\n-/\n\n",
 "strictConvex_Ioi":
 "#print strictConvex_Ioi /-\ntheorem strictConvex_Ioi (r : β) : StrictConvex 𝕜 (Ioi r) :=\n  ordConnected_Ioi.strict_convex\n#align strict_convex_Ioi strictConvex_Ioi\n-/\n\n",
 "strictConvex_Ioc":
 "#print strictConvex_Ioc /-\ntheorem strictConvex_Ioc (r s : β) : StrictConvex 𝕜 (Ioc r s) :=\n  ordConnected_Ioc.strict_convex\n#align strict_convex_Ioc strictConvex_Ioc\n-/\n\n",
 "strictConvex_Iio":
 "#print strictConvex_Iio /-\ntheorem strictConvex_Iio (r : β) : StrictConvex 𝕜 (Iio r) :=\n  ordConnected_Iio.strict_convex\n#align strict_convex_Iio strictConvex_Iio\n-/\n\n",
 "strictConvex_Iic":
 "#print strictConvex_Iic /-\ntheorem strictConvex_Iic (r : β) : StrictConvex 𝕜 (Iic r) :=\n  ordConnected_Iic.strict_convex\n#align strict_convex_Iic strictConvex_Iic\n-/\n\n",
 "strictConvex_Ico":
 "#print strictConvex_Ico /-\ntheorem strictConvex_Ico (r s : β) : StrictConvex 𝕜 (Ico r s) :=\n  ordConnected_Ico.strict_convex\n#align strict_convex_Ico strictConvex_Ico\n-/\n\n",
 "strictConvex_Ici":
 "#print strictConvex_Ici /-\ntheorem strictConvex_Ici (r : β) : StrictConvex 𝕜 (Ici r) :=\n  ordConnected_Ici.strict_convex\n#align strict_convex_Ici strictConvex_Ici\n-/\n\n",
 "strictConvex_Icc":
 "#print strictConvex_Icc /-\ntheorem strictConvex_Icc (r s : β) : StrictConvex 𝕜 (Icc r s) :=\n  ordConnected_Icc.strict_convex\n#align strict_convex_Icc strictConvex_Icc\n-/\n\n",
 "strictConvex":
 "#print Set.OrdConnected.strictConvex /-\nprotected theorem Set.OrdConnected.strictConvex {s : Set β} (hs : OrdConnected s) : StrictConvex 𝕜 s :=\n  by\n  refine' strictConvex_iff_openSegment_subset.2 fun x hx y hy hxy => _\n  cases' hxy.lt_or_lt with hlt hlt <;> [skip, rw [openSegment_symm]] <;>\n    exact\n      (openSegment_subset_Ioo hlt).trans\n        (is_open_Ioo.subset_interior_iff.2 <| Ioo_subset_Icc_self.trans <| hs.out ‹_› ‹_›)\n#align set.ord_connected.strict_convex Set.OrdConnected.strictConvex\n-/\n\n",
 "smul_mem_of_zero_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.smul_mem_of_zero_mem /-\ntheorem StrictConvex.smul_mem_of_zero_mem (hs : StrictConvex 𝕜 s) (zero_mem : (0 : E) ∈ s) (hx : x ∈ s) (hx₀ : x ≠ 0)\n    {t : 𝕜} (ht₀ : 0 < t) (ht₁ : t < 1) : «expr • » t x ∈ interior s := by\n  simpa using hs.add_smul_mem zero_mem (by simpa using hx) hx₀ ht₀ ht₁\n#align strict_convex.smul_mem_of_zero_mem StrictConvex.smul_mem_of_zero_mem\n-/\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.smul /-\ntheorem StrictConvex.smul (hs : StrictConvex 𝕜 s) (c : 𝕝) : StrictConvex 𝕜 («expr • » c s) :=\n  by\n  obtain rfl | hc := eq_or_ne c 0\n  · exact (subsingleton_zero_smul_set _).strict_convex\n  · exact hs.linear_image (LinearMap.lsmul _ _ c) (isOpenMap_smul₀ hc)\n#align strict_convex.smul StrictConvex.smul\n-/\n\n",
 "preimage_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.preimage_smul /-\ntheorem StrictConvex.preimage_smul (hs : StrictConvex 𝕜 s) (c : 𝕜) :\n    StrictConvex 𝕜 («expr ⁻¹' » (fun z => «expr • » c z) s) := by\n  classical\n    obtain rfl | hc := eq_or_ne c 0\n    · simp_rw [zero_smul, preimage_const]\n      split_ifs\n      · exact strictConvex_univ\n      · exact strictConvex_empty\n    refine' hs.linear_preimage (LinearMap.lsmul _ _ c) _ (smul_right_injective E hc)\n    unfold LinearMap.lsmul LinearMap.mk₂ LinearMap.mk₂' LinearMap.mk₂'ₛₗ\n    exact continuous_const_smul _\n#align strict_convex.preimage_smul StrictConvex.preimage_smul\n-/\n\n",
 "preimage_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print StrictConvex.preimage_add_right /-\n/-- The translation of a strictly convex set is also strictly convex. -/\ntheorem StrictConvex.preimage_add_right (hs : StrictConvex 𝕜 s) (z : E) :\n    StrictConvex 𝕜 («expr ⁻¹' » (fun x => z + x) s) :=\n  by\n  intro x hx y hy hxy a b ha hb hab\n  refine' preimage_interior_subset_interior_preimage (continuous_add_left _) _\n  have h := hs hx hy ((add_right_injective _).ne hxy) ha hb hab\n  rwa [smul_add, smul_add, add_add_add_comm, ← add_smul, hab, one_smul] at h\n#align strict_convex.preimage_add_right StrictConvex.preimage_add_right\n-/\n\n",
 "preimage_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print StrictConvex.preimage_add_left /-\n/-- The translation of a strictly convex set is also strictly convex. -/\ntheorem StrictConvex.preimage_add_left (hs : StrictConvex 𝕜 s) (z : E) :\n    StrictConvex 𝕜 («expr ⁻¹' » (fun x => x + z) s) := by simpa only [add_comm] using hs.preimage_add_right z\n#align strict_convex.preimage_add_left StrictConvex.preimage_add_left\n-/\n\n",
 "openSegment_subset":
 "#print StrictConvex.openSegment_subset /-\ntheorem StrictConvex.openSegment_subset (hs : StrictConvex 𝕜 s) (hx : x ∈ s) (hy : y ∈ s) (h : x ≠ y) :\n    openSegment 𝕜 x y ⊆ interior s :=\n  strictConvex_iff_openSegment_subset.1 hs hx hy h\n#align strict_convex.open_segment_subset StrictConvex.openSegment_subset\n-/\n\n",
 "neg":
 "#print StrictConvex.neg /-\ntheorem StrictConvex.neg (hs : StrictConvex 𝕜 s) : StrictConvex 𝕜 (-s) :=\n  hs.is_linear_preimage IsLinearMap.isLinearMap_neg continuous_id.neg neg_injective\n#align strict_convex.neg StrictConvex.neg\n-/\n\n",
 "mem_smul_of_zero_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.mem_smul_of_zero_mem /-\ntheorem StrictConvex.mem_smul_of_zero_mem (hs : StrictConvex 𝕜 s) (zero_mem : (0 : E) ∈ s) (hx : x ∈ s) (hx₀ : x ≠ 0)\n    {t : 𝕜} (ht : 1 < t) : x ∈ «expr • » t (interior s) :=\n  by\n  rw [mem_smul_set_iff_inv_smul_mem₀ (zero_lt_one.trans ht).ne']\n  exact hs.smul_mem_of_zero_mem zero_mem hx hx₀ (inv_pos.2 <| zero_lt_one.trans ht) (inv_lt_one ht)\n#align strict_convex.mem_smul_of_zero_mem StrictConvex.mem_smul_of_zero_mem\n-/\n\n",
 "linear_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n#print StrictConvex.linear_preimage /-\ntheorem StrictConvex.linear_preimage {s : Set F} (hs : StrictConvex 𝕜 s) (f : «expr →ₗ[ ] » E 𝕜 F) (hf : Continuous f)\n    (hfinj : injective f) : StrictConvex 𝕜 (s.preimage f) :=\n  by\n  intro x hx y hy hxy a b ha hb hab\n  refine' preimage_interior_subset_interior_preimage hf _\n  rw [mem_preimage, f.map_add, f.map_smul, f.map_smul]\n  exact hs hx hy (hfinj.ne hxy) ha hb hab\n#align strict_convex.linear_preimage StrictConvex.linear_preimage\n-/\n\n",
 "linear_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StrictConvex.linear_image /-\ntheorem StrictConvex.linear_image [Semiring 𝕝] [Module 𝕝 E] [Module 𝕝 F] [LinearMap.CompatibleSMul E F 𝕜 𝕝]\n    (hs : StrictConvex 𝕜 s) (f : «expr →ₗ[ ] » E 𝕝 F) (hf : IsOpenMap f) : StrictConvex 𝕜 («expr '' » f s) :=\n  by\n  rintro _ ⟨x, hx, rfl⟩ _ ⟨y, hy, rfl⟩ hxy a b ha hb hab\n  refine' hf.image_interior_subset _ ⟨«expr • » a x + «expr • » b y, hs hx hy (ne_of_apply_ne _ hxy) ha hb hab, _⟩\n  rw [map_add, f.map_smul_of_tower a, f.map_smul_of_tower b]\n#align strict_convex.linear_image StrictConvex.linear_image\n-/\n\n",
 "is_linear_preimage":
 "#print StrictConvex.is_linear_preimage /-\ntheorem StrictConvex.is_linear_preimage {s : Set F} (hs : StrictConvex 𝕜 s) {f : E → F} (h : IsLinearMap 𝕜 f)\n    (hf : Continuous f) (hfinj : injective f) : StrictConvex 𝕜 (s.preimage f) :=\n  hs.linear_preimage (h.mk' f) hf hfinj\n#align strict_convex.is_linear_preimage StrictConvex.is_linear_preimage\n-/\n\n",
 "is_linear_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StrictConvex.is_linear_image /-\ntheorem StrictConvex.is_linear_image (hs : StrictConvex 𝕜 s) {f : E → F} (h : IsLinearMap 𝕜 f) (hf : IsOpenMap f) :\n    StrictConvex 𝕜 («expr '' » f s) :=\n  hs.linear_image (h.mk' f) hf\n#align strict_convex.is_linear_image StrictConvex.is_linear_image\n-/\n\n",
 "inter":
 "#print StrictConvex.inter /-\nprotected theorem StrictConvex.inter {t : Set E} (hs : StrictConvex 𝕜 s) (ht : StrictConvex 𝕜 t) :\n    StrictConvex 𝕜 (s ∩ t) := by\n  intro x hx y hy hxy a b ha hb hab\n  rw [interior_inter]\n  exact ⟨hs hx.1 hy.1 hxy ha hb hab, ht hx.2 hy.2 hxy ha hb hab⟩\n#align strict_convex.inter StrictConvex.inter\n-/\n\n",
 "eq_of_openSegment_subset_frontier":
 "#print StrictConvex.eq_of_openSegment_subset_frontier /-\ntheorem StrictConvex.eq_of_openSegment_subset_frontier [Nontrivial 𝕜] [DenselyOrdered 𝕜] (hs : StrictConvex 𝕜 s)\n    (hx : x ∈ s) (hy : y ∈ s) (h : openSegment 𝕜 x y ⊆ frontier s) : x = y :=\n  by\n  obtain ⟨a, ha₀, ha₁⟩ := densely_ordered.dense (0 : 𝕜) 1 zero_lt_one\n  classical\n    by_contra hxy\n    exact\n      (h ⟨a, 1 - a, ha₀, sub_pos_of_lt ha₁, add_sub_cancel'_right _ _, rfl⟩).2\n        (hs hx hy hxy ha₀ (sub_pos_of_lt ha₁) <| add_sub_cancel'_right _ _)\n#align strict_convex.eq_of_open_segment_subset_frontier StrictConvex.eq_of_openSegment_subset_frontier\n-/\n\n",
 "eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.eq /-\nprotected theorem StrictConvex.eq (hs : StrictConvex 𝕜 s) (hx : x ∈ s) (hy : y ∈ s) (ha : 0 < a) (hb : 0 < b)\n    (hab : a + b = 1) (h : «expr • » a x + «expr • » b y ∉ interior s) : x = y :=\n  hs.eq hx hy fun H => h <| H ha hb hab\n#align strict_convex.eq StrictConvex.eq\n-/\n\n",
 "convex":
 "#print StrictConvex.convex /-\nprotected theorem StrictConvex.convex (hs : StrictConvex 𝕜 s) : Convex 𝕜 s :=\n  convex_iff_pairwise_pos.2 fun x hx y hy hxy a b ha hb hab => interior_subset <| hs hx hy hxy ha hb hab\n#align strict_convex.convex StrictConvex.convex\n-/\n\n",
 "affinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.affinity /-\ntheorem StrictConvex.affinity [ContinuousAdd E] (hs : StrictConvex 𝕜 s) (z : E) (c : 𝕝) :\n    StrictConvex 𝕜 («expr +ᵥ » z («expr • » c s)) :=\n  (hs.smul c).vadd z\n#align strict_convex.affinity StrictConvex.affinity\n-/\n\n",
 "affine_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print StrictConvex.affine_preimage /-\n/-- The preimage of a strictly convex set under an affine map is strictly convex. -/\ntheorem StrictConvex.affine_preimage {s : Set F} (hs : StrictConvex 𝕜 s) {f : «expr →ᵃ[ ] » E 𝕜 F} (hf : Continuous f)\n    (hfinj : injective f) : StrictConvex 𝕜 («expr ⁻¹' » f s) :=\n  by\n  intro x hx y hy hxy a b ha hb hab\n  refine' preimage_interior_subset_interior_preimage hf _\n  rw [mem_preimage, Convex.combo_affine_apply hab]\n  exact hs hx hy (hfinj.ne hxy) ha hb hab\n#align strict_convex.affine_preimage StrictConvex.affine_preimage\n-/\n\n",
 "affine_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StrictConvex.affine_image /-\n/-- The image of a strictly convex set under an affine map is strictly convex. -/\ntheorem StrictConvex.affine_image (hs : StrictConvex 𝕜 s) {f : «expr →ᵃ[ ] » E 𝕜 F} (hf : IsOpenMap f) :\n    StrictConvex 𝕜 («expr '' » f s) :=\n  by\n  rintro _ ⟨x, hx, rfl⟩ _ ⟨y, hy, rfl⟩ hxy a b ha hb hab\n  exact\n    hf.image_interior_subset _\n      ⟨«expr • » a x + «expr • » b y, ⟨hs hx hy (ne_of_apply_ne _ hxy) ha hb hab, Convex.combo_affine_apply hab⟩⟩\n#align strict_convex.affine_image StrictConvex.affine_image\n-/\n\n",
 "add_smul_sub_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.add_smul_sub_mem /-\ntheorem StrictConvex.add_smul_sub_mem (h : StrictConvex 𝕜 s) (hx : x ∈ s) (hy : y ∈ s) (hxy : x ≠ y) {t : 𝕜}\n    (ht₀ : 0 < t) (ht₁ : t < 1) : x + «expr • » t (y - x) ∈ interior s :=\n  by\n  apply h.open_segment_subset hx hy hxy\n  rw [openSegment_eq_image']\n  exact mem_image_of_mem _ ⟨ht₀, ht₁⟩\n#align strict_convex.add_smul_sub_mem StrictConvex.add_smul_sub_mem\n-/\n\n",
 "add_smul_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StrictConvex.add_smul_mem /-\ntheorem StrictConvex.add_smul_mem (hs : StrictConvex 𝕜 s) (hx : x ∈ s) (hxy : x + y ∈ s) (hy : y ≠ 0) {t : 𝕜}\n    (ht₀ : 0 < t) (ht₁ : t < 1) : x + «expr • » t y ∈ interior s :=\n  by\n  have h : x + «expr • » t y = «expr • » (1 - t) x + «expr • » t (x + y) := by\n    rw [smul_add, ← add_assoc, ← add_smul, sub_add_cancel, one_smul]\n  rw [h]\n  refine' hs hx hxy (fun h => hy <| add_left_cancel _) (sub_pos_of_lt ht₁) ht₀ (sub_add_cancel _ _)\n  exact x\n  rw [← h, add_zero]\n#align strict_convex.add_smul_mem StrictConvex.add_smul_mem\n-/\n\n",
 "add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StrictConvex.add_right /-\ntheorem StrictConvex.add_right (hs : StrictConvex 𝕜 s) (z : E) : StrictConvex 𝕜 («expr '' » (fun x => x + z) s) := by\n  simpa only [add_comm] using hs.add_left z\n#align strict_convex.add_right StrictConvex.add_right\n-/\n\n",
 "add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StrictConvex.add_left /-\ntheorem StrictConvex.add_left (hs : StrictConvex 𝕜 s) (z : E) : StrictConvex 𝕜 («expr '' » (fun x => z + x) s) := by\n  simpa only [singleton_add] using (strictConvex_singleton z).add hs\n#align strict_convex.add_left StrictConvex.add_left\n-/\n\n",
 "add":
 "#print StrictConvex.add /-\ntheorem StrictConvex.add (hs : StrictConvex 𝕜 s) (ht : StrictConvex 𝕜 t) : StrictConvex 𝕜 (s + t) :=\n  by\n  rintro _ ⟨v, w, hv, hw, rfl⟩ _ ⟨x, y, hx, hy, rfl⟩ h a b ha hb hab\n  rw [smul_add, smul_add, add_add_add_comm]\n  obtain rfl | hvx := eq_or_ne v x\n  · refine' interior_mono (add_subset_add (singleton_subset_iff.2 hv) subset.rfl) _\n    rw [Convex.combo_self hab, singleton_add]\n    exact (isOpenMap_add_left _).image_interior_subset _ (mem_image_of_mem _ <| ht hw hy (ne_of_apply_ne _ h) ha hb hab)\n  exact subset_interior_add_left (add_mem_add (hs hv hx hvx ha hb hab) <| ht.convex hw hy ha.le hb.le hab)\n#align strict_convex.add StrictConvex.add\n-/\n\n"}