{"subtype":
 "#print ConvexIndependent.subtype /-\n/-- If a family is convex independent, so is any subfamily indexed by a subtype of the index type.\n-/\nprotected theorem ConvexIndependent.subtype {p : ι → E} (hc : ConvexIndependent 𝕜 p) (s : Set ι) :\n    ConvexIndependent 𝕜 fun i : s => p i :=\n  hc.comp_embedding (Embedding.subtype _)\n#align convex_independent.subtype ConvexIndependent.subtype\n-/\n\n",
 "range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n#print ConvexIndependent.range /-\n/-- If an indexed family of points is convex independent, so is the corresponding set of points. -/\nprotected theorem ConvexIndependent.range {p : ι → E} (hc : ConvexIndependent 𝕜 p) :\n    ConvexIndependent 𝕜 (fun x => x : Set.range p → E) :=\n  by\n  let f : Set.range p → ι := fun x => x.property.some\n  have hf : ∀ x, p (f x) = x := fun x => x.property.some_spec\n  let fe : «expr ↪ » (Set.range p) ι := ⟨f, fun x₁ x₂ he => Subtype.ext (hf x₁ ▸ hf x₂ ▸ he ▸ rfl)⟩\n  convert hc.comp_embedding fe\n  ext\n  rw [embedding.coe_fn_mk, comp_app, hf]\n#align convex_independent.range ConvexIndependent.range\n-/\n\n",
 "mono":
 "#print ConvexIndependent.mono /-\n/-- A subset of a convex independent set of points is convex independent as well. -/\nprotected theorem ConvexIndependent.mono {s t : Set E} (hc : ConvexIndependent 𝕜 (fun x => x : t → E)) (hs : s ⊆ t) :\n    ConvexIndependent 𝕜 (fun x => x : s → E) :=\n  hc.comp_embedding (s.embedding_of_subset t hs)\n#align convex_independent.mono ConvexIndependent.mono\n-/\n\n",
 "mem_convexHull_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print ConvexIndependent.mem_convexHull_iff /-\n/-- If a family is convex independent, a point in the family is in the convex hull of some of the\npoints given by a subset of the index type if and only if the point's index is in this subset. -/\n@[simp]\nprotected theorem ConvexIndependent.mem_convexHull_iff {p : ι → E} (hc : ConvexIndependent 𝕜 p) (s : Set ι) (i : ι) :\n    p i ∈ convexHull 𝕜 («expr '' » p s) ↔ i ∈ s :=\n  ⟨hc _ _, fun hi => subset_convexHull 𝕜 _ (Set.mem_image_of_mem p hi)⟩\n#align convex_independent.mem_convex_hull_iff ConvexIndependent.mem_convexHull_iff\n-/\n\n",
 "injective":
 "#print ConvexIndependent.injective /-\n/-- A convex independent family is injective. -/\nprotected theorem ConvexIndependent.injective {p : ι → E} (hc : ConvexIndependent 𝕜 p) : function.injective p :=\n  by\n  refine' fun i j hij => hc {j} i _\n  rw [hij, Set.image_singleton, convexHull_singleton]\n  exact Set.mem_singleton _\n#align convex_independent.injective ConvexIndependent.injective\n-/\n\n",
 "convexIndependent_set_iff_not_mem_convexHull_diff":
 "#print convexIndependent_set_iff_not_mem_convexHull_diff /-\n/-- If a set is convex independent, a point in the set is not in the convex hull of the other\npoints. See `convex_independent_iff_not_mem_convex_hull_diff` for the indexed family version.  -/\ntheorem convexIndependent_set_iff_not_mem_convexHull_diff {s : Set E} :\n    ConvexIndependent 𝕜 (fun x => x : s → E) ↔ ∀ x ∈ s, x ∉ convexHull 𝕜 (s \\ {x}) :=\n  by\n  rw [convexIndependent_set_iff_inter_convexHull_subset]\n  constructor\n  · rintro hs x hxs hx\n    exact (hs _ (Set.diff_subset _ _) ⟨hxs, hx⟩).2 (Set.mem_singleton _)\n  · rintro hs t ht x ⟨hxs, hxt⟩\n    by_contra h\n    exact hs _ hxs (convexHull_mono (Set.subset_diff_singleton ht h) hxt)\n#align convex_independent_set_iff_not_mem_convex_hull_diff convexIndependent_set_iff_not_mem_convexHull_diff\n-/\n\n",
 "convexIndependent_set_iff_inter_convexHull_subset":
 "#print convexIndependent_set_iff_inter_convexHull_subset /-\ntheorem convexIndependent_set_iff_inter_convexHull_subset {s : Set E} :\n    ConvexIndependent 𝕜 (fun x => x : s → E) ↔ ∀ t, t ⊆ s → s ∩ convexHull 𝕜 t ⊆ t :=\n  by\n  constructor\n  · rintro hc t h x ⟨hxs, hxt⟩\n    refine' hc { x | ↑x ∈ t } ⟨x, hxs⟩ _\n    rw [Subtype.coe_image_of_subset h]\n    exact hxt\n  · intro hc t x h\n    rw [← subtype.coe_injective.mem_set_image]\n    exact hc (t.image coe) (Subtype.coe_image_subset s t) ⟨x.prop, h⟩\n#align convex_independent_set_iff_inter_convex_hull_subset convexIndependent_set_iff_inter_convexHull_subset\n-/\n\n",
 "convexIndependent_iff_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n#print Function.Injective.convexIndependent_iff_set /-\n/-- The range of an injective indexed family of points is convex independent iff that family is. -/\ntheorem Function.Injective.convexIndependent_iff_set {p : ι → E} (hi : function.injective p) :\n    ConvexIndependent 𝕜 (fun x => x : Set.range p → E) ↔ ConvexIndependent 𝕜 p :=\n  ⟨fun hc =>\n    hc.comp_embedding\n      (⟨fun i => ⟨p i, Set.mem_range_self _⟩, fun x y h => hi (Subtype.mk_eq_mk.1 h)⟩ : «expr ↪ » ι (Set.range p)),\n    ConvexIndependent.range⟩\n#align function.injective.convex_independent_iff_set Function.Injective.convexIndependent_iff_set\n-/\n\n",
 "convexIndependent_iff_not_mem_convexHull_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print convexIndependent_iff_not_mem_convexHull_diff /-\n/-- If a family is convex independent, a point in the family is not in the convex hull of the other\npoints. See `convex_independent_set_iff_not_mem_convex_hull_diff` for the `set` version.  -/\ntheorem convexIndependent_iff_not_mem_convexHull_diff {p : ι → E} :\n    ConvexIndependent 𝕜 p ↔ ∀ i s, p i ∉ convexHull 𝕜 («expr '' » p (s \\ {i})) :=\n  by\n  refine' ⟨fun hc i s h => _, fun h s i hi => _⟩\n  · rw [hc.mem_convex_hull_iff] at h\n    exact h.2 (Set.mem_singleton _)\n  · by_contra H\n    refine' h i s _\n    rw [Set.diff_singleton_eq_self H]\n    exact hi\n#align convex_independent_iff_not_mem_convex_hull_diff convexIndependent_iff_not_mem_convexHull_diff\n-/\n\n",
 "convexIndependent_iff_finset":
 "#print convexIndependent_iff_finset /-\n/-- To check convex independence, one only has to check finsets thanks to Carathéodory's theorem. -/\ntheorem convexIndependent_iff_finset {p : ι → E} :\n    ConvexIndependent 𝕜 p ↔ ∀ (s : Finset ι) (x : ι), p x ∈ convexHull 𝕜 (s.image p : Set E) → x ∈ s :=\n  by\n  refine' ⟨fun hc s x hx => hc s x _, fun h s x hx => _⟩\n  · rwa [Finset.coe_image] at hx\n  have hp : injective p := by\n    rintro a b hab\n    rw [← mem_singleton]\n    refine' h {b} a _\n    rw [hab, image_singleton, coe_singleton, convexHull_singleton]\n    exact Set.mem_singleton _\n  rw [convexHull_eq_union_convexHull_finite_subsets] at hx\n  simp_rw [Set.mem_unionᵢ] at hx\n  obtain ⟨t, ht, hx⟩ := hx\n  rw [← hp.mem_set_image]\n  refine' ht _\n  suffices x ∈ t.preimage p (hp.inj_on _) by rwa [mem_preimage, ← mem_coe] at this\n  refine' h _ x _\n  rwa [t.image_preimage p (hp.inj_on _), filter_true_of_mem]\n  · exact fun y hy => s.image_subset_range p (ht <| mem_coe.2 hy)\n#align convex_independent_iff_finset convexIndependent_iff_finset\n-/\n\n",
 "convexIndependent_extremePoints":
 "#print Convex.convexIndependent_extremePoints /-\ntheorem Convex.convexIndependent_extremePoints (hs : Convex 𝕜 s) :\n    ConvexIndependent 𝕜 (fun p => p : s.extreme_points 𝕜 → E) :=\n  convexIndependent_set_iff_not_mem_convexHull_diff.2 fun x hx h =>\n    (extremePoints_convexHull_subset\n          (inter_extremePoints_subset_extremePoints_of_subset\n            (convexHull_min ((Set.diff_subset _ _).trans extremePoints_subset) hs) ⟨h, hx⟩)).2\n      (Set.mem_singleton _)\n#align convex.convex_independent_extreme_points Convex.convexIndependent_extremePoints\n-/\n\n",
 "convexIndependent":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print Subsingleton.convexIndependent /-\n/-\nCopyright (c) 2021 Yaël Dillies, Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies, Bhavik Mehta\n-/\n/-- A family with at most one point is convex independent. -/\ntheorem Subsingleton.convexIndependent [subsingleton ι] (p : ι → E) : ConvexIndependent 𝕜 p := fun s x hx =>\n  by\n  have : (convexHull 𝕜 («expr '' » p s)).nonempty := ⟨p x, hx⟩\n  rw [convexHull_nonempty_iff, Set.nonempty_image_iff] at this\n  rwa [Subsingleton.mem_iff_nonempty]\n#align subsingleton.convex_independent Subsingleton.convexIndependent\n-/\n\n",
 "comp_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n#print ConvexIndependent.comp_embedding /-\n/-- If a family is convex independent, so is any subfamily given by composition of an embedding into\nindex type with the original family. -/\ntheorem ConvexIndependent.comp_embedding {ι' : Type _} (f : «expr ↪ » ι' ι) {p : ι → E} (hc : ConvexIndependent 𝕜 p) :\n    ConvexIndependent 𝕜 (p ∘ f) := by\n  intro s x hx\n  rw [← f.injective.mem_set_image]\n  exact hc _ _ (by rwa [Set.image_image])\n#align convex_independent.comp_embedding ConvexIndependent.comp_embedding\n-/\n\n"}