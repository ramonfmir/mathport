{"union":
 "#print StarConvex.union /-\ntheorem StarConvex.union (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 x t) : StarConvex 𝕜 x (s ∪ t) :=\n  by\n  rintro y (hy | hy) a b ha hb hab\n  · exact or.inl (hs hy ha hb hab)\n  · exact or.inr (ht hy ha hb hab)\n#align star_convex.union StarConvex.union\n-/\n\n",
 "sub'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StarConvex.sub' /-\ntheorem StarConvex.sub' {s : Set (E × E)} (hs : StarConvex 𝕜 (x, y) s) :\n    StarConvex 𝕜 (x - y) («expr '' » (fun x : E × E => x.1 - x.2) s) :=\n  hs.is_linear_image IsLinearMap.isLinearMap_sub\n#align star_convex.sub' StarConvex.sub'\n-/\n\n",
 "sub":
 "#print StarConvex.sub /-\ntheorem StarConvex.sub (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 y t) : StarConvex 𝕜 (x - y) (s - t) :=\n  by\n  simp_rw [sub_eq_add_neg]\n  exact hs.add ht.neg\n#align star_convex.sub StarConvex.sub\n-/\n\n",
 "starConvex_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print starConvex_zero_iff /-\ntheorem starConvex_zero_iff : StarConvex 𝕜 0 s ↔ ∀ ⦃x : E⦄, x ∈ s → ∀ ⦃a : 𝕜⦄, 0 ≤ a → a ≤ 1 → «expr • » a x ∈ s :=\n  by\n  refine' forall_congr' fun x => forall_congr' fun hx => ⟨fun h a ha₀ ha₁ => _, fun h a b ha hb hab => _⟩\n  ·\n    simpa only [sub_add_cancel, eq_self_iff_true, forall_true_left, zero_add, smul_zero] using\n      h (sub_nonneg_of_le ha₁) ha₀\n  · rw [smul_zero, zero_add]\n    exact\n      h hb\n        (by\n          rw [← hab]\n          exact le_add_of_nonneg_left ha)\n#align star_convex_zero_iff starConvex_zero_iff\n-/\n\n",
 "starConvex_univ":
 "#print starConvex_univ /-\ntheorem starConvex_univ (x : E) : StarConvex 𝕜 x univ := fun _ _ _ _ _ _ _ => trivial\n#align star_convex_univ starConvex_univ\n-/\n\n",
 "starConvex_unionₛ":
 "#print starConvex_unionₛ /-\ntheorem starConvex_unionₛ {S : Set (Set E)} (hS : ∀ s ∈ S, StarConvex 𝕜 x s) : StarConvex 𝕜 x (⋃₀ S) :=\n  by\n  rw [sUnion_eq_Union]\n  exact starConvex_unionᵢ fun s => hS _ s.2\n#align star_convex_sUnion starConvex_unionₛ\n-/\n\n",
 "starConvex_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print starConvex_unionᵢ /-\ntheorem starConvex_unionᵢ {ι : Sort _} {s : ι → Set E} (hs : ∀ i, StarConvex 𝕜 x (s i)) :\n    StarConvex 𝕜 x\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) :=\n  by\n  rintro y hy a b ha hb hab\n  rw [mem_Union] at hy⊢\n  obtain ⟨i, hy⟩ := hy\n  exact ⟨i, hs i hy ha hb hab⟩\n#align star_convex_Union starConvex_unionᵢ\n-/\n\n",
 "starConvex_singleton":
 "#print starConvex_singleton /-\ntheorem starConvex_singleton (x : E) : StarConvex 𝕜 x {x} :=\n  by\n  rintro y (rfl : y = x) a b ha hb hab\n  exact Convex.combo_self hab _\n#align star_convex_singleton starConvex_singleton\n-/\n\n",
 "starConvex_pi":
 "#print starConvex_pi /-\ntheorem starConvex_pi {ι : Type _} {E : ι → Type _} [∀ i, AddCommMonoid (E i)] [∀ i, SMul 𝕜 (E i)] {x : ∀ i, E i}\n    {s : Set ι} {t : ∀ i, Set (E i)} (ht : ∀ ⦃i⦄, i ∈ s → StarConvex 𝕜 (x i) (t i)) : StarConvex 𝕜 x (s.pi t) :=\n  fun y hy a b ha hb hab i hi => ht hi (hy i hi) ha hb hab\n#align star_convex_pi starConvex_pi\n-/\n\n",
 "starConvex_interₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n#print starConvex_interₛ /-\ntheorem starConvex_interₛ {S : Set (Set E)} (h : ∀ s ∈ S, StarConvex 𝕜 x s) : StarConvex 𝕜 x («expr⋂₀ » S) :=\n  fun y hy a b ha hb hab s hs => h s hs (hy s hs) ha hb hab\n#align star_convex_sInter starConvex_interₛ\n-/\n\n",
 "starConvex_interᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print starConvex_interᵢ /-\ntheorem starConvex_interᵢ {ι : Sort _} {s : ι → Set E} (h : ∀ i, StarConvex 𝕜 x (s i)) :\n    StarConvex 𝕜 x\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) :=\n  interₛ_range s ▸ starConvex_interₛ <| forall_range_iff.2 h\n#align star_convex_Inter starConvex_interᵢ\n-/\n\n",
 "starConvex_iff_segment_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n#print starConvex_iff_segment_subset /-\n/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem starConvex_iff_segment_subset : StarConvex 𝕜 x s ↔ ∀ ⦃y⦄, y ∈ s → segment x 𝕜 y ⊆ s :=\n  by\n  constructor\n  · rintro h y hy z ⟨a, b, ha, hb, hab, rfl⟩\n    exact h hy ha hb hab\n  · rintro h y hy a b ha hb hab\n    exact h hy ⟨a, b, ha, hb, hab, rfl⟩\n#align star_convex_iff_segment_subset starConvex_iff_segment_subset\n-/\n\n",
 "starConvex_iff_pointwise_add_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print starConvex_iff_pointwise_add_subset /-\n/-- Alternative definition of star-convexity, in terms of pointwise set operations. -/\ntheorem starConvex_iff_pointwise_add_subset :\n    StarConvex 𝕜 x s ↔ ∀ ⦃a b : 𝕜⦄, 0 ≤ a → 0 ≤ b → a + b = 1 → «expr • » a {x} + «expr • » b s ⊆ s :=\n  by\n  refine' ⟨_, fun h y hy a b ha hb hab => h ha hb hab (add_mem_add (smul_mem_smul_set <| mem_singleton _) ⟨_, hy, rfl⟩)⟩\n  rintro hA a b ha hb hab w ⟨au, bv, ⟨u, rfl : u = x, rfl⟩, ⟨v, hv, rfl⟩, rfl⟩\n  exact hA hv ha hb hab\n#align star_convex_iff_pointwise_add_subset starConvex_iff_pointwise_add_subset\n-/\n\n",
 "starConvex_iff_ordConnected":
 "#print starConvex_iff_ordConnected /-\ntheorem starConvex_iff_ordConnected [LinearOrderedField 𝕜] {x : 𝕜} {s : Set 𝕜} (hx : x ∈ s) :\n    StarConvex 𝕜 x s ↔ s.ord_connected := by\n  simp_rw [ord_connected_iff_uIcc_subset_left hx, starConvex_iff_segment_subset, segment_eq_uIcc]\n#align star_convex_iff_ord_connected starConvex_iff_ordConnected\n-/\n\n",
 "starConvex_iff_openSegment_subset":
 "#print starConvex_iff_openSegment_subset /-\ntheorem starConvex_iff_openSegment_subset (hx : x ∈ s) : StarConvex 𝕜 x s ↔ ∀ ⦃y⦄, y ∈ s → openSegment 𝕜 x y ⊆ s :=\n  starConvex_iff_segment_subset.trans <| forall₂_congr fun y hy => (openSegment_subset_iff_segment_subset hx hy).symm\n#align star_convex_iff_open_segment_subset starConvex_iff_openSegment_subset\n-/\n\n",
 "starConvex_iff_forall_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print starConvex_iff_forall_pos /-\ntheorem starConvex_iff_forall_pos (hx : x ∈ s) :\n    StarConvex 𝕜 x s ↔ ∀ ⦃y⦄, y ∈ s → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → «expr • » a x + «expr • » b y ∈ s :=\n  by\n  refine' ⟨fun h y hy a b ha hb hab => h hy ha.le hb.le hab, _⟩\n  intro h y hy a b ha hb hab\n  obtain rfl | ha := ha.eq_or_lt\n  · rw [zero_add] at hab\n    rwa [hab, one_smul, zero_smul, zero_add]\n  obtain rfl | hb := hb.eq_or_lt\n  · rw [add_zero] at hab\n    rwa [hab, one_smul, zero_smul, add_zero]\n  exact h hy ha hb hab\n#align star_convex_iff_forall_pos starConvex_iff_forall_pos\n-/\n\n",
 "starConvex_iff_forall_ne_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print starConvex_iff_forall_ne_pos /-\ntheorem starConvex_iff_forall_ne_pos (hx : x ∈ s) :\n    StarConvex 𝕜 x s ↔\n      ∀ ⦃y⦄, y ∈ s → x ≠ y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → «expr • » a x + «expr • » b y ∈ s :=\n  by\n  refine' ⟨fun h y hy _ a b ha hb hab => h hy ha.le hb.le hab, _⟩\n  intro h y hy a b ha hb hab\n  obtain rfl | ha' := ha.eq_or_lt\n  · rw [zero_add] at hab\n    rwa [hab, zero_smul, one_smul, zero_add]\n  obtain rfl | hb' := hb.eq_or_lt\n  · rw [add_zero] at hab\n    rwa [hab, zero_smul, one_smul, add_zero]\n  obtain rfl | hxy := eq_or_ne x y\n  · rwa [Convex.combo_self hab]\n  exact h hy hxy ha' hb' hab\n#align star_convex_iff_forall_ne_pos starConvex_iff_forall_ne_pos\n-/\n\n",
 "starConvex_iff_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print starConvex_iff_div /-\n/-- Alternative definition of star-convexity, using division. -/\ntheorem starConvex_iff_div :\n    StarConvex 𝕜 x s ↔\n      ∀ ⦃y⦄,\n        y ∈ s → ∀ ⦃a b : 𝕜⦄, 0 ≤ a → 0 ≤ b → 0 < a + b → «expr • » (a / (a + b)) x + «expr • » (b / (a + b)) y ∈ s :=\n  ⟨fun h y hy a b ha hb hab => by\n    apply h hy\n    · have ha' := mul_le_mul_of_nonneg_left ha (inv_pos.2 hab).le\n      rwa [MulZeroClass.mul_zero, ← div_eq_inv_mul] at ha'\n    · have hb' := mul_le_mul_of_nonneg_left hb (inv_pos.2 hab).le\n      rwa [MulZeroClass.mul_zero, ← div_eq_inv_mul] at hb'\n    · rw [← add_div]\n      exact div_self hab.ne', fun h y hy a b ha hb hab =>\n    by\n    have h' := h hy ha hb\n    rw [hab, div_one, div_one] at h'\n    exact h' zero_lt_one⟩\n#align star_convex_iff_div starConvex_iff_div\n-/\n\n",
 "starConvex_empty":
 "#print starConvex_empty /-\ntheorem starConvex_empty (x : E) : StarConvex 𝕜 x ∅ := fun y hy => hy.elim\n#align star_convex_empty starConvex_empty\n-/\n\n",
 "starConvex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Set.OrdConnected.starConvex /-\ntheorem Set.OrdConnected.starConvex [OrderedSemiring 𝕜] [OrderedAddCommMonoid E] [Module 𝕜 E] [OrderedSMul 𝕜 E] {x : E}\n    {s : Set E} (hs : s.ord_connected) (hx : x ∈ s) (h : ∀ y ∈ s, x ≤ y ∨ y ≤ x) : StarConvex 𝕜 x s :=\n  by\n  intro y hy a b ha hb hab\n  obtain hxy | hyx := h _ hy\n  · refine' hs.out hx hy (mem_Icc.2 ⟨_, _⟩)\n    calc\n      x = «expr • » a x + «expr • » b x := (Convex.combo_self hab _).symm\n      _ ≤ «expr • » a x + «expr • » b y := add_le_add_left (smul_le_smul_of_nonneg hxy hb) _\n      \n    calc\n      «expr • » a x + «expr • » b y ≤ «expr • » a y + «expr • » b y :=\n        add_le_add_right (smul_le_smul_of_nonneg hxy ha) _\n      _ = y := Convex.combo_self hab _\n      \n  · refine' hs.out hy hx (mem_Icc.2 ⟨_, _⟩)\n    calc\n      y = «expr • » a y + «expr • » b y := (Convex.combo_self hab _).symm\n      _ ≤ «expr • » a x + «expr • » b y := add_le_add_right (smul_le_smul_of_nonneg hyx ha) _\n      \n    calc\n      «expr • » a x + «expr • » b y ≤ «expr • » a x + «expr • » b x := add_le_add_left (smul_le_smul_of_nonneg hyx hb) _\n      _ = x := Convex.combo_self hab _\n      \n#align set.ord_connected.star_convex Set.OrdConnected.starConvex\n-/\n\n",
 "smul_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.smul_mem /-\ntheorem StarConvex.smul_mem (hs : StarConvex 𝕜 0 s) (hx : x ∈ s) {t : 𝕜} (ht₀ : 0 ≤ t) (ht₁ : t ≤ 1) :\n    «expr • » t x ∈ s := by simpa using hs.add_smul_mem (by simpa using hx) ht₀ ht₁\n#align star_convex.smul_mem StarConvex.smul_mem\n-/\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.smul /-\ntheorem StarConvex.smul (hs : StarConvex 𝕜 x s) (c : 𝕜) : StarConvex 𝕜 («expr • » c x) («expr • » c s) :=\n  hs.linear_image <| LinearMap.lsmul _ _ c\n#align star_convex.smul StarConvex.smul\n-/\n\n",
 "segment_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `segment -/\n#print StarConvex.segment_subset /-\ntheorem StarConvex.segment_subset (h : StarConvex 𝕜 x s) {y : E} (hy : y ∈ s) : segment x 𝕜 y ⊆ s :=\n  starConvex_iff_segment_subset.1 h hy\n#align star_convex.segment_subset StarConvex.segment_subset\n-/\n\n",
 "prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n#print StarConvex.prod /-\ntheorem StarConvex.prod {y : F} {s : Set E} {t : Set F} (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 y t) :\n    StarConvex 𝕜 (x, y) (finset.product s t) := fun y hy a b ha hb hab => ⟨hs hy.1 ha hb hab, ht hy.2 ha hb hab⟩\n#align star_convex.prod StarConvex.prod\n-/\n\n",
 "preimage_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.preimage_smul /-\ntheorem StarConvex.preimage_smul {c : 𝕜} (hs : StarConvex 𝕜 («expr • » c x) s) :\n    StarConvex 𝕜 x («expr ⁻¹' » (fun z => «expr • » c z) s) :=\n  hs.linear_preimage (LinearMap.lsmul _ _ c)\n#align star_convex.preimage_smul StarConvex.preimage_smul\n-/\n\n",
 "preimage_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print StarConvex.preimage_add_right /-\n/-- The translation of a star-convex set is also star-convex. -/\ntheorem StarConvex.preimage_add_right (hs : StarConvex 𝕜 (z + x) s) : StarConvex 𝕜 x («expr ⁻¹' » (fun x => z + x) s) :=\n  by\n  intro y hy a b ha hb hab\n  have h := hs hy ha hb hab\n  rwa [smul_add, smul_add, add_add_add_comm, ← add_smul, hab, one_smul] at h\n#align star_convex.preimage_add_right StarConvex.preimage_add_right\n-/\n\n",
 "preimage_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print StarConvex.preimage_add_left /-\n/-- The translation of a star-convex set is also star-convex. -/\ntheorem StarConvex.preimage_add_left (hs : StarConvex 𝕜 (x + z) s) : StarConvex 𝕜 x («expr ⁻¹' » (fun x => x + z) s) :=\n  by\n  rw [add_comm] at hs\n  simpa only [add_comm] using hs.preimage_add_right\n#align star_convex.preimage_add_left StarConvex.preimage_add_left\n-/\n\n",
 "openSegment_subset":
 "#print StarConvex.openSegment_subset /-\ntheorem StarConvex.openSegment_subset (h : StarConvex 𝕜 x s) {y : E} (hy : y ∈ s) : openSegment 𝕜 x y ⊆ s :=\n  (openSegment_subset_segment 𝕜 x y).trans (h.segment_subset hy)\n#align star_convex.open_segment_subset StarConvex.openSegment_subset\n-/\n\n",
 "neg":
 "#print StarConvex.neg /-\ntheorem StarConvex.neg (hs : StarConvex 𝕜 x s) : StarConvex 𝕜 (-x) (-s) :=\n  by\n  rw [← image_neg]\n  exact hs.is_linear_image IsLinearMap.isLinearMap_neg\n#align star_convex.neg StarConvex.neg\n-/\n\n",
 "mem_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.mem_smul /-\ntheorem StarConvex.mem_smul (hs : StarConvex 𝕜 0 s) (hx : x ∈ s) {t : 𝕜} (ht : 1 ≤ t) : x ∈ «expr • » t s :=\n  by\n  rw [mem_smul_set_iff_inv_smul_mem₀ (zero_lt_one.trans_le ht).ne']\n  exact hs.smul_mem hx (inv_nonneg.2 <| zero_le_one.trans ht) (inv_le_one ht)\n#align star_convex.mem_smul StarConvex.mem_smul\n-/\n\n",
 "mem":
 "#print StarConvex.mem /-\ntheorem StarConvex.mem (hs : StarConvex 𝕜 x s) (h : s.nonempty) : x ∈ s :=\n  by\n  obtain ⟨y, hy⟩ := h\n  convert hs hy zero_le_one le_rfl (add_zero 1)\n  rw [one_smul, zero_smul, add_zero]\n#align star_convex.mem StarConvex.mem\n-/\n\n",
 "linear_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n#print StarConvex.linear_preimage /-\ntheorem StarConvex.linear_preimage {s : Set F} (f : «expr →ₗ[ ] » E 𝕜 F) (hs : StarConvex 𝕜 (f x) s) :\n    StarConvex 𝕜 x (s.preimage f) := by\n  intro y hy a b ha hb hab\n  rw [mem_preimage, f.map_add, f.map_smul, f.map_smul]\n  exact hs hy ha hb hab\n#align star_convex.linear_preimage StarConvex.linear_preimage\n-/\n\n",
 "linear_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n#print StarConvex.linear_image /-\ntheorem StarConvex.linear_image (hs : StarConvex 𝕜 x s) (f : «expr →ₗ[ ] » E 𝕜 F) : StarConvex 𝕜 (f x) (s.image f) :=\n  by\n  intro y hy a b ha hb hab\n  obtain ⟨y', hy', rfl⟩ := hy\n  exact ⟨«expr • » a x + «expr • » b y', hs hy' ha hb hab, by rw [f.map_add, f.map_smul, f.map_smul]⟩\n#align star_convex.linear_image StarConvex.linear_image\n-/\n\n",
 "is_linear_preimage":
 "#print StarConvex.is_linear_preimage /-\ntheorem StarConvex.is_linear_preimage {s : Set F} {f : E → F} (hs : StarConvex 𝕜 (f x) s) (hf : IsLinearMap 𝕜 f) :\n    StarConvex 𝕜 x (preimage f s) :=\n  hs.linear_preimage <| hf.mk' f\n#align star_convex.is_linear_preimage StarConvex.is_linear_preimage\n-/\n\n",
 "is_linear_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StarConvex.is_linear_image /-\ntheorem StarConvex.is_linear_image (hs : StarConvex 𝕜 x s) {f : E → F} (hf : IsLinearMap 𝕜 f) :\n    StarConvex 𝕜 (f x) («expr '' » f s) :=\n  hs.linear_image <| hf.mk' f\n#align star_convex.is_linear_image StarConvex.is_linear_image\n-/\n\n",
 "inter":
 "#print StarConvex.inter /-\ntheorem StarConvex.inter (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 x t) : StarConvex 𝕜 x (s ∩ t) :=\n  fun y hy a b ha hb hab => ⟨hs hy.left ha hb hab, ht hy.right ha hb hab⟩\n#align star_convex.inter StarConvex.inter\n-/\n\n",
 "affinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.affinity /-\ntheorem StarConvex.affinity (hs : StarConvex 𝕜 x s) (z : E) (c : 𝕜) :\n    StarConvex 𝕜 (z + «expr • » c x) («expr '' » (fun x => z + «expr • » c x) s) :=\n  by\n  have h := (hs.smul c).add_left z\n  rwa [← image_smul, image_image] at h\n#align star_convex.affinity StarConvex.affinity\n-/\n\n",
 "affine_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print StarConvex.affine_preimage /-\n/-- The preimage of a star-convex set under an affine map is star-convex. -/\ntheorem StarConvex.affine_preimage (f : «expr →ᵃ[ ] » E 𝕜 F) {s : Set F} (hs : StarConvex 𝕜 (f x) s) :\n    StarConvex 𝕜 x («expr ⁻¹' » f s) := by\n  intro y hy a b ha hb hab\n  rw [mem_preimage, Convex.combo_affine_apply hab]\n  exact hs hy ha hb hab\n#align star_convex.affine_preimage StarConvex.affine_preimage\n-/\n\n",
 "affine_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StarConvex.affine_image /-\n/-- The image of a star-convex set under an affine map is star-convex. -/\ntheorem StarConvex.affine_image (f : «expr →ᵃ[ ] » E 𝕜 F) {s : Set E} (hs : StarConvex 𝕜 x s) :\n    StarConvex 𝕜 (f x) («expr '' » f s) :=\n  by\n  rintro y ⟨y', ⟨hy', hy'f⟩⟩ a b ha hb hab\n  refine' ⟨«expr • » a x + «expr • » b y', ⟨hs hy' ha hb hab, _⟩⟩\n  rw [Convex.combo_affine_apply hab, hy'f]\n#align star_convex.affine_image StarConvex.affine_image\n-/\n\n",
 "add_smul_sub_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.add_smul_sub_mem /-\ntheorem StarConvex.add_smul_sub_mem (hs : StarConvex 𝕜 x s) (hy : y ∈ s) {t : 𝕜} (ht₀ : 0 ≤ t) (ht₁ : t ≤ 1) :\n    x + «expr • » t (y - x) ∈ s := by\n  apply hs.segment_subset hy\n  rw [segment_eq_image']\n  exact mem_image_of_mem _ ⟨ht₀, ht₁⟩\n#align star_convex.add_smul_sub_mem StarConvex.add_smul_sub_mem\n-/\n\n",
 "add_smul_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print StarConvex.add_smul_mem /-\ntheorem StarConvex.add_smul_mem (hs : StarConvex 𝕜 x s) (hy : x + y ∈ s) {t : 𝕜} (ht₀ : 0 ≤ t) (ht₁ : t ≤ 1) :\n    x + «expr • » t y ∈ s :=\n  by\n  have h : x + «expr • » t y = «expr • » (1 - t) x + «expr • » t (x + y) := by\n    rw [smul_add, ← add_assoc, ← add_smul, sub_add_cancel, one_smul]\n  rw [h]\n  exact hs hy (sub_nonneg_of_le ht₁) ht₀ (sub_add_cancel _ _)\n#align star_convex.add_smul_mem StarConvex.add_smul_mem\n-/\n\n",
 "add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StarConvex.add_right /-\ntheorem StarConvex.add_right (hs : StarConvex 𝕜 x s) (z : E) : StarConvex 𝕜 (x + z) («expr '' » (fun x => x + z) s) :=\n  by\n  intro y hy a b ha hb hab\n  obtain ⟨y', hy', rfl⟩ := hy\n  refine' ⟨«expr • » a x + «expr • » b y', hs hy' ha hb hab, _⟩\n  rw [smul_add, smul_add, add_add_add_comm, ← add_smul, hab, one_smul]\n#align star_convex.add_right StarConvex.add_right\n-/\n\n",
 "add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print StarConvex.add_left /-\ntheorem StarConvex.add_left (hs : StarConvex 𝕜 x s) (z : E) : StarConvex 𝕜 (z + x) («expr '' » (fun x => z + x) s) :=\n  by\n  intro y hy a b ha hb hab\n  obtain ⟨y', hy', rfl⟩ := hy\n  refine' ⟨«expr • » a x + «expr • » b y', hs hy' ha hb hab, _⟩\n  rw [smul_add, smul_add, add_add_add_comm, ← add_smul, hab, one_smul]\n#align star_convex.add_left StarConvex.add_left\n-/\n\n",
 "add":
 "#print StarConvex.add /-\ntheorem StarConvex.add {t : Set E} (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 y t) : StarConvex 𝕜 (x + y) (s + t) :=\n  by\n  rw [← add_image_prod]\n  exact (hs.prod ht).is_linear_image IsLinearMap.isLinearMap_add\n#align star_convex.add StarConvex.add\n-/\n\n"}