{"uncurry_bilinear_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n@[simp]\ntheorem uncurry_bilinear_apply (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) (m : fin 2 → E × F) :\n    f.uncurry_bilinear m = f (m 0).1 (m 1).2 :=\n  rfl\n#align uncurry_bilinear_apply uncurry_bilinear_apply\n\n",
 "has_fpower_series_on_ball_bilinear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\nprotected theorem has_fpower_series_on_ball_bilinear (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) (x : E × F) :\n    has_fpower_series_on_ball (fun x : E × F => f x.1 x.2) (f.fpower_series_bilinear x) x (ennreal.top) :=\n  { r_le := by simp\n    r_pos := ennreal.coe_lt_top\n    has_sum := fun y _ =>\n      (has_sum_nat_add_iff' 3).1 <|\n        by\n        simp only [finset.sum_range_succ, finset.sum_range_one, Prod.fst_add, Prod.snd_add, f.map_add_add]\n        dsimp; simp only [add_comm, sub_self, has_sum_zero] }\n#align has_fpower_series_on_ball_bilinear has_fpower_series_on_ball_bilinear\n\n",
 "has_fpower_series_on_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\nprotected theorem has_fpower_series_on_ball (f : «expr →L[ ] » E 𝕜 F) (x : E) :\n    has_fpower_series_on_ball f (f.fpower_series x) x (ennreal.top) :=\n  { r_le := by simp\n    r_pos := ennreal.coe_lt_top\n    has_sum := fun y _ => (has_sum_nat_add_iff' 2).1 <| by simp [finset.sum_range_succ, ← sub_sub, has_sum_zero] }\n#align has_fpower_series_on_ball has_fpower_series_on_ball\n\n",
 "has_fpower_series_at_bilinear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\nprotected theorem has_fpower_series_at_bilinear (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) (x : E × F) :\n    has_fpower_series_at (fun x : E × F => f x.1 x.2) (f.fpower_series_bilinear x) x :=\n  ⟨ennreal.top, f.has_fpower_series_on_ball_bilinear x⟩\n#align has_fpower_series_at_bilinear has_fpower_series_at_bilinear\n\n",
 "has_fpower_series_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\nprotected theorem has_fpower_series_at (f : «expr →L[ ] » E 𝕜 F) (x : E) :\n    has_fpower_series_at f (f.fpower_series x) x :=\n  ⟨ennreal.top, f.has_fpower_series_on_ball x⟩\n#align has_fpower_series_at has_fpower_series_at\n\n",
 "fpower_series_radius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n@[simp]\ntheorem fpower_series_radius (f : «expr →L[ ] » E 𝕜 F) (x : E) : (f.fpower_series x).radius = ennreal.top :=\n  (f.fpower_series x).radius_eq_top_of_forall_image_add_eq_zero 2 fun n => rfl\n#align fpower_series_radius fpower_series_radius\n\n",
 "fpower_series_bilinear_radius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n@[simp]\ntheorem fpower_series_bilinear_radius (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) (x : E × F) :\n    (f.fpower_series_bilinear x).radius = ennreal.top :=\n  (f.fpower_series_bilinear x).radius_eq_top_of_forall_image_add_eq_zero 3 fun n => rfl\n#align fpower_series_bilinear_radius fpower_series_bilinear_radius\n\n",
 "fpower_series_apply_add_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/-\nCopyright (c) 2021 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\n@[simp]\ntheorem fpower_series_apply_add_two (f : «expr →L[ ] » E 𝕜 F) (x : E) (n : ℕ) : f.fpower_series x (n + 2) = 0 :=\n  rfl\n#align fpower_series_apply_add_two fpower_series_apply_add_two\n\n",
 "analytic_at_bilinear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\nprotected theorem analytic_at_bilinear (f : «expr →L[ ] » E 𝕜 («expr →L[ ] » F 𝕜 G)) (x : E × F) :\n    analytic_at 𝕜 (fun x : E × F => f x.1 x.2) x :=\n  (f.has_fpower_series_at_bilinear x).analytic_at\n#align analytic_at_bilinear analytic_at_bilinear\n\n",
 "analytic_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\nprotected theorem analytic_at (f : «expr →L[ ] » E 𝕜 F) (x : E) : analytic_at 𝕜 f x :=\n  (f.has_fpower_series_at x).analytic_at\n#align analytic_at analytic_at\n\n"}