{"zero_convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n@[simp]\ntheorem zero_convolution : convolution 0 L Œº g = 0 := by\n  ext\n  simp_rw [convolution_def, Pi.zero_apply, L.map_zero‚ÇÇ, integral_zero]\n#align zero_convolution zero_convolution\n\n",
 "support_convolution_subset_swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem support_convolution_subset_swap : support (convolution f L Œº g) ‚äÜ support g + support f :=\n  by\n  intro x h2x\n  by_contra hx\n  apply h2x\n  simp_rw [Set.mem_add, not_exists, not_and_or, nmem_support] at hx\n  rw [convolution_def]\n  convert integral_zero G F\n  ext t\n  rcases hx (x - t) t with (h | h | h)\n  ¬∑ rw [h, (L _).map_zero]\n  ¬∑ rw [h, L.map_zero‚ÇÇ]\n  ¬∑ exact (h <| sub_add_cancel x t).elim\n#align support_convolution_subset_swap support_convolution_subset_swap\n\n",
 "support_convolution_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem support_convolution_subset : support (convolution f L Œº g) ‚äÜ support f + support g :=\n  (support_convolution_subset_swap L).trans (add_comm _ _).subset\n#align support_convolution_subset support_convolution_subset\n\n",
 "smul_convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem smul_convolution [SMulCommClass (expr‚Ñù) ùïú F] {y : ùïú} :\n    convolution (¬´expr ‚Ä¢ ¬ª y f) L Œº g = ¬´expr ‚Ä¢ ¬ª y (convolution f L Œº g) :=\n  by\n  ext\n  simp only [Pi.smul_apply, convolution_def, ‚Üê integral_smul, L.map_smul‚ÇÇ]\n#align smul_convolution smul_convolution\n\n",
 "pos_convolution_eq_convolution_indicator":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem pos_convolution_eq_convolution_indicator (f : expr‚Ñù ‚Üí E) (g : expr‚Ñù ‚Üí E')\n    (L : ¬´expr ‚ÜíL[ ] ¬ª E (expr‚Ñù) (¬´expr ‚ÜíL[ ] ¬ª E' (expr‚Ñù) F))\n    (ŒΩ : measure (expr‚Ñù) := by exact measure_theory.measure_space.volume) [NoAtoms ŒΩ] :\n    pos_convolution f g L ŒΩ = convolution (indicator (Ioi 0) f) (indicator (Ioi 0) g) L ŒΩ :=\n  by\n  ext1 x\n  rw [convolution, pos_convolution, indicator]\n  split_ifs\n  ¬∑ rw [interval_integral.integral_of_le (le_of_lt h), integral_Ioc_eq_integral_Ioo, ‚Üê\n      integral_indicator (measurable_set_Ioo : MeasurableSet (Ioo 0 x))]\n    congr 1 with t : 1\n    have : t ‚â§ 0 ‚à® t ‚àà Ioo 0 x ‚à® x ‚â§ t := by\n      rcases le_or_lt t 0 with (h | h)\n      ¬∑ exact or.inl h\n      ¬∑ rcases lt_or_le t x with (h' | h')\n        exacts[or.inr (or.inl ‚ü®h, h'‚ü©), or.inr (or.inr h')]\n    rcases this with (ht | ht | ht)\n    ¬∑\n      rw [indicator_of_not_mem (not_mem_Ioo_of_le ht), indicator_of_not_mem (not_mem_Ioi.mpr ht),\n        ContinuousLinearMap.map_zero, ContinuousLinearMap.zero_apply]\n    ¬∑ rw [indicator_of_mem ht, indicator_of_mem (mem_Ioi.mpr ht.1), indicator_of_mem (mem_Ioi.mpr <| sub_pos.mpr ht.2)]\n    ¬∑\n      rw [indicator_of_not_mem (not_mem_Ioo_of_ge ht), indicator_of_not_mem (not_mem_Ioi.mpr (sub_nonpos_of_le ht)),\n        ContinuousLinearMap.map_zero]\n  ¬∑ convert(integral_zero (expr‚Ñù) F).symm\n    ext1 t\n    by_cases ht : 0 < t\n    ¬∑ rw [indicator_of_not_mem (_ : x - t ‚àâ Ioi 0), ContinuousLinearMap.map_zero]\n      rw [not_mem_Ioi] at h‚ä¢\n      exact sub_nonpos.mpr (h.trans ht.le)\n    ¬∑ rw [indicator_of_not_mem (mem_Ioi.not.mpr ht), ContinuousLinearMap.map_zero, ContinuousLinearMap.zero_apply]\n#align pos_convolution_eq_convolution_indicator pos_convolution_eq_convolution_indicator\n\n",
 "of_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- If `‚Äñf‚Äñ *[Œº] ‚Äñg‚Äñ` exists, then `f *[L, Œº] g` exists. -/\ntheorem convolution_exists_at.of_norm' {x‚ÇÄ : G}\n    (h : convolution_exists_at (fun x => ¬´expr‚Äñ ‚Äñ¬ª (f x)) (fun x => ¬´expr‚Äñ ‚Äñ¬ª (g x)) x‚ÇÄ (mul (expr‚Ñù) (expr‚Ñù)) Œº)\n    (hmf : ae_strongly_measurable f Œº) (hmg : ae_strongly_measurable g <| map (fun t => x‚ÇÄ - t) Œº) :\n    convolution_exists_at f g x‚ÇÄ L Œº :=\n  by\n  refine' (h.const_mul (¬´expr‚Äñ ‚Äñ¬ª L)).mono' (hmf.convolution_integrand_snd' L hmg) (eventually_of_forall fun x => _)\n  rw [mul_apply', ‚Üê mul_assoc]\n  apply L.le_op_norm‚ÇÇ\n#align convolution_exists_at.of_norm' convolution_exists_at.of_norm'\n\n",
 "of_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- If `‚Äñf‚Äñ *[Œº] ‚Äñg‚Äñ` exists, then `f *[L, Œº] g` exists. -/\ntheorem convolution_exists_at.of_norm {x‚ÇÄ : G}\n    (h : convolution_exists_at (fun x => ¬´expr‚Äñ ‚Äñ¬ª (f x)) (fun x => ¬´expr‚Äñ ‚Äñ¬ª (g x)) x‚ÇÄ (mul (expr‚Ñù) (expr‚Ñù)) Œº)\n    (hmf : ae_strongly_measurable f Œº) (hmg : ae_strongly_measurable g Œº) : convolution_exists_at f g x‚ÇÄ L Œº :=\n  h.of_norm' L hmf <| hmg.mono' (quasi_measure_preserving_sub_left_of_right_invariant Œº x‚ÇÄ).absolutely_continuous\n#align convolution_exists_at.of_norm convolution_exists_at.of_norm\n\n",
 "normed_convolution_eq_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- If `œÜ` is a normed bump function, compute `œÜ ‚ãÜ g` if `g` is constant on `metric.ball x‚ÇÄ œÜ.R`. -/\ntheorem normed_convolution_eq_right {x‚ÇÄ : G} (hg : ‚àÄ x ‚àà ball x‚ÇÄ œÜ.R, g x = g x‚ÇÄ) :\n    (convolution (œÜ.normed Œº) (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g : G ‚Üí E') x‚ÇÄ = g x‚ÇÄ :=\n  by\n  simp_rw [convolution_eq_right' _ œÜ.support_normed_eq.subset hg, lsmul_apply]\n  exact integral_normed_smul œÜ Œº (g x‚ÇÄ)\n#align normed_convolution_eq_right normed_convolution_eq_right\n\n",
 "integral_pos_convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ in .. , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in .. , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª -/\n/-- The integral over `Ioi 0` of a forward convolution of two functions is equal to the product\nof their integrals over this set. (Compare `integral_convolution` for the two-sided convolution.) -/\ntheorem integral_pos_convolution [CompleteSpace E] [CompleteSpace E'] {Œº ŒΩ : measure (expr‚Ñù)} [SigmaFinite Œº]\n    [SigmaFinite ŒΩ] [is_add_right_invariant Œº] [NoAtoms ŒΩ] {f : expr‚Ñù ‚Üí E} {g : expr‚Ñù ‚Üí E'}\n    (hf : integrable_on f (Ioi 0) ŒΩ) (hg : integrable_on g (Ioi 0) Œº)\n    (L : ¬´expr ‚ÜíL[ ] ¬ª E (expr‚Ñù) (¬´expr ‚ÜíL[ ] ¬ª E' (expr‚Ñù) F)) :\n    ¬´expr‚à´ in , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª\" (Ioi 0)\n        (¬´expr‚à´ in .. , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in .. , ‚àÇ ¬ª\"\n          0 x (L (f t) (g (x - t))) ŒΩ)\n        Œº =\n      L\n        (¬´expr‚à´ in , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª\"\n          (Ioi 0) (f x) ŒΩ)\n        (¬´expr‚à´ in , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ in , ‚àÇ ¬ª\"\n          (Ioi 0) (g x) Œº) :=\n  by\n  rw [‚Üê integrable_indicator_iff (measurable_set_Ioi : MeasurableSet (Ioi (0 : expr‚Ñù)))] at hf hg\n  simp_rw [‚Üê integral_indicator measurable_set_Ioi]\n  convert integral_convolution L hf hg using 2\n  apply pos_convolution_eq_convolution_indicator\n#align integral_pos_convolution integral_pos_convolution\n\n",
 "integral_convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\ntheorem integral_convolution [MeasurableAdd‚ÇÇ G] [MeasurableNeg G] [NormedSpace (expr‚Ñù) E] [NormedSpace (expr‚Ñù) E']\n    [CompleteSpace E] [CompleteSpace E'] (hf : integrable f ŒΩ) (hg : integrable g Œº) :\n    ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        ((convolution f L ŒΩ g) x) Œº =\n      L (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\" (f x) ŒΩ)\n        (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\" (g x) Œº) :=\n  by\n  refine' (integral_integral_swap (by apply hf.convolution_integrand L hg)).trans _\n  simp_rw [integral_comp_comm _ (hg.comp_sub_right _), integral_sub_right_eq_self]\n  exact\n    (L.flip\n          (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\" (g x)\n            Œº)).integral_comp_comm\n      hf\n#align integral_convolution integral_convolution\n\n",
 "integrable_swap":
 "theorem convolution_exists_at.integrable_swap (h : convolution_exists_at f g x L Œº) :\n    integrable (fun t => L (f (x - t)) (g t)) Œº :=\n  by\n  convert h.comp_sub_left x\n  simp_rw [sub_sub_self]\n#align convolution_exists_at.integrable_swap convolution_exists_at.integrable_swap\n\n",
 "integrable_pos_convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem integrable_pos_convolution {f : expr‚Ñù ‚Üí E} {g : expr‚Ñù ‚Üí E'} {Œº ŒΩ : measure (expr‚Ñù)} [SigmaFinite Œº]\n    [SigmaFinite ŒΩ] [is_add_right_invariant Œº] [NoAtoms ŒΩ] (hf : integrable_on f (Ioi 0) ŒΩ)\n    (hg : integrable_on g (Ioi 0) Œº) (L : ¬´expr ‚ÜíL[ ] ¬ª E (expr‚Ñù) (¬´expr ‚ÜíL[ ] ¬ª E' (expr‚Ñù) F)) :\n    integrable (pos_convolution f g L ŒΩ) Œº :=\n  by\n  rw [‚Üê integrable_indicator_iff (measurable_set_Ioi : MeasurableSet (Ioi (0 : expr‚Ñù)))] at hf hg\n  rw [pos_convolution_eq_convolution_indicator f g L ŒΩ]\n  exact (hf.convolution_integrand L hg).integral_prod_left\n#align integrable_pos_convolution integrable_pos_convolution\n\n",
 "integrable_convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem measure_theory.integrable.integrable_convolution (hf : integrable f Œº) (hg : integrable g Œº) :\n    integrable (convolution f L Œº g) Œº :=\n  (hf.convolution_integrand L hg).integral_prod_left\n#align measure_theory.integrable.integrable_convolution measure_theory.integrable.integrable_convolution\n\n",
 "integrable":
 "theorem convolution_exists_at.integrable [Sub G] {x : G} (h : convolution_exists_at f g x L Œº) :\n    integrable (fun t => L (f t) (g (x - t))) Œº :=\n  h\n#align convolution_exists_at.integrable convolution_exists_at.integrable\n\n",
 "has_fderiv_at_convolution_right_with_param":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·∂ú¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/-- The derivative of the convolution `f * g` is given by `f * Dg`, when `f` is locally integrable\nand `g` is `C^1` and compactly supported. Version where `g` depends on an additional parameter in an\nopen subset `s` of a parameter space `P` (and the compact support `k` is independent of the\nparameter in `s`). -/\ntheorem has_fderiv_at_convolution_right_with_param {g : P ‚Üí G ‚Üí E'} {s : Set P} {k : Set G} (hs : IsOpen s)\n    (hk : IsCompact k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : cont_diff_on ùïú 1 (uncurry g) (lower_set.prod s univ)) (q‚ÇÄ : P √ó G) (hq‚ÇÄ : q‚ÇÄ.1 ‚àà s) :\n    has_fderiv_at (fun q : P √ó G => (convolution f L Œº (g q.1)) q.2)\n      ((convolution f (L.precompR (P √ó G)) Œº fun x : G => fderiv ùïú (uncurry g) (q‚ÇÄ.1, x)) q‚ÇÄ.2) q‚ÇÄ :=\n  by\n  let g' := fderiv ùïú (uncurry g)\n  have A : ‚àÄ p ‚àà s, Continuous (g p) := by\n    intro p hp\n    apply hg.continuous_on.comp_continuous (continuous_const.prod_mk continuous_id') fun x => _\n    simpa only [prod_mk_mem_set_prod_eq, mem_univ, and_true_iff] using hp\n  have A' : ‚àÄ q : P √ó G, q.1 ‚àà s ‚Üí lower_set.prod s univ ‚àà (nhds) q :=\n    by\n    intro q hq\n    apply (hs.prod isOpen_univ).mem_nhds\n    simpa only [mem_prod, mem_univ, and_true_iff] using hq\n  -- The derivative of `g` vanishes away from `k`.\n  have g'_zero : ‚àÄ p x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g' (p, x) = 0 :=\n    by\n    intro p x hp hx\n    refine' (has_fderiv_at_zero_of_eventually_const 0 _).fderiv\n    have M2 : ¬´expr ·∂ú¬ª k ‚àà (nhds) x := IsOpen.mem_nhds hk.is_closed.is_open_compl hx\n    have M1 : s ‚àà (nhds) p := hs.mem_nhds hp\n    rw [nhds_prod_eq]\n    filter_upwards [prod_mem_prod M1 M2]\n    rintro ‚ü®p, y‚ü© ‚ü®hp, hy‚ü©\n    exact hgs p y hp hy\n  /- We find a small neighborhood of `{q‚ÇÄ.1} √ó k` on which the derivative is uniformly bounded. This\n    follows from the continuity at all points of the compact set `k`. -/\n  obtain ‚ü®Œµ, C, Œµpos, Cnonneg, h‚ÇÄŒµ, hŒµ‚ü© :\n    ‚àÉ Œµ C, 0 < Œµ ‚àß 0 ‚â§ C ‚àß ball q‚ÇÄ.1 Œµ ‚äÜ s ‚àß ‚àÄ p x, ¬´expr‚Äñ ‚Äñ¬ª (p - q‚ÇÄ.1) < Œµ ‚Üí ¬´expr‚Äñ ‚Äñ¬ª (g' (p, x)) ‚â§ C :=\n    by\n    have A : IsCompact (lower_set.prod {q‚ÇÄ.1} k) := is_compact_singleton.prod hk\n    obtain ‚ü®t, kt, t_open, ht‚ü© : ‚àÉ t, lower_set.prod {q‚ÇÄ.1} k ‚äÜ t ‚àß IsOpen t ‚àß bounded (¬´expr '' ¬ª g' t) :=\n      by\n      have B : ContinuousOn g' (lower_set.prod s univ) := hg.continuous_on_fderiv_of_open (hs.prod isOpen_univ) le_rfl\n      apply exists_is_open_bounded_image_of_is_compact_of_continuous_on A (hs.prod isOpen_univ) _ B\n      simp only [prod_subset_prod_iff, hq‚ÇÄ, singleton_subset_iff, subset_univ, and_self_iff, true_or_iff]\n    obtain ‚ü®Œµ, Œµpos, hŒµ, h'Œµ‚ü© : ‚àÉ Œµ : expr‚Ñù, 0 < Œµ ‚àß thickening Œµ (lower_set.prod {q‚ÇÄ.fst} k) ‚äÜ t ‚àß ball q‚ÇÄ.1 Œµ ‚äÜ s :=\n      by\n      obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ Œµ : expr‚Ñù, 0 < Œµ ‚àß thickening Œµ (lower_set.prod {q‚ÇÄ.fst} k) ‚äÜ t\n      exact A.exists_thickening_subset_open t_open kt\n      obtain ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü© : ‚àÉ (Œ¥ : expr‚Ñù)(H : 0 < Œ¥), ball q‚ÇÄ.1 Œ¥ ‚äÜ s\n      exact Metric.isOpen_iff.1 hs _ hq‚ÇÄ\n      refine' ‚ü®min Œµ Œ¥, lt_min Œµpos Œ¥pos, _, _‚ü©\n      ¬∑ exact subset.trans (thickening_mono (min_le_left _ _) _) hŒµ\n      ¬∑ exact subset.trans (ball_subset_ball (min_le_right _ _)) hŒ¥\n    obtain ‚ü®C, Cpos, hC‚ü© : ‚àÉ C, 0 < C ‚àß ¬´expr '' ¬ª g' t ‚äÜ closed_ball 0 C\n    exact ht.subset_ball_lt 0 0\n    refine' ‚ü®Œµ, C, Œµpos, Cpos.le, h'Œµ, fun p x hp => _‚ü©\n    have hps : p ‚àà s := h'Œµ (mem_ball_iff_norm.2 hp)\n    by_cases hx : x ‚àà k\n    ¬∑ have H : (p, x) ‚àà t := by\n        apply hŒµ\n        refine' mem_thickening_iff.2 ‚ü®(q‚ÇÄ.1, x), _, _‚ü©\n        ¬∑ simp only [hx, singleton_prod, mem_image, Prod.mk.inj_iff, eq_self_iff_true, true_and_iff, exists_eq_right]\n        ¬∑ rw [‚Üê dist_eq_norm] at hp\n          simpa only [Prod.dist_eq, Œµpos, dist_self, max_lt_iff, and_true_iff] using hp\n      have : g' (p, x) ‚àà closed_ball (0 : ¬´expr ‚ÜíL[ ] ¬ª (P √ó G) ùïú E') C := hC (mem_image_of_mem _ H)\n      rwa [mem_closedBall_zero_iff] at this\n    ¬∑ have : g' (p, x) = 0 := g'_zero _ _ hps hx\n      rw [this]\n      simpa only [norm_zero] using Cpos.le\n  /- Now, we wish to apply a theorem on differentiation of integrals. For this, we need to check\n    trivial measurability or integrability assumptions (in `I1`, `I2`, `I3`), as well as a uniform\n    integrability assumption over the derivative (in `I4` and `I5`) and pointwise differentiability\n    in `I6`. -/\n  have I1 :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" ((nhds) q‚ÇÄ)\n      (ae_strongly_measurable (fun a : G => L (f a) (g x.1 (x.2 - a))) Œº) :=\n    by\n    filter_upwards [A' q‚ÇÄ hq‚ÇÄ]\n    rintro ‚ü®p, x‚ü© ‚ü®hp, hx‚ü©\n    refine' (has_compact_support.convolution_exists_right L _ hf (A _ hp) _).1\n    apply isCompact_of_isClosed_subset hk (isClosed_tsupport _)\n    exact closure_minimal (support_subset_iff'.2 fun z hz => hgs _ _ hp hz) hk.is_closed\n  have I2 : integrable (fun a : G => L (f a) (g q‚ÇÄ.1 (q‚ÇÄ.2 - a))) Œº :=\n    by\n    have M : HasCompactSupport (g q‚ÇÄ.1) := HasCompactSupport.intro hk fun x hx => hgs q‚ÇÄ.1 x hq‚ÇÄ hx\n    apply M.convolution_exists_right L hf (A q‚ÇÄ.1 hq‚ÇÄ) q‚ÇÄ.2\n  have I3 : ae_strongly_measurable (fun a : G => (L (f a)).comp (g' (q‚ÇÄ.fst, q‚ÇÄ.snd - a))) Œº :=\n    by\n    have T : HasCompactSupport fun y => g' (q‚ÇÄ.1, y) := HasCompactSupport.intro hk fun x hx => g'_zero q‚ÇÄ.1 x hq‚ÇÄ hx\n    apply (has_compact_support.convolution_exists_right (L.precompR (P √ó G) : _) T hf _ q‚ÇÄ.2).1\n    have : ContinuousOn g' (lower_set.prod s univ) := hg.continuous_on_fderiv_of_open (hs.prod isOpen_univ) le_rfl\n    apply this.comp_continuous (continuous_const.prod_mk continuous_id')\n    intro x\n    simpa only [prod_mk_mem_set_prod_eq, mem_univ, and_true_iff] using hq‚ÇÄ\n  set K' := -k + {q‚ÇÄ.2} with K'_def\n  have hK' : IsCompact K' := hk.neg.add isCompact_singleton\n  obtain ‚ü®U, U_open, K'U, hU‚ü© : ‚àÉ U, IsOpen U ‚àß K' ‚äÜ U ‚àß integrable_on f U Œº\n  exact hf.integrable_on_nhds_is_compact hK'\n  obtain ‚ü®Œ¥, Œ¥pos, Œ¥Œµ, hŒ¥‚ü© : ‚àÉ Œ¥, (0 : expr‚Ñù) < Œ¥ ‚àß Œ¥ ‚â§ Œµ ‚àß K' + ball 0 Œ¥ ‚äÜ U :=\n    by\n    obtain ‚ü®V, V_mem, hV‚ü© : ‚àÉ (V : Set G)(V_mem : V ‚àà (nhds) (0 : G)), K' + V ‚äÜ U\n    exact compact_open_separated_add_right hK' U_open K'U\n    rcases Metric.mem_nhds_iff.1 V_mem with ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü©\n    refine' ‚ü®min Œ¥ Œµ, lt_min Œ¥pos Œµpos, min_le_right _ _, _‚ü©\n    exact (add_subset_add_left ((ball_subset_ball (min_le_left _ _)).trans hŒ¥)).trans hV\n  let bound : G ‚Üí expr‚Ñù := indicator U fun a => ¬´expr‚Äñ ‚Äñ¬ª (L.precompR (P √ó G)) * ¬´expr‚Äñ ‚Äñ¬ª (f a) * C\n  have I4 :\n    ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n      (‚àÄ x : P √ó G, dist x q‚ÇÄ < Œ¥ ‚Üí ¬´expr‚Äñ ‚Äñ¬ª (L.precompR (P √ó G) (f a) (g' (x.fst, x.snd - a))) ‚â§ bound a) :=\n    by\n    apply eventually_of_forall\n    intro a x hx\n    rw [Prod.dist_eq, dist_eq_norm, dist_eq_norm] at hx\n    have : (-tsupport fun a => g' (x.1, a)) + ball q‚ÇÄ.2 Œ¥ ‚äÜ U :=\n      by\n      apply subset.trans _ hŒ¥\n      rw [K'_def, add_assoc]\n      apply add_subset_add\n      ¬∑ rw [neg_subset_neg]\n        apply closure_minimal (support_subset_iff'.2 fun z hz => _) hk.is_closed\n        apply g'_zero x.1 z (h‚ÇÄŒµ _) hz\n        rw [mem_ball_iff_norm]\n        exact ((le_max_left _ _).trans_lt hx).trans_le Œ¥Œµ\n      ¬∑ simp only [add_ball, thickening_singleton, zero_vadd]\n    apply convolution_integrand_bound_right_of_le_of_subset _ _ _ this\n    ¬∑ intro y\n      exact hŒµ _ _ (((le_max_left _ _).trans_lt hx).trans_le Œ¥Œµ)\n    ¬∑ rw [mem_ball_iff_norm]\n      exact (le_max_right _ _).trans_lt hx\n  have I5 : integrable bound Œº := by\n    rw [integrable_indicator_iff U_open.measurable_set]\n    exact (hU.norm.const_mul _).mul_const _\n  have I6 :\n    ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n      (‚àÄ x : P √ó G,\n        dist x q‚ÇÄ < Œ¥ ‚Üí\n          has_fderiv_at (fun x : P √ó G => L (f a) (g x.1 (x.2 - a))) ((L (f a)).comp (g' (x.fst, x.snd - a))) x) :=\n    by\n    apply eventually_of_forall\n    intro a x hx\n    apply (L _).has_fderiv_at.comp x\n    have N : lower_set.prod s univ ‚àà (nhds) (x.1, x.2 - a) :=\n      by\n      apply A'\n      apply h‚ÇÄŒµ\n      rw [Prod.dist_eq] at hx\n      exact lt_of_lt_of_le (lt_of_le_of_lt (le_max_left _ _) hx) Œ¥Œµ\n    have Z := ((hg.differentiable_on le_rfl).differentiable_at N).has_fderiv_at\n    have Z' : has_fderiv_at (fun x : P √ó G => (x.1, x.2 - a)) (ContinuousLinearMap.id ùïú (P √ó G)) x :=\n      by\n      have : (fun x : P √ó G => (x.1, x.2 - a)) = id - fun x => (0, a) := by\n        ext x <;> simp only [Pi.sub_apply, id.def, Prod.fst_sub, sub_zero, Prod.snd_sub]\n      simp_rw [this]\n      exact (has_fderiv_at_id x).sub_const (0, a)\n    exact Z.comp x Z'\n  exact has_fderiv_at_integral_of_dominated_of_fderiv_le Œ¥pos I1 I2 I3 I4 I5 I6\n#align has_fderiv_at_convolution_right_with_param has_fderiv_at_convolution_right_with_param\n\n",
 "has_fderiv_at_convolution_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- Compute the total derivative of `f ‚ãÜ g` if `g` is `C^1` with compact support and `f` is locally\nintegrable. To write down the total derivative as a convolution, we use\n`continuous_linear_map.precompR`. -/\ntheorem has_compact_support.has_fderiv_at_convolution_right (hcg : HasCompactSupport g) (hf : locally_integrable f Œº)\n    (hg : cont_diff ùïú 1 g) (x‚ÇÄ : G) :\n    has_fderiv_at (convolution f L Œº g) ((convolution f (L.precompR G) Œº (fderiv ùïú g)) x‚ÇÄ) x‚ÇÄ :=\n  by\n  rcases hcg.eq_zero_or_finite_dimensional ùïú hg.continuous with (rfl | fin_dim)\n  ¬∑ have : fderiv ùïú (0 : G ‚Üí E') = 0 := fderiv_const (0 : E')\n    simp only [this, convolution_zero, Pi.zero_apply]\n    exact has_fderiv_at_const (0 : F) x‚ÇÄ\n  skip\n  have : ProperSpace G := finite_dimensional.proper_is_R_or_C ùïú G\n  set L' := L.precompR G\n  have h1 :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" ((nhds) x‚ÇÄ)\n      (ae_strongly_measurable (fun t => L (f t) (g (x - t))) Œº) :=\n    eventually_of_forall (hf.ae_strongly_measurable.convolution_integrand_snd L hg.continuous.ae_strongly_measurable)\n  have h2 : ‚àÄ x, ae_strongly_measurable (fun t => L' (f t) (fderiv ùïú g (x - t))) Œº :=\n    hf.ae_strongly_measurable.convolution_integrand_snd L' (hg.continuous_fderiv le_rfl).ae_strongly_measurable\n  have h3 : ‚àÄ x t, has_fderiv_at (fun x => g (x - t)) (fderiv ùïú g (x - t)) x :=\n    by\n    intro x t\n    simpa using\n      (hg.differentiable le_rfl).differentiable_at.has_fderiv_at.comp x\n        ((has_fderiv_at_id x).sub (has_fderiv_at_const t x))\n  let K' := -tsupport (fderiv ùïú g) + closed_ball x‚ÇÄ 1\n  have hK' : IsCompact K' := (hcg.fderiv ùïú).neg.add (is_compact_closed_ball x‚ÇÄ 1)\n  refine' has_fderiv_at_integral_of_dominated_of_fderiv_le zero_lt_one h1 _ (h2 x‚ÇÄ) _ _ _\n  ¬∑\n    exact\n      K'.indicator fun t =>\n        ¬´expr‚Äñ ‚Äñ¬ª L' * ¬´expr‚Äñ ‚Äñ¬ª (f t) *\n          ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n            (¬´expr‚Äñ ‚Äñ¬ª (fderiv ùïú g x))\n  ¬∑ exact hcg.convolution_exists_right L hf hg.continuous x‚ÇÄ\n  ¬∑ refine' eventually_of_forall fun t x hx => _\n    exact (hcg.fderiv ùïú).convolution_integrand_bound_right L' (hg.continuous_fderiv le_rfl) (ball_subset_closed_ball hx)\n  ¬∑ rw [integrable_indicator_iff hK'.measurable_set]\n    exact ((hf.integrable_on_is_compact hK').norm.const_mul _).mul_const _\n  ¬∑ exact eventually_of_forall fun t x hx => (L _).has_fderiv_at.comp x (h3 x t)\n#align has_compact_support.has_fderiv_at_convolution_right has_compact_support.has_fderiv_at_convolution_right\n\n",
 "has_fderiv_at_convolution_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.has_fderiv_at_convolution_left [is_neg_invariant Œº] (hcf : HasCompactSupport f)\n    (hf : cont_diff ùïú 1 f) (hg : locally_integrable g Œº) (x‚ÇÄ : G) :\n    has_fderiv_at (convolution f L Œº g) ((convolution (fderiv ùïú f) (L.precompL G) Œº g) x‚ÇÄ) x‚ÇÄ :=\n  by\n  simp (config := { singlePass := true }) only [‚Üê convolution_flip]\n  exact hcf.has_fderiv_at_convolution_right L.flip hg hf x‚ÇÄ\n#align has_compact_support.has_fderiv_at_convolution_left has_compact_support.has_fderiv_at_convolution_left\n\n",
 "has_deriv_at_convolution_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.has_deriv_at_convolution_right (hf : locally_integrable f‚ÇÄ Œº) (hcg : HasCompactSupport g‚ÇÄ)\n    (hg : cont_diff ùïú 1 g‚ÇÄ) (x‚ÇÄ : ùïú) : has_deriv_at (convolution f‚ÇÄ L Œº g‚ÇÄ) ((convolution f‚ÇÄ L Œº (deriv g‚ÇÄ)) x‚ÇÄ) x‚ÇÄ :=\n  by\n  convert(hcg.has_fderiv_at_convolution_right L hf hg x‚ÇÄ).has_deriv_at\n  rw [convolution_precompR_apply L hf (hcg.fderiv ùïú) (hg.continuous_fderiv le_rfl)]\n  rfl\n#align has_compact_support.has_deriv_at_convolution_right has_compact_support.has_deriv_at_convolution_right\n\n",
 "has_deriv_at_convolution_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.has_deriv_at_convolution_left [is_neg_invariant Œº] (hcf : HasCompactSupport f‚ÇÄ)\n    (hf : cont_diff ùïú 1 f‚ÇÄ) (hg : locally_integrable g‚ÇÄ Œº) (x‚ÇÄ : ùïú) :\n    has_deriv_at (convolution f‚ÇÄ L Œº g‚ÇÄ) ((convolution (deriv f‚ÇÄ) L Œº g‚ÇÄ) x‚ÇÄ) x‚ÇÄ :=\n  by\n  simp (config := { singlePass := true }) only [‚Üê convolution_flip]\n  exact hcf.has_deriv_at_convolution_right L.flip hg hf x‚ÇÄ\n#align has_compact_support.has_deriv_at_convolution_left has_compact_support.has_deriv_at_convolution_left\n\n",
 "distrib_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem convolution_exists.distrib_add (hfg : convolution_exists f g L Œº) (hfg' : convolution_exists f g' L Œº) :\n    convolution f L Œº (g + g') = convolution f L Œº g + convolution f L Œº g' :=\n  by\n  ext\n  exact (hfg x).distrib_add (hfg' x)\n#align convolution_exists.distrib_add convolution_exists.distrib_add\n\n",
 "dist_normed_convolution_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- If `œÜ` is a normed bump function, approximate `(œÜ ‚ãÜ g) x‚ÇÄ` if `g` is near `g x‚ÇÄ` on a ball with\nradius `œÜ.R` around `x‚ÇÄ`. -/\ntheorem dist_normed_convolution_le {x‚ÇÄ : G} {Œµ : expr‚Ñù} (hmg : ae_strongly_measurable g Œº)\n    (hg : ‚àÄ x ‚àà ball x‚ÇÄ œÜ.R, dist (g x) (g x‚ÇÄ) ‚â§ Œµ) :\n    dist ((convolution (œÜ.normed Œº) (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g : G ‚Üí E') x‚ÇÄ) (g x‚ÇÄ) ‚â§ Œµ :=\n  dist_convolution_le (by simp_rw [‚Üê dist_self (g x‚ÇÄ), hg x‚ÇÄ (mem_ball_self œÜ.R_pos)]) œÜ.support_normed_eq.subset\n    œÜ.nonneg_normed œÜ.integral_normed hmg hg\n#align dist_normed_convolution_le dist_normed_convolution_le\n\n",
 "dist_convolution_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/-- Approximate `(f ‚ãÜ g) x‚ÇÄ` if the support of the `f` is bounded within a ball, and `g` is near\n`g x‚ÇÄ` on a ball with the same radius around `x‚ÇÄ`. See `dist_convolution_le` for a special case.\n\nWe can simplify the second argument of `dist` further if we add some extra type-classes on `E`\nand `ùïú` or if `L` is scalar multiplication. -/\ntheorem dist_convolution_le' {x‚ÇÄ : G} {R Œµ : expr‚Ñù} {z‚ÇÄ : E'} (hŒµ : 0 ‚â§ Œµ) (hif : integrable f Œº)\n    (hf : support f ‚äÜ ball (0 : G) R) (hmg : ae_strongly_measurable g Œº) (hg : ‚àÄ x ‚àà ball x‚ÇÄ R, dist (g x) z‚ÇÄ ‚â§ Œµ) :\n    dist ((convolution f L Œº g : G ‚Üí F) x‚ÇÄ)\n        (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (L (f t) z‚ÇÄ) Œº) ‚â§\n      ¬´expr‚Äñ ‚Äñ¬ª L *\n          ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n            (¬´expr‚Äñ ‚Äñ¬ª (f x)) Œº *\n        Œµ :=\n  by\n  have hfg : convolution_exists_at f g x‚ÇÄ L Œº :=\n    by\n    refine'\n      bdd_above.convolution_exists_at L _ metric.is_open_ball.measurable_set (subset_trans _ hf) hif.integrable_on hmg\n    swap\n    ¬∑ refine' fun t => mt fun ht : f t = 0 => _\n      simp_rw [ht, L.map_zero‚ÇÇ]\n    rw [bddAbove_def]\n    refine' ‚ü®¬´expr‚Äñ ‚Äñ¬ª z‚ÇÄ + Œµ, _‚ü©\n    rintro _ ‚ü®x, hx, rfl‚ü©\n    refine' norm_le_norm_add_const_of_dist_le (hg x _)\n    rwa [mem_ball_iff_norm, norm_sub_rev, ‚Üê mem_ball_zero_iff]\n  have h2 : ‚àÄ t, dist (L (f t) (g (x‚ÇÄ - t))) (L (f t) z‚ÇÄ) ‚â§ ¬´expr‚Äñ ‚Äñ¬ª (L (f t)) * Œµ :=\n    by\n    intro t\n    by_cases ht : t ‚àà support f\n    ¬∑ have h2t := hf ht\n      rw [mem_ball_zero_iff] at h2t\n      specialize hg (x‚ÇÄ - t)\n      rw [sub_eq_add_neg, add_mem_ball_iff_norm, norm_neg, ‚Üê sub_eq_add_neg] at hg\n      refine' ((L (f t)).dist_le_op_norm _ _).trans _\n      exact mul_le_mul_of_nonneg_left (hg h2t) (norm_nonneg _)\n    ¬∑ rw [nmem_support] at ht\n      simp_rw [ht, L.map_zero‚ÇÇ, L.map_zero, norm_zero, MulZeroClass.zero_mul, dist_self]\n  simp_rw [convolution_def]\n  simp_rw [dist_eq_norm] at h2‚ä¢\n  rw [‚Üê integral_sub hfg.integrable]\n  swap\n  ¬∑ exact (L.flip z‚ÇÄ).integrable_comp hif\n  refine' (norm_integral_le_of_norm_le ((L.integrable_comp hif).norm.mul_const Œµ) (eventually_of_forall h2)).trans _\n  rw [integral_mul_right]\n  refine' mul_le_mul_of_nonneg_right _ hŒµ\n  have h3 : ‚àÄ t, ¬´expr‚Äñ ‚Äñ¬ª (L (f t)) ‚â§ ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) :=\n    by\n    intro t\n    exact L.le_op_norm (f t)\n  refine' (integral_mono (L.integrable_comp hif).norm (hif.norm.const_mul _) h3).trans_eq _\n  rw [integral_mul_left]\n#align dist_convolution_le' dist_convolution_le'\n\n",
 "dist_convolution_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- Approximate `f ‚ãÜ g` if the support of the `f` is bounded within a ball, and `g` is near `g x‚ÇÄ`\non a ball with the same radius around `x‚ÇÄ`.\n\nThis is a special case of `dist_convolution_le'` where `L` is `(‚Ä¢)`, `f` has integral 1 and `f` is\nnonnegative. -/\ntheorem dist_convolution_le {f : G ‚Üí expr‚Ñù} {x‚ÇÄ : G} {R Œµ : expr‚Ñù} {z‚ÇÄ : E'} (hŒµ : 0 ‚â§ Œµ)\n    (hf : support f ‚äÜ ball (0 : G) R) (hnf : ‚àÄ x, 0 ‚â§ f x)\n    (hintf :\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\" (f x) Œº = 1)\n    (hmg : ae_strongly_measurable g Œº) (hg : ‚àÄ x ‚àà ball x‚ÇÄ R, dist (g x) z‚ÇÄ ‚â§ Œµ) :\n    dist ((convolution f (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g : G ‚Üí E') x‚ÇÄ) z‚ÇÄ ‚â§ Œµ :=\n  by\n  have hif : integrable f Œº := by\n    by_contra hif\n    exact zero_ne_one ((integral_undef hif).symm.trans hintf)\n  convert(dist_convolution_le' _ hŒµ hif hf hmg hg).trans _\n  ¬∑ simp_rw [lsmul_apply, integral_smul_const, hintf, one_smul]\n  ¬∑ simp_rw [Real.norm_of_nonneg (hnf _), hintf, mul_one]\n    exact (mul_le_mul_of_nonneg_right op_norm_lsmul_le hŒµ).trans_eq (one_mul Œµ)\n#align dist_convolution_le dist_convolution_le\n\n",
 "convolution_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n@[simp]\ntheorem convolution_zero : convolution f L Œº 0 = 0 := by\n  ext\n  simp_rw [convolution_def, Pi.zero_apply, (L _).map_zero, integral_zero]\n#align convolution_zero convolution_zero\n\n",
 "convolution_tendsto_right_of_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Special case of `cont_diff_bump.convolution_tendsto_right` where `g` is continuous,\n  and the limit is taken only in the first function. -/\ntheorem convolution_tendsto_right_of_continuous {Œπ} {œÜ : Œπ ‚Üí cont_diff_bump (0 : G)} {l : Filter Œπ}\n    (hœÜ : Tendsto (fun i => (œÜ i).R) l ((nhds) 0)) (hg : Continuous g) (x‚ÇÄ : G) :\n    Tendsto (fun i => (convolution (fun x => (œÜ i).normed Œº x) (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g : G ‚Üí E') x‚ÇÄ) l\n      ((nhds) (g x‚ÇÄ)) :=\n  convolution_tendsto_right hœÜ (eventually_of_forall fun _ => hg.ae_strongly_measurable)\n    ((hg.tendsto x‚ÇÄ).comp tendsto_snd) tendsto_const_nhds\n#align convolution_tendsto_right_of_continuous convolution_tendsto_right_of_continuous\n\n",
 "convolution_tendsto_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- `(œÜ i ‚ãÜ g i) (k i)` tends to `z‚ÇÄ` as `i` tends to some filter `l` if\n* `œÜ` is a sequence of normed bump functions such that `(œÜ i).R` tends to `0` as `i` tends to `l`;\n* `g i` is `mu`-a.e. strongly measurable as `i` tends to `l`;\n* `g i x` tends to `z‚ÇÄ` as `(i, x)` tends to `l √ó·∂† ùìù x‚ÇÄ`;\n* `k i` tends to `x‚ÇÄ`. -/\ntheorem convolution_tendsto_right {Œπ} {œÜ : Œπ ‚Üí cont_diff_bump (0 : G)} {g : Œπ ‚Üí G ‚Üí E'} {k : Œπ ‚Üí G} {x‚ÇÄ : G} {z‚ÇÄ : E'}\n    {l : Filter Œπ} (hœÜ : Tendsto (fun i => (œÜ i).R) l ((nhds) 0))\n    (hig :\n      ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" l\n        (ae_strongly_measurable (g i) Œº))\n    (hcg : Tendsto (uncurry g) (filter.prod l ((nhds) x‚ÇÄ)) ((nhds) z‚ÇÄ)) (hk : Tendsto k l ((nhds) x‚ÇÄ)) :\n    Tendsto (fun i => (convolution (fun x => (œÜ i).normed Œº x) (lsmul (expr‚Ñù) (expr‚Ñù)) Œº (g i) : G ‚Üí E') (k i)) l\n      ((nhds) z‚ÇÄ) :=\n  convolution_tendsto_right (eventually_of_forall fun i => (œÜ i).nonneg_normed)\n    (eventually_of_forall fun i => (œÜ i).integral_normed) (tendsto_support_normed_small_sets hœÜ) hig hcg hk\n#align convolution_tendsto_right convolution_tendsto_right\n\n",
 "convolution_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem convolution_smul [SMulCommClass (expr‚Ñù) ùïú F] {y : ùïú} :\n    convolution f L Œº (¬´expr ‚Ä¢ ¬ª y g) = ¬´expr ‚Ä¢ ¬ª y (convolution f L Œº g) :=\n  by\n  ext\n  simp only [Pi.smul_apply, convolution_def, ‚Üê integral_smul, (L _).map_smul]\n#align convolution_smul convolution_smul\n\n",
 "convolution_precompR_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem convolution_precompR_apply {g : G ‚Üí ¬´expr ‚ÜíL[ ] ¬ª E'' ùïú E'} (hf : locally_integrable f Œº)\n    (hcg : HasCompactSupport g) (hg : Continuous g) (x‚ÇÄ : G) (x : E'') :\n    (convolution f (L.precompR E'') Œº g) x‚ÇÄ x = (convolution f L Œº fun a => g a x) x‚ÇÄ :=\n  by\n  have := hcg.convolution_exists_right (L.precompR E'' : _) hf hg x‚ÇÄ\n  simp_rw [convolution_def, continuous_linear_map.integral_apply this]\n  rfl\n#align convolution_precompR_apply convolution_precompR_apply\n\n",
 "convolution_neg_of_neg_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution of two even functions is also even. -/\ntheorem convolution_neg_of_neg_eq\n    (h1 :\n      ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n        (f (-x) = f x))\n    (h2 :\n      ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n        (g (-x) = g x)) :\n    (convolution f L Œº g) (-x) = (convolution f L Œº g) x :=\n  calc\n    ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          ((L (f t)) (g (-x - t))) Œº =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          ((L (f (-t))) (g (x + t))) Œº :=\n      by\n      apply integral_congr_ae\n      filter_upwards [h1, (eventually_add_left_iff Œº x).2 h2]with t ht h't\n      simp_rw [ht, ‚Üê h't, neg_add']\n    _ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          ((L (f t)) (g (x - t))) Œº :=\n      by\n      rw [‚Üê integral_neg_eq_self]\n      simp only [neg_neg, ‚Üê sub_eq_add_neg]\n    \n#align convolution_neg_of_neg_eq convolution_neg_of_neg_eq\n\n",
 "convolution_mul_swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/-- The symmetric definition of convolution where the bilinear operator is multiplication. -/\ntheorem convolution_mul_swap [NormedSpace (expr‚Ñù) ùïú] [CompleteSpace ùïú] {f : G ‚Üí ùïú} {g : G ‚Üí ùïú} :\n    (convolution f (mul ùïú ùïú) Œº g) x =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (f (x - t) * g t) Œº :=\n  convolution_eq_swap _\n#align convolution_mul_swap convolution_mul_swap\n\n",
 "convolution_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/-- The definition of convolution where the bilinear operator is multiplication. -/\ntheorem convolution_mul [Sub G] [NormedSpace (expr‚Ñù) ùïú] [CompleteSpace ùïú] {f : G ‚Üí ùïú} {g : G ‚Üí ùïú} :\n    (convolution f (mul ùïú ùïú) Œº g) x =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (f t * g (x - t)) Œº :=\n  rfl\n#align convolution_mul convolution_mul\n\n",
 "convolution_mono_right_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem convolution_mono_right_of_nonneg {f g g' : G ‚Üí expr‚Ñù}\n    (hfg' : convolution_exists_at f g' x (lsmul (expr‚Ñù) (expr‚Ñù)) Œº) (hf : ‚àÄ x, 0 ‚â§ f x) (hg : ‚àÄ x, g x ‚â§ g' x)\n    (hg' : ‚àÄ x, 0 ‚â§ g' x) :\n    (convolution f (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g) x ‚â§ (convolution f (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g') x :=\n  by\n  by_cases H : convolution_exists_at f g x (lsmul (expr‚Ñù) (expr‚Ñù)) Œº\n  ¬∑ exact convolution_mono_right H hfg' hf hg\n  have : (convolution f (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g) x = 0 := integral_undef H\n  rw [this]\n  exact integral_nonneg fun y => mul_nonneg (hf y) (hg' (x - y))\n#align convolution_mono_right_of_nonneg convolution_mono_right_of_nonneg\n\n",
 "convolution_mono_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem convolution_mono_right {f g g' : G ‚Üí expr‚Ñù} (hfg : convolution_exists_at f g x (lsmul (expr‚Ñù) (expr‚Ñù)) Œº)\n    (hfg' : convolution_exists_at f g' x (lsmul (expr‚Ñù) (expr‚Ñù)) Œº) (hf : ‚àÄ x, 0 ‚â§ f x) (hg : ‚àÄ x, g x ‚â§ g' x) :\n    (convolution f (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g) x ‚â§ (convolution f (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g') x :=\n  by\n  apply integral_mono hfg hfg'\n  simp only [lsmul_apply, Algebra.id.smul_eq_mul]\n  intro t\n  apply mul_le_mul_of_nonneg_left (hg _) (hf _)\n#align convolution_mono_right convolution_mono_right\n\n",
 "convolution_lsmul_swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/-- The symmetric definition of convolution where the bilinear operator is scalar multiplication. -/\ntheorem convolution_lsmul_swap {f : G ‚Üí ùïú} {g : G ‚Üí F} :\n    (convolution f (lsmul ùïú ùïú) Œº g : G ‚Üí F) x =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (¬´expr ‚Ä¢ ¬ª (f (x - t)) (g t)) Œº :=\n  convolution_eq_swap _\n#align convolution_lsmul_swap convolution_lsmul_swap\n\n",
 "convolution_lsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/-- The definition of convolution where the bilinear operator is scalar multiplication.\nNote: it often helps the elaborator to give the type of the convolution explicitly. -/\ntheorem convolution_lsmul [Sub G] {f : G ‚Üí ùïú} {g : G ‚Üí F} :\n    (convolution f (lsmul ùïú ùïú) Œº g : G ‚Üí F) x =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (¬´expr ‚Ä¢ ¬ª (f t) (g (x - t))) Œº :=\n  rfl\n#align convolution_lsmul convolution_lsmul\n\n",
 "convolution_integrand_swap_snd'":
 "theorem measure_theory.ae_strongly_measurable.convolution_integrand_swap_snd' {x : G}\n    (hf : ae_strongly_measurable f <| map (fun t => x - t) Œº) (hg : ae_strongly_measurable g Œº) :\n    ae_strongly_measurable (fun t => L (f (x - t)) (g t)) Œº :=\n  L.ae_strongly_measurable_comp‚ÇÇ (hf.comp_measurable <| measurable_id.const_sub x) hg\n#align measure_theory.ae_strongly_measurable.convolution_integrand_swap_snd' measure_theory.ae_strongly_measurable.convolution_integrand_swap_snd'\n\n",
 "convolution_integrand_swap_snd":
 "theorem measure_theory.ae_strongly_measurable.convolution_integrand_swap_snd (hf : ae_strongly_measurable f Œº)\n    (hg : ae_strongly_measurable g Œº) (x : G) : ae_strongly_measurable (fun t => L (f (x - t)) (g t)) Œº :=\n  (hf.mono'\n        (quasi_measure_preserving_sub_left_of_right_invariant Œº\n            x).absolutely_continuous).convolution_integrand_swap_snd'\n    L hg\n#align measure_theory.ae_strongly_measurable.convolution_integrand_swap_snd measure_theory.ae_strongly_measurable.convolution_integrand_swap_snd\n\n",
 "convolution_integrand_snd'":
 "theorem measure_theory.ae_strongly_measurable.convolution_integrand_snd' (hf : ae_strongly_measurable f Œº) {x : G}\n    (hg : ae_strongly_measurable g <| map (fun t => x - t) Œº) :\n    ae_strongly_measurable (fun t => L (f t) (g (x - t))) Œº :=\n  L.ae_strongly_measurable_comp‚ÇÇ hf <| hg.comp_measurable <| measurable_id.const_sub x\n#align measure_theory.ae_strongly_measurable.convolution_integrand_snd' measure_theory.ae_strongly_measurable.convolution_integrand_snd'\n\n",
 "convolution_integrand_snd":
 "theorem measure_theory.ae_strongly_measurable.convolution_integrand_snd (hf : ae_strongly_measurable f Œº)\n    (hg : ae_strongly_measurable g Œº) (x : G) : ae_strongly_measurable (fun t => L (f t) (g (x - t))) Œº :=\n  hf.convolution_integrand_snd' L <|\n    hg.mono' <| (quasi_measure_preserving_sub_left_of_right_invariant Œº x).absolutely_continuous\n#align measure_theory.ae_strongly_measurable.convolution_integrand_snd measure_theory.ae_strongly_measurable.convolution_integrand_snd\n\n",
 "convolution_integrand_fst":
 "theorem continuous.convolution_integrand_fst [ContinuousSub G] (hg : Continuous g) (t : G) :\n    Continuous fun x => L (f t) (g (x - t)) :=\n  L.continuous‚ÇÇ.comp‚ÇÇ continuous_const <| hg.comp <| continuous_id.sub continuous_const\n#align continuous.convolution_integrand_fst continuous.convolution_integrand_fst\n\n",
 "convolution_integrand_bound_right_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\ntheorem has_compact_support.convolution_integrand_bound_right_of_subset (hcg : HasCompactSupport g) (hg : Continuous g)\n    {x t : G} {s u : Set G} (hx : x ‚àà s) (hu : -tsupport g + s ‚äÜ u) :\n    ¬´expr‚Äñ ‚Äñ¬ª (L (f t) (g (x - t))) ‚â§\n      u.indicator\n        (fun t =>\n          ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) *\n            ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n              (¬´expr‚Äñ ‚Äñ¬ª (g i)))\n        t :=\n  by\n  apply convolution_integrand_bound_right_of_le_of_subset _ (fun i => _) hx hu\n  exact le_csup·µ¢ (hg.norm.bdd_above_range_of_has_compact_support hcg.norm) _\n#align has_compact_support.convolution_integrand_bound_right_of_subset has_compact_support.convolution_integrand_bound_right_of_subset\n\n",
 "convolution_integrand_bound_right_of_le_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/-\nCopyright (c) 2022 Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn\n-/\ntheorem convolution_integrand_bound_right_of_le_of_subset {C : expr‚Ñù} (hC : ‚àÄ i, ¬´expr‚Äñ ‚Äñ¬ª (g i) ‚â§ C) {x t : G}\n    {s u : Set G} (hx : x ‚àà s) (hu : -tsupport g + s ‚äÜ u) :\n    ¬´expr‚Äñ ‚Äñ¬ª (L (f t) (g (x - t))) ‚â§ u.indicator (fun t => ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) * C) t :=\n  by\n  refine' le_indicator (fun t ht => _) (fun t ht => _) t\n  ¬∑ refine' (L.le_op_norm‚ÇÇ _ _).trans _\n    apply mul_le_mul_of_nonneg_left (hC _) (mul_nonneg (norm_nonneg _) (norm_nonneg _))\n  ¬∑ have : x - t ‚àâ support g := by\n      refine' mt (fun hxt => _) ht\n      apply hu\n      refine' ‚ü®_, _, set.neg_mem_neg.mpr (subset_closure hxt), hx, _‚ü©\n      rw [neg_sub, sub_add_cancel]\n    rw [nmem_support.mp this, (L _).map_zero, norm_zero]\n#align convolution_integrand_bound_right_of_le_of_subset convolution_integrand_bound_right_of_le_of_subset\n\n",
 "convolution_integrand_bound_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\ntheorem has_compact_support.convolution_integrand_bound_right (hcg : HasCompactSupport g) (hg : Continuous g) {x t : G}\n    {s : Set G} (hx : x ‚àà s) :\n    ¬´expr‚Äñ ‚Äñ¬ª (L (f t) (g (x - t))) ‚â§\n      (-tsupport g + s).indicator\n        (fun t =>\n          ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) *\n            ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n              (¬´expr‚Äñ ‚Äñ¬ª (g i)))\n        t :=\n  hcg.convolution_integrand_bound_right_of_subset L hg hx Subset.rfl\n#align has_compact_support.convolution_integrand_bound_right has_compact_support.convolution_integrand_bound_right\n\n",
 "convolution_integrand_bound_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\ntheorem has_compact_support.convolution_integrand_bound_left (hcf : HasCompactSupport f) (hf : Continuous f) {x t : G}\n    {s : Set G} (hx : x ‚àà s) :\n    ¬´expr‚Äñ ‚Äñ¬ª (L (f (x - t)) (g t)) ‚â§\n      (-tsupport f + s).indicator\n        (fun t =>\n          ¬´expr‚Äñ ‚Äñ¬ª L *\n              ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n                (¬´expr‚Äñ ‚Äñ¬ª (f i)) *\n            ¬´expr‚Äñ ‚Äñ¬ª (g t))\n        t :=\n  by\n  convert hcf.convolution_integrand_bound_right L.flip hf hx\n  simp_rw [L.op_norm_flip, mul_right_comm]\n#align has_compact_support.convolution_integrand_bound_left has_compact_support.convolution_integrand_bound_left\n\n",
 "convolution_integrand'":
 "theorem measure_theory.ae_strongly_measurable.convolution_integrand' [MeasurableAdd‚ÇÇ G] [MeasurableNeg G]\n    [SigmaFinite ŒΩ] (hf : ae_strongly_measurable f ŒΩ)\n    (hg : ae_strongly_measurable g <| map (fun p : G √ó G => p.1 - p.2) (Œº.prod ŒΩ)) :\n    ae_strongly_measurable (fun p : G √ó G => L (f p.2) (g (p.1 - p.2))) (Œº.prod ŒΩ) :=\n  L.ae_strongly_measurable_comp‚ÇÇ hf.snd <| hg.comp_measurable measurable_sub\n#align measure_theory.ae_strongly_measurable.convolution_integrand' measure_theory.ae_strongly_measurable.convolution_integrand'\n\n",
 "convolution_integrand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\ntheorem measure_theory.integrable.convolution_integrand (hf : integrable f ŒΩ) (hg : integrable g Œº) :\n    integrable (fun p : G √ó G => L (f p.2) (g (p.1 - p.2))) (Œº.prod ŒΩ) :=\n  by\n  have h_meas : ae_strongly_measurable (fun p : G √ó G => L (f p.2) (g (p.1 - p.2))) (Œº.prod ŒΩ) :=\n    hf.ae_strongly_measurable.convolution_integrand L hg.ae_strongly_measurable\n  have h2_meas :\n    ae_strongly_measurable\n      (fun y : G =>\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (¬´expr‚Äñ ‚Äñ¬ª (L (f y) (g (x - y)))) Œº)\n      ŒΩ :=\n    h_meas.prod_swap.norm.integral_prod_right'\n  simp_rw [integrable_prod_iff' h_meas]\n  refine' ‚ü®eventually_of_forall fun t => (L (f t)).integrable_comp (hg.comp_sub_right t), _‚ü©\n  refine'\n    integrable.mono' _ h2_meas\n      (eventually_of_forall fun t =>\n        (_ :\n          _ ‚â§\n            ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) *\n              ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n                (¬´expr‚Äñ ‚Äñ¬ª (g (x - t))) Œº))\n  ¬∑ simp_rw [integral_sub_right_eq_self fun t => ¬´expr‚Äñ ‚Äñ¬ª (g t)]\n    exact (hf.norm.const_mul _).mul_const _\n  ¬∑ simp_rw [‚Üê integral_mul_left]\n    rw [Real.norm_of_nonneg]\n    ¬∑\n      exact\n        integral_mono_of_nonneg (eventually_of_forall fun t => norm_nonneg _) ((hg.comp_sub_right t).norm.const_mul _)\n          (eventually_of_forall fun t => L.le_op_norm‚ÇÇ _ _)\n    exact integral_nonneg fun x => norm_nonneg _\n#align measure_theory.integrable.convolution_integrand measure_theory.integrable.convolution_integrand\n\n",
 "convolution_flip":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- Commutativity of convolution -/\ntheorem convolution_flip : convolution g L.flip Œº f = convolution f L Œº g :=\n  by\n  ext1 x\n  simp_rw [convolution_def]\n  rw [‚Üê integral_sub_left_eq_self _ Œº x]\n  simp_rw [sub_sub_self, flip_apply]\n#align convolution_flip convolution_flip\n\n",
 "convolution_exists_right_of_continuous_left":
 "theorem has_compact_support.convolution_exists_right_of_continuous_left (hcg : HasCompactSupport g) (hf : Continuous f)\n    (hg : locally_integrable g Œº) : convolution_exists f g L Œº := fun x‚ÇÄ =>\n  convolution_exists_at_flip.mp <| hcg.convolution_exists_left_of_continuous_right L.flip hg hf x‚ÇÄ\n#align has_compact_support.convolution_exists_right_of_continuous_left has_compact_support.convolution_exists_right_of_continuous_left\n\n",
 "convolution_exists_right":
 "theorem has_compact_support.convolution_exists_right (hcg : HasCompactSupport g) (hf : locally_integrable f Œº)\n    (hg : Continuous g) : convolution_exists f g L Œº :=\n  by\n  intro x‚ÇÄ\n  refine' has_compact_support.convolution_exists_at L _ hf hg\n  refine' (hcg.comp_homeomorph (Homeomorph.subLeft x‚ÇÄ)).mono _\n  refine' fun t => mt fun ht : g (x‚ÇÄ - t) = 0 => _\n  simp_rw [ht, (L _).map_zero]\n#align has_compact_support.convolution_exists_right has_compact_support.convolution_exists_right\n\n",
 "convolution_exists_left_of_continuous_right":
 "theorem has_compact_support.convolution_exists_left_of_continuous_right (hcf : HasCompactSupport f)\n    (hf : locally_integrable f Œº) (hg : Continuous g) : convolution_exists f g L Œº :=\n  by\n  intro x‚ÇÄ\n  refine' has_compact_support.convolution_exists_at L _ hf hg\n  refine' hcf.mono _\n  refine' fun t => mt fun ht : f t = 0 => _\n  simp_rw [ht, L.map_zero‚ÇÇ]\n#align has_compact_support.convolution_exists_left_of_continuous_right has_compact_support.convolution_exists_left_of_continuous_right\n\n",
 "convolution_exists_left":
 "theorem has_compact_support.convolution_exists_left (hcf : HasCompactSupport f) (hf : Continuous f)\n    (hg : locally_integrable g Œº) : convolution_exists f g L Œº := fun x‚ÇÄ =>\n  convolution_exists_at_flip.mp <| hcf.convolution_exists_right L.flip hg hf x‚ÇÄ\n#align has_compact_support.convolution_exists_left has_compact_support.convolution_exists_left\n\n",
 "convolution_exists_at_iff_integrable_swap":
 "theorem convolution_exists_at_iff_integrable_swap :\n    convolution_exists_at f g x L Œº ‚Üî integrable (fun t => L (f (x - t)) (g t)) Œº :=\n  convolution_exists_at_flip.symm\n#align convolution_exists_at_iff_integrable_swap convolution_exists_at_iff_integrable_swap\n\n",
 "convolution_exists_at_flip":
 "theorem convolution_exists_at_flip : convolution_exists_at g f x L.flip Œº ‚Üî convolution_exists_at f g x L Œº := by\n  simp_rw [convolution_exists_at, ‚Üê integrable_comp_sub_left (fun t => L (f t) (g (x - t))) x, sub_sub_cancel,\n    flip_apply]\n#align convolution_exists_at_flip convolution_exists_at_flip\n\n",
 "convolution_exists_at'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/-- A sufficient condition to prove that `f ‚ãÜ[L, Œº] g` exists.\nWe assume that `f` is integrable on a set `s` and `g` is bounded and ae strongly measurable\non `x‚ÇÄ - s` (note that both properties hold if `g` is continuous with compact support). -/\ntheorem bdd_above.convolution_exists_at' {x‚ÇÄ : G} {s : Set G}\n    (hbg : BddAbove (¬´expr '' ¬ª (fun i => ¬´expr‚Äñ ‚Äñ¬ª (g i)) (¬´expr ‚Åª¬π' ¬ª (fun t => -t + x‚ÇÄ) s))) (hs : MeasurableSet s)\n    (h2s : (support fun t => L (f t) (g (x‚ÇÄ - t))) ‚äÜ s) (hf : integrable_on f s Œº)\n    (hmg : ae_strongly_measurable g <| map (fun t => x‚ÇÄ - t) (Œº.restrict s)) : convolution_exists_at f g x‚ÇÄ L Œº :=\n  by\n  rw [convolution_exists_at, ‚Üê integrable_on_iff_integrable_of_support_subset h2s]\n  set s' := ¬´expr ‚Åª¬π' ¬ª (fun t => -t + x‚ÇÄ) s\n  have :\n    ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" (Œº.restrict s)\n      (¬´expr‚Äñ ‚Äñ¬ª (L (f t) (g (x‚ÇÄ - t))) ‚â§\n        s.indicator\n          (fun t =>\n            ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) *\n              ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n                (¬´expr‚Äñ ‚Äñ¬ª (g i)))\n          t) :=\n    by\n    refine' eventually_of_forall _\n    refine' le_indicator (fun t ht => _) fun t ht => _\n    ¬∑ refine' (L.le_op_norm‚ÇÇ _ _).trans _\n      refine'\n        mul_le_mul_of_nonneg_left (le_csup·µ¢_set hbg <| mem_preimage.mpr _) (mul_nonneg (norm_nonneg _) (norm_nonneg _))\n      rwa [neg_sub, sub_add_cancel]\n    ¬∑ have : t ‚àâ support fun t => L (f t) (g (x‚ÇÄ - t)) := mt (fun h => h2s h) ht\n      rw [nmem_support.mp this, norm_zero]\n  refine' integrable.mono' _ _ this\n  ¬∑ rw [integrable_indicator_iff hs]\n    exact ((hf.norm.const_mul _).mul_const _).integrable_on\n  ¬∑ exact hf.ae_strongly_measurable.convolution_integrand_snd' L hmg\n#align bdd_above.convolution_exists_at' bdd_above.convolution_exists_at'\n\n",
 "convolution_exists_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/-- A sufficient condition to prove that `f ‚ãÜ[L, Œº] g` exists.\nWe assume that the integrand has compact support and `g` is bounded on this support (note that\nboth properties hold if `g` is continuous with compact support). We also require that `f` is\nintegrable on the support of the integrand, and that both functions are strongly measurable.\n\nThis is a variant of `bdd_above.convolution_exists_at'` in an abelian group with a left-invariant\nmeasure. This allows us to state the boundedness and measurability of `g` in a more natural way. -/\ntheorem bdd_above.convolution_exists_at [MeasurableAdd‚ÇÇ G] [SigmaFinite Œº] {x‚ÇÄ : G} {s : Set G}\n    (hbg : BddAbove (¬´expr '' ¬ª (fun i => ¬´expr‚Äñ ‚Äñ¬ª (g i)) (¬´expr ‚Åª¬π' ¬ª (fun t => x‚ÇÄ - t) s))) (hs : MeasurableSet s)\n    (h2s : (support fun t => L (f t) (g (x‚ÇÄ - t))) ‚äÜ s) (hf : integrable_on f s Œº) (hmg : ae_strongly_measurable g Œº) :\n    convolution_exists_at f g x‚ÇÄ L Œº :=\n  by\n  refine' bdd_above.convolution_exists_at' L _ hs h2s hf _\n  ¬∑ simp_rw [‚Üê sub_eq_neg_add, hbg]\n  ¬∑ have : ae_strongly_measurable g (map (fun t : G => x‚ÇÄ - t) Œº) :=\n      hmg.mono' (quasi_measure_preserving_sub_left_of_right_invariant Œº x‚ÇÄ).absolutely_continuous\n    apply this.mono_measure\n    exact map_mono_of_ae_measurable restrict_le_self (measurable_const.sub measurable_id').ae_measurable\n#align bdd_above.convolution_exists_at bdd_above.convolution_exists_at\n\n",
 "convolution_eq_swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/-- The symmetric definition of convolution. -/\ntheorem convolution_eq_swap :\n    (convolution f L Œº g) x =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (L (f (x - t)) (g t)) Œº :=\n  by\n  rw [‚Üê convolution_flip]\n  rfl\n#align convolution_eq_swap convolution_eq_swap\n\n",
 "convolution_eq_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/-- Compute `(f ‚ãÜ g) x‚ÇÄ` if the support of the `f` is within `metric.ball 0 R`, and `g` is constant\non `metric.ball x‚ÇÄ R`.\n\nWe can simplify the RHS further if we assume `f` is integrable, but also if `L = (‚Ä¢)` or more\ngenerally if `L` has a `antilipschitz_with`-condition. -/\ntheorem convolution_eq_right' {x‚ÇÄ : G} {R : expr‚Ñù} (hf : support f ‚äÜ ball (0 : G) R)\n    (hg : ‚àÄ x ‚àà ball x‚ÇÄ R, g x = g x‚ÇÄ) :\n    (convolution f L Œº g) x‚ÇÄ =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (L (f t) (g x‚ÇÄ)) Œº :=\n  by\n  have h2 : ‚àÄ t, L (f t) (g (x‚ÇÄ - t)) = L (f t) (g x‚ÇÄ) :=\n    by\n    intro t\n    by_cases ht : t ‚àà support f\n    ¬∑ have h2t := hf ht\n      rw [mem_ball_zero_iff] at h2t\n      specialize hg (x‚ÇÄ - t)\n      rw [sub_eq_add_neg, add_mem_ball_iff_norm, norm_neg, ‚Üê sub_eq_add_neg] at hg\n      rw [hg h2t]\n    ¬∑ rw [nmem_support] at ht\n      simp_rw [ht, L.map_zero‚ÇÇ]\n  simp_rw [convolution_def, h2]\n#align convolution_eq_right' convolution_eq_right'\n\n",
 "convolution_eq_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Ä¢ ¬ª -/\n/-- If `œÜ` is a bump function, compute `(œÜ ‚ãÜ g) x‚ÇÄ` if `g` is constant on `metric.ball x‚ÇÄ œÜ.R`. -/\ntheorem convolution_eq_right {x‚ÇÄ : G} (hg : ‚àÄ x ‚àà ball x‚ÇÄ œÜ.R, g x = g x‚ÇÄ) :\n    (convolution œÜ (lsmul (expr‚Ñù) (expr‚Ñù)) Œº g : G ‚Üí E') x‚ÇÄ = ¬´expr ‚Ä¢ ¬ª (integral Œº œÜ) (g x‚ÇÄ) := by\n  simp_rw [convolution_eq_right' _ œÜ.support_eq.subset hg, lsmul_apply, integral_smul_const]\n#align convolution_eq_right convolution_eq_right\n\n",
 "convolution_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\ntheorem convolution_def [Sub G] :\n    (convolution f L Œº g) x =\n      ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n        (L (f t) (g (x - t))) Œº :=\n  rfl\n#align convolution_def convolution_def\n\n",
 "convolution_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr =·µê[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr =·µê[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem convolution_congr [MeasurableAdd‚ÇÇ G] [MeasurableNeg G] [SigmaFinite Œº] [is_add_right_invariant Œº]\n    (h1 : ¬´expr =·µê[ ] ¬ª f Œº f') (h2 : ¬´expr =·µê[ ] ¬ª g Œº g') : convolution f L Œº g = convolution f' L Œº g' :=\n  by\n  ext x\n  apply integral_congr_ae\n  exact\n    (h1.prod_mk <| h2.comp_tendsto (quasi_measure_preserving_sub_left_of_right_invariant Œº x).tendsto_ae).fun_comp\n      (uncurry fun x y => L x y)\n#align convolution_congr convolution_congr\n\n",
 "convolution_assoc'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- Convolution is associative. This has a weak but inconvenient integrability condition.\nSee also `convolution_assoc`. -/\ntheorem convolution_assoc' (hL : ‚àÄ (x : E) (y : E') (z : E''), L‚ÇÇ (L x y) z = L‚ÇÉ x (L‚ÇÑ y z)) {x‚ÇÄ : G}\n    (hfg :\n      ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n        (convolution_exists_at f g y L ŒΩ))\n    (hgk :\n      ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" ŒΩ\n        (convolution_exists_at g k x L‚ÇÑ Œº))\n    (hi : integrable (uncurry fun x y => (L‚ÇÉ (f y)) ((L‚ÇÑ (g (x - y))) (k (x‚ÇÄ - x)))) (Œº.prod ŒΩ)) :\n    (convolution (convolution f L ŒΩ g) L‚ÇÇ Œº k) x‚ÇÄ = (convolution f L‚ÇÉ ŒΩ (convolution g L‚ÇÑ Œº k)) x‚ÇÄ :=\n  calc\n    (convolution (convolution f L ŒΩ g) L‚ÇÇ Œº k) x‚ÇÄ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (L‚ÇÇ\n            (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n              (L (f s) (g (t - s))) ŒΩ)\n            (k (x‚ÇÄ - t)))\n          Œº :=\n      rfl\n    _ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n            (L‚ÇÇ (L (f s) (g (t - s))) (k (x‚ÇÄ - t))) ŒΩ)\n          Œº :=\n      (integral_congr_ae (hfg.mono fun t ht => ((L‚ÇÇ.flip (k (x‚ÇÄ - t))).integral_comp_comm ht).symm))\n    _ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n            (L‚ÇÉ (f s) (L‚ÇÑ (g (t - s)) (k (x‚ÇÄ - t)))) ŒΩ)\n          Œº :=\n      by simp_rw [hL]\n    _ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n            (L‚ÇÉ (f s) (L‚ÇÑ (g (t - s)) (k (x‚ÇÄ - t)))) Œº)\n          ŒΩ :=\n      by rw [integral_integral_swap hi]\n    _ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n            (L‚ÇÉ (f s) (L‚ÇÑ (g u) (k (x‚ÇÄ - s - u)))) Œº)\n          ŒΩ :=\n      by\n      congr ; ext t\n      rw [eq_comm, ‚Üê integral_sub_right_eq_self _ t]\n      ¬∑ simp_rw [sub_sub_sub_cancel_right]\n      ¬∑ infer_instance\n    _ =\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (L‚ÇÉ (f s)\n            (¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n              (L‚ÇÑ (g u) (k (x‚ÇÄ - s - u))) Œº))\n          ŒΩ :=\n      by\n      refine' integral_congr_ae _\n      refine' ((quasi_measure_preserving_sub_left_of_right_invariant ŒΩ x‚ÇÄ).ae hgk).mono fun t ht => _\n      exact (L‚ÇÉ (f t)).integral_comp_comm ht\n    _ = (convolution f L‚ÇÉ ŒΩ (convolution g L‚ÇÑ Œº k)) x‚ÇÄ := rfl\n    \n#align convolution_assoc' convolution_assoc'\n\n",
 "convolution_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- Convolution is associative. This requires that\n* all maps are a.e. strongly measurable w.r.t one of the measures\n* `f ‚ãÜ[L, ŒΩ] g` exists almost everywhere\n* `‚Äñg‚Äñ ‚ãÜ[Œº] ‚Äñk‚Äñ` exists almost everywhere\n* `‚Äñf‚Äñ ‚ãÜ[ŒΩ] (‚Äñg‚Äñ ‚ãÜ[Œº] ‚Äñk‚Äñ)` exists at `x‚ÇÄ` -/\ntheorem convolution_assoc (hL : ‚àÄ (x : E) (y : E') (z : E''), L‚ÇÇ (L x y) z = L‚ÇÉ x (L‚ÇÑ y z)) {x‚ÇÄ : G}\n    (hf : ae_strongly_measurable f ŒΩ) (hg : ae_strongly_measurable g Œº) (hk : ae_strongly_measurable k Œº)\n    (hfg :\n      ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n        (convolution_exists_at f g y L ŒΩ))\n    (hgk :\n      ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" ŒΩ\n        (convolution_exists_at (fun x => ¬´expr‚Äñ ‚Äñ¬ª (g x)) (fun x => ¬´expr‚Äñ ‚Äñ¬ª (k x)) x (mul (expr‚Ñù) (expr‚Ñù)) Œº))\n    (hfgk :\n      convolution_exists_at (fun x => ¬´expr‚Äñ ‚Äñ¬ª (f x))\n        (convolution (fun x => ¬´expr‚Äñ ‚Äñ¬ª (g x)) (mul (expr‚Ñù) (expr‚Ñù)) Œº fun x => ¬´expr‚Äñ ‚Äñ¬ª (k x)) x‚ÇÄ\n        (mul (expr‚Ñù) (expr‚Ñù)) ŒΩ) :\n    (convolution (convolution f L ŒΩ g) L‚ÇÇ Œº k) x‚ÇÄ = (convolution f L‚ÇÉ ŒΩ (convolution g L‚ÇÑ Œº k)) x‚ÇÄ :=\n  by\n  refine' convolution_assoc' L L‚ÇÇ L‚ÇÉ L‚ÇÑ hL hfg (hgk.mono fun x hx => hx.of_norm L‚ÇÑ hg hk) _\n  -- the following is similar to `integrable.convolution_integrand`\n  have h_meas : ae_strongly_measurable (uncurry fun x y => L‚ÇÉ (f y) (L‚ÇÑ (g x) (k (x‚ÇÄ - y - x)))) (Œº.prod ŒΩ) :=\n    by\n    refine' L‚ÇÉ.ae_strongly_measurable_comp‚ÇÇ hf.snd _\n    refine' L‚ÇÑ.ae_strongly_measurable_comp‚ÇÇ hg.fst _\n    refine' (hk.mono' _).comp_measurable ((measurable_const.sub measurable_snd).sub measurable_fst)\n    refine' quasi_measure_preserving.absolutely_continuous _\n    refine'\n      quasi_measure_preserving.prod_of_left ((measurable_const.sub measurable_snd).sub measurable_fst)\n        (eventually_of_forall fun y => _)\n    dsimp only\n    exact quasi_measure_preserving_sub_left_of_right_invariant Œº _\n  have h2_meas :\n    ae_strongly_measurable\n      (fun y =>\n        ¬´expr‚à´ , ‚àÇ ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚à´ , ‚àÇ ¬ª\"\n          (¬´expr‚Äñ ‚Äñ¬ª (L‚ÇÉ (f y) (L‚ÇÑ (g x) (k (x‚ÇÄ - y - x))))) Œº)\n      ŒΩ :=\n    h_meas.prod_swap.norm.integral_prod_right'\n  have h3 : map (fun z : G √ó G => (z.1 - z.2, z.2)) (Œº.prod ŒΩ) = Œº.prod ŒΩ := (measure_preserving_sub_prod Œº ŒΩ).map_eq\n  suffices integrable (uncurry fun x y => L‚ÇÉ (f y) (L‚ÇÑ (g x) (k (x‚ÇÄ - y - x)))) (Œº.prod ŒΩ)\n    by\n    rw [‚Üê h3] at this\n    convert this.comp_measurable (measurable_sub.prod_mk measurable_snd)\n    ext ‚ü®x, y‚ü©\n    simp_rw [uncurry, Function.comp_apply, sub_sub_sub_cancel_right]\n  simp_rw [integrable_prod_iff' h_meas]\n  refine'\n    ‚ü®((quasi_measure_preserving_sub_left_of_right_invariant ŒΩ x‚ÇÄ).ae hgk).mono fun t ht =>\n        (L‚ÇÉ (f t)).integrable_comp <| ht.of_norm L‚ÇÑ hg hk,\n      _‚ü©\n  refine'\n    (hfgk.const_mul (¬´expr‚Äñ ‚Äñ¬ª L‚ÇÉ * ¬´expr‚Äñ ‚Äñ¬ª L‚ÇÑ)).mono' h2_meas\n      (((quasi_measure_preserving_sub_left_of_right_invariant ŒΩ x‚ÇÄ).ae hgk).mono fun t ht => _)\n  ¬∑ simp_rw [convolution_def, mul_apply', mul_mul_mul_comm (¬´expr‚Äñ ‚Äñ¬ª L‚ÇÉ) (¬´expr‚Äñ ‚Äñ¬ª L‚ÇÑ), ‚Üê integral_mul_left]\n    rw [Real.norm_of_nonneg]\n    ¬∑ refine'\n        integral_mono_of_nonneg (eventually_of_forall fun t => norm_nonneg _) ((ht.const_mul _).const_mul _)\n          (eventually_of_forall fun s => _)\n      refine' (L‚ÇÉ.le_op_norm‚ÇÇ _ _).trans _\n      refine' mul_le_mul_of_nonneg_left _ (mul_nonneg (norm_nonneg _) (norm_nonneg _))\n      rw [‚Üê mul_assoc]\n      apply L‚ÇÑ.le_op_norm‚ÇÇ\n    exact integral_nonneg fun x => norm_nonneg _\n#align convolution_assoc convolution_assoc\n\n",
 "convolution":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.convolution [T2Space G] (hcf : HasCompactSupport f) (hcg : HasCompactSupport g) :\n    HasCompactSupport (convolution f L Œº g) :=\n  isCompact_of_isClosed_subset (hcg.is_compact.add hcf) isClosed_closure <|\n    closure_minimal ((support_convolution_subset_swap L).trans <| add_subset_add subset_closure subset_closure)\n      (hcg.is_compact.add hcf).is_closed\n#align has_compact_support.convolution has_compact_support.convolution\n\n",
 "continuous_on_convolution_right_with_param_comp'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in an open subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of compositions with an additional continuous map.\nVersion not assuming `t2_space G`. -/\ntheorem continuous_on_convolution_right_with_param_comp' {s : Set P} {v : P ‚Üí G} (hv : ContinuousOn v s)\n    {g : P ‚Üí G ‚Üí E'} {k : Set G} (hk : IsCompact k) (h'k : IsClosed k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0)\n    (hf : locally_integrable f Œº) (hg : ContinuousOn (uncurry g) (lower_set.prod s univ)) :\n    ContinuousOn (fun x => (convolution f L Œº (g x)) (v x)) s :=\n  by\n  apply (continuous_on_convolution_right_with_param' L hk h'k hgs hf hg).comp (continuous_on_id.prod hv)\n  intro x hx\n  simp only [hx, prod_mk_mem_set_prod_eq, mem_univ, and_self_iff, id.def]\n#align continuous_on_convolution_right_with_param_comp' continuous_on_convolution_right_with_param_comp'\n\n",
 "continuous_on_convolution_right_with_param_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in an open subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of compositions with an additional continuous map. -/\ntheorem continuous_on_convolution_right_with_param_comp [T2Space G] {s : Set P} {v : P ‚Üí G} (hv : ContinuousOn v s)\n    {g : P ‚Üí G ‚Üí E'} {k : Set G} (hk : IsCompact k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0)\n    (hf : locally_integrable f Œº) (hg : ContinuousOn (uncurry g) (lower_set.prod s univ)) :\n    ContinuousOn (fun x => (convolution f L Œº (g x)) (v x)) s :=\n  continuous_on_convolution_right_with_param_comp' L hv hk hk.is_closed hgs hf hg\n#align continuous_on_convolution_right_with_param_comp continuous_on_convolution_right_with_param_comp\n\n",
 "continuous_on_convolution_right_with_param'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/-- The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in a subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`),\nnot assuming `t2_space G`. -/\ntheorem continuous_on_convolution_right_with_param' {g : P ‚Üí G ‚Üí E'} {s : Set P} {k : Set G} (hk : IsCompact k)\n    (h'k : IsClosed k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : ContinuousOn (uncurry g) (lower_set.prod s univ)) :\n    ContinuousOn (fun q : P √ó G => (convolution f L Œº (g q.1)) q.2) (lower_set.prod s univ) :=\n  by\n  intro q‚ÇÄ hq‚ÇÄ\n  replace hq‚ÇÄ : q‚ÇÄ.1 ‚àà s\n  ¬∑ simpa only [mem_prod, mem_univ, and_true_iff] using hq‚ÇÄ\n  have A : ‚àÄ p ‚àà s, Continuous (g p) := by\n    intro p hp\n    apply hg.comp_continuous (continuous_const.prod_mk continuous_id') fun x => _\n    simpa only [prod_mk_mem_set_prod_eq, mem_univ, and_true_iff] using hp\n  have B : ‚àÄ p ‚àà s, tsupport (g p) ‚äÜ k := fun p hp =>\n    closure_minimal (support_subset_iff'.2 fun z hz => hgs _ _ hp hz) h'k\n  /- We find a small neighborhood of `{q‚ÇÄ.1} √ó k` on which the function is uniformly bounded.\n      This follows from the continuity at all points of the compact set `k`. -/\n  obtain ‚ü®w, C, w_open, q‚ÇÄw, Cnonneg, hw‚ü© :\n    ‚àÉ w C, IsOpen w ‚àß q‚ÇÄ.1 ‚àà w ‚àß 0 ‚â§ C ‚àß ‚àÄ p x, p ‚àà w ‚à© s ‚Üí ¬´expr‚Äñ ‚Äñ¬ª (g p x) ‚â§ C :=\n    by\n    have A : IsCompact (lower_set.prod {q‚ÇÄ.1} k) := is_compact_singleton.prod hk\n    obtain ‚ü®t, kt, t_open, ht‚ü© :\n      ‚àÉ t, lower_set.prod {q‚ÇÄ.1} k ‚äÜ t ‚àß IsOpen t ‚àß bounded (¬´expr '' ¬ª (uncurry g) (t ‚à© lower_set.prod s univ)) :=\n      by\n      apply exists_is_open_bounded_image_inter_of_is_compact_of_continuous_on A _ hg\n      simp only [prod_subset_prod_iff, hq‚ÇÄ, singleton_subset_iff, subset_univ, and_self_iff, true_or_iff]\n    obtain ‚ü®C, Cpos, hC‚ü© : ‚àÉ C, 0 < C ‚àß ¬´expr '' ¬ª (uncurry g) (t ‚à© lower_set.prod s univ) ‚äÜ closed_ball (0 : E') C\n    exact ht.subset_ball_lt 0 0\n    obtain ‚ü®w, w_open, q‚ÇÄw, hw‚ü© : ‚àÉ w, IsOpen w ‚àß q‚ÇÄ.1 ‚àà w ‚àß lower_set.prod w k ‚äÜ t :=\n      by\n      obtain ‚ü®w, v, w_open, v_open, hw, hv, hvw‚ü© :\n        ‚àÉ (w : Set P)(v : Set G), IsOpen w ‚àß IsOpen v ‚àß {q‚ÇÄ.fst} ‚äÜ w ‚àß k ‚äÜ v ‚àß lower_set.prod w v ‚äÜ t\n      exact generalized_tube_lemma isCompact_singleton hk t_open kt\n      exact ‚ü®w, w_open, singleton_subset_iff.1 hw, subset.trans (Set.prod_mono subset.rfl hv) hvw‚ü©\n    refine' ‚ü®w, C, w_open, q‚ÇÄw, Cpos.le, _‚ü©\n    rintro p x ‚ü®hp, hps‚ü©\n    by_cases hx : x ‚àà k\n    ¬∑ have H : (p, x) ‚àà t := by\n        apply hw\n        simp only [prod_mk_mem_set_prod_eq, hp, hx, and_true_iff]\n      have H' : (p, x) ‚àà (lower_set.prod s univ : Set (P √ó G)) := by\n        simpa only [prod_mk_mem_set_prod_eq, mem_univ, and_true_iff] using hps\n      have : g p x ‚àà closed_ball (0 : E') C := hC (mem_image_of_mem _ ‚ü®H, H'‚ü©)\n      rwa [mem_closedBall_zero_iff] at this\n    ¬∑ have : g p x = 0 := hgs _ _ hps hx\n      rw [this]\n      simpa only [norm_zero] using Cpos.le\n  have I1 :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n      (nhds_within (lower_set.prod s univ) q‚ÇÄ) (ae_strongly_measurable (fun a : G => L (f a) (g q.1 (q.2 - a))) Œº) :=\n    by\n    filter_upwards [self_mem_nhdsWithin]\n    rintro ‚ü®p, x‚ü© ‚ü®hp, hx‚ü©\n    refine' (has_compact_support.convolution_exists_right L _ hf (A _ hp) _).1\n    exact isCompact_of_isClosed_subset hk (isClosed_tsupport _) (B p hp)\n  let K' := -k + {q‚ÇÄ.2}\n  have hK' : IsCompact K' := hk.neg.add isCompact_singleton\n  obtain ‚ü®U, U_open, K'U, hU‚ü© : ‚àÉ U, IsOpen U ‚àß K' ‚äÜ U ‚àß integrable_on f U Œº\n  exact hf.integrable_on_nhds_is_compact hK'\n  let bound : G ‚Üí expr‚Ñù := indicator U fun a => ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f a) * C\n  have I2 :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\"\n      (nhds_within (lower_set.prod s univ) q‚ÇÄ)\n      (¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n        (¬´expr‚Äñ ‚Äñ¬ª (L (f a) (g q.1 (q.2 - a))) ‚â§ bound a)) :=\n    by\n    obtain ‚ü®V, V_mem, hV‚ü© : ‚àÉ (V : Set G)(H : V ‚àà (nhds) (0 : G)), K' + V ‚äÜ U\n    exact compact_open_separated_add_right hK' U_open K'U\n    have : (lower_set.prod (w ‚à© s) ({q‚ÇÄ.2} + V) : Set (P √ó G)) ‚àà nhds_within (lower_set.prod s univ) q‚ÇÄ :=\n      by\n      conv_rhs => rw [‚Üê @prod.mk.eta _ _ q‚ÇÄ, nhdsWithin_prod_eq, nhdsWithin_univ]\n      refine' Filter.prod_mem_prod _ (singleton_add_mem_nhds_of_nhds_zero q‚ÇÄ.2 V_mem)\n      exact mem_nhdsWithin_iff_exists_mem_nhds_inter.2 ‚ü®w, w_open.mem_nhds q‚ÇÄw, subset.rfl‚ü©\n    filter_upwards [this]\n    rintro ‚ü®p, x‚ü© hpx\n    simp only [prod_mk_mem_set_prod_eq] at hpx\n    apply eventually_of_forall fun a => _\n    apply convolution_integrand_bound_right_of_le_of_subset _ _ hpx.2 _\n    ¬∑ intro x\n      exact hw _ _ hpx.1\n    ¬∑ rw [‚Üê add_assoc]\n      apply subset.trans (add_subset_add_right (add_subset_add_right _)) hV\n      rw [neg_subset_neg]\n      exact B p hpx.1.2\n  have I3 : integrable bound Œº := by\n    rw [integrable_indicator_iff U_open.measurable_set]\n    exact (hU.norm.const_mul _).mul_const _\n  have I4 :\n    ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n      (ContinuousWithinAt (fun q : P √ó G => L (f a) (g q.1 (q.2 - a))) (lower_set.prod s univ) q‚ÇÄ) :=\n    by\n    apply eventually_of_forall fun a => _\n    suffices H : ContinuousWithinAt (fun q : P √ó G => (f a, g q.1 (q.2 - a))) (lower_set.prod s univ) q‚ÇÄ\n    exact L.continuous‚ÇÇ.continuous_at.comp_continuous_within_at H\n    apply continuous_within_at_const.prod\n    change ContinuousWithinAt (fun q : P √ó G => (uncurry g) (q.1, q.2 - a)) (lower_set.prod s univ) q‚ÇÄ\n    have : ContinuousAt (fun q : P √ó G => (q.1, q.2 - a)) (q‚ÇÄ.1, q‚ÇÄ.2) :=\n      (continuous_fst.prod_mk (continuous_snd.sub continuous_const)).continuous_at\n    rw [‚Üê @prod.mk.eta _ _ q‚ÇÄ]\n    have h'q‚ÇÄ : (q‚ÇÄ.1, q‚ÇÄ.2 - a) ‚àà (lower_set.prod s univ : Set (P √ó G)) := ‚ü®hq‚ÇÄ, mem_univ _‚ü©\n    refine' ContinuousWithinAt.comp (hg _ h'q‚ÇÄ) this.continuous_within_at _\n    rintro ‚ü®q, x‚ü© ‚ü®hq, hx‚ü©\n    exact ‚ü®hq, mem_univ _‚ü©\n  exact continuous_within_at_of_dominated I1 I2 I3 I4\n#align continuous_on_convolution_right_with_param' continuous_on_convolution_right_with_param'\n\n",
 "continuous_on_convolution_right_with_param":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/-- The convolution `f * g` is continuous if `f` is locally integrable and `g` is continuous and\ncompactly supported. Version where `g` depends on an additional parameter in a subset `s` of\na parameter space `P` (and the compact support `k` is independent of the parameter in `s`). -/\ntheorem continuous_on_convolution_right_with_param [T2Space G] {g : P ‚Üí G ‚Üí E'} {s : Set P} {k : Set G}\n    (hk : IsCompact k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : ContinuousOn (uncurry g) (lower_set.prod s univ)) :\n    ContinuousOn (fun q : P √ó G => (convolution f L Œº (g q.1)) q.2) (lower_set.prod s univ) :=\n  continuous_on_convolution_right_with_param' L hk hk.is_closed hgs hf hg\n#align continuous_on_convolution_right_with_param continuous_on_convolution_right_with_param\n\n",
 "continuous_convolution_right_of_integrable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution is continuous if one function is integrable and the other is bounded and\ncontinuous. -/\ntheorem bdd_above.continuous_convolution_right_of_integrable [SecondCountableTopology G]\n    (hbg : BddAbove (range fun x => ¬´expr‚Äñ ‚Äñ¬ª (g x))) (hf : integrable f Œº) (hg : Continuous g) :\n    Continuous (convolution f L Œº g) :=\n  by\n  refine' continuous_iff_continuous_at.mpr fun x‚ÇÄ => _\n  have :\n    ¬´expr‚àÄ·∂† in , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·∂† in , ¬ª\" ((nhds) x‚ÇÄ)\n      (¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n        (¬´expr‚Äñ ‚Äñ¬ª (L (f t) (g (x - t))) ‚â§\n          ¬´expr‚Äñ ‚Äñ¬ª L * ¬´expr‚Äñ ‚Äñ¬ª (f t) *\n            ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n              (¬´expr‚Äñ ‚Äñ¬ª (g i)))) :=\n    by\n    refine' eventually_of_forall fun x => eventually_of_forall fun t => _\n    refine' (L.le_op_norm‚ÇÇ _ _).trans _\n    exact mul_le_mul_of_nonneg_left (le_csup·µ¢ hbg <| x - t) (mul_nonneg (norm_nonneg _) (norm_nonneg _))\n  refine' continuous_at_of_dominated _ this _ _\n  ¬∑ exact eventually_of_forall fun x => hf.ae_strongly_measurable.convolution_integrand_snd' L hg.ae_strongly_measurable\n  ¬∑ exact (hf.norm.const_mul _).mul_const _\n  ¬∑\n    exact\n      eventually_of_forall fun t =>\n        (L.continuous‚ÇÇ.comp‚ÇÇ continuous_const <|\n            hg.comp <| continuous_id.sub <| by apply continuous_const).continuous_at\n#align bdd_above.continuous_convolution_right_of_integrable bdd_above.continuous_convolution_right_of_integrable\n\n",
 "continuous_convolution_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution is continuous if one function is locally integrable and the other has compact\nsupport and is continuous. -/\ntheorem has_compact_support.continuous_convolution_right (hcg : HasCompactSupport g) (hf : locally_integrable f Œº)\n    (hg : Continuous g) : Continuous (convolution f L Œº g) :=\n  by\n  rw [continuous_iff_continuousOn_univ]\n  let g' : G ‚Üí G ‚Üí E' := fun p q => g q\n  have : ContinuousOn (uncurry g') (lower_set.prod univ univ) := (hg.comp continuous_snd).continuous_on\n  exact\n    continuous_on_convolution_right_with_param_comp' L (continuous_iff_continuousOn_univ.1 continuous_id) hcg\n      (isClosed_tsupport _) (fun p x hp hx => image_eq_zero_of_nmem_tsupport hx) hf this\n#align has_compact_support.continuous_convolution_right has_compact_support.continuous_convolution_right\n\n",
 "continuous_convolution_left_of_integrable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Äñ ‚Äñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem bdd_above.continuous_convolution_left_of_integrable [SecondCountableTopology G]\n    (hbf : BddAbove (range fun x => ¬´expr‚Äñ ‚Äñ¬ª (f x))) (hf : Continuous f) (hg : integrable g Œº) :\n    Continuous (convolution f L Œº g) := by\n  rw [‚Üê convolution_flip]\n  exact hbf.continuous_convolution_right_of_integrable L.flip hg hf\n#align bdd_above.continuous_convolution_left_of_integrable bdd_above.continuous_convolution_left_of_integrable\n\n",
 "continuous_convolution_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.continuous_convolution_left [FirstCountableTopology G] (hcf : HasCompactSupport f)\n    (hf : Continuous f) (hg : locally_integrable g Œº) : Continuous (convolution f L Œº g) :=\n  by\n  rw [‚Üê convolution_flip]\n  exact hcf.continuous_convolution_right L.flip hg hf\n#align has_compact_support.continuous_convolution_left has_compact_support.continuous_convolution_left\n\n",
 "cont_diff_on_convolution_right_with_param_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution `f * g` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of composition with an additional smooth function. -/\ntheorem cont_diff_on_convolution_right_with_param_comp {n : ¬´expr‚Ñï‚àû¬ª} (L : ¬´expr ‚ÜíL[ ] ¬ª E ùïú (¬´expr ‚ÜíL[ ] ¬ª E' ùïú F))\n    {s : Set P} {v : P ‚Üí G} (hv : cont_diff_on ùïú n v s) {f : G ‚Üí E} {g : P ‚Üí G ‚Üí E'} {k : Set G} (hs : IsOpen s)\n    (hk : IsCompact k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : cont_diff_on ùïú n (uncurry g) (lower_set.prod s univ)) :\n    cont_diff_on ùïú n (fun x => (convolution f L Œº (g x)) (v x)) s :=\n  by\n  apply (cont_diff_on_convolution_right_with_param L hs hk hgs hf hg).comp (cont_diff_on_id.prod hv)\n  intro x hx\n  simp only [hx, mem_preimage, prod_mk_mem_set_prod_eq, mem_univ, and_self_iff, id.def]\n#align cont_diff_on_convolution_right_with_param_comp cont_diff_on_convolution_right_with_param_comp\n\n",
 "cont_diff_on_convolution_right_with_param_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·∂ú¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/-- The convolution `f * g` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`).\nIn this version, all the types belong to the same universe (to get an induction working in the\nproof). Use instead `cont_diff_on_convolution_right_with_param`, which removes this restriction. -/\ntheorem cont_diff_on_convolution_right_with_param_aux {G : Type uP} {E' : Type uP} {F : Type uP} {P : Type uP}\n    [NormedAddCommGroup E'] [NormedAddCommGroup F] [NormedSpace ùïú E'] [NormedSpace (expr‚Ñù) F] [NormedSpace ùïú F]\n    [CompleteSpace F] [MeasurableSpace G] {Œº : measure G} [NormedAddCommGroup G] [borel_space G] [NormedSpace ùïú G]\n    [NormedAddCommGroup P] [NormedSpace ùïú P] {f : G ‚Üí E} {n : ¬´expr‚Ñï‚àû¬ª} (L : ¬´expr ‚ÜíL[ ] ¬ª E ùïú (¬´expr ‚ÜíL[ ] ¬ª E' ùïú F))\n    {g : P ‚Üí G ‚Üí E'} {s : Set P} {k : Set G} (hs : IsOpen s) (hk : IsCompact k)\n    (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : cont_diff_on ùïú n (uncurry g) (lower_set.prod s univ)) :\n    cont_diff_on ùïú n (fun q : P √ó G => (convolution f L Œº (g q.1)) q.2) (lower_set.prod s univ) :=\n  by\n  /- We have a formula for the derivation of `f * g`, which is of the same form, thanks to\n    `has_fderiv_at_convolution_right_with_param`. Therefore, we can prove the result by induction on\n    `n` (but for this we need the spaces at the different steps of the induction to live in the same\n    universe, which is why we make the assumption in the lemma that all the relevant spaces\n    come from the same universe). -/\n  induction' n using ENat.nat_induction with n ih ih generalizing g E' F\n  ¬∑ rw [cont_diff_on_zero] at hg‚ä¢\n    exact continuous_on_convolution_right_with_param L hk hgs hf hg\n  ¬∑ let f' : P ‚Üí G ‚Üí ¬´expr ‚ÜíL[ ] ¬ª (P √ó G) ùïú F := fun p a =>\n      (convolution f (L.precompR (P √ó G)) Œº fun x : G => fderiv ùïú (uncurry g) (p, x)) a\n    have A :\n      ‚àÄ q‚ÇÄ : P √ó G, q‚ÇÄ.1 ‚àà s ‚Üí has_fderiv_at (fun q : P √ó G => (convolution f L Œº (g q.1)) q.2) (f' q‚ÇÄ.1 q‚ÇÄ.2) q‚ÇÄ :=\n      has_fderiv_at_convolution_right_with_param L hs hk hgs hf hg.one_of_succ\n    rw [cont_diff_on_succ_iff_fderiv_of_open (hs.prod (@isOpen_univ G _))] at hg‚ä¢\n    constructor\n    ¬∑ rintro ‚ü®p, x‚ü© ‚ü®hp, hx‚ü©\n      exact (A (p, x) hp).differentiable_at.differentiable_within_at\n    ¬∑ suffices H : cont_diff_on ùïú n (uncurry f') (lower_set.prod s univ)\n      ¬∑ apply H.congr\n        rintro ‚ü®p, x‚ü© ‚ü®hp, hx‚ü©\n        exact (A (p, x) hp).fderiv\n      have B : ‚àÄ (p : P) (x : G), p ‚àà s ‚Üí x ‚àâ k ‚Üí fderiv ùïú (uncurry g) (p, x) = 0 :=\n        by\n        intro p x hp hx\n        apply (has_fderiv_at_zero_of_eventually_const (0 : E') _).fderiv\n        have M2 : ¬´expr ·∂ú¬ª k ‚àà (nhds) x := IsOpen.mem_nhds hk.is_closed.is_open_compl hx\n        have M1 : s ‚àà (nhds) p := hs.mem_nhds hp\n        rw [nhds_prod_eq]\n        filter_upwards [prod_mem_prod M1 M2]\n        rintro ‚ü®p, y‚ü© ‚ü®hp, hy‚ü©\n        exact hgs p y hp hy\n      apply ih (L.precompR (P √ó G) : _) B\n      convert hg.2\n      apply funext\n      rintro ‚ü®p, x‚ü©\n      rfl\n  ¬∑ rw [cont_diff_on_top] at hg‚ä¢\n    intro n\n    exact ih n L hgs (hg n)\n#align cont_diff_on_convolution_right_with_param_aux cont_diff_on_convolution_right_with_param_aux\n\n",
 "cont_diff_on_convolution_right_with_param":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/-- The convolution `f * g` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`). -/\ntheorem cont_diff_on_convolution_right_with_param {f : G ‚Üí E} {n : ¬´expr‚Ñï‚àû¬ª}\n    (L : ¬´expr ‚ÜíL[ ] ¬ª E ùïú (¬´expr ‚ÜíL[ ] ¬ª E' ùïú F)) {g : P ‚Üí G ‚Üí E'} {s : Set P} {k : Set G} (hs : IsOpen s)\n    (hk : IsCompact k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : cont_diff_on ùïú n (uncurry g) (lower_set.prod s univ)) :\n    cont_diff_on ùïú n (fun q : P √ó G => (convolution f L Œº (g q.1)) q.2) (lower_set.prod s univ) :=\n  by\n  /- The result is known when all the universes are the same, from\n    `cont_diff_on_convolution_right_with_param_aux`. We reduce to this situation by pushing\n    everything through `ulift` continuous linear equivalences. -/\n  let eG : Type max uG uE' uF uP := ULift G\n  borelize eG\n  let eE' : Type max uE' uG uF uP := ULift E'\n  let eF : Type max uF uG uE' uP := ULift F\n  let eP : Type max uP uG uE' uF := ULift P\n  have isoG : ¬´expr ‚âÉL[ ] ¬ª eG ùïú G := ContinuousLinearEquiv.ulift\n  have isoE' : ¬´expr ‚âÉL[ ] ¬ª eE' ùïú E' := ContinuousLinearEquiv.ulift\n  have isoF : ¬´expr ‚âÉL[ ] ¬ª eF ùïú F := ContinuousLinearEquiv.ulift\n  have isoP : ¬´expr ‚âÉL[ ] ¬ª eP ùïú P := ContinuousLinearEquiv.ulift\n  let ef := f ‚àò isoG\n  let eŒº : measure eG := measure.map isoG.symm Œº\n  let eg : eP ‚Üí eG ‚Üí eE' := fun ep ex => isoE'.symm (g (isoP ep) (isoG ex))\n  let eL :=\n    ContinuousLinearMap.comp\n      ((continuous_linear_equiv.arrow_congr isoE' isoF).symm :\n        ¬´expr ‚ÜíL[ ] ¬ª (¬´expr ‚ÜíL[ ] ¬ª E' ùïú F) ùïú (¬´expr ‚ÜíL[ ] ¬ª eE' ùïú eF))\n      L\n  let R := fun q : eP √ó eG => (convolution ef eL eŒº (eg q.1)) q.2\n  have R_contdiff : cont_diff_on ùïú n R (lower_set.prod (¬´expr ‚Åª¬π' ¬ª isoP s) univ) :=\n    by\n    have hek : IsCompact (¬´expr ‚Åª¬π' ¬ª isoG k) := isoG.to_homeomorph.closed_embedding.is_compact_preimage hk\n    have hes : IsOpen (¬´expr ‚Åª¬π' ¬ª isoP s) := isoP.continuous.is_open_preimage _ hs\n    refine' cont_diff_on_convolution_right_with_param_aux eL hes hek _ _ _\n    ¬∑ intro p x hp hx\n      simp only [comp_app, ContinuousLinearEquiv.prod_apply, LinearIsometryEquiv.coe_coe,\n        ContinuousLinearEquiv.map_eq_zero_iff]\n      exact hgs _ _ hp hx\n    ¬∑ apply (locally_integrable_map_homeomorph isoG.symm.to_homeomorph).2\n      convert hf\n      ext1 x\n      simp only [ef, ContinuousLinearEquiv.coe_toHomeomorph, comp_app, ContinuousLinearEquiv.apply_symm_apply]\n    ¬∑ apply isoE'.symm.cont_diff.comp_cont_diff_on\n      apply hg.comp (isoP.prod isoG).cont_diff.cont_diff_on\n      rintro ‚ü®p, x‚ü© ‚ü®hp, hx‚ü©\n      simpa only [mem_preimage, ContinuousLinearEquiv.prod_apply, prod_mk_mem_set_prod_eq, mem_univ, and_true_iff] using\n        hp\n  have A : cont_diff_on ùïú n (isoF ‚àò R ‚àò (isoP.prod isoG).symm) (lower_set.prod s univ) :=\n    by\n    apply isoF.cont_diff.comp_cont_diff_on\n    apply R_contdiff.comp (continuous_linear_equiv.cont_diff _).cont_diff_on\n    rintro ‚ü®p, x‚ü© ‚ü®hp, hx‚ü©\n    simpa only [mem_preimage, mem_prod, mem_univ, and_true_iff, ContinuousLinearEquiv.prod_symm,\n      ContinuousLinearEquiv.prod_apply, ContinuousLinearEquiv.apply_symm_apply] using hp\n  have : isoF ‚àò R ‚àò (isoP.prod isoG).symm = fun q : P √ó G => (convolution f L Œº (g q.1)) q.2 :=\n    by\n    apply funext\n    rintro ‚ü®p, x‚ü©\n    simp only [R, LinearIsometryEquiv.coe_coe, comp_app, ContinuousLinearEquiv.prod_symm,\n      ContinuousLinearEquiv.prod_apply]\n    simp only [convolution, eL, coe_comp', ContinuousLinearEquiv.coe_coe, comp_app, eŒº]\n    rw [closed_embedding.integral_map, ‚Üê isoF.integral_comp_comm]\n    swap\n    ¬∑ exact isoG.symm.to_homeomorph.closed_embedding\n    congr 1\n    ext1 a\n    simp only [ef, eg, comp_app, ContinuousLinearEquiv.apply_symm_apply, coe_comp', ContinuousLinearEquiv.prod_apply,\n      ContinuousLinearEquiv.map_sub, continuous_linear_equiv.arrow_congr,\n      continuous_linear_equiv.arrow_congrSL_symm_apply, ContinuousLinearEquiv.coe_coe, comp_app,\n      ContinuousLinearEquiv.apply_symm_apply]\n  simp_rw [this] at A\n  exact A\n#align cont_diff_on_convolution_right_with_param cont_diff_on_convolution_right_with_param\n\n",
 "cont_diff_on_convolution_left_with_param_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/-- The convolution `g * f` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`),\ngiven in terms of composition with additional smooth functions. -/\ntheorem cont_diff_on_convolution_left_with_param_comp [Œº.is_add_left_invariant] [Œº.is_neg_invariant]\n    (L : ¬´expr ‚ÜíL[ ] ¬ª E' ùïú (¬´expr ‚ÜíL[ ] ¬ª E ùïú F)) {s : Set P} {n : ¬´expr‚Ñï‚àû¬ª} {v : P ‚Üí G} (hv : cont_diff_on ùïú n v s)\n    {f : G ‚Üí E} {g : P ‚Üí G ‚Üí E'} {k : Set G} (hs : IsOpen s) (hk : IsCompact k)\n    (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : cont_diff_on ùïú n (uncurry g) (lower_set.prod s univ)) :\n    cont_diff_on ùïú n (fun x => (convolution (g x) L Œº f) (v x)) s :=\n  by\n  apply (cont_diff_on_convolution_left_with_param L hs hk hgs hf hg).comp (cont_diff_on_id.prod hv)\n  intro x hx\n  simp only [hx, mem_preimage, prod_mk_mem_set_prod_eq, mem_univ, and_self_iff, id.def]\n#align cont_diff_on_convolution_left_with_param_comp cont_diff_on_convolution_left_with_param_comp\n\n",
 "cont_diff_on_convolution_left_with_param":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ÜíL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/-- The convolution `g * f` is `C^n` when `f` is locally integrable and `g` is `C^n` and compactly\nsupported. Version where `g` depends on an additional parameter in an open subset `s` of a\nparameter space `P` (and the compact support `k` is independent of the parameter in `s`). -/\ntheorem cont_diff_on_convolution_left_with_param [Œº.is_add_left_invariant] [Œº.is_neg_invariant]\n    (L : ¬´expr ‚ÜíL[ ] ¬ª E' ùïú (¬´expr ‚ÜíL[ ] ¬ª E ùïú F)) {f : G ‚Üí E} {n : ¬´expr‚Ñï‚àû¬ª} {g : P ‚Üí G ‚Üí E'} {s : Set P} {k : Set G}\n    (hs : IsOpen s) (hk : IsCompact k) (hgs : ‚àÄ p, ‚àÄ x, p ‚àà s ‚Üí x ‚àâ k ‚Üí g p x = 0) (hf : locally_integrable f Œº)\n    (hg : cont_diff_on ùïú n (uncurry g) (lower_set.prod s univ)) :\n    cont_diff_on ùïú n (fun q : P √ó G => (convolution (g q.1) L Œº f) q.2) (lower_set.prod s univ) := by\n  simpa only [convolution_flip] using cont_diff_on_convolution_right_with_param L.flip hs hk hgs hf hg\n#align cont_diff_on_convolution_left_with_param cont_diff_on_convolution_left_with_param\n\n",
 "cont_diff_convolution_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.cont_diff_convolution_right {n : ¬´expr‚Ñï‚àû¬ª} (hcg : HasCompactSupport g)\n    (hf : locally_integrable f Œº) (hg : cont_diff ùïú n g) : cont_diff ùïú n (convolution f L Œº g) :=\n  by\n  rcases exists_compact_iff_hasCompactSupport.2 hcg with ‚ü®k, hk, h'k‚ü©\n  rw [‚Üê cont_diff_on_univ]\n  exact\n    cont_diff_on_convolution_right_with_param_comp L cont_diff_on_id isOpen_univ hk (fun p x hp hx => h'k x hx) hf\n      (hg.comp cont_diff_snd).cont_diff_on\n#align has_compact_support.cont_diff_convolution_right has_compact_support.cont_diff_convolution_right\n\n",
 "cont_diff_convolution_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚Ñï‚àû¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem has_compact_support.cont_diff_convolution_left [Œº.is_add_left_invariant] [Œº.is_neg_invariant] {n : ¬´expr‚Ñï‚àû¬ª}\n    (hcf : HasCompactSupport f) (hf : cont_diff ùïú n f) (hg : locally_integrable g Œº) :\n    cont_diff ùïú n (convolution f L Œº g) := by\n  rw [‚Üê convolution_flip]\n  exact hcf.cont_diff_convolution_right L.flip hg hf\n#align has_compact_support.cont_diff_convolution_left has_compact_support.cont_diff_convolution_left\n\n",
 "ae_convolution_exists":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª -/\ntheorem measure_theory.integrable.ae_convolution_exists (hf : integrable f ŒΩ) (hg : integrable g Œº) :\n    ¬´expr‚àÄ·µê ‚àÇ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚àÄ·µê ‚àÇ , ¬ª\" Œº\n      (convolution_exists_at f g x L ŒΩ) :=\n  ((integrable_prod_iff <| hf.ae_strongly_measurable.convolution_integrand L hg.ae_strongly_measurable).mp <|\n      hf.convolution_integrand L hg).1\n#align measure_theory.integrable.ae_convolution_exists measure_theory.integrable.ae_convolution_exists\n\n",
 "add_distrib":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `convolution -/\ntheorem convolution_exists.add_distrib (hfg : convolution_exists f g L Œº) (hfg' : convolution_exists f' g L Œº) :\n    convolution (f + f') L Œº g = convolution f L Œº g + convolution f' L Œº g :=\n  by\n  ext\n  exact (hfg x).add_distrib (hfg' x)\n#align convolution_exists.add_distrib convolution_exists.add_distrib\n\n"}