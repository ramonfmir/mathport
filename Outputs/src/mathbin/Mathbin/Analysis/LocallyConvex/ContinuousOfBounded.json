{"continuous_of_locally_bounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. -/\ntheorem linear_map.continuous_of_locally_bounded [uniform_add_group F] (f : «expr →ₛₗ[ ] » E σ F)\n    (hf : ∀ (s : set E) (hs : is_vonN_bounded 𝕜 s), is_vonN_bounded 𝕜' («expr '' » f s)) : continuous f :=\n  (uniform_continuous_of_continuous_at_zero f <| f.continuous_at_zero_of_locally_bounded hf).continuous\n#align linear_map.continuous_of_locally_bounded linear_map.continuous_of_locally_bounded\n\n",
 "continuous_at_zero_of_locally_bounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem linear_map.continuous_at_zero_of_locally_bounded (f : «expr →ₛₗ[ ] » E σ F)\n    (hf : ∀ (s : set E) (hs : is_vonN_bounded 𝕜 s), is_vonN_bounded 𝕜' («expr '' » f s)) : continuous_at f 0 :=\n  by\n  -- Assume that f is not continuous at 0\n  by_contra\n  -- We use a decreasing balanced basis for 0 : E and a balanced basis for 0 : F\n  -- and reformulate non-continuity in terms of these bases\n  rcases(nhds_basis_balanced 𝕜 E).exists_antitone_subbasis with ⟨b, bE1, bE⟩\n  simp only [id.def] at bE\n  have bE' : ((nhds) (0 : E)).has_basis (fun x : ℕ => x ≠ 0) fun n : ℕ => «expr • » (n : 𝕜)⁻¹ (b n) :=\n    by\n    refine' bE.1.to_has_basis _ _\n    · intro n _\n      use n + 1\n      simp only [ne.def, nat.succ_ne_zero, not_false_iff, Nat.cast_add, Nat.cast_one, true_and_iff]\n      -- `b (n + 1) ⊆ b n` follows from `antitone`.\n      have h : b (n + 1) ⊆ b n := bE.2 (by simp)\n      refine' subset_trans _ h\n      rintro y ⟨x, hx, hy⟩\n      -- Since `b (n + 1)` is balanced `(n+1)⁻¹ b (n + 1) ⊆ b (n + 1)`\n      rw [← hy]\n      refine' (bE1 (n + 1)).2.smul_mem _ hx\n      have h' : 0 < (n : exprℝ) + 1 := n.cast_add_one_pos\n      rw [norm_inv, ← Nat.cast_one, ← Nat.cast_add, is_R_or_C.norm_eq_abs, is_R_or_C.abs_cast_nat, Nat.cast_add,\n        Nat.cast_one, inv_le h' zero_lt_one]\n      norm_cast\n      simp\n    intro n hn\n    -- The converse direction follows from continuity of the scalar multiplication\n    have hcont : continuous_at (fun x : E => «expr • » (n : 𝕜) x) 0 := (continuous_const_smul (n : 𝕜)).continuous_at\n    simp only [continuous_at, map_zero, smul_zero] at hcont\n    rw [bE.1.tendsto_left_iff] at hcont\n    rcases hcont (b n) (bE1 n).1 with ⟨i, _, hi⟩\n    refine' ⟨i, trivial, fun x hx => ⟨«expr • » (n : 𝕜) x, hi hx, _⟩⟩\n    simp [← mul_smul, hn]\n  rw [continuous_at, map_zero, bE'.tendsto_iff (nhds_basis_balanced 𝕜' F)] at h\n  push_neg  at h\n  rcases h with ⟨V, ⟨hV, hV'⟩, h⟩\n  simp only [id.def, forall_true_left] at h\n  -- There exists `u : ℕ → E` such that for all `n : ℕ` we have `u n ∈ n⁻¹ • b n` and `f (u n) ∉ V`\n  choose! u hu hu' using h\n  -- The sequence `(λ n, n • u n)` converges to `0`\n  have h_tendsto : tendsto (fun n : ℕ => «expr • » (n : 𝕜) (u n)) at_top ((nhds) (0 : E)) :=\n    by\n    apply bE.tendsto\n    intro n\n    by_cases h : n = 0\n    · rw [h, Nat.cast_zero, zero_smul]\n      refine' mem_of_mem_nhds (bE.1.mem_of_mem <| by triv)\n    rcases hu n h with ⟨y, hy, hu1⟩\n    convert hy\n    rw [← hu1, ← mul_smul]\n    simp only [h, mul_inv_cancel, ne.def, Nat.cast_eq_zero, not_false_iff, one_smul]\n  -- The image `(λ n, n • u n)` is von Neumann bounded:\n  have h_bounded : is_vonN_bounded 𝕜 (Set.range fun n : ℕ => «expr • » (n : 𝕜) (u n)) :=\n    h_tendsto.cauchy_seq.totally_bounded_range.is_vonN_bounded 𝕜\n  -- Since `range u` is bounded it absorbs `V`\n  rcases hf _ h_bounded hV with ⟨r, hr, h'⟩\n  cases' exists_nat_gt r with n hn\n  -- We now find a contradiction between `f (u n) ∉ V` and the absorbing property\n  have h1 : r ≤ «expr‖ ‖» (n : 𝕜') :=\n    by\n    rw [is_R_or_C.norm_eq_abs, is_R_or_C.abs_cast_nat]\n    exact hn.le\n  have hn' : 0 < «expr‖ ‖» (n : 𝕜') := lt_of_lt_of_le hr h1\n  rw [norm_pos_iff, ne.def, Nat.cast_eq_zero] at hn'\n  have h'' : f (u n) ∈ V := by\n    simp only [Set.image_subset_iff] at h'\n    specialize h' (n : 𝕜') h1 (Set.mem_range_self n)\n    simp only [Set.mem_preimage, linear_map.map_smulₛₗ, map_nat_cast] at h'\n    rcases h' with ⟨y, hy, h'⟩\n    apply_fun fun y : F => «expr • » (n : 𝕜')⁻¹ y  at h'\n    simp only [hn', inv_smul_smul₀, ne.def, Nat.cast_eq_zero, not_false_iff] at h'\n    rwa [← h']\n  exact hu' n hn' h''\n#align linear_map.continuous_at_zero_of_locally_bounded linear_map.continuous_at_zero_of_locally_bounded\n\n",
 "clm_of_exists_bounded_image_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-\nCopyright (c) 2022 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Moritz Doll\n-/\n-- It suffices to show that `f` is continuous at `0`.\n-- Continuity means that `U ∈ 𝓝 0` implies that `f ⁻¹' U ∈ 𝓝 0`.\n-- After unfolding all the definitions, we know that `f '' V ⊆ x • U`. We use this to show the\n-- inclusion `x⁻¹ • V ⊆ f⁻¹' U`.\n-- Using this inclusion, it suffices to show that `x⁻¹ • V` is in `𝓝 0`, which is trivial.\ntheorem linear_map.clm_of_exists_bounded_image_coe {f : «expr →ₗ[ ] » E 𝕜 F}\n    {h : ∃ (V : set E)(hV : V ∈ (nhds) (0 : E)), bornology.is_vonN_bounded 𝕜 («expr '' » f V)} :\n    (f.clm_of_exists_bounded_image h : «expr →ₗ[ ] » E 𝕜 F) = f :=\n  rfl\n#align linear_map.clm_of_exists_bounded_image_coe linear_map.clm_of_exists_bounded_image_coe\n\n",
 "clm_of_exists_bounded_image_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem linear_map.clm_of_exists_bounded_image_apply {f : «expr →ₗ[ ] » E 𝕜 F}\n    {h : ∃ (V : set E)(hV : V ∈ (nhds) (0 : E)), bornology.is_vonN_bounded 𝕜 («expr '' » f V)} {x : E} :\n    f.clm_of_exists_bounded_image h x = f x :=\n  rfl\n#align linear_map.clm_of_exists_bounded_image_apply linear_map.clm_of_exists_bounded_image_apply\n\n"}