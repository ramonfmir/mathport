{"vonN_bornology_eq":
 "/-- In a normed space, the von Neumann bornology (`bornology.vonN_bornology`) is equal to the\nmetric bornology. -/\ntheorem vonN_bornology_eq : Bornology.vonNBornology 𝕜 E = pseudo_metric_space.to_bornology :=\n  by\n  rw [Bornology.ext_iff_isBounded]\n  intro s\n  rw [Bornology.isBounded_iff_isVonNBounded]\n  exact is_vonN_bounded_iff 𝕜 E s\n#align vonN_bornology_eq vonN_bornology_eq\n\n",
 "union":
 "/-- The union of two bounded sets is bounded. -/\ntheorem is_vonN_bounded.union {s₁ s₂ : Set E} (hs₁ : IsVonNBounded 𝕜 s₁) (hs₂ : IsVonNBounded 𝕜 s₂) :\n    IsVonNBounded 𝕜 (s₁ ∪ s₂) := fun V hV => (hs₁ hV).union (hs₂ hV)\n#align is_vonN_bounded.union is_vonN_bounded.union\n\n",
 "subset":
 "/-- Subsets of bounded sets are bounded. -/\ntheorem is_vonN_bounded.subset {s₁ s₂ : Set E} (h : s₁ ⊆ s₂) (hs₂ : IsVonNBounded 𝕜 s₂) : IsVonNBounded 𝕜 s₁ :=\n  fun V hV => (hs₂ hV).mono_right h\n#align is_vonN_bounded.subset is_vonN_bounded.subset\n\n",
 "smul_tendsto_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_vonN_bounded.smul_tendsto_zero {S : Set E} {ε : ι → 𝕜} {x : ι → E} {l : Filter ι} (hS : IsVonNBounded 𝕜 S)\n    (hxS :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (x n ∈ S))\n    (hε : Tendsto ε l ((nhds) 0)) : Tendsto («expr • » ε x) l ((nhds) 0) :=\n  by\n  rw [tendsto_def] at *\n  intro V hV\n  rcases hS hV with ⟨r, r_pos, hrS⟩\n  filter_upwards [hxS, hε _ (Metric.ball_mem_nhds 0 <| inv_pos.mpr r_pos)]with n hnS hnr\n  by_cases this : ε n = 0\n  · simp [this, mem_of_mem_nhds hV]\n  · rw [mem_preimage, mem_ball_zero_iff, lt_inv (norm_pos_iff.mpr this) r_pos, ← norm_inv] at hnr\n    rw [mem_preimage, Pi.smul_apply', ← Set.mem_inv_smul_set_iff₀ this]\n    exact hrS _ hnr.le hnS\n#align is_vonN_bounded.smul_tendsto_zero is_vonN_bounded.smul_tendsto_zero\n\n",
 "of_topological_space_le":
 "/-- If a topology `t'` is coarser than `t`, then any set `s` that is bounded with respect to\n`t` is bounded with respect to `t'`. -/\ntheorem is_vonN_bounded.of_topological_space_le {t t' : TopologicalSpace E} (h : t ≤ t') {s : Set E}\n    (hs : @IsVonNBounded 𝕜 E _ _ _ t s) : @IsVonNBounded 𝕜 E _ _ _ t' s := fun V hV =>\n  hs <| (le_iff_nhds t t').mp h 0 hV\n#align is_vonN_bounded.of_topological_space_le is_vonN_bounded.of_topological_space_le\n\n",
 "is_vonN_bounded_singleton":
 "/-- Singletons are bounded. -/\ntheorem is_vonN_bounded_singleton (x : E) : IsVonNBounded 𝕜 ({x} : Set E) := fun V hV =>\n  (absorbent_nhds_zero hV).absorbs\n#align is_vonN_bounded_singleton is_vonN_bounded_singleton\n\n",
 "is_vonN_bounded_of_smul_tendsto_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem is_vonN_bounded_of_smul_tendsto_zero {ε : ι → 𝕝} {l : Filter ι} [l.ne_bot]\n    (hε :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (ε n ≠ 0))\n    {S : Set E} (H : ∀ x : ι → E, (∀ n, x n ∈ S) → Tendsto («expr • » ε x) l ((nhds) 0)) : IsVonNBounded 𝕝 S :=\n  by\n  rw [(nhds_basis_balanced 𝕝 E).is_vonN_bounded_basis_iff]\n  by_contra' H'\n  rcases H' with ⟨V, ⟨hV, hVb⟩, hVS⟩\n  have :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n      (∃ x : S, «expr • » (ε n) (x : E) ∉ V) :=\n    by\n    filter_upwards [hε]with n hn\n    rw [Absorbs] at hVS\n    push_neg  at hVS\n    rcases hVS _ (norm_pos_iff.mpr <| inv_ne_zero hn) with ⟨a, haε, haS⟩\n    rcases set.not_subset.mp haS with ⟨x, hxS, hx⟩\n    refine' ⟨⟨x, hxS⟩, fun hnx => _⟩\n    rw [← Set.mem_inv_smul_set_iff₀ hn] at hnx\n    exact hx (hVb.smul_mono haε hnx)\n  rcases this.choice with ⟨x, hx⟩\n  refine' Filter.frequently_false l (Filter.Eventually.frequently _)\n  filter_upwards [hx, (H (coe ∘ x) fun n => (x n).2).eventually (eventually_mem_set.mpr hV)]using fun n => id\n#align is_vonN_bounded_of_smul_tendsto_zero is_vonN_bounded_of_smul_tendsto_zero\n\n",
 "is_vonN_bounded_iff_smul_tendsto_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Given any sequence `ε` of scalars which tends to `𝓝[≠] 0`, we have that a set `S` is bounded\n  if and only if for any sequence `x : ℕ → S`, `ε • x` tends to 0. This actually works for any\n  indexing type `ι`, but in the special case `ι = ℕ` we get the important fact that convergent\n  sequences fully characterize bounded sets. -/\ntheorem is_vonN_bounded_iff_smul_tendsto_zero {ε : ι → 𝕝} {l : Filter ι} [l.ne_bot]\n    (hε : Tendsto ε l (nhds_within.ne 0)) {S : Set E} :\n    IsVonNBounded 𝕝 S ↔ ∀ x : ι → E, (∀ n, x n ∈ S) → Tendsto («expr • » ε x) l ((nhds) 0) :=\n  ⟨fun hS x hxS => hS.smul_tendsto_zero (eventually_of_forall hxS) (le_trans hε nhdsWithin_le_nhds),\n    isVonNBounded_of_smul_tendsto_zero (hε self_mem_nhdsWithin)⟩\n#align is_vonN_bounded_iff_smul_tendsto_zero is_vonN_bounded_iff_smul_tendsto_zero\n\n",
 "is_vonN_bounded_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_vonN_bounded_iff' (s : Set E) :\n    Bornology.IsVonNBounded 𝕜 s ↔ ∃ r : exprℝ, ∀ (x : E) (hx : x ∈ s), «expr‖ ‖» x ≤ r := by\n  rw [NormedSpace.isVonNBounded_iff, ← Metric.bounded_iff_isBounded, bounded_iff_forall_norm_le]\n#align is_vonN_bounded_iff' is_vonN_bounded_iff'\n\n",
 "is_vonN_bounded_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem is_vonN_bounded_iff (s : Set E) : Bornology.IsVonNBounded 𝕜 s ↔ Bornology.IsBounded s :=\n  by\n  rw [← Metric.bounded_iff_isBounded, Metric.bounded_iff_subset_ball (0 : E)]\n  constructor\n  · intro h\n    rcases h (Metric.ball_mem_nhds 0 zero_lt_one) with ⟨ρ, hρ, hρball⟩\n    rcases NormedField.exists_lt_norm 𝕜 ρ with ⟨a, ha⟩\n    specialize hρball a ha.le\n    rw [← ball_normSeminorm 𝕜 E, Seminorm.smul_ball_zero (norm_pos_iff.1 <| hρ.trans ha), ball_normSeminorm, mul_one] at\n      hρball\n    exact ⟨«expr‖ ‖» a, hρball.trans Metric.ball_subset_closedBall⟩\n  · exact fun ⟨C, hC⟩ => (is_vonN_bounded_closed_ball 𝕜 E C).subset hC\n#align is_vonN_bounded_iff is_vonN_bounded_iff\n\n",
 "is_vonN_bounded_empty":
 "/-\nCopyright (c) 2022 Moritz Doll. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Moritz Doll\n-/\n@[simp]\ntheorem is_vonN_bounded_empty : IsVonNBounded 𝕜 (∅ : Set E) := fun _ _ => absorbs_empty\n#align is_vonN_bounded_empty is_vonN_bounded_empty\n\n",
 "is_vonN_bounded_covers":
 "/-- The union of all bounded set is the whole space. -/\ntheorem is_vonN_bounded_covers : ⋃₀ setOf (IsVonNBounded 𝕜) = (Set.univ : Set E) :=\n  Set.eq_univ_iff_forall.mpr fun x => Set.mem_unionₛ.mpr ⟨{x}, isVonNBounded_singleton _, Set.mem_singleton _⟩\n#align is_vonN_bounded_covers is_vonN_bounded_covers\n\n",
 "is_vonN_bounded_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_vonN_bounded_closed_ball (r : exprℝ) : Bornology.IsVonNBounded 𝕜 (Metric.closedBall (0 : E) r) :=\n  (isVonNBounded_ball 𝕜 E (r + 1)).subset (Metric.closedBall_subset_ball <| by linarith)\n#align is_vonN_bounded_closed_ball is_vonN_bounded_closed_ball\n\n",
 "is_vonN_bounded_basis_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.HasBasis.isVonNBounded_basis_iff /-\ntheorem Filter.HasBasis.isVonNBounded_basis_iff {q : ι → Prop} {s : ι → Set E} {A : Set E}\n    (h : ((nhds) (0 : E)).has_basis q s) : IsVonNBounded 𝕜 A ↔ ∀ (i) (hi : q i), Absorbs 𝕜 (s i) A :=\n  by\n  refine' ⟨fun hA i hi => hA (h.mem_of_mem hi), fun hA V hV => _⟩\n  rcases h.mem_iff.mp hV with ⟨i, hi, hV⟩\n  exact (hA i hi).mono_left hV\n#align filter.has_basis.is_vonN_bounded_basis_iff Filter.HasBasis.isVonNBounded_basis_iff\n-/\n\n",
 "is_vonN_bounded_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem is_vonN_bounded_ball (r : exprℝ) : Bornology.IsVonNBounded 𝕜 (Metric.ball (0 : E) r) :=\n  by\n  rw [metric.nhds_basis_ball.is_vonN_bounded_basis_iff, ← ball_normSeminorm 𝕜 E]\n  exact fun ε hε => (normSeminorm 𝕜 E).ball_zero_absorbs_ball_zero hε\n#align is_vonN_bounded_ball is_vonN_bounded_ball\n\n",
 "is_bounded_iff_subset_smul_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_bounded_iff_subset_smul_closed_ball {s : Set E} :\n    Bornology.IsBounded s ↔ ∃ a : 𝕜, s ⊆ «expr • » a (Metric.closedBall 0 1) :=\n  by\n  constructor\n  · rw [is_bounded_iff_subset_smul_ball 𝕜]\n    exact Exists.imp fun a ha => ha.trans <| Set.smul_set_mono <| Metric.ball_subset_closedBall\n  · rw [← is_vonN_bounded_iff 𝕜]\n    rintro ⟨a, ha⟩\n    exact ((is_vonN_bounded_closed_ball 𝕜 E 1).image («expr • » a 1 : «expr →L[ ] » E 𝕜 E)).subset ha\n#align is_bounded_iff_subset_smul_closed_ball is_bounded_iff_subset_smul_closed_ball\n\n",
 "is_bounded_iff_subset_smul_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_bounded_iff_subset_smul_ball {s : Set E} :\n    Bornology.IsBounded s ↔ ∃ a : 𝕜, s ⊆ «expr • » a (Metric.ball 0 1) :=\n  by\n  rw [← is_vonN_bounded_iff 𝕜]\n  constructor\n  · intro h\n    rcases h (Metric.ball_mem_nhds 0 zero_lt_one) with ⟨ρ, hρ, hρball⟩\n    rcases NormedField.exists_lt_norm 𝕜 ρ with ⟨a, ha⟩\n    exact ⟨a, hρball a ha.le⟩\n  · rintro ⟨a, ha⟩\n    exact ((is_vonN_bounded_ball 𝕜 E 1).image («expr • » a 1 : «expr →L[ ] » E 𝕜 E)).subset ha\n#align is_bounded_iff_subset_smul_ball is_bounded_iff_subset_smul_ball\n\n",
 "is_bounded_iff_is_vonN_bounded":
 "-- See note [reducible non-instances]\n@[simp]\ntheorem is_bounded_iff_is_vonN_bounded {s : Set E} : @IsBounded _ (vonNBornology 𝕜 E) s ↔ IsVonNBounded 𝕜 s :=\n  isBounded_ofBounded_iff _\n#align is_bounded_iff_is_vonN_bounded is_bounded_iff_is_vonN_bounded\n\n",
 "isVonNBounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n#print TotallyBounded.isVonNBounded /-\ntheorem TotallyBounded.isVonNBounded {s : Set E} (hs : TotallyBounded s) : Bornology.IsVonNBounded 𝕜 s :=\n  by\n  rw [totallyBounded_iff_subset_finite_unionᵢ_nhds_zero] at hs\n  intro U hU\n  have h : Filter.Tendsto (fun x : E × E => x.fst + x.snd) ((nhds) (0, 0)) ((nhds) ((0 : E) + (0 : E))) := tendsto_add\n  rw [add_zero] at h\n  have h' := (nhds_basis_balanced 𝕜 E).prod (nhds_basis_balanced 𝕜 E)\n  simp_rw [← nhds_prod_eq, id.def] at h'\n  rcases h.basis_left h' U hU with ⟨x, hx, h''⟩\n  rcases hs x.snd hx.2.1 with ⟨t, ht, hs⟩\n  refine' Absorbs.mono_right _ hs\n  rw [ht.absorbs_Union]\n  have hx_fstsnd : x.fst + x.snd ⊆ U := by\n    intro z hz\n    rcases set.mem_add.mp hz with ⟨z1, z2, hz1, hz2, hz⟩\n    have hz' : (z1, z2) ∈ lower_set.prod x.fst x.snd := ⟨hz1, hz2⟩\n    simpa only [hz] using h'' hz'\n  refine' fun y hy => Absorbs.mono_left _ hx_fstsnd\n  rw [← Set.singleton_vadd, vadd_eq_add]\n  exact (absorbent_nhds_zero hx.1.1).absorbs.add hx.2.2.absorbs_self\n#align totally_bounded.is_vonN_bounded TotallyBounded.isVonNBounded\n-/\n\n",
 "image_is_vonN_bounded_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem image_is_vonN_bounded_iff (f : E' → E) (s : Set E') :\n    Bornology.IsVonNBounded 𝕜 («expr '' » f s) ↔ ∃ r : exprℝ, ∀ (x : E') (hx : x ∈ s), «expr‖ ‖» (f x) ≤ r := by\n  simp_rw [is_vonN_bounded_iff', Set.ball_image_iff]\n#align image_is_vonN_bounded_iff image_is_vonN_bounded_iff\n\n",
 "image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →SL[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- A continuous linear image of a bounded set is bounded. -/\ntheorem is_vonN_bounded.image {σ : «expr →+* » 𝕜₁ 𝕜₂} [RingHomSurjective σ] [RingHomIsometric σ] {s : Set E}\n    (hs : IsVonNBounded 𝕜₁ s) (f : «expr →SL[ ] » E σ F) : IsVonNBounded 𝕜₂ («expr '' » f s) :=\n  by\n  let σ' := RingEquiv.ofBijective σ ⟨σ.injective, σ.is_surjective⟩\n  have σ_iso : Isometry σ := add_monoid_hom_class.isometry_of_norm σ fun x => ring_hom_isometric.is_iso\n  have σ'_symm_iso : Isometry σ'.symm := σ_iso.right_inv σ'.right_inv\n  have f_tendsto_zero := f.continuous.tendsto 0\n  rw [map_zero] at f_tendsto_zero\n  intro V hV\n  rcases hs (f_tendsto_zero hV) with ⟨r, hrpos, hr⟩\n  refine' ⟨r, hrpos, fun a ha => _⟩\n  rw [← σ'.apply_symm_apply a]\n  have hanz : a ≠ 0 := norm_pos_iff.mp (hrpos.trans_le ha)\n  have : σ'.symm a ≠ 0 := (map_ne_zero σ'.symm.to_ring_hom).mpr hanz\n  change _ ⊆ «expr • » (σ _) _\n  rw [Set.image_subset_iff, preimage_smul_setₛₗ _ _ _ f this.is_unit]\n  refine' hr (σ'.symm a) _\n  rwa [σ'_symm_iso.norm_map_of_map_zero (map_zero _)]\n#align is_vonN_bounded.image is_vonN_bounded.image\n\n"}