{"counit_surjective":
 "theorem counit_surjective : surjective (counit R) :=\n  ACounit_surjective ℤ R\n#align counit_surjective counit_surjective\n\n",
 "counit_nat_surjective":
 "theorem counit_nat_surjective : surjective (counitNat A) :=\n  ACounit_surjective ℕ A\n#align counit_nat_surjective counit_nat_surjective\n\n",
 "counit_nat_X":
 "@[simp]\ntheorem counit_nat_X (a : A) : counitNat A (X a) = a :=\n  ACounit_X _ _\n#align counit_nat_X counit_nat_X\n\n",
 "counit_nat_C":
 "theorem counit_nat_C (n : ℕ) : counitNat A (C n) = n :=\n  ACounit_C _ _\n#align counit_nat_C counit_nat_C\n\n",
 "counit_X":
 "@[simp]\ntheorem counit_X (r : R) : counit R (X r) = r :=\n  ACounit_X _ _\n#align counit_X counit_X\n\n",
 "counit_C":
 "theorem counit_C (n : ℤ) : counit R (C n) = n :=\n  ACounit_C _ _\n#align counit_C counit_C\n\n",
 "acounit_surjective":
 "theorem acounit_surjective : surjective (ACounit A B) := fun b => ⟨X b, ACounit_X A b⟩\n#align acounit_surjective acounit_surjective\n\n",
 "acounit_X":
 "/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[simp]\ntheorem acounit_X (b : B) : ACounit A B (X b) = b :=\n  aeval_X _ b\n#align acounit_X acounit_X\n\n",
 "acounit_C":
 "@[simp]\ntheorem acounit_C (a : A) : ACounit A B (C a) = algebraMap A B a :=\n  aeval_C _ a\n#align acounit_C acounit_C\n\n"}