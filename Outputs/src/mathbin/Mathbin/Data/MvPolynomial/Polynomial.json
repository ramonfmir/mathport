{"polynomial_eval_eval₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-\nCopyright (c) 2023 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem polynomial_eval_eval₂ (f : «expr →+* » R (Polynomial S)) (g : σ → Polynomial S) (p : MvPolynomial σ R) (x : S) :\n    Polynomial.eval x (MvPolynomial.eval₂ f g p) =\n      MvPolynomial.eval₂ ((Polynomial.evalRingHom x).comp f) (fun s => Polynomial.eval x (g s)) p :=\n  by\n  apply MvPolynomial.induction_on p\n  · simp\n  · intro p q hp hq\n    simp [hp, hq]\n  · intro p n hp\n    simp [hp]\n#align polynomial_eval_eval₂ polynomial_eval_eval₂\n\n",
 "eval_polynomial_eval_fin_succ_equiv":
 "theorem eval_polynomial_eval_fin_succ_equiv {n : ℕ} (f : MvPolynomial (Fin (n + 1)) R) (q : MvPolynomial (Fin n) R)\n    (x : Fin n → R) :\n    (eval x) (Polynomial.eval q (finSuccEquiv R n f)) =\n      eval (show Fin (n + 1) → R from @Fin.cases _ (fun _ => R) (eval x q) x) f :=\n  by\n  simp only [fin_succ_equiv_apply, coe_eval₂_hom, eval_eval₂, polynomial_eval_eval₂]\n  have : (eval x).comp ((Polynomial.evalRingHom q).comp (polynomial.C.comp C)) = RingHom.id _ :=\n    by\n    ext\n    simp\n  simp only [this, eval₂_id]\n  congr\n  funext i\n  refine' Fin.cases (by simp) (by simp) i\n#align eval_polynomial_eval_fin_succ_equiv eval_polynomial_eval_fin_succ_equiv\n\n"}