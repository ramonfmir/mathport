{"comap_rename":
 "theorem comap_rename (f : σ → τ) (x : τ → R) : comap (rename f) x = x ∘ f :=\n  by\n  ext i\n  simp only [rename_X, comap_apply, aeval_X]\n#align comap_rename comap_rename\n\n",
 "comap_id_apply":
 "@[simp]\ntheorem comap_id_apply (x : σ → R) : comap (alg_hom.id R (mv_polynomial σ R)) x = x :=\n  by\n  funext i\n  simp only [comap, alg_hom.id_apply, id.def, aeval_X]\n#align comap_id_apply comap_id_apply\n\n",
 "comap_id":
 "theorem comap_id : comap (alg_hom.id R (mv_polynomial σ R)) = id :=\n  by\n  funext x\n  exact comap_id_apply x\n#align comap_id comap_id\n\n",
 "comap_equiv_symm_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n@[simp]\ntheorem comap_equiv_symm_coe (f : «expr ≃ₐ[ ] » (mv_polynomial σ R) R (mv_polynomial τ R)) :\n    ((comap_equiv f).symm : (σ → R) → τ → R) = comap f.symm :=\n  rfl\n#align comap_equiv_symm_coe comap_equiv_symm_coe\n\n",
 "comap_equiv_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n@[simp]\ntheorem comap_equiv_coe (f : «expr ≃ₐ[ ] » (mv_polynomial σ R) R (mv_polynomial τ R)) :\n    (comap_equiv f : (τ → R) → σ → R) = comap f :=\n  rfl\n#align comap_equiv_coe comap_equiv_coe\n\n",
 "comap_eq_id_of_eq_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem comap_eq_id_of_eq_id (f : «expr →ₐ[ ] » (mv_polynomial σ R) R (mv_polynomial σ R)) (hf : ∀ φ, f φ = φ)\n    (x : σ → R) : comap f x = x := by\n  convert comap_id_apply x\n  ext1 φ\n  rw [hf, alg_hom.id_apply]\n#align comap_eq_id_of_eq_id comap_eq_id_of_eq_id\n\n",
 "comap_comp_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem comap_comp_apply (f : «expr →ₐ[ ] » (mv_polynomial σ R) R (mv_polynomial τ R))\n    (g : «expr →ₐ[ ] » (mv_polynomial τ R) R (mv_polynomial υ R)) (x : υ → R) :\n    comap (g.comp f) x = comap f (comap g x) := by\n  funext i\n  trans aeval x (aeval (fun i => g (X i)) (f (X i)))\n  · apply eval₂_hom_congr rfl rfl\n    rw [alg_hom.comp_apply]\n    suffices g = aeval fun i => g (X i) by rw [← this]\n    exact aeval_unique g\n  · simp only [comap, aeval_eq_eval₂_hom, map_eval₂_hom, alg_hom.comp_apply]\n    refine' eval₂_hom_congr _ rfl rfl\n    ext r\n    apply aeval_C\n#align comap_comp_apply comap_comp_apply\n\n",
 "comap_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem comap_comp (f : «expr →ₐ[ ] » (mv_polynomial σ R) R (mv_polynomial τ R))\n    (g : «expr →ₐ[ ] » (mv_polynomial τ R) R (mv_polynomial υ R)) : comap (g.comp f) = comap f ∘ comap g :=\n  by\n  funext x\n  exact comap_comp_apply _ _ _\n#align comap_comp comap_comp\n\n",
 "comap_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[simp]\ntheorem comap_apply (f : «expr →ₐ[ ] » (mv_polynomial σ R) R (mv_polynomial τ R)) (x : τ → R) (i : σ) :\n    comap f x i = aeval x (f (X i)) :=\n  rfl\n#align comap_apply comap_apply\n\n"}