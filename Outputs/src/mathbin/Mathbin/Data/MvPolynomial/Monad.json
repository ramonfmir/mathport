{"vars_bind₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\ntheorem vars_bind₁ (f : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) :\n    (bind₁ f φ).vars ⊆ φ.vars.bUnion fun i => (f i).vars :=\n  by\n  calc\n    (bind₁ f φ).vars = (φ.support.sum fun x : «expr →₀ » σ ℕ => (bind₁ f) (monomial x (coeff x φ))).vars := by\n      rw [← AlgHom.map_sum, ← φ.as_sum]\n    _ ≤ φ.support.bUnion fun i : «expr →₀ » σ ℕ => ((bind₁ f) (monomial i (coeff i φ))).vars := (vars_sum_subset _ _)\n    _ =\n        φ.support.bUnion fun d : «expr →₀ » σ ℕ =>\n          (C (coeff d φ) *\n              finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n                d.support (f i ^ d i)).vars :=\n      by simp only [bind₁_monomial]\n    _ ≤ φ.support.bUnion fun d : «expr →₀ » σ ℕ => d.support.bUnion fun i => (f i).vars := _\n    -- proof below\n        _ ≤\n        φ.vars.bUnion fun i : σ => (f i).vars :=\n      _\n    \n  -- proof below\n  · apply Finset.bunionᵢ_mono\n    intro d hd\n    calc\n      (C (coeff d φ) *\n              finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n                d.support (f i ^ d i)).vars ≤\n          (C (coeff d φ)).vars ∪\n            (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" d.support\n                (f i ^ d i)).vars :=\n        vars_mul _ _\n      _ ≤\n          (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" d.support\n              (f i ^ d i)).vars :=\n        by simp only [Finset.empty_union, vars_C, Finset.le_iff_subset, Finset.Subset.refl]\n      _ ≤ d.support.bUnion fun i : σ => (f i ^ d i).vars := (vars_prod _)\n      _ ≤ d.support.bUnion fun i : σ => (f i).vars := _\n      \n    apply Finset.bunionᵢ_mono\n    intro i hi\n    apply vars_pow\n  · intro j\n    simp_rw [Finset.mem_bunionᵢ]\n    rintro ⟨d, hd, ⟨i, hi, hj⟩⟩\n    exact ⟨i, (mem_vars _).mpr ⟨d, hd, hi⟩, hj⟩\n#align vars_bind₁ vars_bind₁\n\n",
 "rename_comp_bind₁":
 "theorem rename_comp_bind₁ {υ : Type _} (f : σ → MvPolynomial τ R) (g : τ → υ) :\n    (rename g).comp (bind₁ f) = bind₁ fun i => rename g <| f i :=\n  by\n  ext1 i\n  simp\n#align rename_comp_bind₁ rename_comp_bind₁\n\n",
 "rename_bind₁":
 "theorem rename_bind₁ {υ : Type _} (f : σ → MvPolynomial τ R) (g : τ → υ) (φ : MvPolynomial σ R) :\n    rename g (bind₁ f φ) = bind₁ (fun i => rename g <| f i) φ :=\n  AlgHom.congr_fun (rename_comp_bind₁ f g) φ\n#align rename_bind₁ rename_bind₁\n\n",
 "mem_vars_bind₁":
 "theorem mem_vars_bind₁ (f : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) {j : τ} (h : j ∈ (bind₁ f φ).vars) :\n    ∃ i : σ, i ∈ φ.vars ∧ j ∈ (f i).vars := by\n  simpa only [exists_prop, Finset.mem_bunionᵢ, mem_support_iff, ne.def] using vars_bind₁ f φ h\n#align mem_vars_bind₁ mem_vars_bind₁\n\n",
 "map_comp_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem map_comp_C (f : «expr →+* » R S) : (map f).comp (C : «expr →+* » R (MvPolynomial σ R)) = C.comp f :=\n  by\n  ext1\n  apply map_C\n#align map_comp_C map_comp_C\n\n",
 "map_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem map_bind₂ (f : «expr →+* » R (MvPolynomial σ S)) (g : «expr →+* » S T) (φ : MvPolynomial σ R) :\n    map g (bind₂ f φ) = bind₂ ((map g).comp f) φ :=\n  by\n  simp only [bind₂, eval₂_comp_right, coe_eval₂_hom, eval₂_map]\n  congr 1 with : 1\n  simp only [Function.comp_apply, map_X]\n#align map_bind₂ map_bind₂\n\n",
 "map_bind₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem map_bind₁ (f : «expr →+* » R S) (g : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) :\n    map f (bind₁ g φ) = bind₁ (fun i : σ => (map f) (g i)) (map f φ) :=\n  by\n  rw [hom_bind₁, map_comp_C, ← eval₂_hom_map_hom]\n  rfl\n#align map_bind₁ map_bind₁\n\n",
 "join₂_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem join₂_map (f : «expr →+* » R (MvPolynomial σ S)) (φ : MvPolynomial σ R) : join₂ (map f φ) = bind₂ f φ := by\n  simp only [join₂, bind₂, eval₂_hom_map_hom, RingHom.id_comp]\n#align join₂_map join₂_map\n\n",
 "join₂_comp_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem join₂_comp_map (f : «expr →+* » R (MvPolynomial σ S)) : join₂.comp (map f) = bind₂ f :=\n  RingHom.ext <| join₂_map _\n#align join₂_comp_map join₂_comp_map\n\n",
 "join₁_rename":
 "@[simp]\ntheorem join₁_rename (f : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) : join₁ (rename f φ) = bind₁ f φ :=\n  aeval_id_rename _ _\n#align join₁_rename join₁_rename\n\n",
 "hom_bind₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n-- mixing the two monad structures\ntheorem hom_bind₁ (f : «expr →+* » (MvPolynomial τ R) S) (g : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) :\n    f (bind₁ g φ) = eval₂Hom (f.comp C) (fun i => f (g i)) φ := by rw [bind₁, map_aeval, algebra_map_eq]\n#align hom_bind₁ hom_bind₁\n\n",
 "eval₂_hom_id_X_eq_join₂":
 "@[simp]\ntheorem eval₂_hom_id_X_eq_join₂ : eval₂Hom (RingHom.id _) X = @join₂ σ R _ :=\n  rfl\n#align eval₂_hom_id_X_eq_join₂ eval₂_hom_id_X_eq_join₂\n\n",
 "eval₂_hom_eq_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem eval₂_hom_eq_bind₂ (f : «expr →+* » R (MvPolynomial σ S)) : eval₂Hom f X = bind₂ f :=\n  rfl\n#align eval₂_hom_eq_bind₂ eval₂_hom_eq_bind₂\n\n",
 "eval₂_hom_comp_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem eval₂_hom_comp_bind₂ (f : «expr →+* » S T) (g : σ → T) (h : «expr →+* » R (MvPolynomial σ S)) :\n    (eval₂Hom f g).comp (bind₂ h) = eval₂Hom ((eval₂Hom f g).comp h) g := by ext : 2 <;> simp\n#align eval₂_hom_comp_bind₂ eval₂_hom_comp_bind₂\n\n",
 "eval₂_hom_comp_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem eval₂_hom_comp_C (f : «expr →+* » R S) (g : σ → S) : (eval₂Hom f g).comp C = f :=\n  by\n  ext1 r\n  exact eval₂_C f g r\n#align eval₂_hom_comp_C eval₂_hom_comp_C\n\n",
 "eval₂_hom_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem eval₂_hom_bind₂ (f : «expr →+* » S T) (g : σ → T) (h : «expr →+* » R (MvPolynomial σ S))\n    (φ : MvPolynomial σ R) : eval₂Hom f g (bind₂ h φ) = eval₂Hom ((eval₂Hom f g).comp h) g φ :=\n  RingHom.congr_fun (eval₂Hom_comp_bind₂ f g h) φ\n#align eval₂_hom_bind₂ eval₂_hom_bind₂\n\n",
 "eval₂_hom_bind₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem eval₂_hom_bind₁ (f : «expr →+* » R S) (g : τ → S) (h : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) :\n    eval₂Hom f g (bind₁ h φ) = eval₂Hom f (fun i => eval₂Hom f g (h i)) φ := by rw [hom_bind₁, eval₂_hom_comp_C]\n#align eval₂_hom_bind₁ eval₂_hom_bind₁\n\n",
 "eval₂_hom_C_left":
 "theorem eval₂_hom_C_left (f : σ → MvPolynomial τ R) : eval₂Hom C f = bind₁ f :=\n  rfl\n#align eval₂_hom_C_left eval₂_hom_C_left\n\n",
 "eval₂_hom_C_id_eq_join₁":
 "theorem eval₂_hom_C_id_eq_join₁ (φ : MvPolynomial (MvPolynomial σ R) R) : eval₂Hom C id φ = join₁ φ :=\n  rfl\n#align eval₂_hom_C_id_eq_join₁ eval₂_hom_C_id_eq_join₁\n\n",
 "eval₂_hom_C_eq_bind₁":
 "@[simp]\ntheorem eval₂_hom_C_eq_bind₁ (f : σ → MvPolynomial τ R) : eval₂Hom C f = bind₁ f :=\n  rfl\n#align eval₂_hom_C_eq_bind₁ eval₂_hom_C_eq_bind₁\n\n",
 "bind₂_monomial_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem bind₂_monomial_one (f : «expr →+* » R (MvPolynomial σ S)) (d : «expr →₀ » σ ℕ) :\n    bind₂ f (monomial d 1) = monomial d 1 := by rw [bind₂_monomial, f.map_one, one_mul]\n#align bind₂_monomial_one bind₂_monomial_one\n\n",
 "bind₂_monomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem bind₂_monomial (f : «expr →+* » R (MvPolynomial σ S)) (d : «expr →₀ » σ ℕ) (r : R) :\n    bind₂ f (monomial d r) = f r * monomial d 1 := by\n  simp only [monomial_eq, RingHom.map_mul, bind₂_C_right, Finsupp.prod, RingHom.map_prod, RingHom.map_pow,\n    bind₂_X_right, C_1, one_mul]\n#align bind₂_monomial bind₂_monomial\n\n",
 "bind₂_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem bind₂_map (f : «expr →+* » S (MvPolynomial σ T)) (g : «expr →+* » R S) (φ : MvPolynomial σ R) :\n    bind₂ f (map g φ) = bind₂ (f.comp g) φ := by simp [bind₂]\n#align bind₂_map bind₂_map\n\n",
 "bind₂_id":
 "@[simp]\ntheorem bind₂_id : bind₂ (RingHom.id (MvPolynomial σ R)) = join₂ :=\n  rfl\n#align bind₂_id bind₂_id\n\n",
 "bind₂_comp_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem bind₂_comp_bind₂ (f : «expr →+* » R (MvPolynomial σ S)) (g : «expr →+* » S (MvPolynomial σ T)) :\n    (bind₂ g).comp (bind₂ f) = bind₂ ((bind₂ g).comp f) := by ext : 2 <;> simp\n#align bind₂_comp_bind₂ bind₂_comp_bind₂\n\n",
 "bind₂_comp_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem bind₂_comp_C (f : «expr →+* » R (MvPolynomial σ S)) : (bind₂ f).comp C = f :=\n  RingHom.ext <| bind₂_C_right _\n#align bind₂_comp_C bind₂_comp_C\n\n",
 "bind₂_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem bind₂_bind₂ (f : «expr →+* » R (MvPolynomial σ S)) (g : «expr →+* » S (MvPolynomial σ T))\n    (φ : MvPolynomial σ R) : (bind₂ g) (bind₂ f φ) = bind₂ ((bind₂ g).comp f) φ :=\n  RingHom.congr_fun (bind₂_comp_bind₂ f g) φ\n#align bind₂_bind₂ bind₂_bind₂\n\n",
 "bind₂_X_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem bind₂_X_right (f : «expr →+* » R (MvPolynomial σ S)) (i : σ) : bind₂ f (X i) = X i :=\n  eval₂Hom_X' f X i\n#align bind₂_X_right bind₂_X_right\n\n",
 "bind₂_C_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem bind₂_C_right (f : «expr →+* » R (MvPolynomial σ S)) (r : R) : bind₂ f (C r) = f r :=\n  eval₂Hom_C f X r\n#align bind₂_C_right bind₂_C_right\n\n",
 "bind₂_C_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem bind₂_C_left : bind₂ (C : «expr →+* » R (MvPolynomial σ R)) = RingHom.id _ := by ext : 2 <;> simp\n#align bind₂_C_left bind₂_C_left\n\n",
 "bind₁_rename":
 "theorem bind₁_rename {υ : Type _} (f : τ → MvPolynomial υ R) (g : σ → τ) (φ : MvPolynomial σ R) :\n    bind₁ f (rename g φ) = bind₁ (f ∘ g) φ :=\n  AlgHom.congr_fun (bind₁_comp_rename f g) φ\n#align bind₁_rename bind₁_rename\n\n",
 "bind₁_monomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\ntheorem bind₁_monomial (f : σ → MvPolynomial τ R) (d : «expr →₀ » σ ℕ) (r : R) :\n    bind₁ f (monomial d r) =\n      C r *\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" d.support\n          (f i ^ d i) :=\n  by\n  simp only [monomial_eq, AlgHom.map_mul, bind₁_C_right, Finsupp.prod, AlgHom.map_prod, AlgHom.map_pow, bind₁_X_right]\n#align bind₁_monomial bind₁_monomial\n\n",
 "bind₁_id":
 "@[simp]\ntheorem bind₁_id : bind₁ (@id (MvPolynomial σ R)) = join₁ :=\n  rfl\n#align bind₁_id bind₁_id\n\n",
 "bind₁_comp_rename":
 "theorem bind₁_comp_rename {υ : Type _} (f : τ → MvPolynomial υ R) (g : σ → τ) :\n    (bind₁ f).comp (rename g) = bind₁ (f ∘ g) := by\n  ext1 i\n  simp\n#align bind₁_comp_rename bind₁_comp_rename\n\n",
 "bind₁_comp_bind₁":
 "theorem bind₁_comp_bind₁ {υ : Type _} (f : σ → MvPolynomial τ R) (g : τ → MvPolynomial υ R) :\n    (bind₁ g).comp (bind₁ f) = bind₁ fun i => bind₁ g (f i) :=\n  by\n  ext1\n  apply bind₁_bind₁\n#align bind₁_comp_bind₁ bind₁_comp_bind₁\n\n",
 "bind₁_bind₁":
 "theorem bind₁_bind₁ {υ : Type _} (f : σ → MvPolynomial τ R) (g : τ → MvPolynomial υ R) (φ : MvPolynomial σ R) :\n    (bind₁ g) (bind₁ f φ) = bind₁ (fun i => bind₁ g (f i)) φ := by simp [bind₁, ← comp_aeval]\n#align bind₁_bind₁ bind₁_bind₁\n\n",
 "bind₁_X_right":
 "-- In this file, we don't want to use these simp lemmas,\n-- because we first need to show how these new definitions interact\n-- and the proofs fall back on unfolding the definitions and call simp afterwards\n@[simp]\ntheorem bind₁_X_right (f : σ → MvPolynomial τ R) (i : σ) : bind₁ f (X i) = f i :=\n  aeval_X f i\n#align bind₁_X_right bind₁_X_right\n\n",
 "bind₁_X_left":
 "@[simp]\ntheorem bind₁_X_left : bind₁ (X : σ → MvPolynomial σ R) = AlgHom.id R _ :=\n  by\n  ext1 i\n  simp\n#align bind₁_X_left bind₁_X_left\n\n",
 "bind₁_C_right":
 "@[simp]\ntheorem bind₁_C_right (f : σ → MvPolynomial τ R) (x) : bind₁ f (C x) = C x := by simp [bind₁, algebra_map_eq]\n#align bind₁_C_right bind₁_C_right\n\n",
 "aeval_id_rename":
 "theorem aeval_id_rename (f : σ → MvPolynomial τ R) (p : MvPolynomial σ R) : aeval id (rename f p) = aeval f p := by\n  rw [aeval_rename, function.comp.left_id]\n#align aeval_id_rename aeval_id_rename\n\n",
 "aeval_id_eq_join₁":
 "@[simp]\ntheorem aeval_id_eq_join₁ : aeval id = @join₁ σ R _ :=\n  rfl\n#align aeval_id_eq_join₁ aeval_id_eq_join₁\n\n",
 "aeval_eq_bind₁":
 "/-\nCopyright (c) 2020 Johan Commelin, Robert Y. Lewis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Robert Y. Lewis\n-/\n@[simp]\ntheorem aeval_eq_bind₁ (f : σ → MvPolynomial τ R) : aeval f = bind₁ f :=\n  rfl\n#align aeval_eq_bind₁ aeval_eq_bind₁\n\n",
 "aeval_comp_bind₁":
 "theorem aeval_comp_bind₁ [Algebra R S] (f : τ → S) (g : σ → MvPolynomial τ R) :\n    (aeval f).comp (bind₁ g) = aeval fun i => aeval f (g i) :=\n  by\n  ext1\n  apply aeval_bind₁\n#align aeval_comp_bind₁ aeval_comp_bind₁\n\n",
 "aeval_bind₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem aeval_bind₂ [Algebra S T] (f : σ → T) (g : «expr →+* » R (MvPolynomial σ S)) (φ : MvPolynomial σ R) :\n    aeval f (bind₂ g φ) = eval₂Hom ((↑(aeval f : «expr →ₐ[ ] » _ S _) : «expr →+* » _ _).comp g) f φ :=\n  eval₂Hom_bind₂ _ _ _ _\n#align aeval_bind₂ aeval_bind₂\n\n",
 "aeval_bind₁":
 "theorem aeval_bind₁ [Algebra R S] (f : τ → S) (g : σ → MvPolynomial τ R) (φ : MvPolynomial σ R) :\n    aeval f (bind₁ g φ) = aeval (fun i => aeval f (g i)) φ :=\n  eval₂Hom_bind₁ _ _ _ _\n#align aeval_bind₁ aeval_bind₁\n\n"}