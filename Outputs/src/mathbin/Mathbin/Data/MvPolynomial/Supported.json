{"supported_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem supported_univ : supported R (Set.univ : Set σ) = «expr⊤» := by simp [Algebra.eq_top_iff, mem_supported]\n#align supported_univ supported_univ\n\n",
 "supported_strict_mono":
 "theorem supported_strict_mono [Nontrivial R] : StrictMono (supported R : Set σ → Subalgebra R (MvPolynomial σ R)) :=\n  strictMono_of_le_iff_le fun _ _ => supported_le_supported_iff.symm\n#align supported_strict_mono supported_strict_mono\n\n",
 "supported_mono":
 "theorem supported_mono (st : s ⊆ t) : supported R s ≤ supported R t :=\n  Algebra.adjoin_mono (Set.image_subset _ st)\n#align supported_mono supported_mono\n\n",
 "supported_le_supported_iff":
 "@[simp]\ntheorem supported_le_supported_iff [Nontrivial R] : supported R s ≤ supported R t ↔ s ⊆ t :=\n  by\n  constructor\n  · intro h i\n    simpa using @h (X i)\n  · exact supported_mono\n#align supported_le_supported_iff supported_le_supported_iff\n\n",
 "supported_equiv_mv_polynomial_symm_X":
 "@[simp]\ntheorem supported_equiv_mv_polynomial_symm_X (s : Set σ) (i : s) :\n    (↑((supportedEquivMvPolynomial s).symm (X i : MvPolynomial s R)) : MvPolynomial σ R) = X i := by\n  simp [supported_equiv_mv_polynomial]\n#align supported_equiv_mv_polynomial_symm_X supported_equiv_mv_polynomial_symm_X\n\n",
 "supported_equiv_mv_polynomial_symm_C":
 "@[simp]\ntheorem supported_equiv_mv_polynomial_symm_C (s : Set σ) (x : R) :\n    (supportedEquivMvPolynomial s).symm (C x) = algebraMap R (supported R s) x :=\n  by\n  ext1\n  simp [supported_equiv_mv_polynomial, MvPolynomial.algebraMap_eq]\n#align supported_equiv_mv_polynomial_symm_C supported_equiv_mv_polynomial_symm_C\n\n",
 "supported_eq_vars_subset":
 "theorem supported_eq_vars_subset : (supported R s : Set (MvPolynomial σ R)) = { p | ↑p.vars ⊆ s } :=\n  Set.ext fun _ => mem_supported\n#align supported_eq_vars_subset supported_eq_vars_subset\n\n",
 "supported_eq_range_rename":
 "/-\nCopyright (c) 2021 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes\n-/\ntheorem supported_eq_range_rename (s : Set σ) : supported R s = (rename (coe : s → σ)).range := by\n  rw [supported, Set.image_eq_range, adjoin_range_eq_range_aeval, rename]\n#align supported_eq_range_rename supported_eq_range_rename\n\n",
 "supported_eq_adjoin_X":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem supported_eq_adjoin_X : supported R s = Algebra.adjoin R («expr '' » X s) :=\n  rfl\n#align supported_eq_adjoin_X supported_eq_adjoin_X\n\n",
 "supported_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem supported_empty : supported R (∅ : Set σ) = «expr⊥» := by simp [supported_eq_adjoin_X]\n#align supported_empty supported_empty\n\n",
 "mem_supported_vars":
 "@[simp]\ntheorem mem_supported_vars (p : MvPolynomial σ R) : p ∈ supported R (↑p.vars : Set σ) := by rw [mem_supported]\n#align mem_supported_vars mem_supported_vars\n\n",
 "mem_supported":
 "theorem mem_supported : p ∈ supported R s ↔ ↑p.vars ⊆ s :=\n  by\n  rw [supported_eq_range_rename, AlgHom.mem_range]\n  constructor\n  · rintro ⟨p, rfl⟩\n    refine' trans (Finset.coe_subset.2 (vars_rename _ _)) _\n    simp\n  · intro hs\n    exact exists_rename_eq_of_vars_subset_range p (coe : s → σ) Subtype.val_injective (by simpa)\n#align mem_supported mem_supported\n\n",
 "exists_restrict_to_vars":
 "theorem exists_restrict_to_vars (R : Type _) [CommRing R] {F : MvPolynomial σ ℤ} (hF : ↑F.vars ⊆ s) :\n    ∃ f : (s → R) → R, ∀ x : σ → R, f (x ∘ coe : s → R) = aeval x F := by\n  classical\n    rw [← mem_supported, supported_eq_range_rename, AlgHom.mem_range] at hF\n    cases' hF with F' hF'\n    use fun z => aeval z F'\n    intro x\n    simp only [← hF', aeval_rename]\n#align exists_restrict_to_vars exists_restrict_to_vars\n\n",
 "X_mem_supported":
 "@[simp]\ntheorem X_mem_supported [Nontrivial R] {i : σ} : X i ∈ supported R s ↔ i ∈ s := by simp [mem_supported]\n#align X_mem_supported X_mem_supported\n\n"}