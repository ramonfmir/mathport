{"poly_binom_aux3":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\nprivate theorem poly_binom_aux3 (f : polynomial R) (x y : R) :\n    f.eval (x + y) =\n      ((f.sum fun e a => a * x ^ e) + f.sum fun e a => a * e * x ^ (e - 1) * y) +\n        f.sum fun e a => a * (poly_binom_aux1 x y e a).val * y ^ 2 :=\n  by\n  rw [poly_binom_aux2]\n  simp [left_distrib, sum_add, mul_assoc]\n#align poly_binom_aux3 poly_binom_aux3\n\n",
 "poly_binom_aux2":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Johannes Hölzl, Scott Morrison, Jens Wagemaker\n-/\n/- @TODO: pow_add_expansion and pow_sub_pow_factor are not specific to polynomials.\n  These belong somewhere else. But not in group_power because they depend on tactic.ring_exp\n\nMaybe use data.nat.choose to prove it.\n -/\nprivate theorem poly_binom_aux2 (f : polynomial R) (x y : R) :\n    f.eval (x + y) = f.sum fun e a => a * (x ^ e + e * x ^ (e - 1) * y + (poly_binom_aux1 x y e a).val * y ^ 2) :=\n  by\n  unfold eval eval₂; congr with (n z)\n  apply (poly_binom_aux1 x y _ _).property\n#align poly_binom_aux2 poly_binom_aux2\n\n"}