{"smul_single_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_single_apply (i : ℕ) (f : polynomial R) (m : M) (n : ℕ) :\n    («expr • » f (single R i m)) n = ite (i ≤ n) («expr • » (f.coeff (n - i)) m) 0 :=\n  by\n  induction' f using Polynomial.induction_on' with p q hp hq\n  · rw [add_smul, Finsupp.add_apply, hp, hq, coeff_add, add_smul]\n    split_ifs\n    exacts[rfl, zero_add 0]\n  · rw [monomial_smul_single, single_apply, coeff_monomial, ite_smul, zero_smul]\n    by_cases h : i ≤ n\n    · simp_rw [eq_tsub_iff_add_eq_of_le h, if_pos h]\n    · rw [if_neg h, ite_eq_right_iff]\n      intro e\n      exfalso\n      linarith\n#align smul_single_apply smul_single_apply\n\n",
 "smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_apply (f : polynomial R) (g : PolynomialModule R M) (n : ℕ) :\n    («expr • » f g) n =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (Finset.Nat.antidiagonal n) («expr • » (f.coeff x.1) (g x.2)) :=\n  by\n  induction' f using Polynomial.induction_on' with p q hp hq\n  · rw [add_smul, Finsupp.add_apply, hp, hq, ← Finset.sum_add_distrib]\n    congr\n    ext\n    rw [coeff_add, add_smul]\n  · rw [Finset.Nat.sum_antidiagonal_eq_sum_range_succ fun i j => «expr • » ((monomial f_n f_a).coeff i) (g j),\n      monomial_smul_apply]\n    dsimp [monomial]\n    simp_rw [Finsupp.single_smul, Finsupp.single_apply]\n    rw [Finset.sum_ite_eq]\n    simp [Nat.lt_succ_iff]\n#align smul_apply smul_apply\n\n",
 "single_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem single_smul (i : ℕ) (r : R) (m : M) : single R i («expr • » r m) = «expr • » r (single R i m) :=\n  (lsingle R i).map_smul r m\n#align single_smul single_smul\n\n",
 "single_apply":
 "/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem single_apply (i : ℕ) (m : M) (n : ℕ) : single R i m n = ite (i = n) m 0 :=\n  Finsupp.single_apply\n#align single_apply single_apply\n\n",
 "monomial_smul_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem monomial_smul_single (i : ℕ) (r : R) (j : ℕ) (m : M) :\n    «expr • » (monomial i r) (single R j m) = single R (i + j) («expr • » r m) :=\n  by\n  simp only [LinearMap.mul_apply, Polynomial.aeval_monomial, LinearMap.pow_apply, Module.algebraMap_end_apply,\n    modulePolynomialOfEndo_smul_def]\n  induction i generalizing r j m\n  · simp [single]\n  · rw [Function.iterate_succ, Function.comp_apply, nat.succ_eq_add_one, add_assoc, ← i_ih]\n    congr 2\n    ext a\n    dsimp [single]\n    rw [Finsupp.mapDomain_single, Nat.succ_eq_one_add]\n#align monomial_smul_single monomial_smul_single\n\n",
 "monomial_smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem monomial_smul_apply (i : ℕ) (r : R) (g : PolynomialModule R M) (n : ℕ) :\n    («expr • » (monomial i r) g) n = ite (i ≤ n) («expr • » r (g (n - i))) 0 :=\n  by\n  induction' g using PolynomialModule.induction_linear with p q hp hq\n  · simp only [smul_zero, Finsupp.zero_apply, if_t_t]\n  · simp only [smul_add, Finsupp.add_apply, hp, hq]\n    split_ifs\n    exacts[rfl, zero_add 0]\n  · rw [monomial_smul_single, single_apply, single_apply, smul_ite, smul_zero, ← ite_and]\n    congr\n    rw [eq_iff_iff]\n    constructor\n    · rintro rfl\n      simp\n    · rintro ⟨e, rfl⟩\n      rw [add_comm, tsub_add_cancel_of_le e]\n#align monomial_smul_apply monomial_smul_apply\n\n",
 "map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem map_smul (f : «expr →ₗ[ ] » M R M') (p : polynomial R) (q : PolynomialModule R M) :\n    map R' f («expr • » p q) = «expr • » (p.map (algebraMap R R')) (map R' f q) :=\n  by\n  apply induction_linear q\n  · rw [smul_zero, map_zero, smul_zero]\n  · intro f g e₁ e₂\n    rw [smul_add, map_add, e₁, e₂, map_add, smul_add]\n  intro i m\n  apply Polynomial.induction_on' p\n  · intro p q e₁ e₂\n    rw [add_smul, map_add, e₁, e₂, Polynomial.map_add, add_smul]\n  · intro j s\n    rw [monomial_smul_single, map_single, Polynomial.map_monomial, map_single, monomial_smul_single, f.map_smul,\n      algebraMap_smul]\n#align map_smul map_smul\n\n",
 "map_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem map_single (f : «expr →ₗ[ ] » M R M') (i : ℕ) (m : M) : map R' f (single R i m) = single R' i (f m) :=\n  Finsupp.mapRange_single\n#align map_single map_single\n\n",
 "lsingle_apply":
 "theorem lsingle_apply (i : ℕ) (m : M) (n : ℕ) : lsingle R i m n = ite (i = n) m 0 :=\n  Finsupp.single_apply\n#align lsingle_apply lsingle_apply\n\n",
 "induction_linear":
 "theorem induction_linear {P : PolynomialModule R M → Prop} (f : PolynomialModule R M) (h0 : P 0)\n    (hadd : ∀ f g, P f → P g → P (f + g)) (hsingle : ∀ a b, P (single R a b)) : P f :=\n  Finsupp.induction_linear f h0 hadd hsingle\n#align induction_linear induction_linear\n\n",
 "eval_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem eval_smul (p : polynomial R) (q : PolynomialModule R M) (r : R) :\n    eval r («expr • » p q) = «expr • » (p.eval r) (eval r q) :=\n  by\n  apply induction_linear q\n  · rw [smul_zero, map_zero, smul_zero]\n  · intro f g e₁ e₂\n    rw [smul_add, map_add, e₁, e₂, map_add, smul_add]\n  intro i m\n  apply Polynomial.induction_on' p\n  · intro p q e₁ e₂\n    rw [add_smul, map_add, Polynomial.eval_add, e₁, e₂, add_smul]\n  · intro j s\n    rw [monomial_smul_single, eval_single, Polynomial.eval_monomial, eval_single, smul_comm, ← smul_smul, pow_add,\n      mul_smul]\n#align eval_smul eval_smul\n\n",
 "eval_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem eval_single (r : R) (i : ℕ) (m : M) : eval r (single R i m) = «expr • » (r ^ i) m :=\n  Finsupp.sum_single_index (smul_zero _)\n#align eval_single eval_single\n\n",
 "eval_map'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem eval_map' (f : «expr →ₗ[ ] » M R M) (q : PolynomialModule R M) (r : R) : eval r (map R f q) = f (eval r q) :=\n  eval_map R f q r\n#align eval_map' eval_map'\n\n",
 "eval_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem eval_map (f : «expr →ₗ[ ] » M R M') (q : PolynomialModule R M) (r : R) :\n    eval (algebraMap R R' r) (map R' f q) = f (eval r q) :=\n  by\n  apply induction_linear q\n  · simp_rw [map_zero]\n  · intro f g e₁ e₂\n    simp_rw [map_add, e₁, e₂]\n  · intro i m\n    rw [map_single, eval_single, eval_single, f.map_smul, ← map_pow, algebraMap_smul]\n#align eval_map eval_map\n\n",
 "eval_lsingle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem eval_lsingle (r : R) (i : ℕ) (m : M) : eval r (lsingle R i m) = «expr • » (r ^ i) m :=\n  eval_single r i m\n#align eval_lsingle eval_lsingle\n\n",
 "comp_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem comp_smul (p p' : polynomial R) (q : PolynomialModule R M) :\n    comp p («expr • » p' q) = «expr • » (p'.comp p) (comp p q) :=\n  by\n  rw [comp_apply, map_smul, eval_smul, Polynomial.comp, Polynomial.eval_map, comp_apply]\n  rfl\n#align comp_smul comp_smul\n\n",
 "comp_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem comp_single (p : polynomial R) (i : ℕ) (m : M) : comp p (single R i m) = «expr • » (p ^ i) (single R 0 m) :=\n  by\n  rw [comp_apply]\n  erw [map_single, eval_single]\n  rfl\n#align comp_single comp_single\n\n",
 "comp_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem comp_eval (p : polynomial R) (q : PolynomialModule R M) (r : R) : eval r (comp p q) = eval (p.eval r) q :=\n  by\n  rw [← LinearMap.comp_apply]\n  apply induction_linear q\n  · rw [map_zero, map_zero]\n  · intro _ _ e₁ e₂\n    rw [map_add, map_add, e₁, e₂]\n  · intro i m\n    rw [LinearMap.comp_apply, comp_single, eval_single, eval_smul, eval_single, pow_zero, one_smul, Polynomial.eval_pow]\n#align comp_eval comp_eval\n\n"}