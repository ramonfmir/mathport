{"update_eq_add_sub_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem update_eq_add_sub_coeff {R : Type _} [Ring R] (p : polynomial R) (n : ℕ) (a : R) :\n    p.update n a = p + polynomial.C (a - p.coeff n) * polynomial.X ^ n :=\n  by\n  ext\n  rw [coeff_update_apply, coeff_add, coeff_C_mul_X_pow]\n  split_ifs with h <;> simp [h]\n#align update_eq_add_sub_coeff update_eq_add_sub_coeff\n\n",
 "support_trinomial":
 "theorem support_trinomial {k m n : ℕ} (hkm : k < m) (hmn : m < n) {x y z : R} (hx : x ≠ 0) (hy : y ≠ 0) (hz : z ≠ 0) :\n    (C x * X ^ k + C y * X ^ m + C z * X ^ n).support = {k, m, n} :=\n  by\n  apply subset_antisymm (support_trinomial' k m n x y z)\n  simp_rw [insert_subset, singleton_subset_iff, mem_support_iff, coeff_add, coeff_C_mul, coeff_X_pow_self, mul_one,\n    coeff_X_pow, if_neg hkm.ne, if_neg hkm.ne', if_neg hmn.ne, if_neg hmn.ne', if_neg (hkm.trans hmn).ne,\n    if_neg (hkm.trans hmn).ne', mul_zero, add_zero, zero_add, ne.def, hx, hy, hz, and_self_iff, not_false_iff]\n#align support_trinomial support_trinomial\n\n",
 "support_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_smul [monoid S] [DistribMulAction S R] (r : S) (p : polynomial R) :\n    support («expr • » r p) ⊆ support p := by\n  intro i hi\n  simp [mem_support_iff] at hi⊢\n  contrapose! hi\n  simp [hi]\n#align support_smul support_smul\n\n",
 "support_binomial":
 "theorem support_binomial {k m : ℕ} (hkm : k ≠ m) {x y : R} (hx : x ≠ 0) (hy : y ≠ 0) :\n    (C x * X ^ k + C y * X ^ m).support = {k, m} :=\n  by\n  apply subset_antisymm (support_binomial' k m x y)\n  simp_rw [insert_subset, singleton_subset_iff, mem_support_iff, coeff_add, coeff_C_mul, coeff_X_pow_self, mul_one,\n    coeff_X_pow, if_neg hkm, if_neg hkm.symm, mul_zero, zero_add, add_zero, ne.def, hx, hy, and_self_iff, not_false_iff]\n#align support_binomial support_binomial\n\n",
 "smul_eq_C_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_eq_C_mul (a : R) : «expr • » a p = C a * p := by simp [ext_iff]\n#align smul_eq_C_mul smul_eq_C_mul\n\n",
 "nat_cast_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp, norm_cast]\ntheorem nat_cast_inj {m n : ℕ} {R : Type _} [Semiring R] [CharZero R] : (↑m : polynomial R) = ↑n ↔ m = n :=\n  by\n  fconstructor\n  · intro h\n    apply_fun fun p => p.coeff 0  at h\n    simpa using h\n  · rintro rfl\n    rfl\n#align nat_cast_inj nat_cast_inj\n\n",
 "nat_cast_coeff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem nat_cast_coeff_zero {n : ℕ} {R : Type _} [Semiring R] : (n : polynomial R).coeff 0 = n :=\n  by\n  induction' n with n ih\n  · simp\n  · simp [ih]\n#align nat_cast_coeff_zero nat_cast_coeff_zero\n\n",
 "mul_coeff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem mul_coeff_zero (p q : polynomial R) : coeff (p * q) 0 = coeff p 0 * coeff q 0 := by simp [coeff_mul]\n#align mul_coeff_zero mul_coeff_zero\n\n",
 "mul_X_pow_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mul_X_pow_injective (n : ℕ) : function.injective fun P : polynomial R => X ^ n * P :=\n  by\n  intro P Q hPQ\n  simp only at hPQ\n  ext i\n  rw [← coeff_X_pow_mul P n i, hPQ, coeff_X_pow_mul Q n i]\n#align mul_X_pow_injective mul_X_pow_injective\n\n",
 "mul_X_pow_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mul_X_pow_eq_zero {p : polynomial R} {n : ℕ} (H : p * X ^ n = 0) : p = 0 :=\n  ext fun k => (coeff_mul_X_pow p n k).symm.trans <| ext_iff.1 H (k + n)\n#align mul_X_pow_eq_zero mul_X_pow_eq_zero\n\n",
 "mul_X_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mul_X_injective : function.injective fun P : polynomial R => X * P :=\n  pow_one (X : polynomial R) ▸ mul_X_pow_injective 1\n#align mul_X_injective mul_X_injective\n\n",
 "lcoeff_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem lcoeff_apply (n : ℕ) (f : polynomial R) : lcoeff R n f = coeff f n :=\n  rfl\n#align lcoeff_apply lcoeff_apply\n\n",
 "is_unit_C":
 "theorem is_unit_C {x : R} : is_unit (C x) ↔ is_unit x :=\n  ⟨fun h => (congr_arg is_unit coeff_C_zero).mp (h.map <| @constant_coeff R _), fun h => h.map C⟩\n#align is_unit_C is_unit_C\n\n",
 "int_cast_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp, norm_cast]\ntheorem int_cast_inj {m n : ℤ} {R : Type _} [Ring R] [CharZero R] : (↑m : polynomial R) = ↑n ↔ m = n :=\n  by\n  fconstructor\n  · intro h\n    apply_fun fun p => p.coeff 0  at h\n    simpa using h\n  · rintro rfl\n    rfl\n#align int_cast_inj int_cast_inj\n\n",
 "int_cast_coeff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem int_cast_coeff_zero {i : ℤ} {R : Type _} [Ring R] : (i : polynomial R).coeff 0 = i := by cases i <;> simp\n#align int_cast_coeff_zero int_cast_coeff_zero\n\n",
 "finset_sum_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem finset_sum_coeff {ι : Type _} (s : Finset ι) (f : ι → polynomial R) (n : ℕ) :\n    coeff (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f b)) n =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (coeff (f b) n) :=\n  (lcoeff R n).map_sum\n#align finset_sum_coeff finset_sum_coeff\n\n",
 "coeff_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_sum [Semiring S] (n : ℕ) (f : ℕ → R → polynomial S) :\n    coeff (p.sum f) n = p.sum fun a b => coeff (f a b) n :=\n  by\n  rcases p with ⟨⟩\n  simp [polynomial.sum, support, coeff]\n#align coeff_sum coeff_sum\n\n",
 "coeff_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coeff_smul [monoid S] [DistribMulAction S R] (r : S) (p : polynomial R) (n : ℕ) :\n    coeff («expr • » r p) n = «expr • » r (coeff p n) :=\n  by\n  rcases p with ⟨⟩\n  simp_rw [← of_finsupp_smul, coeff]\n  exact finsupp.smul_apply _ _ _\n#align coeff_smul coeff_smul\n\n",
 "coeff_one_add_X_pow":
 "theorem coeff_one_add_X_pow (R : Type _) [Semiring R] (n k : ℕ) : ((1 + X) ^ n).coeff k = (n.choose k : R) := by\n  rw [add_comm _ X, coeff_X_add_one_pow]\n#align coeff_one_add_X_pow coeff_one_add_X_pow\n\n",
 "coeff_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Johannes Hölzl, Scott Morrison, Jens Wagemaker\n-/\ntheorem coeff_one (n : ℕ) : coeff (1 : polynomial R) n = if 0 = n then 1 else 0 :=\n  coeff_monomial\n#align coeff_one coeff_one\n\n",
 "coeff_mul_monomial_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n-- This can already be proved by `simp`.\ntheorem coeff_mul_monomial_zero (p : polynomial R) (d : ℕ) (r : R) : coeff (p * monomial 0 r) d = coeff p d * r :=\n  coeff_mul_monomial p 0 d r\n#align coeff_mul_monomial_zero coeff_mul_monomial_zero\n\n",
 "coeff_mul_monomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_mul_monomial (p : polynomial R) (n d : ℕ) (r : R) : coeff (p * monomial n r) (d + n) = coeff p d * r := by\n  rw [← C_mul_X_pow_eq_monomial, ← X_pow_mul, ← mul_assoc, coeff_mul_C, coeff_mul_X_pow]\n#align coeff_mul_monomial coeff_mul_monomial\n\n",
 "coeff_mul_X_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_mul_X_zero (p : polynomial R) : coeff (p * X) 0 = 0 := by simp\n#align coeff_mul_X_zero coeff_mul_X_zero\n\n",
 "coeff_mul_X_pow'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_mul_X_pow' (p : polynomial R) (n d : ℕ) : (p * X ^ n).coeff d = ite (n ≤ d) (p.coeff (d - n)) 0 :=\n  by\n  split_ifs\n  · rw [← tsub_add_cancel_of_le h, coeff_mul_X_pow, add_tsub_cancel_right]\n  · refine' (coeff_mul _ _ _).trans (finset.sum_eq_zero fun x hx => _)\n    rw [coeff_X_pow, if_neg, mul_zero]\n    exact ((le_of_add_le_right (finset.nat.mem_antidiagonal.mp hx).le).trans_lt <| not_le.mp h).ne\n#align coeff_mul_X_pow' coeff_mul_X_pow'\n\n",
 "coeff_mul_X_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_mul_X_pow (p : polynomial R) (n d : ℕ) : coeff (p * polynomial.X ^ n) (d + n) = coeff p d :=\n  by\n  rw [coeff_mul, sum_eq_single (d, n), coeff_X_pow, if_pos rfl, mul_one]\n  · rintro ⟨i, j⟩ h1 h2\n    rw [coeff_X_pow, if_neg, mul_zero]\n    rintro rfl\n    apply h2\n    rw [nat.mem_antidiagonal, add_right_cancel_iff] at h1\n    subst h1\n  · exact fun h1 => (h1 (nat.mem_antidiagonal.2 rfl)).elim\n#align coeff_mul_X_pow coeff_mul_X_pow\n\n",
 "coeff_mul_X":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_mul_X (p : polynomial R) (n : ℕ) : coeff (p * X) (n + 1) = coeff p n := by\n  simpa only [pow_one] using coeff_mul_X_pow p 1 n\n#align coeff_mul_X coeff_mul_X\n\n",
 "coeff_mul_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_mul_C (p : polynomial R) (n : ℕ) (a : R) : coeff (p * C a) n = coeff p n * a :=\n  by\n  rcases p with ⟨⟩\n  simp_rw [← monomial_zero_left, ← of_finsupp_single, ← of_finsupp_mul, coeff]\n  exact add_monoid_algebra.mul_single_zero_apply p a n\n#align coeff_mul_C coeff_mul_C\n\n",
 "coeff_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- Decomposes the coefficient of the product `p * q` as a sum\nover `nat.antidiagonal`. A version which sums over `range (n + 1)` can be obtained\nby using `finset.nat.sum_antidiagonal_eq_sum_range_succ`. -/\ntheorem coeff_mul (p q : polynomial R) (n : ℕ) :\n    coeff (p * q) n =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (nat.antidiagonal n) (coeff p x.1 * coeff q x.2) :=\n  by\n  rcases p with ⟨⟩; rcases q with ⟨⟩\n  simp_rw [← of_finsupp_mul, coeff]\n  exact add_monoid_algebra.mul_apply_antidiagonal p q n _ fun x => nat.mem_antidiagonal\n#align coeff_mul coeff_mul\n\n",
 "coeff_monomial_zero_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n-- This can already be proved by `simp`.\ntheorem coeff_monomial_zero_mul (p : polynomial R) (d : ℕ) (r : R) : coeff (monomial 0 r * p) d = r * coeff p d :=\n  coeff_monomial_mul p 0 d r\n#align coeff_monomial_zero_mul coeff_monomial_zero_mul\n\n",
 "coeff_monomial_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_monomial_mul (p : polynomial R) (n d : ℕ) (r : R) : coeff (monomial n r * p) (d + n) = r * coeff p d := by\n  rw [← C_mul_X_pow_eq_monomial, mul_assoc, coeff_C_mul, X_pow_mul, coeff_mul_X_pow]\n#align coeff_monomial_mul coeff_monomial_mul\n\n",
 "coeff_bit1_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_bit1_mul (P Q : polynomial R) (n : ℕ) : coeff (bit1 P * Q) n = 2 * coeff (P * Q) n + coeff Q n := by\n  simp [bit1, add_mul, coeff_bit0_mul]\n#align coeff_bit1_mul coeff_bit1_mul\n\n",
 "coeff_bit0_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_bit0_mul (P Q : polynomial R) (n : ℕ) : coeff (bit0 P * Q) n = 2 * coeff (P * Q) n := by\n  simp [bit0, add_mul]\n#align coeff_bit0_mul coeff_bit0_mul\n\n",
 "coeff_bit0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_bit0 (p : polynomial R) (n : ℕ) : coeff (bit0 p) n = bit0 (coeff p n) := by simp [bit0]\n#align coeff_bit0 coeff_bit0\n\n",
 "coeff_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_add (p q : polynomial R) (n : ℕ) : coeff (p + q) n = coeff p n + coeff q n :=\n  by\n  rcases p with ⟨⟩\n  rcases q with ⟨⟩\n  simp_rw [← of_finsupp_add, coeff]\n  exact finsupp.add_apply _ _ _\n#align coeff_add coeff_add\n\n",
 "coeff_X_pow_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_X_pow_self (n : ℕ) : coeff (X ^ n : polynomial R) n = 1 := by simp [coeff_X_pow]\n#align coeff_X_pow_self coeff_X_pow_self\n\n",
 "coeff_X_pow_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_X_pow_mul' (p : polynomial R) (n d : ℕ) : (X ^ n * p).coeff d = ite (n ≤ d) (p.coeff (d - n)) 0 := by\n  rw [(commute_X_pow p n).eq, coeff_mul_X_pow']\n#align coeff_X_pow_mul' coeff_X_pow_mul'\n\n",
 "coeff_X_pow_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_X_pow_mul (p : polynomial R) (n d : ℕ) : coeff (polynomial.X ^ n * p) (d + n) = coeff p d := by\n  rw [(commute_X_pow p n).eq, coeff_mul_X_pow]\n#align coeff_X_pow_mul coeff_X_pow_mul\n\n",
 "coeff_X_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_X_pow (k n : ℕ) : coeff (X ^ k : polynomial R) n = if n = k then 1 else 0 := by\n  simp only [one_mul, RingHom.map_one, ← coeff_C_mul_X_pow]\n#align coeff_X_pow coeff_X_pow\n\n",
 "coeff_X_mul_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_X_mul_zero (p : polynomial R) : coeff (X * p) 0 = 0 := by simp\n#align coeff_X_mul_zero coeff_X_mul_zero\n\n",
 "coeff_X_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_X_mul (p : polynomial R) (n : ℕ) : coeff (X * p) (n + 1) = coeff p n := by\n  rw [(commute_X p).eq, coeff_mul_X]\n#align coeff_X_mul coeff_X_mul\n\n",
 "coeff_X_add_one_pow":
 "theorem coeff_X_add_one_pow (R : Type _) [Semiring R] (n k : ℕ) : ((X + 1) ^ n).coeff k = (n.choose k : R) := by\n  rw [← C_1, coeff_X_add_C_pow, one_pow, one_mul]\n#align coeff_X_add_one_pow coeff_X_add_one_pow\n\n",
 "coeff_X_add_C_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_X_add_C_pow (r : R) (n k : ℕ) : ((X + C r) ^ n).coeff k = r ^ (n - k) * (n.choose k : R) :=\n  by\n  rw [(commute_X (C r : polynomial R)).add_pow, ← lcoeff_apply, linear_map.map_sum]\n  simp only [one_pow, mul_one, lcoeff_apply, ← C_eq_nat_cast, ← C_pow, coeff_mul_C, nat.cast_id]\n  rw [finset.sum_eq_single k, coeff_X_pow_self, one_mul]\n  · intro _ _ h\n    simp [coeff_X_pow, h.symm]\n  · simp only [coeff_X_pow_self, one_mul, not_lt, Finset.mem_range]\n    intro h\n    rw [Nat.choose_eq_zero_of_lt h, Nat.cast_zero, mul_zero]\n#align coeff_X_add_C_pow coeff_X_add_C_pow\n\n",
 "coeff_C_mul_X_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_C_mul_X_pow (x : R) (k n : ℕ) : coeff (C x * X ^ k : polynomial R) n = if n = k then x else 0 :=\n  by\n  rw [C_mul_X_pow_eq_monomial, coeff_monomial]\n  congr 1\n  simp [eq_comm]\n#align coeff_C_mul_X_pow coeff_C_mul_X_pow\n\n",
 "coeff_C_mul_X":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_C_mul_X (x : R) (n : ℕ) : coeff (C x * X : polynomial R) n = if n = 1 then x else 0 := by\n  rw [← pow_one X, coeff_C_mul_X_pow]\n#align coeff_C_mul_X coeff_C_mul_X\n\n",
 "coeff_C_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_C_mul (p : polynomial R) : coeff (C a * p) n = a * coeff p n :=\n  by\n  rcases p with ⟨⟩\n  simp_rw [← monomial_zero_left, ← of_finsupp_single, ← of_finsupp_mul, coeff]\n  exact add_monoid_algebra.single_zero_mul_apply p a n\n#align coeff_C_mul coeff_C_mul\n\n",
 "card_support_trinomial":
 "theorem card_support_trinomial {k m n : ℕ} (hkm : k < m) (hmn : m < n) {x y z : R} (hx : x ≠ 0) (hy : y ≠ 0)\n    (hz : z ≠ 0) : (C x * X ^ k + C y * X ^ m + C z * X ^ n).support.card = 3 := by\n  rw [support_trinomial hkm hmn hx hy hz,\n    card_insert_of_not_mem (mt mem_insert.mp (not_or_of_not hkm.ne (mt mem_singleton.mp (hkm.trans hmn).ne))),\n    card_insert_of_not_mem (mt mem_singleton.mp hmn.ne), card_singleton]\n#align card_support_trinomial card_support_trinomial\n\n",
 "card_support_binomial":
 "theorem card_support_binomial {k m : ℕ} (h : k ≠ m) {x y : R} (hx : x ≠ 0) (hy : y ≠ 0) :\n    (C x * X ^ k + C y * X ^ m).support.card = 2 := by\n  rw [support_binomial h hx hy, card_insert_of_not_mem (mt mem_singleton.mp h), card_singleton]\n#align card_support_binomial card_support_binomial\n\n",
 "C_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem C_mul' (a : R) (f : polynomial R) : C a * f = «expr • » a f :=\n  by\n  ext\n  rw [coeff_C_mul, coeff_smul, smul_eq_mul]\n#align C_mul' C_mul'\n\n",
 "C_dvd_iff_dvd_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem C_dvd_iff_dvd_coeff (r : R) (φ : polynomial R) : C r ∣ φ ↔ ∀ i, r ∣ φ.coeff i :=\n  by\n  constructor\n  · rintro ⟨φ, rfl⟩ c\n    rw [coeff_C_mul]\n    apply dvd_mul_right\n  · intro h\n    choose c hc using h\n    classical\n      let c' : ℕ → R := fun i => if i ∈ φ.support then c i else 0\n      let ψ : polynomial R :=\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" φ.support\n          (monomial i (c' i))\n      use ψ\n      ext i\n      simp only [ψ, c', coeff_C_mul, mem_support_iff, coeff_monomial, finset_sum_coeff, finset.sum_ite_eq']\n      split_ifs with hi hi\n      · rw [hc]\n      · rw [not_not] at hi\n        rwa [mul_zero]\n#align C_dvd_iff_dvd_coeff C_dvd_iff_dvd_coeff\n\n"}