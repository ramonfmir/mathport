{"ring_hom_ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[ext]\ntheorem ring_hom_ext' {S} [Semiring S] {f g : «expr →+* » (polynomial R) S} (h₁ : f.comp C = g.comp C)\n    (h₂ : f X = g X) : f = g :=\n  ringHom_ext (RingHom.congr_fun h₁) h₂\n#align ring_hom_ext' ring_hom_ext'\n\n",
 "ring_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem ring_hom_ext {S} [Semiring S] {f g : «expr →+* » (polynomial R) S} (h₁ : ∀ a, f (C a) = g (C a))\n    (h₂ : f X = g X) : f = g :=\n  by\n  set f' := f.comp (to_finsupp_iso R).symm.to_ring_hom with hf'\n  set g' := g.comp (to_finsupp_iso R).symm.to_ring_hom with hg'\n  have A : f' = g' := by\n    ext\n    · simp [h₁, RingEquiv.toRingHom_eq_coe]\n    · simpa [RingEquiv.toRingHom_eq_coe] using h₂\n  have B : f = f'.comp (to_finsupp_iso R) := by\n    rw [hf', RingHom.comp_assoc]\n    ext x\n    simp only [RingEquiv.toRingHom_eq_coe, RingEquiv.symm_apply_apply, Function.comp_apply, RingHom.coe_comp,\n      RingEquiv.coe_toRingHom]\n  have C : g = g'.comp (to_finsupp_iso R) := by\n    rw [hg', RingHom.comp_assoc]\n    ext x\n    simp only [RingEquiv.toRingHom_eq_coe, RingEquiv.symm_apply_apply, Function.comp_apply, RingHom.coe_comp,\n      RingEquiv.coe_toRingHom]\n  rw [B, C, A]\n#align ring_hom_ext ring_hom_ext\n\n",
 "monomial_one_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Johannes Hölzl, Scott Morrison, Jens Wagemaker\n-/\ntheorem monomial_one_eq_iff [Nontrivial R] {i j : ℕ} : (monomial i 1 : polynomial R) = monomial j 1 ↔ i = j :=\n  by\n  simp_rw [← of_finsupp_single]\n  exact add_monoid_algebra.of_injective.eq_iff\n#align monomial_one_eq_iff monomial_one_eq_iff\n\n",
 "card_support_le_one_iff_monomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem card_support_le_one_iff_monomial {f : polynomial R} : Finset.card f.support ≤ 1 ↔ ∃ n a, f = monomial n a :=\n  by\n  constructor\n  · intro H\n    rw [Finset.card_le_one_iff_subset_singleton] at H\n    rcases H with ⟨n, hn⟩\n    refine' ⟨n, f.coeff n, _⟩\n    ext i\n    by_cases hi : i = n\n    · simp [hi, coeff_monomial]\n    · have : f.coeff i = 0 := by\n        rw [← not_mem_support_iff]\n        exact fun hi' => hi (Finset.mem_singleton.1 (hn hi'))\n      simp [this, ne.symm hi, coeff_monomial]\n  · rintro ⟨n, a, rfl⟩\n    rw [← Finset.card_singleton n]\n    apply Finset.card_le_of_subset\n    exact support_monomial' _ _\n#align card_support_le_one_iff_monomial card_support_le_one_iff_monomial\n\n"}