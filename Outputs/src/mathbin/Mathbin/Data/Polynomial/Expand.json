{"of_irreducible_expand_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_irreducible_expand_pow {p : ℕ} (hp : p ≠ 0) {f : polynomial R} {n : ℕ} :\n    Irreducible (expand R (p ^ n) f) → Irreducible f :=\n  nat.rec_on n (fun hf => by rwa [pow_zero, expand_one] at hf) fun n ih hf =>\n    ih <|\n      of_irreducible_expand hp <| by\n        rw [pow_succ] at hf\n        rwa [expand_expand]\n#align of_irreducible_expand_pow of_irreducible_expand_pow\n\n",
 "of_irreducible_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_irreducible_expand {p : ℕ} (hp : p ≠ 0) {f : polynomial R} (hf : Irreducible (expand R p f)) :\n    Irreducible f :=\n  let _ := is_local_ring_hom_expand R hp.bot_lt\n  of_irreducible_map (↑(expand R p)) hf\n#align of_irreducible_expand of_irreducible_expand\n\n",
 "nat_degree_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem nat_degree_expand (p : ℕ) (f : polynomial R) : (expand R p f).nat_degree = f.nat_degree * p :=\n  by\n  cases' p.eq_zero_or_pos with hp hp\n  · rw [hp, coe_expand, pow_zero, mul_zero, ← C_1, eval₂_hom, nat_degree_C]\n  by_cases hf : f = 0\n  · rw [hf, alg_hom.map_zero, nat_degree_zero, zero_mul]\n  have hf1 : expand R p f ≠ 0 := mt (expand_eq_zero hp).1 hf\n  rw [← WithBot.coe_eq_coe, ← degree_eq_nat_degree hf1]\n  refine' le_antisymm ((degree_le_iff_coeff_zero _ _).2 fun n hn => _) _\n  · rw [coeff_expand hp]\n    split_ifs with hpn\n    · rw [coeff_eq_zero_of_nat_degree_lt]\n      contrapose! hn\n      rw [WithBot.coe_le_coe, ← Nat.div_mul_cancel hpn]\n      exact nat.mul_le_mul_right p hn\n    · rfl\n  · refine' le_degree_of_ne_zero _\n    rw [coeff_expand_mul hp, ← leading_coeff]\n    exact mt leading_coeff_eq_zero.1 hf\n#align nat_degree_expand nat_degree_expand\n\n",
 "map_expand_pow_char":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_expand_pow_char (f : polynomial R) (n : ℕ) : map (frobenius R p ^ n) (expand R (p ^ n) f) = f ^ p ^ n :=\n  by\n  induction n\n  · simp [RingHom.one_def]\n  symm\n  rw [pow_succ', pow_mul, ← n_ih, ← expand_char, pow_succ, RingHom.mul_def, ← map_map, mul_comm, expand_mul, ←\n    map_expand]\n#align map_expand_pow_char map_expand_pow_char\n\n",
 "map_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_expand {p : ℕ} {f : «expr →+* » R S} {q : polynomial R} : map f (expand R p q) = expand S p (map f q) :=\n  by\n  by_cases hp : p = 0\n  · simp [hp]\n  ext\n  rw [coeff_map, coeff_expand (nat.pos_of_ne_zero hp), coeff_expand (nat.pos_of_ne_zero hp)]\n  split_ifs <;> simp\n#align map_expand map_expand\n\n",
 "is_local_ring_hom_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem is_local_ring_hom_expand {p : ℕ} (hp : 0 < p) :\n    is_local_ring_hom (↑(expand R p) : «expr →+* » (polynomial R) (polynomial R)) :=\n  by\n  refine' ⟨fun f hf1 => _⟩; rw [← coe_fn_coe_base] at hf1\n  have hf2 := eq_C_of_degree_eq_zero (degree_eq_zero_of_is_unit hf1)\n  rw [coeff_expand hp, if_pos (dvd_zero _), p.zero_div] at hf2\n  rw [hf2, is_unit_C] at hf1; rw [expand_eq_C hp] at hf2; rwa [hf2, is_unit_C]\n#align is_local_ring_hom_expand is_local_ring_hom_expand\n\n",
 "expand_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem expand_zero (f : polynomial R) : expand R 0 f = C (eval 1 f) := by simp [expand]\n#align expand_zero expand_zero\n\n",
 "expand_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem expand_pow (f : polynomial R) : expand R (p ^ q) f = («expr ^[ ]» (expand R p) q) f :=\n  nat.rec_on q (by rw [pow_zero, expand_one, function.iterate_zero, id]) fun n ih => by\n    rw [function.iterate_succ_apply', pow_succ, expand_mul, ih]\n#align expand_pow expand_pow\n\n",
 "expand_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem expand_one (f : polynomial R) : expand R 1 f = f :=\n  polynomial.induction_on f (fun r => by rw [expand_C]) (fun f g ihf ihg => by rw [alg_hom.map_add, ihf, ihg])\n    fun n r ih => by rw [alg_hom.map_mul, expand_C, alg_hom.map_pow, expand_X, pow_one]\n#align expand_one expand_one\n\n",
 "expand_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_ne_zero {p : ℕ} (hp : 0 < p) {f : polynomial R} : expand R p f ≠ 0 ↔ f ≠ 0 :=\n  (expand_eq_zero hp).not\n#align expand_ne_zero expand_ne_zero\n\n",
 "expand_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_mul (f : polynomial R) : expand R (p * q) f = expand R p (expand R q f) :=\n  (expand_expand p q f).symm\n#align expand_mul expand_mul\n\n",
 "expand_monomial":
 "@[simp]\ntheorem expand_monomial (r : R) : expand R p (monomial q r) = monomial (q * p) r := by\n  simp_rw [← smul_X_eq_monomial, alg_hom.map_smul, alg_hom.map_pow, expand_X, mul_comm, pow_mul]\n#align expand_monomial expand_monomial\n\n",
 "expand_injective":
 "/-- Expansion is injective. -/\ntheorem expand_injective {n : ℕ} (hn : 0 < n) : function.injective (expand R n) := fun g g' H =>\n  ext fun k => by rw [← coeff_expand_mul hn, H, coeff_expand_mul hn]\n#align expand_injective expand_injective\n\n",
 "expand_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_inj {p : ℕ} (hp : 0 < p) {f g : polynomial R} : expand R p f = expand R p g ↔ f = g :=\n  (expand_injective hp).eq_iff\n#align expand_inj expand_inj\n\n",
 "expand_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_expand (f : polynomial R) : expand R p (expand R q f) = expand R (p * q) f :=\n  polynomial.induction_on f (fun r => by simp_rw [expand_C]) (fun f g ihf ihg => by simp_rw [alg_hom.map_add, ihf, ihg])\n    fun n r ih => by simp_rw [alg_hom.map_mul, expand_C, alg_hom.map_pow, expand_X, alg_hom.map_pow, expand_X, pow_mul]\n#align expand_expand expand_expand\n\n",
 "expand_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem expand_eval (p : ℕ) (P : polynomial R) (r : R) : eval r (expand R p P) = eval (r ^ p) P :=\n  by\n  refine' polynomial.induction_on P (fun a => by simp) (fun f g hf hg => _) fun n a h => by simp\n  rw [alg_hom.map_add, eval_add, eval_add, hf, hg]\n#align expand_eval expand_eval\n\n",
 "expand_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_eq_zero {p : ℕ} (hp : 0 < p) {f : polynomial R} : expand R p f = 0 ↔ f = 0 :=\n  (expand_injective hp).eq_iff' (map_zero _)\n#align expand_eq_zero expand_eq_zero\n\n",
 "expand_eq_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_eq_sum {f : polynomial R} : expand R p f = f.sum fun e a => C a * (X ^ p) ^ e :=\n  by\n  dsimp [expand, eval₂]\n  rfl\n#align expand_eq_sum expand_eq_sum\n\n",
 "expand_eq_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_eq_C {p : ℕ} (hp : 0 < p) {f : polynomial R} {r : R} : expand R p f = C r ↔ f = C r := by\n  rw [← expand_C, expand_inj hp, expand_C]\n#align expand_eq_C expand_eq_C\n\n",
 "expand_contract":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_contract [no_zero_divisors R] {f : polynomial R} (hf : f.derivative = 0) (hp : p ≠ 0) :\n    expand R p (contract p f) = f := by\n  ext n\n  rw [coeff_expand hp.bot_lt, coeff_contract hp]\n  split_ifs with h\n  · rw [Nat.div_mul_cancel h]\n  · cases n\n    · exact absurd (dvd_zero p) h\n    have := coeff_derivative f n\n    rw [hf, coeff_zero, zero_eq_mul] at this\n    cases this\n    · rw [this]\n    rw [← Nat.cast_succ, char_p.cast_eq_zero_iff R p] at this\n    exact absurd this h\n#align expand_contract expand_contract\n\n",
 "expand_char":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem expand_char (f : polynomial R) : map (frobenius R p) (expand R p f) = f ^ p :=\n  by\n  refine' f.induction_on' (fun a b ha hb => _) fun n a => _\n  · rw [alg_hom.map_add, polynomial.map_add, ha, hb, add_pow_char]\n  · rw [expand_monomial, map_monomial, ← C_mul_X_pow_eq_monomial, ← C_mul_X_pow_eq_monomial, mul_pow, ← C.map_pow,\n      frobenius_def]\n    ring\n#align expand_char expand_char\n\n",
 "expand_aeval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem expand_aeval {A : Type _} [Semiring A] [algebra R A] (p : ℕ) (P : polynomial R) (r : A) :\n    aeval r (expand R p P) = aeval (r ^ p) P :=\n  by\n  refine' polynomial.induction_on P (fun a => by simp) (fun f g hf hg => _) fun n a h => by simp\n  rw [alg_hom.map_add, aeval_add, aeval_add, hf, hg]\n#align expand_aeval expand_aeval\n\n",
 "expand_X":
 "@[simp]\ntheorem expand_X : expand R p X = X ^ p :=\n  eval₂_X _ _\n#align expand_X expand_X\n\n",
 "expand_C":
 "@[simp]\ntheorem expand_C (r : R) : expand R p (C r) = C r :=\n  eval₂_C _ _\n#align expand_C expand_C\n\n",
 "expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem monic.expand {p : ℕ} {f : polynomial R} (hp : 0 < p) (h : f.monic) : (expand R p f).monic :=\n  by\n  rw [monic.def, leading_coeff, nat_degree_expand, coeff_expand hp]\n  simp [hp, h]\n#align monic.expand monic.expand\n\n",
 "derivative_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem derivative_expand (f : polynomial R) :\n    (expand R p f).derivative = expand R p f.derivative * (p * X ^ (p - 1)) := by\n  rw [coe_expand, derivative_eval₂_C, derivative_pow, C_eq_nat_cast, derivative_X, mul_one]\n#align derivative_expand derivative_expand\n\n",
 "contract_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem contract_expand {f : polynomial R} (hp : p ≠ 0) : contract p (expand R p f) = f :=\n  by\n  ext\n  simp [coeff_contract hp, coeff_expand hp.bot_lt, nat.mul_div_cancel _ hp.bot_lt]\n#align contract_expand contract_expand\n\n",
 "coeff_expand_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_expand_mul' {p : ℕ} (hp : 0 < p) (f : polynomial R) (n : ℕ) : (expand R p f).coeff (p * n) = f.coeff n :=\n  by rw [mul_comm, coeff_expand_mul hp]\n#align coeff_expand_mul' coeff_expand_mul'\n\n",
 "coeff_expand_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coeff_expand_mul {p : ℕ} (hp : 0 < p) (f : polynomial R) (n : ℕ) : (expand R p f).coeff (n * p) = f.coeff n :=\n  by rw [coeff_expand hp, if_pos (dvd_mul_left _ _), nat.mul_div_cancel _ hp]\n#align coeff_expand_mul coeff_expand_mul\n\n",
 "coeff_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_expand {p : ℕ} (hp : 0 < p) (f : polynomial R) (n : ℕ) :\n    (expand R p f).coeff n = if p ∣ n then f.coeff (n / p) else 0 :=\n  by\n  simp only [expand_eq_sum]\n  simp_rw [coeff_sum, ← pow_mul, C_mul_X_pow_eq_monomial, coeff_monomial, sum]\n  split_ifs with h\n  · rw [finset.sum_eq_single (n / p), Nat.mul_div_cancel' h, if_pos rfl]\n    · intro b hb1 hb2\n      rw [if_neg]\n      intro hb3\n      apply hb2\n      rw [← hb3, nat.mul_div_cancel_left b hp]\n    · intro hn\n      rw [not_mem_support_iff.1 hn]\n      split_ifs <;> rfl\n  · rw [finset.sum_eq_zero]\n    intro k hk\n    rw [if_neg]\n    exact fun hkn => h ⟨k, hkn.symm⟩\n#align coeff_expand coeff_expand\n\n",
 "coeff_contract":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coeff_contract {p : ℕ} (hp : p ≠ 0) (f : polynomial R) (n : ℕ) : (contract p f).coeff n = f.coeff (n * p) :=\n  by\n  simp only [contract, coeff_monomial, sum_ite_eq', finset_sum_coeff, mem_range, not_lt, ite_eq_left_iff]\n  intro hn\n  apply (coeff_eq_zero_of_nat_degree_lt _).symm\n  calc\n    f.nat_degree < f.nat_degree + 1 := nat.lt_succ_self _\n    _ ≤ n * 1 := by simpa only [mul_one] using hn\n    _ ≤ n * p := mul_le_mul_of_nonneg_left (show 1 ≤ p from hp.bot_lt) (zero_le n)\n    \n#align coeff_contract coeff_contract\n\n",
 "coe_expand":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\ntheorem coe_expand : (expand R p : polynomial R → polynomial R) = eval₂ C (X ^ p) :=\n  rfl\n#align coe_expand coe_expand\n\n"}