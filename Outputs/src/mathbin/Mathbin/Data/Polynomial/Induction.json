{"span_le_of_C_coeff_mem":
 "/-- If the coefficients of a polynomial belong to an ideal, then that ideal contains\nthe ideal spanned by the coefficients of the polynomial. -/\ntheorem span_le_of_C_coeff_mem (cf : ∀ i : ℕ, C (f.coeff i) ∈ I) : ideal.span { g | ∃ i, g = C (f.coeff i) } ≤ I :=\n  by\n  simp (config := { singlePass := true }) only [@eq_comm _ _ (C _)]\n  exact (ideal.span_le.trans range_subset_iff).mpr cf\n#align span_le_of_C_coeff_mem span_le_of_C_coeff_mem\n\n",
 "mem_span_C_coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mem_span_C_coeff : f ∈ ideal.span { g : polynomial R | ∃ i : ℕ, g = C (coeff f i) } :=\n  by\n  let p := ideal.span { g : polynomial R | ∃ i : ℕ, g = C (coeff f i) }\n  nth_rw 1 [(sum_C_mul_X_pow_eq f).symm]\n  refine' submodule.sum_mem _ fun n hn => _\n  dsimp\n  have : C (coeff f n) ∈ p := by\n    apply subset_span\n    simp\n  have : «expr • » (monomial n (1 : R)) (C (coeff f n)) ∈ p := p.smul_mem _ this\n  convert this using 1\n  simp only [monomial_mul_C, one_mul, smul_eq_mul]\n  rw [← C_mul_X_pow_eq_monomial]\n#align mem_span_C_coeff mem_span_C_coeff\n\n",
 "induction_on'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- To prove something about polynomials,\nit suffices to show the condition is closed under taking sums,\nand it holds for monomials.\n-/\n@[elab_as_elim]\nprotected theorem induction_on' {M : polynomial R → Prop} (p : polynomial R) (h_add : ∀ p q, M p → M q → M (p + q))\n    (h_monomial : ∀ (n : ℕ) (a : R), M (monomial n a)) : M p :=\n  polynomial.induction_on p (h_monomial 0) h_add fun n a h =>\n    by\n    rw [C_mul_X_pow_eq_monomial]\n    exact h_monomial _ _\n#align induction_on' induction_on'\n\n",
 "induction_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Johannes Hölzl, Scott Morrison, Jens Wagemaker\n-/\n@[elab_as_elim]\nprotected theorem induction_on {M : polynomial R → Prop} (p : polynomial R) (h_C : ∀ a, M (C a))\n    (h_add : ∀ p q, M p → M q → M (p + q)) (h_monomial : ∀ (n : ℕ) (a : R), M (C a * X ^ n) → M (C a * X ^ (n + 1))) :\n    M p :=\n  by\n  have A : ∀ {n : ℕ} {a}, M (C a * X ^ n) := by\n    intro n a\n    induction' n with n ih\n    · simp only [pow_zero, mul_one, h_C]\n    · exact h_monomial _ _ ih\n  have B : ∀ s : Finset ℕ, M (s.sum fun n : ℕ => C (p.coeff n) * X ^ n) :=\n    by\n    apply Finset.induction\n    · convert h_C 0\n      exact C_0.symm\n    · intro n s ns ih\n      rw [sum_insert ns]\n      exact h_add _ _ A ih\n  rw [← sum_C_mul_X_pow_eq p, polynomial.sum]\n  exact B _\n#align induction_on induction_on\n\n",
 "exists_C_coeff_not_mem":
 "theorem exists_C_coeff_not_mem : f ∉ I → ∃ i : ℕ, C (coeff f i) ∉ I :=\n  not.imp_symm fun cf => span_le_of_C_coeff_mem (not_exists_not.mp cf) mem_span_C_coeff\n#align exists_C_coeff_not_mem exists_C_coeff_not_mem\n\n"}