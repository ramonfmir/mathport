{"zneg_zneg":
 "theorem zneg_zneg (n : ZNum) : - -n = n := by cases n <;> rfl\n#align zneg_zneg zneg_zneg\n\n",
 "zneg_to_znum_neg":
 "theorem zneg_to_znum_neg (n : Num) : -n.to_znum_neg = n.to_znum := by cases n <;> rfl\n#align zneg_to_znum_neg zneg_to_znum_neg\n\n",
 "zneg_to_znum":
 "theorem zneg_to_znum (n : Num) : -n.to_znum = n.to_znum_neg := by cases n <;> rfl\n#align zneg_to_znum zneg_to_znum\n\n",
 "zneg_succ":
 "theorem zneg_succ (n : ZNum) : -n.succ = (-n).pred := by cases n <;> try rfl <;> rw [succ, Num.zneg_toZNumNeg] <;> rfl\n#align zneg_succ zneg_succ\n\n",
 "zneg_pred":
 "theorem zneg_pred (n : ZNum) : -n.pred = (-n).succ := by rw [← zneg_zneg (succ (-n)), zneg_succ, zneg_zneg]\n#align zneg_pred zneg_pred\n\n",
 "zneg_pos":
 "theorem zneg_pos (n : PosNum) : -pos n = neg n :=\n  rfl\n#align zneg_pos zneg_pos\n\n",
 "zneg_neg":
 "theorem zneg_neg (n : PosNum) : -neg n = pos n :=\n  rfl\n#align zneg_neg zneg_neg\n\n",
 "zneg_bitm1":
 "theorem zneg_bitm1 (n : ZNum) : -n.bitm1 = (-n).bit1 := by cases n <;> rfl\n#align zneg_bitm1 zneg_bitm1\n\n",
 "zneg_bit1":
 "theorem zneg_bit1 (n : ZNum) : -n.bit1 = (-n).bitm1 := by cases n <;> rfl\n#align zneg_bit1 zneg_bit1\n\n",
 "zero_add":
 "#print zero_add /-\ntheorem zero_add (n : ZNum) : 0 + n = n := by cases n <;> rfl\n#align zero_add zero_add\n-/\n\n",
 "to_znum_succ":
 "theorem to_znum_succ : ∀ n : Num, n.succ.to_znum = n.to_znum.succ\n  | 0 => rfl\n  | pos n => rfl\n#align to_znum_succ to_znum_succ\n\n",
 "to_znum_neg_succ":
 "theorem to_znum_neg_succ : ∀ n : Num, n.succ.to_znum_neg = n.to_znum_neg.pred\n  | 0 => rfl\n  | pos n => rfl\n#align to_znum_neg_succ to_znum_neg_succ\n\n",
 "to_znum_inj":
 "theorem to_znum_inj {m n : Num} : m.to_znum = n.to_znum ↔ m = n :=\n  ⟨fun h => by cases m <;> cases n <;> cases h <;> rfl, congr_arg _⟩\n#align to_znum_inj to_znum_inj\n\n",
 "to_of_nat":
 "theorem to_of_nat : ∀ n : ℕ, ((n : Num) : ℕ) = n\n  | 0 => by rw [Nat.cast_zero, cast_zero]\n  | n + 1 => by rw [Nat.cast_succ, add_one, succ_to_nat, to_of_nat]\n#align to_of_nat to_of_nat\n\n",
 "to_of_int":
 "theorem to_of_int (n : ℤ) : ((n : ZNum) : ℤ) = n :=\n  Int.inductionOn' n 0 (by simp) (by simp) (by simp)\n#align to_of_int to_of_int\n\n",
 "to_nat_to_int":
 "@[simp, norm_cast]\ntheorem to_nat_to_int (n : Num) : ((n : ℕ) : ℤ) = n :=\n  cast_to_nat _\n#align to_nat_to_int to_nat_to_int\n\n",
 "to_nat_pos":
 "theorem to_nat_pos : ∀ n : PosNum, 0 < (n : ℕ)\n  | 1 => zero_lt_one\n  | bit0 p =>\n    let h := to_nat_pos p\n    add_pos h h\n  | bit1 p => nat.succ_pos _\n#align to_nat_pos to_nat_pos\n\n",
 "to_nat_inj":
 "@[norm_cast]\ntheorem to_nat_inj {m n : PosNum} : (m : ℕ) = n ↔ m = n :=\n  ⟨fun h => num.pos.inj <| by rw [← PosNum.of_to_nat, ← PosNum.of_to_nat, h], congr_arg _⟩\n#align to_nat_inj to_nat_inj\n\n",
 "to_nat_eq_succ_pred":
 "theorem to_nat_eq_succ_pred (n : PosNum) : (n : ℕ) = n.pred' + 1 := by rw [← Num.succ'_to_nat, n.succ'_pred']\n#align to_nat_eq_succ_pred to_nat_eq_succ_pred\n\n",
 "to_int_inj":
 "theorem to_int_inj {m n : ZNum} : (m : ℤ) = n ↔ m = n :=\n  ⟨fun h => function.left_inverse.injective of_to_int' h, congr_arg _⟩\n#align to_int_inj to_int_inj\n\n",
 "to_int_eq_succ_pred":
 "theorem to_int_eq_succ_pred (n : PosNum) : (n : ℤ) = (n.pred' : ℕ) + 1 := by\n  rw [← n.to_nat_to_int, to_nat_eq_succ_pred] <;> rfl\n#align to_int_eq_succ_pred to_int_eq_succ_pred\n\n",
 "test_bit_to_nat":
 "@[simp]\ntheorem test_bit_to_nat (m n) : testBit m n = Nat.testBit m n :=\n  by\n  cases' m with m <;> unfold test_bit Nat.testBit\n  · change (zero : Nat) with 0\n    rw [Nat.zero_shiftr]\n    rfl\n  induction' n with n IH generalizing m <;> cases m <;> dsimp only [PosNum.testBit]\n  · rfl\n  · exact (Nat.bodd_bit _ _).symm\n  · exact (Nat.bodd_bit _ _).symm\n  · change ff = Nat.bodd (Nat.shiftr 1 (n + 1))\n    rw [add_comm, Nat.shiftr_add]\n    change Nat.shiftr 1 1 with 0\n    rw [Nat.zero_shiftr] <;> rfl\n  · change PosNum.testBit m n = Nat.bodd (Nat.shiftr (Nat.bit tt m) (n + 1))\n    rw [add_comm, Nat.shiftr_add]\n    unfold Nat.shiftr\n    rw [Nat.div2_bit]\n    apply IH\n  · change PosNum.testBit m n = Nat.bodd (Nat.shiftr (Nat.bit ff m) (n + 1))\n    rw [add_comm, Nat.shiftr_add]\n    unfold Nat.shiftr\n    rw [Nat.div2_bit]\n    apply IH\n#align test_bit_to_nat test_bit_to_nat\n\n",
 "succ_to_nat":
 "theorem succ_to_nat (n) : (succ n : ℕ) = n + 1 :=\n  succ'_to_nat n\n#align succ_to_nat succ_to_nat\n\n",
 "succ_of_int'":
 "theorem succ_of_int' : ∀ n, ZNum.ofInt' (n + 1) = ZNum.ofInt' n + 1\n  | (n : ℕ) => by erw [ZNum.ofInt', ZNum.ofInt', Num.ofNat'_succ, Num.add_one, to_znum_succ, ZNum.add_one]\n  | -[0+1] => by erw [ZNum.ofInt', ZNum.ofInt', of_nat'_succ, of_nat'_zero] <;> rfl\n  | -[n + 1+1] => by\n    erw [ZNum.ofInt', ZNum.ofInt', @Num.ofNat'_succ (n + 1), Num.add_one, to_znum_neg_succ, @of_nat'_succ n,\n      Num.add_one, ZNum.add_one, pred_succ]\n#align succ_of_int' succ_of_int'\n\n",
 "succ'_to_nat":
 "theorem succ'_to_nat : ∀ n, (succ' n : ℕ) = n + 1\n  | 0 => (zero_add _).symm\n  | pos p => PosNum.succ_to_nat _\n#align succ'_to_nat succ'_to_nat\n\n",
 "succ'_pred'":
 "@[simp]\ntheorem succ'_pred' (n) : succ' (pred' n) = n :=\n  to_nat_inj.1 <| by rw [succ'_to_nat, pred'_to_nat, nat.add_one, nat.succ_pred_eq_of_pos (to_nat_pos _)]\n#align succ'_pred' succ'_pred'\n\n",
 "sub_to_nat":
 "@[simp, norm_cast]\ntheorem sub_to_nat (m n) : ((m - n : Num) : ℕ) = m - n :=\n  show (ofZNum _ : ℕ) = _ by rw [of_znum_to_nat, cast_sub', ← to_nat_to_int, ← to_nat_to_int, Int.toNat_sub]\n#align sub_to_nat sub_to_nat\n\n",
 "sub'_one":
 "theorem sub'_one (a : PosNum) : sub' a 1 = (pred' a).to_znum := by cases a <;> rfl\n#align sub'_one sub'_one\n\n",
 "size_to_nat":
 "theorem size_to_nat : ∀ n, (size n : ℕ) = Nat.size n\n  | 0 => Nat.size_zero.symm\n  | pos p => p.size_to_nat\n#align size_to_nat size_to_nat\n\n",
 "size_eq_nat_size":
 "theorem size_eq_nat_size : ∀ n, (size n : ℕ) = natSize n\n  | 0 => rfl\n  | pos p => p.size_eq_nat_size\n#align size_eq_nat_size size_eq_nat_size\n\n",
 "shiftr_to_nat":
 "@[simp, norm_cast]\ntheorem shiftr_to_nat (m n) : (shiftr m n : ℕ) = Nat.shiftr m n :=\n  by\n  cases' m with m <;> dsimp only [shiftr];\n  · symm\n    apply Nat.zero_shiftr\n  induction' n with n IH generalizing m; · cases m <;> rfl\n  cases' m with m m <;> dsimp only [PosNum.shiftr]\n  · rw [Nat.shiftr_eq_div_pow]\n    symm\n    apply nat.div_eq_of_lt\n    exact @Nat.pow_lt_pow_of_lt_right 2 (by decide) 0 (n + 1) (nat.succ_pos _)\n  · trans\n    apply IH\n    change Nat.shiftr m n = Nat.shiftr (bit1 m) (n + 1)\n    rw [add_comm n 1, Nat.shiftr_add]\n    apply congr_arg fun x => Nat.shiftr x n\n    unfold Nat.shiftr\n    change (bit1 ↑m : ℕ) with Nat.bit tt m\n    rw [Nat.div2_bit]\n  · trans\n    apply IH\n    change Nat.shiftr m n = Nat.shiftr (bit0 m) (n + 1)\n    rw [add_comm n 1, Nat.shiftr_add]\n    apply congr_arg fun x => Nat.shiftr x n\n    unfold Nat.shiftr\n    change (bit0 ↑m : ℕ) with Nat.bit ff m\n    rw [Nat.div2_bit]\n#align shiftr_to_nat shiftr_to_nat\n\n",
 "shiftl_to_nat":
 "@[simp, norm_cast]\ntheorem shiftl_to_nat (m n) : (shiftl m n : ℕ) = Nat.shiftl m n :=\n  by\n  cases m <;> dsimp only [shiftl];\n  · symm\n    apply Nat.zero_shiftl\n  simp; induction' n with n IH; · rfl\n  simp [PosNum.shiftl, Nat.shiftl_succ]; rw [← IH]\n#align shiftl_to_nat shiftl_to_nat\n\n",
 "pred_to_nat":
 "theorem pred_to_nat : ∀ n : Num, (pred n : ℕ) = nat.pred n\n  | 0 => rfl\n  | pos p => by rw [pred, PosNum.pred'_to_nat] <;> rfl\n#align pred_to_nat pred_to_nat\n\n",
 "pred_succ":
 "@[simp]\ntheorem pred_succ : ∀ n : ZNum, n.pred.succ = n\n  | 0 => rfl\n  | znum.neg p => show toZNumNeg (pos p).succ'.pred' = _ by rw [PosNum.pred'_succ'] <;> rfl\n  | ZNum.pos p => by rw [ZNum.pred, ← to_znum_succ, Num.succ, PosNum.succ'_pred', to_znum]\n#align pred_succ pred_succ\n\n",
 "pred'_to_nat":
 "theorem pred'_to_nat : ∀ n, (pred' n : ℕ) = nat.pred n\n  | 1 => rfl\n  | bit0 n =>\n    have : nat.succ ↑(pred' n) = ↑n := by rw [pred'_to_nat n, nat.succ_pred_eq_of_pos (to_nat_pos n)]\n    match (motive := ∀ k : Num, nat.succ ↑k = ↑n → ↑(num.cases_on k 1 bit1 : PosNum) = nat.pred (_root_.bit0 n))\n      pred' n, this with\n    | 0, (h : ((1 : Num) : ℕ) = n) => by rw [← to_nat_inj.1 h] <;> rfl\n    | Num.pos p, (h : nat.succ ↑p = n) => by rw [← h] <;> exact (nat.succ_add p p).symm\n  | bit1 n => rfl\n#align pred'_to_nat pred'_to_nat\n\n",
 "pred'_succ'":
 "@[simp]\ntheorem pred'_succ' (n) : pred' (succ' n) = n :=\n  Num.to_nat_inj.1 <| by rw [pred'_to_nat, succ'_to_nat, nat.add_one, nat.pred_succ]\n#align pred'_succ' pred'_succ'\n\n",
 "ppred_to_nat":
 "theorem ppred_to_nat : ∀ n : Num, coe <$> ppred n = Nat.ppred n\n  | 0 => rfl\n  | pos p => by\n    rw [ppred, Option.map_some, Nat.ppred_eq_some.2] <;>\n        rw [PosNum.pred'_to_nat, nat.succ_pred_eq_of_pos (PosNum.to_nat_pos _)] <;>\n      rfl\n#align ppred_to_nat ppred_to_nat\n\n",
 "one_sub'":
 "theorem one_sub' (a : PosNum) : sub' 1 a = (pred' a).to_znum_neg := by cases a <;> rfl\n#align one_sub' one_sub'\n\n",
 "one_le_cast":
 "@[simp]\ntheorem one_le_cast [LinearOrderedSemiring α] (n : PosNum) : (1 : α) ≤ n := by\n  rw [← cast_to_nat, ← Nat.cast_one, Nat.cast_le] <;> apply to_nat_pos\n#align one_le_cast one_le_cast\n\n",
 "one_add":
 "theorem one_add (n : PosNum) : 1 + n = succ n := by cases n <;> rfl\n#align one_add one_add\n\n",
 "of_znum_to_nat":
 "@[simp]\ntheorem of_znum_to_nat : ∀ n : ZNum, (ofZNum n : ℕ) = int.to_nat n\n  | 0 => rfl\n  | ZNum.pos p => show _ = int.to_nat p by rw [← PosNum.to_nat_to_int p] <;> rfl\n  | znum.neg p =>\n    (congr_arg fun x => int.to_nat (-x)) <| show ((p.pred' + 1 : ℕ) : ℤ) = p by rw [← succ'_to_nat] <;> simp\n#align of_znum_to_nat of_znum_to_nat\n\n",
 "of_znum'_to_nat":
 "theorem of_znum'_to_nat : ∀ n : ZNum, coe <$> ofZNum' n = Int.toNat' n\n  | 0 => rfl\n  | ZNum.pos p => show _ = Int.toNat' p by rw [← PosNum.to_nat_to_int p] <;> rfl\n  | znum.neg p =>\n    (congr_arg fun x => Int.toNat' (-x)) <| show ((p.pred' + 1 : ℕ) : ℤ) = p by rw [← succ'_to_nat] <;> simp\n#align of_znum'_to_nat of_znum'_to_nat\n\n",
 "of_to_nat'":
 "@[simp, norm_cast]\ntheorem of_to_nat' : ∀ n : Num, Num.ofNat' (n : ℕ) = n\n  | 0 => ofNat'_zero\n  | pos p => p.of_to_nat'\n#align of_to_nat' of_to_nat'\n\n",
 "of_to_nat":
 "@[simp, norm_cast]\ntheorem of_to_nat : ∀ n : PosNum, ((n : ℕ) : Num) = Num.pos n :=\n  of_to_nat'\n#align of_to_nat of_to_nat\n\n",
 "of_to_int'":
 "theorem of_to_int' : ∀ n : ZNum, ZNum.ofInt' n = n\n  | 0 => by erw [of_int', Num.ofNat'_zero, Num.toZNum]\n  | pos a => by rw [cast_pos, ← PosNum.cast_to_nat, ← Num.ofInt'_toZNum, PosNum.of_to_nat] <;> rfl\n  | neg a => by rw [cast_neg, of_int'_neg, ← PosNum.cast_to_nat, ← Num.ofInt'_toZNum, PosNum.of_to_nat] <;> rfl\n#align of_to_int' of_to_int'\n\n",
 "of_to_int":
 "@[simp, norm_cast]\ntheorem of_to_int (n : ZNum) : ((n : ℤ) : ZNum) = n := by rw [← of_int'_eq, of_to_int']\n#align of_to_int of_to_int\n\n",
 "of_nat_to_znum_neg":
 "@[simp]\ntheorem of_nat_to_znum_neg (n : ℕ) : Num.toZNumNeg n = -n := by rw [← of_nat_to_znum, Num.zneg_toZNum]\n#align of_nat_to_znum_neg of_nat_to_znum_neg\n\n",
 "of_nat_to_znum":
 "@[simp]\ntheorem of_nat_to_znum (n : ℕ) : Num.toZNum n = n :=\n  rfl\n#align of_nat_to_znum of_nat_to_znum\n\n",
 "of_nat_inj":
 "@[simp, norm_cast]\ntheorem of_nat_inj {m n : ℕ} : (m : Num) = n ↔ m = n :=\n  ⟨fun h => function.left_inverse.injective to_of_nat h, congr_arg _⟩\n#align of_nat_inj of_nat_inj\n\n",
 "of_nat_cast":
 "@[simp, norm_cast]\ntheorem of_nat_cast [AddGroupWithOne α] (n : ℕ) : ((n : ZNum) : α) = n := by\n  rw [← Int.cast_ofNat, of_int_cast, Int.cast_ofNat]\n#align of_nat_cast of_nat_cast\n\n",
 "of_nat'_zero":
 "@[simp]\ntheorem of_nat'_zero : Num.ofNat' 0 = 0 := by simp [Num.ofNat']\n#align of_nat'_zero of_nat'_zero\n\n",
 "of_nat'_succ":
 "theorem of_nat'_succ : ∀ {n}, ofNat' (n + 1) = ofNat' n + 1 :=\n  Nat.binaryRec (by simp <;> rfl) fun b n ih => by\n    cases b\n    · erw [of_nat'_bit tt n, of_nat'_bit]\n      simp only [← bit1_of_bit1, ← bit0_of_bit0, cond, _root_.bit1]\n    · erw [show n.bit tt + 1 = (n + 1).bit ff by simp [Nat.bit, _root_.bit1, _root_.bit0] <;> cc, of_nat'_bit,\n        of_nat'_bit, ih]\n      simp only [cond, add_one, bit1_succ]\n#align of_nat'_succ of_nat'_succ\n\n",
 "of_nat'_one":
 "@[simp]\ntheorem of_nat'_one : Num.ofNat' 1 = 1 := by erw [of_nat'_bit tt 0, cond, of_nat'_zero] <;> rfl\n#align of_nat'_one of_nat'_one\n\n",
 "of_nat'_eq":
 "@[simp]\ntheorem of_nat'_eq : ∀ n, Num.ofNat' n = n :=\n  Nat.binaryRec (by simp) fun b n IH => by\n    rw [of_nat'] at IH⊢\n    rw [Nat.binaryRec_eq, IH]\n    · cases b <;> simp [Nat.bit, bit0_of_bit0, bit1_of_bit1]\n    · rfl\n#align of_nat'_eq of_nat'_eq\n\n",
 "of_nat'_bit":
 "theorem of_nat'_bit (b n) : ofNat' (Nat.bit b n) = cond b Num.bit1 Num.bit0 (ofNat' n) :=\n  Nat.binaryRec_eq rfl _ _\n#align of_nat'_bit of_nat'_bit\n\n",
 "of_int_cast":
 "@[simp, norm_cast]\ntheorem of_int_cast [AddGroupWithOne α] (n : ℤ) : ((n : ZNum) : α) = n := by rw [← cast_to_int, to_of_int]\n#align of_int_cast of_int_cast\n\n",
 "of_int'_to_znum":
 "theorem of_int'_to_znum : ∀ n : ℕ, toZNum n = ZNum.ofInt' n\n  | 0 => rfl\n  | n + 1 => by\n    rw [Nat.cast_succ, Num.add_one, to_znum_succ, of_int'_to_znum, Nat.cast_succ, succ_of_int', ZNum.add_one]\n#align of_int'_to_znum of_int'_to_znum\n\n",
 "of_int'_neg":
 "theorem of_int'_neg : ∀ n : ℤ, ofInt' (-n) = -ofInt' n\n  | -[n+1] => show ofInt' (n + 1 : ℕ) = _ by simp only [of_int', Num.zneg_toZNumNeg]\n  | 0 => show Num.toZNum _ = -Num.toZNum _ by rw [Num.ofNat'_zero] <;> rfl\n  | (n + 1 : ℕ) => show Num.toZNumNeg _ = -Num.toZNum _ by rw [Num.zneg_toZNum] <;> rfl\n#align of_int'_neg of_int'_neg\n\n",
 "of_int'_eq":
 "@[simp]\ntheorem of_int'_eq : ∀ n : ℤ, ZNum.ofInt' n = n\n  | (n : ℕ) => rfl\n  | -[n+1] => by\n    show Num.toZNumNeg (n + 1 : ℕ) = -(n + 1 : ℕ)\n    rw [← neg_inj, neg_neg, Nat.cast_succ, Num.add_one, Num.zneg_toZNumNeg, Num.toZNum_succ, Nat.cast_succ,\n      ZNum.add_one]\n    rfl\n#align of_int'_eq of_int'_eq\n\n",
 "neg_zero":
 "#print neg_zero /-\ntheorem neg_zero : (-0 : ZNum) = 0 :=\n  rfl\n#align neg_zero neg_zero\n-/\n\n",
 "neg_of_int":
 "@[simp, norm_cast]\ntheorem neg_of_int : ∀ n, ((-n : ℤ) : ZNum) = -n\n  | (n + 1 : ℕ) => rfl\n  | 0 => by rw [Int.cast_neg, Int.cast_zero]\n  | -[n+1] => (zneg_zneg _).symm\n#align neg_of_int neg_of_int\n\n",
 "nat_size_to_nat":
 "theorem nat_size_to_nat (n) : natSize n = Nat.size n := by rw [← size_eq_nat_size, size_to_nat]\n#align nat_size_to_nat nat_size_to_nat\n\n",
 "nat_size_pos":
 "theorem nat_size_pos (n) : 0 < natSize n := by cases n <;> apply nat.succ_pos\n#align nat_size_pos nat_size_pos\n\n",
 "mul_to_nat":
 "@[norm_cast]\ntheorem mul_to_nat : ∀ m n, ((m * n : Num) : ℕ) = m * n\n  | 0, 0 => rfl\n  | 0, pos q => (MulZeroClass.zero_mul _).symm\n  | pos p, 0 => rfl\n  | pos p, pos q => PosNum.mul_to_nat _ _\n#align mul_to_nat mul_to_nat\n\n",
 "mul_to_int":
 "@[simp, norm_cast]\ntheorem mul_to_int : ∀ m n, ((m * n : ZNum) : ℤ) = m * n\n  | 0, a => by cases a <;> exact (_root_.zero_mul _).symm\n  | b, 0 => by cases b <;> exact (_root_.mul_zero _).symm\n  | pos a, pos b => PosNum.cast_mul a b\n  | pos a, neg b => show -↑(a * b) = ↑a * -↑b by rw [PosNum.cast_mul, neg_mul_eq_mul_neg]\n  | neg a, pos b => show -↑(a * b) = -↑a * ↑b by rw [PosNum.cast_mul, neg_mul_eq_neg_mul]\n  | neg a, neg b => show ↑(a * b) = -↑a * -↑b by rw [PosNum.cast_mul, neg_mul_neg]\n#align mul_to_int mul_to_int\n\n",
 "mod_zero":
 "@[simp]\nprotected theorem mod_zero (n : Num) : n % 0 = n :=\n  show n.mod 0 = n by\n    cases n\n    rfl\n    simp [Num.mod]\n#align mod_zero mod_zero\n\n",
 "mod_to_nat":
 "@[simp, norm_cast]\ntheorem mod_to_nat : ∀ n d, ((n % d : Num) : ℕ) = n % d\n  | 0, 0 => by simp\n  | 0, pos d => (nat.zero_mod _).symm\n  | pos n, 0 => (nat.mod_zero _).symm\n  | pos n, pos d => PosNum.mod'_to_nat _ _\n#align mod_to_nat mod_to_nat\n\n",
 "mod_to_int":
 "@[simp, norm_cast]\ntheorem mod_to_int : ∀ n d, ((n % d : ZNum) : ℤ) = n % d\n  | 0, d => (Int.zero_mod _).symm\n  | pos n, d =>\n    (Num.cast_toZNum _).trans <| by\n      rw [← Num.to_nat_to_int, cast_pos, Num.mod_to_nat, ← PosNum.to_nat_to_int, abs_to_nat] <;> rfl\n  | neg n, d =>\n    (Num.cast_sub' _ _).trans <| by\n      rw [← Num.to_nat_to_int, cast_neg, ← Num.to_nat_to_int, Num.succ_to_nat, Num.mod_to_nat, abs_to_nat, ←\n          Int.subNatNat_eq_coe, n.to_int_eq_succ_pred] <;>\n        rfl\n#align mod_to_int mod_to_int\n\n",
 "mod'_to_nat":
 "@[simp]\ntheorem mod'_to_nat (n d) : (mod' n d : ℕ) = n % d :=\n  (divMod_to_nat _ _).2.symm\n#align mod'_to_nat mod'_to_nat\n\n",
 "mem_of_znum'":
 "theorem mem_of_znum' : ∀ {m : Num} {n : ZNum}, m ∈ ofZNum' n ↔ n = toZNum m\n  | 0, 0 => ⟨fun _ => rfl, fun _ => rfl⟩\n  | pos m, 0 => ⟨fun h => by cases h, fun h => by cases h⟩\n  | m, ZNum.pos p => Option.some_inj.trans <| by cases m <;> constructor <;> intro h <;> try cases h <;> rfl\n  | m, znum.neg p => ⟨fun h => by cases h, fun h => by cases m <;> cases h⟩\n#align mem_of_znum' mem_of_znum'\n\n",
 "lxor_to_nat":
 "@[simp, norm_cast]\ntheorem lxor_to_nat : ∀ m n, (lxor m n : ℕ) = Nat.lxor' m n := by\n  apply bitwise_to_nat PosNum.lxor <;> intros <;> try cases a <;> try cases b <;> rfl\n#align lxor_to_nat lxor_to_nat\n\n",
 "lt_to_nat":
 "@[norm_cast]\ntheorem lt_to_nat {m n : Num} : (m : ℕ) < n ↔ m < n :=\n  show (m : ℕ) < n ↔ cmp m n = ordering.lt from\n    match cmp m n, cmp_to_nat m n with\n    | ordering.lt, h => by simp at h <;> simp [h]\n    | ordering.eq, h => by simp at h <;> simp [h, lt_irrefl] <;> exact by decide\n    | ordering.gt, h => by simp [not_lt_of_gt h] <;> exact by decide\n#align lt_to_nat lt_to_nat\n\n",
 "lt_to_int":
 "@[norm_cast]\ntheorem lt_to_int {m n : ZNum} : (m : ℤ) < n ↔ m < n :=\n  show (m : ℤ) < n ↔ cmp m n = ordering.lt from\n    match cmp m n, cmp_to_int m n with\n    | ordering.lt, h => by simp at h <;> simp [h]\n    | ordering.eq, h => by simp at h <;> simp [h, lt_irrefl] <;> exact by decide\n    | ordering.gt, h => by simp [not_lt_of_gt h] <;> exact by decide\n#align lt_to_int lt_to_int\n\n",
 "lt_iff_cmp":
 "theorem lt_iff_cmp {m n} : m < n ↔ cmp m n = ordering.lt :=\n  iff.rfl\n#align lt_iff_cmp lt_iff_cmp\n\n",
 "lor_to_nat":
 "@[simp, norm_cast]\ntheorem lor_to_nat : ∀ m n, (lor m n : ℕ) = Nat.lor' m n := by\n  apply bitwise_to_nat fun x y => pos (PosNum.lor x y) <;> intros <;> try cases a <;> try cases b <;> rfl\n#align lor_to_nat lor_to_nat\n\n",
 "le_to_nat":
 "@[norm_cast]\ntheorem le_to_nat {m n : Num} : (m : ℕ) ≤ n ↔ m ≤ n := by rw [← not_lt] <;> exact not_congr lt_to_nat\n#align le_to_nat le_to_nat\n\n",
 "le_to_int":
 "theorem le_to_int {m n : ZNum} : (m : ℤ) ≤ n ↔ m ≤ n := by rw [← not_lt] <;> exact not_congr lt_to_int\n#align le_to_int le_to_int\n\n",
 "le_iff_cmp":
 "theorem le_iff_cmp {m n} : m ≤ n ↔ cmp m n ≠ ordering.gt :=\n  not_congr <| lt_iff_cmp.trans <| by rw [← cmp_swap] <;> cases cmp m n <;> exact by decide\n#align le_iff_cmp le_iff_cmp\n\n",
 "ldiff_to_nat":
 "@[simp, norm_cast]\ntheorem ldiff_to_nat : ∀ m n, (ldiff m n : ℕ) = Nat.ldiff' m n := by\n  apply bitwise_to_nat PosNum.ldiff <;> intros <;> try cases a <;> try cases b <;> rfl\n#align ldiff_to_nat ldiff_to_nat\n\n",
 "land_to_nat":
 "@[simp, norm_cast]\ntheorem land_to_nat : ∀ m n, (land m n : ℕ) = Nat.land' m n := by\n  apply bitwise_to_nat PosNum.land <;> intros <;> try cases a <;> try cases b <;> rfl\n#align land_to_nat land_to_nat\n\n",
 "gcd_to_nat_aux":
 "theorem gcd_to_nat_aux : ∀ {n} {a b : Num}, a ≤ b → (a * b).nat_size ≤ n → (gcdAux n a b : ℕ) = Nat.gcd a b\n  | 0, 0, b, ab, h => (Nat.gcd_zero_left _).symm\n  | 0, pos a, 0, ab, h => (not_lt_of_ge ab).elim rfl\n  | 0, pos a, pos b, ab, h => (not_lt_of_le h).elim <| PosNum.natSize_pos _\n  | nat.succ n, 0, b, ab, h => (Nat.gcd_zero_left _).symm\n  | nat.succ n, pos a, b, ab, h => by\n    simp [gcd_aux]\n    rw [Nat.gcd_rec, gcd_to_nat_aux, mod_to_nat]; · rfl\n    · rw [← le_to_nat, mod_to_nat]\n      exact le_of_lt (nat.mod_lt _ (PosNum.cast_pos _))\n    rw [nat_size_to_nat, mul_to_nat, Nat.size_le] at h⊢\n    rw [mod_to_nat, mul_comm]\n    rw [pow_succ', ← nat.mod_add_div b (pos a)] at h\n    refine' lt_of_mul_lt_mul_right (lt_of_le_of_lt _ h) (nat.zero_le 2)\n    rw [mul_two, mul_add]\n    refine' add_le_add_left (nat.mul_le_mul_left _ (le_trans (le_of_lt (nat.mod_lt _ (PosNum.cast_pos _))) _)) _\n    suffices : 1 ≤ _; simpa using nat.mul_le_mul_left (pos a) this\n    rw [nat.le_div_iff_mul_le a.cast_pos, one_mul]\n    exact le_to_nat.2 ab\n#align gcd_to_nat_aux gcd_to_nat_aux\n\n",
 "gcd_to_nat":
 "@[simp]\ntheorem gcd_to_nat (a b) : (gcd a b : ℕ) = int.gcd a b :=\n  (Num.gcd_to_nat _ _).trans <| by simpa\n#align gcd_to_nat gcd_to_nat\n\n",
 "dvd_to_nat":
 "@[norm_cast]\ntheorem dvd_to_nat {m n : PosNum} : (m : ℕ) ∣ n ↔ m ∣ n :=\n  Num.dvd_to_nat (pos m) (pos n)\n#align dvd_to_nat dvd_to_nat\n\n",
 "dvd_to_int":
 "@[simp, norm_cast]\ntheorem dvd_to_int (m n : ZNum) : (m : ℤ) ∣ n ↔ m ∣ n :=\n  ⟨fun ⟨k, e⟩ => ⟨k, by rw [← of_to_int n, e] <;> simp⟩, fun ⟨k, e⟩ => ⟨k, by simp [e]⟩⟩\n#align dvd_to_int dvd_to_int\n\n",
 "dvd_iff_mod_eq_zero":
 "theorem dvd_iff_mod_eq_zero {m n : ZNum} : m ∣ n ↔ n % m = 0 := by\n  rw [← dvd_to_int, Int.dvd_iff_emod_eq_zero, ← to_int_inj, mod_to_int] <;> rfl\n#align dvd_iff_mod_eq_zero dvd_iff_mod_eq_zero\n\n",
 "divmod_to_nat_aux":
 "theorem divmod_to_nat_aux {n d : PosNum} {q r : Num} (h₁ : (r : ℕ) + d * _root_.bit0 q = n) (h₂ : (r : ℕ) < 2 * d) :\n    ((divModAux d q r).2 + d * (divModAux d q r).1 : ℕ) = ↑n ∧ ((divModAux d q r).2 : ℕ) < d :=\n  by\n  unfold divmod_aux\n  have : ∀ {r₂}, Num.ofZNum' (Num.sub' r (Num.pos d)) = some r₂ ↔ (r : ℕ) = r₂ + d :=\n    by\n    intro r₂\n    apply num.mem_of_znum'.trans\n    rw [← ZNum.to_int_inj, Num.cast_toZNum, Num.cast_sub', sub_eq_iff_eq_add, ← Int.coe_nat_inj']\n    simp\n  cases' e : Num.ofZNum' (Num.sub' r (Num.pos d)) with r₂ <;> simp [divmod_aux]\n  · refine' ⟨h₁, lt_of_not_ge fun h => _⟩\n    cases' nat.le.dest h with r₂ e'\n    rw [← Num.to_of_nat r₂, add_comm] at e'\n    cases e.symm.trans (this.2 e'.symm)\n  · have := this.1 e\n    constructor\n    · rwa [_root_.bit1, add_comm _ 1, mul_add, mul_one, ← add_assoc, ← this]\n    · rwa [this, two_mul, add_lt_add_iff_right] at h₂\n#align divmod_to_nat_aux divmod_to_nat_aux\n\n",
 "divmod_to_nat":
 "theorem divmod_to_nat (d n : PosNum) : (n / d : ℕ) = (divMod d n).1 ∧ (n % d : ℕ) = (divMod d n).2 :=\n  by\n  rw [Nat.div_mod_unique (PosNum.cast_pos _)]\n  induction' n with n IH n IH\n  · exact divmod_to_nat_aux (by simp <;> rfl) (nat.mul_le_mul_left 2 (PosNum.cast_pos d : (0 : ℕ) < d))\n  · unfold divmod\n    cases' divmod d n with q r\n    simp only [divmod] at IH⊢\n    apply divmod_to_nat_aux <;> simp\n    ·\n      rw [_root_.bit1, _root_.bit1, add_right_comm, bit0_eq_two_mul (n : ℕ), ← IH.1, mul_add, ← bit0_eq_two_mul,\n        mul_left_comm, ← bit0_eq_two_mul]\n    · rw [← bit0_eq_two_mul]\n      exact Nat.bit1_lt_bit0 IH.2\n  · unfold divmod\n    cases' divmod d n with q r\n    simp only [divmod] at IH⊢\n    apply divmod_to_nat_aux <;> simp\n    · rw [bit0_eq_two_mul (n : ℕ), ← IH.1, mul_add, ← bit0_eq_two_mul, mul_left_comm, ← bit0_eq_two_mul]\n    · rw [← bit0_eq_two_mul]\n      exact Nat.bit0_lt IH.2\n#align divmod_to_nat divmod_to_nat\n\n",
 "div_zero":
 "#print div_zero /-\n@[simp]\nprotected theorem div_zero (n : ZNum) : n / 0 = 0 :=\n  show n.div 0 = 0 by cases n <;> first |rfl|simp [ZNum.div]\n#align div_zero div_zero\n-/\n\n",
 "div_to_nat":
 "@[simp, norm_cast]\ntheorem div_to_nat : ∀ n d, ((n / d : Num) : ℕ) = n / d\n  | 0, 0 => by simp\n  | 0, pos d => (nat.zero_div _).symm\n  | pos n, 0 => (nat.div_zero _).symm\n  | pos n, pos d => PosNum.div'_to_nat _ _\n#align div_to_nat div_to_nat\n\n",
 "div_to_int":
 "@[simp, norm_cast]\ntheorem div_to_int : ∀ n d, ((n / d : ZNum) : ℤ) = n / d\n  | 0, 0 => by simp [Int.div_zero]\n  | 0, pos d => (Int.zero_div _).symm\n  | 0, neg d => (Int.zero_div _).symm\n  | pos n, 0 => (Int.div_zero _).symm\n  | neg n, 0 => (Int.div_zero _).symm\n  | pos n, pos d => (Num.cast_toZNum _).trans <| by rw [← Num.to_nat_to_int] <;> simp\n  | pos n, neg d => (Num.cast_toZNumNeg _).trans <| by rw [← Num.to_nat_to_int] <;> simp\n  | neg n, pos d =>\n    show -_ = -_ / ↑d\n      by\n      rw [n.to_int_eq_succ_pred, d.to_int_eq_succ_pred, ← PosNum.to_nat_to_int, Num.succ'_to_nat, Num.div_to_nat]\n      change -[n.pred' / ↑d+1] = -[n.pred' / (d.pred' + 1)+1]\n      rw [d.to_nat_eq_succ_pred]\n  | neg n, neg d =>\n    show ↑(PosNum.pred' n / Num.pos d).succ' = -_ / -↑d\n      by\n      rw [n.to_int_eq_succ_pred, d.to_int_eq_succ_pred, ← PosNum.to_nat_to_int, Num.succ'_to_nat, Num.div_to_nat]\n      change (nat.succ (_ / d) : ℤ) = nat.succ (n.pred' / (d.pred' + 1))\n      rw [d.to_nat_eq_succ_pred]\n#align div_to_int div_to_int\n\n",
 "div'_to_nat":
 "@[simp]\ntheorem div'_to_nat (n d) : (div' n d : ℕ) = n / d :=\n  (divMod_to_nat _ _).1.symm\n#align div'_to_nat div'_to_nat\n\n",
 "cmp_to_nat_lemma":
 "theorem cmp_to_nat_lemma {m n : PosNum} : (m : ℕ) < n → (bit1 m : ℕ) < bit0 n :=\n  show (m : ℕ) < n → (m + m + 1 + 1 : ℕ) ≤ n + n by\n    intro h <;> rw [nat.add_right_comm m m 1, add_assoc] <;> exact add_le_add h h\n#align cmp_to_nat_lemma cmp_to_nat_lemma\n\n",
 "cmp_to_nat":
 "theorem cmp_to_nat : ∀ m n, (ordering.cases_on (cmp m n) ((m : ℕ) < n) (m = n) ((n : ℕ) < m) : Prop)\n  | 0, 0 => rfl\n  | 0, pos b => to_nat_pos _\n  | pos a, 0 => to_nat_pos _\n  | pos a, pos b =>\n    by\n    have := PosNum.cmp_to_nat a b <;> revert this <;> dsimp [cmp] <;> cases PosNum.cmp a b\n    exacts[id, congr_arg pos, id]\n#align cmp_to_nat cmp_to_nat\n\n",
 "cmp_to_int":
 "theorem cmp_to_int : ∀ m n, (ordering.cases_on (cmp m n) ((m : ℤ) < n) (m = n) ((n : ℤ) < m) : Prop)\n  | 0, 0 => rfl\n  | pos a, pos b => by\n    have := PosNum.cmp_to_nat a b <;> revert this <;> dsimp [cmp] <;> cases PosNum.cmp a b <;> dsimp <;> [simp,\n      exact congr_arg pos, simp [GT.gt]]\n  | neg a, neg b => by\n    have := PosNum.cmp_to_nat b a <;> revert this <;> dsimp [cmp] <;> cases PosNum.cmp b a <;> dsimp <;> [simp,\n      simp (config := { contextual := true }), simp [GT.gt]]\n  | pos a, 0 => PosNum.cast_pos _\n  | pos a, neg b => lt_trans (neg_lt_zero.2 <| PosNum.cast_pos _) (PosNum.cast_pos _)\n  | 0, neg b => neg_lt_zero.2 <| PosNum.cast_pos _\n  | neg a, 0 => neg_lt_zero.2 <| PosNum.cast_pos _\n  | neg a, pos b => lt_trans (neg_lt_zero.2 <| PosNum.cast_pos _) (PosNum.cast_pos _)\n  | 0, pos b => PosNum.cast_pos _\n#align cmp_to_int cmp_to_int\n\n",
 "cmp_swap":
 "#print cmp_swap /-\ntheorem cmp_swap (m n) : (cmp m n).swap = cmp n m := by\n  cases m <;> cases n <;> try unfold cmp <;> try rfl <;> apply PosNum.cmp_swap\n#align cmp_swap cmp_swap\n-/\n\n",
 "cmp_eq":
 "theorem cmp_eq (m n) : cmp m n = ordering.eq ↔ m = n :=\n  by\n  have := cmp_to_nat m n\n  cases cmp m n <;> simp at this⊢ <;> try exact this <;>\n    · simp [show m ≠ n from fun e => by rw [e] at this <;> exact lt_irrefl _ this]\n#align cmp_eq cmp_eq\n\n",
 "cast_zneg":
 "@[simp, norm_cast]\ntheorem cast_zneg [AddGroup α] [One α] : ∀ n, ((-n : ZNum) : α) = -n\n  | 0 => neg_zero.symm\n  | pos p => rfl\n  | neg p => (neg_neg _).symm\n#align cast_zneg cast_zneg\n\n",
 "cast_zero'":
 "@[simp]\ntheorem cast_zero' [Zero α] [One α] [Add α] [Neg α] : (znum.zero : α) = 0 :=\n  rfl\n#align cast_zero' cast_zero'\n\n",
 "cast_zero":
 "@[simp, norm_cast]\ntheorem cast_zero [Zero α] [One α] [Add α] [Neg α] : ((0 : ZNum) : α) = 0 :=\n  rfl\n#align cast_zero cast_zero\n\n",
 "cast_to_znum_neg":
 "@[simp]\ntheorem cast_to_znum_neg [AddGroup α] [One α] : ∀ n : Num, (n.to_znum_neg : α) = -n\n  | 0 => neg_zero.symm\n  | Num.pos p => rfl\n#align cast_to_znum_neg cast_to_znum_neg\n\n",
 "cast_to_znum":
 "theorem cast_to_znum : ∀ n : PosNum, (n : ZNum) = ZNum.pos n\n  | 1 => rfl\n  | bit0 p => (ZNum.bit0_of_bit0 p).trans <| congr_arg _ (cast_to_znum p)\n  | bit1 p => (ZNum.bit1_of_bit1 p).trans <| congr_arg _ (cast_to_znum p)\n#align cast_to_znum cast_to_znum\n\n",
 "cast_to_num":
 "@[simp]\ntheorem cast_to_num (n : PosNum) : ↑n = Num.pos n := by rw [← cast_to_nat, ← of_to_nat n]\n#align cast_to_num cast_to_num\n\n",
 "cast_to_nat":
 "@[simp, norm_cast]\ntheorem cast_to_nat [AddMonoidWithOne α] : ∀ n : Num, ((n : ℕ) : α) = n\n  | 0 => Nat.cast_zero\n  | pos p => p.cast_to_nat\n#align cast_to_nat cast_to_nat\n\n",
 "cast_to_int":
 "@[simp, norm_cast]\ntheorem cast_to_int [AddGroupWithOne α] : ∀ n : ZNum, ((n : ℤ) : α) = n\n  | 0 => by rw [cast_zero, cast_zero, Int.cast_zero]\n  | pos p => by rw [cast_pos, cast_pos, PosNum.cast_to_int]\n  | neg p => by rw [cast_neg, cast_neg, Int.cast_neg, PosNum.cast_to_int]\n#align cast_to_int cast_to_int\n\n",
 "cast_succ'":
 "theorem cast_succ' [AddMonoidWithOne α] (n) : (succ' n : α) = n + 1 := by\n  rw [← PosNum.cast_to_nat, succ'_to_nat, Nat.cast_add_one, cast_to_nat]\n#align cast_succ' cast_succ'\n\n",
 "cast_succ":
 "@[simp]\ntheorem cast_succ [AddGroupWithOne α] (n) : ((succ n : ZNum) : α) = n + 1 := by rw [← add_one, cast_add, cast_one]\n#align cast_succ cast_succ\n\n",
 "cast_sub'":
 "@[simp]\ntheorem cast_sub' [AddGroupWithOne α] : ∀ m n : Num, (sub' m n : α) = m - n\n  | 0, 0 => (sub_zero _).symm\n  | pos a, 0 => (sub_zero _).symm\n  | 0, pos b => (zero_sub _).symm\n  | pos a, pos b => PosNum.cast_sub' _ _\n#align cast_sub' cast_sub'\n\n",
 "cast_sub":
 "@[simp, norm_cast]\ntheorem cast_sub [Ring α] (m n) : ((m - n : ZNum) : α) = m - n := by simp [sub_eq_neg_add]\n#align cast_sub cast_sub\n\n",
 "cast_pos":
 "@[simp]\ntheorem cast_pos [Zero α] [One α] [Add α] [Neg α] (n : PosNum) : (pos n : α) = n :=\n  rfl\n#align cast_pos cast_pos\n\n",
 "cast_one'":
 "@[simp]\ntheorem cast_one' [One α] [Add α] : (pos_num.one : α) = 1 :=\n  rfl\n#align cast_one' cast_one'\n\n",
 "cast_one":
 "@[simp, norm_cast]\ntheorem cast_one [Zero α] [One α] [Add α] [Neg α] : ((1 : ZNum) : α) = 1 :=\n  rfl\n#align cast_one cast_one\n\n",
 "cast_of_znum":
 "@[simp]\ntheorem cast_of_znum [AddGroupWithOne α] (n : ZNum) : (ofZNum n : α) = int.to_nat n := by\n  rw [← cast_to_nat, of_znum_to_nat]\n#align cast_of_znum cast_of_znum\n\n",
 "cast_neg":
 "@[simp]\ntheorem cast_neg [Zero α] [One α] [Add α] [Neg α] (n : PosNum) : (neg n : α) = -n :=\n  rfl\n#align cast_neg cast_neg\n\n",
 "cast_mul":
 "theorem cast_mul [Ring α] (m n) : ((m * n : ZNum) : α) = m * n := by\n  rw [← cast_to_int, mul_to_int, Int.cast_mul, cast_to_int, cast_to_int]\n#align cast_mul cast_mul\n\n",
 "cast_lt":
 "@[simp, norm_cast]\ntheorem cast_lt [LinearOrderedRing α] {m n : ZNum} : (m : α) < n ↔ m < n := by\n  rw [← cast_to_int m, ← cast_to_int n, Int.cast_lt, lt_to_int]\n#align cast_lt cast_lt\n\n",
 "cast_le":
 "@[simp, norm_cast]\ntheorem cast_le [LinearOrderedRing α] {m n : ZNum} : (m : α) ≤ n ↔ m ≤ n := by rw [← not_lt] <;> exact not_congr cast_lt\n#align cast_le cast_le\n\n",
 "cast_inj":
 "#print cast_inj /-\n@[simp, norm_cast]\ntheorem cast_inj [LinearOrderedRing α] {m n : ZNum} : (m : α) = n ↔ m = n := by\n  rw [← cast_to_int m, ← cast_to_int n, Int.cast_inj, to_int_inj]\n#align cast_inj cast_inj\n-/\n\n",
 "cast_bitm1":
 "@[simp]\ntheorem cast_bitm1 [AddGroupWithOne α] (n : ZNum) : (n.bitm1 : α) = bit0 n - 1 :=\n  by\n  conv =>\n    lhs\n    rw [← zneg_zneg n]\n  rw [← zneg_bit1, cast_zneg, cast_bit1]\n  have : ((-1 + n + n : ℤ) : α) = (n + n + -1 : ℤ) := by simp [add_comm, add_left_comm]\n  simpa [_root_.bit1, _root_.bit0, sub_eq_add_neg, -Int.add_neg_one]\n#align cast_bitm1 cast_bitm1\n\n",
 "cast_bit1":
 "@[simp, norm_cast]\ntheorem cast_bit1 [AddGroupWithOne α] : ∀ n : ZNum, (n.bit1 : α) = bit1 n\n  | 0 => by simp [ZNum.bit1, _root_.bit1, _root_.bit0]\n  | pos p => by rw [ZNum.bit1, cast_pos, cast_pos] <;> rfl\n  | neg p => by\n    rw [ZNum.bit1, cast_neg, cast_neg]\n    cases' e : pred' p with a <;> have : p = _ := (succ'_pred' p).symm.trans (congr_arg Num.succ' e)\n    · change p = 1 at this\n      subst p\n      simp [_root_.bit1, _root_.bit0]\n    · rw [Num.succ'] at this\n      subst p\n      have : (↑(-↑a : ℤ) : α) = -1 + ↑(-↑a + 1 : ℤ) := by simp [add_comm]\n      simpa [_root_.bit1, _root_.bit0, -add_comm]\n#align cast_bit1 cast_bit1\n\n",
 "cast_bit0":
 "@[simp, norm_cast]\ntheorem cast_bit0 [AddGroupWithOne α] : ∀ n : ZNum, (n.bit0 : α) = bit0 n\n  | 0 => (add_zero _).symm\n  | pos p => by rw [ZNum.bit0, cast_pos, cast_pos] <;> rfl\n  | neg p => by rw [ZNum.bit0, cast_neg, cast_neg, PosNum.cast_bit0, _root_.bit0, _root_.bit0, neg_add_rev]\n#align cast_bit0 cast_bit0\n\n",
 "cast_add":
 "@[simp, norm_cast]\ntheorem cast_add [AddGroupWithOne α] : ∀ m n, ((m + n : ZNum) : α) = m + n\n  | 0, a => by cases a <;> exact (_root_.zero_add _).symm\n  | b, 0 => by cases b <;> exact (_root_.add_zero _).symm\n  | pos a, pos b => PosNum.cast_add _ _\n  | pos a, neg b => by simpa only [sub_eq_add_neg] using PosNum.cast_sub' _ _\n  | neg a, pos b =>\n    have : (↑b + -↑a : α) = -↑a + ↑b := by\n      rw [← PosNum.cast_to_int a, ← PosNum.cast_to_int b, ← Int.cast_neg, ← Int.cast_add (-a)] <;> simp [add_comm]\n    (PosNum.cast_sub' _ _).trans <| (sub_eq_add_neg _ _).trans this\n  | neg a, neg b =>\n    show -(↑(a + b) : α) = -a + -b by\n      rw [PosNum.cast_add, neg_eq_iff_eq_neg, neg_add_rev, neg_neg, neg_neg, ← PosNum.cast_to_int a, ←\n        PosNum.cast_to_int b, ← Int.cast_add, ← Int.cast_add, add_comm]\n#align cast_add cast_add\n\n",
 "bitwise_to_nat":
 "theorem bitwise_to_nat {f : Num → Num → Num} {g : Bool → Bool → Bool} (p : PosNum → PosNum → Num)\n    (gff : g false false = false) (f00 : f 0 0 = 0) (f0n : ∀ n, f 0 (pos n) = cond (g false true) (pos n) 0)\n    (fn0 : ∀ n, f (pos n) 0 = cond (g true false) (pos n) 0) (fnn : ∀ m n, f (pos m) (pos n) = p m n)\n    (p11 : p 1 1 = cond (g true true) 1 0)\n    (p1b : ∀ b n, p 1 (PosNum.bit b n) = bit (g true b) (cond (g false true) (pos n) 0))\n    (pb1 : ∀ a m, p (PosNum.bit a m) 1 = bit (g a true) (cond (g true false) (pos m) 0))\n    (pbb : ∀ a b m n, p (PosNum.bit a m) (PosNum.bit b n) = bit (g a b) (p m n)) :\n    ∀ m n : Num, (f m n : ℕ) = Nat.bitwise' g m n := by\n  intros ; cases' m with m <;> cases' n with n <;> try change zero with 0 <;> try change ((0 : Num) : ℕ) with 0\n  · rw [f00, Nat.bitwise'_zero] <;> rfl\n  · unfold Nat.bitwise'\n    rw [f0n, Nat.binaryRec_zero]\n    cases g ff tt <;> rfl\n  · unfold Nat.bitwise'\n    generalize h : (pos m : ℕ) = m'\n    revert h\n    apply Nat.bitCasesOn m' _\n    intro b m' h\n    rw [fn0, Nat.binaryRec_eq, Nat.binaryRec_zero, ← h]\n    cases g tt ff <;> rfl\n    apply Nat.bitwise'_bit_aux gff\n  · rw [fnn]\n    have : ∀ (b) (n : PosNum), (cond b (↑n) 0 : ℕ) = ↑(cond b (pos n) 0 : Num) := by intros <;> cases b <;> rfl\n    induction' m with m IH m IH generalizing n <;> cases' n with n n\n    any_goals change one with 1\n    any_goals change pos 1 with 1\n    any_goals change pos_num.bit0 with PosNum.bit ff\n    any_goals change pos_num.bit1 with PosNum.bit tt\n    any_goals change ((1 : Num) : ℕ) with Nat.bit tt 0\n    all_goals\n      repeat' rw [show ∀ b n, (pos (PosNum.bit b n) : ℕ) = Nat.bit b ↑n by intros <;> cases b <;> rfl]\n      rw [Nat.bitwise'_bit]\n    any_goals assumption\n    any_goals rw [Nat.bitwise'_zero, p11]; cases g tt tt <;> rfl\n    any_goals rw [Nat.bitwise'_zero_left, this, ← bit_to_nat, p1b]\n    any_goals rw [Nat.bitwise'_zero_right _ gff, this, ← bit_to_nat, pb1]\n    all_goals\n      rw [← show ∀ n, ↑(p m n) = Nat.bitwise' g ↑m ↑n from IH]\n      rw [← bit_to_nat, pbb]\n#align bitwise_to_nat bitwise_to_nat\n\n",
 "bit_to_nat":
 "theorem bit_to_nat (b n) : (bit b n : ℕ) = Nat.bit b n := by cases b <;> cases n <;> rfl\n#align bit_to_nat bit_to_nat\n\n",
 "bit1_succ":
 "theorem bit1_succ : ∀ n : Num, n.bit1.succ = n.succ.bit0\n  | 0 => rfl\n  | pos n => rfl\n#align bit1_succ bit1_succ\n\n",
 "bit1_of_bit1":
 "theorem bit1_of_bit1 : ∀ n : ZNum, _root_.bit1 n = n.bit1\n  | 0 => rfl\n  | pos a => congr_arg pos a.bit1_of_bit1\n  | neg a => show PosNum.sub' 1 (_root_.bit0 a) = _ by rw [PosNum.one_sub', a.bit0_of_bit0] <;> rfl\n#align bit1_of_bit1 bit1_of_bit1\n\n",
 "bit0_of_bit0":
 "theorem bit0_of_bit0 : ∀ n : ZNum, _root_.bit0 n = n.bit0\n  | 0 => rfl\n  | pos a => congr_arg pos a.bit0_of_bit0\n  | neg a => congr_arg neg a.bit0_of_bit0\n#align bit0_of_bit0 bit0_of_bit0\n\n",
 "add_zero":
 "#print add_zero /-\ntheorem add_zero (n : ZNum) : n + 0 = n := by cases n <;> rfl\n#align add_zero add_zero\n-/\n\n",
 "add_to_znum":
 "@[simp]\ntheorem add_to_znum (m n : Num) : Num.toZNum (m + n) = m.to_znum + n.to_znum := by cases m <;> cases n <;> rfl\n#align add_to_znum add_to_znum\n\n",
 "add_to_nat":
 "@[norm_cast]\ntheorem add_to_nat : ∀ m n, ((m + n : Num) : ℕ) = m + n\n  | 0, 0 => rfl\n  | 0, pos q => (zero_add _).symm\n  | pos p, 0 => rfl\n  | pos p, pos q => PosNum.add_to_nat _ _\n#align add_to_nat add_to_nat\n\n",
 "add_succ":
 "theorem add_succ : ∀ m n : Num, m + succ n = succ (m + n)\n  | 0, n => by simp [zero_add]\n  | pos p, 0 => show pos (p + 1) = succ (pos p + 0) by rw [PosNum.add_one, add_zero] <;> rfl\n  | pos p, pos q => congr_arg pos (PosNum.add_succ _ _)\n#align add_succ add_succ\n\n",
 "add_one":
 "theorem add_one : ∀ n : ZNum, n + 1 = succ n\n  | 0 => rfl\n  | pos p => congr_arg pos p.add_one\n  | neg p => by cases p <;> rfl\n#align add_one add_one\n\n",
 "add_of_nat'":
 "@[simp]\ntheorem add_of_nat' (m n) : Num.ofNat' (m + n) = Num.ofNat' m + Num.ofNat' n := by\n  induction n <;> simp [nat.add_zero, of_nat'_succ, add_zero, nat.add_succ, add_one, add_succ, *]\n#align add_of_nat' add_of_nat'\n\n",
 "add_of_nat":
 "@[simp, norm_cast]\ntheorem add_of_nat (m n) : ((m + n : ℕ) : Num) = m + n :=\n  add_ofNat' _ _\n#align add_of_nat add_of_nat\n\n",
 "abs_to_znum":
 "@[simp]\ntheorem abs_to_znum : ∀ n : Num, abs n.to_znum = n\n  | 0 => rfl\n  | Num.pos p => rfl\n#align abs_to_znum abs_to_znum\n\n",
 "abs_to_nat":
 "@[simp]\ntheorem abs_to_nat : ∀ n, (abs n : ℕ) = Int.natAbs n\n  | 0 => rfl\n  | pos p => congr_arg Int.natAbs p.to_nat_to_int\n  | neg p => show Int.natAbs ((p : ℕ) : ℤ) = Int.natAbs (-p) by rw [p.to_nat_to_int, Int.natAbs_neg]\n#align abs_to_nat abs_to_nat\n\n"}