{"pure_def":
 "@[simp]\ntheorem pure_def {α} : (pure : α → Erased α) = @mk _ :=\n  rfl\n#align pure_def pure_def\n\n",
 "out_proof":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n/-- Extracts the erased value, if it is a proof. -/\ntheorem out_proof {p : Prop} (a : Erased p) : p :=\n  out a\n#align out_proof out_proof\n\n",
 "out_mk":
 "@[simp]\ntheorem out_mk {α} (a : α) : (mk a).out = a := by\n  let h; show Classical.choose h = a\n  have := Classical.choose_spec h\n  exact cast (congr_fun this a).symm rfl\n#align out_mk out_mk\n\n",
 "out_inj":
 "@[ext]\ntheorem out_inj {α} (a b : Erased α) (h : a.out = b.out) : a = b := by simpa using congr_arg mk h\n#align out_inj out_inj\n\n",
 "nonempty_iff":
 "@[simp]\ntheorem nonempty_iff {α} : Nonempty (Erased α) ↔ Nonempty α :=\n  ⟨fun ⟨a⟩ => ⟨a.out⟩, fun ⟨a⟩ => ⟨mk a⟩⟩\n#align nonempty_iff nonempty_iff\n\n",
 "mk_out":
 "@[simp]\ntheorem mk_out {α} : ∀ a : Erased α, mk (out a) = a\n  | ⟨s, h⟩ => by simp [mk] <;> congr <;> exact Classical.choose_spec h\n#align mk_out mk_out\n\n",
 "map_out":
 "@[simp]\ntheorem map_out {α β} {f : α → β} (a : Erased α) : (a.map f).out = f a.out := by simp [map]\n#align map_out map_out\n\n",
 "map_def":
 "@[simp]\ntheorem map_def {α β} : ((· <$> ·) : (α → β) → Erased α → Erased β) = @map _ _ :=\n  rfl\n#align map_def map_def\n\n",
 "join_eq_out":
 "@[simp]\ntheorem join_eq_out {α} (a) : @join α a = a.out :=\n  bind_eq_out _ _\n#align join_eq_out join_eq_out\n\n",
 "bind_eq_out":
 "@[simp]\ntheorem bind_eq_out {α β} (a f) : @bind α β a f = f a.out := by delta bind bind._proof_1 <;> cases f a.out <;> rfl\n#align bind_eq_out bind_eq_out\n\n",
 "bind_def":
 "@[simp]\ntheorem bind_def {α β} : ((· >>= ·) : Erased α → (α → Erased β) → Erased β) = @bind _ _ :=\n  rfl\n#align bind_def bind_def\n\n"}