{"zero_shiftr":
 "@[simp]\ntheorem zero_shiftr (n) : shiftr 0 n = 0 :=\n  (shiftr_eq_div_pow _ _).trans (nat.zero_div _)\n#align zero_shiftr zero_shiftr\n\n",
 "zero_shiftl":
 "@[simp]\ntheorem zero_shiftl (n) : shiftl 0 n = 0 :=\n  (shiftl_eq_mul_pow _ _).trans (nat.zero_mul _)\n#align zero_shiftl zero_shiftl\n\n",
 "size_zero":
 "@[simp]\ntheorem size_zero : size 0 = 0 := by simp [size]\n#align size_zero size_zero\n\n",
 "size_shiftl'":
 "@[simp]\ntheorem size_shiftl' {b m n} (h : shiftl' b m n ≠ 0) : size (shiftl' b m n) = size m + n :=\n  by\n  induction' n with n IH <;> simp [shiftl'] at h⊢\n  rw [size_bit h, nat.add_succ]\n  by_cases s0 : shiftl' b m n = 0 <;> [skip, rw [IH s0]]\n  rw [s0] at h⊢\n  cases b; · exact absurd rfl h\n  have : shiftl' tt m n + 1 = 1 := congr_arg (· + 1) s0\n  rw [shiftl'_tt_eq_mul_pow] at this\n  obtain rfl := succ.inj (eq_one_of_dvd_one ⟨_, this.symm⟩)\n  rw [one_mul] at this\n  obtain rfl : n = 0 :=\n    nat.eq_zero_of_le_zero (le_of_not_gt fun hn => ne_of_gt (pow_lt_pow_of_lt_right (by decide) hn) this)\n  rfl\n#align size_shiftl' size_shiftl'\n\n",
 "size_shiftl":
 "@[simp]\ntheorem size_shiftl {m} (h : m ≠ 0) (n) : size (shiftl m n) = size m + n :=\n  size_shiftl' (shiftl'_ne_zero_left _ h _)\n#align size_shiftl size_shiftl\n\n",
 "size_pow":
 "theorem size_pow {n : ℕ} : size (2 ^ n) = n + 1 :=\n  le_antisymm (size_le.2 <| pow_lt_pow_of_lt_right (by decide) (lt_succ_self _)) (lt_size.2 <| le_rfl)\n#align size_pow size_pow\n\n",
 "size_pos":
 "theorem size_pos {n : ℕ} : 0 < size n ↔ 0 < n := by rw [lt_size] <;> rfl\n#align size_pos size_pos\n\n",
 "size_one":
 "@[simp]\ntheorem size_one : size 1 = 1 :=\n  show size (bit1 0) = 1 by rw [size_bit1, size_zero]\n#align size_one size_one\n\n",
 "size_le_size":
 "theorem size_le_size {m n : ℕ} (h : m ≤ n) : size m ≤ size n :=\n  size_le.2 <| lt_of_le_of_lt h (lt_size_self _)\n#align size_le_size size_le_size\n\n",
 "size_le":
 "theorem size_le {m n : ℕ} : size m ≤ n ↔ m < 2 ^ n :=\n  ⟨fun h => lt_of_lt_of_le (lt_size_self _) (pow_le_pow_of_le_right (by decide) h),\n    by\n    rw [← one_shiftl]; revert n\n    apply binary_rec _ _ m\n    · intro n h\n      simp\n    · intro b m IH n h\n      by_cases e : bit b m = 0\n      · simp [e]\n      rw [size_bit e]\n      cases' n with n\n      · exact e.elim (nat.eq_zero_of_le_zero (le_of_lt_succ h))\n      · apply succ_le_succ (IH _)\n        apply lt_imp_lt_of_le_imp_le (fun h' => bit0_le_bit _ h') h⟩\n#align size_le size_le\n\n",
 "size_eq_zero":
 "theorem size_eq_zero {n : ℕ} : size n = 0 ↔ n = 0 := by\n  have := @size_pos n <;> simp [pos_iff_ne_zero] at this <;> exact Decidable.not_iff_not.1 this\n#align size_eq_zero size_eq_zero\n\n",
 "size_eq_bits_len":
 "theorem size_eq_bits_len (n : ℕ) : n.bits.length = n.size :=\n  by\n  induction' n using Nat.binaryRec' with b n h ih; · simp\n  rw [size_bit, bits_append_bit _ _ h]\n  · simp [ih]\n  · simpa [bit_eq_zero_iff]\n#align size_eq_bits_len size_eq_bits_len\n\n",
 "size_bit1":
 "@[simp]\ntheorem size_bit1 (n) : size (bit1 n) = succ (size n) :=\n  @size_bit true n (Nat.bit1_ne_zero n)\n#align size_bit1 size_bit1\n\n",
 "size_bit0":
 "@[simp]\ntheorem size_bit0 {n} (h : n ≠ 0) : size (bit0 n) = succ (size n) :=\n  @size_bit false n (Nat.bit0_ne_zero h)\n#align size_bit0 size_bit0\n\n",
 "size_bit":
 "@[simp]\ntheorem size_bit {b n} (h : bit b n ≠ 0) : size (bit b n) = succ (size n) :=\n  by\n  rw [size]\n  conv =>\n    lhs\n    rw [binary_rec]\n    simp [h]\n  rw [div2_bit]\n#align size_bit size_bit\n\n",
 "shiftr_eq_div_pow":
 "theorem shiftr_eq_div_pow (m) : ∀ n, shiftr m n = m / 2 ^ n\n  | 0 => (nat.div_one _).symm\n  | k + 1 => (congr_arg div2 (shiftr_eq_div_pow k)).trans <| by rw [div2_val, nat.div_div_eq_div_mul, mul_comm] <;> rfl\n#align shiftr_eq_div_pow shiftr_eq_div_pow\n\n",
 "shiftl_eq_mul_pow":
 "/-\nCopyright (c) 2014 Floris van Doorn (c) 2016 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn, Leonardo de Moura, Jeremy Avigad, Mario Carneiro\n-/\ntheorem shiftl_eq_mul_pow (m) : ∀ n, shiftl m n = m * 2 ^ n\n  | 0 => (nat.mul_one _).symm\n  | k + 1 => show bit0 (shiftl m k) = m * (2 * 2 ^ k) by rw [bit0_val, shiftl_eq_mul_pow, mul_left_comm, mul_comm 2]\n#align shiftl_eq_mul_pow shiftl_eq_mul_pow\n\n",
 "shiftl'_tt_ne_zero":
 "theorem shiftl'_tt_ne_zero (m) : ∀ {n} (h : n ≠ 0), shiftl' true m n ≠ 0\n  | 0, h => absurd rfl h\n  | succ n, _ => Nat.bit1_ne_zero _\n#align shiftl'_tt_ne_zero shiftl'_tt_ne_zero\n\n",
 "shiftl'_tt_eq_mul_pow":
 "theorem shiftl'_tt_eq_mul_pow (m) : ∀ n, shiftl' true m n + 1 = (m + 1) * 2 ^ n\n  | 0 => by simp [shiftl, shiftl', pow_zero, nat.one_mul]\n  | k + 1 => by\n    change bit1 (shiftl' tt m k) + 1 = (m + 1) * (2 * 2 ^ k)\n    rw [bit1_val]\n    change 2 * (shiftl' tt m k + 1) = _\n    rw [shiftl'_tt_eq_mul_pow, mul_left_comm, mul_comm 2]\n#align shiftl'_tt_eq_mul_pow shiftl'_tt_eq_mul_pow\n\n",
 "shiftl'_ne_zero_left":
 "theorem shiftl'_ne_zero_left (b) {m} (h : m ≠ 0) (n) : shiftl' b m n ≠ 0 := by\n  induction n <;> simp [bit_ne_zero, shiftl', *]\n#align shiftl'_ne_zero_left shiftl'_ne_zero_left\n\n",
 "one_shiftl":
 "theorem one_shiftl (n) : shiftl 1 n = 2 ^ n :=\n  (shiftl_eq_mul_pow _ _).trans (nat.one_mul _)\n#align one_shiftl one_shiftl\n\n",
 "lt_size_self":
 "theorem lt_size_self (n : ℕ) : n < 2 ^ size n := by\n  rw [← one_shiftl]\n  have : ∀ {n}, n = 0 → n < shiftl 1 (size n) := by simp\n  apply binary_rec _ _ n\n  · apply this rfl\n  intro b n IH\n  by_cases bit b n = 0\n  · apply this h\n  rw [size_bit h, shiftl_succ]\n  exact bit_lt_bit0 _ IH\n#align lt_size_self lt_size_self\n\n",
 "lt_size":
 "theorem lt_size {m n : ℕ} : m < size n ↔ 2 ^ m ≤ n := by rw [← not_lt, Decidable.iff_not_comm, not_lt, size_le]\n#align lt_size lt_size\n\n"}