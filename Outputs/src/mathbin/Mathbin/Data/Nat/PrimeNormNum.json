{"n_pos":
 "theorem min_fac_helper.n_pos {n k : ℕ} (h : min_fac_helper n k) : 0 < n :=\n  pos_iff_ne_zero.2 fun e => by rw [e] at h <;> exact not_le_of_lt (Nat.bit1_lt h.1) h.2\n#align min_fac_helper.n_pos min_fac_helper.n_pos\n\n",
 "min_fac_ne_bit0":
 "theorem min_fac_ne_bit0 {n k : ℕ} : Nat.minFac (bit1 n) ≠ bit0 k :=\n  by\n  rw [bit0_eq_two_mul]\n  refine' fun e => absurd ((nat.dvd_add_iff_right _).2 (dvd_trans ⟨_, e⟩ (Nat.minFac_dvd _))) _ <;> simp\n#align min_fac_ne_bit0 min_fac_ne_bit0\n\n",
 "min_fac_helper_5":
 "theorem min_fac_helper_5 (n k k' : ℕ) (e : bit1 k * bit1 k = k') (hd : bit1 n < k') (h : min_fac_helper n k) :\n    Nat.minFac (bit1 n) = bit1 n :=\n  by\n  refine' (Nat.prime_def_minFac.1 (Nat.prime_def_le_sqrt.2 ⟨Nat.bit1_lt h.n_pos, _⟩)).2\n  rw [← e] at hd\n  intro m m2 hm md\n  have := le_trans h.2 (le_trans (Nat.minFac_le_of_dvd m2 md) hm)\n  rw [Nat.le_sqrt] at this\n  exact not_le_of_lt hd this\n#align min_fac_helper_5 min_fac_helper_5\n\n",
 "min_fac_helper_4":
 "theorem min_fac_helper_4 (n k : ℕ) (hd : bit1 n % bit1 k = 0) (h : min_fac_helper n k) : Nat.minFac (bit1 n) = bit1 k :=\n  by\n  rw [← nat.dvd_iff_mod_eq_zero] at hd\n  exact le_antisymm (Nat.minFac_le_of_dvd (Nat.bit1_lt h.1) hd) h.2\n#align min_fac_helper_4 min_fac_helper_4\n\n",
 "min_fac_helper_3":
 "theorem min_fac_helper_3 (n k k' c : ℕ) (e : k + 1 = k') (nc : bit1 n % bit1 k = c) (c0 : 0 < c)\n    (h : min_fac_helper n k) : min_fac_helper n k' :=\n  by\n  refine' min_fac_helper_1 e _ h\n  refine' mt _ (ne_of_gt c0); intro e₁\n  rw [← nc, ← nat.dvd_iff_mod_eq_zero, ← e₁]\n  apply Nat.minFac_dvd\n#align min_fac_helper_3 min_fac_helper_3\n\n",
 "min_fac_helper_2":
 "theorem min_fac_helper_2 (n k k' : ℕ) (e : k + 1 = k') (np : ¬Nat.Prime (bit1 k)) (h : min_fac_helper n k) :\n    min_fac_helper n k' := by\n  refine' min_fac_helper_1 e _ h\n  intro e₁; rw [← e₁] at np\n  exact np (Nat.minFac_prime <| ne_of_gt <| Nat.bit1_lt h.n_pos)\n#align min_fac_helper_2 min_fac_helper_2\n\n",
 "min_fac_helper_1":
 "theorem min_fac_helper_1 {n k k' : ℕ} (e : k + 1 = k') (np : Nat.minFac (bit1 n) ≠ bit1 k) (h : min_fac_helper n k) :\n    min_fac_helper n k' := by\n  rw [← e]\n  refine'\n    ⟨nat.succ_pos _, (lt_of_le_of_ne (lt_of_le_of_ne _ _ : k + 1 + k < _) min_fac_ne_bit0.symm : bit0 (k + 1) < _)⟩\n  · rw [add_right_comm]\n    exact h.2\n  · rw [add_right_comm]\n    exact np.symm\n#align min_fac_helper_1 min_fac_helper_1\n\n",
 "min_fac_helper_0":
 "theorem min_fac_helper_0 (n : ℕ) (h : 0 < n) : min_fac_helper n 1 :=\n  by\n  refine' ⟨zero_lt_one, lt_of_le_of_ne _ min_fac_ne_bit0.symm⟩\n  rw [Nat.succ_le_iff]\n  refine' lt_of_le_of_ne (Nat.minFac_pos _) fun e => Nat.not_prime_one _\n  rw [e]\n  exact Nat.minFac_prime (Nat.bit1_lt h).ne'\n#align min_fac_helper_0 min_fac_helper_0\n\n",
 "min_fac_bit0":
 "theorem min_fac_bit0 (n : ℕ) : Nat.minFac (bit0 n) = 2 := by\n  simp [Nat.minFac_eq, show 2 ∣ bit0 n by simp [bit0_eq_two_mul n]]\n#align min_fac_bit0 min_fac_bit0\n\n",
 "is_prime_helper":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Jeremy Avigad, Mario Carneiro\n-/\ntheorem is_prime_helper (n : ℕ) (h₁ : 1 < n) (h₂ : Nat.minFac n = n) : Nat.Prime n :=\n  Nat.prime_def_minFac.2 ⟨h₁, h₂⟩\n#align is_prime_helper is_prime_helper\n\n",
 "factors_helper_sn":
 "theorem factors_helper_sn (n a : ℕ) (h₁ : a < n) (h₂ : Nat.minFac n = n) : factors_helper n a [n] :=\n  factors_helper_cons _ _ _ _ _ (mul_one _) h₁ h₂ (factors_helper_nil _)\n#align factors_helper_sn factors_helper_sn\n\n",
 "factors_helper_same_sn":
 "theorem factors_helper_same_sn (a : ℕ) : factors_helper a a [a] :=\n  factors_helper_same _ _ _ _ (mul_one _) (factors_helper_nil _)\n#align factors_helper_same_sn factors_helper_same_sn\n\n",
 "factors_helper_same":
 "theorem factors_helper_same (n m a : ℕ) (l : List ℕ) (h : a * m = n) (H : factors_helper m a l) :\n    factors_helper n a (a :: l) := fun pa => factors_helper_cons' _ _ _ _ _ h le_rfl (Nat.prime_def_minFac.1 pa).2 H pa\n#align factors_helper_same factors_helper_same\n\n",
 "factors_helper_nil":
 "theorem factors_helper_nil (a : ℕ) : factors_helper 1 a [] := fun pa => ⟨List.Chain.nil, by rintro _ ⟨⟩, List.prod_nil⟩\n#align factors_helper_nil factors_helper_nil\n\n",
 "factors_helper_end":
 "theorem factors_helper_end (n : ℕ) (l : List ℕ) (H : factors_helper n 2 l) : Nat.factors n = l :=\n  let ⟨h₁, h₂, h₃⟩ := H Nat.prime_two\n  have := List.chain'_iff_pairwise.1 (@List.Chain'.tail _ _ (_ :: _) h₁)\n  (List.eq_of_perm_of_sorted (Nat.factors_unique h₃ h₂) this (Nat.factors_sorted _)).symm\n#align factors_helper_end factors_helper_end\n\n",
 "factors_helper_cons'":
 "theorem factors_helper_cons' (n m a b : ℕ) (l : List ℕ) (h₁ : b * m = n) (h₂ : a ≤ b) (h₃ : Nat.minFac b = b)\n    (H : factors_helper m b l) : factors_helper n a (b :: l) := fun pa =>\n  have pb : b.prime := Nat.prime_def_minFac.2 ⟨le_trans pa.two_le h₂, h₃⟩\n  let ⟨f₁, f₂, f₃⟩ := H pb\n  ⟨List.Chain.cons h₂ f₁, fun c h => h.elim (fun e => e.symm ▸ pb) (f₂ _), by rw [List.prod_cons, f₃, h₁]⟩\n#align factors_helper_cons' factors_helper_cons'\n\n",
 "factors_helper_cons":
 "theorem factors_helper_cons (n m a b : ℕ) (l : List ℕ) (h₁ : b * m = n) (h₂ : a < b) (h₃ : Nat.minFac b = b)\n    (H : factors_helper m b l) : factors_helper n a (b :: l) :=\n  factors_helper_cons' _ _ _ _ _ h₁ h₂.le h₃ H\n#align factors_helper_cons factors_helper_cons\n\n"}