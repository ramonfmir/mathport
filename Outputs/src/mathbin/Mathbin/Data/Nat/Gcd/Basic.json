{"symmetric":
 "theorem coprime.symmetric : symmetric coprime := fun m n => coprime.symm\n#align coprime.symmetric coprime.symmetric\n\n",
 "symm":
 "theorem coprime.symm {m n : ℕ} : coprime n m → coprime m n :=\n  (gcd_comm m n).trans\n#align coprime.symm coprime.symm\n\n",
 "pow_right":
 "theorem coprime.pow_right {m k : ℕ} (n : ℕ) (H1 : coprime k m) : coprime k (m ^ n) :=\n  (H1.symm.pow_left n).symm\n#align coprime.pow_right coprime.pow_right\n\n",
 "pow_left":
 "theorem coprime.pow_left {m k : ℕ} (n : ℕ) (H1 : coprime m k) : coprime (m ^ n) k :=\n  nat.rec_on n (coprime_one_left _) fun n IH => H1.mul IH\n#align coprime.pow_left coprime.pow_left\n\n",
 "pow_dvd_pow_iff":
 "#print pow_dvd_pow_iff /-\ntheorem pow_dvd_pow_iff {a b n : ℕ} (n0 : 0 < n) : a ^ n ∣ b ^ n ↔ a ∣ b :=\n  by\n  refine' ⟨fun h => _, fun h => pow_dvd_pow_of_dvd h _⟩\n  cases' nat.eq_zero_or_pos (gcd a b) with g0 g0\n  · simp [eq_zero_of_gcd_eq_zero_right g0]\n  rcases exists_coprime' g0 with ⟨g, a', b', g0', co, rfl, rfl⟩\n  rw [mul_pow, mul_pow] at h\n  replace h := dvd_of_mul_dvd_mul_right (pow_pos g0' _) h\n  have := pow_dvd_pow a' n0\n  rw [pow_one, (co.pow n n).eq_one_of_dvd h] at this\n  simp [eq_one_of_dvd_one this]\n#align pow_dvd_pow_iff pow_dvd_pow_iff\n-/\n\n",
 "pow":
 "theorem coprime.pow {k l : ℕ} (m n : ℕ) (H1 : coprime k l) : coprime (k ^ m) (l ^ n) :=\n  (H1.pow_left _).pow_right _\n#align coprime.pow coprime.pow\n\n",
 "not_isCoprime_zero_zero":
 "#print not_isCoprime_zero_zero /-\ntheorem not_isCoprime_zero_zero : ¬coprime 0 0 := by simp\n#align not_coprime_zero_zero not_isCoprime_zero_zero\n-/\n\n",
 "not_coprime_of_dvd_of_dvd":
 "theorem not_coprime_of_dvd_of_dvd {m n d : ℕ} (dgt1 : 1 < d) (Hm : d ∣ m) (Hn : d ∣ n) : ¬coprime m n := fun co =>\n  not_lt_of_ge (le_of_dvd zero_lt_one <| by rw [← co.gcd_eq_one] <;> exact dvd_gcd Hm Hn) dgt1\n#align not_coprime_of_dvd_of_dvd not_coprime_of_dvd_of_dvd\n\n",
 "mul_right":
 "theorem coprime.mul_right {k m n : ℕ} (H1 : coprime k m) (H2 : coprime k n) : coprime k (m * n) :=\n  (H1.symm.mul H2.symm).symm\n#align coprime.mul_right coprime.mul_right\n\n",
 "mul_dvd_of_dvd_of_dvd":
 "theorem coprime.mul_dvd_of_dvd_of_dvd {a n m : ℕ} (hmn : coprime m n) (hm : m ∣ a) (hn : n ∣ a) : m * n ∣ a :=\n  let ⟨k, hk⟩ := hm\n  hk.symm ▸ mul_dvd_mul_left _ (hmn.symm.dvd_of_dvd_mul_left (hk ▸ hn))\n#align coprime.mul_dvd_of_dvd_of_dvd coprime.mul_dvd_of_dvd_of_dvd\n\n",
 "mul_add_mul_ne_mul":
 "theorem coprime.mul_add_mul_ne_mul {m n a b : ℕ} (cop : coprime m n) (ha : a ≠ 0) (hb : b ≠ 0) :\n    a * m + b * n ≠ m * n := by\n  intro h\n  obtain ⟨x, rfl⟩ : n ∣ a :=\n    cop.symm.dvd_of_dvd_mul_right\n      ((nat.dvd_add_iff_left (dvd_mul_left n b)).mpr ((congr_arg _ h).mpr (dvd_mul_left n m)))\n  obtain ⟨y, rfl⟩ : m ∣ b :=\n    cop.dvd_of_dvd_mul_right\n      ((nat.dvd_add_iff_right (dvd_mul_left m (n * x))).mpr ((congr_arg _ h).mpr (dvd_mul_right m n)))\n  rw [mul_comm, mul_ne_zero_iff, ← one_le_iff_ne_zero] at ha hb\n  refine' mul_ne_zero hb.2 ha.2 (eq_zero_of_mul_eq_self_left (ne_of_gt (add_le_add ha.1 hb.1)) _)\n  rw [← mul_assoc, ← h, add_mul, add_mul, mul_comm _ n, ← mul_assoc, mul_comm y]\n#align coprime.mul_add_mul_ne_mul coprime.mul_add_mul_ne_mul\n\n",
 "mul":
 "theorem coprime.mul {m n k : ℕ} (H1 : coprime m k) (H2 : coprime n k) : coprime (m * n) k :=\n  (H1.gcd_mul_left_cancel n).trans H2\n#align coprime.mul coprime.mul\n\n",
 "lcm_zero_right":
 "@[simp]\ntheorem lcm_zero_right (m : ℕ) : lcm m 0 = 0 :=\n  lcm_comm 0 m ▸ lcm_zero_left m\n#align lcm_zero_right lcm_zero_right\n\n",
 "lcm_zero_left":
 "@[simp]\ntheorem lcm_zero_left (m : ℕ) : lcm 0 m = 0 := by delta lcm <;> rw [MulZeroClass.zero_mul, nat.zero_div]\n#align lcm_zero_left lcm_zero_left\n\n",
 "lcm_self":
 "@[simp]\ntheorem lcm_self (m : ℕ) : lcm m m = m :=\n  or.elim (nat.eq_zero_or_pos m) (fun h => by rw [h, lcm_zero_left]) fun h => by\n    delta lcm <;> rw [gcd_self, nat.mul_div_cancel _ h]\n#align lcm_self lcm_self\n\n",
 "lcm_pos":
 "theorem lcm_pos {m n : ℕ} : 0 < m → 0 < n → 0 < m.lcm n :=\n  by\n  simp_rw [pos_iff_ne_zero]\n  exact lcm_ne_zero\n#align lcm_pos lcm_pos\n\n",
 "lcm_one_right":
 "#print lcm_one_right /-\n@[simp]\ntheorem lcm_one_right (m : ℕ) : lcm m 1 = m :=\n  lcm_comm 1 m ▸ lcm_one_left m\n#align lcm_one_right lcm_one_right\n-/\n\n",
 "lcm_one_left":
 "#print lcm_one_left /-\n@[simp]\ntheorem lcm_one_left (m : ℕ) : lcm 1 m = m := by delta lcm <;> rw [one_mul, gcd_one_left, nat.div_one]\n#align lcm_one_left lcm_one_left\n-/\n\n",
 "lcm_ne_zero":
 "theorem lcm_ne_zero {m n : ℕ} (hm : m ≠ 0) (hn : n ≠ 0) : lcm m n ≠ 0 :=\n  by\n  intro h\n  simpa [h, hm, hn] using gcd_mul_lcm m n\n#align lcm_ne_zero lcm_ne_zero\n\n",
 "lcm_eq_mul":
 "theorem coprime.lcm_eq_mul {m n : ℕ} (h : coprime m n) : lcm m n = m * n := by\n  rw [← one_mul (lcm m n), ← h.gcd_eq_one, gcd_mul_lcm]\n#align coprime.lcm_eq_mul coprime.lcm_eq_mul\n\n",
 "lcm_dvd_mul":
 "theorem lcm_dvd_mul (m n : ℕ) : lcm m n ∣ m * n :=\n  lcm_dvd (dvd_mul_right _ _) (dvd_mul_left _ _)\n#align lcm_dvd_mul lcm_dvd_mul\n\n",
 "lcm_dvd_iff":
 "#print lcm_dvd_iff /-\ntheorem lcm_dvd_iff {m n k : ℕ} : lcm m n ∣ k ↔ m ∣ k ∧ n ∣ k :=\n  ⟨fun h => ⟨(dvd_lcm_left _ _).trans h, (dvd_lcm_right _ _).trans h⟩, and_imp.2 lcm_dvd⟩\n#align lcm_dvd_iff lcm_dvd_iff\n-/\n\n",
 "lcm_dvd":
 "#print lcm_dvd /-\ntheorem lcm_dvd {m n k : ℕ} (H1 : m ∣ k) (H2 : n ∣ k) : lcm m n ∣ k :=\n  or.elim (nat.eq_zero_or_pos k) (fun h => by rw [h] <;> exact dvd_zero _) fun kpos =>\n    dvd_of_mul_dvd_mul_left (gcd_pos_of_pos_left n (pos_of_dvd_of_pos H1 kpos)) <| by\n      rw [gcd_mul_lcm, ← gcd_mul_right, mul_comm n k] <;> exact dvd_gcd (mul_dvd_mul_left _ H2) (mul_dvd_mul_right H1 _)\n#align lcm_dvd lcm_dvd\n-/\n\n",
 "lcm_comm":
 "#print lcm_comm /-\ntheorem lcm_comm (m n : ℕ) : lcm m n = lcm n m := by delta lcm <;> rw [mul_comm, gcd_comm]\n#align lcm_comm lcm_comm\n-/\n\n",
 "lcm_assoc":
 "#print lcm_assoc /-\ntheorem lcm_assoc (m n k : ℕ) : lcm (lcm m n) k = lcm m (lcm n k) :=\n  dvd_antisymm\n    (lcm_dvd (lcm_dvd (dvd_lcm_left m (lcm n k)) ((dvd_lcm_left n k).trans (dvd_lcm_right m (lcm n k))))\n      ((dvd_lcm_right n k).trans (dvd_lcm_right m (lcm n k))))\n    (lcm_dvd ((dvd_lcm_left m n).trans (dvd_lcm_left (lcm m n) k))\n      (lcm_dvd ((dvd_lcm_right m n).trans (dvd_lcm_left (lcm m n) k)) (dvd_lcm_right (lcm m n) k)))\n#align lcm_assoc lcm_assoc\n-/\n\n",
 "gcd_self_add_right":
 "@[simp]\ntheorem gcd_self_add_right (m n : ℕ) : gcd m (m + n) = gcd m n := by rw [add_comm, gcd_add_self_right]\n#align gcd_self_add_right gcd_self_add_right\n\n",
 "gcd_self_add_left":
 "@[simp]\ntheorem gcd_self_add_left (m n : ℕ) : gcd (m + n) m = gcd n m := by rw [add_comm, gcd_add_self_left]\n#align gcd_self_add_left gcd_self_add_left\n\n",
 "gcd_right":
 "theorem coprime.gcd_right (k : ℕ) {m n : ℕ} (hmn : coprime m n) : coprime m (gcd k n) :=\n  hmn.coprime_dvd_right <| gcd_dvd_right k n\n#align coprime.gcd_right coprime.gcd_right\n\n",
 "gcd_pos_of_pos_right":
 "theorem gcd_pos_of_pos_right (m : ℕ) {n : ℕ} (npos : 0 < n) : 0 < gcd m n :=\n  pos_of_dvd_of_pos (gcd_dvd_right m n) npos\n#align gcd_pos_of_pos_right gcd_pos_of_pos_right\n\n",
 "gcd_pos_of_pos_left":
 "theorem gcd_pos_of_pos_left {m : ℕ} (n : ℕ) (mpos : 0 < m) : 0 < gcd m n :=\n  pos_of_dvd_of_pos (gcd_dvd_left m n) mpos\n#align gcd_pos_of_pos_left gcd_pos_of_pos_left\n\n",
 "gcd_one_right":
 "#print gcd_one_right /-\n@[simp]\ntheorem gcd_one_right (n : ℕ) : gcd n 1 = 1 :=\n  Eq.trans (gcd_comm n 1) <| gcd_one_left n\n#align gcd_one_right gcd_one_right\n-/\n\n",
 "gcd_mul_right_right":
 "@[simp]\ntheorem gcd_mul_right_right (m n : ℕ) : gcd n (n * m) = n := by rw [gcd_comm, gcd_mul_right_left]\n#align gcd_mul_right_right gcd_mul_right_right\n\n",
 "gcd_mul_right_left":
 "@[simp]\ntheorem gcd_mul_right_left (m n : ℕ) : gcd (n * m) n = n := by rw [mul_comm, gcd_mul_left_left]\n#align gcd_mul_right_left gcd_mul_right_left\n\n",
 "gcd_mul_right_cancel_right":
 "theorem coprime.gcd_mul_right_cancel_right {k m : ℕ} (n : ℕ) (H : coprime k m) : gcd m (n * k) = gcd m n := by\n  rw [mul_comm n k, H.gcd_mul_left_cancel_right n]\n#align coprime.gcd_mul_right_cancel_right coprime.gcd_mul_right_cancel_right\n\n",
 "gcd_mul_right_cancel":
 "theorem coprime.gcd_mul_right_cancel (m : ℕ) {k n : ℕ} (H : coprime k n) : gcd (m * k) n = gcd m n := by\n  rw [mul_comm m k, H.gcd_mul_left_cancel m]\n#align coprime.gcd_mul_right_cancel coprime.gcd_mul_right_cancel\n\n",
 "gcd_mul_right_add_right":
 "@[simp]\ntheorem gcd_mul_right_add_right (m n k : ℕ) : gcd m (k * m + n) = gcd m n := by simp [add_comm _ n]\n#align gcd_mul_right_add_right gcd_mul_right_add_right\n\n",
 "gcd_mul_right_add_left":
 "@[simp]\ntheorem gcd_mul_right_add_left (m n k : ℕ) : gcd (k * n + m) n = gcd m n := by\n  rw [gcd_comm, gcd_mul_right_add_right, gcd_comm]\n#align gcd_mul_right_add_left gcd_mul_right_add_left\n\n",
 "gcd_mul_right":
 "#print gcd_mul_right /-\ntheorem gcd_mul_right (m n k : ℕ) : gcd (m * n) (k * n) = gcd m k * n := by\n  rw [mul_comm m n, mul_comm k n, mul_comm (gcd m k) n, gcd_mul_left]\n#align gcd_mul_right gcd_mul_right\n-/\n\n",
 "gcd_mul_of_coprime_of_dvd":
 "theorem gcd_mul_of_coprime_of_dvd {a b c : ℕ} (hac : coprime a c) (b_dvd_c : b ∣ c) : gcd (a * b) c = b :=\n  by\n  rcases exists_eq_mul_left_of_dvd b_dvd_c with ⟨d, rfl⟩\n  rw [gcd_mul_right]\n  convert one_mul b\n  exact coprime.coprime_mul_right_right hac\n#align gcd_mul_of_coprime_of_dvd gcd_mul_of_coprime_of_dvd\n\n",
 "gcd_mul_left_right":
 "@[simp]\ntheorem gcd_mul_left_right (m n : ℕ) : gcd n (m * n) = n := by rw [gcd_comm, gcd_mul_left_left]\n#align gcd_mul_left_right gcd_mul_left_right\n\n",
 "gcd_mul_left_left":
 "-- Lemmas where one argument is a multiple of the other\n@[simp]\ntheorem gcd_mul_left_left (m n : ℕ) : gcd (m * n) n = n :=\n  dvd_antisymm (gcd_dvd_right _ _) (dvd_gcd (dvd_mul_left _ _) dvd_rfl)\n#align gcd_mul_left_left gcd_mul_left_left\n\n",
 "gcd_mul_left_cancel_right":
 "theorem coprime.gcd_mul_left_cancel_right {k m : ℕ} (n : ℕ) (H : coprime k m) : gcd m (k * n) = gcd m n := by\n  rw [gcd_comm m n, gcd_comm m (k * n), H.gcd_mul_left_cancel n]\n#align coprime.gcd_mul_left_cancel_right coprime.gcd_mul_left_cancel_right\n\n",
 "gcd_mul_left_cancel":
 "theorem coprime.gcd_mul_left_cancel {k : ℕ} (m : ℕ) {n : ℕ} (H : coprime k n) : gcd (k * m) n = gcd m n :=\n  have H1 : coprime (gcd (k * m) n) k := by rw [coprime, gcd_assoc, H.symm.gcd_eq_one, gcd_one_right]\n  dvd_antisymm (dvd_gcd (H1.dvd_of_dvd_mul_left (gcd_dvd_left _ _)) (gcd_dvd_right _ _)) (gcd_dvd_gcd_mul_left _ _ _)\n#align coprime.gcd_mul_left_cancel coprime.gcd_mul_left_cancel\n\n",
 "gcd_mul_left_add_right":
 "@[simp]\ntheorem gcd_mul_left_add_right (m n k : ℕ) : gcd m (m * k + n) = gcd m n := by simp [add_comm _ n]\n#align gcd_mul_left_add_right gcd_mul_left_add_right\n\n",
 "gcd_mul_left_add_left":
 "@[simp]\ntheorem gcd_mul_left_add_left (m n k : ℕ) : gcd (n * k + m) n = gcd m n := by\n  rw [gcd_comm, gcd_mul_left_add_right, gcd_comm]\n#align gcd_mul_left_add_left gcd_mul_left_add_left\n\n",
 "gcd_mul_left":
 "#print gcd_mul_left /-\ntheorem gcd_mul_left (m n k : ℕ) : gcd (m * n) (m * k) = m * gcd n k :=\n  gcd.induction n k (fun k => by repeat' first |rw [MulZeroClass.mul_zero]|rw [gcd_zero_left]) fun k n H IH => by\n    rwa [← mul_mod_mul_left, ← gcd_rec, ← gcd_rec] at IH\n#align gcd_mul_left gcd_mul_left\n-/\n\n",
 "gcd_mul_lcm":
 "#print gcd_mul_lcm /-\ntheorem gcd_mul_lcm (m n : ℕ) : gcd m n * lcm m n = m * n := by\n  delta lcm <;> rw [Nat.mul_div_cancel' ((gcd_dvd_left m n).trans (dvd_mul_right m n))]\n#align gcd_mul_lcm gcd_mul_lcm\n-/\n\n",
 "gcd_mul_gcd_of_coprime_of_mul_eq_mul":
 "theorem gcd_mul_gcd_of_coprime_of_mul_eq_mul {a b c d : ℕ} (cop : c.coprime d) (h : a * b = c * d) :\n    a.gcd c * b.gcd c = c := by\n  apply dvd_antisymm\n  · apply Nat.coprime.dvd_of_dvd_mul_right (Nat.coprime.mul (cop.gcd_left _) (cop.gcd_left _))\n    rw [← h]\n    apply mul_dvd_mul (gcd_dvd _ _).1 (gcd_dvd _ _).1\n  · rw [gcd_comm a _, gcd_comm b _]\n    trans c.gcd (a * b)\n    rw [h, gcd_mul_right_right d c]\n    apply gcd_mul_dvd_mul_gcd\n#align gcd_mul_gcd_of_coprime_of_mul_eq_mul gcd_mul_gcd_of_coprime_of_mul_eq_mul\n\n",
 "gcd_mul_dvd_mul_gcd":
 "#print gcd_mul_dvd_mul_gcd /-\ntheorem gcd_mul_dvd_mul_gcd (k m n : ℕ) : gcd k (m * n) ∣ gcd k m * gcd k n :=\n  by\n  rcases prod_dvd_and_dvd_of_dvd_prod <| gcd_dvd_right k (m * n) with ⟨⟨⟨m', hm'⟩, ⟨n', hn'⟩⟩, h⟩\n  replace h : gcd k (m * n) = m' * n' := h\n  rw [h]\n  have hm'n' : m' * n' ∣ k := h ▸ gcd_dvd_left _ _\n  apply mul_dvd_mul\n  · have hm'k : m' ∣ k := (dvd_mul_right m' n').trans hm'n'\n    exact dvd_gcd hm'k hm'\n  · have hn'k : n' ∣ k := (dvd_mul_left n' m').trans hm'n'\n    exact dvd_gcd hn'k hn'\n#align gcd_mul_dvd_mul_gcd gcd_mul_dvd_mul_gcd\n-/\n\n",
 "gcd_mul":
 "theorem coprime.gcd_mul (k : ℕ) {m n : ℕ} (h : coprime m n) : gcd k (m * n) = gcd k m * gcd k n :=\n  dvd_antisymm (gcd_mul_dvd_mul_gcd k m n)\n    ((h.gcd_both k k).mul_dvd_of_dvd_of_dvd (gcd_dvd_gcd_mul_right_right _ _ _) (gcd_dvd_gcd_mul_left_right _ _ _))\n#align coprime.gcd_mul coprime.gcd_mul\n\n",
 "gcd_left":
 "theorem coprime.gcd_left (k : ℕ) {m n : ℕ} (hmn : coprime m n) : coprime (gcd k m) n :=\n  hmn.coprime_dvd_left <| gcd_dvd_right k m\n#align coprime.gcd_left coprime.gcd_left\n\n",
 "gcd_le_right":
 "theorem gcd_le_right (m) {n} (h : 0 < n) : gcd m n ≤ n :=\n  le_of_dvd h <| gcd_dvd_right m n\n#align gcd_le_right gcd_le_right\n\n",
 "gcd_le_left":
 "theorem gcd_le_left {m} (n) (h : 0 < m) : gcd m n ≤ m :=\n  le_of_dvd h <| gcd_dvd_left m n\n#align gcd_le_left gcd_le_left\n\n",
 "gcd_greatest":
 "#print gcd_greatest /-\ntheorem gcd_greatest {a b d : ℕ} (hda : d ∣ a) (hdb : d ∣ b) (hd : ∀ e : ℕ, e ∣ a → e ∣ b → e ∣ d) : d = a.gcd b :=\n  (dvd_antisymm (hd _ (gcd_dvd_left a b) (gcd_dvd_right a b)) (dvd_gcd hda hdb)).symm\n#align gcd_greatest gcd_greatest\n-/\n\n",
 "gcd_gcd_self_right_right":
 "@[simp]\ntheorem gcd_gcd_self_right_right (m n : ℕ) : gcd m (gcd n m) = gcd n m := by rw [gcd_comm n m, gcd_gcd_self_right_left]\n#align gcd_gcd_self_right_right gcd_gcd_self_right_right\n\n",
 "gcd_gcd_self_right_left":
 "-- Lemmas for repeated application of `gcd`\n@[simp]\ntheorem gcd_gcd_self_right_left (m n : ℕ) : gcd m (gcd m n) = gcd m n :=\n  dvd_antisymm (gcd_dvd_right _ _) (dvd_gcd (gcd_dvd_left _ _) dvd_rfl)\n#align gcd_gcd_self_right_left gcd_gcd_self_right_left\n\n",
 "gcd_gcd_self_left_right":
 "@[simp]\ntheorem gcd_gcd_self_left_right (m n : ℕ) : gcd (gcd n m) m = gcd n m := by rw [gcd_comm, gcd_gcd_self_right_right]\n#align gcd_gcd_self_left_right gcd_gcd_self_left_right\n\n",
 "gcd_gcd_self_left_left":
 "@[simp]\ntheorem gcd_gcd_self_left_left (m n : ℕ) : gcd (gcd m n) m = gcd m n := by rw [gcd_comm m n, gcd_gcd_self_left_right]\n#align gcd_gcd_self_left_left gcd_gcd_self_left_left\n\n",
 "gcd_eq_zero_iff":
 "#print gcd_eq_zero_iff /-\n@[simp]\ntheorem gcd_eq_zero_iff {i j : ℕ} : gcd i j = 0 ↔ i = 0 ∧ j = 0 :=\n  by\n  constructor\n  · intro h\n    exact ⟨eq_zero_of_gcd_eq_zero_left h, eq_zero_of_gcd_eq_zero_right h⟩\n  · rintro ⟨rfl, rfl⟩\n    exact Nat.gcd_zero_right 0\n#align gcd_eq_zero_iff gcd_eq_zero_iff\n-/\n\n",
 "gcd_eq_right_iff_dvd":
 "theorem gcd_eq_right_iff_dvd {m n : ℕ} : m ∣ n ↔ gcd n m = m := by rw [gcd_comm] <;> apply gcd_eq_left_iff_dvd\n#align gcd_eq_right_iff_dvd gcd_eq_right_iff_dvd\n\n",
 "gcd_eq_right":
 "theorem gcd_eq_right {m n : ℕ} (H : n ∣ m) : gcd m n = n := by rw [gcd_comm, gcd_eq_left H]\n#align gcd_eq_right gcd_eq_right\n\n",
 "gcd_eq_one":
 "theorem coprime.gcd_eq_one {m n : ℕ} (h : coprime m n) : gcd m n = 1 :=\n  h\n#align coprime.gcd_eq_one coprime.gcd_eq_one\n\n",
 "gcd_eq_left_iff_dvd":
 "theorem gcd_eq_left_iff_dvd {m n : ℕ} : m ∣ n ↔ gcd m n = m :=\n  ⟨fun h => by rw [gcd_rec, mod_eq_zero_of_dvd h, gcd_zero_left], fun h => h ▸ gcd_dvd_right m n⟩\n#align gcd_eq_left_iff_dvd gcd_eq_left_iff_dvd\n\n",
 "gcd_eq_left":
 "theorem gcd_eq_left {m n : ℕ} (H : m ∣ n) : gcd m n = m :=\n  dvd_antisymm (gcd_dvd_left _ _) (dvd_gcd dvd_rfl H)\n#align gcd_eq_left gcd_eq_left\n\n",
 "gcd_dvd_right":
 "theorem gcd_dvd_right (m n : ℕ) : gcd m n ∣ n :=\n  (gcd_dvd m n).right\n#align gcd_dvd_right gcd_dvd_right\n\n",
 "gcd_dvd_left":
 "theorem gcd_dvd_left (m n : ℕ) : gcd m n ∣ m :=\n  (gcd_dvd m n).left\n#align gcd_dvd_left gcd_dvd_left\n\n",
 "gcd_dvd_gcd_of_dvd_right":
 "theorem gcd_dvd_gcd_of_dvd_right {m k : ℕ} (n : ℕ) (H : m ∣ k) : gcd n m ∣ gcd n k :=\n  dvd_gcd (gcd_dvd_left n m) ((gcd_dvd_right n m).trans H)\n#align gcd_dvd_gcd_of_dvd_right gcd_dvd_gcd_of_dvd_right\n\n",
 "gcd_dvd_gcd_of_dvd_left":
 "theorem gcd_dvd_gcd_of_dvd_left {m k : ℕ} (n : ℕ) (H : m ∣ k) : gcd m n ∣ gcd k n :=\n  dvd_gcd ((gcd_dvd_left m n).trans H) (gcd_dvd_right m n)\n#align gcd_dvd_gcd_of_dvd_left gcd_dvd_gcd_of_dvd_left\n\n",
 "gcd_dvd_gcd_mul_right_right":
 "#print gcd_dvd_gcd_mul_right_right /-\ntheorem gcd_dvd_gcd_mul_right_right (m n k : ℕ) : gcd m n ∣ gcd m (n * k) :=\n  gcd_dvd_gcd_of_dvd_right _ (dvd_mul_right _ _)\n#align gcd_dvd_gcd_mul_right_right gcd_dvd_gcd_mul_right_right\n-/\n\n",
 "gcd_dvd_gcd_mul_right":
 "#print gcd_dvd_gcd_mul_right /-\ntheorem gcd_dvd_gcd_mul_right (m n k : ℕ) : gcd m n ∣ gcd (m * k) n :=\n  gcd_dvd_gcd_of_dvd_left _ (dvd_mul_right _ _)\n#align gcd_dvd_gcd_mul_right gcd_dvd_gcd_mul_right\n-/\n\n",
 "gcd_dvd_gcd_mul_left_right":
 "#print gcd_dvd_gcd_mul_left_right /-\ntheorem gcd_dvd_gcd_mul_left_right (m n k : ℕ) : gcd m n ∣ gcd m (k * n) :=\n  gcd_dvd_gcd_of_dvd_right _ (dvd_mul_left _ _)\n#align gcd_dvd_gcd_mul_left_right gcd_dvd_gcd_mul_left_right\n-/\n\n",
 "gcd_dvd_gcd_mul_left":
 "#print gcd_dvd_gcd_mul_left /-\ntheorem gcd_dvd_gcd_mul_left (m n k : ℕ) : gcd m n ∣ gcd (k * m) n :=\n  gcd_dvd_gcd_of_dvd_left _ (dvd_mul_left _ _)\n#align gcd_dvd_gcd_mul_left gcd_dvd_gcd_mul_left\n-/\n\n",
 "gcd_dvd":
 "/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura\n-/\ntheorem gcd_dvd (m n : ℕ) : gcd m n ∣ m ∧ gcd m n ∣ n :=\n  gcd.induction m n (fun n => by rw [gcd_zero_left] <;> exact ⟨dvd_zero n, dvd_refl n⟩) fun m n npos => by\n    rw [← gcd_rec] <;> exact fun ⟨IH₁, IH₂⟩ => ⟨IH₂, (dvd_mod_iff IH₂).1 IH₁⟩\n#align gcd_dvd gcd_dvd\n\n",
 "gcd_div":
 "theorem gcd_div {m n k : ℕ} (H1 : k ∣ m) (H2 : k ∣ n) : gcd (m / k) (n / k) = gcd m n / k :=\n  (Decidable.eq_or_ne k 0).elim (fun k0 => by rw [k0, nat.div_zero, nat.div_zero, nat.div_zero, gcd_zero_right])\n    fun H3 =>\n    mul_right_cancel₀ H3 <| by\n      rw [Nat.div_mul_cancel (dvd_gcd H1 H2), ← gcd_mul_right, Nat.div_mul_cancel H1, Nat.div_mul_cancel H2]\n#align gcd_div gcd_div\n\n",
 "gcd_comm":
 "#print gcd_comm /-\ntheorem gcd_comm (m n : ℕ) : gcd m n = gcd n m :=\n  dvd_antisymm (dvd_gcd (gcd_dvd_right m n) (gcd_dvd_left m n)) (dvd_gcd (gcd_dvd_right n m) (gcd_dvd_left n m))\n#align gcd_comm gcd_comm\n-/\n\n",
 "gcd_both":
 "theorem coprime.gcd_both (k l : ℕ) {m n : ℕ} (hmn : coprime m n) : coprime (gcd k m) (gcd l n) :=\n  (hmn.gcd_left k).gcd_right l\n#align coprime.gcd_both coprime.gcd_both\n\n",
 "gcd_assoc":
 "#print gcd_assoc /-\ntheorem gcd_assoc (m n k : ℕ) : gcd (gcd m n) k = gcd m (gcd n k) :=\n  dvd_antisymm\n    (dvd_gcd ((gcd_dvd_left (gcd m n) k).trans (gcd_dvd_left m n))\n      (dvd_gcd ((gcd_dvd_left (gcd m n) k).trans (gcd_dvd_right m n)) (gcd_dvd_right (gcd m n) k)))\n    (dvd_gcd (dvd_gcd (gcd_dvd_left m (gcd n k)) ((gcd_dvd_right m (gcd n k)).trans (gcd_dvd_left n k)))\n      ((gcd_dvd_right m (gcd n k)).trans (gcd_dvd_right n k)))\n#align gcd_assoc gcd_assoc\n-/\n\n",
 "gcd_add_self_right":
 "-- Lemmas where one argument consists of an addition of the other\n@[simp]\ntheorem gcd_add_self_right (m n : ℕ) : gcd m (n + m) = gcd m n :=\n  Eq.trans (by rw [one_mul]) (gcd_add_mul_right_right m n 1)\n#align gcd_add_self_right gcd_add_self_right\n\n",
 "gcd_add_self_left":
 "@[simp]\ntheorem gcd_add_self_left (m n : ℕ) : gcd (m + n) n = gcd m n := by rw [gcd_comm, gcd_add_self_right, gcd_comm]\n#align gcd_add_self_left gcd_add_self_left\n\n",
 "gcd_add_mul_right_right":
 "-- Lemmas where one argument consists of addition of a multiple of the other\n@[simp]\ntheorem gcd_add_mul_right_right (m n k : ℕ) : gcd m (n + k * m) = gcd m n := by\n  simp [gcd_rec m (n + k * m), gcd_rec m n]\n#align gcd_add_mul_right_right gcd_add_mul_right_right\n\n",
 "gcd_add_mul_right_left":
 "@[simp]\ntheorem gcd_add_mul_right_left (m n k : ℕ) : gcd (m + k * n) n = gcd m n := by\n  rw [gcd_comm, gcd_add_mul_right_right, gcd_comm]\n#align gcd_add_mul_right_left gcd_add_mul_right_left\n\n",
 "gcd_add_mul_left_right":
 "@[simp]\ntheorem gcd_add_mul_left_right (m n k : ℕ) : gcd m (n + m * k) = gcd m n := by simp [gcd_rec m (n + m * k), gcd_rec m n]\n#align gcd_add_mul_left_right gcd_add_mul_left_right\n\n",
 "gcd_add_mul_left_left":
 "@[simp]\ntheorem gcd_add_mul_left_left (m n k : ℕ) : gcd (m + n * k) n = gcd m n := by\n  rw [gcd_comm, gcd_add_mul_left_right, gcd_comm]\n#align gcd_add_mul_left_left gcd_add_mul_left_left\n\n",
 "exists_coprime'":
 "theorem exists_coprime' {m n : ℕ} (H : 0 < gcd m n) : ∃ g m' n', 0 < g ∧ coprime m' n' ∧ m = m' * g ∧ n = n' * g :=\n  let ⟨m', n', h⟩ := exists_coprime H\n  ⟨_, m', n', H, h⟩\n#align exists_coprime' exists_coprime'\n\n",
 "exists_coprime":
 "theorem exists_coprime {m n : ℕ} (H : 0 < gcd m n) : ∃ m' n', coprime m' n' ∧ m = m' * gcd m n ∧ n = n' * gcd m n :=\n  ⟨_, _, coprime_div_gcd_div_gcd H, (Nat.div_mul_cancel (gcd_dvd_left m n)).symm,\n    (Nat.div_mul_cancel (gcd_dvd_right m n)).symm⟩\n#align exists_coprime exists_coprime\n\n",
 "eq_zero_of_gcd_eq_zero_right":
 "theorem eq_zero_of_gcd_eq_zero_right {m n : ℕ} (H : gcd m n = 0) : n = 0 := by\n  rw [gcd_comm] at H <;> exact eq_zero_of_gcd_eq_zero_left H\n#align eq_zero_of_gcd_eq_zero_right eq_zero_of_gcd_eq_zero_right\n\n",
 "eq_zero_of_gcd_eq_zero_left":
 "theorem eq_zero_of_gcd_eq_zero_left {m n : ℕ} (H : gcd m n = 0) : m = 0 :=\n  or.elim (nat.eq_zero_or_pos m) id fun H1 : 0 < m => absurd (Eq.symm H) (ne_of_lt (gcd_pos_of_pos_left _ H1))\n#align eq_zero_of_gcd_eq_zero_left eq_zero_of_gcd_eq_zero_left\n\n",
 "eq_one_of_dvd_coprimes":
 "/-- If `k:ℕ` divides coprime `a` and `b` then `k = 1` -/\ntheorem eq_one_of_dvd_coprimes {a b k : ℕ} (h_ab_coprime : coprime a b) (hka : k ∣ a) (hkb : k ∣ b) : k = 1 :=\n  by\n  rw [coprime_iff_gcd_eq_one] at h_ab_coprime\n  have h1 := dvd_gcd hka hkb\n  rw [h_ab_coprime] at h1\n  exact nat.dvd_one.mp h1\n#align eq_one_of_dvd_coprimes eq_one_of_dvd_coprimes\n\n",
 "eq_one_of_dvd":
 "theorem coprime.eq_one_of_dvd {k m : ℕ} (H : coprime k m) (d : k ∣ m) : k = 1 := by rw [← H.gcd_eq_one, gcd_eq_left d]\n#align coprime.eq_one_of_dvd coprime.eq_one_of_dvd\n\n",
 "eq_of_mul_eq_zero":
 "theorem coprime.eq_of_mul_eq_zero {m n : ℕ} (h : m.coprime n) (hmn : m * n = 0) : m = 0 ∧ n = 1 ∨ m = 1 ∧ n = 0 :=\n  (nat.eq_zero_of_mul_eq_zero hmn).imp (fun hm => ⟨hm, n.coprime_zero_left.mp <| hm ▸ h⟩) fun hn =>\n    ⟨m.coprime_zero_left.mp <| hn ▸ h.symm, hn⟩\n#align coprime.eq_of_mul_eq_zero coprime.eq_of_mul_eq_zero\n\n",
 "dvd_of_dvd_mul_right":
 "theorem coprime.dvd_of_dvd_mul_right {m n k : ℕ} (H1 : coprime k n) (H2 : k ∣ m * n) : k ∣ m :=\n  by\n  let t := dvd_gcd (dvd_mul_left k m) H2\n  rwa [gcd_mul_left, H1.gcd_eq_one, mul_one] at t\n#align coprime.dvd_of_dvd_mul_right coprime.dvd_of_dvd_mul_right\n\n",
 "dvd_of_dvd_mul_left":
 "theorem coprime.dvd_of_dvd_mul_left {m n k : ℕ} (H1 : coprime k m) (H2 : k ∣ m * n) : k ∣ n := by\n  rw [mul_comm] at H2 <;> exact H1.dvd_of_dvd_mul_right H2\n#align coprime.dvd_of_dvd_mul_left coprime.dvd_of_dvd_mul_left\n\n",
 "dvd_mul_right":
 "theorem coprime.dvd_mul_right {m n k : ℕ} (H : coprime k n) : k ∣ m * n ↔ k ∣ m :=\n  ⟨H.dvd_of_dvd_mul_right, fun h => dvd_mul_of_dvd_left h n⟩\n#align coprime.dvd_mul_right coprime.dvd_mul_right\n\n",
 "dvd_mul_left":
 "theorem coprime.dvd_mul_left {m n k : ℕ} (H : coprime k m) : k ∣ m * n ↔ k ∣ n :=\n  ⟨H.dvd_of_dvd_mul_left, fun h => dvd_mul_of_dvd_right h m⟩\n#align coprime.dvd_mul_left coprime.dvd_mul_left\n\n",
 "dvd_mul":
 "#print dvd_mul /-\ntheorem dvd_mul {x m n : ℕ} : x ∣ m * n ↔ ∃ y z, y ∣ m ∧ z ∣ n ∧ y * z = x :=\n  by\n  constructor\n  · intro h\n    obtain ⟨⟨⟨y, hy⟩, ⟨z, hz⟩⟩, rfl⟩ := prod_dvd_and_dvd_of_dvd_prod h\n    exact ⟨y, z, hy, hz, rfl⟩\n  · rintro ⟨y, z, hy, hz, rfl⟩\n    exact mul_dvd_mul hy hz\n#align dvd_mul dvd_mul\n-/\n\n",
 "dvd_lcm_right":
 "#print dvd_lcm_right /-\ntheorem dvd_lcm_right (m n : ℕ) : n ∣ lcm m n :=\n  lcm_comm n m ▸ dvd_lcm_left n m\n#align dvd_lcm_right dvd_lcm_right\n-/\n\n",
 "dvd_lcm_left":
 "#print dvd_lcm_left /-\ntheorem dvd_lcm_left (m n : ℕ) : m ∣ lcm m n :=\n  Dvd.intro (n / gcd m n) (Nat.mul_div_assoc _ <| gcd_dvd_right m n).symm\n#align dvd_lcm_left dvd_lcm_left\n-/\n\n",
 "dvd_gcd_iff":
 "#print dvd_gcd_iff /-\ntheorem dvd_gcd_iff {m n k : ℕ} : k ∣ gcd m n ↔ k ∣ m ∧ k ∣ n :=\n  iff.intro (fun h => ⟨h.trans (gcd_dvd m n).left, h.trans (gcd_dvd m n).right⟩) fun h => dvd_gcd h.left h.right\n#align dvd_gcd_iff dvd_gcd_iff\n-/\n\n",
 "dvd_gcd":
 "theorem dvd_gcd {m n k : ℕ} : k ∣ m → k ∣ n → k ∣ gcd m n :=\n  gcd.induction m n (fun n _ kn => by rw [gcd_zero_left] <;> exact kn) fun n m mpos IH H1 H2 => by\n    rw [gcd_rec] <;> exact IH ((dvd_mod_iff H1).2 H2) H1\n#align dvd_gcd dvd_gcd\n\n",
 "coprime_zero_right":
 "@[simp]\ntheorem coprime_zero_right (n : ℕ) : coprime n 0 ↔ n = 1 := by simp [coprime]\n#align coprime_zero_right coprime_zero_right\n\n",
 "coprime_zero_left":
 "@[simp]\ntheorem coprime_zero_left (n : ℕ) : coprime 0 n ↔ n = 1 := by simp [coprime]\n#align coprime_zero_left coprime_zero_left\n\n",
 "coprime_self_add_right":
 "@[simp]\ntheorem coprime_self_add_right {m n : ℕ} : coprime m (m + n) ↔ coprime m n := by rw [add_comm, coprime_add_self_right]\n#align coprime_self_add_right coprime_self_add_right\n\n",
 "coprime_self_add_left":
 "@[simp]\ntheorem coprime_self_add_left {m n : ℕ} : coprime (m + n) m ↔ coprime n m := by rw [coprime, coprime, gcd_self_add_left]\n#align coprime_self_add_left coprime_self_add_left\n\n",
 "coprime_self":
 "@[simp]\ntheorem coprime_self (n : ℕ) : coprime n n ↔ n = 1 := by simp [coprime]\n#align coprime_self coprime_self\n\n",
 "coprime_pow_right_iff":
 "@[simp]\ntheorem coprime_pow_right_iff {n : ℕ} (hn : 0 < n) (a b : ℕ) : Nat.coprime a (b ^ n) ↔ Nat.coprime a b := by\n  rw [Nat.coprime_comm, coprime_pow_left_iff hn, Nat.coprime_comm]\n#align coprime_pow_right_iff coprime_pow_right_iff\n\n",
 "coprime_pow_left_iff":
 "@[simp]\ntheorem coprime_pow_left_iff {n : ℕ} (hn : 0 < n) (a b : ℕ) : Nat.coprime (a ^ n) b ↔ Nat.coprime a b :=\n  by\n  obtain ⟨n, rfl⟩ := exists_eq_succ_of_ne_zero hn.ne'\n  rw [pow_succ, Nat.coprime_mul_iff_left]\n  exact ⟨And.left, fun hab => ⟨hab, hab.pow_left _⟩⟩\n#align coprime_pow_left_iff coprime_pow_left_iff\n\n",
 "coprime_one_right_iff":
 "@[simp]\ntheorem coprime_one_right_iff (n : ℕ) : coprime n 1 ↔ True := by simp [coprime]\n#align coprime_one_right_iff coprime_one_right_iff\n\n",
 "coprime_one_right":
 "theorem coprime_one_right : ∀ n, coprime n 1 :=\n  gcd_one_right\n#align coprime_one_right coprime_one_right\n\n",
 "coprime_one_left_iff":
 "@[simp]\ntheorem coprime_one_left_iff (n : ℕ) : coprime 1 n ↔ True := by simp [coprime]\n#align coprime_one_left_iff coprime_one_left_iff\n\n",
 "coprime_one_left":
 "theorem coprime_one_left : ∀ n, coprime 1 n :=\n  gcd_one_left\n#align coprime_one_left coprime_one_left\n\n",
 "coprime_mul_right_right":
 "theorem coprime.coprime_mul_right_right {k m n : ℕ} (H : coprime m (n * k)) : coprime m n :=\n  H.coprime_dvd_right (dvd_mul_right _ _)\n#align coprime.coprime_mul_right_right coprime.coprime_mul_right_right\n\n",
 "coprime_mul_right_add_right":
 "@[simp]\ntheorem coprime_mul_right_add_right (m n k : ℕ) : coprime m (k * m + n) ↔ coprime m n := by\n  rw [coprime, coprime, gcd_mul_right_add_right]\n#align coprime_mul_right_add_right coprime_mul_right_add_right\n\n",
 "coprime_mul_right_add_left":
 "@[simp]\ntheorem coprime_mul_right_add_left (m n k : ℕ) : coprime (k * n + m) n ↔ coprime m n := by\n  rw [coprime, coprime, gcd_mul_right_add_left]\n#align coprime_mul_right_add_left coprime_mul_right_add_left\n\n",
 "coprime_mul_right":
 "theorem coprime.coprime_mul_right {k m n : ℕ} (H : coprime (m * k) n) : coprime m n :=\n  H.coprime_dvd_left (dvd_mul_right _ _)\n#align coprime.coprime_mul_right coprime.coprime_mul_right\n\n",
 "coprime_mul_left_right":
 "theorem coprime.coprime_mul_left_right {k m n : ℕ} (H : coprime m (k * n)) : coprime m n :=\n  H.coprime_dvd_right (dvd_mul_left _ _)\n#align coprime.coprime_mul_left_right coprime.coprime_mul_left_right\n\n",
 "coprime_mul_left_add_right":
 "@[simp]\ntheorem coprime_mul_left_add_right (m n k : ℕ) : coprime m (m * k + n) ↔ coprime m n := by\n  rw [coprime, coprime, gcd_mul_left_add_right]\n#align coprime_mul_left_add_right coprime_mul_left_add_right\n\n",
 "coprime_mul_left_add_left":
 "@[simp]\ntheorem coprime_mul_left_add_left (m n k : ℕ) : coprime (n * k + m) n ↔ coprime m n := by\n  rw [coprime, coprime, gcd_mul_left_add_left]\n#align coprime_mul_left_add_left coprime_mul_left_add_left\n\n",
 "coprime_mul_left":
 "theorem coprime.coprime_mul_left {k m n : ℕ} (H : coprime (k * m) n) : coprime m n :=\n  H.coprime_dvd_left (dvd_mul_left _ _)\n#align coprime.coprime_mul_left coprime.coprime_mul_left\n\n",
 "coprime_mul_iff_right":
 "theorem coprime_mul_iff_right {k m n : ℕ} : coprime k (m * n) ↔ coprime k m ∧ coprime k n := by\n  simpa only [coprime_comm] using coprime_mul_iff_left\n#align coprime_mul_iff_right coprime_mul_iff_right\n\n",
 "coprime_mul_iff_left":
 "theorem coprime_mul_iff_left {k m n : ℕ} : coprime (m * n) k ↔ coprime m k ∧ coprime n k :=\n  ⟨fun h => ⟨coprime.coprime_mul_right h, coprime.coprime_mul_left h⟩, fun ⟨h, _⟩ => by\n    rwa [coprime_iff_gcd_eq_one, coprime.gcd_mul_left_cancel n h]⟩\n#align coprime_mul_iff_left coprime_mul_iff_left\n\n",
 "coprime_iff_gcd_eq_one":
 "theorem coprime_iff_gcd_eq_one {m n : ℕ} : coprime m n ↔ gcd m n = 1 :=\n  iff.rfl\n#align coprime_iff_gcd_eq_one coprime_iff_gcd_eq_one\n\n",
 "coprime_dvd_right":
 "theorem coprime.coprime_dvd_right {m k n : ℕ} (H1 : n ∣ m) (H2 : coprime k m) : coprime k n :=\n  (H2.symm.coprime_dvd_left H1).symm\n#align coprime.coprime_dvd_right coprime.coprime_dvd_right\n\n",
 "coprime_dvd_left":
 "theorem coprime.coprime_dvd_left {m k n : ℕ} (H1 : m ∣ k) (H2 : coprime k n) : coprime m n :=\n  eq_one_of_dvd_one (by delta coprime at H2 <;> rw [← H2] <;> exact gcd_dvd_gcd_of_dvd_left _ H1)\n#align coprime.coprime_dvd_left coprime.coprime_dvd_left\n\n",
 "coprime_div_right":
 "theorem coprime.coprime_div_right {m n a : ℕ} (cmn : coprime m n) (dvd : a ∣ n) : coprime m (n / a) :=\n  (coprime.coprime_div_left cmn.symm dvd).symm\n#align coprime.coprime_div_right coprime.coprime_div_right\n\n",
 "coprime_div_left":
 "theorem coprime.coprime_div_left {m n a : ℕ} (cmn : coprime m n) (dvd : a ∣ m) : coprime (m / a) n :=\n  by\n  by_cases a_split : a = 0\n  · subst a_split\n    rw [zero_dvd_iff] at dvd\n    simpa [dvd] using cmn\n  · rcases dvd with ⟨k, rfl⟩\n    rw [nat.mul_div_cancel_left _ (nat.pos_of_ne_zero a_split)]\n    exact coprime.coprime_mul_left cmn\n#align coprime.coprime_div_left coprime.coprime_div_left\n\n",
 "coprime_div_gcd_div_gcd":
 "theorem coprime_div_gcd_div_gcd {m n : ℕ} (H : 0 < gcd m n) : coprime (m / gcd m n) (n / gcd m n) := by\n  rw [coprime_iff_gcd_eq_one, gcd_div (gcd_dvd_left m n) (gcd_dvd_right m n), nat.div_self H]\n#align coprime_div_gcd_div_gcd coprime_div_gcd_div_gcd\n\n",
 "coprime_comm":
 "theorem coprime_comm {m n : ℕ} : coprime n m ↔ coprime m n :=\n  ⟨coprime.symm, coprime.symm⟩\n#align coprime_comm coprime_comm\n\n",
 "coprime_add_self_right":
 "@[simp]\ntheorem coprime_add_self_right {m n : ℕ} : coprime m (n + m) ↔ coprime m n := by\n  rw [coprime, coprime, gcd_add_self_right]\n#align coprime_add_self_right coprime_add_self_right\n\n",
 "coprime_add_self_left":
 "@[simp]\ntheorem coprime_add_self_left {m n : ℕ} : coprime (m + n) n ↔ coprime m n := by rw [coprime, coprime, gcd_add_self_left]\n#align coprime_add_self_left coprime_add_self_left\n\n",
 "coprime_add_mul_right_right":
 "@[simp]\ntheorem coprime_add_mul_right_right (m n k : ℕ) : coprime m (n + k * m) ↔ coprime m n := by\n  rw [coprime, coprime, gcd_add_mul_right_right]\n#align coprime_add_mul_right_right coprime_add_mul_right_right\n\n",
 "coprime_add_mul_right_left":
 "@[simp]\ntheorem coprime_add_mul_right_left (m n k : ℕ) : coprime (m + k * n) n ↔ coprime m n := by\n  rw [coprime, coprime, gcd_add_mul_right_left]\n#align coprime_add_mul_right_left coprime_add_mul_right_left\n\n",
 "coprime_add_mul_left_right":
 "@[simp]\ntheorem coprime_add_mul_left_right (m n k : ℕ) : coprime m (n + m * k) ↔ coprime m n := by\n  rw [coprime, coprime, gcd_add_mul_left_right]\n#align coprime_add_mul_left_right coprime_add_mul_left_right\n\n",
 "coprime_add_mul_left_left":
 "@[simp]\ntheorem coprime_add_mul_left_left (m n k : ℕ) : coprime (m + n * k) n ↔ coprime m n := by\n  rw [coprime, coprime, gcd_add_mul_left_left]\n#align coprime_add_mul_left_left coprime_add_mul_left_left\n\n"}