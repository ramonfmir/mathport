{"sq_sub_sq":
 "#print sq_sub_sq /-\ntheorem sq_sub_sq (a b : ℕ) : a ^ 2 - b ^ 2 = (a + b) * (a - b) :=\n  by\n  rw [sq, sq]\n  exact nat.mul_self_sub_mul_self_eq a b\n#align sq_sub_sq sq_sub_sq\n-/\n\n",
 "pow_right_strict_mono":
 "theorem pow_right_strict_mono {x : ℕ} (k : 2 ≤ x) : StrictMono fun n : ℕ => x ^ n := fun _ _ => pow_lt_pow_of_lt_right k\n#align pow_right_strict_mono pow_right_strict_mono\n\n",
 "pow_right_injective":
 "theorem pow_right_injective {x : ℕ} (k : 2 ≤ x) : function.injective fun n : ℕ => x ^ n :=\n  StrictMono.injective (pow_right_strictMono k)\n#align pow_right_injective pow_right_injective\n\n",
 "pow_mod":
 "theorem pow_mod (a b n : ℕ) : a ^ b % n = (a % n) ^ b % n :=\n  by\n  induction' b with b ih\n  rfl; simp [pow_succ, Nat.mul_mod, ih]\n#align pow_mod pow_mod\n\n",
 "pow_lt_pow_succ":
 "#print pow_lt_pow_succ /-\ntheorem pow_lt_pow_succ {p : ℕ} (h : 1 < p) (n : ℕ) : p ^ n < p ^ (n + 1) :=\n  pow_lt_pow_of_lt_right h n.lt_succ_self\n#align pow_lt_pow_succ pow_lt_pow_succ\n-/\n\n",
 "pow_lt_pow_of_lt_right":
 "theorem pow_lt_pow_of_lt_right {x : ℕ} (H : 1 < x) {i j : ℕ} (h : i < j) : x ^ i < x ^ j :=\n  pow_lt_pow H h\n#align pow_lt_pow_of_lt_right pow_lt_pow_of_lt_right\n\n",
 "pow_lt_pow_of_lt_left":
 "#print pow_lt_pow_of_lt_left /-\ntheorem pow_lt_pow_of_lt_left {x y : ℕ} (H : x < y) {i} (h : 0 < i) : x ^ i < y ^ i :=\n  pow_lt_pow_of_lt_left H (zero_le _) h\n#align pow_lt_pow_of_lt_left pow_lt_pow_of_lt_left\n-/\n\n",
 "pow_lt_iff_lt_right":
 "theorem pow_lt_iff_lt_right {x m n : ℕ} (k : 2 ≤ x) : x ^ m < x ^ n ↔ m < n :=\n  StrictMono.lt_iff_lt (pow_right_strictMono k)\n#align pow_lt_iff_lt_right pow_lt_iff_lt_right\n\n",
 "pow_lt_iff_lt_left":
 "theorem pow_lt_iff_lt_left {m x y : ℕ} (k : 1 ≤ m) : x ^ m < y ^ m ↔ x < y :=\n  StrictMono.lt_iff_lt (pow_left_strictMono k)\n#align pow_lt_iff_lt_left pow_lt_iff_lt_left\n\n",
 "pow_left_strict_mono":
 "theorem pow_left_strict_mono {m : ℕ} (k : 1 ≤ m) : StrictMono fun x : ℕ => x ^ m := fun _ _ h =>\n  pow_lt_pow_of_lt_left h k\n#align pow_left_strict_mono pow_left_strict_mono\n\n",
 "pow_left_injective":
 "theorem pow_left_injective {m : ℕ} (k : 1 ≤ m) : function.injective fun x : ℕ => x ^ m :=\n  StrictMono.injective (pow_left_strictMono k)\n#align pow_left_injective pow_left_injective\n\n",
 "pow_le_pow_of_le_right":
 "theorem pow_le_pow_of_le_right {x : ℕ} (H : 0 < x) {i j : ℕ} (h : i ≤ j) : x ^ i ≤ x ^ j :=\n  pow_le_pow' H h\n#align pow_le_pow_of_le_right pow_le_pow_of_le_right\n\n",
 "pow_le_pow_of_le_left":
 "#print pow_le_pow_of_le_left /-\n/-\nCopyright (c) 2014 Floris van Doorn (c) 2016 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn, Leonardo de Moura, Jeremy Avigad, Mario Carneiro\n-/\n-- This is redundant with `pow_le_pow_of_le_left'`,\n-- We leave a version in the `nat` namespace as well.\n-- (The global `pow_le_pow_of_le_left` needs an extra hypothesis `0 ≤ x`.)\nprotected theorem pow_le_pow_of_le_left {x y : ℕ} (H : x ≤ y) : ∀ i : ℕ, x ^ i ≤ y ^ i :=\n  pow_le_pow_of_le_left' H\n#align pow_le_pow_of_le_left pow_le_pow_of_le_left\n-/\n\n",
 "pow_le_iff_le_right":
 "theorem pow_le_iff_le_right {x m n : ℕ} (k : 2 ≤ x) : x ^ m ≤ x ^ n ↔ m ≤ n :=\n  StrictMono.le_iff_le (pow_right_strictMono k)\n#align pow_le_iff_le_right pow_le_iff_le_right\n\n",
 "pow_le_iff_le_left":
 "theorem pow_le_iff_le_left {m x y : ℕ} (k : 1 ≤ m) : x ^ m ≤ y ^ m ↔ x ≤ y :=\n  StrictMono.le_iff_le (pow_left_strictMono k)\n#align pow_le_iff_le_left pow_le_iff_le_left\n\n",
 "pow_dvd_pow_iff_pow_le_pow":
 "theorem pow_dvd_pow_iff_pow_le_pow {k l : ℕ} : ∀ {x : ℕ} (w : 0 < x), x ^ k ∣ x ^ l ↔ x ^ k ≤ x ^ l\n  | x + 1, w => by\n    constructor\n    · intro a\n      exact le_of_dvd (pow_pos (succ_pos x) l) a\n    · intro a\n      cases' x with x\n      · simp only [one_pow]\n      · have le := (pow_le_iff_le_right (nat.le_add_left _ _)).mp a\n        use (x + 2) ^ (l - k)\n        rw [← pow_add, add_comm k, tsub_add_cancel_of_le le]\n#align pow_dvd_pow_iff_pow_le_pow pow_dvd_pow_iff_pow_le_pow\n\n",
 "pow_dvd_pow_iff_le_right'":
 "theorem pow_dvd_pow_iff_le_right' {b k l : ℕ} : (b + 2) ^ k ∣ (b + 2) ^ l ↔ k ≤ l :=\n  pow_dvd_pow_iff_le_right (nat.lt_of_sub_eq_succ rfl)\n#align pow_dvd_pow_iff_le_right' pow_dvd_pow_iff_le_right'\n\n",
 "pow_dvd_pow_iff_le_right":
 "/-- If `1 < x`, then `x^k` divides `x^l` if and only if `k` is at most `l`. -/\ntheorem pow_dvd_pow_iff_le_right {x k l : ℕ} (w : 1 < x) : x ^ k ∣ x ^ l ↔ k ≤ l := by\n  rw [pow_dvd_pow_iff_pow_le_pow (lt_of_succ_lt w), pow_le_iff_le_right w]\n#align pow_dvd_pow_iff_le_right pow_dvd_pow_iff_le_right\n\n",
 "pow_dvd_of_le_of_pow_dvd":
 "theorem pow_dvd_of_le_of_pow_dvd {p m n k : ℕ} (hmn : m ≤ n) (hdiv : p ^ n ∣ k) : p ^ m ∣ k :=\n  (pow_dvd_pow _ hmn).trans hdiv\n#align pow_dvd_of_le_of_pow_dvd pow_dvd_of_le_of_pow_dvd\n\n",
 "pow_div":
 "theorem pow_div {x m n : ℕ} (h : n ≤ m) (hx : 0 < x) : x ^ m / x ^ n = x ^ (m - n) := by\n  rw [Nat.div_eq_iff_eq_mul_left (pow_pos hx n) (pow_dvd_pow _ h), pow_sub_mul_pow _ h]\n#align pow_div pow_div\n\n",
 "one_lt_two_pow'":
 "theorem one_lt_two_pow' (n : ℕ) : 1 < 2 ^ (n + 1) :=\n  one_lt_pow (n + 1) 2 (succ_pos n) (by decide)\n#align one_lt_two_pow' one_lt_two_pow'\n\n",
 "one_lt_two_pow":
 "theorem one_lt_two_pow (n : ℕ) (h₀ : 0 < n) : 1 < 2 ^ n :=\n  one_lt_pow n 2 h₀ (by decide)\n#align one_lt_two_pow one_lt_two_pow\n\n",
 "one_lt_pow_iff":
 "#print one_lt_pow_iff /-\n@[simp]\ntheorem one_lt_pow_iff {k n : ℕ} (h : 0 ≠ k) : 1 < n ^ k ↔ 1 < n :=\n  by\n  cases n\n  · cases k <;> simp [zero_pow_eq]\n  cases n\n  · rw [one_pow]\n  refine' ⟨fun _ => one_lt_succ_succ n, fun _ => _⟩\n  induction' k with k hk\n  · exact absurd rfl h\n  cases k\n  · simp\n  exact one_lt_mul (one_lt_succ_succ _).le (hk (succ_ne_zero k).symm)\n#align one_lt_pow_iff one_lt_pow_iff\n-/\n\n",
 "one_lt_pow'":
 "#print one_lt_pow' /-\ntheorem one_lt_pow' (n m : ℕ) : 1 < (m + 2) ^ (n + 1) :=\n  one_lt_pow (n + 1) (m + 2) (succ_pos n) (nat.lt_of_sub_eq_succ rfl)\n#align one_lt_pow' one_lt_pow'\n-/\n\n",
 "one_lt_pow":
 "#print one_lt_pow /-\ntheorem one_lt_pow (n m : ℕ) (h₀ : 0 < n) (h₁ : 1 < m) : 1 < m ^ n :=\n  by\n  rw [← one_pow n]\n  exact pow_lt_pow_of_lt_left h₁ h₀\n#align one_lt_pow one_lt_pow\n-/\n\n",
 "one_le_two_pow":
 "theorem one_le_two_pow (n : ℕ) : 1 ≤ 2 ^ n :=\n  one_le_pow n 2 (by decide)\n#align one_le_two_pow one_le_two_pow\n\n",
 "one_le_pow'":
 "theorem one_le_pow' (n m : ℕ) : 1 ≤ (m + 1) ^ n :=\n  one_le_pow n (m + 1) (succ_pos m)\n#align one_le_pow' one_le_pow'\n\n",
 "one_le_pow":
 "theorem one_le_pow (n m : ℕ) (h : 0 < m) : 1 ≤ m ^ n :=\n  by\n  rw [← one_pow n]\n  exact Nat.pow_le_pow_of_le_left h n\n#align one_le_pow one_le_pow\n\n",
 "not_pos_pow_dvd":
 "theorem not_pos_pow_dvd : ∀ {p k : ℕ} (hp : 1 < p) (hk : 1 < k), ¬p ^ k ∣ p\n  | succ p, succ k, hp, hk, h =>\n    have : succ p * succ p ^ k ∣ succ p * 1 := by simpa [pow_succ] using h\n    have : succ p ^ k ∣ 1 := dvd_of_mul_dvd_mul_left (succ_pos _) this\n    have he : succ p ^ k = 1 := eq_one_of_dvd_one this\n    have : k < succ p ^ k := lt_pow_self hp k\n    have : k < 1 := by rwa [he] at this\n    have : k = 0 := nat.eq_zero_of_le_zero <| le_of_lt_succ this\n    have : 1 < 1 := by rwa [this] at hk\n    absurd this (by decide)\n#align not_pos_pow_dvd not_pos_pow_dvd\n\n",
 "nat_pow":
 "#print StrictMono.nat_pow /-\ntheorem StrictMono.nat_pow {n : ℕ} (hn : 1 ≤ n) {f : ℕ → ℕ} (hf : StrictMono f) : StrictMono fun m => f m ^ n :=\n  (Nat.pow_left_strictMono hn).comp hf\n#align strict_mono.nat_pow StrictMono.nat_pow\n-/\n\n",
 "mul_lt_mul_pow_succ":
 "theorem mul_lt_mul_pow_succ {n a q : ℕ} (a0 : 0 < a) (q1 : 1 < q) : n * q < a * q ^ (n + 1) :=\n  by\n  rw [pow_succ', ← mul_assoc, mul_lt_mul_right (zero_lt_one.trans q1)]\n  exact lt_mul_of_one_le_of_lt (nat.succ_le_iff.mpr a0) (Nat.lt_pow_self q1 n)\n#align mul_lt_mul_pow_succ mul_lt_mul_pow_succ\n\n",
 "mod_pow_succ":
 "theorem mod_pow_succ {b : ℕ} (w m : ℕ) : m % b ^ succ w = b * (m / b % b ^ w) + m % b :=\n  by\n  by_cases b_h : b = 0\n  · simp [b_h, pow_succ]\n  have b_pos := nat.pos_of_ne_zero b_h\n  apply nat.strong_induction_on m\n  clear m\n  intro p IH\n  cases' lt_or_ge p (b ^ succ w) with h₁ h₁\n  -- base case: p < b^succ w\n  · have h₂ : p / b < b ^ w := by\n      rw [div_lt_iff_lt_mul b_pos]\n      simpa [pow_succ'] using h₁\n    rw [mod_eq_of_lt h₁, mod_eq_of_lt h₂]\n    simp [div_add_mod]\n  -- step: p ≥ b^succ w\n  · -- Generate condition for induction hypothesis\n    have h₂ : p - b ^ succ w < p := tsub_lt_self ((pow_pos b_pos _).trans_le h₁) (pow_pos b_pos _)\n    -- Apply induction\n    rw [mod_eq_sub_mod h₁, IH _ h₂]\n    -- Normalize goal and h1\n    simp only [pow_succ]\n    simp only [GE.ge, pow_succ] at h₁\n    -- Pull subtraction outside mod and div\n    rw [sub_mul_mod _ _ _ h₁, sub_mul_div _ _ _ h₁]\n    -- Cancel subtraction inside mod b^w\n    have p_b_ge : b ^ w ≤ p / b := by\n      rw [le_div_iff_mul_le b_pos, mul_comm]\n      exact h₁\n    rw [Eq.symm (mod_eq_sub_mod p_b_ge)]\n#align mod_pow_succ mod_pow_succ\n\n",
 "lt_two_pow":
 "theorem lt_two_pow (n : ℕ) : n < 2 ^ n :=\n  lt_pow_self (by decide) n\n#align lt_two_pow lt_two_pow\n\n",
 "lt_pow_self":
 "theorem lt_pow_self {p : ℕ} (h : 1 < p) : ∀ n : ℕ, n < p ^ n\n  | 0 => by simp [zero_lt_one]\n  | n + 1 =>\n    calc\n      n + 1 < p ^ n + 1 := nat.add_lt_add_right (lt_pow_self _) _\n      _ ≤ p ^ (n + 1) := pow_lt_pow_succ h _\n      \n#align lt_pow_self lt_pow_self\n\n",
 "lt_of_pow_dvd_right":
 "theorem lt_of_pow_dvd_right {p i n : ℕ} (hn : n ≠ 0) (hp : 2 ≤ p) (h : p ^ i ∣ n) : i < n :=\n  by\n  rw [← pow_lt_iff_lt_right hp]\n  exact lt_of_le_of_lt (le_of_dvd hn.bot_lt h) (lt_pow_self (succ_le_iff.mp hp) n)\n#align lt_of_pow_dvd_right lt_of_pow_dvd_right\n\n",
 "le_self_pow":
 "#print le_self_pow /-\ntheorem le_self_pow {n : ℕ} (hn : n ≠ 0) : ∀ m : ℕ, m ≤ m ^ n\n  | 0 => zero_le _\n  | m + 1 => le_self_pow (by decide) hn\n#align le_self_pow le_self_pow\n-/\n\n",
 "dvd_of_pow_dvd":
 "theorem dvd_of_pow_dvd {p k m : ℕ} (hk : 1 ≤ k) (hpk : p ^ k ∣ m) : p ∣ m := by\n  rw [← pow_one p] <;> exact pow_dvd_of_le_of_pow_dvd hk hpk\n#align dvd_of_pow_dvd dvd_of_pow_dvd\n\n"}