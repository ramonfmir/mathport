{"zero_union_range_succ":
 "/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\ntheorem zero_union_range_succ : {0} ∪ range succ = univ :=\n  by\n  ext n\n  cases n <;> simp\n#align zero_union_range_succ zero_union_range_succ\n\n",
 "range_succ":
 "@[simp]\nprotected theorem range_succ : range succ = { i | 0 < i } := by ext (_ | i) <;> simp [succ_pos, succ_ne_zero]\n#align range_succ range_succ\n\n",
 "range_rec":
 "theorem range_rec {α : Type _} (x : α) (f : ℕ → α → α) :\n    (Set.range fun n => nat.rec x f n : set α) = {x} ∪ Set.range fun n => nat.rec (f 0 x) (f ∘ succ) n :=\n  by\n  convert (range_of_succ _).symm\n  ext n\n  induction' n with n ihn\n  · rfl\n  · dsimp at ihn⊢\n    rw [ihn]\n#align range_rec range_rec\n\n",
 "range_of_succ":
 "theorem range_of_succ (f : ℕ → α) : {f 0} ∪ range (f ∘ succ) = range f := by\n  rw [← image_singleton, range_comp, ← image_union, zero_union_range_succ, image_univ]\n#align range_of_succ range_of_succ\n\n",
 "range_cases_on":
 "theorem range_cases_on {α : Type _} (x : α) (f : ℕ → α) :\n    (Set.range fun n => nat.cases_on n x f : set α) = {x} ∪ Set.range f :=\n  (range_of_succ _).symm\n#align range_cases_on range_cases_on\n\n"}