{"unop_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp, norm_cast]\ntheorem unop_nat_cast (n : ℕ) : unop (n : «expr ᵐᵒᵖ» α) = n :=\n  rfl\n#align unop_nat_cast unop_nat_cast\n\n",
 "to_lex_nat_cast":
 "@[simp]\ntheorem to_lex_nat_cast [NatCast α] (n : ℕ) : to_lex (n : α) = n :=\n  rfl\n#align to_lex_nat_cast to_lex_nat_cast\n\n",
 "to_dual_nat_cast":
 "@[simp]\ntheorem to_dual_nat_cast [NatCast α] (n : ℕ) : toDual (n : α) = n :=\n  rfl\n#align to_dual_nat_cast to_dual_nat_cast\n\n",
 "strict_mono_cast":
 "theorem strict_mono_cast : strict_mono (coe : ℕ → α) :=\n  mono_cast.strict_mono_of_injective cast_injective\n#align strict_mono_cast strict_mono_cast\n\n",
 "op_nat_cast":
 "-- I don't think `ring_hom_class` is good here, because of the `subsingleton` TC slowness\n@[simp, norm_cast]\ntheorem op_nat_cast (n : ℕ) : op (n : α) = n :=\n  rfl\n#align op_nat_cast op_nat_cast\n\n",
 "one_lt_cast":
 "@[simp, norm_cast]\ntheorem one_lt_cast : 1 < (n : α) ↔ 1 < n := by rw [← cast_one, cast_lt]\n#align one_lt_cast one_lt_cast\n\n",
 "one_le_cast":
 "@[simp, norm_cast]\ntheorem one_le_cast : 1 ≤ (n : α) ↔ 1 ≤ n := by rw [← cast_one, cast_le]\n#align one_le_cast one_le_cast\n\n",
 "of_lex_nat_cast":
 "@[simp]\ntheorem of_lex_nat_cast [NatCast α] (n : ℕ) : (of_lex n : α) = n :=\n  rfl\n#align of_lex_nat_cast of_lex_nat_cast\n\n",
 "of_dual_nat_cast":
 "@[simp]\ntheorem of_dual_nat_cast [NatCast α] (n : ℕ) : (ofDual n : α) = n :=\n  rfl\n#align of_dual_nat_cast of_dual_nat_cast\n\n",
 "nat_of_ne_zero":
 "theorem ne_zero.nat_of_ne_zero {R S} [Semiring R] [Semiring S] {F} [RingHomClass F R S] (f : F) {n : ℕ}\n    [hn : ne_zero (n : S)] : ne_zero (n : R) := by\n  apply NeZero.of_map f\n  simp only [map_nat_cast, hn]\n#align ne_zero.nat_of_ne_zero ne_zero.nat_of_ne_zero\n\n",
 "nat_of_injective":
 "theorem ne_zero.nat_of_injective {n : ℕ} [h : ne_zero (n : R)] [RingHomClass F R S] {f : F}\n    (hf : function.injective f) : ne_zero (n : S) :=\n  ⟨fun h => NeZero.natCast_ne n R <| hf <| by simpa only [map_nat_cast, map_zero] ⟩\n#align ne_zero.nat_of_injective ne_zero.nat_of_injective\n\n",
 "nat_apply":
 "theorem nat_apply (n : ℕ) (a : α) : (n : ∀ a, π a) a = n :=\n  rfl\n#align nat_apply nat_apply\n\n",
 "mono_cast":
 "@[mono]\ntheorem mono_cast : monotone (coe : ℕ → α) :=\n  monotone_nat_of_le_succ fun n => by rw [Nat.cast_succ] <;> exact le_add_of_nonneg_right zero_le_one\n#align mono_cast mono_cast\n\n",
 "map_nat_cast'":
 "theorem map_nat_cast' {A} [AddMonoidWithOne A] [AddMonoidHomClass F A B] (f : F) (h : f 1 = 1) : ∀ n : ℕ, f n = n\n  | 0 => by simp\n  | n + 1 => by rw [Nat.cast_add, map_add, Nat.cast_add, map_nat_cast', Nat.cast_one, h, Nat.cast_one]\n#align map_nat_cast' map_nat_cast'\n\n",
 "map_nat_cast":
 "@[simp]\ntheorem map_nat_cast [RingHomClass F R S] (f : F) : ∀ n : ℕ, f (n : R) = n :=\n  map_nat_cast' f <| map_one f\n#align map_nat_cast map_nat_cast\n\n",
 "ext_nat''":
 "#print ext_nat'' /-\n/-- If two `monoid_with_zero_hom`s agree on the positive naturals they are equal. -/\ntheorem ext_nat'' [MonoidWithZeroHomClass F ℕ A] (f g : F) (h_pos : ∀ {n : ℕ}, 0 < n → f n = g n) : f = g :=\n  by\n  apply fun_like.ext\n  rintro (_ | n)\n  · simp\n  exact h_pos n.succ_pos\n#align ext_nat'' ext_nat''\n-/\n\n",
 "ext_nat'":
 "#print ext_nat' /-\ntheorem ext_nat' [add_monoid A] [AddMonoidHomClass F ℕ A] (f g : F) (h : f 1 = g 1) : f = g :=\n  fun_like.ext f g <| by\n    apply nat.rec\n    · simp only [Nat.zero_eq, map_zero]\n    simp (config := { contextual := true }) [nat.succ_eq_add_one, h]\n#align ext_nat' ext_nat'\n-/\n\n",
 "ext_nat":
 "#print ext_nat /-\ntheorem ext_nat [RingHomClass F ℕ R] (f g : F) : f = g :=\n  ext_nat' f g <| by simp only [map_one]\n#align ext_nat ext_nat\n-/\n\n",
 "eq_nat_cast'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/-- This is primed to match `eq_int_cast'`. -/\ntheorem eq_nat_cast' {R} [NonAssocSemiring R] (f : «expr →+* » ℕ R) : f = nat.cast_ring_hom R :=\n  RingHom.ext <| eq_nat_cast f\n#align eq_nat_cast' eq_nat_cast'\n\n",
 "eq_nat_cast":
 "@[simp]\ntheorem eq_nat_cast [RingHomClass F ℕ R] (f : F) : ∀ n, f n = n :=\n  eq_nat_cast' f <| map_one f\n#align eq_nat_cast eq_nat_cast\n\n",
 "elim_nat_cast_nat_cast":
 "theorem sum.elim_nat_cast_nat_cast {α β γ : Type _} [NatCast γ] (n : ℕ) : sum.elim (n : α → γ) (n : β → γ) = n :=\n  @sum.elim_lam_const_lam_const α β γ n\n#align sum.elim_nat_cast_nat_cast sum.elim_nat_cast_nat_cast\n\n",
 "commute_cast":
 "theorem commute_cast [NonAssocSemiring α] (x : α) (n : ℕ) : Commute x n :=\n  (n.cast_commute x).symm\n#align commute_cast commute_cast\n\n",
 "coe_nat_dvd":
 "theorem coe_nat_dvd [Semiring α] {m n : ℕ} (h : m ∣ n) : (m : α) ∣ (n : α) :=\n  map_dvd (nat.cast_ring_hom α) h\n#align coe_nat_dvd coe_nat_dvd\n\n",
 "coe_nat":
 "@[simp]\ntheorem coe_nat (n : ℕ) : (n : ∀ a, π a) = fun _ => n :=\n  rfl\n#align coe_nat coe_nat\n\n",
 "coe_cast_ring_hom":
 "@[simp]\ntheorem coe_cast_ring_hom [NonAssocSemiring α] : (cast_ring_hom α : ℕ → α) = coe :=\n  rfl\n#align coe_cast_ring_hom coe_cast_ring_hom\n\n",
 "coe_cast_add_monoid_hom":
 "/-\nCopyright (c) 2014 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem coe_cast_add_monoid_hom [AddMonoidWithOne α] : (cast_add_monoid_hom α : ℕ → α) = coe :=\n  rfl\n#align coe_cast_add_monoid_hom coe_cast_add_monoid_hom\n\n",
 "cast_tsub":
 "/-- A version of `nat.cast_sub` that works for `ℝ≥0` and `ℚ≥0`. Note that this proof doesn't work\nfor `ℕ∞` and `ℝ≥0∞`, so we use type-specific lemmas for these types. -/\n@[simp, norm_cast]\ntheorem cast_tsub [CanonicallyOrderedCommSemiring α] [Sub α] [OrderedSub α] [contravariant_class α α (· + ·) (· ≤ ·)]\n    (m n : ℕ) : ↑(m - n) = (m - n : α) := by\n  cases' le_total m n with h h\n  · rw [tsub_eq_zero_of_le h, cast_zero, tsub_eq_zero_of_le]\n    exact mono_cast h\n  · rcases le_iff_exists_add'.mp h with ⟨m, rfl⟩\n    rw [add_tsub_cancel_right, cast_add, add_tsub_cancel_right]\n#align cast_tsub cast_tsub\n\n",
 "cast_ring_hom_nat":
 "@[simp]\ntheorem nat.cast_ring_hom_nat : nat.cast_ring_hom ℕ = RingHom.id ℕ :=\n  rfl\n#align nat.cast_ring_hom_nat nat.cast_ring_hom_nat\n\n",
 "cast_pos":
 "@[simp]\ntheorem cast_pos {n : ℕ} : (0 : α) < n ↔ 0 < n := by cases n <;> simp [cast_add_one_pos]\n#align cast_pos cast_pos\n\n",
 "cast_nonneg":
 "@[simp]\ntheorem cast_nonneg (n : ℕ) : 0 ≤ (n : α) :=\n  @Nat.cast_zero α _ ▸ mono_cast (nat.zero_le n)\n#align cast_nonneg cast_nonneg\n\n",
 "cast_mul":
 "@[simp, norm_cast]\ntheorem cast_mul [NonAssocSemiring α] (m n : ℕ) : ((m * n : ℕ) : α) = m * n := by\n  induction n <;> simp [mul_succ, mul_add, *]\n#align cast_mul cast_mul\n\n",
 "cast_min":
 "@[simp, norm_cast]\ntheorem cast_min [LinearOrderedSemiring α] {a b : ℕ} : (↑(min a b) : α) = min a b :=\n  (@mono_cast α _).map_min\n#align cast_min cast_min\n\n",
 "cast_max":
 "@[simp, norm_cast]\ntheorem cast_max [LinearOrderedSemiring α] {a b : ℕ} : (↑(max a b) : α) = max a b :=\n  (@mono_cast α _).map_max\n#align cast_max cast_max\n\n",
 "cast_lt_one":
 "@[simp, norm_cast]\ntheorem cast_lt_one : (n : α) < 1 ↔ n = 0 := by rw [← cast_one, cast_lt, lt_succ_iff, ← bot_eq_zero, le_bot_iff]\n#align cast_lt_one cast_lt_one\n\n",
 "cast_lt":
 "@[simp, norm_cast, mono]\ntheorem cast_lt : (m : α) < n ↔ m < n :=\n  StrictMono_cast.lt_iff_lt\n#align cast_lt cast_lt\n\n",
 "cast_le_one":
 "@[simp, norm_cast]\ntheorem cast_le_one : (n : α) ≤ 1 ↔ n ≤ 1 := by rw [← cast_one, cast_le]\n#align cast_le_one cast_le_one\n\n",
 "cast_le":
 "@[simp, norm_cast]\ntheorem cast_le : (m : α) ≤ n ↔ m ≤ n :=\n  StrictMono_cast.le_iff_le\n#align cast_le cast_le\n\n",
 "cast_id":
 "@[simp, norm_cast]\ntheorem nat.cast_id (n : ℕ) : ↑n = n :=\n  rfl\n#align nat.cast_id nat.cast_id\n\n",
 "cast_commute":
 "theorem cast_commute [NonAssocSemiring α] (n : ℕ) (x : α) : Commute (↑n) x :=\n  nat.rec_on n (by rw [cast_zero] <;> exact Commute.zero_left x) fun n ihn => by\n    rw [cast_succ] <;> exact ihn.add_left (Commute.one_left x)\n#align cast_commute cast_commute\n\n",
 "cast_comm":
 "theorem cast_comm [NonAssocSemiring α] (n : ℕ) (x : α) : (n : α) * x = x * n :=\n  (cast_commute n x).eq\n#align cast_comm cast_comm\n\n",
 "cast_add_one_pos":
 "theorem cast_add_one_pos (n : ℕ) : 0 < (n : α) + 1 :=\n  zero_lt_one.trans_le <| le_add_of_nonneg_left n.cast_nonneg\n#align cast_add_one_pos cast_add_one_pos\n\n",
 "abs_cast":
 "@[simp, norm_cast]\ntheorem abs_cast [LinearOrderedRing α] (a : ℕ) : |(a : α)| = a :=\n  abs_of_nonneg (cast_nonneg a)\n#align abs_cast abs_cast\n\n"}