{"lt_of_count_lt_count":
 "theorem lt_of_count_lt_count {a b : ℕ} (h : count p a < count p b) : a < b :=\n  (count_monotone p).reflect_lt h\n#align lt_of_count_lt_count lt_of_count_lt_count\n\n",
 "count_zero":
 "/-\nCopyright (c) 2021 Vladimir Goryachev. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies, Vladimir Goryachev, Kyle Miller, Scott Morrison, Eric Rodriguez\n-/\n@[simp]\ntheorem count_zero : count p 0 = 0 := by rw [count, List.range_zero, List.countp]\n#align count_zero count_zero\n\n",
 "count_succ_eq_succ_count_iff":
 "theorem count_succ_eq_succ_count_iff {n : ℕ} : count p (n + 1) = count p n + 1 ↔ p n := by\n  by_cases h : p n <;> simp [h, count_succ]\n#align count_succ_eq_succ_count_iff count_succ_eq_succ_count_iff\n\n",
 "count_succ_eq_count_iff":
 "theorem count_succ_eq_count_iff {n : ℕ} : count p (n + 1) = count p n ↔ ¬p n := by\n  by_cases h : p n <;> simp [h, count_succ]\n#align count_succ_eq_count_iff count_succ_eq_count_iff\n\n",
 "count_succ'":
 "theorem count_succ' (n : ℕ) : count p (n + 1) = count (fun k => p (k + 1)) n + if p 0 then 1 else 0 := by\n  rw [count_add', count_one]\n#align count_succ' count_succ'\n\n",
 "count_succ":
 "theorem count_succ (n : ℕ) : count p (n + 1) = count p n + if p n then 1 else 0 := by\n  split_ifs <;> simp [count, List.range_succ, h]\n#align count_succ count_succ\n\n",
 "count_strict_mono":
 "theorem count_strict_mono {m n : ℕ} (hm : p m) (hmn : m < n) : count p m < count p n :=\n  (count_lt_count_succ_iff.2 hm).trans_le <| count_monotone _ (Nat.succ_le_iff.2 hmn)\n#align count_strict_mono count_strict_mono\n\n",
 "count_one":
 "theorem count_one : count p 1 = if p 0 then 1 else 0 := by simp [count_succ]\n#align count_one count_one\n\n",
 "count_monotone":
 "@[mono]\ntheorem count_monotone : monotone (count p) :=\n  monotone_nat_of_le_succ fun n => by by_cases h : p n <;> simp [count_succ, h]\n#align count_monotone count_monotone\n\n",
 "count_mono_left":
 "theorem count_mono_left {n : ℕ} (hpq : ∀ k, p k → q k) : count p n ≤ count q n :=\n  by\n  simp only [count_eq_card_filter_range]\n  exact card_le_of_subset ((range n).monotone_filter_right hpq)\n#align count_mono_left count_mono_left\n\n",
 "count_lt_count_succ_iff":
 "@[simp]\ntheorem count_lt_count_succ_iff {n : ℕ} : count p n < count p (n + 1) ↔ p n := by\n  by_cases h : p n <;> simp [count_succ, h]\n#align count_lt_count_succ_iff count_lt_count_succ_iff\n\n",
 "count_lt_card":
 "theorem count_lt_card {n : ℕ} (hp : (set_of p).finite) (hpn : p n) : count p n < hp.to_finset.card :=\n  (count_lt_count_succ_iff.2 hpn).trans_le (count_le_card hp _)\n#align count_lt_card count_lt_card\n\n",
 "count_le_cardinal":
 "theorem count_le_cardinal (n : ℕ) : (count p n : cardinal) ≤ cardinal.mk { k | p k } :=\n  by\n  rw [count_eq_card_fintype, ← cardinal.mk_fintype]\n  exact cardinal.mk_subtype_mono fun x hx => hx.2\n#align count_le_cardinal count_le_cardinal\n\n",
 "count_le_card":
 "theorem count_le_card (hp : (set_of p).finite) (n : ℕ) : count p n ≤ hp.to_finset.card :=\n  by\n  rw [count_eq_card_filter_range]\n  exact finset.card_mono fun x hx => hp.mem_to_finset.2 (mem_filter.1 hx).2\n#align count_le_card count_le_card\n\n",
 "count_injective":
 "theorem count_injective {m n : ℕ} (hm : p m) (hn : p n) (heq : count p m = count p n) : m = n :=\n  by\n  by_contra\n  wlog hmn : m < n\n  · exact Ne.lt_or_lt h\n  · simpa [HEq] using count_strict_mono hm hmn\n#align count_injective count_injective\n\n",
 "count_eq_card_fintype":
 "/-- `count p n` can be expressed as the cardinality of `{k // k < n ∧ p k}`. -/\ntheorem count_eq_card_fintype (n : ℕ) : count p n = fintype.card { k : ℕ // k < n ∧ p k } :=\n  by\n  rw [count_eq_card_filter_range, ← fintype.card_of_finset, ← count_set.fintype]\n  rfl\n#align count_eq_card_fintype count_eq_card_fintype\n\n",
 "count_eq_card_filter_range":
 "theorem count_eq_card_filter_range (n : ℕ) : count p n = ((range n).filter p).card :=\n  by\n  rw [count, List.countp_eq_length_filter]\n  rfl\n#align count_eq_card_filter_range count_eq_card_filter_range\n\n",
 "count_add'":
 "theorem count_add' (a b : ℕ) : count p (a + b) = count (fun k => p (k + b)) a + count p b :=\n  by\n  rw [add_comm, count_add, add_comm]\n  simp_rw [add_comm b]\n#align count_add' count_add'\n\n",
 "count_add":
 "theorem count_add (a b : ℕ) : count p (a + b) = count p a + count (fun k => p (a + k)) b :=\n  by\n  have : Disjoint ((range a).filter p) (((range b).map <| addLeftEmbedding a).filter p) :=\n    by\n    apply disjoint_filter_filter\n    rw [Finset.disjoint_left]\n    simp_rw [mem_map, mem_range, add_left_embedding_apply]\n    rintro x hx ⟨c, _, rfl⟩\n    exact (self_le_add_right _ _).not_lt hx\n  simp_rw [count_eq_card_filter_range, range_add, filter_union, card_disjoint_union this, filter_map, addLeftEmbedding,\n    card_map]\n  rfl\n#align count_add count_add\n\n"}