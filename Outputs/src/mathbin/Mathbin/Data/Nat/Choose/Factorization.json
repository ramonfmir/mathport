{"prod_pow_factorization_choose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/-- A binomial coefficient is the product of its prime factors, which are at most `n`. -/\ntheorem prod_pow_factorization_choose (n k : ℕ) (hkn : k ≤ n) :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n        (Finset.range (n + 1)) (p ^ (Nat.choose n k).factorization p) =\n      choose n k :=\n  by\n  nth_rw_rhs 1 [← factorization_prod_pow_eq_self (choose_pos hkn).ne']\n  rw [eq_comm]\n  apply Finset.prod_subset\n  · intro p hp\n    rw [Finset.mem_range]\n    contrapose! hp\n    rw [Finsupp.mem_support_iff, Classical.not_not, factorization_choose_eq_zero_of_lt hp]\n  · intro p _ h2\n    simp [Classical.not_not.1 (mt Finsupp.mem_support_iff.2 h2)]\n#align prod_pow_factorization_choose prod_pow_factorization_choose\n\n",
 "prod_pow_factorization_central_binom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/-- The `n`th central binomial coefficient is the product of its prime factors, which are\nat most `2n`. -/\ntheorem prod_pow_factorization_central_binom (n : ℕ) :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n        (Finset.range (2 * n + 1)) (p ^ (centralBinom n).factorization p) =\n      centralBinom n :=\n  by\n  apply prod_pow_factorization_choose\n  linarith\n#align prod_pow_factorization_central_binom prod_pow_factorization_central_binom\n\n",
 "pow_factorization_choose_le":
 "/-- A `pow` form of `nat.factorization_choose_le`\n-/\ntheorem pow_factorization_choose_le (hn : 0 < n) : p ^ (choose n k).factorization p ≤ n :=\n  pow_le_of_le_log hn.ne' factorization_choose_le_log\n#align pow_factorization_choose_le pow_factorization_choose_le\n\n",
 "le_two_mul_of_factorization_central_binom_pos":
 "/-- Contrapositive form of `nat.factorization_central_binom_eq_zero_of_two_mul_lt`\n-/\ntheorem le_two_mul_of_factorization_central_binom_pos (h_pos : 0 < (centralBinom n).factorization p) : p ≤ 2 * n :=\n  le_of_not_lt (pos_iff_ne_zero.mp h_pos ∘ factorization_centralBinom_eq_zero_of_two_mul_lt)\n#align le_two_mul_of_factorization_central_binom_pos le_two_mul_of_factorization_central_binom_pos\n\n",
 "factorization_factorial_eq_zero_of_lt":
 "theorem factorization_factorial_eq_zero_of_lt (h : n < p) : (factorial n).factorization p = 0 :=\n  by\n  induction' n with n hn; · simp\n  rw [factorial_succ, factorization_mul n.succ_ne_zero n.factorial_ne_zero, Finsupp.coe_add, Pi.add_apply,\n    hn (lt_of_succ_lt h), add_zero, factorization_eq_zero_of_lt h]\n#align factorization_factorial_eq_zero_of_lt factorization_factorial_eq_zero_of_lt\n\n",
 "factorization_choose_of_lt_three_mul":
 "theorem factorization_choose_of_lt_three_mul (hp' : p ≠ 2) (hk : p ≤ k) (hk' : p ≤ n - k) (hn : n < 3 * p) :\n    (choose n k).factorization p = 0 := by\n  cases' em' p.prime with hp hp\n  · exact factorization_eq_zero_of_non_prime (choose n k) hp\n  cases' lt_or_le n k with hnk hkn\n  · simp [choose_eq_zero_of_lt hnk]\n  rw [factorization_def _ hp, @padicValNat_def _ ⟨hp⟩ _ (choose_pos hkn)]\n  simp only [hp.multiplicity_choose hkn (lt_add_one _), PartENat.get_natCast, Finset.card_eq_zero,\n    Finset.filter_eq_empty_iff, not_le]\n  intro i hi\n  rcases eq_or_lt_of_le (finset.mem_Ico.mp hi).1 with (rfl | hi)\n  · rw [pow_one, ← add_lt_add_iff_left (2 * p), ← succ_mul, two_mul, add_add_add_comm]\n    exact\n      lt_of_le_of_lt\n        (add_le_add (add_le_add_right (le_mul_of_one_le_right' ((one_le_div_iff hp.pos).mpr hk)) (k % p))\n          (add_le_add_right (le_mul_of_one_le_right' ((one_le_div_iff hp.pos).mpr hk')) ((n - k) % p)))\n        (by rwa [div_add_mod, div_add_mod, add_tsub_cancel_of_le hkn])\n  · replace hn : n < p ^ i\n    ·\n      calc\n        n < 3 * p := hn\n        _ ≤ p * p := (mul_le_mul_right' (lt_of_le_of_ne hp.two_le hp'.symm) p)\n        _ = p ^ 2 := (sq p).symm\n        _ ≤ p ^ i := pow_le_pow hp.one_lt.le hi\n        \n    rwa [mod_eq_of_lt (lt_of_le_of_lt hkn hn), mod_eq_of_lt (lt_of_le_of_lt tsub_le_self hn), add_tsub_cancel_of_le hkn]\n#align factorization_choose_of_lt_three_mul factorization_choose_of_lt_three_mul\n\n",
 "factorization_choose_le_one":
 "/-- Primes greater than about `sqrt n` appear only to multiplicity 0 or 1 in the binomial coefficient.\n-/\ntheorem factorization_choose_le_one (p_large : n < p ^ 2) : (choose n k).factorization p ≤ 1 :=\n  by\n  apply factorization_choose_le_log.trans\n  rcases eq_or_ne n 0 with (rfl | hn0); · simp\n  exact lt_succ_iff.1 (log_lt_of_lt_pow hn0 p_large)\n#align factorization_choose_le_one factorization_choose_le_one\n\n",
 "factorization_choose_le_log":
 "/-\nCopyright (c) 2022 Bolton Bailey. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bolton Bailey, Patrick Stevens, Thomas Browning\n-/\n/-- A logarithmic upper bound on the multiplicity of a prime in a binomial coefficient.\n-/\ntheorem factorization_choose_le_log : (choose n k).factorization p ≤ log p n :=\n  by\n  by_cases h : (choose n k).factorization p = 0\n  · simp [h]\n  have hp : p.prime := Not.imp_symm (choose n k).factorization_eq_zero_of_non_prime h\n  have hkn : k ≤ n := by\n    refine' le_of_not_lt fun hnk => h _\n    simp [choose_eq_zero_of_lt hnk]\n  rw [factorization_def _ hp, @padicValNat_def _ ⟨hp⟩ _ (choose_pos hkn)]\n  simp only [hp.multiplicity_choose hkn (lt_add_one _), PartENat.get_natCast]\n  refine' (Finset.card_filter_le _ _).trans (le_of_eq (Nat.card_Ico _ _))\n#align factorization_choose_le_log factorization_choose_le_log\n\n",
 "factorization_choose_eq_zero_of_lt":
 "theorem factorization_choose_eq_zero_of_lt (h : n < p) : (choose n k).factorization p = 0 :=\n  by\n  by_cases hnk : n < k; · simp [choose_eq_zero_of_lt hnk]\n  rw [choose_eq_factorial_div_factorial (le_of_not_lt hnk),\n    factorization_div (factorial_mul_factorial_dvd_factorial (le_of_not_lt hnk)), Finsupp.coe_tsub, Pi.sub_apply,\n    factorization_factorial_eq_zero_of_lt h, zero_tsub]\n#align factorization_choose_eq_zero_of_lt factorization_choose_eq_zero_of_lt\n\n",
 "factorization_central_binom_of_two_mul_self_lt_three_mul":
 "/-- Primes greater than about `2 * n / 3` and less than `n` do not appear in the factorization of\n`central_binom n`.\n-/\ntheorem factorization_central_binom_of_two_mul_self_lt_three_mul (n_big : 2 < n) (p_le_n : p ≤ n)\n    (big : 2 * n < 3 * p) : (centralBinom n).factorization p = 0 :=\n  by\n  refine' factorization_choose_of_lt_three_mul _ p_le_n (p_le_n.trans _) big\n  · rintro rfl\n    linarith\n  · rw [two_mul, add_tsub_cancel_left]\n#align factorization_central_binom_of_two_mul_self_lt_three_mul factorization_central_binom_of_two_mul_self_lt_three_mul\n\n",
 "factorization_central_binom_eq_zero_of_two_mul_lt":
 "/-- If a prime `p` has positive multiplicity in the `n`th central binomial coefficient,\n`p` is no more than `2 * n`\n-/\ntheorem factorization_central_binom_eq_zero_of_two_mul_lt (h : 2 * n < p) : (centralBinom n).factorization p = 0 :=\n  factorization_choose_eq_zero_of_lt h\n#align factorization_central_binom_eq_zero_of_two_mul_lt factorization_central_binom_eq_zero_of_two_mul_lt\n\n"}