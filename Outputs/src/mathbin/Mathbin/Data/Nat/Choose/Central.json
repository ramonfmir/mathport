{"two_le_central_binom":
 "theorem two_le_central_binom (n : ℕ) (n_pos : 0 < n) : 2 ≤ centralBinom n :=\n  calc\n    2 ≤ 2 * n := le_mul_of_pos_right n_pos\n    _ = (2 * n).choose 1 := (choose_one_right (2 * n)).symm\n    _ ≤ centralBinom n := choose_le_centralBinom 1 n\n    \n#align two_le_central_binom two_le_central_binom\n\n",
 "two_dvd_central_binom_succ":
 "theorem two_dvd_central_binom_succ (n : ℕ) : 2 ∣ centralBinom (n + 1) :=\n  by\n  use (n + 1 + n).choose n\n  rw [central_binom_eq_two_mul_choose, two_mul, ← add_assoc, choose_succ_succ, choose_symm_add, ← two_mul]\n#align two_dvd_central_binom_succ two_dvd_central_binom_succ\n\n",
 "two_dvd_central_binom_of_one_le":
 "theorem two_dvd_central_binom_of_one_le {n : ℕ} (h : 0 < n) : 2 ∣ centralBinom n :=\n  by\n  rw [← nat.succ_pred_eq_of_pos h]\n  exact two_dvd_central_binom_succ n.pred\n#align two_dvd_central_binom_of_one_le two_dvd_central_binom_of_one_le\n\n",
 "succ_mul_central_binom_succ":
 "/-- An inductive property of the central binomial coefficient.\n-/\ntheorem succ_mul_central_binom_succ (n : ℕ) : (n + 1) * centralBinom (n + 1) = 2 * (2 * n + 1) * centralBinom n :=\n  calc\n    (n + 1) * (2 * (n + 1)).choose (n + 1) = (2 * n + 2).choose (n + 1) * (n + 1) := mul_comm _ _\n    _ = (2 * n + 1).choose n * (2 * n + 2) := by rw [choose_succ_right_eq, choose_mul_succ_eq]\n    _ = 2 * ((2 * n + 1).choose n * (n + 1)) := by ring\n    _ = 2 * ((2 * n + 1).choose n * (2 * n + 1 - n)) := by rw [two_mul n, add_assoc, nat.add_sub_cancel_left]\n    _ = 2 * ((2 * n).choose n * (2 * n + 1)) := by rw [choose_mul_succ_eq]\n    _ = 2 * (2 * n + 1) * (2 * n).choose n := by rw [mul_assoc, mul_comm (2 * n + 1)]\n    \n#align succ_mul_central_binom_succ succ_mul_central_binom_succ\n\n",
 "succ_dvd_central_binom":
 "/-- A crucial lemma to ensure that Catalan numbers can be defined via their explicit formula\n  `catalan n = n.central_binom / (n + 1)`. -/\ntheorem succ_dvd_central_binom (n : ℕ) : n + 1 ∣ n.central_binom :=\n  by\n  have h_s : (n + 1).coprime (2 * n + 1) :=\n    by\n    rw [two_mul, add_assoc, coprime_add_self_right, coprime_self_add_left]\n    exact coprime_one_left n\n  apply h_s.dvd_of_dvd_mul_left\n  apply dvd_of_mul_dvd_mul_left zero_lt_two\n  rw [← mul_assoc, ← succ_mul_central_binom_succ, mul_comm]\n  exact mul_dvd_mul_left _ (two_dvd_central_binom_succ n)\n#align succ_dvd_central_binom succ_dvd_central_binom\n\n",
 "four_pow_lt_mul_central_binom":
 "/-- An exponential lower bound on the central binomial coefficient.\nThis bound is of interest because it appears in\n[Tochiori's refinement of Erdős's proof of Bertrand's postulate](tochiori_bertrand).\n-/\ntheorem four_pow_lt_mul_central_binom (n : ℕ) (n_big : 4 ≤ n) : 4 ^ n < n * centralBinom n :=\n  by\n  induction' n using nat.strong_induction_on with n IH\n  rcases lt_trichotomy n 4 with (hn | rfl | hn)\n  · clear IH\n    decide!\n  · norm_num [central_binom, choose]\n  obtain ⟨n, rfl⟩ : ∃ m, n = m + 1 := nat.exists_eq_succ_of_ne_zero (zero_lt_four.trans hn).ne'\n  calc\n    4 ^ (n + 1) < 4 * (n * central_binom n) :=\n      (mul_lt_mul_left <| zero_lt_four' ℕ).mpr (IH n n.lt_succ_self (nat.le_of_lt_succ hn))\n    _ ≤ 2 * (2 * n + 1) * central_binom n := by\n      rw [← mul_assoc]\n      linarith\n    _ = (n + 1) * central_binom (n + 1) := (succ_mul_central_binom_succ n).symm\n    \n#align four_pow_lt_mul_central_binom four_pow_lt_mul_central_binom\n\n",
 "four_pow_le_two_mul_self_mul_central_binom":
 "/-- An exponential lower bound on the central binomial coefficient.\nThis bound is weaker than `nat.four_pow_lt_mul_central_binom`, but it is of historical interest\nbecause it appears in Erdős's proof of Bertrand's postulate.\n-/\ntheorem four_pow_le_two_mul_self_mul_central_binom : ∀ (n : ℕ) (n_pos : 0 < n), 4 ^ n ≤ 2 * n * centralBinom n\n  | 0, pr => (nat.not_lt_zero _ pr).elim\n  | 1, pr => by norm_num [central_binom, choose]\n  | 2, pr => by norm_num [central_binom, choose]\n  | 3, pr => by norm_num [central_binom, choose]\n  | n@(m + 4), _ =>\n    calc\n      4 ^ n ≤ n * centralBinom n := (four_pow_lt_mul_centralBinom _ le_add_self).le\n      _ ≤ 2 * n * centralBinom n := by\n        rw [mul_assoc]\n        refine' le_mul_of_pos_left zero_lt_two\n      \n#align four_pow_le_two_mul_self_mul_central_binom four_pow_le_two_mul_self_mul_central_binom\n\n",
 "choose_le_central_binom":
 "/-- The central binomial coefficient is the largest binomial coefficient.\n-/\ntheorem choose_le_central_binom (r n : ℕ) : choose (2 * n) r ≤ centralBinom n :=\n  calc\n    (2 * n).choose r ≤ (2 * n).choose (2 * n / 2) := choose_le_middle r (2 * n)\n    _ = (2 * n).choose n := by rw [nat.mul_div_cancel_left n zero_lt_two]\n    \n#align choose_le_central_binom choose_le_central_binom\n\n",
 "central_binom_zero":
 "@[simp]\ntheorem central_binom_zero : centralBinom 0 = 1 :=\n  choose_zero_right _\n#align central_binom_zero central_binom_zero\n\n",
 "central_binom_pos":
 "theorem central_binom_pos (n : ℕ) : 0 < centralBinom n :=\n  choose_pos (Nat.le_mul_of_pos_left zero_lt_two)\n#align central_binom_pos central_binom_pos\n\n",
 "central_binom_ne_zero":
 "theorem central_binom_ne_zero (n : ℕ) : centralBinom n ≠ 0 :=\n  (centralBinom_pos n).ne'\n#align central_binom_ne_zero central_binom_ne_zero\n\n",
 "central_binom_eq_two_mul_choose":
 "/-\nCopyright (c) 2021 Patrick Stevens. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Stevens, Thomas Browning\n-/\ntheorem central_binom_eq_two_mul_choose (n : ℕ) : centralBinom n = (2 * n).choose n :=\n  rfl\n#align central_binom_eq_two_mul_choose central_binom_eq_two_mul_choose\n\n"}