{"dvd_choose_self":
 "theorem dvd_choose_self {p k : ℕ} (hk : 0 < k) (hkp : k < p) (hp : Prime p) : p ∣ choose p k :=\n  by\n  have r : k + (p - k) = p := by rw [← add_tsub_assoc_of_le (nat.le_of_lt hkp) k, add_tsub_cancel_left]\n  have e : p ∣ choose (k + (p - k)) k := dvd_choose_add hkp (nat.sub_lt (hk.trans hkp) hk) (by rw [r]) hp\n  rwa [r] at e\n#align dvd_choose_self dvd_choose_self\n\n",
 "dvd_choose_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes, Patrick Stevens\n-/\ntheorem dvd_choose_add {p a b : ℕ} (hap : a < p) (hbp : b < p) (h : p ≤ a + b) (hp : Prime p) : p ∣ choose (a + b) a :=\n  by\n  have h₁ : p ∣ nat.factorial (a + b) := hp.dvd_factorial.2 h\n  have h₂ : ¬p ∣ nat.factorial a := mt hp.dvd_factorial.1 (not_le_of_gt hap)\n  have h₃ : ¬p ∣ nat.factorial b := mt hp.dvd_factorial.1 (not_le_of_gt hbp)\n  rw [← choose_mul_factorial_mul_factorial (le.intro rfl), mul_assoc, hp.dvd_mul, hp.dvd_mul,\n      add_tsub_cancel_left a b] at h₁ <;>\n    exact h₁.resolve_right (not_or.2 ⟨h₂, h₃⟩)\n#align dvd_choose_add dvd_choose_add\n\n"}