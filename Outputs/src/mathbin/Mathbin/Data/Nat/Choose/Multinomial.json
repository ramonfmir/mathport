{"sum_pow_of_commute":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- The multinomial theorem\n\n  Proof is by induction on the number of summands.\n-/\ntheorem sum_pow_of_commute [Semiring R] (x : α → R) (hc : (s : Set α).pairwise fun i j => Commute (x i) (x j)) :\n    ∀ n,\n      s.sum x ^ n =\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (k.1.1.multinomial *\n            (k.1.1.map <| x).noncomm_prod (Multiset.map_set_pairwise <| hc.mono <| mem_sym_iff.1 k.2)) :=\n  by\n  induction' s using Finset.induction with a s ha ih\n  · rw [sum_empty]\n    rintro (_ | n)\n    · rw [pow_zero, Fintype.sum_subsingleton]\n      swap\n      · exact ⟨0, or.inl rfl⟩\n      convert(one_mul _).symm\n      apply Nat.cast_one\n    · rw [pow_succ, MulZeroClass.zero_mul]\n      apply (Fintype.sum_empty _).symm\n      rw [sym_empty]\n      infer_instance\n  intro n; specialize ih (hc.mono <| s.subset_insert a)\n  rw [sum_insert ha, (Commute.sum_right s _ _ fun b hb => _).add_pow, sum_range]; swap\n  · exact hc (mem_insert_self a s) (mem_insert_of_mem hb) (ne_of_mem_of_not_mem hb ha).symm\n  simp_rw [ih, mul_sum, sum_mul, sum_sigma', univ_sigma_univ]\n  refine' (Fintype.sum_equiv (sym_insert_equiv ha) _ _ fun m => _).symm\n  rw [m.1.1.multinomial_filter_ne a]\n  conv in m.1.1.map _ => rw [← m.1.1.filter_add_not ((· = ·) a), Multiset.map_add]\n  simp_rw [Multiset.noncommProd_add, m.1.1.filter_eq, Multiset.map_replicate, m.1.2]\n  rw [Multiset.noncommProd_eq_pow_card _ _ _ fun _ => Multiset.eq_of_mem_replicate]\n  rw [Multiset.card_replicate, Nat.cast_mul, mul_assoc, Nat.cast_comm]\n  congr 1; simp_rw [← mul_assoc, Nat.cast_comm]; rfl\n#align sum_pow_of_commute sum_pow_of_commute\n\n",
 "sum_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem sum_pow [CommSemiring R] (x : α → R) (n : ℕ) :\n    s.sum x ^ n =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (s.sym n)\n        (k.val.multinomial * (k.val.map x).prod) :=\n  by\n  conv_rhs => rw [← sum_coe_sort]\n  convert sum_pow_of_commute s x (fun _ _ _ _ _ => mul_comm _ _) n\n  ext1; rw [Multiset.noncommProd_eq_prod]; rfl\n#align sum_pow sum_pow\n\n",
 "succ_mul_binomial":
 "theorem succ_mul_binomial [DecidableEq α] (h : a ≠ b) :\n    (f a + f b).succ * multinomial {a, b} f = (f a).succ * multinomial {a, b} (f.update a (f a).succ) :=\n  by\n  rw [binomial_eq_choose _ h, binomial_eq_choose _ h, mul_comm (f a).succ, Function.update_same,\n    Function.update_noteq (ne_comm.mp h)]\n  convert succ_mul_choose_eq (f a + f b) (f a)\n  exact succ_add (f a) (f b)\n#align succ_mul_binomial succ_mul_binomial\n\n",
 "multinomial_update":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem multinomial_update (a : α) (f : «expr →₀ » α ℕ) :\n    f.multinomial = (f.sum fun _ => id).choose (f a) * (f.update a 0).multinomial :=\n  by\n  simp only [multinomial_eq]\n  classical\n    by_cases a ∈ f.support\n    · rw [← Finset.insert_erase h, Nat.multinomial_insert _ f (Finset.not_mem_erase a _), Finset.add_sum_erase _ f h,\n        support_update_zero]\n      congr 1\n      exact Nat.multinomial_congr _ fun _ h => (Function.update_noteq (Finset.mem_erase.1 h).1 0 f).symm\n    rw [not_mem_support_iff] at h\n    rw [h, Nat.choose_zero_right, one_mul, ← h, update_self]\n#align multinomial_update multinomial_update\n\n",
 "multinomial_univ_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem multinomial_univ_two (a b : ℕ) :\n    multinomial Finset.univ\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") =\n      nat.factorial (a + b) / (nat.factorial a * nat.factorial b) :=\n  by simp [multinomial, Fin.sum_univ_two, Fin.prod_univ_two]\n#align multinomial_univ_two multinomial_univ_two\n\n",
 "multinomial_univ_three":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem multinomial_univ_three (a b c : ℕ) :\n    multinomial Finset.univ\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") =\n      nat.factorial (a + b + c) / (nat.factorial a * nat.factorial b * nat.factorial c) :=\n  by simp [multinomial, Fin.sum_univ_three, Fin.prod_univ_three]\n#align multinomial_univ_three multinomial_univ_three\n\n",
 "multinomial_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem multinomial_spec :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s\n          (nat.factorial (f i)) *\n        multinomial s f =\n      nat.factorial\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) :=\n  Nat.mul_div_cancel' (prod_factorial_dvd_factorial_sum s f)\n#align multinomial_spec multinomial_spec\n\n",
 "multinomial_singleton":
 "@[simp]\ntheorem multinomial_singleton : multinomial {a} f = 1 := by simp [multinomial, nat.div_self (factorial_pos (f a))]\n#align multinomial_singleton multinomial_singleton\n\n",
 "multinomial_pos":
 "/-\nCopyright (c) 2022 Pim Otte. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kyle Miller, Pim Otte\n-/\ntheorem multinomial_pos : 0 < multinomial s f :=\n  Nat.div_pos (le_of_dvd (factorial_pos _) (prod_factorial_dvd_factorial_sum s f)) (prod_factorial_pos s f)\n#align multinomial_pos multinomial_pos\n\n",
 "multinomial_nil":
 "@[simp]\ntheorem multinomial_nil : multinomial ∅ f = 1 :=\n  rfl\n#align multinomial_nil multinomial_nil\n\n",
 "multinomial_insert_one":
 "@[simp]\ntheorem multinomial_insert_one [DecidableEq α] (h : a ∉ s) (h₁ : f a = 1) :\n    multinomial (insert a s) f = (s.sum f).succ * multinomial s f :=\n  by\n  simp only [multinomial, one_mul, factorial]\n  rw [Finset.sum_insert h, Finset.prod_insert h, h₁, add_comm, ← succ_eq_add_one, factorial_succ]\n  simp only [factorial_one, one_mul, Function.comp_apply, factorial]\n  rw [Nat.mul_div_assoc _ (prod_factorial_dvd_factorial_sum _ _)]\n#align multinomial_insert_one multinomial_insert_one\n\n",
 "multinomial_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem multinomial_insert [DecidableEq α] (h : a ∉ s) :\n    multinomial (insert a s) f = (f a + s.sum f).choose (f a) * multinomial s f :=\n  by\n  rw [choose_eq_factorial_div_factorial (le.intro rfl)]\n  simp only [multinomial, nat.add_sub_cancel_left, Finset.sum_insert h, Finset.prod_insert h, Function.comp_apply]\n  rw [div_mul_div_comm ((f a).factorial_mul_factorial_dvd_factorial_add (s.sum f))\n      (prod_factorial_dvd_factorial_sum _ _),\n    mul_comm (nat.factorial (f a)) (nat.factorial (s.sum f)), mul_assoc, mul_comm _ (nat.factorial (s.sum f)),\n    nat.mul_div_mul _ _ (factorial_pos _)]\n#align multinomial_insert multinomial_insert\n\n",
 "multinomial_filter_ne":
 "theorem multinomial_filter_ne [DecidableEq α] (a : α) (m : Multiset α) :\n    m.multinomial = m.card.choose (m.count a) * (m.filter ((· ≠ ·) a)).multinomial :=\n  by\n  dsimp only [multinomial]\n  convert Finsupp.multinomial_update a _\n  · rw [← Finsupp.card_toMultiset, m.to_finsupp_to_multiset]\n  · ext1 a'\n    rw [to_finsupp_apply, count_filter, Finsupp.coe_update]\n    split_ifs\n    · rw [Function.update_noteq h.symm, to_finsupp_apply]\n    · rw [not_ne_iff.1 h, Function.update_same]\n#align multinomial_filter_ne multinomial_filter_ne\n\n",
 "multinomial_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem multinomial_eq (f : «expr →₀ » α ℕ) : f.multinomial = Nat.multinomial f.support f :=\n  rfl\n#align multinomial_eq multinomial_eq\n\n",
 "multinomial_congr":
 "theorem multinomial_congr {f g : α → ℕ} (h : ∀ a ∈ s, f a = g a) : multinomial s f = multinomial s g :=\n  by\n  simp only [multinomial]; congr 1\n  · rw [Finset.sum_congr rfl h]\n  · exact Finset.prod_congr rfl fun a ha => by rw [h a ha]\n#align multinomial_congr multinomial_congr\n\n",
 "binomial_succ_succ":
 "theorem binomial_succ_succ [DecidableEq α] (h : a ≠ b) :\n    multinomial {a, b} ((f.update a (f a).succ).update b (f b).succ) =\n      multinomial {a, b} (f.update a (f a).succ) + multinomial {a, b} (f.update b (f b).succ) :=\n  by\n  simp only [binomial_eq_choose, Function.update_apply, Function.update_noteq, succ_add, add_succ, choose_succ_succ, h,\n    ne.def, not_false_iff, Function.update_same]\n  rw [if_neg h.symm]\n  ring\n#align binomial_succ_succ binomial_succ_succ\n\n",
 "binomial_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem binomial_spec [DecidableEq α] (hab : a ≠ b) :\n    nat.factorial (f a) * nat.factorial (f b) * multinomial {a, b} f = nat.factorial (f a + f b) := by\n  simpa [Finset.sum_pair hab, Finset.prod_pair hab] using multinomial_spec {a, b} f\n#align binomial_spec binomial_spec\n\n",
 "binomial_one":
 "@[simp]\ntheorem binomial_one [DecidableEq α] (h : a ≠ b) (h₁ : f a = 1) : multinomial {a, b} f = (f b).succ := by\n  simp [multinomial_insert_one {b} f (finset.not_mem_singleton.mpr h) h₁]\n#align binomial_one binomial_one\n\n",
 "binomial_eq_choose":
 "theorem binomial_eq_choose [DecidableEq α] (h : a ≠ b) : multinomial {a, b} f = (f a + f b).choose (f a) := by\n  simp [binomial_eq _ h, choose_eq_factorial_div_factorial (nat.le_add_right _ _)]\n#align binomial_eq_choose binomial_eq_choose\n\n",
 "binomial_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem binomial_eq [DecidableEq α] (h : a ≠ b) :\n    multinomial {a, b} f = nat.factorial (f a + f b) / (nat.factorial (f a) * nat.factorial (f b)) := by\n  simp [multinomial, Finset.sum_pair h, Finset.prod_pair h]\n#align binomial_eq binomial_eq\n\n"}