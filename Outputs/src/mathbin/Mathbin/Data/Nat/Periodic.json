{"periodic_mod":
 "theorem periodic_mod (a : ℕ) : Periodic (fun n => n % a) a := by\n  simp only [forall_const, eq_self_iff_true, add_mod_right, periodic]\n#align periodic_mod periodic_mod\n\n",
 "periodic_gcd":
 "/-\nCopyright (c) 2021 Bolton Bailey. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bolton Bailey\n-/\ntheorem periodic_gcd (a : ℕ) : Periodic (gcd a) a := by\n  simp only [forall_const, gcd_add_self_right, eq_self_iff_true, periodic]\n#align periodic_gcd periodic_gcd\n\n",
 "periodic_coprime":
 "theorem periodic_coprime (a : ℕ) : Periodic (coprime a) a := by\n  simp only [coprime_add_self_right, forall_const, iff_self_iff, eq_iff_iff, periodic]\n#align periodic_coprime periodic_coprime\n\n",
 "map_mod_nat":
 "#print Function.Periodic.map_mod_nat /-\ntheorem Function.Periodic.map_mod_nat {α : Type _} {f : ℕ → α} {a : ℕ} (hf : Periodic f a) : ∀ n, f (n % a) = f n :=\n  fun n => by conv_rhs => rw [← nat.mod_add_div n a, mul_comm, ← Nat.nsmul_eq_mul, hf.nsmul]\n#align function.periodic.map_mod_nat Function.Periodic.map_mod_nat\n-/\n\n",
 "filter_multiset_Ico_card_eq_of_periodic":
 "/-- An interval of length `a` filtered over a periodic predicate of period `a` has cardinality\nequal to the number naturals below `a` for which `p a` is true. -/\ntheorem filter_multiset_Ico_card_eq_of_periodic (n a : ℕ) (p : ℕ → Prop) [DecidablePred p] (pp : Periodic p a) :\n    (filter p (Ico n (n + a))).card = a.count p :=\n  by\n  rw [count_eq_card_filter_range, Finset.card, Finset.filter_val, Finset.range_val, ← multiset_Ico_map_mod n, ←\n    map_count_true_eq_filter_card, ← map_count_true_eq_filter_card, map_map, Function.comp]\n  simp only [pp.map_mod_nat]\n#align filter_multiset_Ico_card_eq_of_periodic filter_multiset_Ico_card_eq_of_periodic\n\n",
 "filter_Ico_card_eq_of_periodic":
 "/-- An interval of length `a` filtered over a periodic predicate of period `a` has cardinality\nequal to the number naturals below `a` for which `p a` is true. -/\ntheorem filter_Ico_card_eq_of_periodic (n a : ℕ) (p : ℕ → Prop) [DecidablePred p] (pp : Periodic p a) :\n    ((Ico n (n + a)).filter p).card = a.count p :=\n  filter_multiset_Ico_card_eq_of_periodic n a p pp\n#align filter_Ico_card_eq_of_periodic filter_Ico_card_eq_of_periodic\n\n"}