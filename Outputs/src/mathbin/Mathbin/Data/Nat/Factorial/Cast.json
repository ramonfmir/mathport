{"cast_factorial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem cast_factorial : (nat.factorial a : S) = (pochhammer S a).eval 1 := by\n  rw [← zero_asc_factorial, cast_asc_factorial, cast_zero, zero_add]\n#align cast_factorial cast_factorial\n\n",
 "cast_desc_factorial_two":
 "/-- Convenience lemma. The `a - 1` is not using truncated subtraction, as opposed to the definition\nof `nat.desc_factorial` as a natural. -/\ntheorem cast_desc_factorial_two : (a.desc_factorial 2 : S) = a * (a - 1) :=\n  by\n  rw [cast_desc_factorial]\n  cases a\n  · rw [zero_tsub, cast_zero, pochhammer_ne_zero_eval_zero _ two_ne_zero, zero_mul]\n  ·\n    rw [succ_sub_succ, tsub_zero, cast_succ, add_sub_cancel, pochhammer_succ_right, pochhammer_one, polynomial.X_mul,\n      polynomial.eval_mul_X, polynomial.eval_add, polynomial.eval_X, cast_one, polynomial.eval_one]\n#align cast_desc_factorial_two cast_desc_factorial_two\n\n",
 "cast_desc_factorial":
 "theorem cast_desc_factorial : (a.desc_factorial b : S) = (pochhammer S b).eval (a - (b - 1) : ℕ) :=\n  by\n  rw [← pochhammer_eval_cast, pochhammer_nat_eq_desc_factorial]\n  cases b\n  · simp_rw [desc_factorial_zero]\n  simp_rw [add_succ, succ_sub_one]\n  obtain h | h := le_total a b\n  · rw [desc_factorial_of_lt (lt_succ_of_le h), desc_factorial_of_lt (lt_succ_of_le _)]\n    rw [tsub_eq_zero_iff_le.mpr h, zero_add]\n  · rw [tsub_add_cancel_of_le h]\n#align cast_desc_factorial cast_desc_factorial\n\n",
 "cast_asc_factorial":
 "/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem cast_asc_factorial : (a.asc_factorial b : S) = (pochhammer S b).eval (a + 1) := by\n  rw [← pochhammer_nat_eq_asc_factorial, pochhammer_eval_cast, Nat.cast_add, Nat.cast_one]\n#align cast_asc_factorial cast_asc_factorial\n\n"}