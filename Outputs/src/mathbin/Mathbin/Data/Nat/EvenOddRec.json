{"even_odd_rec_zero":
 "/-\nCopyright (c) 2022 Stuart Presnell. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Stuart Presnell\n-/\n@[simp]\ntheorem even_odd_rec_zero (P : ℕ → Sort _) (h0 : P 0) (h_even : ∀ i, P i → P (2 * i))\n    (h_odd : ∀ i, P i → P (2 * i + 1)) : @evenOddRec _ h0 h_even h_odd 0 = h0 :=\n  binaryRec_zero _ _\n#align even_odd_rec_zero even_odd_rec_zero\n\n",
 "even_odd_rec_odd":
 "@[simp]\ntheorem even_odd_rec_odd (n : ℕ) (P : ℕ → Sort _) (h0 : P 0) (h_even : ∀ i, P i → P (2 * i))\n    (h_odd : ∀ i, P i → P (2 * i + 1)) (H : h_even 0 h0 = h0) :\n    @evenOddRec _ h0 h_even h_odd (2 * n + 1) = h_odd n (evenOddRec h0 h_even h_odd n) :=\n  by\n  convert binary_rec_eq _ tt n\n  · exact (bit0_eq_two_mul _).symm\n  · exact (bit0_eq_two_mul _).symm\n  · apply heq_of_cast_eq\n    rfl\n  · exact H\n#align even_odd_rec_odd even_odd_rec_odd\n\n",
 "even_odd_rec_even":
 "@[simp]\ntheorem even_odd_rec_even (n : ℕ) (P : ℕ → Sort _) (h0 : P 0) (h_even : ∀ i, P i → P (2 * i))\n    (h_odd : ∀ i, P i → P (2 * i + 1)) (H : h_even 0 h0 = h0) :\n    @evenOddRec _ h0 h_even h_odd (2 * n) = h_even n (evenOddRec h0 h_even h_odd n) :=\n  by\n  convert binary_rec_eq _ ff n\n  · exact (bit0_eq_two_mul _).symm\n  · exact (bit0_eq_two_mul _).symm\n  · apply heq_of_cast_eq\n    rfl\n  · exact H\n#align even_odd_rec_even even_odd_rec_even\n\n"}