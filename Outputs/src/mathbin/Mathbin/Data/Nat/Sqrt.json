{"succ_le_succ_sqrt'":
 "theorem succ_le_succ_sqrt' (n : ℕ) : n + 1 ≤ (sqrt n + 1) ^ 2 :=\n  le_of_pred_lt (lt_succ_sqrt' _)\n#align succ_le_succ_sqrt' succ_le_succ_sqrt'\n\n",
 "succ_le_succ_sqrt":
 "theorem succ_le_succ_sqrt (n : ℕ) : n + 1 ≤ (sqrt n + 1) * (sqrt n + 1) :=\n  le_of_pred_lt (lt_succ_sqrt _)\n#align succ_le_succ_sqrt succ_le_succ_sqrt\n\n",
 "sqrt_zero":
 "@[simp]\ntheorem sqrt_zero : sqrt 0 = 0 := by rw [sqrt, size_zero, sqrt._match_1]\n#align sqrt_zero sqrt_zero\n\n",
 "sqrt_succ_le_succ_sqrt":
 "theorem sqrt_succ_le_succ_sqrt (n : ℕ) : sqrt n.succ ≤ n.sqrt.succ :=\n  le_of_lt_succ <|\n    sqrt_lt.2 <|\n      lt_succ_of_le <|\n        succ_le_succ <|\n          le_trans (sqrt_le_add n) <|\n            add_le_add_right (by refine' add_le_add (nat.mul_le_mul_right _ _) _ <;> exact nat.le_add_right _ 2) _\n#align sqrt_succ_le_succ_sqrt sqrt_succ_le_succ_sqrt\n\n",
 "sqrt_pos":
 "theorem sqrt_pos {n : ℕ} : 0 < sqrt n ↔ 0 < n :=\n  le_sqrt\n#align sqrt_pos sqrt_pos\n\n",
 "sqrt_one":
 "@[simp]\ntheorem sqrt_one : sqrt 1 = 1 :=\n  sqrt_eq 1\n#align sqrt_one sqrt_one\n\n",
 "sqrt_mul_sqrt_lt_succ'":
 "theorem sqrt_mul_sqrt_lt_succ' (n : ℕ) : sqrt n ^ 2 < n + 1 :=\n  lt_succ_iff.mpr (sqrt_le' _)\n#align sqrt_mul_sqrt_lt_succ' sqrt_mul_sqrt_lt_succ'\n\n",
 "sqrt_mul_sqrt_lt_succ":
 "theorem sqrt_mul_sqrt_lt_succ (n : ℕ) : sqrt n * sqrt n < n + 1 :=\n  lt_succ_iff.mpr (sqrt_le _)\n#align sqrt_mul_sqrt_lt_succ sqrt_mul_sqrt_lt_succ\n\n",
 "sqrt_lt_self":
 "theorem sqrt_lt_self {n : ℕ} (h : 1 < n) : sqrt n < n :=\n  sqrt_lt.2 <| by have := nat.mul_lt_mul_of_pos_left h (lt_of_succ_lt h) <;> rwa [mul_one] at this\n#align sqrt_lt_self sqrt_lt_self\n\n",
 "sqrt_lt'":
 "theorem sqrt_lt' {m n : ℕ} : sqrt m < n ↔ m < n ^ 2 :=\n  lt_iff_lt_of_le_iff_le le_sqrt'\n#align sqrt_lt' sqrt_lt'\n\n",
 "sqrt_lt":
 "theorem sqrt_lt {m n : ℕ} : sqrt m < n ↔ m < n * n :=\n  lt_iff_lt_of_le_iff_le le_sqrt\n#align sqrt_lt sqrt_lt\n\n",
 "sqrt_le_sqrt":
 "theorem sqrt_le_sqrt {m n : ℕ} (h : m ≤ n) : sqrt m ≤ sqrt n :=\n  le_sqrt.2 (le_trans (sqrt_le _) h)\n#align sqrt_le_sqrt sqrt_le_sqrt\n\n",
 "sqrt_le_self":
 "theorem sqrt_le_self (n : ℕ) : sqrt n ≤ n :=\n  le_trans (le_mul_self _) (sqrt_le n)\n#align sqrt_le_self sqrt_le_self\n\n",
 "sqrt_le_add":
 "theorem sqrt_le_add (n : ℕ) : n ≤ sqrt n * sqrt n + sqrt n + sqrt n := by\n  rw [← succ_mul] <;> exact le_of_lt_succ (lt_succ_sqrt n)\n#align sqrt_le_add sqrt_le_add\n\n",
 "sqrt_le'":
 "theorem sqrt_le' (n : ℕ) : sqrt n ^ 2 ≤ n :=\n  eq.trans_le (sq (sqrt n)) (sqrt_le n)\n#align sqrt_le' sqrt_le'\n\n",
 "sqrt_le":
 "theorem sqrt_le (n : ℕ) : sqrt n * sqrt n ≤ n :=\n  (sqrt_is_sqrt n).left\n#align sqrt_le sqrt_le\n\n",
 "sqrt_is_sqrt":
 "private theorem sqrt_is_sqrt (n : ℕ) : is_sqrt n (sqrt n) :=\n  by\n  generalize e : size n = s; cases' s with s <;> simp [e, sqrt]\n  · rw [size_eq_zero.1 e, is_sqrt]\n    exact by decide\n  · have := sqrt_aux_is_sqrt n (div2 s) 0 (zero_le _)\n    simp [show 2 ^ div2 s * 2 ^ div2 s = shiftl 1 (bit0 (div2 s))\n        by\n        generalize div2 s = x\n        change bit0 x with x + x\n        rw [one_shiftl, pow_add]] at\n      this\n    apply this\n    rw [← pow_add, ← mul_two]\n    apply size_le.1\n    rw [e]\n    apply (@div_lt_iff_lt_mul _ _ 2 (by decide)).1\n    rw [div2_val]\n    apply lt_succ_self\n#align sqrt_is_sqrt sqrt_is_sqrt\n\n",
 "sqrt_eq_zero":
 "theorem sqrt_eq_zero {n : ℕ} : sqrt n = 0 ↔ n = 0 :=\n  ⟨fun h => nat.eq_zero_of_le_zero <| le_of_lt_succ <| (@sqrt_lt n 1).1 <| by rw [h] <;> exact by decide,\n    by\n    rintro rfl\n    simp⟩\n#align sqrt_eq_zero sqrt_eq_zero\n\n",
 "sqrt_eq'":
 "theorem sqrt_eq' (n : ℕ) : sqrt (n ^ 2) = n :=\n  sqrt_add_eq' n (zero_le _)\n#align sqrt_eq' sqrt_eq'\n\n",
 "sqrt_eq":
 "theorem sqrt_eq (n : ℕ) : sqrt (n * n) = n :=\n  sqrt_add_eq n (zero_le _)\n#align sqrt_eq sqrt_eq\n\n",
 "sqrt_aux_is_sqrt_lemma":
 "private theorem sqrt_aux_is_sqrt_lemma (m r n : ℕ) (h₁ : r * r ≤ n) (m') (hm : shiftr (2 ^ m * 2 ^ m) 2 = m')\n    (H1 : n < (r + 2 ^ m) * (r + 2 ^ m) → is_sqrt n ([anonymous] m' (r * 2 ^ m) (n - r * r)))\n    (H2 :\n      (r + 2 ^ m) * (r + 2 ^ m) ≤ n →\n        is_sqrt n ([anonymous] m' ((r + 2 ^ m) * 2 ^ m) (n - (r + 2 ^ m) * (r + 2 ^ m)))) :\n    is_sqrt n ([anonymous] (2 ^ m * 2 ^ m) (2 * r * 2 ^ m) (n - r * r)) :=\n  by\n  have b0 : 2 ^ m * 2 ^ m ≠ 0 := mul_self_ne_zero.2 (pow_ne_zero m two_ne_zero)\n  have lb : n - r * r < 2 * r * 2 ^ m + 2 ^ m * 2 ^ m ↔ n < (r + 2 ^ m) * (r + 2 ^ m) :=\n    by\n    rw [tsub_lt_iff_right h₁]\n    simp [left_distrib, right_distrib, two_mul, mul_comm, mul_assoc, add_comm, add_assoc, add_left_comm]\n  have re : div2 (2 * r * 2 ^ m) = r * 2 ^ m := by\n    rw [div2_val, mul_assoc, nat.mul_div_cancel_left _ (by decide : 2 > 0)]\n  cases' lt_or_ge n ((r + 2 ^ m) * (r + 2 ^ m)) with hl hl\n  · rw [sqrt_aux_2 b0 (lb.2 hl), hm, re]\n    apply H1 hl\n  · cases' le.dest hl with n' e\n    rw [@sqrt_aux_1 (2 * r * 2 ^ m) (n - r * r) (2 ^ m * 2 ^ m) b0 (n - (r + 2 ^ m) * (r + 2 ^ m)), hm, re, ←\n      right_distrib]\n    · apply H2 hl\n    apply eq.symm\n    apply tsub_eq_of_eq_add_rev\n    rw [← add_assoc, (_ : r * r + _ = _)]\n    exact (add_tsub_cancel_of_le hl).symm\n    simp [left_distrib, right_distrib, two_mul, mul_comm, mul_assoc, add_assoc]\n#align sqrt_aux_is_sqrt_lemma sqrt_aux_is_sqrt_lemma\n\n",
 "sqrt_aux_is_sqrt":
 "private theorem sqrt_aux_is_sqrt (n) :\n    ∀ m r,\n      r * r ≤ n →\n        n < (r + 2 ^ (m + 1)) * (r + 2 ^ (m + 1)) → is_sqrt n ([anonymous] (2 ^ m * 2 ^ m) (2 * r * 2 ^ m) (n - r * r))\n  | 0, r, h₁, h₂ => by\n    apply sqrt_aux_is_sqrt_lemma 0 r n h₁ 0 rfl <;> intro h <;> simp <;> [exact ⟨h₁, h⟩, exact ⟨h, h₂⟩]\n  | m + 1, r, h₁, h₂ =>\n    by\n    apply\n        sqrt_aux_is_sqrt_lemma (m + 1) r n h₁ (2 ^ m * 2 ^ m)\n          (by\n            simp [shiftr, pow_succ, div2_val, mul_comm, mul_left_comm] <;>\n              repeat' rw [@nat.mul_div_cancel_left _ 2 (by decide)]) <;>\n      intro h\n    · have := sqrt_aux_is_sqrt m r h₁ h\n      simpa [pow_succ, mul_comm, mul_assoc]\n    · rw [pow_succ', mul_two, ← add_assoc] at h₂\n      have := sqrt_aux_is_sqrt m (r + 2 ^ (m + 1)) h h₂\n      rwa [show (r + 2 ^ (m + 1)) * 2 ^ (m + 1) = 2 * (r + 2 ^ (m + 1)) * 2 ^ m by\n          simp [pow_succ, mul_comm, mul_left_comm]]\n#align sqrt_aux_is_sqrt sqrt_aux_is_sqrt\n\n",
 "sqrt_aux_dec":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Johannes Hölzl, Mario Carneiro\n-/\ntheorem sqrt_aux_dec {b} (h : b ≠ 0) : shiftr b 2 < b :=\n  by\n  simp only [shiftr_eq_div_pow]\n  apply (Nat.div_lt_iff_lt_mul' (by decide : 0 < 4)).2\n  have := nat.mul_lt_mul_of_pos_left (by decide : 1 < 4) (nat.pos_of_ne_zero h)\n  rwa [mul_one] at this\n#align sqrt_aux_dec sqrt_aux_dec\n\n",
 "sqrt_aux_2":
 "theorem sqrt_aux_2 {r n b} (h : b ≠ 0) (h₂ : n < r + b) : [anonymous] b r n = [anonymous] (shiftr b 2) (div2 r) n :=\n  by\n  rw [sqrt_aux] <;> simp only [h, h₂, if_false]\n  cases' Int.eq_negSucc_of_lt_zero (sub_lt_zero.2 (Int.ofNat_lt_ofNat_of_lt h₂)) with k e\n  rw [e, sqrt_aux._match_1]\n#align sqrt_aux_2 sqrt_aux_2\n\n",
 "sqrt_aux_1":
 "theorem sqrt_aux_1 {r n b} (h : b ≠ 0) {n'} (h₂ : r + b + n' = n) :\n    [anonymous] b r n = [anonymous] (shiftr b 2) (div2 r + b) n' := by\n  rw [sqrt_aux] <;> simp only [h, h₂.symm, Int.ofNat_add, if_false] <;>\n    rw [add_comm _ (n' : ℤ), add_sub_cancel, sqrt_aux._match_1]\n#align sqrt_aux_1 sqrt_aux_1\n\n",
 "sqrt_aux_0":
 "theorem sqrt_aux_0 (r n) : [anonymous] 0 r n = r := by rw [sqrt_aux] <;> simp\n#align sqrt_aux_0 sqrt_aux_0\n\n",
 "sqrt_add_eq'":
 "theorem sqrt_add_eq' (n : ℕ) {a : ℕ} (h : a ≤ n + n) : sqrt (n ^ 2 + a) = n :=\n  (congr_arg (fun i => sqrt (i + a)) (sq n)).trans (sqrt_add_eq n h)\n#align sqrt_add_eq' sqrt_add_eq'\n\n",
 "sqrt_add_eq":
 "theorem sqrt_add_eq (n : ℕ) {a : ℕ} (h : a ≤ n + n) : sqrt (n * n + a) = n :=\n  le_antisymm\n    (le_of_lt_succ <|\n      sqrt_lt.2 <| by rw [succ_mul, mul_succ, add_succ, add_assoc] <;> exact lt_succ_of_le (nat.add_le_add_left h _))\n    (le_sqrt.2 <| nat.le_add_right _ _)\n#align sqrt_add_eq sqrt_add_eq\n\n",
 "not_exists_sq'":
 "theorem not_exists_sq' {n m : ℕ} (hl : m ^ 2 < n) (hr : n < (m + 1) ^ 2) : ¬∃ t, t ^ 2 = n := by\n  simpa only [pow_two] using not_exists_sq (by simpa only [pow_two] using hl) (by simpa only [pow_two] using hr)\n#align not_exists_sq' not_exists_sq'\n\n",
 "not_exists_sq":
 "/-- There are no perfect squares strictly between m² and (m+1)² -/\ntheorem not_exists_sq {n m : ℕ} (hl : m * m < n) (hr : n < (m + 1) * (m + 1)) : ¬∃ t, t * t = n :=\n  by\n  rintro ⟨t, rfl⟩\n  have h1 : m < t := nat.mul_self_lt_mul_self_iff.mpr hl\n  have h2 : t < m + 1 := nat.mul_self_lt_mul_self_iff.mpr hr\n  exact (not_lt_of_ge <| le_of_lt_succ h2) h1\n#align not_exists_sq not_exists_sq\n\n",
 "lt_succ_sqrt'":
 "theorem lt_succ_sqrt' (n : ℕ) : n < succ (sqrt n) ^ 2 :=\n  trans_rel_left (fun i j => i < j) (lt_succ_sqrt n) (sq (succ (sqrt n))).symm\n#align lt_succ_sqrt' lt_succ_sqrt'\n\n",
 "lt_succ_sqrt":
 "theorem lt_succ_sqrt (n : ℕ) : n < succ (sqrt n) * succ (sqrt n) :=\n  (sqrt_is_sqrt n).right\n#align lt_succ_sqrt lt_succ_sqrt\n\n",
 "le_three_of_sqrt_eq_one":
 "theorem le_three_of_sqrt_eq_one {n : ℕ} (h : sqrt n = 1) : n ≤ 3 :=\n  le_of_lt_succ <| (@sqrt_lt n 2).1 <| by rw [h] <;> exact by decide\n#align le_three_of_sqrt_eq_one le_three_of_sqrt_eq_one\n\n",
 "le_sqrt'":
 "theorem le_sqrt' {m n : ℕ} : m ≤ sqrt n ↔ m ^ 2 ≤ n := by simpa only [pow_two] using le_sqrt\n#align le_sqrt' le_sqrt'\n\n",
 "le_sqrt":
 "theorem le_sqrt {m n : ℕ} : m ≤ sqrt n ↔ m * m ≤ n :=\n  ⟨fun h => le_trans (mul_self_le_mul_self h) (sqrt_le n), fun h =>\n    le_of_lt_succ <| mul_self_lt_mul_self_iff.2 <| lt_of_le_of_lt h (lt_succ_sqrt n)⟩\n#align le_sqrt le_sqrt\n\n",
 "exists_mul_self'":
 "theorem exists_mul_self' (x : ℕ) : (∃ n, n ^ 2 = x) ↔ sqrt x ^ 2 = x := by simpa only [pow_two] using exists_mul_self x\n#align exists_mul_self' exists_mul_self'\n\n",
 "exists_mul_self":
 "theorem exists_mul_self (x : ℕ) : (∃ n, n * n = x) ↔ sqrt x * sqrt x = x :=\n  ⟨fun ⟨n, hn⟩ => by rw [← hn, sqrt_eq], fun h => ⟨sqrt x, h⟩⟩\n#align exists_mul_self exists_mul_self\n\n",
 "eq_sqrt'":
 "theorem eq_sqrt' {n q} : q = sqrt n ↔ q ^ 2 ≤ n ∧ n < (q + 1) ^ 2 := by simpa only [pow_two] using eq_sqrt\n#align eq_sqrt' eq_sqrt'\n\n",
 "eq_sqrt":
 "theorem eq_sqrt {n q} : q = sqrt n ↔ q * q ≤ n ∧ n < (q + 1) * (q + 1) :=\n  ⟨fun e => e.symm ▸ sqrt_is_sqrt n, fun ⟨h₁, h₂⟩ => le_antisymm (le_sqrt.2 h₁) (le_of_lt_succ <| sqrt_lt.2 h₂)⟩\n#align eq_sqrt eq_sqrt\n\n"}