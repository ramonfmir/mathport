{"prod_factors":
 "theorem prod_factors : ∀ {n}, n ≠ 0 → List.prod (factors n) = n\n  | 0 => by simp\n  | 1 => by simp\n  | n@(k + 2) => fun h =>\n    let m := minFac n\n    have : n / m < n := factors_lemma\n    show (factors n).prod = n\n      by\n      have h₁ : n / m ≠ 0 := fun h =>\n        by\n        have : n = 0 * m := (Nat.div_eq_iff_eq_mul_left (min_fac_pos _) (minFac_dvd _)).1 h\n        rw [zero_mul] at this <;> exact (show k + 2 ≠ 0 by decide) this\n      rw [factors, List.prod_cons, prod_factors h₁, Nat.mul_div_cancel' (min_fac_dvd _)]\n#align prod_factors prod_factors\n\n",
 "prime_of_mem_factors":
 "theorem prime_of_mem_factors : ∀ {n p}, p ∈ factors n → Prime p\n  | 0 => by simp\n  | 1 => by simp\n  | n@(k + 2) => fun p h =>\n    let m := minFac n\n    have : n / m < n := factors_lemma\n    have h₁ : p = m ∨ p ∈ factors (n / m) := (List.mem_cons _ _ _).1 (by rwa [factors] at h)\n    or.cases_on h₁ (fun h₂ => h₂.symm ▸ minFac_prime (by decide)) prime_of_mem_factors\n#align prime_of_mem_factors prime_of_mem_factors\n\n",
 "pos_of_mem_factors":
 "theorem pos_of_mem_factors {n p : ℕ} (h : p ∈ factors n) : 0 < p :=\n  Prime.pos (prime_of_mem_factors h)\n#align pos_of_mem_factors pos_of_mem_factors\n\n",
 "perm_factors_mul_of_coprime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/-- For coprime `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` -/\ntheorem perm_factors_mul_of_coprime {a b : ℕ} (hab : coprime a b) :\n    list.perm (a * b).factors (a.factors ++ b.factors) :=\n  by\n  rcases a.eq_zero_or_pos with (rfl | ha)\n  · simp [(coprime_zero_left _).mp hab]\n  rcases b.eq_zero_or_pos with (rfl | hb)\n  · simp [(coprime_zero_right _).mp hab]\n  exact perm_factors_mul ha.ne' hb.ne'\n#align perm_factors_mul_of_coprime perm_factors_mul_of_coprime\n\n",
 "perm_factors_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/-- For positive `a` and `b`, the prime factors of `a * b` are the union of those of `a` and `b` -/\ntheorem perm_factors_mul {a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) : list.perm (a * b).factors (a.factors ++ b.factors) :=\n  by\n  refine' (factors_unique _ _).symm\n  · rw [List.prod_append, prod_factors ha, prod_factors hb]\n  · intro p hp\n    rw [list.mem_append] at hp\n    cases hp <;> exact prime_of_mem_factors hp\n#align perm_factors_mul perm_factors_mul\n\n",
 "mem_factors_mul_right":
 "/-- If `p` is a prime factor of `b` then `p` is also a prime factor of `a * b` for any `a > 0` -/\ntheorem mem_factors_mul_right {p a b : ℕ} (hpb : p ∈ b.factors) (ha : a ≠ 0) : p ∈ (a * b).factors :=\n  by\n  rw [mul_comm]\n  exact mem_factors_mul_left hpb ha\n#align mem_factors_mul_right mem_factors_mul_right\n\n",
 "mem_factors_mul_of_coprime":
 "theorem mem_factors_mul_of_coprime {a b : ℕ} (hab : coprime a b) (p : ℕ) :\n    p ∈ (a * b).factors ↔ p ∈ a.factors ∪ b.factors :=\n  by\n  rcases a.eq_zero_or_pos with (rfl | ha)\n  · simp [(coprime_zero_left _).mp hab]\n  rcases b.eq_zero_or_pos with (rfl | hb)\n  · simp [(coprime_zero_right _).mp hab]\n  rw [mem_factors_mul ha.ne' hb.ne', List.mem_union]\n#align mem_factors_mul_of_coprime mem_factors_mul_of_coprime\n\n",
 "mem_factors_mul_left":
 "/-- If `p` is a prime factor of `a` then `p` is also a prime factor of `a * b` for any `b > 0` -/\ntheorem mem_factors_mul_left {p a b : ℕ} (hpa : p ∈ a.factors) (hb : b ≠ 0) : p ∈ (a * b).factors :=\n  by\n  rcases eq_or_ne a 0 with (rfl | ha)\n  · simpa using hpa\n  apply (mem_factors_mul ha hb).2 (or.inl hpa)\n#align mem_factors_mul_left mem_factors_mul_left\n\n",
 "mem_factors_mul":
 "theorem mem_factors_mul {a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) {p : ℕ} :\n    p ∈ (a * b).factors ↔ p ∈ a.factors ∨ p ∈ b.factors :=\n  by\n  rw [mem_factors (mul_ne_zero ha hb), mem_factors ha, mem_factors hb, ← and_or_left]\n  simpa only [and_congr_right_iff] using prime.dvd_mul\n#align mem_factors_mul mem_factors_mul\n\n",
 "mem_factors_iff_dvd":
 "theorem mem_factors_iff_dvd {n p : ℕ} (hn : n ≠ 0) (hp : Prime p) : p ∈ factors n ↔ p ∣ n :=\n  ⟨fun h => prod_factors hn ▸ List.dvd_prod h, fun h =>\n    mem_list_primes_of_dvd_prod (prime_iff.mp hp) (fun p h => prime_iff.mp (prime_of_mem_factors h))\n      ((prod_factors hn).symm ▸ h)⟩\n#align mem_factors_iff_dvd mem_factors_iff_dvd\n\n",
 "mem_factors":
 "theorem mem_factors {n p} (hn : n ≠ 0) : p ∈ factors n ↔ Prime p ∧ p ∣ n :=\n  ⟨fun h => ⟨prime_of_mem_factors h, dvd_of_mem_factors h⟩, fun ⟨hprime, hdvd⟩ =>\n    (mem_factors_iff_dvd hn hprime).mpr hdvd⟩\n#align mem_factors mem_factors\n\n",
 "le_of_mem_factors":
 "theorem le_of_mem_factors {n p : ℕ} (h : p ∈ n.factors) : p ≤ n :=\n  by\n  rcases n.eq_zero_or_pos with (rfl | hn)\n  · rw [factors_zero] at h\n    cases h\n  · exact le_of_dvd hn (dvd_of_mem_factors h)\n#align le_of_mem_factors le_of_mem_factors\n\n",
 "factors_zero":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Jeremy Avigad, Mario Carneiro\n-/\n@[simp]\ntheorem factors_zero : factors 0 = [] := by rw [factors]\n#align factors_zero factors_zero\n\n",
 "factors_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/-- **Fundamental theorem of arithmetic**-/\ntheorem factors_unique {n : ℕ} {l : list ℕ} (h₁ : Prod l = n) (h₂ : ∀ p ∈ l, Prime p) : list.perm l (factors n) :=\n  by\n  refine' perm_of_prod_eq_prod _ _ _\n  · rw [h₁]\n    refine' (prod_factors _).symm\n    rintro rfl\n    rw [prod_eq_zero_iff] at h₁\n    exact Prime.ne_zero (h₂ 0 h₁) rfl\n  · simp_rw [← prime_iff]\n    exact h₂\n  · simp_rw [← prime_iff]\n    exact fun p => prime_of_mem_factors\n#align factors_unique factors_unique\n\n",
 "factors_subset_right":
 "theorem factors_subset_right {n k : ℕ} (h : k ≠ 0) : n.factors ⊆ (n * k).factors :=\n  (factors_sublist_right h).subset\n#align factors_subset_right factors_subset_right\n\n",
 "factors_subset_of_dvd":
 "theorem factors_subset_of_dvd {n k : ℕ} (h : n ∣ k) (h' : k ≠ 0) : n.factors ⊆ k.factors :=\n  (factors_sublist_of_dvd h h').subset\n#align factors_subset_of_dvd factors_subset_of_dvd\n\n",
 "factors_sublist_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem factors_sublist_right {n k : ℕ} (h : k ≠ 0) : «expr <+ » n.factors (n * k).factors :=\n  by\n  cases n\n  · rw [zero_mul]\n  apply sublist_of_subperm_of_sorted _ (factors_sorted _) (factors_sorted _)\n  rw [(perm_factors_mul n.succ_ne_zero h).subperm_left]\n  exact (sublist_append_left _ _).subperm\n#align factors_sublist_right factors_sublist_right\n\n",
 "factors_sublist_of_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem factors_sublist_of_dvd {n k : ℕ} (h : n ∣ k) (h' : k ≠ 0) : «expr <+ » n.factors k.factors :=\n  by\n  obtain ⟨a, rfl⟩ := h\n  exact factors_sublist_right (right_ne_zero_of_mul h')\n#align factors_sublist_of_dvd factors_sublist_of_dvd\n\n",
 "factors_sorted":
 "theorem factors_sorted (n : ℕ) : list.sorted (· ≤ ·) (factors n) :=\n  List.chain'_iff_pairwise.1 (factors_chain' _)\n#align factors_sorted factors_sorted\n\n",
 "factors_prime":
 "theorem factors_prime {p : ℕ} (hp : Nat.Prime p) : p.factors = [p] :=\n  by\n  have : p = p - 2 + 2 := (tsub_eq_iff_eq_add_of_le hp.two_le).mp rfl\n  rw [this, nat.factors]\n  simp only [eq.symm this]\n  have : Nat.minFac p = p := (nat.prime_def_min_fac.mp hp).2\n  constructor\n  · exact this\n  · simp only [this, nat.factors, nat.div_self (Nat.Prime.pos hp)]\n#align factors_prime factors_prime\n\n",
 "factors_pow":
 "theorem prime.factors_pow {p : ℕ} (hp : p.prime) (n : ℕ) : (p ^ n).factors = list.replicate n p :=\n  by\n  symm\n  rw [← List.replicate_perm]\n  apply nat.factors_unique (List.prod_replicate n p)\n  intro q hq\n  rwa [eq_of_mem_replicate hq]\n#align prime.factors_pow prime.factors_pow\n\n",
 "factors_one":
 "@[simp]\ntheorem factors_one : factors 1 = [] := by rw [factors]\n#align factors_one factors_one\n\n",
 "factors_eq_nil":
 "@[simp]\ntheorem factors_eq_nil (n : ℕ) : n.factors = [] ↔ n = 0 ∨ n = 1 :=\n  by\n  constructor <;> intro h\n  · rcases n with (_ | _ | n)\n    · exact or.inl rfl\n    · exact or.inr rfl\n    · rw [factors] at h\n      injection h\n  · rcases h with (rfl | rfl)\n    · exact factors_zero\n    · exact factors_one\n#align factors_eq_nil factors_eq_nil\n\n",
 "factors_chain_2":
 "theorem factors_chain_2 (n) : List.Chain (· ≤ ·) 2 (factors n) :=\n  factors_chain fun p pp _ => pp.two_le\n#align factors_chain_2 factors_chain_2\n\n",
 "factors_chain'":
 "theorem factors_chain' (n) : List.Chain' (· ≤ ·) (factors n) :=\n  @List.Chain'.tail _ _ (_ :: _) (factors_chain_2 _)\n#align factors_chain' factors_chain'\n\n",
 "factors_chain":
 "theorem factors_chain : ∀ {n a}, (∀ p, Prime p → p ∣ n → a ≤ p) → List.Chain (· ≤ ·) a (factors n)\n  | 0 => fun a h => by simp\n  | 1 => fun a h => by simp\n  | n@(k + 2) => fun a h => by\n    let m := minFac n\n    have : n / m < n := factors_lemma\n    rw [factors]\n    refine' List.Chain.cons ((le_min_fac.2 h).resolve_left (by decide)) (factors_chain _)\n    exact fun p pp d => min_fac_le_of_dvd pp.two_le (d.trans <| div_dvd_of_dvd <| min_fac_dvd _)\n#align factors_chain factors_chain\n\n",
 "factors_add_two":
 "/-- `factors` can be constructed inductively by extracting `min_fac`, for sufficiently large `n`. -/\ntheorem factors_add_two (n : ℕ) : factors (n + 2) = minFac (n + 2) :: factors ((n + 2) / minFac (n + 2)) := by\n  rw [factors]\n#align factors_add_two factors_add_two\n\n",
 "eq_two_pow_or_exists_odd_prime_and_dvd":
 "theorem eq_two_pow_or_exists_odd_prime_and_dvd (n : ℕ) : (∃ k : ℕ, n = 2 ^ k) ∨ ∃ p, Nat.Prime p ∧ p ∣ n ∧ Odd p :=\n  (eq_or_ne n 0).elim (fun hn => or.inr ⟨3, prime_three, hn.symm ▸ dvd_zero 3, ⟨1, rfl⟩⟩) fun hn =>\n    or_iff_not_imp_right.mpr fun H =>\n      ⟨n.factors.length,\n        eq_prime_pow_of_unique_prime_dvd hn fun p hprime hdvd =>\n          hprime.eq_two_or_odd'.resolve_right fun hodd => H ⟨p, hprime, hdvd, hodd⟩⟩\n#align eq_two_pow_or_exists_odd_prime_and_dvd eq_two_pow_or_exists_odd_prime_and_dvd\n\n",
 "eq_prime_pow_of_unique_prime_dvd":
 "theorem eq_prime_pow_of_unique_prime_dvd {n p : ℕ} (hpos : n ≠ 0) (h : ∀ {d}, Nat.Prime d → d ∣ n → d = p) :\n    n = p ^ n.factors.length := by\n  set k := n.factors.length\n  rw [← prod_factors hpos, ← prod_replicate k p,\n    eq_replicate_of_mem fun d hd => h (prime_of_mem_factors hd) (dvd_of_mem_factors hd)]\n#align eq_prime_pow_of_unique_prime_dvd eq_prime_pow_of_unique_prime_dvd\n\n",
 "eq_of_perm_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem eq_of_perm_factors {a b : ℕ} (ha : a ≠ 0) (hb : b ≠ 0) (h : list.perm a.factors b.factors) : a = b := by\n  simpa [prod_factors ha, prod_factors hb] using List.Perm.prod_eq h\n#align eq_of_perm_factors eq_of_perm_factors\n\n",
 "dvd_of_mem_factors":
 "theorem dvd_of_mem_factors {n p : ℕ} (h : p ∈ n.factors) : p ∣ n :=\n  by\n  rcases n.eq_zero_or_pos with (rfl | hn)\n  · exact dvd_zero p\n  · rwa [← mem_factors_iff_dvd hn.ne' (prime_of_mem_factors h)]\n#align dvd_of_mem_factors dvd_of_mem_factors\n\n",
 "dvd_of_factors_subperm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+~ » -/\ntheorem dvd_of_factors_subperm {a b : ℕ} (ha : a ≠ 0) (h : «expr <+~ » a.factors b.factors) : a ∣ b :=\n  by\n  rcases b.eq_zero_or_pos with (rfl | hb)\n  · exact dvd_zero _\n  rcases a with (_ | _ | a)\n  · exact (ha rfl).elim\n  · exact one_dvd _\n  use (b.factors.diff a.succ.succ.factors).prod\n  nth_rw 1 [← nat.prod_factors ha]\n  rw [← List.prod_append, List.Perm.prod_eq <| List.subperm_append_diff_self_of_count_le <| list.subperm_ext_iff.mp h,\n    nat.prod_factors hb.ne']\n#align dvd_of_factors_subperm dvd_of_factors_subperm\n\n",
 "coprime_factors_disjoint":
 "/-- The sets of factors of coprime `a` and `b` are disjoint -/\ntheorem coprime_factors_disjoint {a b : ℕ} (hab : a.coprime b) : List.Disjoint a.factors b.factors :=\n  by\n  intro q hqa hqb\n  apply not_prime_one\n  rw [← eq_one_of_dvd_coprimes hab (dvd_of_mem_factors hqa) (dvd_of_mem_factors hqb)]\n  exact prime_of_mem_factors hqa\n#align coprime_factors_disjoint coprime_factors_disjoint\n\n"}