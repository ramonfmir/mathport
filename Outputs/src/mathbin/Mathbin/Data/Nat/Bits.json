{"zero_bits":
 "@[simp]\ntheorem zero_bits : bits 0 = [] := by simp [Nat.bits]\n#align zero_bits zero_bits\n\n",
 "pos_of_bit0_pos":
 "theorem pos_of_bit0_pos {n : ℕ} (h : 0 < bit0 n) : 0 < n :=\n  by\n  cases n\n  cases h\n  apply succ_pos\n#align pos_of_bit0_pos pos_of_bit0_pos\n\n",
 "one_eq_bit1":
 "#print one_eq_bit1 /-\n@[simp]\ntheorem one_eq_bit1 {n : ℕ} : 1 = bit1 n ↔ n = 0 :=\n  ⟨fun h => (@Nat.bit1_inj 0 n h).symm, fun h => by subst h⟩\n#align one_eq_bit1 one_eq_bit1\n-/\n\n",
 "one_bits":
 "@[simp]\ntheorem one_bits : Nat.bits 1 = [true] := by\n  convert bit1_bits 0\n  simp\n#align one_bits one_bits\n\n",
 "div2_bits_eq_tail":
 "theorem div2_bits_eq_tail (n : ℕ) : n.div2.bits = n.bits.tail :=\n  by\n  induction' n using Nat.binaryRec' with b n h ih; · simp\n  simp [div2_bit, bits_append_bit _ _ h]\n#align div2_bits_eq_tail div2_bits_eq_tail\n\n",
 "div2_bit1":
 "@[simp]\ntheorem div2_bit1 (n) : div2 (bit1 n) = n :=\n  div2_bit true n\n#align div2_bit1 div2_bit1\n\n",
 "div2_bit0":
 "@[simp]\ntheorem div2_bit0 (n) : div2 (bit0 n) = n :=\n  div2_bit false n\n#align div2_bit0 div2_bit0\n\n",
 "bodd_eq_bits_head":
 "-- TODO Find somewhere this can live.\n-- example : bits 3423 = [tt, tt, tt, tt, tt, ff, tt, ff, tt, ff, tt, tt] := by norm_num\ntheorem bodd_eq_bits_head (n : ℕ) : n.bodd = n.bits.head :=\n  by\n  induction' n using Nat.binaryRec' with b n h ih; · simp\n  simp [bodd_bit, bits_append_bit _ _ h]\n#align bodd_eq_bits_head bodd_eq_bits_head\n\n",
 "bodd_div2_eq":
 "/-\nCopyright (c) 2022 Praneeth Kolichala. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Praneeth Kolichala\n-/\n@[simp]\ntheorem bodd_div2_eq (n : ℕ) : boddDiv2 n = (bodd n, div2 n) := by unfold bodd div2 <;> cases bodd_div2 n <;> rfl\n#align bodd_div2_eq bodd_div2_eq\n\n",
 "bodd_bit1":
 "@[simp]\ntheorem bodd_bit1 (n) : bodd (bit1 n) = true :=\n  bodd_bit true n\n#align bodd_bit1 bodd_bit1\n\n",
 "bodd_bit0":
 "@[simp]\ntheorem bodd_bit0 (n) : bodd (bit0 n) = false :=\n  bodd_bit false n\n#align bodd_bit0 bodd_bit0\n\n",
 "bits_append_bit":
 "@[simp]\ntheorem bits_append_bit (n : ℕ) (b : Bool) (hn : n = 0 → b = true) : (bit b n).bits = b :: n.bits :=\n  by\n  rw [Nat.bits, binary_rec_eq']\n  simpa\n#align bits_append_bit bits_append_bit\n\n",
 "bit_ne_zero":
 "theorem bit_ne_zero (b) {n} (h : n ≠ 0) : bit b n ≠ 0 := by\n  cases b <;> [exact Nat.bit0_ne_zero h, exact Nat.bit1_ne_zero _]\n#align bit_ne_zero bit_ne_zero\n\n",
 "bit_eq_zero_iff":
 "theorem bit_eq_zero_iff {n : ℕ} {b : Bool} : bit b n = 0 ↔ n = 0 ∧ b = false :=\n  by\n  constructor\n  · cases b <;> simp [Nat.bit, Nat.bit0_eq_zero]\n  rintro ⟨rfl, rfl⟩\n  rfl\n#align bit_eq_zero_iff bit_eq_zero_iff\n\n",
 "bit_cases_on_injective":
 "theorem bit_cases_on_injective {C : ℕ → Sort u} :\n    function.injective fun H : ∀ b n, C (bit b n) => fun n => bitCasesOn n H :=\n  by\n  intro H₁ H₂ h\n  ext (b n)\n  simpa only [bit_cases_on_bit] using congr_fun h (bit b n)\n#align bit_cases_on_injective bit_cases_on_injective\n\n",
 "bit_cases_on_inj":
 "@[simp]\ntheorem bit_cases_on_inj {C : ℕ → Sort u} (H₁ H₂ : ∀ b n, C (bit b n)) :\n    ((fun n => bitCasesOn n H₁) = fun n => bitCasesOn n H₂) ↔ H₁ = H₂ :=\n  bit_cases_on_injective.eq_iff\n#align bit_cases_on_inj bit_cases_on_inj\n\n",
 "bit_cases_on_bit1":
 "@[simp]\ntheorem bit_cases_on_bit1 {C : ℕ → Sort u} (H : ∀ b n, C (bit b n)) (n : ℕ) : bitCasesOn (bit1 n) H = H true n :=\n  bitCasesOn_bit H true n\n#align bit_cases_on_bit1 bit_cases_on_bit1\n\n",
 "bit_cases_on_bit0":
 "@[simp]\ntheorem bit_cases_on_bit0 {C : ℕ → Sort u} (H : ∀ b n, C (bit b n)) (n : ℕ) : bitCasesOn (bit0 n) H = H false n :=\n  bitCasesOn_bit H false n\n#align bit_cases_on_bit0 bit_cases_on_bit0\n\n",
 "bit_cases_on_bit":
 "@[simp]\ntheorem bit_cases_on_bit {C : ℕ → Sort u} (H : ∀ b n, C (bit b n)) (b : Bool) (n : ℕ) :\n    bitCasesOn (bit b n) H = H b n :=\n  eq_of_heq <| (eq_rec_heq _ _).trans <| by rw [bodd_bit, div2_bit]\n#align bit_cases_on_bit bit_cases_on_bit\n\n",
 "bit_add'":
 "theorem bit_add' : ∀ (b : Bool) (n m : ℕ), bit b (n + m) = bit b n + bit false m\n  | tt => bit1_add'\n  | ff => bit0_add\n#align bit_add' bit_add'\n\n",
 "bit_add":
 "theorem bit_add : ∀ (b : Bool) (n m : ℕ), bit b (n + m) = bit false n + bit b m\n  | tt => bit1_add\n  | ff => bit0_add\n#align bit_add bit_add\n\n",
 "bit1_mod_two":
 "theorem bit1_mod_two : bit1 n % 2 = 1 := by\n  rw [Nat.mod_two_of_bodd]\n  simp\n#align bit1_mod_two bit1_mod_two\n\n",
 "bit1_eq_one":
 "#print bit1_eq_one /-\n@[simp]\ntheorem bit1_eq_one {n : ℕ} : bit1 n = 1 ↔ n = 0 :=\n  ⟨@Nat.bit1_inj n 0, fun h => by subst h⟩\n#align bit1_eq_one bit1_eq_one\n-/\n\n",
 "bit1_eq_bit1":
 "#print bit1_eq_bit1 /-\n@[simp]\ntheorem bit1_eq_bit1 {m n : ℕ} : bit1 m = bit1 n ↔ m = n :=\n  ⟨Nat.bit1_inj, fun h => by subst h⟩\n#align bit1_eq_bit1 bit1_eq_bit1\n-/\n\n",
 "bit1_bits":
 "@[simp]\ntheorem bit1_bits (n : ℕ) : (bit1 n).bits = true :: n.bits :=\n  bits_append_bit n true fun _ => rfl\n#align bit1_bits bit1_bits\n\n",
 "bit0_mod_two":
 "theorem bit0_mod_two : bit0 n % 2 = 0 := by\n  rw [Nat.mod_two_of_bodd]\n  simp\n#align bit0_mod_two bit0_mod_two\n\n",
 "bit0_eq_zero":
 "#print bit0_eq_zero /-\nprotected theorem bit0_eq_zero {n : ℕ} : bit0 n = 0 ↔ n = 0 :=\n  ⟨nat.eq_zero_of_add_eq_zero_left, fun h => by simp [h]⟩\n#align bit0_eq_zero bit0_eq_zero\n-/\n\n",
 "bit0_eq_bit0":
 "#print bit0_eq_bit0 /-\n-- There is no need to prove `bit0_eq_zero : bit0 n = 0 ↔ n = 0`\n-- as this is true for any `[semiring R] [no_zero_divisors R] [char_zero R]`\n-- However the lemmas `bit0_eq_bit0`, `bit1_eq_bit1`, `bit1_eq_one`, `one_eq_bit1`\n-- need `[ring R] [no_zero_divisors R] [char_zero R]` in general,\n-- so we prove `ℕ` specialized versions here.\n@[simp]\ntheorem bit0_eq_bit0 {m n : ℕ} : bit0 m = bit0 n ↔ m = n :=\n  ⟨Nat.bit0_inj, fun h => by subst h⟩\n#align bit0_eq_bit0 bit0_eq_bit0\n-/\n\n",
 "bit0_bits":
 "@[simp]\ntheorem bit0_bits (n : ℕ) (hn : n ≠ 0) : (bit0 n).bits = false :: n.bits :=\n  bits_append_bit n false fun hn' => absurd hn' hn\n#align bit0_bits bit0_bits\n\n",
 "binary_rec_eq'":
 "/-- The same as binary_rec_eq, but that one unfortunately requires `f` to be the identity when\n  appending `ff` to `0`. Here, we allow you to explicitly say that that case is not happening, i.e.\n  supplying `n = 0 → b = tt`. -/\ntheorem binary_rec_eq' {C : ℕ → Sort _} {z : C 0} {f : ∀ b n, C n → C (bit b n)} (b n)\n    (h : f false 0 z = z ∨ (n = 0 → b = true)) : binaryRec z f (bit b n) = f b n (binaryRec z f n) :=\n  by\n  rw [binary_rec]\n  split_ifs with h'\n  · rcases bit_eq_zero_iff.mp h' with ⟨rfl, rfl⟩\n    rw [binary_rec_zero]\n    simp only [imp_false, or_false_iff, eq_self_iff_true, not_true] at h\n    exact h.symm\n  · generalize_proofs e\n    revert e\n    rw [bodd_bit, div2_bit]\n    intros\n    rfl\n#align binary_rec_eq' binary_rec_eq'\n\n"}