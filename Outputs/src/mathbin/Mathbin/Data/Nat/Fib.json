{"le_fib_self":
 "theorem le_fib_self {n : ℕ} (five_le_n : 5 ≤ n) : n ≤ fib n :=\n  by\n  induction' five_le_n with n five_le_n IH\n  ·-- 5 ≤ fib 5\n    rfl\n  · -- n + 1 ≤ fib (n + 1) for 5 ≤ n\n    rw [succ_le_iff]\n    calc\n      n ≤ fib n := IH\n      _ < fib (n + 1) := fib_lt_fib_succ (le_trans (by decide) five_le_n)\n      \n#align le_fib_self le_fib_self\n\n",
 "is_fib_aux_one":
 "theorem is_fib_aux_one : IsFibAux 1 1 1 :=\n  ⟨fib_one, fib_two⟩\n#align is_fib_aux_one is_fib_aux_one\n\n",
 "is_fib_aux_bit1_done":
 "theorem is_fib_aux_bit1_done {n a b a2 b2 a' : ℕ} (H : IsFibAux n a b) (h1 : a * a = a2) (h2 : b * b = b2)\n    (h3 : a2 + b2 = a') : fib (bit1 n) = a' :=\n  (is_fib_aux_bit1 H h1 h2 h3 rfl rfl).1\n#align is_fib_aux_bit1_done is_fib_aux_bit1_done\n\n",
 "is_fib_aux_bit1":
 "theorem is_fib_aux_bit1 {n a b c a2 b2 a' b' : ℕ} (H : IsFibAux n a b) (h1 : a * a = a2) (h2 : b * b = b2)\n    (h3 : a2 + b2 = a') (h4 : bit0 a + b = c) (h5 : b * c = b') : IsFibAux (bit1 n) a' b' :=\n  ⟨by rw [fib_bit1, H.1, H.2, pow_two, pow_two, h1, h2, add_comm, h3], by\n    rw [fib_bit1_succ, H.1, H.2, ← bit0_eq_two_mul, h4, h5]⟩\n#align is_fib_aux_bit1 is_fib_aux_bit1\n\n",
 "is_fib_aux_bit0_done":
 "theorem is_fib_aux_bit0_done {n a b c a' : ℕ} (H : IsFibAux n a b) (h1 : a + c = bit0 b) (h2 : a * c = a') :\n    fib (bit0 n) = a' :=\n  (is_fib_aux_bit0 H h1 h2 rfl rfl rfl).1\n#align is_fib_aux_bit0_done is_fib_aux_bit0_done\n\n",
 "is_fib_aux_bit0":
 "theorem is_fib_aux_bit0 {n a b c a2 b2 a' b' : ℕ} (H : IsFibAux n a b) (h1 : a + c = bit0 b) (h2 : a * c = a')\n    (h3 : a * a = a2) (h4 : b * b = b2) (h5 : a2 + b2 = b') : IsFibAux (bit0 n) a' b' :=\n  ⟨by rw [fib_bit0, H.1, H.2, ← bit0_eq_two_mul, show bit0 b - a = c by rw [← h1, nat.add_sub_cancel_left], h2], by\n    rw [fib_bit0_succ, H.1, H.2, pow_two, pow_two, h3, h4, add_comm, h5]⟩\n#align is_fib_aux_bit0 is_fib_aux_bit0\n\n",
 "gcd_fib_add_self":
 "theorem gcd_fib_add_self (m n : ℕ) : gcd (fib m) (fib (n + m)) = gcd (fib m) (fib n) :=\n  by\n  cases nat.eq_zero_or_pos n\n  · rw [h]\n    simp\n  replace h := nat.succ_pred_eq_of_pos h; rw [← h, succ_eq_add_one]\n  calc\n    gcd (fib m) (fib (n.pred + 1 + m)) = gcd (fib m) (fib n.pred * fib m + fib (n.pred + 1) * fib (m + 1)) :=\n      by\n      rw [← fib_add n.pred _]\n      ring_nf\n    _ = gcd (fib m) (fib (n.pred + 1) * fib (m + 1)) := by rw [add_comm, gcd_add_mul_right_right (fib m) _ (fib n.pred)]\n    _ = gcd (fib m) (fib (n.pred + 1)) :=\n      coprime.gcd_mul_right_cancel_right (fib (n.pred + 1)) (coprime.symm (fib_coprime_fib_succ m))\n    \n#align gcd_fib_add_self gcd_fib_add_self\n\n",
 "gcd_fib_add_mul_self":
 "theorem gcd_fib_add_mul_self (m n : ℕ) : ∀ k, gcd (fib m) (fib (n + k * m)) = gcd (fib m) (fib n)\n  | 0 => by simp\n  | k + 1 => by rw [← gcd_fib_add_mul_self k, add_mul, ← add_assoc, one_mul, gcd_fib_add_self _ _]\n#align gcd_fib_add_mul_self gcd_fib_add_mul_self\n\n",
 "fib_zero":
 "/-\nCopyright (c) 2019 Kevin Kappelmann. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin Kappelmann, Kyle Miller, Mario Carneiro\n-/\n@[simp]\ntheorem fib_zero : fib 0 = 0 :=\n  rfl\n#align fib_zero fib_zero\n\n",
 "fib_two_mul_add_one":
 "theorem fib_two_mul_add_one (n : ℕ) : fib (2 * n + 1) = fib (n + 1) ^ 2 + fib n ^ 2 :=\n  by\n  rw [two_mul, fib_add]\n  ring\n#align fib_two_mul_add_one fib_two_mul_add_one\n\n",
 "fib_two_mul":
 "theorem fib_two_mul (n : ℕ) : fib (2 * n) = fib n * (2 * fib (n + 1) - fib n) :=\n  by\n  cases n\n  · simp\n  · rw [nat.succ_eq_add_one, two_mul, ← add_assoc, fib_add, fib_add_two, two_mul]\n    simp only [← add_assoc, add_tsub_cancel_right]\n    ring\n#align fib_two_mul fib_two_mul\n\n",
 "fib_two":
 "@[simp]\ntheorem fib_two : fib 2 = 1 :=\n  rfl\n#align fib_two fib_two\n\n",
 "fib_succ_eq_sum_choose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem fib_succ_eq_sum_choose :\n    ∀ n : ℕ,\n      fib (n + 1) =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n          (Finset.Nat.antidiagonal n) (choose p.1 p.2) :=\n  two_step_induction rfl rfl fun n h1 h2 =>\n    by\n    rw [fib_add_two, h1, h2, Finset.Nat.antidiagonal_succ_succ', Finset.Nat.antidiagonal_succ']\n    simp [choose_succ_succ, Finset.sum_add_distrib, add_left_comm]\n#align fib_succ_eq_sum_choose fib_succ_eq_sum_choose\n\n",
 "fib_succ_eq_succ_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem fib_succ_eq_succ_sum (n : ℕ) :\n    fib (n + 1) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Finset.range n)\n          (fib k) +\n        1 :=\n  by\n  induction' n with n ih\n  · simp\n  ·\n    calc\n      fib (n + 2) = fib n + fib (n + 1) := fib_add_two\n      _ =\n          fib n +\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n                (Finset.range n) (fib k) +\n            1 :=\n        by rw [ih, add_assoc]\n      _ =\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n              (Finset.range (n + 1)) (fib k) +\n            1 :=\n        by simp [Finset.range_add_one]\n      \n#align fib_succ_eq_succ_sum fib_succ_eq_succ_sum\n\n",
 "fib_pos":
 "theorem fib_pos {n : ℕ} (n_pos : 0 < n) : 0 < fib n :=\n  calc\n    0 < fib 1 := by decide\n    _ ≤ fib n := fib_mono n_pos\n    \n#align fib_pos fib_pos\n\n",
 "fib_one":
 "@[simp]\ntheorem fib_one : fib 1 = 1 :=\n  rfl\n#align fib_one fib_one\n\n",
 "fib_mono":
 "@[mono]\ntheorem fib_mono : Monotone fib :=\n  monotone_nat_of_le_succ fun _ => fib_le_fib_succ\n#align fib_mono fib_mono\n\n",
 "fib_lt_fib_succ":
 "theorem fib_lt_fib_succ {n : ℕ} (hn : 2 ≤ n) : fib n < fib (n + 1) :=\n  by\n  rcases exists_add_of_le hn with ⟨n, rfl⟩\n  rw [← tsub_pos_iff_lt, add_comm 2, fib_add_two_sub_fib_add_one]\n  apply fib_pos (succ_pos n)\n#align fib_lt_fib_succ fib_lt_fib_succ\n\n",
 "fib_le_fib_succ":
 "theorem fib_le_fib_succ {n : ℕ} : fib n ≤ fib (n + 1) := by cases n <;> simp [fib_add_two]\n#align fib_le_fib_succ fib_le_fib_succ\n\n",
 "fib_gcd":
 "/-- `fib n` is a strong divisibility sequence,\n  see https://proofwiki.org/wiki/GCD_of_Fibonacci_Numbers -/\ntheorem fib_gcd (m n : ℕ) : fib (gcd m n) = gcd (fib m) (fib n) :=\n  by\n  wlog h : m ≤ n; · simpa only [gcd_comm] using this _ _ (le_of_not_le h)\n  apply gcd.induction m n\n  · simp\n  intro m n mpos h\n  rw [← gcd_rec m n] at h\n  conv_rhs => rw [← mod_add_div' n m]\n  rwa [gcd_fib_add_mul_self m (n % m) (n / m), gcd_comm (fib m) _]\n#align fib_gcd fib_gcd\n\n",
 "fib_dvd":
 "theorem fib_dvd (m n : ℕ) (h : m ∣ n) : fib m ∣ fib n := by rwa [gcd_eq_left_iff_dvd, ← fib_gcd, gcd_eq_left_iff_dvd.mp]\n#align fib_dvd fib_dvd\n\n",
 "fib_coprime_fib_succ":
 "/-- Subsequent Fibonacci numbers are coprime,\n  see https://proofwiki.org/wiki/Consecutive_Fibonacci_Numbers_are_Coprime -/\ntheorem fib_coprime_fib_succ (n : ℕ) : Nat.coprime (fib n) (fib (n + 1)) :=\n  by\n  induction' n with n ih\n  · simp\n  · rw [fib_add_two, coprime_add_self_right]\n    exact ih.symm\n#align fib_coprime_fib_succ fib_coprime_fib_succ\n\n",
 "fib_bit1_succ":
 "theorem fib_bit1_succ (n : ℕ) : fib (bit1 n + 1) = fib (n + 1) * (2 * fib n + fib (n + 1)) :=\n  by\n  rw [Nat.bit1_eq_succ_bit0, fib_add_two, fib_bit0, fib_bit0_succ]\n  have : fib n ≤ 2 * fib (n + 1) := by\n    rw [two_mul]\n    exact le_add_left fib_le_fib_succ\n  zify\n  ring\n#align fib_bit1_succ fib_bit1_succ\n\n",
 "fib_bit1":
 "theorem fib_bit1 (n : ℕ) : fib (bit1 n) = fib (n + 1) ^ 2 + fib n ^ 2 := by\n  rw [Nat.bit1_eq_succ_bit0, bit0_eq_two_mul, fib_two_mul_add_one]\n#align fib_bit1 fib_bit1\n\n",
 "fib_bit0_succ":
 "theorem fib_bit0_succ (n : ℕ) : fib (bit0 n + 1) = fib (n + 1) ^ 2 + fib n ^ 2 :=\n  fib_bit1 n\n#align fib_bit0_succ fib_bit0_succ\n\n",
 "fib_bit0":
 "theorem fib_bit0 (n : ℕ) : fib (bit0 n) = fib n * (2 * fib (n + 1) - fib n) := by rw [bit0_eq_two_mul, fib_two_mul]\n#align fib_bit0 fib_bit0\n\n",
 "fib_add_two_sub_fib_add_one":
 "theorem fib_add_two_sub_fib_add_one {n : ℕ} : fib (n + 2) - fib (n + 1) = fib n := by\n  rw [fib_add_two, add_tsub_cancel_right]\n#align fib_add_two_sub_fib_add_one fib_add_two_sub_fib_add_one\n\n",
 "fib_add_two_strict_mono":
 "/-- `fib (n + 2)` is strictly monotone. -/\ntheorem fib_add_two_strict_mono : StrictMono fun n => fib (n + 2) :=\n  by\n  refine' strictMono_nat_of_lt_succ fun n => _\n  rw [add_right_comm]\n  exact fib_lt_fib_succ (self_le_add_left _ _)\n#align fib_add_two_strict_mono fib_add_two_strict_mono\n\n",
 "fib_add_two":
 "/-- Shows that `fib` indeed satisfies the Fibonacci recurrence `Fₙ₊₂ = Fₙ + Fₙ₊₁.` -/\ntheorem fib_add_two {n : ℕ} : fib (n + 2) = fib n + fib (n + 1) := by simp only [fib, Function.iterate_succ']\n#align fib_add_two fib_add_two\n\n",
 "fib_add":
 "/-- See https://proofwiki.org/wiki/Fibonacci_Number_in_terms_of_Smaller_Fibonacci_Numbers -/\ntheorem fib_add (m n : ℕ) : fib (m + n + 1) = fib m * fib n + fib (m + 1) * fib (n + 1) :=\n  by\n  induction' n with n ih generalizing m\n  · simp\n  · intros\n    specialize ih (m + 1)\n    rw [add_assoc m 1 n, add_comm 1 n] at ih\n    simp only [fib_add_two, ih]\n    ring\n#align fib_add fib_add\n\n",
 "fast_fib_eq":
 "theorem fast_fib_eq (n : ℕ) : fastFib n = fib n := by rw [fast_fib, fast_fib_aux_eq]\n#align fast_fib_eq fast_fib_eq\n\n",
 "fast_fib_aux_eq":
 "theorem fast_fib_aux_eq (n : ℕ) : fastFibAux n = (fib n, fib (n + 1)) :=\n  by\n  apply Nat.binaryRec _ (fun b n' ih => _) n\n  · simp [fast_fib_aux]\n  ·\n    cases b <;>\n          simp only [fast_fib_aux_bit_ff, fast_fib_aux_bit_tt, congr_arg Prod.fst ih, congr_arg Prod.snd ih,\n            Prod.mk.inj_iff] <;>\n        constructor <;>\n      simp [bit, fib_bit0, fib_bit1, fib_bit0_succ, fib_bit1_succ]\n#align fast_fib_aux_eq fast_fib_aux_eq\n\n",
 "fast_fib_aux_bit_tt":
 "theorem fast_fib_aux_bit_tt (n : ℕ) :\n    fastFibAux (bit true n) =\n      let p := fastFibAux n\n      (p.2 ^ 2 + p.1 ^ 2, p.2 * (2 * p.1 + p.2)) :=\n  by\n  rw [fast_fib_aux, binary_rec_eq]\n  · rfl\n  · simp\n#align fast_fib_aux_bit_tt fast_fib_aux_bit_tt\n\n",
 "fast_fib_aux_bit_ff":
 "theorem fast_fib_aux_bit_ff (n : ℕ) :\n    fastFibAux (bit false n) =\n      let p := fastFibAux n\n      (p.1 * (2 * p.2 - p.1), p.2 ^ 2 + p.1 ^ 2) :=\n  by\n  rw [fast_fib_aux, binary_rec_eq]\n  · rfl\n  · simp\n#align fast_fib_aux_bit_ff fast_fib_aux_bit_ff\n\n"}