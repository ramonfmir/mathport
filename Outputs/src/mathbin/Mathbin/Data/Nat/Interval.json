{"range_image_pred_top_sub":
 "theorem range_image_pred_top_sub (n : ℕ) : ((Finset.range n).image fun j => n - 1 - j) = Finset.range n :=\n  by\n  cases n\n  · rw [range_zero, image_empty]\n  · rw [finset.range_eq_Ico, nat.Ico_image_const_sub_eq_Ico (zero_le _)]\n    simp_rw [succ_sub_succ, tsub_zero, tsub_self]\n#align range_image_pred_top_sub range_image_pred_top_sub\n\n",
 "range_eq_Ico":
 "theorem _root_.finset.range_eq_Ico : range = Ico 0 :=\n  Ico_zero_eq_range.symm\n#align finset.range_eq_Ico finset.range_eq_Ico\n\n",
 "range_add_eq_union":
 "theorem range_add_eq_union : range (a + b) = range a ∪ (range b).map (addLeftEmbedding a) :=\n  by\n  rw [finset.range_eq_Ico, map_eq_image]\n  convert (Ico_union_Ico_eq_Ico a.zero_le le_self_add).symm\n  exact image_add_left_Ico _ _ _\n#align range_add_eq_union range_add_eq_union\n\n",
 "multiset_Ico_map_mod":
 "theorem multiset_Ico_map_mod (n a : ℕ) : (multiset.Ico n (n + a)).map (· % a) = range a :=\n  by\n  convert congr_arg finset.val (image_Ico_mod n a)\n  refine' ((nodup_map_iff_inj_on (finset.Ico _ _).nodup).2 <| _).dedup.symm\n  exact mod_inj_on_Ico _ _\n#align multiset_Ico_map_mod multiset_Ico_map_mod\n\n",
 "mod_inj_on_Ico":
 "theorem mod_inj_on_Ico (n a : ℕ) : Set.InjOn (· % a) (finset.Ico n (n + a)) :=\n  by\n  induction' n with n ih\n  · simp only [zero_add, nat_zero_eq_zero, Ico_zero_eq_range]\n    rintro k hk l hl (hkl : k % a = l % a)\n    simp only [Finset.mem_range, Finset.mem_coe] at hk hl\n    rwa [mod_eq_of_lt hk, mod_eq_of_lt hl] at hkl\n  rw [Ico_succ_left_eq_erase_Ico, succ_add, Ico_succ_right_eq_insert_Ico le_self_add]\n  rintro k hk l hl (hkl : k % a = l % a)\n  have ha : 0 < a := by\n    by_contra ha\n    simp only [not_lt, nonpos_iff_eq_zero] at ha\n    simpa [ha] using hk\n  simp only [Finset.mem_coe, Finset.mem_insert, Finset.mem_erase] at hk hl\n  rcases hk with ⟨hkn, rfl | hk⟩ <;> rcases hl with ⟨hln, rfl | hl⟩\n  · rfl\n  · rw [add_mod_right] at hkl\n    refine' (hln <| ih hl _ hkl.symm).elim\n    simp only [lt_add_iff_pos_right, Set.left_mem_Ico, finset.coe_Ico, ha]\n  · rw [add_mod_right] at hkl\n    suffices k = n by contradiction\n    refine' ih hk _ hkl\n    simp only [lt_add_iff_pos_right, Set.left_mem_Ico, finset.coe_Ico, ha]\n  · refine' ih _ _ hkl <;> simp only [Finset.mem_coe, hk, hl]\n#align mod_inj_on_Ico mod_inj_on_Ico\n\n",
 "image_sub_const_Ico":
 "theorem image_sub_const_Ico (h : c ≤ a) : ((Ico a b).image fun x => x - c) = Ico (a - c) (b - c) :=\n  by\n  ext x\n  rw [mem_image]\n  constructor\n  · rintro ⟨x, hx, rfl⟩\n    rw [mem_Ico] at hx⊢\n    exact ⟨tsub_le_tsub_right hx.1 _, tsub_lt_tsub_right_of_le (h.trans hx.1) hx.2⟩\n  · rintro h\n    refine' ⟨x + c, _, add_tsub_cancel_right _ _⟩\n    rw [mem_Ico] at h⊢\n    exact ⟨tsub_le_iff_right.1 h.1, lt_tsub_iff_right.1 h.2⟩\n#align image_sub_const_Ico image_sub_const_Ico\n\n",
 "image_Ico_mod":
 "/-- Note that while this lemma cannot be easily generalized to a type class, it holds for ℤ as\nwell. See `int.image_Ico_mod` for the ℤ version. -/\ntheorem image_Ico_mod (n a : ℕ) : (Ico n (n + a)).image (· % a) = range a :=\n  by\n  obtain rfl | ha := eq_or_ne a 0\n  · rw [range_zero, add_zero, Ico_self, image_empty]\n  ext i\n  simp only [mem_image, exists_prop, mem_range, mem_Ico]\n  constructor\n  · rintro ⟨i, h, rfl⟩\n    exact mod_lt i ha.bot_lt\n  intro hia\n  have hn := nat.mod_add_div n a\n  obtain hi | hi := lt_or_le i (n % a)\n  · refine' ⟨i + a * (n / a + 1), ⟨_, _⟩, _⟩\n    · rw [add_comm (n / a), mul_add, mul_one, ← add_assoc]\n      refine' hn.symm.le.trans (add_le_add_right _ _)\n      simpa only [zero_add] using add_le_add (zero_le i) (nat.mod_lt n ha.bot_lt).le\n    · refine' lt_of_lt_of_le (add_lt_add_right hi (a * (n / a + 1))) _\n      rw [mul_add, mul_one, ← add_assoc, hn]\n    · rw [nat.add_mul_mod_self_left, nat.mod_eq_of_lt hia]\n  · refine' ⟨i + a * (n / a), ⟨_, _⟩, _⟩\n    · exact hn.symm.le.trans (add_le_add_right hi _)\n    · rw [add_comm n a]\n      refine' add_lt_add_of_lt_of_le hia (le_trans _ hn.le)\n      simp only [zero_le, le_add_iff_nonneg_left]\n    · rw [nat.add_mul_mod_self_left, nat.mod_eq_of_lt hia]\n#align image_Ico_mod image_Ico_mod\n\n",
 "decreasing_induction_of_not_bdd_above":
 "theorem nat.decreasing_induction_of_not_bdd_above (hP : ¬BddAbove { x | P x }) (n : ℕ) : P n :=\n  let ⟨m, hm, hl⟩ := not_bddAbove_iff.1 hP n\n  decreasingInduction h hl.le hm\n#align nat.decreasing_induction_of_not_bdd_above nat.decreasing_induction_of_not_bdd_above\n\n",
 "decreasing_induction_of_infinite":
 "theorem nat.decreasing_induction_of_infinite (hP : { x | P x }.infinite) (n : ℕ) : P n :=\n  nat.decreasing_induction_of_not_bdd_above h (mt bdd_above.finite hP) n\n#align nat.decreasing_induction_of_infinite nat.decreasing_induction_of_infinite\n\n",
 "cauchy_induction_two_mul":
 "theorem nat.cauchy_induction_two_mul (seed : ℕ) (hs : P seed.succ) (hm : ∀ x, seed < x → P x → P (2 * x)) (n : ℕ) :\n    P n :=\n  nat.cauchy_induction_mul h 2 seed one_lt_two hs hm n\n#align nat.cauchy_induction_two_mul nat.cauchy_induction_two_mul\n\n",
 "cauchy_induction_mul":
 "theorem nat.cauchy_induction_mul (k seed : ℕ) (hk : 1 < k) (hs : P seed.succ) (hm : ∀ x, seed < x → P x → P (k * x))\n    (n : ℕ) : P n := by\n  apply nat.cauchy_induction h _ hs ((· * ·) k) fun x hl hP => ⟨_, hm x hl hP⟩\n  convert (mul_lt_mul_right <| seed.succ_pos.trans_le hl).2 hk\n  rw [one_mul]\n#align nat.cauchy_induction_mul nat.cauchy_induction_mul\n\n",
 "cauchy_induction'":
 "theorem nat.cauchy_induction' (seed : ℕ) (hs : P seed) (hi : ∀ x, seed ≤ x → P x → ∃ y, x < y ∧ P y) (n : ℕ) : P n :=\n  by\n  apply nat.decreasing_induction_of_infinite h fun hf => _\n  obtain ⟨m, hP, hm⟩ := hf.exists_maximal_wrt id _ ⟨seed, hs⟩\n  obtain ⟨y, hl, hy⟩ := hi m (le_of_not_lt fun hl => hl.ne <| hm seed hs hl.le) hP\n  exact hl.ne (hm y hy hl.le)\n#align nat.cauchy_induction' nat.cauchy_induction'\n\n",
 "cauchy_induction":
 "theorem nat.cauchy_induction (seed : ℕ) (hs : P seed) (f : ℕ → ℕ) (hf : ∀ x, seed ≤ x → P x → x < f x ∧ P (f x))\n    (n : ℕ) : P n :=\n  seed.cauchy_induction' h hs (fun x hl hx => ⟨f x, hf x hl hx⟩) n\n#align nat.cauchy_induction nat.cauchy_induction\n\n",
 "card_fintype_Ioo":
 "@[simp]\ntheorem card_fintype_Ioo : fintype.card (Set.Ioo a b) = b - a - 1 := by rw [fintype.card_of_finset, card_Ioo]\n#align card_fintype_Ioo card_fintype_Ioo\n\n",
 "card_fintype_Ioc":
 "@[simp]\ntheorem card_fintype_Ioc : fintype.card (Set.Ioc a b) = b - a := by rw [fintype.card_of_finset, card_Ioc]\n#align card_fintype_Ioc card_fintype_Ioc\n\n",
 "card_fintype_Iio":
 "@[simp]\ntheorem card_fintype_Iio : fintype.card (Set.Iio b) = b := by rw [fintype.card_of_finset, card_Iio]\n#align card_fintype_Iio card_fintype_Iio\n\n",
 "card_fintype_Iic":
 "@[simp]\ntheorem card_fintype_Iic : fintype.card (Set.Iic b) = b + 1 := by rw [fintype.card_of_finset, card_Iic]\n#align card_fintype_Iic card_fintype_Iic\n\n",
 "card_fintype_Ico":
 "@[simp]\ntheorem card_fintype_Ico : fintype.card (Set.Ico a b) = b - a := by rw [fintype.card_of_finset, card_Ico]\n#align card_fintype_Ico card_fintype_Ico\n\n",
 "card_fintype_Icc":
 "@[simp]\ntheorem card_fintype_Icc : fintype.card (Set.Icc a b) = b + 1 - a := by rw [fintype.card_of_finset, card_Icc]\n#align card_fintype_Icc card_fintype_Icc\n\n",
 "card_Ioo":
 "@[simp]\ntheorem card_Ioo : (Ioo a b).card = b - a - 1 :=\n  List.length_range' _ _\n#align card_Ioo card_Ioo\n\n",
 "card_Ioc":
 "@[simp]\ntheorem card_Ioc : (Ioc a b).card = b - a :=\n  List.length_range' _ _\n#align card_Ioc card_Ioc\n\n",
 "card_Iio":
 "@[simp]\ntheorem card_Iio : (Iio b).card = b := by rw [Iio_eq_Ico, card_Ico, bot_eq_zero, tsub_zero]\n#align card_Iio card_Iio\n\n",
 "card_Iic":
 "@[simp]\ntheorem card_Iic : (Iic b).card = b + 1 := by rw [Iic_eq_Icc, card_Icc, bot_eq_zero, tsub_zero]\n#align card_Iic card_Iic\n\n",
 "card_Ico":
 "@[simp]\ntheorem card_Ico : (Ico a b).card = b - a :=\n  List.length_range' _ _\n#align card_Ico card_Ico\n\n",
 "card_Icc":
 "@[simp]\ntheorem card_Icc : (Icc a b).card = b + 1 - a :=\n  List.length_range' _ _\n#align card_Icc card_Icc\n\n",
 "Ioo_eq_range'":
 "theorem Ioo_eq_range' : Ioo a b = ⟨List.range' (a + 1) (b - a - 1), List.nodup_range' _ _⟩ :=\n  rfl\n#align Ioo_eq_range' Ioo_eq_range'\n\n",
 "Ioc_succ_singleton":
 "@[simp]\ntheorem Ioc_succ_singleton : Ioc b (b + 1) = {b + 1} := by rw [← nat.Icc_succ_left, Icc_self]\n#align Ioc_succ_singleton Ioc_succ_singleton\n\n",
 "Ioc_eq_range'":
 "theorem Ioc_eq_range' : Ioc a b = ⟨List.range' (a + 1) (b - a), List.nodup_range' _ _⟩ :=\n  rfl\n#align Ioc_eq_range' Ioc_eq_range'\n\n",
 "Iio_eq_range":
 "theorem Iio_eq_range : Iio = range := by\n  ext (b x)\n  rw [mem_Iio, mem_range]\n#align Iio_eq_range Iio_eq_range\n\n",
 "Ico_zero_eq_range":
 "@[simp]\ntheorem Ico_zero_eq_range : Ico 0 = range := by rw [← bot_eq_zero, ← Iio_eq_Ico, Iio_eq_range]\n#align Ico_zero_eq_range Ico_zero_eq_range\n\n",
 "Ico_succ_succ":
 "theorem Ico_succ_succ : Ico a.succ b.succ = Ioc a b := by\n  ext x\n  rw [mem_Ico, mem_Ioc, succ_le_iff, lt_succ_iff]\n#align Ico_succ_succ Ico_succ_succ\n\n",
 "Ico_succ_singleton":
 "@[simp]\ntheorem Ico_succ_singleton : Ico a (a + 1) = {a} := by rw [Ico_succ_right, Icc_self]\n#align Ico_succ_singleton Ico_succ_singleton\n\n",
 "Ico_succ_right_eq_insert_Ico":
 "theorem Ico_succ_right_eq_insert_Ico (h : a ≤ b) : Ico a (b + 1) = insert b (Ico a b) := by\n  rw [Ico_succ_right, ← Ico_insert_right h]\n#align Ico_succ_right_eq_insert_Ico Ico_succ_right_eq_insert_Ico\n\n",
 "Ico_succ_right":
 "theorem Ico_succ_right : Ico a b.succ = Icc a b := by\n  ext x\n  rw [mem_Ico, mem_Icc, lt_succ_iff]\n#align Ico_succ_right Ico_succ_right\n\n",
 "Ico_succ_left_eq_erase_Ico":
 "theorem Ico_succ_left_eq_erase_Ico : Ico a.succ b = erase (Ico a b) a :=\n  by\n  ext x\n  rw [Ico_succ_left, mem_erase, mem_Ico, mem_Ioo, ← and_assoc', ne_comm, and_comm' (a ≠ x), lt_iff_le_and_ne]\n#align Ico_succ_left_eq_erase_Ico Ico_succ_left_eq_erase_Ico\n\n",
 "Ico_succ_left":
 "theorem Ico_succ_left : Ico a.succ b = Ioo a b := by\n  ext x\n  rw [mem_Ico, mem_Ioo, succ_le_iff]\n#align Ico_succ_left Ico_succ_left\n\n",
 "Ico_pred_singleton":
 "@[simp]\ntheorem Ico_pred_singleton {a : ℕ} (h : 0 < a) : Ico (a - 1) a = {a - 1} := by rw [← Icc_pred_right _ h, Icc_self]\n#align Ico_pred_singleton Ico_pred_singleton\n\n",
 "Ico_insert_succ_left":
 "theorem Ico_insert_succ_left (h : a < b) : insert a (Ico a.succ b) = Ico a b := by\n  rw [Ico_succ_left, ← Ioo_insert_left h]\n#align Ico_insert_succ_left Ico_insert_succ_left\n\n",
 "Ico_image_const_sub_eq_Ico":
 "theorem Ico_image_const_sub_eq_Ico (hac : a ≤ c) : ((Ico a b).image fun x => c - x) = Ico (c + 1 - b) (c + 1 - a) :=\n  by\n  ext x\n  rw [mem_image, mem_Ico]\n  constructor\n  · rintro ⟨x, hx, rfl⟩\n    rw [mem_Ico] at hx\n    refine' ⟨_, ((tsub_le_tsub_iff_left hac).2 hx.1).trans_lt ((tsub_lt_tsub_iff_right hac).2 (nat.lt_succ_self _))⟩\n    cases lt_or_le c b\n    · rw [tsub_eq_zero_iff_le.mpr (succ_le_of_lt h)]\n      exact zero_le _\n    · rw [← succ_sub_succ c]\n      exact (tsub_le_tsub_iff_left (succ_le_succ <| hx.2.le.trans h)).2 hx.2\n  · rintro ⟨hb, ha⟩\n    rw [lt_tsub_iff_left, lt_succ_iff] at ha\n    have hx : x ≤ c := (nat.le_add_left _ _).trans ha\n    refine' ⟨c - x, _, tsub_tsub_cancel_of_le hx⟩\n    · rw [mem_Ico]\n      exact ⟨le_tsub_of_add_le_right ha, (tsub_lt_iff_left hx).2 <| succ_le_iff.1 <| tsub_le_iff_right.1 hb⟩\n#align Ico_image_const_sub_eq_Ico Ico_image_const_sub_eq_Ico\n\n",
 "Ico_eq_range'":
 "theorem Ico_eq_range' : Ico a b = ⟨List.range' a (b - a), List.nodup_range' _ _⟩ :=\n  rfl\n#align Ico_eq_range' Ico_eq_range'\n\n",
 "Icc_succ_left":
 "-- TODO@Yaël: Generalize all the following lemmas to `succ_order`\ntheorem Icc_succ_left : Icc a.succ b = Ioc a b := by\n  ext x\n  rw [mem_Icc, mem_Ioc, succ_le_iff]\n#align Icc_succ_left Icc_succ_left\n\n",
 "Icc_pred_right":
 "theorem Icc_pred_right {b : ℕ} (h : 0 < b) : Icc a (b - 1) = Ico a b :=\n  by\n  ext x\n  rw [mem_Icc, mem_Ico, lt_iff_le_pred h]\n#align Icc_pred_right Icc_pred_right\n\n",
 "Icc_eq_range'":
 "/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem Icc_eq_range' : Icc a b = ⟨List.range' a (b + 1 - a), List.nodup_range' _ _⟩ :=\n  rfl\n#align Icc_eq_range' Icc_eq_range'\n\n"}