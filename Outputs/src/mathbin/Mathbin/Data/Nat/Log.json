{"pow_pred_clog_lt_self":
 "theorem pow_pred_clog_lt_self {b : ℕ} (hb : 1 < b) {x : ℕ} (hx : 1 < x) : b ^ (clog b x).pred < x :=\n  by\n  rw [← not_le, le_pow_iff_clog_le hb, not_le]\n  exact pred_lt (clog_pos hb hx).ne'\n#align pow_pred_clog_lt_self pow_pred_clog_lt_self\n\n",
 "pow_lt_iff_lt_clog":
 "theorem pow_lt_iff_lt_clog {b : ℕ} (hb : 1 < b) {x y : ℕ} : b ^ y < x ↔ y < clog b x :=\n  lt_iff_lt_of_le_iff_le (le_pow_iff_clog_le hb)\n#align pow_lt_iff_lt_clog pow_lt_iff_lt_clog\n\n",
 "pow_log_le_self":
 "theorem pow_log_le_self (b : ℕ) {x : ℕ} (hx : x ≠ 0) : b ^ log b x ≤ x :=\n  pow_le_of_le_log hx le_rfl\n#align pow_log_le_self pow_log_le_self\n\n",
 "pow_log_le_add_one":
 "theorem pow_log_le_add_one (b : ℕ) : ∀ x, b ^ log b x ≤ x + 1\n  | 0 => by rw [log_zero_right, pow_zero]\n  | x + 1 => (pow_log_le_self b x.succ_ne_zero).trans (x + 1).le_succ\n#align pow_log_le_add_one pow_log_le_add_one\n\n",
 "pow_le_of_le_log":
 "theorem pow_le_of_le_log {b x y : ℕ} (hy : y ≠ 0) (h : x ≤ log b y) : b ^ x ≤ y :=\n  by\n  refine' (le_or_lt b 1).elim (fun hb => _) fun hb => (pow_le_iff_le_log hb hy).2 h\n  rw [log_of_left_le_one hb, nonpos_iff_eq_zero] at h\n  rwa [h, pow_zero, one_le_iff_ne_zero]\n#align pow_le_of_le_log pow_le_of_le_log\n\n",
 "pow_le_iff_le_log":
 "/-- `pow b` and `log b` (almost) form a Galois connection. See also `nat.pow_le_of_le_log` and\n`nat.le_log_of_pow_le` for individual implications under weaker assumptions. -/\ntheorem pow_le_iff_le_log {b : ℕ} (hb : 1 < b) {x y : ℕ} (hy : y ≠ 0) : b ^ x ≤ y ↔ x ≤ log b y :=\n  by\n  induction' y using nat.strong_induction_on with y ih generalizing x\n  cases x\n  · exact iff_of_true hy.bot_lt (zero_le _)\n  rw [log]; split_ifs\n  · have b_pos : 0 < b := zero_le_one.trans_lt hb\n    rw [succ_eq_add_one, add_le_add_iff_right, ← ih (y / b) (div_lt_self hy.bot_lt hb) (Nat.div_pos h.1 b_pos).ne',\n      le_div_iff_mul_le b_pos, pow_succ']\n  · exact iff_of_false (fun hby => h ⟨(le_self_pow x.succ_ne_zero _).trans hby, hb⟩) (not_succ_le_zero _)\n#align pow_le_iff_le_log pow_le_iff_le_log\n\n",
 "lt_pow_succ_log_self":
 "theorem lt_pow_succ_log_self {b : ℕ} (hb : 1 < b) (x : ℕ) : x < b ^ (log b x).succ :=\n  lt_pow_of_log_lt hb (lt_succ_self _)\n#align lt_pow_succ_log_self lt_pow_succ_log_self\n\n",
 "lt_pow_of_log_lt":
 "theorem lt_pow_of_log_lt {b x y : ℕ} (hb : 1 < b) : log b y < x → y < b ^ x :=\n  lt_imp_lt_of_le_imp_le (le_log_of_pow_le hb)\n#align lt_pow_of_log_lt lt_pow_of_log_lt\n\n",
 "lt_pow_iff_log_lt":
 "theorem lt_pow_iff_log_lt {b : ℕ} (hb : 1 < b) {x y : ℕ} (hy : y ≠ 0) : y < b ^ x ↔ log b y < x :=\n  lt_iff_lt_of_le_iff_le (pow_le_iff_le_log hb hy)\n#align lt_pow_iff_log_lt lt_pow_iff_log_lt\n\n",
 "log_zero_right":
 "@[simp]\ntheorem log_zero_right (b : ℕ) : log b 0 = 0 :=\n  log_eq_zero_iff.2 (le_total 1 b)\n#align log_zero_right log_zero_right\n\n",
 "log_zero_left":
 "@[simp]\ntheorem log_zero_left : ∀ n, log 0 n = 0 :=\n  log_of_left_le_one zero_le_one\n#align log_zero_left log_zero_left\n\n",
 "log_pow":
 "theorem log_pow {b : ℕ} (hb : 1 < b) (x : ℕ) : log b (b ^ x) = x :=\n  log_eq_of_pow_le_of_lt_pow le_rfl (pow_lt_pow hb x.lt_succ_self)\n#align log_pow log_pow\n\n",
 "log_pos_iff":
 "@[simp]\ntheorem log_pos_iff {b n : ℕ} : 0 < log b n ↔ b ≤ n ∧ 1 < b := by\n  rw [pos_iff_ne_zero, ne.def, log_eq_zero_iff, not_or, not_lt, not_le]\n#align log_pos_iff log_pos_iff\n\n",
 "log_pos":
 "theorem log_pos {b n : ℕ} (hb : 1 < b) (hbn : b ≤ n) : 0 < log b n :=\n  log_pos_iff.2 ⟨hbn, hb⟩\n#align log_pos log_pos\n\n",
 "log_one_right":
 "@[simp]\ntheorem log_one_right (b : ℕ) : log b 1 = 0 :=\n  log_eq_zero_iff.2 (lt_or_le _ _)\n#align log_one_right log_one_right\n\n",
 "log_one_left":
 "@[simp]\ntheorem log_one_left : ∀ n, log 1 n = 0 :=\n  log_of_left_le_one le_rfl\n#align log_one_left log_one_left\n\n",
 "log_of_one_lt_of_le":
 "theorem log_of_one_lt_of_le {b n : ℕ} (h : 1 < b) (hn : b ≤ n) : log b n = log b (n / b) + 1 :=\n  by\n  rw [log]\n  exact if_pos ⟨hn, h⟩\n#align log_of_one_lt_of_le log_of_one_lt_of_le\n\n",
 "log_of_lt":
 "theorem log_of_lt {b n : ℕ} (hb : n < b) : log b n = 0 :=\n  log_eq_zero_iff.2 (or.inl hb)\n#align log_of_lt log_of_lt\n\n",
 "log_of_left_le_one":
 "theorem log_of_left_le_one {b : ℕ} (hb : b ≤ 1) (n) : log b n = 0 :=\n  log_eq_zero_iff.2 (or.inr hb)\n#align log_of_left_le_one log_of_left_le_one\n\n",
 "log_mul_base":
 "theorem log_mul_base {b n : ℕ} (hb : 1 < b) (hn : n ≠ 0) : log b (n * b) = log b n + 1 :=\n  by\n  apply log_eq_of_pow_le_of_lt_pow <;> rw [pow_succ']\n  exacts[mul_le_mul_right' (pow_log_le_self _ hn) _,\n    (mul_lt_mul_right (zero_lt_one.trans hb)).2 (lt_pow_succ_log_self hb _)]\n#align log_mul_base log_mul_base\n\n",
 "log_monotone":
 "theorem log_monotone {b : ℕ} : monotone (log b) :=\n  by\n  refine' monotone_nat_of_le_succ fun n => _\n  cases' le_or_lt b 1 with hb hb\n  · rw [log_of_left_le_one hb]\n    exact zero_le _\n  · exact le_log_of_pow_le hb (pow_log_le_add_one _ _)\n#align log_monotone log_monotone\n\n",
 "log_mono_right":
 "@[mono]\ntheorem log_mono_right {b n m : ℕ} (h : n ≤ m) : log b n ≤ log b m :=\n  log_monotone h\n#align log_mono_right log_mono_right\n\n",
 "log_lt_of_lt_pow":
 "theorem log_lt_of_lt_pow {b x y : ℕ} (hy : y ≠ 0) : y < b ^ x → log b y < x :=\n  lt_imp_lt_of_le_imp_le (pow_le_of_le_log hy)\n#align log_lt_of_lt_pow log_lt_of_lt_pow\n\n",
 "log_le_clog":
 "theorem log_le_clog (b n : ℕ) : log b n ≤ clog b n :=\n  by\n  obtain hb | hb := le_or_lt b 1\n  · rw [log_of_left_le_one hb]\n    exact zero_le _\n  cases n\n  · rw [log_zero_right]\n    exact zero_le _\n  exact (pow_right_strict_mono hb).le_iff_le.1 ((pow_log_le_self b n.succ_ne_zero).trans <| le_pow_clog hb _)\n#align log_le_clog log_le_clog\n\n",
 "log_eq_zero_iff":
 "/-\nCopyright (c) 2020 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon, Yaël Dillies\n-/\n@[simp]\ntheorem log_eq_zero_iff {b n : ℕ} : log b n = 0 ↔ n < b ∨ b ≤ 1 :=\n  by\n  rw [log, ite_eq_right_iff]\n  simp only [nat.succ_ne_zero, imp_false, decidable.not_and_distrib, not_le, not_lt]\n#align log_eq_zero_iff log_eq_zero_iff\n\n",
 "log_eq_one_iff'":
 "theorem log_eq_one_iff' {b n : ℕ} : log b n = 1 ↔ b ≤ n ∧ n < b * b := by\n  rw [log_eq_iff (or.inl one_ne_zero), pow_add, pow_one]\n#align log_eq_one_iff' log_eq_one_iff'\n\n",
 "log_eq_one_iff":
 "theorem log_eq_one_iff {b n : ℕ} : log b n = 1 ↔ n < b * b ∧ 1 < b ∧ b ≤ n :=\n  log_eq_one_iff'.trans ⟨fun h => ⟨h.2, lt_mul_self_iff.1 (h.1.trans_lt h.2), h.1⟩, fun h => ⟨h.2.2, h.1⟩⟩\n#align log_eq_one_iff log_eq_one_iff\n\n",
 "log_eq_of_pow_le_of_lt_pow":
 "theorem log_eq_of_pow_le_of_lt_pow {b m n : ℕ} (h₁ : b ^ m ≤ n) (h₂ : n < b ^ (m + 1)) : log b n = m :=\n  by\n  rcases eq_or_ne m 0 with (rfl | hm)\n  · rw [pow_one] at h₂\n    exact log_of_lt h₂\n  · exact (log_eq_iff (or.inl hm)).2 ⟨h₁, h₂⟩\n#align log_eq_of_pow_le_of_lt_pow log_eq_of_pow_le_of_lt_pow\n\n",
 "log_eq_iff":
 "theorem log_eq_iff {b m n : ℕ} (h : m ≠ 0 ∨ 1 < b ∧ n ≠ 0) : log b n = m ↔ b ^ m ≤ n ∧ n < b ^ (m + 1) :=\n  by\n  rcases em (1 < b ∧ n ≠ 0) with (⟨hb, hn⟩ | hbn)\n  · rw [le_antisymm_iff, ← lt_succ_iff, ← pow_le_iff_le_log, ← lt_pow_iff_log_lt, and_comm] <;> assumption\n  · have hm : m ≠ 0 := h.resolve_right hbn\n    rw [not_and_or, not_lt, ne.def, not_not] at hbn\n    rcases hbn with (hb | rfl)\n    ·\n      simpa only [log_of_left_le_one hb, hm.symm, false_iff_iff, not_and, not_lt] using\n        le_trans (pow_le_pow_of_le_one' hb m.le_succ)\n    ·\n      simpa only [log_zero_right, hm.symm, false_iff_iff, not_and, not_lt, le_zero_iff, pow_succ] using\n        mul_eq_zero_of_right _\n#align log_eq_iff log_eq_iff\n\n",
 "log_div_mul_self":
 "@[simp]\ntheorem log_div_mul_self (b n : ℕ) : log b (n / b * b) = log b n :=\n  by\n  cases' le_or_lt b 1 with hb hb\n  · rw [log_of_left_le_one hb, log_of_left_le_one hb]\n  cases' lt_or_le n b with h h\n  · rw [div_eq_of_lt h, zero_mul, log_zero_right, log_of_lt h]\n  rw [log_mul_base hb (Nat.div_pos h (zero_le_one.trans_lt hb)).ne', log_div_base,\n    tsub_add_cancel_of_le (succ_le_iff.2 <| log_pos hb h)]\n#align log_div_mul_self log_div_mul_self\n\n",
 "log_div_base":
 "@[simp]\ntheorem log_div_base (b n : ℕ) : log b (n / b) = log b n - 1 :=\n  by\n  cases' le_or_lt b 1 with hb hb\n  · rw [log_of_left_le_one hb, log_of_left_le_one hb, nat.zero_sub]\n  cases' lt_or_le n b with h h\n  · rw [div_eq_of_lt h, log_of_lt h, log_zero_right]\n  rw [log_of_one_lt_of_le hb h, add_tsub_cancel_right]\n#align log_div_base log_div_base\n\n",
 "log_antitone_left":
 "theorem log_antitone_left {n : ℕ} : antitone_on (fun b => log b n) (Set.Ioi 1) := fun _ hc _ _ hb =>\n  log_anti_left (Set.mem_Iio.1 hc) hb\n#align log_antitone_left log_antitone_left\n\n",
 "log_anti_left":
 "@[mono]\ntheorem log_anti_left {b c n : ℕ} (hc : 1 < c) (hb : c ≤ b) : log b n ≤ log c n :=\n  by\n  rcases eq_or_ne n 0 with (rfl | hn); · rw [log_zero_right, log_zero_right]\n  apply le_log_of_pow_le hc\n  calc\n    c ^ log b n ≤ b ^ log b n := pow_le_pow_of_le_left' hb _\n    _ ≤ n := pow_log_le_self _ hn\n    \n#align log_anti_left log_anti_left\n\n",
 "le_pow_iff_clog_le":
 "/-- `clog b` and `pow b` form a Galois connection. -/\ntheorem le_pow_iff_clog_le {b : ℕ} (hb : 1 < b) {x y : ℕ} : x ≤ b ^ y ↔ clog b x ≤ y :=\n  by\n  induction' x using nat.strong_induction_on with x ih generalizing y\n  cases y\n  · rw [pow_zero]\n    refine' ⟨fun h => (clog_of_right_le_one h b).le, _⟩\n    simp_rw [← not_lt]\n    contrapose!\n    exact clog_pos hb\n  have b_pos : 0 < b := zero_lt_two.trans_le hb\n  rw [clog]; split_ifs\n  ·\n    rw [succ_eq_add_one, add_le_add_iff_right, ← ih ((x + b - 1) / b) (add_pred_div_lt hb h.2),\n      Nat.div_le_iff_le_mul_add_pred b_pos, ← pow_succ, add_tsub_assoc_of_le (nat.succ_le_of_lt b_pos),\n      add_le_add_iff_right]\n  · exact iff_of_true ((not_lt.1 (not_and.1 h hb)).trans <| succ_le_of_lt <| pow_pos b_pos _) (zero_le _)\n#align le_pow_iff_clog_le le_pow_iff_clog_le\n\n",
 "le_pow_clog":
 "theorem le_pow_clog {b : ℕ} (hb : 1 < b) (x : ℕ) : x ≤ b ^ clog b x :=\n  (le_pow_iff_clog_le hb).2 le_rfl\n#align le_pow_clog le_pow_clog\n\n",
 "le_log_of_pow_le":
 "theorem le_log_of_pow_le {b x y : ℕ} (hb : 1 < b) (h : b ^ x ≤ y) : x ≤ log b y :=\n  by\n  rcases ne_or_eq y 0 with (hy | rfl)\n  exacts[(pow_le_iff_le_log hb hy).1 h, (h.not_lt (pow_pos (zero_lt_one.trans hb) _)).elim]\n#align le_log_of_pow_le le_log_of_pow_le\n\n",
 "clog_zero_right":
 "@[simp]\ntheorem clog_zero_right (b : ℕ) : clog b 0 = 0 :=\n  clog_of_right_le_one zero_le_one _\n#align clog_zero_right clog_zero_right\n\n",
 "clog_zero_left":
 "@[simp]\ntheorem clog_zero_left (n : ℕ) : clog 0 n = 0 :=\n  clog_of_left_le_one zero_le_one _\n#align clog_zero_left clog_zero_left\n\n",
 "clog_pow":
 "theorem clog_pow (b x : ℕ) (hb : 1 < b) : clog b (b ^ x) = x :=\n  eq_of_forall_ge_iff fun z => by\n    rw [← le_pow_iff_clog_le hb]\n    exact (pow_right_strict_mono hb).le_iff_le\n#align clog_pow clog_pow\n\n",
 "clog_pos":
 "theorem clog_pos {b n : ℕ} (hb : 1 < b) (hn : 2 ≤ n) : 0 < clog b n :=\n  by\n  rw [clog_of_two_le hb hn]\n  exact zero_lt_succ _\n#align clog_pos clog_pos\n\n",
 "clog_one_right":
 "@[simp]\ntheorem clog_one_right (b : ℕ) : clog b 1 = 0 :=\n  clog_of_right_le_one le_rfl _\n#align clog_one_right clog_one_right\n\n",
 "clog_one_left":
 "@[simp]\ntheorem clog_one_left (n : ℕ) : clog 1 n = 0 :=\n  clog_of_left_le_one le_rfl _\n#align clog_one_left clog_one_left\n\n",
 "clog_of_two_le":
 "theorem clog_of_two_le {b n : ℕ} (hb : 1 < b) (hn : 2 ≤ n) : clog b n = clog b ((n + b - 1) / b) + 1 := by\n  rw [clog, if_pos (⟨hb, hn⟩ : 1 < b ∧ 1 < n)]\n#align clog_of_two_le clog_of_two_le\n\n",
 "clog_of_right_le_one":
 "theorem clog_of_right_le_one {n : ℕ} (hn : n ≤ 1) (b : ℕ) : clog b n = 0 := by\n  rw [clog, if_neg fun h : 1 < b ∧ 1 < n => h.2.not_le hn]\n#align clog_of_right_le_one clog_of_right_le_one\n\n",
 "clog_of_left_le_one":
 "theorem clog_of_left_le_one {b : ℕ} (hb : b ≤ 1) (n : ℕ) : clog b n = 0 := by\n  rw [clog, if_neg fun h : 1 < b ∧ 1 < n => h.1.not_le hb]\n#align clog_of_left_le_one clog_of_left_le_one\n\n",
 "clog_monotone":
 "theorem clog_monotone (b : ℕ) : monotone (clog b) := fun x y => clog_mono_right _\n#align clog_monotone clog_monotone\n\n",
 "clog_mono_right":
 "@[mono]\ntheorem clog_mono_right (b : ℕ) {n m : ℕ} (h : n ≤ m) : clog b n ≤ clog b m :=\n  by\n  cases' le_or_lt b 1 with hb hb\n  · rw [clog_of_left_le_one hb]\n    exact zero_le _\n  · rw [← le_pow_iff_clog_le hb]\n    exact h.trans (le_pow_clog hb _)\n#align clog_mono_right clog_mono_right\n\n",
 "clog_eq_one":
 "theorem clog_eq_one {b n : ℕ} (hn : 2 ≤ n) (h : n ≤ b) : clog b n = 1 :=\n  by\n  rw [clog_of_two_le (hn.trans h) hn, clog_of_right_le_one]\n  have n_pos : 0 < n := zero_lt_two.trans_le hn\n  rw [← lt_succ_iff, nat.div_lt_iff_lt_mul (n_pos.trans_le h), ← succ_le_iff, ← pred_eq_sub_one,\n    succ_pred_eq_of_pos (add_pos n_pos (n_pos.trans_le h)), succ_mul, one_mul]\n  exact add_le_add_right h _\n#align clog_eq_one clog_eq_one\n\n",
 "clog_antitone_left":
 "theorem clog_antitone_left {n : ℕ} : antitone_on (fun b : ℕ => clog b n) (Set.Ioi 1) := fun _ hc _ _ hb =>\n  clog_anti_left (Set.mem_Iio.1 hc) hb\n#align clog_antitone_left clog_antitone_left\n\n",
 "clog_anti_left":
 "@[mono]\ntheorem clog_anti_left {b c n : ℕ} (hc : 1 < c) (hb : c ≤ b) : clog b n ≤ clog c n :=\n  by\n  rw [← le_pow_iff_clog_le (lt_of_lt_of_le hc hb)]\n  calc\n    n ≤ c ^ clog c n := le_pow_clog hc _\n    _ ≤ b ^ clog c n := pow_le_pow_of_le_left (zero_lt_one.trans hc).le hb _\n    \n#align clog_anti_left clog_anti_left\n\n",
 "add_pred_div_lt":
 "private theorem add_pred_div_lt {b n : ℕ} (hb : 1 < b) (hn : 2 ≤ n) : (n + b - 1) / b < n :=\n  by\n  rw [div_lt_iff_lt_mul (zero_lt_one.trans hb), ← succ_le_iff, ← pred_eq_sub_one,\n    succ_pred_eq_of_pos (add_pos (zero_lt_one.trans hn) (zero_lt_one.trans hb))]\n  exact add_le_mul hn hb\n#align add_pred_div_lt add_pred_div_lt\n\n"}