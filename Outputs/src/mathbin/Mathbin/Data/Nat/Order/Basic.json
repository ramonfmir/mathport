{"zero_max":
 "theorem zero_max : max 0 n = n :=\n  max_eq_right (zero_le _)\n#align zero_max zero_max\n\n",
 "zero_eq_mul":
 "#print zero_eq_mul /-\n@[simp]\nprotected theorem zero_eq_mul : 0 = m * n ↔ m = 0 ∨ n = 0 := by rw [eq_comm, Nat.mul_eq_zero]\n#align zero_eq_mul zero_eq_mul\n-/\n\n",
 "two_mul_odd_div_two":
 "theorem two_mul_odd_div_two (hn : n % 2 = 1) : 2 * (n / 2) = n - 1 := by\n  conv =>\n    rhs\n    rw [← nat.mod_add_div n 2, hn, add_tsub_cancel_left]\n#align two_mul_odd_div_two two_mul_odd_div_two\n\n",
 "two_le_iff":
 "theorem two_le_iff : ∀ n, 2 ≤ n ↔ n ≠ 0 ∧ n ≠ 1\n  | 0 => by simp\n  | 1 => by simp\n  | n + 2 => by simp\n#align two_le_iff two_le_iff\n\n",
 "succ_mul_pos":
 "theorem succ_mul_pos (m : ℕ) (hn : 0 < n) : 0 < succ m * n :=\n  mul_pos (succ_pos m) hn\n#align succ_mul_pos succ_mul_pos\n\n",
 "sub_succ'":
 "/-- A version of `nat.sub_succ` in the form `_ - 1` instead of `nat.pred _`. -/\ntheorem sub_succ' (m n : ℕ) : m - n.succ = m - n - 1 :=\n  rfl\n#align sub_succ' sub_succ'\n\n",
 "sub_mod_eq_zero_of_mod_eq":
 "/-- If `m` and `n` are equal mod `k`, `m - n` is zero mod `k`. -/\ntheorem sub_mod_eq_zero_of_mod_eq (h : m % k = n % k) : (m - n) % k = 0 := by\n  rw [← nat.mod_add_div m k, ← nat.mod_add_div n k, ← h, tsub_add_eq_tsub_tsub, add_tsub_cancel_left, ← mul_tsub,\n    nat.mul_mod_right]\n#align sub_mod_eq_zero_of_mod_eq sub_mod_eq_zero_of_mod_eq\n\n",
 "set_induction_bounded":
 "/-- A subset of `ℕ` containing `k : ℕ` and closed under `nat.succ` contains every `n ≥ k`. -/\ntheorem set_induction_bounded {S : Set ℕ} (hk : k ∈ S) (h_ind : ∀ k : ℕ, k ∈ S → k + 1 ∈ S) (hnk : k ≤ n) : n ∈ S :=\n  @leRecOn (fun n => n ∈ S) k n hnk h_ind hk\n#align set_induction_bounded set_induction_bounded\n\n",
 "set_induction":
 "/-- A subset of `ℕ` containing zero and closed under `nat.succ` contains all of `ℕ`. -/\ntheorem set_induction {S : Set ℕ} (hb : 0 ∈ S) (h_ind : ∀ k : ℕ, k ∈ S → k + 1 ∈ S) (n : ℕ) : n ∈ S :=\n  set_induction_bounded hb h_ind (zero_le n)\n#align set_induction set_induction\n\n",
 "pred_le_iff":
 "theorem pred_le_iff : pred m ≤ n ↔ m ≤ succ n :=\n  ⟨le_succ_of_pred_le, by\n    cases m\n    · exact fun _ => zero_le n\n    exact le_of_succ_le_succ⟩\n#align pred_le_iff pred_le_iff\n\n",
 "one_mod":
 "@[simp]\ntheorem one_mod (n : ℕ) : 1 % (n + 2) = 1 :=\n  nat.mod_eq_of_lt (add_lt_add_right n.succ_pos 1)\n#align one_mod one_mod\n\n",
 "one_lt_iff_ne_zero_and_ne_one":
 "theorem one_lt_iff_ne_zero_and_ne_one : ∀ {n : ℕ}, 1 < n ↔ n ≠ 0 ∧ n ≠ 1\n  | 0 => by decide\n  | 1 => by decide\n  | n + 2 => by decide\n#align one_lt_iff_ne_zero_and_ne_one one_lt_iff_ne_zero_and_ne_one\n\n",
 "one_lt_bit0_iff":
 "@[simp]\ntheorem one_lt_bit0_iff : 1 < bit0 n ↔ 1 ≤ n :=\n  by\n  convert bit1_lt_bit0_iff\n  rfl\n#align one_lt_bit0_iff one_lt_bit0_iff\n\n",
 "one_le_of_lt":
 "theorem one_le_of_lt (h : n < m) : 1 ≤ m :=\n  lt_of_le_of_lt (nat.zero_le _) h\n#align one_le_of_lt one_le_of_lt\n\n",
 "one_le_iff_ne_zero":
 "/-\nCopyright (c) 2014 Floris van Doorn (c) 2016 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn, Leonardo de Moura, Jeremy Avigad, Mario Carneiro\n-/\n-- Not using `infer_instance` avoids `classical.choice` in the following two\ntheorem one_le_iff_ne_zero : 1 ≤ n ↔ n ≠ 0 :=\n  (show 1 ≤ n ↔ 0 < n from iff.rfl).trans pos_iff_ne_zero\n#align one_le_iff_ne_zero one_le_iff_ne_zero\n\n",
 "one_le_bit0_iff":
 "@[simp]\ntheorem one_le_bit0_iff : 1 ≤ bit0 n ↔ 0 < n :=\n  by\n  convert bit1_le_bit0_iff\n  rfl\n#align one_le_bit0_iff one_le_bit0_iff\n\n",
 "not_dvd_of_pos_of_lt":
 "theorem not_dvd_of_pos_of_lt (h1 : 0 < n) (h2 : n < m) : ¬m ∣ n :=\n  by\n  rintro ⟨k, rfl⟩\n  rcases nat.eq_zero_or_pos k with (rfl | hk)\n  · exact lt_irrefl 0 h1\n  · exact not_lt.2 (le_mul_of_pos_right hk) h2\n#align not_dvd_of_pos_of_lt not_dvd_of_pos_of_lt\n\n",
 "not_dvd_of_between_consec_multiples":
 "/-- `m` is not divisible by `n` if it is between `n * k` and `n * (k + 1)` for some `k`. -/\ntheorem not_dvd_of_between_consec_multiples (h1 : n * k < m) (h2 : m < n * (k + 1)) : ¬n ∣ m :=\n  by\n  rintro ⟨d, rfl⟩\n  exact Monotone.ne_of_lt_of_lt_nat (Covariant.monotone_of_const n) k h1 h2 d rfl\n#align not_dvd_of_between_consec_multiples not_dvd_of_between_consec_multiples\n\n",
 "mul_self_lt_mul_self_iff":
 "#print mul_self_lt_mul_self_iff /-\ntheorem mul_self_lt_mul_self_iff : m < n ↔ m * m < n * n :=\n  le_iff_le_iff_lt_iff_lt.1 mul_self_le_mul_self_iff\n#align mul_self_lt_mul_self_iff mul_self_lt_mul_self_iff\n-/\n\n",
 "mul_self_lt_mul_self":
 "#print mul_self_lt_mul_self /-\ntheorem mul_self_lt_mul_self : ∀ {m n : ℕ}, m < n → m * m < n * n\n  | 0, n, h => mul_pos h h\n  | succ m, n, h => mul_lt_mul h (le_of_lt h) (succ_pos _) (zero_le _)\n#align mul_self_lt_mul_self mul_self_lt_mul_self\n-/\n\n",
 "mul_self_le_mul_self_iff":
 "#print mul_self_le_mul_self_iff /-\ntheorem mul_self_le_mul_self_iff : m ≤ n ↔ m * m ≤ n * n :=\n  ⟨mul_self_le_mul_self, le_imp_le_of_lt_imp_lt mul_self_lt_mul_self⟩\n#align mul_self_le_mul_self_iff mul_self_le_mul_self_iff\n-/\n\n",
 "mul_self_le_mul_self":
 "#print mul_self_le_mul_self /-\ntheorem mul_self_le_mul_self (h : m ≤ n) : m * m ≤ n * n :=\n  mul_le_mul h h (zero_le _) (zero_le _)\n#align mul_self_le_mul_self mul_self_le_mul_self\n-/\n\n",
 "mul_self_inj":
 "#print mul_self_inj /-\ntheorem mul_self_inj : m * m = n * n ↔ m = n :=\n  le_antisymm_iff.trans (le_antisymm_iff.trans (and_congr mul_self_le_mul_self_iff mul_self_le_mul_self_iff)).symm\n#align mul_self_inj mul_self_inj\n-/\n\n",
 "mul_ne_zero":
 "#print mul_ne_zero /-\nprotected theorem mul_ne_zero (n0 : n ≠ 0) (m0 : m ≠ 0) : n * m ≠ 0\n  | nm => (eq_zero_of_mul_eq_zero nm).elim n0 m0\n#align mul_ne_zero mul_ne_zero\n-/\n\n",
 "mul_eq_zero":
 "#print mul_eq_zero /-\n@[simp]\nprotected theorem mul_eq_zero : m * n = 0 ↔ m = 0 ∨ n = 0 :=\n  iff.intro eq_zero_of_mul_eq_zero (by simp (config := { contextual := true }) [or_imp])\n#align mul_eq_zero mul_eq_zero\n-/\n\n",
 "mul_div_mul_comm_of_dvd_dvd":
 "theorem mul_div_mul_comm_of_dvd_dvd (hmk : k ∣ m) (hnl : l ∣ n) : m * n / (k * l) = m / k * (n / l) :=\n  by\n  rcases k.eq_zero_or_pos with (rfl | hk0); · simp\n  rcases l.eq_zero_or_pos with (rfl | hl0); · simp\n  obtain ⟨_, rfl⟩ := hmk\n  obtain ⟨_, rfl⟩ := hnl\n  rw [mul_mul_mul_comm, nat.mul_div_cancel_left _ hk0, nat.mul_div_cancel_left _ hl0,\n    nat.mul_div_cancel_left _ (mul_pos hk0 hl0)]\n#align mul_div_mul_comm_of_dvd_dvd mul_div_mul_comm_of_dvd_dvd\n\n",
 "mod_mul_right_div_self":
 "theorem mod_mul_right_div_self (m n k : ℕ) : m % (n * k) / n = m / n % k :=\n  by\n  rcases nat.eq_zero_or_pos n with (rfl | hn); · simp\n  rcases nat.eq_zero_or_pos k with (rfl | hk); · simp\n  conv_rhs => rw [← mod_add_div m (n * k)]\n  rw [mul_assoc, add_mul_div_left _ _ hn, add_mul_mod_self_left,\n    mod_eq_of_lt (Nat.div_lt_of_lt_mul (mod_lt _ (mul_pos hn hk)))]\n#align mod_mul_right_div_self mod_mul_right_div_self\n\n",
 "mod_mul_left_div_self":
 "theorem mod_mul_left_div_self (m n k : ℕ) : m % (k * n) / n = m / n % k := by rw [mul_comm k, mod_mul_right_div_self]\n#align mod_mul_left_div_self mod_mul_left_div_self\n\n",
 "min_eq_zero_iff":
 "@[simp]\ntheorem min_eq_zero_iff : min m n = 0 ↔ m = 0 ∨ n = 0 :=\n  by\n  constructor\n  · intro h\n    cases' le_total m n with H H\n    · simpa [H] using or.inl h\n    · simpa [H] using or.inr h\n  · rintro (rfl | rfl) <;> simp\n#align min_eq_zero_iff min_eq_zero_iff\n\n",
 "max_eq_zero_iff":
 "@[simp]\ntheorem max_eq_zero_iff : max m n = 0 ↔ m = 0 ∧ n = 0 :=\n  by\n  constructor\n  · intro h\n    cases' le_total m n with H H\n    · simp only [H, max_eq_right] at h\n      exact ⟨le_antisymm (H.trans h.le) (zero_le _), h⟩\n    · simp only [H, max_eq_left] at h\n      exact ⟨h, le_antisymm (H.trans h.le) (zero_le _)⟩\n  · rintro ⟨rfl, rfl⟩\n    simp\n#align max_eq_zero_iff max_eq_zero_iff\n\n",
 "lt_pred_iff":
 "theorem lt_pred_iff : n < pred m ↔ succ n < m :=\n  show n < m - 1 ↔ n + 1 < m from lt_tsub_iff_right\n#align lt_pred_iff lt_pred_iff\n\n",
 "lt_one_iff":
 "@[simp]\ntheorem lt_one_iff {n : ℕ} : n < 1 ↔ n = 0 :=\n  lt_succ_iff.trans nonpos_iff_eq_zero\n#align lt_one_iff lt_one_iff\n\n",
 "lt_of_lt_pred":
 "theorem lt_of_lt_pred (h : m < n - 1) : m < n :=\n  lt_of_succ_lt (lt_pred_iff.1 h)\n#align lt_of_lt_pred lt_of_lt_pred\n\n",
 "lt_mul_self_iff":
 "@[simp]\ntheorem lt_mul_self_iff : ∀ {n : ℕ}, n < n * n ↔ 1 < n\n  | 0 => iff_of_false (lt_irrefl _) zero_le_one.not_lt\n  | n + 1 => lt_mul_iff_one_lt_left n.succ_pos\n#align lt_mul_self_iff lt_mul_self_iff\n\n",
 "le_or_le_of_add_eq_add_pred":
 "theorem le_or_le_of_add_eq_add_pred (h : k + l = m + n - 1) : m ≤ k ∨ n ≤ l :=\n  by\n  cases' le_or_lt m k with h' h' <;> [left, right]\n  · exact h'\n  · replace h' := add_lt_add_right h' l\n    rw [h] at h'\n    cases' n.eq_zero_or_pos with hn hn\n    · rw [hn]\n      exact zero_le l\n    rw [m.add_sub_assoc hn, add_lt_add_iff_left] at h'\n    exact Nat.le_of_pred_lt h'\n#align le_or_le_of_add_eq_add_pred le_or_le_of_add_eq_add_pred\n\n",
 "le_mul_self":
 "#print le_mul_self /-\ntheorem le_mul_self : ∀ n : ℕ, n ≤ n * n\n  | 0 => le_rfl\n  | n + 1 => by simp\n#align le_mul_self le_mul_self\n-/\n\n",
 "le_mul_of_pos_right":
 "theorem le_mul_of_pos_right (h : 0 < n) : m ≤ m * n :=\n  by\n  conv =>\n    lhs\n    rw [← mul_one m]\n  exact mul_le_mul_of_nonneg_left h.nat_succ_le (by decide)\n#align le_mul_of_pos_right le_mul_of_pos_right\n\n",
 "le_mul_of_pos_left":
 "theorem le_mul_of_pos_left (h : 0 < n) : m ≤ n * m :=\n  by\n  conv =>\n    lhs\n    rw [← one_mul m]\n  exact mul_le_mul_of_nonneg_right h.nat_succ_le (by decide)\n#align le_mul_of_pos_left le_mul_of_pos_left\n\n",
 "le_half_of_half_lt_sub":
 "theorem le_half_of_half_lt_sub {a b : ℕ} (h : a / 2 < a - b) : b ≤ a / 2 :=\n  by\n  rw [nat.le_div_iff_mul_le two_pos]\n  rw [nat.div_lt_iff_lt_mul two_pos, nat.mul_sub_right_distrib, lt_tsub_iff_right, mul_two a] at h\n  exact le_of_lt (nat.lt_of_add_lt_add_left h)\n#align le_half_of_half_lt_sub le_half_of_half_lt_sub\n\n",
 "le_find_greatest":
 "theorem le_find_greatest (hmb : m ≤ n) (hm : P m) : m ≤ Nat.findGreatest P n :=\n  le_of_not_lt fun hlt => (findGreatest_eq_iff.1 rfl).2.2 hlt hmb hm\n#align le_find_greatest le_find_greatest\n\n",
 "le_and_le_add_one_iff":
 "theorem le_and_le_add_one_iff : n ≤ m ∧ m ≤ n + 1 ↔ m = n ∨ m = n + 1 :=\n  by\n  rw [le_add_one_iff, and_or_left, ← le_antisymm_iff, eq_comm, and_iff_right_of_imp]\n  rintro rfl\n  exact n.le_succ\n#align le_and_le_add_one_iff le_and_le_add_one_iff\n\n",
 "le_add_pred_of_pos":
 "theorem le_add_pred_of_pos (n : ℕ) {i : ℕ} (hi : i ≠ 0) : n ≤ i + (n - 1) :=\n  by\n  refine' le_trans _ add_tsub_le_assoc\n  simp [add_comm, nat.add_sub_assoc, one_le_iff_ne_zero.2 hi]\n#align le_add_pred_of_pos le_add_pred_of_pos\n\n",
 "le_add_one_iff":
 "theorem le_add_one_iff : m ≤ n + 1 ↔ m ≤ n ∨ m = n + 1 :=\n  ⟨fun h =>\n    match nat.eq_or_lt_of_le h with\n    | or.inl h => or.inr h\n    | or.inr h => or.inl <| nat.le_of_succ_le_succ h,\n    or.rec (fun h => le_trans h <| nat.le_add_right _ _) le_of_eq⟩\n#align le_add_one_iff le_add_one_iff\n\n",
 "half_le_of_sub_le_half":
 "theorem half_le_of_sub_le_half {a b : ℕ} (h : a - b ≤ a / 2) : a / 2 ≤ b :=\n  by\n  rw [nat.le_div_iff_mul_le two_pos, nat.mul_sub_right_distrib, tsub_le_iff_right, mul_two, add_le_add_iff_left] at h\n  rw [← nat.mul_div_left b two_pos]\n  exact Nat.div_le_div_right h\n#align half_le_of_sub_le_half half_le_of_sub_le_half\n\n",
 "find_pos":
 "@[simp]\ntheorem find_pos (h : ∃ n : ℕ, p n) : 0 < nat.find h ↔ ¬p 0 := by rw [pos_iff_ne_zero, ne, Nat.find_eq_zero]\n#align find_pos find_pos\n\n",
 "find_greatest_spec":
 "theorem find_greatest_spec (hmb : m ≤ n) (hm : P m) : P (Nat.findGreatest P n) :=\n  by\n  by_cases h : Nat.findGreatest P n = 0\n  · cases m\n    · rwa [h]\n    exact ((find_greatest_eq_zero_iff.1 h) m.zero_lt_succ hmb hm).elim\n  · exact (find_greatest_eq_iff.1 rfl).2.1 h\n#align find_greatest_spec find_greatest_spec\n\n",
 "find_greatest_of_ne_zero":
 "theorem find_greatest_of_ne_zero (h : Nat.findGreatest P n = m) (h0 : m ≠ 0) : P m :=\n  (findGreatest_eq_iff.1 h).2.1 h0\n#align find_greatest_of_ne_zero find_greatest_of_ne_zero\n\n",
 "find_greatest_mono_right":
 "theorem find_greatest_mono_right (P : ℕ → Prop) [DecidablePred P] : Monotone (Nat.findGreatest P) :=\n  by\n  refine' monotone_nat_of_le_succ fun n => _\n  rw [find_greatest_succ]\n  split_ifs\n  · exact (find_greatest_le n).trans (le_succ _)\n  · rfl\n#align find_greatest_mono_right find_greatest_mono_right\n\n",
 "find_greatest_mono_left":
 "theorem find_greatest_mono_left [DecidablePred Q] (hPQ : P ≤ Q) : Nat.findGreatest P ≤ Nat.findGreatest Q :=\n  by\n  intro n\n  induction' n with n hn\n  · rfl\n  by_cases P (n + 1)\n  · rw [find_greatest_eq h, find_greatest_eq (hPQ _ h)]\n  · rw [find_greatest_of_not h]\n    exact hn.trans (Nat.findGreatest_mono_right _ <| le_succ _)\n#align find_greatest_mono_left find_greatest_mono_left\n\n",
 "find_greatest_mono":
 "theorem find_greatest_mono [DecidablePred Q] (hPQ : P ≤ Q) (hmn : m ≤ n) :\n    Nat.findGreatest P m ≤ Nat.findGreatest Q n :=\n  (Nat.findGreatest_mono_right _ hmn).trans <| findGreatest_mono_left hPQ _\n#align find_greatest_mono find_greatest_mono\n\n",
 "find_greatest_le":
 "theorem find_greatest_le (n : ℕ) : Nat.findGreatest P n ≤ n :=\n  (findGreatest_eq_iff.1 rfl).1\n#align find_greatest_le find_greatest_le\n\n",
 "find_greatest_is_greatest":
 "theorem find_greatest_is_greatest (hk : Nat.findGreatest P n < k) (hkb : k ≤ n) : ¬P k :=\n  (findGreatest_eq_iff.1 rfl).2.2 hk hkb\n#align find_greatest_is_greatest find_greatest_is_greatest\n\n",
 "find_greatest_eq_zero_iff":
 "theorem find_greatest_eq_zero_iff : Nat.findGreatest P k = 0 ↔ ∀ ⦃n⦄, 0 < n → n ≤ k → ¬P n := by\n  simp [find_greatest_eq_iff]\n#align find_greatest_eq_zero_iff find_greatest_eq_zero_iff\n\n",
 "find_greatest_eq_iff":
 "theorem find_greatest_eq_iff : Nat.findGreatest P k = m ↔ m ≤ k ∧ (m ≠ 0 → P m) ∧ ∀ ⦃n⦄, m < n → n ≤ k → ¬P n :=\n  by\n  induction' k with k ihk generalizing m\n  · rw [eq_comm, iff.comm]\n    simp only [nonpos_iff_eq_zero, ne.def, and_iff_left_iff_imp, find_greatest_zero]\n    rintro rfl\n    exact ⟨fun h => (h rfl).elim, fun n hlt heq => (hlt.ne HEq.symm).elim⟩\n  · by_cases hk : P (k + 1)\n    · rw [find_greatest_eq hk]\n      constructor\n      · rintro rfl\n        exact ⟨le_rfl, fun _ => hk, fun n hlt hle => (hlt.not_le hle).elim⟩\n      · rintro ⟨hle, h0, hm⟩\n        rcases decidable.eq_or_lt_of_le hle with (rfl | hlt)\n        exacts[rfl, (hm hlt le_rfl hk).elim]\n    · rw [find_greatest_of_not hk, ihk]\n      constructor\n      · rintro ⟨hle, hP, hm⟩\n        refine' ⟨hle.trans k.le_succ, hP, fun n hlt hle => _⟩\n        rcases decidable.eq_or_lt_of_le hle with (rfl | hlt')\n        exacts[hk, hm hlt <| lt_succ_iff.1 hlt']\n      · rintro ⟨hle, hP, hm⟩\n        refine' ⟨lt_succ_iff.1 (hle.lt_of_ne _), hP, fun n hlt hle => hm hlt (hle.trans k.le_succ)⟩\n        rintro rfl\n        exact hk (hP k.succ_ne_zero)\n#align find_greatest_eq_iff find_greatest_eq_iff\n\n",
 "find_add":
 "theorem find_add {hₘ : ∃ m, p (m + n)} {hₙ : ∃ n, p n} (hn : n ≤ nat.find hₙ) : nat.find hₘ + n = nat.find hₙ :=\n  by\n  refine' ((le_find_iff _ _).2 fun m hm hpm => hm.not_le _).antisymm _\n  · have hnm : n ≤ m := hn.trans (find_le hpm)\n    refine' add_le_of_le_tsub_right_of_le hnm (find_le _)\n    rwa [tsub_add_cancel_of_le hnm]\n  · rw [← tsub_le_iff_right]\n    refine' (le_find_iff _ _).2 fun m hm hpm => hm.not_le _\n    rw [tsub_le_iff_right]\n    exact find_le hpm\n#align find_add find_add\n\n",
 "eq_zero_of_mul_le":
 "theorem eq_zero_of_mul_le (hb : 2 ≤ n) (h : n * m ≤ m) : m = 0 :=\n  eq_zero_of_double_le <| le_trans (nat.mul_le_mul_right _ hb) h\n#align eq_zero_of_mul_le eq_zero_of_mul_le\n\n",
 "eq_zero_of_le_half":
 "theorem eq_zero_of_le_half (h : n ≤ n / 2) : n = 0 :=\n  eq_zero_of_le_div le_rfl h\n#align eq_zero_of_le_half eq_zero_of_le_half\n\n",
 "eq_zero_of_le_div":
 "theorem eq_zero_of_le_div (hn : 2 ≤ n) (h : m ≤ m / n) : m = 0 :=\n  eq_zero_of_mul_le hn <| by rw [mul_comm] <;> exact (Nat.le_div_iff_mul_le' (lt_of_lt_of_le (by decide) hn)).1 h\n#align eq_zero_of_le_div eq_zero_of_le_div\n\n",
 "eq_zero_of_double_le":
 "theorem eq_zero_of_double_le (h : 2 * n ≤ n) : n = 0 :=\n  add_right_eq_self.mp <| le_antisymm ((two_mul n).symm.trans_le h) le_add_self\n#align eq_zero_of_double_le eq_zero_of_double_le\n\n",
 "eq_one_of_mul_eq_one_right":
 "theorem eq_one_of_mul_eq_one_right (H : m * n = 1) : m = 1 :=\n  eq_one_of_dvd_one ⟨n, H.symm⟩\n#align eq_one_of_mul_eq_one_right eq_one_of_mul_eq_one_right\n\n",
 "eq_one_of_mul_eq_one_left":
 "theorem eq_one_of_mul_eq_one_left (H : m * n = 1) : n = 1 :=\n  eq_one_of_mul_eq_one_right (by rwa [mul_comm])\n#align eq_one_of_mul_eq_one_left eq_one_of_mul_eq_one_left\n\n",
 "dvd_sub_mod":
 "theorem dvd_sub_mod (k : ℕ) : n ∣ k - k % n :=\n  ⟨k / n, tsub_eq_of_eq_add_rev (nat.mod_add_div k n).symm⟩\n#align dvd_sub_mod dvd_sub_mod\n\n",
 "div_mul_div_le_div":
 "theorem div_mul_div_le_div (m n k : ℕ) : m / k * n / m ≤ n / k :=\n  if hm0 : m = 0 then by simp [hm0]\n  else\n    calc\n      m / k * n / m ≤ n * m / k / m := Nat.div_le_div_right (by rw [mul_comm] <;> exact mul_div_le_mul_div_assoc _ _ _)\n      _ = n / k := by rw [nat.div_div_eq_div_mul, mul_comm n, mul_comm k, nat.mul_div_mul _ _ (nat.pos_of_ne_zero hm0)]\n      \n#align div_mul_div_le_div div_mul_div_le_div\n\n",
 "div_mul_div_comm":
 "#print div_mul_div_comm /-\ntheorem div_mul_div_comm (hmn : n ∣ m) (hkl : l ∣ k) : m / n * (k / l) = m * k / (n * l) :=\n  have exi1 : ∃ x, m = n * x := hmn\n  have exi2 : ∃ y, k = l * y := hkl\n  if hn : n = 0 then by simp [hn]\n  else\n    have : 0 < n := nat.pos_of_ne_zero hn\n    if hl : l = 0 then by simp [hl]\n    else by\n      have : 0 < l := nat.pos_of_ne_zero hl\n      cases' exi1 with x hx\n      cases' exi2 with y hy\n      rw [hx, hy, nat.mul_div_cancel_left, nat.mul_div_cancel_left]\n      symm\n      apply Nat.div_eq_of_eq_mul_left\n      apply mul_pos\n      repeat' assumption\n      cc\n#align div_mul_div_comm div_mul_div_comm\n-/\n\n",
 "div_lt_of_lt_mul":
 "protected theorem div_lt_of_lt_mul (h : m < n * k) : m / n < k :=\n  lt_of_mul_lt_mul_left\n    (calc\n      n * (m / n) ≤ m % n + n * (m / n) := nat.le_add_left _ _\n      _ = m := (mod_add_div _ _)\n      _ < n * k := h\n      )\n    (nat.zero_le n)\n#align div_lt_of_lt_mul div_lt_of_lt_mul\n\n",
 "div_le_self'":
 "protected theorem div_le_self' (m n : ℕ) : m / n ≤ m :=\n  (nat.eq_zero_or_pos n).elim (fun n0 => by rw [n0, nat.div_zero] <;> apply zero_le) fun n0 =>\n    Nat.div_le_of_le_mul' <|\n      calc\n        m = 1 * m := (one_mul _).symm\n        _ ≤ n * m := nat.mul_le_mul_right _ n0\n        \n#align div_le_self' div_le_self'\n\n",
 "div_le_of_le_mul'":
 "protected theorem div_le_of_le_mul' (h : m ≤ k * n) : m / k ≤ n :=\n  (nat.eq_zero_or_pos k).elim (fun k0 => by rw [k0, nat.div_zero] <;> apply zero_le) fun k0 =>\n    (mul_le_mul_left k0).1 <|\n      calc\n        k * (m / k) ≤ m % k + k * (m / k) := nat.le_add_left _ _\n        _ = m := (mod_add_div _ _)\n        _ ≤ k * n := h\n        \n#align div_le_of_le_mul' div_le_of_le_mul'\n\n",
 "div_eq_sub_mod_div":
 "/- ./././Mathport/Syntax/Translate/Tactic/Lean3.lean:132:4: warning: unsupported: rw with cfg: { occs := occurrences.pos[occurrences.pos] «expr[ ,]»([2]) } -/\ntheorem div_eq_sub_mod_div : m / n = (m - m % n) / n :=\n  by\n  by_cases n0 : n = 0\n  · rw [n0, nat.div_zero, nat.div_zero]\n  · rw [← mod_add_div m n]\n    rw [add_tsub_cancel_left, mul_div_right _ (nat.pos_of_ne_zero n0)]\n#align div_eq_sub_mod_div div_eq_sub_mod_div\n\n",
 "div_eq_self":
 "#print div_eq_self /-\ntheorem div_eq_self : m / n = m ↔ m = 0 ∨ n = 1 := by\n  constructor\n  · intro\n    cases n\n    · simp_all\n    · cases n\n      · right\n        rfl\n      · left\n        have : m / (n + 2) ≤ m / 2 := div_le_div_left (by simp) (by decide)\n        refine' eq_zero_of_le_half _\n        simp_all\n  · rintro (rfl | rfl) <;> simp\n#align div_eq_self div_eq_self\n-/\n\n",
 "div_dvd_of_dvd":
 "theorem div_dvd_of_dvd (h : n ∣ m) : m / n ∣ m :=\n  ⟨n, (Nat.div_mul_cancel h).symm⟩\n#align div_dvd_of_dvd div_dvd_of_dvd\n\n",
 "div_div_self":
 "#print div_div_self /-\nprotected theorem div_div_self (h : n ∣ m) (hm : m ≠ 0) : m / (m / n) = n :=\n  by\n  rcases h with ⟨_, rfl⟩\n  rw [mul_ne_zero_iff] at hm\n  rw [mul_div_right _ (nat.pos_of_ne_zero hm.1), mul_div_left _ (nat.pos_of_ne_zero hm.2)]\n#align div_div_self div_div_self\n-/\n\n",
 "diag_induction":
 "/-- Given a predicate on two naturals `P : ℕ → ℕ → Prop`, `P a b` is true for all `a < b` if\n`P (a + 1) (a + 1)` is true for all `a`, `P 0 (b + 1)` is true for all `b` and for all\n`a < b`, `P (a + 1) b` is true and `P a (b + 1)` is true implies `P (a + 1) (b + 1)` is true. -/\n@[elab_as_elim]\ntheorem diag_induction (P : ℕ → ℕ → Prop) (ha : ∀ a, P (a + 1) (a + 1)) (hb : ∀ b, P 0 (b + 1))\n    (hd : ∀ a b, a < b → P (a + 1) b → P a (b + 1) → P (a + 1) (b + 1)) : ∀ a b, a < b → P a b\n  | 0, b + 1, h => hb _\n  | a + 1, b + 1, h => by\n    apply hd _ _ ((add_lt_add_iff_right _).1 h)\n    · have : a + 1 = b ∨ a + 1 < b := by rwa [← le_iff_eq_or_lt, ← Nat.lt_succ_iff]\n      rcases this with (rfl | _)\n      · exact ha _\n      apply diag_induction (a + 1) b this\n    apply diag_induction a (b + 1)\n    apply lt_of_le_of_lt (nat.le_succ _) h termination_by' ⟨_, measure_wf fun p => p.1 + p.2.1⟩\n#align diag_induction diag_induction\n\n",
 "bit_lt_bit_iff":
 "@[simp]\ntheorem bit_lt_bit_iff : ∀ {b : Bool}, bit b m < bit b n ↔ m < n\n  | ff => bit0_lt_bit0\n  | tt => bit1_lt_bit1\n#align bit_lt_bit_iff bit_lt_bit_iff\n\n",
 "bit_lt_bit0":
 "theorem bit_lt_bit0 : ∀ (b) {m n : ℕ}, m < n → bit b m < bit0 n\n  | tt, _, _, h => Nat.bit1_lt_bit0 h\n  | ff, _, _, h => Nat.bit0_lt h\n#align bit_lt_bit0 bit_lt_bit0\n\n",
 "bit_lt_bit":
 "theorem bit_lt_bit (a b) (h : m < n) : bit a m < bit b n :=\n  lt_of_lt_of_le (bit_lt_bit0 _ h) (bit0_le_bit _ le_rfl)\n#align bit_lt_bit bit_lt_bit\n\n",
 "bit_le_bit_iff":
 "@[simp]\ntheorem bit_le_bit_iff : ∀ {b : Bool}, bit b m ≤ bit b n ↔ m ≤ n\n  | ff => bit0_le_bit0\n  | tt => bit1_le_bit1\n#align bit_le_bit_iff bit_le_bit_iff\n\n",
 "bit_le_bit1_iff":
 "@[simp]\ntheorem bit_le_bit1_iff : ∀ {b : Bool}, bit b m ≤ bit1 n ↔ m ≤ n\n  | ff => bit0_le_bit1_iff\n  | tt => bit1_le_bit1\n#align bit_le_bit1_iff bit_le_bit1_iff\n\n",
 "bit_le_bit1":
 "theorem bit_le_bit1 : ∀ (b) {m n : ℕ}, m ≤ n → bit b m ≤ bit1 n\n  | ff, _, _, h => le_of_lt <| Nat.bit0_lt_bit1 h\n  | tt, _, _, h => Nat.bit1_le h\n#align bit_le_bit1 bit_le_bit1\n\n",
 "bit_le":
 "theorem bit_le : ∀ (b : Bool) {m n : ℕ}, m ≤ n → bit b m ≤ bit b n\n  | tt, _, _, h => Nat.bit1_le h\n  | ff, _, _, h => Nat.bit0_le h\n#align bit_le bit_le\n\n",
 "bit1_lt_bit0_iff":
 "@[simp]\ntheorem bit1_lt_bit0_iff : bit1 m < bit0 n ↔ m < n :=\n  ⟨fun h => bit1_le_bit0_iff.1 (le_of_lt h), Nat.bit1_lt_bit0⟩\n#align bit1_lt_bit0_iff bit1_lt_bit0_iff\n\n",
 "bit1_le_bit0_iff":
 "@[simp]\ntheorem bit1_le_bit0_iff : bit1 m ≤ bit0 n ↔ m < n :=\n  ⟨fun h => by rwa [m.bit1_eq_succ_bit0, succ_le_iff, bit0_lt_bit0] at h, fun h => le_of_lt (Nat.bit1_lt_bit0 h)⟩\n#align bit1_le_bit0_iff bit1_le_bit0_iff\n\n",
 "bit1_le":
 "protected theorem bit1_le {n m : ℕ} (h : n ≤ m) : bit1 n ≤ bit1 m :=\n  succ_le_succ (add_le_add h h)\n#align bit1_le bit1_le\n\n",
 "bit0_lt_bit1_iff":
 "@[simp]\ntheorem bit0_lt_bit1_iff : bit0 m < bit1 n ↔ m ≤ n :=\n  ⟨fun h => bit0_le_bit1_iff.1 (le_of_lt h), Nat.bit0_lt_bit1⟩\n#align bit0_lt_bit1_iff bit0_lt_bit1_iff\n\n",
 "bit0_le_bit1_iff":
 "@[simp]\ntheorem bit0_le_bit1_iff : bit0 m ≤ bit1 n ↔ m ≤ n :=\n  ⟨fun h => by rwa [← Nat.lt_succ_iff, n.bit1_eq_succ_bit0, ← n.bit0_succ_eq, bit0_lt_bit0, Nat.lt_succ_iff] at h,\n    fun h => le_of_lt (Nat.bit0_lt_bit1 h)⟩\n#align bit0_le_bit1_iff bit0_le_bit1_iff\n\n",
 "bit0_le_bit":
 "theorem bit0_le_bit : ∀ (b) {m n : ℕ}, m ≤ n → bit0 m ≤ bit b n\n  | tt, _, _, h => le_of_lt <| Nat.bit0_lt_bit1 h\n  | ff, _, _, h => Nat.bit0_le h\n#align bit0_le_bit bit0_le_bit\n\n",
 "bit0_le":
 "protected theorem bit0_le {n m : ℕ} (h : n ≤ m) : bit0 n ≤ bit0 m :=\n  add_le_add h h\n#align bit0_le bit0_le\n\n",
 "add_succ_lt_add":
 "theorem add_succ_lt_add (hab : m < n) (hcd : k < l) : m + k + 1 < n + l :=\n  by\n  rw [add_assoc]\n  exact add_lt_add_of_lt_of_le hab (Nat.succ_le_iff.2 hcd)\n#align add_succ_lt_add add_succ_lt_add\n\n",
 "add_pos_right":
 "theorem add_pos_right (m : ℕ) {n : ℕ} (h : 0 < n) : 0 < m + n := by rw [add_comm]; exact add_pos_left h m\n#align add_pos_right add_pos_right\n\n",
 "add_pos_left":
 "theorem add_pos_left {m : ℕ} (h : 0 < m) (n : ℕ) : 0 < m + n :=\n  calc\n    m + n > 0 + n := nat.add_lt_add_right h n\n    _ = n := (nat.zero_add n)\n    _ ≥ 0 := zero_le n\n    \n#align add_pos_left add_pos_left\n\n",
 "add_pos_iff_pos_or_pos":
 "theorem add_pos_iff_pos_or_pos (m n : ℕ) : 0 < m + n ↔ 0 < m ∨ 0 < n :=\n  iff.intro\n    (by\n      intro h\n      cases' m with m\n      · simp [zero_add] at h\n        exact or.inr h\n      exact or.inl (succ_pos _))\n    (by\n      intro h; cases' h with mpos npos\n      · apply add_pos_left mpos\n      apply add_pos_right _ npos)\n#align add_pos_iff_pos_or_pos add_pos_iff_pos_or_pos\n\n",
 "add_mod_eq_ite":
 "theorem add_mod_eq_ite : (m + n) % k = if k ≤ m % k + n % k then m % k + n % k - k else m % k + n % k :=\n  by\n  cases k; · simp\n  rw [Nat.add_mod]\n  split_ifs with h\n  · rw [nat.mod_eq_sub_mod h, nat.mod_eq_of_lt]\n    exact (tsub_lt_iff_right h).mpr (nat.add_lt_add (m.mod_lt k.zero_lt_succ) (n.mod_lt k.zero_lt_succ))\n  · exact nat.mod_eq_of_lt (lt_of_not_ge h)\n#align add_mod_eq_ite add_mod_eq_ite\n\n",
 "add_eq_two_iff":
 "theorem add_eq_two_iff : m + n = 2 ↔ m = 0 ∧ n = 2 ∨ m = 1 ∧ n = 1 ∨ m = 2 ∧ n = 0 := by\n  cases n <;> simp [(succ_ne_zero 1).symm, succ_eq_add_one, ← add_assoc, succ_inj', add_eq_one_iff]\n#align add_eq_two_iff add_eq_two_iff\n\n",
 "add_eq_three_iff":
 "theorem add_eq_three_iff : m + n = 3 ↔ m = 0 ∧ n = 3 ∨ m = 1 ∧ n = 2 ∨ m = 2 ∧ n = 1 ∨ m = 3 ∧ n = 0 := by\n  cases n <;> simp [(succ_ne_zero 1).symm, succ_eq_add_one, ← add_assoc, succ_inj', add_eq_two_iff]\n#align add_eq_three_iff add_eq_three_iff\n\n",
 "add_eq_one_iff":
 "theorem add_eq_one_iff : m + n = 1 ↔ m = 0 ∧ n = 1 ∨ m = 1 ∧ n = 0 := by\n  cases n <;> simp [succ_eq_add_one, ← add_assoc, succ_inj']\n#align add_eq_one_iff add_eq_one_iff\n\n",
 "add_eq_min_iff":
 "theorem add_eq_min_iff : m + n = min m n ↔ m = 0 ∧ n = 0 :=\n  by\n  rw [← max_eq_zero_iff]\n  cases' le_total m n with H H <;> simp [H]\n#align add_eq_min_iff add_eq_min_iff\n\n",
 "add_eq_max_iff":
 "theorem add_eq_max_iff : m + n = max m n ↔ m = 0 ∨ n = 0 :=\n  by\n  rw [← min_eq_zero_iff]\n  cases' le_total m n with H H <;> simp [H]\n#align add_eq_max_iff add_eq_max_iff\n\n"}