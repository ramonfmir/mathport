{"univ_unique":
 "@[congr]\ntheorem univ_unique (I J : Inhabited α) : @univ _ I = @univ _ J :=\n  ext.2 <| by simp\n#align univ_unique univ_unique\n\n",
 "pure_le":
 "@[simp]\ntheorem pure_le {a : α} {s : Semiquot α} : pure a ≤ s ↔ a ∈ s :=\n  Set.singleton_subset_iff\n#align pure_le pure_le\n\n",
 "pure_is_pure":
 "@[simp]\ntheorem pure_is_pure (a : α) : IsPure (pure a)\n  | b, ab, c, ac => by\n    rw [mem_pure] at ab ac\n    cc\n#align pure_is_pure pure_is_pure\n\n",
 "pure_inj":
 "@[simp]\ntheorem pure_inj {a b : α} : (pure a : Semiquot α) = pure b ↔ a = b :=\n  ext_s.trans Set.singleton_eq_singleton_iff\n#align pure_inj pure_inj\n\n",
 "mono":
 "theorem is_pure.mono {s t : Semiquot α} (st : s ≤ t) (h : IsPure t) : IsPure s\n  | a, as, b, bs => h _ (st as) _ (st bs)\n#align is_pure.mono is_pure.mono\n\n",
 "min":
 "theorem is_pure.min {s t : Semiquot α} (h : IsPure t) : s ≤ t ↔ s = t :=\n  ⟨fun st =>\n    le_antisymm st <| by rw [eq_pure h, eq_pure (h.mono st)] <;> simp <;> exact h _ (get_mem _) _ (st <| get_mem _),\n    le_of_eq⟩\n#align is_pure.min is_pure.min\n\n",
 "mem_univ":
 "@[simp]\ntheorem mem_univ [Inhabited α] : ∀ a, a ∈ @univ α _ :=\n  @Set.mem_univ α\n#align mem_univ mem_univ\n\n",
 "mem_pure_self":
 "theorem mem_pure_self (a : α) : a ∈ (pure a : Semiquot α) :=\n  Set.mem_singleton a\n#align mem_pure_self mem_pure_self\n\n",
 "mem_pure'":
 "@[simp]\ntheorem mem_pure' {a b : α} : a ∈ Semiquot.pure b ↔ a = b :=\n  Set.mem_singleton_iff\n#align mem_pure' mem_pure'\n\n",
 "mem_pure":
 "@[simp]\ntheorem mem_pure {a b : α} : a ∈ (pure b : Semiquot α) ↔ a = b :=\n  Set.mem_singleton_iff\n#align mem_pure mem_pure\n\n",
 "mem_map":
 "@[simp]\ntheorem mem_map (f : α → β) (q : Semiquot α) (b : β) : b ∈ map f q ↔ ∃ a, a ∈ q ∧ f a = b :=\n  Set.mem_image _ _ _\n#align mem_map mem_map\n\n",
 "mem_blur'":
 "@[simp]\ntheorem mem_blur' (q : Semiquot α) {s : Set α} (h : q.s ⊆ s) {a : α} : a ∈ blur' q h ↔ a ∈ s :=\n  iff.rfl\n#align mem_blur' mem_blur'\n\n",
 "mem_bind":
 "@[simp]\ntheorem mem_bind (q : Semiquot α) (f : α → Semiquot β) (b : β) : b ∈ bind q f ↔ ∃ a ∈ q, b ∈ f a :=\n  Set.mem_unionᵢ₂\n#align mem_bind mem_bind\n\n",
 "map_def":
 "@[simp]\ntheorem map_def {β} : ((· <$> ·) : (α → β) → Semiquot α → Semiquot β) = map :=\n  rfl\n#align map_def map_def\n\n",
 "lift_on_of_mem":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (a b «expr ∈ » q) -/\ntheorem lift_on_of_mem (q : Semiquot α) (f : α → β) (h : ∀ (a) (_ : a ∈ q) (b) (_ : b ∈ q), f a = f b) (a : α)\n    (aq : a ∈ q) : liftOn q f h = f a := by revert h <;> rw [eq_mk_of_mem aq] <;> intro <;> rfl\n#align lift_on_of_mem lift_on_of_mem\n\n",
 "is_pure_univ":
 "@[simp]\ntheorem is_pure_univ [Inhabited α] : @IsPure α univ ↔ subsingleton α :=\n  ⟨fun h => ⟨fun a b => h a trivial b trivial⟩, fun ⟨h⟩ a _ b _ => h a b⟩\n#align is_pure_univ is_pure_univ\n\n",
 "is_pure_of_subsingleton":
 "theorem is_pure_of_subsingleton [subsingleton α] (q : Semiquot α) : IsPure q\n  | a, b, aq, bq => subsingleton.elim _ _\n#align is_pure_of_subsingleton is_pure_of_subsingleton\n\n",
 "is_pure_iff":
 "theorem is_pure_iff {s : Semiquot α} : IsPure s ↔ ∃ a, s = pure a :=\n  ⟨fun h => ⟨_, eq_pure h⟩, fun ⟨a, e⟩ => e.symm ▸ pure_isPure _⟩\n#align is_pure_iff is_pure_iff\n\n",
 "get_mem":
 "theorem get_mem {q : Semiquot α} (p) : get q p ∈ q :=\n  by\n  let ⟨a, h⟩ := exists_mem q\n  unfold get <;> rw [lift_on_of_mem q _ _ a h] <;> exact h\n#align get_mem get_mem\n\n",
 "ext_s":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem ext_s {q₁ q₂ : Semiquot α} : q₁ = q₂ ↔ q₁.s = q₂.s :=\n  by\n  refine' ⟨congr_arg _, fun h => _⟩\n  cases q₁\n  cases q₂\n  cc\n#align ext_s ext_s\n\n",
 "ext":
 "theorem ext {q₁ q₂ : Semiquot α} : q₁ = q₂ ↔ ∀ a, a ∈ q₁ ↔ a ∈ q₂ :=\n  ext_s.trans Set.ext_iff\n#align ext ext\n\n",
 "exists_mem":
 "theorem exists_mem (q : Semiquot α) : ∃ a, a ∈ q :=\n  let ⟨⟨a, h⟩, h₂⟩ := q.2.exists_rep\n  ⟨a, h⟩\n#align exists_mem exists_mem\n\n",
 "eq_pure":
 "theorem eq_pure {q : Semiquot α} (p) : q = pure (get q p) :=\n  ext.2 fun a => by simp <;> exact ⟨fun h => p _ h _ (get_mem _), fun e => e.symm ▸ get_mem _⟩\n#align eq_pure eq_pure\n\n",
 "eq_mk_of_mem":
 "theorem eq_mk_of_mem {q : Semiquot α} {a : α} (h : a ∈ q) : q = @mk _ a q.1 h :=\n  ext_s.2 rfl\n#align eq_mk_of_mem eq_mk_of_mem\n\n",
 "blur_eq_blur'":
 "theorem blur_eq_blur' (q : Semiquot α) (s : Set α) (h : q.s ⊆ s) : blur s q = blur' q h := by\n  unfold blur <;> congr <;> exact Set.union_eq_self_of_subset_right h\n#align blur_eq_blur' blur_eq_blur'\n\n",
 "bind_def":
 "@[simp]\ntheorem bind_def {β} : ((· >>= ·) : Semiquot α → (α → Semiquot β) → Semiquot β) = bind :=\n  rfl\n#align bind_def bind_def\n\n",
 "Nonempty":
 "#print Nonempty /-\ntheorem Nonempty (q : Semiquot α) : q.s.nonempty :=\n  q.exists_mem\n#align nonempty Nonempty\n-/\n\n"}