{"not_le_iff_exists":
 "theorem not_le_iff_exists : ¬p ≤ q ↔ ∃ x ∈ p, x ∉ q :=\n  Set.not_subset\n#align not_le_iff_exists not_le_iff_exists\n\n",
 "mem_coe":
 "@[simp]\ntheorem mem_coe {x : B} : x ∈ (p : Set B) ↔ x ∈ p :=\n  iff.rfl\n#align mem_coe mem_coe\n\n",
 "lt_iff_le_and_exists":
 "theorem lt_iff_le_and_exists : p < q ↔ p ≤ q ∧ ∃ x ∈ q, x ∉ p := by rw [lt_iff_le_not_le, not_le_iff_exists]\n#align lt_iff_le_and_exists lt_iff_le_and_exists\n\n",
 "le_def":
 "-- `dangerous_instance` does not know that `B` is used only as an `out_param`\ntheorem le_def {S T : A} : S ≤ T ↔ ∀ ⦃x : B⦄, x ∈ S → x ∈ T :=\n  iff.rfl\n#align le_def le_def\n\n",
 "forall":
 "protected theorem forall {q : p → Prop} : (∀ x, q x) ↔ ∀ x ∈ p, q ⟨x, ‹_›⟩ :=\n  SetCoe.forall\n#align forall forall\n\n",
 "ext_iff":
 "theorem ext_iff : p = q ↔ ∀ x, x ∈ p ↔ x ∈ q :=\n  coe_injective.eq_iff.symm.trans Set.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext'_iff":
 "theorem ext'_iff : p = q ↔ (p : Set B) = q :=\n  coe_set_eq.symm\n#align ext'_iff ext'_iff\n\n",
 "ext'":
 "theorem ext' (h : (p : Set B) = q) : p = q :=\n  coe_injective h\n#align ext' ext'\n\n",
 "ext":
 "/-- Note: implementers of `set_like` must copy this lemma in order to tag it with `@[ext]`. -/\ntheorem ext (h : ∀ x, x ∈ p ↔ x ∈ q) : p = q :=\n  coe_injective <| Set.ext h\n#align ext ext\n\n",
 "exists_of_lt":
 "theorem exists_of_lt : p < q → ∃ x ∈ q, x ∉ p :=\n  Set.exists_of_ssubset\n#align exists_of_lt exists_of_lt\n\n",
 "exists":
 "protected theorem exists {q : p → Prop} : (∃ x, q x) ↔ ∃ x ∈ p, q ⟨x, ‹_›⟩ :=\n  SetCoe.exists\n#align exists exists\n\n",
 "eta":
 "@[simp]\nprotected theorem eta (x : p) (hx : (x : B) ∈ p) : (⟨x, hx⟩ : p) = x :=\n  Subtype.eta x hx\n#align eta eta\n\n",
 "coe_subset_coe":
 "@[simp, norm_cast]\ntheorem coe_subset_coe {S T : A} : (S : Set B) ⊆ T ↔ S ≤ T :=\n  iff.rfl\n#align coe_subset_coe coe_subset_coe\n\n",
 "coe_strict_mono":
 "@[mono]\ntheorem coe_strict_mono : StrictMono (coe : A → Set B) := fun a b => coe_ssubset_coe.mpr\n#align coe_strict_mono coe_strict_mono\n\n",
 "coe_ssubset_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp, norm_cast]\ntheorem coe_ssubset_coe {S T : A} : «expr ⊂ » (S : Set B) T ↔ S < T :=\n  iff.rfl\n#align coe_ssubset_coe coe_ssubset_coe\n\n",
 "coe_sort_coe":
 "/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n-- `dangerous_instance` does not know that `B` is used only as an `out_param`\n@[simp, norm_cast]\ntheorem coe_sort_coe : ((p : Set B) : Type _) = p :=\n  rfl\n#align coe_sort_coe coe_sort_coe\n\n",
 "coe_set_eq":
 "@[simp, norm_cast]\ntheorem coe_set_eq : (p : Set B) = q ↔ p = q :=\n  coe_injective.eq_iff\n#align coe_set_eq coe_set_eq\n\n",
 "coe_mono":
 "@[mono]\ntheorem coe_mono : Monotone (coe : A → Set B) := fun a b => coe_subset_coe.mpr\n#align coe_mono coe_mono\n\n",
 "coe_mk":
 "@[simp, norm_cast]\ntheorem coe_mk (x : B) (hx : x ∈ p) : ((⟨x, hx⟩ : p) : B) = x :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_mem":
 "@[simp]\ntheorem coe_mem (x : p) : (x : B) ∈ p :=\n  x.2\n#align coe_mem coe_mem\n\n",
 "coe_injective":
 "theorem coe_injective : function.injective (coe : A → Set B) := fun x y h => set_like.coe_injective' h\n#align coe_injective coe_injective\n\n",
 "coe_eq_coe":
 "@[simp, norm_cast]\ntheorem coe_eq_coe {x y : p} : (x : B) = y ↔ x = y :=\n  Subtype.ext_iff_val.symm\n#align coe_eq_coe coe_eq_coe\n\n"}