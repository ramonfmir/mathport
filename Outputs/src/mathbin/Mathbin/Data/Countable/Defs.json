{"of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Countable.of_equiv /-\ntheorem Countable.of_equiv (α : Sort _) [Countable α] (e : «expr ≃ » α β) : Countable β :=\n  e.symm.injective.countable\n#align countable.of_equiv Countable.of_equiv\n-/\n\n",
 "exists_surjective_nat":
 "#print exists_surjective_nat /-\ntheorem exists_surjective_nat (α : Sort u) [Nonempty α] [Countable α] : ∃ f : ℕ → α, surjective f :=\n  let ⟨f, hf⟩ := exists_injective_nat α\n  ⟨invFun f, invFun_surjective hf⟩\n#align exists_surjective_nat exists_surjective_nat\n-/\n\n",
 "countable_iff_exists_surjective":
 "#print countable_iff_exists_surjective /-\ntheorem countable_iff_exists_surjective [Nonempty α] : Countable α ↔ ∃ f : ℕ → α, surjective f :=\n  ⟨@exists_surjective_nat _ _, fun ⟨f, hf⟩ => hf.countable⟩\n#align countable_iff_exists_surjective countable_iff_exists_surjective\n-/\n\n",
 "countable_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.countable_iff /-\ntheorem Equiv.countable_iff (e : «expr ≃ » α β) : Countable α ↔ Countable β :=\n  ⟨fun h => @Countable.of_equiv _ _ h e, fun h => @Countable.of_equiv _ _ h e.symm⟩\n#align equiv.countable_iff Equiv.countable_iff\n-/\n\n",
 "countable":
 "#print Function.Surjective.countable /-\nprotected theorem Function.Surjective.countable [Countable α] {f : α → β} (hf : surjective f) : Countable β :=\n  (injective_surjInv hf).countable\n#align function.surjective.countable Function.Surjective.countable\n-/\n\n"}