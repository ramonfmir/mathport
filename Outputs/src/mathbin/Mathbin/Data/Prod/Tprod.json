{"snd_mk":
 "@[simp]\ntheorem snd_mk (i : ι) (l : list ι) (f : ∀ i, α i) : (tprod.mk (i :: l) f).2 = tprod.mk l f :=\n  rfl\n#align snd_mk snd_mk\n\n",
 "mk_preimage_tprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem mk_preimage_tprod :\n    ∀ (l : list ι) (t : ∀ i, set (α i)), «expr ⁻¹' » (tprod.mk l) (set.tprod l t) = { i | i ∈ l }.pi t\n  | [], t => by simp [set.tprod]\n  | i :: l, t => by\n    ext f\n    have : f ∈ «expr ⁻¹' » (tprod.mk l) (set.tprod l t) ↔ f ∈ { x | x ∈ l }.pi t := by rw [mk_preimage_tprod l t]\n    change tprod.mk l f ∈ set.tprod l t ↔ ∀ i : ι, i ∈ l → f i ∈ t i at this\n    -- `simp [set.tprod, tprod.mk, this]` can close this goal but is slow.\n    rw [set.tprod, tprod.mk, mem_preimage, mem_pi, prod_mk_mem_set_prod_eq]\n    simp_rw [mem_set_of_eq, mem_cons_iff]\n    rw [forall_eq_or_imp, and_congr_right_iff]\n    exact fun _ => this\n#align mk_preimage_tprod mk_preimage_tprod\n\n",
 "mk_elim":
 "theorem mk_elim (hnd : l.nodup) (h : ∀ i, i ∈ l) (v : tprod α l) : tprod.mk l (v.elim' h) = v :=\n  tprod.ext hnd fun i hi => by simp [elim_mk]\n#align mk_elim mk_elim\n\n",
 "fst_mk":
 "/-\nCopyright (c) 2020 Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn\n-/\n@[simp]\ntheorem fst_mk (i : ι) (l : list ι) (f : ∀ i, α i) : (tprod.mk (i :: l) f).1 = f i :=\n  rfl\n#align fst_mk fst_mk\n\n",
 "ext":
 "@[ext]\ntheorem ext : ∀ {l : list ι} (hl : l.nodup) {v w : tprod α l} (hvw : ∀ (i) (hi : i ∈ l), v.elim hi = w.elim hi), v = w\n  | [], hl, v, w, hvw => punit.ext\n  | i :: is, hl, v, w, hvw => by\n    ext; rw [← elim_self v, hvw, elim_self]\n    refine' ext (nodup_cons.mp hl).2 fun j hj => _\n    rw [← elim_of_mem hl, hvw, elim_of_mem hl]\n#align ext ext\n\n",
 "elim_self":
 "@[simp]\ntheorem elim_self (v : tprod α (i :: l)) : v.elim (l.mem_cons_self i) = v.1 := by simp [tprod.elim]\n#align elim_self elim_self\n\n",
 "elim_preimage_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem elim_preimage_pi [decidable_eq ι] {l : list ι} (hnd : l.nodup) (h : ∀ i, i ∈ l) (t : ∀ i, set (α i)) :\n    «expr ⁻¹' » (tprod.elim' h) (pi univ t) = set.tprod l t :=\n  by\n  have : { i | i ∈ l } = univ := by\n    ext i\n    simp [h]\n  rw [← this, ← mk_preimage_tprod, preimage_preimage]\n  convert preimage_id\n  simp [tprod.mk_elim hnd h, id_def]\n#align elim_preimage_pi elim_preimage_pi\n\n",
 "elim_of_ne":
 "@[simp]\ntheorem elim_of_ne (hj : j ∈ i :: l) (hji : j ≠ i) (v : tprod α (i :: l)) :\n    v.elim hj = tprod.elim v.2 (hj.resolve_left hji) := by simp [tprod.elim, hji]\n#align elim_of_ne elim_of_ne\n\n",
 "elim_of_mem":
 "@[simp]\ntheorem elim_of_mem (hl : (i :: l).nodup) (hj : j ∈ l) (v : tprod α (i :: l)) :\n    v.elim (mem_cons_of_mem _ hj) = tprod.elim v.2 hj :=\n  by\n  apply elim_of_ne\n  rintro rfl\n  exact hl.not_mem hj\n#align elim_of_mem elim_of_mem\n\n",
 "elim_mk":
 "theorem elim_mk : ∀ (l : list ι) (f : ∀ i, α i) {i : ι} (hi : i ∈ l), (tprod.mk l f).elim hi = f i\n  | i :: is, f, j, hj => by\n    by_cases hji : j = i\n    · subst hji\n      simp\n    · rw [elim_of_ne _ hji, snd_mk, elim_mk]\n#align elim_mk elim_mk\n\n"}