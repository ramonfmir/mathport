{"trans":
 "@[trans]\ntheorem lex.trans {r : α → α → Prop} {s : β → β → Prop} [is_trans α r] [is_trans β s] :\n    ∀ {x y z : α × β}, prod.lex r s x y → prod.lex r s y z → prod.lex r s x z\n  | (x₁, x₂), (y₁, y₂), (z₁, z₂), lex.left _ _ hxy₁, lex.left _ _ hyz₁ => lex.left _ _ (trans hxy₁ hyz₁)\n  | (x₁, x₂), (y₁, y₂), (z₁, z₂), lex.left _ _ hxy₁, lex.right _ hyz₂ => lex.left _ _ hxy₁\n  | (x₁, x₂), (y₁, y₂), (z₁, z₂), lex.right _ _, lex.left _ _ hyz₁ => lex.left _ _ hyz₁\n  | (x₁, x₂), (y₁, y₂), (z₁, z₂), lex.right _ hxy₂, lex.right _ hyz₂ => lex.right _ (trans hxy₂ hyz₂)\n#align lex.trans lex.trans\n\n",
 "swap_swap_eq":
 "@[simp]\ntheorem swap_swap_eq : swap ∘ swap = @id (α × β) :=\n  funext swap_swap\n#align swap_swap_eq swap_swap_eq\n\n",
 "swap_swap":
 "@[simp]\ntheorem swap_swap : ∀ x : α × β, swap (swap x) = x\n  | ⟨a, b⟩ => rfl\n#align swap_swap swap_swap\n\n",
 "swap_surjective":
 "theorem swap_surjective : function.surjective (@swap α β) :=\n  swap_leftInverse.surjective\n#align swap_surjective swap_surjective\n\n",
 "swap_right_inverse":
 "@[simp]\ntheorem swap_right_inverse : function.right_inverse (@swap α β) swap :=\n  swap_swap\n#align swap_right_inverse swap_right_inverse\n\n",
 "swap_prod_mk":
 "@[simp]\ntheorem swap_prod_mk {a : α} {b : β} : swap (a, b) = (b, a) :=\n  rfl\n#align swap_prod_mk swap_prod_mk\n\n",
 "swap_left_inverse":
 "@[simp]\ntheorem swap_left_inverse : function.left_inverse (@swap α β) swap :=\n  swap_swap\n#align swap_left_inverse swap_left_inverse\n\n",
 "swap_injective":
 "theorem swap_injective : function.injective (@swap α β) :=\n  swap_leftInverse.injective\n#align swap_injective swap_injective\n\n",
 "swap_inj":
 "@[simp]\ntheorem swap_inj {p q : α × β} : swap p = swap q ↔ p = q :=\n  swap_injective.eq_iff\n#align swap_inj swap_inj\n\n",
 "swap_bijective":
 "theorem swap_bijective : function.bijective (@swap α β) :=\n  ⟨swap_injective, swap_surjective⟩\n#align swap_bijective swap_bijective\n\n",
 "snd_swap":
 "@[simp]\ntheorem snd_swap {p : α × β} : (swap p).2 = p.1 :=\n  rfl\n#align snd_swap snd_swap\n\n",
 "snd_surjective":
 "theorem snd_surjective [h : nonempty α] : function.surjective (@snd α β) := fun y => h.elim fun x => ⟨⟨x, y⟩, rfl⟩\n#align snd_surjective snd_surjective\n\n",
 "snd_injective":
 "theorem snd_injective [subsingleton α] : function.injective (@snd α β) := fun x y h => ext (subsingleton.elim _ _) h\n#align snd_injective snd_injective\n\n",
 "snd_eq_iff":
 "theorem snd_eq_iff : ∀ {p : α × β} {x : β}, p.2 = x ↔ p = (p.1, x)\n  | ⟨a, b⟩, x => by simp\n#align snd_eq_iff snd_eq_iff\n\n",
 "snd_comp_mk":
 "@[simp]\ntheorem snd_comp_mk (x : α) : prod.snd ∘ (prod.mk x : β → α × β) = id :=\n  rfl\n#align snd_comp_mk snd_comp_mk\n\n",
 "refl_right":
 "@[refl]\ntheorem lex.refl_right (r : α → α → Prop) (s : β → β → Prop) [is_refl β s] : ∀ x, prod.lex r s x x\n  | (x₁, x₂) => lex.right _ (refl _)\n#align lex.refl_right lex.refl_right\n\n",
 "refl_left":
 "@[refl]\ntheorem lex.refl_left (r : α → α → Prop) (s : β → β → Prop) [is_refl α r] : ∀ x, prod.lex r s x x\n  | (x₁, x₂) => lex.left _ _ (refl _)\n#align lex.refl_left lex.refl_left\n\n",
 "prod_map":
 "theorem involutive.prod_map {f : α → α} {g : β → β} : involutive f → involutive g → involutive (map f g) :=\n  left_inverse.prod_map\n#align involutive.prod_map involutive.prod_map\n\n",
 "mk_inj_right":
 "theorem mk_inj_right : (a₁, b) = (a₂, b) ↔ a₁ = a₂ :=\n  (mk.inj_right _).eq_iff\n#align mk_inj_right mk_inj_right\n\n",
 "mk_inj_left":
 "theorem mk_inj_left : (a, b₁) = (a, b₂) ↔ b₁ = b₂ :=\n  (mk.inj_left _).eq_iff\n#align mk_inj_left mk_inj_left\n\n",
 "map_snd'":
 "theorem map_snd' (f : α → γ) (g : β → δ) : prod.snd ∘ map f g = g ∘ prod.snd :=\n  funext <| map_snd f g\n#align map_snd' map_snd'\n\n",
 "map_snd":
 "theorem map_snd (f : α → γ) (g : β → δ) (p : α × β) : (map f g p).2 = g p.2 :=\n  rfl\n#align map_snd map_snd\n\n",
 "map_mk":
 "@[simp]\ntheorem map_mk (f : α → γ) (g : β → δ) (a : α) (b : β) : map f g (a, b) = (f a, g b) :=\n  rfl\n#align map_mk map_mk\n\n",
 "map_map":
 "/-- Composing a `prod.map` with another `prod.map` is equal to\na single `prod.map` of composed functions, fully applied.\n-/\ntheorem map_map {ε ζ : Type _} (f : α → β) (f' : γ → δ) (g : β → ε) (g' : δ → ζ) (x : α × γ) :\n    prod.map g g' (prod.map f f' x) = prod.map (g ∘ f) (g' ∘ f') x :=\n  rfl\n#align map_map map_map\n\n",
 "map_id":
 "theorem map_id : prod.map (@id α) (@id β) = id :=\n  id_prod\n#align map_id map_id\n\n",
 "map_fst'":
 "theorem map_fst' (f : α → γ) (g : β → δ) : prod.fst ∘ map f g = f ∘ prod.fst :=\n  funext <| map_fst f g\n#align map_fst' map_fst'\n\n",
 "map_fst":
 "theorem map_fst (f : α → γ) (g : β → δ) (p : α × β) : (map f g p).1 = f p.1 :=\n  rfl\n#align map_fst map_fst\n\n",
 "map_def":
 "theorem map_def {f : α → γ} {g : β → δ} : prod.map f g = fun p : α × β => (f p.1, g p.2) :=\n  funext fun p => ext (map_fst f g p) (map_snd f g p)\n#align map_def map_def\n\n",
 "map_comp_map":
 "/-- Composing a `prod.map` with another `prod.map` is equal to\na single `prod.map` of composed functions.\n-/\ntheorem map_comp_map {ε ζ : Type _} (f : α → β) (f' : γ → δ) (g : β → ε) (g' : δ → ζ) :\n    prod.map g g' ∘ prod.map f f' = prod.map (g ∘ f) (g' ∘ f') :=\n  rfl\n#align map_comp_map map_comp_map\n\n",
 "lex_iff":
 "theorem lex_iff : lex r s x y ↔ r x.1 y.1 ∨ x.1 = y.1 ∧ s x.2 y.2 :=\n  lex_def _ _\n#align lex_iff lex_iff\n\n",
 "lex_def":
 "theorem lex_def (r : α → α → Prop) (s : β → β → Prop) {p q : α × β} :\n    prod.lex r s p q ↔ r p.1 q.1 ∨ p.1 = q.1 ∧ s p.2 q.2 :=\n  ⟨fun h => by cases h <;> simp [*], fun h =>\n    match p, q, h with\n    | (a, b), (c, d), or.inl h => lex.left _ _ h\n    | (a, b), (c, d), or.inr ⟨e, h⟩ => by change a = c at e <;> subst e <;> exact lex.right _ h⟩\n#align lex_def lex_def\n\n",
 "inj_right":
 "theorem mk.inj_right {α β : Type _} (b : β) : function.injective (fun a => prod.mk a b : α → α × β) :=\n  by\n  intro b₁ b₂ h\n  · simpa only [and_true_iff, eq_self_iff_true, mk.inj_iff] using h\n#align mk.inj_right mk.inj_right\n\n",
 "inj_left":
 "theorem mk.inj_left {α β : Type _} (a : α) : function.injective (prod.mk a : β → α × β) :=\n  by\n  intro b₁ b₂ h\n  simpa only [true_and_iff, prod.mk.inj_iff, eq_self_iff_true] using h\n#align mk.inj_left mk.inj_left\n\n",
 "inj_iff":
 "@[simp]\ntheorem mk.inj_iff : (a₁, b₁) = (a₂, b₂) ↔ a₁ = a₂ ∧ b₁ = b₂ :=\n  ⟨prod.mk.inj, by cc⟩\n#align mk.inj_iff mk.inj_iff\n\n",
 "id_prod":
 "theorem id_prod : (fun p : α × β => (p.1, p.2)) = id :=\n  funext fun ⟨a, b⟩ => rfl\n#align id_prod id_prod\n\n",
 "fst_swap":
 "@[simp]\ntheorem fst_swap {p : α × β} : (swap p).1 = p.2 :=\n  rfl\n#align fst_swap fst_swap\n\n",
 "fst_surjective":
 "theorem fst_surjective [h : nonempty β] : function.surjective (@fst α β) := fun x => h.elim fun y => ⟨⟨x, y⟩, rfl⟩\n#align fst_surjective fst_surjective\n\n",
 "fst_injective":
 "theorem fst_injective [subsingleton β] : function.injective (@fst α β) := fun x y h => ext h (subsingleton.elim _ _)\n#align fst_injective fst_injective\n\n",
 "fst_eq_iff":
 "theorem fst_eq_iff : ∀ {p : α × β} {x : α}, p.1 = x ↔ p = (x, p.2)\n  | ⟨a, b⟩, x => by simp\n#align fst_eq_iff fst_eq_iff\n\n",
 "fst_comp_mk":
 "@[simp]\ntheorem fst_comp_mk (x : α) : prod.fst ∘ (prod.mk x : β → α × β) = function.const β x :=\n  rfl\n#align fst_comp_mk fst_comp_mk\n\n",
 "forall'":
 "theorem forall' {p : α → β → Prop} : (∀ x : α × β, p x.1 x.2) ↔ ∀ a b, p a b :=\n  prod.forall\n#align forall' forall'\n\n",
 "forall":
 "@[simp]\ntheorem forall {p : α × β → Prop} : (∀ x, p x) ↔ ∀ a b, p (a, b) :=\n  ⟨fun h a b => h (a, b), fun h ⟨a, b⟩ => h a b⟩\n#align forall forall\n\n",
 "ext_iff":
 "theorem ext_iff {p q : α × β} : p = q ↔ p.1 = q.1 ∧ p.2 = q.2 := by rw [← @mk.eta _ _ p, ← @mk.eta _ _ q, mk.inj_iff]\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext {α β} {p q : α × β} (h₁ : p.1 = q.1) (h₂ : p.2 = q.2) : p = q :=\n  ext_iff.2 ⟨h₁, h₂⟩\n#align ext ext\n\n",
 "exists'":
 "theorem exists' {p : α → β → Prop} : (∃ x : α × β, p x.1 x.2) ↔ ∃ a b, p a b :=\n  prod.exists\n#align exists' exists'\n\n",
 "exists":
 "@[simp]\ntheorem exists {p : α × β → Prop} : (∃ x, p x) ↔ ∃ a b, p (a, b) :=\n  ⟨fun ⟨⟨a, b⟩, h⟩ => ⟨a, b, h⟩, fun ⟨a, b, h⟩ => ⟨⟨a, b⟩, h⟩⟩\n#align exists exists\n\n",
 "eq_iff_fst_eq_snd_eq":
 "theorem eq_iff_fst_eq_snd_eq : ∀ {p q : α × β}, p = q ↔ p.1 = q.1 ∧ p.2 = q.2\n  | ⟨p₁, p₂⟩, ⟨q₁, q₂⟩ => by simp\n#align eq_iff_fst_eq_snd_eq eq_iff_fst_eq_snd_eq\n\n",
 "Prod_map":
 "#print Prod_map /-\n/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\n@[simp]\ntheorem Prod_map (f : α → γ) (g : β → δ) (p : α × β) : prod.map f g p = (f p.1, g p.2) :=\n  rfl\n#align prod_map Prod_map\n-/\n\n"}