{"to_list_singleton":
 "@[simp]\ntheorem to_list_singleton (c : char) : (string.singleton c).to_list = [c] :=\n  rfl\n#align to_list_singleton to_list_singleton\n\n",
 "to_list_nonempty":
 "theorem to_list_nonempty : ∀ {s : string}, s ≠ string.empty → s.to_list = s.head :: (s.popn 1).to_list\n  | ⟨s⟩, h => by cases s <;> [cases h rfl, rfl]\n#align to_list_nonempty to_list_nonempty\n\n",
 "to_list_inv_as_string":
 "theorem list.to_list_inv_as_string (l : list char) : l.as_string.to_list = l :=\n  by\n  cases hl : l.as_string\n  exact string_imp.mk.inj hl.symm\n#align list.to_list_inv_as_string list.to_list_inv_as_string\n\n",
 "to_list_inj":
 "theorem to_list_inj : ∀ {s₁ s₂}, to_list s₁ = to_list s₂ ↔ s₁ = s₂\n  | ⟨s₁⟩, ⟨s₂⟩ => ⟨congr_arg _, congr_arg _⟩\n#align to_list_inj to_list_inj\n\n",
 "to_list_empty":
 "@[simp]\ntheorem to_list_empty : \"\".to_list = [] :=\n  rfl\n#align to_list_empty to_list_empty\n\n",
 "popn_empty":
 "@[simp]\ntheorem popn_empty {n : ℕ} : \"\".popn n = \"\" := by\n  induction' n with n hn\n  · rfl\n  · rcases hs : \"\" with ⟨_ | ⟨hd, tl⟩⟩\n    · rw [hs] at hn\n      conv_rhs => rw [← hn]\n      simp only [popn, mk_iterator, iterator.nextn, iterator.next]\n    · simpa only [← to_list_inj] using hs\n#align popn_empty popn_empty\n\n",
 "nil_as_string_eq_empty":
 "theorem nil_as_string_eq_empty : [].as_string = \"\" :=\n  rfl\n#align nil_as_string_eq_empty nil_as_string_eq_empty\n\n",
 "lt_iff_to_list_lt":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n-- short-circuit type class inference\n@[simp]\ntheorem lt_iff_to_list_lt : ∀ {s₁ s₂ : string}, s₁ < s₂ ↔ s₁.to_list < s₂.to_list\n  | ⟨i₁⟩, ⟨i₂⟩ => by\n    suffices ∀ {p₁ p₂ s₁ s₂}, ltb ⟨p₁, s₁⟩ ⟨p₂, s₂⟩ ↔ s₁ < s₂ from this\n    intros\n    induction' s₁ with a s₁ IH generalizing p₁ p₂ s₂ <;> cases' s₂ with b s₂ <;> rw [ltb] <;> simp [iterator.has_next]\n    · rfl\n    · exact iff_of_true rfl List.Lex.nil\n    · exact iff_of_false bool.ff_ne_tt (not_lt_of_lt List.Lex.nil)\n    · dsimp [iterator.has_next, iterator.curr, iterator.next]\n      split_ifs\n      · subst b\n        exact IH.trans list.lex.cons_iff.symm\n      · simp\n        refine' ⟨List.Lex.rel, fun e => _⟩\n        cases e\n        · cases h rfl\n        assumption\n#align lt_iff_to_list_lt lt_iff_to_list_lt\n\n",
 "length_to_list":
 "@[simp]\ntheorem string.length_to_list (s : string) : s.to_list.length = s.length := by\n  rw [← string.as_string_inv_to_list s, list.to_list_inv_as_string, list.length_as_string]\n#align string.length_to_list string.length_to_list\n\n",
 "length_as_string":
 "@[simp]\ntheorem list.length_as_string (l : list char) : l.as_string.length = l.length :=\n  rfl\n#align list.length_as_string list.length_as_string\n\n",
 "le_iff_to_list_le":
 "-- short-circuit type class inference\n@[simp]\ntheorem le_iff_to_list_le {s₁ s₂ : string} : s₁ ≤ s₂ ↔ s₁.to_list ≤ s₂.to_list :=\n  (not_congr lt_iff_to_list_lt).trans not_lt\n#align le_iff_to_list_le le_iff_to_list_le\n\n",
 "head_empty":
 "@[simp]\ntheorem head_empty : \"\".head = default :=\n  rfl\n#align head_empty head_empty\n\n",
 "as_string_inv_to_list":
 "theorem as_string_inv_to_list (s : string) : s.to_list.as_string = s :=\n  by\n  cases s\n  rfl\n#align as_string_inv_to_list as_string_inv_to_list\n\n",
 "as_string_inj":
 "@[simp]\ntheorem list.as_string_inj {l l' : list char} : l.as_string = l'.as_string ↔ l = l' :=\n  ⟨fun h => by rw [← list.to_list_inv_as_string l, ← list.to_list_inv_as_string l', to_list_inj, h], fun h => h ▸ rfl⟩\n#align list.as_string_inj list.as_string_inj\n\n",
 "as_string_eq":
 "theorem list.as_string_eq {l : list char} {s : string} : l.as_string = s ↔ l = s.to_list := by\n  rw [← as_string_inv_to_list s, list.as_string_inj, as_string_inv_to_list s]\n#align list.as_string_eq list.as_string_eq\n\n"}