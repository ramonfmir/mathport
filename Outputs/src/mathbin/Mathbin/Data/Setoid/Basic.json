{"trans'":
 "@[trans]\ntheorem trans' (r : setoid α) : ∀ {x y z}, r.rel x y → r.rel y z → r.rel x z := fun _ _ _ hx => r.2.2.2 hx\n#align trans' trans'\n\n",
 "top_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem top_def : («expr⊤» : setoid α).rel = «expr⊤» :=\n  rfl\n#align top_def top_def\n\n",
 "symm'":
 "@[symm]\ntheorem symm' (r : setoid α) : ∀ {x y}, r.rel x y → r.rel y x := fun _ _ h => r.2.2.1 h\n#align symm' symm'\n\n",
 "sup_eq_eqv_gen":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-- The supremum of two equivalence relations r and s is the equivalence closure of the binary\n    relation `x is related to y by r or s`. -/\ntheorem sup_eq_eqv_gen (r s : setoid α) : «expr ⊔ » r s = EqvGen.Setoid fun x y => r.rel x y ∨ s.rel x y :=\n  by\n  rw [eqv_gen_eq]\n  apply congr_arg Inf\n  simp only [le_def, or_imp, ← forall_and]\n#align sup_eq_eqv_gen sup_eq_eqv_gen\n\n",
 "sup_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-- The supremum of 2 equivalence relations r and s is the equivalence closure of the\n    supremum of the underlying binary operations. -/\ntheorem sup_def {r s : setoid α} : «expr ⊔ » r s = EqvGen.Setoid («expr ⊔ » r.rel s.rel) := by\n  rw [sup_eq_eqv_gen] <;> rfl\n#align sup_def sup_def\n\n",
 "subsingleton_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print Quot.subsingleton_iff /-\ntheorem Quot.subsingleton_iff (r : α → α → Prop) : subsingleton (Quot r) ↔ EqvGen r = «expr⊤» :=\n  by\n  simp only [subsingleton_iff, _root_.eq_top_iff, Pi.le_def, Pi.top_apply, forall_const]\n  refine' (surjective_quot_mk _).forall.trans (forall_congr' fun a => _)\n  refine' (surjective_quot_mk _).forall.trans (forall_congr' fun b => _)\n  rw [Quot.eq]\n  simp only [forall_const, le_Prop_eq]\n#align quot.subsingleton_iff Quot.subsingleton_iff\n-/\n\n",
 "refl'":
 "@[refl]\ntheorem refl' (r : setoid α) (x) : r.rel x x :=\n  r.2.1 x\n#align refl' refl'\n\n",
 "map_of_surjective_eq_map":
 "/-- A special case of the equivalence closure of an equivalence relation r equalling r. -/\ntheorem map_of_surjective_eq_map (h : ker f ≤ r) (hf : surjective f) : map r f = mapOfSurjective r f h hf := by\n  rw [← eqv_gen_of_setoid (map_of_surjective r f h hf)] <;> rfl\n#align map_of_surjective_eq_map map_of_surjective_eq_map\n\n",
 "lift_unique":
 "/-- The uniqueness part of the universal property for quotients of an arbitrary type. -/\ntheorem lift_unique {r : setoid α} {f : α → β} (H : r ≤ ker f) (g : quotient r → β) (Hg : f = g ∘ Quotient.mk') :\n    quotient.lift f H = g := by\n  ext ⟨x⟩\n  erw [Quotient.lift_mk f H, Hg]\n  rfl\n#align lift_unique lift_unique\n\n",
 "le_def":
 "theorem le_def {r s : setoid α} : r ≤ s ↔ ∀ {x y}, r.rel x y → s.rel x y :=\n  iff.rfl\n#align le_def le_def\n\n",
 "ker_mk_eq":
 "/-- The kernel of the quotient map induced by an equivalence relation r equals r. -/\n@[simp]\ntheorem ker_mk_eq (r : setoid α) : ker (@Quotient.mk' _ r) = r :=\n  ext' fun x y => Quotient.eq'\n#align ker_mk_eq ker_mk_eq\n\n",
 "ker_lift_injective":
 "/-- Given a map f from α to β, the natural map from the quotient of α by the kernel of f is\n    injective. -/\ntheorem ker_lift_injective (f : α → β) : injective (@quotient.lift _ _ (ker f) f fun _ _ h => h) := fun x y =>\n  Quotient.inductionOn₂' x y fun a b h => Quotient.sound' h\n#align ker_lift_injective ker_lift_injective\n\n",
 "ker_iff_mem_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- The elements related to x ∈ α by the kernel of f are those in the preimage of f(x) under f. -/\ntheorem ker_iff_mem_preimage {f : α → β} {x y} : (ker f).rel x y ↔ x ∈ «expr ⁻¹' » f {f y} :=\n  iff.rfl\n#align ker_iff_mem_preimage ker_iff_mem_preimage\n\n",
 "ker_eq_lift_of_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-- Given a map f from α to β, the kernel of f is the unique equivalence relation on α whose\n    induced map from the quotient of α to β is injective. -/\ntheorem ker_eq_lift_of_injective {r : setoid α} (f : α → β) (H : ∀ x y, r.rel x y → f x = f y)\n    (h : injective (quotient.lift f H)) : ker f = r :=\n  le_antisymm\n    (fun x y hk =>\n      quotient.exact <| h <| show quotient.lift f H («expr⟦ ⟧» x) = quotient.lift f H («expr⟦ ⟧» y) from hk)\n    H\n#align ker_eq_lift_of_injective ker_eq_lift_of_injective\n\n",
 "ker_def":
 "theorem ker_def {f : α → β} {x y : α} : (ker f).rel x y ↔ f x = f y :=\n  iff.rfl\n#align ker_def ker_def\n\n",
 "ker_apply_mk_out'":
 "theorem ker_apply_mk_out' {f : α → β} (a : α) : f (Quotient.mk'' a : quotient <| Setoid.ker f).out' = f a :=\n  @Quotient.mk_out' _ (Setoid.ker f) a\n#align ker_apply_mk_out' ker_apply_mk_out'\n\n",
 "ker_apply_mk_out":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem ker_apply_mk_out {f : α → β} (a : α) :\n    (f\n        haveI := Setoid.ker f\n        («expr⟦ ⟧» a).out) =\n      f a :=\n  @Quotient.mk_out _ (Setoid.ker f) a\n#align ker_apply_mk_out ker_apply_mk_out\n\n",
 "injective_iff_ker_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- A function from α to β is injective iff its kernel is the bottom element of the complete lattice\n    of equivalence relations on α. -/\ntheorem injective_iff_ker_bot (f : α → β) : injective f ↔ ker f = «expr⊥» :=\n  (@eq_bot_iff (setoid α) _ _ (ker f)).symm\n#align injective_iff_ker_bot injective_iff_ker_bot\n\n",
 "inf_iff_and":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_iff_and {r s : setoid α} {x y} : («expr ⊓ » r s).rel x y ↔ r.rel x y ∧ s.rel x y :=\n  iff.rfl\n#align inf_iff_and inf_iff_and\n\n",
 "inf_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/-- The infimum of 2 equivalence relations r and s is the same relation as the infimum\n    of the underlying binary operations. -/\ntheorem inf_def {r s : setoid α} : («expr ⊓ » r s).rel = «expr ⊓ » r.rel s.rel :=\n  rfl\n#align inf_def inf_def\n\n",
 "ext_iff":
 "theorem ext_iff {r s : setoid α} : r = s ↔ ∀ a b, r.rel a b ↔ s.rel a b :=\n  ⟨fun h a b => h ▸ iff.rfl, ext'⟩\n#align ext_iff ext_iff\n\n",
 "ext'":
 "@[ext]\ntheorem ext' {r s : setoid α} (H : ∀ a b, r.rel a b ↔ s.rel a b) : r = s :=\n  ext H\n#align ext' ext'\n\n",
 "eqv_gen_of_setoid":
 "/-- The equivalence closure of an equivalence relation r is r. -/\n@[simp]\ntheorem eqv_gen_of_setoid (r : setoid α) : EqvGen.Setoid r.r = r :=\n  le_antisymm (by rw [eqv_gen_eq] <;> exact infₛ_le fun _ _ => id) eqv_gen.rel\n#align eqv_gen_of_setoid eqv_gen_of_setoid\n\n",
 "eqv_gen_mono":
 "/-- Equivalence closure of binary relations is monotone. -/\ntheorem eqv_gen_mono {r s : α → α → Prop} (h : ∀ x y, r x y → s x y) : EqvGen.Setoid r ≤ EqvGen.Setoid s :=\n  eqvGen_le fun _ _ hr => eqv_gen.rel _ _ <| h _ _ hr\n#align eqv_gen_mono eqv_gen_mono\n\n",
 "eqv_gen_le":
 "/-- The equivalence closure of a binary relation r is contained in any equivalence\n    relation containing r. -/\ntheorem eqv_gen_le {r : α → α → Prop} {s : setoid α} (h : ∀ x y, r x y → s.rel x y) : EqvGen.Setoid r ≤ s := by\n  rw [eqv_gen_eq] <;> exact infₛ_le h\n#align eqv_gen_le eqv_gen_le\n\n",
 "eqv_gen_idem":
 "/-- Equivalence closure is idempotent. -/\n@[simp]\ntheorem eqv_gen_idem (r : α → α → Prop) : EqvGen.Setoid (EqvGen.Setoid r).rel = EqvGen.Setoid r :=\n  eqvGen_of_setoid _\n#align eqv_gen_idem eqv_gen_idem\n\n",
 "eqv_gen_eq":
 "/-- The inductively defined equivalence closure of a binary relation r is the infimum\n    of the set of all equivalence relations containing r. -/\ntheorem eqv_gen_eq (r : α → α → Prop) : EqvGen.Setoid r = infₛ { s : setoid α | ∀ ⦃x y⦄, r x y → s.rel x y } :=\n  le_antisymm\n    (fun _ _ H => eqv_gen.rec (fun _ _ h _ hs => hs h) (refl' _) (fun _ _ _ => symm' _) (fun _ _ _ _ _ => trans' _) H)\n    (infₛ_le fun _ _ h => eqv_gen.rel _ _ h)\n#align eqv_gen_eq eqv_gen_eq\n\n",
 "eq_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print eq_top_iff /-\ntheorem eq_top_iff {s : setoid α} : s = («expr⊤» : setoid α) ↔ ∀ x y : α, s.rel x y := by\n  simp [eq_top_iff, Setoid.le_def, Setoid.top_def, Pi.top_apply]\n#align eq_top_iff eq_top_iff\n-/\n\n",
 "eq_rel":
 "#print Quotient.eq_rel /-\n/-\nCopyright (c) 2019 Amelia Livingston. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Amelia Livingston, Bryan Gin-ge Chen\n-/\n/-- A version of `quotient.eq'` compatible with `setoid.rel`, to make rewriting possible. -/\ntheorem Quotient.eq_rel {r : setoid α} {x y} : (Quotient.mk'' x : quotient r) = Quotient.mk'' y ↔ r.rel x y :=\n  Quotient.eq'\n#align quotient.eq_rel Quotient.eq_rel\n-/\n\n",
 "eq_iff_rel_eq":
 "/-- Two equivalence relations are equal iff their underlying binary operations are equal. -/\ntheorem eq_iff_rel_eq {r₁ r₂ : setoid α} : r₁ = r₂ ↔ r₁.rel = r₂.rel :=\n  ⟨fun h => h ▸ rfl, fun h => Setoid.ext' fun x y => h ▸ iff.rfl⟩\n#align eq_iff_rel_eq eq_iff_rel_eq\n\n",
 "comm'":
 "theorem comm' (s : setoid α) {x y} : s.rel x y ↔ s.rel y x :=\n  ⟨s.symm', s.symm'⟩\n#align comm' comm'\n\n",
 "comap_rel":
 "theorem comap_rel (f : α → β) (r : setoid β) (x y : α) : (comap f r).rel x y ↔ r.rel (f x) (f y) :=\n  iff.rfl\n#align comap_rel comap_rel\n\n",
 "comap_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-- Given a map `f : N → M` and an equivalence relation `r` on `β`, the equivalence relation\n    induced on `α` by `f` equals the kernel of `r`'s quotient map composed with `f`. -/\ntheorem comap_eq {f : α → β} {r : setoid β} : comap f r = ker (@Quotient.mk' _ r ∘ f) :=\n  ext fun x y => show _ ↔ «expr⟦ ⟧» _ = «expr⟦ ⟧» _ by rw [Quotient.eq'] <;> rfl\n#align comap_eq comap_eq\n\n",
 "bot_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_def : («expr⊥» : setoid α).rel = (· = ·) :=\n  rfl\n#align bot_def bot_def\n\n",
 "Sup_eq_eqv_gen":
 "/-- The supremum of a set S of equivalence relations is the equivalence closure of the binary\n    relation `there exists r ∈ S relating x and y`. -/\ntheorem Sup_eq_eqv_gen (S : Set (setoid α)) : supₛ S = EqvGen.Setoid fun x y => ∃ r : setoid α, r ∈ S ∧ r.rel x y :=\n  by\n  rw [eqv_gen_eq]\n  apply congr_arg Inf\n  simp only [upperBounds, le_def, and_imp, exists_imp]\n  ext\n  exact ⟨fun H x y r hr => H hr, fun H r hr x y => H r hr⟩\n#align Sup_eq_eqv_gen Sup_eq_eqv_gen\n\n",
 "Sup_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- The supremum of a set of equivalence relations is the equivalence closure of the\n    supremum of the set's image under the map to the underlying binary operation. -/\ntheorem Sup_def {s : Set (setoid α)} : supₛ s = EqvGen.Setoid (supₛ («expr '' » Rel s)) :=\n  by\n  rw [Sup_eq_eqv_gen, supₛ_image]\n  congr with (x y)\n  simp only [supᵢ_apply, supᵢ_Prop_eq, exists_prop]\n#align Sup_def Sup_def\n\n",
 "Inf_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- The underlying binary operation of the infimum of a set of equivalence relations\n    is the infimum of the set's image under the map to the underlying binary operation. -/\ntheorem Inf_def {s : Set (setoid α)} : (infₛ s).rel = infₛ («expr '' » Rel s) :=\n  by\n  ext\n  simp only [infₛ_image, infᵢ_apply, infᵢ_Prop_eq]\n  rfl\n#align Inf_def Inf_def\n\n"}