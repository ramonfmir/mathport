{"union_mem_union":
 "theorem union_mem_union [Union α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma ∪ mb ∈ a ∪ b := by tidy\n#align union_mem_union union_mem_union\n\n",
 "union_get_eq":
 "@[simp]\ntheorem union_get_eq [Union α] (a b : Part α) (hab : dom (a ∪ b)) :\n    (a ∪ b).get hab = a.get (left_dom_of_union_dom hab) ∪ b.get (right_dom_of_union_dom hab) := by tidy\n#align union_get_eq union_get_eq\n\n",
 "to_option_is_some":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Jeremy Avigad, Simon Hudon\n-/\n@[simp]\ntheorem to_option_is_some (o : Part α) [decidable o.dom] : o.to_option.is_some ↔ o.dom := by\n  by_cases o.dom <;> simp [h, Part.toOption]\n#align to_option_is_some to_option_is_some\n\n",
 "to_option_is_none":
 "@[simp]\ntheorem to_option_is_none (o : Part α) [decidable o.dom] : o.to_option.is_none ↔ ¬o.dom := by\n  by_cases o.dom <;> simp [h, Part.toOption]\n#align to_option_is_none to_option_is_none\n\n",
 "to_option_eq_none_iff":
 "theorem to_option_eq_none_iff {a : Part α} [decidable a.dom] : a.to_option = option.none ↔ ¬a.dom :=\n  ne.dite_eq_right_iff fun h => option.some_ne_none _\n#align to_option_eq_none_iff to_option_eq_none_iff\n\n",
 "to_option":
 "protected theorem dom.to_option {o : Part α} [decidable o.dom] (h : o.dom) : o.to_option = o.get h :=\n  dif_pos h\n#align dom.to_option dom.to_option\n\n",
 "to_of_option":
 "@[simp]\ntheorem to_of_option (o : option α) : toOption (ofOption o) = o := by cases o <;> rfl\n#align to_of_option to_of_option\n\n",
 "subsingleton":
 "protected theorem subsingleton (o : Part α) : Set.Subsingleton { a | a ∈ o } := fun a ha b hb => mem_unique ha hb\n#align subsingleton subsingleton\n\n",
 "some_union_some":
 "theorem some_union_some [Union α] (a b : α) : some a ∪ some b = some (a ∪ b) := by tidy\n#align some_union_some some_union_some\n\n",
 "some_to_option":
 "@[simp]\ntheorem some_to_option (a : α) [decidable (some a).dom] : (some a).to_option = option.some a :=\n  dif_pos trivial\n#align some_to_option some_to_option\n\n",
 "some_sdiff_some":
 "theorem some_sdiff_some [SDiff α] (a b : α) : some a \\ some b = some (a \\ b) := by tidy\n#align some_sdiff_some some_sdiff_some\n\n",
 "some_ne_none":
 "@[simp]\ntheorem some_ne_none (x : α) : some x ≠ none := by\n  intro h\n  change none.dom\n  rw [← h]\n  trivial\n#align some_ne_none some_ne_none\n\n",
 "some_mul_some":
 "@[to_additive]\ntheorem some_mul_some [Mul α] (a b : α) : some a * some b = some (a * b) := by tidy\n#align some_mul_some some_mul_some\n\n",
 "some_mod_some":
 "theorem some_mod_some [Mod α] (a b : α) : some a % some b = some (a % b) := by tidy\n#align some_mod_some some_mod_some\n\n",
 "some_inter_some":
 "theorem some_inter_some [Inter α] (a b : α) : some a ∩ some b = some (a ∩ b) := by tidy\n#align some_inter_some some_inter_some\n\n",
 "some_injective":
 "theorem some_injective : injective (@Part.some α) := fun a b h => congr_fun (eq_of_heq (part.mk.inj h).2) trivial\n#align some_injective some_injective\n\n",
 "some_inj":
 "@[simp]\ntheorem some_inj {a b : α} : Part.some a = some b ↔ a = b :=\n  some_injective.eq_iff\n#align some_inj some_inj\n\n",
 "some_get":
 "@[simp]\ntheorem some_get {a : Part α} (ha : a.dom) : Part.some (part.get a ha) = a :=\n  eq.symm (eq_some_iff.2 ⟨ha, rfl⟩)\n#align some_get some_get\n\n",
 "some_dom":
 "@[simp]\ntheorem some_dom (a : α) : (some a).dom :=\n  trivial\n#align some_dom some_dom\n\n",
 "some_div_some":
 "@[to_additive]\ntheorem some_div_some [Div α] (a b : α) : some a / some b = some (a / b) := by tidy\n#align some_div_some some_div_some\n\n",
 "some_append_some":
 "theorem some_append_some [Append α] (a b : α) : some a ++ some b = some (a ++ b) := by tidy\n#align some_append_some some_append_some\n\n",
 "sdiff_mem_sdiff":
 "theorem sdiff_mem_sdiff [SDiff α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma \\ mb ∈ a \\ b := by tidy\n#align sdiff_mem_sdiff sdiff_mem_sdiff\n\n",
 "sdiff_get_eq":
 "@[simp]\ntheorem sdiff_get_eq [SDiff α] (a b : Part α) (hab : dom (a \\ b)) :\n    (a \\ b).get hab = a.get (left_dom_of_sdiff_dom hab) \\ b.get (right_dom_of_sdiff_dom hab) := by tidy\n#align sdiff_get_eq sdiff_get_eq\n\n",
 "right_dom_of_union_dom":
 "theorem right_dom_of_union_dom [Union α] {a b : Part α} (hab : dom (a ∪ b)) : b.dom := by tidy\n#align right_dom_of_union_dom right_dom_of_union_dom\n\n",
 "right_dom_of_sdiff_dom":
 "theorem right_dom_of_sdiff_dom [SDiff α] {a b : Part α} (hab : dom (a \\ b)) : b.dom := by tidy\n#align right_dom_of_sdiff_dom right_dom_of_sdiff_dom\n\n",
 "right_dom_of_mul_dom":
 "@[to_additive]\ntheorem right_dom_of_mul_dom [Mul α] {a b : Part α} (hab : dom (a * b)) : b.dom := by tidy\n#align right_dom_of_mul_dom right_dom_of_mul_dom\n\n",
 "right_dom_of_mod_dom":
 "theorem right_dom_of_mod_dom [Mod α] {a b : Part α} (hab : dom (a % b)) : b.dom := by tidy\n#align right_dom_of_mod_dom right_dom_of_mod_dom\n\n",
 "right_dom_of_inter_dom":
 "theorem right_dom_of_inter_dom [Inter α] {a b : Part α} (hab : dom (a ∩ b)) : b.dom := by tidy\n#align right_dom_of_inter_dom right_dom_of_inter_dom\n\n",
 "right_dom_of_div_dom":
 "@[to_additive]\ntheorem right_dom_of_div_dom [Div α] {a b : Part α} (hab : dom (a / b)) : b.dom := by tidy\n#align right_dom_of_div_dom right_dom_of_div_dom\n\n",
 "right_dom_of_append_dom":
 "theorem right_dom_of_append_dom [Append α] {a b : Part α} (hab : dom (a ++ b)) : b.dom := by tidy\n#align right_dom_of_append_dom right_dom_of_append_dom\n\n",
 "ret_eq_some":
 "@[simp]\ntheorem ret_eq_some (a : α) : return a = some a :=\n  rfl\n#align ret_eq_some ret_eq_some\n\n",
 "pure_eq_some":
 "@[simp]\ntheorem pure_eq_some (a : α) : pure a = some a :=\n  rfl\n#align pure_eq_some pure_eq_some\n\n",
 "one_mem_one":
 "-- We define several instances for constants and operations on `part α` inherited from `α`.\n@[to_additive]\ntheorem one_mem_one [One α] : (1 : α) ∈ (1 : Part α) :=\n  ⟨trivial, rfl⟩\n#align one_mem_one one_mem_one\n\n",
 "of_to_option":
 "@[simp]\ntheorem of_to_option (o : Part α) [decidable o.dom] : ofOption (toOption o) = o :=\n  ext fun a => mem_ofOption.trans mem_toOption\n#align of_to_option of_to_option\n\n",
 "of_option_eq_get":
 "theorem of_option_eq_get {α} (o : option α) : ofOption o = ⟨_, @option.get _ o⟩ :=\n  Part.ext' (ofOption_dom o) fun h₁ h₂ => by cases o <;> [cases h₁, rfl]\n#align of_option_eq_get of_option_eq_get\n\n",
 "of_option_dom":
 "@[simp]\ntheorem of_option_dom {α} : ∀ o : option α, (ofOption o).dom ↔ o.is_some\n  | option.none => by simp [of_option, none]\n  | option.some a => by simp [of_option]\n#align of_option_dom of_option_dom\n\n",
 "of_bind":
 "theorem dom.of_bind {f : α → Part β} {a : Part α} (h : (a.bind f).dom) : a.dom :=\n  h.some\n#align dom.of_bind dom.of_bind\n\n",
 "not_none_dom":
 "@[simp]\ntheorem not_none_dom : ¬(none : Part α).dom :=\n  id\n#align not_none_dom not_none_dom\n\n",
 "not_mem_none":
 "@[simp]\ntheorem not_mem_none (a : α) : a ∉ @none α := fun h => h.fst\n#align not_mem_none not_mem_none\n\n",
 "none_to_option":
 "@[simp]\ntheorem none_to_option [decidable (@none α).dom] : (none : Part α).to_option = option.none :=\n  dif_neg id\n#align none_to_option none_to_option\n\n",
 "none_ne_some":
 "@[simp]\ntheorem none_ne_some (x : α) : none ≠ some x :=\n  (some_ne_none x).symm\n#align none_ne_some none_ne_some\n\n",
 "ne_none_iff":
 "theorem ne_none_iff {o : Part α} : o ≠ none ↔ ∃ x, o = some x :=\n  by\n  constructor\n  · rw [ne, eq_none_iff', not_not]\n    exact fun h => ⟨o.get h, eq_some_iff.2 (get_mem h)⟩\n  · rintro ⟨x, rfl⟩\n    apply some_ne_none\n#align ne_none_iff ne_none_iff\n\n",
 "mul_mem_mul":
 "@[to_additive]\ntheorem mul_mem_mul [Mul α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma * mb ∈ a * b := by tidy\n#align mul_mem_mul mul_mem_mul\n\n",
 "mul_get_eq":
 "@[simp, to_additive]\ntheorem mul_get_eq [Mul α] (a b : Part α) (hab : dom (a * b)) :\n    (a * b).get hab = a.get (left_dom_of_mul_dom hab) * b.get (right_dom_of_mul_dom hab) := by tidy\n#align mul_get_eq mul_get_eq\n\n",
 "mod_mem_mod":
 "theorem mod_mem_mod [Mod α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma % mb ∈ a % b := by tidy\n#align mod_mem_mod mod_mem_mod\n\n",
 "mod_get_eq":
 "@[simp]\ntheorem mod_get_eq [Mod α] (a b : Part α) (hab : dom (a % b)) :\n    (a % b).get hab = a.get (left_dom_of_mod_dom hab) % b.get (right_dom_of_mod_dom hab) := by tidy\n#align mod_get_eq mod_get_eq\n\n",
 "mem_unique":
 "theorem mem_unique : ∀ {a b : α} {o : Part α}, a ∈ o → b ∈ o → a = b\n  | _, _, ⟨p, f⟩, ⟨h₁, rfl⟩, ⟨h₂, rfl⟩ => rfl\n#align mem_unique mem_unique\n\n",
 "mem_to_option":
 "@[simp]\ntheorem mem_to_option {o : Part α} [decidable o.dom] {a : α} : a ∈ toOption o ↔ a ∈ o :=\n  by\n  unfold to_option\n  by_cases h : o.dom <;> simp [h]\n  · exact ⟨fun h => ⟨_, h⟩, fun ⟨_, h⟩ => h⟩\n  · exact mt Exists.fst h\n#align mem_to_option mem_to_option\n\n",
 "mem_some_iff":
 "@[simp]\ntheorem mem_some_iff {a b} : b ∈ (some a : Part α) ↔ b = a :=\n  ⟨fun ⟨h, e⟩ => e.symm, fun e => ⟨trivial, e.symm⟩⟩\n#align mem_some_iff mem_some_iff\n\n",
 "mem_some":
 "theorem mem_some (a : α) : a ∈ some a :=\n  ⟨trivial, rfl⟩\n#align mem_some mem_some\n\n",
 "mem_restrict":
 "@[simp]\ntheorem mem_restrict (p : Prop) (o : Part α) (h : p → o.dom) (a : α) : a ∈ restrict p o h ↔ p ∧ a ∈ o :=\n  by\n  dsimp [restrict, mem_eq]; constructor\n  · rintro ⟨h₀, h₁⟩\n    exact ⟨h₀, ⟨_, h₁⟩⟩\n  rintro ⟨h₀, h₁, h₂⟩; exact ⟨h₀, h₂⟩\n#align mem_restrict mem_restrict\n\n",
 "mem_of_option":
 "@[simp]\ntheorem mem_of_option {a : α} : ∀ {o : option α}, a ∈ ofOption o ↔ a ∈ o\n  | option.none => ⟨fun h => h.fst.elim, fun h => option.no_confusion h⟩\n  | option.some b => ⟨fun h => congr_arg option.some h.snd, fun h => ⟨trivial, option.some.inj h⟩⟩\n#align mem_of_option mem_of_option\n\n",
 "mem_mk_iff":
 "@[simp]\ntheorem mem_mk_iff {p : Prop} {o : p → α} {a : α} : a ∈ part.mk p o ↔ ∃ h, o h = a :=\n  iff.rfl\n#align mem_mk_iff mem_mk_iff\n\n",
 "mem_map_iff":
 "@[simp]\ntheorem mem_map_iff (f : α → β) {o : Part α} {b} : b ∈ map f o ↔ ∃ a ∈ o, f a = b :=\n  ⟨match b with\n    | _, ⟨h, rfl⟩ => ⟨_, ⟨_, rfl⟩, rfl⟩,\n    fun ⟨a, h₁, h₂⟩ => h₂ ▸ mem_map f h₁⟩\n#align mem_map_iff mem_map_iff\n\n",
 "mem_map":
 "theorem mem_map (f : α → β) {o : Part α} : ∀ {a}, a ∈ o → f a ∈ map f o\n  | _, ⟨h, rfl⟩ => ⟨_, rfl⟩\n#align mem_map mem_map\n\n",
 "mem_eq":
 "theorem mem_eq (a : α) (o : Part α) : (a ∈ o) = ∃ h, o.get h = a :=\n  rfl\n#align mem_eq mem_eq\n\n",
 "mem_coe":
 "@[simp]\ntheorem mem_coe {a : α} {o : option α} : a ∈ (o : Part α) ↔ a ∈ o :=\n  mem_of_option\n#align mem_coe mem_coe\n\n",
 "mem_bind_iff":
 "@[simp]\ntheorem mem_bind_iff {f : Part α} {g : α → Part β} {b} : b ∈ f.bind g ↔ ∃ a ∈ f, b ∈ g a :=\n  ⟨match b with\n    | _, ⟨⟨h₁, h₂⟩, rfl⟩ => ⟨_, ⟨_, rfl⟩, ⟨_, rfl⟩⟩,\n    fun ⟨a, h₁, h₂⟩ => mem_bind h₁ h₂⟩\n#align mem_bind_iff mem_bind_iff\n\n",
 "mem_bind":
 "theorem mem_bind {f : Part α} {g : α → Part β} : ∀ {a b}, a ∈ f → b ∈ g a → b ∈ f.bind g\n  | _, _, ⟨h, rfl⟩, ⟨h₂, rfl⟩ => ⟨⟨h, h₂⟩, rfl⟩\n#align mem_bind mem_bind\n\n",
 "mem_assert_iff":
 "@[simp]\ntheorem mem_assert_iff {p : Prop} {f : p → Part α} {a} : a ∈ assert p f ↔ ∃ h : p, a ∈ f h :=\n  ⟨match a with\n    | _, ⟨h, rfl⟩ => ⟨_, ⟨_, rfl⟩⟩,\n    fun ⟨a, h⟩ => mem_assert _ h⟩\n#align mem_assert_iff mem_assert_iff\n\n",
 "mem_assert":
 "theorem mem_assert {p : Prop} {f : p → Part α} : ∀ {a} (h : p), a ∈ f h → a ∈ assert p f\n  | _, x, ⟨h, rfl⟩ => ⟨⟨x, h⟩, rfl⟩\n#align mem_assert mem_assert\n\n",
 "map_some":
 "@[simp]\ntheorem map_some (f : α → β) (a : α) : map f (some a) = some (f a) :=\n  eq_some_iff.2 <| mem_map f <| mem_some _\n#align map_some map_some\n\n",
 "map_none":
 "@[simp]\ntheorem map_none (f : α → β) : map f none = none :=\n  eq_none_iff.2 fun a => by simp\n#align map_none map_none\n\n",
 "map_map":
 "theorem map_map (g : β → γ) (f : α → β) (o : Part α) : map g (map f o) = map (g ∘ f) o := by\n  rw [← bind_some_eq_map, bind_map, bind_some_eq_map]\n#align map_map map_map\n\n",
 "map_id'":
 "theorem map_id' {f : α → α} (H : ∀ x : α, f x = x) (o) : map f o = o := by\n  rw [show f = id from funext H] <;> exact id_map o\n#align map_id' map_id'\n\n",
 "map_eq_map":
 "@[simp]\ntheorem map_eq_map {α β} (f : α → β) (o : Part α) : f <$> o = map f o :=\n  rfl\n#align map_eq_map map_eq_map\n\n",
 "map_bind":
 "#print map_bind /-\n@[simp]\ntheorem map_bind {γ} (f : α → Part β) (x : Part α) (g : β → γ) : map g (x.bind f) = x.bind fun y => map g (f y) := by\n  rw [← bind_some_eq_map, bind_assoc] <;> simp [bind_some_eq_map]\n#align map_bind map_bind\n-/\n\n",
 "left_unique":
 "theorem mem.left_unique : relator.left_unique ((· ∈ ·) : α → Part α → Prop) := fun a o b => mem_unique\n#align mem.left_unique mem.left_unique\n\n",
 "left_dom_of_union_dom":
 "theorem left_dom_of_union_dom [Union α] {a b : Part α} (hab : dom (a ∪ b)) : a.dom := by tidy\n#align left_dom_of_union_dom left_dom_of_union_dom\n\n",
 "left_dom_of_sdiff_dom":
 "theorem left_dom_of_sdiff_dom [SDiff α] {a b : Part α} (hab : dom (a \\ b)) : a.dom := by tidy\n#align left_dom_of_sdiff_dom left_dom_of_sdiff_dom\n\n",
 "left_dom_of_mul_dom":
 "@[to_additive]\ntheorem left_dom_of_mul_dom [Mul α] {a b : Part α} (hab : dom (a * b)) : a.dom := by tidy\n#align left_dom_of_mul_dom left_dom_of_mul_dom\n\n",
 "left_dom_of_mod_dom":
 "theorem left_dom_of_mod_dom [Mod α] {a b : Part α} (hab : dom (a % b)) : a.dom := by tidy\n#align left_dom_of_mod_dom left_dom_of_mod_dom\n\n",
 "left_dom_of_inter_dom":
 "theorem left_dom_of_inter_dom [Inter α] {a b : Part α} (hab : dom (a ∩ b)) : a.dom := by tidy\n#align left_dom_of_inter_dom left_dom_of_inter_dom\n\n",
 "left_dom_of_div_dom":
 "@[to_additive]\ntheorem left_dom_of_div_dom [Div α] {a b : Part α} (hab : dom (a / b)) : a.dom := by tidy\n#align left_dom_of_div_dom left_dom_of_div_dom\n\n",
 "left_dom_of_append_dom":
 "theorem left_dom_of_append_dom [Append α] {a b : Part α} (hab : dom (a ++ b)) : a.dom := by tidy\n#align left_dom_of_append_dom left_dom_of_append_dom\n\n",
 "le_total_of_le_of_le":
 "theorem le_total_of_le_of_le {x y : Part α} (z : Part α) (hx : x ≤ z) (hy : y ≤ z) : x ≤ y ∨ y ≤ x :=\n  by\n  rcases Part.eq_none_or_eq_some x with (h | ⟨b, h₀⟩)\n  · rw [h]\n    left\n    apply order_bot.bot_le _\n  right; intro b' h₁\n  rw [Part.eq_some_iff] at h₀\n  replace hx := hx _ h₀; replace hy := hy _ h₁\n  replace hx := Part.mem_unique hx hy; subst hx\n  exact h₀\n#align le_total_of_le_of_le le_total_of_le_of_le\n\n",
 "inv_some":
 "@[to_additive]\ntheorem inv_some [Inv α] (a : α) : (some a)⁻¹ = some a⁻¹ :=\n  rfl\n#align inv_some inv_some\n\n",
 "inv_mem_inv":
 "@[to_additive]\ntheorem inv_mem_inv [Inv α] (a : Part α) (ma : α) (ha : ma ∈ a) : ma⁻¹ ∈ a⁻¹ := by tidy\n#align inv_mem_inv inv_mem_inv\n\n",
 "inter_mem_inter":
 "theorem inter_mem_inter [Inter α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma ∩ mb ∈ a ∩ b := by tidy\n#align inter_mem_inter inter_mem_inter\n\n",
 "inter_get_eq":
 "@[simp]\ntheorem inter_get_eq [Inter α] (a b : Part α) (hab : dom (a ∩ b)) :\n    (a ∩ b).get hab = a.get (left_dom_of_inter_dom hab) ∩ b.get (right_dom_of_inter_dom hab) := by tidy\n#align inter_get_eq inter_get_eq\n\n",
 "induction_on":
 "@[elab_as_elim]\nprotected theorem induction_on {P : Part α → Prop} (a : Part α) (hnone : P none) (hsome : ∀ a : α, P (some a)) : P a :=\n  (classical.em a.dom).elim (fun h => Part.some_get h ▸ hsome _) fun h => (eq_none_iff'.2 h).symm ▸ hnone\n#align induction_on induction_on\n\n",
 "get_some":
 "@[simp]\ntheorem get_some {a : α} (ha : (some a).dom) : get (some a) ha = a :=\n  rfl\n#align get_some get_some\n\n",
 "get_or_else_some":
 "@[simp]\ntheorem get_or_else_some (a : α) (d : α) [decidable (some a).dom] : getOrElse (some a) d = a :=\n  (some a).get_or_else_of_dom (some_dom a) d\n#align get_or_else_some get_or_else_some\n\n",
 "get_or_else_of_not_dom":
 "theorem get_or_else_of_not_dom (a : Part α) (h : ¬a.dom) [decidable a.dom] (d : α) : getOrElse a d = d :=\n  dif_neg h\n#align get_or_else_of_not_dom get_or_else_of_not_dom\n\n",
 "get_or_else_of_dom":
 "theorem get_or_else_of_dom (a : Part α) (h : a.dom) [decidable a.dom] (d : α) : getOrElse a d = a.get h :=\n  dif_pos h\n#align get_or_else_of_dom get_or_else_of_dom\n\n",
 "get_or_else_none":
 "@[simp]\ntheorem get_or_else_none (d : α) [decidable (none : Part α).dom] : getOrElse none d = d :=\n  none.get_or_else_of_not_dom not_none_dom d\n#align get_or_else_none get_or_else_none\n\n",
 "get_mem":
 "theorem get_mem {o : Part α} (h) : get o h ∈ o :=\n  ⟨_, rfl⟩\n#align get_mem get_mem\n\n",
 "get_eq_of_mem":
 "theorem get_eq_of_mem {o : Part α} {a} (h : a ∈ o) (h') : get o h' = a :=\n  mem_unique ⟨_, rfl⟩ h\n#align get_eq_of_mem get_eq_of_mem\n\n",
 "get_eq_iff_mem":
 "theorem get_eq_iff_mem {o : Part α} {a : α} (h : o.dom) : o.get h = a ↔ a ∈ o :=\n  ⟨fun H => ⟨h, H⟩, fun ⟨h', H⟩ => H⟩\n#align get_eq_iff_mem get_eq_iff_mem\n\n",
 "get_eq_iff_eq_some":
 "theorem get_eq_iff_eq_some {a : Part α} {ha : a.dom} {b : α} : a.get ha = b ↔ a = some b :=\n  ⟨fun h => by simp [h.symm], fun h => by simp [h]⟩\n#align get_eq_iff_eq_some get_eq_iff_eq_some\n\n",
 "get_eq_get_of_eq":
 "theorem get_eq_get_of_eq (a : Part α) (ha : a.dom) {b : Part α} (h : a = b) : a.get ha = b.get (h ▸ ha) :=\n  by\n  congr\n  exact h\n#align get_eq_get_of_eq get_eq_get_of_eq\n\n",
 "ext'":
 "/-- `part` extensionality -/\ntheorem ext' : ∀ {o p : Part α} (H1 : o.dom ↔ p.dom) (H2 : ∀ h₁ h₂, o.get h₁ = p.get h₂), o = p\n  | ⟨od, o⟩, ⟨pd, p⟩, H1, H2 => by\n    have t : od = pd := propext H1\n    cases t <;> rw [show o = p from funext fun p => H2 p p]\n#align ext' ext'\n\n",
 "ext":
 "/-- `part` extensionality -/\n@[ext]\ntheorem ext {o p : Part α} (H : ∀ a, a ∈ o ↔ a ∈ p) : o = p :=\n  ext' ⟨fun h => ((H _).1 ⟨h, rfl⟩).fst, fun h => ((H _).2 ⟨h, rfl⟩).fst⟩ fun a b => ((H _).2 ⟨_, rfl⟩).snd\n#align ext ext\n\n",
 "eta":
 "/-- `part` eta expansion -/\n@[simp]\ntheorem eta : ∀ o : Part α, (⟨o.dom, fun h => o.get h⟩ : Part α) = o\n  | ⟨h, f⟩ => rfl\n#align eta eta\n\n",
 "eq_some_iff":
 "theorem eq_some_iff {a : α} {o : Part α} : o = some a ↔ a ∈ o :=\n  ⟨fun e => e.symm ▸ mem_some _, fun ⟨h, e⟩ => e ▸ ext' (iff_true_intro h) fun _ _ => rfl⟩\n#align eq_some_iff eq_some_iff\n\n",
 "eq_none_or_eq_some":
 "theorem eq_none_or_eq_some (o : Part α) : o = none ∨ ∃ x, o = some x :=\n  or_iff_not_imp_left.2 ne_none_iff.1\n#align eq_none_or_eq_some eq_none_or_eq_some\n\n",
 "eq_none_iff'":
 "theorem eq_none_iff' {o : Part α} : o = none ↔ ¬o.dom :=\n  ⟨fun e => e.symm ▸ id, fun h => eq_none_iff.2 fun a h' => h h'.fst⟩\n#align eq_none_iff' eq_none_iff'\n\n",
 "eq_none_iff":
 "theorem eq_none_iff {o : Part α} : o = none ↔ ∀ a, a ∉ o :=\n  ⟨fun e => e.symm ▸ not_mem_none, fun h => ext (by simpa)⟩\n#align eq_none_iff eq_none_iff\n\n",
 "eq_get_iff_mem":
 "theorem eq_get_iff_mem {o : Part α} {a : α} (h : o.dom) : a = o.get h ↔ a ∈ o :=\n  eq_comm.trans (get_eq_iff_mem h)\n#align eq_get_iff_mem eq_get_iff_mem\n\n",
 "elim_to_option":
 "@[simp]\ntheorem elim_to_option {α β : Type _} (a : Part α) [decidable a.dom] (b : β) (f : α → β) :\n    a.to_option.elim b f = if h : a.dom then f (a.get h) else b :=\n  by\n  split_ifs\n  · rw [h.to_option]\n    rfl\n  · rw [Part.toOption_eq_none_iff.2 h]\n    rfl\n#align elim_to_option elim_to_option\n\n",
 "dom_iff_mem":
 "theorem dom_iff_mem : ∀ {o : Part α}, o.dom ↔ ∃ y, y ∈ o\n  | ⟨p, f⟩ => ⟨fun h => ⟨f h, h, rfl⟩, fun ⟨_, h, rfl⟩ => h⟩\n#align dom_iff_mem dom_iff_mem\n\n",
 "div_mem_div":
 "@[to_additive]\ntheorem div_mem_div [Div α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma / mb ∈ a / b := by tidy\n#align div_mem_div div_mem_div\n\n",
 "div_get_eq":
 "@[simp, to_additive]\ntheorem div_get_eq [Div α] (a b : Part α) (hab : dom (a / b)) :\n    (a / b).get hab = a.get (left_dom_of_div_dom hab) / b.get (right_dom_of_div_dom hab) := by tidy\n#align div_get_eq div_get_eq\n\n",
 "coe_some":
 "@[simp]\ntheorem coe_some (a : α) : (option.some a : Part α) = some a :=\n  rfl\n#align coe_some coe_some\n\n",
 "coe_none":
 "@[simp]\ntheorem coe_none : (@option.none α : Part α) = none :=\n  rfl\n#align coe_none coe_none\n\n",
 "bind_to_option":
 "theorem bind_to_option (f : α → Part β) (o : Part α) [decidable o.dom] [∀ a, decidable (f a).dom]\n    [decidable (o.bind f).dom] : (o.bind f).to_option = o.to_option.elim option.none fun a => (f a).to_option :=\n  by\n  by_cases o.dom\n  · simp_rw [h.to_option, h.bind]\n    rfl\n  · rw [Part.toOption_eq_none_iff.2 h]\n    exact Part.toOption_eq_none_iff.2 fun ho => h ho.of_bind\n#align bind_to_option bind_to_option\n\n",
 "bind_some_right":
 "@[simp]\ntheorem bind_some_right (x : Part α) : x.bind some = x := by rw [bind_some_eq_map] <;> simp [map_id']\n#align bind_some_right bind_some_right\n\n",
 "bind_some_eq_map":
 "theorem bind_some_eq_map (f : α → β) (x : Part α) : x.bind (some ∘ f) = map f x :=\n  ext <| by simp [eq_comm]\n#align bind_some_eq_map bind_some_eq_map\n\n",
 "bind_some":
 "@[simp]\ntheorem bind_some (a : α) (f : α → Part β) : (some a).bind f = f a :=\n  ext <| by simp\n#align bind_some bind_some\n\n",
 "bind_of_mem":
 "theorem bind_of_mem {o : Part α} {a : α} (h : a ∈ o) (f : α → Part β) : o.bind f = f a := by\n  rw [eq_some_iff.2 h, bind_some]\n#align bind_of_mem bind_of_mem\n\n",
 "bind_none":
 "@[simp]\ntheorem bind_none (f : α → Part β) : none.bind f = none :=\n  eq_none_iff.2 fun a => by simp\n#align bind_none bind_none\n\n",
 "bind_map":
 "@[simp]\ntheorem bind_map {γ} (f : α → β) (x) (g : β → Part γ) : (map f x).bind g = x.bind fun y => g (f y) := by\n  rw [← bind_some_eq_map, bind_assoc] <;> simp\n#align bind_map bind_map\n\n",
 "bind_le":
 "theorem bind_le {α} (x : Part α) (f : α → Part β) (y : Part β) : x >>= f ≤ y ↔ ∀ a, a ∈ x → f a ≤ y :=\n  by\n  constructor <;> intro h\n  · intro a h' b\n    replace h := h b\n    simp only [and_imp, exists_prop, bind_eq_bind, mem_bind_iff, exists_imp] at h\n    apply h _ h'\n  · intro b h'\n    simp only [exists_prop, bind_eq_bind, mem_bind_iff] at h'\n    rcases h' with ⟨a, h₀, h₁⟩\n    apply h _ h₀ _ h₁\n#align bind_le bind_le\n\n",
 "bind_eq_bind":
 "@[simp]\ntheorem bind_eq_bind {α β} (f : Part α) (g : α → Part β) : f >>= g = f.bind g :=\n  rfl\n#align bind_eq_bind bind_eq_bind\n\n",
 "bind_dom":
 "@[simp]\ntheorem bind_dom {f : Part α} {g : α → Part β} : (f.bind g).dom ↔ ∃ h : f.dom, (g (f.get h)).dom :=\n  iff.rfl\n#align bind_dom bind_dom\n\n",
 "bind_defined":
 "theorem bind_defined {f : Part α} {g : α → Part β} : ∀ h : f.dom, (g (f.get h)).dom → (f.bind g).dom :=\n  assert_defined\n#align bind_defined bind_defined\n\n",
 "bind_assoc":
 "theorem bind_assoc {γ} (f : Part α) (g : α → Part β) (k : β → Part γ) :\n    (f.bind g).bind k = f.bind fun x => (g x).bind k :=\n  ext fun a => by\n    simp <;> exact ⟨fun ⟨_, ⟨_, h₁, h₂⟩, h₃⟩ => ⟨_, h₁, _, h₂, h₃⟩, fun ⟨_, h₁, _, h₂, h₃⟩ => ⟨_, ⟨_, h₁, h₂⟩, h₃⟩⟩\n#align bind_assoc bind_assoc\n\n",
 "bind":
 "protected theorem dom.bind {o : Part α} (h : o.dom) (f : α → Part β) : o.bind f = f (o.get h) :=\n  by\n  ext b\n  simp only [Part.mem_bind_iff, exists_prop]\n  refine' ⟨_, fun hb => ⟨o.get h, Part.get_mem _, hb⟩⟩\n  rintro ⟨a, ha, hb⟩\n  rwa [Part.get_eq_of_mem ha]\n#align dom.bind dom.bind\n\n",
 "assert_pos":
 "theorem assert_pos {p : Prop} {f : p → Part α} (h : p) : assert p f = f h :=\n  by\n  dsimp [assert]\n  cases h' : f h\n  simp only [h', h, true_and_iff, iff_self_iff, exists_prop_of_true, eq_iff_iff]\n  apply function.hfunext\n  · simp only [h, h', exists_prop_of_true]\n  · cc\n#align assert_pos assert_pos\n\n",
 "assert_neg":
 "theorem assert_neg {p : Prop} {f : p → Part α} (h : ¬p) : assert p f = none :=\n  by\n  dsimp [assert, none]; congr\n  · simp only [h, not_false_iff, exists_prop_of_false]\n  · apply function.hfunext\n    · simp only [h, not_false_iff, exists_prop_of_false]\n    cc\n#align assert_neg assert_neg\n\n",
 "assert_defined":
 "theorem assert_defined {p : Prop} {f : p → Part α} : ∀ h : p, (f h).dom → (assert p f).dom :=\n  exists.intro\n#align assert_defined assert_defined\n\n",
 "append_mem_append":
 "theorem append_mem_append [Append α] (a b : Part α) (ma mb : α) (ha : ma ∈ a) (hb : mb ∈ b) : ma ++ mb ∈ a ++ b := by\n  tidy\n#align append_mem_append append_mem_append\n\n",
 "append_get_eq":
 "@[simp]\ntheorem append_get_eq [Append α] (a b : Part α) (hab : dom (a ++ b)) :\n    (a ++ b).get hab = a.get (left_dom_of_append_dom hab) ++ b.get (right_dom_of_append_dom hab) := by tidy\n#align append_get_eq append_get_eq\n\n"}