{"to_topsp_is_topological_basis":
 "theorem to_topsp_is_topological_basis (F : ctop α σ) :\n    @topological_space.is_topological_basis _ F.to_topsp (Set.range F.f) :=\n  letI := F.to_topsp\n  ⟨fun u ⟨a, e₁⟩ v ⟨b, e₂⟩ => e₁ ▸ e₂ ▸ fun x h => ⟨_, ⟨_, rfl⟩, F.inter_mem a b x h, F.inter_sub a b x h⟩,\n    eq_univ_iff_forall.2 fun x => ⟨_, ⟨_, rfl⟩, F.top_mem x⟩, rfl⟩\n#align to_topsp_is_topological_basis to_topsp_is_topological_basis\n\n",
 "to_locally_finite":
 "theorem locally_finite.realizer.to_locally_finite [topological_space α] {F : realizer α} {f : β → set α}\n    (R : locally_finite.realizer F f) : locally_finite f := fun a =>\n  ⟨_, F.mem_nhds.2 ⟨(R.bas a).1, (R.bas a).2, Subset.refl _⟩, ⟨R.sets a⟩⟩\n#align locally_finite.realizer.to_locally_finite locally_finite.realizer.to_locally_finite\n\n",
 "tendsto_nhds_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_nhds_iff {m : β → α} {f : filter β} (F : f.realizer) (R : realizer α) {a : α} :\n    tendsto m f ((nhds) a) ↔ ∀ t, a ∈ R.F t → ∃ s, ∀ x ∈ F.F s, m x ∈ R.F t :=\n  (F.tendsto_iff _ (R.nhds a)).trans subtype.forall\n#align tendsto_nhds_iff tendsto_nhds_iff\n\n",
 "of_equiv_σ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem of_equiv_σ (F : realizer α) (E : «expr ≃ » F.σ τ) : (F.of_equiv E).σ = τ :=\n  rfl\n#align of_equiv_σ of_equiv_σ\n\n",
 "of_equiv_val":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem of_equiv_val (E : «expr ≃ » σ τ) (F : ctop α σ) (a : τ) : F.of_equiv E a = F (E.symm a) := by cases F <;> rfl\n#align of_equiv_val of_equiv_val\n\n",
 "of_equiv_F":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem of_equiv_F (F : realizer α) (E : «expr ≃ » F.σ τ) (s : τ) : (F.of_equiv E).F s = F.F (E.symm s) := by\n  delta of_equiv <;> simp\n#align of_equiv_F of_equiv_F\n\n",
 "nhds_σ":
 "@[simp]\ntheorem nhds_σ (F : realizer α) (a : α) : (F.nhds a).σ = { s : F.σ // a ∈ F.F s } :=\n  rfl\n#align nhds_σ nhds_σ\n\n",
 "nhds_F":
 "@[simp]\ntheorem nhds_F (F : realizer α) (a : α) (s) : (F.nhds a).F s = F.F s.1 :=\n  rfl\n#align nhds_F nhds_F\n\n",
 "mem_nhds_to_topsp":
 "@[simp]\ntheorem mem_nhds_to_topsp (F : ctop α σ) {s : set α} {a : α} : s ∈ @nhds _ F.to_topsp a ↔ ∃ b, a ∈ F b ∧ F b ⊆ s :=\n  (@topological_space.is_topological_basis.mem_nhds_iff _ F.to_topsp _ _ _ F.to_topsp_is_topological_basis).trans <|\n    ⟨fun ⟨_, ⟨x, rfl⟩, h⟩ => ⟨x, h⟩, fun ⟨x, h⟩ => ⟨_, ⟨x, rfl⟩, h⟩⟩\n#align mem_nhds_to_topsp mem_nhds_to_topsp\n\n",
 "mem_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\nprotected theorem mem_nhds [T : topological_space α] (F : realizer α) {s : set α} {a : α} :\n    s ∈ (nhds) a ↔ ∃ b, a ∈ F.F b ∧ F.F b ⊆ s := by have := mem_nhds_to_topsp F.F <;> rwa [F.eq] at this\n#align mem_nhds mem_nhds\n\n",
 "mem_interior_iff":
 "theorem mem_interior_iff [topological_space α] (F : realizer α) {s : set α} {a : α} :\n    a ∈ interior s ↔ ∃ b, a ∈ F.F b ∧ F.F b ⊆ s :=\n  mem_interior_iff_mem_nhds.trans F.mem_nhds\n#align mem_interior_iff mem_interior_iff\n\n",
 "locally_finite_iff_exists_realizer":
 "theorem locally_finite_iff_exists_realizer [topological_space α] (F : realizer α) {f : β → set α} :\n    locally_finite f ↔ nonempty (locally_finite.realizer F f) :=\n  ⟨fun h =>\n    let ⟨g, h₁⟩ := classical.axiom_of_choice h\n    let ⟨g₂, h₂⟩ :=\n      classical.axiom_of_choice fun x =>\n        show ∃ b : F.σ, x ∈ F.F b ∧ F.F b ⊆ g x from\n          let ⟨h, h'⟩ := h₁ x\n          F.mem_nhds.1 h\n    ⟨⟨fun x => ⟨g₂ x, (h₂ x).1⟩, fun x =>\n        finite.fintype <|\n          let ⟨h, h'⟩ := h₁ x\n          h'.subset fun i hi => hi.mono (inter_subset_inter_right _ (h₂ x).2)⟩⟩,\n    fun ⟨R⟩ => R.to_locally_finite⟩\n#align locally_finite_iff_exists_realizer locally_finite_iff_exists_realizer\n\n",
 "is_open_iff":
 "theorem is_open_iff [topological_space α] (F : realizer α) {s : set α} :\n    is_open s ↔ ∀ a ∈ s, ∃ b, a ∈ F.F b ∧ F.F b ⊆ s :=\n  is_open_iff_mem_nhds.trans <| ball_congr fun a h => F.mem_nhds\n#align is_open_iff is_open_iff\n\n",
 "is_open":
 "protected theorem is_open [topological_space α] (F : realizer α) (s : F.σ) : is_open (F.F s) :=\n  is_open_iff_nhds.2 fun a m => by simpa using F.mem_nhds.2 ⟨s, m, subset.refl _⟩\n#align is_open is_open\n\n",
 "is_closed_iff":
 "theorem is_closed_iff [topological_space α] (F : realizer α) {s : set α} :\n    is_closed s ↔ ∀ a, (∀ b, a ∈ F.F b → ∃ z, z ∈ F.F b ∩ s) → a ∈ s :=\n  is_open_compl_iff.symm.trans <|\n    F.is_open_iff.trans <|\n      forall_congr' fun a =>\n        show (a ∉ s → ∃ b : F.σ, a ∈ F.F b ∧ ∀ z ∈ F.F b, z ∉ s) ↔ _ by\n          haveI := classical.prop_decidable <;> rw [not_imp_comm] <;> simp [not_exists, not_and, not_forall, and_comm']\n#align is_closed_iff is_closed_iff\n\n",
 "is_basis":
 "protected theorem is_basis [T : topological_space α] (F : realizer α) :\n    topological_space.is_topological_basis (Set.range F.F.f) := by\n  have := to_topsp_is_topological_basis F.F <;> rwa [F.eq] at this\n#align is_basis is_basis\n\n",
 "ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem ext' [T : topological_space α] {σ : Type _} {F : ctop α σ} (H : ∀ a s, s ∈ (nhds) a ↔ ∃ b, a ∈ F b ∧ F b ⊆ s) :\n    F.to_topsp = T := by\n  refine' eq_of_nhds_eq_nhds fun x => _\n  ext s\n  rw [mem_nhds_to_topsp, H]\n#align ext' ext'\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem ext [T : topological_space α] {σ : Type _} {F : ctop α σ} (H₁ : ∀ a, is_open (F a))\n    (H₂ : ∀ a s, s ∈ (nhds) a → ∃ b, a ∈ F b ∧ F b ⊆ s) : F.to_topsp = T :=\n  ext' fun a s => ⟨H₂ a s, fun ⟨b, h₁, h₂⟩ => mem_nhds_iff.2 ⟨_, h₂, H₁ _, h₁⟩⟩\n#align ext ext\n\n",
 "coe_mk":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem coe_mk (f T h₁ I h₂ h₃ a) : (@ctop.mk α σ f T h₁ I h₂ h₃) a = f a :=\n  rfl\n#align coe_mk coe_mk\n\n"}