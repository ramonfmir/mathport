{"vector_ex_iff_exists":
 "theorem vector_ex_iff_exists : ∀ {n} (f : vector3 α n → Prop), vector_ex n f ↔ Exists f\n  | 0, f => (exists_vector_zero f).symm\n  | succ n, f => iff.trans (exists_congr fun x => vector_ex_iff_exists _) (exists_vector_succ f).symm\n#align vector_ex_iff_exists vector_ex_iff_exists\n\n",
 "vector_allp_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\n@[simp]\ntheorem vector_allp_singleton (p : α → Prop) (x : α) :\n    vector_allp p (vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\") =\n      p x :=\n  rfl\n#align vector_allp_singleton vector_allp_singleton\n\n",
 "vector_allp_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\n@[simp]\ntheorem vector_allp_nil (p : α → Prop) :\n    vector_allp p (vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\") =\n      true :=\n  rfl\n#align vector_allp_nil vector_allp_nil\n\n",
 "vector_allp_iff_forall":
 "theorem vector_allp_iff_forall (p : α → Prop) (v : vector3 α n) : vector_allp p v ↔ ∀ i, p (v i) :=\n  by\n  refine' v.rec_on _ _\n  · exact ⟨fun _ => fin2.elim0, fun _ => trivial⟩\n  · simp\n    refine' fun n a v IH =>\n      (and_congr_right fun _ => IH).trans\n        ⟨fun ⟨pa, h⟩ i => by\n          refine' i.cases' _ _\n          exacts[pa, h], fun h => ⟨_, fun i => _⟩⟩\n    · have h0 := h fz\n      simp at h0\n      exact h0\n    · have hs := h (fs i)\n      simp at hs\n      exact hs\n#align vector_allp_iff_forall vector_allp_iff_forall\n\n",
 "vector_allp_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n@[simp]\ntheorem vector_allp_cons (p : α → Prop) (x : α) (v : vector3 α n) :\n    vector_allp p (vector.cons x v) ↔ p x ∧ vector_allp p v :=\n  vector3.rec_on v (and_true_iff _).symm fun n a v IH => iff.rfl\n#align vector_allp_cons vector_allp_cons\n\n",
 "vector_all_iff_forall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\ntheorem vector_all_iff_forall : ∀ {n} (f : vector3 α n → Prop), vector_all n f ↔ ∀ v, f v\n  | 0, f =>\n    ⟨fun f0 v => v.nil_elim f0, fun al =>\n      al (vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\")⟩\n  | succ n, f =>\n    (forall_congr' fun x => vector_all_iff_forall fun v => f (vector.cons x v)).trans\n      ⟨fun al v => v.cons_elim al, fun al x v => al (vector.cons x v)⟩\n#align vector_all_iff_forall vector_all_iff_forall\n\n",
 "rec_on_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\n@[simp]\ntheorem rec_on_nil {C H0 Hs} :\n    @vector3.rec_on α (@C) 0\n        (vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\") H0 @Hs =\n      H0 :=\n  rfl\n#align rec_on_nil rec_on_nil\n\n",
 "rec_on_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n@[simp]\ntheorem rec_on_cons {C H0 Hs n a v} :\n    @vector3.rec_on α (@C) (succ n) (vector.cons a v) H0 @Hs = Hs a v (@vector3.rec_on α (@C) n v H0 @Hs) :=\n  rfl\n#align rec_on_cons rec_on_cons\n\n",
 "insert_fz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n@[simp]\ntheorem insert_fz (a : α) (v : vector3 α n) : insert a v fz = vector.cons a v := by\n  refine' funext fun j => j.cases' _ _ <;> intros <;> rfl\n#align insert_fz insert_fz\n\n",
 "insert_fs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n@[simp]\ntheorem insert_fs (a : α) (b : α) (v : vector3 α n) (i : fin2 (succ n)) :\n    insert a (vector.cons b v) (fs i) = vector.cons b (insert a v i) :=\n  funext fun j => by\n    refine' j.cases' _ fun j => _ <;> simp [insert, insert_perm]\n    refine' fin2.cases' _ _ (insert_perm i j) <;> simp [insert_perm]\n#align insert_fs insert_fs\n\n",
 "imp":
 "theorem vector_allp.imp {p q : α → Prop} (h : ∀ x, p x → q x) {v : vector3 α n} (al : vector_allp p v) :\n    vector_allp q v :=\n  (vector_allp_iff_forall _ _).2 fun i => h _ <| (vector_allp_iff_forall _ _).1 al _\n#align vector_allp.imp vector_allp.imp\n\n",
 "exists_vector_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\ntheorem exists_vector_zero (f : vector3 α 0 → Prop) :\n    Exists f ↔ f (vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\") :=\n  ⟨fun ⟨v, fv⟩ => by rw [← eq_nil v] <;> exact fv, fun f0 =>\n    ⟨vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\", f0⟩⟩\n#align exists_vector_zero exists_vector_zero\n\n",
 "exists_vector_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\ntheorem exists_vector_succ (f : vector3 α (succ n) → Prop) : Exists f ↔ ∃ x v, f (vector.cons x v) :=\n  ⟨fun ⟨v, fv⟩ => ⟨_, _, by rw [cons_head_tail v] <;> exact fv⟩, fun ⟨x, v, fxv⟩ => ⟨_, fxv⟩⟩\n#align exists_vector_succ exists_vector_succ\n\n",
 "eq_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\ntheorem eq_nil (v : vector3 α 0) :\n    v = vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\" :=\n  funext fun i => nomatch i\n#align eq_nil eq_nil\n\n",
 "cons_head_tail":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\ntheorem cons_head_tail (v : vector3 α (succ n)) : vector.cons (head v) (tail v) = v :=\n  funext fun i => fin2.cases' rfl (fun _ => rfl) i\n#align cons_head_tail cons_head_tail\n\n",
 "cons_fz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n/- We do not want to make the following notation global, because then these expressions will be\noverloaded, and only the expected type will be able to disambiguate the meaning. Worse: Lean will\ntry to insert a coercion from `vector3 α _` to `list α`, if a list is expected. -/\n@[simp]\ntheorem cons_fz (a : α) (v : vector3 α n) : (vector.cons a v) fz = a :=\n  rfl\n#align cons_fz cons_fz\n\n",
 "cons_fs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n@[simp]\ntheorem cons_fs (a : α) (v : vector3 α n) (i) : (vector.cons a v) (fs i) = v i :=\n  rfl\n#align cons_fs cons_fs\n\n",
 "cons_elim_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n@[simp]\ntheorem cons_elim_cons {C H a t} : @cons_elim α n C H (vector.cons a t) = H a t :=\n  rfl\n#align cons_elim_cons cons_elim_cons\n\n",
 "append_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.list -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list -/\n@[simp]\ntheorem append_nil (w : vector3 α n) :\n    «expr +-+ » (vector.list \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `vector.list\") w =\n      w :=\n  rfl\n#align append_nil append_nil\n\n",
 "append_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n@[simp]\ntheorem append_left : ∀ {m} (i : fin2 m) (v : vector3 α m) {n} (w : vector3 α n), («expr +-+ » v w) (left n i) = v i\n  | _, @fz m, v, n, w => v.cons_elim fun a t => by simp [*, left]\n  | _, @fs m i, v, n, w => v.cons_elim fun a t => by simp [*, left]\n#align append_left append_left\n\n",
 "append_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\ntheorem append_insert (a : α) (t : vector3 α m) (v : vector3 α n) (i : fin2 (succ n)) (e : succ n + m = succ (n + m)) :\n    insert a («expr +-+ » t v) (eq.rec_on e (i.add m)) = eq.rec_on e («expr +-+ » t (insert a v i)) :=\n  by\n  refine' vector3.rec_on t (fun e => _) (fun k b t IH e => _) e; rfl\n  have e' := succ_add n k\n  change\n    insert a (vector.cons b («expr +-+ » t v)) (eq.rec_on (congr_arg succ e') (fs (add i k))) =\n      eq.rec_on (congr_arg succ e') (vector.cons b («expr +-+ » t (insert a v i)))\n  rw [←\n    (eq.drec_on e' rfl :\n      fs (eq.rec_on e' (i.add k) : fin2 (succ (n + k))) = eq.rec_on (congr_arg succ e') (fs (i.add k)))]\n  simp; rw [IH]; exact eq.drec_on e' rfl\n#align append_insert append_insert\n\n",
 "append_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector.cons -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n@[simp]\ntheorem append_cons (a : α) (v : vector3 α m) (w : vector3 α n) :\n    «expr +-+ » (vector.cons a v) w = vector.cons a («expr +-+ » v w) :=\n  rfl\n#align append_cons append_cons\n\n",
 "append_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +-+ » -/\n@[simp]\ntheorem append_add : ∀ {m} (v : vector3 α m) {n} (w : vector3 α n) (i : fin2 n), («expr +-+ » v w) (add i m) = w i\n  | 0, v, n, w, i => rfl\n  | succ m, v, n, w, i => v.cons_elim fun a t => by simp [*, add]\n#align append_add append_add\n\n"}