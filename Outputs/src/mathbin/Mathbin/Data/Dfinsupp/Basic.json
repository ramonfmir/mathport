{"zsmul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem zsmul_apply [∀ i, AddGroup (β i)] (b : ℤ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : («expr • » b v) i = «expr • » b (v i) :=\n  rfl\n#align zsmul_apply zsmul_apply\n\n",
 "zip_with_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem zip_with_def {ι : Type u} {β : ι → Type v} {β₁ : ι → Type v₁} {β₂ : ι → Type v₂} [dec : DecidableEq ι]\n    [∀ i : ι, Zero (β i)] [∀ i : ι, Zero (β₁ i)] [∀ i : ι, Zero (β₂ i)] [∀ (i : ι) (x : β₁ i), Decidable (x ≠ 0)]\n    [∀ (i : ι) (x : β₂ i), Decidable (x ≠ 0)] {f : ∀ i, β₁ i → β₂ i → β i} {hf : ∀ i, f i 0 0 = 0}\n    {g₁ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)}\n    {g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₂ i)} :\n    zipWith f hf g₁ g₂ = mk (g₁.support ∪ g₂.support) fun i => f i.1 (g₁ i.1) (g₂ i.1) :=\n  by\n  ext i\n  by_cases h1 : g₁ i ≠ 0 <;> by_cases h2 : g₂ i ≠ 0 <;> simp only [Classical.not_not, ne.def] at h1 h2 <;>\n    simp [h1, h2, hf]\n#align zip_with_def zip_with_def\n\n",
 "zip_with_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem zip_with_apply (f : ∀ i, β₁ i → β₂ i → β i) (hf : ∀ i, f i 0 0 = 0)\n    (g₁ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i))\n    (g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₂ i))\n    (i : ι) : zipWith f hf g₁ g₂ i = f i (g₁ i) (g₂ i) :=\n  rfl\n#align zip_with_apply zip_with_apply\n\n",
 "zero_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem zero_apply (i : ι) :\n    (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) i =\n      0 :=\n  rfl\n#align zero_apply zero_apply\n\n",
 "update_self":
 "@[simp]\ntheorem update_self : f.update i (f i) = f := by\n  ext\n  simp\n#align update_self update_self\n\n",
 "update_eq_sub_add_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem update_eq_sub_add_single {β : ι → Type _} [∀ i, AddGroup (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) (b : β i) : f.update i b = f - single i (f i) + single i b := by\n  rw [update_eq_erase_add_single f i b, erase_eq_sub_single f i]\n#align update_eq_sub_add_single update_eq_sub_add_single\n\n",
 "update_eq_single_add_erase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem update_eq_single_add_erase {β : ι → Type _} [∀ i, AddZeroClass (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) (b : β i) : f.update i b = single i b + f.erase i :=\n  by\n  ext j\n  rcases eq_or_ne i j with (rfl | h)\n  · simp\n  · simp [Function.update_noteq h.symm, h, erase_ne, h.symm]\n#align update_eq_single_add_erase update_eq_single_add_erase\n\n",
 "update_eq_erase_add_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem update_eq_erase_add_single {β : ι → Type _} [∀ i, AddZeroClass (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) (b : β i) : f.update i b = f.erase i + single i b :=\n  by\n  ext j\n  rcases eq_or_ne i j with (rfl | h)\n  · simp\n  · simp [Function.update_noteq h.symm, h, erase_ne, h.symm]\n#align update_eq_erase_add_single update_eq_erase_add_single\n\n",
 "update_eq_erase":
 "@[simp]\ntheorem update_eq_erase : f.update i 0 = f.erase i := by\n  ext j\n  rcases eq_or_ne i j with (rfl | hi)\n  · simp\n  · simp [hi.symm]\n#align update_eq_erase update_eq_erase\n\n",
 "to_fun_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Kenny Lau\n-/\n@[simp]\ntheorem to_fun_eq_coe\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f.to_fun = f :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "supr_eq_mrange_dfinsupp_sum_add_hom":
 "#print AddSubmonoid.supᵢ_eq_mrange_dfinsupp_sumAddHom /-\n/-- The supremum of a family of commutative additive submonoids is equal to the range of\n`dfinsupp.sum_add_hom`; that is, every element in the `supr` can be produced from taking a finite\nnumber of non-zero elements of `S i`, coercing them to `γ`, and summing them. -/\ntheorem AddSubmonoid.supᵢ_eq_mrange_dfinsupp_sumAddHom [AddCommMonoid γ] (S : ι → AddSubmonoid γ) :\n    supᵢ S = (Dfinsupp.sumAddHom fun i => (S i).subtype).mrange :=\n  by\n  apply le_antisymm\n  · apply supᵢ_le _\n    intro i y hy\n    exact ⟨Dfinsupp.single i ⟨y, hy⟩, Dfinsupp.sumAddHom_single _ _ _⟩\n  · rintro x ⟨v, rfl⟩\n    exact dfinsupp_sumAddHom_mem _ v _ fun i _ => (le_supᵢ S i : S i ≤ _) (v i).prop\n#align add_submonoid.supr_eq_mrange_dfinsupp_sum_add_hom AddSubmonoid.supᵢ_eq_mrange_dfinsupp_sumAddHom\n-/\n\n",
 "support_zip_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem support_zip_with {f : ∀ i, β₁ i → β₂ i → β i} {hf : ∀ i, f i 0 0 = 0}\n    {g₁ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)}\n    {g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₂ i)} :\n    (zipWith f hf g₁ g₂).support ⊆ g₁.support ∪ g₂.support := by simp [zip_with_def]\n#align support_zip_with support_zip_with\n\n",
 "support_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem support_zero :\n    (0 :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\"\n            (β i)).support =\n      ∅ :=\n  rfl\n#align support_zero support_zero\n\n",
 "support_update_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem support_update_ne_zero\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) {b : β i} (h : b ≠ 0) : support (f.update i b) = insert i f.support :=\n  by\n  ext j\n  rcases eq_or_ne i j with (rfl | hi)\n  · simp [h]\n  · simp [hi.symm]\n#align support_update_ne_zero support_update_ne_zero\n\n",
 "support_update":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem support_update\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) (b : β i) [Decidable (b = 0)] :\n    support (f.update i b) = if b = 0 then support (f.erase i) else insert i f.support :=\n  by\n  ext j\n  split_ifs with hb\n  · subst hb\n    simp [update_eq_erase, support_erase]\n  · rw [support_update_ne_zero f _ hb]\n#align support_update support_update\n\n",
 "support_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem support_sum {ι₁ : Type u₁} [DecidableEq ι₁] {β₁ : ι₁ → Type v₁} [∀ i₁, Zero (β₁ i₁)]\n    [∀ (i) (x : β₁ i), Decidable (x ≠ 0)] [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i₁)}\n    {g :\n      ∀ i₁,\n        β₁ i₁ →\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (f.sum g).support ⊆ f.support.bUnion fun i => (g i (f i)).support :=\n  by\n  have : ∀ i₁ : ι, (f.sum fun (i : ι₁) (b : β₁ i) => (g i b) i₁) ≠ 0 → ∃ i : ι₁, f i ≠ 0 ∧ ¬(g i (f i)) i₁ = 0 :=\n    fun i₁ h =>\n    let ⟨i, hi, ne⟩ := Finset.exists_ne_zero_of_sum_ne_zero h\n    ⟨i, mem_support_iff.1 hi, ne⟩\n  simpa [Finset.subset_iff, mem_support_iff, Finset.mem_bunionᵢ, sum_apply] using this\n#align support_sum support_sum\n\n",
 "support_subtype_domain":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem support_subtype_domain\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (subtypeDomain p f).support = f.support.subtype p := by\n  ext i\n  simp\n#align support_subtype_domain support_subtype_domain\n\n",
 "support_subset_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (i «expr ∉ » s) -/\ntheorem support_subset_iff {s : Set ι}\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    ↑f.support ⊆ s ↔ ∀ (i) (_ : i ∉ s), f i = 0 := by\n  simp [Set.subset_def] <;> exact forall_congr' fun i => not_imp_comm\n#align support_subset_iff support_subset_iff\n\n",
 "support_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_smul {γ : Type w} [Semiring γ] [∀ i, AddCommMonoid (β i)] [∀ i, Module γ (β i)]\n    [∀ (i : ι) (x : β i), Decidable (x ≠ 0)] (b : γ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    («expr • » b v).support ⊆ v.support :=\n  support_mapRange\n#align support_smul support_smul\n\n",
 "support_single_subset":
 "theorem support_single_subset {i : ι} {b : β i} : (single i b).support ⊆ {i} :=\n  support_mk'_subset\n#align support_single_subset support_single_subset\n\n",
 "support_single_ne_zero":
 "theorem support_single_ne_zero {i : ι} {b : β i} (hb : b ≠ 0) : (single i b).support = {i} :=\n  by\n  ext j; by_cases h : i = j\n  · subst h\n    simp [hb]\n  simp [ne.symm h, h]\n#align support_single_ne_zero support_single_ne_zero\n\n",
 "support_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem support_neg [∀ i, AddGroup (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    support (-f) = support f := by ext i <;> simp\n#align support_neg support_neg\n\n",
 "support_mk_subset":
 "@[simp]\ntheorem support_mk_subset {s : Finset ι} {x : ∀ i : (↑s : Set ι), β i.1} : (mk s x).support ⊆ s := fun i H =>\n  Multiset.mem_toFinset.1 (Finset.mem_filter.1 H).1\n#align support_mk_subset support_mk_subset\n\n",
 "support_mk'_subset":
 "@[simp]\ntheorem support_mk'_subset {f : ∀ i, β i} {s : Multiset ι} {h} : (mk' f <| Trunc.mk ⟨s, h⟩).support ⊆ s.to_finset :=\n  fun i H => Multiset.mem_toFinset.1 <| by simpa using (Finset.mem_filter.1 H).1\n#align support_mk'_subset support_mk'_subset\n\n",
 "support_map_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem support_map_range {f : ∀ i, β₁ i → β₂ i} {hf : ∀ i, f i 0 = 0}\n    {g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)} :\n    (mapRange f hf g).support ⊆ g.support := by simp [map_range_def]\n#align support_map_range support_map_range\n\n",
 "support_filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem support_filter\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (f.filter p).support = f.support.filter p := by ext i <;> by_cases h : p i <;> simp [h]\n#align support_filter support_filter\n\n",
 "support_erase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem support_erase (i : ι)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (f.erase i).support = f.support.erase i := by\n  ext j\n  by_cases h1 : j = i\n  simp [h1]\n  by_cases h2 : f j ≠ 0 <;> simp at h2 <;> simp [h1, h2]\n#align support_erase support_erase\n\n",
 "support_eq_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem support_eq_empty\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    f.support = ∅ ↔ f = 0 :=\n  ⟨fun H => ext <| by simpa [Finset.ext_iff] using H, by simp (config := { contextual := true })⟩\n#align support_eq_empty support_eq_empty\n\n",
 "support_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem support_add [∀ i, AddZeroClass (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)]\n    {g₁ g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (g₁ + g₂).support ⊆ g₁.support ∪ g₂.support :=\n  support_zipWith\n#align support_add support_add\n\n",
 "sum_sub_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem sum_sub_index [∀ i, AddGroup (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [AddCommGroup γ]\n    {f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} (h_sub : ∀ i b₁ b₂, h i (b₁ - b₂) = h i b₁ - h i b₂) : (f - g).sum h = f.sum h - g.sum h :=\n  by\n  have := (lift_add_hom fun a => AddMonoidHom.ofMapSub (h a) (h_sub a)).map_sub f g\n  rw [lift_add_hom_apply, sum_add_hom_apply, sum_add_hom_apply, sum_add_hom_apply] at this\n  exact this\n#align sum_sub_index sum_sub_index\n\n",
 "sum_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sum_single [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    f.sum single = f := by\n  have := AddMonoidHom.congr_fun lift_add_hom_single_add_hom f\n  rw [lift_add_hom_apply, sum_add_hom_apply] at this\n  exact this\n#align sum_single sum_single\n\n",
 "sum_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sum_apply {ι₁ : Type u₁} [DecidableEq ι₁] {β₁ : ι₁ → Type v₁} [∀ i₁, Zero (β₁ i₁)]\n    [∀ (i) (x : β₁ i), Decidable (x ≠ 0)] [∀ i, AddCommMonoid (β i)]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i₁)}\n    {g :\n      ∀ i₁,\n        β₁ i₁ → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {i₂ : ι} : (f.sum g) i₂ = f.sum fun i₁ b => g i₁ b i₂ :=\n  (evalAddMonoidHom i₂ :\n        «expr →+ »\n          («exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n          (β i₂)).map_sum\n    _ f.support\n#align sum_apply sum_apply\n\n",
 "sum_add_hom_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem sum_add_hom_zero [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] :\n    (sumAddHom fun i => (0 : «expr →+ » (β i) γ)) = 0 :=\n  (liftAddHom : «expr ≃+ » (∀ i, «expr →+ » (β i) γ) _).map_zero\n#align sum_add_hom_zero sum_add_hom_zero\n\n",
 "sum_add_hom_single_add_hom":
 "@[simp]\ntheorem sum_add_hom_single_add_hom [∀ i, AddCommMonoid (β i)] : sumAddHom (singleAddHom β) = AddMonoidHom.id _ :=\n  liftAddHom_singleAddHom\n#align sum_add_hom_single_add_hom sum_add_hom_single_add_hom\n\n",
 "sum_add_hom_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem sum_add_hom_single [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] (φ : ∀ i, «expr →+ » (β i) γ) (i) (x : β i) :\n    sumAddHom φ (single i x) = φ i x :=\n  by\n  dsimp [sum_add_hom, single, Trunc.lift_mk]\n  rw [Multiset.toFinset_singleton, Finset.sum_singleton, Pi.single_eq_same]\n#align sum_add_hom_single sum_add_hom_single\n\n",
 "sum_add_hom_comp_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem sum_add_hom_comp_single [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] (f : ∀ i, «expr →+ » (β i) γ) (i : ι) :\n    (sumAddHom f).comp (singleAddHom β i) = f i :=\n  AddMonoidHom.ext fun x => sumAddHom_single f i x\n#align sum_add_hom_comp_single sum_add_hom_comp_single\n\n",
 "sum_add_hom_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem sum_add_hom_comm {ι₁ ι₂ : Sort _} {β₁ : ι₁ → Type _} {β₂ : ι₂ → Type _} {γ : Type _} [DecidableEq ι₁]\n    [DecidableEq ι₂] [∀ i, AddZeroClass (β₁ i)] [∀ i, AddZeroClass (β₂ i)] [AddCommMonoid γ]\n    (f₁ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i))\n    (f₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₂ i))\n    (h : ∀ i j, «expr →+ » (β₁ i) («expr →+ » (β₂ j) γ)) :\n    sumAddHom (fun i₂ => sumAddHom (fun i₁ => h i₁ i₂) f₁) f₂ =\n      sumAddHom (fun i₁ => sumAddHom (fun i₂ => (h i₁ i₂).flip) f₂) f₁ :=\n  by\n  obtain ⟨⟨f₁, s₁, h₁⟩, ⟨f₂, s₂, h₂⟩⟩ := f₁, f₂\n  simp only [sum_add_hom, AddMonoidHom.finset_sum_apply, Quotient.liftOn_mk, AddMonoidHom.coe_mk,\n    AddMonoidHom.flip_apply, Trunc.lift]\n  exact Finset.sum_comm\n#align sum_add_hom_comm sum_add_hom_comm\n\n",
 "sum_add_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- While we didn't need decidable instances to define it, we do to reduce it to a sum -/\ntheorem sum_add_hom_apply [∀ i, AddZeroClass (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [AddCommMonoid γ]\n    (φ : ∀ i, «expr →+ » (β i) γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    sumAddHom φ f = f.sum fun x => φ x := by\n  rcases f with ⟨f, s, hf⟩\n  change\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" _ _ =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (Finset.filter _ _) _\n  rw [Finset.sum_filter, Finset.sum_congr rfl]\n  intro i _\n  dsimp only [coe_mk', Subtype.coe_mk] at *\n  split_ifs\n  rfl\n  rw [not_not.mp h, AddMonoidHom.map_zero]\n#align sum_add_hom_apply sum_add_hom_apply\n\n",
 "sum_add_hom_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem sum_add_hom_add [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] (g : ∀ i, «expr →+ » (β i) γ)\n    (h : ∀ i, «expr →+ » (β i) γ) : (sumAddHom fun i => g i + h i) = sumAddHom g + sumAddHom h :=\n  liftAddHom.map_add _ _\n#align sum_add_hom_add sum_add_hom_add\n\n",
 "subtype_domain_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem subtype_domain_zero [∀ i, Zero (β i)] {p : ι → Prop} [DecidablePred p] :\n    subtypeDomain p\n        (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      0 :=\n  rfl\n#align subtype_domain_zero subtype_domain_zero\n\n",
 "subtype_domain_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem subtype_domain_sum [∀ i, AddCommMonoid (β i)] {s : Finset γ}\n    {h : γ → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {p : ι → Prop} [DecidablePred p] :\n    (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n            (h c)).subtype_domain\n        p =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        ((h c).subtype_domain p) :=\n  (subtypeDomainAddMonoidHom β p).map_sum _ s\n#align subtype_domain_sum subtype_domain_sum\n\n",
 "subtype_domain_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem subtype_domain_sub [∀ i, AddGroup (β i)] {p : ι → Prop} [DecidablePred p]\n    {v v' : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (v - v').subtype_domain p = v.subtype_domain p - v'.subtype_domain p :=\n  coeFn_injective rfl\n#align subtype_domain_sub subtype_domain_sub\n\n",
 "subtype_domain_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem subtype_domain_smul [Monoid γ] [∀ i, AddMonoid (β i)] [∀ i, DistribMulAction γ (β i)] {p : ι → Prop}\n    [DecidablePred p] (r : γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    («expr • » r f).subtype_domain p = «expr • » r (f.subtype_domain p) :=\n  coeFn_injective rfl\n#align subtype_domain_smul subtype_domain_smul\n\n",
 "subtype_domain_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem subtype_domain_neg [∀ i, AddGroup (β i)] {p : ι → Prop} [DecidablePred p]\n    {v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (-v).subtype_domain p = -v.subtype_domain p :=\n  coeFn_injective rfl\n#align subtype_domain_neg subtype_domain_neg\n\n",
 "subtype_domain_finsupp_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem subtype_domain_finsupp_sum {δ : γ → Type x} [DecidableEq γ] [∀ c, Zero (δ c)]\n    [∀ (c) (x : δ c), Decidable (x ≠ 0)] [∀ i, AddCommMonoid (β i)] {p : ι → Prop} [DecidablePred p]\n    {s : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ c)}\n    {h :\n      ∀ c,\n        δ c → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (s.sum h).subtype_domain p = s.sum fun c d => (h c d).subtype_domain p :=\n  subtypeDomain_sum\n#align subtype_domain_finsupp_sum subtype_domain_finsupp_sum\n\n",
 "subtype_domain_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem subtype_domain_def\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f.subtype_domain p = mk (f.support.subtype p) fun i => f i := by\n  ext i <;> by_cases h2 : f i ≠ 0 <;> try simp at h2 <;> dsimp <;> simp [h2]\n#align subtype_domain_def subtype_domain_def\n\n",
 "subtype_domain_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem subtype_domain_apply [∀ i, Zero (β i)] {p : ι → Prop} [DecidablePred p] {i : Subtype p}\n    {v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (subtypeDomain p v) i = v i :=\n  rfl\n#align subtype_domain_apply subtype_domain_apply\n\n",
 "subtype_domain_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem subtype_domain_add [∀ i, AddZeroClass (β i)] {p : ι → Prop} [DecidablePred p]\n    (v v' : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (v + v').subtype_domain p = v.subtype_domain p + v'.subtype_domain p :=\n  coeFn_injective rfl\n#align subtype_domain_add subtype_domain_add\n\n",
 "sub_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem sub_apply [∀ i, AddGroup (β i)]\n    (g₁ g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : (g₁ - g₂) i = g₁ i - g₂ i :=\n  rfl\n#align sub_apply sub_apply\n\n",
 "smul_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_sum {α : Type _} [Monoid α] [∀ i, Zero (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [AddCommMonoid γ]\n    [DistribMulAction α γ]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} {c : α} : «expr • » c (f.sum h) = f.sum fun a b => «expr • » c (h a b) :=\n  Finset.smul_sum\n#align smul_sum smul_sum\n\n",
 "smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_apply [Monoid γ] [∀ i, AddMonoid (β i)] [∀ i, DistribMulAction γ (β i)] (b : γ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : («expr • » b v) i = «expr • » b (v i) :=\n  rfl\n#align smul_apply smul_apply\n\n",
 "single_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem single_zero (i) :\n    (single i 0 :\n        «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      0 :=\n  FunLike.coe_injective <| Pi.single_zero _\n#align single_zero single_zero\n\n",
 "single_sub":
 "@[simp]\ntheorem single_sub {β : ι → Type v} [∀ i, AddGroup (β i)] (i : ι) (x y : β i) :\n    single i (x - y) = single i x - single i y :=\n  (singleAddHom β i).map_sub x y\n#align single_sub single_sub\n\n",
 "single_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem single_smul {i : ι} (c : γ) (x : β i) : single i («expr • » c x) = «expr • » c (single i x) :=\n  ext fun i => by simp only [smul_apply, single_apply] <;> split_ifs <;> [cases h, rw [smul_zero]] <;> rfl\n#align single_smul single_smul\n\n",
 "single_neg":
 "@[simp]\ntheorem single_neg {β : ι → Type v} [∀ i, AddGroup (β i)] (i : ι) (x : β i) : single i (-x) = -single i x :=\n  (singleAddHom β i).map_neg x\n#align single_neg single_neg\n\n",
 "single_left_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- `dfinsupp.single a b` is injective in `a`. For the statement that it is injective in `b`, see\n`dfinsupp.single_injective` -/\ntheorem single_left_injective {b : ∀ i : ι, β i} (h : ∀ i, b i ≠ 0) :\n    function.injective\n      (fun i => single i (b i) :\n        ι → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :=\n  fun a a' H => (((single_eq_single_iff _ _ _ _).mp H).resolve_right fun hb => h _ hb.1).left\n#align single_left_injective single_left_injective\n\n",
 "single_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem single_injective {i} :\n    function.injective\n      (single i :\n        β i →\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :=\n  fun x y H => Pi.single_injective β i <| coeFn_injective.eq_iff.mpr H\n#align single_injective single_injective\n\n",
 "single_eq_zero":
 "@[simp]\ntheorem single_eq_zero {i : ι} {xi : β i} : single i xi = 0 ↔ xi = 0 :=\n  by\n  rw [← single_zero i, single_eq_single_iff]\n  simp\n#align single_eq_zero single_eq_zero\n\n",
 "single_eq_single_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-- Like `finsupp.single_eq_single_iff`, but with a `heq` due to dependent types -/\ntheorem single_eq_single_iff (i j : ι) (xi : β i) (xj : β j) :\n    Dfinsupp.single i xi = Dfinsupp.single j xj ↔ i = j ∧ HEq xi xj ∨ xi = 0 ∧ xj = 0 :=\n  by\n  constructor\n  · intro h\n    by_cases hij : i = j\n    · subst hij\n      exact or.inl ⟨rfl, heq_of_eq (Dfinsupp.single_injective h)⟩\n    · have h_coe : «expr⇑ » (Dfinsupp.single i xi) = Dfinsupp.single j xj := congr_arg coe_fn h\n      have hci := congr_fun h_coe i\n      have hcj := congr_fun h_coe j\n      rw [Dfinsupp.single_eq_same] at hci hcj\n      rw [Dfinsupp.single_eq_of_ne (ne.symm hij)] at hci\n      rw [Dfinsupp.single_eq_of_ne hij] at hcj\n      exact or.inr ⟨hci, hcj.symm⟩\n  · rintro (⟨rfl, hxi⟩ | ⟨hi, hj⟩)\n    · rw [eq_of_heq hxi]\n    · rw [hi, hj, Dfinsupp.single_zero, Dfinsupp.single_zero]\n#align single_eq_single_iff single_eq_single_iff\n\n",
 "single_eq_same":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem single_eq_same {i b} :\n    (single i b :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n        i =\n      b :=\n  by simp only [single_apply, dif_pos rfl]\n#align single_eq_same single_eq_same\n\n",
 "single_eq_pi_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem single_eq_pi_single {i b} :\n    «expr⇑ »\n        (single i b :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      Pi.single i b :=\n  rfl\n#align single_eq_pi_single single_eq_pi_single\n\n",
 "single_eq_of_sigma_eq":
 "/-- Equality of sigma types is sufficient (but not necessary) to show equality of `dfinsupp`s. -/\ntheorem single_eq_of_sigma_eq {i j} {xi : β i} {xj : β j} (h : (⟨i, xi⟩ : Sigma β) = ⟨j, xj⟩) :\n    Dfinsupp.single i xi = Dfinsupp.single j xj := by\n  cases h\n  rfl\n#align single_eq_of_sigma_eq single_eq_of_sigma_eq\n\n",
 "single_eq_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem single_eq_of_ne {i i' b} (h : i ≠ i') :\n    (single i b :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n        i' =\n      0 :=\n  by simp only [single_apply, dif_neg h]\n#align single_eq_of_ne single_eq_of_ne\n\n",
 "single_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem single_apply {i i' b} :\n    (single i b :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n        i' =\n      if h : i = i' then eq.rec_on h b else 0 :=\n  by\n  rw [single_eq_pi_single, Pi.single, Function.update]\n  simp [@eq_comm _ i i']\n#align single_apply single_apply\n\n",
 "single_add_erase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem single_add_erase (i : ι)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    single i (f i) + f.erase i = f :=\n  ext fun i' =>\n    if h : i = i' then by subst h <;> simp only [add_apply, single_apply, erase_apply, dif_pos rfl, if_pos, add_zero]\n    else by simp only [add_apply, single_apply, erase_apply, dif_neg h, if_neg (ne.symm h), zero_add]\n#align single_add_erase single_add_erase\n\n",
 "single_add":
 "@[simp]\ntheorem single_add (i : ι) (b₁ b₂ : β i) : single i (b₁ + b₂) = single i b₁ + single i b₂ :=\n  ext fun i' => by\n    by_cases h : i = i'\n    · subst h\n      simp only [add_apply, single_eq_same]\n    · simp only [add_apply, single_eq_of_ne h, zero_add]\n#align single_add single_add\n\n",
 "sigma_uncurry_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_uncurry_zero [∀ i j, Zero (δ i j)] [∀ i, DecidableEq (α i)] [∀ (i j) (x : δ i j), Decidable (x ≠ 0)] :\n    sigmaUncurry\n        (0 :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i j)) =\n      0 :=\n  rfl\n#align sigma_uncurry_zero sigma_uncurry_zero\n\n",
 "sigma_uncurry_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem sigma_uncurry_smul [Monoid γ] [∀ i j, AddMonoid (δ i j)] [∀ i, DecidableEq (α i)]\n    [∀ (i j) (x : δ i j), Decidable (x ≠ 0)] [∀ i j, DistribMulAction γ (δ i j)] (r : γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i j)) :\n    sigmaUncurry («expr • » r f) = «expr • » r (sigmaUncurry f) :=\n  coeFn_injective rfl\n#align sigma_uncurry_smul sigma_uncurry_smul\n\n",
 "sigma_uncurry_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_uncurry_single [∀ i j, Zero (δ i j)] [DecidableEq ι] [∀ i, DecidableEq (α i)]\n    [∀ (i j) (x : δ i j), Decidable (x ≠ 0)] (i) (j : α i) (x : δ i j) :\n    sigmaUncurry\n        (single i\n          (single j x :\n            «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\"\n              (δ i j))) =\n      single ⟨i, j⟩ x :=\n  by\n  ext ⟨i', j'⟩\n  dsimp only\n  rw [sigma_uncurry_apply]\n  obtain rfl | hi := eq_or_ne i i'\n  · rw [single_eq_same]\n    obtain rfl | hj := eq_or_ne j j'\n    · rw [single_eq_same, single_eq_same]\n    · rw [single_eq_of_ne hj, single_eq_of_ne]\n      simpa using hj\n  · rw [single_eq_of_ne hi, single_eq_of_ne, zero_apply]\n    simpa using hi\n#align sigma_uncurry_single sigma_uncurry_single\n\n",
 "sigma_uncurry_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_uncurry_apply [∀ i j, Zero (δ i j)] [∀ i, DecidableEq (α i)] [∀ (i j) (x : δ i j), Decidable (x ≠ 0)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i j))\n    (i : ι) (j : α i) : sigmaUncurry f ⟨i, j⟩ = f i j :=\n  rfl\n#align sigma_uncurry_apply sigma_uncurry_apply\n\n",
 "sigma_uncurry_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_uncurry_add [∀ i j, AddZeroClass (δ i j)] [∀ i, DecidableEq (α i)]\n    [∀ (i j) (x : δ i j), Decidable (x ≠ 0)]\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i j)) :\n    sigmaUncurry (f + g) = sigmaUncurry f + sigmaUncurry g :=\n  coeFn_injective rfl\n#align sigma_uncurry_add sigma_uncurry_add\n\n",
 "sigma_curry_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_curry_zero [∀ i j, Zero (δ i j)] :\n    sigmaCurry\n        (0 :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\"\n            (δ i.1 i.2)) =\n      0 :=\n  by\n  ext (i j)\n  rw [sigma_curry_apply]\n  rfl\n#align sigma_curry_zero sigma_curry_zero\n\n",
 "sigma_curry_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem sigma_curry_smul [Monoid γ] [∀ i j, AddMonoid (δ i j)] [∀ i j, DistribMulAction γ (δ i j)] (r : γ)\n    (f :\n      «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i.1 i.2)) :\n    @sigmaCurry _ _ δ _ («expr • » r f) = «expr • » r (@sigmaCurry _ _ δ _ f) :=\n  by\n  ext (i j)\n  rw [@smul_apply _ _\n      (fun i =>\n        «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i j))\n      _ _ _ _ (sigma_curry _),\n    smul_apply, sigma_curry_apply, sigma_curry_apply, smul_apply]\n#align sigma_curry_smul sigma_curry_smul\n\n",
 "sigma_curry_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_curry_single [DecidableEq ι] [∀ i, DecidableEq (α i)] [∀ i j, Zero (δ i j)] (ij : Σi, α i)\n    (x : δ ij.1 ij.2) :\n    @sigmaCurry _ _ _ _ (single ij x) =\n      single ij.1\n        (single ij.2 x :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\"\n            (δ ij.1 j)) :=\n  by\n  obtain ⟨i, j⟩ := ij\n  ext (i' j')\n  dsimp only\n  rw [sigma_curry_apply]\n  obtain rfl | hi := eq_or_ne i i'\n  · rw [single_eq_same]\n    obtain rfl | hj := eq_or_ne j j'\n    · rw [single_eq_same, single_eq_same]\n    · rw [single_eq_of_ne, single_eq_of_ne hj]\n      simpa using hj\n  · rw [single_eq_of_ne, single_eq_of_ne hi, zero_apply]\n    simpa using hi\n#align sigma_curry_single sigma_curry_single\n\n",
 "sigma_curry_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n-- lean can't find these instances\n@[simp]\ntheorem sigma_curry_apply [∀ i j, Zero (δ i j)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i.1 i.2))\n    (i : ι) (j : α i) : sigmaCurry f i j = f ⟨i, j⟩ :=\n  by\n  dsimp only [sigma_curry]; by_cases h : f ⟨i, j⟩ = 0\n  · rw [h, mk_apply]\n    split_ifs\n    · rw [mk_apply]\n      split_ifs\n      · exact h\n      · rfl\n    · rfl\n  · rw [mk_of_mem, mk_of_mem]\n    · rfl\n    · rw [mem_preimage, mem_support_to_fun]\n      exact h\n    · rw [mem_image]\n      refine' ⟨⟨i, j⟩, _, rfl⟩\n      rw [mem_support_to_fun]\n      exact h\n#align sigma_curry_apply sigma_curry_apply\n\n",
 "sigma_curry_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem sigma_curry_add [∀ i j, AddZeroClass (δ i j)]\n    (f g :\n      «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i.1 i.2)) :\n    @sigmaCurry _ _ δ _ (f + g) = @sigmaCurry _ _ δ _ f + @sigmaCurry ι α δ _ g :=\n  by\n  ext (i j)\n  rw [@add_apply _\n      (fun i =>\n        «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (δ i j))\n      _ (sigma_curry _),\n    add_apply, sigma_curry_apply, sigma_curry_apply, sigma_curry_apply, add_apply]\n#align sigma_curry_add sigma_curry_add\n\n",
 "prod_zero_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_zero_index [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {h : ∀ i, β i → γ} :\n    (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)).prod\n        h =\n      1 :=\n  rfl\n#align prod_zero_index prod_zero_index\n\n",
 "prod_sum_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_sum_index {ι₁ : Type u₁} [DecidableEq ι₁] {β₁ : ι₁ → Type v₁} [∀ i₁, Zero (β₁ i₁)]\n    [∀ (i) (x : β₁ i), Decidable (x ≠ 0)] [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i₁)}\n    {g :\n      ∀ i₁,\n        β₁ i₁ → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} (h_zero : ∀ i, h i 0 = 1) (h_add : ∀ i b₁ b₂, h i (b₁ + b₂) = h i b₁ * h i b₂) :\n    (f.sum g).prod h = f.prod fun i b => (g i b).prod h :=\n  (prod_finset_sum_index h_zero h_add).symm\n#align prod_sum_index prod_sum_index\n\n",
 "prod_subtype_domain_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_subtype_domain_index [∀ i, Zero (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {p : ι → Prop} [DecidablePred p] {h : ∀ i, β i → γ} (hp : ∀ x ∈ v.support, p x) :\n    ((v.subtype_domain p).prod fun i b => h i b) = v.prod h :=\n  Finset.prod_bij (fun p _ => p) (by simp) (by simp) (fun ⟨a₀, ha₀⟩ ⟨a₁, ha₁⟩ => by simp) fun i hi =>\n    ⟨⟨i, hp i hi⟩, by simpa using hi, rfl⟩\n#align prod_subtype_domain_index prod_subtype_domain_index\n\n",
 "prod_single_index":
 "@[to_additive]\ntheorem prod_single_index [∀ i, Zero (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ] {i : ι} {b : β i}\n    {h : ∀ i, β i → γ} (h_zero : h i 0 = 1) : (single i b).prod h = h i b :=\n  by\n  by_cases h : b ≠ 0\n  · simp [Dfinsupp.prod, support_single_ne_zero h]\n  · rw [Classical.not_not] at h\n    simp [h, prod_zero_index, h_zero]\n    rfl\n#align prod_single_index prod_single_index\n\n",
 "prod_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp, to_additive]\ntheorem prod_one [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (f.prod fun i b => (1 : γ)) = 1 :=\n  Finset.prod_const_one\n#align prod_one prod_one\n\n",
 "prod_neg_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_neg_index [∀ i, AddGroup (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} (h0 : ∀ i, h i 0 = 1) : (-g).prod h = g.prod fun i b => h i (-b) :=\n  prod_mapRange_index h0\n#align prod_neg_index prod_neg_index\n\n",
 "prod_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp, to_additive]\ntheorem prod_mul [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h₁ h₂ : ∀ i, β i → γ} : (f.prod fun i b => h₁ i b * h₂ i b) = f.prod h₁ * f.prod h₂ :=\n  Finset.prod_mul_distrib\n#align prod_mul prod_mul\n\n",
 "prod_map_range_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_map_range_index {β₁ : ι → Type v₁} {β₂ : ι → Type v₂} [∀ i, Zero (β₁ i)] [∀ i, Zero (β₂ i)]\n    [∀ (i) (x : β₁ i), Decidable (x ≠ 0)] [∀ (i) (x : β₂ i), Decidable (x ≠ 0)] [CommMonoid γ] {f : ∀ i, β₁ i → β₂ i}\n    {hf : ∀ i, f i 0 = 0}\n    {g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)}\n    {h : ∀ i, β₂ i → γ} (h0 : ∀ i, h i 0 = 1) : (mapRange f hf g).prod h = g.prod fun i b => h i (f i b) :=\n  by\n  rw [map_range_def]\n  refine' (Finset.prod_subset support_mk_subset _).trans _\n  · intro i h1 h2\n    dsimp\n    simp [h1] at h2\n    dsimp at h2\n    simp [h1, h2, h0]\n  · refine' Finset.prod_congr rfl _\n    intro i h1\n    simp [h1]\n#align prod_map_range_index prod_map_range_index\n\n",
 "prod_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp, to_additive]\ntheorem prod_inv [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommGroup γ]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} : (f.prod fun i b => (h i b)⁻¹) = (f.prod h)⁻¹ :=\n  ((invMonoidHom : «expr →* » γ γ).map_prod _ f.support).symm\n#align prod_inv prod_inv\n\n",
 "prod_finset_sum_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[to_additive]\ntheorem prod_finset_sum_index {γ : Type w} {α : Type x} [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)]\n    [CommMonoid γ] {s : Finset α}\n    {g : α → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} (h_zero : ∀ i, h i 0 = 1) (h_add : ∀ i b₁ b₂, h i (b₁ + b₂) = h i b₁ * h i b₂) :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s ((g i).prod h) =\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g i)).prod\n        h :=\n  by\n  classical exact\n      Finset.induction_on s (by simp [prod_zero_index])\n        (by simp (config := { contextual := true }) [prod_add_index, h_zero, h_add])\n#align prod_finset_sum_index prod_finset_sum_index\n\n",
 "prod_eq_prod_fintype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n@[simp, to_additive]\ntheorem prod_eq_prod_fintype [Fintype ι] [∀ i, Zero (β i)] [∀ (i : ι) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    [f : ∀ i, β i → γ] (hf : ∀ i, f i 0 = 1) :\n    v.prod f =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (f i (Dfinsupp.equivFunOnFintype v i)) :=\n  by\n  suffices\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" v.support\n        (f i (v i)) =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (f i (v i))\n    by simp [Dfinsupp.prod, this]\n  apply Finset.prod_subset v.support.subset_univ\n  intro i hi' hi\n  rw [mem_support_iff, Classical.not_not] at hi\n  rw [hi, hf]\n#align prod_eq_prod_fintype prod_eq_prod_fintype\n\n",
 "prod_eq_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_eq_one [∀ i, Zero (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} (hyp : ∀ i, h i (f i) = 1) : f.prod h = 1 :=\n  Finset.prod_eq_one fun i hi => hyp i\n#align prod_eq_one prod_eq_one\n\n",
 "prod_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_comm {ι₁ ι₂ : Sort _} {β₁ : ι₁ → Type _} {β₂ : ι₂ → Type _} [DecidableEq ι₁] [DecidableEq ι₂]\n    [∀ i, Zero (β₁ i)] [∀ i, Zero (β₂ i)] [∀ (i) (x : β₁ i), Decidable (x ≠ 0)] [∀ (i) (x : β₂ i), Decidable (x ≠ 0)]\n    [CommMonoid γ]\n    (f₁ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i))\n    (f₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₂ i))\n    (h : ∀ i, β₁ i → ∀ i, β₂ i → γ) :\n    (f₁.prod fun i₁ x₁ => f₂.prod fun i₂ x₂ => h i₁ x₁ i₂ x₂) =\n      f₂.prod fun i₂ x₂ => f₁.prod fun i₁ x₁ => h i₁ x₁ i₂ x₂ :=\n  Finset.prod_comm\n#align prod_comm prod_comm\n\n",
 "prod_add_index":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[to_additive]\ntheorem prod_add_index [∀ i, AddCommMonoid (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ]\n    {f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {h : ∀ i, β i → γ} (h_zero : ∀ i, h i 0 = 1) (h_add : ∀ i b₁ b₂, h i (b₁ + b₂) = h i b₁ * h i b₂) :\n    (f + g).prod h = f.prod h * g.prod h :=\n  have f_eq :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n        (f.support ∪ g.support) (h i (f i)) =\n      f.prod h :=\n    (Finset.prod_subset (Finset.subset_union_left _ _) <| by\n        simp (config := { contextual := true }) [mem_support_iff, h_zero]).symm\n  have g_eq :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n        (f.support ∪ g.support) (h i (g i)) =\n      g.prod h :=\n    (Finset.prod_subset (Finset.subset_union_right _ _) <| by\n        simp (config := { contextual := true }) [mem_support_iff, h_zero]).symm\n  calc\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" (f + g).support\n          (h i ((f + g) i)) =\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n          (f.support ∪ g.support) (h i ((f + g) i)) :=\n      Finset.prod_subset support_add <| by simp (config := { contextual := true }) [mem_support_iff, h_zero]\n    _ =\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n            (f.support ∪ g.support) (h i (f i)) *\n          finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n            (f.support ∪ g.support) (h i (g i)) :=\n      by simp [h_add, Finset.prod_mul_distrib]\n    _ = _ := by rw [f_eq, g_eq]\n    \n#align prod_add_index prod_add_index\n\n",
 "piecewise_single_erase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem piecewise_single_erase\n    (x : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : (single i (x i)).piecewise (x.erase i) {i} = x :=\n  by\n  ext j; rw [piecewise_apply]; split_ifs\n  · rw [(id h : j = i), single_eq_same]\n  · exact erase_ne h\n#align piecewise_single_erase piecewise_single_erase\n\n",
 "piecewise_apply":
 "theorem piecewise_apply (i : ι) : x.piecewise y s i = if i ∈ s then x i else y i :=\n  zipWith_apply _ _ x y i\n#align piecewise_apply piecewise_apply\n\n",
 "nsmul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem nsmul_apply [∀ i, AddMonoid (β i)] (b : ℕ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : («expr • » b v) i = «expr • » b (v i) :=\n  rfl\n#align nsmul_apply nsmul_apply\n\n",
 "not_mem_support_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem not_mem_support_iff\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {i : ι} : i ∉ f.support ↔ f i = 0 :=\n  not_iff_comm.1 mem_support_iff.symm\n#align not_mem_support_iff not_mem_support_iff\n\n",
 "neg_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem neg_apply [∀ i, AddGroup (β i)]\n    (g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : (-g) i = -g i :=\n  rfl\n#align neg_apply neg_apply\n\n",
 "mk_zero":
 "@[simp]\ntheorem mk_zero [∀ i, Zero (β i)] {s : Finset ι} : mk s (0 : ∀ i : (↑s : Set ι), β i.1) = 0 :=\n  ext fun i => by simp only [mk_apply] <;> split_ifs <;> rfl\n#align mk_zero mk_zero\n\n",
 "mk_sub":
 "@[simp]\ntheorem mk_sub [∀ i, AddGroup (β i)] {s : Finset ι} {x y : ∀ i : (↑s : Set ι), β i.1} :\n    mk s (x - y) = mk s x - mk s y :=\n  ext fun i => by simp only [sub_apply, mk_apply] <;> split_ifs <;> [rfl, rw [sub_zero]]\n#align mk_sub mk_sub\n\n",
 "mk_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem mk_smul {s : Finset ι} (c : γ) (x : ∀ i : (↑s : Set ι), β (i : ι)) :\n    mk s («expr • » c x) = «expr • » c (mk s x) :=\n  ext fun i => by simp only [smul_apply, mk_apply] <;> split_ifs <;> [rfl, rw [smul_zero]]\n#align mk_smul mk_smul\n\n",
 "mk_of_not_mem":
 "theorem mk_of_not_mem (hi : i ∉ s) : (mk s x : ∀ i, β i) i = 0 :=\n  dif_neg hi\n#align mk_of_not_mem mk_of_not_mem\n\n",
 "mk_of_mem":
 "theorem mk_of_mem (hi : i ∈ s) : (mk s x : ∀ i, β i) i = x ⟨i, hi⟩ :=\n  dif_pos hi\n#align mk_of_mem mk_of_mem\n\n",
 "mk_neg":
 "@[simp]\ntheorem mk_neg [∀ i, AddGroup (β i)] {s : Finset ι} {x : ∀ i : (↑s : Set ι), β i.1} : mk s (-x) = -mk s x :=\n  ext fun i => by simp only [neg_apply, mk_apply] <;> split_ifs <;> [rfl, rw [neg_zero]]\n#align mk_neg mk_neg\n\n",
 "mk_injective":
 "theorem mk_injective (s : Finset ι) : function.injective (@mk ι β _ _ s) :=\n  by\n  intro x y H\n  ext i\n  have h1 : (mk s x : ∀ i, β i) i = (mk s y : ∀ i, β i) i := by rw [H]\n  cases' i with i hi\n  change i ∈ s at hi\n  dsimp only [mk_apply, Subtype.coe_mk] at h1\n  simpa only [dif_pos hi] using h1\n#align mk_injective mk_injective\n\n",
 "mk_apply":
 "@[simp]\ntheorem mk_apply : (mk s x : ∀ i, β i) i = if H : i ∈ s then x ⟨i, H⟩ else 0 :=\n  rfl\n#align mk_apply mk_apply\n\n",
 "mk_add":
 "@[simp]\ntheorem mk_add [∀ i, AddZeroClass (β i)] {s : Finset ι} {x y : ∀ i : (↑s : Set ι), β i} :\n    mk s (x + y) = mk s x + mk s y :=\n  ext fun i => by simp only [add_apply, mk_apply] <;> split_ifs <;> [rfl, rw [zero_add]]\n#align mk_add mk_add\n\n",
 "mem_supr_iff_exists_dfinsupp'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n#print AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp' /-\n/-- A variant of `add_submonoid.mem_supr_iff_exists_dfinsupp` with the RHS fully unfolded. -/\ntheorem AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp' [AddCommMonoid γ] (S : ι → AddSubmonoid γ)\n    [∀ (i) (x : S i), Decidable (x ≠ 0)] (x : γ) :\n    x ∈ supᵢ S ↔\n      ∃ f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (S i),\n        (f.sum fun i xi => ↑xi) = x :=\n  by\n  rw [AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp]\n  simp_rw [sum_add_hom_apply]\n  congr\n#align add_submonoid.mem_supr_iff_exists_dfinsupp' AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp'\n-/\n\n",
 "mem_supr_iff_exists_dfinsupp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n#print AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp /-\ntheorem AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp [AddCommMonoid γ] (S : ι → AddSubmonoid γ) (x : γ) :\n    x ∈ supᵢ S ↔\n      ∃ f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (S i),\n        Dfinsupp.sumAddHom (fun i => (S i).subtype) f = x :=\n  SetLike.ext_iff.mp (AddSubmonoid.supᵢ_eq_mrange_dfinsupp_sumAddHom S) x\n#align add_submonoid.mem_supr_iff_exists_dfinsupp AddSubmonoid.mem_supᵢ_iff_exists_dfinsupp\n-/\n\n",
 "mem_support_to_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem mem_support_to_fun\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) (i) :\n    i ∈ f.support ↔ f i ≠ 0 := by\n  cases' f with f s\n  induction s using Trunc.induction_on\n  dsimp only [support, Trunc.lift_mk]\n  rw [Finset.mem_filter, Multiset.mem_toFinset, coe_mk']\n  exact and_iff_right_of_imp (s.prop i).resolve_right\n#align mem_support_to_fun mem_support_to_fun\n\n",
 "mem_support_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem mem_support_iff\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    {i : ι} : i ∈ f.support ↔ f i ≠ 0 :=\n  f.mem_support_to_fun _\n#align mem_support_iff mem_support_iff\n\n",
 "mem_bsupr_iff_exists_dfinsupp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n#print AddSubmonoid.mem_bsupr_iff_exists_dfinsupp /-\ntheorem AddSubmonoid.mem_bsupr_iff_exists_dfinsupp (p : ι → Prop) [DecidablePred p] [AddCommMonoid γ]\n    (S : ι → AddSubmonoid γ) (x : γ) :\n    x ∈ «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (S i) ↔\n      ∃ f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (S i),\n        Dfinsupp.sumAddHom (fun i => (S i).subtype) (f.filter p) = x :=\n  SetLike.ext_iff.mp (AddSubmonoid.bsupr_eq_mrange_dfinsupp_sumAddHom p S) x\n#align add_submonoid.mem_bsupr_iff_exists_dfinsupp AddSubmonoid.mem_bsupr_iff_exists_dfinsupp\n-/\n\n",
 "map_range_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem map_range_zero (f : ∀ i, β₁ i → β₂ i) (hf : ∀ i, f i 0 = 0) :\n    mapRange f hf\n        (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)) =\n      0 :=\n  by\n  ext\n  simp only [map_range_apply, coe_zero, Pi.zero_apply, hf]\n#align map_range_zero map_range_zero\n\n",
 "map_range_single":
 "@[simp]\ntheorem map_range_single {f : ∀ i, β₁ i → β₂ i} {hf : ∀ i, f i 0 = 0} {i : ι} {b : β₁ i} :\n    mapRange f hf (single i b) = single i (f i b) :=\n  Dfinsupp.ext fun i' => by\n    by_cases i = i' <;>\n      [·\n        subst i'\n        simp, simp [h, hf]]\n#align map_range_single map_range_single\n\n",
 "map_range_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem map_range_id (h : ∀ i, id (0 : β₁ i) = 0 := fun i => rfl)\n    (g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)) :\n    mapRange (fun i => (id : β₁ i → β₁ i)) h g = g := by\n  ext\n  rfl\n#align map_range_id map_range_id\n\n",
 "map_range_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem map_range_def [∀ (i) (x : β₁ i), Decidable (x ≠ 0)] {f : ∀ i, β₁ i → β₂ i} {hf : ∀ i, f i 0 = 0}\n    {g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)} :\n    mapRange f hf g = mk g.support fun i => f i.1 (g i.1) :=\n  by\n  ext i\n  by_cases h : g i ≠ 0 <;> simp at h <;> simp [h, hf]\n#align map_range_def map_range_def\n\n",
 "map_range_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem map_range_comp (f : ∀ i, β₁ i → β₂ i) (f₂ : ∀ i, β i → β₁ i) (hf : ∀ i, f i 0 = 0) (hf₂ : ∀ i, f₂ i 0 = 0)\n    (h : ∀ i, (f i ∘ f₂ i) 0 = 0)\n    (g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    mapRange (fun i => f i ∘ f₂ i) h g = mapRange f hf (mapRange f₂ hf₂ g) :=\n  by\n  ext\n  simp only [map_range_apply]\n#align map_range_comp map_range_comp\n\n",
 "map_range_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem map_range_apply (f : ∀ i, β₁ i → β₂ i) (hf : ∀ i, f i 0 = 0)\n    (g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i))\n    (i : ι) : mapRange f hf g i = f i (g i) :=\n  rfl\n#align map_range_apply map_range_apply\n\n",
 "map_range_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem map_range_add (f : ∀ i, β₁ i → β₂ i) (hf : ∀ i, f i 0 = 0) (hf' : ∀ i x y, f i (x + y) = f i x + f i y)\n    (g₁ g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β₁ i)) :\n    mapRange f hf (g₁ + g₂) = mapRange f hf g₁ + mapRange f hf g₂ :=\n  by\n  ext\n  simp only [map_range_apply f, coe_add, Pi.add_apply, hf']\n#align map_range_add map_range_add\n\n",
 "map_dfinsupp_sum_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem map_dfinsupp_sum_add_hom [AddCommMonoid R] [AddCommMonoid S] [∀ i, AddZeroClass (β i)] (h : «expr ≃+ » R S)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, «expr →+ » (β i) R) : h (sumAddHom g f) = sumAddHom (fun i => h.to_add_monoid_hom.comp (g i)) f :=\n  AddMonoidHom.congr_fun (comp_liftAddHom h.to_add_monoid_hom g) f\n#align map_dfinsupp_sum_add_hom map_dfinsupp_sum_add_hom\n\n",
 "map_dfinsupp_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem map_dfinsupp_sum [NonAssocSemiring R] [NonAssocSemiring S] (h : «expr →+* » R S)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, β i → R) : h (f.sum g) = f.sum fun a b => h (g a b) :=\n  h.map_sum _ _\n#align map_dfinsupp_sum map_dfinsupp_sum\n\n",
 "map_dfinsupp_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp, to_additive]\ntheorem map_dfinsupp_prod [CommMonoid R] [CommMonoid S] (h : «expr ≃* » R S)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, β i → R) : h (f.prod g) = f.prod fun a b => h (g a b) :=\n  h.map_prod _ _\n#align map_dfinsupp_prod map_dfinsupp_prod\n\n",
 "lift_add_hom_single_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- The `dfinsupp` version of `finsupp.lift_add_hom_single_add_hom`,-/\n@[simp]\ntheorem lift_add_hom_single_add_hom [∀ i, AddCommMonoid (β i)] :\n    liftAddHom (singleAddHom β) =\n      AddMonoidHom.id\n        («exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :=\n  liftAddHom.to_equiv.apply_eq_iff_eq_symm_apply.2 rfl\n#align lift_add_hom_single_add_hom lift_add_hom_single_add_hom\n\n",
 "lift_add_hom_comp_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/-- The `dfinsupp` version of `finsupp.lift_add_hom_comp_single`,-/\ntheorem lift_add_hom_comp_single [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] (f : ∀ i, «expr →+ » (β i) γ) (i : ι) :\n    (liftAddHom f).comp (singleAddHom β i) = f i := by simp\n#align lift_add_hom_comp_single lift_add_hom_comp_single\n\n",
 "lift_add_hom_apply_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/-- The `dfinsupp` version of `finsupp.lift_add_hom_apply_single`,-/\ntheorem lift_add_hom_apply_single [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] (f : ∀ i, «expr →+ » (β i) γ) (i : ι)\n    (x : β i) : liftAddHom f (single i x) = f i x := by simp\n#align lift_add_hom_apply_single lift_add_hom_apply_single\n\n",
 "infinite_of_exists_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n#print Dfinsupp.infinite_of_exists_right /-\n/-- See `dfinsupp.infinite_of_right` for this in instance form, with the drawback that\nit needs all `π i` to be infinite. -/\ntheorem Dfinsupp.infinite_of_exists_right {ι : Sort _} {π : ι → Sort _} (i : ι) [Infinite (π i)] [∀ i, Zero (π i)] :\n    Infinite\n      («exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (π i)) :=\n  letI := Classical.decEq ι\n  Infinite.of_injective (fun j => Dfinsupp.single i j) Dfinsupp.single_injective\n#align dfinsupp.infinite_of_exists_right Dfinsupp.infinite_of_exists_right\n-/\n\n",
 "induction₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem induction₂\n    {p : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i) → Prop}\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (h0 : p 0)\n    (ha :\n      ∀ (i b)\n        (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)),\n        f i = 0 → b ≠ 0 → p f → p (f + single i b)) :\n    p f :=\n  Dfinsupp.induction f h0 fun i b f h1 h2 h3 =>\n    have h4 : f + single i b = single i b + f := by\n      ext j; by_cases H : i = j\n      · subst H\n        simp [h1]\n      · simp [H]\n    eq.rec_on h4 <| ha i b f h1 h2 h3\n#align induction₂ induction₂\n\n",
 "induction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\nprotected theorem induction\n    {p : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i) → Prop}\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (h0 : p 0)\n    (ha :\n      ∀ (i b)\n        (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)),\n        f i = 0 → b ≠ 0 → p f → p (single i b + f)) :\n    p f := by\n  cases' f with f s\n  induction s using Trunc.induction_on\n  cases' s with s H\n  induction' s using Multiset.induction_on with i s ih generalizing f\n  · have : f = 0 := funext fun i => (H i).resolve_left id\n    subst this\n    exact h0\n  have H2 : p (erase i ⟨f, Trunc.mk ⟨«expr ::ₘ » i s, H⟩⟩) :=\n    by\n    dsimp only [erase, Trunc.map, Trunc.bind, Trunc.liftOn, Trunc.lift_mk, Function.comp, Subtype.coe_mk]\n    have H2 : ∀ j, j ∈ s ∨ ite (j = i) 0 (f j) = 0 := by\n      intro j\n      cases' H j with H2 H2\n      · cases' Multiset.mem_cons.1 H2 with H3 H3\n        · right\n          exact if_pos H3\n        · left\n          exact H3\n      right\n      split_ifs <;> [rfl, exact H2]\n    have H3 :\n      (⟨fun j : ι => ite (j = i) 0 (f j), Trunc.mk ⟨«expr ::ₘ » i s, _⟩⟩ :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n        ⟨fun j : ι => ite (j = i) 0 (f j), Trunc.mk ⟨s, H2⟩⟩ :=\n      ext fun _ => rfl\n    rw [H3]\n    apply ih\n  have H3 :\n    single i _ + _ =\n      (⟨f, Trunc.mk ⟨«expr ::ₘ » i s, H⟩⟩ :\n        «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :=\n    single_add_erase _ _\n  rw [← H3]\n  change p (single i (f i) + _)\n  cases' classical.em (f i = 0) with h h\n  · rw [h, single_zero, zero_add]\n    exact H2\n  refine' ha _ _ _ _ h H2\n  rw [erase_same]\n#align induction induction\n\n",
 "finset_sum_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem finset_sum_apply {α} [∀ i, AddCommMonoid (β i)] (s : Finset α)\n    (g : α → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) :\n    (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g a)) i =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g a i) :=\n  (evalAddMonoidHom i : «expr →+ » _ (β i)).map_sum g s\n#align finset_sum_apply finset_sum_apply\n\n",
 "finite_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem finite_support\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    Set.Finite { i | f i ≠ 0 } := by\n  classical exact\n      Trunc.induction_on f.support' fun xs =>\n        (Multiset.toFinset ↑xs).finite_to_set.subset fun i H => Multiset.mem_toFinset.2 ((xs.prop i).resolve_right H)\n#align finite_support finite_support\n\n",
 "filter_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_zero [∀ i, Zero (β i)] (p : ι → Prop) [DecidablePred p] :\n    (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)).filter\n        p =\n      0 :=\n  by\n  ext\n  simp\n#align filter_zero filter_zero\n\n",
 "filter_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_sub [∀ i, AddGroup (β i)] (p : ι → Prop) [DecidablePred p]\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (f - g).filter p = f.filter p - g.filter p :=\n  (filterAddMonoidHom β p).map_sub f g\n#align filter_sub filter_sub\n\n",
 "filter_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem filter_smul [Monoid γ] [∀ i, AddMonoid (β i)] [∀ i, DistribMulAction γ (β i)] (p : ι → Prop) [DecidablePred p]\n    (r : γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    («expr • » r f).filter p = «expr • » r (f.filter p) :=\n  by\n  ext\n  simp [smul_ite]\n#align filter_smul filter_smul\n\n",
 "filter_single_pos":
 "@[simp]\ntheorem filter_single_pos {p : ι → Prop} [DecidablePred p] (i : ι) (x : β i) (h : p i) :\n    (single i x).filter p = single i x := by rw [filter_single, if_pos h]\n#align filter_single_pos filter_single_pos\n\n",
 "filter_single_neg":
 "@[simp]\ntheorem filter_single_neg {p : ι → Prop} [DecidablePred p] (i : ι) (x : β i) (h : ¬p i) : (single i x).filter p = 0 :=\n  by rw [filter_single, if_neg h]\n#align filter_single_neg filter_single_neg\n\n",
 "filter_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem filter_single (p : ι → Prop) [DecidablePred p] (i : ι) (x : β i) :\n    (single i x).filter p = if p i then single i x else 0 :=\n  by\n  ext j\n  have :=\n    apply_ite\n      (fun x :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i) =>\n        x j)\n      (p i) (single i x) 0\n  dsimp at this\n  rw [filter_apply, this]\n  obtain rfl | hij := Decidable.eq_or_ne i j\n  · rfl\n  · rw [single_eq_of_ne hij, if_t_t, if_t_t]\n#align filter_single filter_single\n\n",
 "filter_pos_add_filter_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem filter_pos_add_filter_neg [∀ i, AddZeroClass (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (p : ι → Prop) [DecidablePred p] : (f.filter p + f.filter fun i => ¬p i) = f :=\n  ext fun i => by simp only [add_apply, filter_apply] <;> split_ifs <;> simp only [add_zero, zero_add]\n#align filter_pos_add_filter_neg filter_pos_add_filter_neg\n\n",
 "filter_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_neg [∀ i, AddGroup (β i)] (p : ι → Prop) [DecidablePred p]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (-f).filter p = -f.filter p :=\n  (filterAddMonoidHom β p).map_neg f\n#align filter_neg filter_neg\n\n",
 "filter_ne_eq_erase'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_ne_eq_erase'\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : f.filter ((· ≠ ·) i) = f.erase i :=\n  by\n  rw [← filter_ne_eq_erase f i]\n  congr with j\n  exact ne_comm\n#align filter_ne_eq_erase' filter_ne_eq_erase'\n\n",
 "filter_ne_eq_erase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_ne_eq_erase\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : f.filter (· ≠ i) = f.erase i := by\n  ext1 j\n  simp only [Dfinsupp.filter_apply, Dfinsupp.erase_apply, ite_not]\n#align filter_ne_eq_erase filter_ne_eq_erase\n\n",
 "filter_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem filter_def\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f.filter p = mk (f.support.filter p) fun i => f i.1 := by\n  ext i <;> by_cases h1 : p i <;> by_cases h2 : f i ≠ 0 <;> simp at h2 <;> simp [h1, h2]\n#align filter_def filter_def\n\n",
 "filter_apply_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem filter_apply_pos [∀ i, Zero (β i)] {p : ι → Prop} [DecidablePred p]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    {i : ι} (h : p i) : f.filter p i = f i := by simp only [filter_apply, if_pos h]\n#align filter_apply_pos filter_apply_pos\n\n",
 "filter_apply_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem filter_apply_neg [∀ i, Zero (β i)] {p : ι → Prop} [DecidablePred p]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    {i : ι} (h : ¬p i) : f.filter p i = 0 := by simp only [filter_apply, if_neg h]\n#align filter_apply_neg filter_apply_neg\n\n",
 "filter_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_apply [∀ i, Zero (β i)] (p : ι → Prop) [DecidablePred p] (i : ι)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f.filter p i = if p i then f i else 0 :=\n  rfl\n#align filter_apply filter_apply\n\n",
 "filter_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem filter_add [∀ i, AddZeroClass (β i)] (p : ι → Prop) [DecidablePred p]\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (f + g).filter p = f.filter p + g.filter p := by\n  ext\n  simp [ite_add_zero]\n#align filter_add filter_add\n\n",
 "extend_with_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem extend_with_zero [DecidableEq ι] [∀ i, Zero (α i)] (x : α none) :\n    (0 :\n            «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\"\n              (α (some i))).extend_with\n        x =\n      single none x :=\n  by\n  ext (_ | j)\n  · rw [extend_with_none, single_eq_same]\n  · rw [extend_with_some, single_eq_of_ne (Option.some_ne_none _).symm, zero_apply]\n#align extend_with_zero extend_with_zero\n\n",
 "extend_with_some":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem extend_with_some [∀ i, Zero (α i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (α (some i)))\n    (a : α none) (i : ι) : f.extend_with a (some i) = f i :=\n  rfl\n#align extend_with_some extend_with_some\n\n",
 "extend_with_single_zero":
 "@[simp]\ntheorem extend_with_single_zero [DecidableEq ι] [∀ i, Zero (α i)] (i : ι) (x : α (some i)) :\n    (single i x).extend_with 0 = single (some i) x := by\n  ext (_ | j)\n  · rw [extend_with_none, single_eq_of_ne (Option.some_ne_none _)]\n  · rw [extend_with_some]\n    obtain rfl | hij := Decidable.eq_or_ne i j\n    · rw [single_eq_same, single_eq_same]\n    · rw [single_eq_of_ne hij, single_eq_of_ne ((Option.some_injective _).ne hij)]\n#align extend_with_single_zero extend_with_single_zero\n\n",
 "extend_with_none":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem extend_with_none [∀ i, Zero (α i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (α (some i)))\n    (a : α none) : f.extend_with a none = a :=\n  rfl\n#align extend_with_none extend_with_none\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- Deprecated. Use `fun_like.ext_iff` instead. -/\ntheorem ext_iff\n    {f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    f = g ↔ ∀ i, f i = g i :=\n  FunLike.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[ext]\ntheorem ext\n    {f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    (h : ∀ i, f i = g i) : f = g :=\n  FunLike.ext _ _ h\n#align ext ext\n\n",
 "erase_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem erase_zero (i : ι) :\n    erase i\n        (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      0 :=\n  ext fun _ => if_t_t _ _\n#align erase_zero erase_zero\n\n",
 "erase_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem erase_sub {β : ι → Type v} [∀ i, AddGroup (β i)] (i : ι)\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (f - g).erase i = f.erase i - g.erase i :=\n  (eraseAddHom β i).map_sub f g\n#align erase_sub erase_sub\n\n",
 "erase_single_same":
 "@[simp]\ntheorem erase_single_same (i : ι) (x : β i) : (single i x).erase i = 0 := by rw [erase_single, if_pos rfl]\n#align erase_single_same erase_single_same\n\n",
 "erase_single_ne":
 "@[simp]\ntheorem erase_single_ne {i j : ι} (x : β i) (h : i ≠ j) : (single i x).erase j = single i x := by\n  rw [erase_single, if_neg h]\n#align erase_single_ne erase_single_ne\n\n",
 "erase_single":
 "theorem erase_single (j : ι) (i : ι) (x : β i) : (single i x).erase j = if i = j then 0 else single i x := by\n  rw [← filter_ne_eq_erase, filter_single, ite_not]\n#align erase_single erase_single\n\n",
 "erase_same":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem erase_same {i : ι}\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (f.erase i) i = 0 := by simp\n#align erase_same erase_same\n\n",
 "erase_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem erase_neg {β : ι → Type v} [∀ i, AddGroup (β i)] (i : ι)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    (-f).erase i = -f.erase i :=\n  (eraseAddHom β i).map_neg f\n#align erase_neg erase_neg\n\n",
 "erase_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem erase_ne {i i' : ι}\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)}\n    (h : i' ≠ i) : (f.erase i) i' = f i' := by simp [h]\n#align erase_ne erase_ne\n\n",
 "erase_eq_sub_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem erase_eq_sub_single {β : ι → Type _} [∀ i, AddGroup (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : f.erase i = f - single i (f i) := by\n  ext j\n  rcases eq_or_ne i j with (rfl | h)\n  · simp\n  · simp [erase_ne h.symm, single_eq_of_ne h]\n#align erase_eq_sub_single erase_eq_sub_single\n\n",
 "erase_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem erase_def (i : ι)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f.erase i = mk (f.support.erase i) fun j => f j.1 := by\n  ext j\n  by_cases h1 : j = i <;> by_cases h2 : f j ≠ 0 <;> simp at h2 <;> simp [h1, h2]\n#align erase_def erase_def\n\n",
 "erase_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem erase_apply {i j : ι}\n    {f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)} :\n    (f.erase i) j = if j = i then 0 else f j :=\n  rfl\n#align erase_apply erase_apply\n\n",
 "erase_add_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem erase_add_single (i : ι)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f.erase i + single i (f i) = f :=\n  ext fun i' =>\n    if h : i = i' then by subst h <;> simp only [add_apply, single_apply, erase_apply, dif_pos rfl, if_pos, zero_add]\n    else by simp only [add_apply, single_apply, erase_apply, dif_neg h, if_neg (ne.symm h), add_zero]\n#align erase_add_single erase_add_single\n\n",
 "erase_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem erase_add (i : ι)\n    (f₁ f₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    erase i (f₁ + f₂) = erase i f₁ + erase i f₂ :=\n  ext fun _ => by simp [ite_zero_add]\n#align erase_add erase_add\n\n",
 "equiv_prod_dfinsupp_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem equiv_prod_dfinsupp_smul [Monoid γ] [∀ i, AddMonoid (α i)] [∀ i, DistribMulAction γ (α i)] (r : γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (α i)) :\n    equivProdDfinsupp («expr • » r f) = «expr • » r (equivProdDfinsupp f) :=\n  Prod.ext (smul_apply _ _ _) (comapDomain_smul _ _ _ _)\n#align equiv_prod_dfinsupp_smul equiv_prod_dfinsupp_smul\n\n",
 "equiv_prod_dfinsupp_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem equiv_prod_dfinsupp_add [∀ i, AddZeroClass (α i)]\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (α i)) :\n    equivProdDfinsupp (f + g) = equivProdDfinsupp f + equivProdDfinsupp g :=\n  Prod.ext (add_apply _ _ _) (comapDomain_add _ _ _ _)\n#align equiv_prod_dfinsupp_add equiv_prod_dfinsupp_add\n\n",
 "equiv_fun_on_fintype_symm_single":
 "@[simp]\ntheorem equiv_fun_on_fintype_symm_single [Fintype ι] (i : ι) (m : β i) :\n    (@Dfinsupp.equivFunOnFintype ι β _ _).symm (Pi.single i m) = Dfinsupp.single i m :=\n  by\n  ext i'\n  simp only [← single_eq_pi_single, equiv_fun_on_fintype_symm_coe]\n#align equiv_fun_on_fintype_symm_single equiv_fun_on_fintype_symm_single\n\n",
 "equiv_fun_on_fintype_symm_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem equiv_fun_on_fintype_symm_coe [Fintype ι]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    equivFunOnFintype.symm f = f :=\n  Equiv.symm_apply_apply _ _\n#align equiv_fun_on_fintype_symm_coe equiv_fun_on_fintype_symm_coe\n\n",
 "equiv_fun_on_fintype_single":
 "@[simp]\ntheorem equiv_fun_on_fintype_single [Fintype ι] (i : ι) (m : β i) :\n    (@Dfinsupp.equivFunOnFintype ι β _ _) (Dfinsupp.single i m) = Pi.single i m :=\n  by\n  ext\n  simp [Dfinsupp.single_eq_pi_single]\n#align equiv_fun_on_fintype_single equiv_fun_on_fintype_single\n\n",
 "eq_mk_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem eq_mk_support\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    f = mk f.support fun i => f i := by\n  change f = mk f.support fun i => f i.1\n  ext i\n  by_cases h : f i ≠ 0 <;> [skip, rw [Classical.not_not] at h] <;> simp [h]\n#align eq_mk_support eq_mk_support\n\n",
 "dfinsupp_sum_add_hom_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print dfinsupp_sumAddHom_mem /-\ntheorem dfinsupp_sumAddHom_mem [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] {S : Type _} [SetLike S γ]\n    [AddSubmonoidClass S γ] (s : S)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, «expr →+ » (β i) γ) (h : ∀ c, f c ≠ 0 → g c (f c) ∈ s) : Dfinsupp.sumAddHom g f ∈ s := by\n  classical\n    rw [Dfinsupp.sumAddHom_apply]\n    convert dfinsupp_sum_mem _ _ _ _\n    · infer_instance\n    exact h\n#align dfinsupp_sum_add_hom_mem dfinsupp_sumAddHom_mem\n-/\n\n",
 "dfinsupp_sum_add_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem dfinsupp_sum_add_hom_apply [AddZeroClass R] [AddCommMonoid S] [∀ i, AddZeroClass (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, «expr →+ » (β i) («expr →+ » R S)) (r : R) :\n    (sumAddHom g f) r = sumAddHom (fun i => (eval r).comp (g i)) f :=\n  map_dfinsupp_sumAddHom (eval r) f g\n#align dfinsupp_sum_add_hom_apply dfinsupp_sum_add_hom_apply\n\n",
 "dfinsupp_prod_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n#print dfinsupp_prod_mem /-\n@[to_additive]\ntheorem dfinsupp_prod_mem [∀ i, Zero (β i)] [∀ (i) (x : β i), Decidable (x ≠ 0)] [CommMonoid γ] {S : Type _}\n    [SetLike S γ] [SubmonoidClass S γ] (s : S)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, β i → γ) (h : ∀ c, f c ≠ 0 → g c (f c) ∈ s) : f.prod g ∈ s :=\n  prod_mem fun i hi => h _ <| mem_support_iff.1 hi\n#align dfinsupp_prod_mem dfinsupp_prod_mem\n#align dfinsupp_sum_mem dfinsupp_sum_mem\n-/\n\n",
 "dfinsupp_prod_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp, to_additive]\ntheorem dfinsupp_prod_apply [Monoid R] [CommMonoid S]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, β i → «expr →* » R S) (r : R) : (f.prod g) r = f.prod fun a b => (g a b) r :=\n  finset_prod_apply _ _ _\n#align dfinsupp_prod_apply dfinsupp_prod_apply\n\n",
 "comp_sum_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem comp_sum_add_hom {δ : Type _} [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] [AddCommMonoid δ] (g : «expr →+ » γ δ)\n    (f : ∀ i, «expr →+ » (β i) γ) : g.comp (sumAddHom f) = sumAddHom fun a => g.comp (f a) :=\n  comp_liftAddHom _ _\n#align comp_sum_add_hom comp_sum_add_hom\n\n",
 "comp_lift_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/-- The `dfinsupp` version of `finsupp.comp_lift_add_hom`,-/\ntheorem comp_lift_add_hom {δ : Type _} [∀ i, AddZeroClass (β i)] [AddCommMonoid γ] [AddCommMonoid δ]\n    (g : «expr →+ » γ δ) (f : ∀ i, «expr →+ » (β i) γ) : g.comp (liftAddHom f) = liftAddHom fun a => g.comp (f a) :=\n  liftAddHom.symm_apply_eq.1 <|\n    funext fun a => by rw [lift_add_hom_symm_apply, AddMonoidHom.comp_assoc, lift_add_hom_comp_single]\n#align comp_lift_add_hom comp_lift_add_hom\n\n",
 "comap_domain_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem comap_domain_zero [∀ i, Zero (β i)] (h : κ → ι) (hh : function.injective h) :\n    comapDomain h hh\n        (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      0 :=\n  by\n  ext\n  rw [zero_apply, comap_domain_apply, zero_apply]\n#align comap_domain_zero comap_domain_zero\n\n",
 "comap_domain_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem comap_domain_smul [Monoid γ] [∀ i, AddMonoid (β i)] [∀ i, DistribMulAction γ (β i)] (h : κ → ι)\n    (hh : function.injective h) (r : γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    comapDomain h hh («expr • » r f) = «expr • » r (comapDomain h hh f) :=\n  by\n  ext\n  rw [smul_apply, comap_domain_apply, smul_apply, comap_domain_apply]\n#align comap_domain_smul comap_domain_smul\n\n",
 "comap_domain_single":
 "@[simp]\ntheorem comap_domain_single [DecidableEq κ] [∀ i, Zero (β i)] (h : κ → ι) (hh : function.injective h) (k : κ)\n    (x : β (h k)) : comapDomain h hh (single (h k) x) = single k x :=\n  by\n  ext\n  rw [comap_domain_apply]\n  obtain rfl | hik := Decidable.eq_or_ne i k\n  · rw [single_eq_same, single_eq_same]\n  · rw [single_eq_of_ne hik.symm, single_eq_of_ne (hh.ne hik.symm)]\n#align comap_domain_single comap_domain_single\n\n",
 "comap_domain_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem comap_domain_apply [∀ i, Zero (β i)] (h : κ → ι) (hh : function.injective h)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (k : κ) : comapDomain h hh f k = f (h k) :=\n  rfl\n#align comap_domain_apply comap_domain_apply\n\n",
 "comap_domain_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem comap_domain_add [∀ i, AddZeroClass (β i)] (h : κ → ι) (hh : function.injective h)\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    comapDomain h hh (f + g) = comapDomain h hh f + comapDomain h hh g :=\n  by\n  ext\n  rw [add_apply, comap_domain_apply, comap_domain_apply, comap_domain_apply, add_apply]\n#align comap_domain_add comap_domain_add\n\n",
 "comap_domain'_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem comap_domain'_zero [∀ i, Zero (β i)] (h : κ → ι) {h' : ι → κ} (hh' : function.left_inverse h' h) :\n    comapDomain' h hh'\n        (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      0 :=\n  by\n  ext\n  rw [zero_apply, comap_domain'_apply, zero_apply]\n#align comap_domain'_zero comap_domain'_zero\n\n",
 "comap_domain'_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem comap_domain'_smul [Monoid γ] [∀ i, AddMonoid (β i)] [∀ i, DistribMulAction γ (β i)] (h : κ → ι) {h' : ι → κ}\n    (hh' : function.left_inverse h' h) (r : γ)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    comapDomain' h hh' («expr • » r f) = «expr • » r (comapDomain' h hh' f) :=\n  by\n  ext\n  rw [smul_apply, comap_domain'_apply, smul_apply, comap_domain'_apply]\n#align comap_domain'_smul comap_domain'_smul\n\n",
 "comap_domain'_single":
 "@[simp]\ntheorem comap_domain'_single [DecidableEq ι] [DecidableEq κ] [∀ i, Zero (β i)] (h : κ → ι) {h' : ι → κ}\n    (hh' : function.left_inverse h' h) (k : κ) (x : β (h k)) : comapDomain' h hh' (single (h k) x) = single k x :=\n  by\n  ext\n  rw [comap_domain'_apply]\n  obtain rfl | hik := Decidable.eq_or_ne i k\n  · rw [single_eq_same, single_eq_same]\n  · rw [single_eq_of_ne hik.symm, single_eq_of_ne (hh'.injective.ne hik.symm)]\n#align comap_domain'_single comap_domain'_single\n\n",
 "comap_domain'_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem comap_domain'_apply [∀ i, Zero (β i)] (h : κ → ι) {h' : ι → κ} (hh' : function.left_inverse h' h)\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (k : κ) : comapDomain' h hh' f k = f (h k) :=\n  rfl\n#align comap_domain'_apply comap_domain'_apply\n\n",
 "comap_domain'_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem comap_domain'_add [∀ i, AddZeroClass (β i)] (h : κ → ι) {h' : ι → κ} (hh' : function.left_inverse h' h)\n    (f g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    comapDomain' h hh' (f + g) = comapDomain' h hh' f + comapDomain' h hh' g :=\n  by\n  ext\n  rw [add_apply, comap_domain'_apply, comap_domain'_apply, comap_domain'_apply, add_apply]\n#align comap_domain'_add comap_domain'_add\n\n",
 "coe_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_zsmul [∀ i, AddGroup (β i)] (b : ℤ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » («expr • » b v) = «expr • » b v :=\n  rfl\n#align coe_zsmul coe_zsmul\n\n",
 "coe_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem coe_zero :\n    «expr⇑ »\n        (0 : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      0 :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_update":
 "@[simp]\ntheorem coe_update : (f.update i b : ∀ i : ι, β i) = Function.update f i b :=\n  rfl\n#align coe_update coe_update\n\n",
 "coe_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_sub [∀ i, AddGroup (β i)]\n    (g₁ g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » (g₁ - g₂) = g₁ - g₂ :=\n  rfl\n#align coe_sub coe_sub\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_smul [Monoid γ] [∀ i, AddMonoid (β i)] [∀ i, DistribMulAction γ (β i)] (b : γ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » («expr • » b v) = «expr • » b v :=\n  rfl\n#align coe_smul coe_smul\n\n",
 "coe_piecewise":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_piecewise : «expr⇑ » (x.piecewise y s) = s.piecewise x y :=\n  by\n  ext\n  apply piecewise_apply\n#align coe_piecewise coe_piecewise\n\n",
 "coe_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_nsmul [∀ i, AddMonoid (β i)] (b : ℕ)\n    (v : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » («expr • » b v) = «expr • » b v :=\n  rfl\n#align coe_nsmul coe_nsmul\n\n",
 "coe_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_neg [∀ i, AddGroup (β i)]\n    (g : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » (-g) = -g :=\n  rfl\n#align coe_neg coe_neg\n\n",
 "coe_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n@[simp]\ntheorem coe_mk' (f : ∀ i, β i) (s) :\n    «expr⇑ »\n        (⟨f, s⟩ :\n          «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) =\n      f :=\n  rfl\n#align coe_mk' coe_mk'\n\n",
 "coe_fn_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- Deprecated. Use `fun_like.coe_injective` instead. -/\ntheorem coe_fn_injective :\n    @function.injective\n      («exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n      (∀ i, β i) coe_fn :=\n  FunLike.coe_injective\n#align coe_fn_injective coe_fn_injective\n\n",
 "coe_finset_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem coe_finset_sum {α} [∀ i, AddCommMonoid (β i)] (s : Finset α)\n    (g : α → «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g a)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g a) :=\n  (coeFnAddMonoidHom : «expr →+ » _ (∀ i, β i)).map_sum g s\n#align coe_finset_sum coe_finset_sum\n\n",
 "coe_dfinsupp_sum_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem coe_dfinsupp_sum_add_hom [AddZeroClass R] [AddCommMonoid S] [∀ i, AddZeroClass (β i)]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, «expr →+ » (β i) («expr →+ » R S)) :\n    «expr⇑ » (sumAddHom g f) = sumAddHom (fun i => (coeFn R S).comp (g i)) f :=\n  map_dfinsupp_sumAddHom (coeFn R S) f g\n#align coe_dfinsupp_sum_add_hom coe_dfinsupp_sum_add_hom\n\n",
 "coe_dfinsupp_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[to_additive]\ntheorem coe_dfinsupp_prod [Monoid R] [CommMonoid S]\n    (f : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (g : ∀ i, β i → «expr →* » R S) : «expr⇑ » (f.prod g) = f.prod fun a b => g a b :=\n  coe_finset_prod _ _\n#align coe_dfinsupp_prod coe_dfinsupp_prod\n\n",
 "coe_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_add [∀ i, AddZeroClass (β i)]\n    (g₁ g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) :\n    «expr⇑ » (g₁ + g₂) = g₁ + g₂ :=\n  rfl\n#align coe_add coe_add\n\n",
 "bsupr_eq_mrange_dfinsupp_sum_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n#print AddSubmonoid.bsupr_eq_mrange_dfinsupp_sumAddHom /-\n/-- The bounded supremum of a family of commutative additive submonoids is equal to the range of\n`dfinsupp.sum_add_hom` composed with `dfinsupp.filter_add_monoid_hom`; that is, every element in the\nbounded `supr` can be produced from taking a finite number of non-zero elements from the `S i` that\nsatisfy `p i`, coercing them to `γ`, and summing them. -/\ntheorem AddSubmonoid.bsupr_eq_mrange_dfinsupp_sumAddHom (p : ι → Prop) [DecidablePred p] [AddCommMonoid γ]\n    (S : ι → AddSubmonoid γ) :\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (S i) =\n      ((sumAddHom fun i => (S i).subtype).comp (filterAddMonoidHom _ p)).mrange :=\n  by\n  apply le_antisymm\n  · refine' supᵢ₂_le fun i hi y hy => ⟨Dfinsupp.single i ⟨y, hy⟩, _⟩\n    rw [AddMonoidHom.comp_apply, filter_add_monoid_hom_apply, filter_single_pos _ _ hi]\n    exact sum_add_hom_single _ _ _\n  · rintro x ⟨v, rfl⟩\n    refine' dfinsupp_sumAddHom_mem _ _ _ fun i hi => _\n    refine' AddSubmonoid.mem_supᵢ_of_mem i _\n    by_cases hp : p i\n    · simp [hp]\n    · simp [hp]\n#align add_submonoid.bsupr_eq_mrange_dfinsupp_sum_add_hom AddSubmonoid.bsupr_eq_mrange_dfinsupp_sumAddHom\n-/\n\n",
 "add_monoid_hom_id":
 "@[simp]\ntheorem map_range.add_monoid_hom_id : (mapRange.addMonoidHom fun i => AddMonoidHom.id (β₂ i)) = AddMonoidHom.id _ :=\n  AddMonoidHom.ext mapRange_id\n#align map_range.add_monoid_hom_id map_range.add_monoid_hom_id\n\n",
 "add_monoid_hom_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem map_range.add_monoid_hom_comp (f : ∀ i, «expr →+ » (β₁ i) (β₂ i)) (f₂ : ∀ i, «expr →+ » (β i) (β₁ i)) :\n    (mapRange.addMonoidHom fun i => (f i).comp (f₂ i)) = (mapRange.addMonoidHom f).comp (mapRange.addMonoidHom f₂) :=\n  AddMonoidHom.ext <| mapRange_comp (fun i x => f i x) (fun i x => f₂ i x) _ _ _\n#align map_range.add_monoid_hom_comp map_range.add_monoid_hom_comp\n\n",
 "add_hom_ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- If two additive homomorphisms from `Π₀ i, β i` are equal on each `single a b`, then\nthey are equal.\n\nSee note [partially-applied ext lemmas]. -/\n@[ext]\ntheorem add_hom_ext' {γ : Type w} [AddZeroClass γ]\n    ⦃f g :\n      «expr →+ »\n        («exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) γ⦄\n    (H : ∀ x, f.comp (singleAddHom β x) = g.comp (singleAddHom β x)) : f = g :=\n  addHom_ext fun x => AddMonoidHom.congr_fun (H x)\n#align add_hom_ext' add_hom_ext'\n\n",
 "add_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/-- If two additive homomorphisms from `Π₀ i, β i` are equal on each `single a b`, then\nthey are equal. -/\ntheorem add_hom_ext {γ : Type w} [AddZeroClass γ]\n    ⦃f g :\n      «expr →+ »\n        («exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i)) γ⦄\n    (H : ∀ (i : ι) (y : β i), f (single i y) = g (single i y)) : f = g :=\n  by\n  refine' AddMonoidHom.eq_of_eqOn_denseM add_closure_Union_range_single fun f hf => _\n  simp only [Set.mem_unionᵢ, Set.mem_range] at hf\n  rcases hf with ⟨x, y, rfl⟩\n  apply H\n#align add_hom_ext add_hom_ext\n\n",
 "add_equiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\ntheorem map_range.add_equiv_trans (f : ∀ i, «expr ≃+ » (β i) (β₁ i)) (f₂ : ∀ i, «expr ≃+ » (β₁ i) (β₂ i)) :\n    (mapRange.addEquiv fun i => (f i).trans (f₂ i)) = (mapRange.addEquiv f).trans (mapRange.addEquiv f₂) :=\n  AddEquiv.ext <| mapRange_comp (fun i x => f₂ i x) (fun i x => f i x) _ _ _\n#align map_range.add_equiv_trans map_range.add_equiv_trans\n\n",
 "add_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n@[simp]\ntheorem map_range.add_equiv_symm (e : ∀ i, «expr ≃+ » (β₁ i) (β₂ i)) :\n    (mapRange.addEquiv e).symm = mapRange.addEquiv fun i => (e i).symm :=\n  rfl\n#align map_range.add_equiv_symm map_range.add_equiv_symm\n\n",
 "add_equiv_refl":
 "@[simp]\ntheorem map_range.add_equiv_refl : (mapRange.addEquiv fun i => AddEquiv.refl (β₁ i)) = AddEquiv.refl _ :=\n  AddEquiv.ext mapRange_id\n#align map_range.add_equiv_refl map_range.add_equiv_refl\n\n",
 "add_closure_Union_range_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem add_closure_Union_range_single :\n    AddSubmonoid.closure\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (Set.range\n            (single i :\n              β i →\n                «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\"\n                  (β i)))) =\n      «expr⊤» :=\n  top_unique fun x hx => by\n    apply Dfinsupp.induction x\n    exact AddSubmonoid.zero_mem _\n    exact fun a b f ha hb hf =>\n      AddSubmonoid.add_mem _ (AddSubmonoid.subset_closure <| Set.mem_unionᵢ.2 ⟨a, Set.mem_range_self _⟩) hf\n#align add_closure_Union_range_single add_closure_Union_range_single\n\n",
 "add_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprΠ₀ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , » -/\ntheorem add_apply [∀ i, AddZeroClass (β i)]\n    (g₁ g₂ : «exprΠ₀ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«exprΠ₀ , »\" (β i))\n    (i : ι) : (g₁ + g₂) i = g₁ i + g₂ i :=\n  rfl\n#align add_apply add_apply\n\n"}