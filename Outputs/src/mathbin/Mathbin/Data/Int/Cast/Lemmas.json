{"to_nat_lt":
 "theorem to_nat_lt {a : ℤ} {b : ℕ} (hb : b ≠ 0) : a.to_nat < b ↔ a < b :=\n  by\n  rw [← to_nat_lt_to_nat, to_nat_coe_nat]\n  exact coe_nat_pos.2 hb.bot_lt\n#align to_nat_lt to_nat_lt\n\n",
 "toLex_intCast":
 "#print toLex_intCast /-\n@[simp]\ntheorem toLex_intCast [IntCast α] (n : ℤ) : toLex (n : α) = n :=\n  rfl\n#align to_lex_int_cast toLex_intCast\n-/\n\n",
 "toDual_intCast":
 "#print toDual_intCast /-\n@[simp]\ntheorem toDual_intCast [IntCast α] (n : ℤ) : toDual (n : α) = n :=\n  rfl\n#align to_dual_int_cast toDual_intCast\n-/\n\n",
 "ofLex_intCast":
 "#print ofLex_intCast /-\n@[simp]\ntheorem ofLex_intCast [IntCast α] (n : ℤ) : (ofLex n : α) = n :=\n  rfl\n#align of_lex_int_cast ofLex_intCast\n-/\n\n",
 "ofDual_intCast":
 "#print ofDual_intCast /-\n@[simp]\ntheorem ofDual_intCast [IntCast α] (n : ℤ) : (ofDual n : α) = n :=\n  rfl\n#align of_dual_int_cast ofDual_intCast\n-/\n\n",
 "nneg_mul_add_sq_of_abs_le_one":
 "theorem nneg_mul_add_sq_of_abs_le_one {x : α} (hx : |x| ≤ 1) : (0 : α) ≤ n * x + n * n :=\n  by\n  have hnx : 0 < n → 0 ≤ x + n := fun hn =>\n    by\n    convert add_le_add (neg_le_of_abs_le hx) (cast_one_le_of_pos hn)\n    rw [add_left_neg]\n  have hnx' : n < 0 → x + n ≤ 0 := fun hn =>\n    by\n    convert add_le_add (le_of_abs_le hx) (cast_le_neg_one_of_neg hn)\n    rw [add_right_neg]\n  rw [← mul_add, mul_nonneg_iff]\n  rcases lt_trichotomy n 0 with (h | rfl | h)\n  · exact or.inr ⟨by exact_mod_cast h.le, hnx' h⟩\n  · simp [le_total 0 x]\n  · exact or.inl ⟨by exact_mod_cast h.le, hnx h⟩\n#align nneg_mul_add_sq_of_abs_le_one nneg_mul_add_sq_of_abs_le_one\n\n",
 "nat_mod_lt":
 "theorem nat_mod_lt {a : ℤ} {b : ℕ} (hb : b ≠ 0) : a.nat_mod b < b :=\n  (toNat_lt' hb).2 <| emod_lt_of_pos _ <| coe_nat_pos.2 hb.bot_lt\n#align nat_mod_lt nat_mod_lt\n\n",
 "map_intCast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print map_intCast /-\n@[simp]\ntheorem map_intCast [RingHomClass F α β] (f : F) (n : ℤ) : f n = n :=\n  eq_intCast ((f : «expr →+* » α β).comp (Int.castRingHom α)) n\n#align map_int_cast map_intCast\n-/\n\n",
 "int_apply":
 "theorem int_apply (n : ℤ) (i : ι) : (n : ∀ i, π i) i = n :=\n  rfl\n#align int_apply int_apply\n\n",
 "ext_mint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[ext]\ntheorem ext_mint {f g : «expr →* » (Multiplicative ℤ) M} (h1 : f (ofAdd 1) = g (ofAdd 1)) : f = g :=\n  MonoidHom.ext <| AddMonoidHom.ext_iff.mp <| @AddMonoidHom.ext_int _ _ f.to_additive g.to_additive h1\n#align ext_mint ext_mint\n\n",
 "ext_int'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n#print ext_int' /-\n/-- If two `monoid_with_zero_hom`s agree on `-1` and the _positive_ naturals then they are equal. -/\ntheorem ext_int' [MonoidWithZero α] [MonoidWithZeroHomClass F ℤ α] {f g : F} (h_neg_one : f (-1) = g (-1))\n    (h_pos : ∀ n : ℕ, 0 < n → f n = g n) : f = g :=\n  FunLike.ext _ _ fun n =>\n    haveI :=\n      FunLike.congr_fun\n        (@MonoidWithZeroHom.ext_int _ _ (f : «expr →*₀ » ℤ α) (g : «expr →*₀ » ℤ α) h_neg_one <|\n          MonoidWithZeroHom.ext_nat h_pos)\n        n\n    this\n#align ext_int' ext_int'\n-/\n\n",
 "ext_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem ext_int {R : Type _} [NonAssocSemiring R] (f g : «expr →+* » ℤ R) : f = g :=\n  coe_addMonoidHom_injective <| AddMonoidHom.ext_int <| f.map_one.trans g.map_one.symm\n#align ext_int ext_int\n\n",
 "eq_int_cast_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem eq_int_cast_hom (f : «expr →+ » ℤ A) (h1 : f 1 = 1) : f = Int.castAddHom A :=\n  ext_int <| by simp [h1]\n#align eq_int_cast_hom eq_int_cast_hom\n\n",
 "eq_intCast'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print eq_intCast' /-\ntheorem eq_intCast' (f : «expr →+* » ℤ α) : f = Int.castRingHom α :=\n  RingHom.ext <| eq_intCast f\n#align eq_int_cast' eq_intCast'\n-/\n\n",
 "eq_intCast":
 "#print eq_intCast /-\n@[simp]\ntheorem eq_intCast [RingHomClass F ℤ α] (f : F) (n : ℤ) : f n = n :=\n  eq_intCast' f (map_one _) n\n#align eq_int_cast eq_intCast\n-/\n\n",
 "elim_intCast_intCast":
 "#print Sum.elim_intCast_intCast /-\ntheorem Sum.elim_intCast_intCast {α β γ : Type _} [IntCast γ] (n : ℤ) : Sum.elim (n : α → γ) (n : β → γ) = n :=\n  @Sum.elim_lam_const_lam_const α β γ n\n#align sum.elim_int_cast_int_cast Sum.elim_intCast_intCast\n-/\n\n",
 "commute_cast":
 "theorem commute_cast [NonAssocRing α] (x : α) (m : ℤ) : Commute x m :=\n  (m.cast_commute x).symm\n#align commute_cast commute_cast\n\n",
 "coe_nat_succ_pos":
 "theorem coe_nat_succ_pos (n : ℕ) : 0 < (n.succ : ℤ) :=\n  Int.coe_nat_pos.2 (succ_pos n)\n#align coe_nat_succ_pos coe_nat_succ_pos\n\n",
 "coe_nat_pos":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem coe_nat_pos {n : ℕ} : (0 : ℤ) < n ↔ 0 < n :=\n  Nat.cast_pos\n#align coe_nat_pos coe_nat_pos\n\n",
 "coe_int_dvd":
 "theorem coe_int_dvd [CommRing α] (m n : ℤ) (h : m ∣ n) : (m : α) ∣ (n : α) :=\n  RingHom.map_dvd (Int.castRingHom α) h\n#align coe_int_dvd coe_int_dvd\n\n",
 "coe_int":
 "@[simp]\ntheorem coe_int (n : ℤ) : (n : ∀ i, π i) = fun _ => n :=\n  rfl\n#align coe_int coe_int\n\n",
 "coe_cast_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_cast_ring_hom [NonAssocRing α] : «expr⇑ » (castRingHom α) = coe :=\n  rfl\n#align coe_cast_ring_hom coe_cast_ring_hom\n\n",
 "coe_cast_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_cast_add_hom [AddGroupWithOne α] : «expr⇑ » (castAddHom α) = coe :=\n  rfl\n#align coe_cast_add_hom coe_cast_add_hom\n\n",
 "cast_strict_mono":
 "theorem cast_strict_mono [OrderedRing α] [Nontrivial α] : StrictMono (coe : ℤ → α) :=\n  strictMono_of_le_iff_le fun m n => cast_le.symm\n#align cast_strict_mono cast_strict_mono\n\n",
 "cast_pos":
 "@[simp]\ntheorem cast_pos [OrderedRing α] [Nontrivial α] {n : ℤ} : (0 : α) < n ↔ 0 < n := by rw [← cast_zero, cast_lt]\n#align cast_pos cast_pos\n\n",
 "cast_one_le_of_pos":
 "theorem cast_one_le_of_pos (h : 0 < a) : (1 : α) ≤ a := by exact_mod_cast int.add_one_le_of_lt h\n#align cast_one_le_of_pos cast_one_le_of_pos\n\n",
 "cast_nonpos":
 "@[simp]\ntheorem cast_nonpos [OrderedRing α] [Nontrivial α] {n : ℤ} : (n : α) ≤ 0 ↔ n ≤ 0 := by rw [← cast_zero, cast_le]\n#align cast_nonpos cast_nonpos\n\n",
 "cast_nonneg":
 "@[simp]\ntheorem cast_nonneg [OrderedRing α] [Nontrivial α] : ∀ {n : ℤ}, (0 : α) ≤ n ↔ 0 ≤ n\n  | (n : ℕ) => by simp\n  | -[n+1] => by\n    have : -(n : α) < 1 := lt_of_le_of_lt (by simp) zero_lt_one\n    simpa [(neg_succ_lt_zero n).not_le, ← sub_eq_add_neg, le_neg] using this.not_le\n#align cast_nonneg cast_nonneg\n\n",
 "cast_nat_abs":
 "theorem cast_nat_abs : (n.nat_abs : α) = |n| := by\n  cases n\n  · simp\n  · simp only [Int.natAbs, Int.cast_negSucc, abs_neg, ← Nat.cast_succ, Nat.abs_cast]\n#align cast_nat_abs cast_nat_abs\n\n",
 "cast_mul":
 "@[simp, norm_cast]\ntheorem cast_mul [NonAssocRing α] : ∀ m n, ((m * n : ℤ) : α) = m * n := fun m =>\n  Int.inductionOn' m 0 (by simp) (fun k _ ih n => by simp [add_mul, ih]) fun k _ ih n => by simp [sub_mul, ih]\n#align cast_mul cast_mul\n\n",
 "cast_mono":
 "theorem cast_mono [OrderedRing α] : Monotone (coe : ℤ → α) :=\n  by\n  intro m n h\n  rw [← sub_nonneg] at h\n  lift n - m to ℕ using h with k\n  rw [← sub_nonneg, ← cast_sub, ← h_1, cast_coe_nat]\n  exact k.cast_nonneg\n#align cast_mono cast_mono\n\n",
 "cast_min":
 "@[simp, norm_cast]\ntheorem cast_min : (↑(min a b) : α) = min a b :=\n  Monotone.map_min cast_mono\n#align cast_min cast_min\n\n",
 "cast_max":
 "@[simp, norm_cast]\ntheorem cast_max : (↑(max a b) : α) = max a b :=\n  Monotone.map_max cast_mono\n#align cast_max cast_max\n\n",
 "cast_lt_zero":
 "@[simp]\ntheorem cast_lt_zero [OrderedRing α] [Nontrivial α] {n : ℤ} : (n : α) < 0 ↔ n < 0 := by rw [← cast_zero, cast_lt]\n#align cast_lt_zero cast_lt_zero\n\n",
 "cast_lt":
 "@[simp, norm_cast]\ntheorem cast_lt [OrderedRing α] [Nontrivial α] {m n : ℤ} : (m : α) < n ↔ m < n :=\n  cast_strictMono.lt_iff_lt\n#align cast_lt cast_lt\n\n",
 "cast_le_neg_one_or_one_le_cast_of_ne_zero":
 "theorem cast_le_neg_one_or_one_le_cast_of_ne_zero (hn : n ≠ 0) : (n : α) ≤ -1 ∨ 1 ≤ (n : α) :=\n  hn.lt_or_lt.imp cast_le_neg_one_of_neg cast_one_le_of_pos\n#align cast_le_neg_one_or_one_le_cast_of_ne_zero cast_le_neg_one_or_one_le_cast_of_ne_zero\n\n",
 "cast_le_neg_one_of_neg":
 "theorem cast_le_neg_one_of_neg (h : a < 0) : (a : α) ≤ -1 :=\n  by\n  rw [← Int.cast_one, ← Int.cast_neg, cast_le]\n  exact int.le_sub_one_of_lt h\n#align cast_le_neg_one_of_neg cast_le_neg_one_of_neg\n\n",
 "cast_le":
 "@[simp, norm_cast]\ntheorem cast_le [OrderedRing α] [Nontrivial α] {m n : ℤ} : (m : α) ≤ n ↔ m ≤ n := by\n  rw [← sub_nonneg, ← cast_sub, cast_nonneg, sub_nonneg]\n#align cast_le cast_le\n\n",
 "cast_ite":
 "@[simp, norm_cast]\ntheorem cast_ite [AddGroupWithOne α] (P : Prop) [Decidable P] (m n : ℤ) : ((ite P m n : ℤ) : α) = ite P m n :=\n  apply_ite _ _ _ _\n#align cast_ite cast_ite\n\n",
 "cast_id":
 "@[simp, norm_cast]\ntheorem Int.cast_id (n : ℤ) : ↑n = n :=\n  (eq_intCast (RingHom.id ℤ) _).symm\n#align int.cast_id Int.cast_idₓ\n\n",
 "cast_commute":
 "theorem cast_commute [NonAssocRing α] : ∀ (m : ℤ) (x : α), Commute (↑m) x\n  | (n : ℕ), x => by simpa using n.cast_commute x\n  | -[n+1], x => by\n    simpa only [cast_neg_succ_of_nat, Commute.neg_left_iff, Commute.neg_right_iff] using (n + 1).cast_commute (-x)\n#align cast_commute cast_commute\n\n",
 "cast_comm":
 "theorem cast_comm [NonAssocRing α] (m : ℤ) (x : α) : (m : α) * x = x * m :=\n  (cast_commute m x).eq\n#align cast_comm cast_comm\n\n",
 "cast_abs":
 "@[simp, norm_cast]\ntheorem cast_abs : ((|a| : ℤ) : α) = |a| := by simp [abs_eq_max_neg]\n#align cast_abs cast_abs\n\n",
 "castRingHom_int":
 "#print Int.castRingHom_int /-\n@[simp]\ntheorem Int.castRingHom_int : Int.castRingHom ℤ = RingHom.id ℤ :=\n  (RingHom.id ℤ).eq_int_cast'.symm\n#align int.cast_ring_hom_int Int.castRingHom_int\n-/\n\n",
 "castAddHom_int":
 "#print Int.castAddHom_int /-\n@[simp]\ntheorem Int.castAddHom_int : Int.castAddHom ℤ = AddMonoidHom.id ℤ :=\n  ((AddMonoidHom.id ℤ).eq_int_cast_hom rfl).symm\n#align int.cast_add_hom_int Int.castAddHom_int\n-/\n\n"}