{"zpow_pred_clog_lt_self":
 "theorem zpow_pred_clog_lt_self {b : ℕ} {r : R} (hb : 1 < b) (hr : 0 < r) : (b : R) ^ (clog b r - 1) < r :=\n  by\n  rw [← neg_log_inv_eq_clog, ← neg_add', zpow_neg, inv_lt _ hr]\n  · exact lt_zpow_succ_log_self hb _\n  · exact zpow_pos_of_pos (nat.cast_pos.mpr <| zero_le_one.trans_lt hb) _\n#align zpow_pred_clog_lt_self zpow_pred_clog_lt_self\n\n",
 "zpow_lt_iff_lt_clog":
 "/-- `int.clog b` and `zpow b` (almost) form a Galois connection. -/\ntheorem zpow_lt_iff_lt_clog {b : ℕ} (hb : 1 < b) {x : ℤ} {r : R} (hr : 0 < r) : (b : R) ^ x < r ↔ x < clog b r :=\n  (@GaloisConnection.lt_iff_lt _ _ _ _ _ _ (clogZpowGi R hb).gc ⟨r, hr⟩ x).symm\n#align zpow_lt_iff_lt_clog zpow_lt_iff_lt_clog\n\n",
 "zpow_log_le_self":
 "theorem zpow_log_le_self {b : ℕ} {r : R} (hb : 1 < b) (hr : 0 < r) : (b : R) ^ log b r ≤ r :=\n  by\n  cases' le_total 1 r with hr1 hr1\n  · rw [log_of_one_le_right _ hr1]\n    rw [zpow_ofNat, ← Nat.cast_pow, ← Nat.le_floor_iff hr.le]\n    exact Nat.pow_log_le_self b (nat.floor_pos.mpr hr1).ne'\n  · rw [log_of_right_le_one _ hr1, zpow_neg, zpow_ofNat, ← Nat.cast_pow]\n    exact inv_le_of_inv_le hr (Nat.ceil_le.1 <| Nat.le_pow_clog hb _)\n#align zpow_log_le_self zpow_log_le_self\n\n",
 "zpow_le_iff_le_log":
 "/-- `zpow b` and `int.log b` (almost) form a Galois connection. -/\ntheorem zpow_le_iff_le_log {b : ℕ} (hb : 1 < b) {x : ℤ} {r : R} (hr : 0 < r) : (b : R) ^ x ≤ r ↔ x ≤ log b r :=\n  @GaloisConnection.le_iff_le _ _ _ _ _ _ (zpowLogGi R hb).gc x ⟨r, hr⟩\n#align zpow_le_iff_le_log zpow_le_iff_le_log\n\n",
 "self_le_zpow_clog":
 "theorem self_le_zpow_clog {b : ℕ} (hb : 1 < b) (r : R) : r ≤ (b : R) ^ clog b r :=\n  by\n  cases' le_or_lt r 0 with hr hr\n  · rw [clog_of_right_le_zero _ hr, zpow_zero]\n    exact hr.trans zero_le_one\n  rw [← neg_log_inv_eq_clog, zpow_neg, le_inv hr (zpow_pos_of_pos _ _)]\n  · exact zpow_log_le_self hb (inv_pos.mpr hr)\n  · exact nat.cast_pos.mpr (zero_le_one.trans_lt hb)\n#align self_le_zpow_clog self_le_zpow_clog\n\n",
 "neg_log_inv_eq_clog":
 "-- note this is useful for writing in reverse\ntheorem neg_log_inv_eq_clog (b : ℕ) (r : R) : -log b r⁻¹ = clog b r := by rw [log_inv, neg_neg]\n#align neg_log_inv_eq_clog neg_log_inv_eq_clog\n\n",
 "neg_clog_inv_eq_log":
 "theorem neg_clog_inv_eq_log (b : ℕ) (r : R) : -clog b r⁻¹ = log b r := by rw [clog_inv, neg_neg]\n#align neg_clog_inv_eq_log neg_clog_inv_eq_log\n\n",
 "lt_zpow_succ_log_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\ntheorem lt_zpow_succ_log_self {b : ℕ} (hb : 1 < b) (r : R) : r < (b : R) ^ (log b r + 1) :=\n  by\n  cases' le_or_lt r 0 with hr hr\n  · rw [log_of_right_le_zero _ hr, zero_add, zpow_one]\n    exact hr.trans_lt (zero_lt_one.trans_le <| by exact_mod_cast hb.le)\n  cases' le_or_lt 1 r with hr1 hr1\n  · rw [log_of_one_le_right _ hr1]\n    rw [Int.ofNat_add_one_out, zpow_ofNat, ← Nat.cast_pow]\n    apply Nat.lt_of_floor_lt\n    exact Nat.lt_pow_succ_log_self hb _\n  · rw [log_of_right_le_one _ hr1.le]\n    have hcri : 1 < r⁻¹ := one_lt_inv hr hr1\n    have : 1 ≤ Nat.clog b («expr⌈ ⌉₊» r⁻¹) :=\n      nat.succ_le_of_lt (Nat.clog_pos hb <| Nat.one_lt_cast.1 <| hcri.trans_le (Nat.le_ceil _))\n    rw [neg_add_eq_sub, ← neg_sub, ← Int.ofNat_one, ← Int.ofNat_sub this, zpow_neg, zpow_ofNat,\n      lt_inv hr (pow_pos (nat.cast_pos.mpr <| zero_lt_one.trans hb) _), ← Nat.cast_pow]\n    refine' Nat.lt_ceil.1 _\n    exact Nat.pow_pred_clog_lt_self hb <| Nat.one_lt_cast.1 <| hcri.trans_le <| Nat.le_ceil _\n#align lt_zpow_succ_log_self lt_zpow_succ_log_self\n\n",
 "lt_zpow_iff_log_lt":
 "/-- `zpow b` and `int.log b` (almost) form a Galois connection. -/\ntheorem lt_zpow_iff_log_lt {b : ℕ} (hb : 1 < b) {x : ℤ} {r : R} (hr : 0 < r) : r < (b : R) ^ x ↔ log b r < x :=\n  @GaloisConnection.lt_iff_lt _ _ _ _ _ _ (zpowLogGi R hb).gc x ⟨r, hr⟩\n#align lt_zpow_iff_log_lt lt_zpow_iff_log_lt\n\n",
 "log_zpow":
 "theorem log_zpow {b : ℕ} (hb : 1 < b) (z : ℤ) : log b (b ^ z : R) = z :=\n  by\n  obtain ⟨n, rfl | rfl⟩ := z.eq_coe_or_neg\n  · rw [log_of_one_le_right _ (one_le_zpow_of_nonneg _ <| Int.coe_nat_nonneg _), zpow_ofNat, ← Nat.cast_pow,\n      Nat.floor_coe, Nat.log_pow hb]\n    exact_mod_cast hb.le\n  · rw [log_of_right_le_one _ (zpow_le_one_of_nonpos _ <| neg_nonpos.mpr (Int.coe_nat_nonneg _)), zpow_neg, inv_inv,\n      zpow_ofNat, ← Nat.cast_pow, Nat.ceil_natCast, Nat.clog_pow _ _ hb]\n    exact_mod_cast hb.le\n#align log_zpow log_zpow\n\n",
 "log_zero_right":
 "@[simp]\ntheorem log_zero_right (b : ℕ) : log b (0 : R) = 0 :=\n  log_of_right_le_zero b le_rfl\n#align log_zero_right log_zero_right\n\n",
 "log_one_right":
 "@[simp]\ntheorem log_one_right (b : ℕ) : log b (1 : R) = 0 := by\n  rw [log_of_one_le_right _ le_rfl, Nat.floor_one, Nat.log_one_right, Int.ofNat_zero]\n#align log_one_right log_one_right\n\n",
 "log_of_right_le_zero":
 "theorem log_of_right_le_zero (b : ℕ) {r : R} (hr : r ≤ 0) : log b r = 0 := by\n  rw [log_of_right_le_one _ (hr.trans zero_le_one),\n    Nat.clog_of_right_le_one ((nat.ceil_eq_zero.mpr <| inv_nonpos.2 hr).trans_le zero_le_one), Int.ofNat_zero, neg_zero]\n#align log_of_right_le_zero log_of_right_le_zero\n\n",
 "log_of_right_le_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\ntheorem log_of_right_le_one (b : ℕ) {r : R} (hr : r ≤ 1) : log b r = -Nat.clog b («expr⌈ ⌉₊» r⁻¹) :=\n  by\n  obtain rfl | hr := hr.eq_or_lt\n  ·\n    rw [log, if_pos hr, inv_one, Nat.ceil_one, Nat.floor_one, Nat.log_one_right, Nat.clog_one_right, Int.ofNat_zero,\n      neg_zero]\n  · exact if_neg hr.not_le\n#align log_of_right_le_one log_of_right_le_one\n\n",
 "log_of_one_le_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\ntheorem log_of_one_le_right (b : ℕ) {r : R} (hr : 1 ≤ r) : log b r = Nat.log b («expr⌊ ⌋₊» r) :=\n  if_pos hr\n#align log_of_one_le_right log_of_one_le_right\n\n",
 "log_of_left_le_one":
 "theorem log_of_left_le_one {b : ℕ} (hb : b ≤ 1) (r : R) : log b r = 0 :=\n  by\n  cases le_total 1 r\n  · rw [log_of_one_le_right _ h, Nat.log_of_left_le_one hb, Int.ofNat_zero]\n  · rw [log_of_right_le_one _ h, Nat.clog_of_left_le_one hb, Int.ofNat_zero, neg_zero]\n#align log_of_left_le_one log_of_left_le_one\n\n",
 "log_nat_cast":
 "@[simp, norm_cast]\ntheorem log_nat_cast (b : ℕ) (n : ℕ) : log b (n : R) = Nat.log b n :=\n  by\n  cases n\n  · simp [log_of_right_le_one _ _, Nat.log_zero_right]\n  · have : 1 ≤ (n.succ : R) := by simp\n    simp [log_of_one_le_right _ this, ← Nat.cast_succ]\n#align log_nat_cast log_nat_cast\n\n",
 "log_mono_right":
 "@[mono]\ntheorem log_mono_right {b : ℕ} {r₁ r₂ : R} (h₀ : 0 < r₁) (h : r₁ ≤ r₂) : log b r₁ ≤ log b r₂ :=\n  by\n  cases' le_or_lt b 1 with hb hb\n  · rw [log_of_left_le_one hb, log_of_left_le_one hb]\n  cases' le_total r₁ 1 with h₁ h₁ <;> cases' le_total r₂ 1 with h₂ h₂\n  · rw [log_of_right_le_one _ h₁, log_of_right_le_one _ h₂, neg_le_neg_iff, Int.ofNat_le]\n    exact Nat.clog_mono_right _ (Nat.ceil_mono <| inv_le_inv_of_le h₀ h)\n  · rw [log_of_right_le_one _ h₁, log_of_one_le_right _ h₂]\n    exact (neg_nonpos.mpr (Int.coe_nat_nonneg _)).trans (Int.coe_nat_nonneg _)\n  · obtain rfl := le_antisymm h (h₂.trans h₁)\n    rfl\n  · rw [log_of_one_le_right _ h₁, log_of_one_le_right _ h₂, Int.ofNat_le]\n    exact Nat.log_mono_right (Nat.floor_mono h)\n#align log_mono_right log_mono_right\n\n",
 "log_inv":
 "@[simp]\ntheorem log_inv (b : ℕ) (r : R) : log b r⁻¹ = -clog b r := by rw [← inv_inv r, clog_inv, neg_neg, inv_inv]\n#align log_inv log_inv\n\n",
 "le_zpow_iff_clog_le":
 "/-- `int.clog b` and `zpow b` (almost) form a Galois connection. -/\ntheorem le_zpow_iff_clog_le {b : ℕ} (hb : 1 < b) {x : ℤ} {r : R} (hr : 0 < r) : r ≤ (b : R) ^ x ↔ clog b r ≤ x :=\n  (@GaloisConnection.le_iff_le _ _ _ _ _ _ (clogZpowGi R hb).gc ⟨r, hr⟩ x).symm\n#align le_zpow_iff_clog_le le_zpow_iff_clog_le\n\n",
 "clog_zpow":
 "theorem clog_zpow {b : ℕ} (hb : 1 < b) (z : ℤ) : clog b (b ^ z : R) = z := by\n  rw [← neg_log_inv_eq_clog, ← zpow_neg, log_zpow hb, neg_neg]\n#align clog_zpow clog_zpow\n\n",
 "clog_zero_right":
 "@[simp]\ntheorem clog_zero_right (b : ℕ) : clog b (0 : R) = 0 :=\n  clog_of_right_le_zero _ le_rfl\n#align clog_zero_right clog_zero_right\n\n",
 "clog_one_right":
 "@[simp]\ntheorem clog_one_right (b : ℕ) : clog b (1 : R) = 0 := by\n  rw [clog_of_one_le_right _ le_rfl, Nat.ceil_one, Nat.clog_one_right, Int.ofNat_zero]\n#align clog_one_right clog_one_right\n\n",
 "clog_of_right_le_zero":
 "theorem clog_of_right_le_zero (b : ℕ) {r : R} (hr : r ≤ 0) : clog b r = 0 :=\n  by\n  rw [clog, if_neg (hr.trans_lt zero_lt_one).not_le, neg_eq_zero, Int.coe_nat_eq_zero, Nat.log_eq_zero_iff]\n  cases' le_or_lt b 1 with hb hb\n  · exact or.inr hb\n  · refine' or.inl (lt_of_le_of_lt _ hb)\n    exact Nat.floor_le_one_of_le_one ((inv_nonpos.2 hr).trans zero_le_one)\n#align clog_of_right_le_zero clog_of_right_le_zero\n\n",
 "clog_of_right_le_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\ntheorem clog_of_right_le_one (b : ℕ) {r : R} (hr : r ≤ 1) : clog b r = -Nat.log b («expr⌊ ⌋₊» r⁻¹) :=\n  by\n  obtain rfl | hr := hr.eq_or_lt\n  ·\n    rw [clog, if_pos hr, inv_one, Nat.ceil_one, Nat.floor_one, Nat.log_one_right, Nat.clog_one_right, Int.ofNat_zero,\n      neg_zero]\n  · exact if_neg hr.not_le\n#align clog_of_right_le_one clog_of_right_le_one\n\n",
 "clog_of_one_le_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\ntheorem clog_of_one_le_right (b : ℕ) {r : R} (hr : 1 ≤ r) : clog b r = Nat.clog b («expr⌈ ⌉₊» r) :=\n  if_pos hr\n#align clog_of_one_le_right clog_of_one_le_right\n\n",
 "clog_of_left_le_one":
 "theorem clog_of_left_le_one {b : ℕ} (hb : b ≤ 1) (r : R) : clog b r = 0 := by\n  rw [← neg_log_inv_eq_clog, log_of_left_le_one hb, neg_zero]\n#align clog_of_left_le_one clog_of_left_le_one\n\n",
 "clog_nat_cast":
 "@[simp, norm_cast]\ntheorem clog_nat_cast (b : ℕ) (n : ℕ) : clog b (n : R) = Nat.clog b n :=\n  by\n  cases n\n  · simp [clog_of_right_le_one _ _, Nat.clog_zero_right]\n  · have : 1 ≤ (n.succ : R) := by simp\n    simp [clog_of_one_le_right _ this, ← Nat.cast_succ]\n#align clog_nat_cast clog_nat_cast\n\n",
 "clog_mono_right":
 "@[mono]\ntheorem clog_mono_right {b : ℕ} {r₁ r₂ : R} (h₀ : 0 < r₁) (h : r₁ ≤ r₂) : clog b r₁ ≤ clog b r₂ :=\n  by\n  rw [← neg_log_inv_eq_clog, ← neg_log_inv_eq_clog, neg_le_neg_iff]\n  exact log_mono_right (inv_pos.mpr <| h₀.trans_le h) (inv_le_inv_of_le h₀ h)\n#align clog_mono_right clog_mono_right\n\n",
 "clog_inv":
 "@[simp]\ntheorem clog_inv (b : ℕ) (r : R) : clog b r⁻¹ = -log b r :=\n  by\n  cases' lt_or_le 0 r with hrp hrp\n  · obtain hr | hr := le_total 1 r\n    · rw [clog_of_right_le_one _ (inv_le_one hr), log_of_one_le_right _ hr, inv_inv]\n    · rw [clog_of_one_le_right _ (one_le_inv hrp hr), log_of_right_le_one _ hr, neg_neg]\n  · rw [clog_of_right_le_zero _ (inv_nonpos.mpr hrp), log_of_right_le_zero _ hrp, neg_zero]\n#align clog_inv clog_inv\n\n"}