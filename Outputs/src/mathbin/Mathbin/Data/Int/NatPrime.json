{"succ_dvd_or_succ_dvd_of_succ_sum_dvd_mul":
 "#print succ_dvd_or_succ_dvd_of_succ_sum_dvd_mul /-\ntheorem succ_dvd_or_succ_dvd_of_succ_sum_dvd_mul {p : ℕ} (p_prime : Nat.Prime p) {m n : ℤ} {k l : ℕ}\n    (hpm : ↑(p ^ k) ∣ m) (hpn : ↑(p ^ l) ∣ n) (hpmn : ↑(p ^ (k + l + 1)) ∣ m * n) :\n    ↑(p ^ (k + 1)) ∣ m ∨ ↑(p ^ (l + 1)) ∣ n :=\n  have hpm' : p ^ k ∣ m.nat_abs := Int.coe_nat_dvd.1 <| Int.dvd_natAbs.2 hpm\n  have hpn' : p ^ l ∣ n.nat_abs := Int.coe_nat_dvd.1 <| Int.dvd_natAbs.2 hpn\n  have hpmn' : p ^ (k + l + 1) ∣ m.nat_abs * n.nat_abs := by\n    rw [← Int.natAbs_mul] <;> apply Int.coe_nat_dvd.1 <| Int.dvd_natAbs.2 hpmn\n  let hsd := Nat.succ_dvd_or_succ_dvd_of_succ_sum_dvd_mul p_prime hpm' hpn' hpmn'\n  hsd.elim (fun hsd1 => or.inl (by apply Int.dvd_natAbs.1; apply Int.coe_nat_dvd.2 hsd1)) fun hsd2 =>\n    or.inr (by apply Int.dvd_natAbs.1; apply Int.coe_nat_dvd.2 hsd2)\n#align succ_dvd_or_succ_dvd_of_succ_sum_dvd_mul succ_dvd_or_succ_dvd_of_succ_sum_dvd_mul\n-/\n\n",
 "not_prime_of_int_mul":
 "/-\nCopyright (c) 2020 Bryan Gin-ge Chen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin Lacker, Bryan Gin-ge Chen\n-/\ntheorem not_prime_of_int_mul {a b : ℤ} {c : ℕ} (ha : 1 < a.nat_abs) (hb : 1 < b.nat_abs) (hc : a * b = (c : ℤ)) :\n    ¬Nat.Prime c :=\n  not_prime_mul' (natAbs_mul_natAbs_eq hc) ha hb\n#align not_prime_of_int_mul not_prime_of_int_mul\n\n",
 "dvd_nat_abs_of_coe_dvd_sq":
 "theorem prime.dvd_nat_abs_of_coe_dvd_sq {p : ℕ} (hp : p.prime) (k : ℤ) (h : ↑p ∣ k ^ 2) : p ∣ k.nat_abs :=\n  by\n  apply @Nat.Prime.dvd_of_dvd_pow _ _ 2 hp\n  rwa [sq, ← nat_abs_mul, ← coe_nat_dvd_left, ← sq]\n#align prime.dvd_nat_abs_of_coe_dvd_sq prime.dvd_nat_abs_of_coe_dvd_sq\n\n"}