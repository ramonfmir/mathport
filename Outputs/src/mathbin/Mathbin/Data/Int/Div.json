{"of_nat_add_neg_succ_of_nat_of_ge":
 "theorem of_nat_add_neg_succ_of_nat_of_ge {m n : ℕ} (h : n.succ ≤ m) : of_nat m + -[n+1] = of_nat (m - n.succ) :=\n  by\n  change sub_nat_nat _ _ = _\n  have h' : n.succ - m = 0\n  apply tsub_eq_zero_iff_le.mpr h\n  simp [*, sub_nat_nat]\n#align of_nat_add_neg_succ_of_nat_of_ge of_nat_add_neg_succ_of_nat_of_ge\n\n",
 "nat_abs_le_of_dvd_ne_zero":
 "theorem nat_abs_le_of_dvd_ne_zero {s t : ℤ} (hst : s ∣ t) (ht : t ≠ 0) : natAbs s ≤ natAbs t :=\n  not_lt.mp (mt (eq_zero_of_dvd_of_natAbs_lt_natAbs hst) ht)\n#align nat_abs_le_of_dvd_ne_zero nat_abs_le_of_dvd_ne_zero\n\n",
 "eq_zero_of_dvd_of_nonneg_of_lt":
 "theorem eq_zero_of_dvd_of_nonneg_of_lt {a b : ℤ} (w₁ : 0 ≤ a) (w₂ : a < b) (h : b ∣ a) : a = 0 :=\n  eq_zero_of_dvd_of_natAbs_lt_natAbs h (natAbs_lt_natAbs_of_nonneg_of_lt w₁ w₂)\n#align eq_zero_of_dvd_of_nonneg_of_lt eq_zero_of_dvd_of_nonneg_of_lt\n\n",
 "eq_zero_of_dvd_of_nat_abs_lt_nat_abs":
 "/-- If an integer with larger absolute value divides an integer, it is\nzero. -/\ntheorem eq_zero_of_dvd_of_nat_abs_lt_nat_abs {a b : ℤ} (w : a ∣ b) (h : natAbs b < natAbs a) : b = 0 :=\n  by\n  rw [← nat_abs_dvd, ← dvd_nat_abs, coe_nat_dvd] at w\n  rw [← nat_abs_eq_zero]\n  exact eq_zero_of_dvd_of_lt w h\n#align eq_zero_of_dvd_of_nat_abs_lt_nat_abs eq_zero_of_dvd_of_nat_abs_lt_nat_abs\n\n",
 "eq_of_mod_eq_of_nat_abs_sub_lt_nat_abs":
 "/-- If two integers are congruent to a sufficiently large modulus,\nthey are equal. -/\ntheorem eq_of_mod_eq_of_nat_abs_sub_lt_nat_abs {a b c : ℤ} (h1 : a % b = c) (h2 : natAbs (a - c) < natAbs b) : a = c :=\n  eq_of_sub_eq_zero (eq_zero_of_dvd_of_natAbs_lt_natAbs (dvd_sub_of_emod_eq h1) h2)\n#align eq_of_mod_eq_of_nat_abs_sub_lt_nat_abs eq_of_mod_eq_of_nat_abs_sub_lt_nat_abs\n\n",
 "eq_mul_div_of_mul_eq_mul_of_dvd_left":
 "/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n-/\ntheorem eq_mul_div_of_mul_eq_mul_of_dvd_left {a b c d : ℤ} (hb : b ≠ 0) (hbc : b ∣ c) (h : b * a = c * d) :\n    a = c / b * d := by\n  cases' hbc with k hk\n  subst hk\n  rw [Int.mul_ediv_cancel_left _ hb]\n  rw [mul_assoc] at h\n  apply mul_left_cancel₀ hb h\n#align eq_mul_div_of_mul_eq_mul_of_dvd_left eq_mul_div_of_mul_eq_mul_of_dvd_left\n\n"}