{"nat_abs_lt_iff_mul_self_lt":
 "theorem nat_abs_lt_iff_mul_self_lt {a b : ℤ} : a.nat_abs < b.nat_abs ↔ a * a < b * b :=\n  by\n  rw [← abs_lt_iff_mul_self_lt, abs_eq_nat_abs, abs_eq_nat_abs]\n  exact int.coe_nat_lt.symm\n#align nat_abs_lt_iff_mul_self_lt nat_abs_lt_iff_mul_self_lt\n\n",
 "nat_abs_le_iff_mul_self_le":
 "theorem nat_abs_le_iff_mul_self_le {a b : ℤ} : a.nat_abs ≤ b.nat_abs ↔ a * a ≤ b * b :=\n  by\n  rw [← abs_le_iff_mul_self_le, abs_eq_nat_abs, abs_eq_nat_abs]\n  exact int.coe_nat_le.symm\n#align nat_abs_le_iff_mul_self_le nat_abs_le_iff_mul_self_le\n\n",
 "nat_abs_eq_iff_mul_self_eq":
 "/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n-/\ntheorem nat_abs_eq_iff_mul_self_eq {a b : ℤ} : a.nat_abs = b.nat_abs ↔ a * a = b * b :=\n  by\n  rw [← abs_eq_iff_mul_self_eq, abs_eq_nat_abs, abs_eq_nat_abs]\n  exact int.coe_nat_inj'.symm\n#align nat_abs_eq_iff_mul_self_eq nat_abs_eq_iff_mul_self_eq\n\n",
 "eq_zero_of_abs_lt_dvd":
 "theorem eq_zero_of_abs_lt_dvd {m x : ℤ} (h1 : m ∣ x) (h2 : |x| < m) : x = 0 :=\n  by\n  by_cases hm : m = 0;\n  · subst m\n    exact zero_dvd_iff.mp h1\n  rcases h1 with ⟨d, rfl⟩\n  apply mul_eq_zero_of_right\n  rw [← abs_lt_one_iff, ← mul_lt_iff_lt_one_right (abs_pos.mpr hm), ← abs_mul]\n  exact lt_of_lt_of_le h2 (le_abs_self m)\n#align eq_zero_of_abs_lt_dvd eq_zero_of_abs_lt_dvd\n\n",
 "eq_nat_abs_iff_mul_eq_zero":
 "theorem eq_nat_abs_iff_mul_eq_zero : a.nat_abs = n ↔ (a - n) * (a + n) = 0 := by\n  rw [nat_abs_eq_iff, mul_eq_zero, sub_eq_zero, add_eq_zero_iff_eq_neg]\n#align eq_nat_abs_iff_mul_eq_zero eq_nat_abs_iff_mul_eq_zero\n\n",
 "dvd_div_of_mul_dvd":
 "theorem dvd_div_of_mul_dvd {a b c : ℤ} (h : a * b ∣ c) : b ∣ c / a :=\n  by\n  rcases eq_or_ne a 0 with (rfl | ha)\n  · simp only [Int.div_zero, dvd_zero]\n  rcases h with ⟨d, rfl⟩\n  refine' ⟨d, _⟩\n  rw [mul_assoc, Int.mul_ediv_cancel_left _ ha]\n#align dvd_div_of_mul_dvd dvd_div_of_mul_dvd\n\n"}