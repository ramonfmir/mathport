{"zero_ne_neg_of_nat":
 "@[simp]\ntheorem zero_ne_neg_of_nat (n : ℕ) : 0 ≠ -[n+1] := fun h => int.no_confusion h\n#align zero_ne_neg_of_nat zero_ne_neg_of_nat\n\n",
 "zero_mod":
 "-- Will be generalized to Euclidean domains.\n@[local simp]\ntheorem zero_mod (b : ℤ) : 0 % b = 0 :=\n  rfl\n#align zero_mod zero_mod\n\n",
 "zero_div":
 "#print zero_div /-\n-- Will be generalized to Euclidean domains.\n@[local simp]\nprotected theorem zero_div : ∀ b : ℤ, 0 / b = 0\n  | (n : ℕ) => show of_nat _ = _ by simp\n  | -[n+1] => show -of_nat _ = _ by simp\n#align zero_div zero_div\n-/\n\n",
 "to_nat_zero":
 "@[simp]\ntheorem to_nat_zero : (0 : ℤ).to_nat = 0 :=\n  rfl\n#align to_nat_zero to_nat_zero\n\n",
 "to_nat_sub_to_nat_neg":
 "@[simp]\ntheorem to_nat_sub_to_nat_neg : ∀ n : ℤ, ↑n.to_nat - ↑(-n).to_nat = n\n  | (0 : ℕ) => rfl\n  | (n + 1 : ℕ) => show ↑(n + 1) - (0 : ℤ) = n + 1 from sub_zero _\n  | -[n+1] => show 0 - (n + 1 : ℤ) = _ from zero_sub _\n#align to_nat_sub_to_nat_neg to_nat_sub_to_nat_neg\n\n",
 "to_nat_one":
 "@[simp]\ntheorem to_nat_one : (1 : ℤ).to_nat = 1 :=\n  rfl\n#align to_nat_one to_nat_one\n\n",
 "to_nat_of_nonneg":
 "@[simp]\ntheorem to_nat_of_nonneg {a : ℤ} (h : 0 ≤ a) : (to_nat a : ℤ) = a := by rw [to_nat_eq_max, max_eq_left h]\n#align to_nat_of_nonneg to_nat_of_nonneg\n\n",
 "to_nat_neg_nat":
 "@[simp]\ntheorem to_nat_neg_nat : ∀ n : ℕ, (-(n : ℤ)).to_nat = 0\n  | 0 => rfl\n  | n + 1 => rfl\n#align to_nat_neg_nat to_nat_neg_nat\n\n",
 "to_nat_eq_max":
 "theorem to_nat_eq_max : ∀ a : ℤ, (to_nat a : ℤ) = max a 0\n  | (n : ℕ) => (max_eq_left (ofNat_zero_le n)).symm\n  | -[n+1] => (max_eq_right (le_of_lt (negSucc_lt_zero n))).symm\n#align to_nat_eq_max to_nat_eq_max\n\n",
 "to_nat_coe_nat_add_one":
 "@[simp]\ntheorem to_nat_coe_nat_add_one {n : ℕ} : ((n : ℤ) + 1).to_nat = n + 1 :=\n  rfl\n#align to_nat_coe_nat_add_one to_nat_coe_nat_add_one\n\n",
 "to_nat_coe_nat":
 "@[simp]\ntheorem to_nat_coe_nat (n : ℕ) : to_nat ↑n = n :=\n  rfl\n#align to_nat_coe_nat to_nat_coe_nat\n\n",
 "to_nat_add_to_nat_neg_eq_nat_abs":
 "@[simp]\ntheorem to_nat_add_to_nat_neg_eq_nat_abs : ∀ n : ℤ, n.to_nat + (-n).to_nat = n.nat_abs\n  | (0 : ℕ) => rfl\n  | (n + 1 : ℕ) => show n + 1 + 0 = n + 1 from add_zero _\n  | -[n+1] => show 0 + (n + 1) = n + 1 from zero_add _\n#align to_nat_add_to_nat_neg_eq_nat_abs to_nat_add_to_nat_neg_eq_nat_abs\n\n",
 "to_nat_add_nat":
 "theorem to_nat_add_nat {a : ℤ} (ha : 0 ≤ a) (n : ℕ) : (a + n).to_nat = a.to_nat + n :=\n  by\n  lift a to ℕ using ha\n  norm_cast\n#align to_nat_add_nat to_nat_add_nat\n\n",
 "to_nat_add":
 "theorem to_nat_add {a b : ℤ} (ha : 0 ≤ a) (hb : 0 ≤ b) : (a + b).to_nat = a.to_nat + b.to_nat :=\n  by\n  lift a to ℕ using ha\n  lift b to ℕ using hb\n  norm_cast\n#align to_nat_add to_nat_add\n\n",
 "succ_pred":
 "theorem succ_pred (a : ℤ) : succ (pred a) = a :=\n  sub_add_cancel _ _\n#align succ_pred succ_pred\n\n",
 "succ_neg_succ":
 "theorem succ_neg_succ (a : ℤ) : succ (-succ a) = -a := by rw [neg_succ, succ_pred]\n#align succ_neg_succ succ_neg_succ\n\n",
 "succ_neg_nat_succ":
 "theorem succ_neg_nat_succ (n : ℕ) : succ (-nat.succ n) = -n :=\n  succ_neg_succ n\n#align succ_neg_nat_succ succ_neg_nat_succ\n\n",
 "sign_neg":
 "@[simp]\ntheorem sign_neg (z : ℤ) : int.sign (-z) = -int.sign z := by rcases z with ((_ | _) | _) <;> rfl\n#align sign_neg sign_neg\n\n",
 "sign_mul":
 "@[simp]\ntheorem sign_mul : ∀ a b, sign (a * b) = sign a * sign b\n  | a, 0 => by simp\n  | 0, b => by simp\n  | (m + 1 : ℕ), (n + 1 : ℕ) => rfl\n  | (m + 1 : ℕ), -[n+1] => rfl\n  | -[m+1], (n + 1 : ℕ) => rfl\n  | -[m+1], -[n+1] => rfl\n#align sign_mul sign_mul\n\n",
 "sign_coe_nat_of_nonzero":
 "theorem sign_coe_nat_of_nonzero {n : ℕ} (hn : n ≠ 0) : int.sign n = 1 :=\n  by\n  obtain ⟨n, rfl⟩ := nat.exists_eq_succ_of_ne_zero hn\n  exact int.sign_of_succ n\n#align sign_coe_nat_of_nonzero sign_coe_nat_of_nonzero\n\n",
 "pred_to_nat":
 "@[simp]\ntheorem pred_to_nat : ∀ i : ℤ, (i - 1).to_nat = i.to_nat - 1\n  | (0 : ℕ) => rfl\n  | (n + 1 : ℕ) => by simp\n  | -[n+1] => rfl\n#align pred_to_nat pred_to_nat\n\n",
 "pred_succ":
 "theorem pred_succ (a : ℤ) : pred (succ a) = a :=\n  add_sub_cancel _ _\n#align pred_succ pred_succ\n\n",
 "pred_neg_pred":
 "theorem pred_neg_pred (a : ℤ) : pred (-pred a) = -a := by rw [neg_pred, pred_succ]\n#align pred_neg_pred pred_neg_pred\n\n",
 "pred_nat_succ":
 "theorem pred_nat_succ (n : ℕ) : pred (nat.succ n) = n :=\n  pred_succ n\n#align pred_nat_succ pred_nat_succ\n\n",
 "of_nat_mod":
 "theorem of_nat_mod (m n : nat) : (m % n : ℤ) = of_nat (m % n) :=\n  rfl\n#align of_nat_mod of_nat_mod\n\n",
 "of_nat_div":
 "@[simp]\ntheorem of_nat_div (m n : ℕ) : of_nat (m / n) = of_nat m / of_nat n :=\n  rfl\n#align of_nat_div of_nat_div\n\n",
 "of_nat_add_neg_succ_of_nat_of_lt":
 "theorem of_nat_add_neg_succ_of_nat_of_lt {m n : ℕ} (h : m < n.succ) : of_nat m + -[n+1] = -[n - m+1] :=\n  by\n  change sub_nat_nat _ _ = _\n  have h' : n.succ - m = (n - m).succ\n  apply succ_sub\n  apply le_of_lt_succ h\n  simp [*, sub_nat_nat]\n#align of_nat_add_neg_succ_of_nat_of_lt of_nat_add_neg_succ_of_nat_of_lt\n\n",
 "neg_succ_sub_one":
 "@[simp]\ntheorem neg_succ_sub_one (n : ℕ) : -[n+1] - 1 = -[n + 1+1] :=\n  rfl\n#align neg_succ_sub_one neg_succ_sub_one\n\n",
 "neg_succ_of_nat_mod":
 "theorem neg_succ_of_nat_mod (m : ℕ) {b : ℤ} (bpos : 0 < b) : -[m+1] % b = b - 1 - m % b := by\n  rw [sub_sub, add_comm] <;>\n    exact\n      match b, eq_succ_of_zero_lt bpos with\n      | _, ⟨n, rfl⟩ => rfl\n#align neg_succ_of_nat_mod neg_succ_of_nat_mod\n\n",
 "neg_succ_of_nat_eq'":
 "theorem neg_succ_of_nat_eq' (m : ℕ) : -[m+1] = -m - 1 := by simp [neg_succ_of_nat_eq, sub_eq_neg_add]\n#align neg_succ_of_nat_eq' neg_succ_of_nat_eq'\n\n",
 "neg_succ_of_nat_div":
 "theorem neg_succ_of_nat_div (m : ℕ) {b : ℤ} (H : 0 < b) : -[m+1] / b = -(m / b + 1) :=\n  match b, eq_succ_of_zero_lt H with\n  | _, ⟨n, rfl⟩ => rfl\n#align neg_succ_of_nat_div neg_succ_of_nat_div\n\n",
 "neg_succ_not_pos":
 "@[simp]\ntheorem neg_succ_not_pos (n : ℕ) : 0 < -[n+1] ↔ false := by simp only [not_lt, iff_false_iff]\n#align neg_succ_not_pos neg_succ_not_pos\n\n",
 "neg_succ_not_nonneg":
 "@[simp]\ntheorem neg_succ_not_nonneg (n : ℕ) : 0 ≤ -[n+1] ↔ false :=\n  by\n  simp only [not_le, iff_false_iff]\n  exact Int.negSucc_lt_zero n\n#align neg_succ_not_nonneg neg_succ_not_nonneg\n\n",
 "neg_succ_mul_neg_succ":
 "@[simp]\ntheorem neg_succ_mul_neg_succ (m n : ℕ) : -[m+1] * -[n+1] = succ m * succ n :=\n  rfl\n#align neg_succ_mul_neg_succ neg_succ_mul_neg_succ\n\n",
 "neg_succ_mul_coe_nat":
 "@[simp]\ntheorem neg_succ_mul_coe_nat (m n : ℕ) : -[m+1] * n = -(succ m * n) :=\n  rfl\n#align neg_succ_mul_coe_nat neg_succ_mul_coe_nat\n\n",
 "neg_succ":
 "theorem neg_succ (a : ℤ) : -succ a = pred (-a) :=\n  neg_add _ _\n#align neg_succ neg_succ\n\n",
 "neg_pred":
 "theorem neg_pred (a : ℤ) : -pred a = succ (-a) := by rw [eq_neg_of_eq_neg (neg_succ (-a)).symm, neg_neg]\n#align neg_pred neg_pred\n\n",
 "neg_of_nat_ne_zero":
 "@[simp]\ntheorem neg_of_nat_ne_zero (n : ℕ) : -[n+1] ≠ 0 := fun h => int.no_confusion h\n#align neg_of_nat_ne_zero neg_of_nat_ne_zero\n\n",
 "neg_nat_succ":
 "theorem neg_nat_succ (n : ℕ) : -(nat.succ n : ℤ) = pred (-n) :=\n  neg_succ n\n#align neg_nat_succ neg_nat_succ\n\n",
 "neg_add_neg":
 "@[simp]\ntheorem neg_add_neg (m n : ℕ) : -[m+1] + -[n+1] = -[nat.succ (m + n)+1] :=\n  rfl\n#align neg_add_neg neg_add_neg\n\n",
 "nat_succ_eq_int_succ":
 "theorem nat_succ_eq_int_succ (n : ℕ) : (nat.succ n : ℤ) = int.succ n :=\n  rfl\n#align nat_succ_eq_int_succ nat_succ_eq_int_succ\n\n",
 "nat_abs_sub_le":
 "theorem nat_abs_sub_le (a b : ℤ) : natAbs (a - b) ≤ natAbs a + natAbs b :=\n  by\n  rw [sub_eq_add_neg, ← Int.natAbs_neg b]\n  apply nat_abs_add_le\n#align nat_abs_sub_le nat_abs_sub_le\n\n",
 "nat_abs_sign_of_nonzero":
 "theorem nat_abs_sign_of_nonzero {z : ℤ} (hz : z ≠ 0) : z.sign.nat_abs = 1 := by rw [Int.natAbs_sign, if_neg hz]\n#align nat_abs_sign_of_nonzero nat_abs_sign_of_nonzero\n\n",
 "nat_abs_sign":
 "theorem nat_abs_sign (z : ℤ) : z.sign.nat_abs = if z = 0 then 0 else 1 := by rcases z with ((_ | _) | _) <;> rfl\n#align nat_abs_sign nat_abs_sign\n\n",
 "nat_abs_neg_of_nat":
 "theorem nat_abs_neg_of_nat (n : ℕ) : natAbs (neg_of_nat n) = n := by cases n <;> rfl\n#align nat_abs_neg_of_nat nat_abs_neg_of_nat\n\n",
 "nat_abs_ne_zero_of_ne_zero":
 "theorem nat_abs_ne_zero_of_ne_zero {z : ℤ} (hz : z ≠ 0) : z.nat_abs ≠ 0 := fun h =>\n  hz <| Int.eq_zero_of_natAbs_eq_zero h\n#align nat_abs_ne_zero_of_ne_zero nat_abs_ne_zero_of_ne_zero\n\n",
 "nat_abs_ne_zero":
 "theorem nat_abs_ne_zero {a : ℤ} : a.nat_abs ≠ 0 ↔ a ≠ 0 :=\n  not_congr Int.natAbs_eq_zero\n#align nat_abs_ne_zero nat_abs_ne_zero\n\n",
 "nat_abs_mul_self'":
 "theorem nat_abs_mul_self' (a : ℤ) : (natAbs a * natAbs a : ℤ) = a * a := by rw [← Int.ofNat_mul, nat_abs_mul_self]\n#align nat_abs_mul_self' nat_abs_mul_self'\n\n",
 "nat_abs_mul_nat_abs_eq":
 "theorem nat_abs_mul_nat_abs_eq {a b : ℤ} {c : ℕ} (h : a * b = (c : ℤ)) : a.nat_abs * b.nat_abs = c := by\n  rw [← nat_abs_mul, h, nat_abs_of_nat]\n#align nat_abs_mul_nat_abs_eq nat_abs_mul_nat_abs_eq\n\n",
 "nat_abs_mul":
 "theorem nat_abs_mul (a b : ℤ) : natAbs (a * b) = natAbs a * natAbs b := by\n  cases a <;> cases b <;> simp only [← int.mul_def, int.mul, nat_abs_neg_of_nat, eq_self_iff_true, Int.natAbs]\n#align nat_abs_mul nat_abs_mul\n\n",
 "nat_abs_lt_nat_abs_of_nonneg_of_lt":
 "theorem nat_abs_lt_nat_abs_of_nonneg_of_lt {a b : ℤ} (w₁ : 0 ≤ a) (w₂ : a < b) : a.nat_abs < b.nat_abs :=\n  by\n  lift b to ℕ using le_trans w₁ (le_of_lt w₂)\n  lift a to ℕ using w₁\n  simpa [coe_nat_lt] using w₂\n#align nat_abs_lt_nat_abs_of_nonneg_of_lt nat_abs_lt_nat_abs_of_nonneg_of_lt\n\n",
 "nat_abs_eq_zero":
 "@[simp]\ntheorem nat_abs_eq_zero {a : ℤ} : a.nat_abs = 0 ↔ a = 0 :=\n  ⟨Int.eq_zero_of_natAbs_eq_zero, fun h => h.symm ▸ rfl⟩\n#align nat_abs_eq_zero nat_abs_eq_zero\n\n",
 "nat_abs_eq_nat_abs_iff":
 "theorem nat_abs_eq_nat_abs_iff {a b : ℤ} : a.nat_abs = b.nat_abs ↔ a = b ∨ a = -b :=\n  by\n  constructor <;> intro h\n  · cases' Int.natAbs_eq a with h₁ h₁ <;> cases' Int.natAbs_eq b with h₂ h₂ <;> rw [h₁, h₂] <;> simp [h]\n  · cases h <;> rw [h]\n    rw [Int.natAbs_neg]\n#align nat_abs_eq_nat_abs_iff nat_abs_eq_nat_abs_iff\n\n",
 "nat_abs_eq_iff":
 "theorem nat_abs_eq_iff {a : ℤ} {n : ℕ} : a.nat_abs = n ↔ a = n ∨ a = -n := by\n  rw [← Int.natAbs_eq_natAbs_iff, Int.natAbs_ofNat]\n#align nat_abs_eq_iff nat_abs_eq_iff\n\n",
 "nat_abs_add_le":
 "theorem nat_abs_add_le (a b : ℤ) : natAbs (a + b) ≤ natAbs a + natAbs b :=\n  by\n  have : ∀ a b : ℕ, nat_abs (sub_nat_nat a (nat.succ b)) ≤ nat.succ (a + b) :=\n    by\n    refine' fun a b : ℕ =>\n      sub_nat_nat_elim a b.succ (fun m n i => n = b.succ → nat_abs i ≤ (m + b).succ) _ (fun i n e => _) rfl\n    · rintro i n rfl\n      rw [add_comm _ i, add_assoc]\n      exact nat.le_add_right i (b.succ + b).succ\n    · apply succ_le_succ\n      rw [← succ.inj e, ← add_assoc, add_comm]\n      apply nat.le_add_right\n  cases a <;> cases' b with b b <;> simp [nat_abs, nat.succ_add] <;> try rfl <;> [skip, rw [add_comm a b]] <;>\n    apply this\n#align nat_abs_add_le nat_abs_add_le\n\n",
 "mul_sign":
 "theorem mul_sign : ∀ i : ℤ, i * sign i = natAbs i\n  | (n + 1 : ℕ) => mul_one _\n  | 0 => mul_zero _\n  | -[n+1] => mul_neg_one _\n#align mul_sign mul_sign\n\n",
 "mul_mod_mul_of_pos":
 "@[simp]\ntheorem mul_mod_mul_of_pos {a : ℤ} (H : 0 < a) (b c : ℤ) : a * b % (a * c) = a * (b % c) := by\n  rw [mod_def, mod_def, mul_div_mul_of_pos _ _ H, mul_sub_left_distrib, mul_assoc]\n#align mul_mod_mul_of_pos mul_mod_mul_of_pos\n\n",
 "mul_div_mul_of_pos_left":
 "@[simp]\ntheorem mul_div_mul_of_pos_left (a : ℤ) {b : ℤ} (H : 0 < b) (c : ℤ) : a * b / (c * b) = a / c := by\n  rw [mul_comm, mul_comm c, mul_div_mul_of_pos _ _ H]\n#align mul_div_mul_of_pos_left mul_div_mul_of_pos_left\n\n",
 "mul_div_mul_of_pos":
 "@[simp]\ntheorem mul_div_mul_of_pos {a : ℤ} (b c : ℤ) (H : 0 < a) : a * b / (a * c) = b / c :=\n  suffices ∀ (m k : ℕ) (b : ℤ), (m.succ * b / (m.succ * k) : ℤ) = b / k from\n    match a, eq_succ_of_zero_lt H, c, eq_nat_or_neg c with\n    | _, ⟨m, rfl⟩, _, ⟨k, or.inl rfl⟩ => this _ _ _\n    | _, ⟨m, rfl⟩, _, ⟨k, or.inr rfl⟩ => by\n      rw [mul_neg, Int.div_neg, Int.div_neg] <;> apply congr_arg has_neg.neg <;> apply this\n  fun m k b =>\n  match b, k with\n  | (n : ℕ), k => congr_arg of_nat (nat.mul_div_mul _ _ m.succ_pos)\n  | -[n+1], 0 => by rw [Int.ofNat_zero, mul_zero, int.div_zero, int.div_zero]\n  | -[n+1], k + 1 =>\n    congr_arg negSucc <|\n      show (m.succ * n + m) / (m.succ * k.succ) = n / k.succ\n        by\n        apply Nat.div_eq_of_lt_le\n        · refine' le_trans _ (nat.le_add_right _ _)\n          rw [← nat.mul_div_mul _ _ m.succ_pos]\n          apply nat.div_mul_le_self\n        · change m.succ * n.succ ≤ _\n          rw [mul_left_comm]\n          apply nat.mul_le_mul_left\n          apply (nat.div_lt_iff_lt_mul k.succ_pos).1\n          apply nat.lt_succ_self\n#align mul_div_mul_of_pos mul_div_mul_of_pos\n\n",
 "mul_div_cancel_of_mod_eq_zero":
 "theorem mul_div_cancel_of_mod_eq_zero {a b : ℤ} (H : a % b = 0) : b * (a / b) = a := by\n  have := mod_add_div a b <;> rwa [H, zero_add] at this\n#align mul_div_cancel_of_mod_eq_zero mul_div_cancel_of_mod_eq_zero\n\n",
 "mul_def":
 "@[simp]\ntheorem mul_def {a b : ℤ} : int.mul a b = a * b :=\n  rfl\n#align mul_def mul_def\n\n",
 "mod_zero":
 "-- Will be generalized to Euclidean domains.\n@[local simp]\ntheorem mod_zero : ∀ a : ℤ, a % 0 = a\n  | (m : ℕ) => congr_arg of_nat <| nat.mod_zero _\n  | -[m+1] => congr_arg negSucc <| nat.mod_zero _\n#align mod_zero mod_zero\n\n",
 "mod_one":
 "-- Will be generalized to Euclidean domains.\n@[local simp]\ntheorem mod_one : ∀ a : ℤ, a % 1 = 0\n  | (m : ℕ) => congr_arg of_nat <| nat.mod_one _\n  | -[m+1] => show (1 - (m % 1).succ : ℤ) = 0 by rw [nat.mod_one] <;> rfl\n#align mod_one mod_one\n\n",
 "mod_neg":
 "@[simp]\ntheorem mod_neg : ∀ a b : ℤ, a % -b = a % b\n  | (m : ℕ), n => @congr_arg ℕ ℤ _ _ (fun i => ↑(m % i)) (natAbs_neg _)\n  | -[m+1], n => @congr_arg ℕ ℤ _ _ (fun i => sub_nat_nat i (nat.succ (m % i))) (natAbs_neg _)\n#align mod_neg mod_neg\n\n",
 "mod_eq_of_lt":
 "theorem mod_eq_of_lt {a b : ℤ} (H1 : 0 ≤ a) (H2 : a < b) : a % b = a :=\n  match a, b, eq_ofNat_of_zero_le H1, eq_ofNat_of_zero_le (le_trans H1 (le_of_lt H2)), H2 with\n  | _, _, ⟨m, rfl⟩, ⟨n, rfl⟩, H2 => congr_arg of_nat <| nat.mod_eq_of_lt (lt_of_ofNat_lt_ofNat H2)\n#align mod_eq_of_lt mod_eq_of_lt\n\n",
 "mod_def":
 "theorem mod_def (a b : ℤ) : a % b = a - b * (a / b) :=\n  eq_sub_of_add_eq (mod_add_div _ _)\n#align mod_def mod_def\n\n",
 "mod_add_div_aux":
 "theorem mod_add_div_aux (m n : ℕ) : (n - (m % n + 1) - (n * (m / n) + n) : ℤ) = -[m+1] :=\n  by\n  rw [← sub_sub, neg_succ_of_nat_coe, sub_sub (n : ℤ)]\n  apply eq_neg_of_eq_neg\n  rw [neg_sub, sub_sub_self, add_right_comm]\n  exact @congr_arg ℕ ℤ _ _ (fun i => (i + 1 : ℤ)) (nat.mod_add_div _ _).symm\n#align mod_add_div_aux mod_add_div_aux\n\n",
 "mod_add_div'":
 "theorem mod_add_div' (m k : ℤ) : m % k + m / k * k = m :=\n  by\n  rw [mul_comm]\n  exact mod_add_div _ _\n#align mod_add_div' mod_add_div'\n\n",
 "mod_add_div":
 "theorem mod_add_div : ∀ a b : ℤ, a % b + b * (a / b) = a\n  | (m : ℕ), (n : ℕ) => congr_arg of_nat (nat.mod_add_div _ _)\n  | (m : ℕ), -[n+1] =>\n    show (_ + -(n + 1) * -(m / (n + 1) : ℕ) : ℤ) = _ by\n      rw [neg_mul_neg] <;> exact congr_arg of_nat (nat.mod_add_div _ _)\n  | -[m+1], 0 => by rw [mod_zero, int.div_zero] <;> rfl\n  | -[m+1], (n + 1 : ℕ) => mod_add_div_aux m n.succ\n  | -[m+1], -[n+1] => mod_add_div_aux m n.succ\n#align mod_add_div mod_add_div\n\n",
 "mem_to_nat'":
 "theorem mem_to_nat' : ∀ (a : ℤ) (n : ℕ), n ∈ to_nat' a ↔ a = n\n  | (m : ℕ), n => option.some_inj.trans coe_nat_inj'.symm\n  | -[m+1], n => by constructor <;> intro h <;> cases h\n#align mem_to_nat' mem_to_nat'\n\n",
 "le_to_nat_iff":
 "@[simp]\ntheorem le_to_nat_iff {n : ℕ} {z : ℤ} (h : 0 ≤ z) : n ≤ z.to_nat ↔ (n : ℤ) ≤ z := by\n  rw [← Int.ofNat_le, Int.toNat_of_nonneg h]\n#align le_to_nat_iff le_to_nat_iff\n\n",
 "le_to_nat":
 "theorem le_to_nat (a : ℤ) : a ≤ to_nat a := by rw [to_nat_eq_max] <;> apply le_max_left\n#align le_to_nat le_to_nat\n\n",
 "induction_on":
 "@[elab_as_elim]\nprotected theorem induction_on {p : ℤ → Prop} (i : ℤ) (hz : p 0) (hp : ∀ i : ℕ, p i → p (i + 1))\n    (hn : ∀ i : ℕ, p (-i) → p (-i - 1)) : p i := by\n  induction i\n  · induction i\n    · exact hz\n    · exact hp _ i_ih\n  · have : ∀ n : ℕ, p (-n) := by\n      intro n\n      induction n\n      · simp [hz]\n      · convert hn _ n_ih using 1\n        simp [sub_eq_neg_add]\n    exact this (i + 1)\n#align induction_on induction_on\n\n",
 "div_zero":
 "#print div_zero /-\n-- Will be generalized to Euclidean domains.\n@[local simp]\nprotected theorem div_zero : ∀ a : ℤ, a / 0 = 0\n  | (n : ℕ) => show of_nat _ = _ by simp\n  | -[n+1] => rfl\n#align div_zero div_zero\n-/\n\n",
 "div_sign":
 "theorem div_sign : ∀ a b, a / sign b = a * sign b\n  | a, (n + 1 : ℕ) => by unfold sign <;> simp\n  | a, 0 => by simp [sign]\n  | a, -[n+1] => by simp [sign]\n#align div_sign div_sign\n\n",
 "div_one":
 "#print div_one /-\n@[simp]\nprotected theorem div_one : ∀ a : ℤ, a / 1 = a\n  | (n : ℕ) => congr_arg of_nat (nat.div_one _)\n  | -[n+1] => congr_arg negSucc (nat.div_one _)\n#align div_one div_one\n-/\n\n",
 "div_of_neg_of_pos":
 "theorem div_of_neg_of_pos {a b : ℤ} (Ha : a < 0) (Hb : 0 < b) : a / b = -((-a - 1) / b + 1) :=\n  match a, b, eq_negSucc_of_lt_zero Ha, eq_succ_of_zero_lt Hb with\n  | _, _, ⟨m, rfl⟩, ⟨n, rfl⟩ => by change (- -[m+1] : ℤ) with (m + 1 : ℤ) <;> rw [add_sub_cancel] <;> rfl\n#align div_of_neg_of_pos div_of_neg_of_pos\n\n",
 "div_nonneg":
 "#print div_nonneg /-\nprotected theorem div_nonneg {a b : ℤ} (Ha : 0 ≤ a) (Hb : 0 ≤ b) : 0 ≤ a / b :=\n  match a, b, eq_ofNat_of_zero_le Ha, eq_ofNat_of_zero_le Hb with\n  | _, _, ⟨m, rfl⟩, ⟨n, rfl⟩ => ofNat_zero_le _\n#align div_nonneg div_nonneg\n-/\n\n",
 "div_neg'":
 "theorem div_neg' {a b : ℤ} (Ha : a < 0) (Hb : 0 < b) : a / b < 0 :=\n  match a, b, eq_negSucc_of_lt_zero Ha, eq_succ_of_zero_lt Hb with\n  | _, _, ⟨m, rfl⟩, ⟨n, rfl⟩ => negSucc_lt_zero _\n#align div_neg' div_neg'\n\n",
 "div_neg":
 "#print div_neg /-\n@[simp]\nprotected theorem div_neg : ∀ a b : ℤ, a / -b = -(a / b)\n  | (m : ℕ), 0 => show of_nat (m / 0) = -(m / 0 : ℕ) by rw [nat.div_zero] <;> rfl\n  | (m : ℕ), (n + 1 : ℕ) => rfl\n  | (m : ℕ), -[n+1] => (neg_neg _).symm\n  | -[m+1], 0 => rfl\n  | -[m+1], (n + 1 : ℕ) => rfl\n  | -[m+1], -[n+1] => rfl\n#align div_neg div_neg\n-/\n\n",
 "div_mul_cancel_of_mod_eq_zero":
 "theorem div_mul_cancel_of_mod_eq_zero {a b : ℤ} (H : a % b = 0) : a / b * b = a := by\n  rw [mul_comm, mul_div_cancel_of_mod_eq_zero H]\n#align div_mul_cancel_of_mod_eq_zero div_mul_cancel_of_mod_eq_zero\n\n",
 "div_eq_zero_of_lt":
 "theorem div_eq_zero_of_lt {a b : ℤ} (H1 : 0 ≤ a) (H2 : a < b) : a / b = 0 :=\n  match a, b, eq_ofNat_of_zero_le H1, eq_succ_of_zero_lt (lt_of_le_of_lt H1 H2), H2 with\n  | _, _, ⟨m, rfl⟩, ⟨n, rfl⟩, H2 => congr_arg of_nat <| nat.div_eq_of_lt <| lt_of_ofNat_lt_ofNat H2\n#align div_eq_zero_of_lt div_eq_zero_of_lt\n\n",
 "div_add_mod'":
 "theorem div_add_mod' (m k : ℤ) : m / k * k + m % k = m :=\n  by\n  rw [mul_comm]\n  exact div_add_mod _ _\n#align div_add_mod' div_add_mod'\n\n",
 "div_add_mod":
 "theorem div_add_mod (a b : ℤ) : b * (a / b) + a % b = a :=\n  (add_comm _ _).trans (mod_add_div _ _)\n#align div_add_mod div_add_mod\n\n",
 "default_eq_zero":
 "@[simp]\ntheorem default_eq_zero : default = (0 : ℤ) :=\n  rfl\n#align default_eq_zero default_eq_zero\n\n",
 "coe_pred_of_pos":
 "@[norm_cast]\ntheorem coe_pred_of_pos {n : ℕ} (h : 0 < n) : ((n - 1 : ℕ) : ℤ) = (n : ℤ) - 1 :=\n  by\n  cases n\n  cases h\n  simp\n#align coe_pred_of_pos coe_pred_of_pos\n\n",
 "coe_nat_strict_mono":
 "theorem coe_nat_strict_mono : strict_mono (coe : ℕ → ℤ) := fun _ _ => Int.ofNat_lt.2\n#align coe_nat_strict_mono coe_nat_strict_mono\n\n",
 "coe_nat_nonneg":
 "theorem coe_nat_nonneg (n : ℕ) : 0 ≤ (n : ℤ) :=\n  ofNat_le.2 (nat.zero_le _)\n#align coe_nat_nonneg coe_nat_nonneg\n\n",
 "coe_nat_mul_neg_succ":
 "@[simp]\ntheorem coe_nat_mul_neg_succ (m n : ℕ) : (m : ℤ) * -[n+1] = -(m * succ n) :=\n  rfl\n#align coe_nat_mul_neg_succ coe_nat_mul_neg_succ\n\n",
 "coe_nat_mod":
 "@[simp, norm_cast]\ntheorem coe_nat_mod (m n : ℕ) : (↑(m % n) : ℤ) = ↑m % ↑n :=\n  rfl\n#align coe_nat_mod coe_nat_mod\n\n",
 "coe_nat_lt":
 "theorem coe_nat_lt {m n : ℕ} : (↑m : ℤ) < ↑n ↔ m < n :=\n  ofNat_lt m n\n#align coe_nat_lt coe_nat_lt\n\n",
 "coe_nat_le":
 "theorem coe_nat_le {m n : ℕ} : (↑m : ℤ) ≤ ↑n ↔ m ≤ n :=\n  ofNat_le m n\n#align coe_nat_le coe_nat_le\n\n",
 "coe_nat_inj'":
 "theorem coe_nat_inj' {m n : ℕ} : (↑m : ℤ) = ↑n ↔ m = n :=\n  Int.ofNat_inj m n\n#align coe_nat_inj' coe_nat_inj'\n\n",
 "coe_nat_div":
 "@[simp, norm_cast]\ntheorem coe_nat_div (m n : ℕ) : ((m / n : ℕ) : ℤ) = m / n :=\n  rfl\n#align coe_nat_div coe_nat_div\n\n",
 "add_one_le_iff":
 "theorem add_one_le_iff {a b : ℤ} : a + 1 ≤ b ↔ a < b :=\n  iff.rfl\n#align add_one_le_iff add_one_le_iff\n\n",
 "add_neg_one":
 "/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n-/\n-- instance : has_sub int            := by apply_instance -- This is in core\n@[simp]\ntheorem add_neg_one (i : ℤ) : i + -1 = i - 1 :=\n  rfl\n#align add_neg_one add_neg_one\n\n",
 "add_def":
 "-- Note that here we are disabling the \"safety\" of reflected, to allow us to reuse `int.mk_numeral`.\n-- The usual way to provide the required `reflected` instance would be via rewriting to prove that\n-- the expression we use here is equivalent.\n@[simp]\ntheorem add_def {a b : ℤ} : int.add a b = a + b :=\n  rfl\n#align add_def add_def\n\n"}