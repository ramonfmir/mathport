{"sign_pow_bit1":
 "/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n-/\n@[simp]\ntheorem sign_pow_bit1 (k : ℕ) : ∀ n : ℤ, n.sign ^ bit1 k = n.sign\n  | (n + 1 : ℕ) => one_pow (bit1 k)\n  | 0 => zero_pow (Nat.zero_lt_bit1 k)\n  | -[n+1] => (neg_pow_bit1 1 k).trans (congr_arg (fun x => -x) (one_pow (bit1 k)))\n#align sign_pow_bit1 sign_pow_bit1\n\n",
 "pow_dvd_of_le_of_pow_dvd":
 "--TODO: Do we really need this lemma?\ntheorem pow_dvd_of_le_of_pow_dvd {p m n : ℕ} {k : ℤ} (hmn : m ≤ n) (hdiv : ↑(p ^ n) ∣ k) : ↑(p ^ m) ∣ k :=\n  (pow_dvd_pow _ hmn).nat_cast.trans hdiv\n#align pow_dvd_of_le_of_pow_dvd pow_dvd_of_le_of_pow_dvd\n\n",
 "dvd_of_pow_dvd":
 "theorem dvd_of_pow_dvd {p k : ℕ} {m : ℤ} (hk : 1 ≤ k) (hpk : ↑(p ^ k) ∣ m) : ↑p ∣ m :=\n  (dvd_pow_self _ <| pos_iff_ne_zero.1 hk).nat_cast.trans hpk\n#align dvd_of_pow_dvd dvd_of_pow_dvd\n\n"}