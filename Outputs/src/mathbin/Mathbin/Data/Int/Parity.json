{"two_not_dvd_two_mul_add_one":
 "theorem two_not_dvd_two_mul_add_one (n : ℤ) : ¬2 ∣ 2 * n + 1 :=\n  by\n  simp [add_mod]\n  rfl\n#align two_not_dvd_two_mul_add_one two_not_dvd_two_mul_add_one\n\n",
 "two_mul_div_two_of_odd":
 "theorem two_mul_div_two_of_odd (h : Odd n) : 2 * (n / 2) = n - 1 :=\n  eq_sub_of_add_eq (two_mul_ediv_two_add_one_of_odd h)\n#align two_mul_div_two_of_odd two_mul_div_two_of_odd\n\n",
 "two_mul_div_two_of_even":
 "theorem two_mul_div_two_of_even : Even n → 2 * (n / 2) = n := fun h => Int.mul_ediv_cancel' (even_iff_two_dvd.mp h)\n#align two_mul_div_two_of_even two_mul_div_two_of_even\n\n",
 "two_mul_div_two_add_one_of_odd":
 "theorem two_mul_div_two_add_one_of_odd : Odd n → 2 * (n / 2) + 1 = n :=\n  by\n  rintro ⟨c, rfl⟩\n  rw [mul_comm]\n  convert Int.div_add_mod' _ _\n  simpa [Int.add_emod]\n#align two_mul_div_two_add_one_of_odd two_mul_div_two_add_one_of_odd\n\n",
 "two_dvd_ne_zero":
 "@[simp]\ntheorem two_dvd_ne_zero : ¬2 ∣ n ↔ n % 2 = 1 :=\n  even_iff_two_dvd.symm.not.trans not_even_iff\n#align two_dvd_ne_zero two_dvd_ne_zero\n\n",
 "of_mul_right":
 "theorem odd.of_mul_right (h : Odd (m * n)) : Odd n :=\n  (odd_mul.mp h).2\n#align odd.of_mul_right odd.of_mul_right\n\n",
 "of_mul_left":
 "theorem odd.of_mul_left (h : Odd (m * n)) : Odd m :=\n  (odd_mul.mp h).1\n#align odd.of_mul_left odd.of_mul_left\n\n",
 "odd_sub'":
 "theorem odd_sub' : Odd (m - n) ↔ (Odd n ↔ Even m) := by\n  rw [odd_iff_not_even, even_sub, not_iff, not_iff_comm, odd_iff_not_even]\n#align odd_sub' odd_sub'\n\n",
 "odd_sub":
 "@[parity_simps]\ntheorem odd_sub : Odd (m - n) ↔ (Odd m ↔ Even n) := by rw [odd_iff_not_even, even_sub, not_iff, odd_iff_not_even]\n#align odd_sub odd_sub\n\n",
 "odd_mul":
 "theorem odd_mul : Odd (m * n) ↔ Odd m ∧ Odd n := by simp [not_or, parity_simps]\n#align odd_mul odd_mul\n\n",
 "odd_iff_not_even":
 "@[simp]\ntheorem odd_iff_not_even : Odd n ↔ ¬Even n := by rw [not_even_iff, odd_iff]\n#align odd_iff_not_even odd_iff_not_even\n\n",
 "odd_iff":
 "theorem odd_iff : Odd n ↔ n % 2 = 1 :=\n  ⟨fun ⟨m, hm⟩ => by\n    rw [hm, add_mod]\n    norm_num, fun h =>\n    ⟨n / 2,\n      (emod_add_ediv n 2).symm.trans\n        (by\n          rw [h]\n          abel)⟩⟩\n#align odd_iff odd_iff\n\n",
 "odd_coe_nat":
 "@[simp, norm_cast]\ntheorem odd_coe_nat (n : ℕ) : Odd (n : ℤ) ↔ Odd n := by rw [odd_iff_not_even, Nat.odd_iff_not_even, even_coe_nat]\n#align odd_coe_nat odd_coe_nat\n\n",
 "odd_add'":
 "theorem odd_add' : Odd (m + n) ↔ (Odd n ↔ Even m) := by rw [add_comm, odd_add]\n#align odd_add' odd_add'\n\n",
 "odd_add":
 "@[parity_simps]\ntheorem odd_add : Odd (m + n) ↔ (Odd m ↔ Even n) := by rw [odd_iff_not_even, even_add, not_iff, odd_iff_not_even]\n#align odd_add odd_add\n\n",
 "not_odd_iff":
 "theorem not_odd_iff : ¬Odd n ↔ n % 2 = 0 := by rw [odd_iff, mod_two_ne_one]\n#align not_odd_iff not_odd_iff\n\n",
 "not_even_one":
 "@[simp]\ntheorem not_even_one : ¬Even (1 : ℤ) := by rw [even_iff] <;> norm_num\n#align not_even_one not_even_one\n\n",
 "not_even_iff":
 "theorem not_even_iff : ¬Even n ↔ n % 2 = 1 := by rw [even_iff, mod_two_ne_zero]\n#align not_even_iff not_even_iff\n\n",
 "not_even_bit1":
 "@[simp]\ntheorem not_even_bit1 (n : ℤ) : ¬Even (bit1 n) := by simp [bit1, parity_simps]\n#align not_even_bit1 not_even_bit1\n\n",
 "ne_of_odd_add":
 "theorem ne_of_odd_add (h : Odd (m + n)) : m ≠ n := fun hnot => by simpa [hnot, parity_simps] using h\n#align ne_of_odd_add ne_of_odd_add\n\n",
 "nat_abs_odd":
 "@[simp]\ntheorem nat_abs_odd : Odd n.nat_abs ↔ Odd n := by rw [odd_iff_not_even, Nat.odd_iff_not_even, nat_abs_even]\n#align nat_abs_odd nat_abs_odd\n\n",
 "nat_abs_even":
 "@[simp]\ntheorem nat_abs_even : Even n.nat_abs ↔ Even n := by simp [even_iff_two_dvd, dvd_nat_abs, coe_nat_dvd_left.symm]\n#align nat_abs_even nat_abs_even\n\n",
 "mod_two_ne_zero":
 "-- euclidean_domain.mod_eq_zero uses (2 ∣ n) as normal form\n@[local simp]\ntheorem mod_two_ne_zero : ¬n % 2 = 0 ↔ n % 2 = 1 := by cases' mod_two_eq_zero_or_one n with h h <;> simp [h]\n#align mod_two_ne_zero mod_two_ne_zero\n\n",
 "mod_two_ne_one":
 "/-\nCopyright (c) 2019 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Benjamin Davidson\n-/\n@[simp]\ntheorem mod_two_ne_one : ¬n % 2 = 1 ↔ n % 2 = 0 := by cases' mod_two_eq_zero_or_one n with h h <;> simp [h]\n#align mod_two_ne_one mod_two_ne_one\n\n",
 "is_compl_even_odd":
 "theorem is_compl_even_odd : IsCompl { n : ℤ | Even n } { n | Odd n } := by simp [← Set.compl_setOf, isCompl_compl]\n#align is_compl_even_odd is_compl_even_odd\n\n",
 "four_dvd_add_or_sub_of_odd":
 "theorem four_dvd_add_or_sub_of_odd {a b : ℤ} (ha : Odd a) (hb : Odd b) : 4 ∣ a + b ∨ 4 ∣ a - b :=\n  by\n  obtain ⟨m, rfl⟩ := ha\n  obtain ⟨n, rfl⟩ := hb\n  obtain h | h := Int.even_or_odd (m + n)\n  · right\n    rw [Int.even_add, ← Int.even_sub] at h\n    obtain ⟨k, hk⟩ := h\n    convert dvd_mul_right 4 k\n    rw [eq_add_of_sub_eq hk, mul_add, add_assoc, add_sub_cancel, ← two_mul, ← mul_assoc]\n    rfl\n  · left\n    obtain ⟨k, hk⟩ := h\n    convert dvd_mul_right 4 (k + 1)\n    rw [eq_sub_of_add_eq hk, add_right_comm, ← add_sub, mul_add, mul_sub, add_assoc, add_assoc, sub_add, add_assoc, ←\n      sub_sub (2 * n), sub_self, zero_sub, sub_neg_eq_add, ← mul_assoc, mul_add]\n    rfl\n#align four_dvd_add_or_sub_of_odd four_dvd_add_or_sub_of_odd\n\n",
 "even_xor_odd'":
 "theorem even_xor_odd' (n : ℤ) : ∃ k, Xor' (n = 2 * k) (n = 2 * k + 1) :=\n  by\n  rcases even_or_odd n with (⟨k, rfl⟩ | ⟨k, rfl⟩) <;> use k\n  ·\n    simpa only [← two_mul, Xor', true_and_iff, eq_self_iff_true, not_true, or_false_iff, and_false_iff] using\n      (succ_ne_self (2 * k)).symm\n  ·\n    simp only [Xor', add_right_eq_self, false_or_iff, eq_self_iff_true, not_true, not_false_iff, one_ne_zero,\n      and_self_iff]\n#align even_xor_odd' even_xor_odd'\n\n",
 "even_xor_odd":
 "theorem even_xor_odd (n : ℤ) : Xor' (Even n) (Odd n) :=\n  by\n  cases' even_or_odd n with h\n  · exact or.inl ⟨h, even_iff_not_odd.mp h⟩\n  · exact or.inr ⟨h, odd_iff_not_even.mp h⟩\n#align even_xor_odd even_xor_odd\n\n",
 "even_sub'":
 "theorem even_sub' : Even (m - n) ↔ (Odd m ↔ Odd n) := by rw [even_sub, even_iff_not_odd, even_iff_not_odd, not_iff_not]\n#align even_sub' even_sub'\n\n",
 "even_sub":
 "@[parity_simps]\ntheorem even_sub : Even (m - n) ↔ (Even m ↔ Even n) := by simp [sub_eq_add_neg, parity_simps]\n#align even_sub even_sub\n\n",
 "even_pow'":
 "theorem even_pow' {n : ℕ} (h : n ≠ 0) : Even (m ^ n) ↔ Even m :=\n  even_pow.trans <| and_iff_left h\n#align even_pow' even_pow'\n\n",
 "even_pow":
 "@[parity_simps]\ntheorem even_pow {n : ℕ} : Even (m ^ n) ↔ Even m ∧ n ≠ 0 :=\n  by\n  induction' n with n ih <;> simp [*, even_mul, pow_succ]\n  tauto\n#align even_pow even_pow\n\n",
 "even_or_odd'":
 "theorem even_or_odd' (n : ℤ) : ∃ k, n = 2 * k ∨ n = 2 * k + 1 := by\n  simpa only [← two_mul, exists_or, ← Odd, ← Even] using even_or_odd n\n#align even_or_odd' even_or_odd'\n\n",
 "even_or_odd":
 "theorem even_or_odd (n : ℤ) : Even n ∨ Odd n :=\n  or.imp_right odd_iff_not_even.2 <| em <| Even n\n#align even_or_odd even_or_odd\n\n",
 "even_mul_succ_self":
 "theorem even_mul_succ_self (n : ℤ) : Even (n * (n + 1)) :=\n  by\n  rw [even_mul]\n  convert n.even_or_odd\n  simp [parity_simps]\n#align even_mul_succ_self even_mul_succ_self\n\n",
 "even_mul":
 "@[parity_simps]\ntheorem even_mul : Even (m * n) ↔ Even m ∨ Even n := by\n  cases' mod_two_eq_zero_or_one m with h₁ h₁ <;> cases' mod_two_eq_zero_or_one n with h₂ h₂ <;>\n      simp [even_iff, h₁, h₂, Int.mul_emod] <;>\n    norm_num\n#align even_mul even_mul\n\n",
 "even_iff_not_odd":
 "theorem even_iff_not_odd : Even n ↔ ¬Odd n := by rw [not_odd_iff, even_iff]\n#align even_iff_not_odd even_iff_not_odd\n\n",
 "even_iff":
 "theorem even_iff : Even n ↔ n % 2 = 0 :=\n  ⟨fun ⟨m, hm⟩ => by simp [← two_mul, hm], fun h => ⟨n / 2, (emod_add_ediv n 2).symm.trans (by simp [← two_mul, h])⟩⟩\n#align even_iff even_iff\n\n",
 "even_coe_nat":
 "@[simp, norm_cast]\ntheorem even_coe_nat (n : ℕ) : Even (n : ℤ) ↔ Even n := by rw_mod_cast [even_iff, Nat.even_iff]\n#align even_coe_nat even_coe_nat\n\n",
 "even_add_one":
 "@[parity_simps]\ntheorem even_add_one : Even (n + 1) ↔ ¬Even n := by simp [even_add]\n#align even_add_one even_add_one\n\n",
 "even_add'":
 "theorem even_add' : Even (m + n) ↔ (Odd m ↔ Odd n) := by rw [even_add, even_iff_not_odd, even_iff_not_odd, not_iff_not]\n#align even_add' even_add'\n\n",
 "even_add":
 "@[parity_simps]\ntheorem even_add : Even (m + n) ↔ (Even m ↔ Even n) := by\n  cases' mod_two_eq_zero_or_one m with h₁ h₁ <;> cases' mod_two_eq_zero_or_one n with h₂ h₂ <;>\n      simp [even_iff, h₁, h₂, Int.add_emod] <;>\n    norm_num\n#align even_add even_add\n\n",
 "div_two_mul_two_of_even":
 "theorem div_two_mul_two_of_even : Even n → n / 2 * 2 = n :=\n  fun\n    --int.div_mul_cancel\n    h =>\n  Int.ediv_mul_cancel (even_iff_two_dvd.mp h)\n#align div_two_mul_two_of_even div_two_mul_two_of_even\n\n",
 "div_two_mul_two_add_one_of_odd":
 "theorem div_two_mul_two_add_one_of_odd : Odd n → n / 2 * 2 + 1 = n :=\n  by\n  rintro ⟨c, rfl⟩\n  convert Int.div_add_mod' _ _\n  simpa [Int.add_emod]\n#align div_two_mul_two_add_one_of_odd div_two_mul_two_add_one_of_odd\n\n",
 "add_one_div_two_mul_two_of_odd":
 "theorem add_one_div_two_mul_two_of_odd : Odd n → 1 + n / 2 * 2 = n :=\n  by\n  rintro ⟨c, rfl⟩\n  rw [add_comm]\n  convert Int.div_add_mod' _ _\n  simpa [Int.add_emod]\n#align add_one_div_two_mul_two_of_odd add_one_div_two_mul_two_of_odd\n\n"}