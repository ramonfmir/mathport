{"zero_modeq_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print Dvd.dvd.zero_modEq_int /-\ntheorem Dvd.dvd.zero_modEq_int (h : n ∣ a) : «expr ≡ [ZMOD ]» 0 a n :=\n  h.modeq_zero_int.symm\n#align has_dvd.dvd.zero_modeq_int Dvd.dvd.zero_modEq_int\n-/\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print trans /-\n@[trans]\nprotected theorem trans : «expr ≡ [ZMOD ]» a b n → «expr ≡ [ZMOD ]» b c n → «expr ≡ [ZMOD ]» a c n :=\n  Eq.trans\n#align trans trans\n-/\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print symm /-\n@[symm]\nprotected theorem symm : «expr ≡ [ZMOD ]» a b n → «expr ≡ [ZMOD ]» b a n :=\n  Eq.symm\n#align symm symm\n-/\n\n",
 "sub_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem sub_right (c : ℤ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (a - c) (b - c) n :=\n  h.sub ModEq.rfl\n#align sub_right sub_right\n\n",
 "sub_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem sub_left (c : ℤ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (c - a) (c - b) n :=\n  ModEq.rfl.sub h\n#align sub_left sub_left\n\n",
 "sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem sub (h₁ : «expr ≡ [ZMOD ]» a b n) (h₂ : «expr ≡ [ZMOD ]» c d n) :\n    «expr ≡ [ZMOD ]» (a - c) (b - d) n := by\n  rw [sub_eq_add_neg, sub_eq_add_neg]\n  exact h₁.add h₂.neg\n#align sub sub\n\n",
 "rfl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print rfl /-\nprotected theorem rfl : «expr ≡ [ZMOD ]» a a n :=\n  ModEq.refl _\n#align rfl rfl\n-/\n\n",
 "refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print refl /-\n/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes\n-/\n@[refl]\nprotected theorem refl (a : ℤ) : «expr ≡ [ZMOD ]» a a n :=\n  @rfl _ _\n#align refl refl\n-/\n\n",
 "pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem pow (m : ℕ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (a ^ m) (b ^ m) n :=\n  by\n  induction' m with d hd; · rfl\n  rw [pow_succ, pow_succ]\n  exact h.mul hd\n#align pow pow\n\n",
 "of_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem of_mul_right (m : ℤ) : «expr ≡ [ZMOD ]» a b (n * m) → «expr ≡ [ZMOD ]» a b n :=\n  mul_comm m n ▸ of_mul_left _\n#align of_mul_right of_mul_right\n\n",
 "of_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem of_mul_left (m : ℤ) (h : «expr ≡ [ZMOD ]» a b (m * n)) : «expr ≡ [ZMOD ]» a b n := by\n  rw [modeq_iff_dvd] at * <;> exact (dvd_mul_left n m).trans h\n#align of_mul_left of_mul_left\n\n",
 "of_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem of_dvd (d : m ∣ n) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» a b m :=\n  modEq_of_dvd <| d.trans h.dvd\n#align of_dvd of_dvd\n\n",
 "of_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem of_div (h : «expr ≡ [ZMOD ]» (a / c) (b / c) (m / c)) (ha : c ∣ a) (ha : c ∣ b) (ha : c ∣ m) :\n    «expr ≡ [ZMOD ]» a b m := by convert h.mul_left' <;> rwa [Int.mul_ediv_cancel']\n#align of_div of_div\n\n",
 "neg_modeq_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n@[simp]\ntheorem neg_modeq_neg : «expr ≡ [ZMOD ]» (-a) (-b) n ↔ «expr ≡ [ZMOD ]» a b n := by simp [modeq_iff_dvd, dvd_sub_comm]\n#align neg_modeq_neg neg_modeq_neg\n\n",
 "neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem neg (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (-a) (-b) n :=\n  h.add_left_cancel (by simp_rw [← sub_eq_add_neg, sub_self])\n#align neg neg\n\n",
 "mul_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem mul_right' (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (a * c) (b * c) (n * c) := by\n  rw [mul_comm a, mul_comm b, mul_comm n] <;> exact h.mul_left'\n#align mul_right' mul_right'\n\n",
 "mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem mul_right (c : ℤ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (a * c) (b * c) n :=\n  h.mul_right'.of_dvd <| dvd_mul_right _ _\n#align mul_right mul_right\n\n",
 "mul_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem mul_left' (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (c * a) (c * b) (c * n) :=\n  by\n  obtain hc | rfl | hc := lt_trichotomy c 0\n  · rw [← neg_modeq_neg, ← modeq_neg, ← neg_mul, ← neg_mul, ← neg_mul]\n    simp only [modeq, mul_mod_mul_of_pos (neg_pos.2 hc), h.eq]\n  · simp\n  · simp only [modeq, mul_mod_mul_of_pos hc, h.eq]\n#align mul_left' mul_left'\n\n",
 "mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem mul_left (c : ℤ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (c * a) (c * b) n :=\n  h.mul_left'.of_dvd <| dvd_mul_left _ _\n#align mul_left mul_left\n\n",
 "mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem mul (h₁ : «expr ≡ [ZMOD ]» a b n) (h₂ : «expr ≡ [ZMOD ]» c d n) :\n    «expr ≡ [ZMOD ]» (a * c) (b * d) n :=\n  (h₂.mul_left _).trans (h₁.mul_right _)\n#align mul mul\n\n",
 "modeq_zero_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print Dvd.dvd.modEq_zero_int /-\ntheorem Dvd.dvd.modEq_zero_int (h : n ∣ a) : «expr ≡ [ZMOD ]» a 0 n :=\n  modEq_zero_iff_dvd.2 h\n#align has_dvd.dvd.modeq_zero_int Dvd.dvd.modEq_zero_int\n-/\n\n",
 "modeq_zero_iff_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_zero_iff_dvd : «expr ≡ [ZMOD ]» a 0 n ↔ n ∣ a := by rw [modeq, zero_mod, dvd_iff_mod_eq_zero]\n#align modeq_zero_iff_dvd modeq_zero_iff_dvd\n\n",
 "modeq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n@[simp]\ntheorem modeq_zero_iff : «expr ≡ [ZMOD ]» a b 0 ↔ a = b := by rw [modeq, mod_zero, mod_zero]\n#align modeq_zero_iff modeq_zero_iff\n\n",
 "modeq_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_sub (a b : ℤ) : «expr ≡ [ZMOD ]» a b (a - b) :=\n  (modEq_of_dvd dvd_rfl).symm\n#align modeq_sub modeq_sub\n\n",
 "modeq_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_one : «expr ≡ [ZMOD ]» a b 1 :=\n  modEq_of_dvd (one_dvd _)\n#align modeq_one modeq_one\n\n",
 "modeq_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n@[simp]\ntheorem modeq_neg : «expr ≡ [ZMOD ]» a b (-n) ↔ «expr ≡ [ZMOD ]» a b n := by simp [modeq_iff_dvd]\n#align modeq_neg modeq_neg\n\n",
 "modeq_iff_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_iff_dvd : «expr ≡ [ZMOD ]» a b n ↔ n ∣ b - a := by\n  rw [modeq, eq_comm] <;> simp [mod_eq_mod_iff_mod_sub_eq_zero, dvd_iff_mod_eq_zero]\n#align modeq_iff_dvd modeq_iff_dvd\n\n",
 "modeq_iff_add_fac":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_iff_add_fac {a b n : ℤ} : «expr ≡ [ZMOD ]» a b n ↔ ∃ t, b = a + n * t :=\n  by\n  rw [modeq_iff_dvd]\n  exact exists_congr fun t => sub_eq_iff_eq_add'\n#align modeq_iff_add_fac modeq_iff_add_fac\n\n",
 "modeq_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_comm : «expr ≡ [ZMOD ]» a b n ↔ «expr ≡ [ZMOD ]» b a n :=\n  ⟨ModEq.symm, ModEq.symm⟩\n#align modeq_comm modeq_comm\n\n",
 "modeq_and_modeq_iff_modeq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_and_modeq_iff_modeq_mul {a b m n : ℤ} (hmn : m.nat_abs.coprime n.nat_abs) :\n    «expr ≡ [ZMOD ]» a b m ∧ «expr ≡ [ZMOD ]» a b n ↔ «expr ≡ [ZMOD ]» a b (m * n) :=\n  ⟨fun h => by\n    rw [modeq_iff_dvd, modeq_iff_dvd] at h\n    rw [modeq_iff_dvd, ← nat_abs_dvd, ← dvd_nat_abs, coe_nat_dvd, nat_abs_mul]\n    refine' hmn.mul_dvd_of_dvd_of_dvd _ _ <;> rw [← coe_nat_dvd, nat_abs_dvd, dvd_nat_abs] <;> tauto, fun h =>\n    ⟨h.of_mul_right _, h.of_mul_left _⟩⟩\n#align modeq_and_modeq_iff_modeq_mul modeq_and_modeq_iff_modeq_mul\n\n",
 "modeq_add_fac_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_add_fac_self {a t n : ℤ} : «expr ≡ [ZMOD ]» (a + n * t) a n :=\n  modEq_add_fac _ ModEq.rfl\n#align modeq_add_fac_self modeq_add_fac_self\n\n",
 "modeq_add_fac":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem modeq_add_fac {a b n : ℤ} (c : ℤ) (ha : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (a + n * c) b n :=\n  calc\n    «expr ≡ [ZMOD ]» (a + n * c) (b + n * c) n := ha.add_right _\n    «expr ≡ [ZMOD ]» _ (b + 0) n := ((dvd_mul_right _ _).modeq_zero_int.add_left _)\n    «expr ≡ [ZMOD ]» _ b n := by rw [add_zero]\n    \n#align modeq_add_fac modeq_add_fac\n\n",
 "mod_mul_right_mod":
 "@[simp]\ntheorem mod_mul_right_mod (a b c : ℤ) : a % (b * c) % b = a % b :=\n  (mod_modEq _ _).of_mul_right _\n#align mod_mul_right_mod mod_mul_right_mod\n\n",
 "mod_mul_left_mod":
 "@[simp]\ntheorem mod_mul_left_mod (a b c : ℤ) : a % (b * c) % c = a % c :=\n  (mod_modEq _ _).of_mul_left _\n#align mod_mul_left_mod mod_mul_left_mod\n\n",
 "mod_modeq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem mod_modeq (a n) : «expr ≡ [ZMOD ]» (a % n) a n :=\n  emod_emod _ _\n#align mod_modeq mod_modeq\n\n",
 "mod_coprime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem mod_coprime {a b : ℕ} (hab : Nat.coprime a b) : ∃ y : ℤ, «expr ≡ [ZMOD ]» (a * y) 1 b :=\n  ⟨Nat.gcdA a b,\n    have hgcd : Nat.gcd a b = 1 := Nat.coprime.gcd_eq_one hab\n    calc\n      «expr ≡ [ZMOD ]» (↑a * Nat.gcdA a b) (↑a * Nat.gcdA a b + ↑b * Nat.gcdB a b) ↑b :=\n        ModEq.symm <| modEq_add_fac _ <| ModEq.refl _\n      «expr ≡ [ZMOD ]» _ 1 ↑b := by rw [← Nat.gcd_eq_gcd_ab, hgcd] <;> rfl\n      ⟩\n#align mod_coprime mod_coprime\n\n",
 "gcd_a_modeq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem gcd_a_modeq (a b : ℕ) : «expr ≡ [ZMOD ]» ((a : ℤ) * Nat.gcdA a b) (Nat.gcd a b) b :=\n  by\n  rw [← add_zero ((a : ℤ) * _), Nat.gcd_eq_gcd_ab]\n  exact (dvd_mul_right _ _).zero_modeq_int.add_left _\n#align gcd_a_modeq gcd_a_modeq\n\n",
 "exists_unique_equiv_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem exists_unique_equiv_nat (a : ℤ) {b : ℤ} (hb : 0 < b) : ∃ z : ℕ, ↑z < b ∧ «expr ≡ [ZMOD ]» (↑z) a b :=\n  let ⟨z, hz1, hz2, hz3⟩ := exists_unique_equiv a hb\n  ⟨z.nat_abs, by constructor <;> rw [← of_nat_eq_coe, of_nat_nat_abs_eq_of_nonneg hz1] <;> assumption⟩\n#align exists_unique_equiv_nat exists_unique_equiv_nat\n\n",
 "exists_unique_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem exists_unique_equiv (a : ℤ) {b : ℤ} (hb : 0 < b) : ∃ z : ℤ, 0 ≤ z ∧ z < b ∧ «expr ≡ [ZMOD ]» z a b :=\n  ⟨a % b, emod_nonneg _ (ne_of_gt hb),\n    by\n    have : a % b < |b| := emod_lt _ (ne_of_gt hb)\n    rwa [abs_of_pos hb] at this, by simp [modeq]⟩\n#align exists_unique_equiv exists_unique_equiv\n\n",
 "coe_nat_modeq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [MOD ]» -/\ntheorem coe_nat_modeq_iff {a b n : ℕ} : «expr ≡ [ZMOD ]» a b n ↔ «expr ≡ [MOD ]» a b n := by\n  unfold modeq Nat.ModEq <;> rw [← Int.ofNat_inj] <;> simp [coe_nat_mod]\n#align coe_nat_modeq_iff coe_nat_modeq_iff\n\n",
 "cancel_right_div_gcd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/-- To cancel a common factor `c` from a `modeq` we must divide the modulus `m` by `gcd m c`. -/\ntheorem cancel_right_div_gcd (hm : 0 < m) (h : «expr ≡ [ZMOD ]» (a * c) (b * c) m) :\n    «expr ≡ [ZMOD ]» a b (m / gcd m c) := by\n  let d := gcd m c\n  have hmd := gcd_dvd_left m c\n  have hcd := gcd_dvd_right m c\n  rw [modeq_iff_dvd] at h⊢\n  refine' Int.dvd_of_dvd_mul_right_of_gcd_one _ _\n  show m / d ∣ c / d * (b - a)\n  · rw [mul_comm, ← Int.mul_ediv_assoc (b - a) hcd, sub_mul]\n    exact Int.ediv_dvd_ediv hmd h\n  · rw [gcd_div hmd hcd, nat_abs_of_nat, nat.div_self (gcd_pos_of_ne_zero_left c hm.ne')]\n#align cancel_right_div_gcd cancel_right_div_gcd\n\n",
 "cancel_left_div_gcd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/-- To cancel a common factor `c` from a `modeq` we must divide the modulus `m` by `gcd m c`. -/\ntheorem cancel_left_div_gcd (hm : 0 < m) (h : «expr ≡ [ZMOD ]» (c * a) (c * b) m) :\n    «expr ≡ [ZMOD ]» a b (m / gcd m c) :=\n  cancel_right_div_gcd hm <| by simpa [mul_comm] using h\n#align cancel_left_div_gcd cancel_left_div_gcd\n\n",
 "add_right_cancel'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem add_right_cancel' (c : ℤ) (h : «expr ≡ [ZMOD ]» (a + c) (b + c) n) : «expr ≡ [ZMOD ]» a b n :=\n  ModEq.rfl.add_right_cancel h\n#align add_right_cancel' add_right_cancel'\n\n",
 "add_right_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print add_right_cancel /-\nprotected theorem add_right_cancel (h₁ : «expr ≡ [ZMOD ]» c d n) (h₂ : «expr ≡ [ZMOD ]» (a + c) (b + d) n) :\n    «expr ≡ [ZMOD ]» a b n := by\n  rw [add_comm a, add_comm b] at h₂\n  exact h₁.add_left_cancel h₂\n#align add_right_cancel add_right_cancel\n-/\n\n",
 "add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem add_right (c : ℤ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (a + c) (b + c) n :=\n  h.add ModEq.rfl\n#align add_right add_right\n\n",
 "add_modeq_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n@[simp]\ntheorem add_modeq_right : «expr ≡ [ZMOD ]» (a + n) a n :=\n  ModEq.symm <| modEq_iff_dvd.2 <| by simp\n#align add_modeq_right add_modeq_right\n\n",
 "add_modeq_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n@[simp]\ntheorem add_modeq_left : «expr ≡ [ZMOD ]» (n + a) a n :=\n  ModEq.symm <| modEq_iff_dvd.2 <| by simp\n#align add_modeq_left add_modeq_left\n\n",
 "add_left_cancel'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem add_left_cancel' (c : ℤ) (h : «expr ≡ [ZMOD ]» (c + a) (c + b) n) : «expr ≡ [ZMOD ]» a b n :=\n  ModEq.rfl.add_left_cancel h\n#align add_left_cancel' add_left_cancel'\n\n",
 "add_left_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print add_left_cancel /-\nprotected theorem add_left_cancel (h₁ : «expr ≡ [ZMOD ]» a b n) (h₂ : «expr ≡ [ZMOD ]» (a + c) (b + d) n) :\n    «expr ≡ [ZMOD ]» c d n :=\n  have : d - c = b + d - (a + c) - (b - a) := by ring\n  modEq_iff_dvd.2 <| by\n    rw [this]\n    exact dvd_sub h₂.dvd h₁.dvd\n#align add_left_cancel add_left_cancel\n-/\n\n",
 "add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem add_left (c : ℤ) (h : «expr ≡ [ZMOD ]» a b n) : «expr ≡ [ZMOD ]» (c + a) (c + b) n :=\n  ModEq.rfl.add h\n#align add_left add_left\n\n",
 "add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\nprotected theorem add (h₁ : «expr ≡ [ZMOD ]» a b n) (h₂ : «expr ≡ [ZMOD ]» c d n) :\n    «expr ≡ [ZMOD ]» (a + c) (b + d) n :=\n  modEq_iff_dvd.2 <| by\n    convert dvd_add h₁.dvd h₂.dvd\n    ring\n#align add add\n\n",
 "Eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print Eq /-\nprotected theorem Eq : «expr ≡ [ZMOD ]» a b n → a % n = b % n :=\n  id\n#align eq Eq\n-/\n\n"}