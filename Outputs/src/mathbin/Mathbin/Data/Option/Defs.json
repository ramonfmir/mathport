{"some_inj":
 "theorem some_inj {a b : α} : some a = some b ↔ a = b := by simp\n#align some_inj some_inj\n\n",
 "mem_to_list":
 "@[simp]\ntheorem mem_to_list {a : α} {o : Option α} : a ∈ toList o ↔ a ∈ o := by cases o <;> simp [to_list, eq_comm]\n#align mem_to_list mem_to_list\n\n",
 "mem_some_iff":
 "theorem mem_some_iff {α : Type _} {a b : α} : a ∈ some b ↔ b = a := by simp\n#align mem_some_iff mem_some_iff\n\n",
 "mem_iff":
 "theorem mem_iff {a : α} {b : Option α} : a ∈ b ↔ b = a :=\n  iff.rfl\n#align mem_iff mem_iff\n\n",
 "mem_def":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem mem_def {a : α} {b : Option α} : a ∈ b ↔ b = some a :=\n  iff.rfl\n#align mem_def mem_def\n\n",
 "is_none_iff_eq_none":
 "theorem is_none_iff_eq_none {o : Option α} : o.is_none = true ↔ o = none :=\n  ⟨Option.eq_none_of_isNone, fun e => e.symm ▸ rfl⟩\n#align is_none_iff_eq_none is_none_iff_eq_none\n\n",
 "iget_some":
 "@[simp]\ntheorem iget_some [Inhabited α] {a : α} : (some a).iget = a :=\n  rfl\n#align iget_some iget_some\n\n"}