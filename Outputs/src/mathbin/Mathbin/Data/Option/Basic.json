{"to_list_some":
 "@[simp]\ntheorem to_list_some (a : α) : (a : option α).to_list = [a] :=\n  rfl\n#align to_list_some to_list_some\n\n",
 "to_list_none":
 "@[simp]\ntheorem to_list_none (α : Type _) : (none : option α).to_list = [] :=\n  rfl\n#align to_list_none to_list_none\n\n",
 "some_orelse'":
 "@[simp]\ntheorem some_orelse' (a : α) (x : option α) : (some a).orelse x = some a :=\n  rfl\n#align some_orelse' some_orelse'\n\n",
 "some_orelse":
 "@[simp]\ntheorem some_orelse (a : α) (x : option α) : (some a <|> x) = some a :=\n  rfl\n#align some_orelse some_orelse\n\n",
 "some_ne_none":
 "theorem some_ne_none (x : α) : some x ≠ none := fun h => option.no_confusion h\n#align some_ne_none some_ne_none\n\n",
 "some_injective":
 "theorem some_injective (α : Type _) : function.injective (@some α) := fun _ _ => some_inj.mp\n#align some_injective some_injective\n\n",
 "some_get":
 "@[simp]\ntheorem some_get : ∀ {x : option α} (h : is_some x), some (option.get h) = x\n  | some x, hx => rfl\n#align some_get some_get\n\n",
 "some_eq_coe":
 "theorem some_eq_coe (a : α) : some a = a :=\n  rfl\n#align some_eq_coe some_eq_coe\n\n",
 "some_bind'":
 "@[simp]\ntheorem some_bind' (a : α) (f : α → option β) : (some a).bind f = f a :=\n  rfl\n#align some_bind' some_bind'\n\n",
 "some_bind":
 "@[simp]\ntheorem some_bind {α β} (a : α) (f : α → option β) : some a >>= f = f a :=\n  rfl\n#align some_bind some_bind\n\n",
 "seq_some":
 "@[simp]\ntheorem seq_some {α β} {a : α} {f : α → β} : some f <*> some a = some (f a) :=\n  rfl\n#align seq_some seq_some\n\n",
 "pmap_some":
 "@[simp]\ntheorem pmap_some (f : ∀ a : α, p a → β) {x : α} (h : p x) : pmap f (some x) = fun _ => some (f x h) :=\n  rfl\n#align pmap_some pmap_some\n\n",
 "pmap_none":
 "@[simp]\ntheorem pmap_none (f : ∀ a : α, p a → β) {H} : pmap f (@none α) H = none :=\n  rfl\n#align pmap_none pmap_none\n\n",
 "pmap_map":
 "theorem pmap_map (g : γ → α) (x : option γ) (H) :\n    pmap f (x.map g) H = pmap (fun a h => f (g a) h) x fun a h => H _ (mem_map_of_mem _ h) := by\n  cases x <;> simp only [map_none', map_some', pmap]\n#align pmap_map pmap_map\n\n",
 "pmap_eq_some_iff":
 "@[simp]\ntheorem pmap_eq_some_iff {hf} {y : β} : pmap f x hf = some y ↔ ∃ (a : α)(H : x = some a), f a (hf a H) = y :=\n  by\n  cases x\n  · simp only [not_mem_none, exists_false, pmap, not_false_iff, exists_prop_of_false]\n  · constructor\n    · intro h\n      simp only [pmap] at h\n      exact ⟨x, rfl, h⟩\n    · rintro ⟨a, H, rfl⟩\n      simp only [mem_def] at H\n      simp only [H, pmap]\n#align pmap_eq_some_iff pmap_eq_some_iff\n\n",
 "pmap_eq_none_iff":
 "@[simp]\ntheorem pmap_eq_none_iff {h} : pmap f x h = none ↔ x = none := by cases x <;> simp\n#align pmap_eq_none_iff pmap_eq_none_iff\n\n",
 "pmap_eq_map":
 "@[simp]\ntheorem pmap_eq_map (p : α → Prop) (f : α → β) (x H) : @pmap _ _ p (fun a _ => f a) x H = option.map f x := by\n  cases x <;> simp only [map_none', map_some', pmap]\n#align pmap_eq_map pmap_eq_map\n\n",
 "pmap_bind":
 "theorem pmap_bind {α β γ} {x : option α} {g : α → option β} {p : β → Prop} {f : ∀ b, p b → γ} (H)\n    (H' : ∀ (a : α), ∀ b ∈ g a, b ∈ x >>= g) :\n    pmap f (x >>= g) H = x >>= fun a => pmap f (g a) fun b h => H _ (H' a _ h) := by\n  cases x <;> simp only [pmap, none_bind, some_bind]\n#align pmap_bind pmap_bind\n\n",
 "pbind_map":
 "theorem pbind_map (f : α → β) (x : option α) (g : ∀ b : β, b ∈ x.map f → option γ) :\n    pbind (option.map f x) g = x.pbind fun a h => g (f a) (mem_map_of_mem _ h) := by cases x <;> rfl\n#align pbind_map pbind_map\n\n",
 "pbind_eq_some":
 "theorem pbind_eq_some {f : ∀ a : α, a ∈ x → option β} {y : β} : x.pbind f = some y ↔ ∃ z ∈ x, f z H = some y :=\n  by\n  cases x\n  · simp\n  · simp only [pbind]\n    constructor\n    · intro h\n      use x\n      simpa only [mem_def, exists_prop_of_true] using h\n    · rintro ⟨z, H, hz⟩\n      simp only [mem_def] at H\n      simpa only [H] using hz\n#align pbind_eq_some pbind_eq_some\n\n",
 "pbind_eq_none":
 "theorem pbind_eq_none {f : ∀ a : α, a ∈ x → option β} (h' : ∀ a ∈ x, f a H = none → x = none) :\n    x.pbind f = none ↔ x = none := by\n  cases x\n  · simp\n  · simp only [pbind, iff_false_iff]\n    intro h\n    cases h' x rfl h\n#align pbind_eq_none pbind_eq_none\n\n",
 "pbind_eq_bind":
 "@[simp]\ntheorem pbind_eq_bind (f : α → option β) (x : option α) : (x.pbind fun a _ => f a) = x.bind f := by\n  cases x <;> simp only [pbind, none_bind', some_bind']\n#align pbind_eq_bind pbind_eq_bind\n\n",
 "orelse_none'":
 "@[simp]\ntheorem orelse_none' (x : option α) : x.orelse none = x := by cases x <;> rfl\n#align orelse_none' orelse_none'\n\n",
 "orelse_none":
 "@[simp]\ntheorem orelse_none (x : option α) : (x <|> none) = x :=\n  orElse_none' x\n#align orelse_none orelse_none\n\n",
 "orelse_eq_some'":
 "theorem orelse_eq_some' (o o' : option α) (x : α) : o.orelse o' = some x ↔ o = some x ∨ o = none ∧ o' = some x :=\n  option.orelse_eq_some o o' x\n#align orelse_eq_some' orelse_eq_some'\n\n",
 "orelse_eq_some":
 "theorem orelse_eq_some (o o' : option α) (x : α) : (o <|> o') = some x ↔ o = some x ∨ o = none ∧ o' = some x :=\n  by\n  cases o\n  · simp only [true_and_iff, false_or_iff, eq_self_iff_true, none_orelse]\n  · simp only [some_orelse, or_false_iff, false_and_iff]\n#align orelse_eq_some orelse_eq_some\n\n",
 "orelse_eq_none'":
 "@[simp]\ntheorem orelse_eq_none' (o o' : option α) : o.orelse o' = none ↔ o = none ∧ o' = none :=\n  option.orelse_eq_none o o'\n#align orelse_eq_none' orelse_eq_none'\n\n",
 "orelse_eq_none":
 "@[simp]\ntheorem orelse_eq_none (o o' : option α) : (o <|> o') = none ↔ o = none ∧ o' = none :=\n  by\n  cases o\n  · simp only [true_and_iff, none_orelse, eq_self_iff_true]\n  · simp only [some_orelse, false_and_iff]\n#align orelse_eq_none orelse_eq_none\n\n",
 "not_mem_none":
 "@[simp]\ntheorem not_mem_none (a : α) : a ∉ (none : option α) := fun h => option.no_confusion h\n#align not_mem_none not_mem_none\n\n",
 "not_is_some_iff_eq_none":
 "theorem not_is_some_iff_eq_none {o : option α} : ¬o.is_some ↔ o = none := by cases o <;> simp\n#align not_is_some_iff_eq_none not_is_some_iff_eq_none\n\n",
 "not_is_some":
 "@[simp]\ntheorem not_is_some {a : option α} : is_some a = ff ↔ a.is_none = tt := by cases a <;> simp\n#align not_is_some not_is_some\n\n",
 "none_orelse'":
 "@[simp]\ntheorem none_orelse' (x : option α) : none.orelse x = x := by cases x <;> rfl\n#align none_orelse' none_orelse'\n\n",
 "none_orelse":
 "@[simp]\ntheorem none_orelse (x : option α) : (none <|> x) = x :=\n  none_orElse' x\n#align none_orelse none_orelse\n\n",
 "none_bind'":
 "@[simp]\ntheorem none_bind' (f : α → option β) : none.bind f = none :=\n  rfl\n#align none_bind' none_bind'\n\n",
 "none_bind":
 "@[simp]\ntheorem none_bind {α β} (f : α → option β) : none >>= f = none :=\n  rfl\n#align none_bind none_bind\n\n",
 "ne_none_iff_is_some":
 "theorem ne_none_iff_is_some {o : option α} : o ≠ none ↔ o.is_some := by cases o <;> simp\n#align ne_none_iff_is_some ne_none_iff_is_some\n\n",
 "ne_none_iff_exists'":
 "theorem ne_none_iff_exists' {o : option α} : o ≠ none ↔ ∃ x : α, o = some x :=\n  ne_none_iff_exists.trans <| exists_congr fun _ => eq_comm\n#align ne_none_iff_exists' ne_none_iff_exists'\n\n",
 "ne_none_iff_exists":
 "theorem ne_none_iff_exists {o : option α} : o ≠ none ↔ ∃ x : α, some x = o := by cases o <;> simp\n#align ne_none_iff_exists ne_none_iff_exists\n\n",
 "mem_unique":
 "theorem mem_unique {o : option α} {a b : α} (ha : a ∈ o) (hb : b ∈ o) : a = b :=\n  option.some.inj <| ha.symm.trans hb\n#align mem_unique mem_unique\n\n",
 "mem_pmem":
 "theorem mem_pmem {a : α} (h : ∀ a ∈ x, p a) (ha : a ∈ x) : f a (h a ha) ∈ pmap f x h :=\n  by\n  rw [mem_def] at ha⊢\n  subst ha\n  rfl\n#align mem_pmem mem_pmem\n\n",
 "mem_of_mem_join":
 "theorem mem_of_mem_join {a : α} {x : option (option α)} (h : a ∈ x.join) : some a ∈ x :=\n  mem_def.mpr ((mem_def.mp h).symm ▸ join_eq_some.mp h)\n#align mem_of_mem_join mem_of_mem_join\n\n",
 "mem_map_of_mem":
 "theorem mem_map_of_mem {a : α} {x : option α} (g : α → β) (h : a ∈ x) : g a ∈ x.map g :=\n  mem_def.mpr ((mem_def.mp h).symm ▸ map_some')\n#align mem_map_of_mem mem_map_of_mem\n\n",
 "mem_map":
 "theorem mem_map {f : α → β} {y : β} {o : option α} : y ∈ o.map f ↔ ∃ x ∈ o, f x = y := by simp\n#align mem_map mem_map\n\n",
 "map_some'":
 "@[simp]\ntheorem map_some' {a : α} {f : α → β} : option.map f (some a) = some (f a) :=\n  rfl\n#align map_some' map_some'\n\n",
 "map_some":
 "theorem map_some {α β} {a : α} {f : α → β} : f <$> some a = some (f a) :=\n  rfl\n#align map_some map_some\n\n",
 "map_pmap":
 "theorem map_pmap (g : β → γ) (f : ∀ a, p a → β) (x H) : option.map g (pmap f x H) = pmap (fun a h => g (f a h)) x H :=\n  by cases x <;> simp only [map_none', map_some', pmap]\n#align map_pmap map_pmap\n\n",
 "map_pbind":
 "theorem map_pbind (f : β → γ) (x : option α) (g : ∀ a, a ∈ x → option β) :\n    option.map f (x.pbind g) = x.pbind fun a H => option.map f (g a H) := by cases x <;> simp only [pbind, map_none']\n#align map_pbind map_pbind\n\n",
 "map_none'":
 "@[simp]\ntheorem map_none' {f : α → β} : option.map f none = none :=\n  rfl\n#align map_none' map_none'\n\n",
 "map_none":
 "theorem map_none {α β} {f : α → β} : f <$> none = none :=\n  rfl\n#align map_none map_none\n\n",
 "map_map":
 "@[simp]\ntheorem map_map (h : β → γ) (g : α → β) (x : option α) : option.map h (option.map g x) = option.map (h ∘ g) x := by\n  cases x <;> simp only [map_none', map_some']\n#align map_map map_map\n\n",
 "map_injective'":
 "/-- `option.map` as a function between functions is injective. -/\ntheorem map_injective' : function.injective (@option.map α β) := fun f g h =>\n  funext fun x => some_injective _ <| by simp only [← map_some', h]\n#align map_injective' map_injective'\n\n",
 "map_injective":
 "/-- `option.map f` is injective if `f` is injective. -/\ntheorem map_injective {f : α → β} (Hf : function.injective f) : function.injective (option.map f)\n  | none, none, H => rfl\n  | some a₁, some a₂, H => by rw [Hf (option.some.inj H)]\n#align map_injective map_injective\n\n",
 "map_inj":
 "@[simp]\ntheorem map_inj {f g : α → β} : option.map f = option.map g ↔ f = g :=\n  map_injective'.eq_iff\n#align map_inj map_inj\n\n",
 "map_eq_some'":
 "@[simp]\ntheorem map_eq_some' {x : option α} {f : α → β} {b : β} : x.map f = some b ↔ ∃ a, x = some a ∧ f a = b := by\n  cases x <;> simp\n#align map_eq_some' map_eq_some'\n\n",
 "map_eq_some":
 "theorem map_eq_some {α β} {x : option α} {f : α → β} {b : β} : f <$> x = some b ↔ ∃ a, x = some a ∧ f a = b := by\n  cases x <;> simp\n#align map_eq_some map_eq_some\n\n",
 "map_eq_none'":
 "@[simp]\ntheorem map_eq_none' {x : option α} {f : α → β} : x.map f = none ↔ x = none := by\n  cases x <;> simp only [map_none', map_some', eq_self_iff_true]\n#align map_eq_none' map_eq_none'\n\n",
 "map_eq_none":
 "theorem map_eq_none {α β} {x : option α} {f : α → β} : f <$> x = none ↔ x = none := by\n  cases x <;> simp only [map_none, map_some, eq_self_iff_true]\n#align map_eq_none map_eq_none\n\n",
 "map_eq_map":
 "@[simp]\ntheorem map_eq_map {α β} {f : α → β} : (· <$> ·) f = option.map f :=\n  rfl\n#align map_eq_map map_eq_map\n\n",
 "map_eq_id":
 "@[simp]\ntheorem map_eq_id {f : α → α} : option.map f = id ↔ f = id :=\n  map_injective'.eq_iff' map_id\n#align map_eq_id map_eq_id\n\n",
 "map_congr":
 "#print map_congr /-\ntheorem map_congr {f g : α → β} {x : option α} (h : ∀ a ∈ x, f a = g a) : option.map f x = option.map g x := by\n  cases x <;> simp only [map_none', map_some', h, mem_def]\n#align map_congr map_congr\n-/\n\n",
 "map_comp_some":
 "@[simp]\ntheorem map_comp_some (f : α → β) : option.map f ∘ some = some ∘ f :=\n  rfl\n#align map_comp_some map_comp_some\n\n",
 "map_comp_map":
 "@[simp]\ntheorem map_comp_map (f : α → β) (g : β → γ) : option.map g ∘ option.map f = option.map (g ∘ f) :=\n  by\n  ext x\n  rw [comp_map]\n#align map_comp_map map_comp_map\n\n",
 "map_comm":
 "theorem map_comm {f₁ : α → β} {f₂ : α → γ} {g₁ : β → δ} {g₂ : γ → δ} (h : g₁ ∘ f₁ = g₂ ∘ f₂) (a : α) :\n    (option.map f₁ a).map g₁ = (option.map f₂ a).map g₂ := by rw [map_map, h, ← map_map]\n#align map_comm map_comm\n\n",
 "map_coe'":
 "@[simp]\ntheorem map_coe' {a : α} {f : α → β} : option.map f (a : option α) = ↑(f a) :=\n  rfl\n#align map_coe' map_coe'\n\n",
 "map_coe":
 "theorem map_coe {α β} {a : α} {f : α → β} : f <$> (a : option α) = ↑(f a) :=\n  rfl\n#align map_coe map_coe\n\n",
 "map_bind'":
 "theorem map_bind' (f : β → γ) (x : option α) (g : α → option β) :\n    option.map f (x.bind g) = x.bind fun a => option.map f (g a) := by cases x <;> simp\n#align map_bind' map_bind'\n\n",
 "map_bind":
 "#print map_bind /-\ntheorem map_bind {α β γ} (f : β → γ) (x : option α) (g : α → option β) :\n    option.map f (x >>= g) = x >>= fun a => option.map f (g a) := by\n  simp_rw [← map_eq_map, ← bind_pure_comp_eq_map, is_lawful_monad.bind_assoc]\n#align map_bind map_bind\n-/\n\n",
 "lift_or_get_some_some":
 "@[simp]\ntheorem lift_or_get_some_some {f} {a b : α} : liftOrGet f (some a) (some b) = f a b :=\n  rfl\n#align lift_or_get_some_some lift_or_get_some_some\n\n",
 "lift_or_get_none_right":
 "@[simp]\ntheorem lift_or_get_none_right {f} {a : option α} : liftOrGet f a none = a := by cases a <;> rfl\n#align lift_or_get_none_right lift_or_get_none_right\n\n",
 "lift_or_get_none_left":
 "@[simp]\ntheorem lift_or_get_none_left {f} {b : option α} : liftOrGet f none b = b := by cases b <;> rfl\n#align lift_or_get_none_left lift_or_get_none_left\n\n",
 "lift_or_get_choice":
 "theorem lift_or_get_choice {f : α → α → α} (h : ∀ a b, f a b = a ∨ f a b = b) :\n    ∀ o₁ o₂, liftOrGet f o₁ o₂ = o₁ ∨ liftOrGet f o₁ o₂ = o₂\n  | none, none => or.inl rfl\n  | some a, none => or.inl rfl\n  | none, some b => or.inr rfl\n  | some a, some b => by simpa [lift_or_get] using h a b\n#align lift_or_get_choice lift_or_get_choice\n\n",
 "left_unique":
 "theorem mem.left_unique : relator.left_unique ((· ∈ ·) : α → option α → Prop) := fun a o b => mem_unique\n#align mem.left_unique mem.left_unique\n\n",
 "join_pmap_eq_pmap_join":
 "@[simp]\ntheorem join_pmap_eq_pmap_join {f : ∀ a, p a → β} {x : option (option α)} (H) :\n    (pmap (pmap f) x H).join = pmap f x.join fun a h => H (some a) (mem_of_mem_join h) _ rfl := by\n  rcases x with (_ | _ | x) <;> simp\n#align join_pmap_eq_pmap_join join_pmap_eq_pmap_join\n\n",
 "join_ne_none'":
 "theorem join_ne_none' {x : option (option α)} : ¬x.join = none ↔ ∃ z, x = some (some z) := by simp\n#align join_ne_none' join_ne_none'\n\n",
 "join_ne_none":
 "theorem join_ne_none {x : option (option α)} : x.join ≠ none ↔ ∃ z, x = some (some z) := by simp\n#align join_ne_none join_ne_none\n\n",
 "join_map_eq_map_join":
 "theorem join_map_eq_map_join {f : α → β} {x : option (option α)} : (x.map (option.map f)).join = x.join.map f := by\n  rcases x with (_ | _ | x) <;> simp\n#align join_map_eq_map_join join_map_eq_map_join\n\n",
 "join_join":
 "theorem join_join {x : option (option (option α))} : x.join.join = (x.map join).join := by\n  rcases x with (_ | _ | _ | x) <;> simp\n#align join_join join_join\n\n",
 "join_eq_some":
 "theorem join_eq_some {x : option (option α)} {a : α} : x.join = some a ↔ x = some (some a) := by simp\n#align join_eq_some join_eq_some\n\n",
 "join_eq_none":
 "theorem join_eq_none {o : option (option α)} : o.join = none ↔ o = none ∨ o = some none := by\n  rcases o with (_ | _ | _) <;> simp\n#align join_eq_none join_eq_none\n\n",
 "join_eq_join":
 "theorem join_eq_join : joinM = @join α :=\n  funext fun x => by rw [joinM, bind_id_eq_join]\n#align join_eq_join join_eq_join\n\n",
 "is_some_some":
 "@[simp]\ntheorem is_some_some {a : α} : is_some (some a) = tt :=\n  rfl\n#align is_some_some is_some_some\n\n",
 "is_some_none":
 "@[simp]\ntheorem is_some_none : @is_some α none = ff :=\n  rfl\n#align is_some_none is_some_none\n\n",
 "is_some_iff_exists":
 "theorem is_some_iff_exists {x : option α} : is_some x ↔ ∃ a, x = some a := by\n  cases x <;> simp [is_some] <;> exact ⟨_, rfl⟩\n#align is_some_iff_exists is_some_iff_exists\n\n",
 "is_none_some":
 "@[simp]\ntheorem is_none_some {a : α} : is_none (some a) = ff :=\n  rfl\n#align is_none_some is_none_some\n\n",
 "is_none_none":
 "@[simp]\ntheorem is_none_none : @is_none α none = tt :=\n  rfl\n#align is_none_none is_none_none\n\n",
 "iget_of_mem":
 "theorem iget_of_mem [inhabited α] {a : α} : ∀ {o : option α}, a ∈ o → o.iget = a\n  | _, rfl => rfl\n#align iget_of_mem iget_of_mem\n\n",
 "iget_mem":
 "theorem iget_mem [inhabited α] : ∀ {o : option α}, is_some o → o.iget ∈ o\n  | some a, _ => rfl\n#align iget_mem iget_mem\n\n",
 "guard_eq_some'":
 "@[simp]\ntheorem guard_eq_some' {p : Prop} [decidable p] (u) : _root_.guard p = some u ↔ p :=\n  by\n  cases u\n  by_cases p <;> simp [_root_.guard, h] <;> first |rfl|contradiction\n#align guard_eq_some' guard_eq_some'\n\n",
 "guard_eq_some":
 "@[simp]\ntheorem guard_eq_some {p : α → Prop} [decidable_pred p] {a b : α} : guard p a = some b ↔ a = b ∧ p a := by\n  by_cases p a <;> simp [option.guard, h] <;> intro <;> contradiction\n#align guard_eq_some guard_eq_some\n\n",
 "get_some":
 "@[simp]\ntheorem get_some (x : α) (h : is_some (some x)) : option.get h = x :=\n  rfl\n#align get_some get_some\n\n",
 "get_or_else_some":
 "@[simp]\ntheorem get_or_else_some (x y : α) : Option.getD (some x) y = x :=\n  rfl\n#align get_or_else_some get_or_else_some\n\n",
 "get_or_else_of_ne_none":
 "theorem get_or_else_of_ne_none {x : option α} (hx : x ≠ none) (y : α) : some (x.get_or_else y) = x := by\n  cases x <;> [contradiction, rw [get_or_else_some]]\n#align get_or_else_of_ne_none get_or_else_of_ne_none\n\n",
 "get_or_else_none":
 "@[simp]\ntheorem get_or_else_none (x : α) : Option.getD none x = x :=\n  rfl\n#align get_or_else_none get_or_else_none\n\n",
 "get_or_else_map":
 "@[simp]\ntheorem get_or_else_map (f : α → β) (x : α) (o : option α) : getD (o.map f) (f x) = f (getD o x) := by cases o <;> rfl\n#align get_or_else_map get_or_else_map\n\n",
 "get_or_else_default_eq_iget":
 "theorem get_or_else_default_eq_iget [inhabited α] (o : option α) : o.get_or_else default = o.iget := by cases o <;> rfl\n#align get_or_else_default_eq_iget get_or_else_default_eq_iget\n\n",
 "get_or_else_coe":
 "@[simp]\ntheorem get_or_else_coe (x y : α) : Option.getD (↑x) y = x :=\n  rfl\n#align get_or_else_coe get_or_else_coe\n\n",
 "get_of_mem":
 "theorem get_of_mem {a : α} : ∀ {o : option α} (h : is_some o), a ∈ o → option.get h = a\n  | _, _, rfl => rfl\n#align get_of_mem get_of_mem\n\n",
 "get_mem":
 "@[simp]\ntheorem get_mem : ∀ {o : option α} (h : is_some o), option.get h ∈ o\n  | some a, _ => rfl\n#align get_mem get_mem\n\n",
 "forall_mem_map":
 "theorem forall_mem_map {f : α → β} {o : option α} {p : β → Prop} : (∀ y ∈ o.map f, p y) ↔ ∀ x ∈ o, p (f x) := by simp\n#align forall_mem_map forall_mem_map\n\n",
 "forall":
 "protected theorem forall {p : option α → Prop} : (∀ x, p x) ↔ p none ∧ ∀ x, p (some x) :=\n  ⟨fun h => ⟨h _, fun x => h _⟩, fun h x => option.cases_on x h.1 h.2⟩\n#align forall forall\n\n",
 "ext":
 "@[ext]\ntheorem ext : ∀ {o₁ o₂ : option α}, (∀ a, a ∈ o₁ ↔ a ∈ o₂) → o₁ = o₂\n  | none, none, H => rfl\n  | some a, o, H => ((H _).1 rfl).symm\n  | o, some b, H => (H _).2 rfl\n#align ext ext\n\n",
 "exists_mem_map":
 "theorem exists_mem_map {f : α → β} {o : option α} {p : β → Prop} : (∃ y ∈ o.map f, p y) ↔ ∃ x ∈ o, p (f x) := by simp\n#align exists_mem_map exists_mem_map\n\n",
 "exists":
 "protected theorem exists {p : option α → Prop} : (∃ x, p x) ↔ p none ∨ ∃ x, p (some x) :=\n  ⟨fun ⟨x, hx⟩ => (option.cases_on x or.inl fun x hx => or.inr ⟨x, hx⟩) hx, fun h =>\n    h.elim (fun h => ⟨_, h⟩) fun ⟨x, hx⟩ => ⟨_, hx⟩⟩\n#align exists exists\n\n",
 "eq_some_iff_get_eq":
 "theorem eq_some_iff_get_eq {o : option α} {a : α} : o = some a ↔ ∃ h : o.is_some, option.get h = a := by\n  cases o <;> simp\n#align eq_some_iff_get_eq eq_some_iff_get_eq\n\n",
 "eq_of_mem_of_mem":
 "theorem eq_of_mem_of_mem {a : α} {o1 o2 : option α} (h1 : a ∈ o1) (h2 : a ∈ o2) : o1 = o2 :=\n  h1.trans h2.symm\n#align eq_of_mem_of_mem eq_of_mem_of_mem\n\n",
 "eq_none_iff_forall_not_mem":
 "theorem eq_none_iff_forall_not_mem {o : option α} : o = none ↔ ∀ a, a ∉ o :=\n  ⟨fun e a h => by rw [e] at h <;> cases h, fun h => ext <| by simpa⟩\n#align eq_none_iff_forall_not_mem eq_none_iff_forall_not_mem\n\n",
 "elim_none_some":
 "@[simp]\ntheorem elim_none_some (f : option α → β) : Option.elim' (f none) (f ∘ some) = f :=\n  funext fun o => by cases o <;> rfl\n#align elim_none_some elim_none_some\n\n",
 "comp_map":
 "theorem comp_map (h : β → γ) (g : α → β) (x : option α) : option.map (h ∘ g) x = option.map h (option.map g x) :=\n  (map_map _ _ _).symm\n#align comp_map comp_map\n\n",
 "coe_ne_none":
 "@[simp]\ntheorem coe_ne_none (a : α) : (a : option α) ≠ none :=\n  fun.\n#align coe_ne_none coe_ne_none\n\n",
 "coe_get":
 "@[simp]\ntheorem coe_get {o : option α} (h : o.is_some) : ((option.get h : α) : option α) = o :=\n  option.some_get h\n#align coe_get coe_get\n\n",
 "coe_def":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem coe_def : (coe : α → option α) = some :=\n  rfl\n#align coe_def coe_def\n\n",
 "choice_is_some_iff_nonempty":
 "theorem choice_is_some_iff_nonempty {α : Type _} : (choice α).is_some ↔ nonempty α :=\n  by\n  fconstructor\n  · intro h\n    exact ⟨option.get h⟩\n  · intro h\n    dsimp only [choice]\n    rw [dif_pos h]\n    exact is_some_some\n#align choice_is_some_iff_nonempty choice_is_some_iff_nonempty\n\n",
 "choice_eq_none":
 "theorem choice_eq_none (α : Type _) [is_empty α] : choice α = none :=\n  dif_neg (not_nonempty_iff_imp_false.mpr is_empty_elim)\n#align choice_eq_none choice_eq_none\n\n",
 "choice_eq":
 "theorem choice_eq {α : Type _} [subsingleton α] (a : α) : choice α = some a :=\n  by\n  dsimp [choice]\n  rw [dif_pos (⟨a⟩ : nonempty α)]\n  congr\n#align choice_eq choice_eq\n\n",
 "cases_on'_some":
 "@[simp]\ntheorem cases_on'_some (x : β) (f : α → β) (a : α) : cases_on' (some a) x f = f a :=\n  rfl\n#align cases_on'_some cases_on'_some\n\n",
 "cases_on'_none_coe":
 "@[simp]\ntheorem cases_on'_none_coe (f : option α → β) (o : option α) : cases_on' o (f none) (f ∘ coe) = f o := by\n  cases o <;> rfl\n#align cases_on'_none_coe cases_on'_none_coe\n\n",
 "cases_on'_none":
 "@[simp]\ntheorem cases_on'_none (x : β) (f : α → β) : cases_on' none x f = x :=\n  rfl\n#align cases_on'_none cases_on'_none\n\n",
 "cases_on'_coe":
 "@[simp]\ntheorem cases_on'_coe (x : β) (f : α → β) (a : α) : cases_on' (a : option α) x f = f a :=\n  rfl\n#align cases_on'_coe cases_on'_coe\n\n",
 "bind_some'":
 "@[simp]\ntheorem bind_some' : ∀ x : option α, x.bind some = x :=\n  bind_some\n#align bind_some' bind_some'\n\n",
 "bind_some":
 "@[simp]\ntheorem bind_some : ∀ x : option α, x >>= some = x :=\n  @bind_pure α option _ _\n#align bind_some bind_some\n\n",
 "bind_pmap":
 "theorem bind_pmap {α β γ} {p : α → Prop} (f : ∀ a, p a → β) (x : option α) (g : β → option γ) (H) :\n    pmap f x H >>= g = x.pbind fun a h => g (f a (H _ h)) := by\n  cases x <;> simp only [pmap, none_bind, some_bind, pbind]\n#align bind_pmap bind_pmap\n\n",
 "bind_map_comm":
 "theorem bind_map_comm {α β} {x : option (option α)} {f : α → β} : x >>= option.map f = x.map (option.map f) >>= id := by\n  cases x <;> simp\n#align bind_map_comm bind_map_comm\n\n",
 "bind_id_eq_join":
 "theorem bind_id_eq_join {x : option (option α)} : x >>= id = x.join := by simp\n#align bind_id_eq_join bind_id_eq_join\n\n",
 "bind_eq_some'":
 "@[simp]\ntheorem bind_eq_some' {x : option α} {f : α → option β} {b : β} : x.bind f = some b ↔ ∃ a, x = some a ∧ f a = some b :=\n  by cases x <;> simp\n#align bind_eq_some' bind_eq_some'\n\n",
 "bind_eq_some":
 "@[simp]\ntheorem bind_eq_some {α β} {x : option α} {f : α → option β} {b : β} :\n    x >>= f = some b ↔ ∃ a, x = some a ∧ f a = some b := by cases x <;> simp\n#align bind_eq_some bind_eq_some\n\n",
 "bind_eq_none'":
 "@[simp]\ntheorem bind_eq_none' {o : option α} {f : α → option β} : o.bind f = none ↔ ∀ b a, a ∈ o → b ∉ f a := by\n  simp only [eq_none_iff_forall_not_mem, not_exists, not_and, mem_def, bind_eq_some']\n#align bind_eq_none' bind_eq_none'\n\n",
 "bind_eq_none":
 "@[simp]\ntheorem bind_eq_none {α β} {o : option α} {f : α → option β} : o >>= f = none ↔ ∀ b a, a ∈ o → b ∉ f a :=\n  bind_eq_none'\n#align bind_eq_none bind_eq_none\n\n",
 "bind_eq_bind":
 "theorem bind_eq_bind {α β : Type _} {f : α → option β} {x : option α} : x >>= f = x.bind f :=\n  rfl\n#align bind_eq_bind bind_eq_bind\n\n",
 "bind_comm":
 "theorem bind_comm {α β γ} {f : α → β → option γ} (a : option α) (b : option β) :\n    (a.bind fun x => b.bind (f x)) = b.bind fun y => a.bind fun x => f x y := by cases a <;> cases b <;> rfl\n#align bind_comm bind_comm\n\n",
 "bind_assoc":
 "theorem bind_assoc (x : option α) (f : α → option β) (g : β → option γ) :\n    (x.bind f).bind g = x.bind fun y => (f y).bind g := by cases x <;> rfl\n#align bind_assoc bind_assoc\n\n",
 "bex_ne_none":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x «expr ≠ » none[option.none]) -/\ntheorem bex_ne_none {p : option α → Prop} : (∃ (x : _)(_ : x ≠ none), p x) ↔ ∃ x, p (some x) :=\n  ⟨fun ⟨x, hx, hp⟩ => ⟨get <| ne_none_iff_isSome.1 hx, by rwa [some_get]⟩, fun ⟨x, hx⟩ => ⟨some x, some_ne_none x, hx⟩⟩\n#align bex_ne_none bex_ne_none\n\n",
 "ball_ne_none":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x «expr ≠ » none[option.none]) -/\ntheorem ball_ne_none {p : option α → Prop} : (∀ (x) (_ : x ≠ none), p x) ↔ ∀ x, p (some x) :=\n  ⟨fun h x => h (some x) (some_ne_none x), fun h x hx => by\n    simpa only [some_get] using h (get <| ne_none_iff_is_some.1 hx)⟩\n#align ball_ne_none ball_ne_none\n\n"}