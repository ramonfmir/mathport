{"trace_zero":
 "@[simp]\ntheorem trace_zero (h : j ≠ i) : trace (std_basis_matrix i j c) = 0 := by simp [trace, h]\n#align trace_zero trace_zero\n\n",
 "trace_eq":
 "@[simp]\ntheorem trace_eq : trace (std_basis_matrix i i c) = c := by simp [trace]\n#align trace_eq trace_eq\n\n",
 "std_basis_matrix_zero":
 "@[simp]\ntheorem std_basis_matrix_zero (i : m) (j : n) : std_basis_matrix i j (0 : α) = 0 :=\n  by\n  unfold std_basis_matrix\n  ext\n  simp\n#align std_basis_matrix_zero std_basis_matrix_zero\n\n",
 "std_basis_matrix_add":
 "theorem std_basis_matrix_add (i : m) (j : n) (a b : α) :\n    std_basis_matrix i j (a + b) = std_basis_matrix i j a + std_basis_matrix i j b :=\n  by\n  unfold std_basis_matrix; ext\n  split_ifs with h <;> simp [h]\n#align std_basis_matrix_add std_basis_matrix_add\n\n",
 "std_basis_eq_basis_mul_basis":
 "-- TODO: tie this up with the `basis` machinery of linear algebra\n-- this is not completely trivial because we are indexing by two types, instead of one\n-- TODO: add `std_basis_vec`\ntheorem std_basis_eq_basis_mul_basis (i : m) (j : n) :\n    std_basis_matrix i j 1 = vec_mul_vec (fun i' => ite (i = i') 1 0) fun j' => ite (j = j') 1 0 :=\n  by\n  ext\n  norm_num [std_basis_matrix, vec_mul_vec]\n  exact ite_and _ _ _ _\n#align std_basis_eq_basis_mul_basis std_basis_eq_basis_mul_basis\n\n",
 "smul_std_basis_matrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2020 Jalex Stark. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jalex Stark, Scott Morrison, Eric Wieser, Oliver Nash\n-/\n@[simp]\ntheorem smul_std_basis_matrix (i : m) (j : n) (a b : α) :\n    «expr • » b (std_basis_matrix i j a) = std_basis_matrix i j («expr • » b a) :=\n  by\n  unfold std_basis_matrix\n  ext\n  simp\n#align smul_std_basis_matrix smul_std_basis_matrix\n\n",
 "mul_same":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_same (k : n) (d : α) :\n    matrix.mul (std_basis_matrix i j c) (std_basis_matrix j k d) = std_basis_matrix i k (c * d) :=\n  by\n  ext (a b)\n  simp only [mul_apply, std_basis_matrix, boole_mul]\n  by_cases h₁ : i = a <;> by_cases h₂ : k = b <;> simp [h₁, h₂]\n#align mul_same mul_same\n\n",
 "mul_right_apply_same":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_right_apply_same (a : n) (M : matrix n n α) : (matrix.mul M (std_basis_matrix i j c)) a j = M a i * c := by\n  simp [mul_apply, std_basis_matrix, mul_comm]\n#align mul_right_apply_same mul_right_apply_same\n\n",
 "mul_right_apply_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_right_apply_of_ne (a b : n) (hbj : b ≠ j) (M : matrix n n α) :\n    (matrix.mul M (std_basis_matrix i j c)) a b = 0 := by simp [mul_apply, hbj.symm]\n#align mul_right_apply_of_ne mul_right_apply_of_ne\n\n",
 "mul_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_of_ne {k l : n} (h : j ≠ k) (d : α) : matrix.mul (std_basis_matrix i j c) (std_basis_matrix k l d) = 0 :=\n  by\n  ext (a b)\n  simp only [mul_apply, boole_mul, std_basis_matrix]\n  by_cases h₁ : i = a <;> simp [h₁, h, h.symm]\n#align mul_of_ne mul_of_ne\n\n",
 "mul_left_apply_same":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_left_apply_same (b : n) (M : matrix n n α) : (matrix.mul (std_basis_matrix i j c) M) i b = c * M j b := by\n  simp [mul_apply, std_basis_matrix]\n#align mul_left_apply_same mul_left_apply_same\n\n",
 "mul_left_apply_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_left_apply_of_ne (a b : n) (h : a ≠ i) (M : matrix n n α) :\n    (matrix.mul (std_basis_matrix i j c) M) a b = 0 := by simp [mul_apply, h.symm]\n#align mul_left_apply_of_ne mul_left_apply_of_ne\n\n",
 "matrix_eq_sum_std_basis":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem matrix_eq_sum_std_basis [fintype m] [fintype n] (x : matrix m n α) :\n    x =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (std_basis_matrix i j (x i j)) :=\n  by\n  ext; symm\n  iterate 2 rw [finset.sum_apply]\n  convert fintype.sum_eq_single i _\n  · simp [std_basis_matrix]\n  · intro j hj\n    simp [std_basis_matrix, hj]\n#align matrix_eq_sum_std_basis matrix_eq_sum_std_basis\n\n",
 "induction_on'":
 "-- todo: the old proof used fintypes, I don't know `finsupp` but this feels generalizable\n@[elab_as_elim]\nprotected theorem induction_on' [fintype m] [fintype n] {P : matrix m n α → Prop} (M : matrix m n α) (h_zero : P 0)\n    (h_add : ∀ p q, P p → P q → P (p + q)) (h_std_basis : ∀ (i : m) (j : n) (x : α), P (std_basis_matrix i j x)) :\n    P M := by\n  rw [matrix_eq_sum_std_basis M, ← finset.sum_product']\n  apply finset.sum_induction _ _ h_add h_zero\n  · intros\n    apply h_std_basis\n#align induction_on' induction_on'\n\n",
 "induction_on":
 "@[elab_as_elim]\nprotected theorem induction_on [fintype m] [fintype n] [nonempty m] [nonempty n] {P : matrix m n α → Prop}\n    (M : matrix m n α) (h_add : ∀ p q, P p → P q → P (p + q)) (h_std_basis : ∀ i j x, P (std_basis_matrix i j x)) :\n    P M :=\n  matrix.induction_on' M\n    (by\n      inhabit m\n      inhabit n\n      simpa using h_std_basis default default 0)\n    h_add h_std_basis\n#align induction_on induction_on\n\n",
 "diag_zero":
 "@[simp]\ntheorem diag_zero (h : j ≠ i) : diag (std_basis_matrix i j c) = 0 :=\n  funext fun k => if_neg fun ⟨e₁, e₂⟩ => h (e₂.trans e₁.symm)\n#align diag_zero diag_zero\n\n",
 "diag_same":
 "@[simp]\ntheorem diag_same : diag (std_basis_matrix i i c) = Pi.single i c :=\n  by\n  ext j\n  by_cases hij : i = j <;> try rw [hij] <;> simp [hij]\n#align diag_same diag_same\n\n",
 "apply_same":
 "@[simp]\ntheorem apply_same : std_basis_matrix i j c i j = c :=\n  if_pos (and.intro rfl rfl)\n#align apply_same apply_same\n\n",
 "apply_of_row_ne":
 "@[simp]\ntheorem apply_of_row_ne {i i' : m} (hi : i ≠ i') (j j' : n) (a : α) : std_basis_matrix i j a i' j' = 0 := by simp [hi]\n#align apply_of_row_ne apply_of_row_ne\n\n",
 "apply_of_ne":
 "@[simp]\ntheorem apply_of_ne (h : ¬(i = i' ∧ j = j')) : std_basis_matrix i j c i' j' = 0 :=\n  by\n  simp only [std_basis_matrix, and_imp, ite_eq_right_iff]\n  tauto\n#align apply_of_ne apply_of_ne\n\n",
 "apply_of_col_ne":
 "@[simp]\ntheorem apply_of_col_ne (i i' : m) {j j' : n} (hj : j ≠ j') (a : α) : std_basis_matrix i j a i' j' = 0 := by simp [hj]\n#align apply_of_col_ne apply_of_col_ne\n\n"}