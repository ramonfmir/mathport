{"zero_hadamard":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n@[simp]\ntheorem zero_hadamard : matrix.hadamard (0 : matrix m n α) A = 0 :=\n  ext fun _ _ => zero_mul _\n#align zero_hadamard zero_hadamard\n\n",
 "sum_hadamard_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem sum_hadamard_eq :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        ((matrix.hadamard A B) i j) =\n      trace (matrix.mul A (matrix.transpose B)) :=\n  rfl\n#align sum_hadamard_eq sum_hadamard_eq\n\n",
 "smul_hadamard":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n-- scalar multiplication\n@[simp]\ntheorem smul_hadamard [Mul α] [SMul R α] [IsScalarTower R α α] (k : R) :\n    matrix.hadamard («expr • » k A) B = «expr • » k (matrix.hadamard A B) :=\n  ext fun _ _ => smul_mul_assoc _ _ _\n#align smul_hadamard smul_hadamard\n\n",
 "one_hadamard":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\ntheorem one_hadamard : matrix.hadamard (1 : matrix n n α) M = diagonal fun i => M i i :=\n  by\n  ext\n  by_cases h : i = j <;> simp [h]\n#align one_hadamard one_hadamard\n\n",
 "hadamard_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n@[simp]\ntheorem hadamard_zero : matrix.hadamard A (0 : matrix m n α) = 0 :=\n  ext fun _ _ => mul_zero _\n#align hadamard_zero hadamard_zero\n\n",
 "hadamard_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n@[simp]\ntheorem hadamard_smul [Mul α] [SMul R α] [SMulCommClass R α α] (k : R) :\n    matrix.hadamard A («expr • » k B) = «expr • » k (matrix.hadamard A B) :=\n  ext fun _ _ => mul_smul_comm _ _ _\n#align hadamard_smul hadamard_smul\n\n",
 "hadamard_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\ntheorem hadamard_one : matrix.hadamard M (1 : matrix n n α) = diagonal fun i => M i i :=\n  by\n  ext\n  by_cases h : i = j <;> simp [h]\n#align hadamard_one hadamard_one\n\n",
 "hadamard_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/-\nCopyright (c) 2021 Lu-Ming Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Lu-Ming Zhang\n-/\n-- commutativity\ntheorem hadamard_comm [comm_semigroup α] : matrix.hadamard A B = matrix.hadamard B A :=\n  ext fun _ _ => mul_comm _ _\n#align hadamard_comm hadamard_comm\n\n",
 "hadamard_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n-- associativity\ntheorem hadamard_assoc [semigroup α] :\n    matrix.hadamard (matrix.hadamard A B) C = matrix.hadamard A (matrix.hadamard B C) :=\n  ext fun _ _ => mul_assoc _ _ _\n#align hadamard_assoc hadamard_assoc\n\n",
 "hadamard_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n-- distributivity\ntheorem hadamard_add [Distrib α] : matrix.hadamard A (B + C) = matrix.hadamard A B + matrix.hadamard A C :=\n  ext fun _ _ => left_distrib _ _ _\n#align hadamard_add hadamard_add\n\n",
 "dot_product_vec_mul_hadamard":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem dot_product_vec_mul_hadamard [decidable_eq m] [decidable_eq n] (v : m → α) (w : n → α) :\n    dot_product (vec_mul v (matrix.hadamard A B)) w =\n      trace (matrix.mul (matrix.mul (diagonal v) A) (matrix.transpose (matrix.mul B (diagonal w)))) :=\n  by\n  rw [← sum_hadamard_eq, finset.sum_comm]\n  simp [dot_product, vec_mul, finset.sum_mul, mul_assoc]\n#align dot_product_vec_mul_hadamard dot_product_vec_mul_hadamard\n\n",
 "diagonal_hadamard_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\ntheorem diagonal_hadamard_diagonal (v : n → α) (w : n → α) :\n    matrix.hadamard (diagonal v) (diagonal w) = diagonal (v * w) :=\n  ext fun _ _ => (apply_ite₂ _ _ _ _ _ _).trans (congr_arg _ <| zero_mul 0)\n#align diagonal_hadamard_diagonal diagonal_hadamard_diagonal\n\n",
 "add_hadamard":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.hadamard -/\ntheorem add_hadamard [Distrib α] : matrix.hadamard (B + C) A = matrix.hadamard B A + matrix.hadamard C A :=\n  ext fun _ _ => right_distrib _ _ _\n#align add_hadamard add_hadamard\n\n"}