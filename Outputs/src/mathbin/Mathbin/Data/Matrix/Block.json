{"vec_mul_from_blocks":
 "theorem vec_mul_from_blocks [Fintype n] [Fintype o] [NonUnitalNonAssocSemiring α] (A : Matrix n l α) (B : Matrix n m α)\n    (C : Matrix o l α) (D : Matrix o m α) (x : Sum n o → α) :\n    vecMul x (fromBlocks A B C D) =\n      Sum.elim (vecMul (x ∘ Sum.inl) A + vecMul (x ∘ Sum.inr) C) (vecMul (x ∘ Sum.inl) B + vecMul (x ∘ Sum.inr) D) :=\n  by\n  ext i\n  cases i <;> simp [vec_mul, dot_product]\n#align vec_mul_from_blocks vec_mul_from_blocks\n\n",
 "to_square_block_prop_def":
 "theorem to_square_block_prop_def (M : Matrix m m α) (p : m → Prop) : toSquareBlockProp M p = fun i j => M ↑i ↑j :=\n  rfl\n#align to_square_block_prop_def to_square_block_prop_def\n\n",
 "to_square_block_def":
 "theorem to_square_block_def (M : Matrix m m α) (b : m → β) (k : β) : toSquareBlock M b k = fun i j => M ↑i ↑j :=\n  rfl\n#align to_square_block_def to_square_block_def\n\n",
 "to_blocks_from_blocks₂₂":
 "@[simp]\ntheorem to_blocks_from_blocks₂₂ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) :\n    (fromBlocks A B C D).to_blocks₂₂ = D :=\n  rfl\n#align to_blocks_from_blocks₂₂ to_blocks_from_blocks₂₂\n\n",
 "to_blocks_from_blocks₂₁":
 "@[simp]\ntheorem to_blocks_from_blocks₂₁ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) :\n    (fromBlocks A B C D).to_blocks₂₁ = C :=\n  rfl\n#align to_blocks_from_blocks₂₁ to_blocks_from_blocks₂₁\n\n",
 "to_blocks_from_blocks₁₂":
 "@[simp]\ntheorem to_blocks_from_blocks₁₂ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) :\n    (fromBlocks A B C D).to_blocks₁₂ = B :=\n  rfl\n#align to_blocks_from_blocks₁₂ to_blocks_from_blocks₁₂\n\n",
 "to_blocks_from_blocks₁₁":
 "@[simp]\ntheorem to_blocks_from_blocks₁₁ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) :\n    (fromBlocks A B C D).to_blocks₁₁ = A :=\n  rfl\n#align to_blocks_from_blocks₁₁ to_blocks_from_blocks₁₁\n\n",
 "to_block_one_self":
 "@[simp]\ntheorem to_block_one_self (p : m → Prop) : Matrix.toBlock (1 : Matrix m m α) p p = 1 :=\n  toBlock_diagonal_self _ p\n#align to_block_one_self to_block_one_self\n\n",
 "to_block_one_disjoint":
 "theorem to_block_one_disjoint {p q : m → Prop} (hpq : Disjoint p q) : Matrix.toBlock (1 : Matrix m m α) p q = 0 :=\n  toBlock_diagonal_disjoint _ hpq\n#align to_block_one_disjoint to_block_one_disjoint\n\n",
 "to_block_mul_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem to_block_mul_eq_mul {m n k : Type _} [Fintype n] (p : m → Prop) (q : k → Prop) (A : Matrix m n R)\n    (B : Matrix n k R) : (matrix.mul A B).to_block p q = matrix.mul (A.to_block p («expr⊤»)) (B.to_block («expr⊤») q) :=\n  by\n  ext (i k)\n  simp only [to_block_apply, mul_apply]\n  rw [Finset.sum_subtype]\n  simp [has_top.top, complete_lattice.top, bounded_order.top]\n#align to_block_mul_eq_mul to_block_mul_eq_mul\n\n",
 "to_block_mul_eq_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem to_block_mul_eq_add {m n k : Type _} [Fintype n] (p : m → Prop) (q : n → Prop) [DecidablePred q] (r : k → Prop)\n    (A : Matrix m n R) (B : Matrix n k R) :\n    (matrix.mul A B).to_block p r =\n      matrix.mul (A.to_block p q) (B.to_block q r) +\n        matrix.mul (A.to_block p fun i => ¬q i) (B.to_block (fun i => ¬q i) r) :=\n  by\n  classical\n    ext (i k)\n    simp only [to_block_apply, mul_apply, Pi.add_apply]\n    convert(Fintype.sum_subtype_add_sum_subtype q fun x => A (↑i) x * B x ↑k).symm\n#align to_block_mul_eq_add to_block_mul_eq_add\n\n",
 "to_block_diagonal_self":
 "theorem to_block_diagonal_self (d : m → α) (p : m → Prop) :\n    Matrix.toBlock (diagonal d) p p = diagonal fun i : Subtype p => d ↑i :=\n  by\n  ext (i j)\n  by_cases i = j\n  · simp [h]\n  · simp [has_one.one, h, fun h' => h <| Subtype.ext h']\n#align to_block_diagonal_self to_block_diagonal_self\n\n",
 "to_block_diagonal_disjoint":
 "theorem to_block_diagonal_disjoint (d : m → α) {p q : m → Prop} (hpq : Disjoint p q) :\n    Matrix.toBlock (diagonal d) p q = 0 := by\n  ext (⟨i, hi⟩⟨j, hj⟩)\n  have : i ≠ j := fun heq => hpq.le_bot i ⟨hi, HEq.symm ▸ hj⟩\n  simp [diagonal_apply_ne d this]\n#align to_block_diagonal_disjoint to_block_diagonal_disjoint\n\n",
 "to_block_apply":
 "@[simp]\ntheorem to_block_apply (M : Matrix m n α) (p : m → Prop) (q : n → Prop) (i : { a // p a }) (j : { a // q a }) :\n    toBlock M p q i j = M ↑i ↑j :=\n  rfl\n#align to_block_apply to_block_apply\n\n",
 "from_blocks_zero":
 "@[simp]\ntheorem from_blocks_zero [Zero α] : fromBlocks (0 : Matrix n l α) 0 0 (0 : Matrix o m α) = 0 :=\n  by\n  ext (i j)\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> rfl\n#align from_blocks_zero from_blocks_zero\n\n",
 "from_blocks_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem from_blocks_transpose (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) :\n    matrix.transpose (fromBlocks A B C D) =\n      fromBlocks (matrix.transpose A) (matrix.transpose C) (matrix.transpose B) (matrix.transpose D) :=\n  by ext (i j); rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> simp [from_blocks]\n#align from_blocks_transpose from_blocks_transpose\n\n",
 "from_blocks_to_blocks":
 "theorem from_blocks_to_blocks (M : Matrix (Sum n o) (Sum l m) α) :\n    fromBlocks M.to_blocks₁₁ M.to_blocks₁₂ M.to_blocks₂₁ M.to_blocks₂₂ = M := by ext (i j);\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> rfl\n#align from_blocks_to_blocks from_blocks_to_blocks\n\n",
 "from_blocks_submatrix_sum_swap_sum_swap":
 "theorem from_blocks_submatrix_sum_swap_sum_swap {l m n o α : Type _} (A : Matrix n l α) (B : Matrix n m α)\n    (C : Matrix o l α) (D : Matrix o m α) : (fromBlocks A B C D).submatrix Sum.swap Sum.swap = fromBlocks D C B A := by\n  simp\n#align from_blocks_submatrix_sum_swap_sum_swap from_blocks_submatrix_sum_swap_sum_swap\n\n",
 "from_blocks_submatrix_sum_swap_right":
 "@[simp]\ntheorem from_blocks_submatrix_sum_swap_right (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α)\n    (f : p → Sum n o) : (fromBlocks A B C D).submatrix f Sum.swap = (fromBlocks B A D C).submatrix f id :=\n  by\n  ext (i j)\n  cases j <;> dsimp <;> cases f i <;> rfl\n#align from_blocks_submatrix_sum_swap_right from_blocks_submatrix_sum_swap_right\n\n",
 "from_blocks_submatrix_sum_swap_left":
 "@[simp]\ntheorem from_blocks_submatrix_sum_swap_left (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α)\n    (f : p → Sum l m) : (fromBlocks A B C D).submatrix Sum.swap f = (fromBlocks C D A B).submatrix id f :=\n  by\n  ext (i j)\n  cases i <;> dsimp <;> cases f j <;> rfl\n#align from_blocks_submatrix_sum_swap_left from_blocks_submatrix_sum_swap_left\n\n",
 "from_blocks_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem from_blocks_smul [SMul R α] (x : R) (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α)\n    (D : Matrix o m α) :\n    «expr • » x (fromBlocks A B C D) = fromBlocks («expr • » x A) («expr • » x B) («expr • » x C) («expr • » x D) := by\n  ext (i j); rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> simp [from_blocks]\n#align from_blocks_smul from_blocks_smul\n\n",
 "from_blocks_one":
 "@[simp]\ntheorem from_blocks_one : fromBlocks (1 : Matrix l l α) 0 0 (1 : Matrix m m α) = 1 :=\n  by\n  ext (i j)\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> simp [one_apply]\n#align from_blocks_one from_blocks_one\n\n",
 "from_blocks_neg":
 "theorem from_blocks_neg [Neg R] (A : Matrix n l R) (B : Matrix n m R) (C : Matrix o l R) (D : Matrix o m R) :\n    -fromBlocks A B C D = fromBlocks (-A) (-B) (-C) (-D) := by ext (i j); cases i <;> cases j <;> simp [from_blocks]\n#align from_blocks_neg from_blocks_neg\n\n",
 "from_blocks_multiply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem from_blocks_multiply [Fintype l] [Fintype m] [NonUnitalNonAssocSemiring α] (A : Matrix n l α) (B : Matrix n m α)\n    (C : Matrix o l α) (D : Matrix o m α) (A' : Matrix l p α) (B' : Matrix l q α) (C' : Matrix m p α)\n    (D' : Matrix m q α) :\n    matrix.mul (fromBlocks A B C D) (fromBlocks A' B' C' D') =\n      fromBlocks (matrix.mul A A' + matrix.mul B C') (matrix.mul A B' + matrix.mul B D')\n        (matrix.mul C A' + matrix.mul D C') (matrix.mul C B' + matrix.mul D D') :=\n  by ext (i j);\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;>\n    simp only [from_blocks, mul_apply, Fintype.sum_sum_type, Sum.elim_inl, Sum.elim_inr, Pi.add_apply, of_apply]\n#align from_blocks_multiply from_blocks_multiply\n\n",
 "from_blocks_mul_vec":
 "theorem from_blocks_mul_vec [Fintype l] [Fintype m] [NonUnitalNonAssocSemiring α] (A : Matrix n l α) (B : Matrix n m α)\n    (C : Matrix o l α) (D : Matrix o m α) (x : Sum l m → α) :\n    mulVec (fromBlocks A B C D) x =\n      Sum.elim (mulVec A (x ∘ Sum.inl) + mulVec B (x ∘ Sum.inr)) (mulVec C (x ∘ Sum.inl) + mulVec D (x ∘ Sum.inr)) :=\n  by\n  ext i\n  cases i <;> simp [mul_vec, dot_product]\n#align from_blocks_mul_vec from_blocks_mul_vec\n\n",
 "from_blocks_map":
 "theorem from_blocks_map (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) (f : α → β) :\n    (fromBlocks A B C D).map f = fromBlocks (A.map f) (B.map f) (C.map f) (D.map f) := by ext (i j);\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> simp [from_blocks]\n#align from_blocks_map from_blocks_map\n\n",
 "from_blocks_inj":
 "@[simp]\ntheorem from_blocks_inj {A : Matrix n l α} {B : Matrix n m α} {C : Matrix o l α} {D : Matrix o m α} {A' : Matrix n l α}\n    {B' : Matrix n m α} {C' : Matrix o l α} {D' : Matrix o m α} :\n    fromBlocks A B C D = fromBlocks A' B' C' D' ↔ A = A' ∧ B = B' ∧ C = C' ∧ D = D' :=\n  ext_iff_blocks\n#align from_blocks_inj from_blocks_inj\n\n",
 "from_blocks_diagonal":
 "@[simp]\ntheorem from_blocks_diagonal (d₁ : l → α) (d₂ : m → α) :\n    fromBlocks (diagonal d₁) 0 0 (diagonal d₂) = diagonal (Sum.elim d₁ d₂) := by ext (i j);\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> simp [diagonal]\n#align from_blocks_diagonal from_blocks_diagonal\n\n",
 "from_blocks_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem from_blocks_conj_transpose [Star α] (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α)\n    (D : Matrix o m α) :\n    matrix.conj_transpose (fromBlocks A B C D) =\n      fromBlocks (matrix.conj_transpose A) (matrix.conj_transpose C) (matrix.conj_transpose B)\n        (matrix.conj_transpose D) :=\n  by simp only [conj_transpose, from_blocks_transpose, from_blocks_map]\n#align from_blocks_conj_transpose from_blocks_conj_transpose\n\n",
 "from_blocks_apply₂₂":
 "@[simp]\ntheorem from_blocks_apply₂₂ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) (i : o)\n    (j : m) : fromBlocks A B C D (Sum.inr i) (Sum.inr j) = D i j :=\n  rfl\n#align from_blocks_apply₂₂ from_blocks_apply₂₂\n\n",
 "from_blocks_apply₂₁":
 "@[simp]\ntheorem from_blocks_apply₂₁ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) (i : o)\n    (j : l) : fromBlocks A B C D (Sum.inr i) (Sum.inl j) = C i j :=\n  rfl\n#align from_blocks_apply₂₁ from_blocks_apply₂₁\n\n",
 "from_blocks_apply₁₂":
 "@[simp]\ntheorem from_blocks_apply₁₂ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) (i : n)\n    (j : m) : fromBlocks A B C D (Sum.inl i) (Sum.inr j) = B i j :=\n  rfl\n#align from_blocks_apply₁₂ from_blocks_apply₁₂\n\n",
 "from_blocks_apply₁₁":
 "@[simp]\ntheorem from_blocks_apply₁₁ (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α) (i : n)\n    (j : l) : fromBlocks A B C D (Sum.inl i) (Sum.inl j) = A i j :=\n  rfl\n#align from_blocks_apply₁₁ from_blocks_apply₁₁\n\n",
 "from_blocks_add":
 "theorem from_blocks_add [Add α] (A : Matrix n l α) (B : Matrix n m α) (C : Matrix o l α) (D : Matrix o m α)\n    (A' : Matrix n l α) (B' : Matrix n m α) (C' : Matrix o l α) (D' : Matrix o m α) :\n    fromBlocks A B C D + fromBlocks A' B' C' D' = fromBlocks (A + A') (B + B') (C + C') (D + D') := by ext (i j);\n  rcases i with ⟨⟩ <;> rcases j with ⟨⟩ <;> rfl\n#align from_blocks_add from_blocks_add\n\n",
 "ext_iff_blocks":
 "/-- Two block matrices are equal if their blocks are equal. -/\ntheorem ext_iff_blocks {A B : Matrix (Sum n o) (Sum l m) α} :\n    A = B ↔\n      A.to_blocks₁₁ = B.to_blocks₁₁ ∧\n        A.to_blocks₁₂ = B.to_blocks₁₂ ∧ A.to_blocks₂₁ = B.to_blocks₂₁ ∧ A.to_blocks₂₂ = B.to_blocks₂₂ :=\n  ⟨fun h => h ▸ ⟨rfl, rfl, rfl, rfl⟩, fun ⟨h₁₁, h₁₂, h₂₁, h₂₂⟩ => by\n    rw [← from_blocks_to_blocks A, ← from_blocks_to_blocks B, h₁₁, h₁₂, h₂₁, h₂₂]⟩\n#align ext_iff_blocks ext_iff_blocks\n\n",
 "dot_product_block":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/-\nCopyright (c) 2018 Ellen Arlt. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Ellen Arlt, Blair Shi, Sean Leather, Mario Carneiro, Johan Commelin\n-/\ntheorem dot_product_block [Fintype m] [Fintype n] [Mul α] [AddCommMonoid α] (v w : Sum m n → α) :\n    matrix.dot_product v w =\n      matrix.dot_product (v ∘ Sum.inl) (w ∘ Sum.inl) + matrix.dot_product (v ∘ Sum.inr) (w ∘ Sum.inr) :=\n  Fintype.sum_sum_type _\n#align dot_product_block dot_product_block\n\n",
 "block_diagonal_zero":
 "@[simp]\ntheorem block_diagonal_zero : blockDiagonal (0 : o → Matrix m n α) = 0 :=\n  by\n  ext\n  simp [block_diagonal_apply]\n#align block_diagonal_zero block_diagonal_zero\n\n",
 "block_diagonal_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem block_diagonal_transpose (M : o → Matrix m n α) :\n    matrix.transpose (blockDiagonal M) = blockDiagonal fun k => matrix.transpose (M k) :=\n  by\n  ext\n  simp only [transpose_apply, block_diagonal_apply, eq_comm]\n  split_ifs with h\n  · rw [h]\n  · rfl\n#align block_diagonal_transpose block_diagonal_transpose\n\n",
 "block_diagonal_sub":
 "@[simp]\ntheorem block_diagonal_sub [AddGroup α] (M N : o → Matrix m n α) :\n    blockDiagonal (M - N) = blockDiagonal M - blockDiagonal N :=\n  map_sub (blockDiagonalAddMonoidHom m n o α) M N\n#align block_diagonal_sub block_diagonal_sub\n\n",
 "block_diagonal_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem block_diagonal_smul {R : Type _} [Monoid R] [AddMonoid α] [DistribMulAction R α] (x : R)\n    (M : o → Matrix m n α) : blockDiagonal («expr • » x M) = «expr • » x (blockDiagonal M) :=\n  by\n  ext\n  simp only [block_diagonal_apply, Pi.smul_apply]\n  split_ifs <;> simp\n#align block_diagonal_smul block_diagonal_smul\n\n",
 "block_diagonal_pow":
 "@[simp]\ntheorem block_diagonal_pow [DecidableEq m] [Fintype o] [Fintype m] [Semiring α] (M : o → Matrix m m α) (n : ℕ) :\n    blockDiagonal (M ^ n) = blockDiagonal M ^ n :=\n  map_pow (blockDiagonalRingHom m o α) M n\n#align block_diagonal_pow block_diagonal_pow\n\n",
 "block_diagonal_one":
 "@[simp]\ntheorem block_diagonal_one [DecidableEq m] [One α] : blockDiagonal (1 : o → Matrix m m α) = 1 :=\n  show (blockDiagonal fun _ : o => diagonal fun _ : m => (1 : α)) = diagonal fun _ => 1 by rw [block_diagonal_diagonal]\n#align block_diagonal_one block_diagonal_one\n\n",
 "block_diagonal_neg":
 "@[simp]\ntheorem block_diagonal_neg [AddGroup α] (M : o → Matrix m n α) : blockDiagonal (-M) = -blockDiagonal M :=\n  map_neg (blockDiagonalAddMonoidHom m n o α) M\n#align block_diagonal_neg block_diagonal_neg\n\n",
 "block_diagonal_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem block_diagonal_mul [Fintype n] [Fintype o] [NonUnitalNonAssocSemiring α] (M : o → Matrix m n α)\n    (N : o → Matrix n p α) :\n    (blockDiagonal fun k => matrix.mul (M k) (N k)) = matrix.mul (blockDiagonal M) (blockDiagonal N) :=\n  by\n  ext (⟨i, k⟩⟨j, k'⟩)\n  simp only [block_diagonal_apply, mul_apply, ← Finset.univ_product_univ, Finset.sum_product]\n  split_ifs with h <;> simp [h]\n#align block_diagonal_mul block_diagonal_mul\n\n",
 "block_diagonal_map":
 "theorem block_diagonal_map (M : o → Matrix m n α) (f : α → β) (hf : f 0 = 0) :\n    (blockDiagonal M).map f = blockDiagonal fun k => (M k).map f :=\n  by\n  ext\n  simp only [map_apply, block_diagonal_apply, eq_comm]\n  rw [apply_ite f, hf]\n#align block_diagonal_map block_diagonal_map\n\n",
 "block_diagonal_injective":
 "theorem block_diagonal_injective [DecidableEq o] :\n    function.injective (blockDiagonal : (o → Matrix m n α) → Matrix _ _ α) :=\n  function.left_inverse.injective blockDiag_blockDiagonal\n#align block_diagonal_injective block_diagonal_injective\n\n",
 "block_diagonal_inj":
 "@[simp]\ntheorem block_diagonal_inj [DecidableEq o] {M N : o → Matrix m n α} : blockDiagonal M = blockDiagonal N ↔ M = N :=\n  blockDiagonal_injective.eq_iff\n#align block_diagonal_inj block_diagonal_inj\n\n",
 "block_diagonal_diagonal":
 "@[simp]\ntheorem block_diagonal_diagonal [DecidableEq m] (d : o → m → α) :\n    (blockDiagonal fun k => diagonal (d k)) = diagonal fun ik => d ik.2 ik.1 :=\n  by\n  ext (⟨i, k⟩⟨j, k'⟩)\n  simp only [block_diagonal_apply, diagonal_apply, Prod.mk.inj_iff, ← ite_and]\n  congr 1\n  rw [and_comm']\n#align block_diagonal_diagonal block_diagonal_diagonal\n\n",
 "block_diagonal_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem block_diagonal_conj_transpose {α : Type _} [AddMonoid α] [StarAddMonoid α] (M : o → Matrix m n α) :\n    matrix.conj_transpose (blockDiagonal M) = blockDiagonal fun k => matrix.conj_transpose (M k) :=\n  by\n  simp only [conj_transpose, block_diagonal_transpose]\n  rw [block_diagonal_map _ star (star_zero α)]\n#align block_diagonal_conj_transpose block_diagonal_conj_transpose\n\n",
 "block_diagonal_apply_ne":
 "theorem block_diagonal_apply_ne (M : o → Matrix m n α) (i j) {k k'} (h : k ≠ k') : blockDiagonal M (i, k) (j, k') = 0 :=\n  if_neg h\n#align block_diagonal_apply_ne block_diagonal_apply_ne\n\n",
 "block_diagonal_apply_eq":
 "@[simp]\ntheorem block_diagonal_apply_eq (M : o → Matrix m n α) (i j k) : blockDiagonal M (i, k) (j, k) = M k i j :=\n  if_pos rfl\n#align block_diagonal_apply_eq block_diagonal_apply_eq\n\n",
 "block_diagonal_apply'":
 "-- TODO: set as an equation lemma for `block_diagonal`, see mathlib4#3024\ntheorem block_diagonal_apply' (M : o → Matrix m n α) (i k j k') :\n    blockDiagonal M ⟨i, k⟩ ⟨j, k'⟩ = if k = k' then M k i j else 0 :=\n  rfl\n#align block_diagonal_apply' block_diagonal_apply'\n\n",
 "block_diagonal_apply":
 "theorem block_diagonal_apply (M : o → Matrix m n α) (ik jk) :\n    blockDiagonal M ik jk = if ik.2 = jk.2 then M ik.2 ik.1 jk.1 else 0 :=\n  by\n  cases ik\n  cases jk\n  rfl\n#align block_diagonal_apply block_diagonal_apply\n\n",
 "block_diagonal_add":
 "@[simp]\ntheorem block_diagonal_add [AddZeroClass α] (M N : o → Matrix m n α) :\n    blockDiagonal (M + N) = blockDiagonal M + blockDiagonal N :=\n  by\n  ext\n  simp only [block_diagonal_apply, Pi.add_apply]\n  split_ifs <;> simp\n#align block_diagonal_add block_diagonal_add\n\n",
 "block_diagonal'_zero":
 "@[simp]\ntheorem block_diagonal'_zero : blockDiagonal' (0 : ∀ i, Matrix (m' i) (n' i) α) = 0 :=\n  by\n  ext\n  simp [block_diagonal'_apply]\n#align block_diagonal'_zero block_diagonal'_zero\n\n",
 "block_diagonal'_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem block_diagonal'_transpose (M : ∀ i, Matrix (m' i) (n' i) α) :\n    matrix.transpose (blockDiagonal' M) = blockDiagonal' fun k => matrix.transpose (M k) :=\n  by\n  ext (⟨ii, ix⟩⟨ji, jx⟩)\n  simp only [transpose_apply, block_diagonal'_apply]\n  split_ifs <;> cc\n#align block_diagonal'_transpose block_diagonal'_transpose\n\n",
 "block_diagonal'_submatrix_eq_block_diagonal":
 "theorem block_diagonal'_submatrix_eq_block_diagonal (M : o → Matrix m n α) :\n    (blockDiagonal' M).submatrix (Prod.toSigma ∘ Prod.swap) (Prod.toSigma ∘ Prod.swap) = blockDiagonal M :=\n  Matrix.ext fun ⟨k, i⟩ ⟨k', j⟩ => rfl\n#align block_diagonal'_submatrix_eq_block_diagonal block_diagonal'_submatrix_eq_block_diagonal\n\n",
 "block_diagonal'_sub":
 "@[simp]\ntheorem block_diagonal'_sub [AddGroup α] (M N : ∀ i, Matrix (m' i) (n' i) α) :\n    blockDiagonal' (M - N) = blockDiagonal' M - blockDiagonal' N :=\n  map_sub (blockDiagonal'AddMonoidHom m' n' α) M N\n#align block_diagonal'_sub block_diagonal'_sub\n\n",
 "block_diagonal'_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem block_diagonal'_smul {R : Type _} [Semiring R] [AddCommMonoid α] [Module R α] (x : R)\n    (M : ∀ i, Matrix (m' i) (n' i) α) : blockDiagonal' («expr • » x M) = «expr • » x (blockDiagonal' M) :=\n  by\n  ext\n  simp only [block_diagonal'_apply, Pi.smul_apply]\n  split_ifs <;> simp\n#align block_diagonal'_smul block_diagonal'_smul\n\n",
 "block_diagonal'_pow":
 "@[simp]\ntheorem block_diagonal'_pow [∀ i, DecidableEq (m' i)] [Fintype o] [∀ i, Fintype (m' i)] [Semiring α]\n    (M : ∀ i, Matrix (m' i) (m' i) α) (n : ℕ) : blockDiagonal' (M ^ n) = blockDiagonal' M ^ n :=\n  map_pow (blockDiagonal'RingHom m' α) M n\n#align block_diagonal'_pow block_diagonal'_pow\n\n",
 "block_diagonal'_one":
 "@[simp]\ntheorem block_diagonal'_one [∀ i, DecidableEq (m' i)] [One α] : blockDiagonal' (1 : ∀ i, Matrix (m' i) (m' i) α) = 1 :=\n  show (blockDiagonal' fun i : o => diagonal fun _ : m' i => (1 : α)) = diagonal fun _ => 1 by\n    rw [block_diagonal'_diagonal]\n#align block_diagonal'_one block_diagonal'_one\n\n",
 "block_diagonal'_neg":
 "@[simp]\ntheorem block_diagonal'_neg [AddGroup α] (M : ∀ i, Matrix (m' i) (n' i) α) : blockDiagonal' (-M) = -blockDiagonal' M :=\n  map_neg (blockDiagonal'AddMonoidHom m' n' α) M\n#align block_diagonal'_neg block_diagonal'_neg\n\n",
 "block_diagonal'_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem block_diagonal'_mul [NonUnitalNonAssocSemiring α] [∀ i, Fintype (n' i)] [Fintype o]\n    (M : ∀ i, Matrix (m' i) (n' i) α) (N : ∀ i, Matrix (n' i) (p' i) α) :\n    (blockDiagonal' fun k => matrix.mul (M k) (N k)) = matrix.mul (blockDiagonal' M) (blockDiagonal' N) :=\n  by\n  ext (⟨k, i⟩⟨k', j⟩)\n  simp only [block_diagonal'_apply, mul_apply, ← Finset.univ_sigma_univ, Finset.sum_sigma]\n  rw [Fintype.sum_eq_single k]\n  · split_ifs <;> simp\n  · intro j' hj'\n    exact Finset.sum_eq_zero fun _ _ => by rw [dif_neg hj'.symm, MulZeroClass.zero_mul]\n#align block_diagonal'_mul block_diagonal'_mul\n\n",
 "block_diagonal'_map":
 "theorem block_diagonal'_map (M : ∀ i, Matrix (m' i) (n' i) α) (f : α → β) (hf : f 0 = 0) :\n    (blockDiagonal' M).map f = blockDiagonal' fun k => (M k).map f :=\n  by\n  ext\n  simp only [map_apply, block_diagonal'_apply, eq_comm]\n  rw [apply_dite f, hf]\n#align block_diagonal'_map block_diagonal'_map\n\n",
 "block_diagonal'_injective":
 "theorem block_diagonal'_injective [DecidableEq o] :\n    function.injective (blockDiagonal' : (∀ i, Matrix (m' i) (n' i) α) → Matrix _ _ α) :=\n  function.left_inverse.injective blockDiag'_blockDiagonal'\n#align block_diagonal'_injective block_diagonal'_injective\n\n",
 "block_diagonal'_inj":
 "@[simp]\ntheorem block_diagonal'_inj [DecidableEq o] {M N : ∀ i, Matrix (m' i) (n' i) α} :\n    blockDiagonal' M = blockDiagonal' N ↔ M = N :=\n  blockDiagonal'_injective.eq_iff\n#align block_diagonal'_inj block_diagonal'_inj\n\n",
 "block_diagonal'_eq_block_diagonal":
 "theorem block_diagonal'_eq_block_diagonal (M : o → Matrix m n α) {k k'} (i j) :\n    blockDiagonal M (i, k) (j, k') = blockDiagonal' M ⟨k, i⟩ ⟨k', j⟩ :=\n  rfl\n#align block_diagonal'_eq_block_diagonal block_diagonal'_eq_block_diagonal\n\n",
 "block_diagonal'_diagonal":
 "@[simp]\ntheorem block_diagonal'_diagonal [∀ i, DecidableEq (m' i)] (d : ∀ i, m' i → α) :\n    (blockDiagonal' fun k => diagonal (d k)) = diagonal fun ik => d ik.1 ik.2 :=\n  by\n  ext (⟨i, k⟩⟨j, k'⟩)\n  simp only [block_diagonal'_apply, diagonal]\n  obtain rfl | hij := Decidable.eq_or_ne i j\n  · simp\n  · simp [hij]\n#align block_diagonal'_diagonal block_diagonal'_diagonal\n\n",
 "block_diagonal'_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem block_diagonal'_conj_transpose {α} [AddMonoid α] [StarAddMonoid α] (M : ∀ i, Matrix (m' i) (n' i) α) :\n    matrix.conj_transpose (blockDiagonal' M) = blockDiagonal' fun k => matrix.conj_transpose (M k) :=\n  by\n  simp only [conj_transpose, block_diagonal'_transpose]\n  exact block_diagonal'_map _ star (star_zero α)\n#align block_diagonal'_conj_transpose block_diagonal'_conj_transpose\n\n",
 "block_diagonal'_apply_ne":
 "theorem block_diagonal'_apply_ne (M : ∀ i, Matrix (m' i) (n' i) α) {k k'} (i j) (h : k ≠ k') :\n    blockDiagonal' M ⟨k, i⟩ ⟨k', j⟩ = 0 :=\n  dif_neg h\n#align block_diagonal'_apply_ne block_diagonal'_apply_ne\n\n",
 "block_diagonal'_apply_eq":
 "@[simp]\ntheorem block_diagonal'_apply_eq (M : ∀ i, Matrix (m' i) (n' i) α) (k i j) : blockDiagonal' M ⟨k, i⟩ ⟨k, j⟩ = M k i j :=\n  dif_pos rfl\n#align block_diagonal'_apply_eq block_diagonal'_apply_eq\n\n",
 "block_diagonal'_apply'":
 "-- TODO: set as an equation lemma for `block_diagonal'`, see mathlib4#3024\ntheorem block_diagonal'_apply' (M : ∀ i, Matrix (m' i) (n' i) α) (k i k' j) :\n    blockDiagonal' M ⟨k, i⟩ ⟨k', j⟩ = if h : k = k' then M k i (cast (congr_arg n' h.symm) j) else 0 :=\n  rfl\n#align block_diagonal'_apply' block_diagonal'_apply'\n\n",
 "block_diagonal'_apply":
 "theorem block_diagonal'_apply (M : ∀ i, Matrix (m' i) (n' i) α) (ik jk) :\n    blockDiagonal' M ik jk = if h : ik.1 = jk.1 then M ik.1 ik.2 (cast (congr_arg n' h.symm) jk.2) else 0 :=\n  by\n  cases ik\n  cases jk\n  rfl\n#align block_diagonal'_apply block_diagonal'_apply\n\n",
 "block_diagonal'_add":
 "@[simp]\ntheorem block_diagonal'_add [AddZeroClass α] (M N : ∀ i, Matrix (m' i) (n' i) α) :\n    blockDiagonal' (M + N) = blockDiagonal' M + blockDiagonal' N :=\n  by\n  ext\n  simp only [block_diagonal'_apply, Pi.add_apply]\n  split_ifs <;> simp\n#align block_diagonal'_add block_diagonal'_add\n\n",
 "block_diag_zero":
 "@[simp]\ntheorem block_diag_zero : blockDiag (0 : Matrix (m × o) (n × o) α) = 0 :=\n  rfl\n#align block_diag_zero block_diag_zero\n\n",
 "block_diag_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem block_diag_transpose (M : Matrix (m × o) (n × o) α) (k : o) :\n    blockDiag (matrix.transpose M) k = matrix.transpose (blockDiag M k) :=\n  ext fun i j => rfl\n#align block_diag_transpose block_diag_transpose\n\n",
 "block_diag_sub":
 "@[simp]\ntheorem block_diag_sub [AddGroup α] (M N : Matrix (m × o) (n × o) α) : blockDiag (M - N) = blockDiag M - blockDiag N :=\n  map_sub (blockDiagAddMonoidHom m n o α) M N\n#align block_diag_sub block_diag_sub\n\n",
 "block_diag_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem block_diag_smul {R : Type _} [Monoid R] [AddMonoid α] [DistribMulAction R α] (x : R)\n    (M : Matrix (m × o) (n × o) α) : blockDiag («expr • » x M) = «expr • » x (blockDiag M) :=\n  rfl\n#align block_diag_smul block_diag_smul\n\n",
 "block_diag_one":
 "@[simp]\ntheorem block_diag_one [DecidableEq o] [DecidableEq m] [One α] : blockDiag (1 : Matrix (m × o) (m × o) α) = 1 :=\n  funext <| blockDiag_diagonal _\n#align block_diag_one block_diag_one\n\n",
 "block_diag_neg":
 "@[simp]\ntheorem block_diag_neg [AddGroup α] (M : Matrix (m × o) (n × o) α) : blockDiag (-M) = -blockDiag M :=\n  map_neg (blockDiagAddMonoidHom m n o α) M\n#align block_diag_neg block_diag_neg\n\n",
 "block_diag_map":
 "theorem block_diag_map (M : Matrix (m × o) (n × o) α) (f : α → β) :\n    blockDiag (M.map f) = fun k => (blockDiag M k).map f :=\n  rfl\n#align block_diag_map block_diag_map\n\n",
 "block_diag_diagonal":
 "@[simp]\ntheorem block_diag_diagonal [DecidableEq o] [DecidableEq m] (d : m × o → α) (k : o) :\n    blockDiag (diagonal d) k = diagonal fun i => d (i, k) :=\n  ext fun i j => by\n    obtain rfl | hij := Decidable.eq_or_ne i j\n    · rw [block_diag_apply, diagonal_apply_eq, diagonal_apply_eq]\n    · rw [block_diag_apply, diagonal_apply_ne _ hij, diagonal_apply_ne _ (mt _ hij)]\n      exact prod.fst_eq_iff.mpr\n#align block_diag_diagonal block_diag_diagonal\n\n",
 "block_diag_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem block_diag_conj_transpose {α : Type _} [AddMonoid α] [StarAddMonoid α] (M : Matrix (m × o) (n × o) α) (k : o) :\n    blockDiag (matrix.conj_transpose M) k = matrix.conj_transpose (blockDiag M k) :=\n  ext fun i j => rfl\n#align block_diag_conj_transpose block_diag_conj_transpose\n\n",
 "block_diag_block_diagonal":
 "@[simp]\ntheorem block_diag_block_diagonal [DecidableEq o] (M : o → Matrix m n α) : blockDiag (blockDiagonal M) = M :=\n  funext fun k => ext fun i j => blockDiagonal_apply_eq M i j _\n#align block_diag_block_diagonal block_diag_block_diagonal\n\n",
 "block_diag_apply":
 "-- TODO: set as an equation lemma for `block_diag`, see mathlib4#3024\ntheorem block_diag_apply (M : Matrix (m × o) (n × o) α) (k : o) (i j) : blockDiag M k i j = M (i, k) (j, k) :=\n  rfl\n#align block_diag_apply block_diag_apply\n\n",
 "block_diag_add":
 "@[simp]\ntheorem block_diag_add [AddZeroClass α] (M N : Matrix (m × o) (n × o) α) :\n    blockDiag (M + N) = blockDiag M + blockDiag N :=\n  rfl\n#align block_diag_add block_diag_add\n\n",
 "block_diag'_zero":
 "@[simp]\ntheorem block_diag'_zero : blockDiag' (0 : Matrix (Σi, m' i) (Σi, n' i) α) = 0 :=\n  rfl\n#align block_diag'_zero block_diag'_zero\n\n",
 "block_diag'_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem block_diag'_transpose (M : Matrix (Σi, m' i) (Σi, n' i) α) (k : o) :\n    blockDiag' (matrix.transpose M) k = matrix.transpose (blockDiag' M k) :=\n  ext fun i j => rfl\n#align block_diag'_transpose block_diag'_transpose\n\n",
 "block_diag'_sub":
 "@[simp]\ntheorem block_diag'_sub [AddGroup α] (M N : Matrix (Σi, m' i) (Σi, n' i) α) :\n    blockDiag' (M - N) = blockDiag' M - blockDiag' N :=\n  map_sub (blockDiag'AddMonoidHom m' n' α) M N\n#align block_diag'_sub block_diag'_sub\n\n",
 "block_diag'_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem block_diag'_smul {R : Type _} [Monoid R] [AddMonoid α] [DistribMulAction R α] (x : R)\n    (M : Matrix (Σi, m' i) (Σi, n' i) α) : blockDiag' («expr • » x M) = «expr • » x (blockDiag' M) :=\n  rfl\n#align block_diag'_smul block_diag'_smul\n\n",
 "block_diag'_one":
 "@[simp]\ntheorem block_diag'_one [DecidableEq o] [∀ i, DecidableEq (m' i)] [One α] :\n    blockDiag' (1 : Matrix (Σi, m' i) (Σi, m' i) α) = 1 :=\n  funext <| blockDiag'_diagonal _\n#align block_diag'_one block_diag'_one\n\n",
 "block_diag'_neg":
 "@[simp]\ntheorem block_diag'_neg [AddGroup α] (M : Matrix (Σi, m' i) (Σi, n' i) α) : blockDiag' (-M) = -blockDiag' M :=\n  map_neg (blockDiag'AddMonoidHom m' n' α) M\n#align block_diag'_neg block_diag'_neg\n\n",
 "block_diag'_map":
 "theorem block_diag'_map (M : Matrix (Σi, m' i) (Σi, n' i) α) (f : α → β) :\n    blockDiag' (M.map f) = fun k => (blockDiag' M k).map f :=\n  rfl\n#align block_diag'_map block_diag'_map\n\n",
 "block_diag'_diagonal":
 "@[simp]\ntheorem block_diag'_diagonal [DecidableEq o] [∀ i, DecidableEq (m' i)] (d : (Σi, m' i) → α) (k : o) :\n    blockDiag' (diagonal d) k = diagonal fun i => d ⟨k, i⟩ :=\n  ext fun i j => by\n    obtain rfl | hij := Decidable.eq_or_ne i j\n    · rw [block_diag'_apply, diagonal_apply_eq, diagonal_apply_eq]\n    · rw [block_diag'_apply, diagonal_apply_ne _ hij, diagonal_apply_ne _ (mt (fun h => _) hij)]\n      cases h\n      rfl\n#align block_diag'_diagonal block_diag'_diagonal\n\n",
 "block_diag'_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem block_diag'_conj_transpose {α : Type _} [AddMonoid α] [StarAddMonoid α] (M : Matrix (Σi, m' i) (Σi, n' i) α)\n    (k : o) : blockDiag' (matrix.conj_transpose M) k = matrix.conj_transpose (blockDiag' M k) :=\n  ext fun i j => rfl\n#align block_diag'_conj_transpose block_diag'_conj_transpose\n\n",
 "block_diag'_block_diagonal'":
 "@[simp]\ntheorem block_diag'_block_diagonal' [DecidableEq o] (M : ∀ i, Matrix (m' i) (n' i) α) :\n    blockDiag' (blockDiagonal' M) = M :=\n  funext fun k => ext fun i j => blockDiagonal'_apply_eq M _ _ _\n#align block_diag'_block_diagonal' block_diag'_block_diagonal'\n\n",
 "block_diag'_apply":
 "-- TODO: set as an equation lemma for `block_diag'`, see mathlib4#3024\ntheorem block_diag'_apply (M : Matrix (Σi, m' i) (Σi, n' i) α) (k : o) (i j) : blockDiag' M k i j = M ⟨k, i⟩ ⟨k, j⟩ :=\n  rfl\n#align block_diag'_apply block_diag'_apply\n\n",
 "block_diag'_add":
 "@[simp]\ntheorem block_diag'_add [AddZeroClass α] (M N : Matrix (Σi, m' i) (Σi, n' i) α) :\n    blockDiag' (M + N) = blockDiag' M + blockDiag' N :=\n  rfl\n#align block_diag'_add block_diag'_add\n\n"}