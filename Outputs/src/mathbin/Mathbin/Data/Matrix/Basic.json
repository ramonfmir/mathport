{"zero_vec_mul":
 "@[simp]\ntheorem zero_vec_mul [fintype m] (A : matrix m n α) : vec_mul 0 A = 0 :=\n  by\n  ext\n  simp [vec_mul]\n#align zero_vec_mul zero_vec_mul\n\n",
 "zero_mul_vec":
 "@[simp]\ntheorem zero_mul_vec [fintype n] (v : n → α) : mul_vec (0 : matrix m n α) v = 0 :=\n  by\n  ext\n  simp [mul_vec]\n#align zero_mul_vec zero_mul_vec\n\n",
 "zero_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\nprotected theorem zero_mul [fintype m] (M : matrix m n α) : matrix.mul (0 : matrix l m α) M = 0 :=\n  by\n  ext (i j)\n  apply zero_dot_product\n#align zero_mul zero_mul\n\n",
 "zero_dot_product'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem zero_dot_product' : matrix.dot_product (fun _ => (0 : α)) v = 0 :=\n  zero_dot_product v\n#align zero_dot_product' zero_dot_product'\n\n",
 "zero_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem zero_dot_product : matrix.dot_product 0 v = 0 := by simp [dot_product]\n#align zero_dot_product zero_dot_product\n\n",
 "vec_mul_zero":
 "@[simp]\ntheorem vec_mul_zero [fintype m] (v : m → α) : vec_mul v (0 : matrix m n α) = 0 :=\n  by\n  ext\n  simp [vec_mul]\n#align vec_mul_zero vec_mul_zero\n\n",
 "vec_mul_vec_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem vec_mul_vec_mul [fintype n] [fintype m] (v : m → α) (M : matrix m n α) (N : matrix n o α) :\n    vec_mul (vec_mul v M) N = vec_mul v (matrix.mul M N) :=\n  by\n  ext\n  apply dot_product_assoc\n#align vec_mul_vec_mul vec_mul_vec_mul\n\n",
 "vec_mul_vec_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem vec_mul_vec_eq [Mul α] [add_comm_monoid α] (w : m → α) (v : n → α) :\n    vec_mul_vec w v = matrix.mul (col w) (row v) := by\n  ext (i j)\n  simp only [vec_mul_vec, mul_apply, fintype.univ_punit, finset.sum_singleton]\n  rfl\n#align vec_mul_vec_eq vec_mul_vec_eq\n\n",
 "vec_mul_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem vec_mul_transpose [fintype n] (A : matrix m n α) (x : n → α) : vec_mul x (matrix.transpose A) = mul_vec A x :=\n  by\n  ext\n  apply dot_product_comm\n#align vec_mul_transpose vec_mul_transpose\n\n",
 "vec_mul_sub":
 "theorem vec_mul_sub [fintype m] (A B : matrix m n α) (x : m → α) : vec_mul x (A - B) = vec_mul x A - vec_mul x B := by\n  simp [sub_eq_add_neg, vec_mul_add, vec_mul_neg]\n#align vec_mul_sub vec_mul_sub\n\n",
 "vec_mul_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem vec_mul_smul [fintype n] [monoid R] [NonUnitalNonAssocSemiring S] [DistribMulAction R S] [IsScalarTower R S S]\n    (M : matrix n m S) (b : R) (v : n → S) : M.vec_mul («expr • » b v) = «expr • » b (M.vec_mul v) :=\n  by\n  ext i\n  simp only [vec_mul, dot_product, finset.smul_sum, pi.smul_apply, smul_mul_assoc]\n#align vec_mul_smul vec_mul_smul\n\n",
 "vec_mul_one":
 "@[simp]\ntheorem vec_mul_one (v : m → α) : vec_mul v 1 = v := by\n  ext\n  rw [← diagonal_one, vec_mul_diagonal, mul_one]\n#align vec_mul_one vec_mul_one\n\n",
 "vec_mul_neg":
 "theorem vec_mul_neg [fintype m] (v : m → α) (A : matrix m n α) : vec_mul v (-A) = -vec_mul v A :=\n  by\n  ext\n  apply dot_product_neg\n#align vec_mul_neg vec_mul_neg\n\n",
 "vec_mul_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem vec_mul_mul_vec [fintype m] [fintype n] (A : matrix m n α) (B : matrix m o α) (x : n → α) :\n    vec_mul (mul_vec A x) B = vec_mul x (matrix.mul (matrix.transpose A) B) := by\n  rw [← vec_mul_vec_mul, vec_mul_transpose]\n#align vec_mul_mul_vec vec_mul_mul_vec\n\n",
 "vec_mul_diagonal":
 "theorem vec_mul_diagonal [fintype m] [decidable_eq m] (v w : m → α) (x : m) : vec_mul v (diagonal w) x = v x * w x :=\n  dot_product_diagonal' v w x\n#align vec_mul_diagonal vec_mul_diagonal\n\n",
 "vec_mul_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem vec_mul_conj_transpose [fintype n] [StarRing α] (A : matrix m n α) (x : n → α) :\n    vec_mul x (matrix.conj_transpose A) = star (mul_vec A (star x)) :=\n  funext fun i => dot_product_star _ _\n#align vec_mul_conj_transpose vec_mul_conj_transpose\n\n",
 "vec_mul_add":
 "theorem vec_mul_add [fintype m] (A B : matrix m n α) (x : m → α) : vec_mul x (A + B) = vec_mul x A + vec_mul x B :=\n  by\n  ext\n  apply dot_product_add\n#align vec_mul_add vec_mul_add\n\n",
 "update_row_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem update_row_transpose [decidable_eq n] :\n    update_row (matrix.transpose M) j c = matrix.transpose (update_column M j c) :=\n  by\n  ext (i' j)\n  rw [transpose_apply, update_row_apply, update_column_apply]\n  rfl\n#align update_row_transpose update_row_transpose\n\n",
 "update_row_subsingleton":
 "@[simp]\ntheorem update_row_subsingleton [subsingleton m] (A : matrix m n R) (i : m) (b : n → R) :\n    A.update_row i b = (row b).submatrix (function.const m ()) id :=\n  by\n  ext (x y)\n  simp [update_column_apply, subsingleton.elim i x]\n#align update_row_subsingleton update_row_subsingleton\n\n",
 "update_row_self":
 "@[simp]\ntheorem update_row_self [decidable_eq m] : update_row M i b i = b :=\n  function.update_same i b M\n#align update_row_self update_row_self\n\n",
 "update_row_ne":
 "@[simp]\ntheorem update_row_ne [decidable_eq m] {i' : m} (i_ne : i' ≠ i) : update_row M i b i' = M i' :=\n  function.update_noteq i_ne b M\n#align update_row_ne update_row_ne\n\n",
 "update_row_eq_self":
 "@[simp]\ntheorem update_row_eq_self [decidable_eq m] (A : matrix m n α) (i : m) : A.update_row i (A i) = A :=\n  function.update_eq_self i A\n#align update_row_eq_self update_row_eq_self\n\n",
 "update_row_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem update_row_conj_transpose [decidable_eq n] [Star α] :\n    update_row (matrix.conj_transpose M) j (star c) = matrix.conj_transpose (update_column M j c) :=\n  by\n  rw [conj_transpose, conj_transpose, transpose_map, transpose_map, update_row_transpose, map_update_column]\n  rfl\n#align update_row_conj_transpose update_row_conj_transpose\n\n",
 "update_row_apply":
 "theorem update_row_apply [decidable_eq m] {i' : m} : update_row M i b i' j = if i' = i then b j else M i' j :=\n  by\n  by_cases i' = i\n  · rw [h, update_row_self, if_pos rfl]\n  · rwa [update_row_ne h, if_neg h]\n#align update_row_apply update_row_apply\n\n",
 "update_column_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem update_column_transpose [decidable_eq m] :\n    update_column (matrix.transpose M) i b = matrix.transpose (update_row M i b) :=\n  by\n  ext (i' j)\n  rw [transpose_apply, update_row_apply, update_column_apply]\n  rfl\n#align update_column_transpose update_column_transpose\n\n",
 "update_column_subsingleton":
 "@[simp]\ntheorem update_column_subsingleton [subsingleton n] (A : matrix m n R) (i : n) (b : m → R) :\n    A.update_column i b = (col b).submatrix id (function.const n ()) :=\n  by\n  ext (x y)\n  simp [update_column_apply, subsingleton.elim i y]\n#align update_column_subsingleton update_column_subsingleton\n\n",
 "update_column_self":
 "@[simp]\ntheorem update_column_self [decidable_eq n] : update_column M j c i j = c i :=\n  function.update_same j (c i) (M i)\n#align update_column_self update_column_self\n\n",
 "update_column_ne":
 "@[simp]\ntheorem update_column_ne [decidable_eq n] {j' : n} (j_ne : j' ≠ j) : update_column M j c i j' = M i j' :=\n  function.update_noteq j_ne (c i) (M i)\n#align update_column_ne update_column_ne\n\n",
 "update_column_eq_self":
 "@[simp]\ntheorem update_column_eq_self [decidable_eq n] (A : matrix m n α) (i : n) : (A.update_column i fun j => A j i) = A :=\n  funext fun j => function.update_eq_self i (A j)\n#align update_column_eq_self update_column_eq_self\n\n",
 "update_column_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem update_column_conj_transpose [decidable_eq m] [Star α] :\n    update_column (matrix.conj_transpose M) i (star b) = matrix.conj_transpose (update_row M i b) :=\n  by\n  rw [conj_transpose, conj_transpose, transpose_map, transpose_map, update_column_transpose, map_update_row]\n  rfl\n#align update_column_conj_transpose update_column_conj_transpose\n\n",
 "update_column_apply":
 "theorem update_column_apply [decidable_eq n] {j' : n} : update_column M j c i j' = if j' = j then c i else M i j' :=\n  by\n  by_cases j' = j\n  · rw [h, update_column_self, if_pos rfl]\n  · rwa [update_column_ne h, if_neg h]\n#align update_column_apply update_column_apply\n\n",
 "two_mul_expl":
 "theorem two_mul_expl {R : Type _} [CommRing R] (A B : matrix (fin 2) (fin 2) R) :\n    (A * B) 0 0 = A 0 0 * B 0 0 + A 0 1 * B 1 0 ∧\n      (A * B) 0 1 = A 0 0 * B 0 1 + A 0 1 * B 1 1 ∧\n        (A * B) 1 0 = A 1 0 * B 0 0 + A 1 1 * B 1 0 ∧ (A * B) 1 1 = A 1 0 * B 0 1 + A 1 1 * B 1 1 :=\n  by\n  constructor; on_goal 2 => constructor; on_goal 3 => constructor\n  all_goals\n    simp only [matrix.mul_eq_mul]\n    rw [matrix.mul_apply, finset.sum_fin_eq_sum_range, finset.sum_range_succ, finset.sum_range_succ]\n    simp\n#align two_mul_expl two_mul_expl\n\n",
 "transpose_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_zero [Zero α] : matrix.transpose (0 : matrix m n α) = 0 := by ext (i j) <;> rfl\n#align transpose_zero transpose_zero\n\n",
 "transpose_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_transpose (M : matrix m n α) : matrix.transpose (matrix.transpose M) = M := by ext <;> rfl\n#align transpose_transpose transpose_transpose\n\n",
 "transpose_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_sum [add_comm_monoid α] {ι : Type _} (s : Finset ι) (M : ι → matrix m n α) :\n    matrix.transpose\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (M i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (matrix.transpose (M i)) :=\n  (transpose_add_equiv m n α).to_add_monoid_hom.map_sum _ s\n#align transpose_sum transpose_sum\n\n",
 "transpose_submatrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_submatrix (A : matrix m n α) (r_reindex : l → m) (c_reindex : o → n) :\n    matrix.transpose (A.submatrix r_reindex c_reindex) = (matrix.transpose A).submatrix c_reindex r_reindex :=\n  ext fun _ _ => rfl\n#align transpose_submatrix transpose_submatrix\n\n",
 "transpose_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_sub [Sub α] (M : matrix m n α) (N : matrix m n α) :\n    matrix.transpose (M - N) = matrix.transpose M - matrix.transpose N :=\n  by\n  ext (i j)\n  simp\n#align transpose_sub transpose_sub\n\n",
 "transpose_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_smul {R : Type _} [SMul R α] (c : R) (M : matrix m n α) :\n    matrix.transpose («expr • » c M) = «expr • » c (matrix.transpose M) :=\n  by\n  ext (i j)\n  rfl\n#align transpose_smul transpose_smul\n\n",
 "transpose_row":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_row (v : m → α) : matrix.transpose (matrix.row v) = matrix.col v :=\n  by\n  ext\n  rfl\n#align transpose_row transpose_row\n\n",
 "transpose_reindex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_reindex (eₘ : «expr ≃ » m l) (eₙ : «expr ≃ » n o) (M : matrix m n α) :\n    matrix.transpose (reindex eₘ eₙ M) = reindex eₙ eₘ (matrix.transpose M) :=\n  rfl\n#align transpose_reindex transpose_reindex\n\n",
 "transpose_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_pow [CommSemiring α] [fintype m] [decidable_eq m] (M : matrix m m α) (k : ℕ) :\n    matrix.transpose (M ^ k) = matrix.transpose M ^ k :=\n  mul_opposite.op_injective <| map_pow (transpose_ring_equiv m α) M k\n#align transpose_pow transpose_pow\n\n",
 "transpose_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_one [decidable_eq n] [Zero α] [One α] : matrix.transpose (1 : matrix n n α) = 1 :=\n  by\n  ext (i j)\n  unfold has_one.one transpose\n  by_cases i = j\n  · simp only [h, diagonal_apply_eq]\n  · simp only [diagonal_apply_ne _ h, diagonal_apply_ne' _ h]\n#align transpose_one transpose_one\n\n",
 "transpose_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_neg [Neg α] (M : matrix m n α) : matrix.transpose (-M) = -matrix.transpose M := by ext (i j) <;> rfl\n#align transpose_neg transpose_neg\n\n",
 "transpose_multiset_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_multiset_sum [add_comm_monoid α] (s : Multiset (matrix m n α)) :\n    matrix.transpose s.sum = (s.map transpose).sum :=\n  (transpose_add_equiv m n α).to_add_monoid_hom.map_multiset_sum s\n#align transpose_multiset_sum transpose_multiset_sum\n\n",
 "transpose_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_mul [add_comm_monoid α] [comm_semigroup α] [fintype n] (M : matrix m n α) (N : matrix n l α) :\n    matrix.transpose (matrix.mul M N) = matrix.mul (matrix.transpose N) (matrix.transpose M) :=\n  by\n  ext (i j)\n  apply dot_product_comm\n#align transpose_mul transpose_mul\n\n",
 "transpose_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_map {f : α → β} {M : matrix m n α} : (matrix.transpose M).map f = matrix.transpose (M.map f) :=\n  by\n  ext\n  rfl\n#align transpose_map transpose_map\n\n",
 "transpose_list_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_list_sum [add_monoid α] (l : list (matrix m n α)) : matrix.transpose l.sum = (l.map transpose).sum :=\n  (transpose_add_equiv m n α).to_add_monoid_hom.map_list_sum l\n#align transpose_list_sum transpose_list_sum\n\n",
 "transpose_list_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_list_prod [CommSemiring α] [fintype m] [decidable_eq m] (l : list (matrix m m α)) :\n    matrix.transpose l.prod = (l.map transpose).reverse.prod :=\n  (transpose_ring_equiv m α).unop_map_list_prod l\n#align transpose_list_prod transpose_list_prod\n\n",
 "transpose_linear_equiv_symm":
 "@[simp]\ntheorem transpose_linear_equiv_symm [Semiring R] [add_comm_monoid α] [Module R α] :\n    (transpose_linear_equiv m n R α).symm = transpose_linear_equiv n m R α :=\n  rfl\n#align transpose_linear_equiv_symm transpose_linear_equiv_symm\n\n",
 "transpose_col":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_col (v : m → α) : matrix.transpose (matrix.col v) = matrix.row v :=\n  by\n  ext\n  rfl\n#align transpose_col transpose_col\n\n",
 "transpose_apply":
 "/-- Tell `simp` what the entries are in a transposed matrix.\n\n  Compare with `mul_apply`, `diagonal_apply_eq`, etc.\n-/\n@[simp]\ntheorem transpose_apply (M : matrix m n α) (i j) : M.transpose j i = M i j :=\n  rfl\n#align transpose_apply transpose_apply\n\n",
 "transpose_add_equiv_symm":
 "@[simp]\ntheorem transpose_add_equiv_symm [Add α] : (transpose_add_equiv m n α).symm = transpose_add_equiv n m α :=\n  rfl\n#align transpose_add_equiv_symm transpose_add_equiv_symm\n\n",
 "transpose_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem transpose_add [Add α] (M : matrix m n α) (N : matrix m n α) :\n    matrix.transpose (M + N) = matrix.transpose M + matrix.transpose N :=\n  by\n  ext (i j)\n  simp\n#align transpose_add transpose_add\n\n",
 "sum_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\nprotected theorem sum_mul [fintype m] (s : Finset β) (f : β → matrix l m α) (M : matrix m n α) :\n    matrix.mul (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f a))\n        M =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (matrix.mul (f a) M) :=\n  (add_monoid_hom_mul_right M : «expr →+ » (matrix l m α) _).map_sum f s\n#align sum_mul sum_mul\n\n",
 "sum_elim_dot_product_sum_elim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem sum_elim_dot_product_sum_elim :\n    matrix.dot_product (sum.elim u x) (sum.elim v y) = matrix.dot_product u v + matrix.dot_product x y := by\n  simp [dot_product]\n#align sum_elim_dot_product_sum_elim sum_elim_dot_product_sum_elim\n\n",
 "sum_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem sum_apply [add_comm_monoid α] (i : m) (j : n) (s : Finset β) (g : β → matrix m n α) :\n    (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g c)) i j =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g c i j) :=\n  (congr_fun (s.sum_apply i g) j).trans (s.sum_apply j _)\n#align sum_apply sum_apply\n\n",
 "submatrix_zero":
 "@[simp]\ntheorem submatrix_zero [Zero α] : ((0 : matrix m n α).submatrix : (l → m) → (o → n) → matrix l o α) = 0 :=\n  rfl\n#align submatrix_zero submatrix_zero\n\n",
 "submatrix_submatrix":
 "@[simp]\ntheorem submatrix_submatrix {l₂ o₂ : Type _} (A : matrix m n α) (r₁ : l → m) (c₁ : o → n) (r₂ : l₂ → l) (c₂ : o₂ → o) :\n    (A.submatrix r₁ c₁).submatrix r₂ c₂ = A.submatrix (r₁ ∘ r₂) (c₁ ∘ c₂) :=\n  ext fun _ _ => rfl\n#align submatrix_submatrix submatrix_submatrix\n\n",
 "submatrix_sub":
 "theorem submatrix_sub [Sub α] (A B : matrix m n α) :\n    ((A - B).submatrix : (l → m) → (o → n) → matrix l o α) = A.submatrix - B.submatrix :=\n  rfl\n#align submatrix_sub submatrix_sub\n\n",
 "submatrix_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem submatrix_smul {R : Type _} [SMul R α] (r : R) (A : matrix m n α) :\n    ((«expr • » r A : matrix m n α).submatrix : (l → m) → (o → n) → matrix l o α) = «expr • » r A.submatrix :=\n  rfl\n#align submatrix_smul submatrix_smul\n\n",
 "submatrix_one_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem submatrix_one_equiv [Zero α] [One α] [decidable_eq m] [decidable_eq l] (e : «expr ≃ » l m) :\n    (1 : matrix m m α).submatrix e e = 1 :=\n  submatrix_one e e.injective\n#align submatrix_one_equiv submatrix_one_equiv\n\n",
 "submatrix_one_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n@[simp]\ntheorem submatrix_one_embedding [Zero α] [One α] [decidable_eq m] [decidable_eq l] (e : «expr ↪ » l m) :\n    (1 : matrix m m α).submatrix e e = 1 :=\n  submatrix_one e e.injective\n#align submatrix_one_embedding submatrix_one_embedding\n\n",
 "submatrix_one":
 "theorem submatrix_one [Zero α] [One α] [decidable_eq m] [decidable_eq l] (e : l → m) (he : function.injective e) :\n    (1 : matrix m m α).submatrix e e = 1 :=\n  submatrix_diagonal _ e he\n#align submatrix_one submatrix_one\n\n",
 "submatrix_neg":
 "theorem submatrix_neg [Neg α] (A : matrix m n α) : ((-A).submatrix : (l → m) → (o → n) → matrix l o α) = -A.submatrix :=\n  rfl\n#align submatrix_neg submatrix_neg\n\n",
 "submatrix_mul_transpose_submatrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem submatrix_mul_transpose_submatrix [fintype m] [fintype n] [add_comm_monoid α] [Mul α] (e : «expr ≃ » m n)\n    (M : matrix m n α) :\n    matrix.mul (M.submatrix id e) ((matrix.transpose M).submatrix e id) = matrix.mul M (matrix.transpose M) := by\n  rw [submatrix_mul_equiv, submatrix_id_id]\n#align submatrix_mul_transpose_submatrix submatrix_mul_transpose_submatrix\n\n",
 "submatrix_mul_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem submatrix_mul_equiv [fintype n] [fintype o] [add_comm_monoid α] [Mul α] {p q : Type _} (M : matrix m n α)\n    (N : matrix n p α) (e₁ : l → m) (e₂ : «expr ≃ » o n) (e₃ : q → p) :\n    matrix.mul (M.submatrix e₁ e₂) (N.submatrix e₂ e₃) = (matrix.mul M N).submatrix e₁ e₃ :=\n  (submatrix_mul M N e₁ e₂ e₃ e₂.bijective).symm\n#align submatrix_mul_equiv submatrix_mul_equiv\n\n",
 "submatrix_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem submatrix_mul [fintype n] [fintype o] [Mul α] [add_comm_monoid α] {p q : Type _} (M : matrix m n α)\n    (N : matrix n p α) (e₁ : l → m) (e₂ : o → n) (e₃ : q → p) (he₂ : function.bijective e₂) :\n    (matrix.mul M N).submatrix e₁ e₃ = matrix.mul (M.submatrix e₁ e₂) (N.submatrix e₂ e₃) :=\n  ext fun _ _ => (he₂.sum_comp _).symm\n#align submatrix_mul submatrix_mul\n\n",
 "submatrix_map":
 "theorem submatrix_map (f : α → β) (e₁ : l → m) (e₂ : o → n) (A : matrix m n α) :\n    (A.map f).submatrix e₁ e₂ = (A.submatrix e₁ e₂).map f :=\n  rfl\n#align submatrix_map submatrix_map\n\n",
 "submatrix_id_id":
 "@[simp]\ntheorem submatrix_id_id (A : matrix m n α) : A.submatrix id id = A :=\n  ext fun _ _ => rfl\n#align submatrix_id_id submatrix_id_id\n\n",
 "submatrix_diagonal_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem submatrix_diagonal_equiv [Zero α] [decidable_eq m] [decidable_eq l] (d : m → α) (e : «expr ≃ » l m) :\n    (diagonal d).submatrix e e = diagonal (d ∘ e) :=\n  submatrix_diagonal d e e.injective\n#align submatrix_diagonal_equiv submatrix_diagonal_equiv\n\n",
 "submatrix_diagonal_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n@[simp]\ntheorem submatrix_diagonal_embedding [Zero α] [decidable_eq m] [decidable_eq l] (d : m → α) (e : «expr ↪ » l m) :\n    (diagonal d).submatrix e e = diagonal (d ∘ e) :=\n  submatrix_diagonal d e e.injective\n#align submatrix_diagonal_embedding submatrix_diagonal_embedding\n\n",
 "submatrix_diagonal":
 "/-- Given a `(m × m)` diagonal matrix defined by a map `d : m → α`, if the reindexing map `e` is\n  injective, then the resulting matrix is again diagonal. -/\ntheorem submatrix_diagonal [Zero α] [decidable_eq m] [decidable_eq l] (d : m → α) (e : l → m)\n    (he : function.injective e) : (diagonal d).submatrix e e = diagonal (d ∘ e) :=\n  ext fun i j => by\n    rw [submatrix_apply]\n    by_cases h : i = j\n    · rw [h, diagonal_apply_eq, diagonal_apply_eq]\n    · rw [diagonal_apply_ne _ h, diagonal_apply_ne _ (he.ne h)]\n#align submatrix_diagonal submatrix_diagonal\n\n",
 "submatrix_apply":
 "@[simp]\ntheorem submatrix_apply (A : matrix m n α) (r_reindex : l → m) (c_reindex : o → n) (i j) :\n    A.submatrix r_reindex c_reindex i j = A (r_reindex i) (c_reindex j) :=\n  rfl\n#align submatrix_apply submatrix_apply\n\n",
 "submatrix_add":
 "theorem submatrix_add [Add α] (A B : matrix m n α) :\n    ((A + B).submatrix : (l → m) → (o → n) → matrix l o α) = A.submatrix + B.submatrix :=\n  rfl\n#align submatrix_add submatrix_add\n\n",
 "sub_mul_vec":
 "theorem sub_mul_vec [fintype n] (A B : matrix m n α) (x : n → α) : mul_vec (A - B) x = mul_vec A x - mul_vec B x := by\n  simp [sub_eq_add_neg, add_mul_vec, neg_mul_vec]\n#align sub_mul_vec sub_mul_vec\n\n",
 "sub_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print sub_mul /-\nprotected theorem sub_mul (M M' : matrix m n α) (N : matrix n o α) :\n    matrix.mul (M - M') N = matrix.mul M N - matrix.mul M' N := by\n  rw [sub_eq_add_neg, matrix.add_mul, matrix.neg_mul, sub_eq_add_neg]\n#align sub_mul sub_mul\n-/\n\n",
 "sub_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem sub_dot_product : matrix.dot_product (u - v) w = matrix.dot_product u w - matrix.dot_product v w := by\n  simp [sub_eq_add_neg]\n#align sub_dot_product sub_dot_product\n\n",
 "star_vec_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem star_vec_mul [fintype m] [StarRing α] (M : matrix m n α) (v : m → α) :\n    star (M.vec_mul v) = (matrix.conj_transpose M).mul_vec (star v) :=\n  funext fun i => (star_dot_product_star _ _).symm\n#align star_vec_mul star_vec_mul\n\n",
 "star_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem star_mul_vec [fintype n] [StarRing α] (M : matrix m n α) (v : n → α) :\n    star (M.mul_vec v) = vec_mul (star v) (matrix.conj_transpose M) :=\n  funext fun i => (star_dot_product_star _ _).symm\n#align star_mul_vec star_mul_vec\n\n",
 "star_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-- A version of `star_mul` for `⬝` instead of `*`. -/\ntheorem star_mul [fintype n] [NonUnitalSemiring α] [StarRing α] (M N : matrix n n α) :\n    star (matrix.mul M N) = matrix.mul (star N) (star M) :=\n  conj_transpose_mul _ _\n#align star_mul star_mul\n\n",
 "star_eq_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem star_eq_conj_transpose [Star α] (M : matrix m m α) : star M = matrix.conj_transpose M :=\n  rfl\n#align star_eq_conj_transpose star_eq_conj_transpose\n\n",
 "star_dot_product_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\ntheorem star_dot_product_star : matrix.dot_product (star v) (star w) = star (matrix.dot_product w v) := by\n  simp [dot_product]\n#align star_dot_product_star star_dot_product_star\n\n",
 "star_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\ntheorem star_dot_product : matrix.dot_product (star v) w = star (matrix.dot_product (star w) v) := by simp [dot_product]\n#align star_dot_product star_dot_product\n\n",
 "star_apply":
 "@[simp]\ntheorem star_apply [Star α] (M : matrix n n α) (i j) : (star M) i j = star (M j i) :=\n  rfl\n#align star_apply star_apply\n\n",
 "smul_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_of [SMul R α] (r : R) (f : m → n → α) : «expr • » r (of f) = of («expr • » r f) :=\n  rfl\n#align smul_of smul_of\n\n",
 "smul_mul_vec_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_mul_vec_assoc [fintype n] [monoid R] [DistribMulAction R α] [IsScalarTower R α α] (a : R)\n    (A : matrix m n α) (b : n → α) : («expr • » a A).mul_vec b = «expr • » a (A.mul_vec b) :=\n  by\n  ext\n  apply smul_dot_product\n#align smul_mul_vec_assoc smul_mul_vec_assoc\n\n",
 "smul_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem smul_mul [fintype n] [monoid R] [DistribMulAction R α] [IsScalarTower R α α] (a : R) (M : matrix m n α)\n    (N : matrix n l α) : matrix.mul («expr • » a M) N = «expr • » a (matrix.mul M N) :=\n  by\n  ext\n  apply smul_dot_product\n#align smul_mul smul_mul\n\n",
 "smul_eq_mul_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem smul_eq_mul_diagonal [decidable_eq n] (M : matrix m n α) (a : α) :\n    «expr • » a M = matrix.mul M (diagonal fun _ => a) := by\n  ext\n  simp [mul_comm]\n#align smul_eq_mul_diagonal smul_eq_mul_diagonal\n\n",
 "smul_eq_diagonal_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem smul_eq_diagonal_mul [fintype m] [decidable_eq m] (M : matrix m n α) (a : α) :\n    «expr • » a M = matrix.mul (diagonal fun _ => a) M := by\n  ext\n  simp\n#align smul_eq_diagonal_mul smul_eq_diagonal_mul\n\n",
 "smul_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem smul_dot_product [IsScalarTower R α α] (x : R) (v w : m → α) :\n    matrix.dot_product («expr • » x v) w = «expr • » x (matrix.dot_product v w) := by\n  simp [dot_product, finset.smul_sum, smul_mul_assoc]\n#align smul_dot_product smul_dot_product\n\n",
 "single_vec_mul_diagonal":
 "@[simp]\ntheorem single_vec_mul_diagonal [fintype n] [decidable_eq n] [NonUnitalNonAssocSemiring R] (v : n → R) (j : n) (x : R) :\n    vec_mul (Pi.single j x) (diagonal v) = Pi.single j (x * v j) :=\n  by\n  ext i\n  rw [vec_mul_diagonal]\n  exact Pi.apply_single (fun i x => x * v i) (fun i => zero_mul _) j x i\n#align single_vec_mul_diagonal single_vec_mul_diagonal\n\n",
 "single_vec_mul":
 "@[simp]\ntheorem single_vec_mul [fintype m] [decidable_eq m] [NonUnitalNonAssocSemiring R] (M : matrix m n R) (i : m) (x : R) :\n    vec_mul (Pi.single i x) M = fun j => x * M i j :=\n  funext fun i => single_dot_product _ _ _\n#align single_vec_mul single_vec_mul\n\n",
 "single_dot_product":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (j «expr ≠ » i) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem single_dot_product (x : α) (i : m) : matrix.dot_product (Pi.single i x) v = x * v i :=\n  by\n  have : ∀ (j) (_ : j ≠ i), Pi.single i x j * v j = 0 := fun j hij => by simp [Pi.single_eq_of_ne hij]\n  convert finset.sum_eq_single i (fun j _ => this j) _ using 1 <;> simp\n#align single_dot_product single_dot_product\n\n",
 "scalar_inj":
 "theorem scalar_inj [nonempty n] {r s : α} : scalar n r = scalar n s ↔ r = s :=\n  by\n  constructor\n  · intro h\n    inhabit n\n    rw [← scalar_apply_eq r (Inhabited.default n), ← scalar_apply_eq s (Inhabited.default n), h]\n  · rintro rfl\n    rfl\n#align scalar_inj scalar_inj\n\n",
 "scalar_apply_ne":
 "theorem scalar_apply_ne (a : α) (i j : n) (h : i ≠ j) : scalar n a i j = 0 := by\n  simp only [h, coe_scalar, one_apply_ne, ne.def, not_false_iff, pi.smul_apply, smul_zero]\n#align scalar_apply_ne scalar_apply_ne\n\n",
 "scalar_apply_eq":
 "theorem scalar_apply_eq (a : α) (i : n) : scalar n a i i = a := by\n  simp only [coe_scalar, smul_eq_mul, mul_one, one_apply_eq, pi.smul_apply]\n#align scalar_apply_eq scalar_apply_eq\n\n",
 "row_vec_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem row_vec_mul [fintype m] [NonUnitalNonAssocSemiring α] (M : matrix m n α) (v : m → α) :\n    matrix.row (matrix.vec_mul v M) = matrix.mul (matrix.row v) M :=\n  by\n  ext\n  rfl\n#align row_vec_mul row_vec_mul\n\n",
 "row_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem row_smul [SMul R α] (x : R) (v : m → α) : row («expr • » x v) = «expr • » x (row v) :=\n  by\n  ext\n  rfl\n#align row_smul row_smul\n\n",
 "row_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem row_mul_vec [fintype n] [NonUnitalNonAssocSemiring α] (M : matrix m n α) (v : n → α) :\n    matrix.row (matrix.mul_vec M v) = matrix.transpose (matrix.mul M (matrix.col v)) :=\n  by\n  ext\n  rfl\n#align row_mul_vec row_mul_vec\n\n",
 "row_mul_col_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem row_mul_col_apply [fintype m] [Mul α] [add_comm_monoid α] (v w : m → α) (i j) :\n    (matrix.mul (row v) (col w)) i j = matrix.dot_product v w :=\n  rfl\n#align row_mul_col_apply row_mul_col_apply\n\n",
 "row_apply":
 "@[simp]\ntheorem row_apply (v : m → α) (i j) : matrix.row v i j = v j :=\n  rfl\n#align row_apply row_apply\n\n",
 "row_add":
 "@[simp]\ntheorem row_add [Add α] (v w : m → α) : row (v + w) = row v + row w :=\n  by\n  ext\n  rfl\n#align row_add row_add\n\n",
 "reindex_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem reindex_trans {l₂ o₂ : Type _} (eₘ : «expr ≃ » m l) (eₙ : «expr ≃ » n o) (eₘ₂ : «expr ≃ » l l₂)\n    (eₙ₂ : «expr ≃ » o o₂) :\n    (reindex eₘ eₙ).trans (reindex eₘ₂ eₙ₂) = (reindex (eₘ.trans eₘ₂) (eₙ.trans eₙ₂) : «expr ≃ » (matrix m n α) _) :=\n  equiv.ext fun A => (A.submatrix_submatrix eₘ.symm eₙ.symm eₘ₂.symm eₙ₂.symm : _)\n#align reindex_trans reindex_trans\n\n",
 "reindex_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem reindex_symm (eₘ : «expr ≃ » m l) (eₙ : «expr ≃ » n o) :\n    (reindex eₘ eₙ).symm = (reindex eₘ.symm eₙ.symm : «expr ≃ » (matrix l o α) _) :=\n  rfl\n#align reindex_symm reindex_symm\n\n",
 "reindex_refl_refl":
 "@[simp]\ntheorem reindex_refl_refl (A : matrix m n α) : reindex (equiv.refl _) (equiv.refl _) A = A :=\n  A.submatrix_id_id\n#align reindex_refl_refl reindex_refl_refl\n\n",
 "reindex_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem reindex_apply (eₘ : «expr ≃ » m l) (eₙ : «expr ≃ » n o) (M : matrix m n α) :\n    reindex eₘ eₙ M = M.submatrix eₘ.symm eₙ.symm :=\n  rfl\n#align reindex_apply reindex_apply\n\n",
 "one_submatrix_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem one_submatrix_mul [fintype m] [fintype o] [NonAssocSemiring α] [decidable_eq o] (e₁ : l → o)\n    (e₂ : «expr ≃ » m o) (M : matrix m n α) :\n    ((1 : matrix o o α).submatrix e₁ e₂).mul M = submatrix M (e₂.symm ∘ e₁) id :=\n  by\n  let A := M.submatrix e₂.symm id\n  have : M = A.submatrix e₂ id := by\n    simp only [submatrix_submatrix, function.comp.right_id, submatrix_id_id, equiv.symm_comp_self]\n  rw [this, submatrix_mul_equiv]\n  simp only [matrix.one_mul, submatrix_submatrix, function.comp.right_id, submatrix_id_id, equiv.symm_comp_self]\n#align one_submatrix_mul one_submatrix_mul\n\n",
 "one_mul_vec":
 "@[simp]\ntheorem one_mul_vec (v : m → α) : mul_vec 1 v = v := by\n  ext\n  rw [← diagonal_one, mul_vec_diagonal, one_mul]\n#align one_mul_vec one_mul_vec\n\n",
 "one_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print one_mul /-\n@[simp]\nprotected theorem one_mul [fintype m] [decidable_eq m] (M : matrix m n α) : matrix.mul (1 : matrix m m α) M = M := by\n  ext (i j) <;> rw [← diagonal_one, diagonal_mul, one_mul]\n#align one_mul one_mul\n-/\n\n",
 "one_eq_pi_single":
 "theorem one_eq_pi_single {i j} : (1 : matrix n n α) i j = Pi.single i 1 j := by\n  simp only [one_apply, Pi.single_apply, eq_comm] <;> congr\n#align one_eq_pi_single one_eq_pi_single\n\n",
 "one_apply_ne'":
 "theorem one_apply_ne' {i j} : j ≠ i → (1 : matrix n n α) i j = 0 :=\n  diagonal_apply_ne' _\n#align one_apply_ne' one_apply_ne'\n\n",
 "one_apply_ne":
 "@[simp]\ntheorem one_apply_ne {i j} : i ≠ j → (1 : matrix n n α) i j = 0 :=\n  diagonal_apply_ne _\n#align one_apply_ne one_apply_ne\n\n",
 "one_apply_eq":
 "@[simp]\ntheorem one_apply_eq (i) : (1 : matrix n n α) i i = 1 :=\n  diagonal_apply_eq _ i\n#align one_apply_eq one_apply_eq\n\n",
 "one_apply":
 "theorem one_apply {i j} : (1 : matrix n n α) i j = if i = j then 1 else 0 :=\n  rfl\n#align one_apply one_apply\n\n",
 "of_zero":
 "@[simp]\ntheorem of_zero [Zero α] : of (0 : m → n → α) = 0 :=\n  rfl\n#align of_zero of_zero\n\n",
 "of_symm_apply":
 "@[simp]\ntheorem of_symm_apply (f : matrix m n α) (i j) : of.symm f i j = f i j :=\n  rfl\n#align of_symm_apply of_symm_apply\n\n",
 "of_sub_of":
 "@[simp]\ntheorem of_sub_of [Sub α] (f g : m → n → α) : of f - of g = of (f - g) :=\n  rfl\n#align of_sub_of of_sub_of\n\n",
 "of_apply":
 "@[simp]\ntheorem of_apply (f : m → n → α) (i j) : of f i j = f i j :=\n  rfl\n#align of_apply of_apply\n\n",
 "of_add_of":
 "@[simp]\ntheorem of_add_of [Add α] (f g : m → n → α) : of f + of g = of (f + g) :=\n  rfl\n#align of_add_of of_add_of\n\n",
 "neg_vec_mul":
 "theorem neg_vec_mul [fintype m] (v : m → α) (A : matrix m n α) : vec_mul (-v) A = -vec_mul v A :=\n  by\n  ext\n  apply neg_dot_product\n#align neg_vec_mul neg_vec_mul\n\n",
 "neg_of":
 "@[simp]\ntheorem neg_of [Neg α] (f : m → n → α) : -of f = of (-f) :=\n  rfl\n#align neg_of neg_of\n\n",
 "neg_mul_vec":
 "theorem neg_mul_vec [fintype n] (v : n → α) (A : matrix m n α) : mul_vec (-A) v = -mul_vec A v :=\n  by\n  ext\n  apply neg_dot_product\n#align neg_mul_vec neg_mul_vec\n\n",
 "neg_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print neg_mul /-\n@[simp]\nprotected theorem neg_mul (M : matrix m n α) (N : matrix n o α) : matrix.mul (-M) N = -matrix.mul M N :=\n  by\n  ext\n  apply neg_dot_product\n#align neg_mul neg_mul\n-/\n\n",
 "neg_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem neg_dot_product : matrix.dot_product (-v) w = -matrix.dot_product v w := by simp [dot_product]\n#align neg_dot_product neg_dot_product\n\n",
 "mul_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\nprotected theorem mul_zero [fintype n] (M : matrix m n α) : matrix.mul M (0 : matrix n o α) = 0 :=\n  by\n  ext (i j)\n  apply dot_product_zero\n#align mul_zero mul_zero\n\n",
 "mul_vec_zero":
 "@[simp]\ntheorem mul_vec_zero [fintype n] (A : matrix m n α) : mul_vec A 0 = 0 :=\n  by\n  ext\n  simp [mul_vec]\n#align mul_vec_zero mul_vec_zero\n\n",
 "mul_vec_vec_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem mul_vec_vec_mul [fintype n] [fintype o] (A : matrix m n α) (B : matrix o n α) (x : o → α) :\n    mul_vec A (vec_mul x B) = mul_vec (matrix.mul A (matrix.transpose B)) x := by\n  rw [← mul_vec_mul_vec, mul_vec_transpose]\n#align mul_vec_vec_mul mul_vec_vec_mul\n\n",
 "mul_vec_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem mul_vec_transpose [fintype m] (A : matrix m n α) (x : m → α) : mul_vec (matrix.transpose A) x = vec_mul x A :=\n  by\n  ext\n  apply dot_product_comm\n#align mul_vec_transpose mul_vec_transpose\n\n",
 "mul_vec_smul_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mul_vec_smul_assoc [fintype n] (A : matrix m n α) (b : n → α) (a : α) :\n    A.mul_vec («expr • » a b) = «expr • » a (A.mul_vec b) :=\n  by\n  ext\n  apply dot_product_smul\n#align mul_vec_smul_assoc mul_vec_smul_assoc\n\n",
 "mul_vec_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mul_vec_smul [fintype n] [monoid R] [NonUnitalNonAssocSemiring S] [DistribMulAction R S] [SMulCommClass R S S]\n    (M : matrix m n S) (b : R) (v : n → S) : M.mul_vec («expr • » b v) = «expr • » b (M.mul_vec v) :=\n  by\n  ext i\n  simp only [mul_vec, dot_product, finset.smul_sum, pi.smul_apply, mul_smul_comm]\n#align mul_vec_smul mul_vec_smul\n\n",
 "mul_vec_single":
 "@[simp]\ntheorem mul_vec_single [fintype n] [decidable_eq n] [NonUnitalNonAssocSemiring R] (M : matrix m n R) (j : n) (x : R) :\n    M.mul_vec (Pi.single j x) = fun i => M i j * x :=\n  funext fun i => dot_product_single _ _ _\n#align mul_vec_single mul_vec_single\n\n",
 "mul_vec_neg":
 "theorem mul_vec_neg [fintype n] (v : n → α) (A : matrix m n α) : mul_vec A (-v) = -mul_vec A v :=\n  by\n  ext\n  apply dot_product_neg\n#align mul_vec_neg mul_vec_neg\n\n",
 "mul_vec_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_vec_mul_vec [fintype n] [fintype o] (v : o → α) (M : matrix m n α) (N : matrix n o α) :\n    mul_vec M (mul_vec N v) = mul_vec (matrix.mul M N) v :=\n  by\n  ext\n  symm\n  apply dot_product_assoc\n#align mul_vec_mul_vec mul_vec_mul_vec\n\n",
 "mul_vec_diagonal":
 "theorem mul_vec_diagonal [fintype m] [decidable_eq m] (v w : m → α) (x : m) : mul_vec (diagonal v) w x = v x * w x :=\n  diagonal_dot_product v w x\n#align mul_vec_diagonal mul_vec_diagonal\n\n",
 "mul_vec_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem mul_vec_conj_transpose [fintype m] [StarRing α] (A : matrix m n α) (x : m → α) :\n    mul_vec (matrix.conj_transpose A) x = star (vec_mul (star x) A) :=\n  funext fun i => star_dot_product _ _\n#align mul_vec_conj_transpose mul_vec_conj_transpose\n\n",
 "mul_vec_add":
 "theorem mul_vec_add [fintype n] (A : matrix m n α) (x y : n → α) : A.mul_vec (x + y) = A.mul_vec x + A.mul_vec y :=\n  by\n  ext\n  apply dot_product_add\n#align mul_vec_add mul_vec_add\n\n",
 "mul_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\nprotected theorem mul_sum [fintype m] (s : Finset β) (f : β → matrix m n α) (M : matrix l m α) :\n    matrix.mul M\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f a)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (matrix.mul M (f a)) :=\n  (add_monoid_hom_mul_left M : «expr →+ » (matrix m n α) _).map_sum f s\n#align mul_sum mul_sum\n\n",
 "mul_submatrix_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem mul_submatrix_one [fintype n] [fintype o] [NonAssocSemiring α] [decidable_eq o] (e₁ : «expr ≃ » n o)\n    (e₂ : l → o) (M : matrix m n α) :\n    matrix.mul M ((1 : matrix o o α).submatrix e₁ e₂) = submatrix M id (e₁.symm ∘ e₂) :=\n  by\n  let A := M.submatrix id e₁.symm\n  have : M = A.submatrix id e₁ := by\n    simp only [submatrix_submatrix, function.comp.right_id, submatrix_id_id, equiv.symm_comp_self]\n  rw [this, submatrix_mul_equiv]\n  simp only [matrix.mul_one, submatrix_submatrix, function.comp.right_id, submatrix_id_id, equiv.symm_comp_self]\n#align mul_submatrix_one mul_submatrix_one\n\n",
 "mul_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print mul_sub /-\nprotected theorem mul_sub (M : matrix m n α) (N N' : matrix n o α) :\n    matrix.mul M (N - N') = matrix.mul M N - matrix.mul M N' := by\n  rw [sub_eq_add_neg, matrix.mul_add, matrix.mul_neg, sub_eq_add_neg]\n#align mul_sub mul_sub\n-/\n\n",
 "mul_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_smul [fintype n] [monoid R] [DistribMulAction R α] [SMulCommClass R α α] (M : matrix m n α) (a : R)\n    (N : matrix n l α) : matrix.mul M («expr • » a N) = «expr • » a (matrix.mul M N) :=\n  by\n  ext\n  apply dot_product_smul\n#align mul_smul mul_smul\n\n",
 "mul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print mul_one /-\n@[simp]\nprotected theorem mul_one [fintype n] [decidable_eq n] (M : matrix m n α) : matrix.mul M (1 : matrix n n α) = M := by\n  ext (i j) <;> rw [← diagonal_one, mul_diagonal, mul_one]\n#align mul_one mul_one\n-/\n\n",
 "mul_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print mul_neg /-\n@[simp]\nprotected theorem mul_neg (M : matrix m n α) (N : matrix n o α) : matrix.mul M (-N) = -matrix.mul M N :=\n  by\n  ext\n  apply dot_product_neg\n#align mul_neg mul_neg\n-/\n\n",
 "mul_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_mul_right (M : matrix m n α) (N : matrix n o α) (a : α) :\n    matrix.mul M (of fun i j => a * N i j) = «expr • » a (matrix.mul M N) :=\n  mul_smul M a N\n#align mul_mul_right mul_mul_right\n\n",
 "mul_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_mul_left [fintype n] (M : matrix m n α) (N : matrix n o α) (a : α) :\n    matrix.mul (of fun i j => a * M i j) N = «expr • » a (matrix.mul M N) :=\n  smul_mul a M N\n#align mul_mul_left mul_mul_left\n\n",
 "mul_mul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem mul_mul_apply [fintype n] (A B C : matrix n n α) (i j : n) :\n    (matrix.mul (matrix.mul A B) C) i j = matrix.dot_product (A i) (B.mul_vec ((matrix.transpose C) j)) :=\n  by\n  rw [matrix.mul_assoc]\n  simpa only [mul_apply, dot_product, mul_vec]\n#align mul_mul_apply mul_mul_apply\n\n",
 "mul_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_eq_mul [fintype n] [Mul α] [add_comm_monoid α] (M N : matrix n n α) : M * N = matrix.mul M N :=\n  rfl\n#align mul_eq_mul mul_eq_mul\n\n",
 "mul_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_diagonal [fintype n] [decidable_eq n] (d : n → α) (M : matrix m n α) (i j) :\n    (matrix.mul M (diagonal d)) i j = M i j * d j :=\n  by\n  rw [← diagonal_transpose]\n  apply dot_product_diagonal\n#align mul_diagonal mul_diagonal\n\n",
 "mul_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print mul_assoc /-\nprotected theorem mul_assoc (L : matrix l m α) (M : matrix m n α) (N : matrix n o α) :\n    matrix.mul (matrix.mul L M) N = matrix.mul L (matrix.mul M N) :=\n  by\n  ext\n  apply dot_product_assoc\n#align mul_assoc mul_assoc\n-/\n\n",
 "mul_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\ntheorem mul_apply' [fintype m] [Mul α] [add_comm_monoid α] {M : matrix l m α} {N : matrix m n α} {i k} :\n    (matrix.mul M N) i k = matrix.dot_product (fun j => M i j) fun j => N j k :=\n  rfl\n#align mul_apply' mul_apply'\n\n",
 "mul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem mul_apply [fintype m] [Mul α] [add_comm_monoid α] {M : matrix l m α} {N : matrix m n α} {i k} :\n    (matrix.mul M N) i k =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (M i j * N j k) :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "mul_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print mul_add /-\nprotected theorem mul_add [fintype n] (L : matrix m n α) (M N : matrix n o α) :\n    matrix.mul L (M + N) = matrix.mul L M + matrix.mul L N :=\n  by\n  ext (i j)\n  apply dot_product_add\n#align mul_add mul_add\n-/\n\n",
 "matrix":
 "theorem _root_.is_left_regular.matrix [Mul α] {k : α} (hk : IsLeftRegular k) : IsSMulRegular (matrix m n α) k :=\n  hk.is_smul_regular.matrix\n#align is_left_regular.matrix is_left_regular.matrix\n\n",
 "map_zero":
 "#print map_zero /-\n@[simp]\nprotected theorem map_zero [Zero α] [Zero β] (f : α → β) (h : f 0 = 0) : (0 : matrix m n α).map f = 0 :=\n  by\n  ext\n  simp [h]\n#align map_zero map_zero\n-/\n\n",
 "map_vec_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem map_vec_mul [NonAssocSemiring R] [NonAssocSemiring S] (f : «expr →+* » R S) (M : matrix n m R) (v : n → R)\n    (i : m) : f (M.vec_mul v i) = (M.map f).vec_mul (f ∘ v) i := by\n  simp only [matrix.vec_mul, matrix.map_apply, ring_hom.map_dot_product]\n#align map_vec_mul map_vec_mul\n\n",
 "map_update_row":
 "theorem map_update_row [decidable_eq m] (f : α → β) : map (update_row M i b) f = update_row (M.map f) i (f ∘ b) :=\n  by\n  ext (i' j')\n  rw [update_row_apply, map_apply, map_apply, update_row_apply]\n  exact apply_ite f _ _ _\n#align map_update_row map_update_row\n\n",
 "map_update_column":
 "theorem map_update_column [decidable_eq n] (f : α → β) :\n    map (update_column M j c) f = update_column (M.map f) j (f ∘ c) :=\n  by\n  ext (i' j')\n  rw [update_column_apply, map_apply, map_apply, update_column_apply]\n  exact apply_ite f _ _ _\n#align map_update_column map_update_column\n\n",
 "map_sub":
 "#print map_sub /-\nprotected theorem map_sub [Sub α] [Sub β] (f : α → β) (hf : ∀ a₁ a₂, f (a₁ - a₂) = f a₁ - f a₂) (M N : matrix m n α) :\n    (M - N).map f = M.map f - N.map f :=\n  ext fun _ _ => hf _ _\n#align map_sub map_sub\n-/\n\n",
 "map_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- The scalar action via `has_mul.to_has_smul` is transformed by the same map as the elements\nof the matrix, when `f` preserves multiplication. -/\ntheorem map_smul' [Mul α] [Mul β] (f : α → β) (r : α) (A : matrix n n α) (hf : ∀ a₁ a₂, f (a₁ * a₂) = f a₁ * f a₂) :\n    («expr • » r A).map f = «expr • » (f r) (A.map f) :=\n  ext fun _ _ => hf _ _\n#align map_smul' map_smul'\n\n",
 "map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem map_smul [SMul R α] [SMul R β] (f : α → β) (r : R) (hf : ∀ a, f («expr • » r a) = «expr • » r (f a))\n    (M : matrix m n α) : («expr • » r M).map f = «expr • » r (M.map f) :=\n  ext fun _ _ => hf _\n#align map_smul map_smul\n\n",
 "map_op_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- The scalar action via `has_mul.to_has_opposite_smul` is transformed by the same map as the\nelements of the matrix, when `f` preserves multiplication. -/\ntheorem map_op_smul' [Mul α] [Mul β] (f : α → β) (r : α) (A : matrix n n α) (hf : ∀ a₁ a₂, f (a₁ * a₂) = f a₁ * f a₂) :\n    («expr • » (MulOpposite.op r) A).map f = «expr • » (MulOpposite.op (f r)) (A.map f) :=\n  ext fun _ _ => hf _ _\n#align map_op_smul' map_op_smul'\n\n",
 "map_one":
 "#print map_one /-\n@[simp]\ntheorem map_one [Zero β] [One β] (f : α → β) (h₀ : f 0 = 0) (h₁ : f 1 = 1) :\n    (1 : matrix n n α).map f = (1 : matrix n n β) := by\n  ext\n  simp only [one_apply, map_apply]\n  split_ifs <;> simp [h₀, h₁]\n#align map_one map_one\n-/\n\n",
 "map_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem map_mul_vec [NonAssocSemiring R] [NonAssocSemiring S] (f : «expr →+* » R S) (M : matrix m n R) (v : n → R)\n    (i : m) : f (M.mul_vec v i) = (M.map f).mul_vec (f ∘ v) i := by\n  simp only [matrix.mul_vec, matrix.map_apply, ring_hom.map_dot_product]\n#align map_mul_vec map_mul_vec\n\n",
 "map_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print map_mul /-\n@[simp]\ntheorem map_mul [fintype n] {L : matrix m n α} {M : matrix n o α} [NonAssocSemiring β] {f : «expr →+* » α β} :\n    (matrix.mul L M).map f = matrix.mul (L.map f) (M.map f) :=\n  by\n  ext\n  simp [mul_apply, ring_hom.map_sum]\n#align map_mul map_mul\n-/\n\n",
 "map_matrix_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n@[simp]\ntheorem map_matrix_trans (f : «expr ≃ₐ[ ] » α R β) (g : «expr ≃ₐ[ ] » β R γ) :\n    f.map_matrix.trans g.map_matrix = ((f.trans g).map_matrix : «expr ≃ₐ[ ] » (matrix m m α) R _) :=\n  rfl\n#align map_matrix_trans map_matrix_trans\n\n",
 "map_matrix_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n@[simp]\ntheorem map_matrix_symm (f : «expr ≃ₐ[ ] » α R β) :\n    f.map_matrix.symm = (f.symm.map_matrix : «expr ≃ₐ[ ] » (matrix m m β) R _) :=\n  rfl\n#align map_matrix_symm map_matrix_symm\n\n",
 "map_matrix_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n@[simp]\ntheorem map_matrix_refl : alg_equiv.refl.map_matrix = (alg_equiv.refl : «expr ≃ₐ[ ] » (matrix m m α) R _) :=\n  rfl\n#align map_matrix_refl map_matrix_refl\n\n",
 "map_matrix_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem map_matrix_mul (M : matrix m n α) (N : matrix n o α) (i : m) (j : o) (f : «expr →+* » α β) :\n    f (matrix.mul M N i j) = matrix.mul (M.map f) (N.map f) i j := by simp [matrix.mul_apply, ring_hom.map_sum]\n#align map_matrix_mul map_matrix_mul\n\n",
 "map_matrix_id":
 "@[simp]\ntheorem map_matrix_id : (alg_hom.id R α).map_matrix = alg_hom.id R (matrix m m α) :=\n  rfl\n#align map_matrix_id map_matrix_id\n\n",
 "map_matrix_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem map_matrix_comp (f : «expr →ₐ[ ] » β R γ) (g : «expr →ₐ[ ] » α R β) :\n    f.map_matrix.comp g.map_matrix = ((f.comp g).map_matrix : «expr →ₐ[ ] » (matrix m m α) R _) :=\n  rfl\n#align map_matrix_comp map_matrix_comp\n\n",
 "map_map":
 "@[simp]\ntheorem map_map {M : matrix m n α} {β γ : Type _} {f : α → β} {g : β → γ} : (M.map f).map g = M.map (g ∘ f) :=\n  by\n  ext\n  rfl\n#align map_map map_map\n\n",
 "map_injective":
 "theorem map_injective {f : α → β} (hf : function.injective f) : function.injective fun M : matrix m n α => M.map f :=\n  fun M N h => ext fun i j => hf <| ext_iff.mpr h i j\n#align map_injective map_injective\n\n",
 "map_id":
 "@[simp]\ntheorem map_id (M : matrix m n α) : M.map id = M := by\n  ext\n  rfl\n#align map_id map_id\n\n",
 "map_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\ntheorem map_dot_product [NonAssocSemiring R] [NonAssocSemiring S] (f : «expr →+* » R S) (v w : n → R) :\n    f (matrix.dot_product v w) = matrix.dot_product (f ∘ v) (f ∘ w) := by\n  simp only [matrix.dot_product, f.map_sum, f.map_mul]\n#align map_dot_product map_dot_product\n\n",
 "map_apply":
 "@[simp]\ntheorem map_apply {M : matrix m n α} {f : α → β} {i : m} {j : n} : M.map f i j = f (M i j) :=\n  rfl\n#align map_apply map_apply\n\n",
 "map_algebra_map":
 "@[simp]\ntheorem map_algebra_map (r : R) (f : α → β) (hf : f 0 = 0) (hf₂ : f (algebra_map R α r) = algebra_map R β r) :\n    (algebra_map R (matrix n n α) r).map f = algebra_map R (matrix n n β) r :=\n  by\n  rw [algebra_map_eq_diagonal, algebra_map_eq_diagonal, diagonal_map hf]\n  congr 1 with x\n  simp only [hf₂, pi.algebra_map_apply]\n#align map_algebra_map map_algebra_map\n\n",
 "map_add":
 "#print map_add /-\nprotected theorem map_add [Add α] [Add β] (f : α → β) (hf : ∀ a₁ a₂, f (a₁ + a₂) = f a₁ + f a₂) (M N : matrix m n α) :\n    (M + N).map f = M.map f + N.map f :=\n  ext fun _ _ => hf _ _\n#align map_add map_add\n-/\n\n",
 "ext_iff":
 "/-\nCopyright (c) 2018 Ellen Arlt. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Ellen Arlt, Blair Shi, Sean Leather, Mario Carneiro, Johan Commelin, Lu-Ming Zhang\n-/\ntheorem ext_iff : (∀ i j, M i j = N i j) ↔ M = N :=\n  ⟨fun h => funext fun i => funext <| h i, fun h => by simp [h]⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext : (∀ i j, M i j = N i j) → M = N :=\n  ext_iff.mp\n#align ext ext\n\n",
 "dot_product_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_zero' : (matrix.dot_product v fun _ => 0) = 0 :=\n  dot_product_zero v\n#align dot_product_zero' dot_product_zero'\n\n",
 "dot_product_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_zero : matrix.dot_product v 0 = 0 := by simp [dot_product]\n#align dot_product_zero dot_product_zero\n\n",
 "dot_product_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_sub : matrix.dot_product u (v - w) = matrix.dot_product u v - matrix.dot_product u w := by\n  simp [sub_eq_add_neg]\n#align dot_product_sub dot_product_sub\n\n",
 "dot_product_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\ntheorem dot_product_star : matrix.dot_product v (star w) = star (matrix.dot_product w (star v)) := by simp [dot_product]\n#align dot_product_star dot_product_star\n\n",
 "dot_product_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_smul [SMulCommClass R α α] (x : R) (v w : m → α) :\n    matrix.dot_product v («expr • » x w) = «expr • » x (matrix.dot_product v w) := by\n  simp [dot_product, finset.smul_sum, mul_smul_comm]\n#align dot_product_smul dot_product_smul\n\n",
 "dot_product_single":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (j «expr ≠ » i) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_single (x : α) (i : m) : matrix.dot_product v (Pi.single i x) = v i * x :=\n  by\n  have : ∀ (j) (_ : j ≠ i), v j * Pi.single i x j = 0 := fun j hij => by simp [Pi.single_eq_of_ne hij]\n  convert finset.sum_eq_single i (fun j _ => this j) _ using 1 <;> simp\n#align dot_product_single dot_product_single\n\n",
 "dot_product_punit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_punit [add_comm_monoid α] [Mul α] (v w : PUnit → α) : matrix.dot_product v w = v ⟨⟩ * w ⟨⟩ := by\n  simp [dot_product]\n#align dot_product_punit dot_product_punit\n\n",
 "dot_product_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_neg : matrix.dot_product v (-w) = -matrix.dot_product v w := by simp [dot_product]\n#align dot_product_neg dot_product_neg\n\n",
 "dot_product_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/-- Associate the dot product of `mul_vec` to the left. -/\ntheorem dot_product_mul_vec [fintype n] [fintype m] [NonUnitalSemiring R] (v : m → R) (A : matrix m n R) (w : n → R) :\n    matrix.dot_product v (mul_vec A w) = matrix.dot_product (vec_mul v A) w := by\n  simp only [dot_product, vec_mul, mul_vec, finset.mul_sum, finset.sum_mul, mul_assoc] <;> exact finset.sum_comm\n#align dot_product_mul_vec dot_product_mul_vec\n\n",
 "dot_product_diagonal'":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (j «expr ≠ » i) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_diagonal' (i : m) : (matrix.dot_product v fun j => diagonal w j i) = v i * w i :=\n  by\n  have : ∀ (j) (_ : j ≠ i), v j * diagonal w j i = 0 := fun j hij => by simp [diagonal_apply_ne _ hij]\n  convert finset.sum_eq_single i (fun j _ => this j) _ using 1 <;> simp\n#align dot_product_diagonal' dot_product_diagonal'\n\n",
 "dot_product_diagonal":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (j «expr ≠ » i) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_diagonal (i : m) : matrix.dot_product v (diagonal w i) = v i * w i :=\n  by\n  have : ∀ (j) (_ : j ≠ i), v j * diagonal w i j = 0 := fun j hij => by simp [diagonal_apply_ne' _ hij]\n  convert finset.sum_eq_single i (fun j _ => this j) _ using 1 <;> simp\n#align dot_product_diagonal dot_product_diagonal\n\n",
 "dot_product_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\ntheorem dot_product_comm [add_comm_monoid α] [comm_semigroup α] (v w : m → α) :\n    matrix.dot_product v w = matrix.dot_product w v := by simp_rw [dot_product, mul_comm]\n#align dot_product_comm dot_product_comm\n\n",
 "dot_product_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- The precedence of 72 comes immediately after ` • ` for `has_smul.smul`,\n   so that `r₁ • a ⬝ᵥ r₂ • b` is parsed as `(r₁ • a) ⬝ᵥ (r₂ • b)` here. -/\ntheorem dot_product_assoc [NonUnitalSemiring α] (u : m → α) (w : n → α) (v : matrix m n α) :\n    matrix.dot_product (fun j => matrix.dot_product u fun i => v i j) w =\n      matrix.dot_product u fun i => matrix.dot_product (v i) w :=\n  by simpa [dot_product, finset.mul_sum, finset.sum_mul, mul_assoc] using finset.sum_comm\n#align dot_product_assoc dot_product_assoc\n\n",
 "dot_product_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem dot_product_add : matrix.dot_product u (v + w) = matrix.dot_product u v + matrix.dot_product u w := by\n  simp [dot_product, mul_add, finset.sum_add_distrib]\n#align dot_product_add dot_product_add\n\n",
 "diagonal_zero":
 "@[simp]\ntheorem diagonal_zero [Zero α] : (diagonal fun _ => 0 : matrix n n α) = 0 :=\n  by\n  ext\n  simp [diagonal]\n#align diagonal_zero diagonal_zero\n\n",
 "diagonal_update_row_single":
 "theorem diagonal_update_row_single [decidable_eq n] [Zero α] (v : n → α) (i : n) (x : α) :\n    (diagonal v).update_row i (Pi.single i x) = diagonal (function.update v i x) := by\n  rw [← diagonal_transpose, update_row_transpose, diagonal_update_column_single, diagonal_transpose]\n#align diagonal_update_row_single diagonal_update_row_single\n\n",
 "diagonal_update_column_single":
 "theorem diagonal_update_column_single [decidable_eq n] [Zero α] (v : n → α) (i : n) (x : α) :\n    (diagonal v).update_column i (Pi.single i x) = diagonal (function.update v i x) :=\n  by\n  ext (j k)\n  obtain rfl | hjk := eq_or_ne j k\n  · rw [diagonal_apply_eq]\n    obtain rfl | hji := eq_or_ne j i\n    · rw [update_column_self, Pi.single_eq_same, function.update_same]\n    · rw [update_column_ne hji, diagonal_apply_eq, function.update_noteq hji]\n  · rw [diagonal_apply_ne _ hjk]\n    obtain rfl | hki := eq_or_ne k i\n    · rw [update_column_self, Pi.single_eq_of_ne hjk]\n    · rw [update_column_ne hki, diagonal_apply_ne _ hjk]\n#align diagonal_update_column_single diagonal_update_column_single\n\n",
 "diagonal_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem diagonal_transpose [Zero α] (v : n → α) : matrix.transpose (diagonal v) = diagonal v :=\n  by\n  ext (i j)\n  by_cases h : i = j\n  · simp [h, transpose]\n  · simp [h, transpose, diagonal_apply_ne' _ h]\n#align diagonal_transpose diagonal_transpose\n\n",
 "diagonal_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem diagonal_smul [monoid R] [add_monoid α] [DistribMulAction R α] (r : R) (d : n → α) :\n    diagonal («expr • » r d) = «expr • » r (diagonal d) := by ext (i j) <;> by_cases h : i = j <;> simp [h]\n#align diagonal_smul diagonal_smul\n\n",
 "diagonal_pow":
 "theorem diagonal_pow [fintype n] [decidable_eq n] (v : n → α) (k : ℕ) : diagonal v ^ k = diagonal (v ^ k) :=\n  (map_pow (diagonal_ring_hom n α) v k).symm\n#align diagonal_pow diagonal_pow\n\n",
 "diagonal_one":
 "@[simp]\ntheorem diagonal_one : (diagonal fun _ => 1 : matrix n n α) = 1 :=\n  rfl\n#align diagonal_one diagonal_one\n\n",
 "diagonal_neg":
 "@[simp]\ntheorem diagonal_neg [decidable_eq n] [add_group α] (d : n → α) : -diagonal d = diagonal fun i => -d i :=\n  ((diagonal_add_monoid_hom n α).map_neg d).symm\n#align diagonal_neg diagonal_neg\n\n",
 "diagonal_mul_vec_single":
 "@[simp]\ntheorem diagonal_mul_vec_single [fintype n] [decidable_eq n] [NonUnitalNonAssocSemiring R] (v : n → R) (j : n) (x : R) :\n    (diagonal v).mul_vec (Pi.single j x) = Pi.single j (v j * x) :=\n  by\n  ext i\n  rw [mul_vec_diagonal]\n  exact Pi.apply_single (fun i x => v i * x) (fun i => mul_zero _) j x i\n#align diagonal_mul_vec_single diagonal_mul_vec_single\n\n",
 "diagonal_mul_diagonal'":
 "theorem diagonal_mul_diagonal' [fintype n] [decidable_eq n] (d₁ d₂ : n → α) :\n    diagonal d₁ * diagonal d₂ = diagonal fun i => d₁ i * d₂ i :=\n  diagonal_mul_diagonal _ _\n#align diagonal_mul_diagonal' diagonal_mul_diagonal'\n\n",
 "diagonal_mul_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem diagonal_mul_diagonal [fintype n] [decidable_eq n] (d₁ d₂ : n → α) :\n    matrix.mul (diagonal d₁) (diagonal d₂) = diagonal fun i => d₁ i * d₂ i := by\n  ext (i j) <;> by_cases i = j <;> simp [h]\n#align diagonal_mul_diagonal diagonal_mul_diagonal\n\n",
 "diagonal_mul":
 "@[simp]\ntheorem diagonal_mul [fintype m] [decidable_eq m] (d : m → α) (M : matrix m n α) (i j) :\n    (diagonal d).mul M i j = d i * M i j :=\n  diagonal_dot_product _ _ _\n#align diagonal_mul diagonal_mul\n\n",
 "diagonal_map":
 "@[simp]\ntheorem diagonal_map [Zero α] [Zero β] {f : α → β} (h : f 0 = 0) {d : n → α} :\n    (diagonal d).map f = diagonal fun m => f (d m) := by\n  ext\n  simp only [diagonal, map_apply]\n  split_ifs <;> simp [h]\n#align diagonal_map diagonal_map\n\n",
 "diagonal_injective":
 "theorem diagonal_injective [Zero α] : function.injective (diagonal : (n → α) → matrix n n α) := fun d₁ d₂ h =>\n  funext fun i => by simpa using matrix.ext_iff.mpr h i i\n#align diagonal_injective diagonal_injective\n\n",
 "diagonal_eq_diagonal_iff":
 "@[simp]\ntheorem diagonal_eq_diagonal_iff [Zero α] {d₁ d₂ : n → α} : diagonal d₁ = diagonal d₂ ↔ ∀ i, d₁ i = d₂ i :=\n  ⟨fun h i => by simpa using congr_arg (fun m : matrix n n α => m i i) h, fun h => by rw [show d₁ = d₂ from funext h]⟩\n#align diagonal_eq_diagonal_iff diagonal_eq_diagonal_iff\n\n",
 "diagonal_dot_product":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (j «expr ≠ » i) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem diagonal_dot_product (i : m) : matrix.dot_product (diagonal v i) w = v i * w i :=\n  by\n  have : ∀ (j) (_ : j ≠ i), diagonal v i j * w j = 0 := fun j hij => by simp [diagonal_apply_ne' _ hij]\n  convert finset.sum_eq_single i (fun j _ => this j) _ using 1 <;> simp\n#align diagonal_dot_product diagonal_dot_product\n\n",
 "diagonal_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem diagonal_conj_transpose [add_monoid α] [StarAddMonoid α] (v : n → α) :\n    matrix.conj_transpose (diagonal v) = diagonal (star v) :=\n  by\n  rw [conj_transpose, diagonal_transpose, diagonal_map (star_zero _)]\n  rfl\n#align diagonal_conj_transpose diagonal_conj_transpose\n\n",
 "diagonal_apply_ne'":
 "theorem diagonal_apply_ne' [Zero α] (d : n → α) {i j : n} (h : j ≠ i) : (diagonal d) i j = 0 :=\n  diagonal_apply_ne d h.symm\n#align diagonal_apply_ne' diagonal_apply_ne'\n\n",
 "diagonal_apply_ne":
 "@[simp]\ntheorem diagonal_apply_ne [Zero α] (d : n → α) {i j : n} (h : i ≠ j) : (diagonal d) i j = 0 := by simp [diagonal, h]\n#align diagonal_apply_ne diagonal_apply_ne\n\n",
 "diagonal_apply_eq":
 "@[simp]\ntheorem diagonal_apply_eq [Zero α] (d : n → α) (i : n) : (diagonal d) i i = d i := by simp [diagonal]\n#align diagonal_apply_eq diagonal_apply_eq\n\n",
 "diagonal_add":
 "@[simp]\ntheorem diagonal_add [add_zero_class α] (d₁ d₂ : n → α) : diagonal d₁ + diagonal d₂ = diagonal fun i => d₁ i + d₂ i :=\n  by ext (i j) <;> by_cases h : i = j <;> simp [h]\n#align diagonal_add diagonal_add\n\n",
 "diag_zero":
 "@[simp]\ntheorem diag_zero [Zero α] : diag (0 : matrix n n α) = 0 :=\n  rfl\n#align diag_zero diag_zero\n\n",
 "diag_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem diag_transpose (A : matrix n n α) : diag (matrix.transpose A) = diag A :=\n  rfl\n#align diag_transpose diag_transpose\n\n",
 "diag_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem diag_sum {ι} [add_comm_monoid α] (s : Finset ι) (f : ι → matrix n n α) :\n    diag (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (diag (f i)) :=\n  map_sum (diag_add_monoid_hom n α) f s\n#align diag_sum diag_sum\n\n",
 "diag_submatrix":
 "theorem diag_submatrix (A : matrix m m α) (e : l → m) : diag (A.submatrix e e) = A.diag ∘ e :=\n  rfl\n#align diag_submatrix diag_submatrix\n\n",
 "diag_sub":
 "@[simp]\ntheorem diag_sub [Sub α] (A B : matrix n n α) : diag (A - B) = diag A - diag B :=\n  rfl\n#align diag_sub diag_sub\n\n",
 "diag_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem diag_smul [SMul R α] (r : R) (A : matrix n n α) : diag («expr • » r A) = «expr • » r (diag A) :=\n  rfl\n#align diag_smul diag_smul\n\n",
 "diag_one":
 "@[simp]\ntheorem diag_one [decidable_eq n] [Zero α] [One α] : diag (1 : matrix n n α) = 1 :=\n  diag_diagonal _\n#align diag_one diag_one\n\n",
 "diag_neg":
 "@[simp]\ntheorem diag_neg [Neg α] (A : matrix n n α) : diag (-A) = -diag A :=\n  rfl\n#align diag_neg diag_neg\n\n",
 "diag_multiset_sum":
 "@[simp]\ntheorem diag_multiset_sum [add_comm_monoid α] (s : Multiset (matrix n n α)) : diag s.sum = (s.map diag).sum :=\n  map_multiset_sum (diag_add_monoid_hom n α) s\n#align diag_multiset_sum diag_multiset_sum\n\n",
 "diag_map":
 "theorem diag_map {f : α → β} {A : matrix n n α} : diag (A.map f) = f ∘ diag A :=\n  rfl\n#align diag_map diag_map\n\n",
 "diag_list_sum":
 "@[simp]\ntheorem diag_list_sum [add_monoid α] (l : list (matrix n n α)) : diag l.sum = (l.map diag).sum :=\n  map_list_sum (diag_add_monoid_hom n α) l\n#align diag_list_sum diag_list_sum\n\n",
 "diag_diagonal":
 "@[simp]\ntheorem diag_diagonal [decidable_eq n] [Zero α] (a : n → α) : diag (diagonal a) = a :=\n  funext <| @diagonal_apply_eq _ _ _ _ a\n#align diag_diagonal diag_diagonal\n\n",
 "diag_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem diag_conj_transpose [add_monoid α] [StarAddMonoid α] (A : matrix n n α) :\n    diag (matrix.conj_transpose A) = star (diag A) :=\n  rfl\n#align diag_conj_transpose diag_conj_transpose\n\n",
 "diag_col_mul_row":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem diag_col_mul_row (a b : n → α) : diag (matrix.mul (col a) (row b)) = a * b :=\n  by\n  ext\n  simp [matrix.mul_apply, col, row]\n#align diag_col_mul_row diag_col_mul_row\n\n",
 "diag_add":
 "@[simp]\ntheorem diag_add [Add α] (A B : matrix n n α) : diag (A + B) = diag A + diag B :=\n  rfl\n#align diag_add diag_add\n\n",
 "conj_transpose_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_zsmul [add_group α] [StarAddMonoid α] (c : ℤ) (M : matrix m n α) :\n    matrix.conj_transpose («expr • » c M) = «expr • » c (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_zsmul conj_transpose_zsmul\n\n",
 "conj_transpose_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_zero [add_monoid α] [StarAddMonoid α] : matrix.conj_transpose (0 : matrix m n α) = 0 :=\n  matrix.ext <| by simp\n#align conj_transpose_zero conj_transpose_zero\n\n",
 "conj_transpose_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_sum [add_comm_monoid α] [StarAddMonoid α] {ι : Type _} (s : Finset ι) (M : ι → matrix m n α) :\n    matrix.conj_transpose\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (M i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (matrix.conj_transpose (M i)) :=\n  (conj_transpose_add_equiv m n α).to_add_monoid_hom.map_sum _ s\n#align conj_transpose_sum conj_transpose_sum\n\n",
 "conj_transpose_submatrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_submatrix [Star α] (A : matrix m n α) (r_reindex : l → m) (c_reindex : o → n) :\n    matrix.conj_transpose (A.submatrix r_reindex c_reindex) = (matrix.conj_transpose A).submatrix c_reindex r_reindex :=\n  ext fun _ _ => rfl\n#align conj_transpose_submatrix conj_transpose_submatrix\n\n",
 "conj_transpose_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_sub [add_group α] [StarAddMonoid α] (M N : matrix m n α) :\n    matrix.conj_transpose (M - N) = matrix.conj_transpose M - matrix.conj_transpose N :=\n  matrix.ext <| by simp\n#align conj_transpose_sub conj_transpose_sub\n\n",
 "conj_transpose_smul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_smul_self [semigroup α] [StarSemigroup α] (c : α) (M : matrix m n α) :\n    matrix.conj_transpose («expr • » c M) = «expr • » (MulOpposite.op (star c)) (matrix.conj_transpose M) :=\n  conj_transpose_smul_non_comm c M star_mul\n#align conj_transpose_smul_self conj_transpose_smul_self\n\n",
 "conj_transpose_smul_non_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_smul_non_comm [Star R] [Star α] [SMul R α] [SMul («expr ᵐᵒᵖ» R) α] (c : R) (M : matrix m n α)\n    (h : ∀ (r : R) (a : α), star («expr • » r a) = «expr • » (MulOpposite.op (star r)) (star a)) :\n    matrix.conj_transpose («expr • » c M) = «expr • » (MulOpposite.op (star c)) (matrix.conj_transpose M) :=\n  matrix.ext <| by simp [h]\n#align conj_transpose_smul_non_comm conj_transpose_smul_non_comm\n\n",
 "conj_transpose_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/-- Note that `star_module` is quite a strong requirement; as such we also provide the following\nvariants which this lemma would not apply to:\n* `matrix.conj_transpose_smul_non_comm`\n* `matrix.conj_transpose_nsmul`\n* `matrix.conj_transpose_zsmul`\n* `matrix.conj_transpose_nat_cast_smul`\n* `matrix.conj_transpose_int_cast_smul`\n* `matrix.conj_transpose_inv_nat_cast_smul`\n* `matrix.conj_transpose_inv_int_cast_smul`\n* `matrix.conj_transpose_rat_smul`\n* `matrix.conj_transpose_rat_cast_smul`\n-/\n@[simp]\ntheorem conj_transpose_smul [Star R] [Star α] [SMul R α] [StarModule R α] (c : R) (M : matrix m n α) :\n    matrix.conj_transpose («expr • » c M) = «expr • » (star c) (matrix.conj_transpose M) :=\n  matrix.ext fun i j => star_smul _ _\n#align conj_transpose_smul conj_transpose_smul\n\n",
 "conj_transpose_row":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_row [Star α] (v : m → α) : matrix.conj_transpose (row v) = col (star v) :=\n  by\n  ext\n  rfl\n#align conj_transpose_row conj_transpose_row\n\n",
 "conj_transpose_reindex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_reindex [Star α] (eₘ : «expr ≃ » m l) (eₙ : «expr ≃ » n o) (M : matrix m n α) :\n    matrix.conj_transpose (reindex eₘ eₙ M) = reindex eₙ eₘ (matrix.conj_transpose M) :=\n  rfl\n#align conj_transpose_reindex conj_transpose_reindex\n\n",
 "conj_transpose_rat_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_rat_smul [add_comm_group α] [StarAddMonoid α] [Module (exprℚ) α] (c : exprℚ) (M : matrix m n α) :\n    matrix.conj_transpose («expr • » c M) = «expr • » c (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_rat_smul conj_transpose_rat_smul\n\n",
 "conj_transpose_rat_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_rat_cast_smul [DivisionRing R] [add_comm_group α] [StarAddMonoid α] [Module R α] (c : exprℚ)\n    (M : matrix m n α) : matrix.conj_transpose («expr • » (c : R) M) = «expr • » (c : R) (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_rat_cast_smul conj_transpose_rat_cast_smul\n\n",
 "conj_transpose_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_pow [Semiring α] [StarRing α] [fintype m] [decidable_eq m] (M : matrix m m α) (k : ℕ) :\n    matrix.conj_transpose (M ^ k) = matrix.conj_transpose M ^ k :=\n  mul_opposite.op_injective <| map_pow (conj_transpose_ring_equiv m α) M k\n#align conj_transpose_pow conj_transpose_pow\n\n",
 "conj_transpose_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_one [decidable_eq n] [Semiring α] [StarRing α] : matrix.conj_transpose (1 : matrix n n α) = 1 :=\n  by simp [conj_transpose]\n#align conj_transpose_one conj_transpose_one\n\n",
 "conj_transpose_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_nsmul [add_monoid α] [StarAddMonoid α] (c : ℕ) (M : matrix m n α) :\n    matrix.conj_transpose («expr • » c M) = «expr • » c (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_nsmul conj_transpose_nsmul\n\n",
 "conj_transpose_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_neg [add_group α] [StarAddMonoid α] (M : matrix m n α) :\n    matrix.conj_transpose (-M) = -matrix.conj_transpose M :=\n  matrix.ext <| by simp\n#align conj_transpose_neg conj_transpose_neg\n\n",
 "conj_transpose_nat_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_nat_cast_smul [Semiring R] [add_comm_monoid α] [StarAddMonoid α] [Module R α] (c : ℕ)\n    (M : matrix m n α) : matrix.conj_transpose («expr • » (c : R) M) = «expr • » (c : R) (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_nat_cast_smul conj_transpose_nat_cast_smul\n\n",
 "conj_transpose_multiset_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_multiset_sum [add_comm_monoid α] [StarAddMonoid α] (s : Multiset (matrix m n α)) :\n    matrix.conj_transpose s.sum = (s.map conj_transpose).sum :=\n  (conj_transpose_add_equiv m n α).to_add_monoid_hom.map_multiset_sum s\n#align conj_transpose_multiset_sum conj_transpose_multiset_sum\n\n",
 "conj_transpose_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_mul [fintype n] [NonUnitalSemiring α] [StarRing α] (M : matrix m n α) (N : matrix n l α) :\n    matrix.conj_transpose (matrix.mul M N) = matrix.mul (matrix.conj_transpose N) (matrix.conj_transpose M) :=\n  matrix.ext <| by simp [mul_apply]\n#align conj_transpose_mul conj_transpose_mul\n\n",
 "conj_transpose_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_map [Star α] [Star β] {A : matrix m n α} (f : α → β) (hf : function.semiconj f star star) :\n    (matrix.conj_transpose A).map f = matrix.conj_transpose (A.map f) :=\n  matrix.ext fun i j => hf _\n#align conj_transpose_map conj_transpose_map\n\n",
 "conj_transpose_list_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_list_sum [add_monoid α] [StarAddMonoid α] (l : list (matrix m n α)) :\n    matrix.conj_transpose l.sum = (l.map conj_transpose).sum :=\n  (conj_transpose_add_equiv m n α).to_add_monoid_hom.map_list_sum l\n#align conj_transpose_list_sum conj_transpose_list_sum\n\n",
 "conj_transpose_list_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_list_prod [Semiring α] [StarRing α] [fintype m] [decidable_eq m] (l : list (matrix m m α)) :\n    matrix.conj_transpose l.prod = (l.map conj_transpose).reverse.prod :=\n  (conj_transpose_ring_equiv m α).unop_map_list_prod l\n#align conj_transpose_list_prod conj_transpose_list_prod\n\n",
 "conj_transpose_linear_equiv_symm":
 "@[simp]\ntheorem conj_transpose_linear_equiv_symm [CommSemiring R] [StarRing R] [add_comm_monoid α] [StarAddMonoid α]\n    [Module R α] [StarModule R α] : (conj_transpose_linear_equiv m n R α).symm = conj_transpose_linear_equiv n m R α :=\n  rfl\n#align conj_transpose_linear_equiv_symm conj_transpose_linear_equiv_symm\n\n",
 "conj_transpose_inv_nat_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_inv_nat_cast_smul [DivisionRing R] [add_comm_group α] [StarAddMonoid α] [Module R α] (c : ℕ)\n    (M : matrix m n α) :\n    matrix.conj_transpose («expr • » (c : R)⁻¹ M) = «expr • » (c : R)⁻¹ (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_inv_nat_cast_smul conj_transpose_inv_nat_cast_smul\n\n",
 "conj_transpose_inv_int_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_inv_int_cast_smul [DivisionRing R] [add_comm_group α] [StarAddMonoid α] [Module R α] (c : ℤ)\n    (M : matrix m n α) :\n    matrix.conj_transpose («expr • » (c : R)⁻¹ M) = «expr • » (c : R)⁻¹ (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_inv_int_cast_smul conj_transpose_inv_int_cast_smul\n\n",
 "conj_transpose_int_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_int_cast_smul [Ring R] [add_comm_group α] [StarAddMonoid α] [Module R α] (c : ℤ)\n    (M : matrix m n α) : matrix.conj_transpose («expr • » (c : R) M) = «expr • » (c : R) (matrix.conj_transpose M) :=\n  matrix.ext <| by simp\n#align conj_transpose_int_cast_smul conj_transpose_int_cast_smul\n\n",
 "conj_transpose_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_conj_transpose [InvolutiveStar α] (M : matrix m n α) :\n    matrix.conj_transpose (matrix.conj_transpose M) = M :=\n  matrix.ext <| by simp\n#align conj_transpose_conj_transpose conj_transpose_conj_transpose\n\n",
 "conj_transpose_col":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_col [Star α] (v : m → α) : matrix.conj_transpose (col v) = row (star v) :=\n  by\n  ext\n  rfl\n#align conj_transpose_col conj_transpose_col\n\n",
 "conj_transpose_apply":
 "/-- Tell `simp` what the entries are in a conjugate transposed matrix.\n\n  Compare with `mul_apply`, `diagonal_apply_eq`, etc.\n-/\n@[simp]\ntheorem conj_transpose_apply [Star α] (M : matrix m n α) (i j) : M.conj_transpose j i = star (M i j) :=\n  rfl\n#align conj_transpose_apply conj_transpose_apply\n\n",
 "conj_transpose_add_equiv_symm":
 "@[simp]\ntheorem conj_transpose_add_equiv_symm [add_monoid α] [StarAddMonoid α] :\n    (conj_transpose_add_equiv m n α).symm = conj_transpose_add_equiv n m α :=\n  rfl\n#align conj_transpose_add_equiv_symm conj_transpose_add_equiv_symm\n\n",
 "conj_transpose_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem conj_transpose_add [add_monoid α] [StarAddMonoid α] (M N : matrix m n α) :\n    matrix.conj_transpose (M + N) = matrix.conj_transpose M + matrix.conj_transpose N :=\n  matrix.ext <| by simp\n#align conj_transpose_add conj_transpose_add\n\n",
 "commute":
 "theorem scalar.commute [decidable_eq n] (r : α) (M : matrix n n α) : Commute (scalar n r) M := by\n  simp [Commute, SemiconjBy]\n#align scalar.commute scalar.commute\n\n",
 "col_vec_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem col_vec_mul [fintype m] [NonUnitalNonAssocSemiring α] (M : matrix m n α) (v : m → α) :\n    matrix.col (matrix.vec_mul v M) = matrix.transpose (matrix.mul (matrix.row v) M) :=\n  by\n  ext\n  rfl\n#align col_vec_mul col_vec_mul\n\n",
 "col_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem col_smul [SMul R α] (x : R) (v : m → α) : col («expr • » x v) = «expr • » x (col v) :=\n  by\n  ext\n  rfl\n#align col_smul col_smul\n\n",
 "col_mul_vec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem col_mul_vec [fintype n] [NonUnitalNonAssocSemiring α] (M : matrix m n α) (v : n → α) :\n    matrix.col (matrix.mul_vec M v) = matrix.mul M (matrix.col v) :=\n  by\n  ext\n  rfl\n#align col_mul_vec col_mul_vec\n\n",
 "col_apply":
 "@[simp]\ntheorem col_apply (v : m → α) (i j) : matrix.col v i j = v i :=\n  rfl\n#align col_apply col_apply\n\n",
 "col_add":
 "@[simp]\ntheorem col_add [Add α] (v w : m → α) : col (v + w) = col v + col w :=\n  by\n  ext\n  rfl\n#align col_add col_add\n\n",
 "coe_scalar":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_scalar : (scalar n : α → matrix n n α) = fun a => «expr • » a 1 :=\n  rfl\n#align coe_scalar coe_scalar\n\n",
 "bit1_apply_ne":
 "@[simp]\ntheorem bit1_apply_ne (M : matrix n n α) {i j : n} (h : i ≠ j) : (bit1 M) i j = bit0 (M i j) := by simp [bit1_apply, h]\n#align bit1_apply_ne bit1_apply_ne\n\n",
 "bit1_apply_eq":
 "@[simp]\ntheorem bit1_apply_eq (M : matrix n n α) (i : n) : (bit1 M) i i = bit1 (M i i) := by simp [bit1_apply]\n#align bit1_apply_eq bit1_apply_eq\n\n",
 "bit1_apply":
 "theorem bit1_apply (M : matrix n n α) (i : n) (j : n) : (bit1 M) i j = if i = j then bit1 (M i j) else bit0 (M i j) :=\n  by dsimp [bit1] <;> by_cases h : i = j <;> simp [h]\n#align bit1_apply bit1_apply\n\n",
 "bit0_apply":
 "-- deal with decidable_eq\n@[simp]\ntheorem bit0_apply [Add α] (M : matrix m m α) (i : m) (j : m) : (bit0 M) i j = bit0 (M i j) :=\n  rfl\n#align bit0_apply bit0_apply\n\n",
 "algebra_map_matrix_apply":
 "theorem algebra_map_matrix_apply {r : R} {i j : n} :\n    algebra_map R (matrix n n α) r i j = if i = j then algebra_map R α r else 0 :=\n  by\n  dsimp [algebra_map, algebra.to_ring_hom, matrix.scalar]\n  split_ifs with h <;> simp [h, matrix.one_apply_ne]\n#align algebra_map_matrix_apply algebra_map_matrix_apply\n\n",
 "algebra_map_eq_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem algebra_map_eq_smul (r : R) : algebra_map R (matrix n n R) r = «expr • » r (1 : matrix n n R) :=\n  rfl\n#align algebra_map_eq_smul algebra_map_eq_smul\n\n",
 "algebra_map_eq_diagonal_ring_hom":
 "theorem algebra_map_eq_diagonal_ring_hom :\n    algebra_map R (matrix n n α) = (diagonal_ring_hom n α).comp (algebra_map R _) :=\n  RingHom.ext algebra_map_eq_diagonal\n#align algebra_map_eq_diagonal_ring_hom algebra_map_eq_diagonal_ring_hom\n\n",
 "algebra_map_eq_diagonal":
 "theorem algebra_map_eq_diagonal (r : R) : algebra_map R (matrix n n α) r = diagonal (algebra_map R (n → α) r) :=\n  matrix.ext fun i j => algebra_map_matrix_apply\n#align algebra_map_eq_diagonal algebra_map_eq_diagonal\n\n",
 "add_vec_mul":
 "theorem add_vec_mul [fintype m] (A : matrix m n α) (x y : m → α) : vec_mul (x + y) A = vec_mul x A + vec_mul y A :=\n  by\n  ext\n  apply add_dot_product\n#align add_vec_mul add_vec_mul\n\n",
 "add_mul_vec":
 "theorem add_mul_vec [fintype n] (A B : matrix m n α) (x : n → α) : (A + B).mul_vec x = A.mul_vec x + B.mul_vec x :=\n  by\n  ext\n  apply add_dot_product\n#align add_mul_vec add_mul_vec\n\n",
 "add_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n#print add_mul /-\nprotected theorem add_mul [fintype m] (L M : matrix l m α) (N : matrix m n α) :\n    matrix.mul (L + M) N = matrix.mul L N + matrix.mul M N :=\n  by\n  ext (i j)\n  apply add_dot_product\n#align add_mul add_mul\n-/\n\n",
 "add_dot_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n@[simp]\ntheorem add_dot_product : matrix.dot_product (u + v) w = matrix.dot_product u w + matrix.dot_product v w := by\n  simp [dot_product, add_mul, finset.sum_add_distrib]\n#align add_dot_product add_dot_product\n\n"}