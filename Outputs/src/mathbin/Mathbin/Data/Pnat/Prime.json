{"symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[symm]\ntheorem coprime.symm {m n : «exprℕ+»} : m.coprime n → n.coprime m :=\n  by\n  unfold coprime\n  rw [gcd_comm]\n  simp\n#align coprime.symm coprime.symm\n\n",
 "prime_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem prime_two : (2 : «exprℕ+»).prime :=\n  Nat.prime_two\n#align prime_two prime_two\n\n",
 "pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.pow {m n : «exprℕ+»} (k l : ℕ) (h : m.coprime n) : (m ^ k).coprime (n ^ l) := by\n  rw [← coprime_coe] at *; simp only [pow_coe]; apply nat.coprime.pow; apply h\n#align coprime.pow coprime.pow\n\n",
 "one_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem prime.one_lt {p : «exprℕ+»} : p.prime → 1 < p :=\n  Nat.Prime.one_lt\n#align prime.one_lt prime.one_lt\n\n",
 "one_gcd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem one_gcd {n : «exprℕ+»} : gcd 1 n = 1 :=\n  by\n  rw [← gcd_eq_left_iff_dvd]\n  apply one_dvd\n#align one_gcd one_gcd\n\n",
 "one_coprime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem one_coprime {n : «exprℕ+»} : (1 : «exprℕ+»).coprime n :=\n  one_gcd\n#align one_coprime one_coprime\n\n",
 "not_prime_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print not_prime_one /-\n@[simp]\ntheorem not_prime_one : ¬(1 : «exprℕ+»).prime :=\n  Nat.not_prime_one\n#align not_prime_one not_prime_one\n-/\n\n",
 "not_dvd_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print Prime.not_dvd_one /-\ntheorem Prime.not_dvd_one {p : «exprℕ+»} : p.prime → ¬p ∣ 1 := fun pp : p.prime =>\n  by\n  rw [dvd_iff]\n  apply Nat.Prime.not_dvd_one pp\n#align prime.not_dvd_one Prime.not_dvd_one\n-/\n\n",
 "ne_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print Prime.ne_one /-\ntheorem Prime.ne_one {p : «exprℕ+»} : p.prime → p ≠ 1 :=\n  by\n  intro pp\n  intro contra\n  apply Nat.Prime.ne_one pp\n  rw [PNat.coe_eq_one_iff]\n  apply contra\n#align prime.ne_one Prime.ne_one\n-/\n\n",
 "mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.mul_right {k m n : «exprℕ+»} : k.coprime m → k.coprime n → k.coprime (m * n) :=\n  by\n  repeat' rw [← coprime_coe]\n  rw [mul_coe]\n  apply nat.coprime.mul_right\n#align coprime.mul_right coprime.mul_right\n\n",
 "mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.mul {k m n : «exprℕ+»} : m.coprime k → n.coprime k → (m * n).coprime k :=\n  by\n  repeat' rw [← coprime_coe]\n  rw [mul_coe]\n  apply nat.coprime.mul\n#align coprime.mul coprime.mul\n\n",
 "lcm_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print lcm_dvd /-\ntheorem lcm_dvd {m n k : «exprℕ+»} (hm : m ∣ k) (hn : n ∣ k) : lcm m n ∣ k :=\n  dvd_iff.2 (@nat.lcm_dvd (m : ℕ) (n : ℕ) (k : ℕ) (dvd_iff.1 hm) (dvd_iff.1 hn))\n#align lcm_dvd lcm_dvd\n-/\n\n",
 "lcm_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp, norm_cast]\ntheorem lcm_coe (n m : «exprℕ+») : (lcm n m : ℕ) = nat.lcm n m :=\n  rfl\n#align lcm_coe lcm_coe\n\n",
 "gcd_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem gcd_one {n : «exprℕ+»} : gcd n 1 = 1 := by\n  rw [gcd_comm]\n  apply one_gcd\n#align gcd_one gcd_one\n\n",
 "gcd_mul_right_cancel_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.gcd_mul_right_cancel_right (m : «exprℕ+») {n k : «exprℕ+»} : k.coprime m → m.gcd (n * k) = m.gcd n := by\n  rw [mul_comm]; apply coprime.gcd_mul_left_cancel_right\n#align coprime.gcd_mul_right_cancel_right coprime.gcd_mul_right_cancel_right\n\n",
 "gcd_mul_right_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.gcd_mul_right_cancel (m : «exprℕ+») {n k : «exprℕ+»} : k.coprime n → (m * k).gcd n = m.gcd n := by\n  rw [mul_comm]; apply coprime.gcd_mul_left_cancel\n#align coprime.gcd_mul_right_cancel coprime.gcd_mul_right_cancel\n\n",
 "gcd_mul_left_cancel_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.gcd_mul_left_cancel_right (m : «exprℕ+») {n k : «exprℕ+»} : k.coprime m → m.gcd (k * n) = m.gcd n := by\n  intro h; iterate 2 rw [gcd_comm]; symm; apply coprime.gcd_mul_left_cancel _ h\n#align coprime.gcd_mul_left_cancel_right coprime.gcd_mul_left_cancel_right\n\n",
 "gcd_mul_left_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.gcd_mul_left_cancel (m : «exprℕ+») {n k : «exprℕ+»} : k.coprime n → (k * m).gcd n = m.gcd n :=\n  by\n  intro h; apply eq; simp only [gcd_coe, mul_coe]\n  apply nat.coprime.gcd_mul_left_cancel; simpa\n#align coprime.gcd_mul_left_cancel coprime.gcd_mul_left_cancel\n\n",
 "gcd_mul_lcm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print gcd_mul_lcm /-\ntheorem gcd_mul_lcm (n m : «exprℕ+») : gcd n m * lcm n m = n * m :=\n  subtype.eq (nat.gcd_mul_lcm (n : ℕ) (m : ℕ))\n#align gcd_mul_lcm gcd_mul_lcm\n-/\n\n",
 "gcd_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.gcd_mul (k : «exprℕ+») {m n : «exprℕ+»} (h : m.coprime n) : k.gcd (m * n) = k.gcd m * k.gcd n :=\n  by\n  rw [← coprime_coe] at h; apply eq\n  simp only [gcd_coe, mul_coe]; apply nat.coprime.gcd_mul k h\n#align coprime.gcd_mul coprime.gcd_mul\n\n",
 "gcd_eq_right_iff_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem gcd_eq_right_iff_dvd {m n : «exprℕ+»} : m ∣ n ↔ n.gcd m = m :=\n  by\n  rw [gcd_comm]\n  apply gcd_eq_left_iff_dvd\n#align gcd_eq_right_iff_dvd gcd_eq_right_iff_dvd\n\n",
 "gcd_eq_left_iff_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem gcd_eq_left_iff_dvd {m n : «exprℕ+»} : m ∣ n ↔ m.gcd n = m :=\n  by\n  rw [dvd_iff]\n  rw [nat.gcd_eq_left_iff_dvd]\n  rw [← coe_inj]\n  simp\n#align gcd_eq_left_iff_dvd gcd_eq_left_iff_dvd\n\n",
 "gcd_eq_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem gcd_eq_left {m n : «exprℕ+»} : m ∣ n → m.gcd n = m :=\n  by\n  rw [dvd_iff]\n  intro h\n  apply eq\n  simp only [gcd_coe]\n  apply nat.gcd_eq_left h\n#align gcd_eq_left gcd_eq_left\n\n",
 "gcd_dvd_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem gcd_dvd_right (n m : «exprℕ+») : gcd n m ∣ m :=\n  dvd_iff.2 (nat.gcd_dvd_right (n : ℕ) (m : ℕ))\n#align gcd_dvd_right gcd_dvd_right\n\n",
 "gcd_dvd_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem gcd_dvd_left (n m : «exprℕ+») : gcd n m ∣ n :=\n  dvd_iff.2 (nat.gcd_dvd_left (n : ℕ) (m : ℕ))\n#align gcd_dvd_left gcd_dvd_left\n\n",
 "gcd_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print gcd_comm /-\ntheorem gcd_comm {m n : «exprℕ+»} : m.gcd n = n.gcd m :=\n  by\n  apply eq\n  simp only [gcd_coe]\n  apply nat.gcd_comm\n#align gcd_comm gcd_comm\n-/\n\n",
 "gcd_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp, norm_cast]\ntheorem gcd_coe (n m : «exprℕ+») : (gcd n m : ℕ) = nat.gcd n m :=\n  rfl\n#align gcd_coe gcd_coe\n\n",
 "factor_eq_gcd_right_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.factor_eq_gcd_right_right {a b m n : «exprℕ+»} (cop : m.coprime n) (am : a ∣ m) (bn : b ∣ n) :\n    a = m.gcd (b * a) := by rw [gcd_comm]; apply coprime.factor_eq_gcd_right cop am bn\n#align coprime.factor_eq_gcd_right_right coprime.factor_eq_gcd_right_right\n\n",
 "factor_eq_gcd_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.factor_eq_gcd_right {a b m n : «exprℕ+»} (cop : m.coprime n) (am : a ∣ m) (bn : b ∣ n) :\n    a = (b * a).gcd m := by rw [mul_comm]; apply coprime.factor_eq_gcd_left cop am bn\n#align coprime.factor_eq_gcd_right coprime.factor_eq_gcd_right\n\n",
 "factor_eq_gcd_left_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.factor_eq_gcd_left_right {a b m n : «exprℕ+»} (cop : m.coprime n) (am : a ∣ m) (bn : b ∣ n) :\n    a = m.gcd (a * b) := by rw [gcd_comm]; apply coprime.factor_eq_gcd_left cop am bn\n#align coprime.factor_eq_gcd_left_right coprime.factor_eq_gcd_left_right\n\n",
 "factor_eq_gcd_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.factor_eq_gcd_left {a b m n : «exprℕ+»} (cop : m.coprime n) (am : a ∣ m) (bn : b ∣ n) :\n    a = (a * b).gcd m := by\n  rw [gcd_eq_left_iff_dvd] at am\n  conv_lhs => rw [← am]; symm\n  apply coprime.gcd_mul_right_cancel a\n  apply coprime.coprime_dvd_left bn cop.symm\n#align coprime.factor_eq_gcd_left coprime.factor_eq_gcd_left\n\n",
 "exists_prime_and_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem exists_prime_and_dvd {n : «exprℕ+»} (hn : n ≠ 1) : ∃ p : «exprℕ+», p.prime ∧ p ∣ n :=\n  by\n  obtain ⟨p, hp⟩ := Nat.exists_prime_and_dvd (mt coe_eq_one_iff.mp hn)\n  exists (⟨p, Nat.Prime.pos hp.left⟩ : «exprℕ+»); rw [dvd_iff]; apply hp\n#align exists_prime_and_dvd exists_prime_and_dvd\n\n",
 "eq_one_of_lt_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem eq_one_of_lt_two {n : «exprℕ+»} : n < 2 → n = 1 :=\n  by\n  intro h; apply le_antisymm; swap; apply PNat.one_le\n  change n < 1 + 1 at h; rw [PNat.lt_add_one_iff] at h; apply h\n#align eq_one_of_lt_two eq_one_of_lt_two\n\n",
 "dvd_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem dvd_prime {p m : «exprℕ+»} (pp : p.prime) : m ∣ p ↔ m = 1 ∨ m = p :=\n  by\n  rw [PNat.dvd_iff]\n  rw [Nat.dvd_prime pp]\n  simp\n#align dvd_prime dvd_prime\n\n",
 "dvd_lcm_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print dvd_lcm_right /-\ntheorem dvd_lcm_right (n m : «exprℕ+») : m ∣ lcm n m :=\n  dvd_iff.2 (nat.dvd_lcm_right (n : ℕ) (m : ℕ))\n#align dvd_lcm_right dvd_lcm_right\n-/\n\n",
 "dvd_lcm_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print dvd_lcm_left /-\ntheorem dvd_lcm_left (n m : «exprℕ+») : n ∣ lcm n m :=\n  dvd_iff.2 (nat.dvd_lcm_left (n : ℕ) (m : ℕ))\n#align dvd_lcm_left dvd_lcm_left\n-/\n\n",
 "dvd_gcd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem dvd_gcd {m n k : «exprℕ+»} (hm : k ∣ m) (hn : k ∣ n) : k ∣ gcd m n :=\n  dvd_iff.2 (@nat.dvd_gcd (m : ℕ) (n : ℕ) (k : ℕ) (dvd_iff.1 hm) (dvd_iff.1 hn))\n#align dvd_gcd dvd_gcd\n\n",
 "coprime_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem coprime_one {n : «exprℕ+»} : n.coprime 1 :=\n  Coprime.symm one_coprime\n#align coprime_one coprime_one\n\n",
 "coprime_dvd_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coprime.coprime_dvd_left {m k n : «exprℕ+»} : m ∣ k → k.coprime n → m.coprime n :=\n  by\n  rw [dvd_iff]\n  repeat' rw [← coprime_coe]\n  apply nat.coprime.coprime_dvd_left\n#align coprime.coprime_dvd_left coprime.coprime_dvd_left\n\n",
 "coprime_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp, norm_cast]\ntheorem coprime_coe {m n : «exprℕ+»} : nat.coprime ↑m ↑n ↔ m.coprime n :=\n  by\n  unfold coprime\n  unfold nat.coprime\n  rw [← coe_inj]\n  simp\n#align coprime_coe coprime_coe\n\n",
 "coe_pnat_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem coe_pnat_injective : function.injective (coe : Nat.Primes → «exprℕ+») := fun p q h =>\n  subtype.ext (congr_arg subtype.val h : _)\n#align coe_pnat_injective coe_pnat_injective\n\n",
 "coe_pnat_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[norm_cast]\ntheorem coe_pnat_inj (p q : Nat.Primes) : (p : «exprℕ+») = (q : «exprℕ+») ↔ p = q :=\n  coe_pnat_injective.eq_iff\n#align coe_pnat_inj coe_pnat_inj\n\n",
 "coePNatNat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n#print coePNatNat /-\n/-\nCopyright (c) 2017 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Neil Strickland\n-/\n@[norm_cast]\ntheorem coePNatNat (p : Nat.Primes) : ((p : «exprℕ+») : ℕ) = p :=\n  rfl\n#align coe_pnat_nat coePNatNat\n-/\n\n"}