{"one_le_find":
 "@[simp]\ntheorem one_le_find : 1 < PNat.find h ↔ ¬p 1 :=\n  not_iff_not.mp <| by simp\n#align one_le_find one_le_find\n\n",
 "lt_find_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem lt_find_iff (n : «exprℕ+») : n < PNat.find h ↔ ∀ m ≤ n, ¬p m := by\n  simp only [← add_one_le_iff, le_find_iff, add_le_add_iff_right]\n#align lt_find_iff lt_find_iff\n\n",
 "le_find_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem le_find_iff (n : «exprℕ+») : n ≤ PNat.find h ↔ ∀ m < n, ¬p m := by simp_rw [← not_lt, find_lt_iff, not_exists]\n#align le_find_iff le_find_iff\n\n",
 "find_spec":
 "/-\nCopyright (c) 2022 Yakov Pechersky. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yakov Pechersky, Floris van Doorn\n-/\nprotected theorem find_spec : p (PNat.find h) :=\n  (PNat.findX h).prop.left\n#align find_spec find_spec\n\n",
 "find_mono":
 "theorem find_mono (h : ∀ n, q n → p n) {hp : ∃ n, p n} {hq : ∃ n, q n} : PNat.find hp ≤ PNat.find hq :=\n  PNat.find_min' _ (h _ (PNat.find_spec hq))\n#align find_mono find_mono\n\n",
 "find_min'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\nprotected theorem find_min' {m : «exprℕ+»} (hm : p m) : PNat.find h ≤ m :=\n  le_of_not_lt fun l => PNat.find_min h l hm\n#align find_min' find_min'\n\n",
 "find_min":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\nprotected theorem find_min : ∀ {m : «exprℕ+»}, m < PNat.find h → ¬p m :=\n  (PNat.findX h).prop.right\n#align find_min find_min\n\n",
 "find_lt_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem find_lt_iff (n : «exprℕ+») : PNat.find h < n ↔ ∃ m < n, p m :=\n  ⟨fun h2 => ⟨PNat.find h, h2, PNat.find_spec h⟩, fun ⟨m, hmn, hm⟩ => (PNat.find_min' h hm).trans_lt hmn⟩\n#align find_lt_iff find_lt_iff\n\n",
 "find_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\n@[simp]\ntheorem find_le_iff (n : «exprℕ+») : PNat.find h ≤ n ↔ ∃ m ≤ n, p m := by\n  simp only [exists_prop, ← lt_add_one_iff, find_lt_iff]\n#align find_le_iff find_le_iff\n\n",
 "find_le":
 "theorem find_le {h : ∃ n, p n} (hn : p n) : PNat.find h ≤ n :=\n  (PNat.find_le_iff _ _).2 ⟨n, le_rfl, hn⟩\n#align find_le find_le\n\n",
 "find_eq_one":
 "@[simp]\ntheorem find_eq_one : PNat.find h = 1 ↔ p 1 := by simp [find_eq_iff]\n#align find_eq_one find_eq_one\n\n",
 "find_eq_iff":
 "theorem find_eq_iff : PNat.find h = m ↔ p m ∧ ∀ n < m, ¬p n :=\n  by\n  constructor\n  · rintro rfl\n    exact ⟨PNat.find_spec h, fun _ => PNat.find_min h⟩\n  · rintro ⟨hm, hlt⟩\n    exact le_antisymm (PNat.find_min' h hm) (not_lt.1 <| imp_not_comm.1 (hlt _) <| PNat.find_spec h)\n#align find_eq_iff find_eq_iff\n\n",
 "find_comp_succ":
 "theorem find_comp_succ (h : ∃ n, p n) (h₂ : ∃ n, p (n + 1)) (h1 : ¬p 1) : PNat.find h = PNat.find h₂ + 1 :=\n  by\n  refine' (find_eq_iff _).2 ⟨PNat.find_spec h₂, fun n => PNat.recOn n _ _⟩\n  · simp [h1]\n  intro m IH hm\n  simp only [add_lt_add_iff_right, lt_find_iff] at hm\n  exact hm _ le_rfl\n#align find_comp_succ find_comp_succ\n\n"}