{"supp_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem supp_eq {α : Type u} (a : P.A) (f : P.B a → α) : @supp.{u} P.obj _ α (⟨a, f⟩ : P.obj α) = «expr '' » f univ :=\n  by\n  ext; simp only [supp, image_univ, mem_range, mem_set_of_eq]\n  constructor <;> intro h\n  · apply @h fun x => ∃ y : P.B a, f y = x\n    rw [liftp_iff']\n    intro\n    refine' ⟨_, rfl⟩\n  · simp only [liftp_iff']\n    cases h\n    subst x\n    tauto\n#align supp_eq supp_eq\n\n",
 "mk_dest":
 "@[simp]\ntheorem W.mk_dest (p : W P) : W.mk (W.dest p) = p := by cases p <;> rfl\n#align W.mk_dest W.mk_dest\n\n",
 "map_eq":
 "/-\nCopyright (c) 2018 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n-/\nprotected theorem map_eq {α β : Type _} (f : α → β) (a : P.A) (g : P.B a → α) :\n    @functor.map P.obj _ _ _ f ⟨a, g⟩ = ⟨a, f ∘ g⟩ :=\n  rfl\n#align map_eq map_eq\n\n",
 "liftr_iff":
 "theorem liftr_iff {α : Type u} (r : α → α → Prop) (x y : P.obj α) :\n    Liftr r x y ↔ ∃ a f₀ f₁, x = ⟨a, f₀⟩ ∧ y = ⟨a, f₁⟩ ∧ ∀ i, r (f₀ i) (f₁ i) :=\n  by\n  constructor\n  · rintro ⟨u, xeq, yeq⟩\n    cases' h : u with a f\n    use a, fun i => (f i).val.fst, fun i => (f i).val.snd\n    constructor\n    · rw [← xeq, h]\n      rfl\n    constructor\n    · rw [← yeq, h]\n      rfl\n    intro i\n    exact (f i).property\n  rintro ⟨a, f₀, f₁, xeq, yeq, h⟩\n  use ⟨a, fun i => ⟨(f₀ i, f₁ i), h i⟩⟩\n  constructor\n  · rw [xeq]\n    rfl\n  rw [yeq]; rfl\n#align liftr_iff liftr_iff\n\n",
 "liftp_iff'":
 "theorem liftp_iff' {α : Type u} (p : α → Prop) (a : P.A) (f : P.B a → α) :\n    @Liftp.{u} P.obj _ α p ⟨a, f⟩ ↔ ∀ i, p (f i) :=\n  by\n  simp only [liftp_iff, sigma.mk.inj_iff] <;> constructor <;> intro\n  · casesm*Exists _, _ ∧ _\n    subst_vars\n    assumption\n  repeat' first |constructor|assumption\n#align liftp_iff' liftp_iff'\n\n",
 "liftp_iff":
 "/-\nComposition of polynomial functors.\n-/\n/-\nLifting predicates and relations.\n-/\ntheorem liftp_iff {α : Type u} (p : α → Prop) (x : P.obj α) : Liftp p x ↔ ∃ a f, x = ⟨a, f⟩ ∧ ∀ i, p (f i) :=\n  by\n  constructor\n  · rintro ⟨y, hy⟩\n    cases' h : y with a f\n    refine' ⟨a, fun i => (f i).val, _, fun i => (f i).property⟩\n    rw [← hy, h, pfunctor.map_eq]\n  rintro ⟨a, f, xeq, pf⟩\n  use ⟨a, fun i => ⟨f i, pf i⟩⟩\n  rw [xeq]; rfl\n#align liftp_iff liftp_iff\n\n",
 "iget_map":
 "@[simp]\ntheorem iget_map [decidable_eq P.A] {α β : Type u} [inhabited α] [inhabited β] (x : P.obj α) (f : α → β) (i : P.Idx)\n    (h : i.1 = x.1) : (f <$> x).iget i = f (x.iget i) :=\n  by\n  simp only [obj.iget, fst_map, *, dif_pos, eq_self_iff_true]\n  cases x\n  rfl\n#align iget_map iget_map\n\n",
 "id_map":
 "protected theorem id_map {α : Type _} : ∀ x : P.obj α, id <$> x = id x := fun ⟨a, b⟩ => rfl\n#align id_map id_map\n\n",
 "fst_map":
 "@[simp]\ntheorem fst_map {α β : Type u} (x : P.obj α) (f : α → β) : (f <$> x).1 = x.1 := by cases x <;> rfl\n#align fst_map fst_map\n\n",
 "dest_mk":
 "/- inhabitants of W types is awkward to encode as an instance\nassumption because there needs to be a value `a : P.A`\nsuch that `P.B a` is empty to yield a finite tree -/\n@[simp]\ntheorem W.dest_mk (p : P.obj (W P)) : W.dest (W.mk p) = p := by cases p <;> rfl\n#align W.dest_mk W.dest_mk\n\n",
 "comp_map":
 "protected theorem comp_map {α β γ : Type _} (f : α → β) (g : β → γ) : ∀ x : P.obj α, (g ∘ f) <$> x = g <$> f <$> x :=\n  fun ⟨a, b⟩ => rfl\n#align comp_map comp_map\n\n"}