{"truncate_eq_of_agree":
 "theorem truncate_eq_of_agree {n : ℕ} (x : CofixA F n) (y : CofixA F (succ n)) (h : Agree x y) : truncate y = x :=\n  by\n  induction n generalizing x y <;> cases x <;> cases y\n  · rfl\n  · cases' h with _ _ _ _ _ h₀ h₁\n    cases h\n    simp only [truncate, Function.comp, true_and_iff, eq_self_iff_true, heq_iff_eq]\n    ext y\n    apply n_ih\n    apply h₁\n#align truncate_eq_of_agree truncate_eq_of_agree\n\n",
 "truncate_approx":
 "theorem truncate_approx (x : M F) (n : ℕ) : truncate (x.approx <| n + 1) = x.approx n :=\n  truncate_eq_of_agree _ _ (x.consistent _)\n#align truncate_approx truncate_approx\n\n",
 "nth_of_bisim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ~ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ~ » -/\ntheorem nth_of_bisim [Inhabited (M F)] (bisim : IsBisimulation R) (s₁ s₂) (ps : Path F) :\n    «expr ~ » s₁ s₂ →\n      IsPath ps s₁ ∨ IsPath ps s₂ →\n        iselect ps s₁ = iselect ps s₂ ∧\n          ∃ (a : _)(f f' : F.B a → M F),\n            isubtree ps s₁ = M.mk ⟨a, f⟩ ∧ isubtree ps s₂ = M.mk ⟨a, f'⟩ ∧ ∀ i : F.B a, «expr ~ » (f i) (f' i) :=\n  by\n  intro h₀ hh\n  induction' s₁ using PFunctor.M.casesOn' with a f\n  induction' s₂ using PFunctor.M.casesOn' with a' f'\n  obtain rfl : a = a' := bisim.head h₀\n  induction' ps with i ps generalizing a f f'\n  · exists rfl, a, f, f', rfl, rfl\n    apply bisim.tail h₀\n  cases' i with a' i\n  obtain rfl : a = a' := by cases hh <;> cases is_path_cons hh <;> rfl\n  dsimp only [iselect] at ps_ih⊢\n  have h₁ := bisim.tail h₀ i\n  induction' h : f i using PFunctor.M.casesOn' with a₀ f₀\n  induction' h' : f' i using PFunctor.M.casesOn' with a₁ f₁\n  simp only [h, h', isubtree_cons] at ps_ih⊢\n  rw [h, h'] at h₁\n  obtain rfl : a₀ = a₁ := bisim.head h₁\n  apply ps_ih _ _ _ h₁\n  rw [← h, ← h']\n  apply or_of_or_of_imp_of_imp hh is_path_cons' is_path_cons'\n#align nth_of_bisim nth_of_bisim\n\n",
 "mk_inj":
 "theorem mk_inj {x y : F.obj <| M F} (h : M.mk x = M.mk y) : x = y := by rw [← dest_mk x, h, dest_mk]\n#align mk_inj mk_inj\n\n",
 "mk_dest":
 "@[simp]\ntheorem mk_dest (x : M F) : M.mk (dest x) = x := by\n  apply ext'\n  intro n\n  dsimp only [M.mk]\n  induction' n with n\n  · apply subsingleton.elim\n  dsimp only [approx.s_mk, dest, head]\n  cases' h : x.approx (succ n) with _ hd ch\n  have h' : hd = head' (x.approx 1) := by\n    rw [← head_succ' n, h, head']\n    apply x.consistent\n  revert ch\n  rw [h']\n  intros\n  congr\n  · ext a\n    dsimp only [children]\n    generalize hh : cast _ a = a''\n    rw [cast_eq_iff_heq] at hh\n    revert a''\n    rw [h]\n    intros\n    cases hh\n    rfl\n#align mk_dest mk_dest\n\n",
 "isubtree_cons":
 "@[simp]\ntheorem isubtree_cons [DecidableEq F.A] [Inhabited (M F)] (ps : Path F) {a} (f : F.B a → M F) {i : F.B a} :\n    isubtree (⟨_, i⟩ :: ps) (M.mk ⟨a, f⟩) = isubtree ps (f i) := by\n  simp only [isubtree, ichildren_mk, PFunctor.Obj.iget, dif_pos, isubtree, M.cases_on_mk'] <;> rfl\n#align isubtree_cons isubtree_cons\n\n",
 "iselect_nil":
 "@[simp]\ntheorem iselect_nil [DecidableEq F.A] [Inhabited (M F)] {a} (f : F.B a → M F) : iselect nil (M.mk ⟨a, f⟩) = a := by rfl\n#align iselect_nil iselect_nil\n\n",
 "iselect_eq_default":
 "theorem iselect_eq_default [DecidableEq F.A] [Inhabited (M F)] (ps : Path F) (x : M F) (h : ¬IsPath ps x) :\n    iselect ps x = head default := by\n  induction ps generalizing x\n  · exfalso\n    apply h\n    constructor\n  · cases' ps_hd with a i\n    induction x using PFunctor.M.casesOn'\n    simp only [iselect, isubtree] at ps_ih⊢\n    by_cases h'' : a = x_a\n    subst x_a\n    · simp only [dif_pos, eq_self_iff_true, cases_on_mk']\n      rw [ps_ih]\n      intro h'\n      apply h\n      constructor <;> try rfl\n      apply h'\n    · simp [*]\n#align iselect_eq_default iselect_eq_default\n\n",
 "iselect_cons":
 "@[simp]\ntheorem iselect_cons [DecidableEq F.A] [Inhabited (M F)] (ps : Path F) {a} (f : F.B a → M F) {i} :\n    iselect (⟨a, i⟩ :: ps) (M.mk ⟨a, f⟩) = iselect ps (f i) := by simp only [iselect, isubtree_cons]\n#align iselect_cons iselect_cons\n\n",
 "is_path_cons'":
 "theorem is_path_cons' {xs : Path F} {a} {f : F.B a → M F} {i : F.B a} :\n    IsPath (⟨a, i⟩ :: xs) (M.mk ⟨a, f⟩) → IsPath xs (f i) :=\n  by\n  generalize h : M.mk ⟨a, f⟩ = x\n  rintro (_ | ⟨_, _, _, _, rfl, hp⟩)\n  cases mk_inj h\n  exact hp\n#align is_path_cons' is_path_cons'\n\n",
 "is_path_cons":
 "theorem is_path_cons {xs : Path F} {a a'} {f : F.B a → M F} {i : F.B a'} :\n    IsPath (⟨a', i⟩ :: xs) (M.mk ⟨a, f⟩) → a = a' :=\n  by\n  generalize h : M.mk ⟨a, f⟩ = x\n  rintro (_ | ⟨_, _, _, _, rfl, _⟩)\n  cases mk_inj h\n  rfl\n#align is_path_cons is_path_cons\n\n",
 "ichildren_mk":
 "@[simp]\ntheorem ichildren_mk [DecidableEq F.A] [Inhabited (M F)] (x : F.obj (M F)) (i : F.Idx) :\n    ichildren i (M.mk x) = x.iget i := by\n  dsimp only [ichildren, PFunctor.Obj.iget]\n  congr with h\n  apply ext'\n  dsimp only [children', M.mk, approx.s_mk]\n  intros\n  rfl\n#align ichildren_mk ichildren_mk\n\n",
 "head_succ'":
 "theorem head_succ' (n m : ℕ) (x : ∀ n, CofixA F n) (Hconsistent : AllAgree x) :\n    head' (x (succ n)) = head' (x (succ m)) :=\n  by\n  suffices ∀ n, head' (x (succ n)) = head' (x 1) by simp [this]\n  clear m n\n  intro\n  cases' h₀ : x (succ n) with _ i₀ f₀\n  cases' h₁ : x 1 with _ i₁ f₁\n  dsimp only [head']\n  induction' n with n\n  · rw [h₁] at h₀\n    cases h₀\n    trivial\n  · have H := Hconsistent (succ n)\n    cases' h₂ : x (succ n) with _ i₂ f₂\n    rw [h₀, h₂] at H\n    apply n_ih (truncate ∘ f₀)\n    rw [h₂]\n    cases' H with _ _ _ _ _ _ hagree\n    congr\n    funext j\n    dsimp only [comp_app]\n    rw [truncate_eq_of_agree]\n    apply hagree\n#align head_succ' head_succ'\n\n",
 "head_succ":
 "theorem head_succ (n m : ℕ) (x : M F) : head' (x.approx (succ n)) = head' (x.approx (succ m)) :=\n  head_succ' n m _ x.consistent\n#align head_succ head_succ\n\n",
 "head_mk":
 "@[simp]\ntheorem head_mk (x : F.obj (M F)) : head (M.mk x) = x.1 :=\n  Eq.symm <|\n    calc\n      x.1 = (dest (M.mk x)).1 := by rw [dest_mk]\n      _ = head (M.mk x) := by rfl\n      \n#align head_mk head_mk\n\n",
 "head_eq_head'":
 "theorem head_eq_head' : ∀ (x : M F) (n : ℕ), head x = head' (x.approx <| n + 1)\n  | ⟨x, h⟩, n => head_succ' _ _ _ h\n#align head_eq_head' head_eq_head'\n\n",
 "head'_eq_head":
 "theorem head'_eq_head : ∀ (x : M F) (n : ℕ), head' (x.approx <| n + 1) = head x\n  | ⟨x, h⟩, n => head_succ' _ _ _ h\n#align head'_eq_head head'_eq_head\n\n",
 "ext_aux":
 "theorem ext_aux [Inhabited (M F)] [DecidableEq F.A] {n : ℕ} (x y z : M F) (hx : Agree' n z x) (hy : Agree' n z y)\n    (hrec : ∀ ps : Path F, n = ps.length → iselect ps x = iselect ps y) : x.approx (n + 1) = y.approx (n + 1) :=\n  by\n  induction' n with n generalizing x y z\n  · specialize hrec [] rfl\n    induction x using PFunctor.M.casesOn'\n    induction y using PFunctor.M.casesOn'\n    simp only [iselect_nil] at hrec\n    subst hrec\n    simp only [approx_mk, true_and_iff, eq_self_iff_true, heq_iff_eq]\n    apply subsingleton.elim\n  · cases hx\n    cases hy\n    induction x using PFunctor.M.casesOn'\n    induction y using PFunctor.M.casesOn'\n    subst z\n    iterate 3 have := mk_inj ‹_›; repeat' cases this\n    simp only [approx_mk, true_and_iff, eq_self_iff_true, heq_iff_eq]\n    ext i\n    apply n_ih\n    · solve_by_elim\n    · solve_by_elim\n    introv h\n    specialize hrec (⟨_, i⟩ :: ps) (congr_arg _ h)\n    simp only [iselect_cons] at hrec\n    exact hrec\n#align ext_aux ext_aux\n\n",
 "ext'":
 "theorem ext' (x y : M F) (H : ∀ i : ℕ, x.approx i = y.approx i) : x = y :=\n  by\n  cases x\n  cases y\n  congr with n\n  apply H\n#align ext' ext'\n\n",
 "ext":
 "theorem ext [Inhabited (M F)] (x y : M F) (H : ∀ ps : Path F, iselect ps x = iselect ps y) : x = y :=\n  by\n  apply ext'; intro i\n  induction' i with i\n  · cases x.approx 0\n    cases y.approx 0\n    constructor\n  · apply ext_aux x y x\n    · rw [← agree_iff_agree']\n      apply x.consistent\n    · rw [← agree_iff_agree', i_ih]\n      apply y.consistent\n    introv H'\n    dsimp only [iselect] at H\n    cases H'\n    apply H ps\n#align ext ext\n\n",
 "eq_of_bisim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ~ » -/\ntheorem eq_of_bisim [Nonempty (M F)] (bisim : IsBisimulation R) : ∀ s₁ s₂, «expr ~ » s₁ s₂ → s₁ = s₂ :=\n  by\n  inhabit M F\n  introv Hr; apply ext\n  introv\n  by_cases h : is_path ps s₁ ∨ is_path ps s₂\n  · have H := nth_of_bisim R bisim _ _ ps Hr h\n    exact H.left\n  · rw [not_or] at h\n    cases' h with h₀ h₁\n    simp only [iselect_eq_default, *, not_false_iff]\n#align eq_of_bisim eq_of_bisim\n\n",
 "dest_mk":
 "@[simp]\ntheorem dest_mk (x : F.obj <| M F) : dest (M.mk x) = x :=\n  by\n  funext i\n  dsimp only [M.mk, dest]\n  cases' x with x ch; congr with i\n  cases h : ch i\n  simp only [children, M.approx.s_mk, children', cast_eq]\n  dsimp only [M.approx.s_mk, children']\n  congr ; rw [h]\n#align dest_mk dest_mk\n\n",
 "dest_corec":
 "theorem dest_corec (g : α → P.obj α) (x : α) : M.dest (M.corec g x) = M.corec g <$> g x := by rw [corec_def, dest_mk]\n#align dest_corec dest_corec\n\n",
 "default_consistent":
 "theorem M.default_consistent [Inhabited F.A] : ∀ n, Agree (default : CofixA F n) default\n  | 0 => agree.continue _ _\n  | succ n => agree.intro _ _ fun _ => M.default_consistent n\n#align M.default_consistent M.default_consistent\n\n",
 "corec_unique":
 "theorem corec_unique (g : α → P.obj α) (f : α → M P) (hyp : ∀ x, M.dest (f x) = f <$> g x) : f = M.corec g :=\n  by\n  ext x\n  apply bisim' (fun x => True) _ _ _ _ trivial\n  clear x\n  intro x _\n  cases' gxeq : g x with a f'\n  have h₀ : M.dest (f x) = ⟨a, f ∘ f'⟩ := by rw [hyp, gxeq, PFunctor.map_eq]\n  have h₁ : M.dest (M.corec g x) = ⟨a, M.corec g ∘ f'⟩ := by rw [dest_corec, gxeq, PFunctor.map_eq]\n  refine' ⟨_, _, _, h₀, h₁, _⟩\n  intro i\n  exact ⟨f' i, trivial, rfl, rfl⟩\n#align corec_unique corec_unique\n\n",
 "corec_def":
 "theorem corec_def {X} (f : X → F.obj X) (x₀ : X) : M.corec f x₀ = M.mk (M.corec f <$> f x₀) :=\n  by\n  dsimp only [M.corec, M.mk]\n  congr with n\n  cases' n with n\n  · dsimp only [s_corec, approx.s_mk]\n    rfl\n  · dsimp only [s_corec, approx.s_mk]\n    cases h : f x₀\n    dsimp only [(· <$> ·), PFunctor.map]\n    congr\n#align corec_def corec_def\n\n",
 "cofix_a_eq_zero":
 "/-\nCopyright (c) 2017 Simon Hudon All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\ntheorem cofix_a_eq_zero : ∀ x y : CofixA F 0, x = y\n  | cofix_a.continue, cofix_a.continue => rfl\n#align cofix_a_eq_zero cofix_a_eq_zero\n\n",
 "children_mk":
 "theorem children_mk {a} (x : F.B a → M F) (i : F.B (head (M.mk ⟨a, x⟩))) :\n    children (M.mk ⟨a, x⟩) i = x (cast (by rw [head_mk]) i) := by apply ext' <;> intro n <;> rfl\n#align children_mk children_mk\n\n",
 "cases_on_mk'":
 "@[simp]\ntheorem cases_on_mk' {r : M F → Sort _} {a} (x : F.B a → M F) (f : ∀ (a) (f : F.B a → M F), r (M.mk ⟨a, f⟩)) :\n    PFunctor.M.casesOn' (M.mk ⟨a, x⟩) f = f a x :=\n  cases_mk ⟨_, x⟩ _\n#align cases_on_mk' cases_on_mk'\n\n",
 "cases_on_mk":
 "@[simp]\ntheorem cases_on_mk {r : M F → Sort _} (x : F.obj <| M F) (f : ∀ x : F.obj <| M F, r (M.mk x)) :\n    PFunctor.M.casesOn (M.mk x) f = f x :=\n  cases_mk x f\n#align cases_on_mk cases_on_mk\n\n",
 "cases_mk":
 "@[simp]\ntheorem cases_mk {r : M F → Sort _} (x : F.obj <| M F) (f : ∀ x : F.obj <| M F, r (M.mk x)) :\n    PFunctor.M.cases f (M.mk x) = f x :=\n  by\n  dsimp only [M.mk, PFunctor.M.cases, dest, head, approx.s_mk, head']\n  cases x; dsimp only [approx.s_mk]\n  apply eq_of_heq\n  apply rec_heq_of_heq; congr with x\n  dsimp only [children, approx.s_mk, children']\n  cases h : x_snd x; dsimp only [head]\n  congr with n; change (x_snd x).approx n = _; rw [h]\n#align cases_mk cases_mk\n\n",
 "bisim_equiv":
 "-- for the record, show M_bisim follows from _bisim'\ntheorem bisim_equiv (R : M P → M P → Prop)\n    (h : ∀ x y, R x y → ∃ a f f', M.dest x = ⟨a, f⟩ ∧ M.dest y = ⟨a, f'⟩ ∧ ∀ i, R (f i) (f' i)) :\n    ∀ x y, R x y → x = y := fun x y Rxy =>\n  let Q : M P × M P → Prop := fun p => R p.fst p.snd\n  bisim' Q Prod.fst Prod.snd\n    (fun p Qp =>\n      let ⟨a, f, f', hx, hy, h'⟩ := h p.fst p.snd Qp\n      ⟨a, f, f', hx, hy, fun i => ⟨⟨f i, f' i⟩, h' i, rfl, rfl⟩⟩)\n    ⟨x, y⟩ Rxy\n#align bisim_equiv bisim_equiv\n\n",
 "bisim'":
 "theorem bisim' {α : Type _} (Q : α → Prop) (u v : α → M P)\n    (h :\n      ∀ x,\n        Q x → ∃ a f f', M.dest (u x) = ⟨a, f⟩ ∧ M.dest (v x) = ⟨a, f'⟩ ∧ ∀ i, ∃ x', Q x' ∧ f i = u x' ∧ f' i = v x') :\n    ∀ x, Q x → u x = v x := fun x Qx =>\n  let R := fun w z : M P => ∃ x', Q x' ∧ w = u x' ∧ z = v x'\n  @M.bisim P R\n    (fun x y ⟨x', Qx', xeq, yeq⟩ =>\n      let ⟨a, f, f', ux'eq, vx'eq, h'⟩ := h x' Qx'\n      ⟨a, f, f', xeq.symm ▸ ux'eq, yeq.symm ▸ vx'eq, h'⟩)\n    _ _ ⟨x, Qx, rfl, rfl⟩\n#align bisim' bisim'\n\n",
 "bisim":
 "theorem bisim (R : M P → M P → Prop)\n    (h : ∀ x y, R x y → ∃ a f f', M.dest x = ⟨a, f⟩ ∧ M.dest y = ⟨a, f'⟩ ∧ ∀ i, R (f i) (f' i)) :\n    ∀ x y, R x y → x = y := by\n  introv h'\n  haveI := inhabited.mk x.head\n  apply eq_of_bisim R _ _ _ h'; clear h' x y\n  constructor <;> introv ih <;> rcases h _ _ ih with ⟨a'', g, g', h₀, h₁, h₂⟩ <;> clear h\n  · replace h₀ := congr_arg Sigma.fst h₀\n    replace h₁ := congr_arg Sigma.fst h₁\n    simp only [dest_mk] at h₀ h₁\n    rw [h₀, h₁]\n  · simp only [dest_mk] at h₀ h₁\n    cases h₀\n    cases h₁\n    apply h₂\n#align bisim bisim\n\n",
 "approx_mk":
 "theorem approx_mk (a : F.A) (f : F.B a → M F) (i : ℕ) :\n    (M.mk ⟨a, f⟩).approx (succ i) = cofix_a.intro a fun j => (f j).approx i :=\n  rfl\n#align approx_mk approx_mk\n\n",
 "approx_eta":
 "theorem approx_eta {n : ℕ} (x : CofixA F (n + 1)) : x = cofix_a.intro (head' x) (children' x) := by cases x <;> rfl\n#align approx_eta approx_eta\n\n",
 "agree_trival":
 "@[simp]\ntheorem agree_trival {x : CofixA F 0} {y : CofixA F 1} : Agree x y := by constructor\n#align agree_trival agree_trival\n\n",
 "agree_iff_agree'":
 "theorem agree_iff_agree' {n : ℕ} (x y : M F) : Agree (x.approx n) (y.approx <| n + 1) ↔ Agree' n x y :=\n  by\n  constructor <;> intro h\n  · induction n generalizing x y\n    constructor\n    · induction x using PFunctor.M.casesOn'\n      induction y using PFunctor.M.casesOn'\n      simp only [approx_mk] at h\n      cases' h with _ _ _ _ _ _ hagree\n      constructor <;> try rfl\n      intro i\n      apply n_ih\n      apply hagree\n  · induction n generalizing x y\n    constructor\n    · cases h\n      induction x using PFunctor.M.casesOn'\n      induction y using PFunctor.M.casesOn'\n      simp only [approx_mk]\n      have h_a_1 := mk_inj ‹M.mk ⟨x_a, x_f⟩ = M.mk ⟨h_a, h_x⟩›\n      cases h_a_1\n      replace h_a_2 := mk_inj ‹M.mk ⟨y_a, y_f⟩ = M.mk ⟨h_a, h_y⟩›\n      cases h_a_2\n      constructor\n      intro i\n      apply n_ih\n      simp [*]\n#align agree_iff_agree' agree_iff_agree'\n\n",
 "agree_children":
 "theorem agree_children {n : ℕ} (x : CofixA F (succ n)) (y : CofixA F (succ n + 1)) {i j} (h₀ : HEq i j)\n    (h₁ : Agree x y) : Agree (children' x i) (children' y j) :=\n  by\n  cases' h₁ with _ _ _ _ _ _ hagree; cases h₀\n  apply hagree\n#align agree_children agree_children\n\n",
 "agree'_refl":
 "@[simp]\ntheorem agree'_refl {n : ℕ} (x : M F) : Agree' n x x :=\n  by\n  induction n generalizing x <;> induction x using PFunctor.M.casesOn' <;> constructor <;> try rfl\n  intros\n  apply n_ih\n#align agree'_refl agree'_refl\n\n",
 "P_mk":
 "protected theorem P_mk (x : F.obj <| M F) : AllAgree (Approx.sMk x)\n  | 0 => by constructor\n  | succ n => by\n    constructor\n    introv\n    apply (x.2 i).consistent\n#align P_mk P_mk\n\n",
 "P_corec":
 "theorem P_corec (i : X) (n : ℕ) : Agree (sCorec f i n) (sCorec f i (succ n)) :=\n  by\n  induction' n with n generalizing i\n  constructor\n  cases' h : f i with y g\n  constructor\n  introv\n  apply n_ih\n#align P_corec P_corec\n\n"}