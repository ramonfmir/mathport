{"sqrt_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem sqrt_nonneg (q : exprℚ) : 0 ≤ Rat.sqrt q :=\n  nonneg_iff_zero_le.1 <|\n    (divInt_nonneg _ <|\n          Int.coe_nat_pos.2 <| nat.pos_of_ne_zero fun H => pos_iff_ne_zero.1 q.pos <| Nat.sqrt_eq_zero.1 H).2 <|\n      int.coe_nat_nonneg _\n#align sqrt_nonneg sqrt_nonneg\n\n",
 "sqrt_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-\nCopyright (c) 2019 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mario Carneiro\n-/\ntheorem sqrt_eq (q : exprℚ) : Rat.sqrt (q * q) = |q| := by\n  rw [sqrt, mul_self_num, mul_self_denom, Int.sqrt_eq, Nat.sqrt_eq, abs_def]\n#align sqrt_eq sqrt_eq\n\n",
 "exists_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem exists_mul_self (x : exprℚ) : (∃ q, q * q = x) ↔ Rat.sqrt x * Rat.sqrt x = x :=\n  ⟨fun ⟨n, hn⟩ => by rw [← hn, sqrt_eq, abs_mul_abs_self], fun h => ⟨Rat.sqrt x, h⟩⟩\n#align exists_mul_self exists_mul_self\n\n"}