{"subsingleton_cod":
 "/-- This is not an instance to avoid slowing down every single `subsingleton` typeclass search.-/\ntheorem subsingleton_cod [∀ a, subsingleton (β a)] : subsingleton F :=\n  ⟨fun f g => coe_injective <| subsingleton.elim _ _⟩\n#align subsingleton_cod subsingleton_cod\n\n",
 "ne_iff":
 "theorem ne_iff {f g : F} : f ≠ g ↔ ∃ a, f a ≠ g a :=\n  ext_iff.not.trans not_forall\n#align ne_iff ne_iff\n\n",
 "ext_iff":
 "theorem ext_iff {f g : F} : f = g ↔ ∀ x, f x = g x :=\n  coe_fn_eq.symm.trans Function.funext_iff\n#align ext_iff ext_iff\n\n",
 "ext'_iff":
 "theorem ext'_iff {f g : F} : f = g ↔ (f : ∀ a : α, β a) = (g : ∀ a : α, β a) :=\n  coe_fn_eq.symm\n#align ext'_iff ext'_iff\n\n",
 "ext'":
 "theorem ext' {f g : F} (h : (f : ∀ a : α, β a) = (g : ∀ a : α, β a)) : f = g :=\n  coe_injective h\n#align ext' ext'\n\n",
 "ext":
 "theorem ext (f g : F) (h : ∀ x : α, f x = g x) : f = g :=\n  coe_injective (funext h)\n#align ext ext\n\n",
 "exists_ne":
 "#print exists_ne /-\ntheorem exists_ne {f g : F} (h : f ≠ g) : ∃ x, f x ≠ g x :=\n  ne_iff.mp h\n#align exists_ne exists_ne\n-/\n\n",
 "congr_fun":
 "#print congr_fun /-\nprotected theorem congr_fun {f g : F} (h₁ : f = g) (x : α) : f x = g x :=\n  congr_fun (congr_arg _ h₁) x\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "#print congr_arg /-\nprotected theorem congr_arg (f : F) {x y : α} (h₂ : x = y) : f x = f y :=\n  congr_arg _ h₂\n#align congr_arg congr_arg\n-/\n\n",
 "congr":
 "#print congr /-\nprotected theorem congr {f g : F} {x y : α} (h₁ : f = g) (h₂ : x = y) : f x = g y :=\n  congr (congr_arg _ h₁) h₂\n#align congr congr\n-/\n\n",
 "coe_injective":
 "theorem coe_injective : function.injective (coe_fn : F → ∀ a : α, β a) :=\n  fun_like.coe_injective'\n#align coe_injective coe_injective\n\n",
 "coe_fn_eq":
 "@[simp, norm_cast]\ntheorem coe_fn_eq {f g : F} : (f : ∀ a : α, β a) = (g : ∀ a : α, β a) ↔ f = g :=\n  ⟨fun h => @coe_injective _ _ _ i _ _ h, fun h => by cases h <;> rfl⟩\n#align coe_fn_eq coe_fn_eq\n\n",
 "coe_eq_coe_fn":
 "/-\nCopyright (c) 2021 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\n-- This instance should have low priority, to ensure we follow the chain\n-- `fun_like → has_coe_to_fun`\n-- Give this a priority between `coe_fn_trans` and the default priority\n-- `α` and `β` are out_params, so this instance should not be dangerous\n@[simp]\ntheorem coe_eq_coe_fn : (fun_like.coe : F → ∀ a : α, β a) = coe_fn :=\n  rfl\n#align coe_eq_coe_fn coe_eq_coe_fn\n\n"}