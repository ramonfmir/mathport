{"surjective_comp":
 "@[simp]\ntheorem surjective_comp (e : E) (f : β → γ) : function.surjective (f ∘ e) ↔ function.surjective f :=\n  (equiv_like.surjective e).of_comp_iff f\n#align surjective_comp surjective_comp\n\n",
 "surjective":
 "protected theorem surjective (e : E) : function.surjective e :=\n  (right_inv e).surjective\n#align surjective surjective\n\n",
 "subsingleton_dom":
 "/-- This is not an instance to avoid slowing down every single `subsingleton` typeclass search.-/\ntheorem subsingleton_dom [subsingleton β] : subsingleton F :=\n  ⟨fun f g => fun_like.ext f g fun x => (right_inv f).injective <| subsingleton.elim _ _⟩\n#align subsingleton_dom subsingleton_dom\n\n",
 "inv_injective":
 "#print inv_injective /-\n/-\nCopyright (c) 2021 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\n-- The `inv` hypothesis makes this easier to prove with `congr'`\ntheorem inv_injective : function.injective (equiv_like.inv : E → β → α) := fun e g h =>\n  coe_injective' e g ((right_inv e).eq_right_inverse (h.symm ▸ left_inv g)) h\n#align inv_injective inv_injective\n-/\n\n",
 "inv_apply_apply":
 "/-- This lemma is only supposed to be used in the generic context, when working with instances\nof classes extending `equiv_like`.\nFor concrete isomorphism types such as `equiv`, you should use `equiv.symm_apply_apply`\nor its equivalent.\n\nTODO: define a generic form of `equiv.symm`. -/\n@[simp]\ntheorem inv_apply_apply (e : E) (a : α) : equiv_like.inv e (e a) = a :=\n  left_inv _ _\n#align inv_apply_apply inv_apply_apply\n\n",
 "injective_comp":
 "@[simp]\ntheorem injective_comp (e : E) (f : β → γ) : function.injective (f ∘ e) ↔ function.injective f :=\n  function.injective.of_comp_iff' f (equiv_like.bijective e)\n#align injective_comp injective_comp\n\n",
 "injective":
 "protected theorem injective (e : E) : function.injective e :=\n  embedding_like.injective e\n#align injective injective\n\n",
 "comp_surjective":
 "@[simp]\ntheorem comp_surjective (f : α → β) (e : F) : function.surjective (e ∘ f) ↔ function.surjective f :=\n  function.surjective.of_comp_iff' (equiv_like.bijective e) f\n#align comp_surjective comp_surjective\n\n",
 "comp_injective":
 "theorem comp_injective (f : α → β) (e : F) : function.injective (e ∘ f) ↔ function.injective f :=\n  embedding_like.comp_injective f e\n#align comp_injective comp_injective\n\n",
 "comp_bijective":
 "@[simp]\ntheorem comp_bijective (f : α → β) (e : F) : function.bijective (e ∘ f) ↔ function.bijective f :=\n  (equiv_like.bijective e).of_comp_iff' f\n#align comp_bijective comp_bijective\n\n",
 "bijective_comp":
 "@[simp]\ntheorem bijective_comp (e : E) (f : β → γ) : function.bijective (f ∘ e) ↔ function.bijective f :=\n  (equiv_like.bijective e).of_comp_iff f\n#align bijective_comp bijective_comp\n\n",
 "bijective":
 "protected theorem bijective (e : E) : function.bijective (e : α → β) :=\n  ⟨equiv_like.injective e, equiv_like.surjective e⟩\n#align bijective bijective\n\n",
 "apply_inv_apply":
 "/-- This lemma is only supposed to be used in the generic context, when working with instances\nof classes extending `equiv_like`.\nFor concrete isomorphism types such as `equiv`, you should use `equiv.apply_symm_apply`\nor its equivalent.\n\nTODO: define a generic form of `equiv.symm`. -/\n@[simp]\ntheorem apply_inv_apply (e : E) (b : β) : e (equiv_like.inv e b) = b :=\n  right_inv _ _\n#align apply_inv_apply apply_inv_apply\n\n",
 "apply_eq_iff_eq":
 "theorem apply_eq_iff_eq (f : E) {x y : α} : f x = f y ↔ x = y :=\n  embedding_like.apply_eq_iff_eq f\n#align apply_eq_iff_eq apply_eq_iff_eq\n\n"}