{"sup_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem sup_zero : (0 : Multiset α).sup = «expr⊥» :=\n  fold_zero _ _\n#align sup_zero sup_zero\n\n",
 "sup_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_union (s₁ s₂ : Multiset α) : (s₁ ∪ s₂).sup = «expr ⊔ » s₁.sup s₂.sup := by\n  rw [← sup_dedup, dedup_ext.2, sup_dedup, sup_add] <;> simp\n#align sup_union sup_union\n\n",
 "sup_singleton":
 "@[simp]\ntheorem sup_singleton {a : α} : ({a} : Multiset α).sup = a :=\n  sup_bot_eq\n#align sup_singleton sup_singleton\n\n",
 "sup_ndunion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_ndunion (s₁ s₂ : Multiset α) : (ndunion s₁ s₂).sup = «expr ⊔ » s₁.sup s₂.sup := by\n  rw [← sup_dedup, dedup_ext.2, sup_dedup, sup_add] <;> simp\n#align sup_ndunion sup_ndunion\n\n",
 "sup_ndinsert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_ndinsert (a : α) (s : Multiset α) : (ndinsert a s).sup = «expr ⊔ » a s.sup := by\n  rw [← sup_dedup, dedup_ext.2, sup_dedup, sup_cons] <;> simp\n#align sup_ndinsert sup_ndinsert\n\n",
 "sup_mono":
 "theorem sup_mono {s₁ s₂ : Multiset α} (h : s₁ ⊆ s₂) : s₁.sup ≤ s₂.sup :=\n  sup_le.2 fun b hb => le_sup (h hb)\n#align sup_mono sup_mono\n\n",
 "sup_le":
 "#print sup_le /-\ntheorem sup_le {s : Multiset α} {a : α} : s.sup ≤ a ↔ ∀ b ∈ s, b ≤ a :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [or_imp, forall_and])\n#align sup_le sup_le\n-/\n\n",
 "sup_dedup":
 "@[simp]\ntheorem sup_dedup (s : Multiset α) : (dedup s).sup = s.sup :=\n  fold_dedup_idem _ _ _\n#align sup_dedup sup_dedup\n\n",
 "sup_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_cons (a : α) (s : Multiset α) : («expr ::ₘ » a s).sup = «expr ⊔ » a s.sup :=\n  fold_cons_left _ _ _ _\n#align sup_cons sup_cons\n\n",
 "sup_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n-- can be defined with just `[has_bot α]` where some lemmas hold without requiring `[order_bot α]`\n@[simp]\ntheorem sup_coe (l : List α) : sup (l : Multiset α) = l.foldr («expr ⊔ » · ·) («expr⊥») :=\n  rfl\n#align sup_coe sup_coe\n\n",
 "sup_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print sup_add /-\n@[simp]\ntheorem sup_add (s₁ s₂ : Multiset α) : (s₁ + s₂).sup = «expr ⊔ » s₁.sup s₂.sup :=\n  Eq.trans (by simp [sup]) (fold_add _ _ _ _ _)\n#align sup_add sup_add\n-/\n\n",
 "nodup_sup_iff":
 "theorem nodup_sup_iff {α : Type _} [DecidableEq α] {m : Multiset (Multiset α)} :\n    m.sup.nodup ↔ ∀ a : Multiset α, a ∈ m → a.nodup :=\n  by\n  apply m.induction_on\n  · simp\n  · intro a s h\n    simp [h]\n#align nodup_sup_iff nodup_sup_iff\n\n",
 "le_sup":
 "theorem le_sup {s : Multiset α} {a : α} (h : a ∈ s) : a ≤ s.sup :=\n  sup_le.1 le_rfl _ h\n#align le_sup le_sup\n\n",
 "le_inf":
 "#print le_inf /-\ntheorem le_inf {s : Multiset α} {a : α} : a ≤ s.inf ↔ ∀ b ∈ s, a ≤ b :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [or_imp, forall_and])\n#align le_inf le_inf\n-/\n\n",
 "inf_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem inf_zero : (0 : Multiset α).inf = «expr⊤» :=\n  fold_zero _ _\n#align inf_zero inf_zero\n\n",
 "inf_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_union (s₁ s₂ : Multiset α) : (s₁ ∪ s₂).inf = «expr ⊓ » s₁.inf s₂.inf := by\n  rw [← inf_dedup, dedup_ext.2, inf_dedup, inf_add] <;> simp\n#align inf_union inf_union\n\n",
 "inf_singleton":
 "@[simp]\ntheorem inf_singleton {a : α} : ({a} : Multiset α).inf = a :=\n  inf_top_eq\n#align inf_singleton inf_singleton\n\n",
 "inf_ndunion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_ndunion (s₁ s₂ : Multiset α) : (ndunion s₁ s₂).inf = «expr ⊓ » s₁.inf s₂.inf := by\n  rw [← inf_dedup, dedup_ext.2, inf_dedup, inf_add] <;> simp\n#align inf_ndunion inf_ndunion\n\n",
 "inf_ndinsert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_ndinsert (a : α) (s : Multiset α) : (ndinsert a s).inf = «expr ⊓ » a s.inf := by\n  rw [← inf_dedup, dedup_ext.2, inf_dedup, inf_cons] <;> simp\n#align inf_ndinsert inf_ndinsert\n\n",
 "inf_mono":
 "theorem inf_mono {s₁ s₂ : Multiset α} (h : s₁ ⊆ s₂) : s₂.inf ≤ s₁.inf :=\n  le_inf.2 fun b hb => inf_le (h hb)\n#align inf_mono inf_mono\n\n",
 "inf_le":
 "theorem inf_le {s : Multiset α} {a : α} (h : a ∈ s) : s.inf ≤ a :=\n  le_inf.1 le_rfl _ h\n#align inf_le inf_le\n\n",
 "inf_dedup":
 "@[simp]\ntheorem inf_dedup (s : Multiset α) : (dedup s).inf = s.inf :=\n  fold_dedup_idem _ _ _\n#align inf_dedup inf_dedup\n\n",
 "inf_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_cons (a : α) (s : Multiset α) : («expr ::ₘ » a s).inf = «expr ⊓ » a s.inf :=\n  fold_cons_left _ _ _ _\n#align inf_cons inf_cons\n\n",
 "inf_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n-- can be defined with just `[has_top α]` where some lemmas hold without requiring `[order_top α]`\n@[simp]\ntheorem inf_coe (l : List α) : inf (l : Multiset α) = l.foldr («expr ⊓ » · ·) («expr⊤») :=\n  rfl\n#align inf_coe inf_coe\n\n",
 "inf_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print inf_add /-\n@[simp]\ntheorem inf_add (s₁ s₂ : Multiset α) : (s₁ + s₂).inf = «expr ⊓ » s₁.inf s₂.inf :=\n  Eq.trans (by simp [inf]) (fold_add _ _ _ _ _)\n#align inf_add inf_add\n-/\n\n"}