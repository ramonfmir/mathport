{"zero_sigma":
 "@[simp]\ntheorem zero_sigma : @Multiset.sigma α σ 0 t = 0 :=\n  rfl\n#align zero_sigma zero_sigma\n\n",
 "zero_product":
 "@[simp]\ntheorem zero_product : @product α β 0 t = 0 :=\n  rfl\n#align zero_product zero_product\n\n",
 "zero_bind":
 "@[simp]\ntheorem zero_bind : bind 0 f = 0 :=\n  rfl\n#align zero_bind zero_bind\n\n",
 "singleton_join":
 "@[simp]\ntheorem singleton_join (a) : join ({a} : Multiset (Multiset α)) = a :=\n  sum_singleton _\n#align singleton_join singleton_join\n\n",
 "singleton_bind":
 "@[simp]\ntheorem singleton_bind : bind {a} f = f a := by simp [bind]\n#align singleton_bind singleton_bind\n\n",
 "sigma_singleton":
 "@[simp]\ntheorem sigma_singleton (b : α → β) : (({a} : Multiset α).sigma fun a => ({b a} : Multiset β)) = {⟨a, b a⟩} :=\n  rfl\n#align sigma_singleton sigma_singleton\n\n",
 "sigma_add":
 "@[simp]\ntheorem sigma_add : ∀ t u : ∀ a, Multiset (σ a), (s.sigma fun a => t a + u a) = s.sigma t + s.sigma u :=\n  Multiset.induction_on s (fun t u => rfl) fun a s IH t u => by rw [cons_sigma, IH] <;> simp <;> cc\n#align sigma_add sigma_add\n\n",
 "rel_join":
 "theorem rel_join {r : α → β → Prop} {s t} (h : Rel (Rel r) s t) : Rel r s.join t.join :=\n  by\n  induction h\n  case zero => simp\n  case cons a b s t hab hst ih => simpa using hab.add ih\n#align rel_join rel_join\n\n",
 "rel_bind":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⇒ » -/\ntheorem rel_bind {r : α → β → Prop} {p : γ → δ → Prop} {s t} {f : α → Multiset γ} {g : β → Multiset δ}\n    (h : («expr ⇒ » r (Rel p)) f g) (hst : Rel r s t) : Rel p (s.bind f) (t.bind g) :=\n  by\n  apply rel_join\n  rw [rel_map]\n  exact hst.mono fun a ha b hb hr => h hr\n#align rel_bind rel_bind\n\n",
 "product_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem product_zero : multiset.product s (0 : Multiset β) = 0 := by simp [product]\n#align product_zero product_zero\n\n",
 "product_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem product_singleton : multiset.product ({a} : Multiset α) ({b} : Multiset β) = {(a, b)} := by\n  simp only [product, bind_singleton, map_singleton]\n#align product_singleton product_singleton\n\n",
 "product_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem product_cons : multiset.product s («expr ::ₘ » b t) = (s.map fun a => (a, b)) + multiset.product s t := by\n  simp [product]\n#align product_cons product_cons\n\n",
 "product_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem product_add (s : Multiset α) :\n    ∀ t u : Multiset β, multiset.product s (t + u) = multiset.product s t + multiset.product s u :=\n  Multiset.induction_on s (fun t u => rfl) fun a s IH t u => by rw [cons_product, IH] <;> simp <;> cc\n#align product_add product_add\n\n",
 "prod_bind":
 "@[simp, to_additive]\ntheorem prod_bind [comm_monoid β] (s : Multiset α) (t : α → Multiset β) :\n    (s.bind t).prod = (s.map fun a => (t a).prod).prod :=\n  Multiset.induction_on s (by simp) fun a s ih => by simp [ih, cons_bind]\n#align prod_bind prod_bind\n\n",
 "mem_sigma":
 "@[simp]\ntheorem mem_sigma {s t} : ∀ {p : Σa, σ a}, p ∈ @Multiset.sigma α σ s t ↔ p.1 ∈ s ∧ p.2 ∈ t p.1\n  | ⟨a, b⟩ => by simp [Multiset.sigma, and_assoc', and_left_comm]\n#align mem_sigma mem_sigma\n\n",
 "mem_product":
 "@[simp]\ntheorem mem_product {s t} : ∀ {p : α × β}, p ∈ @product α β s t ↔ p.1 ∈ s ∧ p.2 ∈ t\n  | (a, b) => by simp [product, and_left_comm]\n#align mem_product mem_product\n\n",
 "mem_join":
 "@[simp]\ntheorem mem_join {a S} : a ∈ @join α S ↔ ∃ s ∈ S, a ∈ s :=\n  Multiset.induction_on S (by simp) <| by simp (config := { contextual := true }) [or_and_right, exists_or]\n#align mem_join mem_join\n\n",
 "mem_bind":
 "@[simp]\ntheorem mem_bind {b s} {f : α → Multiset β} : b ∈ bind s f ↔ ∃ a ∈ s, b ∈ f a := by\n  simp [bind] <;> simp [-exists_and_right, exists_and_distrib_right.symm] <;> rw [exists_swap] <;> simp [and_assoc']\n#align mem_bind mem_bind\n\n",
 "map_bind":
 "#print map_bind /-\ntheorem map_bind (m : Multiset α) (n : α → Multiset β) (f : β → γ) : map f (bind m n) = bind m fun a => map f (n a) :=\n  Multiset.induction_on m (by simp) (by simp (config := { contextual := true }))\n#align map_bind map_bind\n-/\n\n",
 "le_bind":
 "theorem le_bind {α β : Type _} {f : α → Multiset β} (S : Multiset α) {x : α} (hx : x ∈ S) : f x ≤ S.bind f := by\n  classical\n    rw [le_iff_count]\n    intro a\n    rw [count_bind]\n    apply le_sum_of_mem\n    rw [mem_map]\n    exact ⟨x, hx, rfl⟩\n#align le_bind le_bind\n\n",
 "join_zero":
 "@[simp]\ntheorem join_zero : @join α 0 = 0 :=\n  rfl\n#align join_zero join_zero\n\n",
 "join_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem join_cons (s S) : @join α («expr ::ₘ » s S) = s + join S :=\n  sum_cons _ _\n#align join_cons join_cons\n\n",
 "join_add":
 "@[simp]\ntheorem join_add (S T) : @join α (S + T) = join S + join T :=\n  sum_add _ _\n#align join_add join_add\n\n",
 "count_sum":
 "theorem count_sum [decidable_eq α] {m : Multiset β} {f : β → Multiset α} {a : α} :\n    count a (map f m).sum = sum (m.map fun b => count a <| f b) :=\n  Multiset.induction_on m (by simp) (by simp)\n#align count_sum count_sum\n\n",
 "count_bind":
 "theorem count_bind [decidable_eq α] {m : Multiset β} {f : β → Multiset α} {a : α} :\n    count a (bind m f) = sum (m.map fun b => count a <| f b) :=\n  count_sum\n#align count_bind count_bind\n\n",
 "cons_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem cons_sigma : («expr ::ₘ » a s).sigma t = (t a).map (sigma.mk a) + s.sigma t := by simp [Multiset.sigma]\n#align cons_sigma cons_sigma\n\n",
 "cons_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem cons_product : multiset.product («expr ::ₘ » a s) t = map (prod.mk a) t + multiset.product s t := by\n  simp [product]\n#align cons_product cons_product\n\n",
 "cons_bind":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem cons_bind : («expr ::ₘ » a s).bind f = f a + s.bind f := by simp [bind]\n#align cons_bind cons_bind\n\n",
 "coe_sigma":
 "@[simp]\ntheorem coe_sigma (l₁ : list α) (l₂ : ∀ a, list (σ a)) : (@Multiset.sigma α σ l₁ fun a => l₂ a) = l₁.sigma l₂ := by\n  rw [Multiset.sigma, List.sigma, ← coe_bind] <;> simp\n#align coe_sigma coe_sigma\n\n",
 "coe_product":
 "-- This notation binds more strongly than (pre)images, unions and intersections.\n@[simp]\ntheorem coe_product (l₁ : list α) (l₂ : list β) : @product α β l₁ l₂ = l₁.product l₂ :=\n  by\n  rw [product, List.product, ← coe_bind]\n  simp\n#align coe_product coe_product\n\n",
 "coe_join":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem coe_join : ∀ L : list (list α), join (L.map (@coe _ (Multiset α) _) : Multiset (Multiset α)) = L.join\n  | [] => rfl\n  | l :: L => congr_arg (fun s : Multiset α => ↑l + s) (coe_join L)\n#align coe_join coe_join\n\n",
 "coe_bind":
 "@[simp]\ntheorem coe_bind (l : list α) (f : α → list β) : (@bind α β l fun a => f a) = l.bind f := by\n  rw [list.bind, ← coe_join, list.map_map] <;> rfl\n#align coe_bind coe_bind\n\n",
 "card_sigma":
 "@[simp]\ntheorem card_sigma : card (s.sigma t) = sum (map (fun a => card (t a)) s) := by simp [Multiset.sigma, (· ∘ ·)]\n#align card_sigma card_sigma\n\n",
 "card_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem card_product : (multiset.product s t).card = s.card * t.card := by simp [product]\n#align card_product card_product\n\n",
 "card_join":
 "@[simp]\ntheorem card_join (S) : card (@join α S) = sum (map card S) :=\n  Multiset.induction_on S (by simp) (by simp)\n#align card_join card_join\n\n",
 "card_bind":
 "@[simp]\ntheorem card_bind : (s.bind f).card = (s.map (card ∘ f)).sum := by simp [bind]\n#align card_bind card_bind\n\n",
 "bind_zero":
 "@[simp]\ntheorem bind_zero : s.bind (fun a => 0 : α → Multiset β) = 0 := by simp [bind, join, nsmul_zero]\n#align bind_zero bind_zero\n\n",
 "bind_singleton":
 "@[simp]\ntheorem bind_singleton (f : α → β) : (s.bind fun x => ({f x} : Multiset β)) = map f s :=\n  Multiset.induction_on s (by rw [zero_bind, map_zero]) (by simp [singleton_add])\n#align bind_singleton bind_singleton\n\n",
 "bind_map_comm":
 "theorem bind_map_comm (m : Multiset α) (n : Multiset β) {f : α → β → γ} :\n    (bind m fun a => n.map fun b => f a b) = bind n fun b => m.map fun a => f a b :=\n  Multiset.induction_on m (by simp) (by simp (config := { contextual := true }))\n#align bind_map_comm bind_map_comm\n\n",
 "bind_map":
 "theorem bind_map (m : Multiset α) (n : β → Multiset γ) (f : α → β) : bind (map f m) n = bind m fun a => n (f a) :=\n  Multiset.induction_on m (by simp) (by simp (config := { contextual := true }))\n#align bind_map bind_map\n\n",
 "bind_hcongr":
 "theorem bind_hcongr {β' : Type _} {m : Multiset α} {f : α → Multiset β} {f' : α → Multiset β'} (h : β = β')\n    (hf : ∀ a ∈ m, HEq (f a) (f' a)) : HEq (bind m f) (bind m f') := by subst h; simp at hf; simp [bind_congr hf]\n#align bind_hcongr bind_hcongr\n\n",
 "bind_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem bind_cons (f : α → β) (g : α → Multiset β) : (s.bind fun a => «expr ::ₘ » (f a) (g a)) = map f s + s.bind g :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [add_comm, add_left_comm])\n#align bind_cons bind_cons\n\n",
 "bind_congr":
 "#print bind_congr /-\ntheorem bind_congr {f g : α → Multiset β} {m : Multiset α} : (∀ a ∈ m, f a = g a) → bind m f = bind m g := by\n  simp (config := { contextual := true }) [bind]\n#align bind_congr bind_congr\n-/\n\n",
 "bind_bind":
 "theorem bind_bind (m : Multiset α) (n : Multiset β) {f : α → β → Multiset γ} :\n    (bind m fun a => bind n fun b => f a b) = bind n fun b => bind m fun a => f a b :=\n  Multiset.induction_on m (by simp) (by simp (config := { contextual := true }))\n#align bind_bind bind_bind\n\n",
 "bind_assoc":
 "theorem bind_assoc {s : Multiset α} {f : α → Multiset β} {g : β → Multiset γ} :\n    (s.bind f).bind g = s.bind fun a => (f a).bind g :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }))\n#align bind_assoc bind_assoc\n\n",
 "bind_add":
 "@[simp]\ntheorem bind_add : (s.bind fun a => f a + g a) = s.bind f + s.bind g := by simp [bind, join]\n#align bind_add bind_add\n\n",
 "attach_bind_coe":
 "@[simp]\ntheorem attach_bind_coe (s : Multiset α) (f : α → Multiset β) : (s.attach.bind fun i => f i) = s.bind f :=\n  congr_arg join <| attach_map_val' _ _\n#align attach_bind_coe attach_bind_coe\n\n",
 "add_sigma":
 "@[simp]\ntheorem add_sigma (s t : Multiset α) (u : ∀ a, Multiset (σ a)) : (s + t).sigma u = s.sigma u + t.sigma u := by\n  simp [Multiset.sigma]\n#align add_sigma add_sigma\n\n",
 "add_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `multiset.product -/\n@[simp]\ntheorem add_product (s t : Multiset α) (u : Multiset β) :\n    multiset.product (s + t) u = multiset.product s u + multiset.product t u := by simp [product]\n#align add_product add_product\n\n",
 "add_bind":
 "@[simp]\ntheorem add_bind : (s + t).bind f = s.bind f + t.bind f := by simp [bind]\n#align add_bind add_bind\n\n"}