{"prod_map_add":
 "theorem prod_map_add [CommSemiring β] {s : Multiset α} {f g : α → β} :\n    prod (s.map fun a => f a + g a) = sum ((antidiagonal s).map fun p => (p.1.map f).prod * (p.2.map g).prod) :=\n  by\n  refine' s.induction_on _ _\n  · simp\n  · intro a s ih\n    have := @sum_map_mul_left α β _\n    simp [ih, add_mul, mul_comm, mul_left_comm (f a), mul_left_comm (g a), mul_assoc, sum_map_mul_left.symm]\n    cc\n#align prod_map_add prod_map_add\n\n",
 "mem_antidiagonal":
 "/-- A pair `(t₁, t₂)` of multisets is contained in `antidiagonal s`\n    if and only if `t₁ + t₂ = s`. -/\n@[simp]\ntheorem mem_antidiagonal {s : Multiset α} {x : Multiset α × Multiset α} : x ∈ antidiagonal s ↔ x.1 + x.2 = s :=\n  Quotient.inductionOn s fun l => by\n    simp [antidiagonal_coe]; refine' ⟨fun h => revzip_powerset_aux h, fun h => _⟩\n    haveI := classical.dec_eq α\n    simp [revzip_powerset_aux_lemma l revzip_powerset_aux, h.symm]\n    cases' x with x₁ x₂\n    dsimp only\n    exact ⟨x₁, le_add_right _ _, by rw [add_tsub_cancel_left x₁ x₂]⟩\n#align mem_antidiagonal mem_antidiagonal\n\n",
 "card_antidiagonal":
 "@[simp]\ntheorem card_antidiagonal (s : Multiset α) : card (antidiagonal s) = 2 ^ card s := by\n  have := card_powerset s <;> rwa [← antidiagonal_map_fst, card_map] at this\n#align card_antidiagonal card_antidiagonal\n\n",
 "antidiagonal_zero":
 "@[simp]\ntheorem antidiagonal_zero : @antidiagonal α 0 = {(0, 0)} :=\n  rfl\n#align antidiagonal_zero antidiagonal_zero\n\n",
 "antidiagonal_map_snd":
 "@[simp]\ntheorem antidiagonal_map_snd (s : Multiset α) : (antidiagonal s).map prod.snd = powerset s :=\n  Quotient.inductionOn s fun l => by simp [powerset_aux']\n#align antidiagonal_map_snd antidiagonal_map_snd\n\n",
 "antidiagonal_map_fst":
 "@[simp]\ntheorem antidiagonal_map_fst (s : Multiset α) : (antidiagonal s).map prod.fst = powerset s :=\n  Quotient.inductionOn s fun l => by simp [powerset_aux']\n#align antidiagonal_map_fst antidiagonal_map_fst\n\n",
 "antidiagonal_eq_map_powerset":
 "theorem antidiagonal_eq_map_powerset [decidable_eq α] (s : Multiset α) :\n    s.antidiagonal = s.powerset.map fun t => (s - t, t) :=\n  by\n  induction' s using Multiset.induction_on with a s hs\n  · simp only [antidiagonal_zero, powerset_zero, zero_tsub, map_singleton]\n  · simp_rw [antidiagonal_cons, powerset_cons, map_add, hs, map_map, function.comp, prod.map_mk, id.def, sub_cons,\n      erase_cons_head]\n    rw [add_comm]\n    congr 1\n    refine' Multiset.map_congr rfl fun x hx => _\n    rw [cons_sub_of_le _ (mem_powerset.mp hx)]\n#align antidiagonal_eq_map_powerset antidiagonal_eq_map_powerset\n\n",
 "antidiagonal_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem antidiagonal_cons (a : α) (s) :\n    antidiagonal («expr ::ₘ » a s) =\n      map (prod.map id (cons a)) (antidiagonal s) + map (prod.map (cons a) id) (antidiagonal s) :=\n  Quotient.inductionOn s fun l =>\n    by\n    simp only [revzip, reverse_append, quot_mk_to_coe, coe_eq_coe, powerset_aux'_cons, cons_coe, coe_map,\n      antidiagonal_coe', coe_add]\n    rw [← zip_map, ← zip_map, zip_append, (_ : _ ++ _ = _)]\n    · congr <;> simp; · simp\n#align antidiagonal_cons antidiagonal_cons\n\n",
 "antidiagonal_coe'":
 "@[simp]\ntheorem antidiagonal_coe' (l : list α) : @antidiagonal α l = revzip (powersetAux' l) :=\n  quot.sound revzip_powersetAux_perm_aux'\n#align antidiagonal_coe' antidiagonal_coe'\n\n",
 "antidiagonal_coe":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem antidiagonal_coe (l : list α) : @antidiagonal α l = revzip (powersetAux l) :=\n  rfl\n#align antidiagonal_coe antidiagonal_coe\n\n"}