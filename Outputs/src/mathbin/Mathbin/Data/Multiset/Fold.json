{"max_nat_le_of_forall_le":
 "theorem max_nat_le_of_forall_le (l : Multiset ℕ) (n : ℕ) (h : ∀ x ∈ l, x ≤ n) : l.fold max 0 ≤ n :=\n  max_le_of_forall_le l n h\n#align max_nat_le_of_forall_le max_nat_le_of_forall_le\n\n",
 "max_le_of_forall_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem max_le_of_forall_le {α : Type _} [CanonicallyLinearOrderedAddMonoid α] (l : Multiset α) (n : α)\n    (h : ∀ x ∈ l, x ≤ n) : l.fold max («expr⊥») ≤ n :=\n  by\n  induction l using Quotient.inductionOn\n  simpa using List.max_le_of_forall_le _ _ h\n#align max_le_of_forall_le max_le_of_forall_le\n\n",
 "le_smul_dedup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem le_smul_dedup [DecidableEq α] (s : Multiset α) : ∃ n : ℕ, s ≤ «expr • » n (dedup s) :=\n  ⟨(s.map fun a => count a s).fold max 0,\n    le_iff_count.2 fun a => by\n      rw [count_nsmul]; by_cases a ∈ s\n      · refine' le_trans _ (nat.mul_le_mul_left _ <| count_pos.2 <| mem_dedup.2 h)\n        have : count a s ≤ fold max 0 (map (fun a => count a s) («expr ::ₘ » a (erase s a))) <;> [simp [le_max_left],\n          simpa [cons_erase h] ]\n      · simp [count_eq_zero.2 h, nat.zero_le]⟩\n#align le_smul_dedup le_smul_dedup\n\n",
 "fold_zero":
 "@[simp]\ntheorem fold_zero (b : α) : (0 : Multiset α).fold op b = b :=\n  rfl\n#align fold_zero fold_zero\n\n",
 "fold_union_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_union_inter [DecidableEq α] (s₁ s₂ : Multiset α) (b₁ b₂ : α) :\n    op ((s₁ ∪ s₂).fold op b₁) ((s₁ ∩ s₂).fold op b₂) = op (s₁.fold op b₁) (s₂.fold op b₂) := by\n  rw [← fold_add op, union_add_inter, fold_add op]\n#align fold_union_inter fold_union_inter\n\n",
 "fold_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_singleton (b a : α) : ({a} : Multiset α).fold op b = op a b :=\n  foldr_singleton _ _ _ _\n#align fold_singleton fold_singleton\n\n",
 "fold_hom":
 "theorem fold_hom {op' : β → β → β} [is_commutative β op'] [is_associative β op'] {m : α → β}\n    (hm : ∀ x y, m (op x y) = op' (m x) (m y)) (b : α) (s : Multiset α) : (s.map m).fold op' (m b) = m (s.fold op b) :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [hm])\n#align fold_hom fold_hom\n\n",
 "fold_eq_foldr":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem fold_eq_foldr (b : α) (s : Multiset α) : fold op b s = foldr op (left_comm _ hc.comm ha.assoc) b s :=\n  rfl\n#align fold_eq_foldr fold_eq_foldr\n\n",
 "fold_eq_foldl":
 "theorem fold_eq_foldl (b : α) (s : Multiset α) : fold op b s = foldl op (right_comm _ hc.comm ha.assoc) b s :=\n  Quot.inductionOn s fun l => coe_fold_l _ _ _\n#align fold_eq_foldl fold_eq_foldl\n\n",
 "fold_distrib":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_distrib {f g : β → α} (u₁ u₂ : α) (s : Multiset β) :\n    (s.map fun x => op (f x) (g x)).fold op (op u₁ u₂) = op ((s.map f).fold op u₁) ((s.map g).fold op u₂) :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) <;> cc)\n#align fold_distrib fold_distrib\n\n",
 "fold_dedup_idem":
 "@[simp]\ntheorem fold_dedup_idem [DecidableEq α] [hi : is_idempotent α op] (s : Multiset α) (b : α) :\n    (dedup s).fold op b = s.fold op b :=\n  Multiset.induction_on s (by simp) fun a s IH =>\n    by\n    by_cases a ∈ s <;> simp [IH, h]\n    show fold op b s = op a (fold op b s)\n    rw [← cons_erase h, fold_cons_left, ← ha.assoc, hi.idempotent]\n#align fold_dedup_idem fold_dedup_idem\n\n",
 "fold_cons_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_cons_right (b a : α) (s : Multiset α) : («expr ::ₘ » a s).fold op b = op (s.fold op b) a := by\n  simp [hc.comm]\n#align fold_cons_right fold_cons_right\n\n",
 "fold_cons_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\n@[simp]\ntheorem fold_cons_left : ∀ (b a : α) (s : Multiset α), («expr ::ₘ » a s).fold op b = op a (s.fold op b) :=\n  foldr_cons _ _\n#align fold_cons_left fold_cons_left\n\n",
 "fold_cons'_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_cons'_right (b a : α) (s : Multiset α) : («expr ::ₘ » a s).fold op b = s.fold op (op b a) := by\n  rw [fold_eq_foldl, foldl_cons, ← fold_eq_foldl]\n#align fold_cons'_right fold_cons'_right\n\n",
 "fold_cons'_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_cons'_left (b a : α) (s : Multiset α) : («expr ::ₘ » a s).fold op b = s.fold op (op a b) := by\n  rw [fold_cons'_right, hc.comm]\n#align fold_cons'_left fold_cons'_left\n\n",
 "fold_bind":
 "theorem fold_bind {ι : Type _} (s : Multiset ι) (t : ι → Multiset α) (b : ι → α) (b₀ : α) :\n    (s.bind t).fold op ((s.map b).fold op b₀) = (s.map fun i => (t i).fold op (b i)).fold op b₀ :=\n  by\n  induction' s using Multiset.induction_on with a ha ih\n  · rw [zero_bind, map_zero, map_zero, fold_zero]\n  · rw [cons_bind, map_cons, map_cons, fold_cons_left, fold_cons_left, fold_add, ih]\n#align fold_bind fold_bind\n\n",
 "fold_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `op -/\ntheorem fold_add (b₁ b₂ : α) (s₁ s₂ : Multiset α) : (s₁ + s₂).fold op (op b₁ b₂) = op (s₁.fold op b₁) (s₂.fold op b₂) :=\n  Multiset.induction_on s₂ (by rw [add_zero, fold_zero, ← fold_cons'_right, ← fold_cons_right op])\n    (by simp (config := { contextual := true }) <;> cc)\n#align fold_add fold_add\n\n",
 "coe_fold_r":
 "@[simp]\ntheorem coe_fold_r (b : α) (l : List α) : fold op b l = l.foldr op b :=\n  rfl\n#align coe_fold_r coe_fold_r\n\n",
 "coe_fold_l":
 "theorem coe_fold_l (b : α) (l : List α) : fold op b l = l.foldl op b :=\n  (coe_foldr_swap op _ b l).trans <| by simp [hc.comm]\n#align coe_fold_l coe_fold_l\n\n"}