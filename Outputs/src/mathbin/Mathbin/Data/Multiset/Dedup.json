{"subset_dedup'":
 "@[simp]\ntheorem subset_dedup' {s t : Multiset α} : s ⊆ dedup t ↔ s ⊆ t :=\n  ⟨fun h => Subset.trans h (dedup_subset _), fun h => Subset.trans h (subset_dedup _)⟩\n#align subset_dedup' subset_dedup'\n\n",
 "subset_dedup":
 "theorem subset_dedup (s : Multiset α) : s ⊆ dedup s := fun a => mem_dedup.2\n#align subset_dedup subset_dedup\n\n",
 "nodup_dedup":
 "@[simp]\ntheorem nodup_dedup (s : Multiset α) : Nodup (dedup s) :=\n  Quot.inductionOn s nodup_dedup\n#align nodup_dedup nodup_dedup\n\n",
 "mem_dedup":
 "@[simp]\ntheorem mem_dedup {a : α} {s : Multiset α} : a ∈ dedup s ↔ a ∈ s :=\n  Quot.inductionOn s fun l => mem_dedup\n#align mem_dedup mem_dedup\n\n",
 "le_nsmul_iff_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Multiset.Nodup.le_nsmul_iff_le /-\ntheorem Multiset.Nodup.le_nsmul_iff_le {α : Type _} {s t : Multiset α} {n : ℕ} (h : s.nodup) (hn : n ≠ 0) :\n    s ≤ «expr • » n t ↔ s ≤ t := by\n  classical\n    rw [← h.le_dedup_iff_le, iff.comm, ← h.le_dedup_iff_le]\n    simp [hn]\n#align multiset.nodup.le_nsmul_iff_le Multiset.Nodup.le_nsmul_iff_le\n-/\n\n",
 "le_dedup_self":
 "theorem le_dedup_self {s : Multiset α} : s ≤ dedup s ↔ Nodup s := by rw [le_dedup, and_iff_right le_rfl]\n#align le_dedup_self le_dedup_self\n\n",
 "le_dedup_iff_le":
 "theorem nodup.le_dedup_iff_le {s t : Multiset α} (hno : s.nodup) : s ≤ t.dedup ↔ s ≤ t := by simp [le_dedup, hno]\n#align nodup.le_dedup_iff_le nodup.le_dedup_iff_le\n\n",
 "le_dedup":
 "theorem le_dedup {s t : Multiset α} : s ≤ dedup t ↔ s ≤ t ∧ Nodup s :=\n  ⟨fun h => ⟨le_trans h (dedup_le _), nodup_of_le h (nodup_dedup _)⟩, fun ⟨l, d⟩ =>\n    (le_iff_subset d).2 <| Subset.trans (subset_of_le l) (subset_dedup _)⟩\n#align le_dedup le_dedup\n\n",
 "dedup_zero":
 "@[simp]\ntheorem dedup_zero : @dedup α _ 0 = 0 :=\n  rfl\n#align dedup_zero dedup_zero\n\n",
 "dedup_subset'":
 "@[simp]\ntheorem dedup_subset' {s t : Multiset α} : dedup s ⊆ t ↔ s ⊆ t :=\n  ⟨Subset.trans (subset_dedup _), Subset.trans (dedup_subset _)⟩\n#align dedup_subset' dedup_subset'\n\n",
 "dedup_subset":
 "theorem dedup_subset (s : Multiset α) : dedup s ⊆ s :=\n  subset_of_le <| dedup_le _\n#align dedup_subset dedup_subset\n\n",
 "dedup_singleton":
 "@[simp]\ntheorem dedup_singleton {a : α} : dedup ({a} : Multiset α) = {a} :=\n  (nodup_singleton _).dedup\n#align dedup_singleton dedup_singleton\n\n",
 "dedup_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem dedup_nsmul {s : Multiset α} {n : ℕ} (h0 : n ≠ 0) : («expr • » n s).dedup = s.dedup :=\n  by\n  ext a\n  by_cases h : a ∈ s <;> simp [h, h0]\n#align dedup_nsmul dedup_nsmul\n\n",
 "dedup_map_dedup_eq":
 "theorem dedup_map_dedup_eq [DecidableEq β] (f : α → β) (s : Multiset α) : dedup (map f (dedup s)) = dedup (map f s) :=\n  by simp [dedup_ext]\n#align dedup_map_dedup_eq dedup_map_dedup_eq\n\n",
 "dedup_le":
 "theorem dedup_le (s : Multiset α) : dedup s ≤ s :=\n  Quot.inductionOn s fun l => (dedup_sublist _).subperm\n#align dedup_le dedup_le\n\n",
 "dedup_idempotent":
 "@[simp]\ntheorem dedup_idempotent {m : Multiset α} : m.dedup.dedup = m.dedup :=\n  Quot.inductionOn m fun l => @congr_arg _ _ _ _ coe dedup_idempotent\n#align dedup_idempotent dedup_idempotent\n\n",
 "dedup_ext":
 "theorem dedup_ext {s t : Multiset α} : dedup s = dedup t ↔ ∀ a, a ∈ s ↔ a ∈ t := by simp [nodup.ext]\n#align dedup_ext dedup_ext\n\n",
 "dedup_eq_zero":
 "theorem dedup_eq_zero {s : Multiset α} : dedup s = 0 ↔ s = 0 :=\n  ⟨fun h => eq_zero_of_subset_zero <| h ▸ subset_dedup _, fun h => h.symm ▸ dedup_zero⟩\n#align dedup_eq_zero dedup_eq_zero\n\n",
 "dedup_eq_self":
 "theorem dedup_eq_self {s : Multiset α} : dedup s = s ↔ Nodup s :=\n  ⟨fun e => e ▸ nodup_dedup s, Quot.inductionOn s fun l h => congr_arg coe h.dedup⟩\n#align dedup_eq_self dedup_eq_self\n\n",
 "dedup_cons_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem dedup_cons_of_not_mem {a : α} {s : Multiset α} : a ∉ s → dedup («expr ::ₘ » a s) = «expr ::ₘ » a (dedup s) :=\n  Quot.inductionOn s fun l m => congr_arg coe <| dedup_cons_of_not_mem m\n#align dedup_cons_of_not_mem dedup_cons_of_not_mem\n\n",
 "dedup_cons_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem dedup_cons_of_mem {a : α} {s : Multiset α} : a ∈ s → dedup («expr ::ₘ » a s) = dedup s :=\n  Quot.inductionOn s fun l m => @congr_arg _ _ _ _ coe <| dedup_cons_of_mem m\n#align dedup_cons_of_mem dedup_cons_of_mem\n\n",
 "dedup_bind_dedup":
 "@[simp]\ntheorem dedup_bind_dedup [DecidableEq β] (m : Multiset α) (f : α → Multiset β) :\n    (m.dedup.bind f).dedup = (m.bind f).dedup := by\n  ext x\n  simp_rw [count_dedup, mem_bind, mem_dedup]\n#align dedup_bind_dedup dedup_bind_dedup\n\n",
 "count_dedup":
 "theorem count_dedup (m : Multiset α) (a : α) : m.dedup.count a = if a ∈ m then 1 else 0 :=\n  Quot.inductionOn m fun l => count_dedup _ _\n#align count_dedup count_dedup\n\n",
 "coe_dedup":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem coe_dedup (l : List α) : @dedup α _ l = l.dedup :=\n  rfl\n#align coe_dedup coe_dedup\n\n"}