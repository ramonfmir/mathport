{"sort_zero":
 "@[simp]\ntheorem sort_zero : sort r 0 = [] :=\n  list.merge_sort_nil r\n#align sort_zero sort_zero\n\n",
 "sort_sorted":
 "@[simp]\ntheorem sort_sorted (s : Multiset α) : sorted r (sort r s) :=\n  Quot.inductionOn s fun l => sorted_merge_sort r _\n#align sort_sorted sort_sorted\n\n",
 "sort_singleton":
 "@[simp]\ntheorem sort_singleton (a : α) : sort r {a} = [a] :=\n  list.merge_sort_singleton r a\n#align sort_singleton sort_singleton\n\n",
 "sort_eq":
 "@[simp]\ntheorem sort_eq (s : Multiset α) : ↑(sort r s) = s :=\n  Quot.inductionOn s fun l => quot.sound <| perm_merge_sort _ _\n#align sort_eq sort_eq\n\n",
 "mem_sort":
 "@[simp]\ntheorem mem_sort {s : Multiset α} {a : α} : a ∈ sort r s ↔ a ∈ s := by rw [← mem_coe, sort_eq]\n#align mem_sort mem_sort\n\n",
 "length_sort":
 "@[simp]\ntheorem length_sort {s : Multiset α} : (sort r s).length = s.card :=\n  Quot.inductionOn s <| length_merge_sort _\n#align length_sort length_sort\n\n",
 "coe_sort":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem coe_sort (l : list α) : sort r l = merge_sort r l :=\n  rfl\n#align coe_sort coe_sort\n\n"}