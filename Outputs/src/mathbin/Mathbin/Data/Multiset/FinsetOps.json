{"zero_ndunion":
 "@[simp]\ntheorem zero_ndunion (s : Multiset α) : ndunion 0 s = s :=\n  Quot.inductionOn s fun l => rfl\n#align zero_ndunion zero_ndunion\n\n",
 "zero_ndinter":
 "@[simp]\ntheorem zero_ndinter (s : Multiset α) : ndinter 0 s = 0 :=\n  rfl\n#align zero_ndinter zero_ndinter\n\n",
 "subset_ndunion_right":
 "theorem subset_ndunion_right (s t : Multiset α) : t ⊆ ndunion s t :=\n  subset_of_le (le_ndunion_right s t)\n#align subset_ndunion_right subset_ndunion_right\n\n",
 "subset_ndunion_left":
 "theorem subset_ndunion_left (s t : Multiset α) : s ⊆ ndunion s t := fun a h => mem_ndunion.2 <| or.inl h\n#align subset_ndunion_left subset_ndunion_left\n\n",
 "ndunion_le_union":
 "theorem ndunion_le_union (s t : Multiset α) : ndunion s t ≤ s ∪ t :=\n  ndunion_le.2 ⟨subset_of_le (le_union_left _ _), le_union_right _ _⟩\n#align ndunion_le_union ndunion_le_union\n\n",
 "ndunion_le_add":
 "theorem ndunion_le_add (s t : Multiset α) : ndunion s t ≤ s + t :=\n  quotient.induction_on₂ s t fun l₁ l₂ => (union_sublist_append _ _).subperm\n#align ndunion_le_add ndunion_le_add\n\n",
 "ndunion_le":
 "theorem ndunion_le {s t u : Multiset α} : ndunion s t ≤ u ↔ s ⊆ u ∧ t ≤ u :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [ndinsert_le, and_comm', and_left_comm])\n#align ndunion_le ndunion_le\n\n",
 "ndunion_eq_union":
 "@[simp]\ntheorem ndunion_eq_union {s t : Multiset α} (d : Nodup s) : ndunion s t = s ∪ t :=\n  le_antisymm (ndunion_le_union _ _) <| union_le (le_ndunion_left _ d) (le_ndunion_right _ _)\n#align ndunion_eq_union ndunion_eq_union\n\n",
 "ndunion":
 "theorem nodup.ndunion (s : Multiset α) {t : Multiset α} : Nodup t → Nodup (ndunion s t) :=\n  quotient.induction_on₂ s t fun l₁ l₂ => List.Nodup.union _\n#align nodup.ndunion nodup.ndunion\n\n",
 "ndinter_subset_right":
 "theorem ndinter_subset_right (s t : Multiset α) : ndinter s t ⊆ t :=\n  (le_ndinter.1 le_rfl).2\n#align ndinter_subset_right ndinter_subset_right\n\n",
 "ndinter_subset_left":
 "theorem ndinter_subset_left (s t : Multiset α) : ndinter s t ⊆ s :=\n  subset_of_le (ndinter_le_left s t)\n#align ndinter_subset_left ndinter_subset_left\n\n",
 "ndinter_le_right":
 "theorem ndinter_le_right {s} (t : Multiset α) (d : Nodup s) : ndinter s t ≤ t :=\n  (le_iff_subset <| d.ndinter _).2 <| ndinter_subset_right _ _\n#align ndinter_le_right ndinter_le_right\n\n",
 "ndinter_le_left":
 "theorem ndinter_le_left (s t : Multiset α) : ndinter s t ≤ s :=\n  (le_ndinter.1 le_rfl).1\n#align ndinter_le_left ndinter_le_left\n\n",
 "ndinter_eq_zero_iff_disjoint":
 "theorem ndinter_eq_zero_iff_disjoint {s t : Multiset α} : ndinter s t = 0 ↔ Disjoint s t := by\n  rw [← subset_zero] <;> simp [subset_iff, Disjoint]\n#align ndinter_eq_zero_iff_disjoint ndinter_eq_zero_iff_disjoint\n\n",
 "ndinter_eq_inter":
 "@[simp]\ntheorem ndinter_eq_inter {s t : Multiset α} (d : Nodup s) : ndinter s t = s ∩ t :=\n  le_antisymm (le_inter (ndinter_le_left _ _) (ndinter_le_right _ d)) (inter_le_ndinter _ _)\n#align ndinter_eq_inter ndinter_eq_inter\n\n",
 "ndinter_cons_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem ndinter_cons_of_not_mem {a : α} (s : Multiset α) {t : Multiset α} (h : a ∉ t) :\n    ndinter («expr ::ₘ » a s) t = ndinter s t := by simp [ndinter, h]\n#align ndinter_cons_of_not_mem ndinter_cons_of_not_mem\n\n",
 "ndinter":
 "@[simp]\ntheorem nodup.ndinter {s : Multiset α} (t : Multiset α) : Nodup s → Nodup (ndinter s t) :=\n  Nodup.filter _\n#align nodup.ndinter nodup.ndinter\n\n",
 "ndinsert_zero":
 "@[simp]\ntheorem ndinsert_zero (a : α) : ndinsert a 0 = {a} :=\n  rfl\n#align ndinsert_zero ndinsert_zero\n\n",
 "ndinsert_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem ndinsert_of_not_mem {a : α} {s : Multiset α} : a ∉ s → ndinsert a s = «expr ::ₘ » a s :=\n  Quot.inductionOn s fun l h => congr_arg coe <| insert_of_not_mem h\n#align ndinsert_of_not_mem ndinsert_of_not_mem\n\n",
 "ndinsert_of_mem":
 "@[simp]\ntheorem ndinsert_of_mem {a : α} {s : Multiset α} : a ∈ s → ndinsert a s = s :=\n  Quot.inductionOn s fun l h => congr_arg coe <| insert_of_mem h\n#align ndinsert_of_mem ndinsert_of_mem\n\n",
 "ndinsert_le":
 "theorem ndinsert_le {a : α} {s t : Multiset α} : ndinsert a s ≤ t ↔ s ≤ t ∧ a ∈ t :=\n  ⟨fun h => ⟨le_trans (le_ndinsert_self _ _) h, mem_of_le h (mem_ndinsert_self _ _)⟩, fun ⟨l, m⟩ =>\n    if h : a ∈ s then by simp [h, l]\n    else by\n      rw [ndinsert_of_not_mem h, ← cons_erase m, cons_le_cons_iff, ← le_cons_of_not_mem h, cons_erase m] <;> exact l⟩\n#align ndinsert_le ndinsert_le\n\n",
 "ndinsert":
 "theorem nodup.ndinsert (a : α) : Nodup s → Nodup (ndinsert a s) :=\n  Quot.inductionOn s fun l => Nodup.insert\n#align nodup.ndinsert nodup.ndinsert\n\n",
 "mem_ndunion":
 "@[simp]\ntheorem mem_ndunion {s t : Multiset α} {a : α} : a ∈ ndunion s t ↔ a ∈ s ∨ a ∈ t :=\n  quotient.induction_on₂ s t fun l₁ l₂ => List.mem_union\n#align mem_ndunion mem_ndunion\n\n",
 "mem_ndinter":
 "@[simp]\ntheorem mem_ndinter {s t : Multiset α} {a : α} : a ∈ ndinter s t ↔ a ∈ s ∧ a ∈ t :=\n  mem_filter\n#align mem_ndinter mem_ndinter\n\n",
 "mem_ndinsert_self":
 "@[simp]\ntheorem mem_ndinsert_self (a : α) (s : Multiset α) : a ∈ ndinsert a s :=\n  mem_ndinsert.2 (or.inl rfl)\n#align mem_ndinsert_self mem_ndinsert_self\n\n",
 "mem_ndinsert_of_mem":
 "theorem mem_ndinsert_of_mem {a b : α} {s : Multiset α} (h : a ∈ s) : a ∈ ndinsert b s :=\n  mem_ndinsert.2 (or.inr h)\n#align mem_ndinsert_of_mem mem_ndinsert_of_mem\n\n",
 "mem_ndinsert":
 "@[simp]\ntheorem mem_ndinsert {a b : α} {s : Multiset α} : a ∈ ndinsert b s ↔ a = b ∨ a ∈ s :=\n  Quot.inductionOn s fun l => mem_insert_iff\n#align mem_ndinsert mem_ndinsert\n\n",
 "length_ndinsert_of_not_mem":
 "@[simp]\ntheorem length_ndinsert_of_not_mem {a : α} {s : Multiset α} (h : a ∉ s) : card (ndinsert a s) = card s + 1 := by\n  simp [h]\n#align length_ndinsert_of_not_mem length_ndinsert_of_not_mem\n\n",
 "length_ndinsert_of_mem":
 "@[simp]\ntheorem length_ndinsert_of_mem {a : α} {s : Multiset α} (h : a ∈ s) : card (ndinsert a s) = card s := by simp [h]\n#align length_ndinsert_of_mem length_ndinsert_of_mem\n\n",
 "le_ndunion_right":
 "theorem le_ndunion_right (s t : Multiset α) : t ≤ ndunion s t :=\n  quotient.induction_on₂ s t fun l₁ l₂ => (suffix_union_right _ _).sublist.subperm\n#align le_ndunion_right le_ndunion_right\n\n",
 "le_ndunion_left":
 "theorem le_ndunion_left {s} (t : Multiset α) (d : Nodup s) : s ≤ ndunion s t :=\n  (le_iff_subset d).2 <| subset_ndunion_left _ _\n#align le_ndunion_left le_ndunion_left\n\n",
 "le_ndinter":
 "theorem le_ndinter {s t u : Multiset α} : s ≤ ndinter t u ↔ s ≤ t ∧ s ⊆ u := by simp [ndinter, le_filter, subset_iff]\n#align le_ndinter le_ndinter\n\n",
 "le_ndinsert_self":
 "@[simp]\ntheorem le_ndinsert_self (a : α) (s : Multiset α) : s ≤ ndinsert a s :=\n  Quot.inductionOn s fun l => (sublist_insert _ _).subperm\n#align le_ndinsert_self le_ndinsert_self\n\n",
 "inter_le_ndinter":
 "theorem inter_le_ndinter (s t : Multiset α) : s ∩ t ≤ ndinter s t :=\n  le_ndinter.2 ⟨inter_le_left _ _, subset_of_le <| inter_le_right _ _⟩\n#align inter_le_ndinter inter_le_ndinter\n\n",
 "disjoint_ndinsert_right":
 "@[simp]\ntheorem disjoint_ndinsert_right {a : α} {s t : Multiset α} : Disjoint s (ndinsert a t) ↔ a ∉ s ∧ Disjoint s t := by\n  rw [disjoint_comm, disjoint_ndinsert_left] <;> tauto\n#align disjoint_ndinsert_right disjoint_ndinsert_right\n\n",
 "disjoint_ndinsert_left":
 "@[simp]\ntheorem disjoint_ndinsert_left {a : α} {s t : Multiset α} : Disjoint (ndinsert a s) t ↔ a ∉ t ∧ Disjoint s t :=\n  iff.trans (by simp [Disjoint]) disjoint_cons_left\n#align disjoint_ndinsert_left disjoint_ndinsert_left\n\n",
 "dedup_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\ntheorem dedup_cons {a : α} {s : Multiset α} : dedup («expr ::ₘ » a s) = ndinsert a (dedup s) := by\n  by_cases a ∈ s <;> simp [h]\n#align dedup_cons dedup_cons\n\n",
 "dedup_add":
 "theorem dedup_add (s t : Multiset α) : dedup (s + t) = ndunion s (dedup t) :=\n  quotient.induction_on₂ s t fun l₁ l₂ => congr_arg coe <| dedup_append _ _\n#align dedup_add dedup_add\n\n",
 "cons_ndunion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem cons_ndunion (s t : Multiset α) (a : α) : ndunion («expr ::ₘ » a s) t = ndinsert a (ndunion s t) :=\n  quotient.induction_on₂ s t fun l₁ l₂ => rfl\n#align cons_ndunion cons_ndunion\n\n",
 "cons_ndinter_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem cons_ndinter_of_mem {a : α} (s : Multiset α) {t : Multiset α} (h : a ∈ t) :\n    ndinter («expr ::ₘ » a s) t = «expr ::ₘ » a (ndinter s t) := by simp [ndinter, h]\n#align cons_ndinter_of_mem cons_ndinter_of_mem\n\n",
 "coe_ndunion":
 "@[simp]\ntheorem coe_ndunion (l₁ l₂ : List α) : @ndunion α _ l₁ l₂ = (l₁ ∪ l₂ : List α) :=\n  rfl\n#align coe_ndunion coe_ndunion\n\n",
 "coe_ndinter":
 "@[simp]\ntheorem coe_ndinter (l₁ l₂ : List α) : @ndinter α _ l₁ l₂ = (l₁ ∩ l₂ : List α) :=\n  rfl\n#align coe_ndinter coe_ndinter\n\n",
 "coe_ndinsert":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem coe_ndinsert (a : α) (l : List α) : ndinsert a l = (insert a l : List α) :=\n  rfl\n#align coe_ndinsert coe_ndinsert\n\n",
 "attach_ndinsert":
 "theorem attach_ndinsert (a : α) (s : Multiset α) :\n    (s.ndinsert a).attach =\n      ndinsert ⟨a, mem_ndinsert_self a s⟩ (s.attach.map fun p => ⟨p.1, mem_ndinsert_of_mem p.2⟩) :=\n  have eq :\n    ∀ h : ∀ p : { x // x ∈ s }, p.1 ∈ s,\n      (fun p : { x // x ∈ s } => ⟨p.val, h p⟩ : { x // x ∈ s } → { x // x ∈ s }) = id :=\n    fun h => funext fun p => Subtype.eq rfl\n  have :\n    ∀ (t) (eq : s.ndinsert a = t),\n      t.attach = ndinsert ⟨a, Eq ▸ mem_ndinsert_self a s⟩ (s.attach.map fun p => ⟨p.1, Eq ▸ mem_ndinsert_of_mem p.2⟩) :=\n    by\n    intro t ht\n    by_cases a ∈ s\n    · rw [ndinsert_of_mem h] at ht\n      subst ht\n      rw [Eq, map_id, ndinsert_of_mem (mem_attach _ _)]\n    · rw [ndinsert_of_not_mem h] at ht\n      subst ht\n      simp [attach_cons, h]\n  this _ rfl\n#align attach_ndinsert attach_ndinsert\n\n"}