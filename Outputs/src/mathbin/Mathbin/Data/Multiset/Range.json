{"self_mem_range_succ":
 "theorem self_mem_range_succ (n : ℕ) : n ∈ range (n + 1) :=\n  List.self_mem_range_succ n\n#align self_mem_range_succ self_mem_range_succ\n\n",
 "range_zero":
 "@[simp]\ntheorem range_zero : range 0 = 0 :=\n  rfl\n#align range_zero range_zero\n\n",
 "range_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem range_succ (n : ℕ) : range (succ n) = «expr ::ₘ » n (range n) := by\n  rw [range, range_succ, ← coe_add, add_comm] <;> rfl\n#align range_succ range_succ\n\n",
 "range_subset":
 "theorem range_subset {m n : ℕ} : range m ⊆ range n ↔ m ≤ n :=\n  range_subset\n#align range_subset range_subset\n\n",
 "range_disjoint_map_add":
 "theorem range_disjoint_map_add (a : ℕ) (m : Multiset ℕ) : (range a).disjoint (m.map fun x => a + x) :=\n  by\n  intro x hxa hxb\n  rw [range, mem_coe, List.mem_range] at hxa\n  obtain ⟨c, _, rfl⟩ := mem_map.1 hxb\n  exact (self_le_add_right _ _).not_lt hxa\n#align range_disjoint_map_add range_disjoint_map_add\n\n",
 "range_add_eq_union":
 "theorem range_add_eq_union (a b : ℕ) : range (a + b) = range a ∪ (range b).map fun x => a + x :=\n  by\n  rw [range_add, add_eq_union_iff_disjoint]\n  apply range_disjoint_map_add\n#align range_add_eq_union range_add_eq_union\n\n",
 "range_add":
 "theorem range_add (a b : ℕ) : range (a + b) = range a + (range b).map fun x => a + x :=\n  congr_arg coe (List.range_add _ _)\n#align range_add range_add\n\n",
 "not_mem_range_self":
 "@[simp]\ntheorem not_mem_range_self {n : ℕ} : n ∉ range n :=\n  not_mem_range_self\n#align not_mem_range_self not_mem_range_self\n\n",
 "mem_range":
 "@[simp]\ntheorem mem_range {m n : ℕ} : m ∈ range n ↔ m < n :=\n  mem_range\n#align mem_range mem_range\n\n",
 "coe_range":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n-- range\ntheorem coe_range (n : ℕ) : ↑(list.range n) = range n :=\n  rfl\n#align coe_range coe_range\n\n",
 "card_range":
 "@[simp]\ntheorem card_range (n : ℕ) : card (range n) = n :=\n  length_range _\n#align card_range card_range\n\n"}