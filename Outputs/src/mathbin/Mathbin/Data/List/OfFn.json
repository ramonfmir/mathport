{"pairwise_of_fn":
 "@[simp]\ntheorem pairwise_of_fn {R : α → α → Prop} {n} {f : Fin n → α} : (ofFn f).pairwise R ↔ ∀ ⦃i j⦄, i < j → R (f i) (f j) :=\n  by\n  simp only [pairwise_iff_nth_le, Fin.forall_iff, length_of_fn, nth_le_of_fn', Fin.mk_lt_mk]\n  exact ⟨fun h i hi j hj hij => h _ _ hj hij, fun h i j hj hij => h _ (hij.trans hj) _ hj hij⟩\n#align pairwise_of_fn pairwise_of_fn\n\n",
 "of_fn_zero":
 "/-- `of_fn` on an empty domain is the empty list. -/\n@[simp]\ntheorem of_fn_zero (f : Fin 0 → α) : ofFn f = [] :=\n  rfl\n#align of_fn_zero of_fn_zero\n\n",
 "of_fn_succ'":
 "theorem of_fn_succ' {n} (f : Fin (succ n) → α) : ofFn f = (ofFn fun i => f i.cast_succ).concat (f (Fin.last _)) :=\n  by\n  induction' n with n IH\n  · rw [of_fn_zero, concat_nil, of_fn_succ, of_fn_zero]\n    rfl\n  · rw [of_fn_succ, IH, of_fn_succ, concat_cons, Fin.castSucc_zero]\n    congr 3\n    simp_rw [Fin.castSucc_fin_succ]\n#align of_fn_succ' of_fn_succ'\n\n",
 "of_fn_succ":
 "@[simp]\ntheorem of_fn_succ {n} (f : Fin (succ n) → α) : ofFn f = f 0 :: ofFn fun i => f i.succ :=\n  by\n  suffices ∀ {m h l}, of_fn_aux f (succ m) (succ_le_succ h) l = f 0 :: of_fn_aux (fun i => f i.succ) m h l from this\n  intros ; induction' m with m IH generalizing l; · rfl\n  rw [of_fn_aux, IH]; rfl\n#align of_fn_succ of_fn_succ\n\n",
 "of_fn_rec_of_fn":
 "@[simp]\ntheorem of_fn_rec_of_fn {C : List α → Sort _} (h : ∀ (n) (f : Fin n → α), C (List.ofFn f)) {n : ℕ} (f : Fin n → α) :\n    @ofFnRec _ C h (List.ofFn f) = h _ f :=\n  equivSigmaTuple.right_inverse_symm.cast_eq (fun s => h s.1 s.2) ⟨n, f⟩\n#align of_fn_rec_of_fn of_fn_rec_of_fn\n\n",
 "of_fn_nth_le":
 "theorem of_fn_nth_le : ∀ l : List α, (ofFn fun i => nthLe l i i.2) = l\n  | [] => rfl\n  | a :: l => by\n    rw [of_fn_succ]\n    congr\n    simp only [Fin.val_succ]\n    exact of_fn_nth_le l\n#align of_fn_nth_le of_fn_nth_le\n\n",
 "of_fn_mul'":
 "/-- This breaks a list of `m*n` items into `n` groups each containing `m` elements. -/\ntheorem of_fn_mul' {m n} (f : Fin (m * n) → α) :\n    List.ofFn f =\n      list.join\n        (List.ofFn fun i : Fin n =>\n          List.ofFn fun j : Fin m =>\n            f\n              ⟨m * i + j,\n                calc\n                  m * i + j < m * (i + 1) := (add_lt_add_left j.prop _).trans_eq (mul_add_one _ _).symm\n                  _ ≤ _ := nat.mul_le_mul_left _ i.prop\n                  ⟩) :=\n  by simp_rw [mul_comm m n, mul_comm m, of_fn_mul, Fin.cast_mk]\n#align of_fn_mul' of_fn_mul'\n\n",
 "of_fn_mul":
 "/-- This breaks a list of `m*n` items into `m` groups each containing `n` elements. -/\ntheorem of_fn_mul {m n} (f : Fin (m * n) → α) :\n    List.ofFn f =\n      list.join\n        (List.ofFn fun i : Fin m =>\n          List.ofFn fun j : Fin n =>\n            f\n              ⟨i * n + j,\n                calc\n                  ↑i * n + j < (i + 1) * n := (add_lt_add_left j.prop _).trans_eq (add_one_mul _ _).symm\n                  _ ≤ _ := nat.mul_le_mul_right _ i.prop\n                  ⟩) :=\n  by\n  induction' m with m IH\n  · simp_rw [of_fn_zero, MulZeroClass.zero_mul, of_fn_zero, join]\n  · simp_rw [of_fn_succ', succ_mul, join_concat, of_fn_add, IH]\n    rfl\n#align of_fn_mul of_fn_mul\n\n",
 "of_fn_injective":
 "/-- Note we can only state this when the two functions are indexed by defeq `n`. -/\ntheorem of_fn_injective {n : ℕ} : function.injective (ofFn : (Fin n → α) → List α) := fun f g h =>\n  eq_of_heq <| by injection of_fn_inj'.mp h\n#align of_fn_injective of_fn_injective\n\n",
 "of_fn_inj'":
 "/-- `fin.sigma_eq_iff_eq_comp_cast` may be useful to work with the RHS of this expression. -/\ntheorem of_fn_inj' {m n : ℕ} {f : Fin m → α} {g : Fin n → α} : ofFn f = ofFn g ↔ (⟨m, f⟩ : Σn, Fin n → α) = ⟨n, g⟩ :=\n  iff.symm <| equivSigmaTuple.symm.injective.eq_iff.symm\n#align of_fn_inj' of_fn_inj'\n\n",
 "of_fn_inj":
 "/-- A special case of `list.of_fn_inj'` for when the two functions are indexed by defeq `n`. -/\n@[simp]\ntheorem of_fn_inj {n : ℕ} {f g : Fin n → α} : ofFn f = ofFn g ↔ f = g :=\n  ofFn_injective.eq_iff\n#align of_fn_inj of_fn_inj\n\n",
 "of_fn_fin_repeat":
 "@[simp]\ntheorem of_fn_fin_repeat {m} (a : Fin m → α) (n : ℕ) :\n    List.ofFn (Fin.repeat n a) = (List.replicate n (List.ofFn a)).join := by\n  simp_rw [of_fn_mul, ← of_fn_const, Fin.repeat, Fin.modNat, Fin.val_mk, add_comm, nat.add_mul_mod_self_right,\n    nat.mod_eq_of_lt (Fin.is_lt _), Fin.eta]\n#align of_fn_fin_repeat of_fn_fin_repeat\n\n",
 "of_fn_fin_append":
 "@[simp]\ntheorem of_fn_fin_append {m n} (a : Fin m → α) (b : Fin n → α) :\n    List.ofFn (Fin.append a b) = List.ofFn a ++ List.ofFn b := by simp_rw [of_fn_add, Fin.append_left, Fin.append_right]\n#align of_fn_fin_append of_fn_fin_append\n\n",
 "of_fn_eq_nil_iff":
 "@[simp]\ntheorem of_fn_eq_nil_iff {n : ℕ} {f : Fin n → α} : ofFn f = [] ↔ n = 0 := by\n  cases n <;> simp only [of_fn_zero, of_fn_succ, eq_self_iff_true, nat.succ_ne_zero]\n#align of_fn_eq_nil_iff of_fn_eq_nil_iff\n\n",
 "of_fn_const":
 "@[simp]\ntheorem of_fn_const (n : ℕ) (c : α) : (ofFn fun i : Fin n => c) = replicate n c :=\n  nat.rec_on n (by simp) fun n ihn => by simp [ihn]\n#align of_fn_const of_fn_const\n\n",
 "of_fn_congr":
 "@[congr]\ntheorem of_fn_congr {m n : ℕ} (h : m = n) (f : Fin m → α) : ofFn f = ofFn fun i : Fin n => f (Fin.cast h.symm i) :=\n  by\n  subst h\n  simp_rw [Fin.cast_refl, OrderIso.refl_apply]\n#align of_fn_congr of_fn_congr\n\n",
 "of_fn_add":
 "/-- Note this matches the convention of `list.of_fn_succ'`, putting the `fin m` elements first. -/\ntheorem of_fn_add {m n} (f : Fin (m + n) → α) :\n    List.ofFn f = (List.ofFn fun i => f (Fin.castAdd n i)) ++ List.ofFn fun j => f (Fin.natAdd m j) :=\n  by\n  induction' n with n IH\n  · rw [of_fn_zero, append_nil, Fin.castAdd_zero, Fin.cast_refl]\n    rfl\n  · rw [of_fn_succ', of_fn_succ', IH, append_concat]\n    rfl\n#align of_fn_add of_fn_add\n\n",
 "nth_of_fn_aux":
 "theorem nth_of_fn_aux {n} (f : Fin n → α) (i) :\n    ∀ m h l, (∀ i, get? l i = ofFnNthVal f (i + m)) → get? (of_fn_aux f m h l) i = ofFnNthVal f i\n  | 0, h, l, H => H i\n  | succ m, h, l, H =>\n    nth_of_fn_aux m _ _\n      (by\n        intro j; cases' j with j\n        · simp only [nth, of_fn_nth_val, zero_add, dif_pos (show m < n from h)]\n        · simp only [nth, H, add_succ, succ_add])\n#align nth_of_fn_aux nth_of_fn_aux\n\n",
 "nth_of_fn":
 "/-- The `n`th element of a list -/\n@[simp]\ntheorem nth_of_fn {n} (f : Fin n → α) (i) : get? (ofFn f) i = ofFnNthVal f i :=\n  [anonymous] f _ _ _ _ fun i => by simp only [of_fn_nth_val, dif_neg (not_lt.2 (nat.le_add_left n i))] <;> rfl\n#align nth_of_fn nth_of_fn\n\n",
 "nth_le_of_fn'":
 "@[simp]\ntheorem nth_le_of_fn' {n} (f : Fin n → α) {i : ℕ} (h : i < (ofFn f).length) :\n    nthLe (ofFn f) i h = f ⟨i, length_ofFn f ▸ h⟩ :=\n  nthLe_ofFn f ⟨i, length_ofFn f ▸ h⟩\n#align nth_le_of_fn' nth_le_of_fn'\n\n",
 "nth_le_of_fn":
 "theorem nth_le_of_fn {n} (f : Fin n → α) (i : Fin n) : nthLe (ofFn f) i ((length_ofFn f).symm ▸ i.2) = f i :=\n  option.some.inj <| by rw [← nth_le_nth] <;> simp only [List.get?_ofFn, of_fn_nth_val, Fin.eta, dif_pos i.is_lt]\n#align nth_le_of_fn nth_le_of_fn\n\n",
 "mem_of_fn":
 "-- not registered as a simp lemma, as otherwise it fires before `forall_mem_of_fn_iff` which\n-- is much more useful\ntheorem mem_of_fn {n} (f : Fin n → α) (a : α) : a ∈ ofFn f ↔ a ∈ Set.range f :=\n  by\n  simp only [mem_iff_nth_le, Set.mem_range, nth_le_of_fn']\n  exact ⟨fun ⟨i, hi, h⟩ => ⟨_, h⟩, fun ⟨i, hi⟩ => ⟨i.1, (length_of_fn f).symm ▸ i.2, by simpa using hi⟩⟩\n#align mem_of_fn mem_of_fn\n\n",
 "map_of_fn":
 "@[simp]\ntheorem map_of_fn {β : Type _} {n : ℕ} (f : Fin n → α) (g : α → β) : map g (ofFn f) = ofFn (g ∘ f) :=\n  ext_nthLe (by simp) fun i h h' => by simp\n#align map_of_fn map_of_fn\n\n",
 "length_of_fn_aux":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem length_of_fn_aux {n} (f : Fin n → α) : ∀ m h l, length (of_fn_aux f m h l) = length l + m\n  | 0, h, l => rfl\n  | succ m, h, l => (length_of_fn_aux m _ _).trans (succ_add _ _)\n#align length_of_fn_aux length_of_fn_aux\n\n",
 "length_of_fn":
 "/-- The length of a list converted from a function is the size of the domain. -/\n@[simp]\ntheorem length_of_fn {n} (f : Fin n → α) : length (ofFn f) = n :=\n  ([anonymous] f _ _ _).trans (zero_add _)\n#align length_of_fn length_of_fn\n\n",
 "last_of_fn_succ":
 "theorem last_of_fn_succ {n : ℕ} (f : Fin n.succ → α) (h : ofFn f ≠ [] := mt ofFn_eq_nil_iff.mp (nat.succ_ne_zero _)) :\n    getLast (ofFn f) h = f (Fin.last _) :=\n  last_ofFn f h\n#align last_of_fn_succ last_of_fn_succ\n\n",
 "last_of_fn":
 "theorem last_of_fn {n : ℕ} (f : Fin n → α) (h : ofFn f ≠ [])\n    (hn : n - 1 < n := nat.pred_lt <| ofFn_eq_nil_iff.not.mp h) : getLast (ofFn f) h = f ⟨n - 1, hn⟩ := by\n  simp [last_eq_nth_le]\n#align last_of_fn last_of_fn\n\n",
 "forall_mem_of_fn_iff":
 "@[simp]\ntheorem forall_mem_of_fn_iff {n : ℕ} {f : Fin n → α} {P : α → Prop} : (∀ i ∈ ofFn f, P i) ↔ ∀ j : Fin n, P (f j) := by\n  simp only [mem_of_fn, Set.forall_range_iff]\n#align forall_mem_of_fn_iff forall_mem_of_fn_iff\n\n",
 "forall_iff_forall_tuple":
 "theorem forall_iff_forall_tuple {P : List α → Prop} : (∀ l : List α, P l) ↔ ∀ (n) (f : Fin n → α), P (List.ofFn f) :=\n  equivSigmaTuple.symm.surjective.forall.trans Sigma.forall\n#align forall_iff_forall_tuple forall_iff_forall_tuple\n\n",
 "exists_iff_exists_tuple":
 "theorem exists_iff_exists_tuple {P : List α → Prop} : (∃ l : List α, P l) ↔ ∃ (n : _)(f : Fin n → α), P (List.ofFn f) :=\n  equivSigmaTuple.symm.surjective.exists.trans Sigma.exists\n#align exists_iff_exists_tuple exists_iff_exists_tuple\n\n",
 "array_eq_of_fn":
 "/-- Arrays converted to lists are the same as `of_fn` on the indexing function of the array. -/\ntheorem array_eq_of_fn {n} (a : Array' n α) : a.to_list = ofFn a.read :=\n  by\n  suffices ∀ {m h l}, d_array.rev_iterate_aux a (fun i => cons) m h l = of_fn_aux (d_array.read a) m h l from this\n  intros ; induction' m with m IH generalizing l; · rfl\n  simp only [d_array.rev_iterate_aux, of_fn_aux, IH]\n#align array_eq_of_fn array_eq_of_fn\n\n"}