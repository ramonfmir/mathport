{"unzip_enum_from_eq_prod":
 "@[simp]\ntheorem unzip_enum_from_eq_prod (l : List α) {n : ℕ} : (l.enum_from n).unzip = (range' n l.length, l) := by\n  simp only [enum_from_eq_zip_range', unzip_zip, length_range']\n#align unzip_enum_from_eq_prod unzip_enum_from_eq_prod\n\n",
 "unzip_enum_eq_prod":
 "@[simp]\ntheorem unzip_enum_eq_prod (l : List α) : l.enum.unzip = (range l.length, l) := by\n  simp only [enum_eq_zip_range, unzip_zip, length_range]\n#align unzip_enum_eq_prod unzip_enum_eq_prod\n\n",
 "self_mem_range_succ":
 "@[simp]\ntheorem self_mem_range_succ (n : ℕ) : n ∈ range (n + 1) := by simp only [succ_pos', lt_add_iff_pos_right, mem_range]\n#align self_mem_range_succ self_mem_range_succ\n\n",
 "reverse_range'":
 "theorem reverse_range' : ∀ s n : ℕ, reverse (range' s n) = map (fun i => s + n - 1 - i) (range n)\n  | s, 0 => rfl\n  | s, n + 1 => by\n    rw [range'_concat, reverse_append, range_succ_eq_map] <;>\n      simpa only [show s + (n + 1) - 1 = s + n from rfl, (· ∘ ·), fun a i =>\n        show a - 1 - i = a - succ i from pred_sub _ _, reverse_singleton, map_cons, tsub_zero, cons_append, nil_append,\n        eq_self_iff_true, true_and_iff, map_map] using reverse_range' s n\n#align reverse_range' reverse_range'\n\n",
 "range_zero":
 "@[simp]\ntheorem range_zero : range 0 = [] :=\n  rfl\n#align range_zero range_zero\n\n",
 "range_succ_eq_map":
 "theorem range_succ_eq_map (n : ℕ) : range (n + 1) = 0 :: map succ (range n) := by\n  rw [range_eq_range', range_eq_range', range', add_comm, ← map_add_range'] <;> congr <;> exact funext one_add\n#align range_succ_eq_map range_succ_eq_map\n\n",
 "range_succ":
 "theorem range_succ (n : ℕ) : range (succ n) = range n ++ [n] := by simp only [range_eq_range', range'_concat, zero_add]\n#align range_succ range_succ\n\n",
 "range_subset":
 "theorem range_subset {m n : ℕ} : range m ⊆ range n ↔ m ≤ n := by simp only [range_eq_range', range'_subset_right]\n#align range_subset range_subset\n\n",
 "range_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem range_sublist {m n : ℕ} : «expr <+ » (range m) (range n) ↔ m ≤ n := by\n  simp only [range_eq_range', range'_sublist_right]\n#align range_sublist range_sublist\n\n",
 "range_eq_range'":
 "theorem range_eq_range' (n : ℕ) : range n = range' 0 n :=\n  (range_loop_range' n 0).trans <| by rw [zero_add]\n#align range_eq_range' range_eq_range'\n\n",
 "range_eq_nil":
 "@[simp]\ntheorem range_eq_nil {n : ℕ} : range n = [] ↔ n = 0 := by rw [← length_eq_zero, length_range]\n#align range_eq_nil range_eq_nil\n\n",
 "range_core_range'":
 "theorem range_core_range' : ∀ s n : ℕ, List.range.loop s (range' s n) = range' 0 (n + s)\n  | 0, n => rfl\n  | s + 1, n => by rw [show n + (s + 1) = n + 1 + s from add_right_comm n s 1] <;> exact range_core_range' s (n + 1)\n#align range_core_range' range_core_range'\n\n",
 "range_add":
 "theorem range_add (a : ℕ) : ∀ b, range (a + b) = range a ++ (range b).map fun x => a + x\n  | 0 => by rw [add_zero, range_zero, map_nil, append_nil]\n  | b + 1 => by rw [nat.add_succ, range_succ, range_add b, range_succ, map_append, map_singleton, append_assoc]\n#align range_add range_add\n\n",
 "range'_subset_right":
 "theorem range'_subset_right {s m n : ℕ} : range' s m ⊆ range' s n ↔ m ≤ n :=\n  ⟨fun h =>\n    le_of_not_lt fun hn =>\n      lt_irrefl (s + n) <| (mem_range'.1 <| h <| mem_range'.2 ⟨nat.le_add_right _ _, nat.add_lt_add_left hn s⟩).2,\n    fun h => (range'_sublist_right.2 h).subset⟩\n#align range'_subset_right range'_subset_right\n\n",
 "range'_sublist_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem range'_sublist_right {s m n : ℕ} : «expr <+ » (range' s m) (range' s n) ↔ m ≤ n :=\n  ⟨fun h => by simpa only [length_range'] using h.length_le, fun h => by\n    rw [← tsub_add_cancel_of_le h, ← range'_append] <;> apply sublist_append_left⟩\n#align range'_sublist_right range'_sublist_right\n\n",
 "range'_eq_nil":
 "@[simp]\ntheorem range'_eq_nil {s n : ℕ} : range' s n = [] ↔ n = 0 := by rw [← length_eq_zero, length_range']\n#align range'_eq_nil range'_eq_nil\n\n",
 "range'_eq_map_range":
 "theorem range'_eq_map_range (s n : ℕ) : range' s n = map ((· + ·) s) (range n) := by\n  rw [range_eq_range', map_add_range'] <;> rfl\n#align range'_eq_map_range range'_eq_map_range\n\n",
 "range'_concat":
 "theorem range'_concat (s n : ℕ) : range' s (n + 1) = range' s n ++ [s + n] := by\n  rw [add_comm n 1] <;> exact (range'_append s n 1).symm\n#align range'_concat range'_concat\n\n",
 "range'_append":
 "@[simp]\ntheorem range'_append : ∀ s m n : ℕ, range' s m ++ range' (s + m) n = range' s (n + m)\n  | s, 0, n => rfl\n  | s, m + 1, n =>\n    show s :: (range' (s + 1) m ++ range' (s + m + 1) n) = s :: range' (s + 1) (n + m) by\n      rw [add_right_comm, range'_append]\n#align range'_append range'_append\n\n",
 "prod_range_succ'":
 "/-- A variant of `prod_range_succ` which pulls off the first\n  term in the product rather than the last.-/\n@[to_additive \"A variant of `sum_range_succ` which pulls off the first term in the sum\\n  rather than the last.\"]\ntheorem prod_range_succ' {α : Type u} [Monoid α] (f : ℕ → α) (n : ℕ) :\n    ((range n.succ).map f).prod = f 0 * ((range n).map fun i => f (succ i)).prod :=\n  nat.rec_on n (show 1 * f 0 = f 0 * 1 by rw [one_mul, mul_one]) fun _ hd => by\n    rw [List.prod_range_succ, hd, mul_assoc, ← List.prod_range_succ]\n#align prod_range_succ' prod_range_succ'\n\n",
 "prod_range_succ":
 "@[to_additive]\ntheorem prod_range_succ {α : Type u} [Monoid α] (f : ℕ → α) (n : ℕ) :\n    ((range n.succ).map f).prod = ((range n).map f).prod * f n := by\n  rw [range_succ, map_append, map_singleton, prod_append, prod_cons, prod_nil, mul_one]\n#align prod_range_succ prod_range_succ\n\n",
 "pairwise_lt_range'":
 "theorem pairwise_lt_range' : ∀ s n : ℕ, Pairwise (· < ·) (range' s n)\n  | s, 0 => Pairwise.nil\n  | s, n + 1 => chain_iff_pairwise.1 (chain_lt_range' s n)\n#align pairwise_lt_range' pairwise_lt_range'\n\n",
 "pairwise_lt_range":
 "theorem pairwise_lt_range (n : ℕ) : Pairwise (· < ·) (range n) := by simp only [range_eq_range', pairwise_lt_range']\n#align pairwise_lt_range pairwise_lt_range\n\n",
 "pairwise_le_range":
 "theorem pairwise_le_range (n : ℕ) : Pairwise (· ≤ ·) (range n) :=\n  Pairwise.imp (@le_of_lt ℕ _) (pairwise_lt_range _)\n#align pairwise_le_range pairwise_le_range\n\n",
 "pairwise_gt_iota":
 "theorem pairwise_gt_iota (n : ℕ) : Pairwise (· > ·) (iota n) := by\n  simp only [iota_eq_reverse_range', pairwise_reverse, pairwise_lt_range']\n#align pairwise_gt_iota pairwise_gt_iota\n\n",
 "nth_range'":
 "theorem nth_range' : ∀ (s) {m n : ℕ}, m < n → get? (range' s n) m = some (s + m)\n  | s, 0, n + 1, _ => rfl\n  | s, m + 1, n + 1, h => (nth_range' (s + 1) (lt_of_add_lt_add_right h)).trans <| by rw [add_right_comm] <;> rfl\n#align nth_range' nth_range'\n\n",
 "nth_range":
 "theorem nth_range {m n : ℕ} (h : m < n) : get? (range n) m = some m := by\n  simp only [range_eq_range', nth_range' _ h, zero_add]\n#align nth_range nth_range\n\n",
 "nth_le_range'":
 "@[simp]\ntheorem nth_le_range' {n m} (i) (H : i < (range' n m).length) : nthLe (range' n m) i H = n + i :=\n  option.some.inj <| by rw [← nth_le_nth _, nth_range' _ (by simpa using H)]\n#align nth_le_range' nth_le_range'\n\n",
 "nth_le_range":
 "@[simp]\ntheorem nth_le_range {n} (i) (H : i < (range n).length) : nthLe (range n) i H = i :=\n  option.some.inj <| by rw [← nth_le_nth _, nth_range (by simpa using H)]\n#align nth_le_range nth_le_range\n\n",
 "nth_le_fin_range":
 "@[simp]\ntheorem nth_le_fin_range {n : ℕ} {i : ℕ} (h) : (finRange n).nth_le i h = ⟨i, length_finRange n ▸ h⟩ := by\n  simp only [fin_range, nth_le_range, nth_le_pmap]\n#align nth_le_fin_range nth_le_fin_range\n\n",
 "not_mem_range_self":
 "@[simp]\ntheorem not_mem_range_self {n : ℕ} : n ∉ range n :=\n  mt mem_range.1 <| lt_irrefl _\n#align not_mem_range_self not_mem_range_self\n\n",
 "nodup_range'":
 "theorem nodup_range' (s n : ℕ) : Nodup (range' s n) :=\n  (pairwise_lt_range' s n).imp fun a b => ne_of_lt\n#align nodup_range' nodup_range'\n\n",
 "nodup_range":
 "theorem nodup_range (n : ℕ) : Nodup (range n) := by simp only [range_eq_range', nodup_range']\n#align nodup_range nodup_range\n\n",
 "nodup_iota":
 "theorem nodup_iota (n : ℕ) : Nodup (iota n) :=\n  (pairwise_gt_iota n).imp fun a b => ne_of_gt\n#align nodup_iota nodup_iota\n\n",
 "nodup_fin_range":
 "theorem nodup_fin_range (n : ℕ) : (finRange n).nodup :=\n  Pairwise.pmap (nodup_range n) _ fun _ _ _ _ => @fin.ne_of_vne _ ⟨_, _⟩ ⟨_, _⟩\n#align nodup_fin_range nodup_fin_range\n\n",
 "mem_range'":
 "@[simp]\ntheorem mem_range' {m : ℕ} : ∀ {s n : ℕ}, m ∈ range' s n ↔ s ≤ m ∧ m < s + n\n  | s, 0 => (false_iff_iff _).2 fun ⟨H1, H2⟩ => not_le_of_lt H2 H1\n  | s, succ n =>\n    have : m = s → m < s + n + 1 := fun e => e ▸ lt_succ_of_le (nat.le_add_right _ _)\n    have l : m = s ∨ s + 1 ≤ m ↔ s ≤ m := by simpa only [eq_comm] using (@Decidable.le_iff_eq_or_lt _ _ _ s m).symm\n    (mem_cons _ _ _).trans <| by\n      simp only [mem_range', or_and_left, or_iff_right_of_imp this, l, add_right_comm] <;> rfl\n#align mem_range' mem_range'\n\n",
 "mem_range":
 "@[simp]\ntheorem mem_range {m n : ℕ} : m ∈ range n ↔ m < n := by\n  simp only [range_eq_range', mem_range', nat.zero_le, true_and_iff, zero_add]\n#align mem_range mem_range\n\n",
 "mem_iota":
 "theorem mem_iota {m n : ℕ} : m ∈ iota n ↔ 1 ≤ m ∧ m ≤ n := by\n  simp only [iota_eq_reverse_range', mem_reverse, mem_range', add_comm, lt_succ_iff]\n#align mem_iota mem_iota\n\n",
 "mem_fin_range":
 "@[simp]\ntheorem mem_fin_range {n : ℕ} (a : Fin n) : a ∈ finRange n :=\n  mem_pmap.2\n    ⟨a.1, mem_range.2 a.2, by\n      cases a\n      rfl⟩\n#align mem_fin_range mem_fin_range\n\n",
 "map_sub_range'":
 "theorem map_sub_range' (a) : ∀ (s n : ℕ) (h : a ≤ s), map (fun x => x - a) (range' s n) = range' (s - a) n\n  | s, 0, _ => rfl\n  | s, n + 1, h => by\n    convert congr_arg (cons (s - a)) (map_sub_range' (s + 1) n (nat.le_succ_of_le h))\n    rw [nat.succ_sub h]\n    rfl\n#align map_sub_range' map_sub_range'\n\n",
 "map_add_range'":
 "theorem map_add_range' (a) : ∀ s n : ℕ, map ((· + ·) a) (range' s n) = range' (a + s) n\n  | s, 0 => rfl\n  | s, n + 1 => congr_arg (cons _) (map_add_range' (s + 1) n)\n#align map_add_range' map_add_range'\n\n",
 "length_range'":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Kenny Lau, Scott Morrison\n-/\n@[simp]\ntheorem length_range' : ∀ s n : ℕ, length (range' s n) = n\n  | s, 0 => rfl\n  | s, n + 1 => congr_arg succ (length_range' _ _)\n#align length_range' length_range'\n\n",
 "length_range":
 "@[simp]\ntheorem length_range (n : ℕ) : length (range n) = n := by simp only [range_eq_range', length_range']\n#align length_range length_range\n\n",
 "length_iota":
 "@[simp]\ntheorem length_iota (n : ℕ) : length (iota n) = n := by\n  simp only [iota_eq_reverse_range', length_reverse, length_range']\n#align length_iota length_iota\n\n",
 "length_fin_range":
 "@[simp]\ntheorem length_fin_range (n : ℕ) : (finRange n).length = n := by rw [fin_range, length_pmap, length_range]\n#align length_fin_range length_fin_range\n\n",
 "iota_eq_reverse_range'":
 "theorem iota_eq_reverse_range' : ∀ n : ℕ, iota n = reverse (range' 1 n)\n  | 0 => rfl\n  | n + 1 => by simp only [iota, range'_concat, iota_eq_reverse_range' n, reverse_append, add_comm] <;> rfl\n#align iota_eq_reverse_range' iota_eq_reverse_range'\n\n",
 "fin_range_zero":
 "@[simp]\ntheorem fin_range_zero : finRange 0 = [] :=\n  rfl\n#align fin_range_zero fin_range_zero\n\n",
 "fin_range_eq_nil":
 "@[simp]\ntheorem fin_range_eq_nil {n : ℕ} : finRange n = [] ↔ n = 0 := by rw [← length_eq_zero, length_fin_range]\n#align fin_range_eq_nil fin_range_eq_nil\n\n",
 "enum_map_fst":
 "@[simp]\ntheorem enum_map_fst (l : List α) : map Prod.fst (enum l) = range l.length := by\n  simp only [enum, enum_from_map_fst, range_eq_range']\n#align enum_map_fst enum_map_fst\n\n",
 "enum_from_map_fst":
 "@[simp]\ntheorem enum_from_map_fst : ∀ (n) (l : List α), map Prod.fst (enum_from n l) = range' n l.length\n  | n, [] => rfl\n  | n, a :: l => congr_arg (cons _) (enum_from_map_fst _ _)\n#align enum_from_map_fst enum_from_map_fst\n\n",
 "enum_from_eq_zip_range'":
 "theorem enum_from_eq_zip_range' (l : List α) {n : ℕ} : l.enum_from n = (range' n l.length).zip l :=\n  zip_of_prod (enum_from_map_fst _ _) (enumFrom_map_snd _ _)\n#align enum_from_eq_zip_range' enum_from_eq_zip_range'\n\n",
 "enum_eq_zip_range":
 "theorem enum_eq_zip_range (l : List α) : l.enum = (range l.length).zip l :=\n  zip_of_prod (enum_map_fst _) (enum_map_snd _)\n#align enum_eq_zip_range enum_eq_zip_range\n\n",
 "chain_succ_range'":
 "theorem chain_succ_range' : ∀ s n : ℕ, Chain (fun a b => b = succ a) s (range' (s + 1) n)\n  | s, 0 => Chain.nil\n  | s, n + 1 => (chain_succ_range' (s + 1) n).cons rfl\n#align chain_succ_range' chain_succ_range'\n\n",
 "chain_range_succ":
 "theorem chain_range_succ (r : ℕ → ℕ → Prop) (n a : ℕ) : Chain r a (range n.succ) ↔ r a 0 ∧ ∀ m < n, r m m.succ :=\n  by\n  rw [range_succ_eq_map, chain_cons, and_congr_right_iff, ← chain'_range_succ, range_succ_eq_map]\n  exact fun _ => iff.rfl\n#align chain_range_succ chain_range_succ\n\n",
 "chain_lt_range'":
 "theorem chain_lt_range' (s n : ℕ) : Chain (· < ·) s (range' (s + 1) n) :=\n  (chain_succ_range' s n).imp fun a b e => e.symm ▸ lt_succ_self _\n#align chain_lt_range' chain_lt_range'\n\n",
 "chain'_range_succ":
 "theorem chain'_range_succ (r : ℕ → ℕ → Prop) (n : ℕ) : Chain' r (range n.succ) ↔ ∀ m < n, r m m.succ :=\n  by\n  rw [range_succ]\n  induction' n with n hn\n  · simp\n  · rw [range_succ]\n    simp only [append_assoc, singleton_append, chain'_append_cons_cons, chain'_singleton, and_true_iff]\n    rw [hn, forall_lt_succ]\n#align chain'_range_succ chain'_range_succ\n\n"}