{"of_duplicate_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.of_duplicate_cons {y : α} (h : «expr ∈+ » x (y :: l)) (hx : x ≠ y) : «expr ∈+ » x l := by\n  simpa [duplicate_cons_iff, hx.symm] using h\n#align duplicate.of_duplicate_cons duplicate.of_duplicate_cons\n\n",
 "not_nodup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.not_nodup (h : «expr ∈+ » x l) : ¬Nodup l := fun H => nodup_iff_forall_not_duplicate.mp H _ h\n#align duplicate.not_nodup duplicate.not_nodup\n\n",
 "not_duplicate_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n@[simp]\ntheorem not_duplicate_singleton (x y : α) : ¬«expr ∈+ » x [y] := fun H => H.ne_singleton _ rfl\n#align not_duplicate_singleton not_duplicate_singleton\n\n",
 "not_duplicate_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n@[simp]\ntheorem not_duplicate_nil (x : α) : ¬«expr ∈+ » x [] := fun H => H.ne_nil rfl\n#align not_duplicate_nil not_duplicate_nil\n\n",
 "nodup_iff_forall_not_duplicate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem nodup_iff_forall_not_duplicate : Nodup l ↔ ∀ x : α, ¬«expr ∈+ » x l := by\n  simp_rw [nodup_iff_sublist, duplicate_iff_sublist]\n#align nodup_iff_forall_not_duplicate nodup_iff_forall_not_duplicate\n\n",
 "ne_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.ne_singleton (h : «expr ∈+ » x l) (y : α) : l ≠ [y] :=\n  by\n  induction' h with l' h z l' h hm\n  · simp [ne_nil_of_mem h]\n  · simp [ne_nil_of_mem h.mem]\n#align duplicate.ne_singleton duplicate.ne_singleton\n\n",
 "ne_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.ne_nil (h : «expr ∈+ » x l) : l ≠ [] := fun H => (mem_nil_iff x).mp (H ▸ h.mem)\n#align duplicate.ne_nil duplicate.ne_nil\n\n",
 "mono_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.mono_sublist {l' : list α} (hx : «expr ∈+ » x l) (h : «expr <+ » l l') : «expr ∈+ » x l' :=\n  by\n  induction' h with l₁ l₂ y h IH l₁ l₂ y h IH\n  · exact hx\n  · exact (IH hx).duplicate_cons _\n  · rw [duplicate_cons_iff] at hx⊢\n    rcases hx with (⟨rfl, hx⟩ | hx)\n    · simp [h.subset hx]\n    · simp [IH hx]\n#align duplicate.mono_sublist duplicate.mono_sublist\n\n",
 "mem_cons_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.mem_cons_self (h : «expr ∈+ » x (x :: l)) : x ∈ l :=\n  by\n  cases' h with _ h _ _ h\n  · exact h\n  · exact h.mem\n#align duplicate.mem_cons_self duplicate.mem_cons_self\n\n",
 "mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.mem (h : «expr ∈+ » x l) : x ∈ l :=\n  by\n  induction' h with l' h y l' h hm\n  · exact mem_cons_self _ _\n  · exact mem_cons_of_mem _ hm\n#align duplicate.mem duplicate.mem\n\n",
 "exists_duplicate_iff_not_nodup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem exists_duplicate_iff_not_nodup : (∃ x : α, «expr ∈+ » x l) ↔ ¬Nodup l := by\n  simp [nodup_iff_forall_not_duplicate]\n#align exists_duplicate_iff_not_nodup exists_duplicate_iff_not_nodup\n\n",
 "elim_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.elim_singleton {y : α} (h : «expr ∈+ » x [y]) : false :=\n  not_duplicate_singleton x y h\n#align duplicate.elim_singleton duplicate.elim_singleton\n\n",
 "elim_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.elim_nil (h : «expr ∈+ » x []) : false :=\n  not_duplicate_nil x h\n#align duplicate.elim_nil duplicate.elim_nil\n\n",
 "duplicate_iff_two_le_count":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate_iff_two_le_count [decidable_eq α] : «expr ∈+ » x l ↔ 2 ≤ count x l := by\n  simp [duplicate_iff_sublist, le_count_iff_replicate_sublist]\n#align duplicate_iff_two_le_count duplicate_iff_two_le_count\n\n",
 "duplicate_iff_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\n/-- The contrapositive of `list.nodup_iff_sublist`. -/\ntheorem duplicate_iff_sublist : «expr ∈+ » x l ↔ «expr <+ » [x, x] l :=\n  by\n  induction' l with y l IH\n  · simp\n  · by_cases hx : x = y\n    · simp [hx, cons_sublist_cons_iff, singleton_sublist]\n    · rw [duplicate_cons_iff_of_ne hx, IH]\n      refine' ⟨sublist_cons_of_sublist y, fun h => _⟩\n      cases h\n      · assumption\n      · contradiction\n#align duplicate_iff_sublist duplicate_iff_sublist\n\n",
 "duplicate_cons_self_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n@[simp]\ntheorem duplicate_cons_self_iff : «expr ∈+ » x (x :: l) ↔ x ∈ l :=\n  ⟨Duplicate.mem_cons_self, Mem.duplicate_cons_self⟩\n#align duplicate_cons_self_iff duplicate_cons_self_iff\n\n",
 "duplicate_cons_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/-\nCopyright (c) 2021 Yakov Pechersky. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yakov Pechersky, Chris Hughes\n-/\ntheorem mem.duplicate_cons_self (h : x ∈ l) : «expr ∈+ » x (x :: l) :=\n  duplicate.cons_mem h\n#align mem.duplicate_cons_self mem.duplicate_cons_self\n\n",
 "duplicate_cons_iff_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate_cons_iff_of_ne {y : α} (hne : x ≠ y) : «expr ∈+ » x (y :: l) ↔ «expr ∈+ » x l := by\n  simp [duplicate_cons_iff, hne.symm]\n#align duplicate_cons_iff_of_ne duplicate_cons_iff_of_ne\n\n",
 "duplicate_cons_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate_cons_iff {y : α} : «expr ∈+ » x (y :: l) ↔ y = x ∧ x ∈ l ∨ «expr ∈+ » x l :=\n  by\n  refine' ⟨fun h => _, fun h => _⟩\n  · cases' h with _ hm _ _ hm\n    · exact or.inl ⟨rfl, hm⟩\n    · exact or.inr hm\n  · rcases h with (⟨rfl | h⟩ | h)\n    · simpa\n    · exact h.cons_duplicate\n#align duplicate_cons_iff duplicate_cons_iff\n\n",
 "duplicate_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∈+ » -/\ntheorem duplicate.duplicate_cons (h : «expr ∈+ » x l) (y : α) : «expr ∈+ » x (y :: l) :=\n  duplicate.cons_duplicate h\n#align duplicate.duplicate_cons duplicate.duplicate_cons\n\n"}