{"replicate_count_eq_of_count_eq_length":
 "theorem replicate_count_eq_of_count_eq_length {a : α} {l : list α} (h : count a l = length l) :\n    replicate (count a l) a = l :=\n  (le_count_iff_replicate_sublist.mp le_rfl).eq_of_length <| (length_replicate (count a l) a).trans h\n#align replicate_count_eq_of_count_eq_length replicate_count_eq_of_count_eq_length\n\n",
 "prod_map_eq_pow_single":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (a' «expr ≠ » a) -/\n@[to_additive]\ntheorem prod_map_eq_pow_single [monoid β] {l : list α} (a : α) (f : α → β)\n    (hf : ∀ (a') (_ : a' ≠ a), a' ∈ l → f a' = 1) : (l.map f).prod = f a ^ l.count a :=\n  by\n  induction' l with a' as h generalizing a\n  · rw [map_nil, prod_nil, count_nil, pow_zero]\n  · specialize h a fun a' ha' hfa' => hf a' ha' (mem_cons_of_mem _ hfa')\n    rw [list.map_cons, List.prod_cons, count_cons, h]\n    split_ifs with ha'\n    · rw [ha', pow_succ]\n    · rw [hf a' (ne.symm ha') (list.mem_cons_self a' as), one_mul]\n#align prod_map_eq_pow_single prod_map_eq_pow_single\n\n",
 "prod_eq_pow_single":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (a' «expr ≠ » a) -/\n@[to_additive]\ntheorem prod_eq_pow_single [monoid α] {l : list α} (a : α) (h : ∀ (a') (_ : a' ≠ a), a' ∈ l → a' = 1) :\n    l.prod = a ^ l.count a :=\n  trans (by rw [map_id'']) (prod_map_eq_pow_single a id h)\n#align prod_eq_pow_single prod_eq_pow_single\n\n",
 "one_le_count_iff_mem":
 "@[simp]\ntheorem one_le_count_iff_mem {a : α} {l : list α} : 1 ≤ count a l ↔ a ∈ l :=\n  count_pos\n#align one_le_count_iff_mem one_le_count_iff_mem\n\n",
 "not_mem_of_count_eq_zero":
 "theorem not_mem_of_count_eq_zero {a : α} {l : list α} (h : count a l = 0) : a ∉ l := fun h' => (count_pos.2 h').ne' h\n#align not_mem_of_count_eq_zero not_mem_of_count_eq_zero\n\n",
 "length_filter_lt_length_iff_exists":
 "theorem length_filter_lt_length_iff_exists (l) : length (filter p l) < length l ↔ ∃ x ∈ l, ¬p x := by\n  rw [length_eq_countp_add_countp p l, ← countp_pos, countp_eq_length_filter, lt_add_iff_pos_right]\n#align length_filter_lt_length_iff_exists length_filter_lt_length_iff_exists\n\n",
 "length_eq_countp_add_countp":
 "theorem length_eq_countp_add_countp (l) : length l = countp p l + countp (fun a => ¬p a) l := by\n  induction' l with x h ih <;> [rfl, by_cases p x] <;>\n      [simp only [countp_cons_of_pos _ _ h, countp_cons_of_neg (fun a => ¬p a) _ (decidable.not_not.2 h), ih, length],\n      simp only [countp_cons_of_pos (fun a => ¬p a) _ h, countp_cons_of_neg _ _ h, ih, length]] <;>\n    ac_rfl\n#align length_eq_countp_add_countp length_eq_countp_add_countp\n\n",
 "le_count_iff_replicate_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem le_count_iff_replicate_sublist {a : α} {l : list α} {n : ℕ} : n ≤ count a l ↔ «expr <+ » (replicate n a) l :=\n  ⟨fun h => ((replicate_sublist_replicate a).2 h).trans <| filter_eq l a ▸ filter_sublist _, fun h => by\n    simpa only [count_replicate_self] using h.count_le a⟩\n#align le_count_iff_replicate_sublist le_count_iff_replicate_sublist\n\n",
 "filter_eq'":
 "theorem filter_eq' (l : list α) (a : α) : (l.filter fun x => x = a) = replicate (count a l) a := by\n  simp only [filter_eq, @eq_comm _ _ a]\n#align filter_eq' filter_eq'\n\n",
 "filter_eq":
 "theorem filter_eq (l : list α) (a : α) : l.filter (eq a) = replicate (count a l) a := by\n  simp [eq_replicate, count, countp_eq_length_filter, @eq_comm _ _ a]\n#align filter_eq filter_eq\n\n",
 "countp_true":
 "@[simp]\ntheorem countp_true : (l.countp fun _ => true) = l.length := by simp\n#align countp_true countp_true\n\n",
 "countp_pos":
 "theorem countp_pos {l} : 0 < countp p l ↔ ∃ a ∈ l, p a := by\n  simp only [countp_eq_length_filter, length_pos_iff_exists_mem, mem_filter, exists_prop]\n#align countp_pos countp_pos\n\n",
 "countp_nil":
 "/-\nCopyright (c) 2014 Parikshit Khanna. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Parikshit Khanna, Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Mario Carneiro\n-/\n@[simp]\ntheorem countp_nil : countp p [] = 0 :=\n  rfl\n#align countp_nil countp_nil\n\n",
 "countp_mono_left":
 "theorem countp_mono_left (h : ∀ x ∈ l, p x → q x) : countp p l ≤ countp q l :=\n  by\n  induction' l with a l ihl; · rfl\n  rw [forall_mem_cons] at h; cases' h with ha hl\n  rw [countp_cons, countp_cons]\n  refine' add_le_add (ihl hl) _\n  split_ifs <;> try simp only [le_rfl, zero_le]\n  exact absurd (ha ‹_›) ‹_›\n#align countp_mono_left countp_mono_left\n\n",
 "countp_map":
 "@[simp]\ntheorem countp_map (p : β → Prop) [decidable_pred p] (f : α → β) : ∀ l, countp p (map f l) = countp (p ∘ f) l\n  | [] => rfl\n  | a :: l => by rw [map_cons, countp_cons, countp_cons, countp_map]\n#align countp_map countp_map\n\n",
 "countp_le_length":
 "theorem countp_le_length : countp p l ≤ l.length := by simpa only [countp_eq_length_filter] using length_filter_le _ _\n#align countp_le_length countp_le_length\n\n",
 "countp_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem sublist.countp_le (s : «expr <+ » l₁ l₂) : countp p l₁ ≤ countp p l₂ := by\n  simpa only [countp_eq_length_filter] using length_le_of_sublist (s.filter p)\n#align sublist.countp_le sublist.countp_le\n\n",
 "countp_join":
 "theorem countp_join : ∀ l : list (list α), countp p l.join = (l.map (countp p)).sum\n  | [] => rfl\n  | a :: l => by rw [join, countp_append, map_cons, sum_cons, countp_join]\n#align countp_join countp_join\n\n",
 "countp_filter":
 "@[simp]\ntheorem countp_filter (l : list α) : countp p (filter q l) = countp (fun a => p a ∧ q a) l := by\n  simp only [countp_eq_length_filter, filter_filter]\n#align countp_filter countp_filter\n\n",
 "countp_false":
 "@[simp]\ntheorem countp_false : (l.countp fun _ => false) = 0 := by simp\n#align countp_false countp_false\n\n",
 "countp_eq_zero":
 "@[simp]\ntheorem countp_eq_zero {l} : countp p l = 0 ↔ ∀ a ∈ l, ¬p a :=\n  by\n  rw [← not_iff_not, ← ne.def, ← pos_iff_ne_zero, countp_pos]\n  simp\n#align countp_eq_zero countp_eq_zero\n\n",
 "countp_eq_length_filter":
 "theorem countp_eq_length_filter (l) : countp p l = length (filter p l) := by\n  induction' l with x l ih <;> [rfl, by_cases p x] <;> [simp only [filter_cons_of_pos _ h, countp, ih, if_pos h],\n      simp only [countp_cons_of_neg _ _ h, ih, filter_cons_of_neg _ h]] <;>\n    rfl\n#align countp_eq_length_filter countp_eq_length_filter\n\n",
 "countp_eq_length":
 "@[simp]\ntheorem countp_eq_length {l} : countp p l = l.length ↔ ∀ a ∈ l, p a := by\n  rw [countp_eq_length_filter, filter_length_eq_length]\n#align countp_eq_length countp_eq_length\n\n",
 "countp_cons_of_pos":
 "@[simp]\ntheorem countp_cons_of_pos {a : α} (l) (pa : p a) : countp p (a :: l) = countp p l + 1 :=\n  if_pos pa\n#align countp_cons_of_pos countp_cons_of_pos\n\n",
 "countp_cons_of_neg":
 "@[simp]\ntheorem countp_cons_of_neg {a : α} (l) (pa : ¬p a) : countp p (a :: l) = countp p l :=\n  if_neg pa\n#align countp_cons_of_neg countp_cons_of_neg\n\n",
 "countp_cons":
 "theorem countp_cons (a : α) (l) : countp p (a :: l) = countp p l + ite (p a) 1 0 := by by_cases h : p a <;> simp [h]\n#align countp_cons countp_cons\n\n",
 "countp_congr":
 "theorem countp_congr (h : ∀ x ∈ l, p x ↔ q x) : countp p l = countp q l :=\n  le_antisymm (countp_mono_left fun x hx => (h x hx).1) (countp_mono_left fun x hx => (h x hx).2)\n#align countp_congr countp_congr\n\n",
 "countp_append":
 "@[simp]\ntheorem countp_append (l₁ l₂) : countp p (l₁ ++ l₂) = countp p l₁ + countp p l₂ := by\n  simp only [countp_eq_length_filter, filter_append, length_append]\n#align countp_append countp_append\n\n",
 "count_tail":
 "theorem count_tail :\n    ∀ (l : list α) (a : α) (h : 0 < l.length), l.tail.count a = l.count a - ite (a = List.nthLe l 0 h) 1 0\n  | _ :: _, a, h => by\n    rw [count_cons]\n    split_ifs <;> simp\n#align count_tail count_tail\n\n",
 "count_singleton'":
 "theorem count_singleton' (a b : α) : count a [b] = ite (a = b) 1 0 :=\n  rfl\n#align count_singleton' count_singleton'\n\n",
 "count_singleton":
 "theorem count_singleton (a : α) : count a [a] = 1 :=\n  if_pos rfl\n#align count_singleton count_singleton\n\n",
 "count_replicate_self":
 "@[simp]\ntheorem count_replicate_self (a : α) (n : ℕ) : count a (replicate n a) = n := by\n  rw [count, countp_eq_length_filter, filter_eq_self.2, length_replicate] <;>\n    exact fun b m => (eq_of_mem_replicate m).symm\n#align count_replicate_self count_replicate_self\n\n",
 "count_replicate":
 "theorem count_replicate (a b : α) (n : ℕ) : count a (replicate n b) = if a = b then n else 0 :=\n  by\n  split_ifs with h\n  exacts[h ▸ count_replicate_self _ _, count_eq_zero_of_not_mem <| mt eq_of_mem_replicate h]\n#align count_replicate count_replicate\n\n",
 "count_pos":
 "@[simp]\ntheorem count_pos {a : α} {l : list α} : 0 < count a l ↔ a ∈ l := by\n  simp only [count, countp_pos, exists_prop, exists_eq_right']\n#align count_pos count_pos\n\n",
 "count_nil":
 "@[simp]\ntheorem count_nil (a : α) : count a [] = 0 :=\n  rfl\n#align count_nil count_nil\n\n",
 "count_map_of_injective":
 "@[simp]\ntheorem count_map_of_injective {α β} [decidable_eq α] [decidable_eq β] (l : list α) (f : α → β)\n    (hf : function.injective f) (x : α) : count (f x) (map f l) = count x l := by\n  simp only [count, countp_map, (· ∘ ·), hf.eq_iff]\n#align count_map_of_injective count_map_of_injective\n\n",
 "count_le_length":
 "theorem count_le_length (a : α) (l : list α) : count a l ≤ l.length :=\n  countp_le_length _\n#align count_le_length count_le_length\n\n",
 "count_le_count_map":
 "theorem count_le_count_map [decidable_eq β] (l : list α) (f : α → β) (x : α) : count x l ≤ count (f x) (map f l) :=\n  by\n  rw [count, count, countp_map]\n  exact countp_mono_left fun y hyl => congr_arg f\n#align count_le_count_map count_le_count_map\n\n",
 "count_le_count_cons":
 "theorem count_le_count_cons (a b : α) (l : list α) : count a l ≤ count a (b :: l) :=\n  (sublist_cons _ _).count_le _\n#align count_le_count_cons count_le_count_cons\n\n",
 "count_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem sublist.count_le (h : «expr <+ » l₁ l₂) (a : α) : count a l₁ ≤ count a l₂ :=\n  h.countp_le _\n#align sublist.count_le sublist.count_le\n\n",
 "count_join":
 "theorem count_join (l : list (list α)) (a : α) : l.join.count a = (l.map (count a)).sum :=\n  countp_join _ _\n#align count_join count_join\n\n",
 "count_filter":
 "@[simp]\ntheorem count_filter {p} [decidable_pred p] {a} {l : list α} (h : p a) : count a (filter p l) = count a l := by\n  simp only [count, countp_filter,\n    show (fun b => a = b ∧ p b) = eq a by\n      ext b\n      constructor <;> cc]\n#align count_filter count_filter\n\n",
 "count_erase_self":
 "@[simp]\ntheorem count_erase_self (a : α) (l : list α) : count a (List.erase l a) = count a l - 1 := by\n  rw [count_erase, if_pos rfl]\n#align count_erase_self count_erase_self\n\n",
 "count_erase_of_ne":
 "@[simp]\ntheorem count_erase_of_ne {a b : α} (ab : a ≠ b) (l : list α) : count a (l.erase b) = count a l := by\n  rw [count_erase, if_neg ab, tsub_zero]\n#align count_erase_of_ne count_erase_of_ne\n\n",
 "count_erase":
 "theorem count_erase (a b : α) : ∀ l : list α, count a (l.erase b) = count a l - ite (a = b) 1 0\n  | [] => by simp\n  | c :: l => by\n    rw [erase_cons]\n    by_cases hc : c = b\n    · rw [if_pos hc, hc, count_cons', nat.add_sub_cancel]\n    · rw [if_neg hc, count_cons', count_cons', count_erase]\n      by_cases ha : a = b\n      · rw [← ha, eq_comm] at hc\n        rw [if_pos ha, if_neg hc, add_zero, add_zero]\n      · rw [if_neg ha, tsub_zero, tsub_zero]\n#align count_erase count_erase\n\n",
 "count_eq_zero_of_not_mem":
 "@[simp]\ntheorem count_eq_zero_of_not_mem {a : α} {l : list α} (h : a ∉ l) : count a l = 0 :=\n  decidable.by_contradiction fun h' => h <| count_pos.1 (nat.pos_of_ne_zero h')\n#align count_eq_zero_of_not_mem count_eq_zero_of_not_mem\n\n",
 "count_eq_zero":
 "@[simp]\ntheorem count_eq_zero {a : α} {l} : count a l = 0 ↔ a ∉ l :=\n  ⟨not_mem_of_count_eq_zero, count_eq_zero_of_not_mem⟩\n#align count_eq_zero count_eq_zero\n\n",
 "count_eq_length":
 "@[simp]\ntheorem count_eq_length {a : α} {l} : count a l = l.length ↔ ∀ b ∈ l, a = b :=\n  countp_eq_length _\n#align count_eq_length count_eq_length\n\n",
 "count_cons_self":
 "@[simp]\ntheorem count_cons_self (a : α) (l : list α) : count a (a :: l) = count a l + 1 :=\n  if_pos rfl\n#align count_cons_self count_cons_self\n\n",
 "count_cons_of_ne":
 "@[simp]\ntheorem count_cons_of_ne {a b : α} (h : a ≠ b) (l : list α) : count a (b :: l) = count a l :=\n  if_neg h\n#align count_cons_of_ne count_cons_of_ne\n\n",
 "count_cons'":
 "theorem count_cons' (a b : α) (l : list α) : count a (b :: l) = count a l + if a = b then 1 else 0 := by\n  rw [count_cons]; split_ifs <;> rfl\n#align count_cons' count_cons'\n\n",
 "count_cons":
 "theorem count_cons (a b : α) (l : list α) : count a (b :: l) = if a = b then succ (count a l) else count a l :=\n  rfl\n#align count_cons count_cons\n\n",
 "count_concat":
 "theorem count_concat (a : α) (l : list α) : count a (concat l a) = succ (count a l) := by simp [-add_comm]\n#align count_concat count_concat\n\n",
 "count_bind":
 "theorem count_bind {α β} [decidable_eq β] (l : list α) (f : α → list β) (x : β) :\n    count x (l.bind f) = sum (map (count x ∘ f) l) := by rw [list.bind, count_join, map_map]\n#align count_bind count_bind\n\n",
 "count_append":
 "@[simp]\ntheorem count_append (a : α) : ∀ l₁ l₂, count a (l₁ ++ l₂) = count a l₁ + count a l₂ :=\n  countp_append _\n#align count_append count_append\n\n"}