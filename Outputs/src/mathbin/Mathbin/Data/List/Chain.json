{"take":
 "theorem chain'.take (h : Chain' R l) (n : ℕ) : Chain' R (take n l) :=\n  h.prefix (take_prefix _ _)\n#align chain'.take chain'.take\n\n",
 "tail":
 "theorem chain'.tail : ∀ {l} (h : Chain' R l), Chain' R l.tail\n  | [], _ => trivial\n  | [x], _ => trivial\n  | x :: y :: l, h => (chain'_cons.mp h).right\n#align chain'.tail chain'.tail\n\n",
 "suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem chain'.suffix (h : Chain' R l) (h' : «expr <:+ » l₁ l) : Chain' R l₁ :=\n  h.infix h'.is_infix\n#align chain'.suffix chain'.suffix\n\n",
 "sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\nprotected theorem chain'.sublist [is_trans α R] (hl : l₂.chain' R) (h : «expr <+ » l₁ l₂) : l₁.chain' R :=\n  by\n  rw [chain'_iff_pairwise] at hl⊢\n  exact hl.sublist h\n#align chain'.sublist chain'.sublist\n\n",
 "right_of_append":
 "theorem chain'.right_of_append (h : Chain' R (l₁ ++ l₂)) : Chain' R l₂ :=\n  (chain'_append.1 h).2.1\n#align chain'.right_of_append chain'.right_of_append\n\n",
 "relation_refl_trans_gen_of_exists_chain":
 "/-- If there is an `r`-chain starting from `a` and ending at `b`, then `a` and `b` are related by the\nreflexive transitive closure of `r`. The converse of `exists_chain_of_relation_refl_trans_gen`.\n-/\ntheorem relation_refl_trans_gen_of_exists_chain (l) (hl₁ : Chain r a l) (hl₂ : getLast (a :: l) (cons_ne_nil _ _) = b) :\n    Relation.ReflTransGen r a b :=\n  Chain.induction_head _ l hl₁ hl₂ (fun x y => Relation.ReflTransGen.head) relation.refl_trans_gen.refl\n#align relation_refl_trans_gen_of_exists_chain relation_refl_trans_gen_of_exists_chain\n\n",
 "rel_of_chain_cons":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Kenny Lau, Yury Kudryashov\n-/\ntheorem rel_of_chain_cons {a b : α} {l : List α} (p : Chain R a (b :: l)) : R a b :=\n  (chain_cons.1 p).1\n#align rel_of_chain_cons rel_of_chain_cons\n\n",
 "rel_head'":
 "theorem chain'.rel_head' {x l} (h : Chain' R (x :: l)) ⦃y⦄ (hy : y ∈ head? l) : R x y :=\n  by\n  rw [← cons_head'_tail hy] at h\n  exact h.rel_head\n#align chain'.rel_head' chain'.rel_head'\n\n",
 "rel_head":
 "theorem chain'.rel_head {x y l} (h : Chain' R (x :: y :: l)) : R x y :=\n  rel_of_chain_cons h\n#align chain'.rel_head chain'.rel_head\n\n",
 "rel":
 "protected theorem chain.rel [is_trans α R] (hl : l.chain R a) (hb : b ∈ l) : R a b :=\n  by\n  rw [chain_iff_pairwise] at hl\n  exact rel_of_pairwise_cons hl hb\n#align chain.rel chain.rel\n\n",
 "prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem chain'.prefix (h : Chain' R l) (h' : «expr <+: » l₁ l) : Chain' R l₁ :=\n  h.infix h'.is_infix\n#align chain'.prefix chain'.prefix\n\n",
 "pairwise":
 "protected theorem chain.pairwise [is_trans α R] : ∀ {a : α} {l : List α}, Chain R a l → Pairwise R (a :: l)\n  | a, [], chain.nil => pairwise_singleton _ _\n  | a, _, @chain.cons _ _ _ b l h hb =>\n    hb.pairwise.cons\n      (by\n        simp only [mem_cons_iff, forall_eq_or_imp, h, true_and_iff]\n        exact fun c hc => trans h (rel_of_pairwise_cons hb.pairwise hc))\n#align chain.pairwise chain.pairwise\n\n",
 "left_of_append":
 "theorem chain'.left_of_append (h : Chain' R (l₁ ++ l₂)) : Chain' R l₁ :=\n  (chain'_append.1 h).1\n#align chain'.left_of_append chain'.left_of_append\n\n",
 "init":
 "theorem chain'.init (h : Chain' R l) : Chain' R l.init :=\n  h.prefix l.init_prefix\n#align chain'.init chain'.init\n\n",
 "infix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem chain'.infix (h : Chain' R l) (h' : «expr <:+: » l₁ l) : Chain' R l₁ :=\n  by\n  rcases h' with ⟨l₂, l₃, rfl⟩\n  exact h.left_of_append.right_of_append\n#align chain'.infix chain'.infix\n\n",
 "induction_head":
 "/-- Given a chain from `a` to `b`, and a predicate true at `b`, if `r x y → p y → p x` then\nthe predicate is true at `a`.\nThat is, we can propagate the predicate all the way up the chain.\n-/\n@[elab_as_elim]\ntheorem chain.induction_head (p : α → Prop) (l : List α) (h : Chain r a l) (hb : getLast (a :: l) (cons_ne_nil _ _) = b)\n    (carries : ∀ ⦃x y : α⦄, r x y → p y → p x) (final : p b) : p a :=\n  (Chain.induction p l h hb carries final) _ (mem_cons_self _ _)\n#align chain.induction_head chain.induction_head\n\n",
 "induction":
 "/-- Given a chain from `a` to `b`, and a predicate true at `b`, if `r x y → p y → p x` then\nthe predicate is true everywhere in the chain and at `a`.\nThat is, we can propagate the predicate up the chain.\n-/\ntheorem chain.induction (p : α → Prop) (l : List α) (h : Chain r a l) (hb : getLast (a :: l) (cons_ne_nil _ _) = b)\n    (carries : ∀ ⦃x y : α⦄, r x y → p y → p x) (final : p b) : ∀ i ∈ a :: l, p i :=\n  by\n  induction l generalizing a\n  · cases hb\n    simp [final]\n  · rw [chain_cons] at h\n    rintro _ (rfl | _)\n    apply carries h.1 (l_ih h.2 hb _ (or.inl rfl))\n    apply l_ih h.2 hb _ H\n#align chain.induction chain.induction\n\n",
 "imp_head":
 "theorem chain'.imp_head {x y} (h : ∀ {z}, R x z → R y z) {l} (hl : Chain' R (x :: l)) : Chain' R (y :: l) :=\n  hl.tail.cons' fun z hz => h <| hl.rel_head' hz\n#align chain'.imp_head chain'.imp_head\n\n",
 "imp'":
 "theorem chain.imp' {S : α → α → Prop} (HRS : ∀ ⦃a b⦄, R a b → S a b) {a b : α} (Hab : ∀ ⦃c⦄, R a c → S b c) {l : List α}\n    (p : Chain R a l) : Chain S b l := by\n  induction' p with _ a c l r p IH generalizing b <;> constructor <;> [exact Hab r, exact IH (@HRS _)]\n#align chain.imp' chain.imp'\n\n",
 "imp":
 "theorem chain'.imp {S : α → α → Prop} (H : ∀ a b, R a b → S a b) {l : List α} (p : Chain' R l) : Chain' S l := by\n  cases l <;> [trivial, exact p.imp H]\n#align chain'.imp chain'.imp\n\n",
 "iff_mem":
 "theorem chain'.iff_mem : ∀ {l : List α}, Chain' R l ↔ Chain' (fun x y => x ∈ l ∧ y ∈ l ∧ R x y) l\n  | [] => iff.rfl\n  | x :: l =>\n    ⟨fun h => (Chain.iff_mem.1 h).imp fun a b ⟨h₁, h₂, h₃⟩ => ⟨h₁, or.inr h₂, h₃⟩, Chain'.imp fun a b h => h.2.2⟩\n#align chain'.iff_mem chain'.iff_mem\n\n",
 "iff":
 "theorem chain'.iff {S : α → α → Prop} (H : ∀ a b, R a b ↔ S a b) {l : List α} : Chain' R l ↔ Chain' S l :=\n  ⟨Chain'.imp fun a b => (H a b).1, Chain'.imp fun a b => (H a b).2⟩\n#align chain'.iff chain'.iff\n\n",
 "exists_chain_of_relation_refl_trans_gen":
 "/-- If `a` and `b` are related by the reflexive transitive closure of `r`, then there is a `r`-chain\nstarting from `a` and ending on `b`.\nThe converse of `relation_refl_trans_gen_of_exists_chain`.\n-/\ntheorem exists_chain_of_relation_refl_trans_gen (h : Relation.ReflTransGen r a b) :\n    ∃ l, Chain r a l ∧ getLast (a :: l) (cons_ne_nil _ _) = b :=\n  by\n  apply Relation.ReflTransGen.head_induction_on h\n  · exact ⟨[], chain.nil, rfl⟩\n  · intro c d e t ih\n    obtain ⟨l, hl₁, hl₂⟩ := ih\n    refine' ⟨d :: l, chain.cons e hl₁, _⟩\n    rwa [last_cons_cons]\n#align exists_chain_of_relation_refl_trans_gen exists_chain_of_relation_refl_trans_gen\n\n",
 "drop":
 "theorem chain'.drop (h : Chain' R l) (n : ℕ) : Chain' R (drop n l) :=\n  h.suffix (drop_suffix _ _)\n#align chain'.drop chain'.drop\n\n",
 "cons'":
 "theorem chain'.cons' {x} : ∀ {l : List α}, Chain' R l → (∀ y ∈ l.head', R x y) → Chain' R (x :: l)\n  | [], _, _ => chain'_singleton x\n  | a :: l, hl, H => hl.cons <| H _ rfl\n#align chain'.cons' chain'.cons'\n\n",
 "cons":
 "theorem chain'.cons {x y l} (h₁ : R x y) (h₂ : Chain' R (y :: l)) : Chain' R (x :: y :: l) :=\n  chain'_cons.2 ⟨h₁, h₂⟩\n#align chain'.cons chain'.cons\n\n",
 "chain_split":
 "theorem chain_split {a b : α} {l₁ l₂ : List α} : Chain R a (l₁ ++ b :: l₂) ↔ Chain R a (l₁ ++ [b]) ∧ Chain R b l₂ := by\n  induction' l₁ with x l₁ IH generalizing a <;>\n    simp only [*, nil_append, cons_append, chain.nil, chain_cons, and_true_iff, and_assoc']\n#align chain_split chain_split\n\n",
 "chain_singleton":
 "theorem chain_singleton {a b : α} : Chain R a [b] ↔ R a b := by simp only [chain_cons, chain.nil, and_true_iff]\n#align chain_singleton chain_singleton\n\n",
 "chain_pmap_of_chain":
 "theorem chain_pmap_of_chain {S : β → β → Prop} {p : α → Prop} {f : ∀ a, p a → β}\n    (H : ∀ a b ha hb, R a b → S (f a ha) (f b hb)) {a : α} {l : List α} (hl₁ : Chain R a l) (ha : p a)\n    (hl₂ : ∀ a ∈ l, p a) : Chain S (f a ha) (List.pmap f l hl₂) :=\n  by\n  induction' l with lh lt l_ih generalizing a\n  · simp\n  · simp [H _ _ _ _ (rel_of_chain_cons hl₁), l_ih _ (chain_of_chain_cons hl₁)]\n#align chain_pmap_of_chain chain_pmap_of_chain\n\n",
 "chain_of_chain_pmap":
 "theorem chain_of_chain_pmap {S : β → β → Prop} {p : α → Prop} (f : ∀ a, p a → β) {l : List α} (hl₁ : ∀ a ∈ l, p a)\n    {a : α} (ha : p a) (hl₂ : Chain S (f a ha) (List.pmap f l hl₁)) (H : ∀ a b ha hb, S (f a ha) (f b hb) → R a b) :\n    Chain R a l := by\n  induction' l with lh lt l_ih generalizing a\n  · simp\n  · simp [H _ _ _ _ (rel_of_chain_cons hl₂), l_ih _ _ (chain_of_chain_cons hl₂)]\n#align chain_of_chain_pmap chain_of_chain_pmap\n\n",
 "chain_of_chain_map":
 "theorem chain_of_chain_map {S : β → β → Prop} (f : α → β) (H : ∀ a b : α, S (f a) (f b) → R a b) {a : α} {l : List α}\n    (p : Chain S (f a) (map f l)) : Chain R a l :=\n  ((chain_map f).1 p).imp H\n#align chain_of_chain_map chain_of_chain_map\n\n",
 "chain_of_chain_cons":
 "theorem chain_of_chain_cons {a b : α} {l : List α} (p : Chain R a (b :: l)) : Chain R b l :=\n  (chain_cons.1 p).2\n#align chain_of_chain_cons chain_of_chain_cons\n\n",
 "chain_map_of_chain":
 "theorem chain_map_of_chain {S : β → β → Prop} (f : α → β) (H : ∀ a b : α, R a b → S (f a) (f b)) {a : α} {l : List α}\n    (p : Chain R a l) : Chain S (f a) (map f l) :=\n  (chain_map f).2 <| p.imp H\n#align chain_map_of_chain chain_map_of_chain\n\n",
 "chain_map":
 "theorem chain_map (f : β → α) {b : β} {l : List β} :\n    Chain R (f b) (map f l) ↔ Chain (fun a b : β => R (f a) (f b)) b l := by\n  induction l generalizing b <;> simp only [map, chain.nil, chain_cons, *]\n#align chain_map chain_map\n\n",
 "chain_iff_pairwise":
 "theorem chain_iff_pairwise [is_trans α R] {a : α} {l : List α} : Chain R a l ↔ Pairwise R (a :: l) :=\n  ⟨Chain.pairwise, Pairwise.chain⟩\n#align chain_iff_pairwise chain_iff_pairwise\n\n",
 "chain_iff_nth_le":
 "theorem chain_iff_nth_le {R} :\n    ∀ {a : α} {l : List α},\n      Chain R a l ↔\n        (∀ h : 0 < length l, R a (nthLe l 0 h)) ∧\n          ∀ (i) (h : i < length l - 1), R (nthLe l i (lt_of_lt_pred h)) (nthLe l (i + 1) (lt_pred_iff.mp h))\n  | a, [] => by simp\n  | a, b :: t => by\n    rw [chain_cons, chain_iff_nth_le]\n    constructor\n    · rintro ⟨R, ⟨h0, h⟩⟩\n      constructor\n      · intro w\n        exact R\n      intro i w\n      cases i\n      · apply h0\n      convert h i _ using 1\n      simp only [succ_eq_add_one, add_succ_sub_one, add_zero, length, add_lt_add_iff_right] at w\n      exact lt_pred_iff.mpr w\n    rintro ⟨h0, h⟩; constructor\n    · apply h0\n      simp\n    constructor\n    · apply h 0\n    intro i w; convert h (i + 1) _ using 1\n    exact lt_pred_iff.mp w\n#align chain_iff_nth_le chain_iff_nth_le\n\n",
 "chain_iff_forall₂":
 "theorem chain_iff_forall₂ : ∀ {a : α} {l : List α}, Chain R a l ↔ l = [] ∨ Forall₂ R (a :: dropLast l) l\n  | a, [] => by simp\n  | a, [b] => by simp [init]\n  | a, b :: c :: l => by simp [@chain_iff_forall₂ b]\n#align chain_iff_forall₂ chain_iff_forall₂\n\n",
 "chain_append_singleton_iff_forall₂":
 "theorem chain_append_singleton_iff_forall₂ : Chain R a (l ++ [b]) ↔ Forall₂ R (a :: l) (l ++ [b]) := by\n  simp [chain_iff_forall₂, init]\n#align chain_append_singleton_iff_forall₂ chain_append_singleton_iff_forall₂\n\n",
 "chain_append_cons_cons":
 "@[simp]\ntheorem chain_append_cons_cons {a b c : α} {l₁ l₂ : List α} :\n    Chain R a (l₁ ++ b :: c :: l₂) ↔ Chain R a (l₁ ++ [b]) ∧ R b c ∧ Chain R c l₂ := by rw [chain_split, chain_cons]\n#align chain_append_cons_cons chain_append_cons_cons\n\n",
 "chain'_split":
 "theorem chain'_split {a : α} : ∀ {l₁ l₂ : List α}, Chain' R (l₁ ++ a :: l₂) ↔ Chain' R (l₁ ++ [a]) ∧ Chain' R (a :: l₂)\n  | [], l₂ => (and_iff_right (chain'_singleton a)).symm\n  | b :: l₁, l₂ => chain_split\n#align chain'_split chain'_split\n\n",
 "chain'_singleton":
 "@[simp]\ntheorem chain'_singleton (a : α) : Chain' R [a] :=\n  Chain.nil\n#align chain'_singleton chain'_singleton\n\n",
 "chain'_reverse":
 "theorem chain'_reverse : ∀ {l}, Chain' R (reverse l) ↔ Chain' (flip R) l\n  | [] => iff.rfl\n  | [a] => by simp only [chain'_singleton, reverse_singleton]\n  | a :: b :: l => by\n    rw [chain'_cons, reverse_cons, reverse_cons, append_assoc, cons_append, nil_append, chain'_split, ← reverse_cons,\n      @chain'_reverse (b :: l), and_comm', chain'_pair, flip]\n#align chain'_reverse chain'_reverse\n\n",
 "chain'_pair":
 "theorem chain'_pair {x y} : Chain' R [x, y] ↔ R x y := by simp only [chain'_singleton, chain'_cons, and_true_iff]\n#align chain'_pair chain'_pair\n\n",
 "chain'_of_chain'_map":
 "theorem chain'_of_chain'_map {S : β → β → Prop} (f : α → β) (H : ∀ a b : α, S (f a) (f b) → R a b) {l : List α}\n    (p : Chain' S (map f l)) : Chain' R l :=\n  ((chain'_map f).1 p).imp H\n#align chain'_of_chain'_map chain'_of_chain'_map\n\n",
 "chain'_nil":
 "@[simp]\ntheorem chain'_nil : Chain' R [] :=\n  trivial\n#align chain'_nil chain'_nil\n\n",
 "chain'_map_of_chain'":
 "theorem chain'_map_of_chain' {S : β → β → Prop} (f : α → β) (H : ∀ a b : α, R a b → S (f a) (f b)) {l : List α}\n    (p : Chain' R l) : Chain' S (map f l) :=\n  (chain'_map f).2 <| p.imp H\n#align chain'_map_of_chain' chain'_map_of_chain'\n\n",
 "chain'_map":
 "theorem chain'_map (f : β → α) {l : List β} : Chain' R (map f l) ↔ Chain' (fun a b : β => R (f a) (f b)) l := by\n  cases l <;> [rfl, exact chain_map _]\n#align chain'_map chain'_map\n\n",
 "chain'_is_infix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem chain'_is_infix : ∀ l : List α, Chain' (fun x y => «expr <:+: » [x, y] l) l\n  | [] => chain'_nil\n  | [a] => chain'_singleton _\n  | a :: b :: l =>\n    chain'_cons.2 ⟨⟨[], l, by simp⟩, (chain'_is_infix (b :: l)).imp fun x y h => h.trans ⟨[a], [], by simp⟩⟩\n#align chain'_is_infix chain'_is_infix\n\n",
 "chain'_iff_pairwise":
 "theorem chain'_iff_pairwise [is_trans α R] : ∀ {l : List α}, Chain' R l ↔ Pairwise R l\n  | [] => (iff_true_intro Pairwise.nil).symm\n  | a :: l => chain_iff_pairwise\n#align chain'_iff_pairwise chain'_iff_pairwise\n\n",
 "chain'_iff_nth_le":
 "theorem chain'_iff_nth_le {R} :\n    ∀ {l : List α},\n      Chain' R l ↔ ∀ (i) (h : i < length l - 1), R (nthLe l i (lt_of_lt_pred h)) (nthLe l (i + 1) (lt_pred_iff.mp h))\n  | [] => by simp\n  | [a] => by simp\n  | a :: b :: t => by\n    rw [← and_forall_succ, chain'_cons, chain'_iff_nth_le]\n    simp only [length, nth_le, add_tsub_cancel_right, add_lt_add_iff_right, tsub_pos_iff_lt, one_lt_succ_succ,\n      true_imp_iff]\n    rfl\n#align chain'_iff_nth_le chain'_iff_nth_le\n\n",
 "chain'_cons'":
 "theorem chain'_cons' {x l} : Chain' R (x :: l) ↔ (∀ y ∈ head? l, R x y) ∧ Chain' R l :=\n  ⟨fun h => ⟨h.rel_head', h.tail⟩, fun ⟨h₁, h₂⟩ => h₂.cons' h₁⟩\n#align chain'_cons' chain'_cons'\n\n",
 "chain'_cons":
 "@[simp]\ntheorem chain'_cons {x y l} : Chain' R (x :: y :: l) ↔ R x y ∧ Chain' R (y :: l) :=\n  chain_cons\n#align chain'_cons chain'_cons\n\n",
 "chain'_append_cons_cons":
 "@[simp]\ntheorem chain'_append_cons_cons {b c : α} {l₁ l₂ : List α} :\n    Chain' R (l₁ ++ b :: c :: l₂) ↔ Chain' R (l₁ ++ [b]) ∧ R b c ∧ Chain' R (c :: l₂) := by\n  rw [chain'_split, chain'_cons]\n#align chain'_append_cons_cons chain'_append_cons_cons\n\n",
 "chain'_append":
 "theorem chain'_append :\n    ∀ {l₁ l₂ : List α}, Chain' R (l₁ ++ l₂) ↔ Chain' R l₁ ∧ Chain' R l₂ ∧ ∀ x ∈ l₁.last', ∀ y ∈ l₂.head', R x y\n  | [], l => by simp\n  | [a], l => by simp [chain'_cons', and_comm']\n  | a :: b :: l₁, l₂ => by\n    rw [cons_append, cons_append, chain'_cons, chain'_cons, ← cons_append, chain'_append, last', and_assoc]\n#align chain'_append chain'_append\n\n",
 "chain'":
 "theorem pairwise.chain' : ∀ {l : List α}, Pairwise R l → Chain' R l\n  | [], _ => trivial\n  | a :: l, h => Pairwise.chain h\n#align pairwise.chain' pairwise.chain'\n\n",
 "chain":
 "protected theorem pairwise.chain (p : Pairwise R (a :: l)) : Chain R a l :=\n  by\n  cases' pairwise_cons.1 p with r p'; clear p\n  induction' p' with b l r' p IH generalizing a; · exact chain.nil\n  simp only [chain_cons, forall_mem_cons] at r\n  exact chain_cons.2 ⟨r.1, IH r'⟩\n#align pairwise.chain pairwise.chain\n\n",
 "append_overlap":
 "/-- If `l₁ l₂` and `l₃` are lists and `l₁ ++ l₂` and `l₂ ++ l₃` both satisfy\n  `chain' R`, then so does `l₁ ++ l₂ ++ l₃` provided `l₂ ≠ []` -/\ntheorem chain'.append_overlap {l₁ l₂ l₃ : List α} (h₁ : Chain' R (l₁ ++ l₂)) (h₂ : Chain' R (l₂ ++ l₃)) (hn : l₂ ≠ []) :\n    Chain' R (l₁ ++ l₂ ++ l₃) :=\n  h₁.append h₂.right_of_append <| by simpa only [last'_append_of_ne_nil _ hn] using (chain'_append.1 h₂).2.2\n#align chain'.append_overlap chain'.append_overlap\n\n",
 "append":
 "theorem chain'.append (h₁ : Chain' R l₁) (h₂ : Chain' R l₂) (h : ∀ x ∈ l₁.last', ∀ y ∈ l₂.head', R x y) :\n    Chain' R (l₁ ++ l₂) :=\n  chain'_append.2 ⟨h₁, h₂, h⟩\n#align chain'.append chain'.append\n\n"}