{"nth_le_map_with_index":
 "@[simp]\ntheorem nth_le_map_with_index {α β} (l : List α) (f : ℕ → α → β) (i : ℕ) (h : i < l.length)\n    (h' : i < (l.map_with_index f).length := h.trans_le (l.length_map_with_index f).ge) :\n    (l.map_with_index f).nth_le i h' = f i (l.nth_le i h) := by simp [map_with_index_eq_enum_map, enum_eq_zip_range]\n#align nth_le_map_with_index nth_le_map_with_index\n\n",
 "mmap_with_index_eq_mmap_enum":
 "theorem mmap_with_index_eq_mmap_enum {α β} (f : ℕ → α → m β) (as : List α) :\n    mapIdxM f as = List.traverse (uncurry f) (enum as) := by\n  simp only [mmap_with_index, mmap_with_index_aux_spec, mmap_with_index_aux_eq_mmap_with_index_aux_spec, enum]\n#align mmap_with_index_eq_mmap_enum mmap_with_index_eq_mmap_enum\n\n",
 "mmap_with_index_aux_spec_cons":
 "-- Note: `traverse` the class method would require a less universe-polymorphic\n-- `m : Type u → Type u`.\ntheorem mmap_with_index_aux_spec_cons {α β} (f : ℕ → α → m β) (start : ℕ) (a : α) (as : List α) :\n    mapIdxMAuxSpec f start (a :: as) = List.cons <$> f start a <*> mapIdxMAuxSpec f (start + 1) as :=\n  rfl\n#align mmap_with_index_aux_spec_cons mmap_with_index_aux_spec_cons\n\n",
 "mmap_with_index_aux_eq_mmap_with_index_aux_spec":
 "theorem mmap_with_index_aux_eq_mmap_with_index_aux_spec {α β} (f : ℕ → α → m β) (start : ℕ) (as : List α) :\n    mmap_with_index_aux f start as = mapIdxMAuxSpec f start as :=\n  by\n  induction as generalizing start\n  · rfl\n  · simp [mmap_with_index_aux, mmap_with_index_aux_spec_cons, *]\n#align mmap_with_index_aux_eq_mmap_with_index_aux_spec mmap_with_index_aux_eq_mmap_with_index_aux_spec\n\n",
 "mmap_with_index'_eq_mmap_with_index":
 "theorem mmap_with_index'_eq_mmap_with_index {α} (f : ℕ → α → m PUnit) (as : List α) :\n    mapIdxM' f as = mapIdxM f as *> pure PUnit.unit := by apply mmap_with_index'_aux_eq_mmap_with_index_aux\n#align mmap_with_index'_eq_mmap_with_index mmap_with_index'_eq_mmap_with_index\n\n",
 "mmap_with_index'_aux_eq_mmap_with_index_aux":
 "theorem mmap_with_index'_aux_eq_mmap_with_index_aux {α} (f : ℕ → α → m PUnit) (start : ℕ) (as : List α) :\n    mapIdxMAux' f start as = mmap_with_index_aux f start as *> pure PUnit.unit := by\n  induction as generalizing start <;>\n    simp [mmap_with_index'_aux, mmap_with_index_aux, *, seq_right_eq, const, -comp_const, functor_norm]\n#align mmap_with_index'_aux_eq_mmap_with_index_aux mmap_with_index'_aux_eq_mmap_with_index_aux\n\n",
 "mfoldr_with_index_eq_mfoldr_enum":
 "theorem mfoldr_with_index_eq_mfoldr_enum {α β} (f : ℕ → α → β → m β) (b : β) (as : List α) :\n    foldrIdxM f b as = foldrM (uncurry f) b (enum as) := by\n  simp only [mfoldr_with_index, mfoldr_eq_foldr, foldr_with_index_eq_foldr_enum, uncurry]\n#align mfoldr_with_index_eq_mfoldr_enum mfoldr_with_index_eq_mfoldr_enum\n\n",
 "mfoldl_with_index_eq_mfoldl_enum":
 "theorem mfoldl_with_index_eq_mfoldl_enum [LawfulMonad m] {α β} (f : ℕ → β → α → m β) (b : β) (as : List α) :\n    foldlIdxM f b as = foldlM (fun b (p : ℕ × α) => f p.fst b p.snd) b (enum as) := by\n  rw [mfoldl_with_index, mfoldl_eq_foldl, foldl_with_index_eq_foldl_enum]\n#align mfoldl_with_index_eq_mfoldl_enum mfoldl_with_index_eq_mfoldl_enum\n\n",
 "map_with_index_nil":
 "/-\nCopyright (c) 2020 Jannis Limperg. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jannis Limperg\n-/\n@[simp]\ntheorem map_with_index_nil {α β} (f : ℕ → α → β) : mapIdx f [] = [] :=\n  rfl\n#align map_with_index_nil map_with_index_nil\n\n",
 "map_with_index_eq_of_fn":
 "theorem map_with_index_eq_of_fn {α β} (l : List α) (f : ℕ → α → β) :\n    l.map_with_index f = ofFn fun i : Fin l.length => f (i : ℕ) (l.nth_le i i.is_lt) :=\n  by\n  induction' l with hd tl IH generalizing f\n  · simp\n  · simpa [IH]\n#align map_with_index_eq_of_fn map_with_index_eq_of_fn\n\n",
 "map_with_index_eq_enum_map":
 "theorem map_with_index_eq_enum_map (l : List α) (f : ℕ → α → β) :\n    l.map_with_index f = l.enum.map (function.uncurry f) :=\n  by\n  induction' l with hd tl hl generalizing f\n  · simp [List.enum_eq_zip_range]\n  · rw [map_with_index, map_with_index_core, map_with_index_core_eq, hl]\n    simp [enum_eq_zip_range, range_succ_eq_map, zip_with_map_left, map_uncurry_zip_eq_zip_with]\n#align map_with_index_eq_enum_map map_with_index_eq_enum_map\n\n",
 "map_with_index_core_eq":
 "theorem map_with_index_core_eq (l : List α) (f : ℕ → α → β) (n : ℕ) :\n    l.map_with_index_core f n = l.map_with_index fun i a => f (i + n) a :=\n  by\n  induction' l with hd tl hl generalizing f n\n  · simpa\n  · rw [map_with_index]\n    simp [map_with_index_core, hl, add_left_comm, add_assoc, add_comm]\n#align map_with_index_core_eq map_with_index_core_eq\n\n",
 "map_with_index_cons":
 "@[simp]\ntheorem map_with_index_cons {α β} (l : List α) (f : ℕ → α → β) (a : α) :\n    mapIdx f (a :: l) = f 0 a :: mapIdx (fun i => f (i + 1)) l := by\n  simp [map_with_index_eq_enum_map, enum_eq_zip_range, map_uncurry_zip_eq_zip_with, range_succ_eq_map,\n    zip_with_map_left]\n#align map_with_index_cons map_with_index_cons\n\n",
 "map_with_index_append":
 "theorem map_with_index_append {α} (K L : List α) (f : ℕ → α → β) :\n    (K ++ L).map_with_index f = K.map_with_index f ++ L.map_with_index fun i a => f (i + K.length) a :=\n  by\n  induction' K with a J IH generalizing f\n  · simp\n  · simp [IH fun i => f (i + 1), add_assoc]\n#align map_with_index_append map_with_index_append\n\n",
 "length_map_with_index":
 "@[simp]\ntheorem length_map_with_index {α β} (l : List α) (f : ℕ → α → β) : (l.map_with_index f).length = l.length :=\n  by\n  induction' l with hd tl IH generalizing f\n  · simp\n  · simp [IH]\n#align length_map_with_index length_map_with_index\n\n",
 "indexes_values_eq_filter_enum":
 "theorem indexes_values_eq_filter_enum (p : α → Prop) [DecidablePred p] (as : List α) :\n    indexesValues p as = filter (p ∘ Prod.snd) (enum as) := by\n  simp [indexes_values, foldr_with_index_eq_foldr_enum, uncurry, filter_eq_foldr]\n#align indexes_values_eq_filter_enum indexes_values_eq_filter_enum\n\n",
 "foldr_with_index_eq_foldr_enum":
 "theorem foldr_with_index_eq_foldr_enum (f : ℕ → α → β → β) (b : β) (as : List α) :\n    foldrIdx f b as = foldr (uncurry f) b (enum as) := by\n  simp only [foldr_with_index, foldr_with_index_aux_spec, foldr_with_index_aux_eq_foldr_with_index_aux_spec, enum]\n#align foldr_with_index_eq_foldr_enum foldr_with_index_eq_foldr_enum\n\n",
 "foldr_with_index_aux_spec_cons":
 "theorem foldr_with_index_aux_spec_cons (f : ℕ → α → β → β) (start b a as) :\n    foldrIdxSpec f start b (a :: as) = f start a (foldrIdxSpec f (start + 1) b as) :=\n  rfl\n#align foldr_with_index_aux_spec_cons foldr_with_index_aux_spec_cons\n\n",
 "foldr_with_index_aux_eq_foldr_with_index_aux_spec":
 "theorem foldr_with_index_aux_eq_foldr_with_index_aux_spec (f : ℕ → α → β → β) (start b as) :\n    foldr_with_index_aux f start b as = foldrIdxSpec f start b as :=\n  by\n  induction as generalizing start\n  · rfl\n  · simp only [foldr_with_index_aux, foldr_with_index_aux_spec_cons, *]\n#align foldr_with_index_aux_eq_foldr_with_index_aux_spec foldr_with_index_aux_eq_foldr_with_index_aux_spec\n\n",
 "foldl_with_index_eq_foldl_enum":
 "theorem foldl_with_index_eq_foldl_enum (f : ℕ → α → β → α) (a : α) (bs : List β) :\n    foldlIdx f a bs = foldl (fun a (p : ℕ × β) => f p.fst a p.snd) a (enum bs) := by\n  simp only [foldl_with_index, foldl_with_index_aux_spec, foldl_with_index_aux_eq_foldl_with_index_aux_spec, enum]\n#align foldl_with_index_eq_foldl_enum foldl_with_index_eq_foldl_enum\n\n",
 "foldl_with_index_aux_spec_cons":
 "theorem foldl_with_index_aux_spec_cons (f : ℕ → α → β → α) (start a b bs) :\n    foldlIdxSpec f start a (b :: bs) = foldlIdxSpec f (start + 1) (f start a b) bs :=\n  rfl\n#align foldl_with_index_aux_spec_cons foldl_with_index_aux_spec_cons\n\n",
 "foldl_with_index_aux_eq_foldl_with_index_aux_spec":
 "theorem foldl_with_index_aux_eq_foldl_with_index_aux_spec (f : ℕ → α → β → α) (start a bs) :\n    foldl_with_index_aux f start a bs = foldlIdxSpec f start a bs :=\n  by\n  induction bs generalizing start a\n  · rfl\n  · simp [foldl_with_index_aux, foldl_with_index_aux_spec_cons, *]\n#align foldl_with_index_aux_eq_foldl_with_index_aux_spec foldl_with_index_aux_eq_foldl_with_index_aux_spec\n\n",
 "find_indexes_eq_map_indexes_values":
 "theorem find_indexes_eq_map_indexes_values (p : α → Prop) [DecidablePred p] (as : List α) :\n    findIdxs p as = map Prod.fst (indexesValues p as) := by\n  simp only [indexes_values_eq_filter_enum, map_filter_eq_foldr, find_indexes, foldr_with_index_eq_foldr_enum, uncurry]\n#align find_indexes_eq_map_indexes_values find_indexes_eq_map_indexes_values\n\n"}