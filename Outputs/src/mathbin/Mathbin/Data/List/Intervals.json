{"zero_bot":
 "/-\nCopyright (c) 2019 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem zero_bot (n : ℕ) : Ico 0 n = range n := by rw [Ico, tsub_zero, range_eq_range']\n#align zero_bot zero_bot\n\n",
 "trichotomy":
 "/-- For any natural numbers n, a, and b, one of the following holds:\n1. n < a\n2. n ≥ b\n3. n ∈ Ico a b\n-/\ntheorem trichotomy (n a b : ℕ) : n < a ∨ b ≤ n ∨ n ∈ Ico a b :=\n  by\n  by_cases h₁ : n < a\n  · left\n    exact h₁\n  · right\n    by_cases h₂ : n ∈ Ico a b\n    · right\n      exact h₂\n    · left\n      simp only [Ico.mem, not_and, not_lt] at *\n      exact h₂ h₁\n#align trichotomy trichotomy\n\n",
 "succ_top":
 "theorem succ_top {n m : ℕ} (h : n ≤ m) : Ico n (m + 1) = Ico n m ++ [m] :=\n  by\n  rwa [← succ_singleton, append_consecutive]\n  exact nat.le_succ _\n#align succ_top succ_top\n\n",
 "succ_singleton":
 "@[simp]\ntheorem succ_singleton {n : ℕ} : Ico n (n + 1) = [n] :=\n  by\n  dsimp [Ico]\n  simp [add_tsub_cancel_left]\n#align succ_singleton succ_singleton\n\n",
 "self_empty":
 "@[simp]\ntheorem self_empty {n : ℕ} : Ico n n = [] :=\n  eq_nil_of_le (le_refl n)\n#align self_empty self_empty\n\n",
 "pred_singleton":
 "@[simp]\ntheorem pred_singleton {m : ℕ} (h : 0 < m) : Ico (m - 1) m = [m - 1] :=\n  by\n  dsimp [Ico]\n  rw [tsub_tsub_cancel_of_le (succ_le_of_lt h)]\n  simp\n#align pred_singleton pred_singleton\n\n",
 "pairwise_lt":
 "theorem pairwise_lt (n m : ℕ) : Pairwise (· < ·) (Ico n m) :=\n  by\n  dsimp [Ico]\n  simp only [pairwise_lt_range']\n#align pairwise_lt pairwise_lt\n\n",
 "not_mem_top":
 "@[simp]\ntheorem not_mem_top {n m : ℕ} : m ∉ Ico n m := by simp\n#align not_mem_top not_mem_top\n\n",
 "nodup":
 "theorem nodup (n m : ℕ) : Nodup (Ico n m) := by\n  dsimp [Ico]\n  simp only [nodup_range']\n#align nodup nodup\n\n",
 "mem":
 "@[simp]\ntheorem mem {n m l : ℕ} : l ∈ Ico n m ↔ n ≤ l ∧ l < m :=\n  by\n  suffices n ≤ l ∧ l < n + (m - n) ↔ n ≤ l ∧ l < m by simp [Ico, this]\n  cases' le_total n m with hnm hmn\n  · rw [add_tsub_cancel_of_le hnm]\n  · rw [tsub_eq_zero_iff_le.mpr hmn, add_zero]\n    exact\n      and_congr_right fun hnl => iff.intro (fun hln => (not_le_of_gt hln hnl).elim) fun hlm => lt_of_lt_of_le hlm hmn\n#align mem mem\n\n",
 "map_sub":
 "#print map_sub /-\ntheorem map_sub (n m k : ℕ) (h₁ : k ≤ n) : ((Ico n m).map fun x => x - k) = Ico (n - k) (m - k) := by\n  rw [Ico, Ico, tsub_tsub_tsub_cancel_right h₁, map_sub_range' _ _ _ h₁]\n#align map_sub map_sub\n-/\n\n",
 "map_add":
 "#print map_add /-\ntheorem map_add (n m k : ℕ) : (Ico n m).map ((· + ·) k) = Ico (n + k) (m + k) := by\n  rw [Ico, Ico, map_add_range', add_tsub_add_eq_tsub_right, add_comm n k]\n#align map_add map_add\n-/\n\n",
 "length":
 "@[simp]\ntheorem length (n m : ℕ) : length (Ico n m) = m - n :=\n  by\n  dsimp [Ico]\n  simp only [length_range']\n#align length length\n\n",
 "inter_consecutive":
 "@[simp]\ntheorem inter_consecutive (n m l : ℕ) : Ico n m ∩ Ico m l = [] :=\n  by\n  apply eq_nil_iff_forall_not_mem.2\n  intro a\n  simp only [and_imp, not_and, not_lt, List.mem_inter, List.Ico.mem]\n  intro h₁ h₂ h₃\n  exfalso\n  exact not_lt_of_ge h₃ h₂\n#align inter_consecutive inter_consecutive\n\n",
 "filter_lt_of_top_le":
 "theorem filter_lt_of_top_le {n m l : ℕ} (hml : m ≤ l) : ((Ico n m).filter fun x => x < l) = Ico n m :=\n  filter_eq_self.2 fun k hk => lt_of_lt_of_le (mem.1 hk).2 hml\n#align filter_lt_of_top_le filter_lt_of_top_le\n\n",
 "filter_lt_of_succ_bot":
 "theorem filter_lt_of_succ_bot {n m : ℕ} (hnm : n < m) : ((Ico n m).filter fun x => x < n + 1) = [n] :=\n  by\n  have r : min m (n + 1) = n + 1 := (@inf_eq_right _ _ m (n + 1)).mpr hnm\n  simp [filter_lt n m (n + 1), r]\n#align filter_lt_of_succ_bot filter_lt_of_succ_bot\n\n",
 "filter_lt_of_le_bot":
 "theorem filter_lt_of_le_bot {n m l : ℕ} (hln : l ≤ n) : ((Ico n m).filter fun x => x < l) = [] :=\n  filter_eq_nil.2 fun k hk => not_lt_of_le <| le_trans hln <| (mem.1 hk).1\n#align filter_lt_of_le_bot filter_lt_of_le_bot\n\n",
 "filter_lt_of_ge":
 "theorem filter_lt_of_ge {n m l : ℕ} (hlm : l ≤ m) : ((Ico n m).filter fun x => x < l) = Ico n l :=\n  by\n  cases' le_total n l with hnl hln\n  ·\n    rw [← append_consecutive hnl hlm, filter_append, filter_lt_of_top_le (le_refl l), filter_lt_of_le_bot (le_refl l),\n      append_nil]\n  · rw [eq_nil_of_le hln, filter_lt_of_le_bot hln]\n#align filter_lt_of_ge filter_lt_of_ge\n\n",
 "filter_lt":
 "@[simp]\ntheorem filter_lt (n m l : ℕ) : ((Ico n m).filter fun x => x < l) = Ico n (min m l) :=\n  by\n  cases' le_total m l with hml hlm\n  · rw [min_eq_left hml, filter_lt_of_top_le hml]\n  · rw [min_eq_right hlm, filter_lt_of_ge hlm]\n#align filter_lt filter_lt\n\n",
 "filter_le_of_top_le":
 "theorem filter_le_of_top_le {n m l : ℕ} (hml : m ≤ l) : ((Ico n m).filter fun x => l ≤ x) = [] :=\n  filter_eq_nil.2 fun k hk => not_le_of_gt (lt_of_lt_of_le (mem.1 hk).2 hml)\n#align filter_le_of_top_le filter_le_of_top_le\n\n",
 "filter_le_of_le_bot":
 "theorem filter_le_of_le_bot {n m l : ℕ} (hln : l ≤ n) : ((Ico n m).filter fun x => l ≤ x) = Ico n m :=\n  filter_eq_self.2 fun k hk => le_trans hln (mem.1 hk).1\n#align filter_le_of_le_bot filter_le_of_le_bot\n\n",
 "filter_le_of_le":
 "theorem filter_le_of_le {n m l : ℕ} (hnl : n ≤ l) : ((Ico n m).filter fun x => l ≤ x) = Ico l m :=\n  by\n  cases' le_total l m with hlm hml\n  ·\n    rw [← append_consecutive hnl hlm, filter_append, filter_le_of_top_le (le_refl l), filter_le_of_le_bot (le_refl l),\n      nil_append]\n  · rw [eq_nil_of_le hml, filter_le_of_top_le hml]\n#align filter_le_of_le filter_le_of_le\n\n",
 "filter_le_of_bot":
 "@[simp]\ntheorem filter_le_of_bot {n m : ℕ} (hnm : n < m) : ((Ico n m).filter fun x => x ≤ n) = [n] :=\n  by\n  rw [← filter_lt_of_succ_bot hnm]\n  exact filter_congr' fun _ _ => lt_succ_iff.symm\n#align filter_le_of_bot filter_le_of_bot\n\n",
 "filter_le":
 "@[simp]\ntheorem filter_le (n m l : ℕ) : ((Ico n m).filter fun x => l ≤ x) = Ico (max n l) m :=\n  by\n  cases' le_total n l with hnl hln\n  · rw [max_eq_right hnl, filter_le_of_le hnl]\n  · rw [max_eq_left hln, filter_le_of_le_bot hln]\n#align filter_le filter_le\n\n",
 "eq_nil_of_le":
 "theorem eq_nil_of_le {n m : ℕ} (h : m ≤ n) : Ico n m = [] := by simp [Ico, tsub_eq_zero_iff_le.mpr h]\n#align eq_nil_of_le eq_nil_of_le\n\n",
 "eq_empty_iff":
 "@[simp]\ntheorem eq_empty_iff {n m : ℕ} : Ico n m = [] ↔ m ≤ n :=\n  iff.intro (fun h => tsub_eq_zero_iff_le.mp <| by rw [← length, h, list.length]) eq_nil_of_le\n#align eq_empty_iff eq_empty_iff\n\n",
 "eq_cons":
 "theorem eq_cons {n m : ℕ} (h : n < m) : Ico n m = n :: Ico (n + 1) m :=\n  by\n  rw [← append_consecutive (nat.le_succ n) h, succ_singleton]\n  rfl\n#align eq_cons eq_cons\n\n",
 "chain'_succ":
 "theorem chain'_succ (n m : ℕ) : Chain' (fun a b => b = succ a) (Ico n m) :=\n  by\n  by_cases n < m\n  · rw [eq_cons h]\n    exact chain_succ_range' _ _\n  · rw [eq_nil_of_le (le_of_not_gt h)]\n    trivial\n#align chain'_succ chain'_succ\n\n",
 "bag_inter_consecutive":
 "@[simp]\ntheorem bag_inter_consecutive (n m l : ℕ) : List.bagInter (Ico n m) (Ico m l) = [] :=\n  (bagInter_nil_iff_inter_nil _ _).2 (inter_consecutive n m l)\n#align bag_inter_consecutive bag_inter_consecutive\n\n",
 "append_consecutive":
 "theorem append_consecutive {n m l : ℕ} (hnm : n ≤ m) (hml : m ≤ l) : Ico n m ++ Ico m l = Ico n l :=\n  by\n  dsimp only [Ico]\n  convert range'_append _ _ _\n  · exact (add_tsub_cancel_of_le hnm).symm\n  · rwa [← add_tsub_assoc_of_le hnm, tsub_add_cancel_of_le]\n#align append_consecutive append_consecutive\n\n"}