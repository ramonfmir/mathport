{"inj_on_insert_nth_index_of_not_mem":
 "/-\nCopyright (c) 2021 Yakov Pechersky. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yakov Pechersky, Yury Kudryashov\n-/\ntheorem inj_on_insert_nth_index_of_not_mem (l : List α) (x : α) (hx : x ∉ l) :\n    Set.InjOn (fun k => insertNth k x l) { n | n ≤ l.length } :=\n  by\n  induction' l with hd tl IH\n  · intro n hn m hm h\n    simp only [Set.mem_singleton_iff, Set.setOf_eq_eq_singleton, length, nonpos_iff_eq_zero] at hn hm\n    simp [hn, hm]\n  · intro n hn m hm h\n    simp only [length, Set.mem_setOf_eq] at hn hm\n    simp only [mem_cons_iff, not_or] at hx\n    cases n <;> cases m\n    · rfl\n    · simpa [hx.left] using h\n    · simpa [ne.symm hx.left] using h\n    · simp only [true_and_iff, eq_self_iff_true, insert_nth_succ_cons] at h\n      rw [Nat.succ_inj']\n      refine' IH hx.right _ _ h\n      · simpa [Nat.succ_le_succ_iff] using hn\n      · simpa [Nat.succ_le_succ_iff] using hm\n#align inj_on_insert_nth_index_of_not_mem inj_on_insert_nth_index_of_not_mem\n\n",
 "foldr_range_subset_of_range_subset":
 "theorem foldr_range_subset_of_range_subset {f : β → α → α} {g : γ → α → α} (hfg : Set.range f ⊆ Set.range g) (a : α) :\n    Set.range (foldr f a) ⊆ Set.range (foldr g a) :=\n  by\n  rintro _ ⟨l, rfl⟩\n  induction' l with b l H\n  · exact ⟨[], rfl⟩\n  · cases' hfg (Set.mem_range_self b) with c hgf\n    cases' H with m hgf'\n    rw [foldr_cons, ← hgf, ← hgf']\n    exact ⟨c :: m, rfl⟩\n#align foldr_range_subset_of_range_subset foldr_range_subset_of_range_subset\n\n",
 "foldr_range_eq_of_range_eq":
 "theorem foldr_range_eq_of_range_eq {f : β → α → α} {g : γ → α → α} (hfg : Set.range f = Set.range g) (a : α) :\n    Set.range (foldr f a) = Set.range (foldr g a) :=\n  (foldr_range_subset_of_range_subset hfg.le a).antisymm (foldr_range_subset_of_range_subset hfg.ge a)\n#align foldr_range_eq_of_range_eq foldr_range_eq_of_range_eq\n\n",
 "foldl_range_subset_of_range_subset":
 "theorem foldl_range_subset_of_range_subset {f : α → β → α} {g : α → γ → α}\n    (hfg : (Set.range fun a c => f c a) ⊆ Set.range fun b c => g c b) (a : α) :\n    Set.range (foldl f a) ⊆ Set.range (foldl g a) :=\n  by\n  change (Set.range fun l => _) ⊆ Set.range fun l => _\n  simp_rw [← foldr_reverse] at hfg⊢\n  simp_rw [Set.range_comp _ list.reverse, reverse_involutive.bijective.surjective.range_eq, Set.image_univ]\n  exact foldr_range_subset_of_range_subset hfg a\n#align foldl_range_subset_of_range_subset foldl_range_subset_of_range_subset\n\n",
 "foldl_range_eq_of_range_eq":
 "theorem foldl_range_eq_of_range_eq {f : α → β → α} {g : α → γ → α}\n    (hfg : (Set.range fun a c => f c a) = Set.range fun b c => g c b) (a : α) :\n    Set.range (foldl f a) = Set.range (foldl g a) :=\n  (foldl_range_subset_of_range_subset hfg.le a).antisymm (foldl_range_subset_of_range_subset hfg.ge a)\n#align foldl_range_eq_of_range_eq foldl_range_eq_of_range_eq\n\n"}