{"update_nth":
 "protected theorem nodup.update_nth :\n    ∀ {l : List α} {n : ℕ} {a : α} (hl : l.nodup) (ha : a ∉ l), (l.update_nth n a).nodup\n  | [], n, a, hl, ha => nodup_nil\n  | b :: l, 0, a, hl, ha => nodup_cons.2 ⟨mt (mem_cons_of_mem _) ha, (nodup_cons.1 hl).2⟩\n  | b :: l, n + 1, a, hl, ha =>\n    nodup_cons.2\n      ⟨fun h => (mem_or_eq_of_mem_set h).elim (nodup_cons.1 hl).1 fun hba => ha (hba ▸ mem_cons_self _ _),\n        hl.of_cons.update_nth (mt (mem_cons_of_mem _) ha)⟩\n#align nodup.update_nth nodup.update_nth\n\n",
 "union":
 "theorem nodup.union [DecidableEq α] (l₁ : List α) (h : Nodup l₂) : (l₁ ∪ l₂).nodup :=\n  by\n  induction' l₁ with a l₁ ih generalizing l₂\n  · exact h\n  · exact (ih h).insert\n#align nodup.union nodup.union\n\n",
 "toList_nodup":
 "#print Option.toList_nodup /-\ntheorem Option.toList_nodup {α} : ∀ o : Option α, o.to_list.nodup\n  | none => List.nodup_nil\n  | some x => List.nodup_singleton x\n#align option.to_list_nodup Option.toList_nodup\n-/\n\n",
 "sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\nprotected theorem nodup.sublist : «expr <+ » l₁ l₂ → Nodup l₂ → Nodup l₁ :=\n  Pairwise.sublist\n#align nodup.sublist nodup.sublist\n\n",
 "sigma":
 "theorem nodup.sigma {σ : α → Type _} {l₂ : ∀ a, List (σ a)} (d₁ : Nodup l₁) (d₂ : ∀ a, Nodup (l₂ a)) :\n    (l₁.sigma l₂).nodup :=\n  nodup_bind.2\n    ⟨fun a ma => (d₂ a).map fun b b' h => by injection h with _ h <;> exact eq_of_heq h,\n      d₁.imp fun a₁ a₂ n x h₁ h₂ => by\n        rcases mem_map.1 h₁ with ⟨b₁, mb₁, rfl⟩\n        rcases mem_map.1 h₂ with ⟨b₂, mb₂, ⟨⟩⟩\n        exact n rfl⟩\n#align nodup.sigma nodup.sigma\n\n",
 "rel_nodup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⇒ » -/\ntheorem rel_nodup {r : α → β → Prop} (hr : Relator.BiUnique r) : («expr ⇒ » (Forall₂ r) (· ↔ ·)) Nodup Nodup\n  | _, _, forall₂.nil => by simp only [nodup_nil]\n  | _, _, forall₂.cons hab h => by\n    simpa only [nodup_cons] using Relator.rel_and (Relator.rel_not (rel_mem hr hab h)) (rel_nodup h)\n#align rel_nodup rel_nodup\n\n",
 "product":
 "protected theorem nodup.product {l₂ : List β} (d₁ : l₁.nodup) (d₂ : l₂.nodup) : (l₁.product l₂).nodup :=\n  nodup_bind.2\n    ⟨fun a ma => d₂.map <| left_inverse.injective fun b => (rfl : (a, b).2 = b),\n      d₁.imp fun a₁ a₂ n x h₁ h₂ => by\n        rcases mem_map.1 h₁ with ⟨b₁, mb₁, rfl⟩\n        rcases mem_map.1 h₂ with ⟨b₂, mb₂, ⟨⟩⟩\n        exact n rfl⟩\n#align nodup.product nodup.product\n\n",
 "pmap":
 "theorem nodup.pmap {p : α → Prop} {f : ∀ a, p a → β} {l : List α} {H} (hf : ∀ a ha b hb, f a ha = f b hb → a = b)\n    (h : Nodup l) : Nodup (pmap f l H) := by\n  rw [pmap_eq_map_attach] <;> exact h.attach.map fun ⟨a, ha⟩ ⟨b, hb⟩ h => by congr <;> exact hf a (H _ ha) b (H _ hb) h\n#align nodup.pmap nodup.pmap\n\n",
 "pairwise_of_set_pairwise":
 "theorem nodup.pairwise_of_set_pairwise {l : List α} {r : α → α → Prop} (hl : l.nodup) (h : { x | x ∈ l }.pairwise r) :\n    l.pairwise r :=\n  hl.pairwise_of_forall_ne h\n#align nodup.pairwise_of_set_pairwise nodup.pairwise_of_set_pairwise\n\n",
 "pairwise_of_forall_ne":
 "theorem nodup.pairwise_of_forall_ne {l : List α} {r : α → α → Prop} (hl : l.nodup)\n    (h : ∀ a ∈ l, ∀ b ∈ l, a ≠ b → r a b) : l.pairwise r := by\n  classical\n    refine' pairwise_of_reflexive_on_dupl_of_forall_ne _ h\n    intro x hx\n    rw [nodup_iff_count_le_one] at hl\n    exact absurd (hl x) hx.not_le\n#align nodup.pairwise_of_forall_ne nodup.pairwise_of_forall_ne\n\n",
 "pairwise_coe":
 "@[simp]\ntheorem nodup.pairwise_coe [is_symm α r] (hl : l.nodup) : { a | a ∈ l }.pairwise r ↔ l.pairwise r :=\n  by\n  induction' l with a l ih\n  · simp\n  rw [List.nodup_cons] at hl\n  have : ∀ b ∈ l, ¬a = b → r a b ↔ r a b := fun b hb => imp_iff_right (ne_of_mem_of_not_mem hb hl.1).symm\n  simp [Set.setOf_or, Set.pairwise_insert_of_symmetric (@symm_of _ r _), ih hl.2, and_comm', forall₂_congr this]\n#align nodup.pairwise_coe nodup.pairwise_coe\n\n",
 "of_map":
 "theorem nodup.of_map (f : α → β) {l : List α} : Nodup (map f l) → Nodup l :=\n  Pairwise.of_map f fun a b => mt <| congr_arg f\n#align nodup.of_map nodup.of_map\n\n",
 "of_cons":
 "theorem nodup.of_cons (h : Nodup (a :: l)) : Nodup l :=\n  (nodup_cons.1 h).2\n#align nodup.of_cons nodup.of_cons\n\n",
 "of_append_right":
 "theorem nodup.of_append_right : Nodup (l₁ ++ l₂) → Nodup l₂ :=\n  Nodup.sublist (sublist_append_right l₁ l₂)\n#align nodup.of_append_right nodup.of_append_right\n\n",
 "of_append_left":
 "theorem nodup.of_append_left : Nodup (l₁ ++ l₂) → Nodup l₁ :=\n  Nodup.sublist (sublist_append_left l₁ l₂)\n#align nodup.of_append_left nodup.of_append_left\n\n",
 "nth_le_inj_iff":
 "theorem nodup.nth_le_inj_iff {l : List α} (h : Nodup l) {i j : ℕ} (hi : i < l.length) (hj : j < l.length) :\n    l.nth_le i hi = l.nth_le j hj ↔ i = j :=\n  ⟨nodup_iff_nthLe_inj.mp h _ _ _ _, by simp (config := { contextual := true })⟩\n#align nodup.nth_le_inj_iff nodup.nth_le_inj_iff\n\n",
 "nth_le_index_of":
 "@[simp]\ntheorem nth_le_index_of [DecidableEq α] {l : List α} (H : Nodup l) (n h) : indexOf (nthLe l n h) l = n :=\n  nodup_iff_nthLe_inj.1 H _ _ _ h <| indexOf_nthLe <| indexOf_lt_length.2 <| nthLe_mem _ _ _\n#align nth_le_index_of nth_le_index_of\n\n",
 "nth_le_eq_of_ne_imp_not_nodup":
 "theorem nth_le_eq_of_ne_imp_not_nodup (xs : List α) (n m : ℕ) (hn : n < xs.length) (hm : m < xs.length)\n    (h : xs.nth_le n hn = xs.nth_le m hm) (hne : n ≠ m) : ¬Nodup xs :=\n  by\n  rw [nodup_iff_nth_le_inj]\n  simp only [exists_prop, exists_and_right, not_forall]\n  exact ⟨n, m, ⟨hn, hm, h⟩, hne⟩\n#align nth_le_eq_of_ne_imp_not_nodup nth_le_eq_of_ne_imp_not_nodup\n\n",
 "not_nodup_pair":
 "theorem not_nodup_pair (a : α) : ¬Nodup [a, a] :=\n  not_nodup_cons_of_mem <| mem_singleton_self _\n#align not_nodup_pair not_nodup_pair\n\n",
 "not_nodup_cons_of_mem":
 "theorem not_nodup_cons_of_mem : a ∈ l → ¬Nodup (a :: l) :=\n  imp_not_comm.1 Nodup.not_mem\n#align not_nodup_cons_of_mem not_nodup_cons_of_mem\n\n",
 "not_mem_erase":
 "theorem nodup.not_mem_erase [DecidableEq α] (h : Nodup l) : a ∉ l.erase a := fun H => (h.mem_erase_iff.1 H).1 rfl\n#align nodup.not_mem_erase nodup.not_mem_erase\n\n",
 "not_mem":
 "theorem nodup.not_mem (h : (a :: l).nodup) : a ∉ l :=\n  (nodup_cons.1 h).1\n#align nodup.not_mem nodup.not_mem\n\n",
 "nodup_singleton":
 "theorem nodup_singleton (a : α) : Nodup [a] :=\n  pairwise_singleton _ _\n#align nodup_singleton nodup_singleton\n\n",
 "nodup_reverse":
 "@[simp]\ntheorem nodup_reverse {l : List α} : Nodup (reverse l) ↔ Nodup l :=\n  pairwise_reverse.trans <| by simp only [nodup, ne.def, eq_comm]\n#align nodup_reverse nodup_reverse\n\n",
 "nodup_replicate":
 "theorem nodup_replicate (a : α) : ∀ {n : ℕ}, Nodup (replicate n a) ↔ n ≤ 1\n  | 0 => by simp [nat.zero_le]\n  | 1 => by simp\n  | n + 2 =>\n    iff_of_false (fun H => nodup_iff_sublist.1 H a ((replicate_sublist_replicate _).2 (nat.le_add_left 2 n)))\n      (not_le_of_lt <| nat.le_add_left 2 n)\n#align nodup_replicate nodup_replicate\n\n",
 "nodup_nil":
 "@[simp]\ntheorem nodup_nil : @Nodup α [] :=\n  Pairwise.nil\n#align nodup_nil nodup_nil\n\n",
 "nodup_middle":
 "theorem nodup_middle {a : α} {l₁ l₂ : List α} : Nodup (l₁ ++ a :: l₂) ↔ Nodup (a :: (l₁ ++ l₂)) := by\n  simp only [nodup_append, not_or, and_left_comm, and_assoc', nodup_cons, mem_append, disjoint_cons_right]\n#align nodup_middle nodup_middle\n\n",
 "nodup_map_iff_inj_on":
 "theorem nodup_map_iff_inj_on {f : α → β} {l : List α} (d : Nodup l) :\n    Nodup (map f l) ↔ ∀ x ∈ l, ∀ y ∈ l, f x = f y → x = y :=\n  ⟨inj_on_of_nodup_map, fun h => d.map_on h⟩\n#align nodup_map_iff_inj_on nodup_map_iff_inj_on\n\n",
 "nodup_map_iff":
 "theorem nodup_map_iff {f : α → β} {l : List α} (hf : injective f) : Nodup (map f l) ↔ Nodup l :=\n  ⟨Nodup.of_map _, Nodup.map hf⟩\n#align nodup_map_iff nodup_map_iff\n\n",
 "nodup_join":
 "theorem nodup_join {L : List (List α)} : Nodup (join L) ↔ (∀ l ∈ L, Nodup l) ∧ Pairwise Disjoint L := by\n  simp only [nodup, pairwise_join, disjoint_left.symm, forall_mem_ne]\n#align nodup_join nodup_join\n\n",
 "nodup_iff_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem nodup_iff_sublist {l : List α} : Nodup l ↔ ∀ a, ¬«expr <+ » [a, a] l :=\n  ⟨fun d a h => not_nodup_pair a (d.sublist h),\n    by\n    induction' l with a l IH <;> intro h; · exact nodup_nil\n    exact (IH fun a s => h a <| sublist_cons_of_sublist _ s).cons fun al => h a <| (singleton_sublist.2 al).cons_cons _⟩\n#align nodup_iff_sublist nodup_iff_sublist\n\n",
 "nodup_iff_nth_ne_nth":
 "theorem nodup_iff_nth_ne_nth {l : List α} : l.nodup ↔ ∀ i j : ℕ, i < j → j < l.length → l.nth i ≠ l.nth j :=\n  by\n  rw [nodup_iff_nth_le_inj]\n  simp only [nth_le_eq_iff, some_nth_le_eq]\n  constructor <;> rintro h i j h₁ h₂\n  · exact mt (h i j (h₁.trans h₂) h₂) (ne_of_lt h₁)\n  · intro h₃\n    by_contra h₄\n    cases' lt_or_gt_of_ne h₄ with h₅ h₅\n    · exact h i j h₅ h₂ h₃\n    · exact h j i h₅ h₁ h₃.symm\n#align nodup_iff_nth_ne_nth nodup_iff_nth_ne_nth\n\n",
 "nodup_iff_nth_le_inj":
 "theorem nodup_iff_nth_le_inj {l : List α} : Nodup l ↔ ∀ i j h₁ h₂, nthLe l i h₁ = nthLe l j h₂ → i = j :=\n  pairwise_iff_nthLe.trans\n    ⟨fun H i j h₁ h₂ h =>\n      ((lt_trichotomy _ _).resolve_left fun h' => H _ _ h₂ h' h).resolve_right fun h' => H _ _ h₁ h' h.symm,\n      fun H i j h₁ h₂ h => ne_of_lt h₂ (H _ _ _ _ h)⟩\n#align nodup_iff_nth_le_inj nodup_iff_nth_le_inj\n\n",
 "nodup_iff_count_le_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem nodup_iff_count_le_one [DecidableEq α] {l : List α} : Nodup l ↔ ∀ a, count a l ≤ 1 :=\n  nodup_iff_sublist.trans <|\n    forall_congr' fun a =>\n      have : «expr <+ » [a, a] l ↔ 1 < count a l := (@le_count_iff_replicate_sublist _ _ a l 2).symm\n      (not_congr this).trans not_lt\n#align nodup_iff_count_le_one nodup_iff_count_le_one\n\n",
 "nodup_cons":
 "@[simp]\ntheorem nodup_cons {a : α} {l : List α} : Nodup (a :: l) ↔ a ∉ l ∧ Nodup l := by\n  simp only [nodup, pairwise_cons, forall_mem_ne]\n#align nodup_cons nodup_cons\n\n",
 "nodup_bind":
 "theorem nodup_bind {l₁ : List α} {f : α → List β} :\n    Nodup (l₁.bind f) ↔ (∀ x ∈ l₁, Nodup (f x)) ∧ Pairwise (fun a b : α => Disjoint (f a) (f b)) l₁ := by\n  simp only [list.bind, nodup_join, pairwise_map, and_comm', and_left_comm, mem_map, exists_imp, and_imp] <;>\n    rw [show (∀ (l : List β) (x : α), f x = l → x ∈ l₁ → nodup l) ↔ ∀ x : α, x ∈ l₁ → nodup (f x) from\n        forall_swap.trans <| forall_congr' fun _ => forall_eq']\n#align nodup_bind nodup_bind\n\n",
 "nodup_attach":
 "@[simp]\ntheorem nodup_attach {l : List α} : Nodup (attach l) ↔ Nodup l :=\n  ⟨fun h => attach_map_val l ▸ h.map fun a b => Subtype.eq, fun h =>\n    Nodup.of_map Subtype.val ((attach_map_val l).symm ▸ h)⟩\n#align nodup_attach nodup_attach\n\n",
 "nodup_append_comm":
 "theorem nodup_append_comm {l₁ l₂ : List α} : Nodup (l₁ ++ l₂) ↔ Nodup (l₂ ++ l₁) := by\n  simp only [nodup_append, and_left_comm, disjoint_comm]\n#align nodup_append_comm nodup_append_comm\n\n",
 "nodup_append":
 "theorem nodup_append {l₁ l₂ : List α} : Nodup (l₁ ++ l₂) ↔ Nodup l₁ ∧ Nodup l₂ ∧ Disjoint l₁ l₂ := by\n  simp only [nodup, pairwise_append, disjoint_iff_ne]\n#align nodup_append nodup_append\n\n",
 "nodup":
 "protected theorem pairwise.nodup {l : List α} {r : α → α → Prop} [is_irrefl α r] (h : Pairwise r l) : Nodup l :=\n  h.imp fun a b => ne_of_irrefl\n#align pairwise.nodup pairwise.nodup\n\n",
 "ne_singleton_iff":
 "theorem nodup.ne_singleton_iff {l : List α} (h : Nodup l) (x : α) : l ≠ [x] ↔ l = [] ∨ ∃ y ∈ l, y ≠ x :=\n  by\n  induction' l with hd tl hl\n  · simp\n  · specialize hl h.of_cons\n    by_cases hx : tl = [x]\n    · simpa [hx, and_comm, and_or_left] using h\n    · rw [← ne.def, hl] at hx\n      rcases hx with (rfl | ⟨y, hy, hx⟩)\n      · simp\n      · have : tl ≠ [] := ne_nil_of_mem hy\n        suffices ∃ (y : α)(H : y ∈ hd :: tl), y ≠ x by simpa [ne_nil_of_mem hy]\n        exact ⟨y, mem_cons_of_mem _ hy, hx⟩\n#align nodup.ne_singleton_iff nodup.ne_singleton_iff\n\n",
 "mem_erase_iff":
 "theorem nodup.mem_erase_iff [DecidableEq α] (d : Nodup l) : a ∈ l.erase b ↔ a ≠ b ∧ a ∈ l := by\n  rw [d.erase_eq_filter, mem_filter, and_comm']\n#align nodup.mem_erase_iff nodup.mem_erase_iff\n\n",
 "mem_diff_iff":
 "theorem nodup.mem_diff_iff [DecidableEq α] (hl₁ : l₁.nodup) : a ∈ l₁.diff l₂ ↔ a ∈ l₁ ∧ a ∉ l₂ := by\n  rw [hl₁.diff_eq_filter, mem_filter]\n#align nodup.mem_diff_iff nodup.mem_diff_iff\n\n",
 "map_update":
 "theorem nodup.map_update [DecidableEq α] {l : List α} (hl : l.nodup) (f : α → β) (x : α) (y : β) :\n    l.map (Function.update f x y) = if x ∈ l then (l.map f).update_nth (l.index_of x) y else l.map f :=\n  by\n  induction' l with hd tl ihl; · simp\n  rw [nodup_cons] at hl\n  simp only [mem_cons_iff, map, ihl hl.2]\n  by_cases H : hd = x\n  · subst hd\n    simp [update_nth, hl.1]\n  · simp [ne.symm H, H, update_nth, ← apply_ite (cons (f hd))]\n#align nodup.map_update nodup.map_update\n\n",
 "map_on":
 "theorem nodup.map_on {f : α → β} (H : ∀ x ∈ l, ∀ y ∈ l, f x = f y → x = y) (d : Nodup l) : (map f l).nodup :=\n  Pairwise.map _ (fun a b ⟨ma, mb, n⟩ e => n (H a ma b mb e)) (Pairwise.and_mem.1 d)\n#align nodup.map_on nodup.map_on\n\n",
 "map":
 "protected theorem nodup.map {f : α → β} (hf : injective f) : Nodup l → Nodup (map f l) :=\n  Nodup.map_on fun x _ y _ h => hf h\n#align nodup.map nodup.map\n\n",
 "inter":
 "theorem nodup.inter [DecidableEq α] (l₂ : List α) : Nodup l₁ → Nodup (l₁ ∩ l₂) :=\n  Nodup.filter _\n#align nodup.inter nodup.inter\n\n",
 "insert":
 "theorem nodup.insert [DecidableEq α] (h : l.nodup) : (insert a l).nodup :=\n  if h' : a ∈ l then by rw [insert_of_mem h'] <;> exact h\n  else by rw [insert_of_not_mem h', nodup_cons] <;> constructor <;> assumption\n#align nodup.insert nodup.insert\n\n",
 "inj_on_of_nodup_map":
 "theorem inj_on_of_nodup_map {f : α → β} {l : List α} (d : Nodup (map f l)) :\n    ∀ ⦃x⦄, x ∈ l → ∀ ⦃y⦄, y ∈ l → f x = f y → x = y :=\n  by\n  induction' l with hd tl ih\n  · simp\n  · simp only [map, nodup_cons, mem_map, not_exists, not_and, ← ne.def] at d\n    rintro _ (rfl | h₁) _ (rfl | h₂) h₃\n    · rfl\n    · apply (d.1 _ h₂ h₃.symm).elim\n    · apply (d.1 _ h₁ h₃).elim\n    · apply ih d.2 h₁ h₂ h₃\n#align inj_on_of_nodup_map inj_on_of_nodup_map\n\n",
 "forall_mem_ne":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Kenny Lau\n-/\n@[simp]\ntheorem forall_mem_ne {a : α} {l : List α} : (∀ a' : α, a' ∈ l → ¬a = a') ↔ a ∉ l :=\n  ⟨fun h m => h _ m rfl, fun h a' m e => h (e.symm ▸ m)⟩\n#align forall_mem_ne forall_mem_ne\n\n",
 "filter_map":
 "protected theorem nodup.filter_map {f : α → Option β} (h : ∀ a a' b, b ∈ f a → b ∈ f a' → a = a') :\n    Nodup l → Nodup (filter_map f l) :=\n  Pairwise.filter_map f fun a a' n b bm b' bm' e => n <| h a a' b' (e ▸ bm) bm'\n#align nodup.filter_map nodup.filter_map\n\n",
 "filter":
 "theorem nodup.filter (p : α → Prop) [DecidablePred p] {l} : Nodup l → Nodup (filter p l) :=\n  Pairwise.filter p\n#align nodup.filter nodup.filter\n\n",
 "erase_eq_filter":
 "theorem nodup.erase_eq_filter [DecidableEq α] {l} (d : Nodup l) (a : α) : l.erase a = filter (· ≠ a) l :=\n  by\n  induction' d with b l m d IH; · rfl\n  by_cases b = a\n  · subst h\n    rw [erase_cons_head, filter_cons_of_neg]\n    symm\n    rw [filter_eq_self]\n    simpa only [ne.def, eq_comm] using m\n    exact not_not_intro rfl\n  · rw [erase_cons_tail _ h, filter_cons_of_pos, IH]\n    exact h\n#align nodup.erase_eq_filter nodup.erase_eq_filter\n\n",
 "erase":
 "theorem nodup.erase [DecidableEq α] (a : α) : Nodup l → Nodup (l.erase a) :=\n  Nodup.sublist <| erase_sublist _ _\n#align nodup.erase nodup.erase\n\n",
 "disjoint_of_nodup_append":
 "theorem disjoint_of_nodup_append {l₁ l₂ : List α} (d : Nodup (l₁ ++ l₂)) : Disjoint l₁ l₂ :=\n  (nodup_append.1 d).2.2\n#align disjoint_of_nodup_append disjoint_of_nodup_append\n\n",
 "diff_eq_filter":
 "theorem nodup.diff_eq_filter [DecidableEq α] : ∀ {l₁ l₂ : List α} (hl₁ : l₁.nodup), l₁.diff l₂ = l₁.filter (· ∉ l₂)\n  | l₁, [], hl₁ => by simp\n  | l₁, a :: l₂, hl₁ =>\n    by\n    rw [diff_cons, (hl₁.erase _).diff_eq_filter, hl₁.erase_eq_filter, filter_filter]\n    simp only [mem_cons_iff, not_or, and_comm]\n#align nodup.diff_eq_filter nodup.diff_eq_filter\n\n",
 "diff":
 "theorem nodup.diff [DecidableEq α] : l₁.nodup → (l₁.diff l₂).nodup :=\n  Nodup.sublist <| diff_sublist _ _\n#align nodup.diff nodup.diff\n\n",
 "count_eq_one_of_mem":
 "@[simp]\ntheorem count_eq_one_of_mem [DecidableEq α] {a : α} {l : List α} (d : Nodup l) (h : a ∈ l) : count a l = 1 :=\n  le_antisymm (nodup_iff_count_le_one.1 d a) (count_pos.2 h)\n#align count_eq_one_of_mem count_eq_one_of_mem\n\n",
 "count_eq_of_nodup":
 "theorem count_eq_of_nodup [DecidableEq α] {a : α} {l : List α} (d : Nodup l) : count a l = if a ∈ l then 1 else 0 :=\n  by\n  split_ifs with h\n  · exact count_eq_one_of_mem d h\n  · exact count_eq_zero_of_not_mem h\n#align count_eq_of_nodup count_eq_of_nodup\n\n",
 "cons":
 "protected theorem nodup.cons (ha : a ∉ l) (hl : Nodup l) : Nodup (a :: l) :=\n  nodup_cons.2 ⟨ha, hl⟩\n#align nodup.cons nodup.cons\n\n",
 "concat":
 "protected theorem nodup.concat (h : a ∉ l) (h' : l.nodup) : (l.concat a).nodup := by\n  rw [concat_eq_append] <;> exact h'.append (nodup_singleton _) (disjoint_singleton.2 h)\n#align nodup.concat nodup.concat\n\n",
 "append":
 "theorem nodup.append (d₁ : Nodup l₁) (d₂ : Nodup l₂) (dj : Disjoint l₁ l₂) : Nodup (l₁ ++ l₂) :=\n  nodup_append.2 ⟨d₁, d₂, dj⟩\n#align nodup.append nodup.append\n\n"}