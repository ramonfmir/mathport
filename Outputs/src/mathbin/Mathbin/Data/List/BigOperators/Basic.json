{"tail_sum":
 "/-- This relies on `default ℕ = 0`. -/\ntheorem tail_sum (L : list ℕ) : L.tail.sum = L.sum - L.head := by\n  rw [← head_add_tail_sum L, add_comm, add_tsub_cancel_right]\n#align tail_sum tail_sum\n\n",
 "sum_le_foldr_max":
 "-- TODO: develop theory of tropical rings\ntheorem sum_le_foldr_max [add_monoid M] [add_monoid N] [linear_order N] (f : M → N) (h0 : f 0 ≤ 0)\n    (hadd : ∀ x y, f (x + y) ≤ max (f x) (f y)) (l : list M) : f l.sum ≤ (l.map f).foldr max 0 :=\n  by\n  induction' l with hd tl IH\n  · simpa using h0\n  simp only [list.sum_cons, List.foldr_map, list.foldr] at IH⊢\n  exact (hadd _ _).trans (max_le_max le_rfl IH)\n#align sum_le_foldr_max sum_le_foldr_max\n\n",
 "sum_const_nat":
 "theorem sum_const_nat (m n : ℕ) : sum (replicate m n) = m * n := by rw [sum_replicate, smul_eq_mul]\n#align sum_const_nat sum_const_nat\n\n",
 "single_le_prod":
 "@[to_additive]\ntheorem single_le_prod [OrderedCommMonoid M] {l : list M} (hl₁ : ∀ x ∈ l, (1 : M) ≤ x) : ∀ x ∈ l, x ≤ l.prod :=\n  by\n  induction l\n  · simp\n  simp_rw [prod_cons, forall_mem_cons] at hl₁⊢\n  constructor\n  · exact le_mul_of_one_le_right' (one_le_prod_of_one_le hl₁.2)\n  · exact fun x H => le_mul_of_one_le_of_le hl₁.1 (l_ih hl₁.right x H)\n#align single_le_prod single_le_prod\n\n",
 "prod_update_nth'":
 "/-- Alternative version of `list.prod_update_nth` when the list is over a group -/\n@[to_additive \"Alternative version of `list.sum_update_nth` when the list is over a group\"]\ntheorem prod_update_nth' (L : list G) (n : ℕ) (a : G) :\n    (L.update_nth n a).prod = L.prod * if hn : n < L.length then (L.nth_le n hn)⁻¹ * a else 1 :=\n  by\n  refine' (prod_update_nth L n a).trans _\n  split_ifs with hn hn\n  ·\n    rw [mul_comm _ a, mul_assoc a, prod_drop_succ L n hn, mul_comm _ (drop n L).prod, ← mul_assoc (take n L).prod,\n      prod_take_mul_prod_drop, mul_comm a, mul_assoc]\n  ·\n    simp only [take_all_of_le (le_of_not_lt hn), prod_nil, mul_one,\n      drop_eq_nil_of_le ((le_of_not_lt hn).trans n.le_succ)]\n#align prod_update_nth' prod_update_nth'\n\n",
 "prod_update_nth":
 "@[to_additive]\ntheorem prod_update_nth :\n    ∀ (L : list M) (n : ℕ) (a : M),\n      (L.update_nth n a).prod = ((L.take n).prod * if n < L.length then a else 1) * (L.drop (n + 1)).prod\n  | x :: xs, 0, a => by simp [update_nth]\n  | x :: xs, i + 1, a => by simp [update_nth, prod_update_nth xs i a, mul_assoc]\n  | [], _, _ => by simp [update_nth, (nat.zero_le _).not_lt, nat.zero_le]\n#align prod_update_nth prod_update_nth\n\n",
 "prod_take_succ":
 "@[simp, to_additive]\ntheorem prod_take_succ : ∀ (L : list M) (i : ℕ) (p), (L.take (i + 1)).prod = (L.take i).prod * L.nth_le i p\n  | [], i, p => by cases p\n  | h :: t, 0, _ => by simp\n  | h :: t, n + 1, _ => by\n    dsimp\n    rw [prod_cons, prod_cons, prod_take_succ, mul_assoc]\n#align prod_take_succ prod_take_succ\n\n",
 "prod_take_mul_prod_drop":
 "@[simp, to_additive]\ntheorem prod_take_mul_prod_drop : ∀ (L : list M) (i : ℕ), (L.take i).prod * (L.drop i).prod = L.prod\n  | [], i => by simp [nat.zero_le]\n  | L, 0 => by simp\n  | h :: t, n + 1 => by\n    dsimp\n    rw [prod_cons, prod_cons, mul_assoc, prod_take_mul_prod_drop]\n#align prod_take_mul_prod_drop prod_take_mul_prod_drop\n\n",
 "prod_singleton":
 "@[to_additive]\ntheorem prod_singleton : [a].prod = a :=\n  one_mul a\n#align prod_singleton prod_singleton\n\n",
 "prod_reverse_noncomm":
 "/-- A non-commutative variant of `list.prod_reverse` -/\n@[to_additive \"A non-commutative variant of `list.sum_reverse`\"]\ntheorem prod_reverse_noncomm : ∀ L : list G, L.reverse.prod = (L.map fun x => x⁻¹).prod⁻¹ := by simp [prod_inv_reverse]\n#align prod_reverse_noncomm prod_reverse_noncomm\n\n",
 "prod_replicate":
 "@[simp, to_additive]\ntheorem prod_replicate (n : ℕ) (a : M) : (replicate n a).prod = a ^ n :=\n  by\n  induction' n with n ih\n  · rw [pow_zero]\n    rfl\n  · rw [List.replicate_succ, List.prod_cons, ih, pow_succ]\n#align prod_replicate prod_replicate\n\n",
 "prod_pos":
 "/-- The product of a list of positive natural numbers is positive,\nand likewise for any nontrivial ordered semiring. -/\ntheorem prod_pos [StrictOrderedSemiring R] (l : list R) (h : ∀ a ∈ l, (0 : R) < a) : 0 < l.prod :=\n  by\n  induction' l with a l ih\n  · simp\n  · rw [prod_cons]\n    exact mul_pos (h _ <| mem_cons_self _ _) (ih fun a ha => h a <| mem_cons_of_mem _ ha)\n#align prod_pos prod_pos\n\n",
 "prod_nil":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Floris van Doorn, Sébastien Gouëzel, Alex J. Best\n-/\n@[simp, to_additive]\ntheorem prod_nil : ([] : list M).prod = 1 :=\n  rfl\n#align prod_nil prod_nil\n\n",
 "prod_ne_zero":
 "theorem prod_ne_zero [nontrivial M₀] [no_zero_divisors M₀] {L : list M₀} (hL : (0 : M₀) ∉ L) : L.prod ≠ 0 :=\n  mt prod_eq_zero_iff.1 hL\n#align prod_ne_zero prod_ne_zero\n\n",
 "prod_map_neg":
 "@[simp]\ntheorem prod_map_neg {α} [comm_monoid α] [HasDistribNeg α] (l : list α) :\n    (l.map has_neg.neg).prod = (-1) ^ l.length * l.prod := by\n  simpa only [id, neg_mul, one_mul, map_const', prod_replicate, map_id] using @prod_map_mul α α _ l (fun _ => -1) id\n#align prod_map_neg prod_map_neg\n\n",
 "prod_map_mul":
 "@[simp, to_additive]\ntheorem prod_map_mul {α : Type _} [comm_monoid α] {l : list ι} {f g : ι → α} :\n    (l.map fun i => f i * g i).prod = (l.map f).prod * (l.map g).prod :=\n  l.prod_hom₂ (· * ·) mul_mul_mul_comm (mul_one _) _ _\n#align prod_map_mul prod_map_mul\n\n",
 "prod_map_hom":
 "@[to_additive]\ntheorem prod_map_hom (L : list ι) (f : ι → M) {G : Type _} [MonoidHomClass G M N] (g : G) :\n    (L.map (g ∘ f)).prod = g (L.map f).prod := by rw [← prod_hom, map_map]\n#align prod_map_hom prod_map_hom\n\n",
 "prod_map_erase":
 "@[simp, to_additive]\ntheorem prod_map_erase [decidable_eq ι] [comm_monoid M] (f : ι → M) {a} :\n    ∀ {l : list ι}, a ∈ l → f a * ((l.erase a).map f).prod = (l.map f).prod\n  | b :: l, h => by\n    obtain rfl | ⟨ne, h⟩ := Decidable.List.eq_or_ne_mem_of_mem h\n    · simp only [map, erase_cons_head, prod_cons]\n    · simp only [map, erase_cons_tail _ ne.symm, prod_cons, prod_map_erase h, mul_left_comm (f a) (f b)]\n#align prod_map_erase prod_map_erase\n\n",
 "prod_lt_prod_of_ne_nil":
 "@[to_additive]\ntheorem prod_lt_prod_of_ne_nil [preorder M] [covariant_class M M (· * ·) (· < ·)] [covariant_class M M (· * ·) (· ≤ ·)]\n    [covariant_class M M (function.swap (· * ·)) (· < ·)] [covariant_class M M (function.swap (· * ·)) (· ≤ ·)]\n    {l : list ι} (hl : l ≠ []) (f g : ι → M) (hlt : ∀ i ∈ l, f i < g i) : (l.map f).prod < (l.map g).prod :=\n  (prod_lt_prod' f g fun i hi => (hlt i hi).le) <| (exists_mem_of_ne_nil l hl).imp fun i hi => ⟨hi, hlt i hi⟩\n#align prod_lt_prod_of_ne_nil prod_lt_prod_of_ne_nil\n\n",
 "prod_lt_prod'":
 "@[to_additive sum_lt_sum]\ntheorem prod_lt_prod' [preorder M] [covariant_class M M (· * ·) (· < ·)] [covariant_class M M (· * ·) (· ≤ ·)]\n    [covariant_class M M (function.swap (· * ·)) (· < ·)] [covariant_class M M (function.swap (· * ·)) (· ≤ ·)]\n    {l : list ι} (f g : ι → M) (h₁ : ∀ i ∈ l, f i ≤ g i) (h₂ : ∃ i ∈ l, f i < g i) : (l.map f).prod < (l.map g).prod :=\n  by\n  induction' l with i l ihl; · rcases h₂ with ⟨_, ⟨⟩, _⟩\n  simp only [ball_cons, bex_cons, map_cons, prod_cons] at h₁ h₂⊢\n  cases h₂\n  exacts[mul_lt_mul_of_lt_of_le h₂ (prod_le_prod' h₁.2), mul_lt_mul_of_le_of_lt h₁.1 <| ihl h₁.2 h₂]\n#align prod_lt_prod' prod_lt_prod'\n\n",
 "prod_le_prod'":
 "@[to_additive sum_le_sum]\ntheorem prod_le_prod' [preorder M] [covariant_class M M (function.swap (· * ·)) (· ≤ ·)]\n    [covariant_class M M (· * ·) (· ≤ ·)] {l : list ι} {f g : ι → M} (h : ∀ i ∈ l, f i ≤ g i) :\n    (l.map f).prod ≤ (l.map g).prod :=\n  forall₂.prod_le_prod' <| by simpa\n#align prod_le_prod' prod_le_prod'\n\n",
 "prod_le_pow_card":
 "@[to_additive sum_le_card_nsmul]\ntheorem prod_le_pow_card [preorder M] [covariant_class M M (function.swap (· * ·)) (· ≤ ·)]\n    [covariant_class M M (· * ·) (· ≤ ·)] (l : list M) (n : M) (h : ∀ x ∈ l, x ≤ n) : l.prod ≤ n ^ l.length := by\n  simpa only [map_id'', map_const, prod_replicate] using prod_le_prod' h\n#align prod_le_pow_card prod_le_pow_card\n\n",
 "prod_join":
 "@[simp, to_additive]\ntheorem prod_join {l : list (list M)} : l.join.prod = (l.map List.prod).prod := by\n  induction l <;> [rfl, simp only [*, list.join, map, prod_append, prod_cons]]\n#align prod_join prod_join\n\n",
 "prod_is_unit_iff":
 "@[to_additive]\ntheorem prod_is_unit_iff {α : Type _} [comm_monoid α] {L : list α} : is_unit L.prod ↔ ∀ m ∈ L, is_unit m :=\n  by\n  refine' ⟨fun h => _, prod_is_unit⟩\n  induction' L with m L ih\n  · exact fun m' h' => false.elim (not_mem_nil m' h')\n  rw [prod_cons, IsUnit.mul_iff] at h\n  exact fun m' h' => or.elim (eq_or_mem_of_mem_cons h') (fun H => H.substr h.1) fun H => ih h.2 _ H\n#align prod_is_unit_iff prod_is_unit_iff\n\n",
 "prod_is_unit":
 "@[to_additive]\ntheorem prod_is_unit : ∀ {L : list M} (u : ∀ m ∈ L, is_unit m), is_unit L.prod\n  | [], _ => by simp\n  | h :: t, u => by\n    simp only [List.prod_cons]\n    exact is_unit.mul (u h (mem_cons_self h t)) (prod_is_unit fun m mt => u m (mem_cons_of_mem h mt))\n#align prod_is_unit prod_is_unit\n\n",
 "prod_inv_reverse":
 "/-- This is the `list.prod` version of `mul_inv_rev` -/\n@[to_additive \"This is the `list.sum` version of `add_neg_rev`\"]\ntheorem prod_inv_reverse : ∀ L : list G, L.prod⁻¹ = (L.map fun x => x⁻¹).reverse.prod\n  | [] => by simp\n  | x :: xs => by simp [prod_inv_reverse xs]\n#align prod_inv_reverse prod_inv_reverse\n\n",
 "prod_inv":
 "/-- This is the `list.prod` version of `mul_inv` -/\n@[to_additive \"This is the `list.sum` version of `add_neg`\"]\ntheorem prod_inv : ∀ L : list G, L.prod⁻¹ = (L.map fun x => x⁻¹).prod\n  | [] => by simp\n  | x :: xs => by simp [mul_comm, prod_inv xs]\n#align prod_inv prod_inv\n\n",
 "prod_hom₂":
 "@[to_additive]\ntheorem prod_hom₂ (l : list ι) (f : M → N → P) (hf : ∀ a b c d, f (a * b) (c * d) = f a c * f b d) (hf' : f 1 1 = 1)\n    (f₁ : ι → M) (f₂ : ι → N) : (l.map fun i => f (f₁ i) (f₂ i)).prod = f (l.map f₁).prod (l.map f₂).prod :=\n  by\n  simp only [Prod, foldl_map]\n  convert l.foldl_hom₂ (fun a b => f a b) _ _ _ _ _ fun a b i => _\n  · exact hf'.symm\n  · exact hf _ _ _ _\n#align prod_hom₂ prod_hom₂\n\n",
 "prod_hom_rel":
 "@[to_additive]\ntheorem prod_hom_rel (l : list ι) {r : M → N → Prop} {f : ι → M} {g : ι → N} (h₁ : r 1 1)\n    (h₂ : ∀ ⦃i a b⦄, r a b → r (f i * a) (g i * b)) : r (l.map f).prod (l.map g).prod :=\n  list.rec_on l h₁ fun a l hl => by simp only [map_cons, prod_cons, h₂ hl]\n#align prod_hom_rel prod_hom_rel\n\n",
 "prod_hom":
 "@[to_additive]\ntheorem prod_hom (l : list M) {F : Type _} [MonoidHomClass F M N] (f : F) : (l.map f).prod = f l.prod :=\n  by\n  simp only [Prod, foldl_map, ← map_one f]\n  exact l.foldl_hom _ _ _ 1 (map_mul f)\n#align prod_hom prod_hom\n\n",
 "prod_erase":
 "@[simp, to_additive]\ntheorem prod_erase [decidable_eq M] [comm_monoid M] {a} : ∀ {l : list M}, a ∈ l → a * (l.erase a).prod = l.prod\n  | b :: l, h => by\n    obtain rfl | ⟨ne, h⟩ := Decidable.List.eq_or_ne_mem_of_mem h\n    · simp only [List.erase, if_pos, prod_cons]\n    · simp only [List.erase, if_neg (mt eq.symm ne), prod_cons, prod_erase h, mul_left_comm a b]\n#align prod_erase prod_erase\n\n",
 "prod_eq_zero_iff":
 "/-- Product of elements of a list `L` equals zero if and only if `0 ∈ L`. See also\n`list.prod_eq_zero` for an implication that needs weaker typeclass assumptions. -/\n@[simp]\ntheorem prod_eq_zero_iff [nontrivial M₀] [no_zero_divisors M₀] {L : list M₀} : L.prod = 0 ↔ (0 : M₀) ∈ L :=\n  by\n  induction' L with a L ihL\n  · simp\n  · rw [prod_cons, mul_eq_zero, ihL, mem_cons_iff, eq_comm]\n#align prod_eq_zero_iff prod_eq_zero_iff\n\n",
 "prod_eq_zero":
 "/-- If zero is an element of a list `L`, then `list.prod L = 0`. If the domain is a nontrivial\nmonoid with zero with no divisors, then this implication becomes an `iff`, see\n`list.prod_eq_zero_iff`. -/\ntheorem prod_eq_zero {L : list M₀} (h : (0 : M₀) ∈ L) : L.prod = 0 :=\n  by\n  induction' L with a L ihL\n  · exact absurd h (not_mem_nil _)\n  · rw [prod_cons]\n    cases' (mem_cons_iff _ _ _).1 h with ha hL\n    exacts[mul_eq_zero_of_left ha.symm _, mul_eq_zero_of_right _ (ihL hL)]\n#align prod_eq_zero prod_eq_zero\n\n",
 "prod_eq_pow_card":
 "@[to_additive sum_eq_card_nsmul]\ntheorem prod_eq_pow_card (l : list M) (m : M) (h : ∀ x ∈ l, x = m) : l.prod = m ^ l.length := by\n  rw [← prod_replicate, ← eq_replicate_length.2 h]\n#align prod_eq_pow_card prod_eq_pow_card\n\n",
 "prod_eq_one":
 "/-- Slightly more general version of `list.prod_eq_one_iff` for a non-ordered `monoid` -/\n@[to_additive \"Slightly more general version of `list.sum_eq_zero_iff`\\n  for a non-ordered `add_monoid`\"]\ntheorem prod_eq_one [monoid M] {l : list M} (hl : ∀ x ∈ l, x = (1 : M)) : l.prod = 1 :=\n  by\n  induction' l with i l hil\n  · rfl\n  rw [List.prod_cons, hil fun x hx => hl _ (mem_cons_of_mem i hx), hl _ (mem_cons_self i l), one_mul]\n#align prod_eq_one prod_eq_one\n\n",
 "prod_eq_foldr":
 "@[to_additive]\ntheorem prod_eq_foldr : l.prod = foldr (· * ·) 1 l :=\n  list.rec_on l rfl fun a l ihl => by rw [prod_cons, foldr_cons, ihl]\n#align prod_eq_foldr prod_eq_foldr\n\n",
 "prod_drop_succ":
 "/-- Counterpart to `list.prod_take_succ` when we have an inverse operation -/\n@[simp, to_additive \"Counterpart to `list.sum_take_succ` when we have an negation operation\"]\ntheorem prod_drop_succ : ∀ (L : list G) (i : ℕ) (p), (L.drop (i + 1)).prod = (L.nth_le i p)⁻¹ * (L.drop i).prod\n  | [], i, p => false.elim (nat.not_lt_zero _ p)\n  | x :: xs, 0, p => by simp\n  | x :: xs, i + 1, p => prod_drop_succ xs i _\n#align prod_drop_succ prod_drop_succ\n\n",
 "prod_cons":
 "@[simp, to_additive]\ntheorem prod_cons : (a :: l).prod = a * l.prod :=\n  calc\n    (a :: l).prod = foldl (· * ·) (a * 1) l := by simp only [List.prod, foldl_cons, one_mul, mul_one]\n    _ = _ := foldl_assoc\n    \n#align prod_cons prod_cons\n\n",
 "prod_concat":
 "@[to_additive]\ntheorem prod_concat : (l.concat a).prod = l.prod * a := by rw [concat_eq_append, prod_append, prod_singleton]\n#align prod_concat prod_concat\n\n",
 "prod_append":
 "@[simp, to_additive]\ntheorem prod_append : (l₁ ++ l₂).prod = l₁.prod * l₂.prod :=\n  calc\n    (l₁ ++ l₂).prod = foldl (· * ·) (foldl (· * ·) 1 l₁ * 1) l₂ := by simp [List.prod]\n    _ = l₁.prod * l₂.prod := foldl_assoc\n    \n#align prod_append prod_append\n\n",
 "one_lt_prod_of_one_lt":
 "@[to_additive sum_pos]\ntheorem one_lt_prod_of_one_lt [OrderedCommMonoid M] :\n    ∀ (l : list M) (hl : ∀ x ∈ l, (1 : M) < x) (hl₂ : l ≠ []), 1 < l.prod\n  | [], _, h => (h rfl).elim\n  | [b], h, _ => by simpa using h\n  | a :: b :: l, hl₁, hl₂ => by\n    simp only [forall_eq_or_imp, List.mem_cons _ a] at hl₁\n    rw [List.prod_cons]\n    apply one_lt_mul_of_lt_of_le' hl₁.1\n    apply le_of_lt ((b :: l).one_lt_prod_of_one_lt hl₁.2 (l.cons_ne_nil b))\n#align one_lt_prod_of_one_lt one_lt_prod_of_one_lt\n\n",
 "one_le_prod_of_one_le":
 "@[to_additive sum_nonneg]\ntheorem one_le_prod_of_one_le [preorder M] [covariant_class M M (· * ·) (· ≤ ·)] {l : list M}\n    (hl₁ : ∀ x ∈ l, (1 : M) ≤ x) : 1 ≤ l.prod :=\n  by\n  -- We don't use `pow_card_le_prod` to avoid assumption\n  -- [covariant_class M M (function.swap (*)) (≤)]\n  induction' l with hd tl ih;\n  · rfl\n  rw [prod_cons]\n  exact one_le_mul (hl₁ hd (mem_cons_self hd tl)) (ih fun x h => hl₁ x (mem_cons_of_mem hd h))\n#align one_le_prod_of_one_le one_le_prod_of_one_le\n\n",
 "nth_zero_mul_tail_prod":
 "/-- We'd like to state this as `L.head * L.tail.prod = L.prod`, but because `L.head` relies on an\ninhabited instance to return a garbage value on the empty list, this is not possible.\nInstead, we write the statement in terms of `(L.nth 0).get_or_else 1`.\n-/\n@[to_additive\n      \"We'd like to state this as `L.head + L.tail.sum = L.sum`, but because `L.head`\\nrelies on an inhabited instance to return a garbage value on the empty list, this is not possible.\\nInstead, we write the statement in terms of `(L.nth 0).get_or_else 0`.\"]\ntheorem nth_zero_mul_tail_prod (l : list M) : (l.nth 0).get_or_else 1 * l.tail.prod = l.prod := by cases l <;> simp\n#align nth_zero_mul_tail_prod nth_zero_mul_tail_prod\n\n",
 "monotone_prod_take":
 "@[to_additive]\ntheorem monotone_prod_take [CanonicallyOrderedMonoid M] (L : list M) : monotone fun i => (L.take i).prod :=\n  by\n  apply monotone_nat_of_le_succ fun n => _\n  cases' lt_or_le n L.length with h h\n  · rw [prod_take_succ _ _ h]\n    exact le_self_mul\n  · simp [take_all_of_le h, take_all_of_le (le_trans h (nat.le_succ _))]\n#align monotone_prod_take monotone_prod_take\n\n",
 "map_list_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n#print map_list_prod /-\n/-- Deprecated, use `_root_.map_list_prod` instead. -/\n@[to_additive \"Deprecated, use `_root_.map_list_sum` instead.\"]\nprotected theorem map_list_prod (f : «expr →* » M N) (l : list M) : f l.prod = (l.map f).prod :=\n  map_list_prod f l\n#align map_list_prod map_list_prod\n-/\n\n",
 "list_prod_right":
 "#print Commute.list_prod_right /-\n@[to_additive]\ntheorem Commute.list_prod_right (l : list M) (y : M) (h : ∀ x ∈ l, Commute y x) : Commute y l.prod :=\n  by\n  induction' l with z l IH\n  · simp\n  · rw [List.forall_mem_cons] at h\n    rw [List.prod_cons]\n    exact Commute.mul_right h.1 (IH h.2)\n#align commute.list_prod_right Commute.list_prod_right\n-/\n\n",
 "list_prod_left":
 "#print Commute.list_prod_left /-\n@[to_additive]\ntheorem Commute.list_prod_left (l : list M) (y : M) (h : ∀ x ∈ l, Commute x y) : Commute l.prod y :=\n  (Commute.list_prod_right _ _ fun x hx => (h _ hx).symm).symm\n#align commute.list_prod_left Commute.list_prod_left\n-/\n\n",
 "length_pos_of_prod_ne_one":
 "/-- A list with product not one must have positive length. -/\n@[to_additive \"A list with sum not zero must have positive length.\"]\ntheorem length_pos_of_prod_ne_one (L : list M) (h : L.prod ≠ 1) : 0 < L.length :=\n  by\n  cases L\n  · contrapose h\n    simp\n  · simp\n#align length_pos_of_prod_ne_one length_pos_of_prod_ne_one\n\n",
 "length_pos_of_prod_lt_one":
 "/-- A list with product less than one must have positive length. -/\n@[to_additive \"A list with negative sum must have positive length.\"]\ntheorem length_pos_of_prod_lt_one [preorder M] (L : list M) (h : L.prod < 1) : 0 < L.length :=\n  length_pos_of_prod_ne_one L h.ne\n#align length_pos_of_prod_lt_one length_pos_of_prod_lt_one\n\n",
 "length_pos_of_one_lt_prod":
 "/-- A list with product greater than one must have positive length. -/\n@[to_additive length_pos_of_sum_pos \"A list with positive sum must have positive length.\"]\ntheorem length_pos_of_one_lt_prod [preorder M] (L : list M) (h : 1 < L.prod) : 0 < L.length :=\n  length_pos_of_prod_ne_one L h.ne'\n#align length_pos_of_one_lt_prod length_pos_of_one_lt_prod\n\n",
 "head_mul_tail_prod_of_ne_nil":
 "/-- Same as `nth_zero_mul_tail_prod`, but avoiding the `list.head` garbage complication by requiring\nthe list to be nonempty. -/\n@[to_additive\n      \"Same as `nth_zero_add_tail_sum`, but avoiding the `list.head` garbage complication\\nby requiring the list to be nonempty.\"]\ntheorem head_mul_tail_prod_of_ne_nil [inhabited M] (l : list M) (h : l ≠ []) : l.head * l.tail.prod = l.prod := by\n  cases l <;> [contradiction, simp]\n#align head_mul_tail_prod_of_ne_nil head_mul_tail_prod_of_ne_nil\n\n",
 "head_le_sum":
 "/-- This relies on `default ℕ = 0`. -/\ntheorem head_le_sum (L : list ℕ) : L.head ≤ L.sum :=\n  nat.le.intro (headI_add_tail_sum L)\n#align head_le_sum head_le_sum\n\n",
 "head_add_tail_sum":
 "/-- This relies on `default ℕ = 0`. -/\ntheorem head_add_tail_sum (L : list ℕ) : L.head + L.tail.sum = L.sum :=\n  by\n  cases L\n  · simp\n    rfl\n  · simp\n#align head_add_tail_sum head_add_tail_sum\n\n",
 "exists_mem_ne_one_of_prod_ne_one":
 "@[to_additive]\ntheorem exists_mem_ne_one_of_prod_ne_one [monoid M] {l : list M} (h : l.prod ≠ 1) : ∃ x ∈ l, x ≠ (1 : M) := by\n  simpa only [not_forall] using mt prod_eq_one h\n#align exists_mem_ne_one_of_prod_ne_one exists_mem_ne_one_of_prod_ne_one\n\n",
 "exists_lt_of_prod_lt'":
 "@[to_additive exists_lt_of_sum_lt]\ntheorem exists_lt_of_prod_lt' [linear_order M] [covariant_class M M (function.swap (· * ·)) (· ≤ ·)]\n    [covariant_class M M (· * ·) (· ≤ ·)] {l : list ι} (f g : ι → M) (h : (l.map f).prod < (l.map g).prod) :\n    ∃ i ∈ l, f i < g i := by\n  contrapose! h\n  exact prod_le_prod' h\n#align exists_lt_of_prod_lt' exists_lt_of_prod_lt'\n\n",
 "exists_le_of_prod_le'":
 "@[to_additive exists_le_of_sum_le]\ntheorem exists_le_of_prod_le' [linear_order M] [covariant_class M M (· * ·) (· < ·)]\n    [covariant_class M M (· * ·) (· ≤ ·)] [covariant_class M M (function.swap (· * ·)) (· < ·)]\n    [covariant_class M M (function.swap (· * ·)) (· ≤ ·)] {l : list ι} (hl : l ≠ []) (f g : ι → M)\n    (h : (l.map f).prod ≤ (l.map g).prod) : ∃ x ∈ l, f x ≤ g x :=\n  by\n  contrapose! h\n  exact prod_lt_prod_of_ne_nil hl _ _ h\n#align exists_le_of_prod_le' exists_le_of_prod_le'\n\n",
 "eq_of_prod_take_eq":
 "@[to_additive]\ntheorem eq_of_prod_take_eq [left_cancel_monoid M] {L L' : list M} (h : L.length = L'.length)\n    (h' : ∀ i ≤ L.length, (L.take i).prod = (L'.take i).prod) : L = L' :=\n  by\n  apply ext_le h fun i h₁ h₂ => _\n  have : (L.take (i + 1)).prod = (L'.take (i + 1)).prod := h' _ (nat.succ_le_of_lt h₁)\n  rw [prod_take_succ L i h₁, prod_take_succ L' i h₂, h' i (le_of_lt h₁)] at this\n  convert mul_left_cancel this\n#align eq_of_prod_take_eq eq_of_prod_take_eq\n\n",
 "alternating_prod_singleton":
 "@[simp, to_additive]\ntheorem alternating_prod_singleton (a : α) : alternatingProd [a] = a :=\n  rfl\n#align alternating_prod_singleton alternating_prod_singleton\n\n",
 "alternating_prod_nil":
 "@[simp, to_additive]\ntheorem alternating_prod_nil : alternatingProd ([] : list α) = 1 :=\n  rfl\n#align alternating_prod_nil alternating_prod_nil\n\n",
 "alternating_prod_cons_cons'":
 "@[to_additive]\ntheorem alternating_prod_cons_cons' (a b : α) (l : list α) :\n    alternatingProd (a :: b :: l) = a * b⁻¹ * alternatingProd l :=\n  rfl\n#align alternating_prod_cons_cons' alternating_prod_cons_cons'\n\n",
 "alternating_prod_cons_cons":
 "@[to_additive]\ntheorem alternating_prod_cons_cons [div_inv_monoid α] (a b : α) (l : list α) :\n    alternatingProd (a :: b :: l) = a / b * alternatingProd l := by rw [div_eq_mul_inv, alternating_prod_cons_cons']\n#align alternating_prod_cons_cons alternating_prod_cons_cons\n\n",
 "alternating_prod_cons'":
 "@[to_additive]\ntheorem alternating_prod_cons' : ∀ (a : α) (l : list α), alternatingProd (a :: l) = a * (alternatingProd l)⁻¹\n  | a, [] => by rw [alternating_prod_nil, inv_one, mul_one, alternating_prod_singleton]\n  | a, b :: l => by rw [alternating_prod_cons_cons', alternating_prod_cons' b l, mul_inv, inv_inv, mul_assoc]\n#align alternating_prod_cons' alternating_prod_cons'\n\n",
 "alternating_prod_cons":
 "@[simp, to_additive]\ntheorem alternating_prod_cons (a : α) (l : list α) : alternatingProd (a :: l) = a / alternatingProd l := by\n  rw [div_eq_mul_inv, alternating_prod_cons']\n#align alternating_prod_cons alternating_prod_cons\n\n",
 "all_one_of_le_one_le_of_prod_eq_one":
 "@[to_additive all_zero_of_le_zero_le_of_sum_eq_zero]\ntheorem all_one_of_le_one_le_of_prod_eq_one [OrderedCommMonoid M] {l : list M} (hl₁ : ∀ x ∈ l, (1 : M) ≤ x)\n    (hl₂ : l.prod = 1) {x : M} (hx : x ∈ l) : x = 1 :=\n  le_antisymm (hl₂ ▸ single_le_prod hl₁ _ hx) (hl₁ x hx)\n#align all_one_of_le_one_le_of_prod_eq_one all_one_of_le_one_le_of_prod_eq_one\n\n"}