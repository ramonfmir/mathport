{"rtake_zero":
 "@[simp]\ntheorem rtake_zero : rtake l 0 = [] := by simp [rtake]\n#align rtake_zero rtake_zero\n\n",
 "rtake_while_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem rtake_while_suffix : «expr <:+ » (l.rtake_while p) l :=\n  by\n  rw [← reverse_prefix, rtake_while, reverse_reverse]\n  exact take_while_prefix _\n#align rtake_while_suffix rtake_while_suffix\n\n",
 "rtake_while_nil":
 "@[simp]\ntheorem rtake_while_nil : rtakeWhile p ([] : List α) = [] := by simp [rtake_while, take_while]\n#align rtake_while_nil rtake_while_nil\n\n",
 "rtake_while_idempotent":
 "theorem rtake_while_idempotent : rtakeWhile p (rtakeWhile p l) = rtakeWhile p l :=\n  rtakeWhile_eq_self_iff.mpr fun _ => mem_rtakeWhile_imp\n#align rtake_while_idempotent rtake_while_idempotent\n\n",
 "rtake_while_eq_self_iff":
 "@[simp]\ntheorem rtake_while_eq_self_iff : rtakeWhile p l = l ↔ ∀ x ∈ l, p x := by simp [rtake_while, reverse_eq_iff]\n#align rtake_while_eq_self_iff rtake_while_eq_self_iff\n\n",
 "rtake_while_eq_nil_iff":
 "@[simp]\ntheorem rtake_while_eq_nil_iff : rtakeWhile p l = [] ↔ ∀ hl : l ≠ [], ¬p (l.last hl) := by\n  induction l using List.reverseRecOn <;> simp [rtake_while]\n#align rtake_while_eq_nil_iff rtake_while_eq_nil_iff\n\n",
 "rtake_while_concat_pos":
 "@[simp]\ntheorem rtake_while_concat_pos (x : α) (h : p x) : rtakeWhile p (l ++ [x]) = rtakeWhile p l ++ [x] := by\n  rw [rtake_while_concat, if_pos h]\n#align rtake_while_concat_pos rtake_while_concat_pos\n\n",
 "rtake_while_concat_neg":
 "@[simp]\ntheorem rtake_while_concat_neg (x : α) (h : ¬p x) : rtakeWhile p (l ++ [x]) = [] := by rw [rtake_while_concat, if_neg h]\n#align rtake_while_concat_neg rtake_while_concat_neg\n\n",
 "rtake_while_concat":
 "theorem rtake_while_concat (x : α) : rtakeWhile p (l ++ [x]) = if p x then rtakeWhile p l ++ [x] else [] :=\n  by\n  simp only [rtake_while, take_while, reverse_append, reverse_singleton, singleton_append]\n  split_ifs with h h <;> simp [h]\n#align rtake_while_concat rtake_while_concat\n\n",
 "rtake_nil":
 "@[simp]\ntheorem rtake_nil : rtake ([] : List α) n = [] := by simp [rtake]\n#align rtake_nil rtake_nil\n\n",
 "rtake_eq_reverse_take_reverse":
 "theorem rtake_eq_reverse_take_reverse : l.rtake n = reverse (l.reverse.take n) :=\n  by\n  rw [rtake]\n  induction' l using List.reverseRecOn with xs x IH generalizing n\n  · simp\n  · cases n\n    · simp\n    · simp [drop_append_eq_append_drop, IH]\n#align rtake_eq_reverse_take_reverse rtake_eq_reverse_take_reverse\n\n",
 "rtake_concat_succ":
 "@[simp]\ntheorem rtake_concat_succ (x : α) : rtake (l ++ [x]) (n + 1) = rtake l n ++ [x] := by\n  simp [rtake_eq_reverse_take_reverse]\n#align rtake_concat_succ rtake_concat_succ\n\n",
 "rdrop_zero":
 "@[simp]\ntheorem rdrop_zero : rdrop l 0 = l := by simp [rdrop]\n#align rdrop_zero rdrop_zero\n\n",
 "rdrop_while_singleton":
 "theorem rdrop_while_singleton (x : α) : rdropWhile p [x] = if p x then [] else [x] := by\n  rw [← nil_append [x], rdrop_while_concat, rdrop_while_nil]\n#align rdrop_while_singleton rdrop_while_singleton\n\n",
 "rdrop_while_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem rdrop_while_prefix : «expr <+: » (l.rdrop_while p) l :=\n  by\n  rw [← reverse_suffix, rdrop_while, reverse_reverse]\n  exact drop_while_suffix _\n#align rdrop_while_prefix rdrop_while_prefix\n\n",
 "rdrop_while_nil":
 "@[simp]\ntheorem rdrop_while_nil : rdropWhile p ([] : List α) = [] := by simp [rdrop_while, drop_while]\n#align rdrop_while_nil rdrop_while_nil\n\n",
 "rdrop_while_last_not":
 "theorem rdrop_while_last_not (hl : l.rdrop_while p ≠ []) : ¬p ((rdropWhile p l).last hl) :=\n  by\n  simp_rw [rdrop_while]\n  rw [last_reverse]\n  exact drop_while_nth_le_zero_not _ _ _\n#align rdrop_while_last_not rdrop_while_last_not\n\n",
 "rdrop_while_idempotent":
 "theorem rdrop_while_idempotent : rdropWhile p (rdropWhile p l) = rdropWhile p l :=\n  rdropWhile_eq_self_iff.mpr (rdropWhile_last_not _ _)\n#align rdrop_while_idempotent rdrop_while_idempotent\n\n",
 "rdrop_while_eq_self_iff":
 "@[simp]\ntheorem rdrop_while_eq_self_iff : rdropWhile p l = l ↔ ∀ hl : l ≠ [], ¬p (l.last hl) :=\n  by\n  simp only [rdrop_while, reverse_eq_iff, length_reverse, ne.def, drop_while_eq_self_iff, last_eq_nth_le, ←\n    length_eq_zero, pos_iff_ne_zero]\n  refine' forall_congr' _\n  intro h\n  rw [nth_le_reverse']\n  · simp\n  · rw [← ne.def, ← pos_iff_ne_zero] at h\n    simp [tsub_lt_iff_right (nat.succ_le_of_lt h)]\n#align rdrop_while_eq_self_iff rdrop_while_eq_self_iff\n\n",
 "rdrop_while_eq_nil_iff":
 "@[simp]\ntheorem rdrop_while_eq_nil_iff : rdropWhile p l = [] ↔ ∀ x ∈ l, p x := by simp [rdrop_while]\n#align rdrop_while_eq_nil_iff rdrop_while_eq_nil_iff\n\n",
 "rdrop_while_concat_pos":
 "@[simp]\ntheorem rdrop_while_concat_pos (x : α) (h : p x) : rdropWhile p (l ++ [x]) = rdropWhile p l := by\n  rw [rdrop_while_concat, if_pos h]\n#align rdrop_while_concat_pos rdrop_while_concat_pos\n\n",
 "rdrop_while_concat_neg":
 "@[simp]\ntheorem rdrop_while_concat_neg (x : α) (h : ¬p x) : rdropWhile p (l ++ [x]) = l ++ [x] := by\n  rw [rdrop_while_concat, if_neg h]\n#align rdrop_while_concat_neg rdrop_while_concat_neg\n\n",
 "rdrop_while_concat":
 "theorem rdrop_while_concat (x : α) : rdropWhile p (l ++ [x]) = if p x then rdropWhile p l else l ++ [x] :=\n  by\n  simp only [rdrop_while, drop_while, reverse_append, reverse_singleton, singleton_append]\n  split_ifs with h h <;> simp [h]\n#align rdrop_while_concat rdrop_while_concat\n\n",
 "rdrop_nil":
 "/-\nCopyright (c) 2022 Yakov Pechersky. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yakov Pechersky\n-/\n@[simp]\ntheorem rdrop_nil : rdrop ([] : List α) n = [] := by simp [rdrop]\n#align rdrop_nil rdrop_nil\n\n",
 "rdrop_eq_reverse_drop_reverse":
 "theorem rdrop_eq_reverse_drop_reverse : l.rdrop n = reverse (l.reverse.drop n) :=\n  by\n  rw [rdrop]\n  induction' l using List.reverseRecOn with xs x IH generalizing n\n  · simp\n  · cases n\n    · simp [take_append]\n    · simp [take_append_eq_append_take, IH]\n#align rdrop_eq_reverse_drop_reverse rdrop_eq_reverse_drop_reverse\n\n",
 "rdrop_concat_succ":
 "@[simp]\ntheorem rdrop_concat_succ (x : α) : rdrop (l ++ [x]) (n + 1) = rdrop l n := by simp [rdrop_eq_reverse_drop_reverse]\n#align rdrop_concat_succ rdrop_concat_succ\n\n",
 "mem_rtake_while_imp":
 "theorem mem_rtake_while_imp {x : α} (hx : x ∈ rtakeWhile p l) : p x :=\n  by\n  suffices x ∈ take_while p l.reverse by exact mem_take_while_imp this\n  rwa [← mem_reverse, ← rtake_while]\n#align mem_rtake_while_imp mem_rtake_while_imp\n\n",
 "drop_while_idempotent":
 "theorem drop_while_idempotent : dropWhile p (dropWhile p l) = dropWhile p l :=\n  dropWhile_eq_self_iff.mpr (dropWhile_nthLe_zero_not _ _)\n#align drop_while_idempotent drop_while_idempotent\n\n",
 "drop_while_eq_self_iff":
 "-- it is in this file because it requires `list.infix`\n@[simp]\ntheorem drop_while_eq_self_iff : dropWhile p l = l ↔ ∀ hl : 0 < l.length, ¬p (l.nth_le 0 hl) :=\n  by\n  induction' l with hd tl IH\n  · simp\n  · rw [drop_while]\n    split_ifs\n    · simp only [h, length, nth_le, Nat.succ_pos', not_true, forall_true_left, iff_false_iff]\n      intro H\n      refine' (cons_ne_self hd tl) (sublist.antisymm _ (sublist_cons _ _))\n      rw [← H]\n      exact (drop_while_suffix _).sublist\n    · simp [h]\n#align drop_while_eq_self_iff drop_while_eq_self_iff\n\n"}