{"trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n@[trans]\ntheorem is_infix.trans : ∀ {l₁ l₂ l₃ : list α}, «expr <:+: » l₁ l₂ → «expr <:+: » l₂ l₃ → «expr <:+: » l₁ l₃\n  | l, _, _, ⟨l₁, r₁, rfl⟩, ⟨l₂, r₂, rfl⟩ => ⟨l₂ ++ l₁, r₁ ++ r₂, by simp only [append_assoc]⟩\n#align is_infix.trans is_infix.trans\n\n",
 "take_while_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem take_while_prefix (p : α → Prop) [decidable_pred p] : «expr <+: » (l.take_while p) l :=\n  ⟨l.drop_while p, takeWhile_append_drop p l⟩\n#align take_while_prefix take_while_prefix\n\n",
 "take_subset":
 "theorem take_subset (n) (l : list α) : take n l ⊆ l :=\n  (take_sublist n l).subset\n#align take_subset take_subset\n\n",
 "take_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem take_sublist (n) (l : list α) : «expr <+ » (take n l) l :=\n  (take_prefix n l).sublist\n#align take_sublist take_sublist\n\n",
 "take_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem take_prefix (n) (l : list α) : «expr <+: » (take n l) l :=\n  ⟨_, take_append_drop _ _⟩\n#align take_prefix take_prefix\n\n",
 "tails_reverse":
 "theorem tails_reverse (l : list α) : tails (reverse l) = reverse (map reverse l.inits) :=\n  by\n  rw [inits_eq_tails l]\n  simp [reverse_involutive.comp_self]\n#align tails_reverse tails_reverse\n\n",
 "tails_eq_inits":
 "theorem tails_eq_inits : ∀ l : list α, l.tails = (reverse <| map reverse <| inits <| reverse l)\n  | [] => by simp\n  | a :: l => by simp [tails_eq_inits l, append_left_inj]\n#align tails_eq_inits tails_eq_inits\n\n",
 "tails_cons":
 "theorem tails_cons (a : α) (l : list α) : tails (a :: l) = (a :: l) :: l.tails := by simp\n#align tails_cons tails_cons\n\n",
 "tails_append":
 "@[simp]\ntheorem tails_append : ∀ s t : list α, tails (s ++ t) = (s.tails.map fun l => l ++ t) ++ t.tails.tail\n  | [], [] => by simp\n  | [], a :: t => by simp\n  | a :: s, t => by simp [tails_append s t]\n#align tails_append tails_append\n\n",
 "tail_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem tail_suffix (l : list α) : «expr <:+ » (tail l) l := by rw [← drop_one] <;> apply drop_suffix\n#align tail_suffix tail_suffix\n\n",
 "tail_subset":
 "theorem tail_subset (l : list α) : tail l ⊆ l :=\n  (tail_sublist l).subset\n#align tail_subset tail_subset\n\n",
 "tail_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem tail_sublist (l : list α) : «expr <+ » l.tail l :=\n  (tail_suffix l).sublist\n#align tail_sublist tail_sublist\n\n",
 "suffix_rfl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_rfl : «expr <:+ » l l :=\n  suffix_refl _\n#align suffix_rfl suffix_rfl\n\n",
 "suffix_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[refl]\ntheorem suffix_refl (l : list α) : «expr <:+ » l l :=\n  ⟨[], rfl⟩\n#align suffix_refl suffix_refl\n\n",
 "suffix_or_suffix_of_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_or_suffix_of_suffix (h₁ : «expr <:+ » l₁ l₃) (h₂ : «expr <:+ » l₂ l₃) :\n    «expr <:+ » l₁ l₂ ∨ «expr <:+ » l₂ l₁ :=\n  (prefix_or_prefix_of_prefix (reverse_prefix.2 h₁) (reverse_prefix.2 h₂)).imp reverse_prefix.1 reverse_prefix.1\n#align suffix_or_suffix_of_suffix suffix_or_suffix_of_suffix\n\n",
 "suffix_of_suffix_length_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_of_suffix_length_le (h₁ : «expr <:+ » l₁ l₃) (h₂ : «expr <:+ » l₂ l₃) (ll : length l₁ ≤ length l₂) :\n    «expr <:+ » l₁ l₂ :=\n  reverse_prefix.1 <| prefix_of_prefix_length_le (reverse_prefix.2 h₁) (reverse_prefix.2 h₂) (by simp [ll])\n#align suffix_of_suffix_length_le suffix_of_suffix_length_le\n\n",
 "suffix_nil_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[simp]\ntheorem suffix_nil_iff : «expr <:+ » l [] ↔ l = [] :=\n  ⟨fun h => eq_nil_of_infix_nil h.is_infix, fun h => h ▸ suffix_rfl⟩\n#align suffix_nil_iff suffix_nil_iff\n\n",
 "suffix_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[simp]\ntheorem suffix_insert (a : α) (l : list α) : «expr <:+ » l (insert a l) := by\n  by_cases a ∈ l <;> [simp only [insert_of_mem h], simp only [insert_of_not_mem h, suffix_cons]]\n#align suffix_insert suffix_insert\n\n",
 "suffix_iff_eq_drop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_iff_eq_drop : «expr <:+ » l₁ l₂ ↔ l₁ = drop (length l₂ - length l₁) l₂ :=\n  ⟨fun h => append_left_cancel <| (suffix_iff_eq_append.1 h).trans (take_append_drop _ _).symm, fun e =>\n    e.symm ▸ drop_suffix _ _⟩\n#align suffix_iff_eq_drop suffix_iff_eq_drop\n\n",
 "suffix_iff_eq_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_iff_eq_append : «expr <:+ » l₁ l₂ ↔ take (length l₂ - length l₁) l₂ ++ l₁ = l₂ :=\n  ⟨by rintro ⟨r, rfl⟩ <;> simp only [length_append, add_tsub_cancel_right, take_left], fun e => ⟨_, e⟩⟩\n#align suffix_iff_eq_append suffix_iff_eq_append\n\n",
 "suffix_cons_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_cons_iff : «expr <:+ » l₁ (a :: l₂) ↔ l₁ = a :: l₂ ∨ «expr <:+ » l₁ l₂ :=\n  by\n  constructor\n  · rintro ⟨⟨hd, tl⟩, hl₃⟩\n    · exact or.inl hl₃\n    · simp only [cons_append] at hl₃\n      exact or.inr ⟨_, hl₃.2⟩\n  · rintro (rfl | hl₁)\n    · exact (a :: l₂).suffix_refl\n    · exact hl₁.trans (l₂.suffix_cons _)\n#align suffix_cons_iff suffix_cons_iff\n\n",
 "suffix_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[simp]\ntheorem suffix_cons (a : α) : ∀ l, «expr <:+ » l (a :: l) :=\n  suffix_append [a]\n#align suffix_cons suffix_cons\n\n",
 "suffix_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[simp]\ntheorem suffix_append (l₁ l₂ : list α) : «expr <:+ » l₂ (l₁ ++ l₂) :=\n  ⟨l₁, rfl⟩\n#align suffix_append suffix_append\n\n",
 "subset_insert":
 "theorem subset_insert (a : α) (l : list α) : l ⊆ l.insert a :=\n  (sublist_insert a l).subset\n#align subset_insert subset_insert\n\n",
 "subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\nprotected theorem is_suffix.subset (hl : «expr <:+ » l₁ l₂) : l₁ ⊆ l₂ :=\n  hl.sublist.subset\n#align is_suffix.subset is_suffix.subset\n\n",
 "sublist_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem sublist_insert (a : α) (l : list α) : «expr <+ » l (l.insert a) :=\n  (suffix_insert a l).sublist\n#align sublist_insert sublist_insert\n\n",
 "sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\nprotected theorem is_suffix.sublist (h : «expr <:+ » l₁ l₂) : «expr <+ » l₁ l₂ :=\n  h.is_infix.sublist\n#align is_suffix.sublist is_suffix.sublist\n\n",
 "slice_subset":
 "theorem slice_subset (n m : ℕ) (l : list α) : l.slice n m ⊆ l :=\n  (slice_sublist n m l).subset\n#align slice_subset slice_subset\n\n",
 "slice_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem slice_sublist (n m : ℕ) (l : list α) : «expr <+ » (l.slice n m) l :=\n  by\n  rw [List.dropSlice_eq]\n  conv_rhs => rw [← List.take_append_drop n l]\n  rw [List.append_sublist_append_left, add_comm, List.drop_add]\n  exact List.drop_sublist _ _\n#align slice_sublist slice_sublist\n\n",
 "reverse_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n@[simp]\ntheorem reverse_suffix : «expr <:+ » (reverse l₁) (reverse l₂) ↔ «expr <+: » l₁ l₂ :=\n  ⟨fun ⟨r, e⟩ => ⟨reverse r, by rw [← reverse_reverse l₁, ← reverse_append, e, reverse_reverse]⟩, fun ⟨r, e⟩ =>\n    ⟨reverse r, by rw [← reverse_append, e]⟩⟩\n#align reverse_suffix reverse_suffix\n\n",
 "reverse_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[simp]\ntheorem reverse_prefix : «expr <+: » (reverse l₁) (reverse l₂) ↔ «expr <:+ » l₁ l₂ := by\n  rw [← reverse_suffix] <;> simp only [reverse_reverse]\n#align reverse_prefix reverse_prefix\n\n",
 "reverse_infix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n@[simp]\ntheorem reverse_infix : «expr <:+: » (reverse l₁) (reverse l₂) ↔ «expr <:+: » l₁ l₂ :=\n  ⟨fun ⟨s, t, e⟩ =>\n    ⟨reverse t, reverse s, by\n      rw [← reverse_reverse l₁, append_assoc, ← reverse_append, ← reverse_append, e, reverse_reverse]⟩,\n    fun ⟨s, t, e⟩ => ⟨reverse t, reverse s, by rw [append_assoc, ← reverse_append, ← reverse_append, e]⟩⟩\n#align reverse_infix reverse_infix\n\n",
 "reduce_option":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem is_prefix.reduce_option {l₁ l₂ : list (option α)} (h : «expr <+: » l₁ l₂) :\n    «expr <+: » l₁.reduce_option l₂.reduce_option :=\n  h.filter_map id\n#align is_prefix.reduce_option is_prefix.reduce_option\n\n",
 "prefix_take_le_iff":
 "/- ./././Mathport/Syntax/Translate/Tactic/Lean3.lean:564:6: unsupported: specialize @hyp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n-- Alternatively, use mem_tails\ntheorem prefix_take_le_iff {L : list (list (option α))} (hm : m < L.length) :\n    «expr <+: » (L.take m) (L.take n) ↔ m ≤ n :=\n  by\n  simp only [prefix_iff_eq_take, length_take]\n  induction' m with m IH generalizing L n\n  · simp only [min_eq_left, eq_self_iff_true, nat.zero_le, take]\n  cases' L with l ls\n  · exact (not_lt_bot hm).elim\n  cases n\n  · refine' iff_of_false _ (zero_lt_succ _).not_le\n    rw [take_zero, take_nil]\n    simp only [take]\n    exact not_false\n  · simp only [length] at hm\n    specialize IH ls n (nat.lt_of_succ_lt_succ hm)\n    simp only [le_of_lt (nat.lt_of_succ_lt_succ hm), min_eq_left] at IH\n    simp only [le_of_lt hm, IH, true_and_iff, min_eq_left, eq_self_iff_true, length, take]\n    exact ⟨nat.succ_le_succ, nat.le_of_succ_le_succ⟩\n#align prefix_take_le_iff prefix_take_le_iff\n\n",
 "prefix_rfl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_rfl : «expr <+: » l l :=\n  prefix_refl _\n#align prefix_rfl prefix_rfl\n\n",
 "prefix_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n@[refl]\ntheorem prefix_refl (l : list α) : «expr <+: » l l :=\n  ⟨[], append_nil _⟩\n#align prefix_refl prefix_refl\n\n",
 "prefix_or_prefix_of_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_or_prefix_of_prefix (h₁ : «expr <+: » l₁ l₃) (h₂ : «expr <+: » l₂ l₃) :\n    «expr <+: » l₁ l₂ ∨ «expr <+: » l₂ l₁ :=\n  (le_total (length l₁) (length l₂)).imp (prefix_of_prefix_length_le h₁ h₂) (prefix_of_prefix_length_le h₂ h₁)\n#align prefix_or_prefix_of_prefix prefix_or_prefix_of_prefix\n\n",
 "prefix_of_prefix_length_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- failed to parenthesize: parenthesize: uncaught backtrack exception\n[PrettyPrinter.parenthesize.input] (Command.declaration\n     (Command.declModifiers [] [] [] [] [] [])\n     (Command.theorem\n      \"theorem\"\n      (Command.declId `prefix_of_prefix_length_le [])\n      (Command.declSig\n       []\n       (Term.typeSpec\n        \":\"\n        (Term.forall\n         \"∀\"\n         [(Term.implicitBinder \"{\" [`l₁ `l₂ `l₃] [\":\" (Term.app `list [`α])] \"}\")]\n         []\n         \",\"\n         (Term.arrow\n          (Term.app `«expr <+: » [`l₁ `l₃])\n          \"→\"\n          (Term.arrow\n           (Term.app `«expr <+: » [`l₂ `l₃])\n           \"→\"\n           (Term.arrow\n            («term_≤_» (Term.app `length [`l₁]) \"≤\" (Term.app `length [`l₂]))\n            \"→\"\n            (Term.app `«expr <+: » [`l₁ `l₂])))))))\n      (Command.declValEqns\n       (Term.matchAltsWhereDecls\n        (Term.matchAlts\n         [(Term.matchAlt\n           \"|\"\n           [[(«term[_]» \"[\" [] \"]\") \",\" `l₂ \",\" `l₃ \",\" `h₁ \",\" `h₂ \",\" (Term.hole \"_\")]]\n           \"=>\"\n           (Term.app `nil_prefix [(Term.hole \"_\")]))\n          (Term.matchAlt\n           \"|\"\n           [[(«term_::_» `a \"::\" `l₁)\n             \",\"\n             («term_::_» `b \"::\" `l₂)\n             \",\"\n             (Term.hole \"_\")\n             \",\"\n             (Term.anonymousCtor \"⟨\" [`r₁ \",\" `rfl] \"⟩\")\n             \",\"\n             (Term.anonymousCtor \"⟨\" [`r₂ \",\" `e] \"⟩\")\n             \",\"\n             `ll]]\n           \"=>\"\n           (Term.byTactic\n            \"by\"\n            (Tactic.tacticSeq\n             (Tactic.tacticSeq1Indented\n              [(Tactic.injection \"injection\" `e [\"with\" [\"_\" `e']])\n               \";\"\n               (Tactic.subst \"subst\" [`b])\n               []\n               (Std.Tactic.rcases\n                \"rcases\"\n                [(Tactic.casesTarget\n                  []\n                  (Term.app\n                   `prefix_of_prefix_length_le\n                   [(Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `rfl] \"⟩\")\n                    (Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `e'] \"⟩\")\n                    (Term.app `le_of_succ_le_succ [`ll])]))]\n                [\"with\"\n                 (Std.Tactic.RCases.rcasesPatLo\n                  (Std.Tactic.RCases.rcasesPatMed\n                   [(Std.Tactic.RCases.rcasesPat.tuple\n                     \"⟨\"\n                     [(Std.Tactic.RCases.rcasesPatLo\n                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r₃)])\n                       [])\n                      \",\"\n                      (Std.Tactic.RCases.rcasesPatLo\n                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])\n                       [])]\n                     \"⟩\")])\n                  [])])\n               []\n               (Tactic.exact \"exact\" (Term.anonymousCtor \"⟨\" [`r₃ \",\" `rfl] \"⟩\"))]))))])\n        []))\n      []\n      []))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValEqns', expected 'Lean.Parser.Command.declValSimple'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Tactic.injection \"injection\" `e [\"with\" [\"_\" `e']])\n          \";\"\n          (Tactic.subst \"subst\" [`b])\n          []\n          (Std.Tactic.rcases\n           \"rcases\"\n           [(Tactic.casesTarget\n             []\n             (Term.app\n              `prefix_of_prefix_length_le\n              [(Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `rfl] \"⟩\")\n               (Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `e'] \"⟩\")\n               (Term.app `le_of_succ_le_succ [`ll])]))]\n           [\"with\"\n            (Std.Tactic.RCases.rcasesPatLo\n             (Std.Tactic.RCases.rcasesPatMed\n              [(Std.Tactic.RCases.rcasesPat.tuple\n                \"⟨\"\n                [(Std.Tactic.RCases.rcasesPatLo\n                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r₃)])\n                  [])\n                 \",\"\n                 (Std.Tactic.RCases.rcasesPatLo\n                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])\n                  [])]\n                \"⟩\")])\n             [])])\n          []\n          (Tactic.exact \"exact\" (Term.anonymousCtor \"⟨\" [`r₃ \",\" `rfl] \"⟩\"))])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.exact \"exact\" (Term.anonymousCtor \"⟨\" [`r₃ \",\" `rfl] \"⟩\"))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.anonymousCtor \"⟨\" [`r₃ \",\" `rfl] \"⟩\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `rfl\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `r₃\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Std.Tactic.rcases\n       \"rcases\"\n       [(Tactic.casesTarget\n         []\n         (Term.app\n          `prefix_of_prefix_length_le\n          [(Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `rfl] \"⟩\")\n           (Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `e'] \"⟩\")\n           (Term.app `le_of_succ_le_succ [`ll])]))]\n       [\"with\"\n        (Std.Tactic.RCases.rcasesPatLo\n         (Std.Tactic.RCases.rcasesPatMed\n          [(Std.Tactic.RCases.rcasesPat.tuple\n            \"⟨\"\n            [(Std.Tactic.RCases.rcasesPatLo (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r₃)]) [])\n             \",\"\n             (Std.Tactic.RCases.rcasesPatLo\n              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])\n              [])]\n            \"⟩\")])\n         [])])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app\n       `prefix_of_prefix_length_le\n       [(Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `rfl] \"⟩\")\n        (Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `e'] \"⟩\")\n        (Term.app `le_of_succ_le_succ [`ll])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `le_of_succ_le_succ [`ll])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `ll\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `le_of_succ_le_succ\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `le_of_succ_le_succ [`ll]) \")\")\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      (Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `e'] \"⟩\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `e'\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))\n      (Term.anonymousCtor \"⟨\" [(Term.hole \"_\") \",\" `rfl] \"⟩\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `rfl\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `prefix_of_prefix_length_le\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.subst \"subst\" [`b])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `b\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.injection \"injection\" `e [\"with\" [\"_\" `e']])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '_', expected 'ident'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '_', expected 'Lean.Parser.Term.hole'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValEqns', expected 'Lean.Parser.Command.whereStructInst'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception\ntheorem\n  prefix_of_prefix_length_le\n  : ∀ { l₁ l₂ l₃ : list α } , «expr <+: » l₁ l₃ → «expr <+: » l₂ l₃ → length l₁ ≤ length l₂ → «expr <+: » l₁ l₂\n  | [ ] , l₂ , l₃ , h₁ , h₂ , _ => nil_prefix _\n    |\n      a :: l₁ , b :: l₂ , _ , ⟨ r₁ , rfl ⟩ , ⟨ r₂ , e ⟩ , ll\n      =>\n      by\n        injection e with _ e'\n          ;\n          subst b\n          rcases prefix_of_prefix_length_le ⟨ _ , rfl ⟩ ⟨ _ , e' ⟩ le_of_succ_le_succ ll with ⟨ r₃ , rfl ⟩\n          exact ⟨ r₃ , rfl ⟩\n#align prefix_of_prefix_length_le prefix_of_prefix_length_le\n\n",
 "prefix_nil_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n@[simp]\ntheorem prefix_nil_iff : «expr <+: » l [] ↔ l = [] :=\n  ⟨fun h => eq_nil_of_infix_nil h.is_infix, fun h => h ▸ prefix_rfl⟩\n#align prefix_nil_iff prefix_nil_iff\n\n",
 "prefix_iff_eq_take":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_iff_eq_take : «expr <+: » l₁ l₂ ↔ l₁ = take (length l₁) l₂ :=\n  ⟨fun h => append_right_cancel <| (prefix_iff_eq_append.1 h).trans (take_append_drop _ _).symm, fun e =>\n    e.symm ▸ take_prefix _ _⟩\n#align prefix_iff_eq_take prefix_iff_eq_take\n\n",
 "prefix_iff_eq_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_iff_eq_append : «expr <+: » l₁ l₂ ↔ l₁ ++ drop (length l₁) l₂ = l₂ :=\n  ⟨by rintro ⟨r, rfl⟩ <;> rw [drop_left], fun e => ⟨_, e⟩⟩\n#align prefix_iff_eq_append prefix_iff_eq_append\n\n",
 "prefix_cons_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_cons_inj (a) : «expr <+: » (a :: l₁) (a :: l₂) ↔ «expr <+: » l₁ l₂ :=\n  prefix_append_right_inj [a]\n#align prefix_cons_inj prefix_cons_inj\n\n",
 "prefix_concat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_concat (a : α) (l) : «expr <+: » l (concat l a) := by simp\n#align prefix_concat prefix_concat\n\n",
 "prefix_append_right_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem prefix_append_right_inj (l) : «expr <+: » (l ++ l₁) (l ++ l₂) ↔ «expr <+: » l₁ l₂ :=\n  exists_congr fun r => by rw [append_assoc, append_right_inj]\n#align prefix_append_right_inj prefix_append_right_inj\n\n",
 "prefix_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem prefix_append (l₁ l₂ : list α) : «expr <+: » l₁ (l₁ ++ l₂) :=\n  ⟨l₂, rfl⟩\n#align prefix_append prefix_append\n\n",
 "nth_le_tails":
 "@[simp]\ntheorem nth_le_tails (l : list α) (n : ℕ) (hn : n < length (tails l)) : nthLe (tails l) n hn = l.drop n :=\n  by\n  induction' l with x l IH generalizing n\n  · simp\n  · cases n\n    · simp\n    · simpa using IH n _\n#align nth_le_tails nth_le_tails\n\n",
 "nth_le_inits":
 "@[simp]\ntheorem nth_le_inits (l : list α) (n : ℕ) (hn : n < length (inits l)) : nthLe (inits l) n hn = l.take n :=\n  by\n  induction' l with x l IH generalizing n\n  · simp\n  · cases n\n    · simp\n    · simpa using IH n _\n#align nth_le_inits nth_le_inits\n\n",
 "nil_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem nil_suffix (l : list α) : «expr <:+ » [] l :=\n  ⟨l, append_nil _⟩\n#align nil_suffix nil_suffix\n\n",
 "nil_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem nil_prefix (l : list α) : «expr <+: » [] l :=\n  ⟨l, rfl⟩\n#align nil_prefix nil_prefix\n\n",
 "nil_infix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem nil_infix (l : list α) : «expr <:+: » [] l :=\n  (nil_prefix _).is_infix\n#align nil_infix nil_infix\n\n",
 "mem_tails":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n@[simp]\ntheorem mem_tails : ∀ s t : list α, s ∈ tails t ↔ «expr <:+ » s t\n  | s, [] => by\n    simp only [tails, mem_singleton] <;> exact ⟨fun h => by rw [h] <;> exact suffix_refl [], eq_nil_of_suffix_nil⟩\n  | s, a :: t => by\n    simp only [tails, mem_cons_iff, mem_tails s t] <;>\n      exact\n        show s = a :: t ∨ «expr <:+ » s t ↔ «expr <:+ » s (a :: t) from\n          ⟨fun o =>\n            match s, t, o with\n            | _, t, or.inl rfl => suffix_rfl\n            | s, _, or.inr ⟨l, rfl⟩ => ⟨a :: l, rfl⟩,\n            fun e =>\n            match s, t, e with\n            | _, t, ⟨[], rfl⟩ => or.inl rfl\n            | s, t, ⟨b :: l, he⟩ => list.no_confusion he fun ab lt => or.inr ⟨l, lt⟩⟩\n#align mem_tails mem_tails\n\n",
 "mem_of_mem_take":
 "theorem mem_of_mem_take (h : a ∈ l.take n) : a ∈ l :=\n  take_subset n l h\n#align mem_of_mem_take mem_of_mem_take\n\n",
 "mem_of_mem_tail":
 "theorem mem_of_mem_tail (h : a ∈ l.tail) : a ∈ l :=\n  tail_subset l h\n#align mem_of_mem_tail mem_of_mem_tail\n\n",
 "mem_of_mem_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem mem_of_mem_suffix (hx : a ∈ l₁) (hl : «expr <:+ » l₁ l₂) : a ∈ l₂ :=\n  hl.subset hx\n#align mem_of_mem_suffix mem_of_mem_suffix\n\n",
 "mem_of_mem_slice":
 "theorem mem_of_mem_slice {n m : ℕ} {l : list α} {a : α} (h : a ∈ l.slice n m) : a ∈ l :=\n  slice_subset n m l h\n#align mem_of_mem_slice mem_of_mem_slice\n\n",
 "mem_of_mem_init":
 "theorem mem_of_mem_init (h : a ∈ l.init) : a ∈ l :=\n  dropLast_subset l h\n#align mem_of_mem_init mem_of_mem_init\n\n",
 "mem_of_mem_drop":
 "theorem mem_of_mem_drop (h : a ∈ l.drop n) : a ∈ l :=\n  drop_subset n l h\n#align mem_of_mem_drop mem_of_mem_drop\n\n",
 "mem_insert_self":
 "@[simp]\ntheorem mem_insert_self (a : α) (l : list α) : a ∈ l.insert a :=\n  mem_insert_iff.2 <| or.inl rfl\n#align mem_insert_self mem_insert_self\n\n",
 "mem_insert_of_mem":
 "theorem mem_insert_of_mem (h : a ∈ l) : a ∈ insert b l :=\n  mem_insert_iff.2 (or.inr h)\n#align mem_insert_of_mem mem_insert_of_mem\n\n",
 "mem_insert_iff":
 "@[simp]\ntheorem mem_insert_iff : a ∈ insert b l ↔ a = b ∨ a ∈ l :=\n  by\n  by_cases h' : b ∈ l\n  · simp only [insert_of_mem h']\n    apply (or_iff_right_of_imp _).symm\n    exact fun e => e.symm ▸ h'\n  · simp only [insert_of_not_mem h', mem_cons_iff]\n#align mem_insert_iff mem_insert_iff\n\n",
 "mem_inits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n@[simp]\ntheorem mem_inits : ∀ s t : list α, s ∈ inits t ↔ «expr <+: » s t\n  | s, [] =>\n    suffices s = nil ↔ «expr <+: » s nil by simpa only [inits, mem_singleton]\n    ⟨fun h => h.symm ▸ prefix_refl [], eq_nil_of_prefix_nil⟩\n  | s, a :: t =>\n    suffices (s = nil ∨ ∃ l ∈ inits t, a :: l = s) ↔ «expr <+: » s (a :: t) by simpa\n    ⟨fun o =>\n      match s, o with\n      | _, or.inl rfl => ⟨_, rfl⟩\n      | s, or.inr ⟨r, hr, hs⟩ => by\n        let ⟨s, ht⟩ := (mem_inits _ _).1 hr\n        rw [← hs, ← ht] <;> exact ⟨s, rfl⟩,\n      fun mi =>\n      match s, mi with\n      | [], ⟨_, rfl⟩ => or.inl rfl\n      | b :: s, ⟨r, hr⟩ =>\n        list.no_confusion hr fun ba (st : s ++ r = t) =>\n          or.inr <| by rw [ba] <;> exact ⟨_, (mem_inits _ _).2 ⟨_, st⟩, rfl⟩⟩\n#align mem_inits mem_inits\n\n",
 "map_reverse_tails":
 "theorem map_reverse_tails (l : list α) : map reverse l.tails = (reverse <| inits <| reverse l) :=\n  by\n  rw [tails_eq_inits l]\n  simp [reverse_involutive.comp_self]\n#align map_reverse_tails map_reverse_tails\n\n",
 "map_reverse_inits":
 "theorem map_reverse_inits (l : list α) : map reverse l.inits = (reverse <| tails <| reverse l) :=\n  by\n  rw [inits_eq_tails l]\n  simp [reverse_involutive.comp_self]\n#align map_reverse_inits map_reverse_inits\n\n",
 "map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem is_prefix.map (h : «expr <+: » l₁ l₂) (f : α → β) : «expr <+: » (l₁.map f) (l₂.map f) :=\n  by\n  induction' l₁ with hd tl hl generalizing l₂\n  · simp only [nil_prefix, map_nil]\n  · cases' l₂ with hd₂ tl₂\n    · simpa only using eq_nil_of_prefix_nil h\n    · rw [cons_prefix_iff] at h\n      simp only [h, prefix_cons_inj, hl, map]\n#align is_prefix.map is_prefix.map\n\n",
 "length_tails":
 "@[simp]\ntheorem length_tails (l : list α) : length (tails l) = length l + 1 :=\n  by\n  induction' l with x l IH\n  · simp\n  · simpa using IH\n#align length_tails length_tails\n\n",
 "length_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem is_suffix.length_le (h : «expr <:+ » l₁ l₂) : l₁.length ≤ l₂.length :=\n  h.sublist.length_le\n#align is_suffix.length_le is_suffix.length_le\n\n",
 "length_insert_of_not_mem":
 "@[simp]\ntheorem length_insert_of_not_mem (h : a ∉ l) : (insert a l).length = l.length + 1 :=\n  congr_arg _ <| insert_of_not_mem h\n#align length_insert_of_not_mem length_insert_of_not_mem\n\n",
 "length_insert_of_mem":
 "@[simp]\ntheorem length_insert_of_mem (h : a ∈ l) : (insert a l).length = l.length :=\n  congr_arg _ <| insert_of_mem h\n#align length_insert_of_mem length_insert_of_mem\n\n",
 "length_inits":
 "@[simp]\ntheorem length_inits (l : list α) : length (inits l) = length l + 1 := by simp [inits_eq_tails]\n#align length_inits length_inits\n\n",
 "is_infix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem is_suffix.is_infix : «expr <:+ » l₁ l₂ → «expr <:+: » l₁ l₂ := fun ⟨t, h⟩ => ⟨t, [], by rw [h, append_nil]⟩\n#align is_suffix.is_infix is_suffix.is_infix\n\n",
 "insert_of_not_mem":
 "@[simp]\ntheorem insert_of_not_mem (h : a ∉ l) : insert a l = a :: l := by\n  simp only [insert.def, if_neg h] <;> constructor <;> rfl\n#align insert_of_not_mem insert_of_not_mem\n\n",
 "insert_of_mem":
 "@[simp]\ntheorem insert_of_mem (h : a ∈ l) : insert a l = l := by simp only [insert.def, if_pos h]\n#align insert_of_mem insert_of_mem\n\n",
 "insert_nil":
 "@[simp]\ntheorem insert_nil (a : α) : insert a nil = [a] :=\n  rfl\n#align insert_nil insert_nil\n\n",
 "inits_reverse":
 "theorem inits_reverse (l : list α) : inits (reverse l) = reverse (map reverse l.tails) :=\n  by\n  rw [tails_eq_inits l]\n  simp [reverse_involutive.comp_self]\n#align inits_reverse inits_reverse\n\n",
 "inits_eq_tails":
 "-- the lemma names `inits_eq_tails` and `tails_eq_inits` are like `sublists_eq_sublists'`\ntheorem inits_eq_tails : ∀ l : list α, l.inits = (reverse <| map reverse <| tails <| reverse l)\n  | [] => by simp\n  | a :: l => by simp [inits_eq_tails l, map_eq_map_iff]\n#align inits_eq_tails inits_eq_tails\n\n",
 "inits_cons":
 "theorem inits_cons (a : α) (l : list α) : inits (a :: l) = [] :: l.inits.map fun t => a :: t := by simp\n#align inits_cons inits_cons\n\n",
 "inits_append":
 "@[simp]\ntheorem inits_append : ∀ s t : list α, inits (s ++ t) = s.inits ++ t.inits.tail.map fun l => s ++ l\n  | [], [] => by simp\n  | [], a :: t => by simp\n  | a :: s, t => by simp [inits_append s t]\n#align inits_append inits_append\n\n",
 "init_subset":
 "theorem init_subset (l : list α) : l.init ⊆ l :=\n  (dropLast_sublist l).subset\n#align init_subset init_subset\n\n",
 "init_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem init_sublist (l : list α) : «expr <+ » l.init l :=\n  (dropLast_prefix l).sublist\n#align init_sublist init_sublist\n\n",
 "init_prefix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem init_prefix : ∀ l : list α, «expr <+: » l.init l\n  | [] => ⟨nil, by rw [init, list.append_nil]⟩\n  | a :: l => ⟨_, dropLast_append_getLast (cons_ne_nil a l)⟩\n#align init_prefix init_prefix\n\n",
 "infix_rfl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_rfl : «expr <:+: » l l :=\n  infix_refl _\n#align infix_rfl infix_rfl\n\n",
 "infix_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n@[refl]\ntheorem infix_refl (l : list α) : «expr <:+: » l l :=\n  (prefix_refl l).is_infix\n#align infix_refl infix_refl\n\n",
 "infix_of_mem_join":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_of_mem_join : ∀ {L : list (list α)}, l ∈ L → «expr <:+: » l (join L)\n  | _ :: L, or.inl rfl => infix_append [] _ _\n  | l' :: L, or.inr h => isInfix.trans (infix_of_mem_join h) <| (suffix_append _ _).is_infix\n#align infix_of_mem_join infix_of_mem_join\n\n",
 "infix_nil_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n@[simp]\ntheorem infix_nil_iff : «expr <:+: » l [] ↔ l = [] :=\n  ⟨fun h => eq_nil_of_sublist_nil h.sublist, fun h => h ▸ infix_rfl⟩\n#align infix_nil_iff infix_nil_iff\n\n",
 "infix_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_insert (a : α) (l : list α) : «expr <:+: » l (insert a l) :=\n  (suffix_insert a l).is_infix\n#align infix_insert infix_insert\n\n",
 "infix_iff_prefix_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem infix_iff_prefix_suffix (l₁ l₂ : list α) : «expr <:+: » l₁ l₂ ↔ ∃ t, «expr <+: » l₁ t ∧ «expr <:+ » t l₂ :=\n  ⟨fun ⟨s, t, e⟩ => ⟨l₁ ++ t, ⟨_, rfl⟩, by rw [← e, append_assoc] <;> exact ⟨_, rfl⟩⟩, fun ⟨_, ⟨t, rfl⟩, s, e⟩ =>\n    ⟨s, t, by rw [append_assoc] <;> exact e⟩⟩\n#align infix_iff_prefix_suffix infix_iff_prefix_suffix\n\n",
 "infix_cons_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_cons_iff : «expr <:+: » l₁ (a :: l₂) ↔ «expr <+: » l₁ (a :: l₂) ∨ «expr <:+: » l₁ l₂ :=\n  by\n  constructor\n  · rintro ⟨⟨hd, tl⟩, t, hl₃⟩\n    · exact or.inl ⟨t, hl₃⟩\n    · simp only [cons_append] at hl₃\n      exact or.inr ⟨_, t, hl₃.2⟩\n  · rintro (h | hl₁)\n    · exact h.is_infix\n    · exact infix_cons hl₁\n#align infix_cons_iff infix_cons_iff\n\n",
 "infix_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_cons : «expr <:+: » l₁ l₂ → «expr <:+: » l₁ (a :: l₂) := fun ⟨L₁, L₂, h⟩ => ⟨a :: L₁, L₂, h ▸ rfl⟩\n#align infix_cons infix_cons\n\n",
 "infix_concat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_concat : «expr <:+: » l₁ l₂ → «expr <:+: » l₁ (concat l₂ a) := fun ⟨L₁, L₂, h⟩ =>\n  ⟨L₁, concat L₂ a, by simp_rw [← h, concat_eq_append, append_assoc]⟩\n#align infix_concat infix_concat\n\n",
 "infix_append'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n@[simp]\ntheorem infix_append' (l₁ l₂ l₃ : list α) : «expr <:+: » l₂ (l₁ ++ (l₂ ++ l₃)) := by\n  rw [← list.append_assoc] <;> apply infix_append\n#align infix_append' infix_append'\n\n",
 "infix_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem infix_append (l₁ l₂ l₃ : list α) : «expr <:+: » l₂ (l₁ ++ l₂ ++ l₃) :=\n  ⟨l₁, l₃, rfl⟩\n#align infix_append infix_append\n\n",
 "filter_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem is_prefix.filter_map (h : «expr <+: » l₁ l₂) (f : α → option β) :\n    «expr <+: » (l₁.filter_map f) (l₂.filter_map f) :=\n  by\n  induction' l₁ with hd₁ tl₁ hl generalizing l₂\n  · simp only [nil_prefix, filter_map_nil]\n  · cases' l₂ with hd₂ tl₂\n    · simpa only using eq_nil_of_prefix_nil h\n    · rw [cons_prefix_iff] at h\n      rw [← @singleton_append _ hd₁ _, ← @singleton_append _ hd₂ _, filter_map_append, filter_map_append, h.left,\n        prefix_append_right_inj]\n      exact hl h.right\n#align is_prefix.filter_map is_prefix.filter_map\n\n",
 "filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem is_infix.filter (p : α → Prop) [decidable_pred p] ⦃l₁ l₂ : list α⦄ (h : «expr <:+: » l₁ l₂) :\n    «expr <:+: » (l₁.filter p) (l₂.filter p) :=\n  by\n  obtain ⟨xs, ys, rfl⟩ := h\n  rw [filter_append, filter_append]\n  exact infix_append _ _ _\n#align is_infix.filter is_infix.filter\n\n",
 "eq_or_mem_of_mem_insert":
 "theorem eq_or_mem_of_mem_insert (h : a ∈ insert b l) : a = b ∨ a ∈ l :=\n  mem_insert_iff.1 h\n#align eq_or_mem_of_mem_insert eq_or_mem_of_mem_insert\n\n",
 "eq_of_suffix_of_length_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem eq_of_suffix_of_length_eq (h : «expr <:+ » l₁ l₂) : l₁.length = l₂.length → l₁ = l₂ :=\n  h.sublist.eq_of_length\n#align eq_of_suffix_of_length_eq eq_of_suffix_of_length_eq\n\n",
 "eq_of_prefix_of_length_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem eq_of_prefix_of_length_eq (h : «expr <+: » l₁ l₂) : l₁.length = l₂.length → l₁ = l₂ :=\n  h.sublist.eq_of_length\n#align eq_of_prefix_of_length_eq eq_of_prefix_of_length_eq\n\n",
 "eq_of_infix_of_length_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem eq_of_infix_of_length_eq (h : «expr <:+: » l₁ l₂) : l₁.length = l₂.length → l₁ = l₂ :=\n  h.sublist.eq_of_length\n#align eq_of_infix_of_length_eq eq_of_infix_of_length_eq\n\n",
 "eq_nil_of_infix_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+: » -/\ntheorem eq_nil_of_infix_nil (h : «expr <:+: » l []) : l = [] :=\n  eq_nil_of_sublist_nil h.sublist\n#align eq_nil_of_infix_nil eq_nil_of_infix_nil\n\n",
 "drop_while_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem drop_while_suffix (p : α → Prop) [decidable_pred p] : «expr <:+ » (l.drop_while p) l :=\n  ⟨l.take_while p, takeWhile_append_drop p l⟩\n#align drop_while_suffix drop_while_suffix\n\n",
 "drop_suffix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem drop_suffix (n) (l : list α) : «expr <:+ » (drop n l) l :=\n  ⟨_, take_append_drop _ _⟩\n#align drop_suffix drop_suffix\n\n",
 "drop_subset":
 "theorem drop_subset (n) (l : list α) : drop n l ⊆ l :=\n  (drop_sublist n l).subset\n#align drop_subset drop_subset\n\n",
 "drop_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem drop_sublist (n) (l : list α) : «expr <+ » (drop n l) l :=\n  (drop_suffix n l).sublist\n#align drop_sublist drop_sublist\n\n",
 "def":
 "theorem insert.def (a : α) (l : list α) : insert a l = if a ∈ l then l else a :: l :=\n  rfl\n#align insert.def insert.def\n\n",
 "cons_prefix_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+: » -/\ntheorem cons_prefix_iff : «expr <+: » (a :: l₁) (b :: l₂) ↔ a = b ∧ «expr <+: » l₁ l₂ :=\n  by\n  constructor\n  · rintro ⟨L, hL⟩\n    simp only [cons_append] at hL\n    exact ⟨hL.left, ⟨L, hL.right⟩⟩\n  · rintro ⟨rfl, h⟩\n    rwa [prefix_cons_inj]\n#align cons_prefix_iff cons_prefix_iff\n\n"}