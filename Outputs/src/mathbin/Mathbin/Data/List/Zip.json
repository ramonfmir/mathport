{"zip_with_zip_with_right":
 "theorem zip_with_zip_with_right (f : α → δ → ε) (g : β → γ → δ) :\n    ∀ (la : List α) (lb : List β) (lc : List γ),\n      zip_with f la (zip_with g lb lc) = zipWith3 (fun a b c => f a (g b c)) la lb lc\n  | [], _, _ => rfl\n  | a :: as, [], _ => rfl\n  | a :: as, b :: bs, [] => rfl\n  | a :: as, b :: bs, c :: cs => congr_arg (cons _) <| zip_with_zip_with_right as bs cs\n#align zip_with_zip_with_right zip_with_zip_with_right\n\n",
 "zip_with_zip_with_left":
 "theorem zip_with_zip_with_left (f : δ → γ → ε) (g : α → β → δ) :\n    ∀ (la : List α) (lb : List β) (lc : List γ),\n      zip_with f (zip_with g la lb) lc = zipWith3 (fun a b c => f (g a b) c) la lb lc\n  | [], _, _ => rfl\n  | a :: as, [], _ => rfl\n  | a :: as, b :: bs, [] => rfl\n  | a :: as, b :: bs, c :: cs => congr_arg (cons _) <| zip_with_zip_with_left as bs cs\n#align zip_with_zip_with_left zip_with_zip_with_left\n\n",
 "zip_with_same":
 "@[simp]\ntheorem zip_with_same (f : α → α → δ) : ∀ l : List α, zip_with f l l = l.map fun a => f a a\n  | [] => rfl\n  | x :: xs => congr_arg _ (zip_with_same xs)\n#align zip_with_same zip_with_same\n\n",
 "zip_with_nil_right":
 "@[simp]\ntheorem zip_with_nil_right (f : α → β → γ) (l) : zip_with f l [] = [] := by cases l <;> rfl\n#align zip_with_nil_right zip_with_nil_right\n\n",
 "zip_with_nil_left":
 "@[simp]\ntheorem zip_with_nil_left (f : α → β → γ) (l) : zip_with f [] l = [] :=\n  rfl\n#align zip_with_nil_left zip_with_nil_left\n\n",
 "zip_with_map_right":
 "theorem zip_with_map_right (f : α → β → γ) (l : List α) (g : δ → β) (l' : List δ) :\n    zip_with f l (l'.map g) = zip_with (fun x => f x ∘ g) l l' :=\n  by\n  convert List.zipWith_map f id g l l'\n  exact Eq.symm (list.map_id _)\n#align zip_with_map_right zip_with_map_right\n\n",
 "zip_with_map_left":
 "theorem zip_with_map_left (f : α → β → γ) (g : δ → α) (l : List δ) (l' : List β) :\n    zip_with f (l.map g) l' = zip_with (f ∘ g) l l' :=\n  by\n  convert zip_with_map f g id l l'\n  exact Eq.symm (list.map_id _)\n#align zip_with_map_left zip_with_map_left\n\n",
 "zip_with_map":
 "@[simp]\ntheorem zip_with_map {μ} (f : γ → δ → μ) (g : α → γ) (h : β → δ) (as : List α) (bs : List β) :\n    zip_with f (as.map g) (bs.map h) = zip_with (fun a b => f (g a) (h b)) as bs :=\n  by\n  induction as generalizing bs\n  · simp\n  · cases bs <;> simp [*]\n#align zip_with_map zip_with_map\n\n",
 "zip_with_eq_nil_iff":
 "@[simp]\ntheorem zip_with_eq_nil_iff {f : α → β → γ} {l l'} : zip_with f l l' = [] ↔ l = [] ∨ l' = [] := by\n  cases l <;> cases l' <;> simp\n#align zip_with_eq_nil_iff zip_with_eq_nil_iff\n\n",
 "zip_with_distrib_take":
 "theorem zip_with_distrib_take : (zip_with f l l').take n = zip_with f (l.take n) (l'.take n) :=\n  by\n  induction' l with hd tl hl generalizing l' n\n  · simp\n  · cases l'\n    · simp\n    · cases n\n      · simp\n      · simp [hl]\n#align zip_with_distrib_take zip_with_distrib_take\n\n",
 "zip_with_distrib_tail":
 "theorem zip_with_distrib_tail : (zip_with f l l').tail = zip_with f l.tail l'.tail := by\n  simp_rw [← drop_one, zip_with_distrib_drop]\n#align zip_with_distrib_tail zip_with_distrib_tail\n\n",
 "zip_with_distrib_reverse":
 "theorem zip_with_distrib_reverse (h : l.length = l'.length) :\n    (zip_with f l l').reverse = zip_with f l.reverse l'.reverse :=\n  by\n  induction' l with hd tl hl generalizing l'\n  · simp\n  · cases' l' with hd' tl'\n    · simp\n    · simp only [add_left_inj, length] at h\n      have : tl.reverse.length = tl'.reverse.length := by simp [h]\n      simp [hl _ h, zip_with_append _ _ _ _ _ this]\n#align zip_with_distrib_reverse zip_with_distrib_reverse\n\n",
 "zip_with_distrib_drop":
 "theorem zip_with_distrib_drop : (zip_with f l l').drop n = zip_with f (l.drop n) (l'.drop n) :=\n  by\n  induction' l with hd tl hl generalizing l' n\n  · simp\n  · cases l'\n    · simp\n    · cases n\n      · simp\n      · simp [hl]\n#align zip_with_distrib_drop zip_with_distrib_drop\n\n",
 "zip_with_cons_cons":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Kenny Lau\n-/\n@[simp]\ntheorem zip_with_cons_cons (f : α → β → γ) (a : α) (b : β) (l₁ : List α) (l₂ : List β) :\n    zip_with f (a :: l₁) (b :: l₂) = f a b :: zip_with f l₁ l₂ :=\n  rfl\n#align zip_with_cons_cons zip_with_cons_cons\n\n",
 "zip_with_congr":
 "@[congr]\ntheorem zip_with_congr (f g : α → β → γ) (la : List α) (lb : List β)\n    (h : List.Forall₂ (fun a b => f a b = g a b) la lb) : zip_with f la lb = zip_with g la lb :=\n  by\n  induction' h with a b as bs hfg habs ih\n  · rfl\n  · exact congr_arg₂ _ hfg ih\n#align zip_with_congr zip_with_congr\n\n",
 "zip_with_comm_of_comm":
 "theorem zip_with_comm_of_comm (f : α → α → β) (comm : ∀ x y : α, f x y = f y x) (l l' : List α) :\n    zip_with f l l' = zip_with f l' l := by\n  rw [zip_with_comm]\n  simp only [comm]\n#align zip_with_comm_of_comm zip_with_comm_of_comm\n\n",
 "zip_with_comm":
 "theorem zip_with_comm (f : α → β → γ) :\n    ∀ (la : List α) (lb : List β), zip_with f la lb = zip_with (fun b a => f a b) lb la\n  | [], _ => (List.zipWith_nil_right _ _).symm\n  | a :: as, [] => rfl\n  | a :: as, b :: bs => congr_arg _ (zip_with_comm as bs)\n#align zip_with_comm zip_with_comm\n\n",
 "zip_with_append":
 "theorem zip_with_append (f : α → β → γ) (l la : List α) (l' lb : List β) (h : l.length = l'.length) :\n    zip_with f (l ++ la) (l' ++ lb) = zip_with f l l' ++ zip_with f la lb :=\n  by\n  induction' l with hd tl hl generalizing l'\n  · have : l' = [] := eq_nil_of_length_eq_zero (by simpa using h.symm)\n    simp [this]\n  · cases l'\n    · simpa using h\n    · simp only [add_left_inj, length] at h\n      simp [hl _ h]\n#align zip_with_append zip_with_append\n\n",
 "zip_with3_same_right":
 "@[simp]\ntheorem zip_with3_same_right (f : α → β → β → γ) :\n    ∀ (la : List α) (lb : List β), zipWith3 f la lb lb = zip_with (fun a b => f a b b) la lb\n  | [], _ => rfl\n  | a :: as, [] => rfl\n  | a :: as, b :: bs => congr_arg (cons _) <| zip_with3_same_right as bs\n#align zip_with3_same_right zip_with3_same_right\n\n",
 "zip_with3_same_mid":
 "@[simp]\ntheorem zip_with3_same_mid (f : α → β → α → γ) :\n    ∀ (la : List α) (lb : List β), zipWith3 f la lb la = zip_with (fun a b => f a b a) la lb\n  | [], _ => rfl\n  | a :: as, [] => rfl\n  | a :: as, b :: bs => congr_arg (cons _) <| zip_with3_same_mid as bs\n#align zip_with3_same_mid zip_with3_same_mid\n\n",
 "zip_with3_same_left":
 "@[simp]\ntheorem zip_with3_same_left (f : α → α → β → γ) :\n    ∀ (la : List α) (lb : List β), zipWith3 f la la lb = zip_with (fun a b => f a a b) la lb\n  | [], _ => rfl\n  | a :: as, [] => rfl\n  | a :: as, b :: bs => congr_arg (cons _) <| zip_with3_same_left as bs\n#align zip_with3_same_left zip_with3_same_left\n\n",
 "zip_unzip":
 "theorem zip_unzip : ∀ l : List (α × β), zip (unzip l).1 (unzip l).2 = l\n  | [] => rfl\n  | (a, b) :: l => by simp only [unzip_cons, zip_cons_cons, zip_unzip l] <;> constructor <;> rfl\n#align zip_unzip zip_unzip\n\n",
 "zip_swap":
 "@[simp]\ntheorem zip_swap : ∀ (l₁ : List α) (l₂ : List β), (zip l₁ l₂).map Prod.swap = zip l₂ l₁\n  | [], l₂ => (zip_nil_right _).symm\n  | l₁, [] => by rw [zip_nil_right] <;> rfl\n  | a :: l₁, b :: l₂ => by\n    simp only [zip_cons_cons, map_cons, zip_swap l₁ l₂, Prod.swap_prod_mk] <;> constructor <;> rfl\n#align zip_swap zip_swap\n\n",
 "zip_of_prod":
 "theorem zip_of_prod {l : List α} {l' : List β} {lp : List (α × β)} (hl : lp.map Prod.fst = l)\n    (hr : lp.map Prod.snd = l') : lp = l.zip l' := by\n  rw [← hl, ← hr, ← zip_unzip lp, ← unzip_left, ← unzip_right, zip_unzip, zip_unzip]\n#align zip_of_prod zip_of_prod\n\n",
 "zip_nil_right":
 "@[simp]\ntheorem zip_nil_right (l : List α) : zip l ([] : List β) = [] :=\n  zipWith_nil_right _ l\n#align zip_nil_right zip_nil_right\n\n",
 "zip_nil_left":
 "@[simp]\ntheorem zip_nil_left (l : List α) : zip ([] : List β) l = [] :=\n  rfl\n#align zip_nil_left zip_nil_left\n\n",
 "zip_map_right":
 "theorem zip_map_right (f : β → γ) (l₁ : List α) (l₂ : List β) : zip l₁ (l₂.map f) = (zip l₁ l₂).map (prod.map id f) :=\n  by rw [← zip_map, map_id]\n#align zip_map_right zip_map_right\n\n",
 "zip_map_left":
 "theorem zip_map_left (f : α → γ) (l₁ : List α) (l₂ : List β) : zip (l₁.map f) l₂ = (zip l₁ l₂).map (prod.map f id) := by\n  rw [← zip_map, map_id]\n#align zip_map_left zip_map_left\n\n",
 "zip_map'":
 "theorem zip_map' (f : α → β) (g : α → γ) : ∀ l : List α, zip (l.map f) (l.map g) = l.map fun a => (f a, g a)\n  | [] => rfl\n  | a :: l => by simp only [map, zip_cons_cons, zip_map' l] <;> constructor <;> rfl\n#align zip_map' zip_map'\n\n",
 "zip_map":
 "theorem zip_map (f : α → γ) (g : β → δ) :\n    ∀ (l₁ : List α) (l₂ : List β), zip (l₁.map f) (l₂.map g) = (zip l₁ l₂).map (prod.map f g)\n  | [], l₂ => rfl\n  | l₁, [] => by simp only [map, zip_nil_right]\n  | a :: l₁, b :: l₂ => by simp only [map, zip_cons_cons, zip_map l₁ l₂, prod.map] <;> constructor <;> rfl\n#align zip_map zip_map\n\n",
 "zip_cons_cons":
 "@[simp]\ntheorem zip_cons_cons (a : α) (b : β) (l₁ : List α) (l₂ : List β) : zip (a :: l₁) (b :: l₂) = (a, b) :: zip l₁ l₂ :=\n  rfl\n#align zip_cons_cons zip_cons_cons\n\n",
 "zip_append":
 "theorem zip_append :\n    ∀ {l₁ r₁ : List α} {l₂ r₂ : List β} (h : length l₁ = length l₂), zip (l₁ ++ r₁) (l₂ ++ r₂) = zip l₁ l₂ ++ zip r₁ r₂\n  | [], r₁, l₂, r₂, h => by simp only [eq_nil_of_length_eq_zero h.symm] <;> rfl\n  | l₁, r₁, [], r₂, h => by simp only [eq_nil_of_length_eq_zero h] <;> rfl\n  | a :: l₁, r₁, b :: l₂, r₂, h => by\n    simp only [cons_append, zip_cons_cons, zip_append (succ.inj h)] <;> constructor <;> rfl\n#align zip_append zip_append\n\n",
 "unzip_zip_right":
 "theorem unzip_zip_right {l₁ : List α} {l₂ : List β} (h : length l₂ ≤ length l₁) : (unzip (zip l₁ l₂)).2 = l₂ := by\n  rw [← zip_swap, unzip_swap] <;> exact unzip_zip_left h\n#align unzip_zip_right unzip_zip_right\n\n",
 "unzip_zip_left":
 "theorem unzip_zip_left : ∀ {l₁ : List α} {l₂ : List β}, length l₁ ≤ length l₂ → (unzip (zip l₁ l₂)).1 = l₁\n  | [], l₂, h => rfl\n  | l₁, [], h => by rw [eq_nil_of_length_eq_zero (nat.eq_zero_of_le_zero h)] <;> rfl\n  | a :: l₁, b :: l₂, h => by\n    simp only [zip_cons_cons, unzip_cons, unzip_zip_left (le_of_succ_le_succ h)] <;> constructor <;> rfl\n#align unzip_zip_left unzip_zip_left\n\n",
 "unzip_zip":
 "theorem unzip_zip {l₁ : List α} {l₂ : List β} (h : length l₁ = length l₂) : unzip (zip l₁ l₂) = (l₁, l₂) := by\n  rw [← @prod.mk.eta _ _ (unzip (zip l₁ l₂)), unzip_zip_left (le_of_eq h), unzip_zip_right (ge_of_eq h)]\n#align unzip_zip unzip_zip\n\n",
 "unzip_swap":
 "theorem unzip_swap (l : List (α × β)) : unzip (l.map Prod.swap) = (unzip l).swap := by\n  simp only [unzip_eq_map, map_map] <;> constructor <;> rfl\n#align unzip_swap unzip_swap\n\n",
 "unzip_right":
 "theorem unzip_right (l : List (α × β)) : (unzip l).2 = l.map Prod.snd := by simp only [unzip_eq_map]\n#align unzip_right unzip_right\n\n",
 "unzip_revzip":
 "@[simp]\ntheorem unzip_revzip (l : List α) : (revzip l).unzip = (l, l.reverse) :=\n  unzip_zip (length_reverse l).symm\n#align unzip_revzip unzip_revzip\n\n",
 "unzip_nil":
 "@[simp]\ntheorem unzip_nil : unzip (@nil (α × β)) = ([], []) :=\n  rfl\n#align unzip_nil unzip_nil\n\n",
 "unzip_left":
 "theorem unzip_left (l : List (α × β)) : (unzip l).1 = l.map Prod.fst := by simp only [unzip_eq_map]\n#align unzip_left unzip_left\n\n",
 "unzip_eq_map":
 "theorem unzip_eq_map : ∀ l : List (α × β), unzip l = (l.map Prod.fst, l.map Prod.snd)\n  | [] => rfl\n  | (a, b) :: l => by simp only [unzip_cons, map_cons, unzip_eq_map l]\n#align unzip_eq_map unzip_eq_map\n\n",
 "unzip_cons":
 "@[simp]\ntheorem unzip_cons (a : α) (b : β) (l : List (α × β)) : unzip ((a, b) :: l) = (a :: (unzip l).1, b :: (unzip l).2) := by\n  rw [unzip] <;> cases unzip l <;> rfl\n#align unzip_cons unzip_cons\n\n",
 "sum_zip_with_distrib_left":
 "@[simp]\ntheorem sum_zip_with_distrib_left {γ : Type _} [Semiring γ] (f : α → β → γ) (n : γ) (l : List α) (l' : List β) :\n    (l.zip_with (fun x y => n * f x y) l').sum = n * (l.zip_with f l').sum :=\n  by\n  induction' l with hd tl hl generalizing f n l'\n  · simp\n  · cases' l' with hd' tl'\n    · simp\n    · simp [hl, mul_add]\n#align sum_zip_with_distrib_left sum_zip_with_distrib_left\n\n",
 "revzip_swap":
 "theorem revzip_swap (l : List α) : (revzip l).map Prod.swap = revzip l.reverse := by simp [revzip]\n#align revzip_swap revzip_swap\n\n",
 "revzip_map_snd":
 "@[simp]\ntheorem revzip_map_snd (l : List α) : (revzip l).map Prod.snd = l.reverse := by rw [← unzip_right, unzip_revzip]\n#align revzip_map_snd revzip_map_snd\n\n",
 "revzip_map_fst":
 "@[simp]\ntheorem revzip_map_fst (l : List α) : (revzip l).map Prod.fst = l := by rw [← unzip_left, unzip_revzip]\n#align revzip_map_fst revzip_map_fst\n\n",
 "reverse_revzip":
 "theorem reverse_revzip (l : List α) : reverse l.revzip = revzip l.reverse := by\n  rw [← zip_unzip.{u, u} (revzip l).reverse, unzip_eq_map] <;> simp <;> simp [revzip]\n#align reverse_revzip reverse_revzip\n\n",
 "prod_mul_prod_eq_prod_zip_with_of_length_eq":
 "@[to_additive]\ntheorem prod_mul_prod_eq_prod_zip_with_of_length_eq (L L' : List α) (h : L.length = L'.length) :\n    L.prod * L'.prod = (zip_with (· * ·) L L').prod :=\n  (prod_mul_prod_eq_prod_zipWith_mul_prod_drop L L').trans (by simp [h])\n#align prod_mul_prod_eq_prod_zip_with_of_length_eq prod_mul_prod_eq_prod_zip_with_of_length_eq\n\n",
 "prod_mul_prod_eq_prod_zip_with_mul_prod_drop":
 "@[to_additive]\ntheorem prod_mul_prod_eq_prod_zip_with_mul_prod_drop :\n    ∀ L L' : List α, L.prod * L'.prod = (zip_with (· * ·) L L').prod * (L.drop L'.length).prod * (L'.drop L.length).prod\n  | [], ys => by simp [nat.zero_le]\n  | xs, [] => by simp [nat.zero_le]\n  | x :: xs, y :: ys => by\n    simp only [drop, length, zip_with_cons_cons, prod_cons]\n    rw [mul_assoc x, mul_comm xs.prod, mul_assoc y, mul_comm ys.prod,\n      prod_mul_prod_eq_prod_zip_with_mul_prod_drop xs ys, mul_assoc, mul_assoc, mul_assoc, mul_assoc]\n#align prod_mul_prod_eq_prod_zip_with_mul_prod_drop prod_mul_prod_eq_prod_zip_with_mul_prod_drop\n\n",
 "nth_zip_with_eq_some":
 "theorem nth_zip_with_eq_some {α β γ} (f : α → β → γ) (l₁ : List α) (l₂ : List β) (z : γ) (i : ℕ) :\n    (zip_with f l₁ l₂).nth i = some z ↔ ∃ x y, l₁.nth i = some x ∧ l₂.nth i = some y ∧ f x y = z :=\n  by\n  induction l₁ generalizing l₂ i\n  · simp [zip_with]\n  · cases l₂ <;> simp only [zip_with, nth, exists_false, and_false_iff, false_and_iff]\n    cases i <;> simp [*]\n#align nth_zip_with_eq_some nth_zip_with_eq_some\n\n",
 "nth_zip_with":
 "theorem nth_zip_with (f : α → β → γ) (l₁ : List α) (l₂ : List β) (i : ℕ) :\n    (zip_with f l₁ l₂).nth i = ((l₁.nth i).map f).bind fun g => (l₂.nth i).map g :=\n  by\n  induction l₁ generalizing l₂ i\n  · simp [zip_with, (· <*> ·)]\n  · cases l₂ <;> simp only [zip_with, has_seq.seq, functor.map, nth, Option.map_none']\n    · cases (l₁_hd :: l₁_tl).nth i <;> rfl\n    · cases i <;> simp only [Option.map_some', nth, Option.some_bind', *]\n#align nth_zip_with nth_zip_with\n\n",
 "nth_zip_eq_some":
 "theorem nth_zip_eq_some (l₁ : List α) (l₂ : List β) (z : α × β) (i : ℕ) :\n    (zip l₁ l₂).nth i = some z ↔ l₁.nth i = some z.1 ∧ l₂.nth i = some z.2 :=\n  by\n  cases z\n  rw [zip, nth_zip_with_eq_some]; constructor\n  · rintro ⟨x, y, h₀, h₁, h₂⟩\n    cc\n  · rintro ⟨h₀, h₁⟩\n    exact ⟨_, _, h₀, h₁, rfl⟩\n#align nth_zip_eq_some nth_zip_eq_some\n\n",
 "nth_le_zip_with":
 "@[simp]\ntheorem nth_le_zip_with {f : α → β → γ} {l : List α} {l' : List β} {i : ℕ} {h : i < (zip_with f l l').length} :\n    (zip_with f l l').nth_le i h =\n      f (l.nth_le i (lt_length_left_of_zipWith h)) (l'.nth_le i (lt_length_right_of_zipWith h)) :=\n  by\n  rw [← Option.some_inj, ← nth_le_nth, nth_zip_with_eq_some]\n  refine' ⟨l.nth_le i (lt_length_left_of_zip_with h), l'.nth_le i (lt_length_right_of_zip_with h), nth_le_nth _, _⟩\n  simp only [← nth_le_nth, eq_self_iff_true, and_self_iff]\n#align nth_le_zip_with nth_le_zip_with\n\n",
 "nth_le_zip":
 "@[simp]\ntheorem nth_le_zip {l : List α} {l' : List β} {i : ℕ} {h : i < (zip l l').length} :\n    (zip l l').nth_le i h = (l.nth_le i (lt_length_left_of_zip h), l'.nth_le i (lt_length_right_of_zip h)) :=\n  nthLe_zipWith\n#align nth_le_zip nth_le_zip\n\n",
 "mem_zip_inits_tails":
 "theorem mem_zip_inits_tails {l : List α} {init tail : List α} : (init, tail) ∈ zip l.inits l.tails ↔ init ++ tail = l :=\n  by\n  induction l generalizing init tail <;> simp_rw [tails, inits, zip_cons_cons]\n  · simp\n  · constructor <;> rw [mem_cons_iff, zip_map_left, mem_map, Prod.exists]\n    · rintro (⟨rfl, rfl⟩ | ⟨_, _, h, rfl, rfl⟩)\n      · simp\n      · simp [l_ih.mp h]\n    · cases init\n      · simp\n      · intro h\n        right\n        use init_tl, tail\n        simp_all\n#align mem_zip_inits_tails mem_zip_inits_tails\n\n",
 "mem_zip":
 "theorem mem_zip {a b} : ∀ {l₁ : List α} {l₂ : List β}, (a, b) ∈ zip l₁ l₂ → a ∈ l₁ ∧ b ∈ l₂\n  | _ :: l₁, _ :: l₂, or.inl rfl => ⟨or.inl rfl, or.inl rfl⟩\n  | a' :: l₁, b' :: l₂, or.inr h => by constructor <;> simp only [mem_cons_iff, or_true_iff, mem_zip h]\n#align mem_zip mem_zip\n\n",
 "map_zip_with":
 "theorem map_zip_with {δ : Type _} (f : α → β) (g : γ → δ → α) (l : List γ) (l' : List δ) :\n    map f (zip_with g l l') = zip_with (fun x y => f (g x y)) l l' :=\n  by\n  induction' l with hd tl hl generalizing l'\n  · simp\n  · cases l'\n    · simp\n    · simp [hl]\n#align map_zip_with map_zip_with\n\n",
 "map_uncurry_zip_eq_zip_with":
 "theorem map_uncurry_zip_eq_zip_with (f : α → β → γ) (l : List α) (l' : List β) :\n    map (function.uncurry f) (l.zip l') = zip_with f l l' :=\n  by\n  induction' l with hd tl hl generalizing l'\n  · simp\n  · cases' l' with hd' tl'\n    · simp\n    · simp [hl]\n#align map_uncurry_zip_eq_zip_with map_uncurry_zip_eq_zip_with\n\n",
 "map_snd_zip":
 "theorem map_snd_zip : ∀ (l₁ : List α) (l₂ : List β), l₂.length ≤ l₁.length → map Prod.snd (zip l₁ l₂) = l₂\n  | _, [], _ => by\n    rw [zip_nil_right]\n    rfl\n  | [], b :: bs, h => by\n    simp at h\n    contradiction\n  | a :: as, b :: bs, h => by\n    simp at h\n    simp! [*]\n#align map_snd_zip map_snd_zip\n\n",
 "map_prod_right_eq_zip":
 "theorem map_prod_right_eq_zip {l : List α} (f : α → β) : (l.map fun x => (f x, x)) = (l.map f).zip l :=\n  by\n  rw [← zip_map']\n  congr\n  exact map_id _\n#align map_prod_right_eq_zip map_prod_right_eq_zip\n\n",
 "map_prod_left_eq_zip":
 "theorem map_prod_left_eq_zip {l : List α} (f : α → β) : (l.map fun x => (x, f x)) = l.zip (l.map f) :=\n  by\n  rw [← zip_map']\n  congr\n  exact map_id _\n#align map_prod_left_eq_zip map_prod_left_eq_zip\n\n",
 "map_fst_zip":
 "theorem map_fst_zip : ∀ (l₁ : List α) (l₂ : List β), l₁.length ≤ l₂.length → map Prod.fst (zip l₁ l₂) = l₁\n  | [], bs, _ => rfl\n  | a :: as, b :: bs, h => by\n    simp at h\n    simp! [*]\n  | a :: as, [], h => by\n    simp at h\n    contradiction\n#align map_fst_zip map_fst_zip\n\n",
 "lt_length_right_of_zip_with":
 "theorem lt_length_right_of_zip_with {f : α → β → γ} {i : ℕ} {l : List α} {l' : List β}\n    (h : i < (zip_with f l l').length) : i < l'.length :=\n  by\n  rw [length_zip_with, lt_min_iff] at h\n  exact h.right\n#align lt_length_right_of_zip_with lt_length_right_of_zip_with\n\n",
 "lt_length_right_of_zip":
 "theorem lt_length_right_of_zip {i : ℕ} {l : List α} {l' : List β} (h : i < (zip l l').length) : i < l'.length :=\n  lt_length_right_of_zipWith h\n#align lt_length_right_of_zip lt_length_right_of_zip\n\n",
 "lt_length_left_of_zip_with":
 "theorem lt_length_left_of_zip_with {f : α → β → γ} {i : ℕ} {l : List α} {l' : List β}\n    (h : i < (zip_with f l l').length) : i < l.length :=\n  by\n  rw [length_zip_with, lt_min_iff] at h\n  exact h.left\n#align lt_length_left_of_zip_with lt_length_left_of_zip_with\n\n",
 "lt_length_left_of_zip":
 "theorem lt_length_left_of_zip {i : ℕ} {l : List α} {l' : List β} (h : i < (zip l l').length) : i < l.length :=\n  lt_length_left_of_zipWith h\n#align lt_length_left_of_zip lt_length_left_of_zip\n\n",
 "length_zip_with":
 "@[simp]\ntheorem length_zip_with (f : α → β → γ) :\n    ∀ (l₁ : List α) (l₂ : List β), length (zip_with f l₁ l₂) = min (length l₁) (length l₂)\n  | [], l₂ => rfl\n  | l₁, [] => by simp only [length, min_zero, zip_with_nil_right]\n  | a :: l₁, b :: l₂ => by simp [length, zip_cons_cons, length_zip_with l₁ l₂, min_add_add_right]\n#align length_zip_with length_zip_with\n\n",
 "length_zip":
 "@[simp]\ntheorem length_zip : ∀ (l₁ : List α) (l₂ : List β), length (zip l₁ l₂) = min (length l₁) (length l₂) :=\n  length_zipWith _\n#align length_zip length_zip\n\n",
 "length_revzip":
 "@[simp]\ntheorem length_revzip (l : List α) : length (revzip l) = length l := by\n  simp only [revzip, length_zip, length_reverse, min_self]\n#align length_revzip length_revzip\n\n",
 "all₂_zip_with":
 "theorem all₂_zip_with {f : α → β → γ} {p : γ → Prop} :\n    ∀ {l₁ : List α} {l₂ : List β} (h : length l₁ = length l₂),\n      All₂ p (zip_with f l₁ l₂) ↔ Forall₂ (fun x y => p (f x y)) l₁ l₂\n  | [], [], _ => by simp\n  | a :: l₁, b :: l₂, h => by\n    simp only [length_cons, add_left_inj] at h\n    simp [all₂_zip_with h]\n#align all₂_zip_with all₂_zip_with\n\n"}