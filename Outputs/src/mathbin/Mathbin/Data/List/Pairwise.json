{"tail":
 "theorem pairwise.tail : ∀ {l : List α} (p : Pairwise R l), Pairwise R l.tail\n  | [], h => h\n  | a :: l, h => h.of_cons\n#align pairwise.tail pairwise.tail\n\n",
 "sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\nprotected theorem pairwise.sublist : ∀ {l₁ l₂ : List α}, «expr <+ » l₁ l₂ → Pairwise R l₂ → Pairwise R l₁\n  | _, _, sublist.slnil, h => h\n  | _, _, sublist.cons l₁ l₂ a s, pairwise.cons i h => h.sublist s\n  | _, _, sublist.cons2 l₁ l₂ a s, pairwise.cons i h => (h.sublist s).cons (BAll.imp_left s.subset i)\n#align pairwise.sublist pairwise.sublist\n\n",
 "set_pairwise":
 "#print Pairwise.set_pairwise /-\ntheorem Pairwise.set_pairwise (hl : Pairwise R l) (hr : symmetric R) : { x | x ∈ l }.pairwise R :=\n  hl.forall hr\n#align pairwise.set_pairwise Pairwise.set_pairwise\n-/\n\n",
 "rel_of_pairwise_cons":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem rel_of_pairwise_cons (p : (a :: l).pairwise R) : ∀ {a'}, a' ∈ l → R a a' :=\n  (pairwise_cons.1 p).1\n#align rel_of_pairwise_cons rel_of_pairwise_cons\n\n",
 "pw_filter_subset":
 "theorem pw_filter_subset (l : List α) : pwFilter R l ⊆ l :=\n  (pwFilter_sublist _).subset\n#align pw_filter_subset pw_filter_subset\n\n",
 "pw_filter_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem pw_filter_sublist : ∀ l : List α, «expr <+ » (pwFilter R l) l\n  | [] => nil_sublist _\n  | x :: l => by\n    by_cases ∀ y ∈ pw_filter R l, R x y\n    · rw [pw_filter_cons_of_pos h]\n      exact (pw_filter_sublist l).cons_cons _\n    · rw [pw_filter_cons_of_neg h]\n      exact sublist_cons_of_sublist _ (pw_filter_sublist l)\n#align pw_filter_sublist pw_filter_sublist\n\n",
 "pw_filter_nil":
 "@[simp]\ntheorem pw_filter_nil : pwFilter R [] = [] :=\n  rfl\n#align pw_filter_nil pw_filter_nil\n\n",
 "pw_filter_map":
 "theorem pw_filter_map (f : β → α) : ∀ l : List β, pwFilter R (map f l) = map f (pwFilter (fun x y => R (f x) (f y)) l)\n  | [] => rfl\n  | x :: xs =>\n    if h : ∀ b ∈ pwFilter R (map f xs), R (f x) b then\n      by\n      have h' : ∀ b : β, b ∈ pwFilter (fun x y : β => R (f x) (f y)) xs → R (f x) (f b) := fun b hb =>\n        h _ (by rw [pw_filter_map] <;> apply mem_map_of_mem _ hb)\n      rw [map, pw_filter_cons_of_pos h, pw_filter_cons_of_pos h', pw_filter_map, map]\n    else\n      by\n      have h' : ¬∀ b : β, b ∈ pwFilter (fun x y : β => R (f x) (f y)) xs → R (f x) (f b) := fun hh =>\n        h fun a ha => by\n          rw [pw_filter_map, mem_map] at ha\n          rcases ha with ⟨b, hb₀, hb₁⟩\n          subst a\n          exact hh _ hb₀\n      rw [map, pw_filter_cons_of_neg h, pw_filter_cons_of_neg h', pw_filter_map]\n#align pw_filter_map pw_filter_map\n\n",
 "pw_filter_idempotent":
 "@[simp]\ntheorem pw_filter_idempotent : pwFilter R (pwFilter R l) = pwFilter R l :=\n  (pairwise_pwFilter l).pw_filter\n#align pw_filter_idempotent pw_filter_idempotent\n\n",
 "pw_filter_eq_self":
 "theorem pw_filter_eq_self {l : List α} : pwFilter R l = l ↔ Pairwise R l :=\n  ⟨fun e => e ▸ pairwise_pwFilter l, fun p => by\n    induction' l with x l IH; · rfl\n    cases' pairwise_cons.1 p with al p\n    rw [pw_filter_cons_of_pos (BAll.imp_left (pw_filter_subset l) al), IH p]⟩\n#align pw_filter_eq_self pw_filter_eq_self\n\n",
 "pw_filter_cons_of_pos":
 "@[simp]\ntheorem pw_filter_cons_of_pos {a : α} {l : List α} (h : ∀ b ∈ pwFilter R l, R a b) :\n    pwFilter R (a :: l) = a :: pwFilter R l :=\n  if_pos h\n#align pw_filter_cons_of_pos pw_filter_cons_of_pos\n\n",
 "pw_filter_cons_of_neg":
 "@[simp]\ntheorem pw_filter_cons_of_neg {a : α} {l : List α} (h : ¬∀ b ∈ pwFilter R l, R a b) :\n    pwFilter R (a :: l) = pwFilter R l :=\n  if_neg h\n#align pw_filter_cons_of_neg pw_filter_cons_of_neg\n\n",
 "pmap":
 "theorem pairwise.pmap {l : List α} (hl : Pairwise R l) {p : α → Prop} {f : ∀ a, p a → β} (h : ∀ x ∈ l, p x)\n    {S : β → β → Prop} (hS : ∀ ⦃x⦄ (hx : p x) ⦃y⦄ (hy : p y), R x y → S (f x hx) (f y hy)) : Pairwise S (l.pmap f h) :=\n  by\n  refine' (pairwise_pmap h).2 (pairwise.imp_of_mem _ hl)\n  intros ; apply hS; assumption\n#align pairwise.pmap pairwise.pmap\n\n",
 "pairwise_singleton":
 "theorem pairwise_singleton (R) (a : α) : Pairwise R [a] := by\n  simp only [pairwise_cons, mem_singleton, forall_prop_of_false (not_mem_nil _), forall_true_iff, pairwise.nil,\n    and_true_iff]\n#align pairwise_singleton pairwise_singleton\n\n",
 "pairwise_reverse":
 "@[simp]\ntheorem pairwise_reverse : ∀ {R} {l : List α}, Pairwise R (reverse l) ↔ Pairwise (fun x y => R y x) l :=\n  suffices ∀ {R l}, @Pairwise α R l → Pairwise (fun x y => R y x) (reverse l) from fun R l =>\n    ⟨fun p => reverse_reverse l ▸ this p, this⟩\n  fun R l p => by\n  induction' p with a l h p IH <;> [apply pairwise.nil,\n    simpa only [reverse_cons, pairwise_append, IH, pairwise_cons, forall_prop_of_false (not_mem_nil _), forall_true_iff,\n      pairwise.nil, mem_reverse, mem_singleton, forall_eq, true_and_iff] using h]\n#align pairwise_reverse pairwise_reverse\n\n",
 "pairwise_replicate":
 "theorem pairwise_replicate {α : Type _} {r : α → α → Prop} {x : α} (hx : r x x) : ∀ n : ℕ, Pairwise r (replicate n x)\n  | 0 => by simp\n  | n + 1 => by simp [hx, mem_replicate, pairwise_replicate n]\n#align pairwise_replicate pairwise_replicate\n\n",
 "pairwise_pw_filter":
 "theorem pairwise_pw_filter : ∀ l : List α, Pairwise R (pwFilter R l)\n  | [] => Pairwise.nil\n  | x :: l => by\n    by_cases ∀ y ∈ pw_filter R l, R x y\n    · rw [pw_filter_cons_of_pos h]\n      exact pairwise_cons.2 ⟨h, pairwise_pw_filter l⟩\n    · rw [pw_filter_cons_of_neg h]\n      exact pairwise_pw_filter l\n#align pairwise_pw_filter pairwise_pw_filter\n\n",
 "pairwise_pmap":
 "theorem pairwise_pmap {p : β → Prop} {f : ∀ b, p b → α} {l : List β} (h : ∀ x ∈ l, p x) :\n    Pairwise R (l.pmap f h) ↔ Pairwise (fun b₁ b₂ => ∀ (h₁ : p b₁) (h₂ : p b₂), R (f b₁ h₁) (f b₂ h₂)) l :=\n  by\n  induction' l with a l ihl\n  · simp\n  obtain ⟨ha, hl⟩ : p a ∧ ∀ b, b ∈ l → p b := by simpa using h\n  simp only [ihl hl, pairwise_cons, bex_imp, pmap, and_congr_left_iff, mem_pmap]\n  refine' fun _ => ⟨fun H b hb hpa hpb => H _ _ hb rfl, _⟩\n  rintro H _ b hb rfl\n  exact H b hb _ _\n#align pairwise_pmap pairwise_pmap\n\n",
 "pairwise_pair":
 "theorem pairwise_pair {a b : α} : Pairwise R [a, b] ↔ R a b := by\n  simp only [pairwise_cons, mem_singleton, forall_eq, forall_prop_of_false (not_mem_nil _), forall_true_iff,\n    pairwise.nil, and_true_iff]\n#align pairwise_pair pairwise_pair\n\n",
 "pairwise_of_reflexive_on_dupl_of_forall_ne":
 "theorem pairwise_of_reflexive_on_dupl_of_forall_ne [DecidableEq α] {l : List α} {r : α → α → Prop}\n    (hr : ∀ a, 1 < count a l → r a a) (h : ∀ a ∈ l, ∀ b ∈ l, a ≠ b → r a b) : l.pairwise r :=\n  by\n  induction' l with hd tl IH\n  · simp\n  · rw [List.pairwise_cons]\n    constructor\n    · intro x hx\n      by_cases H : hd = x\n      · rw [H]\n        refine' hr _ _\n        simpa [count_cons, H, Nat.succ_lt_succ_iff, count_pos] using hx\n      · exact h hd (mem_cons_self _ _) x (mem_cons_of_mem _ hx) H\n    · refine' IH _ _\n      · intro x hx\n        refine' hr _ _\n        rw [count_cons]\n        split_ifs\n        · exact hx.trans (nat.lt_succ_self _)\n        · exact hx\n      · intro x hx y hy\n        exact h x (mem_cons_of_mem _ hx) y (mem_cons_of_mem _ hy)\n#align pairwise_of_reflexive_on_dupl_of_forall_ne pairwise_of_reflexive_on_dupl_of_forall_ne\n\n",
 "pairwise_of_reflexive_of_forall_ne":
 "theorem pairwise_of_reflexive_of_forall_ne {l : List α} {r : α → α → Prop} (hr : reflexive r)\n    (h : ∀ a ∈ l, ∀ b ∈ l, a ≠ b → r a b) : l.pairwise r := by\n  classical exact pairwise_of_reflexive_on_dupl_of_forall_ne (fun _ _ => hr _) h\n#align pairwise_of_reflexive_of_forall_ne pairwise_of_reflexive_of_forall_ne\n\n",
 "pairwise_of_forall_mem_list":
 "theorem pairwise_of_forall_mem_list {l : List α} {r : α → α → Prop} (h : ∀ a ∈ l, ∀ b ∈ l, r a b) : l.pairwise r := by\n  classical\n    refine' pairwise_of_reflexive_on_dupl_of_forall_ne (fun a ha' => _) fun a ha b hb _ => h a ha b hb\n    have ha := List.one_le_count_iff_mem.1 ha'.le\n    exact h a ha a ha\n#align pairwise_of_forall_mem_list pairwise_of_forall_mem_list\n\n",
 "pairwise_of_forall":
 "theorem pairwise_of_forall {l : List α} (H : ∀ x y, R x y) : Pairwise R l := by\n  induction l <;> [exact pairwise.nil, simp only [*, pairwise_cons, forall₂_true_iff, and_true_iff]]\n#align pairwise_of_forall pairwise_of_forall\n\n",
 "pairwise_middle":
 "theorem pairwise_middle (s : symmetric R) {a : α} {l₁ l₂ : List α} :\n    Pairwise R (l₁ ++ a :: l₂) ↔ Pairwise R (a :: (l₁ ++ l₂)) :=\n  show Pairwise R (l₁ ++ ([a] ++ l₂)) ↔ Pairwise R ([a] ++ l₁ ++ l₂) by\n    rw [← append_assoc, pairwise_append, @pairwise_append _ _ ([a] ++ l₁), pairwise_append_comm s] <;>\n      simp only [mem_append, or_comm']\n#align pairwise_middle pairwise_middle\n\n",
 "pairwise_map":
 "theorem pairwise_map (f : β → α) : ∀ {l : List β}, Pairwise R (map f l) ↔ Pairwise (fun a b : β => R (f a) (f b)) l\n  | [] => by simp only [map, pairwise.nil]\n  | b :: l =>\n    by\n    have : (∀ a b', b' ∈ l → f b' = a → R (f b) a) ↔ ∀ b' : β, b' ∈ l → R (f b) (f b') :=\n      forall_swap.trans <| forall_congr' fun a => forall_swap.trans <| by simp only [forall_eq']\n    simp only [map, pairwise_cons, mem_map, exists_imp, and_imp, this, pairwise_map]\n#align pairwise_map pairwise_map\n\n",
 "pairwise_join":
 "theorem pairwise_join {L : List (List α)} :\n    Pairwise R (join L) ↔ (∀ l ∈ L, Pairwise R l) ∧ Pairwise (fun l₁ l₂ => ∀ x ∈ l₁, ∀ y ∈ l₂, R x y) L :=\n  by\n  induction' L with l L IH\n  · simp only [join, pairwise.nil, forall_prop_of_false (not_mem_nil _), forall_const, and_self_iff]\n  have :\n    (∀ x : α, x ∈ l → ∀ (y : α) (x_1 : List α), x_1 ∈ L → y ∈ x_1 → R x y) ↔\n      ∀ a' : List α, a' ∈ L → ∀ x : α, x ∈ l → ∀ y : α, y ∈ a' → R x y :=\n    ⟨fun h a b c d e => h c d e a b, fun h c d e a b => h a b c d e⟩\n  simp only [join, pairwise_append, IH, mem_join, exists_imp, and_imp, this, forall_mem_cons, pairwise_cons]\n  simp only [and_assoc', and_comm', and_left_comm]\n#align pairwise_join pairwise_join\n\n",
 "pairwise_iff_nth_le":
 "theorem pairwise_iff_nth_le {R} :\n    ∀ {l : List α},\n      Pairwise R l ↔ ∀ (i j) (h₁ : j < length l) (h₂ : i < j), R (nthLe l i (lt_trans h₂ h₁)) (nthLe l j h₁)\n  | [] => by simp only [pairwise.nil, true_iff_iff] <;> exact fun i j h => (nat.not_lt_zero j).elim h\n  | a :: l => by\n    rw [pairwise_cons, pairwise_iff_nth_le]\n    refine' ⟨fun H i j h₁ h₂ => _, fun H => ⟨fun a' m => _, fun i j h₁ h₂ => H _ _ (succ_lt_succ h₁) (succ_lt_succ h₂)⟩⟩\n    · cases' j with j\n      · exact (nat.not_lt_zero _).elim h₂\n      cases' i with i\n      · exact H.1 _ (nth_le_mem l _ _)\n      · exact H.2 _ _ (lt_of_succ_lt_succ h₁) (lt_of_succ_lt_succ h₂)\n    · rcases nth_le_of_mem m with ⟨n, h, rfl⟩\n      exact H _ _ (succ_lt_succ h) (succ_pos _)\n#align pairwise_iff_nth_le pairwise_iff_nth_le\n\n",
 "pairwise_filter_map":
 "theorem pairwise_filter_map (f : β → Option α) {l : List β} :\n    Pairwise R (filter_map f l) ↔ Pairwise (fun a a' : β => ∀ b ∈ f a, ∀ b' ∈ f a', R b b') l :=\n  by\n  let S (a a' : β) := ∀ b ∈ f a, ∀ b' ∈ f a', R b b'\n  simp only [Option.mem_def]; induction' l with a l IH\n  · simp only [filter_map, pairwise.nil]\n  cases' e : f a with b\n  · rw [filter_map_cons_none _ _ e, IH, pairwise_cons]\n    simp only [e, forall_prop_of_false not_false, forall₃_true_iff, true_and_iff]\n  rw [filter_map_cons_some _ _ _ e]\n  simp only [pairwise_cons, mem_filter_map, exists_imp, and_imp, IH, e, forall_eq']\n  show\n    (∀ (a' : α) (x : β), x ∈ l → f x = some a' → R b a') ∧ Pairwise S l ↔\n      (∀ a' : β, a' ∈ l → ∀ b' : α, f a' = some b' → R b b') ∧ Pairwise S l\n  exact and_congr ⟨fun h b mb a ma => h a b mb ma, fun h a b mb ma => h b mb a ma⟩ iff.rfl\n#align pairwise_filter_map pairwise_filter_map\n\n",
 "pairwise_filter":
 "theorem pairwise_filter (p : α → Prop) [DecidablePred p] {l : List α} :\n    Pairwise R (filter p l) ↔ Pairwise (fun x y => p x → p y → R x y) l :=\n  by\n  rw [← filter_map_eq_filter, pairwise_filter_map]\n  apply pairwise.iff; intros ; simp only [Option.mem_def, Option.guard_eq_some, and_imp, forall_eq']\n#align pairwise_filter pairwise_filter\n\n",
 "pairwise_bind":
 "theorem pairwise_bind {R : β → β → Prop} {l : List α} {f : α → List β} :\n    List.Pairwise R (l.bind f) ↔\n      (∀ a ∈ l, Pairwise R (f a)) ∧ Pairwise (fun a₁ a₂ => ∀ x ∈ f a₁, ∀ y ∈ f a₂, R x y) l :=\n  by simp [list.bind, List.pairwise_join, List.mem_map, List.pairwise_map']\n#align pairwise_bind pairwise_bind\n\n",
 "pairwise_append_comm":
 "theorem pairwise_append_comm (s : symmetric R) {l₁ l₂ : List α} : Pairwise R (l₁ ++ l₂) ↔ Pairwise R (l₂ ++ l₁) :=\n  by\n  have : ∀ l₁ l₂ : List α, (∀ x : α, x ∈ l₁ → ∀ y : α, y ∈ l₂ → R x y) → ∀ x : α, x ∈ l₂ → ∀ y : α, y ∈ l₁ → R x y :=\n    fun l₁ l₂ a x xm y ym => s (a y ym x xm)\n  simp only [pairwise_append, and_left_comm] <;> rw [iff.intro (this l₁ l₂) (this l₂ l₁)]\n#align pairwise_append_comm pairwise_append_comm\n\n",
 "pairwise_append":
 "theorem pairwise_append {l₁ l₂ : List α} :\n    Pairwise R (l₁ ++ l₂) ↔ Pairwise R l₁ ∧ Pairwise R l₂ ∧ ∀ x ∈ l₁, ∀ y ∈ l₂, R x y := by\n  induction' l₁ with x l₁ IH <;>\n    [simp only [List.Pairwise.nil, forall_prop_of_false (not_mem_nil _), forall_true_iff, and_true_iff, true_and_iff,\n      nil_append],\n    simp only [cons_append, pairwise_cons, forall_mem_append, IH, forall_mem_cons, forall_and, and_assoc',\n      and_left_comm]]\n#align pairwise_append pairwise_append\n\n",
 "pairwise_and_iff":
 "theorem pairwise_and_iff : (l.pairwise fun a b => R a b ∧ S a b) ↔ l.pairwise R ∧ l.pairwise S :=\n  ⟨fun h => ⟨h.imp fun a b h => h.1, h.imp fun a b h => h.2⟩, fun ⟨hR, hS⟩ =>\n    by\n    clear_; induction' hR with a l R1 R2 IH <;> simp only [pairwise.nil, pairwise_cons] at *\n    exact ⟨fun b bl => ⟨R1 b bl, hS.1 b bl⟩, IH hS.2⟩⟩\n#align pairwise_and_iff pairwise_and_iff\n\n",
 "of_map":
 "theorem pairwise.of_map {S : β → β → Prop} (f : α → β) (H : ∀ a b : α, S (f a) (f b) → R a b)\n    (p : Pairwise S (map f l)) : Pairwise R l :=\n  ((pairwise_map' f).1 p).imp H\n#align pairwise.of_map pairwise.of_map\n\n",
 "of_cons":
 "theorem pairwise.of_cons (p : (a :: l).pairwise R) : Pairwise R l :=\n  (pairwise_cons.1 p).2\n#align pairwise.of_cons pairwise.of_cons\n\n",
 "map":
 "theorem pairwise.map {S : β → β → Prop} (f : α → β) (H : ∀ a b : α, R a b → S (f a) (f b)) (p : Pairwise R l) :\n    Pairwise S (map f l) :=\n  (pairwise_map' f).2 <| p.imp H\n#align pairwise.map pairwise.map\n\n",
 "imp₂":
 "theorem pairwise.imp₂ (H : ∀ a b, R a b → S a b → T a b) (hR : l.pairwise R) (hS : l.pairwise S) : l.pairwise T :=\n  (hR.and hS).imp fun a b => and.rec (H a b)\n#align pairwise.imp₂ pairwise.imp₂\n\n",
 "imp_of_mem":
 "theorem pairwise.imp_of_mem {S : α → α → Prop} {l : List α} (H : ∀ {a b}, a ∈ l → b ∈ l → R a b → S a b)\n    (p : Pairwise R l) : Pairwise S l :=\n  by\n  induction' p with a l r p IH generalizing H <;> constructor\n  · exact BAll.imp_right (fun x h => H (mem_cons_self _ _) (mem_cons_of_mem _ h)) r\n  · exact IH fun a b m m' => H (mem_cons_of_mem _ m) (mem_cons_of_mem _ m')\n#align pairwise.imp_of_mem pairwise.imp_of_mem\n\n",
 "imp_mem":
 "theorem pairwise.imp_mem {l : List α} : Pairwise R l ↔ Pairwise (fun x y => x ∈ l → y ∈ l → R x y) l :=\n  Pairwise.iff_of_mem\n    (by simp (config := { contextual := true }) only [forall_prop_of_true, iff_self_iff, forall₂_true_iff])\n#align pairwise.imp_mem pairwise.imp_mem\n\n",
 "imp":
 "theorem pairwise.imp (H : ∀ a b, R a b → S a b) : Pairwise R l → Pairwise S l :=\n  Pairwise.imp_of_mem fun a b _ _ => H a b\n#align pairwise.imp pairwise.imp\n\n",
 "iff_of_mem":
 "theorem pairwise.iff_of_mem {S : α → α → Prop} {l : List α} (H : ∀ {a b}, a ∈ l → b ∈ l → (R a b ↔ S a b)) :\n    Pairwise R l ↔ Pairwise S l :=\n  ⟨Pairwise.imp_of_mem fun a b m m' => (H m m').1, Pairwise.imp_of_mem fun a b m m' => (H m m').2⟩\n#align pairwise.iff_of_mem pairwise.iff_of_mem\n\n",
 "iff":
 "theorem pairwise.iff {S : α → α → Prop} (H : ∀ a b, R a b ↔ S a b) {l : List α} : Pairwise R l ↔ Pairwise S l :=\n  Pairwise.iff_of_mem fun a b _ _ => H a b\n#align pairwise.iff pairwise.iff\n\n",
 "forall_of_forall_of_flip":
 "theorem pairwise.forall_of_forall_of_flip (h₁ : ∀ x ∈ l, R x x) (h₂ : l.pairwise R) (h₃ : l.pairwise (flip R)) :\n    ∀ ⦃x⦄, x ∈ l → ∀ ⦃y⦄, y ∈ l → R x y := by\n  induction' l with a l ih\n  · exact forall_mem_nil _\n  rw [pairwise_cons] at h₂ h₃\n  rintro x (rfl | hx) y (rfl | hy)\n  · exact h₁ _ (l.mem_cons_self _)\n  · exact h₂.1 _ hy\n  · exact h₃.1 _ hx\n  · exact ih (fun x hx => h₁ _ <| mem_cons_of_mem _ hx) h₂.2 h₃.2 hx hy\n#align pairwise.forall_of_forall_of_flip pairwise.forall_of_forall_of_flip\n\n",
 "forall_of_forall":
 "theorem pairwise.forall_of_forall (H : symmetric R) (H₁ : ∀ x ∈ l, R x x) (H₂ : l.pairwise R) :\n    ∀ ⦃x⦄, x ∈ l → ∀ ⦃y⦄, y ∈ l → R x y :=\n  H₂.forall_of_forall_of_flip H₁ <| by rwa [H.flip_eq]\n#align pairwise.forall_of_forall pairwise.forall_of_forall\n\n",
 "forall_mem_pw_filter":
 "theorem forall_mem_pw_filter (neg_trans : ∀ {x y z}, R x z → R x y ∨ R y z) (a : α) (l : List α) :\n    (∀ b ∈ pwFilter R l, R a b) ↔ ∀ b ∈ l, R a b :=\n  ⟨by\n    induction' l with x l IH; · exact fun _ _ => false.elim\n    simp only [forall_mem_cons]\n    by_cases ∀ y ∈ pw_filter R l, R x y <;> dsimp at h\n    · simp only [pw_filter_cons_of_pos h, forall_mem_cons, and_imp]\n      exact fun r H => ⟨r, IH H⟩\n    · rw [pw_filter_cons_of_neg h]\n      refine' fun H => ⟨_, IH H⟩\n      cases' e : find (fun y => ¬R x y) (pw_filter R l) with k\n      · refine' h.elim (BAll.imp_right _ (find_eq_none.1 e))\n        exact fun y _ => Classical.not_not.1\n      · have := find_some e\n        exact (neg_trans (H k (find_mem e))).resolve_right this, BAll.imp_left (pwFilter_subset l)⟩\n#align forall_mem_pw_filter forall_mem_pw_filter\n\n",
 "forall":
 "theorem pairwise.forall (hR : symmetric R) (hl : l.pairwise R) : ∀ ⦃a⦄, a ∈ l → ∀ ⦃b⦄, b ∈ l → a ≠ b → R a b :=\n  Pairwise.forall_of_forall (fun a b h hne => hR (h hne.symm)) (fun _ _ h => (h rfl).elim) (hl.imp fun _ _ h _ => h)\n#align pairwise.forall pairwise.forall\n\n",
 "filter_map":
 "theorem pairwise.filter_map {S : β → β → Prop} (f : α → Option β)\n    (H : ∀ a a' : α, R a a' → ∀ b ∈ f a, ∀ b' ∈ f a', S b b') {l : List α} (p : Pairwise R l) :\n    Pairwise S (filter_map f l) :=\n  (pairwise_filterMap _).2 <| p.imp H\n#align pairwise.filter_map pairwise.filter_map\n\n",
 "filter":
 "theorem pairwise.filter (p : α → Prop) [DecidablePred p] : Pairwise R l → Pairwise R (filter p l) :=\n  Pairwise.sublist (filter_sublist _)\n#align pairwise.filter pairwise.filter\n\n",
 "drop":
 "theorem pairwise.drop : ∀ {l : List α} {n : ℕ}, List.Pairwise R l → List.Pairwise R (l.drop n)\n  | _, 0, h => h\n  | [], n + 1, h => List.Pairwise.nil\n  | a :: l, n + 1, h => pairwise.drop (pairwise_cons.mp h).right\n#align pairwise.drop pairwise.drop\n\n",
 "and_mem":
 "theorem pairwise.and_mem {l : List α} : Pairwise R l ↔ Pairwise (fun x y => x ∈ l ∧ y ∈ l ∧ R x y) l :=\n  Pairwise.iff_of_mem (by simp (config := { contextual := true }) only [true_and_iff, iff_self_iff, forall₂_true_iff])\n#align pairwise.and_mem pairwise.and_mem\n\n",
 "and":
 "theorem pairwise.and (hR : l.pairwise R) (hS : l.pairwise S) : l.pairwise fun a b => R a b ∧ S a b :=\n  pairwise_and_iff.2 ⟨hR, hS⟩\n#align pairwise.and pairwise.and\n\n"}