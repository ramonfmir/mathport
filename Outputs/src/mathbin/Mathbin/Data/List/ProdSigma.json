{"sigma_nil":
 "@[simp]\ntheorem sigma_nil : ∀ l : List α, (l.sigma fun a => @nil (σ a)) = []\n  | [] => rfl\n  | a :: l => by rw [sigma_cons, sigma_nil] <;> rfl\n#align sigma_nil sigma_nil\n\n",
 "sigma_cons":
 "@[simp]\ntheorem sigma_cons (a : α) (l₁ : List α) (l₂ : ∀ a, List (σ a)) :\n    (a :: l₁).sigma l₂ = map (sigma.mk a) (l₂ a) ++ l₁.sigma l₂ :=\n  rfl\n#align sigma_cons sigma_cons\n\n",
 "product_nil":
 "@[simp]\ntheorem product_nil : ∀ l : List α, product l (@nil β) = []\n  | [] => rfl\n  | a :: l => by rw [product_cons, product_nil] <;> rfl\n#align product_nil product_nil\n\n",
 "product_cons":
 "@[simp]\ntheorem product_cons (a : α) (l₁ : List α) (l₂ : List β) :\n    product (a :: l₁) l₂ = map (fun b => (a, b)) l₂ ++ product l₁ l₂ :=\n  rfl\n#align product_cons product_cons\n\n",
 "nil_sigma":
 "@[simp]\ntheorem nil_sigma (l : ∀ a, List (σ a)) : (@nil α).sigma l = [] :=\n  rfl\n#align nil_sigma nil_sigma\n\n",
 "nil_product":
 "/-\nCopyright (c) 2015 Leonardo de Moura. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Mario Carneiro\n-/\n@[simp]\ntheorem nil_product (l : List β) : product (@nil α) l = [] :=\n  rfl\n#align nil_product nil_product\n\n",
 "mem_sigma":
 "@[simp]\ntheorem mem_sigma {l₁ : List α} {l₂ : ∀ a, List (σ a)} {a : α} {b : σ a} :\n    sigma.mk a b ∈ l₁.sigma l₂ ↔ a ∈ l₁ ∧ b ∈ l₂ a := by\n  simp only [List.sigma, mem_bind, mem_map, exists_prop, exists_and_left, and_left_comm, exists_eq_left, heq_iff_eq,\n    exists_eq_right]\n#align mem_sigma mem_sigma\n\n",
 "mem_product":
 "@[simp]\ntheorem mem_product {l₁ : List α} {l₂ : List β} {a : α} {b : β} : (a, b) ∈ product l₁ l₂ ↔ a ∈ l₁ ∧ b ∈ l₂ := by\n  simp only [product, mem_bind, mem_map, Prod.ext_iff, exists_prop, and_left_comm, exists_and_left, exists_eq_left,\n    exists_eq_right]\n#align mem_product mem_product\n\n",
 "length_sigma":
 "theorem length_sigma (l₁ : List α) (l₂ : ∀ a, List (σ a)) :\n    length (l₁.sigma l₂) = (l₁.map fun a => length (l₂ a)).sum := by\n  induction' l₁ with x l₁ IH <;> [rfl, simp only [map, sigma_cons, length_append, length_map, IH, sum_cons]]\n#align length_sigma length_sigma\n\n",
 "length_product":
 "theorem length_product (l₁ : List α) (l₂ : List β) : length (product l₁ l₂) = length l₁ * length l₂ := by\n  induction' l₁ with x l₁ IH <;> [exact (MulZeroClass.zero_mul _).symm,\n    simp only [length, product_cons, length_append, IH, right_distrib, one_mul, length_map, add_comm]]\n#align length_product length_product\n\n"}