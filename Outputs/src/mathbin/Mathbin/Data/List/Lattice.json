{"union_sublist_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem union_sublist_append (l₁ l₂ : list α) : «expr <+ » (l₁ ∪ l₂) (l₁ ++ l₂) :=\n  let ⟨t, s, e⟩ := sublist_suffix_of_union l₁ l₂\n  e ▸ (append_sublist_append_right _).2 s\n#align union_sublist_append union_sublist_append\n\n",
 "symm":
 "#print Disjoint.symm /-\n/-\nCopyright (c) 2014 Parikshit Khanna. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Parikshit Khanna, Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Mario Carneiro,\nScott Morrison\n-/\ntheorem Disjoint.symm (d : Disjoint l₁ l₂) : Disjoint l₂ l₁ := fun a i₂ i₁ => d i₁ i₂\n#align disjoint.symm Disjoint.symm\n-/\n\n",
 "suffix_union_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <:+ » -/\ntheorem suffix_union_right (l₁ l₂ : list α) : «expr <:+ » l₂ (l₁ ∪ l₂) :=\n  (sublist_suffix_of_union l₁ l₂).imp fun a => And.right\n#align suffix_union_right suffix_union_right\n\n",
 "subset_inter":
 "theorem subset_inter {l l₁ l₂ : list α} (h₁ : l ⊆ l₁) (h₂ : l ⊆ l₂) : l ⊆ l₁ ∩ l₂ := fun a h => mem_inter.2 ⟨h₁ h, h₂ h⟩\n#align subset_inter subset_inter\n\n",
 "sublist_suffix_of_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem sublist_suffix_of_union : ∀ l₁ l₂ : list α, ∃ t, «expr <+ » t l₁ ∧ t ++ l₂ = l₁ ∪ l₂\n  | [], l₂ => ⟨[], by rfl, rfl⟩\n  | a :: l₁, l₂ =>\n    let ⟨t, s, e⟩ := sublist_suffix_of_union l₁ l₂\n    if h : a ∈ l₁ ∪ l₂ then ⟨t, sublist_cons_of_sublist _ s, by simp only [e, cons_union, insert_of_mem h]⟩\n    else ⟨a :: t, s.cons_cons _, by simp only [cons_append, cons_union, e, insert_of_not_mem h] <;> constructor <;> rfl⟩\n#align sublist_suffix_of_union sublist_suffix_of_union\n\n",
 "singleton_disjoint":
 "@[simp]\ntheorem singleton_disjoint : Disjoint [a] l ↔ a ∉ l :=\n  by\n  simp only [Disjoint, mem_singleton, forall_eq]\n  rfl\n#align singleton_disjoint singleton_disjoint\n\n",
 "nil_union":
 "@[simp]\ntheorem nil_union (l : list α) : [] ∪ l = l :=\n  rfl\n#align nil_union nil_union\n\n",
 "nil_bag_inter":
 "@[simp]\ntheorem nil_bag_inter (l : list α) : [].bag_inter l = [] := by cases l <;> rfl\n#align nil_bag_inter nil_bag_inter\n\n",
 "mem_union_right":
 "theorem mem_union_right (l₁ : list α) (h : a ∈ l₂) : a ∈ l₁ ∪ l₂ :=\n  mem_union.2 (or.inr h)\n#align mem_union_right mem_union_right\n\n",
 "mem_union_left":
 "theorem mem_union_left (h : a ∈ l₁) (l₂ : list α) : a ∈ l₁ ∪ l₂ :=\n  mem_union.2 (or.inl h)\n#align mem_union_left mem_union_left\n\n",
 "mem_union":
 "@[simp]\ntheorem mem_union : a ∈ l₁ ∪ l₂ ↔ a ∈ l₁ ∨ a ∈ l₂ := by\n  induction l₁ <;>\n    simp only [nil_union, not_mem_nil, false_or_iff, cons_union, mem_insert_iff, mem_cons_iff, or_assoc', *]\n#align mem_union mem_union\n\n",
 "mem_of_mem_inter_right":
 "theorem mem_of_mem_inter_right : a ∈ l₁ ∩ l₂ → a ∈ l₂ :=\n  of_mem_filter\n#align mem_of_mem_inter_right mem_of_mem_inter_right\n\n",
 "mem_of_mem_inter_left":
 "theorem mem_of_mem_inter_left : a ∈ l₁ ∩ l₂ → a ∈ l₁ :=\n  mem_of_mem_filter\n#align mem_of_mem_inter_left mem_of_mem_inter_left\n\n",
 "mem_inter_of_mem_of_mem":
 "theorem mem_inter_of_mem_of_mem : a ∈ l₁ → a ∈ l₂ → a ∈ l₁ ∩ l₂ :=\n  mem_filter_of_mem\n#align mem_inter_of_mem_of_mem mem_inter_of_mem_of_mem\n\n",
 "mem_inter":
 "@[simp]\ntheorem mem_inter : a ∈ l₁ ∩ l₂ ↔ a ∈ l₁ ∧ a ∈ l₂ :=\n  mem_filter\n#align mem_inter mem_inter\n\n",
 "mem_bag_inter":
 "@[simp]\ntheorem mem_bag_inter {a : α} : ∀ {l₁ l₂ : list α}, a ∈ l₁.bag_inter l₂ ↔ a ∈ l₁ ∧ a ∈ l₂\n  | [], l₂ => by simp only [nil_bag_inter, not_mem_nil, false_and_iff]\n  | b :: l₁, l₂ => by\n    by_cases b ∈ l₂\n    · rw [cons_bag_inter_of_pos _ h, mem_cons_iff, mem_cons_iff, mem_bag_inter]\n      by_cases ba : a = b\n      · simp only [ba, h, eq_self_iff_true, true_or_iff, true_and_iff]\n      · simp only [mem_erase_of_ne ba, ba, false_or_iff]\n    · rw [cons_bag_inter_of_neg _ h, mem_bag_inter, mem_cons_iff, or_and_right]\n      symm\n      apply or_iff_right_of_imp\n      rintro ⟨rfl, h'⟩\n      exact h.elim h'\n#align mem_bag_inter mem_bag_inter\n\n",
 "inter_subset_right":
 "theorem inter_subset_right (l₁ l₂ : list α) : l₁ ∩ l₂ ⊆ l₂ := fun a => mem_of_mem_inter_right\n#align inter_subset_right inter_subset_right\n\n",
 "inter_subset_left":
 "theorem inter_subset_left (l₁ l₂ : list α) : l₁ ∩ l₂ ⊆ l₁ :=\n  filter_subset _\n#align inter_subset_left inter_subset_left\n\n",
 "inter_reverse":
 "@[simp]\ntheorem inter_reverse {xs ys : list α} : xs.inter ys.reverse = xs.inter ys := by simp only [list.inter, mem_reverse]\n#align inter_reverse inter_reverse\n\n",
 "inter_nil":
 "@[simp]\ntheorem inter_nil (l : list α) : [] ∩ l = [] :=\n  rfl\n#align inter_nil inter_nil\n\n",
 "inter_eq_nil_iff_disjoint":
 "theorem inter_eq_nil_iff_disjoint : l₁ ∩ l₂ = [] ↔ Disjoint l₁ l₂ :=\n  by\n  simp only [eq_nil_iff_forall_not_mem, mem_inter, not_and]\n  rfl\n#align inter_eq_nil_iff_disjoint inter_eq_nil_iff_disjoint\n\n",
 "inter_cons_of_not_mem":
 "@[simp]\ntheorem inter_cons_of_not_mem (l₁ : list α) (h : a ∉ l₂) : (a :: l₁) ∩ l₂ = l₁ ∩ l₂ :=\n  if_neg h\n#align inter_cons_of_not_mem inter_cons_of_not_mem\n\n",
 "inter_cons_of_mem":
 "@[simp]\ntheorem inter_cons_of_mem (l₁ : list α) (h : a ∈ l₂) : (a :: l₁) ∩ l₂ = a :: l₁ ∩ l₂ :=\n  if_pos h\n#align inter_cons_of_mem inter_cons_of_mem\n\n",
 "forall_mem_union":
 "theorem forall_mem_union : (∀ x ∈ l₁ ∪ l₂, p x) ↔ (∀ x ∈ l₁, p x) ∧ ∀ x ∈ l₂, p x := by\n  simp only [mem_union, or_imp, forall_and]\n#align forall_mem_union forall_mem_union\n\n",
 "forall_mem_of_forall_mem_union_right":
 "theorem forall_mem_of_forall_mem_union_right (h : ∀ x ∈ l₁ ∪ l₂, p x) : ∀ x ∈ l₂, p x :=\n  (forall_mem_union.1 h).2\n#align forall_mem_of_forall_mem_union_right forall_mem_of_forall_mem_union_right\n\n",
 "forall_mem_of_forall_mem_union_left":
 "theorem forall_mem_of_forall_mem_union_left (h : ∀ x ∈ l₁ ∪ l₂, p x) : ∀ x ∈ l₁, p x :=\n  (forall_mem_union.1 h).1\n#align forall_mem_of_forall_mem_union_left forall_mem_of_forall_mem_union_left\n\n",
 "forall_mem_inter_of_forall_right":
 "theorem forall_mem_inter_of_forall_right (l₁ : list α) (h : ∀ x ∈ l₂, p x) : ∀ x, x ∈ l₁ ∩ l₂ → p x :=\n  BAll.imp_left (fun x => mem_of_mem_inter_right) h\n#align forall_mem_inter_of_forall_right forall_mem_inter_of_forall_right\n\n",
 "forall_mem_inter_of_forall_left":
 "theorem forall_mem_inter_of_forall_left (h : ∀ x ∈ l₁, p x) (l₂ : list α) : ∀ x, x ∈ l₁ ∩ l₂ → p x :=\n  BAll.imp_left (fun x => mem_of_mem_inter_left) h\n#align forall_mem_inter_of_forall_left forall_mem_inter_of_forall_left\n\n",
 "disjoint_take_drop":
 "theorem disjoint_take_drop {m n : ℕ} (hl : l.nodup) (h : m ≤ n) : Disjoint (l.take m) (l.drop n) :=\n  by\n  induction l generalizing m n\n  case nil m n => simp\n  case\n    cons x xs xs_ih m n =>\n    cases m <;> cases n <;>\n      simp only [disjoint_cons_left, mem_cons_iff, disjoint_cons_right, drop, true_or_iff, eq_self_iff_true, not_true,\n        false_and_iff, disjoint_nil_left, take]\n    · cases h\n    cases' hl with _ _ h₀ h₁; constructor\n    · intro h\n      exact h₀ _ (mem_of_mem_drop h) rfl\n    solve_by_elim (config := { max_depth := 4 }) [le_of_succ_le_succ]\n#align disjoint_take_drop disjoint_take_drop\n\n",
 "disjoint_singleton":
 "@[simp]\ntheorem disjoint_singleton : Disjoint l [a] ↔ a ∉ l := by rw [disjoint_comm, singleton_disjoint]\n#align disjoint_singleton disjoint_singleton\n\n",
 "disjoint_right":
 "theorem disjoint_right : Disjoint l₁ l₂ ↔ ∀ ⦃a⦄, a ∈ l₂ → a ∉ l₁ :=\n  disjoint_comm\n#align disjoint_right disjoint_right\n\n",
 "disjoint_of_subset_right":
 "theorem disjoint_of_subset_right (ss : l₂ ⊆ l) (d : Disjoint l₁ l) : Disjoint l₁ l₂ := fun x m m₁ => d m (ss m₁)\n#align disjoint_of_subset_right disjoint_of_subset_right\n\n",
 "disjoint_of_subset_left":
 "theorem disjoint_of_subset_left (ss : l₁ ⊆ l) (d : Disjoint l l₂) : Disjoint l₁ l₂ := fun x m => d (ss m)\n#align disjoint_of_subset_left disjoint_of_subset_left\n\n",
 "disjoint_of_disjoint_cons_right":
 "theorem disjoint_of_disjoint_cons_right {l₁ l₂} : Disjoint l₁ (a :: l₂) → Disjoint l₁ l₂ :=\n  disjoint_of_subset_right (list.subset_cons _ _)\n#align disjoint_of_disjoint_cons_right disjoint_of_disjoint_cons_right\n\n",
 "disjoint_of_disjoint_cons_left":
 "theorem disjoint_of_disjoint_cons_left {l₁ l₂} : Disjoint (a :: l₁) l₂ → Disjoint l₁ l₂ :=\n  disjoint_of_subset_left (list.subset_cons _ _)\n#align disjoint_of_disjoint_cons_left disjoint_of_disjoint_cons_left\n\n",
 "disjoint_of_disjoint_append_right_right":
 "theorem disjoint_of_disjoint_append_right_right (d : Disjoint l (l₁ ++ l₂)) : Disjoint l l₂ :=\n  (disjoint_append_right.1 d).2\n#align disjoint_of_disjoint_append_right_right disjoint_of_disjoint_append_right_right\n\n",
 "disjoint_of_disjoint_append_right_left":
 "theorem disjoint_of_disjoint_append_right_left (d : Disjoint l (l₁ ++ l₂)) : Disjoint l l₁ :=\n  (disjoint_append_right.1 d).1\n#align disjoint_of_disjoint_append_right_left disjoint_of_disjoint_append_right_left\n\n",
 "disjoint_of_disjoint_append_left_right":
 "theorem disjoint_of_disjoint_append_left_right (d : Disjoint (l₁ ++ l₂) l) : Disjoint l₂ l :=\n  (disjoint_append_left.1 d).2\n#align disjoint_of_disjoint_append_left_right disjoint_of_disjoint_append_left_right\n\n",
 "disjoint_of_disjoint_append_left_left":
 "theorem disjoint_of_disjoint_append_left_left (d : Disjoint (l₁ ++ l₂) l) : Disjoint l₁ l :=\n  (disjoint_append_left.1 d).1\n#align disjoint_of_disjoint_append_left_left disjoint_of_disjoint_append_left_left\n\n",
 "disjoint_nil_right":
 "@[simp]\ntheorem disjoint_nil_right (l : list α) : Disjoint l [] :=\n  by\n  rw [disjoint_comm]\n  exact disjoint_nil_left _\n#align disjoint_nil_right disjoint_nil_right\n\n",
 "disjoint_nil_left":
 "@[simp]\ntheorem disjoint_nil_left (l : list α) : Disjoint [] l := fun a => (not_mem_nil a).elim\n#align disjoint_nil_left disjoint_nil_left\n\n",
 "disjoint_left":
 "theorem disjoint_left : Disjoint l₁ l₂ ↔ ∀ ⦃a⦄, a ∈ l₁ → a ∉ l₂ :=\n  iff.rfl\n#align disjoint_left disjoint_left\n\n",
 "disjoint_iff_ne":
 "theorem disjoint_iff_ne : Disjoint l₁ l₂ ↔ ∀ a ∈ l₁, ∀ b ∈ l₂, a ≠ b := by\n  simp only [disjoint_left, imp_not_comm, forall_eq']\n#align disjoint_iff_ne disjoint_iff_ne\n\n",
 "disjoint_cons_right":
 "@[simp]\ntheorem disjoint_cons_right : Disjoint l₁ (a :: l₂) ↔ a ∉ l₁ ∧ Disjoint l₁ l₂ :=\n  disjoint_comm.trans <| by simp only [disjoint_comm, disjoint_cons_left]\n#align disjoint_cons_right disjoint_cons_right\n\n",
 "disjoint_cons_left":
 "@[simp]\ntheorem disjoint_cons_left : Disjoint (a :: l₁) l₂ ↔ a ∉ l₂ ∧ Disjoint l₁ l₂ :=\n  (@disjoint_append_left _ l₂ [a] l₁).trans <| by simp only [singleton_disjoint]\n#align disjoint_cons_left disjoint_cons_left\n\n",
 "disjoint_comm":
 "/- warning: disjoint_comm clashes with disjoint.comm -> disjoint_comm\nCase conversion may be inaccurate. Consider using '#align disjoint_comm disjoint_commₓ'. -/\n#print disjoint_comm /-\ntheorem disjoint_comm : Disjoint l₁ l₂ ↔ Disjoint l₂ l₁ :=\n  ⟨Disjoint.symm, Disjoint.symm⟩\n#align disjoint_comm disjoint_comm\n-/\n\n",
 "disjoint_append_right":
 "@[simp]\ntheorem disjoint_append_right : Disjoint l (l₁ ++ l₂) ↔ Disjoint l l₁ ∧ Disjoint l l₂ :=\n  disjoint_comm.trans <| by simp only [disjoint_comm, disjoint_append_left]\n#align disjoint_append_right disjoint_append_right\n\n",
 "disjoint_append_left":
 "@[simp]\ntheorem disjoint_append_left : Disjoint (l₁ ++ l₂) l ↔ Disjoint l₁ l ∧ Disjoint l₂ l := by\n  simp only [Disjoint, mem_append, or_imp, forall_and]\n#align disjoint_append_left disjoint_append_left\n\n",
 "count_bag_inter":
 "@[simp]\ntheorem count_bag_inter {a : α} : ∀ {l₁ l₂ : list α}, count a (l₁.bag_inter l₂) = min (count a l₁) (count a l₂)\n  | [], l₂ => by simp\n  | l₁, [] => by simp\n  | b :: l₁, l₂ => by\n    by_cases hb : b ∈ l₂\n    · rw [cons_bag_inter_of_pos _ hb, count_cons', count_cons', count_bag_inter, count_erase, ← min_add_add_right]\n      by_cases ab : a = b\n      · rw [if_pos ab, tsub_add_cancel_of_le]\n        rwa [succ_le_iff, count_pos, ab]\n      · rw [if_neg ab, tsub_zero, add_zero, add_zero]\n    · rw [cons_bag_inter_of_neg _ hb, count_bag_inter]\n      by_cases ab : a = b\n      · rw [← ab] at hb\n        rw [count_eq_zero.2 hb, min_zero, min_zero]\n      · rw [count_cons_of_ne ab]\n#align count_bag_inter count_bag_inter\n\n",
 "cons_union":
 "@[simp]\ntheorem cons_union (l₁ l₂ : list α) (a : α) : a :: l₁ ∪ l₂ = insert a (l₁ ∪ l₂) :=\n  rfl\n#align cons_union cons_union\n\n",
 "cons_bag_inter_of_pos":
 "@[simp]\ntheorem cons_bag_inter_of_pos (l₁ : list α) (h : a ∈ l₂) : (a :: l₁).bag_inter l₂ = a :: l₁.bag_inter (l₂.erase a) := by\n  cases l₂ <;> exact if_pos h\n#align cons_bag_inter_of_pos cons_bag_inter_of_pos\n\n",
 "cons_bag_inter_of_neg":
 "@[simp]\ntheorem cons_bag_inter_of_neg (l₁ : list α) (h : a ∉ l₂) : (a :: l₁).bag_inter l₂ = l₁.bag_inter l₂ :=\n  by\n  cases l₂; · simp only [bag_inter_nil]\n  simp only [erase_of_not_mem h, List.bagInter, if_neg h]\n#align cons_bag_inter_of_neg cons_bag_inter_of_neg\n\n",
 "bag_inter_sublist_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem bag_inter_sublist_left : ∀ l₁ l₂ : list α, «expr <+ » (l₁.bag_inter l₂) l₁\n  | [], l₂ => by simp\n  | b :: l₁, l₂ =>\n    by\n    by_cases b ∈ l₂ <;> simp only [h, cons_bag_inter_of_pos, cons_bag_inter_of_neg, not_false_iff]\n    · exact (bag_inter_sublist_left _ _).cons_cons _\n    · apply sublist_cons_of_sublist\n      apply bag_inter_sublist_left\n#align bag_inter_sublist_left bag_inter_sublist_left\n\n",
 "bag_inter_nil_iff_inter_nil":
 "theorem bag_inter_nil_iff_inter_nil : ∀ l₁ l₂ : list α, l₁.bag_inter l₂ = [] ↔ l₁ ∩ l₂ = []\n  | [], l₂ => by simp\n  | b :: l₁, l₂ => by\n    by_cases h : b ∈ l₂ <;> simp [h]\n    exact bag_inter_nil_iff_inter_nil l₁ l₂\n#align bag_inter_nil_iff_inter_nil bag_inter_nil_iff_inter_nil\n\n",
 "bag_inter_nil":
 "@[simp]\ntheorem bag_inter_nil (l : list α) : l.bag_inter [] = [] := by cases l <;> rfl\n#align bag_inter_nil bag_inter_nil\n\n"}