{"sub_nil":
 "@[simp]\ntheorem sub_nil {α : Type _} [AddGroup α] (as : List α) : sub as [] = as :=\n  by\n  rw [sub, pointwise_nil]\n  apply Eq.trans _ (map_id as)\n  congr with x\n  rw [sub_zero, id]\n#align sub_nil sub_nil\n\n",
 "pointwise_nil":
 "theorem pointwise_nil {f : α → β → γ} : ∀ as : List α, pointwise f as [] = as.map fun a => f a default\n  | [] => rfl\n  | a :: as => by simp only [pointwise_nil as, pointwise, eq_self_iff_true, and_self_iff, list.map]\n#align pointwise_nil pointwise_nil\n\n",
 "nil_sub":
 "@[simp]\ntheorem nil_sub {α : Type _} [AddGroup α] (as : List α) : sub [] as = neg as :=\n  by\n  rw [sub, nil_pointwise]\n  congr with x\n  rw [zero_sub]\n#align nil_sub nil_sub\n\n",
 "nil_pointwise":
 "-- pointwise\ntheorem nil_pointwise {f : α → β → γ} : ∀ bs : List β, pointwise f [] bs = bs.map (f default)\n  | [] => rfl\n  | b :: bs => by simp only [nil_pointwise bs, pointwise, eq_self_iff_true, and_self_iff, map]\n#align nil_pointwise nil_pointwise\n\n",
 "nil_add":
 "@[simp]\ntheorem nil_add {α : Type u} [AddMonoid α] (as : List α) : add [] as = as :=\n  by\n  rw [add, @nil_pointwise α α α ⟨0⟩ ⟨0⟩]\n  apply Eq.trans _ (map_id as)\n  congr with x\n  rw [zero_add, id]\n#align nil_add nil_add\n\n",
 "mem_get_of_ne_zero":
 "theorem mem_get_of_ne_zero : ∀ {n : ℕ} {as : List α}, get n as ≠ default → get n as ∈ as\n  | _, [], h1 => by exfalso; apply h1; rw [get_nil]\n  | 0, a :: as, h1 => or.inl rfl\n  | n + 1, a :: as, h1 => by\n    unfold get\n    apply or.inr (mem_get_of_ne_zero _)\n    apply h1\n#align mem_get_of_ne_zero mem_get_of_ne_zero\n\n",
 "mem_get_of_le":
 "theorem mem_get_of_le : ∀ {n : ℕ} {as : List α}, n < as.length → get n as ∈ as\n  | _, [], h1 => by cases h1\n  | 0, a :: as, _ => or.inl rfl\n  | n + 1, a :: as, h1 => by\n    apply or.inr; unfold get\n    apply mem_get_of_le\n    apply nat.lt_of_succ_lt_succ h1\n#align mem_get_of_le mem_get_of_le\n\n",
 "map_add_map":
 "theorem map_add_map {α : Type u} [AddMonoid α] (f g : α → α) {as : List α} :\n    add (as.map f) (as.map g) = as.map fun x => f x + g x :=\n  by\n  apply @eq_of_equiv _ (⟨0⟩ : Inhabited α)\n  · rw [length_map, length_add, max_eq_left, length_map]\n    apply le_of_eq\n    rw [length_map, length_map]\n  intro m\n  rw [get_add]\n  by_cases h : m < length as\n  · repeat' rw [@get_map α α ⟨0⟩ ⟨0⟩ _ _ _ h]\n  rw [not_lt] at h\n  repeat' rw [get_eq_default_of_le m] <;> try rw [length_map]; apply h\n  apply zero_add\n#align map_add_map map_add_map\n\n",
 "length_sub":
 "@[simp]\ntheorem length_sub [Zero α] [Sub α] {xs ys : List α} : (sub xs ys).length = max xs.length ys.length :=\n  @length_pointwise α α α ⟨0⟩ ⟨0⟩ _ _ _\n#align length_sub length_sub\n\n",
 "length_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.func.set -/\n/-\nCopyright (c) 2019 Seul Baek. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Seul Baek\n-/\n-- set\ntheorem length_set : ∀ {m : ℕ} {as : List α}, (list.func.set as m a).length = max as.length (m + 1)\n  | 0, [] => rfl\n  | 0, a :: as => by\n    rw [max_eq_left]\n    rfl\n    simp [nat.le_add_right]\n  | m + 1, [] => by simp only [Set, Nat.zero_max, length, @length_set m]\n  | m + 1, a :: as => by simp only [Set, Nat.max_succ_succ, length, @length_set m]\n#align length_set length_set\n\n",
 "length_pointwise":
 "theorem length_pointwise {f : α → β → γ} :\n    ∀ {as : List α} {bs : List β}, (pointwise f as bs).length = max as.length bs.length\n  | [], [] => rfl\n  | [], b :: bs => by simp only [pointwise, length, length_map, max_eq_right (nat.zero_le (length bs + 1))]\n  | a :: as, [] => by simp only [pointwise, length, length_map, max_eq_left (nat.zero_le (length as + 1))]\n  | a :: as, b :: bs => by simp only [pointwise, length, Nat.max_succ_succ, @length_pointwise as bs]\n#align length_pointwise length_pointwise\n\n",
 "length_neg":
 "@[simp]\ntheorem length_neg [Neg α] (as : List α) : (neg as).length = as.length := by simp only [neg, length_map]\n#align length_neg length_neg\n\n",
 "length_add":
 "@[simp]\ntheorem length_add {α : Type u} [Zero α] [Add α] {xs ys : List α} : (add xs ys).length = max xs.length ys.length :=\n  @length_pointwise α α α ⟨0⟩ ⟨0⟩ _ _ _\n#align length_add length_add\n\n",
 "get_sub":
 "-- sub\n@[simp]\ntheorem get_sub {α : Type u} [AddGroup α] {k : ℕ} {xs ys : List α} :\n    @get α ⟨0⟩ k (sub xs ys) = @get α ⟨0⟩ k xs - @get α ⟨0⟩ k ys :=\n  by\n  apply get_pointwise\n  apply sub_zero\n#align get_sub get_sub\n\n",
 "get_set_eq_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.func.set -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.func.set -/\ntheorem get_set_eq_of_ne {a : α} : ∀ {as : List α} (k : ℕ) (m : ℕ), m ≠ k → get m (list.func.set as k a) = get m as\n  | as, 0, m, h1 => by\n    cases m\n    contradiction\n    cases as <;> simp only [Set, get, get_nil]\n  | as, k + 1, m, h1 => by\n    cases as <;> cases m\n    simp only [Set, get]\n    · have h3 : get m (list.func.set nil k a) = default :=\n        by\n        rw [get_set_eq_of_ne k m, get_nil]\n        intro hc\n        apply h1\n        simp [hc]\n      apply h3\n    simp only [Set, get]\n    · apply get_set_eq_of_ne k m\n      intro hc\n      apply h1\n      simp [hc]\n#align get_set_eq_of_ne get_set_eq_of_ne\n\n",
 "get_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.func.set -/\n@[simp]\ntheorem get_set {a : α} : ∀ {k : ℕ} {as : List α}, get k (list.func.set as k a) = a\n  | 0, as => by cases as <;> rfl\n  | k + 1, as => by cases as <;> simp [get_set]\n#align get_set get_set\n\n",
 "get_pointwise":
 "theorem get_pointwise [Inhabited γ] {f : α → β → γ} (h1 : f default default = default) :\n    ∀ (k : Nat) (as : List α) (bs : List β), get k (pointwise f as bs) = f (get k as) (get k bs)\n  | k, [], [] => by simp only [h1, get_nil, pointwise, get]\n  | 0, [], b :: bs => by simp only [get_pointwise, get_nil, pointwise, get, Nat.zero_eq, map]\n  | k + 1, [], b :: bs =>\n    by\n    have : get k (map (f default) bs) = f default (get k bs) := by\n      simpa [nil_pointwise, get_nil] using get_pointwise k [] bs\n    simpa [get, get_nil, pointwise, map]\n  | 0, a :: as, [] => by simp only [get_pointwise, get_nil, pointwise, get, Nat.zero_eq, map]\n  | k + 1, a :: as, [] => by simpa [get, get_nil, pointwise, map, pointwise_nil, get_nil] using get_pointwise k as []\n  | 0, a :: as, b :: bs => by simp only [pointwise, get]\n  | k + 1, a :: as, b :: bs => by simp only [pointwise, get, get_pointwise k]\n#align get_pointwise get_pointwise\n\n",
 "get_nil":
 "@[simp]\ntheorem get_nil {k : ℕ} : (get k [] : α) = default := by cases k <;> rfl\n#align get_nil get_nil\n\n",
 "get_neg":
 "-- We want to drop the `inhabited` instances for a moment,\n-- so we close and open the namespace\n-- neg\n@[simp]\ntheorem get_neg [AddGroup α] {k : ℕ} {as : List α} : @get α ⟨0⟩ k (neg as) = -@get α ⟨0⟩ k as :=\n  by\n  unfold neg\n  rw [@get_map' α α ⟨0⟩]\n  apply neg_zero\n#align get_neg get_neg\n\n",
 "get_map'":
 "theorem get_map' {f : α → β} {n : ℕ} {as : List α} : f default = default → get n (as.map f) = f (get n as) :=\n  by\n  intro h1; by_cases h2 : n < as.length\n  · apply get_map h2\n  · rw [not_lt] at h2\n    rw [get_eq_default_of_le _ h2, get_eq_default_of_le, h1]\n    rw [length_map]\n    apply h2\n#align get_map' get_map'\n\n",
 "get_map":
 "theorem get_map {f : α → β} : ∀ {n : ℕ} {as : List α}, n < as.length → get n (as.map f) = f (get n as)\n  | _, [], h => by cases h\n  | 0, a :: as, h => rfl\n  | n + 1, a :: as, h1 =>\n    by\n    have h2 : n < length as := by\n      rw [← Nat.succ_le_iff, ← Nat.lt_succ_iff]\n      apply h1\n    apply get_map h2\n#align get_map get_map\n\n",
 "get_eq_default_of_le":
 "theorem get_eq_default_of_le : ∀ (k : ℕ) {as : List α}, as.length ≤ k → get k as = default\n  | 0, [], h1 => rfl\n  | 0, a :: as, h1 => by cases h1\n  | k + 1, [], h1 => rfl\n  | k + 1, a :: as, h1 => by\n    apply get_eq_default_of_le k\n    rw [← Nat.succ_le_succ_iff]; apply h1\n#align get_eq_default_of_le get_eq_default_of_le\n\n",
 "get_add":
 "-- add\n@[simp]\ntheorem get_add {α : Type u} [AddMonoid α] {k : ℕ} {xs ys : List α} :\n    @get α ⟨0⟩ k (add xs ys) = @get α ⟨0⟩ k xs + @get α ⟨0⟩ k ys :=\n  by\n  apply get_pointwise\n  apply zero_add\n#align get_add get_add\n\n",
 "forall_val_of_forall_mem":
 "theorem forall_val_of_forall_mem {as : List α} {p : α → Prop} : p default → (∀ x ∈ as, p x) → ∀ n, p (get n as) :=\n  by\n  intro h1 h2 n\n  by_cases h3 : n < as.length\n  · apply h2 _ (mem_get_of_le h3)\n  · rw [not_lt] at h3\n    rw [get_eq_default_of_le _ h3]\n    apply h1\n#align forall_val_of_forall_mem forall_val_of_forall_mem\n\n",
 "equiv_trans":
 "theorem equiv_trans : Equiv as1 as2 → Equiv as2 as3 → Equiv as1 as3 := fun h1 h2 k => Eq.trans (h1 k) (h2 k)\n#align equiv_trans equiv_trans\n\n",
 "equiv_symm":
 "theorem equiv_symm : Equiv as1 as2 → Equiv as2 as1 := fun h1 k => (h1 k).symm\n#align equiv_symm equiv_symm\n\n",
 "equiv_refl":
 "-- equiv\ntheorem equiv_refl : Equiv as as := fun k => rfl\n#align equiv_refl equiv_refl\n\n",
 "equiv_of_eq":
 "theorem equiv_of_eq : as1 = as2 → Equiv as1 as2 := by intro h1; rw [h1]; apply equiv_refl\n#align equiv_of_eq equiv_of_eq\n\n",
 "eq_of_equiv":
 "theorem eq_of_equiv : ∀ {as1 as2 : List α}, as1.length = as2.length → Equiv as1 as2 → as1 = as2\n  | [], [], h1, h2 => rfl\n  | _ :: _, [], h1, h2 => by cases h1\n  | [], _ :: _, h1, h2 => by cases h1\n  | a1 :: as1, a2 :: as2, h1, h2 => by\n    congr\n    · apply h2 0\n    have h3 : as1.length = as2.length := by simpa [add_left_inj, add_comm, length] using h1\n    apply eq_of_equiv h3\n    intro m\n    apply h2 (m + 1)\n#align eq_of_equiv eq_of_equiv\n\n",
 "eq_get_of_mem":
 "theorem eq_get_of_mem {a : α} : ∀ {as : List α}, a ∈ as → ∃ n : Nat, ∀ d : α, a = get n as\n  | [], h => by cases h\n  | b :: as, h => by\n    rw [mem_cons_iff] at h; cases h\n    · exists 0\n      intro d\n      apply h\n    · cases' eq_get_of_mem h with n h2\n      exists n + 1\n      apply h2\n#align eq_get_of_mem eq_get_of_mem\n\n",
 "add_nil":
 "@[simp]\ntheorem add_nil {α : Type u} [AddMonoid α] (as : List α) : add as [] = as :=\n  by\n  rw [add, @pointwise_nil α α α ⟨0⟩ ⟨0⟩]\n  apply Eq.trans _ (map_id as)\n  congr with x\n  rw [add_zero, id]\n#align add_nil add_nil\n\n"}