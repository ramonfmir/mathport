{"tfae_singleton":
 "theorem tfae_singleton (p) : TFAE [p] := by simp [tfae, -eq_iff_iff]\n#align tfae_singleton tfae_singleton\n\n",
 "tfae_of_forall":
 "theorem tfae_of_forall (b : Prop) (l : List Prop) (h : ∀ a ∈ l, a ↔ b) : TFAE l := fun a₁ h₁ a₂ h₂ =>\n  (h _ h₁).trans (h _ h₂).symm\n#align tfae_of_forall tfae_of_forall\n\n",
 "tfae_of_cycle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«->» -/\ntheorem tfae_of_cycle {a b} {l : List Prop} :\n    List.Chain («->» · ·) a (b :: l) → (ilast' b l → a) → TFAE (a :: b :: l) :=\n  by\n  induction' l with c l IH generalizing a b <;>\n    simp only [tfae_cons_cons, tfae_singleton, and_true_iff, chain_cons, chain.nil] at *\n  · intro a b\n    exact iff.intro a b\n  rintro ⟨ab, ⟨bc, ch⟩⟩ la\n  have := IH ⟨bc, ch⟩ (ab ∘ la)\n  exact ⟨⟨ab, la ∘ (this.2 c (or.inl rfl) _ (ilast'_mem _ _)).1 ∘ bc⟩, this⟩\n#align tfae_of_cycle tfae_of_cycle\n\n",
 "tfae_nil":
 "/-\nCopyright (c) 2018 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Simon Hudon\n-/\ntheorem tfae_nil : TFAE [] :=\n  forall_mem_nil _\n#align tfae_nil tfae_nil\n\n",
 "tfae_cons_of_mem":
 "theorem tfae_cons_of_mem {a b} {l : List Prop} (h : b ∈ l) : TFAE (a :: l) ↔ (a ↔ b) ∧ TFAE l :=\n  ⟨fun H => ⟨H a (by simp) b (or.inr h), fun p hp q hq => H _ (or.inr hp) _ (or.inr hq)⟩,\n    by\n    rintro ⟨ab, H⟩ p (rfl | hp) q (rfl | hq)\n    · rfl\n    · exact ab.trans (H _ h _ hq)\n    · exact (ab.trans (H _ h _ hp)).symm\n    · exact H _ hp _ hq⟩\n#align tfae_cons_of_mem tfae_cons_of_mem\n\n",
 "tfae_cons_cons":
 "theorem tfae_cons_cons {a b} {l : List Prop} : TFAE (a :: b :: l) ↔ (a ↔ b) ∧ TFAE (b :: l) :=\n  tfae_cons_of_mem (or.inl rfl)\n#align tfae_cons_cons tfae_cons_cons\n\n",
 "out":
 "theorem tfae.out {l} (h : TFAE l) (n₁ n₂) {a b} (h₁ : List.get? l n₁ = some a := by rfl)\n    (h₂ : List.get? l n₂ = some b := by rfl) : a ↔ b :=\n  h _ (List.get?_mem h₁) _ (List.get?_mem h₂)\n#align tfae.out tfae.out\n\n"}