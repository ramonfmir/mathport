{"sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem nodupkeys.sublist {l₁ l₂ : List (Sigma β)} (h : «expr <+ » l₁ l₂) : NodupKeys l₂ → NodupKeys l₁ :=\n  Nodup.sublist <| h.map _\n#align nodupkeys.sublist nodupkeys.sublist\n\n",
 "sizeof_kerase":
 "theorem sizeof_kerase {α} {β : α → Type _} [DecidableEq α] [SizeOf (Sigma β)] (x : α) (xs : List (Sigma β)) :\n    SizeOf.sizeOf (List.kerase x xs) ≤ SizeOf.sizeOf xs :=\n  by\n  unfold_wf\n  induction' xs with y ys\n  · simp\n  · by_cases x = y.1 <;> simp [*, list.sizeof]\n#align sizeof_kerase sizeof_kerase\n\n",
 "sizeof_dedupkeys":
 "theorem sizeof_dedupkeys {α} {β : α → Type _} [DecidableEq α] [SizeOf (Sigma β)] (xs : List (Sigma β)) :\n    SizeOf.sizeOf (List.dedupKeys xs) ≤ SizeOf.sizeOf xs :=\n  by\n  unfold_wf\n  induction' xs with x xs\n  · simp [List.dedupKeys]\n  · simp only [dedupkeys_cons, list.sizeof, kinsert_def, add_le_add_iff_left, Sigma.eta]\n    trans\n    apply sizeof_kerase\n    assumption\n#align sizeof_dedupkeys sizeof_dedupkeys\n\n",
 "perm_nodupkeys":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm_nodupkeys {l₁ l₂ : List (Sigma β)} (h : list.perm l₁ l₂) : NodupKeys l₁ ↔ NodupKeys l₂ :=\n  (h.map _).nodup_iff\n#align perm_nodupkeys perm_nodupkeys\n\n",
 "perm_lookup_all":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm_lookup_all (a : α) {l₁ l₂ : List (Sigma β)} (nd₁ : l₁.nodupkeys) (nd₂ : l₂.nodupkeys)\n    (p : list.perm l₁ l₂) : lookupAll a l₁ = lookupAll a l₂ := by\n  simp [lookup_all_eq_lookup, nd₁, nd₂, perm_lookup a nd₁ nd₂ p]\n#align perm_lookup_all perm_lookup_all\n\n",
 "perm_lookup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm_lookup (a : α) {l₁ l₂ : List (Sigma β)} (nd₁ : l₁.nodupkeys) (nd₂ : l₂.nodupkeys) (p : list.perm l₁ l₂) :\n    dlookup a l₁ = dlookup a l₂ := by ext b <;> simp [mem_lookup_iff, nd₁, nd₂] <;> exact p.mem_iff\n#align perm_lookup perm_lookup\n\n",
 "pairwise_ne":
 "theorem nodupkeys.pairwise_ne {l} (h : NodupKeys l) : Pairwise (fun s s' : Sigma β => s.1 ≠ s'.1) l :=\n  nodupKeys_iff_pairwise.1 h\n#align nodupkeys.pairwise_ne nodupkeys.pairwise_ne\n\n",
 "of_mem_lookup":
 "theorem of_mem_lookup {a : α} {b : β a} : ∀ {l : List (Sigma β)}, b ∈ dlookup a l → sigma.mk a b ∈ l\n  | ⟨a', b'⟩ :: l, H => by\n    by_cases h : a = a'\n    · subst a'\n      simp at H\n      simp [H]\n    · simp [h] at H\n      exact or.inr (of_mem_lookup H)\n#align of_mem_lookup of_mem_lookup\n\n",
 "not_mem_keys_of_nodupkeys_cons":
 "theorem not_mem_keys_of_nodupkeys_cons {s : Sigma β} {l : List (Sigma β)} (h : NodupKeys (s :: l)) : s.1 ∉ l.keys :=\n  (nodupKeys_cons.1 h).1\n#align not_mem_keys_of_nodupkeys_cons not_mem_keys_of_nodupkeys_cons\n\n",
 "not_mem_keys_kerase":
 "@[simp]\ntheorem not_mem_keys_kerase (a) {l : List (Sigma β)} (nd : l.nodupkeys) : a ∉ (kerase a l).keys :=\n  by\n  induction l\n  case nil => simp\n  case cons hd tl ih =>\n    simp at nd\n    by_cases h : a = hd.1\n    · subst h\n      simp [nd.1]\n    · simp [h, ih nd.2]\n#align not_mem_keys_kerase not_mem_keys_kerase\n\n",
 "not_mem_keys":
 "theorem not_mem_keys {a} {l : List (Sigma β)} : a ∉ l.keys ↔ ∀ b : β a, sigma.mk a b ∉ l :=\n  (not_congr mem_keys).trans not_exists\n#align not_mem_keys not_mem_keys\n\n",
 "not_eq_key":
 "theorem not_eq_key {a} {l : List (Sigma β)} : a ∉ l.keys ↔ ∀ s : Sigma β, s ∈ l → a ≠ s.1 :=\n  iff.intro (fun h₁ s h₂ e => absurd (mem_keys_of_mem h₂) (by rwa [e] at h₁)) fun f h₁ =>\n    let ⟨b, h₂⟩ := exists_of_mem_keys h₁\n    f _ h₂ rfl\n#align not_eq_key not_eq_key\n\n",
 "nodupkeys_singleton":
 "theorem nodupkeys_singleton (s : Sigma β) : NodupKeys [s] :=\n  nodup_singleton _\n#align nodupkeys_singleton nodupkeys_singleton\n\n",
 "nodupkeys_of_nodupkeys_cons":
 "theorem nodupkeys_of_nodupkeys_cons {s : Sigma β} {l : List (Sigma β)} (h : NodupKeys (s :: l)) : NodupKeys l :=\n  (nodupKeys_cons.1 h).2\n#align nodupkeys_of_nodupkeys_cons nodupkeys_of_nodupkeys_cons\n\n",
 "nodupkeys_nil":
 "@[simp]\ntheorem nodupkeys_nil : @NodupKeys α β [] :=\n  Pairwise.nil\n#align nodupkeys_nil nodupkeys_nil\n\n",
 "nodupkeys_join":
 "theorem nodupkeys_join {L : List (List (Sigma β))} :\n    NodupKeys (join L) ↔ (∀ l ∈ L, NodupKeys l) ∧ Pairwise Disjoint (L.map keys) :=\n  by\n  rw [nodupkeys_iff_pairwise, pairwise_join, pairwise_map]\n  refine' and_congr (ball_congr fun l h => by simp [nodupkeys_iff_pairwise]) _\n  apply iff_of_eq; congr with (l₁ l₂)\n  simp [keys, disjoint_iff_ne]\n#align nodupkeys_join nodupkeys_join\n\n",
 "nodupkeys_iff_pairwise":
 "theorem nodupkeys_iff_pairwise {l} : NodupKeys l ↔ Pairwise (fun s s' : Sigma β => s.1 ≠ s'.1) l :=\n  pairwise_map' _\n#align nodupkeys_iff_pairwise nodupkeys_iff_pairwise\n\n",
 "nodupkeys_dedupkeys":
 "theorem nodupkeys_dedupkeys (l : List (Sigma β)) : NodupKeys (dedupKeys l) :=\n  by\n  dsimp [dedupkeys]\n  generalize hl : nil = l'\n  have : nodupkeys l' := by\n    rw [← hl]\n    apply nodup_nil\n  clear hl\n  induction' l with x xs\n  · apply this\n  · cases x\n    simp [dedupkeys]\n    constructor\n    · simp [keys_kerase]\n      apply l_ih.not_mem_erase\n    · exact l_ih.kerase _\n#align nodupkeys_dedupkeys nodupkeys_dedupkeys\n\n",
 "nodupkeys_cons":
 "@[simp]\ntheorem nodupkeys_cons {s : Sigma β} {l : List (Sigma β)} : NodupKeys (s :: l) ↔ s.1 ∉ l.keys ∧ NodupKeys l := by\n  simp [keys, nodupkeys]\n#align nodupkeys_cons nodupkeys_cons\n\n",
 "nodup_enum_map_fst":
 "theorem nodup_enum_map_fst (l : List α) : (l.enum.map Prod.fst).nodup := by simp [List.nodup_range]\n#align nodup_enum_map_fst nodup_enum_map_fst\n\n",
 "nodup":
 "protected theorem nodupkeys.nodup {l : List (Sigma β)} : NodupKeys l → Nodup l :=\n  Nodup.of_map _\n#align nodupkeys.nodup nodupkeys.nodup\n\n",
 "nil_kunion":
 "@[simp]\ntheorem nil_kunion {l : List (Sigma β)} : kunion [] l = l :=\n  rfl\n#align nil_kunion nil_kunion\n\n",
 "mem_lookup_kunion_middle":
 "theorem mem_lookup_kunion_middle {a} {b : β a} {l₁ l₂ l₃ : List (Sigma β)} (h₁ : b ∈ dlookup a (kunion l₁ l₃))\n    (h₂ : a ∉ keys l₂) : b ∈ dlookup a (kunion (kunion l₁ l₂) l₃) :=\n  match mem_dlookup_kunion.mp h₁ with\n  | or.inl h => mem_dlookup_kunion.mpr (or.inl (mem_dlookup_kunion.mpr (or.inl h)))\n  | or.inr h => mem_dlookup_kunion.mpr <| or.inr ⟨mt mem_keys_kunion.mp (not_or.mpr ⟨h.1, h₂⟩), h.2⟩\n#align mem_lookup_kunion_middle mem_lookup_kunion_middle\n\n",
 "mem_lookup_kunion":
 "@[simp]\ntheorem mem_lookup_kunion {a} {b : β a} {l₁ l₂ : List (Sigma β)} :\n    b ∈ dlookup a (kunion l₁ l₂) ↔ b ∈ dlookup a l₁ ∨ a ∉ l₁.keys ∧ b ∈ dlookup a l₂ :=\n  by\n  induction l₁ generalizing l₂\n  case nil => simp\n  case cons s _ ih =>\n    cases' s with a'\n    by_cases h₁ : a = a'\n    · subst h₁\n      simp\n    · let h₂ := @ih (kerase a' l₂)\n      simp [h₁] at h₂\n      simp [h₁, h₂]\n#align mem_lookup_kunion mem_lookup_kunion\n\n",
 "mem_lookup_iff":
 "theorem mem_lookup_iff {a : α} {b : β a} {l : List (Sigma β)} (nd : l.nodupkeys) : b ∈ dlookup a l ↔ sigma.mk a b ∈ l :=\n  ⟨of_mem_dlookup, mem_dlookup nd⟩\n#align mem_lookup_iff mem_lookup_iff\n\n",
 "mem_lookup_all":
 "theorem mem_lookup_all {a : α} {b : β a} : ∀ {l : List (Sigma β)}, b ∈ lookupAll a l ↔ sigma.mk a b ∈ l\n  | [] => by simp\n  | ⟨a', b'⟩ :: l => by\n    by_cases h : a = a' <;>\n      [·\n        subst h\n        simp [*], simp [*]]\n#align mem_lookup_all mem_lookup_all\n\n",
 "mem_lookup":
 "theorem mem_lookup {a} {b : β a} {l : List (Sigma β)} (nd : l.nodupkeys) (h : sigma.mk a b ∈ l) : b ∈ dlookup a l :=\n  by\n  cases' option.is_some_iff_exists.mp (lookup_is_some.mpr (mem_keys_of_mem h)) with b' h'\n  cases nd.eq_of_mk_mem h (of_mem_lookup h')\n  exact h'\n#align mem_lookup mem_lookup\n\n",
 "mem_keys_of_mem_keys_kerase":
 "theorem mem_keys_of_mem_keys_kerase {a₁ a₂} {l : List (Sigma β)} : a₁ ∈ (kerase a₂ l).keys → a₁ ∈ l.keys :=\n  @kerase_keys_subset _ _ _ _ _ _\n#align mem_keys_of_mem_keys_kerase mem_keys_of_mem_keys_kerase\n\n",
 "mem_keys_of_mem":
 "theorem mem_keys_of_mem {s : Sigma β} {l : List (Sigma β)} : s ∈ l → s.1 ∈ l.keys :=\n  mem_map_of_mem Sigma.fst\n#align mem_keys_of_mem mem_keys_of_mem\n\n",
 "mem_keys_kunion":
 "@[simp]\ntheorem mem_keys_kunion {a} {l₁ l₂ : List (Sigma β)} : a ∈ (kunion l₁ l₂).keys ↔ a ∈ l₁.keys ∨ a ∈ l₂.keys :=\n  by\n  induction l₁ generalizing l₂\n  case nil => simp\n  case cons s l₁ ih => by_cases h : a = s.1 <;> [simp [h], simp [h, ih]]\n#align mem_keys_kunion mem_keys_kunion\n\n",
 "mem_keys_kinsert":
 "theorem mem_keys_kinsert {a a'} {b' : β a'} {l : List (Sigma β)} : a ∈ (kinsert a' b' l).keys ↔ a = a' ∨ a ∈ l.keys :=\n  by by_cases h : a = a' <;> simp [h]\n#align mem_keys_kinsert mem_keys_kinsert\n\n",
 "mem_keys_kerase_of_ne":
 "@[simp]\ntheorem mem_keys_kerase_of_ne {a₁ a₂} {l : List (Sigma β)} (h : a₁ ≠ a₂) : a₁ ∈ (kerase a₂ l).keys ↔ a₁ ∈ l.keys :=\n  iff.intro mem_keys_of_mem_keys_kerase fun p =>\n    if q : a₂ ∈ l.keys then\n      match l, kerase a₂ l, exists_of_kerase q, p with\n      | _, _, ⟨_, _, _, _, rfl, rfl⟩, p => by simpa [keys, h] using p\n    else by simp [q, p]\n#align mem_keys_kerase_of_ne mem_keys_kerase_of_ne\n\n",
 "mem_keys":
 "theorem mem_keys {a} {l : List (Sigma β)} : a ∈ l.keys ↔ ∃ b : β a, sigma.mk a b ∈ l :=\n  ⟨exists_of_mem_keys, fun ⟨b, h⟩ => mem_keys_of_mem h⟩\n#align mem_keys mem_keys\n\n",
 "mem_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem mem_ext {l₀ l₁ : List (Sigma β)} (nd₀ : l₀.nodup) (nd₁ : l₁.nodup) (h : ∀ x, x ∈ l₀ ↔ x ∈ l₁) :\n    list.perm l₀ l₁ := by\n  induction' l₀ with x xs generalizing l₁ <;> cases' l₁ with y ys\n  · constructor\n  iterate 2 \n    first |specialize h x|specialize h y; simp at h\n    cases h\n  simp at nd₀ nd₁\n  classical\n    obtain rfl | h' := eq_or_ne x y\n    · constructor\n      refine' l₀_ih nd₀.2 nd₁.2 fun a => _\n      specialize h a\n      simp at h\n      obtain rfl | h' := eq_or_ne a x\n      · exact iff_of_false nd₀.1 nd₁.1\n      · simpa [h'] using h\n    · trans x :: y :: ys.erase x\n      · constructor\n        refine' l₀_ih nd₀.2 ((nd₁.2.erase _).cons fun h => nd₁.1 <| mem_of_mem_erase h) fun a => _\n        · specialize h a\n          simp at h\n          obtain rfl | h' := eq_or_ne a x\n          · exact iff_of_false nd₀.1 fun h => h.elim h' nd₁.2.not_mem_erase\n          · rw [or_iff_right h'] at h\n            rw [h, mem_cons_iff]\n            exact or_congr_right (mem_erase_of_ne h').symm\n      trans y :: x :: ys.erase x\n      · constructor\n      · constructor\n        symm\n        apply perm_cons_erase\n        specialize h x\n        simp [h'] at h\n        exact h\n#align mem_ext mem_ext\n\n",
 "map_lookup_eq_find":
 "theorem map_lookup_eq_find (a : α) : ∀ l : List (Sigma β), (dlookup a l).map (sigma.mk a) = find? (fun s => a = s.1) l\n  | [] => rfl\n  | ⟨a', b'⟩ :: l => by\n    by_cases h : a = a'\n    · subst a'\n      simp\n    · simp [h, map_lookup_eq_find]\n#align map_lookup_eq_find map_lookup_eq_find\n\n",
 "lookup_nil":
 "@[simp]\ntheorem lookup_nil (a : α) : dlookup a [] = @none (β a) :=\n  rfl\n#align lookup_nil lookup_nil\n\n",
 "lookup_kunion_right":
 "@[simp]\ntheorem lookup_kunion_right {a} {l₁ l₂ : List (Sigma β)} (h : a ∉ l₁.keys) : dlookup a (kunion l₁ l₂) = dlookup a l₂ :=\n  by\n  induction l₁ generalizing l₂\n  case nil => simp\n  case cons _ _ ih => simp [not_or] at h; simp [h.1, ih h.2]\n#align lookup_kunion_right lookup_kunion_right\n\n",
 "lookup_kunion_left":
 "@[simp]\ntheorem lookup_kunion_left {a} {l₁ l₂ : List (Sigma β)} (h : a ∈ l₁.keys) : dlookup a (kunion l₁ l₂) = dlookup a l₁ :=\n  by\n  induction' l₁ with s _ ih generalizing l₂ <;> simp at h <;> cases h <;> cases' s with a'\n  · subst h\n    simp\n  · rw [kunion_cons]\n    by_cases h' : a = a'\n    · subst h'\n      simp\n    · simp [h', ih h]\n#align lookup_kunion_left lookup_kunion_left\n\n",
 "lookup_kinsert_ne":
 "theorem lookup_kinsert_ne {a a'} {b' : β a'} {l : List (Sigma β)} (h : a ≠ a') :\n    dlookup a (kinsert a' b' l) = dlookup a l := by simp [h]\n#align lookup_kinsert_ne lookup_kinsert_ne\n\n",
 "lookup_kinsert":
 "theorem lookup_kinsert {a} {b : β a} (l : List (Sigma β)) : dlookup a (kinsert a b l) = some b := by\n  simp only [kinsert, lookup_cons_eq]\n#align lookup_kinsert lookup_kinsert\n\n",
 "lookup_kerase_ne":
 "@[simp]\ntheorem lookup_kerase_ne {a a'} {l : List (Sigma β)} (h : a ≠ a') : dlookup a (kerase a' l) = dlookup a l :=\n  by\n  induction l\n  case nil => rfl\n  case cons hd tl ih =>\n    cases' hd with ah bh\n    by_cases h₁ : a = ah <;> by_cases h₂ : a' = ah\n    · substs h₁ h₂\n      cases ne.irrefl h\n    · subst h₁\n      simp [h₂]\n    · subst h₂\n      simp [h]\n    · simp [h₁, h₂, ih]\n#align lookup_kerase_ne lookup_kerase_ne\n\n",
 "lookup_kerase":
 "@[simp]\ntheorem lookup_kerase (a) {l : List (Sigma β)} (nd : l.nodupkeys) : dlookup a (kerase a l) = none :=\n  dlookup_eq_none.mpr (not_mem_keys_kerase a nd)\n#align lookup_kerase lookup_kerase\n\n",
 "lookup_is_some":
 "theorem lookup_is_some {a : α} : ∀ {l : List (Sigma β)}, (dlookup a l).is_some ↔ a ∈ l.keys\n  | [] => by simp\n  | ⟨a', b⟩ :: l => by\n    by_cases h : a = a'\n    · subst a'\n      simp\n    · simp [h, lookup_is_some]\n#align lookup_is_some lookup_is_some\n\n",
 "lookup_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem lookup_ext {l₀ l₁ : List (Sigma β)} (nd₀ : l₀.nodupkeys) (nd₁ : l₁.nodupkeys)\n    (h : ∀ x y, y ∈ l₀.lookup x ↔ y ∈ l₁.lookup x) : list.perm l₀ l₁ :=\n  mem_ext nd₀.nodup nd₁.nodup fun ⟨a, b⟩ => by rw [← mem_lookup_iff, ← mem_lookup_iff, h] <;> assumption\n#align lookup_ext lookup_ext\n\n",
 "lookup_eq_none":
 "theorem lookup_eq_none {a : α} {l : List (Sigma β)} : dlookup a l = none ↔ a ∉ l.keys := by\n  simp [← lookup_is_some, Option.isNone_iff_eq_none]\n#align lookup_eq_none lookup_eq_none\n\n",
 "lookup_dedupkeys":
 "theorem lookup_dedupkeys (a : α) (l : List (Sigma β)) : dlookup a (dedupKeys l) = dlookup a l :=\n  by\n  induction l; rfl\n  cases' l_hd with a' b\n  by_cases a = a'\n  · subst a'\n    rw [dedupkeys_cons, lookup_kinsert, lookup_cons_eq]\n  · rw [dedupkeys_cons, lookup_kinsert_ne h, l_ih, lookup_cons_ne]\n    exact h\n#align lookup_dedupkeys lookup_dedupkeys\n\n",
 "lookup_cons_ne":
 "@[simp]\ntheorem lookup_cons_ne (l) {a} : ∀ s : Sigma β, a ≠ s.1 → dlookup a (s :: l) = dlookup a l\n  | ⟨a', b⟩, h => dif_neg h.symm\n#align lookup_cons_ne lookup_cons_ne\n\n",
 "lookup_cons_eq":
 "@[simp]\ntheorem lookup_cons_eq (l) (a : α) (b : β a) : dlookup a (⟨a, b⟩ :: l) = some b :=\n  dif_pos rfl\n#align lookup_cons_eq lookup_cons_eq\n\n",
 "lookup_all_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem lookup_all_sublist (a : α) : ∀ l : List (Sigma β), «expr <+ » ((lookupAll a l).map (sigma.mk a)) l\n  | [] => by simp\n  | ⟨a', b'⟩ :: l => by\n    by_cases h : a = a'\n    · subst h\n      simp\n      exact (lookup_all_sublist l).cons2 _ _ _\n    · simp [h]\n      exact (lookup_all_sublist l).cons _ _ _\n#align lookup_all_sublist lookup_all_sublist\n\n",
 "lookup_all_nodup":
 "theorem lookup_all_nodup (a : α) {l : List (Sigma β)} (h : l.nodupkeys) : (lookupAll a l).nodup := by\n  rw [lookup_all_eq_lookup a h] <;> apply Option.toList_nodup\n#align lookup_all_nodup lookup_all_nodup\n\n",
 "lookup_all_nil":
 "@[simp]\ntheorem lookup_all_nil (a : α) : lookupAll a [] = @nil (β a) :=\n  rfl\n#align lookup_all_nil lookup_all_nil\n\n",
 "lookup_all_length_le_one":
 "theorem lookup_all_length_le_one (a : α) {l : List (Sigma β)} (h : l.nodupkeys) : length (lookupAll a l) ≤ 1 := by\n  have := nodup.sublist ((lookup_all_sublist a l).map _) h <;> rw [map_map] at this <;>\n    rwa [← nodup_replicate, ← map_const _ a]\n#align lookup_all_length_le_one lookup_all_length_le_one\n\n",
 "lookup_all_eq_nil":
 "theorem lookup_all_eq_nil {a : α} : ∀ {l : List (Sigma β)}, lookupAll a l = [] ↔ ∀ b : β a, sigma.mk a b ∉ l\n  | [] => by simp\n  | ⟨a', b⟩ :: l => by\n    by_cases h : a = a'\n    · subst a'\n      simp\n    · simp [h, lookup_all_eq_nil]\n#align lookup_all_eq_nil lookup_all_eq_nil\n\n",
 "lookup_all_eq_lookup":
 "theorem lookup_all_eq_lookup (a : α) {l : List (Sigma β)} (h : l.nodupkeys) : lookupAll a l = (dlookup a l).to_list :=\n  by\n  rw [← head_lookup_all]\n  have := lookup_all_length_le_one a h; revert this\n  rcases lookup_all a l with (_ | ⟨b, _ | ⟨c, l⟩⟩) <;> intro <;> try rfl\n  exact absurd this (by decide)\n#align lookup_all_eq_lookup lookup_all_eq_lookup\n\n",
 "lookup_all_cons_ne":
 "@[simp]\ntheorem lookup_all_cons_ne (l) {a} : ∀ s : Sigma β, a ≠ s.1 → lookupAll a (s :: l) = lookupAll a l\n  | ⟨a', b⟩, h => dif_neg h.symm\n#align lookup_all_cons_ne lookup_all_cons_ne\n\n",
 "lookup_all_cons_eq":
 "@[simp]\ntheorem lookup_all_cons_eq (l) (a : α) (b : β a) : lookupAll a (⟨a, b⟩ :: l) = b :: lookupAll a l :=\n  dif_pos rfl\n#align lookup_all_cons_eq lookup_all_cons_eq\n\n",
 "kunion_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm.kunion_right {l₁ l₂ : List (Sigma β)} (p : list.perm l₁ l₂) (l) : list.perm (kunion l₁ l) (kunion l₂ l) :=\n  by\n  induction p generalizing l\n  case nil => rfl\n  case cons hd tl₁ tl₂ p ih => simp [ih (kerase hd.1 l), perm.cons]\n  case swap s₁ s₂ l => simp [kerase_comm, perm.swap]\n  case trans l₁ l₂ l₃ p₁₂ p₂₃ ih₁₂ ih₂₃ => exact perm.trans (ih₁₂ l) (ih₂₃ l)\n#align perm.kunion_right perm.kunion_right\n\n",
 "kunion_nil":
 "@[simp]\ntheorem kunion_nil : ∀ {l : List (Sigma β)}, kunion l [] = l\n  | [] => rfl\n  | _ :: l => by rw [kunion, kerase_nil, kunion_nil]\n#align kunion_nil kunion_nil\n\n",
 "kunion_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm.kunion_left :\n    ∀ (l) {l₁ l₂ : List (Sigma β)}, l₁.nodupkeys → list.perm l₁ l₂ → list.perm (kunion l l₁) (kunion l l₂)\n  | [], _, _, _, p => p\n  | s :: l, l₁, l₂, nd₁, p => by simp [((p.kerase nd₁).kunion_left l <| nd₁.kerase s.1).cons s]\n#align perm.kunion_left perm.kunion_left\n\n",
 "kunion_kerase":
 "@[simp]\ntheorem kunion_kerase {a} : ∀ {l₁ l₂ : List (Sigma β)}, kunion (kerase a l₁) (kerase a l₂) = kerase a (kunion l₁ l₂)\n  | [], _ => rfl\n  | s :: _, l => by by_cases h : a = s.1 <;> simp [h, kerase_comm a s.1 l, kunion_kerase]\n#align kunion_kerase kunion_kerase\n\n",
 "kunion_cons":
 "@[simp]\ntheorem kunion_cons {s} {l₁ l₂ : List (Sigma β)} : kunion (s :: l₁) l₂ = s :: kunion l₁ (kerase s.1 l₂) :=\n  rfl\n#align kunion_cons kunion_cons\n\n",
 "kunion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm.kunion {l₁ l₂ l₃ l₄ : List (Sigma β)} (nd₃ : l₃.nodupkeys) (p₁₂ : list.perm l₁ l₂)\n    (p₃₄ : list.perm l₃ l₄) : list.perm (kunion l₁ l₃) (kunion l₂ l₄) :=\n  (p₁₂.kunion_right l₃).trans (p₃₄.kunion_left l₂ nd₃)\n#align perm.kunion perm.kunion\n\n",
 "kreplace_self":
 "theorem kreplace_self {a : α} {b : β a} {l : List (Sigma β)} (nd : NodupKeys l) (h : sigma.mk a b ∈ l) :\n    kreplace a b l = l :=\n  by\n  refine' (lookmap_congr _).trans (lookmap_id' (Option.guard fun s => a = s.1) _ _)\n  · rintro ⟨a', b'⟩ h'\n    dsimp [Option.guard]\n    split_ifs\n    · subst a'\n      exact ⟨rfl, heq_of_eq <| nd.eq_of_mk_mem h h'⟩\n    · rfl\n  · rintro ⟨a₁, b₁⟩ ⟨a₂, b₂⟩\n    dsimp [Option.guard]\n    split_ifs\n    · exact id\n    · rintro ⟨⟩\n#align kreplace_self kreplace_self\n\n",
 "kreplace_of_forall_not":
 "theorem kreplace_of_forall_not (a : α) (b : β a) {l : List (Sigma β)} (H : ∀ b : β a, sigma.mk a b ∉ l) :\n    kreplace a b l = l :=\n  lookmap_of_forall_not _ <| by\n    rintro ⟨a', b'⟩ h; dsimp; split_ifs\n    · subst a'\n      exact H _ h; · rfl\n#align kreplace_of_forall_not kreplace_of_forall_not\n\n",
 "kreplace_nodupkeys":
 "theorem kreplace_nodupkeys (a : α) (b : β a) {l : List (Sigma β)} : (kreplace a b l).nodupkeys ↔ l.nodupkeys := by\n  simp [nodupkeys, keys_kreplace]\n#align kreplace_nodupkeys kreplace_nodupkeys\n\n",
 "kreplace":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm.kreplace {a : α} {b : β a} {l₁ l₂ : List (Sigma β)} (nd : l₁.nodupkeys) :\n    list.perm l₁ l₂ → list.perm (kreplace a b l₁) (kreplace a b l₂) :=\n  perm_lookmap _ <| by\n    refine' nd.pairwise_ne.imp _\n    intro x y h z h₁ w h₂\n    split_ifs  at h₁ h₂ <;> cases h₁ <;> cases h₂\n    exact (h (h_2.symm.trans h_1)).elim\n#align perm.kreplace perm.kreplace\n\n",
 "kinsert_nodupkeys":
 "theorem kinsert_nodupkeys (a) (b : β a) {l : List (Sigma β)} (nd : l.nodupkeys) : (kinsert a b l).nodupkeys :=\n  nodupKeys_cons.mpr ⟨not_mem_keys_kerase a nd, nd.kerase a⟩\n#align kinsert_nodupkeys kinsert_nodupkeys\n\n",
 "kinsert_def":
 "@[simp]\ntheorem kinsert_def {a} {b : β a} {l : List (Sigma β)} : kinsert a b l = ⟨a, b⟩ :: kerase a l :=\n  rfl\n#align kinsert_def kinsert_def\n\n",
 "kinsert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm.kinsert {a} {b : β a} {l₁ l₂ : List (Sigma β)} (nd₁ : l₁.nodupkeys) (p : list.perm l₁ l₂) :\n    list.perm (kinsert a b l₁) (kinsert a b l₂) :=\n  (p.kerase nd₁).cons _\n#align perm.kinsert perm.kinsert\n\n",
 "keys_nil":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Sean Leather\n-/\n@[simp]\ntheorem keys_nil : @keys α β [] = [] :=\n  rfl\n#align keys_nil keys_nil\n\n",
 "keys_kreplace":
 "theorem keys_kreplace (a : α) (b : β a) : ∀ l : List (Sigma β), (kreplace a b l).keys = l.keys :=\n  lookmap_map_eq _ _ <| by\n    rintro ⟨a₁, b₂⟩ ⟨a₂, b₂⟩ <;> dsimp <;> split_ifs <;> simp (config := { contextual := true }) [h]\n#align keys_kreplace keys_kreplace\n\n",
 "keys_kerase":
 "theorem keys_kerase {a} {l : List (Sigma β)} : (kerase a l).keys = l.keys.erase a := by\n  rw [keys, kerase, ← erasep_map Sigma.fst l, erase_eq_erasep]\n#align keys_kerase keys_kerase\n\n",
 "keys_cons":
 "@[simp]\ntheorem keys_cons {s} {l : List (Sigma β)} : (s :: l).keys = s.1 :: l.keys :=\n  rfl\n#align keys_cons keys_cons\n\n",
 "kextract_eq_lookup_kerase":
 "@[simp]\ntheorem kextract_eq_lookup_kerase (a : α) : ∀ l : List (Sigma β), kextract a l = (dlookup a l, kerase a l)\n  | [] => rfl\n  | ⟨a', b⟩ :: l => by\n    simp [kextract]; dsimp; split_ifs\n    · subst a'\n      simp [kerase]\n    · simp [kextract, ne.symm h, kextract_eq_lookup_kerase l, kerase]\n#align kextract_eq_lookup_kerase kextract_eq_lookup_kerase\n\n",
 "kerase_sublist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr <+ » -/\ntheorem kerase_sublist (a : α) (l : List (Sigma β)) : «expr <+ » (kerase a l) l :=\n  eraseP_sublist _\n#align kerase_sublist kerase_sublist\n\n",
 "kerase_of_not_mem_keys":
 "@[simp]\ntheorem kerase_of_not_mem_keys {a} {l : List (Sigma β)} (h : a ∉ l.keys) : kerase a l = l := by\n  induction' l with _ _ ih <;> [rfl,\n    · simp [not_or] at h\n      simp [h.1, ih h.2]]\n#align kerase_of_not_mem_keys kerase_of_not_mem_keys\n\n",
 "kerase_nil":
 "@[simp]\ntheorem kerase_nil {a} : @kerase _ β _ a [] = [] :=\n  rfl\n#align kerase_nil kerase_nil\n\n",
 "kerase_keys_subset":
 "theorem kerase_keys_subset (a) (l : List (Sigma β)) : (kerase a l).keys ⊆ l.keys :=\n  ((kerase_sublist a l).map _).subset\n#align kerase_keys_subset kerase_keys_subset\n\n",
 "kerase_kerase":
 "theorem kerase_kerase {a a'} {l : List (Sigma β)} : (kerase a' l).kerase a = (kerase a l).kerase a' :=\n  by\n  by_cases a = a'\n  · subst a'\n  induction' l with x xs; · rfl\n  · by_cases a' = x.1\n    · subst a'\n      simp [kerase_cons_ne h, kerase_cons_eq rfl]\n    by_cases h' : a = x.1\n    · subst a\n      simp [kerase_cons_eq rfl, kerase_cons_ne (ne.symm h)]\n    · simp [kerase_cons_ne, *]\n#align kerase_kerase kerase_kerase\n\n",
 "kerase_cons_ne":
 "@[simp]\ntheorem kerase_cons_ne {a} {s : Sigma β} {l : List (Sigma β)} (h : a ≠ s.1) : kerase a (s :: l) = s :: kerase a l := by\n  simp [kerase, h]\n#align kerase_cons_ne kerase_cons_ne\n\n",
 "kerase_cons_eq":
 "@[simp]\ntheorem kerase_cons_eq {a} {s : Sigma β} {l : List (Sigma β)} (h : a = s.1) : kerase a (s :: l) = l := by\n  simp [kerase, h]\n#align kerase_cons_eq kerase_cons_eq\n\n",
 "kerase_comm":
 "theorem kerase_comm (a₁ a₂) (l : List (Sigma β)) : kerase a₂ (kerase a₁ l) = kerase a₁ (kerase a₂ l) :=\n  if h : a₁ = a₂ then by simp [h]\n  else\n    if ha₁ : a₁ ∈ l.keys then\n      if ha₂ : a₂ ∈ l.keys then\n        match l, kerase a₁ l, exists_of_kerase ha₁, ha₂ with\n        | _, _, ⟨b₁, l₁, l₂, a₁_nin_l₁, rfl, rfl⟩, a₂_in_l₁_app_l₂ =>\n          if h' : a₂ ∈ l₁.keys then by\n            simp [kerase_append_left h', kerase_append_right (mt (mem_keys_kerase_of_ne h).mp a₁_nin_l₁)]\n          else by\n            simp [kerase_append_right h', kerase_append_right a₁_nin_l₁,\n              @kerase_cons_ne _ _ _ a₂ ⟨a₁, b₁⟩ _ (ne.symm h)]\n      else by simp [ha₂, mt mem_keys_of_mem_keys_kerase ha₂]\n    else by simp [ha₁, mt mem_keys_of_mem_keys_kerase ha₁]\n#align kerase_comm kerase_comm\n\n",
 "kerase_append_right":
 "theorem kerase_append_right {a} : ∀ {l₁ l₂ : List (Sigma β)}, a ∉ l₁.keys → kerase a (l₁ ++ l₂) = l₁ ++ kerase a l₂\n  | [], _, h => rfl\n  | _ :: l₁, l₂, h => by simp [not_or] at h <;> simp [h.1, kerase_append_right h.2]\n#align kerase_append_right kerase_append_right\n\n",
 "kerase_append_left":
 "theorem kerase_append_left {a} : ∀ {l₁ l₂ : List (Sigma β)}, a ∈ l₁.keys → kerase a (l₁ ++ l₂) = kerase a l₁ ++ l₂\n  | [], _, h => by cases h\n  | s :: l₁, l₂, h₁ =>\n    if h₂ : a = s.1 then by simp [h₂]\n    else by simp at h₁ <;> cases h₁ <;> [exact absurd h₁ h₂, simp [h₂, kerase_append_left h₁]]\n#align kerase_append_left kerase_append_left\n\n",
 "kerase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem perm.kerase {a : α} {l₁ l₂ : List (Sigma β)} (nd : l₁.nodupkeys) :\n    list.perm l₁ l₂ → list.perm (kerase a l₁) (kerase a l₂) :=\n  Perm.erasep _ <| (nodupKeys_iff_pairwise.1 nd).imp <| by rintro x y h rfl <;> exact h\n#align perm.kerase perm.kerase\n\n",
 "head_lookup_all":
 "theorem head_lookup_all (a : α) : ∀ l : List (Sigma β), head? (lookupAll a l) = dlookup a l\n  | [] => by simp\n  | ⟨a', b⟩ :: l => by\n    by_cases h : a = a' <;>\n      [·\n        subst h\n        simp, simp [*]]\n#align head_lookup_all head_lookup_all\n\n",
 "exists_of_mem_keys":
 "theorem exists_of_mem_keys {a} {l : List (Sigma β)} (h : a ∈ l.keys) : ∃ b : β a, sigma.mk a b ∈ l :=\n  let ⟨⟨a', b'⟩, m, e⟩ := exists_of_mem_map h\n  eq.rec_on e (exists.intro b' m)\n#align exists_of_mem_keys exists_of_mem_keys\n\n",
 "exists_of_kerase":
 "theorem exists_of_kerase {a : α} {l : List (Sigma β)} (h : a ∈ l.keys) :\n    ∃ (b : β a)(l₁ l₂ : List (Sigma β)), a ∉ l₁.keys ∧ l = l₁ ++ ⟨a, b⟩ :: l₂ ∧ kerase a l = l₁ ++ l₂ :=\n  by\n  induction l\n  case nil => cases h\n  case cons hd tl ih =>\n    by_cases e : a = hd.1\n    · subst e\n      exact ⟨hd.2, [], tl, by simp, by cases hd <;> rfl, by simp⟩\n    · simp at h\n      cases h\n      case inl h => exact absurd h e\n      case inr h =>\n        rcases ih h with ⟨b, tl₁, tl₂, h₁, h₂, h₃⟩\n        exact ⟨b, hd :: tl₁, tl₂, not_mem_cons_of_ne_of_not_mem e h₁, by rw [h₂] <;> rfl, by simp [e, h₃]⟩\n#align exists_of_kerase exists_of_kerase\n\n",
 "eq_of_mk_mem":
 "theorem nodupkeys.eq_of_mk_mem {a : α} {b b' : β a} {l : List (Sigma β)} (nd : NodupKeys l) (h : sigma.mk a b ∈ l)\n    (h' : sigma.mk a b' ∈ l) : b = b' := by cases nd.eq_of_fst_eq h h' rfl <;> rfl\n#align nodupkeys.eq_of_mk_mem nodupkeys.eq_of_mk_mem\n\n",
 "eq_of_fst_eq":
 "theorem nodupkeys.eq_of_fst_eq {l : List (Sigma β)} (nd : NodupKeys l) {s s' : Sigma β} (h : s ∈ l) (h' : s' ∈ l) :\n    s.1 = s'.1 → s = s' :=\n  @Pairwise.forall_of_forall _ (fun s s' : Sigma β => s.1 = s'.1 → s = s') _ (fun s s' H h => (H h.symm).symm)\n    (fun x h _ => rfl) ((nodupKeys_iff_pairwise.1 nd).imp fun s s' h h' => (h h').elim) _ h _ h'\n#align nodupkeys.eq_of_fst_eq nodupkeys.eq_of_fst_eq\n\n",
 "dedupkeys_cons":
 "theorem dedupkeys_cons {x : Sigma β} (l : List (Sigma β)) : dedupKeys (x :: l) = kinsert x.1 x.2 (dedupKeys l) :=\n  rfl\n#align dedupkeys_cons dedupkeys_cons\n\n"}