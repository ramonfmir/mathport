{"trans":
 "@[trans]\ntheorem rel.trans {x y z : α × α} (a : Rel α x y) (b : Rel α y z) : Rel α x z := by\n  casesm*Rel _ _ _ <;> first |apply rel.refl|apply rel.swap\n#align rel.trans rel.trans\n\n",
 "to_rel_symmetric":
 "theorem to_rel_symmetric (s : Set (Sym2 α)) : symmetric (ToRel s) := fun x y => by simp [eq_swap]\n#align to_rel_symmetric to_rel_symmetric\n\n",
 "to_rel_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem to_rel_prop (s : Set (Sym2 α)) (x y : α) : ToRel s x y ↔ «expr⟦ ⟧» (x, y) ∈ s :=\n  iff.rfl\n#align to_rel_prop to_rel_prop\n\n",
 "to_rel_from_rel":
 "theorem to_rel_from_rel (sym : symmetric r) : ToRel (fromRel Sym) = r :=\n  rfl\n#align to_rel_from_rel to_rel_from_rel\n\n",
 "symm":
 "/-\nCopyright (c) 2020 Kyle Miller All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kyle Miller\n-/\n@[symm]\ntheorem rel.symm {x y : α × α} : Rel α x y → Rel α y x := by rintro ⟨_, _⟩ <;> constructor\n#align rel.symm rel.symm\n\n",
 "rel_iff":
 "@[simp]\ntheorem rel_iff {x y z w : α} : (x, y) ≈ (z, w) ↔ x = z ∧ y = w ∨ x = w ∧ y = z :=\n  by\n  constructor <;> intro h\n  · cases h <;> simp\n  · cases h <;> rw [h.1, h.2]\n    constructor\n#align rel_iff rel_iff\n\n",
 "rel_bool_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\ntheorem rel_bool_spec [DecidableEq α] (x y : α × α) : «expr↥ » (relBool x y) ↔ Rel α x y :=\n  by\n  cases' x with x₁ x₂; cases' y with y₁ y₂\n  dsimp [rel_bool]; split_ifs <;> simp only [false_iff_iff, bool.coe_sort_ff, Bool.of_decide_iff]\n  rotate_left 2;\n  · contrapose! h\n    cases h <;> cc\n  all_goals\n    subst x₁; constructor <;> intro h1\n    · subst h1 <;> apply sym2.rel.swap\n    · cases h1 <;> cc\n#align rel_bool_spec rel_bool_spec\n\n",
 "perm_card_two_iff":
 "private theorem perm_card_two_iff {a₁ b₁ a₂ b₂ : α} : [a₁, b₁].perm [a₂, b₂] ↔ a₁ = a₂ ∧ b₁ = b₂ ∨ a₁ = b₂ ∧ b₁ = a₂ :=\n  { mp := by\n      simp [← Multiset.coe_eq_coe, ← Multiset.cons_coe, Multiset.cons_eq_cons]\n      tidy\n    mpr := by\n      intro h\n      cases h <;> rw [h.1, h.2]\n      apply List.Perm.swap'\n      rfl }\n#align perm_card_two_iff perm_card_two_iff\n\n",
 "out_snd_mem":
 "theorem out_snd_mem (e : Sym2 α) : e.out.2 ∈ e :=\n  ⟨e.out.1, by rw [eq_swap, prod.mk.eta, e.out_eq]⟩\n#align out_snd_mem out_snd_mem\n\n",
 "out_fst_mem":
 "theorem out_fst_mem (e : Sym2 α) : e.out.1 ∈ e :=\n  ⟨e.out.2, by rw [prod.mk.eta, e.out_eq]⟩\n#align out_fst_mem out_fst_mem\n\n",
 "other_spec'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem other_spec' [DecidableEq α] {a : α} {z : Sym2 α} (h : a ∈ z) : «expr⟦ ⟧» (a, h.other') = z :=\n  by\n  induction z; cases' z with x y\n  have h' := mem_iff.mp h\n  dsimp [mem.other', quot.rec, pair_other]\n  cases h' <;> subst a\n  · simp only [eq_self_iff_true]\n    rfl\n  · split_ifs\n    subst h_1\n    rfl\n    rw [eq_swap]\n    rfl\n  rfl\n#align other_spec' other_spec'\n\n",
 "other_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem other_spec {a : α} {z : Sym2 α} (h : a ∈ z) : «expr⟦ ⟧» (a, h.other) = z := by erw [← Classical.choose_spec h]\n#align other_spec other_spec\n\n",
 "other_ne":
 "theorem other_ne {a : α} {z : Sym2 α} (hd : ¬IsDiag z) (h : a ∈ z) : h.other ≠ a :=\n  by\n  contrapose! hd\n  have h' := Sym2.other_spec h\n  rw [hd] at h'\n  rw [← h']\n  simp\n#align other_ne other_ne\n\n",
 "other_mem'":
 "theorem other_mem' [DecidableEq α] {a : α} {z : Sym2 α} (h : a ∈ z) : h.other' ∈ z :=\n  by\n  rw [← other_eq_other']\n  exact other_mem h\n#align other_mem' other_mem'\n\n",
 "other_mem":
 "theorem other_mem {a : α} {z : Sym2 α} (h : a ∈ z) : h.other ∈ z :=\n  by\n  convert mem_mk_right a h.other\n  rw [other_spec h]\n#align other_mem other_mem\n\n",
 "other_invol'":
 "theorem other_invol' [DecidableEq α] {a : α} {z : Sym2 α} (ha : a ∈ z) (hb : ha.other' ∈ z) : hb.other' = a :=\n  by\n  induction z; cases' z with x y\n  dsimp [mem.other', quot.rec, pair_other] at hb\n  split_ifs  at hb <;> dsimp [mem.other', quot.rec, pair_other]\n  simp only [h, if_true, eq_self_iff_true]\n  split_ifs; assumption; rfl\n  simp only [h, if_false, eq_self_iff_true]\n  exact ((mem_iff.mp ha).resolve_left h).symm\n  rfl\n#align other_invol' other_invol'\n\n",
 "other_invol":
 "theorem other_invol {a : α} {z : Sym2 α} (ha : a ∈ z) (hb : ha.other ∈ z) : hb.other = a := by\n  classical\n    rw [other_eq_other'] at hb⊢\n    convert other_invol' ha hb\n    rw [other_eq_other']\n#align other_invol other_invol\n\n",
 "other_eq_other'":
 "@[simp]\ntheorem other_eq_other' [DecidableEq α] {a : α} {z : Sym2 α} (h : a ∈ z) : h.other = h.other' := by\n  rw [← congr_right, other_spec' h, other_spec]\n#align other_eq_other' other_eq_other'\n\n",
 "mk_prod_swap_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem mk_prod_swap_eq {p : α × α} : «expr⟦ ⟧» p.swap = «expr⟦ ⟧» p :=\n  by\n  cases p\n  exact eq_swap\n#align mk_prod_swap_eq mk_prod_swap_eq\n\n",
 "mk_is_diag_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mk_is_diag_iff {x y : α} : IsDiag («expr⟦ ⟧» (x, y)) ↔ x = y :=\n  iff.rfl\n#align mk_is_diag_iff mk_is_diag_iff\n\n",
 "mk_eq_mk_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mk_eq_mk_iff {p q : α × α} : «expr⟦ ⟧» p = «expr⟦ ⟧» q ↔ p = q ∨ p = q.swap :=\n  by\n  cases p\n  cases q\n  simp only [eq_iff, Prod.mk.inj_iff, Prod.swap_prod_mk]\n#align mk_eq_mk_iff mk_eq_mk_iff\n\n",
 "mem_range_diag":
 "theorem is_diag.mem_range_diag {z : Sym2 α} : IsDiag z → z ∈ Set.range (@diag α) :=\n  by\n  induction' z using Sym2.ind with x y\n  rintro (rfl : x = y)\n  exact ⟨_, rfl⟩\n#align is_diag.mem_range_diag is_diag.mem_range_diag\n\n",
 "mem_mk_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mem_mk_right (x y : α) : y ∈ «expr⟦ ⟧» (x, y) :=\n  eq_swap.subst <| mem_mk''_left y x\n#align mem_mk_right mem_mk_right\n\n",
 "mem_mk_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mem_mk_left (x y : α) : x ∈ «expr⟦ ⟧» (x, y) :=\n  ⟨y, rfl⟩\n#align mem_mk_left mem_mk_left\n\n",
 "mem_map":
 "@[simp]\ntheorem mem_map {f : α → β} {b : β} {z : Sym2 α} : b ∈ Sym2.map f z ↔ ∃ a, a ∈ z ∧ f a = b :=\n  by\n  induction' z using Sym2.ind with x y\n  simp only [map, Quotient.map_mk, Prod.map_mk, mem_iff]\n  constructor\n  · rintro (rfl | rfl)\n    · exact ⟨x, by simp⟩\n    · exact ⟨y, by simp⟩\n  · rintro ⟨w, rfl | rfl, rfl⟩ <;> simp\n#align mem_map mem_map\n\n",
 "mem_iff_mem":
 "@[simp]\ntheorem mem_iff_mem {x : α} {z : Sym2 α} : Sym2.Mem x z ↔ x ∈ z :=\n  iff.rfl\n#align mem_iff_mem mem_iff_mem\n\n",
 "mem_iff_exists":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mem_iff_exists {x : α} {z : Sym2 α} : x ∈ z ↔ ∃ y : α, z = «expr⟦ ⟧» (x, y) :=\n  iff.rfl\n#align mem_iff_exists mem_iff_exists\n\n",
 "mem_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mem_iff' {a b c : α} : Sym2.Mem a («expr⟦ ⟧» (b, c)) ↔ a = b ∨ a = c :=\n  { mp := by\n      rintro ⟨_, h⟩\n      rw [eq_iff] at h\n      tidy\n    mpr := by\n      rintro (rfl | rfl)\n      · exact ⟨_, rfl⟩\n      rw [eq_swap]\n      exact ⟨_, rfl⟩ }\n#align mem_iff' mem_iff'\n\n",
 "mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem mem_iff {a b c : α} : a ∈ «expr⟦ ⟧» (b, c) ↔ a = b ∨ a = c :=\n  mem_iff'\n#align mem_iff mem_iff\n\n",
 "mem_from_rel_irrefl_other_ne":
 "theorem mem_from_rel_irrefl_other_ne {sym : symmetric r} (irrefl : irreflexive r) {a : α} {z : Sym2 α}\n    (hz : z ∈ fromRel Sym) (h : a ∈ z) : h.other ≠ a :=\n  other_ne (fromRel_irreflexive.mp irrefl hz) h\n#align mem_from_rel_irrefl_other_ne mem_from_rel_irrefl_other_ne\n\n",
 "mem_and_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mem_and_mem_iff {x y : α} {z : Sym2 α} (hne : x ≠ y) : x ∈ z ∧ y ∈ z ↔ z = «expr⟦ ⟧» (x, y) :=\n  by\n  constructor\n  · induction' z using Sym2.ind with x' y'\n    rw [mem_iff, mem_iff]\n    rintro ⟨rfl | rfl, rfl | rfl⟩ <;> try trivial <;> simp only [Sym2.eq_swap]\n  · rintro rfl\n    simp\n#align mem_and_mem_iff mem_and_mem_iff\n\n",
 "map_pair_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem map_pair_eq (f : α → β) (x y : α) : map f («expr⟦ ⟧» (x, y)) = «expr⟦ ⟧» (f x, f y) :=\n  rfl\n#align map_pair_eq map_pair_eq\n\n",
 "map_map":
 "theorem map_map {g : β → γ} {f : α → β} (x : Sym2 α) : map g (map f x) = map (g ∘ f) x := by tidy\n#align map_map map_map\n\n",
 "map_id'":
 "/-- Note: `sym2.map_id` will not simplify `sym2.map id z` due to `sym2.map_congr`. -/\n@[simp]\ntheorem map_id' : (map fun x : α => x) = id :=\n  map_id\n#align map_id' map_id'\n\n",
 "map_id":
 "@[simp]\ntheorem map_id : map (@id α) = id := by\n  ext ⟨⟨x, y⟩⟩\n  rfl\n#align map_id map_id\n\n",
 "map_congr":
 "#print map_congr /-\n@[congr]\ntheorem map_congr {f g : α → β} {s : Sym2 α} (h : ∀ x ∈ s, f x = g x) : map f s = map g s :=\n  by\n  ext y\n  simp only [mem_map]\n  constructor <;>\n    · rintro ⟨w, hw, rfl⟩\n      exact ⟨w, hw, by simp [hw, h]⟩\n#align map_congr map_congr\n-/\n\n",
 "map_comp":
 "theorem map_comp {g : β → γ} {f : α → β} : Sym2.map (g ∘ f) = Sym2.map g ∘ Sym2.map f :=\n  by\n  ext ⟨⟨x, y⟩⟩\n  rfl\n#align map_comp map_comp\n\n",
 "lift₂_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem lift₂_mk\n    (f : { f : α → α → β → β → γ // ∀ a₁ a₂ b₁ b₂, f a₁ a₂ b₁ b₂ = f a₂ a₁ b₁ b₂ ∧ f a₁ a₂ b₁ b₂ = f a₁ a₂ b₂ b₁ })\n    (a₁ a₂ : α) (b₁ b₂ : β) : lift₂ f («expr⟦ ⟧» (a₁, a₂)) («expr⟦ ⟧» (b₁, b₂)) = (f : α → α → β → β → γ) a₁ a₂ b₁ b₂ :=\n  rfl\n#align lift₂_mk lift₂_mk\n\n",
 "lift_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem lift_mk (f : { f : α → α → β // ∀ a₁ a₂, f a₁ a₂ = f a₂ a₁ }) (a₁ a₂ : α) :\n    lift f («expr⟦ ⟧» (a₁, a₂)) = (f : α → α → β) a₁ a₂ :=\n  rfl\n#align lift_mk lift_mk\n\n",
 "is_equivalence":
 "theorem rel.is_equivalence : equivalence (Rel α) := by tidy <;> apply rel.trans <;> assumption\n#align rel.is_equivalence rel.is_equivalence\n\n",
 "is_diag_iff_proj_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem is_diag_iff_proj_eq (z : α × α) : IsDiag («expr⟦ ⟧» z) ↔ z.1 = z.2 :=\n  prod.rec_on z fun _ _ => mk''_isDiag_iff\n#align is_diag_iff_proj_eq is_diag_iff_proj_eq\n\n",
 "is_diag_iff_mem_range_diag":
 "theorem is_diag_iff_mem_range_diag (z : Sym2 α) : IsDiag z ↔ z ∈ Set.range (@diag α) :=\n  ⟨IsDiag.mem_range_diag, fun ⟨i, hi⟩ => hi ▸ diag_isDiag i⟩\n#align is_diag_iff_mem_range_diag is_diag_iff_mem_range_diag\n\n",
 "injective":
 "theorem map.injective {f : α → β} (hinj : injective f) : injective (map f) :=\n  by\n  intro z z'\n  refine' quotient.ind₂ (fun z z' => _) z z'\n  cases' z with x y\n  cases' z' with x' y'\n  repeat' rw [map_pair_eq, eq_iff]\n  rintro (h | h) <;> simp [hinj h.1, hinj h.2]\n#align map.injective map.injective\n\n",
 "induction_on₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[elab_as_elim]\nprotected theorem induction_on₂ {f : Sym2 α → Sym2 β → Prop} (i : Sym2 α) (j : Sym2 β)\n    (hf : ∀ a₁ a₂ b₁ b₂, f («expr⟦ ⟧» (a₁, a₂)) («expr⟦ ⟧» (b₁, b₂))) : f i j :=\n  quotient.induction_on₂ i j <| by\n    rintro ⟨a₁, a₂⟩ ⟨b₁, b₂⟩\n    exact hf _ _ _ _\n#align induction_on₂ induction_on₂\n\n",
 "induction_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[elab_as_elim]\nprotected theorem induction_on {f : Sym2 α → Prop} (i : Sym2 α) (hf : ∀ x y, f («expr⟦ ⟧» (x, y))) : f i :=\n  i.ind hf\n#align induction_on induction_on\n\n",
 "ind":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[elab_as_elim]\nprotected theorem ind {f : Sym2 α → Prop} (h : ∀ x y, f («expr⟦ ⟧» (x, y))) : ∀ i, f i :=\n  quotient.ind <| prod.rec <| h\n#align ind ind\n\n",
 "from_rel_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem from_rel_top : fromRel (fun (x y : α) z => z : symmetric («expr⊤»)) = Set.univ :=\n  by\n  apply Set.eq_univ_of_forall fun e => _\n  refine' e.ind _\n  simp [-Set.top_eq_univ, Prop.top_eq_true]\n#align from_rel_top from_rel_top\n\n",
 "from_rel_to_rel":
 "theorem from_rel_to_rel (s : Set (Sym2 α)) : fromRel (toRel_symmetric s) = s :=\n  Set.ext fun z => Sym2.ind (fun x y => iff.rfl) z\n#align from_rel_to_rel from_rel_to_rel\n\n",
 "from_rel_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem from_rel_prop {sym : symmetric r} {a b : α} : «expr⟦ ⟧» (a, b) ∈ fromRel Sym ↔ r a b :=\n  iff.rfl\n#align from_rel_prop from_rel_prop\n\n",
 "from_rel_proj_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem from_rel_proj_prop {sym : symmetric r} {z : α × α} : «expr⟦ ⟧» z ∈ fromRel Sym ↔ r z.1 z.2 :=\n  iff.rfl\n#align from_rel_proj_prop from_rel_proj_prop\n\n",
 "from_rel_irreflexive":
 "theorem from_rel_irreflexive {sym : symmetric r} : irreflexive r ↔ ∀ {z}, z ∈ fromRel Sym → ¬IsDiag z :=\n  { mp := fun h =>\n      Sym2.ind <| by\n        rintro a b hr (rfl : a = b)\n        exact h _ hr\n    mpr := fun h x hr => h (fromRel_prop.mpr hr) rfl }\n#align from_rel_irreflexive from_rel_irreflexive\n\n",
 "from_rel_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem from_rel_bot : fromRel (fun (x y : α) z => z : symmetric («expr⊥»)) = ∅ :=\n  by\n  apply Set.eq_empty_of_forall_not_mem fun e => _\n  refine' e.ind _\n  simp [-Set.bot_eq_empty, Prop.bot_eq_false]\n#align from_rel_bot from_rel_bot\n\n",
 "forall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\nprotected theorem forall {α : Sort _} {f : Sym2 α → Prop} : (∀ x : Sym2 α, f x) ↔ ∀ x y, f («expr⟦ ⟧» (x, y)) :=\n  (surjective_quotient_mk _).forall.trans Prod.forall\n#align forall forall\n\n",
 "filter_image_quotient_mk_not_is_diag":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem filter_image_quotient_mk_not_is_diag [DecidableEq α] (s : Finset α) :\n    (((finset.product s s).image Quotient.mk').filter fun a : Sym2 α => ¬a.is_diag) = s.off_diag.image Quotient.mk' :=\n  by\n  ext z\n  induction z using Quotient.inductionOn\n  rcases z with ⟨x, y⟩\n  simp only [mem_image, mem_off_diag, mem_filter, Prod.exists, mem_product]\n  constructor\n  · rintro ⟨⟨a, b, ⟨ha, hb⟩, h⟩, hab⟩\n    rw [← h, Sym2.mk''_isDiag_iff] at hab\n    exact ⟨a, b, ⟨ha, hb, hab⟩, h⟩\n  · rintro ⟨a, b, ⟨ha, hb, hab⟩, h⟩\n    rw [ne.def, ← Sym2.mk''_isDiag_iff, h] at hab\n    exact ⟨⟨a, b, ⟨ha, hb⟩, h⟩, hab⟩\n#align filter_image_quotient_mk_not_is_diag filter_image_quotient_mk_not_is_diag\n\n",
 "filter_image_quotient_mk_is_diag":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem filter_image_quotient_mk_is_diag [DecidableEq α] (s : Finset α) :\n    ((finset.product s s).image Quotient.mk').filter IsDiag = s.diag.image Quotient.mk' :=\n  by\n  ext z\n  induction z using Quotient.inductionOn\n  rcases z with ⟨x, y⟩\n  simp only [mem_image, mem_diag, exists_prop, mem_filter, Prod.exists, mem_product]\n  constructor\n  · rintro ⟨⟨a, b, ⟨ha, hb⟩, h⟩, hab⟩\n    rw [← h, Sym2.mk''_isDiag_iff] at hab\n    exact ⟨a, b, ⟨ha, hab⟩, h⟩\n  · rintro ⟨a, b, ⟨ha, rfl⟩, h⟩\n    rw [← h]\n    exact ⟨⟨a, a, ⟨ha, ha⟩, rfl⟩, rfl⟩\n#align filter_image_quotient_mk_is_diag filter_image_quotient_mk_is_diag\n\n",
 "ext":
 "@[ext]\ntheorem ext {p q : Sym2 α} (h : ∀ x, x ∈ p ↔ x ∈ q) : p = q :=\n  SetLike.ext h\n#align ext ext\n\n",
 "exists":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\nprotected theorem exists {α : Sort _} {f : Sym2 α → Prop} : (∃ x : Sym2 α, f x) ↔ ∃ x y, f («expr⟦ ⟧» (x, y)) :=\n  (surjective_quotient_mk _).exists.trans Prod.exists\n#align exists exists\n\n",
 "eq_swap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem eq_swap {a b : α} : «expr⟦ ⟧» (a, b) = «expr⟦ ⟧» (b, a) :=\n  by\n  rw [Quotient.eq']\n  apply rel.swap\n#align eq_swap eq_swap\n\n",
 "eq_of_ne_mem":
 "theorem eq_of_ne_mem {x y : α} {z z' : Sym2 α} (h : x ≠ y) (h1 : x ∈ z) (h2 : y ∈ z) (h3 : x ∈ z') (h4 : y ∈ z') :\n    z = z' :=\n  ((mem_and_mem_iff h).mp ⟨h1, h2⟩).trans ((mem_and_mem_iff h).mp ⟨h3, h4⟩).symm\n#align eq_of_ne_mem eq_of_ne_mem\n\n",
 "eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem eq_iff {x y z w : α} : «expr⟦ ⟧» (x, y) = «expr⟦ ⟧» (z, w) ↔ x = z ∧ y = w ∨ x = w ∧ y = z := by simp\n#align eq_iff eq_iff\n\n",
 "diag_is_diag":
 "@[simp]\ntheorem diag_is_diag (a : α) : IsDiag (diag a) :=\n  Eq.refl a\n#align diag_is_diag diag_is_diag\n\n",
 "diag_injective":
 "theorem diag_injective : function.injective (Sym2.diag : α → Sym2 α) := fun x y h => by cases quotient.exact h <;> rfl\n#align diag_injective diag_injective\n\n",
 "congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem congr_right {a b c : α} : «expr⟦ ⟧» (a, b) = «expr⟦ ⟧» (a, c) ↔ b = c :=\n  by\n  constructor <;> intro h\n  · rw [Quotient.eq'] at h\n    cases h <;> rfl\n  rw [h]\n#align congr_right congr_right\n\n",
 "congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem congr_left {a b c : α} : «expr⟦ ⟧» (b, a) = «expr⟦ ⟧» (c, a) ↔ b = c :=\n  by\n  constructor <;> intro h\n  · rw [Quotient.eq'] at h\n    cases h <;> rfl\n  rw [h]\n#align congr_left congr_left\n\n",
 "coe_lift₂_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem coe_lift₂_symm_apply (F : Sym2 α → Sym2 β → γ) (a₁ a₂ : α) (b₁ b₂ : β) :\n    (lift₂.symm F : α → α → β → β → γ) a₁ a₂ b₁ b₂ = F («expr⟦ ⟧» (a₁, a₂)) («expr⟦ ⟧» (b₁, b₂)) :=\n  rfl\n#align coe_lift₂_symm_apply coe_lift₂_symm_apply\n\n",
 "coe_lift_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem coe_lift_symm_apply (F : Sym2 α → β) (a₁ a₂ : α) : (lift.symm F : α → α → β) a₁ a₂ = F («expr⟦ ⟧» (a₁, a₂)) :=\n  rfl\n#align coe_lift_symm_apply coe_lift_symm_apply\n\n",
 "ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem ball {p : α → Prop} {a b : α} : (∀ c ∈ «expr⟦ ⟧» (a, b), p c) ↔ p a ∧ p b :=\n  by\n  refine' ⟨fun h => ⟨h _ <| mem_mk_left _ _, h _ <| mem_mk_right _ _⟩, fun h c hc => _⟩\n  obtain rfl | rfl := Sym2.mem_iff.1 hc\n  · exact h.1\n  · exact h.2\n#align ball ball\n\n"}