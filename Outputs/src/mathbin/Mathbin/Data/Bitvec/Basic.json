{"to_nat_lt":
 "theorem to_nat_lt {n : ℕ} (v : Bitvec n) : v.to_nat < 2 ^ n :=\n  by\n  suffices v.to_nat + 1 ≤ 2 ^ n by simpa\n  rw [to_nat_eq_foldr_reverse]\n  cases' v with xs h\n  dsimp [Bitvec.toNat, bits_to_nat]\n  rw [← List.length_reverse] at h\n  generalize xs.reverse = ys at h⊢\n  clear xs\n  induction ys generalizing n\n  · simp [← h]\n  · simp only [← h, pow_add, flip, list.length, list.foldr, pow_one]\n    rw [add_lsb_eq_twice_add_one]\n    trans 2 * list.foldr (fun (x : Bool) (y : ℕ) => add_lsb y x) 0 ys_tl + 2 * 1\n    · ac_mono\n      rw [two_mul]\n      mono\n      cases ys_hd <;> simp\n    · rw [← left_distrib]\n      ac_mono\n      exact ys_ih rfl\n      norm_num\n#align to_nat_lt to_nat_lt\n\n",
 "to_nat_eq_foldr_reverse":
 "theorem to_nat_eq_foldr_reverse {n : ℕ} (v : Bitvec n) : v.to_nat = v.to_list.reverse.foldr (flip addLsb) 0 := by\n  rw [List.foldr_reverse, flip] <;> rfl\n#align to_nat_eq_foldr_reverse to_nat_eq_foldr_reverse\n\n",
 "to_fin_val":
 "theorem to_fin_val {n : ℕ} (v : Bitvec n) : (toFin v : ℕ) = v.to_nat := by\n  rw [to_fin, Fin.coe_ofNat_eq_mod, nat.mod_eq_of_lt] <;> apply to_nat_lt\n#align to_fin_val to_fin_val\n\n",
 "to_fin_of_fin":
 "theorem to_fin_of_fin {n} (i : Fin <| 2 ^ n) : (ofFin i).to_fin = i :=\n  fin.eq_of_veq (by simp [to_fin_val, of_fin, to_nat_of_nat, nat.mod_eq_of_lt, i.is_lt])\n#align to_fin_of_fin to_fin_of_fin\n\n",
 "to_fin_le_to_fin_of_le":
 "theorem to_fin_le_to_fin_of_le {n} {v₀ v₁ : Bitvec n} (h : v₀ ≤ v₁) : v₀.to_fin ≤ v₁.to_fin :=\n  show (v₀.to_fin : ℕ) ≤ v₁.to_fin by rw [to_fin_val, to_fin_val] <;> exact h\n#align to_fin_le_to_fin_of_le to_fin_le_to_fin_of_le\n\n",
 "to_bool_add_lsb_mod_two":
 "theorem to_bool_add_lsb_mod_two {x b} : decide (addLsb x b % 2 = 1) = b := by\n  cases b <;>\n      simp only [Bool.decide_iff, nat.add_mul_mod_self_left, add_lsb, ← two_mul, add_comm, Bool.decide_False,\n        nat.mul_mod_right, zero_add, cond, zero_ne_one] <;>\n    norm_num\n#align to_bool_add_lsb_mod_two to_bool_add_lsb_mod_two\n\n",
 "of_nat_to_nat":
 "theorem of_nat_to_nat {n : ℕ} (v : Bitvec n) : Bitvec.ofNat _ v.to_nat = v :=\n  by\n  cases' v with xs h\n  ext1\n  change Vector.toList _ = xs\n  dsimp [Bitvec.toNat, bits_to_nat]\n  rw [← List.length_reverse] at h\n  rw [← List.reverse_reverse xs, List.foldl_reverse]\n  generalize xs.reverse = ys at h⊢; clear xs\n  induction ys generalizing n\n  · cases h\n    simp [Bitvec.ofNat]\n  · simp only [← nat.succ_eq_add_one, list.length] at h\n    subst n\n    simp only [Bitvec.ofNat, Vector.toList_cons, Vector.toList_nil, List.reverse_cons, Vector.toList_append, list.foldr]\n    erw [add_lsb_div_two, to_bool_add_lsb_mod_two]\n    congr\n    apply ys_ih\n    rfl\n#align of_nat_to_nat of_nat_to_nat\n\n",
 "of_fin_val":
 "/-\nCopyright (c) 2020 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\ntheorem of_fin_val {n : ℕ} (i : Fin <| 2 ^ n) : (ofFin i).to_nat = i.val := by\n  rw [of_fin, to_nat_of_nat, nat.mod_eq_of_lt] <;> apply i.is_lt\n#align of_fin_val of_fin_val\n\n",
 "of_fin_to_fin":
 "theorem of_fin_to_fin {n} (v : Bitvec n) : ofFin (toFin v) = v := by dsimp [of_fin] <;> rw [to_fin_val, of_nat_to_nat]\n#align of_fin_to_fin of_fin_to_fin\n\n",
 "of_fin_le_of_fin_of_le":
 "theorem of_fin_le_of_fin_of_le {n : ℕ} {i j : Fin (2 ^ n)} (h : i ≤ j) : ofFin i ≤ ofFin j :=\n  show (Bitvec.ofNat n i).to_nat ≤ (Bitvec.ofNat n j).to_nat\n    by\n    simp only [to_nat_of_nat, nat.mod_eq_of_lt, Fin.is_lt]\n    exact h\n#align of_fin_le_of_fin_of_le of_fin_le_of_fin_of_le\n\n",
 "add_lsb_eq_twice_add_one":
 "theorem add_lsb_eq_twice_add_one {x b} : addLsb x b = 2 * x + cond b 1 0 := by simp [add_lsb, two_mul]\n#align add_lsb_eq_twice_add_one add_lsb_eq_twice_add_one\n\n",
 "add_lsb_div_two":
 "theorem add_lsb_div_two {x b} : addLsb x b / 2 = x := by\n  cases b <;>\n      simp only [nat.add_mul_div_left, add_lsb, ← two_mul, add_comm, Nat.succ_pos', nat.mul_div_right, gt_iff_lt,\n        zero_add, cond] <;>\n    norm_num\n#align add_lsb_div_two add_lsb_div_two\n\n"}