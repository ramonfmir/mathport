{"bubble_sort_induction'":
 "/-\nCopyright (c) 2022 Michael Stoll. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Michael Stoll\n-/\n/-- *Bubble sort induction*: Prove that the sorted version of `f` has some property `P`\nif `f` satsifies `P` and `P` is preserved on permutations of `f` when swapping two\nantitone values. -/\ntheorem bubble_sort_induction' {n : ℕ} {α : Type _} [linear_order α] {f : Fin n → α} {P : (Fin n → α) → Prop} (hf : P f)\n    (h :\n      ∀ (σ : Equiv.Perm (Fin n)) (i j : Fin n),\n        i < j → (f ∘ σ) j < (f ∘ σ) i → P (f ∘ σ) → P (f ∘ σ ∘ Equiv.swap i j)) :\n    P (f ∘ sort f) :=\n  by\n  letI := @Preorder.lift _ (Lex (Fin n → α)) _ fun σ : Equiv.Perm (Fin n) => toLex (f ∘ σ)\n  refine'\n    @WellFounded.induction_bot' _ _ _ (@Finite.Preorder.wellFounded_lt (Equiv.Perm (Fin n)) _ _) (Equiv.refl _) (sort f)\n      P (fun σ => f ∘ σ) (fun σ hσ hfσ => _) hf\n  obtain ⟨i, j, hij₁, hij₂⟩ := antitone_pair_of_not_sorted' hσ\n  exact ⟨σ * Equiv.swap i j, Pi.lex_desc hij₁ hij₂, h σ i j hij₁ hij₂ hfσ⟩\n#align bubble_sort_induction' bubble_sort_induction'\n\n",
 "bubble_sort_induction":
 "/-- *Bubble sort induction*: Prove that the sorted version of `f` has some property `P`\nif `f` satsifies `P` and `P` is preserved when swapping two antitone values. -/\ntheorem bubble_sort_induction {n : ℕ} {α : Type _} [linear_order α] {f : Fin n → α} {P : (Fin n → α) → Prop} (hf : P f)\n    (h : ∀ (g : Fin n → α) (i j : Fin n), i < j → g j < g i → P g → P (g ∘ Equiv.swap i j)) : P (f ∘ sort f) :=\n  bubble_sort_induction' hf fun σ => h _\n#align bubble_sort_induction bubble_sort_induction\n\n"}