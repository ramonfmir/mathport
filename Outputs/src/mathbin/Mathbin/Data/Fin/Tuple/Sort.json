{"unique_monotone":
 "/-- If two permutations of a tuple `f` are both monotone, then they are equal. -/\ntheorem unique_monotone [partial_order α] {f : fin n → α} {σ τ : equiv.perm (fin n)} (hfσ : monotone (f ∘ σ))\n    (hfτ : monotone (f ∘ τ)) : f ∘ σ = f ∘ τ :=\n  of_fn_injective <|\n    eq_of_perm_of_sorted ((σ.of_fn_comp_perm f).trans (τ.of_fn_comp_perm f).symm) hfσ.of_fn_sorted hfτ.of_fn_sorted\n#align unique_monotone unique_monotone\n\n",
 "sort_eq_refl_iff_monotone":
 "/-- The permutation that sorts `f` is the identity if and only if `f` is monotone. -/\ntheorem sort_eq_refl_iff_monotone : sort f = equiv.refl _ ↔ monotone f :=\n  by\n  rw [eq_comm, eq_sort_iff, equiv.coe_refl, function.comp.right_id]\n  simp only [id.def, and_iff_left_iff_imp]\n  exact fun _ _ _ hij _ => hij\n#align sort_eq_refl_iff_monotone sort_eq_refl_iff_monotone\n\n",
 "self_comp_sort":
 "theorem self_comp_sort (f : fin n → α) : f ∘ sort f = graph.proj ∘ graph_equiv₂ f :=\n  show graph.proj ∘ (graph_equiv₁ f ∘ (graph_equiv₁ f).symm) ∘ (graph_equiv₂ f).to_equiv = _ by simp\n#align self_comp_sort self_comp_sort\n\n",
 "proj_equiv₁'":
 "@[simp]\ntheorem proj_equiv₁' (f : fin n → α) : graph.proj ∘ graph_equiv₁ f = f :=\n  rfl\n#align proj_equiv₁' proj_equiv₁'\n\n",
 "monotone_sort":
 "theorem monotone_sort (f : fin n → α) : monotone (f ∘ sort f) :=\n  by\n  rw [self_comp_sort]\n  exact (monotone_proj f).comp (graph_equiv₂ f).monotone\n#align monotone_sort monotone_sort\n\n",
 "monotone_proj":
 "theorem monotone_proj (f : fin n → α) : monotone (graph.proj : graph f → α) :=\n  by\n  rintro ⟨⟨x, i⟩, hx⟩ ⟨⟨y, j⟩, hy⟩ (_ | h)\n  · exact le_of_lt ‹_›\n  · simp [graph.proj]\n#align monotone_proj monotone_proj\n\n",
 "graph_equiv₂_apply":
 "theorem graph_equiv₂_apply (f : fin n → α) (i : fin n) : graph_equiv₂ f i = graph_equiv₁ f (sort f i) :=\n  ((graph_equiv₁ f).apply_symm_apply _).symm\n#align graph_equiv₂_apply graph_equiv₂_apply\n\n",
 "eq_sort_iff'":
 "/-- A permutation `σ` equals `sort f` if and only if the map `i ↦ (f (σ i), σ i)` is\nstrictly monotone (w.r.t. the lexicographic ordering on the target). -/\ntheorem eq_sort_iff' : σ = sort f ↔ strict_mono (σ.trans <| graph_equiv₁ f) :=\n  by\n  constructor <;> intro h\n  · rw [h, sort, equiv.trans_assoc, equiv.symm_trans_self]\n    exact (graph_equiv₂ f).strict_mono\n  · have := subsingleton.elim (graph_equiv₂ f) (h.order_iso_of_surjective _ <| Equiv.surjective _)\n    ext1\n    exact (graph_equiv₁ f).apply_eq_iff_eq_symm_apply.1 (fun_like.congr_fun this x).symm\n#align eq_sort_iff' eq_sort_iff'\n\n",
 "eq_sort_iff":
 "/-- A permutation `σ` equals `sort f` if and only if `f ∘ σ` is monotone and whenever `i < j`\nand `f (σ i) = f (σ j)`, then `σ i < σ j`. This means that `sort f` is the lexicographically\nsmallest permutation `σ` such that `f ∘ σ` is monotone. -/\ntheorem eq_sort_iff : σ = sort f ↔ monotone (f ∘ σ) ∧ ∀ i j, i < j → f (σ i) = f (σ j) → σ i < σ j :=\n  by\n  rw [eq_sort_iff']\n  refine' ⟨fun h => ⟨(monotone_proj f).comp h.monotone, fun i j hij hfij => _⟩, fun h i j hij => _⟩\n  · exact (((Prod.Lex.lt_iff _ _).1 <| h hij).resolve_left hfij.not_lt).2\n  · obtain he | hl := (h.1 hij.le).eq_or_lt <;> apply (Prod.Lex.lt_iff _ _).2\n    exacts[or.inr ⟨he, h.2 i j hij he⟩, or.inl hl]\n#align eq_sort_iff eq_sort_iff\n\n",
 "comp_sort_eq_comp_iff_monotone":
 "/-- A permutation of a tuple `f` is `f` sorted if and only if it is monotone. -/\ntheorem comp_sort_eq_comp_iff_monotone : f ∘ σ = f ∘ sort f ↔ monotone (f ∘ σ) :=\n  ⟨fun h => h.symm ▸ monotone_sort f, fun h => unique_monotone h (monotone_sort f)⟩\n#align comp_sort_eq_comp_iff_monotone comp_sort_eq_comp_iff_monotone\n\n",
 "comp_perm_comp_sort_eq_comp_sort":
 "/-- The sorted versions of a tuple `f` and of any permutation of `f` agree. -/\ntheorem comp_perm_comp_sort_eq_comp_sort : (f ∘ σ) ∘ sort (f ∘ σ) = f ∘ sort f :=\n  by\n  rw [function.comp.assoc, ← Equiv.Perm.coe_mul]\n  exact unique_monotone (monotone_sort (f ∘ σ)) (monotone_sort f)\n#align comp_perm_comp_sort_eq_comp_sort comp_perm_comp_sort_eq_comp_sort\n\n",
 "card":
 "/-\nCopyright (c) 2021 Kyle Miller. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kyle Miller\n-/\n@[simp]\ntheorem graph.card (f : fin n → α) : (graph f).card = n :=\n  by\n  rw [graph, finset.card_image_of_injective]\n  · exact finset.card_fin _\n  · intro _ _\n    simp\n#align graph.card graph.card\n\n",
 "antitone_pair_of_not_sorted'":
 "/-- If a permutation `f ∘ σ` of the tuple `f` is not the same as `f ∘ sort f`, then `f ∘ σ`\nhas a pair of strictly decreasing entries. -/\ntheorem antitone_pair_of_not_sorted' (h : f ∘ σ ≠ f ∘ sort f) : ∃ i j, i < j ∧ (f ∘ σ) j < (f ∘ σ) i :=\n  by\n  contrapose! h\n  exact comp_sort_eq_comp_iff_monotone.mpr (monotone_iff_forall_lt.mpr h)\n#align antitone_pair_of_not_sorted' antitone_pair_of_not_sorted'\n\n",
 "antitone_pair_of_not_sorted":
 "/-- If the tuple `f` is not the same as `f ∘ sort f`, then `f` has a pair of strictly decreasing\nentries. -/\ntheorem antitone_pair_of_not_sorted (h : f ≠ f ∘ sort f) : ∃ i j, i < j ∧ f j < f i :=\n  antitone_pair_of_not_sorted' (id h : f ∘ equiv.refl _ ≠ _)\n#align antitone_pair_of_not_sorted antitone_pair_of_not_sorted\n\n"}