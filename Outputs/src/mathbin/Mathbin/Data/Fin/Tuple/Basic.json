{"update_snoc_last":
 "/-- Adding an element at the beginning of a tuple and then updating it amounts to adding it\ndirectly. -/\ntheorem update_snoc_last : update (snoc p x) (last n) z = snoc p z :=\n  by\n  ext j\n  by_cases h : j.val < n\n  · have : j ≠ last n := ne_of_lt h\n    simp [h, update_noteq, this, snoc]\n  · rw [eq_last_of_not_lt h]\n    simp\n#align update_snoc_last update_snoc_last\n\n",
 "update_cons_zero":
 "/-- Adding an element at the beginning of a tuple and then updating it amounts to adding it\ndirectly. -/\ntheorem update_cons_zero : update (cons x p) 0 z = cons z p :=\n  by\n  ext j\n  by_cases h : j = 0\n  · rw [h]\n    simp\n  · simp only [h, update_noteq, ne.def, not_false_iff]\n    let j' := pred j h\n    have : j'.succ = j := succ_pred j h\n    rw [← this, cons_succ, cons_succ]\n#align update_cons_zero update_cons_zero\n\n",
 "tuple0_le":
 "/-\nCopyright (c) 2019 Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn, Yury Kudryashov, Sébastien Gouëzel, Chris Hughes\n-/\n@[simp]\ntheorem tuple0_le {α : ∀ i : fin 0, Type _} [∀ i, preorder (α i)] (f g : ∀ i, α i) : f ≤ g :=\n  finZeroElim\n#align tuple0_le tuple0_le\n\n",
 "tail_update_zero":
 "/-- Updating the first element of a tuple does not change the tail. -/\n@[simp]\ntheorem tail_update_zero : tail (update q 0 z) = tail q :=\n  by\n  ext j\n  simp [tail, Fin.succ_ne_zero]\n#align tail_update_zero tail_update_zero\n\n",
 "tail_update_succ":
 "/-- Updating a nonzero element and taking the tail commute. -/\n@[simp]\ntheorem tail_update_succ : tail (update q i.succ y) = update (tail q) i y :=\n  by\n  ext j\n  by_cases h : j = i\n  · rw [h]\n    simp [tail]\n  · simp [tail, (Fin.succ_injective n).ne h, h]\n#align tail_update_succ tail_update_succ\n\n",
 "tail_init_eq_init_tail":
 "/-- `tail` and `init` commute. We state this lemma in a non-dependent setting, as otherwise it\nwould involve a cast to convince Lean that the two types are equal, making it harder to use. -/\ntheorem tail_init_eq_init_tail {β : Type _} (q : fin (n + 2) → β) : tail (init q) = init (tail q) :=\n  by\n  ext i\n  simp [tail, init, cast_succ_fin_succ]\n#align tail_init_eq_init_tail tail_init_eq_init_tail\n\n",
 "tail_def":
 "theorem tail_def {n : ℕ} {α : fin (n + 1) → Type _} {q : ∀ i, α i} :\n    (tail fun k : fin (n + 1) => q k) = fun k : fin n => q k.succ :=\n  rfl\n#align tail_def tail_def\n\n",
 "tail_cons":
 "@[simp]\ntheorem tail_cons : tail (cons x p) = p := by simp [tail, cons]\n#align tail_cons tail_cons\n\n",
 "succ_above_cases_eq_insert_nth":
 "@[simp]\ntheorem succ_above_cases_eq_insert_nth : @succ_above_cases.{u + 1} = @insert_nth.{u} :=\n  rfl\n#align succ_above_cases_eq_insert_nth succ_above_cases_eq_insert_nth\n\n",
 "snoc_update":
 "/-- Updating a tuple and adding an element at the end commute. -/\n@[simp]\ntheorem snoc_update : snoc (update p i y) x = update (snoc p x) i.cast_succ y :=\n  by\n  ext j\n  by_cases h : j.val < n\n  · simp only [snoc, h, dif_pos]\n    by_cases h' : j = cast_succ i\n    · have C1 : α i.cast_succ = α j := by rw [h']\n      have E1 : update (snoc p x) i.cast_succ y j = _root_.cast C1 y :=\n        by\n        have : update (snoc p x) j (_root_.cast C1 y) j = _root_.cast C1 y := by simp\n        convert this\n        · exact h'.symm\n        · exact heq_of_cast_eq (congr_arg α (eq.symm h')) rfl\n      have C2 : α i.cast_succ = α (cast_succ (cast_lt j h)) := by rw [cast_succ_cast_lt, h']\n      have E2 : update p i y (cast_lt j h) = _root_.cast C2 y :=\n        by\n        have : update p (cast_lt j h) (_root_.cast C2 y) (cast_lt j h) = _root_.cast C2 y := by simp\n        convert this\n        · simp [h, h']\n        · exact heq_of_cast_eq C2 rfl\n      rw [E1, E2]\n      exact eq_rec_compose _ _ _\n    · have : ¬cast_lt j h = i := by\n        intro E\n        apply h'\n        rw [← E, cast_succ_cast_lt]\n      simp [h', this, snoc, h]\n  · rw [eq_last_of_not_lt h]\n    simp [ne.symm (ne_of_lt (cast_succ_lt_last i))]\n#align snoc_update snoc_update\n\n",
 "snoc_last":
 "@[simp]\ntheorem snoc_last : snoc p x (last n) = x := by simp [snoc]\n#align snoc_last snoc_last\n\n",
 "snoc_init_self":
 "/-- Concatenating the first element of a tuple with its tail gives back the original tuple -/\n@[simp]\ntheorem snoc_init_self : snoc (init q) (q (last n)) = q :=\n  by\n  ext j\n  by_cases h : j.val < n\n  · have : j ≠ last n := ne_of_lt h\n    simp [h, update_noteq, this, snoc, init, cast_succ_cast_lt]\n    have A : cast_succ (cast_lt j h) = j := cast_succ_cast_lt _ _\n    rw [← cast_eq rfl (q j)]\n    congr 1 <;> rw [A]\n  · rw [eq_last_of_not_lt h]\n    simp\n#align snoc_init_self snoc_init_self\n\n",
 "snoc_comp_nat_add":
 "@[simp]\ntheorem snoc_comp_nat_add {n m : ℕ} {α : Sort _} (f : fin (m + n) → α) (a : α) :\n    (snoc f a : fin _ → α) ∘ (natAdd m : fin (n + 1) → fin (m + n + 1)) = snoc (f ∘ natAdd m) a :=\n  by\n  ext i\n  refine' Fin.lastCases _ (fun i => _) i\n  · simp only [Function.comp_apply]\n    rw [snoc_last, nat_add_last, snoc_last]\n  · simp only [Function.comp_apply]\n    rw [snoc_cast_succ, nat_add_cast_succ, snoc_cast_succ]\n#align snoc_comp_nat_add snoc_comp_nat_add\n\n",
 "snoc_comp_cast_succ":
 "@[simp]\ntheorem snoc_comp_cast_succ {n : ℕ} {α : Sort _} {a : α} {f : fin n → α} :\n    (snoc f a : fin (n + 1) → α) ∘ cast_succ = f :=\n  funext fun i => by rw [Function.comp_apply, snoc_cast_succ]\n#align snoc_comp_cast_succ snoc_comp_cast_succ\n\n",
 "snoc_comp_cast_add":
 "@[simp]\ntheorem snoc_comp_cast_add {n m : ℕ} {α : Sort _} (f : fin (n + m) → α) (a : α) :\n    (snoc f a : fin _ → α) ∘ castAdd (m + 1) = f ∘ castAdd m :=\n  funext (snoc_cast_add f a)\n#align snoc_comp_cast_add snoc_comp_cast_add\n\n",
 "snoc_cast_succ":
 "@[simp]\ntheorem snoc_cast_succ : snoc p x i.cast_succ = p i :=\n  by\n  have : i.cast_succ.val < n := i.is_lt\n  have h' := Fin.cast_lt_castSucc i i.is_lt\n  simp [snoc, this, h']\n  convert cast_eq rfl (p i)\n#align snoc_cast_succ snoc_cast_succ\n\n",
 "snoc_cast_add":
 "@[simp]\ntheorem snoc_cast_add {α : fin (n + m + 1) → Type _} (f : ∀ i : fin (n + m), α (castSucc i)) (a : α (last (n + m)))\n    (i : fin n) : (snoc f a) (castAdd (m + 1) i) = f (castAdd m i) :=\n  dif_pos _\n#align snoc_cast_add snoc_cast_add\n\n",
 "sigma_eq_of_eq_comp_cast":
 "/-- To show two sigma pairs of tuples agree, it to show the second elements are related via\n`fin.cast`. -/\ntheorem sigma_eq_of_eq_comp_cast {α : Type _} :\n    ∀ {a b : Σii, fin ii → α} (h : a.fst = b.fst), a.snd = b.snd ∘ Fin.cast h → a = b\n  | ⟨ai, a⟩, ⟨bi, b⟩, hi, h => by\n    dsimp only at hi\n    subst hi\n    simpa using h\n#align sigma_eq_of_eq_comp_cast sigma_eq_of_eq_comp_cast\n\n",
 "sigma_eq_iff_eq_comp_cast":
 "/-- `fin.sigma_eq_of_eq_comp_cast` as an `iff`. -/\ntheorem sigma_eq_iff_eq_comp_cast {α : Type _} {a b : Σii, fin ii → α} :\n    a = b ↔ ∃ h : a.fst = b.fst, a.snd = b.snd ∘ Fin.cast h :=\n  ⟨fun h => h ▸ ⟨rfl, funext <| fin.rec fun i hi => rfl⟩, fun ⟨h, h'⟩ => sigma_eq_of_eq_comp_cast _ h'⟩\n#align sigma_eq_iff_eq_comp_cast sigma_eq_iff_eq_comp_cast\n\n",
 "repeat_zero":
 "@[simp]\ntheorem repeat_zero {α : Type _} (a : fin n → α) : repeat 0 a = Fin.elim0' ∘ cast (zero_mul _) :=\n  funext fun x => (cast (zero_mul _) x).elim0'\n#align repeat_zero repeat_zero\n\n",
 "repeat_succ":
 "theorem repeat_succ {α : Type _} (a : fin n → α) (m : ℕ) :\n    repeat m.succ a = append a (repeat m a) ∘ cast ((nat.succ_mul _ _).trans (add_comm _ _)) :=\n  by\n  generalize_proofs h\n  apply funext\n  rw [(Fin.cast h.symm).surjective.forall]\n  refine' Fin.addCases (fun l => _) fun r => _\n  · simp [mod_nat, nat.mod_eq_of_lt l.is_lt]\n  · simp [mod_nat]\n#align repeat_succ repeat_succ\n\n",
 "repeat_one":
 "@[simp]\ntheorem repeat_one {α : Type _} (a : fin n → α) : repeat 1 a = a ∘ cast (one_mul _) :=\n  by\n  generalize_proofs h\n  apply funext\n  rw [(Fin.cast h.symm).surjective.forall]\n  intro i\n  simp [mod_nat, nat.mod_eq_of_lt i.is_lt]\n#align repeat_one repeat_one\n\n",
 "repeat_add":
 "@[simp]\ntheorem repeat_add {α : Type _} (a : fin n → α) (m₁ m₂ : ℕ) :\n    repeat (m₁ + m₂) a = append (repeat m₁ a) (repeat m₂ a) ∘ cast (add_mul _ _ _) :=\n  by\n  generalize_proofs h\n  apply funext\n  rw [(Fin.cast h.symm).surjective.forall]\n  refine' Fin.addCases (fun l => _) fun r => _\n  · simp [mod_nat, nat.mod_eq_of_lt l.is_lt]\n  · simp [mod_nat, Nat.add_mod]\n#align repeat_add repeat_add\n\n",
 "range_fin_succ":
 "theorem range_fin_succ {α} (f : fin (n + 1) → α) : Set.range f = insert (f 0) (Set.range (fin.tail f)) :=\n  Set.ext fun y => exists_fin_succ.trans <| eq_comm.or iff.rfl\n#align range_fin_succ range_fin_succ\n\n",
 "range_cons":
 "@[simp]\ntheorem range_cons {α : Type _} {n : ℕ} (x : α) (b : fin n → α) :\n    Set.range (fin.cons x b : fin n.succ → α) = insert x (Set.range b) := by rw [range_fin_succ, cons_zero, tail_cons]\n#align range_cons range_cons\n\n",
 "preimage_insert_nth_Icc_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_insert_nth_Icc_of_not_mem {i : fin (n + 1)} {x : α i} {q₁ q₂ : ∀ j, α j} (hx : x ∉ Icc (q₁ i) (q₂ i)) :\n    «expr ⁻¹' » (i.insert_nth x) (Icc q₁ q₂) = ∅ :=\n  Set.ext fun p => by simp only [mem_preimage, insert_nth_mem_Icc, hx, false_and_iff, mem_empty_iff_false]\n#align preimage_insert_nth_Icc_of_not_mem preimage_insert_nth_Icc_of_not_mem\n\n",
 "preimage_insert_nth_Icc_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_insert_nth_Icc_of_mem {i : fin (n + 1)} {x : α i} {q₁ q₂ : ∀ j, α j} (hx : x ∈ Icc (q₁ i) (q₂ i)) :\n    «expr ⁻¹' » (i.insert_nth x) (Icc q₁ q₂) = Icc (fun j => q₁ (i.succ_above j)) fun j => q₂ (i.succ_above j) :=\n  Set.ext fun p => by simp only [mem_preimage, insert_nth_mem_Icc, hx, true_and_iff]\n#align preimage_insert_nth_Icc_of_mem preimage_insert_nth_Icc_of_mem\n\n",
 "pi_lex_lt_cons_cons":
 "theorem pi_lex_lt_cons_cons {x₀ y₀ : α 0} {x y : ∀ i : fin n, α i.succ} (s : ∀ {i : fin n.succ}, α i → α i → Prop) :\n    Pi.Lex (· < ·) (@s) (fin.cons x₀ x) (fin.cons y₀ y) ↔\n      s x₀ y₀ ∨ x₀ = y₀ ∧ Pi.Lex (· < ·) (fun i : fin n => @s i.succ) x y :=\n  by\n  simp_rw [Pi.Lex, Fin.exists_fin_succ, fin.cons_succ, fin.cons_zero, Fin.forall_fin_succ]\n  simp [and_assoc', exists_and_left]\n#align pi_lex_lt_cons_cons pi_lex_lt_cons_cons\n\n",
 "nat_find_mem_find":
 "theorem nat_find_mem_find {p : fin n → Prop} [decidable_pred p] (h : ∃ i, ∃ hin : i < n, p ⟨i, hin⟩) :\n    (⟨nat.find h, (nat.find_spec h).fst⟩ : fin n) ∈ find p :=\n  by\n  let ⟨i, hin, hi⟩ := h\n  cases' hf : find p with f\n  · rw [find_eq_none_iff] at hf\n    exact (hf ⟨i, hin⟩ hi).elim\n  · refine' option.some_inj.2 (le_antisymm _ _)\n    · exact find_min' hf (nat.find_spec h).snd\n    · exact nat.find_min' _ ⟨f.2, by convert find_spec p hf <;> exact Fin.eta _ _⟩\n#align nat_find_mem_find nat_find_mem_find\n\n",
 "mem_find_of_unique":
 "theorem mem_find_of_unique {p : fin n → Prop} [decidable_pred p] (h : ∀ i j, p i → p j → i = j) {i : fin n} (hi : p i) :\n    i ∈ fin.find p :=\n  mem_find_iff.2 ⟨hi, fun j hj => le_of_eq <| h i j hi hj⟩\n#align mem_find_of_unique mem_find_of_unique\n\n",
 "mem_find_iff":
 "theorem mem_find_iff {p : fin n → Prop} [decidable_pred p] {i : fin n} : i ∈ fin.find p ↔ p i ∧ ∀ j, p j → i ≤ j :=\n  ⟨fun hi => ⟨find_spec _ hi, fun _ => find_min' hi⟩,\n    by\n    rintro ⟨hpi, hj⟩\n    cases hfp : fin.find p\n    · rw [find_eq_none_iff] at hfp\n      exact (hfp _ hpi).elim\n    · exact option.some_inj.2 (le_antisymm (find_min' hfp hpi) (hj _ (find_spec _ hfp)))⟩\n#align mem_find_iff mem_find_iff\n\n",
 "le_insert_nth_iff":
 "theorem le_insert_nth_iff {i : fin (n + 1)} {x : α i} {p : ∀ j, α (i.succ_above j)} {q : ∀ j, α j} :\n    q ≤ i.insert_nth x p ↔ q i ≤ x ∧ (fun j => q (i.succ_above j)) ≤ p := by simp [Pi.le_def, forall_iff_succ_above i]\n#align le_insert_nth_iff le_insert_nth_iff\n\n",
 "le_cons":
 "theorem le_cons [∀ i, preorder (α i)] {x : α 0} {q : ∀ i, α i} {p : ∀ i : fin n, α i.succ} :\n    q ≤ cons x p ↔ q 0 ≤ x ∧ tail q ≤ p :=\n  forall_fin_succ.trans <| and_congr iff.rfl <| forall_congr' fun j => by simp [tail]\n#align le_cons le_cons\n\n",
 "is_some_find_iff":
 "/-- `find p` does not return `none` if and only if `p i` holds at some index `i`. -/\ntheorem is_some_find_iff : ∀ {n : ℕ} {p : fin n → Prop} [decidable_pred p], (find p).is_some ↔ ∃ i, p i\n  | 0, p, _ => iff_of_false (fun h => bool.no_confusion h) fun ⟨i, _⟩ => finZeroElim i\n  | n + 1, p, _ =>\n    ⟨fun h => by\n      rw [Option.isSome_iff_exists] at h\n      cases' h with i hi\n      exact ⟨i, find_spec _ hi⟩, fun ⟨⟨i, hin⟩, hi⟩ => by\n      skip\n      dsimp [find]\n      cases' h : find fun i : fin n => p (i.cast_lt (nat.lt_succ_of_lt i.2)) with j\n      · split_ifs with hl hl\n        · exact Option.isSome_some\n        · have :=\n            (@is_some_find_iff n (fun x => p (x.cast_lt (nat.lt_succ_of_lt x.2))) _).2\n              ⟨⟨i, lt_of_le_of_ne (nat.le_of_lt_succ hin) fun h => by clear_aux_decl <;> cases h <;> exact hl hi⟩, hi⟩\n          rw [h] at this\n          exact this\n      · simp⟩\n#align is_some_find_iff is_some_find_iff\n\n",
 "insert_nth_zero_right":
 "@[simp]\ntheorem insert_nth_zero_right [∀ j, Zero (α j)] (i : fin (n + 1)) (x : α i) : i.insert_nth x 0 = Pi.single i x :=\n  insert_nth_eq_iff.2 <| by simp [succ_above_ne, pi.zero_def]\n#align insert_nth_zero_right insert_nth_zero_right\n\n",
 "insert_nth_zero'":
 "@[simp]\ntheorem insert_nth_zero' (x : β) (p : fin n → β) : @insert_nth _ (fun _ => β) 0 x p = cons x p := by\n  simp [insert_nth_zero]\n#align insert_nth_zero' insert_nth_zero'\n\n",
 "insert_nth_zero":
 "theorem insert_nth_zero (x : α 0) (p : ∀ j : fin n, α (succAbove 0 j)) :\n    insert_nth 0 x p = cons x fun j => _root_.cast (congr_arg α (congr_fun succAbove_zero j)) (p j) :=\n  by\n  refine' insert_nth_eq_iff.2 ⟨by simp, _⟩\n  ext j\n  convert (cons_succ _ _ _).symm\n#align insert_nth_zero insert_nth_zero\n\n",
 "insert_nth_sub_same":
 "@[simp]\ntheorem insert_nth_sub_same [∀ j, add_group (α j)] (i : fin (n + 1)) (x y : α i) (p : ∀ j, α (i.succ_above j)) :\n    i.insert_nth x p - i.insert_nth y p = Pi.single i (x - y) := by\n  simp_rw [← insert_nth_sub, ← insert_nth_zero_right, pi.sub_def, sub_self, pi.zero_def]\n#align insert_nth_sub_same insert_nth_sub_same\n\n",
 "insert_nth_sub":
 "@[simp]\ntheorem insert_nth_sub [∀ j, Sub (α j)] (i : fin (n + 1)) (x y : α i) (p q : ∀ j, α (i.succ_above j)) :\n    i.insert_nth (x - y) (p - q) = i.insert_nth x p - i.insert_nth y q :=\n  insert_nth_binop (fun _ => has_sub.sub) i x y p q\n#align insert_nth_sub insert_nth_sub\n\n",
 "insert_nth_mul":
 "@[simp]\ntheorem insert_nth_mul [∀ j, Mul (α j)] (i : fin (n + 1)) (x y : α i) (p q : ∀ j, α (i.succ_above j)) :\n    i.insert_nth (x * y) (p * q) = i.insert_nth x p * i.insert_nth y q :=\n  insert_nth_binop (fun _ => (· * ·)) i x y p q\n#align insert_nth_mul insert_nth_mul\n\n",
 "insert_nth_mem_Icc":
 "theorem insert_nth_mem_Icc {i : fin (n + 1)} {x : α i} {p : ∀ j, α (i.succ_above j)} {q₁ q₂ : ∀ j, α j} :\n    i.insert_nth x p ∈ Icc q₁ q₂ ↔\n      x ∈ Icc (q₁ i) (q₂ i) ∧ p ∈ Icc (fun j => q₁ (i.succ_above j)) fun j => q₂ (i.succ_above j) :=\n  by simp only [mem_Icc, insert_nth_le_iff, le_insert_nth_iff, and_assoc, and_left_comm]\n#align insert_nth_mem_Icc insert_nth_mem_Icc\n\n",
 "insert_nth_le_iff":
 "theorem insert_nth_le_iff {i : fin (n + 1)} {x : α i} {p : ∀ j, α (i.succ_above j)} {q : ∀ j, α j} :\n    i.insert_nth x p ≤ q ↔ x ≤ q i ∧ p ≤ fun j => q (i.succ_above j) := by simp [Pi.le_def, forall_iff_succ_above i]\n#align insert_nth_le_iff insert_nth_le_iff\n\n",
 "insert_nth_last'":
 "@[simp]\ntheorem insert_nth_last' (x : β) (p : fin n → β) : @insert_nth _ (fun _ => β) (last n) x p = snoc p x := by\n  simp [insert_nth_last]\n#align insert_nth_last' insert_nth_last'\n\n",
 "insert_nth_last":
 "theorem insert_nth_last (x : α (last n)) (p : ∀ j : fin n, α ((last n).succ_above j)) :\n    insert_nth (last n) x p = snoc (fun j => _root_.cast (congr_arg α (succAbove_last_apply j)) (p j)) x :=\n  by\n  refine' insert_nth_eq_iff.2 ⟨by simp, _⟩\n  ext j\n  apply eq_of_heq\n  trans snoc (fun j => _root_.cast (congr_arg α (succ_above_last_apply j)) (p j)) x j.cast_succ\n  · rw [snoc_cast_succ]\n    exact (cast_heq _ _).symm\n  · apply congr_arg_heq\n    rw [succ_above_last]\n#align insert_nth_last insert_nth_last\n\n",
 "insert_nth_eq_iff":
 "theorem insert_nth_eq_iff {i : fin (n + 1)} {x : α i} {p : ∀ j, α (i.succ_above j)} {q : ∀ j, α j} :\n    i.insert_nth x p = q ↔ q i = x ∧ p = fun j => q (i.succ_above j) := by\n  simp [funext_iff, forall_iff_succ_above i, eq_comm]\n#align insert_nth_eq_iff insert_nth_eq_iff\n\n",
 "insert_nth_div":
 "@[simp]\ntheorem insert_nth_div [∀ j, Div (α j)] (i : fin (n + 1)) (x y : α i) (p q : ∀ j, α (i.succ_above j)) :\n    i.insert_nth (x / y) (p / q) = i.insert_nth x p / i.insert_nth y q :=\n  insert_nth_binop (fun _ => (· / ·)) i x y p q\n#align insert_nth_div insert_nth_div\n\n",
 "insert_nth_comp_succ_above":
 "@[simp]\ntheorem insert_nth_comp_succ_above (i : fin (n + 1)) (x : β) (p : fin n → β) : insert_nth i x p ∘ i.succ_above = p :=\n  funext <| insert_nth_apply_succ_above i x p\n#align insert_nth_comp_succ_above insert_nth_comp_succ_above\n\n",
 "insert_nth_binop":
 "theorem insert_nth_binop (op : ∀ j, α j → α j → α j) (i : fin (n + 1)) (x y : α i) (p q : ∀ j, α (i.succ_above j)) :\n    (i.insert_nth (op i x y) fun j => op _ (p j) (q j)) = fun j => op j (i.insert_nth x p j) (i.insert_nth y q j) :=\n  insert_nth_eq_iff.2 <| by simp\n#align insert_nth_binop insert_nth_binop\n\n",
 "insert_nth_apply_succ_above":
 "@[simp]\ntheorem insert_nth_apply_succ_above (i : fin (n + 1)) (x : α i) (p : ∀ j, α (i.succ_above j)) (j : fin n) :\n    insert_nth i x p (i.succ_above j) = p j :=\n  by\n  simp only [insert_nth, succ_above_cases, dif_neg (succ_above_ne _ _)]\n  by_cases hlt : j.cast_succ < i\n  · rw [dif_pos ((succ_above_lt_iff _ _).2 hlt)]\n    apply eq_of_heq ((eq_rec_heq _ _).trans _)\n    rw [cast_lt_succ_above hlt]\n  · rw [dif_neg (mt (succ_above_lt_iff _ _).1 hlt)]\n    apply eq_of_heq ((eq_rec_heq _ _).trans _)\n    rw [pred_succ_above (le_of_not_lt hlt)]\n#align insert_nth_apply_succ_above insert_nth_apply_succ_above\n\n",
 "insert_nth_apply_same":
 "@[simp]\ntheorem insert_nth_apply_same (i : fin (n + 1)) (x : α i) (p : ∀ j, α (i.succ_above j)) : insert_nth i x p i = x := by\n  simp [insert_nth, succ_above_cases]\n#align insert_nth_apply_same insert_nth_apply_same\n\n",
 "insert_nth_apply_below":
 "theorem insert_nth_apply_below {i j : fin (n + 1)} (h : j < i) (x : α i) (p : ∀ k, α (i.succ_above k)) :\n    i.insert_nth x p j = eq.rec_on (succAbove_castLt h) (p <| j.cast_lt _) := by\n  rw [insert_nth, succ_above_cases, dif_neg h.ne, dif_pos h]\n#align insert_nth_apply_below insert_nth_apply_below\n\n",
 "insert_nth_apply_above":
 "theorem insert_nth_apply_above {i j : fin (n + 1)} (h : i < j) (x : α i) (p : ∀ k, α (i.succ_above k)) :\n    i.insert_nth x p j = eq.rec_on (succAbove_pred h) (p <| j.pred _) := by\n  rw [insert_nth, succ_above_cases, dif_neg h.ne', dif_neg h.not_lt]\n#align insert_nth_apply_above insert_nth_apply_above\n\n",
 "insert_nth_add":
 "@[simp]\ntheorem insert_nth_add [∀ j, Add (α j)] (i : fin (n + 1)) (x y : α i) (p q : ∀ j, α (i.succ_above j)) :\n    i.insert_nth (x + y) (p + q) = i.insert_nth x p + i.insert_nth y q :=\n  insert_nth_binop (fun _ => (· + ·)) i x y p q\n#align insert_nth_add insert_nth_add\n\n",
 "init_update_last":
 "/-- Updating the last element of a tuple does not change the beginning. -/\n@[simp]\ntheorem init_update_last : init (update q (last n) z) = init q :=\n  by\n  ext j\n  simp [init, ne_of_lt, cast_succ_lt_last]\n#align init_update_last init_update_last\n\n",
 "init_update_cast_succ":
 "/-- Updating an element and taking the beginning commute. -/\n@[simp]\ntheorem init_update_cast_succ : init (update q i.cast_succ y) = update (init q) i y :=\n  by\n  ext j\n  by_cases h : j = i\n  · rw [h]\n    simp [init]\n  · simp [init, h]\n#align init_update_cast_succ init_update_cast_succ\n\n",
 "init_snoc":
 "@[simp]\ntheorem init_snoc : init (snoc p x) = p := by\n  ext i\n  have h' := Fin.cast_lt_castSucc i i.is_lt\n  simp [init, snoc, i.is_lt, h']\n  convert cast_eq rfl (p i)\n#align init_snoc init_snoc\n\n",
 "init_def":
 "theorem init_def {n : ℕ} {α : fin (n + 1) → Type _} {q : ∀ i, α i} :\n    (init fun k : fin (n + 1) => q k) = fun k : fin n => q k.cast_succ :=\n  rfl\n#align init_def init_def\n\n",
 "forall_iff_succ_above":
 "theorem forall_iff_succ_above {p : fin (n + 1) → Prop} (i : fin (n + 1)) : (∀ j, p j) ↔ p i ∧ ∀ j, p (i.succ_above j) :=\n  ⟨fun h => ⟨h _, fun j => h _⟩, fun h => succ_above_cases i h.1 h.2⟩\n#align forall_iff_succ_above forall_iff_succ_above\n\n",
 "forall_fin_zero_pi":
 "@[simp]\ntheorem forall_fin_zero_pi {α : fin 0 → Sort _} {P : (∀ i, α i) → Prop} : (∀ x, P x) ↔ P finZeroElim :=\n  ⟨fun h => h _, fun h x => subsingleton.elim finZeroElim x ▸ h⟩\n#align forall_fin_zero_pi forall_fin_zero_pi\n\n",
 "forall_fin_succ_pi":
 "theorem forall_fin_succ_pi {P : (∀ i, α i) → Prop} : (∀ x, P x) ↔ ∀ a v, P (fin.cons a v) :=\n  ⟨fun h a v => h (fin.cons a v), cons_cases⟩\n#align forall_fin_succ_pi forall_fin_succ_pi\n\n",
 "find_spec":
 "/-- If `find p = some i`, then `p i` holds -/\ntheorem find_spec : ∀ {n : ℕ} (p : fin n → Prop) [decidable_pred p] {i : fin n} (hi : i ∈ fin.find p), p i\n  | 0, p, I, i, hi => option.no_confusion hi\n  | n + 1, p, I, i, hi => by\n    dsimp [find] at hi\n    skip\n    cases' h : find fun i : fin n => p (i.cast_lt (nat.lt_succ_of_lt i.2)) with j\n    · rw [h] at hi\n      dsimp at hi\n      split_ifs  at hi with hl hl\n      · exact hi ▸ hl\n      · exact hi.elim\n    · rw [h] at hi\n      rw [← option.some_inj.1 hi]\n      exact find_spec _ h\n#align find_spec find_spec\n\n",
 "find_min'":
 "theorem find_min' {p : fin n → Prop} [decidable_pred p] {i : fin n} (h : i ∈ fin.find p) {j : fin n} (hj : p j) :\n    i ≤ j :=\n  le_of_not_gt fun hij => find_min h hij hj\n#align find_min' find_min'\n\n",
 "find_min":
 "/-- If `find p` returns `some i`, then `p j` does not hold for `j < i`, i.e., `i` is minimal among\nthe indices where `p` holds. -/\ntheorem find_min :\n    ∀ {n : ℕ} {p : fin n → Prop} [decidable_pred p] {i : fin n} (hi : i ∈ fin.find p) {j : fin n} (hj : j < i), ¬p j\n  | 0, p, _, i, hi, j, hj, hpj => option.no_confusion hi\n  | n + 1, p, _, i, hi, ⟨j, hjn⟩, hj, hpj => by\n    skip\n    dsimp [find] at hi\n    cases' h : find fun i : fin n => p (i.cast_lt (nat.lt_succ_of_lt i.2)) with k\n    · rw [h] at hi\n      split_ifs  at hi with hl hl\n      · subst hi\n        rw [find_eq_none_iff] at h\n        exact h ⟨j, hj⟩ hpj\n      · exact hi.elim\n    · rw [h] at hi\n      dsimp at hi\n      obtain rfl := option.some_inj.1 hi\n      exact find_min h (show (⟨j, lt_trans hj k.2⟩ : fin n) < k from hj) hpj\n#align find_min find_min\n\n",
 "find_eq_some_iff":
 "theorem find_eq_some_iff {p : fin n → Prop} [decidable_pred p] {i : fin n} :\n    fin.find p = some i ↔ p i ∧ ∀ j, p j → i ≤ j :=\n  mem_find_iff\n#align find_eq_some_iff find_eq_some_iff\n\n",
 "find_eq_none_iff":
 "/-- `find p` returns `none` if and only if `p i` never holds. -/\ntheorem find_eq_none_iff {n : ℕ} {p : fin n → Prop} [decidable_pred p] : find p = none ↔ ∀ i, ¬p i := by\n  rw [← not_exists, ← is_some_find_iff] <;> cases find p <;> simp\n#align find_eq_none_iff find_eq_none_iff\n\n",
 "exists_fin_zero_pi":
 "@[simp]\ntheorem exists_fin_zero_pi {α : fin 0 → Sort _} {P : (∀ i, α i) → Prop} : (∃ x, P x) ↔ P finZeroElim :=\n  ⟨fun ⟨x, h⟩ => subsingleton.elim x finZeroElim ▸ h, fun h => ⟨_, h⟩⟩\n#align exists_fin_zero_pi exists_fin_zero_pi\n\n",
 "exists_fin_succ_pi":
 "theorem exists_fin_succ_pi {P : (∀ i, α i) → Prop} : (∃ x, P x) ↔ ∃ a v, P (fin.cons a v) :=\n  ⟨fun ⟨x, h⟩ => ⟨x 0, tail x, (cons_self_tail x).symm ▸ h⟩, fun ⟨a, v, h⟩ => ⟨_, h⟩⟩\n#align exists_fin_succ_pi exists_fin_succ_pi\n\n",
 "eq_insert_nth_iff":
 "theorem eq_insert_nth_iff {i : fin (n + 1)} {x : α i} {p : ∀ j, α (i.succ_above j)} {q : ∀ j, α j} :\n    q = i.insert_nth x p ↔ q i = x ∧ p = fun j => q (i.succ_above j) :=\n  eq_comm.trans insert_nth_eq_iff\n#align eq_insert_nth_iff eq_insert_nth_iff\n\n",
 "elim0'_append":
 "@[simp]\ntheorem elim0'_append {α : Type _} (v : fin n → α) : append Fin.elim0' v = v ∘ Fin.cast (zero_add _) :=\n  append_left_nil _ _ rfl\n#align elim0'_append elim0'_append\n\n",
 "cons_zero":
 "@[simp]\ntheorem cons_zero : cons x p 0 = x := by simp [cons]\n#align cons_zero cons_zero\n\n",
 "cons_update":
 "/-- Updating a tuple and adding an element at the beginning commute. -/\n@[simp]\ntheorem cons_update : cons x (update p i y) = update (cons x p) i.succ y :=\n  by\n  ext j\n  by_cases h : j = 0\n  · rw [h]\n    simp [ne.symm (succ_ne_zero i)]\n  · let j' := pred j h\n    have : j'.succ = j := succ_pred j h\n    rw [← this, cons_succ]\n    by_cases h' : j' = i\n    · rw [h']\n      simp\n    · have : j'.succ ≠ i.succ := by rwa [ne.def, succ_inj]\n      rw [update_noteq h', update_noteq this, cons_succ]\n#align cons_update cons_update\n\n",
 "cons_succ":
 "@[simp]\ntheorem cons_succ : cons x p i.succ = p i := by simp [cons]\n#align cons_succ cons_succ\n\n",
 "cons_snoc_eq_snoc_cons":
 "/-- `cons` and `snoc` commute. We state this lemma in a non-dependent setting, as otherwise it\nwould involve a cast to convince Lean that the two types are equal, making it harder to use. -/\ntheorem cons_snoc_eq_snoc_cons {β : Type _} (a : β) (q : fin n → β) (b : β) :\n    @cons n.succ (fun i => β) a (snoc q b) = snoc (cons a q) b :=\n  by\n  ext i\n  by_cases h : i = 0\n  · rw [h]\n    rfl\n  set j := pred i h with ji\n  have : i = j.succ := by rw [ji, succ_pred]\n  rw [this, cons_succ]\n  by_cases h' : j.val < n\n  · set k := cast_lt j h' with jk\n    have : j = k.cast_succ := by rw [jk, cast_succ_cast_lt]\n    rw [this, ← cast_succ_fin_succ]\n    simp\n  rw [eq_last_of_not_lt h', succ_last]\n  simp\n#align cons_snoc_eq_snoc_cons cons_snoc_eq_snoc_cons\n\n",
 "cons_self_tail":
 "/-- Concatenating the first element of a tuple with its tail gives back the original tuple -/\n@[simp]\ntheorem cons_self_tail : cons (q 0) (tail q) = q := by\n  ext j\n  by_cases h : j = 0\n  · rw [h]\n    simp\n  · let j' := pred j h\n    have : j'.succ = j := succ_pred j h\n    rw [← this, tail, cons_succ]\n#align cons_self_tail cons_self_tail\n\n",
 "cons_right_injective":
 "theorem cons_right_injective (x₀ : α 0) : function.injective (cons x₀) :=\n  cons_injective2.right _\n#align cons_right_injective cons_right_injective\n\n",
 "cons_left_injective":
 "theorem cons_left_injective (x : ∀ i : fin n, α i.succ) : function.injective fun x₀ => cons x₀ x :=\n  cons_injective2.left _\n#align cons_left_injective cons_left_injective\n\n",
 "cons_le_cons":
 "theorem cons_le_cons [∀ i, preorder (α i)] {x₀ y₀ : α 0} {x y : ∀ i : fin n, α i.succ} :\n    cons x₀ x ≤ cons y₀ y ↔ x₀ ≤ y₀ ∧ x ≤ y :=\n  forall_fin_succ.trans <| and_congr_right' <| by simp only [cons_succ, Pi.le_def]\n#align cons_le_cons cons_le_cons\n\n",
 "cons_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem cons_le [∀ i, preorder (α i)] {x : α 0} {q : ∀ i, α i} {p : ∀ i : fin n, α i.succ} :\n    cons x p ≤ q ↔ x ≤ q 0 ∧ p ≤ tail q :=\n  @le_cons _ (fun i => «expr ᵒᵈ» (α i)) _ x q p\n#align cons_le cons_le\n\n",
 "cons_injective_of_injective":
 "theorem cons_injective_of_injective {α} {x₀ : α} {x : fin n → α} (hx₀ : x₀ ∉ Set.range x) (hx : function.injective x) :\n    function.injective (cons x₀ x : fin n.succ → α) :=\n  by\n  refine' Fin.cases _ _\n  · refine' Fin.cases _ _\n    · intro\n      rfl\n    · intro j h\n      rw [cons_zero, cons_succ] at h\n      exact hx₀.elim ⟨_, h.symm⟩\n  · intro i\n    refine' Fin.cases _ _\n    · intro h\n      rw [cons_zero, cons_succ] at h\n      exact hx₀.elim ⟨_, h⟩\n    · intro j h\n      rw [cons_succ, cons_succ] at h\n      exact congr_arg _ (hx h)\n#align cons_injective_of_injective cons_injective_of_injective\n\n",
 "cons_injective_iff":
 "theorem cons_injective_iff {α} {x₀ : α} {x : fin n → α} :\n    function.injective (cons x₀ x : fin n.succ → α) ↔ x₀ ∉ Set.range x ∧ function.injective x :=\n  by\n  refine' ⟨fun h => ⟨_, _⟩, fun h => cons_injective_of_injective h.1 h.2⟩\n  · rintro ⟨i, hi⟩\n    replace h := @h i.succ 0\n    simpa [hi, succ_ne_zero] using h\n  · simpa [function.comp] using h.comp (Fin.succ_injective _)\n#align cons_injective_iff cons_injective_iff\n\n",
 "cons_injective2":
 "/-- As a binary function, `fin.cons` is injective. -/\ntheorem cons_injective2 : function.injective2 (@cons n α) := fun x₀ y₀ x y h =>\n  ⟨congr_fun h 0, funext fun i => by simpa using congr_fun h (fin.succ i)⟩\n#align cons_injective2 cons_injective2\n\n",
 "cons_eq_cons":
 "@[simp]\ntheorem cons_eq_cons {x₀ y₀ : α 0} {x y : ∀ i : fin n, α i.succ} : cons x₀ x = cons y₀ y ↔ x₀ = y₀ ∧ x = y :=\n  cons_injective2.eq_iff\n#align cons_eq_cons cons_eq_cons\n\n",
 "cons_cases_cons":
 "@[simp]\ntheorem cons_cases_cons {P : (∀ i : fin n.succ, α i) → Sort v} (h : ∀ x₀ x, P (fin.cons x₀ x)) (x₀ : α 0)\n    (x : ∀ i : fin n, α i.succ) : @cons_cases _ _ _ h (cons x₀ x) = h x₀ x :=\n  by\n  rw [cons_cases, cast_eq]\n  congr\n  exact tail_cons _ _\n#align cons_cases_cons cons_cases_cons\n\n",
 "comp_tail":
 "theorem comp_tail {α : Type _} {β : Type _} (g : α → β) (q : fin n.succ → α) : g ∘ tail q = tail (g ∘ q) :=\n  by\n  ext j\n  simp [tail]\n#align comp_tail comp_tail\n\n",
 "comp_snoc":
 "theorem comp_snoc {α : Type _} {β : Type _} (g : α → β) (q : fin n → α) (y : α) : g ∘ snoc q y = snoc (g ∘ q) (g y) :=\n  by\n  ext j\n  by_cases h : j.val < n\n  · have : j ≠ last n := ne_of_lt h\n    simp [h, this, snoc, cast_succ_cast_lt]\n  · rw [eq_last_of_not_lt h]\n    simp\n#align comp_snoc comp_snoc\n\n",
 "comp_init":
 "theorem comp_init {α : Type _} {β : Type _} (g : α → β) (q : fin n.succ → α) : g ∘ init q = init (g ∘ q) :=\n  by\n  ext j\n  simp [init]\n#align comp_init comp_init\n\n",
 "comp_cons":
 "theorem comp_cons {α : Type _} {β : Type _} (g : α → β) (y : α) (q : fin n → α) : g ∘ cons y q = cons (g y) (g ∘ q) :=\n  by\n  ext j\n  by_cases h : j = 0\n  · rw [h]\n    rfl\n  · let j' := pred j h\n    have : j'.succ = j := succ_pred j h\n    rw [← this, cons_succ, comp_app, cons_succ]\n#align comp_cons comp_cons\n\n",
 "append_right_nil":
 "theorem append_right_nil {α : Type _} (u : fin m → α) (v : fin n → α) (hv : n = 0) :\n    append u v = u ∘ Fin.cast (by rw [hv, add_zero]) :=\n  by\n  refine' funext (Fin.addCases (fun l => _) fun r => _)\n  · rw [append_left, function.comp_apply]\n    refine' congr_arg u (Fin.ext _)\n    simp\n  · exact (Fin.cast hv r).elim0'\n#align append_right_nil append_right_nil\n\n",
 "append_right":
 "@[simp]\ntheorem append_right {α : Type _} (u : fin m → α) (v : fin n → α) (i : fin n) : append u v (natAdd m i) = v i :=\n  addCases_right _ _ _\n#align append_right append_right\n\n",
 "append_left_nil":
 "theorem append_left_nil {α : Type _} (u : fin m → α) (v : fin n → α) (hu : m = 0) :\n    append u v = v ∘ Fin.cast (by rw [hu, zero_add]) :=\n  by\n  refine' funext (Fin.addCases (fun l => _) fun r => _)\n  · exact (Fin.cast hu l).elim0'\n  · rw [append_right, function.comp_apply]\n    refine' congr_arg v (Fin.ext _)\n    simp [hu]\n#align append_left_nil append_left_nil\n\n",
 "append_left":
 "@[simp]\ntheorem append_left {α : Type _} (u : fin m → α) (v : fin n → α) (i : fin m) : append u v (Fin.castAdd n i) = u i :=\n  addCases_left _ _ _\n#align append_left append_left\n\n",
 "append_elim0'":
 "@[simp]\ntheorem append_elim0' {α : Type _} (u : fin m → α) : append u Fin.elim0' = u ∘ Fin.cast (add_zero _) :=\n  append_right_nil _ _ rfl\n#align append_elim0' append_elim0'\n\n",
 "append_assoc":
 "theorem append_assoc {p : ℕ} {α : Type _} (a : fin m → α) (b : fin n → α) (c : fin p → α) :\n    append (append a b) c = append a (append b c) ∘ Fin.cast (add_assoc _ _ _) :=\n  by\n  ext i\n  rw [function.comp_apply]\n  refine' Fin.addCases (fun l => _) (fun r => _) i\n  · rw [append_left]\n    refine' Fin.addCases (fun ll => _) (fun lr => _) l\n    · rw [append_left]\n      simp [cast_add_cast_add]\n    · rw [append_right]\n      simp [cast_add_nat_add]\n  · rw [append_right]\n    simp [← nat_add_nat_add]\n#align append_assoc append_assoc\n\n"}