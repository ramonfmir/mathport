{"nodup_antidiagonal_tuple":
 "theorem nodup_antidiagonal_tuple (k n : ℕ) : (antidiagonalTuple k n).nodup :=\n  List.Nat.nodup_antidiagonalTuple _ _\n#align nodup_antidiagonal_tuple nodup_antidiagonal_tuple\n\n",
 "mem_antidiagonal_tuple":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem mem_antidiagonal_tuple {n : ℕ} {k : ℕ} {x : Fin k → ℕ} :\n    x ∈ antidiagonalTuple k n ↔\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\" (x i) =\n        n :=\n  List.Nat.mem_antidiagonalTuple\n#align mem_antidiagonal_tuple mem_antidiagonal_tuple\n\n",
 "antidiagonal_tuple_zero_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem antidiagonal_tuple_zero_zero :\n    antidiagonalTuple 0 0 =\n      {«expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"} :=\n  rfl\n#align antidiagonal_tuple_zero_zero antidiagonal_tuple_zero_zero\n\n",
 "antidiagonal_tuple_zero_succ":
 "@[simp]\ntheorem antidiagonal_tuple_zero_succ (n : ℕ) : antidiagonalTuple 0 n.succ = ∅ :=\n  rfl\n#align antidiagonal_tuple_zero_succ antidiagonal_tuple_zero_succ\n\n",
 "antidiagonal_tuple_zero_right":
 "theorem antidiagonal_tuple_zero_right (k : ℕ) : antidiagonalTuple k 0 = {0} :=\n  Finset.eq_of_veq (Multiset.Nat.antidiagonalTuple_zero_right k)\n#align antidiagonal_tuple_zero_right antidiagonal_tuple_zero_right\n\n",
 "antidiagonal_tuple_two":
 "theorem antidiagonal_tuple_two (n : ℕ) :\n    antidiagonalTuple 2 n = (antidiagonal n).map (piFinTwoEquiv fun _ => ℕ).symm.to_embedding :=\n  Finset.eq_of_veq (Multiset.Nat.antidiagonalTuple_two n)\n#align antidiagonal_tuple_two antidiagonal_tuple_two\n\n",
 "antidiagonal_tuple_pairwise_pi_lex":
 "theorem antidiagonal_tuple_pairwise_pi_lex : ∀ k n, (antidiagonalTuple k n).pairwise (Pi.Lex (· < ·) fun _ => (· < ·))\n  | 0, 0 => List.pairwise_singleton _ _\n  | 0, n + 1 => List.Pairwise.nil\n  | k + 1, n =>\n    by\n    simp_rw [antidiagonal_tuple, List.pairwise_bind, List.pairwise_map', List.mem_map, forall_exists_index, and_imp,\n      forall_apply_eq_imp_iff₂]\n    simp only [mem_antidiagonal, Prod.forall, and_imp, forall_apply_eq_imp_iff₂]\n    simp only [Fin.pi_lex_lt_cons_cons, eq_self_iff_true, true_and_iff, lt_self_iff_false, false_or_iff]\n    refine' ⟨fun _ _ _ => antidiagonal_tuple_pairwise_pi_lex k _, _⟩\n    induction n\n    · rw [antidiagonal_zero]\n      exact List.pairwise_singleton _ _\n    · rw [antidiagonal_succ, List.pairwise_cons, List.pairwise_map']\n      refine' ⟨fun p hp x hx y hy => _, _⟩\n      · rw [List.mem_map, Prod.exists] at hp\n        obtain ⟨a, b, hab, rfl : (nat.succ a, b) = p⟩ := hp\n        exact or.inl (nat.zero_lt_succ _)\n      dsimp\n      simp_rw [Nat.succ_inj', Nat.succ_lt_succ_iff]\n      exact n_ih\n#align antidiagonal_tuple_pairwise_pi_lex antidiagonal_tuple_pairwise_pi_lex\n\n",
 "antidiagonal_tuple_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem antidiagonal_tuple_one (n : ℕ) :\n    antidiagonalTuple 1 n =\n      {«expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"} :=\n  Finset.eq_of_veq (Multiset.Nat.antidiagonalTuple_one n)\n#align antidiagonal_tuple_one antidiagonal_tuple_one\n\n"}