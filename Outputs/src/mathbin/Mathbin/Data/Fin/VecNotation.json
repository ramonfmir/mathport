{"zero_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem zero_empty :\n    (0 : Fin 0 → α) =\n      «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  empty_eq _\n#align zero_empty zero_empty\n\n",
 "vec_single_eq_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\ntheorem vec_single_eq_const (a : α) :\n    «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" = fun _ => a :=\n  funext <| Unique.forall_iff.2 rfl\n#align vec_single_eq_const vec_single_eq_const\n\n",
 "vec_head_vec_alt1":
 "@[simp]\ntheorem vec_head_vec_alt1 (hm : m + 2 = n + 1 + (n + 1)) (v : Fin (m + 2) → α) : vecHead (vecAlt1 hm v) = v 1 := by\n  simp [vec_head, vec_alt1]\n#align vec_head_vec_alt1 vec_head_vec_alt1\n\n",
 "vec_head_vec_alt0":
 "@[simp]\ntheorem vec_head_vec_alt0 (hm : m + 2 = n + 1 + (n + 1)) (v : Fin (m + 2) → α) : vecHead (vecAlt0 hm v) = v 0 :=\n  rfl\n#align vec_head_vec_alt0 vec_head_vec_alt0\n\n",
 "vec_cons_const":
 "@[simp]\ntheorem vec_cons_const (a : α) : (vecCons a fun k : Fin n => a) = fun _ => a :=\n  funext <| Fin.forall_fin_succ.2 ⟨rfl, cons_val_succ _ _⟩\n#align vec_cons_const vec_cons_const\n\n",
 "vec_append_eq_ite":
 "theorem vec_append_eq_ite {α : Type _} {o : ℕ} (ho : o = m + n) (u : Fin m → α) (v : Fin n → α) :\n    vecAppend ho u v = fun i =>\n      if h : (i : ℕ) < m then u ⟨i, h⟩ else v ⟨(i : ℕ) - m, (tsub_lt_iff_left (le_of_not_lt h)).2 (ho ▸ i.property)⟩ :=\n  by\n  ext i\n  rw [vec_append, Fin.append, Function.comp_apply, Fin.addCases]\n  congr with hi\n  simp only [eq_rec_constant]\n  rfl\n#align vec_append_eq_ite vec_append_eq_ite\n\n",
 "vec_append_apply_zero":
 "@[simp]\ntheorem vec_append_apply_zero {α : Type _} {o : ℕ} (ho : o + 1 = m + 1 + n) (u : Fin (m + 1) → α) (v : Fin n → α) :\n    vecAppend ho u v 0 = u 0 :=\n  rfl\n#align vec_append_apply_zero vec_append_apply_zero\n\n",
 "vec_alt1_vec_append":
 "theorem vec_alt1_vec_append (v : Fin (n + 1) → α) : vecAlt1 rfl (vecAppend rfl v v) = v ∘ bit1 :=\n  by\n  ext i\n  simp_rw [Function.comp, vec_alt1, vec_append_eq_ite]\n  cases n\n  · simp\n    congr\n  · split_ifs with h <;> simp_rw [bit1, bit0] <;> congr\n    · simp only [Fin.ext_iff, Fin.val_add, Fin.val_mk]\n      rw [Fin.val_mk] at h\n      rw [Fin.val_one]\n      rw [nat.mod_eq_of_lt (nat.lt_of_succ_lt h)]\n      rw [nat.mod_eq_of_lt h]\n    · rw [Fin.val_mk, not_lt] at h\n      simp only [Fin.ext_iff, Fin.val_add, Fin.val_mk, Nat.mod_add_mod, Fin.val_one, nat.mod_eq_sub_mod h]\n      refine' (nat.mod_eq_of_lt _).symm\n      rw [tsub_lt_iff_left h]\n      exact Nat.add_succ_lt_add i.property i.property\n#align vec_alt1_vec_append vec_alt1_vec_append\n\n",
 "vec_alt0_vec_append":
 "theorem vec_alt0_vec_append (v : Fin n → α) : vecAlt0 rfl (vecAppend rfl v v) = v ∘ bit0 :=\n  by\n  ext i\n  simp_rw [Function.comp, bit0, vec_alt0, vec_append_eq_ite]\n  split_ifs with h <;> congr\n  · rw [Fin.val_mk] at h\n    simp only [Fin.ext_iff, Fin.val_add, Fin.val_mk]\n    exact (nat.mod_eq_of_lt h).symm\n  · rw [Fin.val_mk, not_lt] at h\n    simp only [Fin.ext_iff, Fin.val_add, Fin.val_mk, nat.mod_eq_sub_mod h]\n    refine' (nat.mod_eq_of_lt _).symm\n    rw [tsub_lt_iff_left h]\n    exact add_lt_add i.property i.property\n#align vec_alt0_vec_append vec_alt0_vec_append\n\n",
 "tail_zero":
 "@[simp]\ntheorem tail_zero : vecTail (0 : Fin n.succ → α) = 0 :=\n  rfl\n#align tail_zero tail_zero\n\n",
 "tail_sub":
 "@[simp]\ntheorem tail_sub (a b : Fin n.succ → α) : vecTail (a - b) = vecTail a - vecTail b :=\n  rfl\n#align tail_sub tail_sub\n\n",
 "tail_neg":
 "@[simp]\ntheorem tail_neg (a : Fin n.succ → α) : vecTail (-a) = -vecTail a :=\n  rfl\n#align tail_neg tail_neg\n\n",
 "tail_cons":
 "@[simp]\ntheorem tail_cons (x : α) (u : Fin m → α) : vecTail (vecCons x u) = u :=\n  by\n  ext\n  simp [vec_tail]\n#align tail_cons tail_cons\n\n",
 "tail_add":
 "@[simp]\ntheorem tail_add (a b : Fin n.succ → α) : vecTail (a + b) = vecTail a + vecTail b :=\n  rfl\n#align tail_add tail_add\n\n",
 "sub_cons":
 "@[simp]\ntheorem sub_cons (v : Fin n.succ → α) (y : α) (w : Fin n → α) :\n    v - vecCons y w = vecCons (vecHead v - y) (vecTail v - w) :=\n  by\n  ext i\n  refine' Fin.cases _ _ i <;> simp [vec_head, vec_tail]\n#align sub_cons sub_cons\n\n",
 "smul_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem smul_empty (x : M) (v : Fin 0 → α) :\n    «expr • » x v = «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  empty_eq _\n#align smul_empty smul_empty\n\n",
 "smul_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_cons (x : M) (y : α) (v : Fin n → α) :\n    «expr • » x (vecCons y v) = vecCons («expr • » x y) («expr • » x v) :=\n  by\n  ext i\n  refine' Fin.cases _ _ i <;> simp\n#align smul_cons smul_cons\n\n",
 "range_empty":
 "@[simp]\ntheorem range_empty (u : Fin 0 → α) : Set.range u = ∅ :=\n  Set.range_eq_empty _\n#align range_empty range_empty\n\n",
 "range_cons_empty":
 "@[simp]\ntheorem range_cons_empty (x : α) (u : Fin 0 → α) : Set.range (Matrix.vecCons x u) = {x} := by\n  rw [range_cons, range_empty, Set.union_empty]\n#align range_cons_empty range_cons_empty\n\n",
 "range_cons_cons_empty":
 "@[simp]\ntheorem range_cons_cons_empty (x y : α) (u : Fin 0 → α) : Set.range (vecCons x <| vecCons y u) = {x, y} := by\n  rw [range_cons, range_cons_empty, Set.singleton_union]\n#align range_cons_cons_empty range_cons_cons_empty\n\n",
 "range_cons":
 "@[simp]\ntheorem range_cons (x : α) (u : Fin n → α) : Set.range (vecCons x u) = {x} ∪ Set.range u :=\n  Set.ext fun y => by simp [Fin.exists_fin_succ, eq_comm]\n#align range_cons range_cons\n\n",
 "neg_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem neg_empty (v : Fin 0 → α) :\n    -v = «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  empty_eq _\n#align neg_empty neg_empty\n\n",
 "neg_cons":
 "@[simp]\ntheorem neg_cons (x : α) (v : Fin n → α) : -vecCons x v = vecCons (-x) (-v) :=\n  by\n  ext i\n  refine' Fin.cases _ _ i <;> simp\n#align neg_cons neg_cons\n\n",
 "head_zero":
 "@[simp]\ntheorem head_zero : vecHead (0 : Fin n.succ → α) = 0 :=\n  rfl\n#align head_zero head_zero\n\n",
 "head_sub":
 "@[simp]\ntheorem head_sub (a b : Fin n.succ → α) : vecHead (a - b) = vecHead a - vecHead b :=\n  rfl\n#align head_sub head_sub\n\n",
 "head_neg":
 "@[simp]\ntheorem head_neg (a : Fin n.succ → α) : vecHead (-a) = -vecHead a :=\n  rfl\n#align head_neg head_neg\n\n",
 "head_fin_const":
 "@[simp]\ntheorem head_fin_const (a : α) : (vecHead fun i : Fin (n + 1) => a) = a :=\n  rfl\n#align head_fin_const head_fin_const\n\n",
 "head_cons":
 "@[simp]\ntheorem head_cons (x : α) (u : Fin m → α) : vecHead (vecCons x u) = x :=\n  rfl\n#align head_cons head_cons\n\n",
 "head_add":
 "@[simp]\ntheorem head_add (a b : Fin n.succ → α) : vecHead (a + b) = vecHead a + vecHead b :=\n  rfl\n#align head_add head_add\n\n",
 "empty_vec_append":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem empty_vec_append (v : Fin n → α) :\n    vecAppend (zero_add _).symm\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") v =\n      v :=\n  by\n  ext\n  simp [vec_append_eq_ite]\n#align empty_vec_append empty_vec_append\n\n",
 "empty_vec_alt1":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n-- Although proved by simp, extracting element 9 of a five-element\n-- vector does not work by simp unless this lemma is present.\n@[simp]\ntheorem empty_vec_alt1 (α) {h} :\n    vecAlt1 h\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :\n          Fin 0 → α) =\n      «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  by simp\n#align empty_vec_alt1 empty_vec_alt1\n\n",
 "empty_vec_alt0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n-- Although proved by simp, extracting element 8 of a five-element\n-- vector does not work by simp unless this lemma is present.\n@[simp]\ntheorem empty_vec_alt0 (α) {h} :\n    vecAlt0 h\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :\n          Fin 0 → α) =\n      «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  by simp\n#align empty_vec_alt0 empty_vec_alt0\n\n",
 "empty_val'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem empty_val' {n' : Type _} (j : n') :\n    (fun i =>\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :\n            Fin 0 → n' → α)\n          i j) =\n      «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  empty_eq _\n#align empty_val' empty_val'\n\n",
 "empty_sub_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem empty_sub_empty (v w : Fin 0 → α) :\n    v - w = «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  empty_eq _\n#align empty_sub_empty empty_sub_empty\n\n",
 "empty_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/-\nCopyright (c) 2020 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\ntheorem empty_eq (v : Fin 0 → α) :\n    v = «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  subsingleton.elim _ _\n#align empty_eq empty_eq\n\n",
 "empty_add_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem empty_add_empty (v w : Fin 0 → α) :\n    v + w = «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\" :=\n  empty_eq _\n#align empty_add_empty empty_add_empty\n\n",
 "cons_zero_zero":
 "@[simp]\ntheorem cons_zero_zero : vecCons (0 : α) (0 : Fin n → α) = 0 :=\n  by\n  ext (i j)\n  refine' Fin.cases _ _ i\n  · rfl\n  simp\n#align cons_zero_zero cons_zero_zero\n\n",
 "cons_vec_bit1_eq_alt1":
 "@[simp]\ntheorem cons_vec_bit1_eq_alt1 (x : α) (u : Fin n → α) (i : Fin (n + 1)) :\n    vecCons x u (bit1 i) = vecAlt1 rfl (vecAppend rfl (vecCons x u) (vecCons x u)) i := by rw [vec_alt1_vec_append]\n#align cons_vec_bit1_eq_alt1 cons_vec_bit1_eq_alt1\n\n",
 "cons_vec_bit0_eq_alt0":
 "@[simp]\ntheorem cons_vec_bit0_eq_alt0 (x : α) (u : Fin n → α) (i : Fin (n + 1)) :\n    vecCons x u (bit0 i) = vecAlt0 rfl (vecAppend rfl (vecCons x u) (vecCons x u)) i := by rw [vec_alt0_vec_append]\n#align cons_vec_bit0_eq_alt0 cons_vec_bit0_eq_alt0\n\n",
 "cons_vec_append":
 "@[simp]\ntheorem cons_vec_append (ho : o + 1 = m + 1 + n) (x : α) (u : Fin m → α) (v : Fin n → α) :\n    vecAppend ho (vecCons x u) v =\n      vecCons x (vecAppend (by rwa [add_assoc, add_comm 1, ← add_assoc, add_right_cancel_iff] at ho) u v) :=\n  by\n  ext i\n  simp_rw [vec_append_eq_ite]\n  split_ifs with h\n  · rcases i with ⟨⟨⟩ | i, hi⟩\n    · simp\n    · simp only [nat.succ_eq_add_one, add_lt_add_iff_right, Fin.val_mk] at h\n      simp [h]\n  · rcases i with ⟨⟨⟩ | i, hi⟩\n    · simpa using h\n    · rw [not_lt, Fin.val_mk, nat.succ_eq_add_one, add_le_add_iff_right] at h\n      simp [h]\n#align cons_vec_append cons_vec_append\n\n",
 "cons_vec_alt1":
 "@[simp]\ntheorem cons_vec_alt1 (h : m + 1 + 1 = n + 1 + (n + 1)) (x y : α) (u : Fin m → α) :\n    vecAlt1 h (vecCons x (vecCons y u)) =\n      vecCons y\n        (vecAlt1\n          (by rwa [add_assoc n, add_comm 1, ← add_assoc, ← add_assoc, add_right_cancel_iff, add_right_cancel_iff] at h)\n          u) :=\n  by\n  ext i\n  simp_rw [vec_alt1]\n  rcases i with ⟨⟨⟩ | i, hi⟩\n  · rfl\n  · simp [vec_alt1, nat.add_succ, nat.succ_add]\n#align cons_vec_alt1 cons_vec_alt1\n\n",
 "cons_vec_alt0":
 "@[simp]\ntheorem cons_vec_alt0 (h : m + 1 + 1 = n + 1 + (n + 1)) (x y : α) (u : Fin m → α) :\n    vecAlt0 h (vecCons x (vecCons y u)) =\n      vecCons x\n        (vecAlt0\n          (by rwa [add_assoc n, add_comm 1, ← add_assoc, ← add_assoc, add_right_cancel_iff, add_right_cancel_iff] at h)\n          u) :=\n  by\n  ext i\n  simp_rw [vec_alt0]\n  rcases i with ⟨⟨⟩ | i, hi⟩\n  · rfl\n  · simp [vec_alt0, nat.add_succ, nat.succ_add]\n#align cons_vec_alt0 cons_vec_alt0\n\n",
 "cons_val_zero'":
 "theorem cons_val_zero' (h : 0 < m.succ) (x : α) (u : Fin m → α) : vecCons x u ⟨0, h⟩ = x :=\n  rfl\n#align cons_val_zero' cons_val_zero'\n\n",
 "cons_val_zero":
 "@[simp]\ntheorem cons_val_zero (x : α) (u : Fin m → α) : vecCons x u 0 = x :=\n  rfl\n#align cons_val_zero cons_val_zero\n\n",
 "cons_val_succ'":
 "@[simp]\ntheorem cons_val_succ' {i : ℕ} (h : i.succ < m.succ) (x : α) (u : Fin m → α) :\n    vecCons x u ⟨i.succ, h⟩ = u ⟨i, nat.lt_of_succ_lt_succ h⟩ := by simp only [vec_cons, Fin.cons, Fin.cases_succ']\n#align cons_val_succ' cons_val_succ'\n\n",
 "cons_val_succ":
 "@[simp]\ntheorem cons_val_succ (x : α) (u : Fin m → α) (i : Fin m) : vecCons x u i.succ = u i := by simp [vec_cons]\n#align cons_val_succ cons_val_succ\n\n",
 "cons_val_one":
 "/-- `![a, b, ...] 1` is equal to `b`.\n\n  The simplifier needs a special lemma for length `≥ 2`, in addition to\n  `cons_val_succ`, because `1 : fin 1 = 0 : fin 1`.\n-/\n@[simp]\ntheorem cons_val_one (x : α) (u : Fin m.succ → α) : vecCons x u 1 = vecHead u :=\n  by\n  rw [← Fin.succ_zero_eq_one, cons_val_succ]\n  rfl\n#align cons_val_one cons_val_one\n\n",
 "cons_val_fin_one":
 "@[simp]\ntheorem cons_val_fin_one (x : α) (u : Fin 0 → α) (i : Fin 1) : vecCons x u i = x :=\n  by\n  refine' Fin.forall_fin_one.2 _ i\n  rfl\n#align cons_val_fin_one cons_val_fin_one\n\n",
 "cons_sub_cons":
 "@[simp]\ntheorem cons_sub_cons (x : α) (v : Fin n → α) (y : α) (w : Fin n → α) :\n    vecCons x v - vecCons y w = vecCons (x - y) (v - w) := by simp\n#align cons_sub_cons cons_sub_cons\n\n",
 "cons_sub":
 "@[simp]\ntheorem cons_sub (x : α) (v : Fin n → α) (w : Fin n.succ → α) :\n    vecCons x v - w = vecCons (x - vecHead w) (v - vecTail w) :=\n  by\n  ext i\n  refine' Fin.cases _ _ i <;> simp [vec_head, vec_tail]\n#align cons_sub cons_sub\n\n",
 "cons_nonzero_iff":
 "theorem cons_nonzero_iff {v : Fin n → α} {x : α} : vecCons x v ≠ 0 ↔ x ≠ 0 ∨ v ≠ 0 :=\n  ⟨fun h => not_and_or.mp (h ∘ cons_eq_zero_iff.mpr), fun h => mt cons_eq_zero_iff.mp (not_and_or.mpr h)⟩\n#align cons_nonzero_iff cons_nonzero_iff\n\n",
 "cons_head_tail":
 "@[simp]\ntheorem cons_head_tail (u : Fin m.succ → α) : vecCons (vecHead u) (vecTail u) = u :=\n  Fin.cons_self_tail _\n#align cons_head_tail cons_head_tail\n\n",
 "cons_fin_one":
 "theorem cons_fin_one (x : α) (u : Fin 0 → α) : vecCons x u = fun _ => x :=\n  funext (cons_val_fin_one x u)\n#align cons_fin_one cons_fin_one\n\n",
 "cons_eq_zero_iff":
 "@[simp]\ntheorem cons_eq_zero_iff {v : Fin n → α} {x : α} : vecCons x v = 0 ↔ x = 0 ∧ v = 0 :=\n  ⟨fun h =>\n    ⟨congr_fun h 0, by\n      convert congr_arg vec_tail h\n      simp⟩,\n    fun ⟨hx, hv⟩ => by simp [hx, hv]⟩\n#align cons_eq_zero_iff cons_eq_zero_iff\n\n",
 "cons_add_cons":
 "@[simp]\ntheorem cons_add_cons (x : α) (v : Fin n → α) (y : α) (w : Fin n → α) :\n    vecCons x v + vecCons y w = vecCons (x + y) (v + w) := by simp\n#align cons_add_cons cons_add_cons\n\n",
 "cons_add":
 "@[simp]\ntheorem cons_add (x : α) (v : Fin n → α) (w : Fin n.succ → α) :\n    vecCons x v + w = vecCons (x + vecHead w) (v + vecTail w) :=\n  by\n  ext i\n  refine' Fin.cases _ _ i <;> simp [vec_head, vec_tail]\n#align cons_add cons_add\n\n",
 "add_cons":
 "@[simp]\ntheorem add_cons (v : Fin n.succ → α) (y : α) (w : Fin n → α) :\n    v + vecCons y w = vecCons (vecHead v + y) (vecTail v + w) :=\n  by\n  ext i\n  refine' Fin.cases _ _ i <;> simp [vec_head, vec_tail]\n#align add_cons add_cons\n\n"}