{"fintype_le":
 "/-\nCopyright (c) 2021 Peter Nelson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Peter Nelson, Yaël Dillies\n-/\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\ntheorem directed.fintype_le {r : α → α → Prop} [is_trans α r] {β γ : Type _} [nonempty γ] {f : γ → α} [fintype β]\n    (D : Directed r f) (g : β → γ) : ∃ z, ∀ i, r (f (g i)) (f z) := by\n  classical\n    obtain ⟨z, hz⟩ := D.finset_le (Finset.image g finset.univ)\n    exact ⟨z, fun i => hz (g i) (Finset.mem_image_of_mem g (finset.mem_univ i))⟩\n#align directed.fintype_le directed.fintype_le\n\n",
 "exists_le":
 "theorem fintype.exists_le [nonempty α] [preorder α] [IsDirected α (· ≤ ·)] {β : Type _} [fintype β] (f : β → α) :\n    ∃ M, ∀ i, f i ≤ M :=\n  directed_id.fintype_le _\n#align fintype.exists_le fintype.exists_le\n\n",
 "bdd_above_range":
 "theorem fintype.bdd_above_range [nonempty α] [preorder α] [IsDirected α (· ≤ ·)] {β : Type _} [fintype β] (f : β → α) :\n    BddAbove (Set.range f) := by\n  obtain ⟨M, hM⟩ := fintype.exists_le f\n  refine' ⟨M, fun a ha => _⟩\n  obtain ⟨b, rfl⟩ := ha\n  exact hM b\n#align fintype.bdd_above_range fintype.bdd_above_range\n\n"}