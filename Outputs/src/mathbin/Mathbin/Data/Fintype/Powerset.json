{"univ_filter_card_eq":
 "@[simp]\ntheorem finset.univ_filter_card_eq (α : Type _) [fintype α] (k : ℕ) :\n    ((finset.univ : Finset (Finset α)).filter fun s => s.card = k) = finset.univ.powerset_len k :=\n  by\n  ext\n  simp [finset.mem_powerset_len]\n#align finset.univ_filter_card_eq finset.univ_filter_card_eq\n\n",
 "powerset_univ":
 "@[simp]\ntheorem finset.powerset_univ [fintype α] : (univ : Finset α).powerset = univ :=\n  coe_injective <| by simp [-coe_eq_univ]\n#align finset.powerset_univ finset.powerset_univ\n\n",
 "powerset_eq_univ":
 "@[simp]\ntheorem finset.powerset_eq_univ [fintype α] {s : Finset α} : s.powerset = univ ↔ s = univ := by\n  rw [← finset.powerset_univ, powerset_inj]\n#align finset.powerset_eq_univ finset.powerset_eq_univ\n\n",
 "mem_powerset_len_univ_iff":
 "theorem finset.mem_powerset_len_univ_iff [fintype α] {s : Finset α} {k : ℕ} :\n    s ∈ powerset_len k (univ : Finset α) ↔ card s = k :=\n  mem_powerset_len.trans <| and_iff_right <| subset_univ _\n#align finset.mem_powerset_len_univ_iff finset.mem_powerset_len_univ_iff\n\n",
 "card_set":
 "-- Not to be confused with `set.finite`, the predicate\n@[simp]\ntheorem fintype.card_set [fintype α] : fintype.card (set α) = 2 ^ fintype.card α :=\n  (finset.card_map _).trans (finset.card_powerset _)\n#align fintype.card_set fintype.card_set\n\n",
 "card_finset_len":
 "@[simp]\ntheorem fintype.card_finset_len [fintype α] (k : ℕ) :\n    fintype.card { s : Finset α // s.card = k } = Nat.choose (fintype.card α) k := by\n  simp [fintype.subtype_card, finset.card_univ]\n#align fintype.card_finset_len fintype.card_finset_len\n\n",
 "card_finset":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem fintype.card_finset [fintype α] : fintype.card (Finset α) = 2 ^ fintype.card α :=\n  finset.card_powerset finset.univ\n#align fintype.card_finset fintype.card_finset\n\n"}