{"card_embedding_eq_of_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `fintype.card -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `fintype.card -/\n/-\nCopyright (c) 2021 Eric Rodriguez. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Rodriguez\n-/\ntheorem card_embedding_eq_of_unique {α β : Type _} [unique α] [fintype β] [fintype («expr ↪ » α β)] :\n    fintype.card («expr ↪ » α β) = fintype.card β :=\n  card_congr Equiv.uniqueEmbeddingEquivResult\n#align card_embedding_eq_of_unique card_embedding_eq_of_unique\n\n",
 "card_embedding_eq_of_infinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `fintype.card -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- The cardinality of embeddings from an infinite type to a finite type is zero.\nThis is a re-statement of the pigeonhole principle. -/\n@[simp]\ntheorem card_embedding_eq_of_infinite {α β : Type _} [Infinite α] [fintype β] [fintype («expr ↪ » α β)] :\n    fintype.card («expr ↪ » α β) = 0 :=\n  card_eq_zero\n#align card_embedding_eq_of_infinite card_embedding_eq_of_infinite\n\n",
 "card_embedding_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `fintype.card -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `fintype.card -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `fintype.card -/\n-- Establishes the cardinality of the type of all injections between two finite types.\n@[simp]\ntheorem card_embedding_eq {α β} [fintype α] [fintype β] [fintype («expr ↪ » α β)] :\n    fintype.card («expr ↪ » α β) = (fintype.card β).desc_factorial (fintype.card α) := by\n  classical\n    induction' ‹fintype α› using fintype.induction_empty_option with α₁ α₂ h₂ e ih α h ih\n    · letI := fintype.of_equiv _ e.symm\n      rw [← card_congr (Equiv.embeddingCongr e (equiv.refl β)), ih, card_congr e]\n    · rw [card_pempty, nat.desc_factorial_zero, card_eq_one_iff]\n      exact ⟨embedding.of_is_empty, fun x => fun_like.ext _ _ is_empty_elim⟩\n    · rw [card_option, nat.desc_factorial_succ, card_congr (embedding.option_embedding_equiv α β), card_sigma, ← ih]\n      simp only [fintype.card_compl_set, fintype.card_range, finset.sum_const, finset.card_univ, smul_eq_mul, mul_comm]\n#align card_embedding_eq card_embedding_eq\n\n"}