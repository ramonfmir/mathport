{"univ_unit":
 "theorem fintype.univ_unit : @univ unit _ = {()} :=\n  rfl\n#align fintype.univ_unit fintype.univ_unit\n\n",
 "univ_unique":
 "@[simp]\ntheorem univ_unique [unique α] : (univ : Finset α) = {default} :=\n  Finset.ext fun x => iff_of_true (mem_univ _) <| mem_singleton.2 <| subsingleton.elim x default\n#align univ_unique univ_unique\n\n",
 "univ_succ_above":
 "/-- Embed `fin n` into `fin (n + 1)` by inserting\naround a specified pivot `p : fin (n + 1)` into the `univ` -/\ntheorem fin.univ_succ_above (n : ℕ) (p : fin (n + 1)) :\n    (univ : Finset (fin (n + 1))) = cons p (univ.map <| (Fin.succAbove p).to_embedding) (by simp) := by\n  simp [map_eq_image]\n#align fin.univ_succ_above fin.univ_succ_above\n\n",
 "univ_succ":
 "/- The following three lemmas use `finset.cons` instead of `insert` and `finset.map` instead of\n`finset.image` to reduce proof obligations downstream. -/\n/-- Embed `fin n` into `fin (n + 1)` by prepending zero to the `univ` -/\ntheorem fin.univ_succ (n : ℕ) :\n    (univ : Finset (fin (n + 1))) = cons 0 (univ.map ⟨fin.succ, Fin.succ_injective _⟩) (by simp [map_eq_image]) := by\n  simp [map_eq_image]\n#align fin.univ_succ fin.univ_succ\n\n",
 "univ_punit":
 "@[simp]\ntheorem fintype.univ_punit : @univ PUnit _ = {PUnit.unit} :=\n  rfl\n#align fintype.univ_punit fintype.univ_punit\n\n",
 "univ_pempty":
 "@[simp]\ntheorem fintype.univ_pempty : @univ PEmpty _ = ∅ :=\n  rfl\n#align fintype.univ_pempty fintype.univ_pempty\n\n",
 "univ_of_subsingleton":
 "@[simp]\ntheorem univ_of_subsingleton (a : α) [subsingleton α] : @univ _ (of_subsingleton a) = {a} :=\n  rfl\n#align univ_of_subsingleton univ_of_subsingleton\n\n",
 "univ_of_is_empty":
 "-- see Note [lower instance priority]\n-- no-lint since while `finset.univ_eq_empty` can prove this, it isn't applicable for `dsimp`.\n/-- Note: this lemma is specifically about `fintype.of_is_empty`. For a statement about\narbitrary `fintype` instances, use `finset.univ_eq_empty`. -/\n@[simp, nolint simp_nf]\ntheorem univ_of_is_empty [is_empty α] : @univ α _ = ∅ :=\n  rfl\n#align univ_of_is_empty univ_of_is_empty\n\n",
 "univ_nonempty_iff":
 "theorem univ_nonempty_iff : (univ : Finset α).nonempty ↔ nonempty α := by\n  rw [← coe_nonempty, coe_univ, Set.nonempty_iff_univ_nonempty]\n#align univ_nonempty_iff univ_nonempty_iff\n\n",
 "univ_nonempty":
 "theorem univ_nonempty [nonempty α] : (univ : Finset α).nonempty :=\n  univ_nonempty_iff.2 ‹_›\n#align univ_nonempty univ_nonempty\n\n",
 "univ_map_equiv_to_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem univ_map_equiv_to_embedding {α β : Type _} [fintype α] [fintype β] (e : «expr ≃ » α β) :\n    univ.map e.to_embedding = univ :=\n  eq_univ_iff_forall.mpr fun b => mem_map.mpr ⟨e.symm b, mem_univ _, by simp⟩\n#align univ_map_equiv_to_embedding univ_map_equiv_to_embedding\n\n",
 "univ_inter":
 "@[simp]\ntheorem univ_inter [decidable_eq α] (s : Finset α) : univ ∩ s = s :=\n  ext fun a => by simp\n#align univ_inter univ_inter\n\n",
 "univ_filter_mem_range":
 "/-- Note this is a special case of `(finset.image_preimage f univ _).symm`. -/\ntheorem univ_filter_mem_range (f : α → β) [fintype β] [decidable_pred fun y => y ∈ Set.range f] [decidable_eq β] :\n    (finset.univ.filter fun y => y ∈ Set.range f) = finset.univ.image f :=\n  univ_filter_exists f\n#align univ_filter_mem_range univ_filter_mem_range\n\n",
 "univ_filter_exists":
 "@[simp]\ntheorem univ_filter_exists (f : α → β) [fintype β] [decidable_pred fun y => ∃ x, f x = y] [decidable_eq β] :\n    (finset.univ.filter fun y => ∃ x, f x = y) = finset.univ.image f :=\n  by\n  ext\n  simp\n#align univ_filter_exists univ_filter_exists\n\n",
 "univ_eq_empty_iff":
 "theorem univ_eq_empty_iff : (univ : Finset α) = ∅ ↔ is_empty α := by\n  rw [← not_nonempty_iff, ← univ_nonempty_iff, not_nonempty_iff_eq_empty]\n#align univ_eq_empty_iff univ_eq_empty_iff\n\n",
 "univ_eq_empty":
 "@[simp]\ntheorem univ_eq_empty [is_empty α] : (univ : Finset α) = ∅ :=\n  univ_eq_empty_iff.2 ‹_›\n#align univ_eq_empty univ_eq_empty\n\n",
 "univ_eq_attach":
 "@[simp]\ntheorem finset.univ_eq_attach {α : Type u} (s : Finset α) : (univ : Finset s) = s.attach :=\n  rfl\n#align finset.univ_eq_attach finset.univ_eq_attach\n\n",
 "univ_empty":
 "@[simp]\ntheorem fintype.univ_empty : @univ empty _ = ∅ :=\n  rfl\n#align fintype.univ_empty fintype.univ_empty\n\n",
 "univ_def":
 "theorem fin.univ_def (n : ℕ) : (univ : Finset (fin n)) = ⟨List.finRange n, List.nodup_finRange n⟩ :=\n  rfl\n#align fin.univ_def fin.univ_def\n\n",
 "univ_cast_succ":
 "/-- Embed `fin n` into `fin (n + 1)` by appending a new `fin.last n` to the `univ` -/\ntheorem fin.univ_cast_succ (n : ℕ) :\n    (univ : Finset (fin (n + 1))) = cons (Fin.last n) (univ.map Fin.castSucc.to_embedding) (by simp [map_eq_image]) :=\n  by simp [map_eq_image]\n#align fin.univ_cast_succ fin.univ_cast_succ\n\n",
 "univ_bool":
 "@[simp]\ntheorem fintype.univ_bool : @univ bool _ = {true, false} :=\n  rfl\n#align fintype.univ_bool fintype.univ_bool\n\n",
 "univ_Prop":
 "@[simp]\ntheorem fintype.univ_Prop : (finset.univ : Finset Prop) = {true, false} :=\n  Finset.eq_of_veq <| by simp <;> rfl\n#align fintype.univ_Prop fintype.univ_Prop\n\n",
 "union_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem union_compl (s : Finset α) : s ∪ «expr ᶜ» s = univ :=\n  sup_compl_eq_top\n#align union_compl union_compl\n\n",
 "top_eq_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem top_eq_univ : («expr⊤» : Finset α) = univ :=\n  rfl\n#align top_eq_univ top_eq_univ\n\n",
 "to_finset_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- TODO Without the coercion arrow (`↥`) there is an elaboration bug in the following two;\nit essentially infers `fintype.{v} (set.univ.{u} : set α)` with `v` and `u` distinct.\nReported in leanprover-community/lean#672 -/\n@[simp]\ntheorem to_finset_univ [fintype α] [fintype («expr↥ » (Set.univ : set α))] :\n    (Set.univ : set α).to_finset = finset.univ := by\n  ext\n  simp\n#align to_finset_univ to_finset_univ\n\n",
 "to_finset_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n@[simp]\ntheorem to_finset_union [fintype («expr↥ » (s ∪ t))] : (s ∪ t).to_finset = s.to_finset ∪ t.to_finset :=\n  by\n  ext\n  simp\n#align to_finset_union to_finset_union\n\n",
 "to_finset_symm_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n@[simp]\ntheorem to_finset_symm_diff [fintype («expr↥ » («expr ∆ » s t))] :\n    («expr ∆ » s t).to_finset = «expr ∆ » s.to_finset t.to_finset :=\n  by\n  ext\n  simp [mem_symm_diff, Finset.mem_symmDiff]\n#align to_finset_symm_diff to_finset_symm_diff\n\n",
 "to_finset_subset_to_finset":
 "@[mono]\ntheorem to_finset_subset_to_finset [fintype s] [fintype t] : s.to_finset ⊆ t.to_finset ↔ s ⊆ t := by\n  simp [Finset.subset_iff, Set.subset_def]\n#align to_finset_subset_to_finset to_finset_subset_to_finset\n\n",
 "to_finset_subset":
 "@[simp]\ntheorem to_finset_subset [fintype s] {t : Finset α} : s.to_finset ⊆ t ↔ s ⊆ t := by\n  rw [← Finset.coe_subset, coe_to_finset]\n#align to_finset_subset to_finset_subset\n\n",
 "to_finset_ssubset_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp]\ntheorem to_finset_ssubset_univ [fintype α] {s : set α} [fintype s] :\n    «expr ⊂ » s.to_finset finset.univ ↔ «expr ⊂ » s univ := by rw [← coe_ssubset, coe_to_finset, coe_univ]\n#align to_finset_ssubset_univ to_finset_ssubset_univ\n\n",
 "to_finset_ssubset_to_finset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[mono]\ntheorem to_finset_ssubset_to_finset [fintype s] [fintype t] : «expr ⊂ » s.to_finset t.to_finset ↔ «expr ⊂ » s t := by\n  simp only [Finset.ssubset_def, to_finset_subset_to_finset, ssubset_def]\n#align to_finset_ssubset_to_finset to_finset_ssubset_to_finset\n\n",
 "to_finset_ssubset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp]\ntheorem to_finset_ssubset [fintype s] {t : Finset α} : «expr ⊂ » s.to_finset t ↔ «expr ⊂ » s t := by\n  rw [← Finset.coe_ssubset, coe_to_finset]\n#align to_finset_ssubset to_finset_ssubset\n\n",
 "to_finset_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n-- TODO The `↥` circumvents an elaboration bug. See comment on `set.to_finset_univ`.\ntheorem to_finset_singleton (a : α) [fintype («expr↥ » ({a} : set α))] : ({a} : set α).to_finset = {a} :=\n  by\n  ext\n  simp\n#align to_finset_singleton to_finset_singleton\n\n",
 "to_finset_set_of":
 "@[simp]\ntheorem to_finset_set_of [fintype α] (p : α → Prop) [decidable_pred p] [fintype { x | p x }] :\n    { x | p x }.to_finset = finset.univ.filter p := by\n  ext\n  simp\n#align to_finset_set_of to_finset_set_of\n\n",
 "to_finset_range":
 "@[simp]\ntheorem to_finset_range [decidable_eq α] [fintype β] (f : β → α) [fintype (Set.range f)] :\n    (Set.range f).to_finset = finset.univ.image f := by\n  ext\n  simp\n#align to_finset_range to_finset_range\n\n",
 "to_finset_of_finset":
 "/-- Many `fintype` instances for sets are defined using an extensionally equal `finset`.\nRewriting `s.to_finset` with `set.to_finset_of_finset` replaces the term with such a `finset`. -/\ntheorem to_finset_of_finset {p : set α} (s : Finset α) (H : ∀ x, x ∈ s ↔ x ∈ p) :\n    @set.to_finset _ p (fintype.of_finset s H) = s :=\n  Finset.ext fun x => by rw [mem_to_finset, H]\n#align to_finset_of_finset to_finset_of_finset\n\n",
 "to_finset_nonempty":
 "@[simp]\ntheorem to_finset_nonempty {s : set α} [fintype s] : s.to_finset.nonempty ↔ s.nonempty := by\n  rw [← Finset.coe_nonempty, coe_to_finset]\n#align to_finset_nonempty to_finset_nonempty\n\n",
 "to_finset_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n@[simp]\ntheorem to_finset_inter [fintype («expr↥ » (s ∩ t))] : (s ∩ t).to_finset = s.to_finset ∩ t.to_finset :=\n  by\n  ext\n  simp\n#align to_finset_inter to_finset_inter\n\n",
 "to_finset_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n-- TODO The `↥` circumvents an elaboration bug. See comment on `set.to_finset_univ`.\n@[simp]\ntheorem to_finset_insert [decidable_eq α] {a : α} {s : set α} [fintype («expr↥ » (insert a s : set α))] [fintype s] :\n    (insert a s).to_finset = insert a s.to_finset := by\n  ext\n  simp\n#align to_finset_insert to_finset_insert\n\n",
 "to_finset_inj":
 "@[simp]\ntheorem to_finset_inj {s t : set α} [fintype s] [fintype t] : s.to_finset = t.to_finset ↔ s = t :=\n  ⟨fun h => by rw [← s.coe_to_finset, h, t.coe_to_finset], fun h => by simp [h] <;> congr ⟩\n#align to_finset_inj to_finset_inj\n\n",
 "to_finset_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem to_finset_image [decidable_eq β] (f : α → β) (s : set α) [fintype s] [fintype («expr '' » f s)] :\n    («expr '' » f s).to_finset = s.to_finset.image f :=\n  Finset.coe_injective <| by simp\n#align to_finset_image to_finset_image\n\n",
 "to_finset_eq_univ":
 "@[simp]\ntheorem to_finset_eq_univ [fintype α] [fintype s] : s.to_finset = finset.univ ↔ s = univ := by\n  rw [← coe_inj, coe_to_finset, coe_univ]\n#align to_finset_eq_univ to_finset_eq_univ\n\n",
 "to_finset_eq_empty":
 "@[simp]\ntheorem to_finset_eq_empty [fintype s] : s.to_finset = ∅ ↔ s = ∅ := by rw [← to_finset_empty, to_finset_inj]\n#align to_finset_eq_empty to_finset_eq_empty\n\n",
 "to_finset_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n-- TODO The `↥` circumvents an elaboration bug. See comment on `set.to_finset_univ`.\n@[simp]\ntheorem to_finset_empty [fintype («expr↥ » (∅ : set α))] : (∅ : set α).to_finset = ∅ :=\n  by\n  ext\n  simp\n#align to_finset_empty to_finset_empty\n\n",
 "to_finset_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n@[simp]\ntheorem to_finset_diff [fintype («expr↥ » (s \\ t))] : (s \\ t).to_finset = s.to_finset \\ t.to_finset :=\n  by\n  ext\n  simp\n#align to_finset_diff to_finset_diff\n\n",
 "to_finset_congr":
 "@[congr]\ntheorem to_finset_congr {s t : set α} [fintype s] [fintype t] (h : s = t) : to_finset s = to_finset t := by cc\n#align to_finset_congr to_finset_congr\n\n",
 "to_finset_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem to_finset_compl [fintype α] [fintype («expr↥ » («expr ᶜ» s))] : («expr ᶜ» s).to_finset = «expr ᶜ» s.to_finset :=\n  by\n  ext\n  simp\n#align to_finset_compl to_finset_compl\n\n",
 "to_finset_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n@[simp]\ntheorem finset.to_finset_coe (s : Finset α) [fintype («expr↥ » (s : set α))] : (s : set α).to_finset = s :=\n  ext fun _ => set.mem_to_finset\n#align finset.to_finset_coe finset.to_finset_coe\n\n",
 "subset_univ":
 "@[simp]\ntheorem subset_univ (s : Finset α) : s ⊆ univ := fun a _ => mem_univ a\n#align subset_univ subset_univ\n\n",
 "subset_to_finset":
 "@[simp]\ntheorem subset_to_finset {s : Finset α} [fintype t] : s ⊆ t.to_finset ↔ ↑s ⊆ t := by\n  rw [← Finset.coe_subset, coe_to_finset]\n#align subset_to_finset subset_to_finset\n\n",
 "ssubset_univ_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem ssubset_univ_iff {s : Finset α} : «expr ⊂ » s univ ↔ s ≠ univ :=\n  @lt_top_iff_ne_top _ _ _ s\n#align ssubset_univ_iff ssubset_univ_iff\n\n",
 "ssubset_to_finset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp]\ntheorem ssubset_to_finset {s : Finset α} [fintype t] : «expr ⊂ » s t.to_finset ↔ «expr ⊂ » (↑s) t := by\n  rw [← Finset.coe_ssubset, coe_to_finset]\n#align ssubset_to_finset ssubset_to_finset\n\n",
 "sdiff_eq_inter_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem sdiff_eq_inter_compl (s t : Finset α) : s \\ t = s ∩ «expr ᶜ» t :=\n  sdiff_eq\n#align sdiff_eq_inter_compl sdiff_eq_inter_compl\n\n",
 "right_inverse_bij_inv":
 "theorem right_inverse_bij_inv (f_bij : bijective f) : right_inverse (bij_inv f_bij) f := fun b =>\n  choose_spec (fun a' => f a' = b) _\n#align right_inverse_bij_inv right_inverse_bij_inv\n\n",
 "right_inv_of_inv_of_mem_range":
 "@[simp]\ntheorem right_inv_of_inv_of_mem_range (a : α) : f.inv_of_mem_range ⟨f a, Set.mem_range_self a⟩ = a :=\n  f.injective.right_inv_of_inv_of_mem_range a\n#align right_inv_of_inv_of_mem_range right_inv_of_inv_of_mem_range\n\n",
 "piecewise_univ":
 "@[simp]\ntheorem piecewise_univ [∀ i : α, decidable (i ∈ (univ : Finset α))] {δ : α → Sort _} (f g : ∀ i, δ i) :\n    univ.piecewise f g = f := by\n  ext i\n  simp [piecewise]\n#align piecewise_univ piecewise_univ\n\n",
 "piecewise_erase_univ":
 "@[simp]\ntheorem piecewise_erase_univ {δ : α → Sort _} [decidable_eq α] (a : α) (f g : ∀ a, δ a) :\n    (finset.univ.erase a).piecewise f g = function.update f a (g a) := by\n  rw [← compl_singleton, piecewise_compl, piecewise_singleton]\n#align piecewise_erase_univ piecewise_erase_univ\n\n",
 "piecewise_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem piecewise_compl [decidable_eq α] (s : Finset α) [∀ i : α, decidable (i ∈ s)]\n    [∀ i : α, decidable (i ∈ «expr ᶜ» s)] {δ : α → Sort _} (f g : ∀ i, δ i) :\n    («expr ᶜ» s).piecewise f g = s.piecewise g f := by\n  ext i\n  simp [piecewise]\n#align piecewise_compl piecewise_compl\n\n",
 "not_mem_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem not_mem_compl : a ∉ «expr ᶜ» s ↔ a ∈ s := by rw [mem_compl, not_not]\n#align not_mem_compl not_mem_compl\n\n",
 "mem_univ_val":
 "@[simp]\ntheorem mem_univ_val : ∀ x, x ∈ (univ : Finset α).1 :=\n  mem_univ\n#align mem_univ_val mem_univ_val\n\n",
 "mem_univ":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem mem_univ (x : α) : x ∈ (univ : Finset α) :=\n  fintype.complete x\n#align mem_univ mem_univ\n\n",
 "mem_to_finset":
 "@[simp]\ntheorem mem_to_finset {s : set α} [fintype s] {a : α} : a ∈ s.to_finset ↔ a ∈ s := by simp [to_finset]\n#align mem_to_finset mem_to_finset\n\n",
 "mem_image_univ_iff_mem_range":
 "theorem mem_image_univ_iff_mem_range {α β : Type _} [fintype α] [decidable_eq β] {f : α → β} {b : β} :\n    b ∈ univ.image f ↔ b ∈ Set.range f := by simp\n#align mem_image_univ_iff_mem_range mem_image_univ_iff_mem_range\n\n",
 "mem_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem mem_compl : a ∈ «expr ᶜ» s ↔ a ∉ s := by simp [compl_eq_univ_sdiff]\n#align mem_compl mem_compl\n\n",
 "map_univ_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\ntheorem map_univ_of_surjective [fintype β] {f : «expr ↪ » β α} (hf : surjective f) : univ.map f = univ :=\n  eq_univ_of_forall <| hf.forall.2 fun _ => mem_map_of_mem _ <| mem_univ _\n#align map_univ_of_surjective map_univ_of_surjective\n\n",
 "map_univ_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem map_univ_equiv [fintype β] (f : «expr ≃ » β α) : univ.map f.to_embedding = univ :=\n  map_univ_of_surjective f.surjective\n#align map_univ_equiv map_univ_equiv\n\n",
 "left_inverse_bij_inv":
 "theorem left_inverse_bij_inv (f_bij : bijective f) : left_inverse (bij_inv f_bij) f := fun a =>\n  f_bij.left (choose_spec (fun a' => f a' = f a) _)\n#align left_inverse_bij_inv left_inverse_bij_inv\n\n",
 "left_inv_of_inv_of_mem_range":
 "@[simp]\ntheorem left_inv_of_inv_of_mem_range : f (f.inv_of_mem_range b) = b :=\n  f.injective.left_inv_of_inv_of_mem_range b\n#align left_inv_of_inv_of_mem_range left_inv_of_inv_of_mem_range\n\n",
 "inv_of_mem_range_surjective":
 "theorem inv_of_mem_range_surjective : function.surjective f.inv_of_mem_range := fun a =>\n  ⟨⟨f a, Set.mem_range_self a⟩, by simp⟩\n#align inv_of_mem_range_surjective inv_of_mem_range_surjective\n\n",
 "inv_fun_restrict":
 "theorem inv_fun_restrict [nonempty α] : (Set.range f).restrict (inv_fun f) = f.inv_of_mem_range :=\n  by\n  ext ⟨b, h⟩\n  apply f.injective\n  simp [f.left_inv_of_inv_of_mem_range, @inv_fun_eq _ _ _ f b (set.mem_range.mp h)]\n#align inv_fun_restrict inv_fun_restrict\n\n",
 "inter_univ":
 "@[simp]\ntheorem inter_univ [decidable_eq α] (s : Finset α) : s ∩ univ = s := by rw [inter_comm, univ_inter]\n#align inter_univ inter_univ\n\n",
 "inter_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem inter_compl (s : Finset α) : s ∩ «expr ᶜ» s = ∅ :=\n  inf_compl_eq_bot\n#align inter_compl inter_compl\n\n",
 "insert_inj_on'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem insert_inj_on' (s : Finset α) : Set.InjOn (fun a => insert a s) («expr ᶜ» s : Finset α) :=\n  by\n  rw [coe_compl]\n  exact s.insert_inj_on\n#align insert_inj_on' insert_inj_on'\n\n",
 "insert_compl_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem insert_compl_self (x : α) : insert x («expr ᶜ» {x} : Finset α) = univ := by\n  rw [← compl_erase, erase_singleton, compl_empty]\n#align insert_compl_self insert_compl_self\n\n",
 "image_univ_of_surjective":
 "theorem image_univ_of_surjective [fintype β] {f : β → α} (hf : surjective f) : univ.image f = univ :=\n  eq_univ_of_forall <| hf.forall.2 fun _ => mem_image_of_mem _ <| mem_univ _\n#align image_univ_of_surjective image_univ_of_surjective\n\n",
 "image_succ_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem fin.image_succ_univ (n : ℕ) : (univ : Finset (fin n)).image fin.succ = «expr ᶜ» {0} := by\n  rw [← Fin.succAbove_zero, fin.image_succ_above_univ]\n#align fin.image_succ_univ fin.image_succ_univ\n\n",
 "image_succ_above_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem fin.image_succ_above_univ {n : ℕ} (i : fin (n + 1)) : univ.image i.succ_above = «expr ᶜ» {i} :=\n  by\n  ext m\n  simp\n#align fin.image_succ_above_univ fin.image_succ_above_univ\n\n",
 "image_cast_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem fin.image_cast_succ (n : ℕ) : (univ : Finset (fin n)).image Fin.castSucc = «expr ᶜ» {Fin.last n} := by\n  rw [← Fin.succAbove_last, fin.image_succ_above_univ]\n#align fin.image_cast_succ fin.image_cast_succ\n\n",
 "finset_equiv_set_symm_apply":
 "@[simp]\ntheorem finset_equiv_set_symm_apply [fintype α] (s : set α) [fintype s] : finset_equiv_set.symm s = s.to_finset := by\n  convert rfl\n#align finset_equiv_set_symm_apply finset_equiv_set_symm_apply\n\n",
 "finset_equiv_set_apply":
 "@[simp]\ntheorem finset_equiv_set_apply [fintype α] (s : Finset α) : finset_equiv_set s = s :=\n  rfl\n#align finset_equiv_set_apply finset_equiv_set_apply\n\n",
 "fin_choice_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem quotient.fin_choice_eq {ι : Type _} [decidable_eq ι] [fintype ι] {α : ι → Type _} [∀ i, setoid (α i)]\n    (f : ∀ i, α i) : (quotient.fin_choice fun i => «expr⟦ ⟧» (f i)) = «expr⟦ ⟧» f :=\n  by\n  let q\n  swap\n  change quotient.lift_on q _ _ = _\n  have : q = «expr⟦ ⟧» fun i h => f i := by\n    dsimp only [q]\n    exact Quotient.inductionOn (@finset.univ ι _).1 fun l => quotient.fin_choice_aux_eq _ _\n  simp [this]\n  exact setoid.refl _\n#align quotient.fin_choice_eq quotient.fin_choice_eq\n\n",
 "fin_choice_aux_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem quotient.fin_choice_aux_eq {ι : Type _} [decidable_eq ι] {α : ι → Type _} [S : ∀ i, setoid (α i)] :\n    ∀ (l : list ι) (f : ∀ i ∈ l, α i), (quotient.fin_choice_aux l fun i h => «expr⟦ ⟧» (f i h)) = «expr⟦ ⟧» f\n  | [], f => quotient.sound fun i h => h.elim\n  | i :: l, f => by\n    simp [quotient.fin_choice_aux, quotient.fin_choice_aux_eq l]\n    refine' quotient.sound fun j h => _\n    by_cases e : j = i <;> simp [e]\n    subst j; rfl\n#align quotient.fin_choice_aux_eq quotient.fin_choice_aux_eq\n\n",
 "filter_mem_univ_eq_to_finset":
 "theorem filter_mem_univ_eq_to_finset [fintype α] (s : set α) [fintype s] [decidable_pred (· ∈ s)] :\n    finset.univ.filter (· ∈ s) = s.to_finset := by\n  ext\n  simp only [mem_filter, finset.mem_univ, true_and_iff, mem_to_finset]\n#align filter_mem_univ_eq_to_finset filter_mem_univ_eq_to_finset\n\n",
 "exists_seq_of_forall_finset_exists'":
 "/-- Induction principle to build a sequence, by adding one point at a time satisfying a given\nsymmetric relation with respect to all the previously chosen points.\n\nMore precisely, Assume that, for any finite set `s`, one can find another point satisfying\nsome relation `r` with respect to all the points in `s`. Then one may construct a\nfunction `f : ℕ → α` such that `r (f m) (f n)` holds whenever `m ≠ n`.\nWe also ensure that all constructed points satisfy a given predicate `P`. -/\ntheorem exists_seq_of_forall_finset_exists' {α : Type _} (P : α → Prop) (r : α → α → Prop) [is_symm α r]\n    (h : ∀ s : Finset α, (∀ x ∈ s, P x) → ∃ y, P y ∧ ∀ x ∈ s, r x y) :\n    ∃ f : ℕ → α, (∀ n, P (f n)) ∧ ∀ m n, m ≠ n → r (f m) (f n) :=\n  by\n  rcases exists_seq_of_forall_finset_exists P r h with ⟨f, hf, hf'⟩\n  refine' ⟨f, hf, fun m n hmn => _⟩\n  rcases lt_trichotomy m n with (h | rfl | h)\n  · exact hf' m n h\n  · exact (hmn rfl).elim\n  · apply symm\n    exact hf' n m h\n#align exists_seq_of_forall_finset_exists' exists_seq_of_forall_finset_exists'\n\n",
 "exists_seq_of_forall_finset_exists":
 "/-- Induction principle to build a sequence, by adding one point at a time satisfying a given\nrelation with respect to all the previously chosen points.\n\nMore precisely, Assume that, for any finite set `s`, one can find another point satisfying\nsome relation `r` with respect to all the points in `s`. Then one may construct a\nfunction `f : ℕ → α` such that `r (f m) (f n)` holds whenever `m < n`.\nWe also ensure that all constructed points satisfy a given predicate `P`. -/\ntheorem exists_seq_of_forall_finset_exists {α : Type _} (P : α → Prop) (r : α → α → Prop)\n    (h : ∀ s : Finset α, (∀ x ∈ s, P x) → ∃ y, P y ∧ ∀ x ∈ s, r x y) :\n    ∃ f : ℕ → α, (∀ n, P (f n)) ∧ ∀ m n, m < n → r (f m) (f n) := by\n  classical\n    have : nonempty α := by\n      rcases h ∅ (by simp) with ⟨y, hy⟩\n      exact ⟨y⟩\n    choose! F hF using h\n    have h' : ∀ s : Finset α, ∃ y, (∀ x ∈ s, P x) → P y ∧ ∀ x ∈ s, r x y := fun s => ⟨F s, hF s⟩\n    set f := seq_of_forall_finset_exists_aux P r h' with hf\n    have A : ∀ n : ℕ, P (f n) := by\n      intro n\n      induction' n using nat.strong_induction_on with n IH\n      have IH' : ∀ x : fin n, P (f x) := fun n => IH n.1 n.2\n      rw [hf, seq_of_forall_finset_exists_aux]\n      exact\n        (Classical.choose_spec (h' (Finset.image (fun i : fin n => f i) (finset.univ : Finset (fin n))))\n            (by simp [IH'])).1\n    refine' ⟨f, A, fun m n hmn => _⟩\n    nth_rw 2 [hf]\n    rw [seq_of_forall_finset_exists_aux]\n    apply\n      (Classical.choose_spec (h' (Finset.image (fun i : fin n => f i) (finset.univ : Finset (fin n)))) (by simp [A])).2\n    exact Finset.mem_image.2 ⟨⟨m, hmn⟩, finset.mem_univ _, rfl⟩\n#align exists_seq_of_forall_finset_exists exists_seq_of_forall_finset_exists\n\n",
 "eq_univ_of_forall":
 "theorem eq_univ_of_forall : (∀ x, x ∈ s) → s = univ :=\n  eq_univ_iff_forall.2\n#align eq_univ_of_forall eq_univ_of_forall\n\n",
 "eq_univ_iff_forall":
 "theorem eq_univ_iff_forall : s = univ ↔ ∀ x, x ∈ s := by simp [ext_iff]\n#align eq_univ_iff_forall eq_univ_iff_forall\n\n",
 "eq_univ":
 "theorem nonempty.eq_univ [subsingleton α] : s.nonempty → s = univ :=\n  by\n  rintro ⟨x, hx⟩\n  refine' eq_univ_of_forall fun y => by rwa [subsingleton.elim y x]\n#align nonempty.eq_univ nonempty.eq_univ\n\n",
 "disjoint_to_finset":
 "@[simp]\ntheorem disjoint_to_finset [fintype s] [fintype t] : Disjoint s.to_finset t.to_finset ↔ Disjoint s t := by\n  simp only [← disjoint_coe, coe_to_finset]\n#align disjoint_to_finset disjoint_to_finset\n\n",
 "count_univ":
 "@[simp]\ntheorem count_univ (a : α) : count a finset.univ.val = 1 :=\n  count_eq_one_of_mem finset.univ.nodup (finset.mem_univ _)\n#align count_univ count_univ\n\n",
 "compl_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_univ : «expr ᶜ» (univ : Finset α) = ∅ :=\n  compl_top\n#align compl_univ compl_univ\n\n",
 "compl_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_union (s t : Finset α) : «expr ᶜ» (s ∪ t) = «expr ᶜ» s ∩ «expr ᶜ» t :=\n  compl_sup\n#align compl_union compl_union\n\n",
 "compl_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_singleton (a : α) : «expr ᶜ» ({a} : Finset α) = univ.erase a := by\n  rw [compl_eq_univ_sdiff, sdiff_singleton_eq_erase]\n#align compl_singleton compl_singleton\n\n",
 "compl_ne_univ_iff_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_ne_univ_iff_nonempty (s : Finset α) : «expr ᶜ» s ≠ univ ↔ s.nonempty := by\n  simp [eq_univ_iff_forall, Finset.Nonempty]\n#align compl_ne_univ_iff_nonempty compl_ne_univ_iff_nonempty\n\n",
 "compl_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_inter (s t : Finset α) : «expr ᶜ» (s ∩ t) = «expr ᶜ» s ∪ «expr ᶜ» t :=\n  compl_inf\n#align compl_inter compl_inter\n\n",
 "compl_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_insert : «expr ᶜ» (insert a s) = («expr ᶜ» s).erase a :=\n  by\n  ext\n  simp only [not_or, mem_insert, iff_self_iff, mem_compl, mem_erase]\n#align compl_insert compl_insert\n\n",
 "compl_filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_filter (p : α → Prop) [decidable_pred p] [∀ x, decidable ¬p x] :\n    «expr ᶜ» (univ.filter p) = univ.filter fun x => ¬p x :=\n  (filter_not _ _).symm\n#align compl_filter compl_filter\n\n",
 "compl_erase":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_erase : «expr ᶜ» (s.erase a) = insert a («expr ᶜ» s) :=\n  by\n  ext\n  simp only [or_iff_not_imp_left, mem_insert, not_and, mem_compl, mem_erase]\n#align compl_erase compl_erase\n\n",
 "compl_eq_univ_sdiff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_eq_univ_sdiff (s : Finset α) : «expr ᶜ» s = univ \\ s :=\n  rfl\n#align compl_eq_univ_sdiff compl_eq_univ_sdiff\n\n",
 "compl_eq_univ_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_eq_univ_iff (s : Finset α) : «expr ᶜ» s = univ ↔ s = ∅ :=\n  compl_eq_top\n#align compl_eq_univ_iff compl_eq_univ_iff\n\n",
 "compl_eq_empty_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_eq_empty_iff (s : Finset α) : «expr ᶜ» s = ∅ ↔ s = univ :=\n  compl_eq_bot\n#align compl_eq_empty_iff compl_eq_empty_iff\n\n",
 "compl_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_empty : «expr ᶜ» (∅ : Finset α) = univ :=\n  compl_bot\n#align compl_empty compl_empty\n\n",
 "coe_univ":
 "@[simp, norm_cast]\ntheorem coe_univ : ↑(univ : Finset α) = (Set.univ : set α) := by ext <;> simp\n#align coe_univ coe_univ\n\n",
 "coe_to_finset":
 "@[simp]\ntheorem coe_to_finset (s : set α) [fintype s] : (↑s.to_finset : set α) = s :=\n  Set.ext fun _ => mem_to_finset\n#align coe_to_finset coe_to_finset\n\n",
 "coe_image_univ":
 "theorem fintype.coe_image_univ [fintype α] [decidable_eq β] {f : α → β} : ↑(Finset.image f finset.univ) = Set.range f :=\n  by\n  ext x\n  simp\n#align fintype.coe_image_univ fintype.coe_image_univ\n\n",
 "coe_filter_univ":
 "theorem coe_filter_univ (p : α → Prop) [decidable_pred p] : (univ.filter p : set α) = { x | p x } := by\n  rw [coe_filter, coe_univ, Set.sep_univ]\n#align coe_filter_univ coe_filter_univ\n\n",
 "coe_eq_univ":
 "@[simp, norm_cast]\ntheorem coe_eq_univ : (s : set α) = Set.univ ↔ s = univ := by rw [← coe_univ, coe_inj]\n#align coe_eq_univ coe_eq_univ\n\n",
 "coe_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp, norm_cast]\ntheorem coe_compl (s : Finset α) : ↑(«expr ᶜ» s) = «expr ᶜ» (↑s : set α) :=\n  Set.ext fun x => mem_compl\n#align coe_compl coe_compl\n\n",
 "codisjoint_right":
 "theorem codisjoint_right : Codisjoint s t ↔ ∀ ⦃a⦄, a ∉ t → a ∈ s :=\n  Codisjoint_comm.trans codisjoint_left\n#align codisjoint_right codisjoint_right\n\n",
 "codisjoint_left":
 "theorem codisjoint_left : Codisjoint s t ↔ ∀ ⦃a⦄, a ∉ s → a ∈ t := by\n  classical simp [codisjoint_iff, eq_univ_iff_forall, or_iff_not_imp_left]\n#align codisjoint_left codisjoint_left\n\n",
 "choose_subtype_eq":
 "@[simp]\ntheorem choose_subtype_eq {α : Type _} (p : α → Prop) [fintype { a : α // p a }] [decidable_eq α] (x : { a : α // p a })\n    (h : ∃! a : { a // p a }, (a : α) = x := ⟨x, rfl, fun y hy => by simpa [subtype.ext_iff] using hy⟩) :\n    fintype.choose (fun y : { a : α // p a } => (y : α) = x) h = x := by\n  rw [subtype.ext_iff, fintype.choose_spec (fun y : { a : α // p a } => (y : α) = x) _]\n#align choose_subtype_eq choose_subtype_eq\n\n",
 "choose_spec":
 "theorem choose_spec (hp : ∃! a, p a) : p (choose p hp) :=\n  (choose_x p hp).property\n#align choose_spec choose_spec\n\n",
 "bijective_bij_inv":
 "theorem bijective_bij_inv (f_bij : bijective f) : bijective (bij_inv f_bij) :=\n  ⟨(right_inverse_bij_inv _).injective, (left_inverse_bij_inv _).surjective⟩\n#align bijective_bij_inv bijective_bij_inv\n\n",
 "attach_eq_univ":
 "theorem finset.attach_eq_univ {s : Finset α} : s.attach = finset.univ :=\n  rfl\n#align finset.attach_eq_univ finset.attach_eq_univ\n\n"}