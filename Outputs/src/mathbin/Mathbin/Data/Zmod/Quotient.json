{"zpowers_quotient_stabilizer_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\ntheorem zpowers_quotient_stabilizer_equiv_symm_apply (n : ZMod (minimalPeriod ((«expr • » · ·) a) b)) :\n    (zpowers_quotient_stabilizer_equiv a b).symm n = (⟨a, mem_zpowers a⟩ : zpowers a) ^ (n : ℤ) :=\n  rfl\n#align zpowers_quotient_stabilizer_equiv_symm_apply zpowers_quotient_stabilizer_equiv_symm_apply\n\n",
 "zmultiples_quotient_stabilizer_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2021 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\ntheorem zmultiples_quotient_stabilizer_equiv_symm_apply (n : ZMod (minimalPeriod ((«expr +ᵥ » · ·) a) b)) :\n    (zmultiples_quotient_stabilizer_equiv a b).symm n = «expr • » (n : ℤ) (⟨a, mem_zmultiples a⟩ : zmultiples a) :=\n  rfl\n#align zmultiples_quotient_stabilizer_equiv_symm_apply zmultiples_quotient_stabilizer_equiv_symm_apply\n\n",
 "order_eq_card_zpowers'":
 "/-- See also `order_eq_card_zpowers`. -/\n@[to_additive add_order_eq_card_zmultiples' \"See also `add_order_eq_card_zmultiples`.\"]\ntheorem order_eq_card_zpowers' : orderOf a = Nat.card (zpowers a) :=\n  by\n  have := Nat.card_congr (mul_action.orbit_zpowers_equiv a (1 : α))\n  rwa [Nat.card_zmod, orbit_subgroup_one_eq_self, eq_comm] at this\n#align order_eq_card_zpowers' order_eq_card_zpowers'\n\n",
 "orbit_zpowers_equiv_symm_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem orbit_zpowers_equiv_symm_apply' (k : ℤ) :\n    (orbit_zpowers_equiv a b).symm k = «expr • » ((⟨a, mem_zpowers a⟩ : zpowers a) ^ k) ⟨b, mem_orbit_self b⟩ :=\n  by\n  rw [orbit_zpowers_equiv_symm_apply, ZMod.coe_int_cast]\n  exact Subtype.ext (zpow_smul_mod_minimal_period _ _ k)\n#align orbit_zpowers_equiv_symm_apply' orbit_zpowers_equiv_symm_apply'\n\n",
 "orbit_zpowers_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[to_additive orbit_zmultiples_equiv_symm_apply]\ntheorem orbit_zpowers_equiv_symm_apply (k : ZMod (minimalPeriod ((«expr • » · ·) a) b)) :\n    (orbit_zpowers_equiv a b).symm k = «expr • » ((⟨a, mem_zpowers a⟩ : zpowers a) ^ (k : ℤ)) ⟨b, mem_orbit_self b⟩ :=\n  rfl\n#align orbit_zpowers_equiv_symm_apply orbit_zpowers_equiv_symm_apply\n\n",
 "orbit_zmultiples_equiv_symm_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem _root_.add_action.orbit_zmultiples_equiv_symm_apply' {α β : Type _} [AddGroup α] (a : α) [AddAction α β] (b : β)\n    (k : ℤ) :\n    (add_action.orbit_zmultiples_equiv a b).symm k =\n      «expr +ᵥ » («expr • » k (⟨a, mem_zmultiples a⟩ : zmultiples a)) ⟨b, AddAction.mem_orbit_self b⟩ :=\n  by\n  rw [add_action.orbit_zmultiples_equiv_symm_apply, ZMod.coe_int_cast]\n  exact Subtype.ext (zsmul_vadd_mod_minimal_period _ _ k)\n#align add_action.orbit_zmultiples_equiv_symm_apply' add_action.orbit_zmultiples_equiv_symm_apply'\n\n",
 "minimal_period_eq_card":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n@[to_additive]\ntheorem minimal_period_eq_card [Fintype (orbit (zpowers a) b)] :\n    minimalPeriod ((«expr • » · ·) a) b = Fintype.card (orbit (zpowers a) b) := by\n  rw [← Fintype.ofEquiv_card (orbit_zpowers_equiv a b), ZMod.card]\n#align minimal_period_eq_card minimal_period_eq_card\n\n",
 "finite_zpowers":
 "@[to_additive is_of_fin_add_order.finite_zmultiples]\ntheorem is_of_fin_order.finite_zpowers (h : IsOfFinOrder a) : Finite <| zpowers a :=\n  by\n  rw [← orderOf_pos_iff, order_eq_card_zpowers'] at h\n  exact Nat.finite_of_card_ne_zero h.ne.symm\n#align is_of_fin_order.finite_zpowers is_of_fin_order.finite_zpowers\n\n"}