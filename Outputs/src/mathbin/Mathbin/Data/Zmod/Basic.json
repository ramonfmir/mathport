{"val_zero":
 "@[simp]\ntheorem val_zero : ∀ {n}, (0 : ZMod n).val = 0\n  | 0 => rfl\n  | n + 1 => rfl\n#align val_zero val_zero\n\n",
 "val_one_eq_one_mod":
 "theorem val_one_eq_one_mod (n : ℕ) : (1 : ZMod n).val = 1 % n := by rw [← Nat.cast_one, val_nat_cast]\n#align val_one_eq_one_mod val_one_eq_one_mod\n\n",
 "val_one'":
 "@[simp]\ntheorem val_one' : (1 : ZMod 0).val = 1 :=\n  rfl\n#align val_one' val_one'\n\n",
 "val_one":
 "theorem val_one (n : ℕ) [Fact (1 < n)] : (1 : ZMod n).val = 1 :=\n  by\n  rw [val_one_eq_one_mod]\n  exact nat.mod_eq_of_lt (fact.out _)\n#align val_one val_one\n\n",
 "val_neg_one":
 "@[simp]\ntheorem val_neg_one (n : ℕ) : (-1 : ZMod n.succ).val = n :=\n  by\n  rw [val, Fin.coe_neg]\n  cases n\n  · rw [nat.mod_one]\n  · rw [Fin.val_one, Nat.succ_add_sub_one, nat.mod_eq_of_lt (nat.lt.base _)]\n#align val_neg_one val_neg_one\n\n",
 "val_neg'":
 "@[simp]\ntheorem val_neg' {n : ZMod 0} : (-n).val = n.val := by simp [val]\n#align val_neg' val_neg'\n\n",
 "val_nat_cast":
 "theorem val_nat_cast {n : ℕ} (a : ℕ) : (a : ZMod n).val = a % n :=\n  by\n  cases n\n  · rw [nat.mod_zero]\n    exact Int.natAbs_ofNat a\n  rw [← Fin.ofNat_eq_val]\n  rfl\n#align val_nat_cast val_nat_cast\n\n",
 "val_mul'":
 "@[simp]\ntheorem val_mul' {m n : ZMod 0} : (m * n).val = m.val * n.val := by simp [val, Int.natAbs_mul]\n#align val_mul' val_mul'\n\n",
 "val_mul":
 "theorem val_mul {n : ℕ} (a b : ZMod n) : (a * b).val = a.val * b.val % n :=\n  by\n  cases n\n  · rw [nat.mod_zero]\n    apply Int.natAbs_mul\n  · apply Fin.val_mul\n#align val_mul val_mul\n\n",
 "val_min_nat_abs_nat_cast_eq_self":
 "@[simp]\ntheorem val_min_nat_abs_nat_cast_eq_self [NeZero n] : (a : ZMod n).val_min_abs = a ↔ a ≤ n / 2 :=\n  by\n  refine' ⟨fun ha => _, val_min_abs_nat_cast_of_le_half⟩\n  rw [← Int.natAbs_ofNat a, ← ha]\n  exact nat_abs_val_min_abs_le a\n#align val_min_nat_abs_nat_cast_eq_self val_min_nat_abs_nat_cast_eq_self\n\n",
 "val_min_abs_zero":
 "@[simp]\ntheorem val_min_abs_zero : ∀ n, (0 : ZMod n).val_min_abs = 0\n  | 0 => by simp only [val_min_abs_def_zero]\n  | n + 1 => by simp only [val_min_abs_def_pos, if_true, Int.ofNat_zero, zero_le, val_zero]\n#align val_min_abs_zero val_min_abs_zero\n\n",
 "val_min_abs_spec":
 "theorem val_min_abs_spec {n : ℕ} [NeZero n] (x : ZMod n) (y : ℤ) :\n    x.val_min_abs = y ↔ x = y ∧ y * 2 ∈ Set.Ioc (-n : ℤ) n :=\n  ⟨by\n    rintro rfl\n    exact ⟨x.coe_val_min_abs.symm, x.val_min_abs_mem_Ioc⟩, fun h =>\n    by\n    rw [← sub_eq_zero]\n    apply @Int.eq_zero_of_abs_lt_dvd n\n    · rw [← int_coe_zmod_eq_zero_iff_dvd, Int.cast_sub, coe_val_min_abs, h.1, sub_self]\n    rw [← mul_lt_mul_right (@zero_lt_two ℤ _ _ _ _ _)]\n    nth_rw 1 [← abs_eq_self.2 (@zero_le_two ℤ _ _ _ _)]\n    rw [← abs_mul, sub_mul, abs_lt];\n    constructor <;> linarith only [x.val_min_abs_mem_Ioc.1, x.val_min_abs_mem_Ioc.2, h.2.1, h.2.2]⟩\n#align val_min_abs_spec val_min_abs_spec\n\n",
 "val_min_abs_nonneg_iff":
 "theorem val_min_abs_nonneg_iff {n : ℕ} [NeZero n] (x : ZMod n) : 0 ≤ x.val_min_abs ↔ x.val ≤ n / 2 :=\n  by\n  rw [val_min_abs_def_pos]; split_ifs\n  · exact iff_of_true (Nat.cast_nonneg _) h\n  · exact iff_of_false (sub_lt_zero.2 <| Int.ofNat_lt.2 x.val_lt).not_le h\n#align val_min_abs_nonneg_iff val_min_abs_nonneg_iff\n\n",
 "val_min_abs_neg_of_ne_half":
 "theorem val_min_abs_neg_of_ne_half {n : ℕ} {a : ZMod n} (ha : 2 * a.val ≠ n) : (-a).val_min_abs = -a.val_min_abs :=\n  by\n  cases eq_zero_or_neZero n;\n  · subst h\n    rfl\n  refine' (val_min_abs_spec _ _).2 ⟨_, _, _⟩\n  · rw [Int.cast_neg, coe_val_min_abs]\n  · rw [neg_mul, neg_lt_neg_iff]\n    exact a.val_min_abs_mem_Ioc.2.lt_of_ne (mt a.val_min_abs_mul_two_eq_iff.1 ha)\n  · linarith only [a.val_min_abs_mem_Ioc.1]\n#align val_min_abs_neg_of_ne_half val_min_abs_neg_of_ne_half\n\n",
 "val_min_abs_nat_cast_of_le_half":
 "theorem val_min_abs_nat_cast_of_le_half (ha : a ≤ n / 2) : (a : ZMod n).val_min_abs = a :=\n  by\n  cases n\n  · simp\n  · simp [val_min_abs_def_pos, val_nat_cast, nat.mod_eq_of_lt (ha.trans_lt <| Nat.div_lt_self' _ 0), ha]\n#align val_min_abs_nat_cast_of_le_half val_min_abs_nat_cast_of_le_half\n\n",
 "val_min_abs_nat_cast_of_half_lt":
 "theorem val_min_abs_nat_cast_of_half_lt (ha : n / 2 < a) (ha' : a < n) : (a : ZMod n).val_min_abs = a - n :=\n  by\n  cases n\n  · cases not_lt_bot ha'\n  · simp [val_min_abs_def_pos, val_nat_cast, nat.mod_eq_of_lt ha', ha.not_le]\n#align val_min_abs_nat_cast_of_half_lt val_min_abs_nat_cast_of_half_lt\n\n",
 "val_min_abs_nat_abs_eq_min":
 "theorem val_min_abs_nat_abs_eq_min {n : ℕ} [hpos : NeZero n] (a : ZMod n) :\n    a.val_min_abs.nat_abs = min a.val (n - a.val) :=\n  by\n  rw [val_min_abs_def_pos]\n  split_ifs with h h\n  · rw [Int.natAbs_ofNat]\n    symm\n    apply min_eq_left (le_trans h (le_trans (Nat.half_le_of_sub_le_half _) (nat.sub_le_sub_left n h)))\n    rw [nat.sub_sub_self (nat.div_le_self _ _)]\n  · rw [← Int.natAbs_neg, neg_sub, ← Nat.cast_sub a.val_le]\n    symm\n    apply\n      min_eq_right\n        (le_trans (le_trans (nat.sub_le_sub_left n (lt_of_not_ge h)) (Nat.le_half_of_half_lt_sub _)) (le_of_not_ge h))\n    rw [nat.sub_sub_self (nat.div_lt_self (lt_of_le_of_ne' (nat.zero_le _) hpos.1) one_lt_two)]\n    apply nat.lt_succ_self\n#align val_min_abs_nat_abs_eq_min val_min_abs_nat_abs_eq_min\n\n",
 "val_min_abs_mul_two_eq_iff":
 "theorem val_min_abs_mul_two_eq_iff {n : ℕ} (a : ZMod n) : a.val_min_abs * 2 = n ↔ 2 * a.val = n :=\n  by\n  cases n; · simp\n  by_cases a.val ≤ n.succ / 2\n  · rw [val_min_abs, if_pos h, ← Int.coe_nat_inj', Nat.cast_mul, Nat.cast_two, mul_comm]\n  apply iff_of_false (fun he => _) (mt _ h)\n  · rw [← a.val_min_abs_nonneg_iff, ← mul_nonneg_iff_left_nonneg_of_pos, he] at h\n    exacts[h (Nat.cast_nonneg _), zero_lt_two]\n  · rw [mul_comm]\n    exact fun h => (nat.le_div_iff_mul_le zero_lt_two).2 h.le\n#align val_min_abs_mul_two_eq_iff val_min_abs_mul_two_eq_iff\n\n",
 "val_min_abs_mem_Ioc":
 "theorem val_min_abs_mem_Ioc {n : ℕ} [NeZero n] (x : ZMod n) : x.val_min_abs * 2 ∈ Set.Ioc (-n : ℤ) n :=\n  by\n  simp_rw [val_min_abs_def_pos, Nat.le_div_two_iff_mul_two_le]; split_ifs\n  · refine' ⟨(neg_lt_zero.2 <| by exact_mod_cast NeZero.pos n).trans_le (mul_nonneg _ _), h⟩\n    exacts[Nat.cast_nonneg _, zero_le_two]\n  · refine' ⟨_, trans (mul_nonpos_of_nonpos_of_nonneg _ zero_le_two) <| Nat.cast_nonneg _⟩\n    · linarith only [h]\n    · rw [sub_nonpos, Int.ofNat_le]\n      exact x.val_lt.le\n#align val_min_abs_mem_Ioc val_min_abs_mem_Ioc\n\n",
 "val_min_abs_eq_zero":
 "@[simp]\ntheorem val_min_abs_eq_zero {n : ℕ} (x : ZMod n) : x.val_min_abs = 0 ↔ x = 0 :=\n  by\n  cases n; · simp\n  rw [← val_min_abs_zero n.succ]\n  apply injective_val_min_abs.eq_iff\n#align val_min_abs_eq_zero val_min_abs_eq_zero\n\n",
 "val_min_abs_def_zero":
 "@[simp]\ntheorem val_min_abs_def_zero (x : ZMod 0) : valMinAbs x = x :=\n  rfl\n#align val_min_abs_def_zero val_min_abs_def_zero\n\n",
 "val_min_abs_def_pos":
 "theorem val_min_abs_def_pos {n : ℕ} [NeZero n] (x : ZMod n) :\n    valMinAbs x = if x.val ≤ n / 2 then x.val else x.val - n :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  · rfl\n#align val_min_abs_def_pos val_min_abs_def_pos\n\n",
 "val_lt":
 "/-\nCopyright (c) 2018 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes\n-/\ntheorem val_lt {n : ℕ} [NeZero n] (a : ZMod n) : a.val < n :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  exact Fin.is_lt a\n#align val_lt val_lt\n\n",
 "val_le":
 "theorem val_le {n : ℕ} [NeZero n] (a : ZMod n) : a.val ≤ n :=\n  a.val_lt.le\n#align val_le val_le\n\n",
 "val_int_cast":
 "theorem val_int_cast {n : ℕ} (a : ℤ) [NeZero n] : ↑(a : ZMod n).val = a % n :=\n  by\n  have hle : (0 : ℤ) ≤ ↑(a : ZMod n).val := Int.coe_nat_nonneg _\n  have hlt : ↑(a : ZMod n).val < (n : ℤ) := int.coe_nat_lt.mpr (ZMod.val_lt a)\n  refine' (Int.emod_eq_of_lt hle hlt).symm.trans _\n  rw [← ZMod.int_cast_eq_int_cast_iff', Int.cast_ofNat, ZMod.nat_cast_val, ZMod.cast_id]\n#align val_int_cast val_int_cast\n\n",
 "val_injective":
 "theorem val_injective (n : ℕ) [NeZero n] : function.injective (ZMod.val : ZMod n → ℕ) :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  intro a b h\n  ext\n  exact h\n#align val_injective val_injective\n\n",
 "val_eq_zero":
 "@[simp]\ntheorem val_eq_zero : ∀ {n : ℕ} (a : ZMod n), a.val = 0 ↔ a = 0\n  | 0, a => Int.natAbs_eq_zero\n  | n + 1, a => by\n    rw [Fin.ext_iff]\n    exact iff.rfl\n#align val_eq_zero val_eq_zero\n\n",
 "val_eq_ite_val_min_abs":
 "theorem val_eq_ite_val_min_abs {n : ℕ} [NeZero n] (a : ZMod n) :\n    (a.val : ℤ) = a.val_min_abs + if a.val ≤ n / 2 then 0 else n :=\n  by\n  rw [val_min_abs_def_pos]\n  split_ifs <;> simp only [add_zero, sub_add_cancel]\n#align val_eq_ite_val_min_abs val_eq_ite_val_min_abs\n\n",
 "val_coe_unit_coprime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem val_coe_unit_coprime {n : ℕ} (u : «expr ˣ» (ZMod n)) : Nat.coprime (u : ZMod n).val n :=\n  by\n  cases n\n  · rcases Int.units_eq_one_or u with (rfl | rfl) <;> simp\n  apply Nat.coprime_of_mul_modEq_one ((u⁻¹ : Units (ZMod (n + 1))) : ZMod (n + 1)).val\n  have := Units.ext_iff.1 (mul_right_inv u)\n  rw [Units.val_one] at this\n  rw [← eq_iff_modeq_nat, Nat.cast_one, ← this]; clear this\n  rw [← nat_cast_zmod_val ((u * u⁻¹ : Units (ZMod (n + 1))) : ZMod (n + 1))]\n  rw [Units.val_mul, val_mul, nat_cast_mod]\n#align val_coe_unit_coprime val_coe_unit_coprime\n\n",
 "val_cast_of_lt":
 "theorem val_cast_of_lt {n : ℕ} {a : ℕ} (h : a < n) : (a : ZMod n).val = a := by rw [val_nat_cast, nat.mod_eq_of_lt h]\n#align val_cast_of_lt val_cast_of_lt\n\n",
 "val_add":
 "theorem val_add {n : ℕ} [NeZero n] (a b : ZMod n) : (a + b).val = (a.val + b.val) % n :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  · apply Fin.val_add\n#align val_add val_add\n\n",
 "snd_zmod_cast":
 "#print Prod.snd_zmod_cast /-\n@[simp]\ntheorem Prod.snd_zmod_cast (a : ZMod n) : (a : R × S).snd = a := by cases n <;> simp\n#align prod.snd_zmod_cast Prod.snd_zmod_cast\n-/\n\n",
 "ring_hom_right_inverse":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem ring_hom_right_inverse [Ring R] (f : «expr →+* » R (ZMod n)) : function.right_inverse (coe : ZMod n → R) f :=\n  ringHom_map_cast f\n#align ring_hom_right_inverse ring_hom_right_inverse\n\n",
 "ring_hom_map_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem ring_hom_map_cast [Ring R] (f : «expr →+* » R (ZMod n)) (k : ZMod n) : f k = k := by cases n <;> simp\n#align ring_hom_map_cast ring_hom_map_cast\n\n",
 "ring_hom_eq_of_ker_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem ring_hom_eq_of_ker_eq [CommRing R] (f g : «expr →+* » R (ZMod n)) (h : f.ker = g.ker) : f = g :=\n  by\n  have := f.lift_of_right_inverse_comp _ (ZMod.ringHom_rightInverse f) ⟨g, le_of_eq h⟩\n  rw [Subtype.coe_mk] at this\n  rw [← this, RingHom.ext_zmod (f.lift_of_right_inverse _ _ ⟨g, _⟩) _, RingHom.id_comp]\n#align ring_hom_eq_of_ker_eq ring_hom_eq_of_ker_eq\n\n",
 "ring_char_zmod_n":
 "/-- We have that `ring_char (zmod n) = n`. -/\ntheorem ring_char_zmod_n (n : ℕ) : ringChar (ZMod n) = n :=\n  by\n  rw [ringChar.eq_iff]\n  exact zmod.char_p n\n#align ring_char_zmod_n ring_char_zmod_n\n\n",
 "prime_ne_zero":
 "theorem prime_ne_zero (p q : ℕ) [hp : Fact p.prime] [hq : Fact q.prime] (hpq : p ≠ q) : (q : ZMod p) ≠ 0 := by\n  rwa [← Nat.cast_zero, ne.def, eq_iff_modeq_nat, Nat.modEq_zero_iff_dvd, ← hp.1.coprime_iff_not_dvd,\n    Nat.coprime_primes hp.1 hq.1]\n#align prime_ne_zero prime_ne_zero\n\n",
 "neg_val'":
 "theorem neg_val' {n : ℕ} [NeZero n] (a : ZMod n) : (-a).val = (n - a.val) % n :=\n  calc\n    (-a).val = val (-a) % n := by rw [nat.mod_eq_of_lt (-a).val_lt]\n    _ = (n - val a) % n :=\n      Nat.ModEq.add_right_cancel' _\n        (by rw [Nat.ModEq, ← val_add, add_left_neg, tsub_add_cancel_of_le a.val_le, nat.mod_self, val_zero])\n    \n#align neg_val' neg_val'\n\n",
 "neg_val":
 "theorem neg_val {n : ℕ} [NeZero n] (a : ZMod n) : (-a).val = if a = 0 then 0 else n - a.val :=\n  by\n  rw [neg_val']\n  by_cases h : a = 0; · rw [if_pos h, h, val_zero, tsub_zero, nat.mod_self]\n  rw [if_neg h]\n  apply nat.mod_eq_of_lt\n  apply nat.sub_lt (NeZero.pos n)\n  contrapose! h\n  rwa [le_zero_iff, val_eq_zero] at h\n#align neg_val neg_val\n\n",
 "neg_one_ne_one":
 "theorem neg_one_ne_one {n : ℕ} [Fact (2 < n)] : (-1 : ZMod n) ≠ 1 :=\n  CharP.neg_one_ne_one (ZMod n) n\n#align neg_one_ne_one neg_one_ne_one\n\n",
 "neg_eq_self_mod_two":
 "theorem neg_eq_self_mod_two (a : ZMod 2) : -a = a := by\n  fin_cases a <;> ext <;> simp [Fin.coe_neg, Int.natMod] <;> norm_num\n#align neg_eq_self_mod_two neg_eq_self_mod_two\n\n",
 "neg_eq_self_iff":
 "#print neg_eq_self_iff /-\ntheorem neg_eq_self_iff {n : ℕ} (a : ZMod n) : -a = a ↔ a = 0 ∨ 2 * a.val = n :=\n  by\n  rw [neg_eq_iff_add_eq_zero, ← two_mul]\n  cases n\n  · rw [@mul_eq_zero ℤ, @mul_eq_zero ℕ, val_eq_zero]\n    exact ⟨fun h => h.elim (by decide) or.inl, fun h => or.inr (h.elim id fun h => h.elim (by decide) id)⟩\n  conv_lhs => rw [← a.nat_cast_zmod_val, ← Nat.cast_two, ← Nat.cast_mul, nat_coe_zmod_eq_zero_iff_dvd]\n  constructor\n  · rintro ⟨m, he⟩\n    cases m\n    · rw [MulZeroClass.mul_zero, mul_eq_zero] at he\n      rcases he with (⟨⟨⟩⟩ | he)\n      exact or.inl (a.val_eq_zero.1 he)\n    cases m\n    · right\n      rwa [mul_one] at he\n    refine' (a.val_lt.not_le <| nat.le_of_mul_le_mul_left _ zero_lt_two).elim\n    rw [he, mul_comm]\n    apply nat.mul_le_mul_left\n    decide\n  · rintro (rfl | h)\n    · rw [val_zero, MulZeroClass.mul_zero]\n      apply dvd_zero\n    · rw [h]\n#align neg_eq_self_iff neg_eq_self_iff\n-/\n\n",
 "ne_neg_self":
 "theorem ne_neg_self (n : ℕ) [hn : Fact ((n : ℕ) % 2 = 1)] {a : ZMod n} (ha : a ≠ 0) : a ≠ -a := fun h =>\n  by\n  have : a.val ≤ n / 2 ↔ (n : ℕ) / 2 < (-a).val := le_div_two_iff_lt_neg n ha\n  rwa [← h, ← not_lt, not_iff_self] at this\n#align ne_neg_self ne_neg_self\n\n",
 "nat_coe_zmod_eq_zero_iff_dvd":
 "theorem nat_coe_zmod_eq_zero_iff_dvd (a b : ℕ) : (a : ZMod b) = 0 ↔ b ∣ a := by\n  rw [← Nat.cast_zero, ZMod.nat_cast_eq_nat_cast_iff, Nat.modEq_zero_iff_dvd]\n#align nat_coe_zmod_eq_zero_iff_dvd nat_coe_zmod_eq_zero_iff_dvd\n\n",
 "nat_coe_zmod_eq_iff":
 "theorem nat_coe_zmod_eq_iff (p : ℕ) (n : ℕ) (z : ZMod p) [NeZero p] : ↑n = z ↔ ∃ k, n = z.val + p * k :=\n  by\n  constructor\n  · rintro rfl\n    refine' ⟨n / p, _⟩\n    rw [val_nat_cast, nat.mod_add_div]\n  · rintro ⟨k, rfl⟩\n    rw [Nat.cast_add, nat_cast_zmod_val, Nat.cast_mul, nat_cast_self, MulZeroClass.zero_mul, add_zero]\n#align nat_coe_zmod_eq_iff nat_coe_zmod_eq_iff\n\n",
 "nat_coe_eq_nat_coe_iff'":
 "theorem nat_coe_eq_nat_coe_iff' (a b c : ℕ) : (a : ZMod c) = (b : ZMod c) ↔ a % c = b % c :=\n  ZMod.nat_cast_eq_nat_cast_iff a b c\n#align nat_coe_eq_nat_coe_iff' nat_coe_eq_nat_coe_iff'\n\n",
 "nat_coe_eq_nat_coe_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [MOD ]» -/\ntheorem nat_coe_eq_nat_coe_iff (a b c : ℕ) : (a : ZMod c) = (b : ZMod c) ↔ «expr ≡ [MOD ]» a b c := by\n  simpa [Int.coe_nat_modEq_iff] using ZMod.int_cast_eq_int_cast_iff a b c\n#align nat_coe_eq_nat_coe_iff nat_coe_eq_nat_coe_iff\n\n",
 "nat_cast_zmod_val":
 "/-- So-named because the coercion is `nat.cast` into `zmod`. For `nat.cast` into an arbitrary ring,\nsee `zmod.nat_cast_val`. -/\ntheorem nat_cast_zmod_val {n : ℕ} [NeZero n] (a : ZMod n) : (a.val : ZMod n) = a :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  · apply Fin.cast_val_eq_self\n#align nat_cast_zmod_val nat_cast_zmod_val\n\n",
 "nat_cast_zmod_surjective":
 "theorem nat_cast_zmod_surjective [NeZero n] : function.surjective (coe : ℕ → ZMod n) :=\n  nat_cast_rightInverse.surjective\n#align nat_cast_zmod_surjective nat_cast_zmod_surjective\n\n",
 "nat_cast_val":
 "@[simp]\ntheorem nat_cast_val [NeZero n] (i : ZMod n) : (i.val : R) = i :=\n  congr_fun (nat_cast_comp_val R) i\n#align nat_cast_val nat_cast_val\n\n",
 "nat_cast_to_nat":
 "@[simp]\ntheorem nat_cast_to_nat (p : ℕ) : ∀ {z : ℤ} (h : 0 ≤ z), (z.to_nat : ZMod p) = z\n  | (n : ℕ), h => by simp only [Int.cast_ofNat, Int.toNat_coe_nat]\n  | -[n+1], h => false.elim h\n#align nat_cast_to_nat nat_cast_to_nat\n\n",
 "nat_cast_self'":
 "@[simp]\ntheorem nat_cast_self' (n : ℕ) : (n + 1 : ZMod (n + 1)) = 0 := by rw [← Nat.cast_add_one, nat_cast_self (n + 1)]\n#align nat_cast_self' nat_cast_self'\n\n",
 "nat_cast_self":
 "@[simp]\ntheorem nat_cast_self (n : ℕ) : (n : ZMod n) = 0 :=\n  CharP.cast_eq_zero (ZMod n) n\n#align nat_cast_self nat_cast_self\n\n",
 "nat_cast_right_inverse":
 "theorem nat_cast_right_inverse [NeZero n] : function.right_inverse val (coe : ℕ → ZMod n) :=\n  nat_cast_zmod_val\n#align nat_cast_right_inverse nat_cast_right_inverse\n\n",
 "nat_cast_nat_abs_val_min_abs":
 "theorem nat_cast_nat_abs_val_min_abs {n : ℕ} [NeZero n] (a : ZMod n) :\n    (a.val_min_abs.nat_abs : ZMod n) = if a.val ≤ (n : ℕ) / 2 then a else -a :=\n  by\n  have : (a.val : ℤ) - n ≤ 0 := by\n    erw [sub_nonpos, Int.ofNat_le]\n    exact a.val_le\n  rw [val_min_abs_def_pos]\n  split_ifs\n  · rw [Int.natAbs_ofNat, nat_cast_zmod_val]\n  ·\n    rw [← Int.cast_ofNat, Int.ofNat_natAbs_of_nonpos this, Int.cast_neg, Int.cast_sub, Int.cast_ofNat, Int.cast_ofNat,\n      nat_cast_self, sub_zero, nat_cast_zmod_val]\n#align nat_cast_nat_abs_val_min_abs nat_cast_nat_abs_val_min_abs\n\n",
 "nat_cast_mod":
 "@[simp]\ntheorem nat_cast_mod (a : ℕ) (n : ℕ) : ((a % n : ℕ) : ZMod n) = a := by\n  conv =>\n      rhs\n      rw [← nat.mod_add_div a n] <;>\n    simp\n#align nat_cast_mod nat_cast_mod\n\n",
 "nat_cast_comp_val":
 "/-- The coercions are respectively `nat.cast` and `zmod.cast`. -/\n@[simp]\ntheorem nat_cast_comp_val [NeZero n] : (coe : ℕ → R) ∘ (val : ZMod n → ℕ) = coe :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  rfl\n#align nat_cast_comp_val nat_cast_comp_val\n\n",
 "nat_abs_val_min_abs_neg":
 "@[simp]\ntheorem nat_abs_val_min_abs_neg {n : ℕ} (a : ZMod n) : (-a).val_min_abs.nat_abs = a.val_min_abs.nat_abs :=\n  by\n  by_cases h2a : 2 * a.val = n\n  · rw [a.neg_eq_self_iff.2 (or.inr h2a)]\n  · rw [val_min_abs_neg_of_ne_half h2a, Int.natAbs_neg]\n#align nat_abs_val_min_abs_neg nat_abs_val_min_abs_neg\n\n",
 "nat_abs_val_min_abs_le":
 "theorem nat_abs_val_min_abs_le {n : ℕ} [NeZero n] (x : ZMod n) : x.val_min_abs.nat_abs ≤ n / 2 :=\n  by\n  rw [Nat.le_div_two_iff_mul_two_le]\n  cases x.val_min_abs.nat_abs_eq\n  · rw [← h]\n    exact x.val_min_abs_mem_Ioc.2\n  · rw [← neg_le_neg_iff, ← neg_mul, ← h]\n    exact x.val_min_abs_mem_Ioc.1.le\n#align nat_abs_val_min_abs_le nat_abs_val_min_abs_le\n\n",
 "nat_abs_val_min_abs_add_le":
 "theorem nat_abs_val_min_abs_add_le {n : ℕ} (a b : ZMod n) :\n    (a + b).val_min_abs.nat_abs ≤ (a.val_min_abs + b.val_min_abs).nat_abs :=\n  by\n  cases n; · rfl\n  apply nat_abs_min_of_le_div_two n.succ\n  · simp_rw [Int.cast_add, coe_val_min_abs]\n  · apply nat_abs_val_min_abs_le\n#align nat_abs_val_min_abs_add_le nat_abs_val_min_abs_add_le\n\n",
 "nat_abs_mod_two":
 "@[simp]\ntheorem nat_abs_mod_two (a : ℤ) : (a.nat_abs : ZMod 2) = a :=\n  by\n  cases a\n  · simp only [Int.natAbs_ofNat, Int.cast_ofNat, Int.ofNat_eq_coe]\n  · simp only [neg_eq_self_mod_two, Nat.cast_succ, Int.natAbs, Int.cast_negSucc]\n#align nat_abs_mod_two nat_abs_mod_two\n\n",
 "nat_abs_min_of_le_div_two":
 "theorem nat_abs_min_of_le_div_two (n : ℕ) (x y : ℤ) (he : (x : ZMod n) = y) (hl : x.nat_abs ≤ n / 2) :\n    x.nat_abs ≤ y.nat_abs := by\n  rw [int_coe_eq_int_coe_iff_dvd_sub] at he\n  obtain ⟨m, he⟩ := he\n  rw [sub_eq_iff_eq_add] at he\n  subst he\n  obtain rfl | hm := eq_or_ne m 0\n  · rw [MulZeroClass.mul_zero, zero_add]\n  apply hl.trans\n  rw [← add_le_add_iff_right x.nat_abs]\n  refine' trans (trans ((add_le_add_iff_left _).2 hl) _) (Int.natAbs_sub_le _ _)\n  rw [add_sub_cancel, Int.natAbs_mul, Int.natAbs_ofNat]\n  refine' trans _ (Nat.le_mul_of_pos_right <| Int.natAbs_pos_of_ne_zero hm)\n  rw [← mul_two]; apply nat.div_mul_le_self\n#align nat_abs_min_of_le_div_two nat_abs_min_of_le_div_two\n\n",
 "mul_inv_of_unit":
 "theorem mul_inv_of_unit {n : ℕ} (a : ZMod n) (h : IsUnit a) : a * a⁻¹ = 1 :=\n  by\n  rcases h with ⟨u, rfl⟩\n  rw [inv_coe_unit, u.mul_inv]\n#align mul_inv_of_unit mul_inv_of_unit\n\n",
 "mul_inv_eq_gcd":
 "theorem mul_inv_eq_gcd {n : ℕ} (a : ZMod n) : a * a⁻¹ = Nat.gcd a.val n :=\n  by\n  cases n\n  ·\n    calc\n      a * a⁻¹ = a * int.sign a := rfl\n      _ = a.nat_abs := by rw [Int.mul_sign]\n      _ = a.val.gcd 0 := by rw [Nat.gcd_zero_right] <;> rfl\n      \n  · set k := n.succ\n    calc\n      a * a⁻¹ = a * a⁻¹ + k * Nat.gcdB (val a) k := by rw [nat_cast_self, MulZeroClass.zero_mul, add_zero]\n      _ = ↑(↑a.val * Nat.gcdA (val a) k + k * Nat.gcdB (val a) k) :=\n        by\n        push_cast\n        rw [nat_cast_zmod_val]\n        rfl\n      _ = Nat.gcd a.val k := (congr_arg coe (Nat.gcd_eq_gcd_ab a.val k)).symm\n      \n#align mul_inv_eq_gcd mul_inv_eq_gcd\n\n",
 "mul_inv_cancel_aux":
 "private theorem mul_inv_cancel_aux (a : ZMod p) (h : a ≠ 0) : a * a⁻¹ = 1 :=\n  by\n  obtain ⟨k, rfl⟩ := nat_cast_zmod_surjective a\n  apply coe_mul_inv_eq_one\n  apply Nat.coprime.symm\n  rwa [Nat.Prime.coprime_iff_not_dvd (fact.out p.prime), ← char_p.cast_eq_zero_iff (ZMod p)]\n#align mul_inv_cancel_aux mul_inv_cancel_aux\n\n",
 "lift_comp_coe":
 "@[simp]\ntheorem lift_comp_coe : ZMod.lift n f ∘ coe = f :=\n  funext <| lift_coe _ _\n#align lift_comp_coe lift_comp_coe\n\n",
 "lift_comp_cast_add_hom":
 "@[simp]\ntheorem lift_comp_cast_add_hom : (ZMod.lift n f).comp (Int.castAddHom (ZMod n)) = f :=\n  AddMonoidHom.ext <| lift_castAddHom _ _\n#align lift_comp_cast_add_hom lift_comp_cast_add_hom\n\n",
 "lift_coe":
 "@[simp]\ntheorem lift_coe (x : ℤ) : lift n f (x : ZMod n) = f x :=\n  AddMonoidHom.liftOfRightInverse_comp_apply _ _ _ _ _\n#align lift_coe lift_coe\n\n",
 "lift_cast_add_hom":
 "theorem lift_cast_add_hom (x : ℤ) : lift n f (Int.castAddHom (ZMod n) x) = f x :=\n  AddMonoidHom.liftOfRightInverse_comp_apply _ _ _ _ _\n#align lift_cast_add_hom lift_cast_add_hom\n\n",
 "le_div_two_iff_mul_two_le":
 "#print Nat.le_div_two_iff_mul_two_le /-\ntheorem Nat.le_div_two_iff_mul_two_le {n m : ℕ} : m ≤ n / 2 ↔ (m : ℤ) * 2 ≤ n := by\n  rw [nat.le_div_iff_mul_le zero_lt_two, ← Int.ofNat_le, Int.ofNat_mul, Nat.cast_two]\n#align nat.le_div_two_iff_mul_two_le Nat.le_div_two_iff_mul_two_le\n-/\n\n",
 "le_div_two_iff_lt_neg":
 "-- TODO: this equivalence is true for `zmod 0 = ℤ`, but needs to use different functions.\n-- todo: this can be made a `unique` instance.\ntheorem le_div_two_iff_lt_neg (n : ℕ) [hn : Fact ((n : ℕ) % 2 = 1)] {x : ZMod n} (hx0 : x ≠ 0) :\n    x.val ≤ (n / 2 : ℕ) ↔ (n / 2 : ℕ) < (-x).val :=\n  by\n  haveI npos : NeZero n :=\n    ⟨by\n      rintro rfl\n      simpa [fact_iff] using hn⟩\n  have hn2 : (n : ℕ) / 2 < n := Nat.div_lt_of_lt_mul ((lt_mul_iff_one_lt_left <| NeZero.pos n).2 (by decide))\n  have hn2' : (n : ℕ) - n / 2 = n / 2 + 1 :=\n    by\n    conv =>\n      lhs\n      congr\n      rw [← nat.succ_sub_one n, nat.succ_sub <| NeZero.pos n]\n    rw [← Nat.two_mul_odd_div_two hn.1, two_mul, ← nat.succ_add, add_tsub_cancel_right]\n  have hxn : (n : ℕ) - x.val < n :=\n    by\n    rw [tsub_lt_iff_tsub_lt x.val_le le_rfl, tsub_self]\n    rw [← ZMod.nat_cast_zmod_val x] at hx0\n    exact nat.pos_of_ne_zero fun h => by simpa [h] using hx0\n  ·\n    conv =>\n      rhs\n      rw [← Nat.succ_le_iff, nat.succ_eq_add_one, ← hn2', ← zero_add (-x), ← ZMod.nat_cast_self, ← sub_eq_add_neg, ←\n        ZMod.nat_cast_zmod_val x, ← Nat.cast_sub x.val_le, ZMod.val_nat_cast, nat.mod_eq_of_lt hxn,\n        tsub_le_tsub_iff_left x.val_le]\n#align le_div_two_iff_lt_neg le_div_two_iff_lt_neg\n\n",
 "ker_int_cast_ring_hom":
 "theorem ker_int_cast_ring_hom (n : ℕ) : (Int.castRingHom (ZMod n)).ker = Ideal.span ({n} : Set ℤ) :=\n  by\n  ext\n  rw [Ideal.mem_span_singleton, RingHom.mem_ker, Int.coe_castRingHom, int_coe_zmod_eq_zero_iff_dvd]\n#align ker_int_cast_ring_hom ker_int_cast_ring_hom\n\n",
 "ker_int_cast_add_hom":
 "theorem ker_int_cast_add_hom (n : ℕ) : (Int.castAddHom (ZMod n)).ker = AddSubgroup.zmultiples n :=\n  by\n  ext\n  rw [Int.mem_zmultiples_iff, AddMonoidHom.mem_ker, Int.coe_castAddHom, int_coe_zmod_eq_zero_iff_dvd]\n#align ker_int_cast_add_hom ker_int_cast_add_hom\n\n",
 "inv_zero":
 "theorem inv_zero : ∀ n : ℕ, (0 : ZMod n)⁻¹ = 0\n  | 0 => int.sign_zero\n  | n + 1 =>\n    show (Nat.gcdA _ (n + 1) : ZMod (n + 1)) = 0 by\n      rw [val_zero]\n      unfold Nat.gcdA Nat.xgcd Nat.xgcdAux\n      rfl\n#align inv_zero inv_zero\n\n",
 "inv_mul_of_unit":
 "theorem inv_mul_of_unit {n : ℕ} (a : ZMod n) (h : IsUnit a) : a⁻¹ * a = 1 := by rw [mul_comm, mul_inv_of_unit a h]\n#align inv_mul_of_unit inv_mul_of_unit\n\n",
 "inv_coe_unit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n@[simp]\ntheorem inv_coe_unit {n : ℕ} (u : «expr ˣ» (ZMod n)) : (u : ZMod n)⁻¹ = (u⁻¹ : «expr ˣ» (ZMod n)) :=\n  by\n  have := congr_arg (coe : ℕ → ZMod n) (val_coe_unit_coprime u)\n  rw [← mul_inv_eq_gcd, Nat.cast_one] at this\n  let u' : «expr ˣ» (ZMod n) := ⟨u, (u : ZMod n)⁻¹, this, by rwa [mul_comm]⟩\n  have h : u = u' := by\n    apply Units.ext\n    rfl\n  rw [h]\n  rfl\n#align inv_coe_unit inv_coe_unit\n\n",
 "int_coe_zmod_eq_zero_iff_dvd":
 "theorem int_coe_zmod_eq_zero_iff_dvd (a : ℤ) (b : ℕ) : (a : ZMod b) = 0 ↔ (b : ℤ) ∣ a := by\n  rw [← Int.cast_zero, ZMod.int_cast_eq_int_cast_iff, Int.modEq_zero_iff_dvd]\n#align int_coe_zmod_eq_zero_iff_dvd int_coe_zmod_eq_zero_iff_dvd\n\n",
 "int_coe_zmod_eq_iff":
 "theorem int_coe_zmod_eq_iff (p : ℕ) (n : ℤ) (z : ZMod p) [NeZero p] : ↑n = z ↔ ∃ k, n = z.val + p * k :=\n  by\n  constructor\n  · rintro rfl\n    refine' ⟨n / p, _⟩\n    rw [val_int_cast, Int.emod_add_ediv]\n  · rintro ⟨k, rfl⟩\n    rw [Int.cast_add, Int.cast_mul, Int.cast_ofNat, Int.cast_ofNat, nat_cast_val, ZMod.nat_cast_self,\n      MulZeroClass.zero_mul, add_zero, cast_id]\n#align int_coe_zmod_eq_iff int_coe_zmod_eq_iff\n\n",
 "int_coe_eq_int_coe_iff_dvd_sub":
 "theorem int_coe_eq_int_coe_iff_dvd_sub (a b : ℤ) (c : ℕ) : (a : ZMod c) = ↑b ↔ ↑c ∣ b - a := by\n  rw [ZMod.int_cast_eq_int_cast_iff, Int.modEq_iff_dvd]\n#align int_coe_eq_int_coe_iff_dvd_sub int_coe_eq_int_coe_iff_dvd_sub\n\n",
 "int_coe_eq_int_coe_iff'":
 "theorem int_coe_eq_int_coe_iff' (a b : ℤ) (c : ℕ) : (a : ZMod c) = (b : ZMod c) ↔ a % c = b % c :=\n  ZMod.int_cast_eq_int_cast_iff a b c\n#align int_coe_eq_int_coe_iff' int_coe_eq_int_coe_iff'\n\n",
 "int_coe_eq_int_coe_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\ntheorem int_coe_eq_int_coe_iff (a b : ℤ) (c : ℕ) : (a : ZMod c) = (b : ZMod c) ↔ «expr ≡ [ZMOD ]» a b c :=\n  CharP.intCast_eq_intCast (ZMod c) c\n#align int_coe_eq_int_coe_iff int_coe_eq_int_coe_iff\n\n",
 "int_cast_zmod_cast":
 "/-- So-named because the outer coercion is `int.cast` into `zmod`. For `int.cast` into an arbitrary\nring, see `zmod.int_cast_cast`. -/\n@[norm_cast]\ntheorem int_cast_zmod_cast (a : ZMod n) : ((a : ℤ) : ZMod n) = a :=\n  by\n  cases n\n  · rw [Int.cast_id a, Int.cast_id a]\n  · rw [coe_coe, Int.cast_ofNat, Fin.cast_val_eq_self]\n#align int_cast_zmod_cast int_cast_zmod_cast\n\n",
 "int_cast_surjective":
 "theorem int_cast_surjective : function.surjective (coe : ℤ → ZMod n) :=\n  int_cast_rightInverse.surjective\n#align int_cast_surjective int_cast_surjective\n\n",
 "int_cast_right_inverse":
 "theorem int_cast_right_inverse : function.right_inverse (coe : ZMod n → ℤ) (coe : ℤ → ZMod n) :=\n  int_cast_zmod_cast\n#align int_cast_right_inverse int_cast_right_inverse\n\n",
 "int_cast_mod":
 "@[push_cast, simp]\ntheorem int_cast_mod (a : ℤ) (b : ℕ) : ((a % b : ℤ) : ZMod b) = (a : ZMod b) :=\n  by\n  rw [ZMod.int_cast_eq_int_cast_iff]\n  apply Int.mod_modEq\n#align int_cast_mod int_cast_mod\n\n",
 "int_cast_comp_cast":
 "/-- The coercions are respectively `int.cast`, `zmod.cast`, and `zmod.cast`. -/\n@[simp]\ntheorem int_cast_comp_cast : (coe : ℤ → R) ∘ (coe : ZMod n → ℤ) = coe :=\n  by\n  cases n\n  · exact congr_arg ((· ∘ ·) Int.cast) ZMod.cast_id'\n  · ext\n    simp\n#align int_cast_comp_cast int_cast_comp_cast\n\n",
 "int_cast_cast":
 "@[simp]\ntheorem int_cast_cast (i : ZMod n) : ((i : ℤ) : R) = i :=\n  congr_fun (int_cast_comp_cast R) i\n#align int_cast_cast int_cast_cast\n\n",
 "injective_val_min_abs":
 "theorem injective_val_min_abs {n : ℕ} : (valMinAbs : ZMod n → ℤ).injective :=\n  Function.injective_iff_hasLeftInverse.2 ⟨_, coe_valMinAbs⟩\n#align injective_val_min_abs injective_val_min_abs\n\n",
 "fst_zmod_cast":
 "#print Prod.fst_zmod_cast /-\n@[simp]\ntheorem Prod.fst_zmod_cast (a : ZMod n) : (a : R × S).fst = a := by cases n <;> simp\n#align prod.fst_zmod_cast Prod.fst_zmod_cast\n-/\n\n",
 "ext_zmod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.ext_zmod /-\n-- We need `cases p` here in order to resolve which `comm_ring` instance is being used.\ntheorem RingHom.ext_zmod {n : ℕ} {R : Type _} [Semiring R] (f g : «expr →+* » (ZMod n) R) : f = g :=\n  by\n  ext a\n  obtain ⟨k, rfl⟩ := ZMod.int_cast_surjective a\n  let φ : «expr →+* » ℤ R := f.comp (Int.castRingHom (ZMod n))\n  let ψ : «expr →+* » ℤ R := g.comp (Int.castRingHom (ZMod n))\n  show φ k = ψ k\n  rw [φ.ext_int ψ]\n#align ring_hom.ext_zmod RingHom.ext_zmod\n-/\n\n",
 "eq_iff_modeq_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [MOD ]» -/\ntheorem eq_iff_modeq_nat (n : ℕ) {a b : ℕ} : (a : ZMod n) = b ↔ «expr ≡ [MOD ]» a b n :=\n  by\n  cases n\n  · simp only [Nat.ModEq, Int.coe_nat_inj', nat.mod_zero]\n  · rw [Fin.ext_iff, Nat.ModEq, ← val_nat_cast, ← val_nat_cast]\n    exact iff.rfl\n#align eq_iff_modeq_nat eq_iff_modeq_nat\n\n",
 "coe_val_min_abs":
 "@[simp, norm_cast]\ntheorem coe_val_min_abs : ∀ {n : ℕ} (x : ZMod n), (x.val_min_abs : ZMod n) = x\n  | 0, x => Int.cast_id x\n  | k@(n + 1), x => by\n    rw [val_min_abs_def_pos]\n    split_ifs\n    · rw [Int.cast_ofNat, nat_cast_zmod_val]\n    · rw [Int.cast_sub, Int.cast_ofNat, nat_cast_zmod_val, Int.cast_ofNat, nat_cast_self, sub_zero]\n#align coe_val_min_abs coe_val_min_abs\n\n",
 "coe_unit_of_coprime":
 "@[simp]\ntheorem coe_unit_of_coprime {n : ℕ} (x : ℕ) (h : Nat.coprime x n) : (unitOfCoprime x h : ZMod n) = x :=\n  rfl\n#align coe_unit_of_coprime coe_unit_of_coprime\n\n",
 "coe_mul_inv_eq_one":
 "theorem coe_mul_inv_eq_one {n : ℕ} (x : ℕ) (h : Nat.coprime x n) : (x * x⁻¹ : ZMod n) = 1 :=\n  by\n  rw [Nat.coprime, Nat.gcd_comm, Nat.gcd_rec] at h\n  rw [mul_inv_eq_gcd, val_nat_cast, h, Nat.cast_one]\n#align coe_mul_inv_eq_one coe_mul_inv_eq_one\n\n",
 "coe_int_cast":
 "theorem coe_int_cast {n : ℕ} (a : ℤ) : ↑(a : ZMod n) = a % n :=\n  by\n  cases n\n  · rw [Int.ofNat_zero, Int.mod_zero, Int.cast_id, Int.cast_id]\n  · rw [← val_int_cast, val, coe_coe]\n#align coe_int_cast coe_int_cast\n\n",
 "coe_add_eq_ite":
 "theorem coe_add_eq_ite {n : ℕ} (a b : ZMod n) : (↑(a + b) : ℤ) = if (n : ℤ) ≤ a + b then a + b - n else a + b :=\n  by\n  cases n\n  · simp\n  simp only [coe_coe, Fin.val_add_eq_ite, ← Int.ofNat_add, ← Int.ofNat_succ, Int.ofNat_le]\n  split_ifs with h\n  · exact Int.ofNat_sub h\n  · rfl\n#align coe_add_eq_ite coe_add_eq_ite\n\n",
 "cast_zero":
 "-- see Note [coercion into rings]\n@[simp]\ntheorem cast_zero : ((0 : ZMod n) : R) = 0 := by cases n <;> simp\n#align cast_zero cast_zero\n\n",
 "cast_sub_one":
 "theorem cast_sub_one {R : Type _} [Ring R] {n : ℕ} (k : ZMod n) :\n    ((k - 1 : ZMod n) : R) = (if k = 0 then n else k) - 1 :=\n  by\n  split_ifs with hk\n  · rw [hk, zero_sub, ZMod.cast_neg_one]\n  · cases n\n    · rw [Int.cast_sub, Int.cast_one]\n    · rw [← ZMod.nat_cast_val, ZMod.val, Fin.coe_sub_one, if_neg]\n      · rw [Nat.cast_sub, Nat.cast_one, coe_coe]\n        rwa [Fin.ext_iff, Fin.val_zero, ← ne, ← Nat.one_le_iff_ne_zero] at hk\n      · exact hk\n#align cast_sub_one cast_sub_one\n\n",
 "cast_sub'":
 "@[simp]\ntheorem cast_sub' (a b : ZMod n) : ((a - b : ZMod n) : R) = a - b :=\n  cast_sub dvd_rfl a b\n#align cast_sub' cast_sub'\n\n",
 "cast_sub":
 "@[simp, norm_cast]\ntheorem cast_sub (h : m ∣ n) (a b : ZMod n) : ((a - b : ZMod n) : R) = a - b :=\n  (castHom h R).map_sub a b\n#align cast_sub cast_sub\n\n",
 "cast_pow'":
 "@[simp]\ntheorem cast_pow' (a : ZMod n) (k : ℕ) : ((a ^ k : ZMod n) : R) = a ^ k :=\n  cast_pow dvd_rfl a k\n#align cast_pow' cast_pow'\n\n",
 "cast_pow":
 "@[simp, norm_cast]\ntheorem cast_pow (h : m ∣ n) (a : ZMod n) (k : ℕ) : ((a ^ k : ZMod n) : R) = a ^ k :=\n  (castHom h R).map_pow a k\n#align cast_pow cast_pow\n\n",
 "cast_one'":
 "@[simp]\ntheorem cast_one' : ((1 : ZMod n) : R) = 1 :=\n  cast_one dvd_rfl\n#align cast_one' cast_one'\n\n",
 "cast_one":
 "@[simp]\ntheorem cast_one (h : m ∣ n) : ((1 : ZMod n) : R) = 1 :=\n  by\n  cases n\n  · exact Int.cast_one\n  show ((1 % (n + 1) : ℕ) : R) = 1\n  cases n;\n  · rw [Nat.dvd_one] at h\n    subst m\n    apply subsingleton.elim\n  rw [nat.mod_eq_of_lt]\n  · exact Nat.cast_one\n  exact nat.lt_of_sub_eq_succ rfl\n#align cast_one cast_one\n\n",
 "cast_neg_one":
 "/-- `-1 : zmod n` lifts to `n - 1 : R`. This avoids the characteristic assumption in `cast_neg`. -/\ntheorem cast_neg_one {R : Type _} [Ring R] (n : ℕ) : ↑(-1 : ZMod n) = (n - 1 : R) :=\n  by\n  cases n\n  · rw [Int.cast_neg, Int.cast_one, Nat.cast_zero, zero_sub]\n  · rw [← nat_cast_val, val_neg_one, Nat.cast_succ, add_sub_cancel]\n#align cast_neg_one cast_neg_one\n\n",
 "cast_neg":
 "@[simp, norm_cast]\ntheorem cast_neg (h : m ∣ n) (a : ZMod n) : ((-a : ZMod n) : R) = -a :=\n  (castHom h R).map_neg a\n#align cast_neg cast_neg\n\n",
 "cast_nat_cast'":
 "@[simp, norm_cast]\ntheorem cast_nat_cast' (k : ℕ) : ((k : ZMod n) : R) = k :=\n  cast_nat_cast dvd_rfl k\n#align cast_nat_cast' cast_nat_cast'\n\n",
 "cast_nat_cast":
 "@[simp, norm_cast]\ntheorem cast_nat_cast (h : m ∣ n) (k : ℕ) : ((k : ZMod n) : R) = k :=\n  map_natCast (castHom h R) k\n#align cast_nat_cast cast_nat_cast\n\n",
 "cast_mul'":
 "@[simp]\ntheorem cast_mul' (a b : ZMod n) : ((a * b : ZMod n) : R) = a * b :=\n  cast_mul dvd_rfl a b\n#align cast_mul' cast_mul'\n\n",
 "cast_mul":
 "theorem cast_mul (h : m ∣ n) (a b : ZMod n) : ((a * b : ZMod n) : R) = a * b :=\n  by\n  cases n\n  · apply Int.cast_mul\n  simp only [coe_coe]\n  symm\n  erw [Fin.coe_mul, ← Nat.cast_mul, ← sub_eq_zero, ← Nat.cast_sub (nat.mod_le _ _), @char_p.cast_eq_zero_iff R _ m]\n  exact h.trans (Nat.dvd_sub_mod _)\n#align cast_mul cast_mul\n\n",
 "cast_int_cast'":
 "@[simp, norm_cast]\ntheorem cast_int_cast' (k : ℤ) : ((k : ZMod n) : R) = k :=\n  cast_int_cast dvd_rfl k\n#align cast_int_cast' cast_int_cast'\n\n",
 "cast_int_cast":
 "@[simp, norm_cast]\ntheorem cast_int_cast (h : m ∣ n) (k : ℤ) : ((k : ZMod n) : R) = k :=\n  map_intCast (castHom h R) k\n#align cast_int_cast cast_int_cast\n\n",
 "cast_id'":
 "@[simp]\ntheorem cast_id' : (coe : ZMod n → ZMod n) = id :=\n  funext (cast_id n)\n#align cast_id' cast_id'\n\n",
 "cast_id":
 "@[norm_cast]\ntheorem cast_id : ∀ (n) (i : ZMod n), ↑i = i\n  | 0, i => Int.cast_id i\n  | n + 1, i => nat_cast_zmod_val i\n#align cast_id cast_id\n\n",
 "cast_hom_injective":
 "theorem cast_hom_injective : function.injective (ZMod.castHom (dvd_refl n) R) :=\n  by\n  rw [injective_iff_map_eq_zero]\n  intro x\n  obtain ⟨k, rfl⟩ := ZMod.int_cast_surjective x\n  rw [map_intCast, CharP.int_cast_eq_zero_iff R n, CharP.int_cast_eq_zero_iff (ZMod n) n]\n  exact id\n#align cast_hom_injective cast_hom_injective\n\n",
 "cast_hom_bijective":
 "theorem cast_hom_bijective [Fintype R] (h : Fintype.card R = n) : function.bijective (ZMod.castHom (dvd_refl n) R) :=\n  by\n  haveI : NeZero n :=\n    ⟨by\n      intro hn\n      rw [hn] at h\n      exact (fintype.card_eq_zero_iff.mp h).elim' 0⟩\n  rw [Fintype.bijective_iff_injective_and_card, ZMod.card, h, eq_self_iff_true, and_true_iff]\n  apply ZMod.castHom_injective\n#align cast_hom_bijective cast_hom_bijective\n\n",
 "cast_hom_apply":
 "@[simp]\ntheorem cast_hom_apply {h : m ∣ n} (i : ZMod n) : castHom h R i = i :=\n  rfl\n#align cast_hom_apply cast_hom_apply\n\n",
 "cast_eq_val":
 "theorem cast_eq_val [NeZero n] (a : ZMod n) : (a : R) = a.val :=\n  by\n  cases n\n  · cases NeZero.ne 0 rfl\n  rfl\n#align cast_eq_val cast_eq_val\n\n",
 "cast_add'":
 "@[simp]\ntheorem cast_add' (a b : ZMod n) : ((a + b : ZMod n) : R) = a + b :=\n  cast_add dvd_rfl a b\n#align cast_add' cast_add'\n\n",
 "cast_add":
 "theorem cast_add (h : m ∣ n) (a b : ZMod n) : ((a + b : ZMod n) : R) = a + b :=\n  by\n  cases n\n  · apply Int.cast_add\n  simp only [coe_coe]\n  symm\n  erw [Fin.val_add, ← Nat.cast_add, ← sub_eq_zero, ← Nat.cast_sub (nat.mod_le _ _), @char_p.cast_eq_zero_iff R _ m]\n  exact h.trans (Nat.dvd_sub_mod _)\n#align cast_add cast_add\n\n",
 "add_order_of_one":
 "@[simp]\ntheorem add_order_of_one (n : ℕ) : addOrderOf (1 : ZMod n) = n :=\n  CharP.eq _ (CharP.addOrderOf_one _) (zmod.char_p n)\n#align add_order_of_one add_order_of_one\n\n",
 "add_order_of_coe'":
 "/-- This lemma works in the case in which `a ≠ 0`.  The version where\n `zmod n` is not infinite, i.e. `n ≠ 0`, is `add_order_of_coe`. -/\n@[simp]\ntheorem add_order_of_coe' {a : ℕ} (n : ℕ) (a0 : a ≠ 0) : addOrderOf (a : ZMod n) = n / n.gcd a := by\n  rw [← Nat.smul_one_eq_coe, addOrderOf_nsmul' _ a0, ZMod.addOrderOf_one]\n#align add_order_of_coe' add_order_of_coe'\n\n",
 "add_order_of_coe":
 "/-- This lemma works in the case in which `zmod n` is not infinite, i.e. `n ≠ 0`.  The version\nwhere `a ≠ 0` is `add_order_of_coe'`. -/\n@[simp]\ntheorem add_order_of_coe (a : ℕ) {n : ℕ} (n0 : n ≠ 0) : addOrderOf (a : ZMod n) = n / n.gcd a :=\n  by\n  cases a\n  simp [nat.pos_of_ne_zero n0]\n  rw [← Nat.smul_one_eq_coe, addOrderOf_nsmul' _ a.succ_ne_zero, ZMod.addOrderOf_one]\n#align add_order_of_coe add_order_of_coe\n\n",
 "RingHomSurjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHomSurjective /-\ntheorem RingHomSurjective [Ring R] (f : «expr →+* » R (ZMod n)) : function.surjective f :=\n  (ringHom_rightInverse f).surjective\n#align ring_hom_surjective RingHomSurjective\n-/\n\n"}