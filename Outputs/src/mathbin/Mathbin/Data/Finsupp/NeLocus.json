{"zip_with_ne_locus_eq_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem zip_with_ne_locus_eq_right [decidable_eq M] [Zero M] [decidable_eq P] [Zero P] [Zero N] {F : M → N → P}\n    (F0 : F 0 0 = 0) (f₁ f₂ : «expr →₀ » α M) (g : «expr →₀ » α N) (hF : ∀ g, function.injective fun f => F f g) :\n    (zip_with F F0 f₁ g).ne_locus (zip_with F F0 f₂ g) = f₁.ne_locus f₂ :=\n  by\n  ext\n  simpa only [mem_ne_locus] using (hF _).ne_iff\n#align zip_with_ne_locus_eq_right zip_with_ne_locus_eq_right\n\n",
 "zip_with_ne_locus_eq_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem zip_with_ne_locus_eq_left [decidable_eq N] [Zero M] [decidable_eq P] [Zero P] [Zero N] {F : M → N → P}\n    (F0 : F 0 0 = 0) (f : «expr →₀ » α M) (g₁ g₂ : «expr →₀ » α N) (hF : ∀ f, function.injective fun g => F f g) :\n    (zip_with F F0 f g₁).ne_locus (zip_with F F0 f g₂) = g₁.ne_locus g₂ :=\n  by\n  ext\n  simpa only [mem_ne_locus] using (hF _).ne_iff\n#align zip_with_ne_locus_eq_left zip_with_ne_locus_eq_left\n\n",
 "subset_map_range_ne_locus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem subset_map_range_ne_locus [decidable_eq N] [Zero N] [decidable_eq M] [Zero M] (f g : «expr →₀ » α N) {F : N → M}\n    (F0 : F 0 = 0) : (f.map_range F F0).ne_locus (g.map_range F F0) ⊆ f.ne_locus g := fun x => by\n  simpa only [mem_ne_locus, map_range_apply, not_imp_not] using congr_arg F\n#align subset_map_range_ne_locus subset_map_range_ne_locus\n\n",
 "not_mem_ne_locus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem not_mem_ne_locus {f g : «expr →₀ » α N} {a : α} : a ∉ f.ne_locus g ↔ f a = g a :=\n  mem_ne_locus.not.trans not_ne_iff\n#align not_mem_ne_locus not_mem_ne_locus\n\n",
 "nonempty_ne_locus_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem nonempty_ne_locus_iff {f g : «expr →₀ » α N} : (f.ne_locus g).nonempty ↔ f ≠ g :=\n  Finset.nonempty_iff_ne_empty.trans ne_locus_eq_empty.not\n#align nonempty_ne_locus_iff nonempty_ne_locus_iff\n\n",
 "ne_locus_zero_right":
 "@[simp]\ntheorem ne_locus_zero_right : f.ne_locus 0 = f.support := by\n  ext\n  rw [mem_ne_locus, mem_support_iff, coe_zero, pi.zero_apply]\n#align ne_locus_zero_right ne_locus_zero_right\n\n",
 "ne_locus_zero_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem ne_locus_zero_left : (0 : «expr →₀ » α N).ne_locus f = f.support :=\n  (ne_locus_comm _ _).trans (ne_locus_zero_right _)\n#align ne_locus_zero_left ne_locus_zero_left\n\n",
 "ne_locus_sub_right":
 "@[simp]\ntheorem ne_locus_sub_right : ne_locus (f₁ - g) (f₂ - g) = ne_locus f₁ f₂ := by\n  simpa only [sub_eq_add_neg] using ne_locus_add_right _ _ _\n#align ne_locus_sub_right ne_locus_sub_right\n\n",
 "ne_locus_sub_left":
 "@[simp]\ntheorem ne_locus_sub_left : ne_locus (f - g₁) (f - g₂) = ne_locus g₁ g₂ := by\n  simp only [sub_eq_add_neg, ne_locus_add_left, ne_locus_neg_neg]\n#align ne_locus_sub_left ne_locus_sub_left\n\n",
 "ne_locus_self_sub_right":
 "@[simp]\ntheorem ne_locus_self_sub_right : ne_locus f (f - g) = g.support := by\n  rw [sub_eq_add_neg, ne_locus_self_add_right, support_neg]\n#align ne_locus_self_sub_right ne_locus_self_sub_right\n\n",
 "ne_locus_self_sub_left":
 "@[simp]\ntheorem ne_locus_self_sub_left : ne_locus (f - g) f = g.support := by rw [ne_locus_comm, ne_locus_self_sub_right]\n#align ne_locus_self_sub_left ne_locus_self_sub_left\n\n",
 "ne_locus_self_add_right":
 "@[simp]\ntheorem ne_locus_self_add_right : ne_locus f (f + g) = g.support := by\n  rw [← ne_locus_zero_left, ← ne_locus_add_left f 0 g, add_zero]\n#align ne_locus_self_add_right ne_locus_self_add_right\n\n",
 "ne_locus_self_add_left":
 "@[simp]\ntheorem ne_locus_self_add_left : ne_locus (f + g) f = g.support := by rw [ne_locus_comm, ne_locus_self_add_right]\n#align ne_locus_self_add_left ne_locus_self_add_left\n\n",
 "ne_locus_neg_neg":
 "@[simp]\ntheorem ne_locus_neg_neg : ne_locus (-f) (-g) = f.ne_locus g :=\n  map_range_ne_locus_eq _ _ neg_zero neg_injective\n#align ne_locus_neg_neg ne_locus_neg_neg\n\n",
 "ne_locus_neg":
 "theorem ne_locus_neg : ne_locus (-f) g = f.ne_locus (-g) := by rw [← ne_locus_neg_neg, neg_neg]\n#align ne_locus_neg ne_locus_neg\n\n",
 "ne_locus_eq_support_sub":
 "theorem ne_locus_eq_support_sub : f.ne_locus g = (f - g).support := by\n  rw [← ne_locus_add_right _ _ (-g), add_right_neg, ne_locus_zero_right, sub_eq_add_neg]\n#align ne_locus_eq_support_sub ne_locus_eq_support_sub\n\n",
 "ne_locus_eq_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem ne_locus_eq_empty {f g : «expr →₀ » α N} : f.ne_locus g = ∅ ↔ f = g :=\n  ⟨fun h => ext fun a => not_not.mp (mem_ne_locus.not.mp (Finset.eq_empty_iff_forall_not_mem.mp h a)), fun h =>\n    h ▸ by simp only [ne_locus, ne.def, eq_self_iff_true, not_true, Finset.filter_false]⟩\n#align ne_locus_eq_empty ne_locus_eq_empty\n\n",
 "ne_locus_comm":
 "theorem ne_locus_comm : f.ne_locus g = g.ne_locus f := by simp_rw [ne_locus, Finset.union_comm, ne_comm]\n#align ne_locus_comm ne_locus_comm\n\n",
 "ne_locus_add_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem ne_locus_add_right [add_right_cancel_monoid N] (f g h : «expr →₀ » α N) :\n    (f + h).ne_locus (g + h) = f.ne_locus g :=\n  zip_with_ne_locus_eq_right _ _ _ _ add_left_injective\n#align ne_locus_add_right ne_locus_add_right\n\n",
 "ne_locus_add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem ne_locus_add_left [add_left_cancel_monoid N] (f g h : «expr →₀ » α N) :\n    (f + g).ne_locus (f + h) = g.ne_locus h :=\n  zip_with_ne_locus_eq_left _ _ _ _ add_right_injective\n#align ne_locus_add_left ne_locus_add_left\n\n",
 "mem_ne_locus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/-\nCopyright (c) 2022 Damiano Testa. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Damiano Testa\n-/\n@[simp]\ntheorem mem_ne_locus {f g : «expr →₀ » α N} {a : α} : a ∈ f.ne_locus g ↔ f a ≠ g a := by\n  simpa only [ne_locus, Finset.mem_filter, Finset.mem_union, mem_support_iff, and_iff_right_iff_imp] using ne.ne_or_ne _\n#align mem_ne_locus mem_ne_locus\n\n",
 "map_range_ne_locus_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem map_range_ne_locus_eq [decidable_eq N] [decidable_eq M] [Zero M] [Zero N] (f g : «expr →₀ » α N) {F : N → M}\n    (F0 : F 0 = 0) (hF : function.injective F) : (f.map_range F F0).ne_locus (g.map_range F F0) = f.ne_locus g :=\n  by\n  ext\n  simpa only [mem_ne_locus] using hF.ne_iff\n#align map_range_ne_locus_eq map_range_ne_locus_eq\n\n",
 "coe_ne_locus":
 "@[simp]\ntheorem coe_ne_locus : ↑(f.ne_locus g) = { x | f x ≠ g x } :=\n  by\n  ext\n  exact mem_ne_locus\n#align coe_ne_locus coe_ne_locus\n\n"}