{"well_founded_of_finite":
 "theorem lex.well_founded_of_finite [is_strict_total_order α r] [Finite α] [Zero N] (hs : well_founded s) :\n    well_founded (finsupp.lex r s) :=\n  inv_image.wf (@equiv_fun_on_finite α N _ _) (pi.lex.well_founded r fun a => hs)\n#align lex.well_founded_of_finite lex.well_founded_of_finite\n\n",
 "well_founded_lt_of_finite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem lex.well_founded_lt_of_finite [linear_order α] [Finite α] [Zero N] [LT N] [hwf : well_founded_lt N] :\n    well_founded_lt (lex («expr →₀ » α N)) :=\n  ⟨finsupp.lex.well_founded_of_finite (· < ·) hwf.1⟩\n#align lex.well_founded_lt_of_finite lex.well_founded_lt_of_finite\n\n",
 "well_founded_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\nprotected theorem well_founded_lt [Zero N] [preorder N] [well_founded_lt N] (hbot : ∀ n : N, ¬n < 0) :\n    well_founded_lt («expr →₀ » α N) :=\n  ⟨inv_image.wf to_dfinsupp (dfinsupp.well_founded_lt fun i a => hbot a).wf⟩\n#align well_founded_lt well_founded_lt\n\n",
 "well_founded'":
 "theorem lex.well_founded' [is_trichotomous α r] (hr : well_founded r.swap) : well_founded (finsupp.lex r s) :=\n  (lex_eq_inv_image_dfinsupp_lex r s).symm ▸\n    inv_image.wf _ (dfinsupp.lex.well_founded' (fun a => hbot) (fun a => hs) hr)\n#align lex.well_founded' lex.well_founded'\n\n",
 "well_founded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem lex.well_founded (hr : well_founded <| «expr ⊓ » («expr ᶜ» r) (· ≠ ·)) : well_founded (finsupp.lex r s) :=\n  ⟨fun x => lex.acc hbot hs x fun a _ => hr.apply a⟩\n#align lex.well_founded lex.well_founded\n\n",
 "acc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-\nCopyright (c) 2022 Junyan Xu. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Junyan Xu\n-/\n/-- Transferred from `dfinsupp.lex.acc`. See the top of that file for an explanation for the\n  appearance of the relation `rᶜ ⊓ (≠)`. -/\ntheorem lex.acc (x : «expr →₀ » α N) (h : ∀ a ∈ x.support, acc («expr ⊓ » («expr ᶜ» r) (· ≠ ·)) a) :\n    acc (finsupp.lex r s) x := by\n  rw [lex_eq_inv_image_dfinsupp_lex]\n  classical\n    refine' InvImage.accessible to_dfinsupp (dfinsupp.lex.acc (fun a => hbot) (fun a => hs) _ _)\n    simpa only [to_dfinsupp_support] using h\n#align lex.acc lex.acc\n\n"}