{"support_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\ntheorem support_mul [decidable_eq α] {g₁ g₂ : «expr →₀ » α β} : (g₁ * g₂).support ⊆ g₁.support ∩ g₂.support :=\n  by\n  intro a h\n  simp only [mul_apply, mem_support_iff] at h\n  simp only [mem_support_iff, mem_inter, ne.def]\n  rw [← not_or]\n  intro w\n  apply h\n  cases w <;>\n    · rw [w]\n      simp\n#align support_mul support_mul\n\n",
 "mul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n@[simp]\ntheorem mul_apply {g₁ g₂ : «expr →₀ » α β} {a : α} : (g₁ * g₂) a = g₁ a * g₂ a :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "coe_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- TODO can this be generalized in the direction of `pi.has_smul'`\n-- (i.e. dependent functions and finsupps)\n-- TODO in theory this could be generalised, we only really need `smul_zero` for the definition\n@[simp]\ntheorem coe_pointwise_smul [Semiring β] (f : α → β) (g : «expr →₀ » α β) : «expr⇑ » («expr • » f g) = «expr • » f g :=\n  rfl\n#align coe_pointwise_smul coe_pointwise_smul\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem coe_mul (g₁ g₂ : «expr →₀ » α β) : «expr⇑ » (g₁ * g₂) = g₁ * g₂ :=\n  rfl\n#align coe_mul coe_mul\n\n"}