{"zero_ne_one":
 "#print zero_ne_one /-\ntheorem zero_ne_one : (0 : Cauchy abv) ≠ 1 := fun h => cau_seq_zero_ne_one <| mk_eq.1 h\n#align zero_ne_one zero_ne_one\n-/\n\n",
 "zero_def":
 "private theorem zero_def : 0 = (mk 0 : Cauchy abv) :=\n  rfl\n#align zero_def zero_def\n\n",
 "one_def":
 "private theorem one_def : 1 = (mk 1 : Cauchy abv) :=\n  rfl\n#align one_def one_def\n\n",
 "of_rat_zero":
 "theorem of_rat_zero : (ofRat 0 : Cauchy abv) = 0 :=\n  rfl\n#align of_rat_zero of_rat_zero\n\n",
 "of_rat_sub":
 "theorem of_rat_sub (x y : β) : ofRat (x - y) = (ofRat x - ofRat y : Cauchy abv) :=\n  congr_arg mk (const_sub _ _)\n#align of_rat_sub of_rat_sub\n\n",
 "of_rat_rat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem of_rat_rat_cast (q : exprℚ) : ofRat (↑q : β) = (q : Cauchy abv) :=\n  rfl\n#align of_rat_rat_cast of_rat_rat_cast\n\n",
 "of_rat_one":
 "theorem of_rat_one : (ofRat 1 : Cauchy abv) = 1 :=\n  rfl\n#align of_rat_one of_rat_one\n\n",
 "of_rat_neg":
 "theorem of_rat_neg (x : β) : ofRat (-x) = (-ofRat x : Cauchy abv) :=\n  congr_arg mk (const_neg _)\n#align of_rat_neg of_rat_neg\n\n",
 "of_rat_nat_cast":
 "@[simp]\ntheorem of_rat_nat_cast (n : ℕ) : (ofRat n : Cauchy abv) = n :=\n  rfl\n#align of_rat_nat_cast of_rat_nat_cast\n\n",
 "of_rat_mul":
 "theorem of_rat_mul (x y : β) : ofRat (x * y) = (ofRat x * ofRat y : Cauchy abv) :=\n  congr_arg mk (const_mul _ _)\n#align of_rat_mul of_rat_mul\n\n",
 "of_rat_inv":
 "theorem of_rat_inv (x : β) : ofRat x⁻¹ = ((ofRat x)⁻¹ : Cauchy abv) :=\n  congr_arg mk <| by split_ifs with h <;> [simp [const_lim_zero.1 h], rfl]\n#align of_rat_inv of_rat_inv\n\n",
 "of_rat_int_cast":
 "@[simp]\ntheorem of_rat_int_cast (z : ℤ) : (ofRat z : Cauchy abv) = z :=\n  rfl\n#align of_rat_int_cast of_rat_int_cast\n\n",
 "of_rat_div":
 "theorem of_rat_div (x y : β) : ofRat (x / y) = (ofRat x / ofRat y : Cauchy abv) := by\n  simp only [div_eq_mul_inv, of_rat_inv, of_rat_mul]\n#align of_rat_div of_rat_div\n\n",
 "of_rat_add":
 "theorem of_rat_add (x y : β) : ofRat (x + y) = (ofRat x + ofRat y : Cauchy abv) :=\n  congr_arg mk (const_add _ _)\n#align of_rat_add of_rat_add\n\n",
 "mul_inv_cancel":
 "#print mul_inv_cancel /-\nprotected theorem mul_inv_cancel {x : Cauchy abv} : x ≠ 0 → x * x⁻¹ = 1 :=\n  Quotient.inductionOn x fun f hf => by\n    simp at hf; simp [hf]\n    exact quotient.sound (CauSeq.mul_inv_cancel hf)\n#align mul_inv_cancel mul_inv_cancel\n-/\n\n",
 "mk_sub":
 "@[simp]\ntheorem mk_sub (f g : CauSeq β abv) : mk f - mk g = mk (f - g) :=\n  rfl\n#align mk_sub mk_sub\n\n",
 "mk_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem mk_smul {γ : Type _} [SMul γ β] [IsScalarTower γ β β] (c : γ) (f : CauSeq β abv) :\n    «expr • » c (mk f) = mk («expr • » c f) :=\n  rfl\n#align mk_smul mk_smul\n\n",
 "mk_pow":
 "@[simp]\ntheorem mk_pow (n : ℕ) (f : CauSeq β abv) : mk f ^ n = mk (f ^ n) :=\n  rfl\n#align mk_pow mk_pow\n\n",
 "mk_neg":
 "@[simp]\ntheorem mk_neg (f : CauSeq β abv) : -mk f = mk (-f) :=\n  rfl\n#align mk_neg mk_neg\n\n",
 "mk_mul":
 "@[simp]\ntheorem mk_mul (f g : CauSeq β abv) : mk f * mk g = mk (f * g) :=\n  rfl\n#align mk_mul mk_mul\n\n",
 "mk_eq_zero":
 "@[simp]\ntheorem mk_eq_zero {f : CauSeq _ abv} : mk f = 0 ↔ LimZero f := by\n  have : mk f = 0 ↔ lim_zero (f - 0) := quotient.eq <;> rwa [sub_zero] at this\n#align mk_eq_zero mk_eq_zero\n\n",
 "mk_eq_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Robert Y. Lewis\n-/\n@[simp]\ntheorem mk_eq_mk (f) : @eq (Cauchy abv) («expr⟦ ⟧» f) (mk f) :=\n  rfl\n#align mk_eq_mk mk_eq_mk\n\n",
 "mk_eq":
 "theorem mk_eq {f g : CauSeq _ abv} : mk f = mk g ↔ f ≈ g :=\n  quotient.eq\n#align mk_eq mk_eq\n\n",
 "mk_add":
 "@[simp]\ntheorem mk_add (f g : CauSeq β abv) : mk f + mk g = mk (f + g) :=\n  rfl\n#align mk_add mk_add\n\n",
 "lt_lim":
 "theorem lt_lim {f : CauSeq α abs} {x : α} (h : CauSeq.const abs x < f) : x < lim f :=\n  CauSeq.const_lt.1 <| CauSeq.lt_of_lt_of_eq h (equiv_lim f)\n#align lt_lim lt_lim\n\n",
 "lim_neg":
 "theorem lim_neg (f : CauSeq β abv) : lim (-f) = -lim f :=\n  lim_eq_of_equiv_const\n    (show LimZero (-f - const abv (-lim f)) by\n      rw [const_neg, sub_neg_eq_add, add_comm, ← sub_eq_add_neg] <;> exact setoid.symm (equiv_lim f))\n#align lim_neg lim_neg\n\n",
 "lim_mul_lim":
 "theorem lim_mul_lim (f g : CauSeq β abv) : lim f * lim g = lim (f * g) :=\n  eq_lim_of_const_equiv <|\n    show LimZero (const abv (lim f * lim g) - f * g)\n      by\n      have h :\n        const abv (lim f * lim g) - f * g = (const abv (lim f) - f) * g + const abv (lim f) * (const abv (lim g) - g) :=\n        by simp [const_mul (lim f), mul_add, add_mul, sub_eq_add_neg, add_comm, add_left_comm]\n      rw [h] <;>\n        exact\n          add_lim_zero (mul_lim_zero_left _ (setoid.symm (equiv_lim _)))\n            (mul_lim_zero_right _ (setoid.symm (equiv_lim _)))\n#align lim_mul_lim lim_mul_lim\n\n",
 "lim_mul":
 "theorem lim_mul (f : CauSeq β abv) (x : β) : lim f * x = lim (f * const abv x) := by rw [← lim_mul_lim, lim_const]\n#align lim_mul lim_mul\n\n",
 "lim_lt":
 "theorem lim_lt {f : CauSeq α abs} {x : α} (h : f < CauSeq.const abs x) : lim f < x :=\n  CauSeq.const_lt.1 <| CauSeq.lt_of_eq_of_lt (setoid.symm (equiv_lim f)) h\n#align lim_lt lim_lt\n\n",
 "lim_le":
 "theorem lim_le {f : CauSeq α abs} {x : α} (h : f ≤ CauSeq.const abs x) : lim f ≤ x :=\n  CauSeq.const_le.1 <| CauSeq.le_of_eq_of_le (setoid.symm (equiv_lim f)) h\n#align lim_le lim_le\n\n",
 "lim_inv":
 "theorem lim_inv {f : CauSeq β abv} (hf : ¬LimZero f) : lim (inv f hf) = (lim f)⁻¹ :=\n  have hl : lim f ≠ 0 := by rwa [← lim_eq_zero_iff] at hf\n  lim_eq_of_equiv_const <|\n    show LimZero (inv f hf - const abv (lim f)⁻¹) from\n      have h₁ : ∀ (g f : CauSeq β abv) (hf : ¬LimZero f), LimZero (g - f * inv f hf * g) := fun g f hf => by\n        rw [← one_mul g, ← mul_assoc, ← sub_mul, mul_one, mul_comm, mul_comm f] <;>\n          exact mul_lim_zero_right _ (setoid.symm (CauSeq.inv_mul_cancel _))\n      have h₂ : LimZero (inv f hf - const abv (lim f)⁻¹ - (const abv (lim f) - f) * (inv f hf * const abv (lim f)⁻¹)) :=\n        by\n        rw [sub_mul, ← sub_add, sub_sub, sub_add_eq_sub_sub, sub_right_comm, sub_add] <;>\n          exact\n            show\n              lim_zero\n                (inv f hf - const abv (lim f) * (inv f hf * const abv (lim f)⁻¹) -\n                  (const abv (lim f)⁻¹ - f * (inv f hf * const abv (lim f)⁻¹)))\n              from\n              sub_lim_zero (by rw [← mul_assoc, mul_right_comm, const_inv hl] <;> exact h₁ _ _ _)\n                (by rw [← mul_assoc] <;> exact h₁ _ _ _)\n      (limZero_congr h₂).mpr <| mul_limZero_left _ (setoid.symm (equiv_lim f))\n#align lim_inv lim_inv\n\n",
 "lim_eq_zero_iff":
 "theorem lim_eq_zero_iff (f : CauSeq β abv) : lim f = 0 ↔ LimZero f :=\n  ⟨fun h => by have hf := equiv_lim f <;> rw [h] at hf <;> exact (lim_zero_congr hf).mpr (const_lim_zero.mpr rfl),\n    fun h => by\n    have h₁ : f = f - const abv 0 := ext fun n => by simp [sub_apply, const_apply]\n    rw [h₁] at h <;> exact lim_eq_of_equiv_const h⟩\n#align lim_eq_zero_iff lim_eq_zero_iff\n\n",
 "lim_eq_of_equiv_const":
 "theorem lim_eq_of_equiv_const {f : CauSeq β abv} {x : β} (h : f ≈ CauSeq.const abv x) : lim f = x :=\n  (eq_lim_of_const_equiv <| setoid.symm h).symm\n#align lim_eq_of_equiv_const lim_eq_of_equiv_const\n\n",
 "lim_eq_lim_of_equiv":
 "theorem lim_eq_lim_of_equiv {f g : CauSeq β abv} (h : f ≈ g) : lim f = lim g :=\n  lim_eq_of_equiv_const <| setoid.trans h <| equiv_lim g\n#align lim_eq_lim_of_equiv lim_eq_lim_of_equiv\n\n",
 "lim_const":
 "@[simp]\ntheorem lim_const (x : β) : lim (const abv x) = x :=\n  lim_eq_of_equiv_const <| setoid.refl _\n#align lim_const lim_const\n\n",
 "lim_add":
 "theorem lim_add (f g : CauSeq β abv) : lim f + lim g = lim (f + g) :=\n  eq_lim_of_const_equiv <|\n    show LimZero (const abv (lim f + lim g) - (f + g)) by\n      rw [const_add, add_sub_add_comm] <;> exact add_lim_zero (setoid.symm (equiv_lim f)) (setoid.symm (equiv_lim g))\n#align lim_add lim_add\n\n",
 "le_lim":
 "theorem le_lim {f : CauSeq α abs} {x : α} (h : CauSeq.const abs x ≤ f) : x ≤ lim f :=\n  CauSeq.const_le.1 <| CauSeq.le_of_le_of_eq h (equiv_lim f)\n#align le_lim le_lim\n\n",
 "inv_zero":
 "@[simp]\ntheorem inv_zero : (0 : Cauchy abv)⁻¹ = 0 :=\n  congr_arg mk <| by rw [dif_pos] <;> [rfl, exact zero_lim_zero]\n#align inv_zero inv_zero\n\n",
 "inv_mul_cancel":
 "#print inv_mul_cancel /-\nprotected theorem inv_mul_cancel {x : Cauchy abv} : x ≠ 0 → x⁻¹ * x = 1 :=\n  Quotient.inductionOn x fun f hf => by\n    simp at hf; simp [hf]\n    exact quotient.sound (CauSeq.inv_mul_cancel hf)\n#align inv_mul_cancel inv_mul_cancel\n-/\n\n",
 "inv_mk":
 "@[simp]\ntheorem inv_mk {f} (hf) : (@mk α _ β _ abv _ f)⁻¹ = mk (inv f hf) :=\n  congr_arg mk <| by rw [dif_neg]\n#align inv_mk inv_mk\n\n",
 "equiv_lim":
 "theorem equiv_lim (s : CauSeq β abv) : s ≈ const abv (lim s) :=\n  Classical.choose_spec (complete s)\n#align equiv_lim equiv_lim\n\n",
 "eq_lim_of_const_equiv":
 "theorem eq_lim_of_const_equiv {f : CauSeq β abv} {x : β} (h : CauSeq.const abv x ≈ f) : x = lim f :=\n  const_equiv.mp <| setoid.trans h <| equiv_lim f\n#align eq_lim_of_const_equiv eq_lim_of_const_equiv\n\n",
 "complete":
 "theorem complete : ∀ s : CauSeq β abv, ∃ b : β, s ≈ const abv b :=\n  is_complete.is_complete\n#align complete complete\n\n",
 "cau_seq_zero_ne_one":
 "theorem cau_seq_zero_ne_one : ¬(0 : CauSeq _ abv) ≈ 1 := fun h =>\n  have : LimZero (1 - 0) := setoid.symm h\n  have : LimZero 1 := by simpa\n  one_ne_zero <| const_limZero.1 this\n#align cau_seq_zero_ne_one cau_seq_zero_ne_one\n\n"}