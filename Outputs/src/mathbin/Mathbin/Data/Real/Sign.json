{"sign_zero":
 "#print sign_zero /-\n@[simp]\ntheorem sign_zero : sign 0 = 0 := by rw [SignType.sign, if_neg (lt_irrefl _), if_neg (lt_irrefl _)]\n#align sign_zero sign_zero\n-/\n\n",
 "sign_one":
 "#print sign_one /-\n@[simp]\ntheorem sign_one : sign 1 = 1 :=\n  sign_of_pos <| by norm_num\n#align sign_one sign_one\n-/\n\n",
 "sign_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem sign_of_pos {r : exprℝ} (hr : 0 < r) : sign r = 1 := by rw [SignType.sign, if_pos hr, if_neg hr.not_lt]\n#align sign_of_pos sign_of_pos\n\n",
 "sign_of_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2021 Kexing Ying. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kexing Ying, Eric Wieser\n-/\ntheorem sign_of_neg {r : exprℝ} (hr : r < 0) : sign r = -1 := by rw [SignType.sign, if_pos hr]\n#align sign_of_neg sign_of_neg\n\n",
 "sign_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print sign_neg /-\ntheorem sign_neg {r : exprℝ} : sign (-r) = -sign r :=\n  by\n  obtain hn | rfl | hp := lt_trichotomy r (0 : exprℝ)\n  · rw [sign_of_neg hn, sign_of_pos (neg_pos.mpr hn), neg_neg]\n  · rw [sign_zero, neg_zero, sign_zero]\n  · rw [sign_of_pos hp, sign_of_neg (neg_lt_zero.mpr hp)]\n#align sign_neg sign_neg\n-/\n\n",
 "sign_mul_pos_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem sign_mul_pos_of_ne_zero (r : exprℝ) (hr : r ≠ 0) : 0 < sign r * r :=\n  by\n  refine' lt_of_le_of_ne (sign_mul_nonneg r) fun h => hr _\n  have hs0 := (zero_eq_mul.mp h).resolve_right hr\n  exact sign_eq_zero_iff.mp hs0\n#align sign_mul_pos_of_ne_zero sign_mul_pos_of_ne_zero\n\n",
 "sign_mul_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem sign_mul_nonneg (r : exprℝ) : 0 ≤ sign r * r :=\n  by\n  obtain hn | rfl | hp := lt_trichotomy r (0 : exprℝ)\n  · rw [sign_of_neg hn]\n    exact mul_nonneg_of_nonpos_of_nonpos (by norm_num) hn.le\n  · rw [MulZeroClass.mul_zero]\n  · rw [sign_of_pos hp, one_mul]\n    exact hp.le\n#align sign_mul_nonneg sign_mul_nonneg\n\n",
 "sign_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem sign_inv (r : exprℝ) : sign r⁻¹ = sign r :=\n  by\n  obtain hn | rfl | hp := lt_trichotomy r (0 : exprℝ)\n  · rw [sign_of_neg hn, sign_of_neg (inv_lt_zero.mpr hn)]\n  · rw [sign_zero, inv_zero, sign_zero]\n  · rw [sign_of_pos hp, sign_of_pos (inv_pos.mpr hp)]\n#align sign_inv sign_inv\n\n",
 "sign_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem sign_int_cast (z : ℤ) : sign (z : exprℝ) = ↑(int.sign z) :=\n  by\n  obtain hn | rfl | hp := lt_trichotomy z (0 : ℤ)\n  · rw [sign_of_neg (int.cast_lt_zero.mpr hn), int.sign_eq_neg_one_of_neg hn, Int.cast_neg, Int.cast_one]\n  · rw [Int.cast_zero, sign_zero, int.sign_zero, Int.cast_zero]\n  · rw [sign_of_pos (int.cast_pos.mpr hp), int.sign_eq_one_of_pos hp, Int.cast_one]\n#align sign_int_cast sign_int_cast\n\n",
 "sign_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print sign_eq_zero_iff /-\n@[simp]\ntheorem sign_eq_zero_iff {r : exprℝ} : sign r = 0 ↔ r = 0 :=\n  by\n  refine' ⟨fun h => _, fun h => h.symm ▸ sign_zero⟩\n  obtain hn | rfl | hp := lt_trichotomy r (0 : exprℝ)\n  · rw [sign_of_neg hn, neg_eq_zero] at h\n    exact (one_ne_zero h).elim\n  · rfl\n  · rw [sign_of_pos hp] at h\n    exact (one_ne_zero h).elim\n#align sign_eq_zero_iff sign_eq_zero_iff\n-/\n\n",
 "sign_apply_eq_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- This lemma is useful for working with `ℝˣ` -/\ntheorem sign_apply_eq_of_ne_zero (r : exprℝ) (h : r ≠ 0) : sign r = -1 ∨ sign r = 1 :=\n  by\n  obtain hn | rfl | hp := lt_trichotomy r (0 : exprℝ)\n  · exact or.inl <| sign_of_neg hn\n  · exact (h rfl).elim\n  · exact or.inr <| sign_of_pos hp\n#align sign_apply_eq_of_ne_zero sign_apply_eq_of_ne_zero\n\n",
 "sign_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem sign_apply_eq (r : exprℝ) : sign r = -1 ∨ sign r = 0 ∨ sign r = 1 :=\n  by\n  obtain hn | rfl | hp := lt_trichotomy r (0 : exprℝ)\n  · exact or.inl <| sign_of_neg hn\n  · exact or.inr <| or.inl <| sign_zero\n  · exact or.inr <| or.inr <| sign_of_pos hp\n#align sign_apply_eq sign_apply_eq\n\n",
 "inv_sign":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem inv_sign (r : exprℝ) : (sign r)⁻¹ = sign r :=\n  by\n  obtain hn | hz | hp := sign_apply_eq r\n  · rw [hn]\n    norm_num\n  · rw [hz]\n    exact inv_zero\n  · rw [hp]\n    exact inv_one\n#align inv_sign inv_sign\n\n"}