{"sub_rat":
 "theorem sub_rat (h : irrational x) : irrational (x - q) := by simpa only [sub_eq_add_neg, cast_neg] using h.add_rat (-q)\n#align sub_rat sub_rat\n\n",
 "sub_nat":
 "theorem sub_nat (h : irrational x) (m : ℕ) : irrational (x - m) :=\n  h.sub_int m\n#align sub_nat sub_nat\n\n",
 "sub_int":
 "theorem sub_int (h : irrational x) (m : ℤ) : irrational (x - m) := by simpa only [Rat.cast_coe_int] using h.sub_rat m\n#align sub_int sub_int\n\n",
 "rat_sub":
 "theorem rat_sub (h : irrational x) : irrational (q - x) := by simpa only [sub_eq_add_neg] using h.neg.rat_add q\n#align rat_sub rat_sub\n\n",
 "rat_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_mul (h : irrational x) {q : exprℚ} (hq : q ≠ 0) : irrational (q * x) :=\n  mul_comm x q ▸ h.mul_rat hq\n#align rat_mul rat_mul\n\n",
 "rat_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_div (h : irrational x) {q : exprℚ} (hq : q ≠ 0) : irrational (q / x) :=\n  h.inv.rat_mul hq\n#align rat_div rat_div\n\n",
 "rat_add":
 "theorem rat_add (h : irrational x) : irrational (q + x) :=\n  of_rat_add (-q) <| by rwa [cast_neg, neg_add_cancel_left]\n#align rat_add rat_add\n\n",
 "one_lt_nat_degree_of_irrational_root":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem one_lt_nat_degree_of_irrational_root (hx : irrational x) (p_nonzero : p ≠ 0) (x_is_root : aeval x p = 0) :\n    1 < p.nat_degree := by\n  by_contra rid\n  rcases exists_eq_X_add_C_of_nat_degree_le_one (not_lt.1 rid) with ⟨a, b, rfl⟩\n  clear rid\n  have : (a : exprℝ) * x = -b := by simpa [eq_neg_iff_add_eq_zero] using x_is_root\n  rcases em (a = 0) with (rfl | ha)\n  · obtain rfl : b = 0 := by simpa\n    simpa using p_nonzero\n  · rw [mul_comm, ← eq_div_iff_mul_eq, eq_comm] at this\n    refine' hx ⟨-b / a, _⟩\n    assumption_mod_cast\n    assumption_mod_cast\n#align one_lt_nat_degree_of_irrational_root one_lt_nat_degree_of_irrational_root\n\n",
 "of_zpow":
 "theorem of_zpow : ∀ m : ℤ, irrational (x ^ m) → irrational x\n  | (n : ℕ) => fun h => by\n    rw [zpow_ofNat] at h\n    exact h.of_pow _\n  | -[n+1] => fun h => by\n    rw [zpow_negSucc] at h\n    exact h.of_inv.of_pow _\n#align of_zpow of_zpow\n\n",
 "of_sub_rat":
 "theorem of_sub_rat (h : irrational (x - q)) : irrational x :=\n  of_add_rat (-q) <| by simpa only [cast_neg, sub_eq_add_neg] using h\n#align of_sub_rat of_sub_rat\n\n",
 "of_sub_nat":
 "theorem of_sub_nat (m : ℕ) (h : irrational (x - m)) : irrational x :=\n  h.of_sub_int m\n#align of_sub_nat of_sub_nat\n\n",
 "of_sub_int":
 "theorem of_sub_int (m : ℤ) (h : irrational (x - m)) : irrational x :=\n  of_sub_rat m <| by rwa [Rat.cast_coe_int]\n#align of_sub_int of_sub_int\n\n",
 "of_rat_sub":
 "theorem of_rat_sub (h : irrational (q - x)) : irrational x :=\n  of_neg (of_rat_add q (by simpa only [sub_eq_add_neg] using h))\n#align of_rat_sub of_rat_sub\n\n",
 "of_rat_mul":
 "theorem of_rat_mul : irrational (q * x) → irrational x :=\n  mul_comm x q ▸ of_mul_rat q\n#align of_rat_mul of_rat_mul\n\n",
 "of_rat_div":
 "theorem of_rat_div (h : irrational (q / x)) : irrational x :=\n  (h.of_rat_mul q).of_inv\n#align of_rat_div of_rat_div\n\n",
 "of_rat_add":
 "theorem of_rat_add (h : irrational (q + x)) : irrational x :=\n  h.add_cases.resolve_left q.not_irrational\n#align of_rat_add of_rat_add\n\n",
 "of_pow":
 "theorem of_pow : ∀ n : ℕ, irrational (x ^ n) → irrational x\n  | 0 => fun h => by\n    rw [pow_zero] at h\n    exact (h ⟨1, cast_one⟩).elim\n  | n + 1 => fun h => by\n    rw [pow_succ] at h\n    exact h.mul_cases.elim id (of_pow n)\n#align of_pow of_pow\n\n",
 "of_one_div":
 "theorem of_one_div (h : irrational (1 / x)) : irrational x :=\n  of_rat_div 1 <| by rwa [cast_one]\n#align of_one_div of_one_div\n\n",
 "of_neg":
 "theorem of_neg (h : irrational (-x)) : irrational x := fun ⟨q, hx⟩ => h ⟨-q, by rw [cast_neg, hx]⟩\n#align of_neg of_neg\n\n",
 "of_nat_sub":
 "theorem of_nat_sub (m : ℕ) (h : irrational (m - x)) : irrational x :=\n  h.of_int_sub m\n#align of_nat_sub of_nat_sub\n\n",
 "of_nat_mul":
 "theorem of_nat_mul (m : ℕ) (h : irrational (m * x)) : irrational x :=\n  h.of_int_mul m\n#align of_nat_mul of_nat_mul\n\n",
 "of_nat_div":
 "theorem of_nat_div (m : ℕ) (h : irrational (m / x)) : irrational x :=\n  h.of_int_div m\n#align of_nat_div of_nat_div\n\n",
 "of_nat_add":
 "theorem of_nat_add (m : ℕ) (h : irrational (m + x)) : irrational x :=\n  h.of_int_add m\n#align of_nat_add of_nat_add\n\n",
 "of_mul_self":
 "theorem of_mul_self (h : irrational (x * x)) : irrational x :=\n  h.mul_cases.elim id id\n#align of_mul_self of_mul_self\n\n",
 "of_mul_rat":
 "theorem of_mul_rat (h : irrational (x * q)) : irrational x :=\n  h.mul_cases.resolve_right q.not_irrational\n#align of_mul_rat of_mul_rat\n\n",
 "of_mul_nat":
 "theorem of_mul_nat (m : ℕ) (h : irrational (x * m)) : irrational x :=\n  h.of_mul_int m\n#align of_mul_nat of_mul_nat\n\n",
 "of_mul_int":
 "theorem of_mul_int (m : ℤ) (h : irrational (x * m)) : irrational x :=\n  of_mul_rat m <| by rwa [cast_coe_int]\n#align of_mul_int of_mul_int\n\n",
 "of_inv":
 "theorem of_inv (h : irrational x⁻¹) : irrational x := fun ⟨q, hq⟩ => h <| hq ▸ ⟨q⁻¹, q.cast_inv⟩\n#align of_inv of_inv\n\n",
 "of_int_sub":
 "theorem of_int_sub (m : ℤ) (h : irrational (m - x)) : irrational x :=\n  of_rat_sub m <| by rwa [Rat.cast_coe_int]\n#align of_int_sub of_int_sub\n\n",
 "of_int_mul":
 "theorem of_int_mul (m : ℤ) (h : irrational (m * x)) : irrational x :=\n  of_rat_mul m <| by rwa [cast_coe_int]\n#align of_int_mul of_int_mul\n\n",
 "of_int_div":
 "theorem of_int_div (m : ℤ) (h : irrational (m / x)) : irrational x :=\n  h.div_cases.resolve_left m.not_irrational\n#align of_int_div of_int_div\n\n",
 "of_int_add":
 "theorem of_int_add (m : ℤ) (h : irrational (m + x)) : irrational x :=\n  by\n  rw [← cast_coe_int] at h\n  exact h.of_rat_add m\n#align of_int_add of_int_add\n\n",
 "of_div_rat":
 "theorem of_div_rat (h : irrational (x / q)) : irrational x :=\n  h.div_cases.resolve_right q.not_irrational\n#align of_div_rat of_div_rat\n\n",
 "of_div_nat":
 "theorem of_div_nat (m : ℕ) (h : irrational (x / m)) : irrational x :=\n  h.of_div_int m\n#align of_div_nat of_div_nat\n\n",
 "of_div_int":
 "theorem of_div_int (m : ℤ) (h : irrational (x / m)) : irrational x :=\n  h.div_cases.resolve_right m.not_irrational\n#align of_div_int of_div_int\n\n",
 "of_add_rat":
 "theorem of_add_rat : irrational (x + q) → irrational x :=\n  add_comm (↑q) x ▸ of_rat_add q\n#align of_add_rat of_add_rat\n\n",
 "of_add_nat":
 "theorem of_add_nat (m : ℕ) (h : irrational (x + m)) : irrational x :=\n  h.of_add_int m\n#align of_add_nat of_add_nat\n\n",
 "of_add_int":
 "theorem of_add_int (m : ℤ) (h : irrational (x + m)) : irrational x :=\n  of_int_add m <| add_comm x m ▸ h\n#align of_add_int of_add_int\n\n",
 "not_irrational":
 "@[simp]\ntheorem nat.not_irrational (m : ℕ) : ¬irrational m := fun h => h.ne_nat m rfl\n#align nat.not_irrational nat.not_irrational\n\n",
 "neg":
 "protected theorem neg (h : irrational x) : irrational (-x) :=\n  of_neg <| by rwa [neg_neg]\n#align neg neg\n\n",
 "ne_zero":
 "theorem ne_zero (h : irrational x) : x ≠ 0 := by exact_mod_cast h.ne_nat 0\n#align ne_zero ne_zero\n\n",
 "ne_rat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem ne_rat (h : irrational x) (q : exprℚ) : x ≠ q := fun hq => h ⟨q, hq.symm⟩\n#align ne_rat ne_rat\n\n",
 "ne_one":
 "theorem ne_one (h : irrational x) : x ≠ 1 := by simpa only [Nat.cast_one] using h.ne_nat 1\n#align ne_one ne_one\n\n",
 "ne_nat":
 "theorem ne_nat (h : irrational x) (m : ℕ) : x ≠ m :=\n  h.ne_int m\n#align ne_nat ne_nat\n\n",
 "ne_int":
 "theorem ne_int (h : irrational x) (m : ℤ) : x ≠ m :=\n  by\n  rw [← Rat.cast_coe_int]\n  exact h.ne_rat _\n#align ne_int ne_int\n\n",
 "nat_sub":
 "theorem nat_sub (h : irrational x) (m : ℕ) : irrational (m - x) :=\n  h.int_sub m\n#align nat_sub nat_sub\n\n",
 "nat_mul":
 "theorem nat_mul (h : irrational x) {m : ℕ} (hm : m ≠ 0) : irrational (m * x) :=\n  h.int_mul <| Int.coe_nat_ne_zero.2 hm\n#align nat_mul nat_mul\n\n",
 "nat_div":
 "theorem nat_div (h : irrational x) {m : ℕ} (hm : m ≠ 0) : irrational (m / x) :=\n  h.inv.nat_mul hm\n#align nat_div nat_div\n\n",
 "nat_add":
 "theorem nat_add (h : irrational x) (m : ℕ) : irrational (m + x) :=\n  h.int_add m\n#align nat_add nat_add\n\n",
 "mul_rat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem mul_rat (h : irrational x) {q : exprℚ} (hq : q ≠ 0) : irrational (x * q) :=\n  of_mul_rat q⁻¹ <| by rwa [mul_assoc, ← cast_mul, mul_inv_cancel hq, cast_one, mul_one]\n#align mul_rat mul_rat\n\n",
 "mul_nat":
 "theorem mul_nat (h : irrational x) {m : ℕ} (hm : m ≠ 0) : irrational (x * m) :=\n  h.mul_int <| Int.coe_nat_ne_zero.2 hm\n#align mul_nat mul_nat\n\n",
 "mul_int":
 "theorem mul_int (h : irrational x) {m : ℤ} (hm : m ≠ 0) : irrational (x * m) :=\n  by\n  rw [← cast_coe_int]\n  refine' h.mul_rat _\n  rwa [Int.cast_ne_zero]\n#align mul_int mul_int\n\n",
 "mul_cases":
 "theorem mul_cases : irrational (x * y) → irrational x ∨ irrational y :=\n  by\n  delta irrational\n  contrapose!\n  rintro ⟨⟨rx, rfl⟩, ⟨ry, rfl⟩⟩\n  exact ⟨rx * ry, cast_mul rx ry⟩\n#align mul_cases mul_cases\n\n",
 "irrational_sub_rat_iff":
 "@[simp]\ntheorem irrational_sub_rat_iff : irrational (x - q) ↔ irrational x :=\n  ⟨of_sub_rat q, sub_rat q⟩\n#align irrational_sub_rat_iff irrational_sub_rat_iff\n\n",
 "irrational_sub_nat_iff":
 "@[simp]\ntheorem irrational_sub_nat_iff : irrational (x - n) ↔ irrational x :=\n  ⟨of_sub_nat n, fun h => h.sub_nat n⟩\n#align irrational_sub_nat_iff irrational_sub_nat_iff\n\n",
 "irrational_sub_int_iff":
 "@[simp]\ntheorem irrational_sub_int_iff : irrational (x - m) ↔ irrational x :=\n  ⟨of_sub_int m, fun h => h.sub_int m⟩\n#align irrational_sub_int_iff irrational_sub_int_iff\n\n",
 "irrational_sqrt_two":
 "/-- **Irrationality of the Square Root of 2** -/\ntheorem irrational_sqrt_two : irrational (sqrt 2) := by simpa using nat.prime_two.irrational_sqrt\n#align irrational_sqrt_two irrational_sqrt_two\n\n",
 "irrational_sqrt_rat_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem irrational_sqrt_rat_iff (q : exprℚ) : irrational (sqrt q) ↔ Rat.sqrt q * Rat.sqrt q ≠ q ∧ 0 ≤ q :=\n  if H1 : Rat.sqrt q * Rat.sqrt q = q then\n    iff_of_false\n      (not_not_intro\n        ⟨Rat.sqrt q, by\n          rw [← H1, cast_mul, sqrt_mul_self (cast_nonneg.2 <| Rat.sqrt_nonneg q), sqrt_eq,\n            abs_of_nonneg (Rat.sqrt_nonneg q)]⟩)\n      fun h => h.1 H1\n  else\n    if H2 : 0 ≤ q then\n      iff_of_true\n        (fun ⟨r, hr⟩ =>\n          H1 <|\n            (exists_mul_self _).1\n              ⟨r, by\n                rwa [eq_comm, sqrt_eq_iff_mul_self_eq (cast_nonneg.2 H2), ← cast_mul, Rat.cast_inj] at hr <;>\n                    rw [← hr] <;>\n                  exact real.sqrt_nonneg _⟩)\n        ⟨H1, H2⟩\n    else\n      iff_of_false\n        (not_not_intro\n          ⟨0, by rw [cast_zero] <;> exact (sqrt_eq_zero_of_nonpos (Rat.cast_nonpos.2 <| le_of_not_le H2)).symm⟩)\n        fun h => H2 h.2\n#align irrational_sqrt_rat_iff irrational_sqrt_rat_iff\n\n",
 "irrational_sqrt_of_multiplicity_odd":
 "theorem irrational_sqrt_of_multiplicity_odd (m : ℤ) (hm : 0 < m) (p : ℕ) [hp : fact p.prime]\n    (Hpv : (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one, (ne_of_lt hm).symm⟩) % 2 = 1) :\n    irrational (sqrt m) :=\n  @irrational_nrt_of_n_not_dvd_multiplicity _ 2 _ (ne.symm (ne_of_lt hm)) p hp\n    (sq_sqrt (Int.cast_nonneg.2 <| le_of_lt hm)) (by rw [Hpv] <;> exact one_ne_zero)\n#align irrational_sqrt_of_multiplicity_odd irrational_sqrt_of_multiplicity_odd\n\n",
 "irrational_sqrt":
 "theorem nat.prime.irrational_sqrt {p : ℕ} (hp : Nat.Prime p) : irrational (sqrt p) :=\n  @irrational_sqrt_of_multiplicity_odd p (Int.coe_nat_pos.2 hp.pos) p ⟨hp⟩ <| by\n    simp [multiplicity_self (mt isUnit_iff_dvd_one.1 (mt Int.coe_nat_dvd.1 hp.not_dvd_one) : _)] <;> rfl\n#align nat.prime.irrational_sqrt nat.prime.irrational_sqrt\n\n",
 "irrational_rat_sub_iff":
 "@[simp]\ntheorem irrational_rat_sub_iff : irrational (q - x) ↔ irrational x :=\n  ⟨of_rat_sub q, rat_sub q⟩\n#align irrational_rat_sub_iff irrational_rat_sub_iff\n\n",
 "irrational_rat_mul_iff":
 "@[simp]\ntheorem irrational_rat_mul_iff : irrational (q * x) ↔ q ≠ 0 ∧ irrational x :=\n  ⟨fun h => ⟨Rat.cast_ne_zero.1 <| left_ne_zero_of_mul h.ne_zero, h.of_rat_mul q⟩, fun h => h.2.rat_mul h.1⟩\n#align irrational_rat_mul_iff irrational_rat_mul_iff\n\n",
 "irrational_rat_div_iff":
 "@[simp]\ntheorem irrational_rat_div_iff : irrational (q / x) ↔ q ≠ 0 ∧ irrational x := by simp [div_eq_mul_inv]\n#align irrational_rat_div_iff irrational_rat_div_iff\n\n",
 "irrational_rat_add_iff":
 "@[simp]\ntheorem irrational_rat_add_iff : irrational (q + x) ↔ irrational x :=\n  ⟨of_rat_add q, rat_add q⟩\n#align irrational_rat_add_iff irrational_rat_add_iff\n\n",
 "irrational_nrt_of_notint_nrt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\n`x` is irrational. -/\ntheorem irrational_nrt_of_notint_nrt {x : exprℝ} (n : ℕ) (m : ℤ) (hxr : x ^ n = m) (hv : ¬∃ y : ℤ, x = y)\n    (hnpos : 0 < n) : irrational x := by\n  rintro ⟨⟨N, D, P, C⟩, rfl⟩\n  rw [← cast_pow] at hxr\n  have c1 : ((D : ℤ) : exprℝ) ≠ 0 := by\n    rw [Int.cast_ne_zero, Int.coe_nat_ne_zero]\n    exact ne_of_gt P\n  have c2 : ((D : ℤ) : exprℝ) ^ n ≠ 0 := pow_ne_zero _ c1\n  rw [num_denom', cast_pow, cast_mk, div_pow, div_eq_iff_mul_eq c2, ← Int.cast_pow, ← Int.cast_pow, ← Int.cast_mul,\n    Int.cast_inj] at hxr\n  have hdivn : ↑D ^ n ∣ N ^ n := Dvd.intro_left m hxr\n  rw [← Int.dvd_natAbs, ← Int.coe_nat_pow, Int.coe_nat_dvd, Int.natAbs_pow, Nat.pow_dvd_pow_iff hnpos] at hdivn\n  obtain rfl : D = 1 := by rw [← nat.gcd_eq_right hdivn, C.gcd_eq_one]\n  refine' hv ⟨N, _⟩\n  rw [num_denom', Int.ofNat_one, mk_eq_div, Int.cast_one, div_one, cast_coe_int]\n#align irrational_nrt_of_notint_nrt irrational_nrt_of_notint_nrt\n\n",
 "irrational_nrt_of_n_not_dvd_multiplicity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If `x^n = m` is an integer and `n` does not divide the `multiplicity p m`, then `x`\nis irrational. -/\ntheorem irrational_nrt_of_n_not_dvd_multiplicity {x : exprℝ} (n : ℕ) {m : ℤ} (hm : m ≠ 0) (p : ℕ) [hp : fact p.prime]\n    (hxr : x ^ n = m) (hv : (multiplicity (p : ℤ) m).get (finite_int_iff.2 ⟨hp.1.ne_one, hm⟩) % n ≠ 0) : irrational x :=\n  by\n  rcases nat.eq_zero_or_pos n with (rfl | hnpos)\n  · rw [eq_comm, pow_zero, ← Int.cast_one, Int.cast_inj] at hxr\n    simpa [hxr, multiplicity.one_right (mt isUnit_iff_dvd_one.1 (mt Int.coe_nat_dvd.1 hp.1.not_dvd_one)),\n      nat.zero_mod] using hv\n  refine' irrational_nrt_of_notint_nrt _ _ hxr _ hnpos\n  rintro ⟨y, rfl⟩\n  rw [← Int.cast_pow, Int.cast_inj] at hxr\n  subst m\n  have : y ≠ 0 := by\n    rintro rfl\n    rw [zero_pow hnpos] at hm\n    exact hm rfl\n  erw [multiplicity.pow' (Nat.prime_iff_prime_int.1 hp.1) (finite_int_iff.2 ⟨hp.1.ne_one, this⟩), nat.mul_mod_right] at\n    hv\n  exact hv rfl\n#align irrational_nrt_of_n_not_dvd_multiplicity irrational_nrt_of_n_not_dvd_multiplicity\n\n",
 "irrational_neg_iff":
 "@[simp]\ntheorem irrational_neg_iff : irrational (-x) ↔ irrational x :=\n  ⟨of_neg, irrational.neg⟩\n#align irrational_neg_iff irrational_neg_iff\n\n",
 "irrational_nat_sub_iff":
 "@[simp]\ntheorem irrational_nat_sub_iff : irrational (n - x) ↔ irrational x :=\n  ⟨of_nat_sub n, fun h => h.nat_sub n⟩\n#align irrational_nat_sub_iff irrational_nat_sub_iff\n\n",
 "irrational_nat_mul_iff":
 "@[simp]\ntheorem irrational_nat_mul_iff : irrational (n * x) ↔ n ≠ 0 ∧ irrational x := by\n  rw [← cast_coe_nat, irrational_rat_mul_iff, Nat.cast_ne_zero]\n#align irrational_nat_mul_iff irrational_nat_mul_iff\n\n",
 "irrational_nat_div_iff":
 "@[simp]\ntheorem irrational_nat_div_iff : irrational (n / x) ↔ n ≠ 0 ∧ irrational x := by simp [div_eq_mul_inv]\n#align irrational_nat_div_iff irrational_nat_div_iff\n\n",
 "irrational_nat_add_iff":
 "@[simp]\ntheorem irrational_nat_add_iff : irrational (n + x) ↔ irrational x :=\n  ⟨of_nat_add n, fun h => h.nat_add n⟩\n#align irrational_nat_add_iff irrational_nat_add_iff\n\n",
 "irrational_mul_rat_iff":
 "@[simp]\ntheorem irrational_mul_rat_iff : irrational (x * q) ↔ q ≠ 0 ∧ irrational x := by rw [mul_comm, irrational_rat_mul_iff]\n#align irrational_mul_rat_iff irrational_mul_rat_iff\n\n",
 "irrational_mul_nat_iff":
 "@[simp]\ntheorem irrational_mul_nat_iff : irrational (x * n) ↔ n ≠ 0 ∧ irrational x := by\n  rw [← cast_coe_nat, irrational_mul_rat_iff, Nat.cast_ne_zero]\n#align irrational_mul_nat_iff irrational_mul_nat_iff\n\n",
 "irrational_mul_int_iff":
 "@[simp]\ntheorem irrational_mul_int_iff : irrational (x * m) ↔ m ≠ 0 ∧ irrational x := by\n  rw [← cast_coe_int, irrational_mul_rat_iff, Int.cast_ne_zero]\n#align irrational_mul_int_iff irrational_mul_int_iff\n\n",
 "irrational_inv_iff":
 "@[simp]\ntheorem irrational_inv_iff : irrational x⁻¹ ↔ irrational x :=\n  ⟨of_inv, irrational.inv⟩\n#align irrational_inv_iff irrational_inv_iff\n\n",
 "irrational_int_sub_iff":
 "@[simp]\ntheorem irrational_int_sub_iff : irrational (m - x) ↔ irrational x :=\n  ⟨of_int_sub m, fun h => h.int_sub m⟩\n#align irrational_int_sub_iff irrational_int_sub_iff\n\n",
 "irrational_int_mul_iff":
 "@[simp]\ntheorem irrational_int_mul_iff : irrational (m * x) ↔ m ≠ 0 ∧ irrational x := by\n  rw [← cast_coe_int, irrational_rat_mul_iff, Int.cast_ne_zero]\n#align irrational_int_mul_iff irrational_int_mul_iff\n\n",
 "irrational_int_div_iff":
 "@[simp]\ntheorem irrational_int_div_iff : irrational (m / x) ↔ m ≠ 0 ∧ irrational x := by simp [div_eq_mul_inv]\n#align irrational_int_div_iff irrational_int_div_iff\n\n",
 "irrational_int_add_iff":
 "@[simp]\ntheorem irrational_int_add_iff : irrational (m + x) ↔ irrational x :=\n  ⟨of_int_add m, fun h => h.int_add m⟩\n#align irrational_int_add_iff irrational_int_add_iff\n\n",
 "irrational_iff_ne_rational":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Abhimanyu Pallavi Sudhir, Jean Lo, Calle Sönne, Yury Kudryashov\n-/\ntheorem irrational_iff_ne_rational (x : exprℝ) : irrational x ↔ ∀ a b : ℤ, x ≠ a / b := by\n  simp only [irrational, Rat.forall, cast_mk, not_exists, Set.mem_range, cast_coe_int, cast_div, eq_comm]\n#align irrational_iff_ne_rational irrational_iff_ne_rational\n\n",
 "irrational_div_rat_iff":
 "@[simp]\ntheorem irrational_div_rat_iff : irrational (x / q) ↔ q ≠ 0 ∧ irrational x := by\n  rw [div_eq_mul_inv, ← cast_inv, irrational_mul_rat_iff, ne.def, inv_eq_zero]\n#align irrational_div_rat_iff irrational_div_rat_iff\n\n",
 "irrational_div_nat_iff":
 "@[simp]\ntheorem irrational_div_nat_iff : irrational (x / n) ↔ n ≠ 0 ∧ irrational x := by\n  rw [← cast_coe_nat, irrational_div_rat_iff, Nat.cast_ne_zero]\n#align irrational_div_nat_iff irrational_div_nat_iff\n\n",
 "irrational_div_int_iff":
 "@[simp]\ntheorem irrational_div_int_iff : irrational (x / m) ↔ m ≠ 0 ∧ irrational x := by\n  rw [← cast_coe_int, irrational_div_rat_iff, Int.cast_ne_zero]\n#align irrational_div_int_iff irrational_div_int_iff\n\n",
 "irrational_add_rat_iff":
 "@[simp]\ntheorem irrational_add_rat_iff : irrational (x + q) ↔ irrational x :=\n  ⟨of_add_rat q, add_rat q⟩\n#align irrational_add_rat_iff irrational_add_rat_iff\n\n",
 "irrational_add_nat_iff":
 "@[simp]\ntheorem irrational_add_nat_iff : irrational (x + n) ↔ irrational x :=\n  ⟨of_add_nat n, fun h => h.add_nat n⟩\n#align irrational_add_nat_iff irrational_add_nat_iff\n\n",
 "irrational_add_int_iff":
 "@[simp]\ntheorem irrational_add_int_iff : irrational (x + m) ↔ irrational x :=\n  ⟨of_add_int m, fun h => h.add_int m⟩\n#align irrational_add_int_iff irrational_add_int_iff\n\n",
 "irrational":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- A transcendental real number is irrational. -/\ntheorem transcendental.irrational {r : exprℝ} (tr : transcendental (exprℚ) r) : irrational r :=\n  by\n  rintro ⟨a, rfl⟩\n  exact tr (is_algebraic_algebra_map a)\n#align transcendental.irrational transcendental.irrational\n\n",
 "inv":
 "protected theorem inv (h : irrational x) : irrational x⁻¹ :=\n  of_inv <| by rwa [inv_inv]\n#align inv inv\n\n",
 "int_sub":
 "theorem int_sub (h : irrational x) (m : ℤ) : irrational (m - x) := by simpa only [Rat.cast_coe_int] using h.rat_sub m\n#align int_sub int_sub\n\n",
 "int_mul":
 "theorem int_mul (h : irrational x) {m : ℤ} (hm : m ≠ 0) : irrational (m * x) :=\n  mul_comm x m ▸ h.mul_int hm\n#align int_mul int_mul\n\n",
 "int_div":
 "theorem int_div (h : irrational x) {m : ℤ} (hm : m ≠ 0) : irrational (m / x) :=\n  h.inv.int_mul hm\n#align int_div int_div\n\n",
 "int_add":
 "theorem int_add (h : irrational x) (m : ℤ) : irrational (m + x) :=\n  by\n  rw [← cast_coe_int]\n  exact h.rat_add m\n#align int_add int_add\n\n",
 "exists_irrational_btwn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem exists_irrational_btwn {x y : exprℝ} (h : x < y) : ∃ r, irrational r ∧ x < r ∧ r < y :=\n  let ⟨q, ⟨hq1, hq2⟩⟩ := exists_rat_btwn ((sub_lt_sub_iff_right (real.sqrt 2)).mpr h)\n  ⟨q + real.sqrt 2, irrational_sqrt_two.rat_add _, sub_lt_iff_lt_add.mp hq1, lt_sub_iff_add_lt.mp hq2⟩\n#align exists_irrational_btwn exists_irrational_btwn\n\n",
 "div_rat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem div_rat (h : irrational x) {q : exprℚ} (hq : q ≠ 0) : irrational (x / q) :=\n  by\n  rw [div_eq_mul_inv, ← cast_inv]\n  exact h.mul_rat (inv_ne_zero hq)\n#align div_rat div_rat\n\n",
 "div_nat":
 "theorem div_nat (h : irrational x) {m : ℕ} (hm : m ≠ 0) : irrational (x / m) :=\n  h.div_int <| by rwa [Int.coe_nat_ne_zero]\n#align div_nat div_nat\n\n",
 "div_int":
 "theorem div_int (h : irrational x) {m : ℤ} (hm : m ≠ 0) : irrational (x / m) :=\n  by\n  rw [← cast_coe_int]\n  refine' h.div_rat _\n  rwa [Int.cast_ne_zero]\n#align div_int div_int\n\n",
 "div_cases":
 "theorem div_cases (h : irrational (x / y)) : irrational x ∨ irrational y :=\n  h.mul_cases.imp id of_inv\n#align div_cases div_cases\n\n",
 "add_rat":
 "theorem add_rat (h : irrational x) : irrational (x + q) :=\n  add_comm (↑q) x ▸ h.rat_add q\n#align add_rat add_rat\n\n",
 "add_nat":
 "theorem add_nat (h : irrational x) (m : ℕ) : irrational (x + m) :=\n  h.add_int m\n#align add_nat add_nat\n\n",
 "add_int":
 "theorem add_int (h : irrational x) (m : ℤ) : irrational (x + m) :=\n  add_comm (↑m) x ▸ h.int_add m\n#align add_int add_int\n\n",
 "add_cases":
 "/-- If `x + y` is irrational, then at least one of `x` and `y` is irrational. -/\ntheorem add_cases : irrational (x + y) → irrational x ∨ irrational y :=\n  by\n  delta irrational\n  contrapose!\n  rintro ⟨⟨rx, rfl⟩, ⟨ry, rfl⟩⟩\n  exact ⟨rx + ry, cast_add rx ry⟩\n#align add_cases add_cases\n\n"}