{"nodup_to_list":
 "@[simp]\ntheorem nodup_to_list [FinEnum α] : List.Nodup (toList α) := by\n  simp [to_list] <;> apply List.Nodup.map <;> [apply Equiv.injective, apply List.nodup_finRange]\n#align nodup_to_list nodup_to_list\n\n",
 "mem_to_list":
 "/-\nCopyright (c) 2019 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\n@[simp]\ntheorem mem_to_list [FinEnum α] (x : α) : x ∈ toList α := by simp [to_list] <;> exists Equiv α x <;> simp\n#align mem_to_list mem_to_list\n\n",
 "mem_pi":
 "theorem mem_pi {β : α → Type max u v} [FinEnum α] [∀ a, FinEnum (β a)] (xs : List α) (f : ∀ a, a ∈ xs → β a) :\n    f ∈ pi xs fun x => toList (β x) :=\n  by\n  induction xs <;> simp [pi, -List.map_eq_map, monad_norm, functor_norm]\n  · ext (a⟨⟩)\n  · exists pi.cons xs_hd xs_tl (f _ (list.mem_cons_self _ _))\n    constructor\n    exact ⟨_, rfl⟩\n    exists pi.tail f\n    constructor\n    · apply xs_ih\n    · ext (x h)\n      simp [pi.cons]\n      split_ifs\n      subst x\n      rfl\n      rfl\n#align mem_pi mem_pi\n\n",
 "mem_enum":
 "theorem pi.mem_enum {β : α → Type max u v} [FinEnum α] [∀ a, FinEnum (β a)] (f : ∀ a, β a) : f ∈ pi.enum β := by\n  simp [pi.enum] <;> refine' ⟨fun a h => f a, mem_pi _ _, rfl⟩\n#align pi.mem_enum pi.mem_enum\n\n"}