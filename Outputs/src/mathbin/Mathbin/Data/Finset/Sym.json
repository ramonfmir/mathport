{"sym_zero":
 "@[simp]\ntheorem sym_zero : s.sym 0 = {∅} :=\n  rfl\n#align sym_zero sym_zero\n\n",
 "sym_univ":
 "@[simp]\ntheorem sym_univ [Fintype α] (n : ℕ) : (univ : Finset α).sym n = univ :=\n  eq_univ_iff_forall.2 fun s => mem_sym_iff.2 fun a _ => mem_univ _\n#align sym_univ sym_univ\n\n",
 "sym_union":
 "@[simp]\ntheorem sym_union (s t : Finset α) (n : ℕ) : s.sym n ∪ t.sym n ⊆ (s ∪ t).sym n :=\n  union_subset (sym_mono (subset_union_left s t) n) (sym_mono (subset_union_right s t) n)\n#align sym_union sym_union\n\n",
 "sym_succ":
 "@[simp]\ntheorem sym_succ : s.sym (n + 1) = s.sup fun a => (s.sym n).image <| Sym.cons a :=\n  rfl\n#align sym_succ sym_succ\n\n",
 "sym_singleton":
 "@[simp]\ntheorem sym_singleton (a : α) (n : ℕ) : ({a} : Finset α).sym n = {Sym.replicate n a} :=\n  eq_singleton_iff_unique_mem.2\n    ⟨replicate_mem_sym (mem_singleton.2 rfl) _, fun s hs =>\n      Sym.eq_replicate_iff.2 fun b hb => eq_of_mem_singleton <| mem_sym_iff.1 hs _ hb⟩\n#align sym_singleton sym_singleton\n\n",
 "sym_nonempty":
 "@[simp]\ntheorem sym_nonempty : (s.sym n).nonempty ↔ n = 0 ∨ s.nonempty := by\n  simp_rw [nonempty_iff_ne_empty, ne.def, sym_eq_empty, not_and_or, not_ne_iff]\n#align sym_nonempty sym_nonempty\n\n",
 "sym_mono":
 "@[simp]\ntheorem sym_mono (h : s ⊆ t) (n : ℕ) : s.sym n ⊆ t.sym n := fun m hm =>\n  mem_sym_iff.2 fun a ha => h <| mem_sym_iff.1 hm _ ha\n#align sym_mono sym_mono\n\n",
 "sym_inter":
 "@[simp]\ntheorem sym_inter (s t : Finset α) (n : ℕ) : (s ∩ t).sym n = s.sym n ∩ t.sym n :=\n  by\n  ext m\n  simp only [mem_inter, mem_sym_iff, imp_and, forall_and]\n#align sym_inter sym_inter\n\n",
 "sym_filter_ne_mem":
 "theorem sym_filter_ne_mem (a : α) (h : m ∈ s.sym n) : (m.filter_ne a).2 ∈ (s.erase a).sym (n - (m.filter_ne a).1) :=\n  mem_sym_iff.2 fun b H => mem_erase.2 <| (Multiset.mem_filter.1 H).symm.imp ne.symm <| mem_sym_iff.1 h b\n#align sym_filter_ne_mem sym_filter_ne_mem\n\n",
 "sym_fill_mem":
 "theorem sym_fill_mem (a : α) {i : Fin (n + 1)} {m : Sym α (n - i)} (h : m ∈ s.sym (n - i)) :\n    m.fill a i ∈ (insert a s).sym n :=\n  mem_sym_iff.2 fun b hb => mem_insert.2 <| (Sym.mem_fill_iff.1 hb).imp And.right <| mem_sym_iff.1 h b\n#align sym_fill_mem sym_fill_mem\n\n",
 "sym_eq_empty":
 "@[simp]\ntheorem sym_eq_empty : s.sym n = ∅ ↔ n ≠ 0 ∧ s = ∅ := by\n  cases n\n  · exact iff_of_false (singleton_ne_empty _) fun h => (h.1 rfl).elim\n  · refine' ⟨fun h => ⟨n.succ_ne_zero, eq_empty_of_sym_eq_empty h⟩, _⟩\n    rintro ⟨_, rfl⟩\n    exact sym_empty _\n#align sym_eq_empty sym_eq_empty\n\n",
 "sym_empty":
 "@[simp]\ntheorem sym_empty (n : ℕ) : (∅ : Finset α).sym (n + 1) = ∅ :=\n  rfl\n#align sym_empty sym_empty\n\n",
 "sym2_univ":
 "@[simp]\ntheorem sym2_univ [Fintype α] : (univ : Finset α).sym2 = univ :=\n  rfl\n#align sym2_univ sym2_univ\n\n",
 "sym2_singleton":
 "@[simp]\ntheorem sym2_singleton (a : α) : ({a} : Finset α).sym2 = {Sym2.diag a} := by\n  rw [Finset.sym2, singleton_product_singleton, image_singleton, Sym2.diag]\n#align sym2_singleton sym2_singleton\n\n",
 "sym2_nonempty":
 "@[simp]\ntheorem sym2_nonempty : s.sym2.nonempty ↔ s.nonempty := by\n  rw [Finset.sym2, nonempty.image_iff, nonempty_product, and_self_iff]\n#align sym2_nonempty sym2_nonempty\n\n",
 "sym2_mono":
 "@[simp]\ntheorem sym2_mono (h : s ⊆ t) : s.sym2 ⊆ t.sym2 := fun m he => mem_sym2_iff.2 fun a ha => h <| mem_sym2_iff.1 he _ ha\n#align sym2_mono sym2_mono\n\n",
 "sym2_eq_empty":
 "@[simp]\ntheorem sym2_eq_empty : s.sym2 = ∅ ↔ s = ∅ := by rw [Finset.sym2, image_eq_empty, product_eq_empty, or_self_iff]\n#align sym2_eq_empty sym2_eq_empty\n\n",
 "sym2_empty":
 "@[simp]\ntheorem sym2_empty : (∅ : Finset α).sym2 = ∅ :=\n  rfl\n#align sym2_empty sym2_empty\n\n",
 "sym":
 "protected theorem nonempty.sym (h : s.nonempty) (n : ℕ) : (s.sym n).nonempty :=\n  let ⟨a, ha⟩ := h\n  ⟨_, replicate_mem_sym ha n⟩\n#align nonempty.sym nonempty.sym\n\n",
 "replicate_mem_sym":
 "theorem replicate_mem_sym (ha : a ∈ s) (n : ℕ) : Sym.replicate n a ∈ s.sym n :=\n  mem_sym_iff.2 fun b hb => by rwa [(Sym.mem_replicate.1 hb).2]\n#align replicate_mem_sym replicate_mem_sym\n\n",
 "not_is_diag_mk_of_mem_off_diag":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem not_is_diag_mk_of_mem_off_diag {a : α × α} (h : a ∈ s.off_diag) : ¬Sym2.IsDiag («expr⟦ ⟧» a) :=\n  by\n  rw [Sym2.isDiag_iff_proj_eq]\n  exact (mem_off_diag.1 h).2.2\n#align not_is_diag_mk_of_mem_off_diag not_is_diag_mk_of_mem_off_diag\n\n",
 "mk_mem_sym2_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem mk_mem_sym2_iff : «expr⟦ ⟧» (a, b) ∈ s.sym2 ↔ a ∈ s ∧ b ∈ s := by rw [mem_sym2_iff, Sym2.ball]\n#align mk_mem_sym2_iff mk_mem_sym2_iff\n\n",
 "mem_sym_iff":
 "@[simp]\ntheorem mem_sym_iff : m ∈ s.sym n ↔ ∀ a ∈ m, a ∈ s :=\n  by\n  induction' n with n ih\n  · refine' mem_singleton.trans ⟨_, fun _ => Sym.eq_nil_of_card_zero _⟩\n    rintro rfl\n    exact fun a ha => ha.elim\n  refine' mem_sup.trans ⟨_, fun h => _⟩\n  · rintro ⟨a, ha, he⟩ b hb\n    rw [mem_image] at he\n    obtain ⟨m, he, rfl⟩ := he\n    rw [Sym.mem_cons] at hb\n    obtain rfl | hb := hb\n    · exact ha\n    · exact ih.1 he _ hb\n  · obtain ⟨a, m, rfl⟩ := m.exists_eq_cons_of_succ\n    exact ⟨a, h _ <| Sym.mem_cons_self _ _, mem_image_of_mem _ <| ih.2 fun b hb => h _ <| Sym.mem_cons_of_mem hb⟩\n#align mem_sym_iff mem_sym_iff\n\n",
 "mem_sym2_iff":
 "@[simp]\ntheorem mem_sym2_iff : m ∈ s.sym2 ↔ ∀ a ∈ m, a ∈ s :=\n  by\n  refine' mem_image.trans ⟨_, fun h => ⟨m.out, mem_product.2 ⟨h _ m.out_fst_mem, h _ m.out_snd_mem⟩, m.out_eq⟩⟩\n  rintro ⟨⟨a, b⟩, h, rfl⟩\n  rw [Sym2.ball]\n  rwa [mem_product] at h\n#align mem_sym2_iff mem_sym2_iff\n\n",
 "is_diag_mk_of_mem_diag":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem is_diag_mk_of_mem_diag {a : α × α} (h : a ∈ s.diag) : Sym2.IsDiag («expr⟦ ⟧» a) :=\n  (Sym2.isDiag_iff_proj_eq _).2 (mem_diag.1 h).2\n#align is_diag_mk_of_mem_diag is_diag_mk_of_mem_diag\n\n",
 "image_diag_union_image_off_diag":
 "theorem image_diag_union_image_off_diag : s.diag.image Quotient.mk' ∪ s.off_diag.image Quotient.mk' = s.sym2 :=\n  by\n  rw [← image_union, diag_union_off_diag]\n  rfl\n#align image_diag_union_image_off_diag image_diag_union_image_off_diag\n\n",
 "eq_empty_of_sym_eq_empty":
 "theorem eq_empty_of_sym_eq_empty (h : s.sym n = ∅) : s = ∅ :=\n  by\n  rw [← not_nonempty_iff_eq_empty] at h⊢\n  exact fun hs => h (hs.sym _)\n#align eq_empty_of_sym_eq_empty eq_empty_of_sym_eq_empty\n\n",
 "diag_mem_sym2_iff":
 "@[simp]\ntheorem diag_mem_sym2_iff : Sym2.diag a ∈ s.sym2 ↔ a ∈ s :=\n  mk'_mem_sym2_iff.trans <| and_self_iff _\n#align diag_mem_sym2_iff diag_mem_sym2_iff\n\n"}