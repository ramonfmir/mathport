{"to_finset_some":
 "@[simp]\ntheorem to_finset_some {a : α} : (some a).to_finset = {a} :=\n  rfl\n#align to_finset_some to_finset_some\n\n",
 "to_finset_none":
 "/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov, Mario Carneiro, Sean Leather\n-/\n@[simp]\ntheorem to_finset_none : none.to_finset = (∅ : Finset α) :=\n  rfl\n#align to_finset_none to_finset_none\n\n",
 "some_mem_insert_none":
 "theorem some_mem_insert_none {s : Finset α} {a : α} : some a ∈ s.insert_none ↔ a ∈ s := by simp\n#align some_mem_insert_none some_mem_insert_none\n\n",
 "mem_to_finset":
 "@[simp]\ntheorem mem_to_finset {a : α} {o : Option α} : a ∈ o.to_finset ↔ a ∈ o := by cases o <;> simp [eq_comm]\n#align mem_to_finset mem_to_finset\n\n",
 "mem_insert_none":
 "/-⟨none ::ₘ s.1.map some, multiset.nodup_cons.2\n  ⟨by simp, s.nodup.map $ λ a b, option.some.inj⟩⟩-/\n@[simp]\ntheorem mem_insert_none {s : Finset α} : ∀ {o : Option α}, o ∈ s.insert_none ↔ ∀ a ∈ o, a ∈ s\n  | none => iff_of_true (Multiset.mem_cons_self _ _) fun a h => by cases h\n  | some a => Multiset.mem_cons.trans <| by simp <;> rfl\n#align mem_insert_none mem_insert_none\n\n",
 "mem_erase_none":
 "@[simp]\ntheorem mem_erase_none {s : Finset (Option α)} {x : α} : x ∈ s.erase_none ↔ some x ∈ s := by simp [erase_none]\n#align mem_erase_none mem_erase_none\n\n",
 "map_some_erase_none":
 "@[simp]\ntheorem map_some_erase_none [DecidableEq (Option α)] (s : Finset (Option α)) :\n    s.erase_none.map Embedding.some = s.erase none := by rw [map_eq_image, embedding.some_apply, image_some_erase_none]\n#align map_some_erase_none map_some_erase_none\n\n",
 "insert_none_erase_none":
 "@[simp]\ntheorem insert_none_erase_none [DecidableEq (Option α)] (s : Finset (Option α)) :\n    insertNone (eraseNone s) = insert none s := by ext (_ | x) <;> simp\n#align insert_none_erase_none insert_none_erase_none\n\n",
 "image_some_erase_none":
 "@[simp]\ntheorem image_some_erase_none [DecidableEq (Option α)] (s : Finset (Option α)) :\n    s.erase_none.image some = s.erase none := by ext (_ | x) <;> simp\n#align image_some_erase_none image_some_erase_none\n\n",
 "erase_none_union":
 "@[simp]\ntheorem erase_none_union [DecidableEq (Option α)] [DecidableEq α] (s t : Finset (Option α)) :\n    (s ∪ t).erase_none = s.erase_none ∪ t.erase_none := by\n  ext\n  simp\n#align erase_none_union erase_none_union\n\n",
 "erase_none_none":
 "@[simp]\ntheorem erase_none_none : ({none} : Finset (Option α)).erase_none = ∅ :=\n  by\n  ext\n  simp\n#align erase_none_none erase_none_none\n\n",
 "erase_none_map_some":
 "@[simp]\ntheorem erase_none_map_some (s : Finset α) : (s.map Embedding.some).erase_none = s :=\n  by\n  ext\n  simp\n#align erase_none_map_some erase_none_map_some\n\n",
 "erase_none_inter":
 "@[simp]\ntheorem erase_none_inter [DecidableEq (Option α)] [DecidableEq α] (s t : Finset (Option α)) :\n    (s ∩ t).erase_none = s.erase_none ∩ t.erase_none := by\n  ext\n  simp\n#align erase_none_inter erase_none_inter\n\n",
 "erase_none_insert_none":
 "@[simp]\ntheorem erase_none_insert_none (s : Finset α) : eraseNone (insertNone s) = s :=\n  by\n  ext\n  simp\n#align erase_none_insert_none erase_none_insert_none\n\n",
 "erase_none_image_some":
 "@[simp]\ntheorem erase_none_image_some [DecidableEq (Option α)] (s : Finset α) : (s.image some).erase_none = s := by\n  simpa only [map_eq_image] using erase_none_map_some s\n#align erase_none_image_some erase_none_image_some\n\n",
 "erase_none_eq_bUnion":
 "theorem erase_none_eq_bUnion [DecidableEq α] (s : Finset (Option α)) : s.erase_none = s.bUnion Option.toFinset :=\n  by\n  ext\n  simp\n#align erase_none_eq_bUnion erase_none_eq_bUnion\n\n",
 "erase_none_empty":
 "@[simp]\ntheorem erase_none_empty : (∅ : Finset (Option α)).erase_none = ∅ :=\n  by\n  ext\n  simp\n#align erase_none_empty erase_none_empty\n\n",
 "coe_erase_none":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem coe_erase_none (s : Finset (Option α)) : (s.erase_none : Set α) = «expr ⁻¹' » some s :=\n  Set.ext fun x => mem_eraseNone\n#align coe_erase_none coe_erase_none\n\n",
 "card_to_finset":
 "theorem card_to_finset (o : Option α) : o.to_finset.card = o.elim 0 1 := by cases o <;> rfl\n#align card_to_finset card_to_finset\n\n",
 "card_insert_none":
 "@[simp]\ntheorem card_insert_none (s : Finset α) : s.insert_none.card = s.card + 1 := by simp [insert_none]\n#align card_insert_none card_insert_none\n\n"}