{"swap_mem_mul_antidiagonal":
 "@[simp, to_additive]\ntheorem swap_mem_mul_antidiagonal : x.swap ∈ finset.mul_antidiagonal hs ht a ↔ x ∈ finset.mul_antidiagonal ht hs a := by\n  simp [mul_comm, and_left_comm]\n#align swap_mem_mul_antidiagonal swap_mem_mul_antidiagonal\n\n",
 "support_mul_antidiagonal_subset_mul":
 "@[to_additive]\ntheorem support_mul_antidiagonal_subset_mul : { a | (mul_antidiagonal hs ht a).nonempty } ⊆ s * t := fun a ⟨b, hb⟩ =>\n  by\n  rw [mem_mul_antidiagonal] at hb\n  exact ⟨b.1, b.2, hb⟩\n#align support_mul_antidiagonal_subset_mul support_mul_antidiagonal_subset_mul\n\n",
 "mul_antidiagonal_mono_right":
 "@[to_additive]\ntheorem mul_antidiagonal_mono_right (h : u ⊆ t) : mul_antidiagonal hs hu a ⊆ mul_antidiagonal hs ht a :=\n  set.finite.to_finset_mono <| set.mul_antidiagonal_mono_right h\n#align mul_antidiagonal_mono_right mul_antidiagonal_mono_right\n\n",
 "mul_antidiagonal_mono_left":
 "@[to_additive]\ntheorem mul_antidiagonal_mono_left (h : u ⊆ s) : mul_antidiagonal hu ht a ⊆ mul_antidiagonal hs ht a :=\n  set.finite.to_finset_mono <| set.mul_antidiagonal_mono_left h\n#align mul_antidiagonal_mono_left mul_antidiagonal_mono_left\n\n",
 "mul_antidiagonal_min_mul_min":
 "@[to_additive]\ntheorem mul_antidiagonal_min_mul_min {α} [LinearOrderedCancelCommMonoid α] {s t : set α} (hs : s.is_wf) (ht : t.is_wf)\n    (hns : s.nonempty) (hnt : t.nonempty) :\n    mul_antidiagonal hs.is_pwo ht.is_pwo (hs.min hns * ht.min hnt) = {(hs hns, ht hnt)} :=\n  by\n  ext ⟨a, b⟩\n  simp only [mem_mul_antidiagonal, mem_singleton, prod.ext_iff]\n  constructor\n  · rintro ⟨has, hat, hst⟩\n    obtain rfl := (hs.min_le hns has).eq_of_not_lt fun hlt => (mul_lt_mul_of_lt_of_le hlt <| ht.min_le hnt hat).ne' hst\n    exact ⟨rfl, mul_left_cancel hst⟩\n  · rintro ⟨rfl, rfl⟩\n    exact ⟨hs.min_mem _, ht.min_mem _, rfl⟩\n#align mul_antidiagonal_min_mul_min mul_antidiagonal_min_mul_min\n\n",
 "mul":
 "@[to_additive]\ntheorem is_wf.mul (hs : s.is_wf) (ht : t.is_wf) : is_wf (s * t) :=\n  (hs.is_pwo.mul ht.is_pwo).is_wf\n#align is_wf.mul is_wf.mul\n\n",
 "min_mul":
 "@[to_additive]\ntheorem is_wf.min_mul (hs : s.is_wf) (ht : t.is_wf) (hsn : s.nonempty) (htn : t.nonempty) :\n    (hs.mul ht).min (hsn.mul htn) = hs.min hsn * ht.min htn :=\n  by\n  refine' le_antisymm (is_wf.min_le _ _ (mem_mul.2 ⟨_, _, hs.min_mem _, ht.min_mem _, rfl⟩)) _\n  rw [is_wf.le_min_iff]\n  rintro _ ⟨x, y, hx, hy, rfl⟩\n  exact mul_le_mul' (hs.min_le _ hx) (ht.min_le _ hy)\n#align is_wf.min_mul is_wf.min_mul\n\n",
 "mem_mul_antidiagonal":
 "@[simp, to_additive]\ntheorem mem_mul_antidiagonal : x ∈ mul_antidiagonal hs ht a ↔ x.1 ∈ s ∧ x.2 ∈ t ∧ x.1 * x.2 = a := by\n  simp [mul_antidiagonal, and_rotate]\n#align mem_mul_antidiagonal mem_mul_antidiagonal\n\n",
 "is_pwo_support_mul_antidiagonal":
 "@[to_additive]\ntheorem is_pwo_support_mul_antidiagonal : { a | (mul_antidiagonal hs ht a).nonempty }.is_pwo :=\n  (hs.mul ht).mono support_mul_antidiagonal_subset_mul\n#align is_pwo_support_mul_antidiagonal is_pwo_support_mul_antidiagonal\n\n"}