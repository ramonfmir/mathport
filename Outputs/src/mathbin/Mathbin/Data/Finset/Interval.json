{"card_Ioo_finset":
 "/-- Cardinality of an `Ioo` of finsets. -/\ntheorem card_Ioo_finset (h : s ⊆ t) : (Ioo s t).card = 2 ^ (t.card - s.card) - 2 := by\n  rw [card_Ioo_eq_card_Icc_sub_two, card_Icc_finset h]\n#align card_Ioo_finset card_Ioo_finset\n\n",
 "card_Ioc_finset":
 "/-- Cardinality of an `Ioc` of finsets. -/\ntheorem card_Ioc_finset (h : s ⊆ t) : (Ioc s t).card = 2 ^ (t.card - s.card) - 1 := by\n  rw [card_Ioc_eq_card_Icc_sub_one, card_Icc_finset h]\n#align card_Ioc_finset card_Ioc_finset\n\n",
 "card_Iio_finset":
 "/-- Cardinality of an `Iio` of finsets. -/\ntheorem card_Iio_finset : (Iio s).card = 2 ^ s.card - 1 := by\n  rw [Iio_eq_ssubsets, ssubsets, card_erase_of_mem (mem_powerset_self _), card_powerset]\n#align card_Iio_finset card_Iio_finset\n\n",
 "card_Iic_finset":
 "/-- Cardinality of an `Iic` of finsets. -/\ntheorem card_Iic_finset : (Iic s).card = 2 ^ s.card := by rw [Iic_eq_powerset, card_powerset]\n#align card_Iic_finset card_Iic_finset\n\n",
 "card_Ico_finset":
 "/-- Cardinality of an `Ico` of finsets. -/\ntheorem card_Ico_finset (h : s ⊆ t) : (Ico s t).card = 2 ^ (t.card - s.card) - 1 := by\n  rw [card_Ico_eq_card_Icc_sub_one, card_Icc_finset h]\n#align card_Ico_finset card_Ico_finset\n\n",
 "card_Icc_finset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-- Cardinality of a non-empty `Icc` of finsets. -/\ntheorem card_Icc_finset (h : s ⊆ t) : (Icc s t).card = 2 ^ (t.card - s.card) :=\n  by\n  rw [← card_sdiff h, ← card_powerset, Icc_eq_image_powerset h, Finset.card_image_iff]\n  rintro u hu v hv (huv : «expr ⊔ » s u = «expr ⊔ » s v)\n  rw [mem_coe, mem_powerset] at hu hv\n  rw [← (disjoint_sdiff.mono_right hu : Disjoint s u).sup_sdiff_cancel_left, ←\n    (disjoint_sdiff.mono_right hv : Disjoint s v).sup_sdiff_cancel_left, huv]\n#align card_Icc_finset card_Icc_finset\n\n",
 "Ioo_eq_filter_ssubsets":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊂ » -/\ntheorem Ioo_eq_filter_ssubsets : Ioo s t = t.ssubsets.filter ((«expr ⊂ » · ·) s) :=\n  rfl\n#align Ioo_eq_filter_ssubsets Ioo_eq_filter_ssubsets\n\n",
 "Ioc_eq_filter_powerset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊂ » -/\ntheorem Ioc_eq_filter_powerset : Ioc s t = t.powerset.filter ((«expr ⊂ » · ·) s) :=\n  rfl\n#align Ioc_eq_filter_powerset Ioc_eq_filter_powerset\n\n",
 "Iio_eq_ssubsets":
 "theorem Iio_eq_ssubsets : Iio s = s.ssubsets :=\n  filter_true_of_mem fun t _ => empty_subset t\n#align Iio_eq_ssubsets Iio_eq_ssubsets\n\n",
 "Iic_eq_powerset":
 "theorem Iic_eq_powerset : Iic s = s.powerset :=\n  filter_true_of_mem fun t _ => empty_subset t\n#align Iic_eq_powerset Iic_eq_powerset\n\n",
 "Ico_eq_image_ssubsets":
 "theorem Ico_eq_image_ssubsets (h : s ⊆ t) : Ico s t = (t \\ s).ssubsets.image ((· ∪ ·) s) :=\n  by\n  ext u\n  simp_rw [mem_Ico, mem_image, exists_prop, mem_ssubsets]\n  constructor\n  · rintro ⟨hs, ht⟩\n    exact ⟨u \\ s, sdiff_lt_sdiff_right ht hs, sup_sdiff_cancel_right hs⟩\n  · rintro ⟨v, hv, rfl⟩\n    exact ⟨le_sup_left, sup_lt_of_lt_sdiff_left hv h⟩\n#align Ico_eq_image_ssubsets Ico_eq_image_ssubsets\n\n",
 "Ico_eq_filter_ssubsets":
 "theorem Ico_eq_filter_ssubsets : Ico s t = t.ssubsets.filter ((· ⊆ ·) s) :=\n  rfl\n#align Ico_eq_filter_ssubsets Ico_eq_filter_ssubsets\n\n",
 "Icc_eq_image_powerset":
 "theorem Icc_eq_image_powerset (h : s ⊆ t) : Icc s t = (t \\ s).powerset.image ((· ∪ ·) s) :=\n  by\n  ext u\n  simp_rw [mem_Icc, mem_image, exists_prop, mem_powerset]\n  constructor\n  · rintro ⟨hs, ht⟩\n    exact ⟨u \\ s, sdiff_le_sdiff_right ht, sup_sdiff_cancel_right hs⟩\n  · rintro ⟨v, hv, rfl⟩\n    exact ⟨le_sup_left, union_subset h <| hv.trans <| sdiff_subset _ _⟩\n#align Icc_eq_image_powerset Icc_eq_image_powerset\n\n",
 "Icc_eq_filter_powerset":
 "/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem Icc_eq_filter_powerset : Icc s t = t.powerset.filter ((· ⊆ ·) s) :=\n  rfl\n#align Icc_eq_filter_powerset Icc_eq_filter_powerset\n\n"}