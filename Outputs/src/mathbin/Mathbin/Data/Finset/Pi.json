{"pi_val":
 "/-\nCopyright (c) 2018 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\n@[simp]\ntheorem pi_val (s : Finset α) (t : ∀ a, Finset (β a)) : (s.pi t).1 = s.1.pi fun a => (t a).1 :=\n  rfl\n#align pi_val pi_val\n\n",
 "pi_subset":
 "theorem pi_subset {s : Finset α} (t₁ t₂ : ∀ a, Finset (β a)) (h : ∀ a ∈ s, t₁ a ⊆ t₂ a) : s.pi t₁ ⊆ s.pi t₂ :=\n  fun g hg => mem_pi.2 fun a ha => h a ha (mem_pi.mp hg a ha)\n#align pi_subset pi_subset\n\n",
 "pi_singletons":
 "theorem pi_singletons {β : Type _} (s : Finset α) (f : α → β) : (s.pi fun a => ({f a} : Finset β)) = {fun a _ => f a} :=\n  by\n  rw [eq_singleton_iff_unique_mem]\n  constructor\n  · simp\n  intro a ha\n  ext (i hi)\n  rw [mem_pi] at ha\n  simpa using ha i hi\n#align pi_singletons pi_singletons\n\n",
 "pi_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem pi_insert [∀ a, DecidableEq (β a)] {s : Finset α} {t : ∀ a : α, Finset (β a)} {a : α} (ha : a ∉ s) :\n    pi (insert a s) t = (t a).bUnion fun b => (pi s t).image (Pi.cons s a b) :=\n  by\n  apply eq_of_veq\n  rw [← (pi (insert a s) t).2.dedup]\n  refine'\n    (fun s' (h : s' = «expr ::ₘ » a s.1) =>\n        (_ :\n          dedup (Multiset.pi s' fun a => (t a).1) =\n            dedup\n              ((t a).1.bind fun b =>\n                dedup <|\n                  (Multiset.pi s.1 fun a : α => (t a).val).map fun f a' h' => Multiset.Pi.cons s.1 a b f a' (h ▸ h'))))\n      _ (insert_val_of_not_mem ha)\n  subst s'; rw [pi_cons]\n  congr ; funext b\n  refine' ((pi s t).nodup.map _).dedup.symm\n  exact Multiset.pi_cons_injective ha\n#align pi_insert pi_insert\n\n",
 "pi_empty":
 "@[simp]\ntheorem pi_empty {t : ∀ a : α, Finset (β a)} : pi (∅ : Finset α) t = singleton (Pi.empty β) :=\n  rfl\n#align pi_empty pi_empty\n\n",
 "pi_disjoint_of_disjoint":
 "theorem pi_disjoint_of_disjoint {δ : α → Type _} {s : Finset α} (t₁ t₂ : ∀ a, Finset (δ a)) {a : α} (ha : a ∈ s)\n    (h : Disjoint (t₁ a) (t₂ a)) : Disjoint (s.pi t₁) (s.pi t₂) :=\n  disjoint_iff_ne.2 fun f₁ hf₁ f₂ hf₂ eq₁₂ =>\n    disjoint_iff_ne.1 h (f₁ a ha) (mem_pi.mp hf₁ a ha) (f₂ a ha) (mem_pi.mp hf₂ a ha) <| congr_fun (congr_fun eq₁₂ a) ha\n#align pi_disjoint_of_disjoint pi_disjoint_of_disjoint\n\n",
 "pi_const_singleton":
 "theorem pi_const_singleton {β : Type _} (s : Finset α) (i : β) : (s.pi fun _ => ({i} : Finset β)) = {fun _ _ => i} :=\n  pi_singletons s fun _ => i\n#align pi_const_singleton pi_const_singleton\n\n",
 "pi_cons_injective":
 "theorem pi_cons_injective {a : α} {b : δ a} {s : Finset α} (hs : a ∉ s) : function.injective (Pi.cons s a b) :=\n  fun e₁ e₂ eq =>\n  @Multiset.pi_cons_injective α _ δ a b s.1 hs _ _ <|\n    funext fun e =>\n      funext fun h =>\n        have :\n          Pi.cons s a b e₁ e (by simpa only [Multiset.mem_cons, mem_insert] using h) =\n            Pi.cons s a b e₂ e (by simpa only [Multiset.mem_cons, mem_insert] using h) :=\n          by rw [Eq]\n        this\n#align pi_cons_injective pi_cons_injective\n\n",
 "mem_pi":
 "@[simp]\ntheorem mem_pi {s : Finset α} {t : ∀ a, Finset (β a)} {f : ∀ a ∈ s, β a} :\n    f ∈ s.pi t ↔ ∀ (a) (h : a ∈ s), f a h ∈ t a :=\n  mem_pi _ _ _\n#align mem_pi mem_pi\n\n",
 "cons_same":
 "@[simp]\ntheorem pi.cons_same (s : Finset α) (a : α) (b : δ a) (f : ∀ a, a ∈ s → δ a) (h : a ∈ insert a s) :\n    Pi.cons s a b f a h = b :=\n  Multiset.Pi.cons_same _\n#align pi.cons_same pi.cons_same\n\n",
 "cons_ne":
 "theorem pi.cons_ne {s : Finset α} {a a' : α} {b : δ a} {f : ∀ a, a ∈ s → δ a} {h : a' ∈ insert a s} (ha : a ≠ a') :\n    Pi.cons s a b f a' h = f a' ((mem_insert.1 h).resolve_left ha.symm) :=\n  Multiset.Pi.cons_ne _ _\n#align pi.cons_ne pi.cons_ne\n\n"}