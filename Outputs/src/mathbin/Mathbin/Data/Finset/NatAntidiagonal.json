{"snd_le":
 "theorem antidiagonal.snd_le {n : ℕ} {kl : ℕ × ℕ} (hlk : kl ∈ antidiagonal n) : kl.2 ≤ n :=\n  by\n  rw [le_iff_exists_add]\n  use kl.1\n  rwa [mem_antidiagonal, eq_comm, add_comm] at hlk\n#align antidiagonal.snd_le antidiagonal.snd_le\n\n",
 "mem_antidiagonal":
 "/-\nCopyright (c) 2019 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n/-- A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`. -/\n@[simp]\ntheorem mem_antidiagonal {n : ℕ} {x : ℕ × ℕ} : x ∈ antidiagonal n ↔ x.1 + x.2 = n := by\n  rw [antidiagonal, mem_def, Multiset.Nat.mem_antidiagonal]\n#align mem_antidiagonal mem_antidiagonal\n\n",
 "map_swap_antidiagonal":
 "theorem map_swap_antidiagonal {n : ℕ} :\n    (antidiagonal n).map ⟨Prod.swap, Prod.swap_rightInverse.injective⟩ = antidiagonal n :=\n  eq_of_veq <| by simp [antidiagonal, Multiset.Nat.map_swap_antidiagonal]\n#align map_swap_antidiagonal map_swap_antidiagonal\n\n",
 "fst_le":
 "theorem antidiagonal.fst_le {n : ℕ} {kl : ℕ × ℕ} (hlk : kl ∈ antidiagonal n) : kl.1 ≤ n :=\n  by\n  rw [le_iff_exists_add]\n  use kl.2\n  rwa [mem_antidiagonal, eq_comm] at hlk\n#align antidiagonal.fst_le antidiagonal.fst_le\n\n",
 "filter_snd_eq_antidiagonal":
 "theorem filter_snd_eq_antidiagonal (n m : ℕ) :\n    filter (fun x : ℕ × ℕ => x.snd = m) (antidiagonal n) = if m ≤ n then {(n - m, m)} else ∅ :=\n  by\n  have : (fun x : ℕ × ℕ => x.snd = m) ∘ Prod.swap = fun x : ℕ × ℕ => x.fst = m :=\n    by\n    ext\n    simp\n  rw [← map_swap_antidiagonal]\n  simp [filter_map, this, filter_fst_eq_antidiagonal, apply_ite (Finset.map _)]\n#align filter_snd_eq_antidiagonal filter_snd_eq_antidiagonal\n\n",
 "filter_fst_eq_antidiagonal":
 "theorem filter_fst_eq_antidiagonal (n m : ℕ) :\n    filter (fun x : ℕ × ℕ => x.fst = m) (antidiagonal n) = if m ≤ n then {(m, n - m)} else ∅ :=\n  by\n  ext ⟨x, y⟩\n  simp only [mem_filter, nat.mem_antidiagonal]\n  split_ifs with h h\n  · simp (config := { contextual := true }) [and_comm', eq_tsub_iff_add_eq_of_le h, add_comm]\n  · rw [not_le] at h\n    simp only [not_mem_empty, iff_false_iff, not_and]\n    exact fun hn => ne_of_lt (lt_of_le_of_lt (le_self_add.trans hn.le) h)\n#align filter_fst_eq_antidiagonal filter_fst_eq_antidiagonal\n\n",
 "card_antidiagonal":
 "/-- The cardinality of the antidiagonal of `n` is `n + 1`. -/\n@[simp]\ntheorem card_antidiagonal (n : ℕ) : (antidiagonal n).card = n + 1 := by simp [antidiagonal]\n#align card_antidiagonal card_antidiagonal\n\n",
 "antidiagonal_zero":
 "/-- The antidiagonal of `0` is the list `[(0, 0)]` -/\n@[simp]\ntheorem antidiagonal_zero : antidiagonal 0 = {(0, 0)} :=\n  rfl\n#align antidiagonal_zero antidiagonal_zero\n\n",
 "antidiagonal_succ_succ'":
 "theorem antidiagonal_succ_succ' {n : ℕ} :\n    antidiagonal (n + 2) =\n      cons (0, n + 2)\n        (cons (n + 2, 0)\n            ((antidiagonal n).map\n              (Function.Embedding.prodMap ⟨nat.succ, Nat.succ_injective⟩ ⟨nat.succ, Nat.succ_injective⟩)) <|\n          by simp)\n        (by simp) :=\n  by\n  simp_rw [antidiagonal_succ (n + 1), antidiagonal_succ', Finset.map_cons, map_map]\n  rfl\n#align antidiagonal_succ_succ' antidiagonal_succ_succ'\n\n",
 "antidiagonal_succ'":
 "theorem antidiagonal_succ' (n : ℕ) :\n    antidiagonal (n + 1) =\n      cons (n + 1, 0)\n        ((antidiagonal n).map (Function.Embedding.prodMap (Function.Embedding.refl _) ⟨nat.succ, Nat.succ_injective⟩))\n        (by simp) :=\n  by\n  apply eq_of_veq\n  rw [cons_val, map_val]\n  exact Multiset.Nat.antidiagonal_succ'\n#align antidiagonal_succ' antidiagonal_succ'\n\n",
 "antidiagonal_succ":
 "theorem antidiagonal_succ (n : ℕ) :\n    antidiagonal (n + 1) =\n      cons (0, n + 1)\n        ((antidiagonal n).map (Function.Embedding.prodMap ⟨nat.succ, Nat.succ_injective⟩ (Function.Embedding.refl _)))\n        (by simp) :=\n  by\n  apply eq_of_veq\n  rw [cons_val, map_val]\n  · apply Multiset.Nat.antidiagonal_succ\n#align antidiagonal_succ antidiagonal_succ\n\n",
 "antidiagonal_congr":
 "/-- A point in the antidiagonal is determined by its first co-ordinate. -/\ntheorem antidiagonal_congr {n : ℕ} {p q : ℕ × ℕ} (hp : p ∈ antidiagonal n) (hq : q ∈ antidiagonal n) :\n    p = q ↔ p.fst = q.fst :=\n  by\n  refine' ⟨congr_arg Prod.fst, fun h => Prod.ext h ((add_right_inj q.fst).mp _)⟩\n  rw [mem_antidiagonal] at hp hq\n  rw [hq, ← h, hp]\n#align antidiagonal_congr antidiagonal_congr\n\n"}