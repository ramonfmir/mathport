{"two_lt_card_iff":
 "theorem two_lt_card_iff : 2 < s.card ↔ ∃ a b c, a ∈ s ∧ b ∈ s ∧ c ∈ s ∧ a ≠ b ∧ a ≠ c ∧ b ≠ c := by\n  classical\n    refine' ⟨fun h => _, _⟩\n    · obtain ⟨c, hc⟩ := card_pos.mp (zero_lt_two.trans h)\n      have : 1 < (s.erase c).card := by rwa [← add_lt_add_iff_right 1, card_erase_add_one hc]\n      obtain ⟨a, b, ha, hb, hab⟩ := one_lt_card_iff.mp this\n      exact ⟨a, b, c, mem_of_mem_erase ha, mem_of_mem_erase hb, hc, hab, ne_of_mem_erase ha, ne_of_mem_erase hb⟩\n    · rintro ⟨a, b, c, ha, hb, hc, hab, hac, hbc⟩\n      rw [← card_erase_add_one hc, ← card_erase_add_one (mem_erase_of_ne_of_mem hbc hb), ←\n        card_erase_add_one (mem_erase_of_ne_of_mem hab (mem_erase_of_ne_of_mem hac ha))]\n      apply nat.le_add_left\n#align two_lt_card_iff two_lt_card_iff\n\n",
 "two_lt_card":
 "theorem two_lt_card : 2 < s.card ↔ ∃ a ∈ s, ∃ b ∈ s, ∃ c ∈ s, a ≠ b ∧ a ≠ c ∧ b ≠ c := by\n  simp_rw [two_lt_card_iff, exists_prop, exists_and_left]\n#align two_lt_card two_lt_card\n\n",
 "to_finset_card_of_nodup":
 "theorem list.to_finset_card_of_nodup {l : list α} (h : l.nodup) : l.to_finset.card = l.length :=\n  multiset.to_finset_card_of_nodup h\n#align list.to_finset_card_of_nodup list.to_finset_card_of_nodup\n\n",
 "to_finset_card_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem list.to_finset_card_le : l.to_finset.card ≤ l.length :=\n  multiset.to_finset_card_le («expr⟦ ⟧» l)\n#align list.to_finset_card_le list.to_finset_card_le\n\n",
 "surj_on_of_inj_on_of_card_le":
 "theorem surj_on_of_inj_on_of_card_le {t : Finset β} (f : ∀ a ∈ s, β) (hf : ∀ a ha, f a ha ∈ t)\n    (hinj : ∀ a₁ a₂ ha₁ ha₂, f a₁ ha₁ = f a₂ ha₂ → a₁ = a₂) (hst : t.card ≤ s.card) : ∀ b ∈ t, ∃ a ha, b = f a ha := by\n  classical\n    intro b hb\n    have h : (s.attach.image fun a : { a // a ∈ s } => f a a.prop).card = s.card :=\n      @card_attach _ s ▸ card_image_of_injective _ fun ⟨a₁, ha₁⟩ ⟨a₂, ha₂⟩ h => subtype.eq <| hinj _ _ _ _ h\n    have h' : image (fun a : { a // a ∈ s } => f a a.prop) s.attach = t :=\n      eq_of_subset_of_card_le\n        (fun b h =>\n          let ⟨a, ha₁, ha₂⟩ := mem_image.1 h\n          ha₂ ▸ hf _ _)\n        (by simp [hst, h])\n    rw [← h'] at hb\n    obtain ⟨a, ha₁, ha₂⟩ := mem_image.1 hb\n    exact ⟨a, a.2, ha₂.symm⟩\n#align surj_on_of_inj_on_of_card_le surj_on_of_inj_on_of_card_le\n\n",
 "subset_iff_eq_of_card_le":
 "theorem subset_iff_eq_of_card_le (h : t.card ≤ s.card) : s ⊆ t ↔ s = t :=\n  ⟨fun hst => eq_of_subset_of_card_le hst h, Eq.subset'⟩\n#align subset_iff_eq_of_card_le subset_iff_eq_of_card_le\n\n",
 "strong_induction_on_eq":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (t «expr ⊂ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem strong_induction_on_eq {p : Finset α → Sort _} (s : Finset α)\n    (H : ∀ s, (∀ (t) (_ : «expr ⊂ » t s), p t) → p s) :\n    s.strong_induction_on H = H s fun t h => t.strong_induction_on H :=\n  by\n  dsimp only [strong_induction_on]\n  rw [strong_induction]\n#align strong_induction_on_eq strong_induction_on_eq\n\n",
 "strong_induction_eq":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (t «expr ⊂ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem strong_induction_eq {p : Finset α → Sort _} (H : ∀ s, (∀ (t) (_ : «expr ⊂ » t s), p t) → p s) (s : Finset α) :\n    strong_induction H s = H s fun t h => strong_induction H t := by rw [strong_induction]\n#align strong_induction_eq strong_induction_eq\n\n",
 "strong_downward_induction_on_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem strong_downward_induction_on_eq {p : Finset α → Sort _} (s : Finset α)\n    (H : ∀ t₁, (∀ {t₂ : Finset α}, t₂.card ≤ n → «expr ⊂ » t₁ t₂ → p t₂) → t₁.card ≤ n → p t₁) :\n    s.strong_downward_induction_on H = H s fun t ht h => t.strong_downward_induction_on H ht :=\n  by\n  dsimp only [strong_downward_induction_on]\n  rw [strong_downward_induction]\n#align strong_downward_induction_on_eq strong_downward_induction_on_eq\n\n",
 "strong_downward_induction_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem strong_downward_induction_eq {p : Finset α → Sort _}\n    (H : ∀ t₁, (∀ {t₂ : Finset α}, t₂.card ≤ n → «expr ⊂ » t₁ t₂ → p t₂) → t₁.card ≤ n → p t₁) (s : Finset α) :\n    strong_downward_induction H s = H s fun t ht hst => strong_downward_induction H t ht := by\n  rw [strong_downward_induction]\n#align strong_downward_induction_eq strong_downward_induction_eq\n\n",
 "pred_card_le_card_erase":
 "theorem pred_card_le_card_erase : s.card - 1 ≤ (s.erase a).card :=\n  by\n  by_cases h : a ∈ s\n  · exact (card_erase_of_mem h).ge\n  · rw [erase_eq_of_not_mem h]\n    exact nat.sub_le _ _\n#align pred_card_le_card_erase pred_card_le_card_erase\n\n",
 "one_lt_card_iff":
 "theorem one_lt_card_iff : 1 < s.card ↔ ∃ a b, a ∈ s ∧ b ∈ s ∧ a ≠ b :=\n  by\n  rw [one_lt_card]\n  simp only [exists_prop, exists_and_left]\n#align one_lt_card_iff one_lt_card_iff\n\n",
 "one_lt_card":
 "theorem one_lt_card : 1 < s.card ↔ ∃ a ∈ s, ∃ b ∈ s, a ≠ b :=\n  by\n  rw [← not_iff_not]\n  push_neg\n  exact card_le_one\n#align one_lt_card one_lt_card\n\n",
 "map_eq_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\ntheorem map_eq_of_subset {f : «expr ↪ » α α} (hs : s.map f ⊆ s) : s.map f = s :=\n  eq_of_subset_of_card_le hs (card_map _).ge\n#align map_eq_of_subset map_eq_of_subset\n\n",
 "lt_wf":
 "theorem lt_wf {α} : well_founded (@LT.lt (Finset α) _) :=\n  have H : subrelation (@LT.lt (Finset α) _) (inv_image (· < ·) card) := fun x y hxy => card_lt_card hxy\n  subrelation.wf H <| inv_image.wf _ <| Nat.lt_wfRel\n#align lt_wf lt_wf\n\n",
 "length_to_list":
 "@[simp]\ntheorem length_to_list (s : Finset α) : s.to_list.length = s.card :=\n  by\n  rw [to_list, ← Multiset.coe_card, Multiset.coe_toList]\n  rfl\n#align length_to_list length_to_list\n\n",
 "le_card_sdiff":
 "theorem le_card_sdiff (s t : Finset α) : t.card - s.card ≤ card (t \\ s) :=\n  calc\n    card t - card s ≤ card t - card (s ∩ t) := tsub_le_tsub_left (card_le_of_subset (inter_subset_left s t)) _\n    _ = card (t \\ (s ∩ t)) := (card_sdiff (inter_subset_right s t)).symm\n    _ ≤ card (t \\ s) := by rw [sdiff_inter_self_right t s]\n    \n#align le_card_sdiff le_card_sdiff\n\n",
 "le_card_of_inj_on_range":
 "theorem le_card_of_inj_on_range (f : ℕ → α) (hf : ∀ i < n, f i ∈ s) (f_inj : ∀ i < n, ∀ j < n, f i = f j → i = j) :\n    n ≤ s.card :=\n  calc\n    n = card (range n) := (card_range n).symm\n    _ ≤ s.card := card_le_card_of_inj_on f (by simpa only [mem_range] ) (by simpa only [mem_range] )\n    \n#align le_card_of_inj_on_range le_card_of_inj_on_range\n\n",
 "inj_on_of_surj_on_of_card_le":
 "theorem inj_on_of_surj_on_of_card_le {t : Finset β} (f : ∀ a ∈ s, β) (hf : ∀ a ha, f a ha ∈ t)\n    (hsurj : ∀ b ∈ t, ∃ a ha, b = f a ha) (hst : s.card ≤ t.card) ⦃a₁ a₂⦄ (ha₁ : a₁ ∈ s) (ha₂ : a₂ ∈ s)\n    (ha₁a₂ : f a₁ ha₁ = f a₂ ha₂) : a₁ = a₂ :=\n  haveI : inhabited { x // x ∈ s } := ⟨⟨a₁, ha₁⟩⟩\n  let f' : { x // x ∈ s } → { x // x ∈ t } := fun x => ⟨f x.1 x.2, hf x.1 x.2⟩\n  let g : { x // x ∈ t } → { x // x ∈ s } :=\n    @surj_inv _ _ f' fun x =>\n      let ⟨y, hy₁, hy₂⟩ := hsurj x.1 x.2\n      ⟨⟨y, hy₁⟩, subtype.eq hy₂.symm⟩\n  have hg : injective g := injective_surj_inv _\n  have hsg : surjective g := fun x =>\n    let ⟨y, hy⟩ :=\n      surj_on_of_inj_on_of_card_le (fun (x : { x // x ∈ t }) (hx : x ∈ t.attach) => g x)\n        (fun x _ => show g x ∈ s.attach from mem_attach _ _) (fun x y _ _ hxy => hg hxy) (by simpa) x (mem_attach _ _)\n    ⟨y, hy.snd.symm⟩\n  have hif : injective f' := (left_inverse_of_surjective_of_right_inverse hsg (right_inverse_surj_inv _)).injective\n  subtype.ext_iff_val.1 (@hif ⟨a₁, ha₁⟩ ⟨a₂, ha₂⟩ (subtype.eq ha₁a₂))\n#align inj_on_of_surj_on_of_card_le inj_on_of_surj_on_of_card_le\n\n",
 "inj_on_of_card_image_eq":
 "theorem inj_on_of_card_image_eq [decidable_eq β] (H : (s.image f).card = s.card) : Set.InjOn f s :=\n  by\n  change (s.1.map f).dedup.card = s.1.card at H\n  have : (s.1.map f).dedup = s.1.map f :=\n    by\n    refine' Multiset.eq_of_le_of_card_le (Multiset.dedup_le _) _\n    rw [H]\n    simp only [Multiset.card_map]\n  rw [Multiset.dedup_eq_self] at this\n  exact inj_on_of_nodup_map this\n#align inj_on_of_card_image_eq inj_on_of_card_image_eq\n\n",
 "filter_card_eq":
 "theorem filter_card_eq {p : α → Prop} [decidable_pred p] (h : (s.filter p).card = s.card) (x : α) (hx : x ∈ s) : p x :=\n  by\n  rw [← eq_of_subset_of_card_le (s.filter_subset p) h.ge, mem_filter] at hx\n  exact hx.2\n#align filter_card_eq filter_card_eq\n\n",
 "filter_card_add_filter_neg_card_eq_card":
 "theorem filter_card_add_filter_neg_card_eq_card (p : α → Prop) [decidable_pred p] :\n    (s.filter p).card + (s.filter (not ∘ p)).card = s.card := by\n  classical simp [← card_union_eq, filter_union_filter_neg_eq, disjoint_filter]\n#align filter_card_add_filter_neg_card_eq_card filter_card_add_filter_neg_card_eq_card\n\n",
 "fiber_card_ne_zero_iff_mem_image":
 "theorem fiber_card_ne_zero_iff_mem_image (s : Finset α) (f : α → β) [decidable_eq β] (y : β) :\n    (s.filter fun x => f x = y).card ≠ 0 ↔ y ∈ s.image f := by\n  rw [← pos_iff_ne_zero, card_pos, fiber_nonempty_iff_mem_image]\n#align fiber_card_ne_zero_iff_mem_image fiber_card_ne_zero_iff_mem_image\n\n",
 "exists_subset_or_subset_of_two_mul_lt_card":
 "theorem exists_subset_or_subset_of_two_mul_lt_card [decidable_eq α] {X Y : Finset α} {n : ℕ}\n    (hXY : 2 * n < (X ∪ Y).card) : ∃ C : Finset α, n < C.card ∧ (C ⊆ X ∨ C ⊆ Y) :=\n  by\n  have h₁ : (X ∩ (Y \\ X)).card = 0 := finset.card_eq_zero.mpr (Finset.inter_sdiff_self X Y)\n  have h₂ : (X ∪ Y).card = X.card + (Y \\ X).card := by\n    rw [← card_union_add_card_inter X (Y \\ X), Finset.union_sdiff_self_eq_union, h₁, add_zero]\n  rw [h₂, two_mul] at hXY\n  rcases lt_or_lt_of_add_lt_add hXY with (h | h)\n  · exact ⟨X, h, or.inl (Finset.Subset.refl X)⟩\n  · exact ⟨Y \\ X, h, or.inr (Finset.sdiff_subset Y X)⟩\n#align exists_subset_or_subset_of_two_mul_lt_card exists_subset_or_subset_of_two_mul_lt_card\n\n",
 "exists_smaller_set":
 "/-- We can shrink `A` to any smaller size. -/\ntheorem exists_smaller_set (A : Finset α) (i : ℕ) (h₁ : i ≤ card A) : ∃ B : Finset α, B ⊆ A ∧ card B = i :=\n  let ⟨B, _, x₁, x₂⟩ := exists_intermediate_set i (by simpa) (empty_subset A)\n  ⟨B, x₁, x₂⟩\n#align exists_smaller_set exists_smaller_set\n\n",
 "exists_ne_of_one_lt_card":
 "theorem exists_ne_of_one_lt_card (hs : 1 < s.card) (a : α) : ∃ b, b ∈ s ∧ b ≠ a :=\n  by\n  obtain ⟨x, hx, y, hy, hxy⟩ := finset.one_lt_card.mp hs\n  by_cases ha : y = a\n  · exact ⟨x, hx, ne_of_ne_of_eq hxy ha⟩\n  · exact ⟨y, hy, ha⟩\n#align exists_ne_of_one_lt_card exists_ne_of_one_lt_card\n\n",
 "exists_ne_map_eq_of_card_lt_of_maps_to":
 "/-- If there are more pigeons than pigeonholes, then there are two pigeons in the same pigeonhole.\n-/\ntheorem exists_ne_map_eq_of_card_lt_of_maps_to {t : Finset β} (hc : t.card < s.card) {f : α → β}\n    (hf : ∀ a ∈ s, f a ∈ t) : ∃ x ∈ s, ∃ y ∈ s, x ≠ y ∧ f x = f y := by\n  classical\n    by_contra' hz\n    refine' hc.not_le (card_le_card_of_inj_on f hf _)\n    intro x hx y hy\n    contrapose\n    exact hz x hx y hy\n#align exists_ne_map_eq_of_card_lt_of_maps_to exists_ne_map_eq_of_card_lt_of_maps_to\n\n",
 "exists_intermediate_set":
 "/-- Given a set `A` and a set `B` inside it, we can shrink `A` to any appropriate size, and keep `B`\ninside it. -/\ntheorem exists_intermediate_set {A B : Finset α} (i : ℕ) (h₁ : i + card B ≤ card A) (h₂ : B ⊆ A) :\n    ∃ C : Finset α, B ⊆ C ∧ C ⊆ A ∧ card C = i + card B := by\n  classical\n    rcases nat.le.dest h₁ with ⟨k, _⟩\n    clear h₁\n    induction' k with k ih generalizing A\n    · exact ⟨A, h₂, subset.refl _, h.symm⟩\n    have : (A \\ B).nonempty :=\n      by\n      rw [← card_pos, card_sdiff h₂, ← h, nat.add_right_comm, add_tsub_cancel_right, nat.add_succ]\n      apply nat.succ_pos\n    rcases this with ⟨a, ha⟩\n    have z : i + card B + k = card (erase A a) :=\n      by\n      rw [card_erase_of_mem (mem_sdiff.1 ha).1, ← h]\n      rfl\n    rcases ih _ z with ⟨B', hB', B'subA', cards⟩\n    · exact ⟨B', hB', trans B'subA' (erase_subset _ _), cards⟩\n    · rintro t th\n      apply mem_erase_of_ne_of_mem _ (h₂ th)\n      rintro rfl\n      exact not_mem_sdiff_of_mem_right th ha\n#align exists_intermediate_set exists_intermediate_set\n\n",
 "exists_eq_insert_iff":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (a «expr ∉ » s) -/\ntheorem exists_eq_insert_iff [decidable_eq α] {s t : Finset α} :\n    (∃ (a : _)(_ : a ∉ s), insert a s = t) ↔ s ⊆ t ∧ s.card + 1 = t.card :=\n  by\n  constructor\n  · rintro ⟨a, ha, rfl⟩\n    exact ⟨subset_insert _ _, (card_insert_of_not_mem ha).symm⟩\n  · rintro ⟨hst, h⟩\n    obtain ⟨a, ha⟩ : ∃ a, t \\ s = {a} := card_eq_one.1 (by rw [card_sdiff hst, ← h, add_tsub_cancel_left])\n    refine' ⟨a, fun hs => (_ : a ∉ {a}) <| mem_singleton_self _, by rw [insert_eq, ← ha, sdiff_union_of_subset hst]⟩\n    rw [← ha]\n    exact not_mem_sdiff_of_mem_right hs\n#align exists_eq_insert_iff exists_eq_insert_iff\n\n",
 "eq_of_superset_of_card_ge":
 "theorem eq_of_superset_of_card_ge (hst : s ⊆ t) (hts : t.card ≤ s.card) : t = s :=\n  (eq_of_subset_of_card_le hst hts).symm\n#align eq_of_superset_of_card_ge eq_of_superset_of_card_ge\n\n",
 "eq_of_subset_of_card_le":
 "theorem eq_of_subset_of_card_le {s t : Finset α} (h : s ⊆ t) (h₂ : t.card ≤ s.card) : s = t :=\n  eq_of_veq <| Multiset.eq_of_le_of_card_le (val_le_iff.mpr h) h₂\n#align eq_of_subset_of_card_le eq_of_subset_of_card_le\n\n",
 "case_strong_induction_on":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (t «expr ⊆ » s) -/\n@[elab_as_elim]\ntheorem case_strong_induction_on [decidable_eq α] {p : Finset α → Prop} (s : Finset α) (h₀ : p ∅)\n    (h₁ : ∀ a s, a ∉ s → (∀ (t) (_ : t ⊆ s), p t) → p (insert a s)) : p s :=\n  finset.strong_induction_on s fun s =>\n    Finset.induction_on s (fun _ => h₀) fun a s n _ ih =>\n      h₁ a s n fun t ss => ih _ (lt_of_le_of_lt ss (ssubset_insert n) : t < _)\n#align case_strong_induction_on case_strong_induction_on\n\n",
 "card_union_le":
 "theorem card_union_le (s t : Finset α) : (s ∪ t).card ≤ s.card + t.card :=\n  card_union_add_card_inter s t ▸ nat.le_add_right _ _\n#align card_union_le card_union_le\n\n",
 "card_union_eq":
 "theorem card_union_eq (h : Disjoint s t) : (s ∪ t).card = s.card + t.card := by\n  rw [← disj_union_eq_union s t h, card_disj_union _ _ _]\n#align card_union_eq card_union_eq\n\n",
 "card_union_add_card_inter":
 "theorem card_union_add_card_inter (s t : Finset α) : (s ∪ t).card + (s ∩ t).card = s.card + t.card :=\n  Finset.induction_on t (by simp) fun a r har => by by_cases a ∈ s <;> simp [*] <;> cc\n#align card_union_add_card_inter card_union_add_card_inter\n\n",
 "card_to_finset":
 "theorem list.card_to_finset : l.to_finset.card = l.dedup.length :=\n  rfl\n#align list.card_to_finset list.card_to_finset\n\n",
 "card_subtype":
 "@[simp]\ntheorem card_subtype (p : α → Prop) [decidable_pred p] (s : Finset α) : (s.subtype p).card = (s.filter p).card := by\n  simp [Finset.subtype]\n#align card_subtype card_subtype\n\n",
 "card_singleton_inter":
 "theorem card_singleton_inter [decidable_eq α] : ({a} ∩ s).card ≤ 1 :=\n  by\n  cases Finset.decidableMem a s\n  · simp [Finset.singleton_inter_of_not_mem h]\n  · simp [Finset.singleton_inter_of_mem h]\n#align card_singleton_inter card_singleton_inter\n\n",
 "card_singleton":
 "@[simp]\ntheorem card_singleton (a : α) : card ({a} : Finset α) = 1 :=\n  card_singleton _\n#align card_singleton card_singleton\n\n",
 "card_sdiff_add_card_eq_card":
 "theorem card_sdiff_add_card_eq_card {s t : Finset α} (h : s ⊆ t) : card (t \\ s) + card s = card t :=\n  ((nat.sub_eq_iff_eq_add (card_le_of_subset h)).mp (card_sdiff h).symm).symm\n#align card_sdiff_add_card_eq_card card_sdiff_add_card_eq_card\n\n",
 "card_sdiff_add_card":
 "theorem card_sdiff_add_card : (s \\ t).card + t.card = (s ∪ t).card := by\n  rw [← card_disjoint_union sdiff_disjoint, sdiff_union_self_eq_union]\n#align card_sdiff_add_card card_sdiff_add_card\n\n",
 "card_sdiff":
 "theorem card_sdiff (h : s ⊆ t) : card (t \\ s) = t.card - s.card :=\n  by\n  suffices card (t \\ s) = card (t \\ s ∪ s) - s.card by rwa [sdiff_union_of_subset h] at this\n  rw [card_disjoint_union sdiff_disjoint, add_tsub_cancel_right]\n#align card_sdiff card_sdiff\n\n",
 "card_range":
 "@[simp]\ntheorem card_range (n : ℕ) : (range n).card = n :=\n  card_range n\n#align card_range card_range\n\n",
 "card_pos":
 "theorem card_pos : 0 < s.card ↔ s.nonempty :=\n  pos_iff_ne_zero.trans <| (not_congr card_eq_zero).trans nonempty_iff_ne_empty.symm\n#align card_pos card_pos\n\n",
 "card_ne_zero_of_mem":
 "theorem card_ne_zero_of_mem (h : a ∈ s) : s.card ≠ 0 :=\n  (not_congr card_eq_zero).2 <| ne_empty_of_mem h\n#align card_ne_zero_of_mem card_ne_zero_of_mem\n\n",
 "card_mono":
 "@[mono]\ntheorem card_mono : monotone (@card α) := by apply card_le_of_subset\n#align card_mono card_mono\n\n",
 "card_mk":
 "@[simp]\ntheorem card_mk {m nodup} : (⟨m, nodup⟩ : Finset α).card = m.card :=\n  rfl\n#align card_mk card_mk\n\n",
 "card_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n@[simp]\ntheorem card_map (f : «expr ↪ » α β) : (s.map f).card = s.card :=\n  Multiset.card_map _ _\n#align card_map card_map\n\n",
 "card_lt_card":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem card_lt_card (h : «expr ⊂ » s t) : s.card < t.card :=\n  card_lt_of_lt <| val_lt_iff.2 h\n#align card_lt_card card_lt_card\n\n",
 "card_le_one_of_subsingleton":
 "/-- A `finset` of a subsingleton type has cardinality at most one. -/\ntheorem card_le_one_of_subsingleton [subsingleton α] (s : Finset α) : s.card ≤ 1 :=\n  finset.card_le_one_iff.2 fun _ _ _ _ => subsingleton.elim _ _\n#align card_le_one_of_subsingleton card_le_one_of_subsingleton\n\n",
 "card_le_one_iff_subset_singleton":
 "theorem card_le_one_iff_subset_singleton [nonempty α] : s.card ≤ 1 ↔ ∃ x : α, s ⊆ {x} :=\n  by\n  refine' ⟨fun H => _, _⟩\n  · obtain rfl | ⟨x, hx⟩ := s.eq_empty_or_nonempty\n    · exact ⟨classical.arbitrary α, empty_subset _⟩\n    · exact ⟨x, fun y hy => by rw [card_le_one.1 H y hy x hx, mem_singleton]⟩\n  · rintro ⟨x, hx⟩\n    rw [← card_singleton x]\n    exact card_le_of_subset hx\n#align card_le_one_iff_subset_singleton card_le_one_iff_subset_singleton\n\n",
 "card_le_one_iff":
 "theorem card_le_one_iff : s.card ≤ 1 ↔ ∀ {a b}, a ∈ s → b ∈ s → a = b :=\n  by\n  rw [card_le_one]\n  tauto\n#align card_le_one_iff card_le_one_iff\n\n",
 "card_le_one":
 "theorem card_le_one : s.card ≤ 1 ↔ ∀ a ∈ s, ∀ b ∈ s, a = b :=\n  by\n  obtain rfl | ⟨x, hx⟩ := s.eq_empty_or_nonempty\n  · simp\n  refine' (nat.succ_le_of_lt (card_pos.2 ⟨x, hx⟩)).le_iff_eq.trans (card_eq_one.trans ⟨_, _⟩)\n  · rintro ⟨y, rfl⟩\n    simp\n  · exact fun h => ⟨x, eq_singleton_iff_unique_mem.2 ⟨hx, fun y hy => h _ hy _ hx⟩⟩\n#align card_le_one card_le_one\n\n",
 "card_le_of_subset":
 "theorem card_le_of_subset : s ⊆ t → s.card ≤ t.card :=\n  Multiset.card_le_of_le ∘ val_le_iff.mpr\n#align card_le_of_subset card_le_of_subset\n\n",
 "card_le_card_sdiff_add_card":
 "theorem card_le_card_sdiff_add_card : s.card ≤ (s \\ t).card + t.card :=\n  tsub_le_iff_right.1 <| le_card_sdiff _ _\n#align card_le_card_sdiff_add_card card_le_card_sdiff_add_card\n\n",
 "card_le_card_of_inj_on":
 "theorem card_le_card_of_inj_on {t : Finset β} (f : α → β) (hf : ∀ a ∈ s, f a ∈ t)\n    (f_inj : ∀ a₁ ∈ s, ∀ a₂ ∈ s, f a₁ = f a₂ → a₁ = a₂) : s.card ≤ t.card := by\n  classical calc\n      s.card = (s.image f).card := (card_image_of_inj_on f_inj).symm\n      _ ≤ t.card := card_le_of_subset <| image_subset_iff.2 hf\n      \n#align card_le_card_of_inj_on card_le_card_of_inj_on\n\n",
 "card_inter_add_card_union":
 "theorem card_inter_add_card_union (s t : Finset α) : (s ∩ t).card + (s ∪ t).card = s.card + t.card := by\n  rw [add_comm, card_union_add_card_inter]\n#align card_inter_add_card_union card_inter_add_card_union\n\n",
 "card_insert_of_not_mem":
 "@[simp]\ntheorem card_insert_of_not_mem (h : a ∉ s) : (insert a s).card = s.card + 1 := by rw [← cons_eq_insert _ _ h, card_cons]\n#align card_insert_of_not_mem card_insert_of_not_mem\n\n",
 "card_insert_of_mem":
 "theorem card_insert_of_mem (h : a ∈ s) : card (insert a s) = s.card := by rw [insert_eq_of_mem h]\n#align card_insert_of_mem card_insert_of_mem\n\n",
 "card_insert_le":
 "theorem card_insert_le (a : α) (s : Finset α) : card (insert a s) ≤ s.card + 1 := by\n  by_cases a ∈ s <;>\n    [·\n      rw [insert_eq_of_mem h]\n      exact nat.le_succ _, rw [card_insert_of_not_mem h]]\n#align card_insert_le card_insert_le\n\n",
 "card_insert_eq_ite":
 "/-- If `a ∈ s` is known, see also `finset.card_insert_of_mem` and `finset.card_insert_of_not_mem`.\n-/\ntheorem card_insert_eq_ite : card (insert a s) = if a ∈ s then s.card else s.card + 1 :=\n  by\n  by_cases h : a ∈ s\n  · rw [card_insert_of_mem h, if_pos h]\n  · rw [card_insert_of_not_mem h, if_neg h]\n#align card_insert_eq_ite card_insert_eq_ite\n\n",
 "card_image_of_injective":
 "theorem card_image_of_injective [decidable_eq β] (s : Finset α) (H : injective f) : (s.image f).card = s.card :=\n  card_image_of_inj_on fun x _ y _ h => H h\n#align card_image_of_injective card_image_of_injective\n\n",
 "card_image_of_inj_on":
 "theorem card_image_of_inj_on [decidable_eq β] (H : Set.InjOn f s) : (s.image f).card = s.card := by\n  simp only [card, image_val_of_inj_on H, card_map]\n#align card_image_of_inj_on card_image_of_inj_on\n\n",
 "card_image_le":
 "theorem card_image_le [decidable_eq β] : (s.image f).card ≤ s.card := by\n  simpa only [card_map] using (s.1.map f).to_finset_card_le\n#align card_image_le card_image_le\n\n",
 "card_image_iff":
 "theorem card_image_iff [decidable_eq β] : (s.image f).card = s.card ↔ Set.InjOn f s :=\n  ⟨inj_on_of_card_image_eq, card_image_of_inj_on⟩\n#align card_image_iff card_image_iff\n\n",
 "card_filter_le":
 "theorem card_filter_le (s : Finset α) (p : α → Prop) [decidable_pred p] : (s.filter p).card ≤ s.card :=\n  card_le_of_subset <| filter_subset _ _\n#align card_filter_le card_filter_le\n\n",
 "card_erase_of_mem":
 "@[simp]\ntheorem card_erase_of_mem : a ∈ s → (s.erase a).card = s.card - 1 :=\n  card_erase_of_mem\n#align card_erase_of_mem card_erase_of_mem\n\n",
 "card_erase_lt_of_mem":
 "theorem card_erase_lt_of_mem : a ∈ s → (s.erase a).card < s.card :=\n  card_erase_lt_of_mem\n#align card_erase_lt_of_mem card_erase_lt_of_mem\n\n",
 "card_erase_le":
 "theorem card_erase_le : (s.erase a).card ≤ s.card :=\n  card_erase_le\n#align card_erase_le card_erase_le\n\n",
 "card_erase_eq_ite":
 "/-- If `a ∈ s` is known, see also `finset.card_erase_of_mem` and `finset.erase_eq_of_not_mem`. -/\ntheorem card_erase_eq_ite : (s.erase a).card = if a ∈ s then s.card - 1 else s.card :=\n  card_erase_eq_ite\n#align card_erase_eq_ite card_erase_eq_ite\n\n",
 "card_erase_add_one":
 "@[simp]\ntheorem card_erase_add_one : a ∈ s → (s.erase a).card + 1 = s.card :=\n  card_erase_add_one\n#align card_erase_add_one card_erase_add_one\n\n",
 "card_eq_zero":
 "@[simp]\ntheorem card_eq_zero : s.card = 0 ↔ s = ∅ :=\n  card_eq_zero.trans val_eq_zero\n#align card_eq_zero card_eq_zero\n\n",
 "card_eq_two":
 "theorem card_eq_two [decidable_eq α] : s.card = 2 ↔ ∃ x y, x ≠ y ∧ s = {x, y} :=\n  by\n  constructor\n  · rw [card_eq_succ]\n    simp_rw [card_eq_one]\n    rintro ⟨a, _, hab, rfl, b, rfl⟩\n    exact ⟨a, b, not_mem_singleton.1 hab, rfl⟩\n  · rintro ⟨x, y, h, rfl⟩\n    exact card_doubleton h\n#align card_eq_two card_eq_two\n\n",
 "card_eq_three":
 "theorem card_eq_three [decidable_eq α] : s.card = 3 ↔ ∃ x y z, x ≠ y ∧ x ≠ z ∧ y ≠ z ∧ s = {x, y, z} :=\n  by\n  constructor\n  · rw [card_eq_succ]\n    simp_rw [card_eq_two]\n    rintro ⟨a, _, abc, rfl, b, c, bc, rfl⟩\n    rw [mem_insert, mem_singleton, not_or] at abc\n    exact ⟨a, b, c, abc.1, abc.2, bc, rfl⟩\n  · rintro ⟨x, y, z, xy, xz, yz, rfl⟩\n    simp only [xy, xz, yz, mem_insert, card_insert_of_not_mem, not_false_iff, mem_singleton, or_self_iff,\n      card_singleton]\n#align card_eq_three card_eq_three\n\n",
 "card_eq_succ":
 "theorem card_eq_succ [decidable_eq α] : s.card = n + 1 ↔ ∃ a t, a ∉ t ∧ insert a t = s ∧ t.card = n :=\n  ⟨fun h =>\n    let ⟨a, has⟩ := card_pos.mp (h.symm ▸ nat.zero_lt_succ _ : 0 < s.card)\n    ⟨a, s.erase a, s.not_mem_erase a, insert_erase has, by simp only [h, card_erase_of_mem has, add_tsub_cancel_right]⟩,\n    fun ⟨a, t, hat, s_eq, n_eq⟩ => s_eq ▸ n_eq ▸ card_insert_of_not_mem hat⟩\n#align card_eq_succ card_eq_succ\n\n",
 "card_eq_one":
 "theorem card_eq_one : s.card = 1 ↔ ∃ a, s = {a} := by\n  cases s <;> simp only [Multiset.card_eq_one, finset.card, ← val_inj, singleton_val]\n#align card_eq_one card_eq_one\n\n",
 "card_eq_of_bijective":
 "theorem card_eq_of_bijective (f : ∀ i, i < n → α) (hf : ∀ a ∈ s, ∃ i, ∃ h : i < n, f i h = a)\n    (hf' : ∀ (i) (h : i < n), f i h ∈ s) (f_inj : ∀ (i j) (hi : i < n) (hj : j < n), f i hi = f j hj → i = j) :\n    s.card = n := by\n  classical\n    have : ∀ a : α, a ∈ s ↔ ∃ (i : _)(hi : i ∈ range n), f i (mem_range.1 hi) = a := fun a =>\n      ⟨fun ha =>\n        let ⟨i, hi, eq⟩ := hf a ha\n        ⟨i, mem_range.2 hi, eq⟩,\n        fun ⟨i, hi, eq⟩ => eq ▸ hf' i (mem_range.1 hi)⟩\n    have : s = (range n).attach.image fun i => f i.1 (mem_range.1 i.2) := by\n      simpa only [ext_iff, mem_image, exists_prop, subtype.exists, mem_attach, true_and_iff]\n    calc\n      s.card = card ((range n).attach.image fun i => f i.1 (mem_range.1 i.2)) := by rw [this]\n      _ = card (range n).attach :=\n        card_image_of_injective _ fun ⟨i, hi⟩ ⟨j, hj⟩ eq => subtype.eq <| f_inj i j (mem_range.1 hi) (mem_range.1 hj) eq\n      _ = card (range n) := card_attach\n      _ = n := card_range n\n      \n#align card_eq_of_bijective card_eq_of_bijective\n\n",
 "card_empty":
 "@[simp]\ntheorem card_empty : card (∅ : Finset α) = 0 :=\n  rfl\n#align card_empty card_empty\n\n",
 "card_doubleton":
 "@[simp]\ntheorem card_doubleton (h : a ≠ b) : ({a, b} : Finset α).card = 2 := by\n  rw [card_insert_of_not_mem (not_mem_singleton.2 h), card_singleton]\n#align card_doubleton card_doubleton\n\n",
 "card_disjoint_union":
 "@[simp]\ntheorem card_disjoint_union (h : Disjoint s t) : card (s ∪ t) = s.card + t.card :=\n  card_union_eq h\n#align card_disjoint_union card_disjoint_union\n\n",
 "card_disj_union":
 "@[simp]\ntheorem card_disj_union (s t : Finset α) (h) : (s.disj_union t h).card = s.card + t.card :=\n  Multiset.card_add _ _\n#align card_disj_union card_disj_union\n\n",
 "card_def":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Jeremy Avigad\n-/\ntheorem card_def (s : Finset α) : s.card = s.1.card :=\n  rfl\n#align card_def card_def\n\n",
 "card_cons":
 "@[simp]\ntheorem card_cons (h : a ∉ s) : (s.cons a h).card = s.card + 1 :=\n  card_cons _ _\n#align card_cons card_cons\n\n",
 "card_congr":
 "theorem card_congr {t : Finset β} (f : ∀ a ∈ s, β) (h₁ : ∀ a ha, f a ha ∈ t) (h₂ : ∀ a b ha hb, f a ha = f b hb → a = b)\n    (h₃ : ∀ b ∈ t, ∃ a ha, f a ha = b) : s.card = t.card := by\n  classical calc\n      s.card = s.attach.card := card_attach.symm\n      _ = (s.attach.image fun a : { a // a ∈ s } => f a.1 a.2).card :=\n        eq.symm (card_image_of_injective _ fun a b h => subtype.eq <| h₂ _ _ _ _ h)\n      _ = t.card :=\n        congr_arg card\n          (Finset.ext fun b =>\n            ⟨fun h =>\n              let ⟨a, ha₁, ha₂⟩ := mem_image.1 h\n              ha₂ ▸ h₁ _ _,\n              fun h =>\n              let ⟨a, ha₁, ha₂⟩ := h₃ b h\n              mem_image.2 ⟨⟨a, ha₁⟩, by simp [ha₂]⟩⟩)\n      \n#align card_congr card_congr\n\n",
 "card_attach":
 "@[simp]\ntheorem card_attach : s.attach.card = s.card :=\n  Multiset.card_attach\n#align card_attach card_attach\n\n"}