{"sorted_zero_eq_min'_aux":
 "theorem sorted_zero_eq_min'_aux (s : Finset α) (h : 0 < (s.sort (· ≤ ·)).length) (H : s.nonempty) :\n    (s.sort (· ≤ ·)).nth_le 0 h = s.min' H := by\n  let l := s.sort (· ≤ ·)\n  apply le_antisymm\n  · have : s.min' H ∈ l := (finset.mem_sort (· ≤ ·)).mpr (s.min'_mem H)\n    obtain ⟨i, i_lt, hi⟩ : ∃ (i : _)(hi : i < l.length), l.nth_le i hi = s.min' H := List.mem_iff_nthLe.1 this\n    rw [← hi]\n    exact (s.sort_sorted (· ≤ ·)).rel_nth_le_of_le _ _ (nat.zero_le i)\n  · have : l.nth_le 0 h ∈ s := (finset.mem_sort (· ≤ ·)).1 (List.nthLe_mem l 0 h)\n    exact s.min'_le _ this\n#align sorted_zero_eq_min'_aux sorted_zero_eq_min'_aux\n\n",
 "sorted_zero_eq_min'":
 "theorem sorted_zero_eq_min' {s : Finset α} {h : 0 < (s.sort (· ≤ ·)).length} :\n    (s.sort (· ≤ ·)).nth_le 0 h = s.min' (card_pos.1 <| by rwa [length_sort] at h) :=\n  sorted_zero_eq_min'_aux _ _ _\n#align sorted_zero_eq_min' sorted_zero_eq_min'\n\n",
 "sorted_last_eq_max'_aux":
 "theorem sorted_last_eq_max'_aux (s : Finset α) (h : (s.sort (· ≤ ·)).length - 1 < (s.sort (· ≤ ·)).length)\n    (H : s.nonempty) : (s.sort (· ≤ ·)).nth_le ((s.sort (· ≤ ·)).length - 1) h = s.max' H :=\n  by\n  let l := s.sort (· ≤ ·)\n  apply le_antisymm\n  · have : l.nth_le ((s.sort (· ≤ ·)).length - 1) h ∈ s := (finset.mem_sort (· ≤ ·)).1 (List.nthLe_mem l _ h)\n    exact s.le_max' _ this\n  · have : s.max' H ∈ l := (finset.mem_sort (· ≤ ·)).mpr (s.max'_mem H)\n    obtain ⟨i, i_lt, hi⟩ : ∃ (i : _)(hi : i < l.length), l.nth_le i hi = s.max' H := List.mem_iff_nthLe.1 this\n    rw [← hi]\n    have : i ≤ l.length - 1 := Nat.le_pred_of_lt i_lt\n    exact (s.sort_sorted (· ≤ ·)).rel_nth_le_of_le _ _ (Nat.le_pred_of_lt i_lt)\n#align sorted_last_eq_max'_aux sorted_last_eq_max'_aux\n\n",
 "sorted_last_eq_max'":
 "theorem sorted_last_eq_max' {s : Finset α} {h : (s.sort (· ≤ ·)).length - 1 < (s.sort (· ≤ ·)).length} :\n    (s.sort (· ≤ ·)).nth_le ((s.sort (· ≤ ·)).length - 1) h =\n      s.max'\n        (by\n          rw [length_sort] at h\n          exact card_pos.1 (lt_of_le_of_lt bot_le h)) :=\n  sorted_last_eq_max'_aux _ _ _\n#align sorted_last_eq_max' sorted_last_eq_max'\n\n",
 "sort_to_finset":
 "@[simp]\ntheorem sort_to_finset [decidable_eq α] (s : Finset α) : (sort r s).to_finset = s :=\n  List.toFinset_eq (sort_nodup r s) ▸ eq_of_veq (sort_eq r s)\n#align sort_to_finset sort_to_finset\n\n",
 "sort_sorted_lt":
 "theorem sort_sorted_lt (s : Finset α) : list.sorted (· < ·) (sort (· ≤ ·) s) :=\n  (sort_sorted _ _).imp₂ (@lt_of_le_of_ne _ _) (sort_nodup _ _)\n#align sort_sorted_lt sort_sorted_lt\n\n",
 "sort_sorted":
 "/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem sort_sorted (s : Finset α) : list.sorted r (sort r s) :=\n  sort_sorted _ _\n#align sort_sorted sort_sorted\n\n",
 "sort_singleton":
 "@[simp]\ntheorem sort_singleton (a : α) : sort r {a} = [a] :=\n  multiset.sort_singleton r a\n#align sort_singleton sort_singleton\n\n",
 "sort_perm_to_list":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\ntheorem sort_perm_to_list (s : Finset α) : list.perm (sort r s) s.to_list :=\n  by\n  rw [← Multiset.coe_eq_coe]\n  simp only [coe_to_list, sort_eq]\n#align sort_perm_to_list sort_perm_to_list\n\n",
 "sort_nodup":
 "@[simp]\ntheorem sort_nodup (s : Finset α) : (sort r s).nodup :=\n  (by rw [sort_eq] <;> exact s.2 : @Multiset.Nodup α (sort r s))\n#align sort_nodup sort_nodup\n\n",
 "sort_eq":
 "@[simp]\ntheorem sort_eq (s : Finset α) : ↑(sort r s) = s.1 :=\n  sort_eq _ _\n#align sort_eq sort_eq\n\n",
 "sort_empty":
 "@[simp]\ntheorem sort_empty : sort r ∅ = [] :=\n  multiset.sort_zero r\n#align sort_empty sort_empty\n\n",
 "range_order_emb_of_fin":
 "@[simp]\ntheorem range_order_emb_of_fin (s : Finset α) {k : ℕ} (h : s.card = k) : Set.range (s.order_emb_of_fin h) = s := by\n  simp only [order_emb_of_fin, Set.range_comp coe (s.order_iso_of_fin h), RelEmbedding.coe_trans, Set.image_univ,\n    finset.order_emb_of_fin.equations._eqn_1, RelIso.range_eq, order_embedding.subtype_apply,\n    OrderIso.coe_toOrderEmbedding, eq_self_iff_true, Subtype.range_coe_subtype, Finset.setOf_mem, Finset.coe_inj]\n#align range_order_emb_of_fin range_order_emb_of_fin\n\n",
 "order_iso_of_fin_symm_apply":
 "theorem order_iso_of_fin_symm_apply (s : Finset α) {k : ℕ} (h : s.card = k) (x : s) :\n    ↑((s.order_iso_of_fin h).symm x) = (s.sort (· ≤ ·)).index_of x :=\n  rfl\n#align order_iso_of_fin_symm_apply order_iso_of_fin_symm_apply\n\n",
 "order_emb_of_fin_zero":
 "/-- The bijection `order_emb_of_fin s h` sends `0` to the minimum of `s`. -/\ntheorem order_emb_of_fin_zero {s : Finset α} {k : ℕ} (h : s.card = k) (hz : 0 < k) :\n    order_emb_of_fin s h ⟨0, hz⟩ = s.min' (card_pos.mp (h.symm ▸ hz)) := by\n  simp only [order_emb_of_fin_apply, Fin.val_mk, sorted_zero_eq_min']\n#align order_emb_of_fin_zero order_emb_of_fin_zero\n\n",
 "order_emb_of_fin_unique'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪o » -/\n/-- An order embedding `f` from `fin k` to a finset of cardinality `k` has to coincide with\nthe increasing bijection `order_emb_of_fin s h`. -/\ntheorem order_emb_of_fin_unique' {s : Finset α} {k : ℕ} (h : s.card = k) {f : «expr ↪o » (fin k) α}\n    (hfs : ∀ x, f x ∈ s) : f = s.order_emb_of_fin h :=\n  RelEmbedding.ext <| function.funext_iff.1 <| order_emb_of_fin_unique h hfs f.strict_mono\n#align order_emb_of_fin_unique' order_emb_of_fin_unique'\n\n",
 "order_emb_of_fin_unique":
 "/-- Any increasing map `f` from `fin k` to a finset of cardinality `k` has to coincide with\nthe increasing bijection `order_emb_of_fin s h`. -/\ntheorem order_emb_of_fin_unique {s : Finset α} {k : ℕ} (h : s.card = k) {f : fin k → α} (hfs : ∀ x, f x ∈ s)\n    (hmono : strict_mono f) : f = s.order_emb_of_fin h :=\n  by\n  apply Fin.strictMono_unique hmono (s.order_emb_of_fin h).strict_mono\n  rw [range_order_emb_of_fin, ← Set.image_univ, ← coe_univ, ← coe_image, coe_inj]\n  refine' eq_of_subset_of_card_le (fun x hx => _) _\n  · rcases mem_image.1 hx with ⟨x, hx, rfl⟩\n    exact hfs x\n  · rw [h, card_image_of_injective _ hmono.injective, card_univ, fintype.card_fin]\n#align order_emb_of_fin_unique order_emb_of_fin_unique\n\n",
 "order_emb_of_fin_singleton":
 "/-- `order_emb_of_fin {a} h` sends any argument to `a`. -/\n@[simp]\ntheorem order_emb_of_fin_singleton (a : α) (i : fin 1) : order_emb_of_fin {a} (card_singleton a) i = a := by\n  rw [subsingleton.elim i ⟨0, zero_lt_one⟩, order_emb_of_fin_zero _ zero_lt_one, min'_singleton]\n#align order_emb_of_fin_singleton order_emb_of_fin_singleton\n\n",
 "order_emb_of_fin_mem":
 "@[simp]\ntheorem order_emb_of_fin_mem (s : Finset α) {k : ℕ} (h : s.card = k) (i : fin k) : s.order_emb_of_fin h i ∈ s :=\n  (s.order_iso_of_fin h i).2\n#align order_emb_of_fin_mem order_emb_of_fin_mem\n\n",
 "order_emb_of_fin_last":
 "/-- The bijection `order_emb_of_fin s h` sends `k-1` to the maximum of `s`. -/\ntheorem order_emb_of_fin_last {s : Finset α} {k : ℕ} (h : s.card = k) (hz : 0 < k) :\n    order_emb_of_fin s h ⟨k - 1, buffer.lt_aux_2 hz⟩ = s.max' (card_pos.mp (h.symm ▸ hz)) := by\n  simp [order_emb_of_fin_apply, max'_eq_sorted_last, h]\n#align order_emb_of_fin_last order_emb_of_fin_last\n\n",
 "order_emb_of_fin_eq_order_emb_of_fin_iff":
 "/-- Two parametrizations `order_emb_of_fin` of the same set take the same value on `i` and `j` if\nand only if `i = j`. Since they can be defined on a priori not defeq types `fin k` and `fin l`\n(although necessarily `k = l`), the conclusion is rather written `(i : ℕ) = (j : ℕ)`. -/\n@[simp]\ntheorem order_emb_of_fin_eq_order_emb_of_fin_iff {k l : ℕ} {s : Finset α} {i : fin k} {j : fin l} {h : s.card = k}\n    {h' : s.card = l} : s.order_emb_of_fin h i = s.order_emb_of_fin h' j ↔ (i : ℕ) = (j : ℕ) :=\n  by\n  substs k l\n  exact (s.order_emb_of_fin rfl).eq_iff_eq.trans Fin.ext_iff\n#align order_emb_of_fin_eq_order_emb_of_fin_iff order_emb_of_fin_eq_order_emb_of_fin_iff\n\n",
 "order_emb_of_fin_apply":
 "theorem order_emb_of_fin_apply (s : Finset α) {k : ℕ} (h : s.card = k) (i : fin k) :\n    s.order_emb_of_fin h i =\n      (s.sort (· ≤ ·)).nth_le i\n        (by\n          rw [length_sort, h]\n          exact i.2) :=\n  rfl\n#align order_emb_of_fin_apply order_emb_of_fin_apply\n\n",
 "order_emb_of_card_le_mem":
 "theorem order_emb_of_card_le_mem (s : Finset α) {k : ℕ} (h : k ≤ s.card) (a) : order_emb_of_card_le s h a ∈ s := by\n  simp only [order_emb_of_card_le, RelEmbedding.coe_trans, finset.order_emb_of_fin_mem]\n#align order_emb_of_card_le_mem order_emb_of_card_le_mem\n\n",
 "min'_eq_sorted_zero":
 "theorem min'_eq_sorted_zero {s : Finset α} {h : s.nonempty} :\n    s.min' h =\n      (s.sort (· ≤ ·)).nth_le 0\n        (by\n          rw [length_sort]\n          exact card_pos.2 h) :=\n  (sorted_zero_eq_min'_aux _ _ _).symm\n#align min'_eq_sorted_zero min'_eq_sorted_zero\n\n",
 "mem_sort":
 "@[simp]\ntheorem mem_sort {s : Finset α} {a : α} : a ∈ sort r s ↔ a ∈ s :=\n  multiset.mem_sort _\n#align mem_sort mem_sort\n\n",
 "max'_eq_sorted_last":
 "theorem max'_eq_sorted_last {s : Finset α} {h : s.nonempty} :\n    s.max' h =\n      (s.sort (· ≤ ·)).nth_le ((s.sort (· ≤ ·)).length - 1) (by simpa using nat.sub_lt (card_pos.mpr h) zero_lt_one) :=\n  (sorted_last_eq_max'_aux _ _ _).symm\n#align max'_eq_sorted_last max'_eq_sorted_last\n\n",
 "length_sort":
 "@[simp]\ntheorem length_sort {s : Finset α} : (sort r s).length = s.card :=\n  multiset.length_sort _\n#align length_sort length_sort\n\n",
 "coe_order_iso_of_fin_apply":
 "@[simp]\ntheorem coe_order_iso_of_fin_apply (s : Finset α) {k : ℕ} (h : s.card = k) (i : fin k) :\n    ↑(order_iso_of_fin s h i) = order_emb_of_fin s h i :=\n  rfl\n#align coe_order_iso_of_fin_apply coe_order_iso_of_fin_apply\n\n"}