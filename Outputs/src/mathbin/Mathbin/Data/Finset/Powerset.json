{"powerset_nonempty":
 "theorem powerset_nonempty (s : Finset α) : s.powerset.nonempty :=\n  ⟨∅, empty_mem_powerset _⟩\n#align powerset_nonempty powerset_nonempty\n\n",
 "powerset_mono":
 "@[simp]\ntheorem powerset_mono {s t : Finset α} : powerset s ⊆ powerset t ↔ s ⊆ t :=\n  ⟨fun h => mem_powerset.1 <| h <| mem_powerset_self _, fun st u h =>\n    mem_powerset.2 <| Subset.trans (mem_powerset.1 h) st⟩\n#align powerset_mono powerset_mono\n\n",
 "powerset_len_zero":
 "@[simp]\ntheorem powerset_len_zero (s : Finset α) : finset.powerset_len 0 s = {∅} :=\n  by\n  ext; rw [mem_powerset_len, mem_singleton, card_eq_zero]\n  refine'\n    ⟨fun h => h.2, fun h => by\n      rw [h]\n      exact ⟨empty_subset s, rfl⟩⟩\n#align powerset_len_zero powerset_len_zero\n\n",
 "powerset_len_sup":
 "theorem powerset_len_sup [decidable_eq α] (u : Finset α) (n : ℕ) (hn : n < u.card) :\n    (powerset_len n.succ u).sup id = u := by\n  apply le_antisymm\n  · simp_rw [finset.sup_le_iff, mem_powerset_len]\n    rintro x ⟨h, -⟩\n    exact h\n  · rw [sup_eq_bUnion, le_iff_subset, subset_iff]\n    cases' (nat.succ_le_of_lt hn).eq_or_lt with h' h'\n    · simp [h']\n    · intro x hx\n      simp only [mem_bUnion, exists_prop, id.def]\n      obtain ⟨t, ht⟩ : ∃ t, t ∈ powerset_len n (u.erase x) := powerset_len_nonempty _\n      · refine' ⟨insert x t, _, mem_insert_self _ _⟩\n        rw [← insert_erase hx, powerset_len_succ_insert (not_mem_erase _ _)]\n        exact mem_union_right _ (mem_image_of_mem _ ht)\n      · rw [card_erase_of_mem hx]\n        exact Nat.le_pred_of_lt hn\n#align powerset_len_sup powerset_len_sup\n\n",
 "powerset_len_succ_insert":
 "theorem powerset_len_succ_insert [decidable_eq α] {x : α} {s : Finset α} (h : x ∉ s) (n : ℕ) :\n    powerset_len n.succ (insert x s) = powerset_len n.succ s ∪ (powerset_len n s).image (insert x) :=\n  by\n  rw [powerset_len_eq_filter, powerset_insert, filter_union, ← powerset_len_eq_filter]\n  congr\n  rw [powerset_len_eq_filter, image_filter]\n  congr 1\n  ext t\n  simp only [mem_powerset, mem_filter, Function.comp_apply, and_congr_right_iff]\n  intro ht\n  have : x ∉ t := fun H => h (ht H)\n  simp [card_insert_of_not_mem this, Nat.succ_inj']\n#align powerset_len_succ_insert powerset_len_succ_insert\n\n",
 "powerset_len_self":
 "@[simp]\ntheorem powerset_len_self (s : Finset α) : powerset_len s.card s = {s} :=\n  by\n  ext\n  rw [mem_powerset_len, mem_singleton]\n  constructor\n  · exact fun ⟨hs, hc⟩ => eq_of_subset_of_card_le hs hc.ge\n  · rintro rfl\n    simp\n#align powerset_len_self powerset_len_self\n\n",
 "powerset_len_nonempty":
 "theorem powerset_len_nonempty {n : ℕ} {s : Finset α} (h : n ≤ s.card) : (powerset_len n s).nonempty := by\n  classical\n    induction' s using Finset.induction_on with x s hx IH generalizing n\n    · rw [card_empty, le_zero_iff] at h\n      rw [h, powerset_len_zero]\n      exact Finset.singleton_nonempty _\n    · cases n\n      · simp\n      · rw [card_insert_of_not_mem hx, nat.succ_le_succ_iff] at h\n        rw [powerset_len_succ_insert hx]\n        refine' nonempty.mono _ ((IH h).image (insert x))\n        convert subset_union_right _ _\n#align powerset_len_nonempty powerset_len_nonempty\n\n",
 "powerset_len_mono":
 "@[simp]\ntheorem powerset_len_mono {n} {s t : Finset α} (h : s ⊆ t) : powerset_len n s ⊆ powerset_len n t := fun u h' =>\n  mem_powerset_len.2 <| and.imp (fun h₂ => Subset.trans h₂ h) id (mem_powerset_len.1 h')\n#align powerset_len_mono powerset_len_mono\n\n",
 "powerset_len_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\ntheorem powerset_len_map {β : Type _} (f : «expr ↪ » α β) (n : ℕ) (s : Finset α) :\n    powerset_len n (s.map f) = (powerset_len n s).map (mapEmbedding f).to_embedding :=\n  eq_of_veq <|\n    Multiset.map_injective (@eq_of_veq _) <| by\n      simp_rw [map_val_val_powerset_len, map_val, Multiset.map_map, function.comp, rel_embedding.coe_fn_to_embedding,\n        map_embedding_apply, map_val, ← Multiset.map_map _ val, map_val_val_powerset_len, Multiset.powersetLen_map]\n#align powerset_len_map powerset_len_map\n\n",
 "powerset_len_eq_filter":
 "theorem powerset_len_eq_filter {n} {s : Finset α} : powerset_len n s = (powerset s).filter fun x => x.card = n :=\n  by\n  ext\n  simp [mem_powerset_len]\n#align powerset_len_eq_filter powerset_len_eq_filter\n\n",
 "powerset_len_empty":
 "@[simp]\ntheorem powerset_len_empty (n : ℕ) {s : Finset α} (h : s.card < n) : powerset_len n s = ∅ :=\n  finset.card_eq_zero.mp (by rw [card_powerset_len, Nat.choose_eq_zero_of_lt h])\n#align powerset_len_empty powerset_len_empty\n\n",
 "powerset_len_card_add":
 "@[simp]\ntheorem powerset_len_card_add (s : Finset α) {i : ℕ} (hi : 0 < i) : s.powerset_len (s.card + i) = ∅ :=\n  finset.powerset_len_empty _ (lt_add_of_pos_right (finset.card s) hi)\n#align powerset_len_card_add powerset_len_card_add\n\n",
 "powerset_insert":
 "theorem powerset_insert [decidable_eq α] (s : Finset α) (a : α) :\n    powerset (insert a s) = s.powerset ∪ s.powerset.image (insert a) :=\n  by\n  ext t\n  simp only [exists_prop, mem_powerset, mem_image, mem_union, subset_insert_iff]\n  by_cases h : a ∈ t\n  · constructor\n    · exact fun H => or.inr ⟨_, H, insert_erase h⟩\n    · intro H\n      cases H\n      · exact subset.trans (erase_subset a t) H\n      · rcases H with ⟨u, hu⟩\n        rw [← hu.2]\n        exact subset.trans (erase_insert_subset a u) hu.1\n  · have : ¬∃ u : Finset α, u ⊆ s ∧ insert a u = t := by simp [ne.symm (ne_insert_of_not_mem _ _ h)]\n    simp [Finset.erase_eq_of_not_mem h, this]\n#align powerset_insert powerset_insert\n\n",
 "powerset_injective":
 "theorem powerset_injective : injective (powerset : Finset α → Finset (Finset α)) :=\n  injective_of_le_imp_le _ fun s t => powerset_mono.1\n#align powerset_injective powerset_injective\n\n",
 "powerset_inj":
 "@[simp]\ntheorem powerset_inj : powerset s = powerset t ↔ s = t :=\n  powerset_injective.eq_iff\n#align powerset_inj powerset_inj\n\n",
 "powerset_eq_singleton_empty":
 "@[simp]\ntheorem powerset_eq_singleton_empty : s.powerset = {∅} ↔ s = ∅ := by rw [← powerset_empty, powerset_inj]\n#align powerset_eq_singleton_empty powerset_eq_singleton_empty\n\n",
 "powerset_empty":
 "@[simp]\ntheorem powerset_empty : (∅ : Finset α).powerset = {∅} :=\n  rfl\n#align powerset_empty powerset_empty\n\n",
 "powerset_card_disj_Union":
 "theorem powerset_card_disj_Union (s : Finset α) :\n    finset.powerset s =\n      (range (s.card + 1)).disj_Union (fun i => powerset_len i s) (s.pairwise_disjoint_powerset_len.set_pairwise _) :=\n  by\n  refine' ext fun a => ⟨fun ha => _, fun ha => _⟩\n  · rw [mem_disj_Union]\n    exact\n      ⟨a.card, mem_range.mpr (nat.lt_succ_of_le (card_le_of_subset (mem_powerset.mp ha))),\n        mem_powerset_len.mpr ⟨mem_powerset.mp ha, rfl⟩⟩\n  · rcases mem_disj_Union.mp ha with ⟨i, hi, ha⟩\n    exact mem_powerset.mpr (mem_powerset_len.mp ha).1\n#align powerset_card_disj_Union powerset_card_disj_Union\n\n",
 "powerset_card_bUnion":
 "theorem powerset_card_bUnion [decidable_eq (Finset α)] (s : Finset α) :\n    finset.powerset s = (range (s.card + 1)).bUnion fun i => powerset_len i s := by\n  simpa only [disj_Union_eq_bUnion] using powerset_card_disj_Union s\n#align powerset_card_bUnion powerset_card_bUnion\n\n",
 "pairwise_disjoint_powerset_len":
 "theorem pairwise_disjoint_powerset_len (s : Finset α) :\n    Pairwise fun i j => Disjoint (s.powerset_len i) (s.powerset_len j) := fun i j hij =>\n  Finset.disjoint_left.mpr fun x hi hj => hij <| (mem_powerset_len.mp hi).2.symm.trans (mem_powerset_len.mp hj).2\n#align pairwise_disjoint_powerset_len pairwise_disjoint_powerset_len\n\n",
 "not_mem_of_mem_powerset_of_not_mem":
 "theorem not_mem_of_mem_powerset_of_not_mem {s t : Finset α} {a : α} (ht : t ∈ s.powerset) (h : a ∉ s) : a ∉ t :=\n  by\n  apply mt _ h\n  apply mem_powerset.1 ht\n#align not_mem_of_mem_powerset_of_not_mem not_mem_of_mem_powerset_of_not_mem\n\n",
 "mem_ssubsets":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp]\ntheorem mem_ssubsets {s t : Finset α} : t ∈ s.ssubsets ↔ «expr ⊂ » t s := by\n  rw [ssubsets, mem_erase, mem_powerset, ssubset_iff_subset_ne, and_comm]\n#align mem_ssubsets mem_ssubsets\n\n",
 "mem_powerset_self":
 "@[simp]\ntheorem mem_powerset_self (s : Finset α) : s ∈ powerset s :=\n  mem_powerset.2 Subset.rfl\n#align mem_powerset_self mem_powerset_self\n\n",
 "mem_powerset_len":
 "/-- **Formula for the Number of Combinations** -/\ntheorem mem_powerset_len {n} {s t : Finset α} : s ∈ powerset_len n t ↔ s ⊆ t ∧ card s = n := by\n  cases s <;> simp [powerset_len, val_le_iff.symm] <;> rfl\n#align mem_powerset_len mem_powerset_len\n\n",
 "mem_powerset":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem mem_powerset {s t : Finset α} : s ∈ powerset t ↔ s ⊆ t := by\n  cases s <;> simp only [powerset, mem_mk, mem_pmap, mem_powerset, exists_prop, exists_eq_right] <;> rw [← val_le_iff]\n#align mem_powerset mem_powerset\n\n",
 "map_val_val_powerset_len":
 "@[simp]\ntheorem map_val_val_powerset_len (s : Finset α) (i : ℕ) : (s.powerset_len i).val.map finset.val = s.1.powerset_len i :=\n  by simp [finset.powerset_len, map_pmap, pmap_eq_map, map_id']\n#align map_val_val_powerset_len map_val_val_powerset_len\n\n",
 "empty_mem_ssubsets":
 "theorem empty_mem_ssubsets {s : Finset α} (h : s.nonempty) : ∅ ∈ s.ssubsets :=\n  by\n  rw [mem_ssubsets, ssubset_iff_subset_ne]\n  exact ⟨empty_subset s, h.ne_empty.symm⟩\n#align empty_mem_ssubsets empty_mem_ssubsets\n\n",
 "empty_mem_powerset":
 "@[simp]\ntheorem empty_mem_powerset (s : Finset α) : ∅ ∈ powerset s :=\n  mem_powerset.2 (empty_subset _)\n#align empty_mem_powerset empty_mem_powerset\n\n",
 "coe_powerset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp, norm_cast]\ntheorem coe_powerset (s : Finset α) : (s.powerset : set (Finset α)) = «expr ⁻¹' » coe (s : set α).powerset :=\n  by\n  ext\n  simp\n#align coe_powerset coe_powerset\n\n",
 "card_powerset_len":
 "/-- **Formula for the Number of Combinations** -/\n@[simp]\ntheorem card_powerset_len (n : ℕ) (s : Finset α) : card (powerset_len n s) = Nat.choose (card s) n :=\n  (card_pmap _ _ _).trans (card_powersetLen n s.1)\n#align card_powerset_len card_powerset_len\n\n",
 "card_powerset":
 "/-- **Number of Subsets of a Set** -/\n@[simp]\ntheorem card_powerset (s : Finset α) : card (powerset s) = 2 ^ card s :=\n  (card_pmap _ _ _).trans (card_powerset s.1)\n#align card_powerset card_powerset\n\n"}