{"to_finset_image2":
 "theorem finite.to_finset_image2 (f : α → β → γ) (hs : s.finite) (ht : t.finite) (hf := hs.image2 f ht) :\n    hf.to_finset = Finset.image₂ f hs.to_finset ht.to_finset :=\n  Finset.coe_injective <| by simp\n#align finite.to_finset_image2 finite.to_finset_image2\n\n",
 "subset_image₂":
 "theorem subset_image₂ {s : Set α} {t : Set β} (hu : ↑u ⊆ image2 f s t) :\n    ∃ (s' : Finset α)(t' : Finset β), ↑s' ⊆ s ∧ ↑t' ⊆ t ∧ u ⊆ image₂ f s' t' :=\n  by\n  apply Finset.induction_on' u\n  · exact ⟨∅, ∅, Set.empty_subset _, Set.empty_subset _, empty_subset _⟩\n  rintro a u ha _ _ ⟨s', t', hs, hs', h⟩\n  obtain ⟨x, y, hx, hy, ha⟩ := hu ha\n  haveI := Classical.decEq α\n  haveI := Classical.decEq β\n  refine' ⟨insert x s', insert y t', _⟩\n  simp_rw [coe_insert, Set.insert_subset]\n  exact\n    ⟨⟨hx, hs⟩, ⟨hy, hs'⟩,\n      insert_subset.2\n        ⟨mem_image₂.2 ⟨x, y, mem_insert_self _ _, mem_insert_self _ _, ha⟩,\n          h.trans <| image₂_subset (subset_insert _ _) <| subset_insert _ _⟩⟩\n#align subset_image₂ subset_image₂\n\n",
 "of_image₂_right":
 "theorem nonempty.of_image₂_right (h : (image₂ f s t).nonempty) : t.nonempty :=\n  (image₂_nonempty_iff.1 h).2\n#align nonempty.of_image₂_right nonempty.of_image₂_right\n\n",
 "of_image₂_left":
 "theorem nonempty.of_image₂_left (h : (image₂ f s t).nonempty) : s.nonempty :=\n  (image₂_nonempty_iff.1 h).1\n#align nonempty.of_image₂_left nonempty.of_image₂_left\n\n",
 "mem_image₂_of_mem":
 "theorem mem_image₂_of_mem (ha : a ∈ s) (hb : b ∈ t) : f a b ∈ image₂ f s t :=\n  mem_image₂.2 ⟨a, b, ha, hb, rfl⟩\n#align mem_image₂_of_mem mem_image₂_of_mem\n\n",
 "mem_image₂_iff":
 "theorem mem_image₂_iff (hf : Injective2 f) : f a b ∈ image₂ f s t ↔ a ∈ s ∧ b ∈ t := by\n  rw [← mem_coe, coe_image₂, mem_image2_iff hf, mem_coe, mem_coe]\n#align mem_image₂_iff mem_image₂_iff\n\n",
 "mem_image₂":
 "/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\n@[simp]\ntheorem mem_image₂ : c ∈ image₂ f s t ↔ ∃ a b, a ∈ s ∧ b ∈ t ∧ f a b = c := by simp [image₂, and_assoc']\n#align mem_image₂ mem_image₂\n\n",
 "image₂_union_right":
 "theorem image₂_union_right [DecidableEq β] : image₂ f s (t ∪ t') = image₂ f s t ∪ image₂ f s t' :=\n  coe_injective <| by\n    push_cast\n    exact image2_union_right\n#align image₂_union_right image₂_union_right\n\n",
 "image₂_union_left":
 "theorem image₂_union_left [DecidableEq α] : image₂ f (s ∪ s') t = image₂ f s t ∪ image₂ f s' t :=\n  coe_injective <| by\n    push_cast\n    exact image2_union_left\n#align image₂_union_left image₂_union_left\n\n",
 "image₂_union_inter_subset_union":
 "theorem image₂_union_inter_subset_union : image₂ f (s ∪ s') (t ∩ t') ⊆ image₂ f s t ∪ image₂ f s' t' :=\n  coe_subset.1 <| by\n    push_cast\n    exact Set.image2_union_inter_subset_union\n#align image₂_union_inter_subset_union image₂_union_inter_subset_union\n\n",
 "image₂_union_inter_subset":
 "theorem image₂_union_inter_subset {f : α → α → β} {s t : Finset α} (hf : ∀ a b, f a b = f b a) :\n    image₂ f (s ∪ t) (s ∩ t) ⊆ image₂ f s t :=\n  coe_subset.1 <| by\n    push_cast\n    exact image2_union_inter_subset hf\n#align image₂_union_inter_subset image₂_union_inter_subset\n\n",
 "image₂_swap":
 "theorem image₂_swap (f : α → β → γ) (s : Finset α) (t : Finset β) : image₂ f s t = image₂ (fun a b => f b a) t s :=\n  coe_injective <| by\n    push_cast\n    exact image2_swap _ _ _\n#align image₂_swap image₂_swap\n\n",
 "image₂_subset_right":
 "theorem image₂_subset_right (hs : s ⊆ s') : image₂ f s t ⊆ image₂ f s' t :=\n  image₂_subset hs Subset.rfl\n#align image₂_subset_right image₂_subset_right\n\n",
 "image₂_subset_left":
 "theorem image₂_subset_left (ht : t ⊆ t') : image₂ f s t ⊆ image₂ f s t' :=\n  image₂_subset Subset.rfl ht\n#align image₂_subset_left image₂_subset_left\n\n",
 "image₂_subset_iff_right":
 "theorem image₂_subset_iff_right : image₂ f s t ⊆ u ↔ ∀ b ∈ t, (s.image fun a => f a b) ⊆ u := by\n  simp_rw [image₂_subset_iff, image_subset_iff, @forall₂_swap α]\n#align image₂_subset_iff_right image₂_subset_iff_right\n\n",
 "image₂_subset_iff_left":
 "theorem image₂_subset_iff_left : image₂ f s t ⊆ u ↔ ∀ a ∈ s, (t.image fun b => f a b) ⊆ u := by\n  simp_rw [image₂_subset_iff, image_subset_iff]\n#align image₂_subset_iff_left image₂_subset_iff_left\n\n",
 "image₂_subset_iff":
 "@[simp]\ntheorem image₂_subset_iff : image₂ f s t ⊆ u ↔ ∀ x ∈ s, ∀ y ∈ t, f x y ∈ u :=\n  forall_image₂_iff\n#align image₂_subset_iff image₂_subset_iff\n\n",
 "image₂_subset":
 "theorem image₂_subset (hs : s ⊆ s') (ht : t ⊆ t') : image₂ f s t ⊆ image₂ f s' t' :=\n  by\n  rw [← coe_subset, coe_image₂, coe_image₂]\n  exact image2_subset hs ht\n#align image₂_subset image₂_subset\n\n",
 "image₂_singleton_right":
 "@[simp]\ntheorem image₂_singleton_right : image₂ f s {b} = s.image fun a => f a b :=\n  ext fun x => by simp\n#align image₂_singleton_right image₂_singleton_right\n\n",
 "image₂_singleton_left'":
 "theorem image₂_singleton_left' : image₂ f {a} t = t.image (f a) :=\n  image₂_singleton_left\n#align image₂_singleton_left' image₂_singleton_left'\n\n",
 "image₂_singleton_left":
 "@[simp]\ntheorem image₂_singleton_left : image₂ f {a} t = t.image fun b => f a b :=\n  ext fun x => by simp\n#align image₂_singleton_left image₂_singleton_left\n\n",
 "image₂_singleton_inter":
 "theorem image₂_singleton_inter [DecidableEq β] (t₁ t₂ : Finset β) (hf : injective (f a)) :\n    image₂ f {a} (t₁ ∩ t₂) = image₂ f {a} t₁ ∩ image₂ f {a} t₂ := by simp_rw [image₂_singleton_left, image_inter _ _ hf]\n#align image₂_singleton_inter image₂_singleton_inter\n\n",
 "image₂_singleton":
 "theorem image₂_singleton : image₂ f {a} {b} = {f a b} := by simp\n#align image₂_singleton image₂_singleton\n\n",
 "image₂_right_identity":
 "/-- If `b` is a right identity for `f : α → β → α`, then `{b}` is a right identity for\n`finset.image₂ f`. -/\ntheorem image₂_right_identity {f : γ → β → γ} {b : β} (h : ∀ a, f a b = a) (s : Finset γ) : image₂ f s {b} = s := by\n  rw [image₂_singleton_right, funext h, image_id']\n#align image₂_right_identity image₂_right_identity\n\n",
 "image₂_right_comm":
 "theorem image₂_right_comm {γ : Type _} {u : Finset γ} {f : δ → γ → ε} {g : α → β → δ} {f' : α → γ → δ'}\n    {g' : δ' → β → ε} (h_right_comm : ∀ a b c, f (g a b) c = g' (f' a c) b) :\n    image₂ f (image₂ g s t) u = image₂ g' (image₂ f' s u) t :=\n  coe_injective <| by\n    push_cast\n    exact image2_right_comm h_right_comm\n#align image₂_right_comm image₂_right_comm\n\n",
 "image₂_right":
 "@[simp]\ntheorem image₂_right [DecidableEq β] (h : s.nonempty) : image₂ (fun x y => y) s t = t :=\n  coe_injective <| by\n    push_cast\n    exact image2_right h\n#align image₂_right image₂_right\n\n",
 "image₂_nonempty_iff":
 "@[simp]\ntheorem image₂_nonempty_iff : (image₂ f s t).nonempty ↔ s.nonempty ∧ t.nonempty :=\n  by\n  rw [← coe_nonempty, coe_image₂]\n  exact image2_nonempty_iff\n#align image₂_nonempty_iff image₂_nonempty_iff\n\n",
 "image₂_mk_eq_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n@[simp]\ntheorem image₂_mk_eq_product [DecidableEq α] [DecidableEq β] (s : Finset α) (t : Finset β) :\n    image₂ prod.mk s t = finset.product s t := by ext <;> simp [Prod.ext_iff]\n#align image₂_mk_eq_product image₂_mk_eq_product\n\n",
 "image₂_left_identity":
 "/-- If `a` is a left identity for `f : α → β → β`, then `{a}` is a left identity for\n`finset.image₂ f`. -/\ntheorem image₂_left_identity {f : α → γ → γ} {a : α} (h : ∀ b, f a b = b) (t : Finset γ) : image₂ f {a} t = t :=\n  coe_injective <| by rw [coe_image₂, coe_singleton, Set.image2_left_identity h]\n#align image₂_left_identity image₂_left_identity\n\n",
 "image₂_left_comm":
 "theorem image₂_left_comm {γ : Type _} {u : Finset γ} {f : α → δ → ε} {g : β → γ → δ} {f' : α → γ → δ'} {g' : β → δ' → ε}\n    (h_left_comm : ∀ a b c, f a (g b c) = g' b (f' a c)) : image₂ f s (image₂ g t u) = image₂ g' t (image₂ f' s u) :=\n  coe_injective <| by\n    push_cast\n    exact image2_left_comm h_left_comm\n#align image₂_left_comm image₂_left_comm\n\n",
 "image₂_left":
 "@[simp]\ntheorem image₂_left [DecidableEq α] (h : t.nonempty) : image₂ (fun x y => x) s t = s :=\n  coe_injective <| by\n    push_cast\n    exact image2_left h\n#align image₂_left image₂_left\n\n",
 "image₂_inter_union_subset_union":
 "theorem image₂_inter_union_subset_union : image₂ f (s ∩ s') (t ∪ t') ⊆ image₂ f s t ∪ image₂ f s' t' :=\n  coe_subset.1 <| by\n    push_cast\n    exact Set.image2_inter_union_subset_union\n#align image₂_inter_union_subset_union image₂_inter_union_subset_union\n\n",
 "image₂_inter_union_subset":
 "theorem image₂_inter_union_subset {f : α → α → β} {s t : Finset α} (hf : ∀ a b, f a b = f b a) :\n    image₂ f (s ∩ t) (s ∪ t) ⊆ image₂ f s t :=\n  coe_subset.1 <| by\n    push_cast\n    exact image2_inter_union_subset hf\n#align image₂_inter_union_subset image₂_inter_union_subset\n\n",
 "image₂_inter_subset_right":
 "theorem image₂_inter_subset_right [DecidableEq β] : image₂ f s (t ∩ t') ⊆ image₂ f s t ∩ image₂ f s t' :=\n  coe_subset.1 <| by\n    push_cast\n    exact image2_inter_subset_right\n#align image₂_inter_subset_right image₂_inter_subset_right\n\n",
 "image₂_inter_subset_left":
 "theorem image₂_inter_subset_left [DecidableEq α] : image₂ f (s ∩ s') t ⊆ image₂ f s t ∩ image₂ f s' t :=\n  coe_subset.1 <| by\n    push_cast\n    exact image2_inter_subset_left\n#align image₂_inter_subset_left image₂_inter_subset_left\n\n",
 "image₂_inter_singleton":
 "theorem image₂_inter_singleton [DecidableEq α] (s₁ s₂ : Finset α) (hf : injective fun a => f a b) :\n    image₂ f (s₁ ∩ s₂) {b} = image₂ f s₁ {b} ∩ image₂ f s₂ {b} := by\n  simp_rw [image₂_singleton_right, image_inter _ _ hf]\n#align image₂_inter_singleton image₂_inter_singleton\n\n",
 "image₂_inter_right":
 "theorem image₂_inter_right [DecidableEq β] (hf : Injective2 f) : image₂ f s (t ∩ t') = image₂ f s t ∩ image₂ f s t' :=\n  coe_injective <| by\n    push_cast\n    exact image2_inter_right hf\n#align image₂_inter_right image₂_inter_right\n\n",
 "image₂_inter_left":
 "theorem image₂_inter_left [DecidableEq α] (hf : Injective2 f) : image₂ f (s ∩ s') t = image₂ f s t ∩ image₂ f s' t :=\n  coe_injective <| by\n    push_cast\n    exact image2_inter_left hf\n#align image₂_inter_left image₂_inter_left\n\n",
 "image₂_insert_right":
 "@[simp]\ntheorem image₂_insert_right [DecidableEq β] : image₂ f s (insert b t) = (s.image fun a => f a b) ∪ image₂ f s t :=\n  coe_injective <| by\n    push_cast\n    exact image2_insert_right\n#align image₂_insert_right image₂_insert_right\n\n",
 "image₂_insert_left":
 "@[simp]\ntheorem image₂_insert_left [DecidableEq α] : image₂ f (insert a s) t = (t.image fun b => f a b) ∪ image₂ f s t :=\n  coe_injective <| by\n    push_cast\n    exact image2_insert_left\n#align image₂_insert_left image₂_insert_left\n\n",
 "image₂_image₂_image₂_comm":
 "theorem image₂_image₂_image₂_comm {γ δ : Type _} {u : Finset γ} {v : Finset δ} [DecidableEq ζ] [DecidableEq ζ']\n    [DecidableEq ν] {f : ε → ζ → ν} {g : α → β → ε} {h : γ → δ → ζ} {f' : ε' → ζ' → ν} {g' : α → γ → ε'}\n    {h' : β → δ → ζ'} (h_comm : ∀ a b c d, f (g a b) (h c d) = f' (g' a c) (h' b d)) :\n    image₂ f (image₂ g s t) (image₂ h u v) = image₂ f' (image₂ g' s u) (image₂ h' t v) :=\n  coe_injective <| by\n    push_cast\n    exact image2_image2_image2_comm h_comm\n#align image₂_image₂_image₂_comm image₂_image₂_image₂_comm\n\n",
 "image₂_image_right":
 "theorem image₂_image_right (f : α → γ → δ) (g : β → γ) : image₂ f s (t.image g) = image₂ (fun a b => f a (g b)) s t :=\n  coe_injective <| by\n    push_cast\n    exact image2_image_right _ _\n#align image₂_image_right image₂_image_right\n\n",
 "image₂_image_left_comm":
 "/-- Symmetric statement to `finset.image_image₂_distrib_left`. -/\ntheorem image₂_image_left_comm {f : α' → β → γ} {g : α → α'} {f' : α → β → δ} {g' : δ → γ}\n    (h_left_comm : ∀ a b, f (g a) b = g' (f' a b)) : image₂ f (s.image g) t = (image₂ f' s t).image g' :=\n  (image_image₂_distrib_left fun a b => (h_left_comm a b).symm).symm\n#align image₂_image_left_comm image₂_image_left_comm\n\n",
 "image₂_image_left_anticomm":
 "/-- Symmetric statement to `finset.image_image₂_antidistrib_left`. -/\ntheorem image₂_image_left_anticomm {f : α' → β → γ} {g : α → α'} {f' : β → α → δ} {g' : δ → γ}\n    (h_left_anticomm : ∀ a b, f (g a) b = g' (f' b a)) : image₂ f (s.image g) t = (image₂ f' t s).image g' :=\n  (image_image₂_antidistrib_left fun a b => (h_left_anticomm b a).symm).symm\n#align image₂_image_left_anticomm image₂_image_left_anticomm\n\n",
 "image₂_image_left":
 "theorem image₂_image_left (f : γ → β → δ) (g : α → γ) : image₂ f (s.image g) t = image₂ (fun a b => f (g a) b) s t :=\n  coe_injective <| by\n    push_cast\n    exact image2_image_left _ _\n#align image₂_image_left image₂_image_left\n\n",
 "image₂_eq_empty_iff":
 "@[simp]\ntheorem image₂_eq_empty_iff : image₂ f s t = ∅ ↔ s = ∅ ∨ t = ∅ := by\n  simp_rw [← not_nonempty_iff_eq_empty, image₂_nonempty_iff, not_and_or]\n#align image₂_eq_empty_iff image₂_eq_empty_iff\n\n",
 "image₂_empty_right":
 "@[simp]\ntheorem image₂_empty_right : image₂ f s ∅ = ∅ :=\n  coe_injective <| by simp\n#align image₂_empty_right image₂_empty_right\n\n",
 "image₂_empty_left":
 "@[simp]\ntheorem image₂_empty_left : image₂ f ∅ t = ∅ :=\n  coe_injective <| by simp\n#align image₂_empty_left image₂_empty_left\n\n",
 "image₂_distrib_subset_right":
 "/-- The other direction does not hold because of the `u`-`u` cross terms on the RHS. -/\ntheorem image₂_distrib_subset_right {γ : Type _} {u : Finset γ} {f : δ → γ → ε} {g : α → β → δ} {f₁ : α → γ → α'}\n    {f₂ : β → γ → β'} {g' : α' → β' → ε} (h_distrib : ∀ a b c, f (g a b) c = g' (f₁ a c) (f₂ b c)) :\n    image₂ f (image₂ g s t) u ⊆ image₂ g' (image₂ f₁ s u) (image₂ f₂ t u) :=\n  coe_subset.1 <| by\n    push_cast\n    exact Set.image2_distrib_subset_right h_distrib\n#align image₂_distrib_subset_right image₂_distrib_subset_right\n\n",
 "image₂_distrib_subset_left":
 "/-- The other direction does not hold because of the `s`-`s` cross terms on the RHS. -/\ntheorem image₂_distrib_subset_left {γ : Type _} {u : Finset γ} {f : α → δ → ε} {g : β → γ → δ} {f₁ : α → β → β'}\n    {f₂ : α → γ → γ'} {g' : β' → γ' → ε} (h_distrib : ∀ a b c, f a (g b c) = g' (f₁ a b) (f₂ a c)) :\n    image₂ f s (image₂ g t u) ⊆ image₂ g' (image₂ f₁ s t) (image₂ f₂ s u) :=\n  coe_subset.1 <| by\n    push_cast\n    exact Set.image2_distrib_subset_left h_distrib\n#align image₂_distrib_subset_left image₂_distrib_subset_left\n\n",
 "image₂_curry":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n@[simp]\ntheorem image₂_curry (f : α × β → γ) (s : Finset α) (t : Finset β) :\n    image₂ (curry f) s t = (finset.product s t).image f := by classical rw [← image₂_mk_eq_product, image_image₂, curry]\n#align image₂_curry image₂_curry\n\n",
 "image₂_congr'":
 "/-- A common special case of `image₂_congr` -/\ntheorem image₂_congr' (h : ∀ a b, f a b = f' a b) : image₂ f s t = image₂ f' s t :=\n  image₂_congr fun a _ b _ => h a b\n#align image₂_congr' image₂_congr'\n\n",
 "image₂_congr":
 "theorem image₂_congr (h : ∀ a ∈ s, ∀ b ∈ t, f a b = f' a b) : image₂ f s t = image₂ f' s t :=\n  coe_injective <| by\n    push_cast\n    exact image2_congr h\n#align image₂_congr image₂_congr\n\n",
 "image₂_comm":
 "theorem image₂_comm {g : β → α → γ} (h_comm : ∀ a b, f a b = g b a) : image₂ f s t = image₂ g t s :=\n  (image₂_swap _ _ _).trans <| by simp_rw [h_comm]\n#align image₂_comm image₂_comm\n\n",
 "image₂_assoc":
 "theorem image₂_assoc {γ : Type _} {u : Finset γ} {f : δ → γ → ε} {g : α → β → δ} {f' : α → ε' → ε} {g' : β → γ → ε'}\n    (h_assoc : ∀ a b c, f (g a b) c = f' a (g' b c)) : image₂ f (image₂ g s t) u = image₂ f' s (image₂ g' t u) :=\n  coe_injective <| by\n    push_cast\n    exact image2_assoc h_assoc\n#align image₂_assoc image₂_assoc\n\n",
 "image₂":
 "theorem nonempty.image₂ (hs : s.nonempty) (ht : t.nonempty) : (image₂ f s t).nonempty :=\n  image₂_nonempty_iff.2 ⟨hs, ht⟩\n#align nonempty.image₂ nonempty.image₂\n\n",
 "image_uncurry_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n@[simp]\ntheorem image_uncurry_product (f : α → β → γ) (s : Finset α) (t : Finset β) :\n    (finset.product s t).image (uncurry f) = image₂ f s t := by rw [← image₂_curry, curry_uncurry]\n#align image_uncurry_product image_uncurry_product\n\n",
 "image_subset_image₂_right":
 "theorem image_subset_image₂_right (ha : a ∈ s) : (t.image fun b => f a b) ⊆ image₂ f s t :=\n  image_subset_iff.2 fun b => mem_image₂_of_mem ha\n#align image_subset_image₂_right image_subset_image₂_right\n\n",
 "image_subset_image₂_left":
 "theorem image_subset_image₂_left (hb : b ∈ t) : (s.image fun a => f a b) ⊆ image₂ f s t :=\n  image_subset_iff.2 fun a ha => mem_image₂_of_mem ha hb\n#align image_subset_image₂_left image_subset_image₂_left\n\n",
 "image_image₂_right_comm":
 "/-- Symmetric statement to `finset.image_image₂_distrib_right`. -/\ntheorem image_image₂_right_comm {f : α → β' → γ} {g : β → β'} {f' : α → β → δ} {g' : δ → γ}\n    (h_right_comm : ∀ a b, f a (g b) = g' (f' a b)) : image₂ f s (t.image g) = (image₂ f' s t).image g' :=\n  (image_image₂_distrib_right fun a b => (h_right_comm a b).symm).symm\n#align image_image₂_right_comm image_image₂_right_comm\n\n",
 "image_image₂_right_anticomm":
 "/-- Symmetric statement to `finset.image_image₂_antidistrib_right`. -/\ntheorem image_image₂_right_anticomm {f : α → β' → γ} {g : β → β'} {f' : β → α → δ} {g' : δ → γ}\n    (h_right_anticomm : ∀ a b, f a (g b) = g' (f' b a)) : image₂ f s (t.image g) = (image₂ f' t s).image g' :=\n  (image_image₂_antidistrib_right fun a b => (h_right_anticomm b a).symm).symm\n#align image_image₂_right_anticomm image_image₂_right_anticomm\n\n",
 "image_image₂_distrib_right":
 "/-- Symmetric statement to `finset.image_image₂_right_comm`. -/\ntheorem image_image₂_distrib_right {g : γ → δ} {f' : α → β' → δ} {g' : β → β'}\n    (h_distrib : ∀ a b, g (f a b) = f' a (g' b)) : (image₂ f s t).image g = image₂ f' s (t.image g') :=\n  coe_injective <| by\n    push_cast\n    exact image_image2_distrib_right h_distrib\n#align image_image₂_distrib_right image_image₂_distrib_right\n\n",
 "image_image₂_distrib_left":
 "/-- Symmetric statement to `finset.image₂_image_left_comm`. -/\ntheorem image_image₂_distrib_left {g : γ → δ} {f' : α' → β → δ} {g' : α → α'}\n    (h_distrib : ∀ a b, g (f a b) = f' (g' a) b) : (image₂ f s t).image g = image₂ f' (s.image g') t :=\n  coe_injective <| by\n    push_cast\n    exact image_image2_distrib_left h_distrib\n#align image_image₂_distrib_left image_image₂_distrib_left\n\n",
 "image_image₂_distrib":
 "theorem image_image₂_distrib {g : γ → δ} {f' : α' → β' → δ} {g₁ : α → α'} {g₂ : β → β'}\n    (h_distrib : ∀ a b, g (f a b) = f' (g₁ a) (g₂ b)) : (image₂ f s t).image g = image₂ f' (s.image g₁) (t.image g₂) :=\n  coe_injective <| by\n    push_cast\n    exact image_image2_distrib h_distrib\n#align image_image₂_distrib image_image₂_distrib\n\n",
 "image_image₂_antidistrib_right":
 "/-- Symmetric statement to `finset.image_image₂_right_anticomm`. -/\ntheorem image_image₂_antidistrib_right {g : γ → δ} {f' : β → α' → δ} {g' : α → α'}\n    (h_antidistrib : ∀ a b, g (f a b) = f' b (g' a)) : (image₂ f s t).image g = image₂ f' t (s.image g') :=\n  coe_injective <| by\n    push_cast\n    exact image_image2_antidistrib_right h_antidistrib\n#align image_image₂_antidistrib_right image_image₂_antidistrib_right\n\n",
 "image_image₂_antidistrib_left":
 "/-- Symmetric statement to `finset.image₂_image_left_anticomm`. -/\ntheorem image_image₂_antidistrib_left {g : γ → δ} {f' : β' → α → δ} {g' : β → β'}\n    (h_antidistrib : ∀ a b, g (f a b) = f' (g' b) a) : (image₂ f s t).image g = image₂ f' (t.image g') s :=\n  coe_injective <| by\n    push_cast\n    exact image_image2_antidistrib_left h_antidistrib\n#align image_image₂_antidistrib_left image_image₂_antidistrib_left\n\n",
 "image_image₂_antidistrib":
 "theorem image_image₂_antidistrib {g : γ → δ} {f' : β' → α' → δ} {g₁ : β → β'} {g₂ : α → α'}\n    (h_antidistrib : ∀ a b, g (f a b) = f' (g₁ b) (g₂ a)) :\n    (image₂ f s t).image g = image₂ f' (t.image g₁) (s.image g₂) :=\n  by\n  rw [image₂_swap f]\n  exact image_image₂_distrib fun _ _ => h_antidistrib _ _\n#align image_image₂_antidistrib image_image₂_antidistrib\n\n",
 "image_image₂":
 "theorem image_image₂ (f : α → β → γ) (g : γ → δ) : (image₂ f s t).image g = image₂ (fun a b => g (f a b)) s t :=\n  coe_injective <| by\n    push_cast\n    exact image_image2 _ _\n#align image_image₂ image_image₂\n\n",
 "forall_image₂_iff":
 "theorem forall_image₂_iff {p : γ → Prop} : (∀ z ∈ image₂ f s t, p z) ↔ ∀ x ∈ s, ∀ y ∈ t, p (f x y) := by\n  simp_rw [← mem_coe, coe_image₂, forall_image2_iff]\n#align forall_image₂_iff forall_image₂_iff\n\n",
 "coe_image₂":
 "@[simp, norm_cast]\ntheorem coe_image₂ (f : α → β → γ) (s : Finset α) (t : Finset β) : (image₂ f s t : Set γ) = Set.image2 f s t :=\n  Set.ext fun _ => mem_image₂\n#align coe_image₂ coe_image₂\n\n",
 "card_le_card_image₂_right":
 "theorem card_le_card_image₂_right {t : Finset β} (ht : t.nonempty) (hf : ∀ b, injective fun a => f a b) :\n    s.card ≤ (image₂ f s t).card := by\n  obtain ⟨b, hb⟩ := ht\n  rw [← card_image₂_singleton_right _ (hf b)]\n  exact card_le_of_subset (image₂_subset_left <| singleton_subset_iff.2 hb)\n#align card_le_card_image₂_right card_le_card_image₂_right\n\n",
 "card_le_card_image₂_left":
 "theorem card_le_card_image₂_left {s : Finset α} (hs : s.nonempty) (hf : ∀ a, injective (f a)) :\n    t.card ≤ (image₂ f s t).card := by\n  obtain ⟨a, ha⟩ := hs\n  rw [← card_image₂_singleton_left _ (hf a)]\n  exact card_le_of_subset (image₂_subset_right <| singleton_subset_iff.2 ha)\n#align card_le_card_image₂_left card_le_card_image₂_left\n\n",
 "card_image₂_singleton_right":
 "theorem card_image₂_singleton_right (hf : injective fun a => f a b) : (image₂ f s {b}).card = s.card := by\n  rw [image₂_singleton_right, card_image_of_injective _ hf]\n#align card_image₂_singleton_right card_image₂_singleton_right\n\n",
 "card_image₂_singleton_left":
 "theorem card_image₂_singleton_left (hf : injective (f a)) : (image₂ f {a} t).card = t.card := by\n  rw [image₂_singleton_left, card_image_of_injective _ hf]\n#align card_image₂_singleton_left card_image₂_singleton_left\n\n",
 "card_image₂_le":
 "theorem card_image₂_le (f : α → β → γ) (s : Finset α) (t : Finset β) : (image₂ f s t).card ≤ s.card * t.card :=\n  card_image_le.trans_eq <| card_product _ _\n#align card_image₂_le card_image₂_le\n\n",
 "card_image₂_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem card_image₂_iff :\n    (image₂ f s t).card = s.card * t.card ↔ (finset.product s t : Set (α × β)).inj_on fun x => f x.1 x.2 :=\n  by\n  rw [← card_product, ← coe_product]\n  exact card_image_iff\n#align card_image₂_iff card_image₂_iff\n\n",
 "card_image₂":
 "theorem card_image₂ (hf : Injective2 f) (s : Finset α) (t : Finset β) : (image₂ f s t).card = s.card * t.card :=\n  (card_image_of_injective _ hf.uncurry).trans <| card_product _ _\n#align card_image₂ card_image₂\n\n",
 "bUnion_image_right":
 "theorem bUnion_image_right : (t.bUnion fun b => s.image fun a => f a b) = image₂ f s t :=\n  coe_injective <| by\n    push_cast\n    exact Set.unionᵢ_image_right _\n#align bUnion_image_right bUnion_image_right\n\n",
 "bUnion_image_left":
 "theorem bUnion_image_left : (s.bUnion fun a => t.image <| f a) = image₂ f s t :=\n  coe_injective <| by\n    push_cast\n    exact Set.unionᵢ_image_left _\n#align bUnion_image_left bUnion_image_left\n\n"}