{"union_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem union_to_finmap (s₁ s₂ : AList β) : to_finmap s₁ ∪ to_finmap s₂ = to_finmap (s₁ ∪ s₂) := by\n  simp [(· ∪ ·), union]\n#align union_to_finmap union_to_finmap\n\n",
 "union_empty":
 "@[simp]\ntheorem union_empty {s₁ : Finmap β} : s₁ ∪ ∅ = s₁ :=\n  induction_on s₁ fun s₁ => by\n    rw [← empty_to_finmap] <;> simp [-empty_to_finmap, AList.toFinmap_eq, union_to_finmap, AList.union_assoc]\n#align union_empty union_empty\n\n",
 "union_comm_of_disjoint":
 "theorem union_comm_of_disjoint {s₁ s₂ : Finmap β} : Disjoint s₁ s₂ → s₁ ∪ s₂ = s₂ ∪ s₁ :=\n  induction_on₂ s₁ s₂ fun s₁ s₂ => by\n    intro h\n    simp only [AList.toFinmap_eq, union_to_finmap, AList.union_comm_of_disjoint h]\n#align union_comm_of_disjoint union_comm_of_disjoint\n\n",
 "union_cancel":
 "theorem union_cancel {s₁ s₂ s₃ : Finmap β} (h : Disjoint s₁ s₃) (h' : Disjoint s₂ s₃) : s₁ ∪ s₃ = s₂ ∪ s₃ ↔ s₁ = s₂ :=\n  ⟨fun h'' => by\n    apply ext_lookup\n    intro x\n    have : (s₁ ∪ s₃).lookup x = (s₂ ∪ s₃).lookup x := h'' ▸ rfl\n    by_cases hs₁ : x ∈ s₁\n    · rwa [lookup_union_left hs₁, lookup_union_left_of_not_in (h _ hs₁)] at this\n    · by_cases hs₂ : x ∈ s₂\n      · rwa [lookup_union_left_of_not_in (h' _ hs₂), lookup_union_left hs₂] at this\n      · rw [lookup_eq_none.mpr hs₁, lookup_eq_none.mpr hs₂], fun h => h ▸ rfl⟩\n#align union_cancel union_cancel\n\n",
 "union_assoc":
 "theorem union_assoc {s₁ s₂ s₃ : Finmap β} : s₁ ∪ s₂ ∪ s₃ = s₁ ∪ (s₂ ∪ s₃) :=\n  induction_on₃ s₁ s₂ s₃ fun s₁ s₂ s₃ => by simp only [AList.toFinmap_eq, union_to_finmap, AList.union_assoc]\n#align union_assoc union_assoc\n\n",
 "to_finmap_nil":
 "@[simp]\ntheorem to_finmap_nil [DecidableEq α] : ([].to_finmap : Finmap β) = ∅ :=\n  rfl\n#align to_finmap_nil to_finmap_nil\n\n",
 "to_finmap_cons":
 "theorem to_finmap_cons (a : α) (b : β a) (xs : List (Sigma β)) :\n    List.toFinmap (⟨a, b⟩ :: xs) = insert a b xs.to_finmap :=\n  rfl\n#align to_finmap_cons to_finmap_cons\n\n",
 "toFinmap_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n#print AList.toFinmap_eq /-\ntheorem AList.toFinmap_eq {s₁ s₂ : AList β} : to_finmap s₁ = to_finmap s₂ ↔ list.perm s₁.entries s₂.entries := by\n  cases s₁ <;> cases s₂ <;> simp [AList.toFinmap]\n#align alist.to_finmap_eq AList.toFinmap_eq\n-/\n\n",
 "toFinmap_entries":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n#print AList.toFinmap_entries /-\n@[simp]\ntheorem AList.toFinmap_entries (s : AList β) : (to_finmap s).entries = s.entries :=\n  rfl\n#align alist.to_finmap_entries AList.toFinmap_entries\n-/\n\n",
 "symm_iff":
 "theorem disjoint.symm_iff (x y : Finmap β) : Disjoint x y ↔ Disjoint y x :=\n  ⟨Disjoint.symm x y, Disjoint.symm y x⟩\n#align disjoint.symm_iff disjoint.symm_iff\n\n",
 "symm":
 "#print Disjoint.symm /-\n@[symm]\ntheorem Disjoint.symm (x y : Finmap β) (h : Disjoint x y) : Disjoint y x := fun p hy hx => h p hx hy\n#align disjoint.symm Disjoint.symm\n-/\n\n",
 "sigma_keys_lookup":
 "@[simp]\ntheorem sigma_keys_lookup (f : Finmap β) :\n    (f.keys.sigma fun i => (f.lookup i).to_finset) = ⟨f.entries, f.nodup_entries⟩ :=\n  by\n  ext x\n  have : x ∈ f.entries → x.fst ∈ f.keys := Multiset.mem_map_of_mem _\n  simpa [lookup_eq_some_iff]\n#align sigma_keys_lookup sigma_keys_lookup\n\n",
 "replace_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem replace_to_finmap (a : α) (b : β a) (s : AList β) : replace a b (to_finmap s) = to_finmap (s.replace a b) := by\n  simp [replace]\n#align replace_to_finmap replace_to_finmap\n\n",
 "not_mem_erase_self":
 "theorem not_mem_erase_self {a : α} {s : Finmap β} : ¬a ∈ erase a s := by\n  rw [mem_erase, not_and_or, Classical.not_not] <;> left <;> rfl\n#align not_mem_erase_self not_mem_erase_self\n\n",
 "not_mem_empty":
 "theorem not_mem_empty {a : α} : a ∉ (∅ : Finmap β) :=\n  Multiset.not_mem_zero a\n#align not_mem_empty not_mem_empty\n\n",
 "nodup_keys":
 "theorem nodup_keys {m : Multiset (Σa, β a)} : m.keys.nodup ↔ m.nodupkeys :=\n  by\n  rcases m with ⟨l⟩\n  rfl\n#align nodup_keys nodup_keys\n\n",
 "nodup_entries":
 "theorem nodup_entries (f : Finmap β) : f.entries.nodup :=\n  f.nodupkeys.nodup\n#align nodup_entries nodup_entries\n\n",
 "nodup":
 "theorem nodupkeys.nodup {m : Multiset (Σa, β a)} (h : m.nodupkeys) : m.nodup :=\n  h.nodup_keys.of_map _\n#align nodupkeys.nodup nodupkeys.nodup\n\n",
 "mem_union":
 "@[simp]\ntheorem mem_union {a} {s₁ s₂ : Finmap β} : a ∈ s₁ ∪ s₂ ↔ a ∈ s₁ ∨ a ∈ s₂ :=\n  induction_on₂ s₁ s₂ fun _ _ => mem_union\n#align mem_union mem_union\n\n",
 "mem_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem mem_to_finmap {a : α} {s : AList β} : a ∈ to_finmap s ↔ a ∈ s :=\n  iff.rfl\n#align mem_to_finmap mem_to_finmap\n\n",
 "mem_singleton":
 "@[simp]\ntheorem mem_singleton (x y : α) (b : β y) : x ∈ singleton y b ↔ x = y := by\n  simp only [singleton] <;> erw [mem_cons_eq, mem_nil_iff, or_false_iff]\n#align mem_singleton mem_singleton\n\n",
 "mem_replace":
 "@[simp]\ntheorem mem_replace {a a' : α} {b : β a} {s : Finmap β} : a' ∈ replace a b s ↔ a' ∈ s :=\n  induction_on s fun s => by simp\n#align mem_replace mem_replace\n\n",
 "mem_of_lookup_eq_some":
 "theorem mem_of_lookup_eq_some {a : α} {b : β a} {s : Finmap β} (h : s.lookup a = some b) : a ∈ s :=\n  mem_iff.mpr ⟨_, h⟩\n#align mem_of_lookup_eq_some mem_of_lookup_eq_some\n\n",
 "mem_lookup_union_middle":
 "theorem mem_lookup_union_middle {a} {b : β a} {s₁ s₂ s₃ : Finmap β} :\n    b ∈ lookup a (s₁ ∪ s₃) → a ∉ s₂ → b ∈ lookup a (s₁ ∪ s₂ ∪ s₃) :=\n  induction_on₃ s₁ s₂ s₃ fun s₁ s₂ s₃ => mem_lookup_union_middle\n#align mem_lookup_union_middle mem_lookup_union_middle\n\n",
 "mem_lookup_union":
 "@[simp]\ntheorem mem_lookup_union {a} {b : β a} {s₁ s₂ : Finmap β} :\n    b ∈ lookup a (s₁ ∪ s₂) ↔ b ∈ lookup a s₁ ∨ a ∉ s₁ ∧ b ∈ lookup a s₂ :=\n  induction_on₂ s₁ s₂ fun s₁ s₂ => mem_lookup_union\n#align mem_lookup_union mem_lookup_union\n\n",
 "mem_lookup_iff":
 "theorem mem_lookup_iff {f : Finmap β} {a : α} {b : β a} : b ∈ f.lookup a ↔ sigma.mk a b ∈ f.entries :=\n  by\n  rcases f with ⟨⟨l⟩, hl⟩\n  exact List.mem_dlookup_iff hl\n#align mem_lookup_iff mem_lookup_iff\n\n",
 "mem_list_to_finmap":
 "theorem mem_list_to_finmap (a : α) (xs : List (Sigma β)) : a ∈ xs.to_finmap ↔ ∃ b : β a, sigma.mk a b ∈ xs :=\n  by\n  induction' xs with x xs <;> [skip, cases x] <;>\n      simp only [to_finmap_cons, *, not_mem_empty, exists_or, not_mem_nil, to_finmap_nil, exists_false, mem_cons_iff,\n        mem_insert, exists_and_left] <;>\n    apply or_congr _ iff.rfl\n  conv =>\n    lhs\n    rw [← and_true_iff (a = x_fst)]\n  apply and_congr_right\n  rintro ⟨⟩\n  simp only [exists_eq, heq_iff_eq]\n#align mem_list_to_finmap mem_list_to_finmap\n\n",
 "mem_keys":
 "theorem mem_keys {a : α} {s : Finmap β} : a ∈ s.keys ↔ a ∈ s :=\n  induction_on s fun s => AList.mem_keys\n#align mem_keys mem_keys\n\n",
 "mem_insert":
 "@[simp]\ntheorem mem_insert {a a' : α} {b' : β a'} {s : Finmap β} : a ∈ insert a' b' s ↔ a = a' ∨ a ∈ s :=\n  induction_on s mem_insert\n#align mem_insert mem_insert\n\n",
 "mem_iff":
 "theorem mem_iff {a : α} {s : Finmap β} : a ∈ s ↔ ∃ b, s.lookup a = some b :=\n  induction_on s fun s => iff.trans List.mem_keys <| exists_congr fun b => (List.mem_dlookup_iff s.nodupkeys).symm\n#align mem_iff mem_iff\n\n",
 "mem_erase":
 "@[simp]\ntheorem mem_erase {a a' : α} {s : Finmap β} : a' ∈ erase a s ↔ a' ≠ a ∧ a' ∈ s :=\n  induction_on s fun s => by simp\n#align mem_erase mem_erase\n\n",
 "mem_def":
 "theorem mem_def {a : α} {s : Finmap β} : a ∈ s ↔ a ∈ s.entries.keys :=\n  iff.rfl\n#align mem_def mem_def\n\n",
 "lookup_union_right":
 "@[simp]\ntheorem lookup_union_right {a} {s₁ s₂ : Finmap β} : a ∉ s₁ → lookup a (s₁ ∪ s₂) = lookup a s₂ :=\n  induction_on₂ s₁ s₂ fun s₁ s₂ => lookup_union_right\n#align lookup_union_right lookup_union_right\n\n",
 "lookup_union_left_of_not_in":
 "theorem lookup_union_left_of_not_in {a} {s₁ s₂ : Finmap β} (h : a ∉ s₂) : lookup a (s₁ ∪ s₂) = lookup a s₁ :=\n  by\n  by_cases h' : a ∈ s₁\n  · rw [lookup_union_left h']\n  · rw [lookup_union_right h', lookup_eq_none.mpr h, lookup_eq_none.mpr h']\n#align lookup_union_left_of_not_in lookup_union_left_of_not_in\n\n",
 "lookup_union_left":
 "@[simp]\ntheorem lookup_union_left {a} {s₁ s₂ : Finmap β} : a ∈ s₁ → lookup a (s₁ ∪ s₂) = lookup a s₁ :=\n  induction_on₂ s₁ s₂ fun s₁ s₂ => lookup_union_left\n#align lookup_union_left lookup_union_left\n\n",
 "lookup_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem lookup_to_finmap (a : α) (s : AList β) : lookup a (to_finmap s) = s.lookup a :=\n  rfl\n#align lookup_to_finmap lookup_to_finmap\n\n",
 "lookup_singleton_eq":
 "@[simp]\ntheorem lookup_singleton_eq {a : α} {b : β a} : (singleton a b).lookup a = some b := by\n  rw [singleton, lookup_to_finmap, AList.singleton, AList.lookup, lookup_cons_eq]\n#align lookup_singleton_eq lookup_singleton_eq\n\n",
 "lookup_list_to_finmap":
 "@[simp]\ntheorem lookup_list_to_finmap (a : α) (s : List (Sigma β)) : lookup a s.to_finmap = s.lookup a := by\n  rw [List.toFinmap, lookup_to_finmap, lookup_to_alist]\n#align lookup_list_to_finmap lookup_list_to_finmap\n\n",
 "lookup_is_some":
 "theorem lookup_is_some {a : α} {s : Finmap β} : (s.lookup a).is_some ↔ a ∈ s :=\n  induction_on s fun s => AList.lookup_isSome\n#align lookup_is_some lookup_is_some\n\n",
 "lookup_insert_of_ne":
 "@[simp]\ntheorem lookup_insert_of_ne {a a'} {b : β a} (s : Finmap β) (h : a' ≠ a) : lookup a' (insert a b s) = lookup a' s :=\n  induction_on s fun s => by simp only [insert_to_finmap, lookup_to_finmap, lookup_insert_ne h]\n#align lookup_insert_of_ne lookup_insert_of_ne\n\n",
 "lookup_insert":
 "@[simp]\ntheorem lookup_insert {a} {b : β a} (s : Finmap β) : lookup a (insert a b s) = some b :=\n  induction_on s fun s => by simp only [insert_to_finmap, lookup_to_finmap, lookup_insert]\n#align lookup_insert lookup_insert\n\n",
 "lookup_erase_ne":
 "@[simp]\ntheorem lookup_erase_ne {a a'} {s : Finmap β} (h : a ≠ a') : lookup a (erase a' s) = lookup a s :=\n  induction_on s fun s => lookup_erase_ne h\n#align lookup_erase_ne lookup_erase_ne\n\n",
 "lookup_erase":
 "@[simp]\ntheorem lookup_erase (a) (s : Finmap β) : lookup a (erase a s) = none :=\n  induction_on s <| lookup_erase a\n#align lookup_erase lookup_erase\n\n",
 "lookup_eq_some_iff":
 "/-- A version of `finmap.mem_lookup_iff` with LHS in the simp-normal form. -/\ntheorem lookup_eq_some_iff {f : Finmap β} {a : α} {b : β a} : f.lookup a = some b ↔ sigma.mk a b ∈ f.entries :=\n  mem_lookup_iff\n#align lookup_eq_some_iff lookup_eq_some_iff\n\n",
 "lookup_eq_none":
 "theorem lookup_eq_none {a} {s : Finmap β} : lookup a s = none ↔ a ∉ s :=\n  induction_on s fun s => AList.lookup_eq_none\n#align lookup_eq_none lookup_eq_none\n\n",
 "lookup_empty":
 "@[simp]\ntheorem lookup_empty (a) : lookup a (∅ : Finmap β) = none :=\n  rfl\n#align lookup_empty lookup_empty\n\n",
 "lift_on₂_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem lift_on₂_to_finmap {γ} (s₁ s₂ : AList β) (f : AList β → AList β → γ) (H) :\n    liftOn₂ (to_finmap s₁) (to_finmap s₂) f H = f s₁ s₂ := by cases s₁ <;> cases s₂ <;> rfl\n#align lift_on₂_to_finmap lift_on₂_to_finmap\n\n",
 "lift_on_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem lift_on_to_finmap {γ} (s : AList β) (f : AList β → γ) (H) : liftOn (to_finmap s) f H = f s := by cases s <;> rfl\n#align lift_on_to_finmap lift_on_to_finmap\n\n",
 "keys_val":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem keys_val (s : AList β) : (keys (to_finmap s)).val = s.keys :=\n  rfl\n#align keys_val keys_val\n\n",
 "keys_union":
 "theorem keys_union {s₁ s₂ : Finmap β} : (s₁ ∪ s₂).keys = s₁.keys ∪ s₂.keys :=\n  induction_on₂ s₁ s₂ fun s₁ s₂ => Finset.ext <| by simp [keys]\n#align keys_union keys_union\n\n",
 "keys_singleton":
 "@[simp]\ntheorem keys_singleton (a : α) (b : β a) : (singleton a b).keys = {a} :=\n  rfl\n#align keys_singleton keys_singleton\n\n",
 "keys_replace":
 "@[simp]\ntheorem keys_replace (a : α) (b : β a) (s : Finmap β) : (replace a b s).keys = s.keys :=\n  induction_on s fun s => by simp\n#align keys_replace keys_replace\n\n",
 "keys_lookup_equiv_symm_apply_lookup":
 "@[simp]\ntheorem keys_lookup_equiv_symm_apply_lookup :\n    ∀ (f : { f : Finset α × ∀ a, Option (β a) // ∀ i, (f.2 i).is_some ↔ i ∈ f.1 }) (a),\n      (keys_lookup_equiv.symm f).lookup a = (f : Finset α × ∀ a, Option (β a)).2 a :=\n  keys_lookup_equiv.surjective.forall.2 fun f a => by\n    simp only [Equiv.symm_apply_apply, keys_lookup_equiv_apply_coe_snd]\n#align keys_lookup_equiv_symm_apply_lookup keys_lookup_equiv_symm_apply_lookup\n\n",
 "keys_lookup_equiv_symm_apply_keys":
 "@[simp]\ntheorem keys_lookup_equiv_symm_apply_keys :\n    ∀ f : { f : Finset α × ∀ a, Option (β a) // ∀ i, (f.2 i).is_some ↔ i ∈ f.1 },\n      (keys_lookup_equiv.symm f).keys = (f : Finset α × ∀ a, Option (β a)).1 :=\n  keys_lookup_equiv.surjective.forall.2 fun f => by simp only [Equiv.symm_apply_apply, keys_lookup_equiv_apply_coe_fst]\n#align keys_lookup_equiv_symm_apply_keys keys_lookup_equiv_symm_apply_keys\n\n",
 "keys_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `list.perm -/\n@[simp]\ntheorem keys_ext {s₁ s₂ : AList β} : keys (to_finmap s₁) = keys (to_finmap s₂) ↔ list.perm s₁.keys s₂.keys := by\n  simp [keys, AList.keys]\n#align keys_ext keys_ext\n\n",
 "keys_erase_to_finset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem keys_erase_to_finset (a : α) (s : AList β) : keys (to_finmap (s.erase a)) = (keys (to_finmap s)).erase a := by\n  simp [Finset.erase, keys, AList.erase, keys_kerase]\n#align keys_erase_to_finset keys_erase_to_finset\n\n",
 "keys_erase":
 "@[simp]\ntheorem keys_erase (a : α) (s : Finmap β) : (erase a s).keys = s.keys.erase a :=\n  induction_on s fun s => by simp\n#align keys_erase keys_erase\n\n",
 "keys_empty":
 "@[simp]\ntheorem keys_empty : (∅ : Finmap β).keys = ∅ :=\n  rfl\n#align keys_empty keys_empty\n\n",
 "insert_union":
 "theorem insert_union {a} {b : β a} {s₁ s₂ : Finmap β} : insert a b (s₁ ∪ s₂) = insert a b s₁ ∪ s₂ :=\n  induction_on₂ s₁ s₂ fun a₁ a₂ => by simp [insert_union]\n#align insert_union insert_union\n\n",
 "insert_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem insert_to_finmap (a : α) (b : β a) (s : AList β) : insert a b (to_finmap s) = to_finmap (s.insert a b) := by\n  simp [insert]\n#align insert_to_finmap insert_to_finmap\n\n",
 "insert_singleton_eq":
 "@[simp]\ntheorem insert_singleton_eq {a : α} {b b' : β a} : insert a b (singleton a b') = singleton a b := by\n  simp only [singleton, Finmap.insert_toFinmap, AList.insert_singleton_eq]\n#align insert_singleton_eq insert_singleton_eq\n\n",
 "insert_insert_of_ne":
 "theorem insert_insert_of_ne {a a'} {b : β a} {b' : β a'} (s : Finmap β) (h : a ≠ a') :\n    (s.insert a b).insert a' b' = (s.insert a' b').insert a b :=\n  induction_on s fun s => by simp only [insert_to_finmap, AList.toFinmap_eq, insert_insert_of_ne _ h]\n#align insert_insert_of_ne insert_insert_of_ne\n\n",
 "insert_insert":
 "@[simp]\ntheorem insert_insert {a} {b b' : β a} (s : Finmap β) : (s.insert a b).insert a b' = s.insert a b' :=\n  induction_on s fun s => by simp only [insert_to_finmap, insert_insert]\n#align insert_insert insert_insert\n\n",
 "insert_entries_of_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\ntheorem insert_entries_of_neg {a : α} {b : β a} {s : Finmap β} :\n    a ∉ s → (insert a b s).entries = «expr ::ₘ » ⟨a, b⟩ s.entries :=\n  induction_on s fun s h => by simp [insert_entries_of_neg (mt mem_to_finmap.1 h)]\n#align insert_entries_of_neg insert_entries_of_neg\n\n",
 "induction_on₃":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[elab_as_elim]\ntheorem induction_on₃ {C : Finmap β → Finmap β → Finmap β → Prop} (s₁ s₂ s₃ : Finmap β)\n    (H : ∀ a₁ a₂ a₃ : AList β, C (to_finmap a₁) (to_finmap a₂) (to_finmap a₃)) : C s₁ s₂ s₃ :=\n  induction_on₂ s₁ s₂ fun l₁ l₂ => induction_on s₃ fun l₃ => H l₁ l₂ l₃\n#align induction_on₃ induction_on₃\n\n",
 "induction_on₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[elab_as_elim]\ntheorem induction_on₂ {C : Finmap β → Finmap β → Prop} (s₁ s₂ : Finmap β)\n    (H : ∀ a₁ a₂ : AList β, C (to_finmap a₁) (to_finmap a₂)) : C s₁ s₂ :=\n  induction_on s₁ fun l₁ => induction_on s₂ fun l₂ => H l₁ l₂\n#align induction_on₂ induction_on₂\n\n",
 "induction_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[elab_as_elim]\ntheorem induction_on {C : Finmap β → Prop} (s : Finmap β) (H : ∀ a : AList β, C (to_finmap a)) : C s := by\n  rcases s with ⟨⟨a⟩, h⟩ <;> exact H ⟨a, h⟩\n#align induction_on induction_on\n\n",
 "extract_eq_lookup_erase":
 "@[simp]\ntheorem extract_eq_lookup_erase (a : α) (s : Finmap β) : extract a s = (lookup a s, erase a s) :=\n  induction_on s fun s => by simp [extract]\n#align extract_eq_lookup_erase extract_eq_lookup_erase\n\n",
 "ext_lookup":
 "theorem ext_lookup {s₁ s₂ : Finmap β} : (∀ x, s₁.lookup x = s₂.lookup x) → s₁ = s₂ :=\n  induction_on₂ s₁ s₂ fun s₁ s₂ h => by\n    simp only [AList.lookup, lookup_to_finmap] at h\n    rw [AList.toFinmap_eq]\n    apply lookup_ext s₁.nodupkeys s₂.nodupkeys\n    intro x y\n    rw [h]\n#align ext_lookup ext_lookup\n\n",
 "ext_iff":
 "@[simp]\ntheorem ext_iff {s t : Finmap β} : s.entries = t.entries ↔ s = t :=\n  ⟨ext, congr_arg _⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext : ∀ {s t : Finmap β}, s.entries = t.entries → s = t\n  | ⟨l₁, h₁⟩, ⟨l₂, h₂⟩, H => by congr\n#align ext ext\n\n",
 "erase_union_singleton":
 "theorem erase_union_singleton (a : α) (b : β a) (s : Finmap β) (h : s.lookup a = some b) :\n    s.erase a ∪ singleton a b = s :=\n  ext_lookup fun x => by\n    by_cases h' : x = a\n    · subst a\n      rw [lookup_union_right not_mem_erase_self, lookup_singleton_eq, h]\n    · have : x ∉ singleton a b := by rwa [mem_singleton]\n      rw [lookup_union_left_of_not_in this, lookup_erase_ne h']\n#align erase_union_singleton erase_union_singleton\n\n",
 "erase_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem erase_to_finmap (a : α) (s : AList β) : erase a (to_finmap s) = to_finmap (s.erase a) := by simp [erase]\n#align erase_to_finmap erase_to_finmap\n\n",
 "erase_erase":
 "theorem erase_erase {a a' : α} {s : Finmap β} : erase a (erase a' s) = erase a' (erase a s) :=\n  induction_on s fun s => ext (by simp only [erase_erase, erase_to_finmap])\n#align erase_erase erase_erase\n\n",
 "empty_union":
 "@[simp]\ntheorem empty_union {s₁ : Finmap β} : ∅ ∪ s₁ = s₁ :=\n  induction_on s₁ fun s₁ => by\n    rw [← empty_to_finmap] <;> simp [-empty_to_finmap, AList.toFinmap_eq, union_to_finmap, AList.union_assoc]\n#align empty_union empty_union\n\n",
 "empty_to_finmap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `to_finmap -/\n@[simp]\ntheorem empty_to_finmap : (to_finmap ∅ : Finmap β) = ∅ :=\n  rfl\n#align empty_to_finmap empty_to_finmap\n\n",
 "disjoint_union_right":
 "theorem disjoint_union_right (x y z : Finmap β) : Disjoint x (y ∪ z) ↔ Disjoint x y ∧ Disjoint x z := by\n  rw [disjoint.symm_iff, disjoint_union_left, disjoint.symm_iff _ x, disjoint.symm_iff _ x]\n#align disjoint_union_right disjoint_union_right\n\n",
 "disjoint_union_left":
 "theorem disjoint_union_left (x y z : Finmap β) : Disjoint (x ∪ y) z ↔ Disjoint x z ∧ Disjoint y z := by\n  simp [Disjoint, Finmap.mem_union, or_imp, forall_and]\n#align disjoint_union_left disjoint_union_left\n\n",
 "disjoint_empty":
 "theorem disjoint_empty (x : Finmap β) : Disjoint ∅ x :=\n  fun.\n#align disjoint_empty disjoint_empty\n\n",
 "coe_nodupkeys":
 "@[simp]\ntheorem coe_nodupkeys {l : List (Sigma β)} : @NodupKeys α β l ↔ l.nodupkeys :=\n  iff.rfl\n#align coe_nodupkeys coe_nodupkeys\n\n",
 "coe_keys":
 "/-\nCopyright (c) 2018 Sean Leather. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sean Leather, Mario Carneiro\n-/\n@[simp]\ntheorem coe_keys {l : List (Sigma β)} : keys (l : Multiset (Sigma β)) = (l.keys : Multiset α) :=\n  rfl\n#align coe_keys coe_keys\n\n"}