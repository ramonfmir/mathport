{"subset_of_bunionᵢ_subset_bunionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Pairwise.subset_of_bunionᵢ_subset_bunionᵢ /-\ntheorem Pairwise.subset_of_bunionᵢ_subset_bunionᵢ (h₀ : Pairwise («expr on » Disjoint f)) (h₁ : ∀ i ∈ s, (f i).nonempty)\n    (h :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) ⊆\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :\n    s ⊆ t :=\n  Set.PairwiseDisjoint.subset_of_bunionᵢ_subset_bunionᵢ (h₀.set_pairwise _) h₁ h\n#align pairwise.subset_of_bUnion_subset_bUnion Pairwise.subset_of_bunionᵢ_subset_bunionᵢ\n-/\n\n",
 "pairwise_sUnion":
 "theorem pairwise_sUnion {r : α → α → Prop} {s : Set (Set α)} (h : DirectedOn (· ⊆ ·) s) :\n    (⋃₀ s).pairwise r ↔ ∀ a ∈ s, Set.Pairwise a r :=\n  by\n  rw [sUnion_eq_Union, pairwise_Union h.directed_coe, SetCoe.forall]\n  rfl\n#align pairwise_sUnion pairwise_sUnion\n\n",
 "pairwise_disjoint_sUnion":
 "theorem pairwise_disjoint_sUnion {s : Set (Set ι)} (h : DirectedOn (· ⊆ ·) s) :\n    (⋃₀ s).pairwise_disjoint f ↔ ∀ ⦃a⦄, a ∈ s → Set.PairwiseDisjoint a f :=\n  pairwise_unionₛ h\n#align pairwise_disjoint_sUnion pairwise_disjoint_sUnion\n\n",
 "pairwise_disjoint_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem pairwise_disjoint_Union {g : ι' → Set ι} (h : Directed (· ⊆ ·) g) :\n    («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            (g n)).pairwise_disjoint\n        f ↔\n      ∀ ⦃n⦄, (g n).pairwise_disjoint f :=\n  pairwise_unionᵢ h\n#align pairwise_disjoint_Union pairwise_disjoint_Union\n\n",
 "pairwise_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\ntheorem pairwise_Union {f : ι → Set α} (h : Directed (· ⊆ ·) f) :\n    («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f n)).pairwise r ↔\n      ∀ n, (f n).pairwise r :=\n  by\n  constructor\n  · intro H n\n    exact Pairwise.mono (subset_Union _ _) H\n  · intro H i hi j hj hij\n    rcases mem_Union.1 hi with ⟨m, hm⟩\n    rcases mem_Union.1 hj with ⟨n, hn⟩\n    rcases h m n with ⟨p, mp, np⟩\n    exact H p (mp hm) (np hn) hij\n#align pairwise_Union pairwise_Union\n\n",
 "bunionᵢ_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Pairwise.bunionᵢ_injective /-\ntheorem Pairwise.bunionᵢ_injective (h₀ : Pairwise («expr on » Disjoint f)) (h₁ : ∀ i, (f i).nonempty) :\n    injective fun s : Set ι =>\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) :=\n  fun s t h =>\n  ((h₀.subset_of_bUnion_subset_bUnion fun _ _ => h₁ _) <| h.subset).antisymm <|\n    (h₀.subset_of_bUnion_subset_bUnion fun _ _ => h₁ _) <| h.superset\n#align pairwise.bUnion_injective Pairwise.bunionᵢ_injective\n-/\n\n",
 "bUnion_diff_bUnion_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem bUnion_diff_bUnion_eq {s t : Set ι} {f : ι → Set α} (h : (s ∪ t).pairwise_disjoint f) :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) \\\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) :=\n  by\n  refine'\n    (bUnion_diff_bUnion_subset f s t).antisymm (Union₂_subset fun i hi a ha => (mem_diff _).2 ⟨mem_bUnion hi.1 ha, _⟩)\n  rw [mem_Union₂]; rintro ⟨j, hj, haj⟩\n  exact (h (or.inl hi.1) (or.inr hj) (ne_of_mem_of_not_mem hj hi.2).symm).le_bot ⟨ha, haj⟩\n#align bUnion_diff_bUnion_eq bUnion_diff_bUnion_eq\n\n",
 "bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- Bind operation for `set.pairwise_disjoint`. If you want to only consider finsets of indices, you\ncan use `set.pairwise_disjoint.bUnion_finset`. -/\ntheorem pairwise_disjoint.bUnion {s : Set ι'} {g : ι' → Set ι} {f : ι → α}\n    (hs :\n      s.pairwise_disjoint fun i' : ι' =>\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f i))\n    (hg : ∀ i ∈ s, (g i).pairwise_disjoint f) :\n    («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (g i)).pairwise_disjoint\n      f :=\n  by\n  rintro a ha b hb hab\n  simp_rw [Set.mem_unionᵢ] at ha hb\n  obtain ⟨c, hc, ha⟩ := ha\n  obtain ⟨d, hd, hb⟩ := hb\n  obtain hcd | hcd := eq_or_ne (g c) (g d)\n  · exact hg d hd (hcd.subst ha) hb hab\n  · exact (hs hc hd <| ne_of_apply_ne _ hcd).mono (le_supᵢ₂ a ha) (le_supᵢ₂ b hb)\n#align pairwise_disjoint.bUnion pairwise_disjoint.bUnion\n\n"}