{"union":
 "theorem pairwise_disjoint.union (hs : s.pairwise_disjoint f) (ht : t.pairwise_disjoint f)\n    (h : ∀ ⦃i⦄, i ∈ s → ∀ ⦃j⦄, j ∈ t → i ≠ j → Disjoint (f i) (f j)) : (s ∪ t).pairwise_disjoint f :=\n  pairwiseDisjoint_union.2 ⟨hs, ht, h⟩\n#align pairwise_disjoint.union pairwise_disjoint.union\n\n",
 "subset":
 "theorem pairwise_disjoint.subset (ht : t.pairwise_disjoint f) (h : s ⊆ t) : s.pairwise_disjoint f :=\n  Pairwise.mono h ht\n#align pairwise_disjoint.subset pairwise_disjoint.subset\n\n",
 "range":
 "theorem pairwise_disjoint.range (g : s → ι) (hg : ∀ i : s, f (g i) ≤ f i) (ht : s.pairwise_disjoint f) :\n    (range g).pairwise_disjoint f := by\n  rintro _ ⟨x, rfl⟩ _ ⟨y, rfl⟩ hxy\n  exact (ht x.2 y.2 fun h => hxy <| congr_arg g <| Subtype.ext h).mono (hg x) (hg y)\n#align pairwise_disjoint.range pairwise_disjoint.range\n\n",
 "pairwise_univ":
 "theorem pairwise_univ : (univ : Set α).pairwise r ↔ Pairwise r := by\n  simp only [Set.Pairwise, Pairwise, mem_univ, forall_const]\n#align pairwise_univ pairwise_univ\n\n",
 "pairwise_union_of_symmetric":
 "theorem pairwise_union_of_symmetric (hr : symmetric r) :\n    (s ∪ t).pairwise r ↔ s.pairwise r ∧ t.pairwise r ∧ ∀ a ∈ s, ∀ b ∈ t, a ≠ b → r a b :=\n  pairwise_union.trans <| by simp only [hr.iff, and_self_iff]\n#align pairwise_union_of_symmetric pairwise_union_of_symmetric\n\n",
 "pairwise_union":
 "theorem pairwise_union : (s ∪ t).pairwise r ↔ s.pairwise r ∧ t.pairwise r ∧ ∀ a ∈ s, ∀ b ∈ t, a ≠ b → r a b ∧ r b a :=\n  by\n  simp only [Set.Pairwise, mem_union, or_imp, forall_and]\n  exact\n    ⟨fun H => ⟨H.1.1, H.2.2, H.2.1, fun x hx y hy hne => H.1.2 y hy x hx hne.symm⟩, fun H =>\n      ⟨⟨H.1, fun x hx y hy hne => H.2.2.2 y hy x hx hne.symm⟩, H.2.2.1, H.2.1⟩⟩\n#align pairwise_union pairwise_union\n\n",
 "pairwise_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem pairwise_top (s : Set α) : s.pairwise («expr⊤») :=\n  pairwise_of_forall s _ fun a b => trivial\n#align pairwise_top pairwise_top\n\n",
 "pairwise_subtype_iff_pairwise_set":
 "#print pairwise_subtype_iff_pairwise_set /-\ntheorem pairwise_subtype_iff_pairwise_set (s : Set α) (r : α → α → Prop) :\n    (Pairwise fun (x : s) (y : s) => r x y) ↔ s.pairwise r := by\n  simp only [Pairwise, Set.Pairwise, SetCoe.forall, ne.def, Subtype.ext_iff, Subtype.coe_mk]\n#align pairwise_subtype_iff_pairwise_set pairwise_subtype_iff_pairwise_set\n-/\n\n",
 "pairwise_singleton":
 "@[simp]\ntheorem pairwise_singleton (a : α) (r : α → α → Prop) : Set.Pairwise {a} r :=\n  subsingleton_singleton.pairwise r\n#align pairwise_singleton pairwise_singleton\n\n",
 "pairwise_pair_of_symmetric":
 "theorem pairwise_pair_of_symmetric (hr : symmetric r) : Set.Pairwise {a, b} r ↔ a ≠ b → r a b := by\n  simp [pairwise_insert_of_symmetric hr]\n#align pairwise_pair_of_symmetric pairwise_pair_of_symmetric\n\n",
 "pairwise_pair":
 "theorem pairwise_pair : Set.Pairwise {a, b} r ↔ a ≠ b → r a b ∧ r b a := by simp [pairwise_insert]\n#align pairwise_pair pairwise_pair\n\n",
 "pairwise_on_bool":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n#print pairwise_on_bool /-\n/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\ntheorem pairwise_on_bool (hr : symmetric r) {a b : α} : Pairwise («expr on » r fun c => cond c a b) ↔ r a b := by\n  simpa [Pairwise, function.on_fun] using @hr a b\n#align pairwise_on_bool pairwise_on_bool\n-/\n\n",
 "pairwise_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n#print Symmetric.pairwise_on /-\ntheorem Symmetric.pairwise_on [linear_order ι] (hr : symmetric r) (f : ι → α) :\n    Pairwise («expr on » r f) ↔ ∀ ⦃m n⦄, m < n → r (f m) (f n) :=\n  ⟨fun h m n hmn => h hmn.ne, fun h m n hmn => hmn.lt_or_lt.elim (@h _ _) fun h' => hr (h h')⟩\n#align symmetric.pairwise_on Symmetric.pairwise_on\n-/\n\n",
 "pairwise_insert_of_symmetric_of_not_mem":
 "theorem pairwise_insert_of_symmetric_of_not_mem (hr : symmetric r) (ha : a ∉ s) :\n    (insert a s).pairwise r ↔ s.pairwise r ∧ ∀ b ∈ s, r a b := by\n  simp only [pairwise_insert_of_not_mem ha, hr.iff a, and_self_iff]\n#align pairwise_insert_of_symmetric_of_not_mem pairwise_insert_of_symmetric_of_not_mem\n\n",
 "pairwise_insert_of_symmetric":
 "theorem pairwise_insert_of_symmetric (hr : symmetric r) :\n    (insert a s).pairwise r ↔ s.pairwise r ∧ ∀ b ∈ s, a ≠ b → r a b := by\n  simp only [pairwise_insert, hr.iff a, and_self_iff]\n#align pairwise_insert_of_symmetric pairwise_insert_of_symmetric\n\n",
 "pairwise_insert_of_not_mem":
 "theorem pairwise_insert_of_not_mem (ha : a ∉ s) : (insert a s).pairwise r ↔ s.pairwise r ∧ ∀ b ∈ s, r a b ∧ r b a :=\n  pairwise_insert.trans <| and_congr_right' <| forall₂_congr fun b hb => by simp [(ne_of_mem_of_not_mem hb ha).symm]\n#align pairwise_insert_of_not_mem pairwise_insert_of_not_mem\n\n",
 "pairwise_insert":
 "theorem pairwise_insert : (insert a s).pairwise r ↔ s.pairwise r ∧ ∀ b ∈ s, a ≠ b → r a b ∧ r b a := by\n  simp only [insert_eq, pairwise_union, pairwise_singleton, true_and_iff, mem_singleton_iff, forall_eq]\n#align pairwise_insert pairwise_insert\n\n",
 "pairwise_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem inj_on.pairwise_image {s : Set ι} (h : s.inj_on f) :\n    («expr '' » f s).pairwise r ↔ s.pairwise («expr on » r f) := by\n  simp (config := { contextual := true }) [h.eq_iff, Set.Pairwise]\n#align inj_on.pairwise_image inj_on.pairwise_image\n\n",
 "pairwise_iff_of_refl":
 "theorem pairwise_iff_of_refl [is_refl α r] : s.pairwise r ↔ ∀ ⦃a⦄, a ∈ s → ∀ ⦃b⦄, b ∈ s → r a b :=\n  forall₄_congr fun a _ b _ => or_iff_not_imp_left.symm.trans <| or_iff_right_of_imp of_eq\n#align pairwise_iff_of_refl pairwise_iff_of_refl\n\n",
 "pairwise_iff_exists_forall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_iff_exists_forall [Nonempty ι] (s : Set α) (f : α → ι) {r : ι → ι → Prop} [is_equiv ι r] :\n    s.pairwise («expr on » r f) ↔ ∃ z, ∀ x ∈ s, r (f x) z :=\n  by\n  rcases s.eq_empty_or_nonempty with (rfl | hne)\n  · simp\n  · exact hne.pairwise_iff_exists_forall\n#align pairwise_iff_exists_forall pairwise_iff_exists_forall\n\n",
 "pairwise_eq_iff_exists_eq":
 "/-- A function `f : α → ι` with nonempty codomain takes pairwise equal values on a set `s` if and\nonly if for some `z` in the codomain, `f` takes value `z` on all `x ∈ s`. See also\n`set.nonempty.pairwise_eq_iff_exists_eq` for a version that assumes `set.nonempty s` instead of\n`[nonempty ι]`. -/\ntheorem pairwise_eq_iff_exists_eq [Nonempty ι] (s : Set α) (f : α → ι) :\n    (s.pairwise fun x y => f x = f y) ↔ ∃ z, ∀ x ∈ s, f x = z :=\n  pairwise_iff_exists_forall s f\n#align pairwise_eq_iff_exists_eq pairwise_eq_iff_exists_eq\n\n",
 "pairwise_empty":
 "@[simp]\ntheorem pairwise_empty (r : α → α → Prop) : (∅ : Set α).pairwise r :=\n  subsingleton_empty.pairwise r\n#align pairwise_empty pairwise_empty\n\n",
 "pairwise_disjoint_union":
 "theorem pairwise_disjoint_union :\n    (s ∪ t).pairwise_disjoint f ↔\n      s.pairwise_disjoint f ∧ t.pairwise_disjoint f ∧ ∀ ⦃i⦄, i ∈ s → ∀ ⦃j⦄, j ∈ t → i ≠ j → Disjoint (f i) (f j) :=\n  pairwise_union_of_symmetric <| symmetric_disjoint.comap f\n#align pairwise_disjoint_union pairwise_disjoint_union\n\n",
 "pairwise_disjoint_singleton":
 "@[simp]\ntheorem pairwise_disjoint_singleton (i : ι) (f : ι → α) : PairwiseDisjoint {i} f :=\n  pairwise_singleton i _\n#align pairwise_disjoint_singleton pairwise_disjoint_singleton\n\n",
 "pairwise_disjoint_range_singleton":
 "theorem pairwise_disjoint_range_singleton : (Set.range (singleton : ι → Set ι)).pairwise_disjoint id :=\n  by\n  rintro _ ⟨a, rfl⟩ _ ⟨b, rfl⟩ h\n  exact disjoint_singleton.2 (ne_of_apply_ne _ h)\n#align pairwise_disjoint_range_singleton pairwise_disjoint_range_singleton\n\n",
 "pairwise_disjoint_on_bool":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n#print pairwise_disjoint_on_bool /-\ntheorem pairwise_disjoint_on_bool [SemilatticeInf α] [OrderBot α] {a b : α} :\n    Pairwise («expr on » Disjoint fun c => cond c a b) ↔ Disjoint a b :=\n  pairwise_on_bool Disjoint.symm\n#align pairwise_disjoint_on_bool pairwise_disjoint_on_bool\n-/\n\n",
 "pairwise_disjoint_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n#print pairwise_disjoint_on /-\ntheorem pairwise_disjoint_on [SemilatticeInf α] [OrderBot α] [linear_order ι] (f : ι → α) :\n    Pairwise («expr on » Disjoint f) ↔ ∀ ⦃m n⦄, m < n → Disjoint (f m) (f n) :=\n  Symmetric.pairwise_on Disjoint.symm f\n#align pairwise_disjoint_on pairwise_disjoint_on\n-/\n\n",
 "pairwise_disjoint_mono":
 "#print pairwise_disjoint_mono /-\ntheorem pairwise_disjoint_mono (hs : s.pairwise_disjoint f) (h : g ≤ f) : s.pairwise_disjoint g :=\n  hs.mono_on fun i _ => h i\n#align pairwise_disjoint.mono pairwise_disjoint_mono\n-/\n\n",
 "pairwise_disjoint_insert_of_not_mem":
 "theorem pairwise_disjoint_insert_of_not_mem {i : ι} (hi : i ∉ s) :\n    (insert i s).pairwise_disjoint f ↔ s.pairwise_disjoint f ∧ ∀ j ∈ s, Disjoint (f i) (f j) :=\n  pairwise_insert_of_symmetric_of_not_mem (symmetric_disjoint.comap f) hi\n#align pairwise_disjoint_insert_of_not_mem pairwise_disjoint_insert_of_not_mem\n\n",
 "pairwise_disjoint_insert":
 "theorem pairwise_disjoint_insert {i : ι} :\n    (insert i s).pairwise_disjoint f ↔ s.pairwise_disjoint f ∧ ∀ j ∈ s, i ≠ j → Disjoint (f i) (f j) :=\n  Set.pairwise_insert_of_symmetric <| symmetric_disjoint.comap f\n#align pairwise_disjoint_insert pairwise_disjoint_insert\n\n",
 "pairwise_disjoint_image_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.prod -/\n/-- The partial images of a binary function `f` whose partial evaluations are injective are pairwise\ndisjoint iff `f` is injective . -/\ntheorem pairwise_disjoint_image_right_iff {f : α → β → γ} {s : Set α} {t : Set β} (hf : ∀ a ∈ s, injective (f a)) :\n    (s.pairwise_disjoint fun a => «expr '' » (f a) t) ↔ (set.prod s t).inj_on fun p => f p.1 p.2 :=\n  by\n  refine' ⟨fun hs x hx y hy (h : f _ _ = _) => _, fun hs x hx y hy h => _⟩\n  · suffices x.1 = y.1 by exact Prod.ext this (hf _ hx.1 <| h.trans <| by rw [this])\n    refine' hs.elim hx.1 hy.1 (not_disjoint_iff.2 ⟨_, mem_image_of_mem _ hx.2, _⟩)\n    rw [h]\n    exact mem_image_of_mem _ hy.2\n  · refine' disjoint_iff_inf_le.mpr _\n    rintro _ ⟨⟨a, ha, hab⟩, b, hb, rfl⟩\n    exact h (congr_arg Prod.fst <| hs (mk_mem_prod hx ha) (mk_mem_prod hy hb) hab)\n#align pairwise_disjoint_image_right_iff pairwise_disjoint_image_right_iff\n\n",
 "pairwise_disjoint_image_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.prod -/\n/-- The partial images of a binary function `f` whose partial evaluations are injective are pairwise\ndisjoint iff `f` is injective . -/\ntheorem pairwise_disjoint_image_left_iff {f : α → β → γ} {s : Set α} {t : Set β}\n    (hf : ∀ b ∈ t, injective fun a => f a b) :\n    (t.pairwise_disjoint fun b => «expr '' » (fun a => f a b) s) ↔ (set.prod s t).inj_on fun p => f p.1 p.2 :=\n  by\n  refine' ⟨fun ht x hx y hy (h : f _ _ = _) => _, fun ht x hx y hy h => _⟩\n  · suffices x.2 = y.2 by exact Prod.ext (hf _ hx.2 <| h.trans <| by rw [this]) this\n    refine' ht.elim hx.2 hy.2 (not_disjoint_iff.2 ⟨_, mem_image_of_mem _ hx.1, _⟩)\n    rw [h]\n    exact mem_image_of_mem _ hy.1\n  · refine' disjoint_iff_inf_le.mpr _\n    rintro _ ⟨⟨a, ha, hab⟩, b, hb, rfl⟩\n    exact h (congr_arg Prod.snd <| ht (mk_mem_prod ha hx) (mk_mem_prod hb hy) hab)\n#align pairwise_disjoint_image_left_iff pairwise_disjoint_image_left_iff\n\n",
 "pairwise_disjoint_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem inj_on.pairwise_disjoint_image {g : ι' → ι} {s : Set ι'} (h : s.inj_on g) :\n    («expr '' » g s).pairwise_disjoint f ↔ s.pairwise_disjoint (f ∘ g) :=\n  h.pairwise_image\n#align inj_on.pairwise_disjoint_image inj_on.pairwise_disjoint_image\n\n",
 "pairwise_disjoint_fiber":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print pairwise_disjoint_fiber /-\ntheorem pairwise_disjoint_fiber (f : ι → α) : Pairwise («expr on » Disjoint fun a : α => «expr ⁻¹' » f {a}) :=\n  Set.pairwise_univ.1 <| Set.pairwiseDisjoint_fiber f univ\n#align pairwise_disjoint_fiber pairwise_disjoint_fiber\n-/\n\n",
 "pairwise_disjoint_empty":
 "@[simp]\ntheorem pairwise_disjoint_empty : (∅ : Set ι).pairwise_disjoint f :=\n  pairwise_empty _\n#align pairwise_disjoint_empty pairwise_disjoint_empty\n\n",
 "pairwise_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem pairwise_bot_iff : s.pairwise («expr⊥» : α → α → Prop) ↔ (s : Set α).subsingleton :=\n  ⟨fun h a ha b hb => h.eq ha hb id, fun h => h.pairwise _⟩\n#align pairwise_bot_iff pairwise_bot_iff\n\n",
 "pairwise":
 "protected theorem subsingleton.pairwise (h : s.subsingleton) (r : α → α → Prop) : s.pairwise r := fun x hx y hy hne =>\n  (hne (h hx hy)).elim\n#align subsingleton.pairwise subsingleton.pairwise\n\n",
 "mono_on":
 "theorem pairwise_disjoint.mono_on (hs : s.pairwise_disjoint f) (h : ∀ ⦃i⦄, i ∈ s → g i ≤ f i) : s.pairwise_disjoint g :=\n  fun a ha b hb hab => (hs ha hb hab).mono (h ha) (h hb)\n#align pairwise_disjoint.mono_on pairwise_disjoint.mono_on\n\n",
 "mono'":
 "theorem pairwise.mono' (H : r ≤ p) (hr : s.pairwise r) : s.pairwise p :=\n  hr.imp H\n#align pairwise.mono' pairwise.mono'\n\n",
 "mono":
 "#print Pairwise.mono /-\ntheorem Pairwise.mono (h : t ⊆ s) (hs : s.pairwise r) : t.pairwise r := fun x xt y yt => hs (h xt) (h yt)\n#align pairwise.mono Pairwise.mono\n-/\n\n",
 "insert_of_symmetric_of_not_mem":
 "theorem pairwise.insert_of_symmetric_of_not_mem (hs : s.pairwise r) (hr : symmetric r) (ha : a ∉ s)\n    (h : ∀ b ∈ s, r a b) : (insert a s).pairwise r :=\n  (pairwise_insert_of_symmetric_of_not_mem hr ha).2 ⟨hs, h⟩\n#align pairwise.insert_of_symmetric_of_not_mem pairwise.insert_of_symmetric_of_not_mem\n\n",
 "insert_of_symmetric":
 "theorem pairwise.insert_of_symmetric (hs : s.pairwise r) (hr : symmetric r) (h : ∀ b ∈ s, a ≠ b → r a b) :\n    (insert a s).pairwise r :=\n  (pairwise_insert_of_symmetric hr).2 ⟨hs, h⟩\n#align pairwise.insert_of_symmetric pairwise.insert_of_symmetric\n\n",
 "insert_of_not_mem":
 "theorem pairwise_disjoint.insert_of_not_mem (hs : s.pairwise_disjoint f) {i : ι} (hi : i ∉ s)\n    (h : ∀ j ∈ s, Disjoint (f i) (f j)) : (insert i s).pairwise_disjoint f :=\n  (Set.pairwiseDisjoint_insert_of_not_mem hi).2 ⟨hs, h⟩\n#align pairwise_disjoint.insert_of_not_mem pairwise_disjoint.insert_of_not_mem\n\n",
 "insert":
 "theorem pairwise_disjoint.insert (hs : s.pairwise_disjoint f) {i : ι} (h : ∀ j ∈ s, i ≠ j → Disjoint (f i) (f j)) :\n    (insert i s).pairwise_disjoint f :=\n  Set.pairwiseDisjoint_insert.2 ⟨hs, h⟩\n#align pairwise_disjoint.insert pairwise_disjoint.insert\n\n",
 "image_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem pairwise_disjoint.image_of_le (hs : s.pairwise_disjoint f) {g : ι → ι} (hg : f ∘ g ≤ f) :\n    («expr '' » g s).pairwise_disjoint f :=\n  by\n  rintro _ ⟨a, ha, rfl⟩ _ ⟨b, hb, rfl⟩ h\n  exact (hs ha hb <| ne_of_apply_ne _ h).mono (hg a) (hg b)\n#align pairwise_disjoint.image_of_le pairwise_disjoint.image_of_le\n\n",
 "eq_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem pairwise_disjoint.eq_of_le (hs : s.pairwise_disjoint f) {i j : ι} (hi : i ∈ s) (hj : j ∈ s) (hf : f i ≠ «expr⊥»)\n    (hij : f i ≤ f j) : i = j :=\n  hs.elim' hi hj fun h => hf <| (inf_of_le_left hij).symm.trans h\n#align pairwise_disjoint.eq_of_le pairwise_disjoint.eq_of_le\n\n",
 "elim_set":
 "-- classical\ntheorem pairwise_disjoint.elim_set {s : Set ι} {f : ι → Set α} (hs : s.pairwise_disjoint f) {i j : ι} (hi : i ∈ s)\n    (hj : j ∈ s) (a : α) (hai : a ∈ f i) (haj : a ∈ f j) : i = j :=\n  hs.elim hi hj <| not_disjoint_iff.2 ⟨a, hai, haj⟩\n#align pairwise_disjoint.elim_set pairwise_disjoint.elim_set\n\n",
 "elim'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n-- classical\ntheorem pairwise_disjoint.elim' (hs : s.pairwise_disjoint f) {i j : ι} (hi : i ∈ s) (hj : j ∈ s)\n    (h : «expr ⊓ » (f i) (f j) ≠ «expr⊥») : i = j :=\n  hs.elim hi hj fun hij => h hij.eq_bot\n#align pairwise_disjoint.elim' pairwise_disjoint.elim'\n\n",
 "elim":
 "-- classical\ntheorem pairwise_disjoint.elim (hs : s.pairwise_disjoint f) {i j : ι} (hi : i ∈ s) (hj : j ∈ s)\n    (h : ¬Disjoint (f i) (f j)) : i = j :=\n  hs.eq hi hj h\n#align pairwise_disjoint.elim pairwise_disjoint.elim\n\n"}