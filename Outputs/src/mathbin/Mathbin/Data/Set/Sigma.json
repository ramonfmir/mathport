{"univ_sigma_univ":
 "theorem univ_sigma_univ : ((@univ ι).sigma fun _ => @univ (α i)) = univ :=\n  ext fun _ => true_and_iff _\n#align univ_sigma_univ univ_sigma_univ\n\n",
 "union_sigma":
 "@[simp]\ntheorem union_sigma : (s₁ ∪ s₂).sigma t = s₁.sigma t ∪ s₂.sigma t :=\n  ext fun _ => or_and_right\n#align union_sigma union_sigma\n\n",
 "singleton_sigma_singleton":
 "theorem singleton_sigma_singleton {a : ∀ i, α i} : (({i} : set ι).sigma fun i => ({a i} : set (α i))) = {⟨i, a i⟩} := by\n  rw [sigma_singleton, image_singleton]\n#align singleton_sigma_singleton singleton_sigma_singleton\n\n",
 "singleton_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem singleton_sigma : ({i} : set ι).sigma t = «expr '' » (sigma.mk i) (t i) :=\n  ext fun x => by\n    constructor\n    · obtain ⟨j, a⟩ := x\n      rintro ⟨rfl : j = i, ha⟩\n      exact mem_image_of_mem _ ha\n    · rintro ⟨b, hb, rfl⟩\n      exact ⟨rfl, hb⟩\n#align singleton_sigma singleton_sigma\n\n",
 "sigma_univ_range_eq":
 "theorem sigma_univ_range_eq {f : ∀ i, α i → β i} :\n    ((univ : set ι).sigma fun i => range (f i)) = range fun x : Σi, α i => ⟨x.1, f _ x.2⟩ :=\n  ext <| by simp [range]\n#align sigma_univ_range_eq sigma_univ_range_eq\n\n",
 "sigma_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem sigma_univ : s.sigma (fun _ => univ : ∀ i, set (α i)) = «expr ⁻¹' » sigma.fst s :=\n  ext fun _ => and_true_iff _\n#align sigma_univ sigma_univ\n\n",
 "sigma_union":
 "@[simp]\ntheorem sigma_union : (s.sigma fun i => t₁ i ∪ t₂ i) = s.sigma t₁ ∪ s.sigma t₂ :=\n  ext fun _ => and_or_left\n#align sigma_union sigma_union\n\n",
 "sigma_subset_preimage_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem sigma_subset_preimage_fst (s : set ι) (t : ∀ i, set (α i)) : s.sigma t ⊆ «expr ⁻¹' » sigma.fst s := fun a =>\n  And.left\n#align sigma_subset_preimage_fst sigma_subset_preimage_fst\n\n",
 "sigma_subset_iff":
 "theorem sigma_subset_iff : s.sigma t ⊆ u ↔ ∀ ⦃i⦄, i ∈ s → ∀ ⦃a⦄, a ∈ t i → (⟨i, a⟩ : Σi, α i) ∈ u :=\n  ⟨fun h i hi a ha => h <| mk_mem_sigma hi ha, fun h ⟨i, a⟩ ha => h ha.1 ha.2⟩\n#align sigma_subset_iff sigma_subset_iff\n\n",
 "sigma_snd":
 "theorem nonempty.sigma_snd : (s.sigma t : set _).nonempty → ∃ i ∈ s, (t i).nonempty := fun ⟨x, hx⟩ =>\n  ⟨x.1, hx.1, x.2, hx.2⟩\n#align nonempty.sigma_snd nonempty.sigma_snd\n\n",
 "sigma_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem sigma_singleton {a : ∀ i, α i} :\n    (s.sigma fun i => ({a i} : set (α i))) = «expr '' » (fun i => sigma.mk i <| a i) s :=\n  by\n  ext ⟨x, y⟩\n  simp [and_left_comm, eq_comm]\n#align sigma_singleton sigma_singleton\n\n",
 "sigma_preimage_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem sigma_preimage_right {g : ∀ i, β i → α i} :\n    (s.sigma fun i => «expr ⁻¹' » (g i) (t i)) = «expr ⁻¹' » (fun p : Σi, β i => sigma.mk p.1 (g _ p.2)) (s.sigma t) :=\n  rfl\n#align sigma_preimage_right sigma_preimage_right\n\n",
 "sigma_preimage_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem sigma_preimage_left {f : ι' → ι} :\n    ((«expr ⁻¹' » f s).sigma fun i => t (f i)) = «expr ⁻¹' » (fun p : Σi, α (f i) => sigma.mk _ p.2) (s.sigma t) :=\n  rfl\n#align sigma_preimage_left sigma_preimage_left\n\n",
 "sigma_preimage_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem sigma_preimage_eq {f : ι' → ι} {g : ∀ i, β i → α i} :\n    ((«expr ⁻¹' » f s).sigma fun i => «expr ⁻¹' » (g (f i)) (t (f i))) =\n      «expr ⁻¹' » (fun p : Σi, β (f i) => sigma.mk _ (g _ p.2)) (s.sigma t) :=\n  rfl\n#align sigma_preimage_eq sigma_preimage_eq\n\n",
 "sigma_nonempty_iff":
 "theorem sigma_nonempty_iff : (s.sigma t : set _).nonempty ↔ ∃ i ∈ s, (t i).nonempty :=\n  ⟨Nonempty.sigma_snd, fun ⟨i, hi, a, ha⟩ => ⟨⟨i, a⟩, hi, ha⟩⟩\n#align sigma_nonempty_iff sigma_nonempty_iff\n\n",
 "sigma_mono":
 "theorem sigma_mono (hs : s₁ ⊆ s₂) (ht : ∀ i, t₁ i ⊆ t₂ i) : s₁.sigma t₁ ⊆ s₂.sigma t₂ := fun x hx =>\n  ⟨hs hx.1, ht _ hx.2⟩\n#align sigma_mono sigma_mono\n\n",
 "sigma_inter_sigma":
 "theorem sigma_inter_sigma : s₁.sigma t₁ ∩ s₂.sigma t₂ = (s₁ ∩ s₂).sigma fun i => t₁ i ∩ t₂ i :=\n  by\n  ext ⟨x, y⟩\n  simp [and_assoc', and_left_comm]\n#align sigma_inter_sigma sigma_inter_sigma\n\n",
 "sigma_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem sigma_insert {a : ∀ i, α i} :\n    (s.sigma fun i => insert (a i) (t i)) = «expr '' » (fun i => ⟨i, a i⟩) s ∪ s.sigma t := by\n  simp_rw [insert_eq, sigma_union, sigma_singleton]\n#align sigma_insert sigma_insert\n\n",
 "sigma_fst":
 "theorem nonempty.sigma_fst : (s.sigma t : set _).nonempty → s.nonempty := fun ⟨x, hx⟩ => ⟨x.1, hx.1⟩\n#align nonempty.sigma_fst nonempty.sigma_fst\n\n",
 "sigma_eq_empty_iff":
 "theorem sigma_eq_empty_iff : s.sigma t = ∅ ↔ ∀ i ∈ s, t i = ∅ :=\n  not_nonempty_iff_eq_empty.symm.trans <|\n    sigma_nonempty_iff.not.trans <| by simp only [not_nonempty_iff_eq_empty, not_exists]\n#align sigma_eq_empty_iff sigma_eq_empty_iff\n\n",
 "sigma_empty":
 "@[simp]\ntheorem sigma_empty : (s.sigma fun i => (∅ : set (α i))) = ∅ :=\n  ext fun _ => and_false_iff _\n#align sigma_empty sigma_empty\n\n",
 "sigma_diff_sigma":
 "theorem sigma_diff_sigma : s₁.sigma t₁ \\ s₂.sigma t₂ = s₁.sigma (t₁ \\ t₂) ∪ (s₁ \\ s₂).sigma t₁ :=\n  ext fun x => by by_cases h₁ : x.1 ∈ s₁ <;> by_cases h₂ : x.2 ∈ t₁ x.1 <;> simp [*, ← imp_iff_or_not]\n#align sigma_diff_sigma sigma_diff_sigma\n\n",
 "sigma":
 "protected theorem nonempty.sigma : s.nonempty → (∀ i, (t i).nonempty) → (s.sigma t : set _).nonempty := fun ⟨i, hi⟩ h =>\n  let ⟨a, ha⟩ := h i\n  ⟨⟨i, a⟩, hi, ha⟩\n#align nonempty.sigma nonempty.sigma\n\n",
 "range_sigma_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\n@[simp]\ntheorem range_sigma_mk (i : ι) : range (sigma.mk i : α i → sigma α) = «expr ⁻¹' » sigma.fst {i} :=\n  by\n  apply subset.antisymm\n  · rintro _ ⟨b, rfl⟩\n    simp\n  · rintro ⟨x, y⟩ (rfl | _)\n    exact mem_range_self y\n#align range_sigma_mk range_sigma_mk\n\n",
 "preimage_sigma_map_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_sigma_map_sigma {α' : ι' → Type _} (f : ι → ι') (g : ∀ i, α i → α' (f i)) (s : set ι')\n    (t : ∀ i, set (α' i)) :\n    «expr ⁻¹' » (sigma.map f g) (s.sigma t) = («expr ⁻¹' » f s).sigma fun i => «expr ⁻¹' » (g i) (t (f i)) :=\n  rfl\n#align preimage_sigma_map_sigma preimage_sigma_map_sigma\n\n",
 "preimage_image_sigma_mk_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem preimage_image_sigma_mk_of_ne (h : i ≠ j) (s : set (α j)) :\n    «expr ⁻¹' » (sigma.mk i) («expr '' » (sigma.mk j) s) = ∅ :=\n  by\n  ext x\n  simp [h.symm]\n#align preimage_image_sigma_mk_of_ne preimage_image_sigma_mk_of_ne\n\n",
 "mk_sigma_iff":
 "@[simp]\ntheorem mk_sigma_iff : (⟨i, a⟩ : Σi, α i) ∈ s.sigma t ↔ i ∈ s ∧ a ∈ t i :=\n  iff.rfl\n#align mk_sigma_iff mk_sigma_iff\n\n",
 "mk_preimage_sigma_fn_eq_if":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem mk_preimage_sigma_fn_eq_if {β : Type _} [decidable_pred (· ∈ s)] (g : β → α i) :\n    «expr ⁻¹' » (fun b => sigma.mk i (g b)) (s.sigma t) = if i ∈ s then «expr ⁻¹' » g (t i) else ∅ :=\n  ext fun _ => by split_ifs <;> simp [h]\n#align mk_preimage_sigma_fn_eq_if mk_preimage_sigma_fn_eq_if\n\n",
 "mk_preimage_sigma_eq_if":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem mk_preimage_sigma_eq_if [decidable_pred (· ∈ s)] :\n    «expr ⁻¹' » (sigma.mk i) (s.sigma t) = if i ∈ s then t i else ∅ := by split_ifs <;> simp [h]\n#align mk_preimage_sigma_eq_if mk_preimage_sigma_eq_if\n\n",
 "mk_preimage_sigma_eq_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem mk_preimage_sigma_eq_empty (hi : i ∉ s) : «expr ⁻¹' » (sigma.mk i) (s.sigma t) = ∅ :=\n  ext fun _ => iff_of_false (hi ∘ And.left) id\n#align mk_preimage_sigma_eq_empty mk_preimage_sigma_eq_empty\n\n",
 "mk_preimage_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem mk_preimage_sigma (hi : i ∈ s) : «expr ⁻¹' » (sigma.mk i) (s.sigma t) = t i :=\n  ext fun _ => and_iff_right hi\n#align mk_preimage_sigma mk_preimage_sigma\n\n",
 "mk_mem_sigma":
 "theorem mk_mem_sigma (hi : i ∈ s) (ha : a ∈ t i) : (⟨i, a⟩ : Σi, α i) ∈ s.sigma t :=\n  ⟨hi, ha⟩\n#align mk_mem_sigma mk_mem_sigma\n\n",
 "mem_sigma_iff":
 "@[simp]\ntheorem mem_sigma_iff : x ∈ s.sigma t ↔ x.1 ∈ s ∧ x.2 ∈ t x.1 :=\n  iff.rfl\n#align mem_sigma_iff mem_sigma_iff\n\n",
 "insert_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem insert_sigma : (insert i s).sigma t = «expr '' » (sigma.mk i) (t i) ∪ s.sigma t := by\n  rw [insert_eq, union_sigma, singleton_sigma]\n#align insert_sigma insert_sigma\n\n",
 "image_sigma_mk_subset_sigma_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_sigma_mk_subset_sigma_right (hi : i ∈ s) : «expr '' » (sigma.mk i) (t i) ⊆ s.sigma t :=\n  image_subset_iff.2 fun a => and.intro hi\n#align image_sigma_mk_subset_sigma_right image_sigma_mk_subset_sigma_right\n\n",
 "image_sigma_mk_subset_sigma_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_sigma_mk_subset_sigma_left {a : ∀ i, α i} (ha : ∀ i, a i ∈ t i) :\n    «expr '' » (fun i => sigma.mk i (a i)) s ⊆ s.sigma t :=\n  image_subset_iff.2 fun i hi => ⟨hi, ha _⟩\n#align image_sigma_mk_subset_sigma_left image_sigma_mk_subset_sigma_left\n\n",
 "image_sigma_mk_preimage_sigma_map_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_sigma_mk_preimage_sigma_map_subset {β : ι' → Type _} (f : ι → ι') (g : ∀ i, α i → β (f i)) (i : ι)\n    (s : set (β (f i))) :\n    «expr '' » (sigma.mk i) («expr ⁻¹' » (g i) s) ⊆ «expr ⁻¹' » (sigma.map f g) («expr '' » (sigma.mk (f i)) s) :=\n  image_subset_iff.2 fun x hx => ⟨g i x, hx, rfl⟩\n#align image_sigma_mk_preimage_sigma_map_subset image_sigma_mk_preimage_sigma_map_subset\n\n",
 "image_sigma_mk_preimage_sigma_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_sigma_mk_preimage_sigma_map {β : ι' → Type _} {f : ι → ι'} (hf : function.injective f)\n    (g : ∀ i, α i → β (f i)) (i : ι) (s : set (β (f i))) :\n    «expr '' » (sigma.mk i) («expr ⁻¹' » (g i) s) = «expr ⁻¹' » (sigma.map f g) («expr '' » (sigma.mk (f i)) s) :=\n  by\n  refine' (image_sigma_mk_preimage_sigma_map_subset f g i s).antisymm _\n  rintro ⟨j, x⟩ ⟨y, hys, hxy⟩\n  simp only [hf.eq_iff, sigma.map] at hxy\n  rcases hxy with ⟨rfl, hxy⟩; rw [heq_iff_eq] at hxy; subst y\n  exact ⟨x, hys, rfl⟩\n#align image_sigma_mk_preimage_sigma_map image_sigma_mk_preimage_sigma_map\n\n",
 "fst_image_sigma_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem fst_image_sigma_subset (s : set ι) (t : ∀ i, set (α i)) : «expr '' » sigma.fst (s.sigma t) ⊆ s :=\n  image_subset_iff.2 fun a => And.left\n#align fst_image_sigma_subset fst_image_sigma_subset\n\n",
 "fst_image_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem fst_image_sigma (s : set ι) (ht : ∀ i, (t i).nonempty) : «expr '' » sigma.fst (s.sigma t) = s :=\n  (fst_image_sigma_subset _ _).antisymm fun i hi =>\n    let ⟨a, ha⟩ := ht i\n    ⟨⟨i, a⟩, ⟨hi, ha⟩, rfl⟩\n#align fst_image_sigma fst_image_sigma\n\n",
 "forall_sigma_iff":
 "theorem forall_sigma_iff {p : (Σi, α i) → Prop} : (∀ x ∈ s.sigma t, p x) ↔ ∀ ⦃i⦄, i ∈ s → ∀ ⦃a⦄, a ∈ t i → p ⟨i, a⟩ :=\n  sigma_subset_iff\n#align forall_sigma_iff forall_sigma_iff\n\n",
 "exists_sigma_iff":
 "theorem exists_sigma_iff {p : (Σi, α i) → Prop} : (∃ x ∈ s.sigma t, p x) ↔ ∃ i ∈ s, ∃ a ∈ t i, p ⟨i, a⟩ :=\n  ⟨fun ⟨⟨i, a⟩, ha, h⟩ => ⟨i, ha.1, a, ha.2, h⟩, fun ⟨i, hi, a, ha, h⟩ => ⟨⟨i, a⟩, ⟨hi, ha⟩, h⟩⟩\n#align exists_sigma_iff exists_sigma_iff\n\n",
 "empty_sigma":
 "@[simp]\ntheorem empty_sigma : (∅ : set ι).sigma t = ∅ :=\n  ext fun _ => false_and_iff _\n#align empty_sigma empty_sigma\n\n"}