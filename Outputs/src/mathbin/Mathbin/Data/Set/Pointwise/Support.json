{"support_comp_inv_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_comp_inv_smul₀ [Zero γ] {c : α} (hc : c ≠ 0) (f : β → γ) :\n    (support fun x => f («expr • » c⁻¹ x)) = «expr • » c (support f) :=\n  by\n  ext x\n  simp only [mem_smul_set_iff_inv_smul_mem₀ hc, mem_support]\n#align support_comp_inv_smul₀ support_comp_inv_smul₀\n\n",
 "support_comp_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_comp_inv_smul [Zero γ] (c : α) (f : β → γ) :\n    (support fun x => f («expr • » c⁻¹ x)) = «expr • » c (support f) :=\n  by\n  ext x\n  simp only [mem_smul_set_iff_inv_smul_mem, mem_support]\n#align support_comp_inv_smul support_comp_inv_smul\n\n",
 "mul_support_comp_inv_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mul_support_comp_inv_smul₀ [One γ] {c : α} (hc : c ≠ 0) (f : β → γ) :\n    (mul_support fun x => f («expr • » c⁻¹ x)) = «expr • » c (mul_support f) :=\n  by\n  ext x\n  simp only [mem_smul_set_iff_inv_smul_mem₀ hc, mem_mul_support]\n#align mul_support_comp_inv_smul₀ mul_support_comp_inv_smul₀\n\n",
 "mul_support_comp_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\ntheorem mul_support_comp_inv_smul [One γ] (c : α) (f : β → γ) :\n    (mul_support fun x => f («expr • » c⁻¹ x)) = «expr • » c (mul_support f) :=\n  by\n  ext x\n  simp only [mem_smul_set_iff_inv_smul_mem, mem_mul_support]\n#align mul_support_comp_inv_smul mul_support_comp_inv_smul\n\n"}