{"smul_eq_self_of_preimage_zpow_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_eq_self_of_preimage_zpow_eq_self /-\n/-\nCopyright (c) 2022 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n/-- Let `n : ℤ` and `s` a subset of a commutative group `G` that is invariant under preimage for\nthe map `x ↦ x^n`. Then `s` is invariant under the pointwise action of the subgroup of elements\n`g : G` such that `g^(n^j) = 1` for some `j : ℕ`. (This subgroup is called the Prüfer subgroup when\n `G` is the `circle` and `n` is prime.) -/\n@[to_additive\n      \"Let `n : ℤ` and `s` a subset of an additive commutative group `G` that is invariant\\nunder preimage for the map `x ↦ n • x`. Then `s` is invariant under the pointwise action of the\\nadditive subgroup of elements `g : G` such that `(n^j) • g = 0` for some `j : ℕ`. (This additive\\nsubgroup is called the Prüfer subgroup when `G` is the `add_circle` and `n` is prime.)\"]\ntheorem smul_eq_self_of_preimage_zpow_eq_self {G : Type _} [comm_group G] {n : ℤ} {s : set G}\n    (hs : «expr ⁻¹' » (fun x => x ^ n) s = s) {g : G} {j : ℕ} (hg : g ^ n ^ j = 1) : «expr • » g s = s :=\n  by\n  suffices ∀ {g' : G} (hg' : g' ^ n ^ j = 1), «expr • » g' s ⊆ s\n    by\n    refine' le_antisymm (this hg) _\n    conv_lhs => rw [← smul_inv_smul g s]\n    replace hg : g⁻¹ ^ n ^ j = 1\n    · rw [inv_zpow, hg, inv_one]\n    simpa only [le_eq_subset, set_smul_subset_set_smul_iff] using this hg\n  rw [(is_fixed_pt.preimage_iterate hs j : «expr ⁻¹' » («expr ^[ ]» (zpowGroupHom n) j) s = s).symm]\n  rintro g' hg' - ⟨y, hy, rfl⟩\n  change («expr ^[ ]» (zpowGroupHom n) j) (g' * y) ∈ s\n  replace hg' : («expr ^[ ]» (zpowGroupHom n) j) g' = 1\n  · simpa [zpowGroupHom]\n  rwa [MonoidHom.iterate_map_mul, hg', one_mul]\n#align smul_eq_self_of_preimage_zpow_eq_self smul_eq_self_of_preimage_zpow_eq_self\n-/\n\n"}