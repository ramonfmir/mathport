{"le_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem equitable_on.le_add_one (h : equitable_on (s : set α) f) (ha : a ∈ s) :\n    f a ≤\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) / s.card +\n        1 :=\n  (equitable_on_iff_le_le_add_one.1 h a ha).2\n#align equitable_on.le_add_one equitable_on.le_add_one\n\n",
 "le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem equitable_on.le (h : equitable_on (s : set α) f) (ha : a ∈ s) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) / s.card ≤\n      f a :=\n  (equitable_on_iff_le_le_add_one.1 h a ha).1\n#align equitable_on.le equitable_on.le\n\n",
 "equitable_on_singleton":
 "theorem equitable_on_singleton (a : α) (f : α → β) : set.equitable_on {a} f :=\n  Set.subsingleton_singleton.equitable_on f\n#align equitable_on_singleton equitable_on_singleton\n\n",
 "equitable_on_iff_le_le_add_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem equitable_on_iff_le_le_add_one :\n    equitable_on (s : set α) f ↔\n      ∀ a ∈ s,\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) /\n              s.card ≤\n            f a ∧\n          f a ≤\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) /\n                s.card +\n              1 :=\n  by\n  rw [set.equitable_on_iff_exists_le_le_add_one]\n  refine' ⟨_, fun h => ⟨_, h⟩⟩\n  rintro ⟨b, hb⟩\n  by_cases h : ∀ a ∈ s, f a = b + 1\n  · intro a ha\n    rw [h _ ha, sum_const_nat h, nat.mul_div_cancel_left _ (card_pos.2 ⟨a, ha⟩)]\n    exact ⟨le_rfl, nat.le_succ _⟩\n  push_neg  at h\n  obtain ⟨x, hx₁, hx₂⟩ := h\n  suffices h :\n    b = finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) / s.card\n  · simp_rw [← h]\n    apply hb\n  symm\n  refine'\n    Nat.div_eq_of_lt_le (le_trans (by simp [mul_comm]) (sum_le_sum fun a ha => (hb a ha).1))\n      ((sum_lt_sum (fun a ha => (hb a ha).2) ⟨_, hx₁, (hb _ hx₁).2.lt_of_ne hx₂⟩).trans_le _)\n  rw [mul_comm, sum_const_nat]\n  exact fun _ _ => rfl\n#align equitable_on_iff_le_le_add_one equitable_on_iff_le_le_add_one\n\n",
 "equitable_on_iff_exists_le_le_add_one":
 "theorem equitable_on_iff_exists_le_le_add_one {s : set α} {f : α → ℕ} :\n    s.equitable_on f ↔ ∃ b, ∀ a ∈ s, b ≤ f a ∧ f a ≤ b + 1 :=\n  by\n  refine' ⟨_, fun ⟨b, hb⟩ x y hx hy => (hb x hx).2.trans (add_le_add_right (hb y hy).1 _)⟩\n  obtain rfl | ⟨x, hx⟩ := s.eq_empty_or_nonempty\n  · simp\n  intro hs\n  by_cases h : ∀ y ∈ s, f x ≤ f y\n  · exact ⟨f x, fun y hy => ⟨h _ hy, hs hy hx⟩⟩\n  push_neg  at h\n  obtain ⟨w, hw, hwx⟩ := h\n  refine' ⟨f w, fun y hy => ⟨nat.le_of_succ_le_succ _, hs hy hw⟩⟩\n  rw [(nat.succ_le_of_lt hwx).antisymm (hs hx hw)]\n  exact hs hx hy\n#align equitable_on_iff_exists_le_le_add_one equitable_on_iff_exists_le_le_add_one\n\n",
 "equitable_on_iff_exists_image_subset_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem equitable_on_iff_exists_image_subset_Icc {s : set α} {f : α → ℕ} :\n    s.equitable_on f ↔ ∃ b, «expr '' » f s ⊆ Icc b (b + 1) := by\n  simpa only [image_subset_iff] using equitable_on_iff_exists_le_le_add_one\n#align equitable_on_iff_exists_image_subset_Icc equitable_on_iff_exists_image_subset_Icc\n\n",
 "equitable_on_iff_exists_eq_eq_add_one":
 "theorem equitable_on_iff_exists_eq_eq_add_one {s : set α} {f : α → ℕ} :\n    s.equitable_on f ↔ ∃ b, ∀ a ∈ s, f a = b ∨ f a = b + 1 := by\n  simp_rw [equitable_on_iff_exists_le_le_add_one, Nat.le_and_le_add_one_iff]\n#align equitable_on_iff_exists_eq_eq_add_one equitable_on_iff_exists_eq_eq_add_one\n\n",
 "equitable_on_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem equitable_on_iff :\n    equitable_on (s : set α) f ↔\n      ∀ a ∈ s,\n        f a =\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) /\n              s.card ∨\n          f a =\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) /\n                s.card +\n              1 :=\n  by simp_rw [equitable_on_iff_le_le_add_one, Nat.le_and_le_add_one_iff]\n#align equitable_on_iff equitable_on_iff\n\n",
 "equitable_on_empty":
 "/-\nCopyright (c) 2021 Yaël Dillies, Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies, Bhavik Mehta\n-/\n@[simp]\ntheorem equitable_on_empty [LE β] [Add β] [One β] (f : α → β) : equitable_on ∅ f := fun a _ ha =>\n  (Set.not_mem_empty _ ha).elim\n#align equitable_on_empty equitable_on_empty\n\n",
 "equitable_on":
 "theorem subsingleton.equitable_on {s : set α} (hs : s.subsingleton) (f : α → β) : s.equitable_on f := fun i j hi hj =>\n  by\n  rw [hs hi hj]\n  exact le_add_of_nonneg_right zero_le_one\n#align subsingleton.equitable_on subsingleton.equitable_on\n\n"}