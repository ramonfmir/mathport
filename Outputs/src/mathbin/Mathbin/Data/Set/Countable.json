{"union":
 "theorem countable.union {s t : Set α} (hs : s.countable) (ht : t.countable) : (s ∪ t).countable :=\n  countable_union.2 ⟨hs, ht⟩\n#align countable.union countable.union\n\n",
 "to_countable":
 "/-- Prove `set.countable` from a `countable` instance on the subtype. -/\ntheorem to_countable (s : Set α) [Countable s] : s.countable :=\n  countable_coe_iff.mp ‹_›\n#align to_countable to_countable\n\n",
 "subset_range_enumerate":
 "theorem subset_range_enumerate {s : Set α} (h : s.countable) (default : α) : s ⊆ range (enumerateCountable h default) :=\n  fun x hx => ⟨@encodable.encode s h.to_encodable ⟨x, hx⟩, by simp [enumerate_countable, encodable.encodek]⟩\n#align subset_range_enumerate subset_range_enumerate\n\n",
 "sUnion_iff":
 "theorem countable.sUnion_iff {s : Set (Set α)} (hs : s.countable) : (⋃₀ s).countable ↔ ∀ a ∈ s, (a : _).countable := by\n  rw [sUnion_eq_bUnion, hs.bUnion_iff]\n#align countable.sUnion_iff countable.sUnion_iff\n\n",
 "prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\nprotected theorem countable.prod {s : Set α} {t : Set β} (hs : s.countable) (ht : t.countable) :\n    Set.Countable (finset.product s t) :=\n  by\n  haveI : Countable s := hs.to_subtype\n  haveI : Countable t := ht.to_subtype\n  exact (Countable.of_equiv _ <| (Equiv.Set.prod _ _).symm).to_set\n#align countable.prod countable.prod\n\n",
 "preimage_of_inj_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem countable.preimage_of_inj_on {s : Set β} (hs : s.countable) {f : α → β} (hf : InjOn f («expr ⁻¹' » f s)) :\n    («expr ⁻¹' » f s).countable :=\n  (mapsTo_preimage f s).countable_of_inj_on hf hs\n#align countable.preimage_of_inj_on countable.preimage_of_inj_on\n\n",
 "preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\nprotected theorem countable.preimage {s : Set β} (hs : s.countable) {f : α → β} (hf : injective f) :\n    («expr ⁻¹' » f s).countable :=\n  hs.preimage_of_inj_on (hf.inj_on _)\n#align countable.preimage countable.preimage\n\n",
 "of_subsingleton":
 "@[nontriviality]\ntheorem countable.of_subsingleton [subsingleton α] (s : Set α) : s.countable :=\n  (Finite.of_subsingleton s).countable\n#align countable.of_subsingleton countable.of_subsingleton\n\n",
 "mono":
 "theorem countable.mono {s₁ s₂ : Set α} (h : s₁ ⊆ s₂) : s₂.countable → s₁.countable\n  | ⟨H⟩ => ⟨@ofInj _ _ H _ (embeddingOfSubset _ _ h).2⟩\n#align countable.mono countable.mono\n\n",
 "insert":
 "theorem countable.insert {s : Set α} (a : α) (h : s.countable) : (insert a s).countable :=\n  countable_insert.2 h\n#align countable.insert countable.insert\n\n",
 "image2":
 "theorem countable.image2 {s : Set α} {t : Set β} (hs : s.countable) (ht : t.countable) (f : α → β → γ) :\n    (image2 f s t).countable := by\n  rw [← image_prod]\n  exact (hs.prod ht).image _\n#align countable.image2 countable.image2\n\n",
 "image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem countable.image {s : Set α} (hs : s.countable) (f : α → β) : («expr '' » f s).countable :=\n  by\n  rw [image_eq_range]\n  haveI := hs.to_subtype\n  apply countable_range\n#align countable.image countable.image\n\n",
 "exists_seq_supr_eq_top_iff_countable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem exists_seq_supr_eq_top_iff_countable [CompleteLattice α] {p : α → Prop} (h : ∃ x, p x) :\n    (∃ s : ℕ → α,\n        (∀ n, p (s n)) ∧\n          «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s n) =\n            «expr⊤») ↔\n      ∃ S : Set α, S.countable ∧ (∀ s ∈ S, p s) ∧ supₛ S = «expr⊤» :=\n  by\n  constructor\n  · rintro ⟨s, hps, hs⟩\n    refine' ⟨range s, countable_range s, forall_range_iff.2 hps, _⟩\n    rwa [supₛ_range]\n  · rintro ⟨S, hSc, hps, hS⟩\n    rcases eq_empty_or_nonempty S with (rfl | hne)\n    · rw [supₛ_empty] at hS\n      haveI := subsingleton_of_bot_eq_top hS\n      rcases h with ⟨x, hx⟩\n      exact ⟨fun n => x, fun n => hx, subsingleton.elim _ _⟩\n    · rcases(Set.countable_iff_exists_surjective hne).1 hSc with ⟨s, hs⟩\n      refine' ⟨fun n => s n, fun n => hps _ (s n).coe_prop, _⟩\n      rwa [hs.supr_comp, ← supₛ_eq_supᵢ']\n#align exists_seq_supr_eq_top_iff_countable exists_seq_supr_eq_top_iff_countable\n\n",
 "exists_seq_cover_iff_countable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem exists_seq_cover_iff_countable {p : Set α → Prop} (h : ∃ s, p s) :\n    (∃ s : ℕ → Set α,\n        (∀ n, p (s n)) ∧\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s n) =\n            univ) ↔\n      ∃ S : Set (Set α), S.countable ∧ (∀ s ∈ S, p s) ∧ ⋃₀ S = univ :=\n  exists_seq_supᵢ_eq_top_iff_countable h\n#align exists_seq_cover_iff_countable exists_seq_cover_iff_countable\n\n",
 "exists_eq_range":
 "/-- If `s : set α` is a nonempty countable set, then there exists a map\n`f : ℕ → α` such that `s = range f`. -/\ntheorem countable.exists_eq_range {s : Set α} (hc : s.countable) (hs : s.nonempty) : ∃ f : ℕ → α, s = range f :=\n  by\n  rcases hc.exists_surjective hs with ⟨f, hf⟩\n  refine' ⟨coe ∘ f, _⟩\n  rw [hf.range_comp, Subtype.range_coe]\n#align countable.exists_eq_range countable.exists_eq_range\n\n",
 "countable_univ_pi":
 "theorem countable_univ_pi {π : α → Type _} [Finite α] {s : ∀ a, Set (π a)} (hs : ∀ a, (s a).countable) :\n    (pi univ s).countable :=\n  haveI := fun a => (hs a).to_subtype\n  (Countable.of_equiv _ (Equiv.Set.univPi s).symm).to_set\n#align countable_univ_pi countable_univ_pi\n\n",
 "countable_univ":
 "theorem countable_univ [Countable α] : (univ : Set α).countable :=\n  to_countable univ\n#align countable_univ countable_univ\n\n",
 "countable_union":
 "@[simp]\ntheorem countable_union {s t : Set α} : (s ∪ t).countable ↔ s.countable ∧ t.countable := by\n  simp [union_eq_Union, and_comm]\n#align countable_union countable_union\n\n",
 "countable_toSet":
 "#print Finset.countable_toSet /-\ntheorem Finset.countable_toSet (s : Finset α) : Set.Countable (↑s : Set α) :=\n  s.finite_to_set.countable\n#align finset.countable_to_set Finset.countable_toSet\n-/\n\n",
 "countable_singleton":
 "@[simp]\ntheorem countable_singleton (a : α) : ({a} : Set α).countable :=\n  ⟨ofEquiv _ (Equiv.Set.singleton a)⟩\n#align countable_singleton countable_singleton\n\n",
 "countable_set_of_finite_subset":
 "/-- The set of finite subsets of a countable set is countable. -/\ntheorem countable_set_of_finite_subset {s : Set α} : s.countable → { t | Set.Finite t ∧ t ⊆ s }.countable\n  | ⟨h⟩ => by\n    skip\n    refine' countable.mono _ (countable_range fun t : Finset s => { a | ∃ h : a ∈ s, subtype.mk a h ∈ t })\n    rintro t ⟨⟨ht⟩, ts⟩; skip\n    refine' ⟨finset.univ.map (embedding_of_subset _ _ ts), Set.ext fun a => _⟩\n    simpa using @ts a\n#align countable_set_of_finite_subset countable_set_of_finite_subset\n\n",
 "countable_range":
 "theorem countable_range [Countable ι] (f : ι → β) : (range f).countable :=\n  surjective_onto_range.countable.to_set\n#align countable_range countable_range\n\n",
 "countable_pi":
 "theorem countable_pi {π : α → Type _} [Finite α] {s : ∀ a, Set (π a)} (hs : ∀ a, (s a).countable) :\n    { f : ∀ a, π a | ∀ a, f a ∈ s a }.countable := by simpa only [← mem_univ_pi] using countable_univ_pi hs\n#align countable_pi countable_pi\n\n",
 "countable_of_injective_of_countable_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem countable_of_injective_of_countable_image {s : Set α} {f : α → β} (hf : InjOn f s)\n    (hs : («expr '' » f s).countable) : s.countable :=\n  let ⟨g, hg⟩ := countable_iff_exists_injOn.1 hs\n  countable_iff_exists_injOn.2 ⟨g ∘ f, hg.comp hf (mapsTo_image _ _)⟩\n#align countable_of_injective_of_countable_image countable_of_injective_of_countable_image\n\n",
 "countable_of_inj_on":
 "theorem maps_to.countable_of_inj_on {s : Set α} {t : Set β} {f : α → β} (hf : MapsTo f s t) (hf' : InjOn f s)\n    (ht : t.countable) : s.countable :=\n  have : injective (hf.restrict f s t) := (injOn_iff_injective.1 hf').cod_restrict _\n  ⟨@Encodable.ofInj _ _ ht.to_encodable _ this⟩\n#align maps_to.countable_of_inj_on maps_to.countable_of_inj_on\n\n",
 "countable_is_top":
 "theorem countable_is_top (α : Type _) [partial_order α] : { x : α | IsTop x }.countable :=\n  (finite_isTop α).countable\n#align countable_is_top countable_is_top\n\n",
 "countable_is_bot":
 "theorem countable_is_bot (α : Type _) [partial_order α] : { x : α | IsBot x }.countable :=\n  (finite_isBot α).countable\n#align countable_is_bot countable_is_bot\n\n",
 "countable_insert":
 "@[simp]\ntheorem countable_insert {s : Set α} {a : α} : (insert a s).countable ↔ s.countable := by\n  simp only [insert_eq, countable_union, countable_singleton, true_and_iff]\n#align countable_insert countable_insert\n\n",
 "countable_iff_exists_surjective":
 "#print countable_iff_exists_surjective /-\n/-- A non-empty set is countable iff there exists a surjection from the\nnatural numbers onto the subtype induced by the set.\n-/\nprotected theorem countable_iff_exists_surjective {s : Set α} (hs : s.nonempty) :\n    s.countable ↔ ∃ f : ℕ → s, surjective f :=\n  countable_coe_iff.symm.trans <| @countable_iff_exists_surjective s hs.to_subtype\n#align countable_iff_exists_surjective countable_iff_exists_surjective\n-/\n\n",
 "countable_iff_exists_subset_range":
 "theorem countable_iff_exists_subset_range [Nonempty α] {s : Set α} : s.countable ↔ ∃ f : ℕ → α, s ⊆ range f :=\n  ⟨fun h => by\n    inhabit α\n    exact ⟨enumerate_countable h default, subset_range_enumerate _ _⟩, fun ⟨f, hsf⟩ => (countable_range f).mono hsf⟩\n#align countable_iff_exists_subset_range countable_iff_exists_subset_range\n\n",
 "countable_iff_exists_injective":
 "#print countable_iff_exists_injective /-\nprotected theorem countable_iff_exists_injective {s : Set α} : s.countable ↔ ∃ f : s → ℕ, injective f :=\n  countable_coe_iff.symm.trans (countable_iff_exists_injective s)\n#align countable_iff_exists_injective countable_iff_exists_injective\n-/\n\n",
 "countable_iff_exists_inj_on":
 "/-- A set `s : set α` is countable if and only if there exists a function `α → ℕ` injective\non `s`. -/\ntheorem countable_iff_exists_inj_on {s : Set α} : s.countable ↔ ∃ f : α → ℕ, InjOn f s :=\n  Set.countable_iff_exists_injective.trans exists_injOn_iff_injective.symm\n#align countable_iff_exists_inj_on countable_iff_exists_inj_on\n\n",
 "countable_empty":
 "@[simp]\ntheorem countable_empty : (∅ : Set α).countable :=\n  to_countable _\n#align countable_empty countable_empty\n\n",
 "countable_coe_iff":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\n@[simp]\ntheorem countable_coe_iff {s : Set α} : Countable s ↔ s.countable :=\n  Encodable.nonempty_encodable.symm\n#align countable_coe_iff countable_coe_iff\n\n",
 "countable_Union_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem countable_Union_iff [Countable ι] {t : ι → Set α} :\n    («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i)).countable ↔\n      ∀ i, (t i).countable :=\n  ⟨fun h i => h.mono <| subset_unionᵢ _ _, countable_unionᵢ⟩\n#align countable_Union_iff countable_Union_iff\n\n",
 "countable_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem countable_Union {t : ι → Set α} [Countable ι] (ht : ∀ i, (t i).countable) :\n    («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i)).countable :=\n  by\n  haveI := fun a => (ht a).to_subtype\n  rw [Union_eq_range_psigma]\n  apply countable_range\n#align countable_Union countable_Union\n\n",
 "countable":
 "theorem subsingleton.countable {s : Set α} (hs : s.subsingleton) : s.countable :=\n  hs.finite.countable\n#align subsingleton.countable subsingleton.countable\n\n",
 "bUnion_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem countable.bUnion_iff {s : Set α} {t : ∀ a ∈ s, Set β} (hs : s.countable) :\n    («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (t a ‹_›)).countable ↔\n      ∀ a ∈ s, (t a ‹_›).countable :=\n  by\n  haveI := hs.to_subtype\n  rw [bUnion_eq_Union, countable_Union_iff, SetCoe.forall']\n#align countable.bUnion_iff countable.bUnion_iff\n\n"}