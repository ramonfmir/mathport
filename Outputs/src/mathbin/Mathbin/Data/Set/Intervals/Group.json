{"sub_mem_Ioo_iff_right":
 "theorem sub_mem_Ioo_iff_right : a - b ∈ Set.Ioo c d ↔ b ∈ Set.Ioo (a - d) (a - c) :=\n  (and_comm' _ _).trans <| and_congr sub_lt_comm lt_sub_comm\n#align sub_mem_Ioo_iff_right sub_mem_Ioo_iff_right\n\n",
 "sub_mem_Ioo_iff_left":
 "theorem sub_mem_Ioo_iff_left : a - b ∈ Set.Ioo c d ↔ a ∈ Set.Ioo (c + b) (d + b) :=\n  and_congr lt_sub_iff_add_lt sub_lt_iff_lt_add\n#align sub_mem_Ioo_iff_left sub_mem_Ioo_iff_left\n\n",
 "sub_mem_Ioc_iff_right":
 "theorem sub_mem_Ioc_iff_right : a - b ∈ Set.Ioc c d ↔ b ∈ Set.Ico (a - d) (a - c) :=\n  (and_comm' _ _).trans <| and_congr sub_le_comm lt_sub_comm\n#align sub_mem_Ioc_iff_right sub_mem_Ioc_iff_right\n\n",
 "sub_mem_Ioc_iff_left":
 "theorem sub_mem_Ioc_iff_left : a - b ∈ Set.Ioc c d ↔ a ∈ Set.Ioc (c + b) (d + b) :=\n  and_congr lt_sub_iff_add_lt sub_le_iff_le_add\n#align sub_mem_Ioc_iff_left sub_mem_Ioc_iff_left\n\n",
 "sub_mem_Ico_iff_right":
 "theorem sub_mem_Ico_iff_right : a - b ∈ Set.Ico c d ↔ b ∈ Set.Ioc (a - d) (a - c) :=\n  (and_comm' _ _).trans <| and_congr sub_lt_comm le_sub_comm\n#align sub_mem_Ico_iff_right sub_mem_Ico_iff_right\n\n",
 "sub_mem_Ico_iff_left":
 "theorem sub_mem_Ico_iff_left : a - b ∈ Set.Ico c d ↔ a ∈ Set.Ico (c + b) (d + b) :=\n  and_congr le_sub_iff_add_le sub_lt_iff_lt_add\n#align sub_mem_Ico_iff_left sub_mem_Ico_iff_left\n\n",
 "sub_mem_Icc_iff_right":
 "theorem sub_mem_Icc_iff_right : a - b ∈ Set.Icc c d ↔ b ∈ Set.Icc (a - d) (a - c) :=\n  (and_comm' _ _).trans <| and_congr sub_le_comm le_sub_comm\n#align sub_mem_Icc_iff_right sub_mem_Icc_iff_right\n\n",
 "sub_mem_Icc_iff_left":
 "theorem sub_mem_Icc_iff_left : a - b ∈ Set.Icc c d ↔ a ∈ Set.Icc (c + b) (d + b) :=\n  and_congr le_sub_iff_add_le sub_le_iff_le_add\n#align sub_mem_Icc_iff_left sub_mem_Icc_iff_left\n\n",
 "pairwise_disjoint_Ioo_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n@[to_additive]\ntheorem pairwise_disjoint_Ioo_zpow : Pairwise («expr on » Disjoint fun n : ℤ => Ioo (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ioo_mul_zpow 1 b\n#align pairwise_disjoint_Ioo_zpow pairwise_disjoint_Ioo_zpow\n\n",
 "pairwise_disjoint_Ioo_mul_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n@[to_additive]\ntheorem pairwise_disjoint_Ioo_mul_zpow :\n    Pairwise («expr on » Disjoint fun n : ℤ => Ioo (a * b ^ n) (a * b ^ (n + 1))) := fun m n hmn =>\n  (pairwise_disjoint_Ioc_mul_zpow a b hmn).mono Ioo_subset_Ioc_self Ioo_subset_Ioc_self\n#align pairwise_disjoint_Ioo_mul_zpow pairwise_disjoint_Ioo_mul_zpow\n\n",
 "pairwise_disjoint_Ioo_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_disjoint_Ioo_int_cast : Pairwise («expr on » Disjoint fun n : ℤ => Ioo (n : α) (n + 1)) := by\n  simpa only [zero_add] using pairwise_disjoint_Ioo_add_int_cast (0 : α)\n#align pairwise_disjoint_Ioo_int_cast pairwise_disjoint_Ioo_int_cast\n\n",
 "pairwise_disjoint_Ioo_add_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_disjoint_Ioo_add_int_cast : Pairwise («expr on » Disjoint fun n : ℤ => Ioo (a + n) (a + n + 1)) := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using pairwise_disjoint_Ioo_add_zsmul a (1 : α)\n#align pairwise_disjoint_Ioo_add_int_cast pairwise_disjoint_Ioo_add_int_cast\n\n",
 "pairwise_disjoint_Ioc_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n@[to_additive]\ntheorem pairwise_disjoint_Ioc_zpow : Pairwise («expr on » Disjoint fun n : ℤ => Ioc (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ioc_mul_zpow 1 b\n#align pairwise_disjoint_Ioc_zpow pairwise_disjoint_Ioc_zpow\n\n",
 "pairwise_disjoint_Ioc_mul_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n@[to_additive]\ntheorem pairwise_disjoint_Ioc_mul_zpow :\n    Pairwise («expr on » Disjoint fun n : ℤ => Ioc (a * b ^ n) (a * b ^ (n + 1))) :=\n  by\n  simp_rw [function.on_fun, Set.disjoint_iff]\n  intro m n hmn x hx\n  apply hmn\n  have hb : 1 < b := by\n    have : a * b ^ m < a * b ^ (m + 1) := hx.1.1.trans_le hx.1.2\n    rwa [mul_lt_mul_iff_left, ← mul_one (b ^ m), zpow_add_one, mul_lt_mul_iff_left] at this\n  have i1 := hx.1.1.trans_le hx.2.2\n  have i2 := hx.2.1.trans_le hx.1.2\n  rw [mul_lt_mul_iff_left, zpow_lt_zpow_iff hb, Int.lt_add_one_iff] at i1 i2\n  exact le_antisymm i1 i2\n#align pairwise_disjoint_Ioc_mul_zpow pairwise_disjoint_Ioc_mul_zpow\n\n",
 "pairwise_disjoint_Ioc_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_disjoint_Ioc_int_cast : Pairwise («expr on » Disjoint fun n : ℤ => Ioc (n : α) (n + 1)) := by\n  simpa only [zero_add] using pairwise_disjoint_Ioc_add_int_cast (0 : α)\n#align pairwise_disjoint_Ioc_int_cast pairwise_disjoint_Ioc_int_cast\n\n",
 "pairwise_disjoint_Ioc_add_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_disjoint_Ioc_add_int_cast : Pairwise («expr on » Disjoint fun n : ℤ => Ioc (a + n) (a + n + 1)) := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using pairwise_disjoint_Ioc_add_zsmul a (1 : α)\n#align pairwise_disjoint_Ioc_add_int_cast pairwise_disjoint_Ioc_add_int_cast\n\n",
 "pairwise_disjoint_Ico_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n@[to_additive]\ntheorem pairwise_disjoint_Ico_zpow : Pairwise («expr on » Disjoint fun n : ℤ => Ico (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ico_mul_zpow 1 b\n#align pairwise_disjoint_Ico_zpow pairwise_disjoint_Ico_zpow\n\n",
 "pairwise_disjoint_Ico_mul_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n@[to_additive]\ntheorem pairwise_disjoint_Ico_mul_zpow :\n    Pairwise («expr on » Disjoint fun n : ℤ => Ico (a * b ^ n) (a * b ^ (n + 1))) :=\n  by\n  simp_rw [function.on_fun, Set.disjoint_iff]\n  intro m n hmn x hx\n  apply hmn\n  have hb : 1 < b := by\n    have : a * b ^ m < a * b ^ (m + 1) := hx.1.1.trans_lt hx.1.2\n    rwa [mul_lt_mul_iff_left, ← mul_one (b ^ m), zpow_add_one, mul_lt_mul_iff_left] at this\n  have i1 := hx.1.1.trans_lt hx.2.2\n  have i2 := hx.2.1.trans_lt hx.1.2\n  rw [mul_lt_mul_iff_left, zpow_lt_zpow_iff hb, Int.lt_add_one_iff] at i1 i2\n  exact le_antisymm i1 i2\n#align pairwise_disjoint_Ico_mul_zpow pairwise_disjoint_Ico_mul_zpow\n\n",
 "pairwise_disjoint_Ico_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_disjoint_Ico_int_cast : Pairwise («expr on » Disjoint fun n : ℤ => Ico (n : α) (n + 1)) := by\n  simpa only [zero_add] using pairwise_disjoint_Ico_add_int_cast (0 : α)\n#align pairwise_disjoint_Ico_int_cast pairwise_disjoint_Ico_int_cast\n\n",
 "pairwise_disjoint_Ico_add_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem pairwise_disjoint_Ico_add_int_cast : Pairwise («expr on » Disjoint fun n : ℤ => Ico (a + n) (a + n + 1)) := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using pairwise_disjoint_Ico_add_zsmul a (1 : α)\n#align pairwise_disjoint_Ico_add_int_cast pairwise_disjoint_Ico_add_int_cast\n\n",
 "nonempty_Ico_sdiff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/-- If we remove a smaller interval from a larger, the result is nonempty -/\ntheorem nonempty_Ico_sdiff {x dx y dy : α} (h : dy < dx) (hx : 0 < dx) :\n    Nonempty («expr↥ » (Ico x (x + dx) \\ Ico y (y + dy))) :=\n  by\n  cases' lt_or_le x y with h' h'\n  · use x\n    simp [*, not_le.2 h']\n  · use max x (x + dy)\n    simp [*, le_refl]\n#align nonempty_Ico_sdiff nonempty_Ico_sdiff\n\n",
 "mem_Icc_iff_abs_le":
 "-- I think that symmetric intervals deserve attention and API: they arise all the time,\n-- for instance when considering metric balls in `ℝ`.\ntheorem mem_Icc_iff_abs_le {R : Type _} [LinearOrderedAddCommGroup R] {x y z : R} :\n    |x - y| ≤ z ↔ y ∈ Icc (x - z) (x + z) :=\n  abs_le.trans <| (and_comm' _ _).trans <| and_congr sub_le_comm neg_le_sub_iff_le_add\n#align mem_Icc_iff_abs_le mem_Icc_iff_abs_le\n\n",
 "inv_mem_Ioo_iff":
 "@[to_additive]\ntheorem inv_mem_Ioo_iff : a⁻¹ ∈ Set.Ioo c d ↔ a ∈ Set.Ioo d⁻¹ c⁻¹ :=\n  (and_comm' _ _).trans <| and_congr inv_lt' lt_inv'\n#align inv_mem_Ioo_iff inv_mem_Ioo_iff\n\n",
 "inv_mem_Ioc_iff":
 "@[to_additive]\ntheorem inv_mem_Ioc_iff : a⁻¹ ∈ Set.Ioc c d ↔ a ∈ Set.Ico d⁻¹ c⁻¹ :=\n  (and_comm' _ _).trans <| and_congr inv_le' lt_inv'\n#align inv_mem_Ioc_iff inv_mem_Ioc_iff\n\n",
 "inv_mem_Ico_iff":
 "@[to_additive]\ntheorem inv_mem_Ico_iff : a⁻¹ ∈ Set.Ico c d ↔ a ∈ Set.Ioc d⁻¹ c⁻¹ :=\n  (and_comm' _ _).trans <| and_congr inv_lt' le_inv'\n#align inv_mem_Ico_iff inv_mem_Ico_iff\n\n",
 "inv_mem_Icc_iff":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mario Carneiro, Patrick Massot, Yury Kudryashov, Rémy Degenne\n-/\n@[to_additive]\ntheorem inv_mem_Icc_iff : a⁻¹ ∈ Set.Icc c d ↔ a ∈ Set.Icc d⁻¹ c⁻¹ :=\n  (and_comm' _ _).trans <| and_congr inv_le' le_inv'\n#align inv_mem_Icc_iff inv_mem_Icc_iff\n\n",
 "add_mem_Ioo_iff_right":
 "theorem add_mem_Ioo_iff_right : a + b ∈ Set.Ioo c d ↔ b ∈ Set.Ioo (c - a) (d - a) :=\n  (and_congr sub_lt_iff_lt_add' lt_sub_iff_add_lt').symm\n#align add_mem_Ioo_iff_right add_mem_Ioo_iff_right\n\n",
 "add_mem_Ioo_iff_left":
 "theorem add_mem_Ioo_iff_left : a + b ∈ Set.Ioo c d ↔ a ∈ Set.Ioo (c - b) (d - b) :=\n  (and_congr sub_lt_iff_lt_add lt_sub_iff_add_lt).symm\n#align add_mem_Ioo_iff_left add_mem_Ioo_iff_left\n\n",
 "add_mem_Ioc_iff_right":
 "theorem add_mem_Ioc_iff_right : a + b ∈ Set.Ioc c d ↔ b ∈ Set.Ioc (c - a) (d - a) :=\n  (and_congr sub_lt_iff_lt_add' le_sub_iff_add_le').symm\n#align add_mem_Ioc_iff_right add_mem_Ioc_iff_right\n\n",
 "add_mem_Ioc_iff_left":
 "theorem add_mem_Ioc_iff_left : a + b ∈ Set.Ioc c d ↔ a ∈ Set.Ioc (c - b) (d - b) :=\n  (and_congr sub_lt_iff_lt_add le_sub_iff_add_le).symm\n#align add_mem_Ioc_iff_left add_mem_Ioc_iff_left\n\n",
 "add_mem_Ico_iff_right":
 "theorem add_mem_Ico_iff_right : a + b ∈ Set.Ico c d ↔ b ∈ Set.Ico (c - a) (d - a) :=\n  (and_congr sub_le_iff_le_add' lt_sub_iff_add_lt').symm\n#align add_mem_Ico_iff_right add_mem_Ico_iff_right\n\n",
 "add_mem_Ico_iff_left":
 "theorem add_mem_Ico_iff_left : a + b ∈ Set.Ico c d ↔ a ∈ Set.Ico (c - b) (d - b) :=\n  (and_congr sub_le_iff_le_add lt_sub_iff_add_lt).symm\n#align add_mem_Ico_iff_left add_mem_Ico_iff_left\n\n",
 "add_mem_Icc_iff_right":
 "theorem add_mem_Icc_iff_right : a + b ∈ Set.Icc c d ↔ b ∈ Set.Icc (c - a) (d - a) :=\n  (and_congr sub_le_iff_le_add' le_sub_iff_add_le').symm\n#align add_mem_Icc_iff_right add_mem_Icc_iff_right\n\n",
 "add_mem_Icc_iff_left":
 "theorem add_mem_Icc_iff_left : a + b ∈ Set.Icc c d ↔ a ∈ Set.Icc (c - b) (d - b) :=\n  (and_congr sub_le_iff_le_add le_sub_iff_add_le).symm\n#align add_mem_Icc_iff_left add_mem_Icc_iff_left\n\n"}