{"uIoc_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprΙ -/\ntheorem ord_connected.uIoc_subset (hs : OrdConnected s) ⦃x⦄ (hx : x ∈ s) ⦃y⦄ (hy : y ∈ s) : (exprΙ) x y ⊆ s :=\n  Ioc_subset_Icc_self.trans <| hs.uIcc_subset hx hy\n#align ord_connected.uIoc_subset ord_connected.uIoc_subset\n\n",
 "uIcc_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem ord_connected.uIcc_subset (hs : OrdConnected s) ⦃x⦄ (hx : x ∈ s) ⦃y⦄ (hy : y ∈ s) : set.uIcc x y ⊆ s :=\n  hs.out (min_rec' (· ∈ s) hx hy) (max_rec' (· ∈ s) hx hy)\n#align ord_connected.uIcc_subset ord_connected.uIcc_subset\n\n",
 "preimage_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem ord_connected.preimage_mono {f : β → α} (hs : OrdConnected s) (hf : Monotone f) :\n    OrdConnected («expr ⁻¹' » f s) :=\n  ⟨fun x hx y hy z hz => hs.out hx hy ⟨hf hz.1, hf hz.2⟩⟩\n#align ord_connected.preimage_mono ord_connected.preimage_mono\n\n",
 "preimage_anti":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem ord_connected.preimage_anti {f : β → α} (hs : OrdConnected s) (hf : Antitone f) :\n    OrdConnected («expr ⁻¹' » f s) :=\n  ⟨fun x hx y hy z hz => hs.out hy hx ⟨hf hz.2, hf hz.1⟩⟩\n#align ord_connected.preimage_anti ord_connected.preimage_anti\n\n",
 "out":
 "/-\nCopyright (c) 2020 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem ord_connected.out (h : OrdConnected s) : ∀ ⦃x⦄ (hx : x ∈ s) ⦃y⦄ (hy : y ∈ s), Icc x y ⊆ s :=\n  h.1\n#align ord_connected.out ord_connected.out\n\n",
 "ord_connected_univ":
 "@[instance]\ntheorem ord_connected_univ : OrdConnected (univ : Set α) :=\n  ⟨fun _ _ _ _ => subset_univ _⟩\n#align ord_connected_univ ord_connected_univ\n\n",
 "ord_connected_uIoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprΙ -/\n@[instance]\ntheorem ord_connected_uIoc {a b : α} : OrdConnected ((exprΙ) a b) :=\n  ordConnected_Ioc\n#align ord_connected_uIoc ord_connected_uIoc\n\n",
 "ord_connected_uIcc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\n@[instance]\ntheorem ord_connected_uIcc {a b : α} : OrdConnected (set.uIcc a b) :=\n  ordConnected_Icc\n#align ord_connected_uIcc ord_connected_uIcc\n\n",
 "ord_connected_singleton":
 "@[instance]\ntheorem ord_connected_singleton {α : Type _} [partial_order α] {a : α} : OrdConnected ({a} : Set α) :=\n  by\n  rw [← Icc_self]\n  exact ord_connected_Icc\n#align ord_connected_singleton ord_connected_singleton\n\n",
 "ord_connected_sInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\ntheorem ord_connected_sInter {S : Set (Set α)} (hS : ∀ s ∈ S, OrdConnected s) : OrdConnected («expr⋂₀ » S) :=\n  ⟨fun x hx y hy => subset_interₛ fun s hs => (hS s hs).out (hx s hs) (hy s hs)⟩\n#align ord_connected_sInter ord_connected_sInter\n\n",
 "ord_connected_range":
 "@[instance]\ntheorem ord_connected_range {E : Type _} [OrderIsoClass E α β] (e : E) : OrdConnected (range e) := by\n  simp_rw [← image_univ, ord_connected_image e]\n#align ord_connected_range ord_connected_range\n\n",
 "ord_connected_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[instance]\ntheorem ord_connected_preimage {F : Type _} [OrderHomClass F α β] (f : F) {s : Set β} [hs : OrdConnected s] :\n    OrdConnected («expr ⁻¹' » f s) :=\n  ⟨fun x hx y hy z hz => hs.out hx hy ⟨OrderHomClass.mono _ hz.1, OrderHomClass.mono _ hz.2⟩⟩\n#align ord_connected_preimage ord_connected_preimage\n\n",
 "ord_connected_pi":
 "theorem ord_connected_pi {ι : Type _} {α : ι → Type _} [∀ i, preorder (α i)] {s : Set ι} {t : ∀ i, Set (α i)}\n    (h : ∀ i ∈ s, OrdConnected (t i)) : OrdConnected (s.pi t) :=\n  ⟨fun x hx y hy z hz i hi => (h i hi).out (hx i hi) (hy i hi) ⟨hz.1 i, hz.2 i⟩⟩\n#align ord_connected_pi ord_connected_pi\n\n",
 "ord_connected_of_uIcc_subset_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem ord_connected_of_uIcc_subset_left (h : ∀ y ∈ s, set.uIcc x y ⊆ s) : OrdConnected s :=\n  ordConnected_iff_uIcc_subset.2 fun y hy z hz =>\n    calc\n      set.uIcc y z ⊆ set.uIcc y x ∪ set.uIcc x z := uIcc_subset_uIcc_union_uIcc\n      _ = set.uIcc x y ∪ set.uIcc x z := by rw [uIcc_comm]\n      _ ⊆ s := union_subset (h y hy) (h z hz)\n      \n#align ord_connected_of_uIcc_subset_left ord_connected_of_uIcc_subset_left\n\n",
 "ord_connected_of_Ioo":
 "theorem ord_connected_of_Ioo {α : Type _} [partial_order α] {s : Set α} (hs : ∀ x ∈ s, ∀ y ∈ s, x < y → Ioo x y ⊆ s) :\n    OrdConnected s := by\n  rw [ord_connected_iff]\n  intro x hx y hy hxy\n  rcases eq_or_lt_of_le hxy with (rfl | hxy'); · simpa\n  rw [← Ioc_insert_left hxy, ← Ioo_insert_right hxy']\n  exact insert_subset.2 ⟨hx, insert_subset.2 ⟨hy, hs x hx y hy hxy'⟩⟩\n#align ord_connected_of_Ioo ord_connected_of_Ioo\n\n",
 "ord_connected_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[instance]\ntheorem ord_connected_image {E : Type _} [OrderIsoClass E α β] (e : E) {s : Set α} [hs : OrdConnected s] :\n    OrdConnected («expr '' » e s) := by\n  erw [(e : «expr ≃o » α β).image_eq_preimage]\n  apply ord_connected_preimage\n#align ord_connected_image ord_connected_image\n\n",
 "ord_connected_iff_uIcc_subset_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem ord_connected_iff_uIcc_subset_right (hx : x ∈ s) : OrdConnected s ↔ ∀ ⦃y⦄, y ∈ s → set.uIcc y x ⊆ s := by\n  simp_rw [ord_connected_iff_uIcc_subset_left hx, uIcc_comm]\n#align ord_connected_iff_uIcc_subset_right ord_connected_iff_uIcc_subset_right\n\n",
 "ord_connected_iff_uIcc_subset_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem ord_connected_iff_uIcc_subset_left (hx : x ∈ s) : OrdConnected s ↔ ∀ ⦃y⦄, y ∈ s → set.uIcc x y ⊆ s :=\n  ⟨fun hs => hs.uIcc_subset hx, ordConnected_of_uIcc_subset_left⟩\n#align ord_connected_iff_uIcc_subset_left ord_connected_iff_uIcc_subset_left\n\n",
 "ord_connected_iff_uIcc_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem ord_connected_iff_uIcc_subset : OrdConnected s ↔ ∀ ⦃x⦄ (hx : x ∈ s) ⦃y⦄ (hy : y ∈ s), set.uIcc x y ⊆ s :=\n  ⟨fun h => h.uIcc_subset, fun H => ⟨fun x hx y hy => Icc_subset_uIcc.trans <| H hx hy⟩⟩\n#align ord_connected_iff_uIcc_subset ord_connected_iff_uIcc_subset\n\n",
 "ord_connected_iff":
 "/-- It suffices to prove `[x, y] ⊆ s` for `x y ∈ s`, `x ≤ y`. -/\ntheorem ord_connected_iff : OrdConnected s ↔ ∀ x ∈ s, ∀ y ∈ s, x ≤ y → Icc x y ⊆ s :=\n  ordConnected_def.trans ⟨fun hs x hx y hy hxy => hs hx hy, fun H x hx y hy z hz => H x hx y hy (le_trans hz.1 hz.2) hz⟩\n#align ord_connected_iff ord_connected_iff\n\n",
 "ord_connected_empty":
 "@[instance]\ntheorem ord_connected_empty : OrdConnected (∅ : Set α) :=\n  ⟨fun x => false.elim⟩\n#align ord_connected_empty ord_connected_empty\n\n",
 "ord_connected_dual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem ord_connected_dual {s : Set α} : OrdConnected («expr ⁻¹' » OrderDual.ofDual s) ↔ OrdConnected s :=\n  ⟨fun h => by simpa only [ord_connected_def] using h.dual, fun h => h.dual⟩\n#align ord_connected_dual ord_connected_dual\n\n",
 "ord_connected_def":
 "theorem ord_connected_def : OrdConnected s ↔ ∀ ⦃x⦄ (hx : x ∈ s) ⦃y⦄ (hy : y ∈ s), Icc x y ⊆ s :=\n  ⟨fun h => h.1, fun h => ⟨h⟩⟩\n#align ord_connected_def ord_connected_def\n\n",
 "ord_connected_bInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem ord_connected_bInter {ι : Sort _} {p : ι → Prop} {s : ∀ (i : ι) (hi : p i), Set α}\n    (hs : ∀ i hi, OrdConnected (s i hi)) :\n    OrdConnected\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i hi)) :=\n  ordConnected_interᵢ fun i => ordConnected_interᵢ <| hs i\n#align ord_connected_bInter ord_connected_bInter\n\n",
 "ord_connected_Ioo":
 "@[instance]\ntheorem ord_connected_Ioo {a b : α} : OrdConnected (Ioo a b) :=\n  ordConnected_Ioi.inter ordConnected_Iio\n#align ord_connected_Ioo ord_connected_Ioo\n\n",
 "ord_connected_Ioi":
 "@[instance]\ntheorem ord_connected_Ioi {a : α} : OrdConnected (Ioi a) :=\n  ⟨fun x hx y hy z hz => lt_of_lt_of_le hx hz.1⟩\n#align ord_connected_Ioi ord_connected_Ioi\n\n",
 "ord_connected_Ioc":
 "@[instance]\ntheorem ord_connected_Ioc {a b : α} : OrdConnected (Ioc a b) :=\n  ordConnected_Ioi.inter ordConnected_Iic\n#align ord_connected_Ioc ord_connected_Ioc\n\n",
 "ord_connected_Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem ord_connected_Inter {ι : Sort _} {s : ι → Set α} (hs : ∀ i, OrdConnected (s i)) :\n    OrdConnected\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) :=\n  ordConnected_interₛ <| forall_range_iff.2 hs\n#align ord_connected_Inter ord_connected_Inter\n\n",
 "ord_connected_Iio":
 "@[instance]\ntheorem ord_connected_Iio {a : α} : OrdConnected (Iio a) :=\n  ⟨fun x hx y hy z hz => lt_of_le_of_lt hz.2 hy⟩\n#align ord_connected_Iio ord_connected_Iio\n\n",
 "ord_connected_Iic":
 "@[instance]\ntheorem ord_connected_Iic {a : α} : OrdConnected (Iic a) :=\n  ⟨fun x hx y hy z hz => le_trans hz.2 hy⟩\n#align ord_connected_Iic ord_connected_Iic\n\n",
 "ord_connected_Ico":
 "@[instance]\ntheorem ord_connected_Ico {a b : α} : OrdConnected (Ico a b) :=\n  ordConnected_Ici.inter ordConnected_Iio\n#align ord_connected_Ico ord_connected_Ico\n\n",
 "ord_connected_Ici":
 "@[instance]\ntheorem ord_connected_Ici {a : α} : OrdConnected (Ici a) :=\n  ⟨fun x hx y hy z hz => le_trans hx hz.1⟩\n#align ord_connected_Ici ord_connected_Ici\n\n",
 "ord_connected_Icc":
 "@[instance]\ntheorem ord_connected_Icc {a b : α} : OrdConnected (Icc a b) :=\n  ordConnected_Ici.inter ordConnected_Iic\n#align ord_connected_Icc ord_connected_Icc\n\n",
 "ord_connected":
 "#print IsAntichain.ordConnected /-\nprotected theorem IsAntichain.ordConnected (hs : IsAntichain (· ≤ ·) s) : s.ord_connected :=\n  ⟨fun x hx y hy z hz => by\n    obtain rfl := hs.eq hx hy (hz.1.trans hz.2)\n    rw [Icc_self, mem_singleton_iff] at hz\n    rwa [hz]⟩\n#align is_antichain.ord_connected IsAntichain.ordConnected\n-/\n\n",
 "inter":
 "theorem ord_connected.inter {s t : Set α} (hs : OrdConnected s) (ht : OrdConnected t) : OrdConnected (s ∩ t) :=\n  ⟨fun x hx y hy => subset_inter (hs.out hx.1 hy.1) (ht.out hx.2 hy.2)⟩\n#align ord_connected.inter ord_connected.inter\n\n",
 "dual_ord_connected_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem dual_ord_connected_iff {s : Set α} : OrdConnected («expr ⁻¹' » ofDual s) ↔ OrdConnected s :=\n  by\n  simp_rw [ord_connected_def, to_dual.surjective.forall, dual_Icc, Subtype.forall']\n  exact forall_swap\n#align dual_ord_connected_iff dual_ord_connected_iff\n\n",
 "dual_ord_connected":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[instance]\ntheorem dual_ord_connected {s : Set α} [OrdConnected s] : OrdConnected («expr ⁻¹' » ofDual s) :=\n  dual_ordConnected_iff.2 ‹_›\n#align dual_ord_connected dual_ord_connected\n\n",
 "dual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem ord_connected.dual {s : Set α} (hs : OrdConnected s) : OrdConnected («expr ⁻¹' » OrderDual.ofDual s) :=\n  ⟨fun x hx y hy z hz => hs.out hy hx ⟨hz.2, hz.1⟩⟩\n#align ord_connected.dual ord_connected.dual\n\n",
 "Icc_subset":
 "protected theorem Icc_subset (s : Set α) [hs : OrdConnected s] {x y} (hx : x ∈ s) (hy : y ∈ s) : Icc x y ⊆ s :=\n  hs.out hx hy\n#align Icc_subset Icc_subset\n\n"}