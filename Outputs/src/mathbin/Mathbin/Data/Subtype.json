{"val_prop":
 "theorem val_prop {S : Set α} (a : { a // a ∈ S }) : a.val ∈ S :=\n  a.property\n#align val_prop val_prop\n\n",
 "val_injective":
 "theorem val_injective : injective (@val _ p) :=\n  coe_injective\n#align val_injective val_injective\n\n",
 "val_inj":
 "theorem val_inj {a b : Subtype p} : a.val = b.val ↔ a = b :=\n  coe_inj\n#align val_inj val_inj\n\n",
 "val_eq_coe":
 "@[simp]\ntheorem val_eq_coe {x : Subtype p} : x.1 = ↑x :=\n  rfl\n#align val_eq_coe val_eq_coe\n\n",
 "trans":
 "#print trans /-\nprotected theorem trans {s t u : Subtype p} (h₁ : s ≈ t) (h₂ : t ≈ u) : s ≈ u :=\n  setoid.trans h₁ h₂\n#align trans trans\n-/\n\n",
 "symm":
 "#print symm /-\nprotected theorem symm {s t : Subtype p} (h : s ≈ t) : t ≈ s :=\n  setoid.symm h\n#align symm symm\n-/\n\n",
 "surjective_restrict":
 "theorem surjective_restrict {α} {β : α → Type _} [ne : ∀ a, Nonempty (β a)] (p : α → Prop) :\n    surjective fun f : ∀ x, β x => restrict p f :=\n  by\n  letI := Classical.decPred p\n  refine' fun f => ⟨fun x => if h : p x then f ⟨x, h⟩ else Nonempty.some (ne x), funext <| _⟩\n  rintro ⟨x, hx⟩\n  exact dif_pos hx\n#align surjective_restrict surjective_restrict\n\n",
 "restrict_injective":
 "theorem restrict_injective {α β} {f : α → β} (p : α → Prop) (h : injective f) : injective (restrict p f) :=\n  h.comp coe_injective\n#align restrict_injective restrict_injective\n\n",
 "restrict_def":
 "theorem restrict_def {α β} (f : α → β) (p : α → Prop) : restrict p f = f ∘ coe := by rfl\n#align restrict_def restrict_def\n\n",
 "restrict_apply":
 "theorem restrict_apply {α} {β : α → Type _} (f : ∀ x, β x) (p : α → Prop) (x : Subtype p) : restrict p f x = f x.1 := by\n  rfl\n#align restrict_apply restrict_apply\n\n",
 "refl":
 "#print refl /-\nprotected theorem refl (s : Subtype p) : s ≈ s :=\n  setoid.refl ↑s\n#align refl refl\n-/\n\n",
 "prop":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\n/-- A version of `x.property` or `x.2` where `p` is syntactically applied to the coercion of `x`\n  instead of `x.1`. A similar result is `subtype.mem` in `data.set.basic`. -/\ntheorem prop (x : Subtype p) : p x :=\n  x.2\n#align prop prop\n\n",
 "mk_eq_mk":
 "-- built-in reduction doesn't always work\n@[simp, nolint simp_nf]\ntheorem mk_eq_mk {a h a' h'} : @mk α p a h = @mk α p a' h' ↔ a = a' :=\n  ext_iff\n#align mk_eq_mk mk_eq_mk\n\n",
 "map_involutive":
 "theorem map_involutive {p : α → Prop} {f : α → α} (h : ∀ a, p a → p (f a)) (hf : Involutive f) : Involutive (map f h) :=\n  fun x => Subtype.ext (hf x)\n#align map_involutive map_involutive\n\n",
 "map_injective":
 "theorem map_injective {p : α → Prop} {q : β → Prop} {f : α → β} (h : ∀ a, p a → q (f a)) (hf : injective f) :\n    injective (map f h) :=\n  coind_injective _ <| hf.comp coe_injective\n#align map_injective map_injective\n\n",
 "map_id":
 "theorem map_id {p : α → Prop} {h : ∀ a, p a → p (id a)} : map (@id α) h = id :=\n  funext fun ⟨v, h⟩ => rfl\n#align map_id map_id\n\n",
 "map_comp":
 "theorem map_comp {p : α → Prop} {q : β → Prop} {r : γ → Prop} {x : Subtype p} (f : α → β) (h : ∀ a, p a → q (f a))\n    (g : β → γ) (l : ∀ a, q a → r (g a)) : map g l (map f h x) = map (g ∘ f) (fun a ha => l (f a) <| h a ha) x :=\n  rfl\n#align map_comp map_comp\n\n",
 "heq_iff_coe_heq":
 "theorem heq_iff_coe_heq {α β : Sort _} {p : α → Prop} {q : β → Prop} {a : { x // p x }} {b : { y // q y }} (h : α = β)\n    (h' : HEq p q) : HEq a b ↔ HEq (a : α) (b : β) := by\n  subst h\n  subst h'\n  rw [heq_iff_eq, heq_iff_eq, ext_iff]\n#align heq_iff_coe_heq heq_iff_coe_heq\n\n",
 "heq_iff_coe_eq":
 "theorem heq_iff_coe_eq (h : ∀ x, p x ↔ q x) {a1 : { x // p x }} {a2 : { x // q x }} : HEq a1 a2 ↔ (a1 : α) = (a2 : α) :=\n  eq.rec (fun a2' => heq_iff_eq.trans ext_iff) (funext fun x => propext (h x)) a2\n#align heq_iff_coe_eq heq_iff_coe_eq\n\n",
 "forall'":
 "/-- An alternative version of `subtype.forall`. This one is useful if Lean cannot figure out `q`\n  when using `subtype.forall` from right to left. -/\nprotected theorem forall' {q : ∀ x, p x → Prop} : (∀ x h, q x h) ↔ ∀ x : { a // p a }, q x x.2 :=\n  (@Subtype.forall _ _ fun x => q x.1 x.2).symm\n#align forall' forall'\n\n",
 "forall":
 "@[simp]\nprotected theorem forall {q : { a // p a } → Prop} : (∀ x, q x) ↔ ∀ a b, q ⟨a, b⟩ :=\n  ⟨fun h a b => h ⟨a, b⟩, fun h ⟨a, b⟩ => h a b⟩\n#align forall forall\n\n",
 "ext_val":
 "theorem ext_val {a1 a2 : { x // p x }} : a1.1 = a2.1 → a1 = a2 :=\n  Subtype.ext\n#align ext_val ext_val\n\n",
 "ext_iff_val":
 "theorem ext_iff_val {a1 a2 : { x // p x }} : a1 = a2 ↔ a1.1 = a2.1 :=\n  ext_iff\n#align ext_iff_val ext_iff_val\n\n",
 "ext_iff":
 "theorem ext_iff {a1 a2 : { x // p x }} : a1 = a2 ↔ (a1 : α) = (a2 : α) :=\n  ⟨congr_arg _, Subtype.ext⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\nprotected theorem ext : ∀ {a1 a2 : { x // p x }}, (a1 : α) = (a2 : α) → a1 = a2\n  | ⟨x, h1⟩, ⟨x, h2⟩, rfl => rfl\n#align ext ext\n\n",
 "exists_subtype_mk_eq_iff":
 "#print exists_subtype_mk_eq_iff /-\n@[simp]\ntheorem exists_subtype_mk_eq_iff {a : Subtype p} {b : α} : (∃ h : p b, subtype.mk b h = a) ↔ b = a := by\n  simp only [@eq_comm _ b, exists_eq_subtype_mk_iff, @eq_comm _ _ a]\n#align exists_subtype_mk_eq_iff exists_subtype_mk_eq_iff\n-/\n\n",
 "exists_eq_subtype_mk_iff":
 "#print exists_eq_subtype_mk_iff /-\n@[simp]\ntheorem exists_eq_subtype_mk_iff {a : Subtype p} {b : α} : (∃ h : p b, a = subtype.mk b h) ↔ ↑a = b :=\n  coe_eq_iff.symm\n#align exists_eq_subtype_mk_iff exists_eq_subtype_mk_iff\n-/\n\n",
 "exists'":
 "/-- An alternative version of `subtype.exists`. This one is useful if Lean cannot figure out `q`\n  when using `subtype.exists` from right to left. -/\nprotected theorem exists' {q : ∀ x, p x → Prop} : (∃ x h, q x h) ↔ ∃ x : { a // p a }, q x x.2 :=\n  (@Subtype.exists _ _ fun x => q x.1 x.2).symm\n#align exists' exists'\n\n",
 "exists":
 "@[simp]\nprotected theorem exists {q : { a // p a } → Prop} : (∃ x, q x) ↔ ∃ a b, q ⟨a, b⟩ :=\n  ⟨fun ⟨⟨a, b⟩, h⟩ => ⟨a, b, h⟩, fun ⟨a, b, h⟩ => ⟨⟨a, b⟩, h⟩⟩\n#align exists exists\n\n",
 "equivalence":
 "theorem equivalence (p : α → Prop) : equivalence (@has_equiv.equiv (Subtype p) _) :=\n  Equivalence.mk _ Subtype.refl (@Subtype.symm _ p _) (@Subtype.trans _ p _)\n#align equivalence equivalence\n\n",
 "equiv_iff":
 "theorem equiv_iff [HasEquiv α] {p : α → Prop} {s t : Subtype p} : s ≈ t ↔ (s : α) ≈ (t : α) :=\n  iff.rfl\n#align equiv_iff equiv_iff\n\n",
 "coind_surjective":
 "theorem coind_surjective {α β} {f : α → β} {p : β → Prop} (h : ∀ a, p (f a)) (hf : surjective f) :\n    surjective (coind f h) := fun x =>\n  let ⟨a, ha⟩ := hf x\n  ⟨a, coe_injective ha⟩\n#align coind_surjective coind_surjective\n\n",
 "coind_injective":
 "theorem coind_injective {α β} {f : α → β} {p : β → Prop} (h : ∀ a, p (f a)) (hf : injective f) :\n    injective (coind f h) := fun x y hxy => hf <| by apply congr_arg Subtype.val hxy\n#align coind_injective coind_injective\n\n",
 "coind_bijective":
 "theorem coind_bijective {α β} {f : α → β} {p : β → Prop} (h : ∀ a, p (f a)) (hf : bijective f) :\n    bijective (coind f h) :=\n  ⟨coind_injective h hf.1, coind_surjective h hf.2⟩\n#align coind_bijective coind_bijective\n\n",
 "coe_prop":
 "@[simp]\ntheorem coe_prop {S : Set α} (a : { a // a ∈ S }) : ↑a ∈ S :=\n  a.prop\n#align coe_prop coe_prop\n\n",
 "coe_mk":
 "@[simp]\ntheorem coe_mk (a h) : (@mk α p a h : α) = a :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_injective":
 "theorem coe_injective : injective (coe : Subtype p → α) := fun a b => Subtype.ext\n#align coe_injective coe_injective\n\n",
 "coe_inj":
 "theorem coe_inj {a b : Subtype p} : (a : α) = b ↔ a = b :=\n  coe_injective.eq_iff\n#align coe_inj coe_inj\n\n",
 "coe_eta":
 "@[simp]\ntheorem coe_eta (a : { a // p a }) (h : p a) : mk (↑a) h = a :=\n  Subtype.ext rfl\n#align coe_eta coe_eta\n\n",
 "coe_eq_of_eq_mk":
 "theorem coe_eq_of_eq_mk {a : { a // p a }} {b : α} (h : ↑a = b) : a = ⟨b, h ▸ a.2⟩ :=\n  Subtype.ext h\n#align coe_eq_of_eq_mk coe_eq_of_eq_mk\n\n",
 "coe_eq_iff":
 "theorem coe_eq_iff {a : { a // p a }} {b : α} : ↑a = b ↔ ∃ h, a = ⟨b, h⟩ :=\n  ⟨fun h => h ▸ ⟨a.2, (coe_eta _ _).symm⟩, fun ⟨hb, ha⟩ => ha.symm ▸ rfl⟩\n#align coe_eq_iff coe_eq_iff\n\n"}