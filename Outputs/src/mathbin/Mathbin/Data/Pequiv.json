{"trans_symm_eq_iff_forall_is_some":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem trans_symm_eq_iff_forall_is_some {f : «expr ≃. » α β} : f.trans f.symm = PEquiv.refl α ↔ ∀ a, is_some (f a) :=\n  by rw [self_trans_symm, of_set_eq_refl, Set.eq_univ_iff_forall] <;> rfl\n#align trans_symm_eq_iff_forall_is_some trans_symm_eq_iff_forall_is_some\n\n",
 "trans_single_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem trans_single_of_mem {a : α} {b : β} (c : γ) {f : «expr ≃. » α β} (h : b ∈ f a) :\n    f.trans (single b c) = single a c :=\n  symm_injective <| single_trans_of_mem _ ((mem_iff_mem f).2 h)\n#align trans_single_of_mem trans_single_of_mem\n\n",
 "trans_single_of_eq_none":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem trans_single_of_eq_none {b : β} (c : γ) {f : «expr ≃. » δ β} (h : f.symm b = none) :\n    f.trans (single b c) = «expr⊥» := by\n  ext\n  simp only [eq_none_iff_forall_not_mem, option.mem_def, f.eq_some_iff] at h\n  dsimp [PEquiv.trans, single]\n  simp\n  intros\n  split_ifs <;> simp_all\n#align trans_single_of_eq_none trans_single_of_eq_none\n\n",
 "trans_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n@[simp]\ntheorem trans_refl (f : «expr ≃. » α β) : f.trans (PEquiv.refl β) = f := by ext <;> dsimp [PEquiv.trans] <;> simp\n#align trans_refl trans_refl\n\n",
 "trans_eq_some":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem trans_eq_some (f : «expr ≃. » α β) (g : «expr ≃. » β γ) (a : α) (c : γ) :\n    f.trans g a = some c ↔ ∃ b, f a = some b ∧ g b = some c :=\n  option.bind_eq_some'\n#align trans_eq_some trans_eq_some\n\n",
 "trans_eq_none":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem trans_eq_none (f : «expr ≃. » α β) (g : «expr ≃. » β γ) (a : α) :\n    f.trans g a = none ↔ ∀ b c, b ∉ f a ∨ c ∉ g b :=\n  by\n  simp only [eq_none_iff_forall_not_mem, mem_trans, imp_iff_not_or.symm]\n  push_neg; tauto\n#align trans_eq_none trans_eq_none\n\n",
 "trans_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem trans_bot (f : «expr ≃. » α β) : f.trans («expr⊥» : «expr ≃. » β γ) = «expr⊥» := by\n  ext <;> dsimp [PEquiv.trans] <;> simp\n#align trans_bot trans_bot\n\n",
 "trans_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem trans_assoc (f : «expr ≃. » α β) (g : «expr ≃. » β γ) (h : «expr ≃. » γ δ) :\n    (f.trans g).trans h = f.trans (g.trans h) :=\n  ext fun _ => option.bind_assoc _ _ _\n#align trans_assoc trans_assoc\n\n",
 "to_pequiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem to_pequiv_trans (f : «expr ≃ » α β) (g : «expr ≃ » β γ) :\n    (f.trans g).to_pequiv = f.to_pequiv.trans g.to_pequiv :=\n  rfl\n#align to_pequiv_trans to_pequiv_trans\n\n",
 "to_pequiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem to_pequiv_symm (f : «expr ≃ » α β) : f.symm.to_pequiv = f.to_pequiv.symm :=\n  rfl\n#align to_pequiv_symm to_pequiv_symm\n\n",
 "to_pequiv_refl":
 "-- `split_ifs; finish` closes this goal from here\n@[simp]\ntheorem to_pequiv_refl : (equiv.refl α).to_pequiv = PEquiv.refl α :=\n  rfl\n#align to_pequiv_refl to_pequiv_refl\n\n",
 "to_pequiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem to_pequiv_apply (f : «expr ≃ » α β) (x : α) : f.to_pequiv x = some (f x) :=\n  rfl\n#align to_pequiv_apply to_pequiv_apply\n\n",
 "symm_trans_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem symm_trans_self (f : «expr ≃. » α β) : f.symm.trans f = ofSet { b | (f.symm b).is_some } :=\n  symm_injective <| by simp [symm_trans_rev, self_trans_symm, -symm_symm]\n#align symm_trans_self symm_trans_self\n\n",
 "symm_trans_rev":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem symm_trans_rev (f : «expr ≃. » α β) (g : «expr ≃. » β γ) : (f.trans g).symm = g.symm.trans f.symm :=\n  rfl\n#align symm_trans_rev symm_trans_rev\n\n",
 "symm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n@[simp]\ntheorem symm_symm (f : «expr ≃. » α β) : f.symm.symm = f := by cases f <;> rfl\n#align symm_symm symm_symm\n\n",
 "symm_single":
 "@[simp]\ntheorem symm_single (a : α) (b : β) : (single a b).symm = single b a :=\n  rfl\n#align symm_single symm_single\n\n",
 "symm_refl":
 "@[simp]\ntheorem symm_refl : (PEquiv.refl α).symm = PEquiv.refl α :=\n  rfl\n#align symm_refl symm_refl\n\n",
 "symm_injective":
 "theorem symm_injective : function.injective (@PEquiv.symm α β) :=\n  left_inverse.injective symm_symm\n#align symm_injective symm_injective\n\n",
 "symm_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem symm_bot : («expr⊥» : «expr ≃. » α β).symm = «expr⊥» :=\n  rfl\n#align symm_bot symm_bot\n\n",
 "single_trans_single_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem single_trans_single_of_ne {b₁ b₂ : β} (h : b₁ ≠ b₂) (a : α) (c : γ) :\n    (single a b₁).trans (single b₂ c) = «expr⊥» :=\n  single_trans_of_eq_none _ (single_apply_of_ne h.symm _)\n#align single_trans_single_of_ne single_trans_single_of_ne\n\n",
 "single_trans_single":
 "@[simp]\ntheorem single_trans_single (a : α) (b : β) (c : γ) : (single a b).trans (single b c) = single a c :=\n  single_trans_of_mem _ (mem_single _ _)\n#align single_trans_single single_trans_single\n\n",
 "single_trans_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem single_trans_of_mem (a : α) {b : β} {c : γ} {f : «expr ≃. » β γ} (h : c ∈ f b) :\n    (single a b).trans f = single a c := by\n  ext\n  dsimp [single, PEquiv.trans]\n  split_ifs <;> simp_all\n#align single_trans_of_mem single_trans_of_mem\n\n",
 "single_trans_of_eq_none":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem single_trans_of_eq_none (a : α) {b : β} {f : «expr ≃. » β δ} (h : f b = none) :\n    (single a b).trans f = «expr⊥» :=\n  symm_injective <| trans_single_of_eq_none _ h\n#align single_trans_of_eq_none single_trans_of_eq_none\n\n",
 "single_subsingleton_eq_refl":
 "@[simp]\ntheorem single_subsingleton_eq_refl [subsingleton α] (a b : α) : single a b = PEquiv.refl α :=\n  by\n  ext (i j)\n  dsimp [single]\n  rw [if_pos (subsingleton.elim i a), subsingleton.elim i j, subsingleton.elim b j]\n#align single_subsingleton_eq_refl single_subsingleton_eq_refl\n\n",
 "single_apply_of_ne":
 "theorem single_apply_of_ne {a₁ a₂ : α} (h : a₁ ≠ a₂) (b : β) : single a₁ b a₂ = none :=\n  if_neg h.symm\n#align single_apply_of_ne single_apply_of_ne\n\n",
 "single_apply":
 "@[simp]\ntheorem single_apply (a : α) (b : β) : single a b a = some b :=\n  if_pos rfl\n#align single_apply single_apply\n\n",
 "self_trans_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem self_trans_symm (f : «expr ≃. » α β) : f.trans f.symm = ofSet { a | (f a).is_some } :=\n  by\n  ext\n  dsimp [PEquiv.trans]\n  simp only [eq_some_iff f, Option.isSome_iff_exists, option.mem_def, bind_eq_some', of_set_eq_some_iff]\n  constructor\n  · rintro ⟨b, hb₁, hb₂⟩\n    exact ⟨PEquiv.inj _ hb₂ hb₁, b, hb₂⟩\n  · simp (config := { contextual := true })\n#align self_trans_symm self_trans_symm\n\n",
 "refl_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n@[simp]\ntheorem refl_trans (f : «expr ≃. » α β) : (PEquiv.refl α).trans f = f := by ext <;> dsimp [PEquiv.trans] <;> rfl\n#align refl_trans refl_trans\n\n",
 "refl_apply":
 "@[simp]\ntheorem refl_apply (a : α) : PEquiv.refl α a = some a :=\n  rfl\n#align refl_apply refl_apply\n\n",
 "of_set_univ":
 "@[simp]\ntheorem of_set_univ : ofSet Set.univ = PEquiv.refl α :=\n  rfl\n#align of_set_univ of_set_univ\n\n",
 "of_set_symm":
 "@[simp]\ntheorem of_set_symm : (ofSet s).symm = ofSet s :=\n  rfl\n#align of_set_symm of_set_symm\n\n",
 "of_set_eq_some_self_iff":
 "@[simp]\ntheorem of_set_eq_some_self_iff {s : set α} {h : decidable_pred (· ∈ s)} {a : α} : ofSet s a = some a ↔ a ∈ s :=\n  mem_of_set_self_iff\n#align of_set_eq_some_self_iff of_set_eq_some_self_iff\n\n",
 "of_set_eq_some_iff":
 "@[simp]\ntheorem of_set_eq_some_iff {s : set α} {h : decidable_pred (· ∈ s)} {a b : α} : ofSet s b = some a ↔ a = b ∧ a ∈ s :=\n  mem_of_set_iff\n#align of_set_eq_some_iff of_set_eq_some_iff\n\n",
 "of_set_eq_refl":
 "@[simp]\ntheorem of_set_eq_refl {s : set α} [decidable_pred (· ∈ s)] : ofSet s = PEquiv.refl α ↔ s = Set.univ :=\n  ⟨fun h => by\n    rw [Set.eq_univ_iff_forall]\n    intro\n    rw [← mem_of_set_self_iff, h]\n    exact rfl, fun h => by simp only [← of_set_univ, h]⟩\n#align of_set_eq_refl of_set_eq_refl\n\n",
 "mem_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem mem_trans (f : «expr ≃. » α β) (g : «expr ≃. » β γ) (a : α) (c : γ) :\n    c ∈ f.trans g a ↔ ∃ b, b ∈ f a ∧ c ∈ g b :=\n  option.bind_eq_some'\n#align mem_trans mem_trans\n\n",
 "mem_single_iff":
 "theorem mem_single_iff (a₁ a₂ : α) (b₁ b₂ : β) : b₁ ∈ single a₂ b₂ a₁ ↔ a₁ = a₂ ∧ b₁ = b₂ := by\n  dsimp [single] <;> split_ifs <;> simp [*, eq_comm]\n#align mem_single_iff mem_single_iff\n\n",
 "mem_single":
 "theorem mem_single (a : α) (b : β) : b ∈ single a b a :=\n  if_pos rfl\n#align mem_single mem_single\n\n",
 "mem_of_set_self_iff":
 "theorem mem_of_set_self_iff {s : set α} [decidable_pred (· ∈ s)] {a : α} : a ∈ ofSet s a ↔ a ∈ s := by\n  dsimp [of_set] <;> split_ifs <;> simp [*]\n#align mem_of_set_self_iff mem_of_set_self_iff\n\n",
 "mem_of_set_iff":
 "theorem mem_of_set_iff {s : set α} [decidable_pred (· ∈ s)] {a b : α} : a ∈ ofSet s b ↔ a = b ∧ a ∈ s :=\n  by\n  dsimp [of_set]\n  split_ifs\n  · simp only [iff_self_and, eq_comm]\n    rintro rfl\n    exact h\n  · simp only [false_iff_iff, not_and]\n    rintro rfl\n    exact h\n#align mem_of_set_iff mem_of_set_iff\n\n",
 "mem_iff_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem mem_iff_mem (f : «expr ≃. » α β) : ∀ {a : α} {b : β}, a ∈ f.symm b ↔ b ∈ f a :=\n  f.3\n#align mem_iff_mem mem_iff_mem\n\n",
 "le_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem le_def {f g : «expr ≃. » α β} : f ≤ g ↔ ∀ (a : α) (b : β), b ∈ f a → b ∈ g a :=\n  iff.rfl\n#align le_def le_def\n\n",
 "is_some_symm_get":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem is_some_symm_get (f : «expr ≃. » α β) {a : α} (h : is_some (f a)) : is_some (f.symm (option.get h)) :=\n  isSome_iff_exists.2 ⟨a, by rw [f.eq_some_iff, some_get]⟩\n#align is_some_symm_get is_some_symm_get\n\n",
 "injective_of_forall_ne_is_some":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/-- If the domain of a `pequiv` is `α` except a point, its forward direction is injective. -/\ntheorem injective_of_forall_ne_is_some (f : «expr ≃. » α β) (a₂ : α) (h : ∀ a₁ : α, a₁ ≠ a₂ → is_some (f a₁)) :\n    injective f :=\n  has_left_inverse.injective\n    ⟨fun b => option.rec_on b a₂ fun b' => option.rec_on (f.symm b') a₂ id, fun x => by\n      classical\n        cases hfx : f x\n        · have : x = a₂ := not_imp_comm.1 (h x) (hfx.symm ▸ by simp)\n          simp [this]\n        · dsimp only\n          rw [(eq_some_iff f).2 hfx]\n          rfl⟩\n#align injective_of_forall_ne_is_some injective_of_forall_ne_is_some\n\n",
 "injective_of_forall_is_some":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/-- If the domain of a `pequiv` is all of `α`, its forward direction is injective. -/\ntheorem injective_of_forall_is_some {f : «expr ≃. » α β} (h : ∀ a : α, is_some (f a)) : injective f :=\n  (classical.em (nonempty α)).elim (fun hn => injective_of_forall_ne_isSome f (classical.choice hn) fun a _ => h a)\n    fun hn x => (hn ⟨x⟩).elim\n#align injective_of_forall_is_some injective_of_forall_is_some\n\n",
 "inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\nprotected theorem inj (f : «expr ≃. » α β) {a₁ a₂ : α} {b : β} (h₁ : b ∈ f a₁) (h₂ : b ∈ f a₂) : a₁ = a₂ := by\n  rw [← mem_iff_mem] at * <;> cases h : f.symm b <;> simp_all\n#align inj inj\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem ext_iff {f g : «expr ≃. » α β} : f = g ↔ ∀ x, f x = g x :=\n  ⟨congr_fun ∘ congr_arg _, ext⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n@[ext]\ntheorem ext : ∀ {f g : «expr ≃. » α β} (h : ∀ x, f x = g x), f = g\n  | ⟨f₁, f₂, hf⟩, ⟨g₁, g₂, hg⟩, h => by\n    have h : f₁ = g₁ := funext h\n    have : ∀ b, f₂ b = g₂ b := by\n      subst h\n      intro b\n      have hf := fun a => hf a b\n      have hg := fun a => hg a b\n      cases' h : g₂ b with a\n      · simp only [h, option.not_mem_none, false_iff_iff] at hg\n        simp only [hg, iff_false_iff] at hf\n        rwa [option.eq_none_iff_forall_not_mem]\n      · rw [← option.mem_def, hf, ← hg, h, option.mem_def]\n    simp [*, funext_iff]\n#align ext ext\n\n",
 "eq_some_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\ntheorem eq_some_iff (f : «expr ≃. » α β) : ∀ {a : α} {b : β}, f.symm b = some a ↔ f a = some b :=\n  f.3\n#align eq_some_iff eq_some_iff\n\n",
 "coe_mk_apply":
 "/-\nCopyright (c) 2019 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes\n-/\n@[simp]\ntheorem coe_mk_apply (f₁ : α → option β) (f₂ : β → option α) (h) (x : α) :\n    (pequiv.mk f₁ f₂ h : α → option β) x = f₁ x :=\n  rfl\n#align coe_mk_apply coe_mk_apply\n\n",
 "bot_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_trans (f : «expr ≃. » β γ) : («expr⊥» : «expr ≃. » α β).trans f = «expr⊥» := by\n  ext <;> dsimp [PEquiv.trans] <;> simp\n#align bot_trans bot_trans\n\n",
 "bot_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃. » -/\n@[simp]\ntheorem bot_apply (a : α) : («expr⊥» : «expr ≃. » α β) a = none :=\n  rfl\n#align bot_apply bot_apply\n\n"}