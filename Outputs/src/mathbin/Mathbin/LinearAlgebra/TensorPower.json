{"tprod_mul_tprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\ntheorem tprod_mul_tprod {na nb} (a : Fin na → M) (b : Fin nb → M) :\n    «expr ₜ* » (tprod R a) (tprod R b) = tprod R (Fin.append a b) :=\n  by\n  dsimp [ghas_mul_def, MulEquiv]\n  rw [tmul_equiv_apply R M a b]\n  refine' (reindex_tprod _ _).trans _\n  congr 1\n  dsimp only [Fin.append, finSumFinEquiv, Equiv.coe_fn_symm_mk]\n  apply funext\n  apply Fin.addCases <;> simp\n#align tprod_mul_tprod tprod_mul_tprod\n\n",
 "one_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprₜ1 -/\n#print one_mul /-\ntheorem one_mul {n} (a : (tensor_power R n) M) : cast R M (zero_add n) («expr ₜ* » (exprₜ1) a) = a :=\n  by\n  rw [ghas_mul_def, ghas_one_def]\n  induction' a using pi_tensor_product.induction_on with r a x y hx hy\n  · dsimp only at a\n    rw [TensorProduct.tmul_smul, LinearEquiv.map_smul, LinearEquiv.map_smul, ← ghas_mul_def, tprod_mul_tprod,\n      cast_tprod]\n    congr 2 with i\n    rw [Fin.elim0'_append]\n    refine' congr_arg a (Fin.ext _)\n    simp\n  · rw [TensorProduct.tmul_add, map_add, map_add, hx, hy]\n#align one_mul one_mul\n-/\n\n",
 "mul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprₜ1 -/\n#print mul_one /-\ntheorem mul_one {n} (a : (tensor_power R n) M) : cast R M (add_zero _) («expr ₜ* » a (exprₜ1)) = a :=\n  by\n  rw [ghas_mul_def, ghas_one_def]\n  induction' a using pi_tensor_product.induction_on with r a x y hx hy\n  · dsimp only at a\n    rw [← TensorProduct.smul_tmul', LinearEquiv.map_smul, LinearEquiv.map_smul, ← ghas_mul_def, tprod_mul_tprod R a _,\n      cast_tprod]\n    congr 2 with i\n    rw [Fin.append_elim0']\n    refine' congr_arg a (Fin.ext _)\n    simp\n  · rw [TensorProduct.add_tmul, map_add, map_add, hx, hy]\n#align mul_one mul_one\n-/\n\n",
 "mul_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n#print mul_assoc /-\ntheorem mul_assoc {na nb nc} (a : (tensor_power R na) M) (b : (tensor_power R nb) M) (c : (tensor_power R nc) M) :\n    cast R M (add_assoc _ _ _) («expr ₜ* » («expr ₜ* » a b) c) = «expr ₜ* » a («expr ₜ* » b c) :=\n  by\n  let mul :\n    ∀ n m : ℕ,\n      «expr →ₗ[ ] » ((tensor_power R n) M) R («expr →ₗ[ ] » ((tensor_power R m) M) R ((tensor_power R (n + m)) M)) :=\n    fun n m => (TensorProduct.mk R _ _).compr₂ ↑(MulEquiv : «expr ≃ₗ[ ] » _ R ((tensor_power R (n + m)) M))\n  -- replace `a`, `b`, `c` with `tprod R a`, `tprod R b`, `tprod R c`\n  let e : «expr ≃ₗ[ ] » ((tensor_power R (na + nb + nc)) M) R ((tensor_power R (na + (nb + nc))) M) :=\n    cast R M (add_assoc _ _ _)\n  let lhs :\n    «expr →ₗ[ ] » ((tensor_power R na) M) R\n      («expr →ₗ[ ] » ((tensor_power R nb) M) R\n        («expr →ₗ[ ] » ((tensor_power R nc) M) R ((tensor_power R (na + (nb + nc))) M))) :=\n    (LinearMap.llcomp R _ _ _ ((mul _ nc).compr₂ e.to_linear_map)).comp (mul na nb)\n  have lhs_eq : ∀ a b c, lhs a b c = e («expr ₜ* » («expr ₜ* » a b) c) := fun _ _ _ => rfl\n  let rhs :\n    «expr →ₗ[ ] » ((tensor_power R na) M) R\n      («expr →ₗ[ ] » ((tensor_power R nb) M) R\n        («expr →ₗ[ ] » ((tensor_power R nc) M) R ((tensor_power R (na + (nb + nc))) M))) :=\n    (LinearMap.llcomp R _ _ _ (LinearMap.lflip R _ _ _) <|\n        (LinearMap.llcomp R _ _ _ (mul na _).flip).comp (mul nb nc)).flip\n  have rhs_eq : ∀ a b c, rhs a b c = «expr ₜ* » a («expr ₜ* » b c) := fun _ _ _ => rfl\n  suffices : lhs = rhs\n  exact LinearMap.congr_fun (LinearMap.congr_fun (LinearMap.congr_fun this a) b) c\n  ext (a b c)\n  -- clean up\n  simp only [LinearMap.compMultilinearMap_apply, lhs_eq, rhs_eq, tprod_mul_tprod, e, cast_tprod]\n  congr with j\n  rw [Fin.append_assoc]\n  refine' congr_arg (Fin.append a (Fin.append b c)) (Fin.ext _)\n  rw [Fin.coe_cast, Fin.coe_cast]\n#align mul_assoc mul_assoc\n-/\n\n",
 "mul_algebra_map₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mul_algebra_map₀ {n} (r : R) (a : (tensor_power R n) M) :\n    cast R M (add_zero _) («expr ₜ* » a (algebra_map₀ r)) = «expr • » r a := by\n  rw [ghas_mul_eq_coe_linear_map, algebra_map₀_eq_smul_one, LinearMap.map_smul, LinearEquiv.map_smul, ←\n    ghas_mul_eq_coe_linear_map, mul_one]\n#align mul_algebra_map₀ mul_algebra_map₀\n\n",
 "graded_monoid_eq_of_reindex_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pi_tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `pi_tensor_product -/\n/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- Two dependent pairs of tensor products are equal if their index is equal and the contents\nare equal after a canonical reindexing. -/\n@[ext]\ntheorem graded_monoid_eq_of_reindex_cast {ιι : Type _} {ι : ιι → Type _} :\n    ∀\n      {a b :\n        GradedMonoid fun ii =>\n          pi_tensor_product R\n            \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `pi_tensor_product\" M}\n      (h : a.fst = b.fst), reindex R M (Equiv.cast <| congr_arg ι h) a.snd = b.snd → a = b\n  | ⟨ai, a⟩, ⟨bi, b⟩ => fun (hi : ai = bi) (h : reindex R M _ a = b) =>\n    by\n    subst hi\n    simpa using h\n#align graded_monoid_eq_of_reindex_cast graded_monoid_eq_of_reindex_cast\n\n",
 "graded_monoid_eq_of_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `pi_tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `pi_tensor_product -/\n@[ext]\ntheorem graded_monoid_eq_of_cast\n    {a b :\n      GradedMonoid fun n =>\n        pi_tensor_product R \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `pi_tensor_product\"\n          M}\n    (h : a.fst = b.fst) (h2 : cast R M h a.snd = b.snd) : a = b :=\n  by\n  refine' graded_monoid_eq_of_reindex_cast h _\n  rw [cast] at h2\n  rw [← Fin.cast_to_equiv, ← h2]\n#align graded_monoid_eq_of_cast graded_monoid_eq_of_cast\n\n",
 "ghas_one_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprₜ1 -/\ntheorem ghas_one_def : exprₜ1 = tprod R (@Fin.elim0' M) :=\n  rfl\n#align ghas_one_def ghas_one_def\n\n",
 "ghas_mul_eq_coe_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\ntheorem ghas_mul_eq_coe_linear_map {i j} (a : (tensor_power R i) M) (b : (tensor_power R j) M) :\n    «expr ₜ* » a b =\n      ((TensorProduct.mk R _ _).compr₂ ↑(mul_equiv : «expr ≃ₗ[ ] » _ R ((tensor_power R (i + j)) M)) :\n          «expr →ₗ[ ] » ((tensor_power R i) M) R («expr →ₗ[ ] » ((tensor_power R j) M) R ((tensor_power R (i + j)) M)))\n        a b :=\n  rfl\n#align ghas_mul_eq_coe_linear_map ghas_mul_eq_coe_linear_map\n\n",
 "ghas_mul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\ntheorem ghas_mul_def {i j} (a : (tensor_power R i) M) (b : (tensor_power R j) M) :\n    «expr ₜ* » a b = mul_equiv («expr ⊗ₜ » a b) :=\n  rfl\n#align ghas_mul_def ghas_mul_def\n\n",
 "galgebra_to_fun_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\ntheorem galgebra_to_fun_def (r : R) :\n    @direct_sum.galgebra.to_fun ℕ R (fun i => (tensor_power R i) M) _ _ _ _ _ _ _ r = algebra_map₀ r :=\n  rfl\n#align galgebra_to_fun_def galgebra_to_fun_def\n\n",
 "cast_trans":
 "@[simp]\ntheorem cast_trans {i j k} (h : i = j) (h' : j = k) : (cast R M h).trans (cast R M h') = cast R M (h.trans h') :=\n  reindex_trans _ _\n#align cast_trans cast_trans\n\n",
 "cast_tprod":
 "theorem cast_tprod {i j} (h : i = j) (a : Fin i → M) : cast R M h (tprod R a) = tprod R (a ∘ Fin.cast h.symm) :=\n  reindex_tprod _ _\n#align cast_tprod cast_tprod\n\n",
 "cast_symm":
 "@[simp]\ntheorem cast_symm {i j} (h : i = j) : (cast R M h).symm = cast R M h.symm :=\n  reindex_symm _\n#align cast_symm cast_symm\n\n",
 "cast_refl":
 "@[simp]\ntheorem cast_refl {i} (h : i = i) : cast R M h = LinearEquiv.refl _ _ :=\n  ((congr_arg fun f => reindex R M (rel_iso.to_equiv f)) <| Fin.cast_refl h).trans reindex_refl\n#align cast_refl cast_refl\n\n",
 "cast_eq_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n-- named to match `fin.cast_eq_cast`\ntheorem cast_eq_cast {i j} (h : i = j) : «expr⇑ » (cast R M h) = _root_.cast (congr_arg _ h) :=\n  by\n  subst h\n  rw [cast_refl]\n  rfl\n#align cast_eq_cast cast_eq_cast\n\n",
 "cast_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n#print cast_cast /-\n@[simp]\ntheorem cast_cast {i j k} (h : i = j) (h' : j = k) (a : (tensor_power R i) M) :\n    cast R M h' (cast R M h a) = cast R M (h.trans h') a :=\n  reindex_reindex _ _ _\n#align cast_cast cast_cast\n-/\n\n",
 "algebra_map₀_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprₜ1 -/\ntheorem algebra_map₀_one : (algebra_map₀ 1 : (tensor_power R 0) M) = exprₜ1 :=\n  (algebra_map₀_eq_smul_one 1).trans (one_smul _ _)\n#align algebra_map₀_one algebra_map₀_one\n\n",
 "algebra_map₀_mul_algebra_map₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\ntheorem algebra_map₀_mul_algebra_map₀ (r s : R) :\n    cast R M (add_zero _) («expr ₜ* » (algebra_map₀ r) (algebra_map₀ s)) = algebra_map₀ (r * s) :=\n  by\n  rw [← smul_eq_mul, LinearEquiv.map_smul]\n  exact algebra_map₀_mul r (@algebra_map₀ R M _ _ _ s)\n#align algebra_map₀_mul_algebra_map₀ algebra_map₀_mul_algebra_map₀\n\n",
 "algebra_map₀_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ₜ* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem algebra_map₀_mul {n} (r : R) (a : (tensor_power R n) M) :\n    cast R M (zero_add _) («expr ₜ* » (algebra_map₀ r) a) = «expr • » r a := by\n  rw [ghas_mul_eq_coe_linear_map, algebra_map₀_eq_smul_one, LinearMap.map_smul₂, LinearEquiv.map_smul, ←\n    ghas_mul_eq_coe_linear_map, one_mul]\n#align algebra_map₀_mul algebra_map₀_mul\n\n",
 "algebra_map₀_eq_smul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprₜ1 -/\n-- for now we just use the default for the `gnpow` field as it's easier.\ntheorem algebra_map₀_eq_smul_one (r : R) : (algebra_map₀ r : (tensor_power R 0) M) = «expr • » r (exprₜ1) :=\n  by\n  simp [algebra_map₀]\n  congr\n#align algebra_map₀_eq_smul_one algebra_map₀_eq_smul_one\n\n"}