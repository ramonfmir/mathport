{"subsingleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\nprotected theorem subsingleton (h : is_adic_complete («expr⊤» : Ideal R) M) : subsingleton M :=\n  h.1.subsingleton\n#align subsingleton subsingleton\n\n",
 "range_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem range_eval (n : ℕ) : (eval I M n).range = «expr⊤» :=\n  LinearMap.range_eq_top.2 fun x => Quotient.inductionOn' x fun x => ⟨of I M x, rfl⟩\n#align range_eval range_eval\n\n",
 "prec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_precomplete.prec (h : is_precomplete I M) {f : ℕ → M} :\n    (∀ {m n}, m ≤ n → «expr ≡ [SMOD ]» (f m) (f n) («expr • » (I ^ m) («expr⊤») : Submodule R M)) →\n      ∃ L : M, ∀ n, «expr ≡ [SMOD ]» (f n) L («expr • » (I ^ n) («expr⊤») : Submodule R M) :=\n  is_precomplete.prec' _\n#align is_precomplete.prec is_precomplete.prec\n\n",
 "of_apply":
 "@[simp]\ntheorem of_apply (x : M) (n : ℕ) : (of I M x).1 n = mkQ _ x :=\n  rfl\n#align of_apply of_apply\n\n",
 "lift_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem lift_of (f : «expr →ₗ[ ] » M R N) (x : M) : lift I f (of I M x) = f x :=\n  rfl\n#align lift_of lift_of\n\n",
 "lift_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- Uniqueness of lift. -/\ntheorem lift_eq (f : «expr →ₗ[ ] » M R N) (g : «expr →ₗ[ ] » (Hausdorffification I M) R N) (hg : g.comp (of I M) = f) :\n    g = lift I f :=\n  LinearMap.ext fun x => induction_on x fun x => by rw [lift_of, ← hg, LinearMap.comp_apply]\n#align lift_eq lift_eq\n\n",
 "lift_comp_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem lift_comp_of (f : «expr →ₗ[ ] » M R N) : (lift I f).comp (of I M) = f :=\n  LinearMap.ext fun _ => rfl\n#align lift_comp_of lift_comp_of\n\n",
 "le_jacobson_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem le_jacobson_bot [is_adic_complete I R] : I ≤ («expr⊥» : Ideal R).jacobson :=\n  by\n  intro x hx\n  rw [← Ideal.neg_mem_iff, ideal.mem_jacobson_bot]\n  intro y\n  rw [add_comm]\n  let f : ℕ → R := fun n =>\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n      ((x * y) ^ i)\n  have hf : ∀ m n, m ≤ n → «expr ≡ [SMOD ]» (f m) (f n) («expr • » (I ^ m) («expr⊤» : Submodule R R)) :=\n    by\n    intro m n h\n    simp only [f, Algebra.id.smul_eq_mul, Ideal.mul_top, SModEq.sub_mem]\n    rw [← add_tsub_cancel_of_le h, Finset.sum_range_add, ← sub_sub, sub_self, zero_sub, neg_mem_iff]\n    apply Submodule.sum_mem\n    intro n hn\n    rw [mul_pow, pow_add, mul_assoc]\n    exact Ideal.mul_mem_right _ (I ^ m) (Ideal.pow_mem_pow hx m)\n  obtain ⟨L, hL⟩ := is_precomplete.prec to_is_precomplete hf\n  · rw [isUnit_iff_exists_inv]\n    use L\n    rw [← sub_eq_zero, neg_mul]\n    apply is_Hausdorff.haus (to_is_Hausdorff : is_Hausdorff I R)\n    intro n\n    specialize hL n\n    rw [SModEq.sub_mem, Algebra.id.smul_eq_mul, Ideal.mul_top] at hL⊢\n    rw [sub_zero]\n    suffices (1 - x * y) * f n - 1 ∈ I ^ n\n      by\n      convert Ideal.sub_mem _ this (Ideal.mul_mem_left _ (1 + -(x * y)) hL) using 1\n      ring\n    cases n\n    · simp only [Ideal.one_eq_top, pow_zero]\n    · dsimp [f]\n      rw [← neg_sub _ (1 : R), neg_mul, mul_geom_sum, neg_sub, sub_sub, add_comm, ← sub_sub, sub_self, zero_sub,\n        neg_mem_iff, mul_pow]\n      exact Ideal.mul_mem_right _ (I ^ _) (Ideal.pow_mem_pow hx _)\n#align le_jacobson_bot le_jacobson_bot\n\n",
 "is_precomplete_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_precomplete_iff :\n    is_precomplete I M ↔\n      ∀ f : ℕ → M,\n        (∀ {m n}, m ≤ n → «expr ≡ [SMOD ]» (f m) (f n) («expr • » (I ^ m) («expr⊤») : Submodule R M)) →\n          ∃ L : M, ∀ n, «expr ≡ [SMOD ]» (f n) L («expr • » (I ^ n) («expr⊤») : Submodule R M) :=\n  ⟨fun h => h.1, fun h => ⟨h⟩⟩\n#align is_precomplete_iff is_precomplete_iff\n\n",
 "is_Hausdorff_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_Hausdorff_iff :\n    is_Hausdorff I M ↔ ∀ x : M, (∀ n : ℕ, «expr ≡ [SMOD ]» x 0 («expr • » (I ^ n) («expr⊤») : Submodule R M)) → x = 0 :=\n  ⟨is_Hausdorff.haus, fun h => ⟨h⟩⟩\n#align is_Hausdorff_iff is_Hausdorff_iff\n\n",
 "infi_pow_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem infi_pow_smul (h : is_Hausdorff I M) :\n    («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n          («expr • » (I ^ n) («expr⊤»)) :\n        Submodule R M) =\n      «expr⊥» :=\n  eq_bot_iff.2 fun x hx =>\n    (mem_bot _).2 <| h.haus x fun n => SModEq.zero.2 <| (mem_infᵢ fun n : ℕ => «expr • » (I ^ n) («expr⊤»)).1 hx n\n#align infi_pow_smul infi_pow_smul\n\n",
 "induction_on":
 "@[elab_as_elim]\ntheorem induction_on {C : Hausdorffification I M → Prop} (x : Hausdorffification I M) (ih : ∀ x, C (of I M x)) : C x :=\n  Quotient.inductionOn' x ih\n#align induction_on induction_on\n\n",
 "haus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [SMOD ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\ntheorem is_Hausdorff.haus (h : is_Hausdorff I M) :\n    ∀ x : M, (∀ n : ℕ, «expr ≡ [SMOD ]» x 0 («expr • » (I ^ n) («expr⊤») : Submodule R M)) → x = 0 :=\n  is_Hausdorff.haus'\n#align is_Hausdorff.haus is_Hausdorff.haus\n\n",
 "ext":
 "@[ext]\ntheorem ext {x y : adic_completion I M} (h : ∀ n, eval I M n x = eval I M n y) : x = y :=\n  Subtype.eq <| funext h\n#align ext ext\n\n",
 "eval_of":
 "theorem eval_of (n : ℕ) (x : M) : eval I M n (of I M x) = mkQ _ x :=\n  rfl\n#align eval_of eval_of\n\n",
 "eval_comp_of":
 "@[simp]\ntheorem eval_comp_of (n : ℕ) : (eval I M n).comp (of I M) = mkQ _ :=\n  rfl\n#align eval_comp_of eval_comp_of\n\n",
 "eval_apply":
 "theorem eval_apply (n : ℕ) (f : adic_completion I M) : eval I M n f = f.1 n :=\n  rfl\n#align eval_apply eval_apply\n\n",
 "coe_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem coe_eval (n : ℕ) :\n    (eval I M n : adic_completion I M → «expr ⧸ » M («expr • » (I ^ n) («expr⊤») : Submodule R M)) = fun f => f.1 n :=\n  rfl\n#align coe_eval coe_eval\n\n"}