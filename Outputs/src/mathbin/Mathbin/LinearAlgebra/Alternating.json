{"zero_comp_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem zero_comp_linear_map (g : «expr →ₗ[ ] » M₂ R M) : (0 : alternating_map R M N ι).comp_linear_map g = 0 :=\n  by\n  ext\n  simp only [comp_linear_map_apply, zero_apply]\n#align zero_comp_linear_map zero_comp_linear_map\n\n",
 "zero_apply":
 "@[simp]\ntheorem zero_apply : (0 : alternating_map R M N ι) v = 0 :=\n  rfl\n#align zero_apply zero_apply\n\n",
 "to_multilinear_map_eq_coe":
 "@[simp]\ntheorem to_multilinear_map_eq_coe : f.to_multilinear_map = f :=\n  rfl\n#align to_multilinear_map_eq_coe to_multilinear_map_eq_coe\n\n",
 "to_fun_eq_coe":
 "/-\nCopyright (c) 2020 Zhangir Azerbayev. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser, Zhangir Azerbayev\n-/\n-- semiring / add_comm_monoid\n-- semiring / add_comm_group\n@[simp]\ntheorem to_fun_eq_coe : f.to_fun = f :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "swap_smul_involutive":
 "theorem mod_sum_congr.swap_smul_involutive {α β : Type _} [decidable_eq (Sum α β)] (i j : Sum α β) :\n    function.involutive (has_smul.smul (Equiv.swap i j) : mod_sum_congr α β → mod_sum_congr α β) := fun σ =>\n  by\n  apply σ.induction_on' fun σ => _\n  exact _root_.congr_arg quotient.mk' (Equiv.swap_mul_involutive i j σ)\n#align mod_sum_congr.swap_smul_involutive mod_sum_congr.swap_smul_involutive\n\n",
 "summand_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product.infer -/\ntheorem dom_coprod.summand_mk' (a : alternating_map R' Mᵢ N₁ ιa) (b : alternating_map R' Mᵢ N₂ ιb)\n    (σ : equiv.perm (Sum ιa ιb)) :\n    dom_coprod.summand a b (quotient.mk' σ) =\n      «expr • » σ.sign\n        ((multilinear_map.dom_coprod ↑a ↑b :\n              multilinear_map R' (fun _ => Mᵢ) (tensor_product.infer N₁ N₂)).dom_dom_congr\n          σ) :=\n  rfl\n#align dom_coprod.summand_mk' dom_coprod.summand_mk'\n\n",
 "summand_eq_zero_of_smul_invariant":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Swapping elements in `σ` with equal values in `v` result in zero if the swap has no effect\non the quotient. -/\ntheorem dom_coprod.summand_eq_zero_of_smul_invariant (a : alternating_map R' Mᵢ N₁ ιa) (b : alternating_map R' Mᵢ N₂ ιb)\n    (σ : perm.mod_sum_congr ιa ιb) {v : Sum ιa ιb → Mᵢ} {i j : Sum ιa ιb} (hv : v i = v j) (hij : i ≠ j) :\n    «expr • » (swap i j) σ = σ → dom_coprod.summand a b σ v = 0 :=\n  by\n  apply σ.induction_on' fun σ => _\n  dsimp only [quotient.lift_on'_mk', quotient.map'_mk', multilinear_map.smul_apply, multilinear_map.dom_dom_congr_apply,\n    multilinear_map.dom_coprod_apply, dom_coprod.summand]\n  intro hσ\n  cases hi : σ⁻¹ i <;> cases hj : σ⁻¹ j <;> rw [perm.inv_eq_iff_eq] at hi hj <;> substs hi hj <;> revert val val_1\n  case inl.inr |\n    inr.inl =>\n    -- the term pairs with and cancels another term\n    all_goals\n      intro i' j' hv hij hσ\n      obtain ⟨⟨sl, sr⟩, hσ⟩ := quotient_group.left_rel_apply.mp (quotient.exact' hσ)\n    on_goal 1 => replace hσ := equiv.congr_fun hσ (sum.inl i')\n    on_goal 2 => replace hσ := equiv.congr_fun hσ (sum.inr i')\n    all_goals\n      rw [smul_eq_mul, ← mul_swap_eq_swap_mul, mul_inv_rev, swap_inv, inv_mul_cancel_right] at hσ\n      simpa using hσ\n  case inr.inr |\n    inl.inl =>\n    -- the term does not pair but is zero\n    all_goals\n      intro i' j' hv hij hσ\n      convert smul_zero _\n    on_goal 1 => convert tensor_product.tmul_zero _ _\n    on_goal 2 => convert tensor_product.zero_tmul _ _\n    all_goals exact alternating_map.map_eq_zero_of_eq _ _ hv fun hij' => hij (hij' ▸ rfl)\n#align dom_coprod.summand_eq_zero_of_smul_invariant dom_coprod.summand_eq_zero_of_smul_invariant\n\n",
 "summand_add_swap_smul_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Swapping elements in `σ` with equal values in `v` results in an addition that cancels -/\ntheorem dom_coprod.summand_add_swap_smul_eq_zero (a : alternating_map R' Mᵢ N₁ ιa) (b : alternating_map R' Mᵢ N₂ ιb)\n    (σ : perm.mod_sum_congr ιa ιb) {v : Sum ιa ιb → Mᵢ} {i j : Sum ιa ιb} (hv : v i = v j) (hij : i ≠ j) :\n    dom_coprod.summand a b σ v + dom_coprod.summand a b («expr • » (swap i j) σ) v = 0 :=\n  by\n  apply σ.induction_on' fun σ => _\n  dsimp only [quotient.lift_on'_mk', quotient.map'_mk', mul_action.quotient.smul_mk, dom_coprod.summand]\n  rw [smul_eq_mul, perm.sign_mul, perm.sign_swap hij]\n  simp only [one_mul, neg_mul, Function.comp_apply, Units.neg_smul, perm.coe_mul, Units.val_neg,\n    multilinear_map.smul_apply, multilinear_map.neg_apply, multilinear_map.dom_dom_congr_apply,\n    multilinear_map.dom_coprod_apply]\n  convert add_right_neg _ <;>\n    · ext k\n      rw [Equiv.apply_swap_eq_self hv]\n#align dom_coprod.summand_add_swap_smul_eq_zero dom_coprod.summand_add_swap_smul_eq_zero\n\n",
 "subtype_comp_alternating_map_cod_restrict":
 "@[simp]\ntheorem subtype_comp_alternating_map_cod_restrict (f : alternating_map R M N ι) (p : submodule R N) (h) :\n    p.subtype.comp_alternating_map (f.cod_restrict p h) = f :=\n  alternating_map.ext fun v => rfl\n#align subtype_comp_alternating_map_cod_restrict subtype_comp_alternating_map_cod_restrict\n\n",
 "sub_apply":
 "@[simp]\ntheorem sub_apply (m : ι → M) : (g - g₂) m = g m - g₂ m :=\n  rfl\n#align sub_apply sub_apply\n\n",
 "smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_apply (c : S) (m : ι → M) : («expr • » c f) m = «expr • » c (f m) :=\n  rfl\n#align smul_apply smul_apply\n\n",
 "neg_apply":
 "@[simp]\ntheorem neg_apply (m : ι → M) : (-g) m = -g m :=\n  rfl\n#align neg_apply neg_apply\n\n",
 "map_zero":
 "#print map_zero /-\n@[simp]\ntheorem map_zero [nonempty ι] : f 0 = 0 :=\n  f.to_multilinear_map.map_zero\n#align map_zero map_zero\n-/\n\n",
 "map_vec_cons_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- A version of `multilinear_map.cons_smul` for `alternating_map`. -/\ntheorem map_vec_cons_smul {n : ℕ} (f : alternating_map R M N (fin n.succ)) (m : fin n → M) (c : R) (x : M) :\n    f (matrix.vec_cons («expr • » c x) m) = «expr • » c (f (matrix.vec_cons x m)) :=\n  f.to_multilinear_map.cons_smul _ _ _\n#align map_vec_cons_smul map_vec_cons_smul\n\n",
 "map_vec_cons_add":
 "/-- A version of `multilinear_map.cons_add` for `alternating_map`. -/\ntheorem map_vec_cons_add {n : ℕ} (f : alternating_map R M N (fin n.succ)) (m : fin n → M) (x y : M) :\n    f (matrix.vec_cons (x + y) m) = f (matrix.vec_cons x m) + f (matrix.vec_cons y m) :=\n  f.to_multilinear_map.cons_add _ _ _\n#align map_vec_cons_add map_vec_cons_add\n\n",
 "map_update_zero":
 "@[simp]\ntheorem map_update_zero (m : ι → M) (i : ι) : f (update m i 0) = 0 :=\n  f.to_multilinear_map.map_update_zero m i\n#align map_update_zero map_update_zero\n\n",
 "map_update_update":
 "theorem map_update_update {i j : ι} (hij : i ≠ j) (m : M) : f (function.update (function.update v i m) j m) = 0 :=\n  f.map_eq_zero_of_eq _ (by rw [function.update_same, function.update_noteq hij, function.update_same]) hij\n#align map_update_update map_update_update\n\n",
 "map_update_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem map_update_sum {α : Type _} (t : Finset α) (i : ι) (g : α → M) (m : ι → M) :\n    f\n        (update m i\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (g a))) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t\n        (f (update m i (g a))) :=\n  f.to_multilinear_map.map_update_sum t i g m\n#align map_update_sum map_update_sum\n\n",
 "map_update_self":
 "theorem map_update_self {i j : ι} (hij : i ≠ j) : f (function.update v i (v j)) = 0 :=\n  f.map_eq_zero_of_eq _ (by rw [function.update_same, function.update_noteq hij.symm]) hij\n#align map_update_self map_update_self\n\n",
 "map_swap_add":
 "theorem map_swap_add {i j : ι} (hij : i ≠ j) : f (v ∘ Equiv.swap i j) + f v = 0 :=\n  by\n  rw [Equiv.comp_swap_eq_update]\n  convert f.map_update_update v hij (v i + v j)\n  simp [f.map_update_self _ hij, f.map_update_self _ hij.symm, function.update_comm hij (v i + v j) (v _) v,\n    function.update_comm hij.symm (v i) (v i) v]\n#align map_swap_add map_swap_add\n\n",
 "map_swap":
 "theorem map_swap {i j : ι} (hij : i ≠ j) : g (v ∘ Equiv.swap i j) = -g v :=\n  eq_neg_of_add_eq_zero_left <| g.map_swap_add v hij\n#align map_swap map_swap\n\n",
 "map_sub":
 "#print map_sub /-\n@[simp]\ntheorem map_sub (i : ι) (x y : M') : g' (update v' i (x - y)) = g' (update v' i x) - g' (update v' i y) :=\n  g'.to_multilinear_map.map_sub v' i x y\n#align map_sub map_sub\n-/\n\n",
 "map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem map_smul (i : ι) (r : R) (x : M) : f (update v i («expr • » r x)) = «expr • » r (f (update v i x)) :=\n  f.to_multilinear_map.map_smul' v i r x\n#align map_smul map_smul\n\n",
 "map_perm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem map_perm [fintype ι] (v : ι → M) (σ : equiv.perm ι) : g (v ∘ σ) = «expr • » σ.sign (g v) :=\n  by\n  apply equiv.perm.swap_induction_on' σ\n  · simp\n  · intro s x y hxy hI\n    simpa [g.map_swap (v ∘ s) hxy, equiv.perm.sign_swap hxy] using hI\n#align map_perm map_perm\n\n",
 "map_neg":
 "#print map_neg /-\n@[simp]\ntheorem map_neg (i : ι) (x : M') : g' (update v' i (-x)) = -g' (update v' i x) :=\n  g'.to_multilinear_map.map_neg v' i x\n#align map_neg map_neg\n-/\n\n",
 "map_linear_dependent":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If the arguments are linearly dependent then the result is `0`. -/\ntheorem map_linear_dependent {K : Type _} [Ring K] {M : Type _} [add_comm_group M] [Module K M] {N : Type _}\n    [add_comm_group N] [Module K N] [NoZeroSMulDivisors K N] (f : alternating_map K M N ι) (v : ι → M)\n    (h : ¬linear_independent K v) : f v = 0 :=\n  by\n  obtain ⟨s, g, h, i, hi, hz⟩ := not_linear_independent_iff.mp h\n  suffices f (update v i («expr • » (g i) (v i))) = 0\n    by\n    rw [f.map_smul, function.update_eq_self, smul_eq_zero] at this\n    exact or.resolve_left this hz\n  conv at h in «expr • » (g _) (v _) => rw [← if_t_t (i = x) («expr • » (g _) (v _))]\n  rw [finset.sum_ite, Finset.filter_eq, Finset.filter_ne, if_pos hi, finset.sum_singleton, add_eq_zero_iff_eq_neg] at h\n  rw [h, f.map_neg, f.map_update_sum, neg_eq_zero, finset.sum_eq_zero]\n  intro j hj\n  obtain ⟨hij, _⟩ := finset.mem_erase.mp hj\n  rw [f.map_smul, f.map_update_self _ hij.symm, smul_zero]\n#align map_linear_dependent map_linear_dependent\n\n",
 "map_eq_zero_of_not_injective":
 "theorem map_eq_zero_of_not_injective (v : ι → M) (hv : ¬function.injective v) : f v = 0 :=\n  by\n  rw [function.injective] at hv\n  push_neg  at hv\n  rcases hv with ⟨i₁, i₂, heq, hne⟩\n  exact f.map_eq_zero_of_eq v HEq hne\n#align map_eq_zero_of_not_injective map_eq_zero_of_not_injective\n\n",
 "map_eq_zero_of_eq":
 "@[simp]\ntheorem map_eq_zero_of_eq (v : ι → M) {i j : ι} (h : v i = v j) (hij : i ≠ j) : f v = 0 :=\n  f.map_eq_zero_of_eq' v i j h hij\n#align map_eq_zero_of_eq map_eq_zero_of_eq\n\n",
 "map_coord_zero":
 "theorem map_coord_zero {m : ι → M} (i : ι) (h : m i = 0) : f m = 0 :=\n  f.to_multilinear_map.map_coord_zero i h\n#align map_coord_zero map_coord_zero\n\n",
 "map_congr_perm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem map_congr_perm [fintype ι] (σ : equiv.perm ι) : g v = «expr • » σ.sign (g (v ∘ σ)) :=\n  by\n  rw [g.map_perm, smul_smul]\n  simp\n#align map_congr_perm map_congr_perm\n\n",
 "map_add_swap":
 "theorem map_add_swap {i j : ι} (hij : i ≠ j) : f v + f (v ∘ Equiv.swap i j) = 0 :=\n  by\n  rw [add_comm]\n  exact f.map_swap_add v hij\n#align map_add_swap map_add_swap\n\n",
 "map_add":
 "#print map_add /-\n@[simp]\ntheorem map_add (i : ι) (x y : M) : f (update v i (x + y)) = f (update v i x) + f (update v i y) :=\n  f.to_multilinear_map.map_add' v i x y\n#align map_add map_add\n-/\n\n",
 "ext_iff":
 "theorem ext_iff {f g : alternating_map R M N ι} : f = g ↔ ∀ x, f x = g x :=\n  ⟨fun h x => h ▸ rfl, fun h => ext h⟩\n#align ext_iff ext_iff\n\n",
 "ext_alternating":
 "/-- Two alternating maps indexed by a `fintype` are equal if they are equal when all arguments\nare distinct basis vectors. -/\ntheorem basis.ext_alternating {f g : alternating_map R' N₁ N₂ ι} (e : basis ι₁ R' N₁)\n    (h : ∀ v : ι → ι₁, function.injective v → (f fun i => e (v i)) = g fun i => e (v i)) : f = g :=\n  by\n  refine' alternating_map.coe_multilinear_map_injective (basis.ext_multilinear e fun v => _)\n  by_cases hi : function.injective v\n  · exact h v hi\n  · have : ¬function.injective fun i => e (v i) := hi.imp function.injective.of_comp\n    rw [coe_multilinear_map, coe_multilinear_map, f.map_eq_zero_of_not_injective _ this,\n      g.map_eq_zero_of_not_injective _ this]\n#align basis.ext_alternating basis.ext_alternating\n\n",
 "ext":
 "@[ext]\ntheorem ext {f f' : alternating_map R M N ι} (H : ∀ x, f x = f' x) : f = f' :=\n  coe_injective (funext H)\n#align ext ext\n\n",
 "dom_lcongr_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\ntheorem dom_lcongr_trans (e : «expr ≃ₗ[ ] » M R M₂) (f : «expr ≃ₗ[ ] » M₂ R M₃) :\n    (dom_lcongr R N ι S e).trans (dom_lcongr R N ι S f) = dom_lcongr R N ι S (e.trans f) :=\n  rfl\n#align dom_lcongr_trans dom_lcongr_trans\n\n",
 "dom_lcongr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n@[simp]\ntheorem dom_lcongr_symm (e : «expr ≃ₗ[ ] » M R M₂) : (dom_lcongr R N ι S e).symm = dom_lcongr R N ι S e.symm :=\n  rfl\n#align dom_lcongr_symm dom_lcongr_symm\n\n",
 "dom_lcongr_refl":
 "@[simp]\ntheorem dom_lcongr_refl : dom_lcongr R N ι S (linear_equiv.refl R M) = linear_equiv.refl S _ :=\n  linear_equiv.ext fun _ => alternating_map.ext fun v => rfl\n#align dom_lcongr_refl dom_lcongr_refl\n\n",
 "dom_dom_congr_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem dom_dom_congr_zero (σ : «expr ≃ » ι ι') : (0 : alternating_map R M N ι).dom_dom_congr σ = 0 :=\n  rfl\n#align dom_dom_congr_zero dom_dom_congr_zero\n\n",
 "dom_dom_congr_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem dom_dom_congr_trans (σ₁ : «expr ≃ » ι ι') (σ₂ : «expr ≃ » ι' ι'') (f : alternating_map R M N ι) :\n    f.dom_dom_congr (σ₁.trans σ₂) = (f.dom_dom_congr σ₁).dom_dom_congr σ₂ :=\n  rfl\n#align dom_dom_congr_trans dom_dom_congr_trans\n\n",
 "dom_dom_congr_refl":
 "@[simp]\ntheorem dom_dom_congr_refl (f : alternating_map R M N ι) : f.dom_dom_congr (equiv.refl ι) = f :=\n  ext fun v => rfl\n#align dom_dom_congr_refl dom_dom_congr_refl\n\n",
 "dom_dom_congr_perm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem dom_dom_congr_perm [fintype ι] (σ : equiv.perm ι) : g.dom_dom_congr σ = «expr • » σ.sign g :=\n  alternating_map.ext fun v => g.map_perm v σ\n#align dom_dom_congr_perm dom_dom_congr_perm\n\n",
 "dom_dom_congr_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem dom_dom_congr_eq_zero_iff (σ : «expr ≃ » ι ι') (f : alternating_map R M N ι) : f.dom_dom_congr σ = 0 ↔ f = 0 :=\n  (dom_dom_congr_equiv σ : «expr ≃+ » (alternating_map R M N ι) (alternating_map R M N ι')).map_eq_zero_iff\n#align dom_dom_congr_eq_zero_iff dom_dom_congr_eq_zero_iff\n\n",
 "dom_dom_congr_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- The results of applying `dom_dom_congr` to two maps are equal if and only if those maps are. -/\n@[simp]\ntheorem dom_dom_congr_eq_iff (σ : «expr ≃ » ι ι') (f g : alternating_map R M N ι) :\n    f.dom_dom_congr σ = g.dom_dom_congr σ ↔ f = g :=\n  (dom_dom_congr_equiv σ : «expr ≃+ » _ (alternating_map R M N ι')).apply_eq_iff_eq\n#align dom_dom_congr_eq_iff dom_dom_congr_eq_iff\n\n",
 "dom_dom_congr_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem dom_dom_congr_add (σ : «expr ≃ » ι ι') (f g : alternating_map R M N ι) :\n    (f + g).dom_dom_congr σ = f.dom_dom_congr σ + g.dom_dom_congr σ :=\n  rfl\n#align dom_dom_congr_add dom_dom_congr_add\n\n",
 "dom_coprod_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem dom_coprod_coe (a : alternating_map R' Mᵢ N₁ ιa) (b : alternating_map R' Mᵢ N₂ ιb) :\n    (↑(a.dom_coprod b) : multilinear_map R' (fun _ => Mᵢ) _) =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (dom_coprod.summand a b σ) :=\n  multilinear_map.ext fun _ => rfl\n#align dom_coprod_coe dom_coprod_coe\n\n",
 "dom_coprod_alternization_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product.infer -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Taking the `multilinear_map.alternatization` of the `multilinear_map.dom_coprod` of two\n`alternating_map`s gives a scaled version of the `alternating_map.coprod` of those maps.\n-/\ntheorem multilinear_map.dom_coprod_alternization_eq (a : alternating_map R' Mᵢ N₁ ιa)\n    (b : alternating_map R' Mᵢ N₂ ιb) :\n    (multilinear_map.dom_coprod a b :\n          multilinear_map R' (fun _ : Sum ιa ιb => Mᵢ) (tensor_product.infer N₁ N₂)).alternatization =\n      «expr • » ((fintype.card ιa).factorial * (fintype.card ιb).factorial) (a.dom_coprod b) :=\n  by\n  rw [multilinear_map.dom_coprod_alternization, coe_alternatization, coe_alternatization, mul_smul, ← dom_coprod'_apply,\n    ← dom_coprod'_apply, ← tensor_product.smul_tmul', tensor_product.tmul_smul,\n    linear_map.map_smul_of_tower dom_coprod', linear_map.map_smul_of_tower dom_coprod']\n  -- typeclass resolution is a little confused here\n  infer_instance;\n  infer_instance\n#align multilinear_map.dom_coprod_alternization_eq multilinear_map.dom_coprod_alternization_eq\n\n",
 "dom_coprod_alternization_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- A helper lemma for `multilinear_map.dom_coprod_alternization`. -/\ntheorem multilinear_map.dom_coprod_alternization_coe (a : multilinear_map R' (fun _ : ιa => Mᵢ) N₁)\n    (b : multilinear_map R' (fun _ : ιb => Mᵢ) N₂) :\n    multilinear_map.dom_coprod ↑a.alternatization ↑b.alternatization =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («expr • » σa.sign\n          («expr • » σb.sign (multilinear_map.dom_coprod (a.dom_dom_congr σa) (b.dom_dom_congr σb)))) :=\n  by\n  simp_rw [← multilinear_map.dom_coprod'_apply, multilinear_map.alternatization_coe]\n  simp_rw [tensor_product.sum_tmul, tensor_product.tmul_sum, linear_map.map_sum, ← tensor_product.smul_tmul',\n    tensor_product.tmul_smul, linear_map.map_smul_of_tower]\n#align multilinear_map.dom_coprod_alternization_coe multilinear_map.dom_coprod_alternization_coe\n\n",
 "dom_coprod_alternization":
 "/-- Computing the `multilinear_map.alternatization` of the `multilinear_map.dom_coprod` is the same\nas computing the `alternating_map.dom_coprod` of the `multilinear_map.alternatization`s.\n-/\ntheorem multilinear_map.dom_coprod_alternization (a : multilinear_map R' (fun _ : ιa => Mᵢ) N₁)\n    (b : multilinear_map R' (fun _ : ιb => Mᵢ) N₂) :\n    (multilinear_map.dom_coprod a b).alternatization = a.alternatization.dom_coprod b.alternatization :=\n  by\n  apply coe_multilinear_map_injective\n  rw [dom_coprod_coe, multilinear_map.alternatization_coe,\n    finset.sum_partition (quotient_group.left_rel (perm.sum_congr_hom ιa ιb).range)]\n  congr 1\n  ext1 σ\n  apply σ.induction_on' fun σ => _\n  -- unfold the quotient mess left by `finset.sum_partition`\n  conv in _ = quotient.mk' _ =>\n    change quotient.mk' _ = quotient.mk' _\n    rw [quotient_group.eq']\n  -- eliminate a multiplication\n  rw [← finset.map_univ_equiv (Equiv.mulLeft σ), Finset.filter_map, finset.sum_map]\n  simp_rw [Equiv.coe_toEmbedding, Equiv.coe_mulLeft, (· ∘ ·), mul_inv_rev, inv_mul_cancel_right, subgroup.inv_mem_iff,\n    monoid_hom.mem_range, finset.univ_filter_exists, finset.sum_image (perm.sum_congr_hom_injective.inj_on _)]\n  -- now we're ready to clean up the RHS, pulling out the summation\n  rw [dom_coprod.summand_mk', multilinear_map.dom_coprod_alternization_coe, ← finset.sum_product',\n    finset.univ_product_univ, ← multilinear_map.dom_dom_congr_equiv_apply, add_equiv.map_sum, finset.smul_sum]\n  congr 1\n  ext1 ⟨al, ar⟩\n  dsimp only\n  -- pull out the pair of smuls on the RHS, by rewriting to `_ →ₗ[ℤ] _` and back\n  rw [← AddEquiv.coe_toAddMonoidHom, ← add_monoid_hom.coe_to_int_linear_map, linear_map.map_smul_of_tower,\n    linear_map.map_smul_of_tower, add_monoid_hom.coe_to_int_linear_map, AddEquiv.coe_toAddMonoidHom,\n    multilinear_map.dom_dom_congr_equiv_apply]\n  -- pick up the pieces\n  rw [multilinear_map.dom_dom_congr_mul, perm.sign_mul, perm.sum_congr_hom_apply,\n    multilinear_map.dom_coprod_dom_dom_congr_sum_congr, perm.sign_sum_congr, mul_smul, mul_smul]\n#align multilinear_map.dom_coprod_alternization multilinear_map.dom_coprod_alternization\n\n",
 "dom_coprod'_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n@[simp]\ntheorem dom_coprod'_apply (a : alternating_map R' Mᵢ N₁ ιa) (b : alternating_map R' Mᵢ N₂ ιb) :\n    dom_coprod' («expr ⊗ₜ[ ] » a R' b) = dom_coprod a b :=\n  rfl\n#align dom_coprod'_apply dom_coprod'_apply\n\n",
 "curry_left_zero":
 "@[simp]\ntheorem curry_left_zero {n : ℕ} : curry_left (0 : alternating_map R' M'' N'' (fin n.succ)) = 0 :=\n  rfl\n#align curry_left_zero curry_left_zero\n\n",
 "curry_left_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem curry_left_smul {n : ℕ} (r : R') (f : alternating_map R' M'' N'' (fin n.succ)) :\n    curry_left («expr • » r f) = «expr • » r (curry_left f) :=\n  rfl\n#align curry_left_smul curry_left_smul\n\n",
 "curry_left_same":
 "/-- Currying with the same element twice gives the zero map. -/\n@[simp]\ntheorem curry_left_same {n : ℕ} (f : alternating_map R' M'' N'' (fin n.succ.succ)) (m : M'') :\n    (f.curry_left m).curry_left m = 0 :=\n  ext fun x => f.map_eq_zero_of_eq _ (by simp) Fin.zero_ne_one\n#align curry_left_same curry_left_same\n\n",
 "curry_left_comp_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem curry_left_comp_linear_map {n : ℕ} (g : «expr →ₗ[ ] » M₂'' R' M'') (f : alternating_map R' M'' N'' (fin n.succ))\n    (m : M₂'') : (f.comp_linear_map g).curry_left m = (f.curry_left (g m)).comp_linear_map g :=\n  ext fun v =>\n    congr_arg f <|\n      funext <| by\n        refine' Fin.cases _ _\n        · rfl\n        · simp\n#align curry_left_comp_linear_map curry_left_comp_linear_map\n\n",
 "curry_left_comp_alternating_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem curry_left_comp_alternating_map {n : ℕ} (g : «expr →ₗ[ ] » N'' R' N₂'')\n    (f : alternating_map R' M'' N'' (fin n.succ)) (m : M'') :\n    (g.comp_alternating_map f).curry_left m = g.comp_alternating_map (f.curry_left m) :=\n  rfl\n#align curry_left_comp_alternating_map curry_left_comp_alternating_map\n\n",
 "curry_left_add":
 "@[simp]\ntheorem curry_left_add {n : ℕ} (f g : alternating_map R' M'' N'' (fin n.succ)) :\n    curry_left (f + g) = curry_left f + curry_left g :=\n  rfl\n#align curry_left_add curry_left_add\n\n",
 "congr_fun":
 "#print congr_fun /-\ntheorem congr_fun {f g : alternating_map R M N ι} (h : f = g) (x : ι → M) : f x = g x :=\n  congr_arg (fun h : alternating_map R M N ι => h x) h\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "#print congr_arg /-\ntheorem congr_arg (f : alternating_map R M N ι) {x y : ι → M} (h : x = y) : f x = f y :=\n  congr_arg (fun x : ι → M => f x) h\n#align congr_arg congr_arg\n-/\n\n",
 "comp_multilinear_map_alternatization":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- Composition with a linear map before and after alternatization are equivalent. -/\ntheorem comp_multilinear_map_alternatization (g : «expr →ₗ[ ] » N' R N'₂) (f : multilinear_map R (fun _ : ι => M) N') :\n    (g.comp_multilinear_map f).alternatization = g.comp_alternating_map f.alternatization :=\n  by\n  ext\n  simp [multilinear_map.alternatization_def]\n#align comp_multilinear_map_alternatization comp_multilinear_map_alternatization\n\n",
 "comp_linear_map_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem comp_linear_map_zero [nonempty ι] (f : alternating_map R M N ι) :\n    f.comp_linear_map (0 : «expr →ₗ[ ] » M₂ R M) = 0 := by\n  ext\n  simp_rw [comp_linear_map_apply, linear_map.zero_apply, ← pi.zero_def, map_zero, zero_apply]\n#align comp_linear_map_zero comp_linear_map_zero\n\n",
 "comp_linear_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- Composing with a surjective linear map is injective. -/\ntheorem comp_linear_map_injective (f : «expr →ₗ[ ] » M₂ R M) (hf : function.surjective f) :\n    function.injective fun g : alternating_map R M N ι => g.comp_linear_map f := fun g₁ g₂ h =>\n  ext fun x => by simpa [Function.surjInv_eq hf] using ext_iff.mp h (function.surj_inv hf ∘ x)\n#align comp_linear_map_injective comp_linear_map_injective\n\n",
 "comp_linear_map_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem comp_linear_map_inj (f : «expr →ₗ[ ] » M₂ R M) (hf : function.surjective f) (g₁ g₂ : alternating_map R M N ι) :\n    g₁.comp_linear_map f = g₂.comp_linear_map f ↔ g₁ = g₂ :=\n  (comp_linear_map_injective _ hf).eq_iff\n#align comp_linear_map_inj comp_linear_map_inj\n\n",
 "comp_linear_map_id":
 "/-- Composing an alternating map with the identity linear map in each argument. -/\n@[simp]\ntheorem comp_linear_map_id (f : alternating_map R M N ι) : f.comp_linear_map linear_map.id = f :=\n  ext fun _ => rfl\n#align comp_linear_map_id comp_linear_map_id\n\n",
 "comp_linear_map_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/-- Composing an alternating map twice with the same linear map in each argument is\nthe same as composing with their composition. -/\ntheorem comp_linear_map_assoc (f : alternating_map R M N ι) (g₁ : «expr →ₗ[ ] » M₂ R M) (g₂ : «expr →ₗ[ ] » M₃ R M₂) :\n    (f.comp_linear_map g₁).comp_linear_map g₂ = f.comp_linear_map («expr ∘ₗ » g₁ g₂) :=\n  rfl\n#align comp_linear_map_assoc comp_linear_map_assoc\n\n",
 "comp_linear_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem comp_linear_map_apply (f : alternating_map R M N ι) (g : «expr →ₗ[ ] » M₂ R M) (v : ι → M₂) :\n    f.comp_linear_map g v = f fun i => g (v i) :=\n  rfl\n#align comp_linear_map_apply comp_linear_map_apply\n\n",
 "comp_linear_equiv_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- Composing an alternating map with the same linear equiv on each argument gives the zero map\nif and only if the alternating map is the zero map. -/\n@[simp]\ntheorem comp_linear_equiv_eq_zero_iff (f : alternating_map R M N ι) (g : «expr ≃ₗ[ ] » M₂ R M) :\n    f.comp_linear_map (g : «expr →ₗ[ ] » M₂ R M) = 0 ↔ f = 0 :=\n  (dom_lcongr R N ι ℕ g.symm).map_eq_zero_iff\n#align comp_linear_equiv_eq_zero_iff comp_linear_equiv_eq_zero_iff\n\n",
 "comp_alternating_map_cod_restrict":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem comp_alternating_map_cod_restrict (g : «expr →ₗ[ ] » N R N₂) (f : alternating_map R M N ι) (p : submodule R N₂)\n    (h) : (g.cod_restrict p h).comp_alternating_map f = (g.comp_alternating_map f).cod_restrict p fun v => h (f v) :=\n  alternating_map.ext fun v => rfl\n#align comp_alternating_map_cod_restrict comp_alternating_map_cod_restrict\n\n",
 "comp_alternating_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem comp_alternating_map_apply (g : «expr →ₗ[ ] » N R N₂) (f : alternating_map R M N ι) (m : ι → M) :\n    g.comp_alternating_map f m = g (f m) :=\n  rfl\n#align comp_alternating_map_apply comp_alternating_map_apply\n\n",
 "coe_zero":
 "@[norm_cast]\ntheorem coe_zero : ((0 : alternating_map R M N ι) : multilinear_map R (fun i : ι => M) N) = 0 :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_sub":
 "@[norm_cast]\ntheorem coe_sub : (↑(g - g₂) : multilinear_map R (fun i : ι => M) N') = g - g₂ :=\n  rfl\n#align coe_sub coe_sub\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[norm_cast]\ntheorem coe_smul (c : S) :\n    ((«expr • » c f : alternating_map R M N ι) : multilinear_map R (fun i : ι => M) N) = «expr • » c f :=\n  rfl\n#align coe_smul coe_smul\n\n",
 "coe_neg":
 "@[norm_cast]\ntheorem coe_neg : ((-g : alternating_map R M N' ι) : multilinear_map R (fun i : ι => M) N') = -g :=\n  rfl\n#align coe_neg coe_neg\n\n",
 "coe_multilinear_map_mk":
 "@[simp]\ntheorem coe_multilinear_map_mk (f : (ι → M) → N) (h₁ h₂ h₃) :\n    ((⟨f, h₁, h₂, h₃⟩ : alternating_map R M N ι) : multilinear_map R (fun i : ι => M) N) = ⟨f, h₁, h₂⟩ :=\n  rfl\n#align coe_multilinear_map_mk coe_multilinear_map_mk\n\n",
 "coe_multilinear_map_injective":
 "theorem coe_multilinear_map_injective :\n    function.injective (coe : alternating_map R M N ι → multilinear_map R (fun i : ι => M) N) := fun x y h =>\n  ext <| multilinear_map.congr_fun h\n#align coe_multilinear_map_injective coe_multilinear_map_injective\n\n",
 "coe_multilinear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_multilinear_map : «expr⇑ » (f : multilinear_map R (fun i : ι => M) N) = f :=\n  rfl\n#align coe_multilinear_map coe_multilinear_map\n\n",
 "coe_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mk (f : (ι → M) → N) (h₁ h₂ h₃) : «expr⇑ » (⟨f, h₁, h₂, h₃⟩ : alternating_map R M N ι) = f :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_injective":
 "theorem coe_injective : injective (coe_fn : alternating_map R M N ι → (ι → M) → N) := fun f g h =>\n  by\n  cases f\n  cases g\n  cases h\n  rfl\n#align coe_injective coe_injective\n\n",
 "coe_inj":
 "@[simp, norm_cast]\ntheorem coe_inj {f g : alternating_map R M N ι} : (f : (ι → M) → N) = g ↔ f = g :=\n  coe_injective.eq_iff\n#align coe_inj coe_inj\n\n",
 "coe_fn_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem coe_fn_smul (c : S) (f : alternating_map R M N ι) : «expr⇑ » («expr • » c f) = «expr • » c f :=\n  rfl\n#align coe_fn_smul coe_fn_smul\n\n",
 "coe_dom_dom_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[norm_cast]\ntheorem coe_dom_dom_congr (σ : «expr ≃ » ι ι') :\n    ↑(f.dom_dom_congr σ) = (f : multilinear_map R (fun _ : ι => M) N).dom_dom_congr σ :=\n  multilinear_map.ext fun v => rfl\n#align coe_dom_dom_congr coe_dom_dom_congr\n\n",
 "coe_comp_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem coe_comp_linear_map (f : alternating_map R M N ι) (g : «expr →ₗ[ ] » M₂ R M) :\n    «expr⇑ » (f.comp_linear_map g) = f ∘ (· ∘ ·) g :=\n  rfl\n#align coe_comp_linear_map coe_comp_linear_map\n\n",
 "coe_comp_alternating_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_comp_alternating_map (g : «expr →ₗ[ ] » N R N₂) (f : alternating_map R M N ι) :\n    «expr⇑ » (g.comp_alternating_map f) = g ∘ f :=\n  rfl\n#align coe_comp_alternating_map coe_comp_alternating_map\n\n",
 "coe_alternatization":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Alternatizing a multilinear map that is already alternating results in a scale factor of `n!`,\nwhere `n` is the number of inputs. -/\ntheorem coe_alternatization [fintype ι] (a : alternating_map R M N' ι) :\n    (↑a : multilinear_map R (fun ι => M) N').alternatization = «expr • » (Nat.factorial (fintype.card ι)) a :=\n  by\n  apply alternating_map.coe_injective\n  simp_rw [multilinear_map.alternatization_def, ← coe_dom_dom_congr, dom_dom_congr_perm, coe_smul, smul_smul,\n    Int.units_mul_self, one_smul, finset.sum_const, finset.card_univ, fintype.card_perm, ← coe_multilinear_map,\n    coe_smul]\n#align coe_alternatization coe_alternatization\n\n",
 "coe_add":
 "@[norm_cast]\ntheorem coe_add : (↑(f + f') : multilinear_map R (fun i : ι => M) N) = f + f' :=\n  rfl\n#align coe_add coe_add\n\n",
 "alternization_map_eq_zero_of_eq_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem alternization_map_eq_zero_of_eq_aux (m : multilinear_map R (fun i : ι => M) N') (v : ι → M) (i j : ι)\n    (i_ne_j : i ≠ j) (hv : v i = v j) :\n    (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          («expr • » σ.sign (m.dom_dom_congr σ)))\n        v =\n      0 :=\n  by\n  rw [sum_apply]\n  exact\n    finset.sum_involution (fun σ _ => swap i j * σ) (fun σ _ => by simp [perm.sign_swap i_ne_j, apply_swap_eq_self hv])\n      (fun σ _ _ => (not_congr swap_mul_eq_iff).mpr i_ne_j) (fun σ _ => finset.mem_univ _) fun σ _ =>\n      swap_mul_involutive i j σ\n#align alternization_map_eq_zero_of_eq_aux alternization_map_eq_zero_of_eq_aux\n\n",
 "alternatization_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem alternatization_def (m : multilinear_map R (fun i : ι => M) N') :\n    «expr⇑ » (alternatization m) =\n      (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          («expr • » σ.sign (m.dom_dom_congr σ)) :\n        _) :=\n  rfl\n#align alternatization_def alternatization_def\n\n",
 "alternatization_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem alternatization_coe (m : multilinear_map R (fun i : ι => M) N') :\n    ↑m.alternatization =\n      (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          («expr • » σ.sign (m.dom_dom_congr σ)) :\n        _) :=\n  coe_injective rfl\n#align alternatization_coe alternatization_coe\n\n",
 "alternatization_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem alternatization_apply (m : multilinear_map R (fun i : ι => M) N') (v : ι → M) :\n    alternatization m v =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («expr • » σ.sign (m.dom_dom_congr σ v)) :=\n  by simp only [alternatization_def, smul_apply, sum_apply]\n#align alternatization_apply alternatization_apply\n\n",
 "add_comp_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem add_comp_linear_map (f₁ f₂ : alternating_map R M N ι) (g : «expr →ₗ[ ] » M₂ R M) :\n    (f₁ + f₂).comp_linear_map g = f₁.comp_linear_map g + f₂.comp_linear_map g :=\n  by\n  ext\n  simp only [comp_linear_map_apply, add_apply]\n#align add_comp_linear_map add_comp_linear_map\n\n",
 "add_apply":
 "@[simp]\ntheorem add_apply : (f + f') v = f v + f' v :=\n  rfl\n#align add_apply add_apply\n\n"}