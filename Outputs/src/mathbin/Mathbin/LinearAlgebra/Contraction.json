{"zero_prod_map_dual_tensor_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n@[simp]\ntheorem zero_prod_map_dual_tensor_hom (g : module.dual R N) (q : Q) :\n    (0 : «expr →ₗ[ ] » M R P).prod_map ((dual_tensor_hom R N Q) («expr ⊗ₜ[ ] » g R q)) =\n      dual_tensor_hom R (M × N) (P × Q) («expr ⊗ₜ » («expr ∘ₗ » g (snd R M N)) (inr R P Q q)) :=\n  by\n  ext <;>\n    simp only [coe_comp, coe_inr, Function.comp_apply, prod_map_apply, dual_tensor_hom_apply, snd_apply, Prod.smul_mk,\n      zero_apply, smul_zero]\n#align zero_prod_map_dual_tensor_hom zero_prod_map_dual_tensor_hom\n\n",
 "transpose_dual_tensor_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n@[simp]\ntheorem transpose_dual_tensor_hom (f : module.dual R M) (m : M) :\n    dual.transpose (dual_tensor_hom R M M («expr ⊗ₜ » f m)) = dual_tensor_hom R _ _ («expr ⊗ₜ » (dual.eval R M m) f) :=\n  by\n  ext (f' m')\n  simp only [dual.transpose_apply, coe_comp, Function.comp_apply, dual_tensor_hom_apply, linear_map.map_smulₛₗ,\n    RingHom.id_apply, algebra.id.smul_eq_mul, dual.eval_apply, smul_apply]\n  exact mul_comm _ _\n#align transpose_dual_tensor_hom transpose_dual_tensor_hom\n\n",
 "to_matrix_dual_tensor_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/-- As a matrix, `dual_tensor_hom` evaluated on a basis element of `M* ⊗ N` is a matrix with a\nsingle one and zeros elsewhere -/\ntheorem to_matrix_dual_tensor_hom {m : Type _} {n : Type _} [fintype m] [fintype n] [decidable_eq m] [decidable_eq n]\n    (bM : basis m R M) (bN : basis n R N) (j : m) (i : n) :\n    to_matrix bM bN (dual_tensor_hom R M N («expr ⊗ₜ » (bM.coord j) (bN i))) = std_basis_matrix i j 1 :=\n  by\n  ext (i' j')\n  by_cases hij : i = i' ∧ j = j' <;> simp [linear_map.to_matrix_apply, finsupp.single_eq_pi_single, hij]\n  rw [and_iff_not_or_not, not_not] at hij; cases hij <;> simp [hij]\n#align to_matrix_dual_tensor_hom to_matrix_dual_tensor_hom\n\n",
 "rtensor_hom_equiv_hom_rtensor_to_linear_map":
 "@[simp]\ntheorem rtensor_hom_equiv_hom_rtensor_to_linear_map :\n    (rtensor_hom_equiv_hom_rtensor R M P Q).to_linear_map = rtensor_hom_to_hom_rtensor R M P Q :=\n  by\n  let e := congr (dual_tensor_hom_equiv R M P) (linear_equiv.refl R Q)\n  have h : function.surjective e.to_linear_map := e.surjective\n  refine' (cancel_right h).1 _\n  ext (f p q m)\n  simp only [rtensor_hom_equiv_hom_rtensor, dual_tensor_hom_equiv, compr₂_apply, mk_apply, coe_comp,\n    linear_equiv.coe_to_linear_map, Function.comp_apply, map_tmul, linear_equiv.coe_coe,\n    dual_tensor_hom_equiv_of_basis_apply, linear_equiv.trans_apply, congr_tmul,\n    dual_tensor_hom_equiv_of_basis_symm_cancel_left, linear_equiv.refl_apply, assoc_tmul, dual_tensor_hom_apply,\n    rtensor_hom_to_hom_rtensor_apply, smul_tmul']\n#align rtensor_hom_equiv_hom_rtensor_to_linear_map rtensor_hom_equiv_hom_rtensor_to_linear_map\n\n",
 "rtensor_hom_equiv_hom_rtensor_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem rtensor_hom_equiv_hom_rtensor_apply (x : tensor_product («expr →ₗ[ ] » M R P) R Q) :\n    rtensor_hom_equiv_hom_rtensor R M P Q x = rtensor_hom_to_hom_rtensor R M P Q x := by\n  rw [← linear_equiv.coe_to_linear_map, rtensor_hom_equiv_hom_rtensor_to_linear_map]\n#align rtensor_hom_equiv_hom_rtensor_apply rtensor_hom_equiv_hom_rtensor_apply\n\n",
 "map_dual_tensor_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\ntheorem map_dual_tensor_hom (f : module.dual R M) (p : P) (g : module.dual R N) (q : Q) :\n    tensor_product.map (dual_tensor_hom R M P («expr ⊗ₜ[ ] » f R p)) (dual_tensor_hom R N Q («expr ⊗ₜ[ ] » g R q)) =\n      dual_tensor_hom R (tensor_product M R N) (tensor_product P R Q)\n        («expr ⊗ₜ[ ] » (dual_distrib R M N («expr ⊗ₜ » f g)) R («expr ⊗ₜ[ ] » p R q)) :=\n  by ext (m n);\n  simp only [compr₂_apply, mk_apply, map_tmul, dual_tensor_hom_apply, dual_distrib_apply, ← smul_tmul_smul]\n#align map_dual_tensor_hom map_dual_tensor_hom\n\n",
 "ltensor_hom_equiv_hom_ltensor_to_linear_map":
 "@[simp]\ntheorem ltensor_hom_equiv_hom_ltensor_to_linear_map :\n    (ltensor_hom_equiv_hom_ltensor R M P Q).to_linear_map = ltensor_hom_to_hom_ltensor R M P Q :=\n  by\n  let e := congr (linear_equiv.refl R P) (dual_tensor_hom_equiv R M Q)\n  have h : function.surjective e.to_linear_map := e.surjective\n  refine' (cancel_right h).1 _\n  ext (p f q m)\n  dsimp [ltensor_hom_equiv_hom_ltensor]\n  simp only [ltensor_hom_equiv_hom_ltensor, dual_tensor_hom_equiv, compr₂_apply, mk_apply, coe_comp,\n    linear_equiv.coe_to_linear_map, Function.comp_apply, map_tmul, linear_equiv.coe_coe,\n    dual_tensor_hom_equiv_of_basis_apply, linear_equiv.trans_apply, congr_tmul, linear_equiv.refl_apply,\n    dual_tensor_hom_equiv_of_basis_symm_cancel_left, left_comm_tmul, dual_tensor_hom_apply,\n    ltensor_hom_to_hom_ltensor_apply, tmul_smul]\n#align ltensor_hom_equiv_hom_ltensor_to_linear_map ltensor_hom_equiv_hom_ltensor_to_linear_map\n\n",
 "ltensor_hom_equiv_hom_ltensor_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem ltensor_hom_equiv_hom_ltensor_apply (x : tensor_product P R («expr →ₗ[ ] » M R Q)) :\n    ltensor_hom_equiv_hom_ltensor R M P Q x = ltensor_hom_to_hom_ltensor R M P Q x := by\n  rw [← linear_equiv.coe_to_linear_map, ltensor_hom_equiv_hom_ltensor_to_linear_map]\n#align ltensor_hom_equiv_hom_ltensor_apply ltensor_hom_equiv_hom_ltensor_apply\n\n",
 "hom_tensor_hom_equiv_to_linear_map":
 "@[simp]\ntheorem hom_tensor_hom_equiv_to_linear_map :\n    (hom_tensor_hom_equiv R M N P Q).to_linear_map = hom_tensor_hom_map R M N P Q :=\n  by\n  ext (f g m n)\n  simp only [hom_tensor_hom_equiv, compr₂_apply, mk_apply, linear_equiv.coe_to_linear_map, linear_equiv.trans_apply,\n    lift.equiv_apply, linear_equiv.arrow_congr_apply, linear_equiv.refl_symm, linear_equiv.refl_apply,\n    rtensor_hom_equiv_hom_rtensor_apply, ltensor_hom_equiv_hom_ltensor_apply, ltensor_hom_to_hom_ltensor_apply,\n    rtensor_hom_to_hom_rtensor_apply, hom_tensor_hom_map_apply, map_tmul]\n#align hom_tensor_hom_equiv_to_linear_map hom_tensor_hom_equiv_to_linear_map\n\n",
 "hom_tensor_hom_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem hom_tensor_hom_equiv_apply (x : tensor_product («expr →ₗ[ ] » M R P) R («expr →ₗ[ ] » N R Q)) :\n    hom_tensor_hom_equiv R M N P Q x = hom_tensor_hom_map R M N P Q x := by\n  rw [← linear_equiv.coe_to_linear_map, hom_tensor_hom_equiv_to_linear_map]\n#align hom_tensor_hom_equiv_apply hom_tensor_hom_equiv_apply\n\n",
 "dual_tensor_hom_prod_map_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n@[simp]\ntheorem dual_tensor_hom_prod_map_zero (f : module.dual R M) (p : P) :\n    ((dual_tensor_hom R M P) («expr ⊗ₜ[ ] » f R p)).prod_map (0 : «expr →ₗ[ ] » N R Q) =\n      dual_tensor_hom R (M × N) (P × Q) («expr ⊗ₜ » («expr ∘ₗ » f (fst R M N)) (inl R P Q p)) :=\n  by\n  ext <;>\n    simp only [coe_comp, coe_inl, Function.comp_apply, prod_map_apply, dual_tensor_hom_apply, fst_apply, Prod.smul_mk,\n      zero_apply, smul_zero]\n#align dual_tensor_hom_prod_map_zero dual_tensor_hom_prod_map_zero\n\n",
 "dual_tensor_hom_equiv_of_basis_to_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem dual_tensor_hom_equiv_of_basis_to_linear_map :\n    (dual_tensor_hom_equiv_of_basis b :\n          «expr ≃ₗ[ ] » (tensor_product (module.dual R M) R N) R («expr →ₗ[ ] » M R N)).to_linear_map =\n      dual_tensor_hom R M N :=\n  rfl\n#align dual_tensor_hom_equiv_of_basis_to_linear_map dual_tensor_hom_equiv_of_basis_to_linear_map\n\n",
 "dual_tensor_hom_equiv_of_basis_symm_cancel_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem dual_tensor_hom_equiv_of_basis_symm_cancel_right (x : «expr →ₗ[ ] » M R N) :\n    dual_tensor_hom R M N ((dual_tensor_hom_equiv_of_basis b).symm x) = x := by\n  rw [← dual_tensor_hom_equiv_of_basis_apply b, linear_equiv.apply_symm_apply]\n#align dual_tensor_hom_equiv_of_basis_symm_cancel_right dual_tensor_hom_equiv_of_basis_symm_cancel_right\n\n",
 "dual_tensor_hom_equiv_of_basis_symm_cancel_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n@[simp]\ntheorem dual_tensor_hom_equiv_of_basis_symm_cancel_left (x : tensor_product (module.dual R M) R N) :\n    (dual_tensor_hom_equiv_of_basis b).symm (dual_tensor_hom R M N x) = x := by\n  rw [← dual_tensor_hom_equiv_of_basis_apply b, linear_equiv.symm_apply_apply]\n#align dual_tensor_hom_equiv_of_basis_symm_cancel_left dual_tensor_hom_equiv_of_basis_symm_cancel_left\n\n",
 "dual_tensor_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem dual_tensor_hom_apply (f : module.dual R M) (m : M) (n : N) :\n    dual_tensor_hom R M N («expr ⊗ₜ » f n) m = «expr • » (f m) n :=\n  rfl\n#align dual_tensor_hom_apply dual_tensor_hom_apply\n\n",
 "contract_right_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n@[simp]\ntheorem contract_right_apply (f : module.dual R M) (m : M) : contract_right R M («expr ⊗ₜ » m f) = f m :=\n  rfl\n#align contract_right_apply contract_right_apply\n\n",
 "contract_left_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/-\nCopyright (c) 2020 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash, Antoine Labelle\n-/\n@[simp]\ntheorem contract_left_apply (f : module.dual R M) (m : M) : contract_left R M («expr ⊗ₜ » f m) = f m :=\n  rfl\n#align contract_left_apply contract_left_apply\n\n",
 "comp_dual_tensor_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n@[simp]\ntheorem comp_dual_tensor_hom (f : module.dual R M) (n : N) (g : module.dual R N) (p : P) :\n    «expr ∘ₗ » (dual_tensor_hom R N P («expr ⊗ₜ[ ] » g R p)) (dual_tensor_hom R M N («expr ⊗ₜ[ ] » f R n)) =\n      «expr • » (g n) (dual_tensor_hom R M P («expr ⊗ₜ » f p)) :=\n  by\n  ext m;\n  simp only [coe_comp, Function.comp_apply, dual_tensor_hom_apply, linear_map.map_smul, RingHom.id_apply, smul_apply]\n  rw [smul_comm]\n#align comp_dual_tensor_hom comp_dual_tensor_hom\n\n"}