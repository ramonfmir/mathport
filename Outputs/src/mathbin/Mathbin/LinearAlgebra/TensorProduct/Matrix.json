{"to_matrix_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.kronecker_map.mul -/\n/-\nCopyright (c) 2023 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- The linear map built from `tensor_product.map` corresponds to the matrix built from\n`matrix.kronecker`. -/\ntheorem tensor_product.to_matrix_map (f : «expr →ₗ[ ] » M R M') (g : «expr →ₗ[ ] » N R N') :\n    toMatrix (bM.tensor_product bN) (bM'.tensor_product bN') (TensorProduct.map f g) =\n      matrix.kronecker_map.mul (toMatrix bM bM' f) (toMatrix bN bN' g) :=\n  by\n  ext (⟨i, j⟩⟨i', j'⟩)\n  simp_rw [matrix.kronecker_map_apply, to_matrix_apply, Basis.tensorProduct_apply, TensorProduct.map_tmul,\n    Basis.tensorProduct_repr_tmul_apply]\n#align tensor_product.to_matrix_map tensor_product.to_matrix_map\n\n",
 "to_matrix_comm":
 "/-- `tensor_product.comm` corresponds to a permutation of the identity matrix. -/\ntheorem tensor_product.to_matrix_comm :\n    toMatrix (bM.tensor_product bN) (bN.tensor_product bM) (TensorProduct.comm R M N) =\n      (1 : Matrix (ι × κ) (ι × κ) R).submatrix Prod.swap id :=\n  by\n  ext (⟨i, j⟩⟨i', j'⟩)\n  simp_rw [to_matrix_apply, Basis.tensorProduct_apply, LinearEquiv.coe_coe, TensorProduct.comm_tmul,\n    Basis.tensorProduct_repr_tmul_apply, Matrix.submatrix_apply, Prod.swap_prod_mk, id.def, Basis.repr_self_apply,\n    Matrix.one_apply, Prod.ext_iff, ite_and, @eq_comm _ i', @eq_comm _ j']\n  split_ifs <;> simp\n#align tensor_product.to_matrix_comm tensor_product.to_matrix_comm\n\n",
 "to_matrix_assoc":
 "/-- `tensor_product.assoc` corresponds to a permutation of the identity matrix. -/\ntheorem tensor_product.to_matrix_assoc :\n    toMatrix ((bM.tensor_product bN).tensor_product bP) (bM.tensor_product (bN.tensor_product bP))\n        (TensorProduct.assoc R M N P) =\n      (1 : Matrix (ι × κ × τ) (ι × κ × τ) R).submatrix id (Equiv.prodAssoc _ _ _) :=\n  by\n  ext (⟨i, j, k⟩⟨⟨i', j'⟩, k'⟩)\n  simp_rw [to_matrix_apply, Basis.tensorProduct_apply, LinearEquiv.coe_coe, TensorProduct.assoc_tmul,\n    Basis.tensorProduct_repr_tmul_apply, Matrix.submatrix_apply, Equiv.prodAssoc_apply, id.def, Basis.repr_self_apply,\n    Matrix.one_apply, Prod.ext_iff, ite_and, @eq_comm _ i', @eq_comm _ j', @eq_comm _ k']\n  split_ifs <;> simp\n#align tensor_product.to_matrix_assoc tensor_product.to_matrix_assoc\n\n",
 "to_lin_kronecker":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.kronecker_map.mul -/\n/-- The matrix built from `matrix.kronecker` corresponds to the linear map built from\n`tensor_product.map`. -/\ntheorem matrix.to_lin_kronecker (A : Matrix ι' ι R) (B : Matrix κ' κ R) :\n    toLin (bM.tensor_product bN) (bM'.tensor_product bN') (matrix.kronecker_map.mul A B) =\n      TensorProduct.map (toLin bM bM' A) (toLin bN bN' B) :=\n  by rw [← LinearEquiv.eq_symm_apply, to_lin_symm, tensor_product.to_matrix_map, to_matrix_to_lin, to_matrix_to_lin]\n#align matrix.to_lin_kronecker matrix.to_lin_kronecker\n\n"}