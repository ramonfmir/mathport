{"finsuppTensorFinsupp_symm_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n#print finsuppTensorFinsupp_symm_single /-\n@[simp]\ntheorem finsuppTensorFinsupp_symm_single (R M N ι κ : Sort _) [CommRing R] [AddCommGroup M] [Module R M]\n    [AddCommGroup N] [Module R N] (i : ι × κ) (m : M) (n : N) :\n    (finsuppTensorFinsupp R M N ι κ).symm (Finsupp.single i («expr ⊗ₜ » m n)) =\n      «expr ⊗ₜ » (Finsupp.single i.1 m) (Finsupp.single i.2 n) :=\n  prod.cases_on i fun i k => (LinearEquiv.symm_apply_eq _).2 (finsuppTensorFinsupp_single _ _ _ _ _ _ _ _ _).symm\n#align finsupp_tensor_finsupp_symm_single finsuppTensorFinsupp_symm_single\n-/\n\n",
 "finsuppTensorFinsupp_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n#print finsuppTensorFinsupp_single /-\n/-\nCopyright (c) 2019 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\n@[simp]\ntheorem finsuppTensorFinsupp_single (R M N ι κ : Sort _) [CommRing R] [AddCommGroup M] [Module R M] [AddCommGroup N]\n    [Module R N] (i : ι) (m : M) (k : κ) (n : N) :\n    finsuppTensorFinsupp R M N ι κ («expr ⊗ₜ » (Finsupp.single i m) (Finsupp.single k n)) =\n      Finsupp.single (i, k) («expr ⊗ₜ » m n) :=\n  by simp [finsuppTensorFinsupp]\n#align finsupp_tensor_finsupp_single finsuppTensorFinsupp_single\n-/\n\n",
 "finsuppTensorFinsupp_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n#print finsuppTensorFinsupp_apply /-\n@[simp]\ntheorem finsuppTensorFinsupp_apply (R M N ι κ : Sort _) [CommRing R] [AddCommGroup M] [Module R M] [AddCommGroup N]\n    [Module R N] (f : «expr →₀ » ι M) (g : «expr →₀ » κ N) (i : ι) (k : κ) :\n    finsuppTensorFinsupp R M N ι κ («expr ⊗ₜ » f g) (i, k) = «expr ⊗ₜ » (f i) (g k) :=\n  by\n  apply Finsupp.induction_linear f\n  · simp\n  · intro f₁ f₂ hf₁ hf₂\n    simp [add_tmul, hf₁, hf₂]\n  · intro i' m\n    apply Finsupp.induction_linear g\n    · simp\n    · intro g₁ g₂ hg₁ hg₂\n      simp [tmul_add, hg₁, hg₂]\n    · intro k' n\n      simp only [finsuppTensorFinsupp_single]\n      simp only [Finsupp.single_apply]\n      -- split_ifs; finish can close the goal from here\n      by_cases h1 : (i', k') = (i, k)\n      · simp only [Prod.mk.inj_iff] at h1\n        simp [h1]\n      · simp only [h1, if_false]\n        simp only [Prod.mk.inj_iff, not_and_or] at h1\n        cases h1 <;> simp [h1]\n#align finsupp_tensor_finsupp_apply finsuppTensorFinsupp_apply\n-/\n\n",
 "finsuppTensorFinsupp'_single_tmul_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n#print finsuppTensorFinsupp'_single_tmul_single /-\n@[simp]\ntheorem finsuppTensorFinsupp'_single_tmul_single (a : α) (b : β) (r₁ r₂ : S) :\n    finsuppTensorFinsupp' S α β («expr ⊗ₜ[ ] » (Finsupp.single a r₁) S (Finsupp.single b r₂)) =\n      Finsupp.single (a, b) (r₁ * r₂) :=\n  by\n  ext ⟨a', b'⟩\n  simp [Finsupp.single_apply, ite_and]\n#align finsupp_tensor_finsupp'_single_tmul_single finsuppTensorFinsupp'_single_tmul_single\n-/\n\n",
 "finsuppTensorFinsupp'_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n#print finsuppTensorFinsupp'_apply_apply /-\n@[simp]\ntheorem finsuppTensorFinsupp'_apply_apply (f : «expr →₀ » α S) (g : «expr →₀ » β S) (a : α) (b : β) :\n    finsuppTensorFinsupp' S α β («expr ⊗ₜ[ ] » f S g) (a, b) = f a * g b := by simp [finsuppTensorFinsupp']\n#align finsupp_tensor_finsupp'_apply_apply finsuppTensorFinsupp'_apply_apply\n-/\n\n"}