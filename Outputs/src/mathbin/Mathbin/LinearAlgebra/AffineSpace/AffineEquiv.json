{"vsub_line_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\ntheorem vsub_line_map (p₁ p₂ p₃ : P₁) (c : k) :\n    «expr -ᵥ » p₁ (line_map p₂ p₃ c) = line_map («expr -ᵥ » p₁ p₂) («expr -ᵥ » p₁ p₃) c :=\n  (const_vsub k p₁).apply_line_map p₂ p₃ c\n#align vsub_line_map vsub_line_map\n\n",
 "vadd_line_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\ntheorem vadd_line_map (v : V₁) (p₁ p₂ : P₁) (c : k) :\n    «expr +ᵥ » v (line_map p₁ p₂ c) = line_map («expr +ᵥ » v p₁) («expr +ᵥ » v p₂) c :=\n  (const_vadd k P₁ v).apply_line_map p₁ p₂ c\n#align vadd_line_map vadd_line_map\n\n",
 "trans_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem trans_refl (e : «expr ≃ᵃ[ ] » P₁ k P₂) : e.trans (refl k P₂) = e :=\n  ext fun _ => rfl\n#align trans_refl trans_refl\n\n",
 "trans_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\ntheorem trans_assoc (e₁ : «expr ≃ᵃ[ ] » P₁ k P₂) (e₂ : «expr ≃ᵃ[ ] » P₂ k P₃) (e₃ : «expr ≃ᵃ[ ] » P₃ k P₄) :\n    (e₁.trans e₂).trans e₃ = e₁.trans (e₂.trans e₃) :=\n  ext fun _ => rfl\n#align trans_assoc trans_assoc\n\n",
 "trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem trans_apply (e : «expr ≃ᵃ[ ] » P₁ k P₂) (e' : «expr ≃ᵃ[ ] » P₂ k P₃) (p : P₁) : e.trans e' p = e' (e p) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "to_equiv_refl":
 "@[simp]\ntheorem to_equiv_refl : (refl k P₁).to_equiv = equiv.refl P₁ :=\n  rfl\n#align to_equiv_refl to_equiv_refl\n\n",
 "to_equiv_point_reflection":
 "@[simp]\ntheorem to_equiv_point_reflection (x : P₁) : (point_reflection k x).to_equiv = equiv.point_reflection x :=\n  rfl\n#align to_equiv_point_reflection to_equiv_point_reflection\n\n",
 "to_equiv_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem to_equiv_injective : injective (to_equiv : «expr ≃ᵃ[ ] » P₁ k P₂ → «expr ≃ » P₁ P₂) := fun e e' H =>\n  ext <| equiv.ext_iff.1 H\n#align to_equiv_injective to_equiv_injective\n\n",
 "to_equiv_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem to_equiv_inj {e e' : «expr ≃ᵃ[ ] » P₁ k P₂} : e.to_equiv = e'.to_equiv ↔ e = e' :=\n  to_equiv_injective.eq_iff\n#align to_equiv_inj to_equiv_inj\n\n",
 "to_affine_map_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n@[simp]\ntheorem to_affine_map_mk (f : «expr ≃ » P₁ P₂) (f' : «expr ≃ₗ[ ] » V₁ k V₂) (h) :\n    to_affine_map (mk f f' h) = ⟨f, f', h⟩ :=\n  rfl\n#align to_affine_map_mk to_affine_map_mk\n\n",
 "to_affine_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\ntheorem to_affine_map_injective : injective (to_affine_map : «expr ≃ᵃ[ ] » P₁ k P₂ → «expr →ᵃ[ ] » P₁ k P₂) :=\n  by\n  rintro ⟨e, el, h⟩ ⟨e', el', h'⟩ H\n  simp only [to_affine_map_mk, equiv.coe_inj, linear_equiv.to_linear_map_inj] at H\n  congr\n  exacts[H.1, H.2]\n#align to_affine_map_injective to_affine_map_injective\n\n",
 "to_affine_map_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem to_affine_map_inj {e e' : «expr ≃ᵃ[ ] » P₁ k P₂} : e.to_affine_map = e'.to_affine_map ↔ e = e' :=\n  to_affine_map_injective.eq_iff\n#align to_affine_map_inj to_affine_map_inj\n\n",
 "symm_trans_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem symm_trans_self (e : «expr ≃ᵃ[ ] » P₁ k P₂) : e.symm.trans e = refl k P₂ :=\n  ext e.apply_symm_apply\n#align symm_trans_self symm_trans_self\n\n",
 "symm_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem symm_to_equiv (e : «expr ≃ᵃ[ ] » P₁ k P₂) : e.to_equiv.symm = e.symm.to_equiv :=\n  rfl\n#align symm_to_equiv symm_to_equiv\n\n",
 "symm_refl":
 "@[simp]\ntheorem symm_refl : (refl k P₁).symm = refl k P₁ :=\n  rfl\n#align symm_refl symm_refl\n\n",
 "symm_linear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem symm_linear (e : «expr ≃ᵃ[ ] » P₁ k P₂) : e.linear.symm = e.symm.linear :=\n  rfl\n#align symm_linear symm_linear\n\n",
 "symm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\ntheorem of_bijective.symm_eq {φ : «expr →ᵃ[ ] » P₁ k P₂} (hφ : function.bijective φ) :\n    (of_bijective hφ).symm.to_equiv = (Equiv.ofBijective _ hφ).symm :=\n  rfl\n#align of_bijective.symm_eq of_bijective.symm_eq\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem symm_apply_apply (e : «expr ≃ᵃ[ ] » P₁ k P₂) (p : P₁) : e.symm (e p) = p :=\n  e.to_equiv.symm_apply_apply p\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\nprotected theorem surjective (e : «expr ≃ᵃ[ ] » P₁ k P₂) : surjective e :=\n  e.to_equiv.surjective\n#align surjective surjective\n\n",
 "self_trans_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem self_trans_symm (e : «expr ≃ᵃ[ ] » P₁ k P₂) : e.trans e.symm = refl k P₁ :=\n  ext e.symm_apply_apply\n#align self_trans_symm self_trans_symm\n\n",
 "refl_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem refl_trans (e : «expr ≃ᵃ[ ] » P₁ k P₂) : (refl k P₁).trans e = e :=\n  ext fun _ => rfl\n#align refl_trans refl_trans\n\n",
 "refl_apply":
 "@[simp]\ntheorem refl_apply (x : P₁) : refl k P₁ x = x :=\n  rfl\n#align refl_apply refl_apply\n\n",
 "range_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem range_eq (e : «expr ≃ᵃ[ ] » P₁ k P₂) : range e = univ :=\n  e.surjective.range_eq\n#align range_eq range_eq\n\n",
 "preimage_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem preimage_symm (f : «expr ≃ᵃ[ ] » P₁ k P₂) (s : set P₁) : «expr ⁻¹' » f.symm s = «expr '' » f s :=\n  (f.symm.image_symm _).symm\n#align preimage_symm preimage_symm\n\n",
 "point_reflection_symm":
 "@[simp]\ntheorem point_reflection_symm (x : P₁) : (point_reflection k x).symm = point_reflection k x :=\n  to_equiv_injective <| equiv.point_reflection_symm x\n#align point_reflection_symm point_reflection_symm\n\n",
 "point_reflection_self":
 "@[simp]\ntheorem point_reflection_self (x : P₁) : point_reflection k x x = x :=\n  vsub_vadd _ _\n#align point_reflection_self point_reflection_self\n\n",
 "point_reflection_involutive":
 "theorem point_reflection_involutive (x : P₁) : involutive (point_reflection k x : P₁ → P₁) :=\n  equiv.point_reflection_involutive x\n#align point_reflection_involutive point_reflection_involutive\n\n",
 "point_reflection_fixed_iff_of_module":
 "theorem point_reflection_fixed_iff_of_module [Invertible (2 : k)] {x y : P₁} : point_reflection k x y = y ↔ y = x :=\n  ((injective_point_reflection_left_of_module k y).eq_iff' (point_reflection_self k y)).trans eq_comm\n#align point_reflection_fixed_iff_of_module point_reflection_fixed_iff_of_module\n\n",
 "point_reflection_fixed_iff_of_injective_bit0":
 "/-- `x` is the only fixed point of `point_reflection x`. This lemma requires\n`x + x = y + y ↔ x = y`. There is no typeclass to use here, so we add it as an explicit argument. -/\ntheorem point_reflection_fixed_iff_of_injective_bit0 {x y : P₁} (h : injective (bit0 : V₁ → V₁)) :\n    point_reflection k x y = y ↔ y = x :=\n  equiv.point_reflection_fixed_iff_of_injective_bit0 h\n#align point_reflection_fixed_iff_of_injective_bit0 point_reflection_fixed_iff_of_injective_bit0\n\n",
 "point_reflection_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\ntheorem point_reflection_apply (x y : P₁) : point_reflection k x y = «expr +ᵥ » («expr -ᵥ » x y) x :=\n  rfl\n#align point_reflection_apply point_reflection_apply\n\n",
 "one_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\ntheorem one_def : (1 : «expr ≃ᵃ[ ] » P₁ k P₁) = refl k P₁ :=\n  rfl\n#align one_def one_def\n\n",
 "mul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\ntheorem mul_def (e e' : «expr ≃ᵃ[ ] » P₁ k P₁) : e * e' = e'.trans e :=\n  rfl\n#align mul_def mul_def\n\n",
 "map_vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/-\nCopyright (c) 2020 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\n@[simp]\ntheorem map_vadd (e : «expr ≃ᵃ[ ] » P₁ k P₂) (p : P₁) (v : V₁) : e («expr +ᵥ » v p) = «expr +ᵥ » (e.linear v) (e p) :=\n  e.map_vadd' p v\n#align map_vadd map_vadd\n\n",
 "linear_to_affine_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem linear_to_affine_map (e : «expr ≃ᵃ[ ] » P₁ k P₂) : e.to_affine_map.linear = e.linear :=\n  rfl\n#align linear_to_affine_map linear_to_affine_map\n\n",
 "linear_refl":
 "@[simp]\ntheorem linear_refl : (refl k P₁).linear = linear_equiv.refl k V₁ :=\n  rfl\n#align linear_refl linear_refl\n\n",
 "linear_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n@[simp]\ntheorem linear_mk' (e : «expr ≃ » P₁ P₂) (e' : «expr ≃ₗ[ ] » V₁ k V₂) (p h) : (mk' e e' p h).linear = e' :=\n  rfl\n#align linear_mk' linear_mk'\n\n",
 "line_map_vsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\ntheorem line_map_vsub (p₁ p₂ p₃ : P₁) (c : k) :\n    «expr -ᵥ » (line_map p₁ p₂ c) p₃ = line_map («expr -ᵥ » p₁ p₃) («expr -ᵥ » p₂ p₃) c :=\n  (vadd_const k p₃).symm.apply_line_map p₁ p₂ c\n#align line_map_vsub line_map_vsub\n\n",
 "line_map_vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\ntheorem line_map_vadd (v v' : V₁) (p : P₁) (c : k) :\n    «expr +ᵥ » (line_map v v' c) p = line_map («expr +ᵥ » v p) («expr +ᵥ » v' p) c :=\n  (vadd_const k p).apply_line_map v v' c\n#align line_map_vadd line_map_vadd\n\n",
 "inv_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\ntheorem inv_def (e : «expr ≃ᵃ[ ] » P₁ k P₁) : e⁻¹ = e.symm :=\n  rfl\n#align inv_def inv_def\n\n",
 "injective_point_reflection_left_of_module":
 "theorem injective_point_reflection_left_of_module [Invertible (2 : k)] :\n    ∀ y, injective fun x : P₁ => point_reflection k x y :=\n  injective_point_reflection_left_of_injective_bit0 k fun x y h => by\n    rwa [bit0, bit0, ← two_smul k x, ← two_smul k y, (isUnit_of_invertible (2 : k)).smul_left_cancel] at h\n#align injective_point_reflection_left_of_module injective_point_reflection_left_of_module\n\n",
 "injective_point_reflection_left_of_injective_bit0":
 "theorem injective_point_reflection_left_of_injective_bit0 (h : injective (bit0 : V₁ → V₁)) (y : P₁) :\n    injective fun x : P₁ => point_reflection k x y :=\n  equiv.injective_point_reflection_left_of_injective_bit0 h y\n#align injective_point_reflection_left_of_injective_bit0 injective_point_reflection_left_of_injective_bit0\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\nprotected theorem injective (e : «expr ≃ᵃ[ ] » P₁ k P₂) : injective e :=\n  e.to_equiv.injective\n#align injective injective\n\n",
 "image_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem image_symm (f : «expr ≃ᵃ[ ] » P₁ k P₂) (s : set P₂) : «expr '' » f.symm s = «expr ⁻¹' » f s :=\n  f.symm.to_equiv.image_eq_preimage _\n#align image_symm image_symm\n\n",
 "homothety_neg_one_apply":
 "theorem homothety_neg_one_apply (c p : P₁) : homothety c (-1 : R') p = point_reflection R' c p := by\n  simp [homothety_apply, point_reflection_apply]\n#align homothety_neg_one_apply homothety_neg_one_apply\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[ext]\ntheorem ext {e e' : «expr ≃ᵃ[ ] » P₁ k P₂} (h : ∀ x, e x = e' x) : e = e' :=\n  to_affine_map_injective <| affine_map.ext h\n#align ext ext\n\n",
 "const_vadd_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem const_vadd_zsmul (z : ℤ) (v : V₁) : const_vadd k P₁ («expr • » z v) = const_vadd k P₁ v ^ z :=\n  (const_vadd_hom k P₁).map_zpow _ _\n#align const_vadd_zsmul const_vadd_zsmul\n\n",
 "const_vadd_zero":
 "@[simp]\ntheorem const_vadd_zero : const_vadd k P₁ 0 = affine_equiv.refl _ _ :=\n  ext <| zero_vadd _\n#align const_vadd_zero const_vadd_zero\n\n",
 "const_vadd_symm":
 "@[simp]\ntheorem const_vadd_symm (v : V₁) : (const_vadd k P₁ v).symm = const_vadd k P₁ (-v) :=\n  ext fun _ => rfl\n#align const_vadd_symm const_vadd_symm\n\n",
 "const_vadd_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem const_vadd_nsmul (n : ℕ) (v : V₁) : const_vadd k P₁ («expr • » n v) = const_vadd k P₁ v ^ n :=\n  (const_vadd_hom k P₁).map_pow _ _\n#align const_vadd_nsmul const_vadd_nsmul\n\n",
 "const_vadd_add":
 "@[simp]\ntheorem const_vadd_add (v w : V₁) : const_vadd k P₁ (v + w) = (const_vadd k P₁ w).trans (const_vadd k P₁ v) :=\n  ext <| add_vadd _ _\n#align const_vadd_add const_vadd_add\n\n",
 "coe_trans_to_affine_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n@[simp]\ntheorem coe_trans_to_affine_map (e : «expr ≃ᵃ[ ] » P₁ k P₂) (e' : «expr ≃ᵃ[ ] » P₂ k P₃) :\n    (e.trans e' : «expr →ᵃ[ ] » P₁ k P₃) = (e' : «expr →ᵃ[ ] » P₂ k P₃).comp e :=\n  rfl\n#align coe_trans_to_affine_map coe_trans_to_affine_map\n\n",
 "coe_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_trans (e : «expr ≃ᵃ[ ] » P₁ k P₂) (e' : «expr ≃ᵃ[ ] » P₂ k P₃) : «expr⇑ » (e.trans e') = e' ∘ e :=\n  rfl\n#align coe_trans coe_trans\n\n",
 "coe_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_equiv (e : «expr ≃ᵃ[ ] » P₁ k P₂) : «expr⇑ » e.to_equiv = e :=\n  rfl\n#align coe_to_equiv coe_to_equiv\n\n",
 "coe_to_affine_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem coe_to_affine_map (e : «expr ≃ᵃ[ ] » P₁ k P₂) : (e.to_affine_map : P₁ → P₂) = (e : P₁ → P₂) :=\n  rfl\n#align coe_to_affine_map coe_to_affine_map\n\n",
 "coe_to_affine_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_affine_equiv (e : «expr ≃ₗ[ ] » V₁ k V₂) : «expr⇑ » e.to_affine_equiv = e :=\n  rfl\n#align coe_to_affine_equiv coe_to_affine_equiv\n\n",
 "coe_refl_to_affine_map":
 "@[simp]\ntheorem coe_refl_to_affine_map : ↑(refl k P₁) = affine_map.id k P₁ :=\n  rfl\n#align coe_refl_to_affine_map coe_refl_to_affine_map\n\n",
 "coe_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_refl : «expr⇑ » (refl k P₁) = id :=\n  rfl\n#align coe_refl coe_refl\n\n",
 "coe_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem coe_one : «expr⇑ » (1 : «expr ≃ᵃ[ ] » P₁ k P₁) = id :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul (e e' : «expr ≃ᵃ[ ] » P₁ k P₁) : «expr⇑ » (e * e') = e ∘ e' :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "coe_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mk' (e : «expr ≃ » P₁ P₂) (e' : «expr ≃ₗ[ ] » V₁ k V₂) (p h) : «expr⇑ » (mk' e e' p h) = e :=\n  rfl\n#align coe_mk' coe_mk'\n\n",
 "coe_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem coe_mk (e : «expr ≃ » P₁ P₂) (e' : «expr ≃ₗ[ ] » V₁ k V₂) (h) :\n    ((⟨e, e', h⟩ : «expr ≃ᵃ[ ] » P₁ k P₂) : P₁ → P₂) = e :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_linear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n@[simp]\ntheorem coe_linear (e : «expr ≃ᵃ[ ] » P₁ k P₂) : (e : «expr →ᵃ[ ] » P₁ k P₂).linear = e.linear :=\n  rfl\n#align coe_linear coe_linear\n\n",
 "coe_homothety_units_mul_hom_eq_homothety_hom_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n@[simp]\ntheorem coe_homothety_units_mul_hom_eq_homothety_hom_coe (p : P) :\n    (coe : «expr ≃ᵃ[ ] » P R P → «expr →ᵃ[ ] » P R P) ∘ homothety_units_mul_hom p =\n      affine_map.homothety_hom p ∘ (coe : «expr ˣ» R → R) :=\n  funext fun _ => rfl\n#align coe_homothety_units_mul_hom_eq_homothety_hom_coe coe_homothety_units_mul_hom_eq_homothety_hom_coe\n\n",
 "coe_homothety_units_mul_hom_apply_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n@[simp]\ntheorem coe_homothety_units_mul_hom_apply_symm (p : P) (t : «expr ˣ» R) :\n    ((homothety_units_mul_hom p t).symm : P → P) = affine_map.homothety p (↑t⁻¹ : R) :=\n  rfl\n#align coe_homothety_units_mul_hom_apply_symm coe_homothety_units_mul_hom_apply_symm\n\n",
 "coe_homothety_units_mul_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n@[simp]\ntheorem coe_homothety_units_mul_hom_apply (p : P) (t : «expr ˣ» R) :\n    (homothety_units_mul_hom p t : P → P) = affine_map.homothety p (t : R) :=\n  rfl\n#align coe_homothety_units_mul_hom_apply coe_homothety_units_mul_hom_apply\n\n",
 "coe_fn_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\ntheorem coe_fn_injective : @injective («expr ≃ᵃ[ ] » P₁ k P₂) (P₁ → P₂) coe_fn := fun e e' H => ext <| congr_fun H\n#align coe_fn_injective coe_fn_injective\n\n",
 "coe_fn_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp, norm_cast]\ntheorem coe_fn_inj {e e' : «expr ≃ᵃ[ ] » P₁ k P₂} : (e : P₁ → P₂) = e' ↔ e = e' :=\n  coe_fn_injective.eq_iff\n#align coe_fn_inj coe_fn_inj\n\n",
 "coe_const_vsub_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n@[simp]\ntheorem coe_const_vsub_symm (p : P₁) : «expr⇑ » (const_vsub k p).symm = fun v => «expr +ᵥ » (-v) p :=\n  rfl\n#align coe_const_vsub_symm coe_const_vsub_symm\n\n",
 "coe_const_vsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr -ᵥ » -/\n@[simp]\ntheorem coe_const_vsub (p : P₁) : «expr⇑ » (const_vsub k p) = («expr -ᵥ » · ·) p :=\n  rfl\n#align coe_const_vsub coe_const_vsub\n\n",
 "coe_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n@[norm_cast, simp]\ntheorem coe_coe (e : «expr ≃ᵃ[ ] » P₁ k P₂) : ((e : «expr →ᵃ[ ] » P₁ k P₂) : P₁ → P₂) = e :=\n  rfl\n#align coe_coe coe_coe\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\nprotected theorem bijective (e : «expr ≃ᵃ[ ] » P₁ k P₂) : bijective e :=\n  e.to_equiv.bijective\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem apply_symm_apply (e : «expr ≃ᵃ[ ] » P₁ k P₂) (p : P₂) : e (e.symm p) = p :=\n  e.to_equiv.apply_symm_apply p\n#align apply_symm_apply apply_symm_apply\n\n",
 "apply_line_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem apply_line_map (e : «expr ≃ᵃ[ ] » P₁ k P₂) (a b : P₁) (c : k) :\n    e (affine_map.line_map a b c) = affine_map.line_map (e a) (e b) c :=\n  e.to_affine_map.apply_line_map a b c\n#align apply_line_map apply_line_map\n\n",
 "apply_eq_iff_eq_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\ntheorem apply_eq_iff_eq_symm_apply (e : «expr ≃ᵃ[ ] » P₁ k P₂) {p₁ p₂} : e p₁ = p₂ ↔ p₁ = e.symm p₂ :=\n  e.to_equiv.apply_eq_iff_eq_symm_apply\n#align apply_eq_iff_eq_symm_apply apply_eq_iff_eq_symm_apply\n\n",
 "apply_eq_iff_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n@[simp]\ntheorem apply_eq_iff_eq (e : «expr ≃ᵃ[ ] » P₁ k P₂) {p₁ p₂ : P₁} : e p₁ = e p₂ ↔ p₁ = p₂ :=\n  e.to_equiv.apply_eq_iff_eq\n#align apply_eq_iff_eq apply_eq_iff_eq\n\n"}