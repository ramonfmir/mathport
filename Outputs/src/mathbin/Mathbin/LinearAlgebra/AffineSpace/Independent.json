{"weightedVSub_mem_vectorSpan_pair":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print weightedVSub_mem_vectorSpan_pair /-\n/-- Given an affinely independent family of points, a weighted subtraction lies in the\n`vector_span` of two points given as affine combinations if and only if it is a weighted\nsubtraction with weights a multiple of the difference between the weights of the two points. -/\ntheorem weightedVSub_mem_vectorSpan_pair {p : ι → P} (h : AffineIndependent k p) {w w₁ w₂ : ι → k} {s : Finset ι}\n    (hw : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w i) = 0)\n    (hw₁ : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₁ i) = 1)\n    (hw₂ :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₂ i) = 1) :\n    s.weighted_vsub p w ∈ vectorSpan k ({s.affine_combination k p w₁, s.affine_combination k p w₂} : Set P) ↔\n      ∃ r : k, ∀ i ∈ s, w i = r * (w₁ i - w₂ i) :=\n  by\n  rw [mem_vectorSpan_pair]\n  refine' ⟨fun h => _, fun h => _⟩\n  · rcases h with ⟨r, hr⟩\n    refine' ⟨r, fun i hi => _⟩\n    rw [s.affine_combination_vsub, ← s.weighted_vsub_const_smul, ← sub_eq_zero, ← map_sub] at hr\n    have hw' :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n          ((«expr • » r (w₁ - w₂) - w) j) =\n        0 :=\n      by\n      simp_rw [Pi.sub_apply, Pi.smul_apply, Pi.sub_apply, smul_sub, Finset.sum_sub_distrib, ← Finset.smul_sum, hw, hw₁,\n        hw₂, sub_self]\n    have hr' := h s _ hw' hr i hi\n    rw [eq_comm, ← sub_eq_zero, ← smul_eq_mul]\n    exact hr'\n  · rcases h with ⟨r, hr⟩\n    refine' ⟨r, _⟩\n    let w' i := r * (w₁ i - w₂ i)\n    change ∀ i ∈ s, w i = w' i at hr\n    rw [s.weighted_vsub_congr hr fun _ _ => rfl, s.affine_combination_vsub, ← s.weighted_vsub_const_smul]\n    congr\n#align weighted_vsub_mem_vector_span_pair weightedVSub_mem_vectorSpan_pair\n-/\n\n",
 "units_lineMap":
 "#print AffineIndependent.units_lineMap /-\n/-- If we single out one member of an affine-independent family of points and affinely transport\nall others along the line joining them to this member, the resulting new family of points is affine-\nindependent.\n\nThis is the affine version of `linear_independent.units_smul`. -/\ntheorem AffineIndependent.units_lineMap {p : ι → P} (hp : AffineIndependent k p) (j : ι) (w : ι → Units k) :\n    AffineIndependent k fun i => AffineMap.lineMap (p j) (p i) (w i : k) :=\n  by\n  rw [affineIndependent_iff_linearIndependent_vsub k _ j] at hp⊢\n  simp only [AffineMap.lineMap_vsub_left, AffineMap.coe_const, AffineMap.lineMap_same]\n  exact hp.units_smul fun i => w i\n#align affine_independent.units_line_map AffineIndependent.units_lineMap\n-/\n\n",
 "subtype":
 "#print AffineIndependent.subtype /-\n/-- If a family is affinely independent, so is any subfamily indexed\nby a subtype of the index type. -/\nprotected theorem AffineIndependent.subtype {p : ι → P} (ha : AffineIndependent k p) (s : Set ι) :\n    AffineIndependent k fun i : s => p i :=\n  ha.comp_embedding (Embedding.subtype _)\n#align affine_independent.subtype AffineIndependent.subtype\n-/\n\n",
 "sign_eq_of_affineCombination_mem_affineSpan_single_lineMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprline[ , , ]» -/\n#print sign_eq_of_affineCombination_mem_affineSpan_single_lineMap /-\n/-- Given an affinely independent family of points, suppose that an affine combination lies in\nthe span of one point of that family and a combination of another two points of that family given\nby `line_map` with coefficient between 0 and 1. Then the coefficients of those two points in the\ncombination lying in the span have the same sign. -/\ntheorem sign_eq_of_affineCombination_mem_affineSpan_single_lineMap {p : ι → P} (h : AffineIndependent k p) {w : ι → k}\n    {s : Finset ι}\n    (hw : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w i) = 1)\n    {i₁ i₂ i₃ : ι} (h₁ : i₁ ∈ s) (h₂ : i₂ ∈ s) (h₃ : i₃ ∈ s) (h₁₂ : i₁ ≠ i₂) (h₁₃ : i₁ ≠ i₃) (h₂₃ : i₂ ≠ i₃) {c : k}\n    (hc0 : 0 < c) (hc1 : c < 1)\n    (hs : s.affine_combination k p w ∈ «exprline[ , , ]» k (p i₁) (AffineMap.lineMap (p i₂) (p i₃) c)) :\n    SignType.sign (w i₂) = SignType.sign (w i₃) := by\n  classical\n    rw [← s.affine_combination_affine_combination_single_weights k p h₁, ←\n      s.affine_combination_affine_combination_line_map_weights p h₂ h₃ c] at hs\n    refine'\n      sign_eq_of_affineCombination_mem_affineSpan_pair h hw (s.sum_affine_combination_single_weights k h₁)\n        (s.sum_affine_combination_line_map_weights h₂ h₃ c) hs h₂ h₃\n        (Finset.affineCombinationSingleWeights_apply_of_ne k h₁₂.symm)\n        (Finset.affineCombinationSingleWeights_apply_of_ne k h₁₃.symm) _\n    rw [Finset.affineCombinationLineMapWeights_apply_left h₂₃, Finset.affineCombinationLineMapWeights_apply_right h₂₃]\n    simp [hc0, sub_pos.2 hc1]\n#align sign_eq_of_affine_combination_mem_affine_span_single_line_map sign_eq_of_affineCombination_mem_affineSpan_single_lineMap\n-/\n\n",
 "sign_eq_of_affineCombination_mem_affineSpan_pair":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprline[ , , ]» -/\n#print sign_eq_of_affineCombination_mem_affineSpan_pair /-\n/-- Given an affinely independent family of points, suppose that an affine combination lies in\nthe span of two points given as affine combinations, and suppose that, for two indices, the\ncoefficients in the first point in the span are zero and those in the second point in the span\nhave the same sign. Then the coefficients in the combination lying in the span have the same\nsign. -/\ntheorem sign_eq_of_affineCombination_mem_affineSpan_pair {p : ι → P} (h : AffineIndependent k p) {w w₁ w₂ : ι → k}\n    {s : Finset ι}\n    (hw : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w i) = 1)\n    (hw₁ : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₁ i) = 1)\n    (hw₂ : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₂ i) = 1)\n    (hs : s.affine_combination k p w ∈ «exprline[ , , ]» k (s.affine_combination k p w₁) (s.affine_combination k p w₂))\n    {i j : ι} (hi : i ∈ s) (hj : j ∈ s) (hi0 : w₁ i = 0) (hj0 : w₁ j = 0)\n    (hij : SignType.sign (w₂ i) = SignType.sign (w₂ j)) : SignType.sign (w i) = SignType.sign (w j) :=\n  by\n  rw [affineCombination_mem_affineSpan_pair h hw hw₁ hw₂] at hs\n  rcases hs with ⟨r, hr⟩\n  dsimp only at hr\n  rw [hr i hi, hr j hj, hi0, hj0, add_zero, add_zero, sub_zero, sub_zero, sign_mul, sign_mul, hij]\n#align sign_eq_of_affine_combination_mem_affine_span_pair sign_eq_of_affineCombination_mem_affineSpan_pair\n-/\n\n",
 "reindex_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing by the composition of two equivalences is the same as reindexing twice. -/\n@[simp]\ntheorem reindex_trans {n₁ n₂ n₃ : ℕ} (e₁₂ : «expr ≃ » (Fin (n₁ + 1)) (Fin (n₂ + 1)))\n    (e₂₃ : «expr ≃ » (Fin (n₂ + 1)) (Fin (n₃ + 1))) (s : Simplex k P n₁) :\n    s.reindex (e₁₂.trans e₂₃) = (s.reindex e₁₂).reindex e₂₃ :=\n  rfl\n#align reindex_trans reindex_trans\n\n",
 "reindex_symm_reindex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing by the inverse of an equivalence and that equivalence yields the original simplex. -/\n@[simp]\ntheorem reindex_symm_reindex {m n : ℕ} (s : Simplex k P m) (e : «expr ≃ » (Fin (n + 1)) (Fin (m + 1))) :\n    (s.reindex e.symm).reindex e = s := by rw [← reindex_trans, Equiv.symm_trans_self, reindex_refl]\n#align reindex_symm_reindex reindex_symm_reindex\n\n",
 "reindex_reindex_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing by an equivalence and its inverse yields the original simplex. -/\n@[simp]\ntheorem reindex_reindex_symm {m n : ℕ} (s : Simplex k P m) (e : «expr ≃ » (Fin (m + 1)) (Fin (n + 1))) :\n    (s.reindex e).reindex e.symm = s := by rw [← reindex_trans, Equiv.self_trans_symm, reindex_refl]\n#align reindex_reindex_symm reindex_reindex_symm\n\n",
 "reindex_refl":
 "/-- Reindexing by `equiv.refl` yields the original simplex. -/\n@[simp]\ntheorem reindex_refl {n : ℕ} (s : Simplex k P n) : s.reindex (Equiv.refl (Fin (n + 1))) = s :=\n  ext fun _ => rfl\n#align reindex_refl reindex_refl\n\n",
 "reindex_range_points":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing a simplex produces one with the same set of points. -/\n@[simp]\ntheorem reindex_range_points {m n : ℕ} (s : Simplex k P m) (e : «expr ≃ » (Fin (m + 1)) (Fin (n + 1))) :\n    Set.range (s.reindex e).points = Set.range s.points := by\n  rw [reindex, Set.range_comp, Equiv.range_eq_univ, Set.image_univ]\n#align reindex_range_points reindex_range_points\n\n",
 "range_face_points":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- The set of points of a face. -/\n@[simp]\ntheorem range_face_points {n : ℕ} (s : Simplex k P n) {fs : Finset (Fin (n + 1))} {m : ℕ} (h : fs.card = m + 1) :\n    Set.range (s.face h).points = «expr '' » s.points ↑fs := by\n  rw [face_points', Set.range_comp, Finset.range_orderEmbOfFin]\n#align range_face_points range_face_points\n\n",
 "range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n#print AffineIndependent.range /-\n/-- If an indexed family of points is affinely independent, so is the\ncorresponding set of points. -/\nprotected theorem AffineIndependent.range {p : ι → P} (ha : AffineIndependent k p) :\n    AffineIndependent k (fun x => x : Set.range p → P) :=\n  by\n  let f : Set.range p → ι := fun x => x.property.some\n  have hf : ∀ x, p (f x) = x := fun x => x.property.some_spec\n  let fe : «expr ↪ » (Set.range p) ι := ⟨f, fun x₁ x₂ he => Subtype.ext (hf x₁ ▸ hf x₂ ▸ he ▸ rfl)⟩\n  convert ha.comp_embedding fe\n  ext\n  simp [hf]\n#align affine_independent.range AffineIndependent.range\n-/\n\n",
 "of_set_of_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n#print AffineIndependent.of_set_of_injective /-\n/-- If the range of an injective indexed family of points is affinely\nindependent, so is that family. -/\ntheorem AffineIndependent.of_set_of_injective {p : ι → P} (ha : AffineIndependent k (fun x => x : Set.range p → P))\n    (hi : function.injective p) : AffineIndependent k p :=\n  ha.comp_embedding\n    (⟨fun i => ⟨p i, Set.mem_range_self _⟩, fun x y h => hi (Subtype.mk_eq_mk.1 h)⟩ : «expr ↪ » ι (Set.range p))\n#align affine_independent.of_set_of_injective AffineIndependent.of_set_of_injective\n-/\n\n",
 "of_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n#print AffineIndependent.of_comp /-\n/-- If the image of a family of points in affine space under an affine transformation is affine-\nindependent, then the original family of points is also affine-independent. -/\ntheorem AffineIndependent.of_comp {p : ι → P} (f : «expr →ᵃ[ ] » P k P₂) (hai : AffineIndependent k (f ∘ p)) :\n    AffineIndependent k p := by\n  cases' isEmpty_or_nonempty ι with h h;\n  · haveI := h\n    apply affineIndependent_of_subsingleton\n  obtain ⟨i⟩ := h\n  rw [affineIndependent_iff_linearIndependent_vsub k p i]\n  simp_rw [affineIndependent_iff_linearIndependent_vsub k (f ∘ p) i, Function.comp_apply, ← f.linear_map_vsub] at hai\n  exact LinearIndependent.of_comp f.linear hai\n#align affine_independent.of_comp AffineIndependent.of_comp\n-/\n\n",
 "not_mem_affineSpan_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineIndependent.not_mem_affineSpan_diff /-\n/-- If a family is affinely independent, a point in the family is not\nin the affine span of the other points, if the underlying ring is\nnontrivial. -/\ntheorem AffineIndependent.not_mem_affineSpan_diff [Nontrivial k] {p : ι → P} (ha : AffineIndependent k p) (i : ι)\n    (s : Set ι) : p i ∉ affineSpan k («expr '' » p (s \\ {i})) := by simp [ha]\n#align affine_independent.not_mem_affine_span_diff AffineIndependent.not_mem_affineSpan_diff\n-/\n\n",
 "mono":
 "#print AffineIndependent.mono /-\n/-- If a set of points is affinely independent, so is any subset. -/\nprotected theorem AffineIndependent.mono {s t : Set P} (ha : AffineIndependent k (fun x => x : t → P)) (hs : s ⊆ t) :\n    AffineIndependent k (fun x => x : s → P) :=\n  ha.comp_embedding (s.embedding_of_subset t hs)\n#align affine_independent.mono AffineIndependent.mono\n-/\n\n",
 "mk_of_point_points":
 "/-- The point in a simplex constructed with `mk_of_point`. -/\n@[simp]\ntheorem mk_of_point_points (p : P) (i : Fin 1) : (mkOfPoint k p).points i = p :=\n  rfl\n#align mk_of_point_points mk_of_point_points\n\n",
 "mem_affineSpan_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineIndependent.mem_affineSpan_iff /-\n/-- If a family is affinely independent, a point in the family is in\nthe span of some of the points given by a subset of the index type if\nand only if that point's index is in the subset, if the underlying\nring is nontrivial. -/\n@[simp]\nprotected theorem AffineIndependent.mem_affineSpan_iff [Nontrivial k] {p : ι → P} (ha : AffineIndependent k p) (i : ι)\n    (s : Set ι) : p i ∈ affineSpan k («expr '' » p s) ↔ i ∈ s :=\n  by\n  constructor\n  · intro hs\n    have h :=\n      AffineIndependent.exists_mem_inter_of_exists_mem_inter_affineSpan ha hs\n        (mem_affineSpan k (Set.mem_image_of_mem _ (Set.mem_singleton _)))\n    rwa [← Set.nonempty_def, Set.inter_singleton_nonempty] at h\n  · exact fun h => mem_affineSpan k (Set.mem_image_of_mem p h)\n#align affine_independent.mem_affine_span_iff AffineIndependent.mem_affineSpan_iff\n-/\n\n",
 "map'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n#print AffineIndependent.map' /-\n/-- The image of a family of points in affine space, under an injective affine transformation, is\naffine-independent. -/\ntheorem AffineIndependent.map' {p : ι → P} (hai : AffineIndependent k p) (f : «expr →ᵃ[ ] » P k P₂)\n    (hf : function.injective f) : AffineIndependent k (f ∘ p) :=\n  by\n  cases' isEmpty_or_nonempty ι with h h\n  · haveI := h\n    apply affineIndependent_of_subsingleton\n  obtain ⟨i⟩ := h\n  rw [affineIndependent_iff_linearIndependent_vsub k p i] at hai\n  simp_rw [affineIndependent_iff_linearIndependent_vsub k (f ∘ p) i, Function.comp_apply, ← f.linear_map_vsub]\n  have hf' : f.linear.ker = «expr⊥» := by rwa [LinearMap.ker_eq_bot, f.linear_injective_iff]\n  exact LinearIndependent.map' hai f.linear hf'\n#align affine_independent.map' AffineIndependent.map'\n-/\n\n",
 "linearIndependent_set_iff_affineIndependent_vadd_union_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n#print linearIndependent_set_iff_affineIndependent_vadd_union_singleton /-\n/-- A set of nonzero vectors is linearly independent if and only if,\ngiven a point `p₁`, the vectors added to `p₁` and `p₁` itself are\naffinely independent. -/\ntheorem linearIndependent_set_iff_affineIndependent_vadd_union_singleton {s : Set V} (hs : ∀ v ∈ s, v ≠ (0 : V))\n    (p₁ : P) :\n    LinearIndependent k (fun v => v : s → V) ↔\n      AffineIndependent k (fun p => p : {p₁} ∪ «expr '' » (fun v => «expr +ᵥ » v p₁) s → P) :=\n  by\n  rw [affineIndependent_set_iff_linearIndependent_vsub k (Set.mem_union_left _ (Set.mem_singleton p₁))]\n  have h : «expr '' » (fun p => («expr -ᵥ » p p₁ : V)) (({p₁} ∪ «expr '' » (fun v => «expr +ᵥ » v p₁) s) \\ {p₁}) = s :=\n    by\n    simp_rw [Set.union_diff_left, Set.image_diff (vsub_left_injective p₁), Set.image_image, Set.image_singleton,\n      vsub_self, vadd_vsub, Set.image_id']\n    exact Set.diff_singleton_eq_self fun h => hs 0 h rfl\n  rw [h]\n#align linear_independent_set_iff_affine_independent_vadd_union_singleton linearIndependent_set_iff_affineIndependent_vadd_union_singleton\n-/\n\n",
 "injective":
 "#print AffineIndependent.injective /-\n/-- An affinely independent family is injective, if the underlying\nring is nontrivial. -/\nprotected theorem AffineIndependent.injective [Nontrivial k] {p : ι → P} (ha : AffineIndependent k p) :\n    function.injective p := by\n  intro i j hij\n  rw [affineIndependent_iff_linearIndependent_vsub _ _ j] at ha\n  by_contra hij'\n  exact ha.ne_zero ⟨i, hij'⟩ (vsub_eq_zero_iff_eq.mpr hij)\n#align affine_independent.injective AffineIndependent.injective\n-/\n\n",
 "indicator_eq_of_affineCombination_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print AffineIndependent.indicator_eq_of_affineCombination_eq /-\ntheorem AffineIndependent.indicator_eq_of_affineCombination_eq {p : ι → P} (ha : AffineIndependent k p)\n    (s₁ s₂ : Finset ι) (w₁ w₂ : ι → k)\n    (hw₁ :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s₁ (w₁ i) = 1)\n    (hw₂ :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s₂ (w₂ i) = 1)\n    (h : s₁.affine_combination k p w₁ = s₂.affine_combination k p w₂) :\n    Set.indicator (↑s₁) w₁ = Set.indicator (↑s₂) w₂ :=\n  (affineIndependent_iff_indicator_eq_of_affineCombination_eq k p).1 ha s₁ s₂ w₁ w₂ hw₁ hw₂ h\n#align affine_independent.indicator_eq_of_affine_combination_eq AffineIndependent.indicator_eq_of_affineCombination_eq\n-/\n\n",
 "face_points'":
 "/-- The points of a face of a simplex are given by `mono_of_fin`. -/\ntheorem face_points' {n : ℕ} (s : Simplex k P n) {fs : Finset (Fin (n + 1))} {m : ℕ} (h : fs.card = m + 1) :\n    (s.face h).points = s.points ∘ fs.order_emb_of_fin h :=\n  rfl\n#align face_points' face_points'\n\n",
 "face_points":
 "/-- The points of a face of a simplex are given by `mono_of_fin`. -/\ntheorem face_points {n : ℕ} (s : Simplex k P n) {fs : Finset (Fin (n + 1))} {m : ℕ} (h : fs.card = m + 1)\n    (i : Fin (m + 1)) : (s.face h).points i = s.points (fs.order_emb_of_fin h i) :=\n  rfl\n#align face_points face_points\n\n",
 "face_eq_mk_of_point":
 "/-- A single-point face equals the 0-simplex constructed with\n`mk_of_point`. -/\n@[simp]\ntheorem face_eq_mk_of_point {n : ℕ} (s : Simplex k P n) (i : Fin (n + 1)) :\n    s.face (Finset.card_singleton i) = mkOfPoint k (s.points i) :=\n  by\n  ext\n  simp [face_points]\n#align face_eq_mk_of_point face_eq_mk_of_point\n\n",
 "face_centroid_eq_iff":
 "/-- Over a characteristic-zero division ring, the centroids of two\nfaces of a simplex are equal if and only if those faces are given by\nthe same subset of points. -/\ntheorem face_centroid_eq_iff [CharZero k] {n : ℕ} (s : Simplex k P n) {fs₁ fs₂ : Finset (Fin (n + 1))} {m₁ m₂ : ℕ}\n    (h₁ : fs₁.card = m₁ + 1) (h₂ : fs₂.card = m₂ + 1) :\n    Finset.univ.centroid k (s.face h₁).points = Finset.univ.centroid k (s.face h₂).points ↔ fs₁ = fs₂ :=\n  by\n  rw [face_centroid_eq_centroid, face_centroid_eq_centroid]\n  exact s.centroid_eq_iff h₁ h₂\n#align face_centroid_eq_iff face_centroid_eq_iff\n\n",
 "face_centroid_eq_centroid":
 "/-- The centroid of a face of a simplex as the centroid of a subset of\nthe points. -/\n@[simp]\ntheorem face_centroid_eq_centroid {n : ℕ} (s : Simplex k P n) {fs : Finset (Fin (n + 1))} {m : ℕ}\n    (h : fs.card = m + 1) : Finset.univ.centroid k (s.face h).points = fs.centroid k s.points :=\n  by\n  convert(finset.univ.centroid_map k (fs.order_emb_of_fin h).to_embedding s.points).symm\n  rw [← Finset.coe_inj, Finset.coe_map, Finset.coe_univ, Set.image_univ]\n  simp\n#align face_centroid_eq_centroid face_centroid_eq_centroid\n\n",
 "ext_iff":
 "/-- Two simplices are equal if and only if they have the same points. -/\ntheorem ext_iff {n : ℕ} (s1 s2 : Simplex k P n) : s1 = s2 ↔ ∀ i, s1.points i = s2.points i :=\n  ⟨fun h _ => h ▸ rfl, ext⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "/-- Two simplices are equal if they have the same points. -/\n@[ext]\ntheorem ext {n : ℕ} {s1 s2 : Simplex k P n} (h : ∀ i, s1.points i = s2.points i) : s1 = s2 :=\n  by\n  cases s1\n  cases s2\n  congr with i\n  exact h i\n#align ext ext\n\n",
 "exists_subset_affineIndependent_affineSpan_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print exists_subset_affineIndependent_affineSpan_eq_top /-\n/-- An affinely independent set of points can be extended to such a\nset that spans the whole space. -/\ntheorem exists_subset_affineIndependent_affineSpan_eq_top {s : Set P} (h : AffineIndependent k (fun p => p : s → P)) :\n    ∃ t : Set P, s ⊆ t ∧ AffineIndependent k (fun p => p : t → P) ∧ affineSpan k t = «expr⊤» :=\n  by\n  rcases s.eq_empty_or_nonempty with (rfl | ⟨p₁, hp₁⟩)\n  · have p₁ : P := add_torsor.nonempty.some\n    let hsv := Basis.ofVectorSpace k V\n    have hsvi := hsv.linear_independent\n    have hsvt := hsv.span_eq\n    rw [Basis.coe_ofVectorSpace] at hsvi hsvt\n    have h0 : ∀ v : V, v ∈ Basis.ofVectorSpaceIndex _ _ → v ≠ 0 :=\n      by\n      intro v hv\n      simpa using hsv.ne_zero ⟨v, hv⟩\n    rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k h0 p₁] at hsvi\n    exact\n      ⟨{p₁} ∪ «expr '' » (fun v => «expr +ᵥ » v p₁) _, Set.empty_subset _, hsvi,\n        affineSpan_singleton_union_vadd_eq_top_of_span_eq_top p₁ hsvt⟩\n  · rw [affineIndependent_set_iff_linearIndependent_vsub k hp₁] at h\n    let bsv := Basis.extend h\n    have hsvi := bsv.linear_independent\n    have hsvt := bsv.span_eq\n    rw [Basis.coe_extend] at hsvi hsvt\n    have hsv := h.subset_extend (Set.subset_univ _)\n    have h0 : ∀ v : V, v ∈ h.extend _ → v ≠ 0 := by\n      intro v hv\n      simpa using bsv.ne_zero ⟨v, hv⟩\n    rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k h0 p₁] at hsvi\n    refine' ⟨{p₁} ∪ «expr '' » (fun v => «expr +ᵥ » v p₁) (h.extend (Set.subset_univ _)), _, _⟩\n    · refine' Set.Subset.trans _ (Set.union_subset_union_right _ (Set.image_subset _ hsv))\n      simp [Set.image_image]\n    · use hsvi, affineSpan_singleton_union_vadd_eq_top_of_span_eq_top p₁ hsvt\n#align exists_subset_affine_independent_affine_span_eq_top exists_subset_affineIndependent_affineSpan_eq_top\n-/\n\n",
 "exists_nontrivial_relation_sum_zero_of_not_affine_ind":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print exists_nontrivial_relation_sum_zero_of_not_affine_ind /-\ntheorem exists_nontrivial_relation_sum_zero_of_not_affine_ind {t : Finset V} (h : ¬AffineIndependent k (coe : t → V)) :\n    ∃ f : V → k,\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t\n            («expr • » (f e) e) =\n          0 ∧\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (f e) = 0 ∧\n          ∃ x ∈ t, f x ≠ 0 :=\n  by\n  classical\n    rw [affineIndependent_iff_of_fintype] at h\n    simp only [exists_prop, not_forall] at h\n    obtain ⟨w, hw, hwt, i, hi⟩ := h\n    simp only [Finset.weightedVSub_eq_weightedVSubOfPoint_of_sum_eq_zero _ w (coe : t → V) hw 0, vsub_eq_sub,\n      Finset.weightedVSubOfPoint_apply, sub_zero] at hwt\n    let f : ∀ x : V, x ∈ t → k := fun x hx => w ⟨x, hx⟩\n    refine'\n      ⟨fun x => if hx : x ∈ t then f x hx else (0 : k), _, _,\n        by\n        use i\n        simp [hi, f]⟩\n    suffices\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t\n          (dite (e ∈ t) (fun hx => «expr • » (f e hx) e) fun hx => 0) =\n        0\n      by\n      convert this\n      ext\n      by_cases hx : x ∈ t <;> simp [hx]\n    all_goals simp only [Finset.sum_dite_of_true fun x h => h, subtype.val_eq_coe, Finset.mk_coe, f, hwt, hw]\n#align exists_nontrivial_relation_sum_zero_of_not_affine_ind exists_nontrivial_relation_sum_zero_of_not_affine_ind\n-/\n\n",
 "exists_mem_inter_of_exists_mem_inter_affineSpan":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineIndependent.exists_mem_inter_of_exists_mem_inter_affineSpan /-\n/-- If a family is affinely independent, and the spans of points\nindexed by two subsets of the index type have a point in common, those\nsubsets of the index type have an element in common, if the underlying\nring is nontrivial. -/\ntheorem AffineIndependent.exists_mem_inter_of_exists_mem_inter_affineSpan [Nontrivial k] {p : ι → P}\n    (ha : AffineIndependent k p) {s1 s2 : Set ι} {p0 : P} (hp0s1 : p0 ∈ affineSpan k («expr '' » p s1))\n    (hp0s2 : p0 ∈ affineSpan k («expr '' » p s2)) : ∃ i : ι, i ∈ s1 ∩ s2 :=\n  by\n  rw [Set.image_eq_range] at hp0s1 hp0s2\n  rw [mem_affineSpan_iff_eq_affineCombination, ← Finset.eq_affineCombination_subset_iff_eq_affineCombination_subtype] at\n    hp0s1 hp0s2\n  rcases hp0s1 with ⟨fs1, hfs1, w1, hw1, hp0s1⟩\n  rcases hp0s2 with ⟨fs2, hfs2, w2, hw2, hp0s2⟩\n  rw [affineIndependent_iff_indicator_eq_of_affineCombination_eq] at ha\n  replace ha := ha fs1 fs2 w1 w2 hw1 hw2 (hp0s1 ▸ hp0s2)\n  have hnz :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" fs1 (w1 i) ≠ 0 :=\n    hw1.symm ▸ one_ne_zero\n  rcases Finset.exists_ne_zero_of_sum_ne_zero hnz with ⟨i, hifs1, hinz⟩\n  simp_rw [← Set.indicator_of_mem (Finset.mem_coe.2 hifs1) w1, ha] at hinz\n  use i, hfs1 hifs1, hfs2 (Set.mem_of_indicator_ne_zero hinz)\n#align affine_independent.exists_mem_inter_of_exists_mem_inter_affine_span AffineIndependent.exists_mem_inter_of_exists_mem_inter_affineSpan\n-/\n\n",
 "exists_affineIndependent":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t «expr ⊆ » s) -/\n#print exists_affineIndependent /-\ntheorem exists_affineIndependent (s : Set P) :\n    ∃ (t : _)(_ : t ⊆ s), affineSpan k t = affineSpan k s ∧ AffineIndependent k (coe : t → P) :=\n  by\n  rcases s.eq_empty_or_nonempty with (rfl | ⟨p, hp⟩)\n  · exact ⟨∅, Set.empty_subset ∅, rfl, affineIndependent_of_subsingleton k _⟩\n  obtain ⟨b, hb₁, hb₂, hb₃⟩ := exists_linearIndependent k («expr '' » (Equiv.vaddConst p).symm s)\n  have hb₀ : ∀ v : V, v ∈ b → v ≠ 0 := fun v hv => hb₃.ne_zero (⟨v, hv⟩ : b)\n  rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k hb₀ p] at hb₃\n  refine' ⟨{p} ∪ «expr '' » (Equiv.vaddConst p) b, _, _, hb₃⟩\n  · apply Set.union_subset (set.singleton_subset_iff.mpr hp)\n    rwa [← (Equiv.vaddConst p).subset_image' b s]\n  · rw [Equiv.coe_vaddConst_symm, ← vectorSpan_eq_span_vsub_set_right k hp] at hb₂\n    apply AffineSubspace.ext_of_direction_eq\n    · have : Submodule.span k b = Submodule.span k (insert 0 b) := by simp\n      simp only [direction_affineSpan, ← hb₂, Equiv.coe_vaddConst, Set.singleton_union,\n        vectorSpan_eq_span_vsub_set_right k (Set.mem_insert p _), this]\n      congr\n      change «expr '' » (Equiv.vaddConst p).symm (insert p («expr '' » (Equiv.vaddConst p) b)) = _\n      rw [Set.image_insert_eq, ← Set.image_comp]\n      simp\n    · use p\n      simp only [Equiv.coe_vaddConst, Set.singleton_union, Set.mem_inter_iff, coe_affineSpan]\n      exact ⟨mem_spanPoints k _ _ (Set.mem_insert p _), mem_spanPoints k _ _ hp⟩\n#align exists_affine_independent exists_affineIndependent\n-/\n\n",
 "comp_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n#print AffineIndependent.comp_embedding /-\n/-- If a family is affinely independent, so is any subfamily given by\ncomposition of an embedding into index type with the original\nfamily. -/\ntheorem AffineIndependent.comp_embedding {ι2 : Type _} (f : «expr ↪ » ι2 ι) {p : ι → P} (ha : AffineIndependent k p) :\n    AffineIndependent k (p ∘ f) := by\n  classical\n    intro fs w hw hs i0 hi0\n    let fs' := fs.map f\n    let w' i := if h : ∃ i2, f i2 = i then w h.some else 0\n    have hw' : ∀ i2 : ι2, w' (f i2) = w i2 := by\n      intro i2\n      have h : ∃ i : ι2, f i = f i2 := ⟨i2, rfl⟩\n      have hs : h.some = i2 := f.injective h.some_spec\n      simp_rw [w', dif_pos h, hs]\n    have hw's :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" fs' (w' i) = 0 :=\n      by\n      rw [← hw, Finset.sum_map]\n      simp [hw']\n    have hs' : fs'.weighted_vsub p w' = (0 : V) :=\n      by\n      rw [← hs, Finset.weightedVSub_map]\n      congr with i\n      simp [hw']\n    rw [← ha fs' w' hw's hs' (f i0) ((Finset.mem_map' _).2 hi0), hw']\n#align affine_independent.comp_embedding AffineIndependent.comp_embedding\n-/\n\n",
 "centroid_eq_of_range_eq":
 "/-- Two simplices with the same points have the same centroid. -/\ntheorem centroid_eq_of_range_eq {n : ℕ} {s₁ s₂ : Simplex k P n} (h : Set.range s₁.points = Set.range s₂.points) :\n    Finset.univ.centroid k s₁.points = Finset.univ.centroid k s₂.points :=\n  by\n  rw [← Set.image_univ, ← Set.image_univ, ← Finset.coe_univ] at h\n  exact\n    finset.univ.centroid_eq_of_inj_on_of_image_eq k _ (fun _ _ _ _ he => AffineIndependent.injective s₁.independent he)\n      (fun _ _ _ _ he => AffineIndependent.injective s₂.independent he) h\n#align centroid_eq_of_range_eq centroid_eq_of_range_eq\n\n",
 "centroid_eq_iff":
 "/-- Over a characteristic-zero division ring, the centroids given by\ntwo subsets of the points of a simplex are equal if and only if those\nfaces are given by the same subset of points. -/\n@[simp]\ntheorem centroid_eq_iff [CharZero k] {n : ℕ} (s : Simplex k P n) {fs₁ fs₂ : Finset (Fin (n + 1))} {m₁ m₂ : ℕ}\n    (h₁ : fs₁.card = m₁ + 1) (h₂ : fs₂.card = m₂ + 1) : fs₁.centroid k s.points = fs₂.centroid k s.points ↔ fs₁ = fs₂ :=\n  by\n  refine' ⟨fun h => _, congr_arg _⟩\n  rw [Finset.centroid_eq_affineCombination_fintype, Finset.centroid_eq_affineCombination_fintype] at h\n  have ha :=\n    (affineIndependent_iff_indicator_eq_of_affineCombination_eq k s.points).1 s.independent _ _ _ _\n      (fs₁.sum_centroid_weights_indicator_eq_one_of_card_eq_add_one k h₁)\n      (fs₂.sum_centroid_weights_indicator_eq_one_of_card_eq_add_one k h₂) h\n  simp_rw [Finset.coe_univ, Set.indicator_univ, Function.funext_iff, Finset.centroidWeightsIndicator_def,\n    Finset.centroidWeights, h₁, h₂] at ha\n  ext i\n  specialize ha i\n  have key : ∀ n : ℕ, (n : k) + 1 ≠ 0 := fun n h => by norm_cast  at h\n  -- we should be able to golf this to `refine ⟨λ hi, decidable.by_contradiction (λ hni, _), ...⟩`,\n      -- but for some unknown reason it doesn't work.\n      constructor <;>\n      intro hi <;>\n    by_contra hni\n  · simpa [hni, hi, key] using ha\n  · simpa [hni, hi, key] using ha.symm\n#align centroid_eq_iff centroid_eq_iff\n\n",
 "affineSpan_disjoint_of_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineIndependent.affineSpan_disjoint_of_disjoint /-\n/-- If a family is affinely independent, the spans of points indexed\nby disjoint subsets of the index type are disjoint, if the underlying\nring is nontrivial. -/\ntheorem AffineIndependent.affineSpan_disjoint_of_disjoint [Nontrivial k] {p : ι → P} (ha : AffineIndependent k p)\n    {s1 s2 : Set ι} (hd : Disjoint s1 s2) :\n    Disjoint (affineSpan k («expr '' » p s1) : Set P) (affineSpan k («expr '' » p s2)) :=\n  by\n  refine' Set.disjoint_left.2 fun p0 hp0s1 hp0s2 => _\n  cases' ha.exists_mem_inter_of_exists_mem_inter_affine_span hp0s1 hp0s2 with i hi\n  exact Set.disjoint_iff.1 hd hi\n#align affine_independent.affine_span_disjoint_of_disjoint AffineIndependent.affineSpan_disjoint_of_disjoint\n-/\n\n",
 "affineIndependent_set_of_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵃ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineEquiv.affineIndependent_set_of_eq_iff /-\n/-- Affine equivalences preserve affine independence of subsets. -/\ntheorem AffineEquiv.affineIndependent_set_of_eq_iff {s : Set P} (e : «expr ≃ᵃ[ ] » P k P₂) :\n    AffineIndependent k (coe : «expr '' » e s → P₂) ↔ AffineIndependent k (coe : s → P) :=\n  by\n  have : e ∘ (coe : s → P) = (coe : «expr '' » e s → P₂) ∘ (e : «expr ≃ » P P₂).image s := rfl\n  rw [← e.affine_independent_iff, this, affineIndependent_equiv]\n#align affine_equiv.affine_independent_set_of_eq_iff AffineEquiv.affineIndependent_set_of_eq_iff\n-/\n\n",
 "affineIndependent_set_iff_linearIndependent_vsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n#print affineIndependent_set_iff_linearIndependent_vsub /-\n/-- A set is affinely independent if and only if the differences from\na base point in that set are linearly independent. -/\ntheorem affineIndependent_set_iff_linearIndependent_vsub {s : Set P} {p₁ : P} (hp₁ : p₁ ∈ s) :\n    AffineIndependent k (fun p => p : s → P) ↔\n      LinearIndependent k (fun v => v : «expr '' » (fun p => («expr -ᵥ » p p₁ : V)) (s \\ {p₁}) → V) :=\n  by\n  rw [affineIndependent_iff_linearIndependent_vsub k (fun p => p : s → P) ⟨p₁, hp₁⟩]\n  constructor\n  · intro h\n    have hv : ∀ v : «expr '' » (fun p => («expr -ᵥ » p p₁ : V)) (s \\ {p₁}), «expr +ᵥ » (v : V) p₁ ∈ s \\ {p₁} := fun v =>\n      (vsub_left_injective p₁).mem_set_image.1 ((vadd_vsub (v : V) p₁).symm ▸ v.property)\n    let f : «expr '' » (fun p : P => («expr -ᵥ » p p₁ : V)) (s \\ {p₁}) → { x : s // x ≠ ⟨p₁, hp₁⟩ } := fun x =>\n      ⟨⟨«expr +ᵥ » (x : V) p₁, Set.mem_of_mem_diff (hv x)⟩, fun hx =>\n        Set.not_mem_of_mem_diff (hv x) (Subtype.ext_iff.1 hx)⟩\n    convert h.comp f fun x1 x2 hx => Subtype.ext (vadd_right_cancel p₁ (Subtype.ext_iff.1 (Subtype.ext_iff.1 hx)))\n    ext v\n    exact (vadd_vsub (v : V) p₁).symm\n  · intro h\n    let f : { x : s // x ≠ ⟨p₁, hp₁⟩ } → «expr '' » (fun p : P => («expr -ᵥ » p p₁ : V)) (s \\ {p₁}) := fun x =>\n      ⟨«expr -ᵥ » ((x : s) : P) p₁, ⟨x, ⟨⟨(x : s).property, fun hx => x.property (Subtype.ext hx)⟩, rfl⟩⟩⟩\n    convert h.comp f fun x1 x2 hx => Subtype.ext (Subtype.ext (vsub_left_cancel (Subtype.ext_iff.1 hx)))\n#align affine_independent_set_iff_linear_independent_vsub affineIndependent_set_iff_linearIndependent_vsub\n-/\n\n",
 "affineIndependent_of_subsingleton":
 "#print affineIndependent_of_subsingleton /-\n/-- A family with at most one point is affinely independent. -/\ntheorem affineIndependent_of_subsingleton [subsingleton ι] (p : ι → P) : AffineIndependent k p := fun s w h hs i hi =>\n  Fintype.eq_of_subsingleton_of_sum_eq h i hi\n#align affine_independent_of_subsingleton affineIndependent_of_subsingleton\n-/\n\n",
 "affineIndependent_of_not_mem_span":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AffineIndependent.affineIndependent_of_not_mem_span /-\n/-- If all but one point of a family are affinely independent, and that point does not lie in\nthe affine span of that family, the family is affinely independent. -/\ntheorem AffineIndependent.affineIndependent_of_not_mem_span {p : ι → P} {i : ι}\n    (ha : AffineIndependent k fun x : { y // y ≠ i } => p x) (hi : p i ∉ affineSpan k («expr '' » p { x | x ≠ i })) :\n    AffineIndependent k p := by\n  classical\n    intro s w hw hs\n    let s' : Finset { y // y ≠ i } := s.subtype (· ≠ i)\n    let p' : { y // y ≠ i } → P := fun x => p x\n    by_cases his : i ∈ s ∧ w i ≠ 0\n    · refine' false.elim (hi _)\n      let wm : ι → k := «expr • » (-(w i)⁻¹) w\n      have hms : s.weighted_vsub p wm = (0 : V) := by simp [wm, hs]\n      have hwm :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (wm i) = 0 :=\n        by simp [wm, ← Finset.mul_sum, hw]\n      have hwmi : wm i = -1 := by simp [wm, his.2]\n      let w' : { y // y ≠ i } → k := fun x => wm x\n      have hw' :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s' (w' x) = 1 :=\n        by\n        simp_rw [w', Finset.sum_subtype_eq_sum_filter]\n        rw [← s.sum_filter_add_sum_filter_not (· ≠ i)] at hwm\n        simp_rw [Classical.not_not, Finset.filter_eq', if_pos his.1, Finset.sum_singleton, ← wm, hwmi, ← sub_eq_add_neg,\n          sub_eq_zero] at hwm\n        exact hwm\n      rw [← s.affine_combination_eq_of_weighted_vsub_eq_zero_of_eq_neg_one hms his.1 hwmi, ←\n        (Subtype.range_coe : _ = { x | x ≠ i }), ← Set.range_comp, ← s.affine_combination_subtype_eq_filter]\n      exact affineCombination_mem_affineSpan hw' p'\n    · rw [not_and_or, Classical.not_not] at his\n      let w' : { y // y ≠ i } → k := fun x => w x\n      have hw' :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s' (w' x) = 0 :=\n        by\n        simp_rw [Finset.sum_subtype_eq_sum_filter]\n        rw [Finset.sum_filter_of_ne, hw]\n        rintro x hxs hwx rfl\n        exact hwx (his.neg_resolve_left hxs)\n      have hs' : s'.weighted_vsub p' w' = (0 : V) :=\n        by\n        simp_rw [Finset.weightedVSub_subtype_eq_filter]\n        rw [Finset.weightedVSub_filter_of_ne, hs]\n        rintro x hxs hwx rfl\n        exact hwx (his.neg_resolve_left hxs)\n      intro j hj\n      by_cases hji : j = i\n      · rw [hji] at hj\n        exact hji.symm ▸ his.neg_resolve_left hj\n      · exact ha s' w' hw' hs' ⟨j, hji⟩ (Finset.mem_subtype.2 hj)\n#align affine_independent.affine_independent_of_not_mem_span AffineIndependent.affineIndependent_of_not_mem_span\n-/\n\n",
 "affineIndependent_of_ne_of_not_mem_of_mem_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n#print affineIndependent_of_ne_of_not_mem_of_mem_of_mem /-\n/-- If distinct points `p₂` and `p₃` lie in `s` but `p₁` does not, the three points are affinely\nindependent. -/\ntheorem affineIndependent_of_ne_of_not_mem_of_mem_of_mem {s : AffineSubspace k P} {p₁ p₂ p₃ : P} (hp₂p₃ : p₂ ≠ p₃)\n    (hp₁ : p₁ ∉ s) (hp₂ : p₂ ∈ s) (hp₃ : p₃ ∈ s) :\n    AffineIndependent k\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by\n  rw [← affineIndependent_equiv (Equiv.swap (0 : Fin 3) 2)]\n  convert affineIndependent_of_ne_of_mem_of_mem_of_not_mem hp₂p₃.symm hp₃ hp₂ hp₁ using 1\n  ext x\n  fin_cases x <;> rfl\n#align affine_independent_of_ne_of_not_mem_of_mem_of_mem affineIndependent_of_ne_of_not_mem_of_mem_of_mem\n-/\n\n",
 "affineIndependent_of_ne_of_mem_of_not_mem_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n#print affineIndependent_of_ne_of_mem_of_not_mem_of_mem /-\n/-- If distinct points `p₁` and `p₃` lie in `s` but `p₂` does not, the three points are affinely\nindependent. -/\ntheorem affineIndependent_of_ne_of_mem_of_not_mem_of_mem {s : AffineSubspace k P} {p₁ p₂ p₃ : P} (hp₁p₃ : p₁ ≠ p₃)\n    (hp₁ : p₁ ∈ s) (hp₂ : p₂ ∉ s) (hp₃ : p₃ ∈ s) :\n    AffineIndependent k\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by\n  rw [← affineIndependent_equiv (Equiv.swap (1 : Fin 3) 2)]\n  convert affineIndependent_of_ne_of_mem_of_mem_of_not_mem hp₁p₃ hp₁ hp₃ hp₂ using 1\n  ext x\n  fin_cases x <;> rfl\n#align affine_independent_of_ne_of_mem_of_not_mem_of_mem affineIndependent_of_ne_of_mem_of_not_mem_of_mem\n-/\n\n",
 "affineIndependent_of_ne_of_mem_of_mem_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n#print affineIndependent_of_ne_of_mem_of_mem_of_not_mem /-\n/-- If distinct points `p₁` and `p₂` lie in `s` but `p₃` does not, the three points are affinely\nindependent. -/\ntheorem affineIndependent_of_ne_of_mem_of_mem_of_not_mem {s : AffineSubspace k P} {p₁ p₂ p₃ : P} (hp₁p₂ : p₁ ≠ p₂)\n    (hp₁ : p₁ ∈ s) (hp₂ : p₂ ∈ s) (hp₃ : p₃ ∉ s) :\n    AffineIndependent k\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by\n  have ha :\n    AffineIndependent k fun x : { x : Fin 3 // x ≠ 2 } =>\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") x :=\n    by\n    rw [← affineIndependent_equiv (finSuccAboveEquiv (2 : Fin 3)).to_equiv]\n    convert affineIndependent_of_ne k hp₁p₂\n    ext x\n    fin_cases x <;> rfl\n  refine' ha.affine_independent_of_not_mem_span _\n  intro h\n  refine' hp₃ ((AffineSubspace.le_def' _ s).1 _ p₃ h)\n  simp_rw [affineSpan_le, Set.image_subset_iff, Set.subset_def, Set.mem_preimage]\n  intro x\n  fin_cases x <;> simp [hp₁, hp₂]\n#align affine_independent_of_ne_of_mem_of_mem_of_not_mem affineIndependent_of_ne_of_mem_of_mem_of_not_mem\n-/\n\n",
 "affineIndependent_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n#print affineIndependent_of_ne /-\n/-- Two different points are affinely independent. -/\ntheorem affineIndependent_of_ne {p₁ p₂ : P} (h : p₁ ≠ p₂) :\n    AffineIndependent k\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") :=\n  by\n  rw [affineIndependent_iff_linearIndependent_vsub k\n      («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") 0]\n  let i₁ : { x // x ≠ (0 : Fin 2) } := ⟨1, by norm_num⟩\n  have he' : ∀ i, i = i₁ := by\n    rintro ⟨i, hi⟩\n    ext\n    fin_cases i\n    · simpa using hi\n  haveI : Unique { x // x ≠ (0 : Fin 2) } := ⟨⟨i₁⟩, he'⟩\n  have hz :\n    («expr -ᵥ »\n          ((«expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") ↑default)\n          ((«expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") 0) :\n        V) ≠\n      0 :=\n    by\n    rw [he' default]\n    simpa using h.symm\n  exact linearIndependent_unique _ hz\n#align affine_independent_of_ne affineIndependent_of_ne\n-/\n\n",
 "affineIndependent_iff_of_fintype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n#print affineIndependent_iff_of_fintype /-\n/-- A family indexed by a `fintype` is affinely independent if and\nonly if no nontrivial weighted subtractions over `finset.univ` (where\nthe sum of the weights is 0) are 0. -/\ntheorem affineIndependent_iff_of_fintype [Fintype ι] (p : ι → P) :\n    AffineIndependent k p ↔\n      ∀ w : ι → k,\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              (w i) =\n            0 →\n          Finset.univ.weighted_vsub p w = (0 : V) → ∀ i, w i = 0 :=\n  by\n  constructor\n  · exact fun h w hw hs i => h Finset.univ w hw hs i (Finset.mem_univ _)\n  · intro h s w hw hs i hi\n    rw [Finset.weightedVSub_indicator_subset _ _ (Finset.subset_univ s)] at hs\n    rw [Set.sum_indicator_subset _ (Finset.subset_univ s)] at hw\n    replace h := h ((↑s : Set ι).indicator w) hw hs i\n    simpa [hi] using h\n#align affine_independent_iff_of_fintype affineIndependent_iff_of_fintype\n-/\n\n",
 "affineIndependent_iff_linearIndependent_vsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n#print affineIndependent_iff_linearIndependent_vsub /-\n/-- A family is affinely independent if and only if the differences\nfrom a base point in that family are linearly independent. -/\ntheorem affineIndependent_iff_linearIndependent_vsub (p : ι → P) (i1 : ι) :\n    AffineIndependent k p ↔ LinearIndependent k fun i : { x // x ≠ i1 } => («expr -ᵥ » (p i) (p i1) : V) := by\n  classical\n    constructor\n    · intro h\n      rw [linearIndependent_iff']\n      intro s g hg i hi\n      set f : ι → k := fun x =>\n        if hx : x = i1 then\n          -finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g y)\n        else g ⟨x, hx⟩ with\n        hfdef\n      let s2 : Finset ι := insert i1 (s.map (embedding.subtype _))\n      have hfg : ∀ x : { x // x ≠ i1 }, g x = f x := by\n        intro x\n        rw [hfdef]\n        dsimp only\n        erw [dif_neg x.property, Subtype.coe_eta]\n      rw [hfg]\n      have hf :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s2 (f ι) = 0 :=\n        by\n        rw [Finset.sum_insert (Finset.not_mem_map_subtype_of_not_property s (Classical.not_not.2 rfl)),\n          Finset.sum_subtype_map_embedding fun x hx => (hfg x).symm]\n        rw [hfdef]\n        dsimp only\n        rw [dif_pos rfl]\n        exact neg_add_self _\n      have hs2 : s2.weighted_vsub p f = (0 : V) :=\n        by\n        set f2 : ι → V := fun x => «expr • » (f x) («expr -ᵥ » (p x) (p i1)) with hf2def\n        set g2 : { x // x ≠ i1 } → V := fun x => «expr • » (g x) («expr -ᵥ » (p x) (p i1)) with hg2def\n        have hf2g2 : ∀ x : { x // x ≠ i1 }, f2 x = g2 x :=\n          by\n          simp_rw [hf2def, hg2def, hfg]\n          exact fun x => rfl\n        rw [Finset.weightedVSub_eq_weightedVSubOfPoint_of_sum_eq_zero s2 f p hf (p i1),\n          Finset.weightedVSubOfPoint_insert, Finset.weightedVSubOfPoint_apply,\n          Finset.sum_subtype_map_embedding fun x hx => hf2g2 x]\n        exact hg\n      exact h s2 f hf hs2 i (Finset.mem_insert_of_mem (Finset.mem_map.2 ⟨i, hi, rfl⟩))\n    · intro h\n      rw [linearIndependent_iff'] at h\n      intro s w hw hs i hi\n      rw [Finset.weightedVSub_eq_weightedVSubOfPoint_of_sum_eq_zero s w p hw (p i1), ←\n        s.weighted_vsub_of_point_erase w p i1, Finset.weightedVSubOfPoint_apply] at hs\n      let f : ι → V := fun i => «expr • » (w i) («expr -ᵥ » (p i) (p i1))\n      have hs2 :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            ((s.erase i1).subtype fun i => i ≠ i1) (f i) =\n          0 :=\n        by\n        rw [← hs]\n        convert Finset.sum_subtype_of_mem f fun x => Finset.ne_of_mem_erase\n      have h2 := h ((s.erase i1).subtype fun i => i ≠ i1) (fun x => w x) hs2\n      simp_rw [Finset.mem_subtype] at h2\n      have h2b : ∀ i ∈ s, i ≠ i1 → w i = 0 := fun i his hi => h2 ⟨i, hi⟩ (Finset.mem_erase_of_ne_of_mem hi his)\n      exact Finset.eq_zero_of_sum_eq_zero hw h2b i hi\n#align affine_independent_iff_linear_independent_vsub affineIndependent_iff_linearIndependent_vsub\n-/\n\n",
 "affineIndependent_iff_indicator_eq_of_affineCombination_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print affineIndependent_iff_indicator_eq_of_affineCombination_eq /-\n/-- A family is affinely independent if and only if any affine\ncombinations (with sum of weights 1) that evaluate to the same point\nhave equal `set.indicator`. -/\ntheorem affineIndependent_iff_indicator_eq_of_affineCombination_eq (p : ι → P) :\n    AffineIndependent k p ↔\n      ∀ (s1 s2 : Finset ι) (w1 w2 : ι → k),\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s1 (w1 i) = 1 →\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s2 (w2 i) =\n              1 →\n            s1.affine_combination k p w1 = s2.affine_combination k p w2 →\n              Set.indicator (↑s1) w1 = Set.indicator (↑s2) w2 :=\n  by\n  classical\n    constructor\n    · intro ha s1 s2 w1 w2 hw1 hw2 heq\n      ext i\n      by_cases hi : i ∈ s1 ∪ s2\n      · rw [← sub_eq_zero]\n        rw [Set.sum_indicator_subset _ (Finset.subset_union_left s1 s2)] at hw1\n        rw [Set.sum_indicator_subset _ (Finset.subset_union_right s1 s2)] at hw2\n        have hws :\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (s1 ∪ s2)\n              ((Set.indicator (↑s1) w1 - Set.indicator (↑s2) w2) i) =\n            0 :=\n          by simp [hw1, hw2]\n        rw [Finset.affineCombination_indicator_subset _ _ (Finset.subset_union_left s1 s2),\n          Finset.affineCombination_indicator_subset _ _ (Finset.subset_union_right s1 s2), ← @vsub_eq_zero_iff_eq V,\n          Finset.affineCombination_vsub] at heq\n        exact ha (s1 ∪ s2) (Set.indicator (↑s1) w1 - Set.indicator (↑s2) w2) hws HEq i hi\n      · rw [← Finset.mem_coe, Finset.coe_union] at hi\n        simp [mt (Set.mem_union_left ↑s2) hi, mt (Set.mem_union_right ↑s1) hi]\n    · intro ha s w hw hs i0 hi0\n      let w1 : ι → k := Function.update (Function.const ι 0) i0 1\n      have hw1 :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w1 i) = 1 :=\n        by rw [Finset.sum_update_of_mem hi0, Finset.sum_const_zero, add_zero]\n      have hw1s : s.affine_combination k p w1 = p i0 :=\n        s.affine_combination_of_eq_one_of_eq_zero w1 p hi0 (Function.update_same _ _ _) fun _ _ hne =>\n          Function.update_noteq hne _ _\n      let w2 := w + w1\n      have hw2 :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w2 i) = 1 :=\n        by simp [w2, Finset.sum_add_distrib, hw, hw1]\n      have hw2s : s.affine_combination k p w2 = p i0 := by\n        simp [w2, ← Finset.weightedVSub_vadd_affineCombination, hs, hw1s]\n      replace ha := ha s s w2 w1 hw2 hw1 (hw1s.symm ▸ hw2s)\n      have hws : w2 i0 - w1 i0 = 0 := by\n        rw [← Finset.mem_coe] at hi0\n        rw [← Set.indicator_of_mem hi0 w2, ← Set.indicator_of_mem hi0 w1, ha, sub_self]\n      simpa [w2] using hws\n#align affine_independent_iff_indicator_eq_of_affine_combination_eq affineIndependent_iff_indicator_eq_of_affineCombination_eq\n-/\n\n",
 "affineIndependent_iff_eq_of_fintype_affineCombination_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n#print affineIndependent_iff_eq_of_fintype_affineCombination_eq /-\n/-- A finite family is affinely independent if and only if any affine\ncombinations (with sum of weights 1) that evaluate to the same point are equal. -/\ntheorem affineIndependent_iff_eq_of_fintype_affineCombination_eq [Fintype ι] (p : ι → P) :\n    AffineIndependent k p ↔\n      ∀ w1 w2 : ι → k,\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              (w1 i) =\n            1 →\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n                (w2 i) =\n              1 →\n            Finset.univ.affine_combination k p w1 = Finset.univ.affine_combination k p w2 → w1 = w2 :=\n  by\n  rw [affineIndependent_iff_indicator_eq_of_affineCombination_eq]\n  constructor\n  · intro h w1 w2 hw1 hw2 hweq\n    simpa only [Set.indicator_univ, Finset.coe_univ] using h _ _ w1 w2 hw1 hw2 hweq\n  · intro h s1 s2 w1 w2 hw1 hw2 hweq\n    have hw1' :\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          ((s1 : Set ι).indicator w1 i) =\n        1 :=\n      by rwa [Set.sum_indicator_subset _ (Finset.subset_univ s1)] at hw1\n    have hw2' :\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          ((s2 : Set ι).indicator w2 i) =\n        1 :=\n      by rwa [Set.sum_indicator_subset _ (Finset.subset_univ s2)] at hw2\n    rw [Finset.affineCombination_indicator_subset w1 p (Finset.subset_univ s1),\n      Finset.affineCombination_indicator_subset w2 p (Finset.subset_univ s2)] at hweq\n    exact h _ _ hw1' hw2' hweq\n#align affine_independent_iff_eq_of_fintype_affine_combination_eq affineIndependent_iff_eq_of_fintype_affineCombination_eq\n-/\n\n",
 "affineIndependent_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print affineIndependent_iff /-\n/-- Viewing a module as an affine space modelled on itself, we can characterise affine independence\nin terms of linear combinations. -/\ntheorem affineIndependent_iff {ι} {p : ι → V} :\n    AffineIndependent k p ↔\n      ∀ (s : Finset ι) (w : ι → k),\n        s.sum w = 0 →\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                («expr • » (w e) (p e)) =\n              0 →\n            ∀ e ∈ s, w e = 0 :=\n  forall₃_congr fun s w hw => by simp [s.weighted_vsub_eq_linear_combination hw]\n#align affine_independent_iff affineIndependent_iff\n-/\n\n",
 "affineIndependent_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print affineIndependent_equiv /-\ntheorem affineIndependent_equiv {ι' : Type _} (e : «expr ≃ » ι ι') {p : ι' → P} :\n    AffineIndependent k (p ∘ e) ↔ AffineIndependent k p :=\n  by\n  refine' ⟨_, AffineIndependent.comp_embedding e.to_embedding⟩\n  intro h\n  have : p = p ∘ e ∘ e.symm.to_embedding := by\n    ext\n    simp\n  rw [this]\n  exact h.comp_embedding e.symm.to_embedding\n#align affine_independent_equiv affineIndependent_equiv\n-/\n\n",
 "affineIndependent_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print affineIndependent_def /-\n/-\nCopyright (c) 2020 Joseph Myers. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joseph Myers\n-/\n/-- The definition of `affine_independent`. -/\ntheorem affineIndependent_def (p : ι → P) :\n    AffineIndependent k p ↔\n      ∀ (s : Finset ι) (w : ι → k),\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w i) = 0 →\n          s.weighted_vsub p w = (0 : V) → ∀ i ∈ s, w i = 0 :=\n  iff.rfl\n#align affine_independent_def affineIndependent_def\n-/\n\n",
 "affineCombination_mem_affineSpan_pair":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprline[ , , ]» -/\n#print affineCombination_mem_affineSpan_pair /-\n/-- Given an affinely independent family of points, an affine combination lies in the\nspan of two points given as affine combinations if and only if it is an affine combination\nwith weights those of one point plus a multiple of the difference between the weights of the\ntwo points. -/\ntheorem affineCombination_mem_affineSpan_pair {p : ι → P} (h : AffineIndependent k p) {w w₁ w₂ : ι → k} {s : Finset ι}\n    (hw : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w i) = 1)\n    (hw₁ : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₁ i) = 1)\n    (hw₂ :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₂ i) = 1) :\n    s.affine_combination k p w ∈ «exprline[ , , ]» k (s.affine_combination k p w₁) (s.affine_combination k p w₂) ↔\n      ∃ r : k, ∀ i ∈ s, w i = r * (w₂ i - w₁ i) + w₁ i :=\n  by\n  rw [← vsub_vadd (s.affine_combination k p w) (s.affine_combination k p w₁),\n    AffineSubspace.vadd_mem_iff_mem_direction _ (left_mem_affineSpan_pair _ _ _), direction_affineSpan,\n    s.affine_combination_vsub, Set.pair_comm, weightedVSub_mem_vectorSpan_pair h _ hw₂ hw₁]\n  · simp only [Pi.sub_apply, sub_eq_iff_eq_add]\n  · simp_rw [Pi.sub_apply, Finset.sum_sub_distrib, hw, hw₁, sub_self]\n#align affine_combination_mem_affine_span_pair affineCombination_mem_affineSpan_pair\n-/\n\n"}