{"to_lin'_one":
 "@[simp]\ntheorem to_lin'_one : to_lin' (1 : unitary_group n α) = LinearMap.id :=\n  Matrix.toLin'_one\n#align to_lin'_one to_lin'_one\n\n",
 "to_lin'_mul":
 "@[simp]\ntheorem to_lin'_mul : to_lin' (A * B) = (to_lin' A).comp (to_lin' B) :=\n  Matrix.toLin'_mul A B\n#align to_lin'_mul to_lin'_mul\n\n",
 "to_GL_one":
 "@[simp]\ntheorem to_GL_one : to_GL (1 : unitary_group n α) = 1 :=\n  by\n  ext1 v i\n  rw [coe_to_GL, to_lin'_one]\n  rfl\n#align to_GL_one to_GL_one\n\n",
 "to_GL_mul":
 "@[simp]\ntheorem to_GL_mul (A B : unitary_group n α) : to_GL (A * B) = to_GL A * to_GL B :=\n  by\n  ext1 v i\n  rw [coe_to_GL, to_lin'_mul]\n  rfl\n#align to_GL_mul to_GL_mul\n\n",
 "star_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem star_mul_self (A : unitary_group n α) : matrix.mul (star A) A = 1 :=\n  A.2.1\n#align star_mul_self star_mul_self\n\n",
 "one_val":
 "@[simp]\ntheorem one_val : ↑(1 : unitary_group n α) = (1 : Matrix n n α) :=\n  rfl\n#align one_val one_val\n\n",
 "one_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem one_apply : «expr⇑ » (1 : unitary_group n α) = (1 : Matrix n n α) :=\n  rfl\n#align one_apply one_apply\n\n",
 "mul_val":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_val : ↑(A * B) = matrix.mul A B :=\n  rfl\n#align mul_val mul_val\n\n",
 "mul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem mul_apply : «expr⇑ » (A * B) = matrix.mul A B :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "mem_unitary_group_iff'":
 "theorem mem_unitary_group_iff' {A : Matrix n n α} : A ∈ matrix.unitary_group n α ↔ star A * A = 1 :=\n  by\n  refine' ⟨And.left, fun hA => ⟨hA, _⟩⟩\n  rwa [mul_eq_mul, mul_eq_one_comm] at hA\n#align mem_unitary_group_iff' mem_unitary_group_iff'\n\n",
 "mem_unitary_group_iff":
 "/-\nCopyright (c) 2021 Shing Tak Lam. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Shing Tak Lam\n-/\ntheorem mem_unitary_group_iff {A : Matrix n n α} : A ∈ matrix.unitary_group n α ↔ A * star A = 1 :=\n  by\n  refine' ⟨And.right, fun hA => ⟨_, hA⟩⟩\n  simpa only [mul_eq_mul, mul_eq_one_comm] using hA\n#align mem_unitary_group_iff mem_unitary_group_iff\n\n",
 "mem_orthogonal_group_iff'":
 "theorem mem_orthogonal_group_iff' {A : Matrix n n β} : A ∈ matrix.orthogonal_group n β ↔ star A * A = 1 :=\n  by\n  refine' ⟨And.left, fun hA => ⟨hA, _⟩⟩\n  rwa [mul_eq_mul, mul_eq_one_comm] at hA\n#align mem_orthogonal_group_iff' mem_orthogonal_group_iff'\n\n",
 "mem_orthogonal_group_iff":
 "theorem mem_orthogonal_group_iff {A : Matrix n n β} : A ∈ matrix.orthogonal_group n β ↔ A * star A = 1 :=\n  by\n  refine' ⟨And.right, fun hA => ⟨_, hA⟩⟩\n  simpa only [mul_eq_mul, mul_eq_one_comm] using hA\n#align mem_orthogonal_group_iff mem_orthogonal_group_iff\n\n",
 "inv_val":
 "@[simp]\ntheorem inv_val : ↑A⁻¹ = (star A : Matrix n n α) :=\n  rfl\n#align inv_val inv_val\n\n",
 "inv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem inv_apply : «expr⇑ » A⁻¹ = (star A : Matrix n n α) :=\n  rfl\n#align inv_apply inv_apply\n\n",
 "ext_iff":
 "theorem ext_iff (A B : unitary_group n α) : A = B ↔ ∀ i j, A i j = B i j :=\n  Subtype.ext_iff_val.trans ⟨fun h i j => congr_fun (congr_fun h i) j, Matrix.ext⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext (A B : unitary_group n α) : (∀ i j, A i j = B i j) → A = B :=\n  (unitary_group.ext_iff A B).mpr\n#align ext ext\n\n",
 "det_of_mem_unitary":
 "theorem det_of_mem_unitary {A : Matrix n n α} (hA : A ∈ matrix.unitary_group n α) : A.det ∈ unitary α :=\n  by\n  constructor\n  · simpa [star, det_transpose] using congr_arg det hA.1\n  · simpa [star, det_transpose] using congr_arg det hA.2\n#align det_of_mem_unitary det_of_mem_unitary\n\n",
 "coe_to_GL":
 "theorem coe_to_GL (A : unitary_group n α) : ↑(to_GL A) = to_lin' A :=\n  rfl\n#align coe_to_GL coe_to_GL\n\n"}