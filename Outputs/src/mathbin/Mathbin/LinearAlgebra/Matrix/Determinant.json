{"map_det":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₐ[ ] » -/\n#print AlgEquiv.map_det /-\ntheorem AlgEquiv.map_det [Algebra R S] {T : Type z} [CommRing T] [Algebra R T] (f : «expr ≃ₐ[ ] » S R T)\n    (M : Matrix n n S) : f M.det = Matrix.det (f.map_matrix M) :=\n  f.to_alg_hom.map_det _\n#align alg_equiv.map_det AlgEquiv.map_det\n-/\n\n",
 "det_zero_of_row_eq":
 "/-- If a matrix has a repeated row, the determinant will be zero. -/\ntheorem det_zero_of_row_eq (i_ne_j : i ≠ j) (hij : M i = M j) : M.det = 0 :=\n  (detRowAlternating : AlternatingMap R (n → R) R n).map_eq_zero_of_eq M hij i_ne_j\n#align det_zero_of_row_eq det_zero_of_row_eq\n\n",
 "det_zero_of_column_eq":
 "/-- If a matrix has a repeated column, the determinant will be zero. -/\ntheorem det_zero_of_column_eq (i_ne_j : i ≠ j) (hij : ∀ k, M k i = M k j) : M.det = 0 :=\n  by\n  rw [← det_transpose, det_zero_of_row_eq i_ne_j]\n  exact funext hij\n#align det_zero_of_column_eq det_zero_of_column_eq\n\n",
 "det_zero":
 "@[simp]\ntheorem det_zero (h : Nonempty n) : det (0 : Matrix n n R) = 0 :=\n  (detRowAlternating : AlternatingMap R (n → R) R n).map_zero\n#align det_zero det_zero\n\n",
 "det_update_row_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_update_row_smul' (M : Matrix n n R) (j : n) (s : R) (u : n → R) :\n    det (updateRow («expr • » s M) j u) = s ^ (Fintype.card n - 1) * det (updateRow M j u) :=\n  MultilinearMap.map_update_smul _ M j s u\n#align det_update_row_smul' det_update_row_smul'\n\n",
 "det_update_row_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_update_row_smul (M : Matrix n n R) (j : n) (s : R) (u : n → R) :\n    det (updateRow M j <| «expr • » s u) = s * det (updateRow M j u) :=\n  (detRowAlternating : AlternatingMap R (n → R) R n).map_smul M j s u\n#align det_update_row_smul det_update_row_smul\n\n",
 "det_update_row_add_smul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_update_row_add_smul_self (A : Matrix n n R) {i j : n} (hij : i ≠ j) (c : R) :\n    det (updateRow A i (A i + «expr • » c (A j))) = det A := by\n  simp [det_update_row_add, det_update_row_smul,\n    det_zero_of_row_eq hij (update_row_self.trans (update_row_ne hij.symm).symm)]\n#align det_update_row_add_smul_self det_update_row_add_smul_self\n\n",
 "det_update_row_add_self":
 "theorem det_update_row_add_self (A : Matrix n n R) {i j : n} (hij : i ≠ j) : det (updateRow A i (A i + A j)) = det A :=\n  by simp [det_update_row_add, det_zero_of_row_eq hij (update_row_self.trans (update_row_ne hij.symm).symm)]\n#align det_update_row_add_self det_update_row_add_self\n\n",
 "det_update_row_add":
 "theorem det_update_row_add (M : Matrix n n R) (j : n) (u v : n → R) :\n    det (updateRow M j <| u + v) = det (updateRow M j u) + det (updateRow M j v) :=\n  (detRowAlternating : AlternatingMap R (n → R) R n).map_add M j u v\n#align det_update_row_add det_update_row_add\n\n",
 "det_update_column_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_update_column_smul' (M : Matrix n n R) (j : n) (s : R) (u : n → R) :\n    det (updateColumn («expr • » s M) j u) = s ^ (Fintype.card n - 1) * det (updateColumn M j u) :=\n  by\n  rw [← det_transpose, ← update_row_transpose, transpose_smul, det_update_row_smul']\n  simp [update_row_transpose, det_transpose]\n#align det_update_column_smul' det_update_column_smul'\n\n",
 "det_update_column_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_update_column_smul (M : Matrix n n R) (j : n) (s : R) (u : n → R) :\n    det (updateColumn M j <| «expr • » s u) = s * det (updateColumn M j u) :=\n  by\n  rw [← det_transpose, ← update_row_transpose, det_update_row_smul]\n  simp [update_row_transpose, det_transpose]\n#align det_update_column_smul det_update_column_smul\n\n",
 "det_update_column_add_smul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_update_column_add_smul_self (A : Matrix n n R) {i j : n} (hij : i ≠ j) (c : R) :\n    det (updateColumn A i fun k => A k i + «expr • » c (A k j)) = det A :=\n  by\n  rw [← det_transpose, ← update_row_transpose, ← det_transpose A]\n  exact det_update_row_add_smul_self (matrix.transpose A) hij c\n#align det_update_column_add_smul_self det_update_column_add_smul_self\n\n",
 "det_update_column_add_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem det_update_column_add_self (A : Matrix n n R) {i j : n} (hij : i ≠ j) :\n    det (updateColumn A i fun k => A k i + A k j) = det A :=\n  by\n  rw [← det_transpose, ← update_row_transpose, ← det_transpose A]\n  exact det_update_row_add_self (matrix.transpose A) hij\n#align det_update_column_add_self det_update_column_add_self\n\n",
 "det_update_column_add":
 "theorem det_update_column_add (M : Matrix n n R) (j : n) (u v : n → R) :\n    det (updateColumn M j <| u + v) = det (updateColumn M j u) + det (updateColumn M j v) :=\n  by\n  rw [← det_transpose, ← update_row_transpose, det_update_row_add]\n  simp [update_row_transpose, det_transpose]\n#align det_update_column_add det_update_column_add\n\n",
 "det_units_conj'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem det_units_conj' (M : «expr ˣ» (Matrix m m R)) (N : Matrix m m R) :\n    det (matrix.mul (matrix.mul (↑M⁻¹) N) ↑M : Matrix m m R) = det N :=\n  det_units_conj M⁻¹ N\n#align det_units_conj' det_units_conj'\n\n",
 "det_units_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem det_units_conj (M : «expr ˣ» (Matrix m m R)) (N : Matrix m m R) :\n    det (matrix.mul (matrix.mul (↑M) N) ↑M⁻¹ : Matrix m m R) = det N := by\n  rw [det_mul_right_comm, ← mul_eq_mul, ← mul_eq_mul, Units.mul_inv, one_mul]\n#align det_units_conj det_units_conj\n\n",
 "det_unique":
 "/-- If `n` has only one element, the determinant of an `n` by `n` matrix is just that element.\nAlthough `unique` implies `decidable_eq` and `fintype`, the instances might\nnot be syntactically equal. Thus, we need to fill in the args explicitly. -/\n@[simp]\ntheorem det_unique {n : Type _} [Unique n] [DecidableEq n] [Fintype n] (A : Matrix n n R) : det A = A default default :=\n  by simp [det_apply, univ_unique]\n#align det_unique det_unique\n\n",
 "det_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/-- Transposing a matrix preserves the determinant. -/\n@[simp]\ntheorem det_transpose (M : Matrix n n R) : (matrix.transpose M).det = M.det :=\n  by\n  rw [det_apply', det_apply']\n  refine' Fintype.sum_bijective _ inv_involutive.bijective _ _ _\n  intro σ\n  rw [sign_inv]\n  congr 1\n  apply Fintype.prod_equiv σ\n  intros\n  simp\n#align det_transpose det_transpose\n\n",
 "det_succ_row_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- Laplacian expansion of the determinant of an `n+1 × n+1` matrix along row 0. -/\ntheorem det_succ_row_zero {n : ℕ} (A : Matrix (Fin n.succ) (Fin n.succ) R) :\n    det A =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        ((-1) ^ (j : ℕ) * A 0 j * det (A.submatrix fin.succ j.succ_above)) :=\n  by\n  rw [← det_transpose A, det_succ_column_zero]\n  refine' Finset.sum_congr rfl fun i _ => _\n  rw [← det_transpose]\n  simp only [transpose_apply, transpose_submatrix, transpose_transpose]\n#align det_succ_row_zero det_succ_row_zero\n\n",
 "det_succ_row":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- Laplacian expansion of the determinant of an `n+1 × n+1` matrix along row `i`. -/\ntheorem det_succ_row {n : ℕ} (A : Matrix (Fin n.succ) (Fin n.succ) R) (i : Fin n.succ) :\n    det A =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        ((-1) ^ (i + j : ℕ) * A i j * det (A.submatrix i.succ_above j.succ_above)) :=\n  by\n  simp_rw [pow_add, mul_assoc, ← mul_sum]\n  have : det A = (-1 : R) ^ (i : ℕ) * i.cycle_range⁻¹.sign * det A := by\n    calc\n      det A = ↑((-1 : «expr ˣ» ℤ) ^ (i : ℕ) * (-1 : «expr ˣ» ℤ) ^ (i : ℕ) : «expr ˣ» ℤ) * det A := by simp\n      _ = (-1 : R) ^ (i : ℕ) * i.cycle_range⁻¹.sign * det A := by simp [-Int.units_mul_self]\n      \n  rw [this, mul_assoc]\n  congr\n  rw [← det_permute, det_succ_row_zero]\n  refine' Finset.sum_congr rfl fun j _ => _\n  rw [mul_assoc, Matrix.submatrix, Matrix.submatrix]\n  congr\n  · rw [Equiv.Perm.inv_def, Fin.cycleRange_symm_zero]\n  · ext (i' j')\n    rw [Equiv.Perm.inv_def, Fin.cycleRange_symm_succ]\n#align det_succ_row det_succ_row\n\n",
 "det_succ_column_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- Laplacian expansion of the determinant of an `n+1 × n+1` matrix along column 0. -/\ntheorem det_succ_column_zero {n : ℕ} (A : Matrix (Fin n.succ) (Fin n.succ) R) :\n    det A =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        ((-1) ^ (i : ℕ) * A i 0 * det (A.submatrix i.succ_above fin.succ)) :=\n  by\n  rw [Matrix.det_apply, Finset.univ_perm_fin_succ, ← Finset.univ_product_univ]\n  simp only [Finset.sum_map, Equiv.toEmbedding_apply, Finset.sum_product, Matrix.submatrix]\n  refine' Finset.sum_congr rfl fun i _ => Fin.cases _ (fun i => _) i\n  ·\n    simp only [Fin.prod_univ_succ, Matrix.det_apply, Finset.mul_sum, Equiv.Perm.decomposeFin_symm_apply_zero,\n      Fin.val_zero, one_mul, Equiv.Perm.decomposeFin.symm_sign, Equiv.swap_self, if_true, id.def, eq_self_iff_true,\n      Equiv.Perm.decomposeFin_symm_apply_succ, Fin.succAbove_zero, Equiv.coe_refl, pow_zero, mul_smul_comm, of_apply]\n  -- `univ_perm_fin_succ` gives a different embedding of `perm (fin n)` into\n  -- `perm (fin n.succ)` than the determinant of the submatrix we want,\n  -- permute `A` so that we get the correct one.\n  have : (-1 : R) ^ (i : ℕ) = i.cycle_range.sign := by simp [Fin.sign_cycleRange]\n  rw [Fin.val_succ, pow_succ, this, mul_assoc, mul_assoc, mul_left_comm ↑(Equiv.Perm.sign _), ← det_permute,\n    Matrix.det_apply, Finset.mul_sum, Finset.mul_sum]\n  -- now we just need to move the corresponding parts to the same place\n  refine' Finset.sum_congr rfl fun σ _ => _\n  rw [Equiv.Perm.decomposeFin.symm_sign, if_neg (Fin.succ_ne_zero i)]\n  calc\n    «expr • » (-1 * σ.sign : ℤ)\n          (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            (A (equiv.perm.decompose_fin.symm (fin.succ i, σ) i') i')) =\n        «expr • » (-1 * σ.sign : ℤ)\n          (A (fin.succ i) 0 *\n            finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n              (A ((fin.succ i).succ_above (Fin.cycleRange i (σ i'))) i'.succ)) :=\n      by\n      simp only [Fin.prod_univ_succ, Fin.succAbove_cycleRange, Equiv.Perm.decomposeFin_symm_apply_zero,\n        Equiv.Perm.decomposeFin_symm_apply_succ]\n    _ =\n        -1 *\n          (A (fin.succ i) 0 *\n            «expr • » (σ.sign : ℤ)\n              (finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (A ((fin.succ i).succ_above (Fin.cycleRange i (σ i'))) i'.succ))) :=\n      by\n      simp only [mul_assoc, mul_comm, _root_.neg_mul, one_mul, zsmul_eq_mul, neg_inj, neg_smul,\n        Fin.succAbove_cycleRange]\n    \n#align det_succ_column_zero det_succ_column_zero\n\n",
 "det_succ_column":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- Laplacian expansion of the determinant of an `n+1 × n+1` matrix along column `j`. -/\ntheorem det_succ_column {n : ℕ} (A : Matrix (Fin n.succ) (Fin n.succ) R) (j : Fin n.succ) :\n    det A =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        ((-1) ^ (i + j : ℕ) * A i j * det (A.submatrix i.succ_above j.succ_above)) :=\n  by\n  rw [← det_transpose, det_succ_row _ j]\n  refine' Finset.sum_congr rfl fun i _ => _\n  rw [add_comm, ← det_transpose, transpose_apply, transpose_submatrix, transpose_transpose]\n#align det_succ_column det_succ_column\n\n",
 "det_submatrix_equiv_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Permuting rows and columns with the same equivalence has no effect. -/\n@[simp]\ntheorem det_submatrix_equiv_self (e : «expr ≃ » n m) (A : Matrix m m R) : det (A.submatrix e e) = det A :=\n  by\n  rw [det_apply', det_apply']\n  apply Fintype.sum_equiv (Equiv.permCongr e)\n  intro σ\n  rw [Equiv.Perm.sign_permCongr e σ]\n  congr 1\n  apply Fintype.prod_equiv e\n  intro i\n  rw [Equiv.permCongr_apply, Equiv.symm_apply_apply, submatrix_apply]\n#align det_submatrix_equiv_self det_submatrix_equiv_self\n\n",
 "det_smul_of_tower":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem det_smul_of_tower {α} [Monoid α] [DistribMulAction α R] [IsScalarTower α R R] [SMulCommClass α R R] (c : α)\n    (A : Matrix n n R) : det («expr • » c A) = «expr • » (c ^ Fintype.card n) (det A) := by\n  rw [← smul_one_smul R c A, det_smul, smul_pow, one_pow, smul_mul_assoc, one_mul]\n#align det_smul_of_tower det_smul_of_tower\n\n",
 "det_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_smul (A : Matrix n n R) (c : R) : det («expr • » c A) = c ^ Fintype.card n * det A :=\n  calc\n    det («expr • » c A) = det (Matrix.mul (diagonal fun _ => c) A) := by rw [smul_eq_diagonal_mul]\n    _ = det (diagonal fun _ => c) * det A := (det_mul _ _)\n    _ = c ^ Fintype.card n * det A := by simp [card_univ]\n    \n#align det_smul det_smul\n\n",
 "det_reindex_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing both indices along the same equivalence preserves the determinant.\n\nFor the `simp` version of this lemma, see `det_submatrix_equiv_self`; this one is unsuitable because\n`matrix.reindex_apply` unfolds `reindex` first.\n-/\ntheorem det_reindex_self (e : «expr ≃ » m n) (A : Matrix m m R) : det (reindex e e A) = det A :=\n  det_submatrix_equiv_self e.symm A\n#align det_reindex_self det_reindex_self\n\n",
 "det_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp]\ntheorem det_pow (M : Matrix m m R) (n : ℕ) : det (M ^ n) = det M ^ n :=\n  (detMonoidHom : «expr →* » (Matrix m m R) R).map_pow M n\n#align det_pow det_pow\n\n",
 "det_permute":
 "/-- Permuting the columns changes the sign of the determinant. -/\ntheorem det_permute (σ : Perm n) (M : Matrix n n R) : (Matrix.det fun i => M (σ i)) = σ.sign * M.det :=\n  ((detRowAlternating : AlternatingMap R (n → R) R n).map_perm M σ).trans (by simp [Units.smul_def])\n#align det_permute det_permute\n\n",
 "det_permutation":
 "/-- The determinant of a permutation matrix equals its sign. -/\n@[simp]\ntheorem det_permutation (σ : Perm n) : Matrix.det (σ.to_pequiv.to_matrix : Matrix n n R) = σ.sign := by\n  rw [← Matrix.mul_one (σ.to_pequiv.to_matrix : Matrix n n R), PEquiv.toPEquiv_mul_matrix, det_permute, det_one,\n    mul_one]\n#align det_permutation det_permutation\n\n",
 "det_one":
 "@[simp]\ntheorem det_one : det (1 : Matrix n n R) = 1 := by rw [← diagonal_one] <;> simp [-diagonal_one]\n#align det_one det_one\n\n",
 "det_neg_eq_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- A variant of `matrix.det_neg` with scalar multiplication by `units ℤ` instead of multiplication\nby `R`. -/\ntheorem det_neg_eq_smul (A : Matrix n n R) : det (-A) = «expr • » ((-1 : Units ℤ) ^ Fintype.card n) (det A) := by\n  rw [← det_smul_of_tower, Units.neg_smul, one_smul]\n#align det_neg_eq_smul det_neg_eq_smul\n\n",
 "det_neg":
 "theorem det_neg (A : Matrix n n R) : det (-A) = (-1) ^ Fintype.card n * det A := by rw [← det_smul, neg_one_smul]\n#align det_neg det_neg\n\n",
 "det_mul_row":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/-- Multiplying each row by a fixed `v i` multiplies the determinant by\nthe product of the `v`s. -/\ntheorem det_mul_row (v : n → R) (A : Matrix n n R) :\n    det (of fun i j => v j * A i j) =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n          (v i) *\n        det A :=\n  calc\n    det (of fun i j => v j * A i j) = det (matrix.mul A (diagonal v)) :=\n      congr_arg det <| by\n        ext\n        simp [mul_comm]\n    _ =\n        finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            (v i) *\n          det A :=\n      by rw [det_mul, det_diagonal, mul_comm]\n    \n#align det_mul_row det_mul_row\n\n",
 "det_mul_right_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-- On square matrices, `mul_right_comm` applies under `det`. -/\ntheorem det_mul_right_comm (M N P : Matrix m m R) :\n    det (matrix.mul (matrix.mul M N) P) = det (matrix.mul (matrix.mul M P) N) := by\n  rw [Matrix.mul_assoc, Matrix.mul_assoc, det_mul, det_mul_comm N P, ← det_mul]\n#align det_mul_right_comm det_mul_right_comm\n\n",
 "det_mul_left_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-- On square matrices, `mul_left_comm` applies under `det`. -/\ntheorem det_mul_left_comm (M N P : Matrix m m R) :\n    det (matrix.mul M (matrix.mul N P)) = det (matrix.mul N (matrix.mul M P)) := by\n  rw [← Matrix.mul_assoc, ← Matrix.mul_assoc, det_mul, det_mul_comm M N, ← det_mul]\n#align det_mul_left_comm det_mul_left_comm\n\n",
 "det_mul_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-- On square matrices, `mul_comm` applies under `det`. -/\ntheorem det_mul_comm (M N : Matrix m m R) : det (matrix.mul M N) = det (matrix.mul N M) := by\n  rw [det_mul, det_mul, mul_comm]\n#align det_mul_comm det_mul_comm\n\n",
 "det_mul_column":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/-- Multiplying each column by a fixed `v j` multiplies the determinant by\nthe product of the `v`s. -/\ntheorem det_mul_column (v : n → R) (A : Matrix n n R) :\n    det (of fun i j => v i * A i j) =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n          (v i) *\n        det A :=\n  MultilinearMap.map_smul_univ _ v A\n#align det_mul_column det_mul_column\n\n",
 "det_mul_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\ntheorem det_mul_aux {M N : Matrix n n R} {p : n → n} (H : ¬bijective p) :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («exprε » σ *\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            (M (σ x) (p x) * N (p x) x)) =\n      0 :=\n  by\n  obtain ⟨i, j, hpij, hij⟩ : ∃ i j, p i = p j ∧ i ≠ j :=\n    by\n    rw [← Finite.injective_iff_bijective, injective] at H\n    push_neg  at H\n    exact H\n  exact\n    sum_involution (fun σ _ => σ * swap i j)\n      (fun σ _ =>\n        by\n        have :\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n              (M (σ x) (p x)) =\n            finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n              (M ((σ * swap i j) x) (p x)) :=\n          Fintype.prod_equiv (swap i j) _ _ (by simp [apply_swap_eq_self hpij])\n        simp [this, sign_swap hij, prod_mul_distrib])\n      (fun σ _ _ => (not_congr mul_swap_eq_iff).mpr hij) (fun _ _ => mem_univ _) fun σ _ => mul_swap_involutive i j σ\n#align det_mul_aux det_mul_aux\n\n",
 "det_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem det_mul (M N : Matrix n n R) : det (matrix.mul M N) = det M * det N :=\n  calc\n    det (matrix.mul M N) =\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            («exprε » σ *\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M (σ i) (p i) * N (p i) i))) :=\n      by simp only [det_apply', mul_apply, prod_univ_sum, mul_sum, Fintype.piFinset_univ] <;> rw [Finset.sum_comm]\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n          ((@univ (n → n) _).filter bijective)\n          (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            («exprε » σ *\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M (σ i) (p i) * N (p i) i))) :=\n      (Eq.symm <|\n        sum_subset (filter_subset _ _) fun f _ hbij =>\n          det_mul_aux <| by simpa only [true_and_iff, mem_filter, mem_univ] using hbij)\n    _ =\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            («exprε » σ *\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M (σ i) (τ i) * N (τ i) i))) :=\n      (sum_bij (fun p h => Equiv.ofBijective p (mem_filter.1 h).2) (fun _ _ => mem_univ _) (fun _ _ => rfl)\n        (fun _ _ _ _ h => by injection h) fun b _ => ⟨b, mem_filter.2 ⟨mem_univ _, b.bijective⟩, coe_fn_injective rfl⟩)\n    _ =\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                  (N (σ i) i) *\n                «exprε » τ *\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M (τ j) (σ j)))) :=\n      by simp only [mul_comm, mul_left_comm, prod_mul_distrib, mul_assoc]\n    _ =\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                  (N (σ i) i) *\n                («exprε » σ * «exprε » τ) *\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M (τ i) i))) :=\n      (sum_congr rfl fun σ _ =>\n        Fintype.sum_equiv (Equiv.mulRight σ⁻¹) _ _ fun τ =>\n          by\n          have :\n            finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M (τ j) (σ j)) =\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                (M ((τ * σ⁻¹) j) j) :=\n            by\n            rw [← (σ⁻¹ : «expr ≃ » _ _).prod_comp]\n            simp only [Equiv.Perm.coe_mul, apply_inv_self]\n          have h : «exprε » σ * «exprε » (τ * σ⁻¹) = «exprε » τ :=\n            calc\n              «exprε » σ * «exprε » (τ * σ⁻¹) = «exprε » (τ * σ⁻¹ * σ) :=\n                by\n                rw [mul_comm, sign_mul (τ * σ⁻¹)]\n                simp only [Int.cast_mul, Units.val_mul]\n              _ = «exprε » τ := by simp only [inv_mul_cancel_right]\n              \n          simp_rw [Equiv.coe_mulRight, h]\n          simp only [this])\n    _ = det M * det N := by simp only [det_apply', Finset.mul_sum, mul_comm, mul_left_comm]\n    \n#align det_mul det_mul\n\n",
 "det_is_empty":
 "theorem det_is_empty [IsEmpty n] {A : Matrix n n R} : det A = 1 := by simp [det_apply]\n#align det_is_empty det_is_empty\n\n",
 "det_from_blocks_zero₂₁":
 "/-- The determinant of a 2×2 block matrix with the lower-left block equal to zero is the product of\nthe determinants of the diagonal blocks. For the generalization to any number of blocks, see\n`matrix.det_of_upper_triangular`. -/\n@[simp]\ntheorem det_from_blocks_zero₂₁ (A : Matrix m m R) (B : Matrix m n R) (D : Matrix n n R) :\n    (Matrix.fromBlocks A B 0 D).det = A.det * D.det := by\n  classical\n    simp_rw [det_apply']\n    convert(sum_subset (subset_univ ((sum_congr_hom m n).range : Set (perm (Sum m n))).to_finset) _).symm\n    rw [sum_mul_sum]\n    simp_rw [univ_product_univ]\n    rw [(sum_bij (fun (σ : perm m × perm n) _ => Equiv.sumCongr σ.fst σ.snd) _ _ _ _).symm]\n    · intro σ₁₂ h\n      simp only\n      erw [Set.mem_toFinset, MonoidHom.mem_range]\n      use σ₁₂\n      simp only [sum_congr_hom_apply]\n    · simp only [forall_prop_of_true, Prod.forall, mem_univ]\n      intro σ₁ σ₂\n      rw [Fintype.prod_sum_type]\n      simp_rw [Equiv.sumCongr_apply, Sum.map_inr, Sum.map_inl, from_blocks_apply₁₁, from_blocks_apply₂₂]\n      rw [mul_mul_mul_comm]\n      congr\n      rw [sign_sum_congr, Units.val_mul, Int.cast_mul]\n    · intro σ₁ σ₂ h₁ h₂\n      dsimp only\n      intro h\n      have h2 : ∀ x, perm.sum_congr σ₁.fst σ₁.snd x = perm.sum_congr σ₂.fst σ₂.snd x :=\n        by\n        intro x\n        exact congr_fun (congr_arg to_fun h) x\n      simp only [Sum.map_inr, Sum.map_inl, perm.sum_congr_apply, Sum.forall] at h2\n      ext\n      · exact h2.left x\n      · exact h2.right x\n    · intro σ hσ\n      erw [Set.mem_toFinset, MonoidHom.mem_range] at hσ\n      obtain ⟨σ₁₂, hσ₁₂⟩ := hσ\n      use σ₁₂\n      rw [← hσ₁₂]\n      simp\n    · intro σ hσ hσn\n      have h1 : ¬∀ x, ∃ y, Sum.inl y = σ (Sum.inl x) := by\n        by_contra\n        rw [Set.mem_toFinset] at hσn\n        apply absurd (mem_sum_congr_hom_range_of_perm_maps_to_inl _) hσn\n        rintro x ⟨a, ha⟩\n        rw [← ha]\n        exact h a\n      obtain ⟨a, ha⟩ := not_forall.mp h1\n      cases' hx : σ (Sum.inl a) with a2 b\n      · have hn := (not_exists.mp ha) a2\n        exact absurd hx.symm hn\n      · rw [Finset.prod_eq_zero (Finset.mem_univ (Sum.inl a)), MulZeroClass.mul_zero]\n        rw [hx, from_blocks_apply₂₁]\n        rfl\n#align det_from_blocks_zero₂₁ det_from_blocks_zero₂₁\n\n",
 "det_from_blocks_zero₁₂":
 "/-- The determinant of a 2×2 block matrix with the upper-right block equal to zero is the product of\nthe determinants of the diagonal blocks. For the generalization to any number of blocks, see\n`matrix.det_of_lower_triangular`. -/\n@[simp]\ntheorem det_from_blocks_zero₁₂ (A : Matrix m m R) (C : Matrix n m R) (D : Matrix n n R) :\n    (Matrix.fromBlocks A 0 C D).det = A.det * D.det := by\n  rw [← det_transpose, from_blocks_transpose, transpose_zero, det_from_blocks_zero₂₁, det_transpose, det_transpose]\n#align det_from_blocks_zero₁₂ det_from_blocks_zero₁₂\n\n",
 "det_fin_zero":
 "/-- Determinant of 0x0 matrix -/\n@[simp]\ntheorem det_fin_zero {A : Matrix (Fin 0) (Fin 0) R} : det A = 1 :=\n  det_isEmpty\n#align det_fin_zero det_fin_zero\n\n",
 "det_fin_two_of":
 "@[simp]\ntheorem det_fin_two_of (a b c d : R) : Matrix.det !![a, b; c, d] = a * d - b * c :=\n  det_fin_two _\n#align det_fin_two_of det_fin_two_of\n\n",
 "det_fin_two":
 "/-- Determinant of 2x2 matrix -/\ntheorem det_fin_two (A : Matrix (Fin 2) (Fin 2) R) : det A = A 0 0 * A 1 1 - A 0 1 * A 1 0 :=\n  by\n  simp [Matrix.det_succ_row_zero, Fin.sum_univ_succ]\n  ring\n#align det_fin_two det_fin_two\n\n",
 "det_fin_three":
 "/-- Determinant of 3x3 matrix -/\ntheorem det_fin_three (A : Matrix (Fin 3) (Fin 3) R) :\n    det A =\n      A 0 0 * A 1 1 * A 2 2 - A 0 0 * A 1 2 * A 2 1 - A 0 1 * A 1 0 * A 2 2 + A 0 1 * A 1 2 * A 2 0 +\n          A 0 2 * A 1 0 * A 2 1 -\n        A 0 2 * A 1 1 * A 2 0 :=\n  by\n  simp [Matrix.det_succ_row_zero, Fin.sum_univ_succ]\n  ring\n#align det_fin_three det_fin_three\n\n",
 "det_fin_one_of":
 "theorem det_fin_one_of (a : R) : det !![a] = a :=\n  det_fin_one _\n#align det_fin_one_of det_fin_one_of\n\n",
 "det_fin_one":
 "/-- Determinant of 1x1 matrix -/\ntheorem det_fin_one (A : Matrix (Fin 1) (Fin 1) R) : det A = A 0 0 :=\n  det_unique A\n#align det_fin_one det_fin_one\n\n",
 "det_eq_zero_of_row_eq_zero":
 "theorem det_eq_zero_of_row_eq_zero {A : Matrix n n R} (i : n) (h : ∀ j, A i j = 0) : det A = 0 :=\n  (detRowAlternating : AlternatingMap R (n → R) R n).map_coord_zero i (funext h)\n#align det_eq_zero_of_row_eq_zero det_eq_zero_of_row_eq_zero\n\n",
 "det_eq_zero_of_column_eq_zero":
 "theorem det_eq_zero_of_column_eq_zero {A : Matrix n n R} (j : n) (h : ∀ i, A i j = 0) : det A = 0 :=\n  by\n  rw [← det_transpose]\n  exact det_eq_zero_of_row_eq_zero j h\n#align det_eq_zero_of_column_eq_zero det_eq_zero_of_column_eq_zero\n\n",
 "det_eq_one_of_card_eq_zero":
 "theorem det_eq_one_of_card_eq_zero {A : Matrix n n R} (h : Fintype.card n = 0) : det A = 1 :=\n  haveI : IsEmpty n := fintype.card_eq_zero_iff.mp h\n  det_is_empty\n#align det_eq_one_of_card_eq_zero det_eq_one_of_card_eq_zero\n\n",
 "det_eq_of_forall_row_eq_smul_add_pred_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_eq_of_forall_row_eq_smul_add_pred_aux {n : ℕ} (k : Fin (n + 1)) :\n    ∀ (c : Fin n → R) (hc : ∀ i : Fin n, k < i.succ → c i = 0) {M N : Matrix (Fin n.succ) (Fin n.succ) R}\n      (h0 : ∀ j, M 0 j = N 0 j) (hsucc : ∀ (i : Fin n) (j), M i.succ j = N i.succ j + c i * M i.cast_succ j),\n      det M = det N :=\n  by\n  refine' Fin.induction _ (fun k ih => _) k <;> intro c hc M N h0 hsucc\n  · congr\n    ext (i j)\n    refine' Fin.cases (h0 j) (fun i => _) i\n    rw [hsucc, hc i (Fin.succ_pos _), MulZeroClass.zero_mul, add_zero]\n  set M' := update_row M k.succ (N k.succ) with hM'\n  have hM : M = update_row M' k.succ (M' k.succ + «expr • » (c k) (M k.cast_succ)) :=\n    by\n    ext (i j)\n    by_cases hi : i = k.succ\n    · simp [hi, hM', hsucc, update_row_self]\n    rw [update_row_ne hi, hM', update_row_ne hi]\n  have k_ne_succ : k.cast_succ ≠ k.succ := (Fin.castSucc_lt_succ k).ne\n  have M_k : M k.cast_succ = M' k.cast_succ := (update_row_ne k_ne_succ).symm\n  rw [hM, M_k, det_update_row_add_smul_self M' k_ne_succ.symm, ih (Function.update c k 0)]\n  · intro i hi\n    rw [Fin.lt_iff_val_lt_val, Fin.coe_castSucc, Fin.val_succ, Nat.lt_succ_iff] at hi\n    rw [Function.update_apply]\n    split_ifs with hik\n    · rfl\n    exact hc _ (fin.succ_lt_succ_iff.mpr (lt_of_le_of_ne hi (ne.symm hik)))\n  · rwa [hM', update_row_ne (Fin.succ_ne_zero _).symm]\n  intro i j\n  rw [Function.update_apply]\n  split_ifs with hik\n  · rw [MulZeroClass.zero_mul, add_zero, hM', hik, update_row_self]\n  rw [hM', update_row_ne ((Fin.succ_injective _).ne hik), hsucc]\n  by_cases hik2 : k < i\n  · simp [hc i (fin.succ_lt_succ_iff.mpr hik2)]\n  rw [update_row_ne]\n  apply ne_of_lt\n  rwa [Fin.lt_iff_val_lt_val, Fin.coe_castSucc, Fin.val_succ, Nat.lt_succ_iff, ← not_lt]\n#align det_eq_of_forall_row_eq_smul_add_pred_aux det_eq_of_forall_row_eq_smul_add_pred_aux\n\n",
 "det_eq_of_forall_row_eq_smul_add_pred":
 "/-- If you add multiples of previous rows to the next row, the determinant doesn't change. -/\ntheorem det_eq_of_forall_row_eq_smul_add_pred {n : ℕ} {A B : Matrix (Fin (n + 1)) (Fin (n + 1)) R} (c : Fin n → R)\n    (A_zero : ∀ j, A 0 j = B 0 j) (A_succ : ∀ (i : Fin n) (j), A i.succ j = B i.succ j + c i * A i.cast_succ j) :\n    det A = det B :=\n  det_eq_of_forall_row_eq_smul_add_pred_aux (Fin.last _) c (fun i hi => absurd hi (not_lt_of_ge (Fin.le_last _))) A_zero\n    A_succ\n#align det_eq_of_forall_row_eq_smul_add_pred det_eq_of_forall_row_eq_smul_add_pred\n\n",
 "det_eq_of_forall_row_eq_smul_add_const_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem det_eq_of_forall_row_eq_smul_add_const_aux {A B : Matrix n n R} {s : Finset n} :\n    ∀ (c : n → R) (hs : ∀ i, i ∉ s → c i = 0) (k : n) (hk : k ∉ s) (A_eq : ∀ i j, A i j = B i j + c i * B k j),\n      det A = det B :=\n  by\n  revert B\n  refine' s.induction_on _ _\n  · intro A c hs k hk A_eq\n    have : ∀ i, c i = 0 := by\n      intro i\n      specialize hs i\n      contrapose! hs\n      simp [hs]\n    congr\n    ext (i j)\n    rw [A_eq, this, MulZeroClass.zero_mul, add_zero]\n  · intro i s hi ih B c hs k hk A_eq\n    have hAi : A i = B i + «expr • » (c i) (B k) := funext (A_eq i)\n    rw [@ih (update_row B i (A i)) (Function.update c i 0), hAi, det_update_row_add_smul_self]\n    · exact mt (fun h => show k ∈ insert i s from h ▸ Finset.mem_insert_self _ _) hk\n    · intro i' hi'\n      rw [Function.update_apply]\n      split_ifs with hi'i\n      · rfl\n      · exact hs i' fun h => hi' ((finset.mem_insert.mp h).resolve_left hi'i)\n    · exact fun h => hk (Finset.mem_insert_of_mem h)\n    · intro i' j'\n      rw [update_row_apply, Function.update_apply]\n      split_ifs with hi'i\n      · simp [hi'i]\n      rw [A_eq, update_row_ne fun h : k = i => hk <| h ▸ Finset.mem_insert_self k s]\n#align det_eq_of_forall_row_eq_smul_add_const_aux det_eq_of_forall_row_eq_smul_add_const_aux\n\n",
 "det_eq_of_forall_row_eq_smul_add_const":
 "/-- If you add multiples of row `B k` to other rows, the determinant doesn't change. -/\ntheorem det_eq_of_forall_row_eq_smul_add_const {A B : Matrix n n R} (c : n → R) (k : n) (hk : c k = 0)\n    (A_eq : ∀ i j, A i j = B i j + c i * B k j) : det A = det B :=\n  det_eq_of_forall_row_eq_smul_add_const_aux c\n    (fun i =>\n      not_imp_comm.mp fun hi =>\n        Finset.mem_erase.mpr ⟨mt (fun h : i = k => show c i = 0 from h.symm ▸ hk) hi, Finset.mem_univ i⟩)\n    k (Finset.not_mem_erase k Finset.univ) A_eq\n#align det_eq_of_forall_row_eq_smul_add_const det_eq_of_forall_row_eq_smul_add_const\n\n",
 "det_eq_of_forall_col_eq_smul_add_pred":
 "/-- If you add multiples of previous columns to the next columns, the determinant doesn't change. -/\ntheorem det_eq_of_forall_col_eq_smul_add_pred {n : ℕ} {A B : Matrix (Fin (n + 1)) (Fin (n + 1)) R} (c : Fin n → R)\n    (A_zero : ∀ i, A i 0 = B i 0) (A_succ : ∀ (i) (j : Fin n), A i j.succ = B i j.succ + c j * A i j.cast_succ) :\n    det A = det B := by\n  rw [← det_transpose A, ← det_transpose B]\n  exact det_eq_of_forall_row_eq_smul_add_pred c A_zero fun i j => A_succ j i\n#align det_eq_of_forall_col_eq_smul_add_pred det_eq_of_forall_col_eq_smul_add_pred\n\n",
 "det_eq_of_eq_mul_det_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem det_eq_of_eq_mul_det_one {A B : Matrix n n R} (C : Matrix n n R) (hC : det C = 1) (hA : A = matrix.mul B C) :\n    det A = det B :=\n  calc\n    det A = det (matrix.mul B C) := congr_arg _ hA\n    _ = det B * det C := (det_mul _ _)\n    _ = det B := by rw [hC, mul_one]\n    \n#align det_eq_of_eq_mul_det_one det_eq_of_eq_mul_det_one\n\n",
 "det_eq_of_eq_det_one_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem det_eq_of_eq_det_one_mul {A B : Matrix n n R} (C : Matrix n n R) (hC : det C = 1) (hA : A = matrix.mul C B) :\n    det A = det B :=\n  calc\n    det A = det (matrix.mul C B) := congr_arg _ hA\n    _ = det C * det B := (det_mul _ _)\n    _ = det B := by rw [hC, one_mul]\n    \n#align det_eq_of_eq_det_one_mul det_eq_of_eq_det_one_mul\n\n",
 "det_eq_elem_of_subsingleton":
 "theorem det_eq_elem_of_subsingleton [subsingleton n] (A : Matrix n n R) (k : n) : det A = A k k :=\n  by\n  convert det_unique _\n  exact uniqueOfSubsingleton k\n#align det_eq_elem_of_subsingleton det_eq_elem_of_subsingleton\n\n",
 "det_eq_elem_of_card_eq_one":
 "theorem det_eq_elem_of_card_eq_one {A : Matrix n n R} (h : Fintype.card n = 1) (k : n) : det A = A k k :=\n  haveI : subsingleton n := fintype.card_le_one_iff_subsingleton.mp h.le\n  det_eq_elem_of_subsingleton _ _\n#align det_eq_elem_of_card_eq_one det_eq_elem_of_card_eq_one\n\n",
 "det_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n@[simp]\ntheorem det_diagonal {d : n → R} :\n    det (diagonal d) =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (d i) :=\n  by\n  rw [det_apply']\n  refine' (Finset.sum_eq_single 1 _ _).trans _\n  · intro σ h1 h2\n    cases' not_forall.1 (mt Equiv.ext h2) with x h3\n    convert MulZeroClass.mul_zero _\n    apply Finset.prod_eq_zero\n    · change x ∈ _\n      simp\n    exact if_neg h3\n  · simp\n  · simp\n#align det_diagonal det_diagonal\n\n",
 "det_conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem det_conj_transpose [StarRing R] (M : Matrix m m R) : det (matrix.conj_transpose M) = star (det M) :=\n  ((starRingEnd R).map_det _).symm.trans <| congr_arg star M.det_transpose\n#align det_conj_transpose det_conj_transpose\n\n",
 "det_block_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n@[simp]\ntheorem det_block_diagonal {o : Type _} [Fintype o] [DecidableEq o] (M : o → Matrix n n R) :\n    (blockDiagonal M).det =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (M k).det :=\n  by\n  -- Rewrite the determinants as a sum over permutations.\n  simp_rw [det_apply']\n  -- The right hand side is a product of sums, rewrite it as a sum of products.\n  rw [Finset.prod_sum]\n  simp_rw [Finset.mem_univ, Finset.prod_attach_univ, Finset.univ_pi_univ]\n  -- We claim that the only permutations contributing to the sum are those that\n  -- preserve their second component.\n  let preserving_snd : Finset (Equiv.Perm (n × o)) := finset.univ.filter fun σ => ∀ x, (σ x).snd = x.snd\n  have mem_preserving_snd : ∀ {σ : Equiv.Perm (n × o)}, σ ∈ preserving_snd ↔ ∀ x, (σ x).snd = x.snd := fun σ =>\n    finset.mem_filter.trans ⟨fun h => h.2, fun h => ⟨Finset.mem_univ _, h⟩⟩\n  rw [← Finset.sum_subset (Finset.subset_univ preserving_snd) _]\n  -- And that these are in bijection with `o → equiv.perm m`.\n  rw [(Finset.sum_bij\n        (fun (σ : ∀ k : o, k ∈ Finset.univ → Equiv.Perm n) _ => prod_congr_left fun k => σ k (Finset.mem_univ k)) _ _ _\n        _).symm]\n  · intro σ _\n    rw [mem_preserving_snd]\n    rintro ⟨k, x⟩\n    simp only [prod_congr_left_apply]\n  · intro σ _\n    rw [Finset.prod_mul_distrib, ← Finset.univ_product_univ, Finset.prod_product_right]\n    simp only [sign_prod_congr_left, Units.coe_prod, Int.cast_prod, block_diagonal_apply_eq, prod_congr_left_apply]\n  · intro σ σ' _ _ eq\n    ext (x hx k)\n    simp only at eq\n    have :\n      ∀ k x,\n        prod_congr_left (fun k => σ k (Finset.mem_univ _)) (k, x) =\n          prod_congr_left (fun k => σ' k (Finset.mem_univ _)) (k, x) :=\n      fun k x => by rw [Eq]\n    simp only [prod_congr_left_apply, Prod.mk.inj_iff] at this\n    exact (this k x).1\n  · intro σ hσ\n    rw [mem_preserving_snd] at hσ\n    have hσ' : ∀ x, (σ⁻¹ x).snd = x.snd := by\n      intro x\n      conv_rhs => rw [← perm.apply_inv_self σ x, hσ]\n    have mk_apply_eq : ∀ k x, ((σ (x, k)).fst, k) = σ (x, k) :=\n      by\n      intro k x\n      ext\n      · simp only\n      · simp only [hσ]\n    have mk_inv_apply_eq : ∀ k x, ((σ⁻¹ (x, k)).fst, k) = σ⁻¹ (x, k) :=\n      by\n      intro k x\n      conv_lhs => rw [← perm.apply_inv_self σ (x, k)]\n      ext\n      · simp only [apply_inv_self]\n      · simp only [hσ']\n    refine' ⟨fun k _ => ⟨fun x => (σ (x, k)).fst, fun x => (σ⁻¹ (x, k)).fst, _, _⟩, _, _⟩\n    · intro x\n      simp only [mk_apply_eq, inv_apply_self]\n    · intro x\n      simp only [mk_inv_apply_eq, apply_inv_self]\n    · apply Finset.mem_univ\n    · ext ⟨k, x⟩\n      · simp only [coe_fn_mk, prod_congr_left_apply]\n      · simp only [prod_congr_left_apply, hσ]\n  · intro σ _ hσ\n    rw [mem_preserving_snd] at hσ\n    obtain ⟨⟨k, x⟩, hkx⟩ := not_forall.mp hσ\n    rw [Finset.prod_eq_zero (Finset.mem_univ (k, x)), MulZeroClass.mul_zero]\n    rw [← @prod.mk.eta _ _ (σ (k, x)), block_diagonal_apply_ne]\n    exact hkx\n#align det_block_diagonal det_block_diagonal\n\n",
 "det_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprε » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n-- This is what the old definition was. We use it to avoid having to change the old proofs below\ntheorem det_apply' (M : Matrix n n R) :\n    M.det =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («exprε » σ *\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            (M (σ i) i)) :=\n  by simp [det_apply, Units.smul_def]\n#align det_apply' det_apply'\n\n",
 "det_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Chris Hughes, Tim Baanen\n-/\ntheorem det_apply (M : Matrix n n R) :\n    M.det =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («expr • » σ.sign\n          (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            (M (σ i) i))) :=\n  MultilinearMap.alternatization_apply _ M\n#align det_apply det_apply\n\n",
 "coe_det_monoid_hom":
 "@[simp]\ntheorem coe_det_monoid_hom : (detMonoidHom : Matrix n n R → R) = det :=\n  rfl\n#align coe_det_monoid_hom coe_det_monoid_hom\n\n",
 "coe_det_is_empty":
 "@[simp]\ntheorem coe_det_is_empty [IsEmpty n] : (det : Matrix n n R → R) = Function.const _ 1 :=\n  by\n  ext\n  exact det_is_empty\n#align coe_det_is_empty coe_det_is_empty\n\n"}