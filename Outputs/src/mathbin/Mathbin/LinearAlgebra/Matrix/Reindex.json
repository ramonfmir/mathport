{"reindex_linear_equiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\ntheorem reindex_linear_equiv_trans (e₁ : «expr ≃ » m m') (e₂ : «expr ≃ » n n') (e₁' : «expr ≃ » m' m'')\n    (e₂' : «expr ≃ » n' n'') :\n    (reindex_linear_equiv R A e₁ e₂).trans (reindex_linear_equiv R A e₁' e₂') =\n      (reindex_linear_equiv R A (e₁.trans e₁') (e₂.trans e₂') : «expr ≃ₗ[ ] » _ R _) :=\n  by\n  ext\n  rfl\n#align reindex_linear_equiv_trans reindex_linear_equiv_trans\n\n",
 "reindex_linear_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem reindex_linear_equiv_symm (eₘ : «expr ≃ » m m') (eₙ : «expr ≃ » n n') :\n    (reindex_linear_equiv R A eₘ eₙ).symm = reindex_linear_equiv R A eₘ.symm eₙ.symm :=\n  rfl\n#align reindex_linear_equiv_symm reindex_linear_equiv_symm\n\n",
 "reindex_linear_equiv_refl_refl":
 "@[simp]\ntheorem reindex_linear_equiv_refl_refl :\n    reindex_linear_equiv R A (equiv.refl m) (equiv.refl n) = linear_equiv.refl R _ :=\n  linear_equiv.ext fun _ => rfl\n#align reindex_linear_equiv_refl_refl reindex_linear_equiv_refl_refl\n\n",
 "reindex_linear_equiv_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem reindex_linear_equiv_one [decidable_eq m] [decidable_eq m'] [One A] (e : «expr ≃ » m m') :\n    reindex_linear_equiv R A e e (1 : matrix m m A) = 1 :=\n  submatrix_one_equiv e.symm\n#align reindex_linear_equiv_one reindex_linear_equiv_one\n\n",
 "reindex_linear_equiv_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem reindex_linear_equiv_mul [fintype n] [fintype n'] (eₘ : «expr ≃ » m m') (eₙ : «expr ≃ » n n')\n    (eₒ : «expr ≃ » o o') (M : matrix m n A) (N : matrix n o A) :\n    matrix.mul (reindex_linear_equiv R A eₘ eₙ M) (reindex_linear_equiv R A eₙ eₒ N) =\n      reindex_linear_equiv R A eₘ eₒ (matrix.mul M N) :=\n  submatrix_mul_equiv M N _ _ _\n#align reindex_linear_equiv_mul reindex_linear_equiv_mul\n\n",
 "reindex_linear_equiv_comp_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem reindex_linear_equiv_comp_apply (e₁ : «expr ≃ » m m') (e₂ : «expr ≃ » n n') (e₁' : «expr ≃ » m' m'')\n    (e₂' : «expr ≃ » n' n'') (M : matrix m n A) :\n    (reindex_linear_equiv R A e₁' e₂') (reindex_linear_equiv R A e₁ e₂ M) =\n      reindex_linear_equiv R A (e₁.trans e₁') (e₂.trans e₂') M :=\n  submatrix_submatrix _ _ _ _ _\n#align reindex_linear_equiv_comp_apply reindex_linear_equiv_comp_apply\n\n",
 "reindex_linear_equiv_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem reindex_linear_equiv_comp (e₁ : «expr ≃ » m m') (e₂ : «expr ≃ » n n') (e₁' : «expr ≃ » m' m'')\n    (e₂' : «expr ≃ » n' n'') :\n    reindex_linear_equiv R A e₁' e₂' ∘ reindex_linear_equiv R A e₁ e₂ =\n      reindex_linear_equiv R A (e₁.trans e₁') (e₂.trans e₂') :=\n  by\n  rw [← reindex_linear_equiv_trans]\n  rfl\n#align reindex_linear_equiv_comp reindex_linear_equiv_comp\n\n",
 "reindex_linear_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-\nCopyright (c) 2019 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Patrick Massot, Casper Putz, Anne Baanen\n-/\n@[simp]\ntheorem reindex_linear_equiv_apply (eₘ : «expr ≃ » m m') (eₙ : «expr ≃ » n n') (M : matrix m n A) :\n    reindex_linear_equiv R A eₘ eₙ M = reindex eₘ eₙ M :=\n  rfl\n#align reindex_linear_equiv_apply reindex_linear_equiv_apply\n\n",
 "reindex_alg_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem reindex_alg_equiv_symm (e : «expr ≃ » m n) : (reindex_alg_equiv R e).symm = reindex_alg_equiv R e.symm :=\n  rfl\n#align reindex_alg_equiv_symm reindex_alg_equiv_symm\n\n",
 "reindex_alg_equiv_refl":
 "@[simp]\ntheorem reindex_alg_equiv_refl : reindex_alg_equiv R (equiv.refl m) = alg_equiv.refl :=\n  alg_equiv.ext fun _ => rfl\n#align reindex_alg_equiv_refl reindex_alg_equiv_refl\n\n",
 "reindex_alg_equiv_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem reindex_alg_equiv_mul (e : «expr ≃ » m n) (M : matrix m m R) (N : matrix m m R) :\n    reindex_alg_equiv R e (matrix.mul M N) = matrix.mul (reindex_alg_equiv R e M) (reindex_alg_equiv R e N) :=\n  (reindex_alg_equiv R e).map_mul M N\n#align reindex_alg_equiv_mul reindex_alg_equiv_mul\n\n",
 "reindex_alg_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem reindex_alg_equiv_apply (e : «expr ≃ » m n) (M : matrix m m R) : reindex_alg_equiv R e M = reindex e e M :=\n  rfl\n#align reindex_alg_equiv_apply reindex_alg_equiv_apply\n\n",
 "mul_reindex_linear_equiv_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem mul_reindex_linear_equiv_one [fintype n] [decidable_eq o] (e₁ : «expr ≃ » o n) (e₂ : «expr ≃ » o n')\n    (M : matrix m n A) :\n    M.mul (reindex_linear_equiv R A e₁ e₂ 1) = reindex_linear_equiv R A (equiv.refl m) (e₁.symm.trans e₂) M :=\n  haveI := fintype.of_equiv _ e₁.symm\n  mul_submatrix_one _ _ _\n#align mul_reindex_linear_equiv_one mul_reindex_linear_equiv_one\n\n",
 "det_reindex_linear_equiv_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing both indices along the same equivalence preserves the determinant.\n\nFor the `simp` version of this lemma, see `det_submatrix_equiv_self`.\n-/\ntheorem det_reindex_linear_equiv_self [CommRing R] [fintype m] [decidable_eq m] [fintype n] [decidable_eq n]\n    (e : «expr ≃ » m n) (M : matrix m m R) : det (reindex_linear_equiv R R e e M) = det M :=\n  det_reindex_self e M\n#align det_reindex_linear_equiv_self det_reindex_linear_equiv_self\n\n",
 "det_reindex_alg_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing both indices along the same equivalence preserves the determinant.\n\nFor the `simp` version of this lemma, see `det_submatrix_equiv_self`.\n-/\ntheorem det_reindex_alg_equiv [CommRing R] [fintype m] [decidable_eq m] [fintype n] [decidable_eq n] (e : «expr ≃ » m n)\n    (A : matrix m m R) : det (reindex_alg_equiv R e A) = det A :=\n  det_reindex_self e A\n#align det_reindex_alg_equiv det_reindex_alg_equiv\n\n"}