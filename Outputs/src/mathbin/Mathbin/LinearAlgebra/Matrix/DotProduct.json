{"dot_product_std_basis_one":
 "@[simp]\ntheorem dot_product_std_basis_one [DecidableEq n] (v : n → R) (i : n) :\n    dotProduct v (LinearMap.stdBasis R (fun _ => R) i 1) = v i := by rw [dot_product_std_basis_eq_mul, mul_one]\n#align dot_product_std_basis_one dot_product_std_basis_one\n\n",
 "dot_product_std_basis_eq_mul":
 "/-\nCopyright (c) 2019 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Patrick Massot, Casper Putz, Anne Baanen\n-/\n@[simp]\ntheorem dot_product_std_basis_eq_mul [DecidableEq n] (v : n → R) (c : R) (i : n) :\n    dotProduct v (LinearMap.stdBasis R (fun _ => R) i c) = v i * c :=\n  by\n  rw [dot_product, Finset.sum_eq_single i, LinearMap.stdBasis_same]\n  exact fun _ _ hb => by rw [LinearMap.stdBasis_ne _ _ _ _ hb, MulZeroClass.mul_zero]\n  exact fun hi => false.elim (hi <| Finset.mem_univ _)\n#align dot_product_std_basis_eq_mul dot_product_std_basis_eq_mul\n\n",
 "dot_product_star_self_eq_zero":
 "/-- Note that this applies to `ℂ` via `complex.strict_ordered_comm_ring`. -/\n@[simp]\ntheorem dot_product_star_self_eq_zero [partial_order R] [NonUnitalRing R] [StarOrderedRing R] [NoZeroDivisors R]\n    {v : n → R} : dotProduct (star v) v = 0 ↔ v = 0 :=\n  (Finset.sum_eq_zero_iff_of_nonneg fun i _ => (@star_mul_self_nonneg _ _ _ _ (v i) : _)).trans <| by\n    simp [Function.funext_iff, mul_eq_zero]\n#align dot_product_star_self_eq_zero dot_product_star_self_eq_zero\n\n",
 "dot_product_self_star_eq_zero":
 "/-- Note that this applies to `ℂ` via `complex.strict_ordered_comm_ring`. -/\n@[simp]\ntheorem dot_product_self_star_eq_zero [partial_order R] [NonUnitalRing R] [StarOrderedRing R] [NoZeroDivisors R]\n    {v : n → R} : dotProduct v (star v) = 0 ↔ v = 0 :=\n  (Finset.sum_eq_zero_iff_of_nonneg fun i _ => (@star_mul_self_nonneg' _ _ _ _ (v i) : _)).trans <| by\n    simp [Function.funext_iff, mul_eq_zero]\n#align dot_product_self_star_eq_zero dot_product_self_star_eq_zero\n\n",
 "dot_product_self_eq_zero":
 "@[simp]\ntheorem dot_product_self_eq_zero [LinearOrderedRing R] {v : n → R} : dotProduct v v = 0 ↔ v = 0 :=\n  (Finset.sum_eq_zero_iff_of_nonneg fun i _ => mul_self_nonneg (v i)).trans <| by simp [Function.funext_iff]\n#align dot_product_self_eq_zero dot_product_self_eq_zero\n\n",
 "dot_product_eq_zero_iff":
 "theorem dot_product_eq_zero_iff {v : n → R} : (∀ w, dotProduct v w = 0) ↔ v = 0 :=\n  ⟨fun h => dotProduct_eq_zero v h, fun h w => h.symm ▸ zero_dotProduct w⟩\n#align dot_product_eq_zero_iff dot_product_eq_zero_iff\n\n",
 "dot_product_eq_zero":
 "theorem dot_product_eq_zero (v : n → R) (h : ∀ w, dotProduct v w = 0) : v = 0 :=\n  dotProduct_eq _ _ fun u => (h u).symm ▸ (zero_dotProduct u).symm\n#align dot_product_eq_zero dot_product_eq_zero\n\n",
 "dot_product_eq_iff":
 "theorem dot_product_eq_iff {v w : n → R} : (∀ u, dotProduct v u = dotProduct w u) ↔ v = w :=\n  ⟨fun h => dotProduct_eq v w h, fun h _ => h ▸ rfl⟩\n#align dot_product_eq_iff dot_product_eq_iff\n\n",
 "dot_product_eq":
 "theorem dot_product_eq (v w : n → R) (h : ∀ u, dotProduct v u = dotProduct w u) : v = w :=\n  by\n  funext x\n  classical rw [← dot_product_std_basis_one v x, ← dot_product_std_basis_one w x, h]\n#align dot_product_eq dot_product_eq\n\n"}