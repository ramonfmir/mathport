{"minpoly_dvd_charpoly":
 "theorem minpoly_dvd_charpoly {K : Type _} [Field K] (M : matrix n n K) : minpoly K M ∣ M.charpoly :=\n  minpoly.dvd _ _ (aeval_self_charpoly M)\n#align minpoly_dvd_charpoly minpoly_dvd_charpoly\n\n",
 "is_integral":
 "/-\nCopyright (c) 2020 Aaron Anderson, Jalex Stark. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson, Jalex Stark\n-/\ntheorem is_integral : is_integral R M :=\n  ⟨M.charpoly, ⟨charpoly_monic M, aeval_self_charpoly M⟩⟩\n#align is_integral is_integral\n\n",
 "charpoly_left_mul_matrix":
 "/-- The characteristic polynomial of the map `λ x, a * x` is the minimal polynomial of `a`.\n\nIn combination with `det_eq_sign_charpoly_coeff` or `trace_eq_neg_charpoly_coeff`\nand a bit of rewriting, this will allow us to conclude the\nfield norm resp. trace of `x` is the product resp. sum of `x`'s conjugates.\n-/\ntheorem charpoly_left_mul_matrix {S : Type _} [Ring S] [algebra R S] (h : power_basis R S) :\n    (left_mul_matrix h.basis h.gen).charpoly = minpoly R h.gen :=\n  by\n  cases subsingleton_or_nontrivial R; · apply subsingleton.elim\n  apply minpoly.unique' R h.gen (charpoly_monic _)\n  · apply (injective_iff_map_eq_zero (left_mul_matrix _)).mp (left_mul_matrix_injective h.basis)\n    rw [← polynomial.aeval_alg_hom_apply, aeval_self_charpoly]\n  refine' fun q hq => or_iff_not_imp_left.2 fun h0 => _\n  rw [matrix.charpoly_degree_eq_dim, fintype.card_fin] at hq\n  contrapose! hq; exact h.dim_le_degree_of_root h0 hq\n#align charpoly_left_mul_matrix charpoly_left_mul_matrix\n\n"}