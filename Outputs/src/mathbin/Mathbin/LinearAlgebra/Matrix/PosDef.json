{"transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem pos_def.transpose {M : matrix n n ùïú} (hM : M.pos_def) : (matrix.transpose M).pos_def :=\n  by\n  refine' ‚ü®is_hermitian.transpose hM.1, fun x hx => _‚ü©\n  convert hM.2 (star x) (star_ne_zero.2 hx) using 2\n  rw [mul_vec_transpose, matrix.dot_product_mul_vec, star_star, dot_product_comm]\n#align pos_def.transpose pos_def.transpose\n\n",
 "submatrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚áë ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚áë ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉ ¬ª -/\ntheorem pos_semidef.submatrix {M : matrix n n ùïú} (hM : M.pos_semidef) (e : ¬´expr ‚âÉ ¬ª m n) :\n    (M.submatrix e e).pos_semidef := by\n  refine' ‚ü®hM.1.submatrix e, fun x => _‚ü©\n  have : (M.submatrix (¬´expr‚áë ¬ª e) (¬´expr‚áë ¬ª e)).mul_vec x = (M.mul_vec fun i : n => x (e.symm i)) ‚àò e :=\n    by\n    ext i\n    dsimp only [(¬∑ ‚àò ¬∑), mul_vec, dot_product]\n    rw [finset.sum_bij' (fun i _ => e i) _ _ fun i _ => e.symm i] <;>\n      simp only [eq_self_iff_true, imp_true_iff, equiv.symm_apply_apply, finset.mem_univ, submatrix_apply,\n        equiv.apply_symm_apply]\n  rw [this]\n  convert hM.2 fun i => x (e.symm i) using 3\n  unfold dot_product\n  rw [finset.sum_bij' (fun i _ => e i) _ _ fun i _ => e.symm i] <;>\n    simp only [eq_self_iff_true, imp_true_iff, equiv.symm_apply_apply, finset.mem_univ, submatrix_apply,\n      equiv.apply_symm_apply, Pi.star_apply]\n#align pos_semidef.submatrix pos_semidef.submatrix\n\n",
 "pos_semidef_submatrix_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉ ¬ª -/\n@[simp]\ntheorem pos_semidef_submatrix_equiv {M : matrix n n ùïú} (e : ¬´expr ‚âÉ ¬ª m n) :\n    (M.submatrix e e).pos_semidef ‚Üî M.pos_semidef :=\n  ‚ü®fun h => by simpa using h.submatrix e.symm, fun h => h.submatrix _‚ü©\n#align pos_semidef_submatrix_equiv pos_semidef_submatrix_equiv\n\n",
 "pos_semidef":
 "theorem pos_def.pos_semidef {M : matrix n n ùïú} (hM : M.pos_def) : M.pos_semidef :=\n  by\n  refine' ‚ü®hM.1, _‚ü©\n  intro x\n  by_cases hx : x = 0\n  ¬∑ simp only [hx, zero_dot_product, star_zero, is_R_or_C.zero_re']\n  ¬∑ exact le_of_lt (hM.2 x hx)\n#align pos_def.pos_semidef pos_def.pos_semidef\n\n",
 "pos_def_to_quadratic_form'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem pos_def_to_quadratic_form' [decidable_eq n] {M : matrix n n (expr‚Ñù)} (hM : M.pos_def) :\n    M.to_quadratic_form'.pos_def := by\n  intro x hx\n  simp only [to_quadratic_form', bilin_form.to_quadratic_form_apply, matrix.to_bilin'_apply']\n  apply hM.2 x hx\n#align pos_def_to_quadratic_form' pos_def_to_quadratic_form'\n\n",
 "pos_def_to_matrix'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem pos_def_to_matrix' [decidable_eq n] {Q : quadratic_form (expr‚Ñù) (n ‚Üí expr‚Ñù)} (hQ : Q.pos_def) :\n    Q.to_matrix'.pos_def :=\n  by\n  rw [‚Üê to_quadratic_form_associated (expr‚Ñù) Q, ‚Üê bilin_form.to_matrix'.left_inv ((associated_hom _) Q)] at hQ\n  apply matrix.pos_def_of_to_quadratic_form' (is_symm_to_matrix' Q) hQ\n#align pos_def_to_matrix' pos_def_to_matrix'\n\n",
 "pos_def_of_to_quadratic_form'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem pos_def_of_to_quadratic_form' [decidable_eq n] {M : matrix n n (expr‚Ñù)} (hM : M.is_symm)\n    (hMq : M.to_quadratic_form'.pos_def) : M.pos_def :=\n  by\n  refine' ‚ü®hM, fun x hx => _‚ü©\n  simp only [to_quadratic_form', quadratic_form.pos_def, bilin_form.to_quadratic_form_apply, matrix.to_bilin'_apply'] at\n    hMq\n  apply hMq x hx\n#align pos_def_of_to_quadratic_form' pos_def_of_to_quadratic_form'\n\n",
 "pos_def_of_to_matrix'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem pos_def_of_to_matrix' [decidable_eq n] {Q : quadratic_form (expr‚Ñù) (n ‚Üí expr‚Ñù)} (hQ : Q.to_matrix'.pos_def) :\n    Q.pos_def :=\n  by\n  rw [‚Üê to_quadratic_form_associated (expr‚Ñù) Q, ‚Üê bilin_form.to_matrix'.left_inv ((associated_hom _) Q)]\n  apply matrix.pos_def_to_quadratic_form' hQ\n#align pos_def_of_to_matrix' pos_def_of_to_matrix'\n\n",
 "is_hermitian":
 "/-\nCopyright (c) 2022 Alexander Bentkamp. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alexander Bentkamp\n-/\ntheorem pos_def.is_hermitian {M : matrix n n ùïú} (hM : M.pos_def) : M.is_hermitian :=\n  hM.1\n#align pos_def.is_hermitian pos_def.is_hermitian\n\n",
 "det_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem det_pos [decidable_eq n] : 0 < det M :=\n  by\n  rw [hM.is_hermitian.det_eq_prod_eigenvalues]\n  apply finset.prod_pos\n  intro i _\n  rw [hM.is_hermitian.eigenvalues_eq]\n  apply hM.2 _ fun h => _\n  have h_det : (matrix.transpose hM.is_hermitian.eigenvector_matrix).det = 0 :=\n    matrix.det_eq_zero_of_row_eq_zero i fun j => congr_fun h j\n  simpa only [h_det, not_isUnit_zero] using\n    is_unit_det_of_invertible (matrix.transpose hM.is_hermitian.eigenvector_matrix)\n#align det_pos det_pos\n\n"}