{"spectral_theorem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-- *Diagonalization theorem*, *spectral theorem* for matrices; A hermitian matrix can be\ndiagonalized by a change of basis.\n\nFor the spectral theorem on linear maps, see `diagonalization_basis_apply_self_apply`. -/\ntheorem spectral_theorem :\n    matrix.mul hA.eigenvector_matrix_inv A = matrix.mul (diagonal (coe ∘ hA.eigenvalues)) hA.eigenvector_matrix_inv :=\n  by\n  rw [eigenvector_matrix_inv, pi_Lp.basis_to_matrix_basis_fun_mul]\n  ext (i j)\n  have := is_hermitian_iff_is_symmetric.1 hA\n  convert this.diagonalization_basis_apply_self_apply finrank_euclidean_space (euclidean_space.single j 1)\n      ((Fintype.equivOfCardEq (Fintype.card_fin _)).symm i) using\n    1\n  · dsimp only [euclidean_space.single, to_euclidean_lin_pi_Lp_equiv_symm, to_lin'_apply, Matrix.of_apply,\n      is_hermitian.eigenvector_basis]\n    simp_rw [mul_vec_single, mul_one, orthonormal_basis.coe_to_basis_repr_apply, orthonormal_basis.repr_reindex]\n    rfl\n  · simp only [diagonal_mul, (· ∘ ·), eigenvalues]\n    rw [eigenvector_basis, Basis.toMatrix_apply, orthonormal_basis.coe_to_basis_repr_apply,\n      orthonormal_basis.repr_reindex, eigenvalues₀, pi_Lp.basis_fun_apply, pi_Lp.equiv_symm_single]\n#align spectral_theorem spectral_theorem\n\n",
 "eigenvector_matrix_mul_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-\nCopyright (c) 2022 Alexander Bentkamp. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alexander Bentkamp\n-/\ntheorem eigenvector_matrix_mul_inv : matrix.mul hA.eigenvector_matrix hA.eigenvector_matrix_inv = 1 := by\n  apply Basis.toMatrix_mul_toMatrix_flip\n#align eigenvector_matrix_mul_inv eigenvector_matrix_mul_inv\n\n",
 "eigenvector_matrix_inv_apply":
 "theorem eigenvector_matrix_inv_apply (i j : n) : hA.eigenvector_matrix_inv i j = star (hA.eigenvector_basis i j) := by\n  rw [eigenvector_matrix_inv, Basis.toMatrix_apply, orthonormal_basis.coe_to_basis_repr_apply,\n    orthonormal_basis.repr_apply_apply, pi_Lp.basis_fun_apply, pi_Lp.equiv_symm_single,\n    euclidean_space.inner_single_right, one_mul, IsROrC.star_def]\n#align eigenvector_matrix_inv_apply eigenvector_matrix_inv_apply\n\n",
 "eigenvector_matrix_apply":
 "theorem eigenvector_matrix_apply (i j : n) : hA.eigenvector_matrix i j = hA.eigenvector_basis j i := by\n  simp_rw [eigenvector_matrix, Basis.toMatrix_apply, orthonormal_basis.coe_to_basis, pi_Lp.basis_fun_repr]\n#align eigenvector_matrix_apply eigenvector_matrix_apply\n\n",
 "eigenvalues_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.dot_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem eigenvalues_eq (i : n) :\n    hA.eigenvalues i =\n      is_R_or_C.re\n        (matrix.dot_product (star ((matrix.transpose hA.eigenvector_matrix) i))\n          (A.mul_vec ((matrix.transpose hA.eigenvector_matrix) i))) :=\n  by\n  have := hA.spectral_theorem\n  rw [← Matrix.mul_inv_eq_iff_eq_mul_of_invertible] at this\n  have := congr_arg is_R_or_C.re (congr_fun (congr_fun this i) i)\n  rw [diagonal_apply_eq, IsROrC.ofReal_re, inv_eq_left_inv hA.eigenvector_matrix_mul_inv, ←\n    conj_transpose_eigenvector_matrix, mul_mul_apply] at this\n  exact this.symm\n#align eigenvalues_eq eigenvalues_eq\n\n",
 "det_eq_prod_eigenvalues":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/-- The determinant of a hermitian matrix is the product of its eigenvalues. -/\ntheorem det_eq_prod_eigenvalues :\n    det A =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (hA.eigenvalues i) :=\n  by\n  apply mul_left_cancel₀ (det_ne_zero_of_left_inverse (eigenvector_matrix_mul_inv hA))\n  rw [← det_mul, spectral_theorem, det_mul, mul_comm, det_diagonal]\n#align det_eq_prod_eigenvalues det_eq_prod_eigenvalues\n\n",
 "conj_transpose_eigenvector_matrix_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_eigenvector_matrix_inv :\n    matrix.conj_transpose hA.eigenvector_matrix_inv = hA.eigenvector_matrix :=\n  by\n  ext (i j)\n  rw [conj_transpose_apply, eigenvector_matrix_inv_apply, eigenvector_matrix_apply, star_star]\n#align conj_transpose_eigenvector_matrix_inv conj_transpose_eigenvector_matrix_inv\n\n",
 "conj_transpose_eigenvector_matrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem conj_transpose_eigenvector_matrix : matrix.conj_transpose hA.eigenvector_matrix = hA.eigenvector_matrix_inv :=\n  by rw [← conj_transpose_eigenvector_matrix_inv, conj_transpose_conj_transpose]\n#align conj_transpose_eigenvector_matrix conj_transpose_eigenvector_matrix\n\n"}