{"rank_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem rank_diagonal [decidable_eq m] [decidable_eq K] (w : m → K) :\n    rank (diagonal w).to_lin' = fintype.card { i // w i ≠ 0 } :=\n  by\n  have hu : univ ⊆ «expr ᶜ» { i : m | w i = 0 } ∪ { i : m | w i = 0 } := by rw [Set.compl_union_self]\n  have hd : Disjoint { i : m | w i ≠ 0 } { i : m | w i = 0 } := disjoint_compl_left\n  have B₁ := supr_range_std_basis_eq_infi_ker_proj K (fun i : m => K) hd hu (set.to_finite _)\n  have B₂ := @infi_ker_proj_equiv K _ _ (fun i : m => K) _ _ _ _ (by simp <;> infer_instance) hd hu\n  rw [rank, range_diagonal, B₁, ← @dim_fun' K]\n  apply linear_equiv.dim_eq\n  apply B₂\n#align rank_diagonal rank_diagonal\n\n",
 "range_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem range_diagonal [decidable_eq m] (w : m → K) :\n    (diagonal w).to_lin'.range =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (linear_map.std_basis K (fun i => K) i).range :=\n  by\n  dsimp only [mem_set_of_eq]\n  rw [← map_top, ← supr_range_std_basis, map_supr]\n  congr ; funext i\n  rw [← linear_map.range_comp, diagonal_comp_std_basis, ← range_smul']\n#align range_diagonal range_diagonal\n\n",
 "proj_diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2019 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Patrick Massot, Casper Putz, Anne Baanen\n-/\ntheorem proj_diagonal (i : n) (w : n → R) : (proj i).comp (to_lin' (diagonal w)) = «expr • » (w i) (proj i) :=\n  linear_map.ext fun j => mul_vec_diagonal _ _ _\n#align proj_diagonal proj_diagonal\n\n",
 "ker_diagonal_to_lin'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n-- maybe try to relax the universe constraint\ntheorem ker_diagonal_to_lin' [decidable_eq m] (w : m → K) :\n    ker (diagonal w).to_lin' =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (range (linear_map.std_basis K (fun i => K) i)) :=\n  by\n  rw [← comap_bot, ← infi_ker_proj, comap_infi]\n  have := fun i : m => ker_comp (to_lin' (diagonal w)) (proj i)\n  simp only [comap_infi, ← this, proj_diagonal, ker_smul']\n  have : univ ⊆ { i : m | w i = 0 } ∪ «expr ᶜ» { i : m | w i = 0 } := by rw [Set.union_compl_self]\n  exact (supr_range_std_basis_eq_infi_ker_proj K (fun i : m => K) disjoint_compl_right this (set.to_finite _)).symm\n#align ker_diagonal_to_lin' ker_diagonal_to_lin'\n\n",
 "diagonal_to_lin'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem diagonal_to_lin' (w : n → R) :\n    (diagonal w).to_lin' = linear_map.pi fun i => «expr • » (w i) (linear_map.proj i) :=\n  linear_map.ext fun v => funext fun i => mul_vec_diagonal _ _ _\n#align diagonal_to_lin' diagonal_to_lin'\n\n",
 "diagonal_comp_std_basis":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem diagonal_comp_std_basis (w : n → R) (i : n) :\n    (diagonal w).to_lin'.comp (linear_map.std_basis R (fun _ : n => R) i) =\n      «expr • » (w i) (linear_map.std_basis R (fun _ : n => R) i) :=\n  linear_map.ext fun x => (diagonal_mul_vec_single w _ _).trans (Pi.single_smul' i (w i) x)\n#align diagonal_comp_std_basis diagonal_comp_std_basis\n\n"}