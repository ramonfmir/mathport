{"transpose_circulant":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem fin.transpose_circulant : ∀ {n} (v : fin n → α), matrix.transpose (circulant v) = circulant fun i => v (-i)\n  | 0 => by decide\n  | n + 1 => transpose_circulant\n#align fin.transpose_circulant fin.transpose_circulant\n\n",
 "map_circulant":
 "theorem map_circulant [Sub n] (v : n → α) (f : α → β) : (circulant v).map f = circulant fun i => f (v i) :=\n  ext fun _ _ => rfl\n#align map_circulant map_circulant\n\n",
 "conj_transpose_circulant":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem fin.conj_transpose_circulant [Star α] :\n    ∀ {n} (v : fin n → α), matrix.conj_transpose (circulant v) = circulant (star fun i => v (-i))\n  | 0 => by decide\n  | n + 1 => conj_transpose_circulant\n#align fin.conj_transpose_circulant fin.conj_transpose_circulant\n\n",
 "circulant_zero":
 "@[simp]\ntheorem circulant_zero (α n) [Zero α] [Sub n] : circulant 0 = (0 : matrix n n α) :=\n  ext fun _ _ => rfl\n#align circulant_zero circulant_zero\n\n",
 "circulant_sub":
 "theorem circulant_sub [Sub α] [Sub n] (v w : n → α) : circulant (v - w) = circulant v - circulant w :=\n  ext fun _ _ => rfl\n#align circulant_sub circulant_sub\n\n",
 "circulant_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- `k • circulant v` is another circulant matrix `circulant (k • v)`. -/\ntheorem circulant_smul [Sub n] [SMul R α] (k : R) (v : n → α) : circulant («expr • » k v) = «expr • » k (circulant v) :=\n  by ext <;> simp\n#align circulant_smul circulant_smul\n\n",
 "circulant_single_one":
 "@[simp]\ntheorem circulant_single_one (α n) [Zero α] [One α] [decidable_eq n] [add_group n] :\n    circulant (Pi.single 0 1 : n → α) = (1 : matrix n n α) :=\n  by\n  ext (i j)\n  simp [one_apply, Pi.single_apply, sub_eq_zero]\n#align circulant_single_one circulant_single_one\n\n",
 "circulant_single":
 "@[simp]\ntheorem circulant_single (n) [Semiring α] [decidable_eq n] [add_group n] [fintype n] (a : α) :\n    circulant (Pi.single 0 a : n → α) = scalar n a := by\n  ext (i j)\n  simp [Pi.single_apply, one_apply, sub_eq_zero]\n#align circulant_single circulant_single\n\n",
 "circulant_neg":
 "theorem circulant_neg [Neg α] [Sub n] (v : n → α) : circulant (-v) = -circulant v :=\n  ext fun _ _ => rfl\n#align circulant_neg circulant_neg\n\n",
 "circulant_mul_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem fin.circulant_mul_comm [comm_semigroup α] [add_comm_monoid α] :\n    ∀ {n} (v w : fin n → α), matrix.mul (circulant v) (circulant w) = matrix.mul (circulant w) (circulant v)\n  | 0 => by decide\n  | n + 1 => circulant_mul_comm\n#align fin.circulant_mul_comm fin.circulant_mul_comm\n\n",
 "circulant_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\ntheorem fin.circulant_mul [Semiring α] :\n    ∀ {n} (v w : fin n → α), matrix.mul (circulant v) (circulant w) = circulant (mul_vec (circulant v) w)\n  | 0 => by decide\n  | n + 1 => circulant_mul\n#align fin.circulant_mul fin.circulant_mul\n\n",
 "circulant_ite":
 "/-- Note we use `↑i = 0` instead of `i = 0` as `fin 0` has no `0`.\nThis means that we cannot state this with `pi.single` as we did with `matrix.circulant_single`. -/\ntheorem fin.circulant_ite (α) [Zero α] [One α] : ∀ n, circulant (fun i => ite (↑i = 0) 1 0 : fin n → α) = 1\n  | 0 => by decide\n  | n + 1 => by\n    rw [← circulant_single_one]\n    congr with j\n    simp only [Pi.single_apply, Fin.ext_iff]\n    congr\n#align fin.circulant_ite fin.circulant_ite\n\n",
 "circulant_is_symm_iff":
 "theorem fin.circulant_is_symm_iff : ∀ {n} {v : fin n → α}, (circulant v).is_symm ↔ ∀ i, v (-i) = v i\n  | 0 => fun v => by simp [is_symm.ext_iff, is_empty.forall_iff]\n  | n + 1 => fun v => circulant_is_symm_iff\n#align fin.circulant_is_symm_iff fin.circulant_is_symm_iff\n\n",
 "circulant_is_symm_apply":
 "theorem fin.circulant_is_symm_apply {n} {v : fin n → α} (h : (circulant v).is_symm) (i : fin n) : v (-i) = v i :=\n  fin.circulant_is_symm_iff.1 h i\n#align fin.circulant_is_symm_apply fin.circulant_is_symm_apply\n\n",
 "circulant_injective":
 "theorem fin.circulant_injective : ∀ n, injective fun v : fin n → α => circulant v\n  | 0 => by decide\n  | n + 1 => circulant_injective\n#align fin.circulant_injective fin.circulant_injective\n\n",
 "circulant_inj":
 "@[simp]\ntheorem fin.circulant_inj {n} {v w : fin n → α} : circulant v = circulant w ↔ v = w :=\n  (fin.circulant_injective n).eq_iff\n#align fin.circulant_inj fin.circulant_inj\n\n",
 "circulant_col_zero_eq":
 "/-\nCopyright (c) 2021 Lu-Ming Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Lu-Ming Zhang\n-/\ntheorem circulant_col_zero_eq [add_group n] (v : n → α) (i : n) : circulant v i 0 = v i :=\n  congr_arg v (sub_zero _)\n#align circulant_col_zero_eq circulant_col_zero_eq\n\n",
 "circulant_add":
 "theorem circulant_add [Add α] [Sub n] (v w : n → α) : circulant (v + w) = circulant v + circulant w :=\n  ext fun _ _ => rfl\n#align circulant_add circulant_add\n\n"}