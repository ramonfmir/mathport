{"transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem is_symm.transpose {A : Matrix n n α} (h : A.is_symm) : (matrix.transpose A).is_symm :=\n  congr_arg _ h\n#align is_symm.transpose is_symm.transpose\n\n",
 "submatrix":
 "@[simp]\ntheorem is_symm.submatrix {A : Matrix n n α} (h : A.is_symm) (f : m → n) : (A.submatrix f f).is_symm :=\n  (transpose_submatrix _ _ _).trans (h.symm ▸ rfl)\n#align is_symm.submatrix is_symm.submatrix\n\n",
 "sub":
 "@[simp]\ntheorem is_symm.sub {A B : Matrix n n α} [Sub α] (hA : A.is_symm) (hB : B.is_symm) : (A - B).is_symm :=\n  (transpose_sub _ _).trans (hA.symm ▸ hB.symm ▸ rfl)\n#align is_symm.sub is_symm.sub\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem is_symm.smul [SMul R α] {A : Matrix n n α} (h : A.is_symm) (k : R) : («expr • » k A).is_symm :=\n  (transpose_smul _ _).trans (congr_arg _ h)\n#align is_symm.smul is_symm.smul\n\n",
 "neg":
 "@[simp]\ntheorem is_symm.neg [Neg α] {A : Matrix n n α} (h : A.is_symm) : (-A).is_symm :=\n  (transpose_neg _).trans (congr_arg _ h)\n#align is_symm.neg is_symm.neg\n\n",
 "map":
 "@[simp]\ntheorem is_symm.map {A : Matrix n n α} (h : A.is_symm) (f : α → β) : (A.map f).is_symm :=\n  transpose_map.symm.trans (h.symm ▸ rfl)\n#align is_symm.map is_symm.map\n\n",
 "is_symm_zero":
 "@[simp]\ntheorem is_symm_zero [Zero α] : (0 : Matrix n n α).is_symm :=\n  transpose_zero\n#align is_symm_zero is_symm_zero\n\n",
 "is_symm_transpose_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem is_symm_transpose_mul_self [Fintype n] [CommSemiring α] (A : Matrix n n α) :\n    (matrix.mul (matrix.transpose A) A).is_symm :=\n  transpose_mul _ _\n#align is_symm_transpose_mul_self is_symm_transpose_mul_self\n\n",
 "is_symm_transpose_add_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem is_symm_transpose_add_self [AddCommSemigroup α] (A : Matrix n n α) : (matrix.transpose A + A).is_symm :=\n  add_comm _ _\n#align is_symm_transpose_add_self is_symm_transpose_add_self\n\n",
 "is_symm_one":
 "@[simp]\ntheorem is_symm_one [DecidableEq n] [Zero α] [One α] : (1 : Matrix n n α).is_symm :=\n  transpose_one\n#align is_symm_one is_symm_one\n\n",
 "is_symm_mul_transpose_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem is_symm_mul_transpose_self [Fintype n] [CommSemiring α] (A : Matrix n n α) :\n    (matrix.mul A (matrix.transpose A)).is_symm :=\n  transpose_mul _ _\n#align is_symm_mul_transpose_self is_symm_mul_transpose_self\n\n",
 "is_symm_from_blocks_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/-- This is the `iff` version of `matrix.is_symm.from_blocks`. -/\ntheorem is_symm_from_blocks_iff {A : Matrix m m α} {B : Matrix m n α} {C : Matrix n m α} {D : Matrix n n α} :\n    (A.from_blocks B C D).is_symm ↔ A.is_symm ∧ matrix.transpose B = C ∧ matrix.transpose C = B ∧ D.is_symm :=\n  ⟨fun h =>\n    ⟨(congr_arg toBlocks₁₁ h : _), (congr_arg toBlocks₂₁ h : _), (congr_arg toBlocks₁₂ h : _),\n      (congr_arg toBlocks₂₂ h : _)⟩,\n    fun ⟨hA, hBC, hCB, hD⟩ => IsSymm.fromBlocks hA hBC hD⟩\n#align is_symm_from_blocks_iff is_symm_from_blocks_iff\n\n",
 "is_symm_diagonal":
 "/-- The diagonal matrix `diagonal v` is symmetric. -/\n@[simp]\ntheorem is_symm_diagonal [DecidableEq n] [Zero α] (v : n → α) : (diagonal v).is_symm :=\n  diagonal_transpose _\n#align is_symm_diagonal is_symm_diagonal\n\n",
 "is_symm_add_transpose_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem is_symm_add_transpose_self [AddCommSemigroup α] (A : Matrix n n α) : (A + matrix.transpose A).is_symm :=\n  add_comm _ _\n#align is_symm_add_transpose_self is_symm_add_transpose_self\n\n",
 "from_blocks":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/-- A block matrix `A.from_blocks B C D` is symmetric,\n    if `A` and `D` are symmetric and `Bᵀ = C`. -/\ntheorem is_symm.from_blocks {A : Matrix m m α} {B : Matrix m n α} {C : Matrix n m α} {D : Matrix n n α} (hA : A.is_symm)\n    (hBC : matrix.transpose B = C) (hD : D.is_symm) : (A.from_blocks B C D).is_symm :=\n  by\n  have hCB : matrix.transpose C = B := by\n    rw [← hBC]\n    simp\n  unfold Matrix.IsSymm\n  rw [from_blocks_transpose]\n  congr <;> assumption\n#align is_symm.from_blocks is_symm.from_blocks\n\n",
 "ext_iff":
 "/-- A version of `matrix.ext_iff` that unfolds the `matrix.transpose`. -/\ntheorem is_symm.ext_iff {A : Matrix n n α} : A.is_symm ↔ ∀ i j, A j i = A i j :=\n  Matrix.ext_iff.symm\n#align is_symm.ext_iff is_symm.ext_iff\n\n",
 "ext":
 "/-- A version of `matrix.ext` that unfolds the `matrix.transpose`. -/\n@[ext]\ntheorem is_symm.ext {A : Matrix n n α} : (∀ i j, A j i = A i j) → A.is_symm :=\n  Matrix.ext\n#align is_symm.ext is_symm.ext\n\n",
 "eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n/-\nCopyright (c) 2021 Lu-Ming Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Lu-Ming Zhang\n-/\ntheorem is_symm.eq {A : Matrix n n α} (h : A.is_symm) : matrix.transpose A = A :=\n  h\n#align is_symm.eq is_symm.eq\n\n",
 "conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem is_symm.conj_transpose [Star α] {A : Matrix n n α} (h : A.is_symm) : (matrix.conj_transpose A).is_symm :=\n  h.transpose.map _\n#align is_symm.conj_transpose is_symm.conj_transpose\n\n",
 "apply":
 "theorem is_symm.apply {A : Matrix n n α} (h : A.is_symm) (i j : n) : A j i = A i j :=\n  IsSymm.ext_iff.1 h i j\n#align is_symm.apply is_symm.apply\n\n",
 "add":
 "@[simp]\ntheorem is_symm.add {A B : Matrix n n α} [Add α] (hA : A.is_symm) (hB : B.is_symm) : (A + B).is_symm :=\n  (transpose_add _ _).trans (hA.symm ▸ hB.symm ▸ rfl)\n#align is_symm.add is_symm.add\n\n"}