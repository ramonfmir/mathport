{"transpose_mul_self_is_diag_iff_has_orthogonal_cols":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem transpose_mul_self_is_diag_iff_has_orthogonal_cols [Fintype m] [Mul α] [AddCommMonoid α] {A : Matrix m n α} :\n    (matrix.mul (matrix.transpose A) A).is_diag ↔ A.has_orthogonal_cols :=\n  iff.rfl\n#align transpose_mul_self_is_diag_iff_has_orthogonal_cols transpose_mul_self_is_diag_iff_has_orthogonal_cols\n\n",
 "transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem is_diag.transpose [Zero α] {A : Matrix n n α} (ha : A.is_diag) : (matrix.transpose A).is_diag := fun i j h =>\n  ha h.symm\n#align is_diag.transpose is_diag.transpose\n\n",
 "submatrix":
 "theorem is_diag.submatrix [Zero α] {A : Matrix n n α} (ha : A.is_diag) {f : m → n} (hf : injective f) :\n    (A.submatrix f f).is_diag := fun i j h => ha (hf.ne h)\n#align is_diag.submatrix is_diag.submatrix\n\n",
 "sub":
 "theorem is_diag.sub [AddGroup α] {A B : Matrix n n α} (ha : A.is_diag) (hb : B.is_diag) : (A - B).is_diag :=\n  by\n  intro i j h\n  simp [ha h, hb h]\n#align is_diag.sub is_diag.sub\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_diag.smul [Monoid R] [AddMonoid α] [DistribMulAction R α] (k : R) {A : Matrix n n α} (ha : A.is_diag) :\n    («expr • » k A).is_diag := by\n  intro i j h\n  simp [ha h]\n#align is_diag.smul is_diag.smul\n\n",
 "neg":
 "theorem is_diag.neg [AddGroup α] {A : Matrix n n α} (ha : A.is_diag) : (-A).is_diag :=\n  by\n  intro i j h\n  simp [ha h]\n#align is_diag.neg is_diag.neg\n\n",
 "mul_transpose_self_is_diag_iff_has_orthogonal_rows":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\ntheorem mul_transpose_self_is_diag_iff_has_orthogonal_rows [Fintype n] [Mul α] [AddCommMonoid α] {A : Matrix m n α} :\n    (matrix.mul A (matrix.transpose A)).is_diag ↔ A.has_orthogonal_rows :=\n  iff.rfl\n#align mul_transpose_self_is_diag_iff_has_orthogonal_rows mul_transpose_self_is_diag_iff_has_orthogonal_rows\n\n",
 "map":
 "theorem is_diag.map [Zero α] [Zero β] {A : Matrix n n α} (ha : A.is_diag) {f : α → β} (hf : f 0 = 0) :\n    (A.map f).is_diag := by\n  intro i j h\n  simp [ha h, hf]\n#align is_diag.map is_diag.map\n\n",
 "kronecker":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.kronecker_map.mul -/\n/-- `(A ⊗ B).is_diag` if both `A` and `B` are diagonal. -/\ntheorem is_diag.kronecker [MulZeroClass α] {A : Matrix m m α} {B : Matrix n n α} (hA : A.is_diag) (hB : B.is_diag) :\n    (matrix.kronecker_map.mul A B).is_diag := by\n  rintro ⟨a, b⟩ ⟨c, d⟩ h\n  simp only [Prod.mk.inj_iff, ne.def, not_and_or] at h\n  cases' h with hac hbd\n  · simp [hA hac]\n  · simp [hB hbd]\n#align is_diag.kronecker is_diag.kronecker\n\n",
 "is_symm":
 "theorem is_diag.is_symm [Zero α] {A : Matrix n n α} (h : A.is_diag) : A.is_symm :=\n  by\n  ext (i j)\n  by_cases g : i = j; · rw [g]\n  simp [h g, h (ne.symm g)]\n#align is_diag.is_symm is_diag.is_symm\n\n",
 "is_diag_zero":
 "/-- Every zero matrix is diagonal. -/\n@[simp]\ntheorem is_diag_zero [Zero α] : (0 : Matrix n n α).is_diag := fun i j h => rfl\n#align is_diag_zero is_diag_zero\n\n",
 "is_diag_transpose_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.transpose -/\n@[simp]\ntheorem is_diag_transpose_iff [Zero α] {A : Matrix n n α} : (matrix.transpose A).is_diag ↔ A.is_diag :=\n  ⟨is_diag.transpose, is_diag.transpose⟩\n#align is_diag_transpose_iff is_diag_transpose_iff\n\n",
 "is_diag_smul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem is_diag_smul_one (n) [Semiring α] [DecidableEq n] (k : α) : («expr • » k (1 : Matrix n n α)).is_diag :=\n  is_diag_one.smul k\n#align is_diag_smul_one is_diag_smul_one\n\n",
 "is_diag_one":
 "/-- Every identity matrix is diagonal. -/\n@[simp]\ntheorem is_diag_one [DecidableEq n] [Zero α] [One α] : (1 : Matrix n n α).is_diag := fun i j => one_apply_ne\n#align is_diag_one is_diag_one\n\n",
 "is_diag_of_subsingleton":
 "/-- Every matrix indexed by a subsingleton is diagonal. -/\ntheorem is_diag_of_subsingleton [Zero α] [subsingleton n] (A : Matrix n n α) : A.is_diag := fun i j h =>\n  (h <| subsingleton.elim i j).elim\n#align is_diag_of_subsingleton is_diag_of_subsingleton\n\n",
 "is_diag_neg_iff":
 "@[simp]\ntheorem is_diag_neg_iff [AddGroup α] {A : Matrix n n α} : (-A).is_diag ↔ A.is_diag :=\n  ⟨fun ha i j h => neg_eq_zero.1 (ha h), is_diag.neg⟩\n#align is_diag_neg_iff is_diag_neg_iff\n\n",
 "is_diag_iff_diagonal_diag":
 "/-- `matrix.is_diag.diagonal_diag` as an iff. -/\ntheorem is_diag_iff_diagonal_diag [Zero α] [DecidableEq n] (A : Matrix n n α) : A.is_diag ↔ diagonal (diag A) = A :=\n  ⟨is_diag.diagonal_diag, fun hd => hd ▸ is_diag_diagonal (diag A)⟩\n#align is_diag_iff_diagonal_diag is_diag_iff_diagonal_diag\n\n",
 "is_diag_from_blocks_iff":
 "/-- This is the `iff` version of `matrix.is_diag.from_blocks`. -/\ntheorem is_diag_from_blocks_iff [Zero α] {A : Matrix m m α} {B : Matrix m n α} {C : Matrix n m α} {D : Matrix n n α} :\n    (A.from_blocks B C D).is_diag ↔ A.is_diag ∧ B = 0 ∧ C = 0 ∧ D.is_diag :=\n  by\n  constructor\n  · intro h\n    refine' ⟨fun i j hij => _, ext fun i j => _, ext fun i j => _, fun i j hij => _⟩\n    · exact h (sum.inl_injective.ne hij)\n    · exact h Sum.inl_ne_inr\n    · exact h Sum.inr_ne_inl\n    · exact h (sum.inr_injective.ne hij)\n  · rintro ⟨ha, hb, hc, hd⟩\n    convert is_diag.from_blocks ha hd\n#align is_diag_from_blocks_iff is_diag_from_blocks_iff\n\n",
 "is_diag_diagonal":
 "/-\nCopyright (c) 2021 Lu-Ming Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Lu-Ming Zhang\n-/\n@[simp]\ntheorem is_diag_diagonal [Zero α] [DecidableEq n] (d : n → α) : (diagonal d).is_diag := fun i j =>\n  Matrix.diagonal_apply_ne _\n#align is_diag_diagonal is_diag_diagonal\n\n",
 "is_diag_conj_transpose_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\n@[simp]\ntheorem is_diag_conj_transpose_iff [Semiring α] [StarRing α] {A : Matrix n n α} :\n    (matrix.conj_transpose A).is_diag ↔ A.is_diag :=\n  ⟨fun ha => by\n    convert ha.conj_transpose\n    simp, is_diag.conj_transpose⟩\n#align is_diag_conj_transpose_iff is_diag_conj_transpose_iff\n\n",
 "from_blocks_of_is_symm":
 "/-- A symmetric block matrix `A.from_blocks B C D` is diagonal\n    if  `A` and `D` are diagonal and `B` is `0`. -/\ntheorem is_diag.from_blocks_of_is_symm [Zero α] {A : Matrix m m α} {C : Matrix n m α} {D : Matrix n n α}\n    (h : (A.from_blocks 0 C D).is_symm) (ha : A.is_diag) (hd : D.is_diag) : (A.from_blocks 0 C D).is_diag :=\n  by\n  rw [← (is_symm_from_blocks_iff.1 h).2.1]\n  exact ha.from_blocks hd\n#align is_diag.from_blocks_of_is_symm is_diag.from_blocks_of_is_symm\n\n",
 "from_blocks":
 "/-- The block matrix `A.from_blocks 0 0 D` is diagonal if `A` and `D` are diagonal. -/\ntheorem is_diag.from_blocks [Zero α] {A : Matrix m m α} {D : Matrix n n α} (ha : A.is_diag) (hd : D.is_diag) :\n    (A.from_blocks 0 0 D).is_diag := by\n  rintro (i | i) (j | j) hij\n  · exact ha (ne_of_apply_ne _ hij)\n  · rfl\n  · rfl\n  · exact hd (ne_of_apply_ne _ hij)\n#align is_diag.from_blocks is_diag.from_blocks\n\n",
 "diagonal_diag":
 "/-- Diagonal matrices are generated by the `matrix.diagonal` of their `matrix.diag`. -/\ntheorem is_diag.diagonal_diag [Zero α] [DecidableEq n] {A : Matrix n n α} (h : A.is_diag) : diagonal (diag A) = A :=\n  ext fun i j => by\n    obtain rfl | hij := Decidable.eq_or_ne i j\n    · rw [diagonal_apply_eq, diag]\n    · rw [diagonal_apply_ne _ hij, h hij]\n#align is_diag.diagonal_diag is_diag.diagonal_diag\n\n",
 "conj_transpose":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.conj_transpose -/\ntheorem is_diag.conj_transpose [Semiring α] [StarRing α] {A : Matrix n n α} (ha : A.is_diag) :\n    (matrix.conj_transpose A).is_diag :=\n  ha.transpose.map (star_zero _)\n#align is_diag.conj_transpose is_diag.conj_transpose\n\n",
 "add":
 "theorem is_diag.add [AddZeroClass α] {A B : Matrix n n α} (ha : A.is_diag) (hb : B.is_diag) : (A + B).is_diag :=\n  by\n  intro i j h\n  simp [ha h, hb h]\n#align is_diag.add is_diag.add\n\n"}