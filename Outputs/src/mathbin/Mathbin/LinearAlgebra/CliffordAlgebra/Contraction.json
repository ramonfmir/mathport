{"zero_proof":
 "/-- Auxiliary lemma used as an argument to `clifford_algebra.change_form` -/\ntheorem change_form.zero_proof : (0 : bilin_form R M).to_quadratic_form = Q - Q :=\n  (sub_self _).symm\n#align change_form.zero_proof change_form.zero_proof\n\n",
 "neg_proof":
 "/-- Auxiliary lemma used as an argument to `clifford_algebra.change_form` -/\ntheorem change_form.neg_proof : (-B).to_quadratic_form = Q - Q' :=\n  (congr_arg has_neg.neg h).trans <| neg_sub _ _\n#align change_form.neg_proof change_form.neg_proof\n\n",
 "contract_right_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n@[simp]\ntheorem contract_right_ι (x : M) : «expr ⌊ » (ι Q x) d = algebra_map R _ (d x) := by\n  rw [contract_right_eq, reverse_ι, contract_left_ι, reverse.commutes]\n#align contract_right_ι contract_right_ι\n\n",
 "contract_right_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n@[simp]\ntheorem contract_right_one : «expr ⌊ » (1 : clifford_algebra Q) d = 0 := by\n  simpa only [map_one] using contract_right_algebra_map Q d 1\n#align contract_right_one contract_right_one\n\n",
 "contract_right_mul_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/-- This is [grinberg_clifford_2016][] Theorem 12  -/\ntheorem contract_right_mul_ι (a : M) (b : clifford_algebra Q) :\n    «expr ⌊ » (b * ι Q a) d = «expr • » (d a) b - «expr ⌊ » b d * ι Q a := by\n  rw [contract_right_eq, reverse.map_mul, reverse_ι, contract_left_ι_mul, map_sub, map_smul, reverse_reverse,\n    reverse.map_mul, reverse_ι, contract_right_eq]\n#align contract_right_mul_ι contract_right_mul_ι\n\n",
 "contract_right_mul_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\ntheorem contract_right_mul_algebra_map (a : clifford_algebra Q) (r : R) :\n    «expr ⌊ » (a * algebra_map _ _ r) d = «expr ⌊ » a d * algebra_map _ _ r := by\n  rw [← algebra.commutes, contract_right_algebra_map_mul, algebra.commutes]\n#align contract_right_mul_algebra_map contract_right_mul_algebra_map\n\n",
 "contract_right_eq":
 "theorem contract_right_eq (x : clifford_algebra Q) : contract_right x d = reverse (contract_left d <| reverse x) :=\n  rfl\n#align contract_right_eq contract_right_eq\n\n",
 "contract_right_contract_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/-- This is [grinberg_clifford_2016][] Theorem 13 -/\ntheorem contract_right_contract_right (x : clifford_algebra Q) : «expr ⌊ » («expr ⌊ » x d) d = 0 := by\n  rw [contract_right_eq, contract_right_eq, reverse_reverse, contract_left_contract_left, map_zero]\n#align contract_right_contract_right contract_right_contract_right\n\n",
 "contract_right_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/-- This is [grinberg_clifford_2016][] Theorem 14 -/\ntheorem contract_right_comm (x : clifford_algebra Q) : «expr ⌊ » («expr ⌊ » x d) d' = -«expr ⌊ » («expr ⌊ » x d') d :=\n  by\n  rw [contract_right_eq, contract_right_eq, contract_right_eq, contract_right_eq, reverse_reverse, reverse_reverse,\n    contract_left_comm, map_neg]\n#align contract_right_comm contract_right_comm\n\n",
 "contract_right_algebra_map_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\ntheorem contract_right_algebra_map_mul (r : R) (b : clifford_algebra Q) :\n    «expr ⌊ » (algebra_map _ _ r * b) d = algebra_map _ _ r * «expr ⌊ » b d := by\n  rw [← algebra.smul_def, linear_map.map_smul₂, algebra.smul_def]\n#align contract_right_algebra_map_mul contract_right_algebra_map_mul\n\n",
 "contract_right_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌊ » -/\n@[simp]\ntheorem contract_right_algebra_map (r : R) : «expr ⌊ » (algebra_map R (clifford_algebra Q) r) d = 0 := by\n  rw [contract_right_eq, reverse.commutes, contract_left_algebra_map, map_zero]\n#align contract_right_algebra_map contract_right_algebra_map\n\n",
 "contract_left_ι_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/-- This is [grinberg_clifford_2016][] Theorem 6  -/\ntheorem contract_left_ι_mul (a : M) (b : clifford_algebra Q) :\n    «expr ⌋ » d (ι Q a * b) = «expr • » (d a) b - ι Q a * «expr ⌋ » d b :=\n  foldr'_ι_mul _ _ _ _ _ _\n#align contract_left_ι_mul contract_left_ι_mul\n\n",
 "contract_left_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n@[simp]\ntheorem contract_left_ι (x : M) : «expr ⌋ » d (ι Q x) = algebra_map R _ (d x) :=\n  (foldr'_ι _ _ _ _ _).trans <| by\n    simp_rw [contract_left_aux_apply_apply, mul_zero, sub_zero, algebra.algebra_map_eq_smul_one]\n#align contract_left_ι contract_left_ι\n\n",
 "contract_left_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n@[simp]\ntheorem contract_left_one : «expr ⌋ » d (1 : clifford_algebra Q) = 0 := by\n  simpa only [map_one] using contract_left_algebra_map Q d 1\n#align contract_left_one contract_left_one\n\n",
 "contract_left_mul_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\ntheorem contract_left_mul_algebra_map (a : clifford_algebra Q) (r : R) :\n    «expr ⌋ » d (a * algebra_map _ _ r) = «expr ⌋ » d a * algebra_map _ _ r := by\n  rw [← algebra.commutes, contract_left_algebra_map_mul, algebra.commutes]\n#align contract_left_mul_algebra_map contract_left_mul_algebra_map\n\n",
 "contract_left_contract_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/-- This is [grinberg_clifford_2016][] Theorem 7 -/\ntheorem contract_left_contract_left (x : clifford_algebra Q) : «expr ⌋ » d («expr ⌋ » d x) = 0 :=\n  by\n  induction' x using clifford_algebra.left_induction with r x y hx hy m x hx\n  · simp_rw [contract_left_algebra_map, map_zero]\n  · rw [map_add, map_add, hx, hy, add_zero]\n  · rw [contract_left_ι_mul, map_sub, contract_left_ι_mul, hx, linear_map.map_smul, mul_zero, sub_zero, sub_self]\n#align contract_left_contract_left contract_left_contract_left\n\n",
 "contract_left_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/-- This is [grinberg_clifford_2016][] Theorem 8 -/\ntheorem contract_left_comm (x : clifford_algebra Q) : «expr ⌋ » d («expr ⌋ » d' x) = -«expr ⌋ » d' («expr ⌋ » d x) :=\n  by\n  induction' x using clifford_algebra.left_induction with r x y hx hy m x hx\n  · simp_rw [contract_left_algebra_map, map_zero, neg_zero]\n  · rw [map_add, map_add, map_add, map_add, hx, hy, neg_add]\n  · simp only [contract_left_ι_mul, map_sub, linear_map.map_smul]\n    rw [neg_sub, sub_sub_eq_add_sub, hx, mul_neg, ← sub_eq_add_neg]\n#align contract_left_comm contract_left_comm\n\n",
 "contract_left_aux_contract_left_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\ntheorem contract_left_aux_contract_left_aux (v : M) (x : clifford_algebra Q) (fx : clifford_algebra Q) :\n    contract_left_aux Q d v (ι Q v * x, contract_left_aux Q d v (x, fx)) = «expr • » (Q v) fx :=\n  by\n  simp only [contract_left_aux_apply_apply]\n  rw [mul_sub, ← mul_assoc, ι_sq_scalar, ← algebra.smul_def, ← sub_add, mul_smul_comm, sub_self, zero_add]\n#align contract_left_aux_contract_left_aux contract_left_aux_contract_left_aux\n\n",
 "contract_left_algebra_map_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\ntheorem contract_left_algebra_map_mul (r : R) (b : clifford_algebra Q) :\n    «expr ⌋ » d (algebra_map _ _ r * b) = algebra_map _ _ r * «expr ⌋ » d b := by\n  rw [← algebra.smul_def, map_smul, algebra.smul_def]\n#align contract_left_algebra_map_mul contract_left_algebra_map_mul\n\n",
 "contract_left_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n@[simp]\ntheorem contract_left_algebra_map (r : R) : «expr ⌋ » d (algebra_map R (clifford_algebra Q) r) = 0 :=\n  (foldr'_algebra_map _ _ _ _ _).trans <| smul_zero _\n#align contract_left_algebra_map contract_left_algebra_map\n\n",
 "change_form_ι_mul_ι":
 "theorem change_form_ι_mul_ι (m₁ m₂ : M) :\n    change_form h (ι _ m₁ * ι _ m₂) = ι _ m₁ * ι _ m₂ - algebra_map _ _ (B m₁ m₂) := by\n  rw [change_form_ι_mul, change_form_ι, contract_left_ι, bilin_form.to_lin_apply]\n#align change_form_ι_mul_ι change_form_ι_mul_ι\n\n",
 "change_form_ι_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\ntheorem change_form_ι_mul (m : M) (x : clifford_algebra Q) :\n    change_form h (ι _ m * x) = ι _ m * change_form h x - «expr ⌋ » (bilin_form.to_lin B m) (change_form h x) :=\n  (foldr_mul _ _ _ _ _ _).trans <| by rw [foldr_ι]; rfl\n#align change_form_ι_mul change_form_ι_mul\n\n",
 "change_form_ι":
 "@[simp]\ntheorem change_form_ι (m : M) : change_form h (ι _ m) = ι _ m :=\n  (foldr_ι _ _ _ _ _).trans <| eq.symm <| by rw [change_form_aux_apply_apply, mul_one, contract_left_one, sub_zero]\n#align change_form_ι change_form_ι\n\n",
 "change_form_self_apply":
 "theorem change_form_self_apply (x : clifford_algebra Q) : change_form change_form.zero_proof x = x :=\n  by\n  induction' x using clifford_algebra.left_induction with r x y hx hy m x hx\n  · simp_rw [change_form_algebra_map]\n  · rw [map_add, hx, hy]\n  · rw [change_form_ι_mul, hx, map_zero, linear_map.zero_apply, map_zero, linear_map.zero_apply, sub_zero]\n#align change_form_self_apply change_form_self_apply\n\n",
 "change_form_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem change_form_self :\n    change_form change_form.zero_proof = (linear_map.id : «expr →ₗ[ ] » (clifford_algebra Q) R _) :=\n  linear_map.ext <| change_form_self_apply\n#align change_form_self change_form_self\n\n",
 "change_form_one":
 "@[simp]\ntheorem change_form_one : change_form h (1 : clifford_algebra Q) = 1 := by simpa using change_form_algebra_map h (1 : R)\n#align change_form_one change_form_one\n\n",
 "change_form_equiv_symm":
 "@[simp]\ntheorem change_form_equiv_symm : (change_form_equiv h).symm = change_form_equiv (change_form.neg_proof h) :=\n  linear_equiv.ext fun x => (rfl : change_form _ x = change_form _ x)\n#align change_form_equiv_symm change_form_equiv_symm\n\n",
 "change_form_contract_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⌋ » -/\n/-- Theorem 23 of [grinberg_clifford_2016][] -/\ntheorem change_form_contract_left (d : module.dual R M) (x : clifford_algebra Q) :\n    change_form h («expr ⌋ » d x) = «expr ⌋ » d (change_form h x) :=\n  by\n  induction' x using clifford_algebra.left_induction with r x y hx hy m x hx\n  · simp only [contract_left_algebra_map, change_form_algebra_map, map_zero]\n  · rw [map_add, map_add, map_add, map_add, hx, hy]\n  · simp only [contract_left_ι_mul, change_form_ι_mul, map_sub, linear_map.map_smul]\n    rw [← hx, contract_left_comm, ← sub_add, sub_neg_eq_add, ← hx]\n#align change_form_contract_left change_form_contract_left\n\n",
 "change_form_comp_change_form":
 "theorem change_form_comp_change_form :\n    (change_form h').comp (change_form h) = change_form (change_form.add_proof h h') :=\n  linear_map.ext <| change_form_change_form _ _\n#align change_form_comp_change_form change_form_comp_change_form\n\n",
 "change_form_change_form":
 "/-- This is [bourbaki2007][] $9 Lemma 3. -/\ntheorem change_form_change_form (x : clifford_algebra Q) :\n    change_form h' (change_form h x) = change_form (change_form.add_proof h h') x :=\n  by\n  induction' x using clifford_algebra.left_induction with r x y hx hy m x hx\n  · simp_rw [change_form_algebra_map]\n  · rw [map_add, map_add, map_add, hx, hy]\n  ·\n    rw [change_form_ι_mul, map_sub, change_form_ι_mul, change_form_ι_mul, hx, sub_sub, map_add, linear_map.add_apply,\n      map_add, linear_map.add_apply, change_form_contract_left, hx, add_comm (_ : clifford_algebra Q'')]\n#align change_form_change_form change_form_change_form\n\n",
 "change_form_aux_change_form_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- TODO:\nlemma contract_right_contract_left (x : clifford_algebra Q) : (d ⌋ x) ⌊ d' = d ⌋ (x ⌊ d') :=\n-/\ntheorem change_form_aux_change_form_aux (B : bilin_form R M) (v : M) (x : clifford_algebra Q) :\n    change_form_aux Q B v (change_form_aux Q B v x) = «expr • » (Q v - B v v) x :=\n  by\n  simp only [change_form_aux_apply_apply]\n  rw [mul_sub, ← mul_assoc, ι_sq_scalar, map_sub, contract_left_ι_mul, ← sub_add, sub_sub_sub_comm, ← algebra.smul_def,\n    bilin_form.to_lin_apply, sub_self, sub_zero, contract_left_contract_left, add_zero, sub_smul]\n#align change_form_aux_change_form_aux change_form_aux_change_form_aux\n\n",
 "change_form_algebra_map":
 "@[simp]\ntheorem change_form_algebra_map (r : R) : change_form h (algebra_map R _ r) = algebra_map R _ r :=\n  (foldr_algebra_map _ _ _ _ _).trans <| eq.symm <| algebra.algebra_map_eq_smul_one r\n#align change_form_algebra_map change_form_algebra_map\n\n",
 "associated_neg_proof":
 "theorem change_form.associated_neg_proof [Invertible (2 : R)] : (-Q).associated.to_quadratic_form = 0 - Q := by\n  simp [quadratic_form.to_quadratic_form_associated]\n#align change_form.associated_neg_proof change_form.associated_neg_proof\n\n",
 "add_proof":
 "/-- Auxiliary lemma used as an argument to `clifford_algebra.change_form` -/\ntheorem change_form.add_proof : (B + B').to_quadratic_form = Q'' - Q :=\n  (congr_arg₂ (· + ·) h h').trans <| sub_add_sub_cancel' _ _ _\n#align change_form.add_proof change_form.add_proof\n\n"}