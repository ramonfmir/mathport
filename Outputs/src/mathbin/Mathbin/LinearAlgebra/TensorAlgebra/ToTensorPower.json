{"to_tensor_algebra_tprod":
 "/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n@[simp]\ntheorem to_tensor_algebra_tprod {n} (x : Fin n → M) :\n    tensor_power.to_tensor_algebra (pi_tensor_product.tprod R x) = tensor_algebra.tprod R M n x :=\n  pi_tensor_product.lift.tprod _\n#align to_tensor_algebra_tprod to_tensor_algebra_tprod\n\n",
 "to_tensor_algebra_ghas_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem to_tensor_algebra_ghas_one :\n    (@graded_monoid.ghas_one.one _ (fun n => (tensor_power R n) M) _ _).to_tensor_algebra = 1 :=\n  tensor_power.to_tensor_algebra_tprod _\n#align to_tensor_algebra_ghas_one to_tensor_algebra_ghas_one\n\n",
 "to_tensor_algebra_ghas_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem to_tensor_algebra_ghas_mul {i j} (a : (tensor_power R i) M) (b : (tensor_power R j) M) :\n    (@graded_monoid.ghas_mul.mul _ (fun n => (tensor_power R n) M) _ _ _ _ a b).to_tensor_algebra =\n      a.to_tensor_algebra * b.to_tensor_algebra :=\n  by\n  -- change `a` and `b` to `tprod R a` and `tprod R b`\n  rw [tensor_power.ghas_mul_eq_coe_linear_map, ← LinearMap.compr₂_apply, ← @LinearMap.mul_apply' R, ←\n    LinearMap.compl₂_apply, ← LinearMap.comp_apply]\n  refine' LinearMap.congr_fun (LinearMap.congr_fun _ a) b\n  clear a b\n  ext (a b)\n  simp only [LinearMap.compr₂_apply, LinearMap.mul_apply', LinearMap.compl₂_apply, LinearMap.comp_apply,\n    LinearMap.compMultilinearMap_apply, pi_tensor_product.lift.tprod, tensor_power.tprod_mul_tprod,\n    tensor_power.to_tensor_algebra_tprod, tensor_algebra.tprod_apply, ← ghas_mul_eq_coe_linear_map]\n  refine' Eq.trans _ List.prod_append\n  congr\n  rw [← List.map_ofFn _ (tensor_algebra.ι R), ← List.map_ofFn _ (tensor_algebra.ι R), ←\n    List.map_ofFn _ (tensor_algebra.ι R), ← list.map_append, List.ofFn_fin_append]\n#align to_tensor_algebra_ghas_mul to_tensor_algebra_ghas_mul\n\n",
 "to_tensor_algebra_galgebra_to_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem to_tensor_algebra_galgebra_to_fun (r : R) :\n    (@direct_sum.galgebra.to_fun _ R (fun n => (tensor_power R n) M) _ _ _ _ _ _ _ r).to_tensor_algebra =\n      algebraMap _ _ r :=\n  by\n  rw [tensor_power.galgebra_to_fun_def, tensor_power.algebra_map₀_eq_smul_one, LinearMap.map_smul,\n    tensor_power.to_tensor_algebra_ghas_one, Algebra.algebraMap_eq_smul_one]\n#align to_tensor_algebra_galgebra_to_fun to_tensor_algebra_galgebra_to_fun\n\n",
 "to_direct_sum_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem to_direct_sum_ι (x : M) :\n    to_direct_sum (ι R x) =\n      DirectSum.of (fun n => (tensor_power R n) M) _ (pi_tensor_product.tprod R fun _ : Fin 1 => x) :=\n  tensor_algebra.lift_ι_apply _ _\n#align to_direct_sum_ι to_direct_sum_ι\n\n",
 "to_direct_sum_tensor_power_tprod":
 "theorem to_direct_sum_tensor_power_tprod {n} (x : Fin n → M) :\n    to_direct_sum (tprod R M n x) = DirectSum.of _ n (pi_tensor_product.tprod R x) :=\n  by\n  rw [tprod_apply, AlgHom.map_list_prod, List.map_ofFn, Function.comp]\n  simp_rw [to_direct_sum_ι]\n  dsimp only\n  rw [direct_sum.list_prod_of_fn_of_eq_dprod]\n  apply direct_sum.of_eq_of_graded_monoid_eq\n  rw [GradedMonoid.mk_list_dProd]\n  rw [tensor_power.list_prod_graded_monoid_mk_single]\n#align to_direct_sum_tensor_power_tprod to_direct_sum_tensor_power_tprod\n\n",
 "to_direct_sum_of_direct_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem to_direct_sum_of_direct_sum\n    (x :\n      direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\"\n        ((tensor_power R n) M)) :\n    (of_direct_sum x).to_direct_sum = x :=\n  AlgHom.congr_fun to_direct_sum_comp_of_direct_sum x\n#align to_direct_sum_of_direct_sum to_direct_sum_of_direct_sum\n\n",
 "to_direct_sum_comp_of_direct_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\ntheorem to_direct_sum_comp_of_direct_sum :\n    to_direct_sum.comp of_direct_sum =\n      AlgHom.id R\n        (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\"\n          ((tensor_power R n) M)) :=\n  by\n  ext\n  simp [DirectSum.lof_eq_of, -tprod_apply, to_direct_sum_tensor_power_tprod]\n#align to_direct_sum_comp_of_direct_sum to_direct_sum_comp_of_direct_sum\n\n",
 "of_direct_sum_to_direct_sum":
 "@[simp]\ntheorem of_direct_sum_to_direct_sum (x : tensor_algebra R M) : of_direct_sum x.to_direct_sum = x :=\n  AlgHom.congr_fun of_direct_sum_comp_to_direct_sum x\n#align of_direct_sum_to_direct_sum of_direct_sum_to_direct_sum\n\n",
 "of_direct_sum_of_tprod":
 "@[simp]\ntheorem of_direct_sum_of_tprod {n} (x : Fin n → M) :\n    of_direct_sum (DirectSum.of _ n (pi_tensor_product.tprod R x)) = tprod R M n x :=\n  (DirectSum.toAddMonoid_of _ _ _).trans (tensor_power.to_tensor_algebra_tprod _)\n#align of_direct_sum_of_tprod of_direct_sum_of_tprod\n\n",
 "of_direct_sum_comp_to_direct_sum":
 "theorem of_direct_sum_comp_to_direct_sum : of_direct_sum.comp to_direct_sum = AlgHom.id R (tensor_algebra R M) :=\n  by\n  ext\n  simp [DirectSum.lof_eq_of, tprod_apply]\n#align of_direct_sum_comp_to_direct_sum of_direct_sum_comp_to_direct_sum\n\n",
 "mk_reindex_fin_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem mk_reindex_fin_cast {n m : ℕ} (h : n = m) (x : (tensor_power R n) M) :\n    GradedMonoid.mk m (pi_tensor_product.reindex R M (Fin.cast h).to_equiv x) = GradedMonoid.mk n x := by\n  rw [Fin.cast_to_equiv, mk_reindex_cast h]\n#align mk_reindex_fin_cast mk_reindex_fin_cast\n\n",
 "mk_reindex_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n@[simp]\ntheorem mk_reindex_cast {n m : ℕ} (h : n = m) (x : (tensor_power R n) M) :\n    GradedMonoid.mk m (pi_tensor_product.reindex R M (Equiv.cast <| congr_arg Fin h) x) = GradedMonoid.mk n x :=\n  Eq.symm (pi_tensor_product.graded_monoid_eq_of_reindex_cast h rfl)\n#align mk_reindex_cast mk_reindex_cast\n\n",
 "list_prod_graded_monoid_mk_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_power -/\n/-- The product of tensor products made of a single vector is the same as a single product of\nall the vectors. -/\ntheorem _root_.tensor_power.list_prod_graded_monoid_mk_single (n : ℕ) (x : Fin n → M) :\n    ((List.finRange n).map fun a =>\n          (GradedMonoid.mk _ (pi_tensor_product.tprod R fun i : Fin 1 => x a) :\n            GradedMonoid fun n => (tensor_power R n) M)).prod =\n      GradedMonoid.mk n (pi_tensor_product.tprod R x) :=\n  by\n  refine' Fin.consInduction _ _ x <;> clear x\n  · rw [List.finRange_zero, List.map_nil, List.prod_nil]\n    rfl\n  · intro n x₀ x ih\n    rw [List.finRange_succ_eq_map, list.map_cons, List.prod_cons, list.map_map, Function.comp]\n    simp_rw [Fin.cons_zero, Fin.cons_succ]\n    rw [ih, GradedMonoid.mk_mul_mk, tensor_power.tprod_mul_tprod]\n    refine' tensor_power.graded_monoid_eq_of_cast (add_comm _ _) _\n    dsimp only [GradedMonoid.mk]\n    rw [tensor_power.cast_tprod]\n    simp_rw [Fin.append_left_eq_cons, Function.comp]\n    congr 1 with i\n    congr 1\n    rw [Fin.cast_trans, Fin.cast_refl, OrderIso.refl_apply]\n#align tensor_power.list_prod_graded_monoid_mk_single tensor_power.list_prod_graded_monoid_mk_single\n\n"}