{"tunnel_aux_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n-- (This doesn't work over a semiring: we need to use that `submodule R M` is a modular lattice,\n-- which requires cancellation.)\ntheorem tunnel_aux_injective (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f)\n    (Kφ : ΣK : submodule R M, «expr ≃ₗ[ ] » K R M) : injective (tunnel_aux f Kφ) :=\n  (subtype.val_injective.comp Kφ.2.symm.injective).comp i\n#align tunnel_aux_injective tunnel_aux_injective\n\n",
 "tailings_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem tailings_zero (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) : tailings f i 0 = tailing f i 0 := by\n  simp [tailings]\n#align tailings_zero tailings_zero\n\n",
 "tailings_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem tailings_succ (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) (n : ℕ) :\n    tailings f i (n + 1) = «expr ⊔ » (tailings f i n) (tailing f i (n + 1)) := by simp [tailings]\n#align tailings_succ tailings_succ\n\n",
 "tailings_disjoint_tunnel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem tailings_disjoint_tunnel (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) (n : ℕ) :\n    Disjoint (tailings f i n) (tunnel f i (n + 1)).of_dual :=\n  by\n  induction' n with n ih\n  · simp only [tailings_zero]\n    apply tailing_disjoint_tunnel_succ\n  · simp only [tailings_succ]\n    refine' Disjoint.disjoint_sup_left_of_disjoint_sup_right _ _\n    apply tailing_disjoint_tunnel_succ\n    apply Disjoint.mono_right _ ih\n    apply tailing_sup_tunnel_succ_le_tunnel\n#align tailings_disjoint_tunnel tailings_disjoint_tunnel\n\n",
 "tailings_disjoint_tailing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem tailings_disjoint_tailing (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) (n : ℕ) :\n    Disjoint (tailings f i n) (tailing f i (n + 1)) :=\n  Disjoint.mono_right (tailing_le_tunnel f i _) (tailings_disjoint_tunnel f i _)\n#align tailings_disjoint_tailing tailings_disjoint_tailing\n\n",
 "tailing_sup_tunnel_succ_le_tunnel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem tailing_sup_tunnel_succ_le_tunnel (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) (n : ℕ) :\n    «expr ⊔ » (tailing f i n) (tunnel f i (n + 1)).of_dual ≤ (tunnel f i n).of_dual :=\n  by\n  dsimp [tailing, tunnel, tunnel', tunnel_aux]\n  rw [← submodule.map_sup, sup_comm, submodule.fst_sup_snd, submodule.map_comp, submodule.map_comp]\n  apply submodule.map_subtype_le\n#align tailing_sup_tunnel_succ_le_tunnel tailing_sup_tunnel_succ_le_tunnel\n\n",
 "tailing_le_tunnel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n-- Even though we have `noncomputable theory`,\n-- we get an error without another `noncomputable` here.\ntheorem tailing_le_tunnel (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) (n : ℕ) :\n    tailing f i n ≤ (tunnel f i n).of_dual := by\n  dsimp [tailing, tunnel_aux]\n  rw [submodule.map_comp, submodule.map_comp]\n  apply submodule.map_subtype_le\n#align tailing_le_tunnel tailing_le_tunnel\n\n",
 "tailing_disjoint_tunnel_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem tailing_disjoint_tunnel_succ (f : «expr →ₗ[ ] » (M × N) R M) (i : injective f) (n : ℕ) :\n    Disjoint (tailing f i n) (tunnel f i (n + 1)).of_dual :=\n  by\n  rw [disjoint_iff]\n  dsimp [tailing, tunnel, tunnel']\n  rw [submodule.map_inf_eq_map_inf_comap, submodule.comap_map_eq_of_injective (tunnel_aux_injective _ i _), inf_comm,\n    submodule.fst_inf_snd, submodule.map_bot]\n#align tailing_disjoint_tunnel_succ tailing_disjoint_tunnel_succ\n\n",
 "sup_range_inl_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem sup_range_inl_inr : «expr ⊔ » (inl R M M₂).range (inr R M M₂).range = «expr⊤» :=\n  IsCompl.sup_eq_top is_compl_range_inl_inr\n#align sup_range_inl_inr sup_range_inl_inr\n\n",
 "sup_eq_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem sup_eq_range (p q : submodule R M) : «expr ⊔ » p q = (p.subtype.coprod q.subtype).range :=\n  submodule.ext fun x => by simp [submodule.mem_sup, SetLike.exists]\n#align sup_eq_range sup_eq_range\n\n",
 "span_inl_union_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem span_inl_union_inr {s : set M} {t : set M₂} :\n    span R («expr '' » (inl R M M₂) s ∪ «expr '' » (inr R M M₂) t) = (span R s).prod (span R t) := by\n  rw [span_union, prod_eq_sup_map, ← span_image, ← span_image]\n#align span_inl_union_inr span_inl_union_inr\n\n",
 "snd_surjective":
 "theorem snd_surjective : function.surjective (snd R M M₂) := fun x => ⟨(0, x), rfl⟩\n#align snd_surjective snd_surjective\n\n",
 "snd_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem snd_prod (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M R M₃) : (snd R M₂ M₃).comp (prod f g) = g := by\n  ext <;> rfl\n#align snd_prod snd_prod\n\n",
 "snd_map_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem snd_map_snd : (submodule.snd R M M₂).map (linear_map.snd R M M₂) = «expr⊤» := by tidy\n#align snd_map_snd snd_map_snd\n\n",
 "snd_map_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem snd_map_fst : (submodule.snd R M M₂).map (linear_map.fst R M M₂) = «expr⊥» :=\n  by\n  tidy\n  exact 0\n#align snd_map_fst snd_map_fst\n\n",
 "snd_eq_coprod":
 "theorem snd_eq_coprod : snd R M M₂ = coprod 0 linear_map.id := by ext <;> simp\n#align snd_eq_coprod snd_eq_coprod\n\n",
 "snd_apply":
 "@[simp]\ntheorem snd_apply (x : M × M₂) : snd R M M₂ x = x.2 :=\n  rfl\n#align snd_apply snd_apply\n\n",
 "skew_prod_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem skew_prod_symm_apply (f : «expr →ₗ[ ] » M R M₄) (x) :\n    (e₁.skew_prod e₂ f).symm x = (e₁.symm x.1, e₂.symm (x.2 - f (e₁.symm x.1))) :=\n  rfl\n#align skew_prod_symm_apply skew_prod_symm_apply\n\n",
 "skew_prod_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem skew_prod_apply (f : «expr →ₗ[ ] » M R M₄) (x) : e₁.skew_prod e₂ f x = (e₁ x.1, e₂ x.2 + f x.1) :=\n  rfl\n#align skew_prod_apply skew_prod_apply\n\n",
 "range_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem range_snd : (snd R M M₂).range = «expr⊤» := by rw [range_eq_map, ← prod_top, prod_map_snd]\n#align range_snd range_snd\n\n",
 "range_prod_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem range_prod_le (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M R M₃) :\n    range (prod f g) ≤ (range f).prod (range g) :=\n  by\n  simp only [SetLike.le_def, prod_apply, mem_range, SetLike.mem_coe, mem_prod, exists_imp]\n  rintro _ x rfl\n  exact ⟨⟨x, rfl⟩, ⟨x, rfl⟩⟩\n#align range_prod_le range_prod_le\n\n",
 "range_prod_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- If the union of the kernels `ker f` and `ker g` spans the domain, then the range of\n`prod f g` is equal to the product of `range f` and `range g`. -/\ntheorem range_prod_eq {f : «expr →ₗ[ ] » M R M₂} {g : «expr →ₗ[ ] » M R M₃} (h : «expr ⊔ » (ker f) (ker g) = «expr⊤») :\n    range (prod f g) = (range f).prod (range g) :=\n  by\n  refine' le_antisymm (f.range_prod_le g) _\n  simp only [SetLike.le_def, prod_apply, mem_range, SetLike.mem_coe, mem_prod, exists_imp, and_imp, prod.forall,\n    pi.prod]\n  rintro _ _ x rfl y rfl\n  simp only [prod.mk.inj_iff, ← sub_mem_ker_iff]\n  have : y - x ∈ «expr ⊔ » (ker f) (ker g) := by simp only [h, mem_top]\n  rcases mem_sup.1 this with ⟨x', hx', y', hy', H⟩\n  refine' ⟨x' + x, _, _⟩\n  · simp only [mem_ker.mp hx', map_add, zero_add]\n  · simp [← eq_sub_iff_add_eq.1 H, map_add, add_left_inj, self_eq_add_right, mem_ker.mp hy']\n#align range_prod_eq range_prod_eq\n\n",
 "range_inr":
 "theorem range_inr : range (inr R M M₂) = ker (fst R M M₂) :=\n  by\n  ext x\n  simp only [mem_ker, mem_range]\n  constructor\n  · rintro ⟨y, rfl⟩\n    rfl\n  · intro h\n    exact ⟨x.snd, Prod.ext h.symm rfl⟩\n#align range_inr range_inr\n\n",
 "range_inl":
 "theorem range_inl : range (inl R M M₂) = ker (snd R M M₂) :=\n  by\n  ext x\n  simp only [mem_ker, mem_range]\n  constructor\n  · rintro ⟨y, rfl⟩\n    rfl\n  · intro h\n    exact ⟨x.fst, Prod.ext rfl h.symm⟩\n#align range_inl range_inl\n\n",
 "range_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem range_fst : (fst R M M₂).range = «expr⊤» := by rw [range_eq_map, ← prod_top, prod_map_fst]\n#align range_fst range_fst\n\n",
 "range_coprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem range_coprod (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) :\n    (f.coprod g).range = «expr ⊔ » f.range g.range :=\n  submodule.ext fun x => by simp [mem_sup]\n#align range_coprod range_coprod\n\n",
 "prod_symm":
 "theorem prod_symm : (e₁.prod e₂).symm = e₁.symm.prod e₂.symm :=\n  rfl\n#align prod_symm prod_symm\n\n",
 "prod_map_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem prod_map_zero : (0 : «expr →ₗ[ ] » M R M₂).prod_map (0 : «expr →ₗ[ ] » M₃ R M₄) = 0 :=\n  rfl\n#align prod_map_zero prod_map_zero\n\n",
 "prod_map_snd":
 "@[simp]\ntheorem prod_map_snd : (prod p q).map (snd R M M₂) = q := by ext x <;> simp [(⟨0, zero_mem _⟩ : ∃ x, x ∈ p)]\n#align prod_map_snd prod_map_snd\n\n",
 "prod_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem prod_map_smul [Module S M₃] [Module S M₄] [SMulCommClass R S M₃] [SMulCommClass R S M₄] (s : S)\n    (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₄) :\n    prod_map («expr • » s f) («expr • » s g) = «expr • » s (prod_map f g) :=\n  rfl\n#align prod_map_smul prod_map_smul\n\n",
 "prod_map_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem prod_map_one : (1 : «expr →ₗ[ ] » M R M).prod_map (1 : «expr →ₗ[ ] » M₂ R M₂) = 1 :=\n  linear_map.ext fun _ => prod.mk.eta\n#align prod_map_one prod_map_one\n\n",
 "prod_map_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem prod_map_mul (f₁₂ : «expr →ₗ[ ] » M R M) (f₂₃ : «expr →ₗ[ ] » M R M) (g₁₂ : «expr →ₗ[ ] » M₂ R M₂)\n    (g₂₃ : «expr →ₗ[ ] » M₂ R M₂) : f₂₃.prod_map g₂₃ * f₁₂.prod_map g₁₂ = (f₂₃ * f₁₂).prod_map (g₂₃ * g₁₂) :=\n  rfl\n#align prod_map_mul prod_map_mul\n\n",
 "prod_map_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem prod_map_id : (id : «expr →ₗ[ ] » M R M).prod_map (id : «expr →ₗ[ ] » M₂ R M₂) = id :=\n  linear_map.ext fun _ => prod.mk.eta\n#align prod_map_id prod_map_id\n\n",
 "prod_map_fst":
 "@[simp]\ntheorem prod_map_fst : (prod p q).map (fst R M M₂) = p := by ext x <;> simp [(⟨0, zero_mem _⟩ : ∃ x, x ∈ q)]\n#align prod_map_fst prod_map_fst\n\n",
 "prod_map_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\ntheorem prod_map_comp (f₁₂ : «expr →ₗ[ ] » M R M₂) (f₂₃ : «expr →ₗ[ ] » M₂ R M₃) (g₁₂ : «expr →ₗ[ ] » M₄ R M₅)\n    (g₂₃ : «expr →ₗ[ ] » M₅ R M₆) :\n    «expr ∘ₗ » (f₂₃.prod_map g₂₃) (f₁₂.prod_map g₁₂) = («expr ∘ₗ » f₂₃ f₁₂).prod_map («expr ∘ₗ » g₂₃ g₁₂) :=\n  rfl\n#align prod_map_comp prod_map_comp\n\n",
 "prod_map_comap_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem prod_map_comap_prod (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M₃ R M₄) (S : submodule R M₂)\n    (S' : submodule R M₄) : (submodule.prod S S').comap (linear_map.prod_map f g) = (S.comap f).prod (S'.comap g) :=\n  SetLike.coe_injective <| Set.preimage_prod_map_prod f g _ _\n#align prod_map_comap_prod prod_map_comap_prod\n\n",
 "prod_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem prod_map_apply (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₄) (x) : f.prod_map g x = (f x.1, g x.2) :=\n  rfl\n#align prod_map_apply prod_map_apply\n\n",
 "prod_map_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem prod_map_add (f₁ : «expr →ₗ[ ] » M R M₃) (f₂ : «expr →ₗ[ ] » M R M₃) (g₁ : «expr →ₗ[ ] » M₂ R M₄)\n    (g₂ : «expr →ₗ[ ] » M₂ R M₄) : (f₁ + f₂).prod_map (g₁ + g₂) = f₁.prod_map g₁ + f₂.prod_map g₂ :=\n  rfl\n#align prod_map_add prod_map_add\n\n",
 "prod_le_iff":
 "theorem prod_le_iff {p₁ : submodule R M} {p₂ : submodule R M₂} {q : submodule R (M × M₂)} :\n    p₁.prod p₂ ≤ q ↔ map (linear_map.inl R M M₂) p₁ ≤ q ∧ map (linear_map.inr R M M₂) p₂ ≤ q :=\n  by\n  constructor\n  · intro h\n    constructor\n    · rintro _ ⟨x, hx, rfl⟩\n      apply h\n      exact ⟨hx, zero_mem p₂⟩\n    · rintro _ ⟨x, hx, rfl⟩\n      apply h\n      exact ⟨zero_mem p₁, hx⟩\n  · rintro ⟨hH, hK⟩ ⟨x1, x2⟩ ⟨h1, h2⟩\n    have h1' : (linear_map.inl R _ _) x1 ∈ q := by\n      apply hH\n      simpa using h1\n    have h2' : (linear_map.inr R _ _) x2 ∈ q := by\n      apply hK\n      simpa using h2\n    simpa using add_mem h1' h2'\n#align prod_le_iff prod_le_iff\n\n",
 "prod_ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem prod_ext_iff {f g : «expr →ₗ[ ] » (M × M₂) R M₃} :\n    f = g ↔ f.comp (inl _ _ _) = g.comp (inl _ _ _) ∧ f.comp (inr _ _ _) = g.comp (inr _ _ _) :=\n  (coprod_equiv ℕ).symm.injective.eq_iff.symm.trans prod.ext_iff\n#align prod_ext_iff prod_ext_iff\n\n",
 "prod_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- Split equality of linear maps from a product into linear maps over each component, to allow `ext`\nto apply lemmas specific to `M →ₗ M₃` and `M₂ →ₗ M₃`.\n\nSee note [partially-applied ext lemmas]. -/\n@[ext]\ntheorem prod_ext {f g : «expr →ₗ[ ] » (M × M₂) R M₃} (hl : f.comp (inl _ _ _) = g.comp (inl _ _ _))\n    (hr : f.comp (inr _ _ _) = g.comp (inr _ _ _)) : f = g :=\n  prod_ext_iff.2 ⟨hl, hr⟩\n#align prod_ext prod_ext\n\n",
 "prod_eq_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem prod_eq_top_iff {p₁ : submodule R M} {p₂ : submodule R M₂} :\n    p₁.prod p₂ = «expr⊤» ↔ p₁ = «expr⊤» ∧ p₂ = «expr⊤» := by\n  simp only [eq_top_iff, le_prod_iff, ← (gc_map_comap _).le_iff_le, map_top, range_fst, range_snd]\n#align prod_eq_top_iff prod_eq_top_iff\n\n",
 "prod_eq_sup_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem prod_eq_sup_map (p : submodule R M) (q : submodule R M₂) :\n    p.prod q = «expr ⊔ » (p.map (linear_map.inl R M M₂)) (q.map (linear_map.inr R M M₂)) := by\n  rw [← map_coprod_prod, coprod_inl_inr, map_id]\n#align prod_eq_sup_map prod_eq_sup_map\n\n",
 "prod_eq_inf_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem prod_eq_inf_comap (p : submodule R M) (q : submodule R M₂) :\n    p.prod q = «expr ⊓ » (p.comap (linear_map.fst R M M₂)) (q.comap (linear_map.snd R M M₂)) :=\n  submodule.ext fun x => iff.rfl\n#align prod_eq_inf_comap prod_eq_inf_comap\n\n",
 "prod_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem prod_eq_bot_iff {p₁ : submodule R M} {p₂ : submodule R M₂} :\n    p₁.prod p₂ = «expr⊥» ↔ p₁ = «expr⊥» ∧ p₂ = «expr⊥» := by\n  simp only [eq_bot_iff, prod_le_iff, (gc_map_comap _).le_iff_le, comap_bot, ker_inl, ker_inr]\n#align prod_eq_bot_iff prod_eq_bot_iff\n\n",
 "prod_comap_inr":
 "@[simp]\ntheorem prod_comap_inr : (prod p q).comap (inr R M M₂) = q := by ext <;> simp\n#align prod_comap_inr prod_comap_inr\n\n",
 "prod_comap_inl":
 "@[simp]\ntheorem prod_comap_inl : (prod p q).comap (inl R M M₂) = p := by ext <;> simp\n#align prod_comap_inl prod_comap_inl\n\n",
 "prod_apply":
 "@[simp]\ntheorem prod_apply (p) : e₁.prod e₂ p = (e₁ p.1, e₂ p.2) :=\n  rfl\n#align prod_apply prod_apply\n\n",
 "pair_fst_snd":
 "@[simp]\ntheorem pair_fst_snd : prod (fst R M M₂) (snd R M M₂) = linear_map.id :=\n  fun_like.coe_injective pi.prod_fst_snd\n#align pair_fst_snd pair_fst_snd\n\n",
 "mem_graph_iff":
 "@[simp]\ntheorem mem_graph_iff (x : M × M₂) : x ∈ f.graph ↔ x.2 = f x.1 :=\n  iff.rfl\n#align mem_graph_iff mem_graph_iff\n\n",
 "map_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem map_inr : q.map (inr R M M₂) = prod («expr⊥») q := by ext ⟨x, y⟩ <;> simp [and_left_comm, eq_comm]\n#align map_inr map_inr\n\n",
 "map_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem map_inl : p.map (inl R M M₂) = prod p («expr⊥») :=\n  by\n  ext ⟨x, y⟩\n  simp only [and_left_comm, eq_comm, mem_map, prod.mk.inj_iff, inl_apply, mem_bot, exists_eq_left', mem_prod]\n#align map_inl map_inl\n\n",
 "map_coprod_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem map_coprod_prod (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) (p : submodule R M)\n    (q : submodule R M₂) : map (coprod f g) (p.prod q) = «expr ⊔ » (map f p) (map g q) :=\n  by\n  refine' le_antisymm _ (sup_le (map_le_iff_le_comap.2 _) (map_le_iff_le_comap.2 _))\n  · rw [SetLike.le_def]\n    rintro _ ⟨x, ⟨h₁, h₂⟩, rfl⟩\n    exact mem_sup.2 ⟨_, ⟨_, h₁, rfl⟩, _, ⟨_, h₂, rfl⟩, rfl⟩\n  · exact fun x hx => ⟨(x, 0), by simp [hx]⟩\n  · exact fun x hx => ⟨(0, x), by simp [hx]⟩\n#align map_coprod_prod map_coprod_prod\n\n",
 "le_prod_iff":
 "theorem le_prod_iff {p₁ : submodule R M} {p₂ : submodule R M₂} {q : submodule R (M × M₂)} :\n    q ≤ p₁.prod p₂ ↔ map (linear_map.fst R M M₂) q ≤ p₁ ∧ map (linear_map.snd R M M₂) q ≤ p₂ :=\n  by\n  constructor\n  · intro h\n    constructor\n    · rintro x ⟨⟨y1, y2⟩, ⟨hy1, rfl⟩⟩\n      exact (h hy1).1\n    · rintro x ⟨⟨y1, y2⟩, ⟨hy1, rfl⟩⟩\n      exact (h hy1).2\n  · rintro ⟨hH, hK⟩ ⟨x1, x2⟩ h\n    exact ⟨hH ⟨_, h, rfl⟩, hK ⟨_, h, rfl⟩⟩\n#align le_prod_iff le_prod_iff\n\n",
 "ker_snd":
 "theorem ker_snd : ker (snd R M M₂) = range (inl R M M₂) :=\n  eq.symm <| range_inl R M M₂\n#align ker_snd ker_snd\n\n",
 "ker_prod_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem ker_prod_map (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M₃ R M₄) :\n    (linear_map.prod_map f g).ker = submodule.prod f.ker g.ker :=\n  by\n  dsimp only [ker]\n  rw [← prod_map_comap_prod, submodule.prod_bot]\n#align ker_prod_map ker_prod_map\n\n",
 "ker_prod_ker_le_ker_coprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem ker_prod_ker_le_ker_coprod {M₂ : Type _} [add_comm_group M₂] [Module R M₂] {M₃ : Type _} [add_comm_group M₃]\n    [Module R M₃] (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) : (ker f).prod (ker g) ≤ ker (f.coprod g) :=\n  by\n  rintro ⟨y, z⟩\n  simp (config := { contextual := true })\n#align ker_prod_ker_le_ker_coprod ker_prod_ker_le_ker_coprod\n\n",
 "ker_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem ker_prod (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M R M₃) : ker (prod f g) = «expr ⊓ » (ker f) (ker g) :=\n  by rw [ker, ← prod_bot, comap_prod_prod] <;> rfl\n#align ker_prod ker_prod\n\n",
 "ker_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem ker_inr : (inr R M M₂).ker = «expr⊥» := by rw [ker, ← prod_bot, prod_comap_inr]\n#align ker_inr ker_inr\n\n",
 "ker_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem ker_inl : (inl R M M₂).ker = «expr⊥» := by rw [ker, ← prod_bot, prod_comap_inl]\n#align ker_inl ker_inl\n\n",
 "ker_fst":
 "theorem ker_fst : ker (fst R M M₂) = range (inr R M M₂) :=\n  eq.symm <| range_inr R M M₂\n#align ker_fst ker_fst\n\n",
 "ker_coprod_of_disjoint_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem ker_coprod_of_disjoint_range {M₂ : Type _} [add_comm_group M₂] [Module R M₂] {M₃ : Type _} [add_comm_group M₃]\n    [Module R M₃] (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) (hd : Disjoint f.range g.range) :\n    ker (f.coprod g) = (ker f).prod (ker g) :=\n  by\n  apply le_antisymm _ (ker_prod_ker_le_ker_coprod f g)\n  rintro ⟨y, z⟩ h\n  simp only [mem_ker, mem_prod, coprod_apply] at h⊢\n  have : f y ∈ «expr ⊓ » f.range g.range :=\n    by\n    simp only [true_and_iff, mem_range, mem_inf, exists_apply_eq_apply]\n    use -z\n    rwa [eq_comm, map_neg, ← sub_eq_zero, sub_neg_eq_add]\n  rw [hd.eq_bot, mem_bot] at this\n  rw [this] at h\n  simpa [this] using h\n#align ker_coprod_of_disjoint_range ker_coprod_of_disjoint_range\n\n",
 "is_compl_range_inl_inr":
 "theorem is_compl_range_inl_inr : IsCompl (inl R M M₂).range (inr R M M₂).range :=\n  by\n  constructor\n  · rw [disjoint_def]\n    rintro ⟨_, _⟩ ⟨x, hx⟩ ⟨y, hy⟩\n    simp only [prod.ext_iff, inl_apply, inr_apply, mem_bot] at hx hy⊢\n    exact ⟨hy.1.symm, hx.2.symm⟩\n  · rw [codisjoint_iff_le_sup]\n    rintro ⟨x, y⟩ -\n    simp only [mem_sup, mem_range, exists_prop]\n    refine' ⟨(x, 0), ⟨x, rfl⟩, (0, y), ⟨y, rfl⟩, _⟩\n    simp\n#align is_compl_range_inl_inr is_compl_range_inl_inr\n\n",
 "inr_map_mul":
 "theorem inr_map_mul (b₁ b₂ : B) : linear_map.inr R A B (b₁ * b₂) = linear_map.inr R A B b₁ * linear_map.inr R A B b₂ :=\n  Prod.ext (by simp) rfl\n#align inr_map_mul inr_map_mul\n\n",
 "inr_injective":
 "theorem inr_injective : function.injective (inr R M M₂) := fun _ => by simp\n#align inr_injective inr_injective\n\n",
 "inr_eq_prod":
 "theorem inr_eq_prod : inr R M M₂ = prod 0 linear_map.id :=\n  rfl\n#align inr_eq_prod inr_eq_prod\n\n",
 "inr_apply":
 "theorem inr_apply (x : M₂) : inr R M M₂ x = (0, x) :=\n  rfl\n#align inr_apply inr_apply\n\n",
 "inl_map_mul":
 "theorem inl_map_mul (a₁ a₂ : A) : linear_map.inl R A B (a₁ * a₂) = linear_map.inl R A B a₁ * linear_map.inl R A B a₂ :=\n  Prod.ext rfl (by simp)\n#align inl_map_mul inl_map_mul\n\n",
 "inl_injective":
 "theorem inl_injective : function.injective (inl R M M₂) := fun _ => by simp\n#align inl_injective inl_injective\n\n",
 "inl_eq_prod":
 "theorem inl_eq_prod : inl R M M₂ = prod linear_map.id 0 :=\n  rfl\n#align inl_eq_prod inl_eq_prod\n\n",
 "inl_apply":
 "theorem inl_apply (x : M) : inl R M M₂ x = (x, 0) :=\n  rfl\n#align inl_apply inl_apply\n\n",
 "graph_eq_range_prod":
 "theorem graph_eq_range_prod : f.graph = (linear_map.id.prod f).range :=\n  by\n  ext x\n  exact ⟨fun hx => ⟨x.1, Prod.ext rfl hx.symm⟩, fun ⟨u, hu⟩ => hu ▸ rfl⟩\n#align graph_eq_range_prod graph_eq_range_prod\n\n",
 "graph_eq_ker_coprod":
 "theorem graph_eq_ker_coprod : g.graph = ((-g).coprod linear_map.id).ker :=\n  by\n  ext x\n  change _ = _ ↔ -g x.1 + x.2 = _\n  rw [add_comm, add_neg_eq_zero]\n#align graph_eq_ker_coprod graph_eq_ker_coprod\n\n",
 "fst_surjective":
 "theorem fst_surjective : function.surjective (fst R M M₂) := fun x => ⟨(x, 0), rfl⟩\n#align fst_surjective fst_surjective\n\n",
 "fst_sup_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem fst_sup_snd : «expr ⊔ » (submodule.fst R M M₂) (submodule.snd R M M₂) = «expr⊤» :=\n  by\n  rw [eq_top_iff]\n  rintro ⟨m, n⟩ -\n  rw [show (m, n) = (m, 0) + (0, n) by simp]\n  apply submodule.add_mem («expr ⊔ » (submodule.fst R M M₂) (submodule.snd R M M₂))\n  · exact submodule.mem_sup_left (submodule.mem_comap.mpr (by simp))\n  · exact submodule.mem_sup_right (submodule.mem_comap.mpr (by simp))\n#align fst_sup_snd fst_sup_snd\n\n",
 "fst_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem fst_prod (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M R M₃) : (fst R M₂ M₃).comp (prod f g) = f := by\n  ext <;> rfl\n#align fst_prod fst_prod\n\n",
 "fst_map_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem fst_map_snd : (submodule.fst R M M₂).map (linear_map.snd R M M₂) = «expr⊥» :=\n  by\n  tidy\n  exact 0\n#align fst_map_snd fst_map_snd\n\n",
 "fst_map_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem fst_map_fst : (submodule.fst R M M₂).map (linear_map.fst R M M₂) = «expr⊤» := by tidy\n#align fst_map_fst fst_map_fst\n\n",
 "fst_inf_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem fst_inf_snd : «expr ⊓ » (submodule.fst R M M₂) (submodule.snd R M M₂) = «expr⊥» := by tidy\n#align fst_inf_snd fst_inf_snd\n\n",
 "fst_eq_coprod":
 "theorem fst_eq_coprod : fst R M M₂ = coprod linear_map.id 0 := by ext <;> simp\n#align fst_eq_coprod fst_eq_coprod\n\n",
 "fst_apply":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mario Carneiro, Kevin Buzzard, Yury Kudryashov, Eric Wieser\n-/\n@[simp]\ntheorem fst_apply (x : M × M₂) : fst R M M₂ x = x.1 :=\n  rfl\n#align fst_apply fst_apply\n\n",
 "disjoint_inl_inr":
 "theorem disjoint_inl_inr : Disjoint (inl R M M₂).range (inr R M M₂).range := by\n  simp (config := { contextual := true }) [disjoint_def, @eq_comm M 0, @eq_comm M₂ 0] <;> intros <;> rfl\n#align disjoint_inl_inr disjoint_inl_inr\n\n",
 "coprod_map_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem coprod_map_prod (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) (S : submodule R M)\n    (S' : submodule R M₂) : (submodule.prod S S').map (linear_map.coprod f g) = «expr ⊔ » (S.map f) (S'.map g) :=\n  SetLike.coe_injective <|\n    by\n    simp only [linear_map.coprod_apply, submodule.coe_sup, submodule.map_coe]\n    rw [← set.image2_add, Set.image2_image_left, Set.image2_image_right]\n    exact Set.image_prod fun m m₂ => f m + g m₂\n#align coprod_map_prod coprod_map_prod\n\n",
 "coprod_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem coprod_inr (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) : (coprod f g).comp (inr R M M₂) = g := by\n  ext <;> simp only [map_zero, coprod_apply, inr_apply, zero_add, comp_apply]\n#align coprod_inr coprod_inr\n\n",
 "coprod_inl_inr":
 "@[simp]\ntheorem coprod_inl_inr : coprod (inl R M M₂) (inr R M M₂) = linear_map.id := by\n  ext <;> simp only [Prod.mk_add_mk, add_zero, id_apply, coprod_apply, inl_apply, inr_apply, zero_add]\n#align coprod_inl_inr coprod_inl_inr\n\n",
 "coprod_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem coprod_inl (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) : (coprod f g).comp (inl R M M₂) = f := by\n  ext <;> simp only [map_zero, add_zero, coprod_apply, inl_apply, comp_apply]\n#align coprod_inl coprod_inl\n\n",
 "coprod_comp_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem coprod_comp_prod (f : «expr →ₗ[ ] » M₂ R M₄) (g : «expr →ₗ[ ] » M₃ R M₄) (f' : «expr →ₗ[ ] » M R M₂)\n    (g' : «expr →ₗ[ ] » M R M₃) : (f.coprod g).comp (f'.prod g') = f.comp f' + g.comp g' :=\n  rfl\n#align coprod_comp_prod coprod_comp_prod\n\n",
 "coprod_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem coprod_apply (f : «expr →ₗ[ ] » M R M₃) (g : «expr →ₗ[ ] » M₂ R M₃) (x : M × M₂) :\n    coprod f g x = f x.1 + g x.2 :=\n  rfl\n#align coprod_apply coprod_apply\n\n",
 "comp_coprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem comp_coprod (f : «expr →ₗ[ ] » M₃ R M₄) (g₁ : «expr →ₗ[ ] » M R M₃) (g₂ : «expr →ₗ[ ] » M₂ R M₃) :\n    f.comp (g₁.coprod g₂) = (f.comp g₁).coprod (f.comp g₂) :=\n  ext fun x => f.map_add (g₁ x.1) (g₂ x.2)\n#align comp_coprod comp_coprod\n\n",
 "comap_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem comap_snd : q.comap (snd R M M₂) = prod («expr⊤») q := by ext ⟨x, y⟩ <;> simp\n#align comap_snd comap_snd\n\n",
 "comap_prod_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem comap_prod_prod (f : «expr →ₗ[ ] » M R M₂) (g : «expr →ₗ[ ] » M R M₃) (p : submodule R M₂)\n    (q : submodule R M₃) : comap (prod f g) (p.prod q) = «expr ⊓ » (comap f p) (comap g q) :=\n  submodule.ext fun x => iff.rfl\n#align comap_prod_prod comap_prod_prod\n\n",
 "comap_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem comap_fst : p.comap (fst R M M₂) = prod p («expr⊤») := by ext ⟨x, y⟩ <;> simp\n#align comap_fst comap_fst\n\n",
 "coe_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp, norm_cast]\ntheorem coe_prod :\n    (e₁.prod e₂ : «expr →ₗ[ ] » (M × M₃) R (M₂ × M₄)) =\n      (e₁ : «expr →ₗ[ ] » M R M₂).prod_map (e₂ : «expr →ₗ[ ] » M₃ R M₄) :=\n  rfl\n#align coe_prod coe_prod\n\n",
 "coe_inr":
 "@[simp]\ntheorem coe_inr : (inr R M M₂ : M₂ → M × M₂) = prod.mk 0 :=\n  rfl\n#align coe_inr coe_inr\n\n",
 "coe_inl":
 "@[simp]\ntheorem coe_inl : (inl R M M₂ : M → M × M₂) = fun x => (x, 0) :=\n  rfl\n#align coe_inl coe_inl\n\n"}