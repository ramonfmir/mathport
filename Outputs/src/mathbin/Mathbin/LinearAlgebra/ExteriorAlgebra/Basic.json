{"ι_sq_zero":
 "/-\nCopyright (c) 2020 Adam Topaz. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Zhangir Azerbayev, Adam Topaz, Eric Wieser\n-/\n/-- As well as being linear, `ι m` squares to zero -/\n@[simp]\ntheorem ι_sq_zero (m : M) : ι R m * ι R m = 0 :=\n  (clifford_algebra.ι_sq_scalar _ m).trans <| map_zero _\n#align ι_sq_zero ι_sq_zero\n\n",
 "ι_range_disjoint_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- The generators of the exterior algebra are disjoint from its scalars. -/\ntheorem ι_range_disjoint_one :\n    Disjoint (LinearMap.range (ι R : «expr →ₗ[ ] » M R (exterior_algebra R M)))\n      (1 : Submodule R (exterior_algebra R M)) :=\n  by\n  rw [Submodule.disjoint_def]\n  rintro _ ⟨x, hx⟩ ⟨r, rfl : algebraMap _ _ _ = _⟩\n  rw [ι_eq_algebra_map_iff x] at hx\n  rw [hx.2, RingHom.map_zero]\n#align ι_range_disjoint_one ι_range_disjoint_one\n\n",
 "ι_ne_one":
 "@[simp]\ntheorem ι_ne_one [Nontrivial R] (x : M) : ι R x ≠ 1 :=\n  by\n  rw [← (algebraMap R (exterior_algebra R M)).map_one, ne.def, ι_eq_algebra_map_iff]\n  exact one_ne_zero ∘ And.right\n#align ι_ne_one ι_ne_one\n\n",
 "ι_multi_zero_apply":
 "@[simp]\ntheorem ι_multi_zero_apply (v : Fin 0 → M) : ι_multi R 0 v = 1 :=\n  rfl\n#align ι_multi_zero_apply ι_multi_zero_apply\n\n",
 "ι_multi_succ_curry_left":
 "theorem ι_multi_succ_curry_left {n : ℕ} (m : M) :\n    (ι_multi R n.succ).curry_left m = (LinearMap.mulLeft R (ι R m)).comp_alternating_map (ι_multi R n) :=\n  AlternatingMap.ext fun v =>\n    (ι_multi_succ_apply _).trans <| by\n      simp_rw [Matrix.tail_cons]\n      rfl\n#align ι_multi_succ_curry_left ι_multi_succ_curry_left\n\n",
 "ι_multi_succ_apply":
 "@[simp]\ntheorem ι_multi_succ_apply {n : ℕ} (v : Fin n.succ → M) : ι_multi R _ v = ι R (v 0) * ι_multi R _ (Matrix.vecTail v) :=\n  (congr_arg List.prod (List.ofFn_succ _)).trans List.prod_cons\n#align ι_multi_succ_apply ι_multi_succ_apply\n\n",
 "ι_multi_apply":
 "-- one of the repeated terms is on the left\n-- ignore the left-most term and induct on the remaining ones, decrementing indices\ntheorem ι_multi_apply {n : ℕ} (v : Fin n → M) : ι_multi R n v = (List.ofFn fun i => ι R (v i)).prod :=\n  rfl\n#align ι_multi_apply ι_multi_apply\n\n",
 "ι_mul_prod_list":
 "theorem ι_mul_prod_list {n : ℕ} (f : Fin n → M) (i : Fin n) : (ι R <| f i) * (List.ofFn fun i => ι R <| f i).prod = 0 :=\n  by\n  induction' n with n hn\n  · exact i.elim0\n  · rw [List.ofFn_succ, List.prod_cons, ← mul_assoc]\n    by_cases h : i = 0\n    · rw [h, ι_sq_zero, MulZeroClass.zero_mul]\n    · replace hn := congr_arg ((· * ·) <| ι R <| f 0) (hn (fun i => f <| fin.succ i) (i.pred h))\n      simp only at hn\n      rw [Fin.succ_pred, ← mul_assoc, MulZeroClass.mul_zero] at hn\n      refine' (eq_zero_iff_eq_zero_of_add_eq_zero _).mp hn\n      rw [← add_mul, ι_add_mul_swap, MulZeroClass.zero_mul]\n#align ι_mul_prod_list ι_mul_prod_list\n\n",
 "ι_left_inverse":
 "theorem ι_left_inverse : function.left_inverse ι_inv (ι R : M → exterior_algebra R M) := fun x => by simp [ι_inv]\n#align ι_left_inverse ι_left_inverse\n\n",
 "ι_inj":
 "@[simp]\ntheorem ι_inj (x y : M) : ι R x = ι R y ↔ x = y :=\n  ι_left_inverse.injective.eq_iff\n#align ι_inj ι_inj\n\n",
 "ι_eq_zero_iff":
 "@[simp]\ntheorem ι_eq_zero_iff (x : M) : ι R x = 0 ↔ x = 0 := by rw [← ι_inj R x 0, LinearMap.map_zero]\n#align ι_eq_zero_iff ι_eq_zero_iff\n\n",
 "ι_eq_algebra_map_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem ι_eq_algebra_map_iff (x : M) (r : R) : ι R x = algebraMap R _ r ↔ x = 0 ∧ r = 0 :=\n  by\n  refine' ⟨fun h => _, _⟩\n  · letI : Module («expr ᵐᵒᵖ» R) M := Module.compHom _ ((RingHom.id R).from_opposite mul_comm)\n    haveI : IsCentralScalar R M := ⟨fun r m => rfl⟩\n    have hf0 : to_triv_sq_zero_ext (ι R x) = (0, x) := to_triv_sq_zero_ext_ι _\n    rw [h, AlgHom.commutes] at hf0\n    have : r = 0 ∧ 0 = x := Prod.ext_iff.1 hf0\n    exact this.symm.imp_left Eq.symm\n  · rintro ⟨rfl, rfl⟩\n    rw [LinearMap.map_zero, RingHom.map_zero]\n#align ι_eq_algebra_map_iff ι_eq_algebra_map_iff\n\n",
 "ι_comp_lift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem ι_comp_lift (f : «expr →ₗ[ ] » M R A) (cond : ∀ m, f m * f m = 0) :\n    (lift R ⟨f, cond⟩).to_linear_map.comp (ι R) = f :=\n  clifford_algebra.ι_comp_lift f _\n#align ι_comp_lift ι_comp_lift\n\n",
 "ι_add_mul_swap":
 "@[simp]\ntheorem ι_add_mul_swap (x y : M) : ι R x * ι R y + ι R y * ι R x = 0 :=\n  calc\n    _ = ι R (x + y) * ι R (x + y) := by simp [mul_add, add_mul]\n    _ = _ := ι_sq_zero _\n    \n#align ι_add_mul_swap ι_add_mul_swap\n\n",
 "to_triv_sq_zero_ext_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem to_triv_sq_zero_ext_ι [Module («expr ᵐᵒᵖ» R) M] [IsCentralScalar R M] (x : M) :\n    to_triv_sq_zero_ext (ι R x) = TrivSqZeroExt.inr x :=\n  lift_ι_apply _ _ _ _\n#align to_triv_sq_zero_ext_ι to_triv_sq_zero_ext_ι\n\n",
 "to_exterior_ι":
 "@[simp]\ntheorem to_exterior_ι (m : M) : (tensor_algebra.ι R m).to_exterior = exterior_algebra.ι R m := by simp [to_exterior]\n#align to_exterior_ι to_exterior_ι\n\n",
 "lift_ι_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem lift_ι_apply (f : «expr →ₗ[ ] » M R A) (cond : ∀ m, f m * f m = 0) (x) : lift R ⟨f, cond⟩ (ι R x) = f x :=\n  clifford_algebra.lift_ι_apply f _ x\n#align lift_ι_apply lift_ι_apply\n\n",
 "lift_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem lift_unique (f : «expr →ₗ[ ] » M R A) (cond : ∀ m, f m * f m = 0)\n    (g : «expr →ₐ[ ] » (exterior_algebra R M) R A) : g.to_linear_map.comp (ι R) = f ↔ g = lift R ⟨f, cond⟩ :=\n  clifford_algebra.lift_unique f _ _\n#align lift_unique lift_unique\n\n",
 "lift_comp_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem lift_comp_ι (g : «expr →ₐ[ ] » (exterior_algebra R M) R A) :\n    lift R ⟨g.to_linear_map.comp (ι R), comp_ι_sq_zero _⟩ = g :=\n  clifford_algebra.lift_comp_ι g\n#align lift_comp_ι lift_comp_ι\n\n",
 "is_unit_algebra_map":
 "theorem is_unit_algebra_map (r : R) : IsUnit (algebraMap R (exterior_algebra R M) r) ↔ IsUnit r :=\n  isUnit_map_of_leftInverse _ (algebra_map_left_inverse M)\n#align is_unit_algebra_map is_unit_algebra_map\n\n",
 "induction":
 "/-- If `C` holds for the `algebra_map` of `r : R` into `exterior_algebra R M`, the `ι` of `x : M`,\nand is preserved under addition and muliplication, then it holds for all of `exterior_algebra R M`.\n-/\n@[elab_as_elim]\ntheorem induction {C : exterior_algebra R M → Prop} (h_grade0 : ∀ r, C (algebraMap R (exterior_algebra R M) r))\n    (h_grade1 : ∀ x, C (ι R x)) (h_mul : ∀ a b, C a → C b → C (a * b)) (h_add : ∀ a b, C a → C b → C (a + b))\n    (a : exterior_algebra R M) : C a :=\n  clifford_algebra.induction h_grade0 h_grade1 h_mul h_add a\n#align induction induction\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/-- See note [partially-applied ext lemmas]. -/\n@[ext]\ntheorem hom_ext {f g : «expr →ₐ[ ] » (exterior_algebra R M) R A}\n    (h : f.to_linear_map.comp (ι R) = g.to_linear_map.comp (ι R)) : f = g :=\n  clifford_algebra.hom_ext h\n#align hom_ext hom_ext\n\n",
 "comp_ι_sq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem comp_ι_sq_zero (g : «expr →ₐ[ ] » (exterior_algebra R M) R A) (m : M) : g (ι R m) * g (ι R m) = 0 := by\n  rw [← AlgHom.map_mul, ι_sq_zero, AlgHom.map_zero]\n#align comp_ι_sq_zero comp_ι_sq_zero\n\n",
 "algebra_map_left_inverse":
 "theorem algebra_map_left_inverse : function.left_inverse algebra_map_inv (algebraMap R <| exterior_algebra R M) :=\n  fun x => by simp [algebra_map_inv]\n#align algebra_map_left_inverse algebra_map_left_inverse\n\n",
 "algebra_map_inj":
 "@[simp]\ntheorem algebra_map_inj (x y : R) :\n    algebraMap R (exterior_algebra R M) x = algebraMap R (exterior_algebra R M) y ↔ x = y :=\n  (algebra_map_left_inverse M).injective.eq_iff\n#align algebra_map_inj algebra_map_inj\n\n",
 "algebra_map_eq_zero_iff":
 "@[simp]\ntheorem algebra_map_eq_zero_iff (x : R) : algebraMap R (exterior_algebra R M) x = 0 ↔ x = 0 :=\n  map_eq_zero_iff (algebraMap _ _) (algebra_map_left_inverse _).injective\n#align algebra_map_eq_zero_iff algebra_map_eq_zero_iff\n\n",
 "algebra_map_eq_one_iff":
 "@[simp]\ntheorem algebra_map_eq_one_iff (x : R) : algebraMap R (exterior_algebra R M) x = 1 ↔ x = 1 :=\n  map_eq_one_iff (algebraMap _ _) (algebra_map_left_inverse _).injective\n#align algebra_map_eq_one_iff algebra_map_eq_one_iff\n\n"}