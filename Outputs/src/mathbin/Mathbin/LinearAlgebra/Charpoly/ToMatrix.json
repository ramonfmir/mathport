{"charpoly_to_matrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/-\nCopyright (c) 2021 Riccardo Brasca. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Riccardo Brasca\n-/\n/-- `charpoly f` is the characteristic polynomial of the matrix of `f` in any basis. -/\n@[simp]\ntheorem charpoly_to_matrix {ι : Type w} [Fintype ι] (b : Basis ι R M) : (toMatrix b b f).charpoly = f.charpoly :=\n  by\n  set A := to_matrix b b f\n  set b' := choose_basis R M\n  set ι' := choose_basis_index R M\n  set A' := to_matrix b' b' f\n  set e := Basis.indexEquiv b b'\n  set φ := reindex_linear_equiv R R e e\n  set φ₁ := reindex_linear_equiv R R e (Equiv.refl ι')\n  set φ₂ := reindex_linear_equiv R R (Equiv.refl ι') (Equiv.refl ι')\n  set φ₃ := reindex_linear_equiv R R (Equiv.refl ι') e\n  set P := b.to_matrix b'\n  set Q := b'.to_matrix b\n  have hPQ : matrix.mul (C.map_matrix (φ₁ P)) (C.map_matrix (φ₃ Q)) = 1 := by\n    rw [ring_hom.map_matrix_apply, ring_hom.map_matrix_apply, ← Matrix.map_mul,\n      @reindex_linear_equiv_mul _ ι' _ _ _ _ R R, Basis.toMatrix_mul_toMatrix_flip, reindex_linear_equiv_one, ←\n      ring_hom.map_matrix_apply, RingHom.map_one]\n  calc\n    A.charpoly = (reindex e e A).charpoly := (charpoly_reindex _ _).symm\n    _ = (scalar ι' X - C.map_matrix (φ A)).det := rfl\n    _ = (scalar ι' X - C.map_matrix (φ (matrix.mul (matrix.mul P A') Q))).det := by\n      rw [basis_toMatrix_mul_linearMap_toMatrix_mul_basis_toMatrix]\n    _ = (scalar ι' X - C.map_matrix (matrix.mul (matrix.mul (φ₁ P) (φ₂ A')) (φ₃ Q))).det := by\n      rw [reindex_linear_equiv_mul, reindex_linear_equiv_mul]\n    _ = (scalar ι' X - matrix.mul (matrix.mul (C.map_matrix (φ₁ P)) (C.map_matrix A')) (C.map_matrix (φ₃ Q))).det := by\n      simp\n    _ =\n        (matrix.mul (matrix.mul (scalar ι' X) (C.map_matrix (φ₁ P))) (C.map_matrix (φ₃ Q)) -\n            matrix.mul (matrix.mul (C.map_matrix (φ₁ P)) (C.map_matrix A')) (C.map_matrix (φ₃ Q))).det :=\n      by rw [Matrix.mul_assoc ((scalar ι') X), hPQ, Matrix.mul_one]\n    _ =\n        (matrix.mul (matrix.mul (C.map_matrix (φ₁ P)) (scalar ι' X)) (C.map_matrix (φ₃ Q)) -\n            matrix.mul (matrix.mul (C.map_matrix (φ₁ P)) (C.map_matrix A')) (C.map_matrix (φ₃ Q))).det :=\n      by simp\n    _ = (matrix.mul (matrix.mul (C.map_matrix (φ₁ P)) (scalar ι' X - C.map_matrix A')) (C.map_matrix (φ₃ Q))).det := by\n      rw [← Matrix.sub_mul, ← Matrix.mul_sub]\n    _ = (C.map_matrix (φ₁ P)).det * (scalar ι' X - C.map_matrix A').det * (C.map_matrix (φ₃ Q)).det := by\n      rw [det_mul, det_mul]\n    _ = (C.map_matrix (φ₁ P)).det * (C.map_matrix (φ₃ Q)).det * (scalar ι' X - C.map_matrix A').det := by ring\n    _ = (scalar ι' X - C.map_matrix A').det := by rw [← det_mul, hPQ, det_one, one_mul]\n    _ = f.charpoly := rfl\n    \n#align charpoly_to_matrix charpoly_to_matrix\n\n"}