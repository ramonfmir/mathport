{"of_equiv'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\n/-- A variation of `of_equiv`: the assumption `module.free R P` here is explicit rather than an\ninstance. -/\ntheorem of_equiv' {P : Type v} [add_comm_monoid P] [Module R P] (h : module.free R P) (e : «expr ≃ₗ[ ] » P R N) :\n    module.free R N :=\n  of_equiv e\n#align of_equiv' of_equiv'\n\n",
 "of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ[ ] » -/\ntheorem of_equiv (e : «expr ≃ₗ[ ] » M R N) : module.free R N :=\n  of_basis <| (choose_basis R M).map e\n#align of_equiv of_equiv\n\n",
 "of_basis":
 "theorem module.free.of_basis {ι : Type w} (b : basis ι R M) : module.free R M :=\n  (module.free_def R M).2 ⟨Set.range b, ⟨b.reindex_range⟩⟩\n#align module.free.of_basis module.free.of_basis\n\n",
 "free_iff_set":
 "theorem module.free_iff_set : module.free R M ↔ ∃ S : set M, nonempty (basis S R M) :=\n  ⟨fun h => ⟨Set.range h.exists_basis.some.2, ⟨basis.reindex_range h.exists_basis.some.2⟩⟩, fun ⟨S, hS⟩ =>\n    ⟨nonempty_sigma.2 ⟨S, hS⟩⟩⟩\n#align module.free_iff_set module.free_iff_set\n\n",
 "free_def":
 "/-\nCopyright (c) 2021 Riccardo Brasca. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Riccardo Brasca\n-/\n/- If `M` fits in universe `w`, then freeness is equivalent to existence of a basis in that\nuniverse.\n\nNote that if `M` does not fit in `w`, the reverse direction of this implication is still true as\n`module.free.of_basis`. -/\ntheorem module.free_def [Small.{w} M] : module.free R M ↔ ∃ I : Type w, nonempty (basis I R M) :=\n  ⟨fun h =>\n    ⟨Shrink (Set.range h.exists_basis.some.2), ⟨(basis.reindex_range h.exists_basis.some.2).reindex (equivShrink _)⟩⟩,\n    fun h => ⟨(nonempty_sigma.2 h).map fun ⟨i, b⟩ => ⟨Set.range b, b.reindex_range⟩⟩⟩\n#align module.free_def module.free_def\n\n"}