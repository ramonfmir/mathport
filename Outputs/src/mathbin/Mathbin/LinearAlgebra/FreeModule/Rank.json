{"rank_tensorProduct'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n#print rank_tensorProduct' /-\n/-- If `M` and `N` lie in the same universe, the rank of `M ⊗[R] N` is\n  `(module.rank R M) * (module.rank R N)`. -/\ntheorem rank_tensorProduct' (N : Type v) [AddCommGroup N] [Module R N] [Module.Free R N] :\n    Module.rank R (tensor_product M R N) = Module.rank R M * Module.rank R N := by simp\n#align rank_tensor_product' rank_tensorProduct'\n-/\n\n",
 "rank_tensorProduct":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n#print rank_tensorProduct /-\n/-- The rank of `M ⊗[R] N` is `(module.rank R M).lift * (module.rank R N).lift`. -/\n@[simp]\ntheorem rank_tensorProduct :\n    Module.rank R (tensor_product M R N) = lift.{w, v} (Module.rank R M) * lift.{v, w} (Module.rank R N) :=\n  by\n  obtain ⟨⟨_, bM⟩⟩ := module.free.exists_basis R M\n  obtain ⟨⟨_, bN⟩⟩ := module.free.exists_basis R N\n  rw [← bM.mk_eq_rank'', ← bN.mk_eq_rank'', ← (bM.tensor_product bN).mk_eq_rank'', Cardinal.mk_prod]\n#align rank_tensor_product rank_tensorProduct\n-/\n\n",
 "rank_matrix''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_matrix'' /-\n/-- If `m` and `n` are `fintype` that lie in the same universe as `R`, the rank of `m × n` matrices\n  is `# m * # n`. -/\n@[simp]\ntheorem rank_matrix'' (m n : Type u) [Finite m] [Finite n] :\n    Module.rank R (Matrix m n R) = cardinal.mk m * cardinal.mk n := by simp\n#align rank_matrix'' rank_matrix''\n-/\n\n",
 "rank_matrix'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_matrix' /-\n/-- If `m` and `n` are `fintype` that lie in the same universe, the rank of `m × n` matrices is\n  `(# n * # m).lift`. -/\n@[simp]\ntheorem rank_matrix' (m n : Type v) [Finite m] [Finite n] :\n    Module.rank R (Matrix m n R) = (cardinal.mk m * cardinal.mk n).lift := by rw [rank_matrix, lift_mul, lift_umax]\n#align rank_matrix' rank_matrix'\n-/\n\n",
 "rank_matrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_matrix /-\n/-- If `m` and `n` are `fintype`, the rank of `m × n` matrices is `(# m).lift * (# n).lift`. -/\n@[simp]\ntheorem rank_matrix (m : Type v) (n : Type w) [Finite m] [Finite n] :\n    Module.rank R (Matrix m n R) = lift.{max v w u, v} (cardinal.mk m) * lift.{max v w u, w} (cardinal.mk n) :=\n  by\n  cases nonempty_fintype m\n  cases nonempty_fintype n\n  have h := (Matrix.stdBasis R m n).mk_eq_rank\n  rw [← lift_lift.{max v w u, max v w}, lift_inj] at h\n  simpa using h.symm\n#align rank_matrix rank_matrix\n-/\n\n",
 "rank_finsupp_self'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_finsupp_self' /-\n/-- If `R` and `ι` lie in the same universe, the rank of `(ι →₀ R)` is `# ι`. -/\ntheorem rank_finsupp_self' {ι : Type u} : Module.rank R («expr →₀ » ι R) = cardinal.mk ι := by simp\n#align rank_finsupp_self' rank_finsupp_self'\n-/\n\n",
 "rank_finsupp_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_finsupp_self /-\n/-- The rank of `(ι →₀ R)` is `(# ι).lift`. -/\n@[simp]\ntheorem rank_finsupp_self (ι : Type w) : Module.rank R («expr →₀ » ι R) = (cardinal.mk ι).lift := by simp [rank_finsupp]\n#align rank_finsupp_self rank_finsupp_self\n-/\n\n",
 "rank_finsupp'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_finsupp' /-\ntheorem rank_finsupp' (ι : Type v) : Module.rank R («expr →₀ » ι M) = cardinal.mk ι * Module.rank R M := by\n  simp [rank_finsupp]\n#align rank_finsupp' rank_finsupp'\n-/\n\n",
 "rank_finsupp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n#print rank_finsupp /-\n/-\nCopyright (c) 2021 Riccardo Brasca. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Riccardo Brasca\n-/\n@[simp]\ntheorem rank_finsupp (ι : Type w) :\n    Module.rank R («expr →₀ » ι M) = Cardinal.lift.{v} (cardinal.mk ι) * Cardinal.lift.{w} (Module.rank R M) :=\n  by\n  obtain ⟨⟨_, bs⟩⟩ := module.free.exists_basis R M\n  rw [← bs.mk_eq_rank'', ← (Finsupp.basis fun a : ι => bs).mk_eq_rank'', Cardinal.mk_sigma, Cardinal.sum_const]\n#align rank_finsupp rank_finsupp\n-/\n\n",
 "rank_directSum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n#print rank_directSum /-\n/-- The rank of the direct sum is the sum of the ranks. -/\n@[simp]\ntheorem rank_directSum {ι : Type v} (M : ι → Type w) [∀ i : ι, AddCommGroup (M i)] [∀ i : ι, Module R (M i)]\n    [∀ i : ι, Module.Free R (M i)] :\n    Module.rank R\n        (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (M i)) =\n      Cardinal.sum fun i => Module.rank R (M i) :=\n  by\n  let B i := choose_basis R (M i)\n  let b :\n    Basis _ R (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (M i)) :=\n    Dfinsupp.basis fun i => B i\n  simp [← b.mk_eq_rank'', fun i => (B i).mk_eq_rank'']\n#align rank_direct_sum rank_directSum\n-/\n\n"}