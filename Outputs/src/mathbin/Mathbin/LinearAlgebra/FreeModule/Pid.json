{"smith_coeffs_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem ideal.smith_coeffs_ne_zero (b : basis ι R S) (I : ideal S) (hI : I ≠ «expr⊥») (i) :\n    ideal.smith_coeffs b I hI i ≠ 0 := by\n  intro hi\n  apply basis.ne_zero (ideal.self_basis b I hI) i\n  refine' subtype.coe_injective _\n  simp [hi]\n#align ideal.smith_coeffs_ne_zero ideal.smith_coeffs_ne_zero\n\n",
 "self_basis_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,\nthen any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can\nfind a basis for `S` and `I` such that the inclusion map is a square diagonal\nmatrix.\n-/\n@[simp]\ntheorem ideal.self_basis_def (b : basis ι R S) (I : ideal S) (hI : I ≠ «expr⊥») :\n    ∀ i, (ideal.self_basis b I hI i : S) = «expr • » (ideal.smith_coeffs b I hI i) (ideal.ring_basis b I hI i) :=\n  (ideal.exists_smith_normal_form b I hI).some_spec.some_spec.some_spec\n#align ideal.self_basis_def ideal.self_basis_def\n\n",
 "restrict_scalars_algebras":
 "/-- A set of linearly independent vectors in a module `M` over a semiring `S` is also linearly\nindependent over a subring `R` of `K`. -/\ntheorem linear_independent.restrict_scalars_algebras {R S M ι : Type _} [CommSemiring R] [Semiring S]\n    [add_comm_monoid M] [algebra R S] [Module R M] [Module S M] [IsScalarTower R S M]\n    (hinj : function.injective (algebra_map R S)) {v : ι → M} (li : linear_independent S v) : linear_independent R v :=\n  linear_independent.restrict_scalars (by rwa [algebra.algebra_map_eq_smul_one'] at hinj) li\n#align linear_independent.restrict_scalars_algebras linear_independent.restrict_scalars_algebras\n\n",
 "nonempty_basis_of_pid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- A submodule of a free `R`-module of finite rank is also a free `R`-module of finite rank,\nif `R` is a principal ideal domain.\n\nThis is a `lemma` to make the induction a bit easier. To actually access the basis,\nsee `submodule.basis_of_pid`.\n\nSee also the stronger version `submodule.smith_normal_form`.\n-/\ntheorem submodule.nonempty_basis_of_pid {ι : Type _} [Finite ι] (b : basis ι R M) (N : submodule R M) :\n    ∃ n : ℕ, nonempty (basis (fin n) R N) := by\n  haveI := classical.dec_eq M\n  cases nonempty_fintype ι\n  refine' N.induction_on_rank b _ _\n  intro N ih\n  let b' := (b.reindex (fintype.equiv_fin ι)).map (linear_equiv.of_top _ rfl).symm\n  by_cases N_bot : N = «expr⊥»\n  · subst N_bot\n    exact ⟨0, ⟨basis.empty _⟩⟩\n  obtain ⟨y, -, a, hay, M', -, N', N'_le_N, -, -, ay_ortho, h'⟩ :=\n    submodule.basis_of_pid_aux («expr⊤») N b' N_bot le_top\n  obtain ⟨n', ⟨bN'⟩⟩ := ih N' N'_le_N _ hay ay_ortho\n  obtain ⟨bN, hbN⟩ := h' n' bN'\n  exact ⟨n' + 1, ⟨bN⟩⟩\n#align submodule.nonempty_basis_of_pid submodule.nonempty_basis_of_pid\n\n",
 "generator_maximal_submodule_image_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem generator_maximal_submodule_image_dvd {N O : submodule R M} (hNO : N ≤ O) {ϕ : «expr →ₗ[ ] » O R R}\n    (hϕ :\n      ∀ ψ : «expr →ₗ[ ] » O R R, ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N)\n    [(ϕ.submodule_image N).is_principal] (y : M) (yN : y ∈ N) (ϕy_eq : ϕ ⟨y, hNO yN⟩ = generator (ϕ.submodule_image N))\n    (ψ : «expr →ₗ[ ] » O R R) : generator (ϕ.submodule_image N) ∣ ψ ⟨y, hNO yN⟩ :=\n  by\n  let a : R := generator (ϕ.submodule_image N)\n  let d : R := is_principal.generator (submodule.span R {a, ψ ⟨y, hNO yN⟩})\n  have d_dvd_left : d ∣ a := (mem_iff_generator_dvd _).mp (subset_span (mem_insert _ _))\n  have d_dvd_right : d ∣ ψ ⟨y, hNO yN⟩ :=\n    (mem_iff_generator_dvd _).mp (subset_span (mem_insert_of_mem _ (mem_singleton _)))\n  refine' dvd_trans _ d_dvd_right\n  rw [dvd_generator_iff, ideal.span, ← span_singleton_generator (submodule.span R {a, ψ ⟨y, hNO yN⟩})]\n  obtain ⟨r₁, r₂, d_eq⟩ : ∃ r₁ r₂ : R, d = r₁ * a + r₂ * ψ ⟨y, hNO yN⟩ :=\n    by\n    obtain ⟨r₁, r₂', hr₂', hr₁⟩ := mem_span_insert.mp (is_principal.generator_mem (submodule.span R {a, ψ ⟨y, hNO yN⟩}))\n    obtain ⟨r₂, rfl⟩ := mem_span_singleton.mp hr₂'\n    exact ⟨r₁, r₂, hr₁⟩\n  let ψ' : «expr →ₗ[ ] » O R R := «expr • » r₁ ϕ + «expr • » r₂ ψ\n  have : span R {d} ≤ ψ'.submodule_image N :=\n    by\n    rw [span_le, singleton_subset_iff, SetLike.mem_coe, linear_map.mem_submodule_image_of_le hNO]\n    refine' ⟨y, yN, _⟩\n    change r₁ * ϕ ⟨y, hNO yN⟩ + r₂ * ψ ⟨y, hNO yN⟩ = d\n    rw [d_eq, ϕy_eq]\n  refine' le_antisymm (this.trans (le_of_eq _)) (ideal.span_singleton_le_span_singleton.mpr d_dvd_left)\n  rw [span_singleton_generator]\n  refine' hϕ ψ' (le_trans _ this)\n  rw [← span_singleton_generator (ϕ.submodule_image N)]\n  exact ideal.span_singleton_le_span_singleton.mpr d_dvd_left\n  · exact subset_span (mem_insert _ _)\n#align generator_maximal_submodule_image_dvd generator_maximal_submodule_image_dvd\n\n",
 "exists_smith_normal_form_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- We define `N` as the submodule spanned by a maximal linear independent subfamily of `s`\n-- same as `span R (s '' I)` but more convenient\n-- `s` restricted to `I`\n-- `s` restricted to `I` is a basis of `N`\n-- Our first goal is to build `A ≠ 0` such that `A • M ⊆ N`\n-- `M ≃ A • M` because `M` is torsion free and `A ≠ 0`\n-- as announced, `A • M ⊆ N`\n-- Since a submodule of a free `R`-module is free, we get that `A • M` is free\n-- hence `M` is free.\n/-- If `M` is finite free over a PID `R`, then any submodule `N` is free\nand we can find a basis for `M` and `N` such that the inclusion map is a diagonal matrix\nin Smith normal form.\n\nSee `submodule.smith_normal_form_of_le` for a version of this theorem that returns\na `basis.smith_normal_form`.\n\nThis is a strengthening of `submodule.basis_of_pid_of_le`.\n-/\ntheorem submodule.exists_smith_normal_form_of_le [Finite ι] (b : basis ι R M) (N O : submodule R M) (N_le_O : N ≤ O) :\n    ∃ (n o : ℕ)(hno : n ≤ o)(bO : basis (fin o) R O)(bN : basis (fin n) R N)(a : fin n → R),\n      ∀ i, (bN i : M) = «expr • » (a i) (bO (Fin.castLe hno i)) :=\n  by\n  cases nonempty_fintype ι\n  revert N\n  refine' induction_on_rank b _ _ O\n  intro M ih N N_le_M\n  obtain ⟨m, b'M⟩ := M.basis_of_pid b\n  by_cases N_bot : N = «expr⊥»\n  · subst N_bot\n    exact ⟨0, m, nat.zero_le _, b'M, basis.empty _, finZeroElim, finZeroElim⟩\n  obtain ⟨y, hy, a, hay, M', M'_le_M, N', N'_le_N, N'_le_M', y_ortho, ay_ortho, h⟩ :=\n    submodule.basis_of_pid_aux M N b'M N_bot N_le_M\n  obtain ⟨n', m', hn'm', bM', bN', as', has'⟩ := ih M' M'_le_M y hy y_ortho N' N'_le_M'\n  obtain ⟨bN, h'⟩ := h n' bN'\n  obtain ⟨hmn, bM, h''⟩ := h' m' hn'm' bM'\n  obtain ⟨as, has⟩ := h'' as' has'\n  exact ⟨_, _, hmn, bM, bN, as, has⟩\n#align submodule.exists_smith_normal_form_of_le submodule.exists_smith_normal_form_of_le\n\n",
 "exists_smith_normal_form":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,\nthen any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can\nfind a basis for `S` and `I` such that the inclusion map is a square diagonal\nmatrix.\n\nSee also `ideal.smith_normal_form` for a version of this theorem that returns\na `basis.smith_normal_form`.\n\nThe definitions `ideal.ring_basis`, `ideal.self_basis`, `ideal.smith_coeffs` are (noncomputable)\nchoices of values for this existential quantifier.\n-/\ntheorem ideal.exists_smith_normal_form (b : basis ι R S) (I : ideal S) (hI : I ≠ «expr⊥») :\n    ∃ (b' : basis ι R S)(a : ι → R)(ab' : basis ι R I), ∀ i, (ab' i : S) = «expr • » (a i) (b' i) := by\n  cases nonempty_fintype ι <;>\n    exact\n      let ⟨bS, bI, f, a, snf⟩ := I.smith_normal_form b hI\n      let e : «expr ≃ » (fin (fintype.card ι)) ι :=\n        Equiv.ofBijective f ((fintype.bijective_iff_injective_and_card f).mpr ⟨f.injective, fintype.card_fin _⟩)\n      have fe : ∀ i, f (e.symm i) = i := e.apply_symm_apply\n      ⟨bS, a ∘ e.symm, (bI.reindex e).map ((restrict_scalars_equiv _ _ _ _).restrict_scalars R), fun i => by\n        simp only [snf, fe, basis.map_apply, linear_equiv.restrict_scalars_apply,\n          submodule.restrict_scalars_equiv_apply, basis.coe_reindex]⟩\n#align ideal.exists_smith_normal_form ideal.exists_smith_normal_form\n\n",
 "eq_bot_of_generator_maximal_submodule_image_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem eq_bot_of_generator_maximal_submodule_image_eq_zero {N O : submodule R M} (b : basis ι R O) (hNO : N ≤ O)\n    {ϕ : «expr →ₗ[ ] » O R R}\n    (hϕ :\n      ∀ ψ : «expr →ₗ[ ] » O R R, ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N)\n    [(ϕ.submodule_image N).is_principal] (hgen : generator (ϕ.submodule_image N) = 0) : N = «expr⊥» :=\n  by\n  rw [submodule.eq_bot_iff]\n  intro x hx\n  refine' congr_arg coe (show (⟨x, hNO hx⟩ : O) = 0 from b.ext_elem fun i => _)\n  rw [(eq_bot_iff_generator_eq_zero _).mpr hgen] at hϕ\n  rw [linear_equiv.map_zero, finsupp.zero_apply]\n  refine' (submodule.eq_bot_iff _).mp (hϕ («expr ∘ₗ » (finsupp.lapply i) ↑b.repr) bot_le) _ _\n  exact (linear_map.mem_submodule_image_of_le hNO).mpr ⟨x, hx, rfl⟩\n#align eq_bot_of_generator_maximal_submodule_image_eq_zero eq_bot_of_generator_maximal_submodule_image_eq_zero\n\n",
 "eq_bot_of_generator_maximal_map_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∘ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2020 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\ntheorem eq_bot_of_generator_maximal_map_eq_zero (b : basis ι R M) {N : submodule R M} {ϕ : «expr →ₗ[ ] » M R R}\n    (hϕ : ∀ ψ : «expr →ₗ[ ] » M R R, N.map ϕ ≤ N.map ψ → N.map ψ = N.map ϕ) [(N.map ϕ).is_principal]\n    (hgen : generator (N.map ϕ) = (0 : R)) : N = «expr⊥» :=\n  by\n  rw [submodule.eq_bot_iff]\n  intro x hx\n  refine' b.ext_elem fun i => _\n  rw [(eq_bot_iff_generator_eq_zero _).mpr hgen] at hϕ\n  rw [linear_equiv.map_zero, finsupp.zero_apply]\n  exact (submodule.eq_bot_iff _).mp (hϕ («expr ∘ₗ » (finsupp.lapply i) ↑b.repr) bot_le) _ ⟨x, hx, rfl⟩\n#align eq_bot_of_generator_maximal_map_eq_zero eq_bot_of_generator_maximal_map_eq_zero\n\n",
 "dvd_generator_iff":
 "theorem dvd_generator_iff {I : ideal R} [I.is_principal] {x : R} (hx : x ∈ I) : x ∣ generator I ↔ I = ideal.span {x} :=\n  by\n  conv_rhs => rw [← span_singleton_generator I]\n  erw [ideal.span_singleton_eq_span_singleton, ← dvd_dvd_iff_associated, ← mem_iff_generator_dvd]\n  exact ⟨fun h => ⟨hx, h⟩, fun h => h.2⟩\n#align dvd_generator_iff dvd_generator_iff\n\n",
 "basis_of_pid_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem submodule.basis_of_pid_bot {ι : Type _} [Finite ι] (b : basis ι R M) :\n    submodule.basis_of_pid b («expr⊥») = ⟨0, basis.empty _⟩ :=\n  by\n  obtain ⟨n, b'⟩ := submodule.basis_of_pid b («expr⊥»)\n  let e : «expr ≃ » (fin n) (fin 0) := b'.index_equiv (basis.empty _ : basis (fin 0) R («expr⊥» : submodule R M))\n  obtain rfl : n = 0 := by simpa using fintype.card_eq.mpr ⟨e⟩\n  exact sigma.eq rfl (basis.eq_of_apply_eq <| finZeroElim)\n#align submodule.basis_of_pid_bot submodule.basis_of_pid_bot\n\n",
 "basis_of_pid_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- The induction hypothesis of `submodule.basis_of_pid` and `submodule.smith_normal_form`.\n\nBasically, it says: let `N ≤ M` be a pair of submodules, then we can find a pair of\nsubmodules `N' ≤ M'` of strictly smaller rank, whose basis we can extend to get a basis\nof `N` and `M`. Moreover, if the basis for `M'` is up to scalars a basis for `N'`,\nthen the basis we find for `M` is up to scalars a basis for `N`.\n\nFor `basis_of_pid` we only need the first half and can fix `M = ⊤`,\nfor `smith_normal_form` we need the full statement,\nbut must also feed in a basis for `M` using `basis_of_pid` to keep the induction going.\n-/\ntheorem submodule.basis_of_pid_aux [Finite ι] {O : Type _} [add_comm_group O] [Module R O] (M N : submodule R O)\n    (b'M : basis ι R M) (N_bot : N ≠ «expr⊥») (N_le_M : N ≤ M) :\n    ∃ y ∈ M,\n      ∃ (a : R)(hay : «expr • » a y ∈ N),\n        ∃ M' ≤ M,\n          ∃ N' ≤ N,\n            ∃ (N'_le_M' : N' ≤ M')(y_ortho_M' : ∀ (c : R) (z : O), z ∈ M' → «expr • » c y + z = 0 → c = 0)(ay_ortho_N' :\n              ∀ (c : R) (z : O), z ∈ N' → «expr • » c («expr • » a y) + z = 0 → c = 0),\n              ∀ (n') (bN' : basis (fin n') R N'),\n                ∃ bN : basis (fin (n' + 1)) R N,\n                  ∀ (m') (hn'm' : n' ≤ m') (bM' : basis (fin m') R M'),\n                    ∃ (hnm : n' + 1 ≤ m' + 1)(bM : basis (fin (m' + 1)) R M),\n                      ∀ (as : fin n' → R)\n                        (h : ∀ i : fin n', (bN' i : O) = «expr • » (as i) (bM' (Fin.castLe hn'm' i) : O)),\n                        ∃ as' : fin (n' + 1) → R,\n                          ∀ i : fin (n' + 1), (bN i : O) = «expr • » (as' i) (bM (Fin.castLe hnm i) : O) :=\n  by\n  -- Let `ϕ` be a maximal projection of `M` onto `R`, in the sense that there is\n  -- no `ψ` whose image of `N` is larger than `ϕ`'s image of `N`.\n  have :\n    ∃ ϕ : «expr →ₗ[ ] » M R R,\n      ∀ ψ : «expr →ₗ[ ] » M R R,\n        ϕ.submodule_image N ≤ ψ.submodule_image N → ψ.submodule_image N = ϕ.submodule_image N :=\n    by\n    obtain ⟨P, P_eq, P_max⟩ :=\n      set_has_maximal_iff_noetherian.mpr (infer_instance : is_noetherian R R) _\n        (show (Set.range fun ψ : «expr →ₗ[ ] » M R R => ψ.submodule_image N).nonempty from\n          ⟨_, set.mem_range.mpr ⟨0, rfl⟩⟩)\n    obtain ⟨ϕ, rfl⟩ := set.mem_range.mp P_eq\n    exact ⟨ϕ, fun ψ hψ => P_max _ ⟨_, rfl⟩ hψ⟩\n  let ϕ := this.some\n  have ϕ_max := this.some_spec\n  -- Since `ϕ(N)` is a `R`-submodule of the PID `R`,\n  -- it is principal and generated by some `a`.\n  let a := generator (ϕ.submodule_image N)\n  have a_mem : a ∈ ϕ.submodule_image N := generator_mem _\n  -- If `a` is zero, then the submodule is trivial. So let's assume `a ≠ 0`, `N ≠ ⊥`.\n  by_cases a_zero : a = 0\n  · have := eq_bot_of_generator_maximal_submodule_image_eq_zero b'M N_le_M ϕ_max a_zero\n    contradiction\n  -- We claim that `ϕ⁻¹ a = y` can be taken as basis element of `N`.\n  obtain ⟨y, yN, ϕy_eq⟩ := (linear_map.mem_submodule_image_of_le N_le_M).mp a_mem\n  have ϕy_ne_zero : ϕ ⟨y, N_le_M yN⟩ ≠ 0 := fun h => a_zero (ϕy_eq.symm.trans h)\n  -- Write `y` as `a • y'` for some `y'`.\n  have hdvd : ∀ i, a ∣ b'M.coord i ⟨y, N_le_M yN⟩ := fun i =>\n    generator_maximal_submodule_image_dvd N_le_M ϕ_max y yN ϕy_eq (b'M.coord i)\n  choose c hc using hdvd\n  cases nonempty_fintype ι\n  let y' : O :=\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n      («expr • » (c i) (b'M i))\n  have y'M : y' ∈ M := M.sum_mem fun i _ => M.smul_mem (c i) (b'M i).2\n  have mk_y' :\n    (⟨y', y'M⟩ : M) =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        («expr • » (c i) (b'M i)) :=\n    subtype.ext\n      (show y' = M.subtype _ by\n        simp only [linear_map.map_sum, linear_map.map_smul]\n        rfl)\n  have a_smul_y' : «expr • » a y' = y :=\n    by\n    refine' congr_arg coe (show («expr • » a ⟨y', y'M⟩ : M) = ⟨y, N_le_M yN⟩ from _)\n    rw [← b'M.sum_repr ⟨y, N_le_M yN⟩, mk_y', finset.smul_sum]\n    refine' finset.sum_congr rfl fun i _ => _\n    rw [← mul_smul, ← hc]\n    rfl\n  -- We found an `y` and an `a`!\n  refine' ⟨y', y'M, a, a_smul_y'.symm ▸ yN, _⟩\n  have ϕy'_eq : ϕ ⟨y', y'M⟩ = 1 :=\n    mul_left_cancel₀ a_zero\n      (calc\n        «expr • » a (ϕ ⟨y', y'M⟩) = ϕ ⟨«expr • » a y', _⟩ := (ϕ.map_smul a ⟨y', y'M⟩).symm\n        _ = ϕ ⟨y, N_le_M yN⟩ := by simp only [a_smul_y']\n        _ = a := ϕy_eq\n        _ = a * 1 := (mul_one a).symm\n        )\n  have ϕy'_ne_zero : ϕ ⟨y', y'M⟩ ≠ 0 := by simpa only [ϕy'_eq] using one_ne_zero\n  -- `M' := ker (ϕ : M → R)` is smaller than `M` and `N' := ker (ϕ : N → R)` is smaller than `N`.\n  let M' : submodule R O := ϕ.ker.map M.subtype\n  let N' : submodule R O := (ϕ.comp (of_le N_le_M)).ker.map N.subtype\n  have M'_le_M : M' ≤ M := M.map_subtype_le ϕ.ker\n  have N'_le_M' : N' ≤ M' := by\n    intro x hx\n    simp only [mem_map, linear_map.mem_ker] at hx⊢\n    obtain ⟨⟨x, xN⟩, hx, rfl⟩ := hx\n    exact ⟨⟨x, N_le_M xN⟩, hx, rfl⟩\n  have N'_le_N : N' ≤ N := N.map_subtype_le (ϕ.comp (of_le N_le_M)).ker\n  -- So fill in those results as well.\n  refine' ⟨M', M'_le_M, N', N'_le_N, N'_le_M', _⟩\n  -- Note that `y'` is orthogonal to `M'`.\n  have y'_ortho_M' : ∀ (c : R), ∀ z ∈ M', «expr • » c y' + z = 0 → c = 0 :=\n    by\n    intro c x xM' hc\n    obtain ⟨⟨x, xM⟩, hx', rfl⟩ := submodule.mem_map.mp xM'\n    rw [linear_map.mem_ker] at hx'\n    have hc' : («expr • » c ⟨y', y'M⟩ + ⟨x, xM⟩ : M) = 0 := subtype.coe_injective hc\n    simpa only [linear_map.map_add, linear_map.map_zero, linear_map.map_smul, smul_eq_mul, add_zero, mul_eq_zero,\n      ϕy'_ne_zero, hx', or_false_iff] using congr_arg ϕ hc'\n  -- And `a • y'` is orthogonal to `N'`.\n  have ay'_ortho_N' : ∀ (c : R), ∀ z ∈ N', «expr • » c («expr • » a y') + z = 0 → c = 0 :=\n    by\n    intro c z zN' hc\n    refine' (mul_eq_zero.mp (y'_ortho_M' (a * c) z (N'_le_M' zN') _)).resolve_left a_zero\n    rw [mul_comm, mul_smul, hc]\n  -- So we can extend a basis for `N'` with `y`\n  refine' ⟨y'_ortho_M', ay'_ortho_N', fun n' bN' => ⟨_, _⟩⟩\n  · refine' basis.mk_fin_cons_of_le y yN bN' N'_le_N _ _\n    · intro c z zN' hc\n      refine' ay'_ortho_N' c z zN' _\n      rwa [← a_smul_y'] at hc\n    · intro z zN\n      obtain ⟨b, hb⟩ : _ ∣ ϕ ⟨z, N_le_M zN⟩ := generator_submodule_image_dvd_of_mem N_le_M ϕ zN\n      refine' ⟨-b, submodule.mem_map.mpr ⟨⟨_, N.sub_mem zN (N.smul_mem b yN)⟩, _, _⟩⟩\n      · refine' linear_map.mem_ker.mpr (show ϕ (⟨z, N_le_M zN⟩ - «expr • » b ⟨y, N_le_M yN⟩) = 0 from _)\n        rw [linear_map.map_sub, linear_map.map_smul, hb, ϕy_eq, smul_eq_mul, mul_comm, sub_self]\n      · simp only [sub_eq_add_neg, neg_smul]\n        rfl\n  -- And extend a basis for `M'` with `y'`\n  intro m' hn'm' bM'\n  refine' ⟨nat.succ_le_succ hn'm', _, _⟩\n  · refine' basis.mk_fin_cons_of_le y' y'M bM' M'_le_M y'_ortho_M' _\n    intro z zM\n    refine' ⟨-ϕ ⟨z, zM⟩, ⟨⟨z, zM⟩ - «expr • » (ϕ ⟨z, zM⟩) ⟨y', y'M⟩, linear_map.mem_ker.mpr _, _⟩⟩\n    · rw [linear_map.map_sub, linear_map.map_smul, ϕy'_eq, smul_eq_mul, mul_one, sub_self]\n    · rw [linear_map.map_sub, linear_map.map_smul, sub_eq_add_neg, neg_smul]\n      rfl\n  -- It remains to show the extended bases are compatible with each other.\n  intro as h\n  refine' ⟨fin.cons a as, _⟩\n  intro i\n  rw [basis.coe_mk_fin_cons_of_le, basis.coe_mk_fin_cons_of_le]\n  refine' Fin.cases _ (fun i => _) i\n  · simp only [fin.cons_zero, Fin.castLe_zero]\n    exact a_smul_y'.symm\n  · rw [Fin.castLe_succ]\n    simp only [fin.cons_succ, coe_of_le, h i]\n#align submodule.basis_of_pid_aux submodule.basis_of_pid_aux\n\n"}