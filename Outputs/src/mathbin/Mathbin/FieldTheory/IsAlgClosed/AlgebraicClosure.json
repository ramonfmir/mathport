{"to_splitting_field_eval_X_self":
 "/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\ntheorem to_splitting_field_eval_X_self {s : Finset (monic_irreducible k)} {f} (hf : f ∈ s) :\n    to_splitting_field k s (eval_X_self k f) = 0 :=\n  by\n  rw [to_splitting_field, eval_X_self, ← AlgHom.coe_toRingHom, hom_eval₂, AlgHom.coe_toRingHom, MvPolynomial.aeval_X,\n    dif_pos hf, ← algebra_map_eq, AlgHom.comp_algebraMap]\n  exact map_root_of_splits _ _ _\n#align to_splitting_field_eval_X_self to_splitting_field_eval_X_self\n\n",
 "span_eval_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem span_eval_ne_top : span_eval k ≠ «expr⊤» :=\n  by\n  rw [Ideal.ne_top_iff_one, span_eval, Ideal.span, ← Set.image_univ, Finsupp.mem_span_image_iff_total]\n  rintro ⟨v, _, hv⟩\n  replace hv := congr_arg (to_splitting_field k v.support) hv\n  rw [AlgHom.map_one, Finsupp.total_apply, Finsupp.sum, AlgHom.map_sum, Finset.sum_eq_zero] at hv\n  · exact zero_ne_one hv\n  intro j hj\n  rw [smul_eq_mul, AlgHom.map_mul, to_splitting_field_eval_X_self k hj, MulZeroClass.mul_zero]\n#align span_eval_ne_top span_eval_ne_top\n\n",
 "of_step_succ":
 "theorem of_step_succ (n : ℕ) : (of_step k (n + 1)).comp (to_step_succ k n) = of_step k n :=\n  RingHom.ext fun x =>\n    show ring.direct_limit.of (step k) (fun i j h => to_step_of_le k i j h) _ _ = _\n      by\n      convert ring.direct_limit.of_f n.le_succ x\n      ext x\n      exact (Nat.leRecOn_succ' x).symm\n#align of_step_succ of_step_succ\n\n",
 "le_max_ideal":
 "theorem le_max_ideal : span_eval k ≤ max_ideal k :=\n  (Classical.choose_spec <| Ideal.exists_le_maximal _ <| span_eval_ne_top k).2\n#align le_max_ideal le_max_ideal\n\n",
 "is_integral":
 "theorem step.is_integral (n) : ∀ z : step k n, is_integral k z :=\n  nat.rec_on n (fun z => is_integral_algebra_map) fun n ih z =>\n    is_integral_trans ih _ (adjoin_monic.is_integral (step k n) z : _)\n#align step.is_integral step.is_integral\n\n",
 "is_algebraic":
 "theorem is_algebraic : algebra.is_algebraic k (algebraic_closure k) := fun z =>\n  is_algebraic_iff_is_integral.2 <|\n    let ⟨n, x, hx⟩ := exists_of_step k z\n    hx ▸ map_is_integral (of_step_hom k n) (step.is_integral k n x)\n#align is_algebraic is_algebraic\n\n",
 "exists_root":
 "-- slow\ntheorem exists_root {f : Polynomial (algebraic_closure k)} (hfm : f.monic) (hfi : Irreducible f) :\n    ∃ x : algebraic_closure k, f.eval x = 0 :=\n  by\n  have : ∃ n p, Polynomial.map (of_step k n) p = f := by convert ring.direct_limit.polynomial.exists_of f\n  obtain ⟨n, p, rfl⟩ := this\n  rw [monic_map_iff] at hfm\n  have := hfm.irreducible_of_irreducible_map (of_step k n) p hfi\n  obtain ⟨x, hx⟩ := to_step_succ.exists_root k hfm this\n  refine' ⟨of_step k (n + 1) x, _⟩\n  rw [← of_step_succ k n, eval_map, ← hom_eval₂, hx, RingHom.map_zero]\n#align exists_root exists_root\n\n",
 "exists_of_step":
 "theorem exists_of_step (z : algebraic_closure k) : ∃ n x, of_step k n x = z :=\n  ring.direct_limit.exists_of z\n#align exists_of_step exists_of_step\n\n",
 "coe_to_step_of_le":
 "@[simp]\ntheorem coe_to_step_of_le (m n : ℕ) (h : m ≤ n) :\n    (to_step_of_le k m n h : step k m → step k n) = Nat.leRecOn h fun n => to_step_succ k n :=\n  rfl\n#align coe_to_step_of_le coe_to_step_of_le\n\n",
 "algebra_map_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem algebra_map_def {R : Type _} [CommSemiring R] [alg : Algebra R k] :\n    algebraMap R (algebraic_closure k) = (of_step k 0 : «expr →+* » k _).comp (@algebraMap _ _ _ _ alg) :=\n  rfl\n#align algebra_map_def algebra_map_def\n\n",
 "algebra_map":
 "theorem adjoin_monic.algebra_map : algebraMap k (adjoin_monic k) = (Ideal.Quotient.mk _).comp C :=\n  rfl\n#align adjoin_monic.algebra_map adjoin_monic.algebra_map\n\n"}