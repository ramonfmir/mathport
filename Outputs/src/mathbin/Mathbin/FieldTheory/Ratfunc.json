{"to_fraction_ring_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_fraction_ring_smul [SMul R (fraction_ring (polynomial K))] (c : R) (p : ratfunc K) :\n    to_fraction_ring («expr • » c p) = «expr • » c (to_fraction_ring p) :=\n  by\n  cases p\n  rw [← of_fraction_ring_smul]\n#align to_fraction_ring_smul to_fraction_ring_smul\n\n",
 "to_fraction_ring_ring_equiv_symm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem to_fraction_ring_ring_equiv_symm_eq :\n    (to_fraction_ring_ring_equiv K).symm =\n      (is_localization.alg_equiv (non_zero_divisors (polynomial K)) _ _).to_ring_equiv :=\n  by\n  ext x\n  simp [to_fraction_ring_ring_equiv, of_fraction_ring_eq, alg_equiv.coe_ring_equiv']\n#align to_fraction_ring_ring_equiv_symm_eq to_fraction_ring_ring_equiv_symm_eq\n\n",
 "to_fraction_ring_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem to_fraction_ring_injective : function.injective (to_fraction_ring : _ → fraction_ring (polynomial K))\n  | ⟨x⟩, ⟨y⟩, rfl => rfl\n#align to_fraction_ring_injective to_fraction_ring_injective\n\n",
 "to_fraction_ring_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem to_fraction_ring_eq :\n    (to_fraction_ring : ratfunc K → fraction_ring (polynomial K)) =\n      is_localization.alg_equiv (non_zero_divisors (polynomial K)) _ _ :=\n  funext fun ⟨x⟩ =>\n    localization.induction_on x fun x => by\n      simp only [localization.mk_eq_mk'_apply, of_fraction_ring_mk', is_localization.alg_equiv_apply, [anonymous],\n        is_localization.ring_equiv_of_ring_equiv_apply, is_localization.map_mk', RingEquiv.coe_toRingHom,\n        RingEquiv.refl_apply, SetLike.eta]\n#align to_fraction_ring_eq to_fraction_ring_eq\n\n",
 "smul_eq_C_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_eq_C_smul (x : ratfunc K) (r : K) : «expr • » r x = «expr • » (polynomial.C r) x :=\n  by\n  cases x\n  induction x\n  ·\n    rw [← of_fraction_ring_smul, ← of_fraction_ring_smul, localization.smul_mk, localization.smul_mk, smul_eq_mul,\n      polynomial.smul_eq_C_mul]\n  · simp only\n#align smul_eq_C_smul smul_eq_C_smul\n\n",
 "smul_eq_C_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_eq_C_mul (r : K) (x : ratfunc K) : «expr • » r x = C r * x := by rw [algebra.smul_def, algebra_map_eq_C]\n#align smul_eq_C_mul smul_eq_C_mul\n\n",
 "of_fraction_ring_zero":
 "theorem of_fraction_ring_zero : (of_fraction_ring 0 : ratfunc K) = 0 := by unfold has_zero.zero ratfunc.zero\n#align of_fraction_ring_zero of_fraction_ring_zero\n\n",
 "of_fraction_ring_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_sub (p q : fraction_ring (polynomial K)) :\n    of_fraction_ring (p - q) = of_fraction_ring p - of_fraction_ring q := by unfold has_sub.sub ratfunc.sub\n#align of_fraction_ring_sub of_fraction_ring_sub\n\n",
 "of_fraction_ring_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- cannot reproduce\ntheorem of_fraction_ring_smul [SMul R (fraction_ring (polynomial K))] (c : R) (p : fraction_ring (polynomial K)) :\n    of_fraction_ring («expr • » c p) = «expr • » c (of_fraction_ring p) := by unfold has_smul.smul ratfunc.smul\n#align of_fraction_ring_smul of_fraction_ring_smul\n\n",
 "of_fraction_ring_one":
 "theorem of_fraction_ring_one : (of_fraction_ring 1 : ratfunc K) = 1 := by unfold has_one.one ratfunc.one\n#align of_fraction_ring_one of_fraction_ring_one\n\n",
 "of_fraction_ring_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_neg (p : fraction_ring (polynomial K)) : of_fraction_ring (-p) = -of_fraction_ring p := by\n  unfold has_neg.neg ratfunc.neg\n#align of_fraction_ring_neg of_fraction_ring_neg\n\n",
 "of_fraction_ring_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_mul (p q : fraction_ring (polynomial K)) :\n    of_fraction_ring (p * q) = of_fraction_ring p * of_fraction_ring q := by unfold has_mul.mul ratfunc.mul\n#align of_fraction_ring_mul of_fraction_ring_mul\n\n",
 "of_fraction_ring_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_mk' (x : polynomial K) (y : non_zero_divisors (polynomial K)) :\n    of_fraction_ring (is_localization.mk' _ x y) = is_localization.mk' (ratfunc K) x y := by\n  rw [is_fraction_ring.mk'_eq_div, is_fraction_ring.mk'_eq_div, ← mk_eq_div', ← mk_eq_div]\n#align of_fraction_ring_mk' of_fraction_ring_mk'\n\n",
 "of_fraction_ring_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_inv (p : fraction_ring (polynomial K)) : of_fraction_ring p⁻¹ = (of_fraction_ring p)⁻¹ := by\n  unfold has_inv.inv ratfunc.inv\n#align of_fraction_ring_inv of_fraction_ring_inv\n\n",
 "of_fraction_ring_injective":
 "/-\nCopyright (c) 2021 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\ntheorem of_fraction_ring_injective : function.injective (of_fraction_ring : _ → ratfunc K) := fun x y =>\n  of_fraction_ring.inj\n#align of_fraction_ring_injective of_fraction_ring_injective\n\n",
 "of_fraction_ring_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem of_fraction_ring_eq :\n    (of_fraction_ring : fraction_ring (polynomial K) → ratfunc K) =\n      is_localization.alg_equiv (non_zero_divisors (polynomial K)) _ _ :=\n  funext fun x =>\n    localization.induction_on x fun x => by\n      simp only [is_localization.alg_equiv_apply, is_localization.ring_equiv_of_ring_equiv_apply, [anonymous],\n        localization.mk_eq_mk'_apply, is_localization.map_mk', of_fraction_ring_mk', RingEquiv.coe_toRingHom,\n        RingEquiv.refl_apply, SetLike.eta]\n#align of_fraction_ring_eq of_fraction_ring_eq\n\n",
 "of_fraction_ring_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_div (p q : fraction_ring (polynomial K)) :\n    of_fraction_ring (p / q) = of_fraction_ring p / of_fraction_ring q := by unfold has_div.div ratfunc.div\n#align of_fraction_ring_div of_fraction_ring_div\n\n",
 "of_fraction_ring_comp_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_comp_algebra_map :\n    of_fraction_ring ∘ algebra_map (polynomial K) (fraction_ring (polynomial K)) = algebra_map _ _ :=\n  funext of_fraction_ring_algebra_map\n#align of_fraction_ring_comp_algebra_map of_fraction_ring_comp_algebra_map\n\n",
 "of_fraction_ring_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_algebra_map (x : polynomial K) :\n    of_fraction_ring (algebra_map _ (fraction_ring (polynomial K)) x) = algebra_map _ _ x := by rw [← mk_one, mk_one']\n#align of_fraction_ring_algebra_map of_fraction_ring_algebra_map\n\n",
 "of_fraction_ring_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem of_fraction_ring_add (p q : fraction_ring (polynomial K)) :\n    of_fraction_ring (p + q) = of_fraction_ring p + of_fraction_ring q := by unfold has_add.add ratfunc.add\n#align of_fraction_ring_add of_fraction_ring_add\n\n",
 "num_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem num_zero : num (0 : ratfunc K) = 0 := by convert num_div' (0 : polynomial K) one_ne_zero <;> simp\n#align num_zero num_zero\n\n",
 "num_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem num_one : num (1 : ratfunc K) = 1 := by convert num_div (1 : polynomial K) 1 <;> simp\n#align num_one num_one\n\n",
 "num_ne_zero":
 "theorem num_ne_zero {x : ratfunc K} (hx : x ≠ 0) : num x ≠ 0 :=\n  mt num_eq_zero_iff.mp hx\n#align num_ne_zero num_ne_zero\n\n",
 "num_mul_eq_mul_denom_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem num_mul_eq_mul_denom_iff {x : ratfunc K} {p q : polynomial K} (hq : q ≠ 0) :\n    x.num * q = p * x.denom ↔ x = algebra_map _ _ p / algebra_map _ _ q :=\n  by\n  rw [← (algebra_map_injective K).eq_iff, eq_div_iff (algebra_map_ne_zero hq)]\n  conv_rhs => rw [← num_div_denom x]\n  rw [RingHom.map_mul, RingHom.map_mul, div_eq_mul_inv, mul_assoc, mul_comm (has_inv.inv _), ← mul_assoc, ←\n    div_eq_mul_inv, div_eq_iff]\n  exact algebra_map_ne_zero (denom_ne_zero x)\n#align num_mul_eq_mul_denom_iff num_mul_eq_mul_denom_iff\n\n",
 "num_mul_dvd":
 "theorem num_mul_dvd (x y : ratfunc K) : num (x * y) ∣ num x * num y :=\n  by\n  by_cases hx : x = 0\n  · simp [hx]\n  by_cases hy : y = 0\n  · simp [hy]\n  rw [num_dvd (mul_ne_zero (num_ne_zero hx) (num_ne_zero hy))]\n  refine' ⟨x.denom * y.denom, mul_ne_zero (denom_ne_zero x) (denom_ne_zero y), _⟩\n  rw [RingHom.map_mul, RingHom.map_mul, ← div_mul_div_comm, num_div_denom, num_div_denom]\n#align num_mul_dvd num_mul_dvd\n\n",
 "num_mul_denom_add_denom_mul_num_ne_zero":
 "theorem num_mul_denom_add_denom_mul_num_ne_zero {x y : ratfunc K} (hxy : x + y ≠ 0) :\n    x.num * y.denom + x.denom * y.num ≠ 0 := by\n  intro h_zero\n  have h := num_denom_add x y\n  rw [h_zero, zero_mul] at h\n  exact (mul_ne_zero (num_ne_zero hxy) (mul_ne_zero x.denom_ne_zero y.denom_ne_zero)) h\n#align num_mul_denom_add_denom_mul_num_ne_zero num_mul_denom_add_denom_mul_num_ne_zero\n\n",
 "num_eq_zero_iff":
 "@[simp]\ntheorem num_eq_zero_iff {x : ratfunc K} : num x = 0 ↔ x = 0 :=\n  ⟨fun h => by rw [← num_div_denom x, h, RingHom.map_zero, zero_div], fun h => h.symm ▸ num_zero⟩\n#align num_eq_zero_iff num_eq_zero_iff\n\n",
 "num_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem num_dvd {x : ratfunc K} {p : polynomial K} (hp : p ≠ 0) :\n    num x ∣ p ↔ ∃ (q : polynomial K)(hq : q ≠ 0), x = algebra_map _ _ p / algebra_map _ _ q :=\n  by\n  constructor\n  · rintro ⟨q, rfl⟩\n    obtain ⟨hx, hq⟩ := mul_ne_zero_iff.mp hp\n    use denom x * q\n    rw [RingHom.map_mul, RingHom.map_mul, ← div_mul_div_comm, div_self, mul_one, num_div_denom]\n    · exact ⟨mul_ne_zero (denom_ne_zero x) hq, rfl⟩\n    · exact algebra_map_ne_zero hq\n  · rintro ⟨q, hq, rfl⟩\n    exact num_div_dvd p hq\n#align num_dvd num_dvd\n\n",
 "num_div_dvd'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- A version of `num_div_dvd` with the LHS in simp normal form -/\n@[simp]\ntheorem num_div_dvd' (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    C (q / gcd p q).leading_coeff⁻¹ * (p / gcd p q) ∣ p := by simpa using num_div_dvd p hq\n#align num_div_dvd' num_div_dvd'\n\n",
 "num_div_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem num_div_dvd (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    num (algebra_map _ _ p / algebra_map _ _ q) ∣ p :=\n  by\n  rw [num_div _ q, C_mul_dvd]\n  · exact EuclideanDomain.div_dvd_of_dvd (gcd_dvd_left p q)\n  · simpa only [ne.def, inv_eq_zero, polynomial.leading_coeff_eq_zero] using right_div_gcd_ne_zero hq\n#align num_div_dvd num_div_dvd\n\n",
 "num_div_denom":
 "@[simp]\ntheorem num_div_denom (x : ratfunc K) : algebra_map _ _ (num x) / algebra_map _ _ (denom x) = x :=\n  x.induction_on fun p q hq => by\n    have q_div_ne_zero := right_div_gcd_ne_zero hq\n    rw [num_div p q, denom_div p hq, RingHom.map_mul, RingHom.map_mul, mul_div_mul_left, div_eq_div_iff, ←\n      RingHom.map_mul, ← RingHom.map_mul, mul_comm _ q, ← EuclideanDomain.mul_div_assoc, ←\n      EuclideanDomain.mul_div_assoc, mul_comm]\n    · apply gcd_dvd_right\n    · apply gcd_dvd_left\n    · exact algebra_map_ne_zero q_div_ne_zero\n    · exact algebra_map_ne_zero hq\n    · refine' algebra_map_ne_zero (mt polynomial.C_eq_zero.mp _)\n      exact inv_ne_zero (polynomial.leading_coeff_ne_zero.mpr q_div_ne_zero)\n#align num_div_denom num_div_denom\n\n",
 "num_div'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\nprivate theorem num_div' (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    num (algebra_map _ _ p / algebra_map _ _ q) = polynomial.C (q / gcd p q).leading_coeff⁻¹ * (p / gcd p q) := by\n  rw [Num, num_denom_div _ hq]\n#align num_div' num_div'\n\n",
 "num_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem num_div (p q : polynomial K) :\n    num (algebra_map _ _ p / algebra_map _ _ q) = polynomial.C (q / gcd p q).leading_coeff⁻¹ * (p / gcd p q) :=\n  by\n  by_cases hq : q = 0\n  · simp [hq]\n  · exact num_div' p hq\n#align num_div num_div\n\n",
 "num_denom_neg":
 "theorem num_denom_neg (x : ratfunc K) : (-x).num * x.denom = -x.num * (-x).denom := by\n  rw [num_mul_eq_mul_denom_iff (denom_ne_zero x), _root_.map_neg, neg_div, num_div_denom]\n#align num_denom_neg num_denom_neg\n\n",
 "num_denom_mul":
 "theorem num_denom_mul (x y : ratfunc K) : (x * y).num * (x.denom * y.denom) = x.num * y.num * (x * y).denom :=\n  (num_mul_eq_mul_denom_iff (mul_ne_zero (denom_ne_zero x) (denom_ne_zero y))).mpr <| by\n    conv_lhs => rw [← num_div_denom x, ← num_div_denom y, div_mul_div_comm, ← RingHom.map_mul, ← RingHom.map_mul]\n#align num_denom_mul num_denom_mul\n\n",
 "num_denom_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem num_denom_div (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    num_denom (algebra_map _ _ p / algebra_map _ _ q) =\n      (polynomial.C (q / gcd p q).leading_coeff⁻¹ * (p / gcd p q),\n        polynomial.C (q / gcd p q).leading_coeff⁻¹ * (q / gcd p q)) :=\n  by\n  rw [num_denom, lift_on'_div, if_neg hq]\n  intro p\n  rw [if_pos rfl, if_neg (one_ne_zero' (polynomial K))]\n  simp\n#align num_denom_div num_denom_div\n\n",
 "num_denom_add":
 "theorem num_denom_add (x y : ratfunc K) :\n    (x + y).num * (x.denom * y.denom) = (x.num * y.denom + x.denom * y.num) * (x + y).denom :=\n  (num_mul_eq_mul_denom_iff (mul_ne_zero (denom_ne_zero x) (denom_ne_zero y))).mpr <|\n    by\n    conv_lhs => rw [← num_div_denom x, ← num_div_denom y]\n    rw [div_add_div, RingHom.map_mul, RingHom.map_add, RingHom.map_mul, RingHom.map_mul]\n    · exact algebra_map_ne_zero (denom_ne_zero x)\n    · exact algebra_map_ne_zero (denom_ne_zero y)\n#align num_denom_add num_denom_add\n\n",
 "num_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem num_algebra_map (p : polynomial K) : num (algebra_map _ _ p) = p := by convert num_div p 1 <;> simp\n#align num_algebra_map num_algebra_map\n\n",
 "num_X":
 "@[simp]\ntheorem num_X : num (X : ratfunc K) = polynomial.X :=\n  num_algebra_map _\n#align num_X num_X\n\n",
 "num_C":
 "@[simp]\ntheorem num_C (c : K) : num (C c) = polynomial.C c :=\n  num_algebra_map _\n#align num_C num_C\n\n",
 "nat_degree_num_mul_right_sub_nat_degree_denom_mul_left_eq_int_degree":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem nat_degree_num_mul_right_sub_nat_degree_denom_mul_left_eq_int_degree {x : ratfunc K} (hx : x ≠ 0)\n    {s : polynomial K} (hs : s ≠ 0) : ((x.num * s).nat_degree : ℤ) - (s * x.denom).nat_degree = x.int_degree :=\n  by\n  apply\n    nat_degree_sub_eq_of_prod_eq (mul_ne_zero (num_ne_zero hx) hs) (mul_ne_zero hs x.denom_ne_zero) (num_ne_zero hx)\n      x.denom_ne_zero\n  rw [mul_assoc]\n#align\n  nat_degree_num_mul_right_sub_nat_degree_denom_mul_left_eq_int_degree nat_degree_num_mul_right_sub_nat_degree_denom_mul_left_eq_int_degree\n\n",
 "mul_inv_cancel":
 "#print mul_inv_cancel /-\n-- Auxiliary lemma for the `field` instance\ntheorem mul_inv_cancel : ∀ {p : ratfunc K} (hp : p ≠ 0), p * p⁻¹ = 1\n  | ⟨p⟩, h => by\n    have : p ≠ 0 := fun hp => h <| by rw [hp, of_fraction_ring_zero]\n    simpa only [← of_fraction_ring_inv, ← of_fraction_ring_mul, ← of_fraction_ring_one] using _root_.mul_inv_cancel this\n#align mul_inv_cancel mul_inv_cancel\n-/\n\n",
 "monic_denom":
 "theorem monic_denom (x : ratfunc K) : (denom x).monic :=\n  x.induction_on fun p q hq => by\n    rw [denom_div p hq, mul_comm]\n    exact polynomial.monic_mul_leading_coeff_inv (right_div_gcd_ne_zero hq)\n#align monic_denom monic_denom\n\n",
 "mk_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_zero (p : polynomial K) : ratfunc.mk p 0 = of_fraction_ring 0 := by\n  rw [mk_eq_div', RingHom.map_zero, div_zero]\n#align mk_zero mk_zero\n\n",
 "mk_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mk_smul (c : R) (p q : polynomial K) : ratfunc.mk («expr • » c p) q = «expr • » c (ratfunc.mk p q) :=\n  by\n  by_cases hq : q = 0\n  · rw [hq, mk_zero, mk_zero, ← of_fraction_ring_smul, smul_zero]\n  · rw [mk_eq_localization_mk _ hq, mk_eq_localization_mk _ hq, ← localization.smul_mk, ← of_fraction_ring_smul]\n#align mk_smul mk_smul\n\n",
 "mk_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_one' (p : polynomial K) : ratfunc.mk p 1 = of_fraction_ring (algebra_map _ _ p) := by\n  rw [← is_localization.mk'_one (fraction_ring (polynomial K)) p, ← mk_coe_def, Submonoid.coe_one]\n#align mk_one' mk_one'\n\n",
 "mk_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_one (x : polynomial K) : ratfunc.mk x 1 = algebra_map _ _ x :=\n  rfl\n#align mk_one mk_one\n\n",
 "mk_eq_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_eq_mk {p q p' q' : polynomial K} (hq : q ≠ 0) (hq' : q' ≠ 0) :\n    ratfunc.mk p q = ratfunc.mk p' q' ↔ p * q' = p' * q := by\n  rw [mk_def_of_ne _ hq, mk_def_of_ne _ hq', of_fraction_ring_injective.eq_iff, is_localization.mk'_eq_iff_eq,\n    [anonymous], [anonymous], (is_fraction_ring.injective (polynomial K) (fraction_ring (polynomial K))).eq_iff]\n#align mk_eq_mk mk_eq_mk\n\n",
 "mk_eq_localization_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_eq_localization_mk (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    ratfunc.mk p q = of_fraction_ring (localization.mk p ⟨q, mem_non_zero_divisors_iff_ne_zero.mpr hq⟩) := by\n  rw [mk_def_of_ne, localization.mk_eq_mk']\n#align mk_eq_localization_mk mk_eq_localization_mk\n\n",
 "mk_eq_div'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_eq_div' (p q : polynomial K) : ratfunc.mk p q = of_fraction_ring (algebra_map _ _ p / algebra_map _ _ q) :=\n  by unfold ratfunc.mk\n#align mk_eq_div' mk_eq_div'\n\n",
 "mk_eq_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem mk_eq_div (p q : polynomial K) : ratfunc.mk p q = algebra_map _ _ p / algebra_map _ _ q := by\n  simp only [mk_eq_div', of_fraction_ring_div, of_fraction_ring_algebra_map]\n#align mk_eq_div mk_eq_div\n\n",
 "mk_def_of_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_def_of_ne (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    ratfunc.mk p q = of_fraction_ring (is_localization.mk' _ p ⟨q, mem_non_zero_divisors_iff_ne_zero.mpr hq⟩) :=\n  mk_def_of_mem p _\n#align mk_def_of_ne mk_def_of_ne\n\n",
 "mk_def_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_def_of_mem (p : polynomial K) {q} (hq : q ∈ non_zero_divisors (polynomial K)) :\n    ratfunc.mk p q = of_fraction_ring (is_localization.mk' _ p ⟨q, hq⟩) := by simp only [← mk_coe_def, [anonymous]]\n#align mk_def_of_mem mk_def_of_mem\n\n",
 "mk_coe_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem mk_coe_def (p : polynomial K) (q : non_zero_divisors (polynomial K)) :\n    ratfunc.mk p q = of_fraction_ring (is_localization.mk' _ p q) := by\n  simp only [mk_eq_div', ← localization.mk_eq_mk', fraction_ring.mk_eq_div]\n#align mk_coe_def mk_coe_def\n\n",
 "map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_injective [MonoidHomClass F (polynomial R) (polynomial S)] (φ : F)\n    (hφ : non_zero_divisors (polynomial R) ≤ (non_zero_divisors (polynomial S)).comap φ) (hf : function.injective φ) :\n    function.injective (map φ hφ) := by\n  rintro ⟨x⟩ ⟨y⟩ h; induction x; induction y\n  ·\n    simpa only [map_apply_of_fraction_ring_mk, of_fraction_ring_injective.eq_iff, localization.mk_eq_mk_iff,\n      localization.r_iff_exists, mul_cancel_right_coe_non_zero_divisor, exists_const, [anonymous], ← map_mul,\n      hf.eq_iff] using h\n  · rfl\n  · rfl\n#align map_injective map_injective\n\n",
 "map_denom_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_denom_ne_zero {L F : Type _} [Zero L] [ZeroHomClass F (polynomial K) L] (φ : F) (hφ : function.injective φ)\n    (f : ratfunc K) : φ f.denom ≠ 0 := fun H => (denom_ne_zero f) ((map_eq_zero_iff φ hφ).mp H)\n#align map_denom_ne_zero map_denom_ne_zero\n\n",
 "map_apply_of_fraction_ring_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_apply_of_fraction_ring_mk [MonoidHomClass F (polynomial R) (polynomial S)] (φ : F)\n    (hφ : non_zero_divisors (polynomial R) ≤ (non_zero_divisors (polynomial S)).comap φ) (n : polynomial R)\n    (d : non_zero_divisors (polynomial R)) :\n    map φ hφ (of_fraction_ring (localization.mk n d)) = of_fraction_ring (localization.mk (φ n) ⟨φ d, hφ d.prop⟩) :=\n  by\n  convert lift_on_of_fraction_ring_mk _ _ _ _\n  rw [dif_pos]\n#align map_apply_of_fraction_ring_mk map_apply_of_fraction_ring_mk\n\n",
 "map_apply_div_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_apply_div_ne_zero {R F : Type _} [CommRing R] [IsDomain R] [MonoidHomClass F (polynomial K) (polynomial R)]\n    (φ : F) (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors (polynomial R)).comap φ) (p q : polynomial K)\n    (hq : q ≠ 0) : map φ hφ (algebra_map _ _ p / algebra_map _ _ q) = algebra_map _ _ (φ p) / algebra_map _ _ (φ q) :=\n  by\n  have hq' : φ q ≠ 0 := non_zero_divisors.ne_zero (hφ (mem_non_zero_divisors_iff_ne_zero.mpr hq))\n  simp only [← mk_eq_div, mk_eq_localization_mk _ hq, map_apply_of_fraction_ring_mk, mk_eq_localization_mk _ hq',\n    [anonymous]]\n#align map_apply_div_ne_zero map_apply_div_ne_zero\n\n",
 "map_apply_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem map_apply_div {R F : Type _} [CommRing R] [IsDomain R] [MonoidWithZeroHomClass F (polynomial K) (polynomial R)]\n    (φ : F) (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors (polynomial R)).comap φ) (p q : polynomial K) :\n    map φ hφ (algebra_map _ _ p / algebra_map _ _ q) = algebra_map _ _ (φ p) / algebra_map _ _ (φ q) :=\n  by\n  rcases eq_or_ne q 0 with (rfl | hq)\n  · have : (0 : ratfunc K) = algebra_map (polynomial K) _ 0 / algebra_map (polynomial K) _ 1 := by simp\n    rw [map_zero, map_zero, map_zero, div_zero, div_zero, this, map_apply_div_ne_zero, map_one, map_one, div_one,\n      map_zero, map_zero]\n    exact one_ne_zero\n  exact map_apply_div_ne_zero _ _ _ _ hq\n#align map_apply_div map_apply_div\n\n",
 "map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem map_apply {R F : Type _} [CommRing R] [IsDomain R] [MonoidHomClass F (polynomial K) (polynomial R)] (φ : F)\n    (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors (polynomial R)).comap φ) (f : ratfunc K) :\n    map φ hφ f = algebra_map _ _ (φ f.num) / algebra_map _ _ (φ f.denom) :=\n  by\n  rw [← num_div_denom f, map_apply_div_ne_zero, num_div_denom f]\n  exact denom_ne_zero _\n#align map_apply map_apply\n\n",
 "lift_ring_hom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem lift_ring_hom_injective [nontrivial R] (φ : «expr →+* » (polynomial R) L) (hφ : function.injective φ)\n    (hφ' : non_zero_divisors (polynomial R) ≤ (non_zero_divisors L).comap φ :=\n      non_zero_divisors_le_comap_non_zero_divisors_of_injective _ hφ) :\n    function.injective (lift_ring_hom φ hφ') :=\n  lift_monoid_with_zero_hom_injective _ hφ\n#align lift_ring_hom_injective lift_ring_hom_injective\n\n",
 "lift_ring_hom_apply_of_fraction_ring_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem lift_ring_hom_apply_of_fraction_ring_mk (φ : «expr →+* » (polynomial R) L)\n    (hφ : non_zero_divisors (polynomial R) ≤ (non_zero_divisors L).comap φ) (n : polynomial R)\n    (d : non_zero_divisors (polynomial R)) : lift_ring_hom φ hφ (of_fraction_ring (localization.mk n d)) = φ n / φ d :=\n  lift_monoid_with_zero_hom_apply_of_fraction_ring_mk _ _ _ _\n#align lift_ring_hom_apply_of_fraction_ring_mk lift_ring_hom_apply_of_fraction_ring_mk\n\n",
 "lift_ring_hom_apply_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem lift_ring_hom_apply_div {L : Type _} [Field L] (φ : «expr →+* » (polynomial K) L)\n    (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors L).comap φ) (p q : polynomial K) :\n    lift_ring_hom φ hφ (algebra_map _ _ p / algebra_map _ _ q) = φ p / φ q :=\n  lift_monoid_with_zero_hom_apply_div _ _ _ _\n#align lift_ring_hom_apply_div lift_ring_hom_apply_div\n\n",
 "lift_ring_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem lift_ring_hom_apply {L : Type _} [Field L] (φ : «expr →+* » (polynomial K) L)\n    (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors L).comap φ) (f : ratfunc K) :\n    lift_ring_hom φ hφ f = φ f.num / φ f.denom :=\n  lift_monoid_with_zero_hom_apply _ _ _\n#align lift_ring_hom_apply lift_ring_hom_apply\n\n",
 "lift_on_of_fraction_ring_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n-- Fix timeout by manipulating elaboration order\ntheorem lift_on_of_fraction_ring_mk {P : Sort v} (n : polynomial K) (d : non_zero_divisors (polynomial K))\n    (f : ∀ p q : polynomial K, P)\n    (H :\n      ∀ {p q p' q'} (hq : q ∈ non_zero_divisors (polynomial K)) (hq' : q' ∈ non_zero_divisors (polynomial K)),\n        p * q' = p' * q → f p q = f p' q') :\n    ratfunc.lift_on (of_fraction_ring (localization.mk n d)) f @H = f n d :=\n  by\n  unfold ratfunc.lift_on\n  exact localization.lift_on_mk _ _ _ _\n#align lift_on_of_fraction_ring_mk lift_on_of_fraction_ring_mk\n\n",
 "lift_on_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem lift_on_mk {P : Sort v} (p q : polynomial K) (f : ∀ p q : polynomial K, P) (f0 : ∀ p, f p 0 = f 0 1)\n    (H' : ∀ {p q p' q'} (hq : q ≠ 0) (hq' : q' ≠ 0), p * q' = p' * q → f p q = f p' q')\n    (H :\n      ∀ {p q p' q'} (hq : q ∈ non_zero_divisors (polynomial K)) (hq' : q' ∈ non_zero_divisors (polynomial K)),\n        p * q' = p' * q → f p q = f p' q' :=\n      fun p q p' q' hq hq' h => H' (non_zero_divisors.ne_zero hq) (non_zero_divisors.ne_zero hq') h) :\n    (ratfunc.mk p q).lift_on f @H = f p q := by\n  by_cases hq : q = 0\n  · subst hq\n    simp only [mk_zero, f0, ← localization.mk_zero 1, localization.lift_on_mk, lift_on_of_fraction_ring_mk,\n      Submonoid.coe_one]\n  · simp only [mk_eq_localization_mk _ hq, localization.lift_on_mk, lift_on_of_fraction_ring_mk, [anonymous]]\n#align lift_on_mk lift_on_mk\n\n",
 "lift_on_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem lift_on_div {P : Sort v} (p q : polynomial K) (f : ∀ p q : polynomial K, P) (f0 : ∀ p, f p 0 = f 0 1)\n    (H' : ∀ {p q p' q'} (hq : q ≠ 0) (hq' : q' ≠ 0), p * q' = p' * q → f p q = f p' q')\n    (H :\n      ∀ {p q p' q'} (hq : q ∈ non_zero_divisors (polynomial K)) (hq' : q' ∈ non_zero_divisors (polynomial K)),\n        p * q' = p' * q → f p q = f p' q' :=\n      fun p q p' q' hq hq' h => H' (non_zero_divisors.ne_zero hq) (non_zero_divisors.ne_zero hq') h) :\n    (algebra_map _ (ratfunc K) p / algebra_map _ _ q).lift_on f @H = f p q := by\n  rw [← mk_eq_div, lift_on_mk _ _ f f0 @H']\n#align lift_on_div lift_on_div\n\n",
 "lift_on_condition_of_lift_on'_condition":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem lift_on_condition_of_lift_on'_condition {P : Sort v} {f : ∀ p q : polynomial K, P}\n    (H : ∀ {p q a} (hq : q ≠ 0) (ha : a ≠ 0), f (a * p) (a * q) = f p q) ⦃p q p' q' : polynomial K⦄ (hq : q ≠ 0)\n    (hq' : q' ≠ 0) (h : p * q' = p' * q) : f p q = f p' q' :=\n  by\n  have H0 : f 0 q = f 0 q' := by\n    calc\n      f 0 q = f (q' * 0) (q' * q) := (H hq hq').symm\n      _ = f (q * 0) (q * q') := by rw [mul_zero, mul_zero, mul_comm]\n      _ = f 0 q' := H hq' hq\n      \n  by_cases hp : p = 0\n  · simp only [hp, hq, zero_mul, or_false_iff, zero_eq_mul] at h⊢\n    rw [h, H0]\n  by_cases hp' : p' = 0\n  · simpa only [hp, hp', hq', zero_mul, or_self_iff, mul_eq_zero] using h\n  calc\n    f p q = f (p' * p) (p' * q) := (H hq hp').symm\n    _ = f (p * p') (p * q') := by rw [mul_comm p p', h]\n    _ = f p' q' := H hq' hp\n    \n#align lift_on_condition_of_lift_on'_condition lift_on_condition_of_lift_on'_condition\n\n",
 "lift_on'_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n-- f\ntheorem lift_on'_mk {P : Sort v} (p q : polynomial K) (f : ∀ p q : polynomial K, P) (f0 : ∀ p, f p 0 = f 0 1)\n    (H : ∀ {p q a} (hq : q ≠ 0) (ha : a ≠ 0), f (a * p) (a * q) = f p q) : (ratfunc.mk p q).lift_on' f @H = f p q :=\n  by\n  rw [ratfunc.lift_on', ratfunc.lift_on_mk _ _ _ f0]\n  exact lift_on_condition_of_lift_on'_condition @H\n#align lift_on'_mk lift_on'_mk\n\n",
 "lift_on'_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem lift_on'_div {P : Sort v} (p q : polynomial K) (f : ∀ p q : polynomial K, P) (f0 : ∀ p, f p 0 = f 0 1) (H) :\n    (algebra_map _ (ratfunc K) p / algebra_map _ _ q).lift_on' f @H = f p q :=\n  by\n  rw [ratfunc.lift_on', lift_on_div _ _ _ f0]\n  exact lift_on_condition_of_lift_on'_condition @H\n#align lift_on'_div lift_on'_div\n\n",
 "lift_monoid_with_zero_hom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem lift_monoid_with_zero_hom_injective [nontrivial R] (φ : «expr →*₀ » (polynomial R) G₀)\n    (hφ : function.injective φ)\n    (hφ' : non_zero_divisors (polynomial R) ≤ (non_zero_divisors G₀).comap φ :=\n      non_zero_divisors_le_comap_non_zero_divisors_of_injective _ hφ) :\n    function.injective (lift_monoid_with_zero_hom φ hφ') :=\n  by\n  rintro ⟨x⟩ ⟨y⟩; induction x; induction y\n  · simp_rw [lift_monoid_with_zero_hom_apply_of_fraction_ring_mk, localization.mk_eq_mk_iff]\n    intro h\n    refine' localization.r_of_eq _\n    simpa only [← hφ.eq_iff, map_mul] using mul_eq_mul_of_div_eq_div _ _ _ _ h.symm <;>\n      exact map_ne_zero_of_mem_non_zero_divisors _ hφ (SetLike.coe_mem _)\n  · exact fun _ => rfl\n  · exact fun _ => rfl\n#align lift_monoid_with_zero_hom_injective lift_monoid_with_zero_hom_injective\n\n",
 "lift_monoid_with_zero_hom_apply_of_fraction_ring_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n-- TODO: Generalize to `fun_like` classes,\ntheorem lift_monoid_with_zero_hom_apply_of_fraction_ring_mk (φ : «expr →*₀ » (polynomial R) G₀)\n    (hφ : non_zero_divisors (polynomial R) ≤ (non_zero_divisors G₀).comap φ) (n : polynomial R)\n    (d : non_zero_divisors (polynomial R)) :\n    lift_monoid_with_zero_hom φ hφ (of_fraction_ring (localization.mk n d)) = φ n / φ d :=\n  lift_on_of_fraction_ring_mk _ _ _ _\n#align lift_monoid_with_zero_hom_apply_of_fraction_ring_mk lift_monoid_with_zero_hom_apply_of_fraction_ring_mk\n\n",
 "lift_monoid_with_zero_hom_apply_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem lift_monoid_with_zero_hom_apply_div {L : Type _} [comm_group_with_zero L]\n    (φ : MonoidWithZeroHom (polynomial K) L) (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors L).comap φ)\n    (p q : polynomial K) : lift_monoid_with_zero_hom φ hφ (algebra_map _ _ p / algebra_map _ _ q) = φ p / φ q :=\n  by\n  rcases eq_or_ne q 0 with (rfl | hq)\n  · simp only [div_zero, map_zero]\n  simpa only [← mk_eq_div, mk_eq_localization_mk _ hq, lift_monoid_with_zero_hom_apply_of_fraction_ring_mk]\n#align lift_monoid_with_zero_hom_apply_div lift_monoid_with_zero_hom_apply_div\n\n",
 "lift_monoid_with_zero_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →*₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem lift_monoid_with_zero_hom_apply {L : Type _} [comm_group_with_zero L] (φ : «expr →*₀ » (polynomial K) L)\n    (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors L).comap φ) (f : ratfunc K) :\n    lift_monoid_with_zero_hom φ hφ f = φ f.num / φ f.denom := by\n  rw [← num_div_denom f, lift_monoid_with_zero_hom_apply_div, num_div_denom]\n#align lift_monoid_with_zero_hom_apply lift_monoid_with_zero_hom_apply\n\n",
 "lift_alg_hom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem lift_alg_hom_injective (φ : «expr →ₐ[ ] » (polynomial K) S L) (hφ : function.injective φ)\n    (hφ' : non_zero_divisors (polynomial K) ≤ (non_zero_divisors L).comap φ :=\n      non_zero_divisors_le_comap_non_zero_divisors_of_injective _ hφ) :\n    function.injective (lift_alg_hom φ hφ') :=\n  lift_monoid_with_zero_hom_injective _ hφ\n#align lift_alg_hom_injective lift_alg_hom_injective\n\n",
 "lift_alg_hom_apply_of_fraction_ring_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem lift_alg_hom_apply_of_fraction_ring_mk (n : polynomial K) (d : non_zero_divisors (polynomial K)) :\n    lift_alg_hom φ hφ (of_fraction_ring (localization.mk n d)) = φ n / φ d :=\n  lift_monoid_with_zero_hom_apply_of_fraction_ring_mk _ _ _ _\n#align lift_alg_hom_apply_of_fraction_ring_mk lift_alg_hom_apply_of_fraction_ring_mk\n\n",
 "lift_alg_hom_apply_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem lift_alg_hom_apply_div (p q : polynomial K) :\n    lift_alg_hom φ hφ (algebra_map _ _ p / algebra_map _ _ q) = φ p / φ q :=\n  lift_monoid_with_zero_hom_apply_div _ _ _ _\n#align lift_alg_hom_apply_div lift_alg_hom_apply_div\n\n",
 "lift_alg_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\ntheorem lift_alg_hom_apply {L S : Type _} [Field L] [CommSemiring S] [algebra S (polynomial K)] [algebra S L]\n    (φ : «expr →ₐ[ ] » (polynomial K) S L) (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors L).comap φ)\n    (f : ratfunc K) : lift_alg_hom φ hφ f = φ f.num / φ f.denom :=\n  lift_monoid_with_zero_hom_apply _ _ _\n#align lift_alg_hom_apply lift_alg_hom_apply\n\n",
 "int_degree_zero":
 "@[simp]\ntheorem int_degree_zero : int_degree (0 : ratfunc K) = 0 := by\n  rw [int_degree, num_zero, nat_degree_zero, denom_zero, nat_degree_one, sub_self]\n#align int_degree_zero int_degree_zero\n\n",
 "int_degree_polynomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem int_degree_polynomial {p : polynomial K} :\n    int_degree (algebra_map (polynomial K) (ratfunc K) p) = nat_degree p := by\n  rw [int_degree, ratfunc.num_algebra_map, ratfunc.denom_algebra_map, polynomial.nat_degree_one, Int.ofNat_zero,\n    sub_zero]\n#align int_degree_polynomial int_degree_polynomial\n\n",
 "int_degree_one":
 "@[simp]\ntheorem int_degree_one : int_degree (1 : ratfunc K) = 0 := by rw [int_degree, num_one, denom_one, sub_self]\n#align int_degree_one int_degree_one\n\n",
 "int_degree_neg":
 "@[simp]\ntheorem int_degree_neg (x : ratfunc K) : int_degree (-x) = int_degree x :=\n  by\n  by_cases hx : x = 0\n  · rw [hx, neg_zero]\n  · rw [int_degree, int_degree, ← nat_degree_neg x.num]\n    exact\n      nat_degree_sub_eq_of_prod_eq (num_ne_zero (neg_ne_zero.mpr hx)) (denom_ne_zero (-x))\n        (neg_ne_zero.mpr (num_ne_zero hx)) (denom_ne_zero x) (num_denom_neg x)\n#align int_degree_neg int_degree_neg\n\n",
 "int_degree_mul":
 "theorem int_degree_mul {x y : ratfunc K} (hx : x ≠ 0) (hy : y ≠ 0) : int_degree (x * y) = int_degree x + int_degree y :=\n  by\n  simp only [int_degree, add_sub, sub_add, sub_sub_eq_add_sub, sub_sub, sub_eq_sub_iff_add_eq_add]\n  norm_cast\n  rw [← polynomial.nat_degree_mul x.denom_ne_zero y.denom_ne_zero, ←\n    polynomial.nat_degree_mul (ratfunc.num_ne_zero (mul_ne_zero hx hy)) (mul_ne_zero x.denom_ne_zero y.denom_ne_zero), ←\n    polynomial.nat_degree_mul (ratfunc.num_ne_zero hx) (ratfunc.num_ne_zero hy), ←\n    polynomial.nat_degree_mul (mul_ne_zero (ratfunc.num_ne_zero hx) (ratfunc.num_ne_zero hy)) (x * y).denom_ne_zero,\n    ratfunc.num_denom_mul]\n#align int_degree_mul int_degree_mul\n\n",
 "int_degree_add_le":
 "theorem int_degree_add_le {x y : ratfunc K} (hy : y ≠ 0) (hxy : x + y ≠ 0) :\n    int_degree (x + y) ≤ max (int_degree x) (int_degree y) :=\n  by\n  by_cases hx : x = 0\n  · simp [hx] at *\n  rw [int_degree_add hxy, ← nat_degree_num_mul_right_sub_nat_degree_denom_mul_left_eq_int_degree hx y.denom_ne_zero,\n    mul_comm y.denom, ← nat_degree_num_mul_right_sub_nat_degree_denom_mul_left_eq_int_degree hy x.denom_ne_zero,\n    le_max_iff, sub_le_sub_iff_right, Int.ofNat_le, sub_le_sub_iff_right, Int.ofNat_le, ← le_max_iff, mul_comm y.num]\n  exact nat_degree_add_le _ _\n#align int_degree_add_le int_degree_add_le\n\n",
 "int_degree_add":
 "theorem int_degree_add {x y : ratfunc K} (hxy : x + y ≠ 0) :\n    (x + y).int_degree = (x.num * y.denom + x.denom * y.num).nat_degree - (x.denom * y.denom).nat_degree :=\n  nat_degree_sub_eq_of_prod_eq (num_ne_zero hxy) (x + y).denom_ne_zero (num_mul_denom_add_denom_mul_num_ne_zero hxy)\n    (mul_ne_zero x.denom_ne_zero y.denom_ne_zero) (num_denom_add x y)\n#align int_degree_add int_degree_add\n\n",
 "int_degree_X":
 "@[simp]\ntheorem int_degree_X : int_degree (X : ratfunc K) = 1 := by\n  rw [int_degree, ratfunc.num_X, polynomial.nat_degree_X, ratfunc.denom_X, polynomial.nat_degree_one, Int.ofNat_one,\n    Int.ofNat_zero, sub_zero]\n#align int_degree_X int_degree_X\n\n",
 "int_degree_C":
 "@[simp]\ntheorem int_degree_C (k : K) : int_degree (ratfunc.C k) = 0 := by\n  rw [int_degree, num_C, nat_degree_C, denom_C, nat_degree_one, sub_self]\n#align int_degree_C int_degree_C\n\n",
 "induction_on'":
 "/- ./././Mathport/Syntax/Translate/Command.lean:309:38: unsupported irreducible non-definition -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- Induction principle for `ratfunc K`: if `f p q : P (ratfunc.mk p q)` for all `p q`,\nthen `P` holds on all elements of `ratfunc K`.\n\nSee also `induction_on`, which is a recursion principle defined in terms of `algebra_map`.\n-/\nprotected irreducible_def induction_on' {P : ratfunc K → Prop} :\n  ∀ (x : ratfunc K) (f : ∀ (p q : polynomial K) (hq : q ≠ 0), P (ratfunc.mk p q)), P x\n  | ⟨x⟩, f =>\n    localization.induction_on x fun ⟨p, q⟩ => by\n      simpa only [mk_coe_def, localization.mk_eq_mk'] using f p q (mem_non_zero_divisors_iff_ne_zero.mp q.2)\n#align induction_on' induction_on'\n\n",
 "induction_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- Induction principle for `ratfunc K`: if `f p q : P (p / q)` for all `p q : K[X]`,\nthen `P` holds on all elements of `ratfunc K`.\n\nSee also `induction_on'`, which is a recursion principle defined in terms of `ratfunc.mk`.\n-/\nprotected theorem induction_on {P : ratfunc K → Prop} (x : ratfunc K)\n    (f : ∀ (p q : polynomial K) (hq : q ≠ 0), P (algebra_map _ (ratfunc K) p / algebra_map _ _ q)) : P x :=\n  x.induction_on' fun p q hq => by simpa using f p q hq\n#align induction_on induction_on\n\n",
 "eval₂_denom_ne_zero":
 "theorem eval₂_denom_ne_zero {x : ratfunc K} (h : eval f a x ≠ 0) : polynomial.eval₂ f a (denom x) ≠ 0 :=\n  mt eval_eq_zero_of_eval₂_denom_eq_zero h\n#align eval₂_denom_ne_zero eval₂_denom_ne_zero\n\n",
 "eval_zero":
 "@[simp]\ntheorem eval_zero : eval f a 0 = 0 := by simp [eval]\n#align eval_zero eval_zero\n\n",
 "eval_one":
 "@[simp]\ntheorem eval_one : eval f a 1 = 1 := by simp [eval]\n#align eval_one eval_one\n\n",
 "eval_mul":
 "/-- `eval` is a multiplicative homomorphism except when a denominator evaluates to `0`.\n\nCounterexample: `eval _ 0 X * eval _ 0 (1/X) = 0 ≠ 1 = eval _ 0 1 = eval _ 0 (X * 1/X)`.\n\nSee also `ratfunc.eval₂_denom_ne_zero` to make the hypotheses simpler but less general.\n-/\ntheorem eval_mul {x y : ratfunc K} (hx : polynomial.eval₂ f a (denom x) ≠ 0) (hy : polynomial.eval₂ f a (denom y) ≠ 0) :\n    eval f a (x * y) = eval f a x * eval f a y := by\n  unfold eval\n  by_cases hxy : polynomial.eval₂ f a (denom (x * y)) = 0\n  · have := polynomial.eval₂_eq_zero_of_dvd_of_eval₂_eq_zero f a (denom_mul_dvd x y) hxy\n    rw [polynomial.eval₂_mul] at this\n    cases mul_eq_zero.mp this <;> contradiction\n  rw [div_mul_div_comm, eq_div_iff (mul_ne_zero hx hy), div_eq_mul_inv, mul_right_comm, ← div_eq_mul_inv,\n    div_eq_iff hxy]\n  repeat' rw [← polynomial.eval₂_mul]\n  congr 1\n  apply num_denom_mul\n#align eval_mul eval_mul\n\n",
 "eval_eq_zero_of_eval₂_denom_eq_zero":
 "theorem eval_eq_zero_of_eval₂_denom_eq_zero {x : ratfunc K} (h : polynomial.eval₂ f a (denom x) = 0) : eval f a x = 0 :=\n  by rw [eval, h, div_zero]\n#align eval_eq_zero_of_eval₂_denom_eq_zero eval_eq_zero_of_eval₂_denom_eq_zero\n\n",
 "eval_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem eval_algebra_map {S : Type _} [CommSemiring S] [algebra S (polynomial K)] (p : S) :\n    eval f a (algebra_map _ _ p) = (algebra_map _ (polynomial K) p).eval₂ f a := by\n  simp [eval, is_scalar_tower.algebra_map_apply S (polynomial K) (ratfunc K)]\n#align eval_algebra_map eval_algebra_map\n\n",
 "eval_add":
 "/-- `eval` is an additive homomorphism except when a denominator evaluates to `0`.\n\nCounterexample: `eval _ 1 (X / (X-1)) + eval _ 1 (-1 / (X-1)) = 0`\n`... ≠ 1 = eval _ 1 ((X-1) / (X-1))`.\n\nSee also `ratfunc.eval₂_denom_ne_zero` to make the hypotheses simpler but less general.\n-/\ntheorem eval_add {x y : ratfunc K} (hx : polynomial.eval₂ f a (denom x) ≠ 0) (hy : polynomial.eval₂ f a (denom y) ≠ 0) :\n    eval f a (x + y) = eval f a x + eval f a y := by\n  unfold eval\n  by_cases hxy : polynomial.eval₂ f a (denom (x + y)) = 0\n  · have := polynomial.eval₂_eq_zero_of_dvd_of_eval₂_eq_zero f a (denom_add_dvd x y) hxy\n    rw [polynomial.eval₂_mul] at this\n    cases mul_eq_zero.mp this <;> contradiction\n  rw [div_add_div _ _ hx hy, eq_div_iff (mul_ne_zero hx hy), div_eq_mul_inv, mul_right_comm, ← div_eq_mul_inv,\n    div_eq_iff hxy]\n  simp only [← polynomial.eval₂_mul, ← polynomial.eval₂_add]\n  congr 1\n  apply num_denom_add\n#align eval_add eval_add\n\n",
 "eval_X":
 "@[simp]\ntheorem eval_X : eval f a X = a := by simp [eval]\n#align eval_X eval_X\n\n",
 "eval_C":
 "@[simp]\ntheorem eval_C {c : K} : eval f a (C c) = f c := by simp [eval]\n#align eval_C eval_C\n\n",
 "div_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem div_smul {R} [monoid R] [DistribMulAction R (polynomial K)] [IsScalarTower R (polynomial K) (polynomial K)]\n    (c : R) (p q : polynomial K) :\n    algebra_map _ (ratfunc K) («expr • » c p) / algebra_map _ _ q =\n      «expr • » c (algebra_map _ _ p / algebra_map _ _ q) :=\n  by rw [← mk_eq_div, mk_smul, mk_eq_div]\n#align div_smul div_smul\n\n",
 "denom_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem denom_zero : denom (0 : ratfunc K) = 1 := by convert denom_div (0 : polynomial K) one_ne_zero <;> simp\n#align denom_zero denom_zero\n\n",
 "denom_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem denom_one : denom (1 : ratfunc K) = 1 := by convert denom_div (1 : polynomial K) one_ne_zero <;> simp\n#align denom_one denom_one\n\n",
 "denom_ne_zero":
 "theorem denom_ne_zero (x : ratfunc K) : denom x ≠ 0 :=\n  (monic_denom x).ne_zero\n#align denom_ne_zero denom_ne_zero\n\n",
 "denom_mul_dvd":
 "theorem denom_mul_dvd (x y : ratfunc K) : denom (x * y) ∣ denom x * denom y :=\n  by\n  rw [denom_dvd (mul_ne_zero (denom_ne_zero x) (denom_ne_zero y))]\n  refine' ⟨x.num * y.num, _⟩\n  rw [RingHom.map_mul, RingHom.map_mul, ← div_mul_div_comm, num_div_denom, num_div_denom]\n#align denom_mul_dvd denom_mul_dvd\n\n",
 "denom_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem denom_dvd {x : ratfunc K} {q : polynomial K} (hq : q ≠ 0) :\n    denom x ∣ q ↔ ∃ p : polynomial K, x = algebra_map _ _ p / algebra_map _ _ q :=\n  by\n  constructor\n  · rintro ⟨p, rfl⟩\n    obtain ⟨hx, hp⟩ := mul_ne_zero_iff.mp hq\n    use Num x * p\n    rw [RingHom.map_mul, RingHom.map_mul, ← div_mul_div_comm, div_self, mul_one, num_div_denom]\n    · exact algebra_map_ne_zero hp\n  · rintro ⟨p, rfl⟩\n    exact denom_div_dvd p q\n#align denom_dvd denom_dvd\n\n",
 "denom_div_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem denom_div_dvd (p q : polynomial K) : denom (algebra_map _ _ p / algebra_map _ _ q) ∣ q :=\n  by\n  by_cases hq : q = 0\n  · simp [hq]\n  rw [denom_div _ hq, C_mul_dvd]\n  · exact EuclideanDomain.div_dvd_of_dvd (gcd_dvd_right p q)\n  · simpa only [ne.def, inv_eq_zero, polynomial.leading_coeff_eq_zero] using right_div_gcd_ne_zero hq\n#align denom_div_dvd denom_div_dvd\n\n",
 "denom_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem denom_div (p : polynomial K) {q : polynomial K} (hq : q ≠ 0) :\n    denom (algebra_map _ _ p / algebra_map _ _ q) = polynomial.C (q / gcd p q).leading_coeff⁻¹ * (q / gcd p q) := by\n  rw [denom, num_denom_div _ hq]\n#align denom_div denom_div\n\n",
 "denom_algebra_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem denom_algebra_map (p : polynomial K) : denom (algebra_map _ (ratfunc K) p) = 1 := by\n  convert denom_div p one_ne_zero <;> simp\n#align denom_algebra_map denom_algebra_map\n\n",
 "denom_add_dvd":
 "theorem denom_add_dvd (x y : ratfunc K) : denom (x + y) ∣ denom x * denom y :=\n  by\n  rw [denom_dvd (mul_ne_zero (denom_ne_zero x) (denom_ne_zero y))]\n  refine' ⟨x.num * y.denom + x.denom * y.num, _⟩\n  rw [RingHom.map_mul, RingHom.map_add, RingHom.map_mul, RingHom.map_mul, ← div_add_div, num_div_denom, num_div_denom]\n  · exact algebra_map_ne_zero (denom_ne_zero x)\n  · exact algebra_map_ne_zero (denom_ne_zero y)\n#align denom_add_dvd denom_add_dvd\n\n",
 "denom_X":
 "@[simp]\ntheorem denom_X : denom (X : ratfunc K) = 1 :=\n  denom_algebra_map _\n#align denom_X denom_X\n\n",
 "denom_C":
 "@[simp]\ntheorem denom_C (c : K) : denom (C c) = 1 :=\n  denom_algebra_map _\n#align denom_C denom_C\n\n",
 "coe_zero":
 "@[simp, norm_cast]\ntheorem coe_zero : ((0 : ratfunc F) : laurent_series F) = 0 :=\n  (coe_alg_hom F).map_zero\n#align coe_zero coe_zero\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- TODO: generalize over other modules\n@[simp, norm_cast]\ntheorem coe_smul (r : F) : ((«expr • » r f : ratfunc F) : laurent_series F) = «expr • » r f := by\n  rw [smul_eq_C_mul, ← C_mul_eq_smul, coe_mul, coe_C]\n#align coe_smul coe_smul\n\n",
 "coe_one":
 "@[simp, norm_cast]\ntheorem coe_one : ((1 : ratfunc F) : laurent_series F) = 1 :=\n  (coe_alg_hom F).map_one\n#align coe_one coe_one\n\n",
 "coe_num_denom":
 "theorem coe_num_denom : (f : laurent_series F) = f.num / f.denom :=\n  lift_alg_hom_apply _ _ f\n#align coe_num_denom coe_num_denom\n\n",
 "coe_mul":
 "@[simp, norm_cast]\ntheorem coe_mul : ((f * g : ratfunc F) : laurent_series F) = f * g :=\n  (coe_alg_hom F).map_mul _ _\n#align coe_mul coe_mul\n\n",
 "coe_map_ring_hom_eq_coe_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coe_map_ring_hom_eq_coe_map [RingHomClass F (polynomial R) (polynomial S)] (φ : F)\n    (hφ : non_zero_divisors (polynomial R) ≤ (non_zero_divisors (polynomial S)).comap φ) :\n    (map_ring_hom φ hφ : ratfunc R → ratfunc S) = map φ hφ :=\n  rfl\n#align coe_map_ring_hom_eq_coe_map coe_map_ring_hom_eq_coe_map\n\n",
 "coe_map_alg_hom_eq_coe_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem coe_map_alg_hom_eq_coe_map (φ : «expr →ₐ[ ] » (polynomial K) S (polynomial R))\n    (hφ : non_zero_divisors (polynomial K) ≤ (non_zero_divisors (polynomial R)).comap φ) :\n    (map_alg_hom φ hφ : ratfunc K → ratfunc R) = map φ hφ :=\n  rfl\n#align coe_map_alg_hom_eq_coe_map coe_map_alg_hom_eq_coe_map\n\n",
 "coe_injective":
 "theorem coe_injective : function.injective (coe : ratfunc F → laurent_series F) :=\n  lift_alg_hom_injective _ (polynomial.algebra_map_hahn_series_injective _)\n#align coe_injective coe_injective\n\n",
 "coe_div":
 "@[simp, norm_cast]\ntheorem coe_div : ((f / g : ratfunc F) : laurent_series F) = (f : laurent_series F) / (g : laurent_series F) :=\n  map_div₀ (coe_alg_hom F) _ _\n#align coe_div coe_div\n\n",
 "coe_def":
 "theorem coe_def : (f : laurent_series F) = coe_alg_hom F f :=\n  rfl\n#align coe_def coe_def\n\n",
 "coe_apply":
 "@[simp, norm_cast]\ntheorem coe_apply : coe_alg_hom F f = f :=\n  rfl\n#align coe_apply coe_apply\n\n",
 "coe_add":
 "@[simp, norm_cast]\ntheorem coe_add : ((f + g : ratfunc F) : laurent_series F) = f + g :=\n  (coe_alg_hom F).map_add _ _\n#align coe_add coe_add\n\n",
 "coe_X":
 "@[simp, norm_cast]\ntheorem coe_X : ((X : ratfunc F) : laurent_series F) = single 1 1 := by\n  rw [coe_num_denom, num_X, denom_X, coe_coe, polynomial.coe_X, coe_X, coe_coe, polynomial.coe_one,\n    power_series.coe_one, div_one]\n#align coe_X coe_X\n\n",
 "coe_C":
 "@[simp, norm_cast]\ntheorem coe_C (r : F) : ((C r : ratfunc F) : laurent_series F) = hahn_series.C r := by\n  rw [coe_num_denom, num_C, denom_C, coe_coe, polynomial.coe_C, coe_C, coe_coe, polynomial.coe_one,\n    power_series.coe_one, div_one]\n#align coe_C coe_C\n\n",
 "algebra_map_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem algebra_map_ne_zero {x : polynomial K} (hx : x ≠ 0) : algebra_map (polynomial K) (ratfunc K) x ≠ 0 :=\n  mt (algebra_map_eq_zero_iff K).mp hx\n#align algebra_map_ne_zero algebra_map_ne_zero\n\n",
 "algebra_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem algebra_map_injective : function.injective (algebra_map (polynomial K) (ratfunc K)) :=\n  by\n  rw [← of_fraction_ring_comp_algebra_map]\n  exact of_fraction_ring_injective.comp (is_fraction_ring.injective _ _)\n#align algebra_map_injective algebra_map_injective\n\n",
 "algebra_map_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem algebra_map_eq_zero_iff {x : polynomial K} : algebra_map (polynomial K) (ratfunc K) x = 0 ↔ x = 0 :=\n  ⟨(injective_iff_map_eq_zero _).mp (algebra_map_injective K) _, fun hx => by rw [hx, RingHom.map_zero]⟩\n#align algebra_map_eq_zero_iff algebra_map_eq_zero_iff\n\n",
 "algebra_map_eq_C":
 "@[simp]\ntheorem algebra_map_eq_C : algebra_map K (ratfunc K) = C :=\n  rfl\n#align algebra_map_eq_C algebra_map_eq_C\n\n",
 "algebra_map_comp_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem algebra_map_comp_C : (algebra_map (polynomial K) (ratfunc K)).comp polynomial.C = C :=\n  rfl\n#align algebra_map_comp_C algebra_map_comp_C\n\n",
 "algebra_map_apply_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem algebra_map_apply_div :\n    algebra_map (ratfunc F) (laurent_series F) (algebra_map _ _ p / algebra_map _ _ q) =\n      algebra_map (polynomial F) (laurent_series F) p / algebra_map _ _ q :=\n  by\n  convert coe_div _ _ <;>\n    rw [← mk_one, coe_def, coe_alg_hom, mk_eq_div, lift_alg_hom_apply_div, map_one, div_one, algebra.of_id_apply]\n#align algebra_map_apply_div algebra_map_apply_div\n\n",
 "algebra_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem algebra_map_apply {R : Type _} [CommSemiring R] [algebra R (polynomial K)] (x : R) :\n    algebra_map R (ratfunc K) x = algebra_map _ _ (algebra_map R (polynomial K) x) / algebra_map (polynomial K) _ 1 :=\n  by\n  rw [← mk_eq_div]\n  rfl\n#align algebra_map_apply algebra_map_apply\n\n",
 "algebra_map_X":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem algebra_map_X : algebra_map (polynomial K) (ratfunc K) polynomial.X = X :=\n  rfl\n#align algebra_map_X algebra_map_X\n\n",
 "algebra_map_C":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem algebra_map_C (a : K) : algebra_map (polynomial K) (ratfunc K) (polynomial.C a) = C a :=\n  rfl\n#align algebra_map_C algebra_map_C\n\n",
 "X_ne_zero":
 "theorem X_ne_zero : (ratfunc.X : ratfunc K) ≠ 0 :=\n  ratfunc.algebra_map_ne_zero polynomial.X_ne_zero\n#align X_ne_zero X_ne_zero\n\n"}