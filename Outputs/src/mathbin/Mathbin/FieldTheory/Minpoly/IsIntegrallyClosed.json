{"unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- The minimal polynomial of an element `x` is uniquely characterized by its defining property:\nif there is another monic polynomial of minimal degree that has `x` as a root, then this polynomial\nis equal to the minimal polynomial of `x`. See also `minpoly.unique` which relaxes the\nassumptions on `S` in exchange for stronger assumptions on `R`. -/\ntheorem is_integrally_closed.minpoly.unique {s : S} {P : polynomial R} (hmo : P.monic) (hP : Polynomial.aeval s P = 0)\n    (Pmin : ∀ Q : polynomial R, Q.monic → Polynomial.aeval s Q = 0 → degree P ≤ degree Q) : P = minpoly R s :=\n  by\n  have hs : is_integral R s := ⟨P, hmo, hP⟩\n  symm; apply eq_of_sub_eq_zero\n  by_contra hnz\n  have := is_integrally_closed.degree_le_of_ne_zero hs hnz (by simp [hP])\n  contrapose! this\n  refine' degree_sub_lt _ (NeZero hs) _\n  · exact le_antisymm (min R s hmo hP) (Pmin (minpoly R s) (monic hs) (aeval R s))\n  · rw [(monic hs).leading_coeff, hmo.leading_coeff]\n#align is_integrally_closed.minpoly.unique is_integrally_closed.minpoly.unique\n\n",
 "prime_of_is_integrally_closed":
 "theorem prime_of_is_integrally_closed {x : S} (hx : is_integral R x) : Prime (minpoly R x) :=\n  by\n  refine'\n    ⟨(minpoly.monic hx).ne_zero,\n      ⟨by by_contra h_contra <;> exact (ne_of_lt (minpoly.degree_pos hx)) (degree_eq_zero_of_is_unit h_contra).symm,\n        fun a b h => or_iff_not_imp_left.mpr fun h' => _⟩⟩\n  rw [← minpoly.is_integrally_closed_dvd_iff hx] at h' h⊢\n  rw [aeval_mul] at h\n  exact eq_zero_of_ne_zero_of_mul_left_eq_zero h' h\n#align prime_of_is_integrally_closed prime_of_is_integrally_closed\n\n",
 "ker_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem ker_eval {s : S} (hs : is_integral R s) :\n    ((Polynomial.aeval s).to_ring_hom : «expr →+* » (polynomial R) S).ker =\n      Ideal.span ({minpoly R s} : Set (polynomial R)) :=\n  by\n  ext p <;>\n    simp_rw [RingHom.mem_ker, AlgHom.toRingHom_eq_coe, AlgHom.coe_toRingHom, is_integrally_closed_dvd_iff hs, ←\n      Ideal.mem_span_singleton]\n#align ker_eval ker_eval\n\n",
 "is_integrally_closed_eq_field_fractions'":
 "/-- For integrally closed domains, the minimal polynomial over the ring is the same as the minimal\npolynomial over the fraction field. Compared to `minpoly.is_integrally_closed_eq_field_fractions`,\nthis version is useful if the element is in a ring that is already a `K`-algebra. -/\ntheorem is_integrally_closed_eq_field_fractions' [IsDomain S] [Algebra K S] [IsScalarTower R K S] {s : S}\n    (hs : is_integral R s) : minpoly K s = (minpoly R s).map (algebraMap R K) :=\n  by\n  let L := FractionRing S\n  rw [← is_integrally_closed_eq_field_fractions K L hs]\n  refine' minpoly.eq_of_algebra_map_eq (IsFractionRing.injective S L) (is_integral_of_is_scalar_tower hs) rfl\n#align is_integrally_closed_eq_field_fractions' is_integrally_closed_eq_field_fractions'\n\n",
 "is_integrally_closed_eq_field_fractions":
 "/-\nCopyright (c) 2019 Riccardo Brasca. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Riccardo Brasca, Paul Lezeau, Junyan Xu\n-/\n/-- For integrally closed domains, the minimal polynomial over the ring is the same as the minimal\npolynomial over the fraction field. See `minpoly.is_integrally_closed_eq_field_fractions'` if\n`S` is already a `K`-algebra. -/\ntheorem is_integrally_closed_eq_field_fractions [IsDomain S] {s : S} (hs : is_integral R s) :\n    minpoly K (algebraMap S L s) = (minpoly R s).map (algebraMap R K) :=\n  by\n  refine' (eq_of_irreducible_of_monic _ _ _).symm\n  · exact (polynomial.monic.irreducible_iff_irreducible_map_fraction_map (monic hs)).1 (Irreducible hs)\n  · rw [aeval_map_algebra_map, aeval_algebra_map_apply, aeval, map_zero]\n  · exact (monic hs).map _\n#align is_integrally_closed_eq_field_fractions is_integrally_closed_eq_field_fractions\n\n",
 "is_integrally_closed_dvd_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem is_integrally_closed_dvd_iff [Nontrivial R] {s : S} (hs : is_integral R s) (p : polynomial R) :\n    Polynomial.aeval s p = 0 ↔ minpoly R s ∣ p :=\n  ⟨fun hp => is_integrally_closed_dvd hs hp, fun hp => by\n    simpa only [RingHom.mem_ker, RingHom.coe_comp, coe_eval_ring_hom, coe_map_ring_hom, Function.comp_apply, eval_map, ←\n      aeval_def] using aeval_eq_zero_of_dvd_aeval_eq_zero hp (minpoly.aeval R s)⟩\n#align is_integrally_closed_dvd_iff is_integrally_closed_dvd_iff\n\n",
 "is_integrally_closed_dvd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- For integrally closed rings, the minimal polynomial divides any polynomial that has the\n  integral element as root. See also `minpoly.dvd` which relaxes the assumptions on `S`\n  in exchange for stronger assumptions on `R`. -/\ntheorem is_integrally_closed_dvd [Nontrivial R] {s : S} (hs : is_integral R s) {p : polynomial R}\n    (hp : Polynomial.aeval s p = 0) : minpoly R s ∣ p :=\n  by\n  let K := FractionRing R\n  let L := FractionRing S\n  have : minpoly K (algebraMap S L s) ∣ map (algebraMap R K) («expr %ₘ » p (minpoly R s)) :=\n    by\n    rw [map_mod_by_monic _ (minpoly.monic hs), mod_by_monic_eq_sub_mul_div]\n    refine' dvd_sub (minpoly.dvd K (algebraMap S L s) _) _\n    rw [← map_aeval_eq_aeval_map, hp, map_zero]\n    rw [← IsScalarTower.algebraMap_eq, ← IsScalarTower.algebraMap_eq]\n    apply dvd_mul_of_dvd_left\n    rw [is_integrally_closed_eq_field_fractions K L hs]\n    exact monic.map _ (minpoly.monic hs)\n  rw [is_integrally_closed_eq_field_fractions _ _ hs,\n    map_dvd_map (algebraMap R K) (IsFractionRing.injective R K) (minpoly.monic hs)] at this\n  rw [← dvd_iff_mod_by_monic_eq_zero (minpoly.monic hs)]\n  refine' Polynomial.eq_zero_of_dvd_of_degree_lt this (degree_mod_by_monic_lt p <| minpoly.monic hs)\n  all_goals infer_instance\n#align is_integrally_closed_dvd is_integrally_closed_dvd\n\n",
 "injective":
 "theorem to_adjoin.injective (hx : is_integral R x) : function.injective (minpoly.to_adjoin R x) :=\n  by\n  refine' (injective_iff_map_eq_zero _).2 fun P₁ hP₁ => _\n  obtain ⟨P, hP⟩ := mk_surjective (minpoly.monic hx) P₁\n  by_cases hPzero : P = 0\n  · simpa [hPzero] using hP.symm\n  rw [← hP, minpoly.to_adjoin_apply', lift_hom_mk, ← Subalgebra.coe_eq_zero, aeval_subalgebra_coe, [anonymous],\n    is_integrally_closed_dvd_iff hx] at hP₁\n  obtain ⟨Q, hQ⟩ := hP₁\n  rw [← hP, hQ, RingHom.map_mul, mk_self, MulZeroClass.zero_mul]\n#align to_adjoin.injective to_adjoin.injective\n\n",
 "degree_le_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- If an element `x` is a root of a nonzero polynomial `p`, then the degree of `p` is at least the\ndegree of the minimal polynomial of `x`. See also `minpoly.degree_le_of_ne_zero` which relaxes the\nassumptions on `S` in exchange for stronger assumptions on `R`. -/\ntheorem is_integrally_closed.degree_le_of_ne_zero {s : S} (hs : is_integral R s) {p : polynomial R} (hp0 : p ≠ 0)\n    (hp : Polynomial.aeval s p = 0) : degree (minpoly R s) ≤ degree p :=\n  by\n  rw [degree_eq_nat_degree (minpoly.ne_zero hs), degree_eq_nat_degree hp0]\n  norm_cast\n  exact nat_degree_le_of_dvd ((is_integrally_closed_dvd_iff hs _).mp hp) hp0\n#align is_integrally_closed.degree_le_of_ne_zero is_integrally_closed.degree_le_of_ne_zero\n\n"}