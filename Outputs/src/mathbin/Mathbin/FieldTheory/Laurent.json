{"taylor_mem_non_zero_divisors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-\nCopyright (c) 2022 Yakov Pechersky. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yakov Pechersky\n-/\ntheorem taylor_mem_non_zero_divisors (hp : p ∈ non_zero_divisors (polynomial R)) :\n    taylor r p ∈ non_zero_divisors (polynomial R) :=\n  by\n  rw [mem_non_zero_divisors_iff]\n  intro x hx\n  have : x = taylor (r - r) x := by simp\n  rwa [this, sub_eq_add_neg, ← taylor_taylor, ← taylor_mul, linear_map.map_eq_zero_iff _ (taylor_injective _),\n    mul_right_mem_non_zero_divisors_eq_zero_iff hp, linear_map.map_eq_zero_iff _ (taylor_injective _)] at hx\n#align taylor_mem_non_zero_divisors taylor_mem_non_zero_divisors\n\n",
 "laurent_laurent":
 "theorem laurent_laurent : laurent r (laurent s f) = laurent (r + s) f :=\n  by\n  induction f using ratfunc.induction_on\n  simp_rw [laurent_div, taylor_taylor]\n#align laurent_laurent laurent_laurent\n\n",
 "laurent_injective":
 "theorem laurent_injective : function.injective (laurent r) := fun _ _ h => by\n  simpa [laurent_laurent] using congr_arg (laurent (-r)) h\n#align laurent_injective laurent_injective\n\n",
 "laurent_div":
 "theorem laurent_div :\n    laurent r (algebra_map _ _ p / algebra_map _ _ q) = algebra_map _ _ (taylor r p) / algebra_map _ _ (taylor r q) :=\n  laurent_aux_div r p q\n#align laurent_div laurent_div\n\n",
 "laurent_aux_of_fraction_ring_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem laurent_aux_of_fraction_ring_mk (q : non_zero_divisors (polynomial R)) :\n    laurent_aux r (of_fraction_ring (localization.mk p q)) =\n      of_fraction_ring (localization.mk (taylor r p) ⟨taylor r q, taylor_mem_non_zero_divisors r q q.prop⟩) :=\n  map_apply_of_fraction_ring_mk _ _ _ _\n#align laurent_aux_of_fraction_ring_mk laurent_aux_of_fraction_ring_mk\n\n",
 "laurent_aux_div":
 "theorem laurent_aux_div :\n    laurent_aux r (algebra_map _ _ p / algebra_map _ _ q) =\n      algebra_map _ _ (taylor r p) / algebra_map _ _ (taylor r q) :=\n  map_apply_div _ _ _ _\n#align laurent_aux_div laurent_aux_div\n\n",
 "laurent_aux_algebra_map":
 "@[simp]\ntheorem laurent_aux_algebra_map : laurent_aux r (algebra_map _ _ p) = algebra_map _ _ (taylor r p) := by\n  rw [← mk_one, ← mk_one, mk_eq_div, laurent_aux_div, mk_eq_div, taylor_one, _root_.map_one]\n#align laurent_aux_algebra_map laurent_aux_algebra_map\n\n",
 "laurent_at_zero":
 "@[simp]\ntheorem laurent_at_zero : laurent 0 f = f :=\n  by\n  induction f using ratfunc.induction_on\n  simp\n#align laurent_at_zero laurent_at_zero\n\n",
 "laurent_algebra_map":
 "@[simp]\ntheorem laurent_algebra_map : laurent r (algebra_map _ _ p) = algebra_map _ _ (taylor r p) :=\n  laurent_aux_algebra_map _ _\n#align laurent_algebra_map laurent_algebra_map\n\n",
 "laurent_X":
 "@[simp]\ntheorem laurent_X : laurent r X = X + C r := by\n  rw [← algebra_map_X, laurent_algebra_map, taylor_X, _root_.map_add, algebra_map_C]\n#align laurent_X laurent_X\n\n",
 "laurent_C":
 "@[simp]\ntheorem laurent_C (x : R) : laurent r (C x) = C x := by rw [← algebra_map_C, laurent_algebra_map, taylor_C]\n#align laurent_C laurent_C\n\n"}