{"has_separable_contraction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- Every irreducible polynomial can be contracted to a separable polynomial.\nhttps://stacks.math.columbia.edu/tag/09H0 -/\ntheorem _root_.irreducible.has_separable_contraction (q : ℕ) [hF : exp_char F q] (f : polynomial F)\n    (irred : Irreducible f) : has_separable_contraction q f :=\n  by\n  cases hF\n  · exact ⟨f, irred.separable, ⟨0, by rw [pow_zero, expand_one]⟩⟩\n  · rcases exists_separable_of_irreducible q irred ‹q.prime›.ne_zero with ⟨n, g, hgs, hge⟩\n    exact ⟨g, hgs, n, hge⟩\n#align irreducible.has_separable_contraction irreducible.has_separable_contraction\n\n",
 "eq_degree":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- In exponential characteristic one, the separable degree equals the degree. -/\ntheorem has_separable_contraction.eq_degree {f : polynomial F} (hf : has_separable_contraction 1 f) :\n    hf.degree = f.nat_degree := by\n  let ⟨a, ha⟩ := hf.dvd_degree'\n  rw [← ha, one_pow a, mul_one]\n#align has_separable_contraction.eq_degree has_separable_contraction.eq_degree\n\n",
 "dvd_degree'":
 "theorem has_separable_contraction.dvd_degree' : ∃ m : ℕ, hf.degree * q ^ m = f.nat_degree :=\n  (Classical.choose_spec hf).dvd_degree'\n#align has_separable_contraction.dvd_degree' has_separable_contraction.dvd_degree'\n\n",
 "dvd_degree":
 "/-- The separable degree divides the degree. -/\ntheorem has_separable_contraction.dvd_degree : hf.degree ∣ f.nat_degree :=\n  let ⟨a, ha⟩ := hf.dvd_degree'\n  Dvd.intro (q ^ a) ha\n#align has_separable_contraction.dvd_degree has_separable_contraction.dvd_degree\n\n",
 "degree_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- The separable degree equals the degree of any separable contraction, i.e., it is unique. -/\ntheorem is_separable_contraction.degree_eq [hF : exp_char F q] (g : polynomial F)\n    (hg : is_separable_contraction q f g) : g.nat_degree = hf.degree :=\n  by\n  cases hF\n  · rcases hg with ⟨g, m, hm⟩\n    rw [one_pow, expand_one] at hm\n    rw [hf.eq_degree]\n    rw [hm]\n  · rcases hg with ⟨hg, m, hm⟩\n    let g' := Classical.choose hf\n    cases' (Classical.choose_spec hf).2 with m' hm'\n    haveI : fact q.prime := fact_iff.2 hF_hprime\n    apply contraction_degree_eq_or_insep q g g' m m'\n    rw [hm, hm']\n    exact hg\n    exact (Classical.choose_spec hf).1\n#align is_separable_contraction.degree_eq is_separable_contraction.degree_eq\n\n",
 "contraction_degree_eq_or_insep":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/-- If two expansions (along the positive characteristic) of two separable polynomials `g` and `g'`\nagree, then they have the same degree. -/\ntheorem contraction_degree_eq_or_insep [hq : ne_zero q] [char_p F q] (g g' : polynomial F) (m m' : ℕ)\n    (h_expand : expand F (q ^ m) g = expand F (q ^ m') g') (hg : g.separable) (hg' : g'.separable) :\n    g.nat_degree = g'.nat_degree :=\n  by\n  wlog hm : m ≤ m' := le_total m m' using m m' g g', m' m g' g\n  obtain ⟨s, rfl⟩ := exists_add_of_le hm\n  rw [pow_add, expand_mul, expand_inj (pow_pos (NeZero.pos q) m)] at h_expand\n  subst h_expand\n  rcases is_unit_or_eq_zero_of_separable_expand q s (NeZero.pos q) hg with (h | rfl)\n  · rw [nat_degree_expand, nat_degree_eq_zero_of_is_unit h, zero_mul]\n  · rw [nat_degree_expand, pow_zero, mul_one]\n#align contraction_degree_eq_or_insep contraction_degree_eq_or_insep\n\n"}