{"not_is_field_of_card_not_prime_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem fintype.not_is_field_of_card_not_prime_pow {α} [Fintype α] [Ring α] : ¬IsPrimePow («expr‖ ‖» α) → ¬IsField α :=\n  mt fun h => fintype.nonempty_field_iff.mp ⟨h.to_field⟩\n#align fintype.not_is_field_of_card_not_prime_pow fintype.not_is_field_of_card_not_prime_pow\n\n",
 "nonempty_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-- There is a field structure on type if and only if its cardinality is a prime power. -/\ntheorem field.nonempty_iff {α : Type u} : Nonempty (Field α) ↔ IsPrimePow (cardinal.mk α) :=\n  by\n  rw [Cardinal.isPrimePow_iff]\n  cases' fintypeOrInfinite α with h h\n  ·\n    simpa only [Cardinal.mk_fintype, Nat.cast_inj, exists_eq_left', (Cardinal.nat_lt_aleph0 _).not_le,\n      false_or_iff] using fintype.nonempty_field_iff\n  · simpa only [← Cardinal.infinite_iff, h, true_or_iff, iff_true_iff] using infinite.nonempty_field\n#align field.nonempty_iff field.nonempty_iff\n\n",
 "nonempty_field_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- A `fintype` can be given a field structure iff its cardinality is a prime power. -/\ntheorem fintype.nonempty_field_iff {α} [Fintype α] : Nonempty (Field α) ↔ IsPrimePow («expr‖ ‖» α) :=\n  by\n  refine' ⟨fun ⟨h⟩ => fintype.is_prime_pow_card_of_field, _⟩\n  rintro ⟨p, n, hp, hn, hα⟩\n  haveI := fact.mk hp.nat_prime\n  exact ⟨(Fintype.equivOfCardEq ((galois_field.card p n hn.ne').trans hα)).symm.field⟩\n#align fintype.nonempty_field_iff fintype.nonempty_field_iff\n\n",
 "nonempty_field":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `non_zero_divisors -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- Any infinite type can be endowed a field structure. -/\ntheorem infinite.nonempty_field {α : Type u} [Infinite α] : Nonempty (Field α) :=\n  by\n  letI K := FractionRing (MvPolynomial α <| ULift.{u} (exprℚ))\n  suffices cardinal.mk α = cardinal.mk K by\n    obtain ⟨e⟩ := Cardinal.eq.1 this\n    exact ⟨e.field⟩\n  rw [← is_localization.card (non_zero_divisors (MvPolynomial α <| ULift.{u} (exprℚ))) K le_rfl]\n  apply le_antisymm\n  · refine' ⟨⟨fun a => MvPolynomial.monomial (Finsupp.single a 1) (1 : ULift.{u} (exprℚ)), fun x y h => _⟩⟩\n    simpa [MvPolynomial.monomial_eq_monomial_iff, Finsupp.single_eq_single_iff] using h\n  · simp\n#align infinite.nonempty_field infinite.nonempty_field\n\n",
 "is_prime_pow_card_of_field":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-\nCopyright (c) 2022 Eric Rodriguez. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Rodriguez\n-/\n/-- A finite field has prime power cardinality. -/\ntheorem fintype.is_prime_pow_card_of_field {α} [Fintype α] [Field α] : IsPrimePow («expr‖ ‖» α) :=\n  by\n  cases' CharP.exists α with p _\n  haveI hp := fact.mk (CharP.char_is_prime α p)\n  let b := IsNoetherian.finsetBasis (ZMod p) α\n  rw [Module.card_fintype b, ZMod.card, isPrimePow_pow_iff]\n  · exact hp.1.is_prime_pow\n  rw [← FiniteDimensional.finrank_eq_card_basis b]\n  exact finite_dimensional.finrank_pos.ne'\n#align fintype.is_prime_pow_card_of_field fintype.is_prime_pow_card_of_field\n\n"}