{"reassoc_of":
 "/-\nCopyright (c) 2019 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\n/-- With `h : x ≫ y ≫ z = x` (with universal quantifiers tolerated),\n`reassoc_of h : ∀ {X'} (f : W ⟶ X'), x ≫ y ≫ z ≫ f = x ≫ f`.\n\nThe type and proof of `reassoc_of h` is generated by `tactic.derive_reassoc_proof`\nwhich make `reassoc_of` meta-programming adjacent. It is not called as a tactic but as\nan expression. The goal is to avoid creating assumptions that are dismissed after one use:\n\n```lean\nexample (X Y Z W : C) (x : X ⟶ Y) (y : Y ⟶ Z) (z z' : Z ⟶ W) (w : X ⟶ Z)\n  (h : x ≫ y = w)\n  (h' : y ≫ z = y ≫ z') :\n  x ≫ y ≫ z = w ≫ z' :=\nbegin\n  rw [h',reassoc_of h],\nend\n```\n-/\ntheorem category_theory.reassoc_of {α} (hh : α) {β} (x : tactic.calculated_Prop β hh := by derive_reassoc_proof) : β :=\n  x\n#align category_theory.reassoc_of category_theory.reassoc_of\n\n"}