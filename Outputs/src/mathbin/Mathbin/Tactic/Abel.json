{"zero_termg":
 "theorem zero_termg {α} [AddCommGroup α] (x a) : @termg α _ 0 x a = a := by simp [termg]\n#align zero_termg zero_termg\n\n",
 "zero_term":
 "theorem zero_term {α} [AddCommMonoid α] (x a) : @term α _ 0 x a = a := by simp [term, zero_nsmul, one_nsmul]\n#align zero_term zero_term\n\n",
 "zero_smulg":
 "theorem zero_smulg {α} [AddCommGroup α] (c) : smulg c (0 : α) = 0 := by simp [smulg, zsmul_zero]\n#align zero_smulg zero_smulg\n\n",
 "zero_smul":
 "#print zero_smul /-\ntheorem zero_smul {α} [AddCommMonoid α] (c) : smul c (0 : α) = 0 := by simp [smul, nsmul_zero]\n#align zero_smul zero_smul\n-/\n\n",
 "unfold_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem unfold_zsmul {α} [AddCommGroup α] (n : ℤ) (x y : α) (h : smulg n x = y) : «expr • » n x = y :=\n  h\n#align unfold_zsmul unfold_zsmul\n\n",
 "unfold_sub":
 "theorem unfold_sub {α} [SubtractionMonoid α] (a b c : α) (h : a + -b = c) : a - b = c := by rw [sub_eq_add_neg, h]\n#align unfold_sub unfold_sub\n\n",
 "unfold_smulg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem unfold_smulg {α} [AddCommGroup α] (n : ℕ) (x y : α) (h : smulg (int.of_nat n) x = y) :\n    «expr • » (n : ℤ) x = y :=\n  h\n#align unfold_smulg unfold_smulg\n\n",
 "unfold_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem unfold_smul {α} [AddCommMonoid α] (n) (x y : α) (h : smul n x = y) : «expr • » n x = y :=\n  h\n#align unfold_smul unfold_smul\n\n",
 "term_smulg":
 "theorem term_smulg {α} [AddCommGroup α] (c n x a n' a') (h₁ : c * n = n') (h₂ : smulg c a = a') :\n    smulg c (@termg α _ n x a) = termg n' x a' := by simp [h₂.symm, h₁.symm, termg, smulg, zsmul_add, mul_zsmul]\n#align term_smulg term_smulg\n\n",
 "term_smul":
 "theorem term_smul {α} [AddCommMonoid α] (c n x a n' a') (h₁ : c * n = n') (h₂ : smul c a = a') :\n    smul c (@term α _ n x a) = term n' x a' := by simp [h₂.symm, h₁.symm, term, smul, nsmul_add, mul_nsmul']\n#align term_smul term_smul\n\n",
 "term_neg":
 "theorem term_neg {α} [AddCommGroup α] (n x a n' a') (h₁ : -n = n') (h₂ : -a = a') : -@termg α _ n x a = termg n' x a' :=\n  by simp [h₂.symm, h₁.symm, termg] <;> ac_rfl\n#align term_neg term_neg\n\n",
 "term_atomg":
 "theorem term_atomg {α} [AddCommGroup α] (x : α) : x = termg 1 x 0 := by simp [termg]\n#align term_atomg term_atomg\n\n",
 "term_atom":
 "theorem term_atom {α} [AddCommMonoid α] (x : α) : x = term 1 x 0 := by simp [term]\n#align term_atom term_atom\n\n",
 "term_add_termg":
 "theorem term_add_termg {α} [AddCommGroup α] (n₁ x a₁ n₂ a₂ n' a') (h₁ : n₁ + n₂ = n') (h₂ : a₁ + a₂ = a') :\n    @termg α _ n₁ x a₁ + @termg α _ n₂ x a₂ = termg n' x a' := by simp [h₁.symm, h₂.symm, termg, add_zsmul] <;> ac_rfl\n#align term_add_termg term_add_termg\n\n",
 "term_add_term":
 "theorem term_add_term {α} [AddCommMonoid α] (n₁ x a₁ n₂ a₂ n' a') (h₁ : n₁ + n₂ = n') (h₂ : a₁ + a₂ = a') :\n    @term α _ n₁ x a₁ + @term α _ n₂ x a₂ = term n' x a' := by simp [h₁.symm, h₂.symm, term, add_nsmul] <;> ac_rfl\n#align term_add_term term_add_term\n\n",
 "term_add_constg":
 "theorem term_add_constg {α} [AddCommGroup α] (n x a k a') (h : a + k = a') : @termg α _ n x a + k = termg n x a' := by\n  simp [h.symm, termg, add_assoc]\n#align term_add_constg term_add_constg\n\n",
 "term_add_const":
 "theorem term_add_const {α} [AddCommMonoid α] (n x a k a') (h : a + k = a') : @term α _ n x a + k = term n x a' := by\n  simp [h.symm, term, add_assoc]\n#align term_add_const term_add_const\n\n",
 "subst_into_smulg":
 "theorem subst_into_smulg {α} [AddCommGroup α] (l r tl tr t) (prl : l = tl) (prr : r = tr) (prt : @smulg α _ tl tr = t) :\n    smulg l r = t := by simp [prl, prr, prt]\n#align subst_into_smulg subst_into_smulg\n\n",
 "subst_into_smul_upcast":
 "theorem subst_into_smul_upcast {α} [AddCommGroup α] (l r tl zl tr t) (prl₁ : l = tl) (prl₂ : ↑tl = zl) (prr : r = tr)\n    (prt : @smulg α _ zl tr = t) : smul l r = t := by simp [← prt, prl₁, ← prl₂, prr, smul, smulg]\n#align subst_into_smul_upcast subst_into_smul_upcast\n\n",
 "subst_into_smul":
 "theorem subst_into_smul {α} [AddCommMonoid α] (l r tl tr t) (prl : l = tl) (prr : r = tr) (prt : @smul α _ tl tr = t) :\n    smul l r = t := by simp [prl, prr, prt]\n#align subst_into_smul subst_into_smul\n\n",
 "const_add_termg":
 "theorem const_add_termg {α} [AddCommGroup α] (k n x a a') (h : k + a = a') : k + @termg α _ n x a = termg n x a' := by\n  simp [h.symm, termg] <;> ac_rfl\n#align const_add_termg const_add_termg\n\n",
 "const_add_term":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem const_add_term {α} [AddCommMonoid α] (k n x a a') (h : k + a = a') : k + @term α _ n x a = term n x a' := by\n  simp [h.symm, term] <;> ac_rfl\n#align const_add_term const_add_term\n\n"}