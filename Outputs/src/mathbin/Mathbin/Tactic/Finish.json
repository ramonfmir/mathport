{"not_or_eq":
 "theorem not_or_eq : (¬(p ∨ q)) = (¬p ∧ ¬q) :=\n  propext not_or\n#align not_or_eq not_or_eq\n\n",
 "not_not_eq":
 "theorem not_not_eq : (¬¬p) = p :=\n  propext not_not\n#align not_not_eq not_not_eq\n\n",
 "not_implies_eq":
 "theorem not_implies_eq : (¬(p → q)) = (p ∧ ¬q) :=\n  propext not_imp\n#align not_implies_eq not_implies_eq\n\n",
 "not_forall_eq":
 "theorem not_forall_eq : (¬∀ x, s x) = ∃ x, ¬s x :=\n  propext not_forall\n#align not_forall_eq not_forall_eq\n\n",
 "not_exists_eq":
 "theorem not_exists_eq : (¬∃ x, s x) = ∀ x, ¬s x :=\n  propext not_exists\n#align not_exists_eq not_exists_eq\n\n",
 "not_and_eq":
 "theorem not_and_eq : (¬(p ∧ q)) = (¬p ∨ ¬q) :=\n  propext not_and_or\n#align not_and_eq not_and_eq\n\n",
 "implies_iff_not_or":
 "theorem classical.implies_iff_not_or : p → q ↔ ¬p ∨ q :=\n  imp_iff_not_or\n#align classical.implies_iff_not_or classical.implies_iff_not_or\n\n",
 "by_contradiction_trick":
 "/-\nCopyright (c) 2017 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Jesse Michael Han\n-/\n-- stolen from interactive.lean\ntheorem by_contradiction_trick (p : Prop) (h : ∀ f : Prop, (p → f) → f) : p :=\n  h p id\n#align by_contradiction_trick by_contradiction_trick\n\n"}