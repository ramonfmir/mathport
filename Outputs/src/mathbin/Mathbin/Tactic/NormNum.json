{"zpow_pos":
 "theorem zpow_pos {α} [DivInvMonoid α] (a : α) (b : ℤ) (b' : ℕ) (c : α) (hb : b = b') (h : a ^ b' = c) : a ^ b = c := by\n  rw [← h, hb, zpow_ofNat]\n#align zpow_pos zpow_pos\n\n",
 "zpow_neg":
 "#print zpow_neg /-\ntheorem zpow_neg {α} [DivInvMonoid α] (a : α) (b : ℤ) (b' : ℕ) (c c' : α) (b0 : 0 < b') (hb : b = b') (h : a ^ b' = c)\n    (hc : c⁻¹ = c') : a ^ (-b) = c' := by rw [← hc, ← h, hb, zpow_neg_coe_of_pos _ b0]\n#align zpow_neg zpow_neg\n-/\n\n",
 "zero_succ":
 "theorem zero_succ {α} [Semiring α] : (0 + 1 : α) = 1 :=\n  zero_add _\n#align zero_succ zero_succ\n\n",
 "zero_lt_one":
 "#print zero_lt_one /-\ntheorem zero_lt_one [LinearOrderedSemiring α] : (0 : α) < 1 :=\n  zero_lt_one\n#align zero_lt_one zero_lt_one\n-/\n\n",
 "zero_adc":
 "theorem zero_adc {α} [Semiring α] (a b : α) (h : a + 1 = b) : 0 + a + 1 = b := by rwa [zero_add]\n#align zero_adc zero_adc\n\n",
 "subst_into_neg":
 "theorem subst_into_neg {α} [Neg α] (a ta t : α) (pra : a = ta) (prt : -ta = t) : -a = t := by simp [pra, prt]\n#align subst_into_neg subst_into_neg\n\n",
 "subst_into_mul":
 "theorem subst_into_mul {α} [Mul α] (l r tl tr t) (prl : (l : α) = tl) (prr : r = tr) (prt : tl * tr = t) : l * r = t :=\n  by rw [prl, prr, prt]\n#align subst_into_mul subst_into_mul\n\n",
 "subst_into_add":
 "/-\nCopyright (c) 2017 Simon Hudon All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon, Mario Carneiro\n-/\ntheorem subst_into_add {α} [Add α] (l r tl tr t) (prl : (l : α) = tl) (prr : r = tr) (prt : tl + tr = t) : l + r = t :=\n  by rw [prl, prr, prt]\n#align subst_into_add subst_into_add\n\n",
 "sub_pos":
 "#print sub_pos /-\ntheorem sub_pos {α} [AddGroup α] (a b b' c : α) (hb : -b = b') (h : a + b' = c) : a - b = c := by\n  rwa [← hb, ← sub_eq_add_neg] at h\n#align sub_pos sub_pos\n-/\n\n",
 "sub_neg":
 "#print sub_neg /-\ntheorem sub_neg {α} [AddGroup α] (a b c : α) (h : a + b = c) : a - -b = c := by rwa [sub_neg_eq_add]\n#align sub_neg sub_neg\n-/\n\n",
 "sub_nat_pos":
 "theorem sub_nat_pos (a b c : ℕ) (h : b + c = a) : a - b = c :=\n  h ▸ add_tsub_cancel_left _ _\n#align sub_nat_pos sub_nat_pos\n\n",
 "sub_nat_neg":
 "theorem sub_nat_neg (a b c : ℕ) (h : a + c = b) : a - b = 0 :=\n  tsub_eq_zero_iff_le.mpr <| h ▸ nat.le_add_right _ _\n#align sub_nat_neg sub_nat_neg\n\n",
 "sle_one_bit1":
 "theorem sle_one_bit1 {α} [LinearOrderedSemiring α] (a : α) : 1 ≤ a → 1 + 1 ≤ bit1 a :=\n  le_bit0_bit1 _ _\n#align sle_one_bit1 sle_one_bit1\n\n",
 "sle_one_bit0":
 "theorem sle_one_bit0 {α} [LinearOrderedSemiring α] (a : α) : 1 ≤ a → 1 + 1 ≤ bit0 a :=\n  bit0_le_bit0.2\n#align sle_one_bit0 sle_one_bit0\n\n",
 "sle_bit1_bit1":
 "theorem sle_bit1_bit1 {α} [LinearOrderedSemiring α] (a b : α) (h : a + 1 ≤ b) : bit1 a + 1 ≤ bit1 b :=\n  (bit1_succ a _ rfl).symm ▸ le_bit0_bit1 _ _ h\n#align sle_bit1_bit1 sle_bit1_bit1\n\n",
 "sle_bit1_bit0":
 "theorem sle_bit1_bit0 {α} [LinearOrderedSemiring α] (a b : α) (h : a + 1 ≤ b) : bit1 a + 1 ≤ bit0 b :=\n  (bit1_succ a _ rfl).symm ▸ bit0_le_bit0.2 h\n#align sle_bit1_bit0 sle_bit1_bit0\n\n",
 "sle_bit0_bit1":
 "theorem sle_bit0_bit1 {α} [LinearOrderedSemiring α] (a b : α) (h : a ≤ b) : bit0 a + 1 ≤ bit1 b :=\n  bit1_le_bit1.2 h\n#align sle_bit0_bit1 sle_bit0_bit1\n\n",
 "sle_bit0_bit0":
 "theorem sle_bit0_bit0 {α} [LinearOrderedSemiring α] (a b : α) : a + 1 ≤ b → bit0 a + 1 ≤ bit0 b :=\n  le_bit1_bit0 _ _\n#align sle_bit0_bit0 sle_bit0_bit0\n\n",
 "rat_cast_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_cast_neg {α} [DivisionRing α] (a : exprℚ) (a' : α) (h : ↑a = a') : ↑(-a) = -a' :=\n  h ▸ Rat.cast_neg _\n#align rat_cast_neg rat_cast_neg\n\n",
 "rat_cast_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_cast_ne {α} [DivisionRing α] [CharZero α] (a b : exprℚ) (a' b' : α) (ha : ↑a = a') (hb : ↑b = b')\n    (h : a ≠ b) : a' ≠ b' :=\n  ha ▸ hb ▸ mt Rat.cast_inj.1 h\n#align rat_cast_ne rat_cast_ne\n\n",
 "rat_cast_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_cast_div {α} [DivisionRing α] [CharZero α] (a b : exprℚ) (a' b' : α) (ha : ↑a = a') (hb : ↑b = b') :\n    ↑(a / b) = a' / b' :=\n  ha ▸ hb ▸ Rat.cast_div _ _\n#align rat_cast_div rat_cast_div\n\n",
 "rat_cast_bit1":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_cast_bit1 {α} [DivisionRing α] [CharZero α] (a : exprℚ) (a' : α) (h : ↑a = a') : ↑(bit1 a) = bit1 a' :=\n  h ▸ Rat.cast_bit1 _\n#align rat_cast_bit1 rat_cast_bit1\n\n",
 "rat_cast_bit0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem rat_cast_bit0 {α} [DivisionRing α] [CharZero α] (a : exprℚ) (a' : α) (h : ↑a = a') : ↑(bit0 a) = bit0 a' :=\n  h ▸ Rat.cast_bit0 _\n#align rat_cast_bit0 rat_cast_bit0\n\n",
 "pow_bit1":
 "#print pow_bit1 /-\ntheorem pow_bit1 [Monoid α] (a c₁ c₂ c : α) (b : ℕ) (h : a ^ b = c₁) (h₂ : c₁ * c₁ = c₂) (h₃ : c₂ * a = c) :\n    a ^ bit1 b = c := by rw [← h₃, ← h₂] <;> simp [pow_bit1, h]\n#align pow_bit1 pow_bit1\n-/\n\n",
 "pow_bit0":
 "#print pow_bit0 /-\ntheorem pow_bit0 [Monoid α] (a c' c : α) (b : ℕ) (h : a ^ b = c') (h₂ : c' * c' = c) : a ^ bit0 b = c :=\n  h₂ ▸ by simp [pow_bit0, h]\n#align pow_bit0 pow_bit0\n-/\n\n",
 "one_succ":
 "theorem one_succ {α} [Semiring α] : (1 + 1 : α) = 2 :=\n  rfl\n#align one_succ one_succ\n\n",
 "one_add":
 "theorem one_add {α} [Semiring α] (a b : α) (h : a + 1 = b) : 1 + a = b := by rwa [add_comm]\n#align one_add one_add\n\n",
 "not_refl_false_intro":
 "theorem not_refl_false_intro {α} (a : α) : (a ≠ a) = False :=\n  eq_false <| not_not_intro rfl\n#align not_refl_false_intro not_refl_false_intro\n\n",
 "nonneg_pos":
 "theorem nonneg_pos {α} [OrderedCancelAddCommMonoid α] (a : α) : 0 < a → 0 ≤ a :=\n  le_of_lt\n#align nonneg_pos nonneg_pos\n\n",
 "neg_succ_of_nat":
 "theorem neg_succ_of_nat (a b : ℕ) (c : ℤ) (h₁ : a + 1 = b)\n    (h₂ :\n      (haveI := @nat.cast_coe ℤ\n          b :\n          ℤ) =\n        c) :\n    -[a+1] = -c := by rw [← h₂, ← h₁] <;> rfl\n#align neg_succ_of_nat neg_succ_of_nat\n\n",
 "ne_zero_of_pos":
 "theorem ne_zero_of_pos {α} [OrderedAddCommGroup α] (a : α) : 0 < a → a ≠ 0 :=\n  ne_of_gt\n#align ne_zero_of_pos ne_zero_of_pos\n\n",
 "ne_zero_neg":
 "theorem ne_zero_neg {α} [AddGroup α] (a : α) : a ≠ 0 → -a ≠ 0 :=\n  mt neg_eq_zero.1\n#align ne_zero_neg ne_zero_neg\n\n",
 "nat_succ_eq":
 "theorem nat_succ_eq (a b c : ℕ) (h₁ : a = b) (h₂ : b + 1 = c) : nat.succ a = c := by rwa [h₁]\n#align nat_succ_eq nat_succ_eq\n\n",
 "nat_mod":
 "theorem nat_mod (a b q r m : ℕ) (hm : q * b = m) (h : r + m = a) (h₂ : r < b) : a % b = r := by\n  rw [← h, ← hm, nat.add_mul_mod_self_right, nat.mod_eq_of_lt h₂]\n#align nat_mod nat_mod\n\n",
 "nat_div":
 "-- With this option, turn off the messages if the result is exactly `true` \n-- Retrieve the `pexpr`s parsed as part of the simp args, and collate them into a big list. \n/- Synthesize a `tactic_state` including local variables as hypotheses under which `expr.simp`\n     may be safely called with expected behaviour given the `variables` in the environment. -/\n-- Enter the `tactic` monad, *critically* using the synthesized tactic state `ts`. \n/- Resolve the local variables added by the parser to `e` (when it was parsed) against the local\n       hypotheses added to the `ts : tactic_state` which we are using. -/\n/- Replace the variables referenced in the passed `simp_arg_list` with the `expr`s corresponding\n       to the local hypotheses we created.\n\n       We would prefer to just elaborate the `pexpr`s encoded in the `simp_arg_list` against the\n       tactic state we have created (as we could with `e` above), but the simplifier expects\n       `pexpr`s and not `expr`s. Thus, we just modify the `pexpr`s now and let `simp` do the\n       elaboration when the time comes.\n\n       You might think that we could just examine each of these `pexpr`s, call `to_expr` on them,\n       and then call `to_pexpr` afterward and save the results over the original `pexprs`. Due to\n       how functions like `simp_lemmas.add_pexpr` are implemented in the core library, the `simp`\n       framework is not robust enough to handle this method. When pieces of expressions like\n       annotation macros are injected, the direct patten matches in the `simp_lemmas.*` codebase\n       fail, and the lemmas we want don't get added.\n       -/\n-- Try simplifying the expression. \n-- Trace the result.\ntheorem nat_div (a b q r m : ℕ) (hm : q * b = m) (h : r + m = a) (h₂ : r < b) : a / b = q := by\n  rw [← h, ← hm, nat.add_mul_div_right _ _ (lt_of_le_of_lt (nat.zero_le _) h₂), nat.div_eq_of_lt h₂, zero_add]\n#align nat_div nat_div\n\n",
 "nat_cast_zero":
 "theorem nat_cast_zero {α} [Semiring α] : ↑(0 : ℕ) = (0 : α) :=\n  Nat.cast_zero\n#align nat_cast_zero nat_cast_zero\n\n",
 "nat_cast_one":
 "theorem nat_cast_one {α} [Semiring α] : ↑(1 : ℕ) = (1 : α) :=\n  Nat.cast_one\n#align nat_cast_one nat_cast_one\n\n",
 "nat_cast_ne":
 "theorem nat_cast_ne {α} [Semiring α] [CharZero α] (a b : ℕ) (a' b' : α) (ha : ↑a = a') (hb : ↑b = b') (h : a ≠ b) :\n    a' ≠ b' :=\n  ha ▸ hb ▸ mt Nat.cast_inj.1 h\n#align nat_cast_ne nat_cast_ne\n\n",
 "nat_cast_bit1":
 "theorem nat_cast_bit1 {α} [Semiring α] (a : ℕ) (a' : α) (h : ↑a = a') : ↑(bit1 a) = bit1 a' :=\n  h ▸ Nat.cast_bit1 _\n#align nat_cast_bit1 nat_cast_bit1\n\n",
 "nat_cast_bit0":
 "theorem nat_cast_bit0 {α} [Semiring α] (a : ℕ) (a' : α) (h : ↑a = a') : ↑(bit0 a) = bit0 a' :=\n  h ▸ Nat.cast_bit0 _\n#align nat_cast_bit0 nat_cast_bit0\n\n",
 "nat_abs_pos":
 "theorem nat_abs_pos (a : ℤ) (b : ℕ)\n    (h :\n      (haveI := @nat.cast_coe ℤ\n          b :\n          ℤ) =\n        a) :\n    a.nat_abs = b := by rw [← h] <;> simp\n#align nat_abs_pos nat_abs_pos\n\n",
 "nat_abs_neg":
 "theorem nat_abs_neg (a : ℤ) (b : ℕ)\n    (h :\n      (haveI := @nat.cast_coe ℤ\n          b :\n          ℤ) =\n        a) :\n    (-a).nat_abs = b := by rw [← h] <;> simp\n#align nat_abs_neg nat_abs_neg\n\n",
 "mul_pos_neg":
 "theorem mul_pos_neg {α} [Ring α] (a b c : α) (h : a * b = c) : a * -b = -c :=\n  h ▸ by simp\n#align mul_pos_neg mul_pos_neg\n\n",
 "mul_neg_pos":
 "theorem mul_neg_pos {α} [Ring α] (a b c : α) (h : a * b = c) : -a * b = -c :=\n  h ▸ by simp\n#align mul_neg_pos mul_neg_pos\n\n",
 "mul_neg_neg":
 "theorem mul_neg_neg {α} [Ring α] (a b c : α) (h : a * b = c) : -a * -b = c :=\n  h ▸ by simp\n#align mul_neg_neg mul_neg_neg\n\n",
 "mul_bit1_bit1":
 "theorem mul_bit1_bit1 {α} [Semiring α] (a b c d e : α) (hc : a * b = c) (hd : a + b = d) (he : bit0 c + d = e) :\n    bit1 a * bit1 b = bit1 e := by\n  rw [← he, ← hd, ← hc] <;> simp [bit1, bit0, mul_add, add_mul, add_left_comm, add_assoc]\n#align mul_bit1_bit1 mul_bit1_bit1\n\n",
 "mul_bit0_bit0":
 "theorem mul_bit0_bit0 {α} [Semiring α] (a b c : α) (h : a * b = c) : bit0 a * bit0 b = bit0 (bit0 c) :=\n  bit0_mul _ _ _ (mul_bit0' _ _ _ h)\n#align mul_bit0_bit0 mul_bit0_bit0\n\n",
 "mul_bit0'":
 "theorem mul_bit0' {α} [Semiring α] (a b c : α) (h : a * b = c) : a * bit0 b = bit0 c :=\n  h ▸ by simp [bit0, mul_add]\n#align mul_bit0' mul_bit0'\n\n",
 "lt_one_bit1":
 "theorem lt_one_bit1 {α} [LinearOrderedSemiring α] (a : α) (h : 0 < a) : 1 < bit1 a :=\n  one_lt_bit1.2 h\n#align lt_one_bit1 lt_one_bit1\n\n",
 "lt_one_bit0":
 "theorem lt_one_bit0 {α} [LinearOrderedSemiring α] (a : α) (h : 1 ≤ a) : 1 < bit0 a :=\n  lt_of_lt_of_le one_lt_two (bit0_le_bit0.2 h)\n#align lt_one_bit0 lt_one_bit0\n\n",
 "lt_neg_pos":
 "theorem lt_neg_pos {α} [OrderedAddCommGroup α] (a b : α) (ha : 0 < a) (hb : 0 < b) : -a < b :=\n  lt_trans (neg_neg_of_pos ha) hb\n#align lt_neg_pos lt_neg_pos\n\n",
 "lt_bit1_bit1":
 "theorem lt_bit1_bit1 {α} [LinearOrderedSemiring α] (a b : α) : a < b → bit1 a < bit1 b :=\n  bit1_lt_bit1.2\n#align lt_bit1_bit1 lt_bit1_bit1\n\n",
 "lt_bit1_bit0":
 "theorem lt_bit1_bit0 {α} [LinearOrderedSemiring α] (a b : α) (h : a + 1 ≤ b) : bit1 a < bit0 b :=\n  lt_of_lt_of_le (by simp [bit0, bit1, zero_lt_one, add_assoc]) (bit0_le_bit0.2 h)\n#align lt_bit1_bit0 lt_bit1_bit0\n\n",
 "lt_bit0_bit1":
 "theorem lt_bit0_bit1 {α} [LinearOrderedSemiring α] (a b : α) (h : a ≤ b) : bit0 a < bit1 b :=\n  lt_of_le_of_lt (bit0_le_bit0.2 h) (lt_add_one _)\n#align lt_bit0_bit1 lt_bit0_bit1\n\n",
 "lt_bit0_bit0":
 "theorem lt_bit0_bit0 {α} [LinearOrderedSemiring α] (a b : α) : a < b → bit0 a < bit0 b :=\n  bit0_lt_bit0.2\n#align lt_bit0_bit0 lt_bit0_bit0\n\n",
 "le_one_bit1":
 "-- deliberately strong hypothesis because bit1 0 is not a numeral\ntheorem le_one_bit1 {α} [LinearOrderedSemiring α] (a : α) (h : 0 < a) : 1 ≤ bit1 a :=\n  le_of_lt (lt_one_bit1 _ h)\n#align le_one_bit1 le_one_bit1\n\n",
 "le_one_bit0":
 "theorem le_one_bit0 {α} [LinearOrderedSemiring α] (a : α) (h : 1 ≤ a) : 1 ≤ bit0 a :=\n  le_of_lt (lt_one_bit0 _ h)\n#align le_one_bit0 le_one_bit0\n\n",
 "le_neg_pos":
 "theorem le_neg_pos {α} [OrderedAddCommGroup α] (a b : α) (ha : 0 ≤ a) (hb : 0 ≤ b) : -a ≤ b :=\n  le_trans (neg_nonpos_of_nonneg ha) hb\n#align le_neg_pos le_neg_pos\n\n",
 "le_bit1_bit1":
 "theorem le_bit1_bit1 {α} [LinearOrderedSemiring α] (a b : α) : a ≤ b → bit1 a ≤ bit1 b :=\n  bit1_le_bit1.2\n#align le_bit1_bit1 le_bit1_bit1\n\n",
 "le_bit1_bit0":
 "theorem le_bit1_bit0 {α} [LinearOrderedSemiring α] (a b : α) (h : a + 1 ≤ b) : bit1 a ≤ bit0 b :=\n  le_of_lt (lt_bit1_bit0 _ _ h)\n#align le_bit1_bit0 le_bit1_bit0\n\n",
 "le_bit0_bit1":
 "theorem le_bit0_bit1 {α} [LinearOrderedSemiring α] (a b : α) (h : a ≤ b) : bit0 a ≤ bit1 b :=\n  le_of_lt (lt_bit0_bit1 _ _ h)\n#align le_bit0_bit1 le_bit0_bit1\n\n",
 "le_bit0_bit0":
 "theorem le_bit0_bit0 {α} [LinearOrderedSemiring α] (a b : α) : a ≤ b → bit0 a ≤ bit0 b :=\n  bit0_le_bit0.2\n#align le_bit0_bit0 le_bit0_bit0\n\n",
 "inv_one_div":
 "theorem inv_one_div {α} [DivisionRing α] (a : α) : (1 / a)⁻¹ = a := by rw [one_div, inv_inv]\n#align inv_one_div inv_one_div\n\n",
 "inv_one":
 "#print inv_one /-\ntheorem inv_one {α} [DivisionRing α] : (1 : α)⁻¹ = 1 :=\n  inv_one\n#align inv_one inv_one\n-/\n\n",
 "inv_neg":
 "#print inv_neg /-\ntheorem inv_neg {α} [DivisionRing α] (a b : α) (h : a⁻¹ = b) : (-a)⁻¹ = -b :=\n  h ▸ by simp only [inv_eq_one_div, one_div_neg_eq_neg_one_div]\n#align inv_neg inv_neg\n-/\n\n",
 "inv_div_one":
 "theorem inv_div_one {α} [DivisionRing α] (a : α) : a⁻¹ = 1 / a :=\n  inv_eq_one_div _\n#align inv_div_one inv_div_one\n\n",
 "inv_div":
 "#print inv_div /-\ntheorem inv_div {α} [DivisionRing α] (a b : α) : (a / b)⁻¹ = b / a := by simp only [inv_eq_one_div, one_div_div]\n#align inv_div inv_div\n-/\n\n",
 "int_to_nat_pos":
 "theorem int_to_nat_pos (a : ℤ) (b : ℕ)\n    (h :\n      (haveI := @nat.cast_coe ℤ\n          b :\n          ℤ) =\n        a) :\n    a.to_nat = b := by rw [← h] <;> simp\n#align int_to_nat_pos int_to_nat_pos\n\n",
 "int_to_nat_neg":
 "theorem int_to_nat_neg (a : ℤ) (h : 0 < a) : (-a).to_nat = 0 := by simp only [Int.toNat_of_nonpos, h.le, neg_nonpos]\n#align int_to_nat_neg int_to_nat_neg\n\n",
 "int_to_nat_cast":
 "theorem int_to_nat_cast (a : ℕ) (b : ℤ)\n    (h :\n      (haveI := @nat.cast_coe ℤ\n          a :\n          ℤ) =\n        b) :\n    ↑a = b :=\n  Eq.trans (by simp) h\n#align int_to_nat_cast int_to_nat_cast\n\n",
 "int_mod_neg":
 "theorem int_mod_neg (a b c : ℤ) (h : a % b = c) : a % -b = c :=\n  (Int.mod_neg _ _).trans h\n#align int_mod_neg int_mod_neg\n\n",
 "int_mod":
 "theorem int_mod (a b q r m : ℤ) (hm : q * b = m) (h : r + m = a) (h₁ : 0 ≤ r) (h₂ : r < b) : a % b = r := by\n  rw [← h, ← hm, Int.add_mul_emod_self, Int.emod_eq_of_lt h₁ h₂]\n#align int_mod int_mod\n\n",
 "int_div_neg":
 "theorem int_div_neg (a b c' c : ℤ) (h : a / b = c') (h₂ : -c' = c) : a / -b = c :=\n  h₂ ▸ h ▸ Int.div_neg _ _\n#align int_div_neg int_div_neg\n\n",
 "int_div":
 "theorem int_div (a b q r m : ℤ) (hm : q * b = m) (h : r + m = a) (h₁ : 0 ≤ r) (h₂ : r < b) : a / b = q := by\n  rw [← h, ← hm, Int.add_mul_ediv_right _ _ (ne_of_gt (lt_of_le_of_lt h₁ h₂)), Int.div_eq_zero_of_lt h₁ h₂, zero_add]\n#align int_div int_div\n\n",
 "int_cast_zero":
 "theorem int_cast_zero {α} [Ring α] : ↑(0 : ℤ) = (0 : α) :=\n  Int.cast_zero\n#align int_cast_zero int_cast_zero\n\n",
 "int_cast_one":
 "theorem int_cast_one {α} [Ring α] : ↑(1 : ℤ) = (1 : α) :=\n  Int.cast_one\n#align int_cast_one int_cast_one\n\n",
 "int_cast_neg":
 "theorem int_cast_neg {α} [Ring α] (a : ℤ) (a' : α) (h : ↑a = a') : ↑(-a) = -a' :=\n  h ▸ Int.cast_neg _\n#align int_cast_neg int_cast_neg\n\n",
 "int_cast_ne":
 "theorem int_cast_ne {α} [Ring α] [CharZero α] (a b : ℤ) (a' b' : α) (ha : ↑a = a') (hb : ↑b = b') (h : a ≠ b) :\n    a' ≠ b' :=\n  ha ▸ hb ▸ mt Int.cast_inj.1 h\n#align int_cast_ne int_cast_ne\n\n",
 "int_cast_bit1":
 "theorem int_cast_bit1 {α} [Ring α] (a : ℤ) (a' : α) (h : ↑a = a') : ↑(bit1 a) = bit1 a' :=\n  h ▸ Int.cast_bit1 _\n#align int_cast_bit1 int_cast_bit1\n\n",
 "int_cast_bit0":
 "theorem int_cast_bit0 {α} [Ring α] (a : ℤ) (a' : α) (h : ↑a = a') : ↑(bit0 a) = bit0 a' :=\n  h ▸ Int.cast_bit0 _\n#align int_cast_bit0 int_cast_bit0\n\n",
 "gt_intro":
 "-- see Note [nolint_ge]\n@[nolint ge_or_gt]\ntheorem gt_intro {α} [LT α] (a b : α) (c) (h : (a < b) = c) : (b > a) = c :=\n  h\n#align gt_intro gt_intro\n\n",
 "ge_intro":
 "-- see Note [nolint_ge]\n@[nolint ge_or_gt]\ntheorem ge_intro {α} [LE α] (a b : α) (c) (h : (a ≤ b) = c) : (b ≥ a) = c :=\n  h\n#align ge_intro ge_intro\n\n",
 "dvd_eq_nat":
 "-- ensure `a` is in normal form\ntheorem dvd_eq_nat (a b c : ℕ) (p) (h₁ : b % a = c) (h₂ : (c = 0) = p) : (a ∣ b) = p :=\n  (propext <| by rw [← h₁, nat.dvd_iff_mod_eq_zero]).trans h₂\n#align dvd_eq_nat dvd_eq_nat\n\n",
 "dvd_eq_int":
 "theorem dvd_eq_int (a b c : ℤ) (p) (h₁ : b % a = c) (h₂ : (c = 0) = p) : (a ∣ b) = p :=\n  (propext <| by rw [← h₁, Int.dvd_iff_emod_eq_zero]).trans h₂\n#align dvd_eq_int dvd_eq_int\n\n",
 "div_eq":
 "theorem div_eq {α} [DivisionRing α] (a b b' c : α) (hb : b⁻¹ = b') (h : a * b' = c) : a / b = c := by\n  rwa [← hb, ← div_eq_mul_inv] at h\n#align div_eq div_eq\n\n",
 "clear_denom_simple_nat":
 "theorem clear_denom_simple_nat {α} [DivisionRing α] (a : α) : (1 : α) ≠ 0 ∧ a * 1 = a :=\n  ⟨one_ne_zero, mul_one _⟩\n#align clear_denom_simple_nat clear_denom_simple_nat\n\n",
 "clear_denom_simple_div":
 "theorem clear_denom_simple_div {α} [DivisionRing α] (a b : α) (h : b ≠ 0) : b ≠ 0 ∧ a / b * b = a :=\n  ⟨h, div_mul_cancel _ h⟩\n#align clear_denom_simple_div clear_denom_simple_div\n\n",
 "clear_denom_mul":
 "theorem clear_denom_mul {α} [Field α] (a a' b b' c c' d₁ d₂ d : α) (ha : d₁ ≠ 0 ∧ a * d₁ = a')\n    (hb : d₂ ≠ 0 ∧ b * d₂ = b') (hc : c * d = c') (hd : d₁ * d₂ = d) (h : a' * b' = c') : a * b = c :=\n  mul_right_cancel₀ ha.1 <|\n    mul_right_cancel₀ hb.1 <| by rw [mul_assoc c, hd, hc, ← h, ← ha.2, ← hb.2, ← mul_assoc, mul_right_comm a]\n#align clear_denom_mul clear_denom_mul\n\n",
 "clear_denom_lt":
 "theorem clear_denom_lt {α} [LinearOrderedSemiring α] (a a' b b' d : α) (h₀ : 0 < d) (ha : a * d = a') (hb : b * d = b')\n    (h : a' < b') : a < b :=\n  lt_of_mul_lt_mul_right (by rwa [ha, hb]) (le_of_lt h₀)\n#align clear_denom_lt clear_denom_lt\n\n",
 "clear_denom_le":
 "-- we have to switch the order of `a` and `b` because `a < b ↔ -b < -a`\ntheorem clear_denom_le {α} [LinearOrderedSemiring α] (a a' b b' d : α) (h₀ : 0 < d) (ha : a * d = a') (hb : b * d = b')\n    (h : a' ≤ b') : a ≤ b :=\n  le_of_mul_le_mul_right (by rwa [ha, hb]) h₀\n#align clear_denom_le clear_denom_le\n\n",
 "clear_denom_div":
 "theorem clear_denom_div {α} [DivisionRing α] (a b b' c d : α) (h₀ : b ≠ 0) (h₁ : b * b' = d) (h₂ : a * b' = c) :\n    a / b * d = c := by rwa [← h₁, ← mul_assoc, div_mul_cancel _ h₀]\n#align clear_denom_div clear_denom_div\n\n",
 "clear_denom_add":
 "theorem clear_denom_add {α} [DivisionRing α] (a a' b b' c c' d : α) (h₀ : d ≠ 0) (ha : a * d = a') (hb : b * d = b')\n    (hc : c * d = c') (h : a' + b' = c') : a + b = c :=\n  mul_right_cancel₀ h₀ <| by rwa [add_mul, ha, hb, hc]\n#align clear_denom_add clear_denom_add\n\n",
 "bit1_succ":
 "theorem bit1_succ {α} [Semiring α] (a b : α) (h : a + 1 = b) : bit1 a + 1 = bit0 b :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align bit1_succ bit1_succ\n\n",
 "bit0_succ":
 "theorem bit0_succ {α} [Semiring α] (a : α) : bit0 a + 1 = bit1 a :=\n  rfl\n#align bit0_succ bit0_succ\n\n",
 "bit0_mul":
 "#print bit0_mul /-\ntheorem bit0_mul {α} [Semiring α] (a b c : α) (h : a * b = c) : bit0 a * b = bit0 c :=\n  h ▸ by simp [bit0, add_mul]\n#align bit0_mul bit0_mul\n-/\n\n",
 "add_pos_neg_pos":
 "theorem add_pos_neg_pos {α} [AddGroup α] (a b c : α) (h : c + b = a) : a + -b = c :=\n  h ▸ by simp\n#align add_pos_neg_pos add_pos_neg_pos\n\n",
 "add_pos_neg_neg":
 "theorem add_pos_neg_neg {α} [AddGroup α] (a b c : α) (h : c + a = b) : a + -b = -c :=\n  h ▸ by simp\n#align add_pos_neg_neg add_pos_neg_neg\n\n",
 "add_neg_pos_pos":
 "theorem add_neg_pos_pos {α} [AddGroup α] (a b c : α) (h : a + c = b) : -a + b = c :=\n  h ▸ by simp\n#align add_neg_pos_pos add_neg_pos_pos\n\n",
 "add_neg_pos_neg":
 "theorem add_neg_pos_neg {α} [AddGroup α] (a b c : α) (h : b + c = a) : -a + b = -c :=\n  h ▸ by simp\n#align add_neg_pos_neg add_neg_pos_neg\n\n",
 "add_neg_neg":
 "theorem add_neg_neg {α} [AddGroup α] (a b c : α) (h : b + a = c) : -a + -b = -c :=\n  h ▸ by simp\n#align add_neg_neg add_neg_neg\n\n",
 "add_bit1_bit1":
 "theorem add_bit1_bit1 {α} [Semiring α] (a b c : α) (h : a + b + 1 = c) : bit1 a + bit1 b = bit0 c :=\n  h ▸ by simp [bit0, bit1, add_left_comm, add_comm, add_assoc]\n#align add_bit1_bit1 add_bit1_bit1\n\n",
 "add_bit1_bit0":
 "theorem add_bit1_bit0 {α} [Semiring α] (a b c : α) (h : a + b = c) : bit1 a + bit0 b = bit1 c :=\n  h ▸ by simp [bit0, bit1, add_left_comm, add_comm, add_assoc]\n#align add_bit1_bit0 add_bit1_bit0\n\n",
 "add_bit0_bit1":
 "theorem add_bit0_bit1 {α} [Semiring α] (a b c : α) (h : a + b = c) : bit0 a + bit1 b = bit1 c :=\n  h ▸ by simp [bit0, bit1, add_left_comm, add_assoc]\n#align add_bit0_bit1 add_bit0_bit1\n\n",
 "add_bit0_bit0":
 "theorem add_bit0_bit0 {α} [Semiring α] (a b c : α) (h : a + b = c) : bit0 a + bit0 b = bit0 c :=\n  h ▸ by simp [bit0, add_left_comm, add_assoc]\n#align add_bit0_bit0 add_bit0_bit0\n\n",
 "adc_zero":
 "theorem adc_zero {α} [Semiring α] (a b : α) (h : a + 1 = b) : a + 0 + 1 = b := by rwa [add_zero]\n#align adc_zero adc_zero\n\n",
 "adc_one_one":
 "theorem adc_one_one {α} [Semiring α] : (1 + 1 + 1 : α) = 3 :=\n  rfl\n#align adc_one_one adc_one_one\n\n",
 "adc_one_bit1":
 "theorem adc_one_bit1 {α} [Semiring α] (a b : α) (h : a + 1 = b) : 1 + bit1 a + 1 = bit1 b :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align adc_one_bit1 adc_one_bit1\n\n",
 "adc_one_bit0":
 "theorem adc_one_bit0 {α} [Semiring α] (a b : α) (h : a + 1 = b) : 1 + bit0 a + 1 = bit0 b :=\n  h ▸ by simp [bit0, add_left_comm, add_assoc]\n#align adc_one_bit0 adc_one_bit0\n\n",
 "adc_bit1_one":
 "theorem adc_bit1_one {α} [Semiring α] (a b : α) (h : a + 1 = b) : bit1 a + 1 + 1 = bit1 b :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align adc_bit1_one adc_bit1_one\n\n",
 "adc_bit1_bit1":
 "theorem adc_bit1_bit1 {α} [Semiring α] (a b c : α) (h : a + b + 1 = c) : bit1 a + bit1 b + 1 = bit1 c :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align adc_bit1_bit1 adc_bit1_bit1\n\n",
 "adc_bit1_bit0":
 "theorem adc_bit1_bit0 {α} [Semiring α] (a b c : α) (h : a + b + 1 = c) : bit1 a + bit0 b + 1 = bit0 c :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align adc_bit1_bit0 adc_bit1_bit0\n\n",
 "adc_bit0_one":
 "theorem adc_bit0_one {α} [Semiring α] (a b : α) (h : a + 1 = b) : bit0 a + 1 + 1 = bit0 b :=\n  h ▸ by simp [bit0, add_left_comm, add_assoc]\n#align adc_bit0_one adc_bit0_one\n\n",
 "adc_bit0_bit1":
 "theorem adc_bit0_bit1 {α} [Semiring α] (a b c : α) (h : a + b + 1 = c) : bit0 a + bit1 b + 1 = bit0 c :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align adc_bit0_bit1 adc_bit0_bit1\n\n",
 "adc_bit0_bit0":
 "theorem adc_bit0_bit0 {α} [Semiring α] (a b c : α) (h : a + b = c) : bit0 a + bit0 b + 1 = bit1 c :=\n  h ▸ by simp [bit1, bit0, add_left_comm, add_assoc]\n#align adc_bit0_bit0 adc_bit0_bit0\n\n"}