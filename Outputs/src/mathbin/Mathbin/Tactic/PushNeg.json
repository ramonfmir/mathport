{"not_or_eq":
 "theorem not_or_eq : (¬(p ∨ q)) = (¬p ∧ ¬q) :=\n  propext not_or\n#align not_or_eq not_or_eq\n\n",
 "not_not_eq":
 "/-\nCopyright (c) 2019 Patrick Massot All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Simon Hudon\n-/\n/- Enable the option `trace.push_neg.use_distrib` in order to have `¬ (p ∧ q)` normalized to\n`¬ p ∨ ¬ q`, rather than the default `p → ¬ q`. -/\ntheorem not_not_eq : (¬¬p) = p :=\n  propext Classical.not_not\n#align not_not_eq not_not_eq\n\n",
 "not_lt_eq":
 "theorem not_lt_eq (a b : β) : (¬a < b) = (b ≤ a) :=\n  propext not_lt\n#align not_lt_eq not_lt_eq\n\n",
 "not_le_eq":
 "theorem not_le_eq (a b : β) : (¬a ≤ b) = (b < a) :=\n  propext not_le\n#align not_le_eq not_le_eq\n\n",
 "not_implies_eq":
 "theorem not_implies_eq : (¬(p → q)) = (p ∧ ¬q) :=\n  propext not_imp\n#align not_implies_eq not_implies_eq\n\n",
 "not_forall_eq":
 "theorem not_forall_eq : (¬∀ x, s x) = ∃ x, ¬s x :=\n  propext not_forall\n#align not_forall_eq not_forall_eq\n\n",
 "not_exists_eq":
 "theorem not_exists_eq : (¬∃ x, s x) = ∀ x, ¬s x :=\n  propext not_exists\n#align not_exists_eq not_exists_eq\n\n",
 "not_eq":
 "theorem not_eq (a b : α) : ¬a = b ↔ a ≠ b :=\n  iff.rfl\n#align not_eq not_eq\n\n",
 "not_and_eq":
 "theorem not_and_eq : (¬(p ∧ q)) = (p → ¬q) :=\n  propext not_and\n#align not_and_eq not_and_eq\n\n",
 "not_and_distrib_eq":
 "theorem not_and_distrib_eq : (¬(p ∧ q)) = (¬p ∨ ¬q) :=\n  propext not_and_or\n#align not_and_distrib_eq not_and_distrib_eq\n\n",
 "implies_iff_not_or":
 "theorem classical.implies_iff_not_or : p → q ↔ ¬p ∨ q :=\n  imp_iff_not_or\n#align classical.implies_iff_not_or classical.implies_iff_not_or\n\n",
 "imp_of_not_imp_not":
 "theorem imp_of_not_imp_not (P Q : Prop) : (¬Q → ¬P) → P → Q := fun h hP => by_contradiction fun h' => h h' hP\n#align imp_of_not_imp_not imp_of_not_imp_not\n\n"}