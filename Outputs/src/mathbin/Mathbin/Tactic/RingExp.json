{"sum_congr":
 "/-\nCopyright (c) 2019 Tim Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Tim Baanen\n-/\n-- The base ring `α` will have a universe level `u`.\n-- We do not introduce `α` as a variable yet,\n-- in order to make it explicit or implicit as required.\n-- Cache the instances for optimization and consistency\n-- Optional instances (only required for (-) and (/) respectively)\n-- Cache common constants.\n/-- Congruence lemma for constructing `ex.sum`. -/\ntheorem sum_congr {p p' ps ps' : α} : p = p' → ps = ps' → p + ps = p' + ps' := by cc\n#align sum_congr sum_congr\n\n",
 "sub_pf":
 "theorem sub_pf {α} [Ring α] {ps qs psqs : α} (h : ps + -qs = psqs) : ps - qs = psqs := by rwa [sub_eq_add_neg]\n#align sub_pf sub_pf\n\n",
 "simple_pf_var_one":
 "theorem simple_pf_var_one (p : α) : p ^ 1 = p := by simp\n#align simple_pf_var_one simple_pf_var_one\n\n",
 "simple_pf_sum_zero":
 "theorem simple_pf_sum_zero {p p' : α} : p = p' → p + 0 = p' := by simp\n#align simple_pf_sum_zero simple_pf_sum_zero\n\n",
 "simple_pf_prod_one":
 "theorem simple_pf_prod_one {p p' : α} : p = p' → p * 1 = p' := by simp\n#align simple_pf_prod_one simple_pf_prod_one\n\n",
 "simple_pf_prod_neg_one":
 "theorem simple_pf_prod_neg_one {α} [Ring α] {p p' : α} : p = p' → p * -1 = -p' := by simp\n#align simple_pf_prod_neg_one simple_pf_prod_neg_one\n\n",
 "simple_pf_exp_one":
 "theorem simple_pf_exp_one {p p' : α} : p = p' → p ^ 1 = p' := by simp\n#align simple_pf_exp_one simple_pf_exp_one\n\n",
 "prod_to_sum_pf":
 "theorem prod_to_sum_pf {p p' : α} : p = p' → p = p' + 0 := by simp\n#align prod_to_sum_pf prod_to_sum_pf\n\n",
 "prod_congr":
 "/-- Congruence lemma for constructing `ex.prod`. -/\ntheorem prod_congr {p p' ps ps' : α} : p = p' → ps = ps' → p * ps = p' * ps' := by cc\n#align prod_congr prod_congr\n\n",
 "pow_pp_pf_prod":
 "theorem pow_pp_pf_prod {pps p ps pqs psqs : α} {qs : ℕ} :\n    pps = p * ps → p ^ qs = pqs → ps ^ qs = psqs → pps ^ qs = pqs * psqs := fun pps_pf pqs_pf psqs_pf =>\n  calc\n    pps ^ qs = (p * ps) ^ qs := by rw [pps_pf]\n    _ = p ^ qs * ps ^ qs := mul_pow _ _ _\n    _ = pqs * psqs := by rw [pqs_pf, psqs_pf]\n    \n#align pow_pp_pf_prod pow_pp_pf_prod\n\n",
 "pow_pp_pf_one":
 "theorem pow_pp_pf_one {ps : α} {qs : ℕ} : ps = 1 → ps ^ qs = 1 := fun ps_pf => by rw [ps_pf, one_pow]\n#align pow_pp_pf_one pow_pp_pf_one\n\n",
 "pow_pp_pf_c":
 "theorem pow_pp_pf_c {ps ps' pqs : α} {qs qs' : ℕ} : ps = ps' → qs = qs' → ps' ^ qs' = pqs → ps ^ qs = pqs * 1 := by\n  simp <;> cc\n#align pow_pp_pf_c pow_pp_pf_c\n\n",
 "pow_pf_zero":
 "-- fallback: treat them as atoms\ntheorem pow_pf_zero {ps : α} {qs : ℕ} : qs = 0 → ps ^ qs = 1 := fun qs_pf =>\n  calc\n    ps ^ qs = ps ^ 0 := by rw [qs_pf]\n    _ = 1 := pow_zero _\n    \n#align pow_pf_zero pow_pf_zero\n\n",
 "pow_pf_sum":
 "theorem pow_pf_sum {ps psqqs : α} {qqs q qs : ℕ} : qqs = q + qs → ps ^ q * ps ^ qs = psqqs → ps ^ qqs = psqqs :=\n  fun qqs_pf psqqs_pf =>\n  calc\n    ps ^ qqs = ps ^ (q + qs) := by rw [qqs_pf]\n    _ = ps ^ q * ps ^ qs := pow_add _ _ _\n    _ = psqqs := psqqs_pf\n    \n#align pow_pf_sum pow_pf_sum\n\n",
 "pow_pf_c_c":
 "theorem pow_pf_c_c {ps ps' pq : α} {qs qs' : ℕ} : ps = ps' → qs = qs' → ps' ^ qs' = pq → ps ^ qs = pq := by cc\n#align pow_pf_c_c pow_pf_c_c\n\n",
 "pow_p_pf_zero":
 "theorem pow_p_pf_zero {ps : α} {qs qs' : ℕ} : ps = 0 → qs = succ qs' → ps ^ qs = 0 := fun ps_pf qs_pf =>\n  calc\n    ps ^ qs = 0 ^ succ qs' := by rw [ps_pf, qs_pf]\n    _ = 0 := zero_pow (succ_pos qs')\n    \n#align pow_p_pf_zero pow_p_pf_zero\n\n",
 "pow_p_pf_succ":
 "theorem pow_p_pf_succ {ps pqqs : α} {qs qs' : ℕ} : qs = succ qs' → ps * ps ^ qs' = pqqs → ps ^ qs = pqqs :=\n  fun qs_pf pqqs_pf =>\n  calc\n    ps ^ qs = ps ^ succ qs' := by rw [qs_pf]\n    _ = ps * ps ^ qs' := pow_succ _ _\n    _ = pqqs := by rw [pqqs_pf]\n    \n#align pow_p_pf_succ pow_p_pf_succ\n\n",
 "pow_p_pf_singleton":
 "theorem pow_p_pf_singleton {pps p pqs : α} {qs : ℕ} : pps = p + 0 → p ^ qs = pqs → pps ^ qs = pqs :=\n  fun pps_pf pqs_pf => by rw [pps_pf, add_zero, pqs_pf]\n#align pow_p_pf_singleton pow_p_pf_singleton\n\n",
 "pow_p_pf_one":
 "theorem pow_p_pf_one {ps ps' : α} {qs : ℕ} : ps = ps' → qs = succ zero → ps ^ qs = ps' := fun ps_pf qs_pf =>\n  calc\n    ps ^ qs = ps' ^ 1 := by rw [ps_pf, qs_pf]\n    _ = ps' := pow_one _\n    \n#align pow_p_pf_one pow_p_pf_one\n\n",
 "pow_p_pf_cons":
 "theorem pow_p_pf_cons {ps ps' : α} {qs qs' : ℕ} : ps = ps' → qs = qs' → ps ^ qs = ps' ^ qs' := by cc\n#align pow_p_pf_cons pow_p_pf_cons\n\n",
 "pow_e_pf_exp":
 "theorem pow_e_pf_exp {pps p : α} {ps qs psqs : ℕ} : pps = p ^ ps → ps * qs = psqs → pps ^ qs = p ^ psqs :=\n  fun pps_pf psqs_pf =>\n  calc\n    pps ^ qs = (p ^ ps) ^ qs := by rw [pps_pf]\n    _ = p ^ (ps * qs) := symm (pow_mul _ _ _)\n    _ = p ^ psqs := by rw [psqs_pf]\n    \n#align pow_e_pf_exp pow_e_pf_exp\n\n",
 "negate_pf":
 "theorem negate_pf {α} [Ring α] {ps ps' : α} : -1 * ps = ps' → -ps = ps' := by simp\n#align negate_pf negate_pf\n\n",
 "mul_pp_pf_prod_lt":
 "theorem mul_pp_pf_prod_lt {pps p ps qqs pqs : α} : pps = p * ps → ps * qqs = pqs → pps * qqs = p * pqs := by cc\n#align mul_pp_pf_prod_lt mul_pp_pf_prod_lt\n\n",
 "mul_pp_pf_prod_gt":
 "theorem mul_pp_pf_prod_gt {pps qqs q qs pqs : α} : qqs = q * qs → pps * qs = pqs → pps * qqs = q * pqs := by cc\n#align mul_pp_pf_prod_gt mul_pp_pf_prod_gt\n\n",
 "mul_pp_pf_overlap":
 "theorem mul_pp_pf_overlap {pps p_b ps qqs qs psqs : α} {p_e q_e : ℕ} :\n    pps = p_b ^ p_e * ps → qqs = p_b ^ q_e * qs → p_b ^ (p_e + q_e) * (ps * qs) = psqs → pps * qqs = psqs :=\n  fun ps_pf qs_pf psqs_pf => by simp [symm psqs_pf, pow_add, ps_pf, qs_pf] <;> ac_rfl\n#align mul_pp_pf_overlap mul_pp_pf_overlap\n\n",
 "mul_pf_zero":
 "theorem mul_pf_zero {ps qs : α} : qs = 0 → ps * qs = 0 := fun qs_pf => by rw [qs_pf, mul_zero]\n#align mul_pf_zero mul_pf_zero\n\n",
 "mul_pf_sum":
 "theorem mul_pf_sum {ps qqs q qs psqqs : α} : qqs = q + qs → ps * q + ps * qs = psqqs → ps * qqs = psqqs :=\n  fun qs_pf psqqs_pf =>\n  calc\n    ps * qqs = ps * (q + qs) := by rw [qs_pf]\n    _ = ps * q + ps * qs := mul_add _ _ _\n    _ = psqqs := psqqs_pf\n    \n#align mul_pf_sum mul_pf_sum\n\n",
 "mul_pf_prod_c":
 "theorem mul_pf_prod_c {pps p ps qs pqs : α} : pps = p * ps → ps * qs = pqs → pps * qs = p * pqs := by cc\n#align mul_pf_prod_c mul_pf_prod_c\n\n",
 "mul_pf_c_prod":
 "theorem mul_pf_c_prod {ps qqs q qs pqs : α} : qqs = q * qs → ps * qs = pqs → ps * qqs = q * pqs := by cc\n#align mul_pf_c_prod mul_pf_c_prod\n\n",
 "mul_pf_c_c":
 "theorem mul_pf_c_c {ps ps' qs qs' pq : α} : ps = ps' → qs = qs' → ps' * qs' = pq → ps * qs = pq := by cc\n#align mul_pf_c_c mul_pf_c_c\n\n",
 "mul_p_pf_zero":
 "theorem mul_p_pf_zero {ps qs : α} : ps = 0 → ps * qs = 0 := fun ps_pf => by rw [ps_pf, zero_mul]\n#align mul_p_pf_zero mul_p_pf_zero\n\n",
 "mul_p_pf_sum":
 "theorem mul_p_pf_sum {pps p ps qs ppsqs : α} : pps = p + ps → p * qs + ps * qs = ppsqs → pps * qs = ppsqs :=\n  fun pps_pf ppsqs_pf =>\n  calc\n    pps * qs = (p + ps) * qs := by rw [pps_pf]\n    _ = p * qs + ps * qs := add_mul _ _ _\n    _ = ppsqs := ppsqs_pf\n    \n#align mul_p_pf_sum mul_p_pf_sum\n\n",
 "mul_coeff_pf_one_mul":
 "theorem mul_coeff_pf_one_mul (q : α) : 1 * q = q :=\n  one_mul q\n#align mul_coeff_pf_one_mul mul_coeff_pf_one_mul\n\n",
 "mul_coeff_pf_mul_one":
 "theorem mul_coeff_pf_mul_one (p : α) : p * 1 = p :=\n  mul_one p\n#align mul_coeff_pf_mul_one mul_coeff_pf_mul_one\n\n",
 "inverse_pf":
 "theorem inverse_pf {α} [DivisionRing α] {ps ps_u ps_p e' e'' : α} :\n    ps = ps_u → ps_u = ps_p → ps_p⁻¹ = e' → e' = e'' → ps⁻¹ = e'' := by cc\n#align inverse_pf inverse_pf\n\n",
 "exp_to_prod_pf":
 "theorem exp_to_prod_pf {p p' : α} : p = p' → p = p' * 1 := by simp\n#align exp_to_prod_pf exp_to_prod_pf\n\n",
 "exp_congr":
 "/-- Congruence lemma for constructing `ex.exp`. -/\ntheorem exp_congr {p p' : α} {ps ps' : ℕ} : p = p' → ps = ps' → p ^ ps = p' ^ ps' := by cc\n#align exp_congr exp_congr\n\n",
 "div_pf":
 "theorem div_pf {α} [DivisionRing α] {ps qs psqs : α} (h : ps * qs⁻¹ = psqs) : ps / qs = psqs := by rwa [div_eq_mul_inv]\n#align div_pf div_pf\n\n",
 "base_to_exp_pf":
 "theorem base_to_exp_pf {p p' : α} : p = p' → p = p' ^ 1 := by simp\n#align base_to_exp_pf base_to_exp_pf\n\n",
 "atom_to_sum_pf":
 "theorem atom_to_sum_pf (p : α) : p = p ^ 1 * 1 + 0 := by simp\n#align atom_to_sum_pf atom_to_sum_pf\n\n",
 "add_pf_z_sum":
 "theorem add_pf_z_sum {ps qs qs' : α} : ps = 0 → qs = qs' → ps + qs = qs' := fun ps_pf qs_pf =>\n  calc\n    ps + qs = 0 + qs' := by rw [ps_pf, qs_pf]\n    _ = qs' := zero_add _\n    \n#align add_pf_z_sum add_pf_z_sum\n\n",
 "add_pf_sum_z":
 "theorem add_pf_sum_z {ps ps' qs : α} : ps = ps' → qs = 0 → ps + qs = ps' := fun ps_pf qs_pf =>\n  calc\n    ps + qs = ps' + 0 := by rw [ps_pf, qs_pf]\n    _ = ps' := add_zero _\n    \n#align add_pf_sum_z add_pf_sum_z\n\n",
 "add_pf_sum_overlap_zero":
 "theorem add_pf_sum_overlap_zero {pps p ps qqs q qs pqs : α} :\n    pps = p + ps → qqs = q + qs → p + q = 0 → ps + qs = pqs → pps + qqs = pqs := fun pps_pf qqs_pf pq_pf pqs_pf =>\n  calc\n    pps + qqs = p + ps + (q + qs) := by rw [pps_pf, qqs_pf]\n    _ = p + q + (ps + qs) := by cc\n    _ = 0 + pqs := by rw [pq_pf, pqs_pf]\n    _ = pqs := zero_add _\n    \n#align add_pf_sum_overlap_zero add_pf_sum_overlap_zero\n\n",
 "add_pf_sum_overlap":
 "theorem add_pf_sum_overlap {pps p ps qqs q qs pq pqs : α} :\n    pps = p + ps → qqs = q + qs → p + q = pq → ps + qs = pqs → pps + qqs = pq + pqs := by cc\n#align add_pf_sum_overlap add_pf_sum_overlap\n\n",
 "add_pf_sum_lt":
 "theorem add_pf_sum_lt {pps p ps qqs pqs : α} : pps = p + ps → ps + qqs = pqs → pps + qqs = p + pqs := by cc\n#align add_pf_sum_lt add_pf_sum_lt\n\n",
 "add_pf_sum_gt":
 "theorem add_pf_sum_gt {pps qqs q qs pqs : α} : qqs = q + qs → pps + qs = pqs → pps + qqs = q + pqs := by cc\n#align add_pf_sum_gt add_pf_sum_gt\n\n",
 "add_overlap_pf_zero":
 "theorem add_overlap_pf_zero {ps qs} (p : α) : ps + qs = 0 → p * ps + p * qs = 0 := fun pq_pf =>\n  calc\n    p * ps + p * qs = p * (ps + qs) := symm (mul_add _ _ _)\n    _ = p * 0 := by rw [pq_pf]\n    _ = 0 := mul_zero _\n    \n#align add_overlap_pf_zero add_overlap_pf_zero\n\n",
 "add_overlap_pf":
 "-- Special case to speed up multiplication with 1.\ntheorem add_overlap_pf {ps qs pq} (p : α) : ps + qs = pq → p * ps + p * qs = p * pq := fun pq_pf =>\n  calc\n    p * ps + p * qs = p * (ps + qs) := symm (mul_add _ _ _)\n    _ = p * pq := by rw [pq_pf]\n    \n#align add_overlap_pf add_overlap_pf\n\n"}