{"symm":
 "#print symm /-\n@[symm]\ntheorem symm (h : commute f g) : commute g f := fun x => (h x).symm\n#align symm symm\n-/\n\n",
 "refl":
 "#print refl /-\n@[refl]\ntheorem refl (f : α → α) : commute f f := fun _ => eq.refl _\n#align refl refl\n-/\n\n",
 "option_map":
 "theorem option_map {f g : α → α} : commute f g → commute (option.map f) (option.map g) :=\n  semiconj.option_map\n#align option_map option_map\n\n",
 "is_idempotent_right":
 "theorem is_idempotent_right [is_idempotent α ga] (h : semiconj₂ f ga gb) (h_surj : surjective f) : is_idempotent β gb :=\n  ⟨h_surj.forall.2 fun x => by simp only [← h.eq, @is_idempotent.idempotent _ ga]⟩\n#align is_idempotent_right is_idempotent_right\n\n",
 "is_idempotent_left":
 "theorem is_idempotent_left [is_idempotent β gb] (h : semiconj₂ f ga gb) (h_inj : injective f) : is_idempotent α ga :=\n  ⟨fun x => h_inj <| by rw [h.eq, @is_idempotent.idempotent _ gb]⟩\n#align is_idempotent_left is_idempotent_left\n\n",
 "is_associative_right":
 "theorem is_associative_right [is_associative α ga] (h : semiconj₂ f ga gb) (h_surj : surjective f) :\n    is_associative β gb :=\n  ⟨h_surj.forall₃.2 fun x₁ x₂ x₃ => by simp only [← h.eq, @is_associative.assoc _ ga]⟩\n#align is_associative_right is_associative_right\n\n",
 "is_associative_left":
 "theorem is_associative_left [is_associative β gb] (h : semiconj₂ f ga gb) (h_inj : injective f) : is_associative α ga :=\n  ⟨fun x₁ x₂ x₃ => h_inj <| by simp only [h.eq, @is_associative.assoc _ gb]⟩\n#align is_associative_left is_associative_left\n\n",
 "inverses_right":
 "theorem inverses_right (h : semiconj f ga gb) (ha : right_inverse ga' ga) (hb : left_inverse gb' gb) :\n    semiconj f ga' gb' := fun x => by rw [← hb (f (ga' x)), ← h.eq, ha x]\n#align inverses_right inverses_right\n\n",
 "id_right":
 "theorem id_right : commute f id :=\n  semiconj.id_right\n#align id_right id_right\n\n",
 "id_left":
 "theorem id_left (op : α → α → α) : semiconj₂ id op op := fun _ _ => rfl\n#align id_left id_left\n\n",
 "eq":
 "protected theorem eq (h : semiconj₂ f ga gb) (x y : α) : f (ga x y) = gb (f x) (f y) :=\n  h x y\n#align eq eq\n\n",
 "comp_right":
 "theorem comp_right (h : commute f g) (h' : commute f g') : commute f (g ∘ g') :=\n  h.comp_right h'\n#align comp_right comp_right\n\n",
 "comp_left":
 "theorem comp_left (h : commute f g) (h' : commute f' g) : commute (f ∘ f') g :=\n  (h.symm.comp_right h'.symm).symm\n#align comp_left comp_left\n\n",
 "comp_eq":
 "protected theorem comp_eq (h : semiconj₂ f ga gb) : bicompr f ga = bicompl gb f f :=\n  funext fun x => funext <| h x\n#align comp_eq comp_eq\n\n",
 "comp":
 "theorem comp {f' : β → γ} {gc : γ → γ → γ} (hf' : semiconj₂ f' gb gc) (hf : semiconj₂ f ga gb) :\n    semiconj₂ (f' ∘ f) ga gc := fun x y => by simp only [hf'.eq, hf.eq, comp_app]\n#align comp comp\n\n",
 "commute":
 "theorem semiconj.commute {f g : α → α} (h : semiconj f g g) : commute f g :=\n  h\n#align semiconj.commute semiconj.commute\n\n"}