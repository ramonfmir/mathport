{"ite_ite_distrib_right":
 "#print ite_ite_distrib_right /-\ntheorem ite_ite_distrib_right : ite p (ite q a b) c = ite q (ite p a c) (ite p b c) :=\n  dite_dite_distrib_right\n#align ite_ite_distrib_right ite_ite_distrib_right\n-/\n\n",
 "ite_ite_distrib_left":
 "#print ite_ite_distrib_left /-\ntheorem ite_ite_distrib_left : ite p a (ite q b c) = ite q (ite p a b) (ite p a c) :=\n  dite_dite_distrib_left\n#align ite_ite_distrib_left ite_ite_distrib_left\n-/\n\n",
 "ite_dite_distrib_right":
 "#print ite_dite_distrib_right /-\ntheorem ite_dite_distrib_right {a : q → α} {b : ¬q → α} {c : α} :\n    ite p (dite q a b) c = dite q (fun hq => ite p (a hq) c) fun hq => ite p (b hq) c :=\n  dite_dite_distrib_right\n#align ite_dite_distrib_right ite_dite_distrib_right\n-/\n\n",
 "ite_dite_distrib_left":
 "#print ite_dite_distrib_left /-\ntheorem ite_dite_distrib_left {a : α} {b : q → α} {c : ¬q → α} :\n    ite p a (dite q b c) = dite q (fun hq => ite p a <| b hq) fun hq => ite p a <| c hq :=\n  dite_dite_distrib_left\n#align ite_dite_distrib_left ite_dite_distrib_left\n-/\n\n",
 "forall":
 "#print Prop.forall /-\ntheorem Prop.forall {f : Prop → Prop} : (∀ p, f p) ↔ f true ∧ f false :=\n  ⟨fun h => ⟨h _, h _⟩, by\n    rintro ⟨h₁, h₀⟩ p\n    by_cases hp : p <;> simp only [hp] <;> assumption⟩\n#align Prop.forall Prop.forall\n-/\n\n",
 "exists":
 "#print Prop.exists /-\ntheorem Prop.exists {f : Prop → Prop} : (∃ p, f p) ↔ f true ∨ f false :=\n  ⟨fun ⟨p, h⟩ => by refine' (em p).imp _ _ <;> intro H <;> convert h <;> simp [H], by rintro (h | h) <;> exact ⟨_, h⟩⟩\n#align Prop.exists Prop.exists\n-/\n\n",
 "dite_ite_distrib_right":
 "#print dite_ite_distrib_right /-\ntheorem dite_ite_distrib_right {a : p → α} {b : p → α} {c : ¬p → α} :\n    dite p (fun hp => ite q (a hp) (b hp)) c = ite q (dite p a c) (dite p b c) :=\n  dite_dite_distrib_right\n#align dite_ite_distrib_right dite_ite_distrib_right\n-/\n\n",
 "dite_ite_distrib_left":
 "#print dite_ite_distrib_left /-\ntheorem dite_ite_distrib_left {a : p → α} {b : ¬p → α} {c : ¬p → α} :\n    (dite p a fun hp => ite q (b hp) (c hp)) = ite q (dite p a b) (dite p a c) :=\n  dite_dite_distrib_left\n#align dite_ite_distrib_left dite_ite_distrib_left\n-/\n\n",
 "dite_dite_distrib_right":
 "#print dite_dite_distrib_right /-\ntheorem dite_dite_distrib_right {a : p → q → α} {b : p → ¬q → α} {c : ¬p → α} :\n    dite p (fun hp => dite q (a hp) (b hp)) c =\n      dite q (fun hq => dite p (fun hp => a hp hq) c) fun hq => dite p (fun hp => b hp hq) c :=\n  by split_ifs <;> rfl\n#align dite_dite_distrib_right dite_dite_distrib_right\n-/\n\n",
 "dite_dite_distrib_left":
 "#print dite_dite_distrib_left /-\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem dite_dite_distrib_left {a : p → α} {b : ¬p → q → α} {c : ¬p → ¬q → α} :\n    (dite p a fun hp => dite q (b hp) (c hp)) =\n      dite q (fun hq => dite p a fun hp => b hp hq) fun hq => dite p a fun hp => c hp hq :=\n  by split_ifs <;> rfl\n#align dite_dite_distrib_left dite_dite_distrib_left\n-/\n\n"}