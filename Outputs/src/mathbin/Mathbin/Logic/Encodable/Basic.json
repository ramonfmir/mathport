{"up_eq_up":
 "@[simp]\ntheorem up_eq_up {a b : Ulower α} : a.up = b.up ↔ a = b :=\n  Equiv.apply_eq_iff_eq _\n#align up_eq_up up_eq_up\n\n",
 "up_down":
 "@[simp]\ntheorem up_down {a : α} : (down a).up = a :=\n  equiv.left_inv _ _\n#align up_down up_down\n\n",
 "surjective_decode_iget":
 "-- The priority of the instance below is less than the priorities of `subtype.countable`\n-- and `quotient.countable`\ntheorem surjective_decode_iget (α : Type _) [Encodable α] [Inhabited α] :\n    surjective fun n => (encodable.decode α n).iget := fun x => ⟨encodable.encode x, by simp_rw [encodable.encodek]⟩\n#align surjective_decode_iget surjective_decode_iget\n\n",
 "skolem":
 "/-- A constructive version of `classical.skolem` for `encodable` types. -/\ntheorem skolem {α : Type _} {β : α → Type _} {P : ∀ x, β x → Prop} [c : ∀ a, Encodable (β a)]\n    [d : ∀ x y, Decidable (P x y)] : (∀ x, ∃ y, P x y) ↔ ∃ f : ∀ a, β a, ∀ x, P x (f x) :=\n  ⟨axiom_of_choice, fun ⟨f, H⟩ x => ⟨_, H x⟩⟩\n#align skolem skolem\n\n",
 "sequence_mono_nat":
 "/-\nThere is a total ordering on the elements of an encodable type, induced by the map to ℕ.\n-/\ntheorem sequence_mono_nat {r : β → β → Prop} {f : α → β} (hf : Directed r f) (n : ℕ) :\n    r (f (hf.sequence f n)) (f (hf.sequence f (n + 1))) :=\n  by\n  dsimp [Directed.sequence]\n  generalize eq : hf.sequence f n = p\n  cases' h : decode α n with a\n  · exact (Classical.choose_spec (hf p p)).1\n  · exact (Classical.choose_spec (hf p a)).1\n#align sequence_mono_nat sequence_mono_nat\n\n",
 "sequence_mono":
 "theorem sequence_mono : Monotone (f ∘ hf.sequence f) :=\n  monotone_nat_of_le_succ <| hf.sequence_mono_nat\n#align sequence_mono sequence_mono\n\n",
 "rep_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n#print Quotient.rep_spec /-\ntheorem Quotient.rep_spec (q : quotient s) : «expr⟦ ⟧» q.rep = q :=\n  choose_spec (exists_rep q)\n#align quotient.rep_spec Quotient.rep_spec\n-/\n\n",
 "rel_sequence":
 "theorem rel_sequence {r : β → β → Prop} {f : α → β} (hf : Directed r f) (a : α) :\n    r (f a) (f (hf.sequence f (encode a + 1))) :=\n  by\n  simp only [Directed.sequence, encodek]\n  exact (Classical.choose_spec (hf _ a)).2\n#align rel_sequence rel_sequence\n\n",
 "nonempty_encodable":
 "#print nonempty_encodable /-\n/-- See also `nonempty_fintype`, `nonempty_denumerable`. -/\ntheorem nonempty_encodable (α : Type _) [Countable α] : Nonempty (Encodable α) :=\n  ⟨Encodable.ofCountable _⟩\n#align nonempty_encodable nonempty_encodable\n-/\n\n",
 "mem_decode₂'":
 "theorem mem_decode₂' [Encodable α] {n : ℕ} {a : α} : a ∈ decode₂ α n ↔ a ∈ decode α n ∧ encode a = n := by\n  simp [decode₂] <;> exact ⟨fun ⟨_, h₁, rfl, h₂⟩ => ⟨h₁, h₂⟩, fun ⟨h₁, h₂⟩ => ⟨_, h₁, rfl, h₂⟩⟩\n#align mem_decode₂' mem_decode₂'\n\n",
 "mem_decode₂":
 "theorem mem_decode₂ [Encodable α] {n : ℕ} {a : α} : a ∈ decode₂ α n ↔ encode a = n :=\n  mem_decode₂'.trans (and_iff_right_of_imp fun e => e ▸ encodek _)\n#align mem_decode₂ mem_decode₂\n\n",
 "le_sequence":
 "theorem le_sequence (a : α) : f a ≤ f (hf.sequence f (encode a + 1)) :=\n  hf.rel_sequence a\n#align le_sequence le_sequence\n\n",
 "ext":
 "@[ext]\nprotected theorem ext {a b : Ulower α} : a.up = b.up → a = b :=\n  up_eq_up.1\n#align ext ext\n\n",
 "encodek₂":
 "theorem encodek₂ [Encodable α] (a : α) : decode₂ α (encode a) = some a :=\n  mem_decode₂.2 rfl\n#align encodek₂ encodek₂\n\n",
 "encode_tt":
 "@[simp]\ntheorem encode_tt : encode true = 1 :=\n  rfl\n#align encode_tt encode_tt\n\n",
 "encode_star":
 "@[simp]\ntheorem encode_star : encode PUnit.unit = 0 :=\n  rfl\n#align encode_star encode_star\n\n",
 "encode_some":
 "@[simp]\ntheorem encode_some [Encodable α] (a : α) : encode (some a) = succ (encode a) :=\n  rfl\n#align encode_some encode_some\n\n",
 "encode_sigma_val":
 "@[simp]\ntheorem encode_sigma_val (a b) : @encode (Sigma γ) _ ⟨a, b⟩ = pair (encode a) (encode b) :=\n  rfl\n#align encode_sigma_val encode_sigma_val\n\n",
 "encode_prod_val":
 "@[simp]\ntheorem encode_prod_val (a b) : @encode (α × β) _ (a, b) = pair (encode a) (encode b) :=\n  rfl\n#align encode_prod_val encode_prod_val\n\n",
 "encode_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem encode_of_equiv {α β} [Encodable α] (e : «expr ≃ » β α) (b : β) : @encode _ (ofEquiv _ e) b = encode (e b) :=\n  rfl\n#align encode_of_equiv encode_of_equiv\n\n",
 "encode_none":
 "@[simp]\ntheorem encode_none [Encodable α] : encode (@none α) = 0 :=\n  rfl\n#align encode_none encode_none\n\n",
 "encode_nat":
 "@[simp]\ntheorem encode_nat (n : ℕ) : encode n = n :=\n  rfl\n#align encode_nat encode_nat\n\n",
 "encode_inr":
 "@[simp]\ntheorem encode_inr (b : β) : @encode (Sum α β) _ (Sum.inr b) = bit1 (encode b) :=\n  rfl\n#align encode_inr encode_inr\n\n",
 "encode_inl":
 "@[simp]\ntheorem encode_inl (a : α) : @encode (Sum α β) _ (Sum.inl a) = bit0 (encode a) :=\n  rfl\n#align encode_inl encode_inl\n\n",
 "encode_injective":
 "/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Mario Carneiro\n-/\ntheorem encode_injective [Encodable α] : function.injective (@encode α _)\n  | x, y, e => option.some.inj <| by rw [← encodek, e, encodek]\n#align encode_injective encode_injective\n\n",
 "encode_inj":
 "@[simp]\ntheorem encode_inj [Encodable α] {a b : α} : encode a = encode b ↔ a = b :=\n  encode_injective.eq_iff\n#align encode_inj encode_inj\n\n",
 "encode_ff":
 "@[simp]\ntheorem encode_ff : encode false = 0 :=\n  rfl\n#align encode_ff encode_ff\n\n",
 "encode_eq":
 "theorem subtype.encode_eq (a : Subtype P) : encode a = encode a.val := by cases a <;> rfl\n#align subtype.encode_eq subtype.encode_eq\n\n",
 "down_up":
 "-- short-circuit instance search\n@[simp]\ntheorem down_up {a : Ulower α} : down a.up = a :=\n  equiv.right_inv _ _\n#align down_up down_up\n\n",
 "down_eq_down":
 "@[simp]\ntheorem down_eq_down {a b : α} : down a = down b ↔ a = b :=\n  Equiv.apply_eq_iff_eq _\n#align down_eq_down down_eq_down\n\n",
 "decode₂_ne_none_iff":
 "theorem decode₂_ne_none_iff [Encodable α] {n : ℕ} : decode₂ α n ≠ none ↔ n ∈ Set.range (encode : α → ℕ) := by\n  simp_rw [Set.range, Set.mem_setOf_eq, ne.def, Option.eq_none_iff_forall_not_mem, Encodable.mem_decode₂, not_forall,\n    Classical.not_not]\n#align decode₂_ne_none_iff decode₂_ne_none_iff\n\n",
 "decode₂_is_partial_inv":
 "theorem decode₂_is_partial_inv [Encodable α] : IsPartialInv encode (decode₂ α) := fun a n => mem_decode₂\n#align decode₂_is_partial_inv decode₂_is_partial_inv\n\n",
 "decode₂_inj":
 "theorem decode₂_inj [Encodable α] {n : ℕ} {a₁ a₂ : α} (h₁ : a₁ ∈ decode₂ α n) (h₂ : a₂ ∈ decode₂ α n) : a₁ = a₂ :=\n  encode_injective <| (mem_decode₂.1 h₁).trans (mem_decode₂.1 h₂).symm\n#align decode₂_inj decode₂_inj\n\n",
 "decode₂_eq_some":
 "theorem decode₂_eq_some [Encodable α] {n : ℕ} {a : α} : decode₂ α n = some a ↔ encode a = n :=\n  mem_decode₂\n#align decode₂_eq_some decode₂_eq_some\n\n",
 "decode₂_encode":
 "@[simp]\ntheorem decode₂_encode [Encodable α] (a : α) : decode₂ α (encode a) = some a :=\n  by\n  ext\n  simp [mem_decode₂, eq_comm]\n#align decode₂_encode decode₂_encode\n\n",
 "decode_zero":
 "@[simp]\ntheorem decode_zero : decode Bool 0 = some false :=\n  rfl\n#align decode_zero decode_zero\n\n",
 "decode_unit_zero":
 "@[simp]\ntheorem decode_unit_zero : decode PUnit 0 = some PUnit.unit :=\n  rfl\n#align decode_unit_zero decode_unit_zero\n\n",
 "decode_unit_succ":
 "@[simp]\ntheorem decode_unit_succ (n) : decode PUnit (succ n) = none :=\n  rfl\n#align decode_unit_succ decode_unit_succ\n\n",
 "decode_sum_val":
 "@[simp]\ntheorem decode_sum_val (n : ℕ) : decode (Sum α β) n = decodeSum n :=\n  rfl\n#align decode_sum_val decode_sum_val\n\n",
 "decode_sigma_val":
 "@[simp]\ntheorem decode_sigma_val (n : ℕ) :\n    decode (Sigma γ) n = (decode α n.unpair.1).bind fun a => (decode (γ a) n.unpair.2).map <| sigma.mk a :=\n  show decode_sigma._match_1 _ = _ by cases n.unpair <;> rfl\n#align decode_sigma_val decode_sigma_val\n\n",
 "decode_prod_val":
 "@[simp]\ntheorem decode_prod_val (n : ℕ) :\n    decode (α × β) n = (decode α n.unpair.1).bind fun a => (decode β n.unpair.2).map <| prod.mk a :=\n  show (decode (Sigma fun _ => β) n).map (Equiv.sigmaEquivProd α β) = _ by\n    simp <;> cases decode α n.unpair.1 <;> simp <;> cases decode β n.unpair.2 <;> rfl\n#align decode_prod_val decode_prod_val\n\n",
 "decode_option_zero":
 "@[simp]\ntheorem decode_option_zero [Encodable α] : decode (Option α) 0 = some none :=\n  rfl\n#align decode_option_zero decode_option_zero\n\n",
 "decode_option_succ":
 "@[simp]\ntheorem decode_option_succ [Encodable α] (n) : decode (Option α) (succ n) = (decode α n).map some :=\n  rfl\n#align decode_option_succ decode_option_succ\n\n",
 "decode_one":
 "@[simp]\ntheorem decode_one : decode Bool 1 = some true :=\n  rfl\n#align decode_one decode_one\n\n",
 "decode_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem decode_of_equiv {α β} [Encodable α] (e : «expr ≃ » β α) (n : ℕ) :\n    @decode _ (ofEquiv _ e) n = (decode α n).map e.symm :=\n  rfl\n#align decode_of_equiv decode_of_equiv\n\n",
 "decode_nat":
 "@[simp]\ntheorem decode_nat (n : ℕ) : decode ℕ n = some n :=\n  rfl\n#align decode_nat decode_nat\n\n",
 "decode_ge_two":
 "theorem decode_ge_two (n) (h : 2 ≤ n) : decode Bool n = none :=\n  by\n  suffices decode_sum n = none by\n    change (decode_sum n).map _ = none\n    rw [this]\n    rfl\n  have : 1 ≤ div2 n := by\n    rw [div2_val, nat.le_div_iff_mul_le]\n    exacts[h, by decide]\n  cases' exists_eq_succ_of_ne_zero (ne_of_gt this) with m e\n  simp [decode_sum] <;> cases bodd n <;> simp [decode_sum] <;> rw [e] <;> rfl\n#align decode_ge_two decode_ge_two\n\n",
 "choose_spec":
 "/-\nChoice function for encodable types and decidable predicates.\nWe provide the following API\n\nchoose      {α : Type*} {p : α → Prop} [c : encodable α] [d : decidable_pred p] : (∃ x, p x) → α :=\nchoose_spec {α : Type*} {p : α → Prop} [c : encodable α] [d : decidable_pred p] (ex : ∃ x, p x) :\n  p (choose ex) :=\n-/\ntheorem choose_spec (h : ∃ x, p x) : p (choose h) :=\n  (chooseX h).2\n#align choose_spec choose_spec\n\n",
 "axiom_of_choice":
 "/-- A constructive version of `classical.axiom_of_choice` for `encodable` types. -/\ntheorem axiom_of_choice {α : Type _} {β : α → Type _} {R : ∀ x, β x → Prop} [∀ a, Encodable (β a)]\n    [∀ x y, Decidable (R x y)] (H : ∀ x, ∃ y, R x y) : ∃ f : ∀ a, β a, ∀ x, R x (f x) :=\n  ⟨fun x => choose (H x), fun x => choose_spec (H x)⟩\n#align axiom_of_choice axiom_of_choice\n\n"}