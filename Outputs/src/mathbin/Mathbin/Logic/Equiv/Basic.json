{"update_comp_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem update_comp_equiv {α β α' : Sort _} [DecidableEq α'] [DecidableEq α] (f : α → β) (g : «expr ≃ » α' α) (a : α)\n    (v : β) : update f a v ∘ g = update (f ∘ g) (g.symm a) v := by\n  rw [← update_comp_eq_of_injective _ g.injective, g.apply_symm_apply]\n#align update_comp_equiv update_comp_equiv\n\n",
 "update_apply_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem update_apply_equiv_apply {α β α' : Sort _} [DecidableEq α'] [DecidableEq α] (f : α → β) (g : «expr ≃ » α' α)\n    (a : α) (v : β) (a' : α') : update f a v (g a') = update (f ∘ g) (g.symm a) v a' :=\n  congr_fun (update_comp_equiv f g a v) a'\n#align update_apply_equiv_apply update_apply_equiv_apply\n\n",
 "unique_prod_symm_apply":
 "@[simp]\ntheorem unique_prod_symm_apply {α β : Type _} [Unique β] (x : α) : (uniqueProd α β).symm x = (default, x) :=\n  rfl\n#align unique_prod_symm_apply unique_prod_symm_apply\n\n",
 "unique_prod_apply":
 "theorem unique_prod_apply {α β : Type _} [Unique β] (x : β × α) : uniqueProd α β x = x.2 :=\n  rfl\n#align unique_prod_apply unique_prod_apply\n\n",
 "trans_swap_trans_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem trans_swap_trans_symm [DecidableEq β] (a b : β) (e : «expr ≃ » α β) :\n    (e.trans (swap a b)).trans e.symm = swap (e.symm a) (e.symm b) :=\n  symm_trans_swap_trans a b e.symm\n#align trans_swap_trans_symm trans_swap_trans_symm\n\n",
 "trans":
 "@[simp]\ntheorem perm.subtype_congr.trans :\n    (ep.subtype_congr en).trans (ep'.subtype_congr en') = Perm.subtypeCongr (ep.trans ep') (en.trans en') :=\n  by\n  ext x\n  by_cases h : p x\n  · have : p (ep ⟨x, h⟩) := Subtype.property _\n    simp [perm.subtype_congr.apply, h, this]\n  · have : ¬p (en ⟨x, h⟩) := Subtype.property (en _)\n    simp [perm.subtype_congr.apply, h, symm_apply_eq, this]\n#align perm.subtype_congr.trans perm.subtype_congr.trans\n\n",
 "to_perm_symm":
 "@[simp]\ntheorem to_perm_symm {f : α → α} (h : Involutive f) : (h.to_perm f).symm = h.to_perm f :=\n  rfl\n#align to_perm_symm to_perm_symm\n\n",
 "to_perm_involutive":
 "theorem to_perm_involutive {f : α → α} (h : Involutive f) : Involutive (h.to_perm f) :=\n  h\n#align to_perm_involutive to_perm_involutive\n\n",
 "symm_trans_swap_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem symm_trans_swap_trans [DecidableEq β] (a b : α) (e : «expr ≃ » α β) :\n    (e.symm.trans (swap a b)).trans e = swap (e a) (e b) :=\n  Equiv.ext fun x =>\n    by\n    have : ∀ a, e.symm x = a ↔ x = e a := fun a =>\n      by\n      rw [@eq_comm _ (e.symm x)]\n      constructor <;> intros <;> simp_all\n    simp [swap_apply_def, this]\n    split_ifs <;> simp\n#align symm_trans_swap_trans symm_trans_swap_trans\n\n",
 "symm_swap":
 "@[simp]\ntheorem symm_swap (a b : α) : (swap a b).symm = swap a b :=\n  rfl\n#align symm_swap symm_swap\n\n",
 "symm":
 "@[simp]\ntheorem perm.subtype_congr.symm : (ep.subtype_congr en).symm = Perm.subtypeCongr ep.symm en.symm :=\n  by\n  ext x\n  by_cases h : p x\n  · have : p (ep.symm ⟨x, h⟩) := Subtype.property _\n    simp [perm.subtype_congr.apply, h, symm_apply_eq, this]\n  · have : ¬p (en.symm ⟨x, h⟩) := Subtype.property (en.symm _)\n    simp [perm.subtype_congr.apply, h, symm_apply_eq, this]\n#align perm.subtype_congr.symm perm.subtype_congr.symm\n\n",
 "swap_swap":
 "@[simp]\ntheorem swap_swap (a b : α) : (swap a b).trans (swap a b) = Equiv.refl _ :=\n  ext fun x => swapCore_swapCore _ _ _\n#align swap_swap swap_swap\n\n",
 "swap_self":
 "@[simp]\ntheorem swap_self (a : α) : swap a a = Equiv.refl _ :=\n  ext fun r => swapCore_self r a\n#align swap_self swap_self\n\n",
 "swap_eq_update":
 "theorem swap_eq_update (i j : α) : (Equiv.swap i j : α → α) = update (update id j i) i j :=\n  funext fun x => by rw [update_apply _ i j, update_apply _ j i, Equiv.swap_apply_def, id.def]\n#align swap_eq_update swap_eq_update\n\n",
 "swap_eq_refl_iff":
 "@[simp]\ntheorem swap_eq_refl_iff {x y : α} : swap x y = Equiv.refl _ ↔ x = y :=\n  by\n  refine' ⟨fun h => (Equiv.refl _).injective _, fun h => h ▸ swap_self _⟩\n  rw [← h, swap_apply_left, h, refl_apply]\n#align swap_eq_refl_iff swap_eq_refl_iff\n\n",
 "swap_core_swap_core":
 "theorem swap_core_swap_core (r a b : α) : swapCore a b (swapCore a b r) = r :=\n  by\n  unfold swap_core\n  split_ifs <;> cc\n#align swap_core_swap_core swap_core_swap_core\n\n",
 "swap_core_self":
 "theorem swap_core_self (r a : α) : swapCore a a r = r :=\n  by\n  unfold swap_core\n  split_ifs <;> cc\n#align swap_core_self swap_core_self\n\n",
 "swap_core_comm":
 "theorem swap_core_comm (r a b : α) : swapCore a b r = swapCore b a r :=\n  by\n  unfold swap_core\n  split_ifs <;> cc\n#align swap_core_comm swap_core_comm\n\n",
 "swap_comp_apply":
 "theorem swap_comp_apply {a b x : α} (π : Perm α) :\n    π.trans (swap a b) x = if π x = a then b else if π x = b then a else π x :=\n  by\n  cases π\n  rfl\n#align swap_comp_apply swap_comp_apply\n\n",
 "swap_comp":
 "#print Function.Injective.swap_comp /-\ntheorem Function.Injective.swap_comp [DecidableEq α] [DecidableEq β] {f : α → β} (hf : function.injective f) (x y : α) :\n    Equiv.swap (f x) (f y) ∘ f = f ∘ Equiv.swap x y :=\n  funext fun z => hf.swap_apply _ _ _\n#align function.injective.swap_comp Function.Injective.swap_comp\n-/\n\n",
 "swap_comm":
 "theorem swap_comm (a b : α) : swap a b = swap b a :=\n  ext fun r => swapCore_comm r _ _\n#align swap_comm swap_comm\n\n",
 "swap_apply_self":
 "@[simp]\ntheorem swap_apply_self (i j a : α) : swap i j (swap i j a) = a := by\n  rw [← Equiv.trans_apply, Equiv.swap_swap, Equiv.refl_apply]\n#align swap_apply_self swap_apply_self\n\n",
 "swap_apply_right":
 "@[simp]\ntheorem swap_apply_right (a b : α) : swap a b b = a := by by_cases h : b = a <;> simp [swap_apply_def, h]\n#align swap_apply_right swap_apply_right\n\n",
 "swap_apply_of_ne_of_ne":
 "theorem swap_apply_of_ne_of_ne {a b x : α} : x ≠ a → x ≠ b → swap a b x = x := by\n  simp (config := { contextual := true }) [swap_apply_def]\n#align swap_apply_of_ne_of_ne swap_apply_of_ne_of_ne\n\n",
 "swap_apply_ne_self_iff":
 "theorem swap_apply_ne_self_iff {a b x : α} : swap a b x ≠ x ↔ a ≠ b ∧ (x = a ∨ x = b) :=\n  by\n  by_cases hab : a = b\n  · simp [hab]\n  by_cases hax : x = a\n  · simp [hax, eq_comm]\n  by_cases hbx : x = b\n  · simp [hbx]\n  simp [hab, hax, hbx, swap_apply_of_ne_of_ne]\n#align swap_apply_ne_self_iff swap_apply_ne_self_iff\n\n",
 "swap_apply_left":
 "@[simp]\ntheorem swap_apply_left (a b : α) : swap a b a = b :=\n  if_pos rfl\n#align swap_apply_left swap_apply_left\n\n",
 "swap_apply_eq_iff":
 "theorem swap_apply_eq_iff {x y z w : α} : swap x y z = w ↔ z = swap x y w := by\n  rw [apply_eq_iff_eq_symm_apply, symm_swap]\n#align swap_apply_eq_iff swap_apply_eq_iff\n\n",
 "swap_apply_def":
 "theorem swap_apply_def (a b x : α) : swap a b x = if x = a then b else if x = b then a else x :=\n  rfl\n#align swap_apply_def swap_apply_def\n\n",
 "swap_apply":
 "#print Function.Injective.swap_apply /-\ntheorem Function.Injective.swap_apply [DecidableEq α] [DecidableEq β] {f : α → β} (hf : function.injective f)\n    (x y z : α) : Equiv.swap (f x) (f y) (f z) = f (Equiv.swap x y z) :=\n  by\n  by_cases hx : z = x; · simp [hx]\n  by_cases hy : z = y; · simp [hy]\n  rw [Equiv.swap_apply_of_ne_of_ne hx hy, Equiv.swap_apply_of_ne_of_ne (hf.ne hx) (hf.ne hy)]\n#align function.injective.swap_apply Function.Injective.swap_apply\n-/\n\n",
 "sum_prod_distrib_symm_apply_right":
 "@[simp]\ntheorem sum_prod_distrib_symm_apply_right {α β γ} (b : β × γ) : (sumProdDistrib α β γ).symm (inr b) = (inr b.1, b.2) :=\n  rfl\n#align sum_prod_distrib_symm_apply_right sum_prod_distrib_symm_apply_right\n\n",
 "sum_prod_distrib_symm_apply_left":
 "@[simp]\ntheorem sum_prod_distrib_symm_apply_left {α β γ} (a : α × γ) : (sumProdDistrib α β γ).symm (inl a) = (inl a.1, a.2) :=\n  rfl\n#align sum_prod_distrib_symm_apply_left sum_prod_distrib_symm_apply_left\n\n",
 "sum_prod_distrib_apply_right":
 "@[simp]\ntheorem sum_prod_distrib_apply_right {α β γ} (b : β) (c : γ) : sumProdDistrib α β γ (Sum.inr b, c) = Sum.inr (b, c) :=\n  rfl\n#align sum_prod_distrib_apply_right sum_prod_distrib_apply_right\n\n",
 "sum_prod_distrib_apply_left":
 "@[simp]\ntheorem sum_prod_distrib_apply_left {α β γ} (a : α) (c : γ) : sumProdDistrib α β γ (Sum.inl a, c) = Sum.inl (a, c) :=\n  rfl\n#align sum_prod_distrib_apply_left sum_prod_distrib_apply_left\n\n",
 "sum_empty_apply_inl":
 "@[simp]\ntheorem sum_empty_apply_inl {α β : Type _} [IsEmpty β] (a : α) : sumEmpty α β (Sum.inl a) = a :=\n  rfl\n#align sum_empty_apply_inl sum_empty_apply_inl\n\n",
 "sum_congr_trans":
 "@[simp]\ntheorem sum_congr_trans {α β : Sort _} (e : Equiv.Perm α) (f : Equiv.Perm β) (g : Equiv.Perm α) (h : Equiv.Perm β) :\n    (sumCongr e f).trans (sumCongr g h) = sumCongr (e.trans g) (f.trans h) :=\n  Equiv.sumCongr_trans e f g h\n#align sum_congr_trans sum_congr_trans\n\n",
 "sum_congr_symm":
 "@[simp]\ntheorem sum_congr_symm {α β : Sort _} (e : Equiv.Perm α) (f : Equiv.Perm β) :\n    (sumCongr e f).symm = sumCongr e.symm f.symm :=\n  Equiv.sumCongr_symm e f\n#align sum_congr_symm sum_congr_symm\n\n",
 "sum_congr_swap_refl":
 "@[simp]\ntheorem sum_congr_swap_refl {α β : Sort _} [DecidableEq α] [DecidableEq β] (i j : α) :\n    Equiv.Perm.sumCongr (Equiv.swap i j) (Equiv.refl β) = Equiv.swap (Sum.inl i) (Sum.inl j) :=\n  by\n  ext x\n  cases x\n  · simp [Sum.map, swap_apply_def]\n    split_ifs <;> rfl\n  · simp [Sum.map, swap_apply_of_ne_of_ne]\n#align sum_congr_swap_refl sum_congr_swap_refl\n\n",
 "sum_congr_refl_swap":
 "@[simp]\ntheorem sum_congr_refl_swap {α β : Sort _} [DecidableEq α] [DecidableEq β] (i j : β) :\n    Equiv.Perm.sumCongr (Equiv.refl α) (Equiv.swap i j) = Equiv.swap (Sum.inr i) (Sum.inr j) :=\n  by\n  ext x\n  cases x\n  · simp [Sum.map, swap_apply_of_ne_of_ne]\n  · simp [Sum.map, swap_apply_def]\n    split_ifs <;> rfl\n#align sum_congr_refl_swap sum_congr_refl_swap\n\n",
 "sum_congr_refl":
 "@[simp]\ntheorem sum_congr_refl {α β : Sort _} : sumCongr (Equiv.refl α) (Equiv.refl β) = Equiv.refl (Sum α β) :=\n  Equiv.sumCongr_refl\n#align sum_congr_refl sum_congr_refl\n\n",
 "sum_congr_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem sum_congr_apply {α β : Type _} (ea : Equiv.Perm α) (eb : Equiv.Perm β) (x : Sum α β) :\n    sumCongr ea eb x = Sum.map («expr⇑ » ea) («expr⇑ » eb) x :=\n  Equiv.sumCongr_apply ea eb x\n#align sum_congr_apply sum_congr_apply\n\n",
 "sum_compl_apply_symm_of_pos":
 "@[simp]\ntheorem sum_compl_apply_symm_of_pos {α : Type _} (p : α → Prop) [DecidablePred p] (a : α) (h : p a) :\n    (sumCompl p).symm a = Sum.inl ⟨a, h⟩ :=\n  dif_pos h\n#align sum_compl_apply_symm_of_pos sum_compl_apply_symm_of_pos\n\n",
 "sum_compl_apply_symm_of_neg":
 "@[simp]\ntheorem sum_compl_apply_symm_of_neg {α : Type _} (p : α → Prop) [DecidablePred p] (a : α) (h : ¬p a) :\n    (sumCompl p).symm a = Sum.inr ⟨a, h⟩ :=\n  dif_neg h\n#align sum_compl_apply_symm_of_neg sum_compl_apply_symm_of_neg\n\n",
 "sum_compl_apply_inr":
 "@[simp]\ntheorem sum_compl_apply_inr {α : Type _} (p : α → Prop) [DecidablePred p] (x : { a // ¬p a }) :\n    sumCompl p (Sum.inr x) = x :=\n  rfl\n#align sum_compl_apply_inr sum_compl_apply_inr\n\n",
 "sum_compl_apply_inl":
 "-- See also `equiv.sigma_preimage_equiv`.\n@[simp]\ntheorem sum_compl_apply_inl {α : Type _} (p : α → Prop) [DecidablePred p] (x : { a // p a }) :\n    sumCompl p (Sum.inl x) = x :=\n  rfl\n#align sum_compl_apply_inl sum_compl_apply_inl\n\n",
 "sum_comm_symm":
 "@[simp]\ntheorem sum_comm_symm (α β) : (sumComm α β).symm = sumComm β α :=\n  rfl\n#align sum_comm_symm sum_comm_symm\n\n",
 "sum_assoc_symm_apply_inr_inr":
 "@[simp]\ntheorem sum_assoc_symm_apply_inr_inr {α β γ} (c) : (sumAssoc α β γ).symm (inr (inr c)) = inr c :=\n  rfl\n#align sum_assoc_symm_apply_inr_inr sum_assoc_symm_apply_inr_inr\n\n",
 "sum_assoc_symm_apply_inr_inl":
 "@[simp]\ntheorem sum_assoc_symm_apply_inr_inl {α β γ} (b) : (sumAssoc α β γ).symm (inr (inl b)) = inl (inr b) :=\n  rfl\n#align sum_assoc_symm_apply_inr_inl sum_assoc_symm_apply_inr_inl\n\n",
 "sum_assoc_symm_apply_inl":
 "@[simp]\ntheorem sum_assoc_symm_apply_inl {α β γ} (a) : (sumAssoc α β γ).symm (inl a) = inl (inl a) :=\n  rfl\n#align sum_assoc_symm_apply_inl sum_assoc_symm_apply_inl\n\n",
 "sum_assoc_apply_inr":
 "@[simp]\ntheorem sum_assoc_apply_inr {α β γ} (c) : sumAssoc α β γ (inr c) = inr (inr c) :=\n  rfl\n#align sum_assoc_apply_inr sum_assoc_apply_inr\n\n",
 "sum_assoc_apply_inl_inr":
 "@[simp]\ntheorem sum_assoc_apply_inl_inr {α β γ} (b) : sumAssoc α β γ (inl (inr b)) = inr (inl b) :=\n  rfl\n#align sum_assoc_apply_inl_inr sum_assoc_apply_inl_inr\n\n",
 "sum_assoc_apply_inl_inl":
 "@[simp]\ntheorem sum_assoc_apply_inl_inl {α β γ} (a) : sumAssoc α β γ (inl (inl a)) = inl a :=\n  rfl\n#align sum_assoc_apply_inl_inl sum_assoc_apply_inl_inl\n\n",
 "sum_arrow_equiv_prod_arrow_symm_apply_inr":
 "@[simp]\ntheorem sum_arrow_equiv_prod_arrow_symm_apply_inr {α β γ} (f : α → γ) (g : β → γ) (b : β) :\n    ((sumArrowEquivProdArrow α β γ).symm (f, g)) (inr b) = g b :=\n  rfl\n#align sum_arrow_equiv_prod_arrow_symm_apply_inr sum_arrow_equiv_prod_arrow_symm_apply_inr\n\n",
 "sum_arrow_equiv_prod_arrow_symm_apply_inl":
 "@[simp]\ntheorem sum_arrow_equiv_prod_arrow_symm_apply_inl {α β γ} (f : α → γ) (g : β → γ) (a : α) :\n    ((sumArrowEquivProdArrow α β γ).symm (f, g)) (inl a) = f a :=\n  rfl\n#align sum_arrow_equiv_prod_arrow_symm_apply_inl sum_arrow_equiv_prod_arrow_symm_apply_inl\n\n",
 "sum_arrow_equiv_prod_arrow_apply_snd":
 "@[simp]\ntheorem sum_arrow_equiv_prod_arrow_apply_snd {α β γ} (f : Sum α β → γ) (b : β) :\n    (sumArrowEquivProdArrow α β γ f).2 b = f (inr b) :=\n  rfl\n#align sum_arrow_equiv_prod_arrow_apply_snd sum_arrow_equiv_prod_arrow_apply_snd\n\n",
 "sum_arrow_equiv_prod_arrow_apply_fst":
 "@[simp]\ntheorem sum_arrow_equiv_prod_arrow_apply_fst {α β γ} (f : Sum α β → γ) (a : α) :\n    (sumArrowEquivProdArrow α β γ f).1 a = f (inl a) :=\n  rfl\n#align sum_arrow_equiv_prod_arrow_apply_fst sum_arrow_equiv_prod_arrow_apply_fst\n\n",
 "subtype_quotient_equiv_quotient_subtype_symm_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem subtype_quotient_equiv_quotient_subtype_symm_mk (p₁ : α → Prop) [s₁ : setoid α] [s₂ : setoid (Subtype p₁)]\n    (p₂ : quotient s₁ → Prop) (hp₂ : ∀ a, p₁ a ↔ p₂ («expr⟦ ⟧» a))\n    (h : ∀ x y : Subtype p₁, @Setoid.r _ s₂ x y ↔ (x : α) ≈ y) (x) :\n    (subtypeQuotientEquivQuotientSubtype p₁ p₂ hp₂ h).symm («expr⟦ ⟧» x) = ⟨«expr⟦ ⟧» x, (hp₂ _).1 x.prop⟩ :=\n  rfl\n#align subtype_quotient_equiv_quotient_subtype_symm_mk subtype_quotient_equiv_quotient_subtype_symm_mk\n\n",
 "subtype_quotient_equiv_quotient_subtype_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n@[simp]\ntheorem subtype_quotient_equiv_quotient_subtype_mk (p₁ : α → Prop) [s₁ : setoid α] [s₂ : setoid (Subtype p₁)]\n    (p₂ : quotient s₁ → Prop) (hp₂ : ∀ a, p₁ a ↔ p₂ («expr⟦ ⟧» a))\n    (h : ∀ x y : Subtype p₁, @Setoid.r _ s₂ x y ↔ (x : α) ≈ y) (x hx) :\n    subtypeQuotientEquivQuotientSubtype p₁ p₂ hp₂ h ⟨«expr⟦ ⟧» x, hx⟩ = «expr⟦ ⟧» ⟨x, (hp₂ _).2 hx⟩ :=\n  rfl\n#align subtype_quotient_equiv_quotient_subtype_mk subtype_quotient_equiv_quotient_subtype_mk\n\n",
 "subtype_preimage_symm_apply_coe_pos":
 "theorem subtype_preimage_symm_apply_coe_pos (x : { a // ¬p a } → β) (a : α) (h : p a) :\n    ((subtypePreimage p x₀).symm x : α → β) a = x₀ ⟨a, h⟩ :=\n  dif_pos h\n#align subtype_preimage_symm_apply_coe_pos subtype_preimage_symm_apply_coe_pos\n\n",
 "subtype_preimage_symm_apply_coe_neg":
 "theorem subtype_preimage_symm_apply_coe_neg (x : { a // ¬p a } → β) (a : α) (h : ¬p a) :\n    ((subtypePreimage p x₀).symm x : α → β) a = x ⟨a, h⟩ :=\n  dif_neg h\n#align subtype_preimage_symm_apply_coe_neg subtype_preimage_symm_apply_coe_neg\n\n",
 "subtype_equiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem subtype_equiv_trans {p : α → Prop} {q : β → Prop} {r : γ → Prop} (e : «expr ≃ » α β) (f : «expr ≃ » β γ)\n    (h : ∀ a : α, p a ↔ q (e a)) (h' : ∀ b : β, q b ↔ r (f b)) :\n    (e.subtype_equiv h).trans (f.subtype_equiv h') = (e.trans f).subtype_equiv fun a => (h a).trans (h' <| e a) :=\n  rfl\n#align subtype_equiv_trans subtype_equiv_trans\n\n",
 "subtype_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem subtype_equiv_symm {p : α → Prop} {q : β → Prop} (e : «expr ≃ » α β) (h : ∀ a : α, p a ↔ q (e a)) :\n    (e.subtype_equiv h).symm =\n      e.symm.subtype_equiv fun a => by\n        convert(h <| e.symm a).symm\n        exact (e.apply_symm_apply a).symm :=\n  rfl\n#align subtype_equiv_symm subtype_equiv_symm\n\n",
 "subtype_equiv_refl":
 "@[simp]\ntheorem subtype_equiv_refl {p : α → Prop} (h : ∀ a, p a ↔ p (Equiv.refl _ a) := fun a => iff.rfl) :\n    (Equiv.refl α).subtype_equiv h = Equiv.refl { a : α // p a } :=\n  by\n  ext\n  rfl\n#align subtype_equiv_refl subtype_equiv_refl\n\n",
 "subtype_equiv_codomain_symm_apply_ne":
 "theorem subtype_equiv_codomain_symm_apply_ne (f : { x' // x' ≠ x } → Y) (y : Y) (x' : X) (h : x' ≠ x) :\n    ((subtypeEquivCodomain f).symm y : X → Y) x' = f ⟨x', h⟩ :=\n  dif_pos h\n#align subtype_equiv_codomain_symm_apply_ne subtype_equiv_codomain_symm_apply_ne\n\n",
 "subtype_equiv_codomain_symm_apply_eq":
 "@[simp]\ntheorem subtype_equiv_codomain_symm_apply_eq (f : { x' // x' ≠ x } → Y) (y : Y) :\n    ((subtypeEquivCodomain f).symm y : X → Y) x = y :=\n  dif_neg (Classical.not_not.mpr rfl)\n#align subtype_equiv_codomain_symm_apply_eq subtype_equiv_codomain_symm_apply_eq\n\n",
 "subtype_equiv_codomain_symm_apply":
 "@[simp]\ntheorem subtype_equiv_codomain_symm_apply (f : { x' // x' ≠ x } → Y) (y : Y) (x' : X) :\n    ((subtypeEquivCodomain f).symm y : X → Y) x' = if h : x' ≠ x then f ⟨x', h⟩ else y :=\n  rfl\n#align subtype_equiv_codomain_symm_apply subtype_equiv_codomain_symm_apply\n\n",
 "subtype_equiv_codomain_apply":
 "@[simp]\ntheorem subtype_equiv_codomain_apply (f : { x' // x' ≠ x } → Y) (g : { g : X → Y // g ∘ coe = f }) :\n    subtypeEquivCodomain f g = (g : X → Y) x :=\n  rfl\n#align subtype_equiv_codomain_apply subtype_equiv_codomain_apply\n\n",
 "subtype_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem subtype_equiv_apply {p : α → Prop} {q : β → Prop} (e : «expr ≃ » α β) (h : ∀ a : α, p a ↔ q (e a))\n    (x : { x // p x }) : e.subtype_equiv h x = ⟨e x, (h _).1 x.2⟩ :=\n  rfl\n#align subtype_equiv_apply subtype_equiv_apply\n\n",
 "sigma_equiv_prod_sigma_congr_right":
 "theorem sigma_equiv_prod_sigma_congr_right :\n    (sigmaEquivProd α₁ β₁).symm.trans (sigmaCongrRight e) = (prodCongrRight e).trans (sigmaEquivProd α₁ β₂).symm :=\n  by\n  ext ⟨a, b⟩ : 1\n  simp\n#align sigma_equiv_prod_sigma_congr_right sigma_equiv_prod_sigma_congr_right\n\n",
 "sigma_congr_right_sigma_equiv_prod":
 "theorem sigma_congr_right_sigma_equiv_prod :\n    (sigmaCongrRight e).trans (sigmaEquivProd α₁ β₂) = (sigmaEquivProd α₁ β₁).trans (prodCongrRight e) :=\n  by\n  ext ⟨a, b⟩ : 1\n  simp\n#align sigma_congr_right_sigma_equiv_prod sigma_congr_right_sigma_equiv_prod\n\n",
 "set_value_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem set_value_eq (f : «expr ≃ » α β) (a : α) (b : β) : setValue f a b a = b :=\n  by\n  dsimp [set_value]\n  simp [swap_apply_left]\n#align set_value_eq set_value_eq\n\n",
 "semiconj₂_conj":
 "theorem semiconj₂_conj : Semiconj₂ e f (e.arrow_congr e.conj f) := fun x y => by simp\n#align semiconj₂_conj semiconj₂_conj\n\n",
 "semiconj_conj":
 "theorem semiconj_conj (f : α₁ → α₁) : Semiconj e f (e.conj f) := fun x => by simp\n#align semiconj_conj semiconj_conj\n\n",
 "right_apply_subtype":
 "@[simp]\ntheorem perm.subtype_congr.right_apply_subtype (a : { a // ¬p a }) : ep.subtype_congr en a = en a :=\n  by\n  convert perm.subtype_congr.right_apply _ _ a.property\n  simp\n#align perm.subtype_congr.right_apply_subtype perm.subtype_congr.right_apply_subtype\n\n",
 "right_apply":
 "@[simp]\ntheorem perm.subtype_congr.right_apply {a : ε} (h : ¬p a) : ep.subtype_congr en a = en ⟨a, h⟩ := by\n  simp [perm.subtype_congr.apply, h]\n#align perm.subtype_congr.right_apply perm.subtype_congr.right_apply\n\n",
 "refl":
 "@[simp]\ntheorem perm.subtype_congr.refl :\n    Perm.subtypeCongr (Equiv.refl { a // p a }) (Equiv.refl { a // ¬p a }) = Equiv.refl ε :=\n  by\n  ext x\n  by_cases h : p x <;> simp [h]\n#align perm.subtype_congr.refl perm.subtype_congr.refl\n\n",
 "prod_unique_symm_apply":
 "@[simp]\ntheorem prod_unique_symm_apply {α β : Type _} [Unique β] (x : α) : (prodUnique α β).symm x = (x, default) :=\n  rfl\n#align prod_unique_symm_apply prod_unique_symm_apply\n\n",
 "prod_unique_apply":
 "theorem prod_unique_apply {α β : Type _} [Unique β] (x : α × β) : prodUnique α β x = x.1 :=\n  rfl\n#align prod_unique_apply prod_unique_apply\n\n",
 "prod_sum_distrib_symm_apply_right":
 "@[simp]\ntheorem prod_sum_distrib_symm_apply_right {α β γ} (a : α × γ) : (prodSumDistrib α β γ).symm (inr a) = (a.1, inr a.2) :=\n  rfl\n#align prod_sum_distrib_symm_apply_right prod_sum_distrib_symm_apply_right\n\n",
 "prod_sum_distrib_symm_apply_left":
 "@[simp]\ntheorem prod_sum_distrib_symm_apply_left {α β γ} (a : α × β) : (prodSumDistrib α β γ).symm (inl a) = (a.1, inl a.2) :=\n  rfl\n#align prod_sum_distrib_symm_apply_left prod_sum_distrib_symm_apply_left\n\n",
 "prod_sum_distrib_apply_right":
 "@[simp]\ntheorem prod_sum_distrib_apply_right {α β γ} (a : α) (c : γ) : prodSumDistrib α β γ (a, Sum.inr c) = Sum.inr (a, c) :=\n  rfl\n#align prod_sum_distrib_apply_right prod_sum_distrib_apply_right\n\n",
 "prod_sum_distrib_apply_left":
 "@[simp]\ntheorem prod_sum_distrib_apply_left {α β γ} (a : α) (b : β) : prodSumDistrib α β γ (a, Sum.inl b) = Sum.inl (a, b) :=\n  rfl\n#align prod_sum_distrib_apply_left prod_sum_distrib_apply_left\n\n",
 "prod_extend_right_apply_ne":
 "theorem prod_extend_right_apply_ne {a a' : α₁} (h : a' ≠ a) (b : β₁) : prodExtendRight a e (a', b) = (a', b) :=\n  if_neg h\n#align prod_extend_right_apply_ne prod_extend_right_apply_ne\n\n",
 "prod_extend_right_apply_eq":
 "@[simp]\ntheorem prod_extend_right_apply_eq (b : β₁) : prodExtendRight a e (a, b) = (a, e b) :=\n  if_pos rfl\n#align prod_extend_right_apply_eq prod_extend_right_apply_eq\n\n",
 "prod_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-\nCopyright (c) 2015 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura, Mario Carneiro\n-/\n@[simp]\ntheorem prod_congr_symm {α₁ β₁ α₂ β₂ : Type _} (e₁ : «expr ≃ » α₁ α₂) (e₂ : «expr ≃ » β₁ β₂) :\n    (prodCongr e₁ e₂).symm = prodCongr e₁.symm e₂.symm :=\n  rfl\n#align prod_congr_symm prod_congr_symm\n\n",
 "prod_congr_right_trans_prod_comm":
 "@[simp]\ntheorem prod_congr_right_trans_prod_comm :\n    (prodCongrRight e).trans (prodComm _ _) = (prodComm _ _).trans (prodCongrLeft e) :=\n  by\n  ext ⟨a, b⟩ : 1\n  simp\n#align prod_congr_right_trans_prod_comm prod_congr_right_trans_prod_comm\n\n",
 "prod_congr_right_apply":
 "@[simp]\ntheorem prod_congr_right_apply (a : α₁) (b : β₁) : prodCongrRight e (a, b) = (a, e a b) :=\n  rfl\n#align prod_congr_right_apply prod_congr_right_apply\n\n",
 "prod_congr_refl_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem prod_congr_refl_right (e : «expr ≃ » β₁ β₂) : prodCongr e (Equiv.refl α₁) = prodCongrLeft fun _ => e :=\n  by\n  ext ⟨a, b⟩ : 1\n  simp\n#align prod_congr_refl_right prod_congr_refl_right\n\n",
 "prod_congr_refl_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem prod_congr_refl_left (e : «expr ≃ » β₁ β₂) : prodCongr (Equiv.refl α₁) e = prodCongrRight fun _ => e :=\n  by\n  ext ⟨a, b⟩ : 1\n  simp\n#align prod_congr_refl_left prod_congr_refl_left\n\n",
 "prod_congr_left_trans_prod_comm":
 "@[simp]\ntheorem prod_congr_left_trans_prod_comm :\n    (prodCongrLeft e).trans (prodComm _ _) = (prodComm _ _).trans (prodCongrRight e) :=\n  by\n  ext ⟨a, b⟩ : 1\n  simp\n#align prod_congr_left_trans_prod_comm prod_congr_left_trans_prod_comm\n\n",
 "prod_congr_left_apply":
 "@[simp]\ntheorem prod_congr_left_apply (b : β₁) (a : α₁) : prodCongrLeft e (b, a) = (e a b, a) :=\n  rfl\n#align prod_congr_left_apply prod_congr_left_apply\n\n",
 "prod_comm_symm":
 "@[simp]\ntheorem prod_comm_symm (α β) : (prodComm α β).symm = prodComm β α :=\n  rfl\n#align prod_comm_symm prod_comm_symm\n\n",
 "prod_comm_apply":
 "@[simp]\ntheorem prod_comm_apply {α β : Type _} (x : α × β) : prodComm α β x = x.swap :=\n  rfl\n#align prod_comm_apply prod_comm_apply\n\n",
 "option_equiv_sum_punit_symm_inr":
 "@[simp]\ntheorem option_equiv_sum_punit_symm_inr {α} (a) : (optionEquivSumPUnit α).symm (Sum.inr a) = none :=\n  rfl\n#align option_equiv_sum_punit_symm_inr option_equiv_sum_punit_symm_inr\n\n",
 "option_equiv_sum_punit_symm_inl":
 "@[simp]\ntheorem option_equiv_sum_punit_symm_inl {α} (a) : (optionEquivSumPUnit α).symm (Sum.inl a) = a :=\n  rfl\n#align option_equiv_sum_punit_symm_inl option_equiv_sum_punit_symm_inl\n\n",
 "option_equiv_sum_punit_some":
 "@[simp]\ntheorem option_equiv_sum_punit_some {α} (a) : optionEquivSumPUnit α (some a) = Sum.inl a :=\n  rfl\n#align option_equiv_sum_punit_some option_equiv_sum_punit_some\n\n",
 "option_equiv_sum_punit_none":
 "@[simp]\ntheorem option_equiv_sum_punit_none {α} : optionEquivSumPUnit α none = Sum.inr PUnit.unit :=\n  rfl\n#align option_equiv_sum_punit_none option_equiv_sum_punit_none\n\n",
 "option_equiv_sum_punit_coe":
 "@[simp]\ntheorem option_equiv_sum_punit_coe {α} (a : α) : optionEquivSumPUnit α a = Sum.inl a :=\n  rfl\n#align option_equiv_sum_punit_coe option_equiv_sum_punit_coe\n\n",
 "of_fiber_equiv_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n-- See also `equiv.of_preimage_equiv`.\ntheorem of_fiber_equiv_map {α β γ} {f : α → γ} {g : β → γ} (e : ∀ c, «expr ≃ » { a // f a = c } { b // g b = c })\n    (a : α) : g (ofFiberEquiv e a) = f a :=\n  (_ : { b // g b = _ }).prop\n#align of_fiber_equiv_map of_fiber_equiv_map\n\n",
 "of_bijective_symm_apply_apply":
 "@[simp]\ntheorem of_bijective_symm_apply_apply (f : α → β) (hf : bijective f) (x : α) : (ofBijective f hf).symm (f x) = x :=\n  (ofBijective f hf).symm_apply_apply x\n#align of_bijective_symm_apply_apply of_bijective_symm_apply_apply\n\n",
 "of_bijective_apply_symm_apply":
 "theorem of_bijective_apply_symm_apply (f : α → β) (hf : bijective f) (x : β) : f ((ofBijective f hf).symm x) = x :=\n  (ofBijective f hf).apply_symm_apply x\n#align of_bijective_apply_symm_apply of_bijective_apply_symm_apply\n\n",
 "map_swap":
 "#print Function.Injective.map_swap /-\ntheorem Function.Injective.map_swap {α β : Sort _} [DecidableEq α] [DecidableEq β] {f : α → β}\n    (hf : function.injective f) (x y z : α) : f (Equiv.swap x y z) = Equiv.swap (f x) (f y) (f z) :=\n  by\n  conv_rhs => rw [Equiv.swap_apply_def]\n  split_ifs with h₁ h₂\n  · rw [hf h₁, Equiv.swap_apply_left]\n  · rw [hf h₂, Equiv.swap_apply_right]\n  · rw [Equiv.swap_apply_of_ne_of_ne (mt (congr_arg f) h₁) (mt (congr_arg f) h₂)]\n#align function.injective.map_swap Function.Injective.map_swap\n-/\n\n",
 "left_apply_subtype":
 "@[simp]\ntheorem perm.subtype_congr.left_apply_subtype (a : { a // p a }) : ep.subtype_congr en a = ep a :=\n  by\n  convert perm.subtype_congr.left_apply _ _ a.property\n  simp\n#align perm.subtype_congr.left_apply_subtype perm.subtype_congr.left_apply_subtype\n\n",
 "left_apply":
 "@[simp]\ntheorem perm.subtype_congr.left_apply {a : ε} (h : p a) : ep.subtype_congr en a = ep ⟨a, h⟩ := by\n  simp [perm.subtype_congr.apply, h]\n#align perm.subtype_congr.left_apply perm.subtype_congr.left_apply\n\n",
 "is_empty_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- If `α` is equivalent to `β`, then `is_empty α` is equivalent to `is_empty β`. -/\ntheorem is_empty_congr (e : «expr ≃ » α β) : IsEmpty α ↔ IsEmpty β :=\n  ⟨fun h => @Function.isEmpty _ _ h e.symm, fun h => @Function.isEmpty _ _ h e⟩\n#align is_empty_congr is_empty_congr\n\n",
 "fst_prod_extend_right":
 "@[simp]\ntheorem fst_prod_extend_right (ab : α₁ × β₁) : (prodExtendRight a e ab).fst = ab.fst :=\n  by\n  rw [prod_extend_right, coe_fn_mk]\n  split_ifs with h\n  · rw [h]\n  · rfl\n#align fst_prod_extend_right fst_prod_extend_right\n\n",
 "extend_domain_trans":
 "theorem perm.extend_domain_trans (e e' : Perm α') :\n    (e.extend_domain f).trans (e'.extend_domain f) = Perm.extendDomain (e.trans e') f := by\n  simp [perm.extend_domain, perm_congr_trans]\n#align perm.extend_domain_trans perm.extend_domain_trans\n\n",
 "extend_domain_symm":
 "@[simp]\ntheorem perm.extend_domain_symm : (e.extend_domain f).symm = Perm.extendDomain e.symm f :=\n  rfl\n#align perm.extend_domain_symm perm.extend_domain_symm\n\n",
 "extend_domain_refl":
 "@[simp]\ntheorem perm.extend_domain_refl : Perm.extendDomain (Equiv.refl _) f = Equiv.refl _ := by simp [perm.extend_domain]\n#align perm.extend_domain_refl perm.extend_domain_refl\n\n",
 "extend_domain_apply_subtype":
 "theorem perm.extend_domain_apply_subtype {b : β'} (h : p b) : e.extend_domain f b = f (e (f.symm ⟨b, h⟩)) := by\n  simp [perm.extend_domain, h]\n#align perm.extend_domain_apply_subtype perm.extend_domain_apply_subtype\n\n",
 "extend_domain_apply_not_subtype":
 "theorem perm.extend_domain_apply_not_subtype {b : β'} (h : ¬p b) : e.extend_domain f b = b := by\n  simp [perm.extend_domain, h]\n#align perm.extend_domain_apply_not_subtype perm.extend_domain_apply_not_subtype\n\n",
 "extend_domain_apply_image":
 "@[simp]\ntheorem perm.extend_domain_apply_image (a : α') : e.extend_domain f (f a) = f (e a) := by simp [perm.extend_domain]\n#align perm.extend_domain_apply_image perm.extend_domain_apply_image\n\n",
 "eq_up_iff_down_eq":
 "#print PLift.eq_up_iff_down_eq /-\ntheorem PLift.eq_up_iff_down_eq {x : PLift α} {y : α} : x = PLift.up y ↔ x.down = y :=\n  Equiv.plift.eq_symm_apply\n#align plift.eq_up_iff_down_eq PLift.eq_up_iff_down_eq\n-/\n\n",
 "eq_of_prod_extend_right_ne":
 "theorem eq_of_prod_extend_right_ne {e : Perm β₁} {a a' : α₁} {b : β₁} (h : prodExtendRight a e (a', b) ≠ (a', b)) :\n    a' = a := by\n  contrapose! h\n  exact prod_extend_right_apply_ne _ h _\n#align eq_of_prod_extend_right_ne eq_of_prod_extend_right_ne\n\n",
 "empty_sum_apply_inr":
 "@[simp]\ntheorem empty_sum_apply_inr {α β : Type _} [IsEmpty α] (b : β) : emptySum α β (Sum.inr b) = b :=\n  rfl\n#align empty_sum_apply_inr empty_sum_apply_inr\n\n",
 "comp_swap_eq_update":
 "theorem comp_swap_eq_update (i j : α) (f : α → β) : f ∘ Equiv.swap i j = update (update f j (f i)) i (f j) := by\n  rw [swap_eq_update, comp_update, comp_update, comp.right_id]\n#align comp_swap_eq_update comp_swap_eq_update\n\n",
 "coe_unique_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_unique_prod {α β : Type _} [Unique β] : «expr⇑ » (uniqueProd α β) = Prod.snd :=\n  rfl\n#align coe_unique_prod coe_unique_prod\n\n",
 "coe_to_perm":
 "@[simp]\ntheorem coe_to_perm {f : α → α} (h : Involutive f) : (h.to_perm f : α → α) = f :=\n  rfl\n#align coe_to_perm coe_to_perm\n\n",
 "coe_subtype_equiv_codomain_symm":
 "theorem coe_subtype_equiv_codomain_symm (f : { x' // x' ≠ x } → Y) :\n    ((subtypeEquivCodomain f).symm : Y → { g : X → Y // g ∘ coe = f }) = fun y =>\n      ⟨fun x' => if h : x' ≠ x then f ⟨x', h⟩ else y, by\n        funext x'\n        dsimp\n        erw [dif_pos x'.2, Subtype.coe_eta]⟩ :=\n  rfl\n#align coe_subtype_equiv_codomain_symm coe_subtype_equiv_codomain_symm\n\n",
 "coe_subtype_equiv_codomain":
 "@[simp]\ntheorem coe_subtype_equiv_codomain (f : { x' // x' ≠ x } → Y) :\n    (subtypeEquivCodomain f : { g : X → Y // g ∘ coe = f } → Y) = fun g => (g : X → Y) x :=\n  rfl\n#align coe_subtype_equiv_codomain coe_subtype_equiv_codomain\n\n",
 "coe_prod_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_prod_unique {α β : Type _} [Unique β] : «expr⇑ » (prodUnique α β) = Prod.fst :=\n  rfl\n#align coe_prod_unique coe_prod_unique\n\n",
 "coe_prod_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_prod_comm (α β : Type _) : «expr⇑ » (prodComm α β) = Prod.swap :=\n  rfl\n#align coe_prod_comm coe_prod_comm\n\n",
 "coe_Pi_congr_symm":
 "@[simp]\ntheorem coe_Pi_congr_symm : ((h₁.Pi_congr h₂).symm : (∀ b, Z b) → ∀ a, W a) = fun f a => (h₂ a).symm (f (h₁ a)) :=\n  rfl\n#align coe_Pi_congr_symm coe_Pi_congr_symm\n\n",
 "coe_Pi_congr'":
 "@[simp]\ntheorem coe_Pi_congr' : (h₁.Pi_congr' h₂ : (∀ a, W a) → ∀ b, Z b) = fun f b => h₂ b <| f <| h₁.symm b :=\n  rfl\n#align coe_Pi_congr' coe_Pi_congr'\n\n",
 "apply_swap_eq_self":
 "/-- A function is invariant to a swap if it is equal at both elements -/\ntheorem apply_swap_eq_self {v : α → β} {i j : α} (hv : v i = v j) (k : α) : v (swap i j k) = v k :=\n  by\n  by_cases hi : k = i; · rw [hi, swap_apply_left, hv]\n  by_cases hj : k = j; · rw [hj, swap_apply_right, hv]\n  rw [swap_apply_of_ne_of_ne hi hj]\n#align apply_swap_eq_self apply_swap_eq_self\n\n",
 "apply":
 "theorem perm.subtype_congr.apply (a : ε) : ep.subtype_congr en a = if h : p a then ep ⟨a, h⟩ else en ⟨a, h⟩ := by\n  by_cases h : p a <;> simp [perm.subtype_congr, h]\n#align perm.subtype_congr.apply perm.subtype_congr.apply\n\n",
 "Pi_congr_symm_apply":
 "theorem Pi_congr_symm_apply (f : ∀ b, Z b) : (h₁.Pi_congr h₂).symm f = fun a => (h₂ a).symm (f (h₁ a)) :=\n  rfl\n#align Pi_congr_symm_apply Pi_congr_symm_apply\n\n",
 "Pi_congr_left'_update":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem Pi_congr_left'_update [DecidableEq α] [DecidableEq β] (P : α → Sort _) (e : «expr ≃ » α β) (f : ∀ a, P a)\n    (b : β) (x : P (e.symm b)) : e.Pi_congr_left' P (update f (e.symm b) x) = update (e.Pi_congr_left' P f) b x :=\n  by\n  ext b'\n  rcases eq_or_ne b' b with (rfl | h)\n  · simp\n  · simp [h]\n#align Pi_congr_left'_update Pi_congr_left'_update\n\n",
 "Pi_congr_left'_symm_update":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem Pi_congr_left'_symm_update [DecidableEq α] [DecidableEq β] (P : α → Sort _) (e : «expr ≃ » α β)\n    (f : ∀ b, P (e.symm b)) (b : β) (x : P (e.symm b)) :\n    (e.Pi_congr_left' P).symm (update f b x) = update ((e.Pi_congr_left' P).symm f) (e.symm b) x := by\n  simp [(e.Pi_congr_left' P).symm_apply_eq, Pi_congr_left'_update]\n#align Pi_congr_left'_symm_update Pi_congr_left'_symm_update\n\n",
 "Pi_congr_apply_apply":
 "@[simp]\ntheorem Pi_congr_apply_apply (f : ∀ a, W a) (a : α) : h₁.Pi_congr h₂ f (h₁ a) = h₂ a (f a) :=\n  by\n  change cast _ ((h₂ (h₁.symm (h₁ a))) (f (h₁.symm (h₁ a)))) = (h₂ a) (f a)\n  generalize_proofs hZa\n  revert hZa\n  rw [h₁.symm_apply_apply a]\n  simp\n#align Pi_congr_apply_apply Pi_congr_apply_apply\n\n",
 "Pi_congr'_symm_apply_symm_apply":
 "@[simp]\ntheorem Pi_congr'_symm_apply_symm_apply (f : ∀ b, Z b) (b : β) :\n    (h₁.Pi_congr' h₂).symm f (h₁.symm b) = (h₂ b).symm (f b) :=\n  by\n  change cast _ ((h₂ (h₁ (h₁.symm b))).symm (f (h₁ (h₁.symm b)))) = (h₂ b).symm (f b)\n  generalize_proofs hWb\n  revert hWb\n  generalize hb : h₁ (h₁.symm b) = b'\n  rw [h₁.apply_symm_apply b] at hb\n  subst hb\n  simp\n#align Pi_congr'_symm_apply_symm_apply Pi_congr'_symm_apply_symm_apply\n\n",
 "Pi_congr'_apply":
 "theorem Pi_congr'_apply (f : ∀ a, W a) : h₁.Pi_congr' h₂ f = fun b => h₂ b <| f <| h₁.symm b :=\n  rfl\n#align Pi_congr'_apply Pi_congr'_apply\n\n",
 "Pi_comm_symm":
 "@[simp]\ntheorem Pi_comm_symm {α β} {φ : α → β → Sort _} : (piComm φ).symm = (piComm <| swap φ) :=\n  rfl\n#align Pi_comm_symm Pi_comm_symm\n\n",
 "IsEmpty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print IsEmpty /-\nprotected theorem IsEmpty (e : «expr ≃ » α β) [IsEmpty β] : IsEmpty α :=\n  e.is_empty_congr.mpr ‹_›\n#align is_empty IsEmpty\n-/\n\n"}