{"map_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem map_equiv_symm_apply (h : «expr ≃ » α β) (h' : «expr ≃ » α' β') (y : F β β') :\n    (mapEquiv F h h' : «expr ≃ » (F α α') (F β β')).symm y = bimap h.symm h'.symm y :=\n  rfl\n#align map_equiv_symm_apply map_equiv_symm_apply\n\n",
 "map_equiv_refl_refl":
 "@[simp]\ntheorem map_equiv_refl_refl : mapEquiv F (Equiv.refl α) (Equiv.refl α') = Equiv.refl (F α α') :=\n  by\n  ext x\n  simp [id_bimap]\n#align map_equiv_refl_refl map_equiv_refl_refl\n\n",
 "map_equiv_refl":
 "@[simp]\ntheorem map_equiv_refl : mapEquiv f (Equiv.refl α) = Equiv.refl (f α) :=\n  by\n  ext x\n  simp only [map_equiv_apply, refl_apply]\n  exact is_lawful_functor.id_map x\n#align map_equiv_refl map_equiv_refl\n\n",
 "map_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem map_equiv_apply (h : «expr ≃ » α β) (h' : «expr ≃ » α' β') (x : F α α') :\n    (mapEquiv F h h' : «expr ≃ » (F α α') (F β β')) x = bimap h h' x :=\n  rfl\n#align map_equiv_apply map_equiv_apply\n\n"}