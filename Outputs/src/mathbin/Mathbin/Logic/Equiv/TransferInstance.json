{"smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_def {R : Type _} [SMul R β] (r : R) (x : α) :\n    @has_smul.smul _ _ (e.has_smul R) r x = e.symm («expr • » r (e x)) :=\n  rfl\n#align smul_def smul_def\n\n",
 "ring_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem ring_equiv_symm_apply (e : «expr ≃ » α β) [Add β] [Mul β] (b : β) :\n    by\n    letI := Equiv.Add e\n    letI := Equiv.Mul e\n    exact (RingEquiv e).symm b = e.symm b := by intros ; rfl\n#align ring_equiv_symm_apply ring_equiv_symm_apply\n\n",
 "ring_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem ring_equiv_apply (e : «expr ≃ » α β) [Add β] [Mul β] (a : α) : (ringEquiv e) a = e a :=\n  rfl\n#align ring_equiv_apply ring_equiv_apply\n\n",
 "pow_def":
 "theorem pow_def {N : Type _} [Pow β N] (n : N) (x : α) : @has_pow.pow _ _ (e.has_pow N) x n = e.symm (e x ^ n) :=\n  rfl\n#align pow_def pow_def\n\n",
 "one_def":
 "/-\nCopyright (c) 2018 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\n@[to_additive]\ntheorem one_def [One β] : @has_one.one _ (Equiv.One e) = e.symm 1 :=\n  rfl\n#align one_def one_def\n\n",
 "mul_equiv_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[to_additive]\ntheorem mul_equiv_symm_apply (e : «expr ≃ » α β) [Mul β] (b : β) :\n    letI := Equiv.Mul e\n    (MulEquiv e).symm b = e.symm b :=\n  by intros ; rfl\n#align mul_equiv_symm_apply mul_equiv_symm_apply\n\n",
 "mul_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp, to_additive]\ntheorem mul_equiv_apply (e : «expr ≃ » α β) [Mul β] (a : α) : (mulEquiv e) a = e a :=\n  rfl\n#align mul_equiv_apply mul_equiv_apply\n\n",
 "mul_def":
 "@[to_additive]\ntheorem mul_def [Mul β] (x y : α) : @has_mul.mul _ (Equiv.Mul e) x y = e.symm (e x * e y) :=\n  rfl\n#align mul_def mul_def\n\n",
 "inv_def":
 "@[to_additive]\ntheorem inv_def [Inv β] (x : α) : @has_inv.inv _ (Equiv.Inv e) x = e.symm (e x)⁻¹ :=\n  rfl\n#align inv_def inv_def\n\n",
 "div_def":
 "@[to_additive]\ntheorem div_def [Div β] (x y : α) : @has_div.div _ (Equiv.Div e) x y = e.symm (e x / e y) :=\n  rfl\n#align div_def div_def\n\n",
 "Nontrivial":
 "#print Nontrivial /-\n/-- Transfer `nontrivial` across an `equiv` -/\n@[reducible]\nprotected theorem Nontrivial [Nontrivial β] : Nontrivial α :=\n  e.surjective.nontrivial\n#align nontrivial Nontrivial\n-/\n\n",
 "IsDomain":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print IsDomain /-\n/-- Transfer `is_domain` across an `equiv` -/\n@[reducible]\nprotected theorem IsDomain [Ring α] [Ring β] [IsDomain β] (e : «expr ≃+* » α β) : IsDomain α :=\n  Function.Injective.isDomain e.to_ring_hom e.injective\n#align is_domain IsDomain\n-/\n\n"}