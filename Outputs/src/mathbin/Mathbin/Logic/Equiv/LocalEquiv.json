{"union":
 "protected theorem union {s' t'} (h : e.is_image s t) (h' : e.is_image s' t') : e.is_image (s ∪ s') (t ∪ t') :=\n  fun x hx => or_congr (h hx) (h' hx)\n#align union union\n\n",
 "trans_to_local_equiv":
 "@[simp, mfld_simps]\ntheorem trans_to_local_equiv : (e.trans e').to_local_equiv = e.to_local_equiv.trans e'.to_local_equiv :=\n  LocalEquiv.ext (fun x => rfl) (fun x => rfl) (by simp [LocalEquiv.trans_source, Equiv.toLocalEquiv])\n#align trans_to_local_equiv trans_to_local_equiv\n\n",
 "trans_target''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem trans_target'' : (e.trans e').target = «expr '' » e' (e'.source ∩ e.target) :=\n  trans_source'' e'.symm e.symm\n#align trans_target'' trans_target''\n\n",
 "trans_target'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem trans_target' : (e.trans e').target = e'.target ∩ «expr ⁻¹' » e'.symm (e'.source ∩ e.target) :=\n  trans_source' e'.symm e.symm\n#align trans_target' trans_target'\n\n",
 "trans_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp, mfld_simps]\ntheorem trans_target : (e.trans e').target = e'.target ∩ «expr ⁻¹' » e'.symm e.target :=\n  rfl\n#align trans_target trans_target\n\n",
 "trans_symm_self":
 "/-- Composition of the inverse of a local equiv and this local equiv is equivalent to the\nrestriction of the identity to the target -/\ntheorem trans_symm_self : e.symm.trans e ≈ LocalEquiv.ofSet e.target :=\n  trans_self_symm e.symm\n#align trans_symm_self trans_symm_self\n\n",
 "trans_symm_eq_symm_trans_symm":
 "theorem trans_symm_eq_symm_trans_symm : (e.trans e').symm = e'.symm.trans e.symm := by cases e <;> cases e' <;> rfl\n#align trans_symm_eq_symm_trans_symm trans_symm_eq_symm_trans_symm\n\n",
 "trans_source''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem trans_source'' : (e.trans e').source = «expr '' » e.symm (e.target ∩ e'.source) := by\n  rw [e.trans_source', e.symm_image_target_inter_eq]\n#align trans_source'' trans_source''\n\n",
 "trans_source'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem trans_source' : (e.trans e').source = e.source ∩ «expr ⁻¹' » e (e.target ∩ e'.source) := by mfld_set_tac\n#align trans_source' trans_source'\n\n",
 "trans_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp, mfld_simps]\ntheorem trans_source : (e.trans e').source = e.source ∩ «expr ⁻¹' » e e'.source :=\n  rfl\n#align trans_source trans_source\n\n",
 "trans_self_symm":
 "/-- Composition of a local equiv and its inverse is equivalent to the restriction of the identity\nto the source -/\ntheorem trans_self_symm : e.trans e.symm ≈ LocalEquiv.ofSet e.source :=\n  by\n  have A : (e.trans e.symm).source = e.source := by mfld_set_tac\n  refine' ⟨by simp [A], fun x hx => _⟩\n  rw [A] at hx\n  simp only [hx, mfld_simps]\n#align trans_self_symm trans_self_symm\n\n",
 "trans_refl_restr'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem trans_refl_restr' (s : set β) : e.trans ((LocalEquiv.refl β).restr s) = e.restr (e.source ∩ «expr ⁻¹' » e s) :=\n  (LocalEquiv.ext (fun x => rfl) fun x => rfl) <| by\n    simp [trans_source]\n    rw [← inter_assoc, inter_self]\n#align trans_refl_restr' trans_refl_restr'\n\n",
 "trans_refl_restr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem trans_refl_restr (s : set β) : e.trans ((LocalEquiv.refl β).restr s) = e.restr («expr ⁻¹' » e s) :=\n  LocalEquiv.ext (fun x => rfl) (fun x => rfl) (by simp [trans_source])\n#align trans_refl_restr trans_refl_restr\n\n",
 "trans_refl":
 "@[simp, mfld_simps]\ntheorem trans_refl : e.trans (LocalEquiv.refl β) = e :=\n  LocalEquiv.ext (fun x => rfl) (fun x => rfl) (by simp [trans_source])\n#align trans_refl trans_refl\n\n",
 "trans_local_equiv_eq_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.transLocalEquiv_eq_trans /-\ntheorem Equiv.transLocalEquiv_eq_trans (e : «expr ≃ » α β) : e.trans_local_equiv e' = e.to_local_equiv.trans e' :=\n  copy_eq _ _ _ _ _ _ _ _ _\n#align equiv.trans_local_equiv_eq_trans Equiv.transLocalEquiv_eq_trans\n-/\n\n",
 "trans_equiv_eq_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem trans_equiv_eq_trans (e' : «expr ≃ » β γ) : e.trans_equiv e' = e.trans e'.to_local_equiv :=\n  copy_eq _ _ _ _ _ _ _ _ _\n#align trans_equiv_eq_trans trans_equiv_eq_trans\n\n",
 "trans_assoc":
 "theorem trans_assoc (e'' : LocalEquiv γ δ) : (e.trans e').trans e'' = e.trans (e'.trans e'') :=\n  LocalEquiv.ext (fun x => rfl) (fun x => rfl) (by simp [trans_source, @preimage_comp α β γ, inter_assoc])\n#align trans_assoc trans_assoc\n\n",
 "trans_apply":
 "theorem trans_apply {x : α} : (e.trans e') x = e' (e x) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "trans'":
 "/-- Composition of local equivs respects equivalence -/\ntheorem eq_on_source.trans' {e e' : LocalEquiv α β} {f f' : LocalEquiv β γ} (he : e ≈ e') (hf : f ≈ f') :\n    e.trans f ≈ e'.trans f' := by\n  constructor\n  · rw [trans_source'', trans_source'', ← he.target_eq, ← hf.1]\n    exact (he.symm'.eq_on.mono <| inter_subset_left _ _).image_eq\n  · intro x hx\n    rw [trans_source] at hx\n    simp [(he.2 hx.1).symm, hf.2 hx.2]\n#align eq_on_source.trans' eq_on_source.trans'\n\n",
 "to_fun_as_coe":
 "@[simp, mfld_simps]\ntheorem to_fun_as_coe : e.to_fun = e :=\n  rfl\n#align to_fun_as_coe to_fun_as_coe\n\n",
 "target_subset_preimage_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem target_subset_preimage_source : e.target ⊆ «expr ⁻¹' » e.symm e.source :=\n  e.symm_maps_to\n#align target_subset_preimage_source target_subset_preimage_source\n\n",
 "target_inter_inv_preimage_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem target_inter_inv_preimage_preimage (s : set β) :\n    e.target ∩ «expr ⁻¹' » e.symm («expr ⁻¹' » e s) = e.target ∩ s :=\n  e.symm.source_inter_preimage_inv_preimage _\n#align target_inter_inv_preimage_preimage target_inter_inv_preimage_preimage\n\n",
 "target_eq":
 "/-- Two equivalent local equivs have the same target -/\ntheorem eq_on_source.target_eq {e e' : LocalEquiv α β} (h : e ≈ e') : e.target = e'.target := by\n  simp only [← image_source_eq_target, ← h.source_eq, h.2.image_eq]\n#align eq_on_source.target_eq eq_on_source.target_eq\n\n",
 "symm_to_local_equiv":
 "@[simp, mfld_simps]\ntheorem symm_to_local_equiv : e.symm.to_local_equiv = e.to_local_equiv.symm :=\n  rfl\n#align symm_to_local_equiv symm_to_local_equiv\n\n",
 "symm_target":
 "@[simp, mfld_simps]\ntheorem symm_target : e.symm.target = e.source :=\n  rfl\n#align symm_target symm_target\n\n",
 "symm_symm":
 "@[simp, mfld_simps]\ntheorem symm_symm : e.symm.symm = e := by\n  cases e\n  rfl\n#align symm_symm symm_symm\n\n",
 "symm_source":
 "@[simp, mfld_simps]\ntheorem symm_source : e.symm.source = e.target :=\n  rfl\n#align symm_source symm_source\n\n",
 "symm_piecewise":
 "theorem symm_piecewise (e e' : LocalEquiv α β) {s : set α} {t : set β} [∀ x, decidable (x ∈ s)] [∀ y, decidable (y ∈ t)]\n    (H : e.is_image s t) (H' : e'.is_image s t) :\n    (e.piecewise e' s t H H').symm = e.symm.piecewise e'.symm t s H.symm H'.symm :=\n  rfl\n#align symm_piecewise symm_piecewise\n\n",
 "symm_maps_to":
 "theorem symm_maps_to (h : e.is_image s t) : MapsTo e.symm (e.target ∩ t) (e.source ∩ s) :=\n  h.symm.maps_to\n#align symm_maps_to symm_maps_to\n\n",
 "symm_image_target_inter_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem symm_image_target_inter_eq' (s : set β) : «expr '' » e.symm (e.target ∩ s) = e.source ∩ «expr ⁻¹' » e s :=\n  e.symm.image_source_inter_eq' _\n#align symm_image_target_inter_eq' symm_image_target_inter_eq'\n\n",
 "symm_image_target_inter_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem symm_image_target_inter_eq (s : set β) :\n    «expr '' » e.symm (e.target ∩ s) = e.source ∩ «expr ⁻¹' » e (e.target ∩ s) :=\n  e.symm.image_source_inter_eq _\n#align symm_image_target_inter_eq symm_image_target_inter_eq\n\n",
 "symm_image_target_eq_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem symm_image_target_eq_source : «expr '' » e.symm e.target = e.source :=\n  e.symm.image_source_eq_target\n#align symm_image_target_eq_source symm_image_target_eq_source\n\n",
 "symm_image_image_of_subset_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem symm_image_image_of_subset_source {s : set α} (h : s ⊆ e.source) : «expr '' » e.symm («expr '' » e s) = s :=\n  (e.left_inv_on.mono h).image_image\n#align symm_image_image_of_subset_source symm_image_image_of_subset_source\n\n",
 "symm_image_eq_source_inter_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem symm_image_eq_source_inter_preimage {s : set β} (h : s ⊆ e.target) :\n    «expr '' » e.symm s = e.source ∩ «expr ⁻¹' » e s :=\n  e.symm.image_eq_target_inter_inv_preimage h\n#align symm_image_eq_source_inter_preimage symm_image_eq_source_inter_preimage\n\n",
 "symm_image_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem symm_image_eq (h : e.is_image s t) : «expr '' » e.symm (e.target ∩ t) = e.source ∩ s :=\n  h.symm.image_eq\n#align symm_image_eq symm_image_eq\n\n",
 "symm_iff":
 "@[simp]\ntheorem symm_iff : e.symm.is_image t s ↔ e.is_image s t :=\n  ⟨fun h => h.symm, fun h => h.symm⟩\n#align symm_iff symm_iff\n\n",
 "symm_eq_on_of_inter_eq_of_eq_on":
 "theorem symm_eq_on_of_inter_eq_of_eq_on {e' : LocalEquiv α β} (h : e.is_image s t) (hs : e.source ∩ s = e'.source ∩ s)\n    (Heq : EqOn e e' (e.source ∩ s)) : EqOn e.symm e'.symm (e.target ∩ t) :=\n  by\n  rw [← h.image_eq]\n  rintro y ⟨x, hx, rfl⟩\n  have hx' := hx; rw [hs] at hx'\n  rw [e.left_inv hx.1, Heq hx, e'.left_inv hx'.1]\n#align symm_eq_on_of_inter_eq_of_eq_on symm_eq_on_of_inter_eq_of_eq_on\n\n",
 "symm_eq_on":
 "/-- Two equivalent local equivs have coinciding inverses on the target -/\ntheorem eq_on_source.symm_eq_on {e e' : LocalEquiv α β} (h : e ≈ e') : EqOn e.symm e'.symm e.target :=\n  h.symm'.eq_on\n#align eq_on_source.symm_eq_on eq_on_source.symm_eq_on\n\n",
 "symm_apply_mem_iff":
 "theorem symm_apply_mem_iff (h : e.is_image s t) : ∀ ⦃y⦄, y ∈ e.target → (e.symm y ∈ s ↔ y ∈ t) :=\n  e.forall_mem_target.mpr fun x hx => by rw [e.left_inv hx, h hx]\n#align symm_apply_mem_iff symm_apply_mem_iff\n\n",
 "symm'":
 "/-- If two local equivs are equivalent, so are their inverses. -/\ntheorem eq_on_source.symm' {e e' : LocalEquiv α β} (h : e ≈ e') : e.symm ≈ e'.symm :=\n  by\n  refine' ⟨h.target_eq, eq_on_of_left_inv_on_of_right_inv_on e.left_inv_on _ _⟩ <;>\n    simp only [symm_source, h.target_eq, h.source_eq, e'.symm_maps_to]\n  exact e'.right_inv_on.congr_right e'.symm_maps_to (h.source_eq ▸ h.eq_on.symm)\n#align eq_on_source.symm' eq_on_source.symm'\n\n",
 "symm":
 "#print symm /-\nprotected theorem symm (h : e.is_image s t) : e.symm.is_image t s :=\n  h.symm_apply_mem_iff\n#align symm symm\n-/\n\n",
 "surj_on":
 "protected theorem surj_on : SurjOn e e.source e.target :=\n  e.bij_on.surj_on\n#align surj_on surj_on\n\n",
 "source_subset_preimage_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem source_subset_preimage_target : e.source ⊆ «expr ⁻¹' » e e.target :=\n  e.maps_to\n#align source_subset_preimage_target source_subset_preimage_target\n\n",
 "source_inter_preimage_target_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem source_inter_preimage_target_inter (s : set β) :\n    e.source ∩ «expr ⁻¹' » e (e.target ∩ s) = e.source ∩ «expr ⁻¹' » e s :=\n  ext fun x => ⟨fun hx => ⟨hx.1, hx.2.2⟩, fun hx => ⟨hx.1, e.map_source hx.1, hx.2⟩⟩\n#align source_inter_preimage_target_inter source_inter_preimage_target_inter\n\n",
 "source_inter_preimage_inv_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem source_inter_preimage_inv_preimage (s : set α) :\n    e.source ∩ «expr ⁻¹' » e («expr ⁻¹' » e.symm s) = e.source ∩ s :=\n  Set.ext fun x => and_congr_right_iff.2 fun hx => by simp only [mem_preimage, e.left_inv hx]\n#align source_inter_preimage_inv_preimage source_inter_preimage_inv_preimage\n\n",
 "source_inter_preimage_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- Preimages are respected by equivalence -/\ntheorem eq_on_source.source_inter_preimage_eq {e e' : LocalEquiv α β} (he : e ≈ e') (s : set β) :\n    e.source ∩ «expr ⁻¹' » e s = e'.source ∩ «expr ⁻¹' » e' s := by rw [he.eq_on.inter_preimage_eq, he.source_eq]\n#align eq_on_source.source_inter_preimage_eq eq_on_source.source_inter_preimage_eq\n\n",
 "source_eq":
 "/-- Two equivalent local equivs have the same source -/\ntheorem eq_on_source.source_eq {e e' : LocalEquiv α β} (h : e ≈ e') : e.source = e'.source :=\n  h.1\n#align eq_on_source.source_eq eq_on_source.source_eq\n\n",
 "right_inv_on":
 "protected theorem right_inv_on : RightInvOn e.symm e e.target := fun x => e.right_inv\n#align right_inv_on right_inv_on\n\n",
 "right_inv":
 "@[simp, mfld_simps]\ntheorem right_inv {x : β} (h : x ∈ e.target) : e (e.symm x) = x :=\n  e.right_inv' h\n#align right_inv right_inv\n\n",
 "restr_univ":
 "@[simp, mfld_simps]\ntheorem restr_univ {e : LocalEquiv α β} : e.restr univ = e :=\n  restr_eq_of_source_subset (subset_univ _)\n#align restr_univ restr_univ\n\n",
 "restr_trans":
 "theorem restr_trans (s : set α) : (e.restr s).trans e' = (e.trans e').restr s :=\n  (LocalEquiv.ext (fun x => rfl) fun x => rfl) <|\n    by\n    simp [trans_source, inter_comm]\n    rwa [inter_assoc]\n#align restr_trans restr_trans\n\n",
 "restr_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp, mfld_simps]\ntheorem restr_target (s : set α) : (e.restr s).target = e.target ∩ «expr ⁻¹' » e.symm s :=\n  rfl\n#align restr_target restr_target\n\n",
 "restr_source":
 "@[simp, mfld_simps]\ntheorem restr_source (s : set α) : (e.restr s).source = e.source ∩ s :=\n  rfl\n#align restr_source restr_source\n\n",
 "restr_eq_of_source_subset":
 "theorem restr_eq_of_source_subset {e : LocalEquiv α β} {s : set α} (h : e.source ⊆ s) : e.restr s = e :=\n  LocalEquiv.ext (fun _ => rfl) (fun _ => rfl) (by simp [inter_eq_self_of_subset_left h])\n#align restr_eq_of_source_subset restr_eq_of_source_subset\n\n",
 "restr_coe_symm":
 "@[simp, mfld_simps]\ntheorem restr_coe_symm (s : set α) : ((e.restr s).symm : β → α) = e.symm :=\n  rfl\n#align restr_coe_symm restr_coe_symm\n\n",
 "restr_coe":
 "@[simp, mfld_simps]\ntheorem restr_coe (s : set α) : (e.restr s : α → β) = e :=\n  rfl\n#align restr_coe restr_coe\n\n",
 "restr":
 "/-- Restriction of local equivs respects equivalence -/\ntheorem eq_on_source.restr {e e' : LocalEquiv α β} (he : e ≈ e') (s : set α) : e.restr s ≈ e'.restr s :=\n  by\n  constructor\n  · simp [he.1]\n  · intro x hx\n    simp only [mem_inter_iff, restr_source] at hx\n    exact he.2 hx.1\n#align eq_on_source.restr eq_on_source.restr\n\n",
 "refl_trans":
 "@[simp, mfld_simps]\ntheorem refl_trans : (LocalEquiv.refl α).trans e = e :=\n  LocalEquiv.ext (fun x => rfl) (fun x => rfl) (by simp [trans_source, preimage_id])\n#align refl_trans refl_trans\n\n",
 "refl_to_local_equiv":
 "-- All arguments are explicit to avoid missing information in the pretty printer output\n/- equivs give rise to local_equiv. We set up simp lemmas to reduce most properties of the local\nequiv to that of the equiv. -/\n@[simp, mfld_simps]\ntheorem refl_to_local_equiv : (equiv.refl α).to_local_equiv = LocalEquiv.refl α :=\n  rfl\n#align refl_to_local_equiv refl_to_local_equiv\n\n",
 "refl_target":
 "@[simp, mfld_simps]\ntheorem refl_target : (LocalEquiv.refl α).target = univ :=\n  rfl\n#align refl_target refl_target\n\n",
 "refl_symm":
 "@[simp, mfld_simps]\ntheorem refl_symm : (LocalEquiv.refl α).symm = LocalEquiv.refl α :=\n  rfl\n#align refl_symm refl_symm\n\n",
 "refl_source":
 "@[simp, mfld_simps]\ntheorem refl_source : (LocalEquiv.refl α).source = univ :=\n  rfl\n#align refl_source refl_source\n\n",
 "refl_restr_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp, mfld_simps]\ntheorem refl_restr_target (s : set α) : ((LocalEquiv.refl α).restr s).target = s :=\n  by\n  change univ ∩ «expr ⁻¹' » id s = s\n  simp\n#align refl_restr_target refl_restr_target\n\n",
 "refl_restr_source":
 "@[simp, mfld_simps]\ntheorem refl_restr_source (s : set α) : ((LocalEquiv.refl α).restr s).source = s := by simp\n#align refl_restr_source refl_restr_source\n\n",
 "refl_prod_refl":
 "@[simp, mfld_simps]\ntheorem refl_prod_refl : (LocalEquiv.refl α).prod (LocalEquiv.refl β) = LocalEquiv.refl (α × β) :=\n  by\n  ext1 ⟨x, y⟩\n  · rfl\n  · rintro ⟨x, y⟩\n    rfl\n  exact univ_prod_univ\n#align refl_prod_refl refl_prod_refl\n\n",
 "refl_coe":
 "@[simp, mfld_simps]\ntheorem refl_coe : (LocalEquiv.refl α : α → α) = id :=\n  rfl\n#align refl_coe refl_coe\n\n",
 "prod_trans":
 "@[simp, mfld_simps]\ntheorem prod_trans {η : Type _} {ε : Type _} (e : LocalEquiv α β) (f : LocalEquiv β γ) (e' : LocalEquiv δ η)\n    (f' : LocalEquiv η ε) : (e.prod e').trans (f.prod f') = (e.trans f).prod (e'.trans f') := by\n  ext x <;> simp [ext_iff] <;> tauto\n#align prod_trans prod_trans\n\n",
 "prod_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.prod -/\n@[simp, mfld_simps]\ntheorem prod_target (e : LocalEquiv α β) (e' : LocalEquiv γ δ) : (e.prod e').target = set.prod e.target e'.target :=\n  rfl\n#align prod_target prod_target\n\n",
 "prod_symm":
 "@[simp, mfld_simps]\ntheorem prod_symm (e : LocalEquiv α β) (e' : LocalEquiv γ δ) : (e.prod e').symm = e.symm.prod e'.symm := by\n  ext x <;> simp [prod_coe_symm]\n#align prod_symm prod_symm\n\n",
 "prod_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.prod -/\n@[simp, mfld_simps]\ntheorem prod_source (e : LocalEquiv α β) (e' : LocalEquiv γ δ) : (e.prod e').source = set.prod e.source e'.source :=\n  rfl\n#align prod_source prod_source\n\n",
 "prod_coe_symm":
 "theorem prod_coe_symm (e : LocalEquiv α β) (e' : LocalEquiv γ δ) :\n    ((e.prod e').symm : β × δ → α × γ) = fun p => (e.symm p.1, e'.symm p.2) :=\n  rfl\n#align prod_coe_symm prod_coe_symm\n\n",
 "prod_coe":
 "@[simp, mfld_simps]\ntheorem prod_coe (e : LocalEquiv α β) (e' : LocalEquiv γ δ) : (e.prod e' : α × γ → β × δ) = fun p => (e p.1, e' p.2) :=\n  rfl\n#align prod_coe prod_coe\n\n",
 "of_symm_image_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem of_symm_image_eq (h : «expr '' » e.symm (e.target ∩ t) = e.source ∩ s) : e.is_image s t :=\n  of_preimage_eq <| eq.trans (of_preimage_eq rfl).symm_image_eq.symm h\n#align of_symm_image_eq of_symm_image_eq\n\n",
 "of_set_target":
 "@[simp, mfld_simps]\ntheorem of_set_target (s : set α) : (LocalEquiv.ofSet s).target = s :=\n  rfl\n#align of_set_target of_set_target\n\n",
 "of_set_symm":
 "@[simp, mfld_simps]\ntheorem of_set_symm (s : set α) : (LocalEquiv.ofSet s).symm = LocalEquiv.ofSet s :=\n  rfl\n#align of_set_symm of_set_symm\n\n",
 "of_set_source":
 "@[simp, mfld_simps]\ntheorem of_set_source (s : set α) : (LocalEquiv.ofSet s).source = s :=\n  rfl\n#align of_set_source of_set_source\n\n",
 "of_set_coe":
 "@[simp, mfld_simps]\ntheorem of_set_coe (s : set α) : (LocalEquiv.ofSet s : α → α) = id :=\n  rfl\n#align of_set_coe of_set_coe\n\n",
 "of_image_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem of_image_eq (h : «expr '' » e (e.source ∩ s) = e.target ∩ t) : e.is_image s t :=\n  of_symm_preimage_eq <| eq.trans (of_symm_preimage_eq rfl).image_eq.symm h\n#align of_image_eq of_image_eq\n\n",
 "mem_symm_trans_source":
 "/-- A lemma commonly useful when `e` and `e'` are charts of a manifold. -/\ntheorem mem_symm_trans_source {e' : LocalEquiv α γ} {x : α} (he : x ∈ e.source) (he' : x ∈ e'.source) :\n    e x ∈ (e.symm.trans e').source :=\n  ⟨e.maps_to he, by rwa [mem_preimage, LocalEquiv.symm_symm, e.left_inv he]⟩\n#align mem_symm_trans_source mem_symm_trans_source\n\n",
 "maps_to":
 "protected theorem maps_to (h : e.is_image s t) : MapsTo e (e.source ∩ s) (e.target ∩ t) := fun x hx =>\n  ⟨e.maps_to hx.1, (h hx.1).2 hx.2⟩\n#align maps_to maps_to\n\n",
 "map_target":
 "@[simp, mfld_simps]\ntheorem map_target {x : β} (h : x ∈ e.target) : e.symm x ∈ e.source :=\n  e.map_target' h\n#align map_target map_target\n\n",
 "map_source":
 "@[simp, mfld_simps]\ntheorem map_source {x : α} (h : x ∈ e.source) : e x ∈ e.target :=\n  e.map_source' h\n#align map_source map_source\n\n",
 "left_inv_on_piecewise":
 "theorem left_inv_on_piecewise {e' : LocalEquiv α β} [∀ i, decidable (i ∈ s)] [∀ i, decidable (i ∈ t)]\n    (h : e.is_image s t) (h' : e'.is_image s t) :\n    LeftInvOn (t.piecewise e.symm e'.symm) (s.piecewise e e') (s.ite e.source e'.source) :=\n  by\n  rintro x (⟨he, hs⟩ | ⟨he, hs : x ∉ s⟩)\n  · rw [piecewise_eq_of_mem _ _ _ hs, piecewise_eq_of_mem _ _ _ ((h he).2 hs), e.left_inv he]\n  · rw [piecewise_eq_of_not_mem _ _ _ hs, piecewise_eq_of_not_mem _ _ _ ((h'.compl he).2 hs), e'.left_inv he]\n#align left_inv_on_piecewise left_inv_on_piecewise\n\n",
 "left_inv_on":
 "protected theorem left_inv_on : LeftInvOn e.symm e e.source := fun x => e.left_inv\n#align left_inv_on left_inv_on\n\n",
 "left_inv":
 "@[simp, mfld_simps]\ntheorem left_inv {x : α} (h : x ∈ e.source) : e.symm (e x) = x :=\n  e.left_inv' h\n#align left_inv left_inv\n\n",
 "is_image_source_target_of_disjoint":
 "theorem is_image_source_target_of_disjoint (e' : LocalEquiv α β) (hs : Disjoint e.source e'.source)\n    (ht : Disjoint e.target e'.target) : e.is_image e'.source e'.target :=\n  is_image.of_image_eq <| by rw [hs.inter_eq, ht.inter_eq, image_empty]\n#align is_image_source_target_of_disjoint is_image_source_target_of_disjoint\n\n",
 "is_image_source_target":
 "theorem is_image_source_target : e.is_image e.source e.target := fun x hx => by simp [hx]\n#align is_image_source_target is_image_source_target\n\n",
 "inv_on":
 "protected theorem inv_on : InvOn e.symm e e.source e.target :=\n  ⟨e.left_inv_on, e.right_inv_on⟩\n#align inv_on inv_on\n\n",
 "inv_image_trans_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem inv_image_trans_target : «expr '' » e'.symm (e.trans e').target = e'.source ∩ e.target :=\n  image_trans_source e'.symm e.symm\n#align inv_image_trans_target inv_image_trans_target\n\n",
 "inv_fun_as_coe":
 "@[simp, mfld_simps]\ntheorem inv_fun_as_coe : e.inv_fun = e.symm :=\n  rfl\n#align inv_fun_as_coe inv_fun_as_coe\n\n",
 "inter_eq_of_inter_eq_of_eq_on":
 "theorem inter_eq_of_inter_eq_of_eq_on {e' : LocalEquiv α β} (h : e.is_image s t) (h' : e'.is_image s t)\n    (hs : e.source ∩ s = e'.source ∩ s) (Heq : EqOn e e' (e.source ∩ s)) : e.target ∩ t = e'.target ∩ t := by\n  rw [← h.image_eq, ← h'.image_eq, ← hs, Heq.image_eq]\n#align inter_eq_of_inter_eq_of_eq_on inter_eq_of_inter_eq_of_eq_on\n\n",
 "inter":
 "protected theorem inter {s' t'} (h : e.is_image s t) (h' : e.is_image s' t') : e.is_image (s ∩ s') (t ∩ t') :=\n  fun x hx => and_congr (h hx) (h' hx)\n#align inter inter\n\n",
 "inj_on":
 "protected theorem inj_on : InjOn e e.source :=\n  e.left_inv_on.inj_on\n#align inj_on inj_on\n\n",
 "image_trans_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_trans_source : «expr '' » e (e.trans e').source = e.target ∩ e'.source :=\n  (e.symm.restr e'.source).symm.image_source_eq_target\n#align image_trans_source image_trans_source\n\n",
 "image_symm_image_of_subset_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_symm_image_of_subset_target {s : set β} (h : s ⊆ e.target) : «expr '' » e («expr '' » e.symm s) = s :=\n  e.symm.symm_image_image_of_subset_source h\n#align image_symm_image_of_subset_target image_symm_image_of_subset_target\n\n",
 "image_source_inter_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem image_source_inter_eq' (s : set α) : «expr '' » e (e.source ∩ s) = e.target ∩ «expr ⁻¹' » e.symm s := by\n  rw [inter_comm, e.left_inv_on.image_inter', image_source_eq_target, inter_comm]\n#align image_source_inter_eq' image_source_inter_eq'\n\n",
 "image_source_inter_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem image_source_inter_eq (s : set α) :\n    «expr '' » e (e.source ∩ s) = e.target ∩ «expr ⁻¹' » e.symm (e.source ∩ s) := by\n  rw [inter_comm, e.left_inv_on.image_inter, image_source_eq_target, inter_comm]\n#align image_source_inter_eq image_source_inter_eq\n\n",
 "image_source_eq_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_source_eq_target : «expr '' » e e.source = e.target :=\n  e.bij_on.image_eq\n#align image_source_eq_target image_source_eq_target\n\n",
 "image_eq_target_inter_inv_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem image_eq_target_inter_inv_preimage {s : set α} (h : s ⊆ e.source) :\n    «expr '' » e s = e.target ∩ «expr ⁻¹' » e.symm s := by\n  rw [← e.image_source_inter_eq', inter_eq_self_of_subset_right h]\n#align image_eq_target_inter_inv_preimage image_eq_target_inter_inv_preimage\n\n",
 "image_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_eq (h : e.is_image s t) : «expr '' » e (e.source ∩ s) = e.target ∩ t :=\n  h.restr.image_source_eq_target\n#align image_eq image_eq\n\n",
 "iff_symm_preimage_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem iff_symm_preimage_eq : e.is_image s t ↔ e.target ∩ «expr ⁻¹' » e.symm s = e.target ∩ t :=\n  symm_iff.symm.trans iff_preimage_eq\n#align iff_symm_preimage_eq iff_symm_preimage_eq\n\n",
 "iff_preimage_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem iff_preimage_eq : e.is_image s t ↔ e.source ∩ «expr ⁻¹' » e t = e.source ∩ s := by\n  simp only [is_image, Set.ext_iff, mem_inter_iff, and_congr_right_iff, mem_preimage]\n#align iff_preimage_eq iff_preimage_eq\n\n",
 "forall_mem_target":
 "theorem forall_mem_target {p : β → Prop} : (∀ y ∈ e.target, p y) ↔ ∀ x ∈ e.source, p (e x) := by\n  rw [← image_source_eq_target, ball_image_iff]\n#align forall_mem_target forall_mem_target\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- Two local equivs that have the same `source`, same `to_fun` and same `inv_fun`, coincide. -/\n@[ext]\nprotected theorem ext {e e' : LocalEquiv α β} (h : ∀ x, e x = e' x) (hsymm : ∀ x, e.symm x = e'.symm x)\n    (hs : e.source = e'.source) : e = e' :=\n  by\n  have A : (e : α → β) = e' := by\n    ext x\n    exact h x\n  have B : (e.symm : β → α) = e'.symm := by\n    ext x\n    exact hsymm x\n  have I : «expr '' » e e.source = e.target := e.image_source_eq_target\n  have I' : «expr '' » e' e'.source = e'.target := e'.image_source_eq_target\n  rw [A, hs, I'] at I\n  cases e <;> cases e'\n  simp_all\n#align ext ext\n\n",
 "exists_mem_target":
 "theorem exists_mem_target {p : β → Prop} : (∃ y ∈ e.target, p y) ↔ ∃ x ∈ e.source, p (e x) := by\n  rw [← image_source_eq_target, bex_image_iff]\n#align exists_mem_target exists_mem_target\n\n",
 "eq_symm_apply":
 "theorem eq_symm_apply {x : α} {y : β} (hx : x ∈ e.source) (hy : y ∈ e.target) : x = e.symm y ↔ e x = y :=\n  ⟨fun h => by rw [← e.right_inv hy, h], fun h => by rw [← e.left_inv hx, h]⟩\n#align eq_symm_apply eq_symm_apply\n\n",
 "eq_on_source_refl":
 "theorem eq_on_source_refl : e ≈ e :=\n  setoid.refl _\n#align eq_on_source_refl eq_on_source_refl\n\n",
 "eq_on":
 "/-- Two equivalent local equivs coincide on the source -/\ntheorem eq_on_source.eq_on {e e' : LocalEquiv α β} (h : e ≈ e') : e.source.eq_on e e' :=\n  h.2\n#align eq_on_source.eq_on eq_on_source.eq_on\n\n",
 "eq_of_eq_on_source_univ":
 "/-- Two equivalent local equivs are equal when the source and target are univ -/\ntheorem eq_of_eq_on_source_univ (e e' : LocalEquiv α β) (h : e ≈ e') (s : e.source = univ) (t : e.target = univ) :\n    e = e' := by\n  apply LocalEquiv.ext (fun x => _) (fun x => _) h.1\n  · apply h.2\n    rw [s]\n    exact mem_univ _\n  · apply h.symm'.2\n    rw [symm_source, t]\n    exact mem_univ _\n#align eq_of_eq_on_source_univ eq_of_eq_on_source_univ\n\n",
 "disjoint_union_eq_piecewise":
 "theorem disjoint_union_eq_piecewise (e e' : LocalEquiv α β) (hs : Disjoint e.source e'.source)\n    (ht : Disjoint e.target e'.target) [∀ x, decidable (x ∈ e.source)] [∀ y, decidable (y ∈ e.target)] :\n    e.disjoint_union e' hs ht =\n      e.piecewise e' e.source e.target e.is_image_source_target\n        (e'.is_image_source_target_of_disjoint _ hs.symm ht.symm) :=\n  copy_eq _ _ _ _ _ _ _ _ _\n#align disjoint_union_eq_piecewise disjoint_union_eq_piecewise\n\n",
 "diff":
 "protected theorem diff {s' t'} (h : e.is_image s t) (h' : e.is_image s' t') : e.is_image (s \\ s') (t \\ t') :=\n  h.inter h'.compl\n#align diff diff\n\n",
 "copy_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem copy_eq (e : LocalEquiv α β) (f : α → β) (hf : «expr⇑ » e = f) (g : β → α) (hg : «expr⇑ » e.symm = g)\n    (s : set α) (hs : e.source = s) (t : set β) (ht : e.target = t) : e.copy f hf g hg s hs t ht = e :=\n  by\n  substs f g s t\n  cases e\n  rfl\n#align copy_eq copy_eq\n\n",
 "compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\nprotected theorem compl (h : e.is_image s t) : e.is_image («expr ᶜ» s) («expr ᶜ» t) := fun x hx => not_congr (h hx)\n#align compl compl\n\n",
 "coe_trans_symm":
 "@[simp, mfld_simps]\ntheorem coe_trans_symm : ((e.trans e').symm : γ → α) = e.symm ∘ e'.symm :=\n  rfl\n#align coe_trans_symm coe_trans_symm\n\n",
 "coe_trans":
 "@[simp, mfld_simps]\ntheorem coe_trans : (e.trans e' : α → γ) = e' ∘ e :=\n  rfl\n#align coe_trans coe_trans\n\n",
 "coe_symm_mk":
 "@[simp, mfld_simps]\ntheorem coe_symm_mk (f : α → β) (g s t ml mr il ir) : ((local_equiv.mk f g s t ml mr il ir).symm : β → α) = g :=\n  rfl\n#align coe_symm_mk coe_symm_mk\n\n",
 "coe_mk":
 "/-\nCopyright (c) 2019 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n-- register in the simpset `mfld_simps` several lemmas that are often useful when dealing\n-- with manifolds\n@[simp, mfld_simps]\ntheorem coe_mk (f : α → β) (g s t ml mr il ir) : (local_equiv.mk f g s t ml mr il ir : α → β) = f :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "bij_on":
 "protected theorem bij_on : BijOn e e.source e.target :=\n  e.inv_on.bij_on e.maps_to e.symm_maps_to\n#align bij_on bij_on\n\n",
 "apply_mem_iff":
 "theorem apply_mem_iff (h : e.is_image s t) (hx : x ∈ e.source) : e x ∈ t ↔ x ∈ s :=\n  h hx\n#align apply_mem_iff apply_mem_iff\n\n"}