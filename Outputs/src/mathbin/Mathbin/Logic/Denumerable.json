{"to_fun_aux_eq":
 "private theorem to_fun_aux_eq (x : s) : to_fun_aux x = ((Finset.range x).filter (· ∈ s)).card := by\n  rw [to_fun_aux, List.countp_eq_length_filter] <;> rfl\n#align to_fun_aux_eq to_fun_aux_eq\n\n",
 "succ_le_of_lt":
 "theorem succ_le_of_lt {x y : s} (h : y < x) : succ y ≤ x :=\n  have hx : ∃ m, ↑y + m + 1 ∈ s := exists_succ _\n  let ⟨k, hk⟩ := Nat.exists_eq_add_of_lt h\n  have : nat.find hx ≤ k := nat.find_min' _ (hk ▸ x.2)\n  show (y : ℕ) + nat.find hx + 1 ≤ x by rw [hk] <;> exact add_le_add_right (add_le_add_left this _) _\n#align succ_le_of_lt succ_le_of_lt\n\n",
 "sigma_of_nat_val":
 "@[simp]\ntheorem sigma_of_nat_val (n : ℕ) : of_nat (sigma γ) n = ⟨of_nat α (unpair n).1, of_nat (γ _) (unpair n).2⟩ :=\n  option.some.inj <| by rw [← decode_eq_of_nat, decode_sigma_val] <;> simp <;> rfl\n#align sigma_of_nat_val sigma_of_nat_val\n\n",
 "right_inverse_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\nprivate theorem right_inverse_aux : ∀ n, to_fun_aux (of_nat s n) = n\n  | 0 => by\n    rw [to_fun_aux_eq, card_eq_zero, eq_empty_iff_forall_not_mem]\n    rintro n hn\n    rw [mem_filter, of_nat, mem_range] at hn\n    exact bot_le.not_lt (show (⟨n, hn.2⟩ : s) < «expr⊥» from hn.1)\n  | n + 1 => by\n    have ih : to_fun_aux (of_nat s n) = n := right_inverse_aux n\n    have h₁ : (of_nat s n : ℕ) ∉ (range (of_nat s n)).filter (· ∈ s) := by simp\n    have h₂ : (range (succ (of_nat s n))).filter (· ∈ s) = insert (of_nat s n) ((range (of_nat s n)).filter (· ∈ s)) :=\n      by\n      simp only [Finset.ext_iff, mem_insert, mem_range, mem_filter]\n      exact fun m =>\n        ⟨fun h => by\n          simp only [h.2, and_true_iff] <;> exact Or.symm (lt_or_eq_of_le ((@lt_succ_iff_le _ _ _ ⟨m, h.2⟩ _).1 h.1)),\n          fun h =>\n          h.elim (fun h => h.symm ▸ ⟨lt_succ_self _, (of_nat s n).prop⟩) fun h => ⟨h.1.trans (lt_succ_self _), h.2⟩⟩\n    simp only [to_fun_aux_eq, of_nat, range_succ] at ih⊢\n    conv =>\n      rhs\n      rw [← ih, ← card_insert_of_not_mem h₁, ← h₂]\n#align right_inverse_aux right_inverse_aux\n\n",
 "prod_of_nat_val":
 "@[simp]\ntheorem prod_of_nat_val (n : ℕ) : of_nat (α × β) n = (of_nat α (unpair n).1, of_nat β (unpair n).2) := by simp <;> rfl\n#align prod_of_nat_val prod_of_nat_val\n\n",
 "prod_nat_of_nat":
 "@[simp]\ntheorem prod_nat_of_nat : of_nat (ℕ × ℕ) = unpair := by funext <;> simp\n#align prod_nat_of_nat prod_nat_of_nat\n\n",
 "of_nat_surjective_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem of_nat_surjective_aux : ∀ {x : ℕ} (hx : x ∈ s), ∃ n, of_nat s n = ⟨x, hx⟩\n  | x => fun hx =>\n    by\n    let t : list s := ((list.range x).filter fun y => y ∈ s).pmap (fun (y : ℕ) (hy : y ∈ s) => ⟨y, hy⟩) (by simp)\n    have hmt : ∀ {y : s}, y ∈ t ↔ y < ⟨x, hx⟩ := by simp [List.mem_filter, subtype.ext_iff_val, t] <;> intros <;> rfl\n    have wf : ∀ m : s, List.maximum t = m → ↑m < x := fun m hmax => by simpa [hmt] using List.maximum_mem hmax\n    cases' hmax : List.maximum t with m\n    ·\n      exact\n        ⟨0,\n          le_antisymm bot_le\n            (le_of_not_gt fun h =>\n              list.not_mem_nil («expr⊥» : s) <| by rw [← List.maximum_eq_none.1 hmax, hmt] <;> exact h)⟩\n    cases' of_nat_surjective_aux m.2 with a ha\n    exact\n      ⟨a + 1,\n        le_antisymm (by rw [of_nat] <;> exact succ_le_of_lt (by rw [ha] <;> exact wf _ hmax)) <| by\n          rw [of_nat] <;>\n            exact\n              le_succ_of_forall_lt_le fun z hz => by\n                rw [ha] <;> cases m <;> exact List.le_maximum_of_mem (hmt.2 hz) hmax⟩decreasing_by\n  tauto\n#align of_nat_surjective_aux of_nat_surjective_aux\n\n",
 "of_nat_surjective":
 "theorem of_nat_surjective : surjective (of_nat s) := fun ⟨x, hx⟩ => of_nat_surjective_aux hx\n#align of_nat_surjective of_nat_surjective\n\n",
 "of_nat_range":
 "@[simp]\ntheorem of_nat_range : Set.range (of_nat s) = Set.univ :=\n  of_nat_surjective.range_eq\n#align of_nat_range of_nat_range\n\n",
 "of_nat_of_decode":
 "@[simp]\ntheorem of_nat_of_decode {n b} (h : decode α n = some b) : of_nat α n = b :=\n  option.some.inj <| (decode_eq_of_nat _ _).symm.trans h\n#align of_nat_of_decode of_nat_of_decode\n\n",
 "of_nat_nat":
 "@[simp]\ntheorem of_nat_nat (n) : of_nat ℕ n = n :=\n  rfl\n#align of_nat_nat of_nat_nat\n\n",
 "of_nat_encode":
 "@[simp]\ntheorem of_nat_encode (a) : of_nat α (encode a) = a :=\n  of_nat_of_decode (encodek _)\n#align of_nat_encode of_nat_encode\n\n",
 "of_equiv_of_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n-- See Note [lower instance priority]\n@[simp]\ntheorem of_equiv_of_nat (α) {β} [denumerable α] (e : «expr ≃ » β α) (n) :\n    @of_nat β (of_equiv _ e) n = e.symm (of_nat α n) := by apply of_nat_of_decode <;> show option.map _ _ = _ <;> simp\n#align of_equiv_of_nat of_equiv_of_nat\n\n",
 "nonempty_denumerable":
 "/-- See also `nonempty_encodable`, `nonempty_fintype`. -/\ntheorem nonempty_denumerable (α : Type _) [countable α] [Infinite α] : nonempty (denumerable α) :=\n  (nonempty_encodable α).map fun h => denumerable.of_encodable_of_infinite _\n#align nonempty_denumerable nonempty_denumerable\n\n",
 "lt_succ_self":
 "theorem lt_succ_self (x : s) : x < succ x :=\n  calc\n    (x : ℕ) ≤ x + _ := le_self_add\n    _ < succ x := nat.lt_succ_self (x + _)\n    \n#align lt_succ_self lt_succ_self\n\n",
 "lt_succ_iff_le":
 "theorem lt_succ_iff_le {x y : s} : x < succ y ↔ x ≤ y :=\n  ⟨fun h => le_of_not_gt fun h' => not_le_of_gt h (succ_le_of_lt h'), fun h => lt_of_le_of_lt h (lt_succ_self _)⟩\n#align lt_succ_iff_le lt_succ_iff_le\n\n",
 "le_succ_of_forall_lt_le":
 "theorem le_succ_of_forall_lt_le {x y : s} (h : ∀ z < x, z ≤ y) : x ≤ succ y :=\n  have hx : ∃ m, ↑y + m + 1 ∈ s := exists_succ _\n  show ↑x ≤ ↑y + nat.find hx + 1 from\n    le_of_not_gt fun hxy =>\n      (h ⟨_, nat.find_spec hx⟩ hxy).not_lt <|\n        calc\n          ↑y ≤ ↑y + nat.find hx := le_add_of_nonneg_right (nat.zero_le _)\n          _ < ↑y + nat.find hx + 1 := nat.lt_succ_self _\n          \n#align le_succ_of_forall_lt_le le_succ_of_forall_lt_le\n\n",
 "exists_succ":
 "theorem exists_succ (x : s) : ∃ n, ↑x + n + 1 ∈ s :=\n  by_contradiction fun h =>\n    have : ∀ (a : ℕ) (ha : a ∈ s), a < succ x := fun a ha =>\n      lt_of_not_ge fun hax => h ⟨a - (x + 1), by rwa [add_right_comm, add_tsub_cancel_of_le hax]⟩\n    fintype.false\n      ⟨(((Multiset.range (succ x)).filter (· ∈ s)).pmap (fun (y : ℕ) (hy : y ∈ s) => subtype.mk y hy)\n            (by simp [-Multiset.range_succ])).to_finset,\n        by simpa [subtype.ext_iff_val, Multiset.mem_filter, -Multiset.range_succ] ⟩\n#align exists_succ exists_succ\n\n",
 "encode_of_nat":
 "@[simp]\ntheorem encode_of_nat (n) : encode (of_nat α n) = n :=\n  by\n  let ⟨a, h, e⟩ := decode_inv n\n  rwa [of_nat_of_decode h]\n#align encode_of_nat encode_of_nat\n\n",
 "decode_is_some":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem decode_is_some (α) [denumerable α] (n : ℕ) : (decode α n).is_some :=\n  Option.isSome_iff_exists.2 <| (decode_inv n).imp fun a => Exists.fst\n#align decode_is_some decode_is_some\n\n",
 "decode_eq_of_nat":
 "@[simp]\ntheorem decode_eq_of_nat (α) [denumerable α] (n : ℕ) : decode α n = some (of_nat α n) :=\n  Option.eq_some_of_isSome _\n#align decode_eq_of_nat decode_eq_of_nat\n\n",
 "coe_comp_of_nat_range":
 "@[simp]\ntheorem coe_comp_of_nat_range : Set.range (coe ∘ of_nat s : ℕ → ℕ) = s := by\n  rw [Set.range_comp coe, of_nat_range, Set.image_univ, Subtype.range_coe]\n#align coe_comp_of_nat_range coe_comp_of_nat_range\n\n"}