{"unique_subtype_iff_exists_unique":
 "#print unique_subtype_iff_exists_unique /-\ntheorem unique_subtype_iff_exists_unique {α} (p : α → Prop) : Nonempty (Unique (Subtype p)) ↔ ∃! a, p a :=\n  ⟨fun ⟨u⟩ => ⟨u.default.1, u.default.2, fun a h => congr_arg Subtype.val (u.uniq ⟨a, h⟩)⟩, fun ⟨a, ha, he⟩ =>\n    ⟨⟨⟨⟨a, ha⟩⟩, fun ⟨b, hb⟩ => by\n        congr\n        exact he b hb⟩⟩⟩\n#align unique_subtype_iff_exists_unique unique_subtype_iff_exists_unique\n-/\n\n",
 "unique_iff_subsingleton_and_nonempty":
 "#print unique_iff_subsingleton_and_nonempty /-\ntheorem unique_iff_subsingleton_and_nonempty (α : Sort u) : Nonempty (Unique α) ↔ subsingleton α ∧ Nonempty α :=\n  ⟨fun ⟨u⟩ => by constructor <;> exact inferInstance, fun ⟨hs, hn⟩ =>\n    ⟨by\n      skip\n      inhabit α\n      exact Unique.mk' α⟩⟩\n#align unique_iff_subsingleton_and_nonempty unique_iff_subsingleton_and_nonempty\n-/\n\n",
 "unique_iff_exists_unique":
 "#print unique_iff_exists_unique /-\n/-\nCopyright (c) 2019 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\ntheorem unique_iff_exists_unique (α : Sort u) : Nonempty (Unique α) ↔ ∃! a : α, True :=\n  ⟨fun ⟨u⟩ => ⟨u.default, trivial, fun a _ => u.uniq a⟩, fun ⟨a, _, h⟩ => ⟨⟨⟨a⟩, fun _ => h _ trivial⟩⟩⟩\n#align unique_iff_exists_unique unique_iff_exists_unique\n-/\n\n",
 "subsingleton_unique'":
 "@[ext]\nprotected theorem subsingleton_unique' : ∀ h₁ h₂ : Unique α, h₁ = h₂\n  | ⟨⟨x⟩, h⟩, ⟨⟨y⟩, _⟩ => by congr <;> rw [h x, h y]\n#align subsingleton_unique' subsingleton_unique'\n\n",
 "subsingleton_iff_is_empty":
 "/-- `option α` is a `subsingleton` if and only if `α` is empty. -/\ntheorem subsingleton_iff_is_empty {α} : subsingleton (Option α) ↔ IsEmpty α :=\n  ⟨fun h => ⟨fun x => option.no_confusion <| @subsingleton.elim _ h x none⟩, fun h =>\n    ⟨fun x y => option.cases_on x (option.cases_on y rfl fun x => h.elim x) fun x => h.elim x⟩⟩\n#align subsingleton_iff_is_empty subsingleton_iff_is_empty\n\n",
 "subsingleton":
 "/-- If the domain of a surjective function is a subsingleton, then the codomain is a subsingleton as\nwell. -/\nprotected theorem surjective.subsingleton [subsingleton α] (hf : surjective f) : subsingleton β :=\n  ⟨hf.forall₂.2 fun x y => congr_arg f <| subsingleton.elim x y⟩\n#align surjective.subsingleton surjective.subsingleton\n\n",
 "heq_const_of_unique":
 "#print heq_const_of_unique /-\ntheorem heq_const_of_unique [Unique α] {β : α → Sort v} (f : ∀ a, β a) : HEq f (Function.const α (f default)) :=\n  Function.hfunext rfl fun i _ _ => by rw [subsingleton.elim i default]\n#align heq_const_of_unique heq_const_of_unique\n-/\n\n",
 "forall_iff":
 "-- see Note [lower instance priority]\ntheorem forall_iff {p : α → Prop} : (∀ a, p a) ↔ p default :=\n  ⟨fun h => h _, fun h x => by rwa [Unique.eq_default x]⟩\n#align forall_iff forall_iff\n\n",
 "exists_iff":
 "theorem exists_iff {p : α → Prop} : Exists p ↔ p default :=\n  ⟨fun ⟨a, ha⟩ => eq_default a ▸ ha, exists.intro default⟩\n#align exists_iff exists_iff\n\n",
 "eq_zero":
 "#print Fin.eq_zero /-\ntheorem Fin.eq_zero : ∀ n : Fin 1, n = 0\n  | ⟨n, hn⟩ => fin.eq_of_veq (nat.eq_zero_of_le_zero (nat.le_of_lt_succ hn))\n#align fin.eq_zero Fin.eq_zero\n-/\n\n",
 "eq_default":
 "-- see Note [lower instance priority]\ntheorem eq_default (a : α) : a = default :=\n  uniq _ a\n#align eq_default eq_default\n\n",
 "eq_const_of_unique":
 "#print eq_const_of_unique /-\ntheorem eq_const_of_unique [Unique α] (f : α → β) : f = Function.const α (f default) :=\n  by\n  ext x\n  rw [subsingleton.elim x default]\n#align eq_const_of_unique eq_const_of_unique\n-/\n\n",
 "default_eq_zero":
 "#print Fin.default_eq_zero /-\n@[simp]\ntheorem Fin.default_eq_zero (n : ℕ) : (default : Fin n.succ) = 0 :=\n  rfl\n#align fin.default_eq_zero Fin.default_eq_zero\n-/\n\n",
 "default_eq_unit":
 "#print PUnit.default_eq_unit /-\n@[simp]\ntheorem PUnit.default_eq_unit : (default : PUnit) = PUnit.unit :=\n  rfl\n#align punit.default_eq_star PUnit.default_eq_unit\n-/\n\n",
 "default_eq":
 "theorem default_eq (a : α) : default = a :=\n  (uniq _ a).symm\n#align default_eq default_eq\n\n",
 "default_def":
 "#print Pi.default_def /-\n@[simp]\ntheorem Pi.default_def {β : α → Sort v} [∀ a, Inhabited (β a)] :\n    @default (∀ a, β a) _ = fun a : α => @default (β a) _ :=\n  rfl\n#align pi.default_def Pi.default_def\n-/\n\n",
 "default_apply":
 "#print Pi.default_apply /-\ntheorem Pi.default_apply {β : α → Sort v} [∀ a, Inhabited (β a)] (a : α) : @default (∀ a, β a) _ a = default :=\n  rfl\n#align pi.default_apply Pi.default_apply\n-/\n\n",
 "bijective":
 "#print Unique.bijective /-\ntheorem Unique.bijective {A B} [Unique A] [Unique B] {f : A → B} : function.bijective f :=\n  by\n  rw [Function.bijective_iff_has_inverse]\n  refine' ⟨default, _, _⟩ <;> intro x <;> simp\n#align unique.bijective Unique.bijective\n-/\n\n"}