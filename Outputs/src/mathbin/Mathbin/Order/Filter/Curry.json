{"eventually_curry_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/-\nCopyright (c) 2022 Kevin H. Wilson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin H. Wilson\n-/\ntheorem eventually_curry_iff {f : filter α} {g : filter β} {p : α × β → Prop} :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" (f.curry g)\n        (p x) ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f\n        («expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" g\n          (p (x, y))) :=\n  iff.rfl\n#align eventually_curry_iff eventually_curry_iff\n\n",
 "curry_le_prod":
 "theorem curry_le_prod {f : filter α} {g : filter β} : f.curry g ≤ f.prod g :=\n  by\n  intro u hu\n  rw [← eventually_mem_set] at hu⊢\n  rw [eventually_curry_iff]\n  exact hu.curry\n#align curry_le_prod curry_le_prod\n\n",
 "curry":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\ntheorem tendsto.curry {f : α → β → γ} {la : filter α} {lb : filter β} {lc : filter γ} :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" la\n        (tendsto (fun b : β => f a b) lb lc) →\n      tendsto (uncurry f) (la.curry lb) lc :=\n  by\n  intro h\n  rw [tendsto_def]\n  simp only [curry, filter.mem_mk, Set.mem_setOf_eq, Set.mem_preimage]\n  simp_rw [tendsto_def] at h\n  refine' fun s hs => h.mono fun a ha => eventually_iff.mpr _\n  simpa [function.has_uncurry.uncurry, Set.preimage] using ha s hs\n#align tendsto.curry tendsto.curry\n\n"}