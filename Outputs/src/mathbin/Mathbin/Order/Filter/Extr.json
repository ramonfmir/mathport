{"tendsto_principal_Iic":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n#print IsMaxFilter.tendsto_principal_Iic /-\ntheorem IsMaxFilter.tendsto_principal_Iic (h : IsMaxFilter f l a) : Tendsto f l (filter.principal <| Iic (f a)) :=\n  tendsto_principal.2 h\n#align is_max_filter.tendsto_principal_Iic IsMaxFilter.tendsto_principal_Iic\n-/\n\n",
 "tendsto_principal_Ici":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n#print IsMinFilter.tendsto_principal_Ici /-\ntheorem IsMinFilter.tendsto_principal_Ici (h : IsMinFilter f l a) : Tendsto f l (filter.principal <| Ici (f a)) :=\n  tendsto_principal.2 h\n#align is_min_filter.tendsto_principal_Ici IsMinFilter.tendsto_principal_Ici\n-/\n\n",
 "supᵢ_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n#print IsMaxOn.supᵢ_eq /-\ntheorem IsMaxOn.supᵢ_eq (hx₀ : x₀ ∈ s) (h : IsMaxOn f s x₀) :\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f x) = f x₀ :=\n  haveI : Nonempty s := ⟨⟨x₀, hx₀⟩⟩\n  csupᵢ_eq_of_forall_le_of_forall_lt_exists_gt (fun x => h x.prop) fun w hw => ⟨⟨x₀, hx₀⟩, hw⟩\n#align is_max_on.supr_eq IsMaxOn.supᵢ_eq\n-/\n\n",
 "sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print IsMaxOn.sup /-\ntheorem IsMaxOn.sup (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => «expr ⊔ » (f x) (g x)) s a :=\n  hf.sup hg\n#align is_max_on.sup IsMaxOn.sup\n-/\n\n",
 "sub":
 "#print IsMaxOn.sub /-\ntheorem IsMaxOn.sub (hf : IsMaxOn f s a) (hg : IsMinOn g s a) : IsMaxOn (fun x => f x - g x) s a := by\n  simpa only [sub_eq_add_neg] using hf.add hg.neg\n#align is_max_on.sub IsMaxOn.sub\n-/\n\n",
 "on_subset":
 "#print IsExtrOn.on_subset /-\ntheorem IsExtrOn.on_subset (hf : IsExtrOn f t a) (h : s ⊆ t) : IsExtrOn f s a :=\n  hf.filter_mono <| principal_mono.2 h\n#align is_extr_on.on_subset IsExtrOn.on_subset\n-/\n\n",
 "on_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print IsExtrOn.on_preimage /-\ntheorem IsExtrOn.on_preimage (g : δ → α) {b : δ} (hf : IsExtrOn f s (g b)) : IsExtrOn (f ∘ g) («expr ⁻¹' » g s) b :=\n  hf.elim (fun hf => (hf.on_preimage g).is_extr) fun hf => (hf.on_preimage g).is_extr\n#align is_extr_on.on_preimage IsExtrOn.on_preimage\n-/\n\n",
 "neg":
 "#print IsExtrOn.neg /-\ntheorem IsExtrOn.neg (hf : IsExtrOn f s a) : IsExtrOn (fun x => -f x) s a :=\n  hf.elim (fun hf => hf.neg.is_extr) fun hf => hf.neg.is_extr\n#align is_extr_on.neg IsExtrOn.neg\n-/\n\n",
 "min":
 "#print IsMaxOn.min /-\ntheorem IsMaxOn.min (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => min (f x) (g x)) s a :=\n  hf.min hg\n#align is_max_on.min IsMaxOn.min\n-/\n\n",
 "max":
 "#print IsMaxOn.max /-\ntheorem IsMaxOn.max (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => max (f x) (g x)) s a :=\n  hf.max hg\n#align is_max_on.max IsMaxOn.max\n-/\n\n",
 "isMinOn_univ_iff":
 "#print isMinOn_univ_iff /-\ntheorem isMinOn_univ_iff : IsMinOn f univ a ↔ ∀ x, f a ≤ f x :=\n  univ_subset_iff.trans eq_univ_iff_forall\n#align is_min_on_univ_iff isMinOn_univ_iff\n-/\n\n",
 "isMinOn_iff":
 "#print isMinOn_iff /-\ntheorem isMinOn_iff : IsMinOn f s a ↔ ∀ x ∈ s, f a ≤ f x :=\n  iff.rfl\n#align is_min_on_iff isMinOn_iff\n-/\n\n",
 "isMinOn_dual_iff":
 "#print isMinOn_dual_iff /-\ntheorem isMinOn_dual_iff : IsMinOn (toDual ∘ f) s a ↔ IsMaxOn f s a :=\n  iff.rfl\n#align is_min_on_dual_iff isMinOn_dual_iff\n-/\n\n",
 "isMinOn_const":
 "#print isMinOn_const /-\ntheorem isMinOn_const {b : β} : IsMinOn (fun _ => b) s a :=\n  isMinFilter_const\n#align is_min_on_const isMinOn_const\n-/\n\n",
 "isMinFilter_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n#print Filter.EventuallyEq.isMinFilter_iff /-\ntheorem Filter.EventuallyEq.isMinFilter_iff {α β : Type _} [preorder β] {f g : α → β} {a : α} {l : Filter α}\n    (heq : «expr =ᶠ[ ] » f l g) (hfga : f a = g a) : IsMinFilter f l a ↔ IsMinFilter g l a :=\n  ⟨fun h => h.congr HEq hfga, fun h => h.congr HEq.symm hfga.symm⟩\n#align filter.eventually_eq.is_min_filter_iff Filter.EventuallyEq.isMinFilter_iff\n-/\n\n",
 "isMinFilter_dual_iff":
 "#print isMinFilter_dual_iff /-\ntheorem isMinFilter_dual_iff : IsMinFilter (toDual ∘ f) l a ↔ IsMaxFilter f l a :=\n  iff.rfl\n#align is_min_filter_dual_iff isMinFilter_dual_iff\n-/\n\n",
 "isMinFilter_const":
 "#print isMinFilter_const /-\ntheorem isMinFilter_const {b : β} : IsMinFilter (fun _ => b) l a :=\n  univ_mem' fun _ => le_rfl\n#align is_min_filter_const isMinFilter_const\n-/\n\n",
 "isMinFilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\n#print Filter.EventuallyLE.isMinFilter /-\ntheorem Filter.EventuallyLE.isMinFilter {α β : Type _} [preorder β] {f g : α → β} {a : α} {l : Filter α}\n    (hle : «expr ≤ᶠ[ ] » f l g) (hfga : f a = g a) (h : IsMinFilter f l a) : IsMinFilter g l a :=\n  @Filter.EventuallyLE.isMaxFilter _ («expr ᵒᵈ» β) _ _ _ _ _ hle hfga h\n#align filter.eventually_le.is_min_filter Filter.EventuallyLE.isMinFilter\n-/\n\n",
 "isMaxOn_univ_iff":
 "#print isMaxOn_univ_iff /-\ntheorem isMaxOn_univ_iff : IsMaxOn f univ a ↔ ∀ x, f x ≤ f a :=\n  univ_subset_iff.trans eq_univ_iff_forall\n#align is_max_on_univ_iff isMaxOn_univ_iff\n-/\n\n",
 "isMaxOn_iff":
 "#print isMaxOn_iff /-\ntheorem isMaxOn_iff : IsMaxOn f s a ↔ ∀ x ∈ s, f x ≤ f a :=\n  iff.rfl\n#align is_max_on_iff isMaxOn_iff\n-/\n\n",
 "isMaxOn_dual_iff":
 "#print isMaxOn_dual_iff /-\ntheorem isMaxOn_dual_iff : IsMaxOn (toDual ∘ f) s a ↔ IsMinOn f s a :=\n  iff.rfl\n#align is_max_on_dual_iff isMaxOn_dual_iff\n-/\n\n",
 "isMaxOn_const":
 "#print isMaxOn_const /-\ntheorem isMaxOn_const {b : β} : IsMaxOn (fun _ => b) s a :=\n  isMaxFilter_const\n#align is_max_on_const isMaxOn_const\n-/\n\n",
 "isMaxFilter_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n#print Filter.EventuallyEq.isMaxFilter_iff /-\ntheorem Filter.EventuallyEq.isMaxFilter_iff {α β : Type _} [preorder β] {f g : α → β} {a : α} {l : Filter α}\n    (heq : «expr =ᶠ[ ] » f l g) (hfga : f a = g a) : IsMaxFilter f l a ↔ IsMaxFilter g l a :=\n  ⟨fun h => h.congr HEq hfga, fun h => h.congr HEq.symm hfga.symm⟩\n#align filter.eventually_eq.is_max_filter_iff Filter.EventuallyEq.isMaxFilter_iff\n-/\n\n",
 "isMaxFilter_dual_iff":
 "#print isMaxFilter_dual_iff /-\ntheorem isMaxFilter_dual_iff : IsMaxFilter (toDual ∘ f) l a ↔ IsMinFilter f l a :=\n  iff.rfl\n#align is_max_filter_dual_iff isMaxFilter_dual_iff\n-/\n\n",
 "isMaxFilter_const":
 "#print isMaxFilter_const /-\ntheorem isMaxFilter_const {b : β} : IsMaxFilter (fun _ => b) l a :=\n  univ_mem' fun _ => le_rfl\n#align is_max_filter_const isMaxFilter_const\n-/\n\n",
 "isMaxFilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\n#print Filter.EventuallyLE.isMaxFilter /-\ntheorem Filter.EventuallyLE.isMaxFilter {α β : Type _} [preorder β] {f g : α → β} {a : α} {l : Filter α}\n    (hle : «expr ≤ᶠ[ ] » g l f) (hfga : f a = g a) (h : IsMaxFilter f l a) : IsMaxFilter g l a :=\n  by\n  refine' hle.mp (h.mono fun x hf hgf => _)\n  rw [← hfga]\n  exact le_trans hgf hf\n#align filter.eventually_le.is_max_filter Filter.EventuallyLE.isMaxFilter\n-/\n\n",
 "isExtrOn_dual_iff":
 "#print isExtrOn_dual_iff /-\ntheorem isExtrOn_dual_iff : IsExtrOn (toDual ∘ f) s a ↔ IsExtrOn f s a :=\n  or_comm' _ _\n#align is_extr_on_dual_iff isExtrOn_dual_iff\n-/\n\n",
 "isExtrOn_const":
 "#print isExtrOn_const /-\ntheorem isExtrOn_const {b : β} : IsExtrOn (fun _ => b) s a :=\n  isExtrFilter_const\n#align is_extr_on_const isExtrOn_const\n-/\n\n",
 "isExtrFilter_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n#print Filter.EventuallyEq.isExtrFilter_iff /-\ntheorem Filter.EventuallyEq.isExtrFilter_iff {α β : Type _} [preorder β] {f g : α → β} {a : α} {l : Filter α}\n    (heq : «expr =ᶠ[ ] » f l g) (hfga : f a = g a) : IsExtrFilter f l a ↔ IsExtrFilter g l a :=\n  ⟨fun h => h.congr HEq hfga, fun h => h.congr HEq.symm hfga.symm⟩\n#align filter.eventually_eq.is_extr_filter_iff Filter.EventuallyEq.isExtrFilter_iff\n-/\n\n",
 "isExtrFilter_dual_iff":
 "#print isExtrFilter_dual_iff /-\ntheorem isExtrFilter_dual_iff : IsExtrFilter (toDual ∘ f) l a ↔ IsExtrFilter f l a :=\n  or_comm' _ _\n#align is_extr_filter_dual_iff isExtrFilter_dual_iff\n-/\n\n",
 "isExtrFilter_const":
 "#print isExtrFilter_const /-\ntheorem isExtrFilter_const {b : β} : IsExtrFilter (fun _ => b) l a :=\n  isMinFilter_const.is_extr\n#align is_extr_filter_const isExtrFilter_const\n-/\n\n",
 "isExtr":
 "#print IsMaxOn.isExtr /-\ntheorem IsMaxOn.isExtr (h : IsMaxOn f s a) : IsExtrOn f s a :=\n  h.is_extr\n#align is_max_on.is_extr IsMaxOn.isExtr\n-/\n\n",
 "inter":
 "#print IsExtrOn.inter /-\ntheorem IsExtrOn.inter (hf : IsExtrOn f s a) (t) : IsExtrOn f (s ∩ t) a :=\n  hf.on_subset (inter_subset_left s t)\n#align is_extr_on.inter IsExtrOn.inter\n-/\n\n",
 "infᵢ_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n#print IsMinOn.infᵢ_eq /-\ntheorem IsMinOn.infᵢ_eq (hx₀ : x₀ ∈ s) (h : IsMinOn f s x₀) :\n    «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f x) = f x₀ :=\n  @IsMaxOn.supᵢ_eq («expr ᵒᵈ» α) β _ _ _ _ hx₀ h\n#align is_min_on.infi_eq IsMinOn.infᵢ_eq\n-/\n\n",
 "inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print IsMaxOn.inf /-\ntheorem IsMaxOn.inf (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => «expr ⊓ » (f x) (g x)) s a :=\n  hf.inf hg\n#align is_max_on.inf IsMaxOn.inf\n-/\n\n",
 "filter_mono":
 "#print IsExtrFilter.filter_mono /-\ntheorem IsExtrFilter.filter_mono (h : IsExtrFilter f l a) (hl : l' ≤ l) : IsExtrFilter f l' a :=\n  h.elim (fun h => (h.filter_mono hl).is_extr) fun h => (h.filter_mono hl).is_extr\n#align is_extr_filter.filter_mono IsExtrFilter.filter_mono\n-/\n\n",
 "filter_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print IsExtrFilter.filter_inf /-\ntheorem IsExtrFilter.filter_inf (h : IsExtrFilter f l a) (l') : IsExtrFilter f («expr ⊓ » l l') a :=\n  h.filter_mono inf_le_left\n#align is_extr_filter.filter_inf IsExtrFilter.filter_inf\n-/\n\n",
 "elim":
 "#print IsExtrOn.elim /-\n/-\nCopyright (c) 2019 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\ntheorem IsExtrOn.elim {p : Prop} : IsExtrOn f s a → (IsMinOn f s a → p) → (IsMaxOn f s a → p) → p :=\n  or.elim\n#align is_extr_on.elim IsExtrOn.elim\n-/\n\n",
 "congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n#print IsExtrFilter.congr /-\ntheorem IsExtrFilter.congr {α β : Type _} [preorder β] {f g : α → β} {a : α} {l : Filter α} (h : IsExtrFilter f l a)\n    (heq : «expr =ᶠ[ ] » f l g) (hfga : f a = g a) : IsExtrFilter g l a :=\n  by\n  rw [IsExtrFilter] at *\n  rwa [← heq.is_max_filter_iff hfga, ← heq.is_min_filter_iff hfga]\n#align is_extr_filter.congr IsExtrFilter.congr\n-/\n\n",
 "comp_tendsto":
 "#print IsExtrFilter.comp_tendsto /-\ntheorem IsExtrFilter.comp_tendsto {g : δ → α} {l' : Filter δ} {b : δ} (hf : IsExtrFilter f l (g b))\n    (hg : Tendsto g l' l) : IsExtrFilter (f ∘ g) l' b :=\n  hf.elim (fun hf => (hf.comp_tendsto hg).is_extr) fun hf => (hf.comp_tendsto hg).is_extr\n#align is_extr_filter.comp_tendsto IsExtrFilter.comp_tendsto\n-/\n\n",
 "comp_mono":
 "#print IsExtrOn.comp_mono /-\ntheorem IsExtrOn.comp_mono (hf : IsExtrOn f s a) {g : β → γ} (hg : Monotone g) : IsExtrOn (g ∘ f) s a :=\n  hf.comp_mono hg\n#align is_extr_on.comp_mono IsExtrOn.comp_mono\n-/\n\n",
 "comp_mapsTo":
 "#print IsExtrOn.comp_mapsTo /-\ntheorem IsExtrOn.comp_mapsTo {t : Set δ} {g : δ → α} {b : δ} (hf : IsExtrOn f s a) (hg : MapsTo g t s) (ha : g b = a) :\n    IsExtrOn (f ∘ g) t b :=\n  hf.elim (fun h => or.inl <| h.comp_maps_to hg ha) fun h => or.inr <| h.comp_maps_to hg ha\n#align is_extr_on.comp_maps_to IsExtrOn.comp_mapsTo\n-/\n\n",
 "comp_antitone":
 "#print IsExtrOn.comp_antitone /-\ntheorem IsExtrOn.comp_antitone (hf : IsExtrOn f s a) {g : β → γ} (hg : Antitone g) : IsExtrOn (g ∘ f) s a :=\n  hf.comp_antitone hg\n#align is_extr_on.comp_antitone IsExtrOn.comp_antitone\n-/\n\n",
 "bicomp_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⇒ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⇒ » -/\n#print IsMaxOn.bicomp_mono /-\ntheorem IsMaxOn.bicomp_mono [preorder δ] {op : β → γ → δ} (hop : («expr ⇒ » (· ≤ ·) («expr ⇒ » (· ≤ ·) (· ≤ ·))) op op)\n    (hf : IsMaxOn f s a) {g : α → γ} (hg : IsMaxOn g s a) : IsMaxOn (fun x => op (f x) (g x)) s a :=\n  hf.bicomp_mono hop hg\n#align is_max_on.bicomp_mono IsMaxOn.bicomp_mono\n-/\n\n",
 "add":
 "#print IsMaxOn.add /-\ntheorem IsMaxOn.add (hf : IsMaxOn f s a) (hg : IsMaxOn g s a) : IsMaxOn (fun x => f x + g x) s a :=\n  hf.add hg\n#align is_max_on.add IsMaxOn.add\n-/\n\n"}