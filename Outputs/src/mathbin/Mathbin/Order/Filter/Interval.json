{"uIcc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem tendsto.uIcc {l : Filter α} [TendstoIxxClass Icc l l] {f g : β → α} {lb : Filter β} (hf : Tendsto f lb l)\n    (hg : Tendsto g lb l) : Tendsto (fun x => set.uIcc (f x) (g x)) lb l.small_sets :=\n  tendsto_Ixx_class.tendsto_Ixx.comp <| hf.prod_mk hg\n#align tendsto.uIcc tendsto.uIcc\n\n",
 "tendsto_Ixx_class_principal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (x y «expr ∈ » s) -/\ntheorem tendsto_Ixx_class_principal {s t : Set α} {Ixx : α → α → Set α} :\n    TendstoIxxClass Ixx ((filter.principal) s) ((filter.principal) t) ↔\n      ∀ (x) (_ : x ∈ s) (y) (_ : y ∈ s), Ixx x y ⊆ t :=\n  iff.trans ⟨fun h => h.1, fun h => ⟨h⟩⟩ <| by\n    simp only [small_sets_principal, prod_principal_principal, tendsto_principal_principal, forall_prod_set,\n      mem_powerset_iff, mem_principal]\n#align tendsto_Ixx_class_principal tendsto_Ixx_class_principal\n\n",
 "tendsto_Ixx_class_of_subset":
 "theorem tendsto_Ixx_class_of_subset {l₁ l₂ : Filter α} {Ixx Ixx' : α → α → Set α} (h : ∀ a b, Ixx a b ⊆ Ixx' a b)\n    [h' : TendstoIxxClass Ixx' l₁ l₂] : TendstoIxxClass Ixx l₁ l₂ :=\n  ⟨h'.1.small_sets_mono <| eventually_of_forall <| Prod.forall.2 h⟩\n#align tendsto_Ixx_class_of_subset tendsto_Ixx_class_of_subset\n\n",
 "tendsto_Ixx_class_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem tendsto_Ixx_class_inf {l₁ l₁' l₂ l₂' : Filter α} {Ixx} [h : TendstoIxxClass Ixx l₁ l₂]\n    [h' : TendstoIxxClass Ixx l₁' l₂'] : TendstoIxxClass Ixx («expr ⊓ » l₁ l₁') («expr ⊓ » l₂ l₂') :=\n  ⟨by simpa only [prod_inf_prod, small_sets_inf] using h.1.inf h'.1⟩\n#align tendsto_Ixx_class_inf tendsto_Ixx_class_inf\n\n",
 "tendsto_Ixx_class":
 "theorem has_basis.tendsto_Ixx_class {ι : Type _} {p : ι → Prop} {s} {l : Filter α} (hl : l.has_basis p s)\n    {Ixx : α → α → Set α} (H : ∀ i, p i → ∀ x ∈ s i, ∀ y ∈ s i, Ixx x y ⊆ s i) : TendstoIxxClass Ixx l l :=\n  ⟨(hl.prod_self.tendsto_iff hl.small_sets).2 fun i hi => ⟨i, hi, fun x hx => H i hi _ hx.1 _ hx.2⟩⟩\n#align has_basis.tendsto_Ixx_class has_basis.tendsto_Ixx_class\n\n",
 "Ioo":
 "theorem tendsto.Ioo {l₁ l₂ : Filter α} [TendstoIxxClass Ioo l₁ l₂] {lb : Filter β} {u₁ u₂ : β → α}\n    (h₁ : Tendsto u₁ lb l₁) (h₂ : Tendsto u₂ lb l₁) : Tendsto (fun x => Ioo (u₁ x) (u₂ x)) lb l₂.small_sets :=\n  tendsto_Ixx_class.tendsto_Ixx.comp <| h₁.prod_mk h₂\n#align tendsto.Ioo tendsto.Ioo\n\n",
 "Ioc":
 "theorem tendsto.Ioc {l₁ l₂ : Filter α} [TendstoIxxClass Ioc l₁ l₂] {lb : Filter β} {u₁ u₂ : β → α}\n    (h₁ : Tendsto u₁ lb l₁) (h₂ : Tendsto u₂ lb l₁) : Tendsto (fun x => Ioc (u₁ x) (u₂ x)) lb l₂.small_sets :=\n  tendsto_Ixx_class.tendsto_Ixx.comp <| h₁.prod_mk h₂\n#align tendsto.Ioc tendsto.Ioc\n\n",
 "Ico":
 "theorem tendsto.Ico {l₁ l₂ : Filter α} [TendstoIxxClass Ico l₁ l₂] {lb : Filter β} {u₁ u₂ : β → α}\n    (h₁ : Tendsto u₁ lb l₁) (h₂ : Tendsto u₂ lb l₁) : Tendsto (fun x => Ico (u₁ x) (u₂ x)) lb l₂.small_sets :=\n  tendsto_Ixx_class.tendsto_Ixx.comp <| h₁.prod_mk h₂\n#align tendsto.Ico tendsto.Ico\n\n",
 "Icc":
 "/-\nCopyright (c) 2020 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem tendsto.Icc {l₁ l₂ : Filter α} [TendstoIxxClass Icc l₁ l₂] {lb : Filter β} {u₁ u₂ : β → α}\n    (h₁ : Tendsto u₁ lb l₁) (h₂ : Tendsto u₂ lb l₁) : Tendsto (fun x => Icc (u₁ x) (u₂ x)) lb l₂.small_sets :=\n  tendsto_Ixx_class.tendsto_Ixx.comp <| h₁.prod_mk h₂\n#align tendsto.Icc tendsto.Icc\n\n"}