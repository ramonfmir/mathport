{"union_mem_iff":
 "@[simp]\ntheorem union_mem_iff : s ∪ t ∈ f ↔ s ∈ f ∨ t ∈ f := by\n  simp only [← mem_coe, ← le_principal_iff, ← sup_principal, le_sup_iff]\n#align union_mem_iff union_mem_iff\n\n",
 "tendsto_iff_ultrafilter":
 "/-- The `tendsto` relation can be checked on ultrafilters. -/\ntheorem tendsto_iff_ultrafilter (f : α → β) (l₁ : Filter α) (l₂ : Filter β) :\n    Tendsto f l₁ l₂ ↔ ∀ g : Ultrafilter α, ↑g ≤ l₁ → Tendsto f g l₂ := by\n  simpa only [tendsto_iff_comap] using le_iff_ultrafilter\n#align tendsto_iff_ultrafilter tendsto_iff_ultrafilter\n\n",
 "supr_ultrafilter_le_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- A filter equals the intersection of all the ultrafilters which contain it. -/\ntheorem supr_ultrafilter_le_eq (f : Filter α) :\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (g : Filter α) =\n      f :=\n  eq_of_forall_ge_iff fun f' => by simp only [supᵢ_le_iff, ← le_iff_ultrafilter]\n#align supr_ultrafilter_le_eq supr_ultrafilter_le_eq\n\n",
 "pure_injective":
 "theorem pure_injective : injective (pure : α → Ultrafilter α) := fun a b h =>\n  Filter.pure_injective (congr_arg ultrafilter.to_filter h : _)\n#align pure_injective pure_injective\n\n",
 "of_le":
 "theorem of_le (f : Filter α) [NeBot f] : ↑(of f) ≤ f :=\n  Classical.choose_spec (exists_le f)\n#align of_le of_le\n\n",
 "of_comap_inf_principal_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem of_comap_inf_principal_mem (h : «expr '' » m s ∈ g) : s ∈ ofComapInfPrincipal h :=\n  by\n  let f := «expr ⊓ » (Filter.comap m g) ((filter.principal) s)\n  haveI : f.ne_bot := comap_inf_principal_ne_bot_of_image_mem h\n  have : s ∈ f := mem_inf_of_right (mem_principal_self s)\n  exact le_def.mp (of_le _) s this\n#align of_comap_inf_principal_mem of_comap_inf_principal_mem\n\n",
 "of_comap_inf_principal_eq_of_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem of_comap_inf_principal_eq_of_map (h : «expr '' » m s ∈ g) : (ofComapInfPrincipal h).map m = g :=\n  by\n  let f := «expr ⊓ » (Filter.comap m g) ((filter.principal) s)\n  haveI : f.ne_bot := comap_inf_principal_ne_bot_of_image_mem h\n  apply eq_of_le\n  calc\n    Filter.map m (of f) ≤ Filter.map m f := map_mono (of_le _)\n    _ ≤ «expr ⊓ » (Filter.map m <| Filter.comap m g) (Filter.map m ((filter.principal) s)) := map_inf_le\n    _ = «expr ⊓ » (Filter.map m <| Filter.comap m g) (filter.principal <| «expr '' » m s) := by rw [map_principal]\n    _ ≤ «expr ⊓ » g (filter.principal <| «expr '' » m s) := (inf_le_inf_right _ map_comap_le)\n    _ = g := inf_of_le_left (le_principal_iff.mpr h)\n    \n#align of_comap_inf_principal_eq_of_map of_comap_inf_principal_eq_of_map\n\n",
 "of_coe":
 "theorem of_coe (f : Ultrafilter α) : of ↑f = f :=\n  coe_inj.1 <| f.unique (of_le f)\n#align of_coe of_coe\n\n",
 "nonempty_of_mem":
 "theorem nonempty_of_mem (hs : s ∈ f) : s.nonempty :=\n  nonempty_of_mem hs\n#align nonempty_of_mem nonempty_of_mem\n\n",
 "nmem_hyperfilter_of_finite":
 "theorem nmem_hyperfilter_of_finite {s : Set α} (hf : s.finite) : s ∉ hyperfilter α := fun hy =>\n  compl_not_mem hy <| hyperfilter_le_cofinite hf.compl_mem_cofinite\n#align nmem_hyperfilter_of_finite nmem_hyperfilter_of_finite\n\n",
 "ne_empty_of_mem":
 "theorem ne_empty_of_mem (hs : s ∈ f) : s ≠ ∅ :=\n  (nonempty_of_mem hs).ne_empty\n#align ne_empty_of_mem ne_empty_of_mem\n\n",
 "mem_pure":
 "@[simp]\ntheorem mem_pure {a : α} {s : Set α} : s ∈ (pure a : Ultrafilter α) ↔ a ∈ s :=\n  iff.rfl\n#align mem_pure mem_pure\n\n",
 "mem_or_compl_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem mem_or_compl_mem (f : Ultrafilter α) (s : Set α) : s ∈ f ∨ «expr ᶜ» s ∈ f :=\n  or_iff_not_imp_left.2 compl_mem_iff_not_mem.2\n#align mem_or_compl_mem mem_or_compl_mem\n\n",
 "mem_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem mem_map {m : α → β} {f : Ultrafilter α} {s : Set β} : s ∈ map m f ↔ «expr ⁻¹' » m s ∈ f :=\n  iff.rfl\n#align mem_map mem_map\n\n",
 "mem_iff_ultrafilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem mem_iff_ultrafilter : s ∈ f ↔ ∀ g : Ultrafilter α, ↑g ≤ f → s ∈ g :=\n  by\n  refine' ⟨fun hf g hg => hg hf, fun H => by_contra fun hf => _⟩\n  set g : Filter («expr↥ » («expr ᶜ» s)) := comap coe f\n  haveI : ne_bot g := comap_ne_bot_iff_compl_range.2 (by simpa [compl_set_of] )\n  simpa using H ((of g).map coe) (map_le_iff_le_comap.mpr (of_le g))\n#align mem_iff_ultrafilter mem_iff_ultrafilter\n\n",
 "mem_hyperfilter_of_finite_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem mem_hyperfilter_of_finite_compl {s : Set α} (hf : Set.Finite («expr ᶜ» s)) : s ∈ hyperfilter α :=\n  compl_compl s ▸ hf.compl_mem_hyperfilter\n#align mem_hyperfilter_of_finite_compl mem_hyperfilter_of_finite_compl\n\n",
 "mem_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem mem_comap {m : α → β} (u : Ultrafilter β) (inj : injective m) (large : Set.range m ∈ u) {s : Set α} :\n    s ∈ u.comap inj large ↔ «expr '' » m s ∈ u :=\n  mem_comap_iff inj large\n#align mem_comap mem_comap\n\n",
 "mem_coe":
 "@[simp, norm_cast]\ntheorem mem_coe : s ∈ (f : Filter α) ↔ s ∈ f :=\n  iff.rfl\n#align mem_coe mem_coe\n\n",
 "map_pure":
 "@[simp]\ntheorem map_pure (m : α → β) (a : α) : map m (pure a) = pure (m a) :=\n  rfl\n#align map_pure map_pure\n\n",
 "map_map":
 "@[simp]\ntheorem map_map (f : Ultrafilter α) (m : α → β) (n : β → γ) : (f.map m).map n = f.map (n ∘ m) :=\n  coe_injective map_map\n#align map_map map_map\n\n",
 "map_id'":
 "@[simp]\ntheorem map_id' (f : Ultrafilter α) : (f.map fun x => x) = f :=\n  map_id _\n#align map_id' map_id'\n\n",
 "map_id":
 "@[simp]\ntheorem map_id (f : Ultrafilter α) : f.map id = f :=\n  coe_injective map_id\n#align map_id map_id\n\n",
 "lt_pure_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem lt_pure_iff : f < pure a ↔ f = «expr⊥» :=\n  isAtom_pure.lt_iff\n#align lt_pure_iff lt_pure_iff\n\n",
 "le_sup_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print le_sup_iff /-\n@[simp]\ntheorem le_sup_iff {u : Ultrafilter α} {f g : Filter α} : ↑u ≤ «expr ⊔ » f g ↔ ↑u ≤ f ∨ ↑u ≤ g :=\n  not_iff_not.1 <| by simp only [← disjoint_iff_not_le, not_or, disjoint_sup_right]\n#align le_sup_iff le_sup_iff\n-/\n\n",
 "le_pure_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem le_pure_iff' : f ≤ pure a ↔ f = «expr⊥» ∨ f = pure a :=\n  isAtom_pure.le_iff\n#align le_pure_iff' le_pure_iff'\n\n",
 "le_pure_iff":
 "protected theorem ne_bot.le_pure_iff (hf : f.ne_bot) : f ≤ pure a ↔ f = pure a :=\n  ⟨Ultrafilter.unique (pure a), le_of_eq⟩\n#align ne_bot.le_pure_iff ne_bot.le_pure_iff\n\n",
 "le_of_inf_ne_bot'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem le_of_inf_ne_bot' (f : Ultrafilter α) {g : Filter α} (hg : NeBot («expr ⊓ » g f)) : ↑f ≤ g :=\n  f.le_of_inf_ne_bot <| by rwa [inf_comm]\n#align le_of_inf_ne_bot' le_of_inf_ne_bot'\n\n",
 "le_of_inf_ne_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem le_of_inf_ne_bot (f : Ultrafilter α) {g : Filter α} (hg : NeBot («expr ⊓ » (↑f) g)) : ↑f ≤ g :=\n  le_of_inf_eq (f.unique inf_le_left hg)\n#align le_of_inf_ne_bot le_of_inf_ne_bot\n\n",
 "le_iff_ultrafilter":
 "theorem le_iff_ultrafilter {f₁ f₂ : Filter α} : f₁ ≤ f₂ ↔ ∀ g : Ultrafilter α, ↑g ≤ f₁ → ↑g ≤ f₂ :=\n  ⟨fun h g h₁ => h₁.trans h, fun h s hs => mem_iff_ultrafilter.2 fun g hg => h g hg hs⟩\n#align le_iff_ultrafilter le_iff_ultrafilter\n\n",
 "le_cofinite_or_eq_pure":
 "theorem le_cofinite_or_eq_pure (f : Ultrafilter α) : (f : Filter α) ≤ cofinite ∨ ∃ a, f = pure a :=\n  or_iff_not_imp_left.2 fun h =>\n    let ⟨s, hs, hfin⟩ := Filter.disjoint_cofinite_right.1 (disjoint_iff_not_le.2 h)\n    let ⟨a, has, hf⟩ := eq_pure_of_finite_mem hfin hs\n    ⟨a, hf⟩\n#align le_cofinite_or_eq_pure le_cofinite_or_eq_pure\n\n",
 "is_atom_pure":
 "theorem is_atom_pure : IsAtom (pure a : Filter α) :=\n  (pure a : Ultrafilter α).is_atom\n#align is_atom_pure is_atom_pure\n\n",
 "inf_ne_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_ne_bot_iff {f : Ultrafilter α} {g : Filter α} : NeBot («expr ⊓ » (↑f) g) ↔ ↑f ≤ g :=\n  ⟨le_of_inf_neBot f, fun h => (inf_of_le_left h).symm ▸ f.ne_bot⟩\n#align inf_ne_bot_iff inf_ne_bot_iff\n\n",
 "hyperfilter_le_cofinite":
 "theorem hyperfilter_le_cofinite : ↑(hyperfilter α) ≤ @cofinite α :=\n  Ultrafilter.of_le cofinite\n#align hyperfilter_le_cofinite hyperfilter_le_cofinite\n\n",
 "frequently_iff_eventually":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n@[simp]\ntheorem frequently_iff_eventually :\n    «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" f (p x) ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f (p x) :=\n  compl_not_mem_iff\n#align frequently_iff_eventually frequently_iff_eventually\n\n",
 "forall_ne_bot_le_iff":
 "theorem forall_ne_bot_le_iff {g : Filter α} {p : Filter α → Prop} (hp : Monotone p) :\n    (∀ f : Filter α, NeBot f → f ≤ g → p f) ↔ ∀ f : Ultrafilter α, ↑f ≤ g → p f :=\n  by\n  refine' ⟨fun H f hf => H f f.ne_bot hf, _⟩\n  intro H f hf hfg\n  exact hp (of_le f) (H _ ((of_le f).trans hfg))\n#align forall_ne_bot_le_iff forall_ne_bot_le_iff\n\n",
 "finite_sUnion_mem_iff":
 "theorem finite_sUnion_mem_iff {s : Set (Set α)} (hs : s.finite) : ⋃₀ s ∈ f ↔ ∃ t ∈ s, t ∈ f :=\n  Finite.induction_on hs (by simp) fun a s ha hs his => by simp [union_mem_iff, his, or_and_right, exists_or]\n#align finite_sUnion_mem_iff finite_sUnion_mem_iff\n\n",
 "finite_bUnion_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem finite_bUnion_mem_iff {is : Set β} {s : β → Set α} (his : is.finite) :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i) ∈ f ↔\n      ∃ i ∈ is, s i ∈ f :=\n  by simp only [← sUnion_image, finite_sUnion_mem_iff (his.image s), bex_image_iff]\n#align finite_bUnion_mem_iff finite_bUnion_mem_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext ⦃f g : Ultrafilter α⦄ (h : ∀ s, s ∈ f ↔ s ∈ g) : f = g :=\n  coe_injective <| Filter.ext h\n#align ext ext\n\n",
 "exists_ultrafilter_of_finite_inter_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\ntheorem exists_ultrafilter_of_finite_inter_nonempty (S : Set (Set α))\n    (cond : ∀ T : Finset (Set α), (↑T : Set (Set α)) ⊆ S → («expr⋂₀ » (↑T : Set (Set α))).nonempty) :\n    ∃ F : Ultrafilter α, S ⊆ F.sets :=\n  haveI : ne_bot (generate S) :=\n    generate_ne_bot_iff.2 fun t hts ht => ht.coe_to_finset ▸ cond ht.to_finset (ht.coe_to_finset.symm ▸ hts)\n  ⟨of (generate S), fun t ht => (of_le <| generate S) <| generate_sets.basic ht⟩\n#align exists_ultrafilter_of_finite_inter_nonempty exists_ultrafilter_of_finite_inter_nonempty\n\n",
 "exists_ultrafilter_iff":
 "theorem exists_ultrafilter_iff {f : Filter α} : (∃ u : Ultrafilter α, ↑u ≤ f) ↔ NeBot f :=\n  ⟨fun ⟨u, uf⟩ => neBot_of_le uf, fun h => @exists_ultrafilter_le _ _ h⟩\n#align exists_ultrafilter_iff exists_ultrafilter_iff\n\n",
 "exists_le":
 "/-- The ultrafilter lemma: Any proper filter is contained in an ultrafilter. -/\ntheorem exists_le (f : Filter α) [h : NeBot f] : ∃ u : Ultrafilter α, ↑u ≤ f :=\n  let ⟨u, hu, huf⟩ := (eq_bot_or_exists_atom_le f).resolve_left h.ne\n  ⟨ofAtom u hu, huf⟩\n#align exists_le exists_le\n\n",
 "eventually_or":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem eventually_or :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f\n        (p x ∨ q x) ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f (p x) ∨\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f\n          (q x) :=\n  union_mem_iff\n#align eventually_or eventually_or\n\n",
 "eventually_not":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem eventually_not :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f ¬p x ↔\n      ¬«expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f\n          (p x) :=\n  compl_mem_iff_not_mem\n#align eventually_not eventually_not\n\n",
 "eventually_imp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem eventually_imp :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f\n        (p x → q x) ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f (p x) →\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f\n          (q x) :=\n  by simp only [imp_iff_not_or, eventually_or, eventually_not]\n#align eventually_imp eventually_imp\n\n",
 "eq_pure_of_finite_mem":
 "theorem eq_pure_of_finite_mem (h : s.finite) (h' : s ∈ f) : ∃ x ∈ s, f = pure x :=\n  by\n  rw [← bUnion_of_singleton s] at h'\n  rcases(Ultrafilter.finite_bunionᵢ_mem_iff h).mp h' with ⟨a, has, haf⟩\n  exact ⟨a, has, eq_of_le (Filter.le_pure_iff.2 haf)⟩\n#align eq_pure_of_finite_mem eq_pure_of_finite_mem\n\n",
 "eq_pure_of_finite":
 "theorem eq_pure_of_finite [Finite α] (f : Ultrafilter α) : ∃ a, f = pure a :=\n  (eq_pure_of_finite_mem finite_univ univ_mem).imp fun a ⟨_, ha⟩ => ha\n#align eq_pure_of_finite eq_pure_of_finite\n\n",
 "eq_of_le":
 "theorem eq_of_le {f g : Ultrafilter α} (h : (f : Filter α) ≤ g) : f = g :=\n  coe_injective (g.unique h)\n#align eq_of_le eq_of_le\n\n",
 "empty_not_mem":
 "@[simp]\ntheorem empty_not_mem : ∅ ∉ f :=\n  empty_not_mem f\n#align empty_not_mem empty_not_mem\n\n",
 "em":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n#print em /-\nprotected theorem em (f : Ultrafilter α) (p : α → Prop) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f (p x) ∨\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" f ¬p x :=\n  f.mem_or_compl_mem { x | p x }\n#align em em\n-/\n\n",
 "disjoint_iff_not_le":
 "theorem disjoint_iff_not_le {f : Ultrafilter α} {g : Filter α} : Disjoint (↑f) g ↔ ¬↑f ≤ g := by\n  rw [← inf_ne_bot_iff, ne_bot_iff, ne.def, Classical.not_not, disjoint_iff]\n#align disjoint_iff_not_le disjoint_iff_not_le\n\n",
 "diff_mem_iff":
 "theorem diff_mem_iff (f : Ultrafilter α) : s \\ t ∈ f ↔ s ∈ f ∧ t ∉ f :=\n  inter_mem_iff.trans <| and_congr iff.rfl compl_mem_iff_not_mem\n#align diff_mem_iff diff_mem_iff\n\n",
 "compl_not_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem compl_not_mem_iff : «expr ᶜ» s ∉ f ↔ s ∈ f :=\n  ⟨fun hsc => le_principal_iff.1 <| f.le_of_inf_ne_bot ⟨fun h => hsc <| mem_of_eq_bot <| by rwa [compl_compl]⟩,\n    compl_not_mem⟩\n#align compl_not_mem_iff compl_not_mem_iff\n\n",
 "compl_mem_iff_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_mem_iff_not_mem : «expr ᶜ» s ∈ f ↔ s ∉ f := by rw [← compl_not_mem_iff, compl_compl]\n#align compl_mem_iff_not_mem compl_mem_iff_not_mem\n\n",
 "compl_mem_hyperfilter_of_finite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_mem_hyperfilter_of_finite {s : Set α} (hf : Set.Finite s) : «expr ᶜ» s ∈ hyperfilter α :=\n  compl_mem_iff_not_mem.2 hf.nmem_hyperfilter\n#align compl_mem_hyperfilter_of_finite compl_mem_hyperfilter_of_finite\n\n",
 "comap_pure":
 "@[simp]\ntheorem comap_pure {m : α → β} (a : α) (inj : injective m) (large) : comap (pure <| m a) inj large = pure a :=\n  coe_injective <|\n    comap_pure.trans <| by rw [coe_pure, ← principal_singleton, ← image_singleton, preimage_image_eq _ inj]\n#align comap_pure comap_pure\n\n",
 "comap_inf_principal_ne_bot_of_image_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\ntheorem comap_inf_principal_ne_bot_of_image_mem (h : «expr '' » m s ∈ g) :\n    («expr ⊓ » (Filter.comap m g) ((filter.principal) s)).ne_bot :=\n  Filter.comap_inf_principal_neBot_of_image_mem g.ne_bot h\n#align comap_inf_principal_ne_bot_of_image_mem comap_inf_principal_ne_bot_of_image_mem\n\n",
 "comap_id":
 "@[simp]\ntheorem comap_id (f : Ultrafilter α) (h₀ : injective (id : α → α) := injective_id)\n    (h₁ : range id ∈ f :=\n      (by\n        rw [range_id]\n        exact univ_mem)) :\n    f.comap h₀ h₁ = f :=\n  coe_injective comap_id\n#align comap_id comap_id\n\n",
 "comap_comap":
 "@[simp]\ntheorem comap_comap (f : Ultrafilter γ) {m : α → β} {n : β → γ} (inj₀ : injective n) (large₀ : range n ∈ f)\n    (inj₁ : injective m) (large₁ : range m ∈ f.comap inj₀ large₀) (inj₂ : injective (n ∘ m) := inj₀.comp inj₁)\n    (large₂ : range (n ∘ m) ∈ f :=\n      (by\n        rw [range_comp]\n        exact image_mem_of_mem_comap large₀ large₁)) :\n    (f.comap inj₀ large₀).comap inj₁ large₁ = f.comap inj₂ large₂ :=\n  coe_injective comap_comap\n#align comap_comap comap_comap\n\n",
 "coe_pure":
 "@[simp]\ntheorem coe_pure (a : α) : ↑(pure a : Ultrafilter α) = (pure a : Filter α) :=\n  rfl\n#align coe_pure coe_pure\n\n",
 "coe_map":
 "@[simp, norm_cast]\ntheorem coe_map (m : α → β) (f : Ultrafilter α) : (map m f : Filter β) = Filter.map m ↑f :=\n  rfl\n#align coe_map coe_map\n\n",
 "coe_le_coe":
 "@[simp, norm_cast]\ntheorem coe_le_coe {f g : Ultrafilter α} : (f : Filter α) ≤ g ↔ f = g :=\n  ⟨fun h => eq_of_le h, fun h => h ▸ le_rfl⟩\n#align coe_le_coe coe_le_coe\n\n",
 "coe_injective":
 "theorem coe_injective : injective (coe : Ultrafilter α → Filter α)\n  | ⟨f, h₁, h₂⟩, ⟨g, h₃, h₄⟩, rfl => by congr\n#align coe_injective coe_injective\n\n",
 "coe_inj":
 "@[simp, norm_cast]\ntheorem coe_inj : (f : Filter α) = g ↔ f = g :=\n  coe_injective.eq_iff\n#align coe_inj coe_inj\n\n",
 "coe_comap":
 "@[simp, norm_cast]\ntheorem coe_comap {m : α → β} (u : Ultrafilter β) (inj : injective m) (large : Set.range m ∈ u) :\n    (u.comap inj large : Filter α) = Filter.comap m u :=\n  rfl\n#align coe_comap coe_comap\n\n",
 "bot_ne_hyperfilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_ne_hyperfilter : («expr⊥» : Filter α) ≠ hyperfilter α :=\n  (by infer_instance : NeBot ↑(hyperfilter α)).1.symm\n#align bot_ne_hyperfilter bot_ne_hyperfilter\n\n",
 "Unique":
 "#print Unique /-\n/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Jeremy Avigad, Yury Kudryashov\n-/\ntheorem Unique (f : Ultrafilter α) {g : Filter α} (h : g ≤ f) (hne : NeBot g := by infer_instance) : g = f :=\n  le_antisymm h <| f.le_of_le g hne h\n#align unique Unique\n-/\n\n",
 "IsAtom":
 "#print IsAtom /-\nprotected theorem IsAtom (f : Ultrafilter α) : IsAtom (f : Filter α) :=\n  ⟨f.ne_bot.ne, fun g hgf => by_contra fun hg => hgf.ne <| f.unique hgf.le ⟨hg⟩⟩\n#align is_atom IsAtom\n-/\n\n",
 "Iic_pure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem Iic_pure (a : α) : Iic (pure a : Filter α) = {«expr⊥», pure a} :=\n  isAtom_pure.Iic_eq\n#align Iic_pure Iic_pure\n\n"}