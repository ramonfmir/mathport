{"mem_ofCountableInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n#print Filter.mem_ofCountableInter /-\n@[simp]\ntheorem Filter.mem_ofCountableInter {l : Set (Set α)} (hp : ∀ S : Set (Set α), S.countable → S ⊆ l → «expr⋂₀ » S ∈ l)\n    (h_mono : ∀ s t, s ∈ l → s ⊆ t → t ∈ l) {s : Set α} : s ∈ Filter.ofCountableInter l hp h_mono ↔ s ∈ l :=\n  iff.rfl\n#align filter.mem_of_countable_Inter Filter.mem_ofCountableInter\n-/\n\n",
 "eventually_countable_forall":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n#print eventually_countable_forall /-\ntheorem eventually_countable_forall [Countable ι] {p : α → ι → Prop} :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (∀ i, p x i) ↔\n      ∀ i,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (p x i) :=\n  by simpa only [Filter.Eventually, set_of_forall] using @countable_interᵢ_mem _ _ l _ _ fun i => { x | p x i }\n#align eventually_countable_forall eventually_countable_forall\n-/\n\n",
 "eventually_countable_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n#print eventually_countable_ball /-\ntheorem eventually_countable_ball {ι : Type _} {S : Set ι} (hS : S.countable) {p : ∀ (x : α), ∀ i ∈ S, Prop} :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (∀ i ∈ S, p x i ‹_›) ↔\n      ∀ i ∈ S,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (p x i ‹_›) :=\n  by simpa only [Filter.Eventually, set_of_forall] using @countable_bInter_mem _ l _ _ _ hS fun i hi => { x | p x i hi }\n#align eventually_countable_ball eventually_countable_ball\n-/\n\n",
 "countable_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print EventuallyEq.countable_unionᵢ /-\ntheorem EventuallyEq.countable_unionᵢ [Countable ι] {s t : ι → Set α} (h : ∀ i, «expr =ᶠ[ ] » (s i) l (t i)) :\n    «expr =ᶠ[ ] »\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) l\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i)) :=\n  (EventuallyLE.countable_unionᵢ fun i => (h i).le).antisymm (EventuallyLE.countable_unionᵢ fun i => (h i).symm.le)\n#align eventually_eq.countable_Union EventuallyEq.countable_unionᵢ\n-/\n\n",
 "countable_interₛ_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n#print countable_interₛ_mem /-\n/-\nCopyright (c) 2020 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem countable_interₛ_mem {S : Set (Set α)} (hSc : S.countable) : «expr⋂₀ » S ∈ l ↔ ∀ s ∈ S, s ∈ l :=\n  ⟨fun hS s hs => mem_of_superset hS (interₛ_subset_of_mem hs), countable_Inter_filter.countable_sInter_mem' hSc⟩\n#align countable_sInter_mem countable_interₛ_mem\n-/\n\n",
 "countable_interᵢ_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print countable_interᵢ_mem /-\ntheorem countable_interᵢ_mem [Countable ι] {s : ι → Set α} :\n    «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i) ∈ l ↔\n      ∀ i, s i ∈ l :=\n  interₛ_range s ▸ (countable_interₛ_mem (countable_range _)).trans forall_range_iff\n#align countable_Inter_mem countable_interᵢ_mem\n-/\n\n",
 "countable_interᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print EventuallyEq.countable_interᵢ /-\ntheorem EventuallyEq.countable_interᵢ [Countable ι] {s t : ι → Set α} (h : ∀ i, «expr =ᶠ[ ] » (s i) l (t i)) :\n    «expr =ᶠ[ ] »\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) l\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (t i)) :=\n  (EventuallyLE.countable_interᵢ fun i => (h i).le).antisymm (EventuallyLE.countable_interᵢ fun i => (h i).symm.le)\n#align eventually_eq.countable_Inter EventuallyEq.countable_interᵢ\n-/\n\n",
 "countable_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print EventuallyEq.countable_bUnion /-\ntheorem EventuallyEq.countable_bUnion {ι : Type _} {S : Set ι} (hS : S.countable) {s t : ∀ i ∈ S, Set α}\n    (h : ∀ i ∈ S, «expr =ᶠ[ ] » (s i ‹_›) l (t i ‹_›)) :\n    «expr =ᶠ[ ] »\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i ‹_›)) l\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i ‹_›)) :=\n  (EventuallyLE.countable_bUnion hS fun i hi => (h i hi).le).antisymm\n    (EventuallyLE.countable_bUnion hS fun i hi => (h i hi).symm.le)\n#align eventually_eq.countable_bUnion EventuallyEq.countable_bUnion\n-/\n\n",
 "countable_bInter_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print countable_bInter_mem /-\ntheorem countable_bInter_mem {ι : Type _} {S : Set ι} (hS : S.countable) {s : ∀ i ∈ S, Set α} :\n    «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i ‹_›) ∈ l ↔\n      ∀ i ∈ S, s i ‹_› ∈ l :=\n  by\n  rw [bInter_eq_Inter]\n  haveI := hS.to_encodable\n  exact countable_Inter_mem.trans Subtype.forall\n#align countable_bInter_mem countable_bInter_mem\n-/\n\n",
 "countable_bInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print EventuallyEq.countable_bInter /-\ntheorem EventuallyEq.countable_bInter {ι : Type _} {S : Set ι} (hS : S.countable) {s t : ∀ i ∈ S, Set α}\n    (h : ∀ i ∈ S, «expr =ᶠ[ ] » (s i ‹_›) l (t i ‹_›)) :\n    «expr =ᶠ[ ] »\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i ‹_›)) l\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (t i ‹_›)) :=\n  (EventuallyLE.countable_bInter hS fun i hi => (h i hi).le).antisymm\n    (EventuallyLE.countable_bInter hS fun i hi => (h i hi).symm.le)\n#align eventually_eq.countable_bInter EventuallyEq.countable_bInter\n-/\n\n"}