{"zero_zero_at_filter":
 "/-\nCopyright (c) 2022 Chris Birkbeck. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Birkbeck, David Loeffler\n-/\ntheorem zero_zero_at_filter [Zero β] [TopologicalSpace β] (l : Filter α) : ZeroAtFilter l (0 : α → β) :=\n  tendsto_const_nhds\n#align zero_zero_at_filter zero_zero_at_filter\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem bounded_at_filter.smul {𝕜 : Type _} [NormedField 𝕜] [NormedAddCommGroup β] [NormedSpace 𝕜 β] {l : Filter α}\n    {f : α → β} (c : 𝕜) (hf : BoundedAtFilter l f) : BoundedAtFilter l («expr • » c f) :=\n  hf.const_smul_left c\n#align bounded_at_filter.smul bounded_at_filter.smul\n\n",
 "neg":
 "theorem bounded_at_filter.neg [NormedAddCommGroup β] {l : Filter α} {f : α → β} (hf : BoundedAtFilter l f) :\n    BoundedAtFilter l (-f) :=\n  hf.neg_left\n#align bounded_at_filter.neg bounded_at_filter.neg\n\n",
 "mul":
 "theorem bounded_at_filter.mul [NormedField β] {l : Filter α} {f g : α → β} (hf : BoundedAtFilter l f)\n    (hg : BoundedAtFilter l g) : BoundedAtFilter l (f * g) :=\n  by\n  refine' (hf.mul hg).trans _\n  convert Asymptotics.isBigO_refl _ l\n  ext x\n  simp\n#align bounded_at_filter.mul bounded_at_filter.mul\n\n",
 "const_bounded_at_filter":
 "theorem const_bounded_at_filter [NormedField β] (l : Filter α) (c : β) :\n    BoundedAtFilter l (Function.const α c : α → β) :=\n  Asymptotics.isBigO_const_const c one_ne_zero l\n#align const_bounded_at_filter const_bounded_at_filter\n\n",
 "bounded_at_filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem zero_at_filter.bounded_at_filter [NormedAddCommGroup β] {l : Filter α} {f : α → β} (hf : ZeroAtFilter l f) :\n    BoundedAtFilter l f :=\n  by\n  rw [zero_at_filter, ← Asymptotics.isLittleO_const_iff (one_ne_zero' (exprℝ))] at hf\n  exact hf.is_O\n#align zero_at_filter.bounded_at_filter zero_at_filter.bounded_at_filter\n\n",
 "add":
 "theorem bounded_at_filter.add [NormedAddCommGroup β] {l : Filter α} {f g : α → β} (hf : BoundedAtFilter l f)\n    (hg : BoundedAtFilter l g) : BoundedAtFilter l (f + g) := by simpa using hf.add hg\n#align bounded_at_filter.add bounded_at_filter.add\n\n"}