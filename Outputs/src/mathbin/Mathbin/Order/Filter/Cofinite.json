{"tendsto_cofinite":
 "#print Function.Injective.tendsto_cofinite /-\n/-- For an injective function `f`, inverse images of finite sets are finite. See also\n`filter.comap_cofinite_le` and `function.injective.comap_cofinite_eq`. -/\ntheorem Function.Injective.tendsto_cofinite {f : α → β} (hf : injective f) : Tendsto f cofinite cofinite := fun s h =>\n  h.preimage (hf.inj_on _)\n#align function.injective.tendsto_cofinite Function.Injective.tendsto_cofinite\n-/\n\n",
 "nat_tendsto_atTop":
 "#print Function.Injective.nat_tendsto_atTop /-\n/-- An injective sequence `f : ℕ → ℕ` tends to infinity at infinity. -/\ntheorem Function.Injective.nat_tendsto_atTop {f : ℕ → ℕ} (hf : injective f) : Tendsto f atTop atTop :=\n  Nat.cofinite_eq_atTop ▸ hf.tendsto_cofinite\n#align function.injective.nat_tendsto_at_top Function.Injective.nat_tendsto_atTop\n-/\n\n",
 "mem_cofinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Jeremy Avigad, Yury Kudryashov\n-/\n@[simp]\ntheorem mem_cofinite {s : Set α} : s ∈ @cofinite α ↔ («expr ᶜ» s).finite :=\n  iff.rfl\n#align mem_cofinite mem_cofinite\n\n",
 "le_cofinite_iff_eventually_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem le_cofinite_iff_eventually_ne :\n    l ≤ cofinite ↔\n      ∀ x,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n          (y ≠ x) :=\n  le_cofinite_iff_compl_singleton_mem\n#align le_cofinite_iff_eventually_ne le_cofinite_iff_eventually_ne\n\n",
 "le_cofinite_iff_compl_singleton_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem le_cofinite_iff_compl_singleton_mem : l ≤ cofinite ↔ ∀ x, «expr ᶜ» {x} ∈ l :=\n  by\n  refine' ⟨fun h x => h (finite_singleton x).compl_mem_cofinite, fun h s (hs : («expr ᶜ» s).finite) => _⟩\n  rw [← compl_compl s, ← bUnion_of_singleton («expr ᶜ» s), compl_Union₂, Filter.binterᵢ_mem hs]\n  exact fun x _ => h x\n#align le_cofinite_iff_compl_singleton_mem le_cofinite_iff_compl_singleton_mem\n\n",
 "infinite_iff_frequently_cofinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n#print Set.infinite_iff_frequently_cofinite /-\ntheorem Set.infinite_iff_frequently_cofinite {s : Set α} :\n    Set.Infinite s ↔\n      «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" cofinite\n        (x ∈ s) :=\n  frequently_cofinite_iff_infinite.symm\n#align set.infinite_iff_frequently_cofinite Set.infinite_iff_frequently_cofinite\n-/\n\n",
 "has_basis_cofinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem has_basis_cofinite : HasBasis cofinite (fun s : Set α => s.finite) compl :=\n  ⟨fun s =>\n    ⟨fun h => ⟨«expr ᶜ» s, h, (compl_compl s).subset⟩, fun ⟨t, htf, hts⟩ => htf.subset <| compl_subset_comm.2 hts⟩⟩\n#align has_basis_cofinite has_basis_cofinite\n\n",
 "frequently_cofinite_iff_infinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\ntheorem frequently_cofinite_iff_infinite {p : α → Prop} :\n    «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" cofinite\n        (p x) ↔\n      Set.Infinite { x | p x } :=\n  by simp only [Filter.Frequently, Filter.Eventually, mem_cofinite, compl_set_of, Classical.not_not, Set.Infinite]\n#align frequently_cofinite_iff_infinite frequently_cofinite_iff_infinite\n\n",
 "frequently_atTop_iff_infinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∃ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , » -/\n#print Nat.frequently_atTop_iff_infinite /-\ntheorem Nat.frequently_atTop_iff_infinite {p : ℕ → Prop} :\n    «expr∃ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∃ᶠ in , »\" atTop\n        (p n) ↔\n      Set.Infinite { n | p n } :=\n  by rw [← Nat.cofinite_eq_atTop, frequently_cofinite_iff_infinite]\n#align nat.frequently_at_top_iff_infinite Nat.frequently_atTop_iff_infinite\n-/\n\n",
 "exists_within_forall_le":
 "#print Filter.Tendsto.exists_within_forall_le /-\ntheorem Filter.Tendsto.exists_within_forall_le {α β : Type _} [linear_order β] {s : Set α} (hs : s.nonempty) {f : α → β}\n    (hf : Filter.Tendsto f Filter.cofinite Filter.atTop) : ∃ a₀ ∈ s, ∀ a ∈ s, f a₀ ≤ f a :=\n  by\n  rcases em (∃ y ∈ s, ∃ x, f y < x) with (⟨y, hys, x, hx⟩ | not_all_top)\n  · -- the set of points `{y | f y < x}` is nonempty and finite, so we take `min` over this set\n    have : { y | ¬x ≤ f y }.finite := filter.eventually_cofinite.mp (tendsto_at_top.1 hf x)\n    simp only [not_le] at this\n    obtain ⟨a₀, ⟨ha₀ : f a₀ < x, ha₀s⟩, others_bigger⟩ := exists_min_image _ f (this.inter_of_left s) ⟨y, hx, hys⟩\n    refine' ⟨a₀, ha₀s, fun a has => (lt_or_le (f a) x).elim _ (le_trans ha₀.le)⟩\n    exact fun h => others_bigger a ⟨h, has⟩\n  · -- in this case, f is constant because all values are at top\n    push_neg  at not_all_top\n    obtain ⟨a₀, ha₀s⟩ := hs\n    exact ⟨a₀, ha₀s, fun a ha => not_all_top a ha (f a₀)⟩\n#align filter.tendsto.exists_within_forall_le Filter.Tendsto.exists_within_forall_le\n-/\n\n",
 "exists_within_forall_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print Filter.Tendsto.exists_within_forall_ge /-\ntheorem Filter.Tendsto.exists_within_forall_ge [linear_order β] {s : Set α} (hs : s.nonempty) {f : α → β}\n    (hf : Filter.Tendsto f Filter.cofinite Filter.atBot) : ∃ a₀ ∈ s, ∀ a ∈ s, f a ≤ f a₀ :=\n  @Filter.Tendsto.exists_within_forall_le _ («expr ᵒᵈ» β) _ _ hs _ hf\n#align filter.tendsto.exists_within_forall_ge Filter.Tendsto.exists_within_forall_ge\n-/\n\n",
 "exists_forall_le":
 "#print Filter.Tendsto.exists_forall_le /-\ntheorem Filter.Tendsto.exists_forall_le [Nonempty α] [linear_order β] {f : α → β} (hf : Tendsto f cofinite atTop) :\n    ∃ a₀, ∀ a, f a₀ ≤ f a :=\n  let ⟨a₀, _, ha₀⟩ := hf.exists_within_forall_le univ_nonempty\n  ⟨a₀, fun a => ha₀ a (mem_univ _)⟩\n#align filter.tendsto.exists_forall_le Filter.Tendsto.exists_forall_le\n-/\n\n",
 "exists_forall_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print Filter.Tendsto.exists_forall_ge /-\ntheorem Filter.Tendsto.exists_forall_ge [Nonempty α] [linear_order β] {f : α → β} (hf : Tendsto f cofinite atBot) :\n    ∃ a₀, ∀ a, f a ≤ f a₀ :=\n  @Filter.Tendsto.exists_forall_le _ («expr ᵒᵈ» β) _ _ _ hf\n#align filter.tendsto.exists_forall_ge Filter.Tendsto.exists_forall_ge\n-/\n\n",
 "eventually_cofinite_nmem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n#print Finset.eventually_cofinite_nmem /-\ntheorem Finset.eventually_cofinite_nmem (s : Finset α) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" cofinite\n      (x ∉ s) :=\n  s.finite_to_set.eventually_cofinite_nmem\n#align finset.eventually_cofinite_nmem Finset.eventually_cofinite_nmem\n-/\n\n",
 "eventually_cofinite_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem eventually_cofinite_ne (x : α) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" cofinite\n      (a ≠ x) :=\n  (Set.finite_singleton x).eventually_cofinite_nmem\n#align eventually_cofinite_ne eventually_cofinite_ne\n\n",
 "eventually_cofinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n@[simp]\ntheorem eventually_cofinite {p : α → Prop} :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" cofinite\n        (p x) ↔\n      { x | ¬p x }.finite :=\n  iff.rfl\n#align eventually_cofinite eventually_cofinite\n\n",
 "disjoint_cofinite_right":
 "@[simp]\ntheorem disjoint_cofinite_right : Disjoint l cofinite ↔ ∃ s ∈ l, Set.Finite s :=\n  disjoint_comm.trans disjoint_cofinite_left\n#align disjoint_cofinite_right disjoint_cofinite_right\n\n",
 "disjoint_cofinite_left":
 "@[simp]\ntheorem disjoint_cofinite_left : Disjoint cofinite l ↔ ∃ s ∈ l, Set.Finite s :=\n  by\n  simp only [has_basis_cofinite.disjoint_iff l.basis_sets, id, disjoint_compl_left_iff_subset]\n  exact ⟨fun ⟨s, hs, t, ht, hts⟩ => ⟨t, ht, hs.subset hts⟩, fun ⟨s, hs, hsf⟩ => ⟨s, hsf, s, hs, subset.rfl⟩⟩\n#align disjoint_cofinite_left disjoint_cofinite_left\n\n",
 "coprod_cofinite":
 "/-- The coproduct of the cofinite filters on two types is the cofinite filter on their product. -/\ntheorem coprod_cofinite : (cofinite : Filter α).coprod (cofinite : Filter β) = cofinite :=\n  Filter.coext fun s => by simp only [compl_mem_coprod, mem_cofinite, compl_compl, finite_image_fst_and_snd_iff]\n#align coprod_cofinite coprod_cofinite\n\n",
 "compl_mem_cofinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print Set.Finite.compl_mem_cofinite /-\ntheorem Set.Finite.compl_mem_cofinite {s : Set α} (hs : s.finite) : «expr ᶜ» s ∈ @cofinite α :=\n  mem_cofinite.2 <| (compl_compl s).symm ▸ hs\n#align set.finite.compl_mem_cofinite Set.Finite.compl_mem_cofinite\n-/\n\n",
 "comap_cofinite_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem comap_cofinite_le (f : α → β) : comap f cofinite ≤ cofinite :=\n  le_cofinite_iff_eventually_ne.mpr fun x =>\n    mem_comap.2 ⟨«expr ᶜ» {f x}, (finite_singleton _).compl_mem_cofinite, fun y => ne_of_apply_ne f⟩\n#align comap_cofinite_le comap_cofinite_le\n\n",
 "comap_cofinite_eq":
 "#print Function.Injective.comap_cofinite_eq /-\n/-- The pullback of the `filter.cofinite` under an injective function is equal to `filter.cofinite`.\nSee also `filter.comap_cofinite_le` and `function.injective.tendsto_cofinite`. -/\ntheorem Function.Injective.comap_cofinite_eq {f : α → β} (hf : injective f) : comap f cofinite = cofinite :=\n  (comap_cofinite_le f).antisymm hf.tendsto_cofinite.le_comap\n#align function.injective.comap_cofinite_eq Function.Injective.comap_cofinite_eq\n-/\n\n",
 "cofinite_eq_atTop":
 "#print Nat.cofinite_eq_atTop /-\n/-- For natural numbers the filters `cofinite` and `at_top` coincide. -/\ntheorem Nat.cofinite_eq_atTop : @cofinite ℕ = atTop :=\n  by\n  refine' le_antisymm _ at_top_le_cofinite\n  refine' at_top_basis.ge_iff.2 fun N hN => _\n  simpa only [mem_cofinite, compl_Ici] using finite_lt_nat N\n#align nat.cofinite_eq_at_top Nat.cofinite_eq_atTop\n-/\n\n",
 "at_top_le_cofinite":
 "/-- If `α` is a preorder with no maximal element, then `at_top ≤ cofinite`. -/\ntheorem at_top_le_cofinite [preorder α] [NoMaxOrder α] : (atTop : Filter α) ≤ cofinite :=\n  le_cofinite_iff_eventually_ne.mpr eventually_ne_atTop\n#align at_top_le_cofinite at_top_le_cofinite\n\n",
 "Coprod_cofinite":
 "/-- Finite product of finite sets is finite -/\ntheorem Coprod_cofinite {α : ι → Type _} [Finite ι] : (Filter.coprodᵢ fun i => (cofinite : Filter (α i))) = cofinite :=\n  Filter.coext fun s => by simp only [compl_mem_Coprod, mem_cofinite, compl_compl, forall_finite_image_eval_iff]\n#align Coprod_cofinite Coprod_cofinite\n\n"}