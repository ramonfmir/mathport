{"exists_monotone_extension":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print MonotoneOn.exists_monotone_extension /-\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel, Yury Kudryashov\n-/\n/-- If a function is monotone and is bounded on a set `s`, then it admits a monotone extension to\nthe whole space. -/\ntheorem MonotoneOn.exists_monotone_extension (h : MonotoneOn f s) (hl : BddBelow («expr '' » f s))\n    (hu : BddAbove («expr '' » f s)) : ∃ g : α → β, Monotone g ∧ EqOn f g s := by\n  classical\n    /- The extension is defined by `f x = f a` for `x ≤ a`, and `f x` is the supremum of the values\n      of `f`  to the left of `x` for `x ≥ a`. -/\n    rcases hl with ⟨a, ha⟩\n    have hu' : ∀ x, BddAbove («expr '' » f (Iic x ∩ s)) := fun x => hu.mono (image_subset _ (inter_subset_right _ _))\n    set g : α → β := fun x => if Disjoint (Iic x) s then a else Sup («expr '' » f (Iic x ∩ s))\n    have hgs : eq_on f g s := by\n      intro x hx\n      simp only [g]\n      have : IsGreatest (Iic x ∩ s) x := ⟨⟨right_mem_Iic, hx⟩, fun y hy => hy.1⟩\n      rw [if_neg this.nonempty.not_disjoint, ((h.mono <| inter_subset_right _ _).map_is_greatest this).cSup_eq]\n    refine' ⟨g, fun x y hxy => _, hgs⟩\n    by_cases hx : Disjoint (Iic x) s <;> by_cases hy : Disjoint (Iic y) s <;>\n      simp only [g, if_pos, if_neg, not_false_iff, *]\n    · rcases not_disjoint_iff_nonempty_inter.1 hy with ⟨z, hz⟩\n      exact le_csupₛ_of_le (hu' _) (mem_image_of_mem _ hz) (ha <| mem_image_of_mem _ hz.2)\n    · exact (hx <| hy.mono_left <| Iic_subset_Iic.2 hxy).elim\n    · rw [not_disjoint_iff_nonempty_inter] at hx hy\n      refine' csupₛ_le_csupₛ (hu' _) (hx.image _) (image_subset _ _)\n      exact inter_subset_inter_left _ (Iic_subset_Iic.2 hxy)\n#align monotone_on.exists_monotone_extension MonotoneOn.exists_monotone_extension\n-/\n\n",
 "exists_antitone_extension":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AntitoneOn.exists_antitone_extension /-\n/-- If a function is antitone and is bounded on a set `s`, then it admits an antitone extension to\nthe whole space. -/\ntheorem AntitoneOn.exists_antitone_extension (h : AntitoneOn f s) (hl : BddBelow («expr '' » f s))\n    (hu : BddAbove («expr '' » f s)) : ∃ g : α → β, Antitone g ∧ EqOn f g s :=\n  h.dual_right.exists_monotone_extension hu hl\n#align antitone_on.exists_antitone_extension AntitoneOn.exists_antitone_extension\n-/\n\n"}