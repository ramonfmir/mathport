{"with_top_congr_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem with_top_congr_trans (e₁ : «expr ≃o » α β) (e₂ : «expr ≃o » β γ) :\n    e₁.with_top_congr.trans e₂.with_top_congr = (e₁.trans e₂).with_top_congr :=\n  RelIso.toEquiv_injective <| e₁.to_equiv.option_congr_trans e₂.to_equiv\n#align with_top_congr_trans with_top_congr_trans\n\n",
 "with_top_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem with_top_congr_symm (e : «expr ≃o » α β) : e.with_top_congr.symm = e.symm.with_top_congr :=\n  RelIso.toEquiv_injective e.to_equiv.option_congr_symm\n#align with_top_congr_symm with_top_congr_symm\n\n",
 "with_top_congr_refl":
 "@[simp]\ntheorem with_top_congr_refl : (OrderIso.refl α).with_top_congr = OrderIso.refl _ :=\n  RelIso.toEquiv_injective Equiv.optionCongr_refl\n#align with_top_congr_refl with_top_congr_refl\n\n",
 "with_bot_congr_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem with_bot_congr_trans (e₁ : «expr ≃o » α β) (e₂ : «expr ≃o » β γ) :\n    e₁.with_bot_congr.trans e₂.with_bot_congr = (e₁.trans e₂).with_bot_congr :=\n  RelIso.toEquiv_injective <| e₁.to_equiv.option_congr_trans e₂.to_equiv\n#align with_bot_congr_trans with_bot_congr_trans\n\n",
 "with_bot_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem with_bot_congr_symm (e : «expr ≃o » α β) : e.with_bot_congr.symm = e.symm.with_bot_congr :=\n  RelIso.toEquiv_injective e.to_equiv.option_congr_symm\n#align with_bot_congr_symm with_bot_congr_symm\n\n",
 "with_bot_congr_refl":
 "@[simp]\ntheorem with_bot_congr_refl : (OrderIso.refl α).with_bot_congr = OrderIso.refl _ :=\n  RelIso.toEquiv_injective Equiv.optionCongr_refl\n#align with_bot_congr_refl with_bot_congr_refl\n\n",
 "well_founded":
 "protected theorem well_founded : well_founded ((· < ·) : β → β → Prop) → well_founded ((· < ·) : α → α → Prop) :=\n  f.lt_embedding.well_founded\n#align well_founded well_founded\n\n",
 "trans_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem trans_refl (e : «expr ≃o » α β) : e.trans (refl β) = e :=\n  by\n  ext x\n  rfl\n#align trans_refl trans_refl\n\n",
 "trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem trans_apply (e : «expr ≃o » α β) (e' : «expr ≃o » β γ) (x : α) : e.trans e' x = e' (e x) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "to_rel_iso_lt_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem to_rel_iso_lt_symm (e : «expr ≃o » α β) : e.to_rel_iso_lt.symm = e.symm.to_rel_iso_lt :=\n  rfl\n#align to_rel_iso_lt_symm to_rel_iso_lt_symm\n\n",
 "to_rel_iso_lt_of_rel_iso_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem to_rel_iso_lt_of_rel_iso_lt {α β} [partial_order α] [partial_order β]\n    (e : «expr ≃r » ((· < ·) : α → α → Prop) ((· < ·) : β → β → Prop)) : toRelIsoLT (ofRelIsoLT e) = e :=\n  by\n  ext\n  simp\n#align to_rel_iso_lt_of_rel_iso_lt to_rel_iso_lt_of_rel_iso_lt\n\n",
 "to_rel_iso_lt_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem to_rel_iso_lt_apply (e : «expr ≃o » α β) (x : α) : e.to_rel_iso_lt x = e x :=\n  rfl\n#align to_rel_iso_lt_apply to_rel_iso_lt_apply\n\n",
 "to_order_iso_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem to_order_iso_to_equiv (e : «expr ≃ » α β) (h₁ : Monotone e) (h₂ : Monotone e.symm) :\n    (e.to_order_iso h₁ h₂).to_equiv = e :=\n  rfl\n#align to_order_iso_to_equiv to_order_iso_to_equiv\n\n",
 "to_fun_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem to_fun_eq_coe {f : «expr ≃o » α β} : f.to_fun = f :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "to_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem to_equiv_symm (e : «expr ≃o » α β) : e.to_equiv.symm = e.symm.to_equiv :=\n  rfl\n#align to_equiv_symm to_equiv_symm\n\n",
 "to_dual_top_equiv_symm_coe":
 "@[simp]\ntheorem to_dual_top_equiv_symm_coe [LE α] (a : α) :\n    WithBot.toDualTopEquiv.symm (toDual (a : WithTop α)) = ↑(toDual a) :=\n  rfl\n#align to_dual_top_equiv_symm_coe to_dual_top_equiv_symm_coe\n\n",
 "to_dual_top_equiv_symm_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem to_dual_top_equiv_symm_bot [LE α] : WithBot.toDualTopEquiv.symm («expr⊥» : «expr ᵒᵈ» (WithTop α)) = «expr⊥» :=\n  rfl\n#align to_dual_top_equiv_symm_bot to_dual_top_equiv_symm_bot\n\n",
 "to_dual_top_equiv_coe":
 "@[simp]\ntheorem to_dual_top_equiv_coe [LE α] (a : α) : WithBot.toDualTopEquiv ↑(toDual a) = toDual (a : WithTop α) :=\n  rfl\n#align to_dual_top_equiv_coe to_dual_top_equiv_coe\n\n",
 "to_dual_top_equiv_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem to_dual_top_equiv_bot [LE α] : WithBot.toDualTopEquiv («expr⊥» : WithBot («expr ᵒᵈ» α)) = «expr⊥» :=\n  rfl\n#align to_dual_top_equiv_bot to_dual_top_equiv_bot\n\n",
 "to_dual_bot_equiv_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem to_dual_bot_equiv_top [LE α] : WithTop.toDualBotEquiv («expr⊤» : WithTop («expr ᵒᵈ» α)) = «expr⊤» :=\n  rfl\n#align to_dual_bot_equiv_top to_dual_bot_equiv_top\n\n",
 "to_dual_bot_equiv_symm_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem to_dual_bot_equiv_symm_top [LE α] : WithTop.toDualBotEquiv.symm («expr⊤» : «expr ᵒᵈ» (WithBot α)) = «expr⊤» :=\n  rfl\n#align to_dual_bot_equiv_symm_top to_dual_bot_equiv_symm_top\n\n",
 "to_dual_bot_equiv_symm_coe":
 "@[simp]\ntheorem to_dual_bot_equiv_symm_coe [LE α] (a : α) :\n    WithTop.toDualBotEquiv.symm (toDual (a : WithBot α)) = ↑(toDual a) :=\n  rfl\n#align to_dual_bot_equiv_symm_coe to_dual_bot_equiv_symm_coe\n\n",
 "to_dual_bot_equiv_coe":
 "@[simp]\ntheorem to_dual_bot_equiv_coe [LE α] (a : α) : WithTop.toDualBotEquiv ↑(toDual a) = toDual (a : WithBot α) :=\n  rfl\n#align to_dual_bot_equiv_coe to_dual_bot_equiv_coe\n\n",
 "toOrderHom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →r » -/\n#print RelEmbedding.toOrderHom_injective /-\ntheorem RelEmbedding.toOrderHom_injective (f : «expr ↪r » ((· < ·) : α → α → Prop) ((· < ·) : β → β → Prop)) :\n    function.injective (f : «expr →r » ((· < ·) : α → α → Prop) ((· < ·) : β → β → Prop)).to_order_hom := fun _ _ h =>\n  f.injective h\n#align rel_embedding.to_order_hom_injective RelEmbedding.toOrderHom_injective\n-/\n\n",
 "symm_trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem symm_trans_apply (e₁ : «expr ≃o » α β) (e₂ : «expr ≃o » β γ) (c : γ) :\n    (e₁.trans e₂).symm c = e₁.symm (e₂.symm c) :=\n  rfl\n#align symm_trans_apply symm_trans_apply\n\n",
 "symm_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\ntheorem symm_trans (e₁ : «expr ≃o » α β) (e₂ : «expr ≃o » β γ) : (e₁.trans e₂).symm = e₂.symm.trans e₁.symm :=\n  rfl\n#align symm_trans symm_trans\n\n",
 "symm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem symm_symm (e : «expr ≃o » α β) : e.symm.symm = e :=\n  by\n  ext\n  rfl\n#align symm_symm symm_symm\n\n",
 "symm_refl":
 "@[simp]\ntheorem symm_refl (α : Type _) [LE α] : (refl α).symm = refl α :=\n  rfl\n#align symm_refl symm_refl\n\n",
 "symm_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\ntheorem symm_injective : function.injective (symm : «expr ≃o » α β → «expr ≃o » β α) := fun e e' h => by\n  rw [← e.symm_symm, h, e'.symm_symm]\n#align symm_injective symm_injective\n\n",
 "symm_dual_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem symm_dual_id : OrderHom.dual.symm OrderHom.id = (OrderHom.id : «expr →o » α α) :=\n  rfl\n#align symm_dual_id symm_dual_id\n\n",
 "symm_dual_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n@[simp]\ntheorem symm_dual_comp (g : «expr →o » («expr ᵒᵈ» β) («expr ᵒᵈ» γ)) (f : «expr →o » («expr ᵒᵈ» α) («expr ᵒᵈ» β)) :\n    OrderHom.dual.symm (g.comp f) = (OrderHom.dual.symm g).comp (OrderHom.dual.symm f) :=\n  rfl\n#align symm_dual_comp symm_dual_comp\n\n",
 "symm_apply_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\ntheorem symm_apply_le (e : «expr ≃o » α β) {x : α} {y : β} : e.symm y ≤ x ↔ y ≤ e x :=\n  e.symm_apply_rel\n#align symm_apply_le symm_apply_le\n\n",
 "symm_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\ntheorem symm_apply_eq (e : «expr ≃o » α β) {x : α} {y : β} : e.symm y = x ↔ y = e x :=\n  e.to_equiv.symm_apply_eq\n#align symm_apply_eq symm_apply_eq\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem symm_apply_apply (e : «expr ≃o » α β) (x : α) : e.symm (e x) = x :=\n  e.to_equiv.symm_apply_apply x\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\nprotected theorem surjective (e : «expr ≃o » α β) : function.surjective e :=\n  e.to_equiv.surjective\n#align surjective surjective\n\n",
 "snd_comp_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem snd_comp_prod (f : «expr →o » α β) (g : «expr →o » α γ) : snd.comp (f.prod g) = g :=\n  ext _ _ rfl\n#align snd_comp_prod snd_comp_prod\n\n",
 "refl_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem refl_trans (e : «expr ≃o » α β) : (refl α).trans e = e :=\n  by\n  ext x\n  rfl\n#align refl_trans refl_trans\n\n",
 "refl_to_equiv":
 "@[simp]\ntheorem refl_to_equiv : (refl α).to_equiv = Equiv.refl α :=\n  rfl\n#align refl_to_equiv refl_to_equiv\n\n",
 "refl_apply":
 "@[simp]\ntheorem refl_apply (x : α) : refl α x = x :=\n  rfl\n#align refl_apply refl_apply\n\n",
 "prod_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[mono]\ntheorem prod_mono {f₁ f₂ : «expr →o » α β} (hf : f₁ ≤ f₂) {g₁ g₂ : «expr →o » α γ} (hg : g₁ ≤ g₂) :\n    f₁.prod g₁ ≤ f₂.prod g₂ := fun x => Prod.le_def.2 ⟨hf _, hg _⟩\n#align prod_mono prod_mono\n\n",
 "prod_comm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem prod_comm_symm : (prodComm : «expr ≃o » (α × β) (β × α)).symm = prodComm :=\n  rfl\n#align prod_comm_symm prod_comm_symm\n\n",
 "order_hom_eq_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem order_hom_eq_id [subsingleton α] (g : «expr →o » α α) : g = OrderHom.id :=\n  subsingleton.elim _ _\n#align order_hom_eq_id order_hom_eq_id\n\n",
 "orderEmbeddingOfLTEmbedding_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n#print RelEmbedding.orderEmbeddingOfLTEmbedding_apply /-\n@[simp]\ntheorem RelEmbedding.orderEmbeddingOfLTEmbedding_apply [partial_order α] [partial_order β]\n    {f : «expr ↪r » ((· < ·) : α → α → Prop) ((· < ·) : β → β → Prop)} {x : α} :\n    RelEmbedding.orderEmbeddingOfLTEmbedding f x = f x :=\n  rfl\n#align rel_embedding.order_embedding_of_lt_embedding_apply RelEmbedding.orderEmbeddingOfLTEmbedding_apply\n-/\n\n",
 "of_rel_iso_lt_to_rel_iso_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem of_rel_iso_lt_to_rel_iso_lt {α β} [partial_order α] [partial_order β] (e : «expr ≃o » α β) :\n    ofRelIsoLT (toRelIsoLT e) = e := by\n  ext\n  simp\n#align of_rel_iso_lt_to_rel_iso_lt of_rel_iso_lt_to_rel_iso_lt\n\n",
 "of_rel_iso_lt_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem of_rel_iso_lt_symm {α β} [partial_order α] [partial_order β]\n    (e : «expr ≃r » ((· < ·) : α → α → Prop) ((· < ·) : β → β → Prop)) : (ofRelIsoLT e).symm = ofRelIsoLT e.symm :=\n  rfl\n#align of_rel_iso_lt_symm of_rel_iso_lt_symm\n\n",
 "of_rel_iso_lt_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem of_rel_iso_lt_apply {α β} [partial_order α] [partial_order β]\n    (e : «expr ≃r » ((· < ·) : α → α → Prop) ((· < ·) : β → β → Prop)) (x : α) : ofRelIsoLT e x = e x :=\n  rfl\n#align of_rel_iso_lt_apply of_rel_iso_lt_apply\n\n",
 "mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\nprotected theorem mono (f : «expr →o » α β) : Monotone f :=\n  f.monotone\n#align mono mono\n\n",
 "mk_le_mk":
 "@[simp]\ntheorem mk_le_mk {f g : α → β} {hf hg} : mk f hf ≤ mk g hg ↔ f ≤ g :=\n  iff.rfl\n#align mk_le_mk mk_le_mk\n\n",
 "map_top'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print OrderIso.map_top' /-\ntheorem OrderIso.map_top' [LE α] [partial_order β] (f : «expr ≃o » α β) {x : α} {y : β} (hx : ∀ x', x' ≤ x)\n    (hy : ∀ y', y' ≤ y) : f x = y :=\n  f.dual.map_bot' hx hy\n#align order_iso.map_top' OrderIso.map_top'\n-/\n\n",
 "map_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print OrderIso.map_top /-\ntheorem OrderIso.map_top [LE α] [partial_order β] [OrderTop α] [OrderTop β] (f : «expr ≃o » α β) :\n    f («expr⊤») = «expr⊤» :=\n  f.dual.map_bot\n#align order_iso.map_top OrderIso.map_top\n-/\n\n",
 "map_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print OrderIso.map_sup /-\ntheorem OrderIso.map_sup [SemilatticeSup α] [SemilatticeSup β] (f : «expr ≃o » α β) (x y : α) :\n    f («expr ⊔ » x y) = «expr ⊔ » (f x) (f y) :=\n  f.dual.map_inf x y\n#align order_iso.map_sup OrderIso.map_sup\n-/\n\n",
 "map_orderIso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print Codisjoint.map_orderIso /-\n/-- Note that this goal could also be stated `(codisjoint on f) a b` -/\ntheorem Codisjoint.map_orderIso [SemilatticeSup α] [OrderTop α] [SemilatticeSup β] [OrderTop β] {a b : α}\n    (f : «expr ≃o » α β) (ha : Codisjoint a b) : Codisjoint (f a) (f b) :=\n  by\n  rw [codisjoint_iff_le_sup, ← f.map_sup, ← f.map_top]\n  exact f.monotone ha.top_le\n#align codisjoint.map_order_iso Codisjoint.map_orderIso\n-/\n\n",
 "map_lt_map_iff":
 "#print map_lt_map_iff /-\ntheorem map_lt_map_iff (f : F) {a b : α} : f a < f b ↔ a < b :=\n  lt_iff_lt_of_le_iff_le' (map_le_map_iff f) (map_le_map_iff f)\n#align map_lt_map_iff map_lt_map_iff\n-/\n\n",
 "map_inv_lt_iff":
 "#print map_inv_lt_iff /-\n@[simp]\ntheorem map_inv_lt_iff (f : F) {a : α} {b : β} : equiv_like.inv f b < a ↔ b < f a :=\n  by\n  convert(map_lt_map_iff _).symm\n  exact (equiv_like.right_inv _ _).symm\n#align map_inv_lt_iff map_inv_lt_iff\n-/\n\n",
 "map_inv_le_iff":
 "#print map_inv_le_iff /-\n@[simp]\ntheorem map_inv_le_iff (f : F) {a : α} {b : β} : equiv_like.inv f b ≤ a ↔ b ≤ f a :=\n  by\n  convert(map_le_map_iff _).symm\n  exact (equiv_like.right_inv _ _).symm\n#align map_inv_le_iff map_inv_le_iff\n-/\n\n",
 "map_inf_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print OrderEmbedding.map_inf_le /-\ntheorem OrderEmbedding.map_inf_le [SemilatticeInf α] [SemilatticeInf β] (f : «expr ↪o » α β) (x y : α) :\n    f («expr ⊓ » x y) ≤ «expr ⊓ » (f x) (f y) :=\n  f.monotone.map_inf_le x y\n#align order_embedding.map_inf_le OrderEmbedding.map_inf_le\n-/\n\n",
 "map_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print OrderIso.map_inf /-\ntheorem OrderIso.map_inf [SemilatticeInf α] [SemilatticeInf β] (f : «expr ≃o » α β) (x y : α) :\n    f («expr ⊓ » x y) = «expr ⊓ » (f x) (f y) :=\n  by\n  refine' (f.to_order_embedding.map_inf_le x y).antisymm _\n  apply f.symm.le_iff_le.1\n  simpa using f.symm.to_order_embedding.map_inf_le (f x) (f y)\n#align order_iso.map_inf OrderIso.map_inf\n-/\n\n",
 "map_bot'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print OrderIso.map_bot' /-\ntheorem OrderIso.map_bot' [LE α] [partial_order β] (f : «expr ≃o » α β) {x : α} {y : β} (hx : ∀ x', x ≤ x')\n    (hy : ∀ y', y ≤ y') : f x = y := by\n  refine' le_antisymm _ (hy _)\n  rw [← f.apply_symm_apply y, f.map_rel_iff]\n  apply hx\n#align order_iso.map_bot' OrderIso.map_bot'\n-/\n\n",
 "map_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print OrderIso.map_bot /-\ntheorem OrderIso.map_bot [LE α] [partial_order β] [OrderBot α] [OrderBot β] (f : «expr ≃o » α β) :\n    f («expr⊥») = «expr⊥» :=\n  f.map_bot' (fun _ => bot_le) fun _ => bot_le\n#align order_iso.map_bot OrderIso.map_bot\n-/\n\n",
 "lt_map_inv_iff":
 "#print lt_map_inv_iff /-\n@[simp]\ntheorem lt_map_inv_iff (f : F) {a : α} {b : β} : a < equiv_like.inv f b ↔ f a < b :=\n  by\n  convert(map_lt_map_iff _).symm\n  exact (equiv_like.right_inv _ _).symm\n#align lt_map_inv_iff lt_map_inv_iff\n-/\n\n",
 "lt_iff_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem lt_iff_lt (e : «expr ≃o » α β) {x y : α} : e x < e y ↔ x < y :=\n  e.to_order_embedding.lt_iff_lt\n#align lt_iff_lt lt_iff_lt\n\n",
 "lt_embedding_apply":
 "@[simp]\ntheorem lt_embedding_apply (x : α) : f.lt_embedding x = f x :=\n  rfl\n#align lt_embedding_apply lt_embedding_apply\n\n",
 "le_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\ntheorem le_symm_apply (e : «expr ≃o » α β) {x : α} {y : β} : x ≤ e.symm y ↔ e x ≤ y :=\n  e.rel_symm_apply\n#align le_symm_apply le_symm_apply\n\n",
 "le_map_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print OrderEmbedding.le_map_sup /-\ntheorem OrderEmbedding.le_map_sup [SemilatticeSup α] [SemilatticeSup β] (f : «expr ↪o » α β) (x y : α) :\n    «expr ⊔ » (f x) (f y) ≤ f («expr ⊔ » x y) :=\n  f.monotone.le_map_sup x y\n#align order_embedding.le_map_sup OrderEmbedding.le_map_sup\n-/\n\n",
 "le_map_inv_iff":
 "#print le_map_inv_iff /-\n@[simp]\ntheorem le_map_inv_iff (f : F) {a : α} {b : β} : a ≤ equiv_like.inv f b ↔ f a ≤ b :=\n  by\n  convert(map_le_map_iff _).symm\n  exact (equiv_like.right_inv _ _).symm\n#align le_map_inv_iff le_map_inv_iff\n-/\n\n",
 "le_iff_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem le_iff_le (e : «expr ≃o » α β) {x y : α} : e x ≤ e y ↔ x ≤ y :=\n  e.map_rel_iff\n#align le_iff_le le_iff_le\n\n",
 "le_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem le_def {f g : «expr →o » α β} : f ≤ g ↔ ∀ x, f x ≤ g x :=\n  iff.rfl\n#align le_def le_def\n\n",
 "isCompl_iff":
 "#print OrderIso.isCompl_iff /-\ntheorem OrderIso.isCompl_iff {x y : α} : IsCompl x y ↔ IsCompl (f x) (f y) :=\n  ⟨f.is_compl, fun h => f.symm_apply_apply x ▸ f.symm_apply_apply y ▸ f.symm.is_compl h⟩\n#align order_iso.is_compl_iff OrderIso.isCompl_iff\n-/\n\n",
 "isCompl":
 "#print OrderIso.isCompl /-\ntheorem OrderIso.isCompl {x y : α} (h : IsCompl x y) : IsCompl (f x) (f y) :=\n  ⟨h.1.map_order_iso _, h.2.map_order_iso _⟩\n#align order_iso.is_compl OrderIso.isCompl\n-/\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\nprotected theorem injective (e : «expr ≃o » α β) : function.injective e :=\n  e.to_equiv.injective\n#align injective injective\n\n",
 "id_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem id_comp (f : «expr →o » α β) : comp id f = f := by\n  ext\n  rfl\n#align id_comp id_comp\n\n",
 "fun_unique_symm_apply":
 "@[simp]\ntheorem fun_unique_symm_apply {α β : Type _} [Unique α] [preorder β] :\n    ((funUnique α β).symm : β → α → β) = Function.const α :=\n  rfl\n#align fun_unique_symm_apply fun_unique_symm_apply\n\n",
 "fst_prod_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem fst_prod_snd : (fst : «expr →o » (α × β) α).prod snd = id :=\n  by\n  ext ⟨x, y⟩ : 2\n  rfl\n#align fst_prod_snd fst_prod_snd\n\n",
 "fst_comp_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem fst_comp_prod (f : «expr →o » α β) (g : «expr →o » α γ) : fst.comp (f.prod g) = f :=\n  ext _ _ rfl\n#align fst_comp_prod fst_comp_prod\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n-- See note [partially-applied ext lemmas]\n@[ext]\ntheorem ext {f g : «expr ≃o » α β} (h : (f : α → β) = g) : f = g :=\n  FunLike.coe_injective h\n#align ext ext\n\n",
 "eq_iff_eq":
 "@[simp]\ntheorem eq_iff_eq {a b} : f a = f b ↔ a = b :=\n  f.injective.eq_iff\n#align eq_iff_eq eq_iff_eq\n\n",
 "dual_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem dual_id : (OrderHom.id : «expr →o » α α).dual = OrderHom.id :=\n  rfl\n#align dual_id dual_id\n\n",
 "dual_dual_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n@[simp]\ntheorem dual_dual_symm_apply (a : «expr ᵒᵈ» («expr ᵒᵈ» α)) : (dualDual α).symm a = ofDual (ofDual a) :=\n  rfl\n#align dual_dual_symm_apply dual_dual_symm_apply\n\n",
 "dual_dual_apply":
 "@[simp]\ntheorem dual_dual_apply (a : α) : dualDual α a = toDual (toDual a) :=\n  rfl\n#align dual_dual_apply dual_dual_apply\n\n",
 "dual_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem dual_comp (g : «expr →o » β γ) (f : «expr →o » α β) : (g.comp f).dual = g.dual.comp f.dual :=\n  rfl\n#align dual_comp dual_comp\n\n",
 "disjoint_map_orderIso_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print disjoint_map_orderIso_iff /-\n@[simp]\ntheorem disjoint_map_orderIso_iff [SemilatticeInf α] [OrderBot α] [SemilatticeInf β] [OrderBot β] {a b : α}\n    (f : «expr ≃o » α β) : Disjoint (f a) (f b) ↔ Disjoint a b :=\n  ⟨fun h => f.symm_apply_apply a ▸ f.symm_apply_apply b ▸ h.map_order_iso f.symm, fun h => h.map_order_iso f⟩\n#align disjoint_map_order_iso_iff disjoint_map_orderIso_iff\n-/\n\n",
 "curry_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem curry_symm_apply (f : «expr →o » α («expr →o » β γ)) (x : α × β) : curry.symm f x = f x.1 x.2 :=\n  rfl\n#align curry_symm_apply curry_symm_apply\n\n",
 "curry_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem curry_apply (f : «expr →o » (α × β) γ) (x : α) (y : β) : curry f x y = f (x, y) :=\n  rfl\n#align curry_apply curry_apply\n\n",
 "copy_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem copy_eq (f : «expr →o » α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  FunLike.ext' h\n#align copy_eq copy_eq\n\n",
 "const_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem const_comp (f : «expr →o » α β) (c : γ) : (const β c).comp f = const α c :=\n  rfl\n#align const_comp const_comp\n\n",
 "complementedLattice_iff":
 "#print OrderIso.complementedLattice_iff /-\ntheorem OrderIso.complementedLattice_iff : ComplementedLattice α ↔ ComplementedLattice β :=\n  ⟨by\n    intro\n    exact f.complemented_lattice, by\n    intro\n    exact f.symm.complemented_lattice⟩\n#align order_iso.complemented_lattice_iff OrderIso.complementedLattice_iff\n-/\n\n",
 "complementedLattice":
 "#print OrderIso.complementedLattice /-\ntheorem OrderIso.complementedLattice [ComplementedLattice α] : ComplementedLattice β :=\n  ⟨fun x => by\n    obtain ⟨y, hy⟩ := exists_is_compl (f.symm x)\n    rw [← f.symm_apply_apply y] at hy\n    refine' ⟨f y, f.symm.is_compl_iff.2 hy⟩⟩\n#align order_iso.complemented_lattice OrderIso.complementedLattice\n-/\n\n",
 "comp_prod_comp_same":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem comp_prod_comp_same (f₁ f₂ : «expr →o » β γ) (g : «expr →o » α β) :\n    (f₁.comp g).prod (f₂.comp g) = (f₁.prod f₂).comp g :=\n  rfl\n#align comp_prod_comp_same comp_prod_comp_same\n\n",
 "comp_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[mono]\ntheorem comp_mono ⦃g₁ g₂ : «expr →o » β γ⦄ (hg : g₁ ≤ g₂) ⦃f₁ f₂ : «expr →o » α β⦄ (hf : f₁ ≤ f₂) :\n    g₁.comp f₁ ≤ g₂.comp f₂ := fun x => (hg _).trans (g₂.mono <| hf _)\n#align comp_mono comp_mono\n\n",
 "comp_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem comp_id (f : «expr →o » α β) : comp f id = f := by\n  ext\n  rfl\n#align comp_id comp_id\n\n",
 "comp_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem comp_const (γ : Type _) [preorder γ] (f : «expr →o » α β) (c : α) : f.comp (const γ c) = const γ (f c) :=\n  rfl\n#align comp_const comp_const\n\n",
 "coe_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_trans (e : «expr ≃o » α β) (e' : «expr ≃o » β γ) : «expr⇑ » (e.trans e') = e' ∘ e :=\n  rfl\n#align coe_trans coe_trans\n\n",
 "coe_to_order_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_order_iso (e : «expr ≃ » α β) (h₁ : Monotone e) (h₂ : Monotone e.symm) :\n    «expr⇑ » (e.to_order_iso h₁ h₂) = e :=\n  rfl\n#align coe_to_order_iso coe_to_order_iso\n\n",
 "coe_to_order_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_order_embedding (e : «expr ≃o » α β) : «expr⇑ » e.to_order_embedding = e :=\n  rfl\n#align coe_to_order_embedding coe_to_order_embedding\n\n",
 "coe_to_dual_top_equiv_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem coe_to_dual_top_equiv_eq [LE α] :\n    (WithBot.toDualTopEquiv : WithBot («expr ᵒᵈ» α) → «expr ᵒᵈ» (WithTop α)) = toDual ∘ WithBot.ofDual :=\n  funext fun _ => rfl\n#align coe_to_dual_top_equiv_eq coe_to_dual_top_equiv_eq\n\n",
 "coe_to_dual_bot_equiv_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem coe_to_dual_bot_equiv_eq [LE α] :\n    (WithTop.toDualBotEquiv : WithTop («expr ᵒᵈ» α) → «expr ᵒᵈ» (WithBot α)) = toDual ∘ WithTop.ofDual :=\n  funext fun _ => rfl\n#align coe_to_dual_bot_equiv_eq coe_to_dual_bot_equiv_eq\n\n",
 "coe_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_refl : «expr⇑ » (refl α) = id :=\n  rfl\n#align coe_refl coe_refl\n\n",
 "coe_prod_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem coe_prod_comm : «expr⇑ » (prodComm : «expr ≃o » (α × β) (β × α)) = Prod.swap :=\n  rfl\n#align coe_prod_comm coe_prod_comm\n\n",
 "coe_of_strict_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_of_strict_mono {α β} [linear_order α] [preorder β] {f : α → β} (h : StrictMono f) :\n    «expr⇑ » (ofStrictMono f h) = f :=\n  rfl\n#align coe_of_strict_mono coe_of_strict_mono\n\n",
 "coe_of_map_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_of_map_le_iff {α β} [partial_order α] [preorder β] {f : α → β} (h) : «expr⇑ » (ofMapLEIff f h) = f :=\n  rfl\n#align coe_of_map_le_iff coe_of_map_le_iff\n\n",
 "coe_le_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp, norm_cast]\ntheorem coe_le_coe {f g : «expr →o » α β} : (f : α → β) ≤ g ↔ f ≤ g :=\n  iff.rfl\n#align coe_le_coe coe_le_coe\n\n",
 "coe_fun_mk":
 "@[simp]\ntheorem coe_fun_mk {f : α → β} (hf : Monotone f) : (mk f hf : α → β) = f :=\n  rfl\n#align coe_fun_mk coe_fun_mk\n\n",
 "coe_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem coe_eq (f : «expr →o » α β) : coe f = f := by ext <;> rfl\n#align coe_eq coe_eq\n\n",
 "coe_dual_dual_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_dual_dual_symm : «expr⇑ » (dualDual α).symm = ofDual ∘ ofDual :=\n  rfl\n#align coe_dual_dual_symm coe_dual_dual_symm\n\n",
 "coe_dual_dual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_dual_dual : «expr⇑ » (dualDual α) = toDual ∘ toDual :=\n  rfl\n#align coe_dual_dual coe_dual_dual\n\n",
 "coe_copy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_copy (f : «expr →o » α β) (f' : α → β) (h : f' = f) : «expr⇑ » (f.copy f' h) = f' :=\n  rfl\n#align coe_copy coe_copy\n\n",
 "codisjoint_map_orderIso_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print codisjoint_map_orderIso_iff /-\n@[simp]\ntheorem codisjoint_map_orderIso_iff [SemilatticeSup α] [OrderTop α] [SemilatticeSup β] [OrderTop β] {a b : α}\n    (f : «expr ≃o » α β) : Codisjoint (f a) (f b) ↔ Codisjoint a b :=\n  ⟨fun h => f.symm_apply_apply a ▸ f.symm_apply_apply b ▸ h.map_order_iso f.symm, fun h => h.map_order_iso f⟩\n#align codisjoint_map_order_iso_iff codisjoint_map_orderIso_iff\n-/\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\nprotected theorem bijective (e : «expr ≃o » α β) : function.bijective e :=\n  e.to_equiv.bijective\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem apply_symm_apply (e : «expr ≃o » α β) (x : β) : e (e.symm x) = x :=\n  e.to_equiv.apply_symm_apply x\n#align apply_symm_apply apply_symm_apply\n\n",
 "apply_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[mono]\ntheorem apply_mono {f g : «expr →o » α β} {x y : α} (h₁ : f ≤ g) (h₂ : x ≤ y) : f x ≤ g y :=\n  (h₁ x).trans <| g.mono h₂\n#align apply_mono apply_mono\n\n",
 "apply_eq_iff_eq_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\ntheorem apply_eq_iff_eq_symm_apply (e : «expr ≃o » α β) (x : α) (y : β) : e x = y ↔ x = e.symm y :=\n  e.to_equiv.apply_eq_iff_eq_symm_apply\n#align apply_eq_iff_eq_symm_apply apply_eq_iff_eq_symm_apply\n\n",
 "apply_eq_iff_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n@[simp]\ntheorem apply_eq_iff_eq (e : «expr ≃o » α β) {x y : α} : e x = e y ↔ x = y :=\n  e.to_equiv.apply_eq_iff_eq\n#align apply_eq_iff_eq apply_eq_iff_eq\n\n",
 "acc":
 "protected theorem acc (a : α) : acc (· < ·) (f a) → acc (· < ·) a :=\n  f.lt_embedding.acc a\n#align acc acc\n\n",
 "StrictMono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print StrictMono /-\nprotected theorem StrictMono (e : «expr ≃o » α β) : StrictMono e :=\n  e.to_order_embedding.strict_mono\n#align strict_mono StrictMono\n-/\n\n",
 "Monotone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print Monotone /-\nprotected theorem Monotone (e : «expr ≃o » α β) : Monotone e :=\n  e.to_order_embedding.monotone\n#align monotone Monotone\n-/\n\n",
 "IsWellOrder":
 "#print IsWellOrder /-\nprotected theorem IsWellOrder [IsWellOrder β (· < ·)] : IsWellOrder α (· < ·) :=\n  f.lt_embedding.is_well_order\n#align is_well_order IsWellOrder\n-/\n\n"}