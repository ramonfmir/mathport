{"top_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem top_apply (a : α) : («expr⊤» : InfₛHom α β) a = «expr⊤» :=\n  rfl\n#align top_apply top_apply\n\n",
 "to_fun_eq_coe":
 "@[simp]\ntheorem to_fun_eq_coe {f : CompleteLatticeHom α β} : f.to_fun = (f : α → β) :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "symm_dual_id":
 "@[simp]\ntheorem symm_dual_id : CompleteLatticeHom.dual.symm (CompleteLatticeHom.id _) = CompleteLatticeHom.id α :=\n  rfl\n#align symm_dual_id symm_dual_id\n\n",
 "symm_dual_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n@[simp]\ntheorem symm_dual_comp (g : CompleteLatticeHom («expr ᵒᵈ» β) («expr ᵒᵈ» γ))\n    (f : CompleteLatticeHom («expr ᵒᵈ» α) («expr ᵒᵈ» β)) :\n    CompleteLatticeHom.dual.symm (g.comp f) = (CompleteLatticeHom.dual.symm g).comp (CompleteLatticeHom.dual.symm f) :=\n  rfl\n#align symm_dual_comp symm_dual_comp\n\n",
 "supSupₛHom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print supSupₛHom_apply /-\n@[simp, norm_cast]\ntheorem supSupₛHom_apply : supSupₛHom x = «expr ⊔ » x.1 x.2 :=\n  rfl\n#align sup_Sup_hom_apply supSupₛHom_apply\n-/\n\n",
 "set_preimage_id":
 "@[simp]\ntheorem set_preimage_id : setPreimage (id : α → α) = CompleteLatticeHom.id _ :=\n  rfl\n#align set_preimage_id set_preimage_id\n\n",
 "set_preimage_comp":
 "-- This lemma can't be `simp` because `g ∘ f` matches anything (`id ∘ f = f` synctatically)\ntheorem set_preimage_comp (g : β → γ) (f : α → β) : setPreimage (g ∘ f) = (setPreimage f).comp (setPreimage g) :=\n  rfl\n#align set_preimage_comp set_preimage_comp\n\n",
 "set_preimage_apply":
 "@[simp]\ntheorem set_preimage_apply (f : α → β) (s : Set β) : setPreimage f s = s.preimage f :=\n  rfl\n#align set_preimage_apply set_preimage_apply\n\n",
 "map_supᵢ₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n#print map_supᵢ₂ /-\ntheorem map_supᵢ₂ [SupSet α] [SupSet β] [SupₛHomClass F α β] (f : F) (g : ∀ i, κ i → α) :\n    f («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (g i j)) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f (g i j)) :=\n  by simp_rw [map_supᵢ]\n#align map_supr₂ map_supᵢ₂\n-/\n\n",
 "map_supᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n#print map_supᵢ /-\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem map_supᵢ [SupSet α] [SupSet β] [SupₛHomClass F α β] (f : F) (g : ι → α) :\n    f («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (g i)) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f (g i)) :=\n  by rw [supᵢ, supᵢ, map_Sup, Set.range_comp]\n#align map_supr map_supᵢ\n-/\n\n",
 "map_infᵢ":
 "/- warning: map_infi₂ clashes with map_infi -> map_infᵢ\nCase conversion may be inaccurate. Consider using '#align map_infi₂ map_infᵢₓ'. -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n#print map_infᵢ /-\ntheorem map_infᵢ [InfSet α] [InfSet β] [InfₛHomClass F α β] (f : F) (g : ∀ i, κ i → α) :\n    f («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (g i j)) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f (g i j)) :=\n  by simp_rw [map_infᵢ]\n#align map_infi₂ map_infᵢ\n-/\n\n",
 "infInfₛHom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print infInfₛHom_apply /-\n@[simp, norm_cast]\ntheorem infInfₛHom_apply : infInfₛHom x = «expr ⊓ » x.1 x.2 :=\n  rfl\n#align inf_Inf_hom_apply infInfₛHom_apply\n-/\n\n",
 "image_supₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print Set.image_supₛ /-\ntheorem Set.image_supₛ {f : α → β} (s : Set (Set α)) : «expr '' » f (supₛ s) = supₛ («expr '' » (image f) s) :=\n  by\n  ext b\n  simp only [Sup_eq_sUnion, mem_image, mem_sUnion, exists_prop, sUnion_image, mem_Union]\n  constructor\n  · rintro ⟨a, ⟨t, ht₁, ht₂⟩, rfl⟩\n    exact ⟨t, ht₁, a, ht₂, rfl⟩\n  · rintro ⟨t, ht₁, a, ht₂, rfl⟩\n    exact ⟨a, ⟨t, ht₁, ht₂⟩, rfl⟩\n#align set.image_Sup Set.image_supₛ\n-/\n\n",
 "id_comp":
 "@[simp]\ntheorem id_comp (f : CompleteLatticeHom α β) : (CompleteLatticeHom.id β).comp f = f :=\n  ext fun a => rfl\n#align id_comp id_comp\n\n",
 "id_apply":
 "@[simp]\ntheorem id_apply (a : α) : CompleteLatticeHom.id α a = a :=\n  rfl\n#align id_apply id_apply\n\n",
 "ext":
 "@[ext]\ntheorem ext {f g : CompleteLatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  FunLike.ext f g h\n#align ext ext\n\n",
 "dual_id":
 "@[simp]\ntheorem dual_id : (CompleteLatticeHom.id α).dual = CompleteLatticeHom.id _ :=\n  rfl\n#align dual_id dual_id\n\n",
 "dual_comp":
 "@[simp]\ntheorem dual_comp (g : CompleteLatticeHom β γ) (f : CompleteLatticeHom α β) : (g.comp f).dual = g.dual.comp f.dual :=\n  rfl\n#align dual_comp dual_comp\n\n",
 "copy_eq":
 "theorem copy_eq (f : CompleteLatticeHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  FunLike.ext' h\n#align copy_eq copy_eq\n\n",
 "comp_id":
 "@[simp]\ntheorem comp_id (f : CompleteLatticeHom α β) : f.comp (CompleteLatticeHom.id α) = f :=\n  ext fun a => rfl\n#align comp_id comp_id\n\n",
 "comp_assoc":
 "@[simp]\ntheorem comp_assoc (f : CompleteLatticeHom γ δ) (g : CompleteLatticeHom β γ) (h : CompleteLatticeHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n#align comp_assoc comp_assoc\n\n",
 "comp_apply":
 "@[simp]\ntheorem comp_apply (f : CompleteLatticeHom β γ) (g : CompleteLatticeHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n#align comp_apply comp_apply\n\n",
 "coe_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem coe_top : «expr⇑ » («expr⊤» : InfₛHom α β) = «expr⊤» :=\n  rfl\n#align coe_top coe_top\n\n",
 "coe_set_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_set_preimage (f : α → β) : «expr⇑ » (setPreimage f) = preimage f :=\n  rfl\n#align coe_set_preimage coe_set_preimage\n\n",
 "coe_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_id : «expr⇑ » (CompleteLatticeHom.id α) = id :=\n  rfl\n#align coe_id coe_id\n\n",
 "coe_copy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_copy (f : CompleteLatticeHom α β) (f' : α → β) (h : f' = f) : «expr⇑ » (f.copy f' h) = f' :=\n  rfl\n#align coe_copy coe_copy\n\n",
 "coe_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_comp (f : CompleteLatticeHom β γ) (g : CompleteLatticeHom α β) : «expr⇑ » (f.comp g) = f ∘ g :=\n  rfl\n#align coe_comp coe_comp\n\n",
 "coe_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem coe_bot : «expr⇑ » («expr⊥» : SupₛHom α β) = «expr⊥» :=\n  rfl\n#align coe_bot coe_bot\n\n",
 "cancel_right":
 "theorem cancel_right {g₁ g₂ : CompleteLatticeHom β γ} {f : CompleteLatticeHom α β} (hf : surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| FunLike.ext_iff.1 h, congr_arg _⟩\n#align cancel_right cancel_right\n\n",
 "cancel_left":
 "theorem cancel_left {g : CompleteLatticeHom β γ} {f₁ f₂ : CompleteLatticeHom α β} (hg : injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n#align cancel_left cancel_left\n\n",
 "bot_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_apply (a : α) : («expr⊥» : SupₛHom α β) a = «expr⊥» :=\n  rfl\n#align bot_apply bot_apply\n\n"}