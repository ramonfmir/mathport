{"top_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.top_le /-\ntheorem Codisjoint.top_le : Codisjoint a b → «expr⊤» ≤ «expr ⊔ » a b :=\n  @Disjoint.le_bot («expr ᵒᵈ» α) _ _ _ _\n#align codisjoint.top_le Codisjoint.top_le\n-/\n\n",
 "top_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print top_disjoint /-\n@[simp]\ntheorem top_disjoint : Disjoint («expr⊤») a ↔ a = «expr⊥» :=\n  ⟨fun h => bot_unique <| h le_top le_rfl, fun h x htop ha => ha.trans_eq h⟩\n#align top_disjoint top_disjoint\n-/\n\n",
 "symmetric_disjoint":
 "#print symmetric_disjoint /-\ntheorem symmetric_disjoint : symmetric (Disjoint : α → α → Prop) :=\n  Disjoint.symm\n#align symmetric_disjoint symmetric_disjoint\n-/\n\n",
 "symmetric_codisjoint":
 "#print symmetric_codisjoint /-\ntheorem symmetric_codisjoint : symmetric (Codisjoint : α → α → Prop) :=\n  Codisjoint.symm\n#align symmetric_codisjoint symmetric_codisjoint\n-/\n\n",
 "symm":
 "#print symm /-\n@[symm]\nprotected theorem symm (h : IsCompl x y) : IsCompl y x :=\n  ⟨h.1.symm, h.2.symm⟩\n#align symm symm\n-/\n\n",
 "sup_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.sup_right' /-\ntheorem Codisjoint.sup_right' (h : Codisjoint a b) : Codisjoint a («expr ⊔ » c b) :=\n  h.mono_right le_sup_right\n#align codisjoint.sup_right' Codisjoint.sup_right'\n-/\n\n",
 "sup_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.sup_right /-\ntheorem Codisjoint.sup_right (h : Codisjoint a b) : Codisjoint a («expr ⊔ » b c) :=\n  h.mono_right le_sup_left\n#align codisjoint.sup_right Codisjoint.sup_right\n-/\n\n",
 "sup_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.sup_left' /-\ntheorem Codisjoint.sup_left' (h : Codisjoint a b) : Codisjoint («expr ⊔ » c a) b :=\n  h.mono_left le_sup_right\n#align codisjoint.sup_left' Codisjoint.sup_left'\n-/\n\n",
 "sup_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.sup_left /-\ntheorem Codisjoint.sup_left (h : Codisjoint a b) : Codisjoint («expr ⊔ » a c) b :=\n  h.mono_left le_sup_left\n#align codisjoint.sup_left Codisjoint.sup_left\n-/\n\n",
 "sup_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem sup_inf {x' y'} (h : IsCompl x y) (h' : IsCompl x' y') : IsCompl («expr ⊔ » x x') («expr ⊓ » y y') :=\n  of_eq\n    (by rw [inf_sup_right, ← inf_assoc, h.inf_eq_bot, bot_inf_eq, bot_sup_eq, inf_left_comm, h'.inf_eq_bot, inf_bot_eq])\n    (by\n      rw [sup_inf_left, @sup_comm _ _ x, sup_assoc, h.sup_eq_top, sup_top_eq, top_inf_eq, sup_assoc, sup_left_comm,\n        h'.sup_eq_top, sup_top_eq])\n#align sup_inf sup_inf\n\n",
 "sup_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem sup_eq_top (h : IsCompl x y) : «expr ⊔ » x y = «expr⊤» :=\n  h.codisjoint.eq_top\n#align sup_eq_top sup_eq_top\n\n",
 "right_unique":
 "theorem right_unique (hxy : IsCompl x y) (hxz : IsCompl x z) : y = z :=\n  le_antisymm (hxz.antitone hxy <| le_refl x) (hxy.antitone hxz <| le_refl x)\n#align right_unique right_unique\n\n",
 "right_le_iff":
 "theorem right_le_iff (h : IsCompl x y) : y ≤ z ↔ Codisjoint z x :=\n  h.symm.left_le_iff\n#align right_le_iff right_le_iff\n\n",
 "of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem of_le (h₁ : «expr ⊓ » x y ≤ «expr⊥») (h₂ : «expr⊤» ≤ «expr ⊔ » x y) : IsCompl x y :=\n  ⟨disjoint_iff_inf_le.mpr h₁, codisjoint_iff_le_sup.mpr h₂⟩\n#align of_le of_le\n\n",
 "of_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print of_eq /-\ntheorem of_eq (h₁ : «expr ⊓ » x y = «expr⊥») (h₂ : «expr ⊔ » x y = «expr⊤») : IsCompl x y :=\n  ⟨disjoint_iff.mpr h₁, codisjoint_iff.mpr h₂⟩\n#align of_eq of_eq\n-/\n\n",
 "of_dual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem of_dual {a b : «expr ᵒᵈ» α} (h : IsCompl a b) : IsCompl (ofDual a) (ofDual b) :=\n  ⟨h.2, h.1⟩\n#align of_dual of_dual\n\n",
 "of_disjoint_inf_of_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Disjoint.of_disjoint_inf_of_le' /-\ntheorem Disjoint.of_disjoint_inf_of_le' (h : Disjoint («expr ⊓ » a b) c) (hle : b ≤ c) : Disjoint a b :=\n  disjoint_iff.2 <| h.eq_bot_of_le <| inf_le_of_right_le hle\n#align disjoint.of_disjoint_inf_of_le' Disjoint.of_disjoint_inf_of_le'\n-/\n\n",
 "of_disjoint_inf_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Disjoint.of_disjoint_inf_of_le /-\ntheorem Disjoint.of_disjoint_inf_of_le (h : Disjoint («expr ⊓ » a b) c) (hle : a ≤ c) : Disjoint a b :=\n  disjoint_iff.2 <| h.eq_bot_of_le <| inf_le_of_left_le hle\n#align disjoint.of_disjoint_inf_of_le Disjoint.of_disjoint_inf_of_le\n-/\n\n",
 "of_codisjoint_sup_of_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.of_codisjoint_sup_of_le' /-\ntheorem Codisjoint.of_codisjoint_sup_of_le' (h : Codisjoint («expr ⊔ » a b) c) (hle : c ≤ b) : Codisjoint a b :=\n  @Disjoint.of_disjoint_inf_of_le' («expr ᵒᵈ» α) _ _ _ _ _ h hle\n#align codisjoint.of_codisjoint_sup_of_le' Codisjoint.of_codisjoint_sup_of_le'\n-/\n\n",
 "of_codisjoint_sup_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Codisjoint.of_codisjoint_sup_of_le /-\ntheorem Codisjoint.of_codisjoint_sup_of_le (h : Codisjoint («expr ⊔ » a b) c) (hle : c ≤ a) : Codisjoint a b :=\n  @Disjoint.of_disjoint_inf_of_le («expr ᵒᵈ» α) _ _ _ _ _ h hle\n#align codisjoint.of_codisjoint_sup_of_le Codisjoint.of_codisjoint_sup_of_le\n-/\n\n",
 "ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print Codisjoint.ne /-\n/- TODO: Rename `codisjoint.eq_top` to `codisjoint.sup_eq` and `codisjoint.eq_top_of_self` to\n`codisjoint.eq_top` -/\ntheorem Codisjoint.ne (ha : a ≠ «expr⊤») (hab : Codisjoint a b) : a ≠ b := fun h =>\n  ha <| codisjoint_self.1 <| by rwa [← h] at hab\n#align codisjoint.ne Codisjoint.ne\n-/\n\n",
 "mono_right":
 "#print Codisjoint.mono_right /-\ntheorem Codisjoint.mono_right : b ≤ c → Codisjoint a b → Codisjoint a c :=\n  Codisjoint.mono le_rfl\n#align codisjoint.mono_right Codisjoint.mono_right\n-/\n\n",
 "mono_left":
 "#print Codisjoint.mono_left /-\ntheorem Codisjoint.mono_left (h : a ≤ b) : Codisjoint a c → Codisjoint b c :=\n  Codisjoint.mono h le_rfl\n#align codisjoint.mono_left Codisjoint.mono_left\n-/\n\n",
 "mono":
 "#print Codisjoint.mono /-\ntheorem Codisjoint.mono (h₁ : a ≤ b) (h₂ : c ≤ d) : Codisjoint a c → Codisjoint b d := fun h x ha hc =>\n  h (h₁.trans ha) (h₂.trans hc)\n#align codisjoint.mono Codisjoint.mono\n-/\n\n",
 "left_unique":
 "theorem left_unique (hxz : IsCompl x z) (hyz : IsCompl y z) : x = y :=\n  hxz.symm.right_unique hyz.symm\n#align left_unique left_unique\n\n",
 "left_le_of_le_sup_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Disjoint.left_le_of_le_sup_right /-\ntheorem Disjoint.left_le_of_le_sup_right (h : a ≤ «expr ⊔ » b c) (hd : Disjoint a c) : a ≤ b :=\n  le_of_inf_le_sup_le (le_trans hd.le_bot bot_le) <| sup_le h le_sup_right\n#align disjoint.left_le_of_le_sup_right Disjoint.left_le_of_le_sup_right\n-/\n\n",
 "left_le_of_le_sup_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print Disjoint.left_le_of_le_sup_left /-\ntheorem Disjoint.left_le_of_le_sup_left (h : a ≤ «expr ⊔ » c b) (hd : Disjoint a c) : a ≤ b :=\n  hd.left_le_of_le_sup_right <| by rwa [sup_comm]\n#align disjoint.left_le_of_le_sup_left Disjoint.left_le_of_le_sup_left\n-/\n\n",
 "left_le_of_le_inf_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Codisjoint.left_le_of_le_inf_right /-\ntheorem Codisjoint.left_le_of_le_inf_right (h : «expr ⊓ » a b ≤ c) (hd : Codisjoint b c) : a ≤ c :=\n  @Disjoint.left_le_of_le_sup_right («expr ᵒᵈ» α) _ _ _ _ _ h hd.symm\n#align codisjoint.left_le_of_le_inf_right Codisjoint.left_le_of_le_inf_right\n-/\n\n",
 "left_le_of_le_inf_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Codisjoint.left_le_of_le_inf_left /-\ntheorem Codisjoint.left_le_of_le_inf_left (h : «expr ⊓ » b a ≤ c) (hd : Codisjoint b c) : a ≤ c :=\n  hd.left_le_of_le_inf_right <| by rwa [inf_comm]\n#align codisjoint.left_le_of_le_inf_left Codisjoint.left_le_of_le_inf_left\n-/\n\n",
 "left_le_iff":
 "theorem left_le_iff (h : IsCompl x y) : x ≤ z ↔ Codisjoint z y :=\n  h.dual.le_left_iff\n#align left_le_iff left_le_iff\n\n",
 "le_sup_right_iff_inf_left_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem le_sup_right_iff_inf_left_le {a b} (h : IsCompl x y) : a ≤ «expr ⊔ » b y ↔ «expr ⊓ » a x ≤ b :=\n  ⟨h.inf_left_le_of_le_sup_right, h.symm.dual.inf_left_le_of_le_sup_right⟩\n#align le_sup_right_iff_inf_left_le le_sup_right_iff_inf_left_le\n\n",
 "le_right_iff":
 "theorem le_right_iff (h : IsCompl x y) : z ≤ y ↔ Disjoint z x :=\n  h.symm.le_left_iff\n#align le_right_iff le_right_iff\n\n",
 "le_of_codisjoint":
 "#print Disjoint.le_of_codisjoint /-\ntheorem Disjoint.le_of_codisjoint (hab : Disjoint a b) (hbc : Codisjoint b c) : a ≤ c :=\n  by\n  rw [← @inf_top_eq _ _ _ a, ← @bot_sup_eq _ _ _ c, ← hab.eq_bot, ← hbc.eq_top, sup_inf_right]\n  exact inf_le_inf_right _ le_sup_left\n#align disjoint.le_of_codisjoint Disjoint.le_of_codisjoint\n-/\n\n",
 "le_left_iff":
 "theorem le_left_iff (h : IsCompl x y) : z ≤ x ↔ Disjoint z y :=\n  h.disjoint_right_iff.symm\n#align le_left_iff le_left_iff\n\n",
 "le_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print Disjoint.le_bot /-\ntheorem Disjoint.le_bot : Disjoint a b → «expr ⊓ » a b ≤ «expr⊥» :=\n  disjoint_iff_inf_le.mp\n#align disjoint.le_bot Disjoint.le_bot\n-/\n\n",
 "isCompl_top_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print isCompl_top_bot /-\ntheorem isCompl_top_bot : IsCompl («expr⊤» : α) («expr⊥») :=\n  IsCompl.of_eq inf_bot_eq top_sup_eq\n#align is_compl_top_bot isCompl_top_bot\n-/\n\n",
 "isCompl_toDual_iff":
 "#print isCompl_toDual_iff /-\n@[simp]\ntheorem isCompl_toDual_iff : IsCompl (toDual a) (toDual b) ↔ IsCompl a b :=\n  ⟨IsCompl.ofDual, IsCompl.dual⟩\n#align is_compl_to_dual_iff isCompl_toDual_iff\n-/\n\n",
 "isCompl_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print isCompl_ofDual_iff /-\n@[simp]\ntheorem isCompl_ofDual_iff {a b : «expr ᵒᵈ» α} : IsCompl (ofDual a) (ofDual b) ↔ IsCompl a b :=\n  ⟨IsCompl.dual, IsCompl.ofDual⟩\n#align is_compl_of_dual_iff isCompl_ofDual_iff\n-/\n\n",
 "isCompl_iff":
 "#print isCompl_iff /-\nprotected theorem isCompl_iff [BoundedOrder α] [BoundedOrder β] {x y : α × β} :\n    IsCompl x y ↔ IsCompl x.1 y.1 ∧ IsCompl x.2 y.2 := by\n  simp_rw [isCompl_iff, Prod.disjoint_iff, Prod.codisjoint_iff, and_and_and_comm]\n#align is_compl_iff isCompl_iff\n-/\n\n",
 "isCompl_bot_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print isCompl_bot_top /-\ntheorem isCompl_bot_top : IsCompl («expr⊥» : α) («expr⊤») :=\n  IsCompl.of_eq bot_inf_eq sup_top_eq\n#align is_compl_bot_top isCompl_bot_top\n-/\n\n",
 "inf_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem inf_sup {x' y'} (h : IsCompl x y) (h' : IsCompl x' y') : IsCompl («expr ⊓ » x x') («expr ⊔ » y y') :=\n  (h.symm.sup_inf h'.symm).symm\n#align inf_sup inf_sup\n\n",
 "inf_right_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem inf_right_eq_bot_iff (h : IsCompl y z) : «expr ⊓ » x z = «expr⊥» ↔ x ≤ y :=\n  h.symm.inf_left_eq_bot_iff\n#align inf_right_eq_bot_iff inf_right_eq_bot_iff\n\n",
 "inf_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Disjoint.inf_right' /-\ntheorem Disjoint.inf_right' (h : Disjoint a b) : Disjoint a («expr ⊓ » c b) :=\n  h.mono_right inf_le_right\n#align disjoint.inf_right' Disjoint.inf_right'\n-/\n\n",
 "inf_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Codisjoint.inf_right /-\ntheorem Codisjoint.inf_right (hb : Codisjoint a b) (hc : Codisjoint a c) : Codisjoint a («expr ⊓ » b c) :=\n  codisjoint_inf_right.2 ⟨hb, hc⟩\n#align codisjoint.inf_right Codisjoint.inf_right\n-/\n\n",
 "inf_left_le_of_le_sup_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_left_le_of_le_sup_right (h : IsCompl x y) (hle : a ≤ «expr ⊔ » b y) : «expr ⊓ » a x ≤ b :=\n  calc\n    «expr ⊓ » a x ≤ «expr ⊓ » («expr ⊔ » b y) x := inf_le_inf hle le_rfl\n    _ = «expr ⊔ » («expr ⊓ » b x) («expr ⊓ » y x) := inf_sup_right\n    _ = «expr ⊓ » b x := by rw [h.symm.inf_eq_bot, sup_bot_eq]\n    _ ≤ b := inf_le_left\n    \n#align inf_left_le_of_le_sup_right inf_left_le_of_le_sup_right\n\n",
 "inf_left_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem inf_left_eq_bot_iff (h : IsCompl y z) : «expr ⊓ » x y = «expr⊥» ↔ x ≤ z := by\n  rw [← le_bot_iff, ← h.le_sup_right_iff_inf_left_le, bot_sup_eq]\n#align inf_left_eq_bot_iff inf_left_eq_bot_iff\n\n",
 "inf_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Disjoint.inf_left' /-\ntheorem Disjoint.inf_left' (h : Disjoint a b) : Disjoint («expr ⊓ » c a) b :=\n  h.mono_left inf_le_right\n#align disjoint.inf_left' Disjoint.inf_left'\n-/\n\n",
 "inf_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print Codisjoint.inf_left /-\ntheorem Codisjoint.inf_left (ha : Codisjoint a c) (hb : Codisjoint b c) : Codisjoint («expr ⊓ » a b) c :=\n  codisjoint_inf_left.2 ⟨ha, hb⟩\n#align codisjoint.inf_left Codisjoint.inf_left\n-/\n\n",
 "inf_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem inf_eq_bot (h : IsCompl x y) : «expr ⊓ » x y = «expr⊥» :=\n  h.disjoint.eq_bot\n#align inf_eq_bot inf_eq_bot\n\n",
 "eq_top_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print Codisjoint.eq_top_of_le /-\ntheorem Codisjoint.eq_top_of_le (hab : Codisjoint a b) (h : b ≤ a) : a = «expr⊤» :=\n  eq_top_iff.2 <| hab le_rfl h\n#align codisjoint.eq_top_of_le Codisjoint.eq_top_of_le\n-/\n\n",
 "eq_top_of_isCompl_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print eq_top_of_isCompl_bot /-\ntheorem eq_top_of_isCompl_bot (h : IsCompl x («expr⊥»)) : x = «expr⊤» :=\n  sup_bot_eq.symm.trans h.sup_eq_top\n#align eq_top_of_is_compl_bot eq_top_of_isCompl_bot\n-/\n\n",
 "eq_top_of_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print Codisjoint.eq_top_of_ge /-\ntheorem Codisjoint.eq_top_of_ge (hab : Codisjoint a b) : a ≤ b → b = «expr⊤» :=\n  hab.symm.eq_top_of_le\n#align codisjoint.eq_top_of_ge Codisjoint.eq_top_of_ge\n-/\n\n",
 "eq_top_of_bot_isCompl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print eq_top_of_bot_isCompl /-\ntheorem eq_top_of_bot_isCompl (h : IsCompl («expr⊥») x) : x = «expr⊤» :=\n  eq_top_of_isCompl_bot h.symm\n#align eq_top_of_bot_is_compl eq_top_of_bot_isCompl\n-/\n\n",
 "eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print Codisjoint.eq_top /-\ntheorem Codisjoint.eq_top : Codisjoint a b → «expr ⊔ » a b = «expr⊤» :=\n  @Disjoint.eq_bot («expr ᵒᵈ» α) _ _ _ _\n#align codisjoint.eq_top Codisjoint.eq_top\n-/\n\n",
 "eq_bot_of_top_isCompl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print eq_bot_of_top_isCompl /-\ntheorem eq_bot_of_top_isCompl (h : IsCompl («expr⊤») x) : x = «expr⊥» :=\n  eq_top_of_bot_isCompl h.dual\n#align eq_bot_of_top_is_compl eq_bot_of_top_isCompl\n-/\n\n",
 "eq_bot_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print Disjoint.eq_bot_of_le /-\ntheorem Disjoint.eq_bot_of_le (hab : Disjoint a b) (h : a ≤ b) : a = «expr⊥» :=\n  eq_bot_iff.2 <| hab le_rfl h\n#align disjoint.eq_bot_of_le Disjoint.eq_bot_of_le\n-/\n\n",
 "eq_bot_of_isCompl_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print eq_bot_of_isCompl_top /-\ntheorem eq_bot_of_isCompl_top (h : IsCompl x («expr⊤»)) : x = «expr⊥» :=\n  eq_top_of_isCompl_bot h.dual\n#align eq_bot_of_is_compl_top eq_bot_of_isCompl_top\n-/\n\n",
 "eq_bot_of_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print Disjoint.eq_bot_of_ge /-\ntheorem Disjoint.eq_bot_of_ge (hab : Disjoint a b) : b ≤ a → b = «expr⊥» :=\n  hab.symm.eq_bot_of_le\n#align disjoint.eq_bot_of_ge Disjoint.eq_bot_of_ge\n-/\n\n",
 "eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print Disjoint.eq_bot /-\ntheorem Disjoint.eq_bot : Disjoint a b → «expr ⊓ » a b = «expr⊥» :=\n  bot_unique ∘ Disjoint.le_bot\n#align disjoint.eq_bot Disjoint.eq_bot\n-/\n\n",
 "dual":
 "theorem dual (h : IsCompl x y) : IsCompl (toDual x) (toDual y) :=\n  ⟨h.2, h.1⟩\n#align dual dual\n\n",
 "disjoint_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print disjoint_top /-\n@[simp]\ntheorem disjoint_top : Disjoint a («expr⊤») ↔ a = «expr⊥» :=\n  ⟨fun h => bot_unique <| h le_rfl le_top, fun h x ha htop => ha.trans_eq h⟩\n#align disjoint_top disjoint_top\n-/\n\n",
 "disjoint_toDual_iff":
 "#print disjoint_toDual_iff /-\n@[simp]\ntheorem disjoint_toDual_iff [SemilatticeSup α] [OrderTop α] {a b : α} :\n    Disjoint (toDual a) (toDual b) ↔ Codisjoint a b :=\n  iff.rfl\n#align disjoint_to_dual_iff disjoint_toDual_iff\n-/\n\n",
 "disjoint_sup_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print disjoint_sup_right /-\n@[simp]\ntheorem disjoint_sup_right : Disjoint a («expr ⊔ » b c) ↔ Disjoint a b ∧ Disjoint a c := by\n  simp only [disjoint_iff, inf_sup_left, sup_eq_bot_iff]\n#align disjoint_sup_right disjoint_sup_right\n-/\n\n",
 "disjoint_sup_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print disjoint_sup_left /-\n@[simp]\ntheorem disjoint_sup_left : Disjoint («expr ⊔ » a b) c ↔ Disjoint a c ∧ Disjoint b c := by\n  simp only [disjoint_iff, inf_sup_right, sup_eq_bot_iff]\n#align disjoint_sup_left disjoint_sup_left\n-/\n\n",
 "disjoint_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print disjoint_self /-\n@[simp]\ntheorem disjoint_self : Disjoint a a ↔ a = «expr⊥» :=\n  ⟨fun hd => bot_unique <| hd le_rfl le_rfl, fun h x ha hb => ha.trans_eq h⟩\n#align disjoint_self disjoint_self\n-/\n\n",
 "disjoint_right_iff":
 "theorem disjoint_right_iff (h : IsCompl y z) : Disjoint x z ↔ x ≤ y :=\n  h.symm.disjoint_left_iff\n#align disjoint_right_iff disjoint_right_iff\n\n",
 "disjoint_right_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print disjoint_right_comm /-\ntheorem disjoint_right_comm : Disjoint («expr ⊓ » a b) c ↔ Disjoint («expr ⊓ » a c) b := by\n  simp_rw [disjoint_iff_inf_le, inf_right_comm]\n#align disjoint_right_comm disjoint_right_comm\n-/\n\n",
 "disjoint_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print disjoint_ofDual_iff /-\n@[simp]\ntheorem disjoint_ofDual_iff [SemilatticeInf α] [OrderBot α] {a b : «expr ᵒᵈ» α} :\n    Disjoint (ofDual a) (ofDual b) ↔ Codisjoint a b :=\n  iff.rfl\n#align disjoint_of_dual_iff disjoint_ofDual_iff\n-/\n\n",
 "disjoint_left_iff":
 "theorem disjoint_left_iff (h : IsCompl y z) : Disjoint x y ↔ x ≤ z :=\n  by\n  rw [disjoint_iff]\n  exact h.inf_left_eq_bot_iff\n#align disjoint_left_iff disjoint_left_iff\n\n",
 "disjoint_left_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print disjoint_left_comm /-\ntheorem disjoint_left_comm : Disjoint a («expr ⊓ » b c) ↔ Disjoint b («expr ⊓ » a c) := by\n  simp_rw [disjoint_iff_inf_le, inf_left_comm]\n#align disjoint_left_comm disjoint_left_comm\n-/\n\n",
 "disjoint_iff_inf_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print disjoint_iff_inf_le /-\ntheorem disjoint_iff_inf_le : Disjoint a b ↔ «expr ⊓ » a b ≤ «expr⊥» :=\n  ⟨fun hd => hd inf_le_left inf_le_right, fun h x ha hb => (le_inf ha hb).trans h⟩\n#align disjoint_iff_inf_le disjoint_iff_inf_le\n-/\n\n",
 "disjoint_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print disjoint_iff /-\nprotected theorem disjoint_iff [OrderBot α] [OrderBot β] {x y : α × β} :\n    Disjoint x y ↔ Disjoint x.1 y.1 ∧ Disjoint x.2 y.2 :=\n  by\n  constructor\n  · intro h\n    refine' ⟨fun a hx hy => (@h (a, «expr⊥») ⟨hx, _⟩ ⟨hy, _⟩).1, fun b hx hy => (@h («expr⊥», b) ⟨_, hx⟩ ⟨_, hy⟩).2⟩\n    all_goals exact bot_le\n  · rintro ⟨ha, hb⟩ z hza hzb\n    refine' ⟨ha hza.1 hzb.1, hb hza.2 hzb.2⟩\n#align disjoint_iff disjoint_iff\n-/\n\n",
 "disjoint_comm":
 "#print disjoint_comm /-\n/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n-/\ntheorem disjoint_comm : Disjoint a b ↔ Disjoint b a :=\n  forall_congr' fun _ => forall_swap\n#align disjoint.comm disjoint_comm\n-/\n\n",
 "disjoint_bot_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print disjoint_bot_right /-\n@[simp]\ntheorem disjoint_bot_right : Disjoint a («expr⊥») := fun x ha hbot => hbot\n#align disjoint_bot_right disjoint_bot_right\n-/\n\n",
 "disjoint_bot_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print disjoint_bot_left /-\n@[simp]\ntheorem disjoint_bot_left : Disjoint («expr⊥») a := fun x hbot ha => hbot\n#align disjoint_bot_left disjoint_bot_left\n-/\n\n",
 "disjoint_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print disjoint_assoc /-\ntheorem disjoint_assoc : Disjoint («expr ⊓ » a b) c ↔ Disjoint a («expr ⊓ » b c) := by\n  rw [disjoint_iff_inf_le, disjoint_iff_inf_le, inf_assoc]\n#align disjoint_assoc disjoint_assoc\n-/\n\n",
 "codisjoint_top_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print codisjoint_top_right /-\n@[simp]\ntheorem codisjoint_top_right : Codisjoint a («expr⊤») := fun x ha htop => htop\n#align codisjoint_top_right codisjoint_top_right\n-/\n\n",
 "codisjoint_top_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print codisjoint_top_left /-\n@[simp]\ntheorem codisjoint_top_left : Codisjoint («expr⊤») a := fun x htop ha => htop\n#align codisjoint_top_left codisjoint_top_left\n-/\n\n",
 "codisjoint_toDual_iff":
 "#print codisjoint_toDual_iff /-\n@[simp]\ntheorem codisjoint_toDual_iff [SemilatticeInf α] [OrderBot α] {a b : α} :\n    Codisjoint (toDual a) (toDual b) ↔ Disjoint a b :=\n  iff.rfl\n#align codisjoint_to_dual_iff codisjoint_toDual_iff\n-/\n\n",
 "codisjoint_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print codisjoint_self /-\n@[simp]\ntheorem codisjoint_self : Codisjoint a a ↔ a = «expr⊤» :=\n  ⟨fun hd => top_unique <| hd le_rfl le_rfl, fun h x ha hb => h.symm.trans_le ha⟩\n#align codisjoint_self codisjoint_self\n-/\n\n",
 "codisjoint_right_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print codisjoint_right_comm /-\ntheorem codisjoint_right_comm : Codisjoint («expr ⊔ » a b) c ↔ Codisjoint («expr ⊔ » a c) b :=\n  @disjoint_right_comm («expr ᵒᵈ» α) _ _ _ _ _\n#align codisjoint_right_comm codisjoint_right_comm\n-/\n\n",
 "codisjoint_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print codisjoint_ofDual_iff /-\n@[simp]\ntheorem codisjoint_ofDual_iff [SemilatticeSup α] [OrderTop α] {a b : «expr ᵒᵈ» α} :\n    Codisjoint (ofDual a) (ofDual b) ↔ Disjoint a b :=\n  iff.rfl\n#align codisjoint_of_dual_iff codisjoint_ofDual_iff\n-/\n\n",
 "codisjoint_left_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print codisjoint_left_comm /-\ntheorem codisjoint_left_comm : Codisjoint a («expr ⊔ » b c) ↔ Codisjoint b («expr ⊔ » a c) :=\n  @disjoint_left_comm («expr ᵒᵈ» α) _ _ _ _ _\n#align codisjoint_left_comm codisjoint_left_comm\n-/\n\n",
 "codisjoint_inf_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print codisjoint_inf_right /-\n@[simp]\ntheorem codisjoint_inf_right : Codisjoint a («expr ⊓ » b c) ↔ Codisjoint a b ∧ Codisjoint a c := by\n  simp only [codisjoint_iff, sup_inf_left, inf_eq_top_iff]\n#align codisjoint_inf_right codisjoint_inf_right\n-/\n\n",
 "codisjoint_inf_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print codisjoint_inf_left /-\n@[simp]\ntheorem codisjoint_inf_left : Codisjoint («expr ⊓ » a b) c ↔ Codisjoint a c ∧ Codisjoint b c := by\n  simp only [codisjoint_iff, sup_inf_right, inf_eq_top_iff]\n#align codisjoint_inf_left codisjoint_inf_left\n-/\n\n",
 "codisjoint_iff_le_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print codisjoint_iff_le_sup /-\ntheorem codisjoint_iff_le_sup : Codisjoint a b ↔ «expr⊤» ≤ «expr ⊔ » a b :=\n  @disjoint_iff_inf_le («expr ᵒᵈ» α) _ _ _ _\n#align codisjoint_iff_le_sup codisjoint_iff_le_sup\n-/\n\n",
 "codisjoint_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print codisjoint_iff /-\nprotected theorem codisjoint_iff [OrderTop α] [OrderTop β] {x y : α × β} :\n    Codisjoint x y ↔ Codisjoint x.1 y.1 ∧ Codisjoint x.2 y.2 :=\n  @Prod.disjoint_iff («expr ᵒᵈ» α) («expr ᵒᵈ» β) _ _ _ _ _ _\n#align codisjoint_iff codisjoint_iff\n-/\n\n",
 "codisjoint_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print codisjoint_bot /-\n@[simp]\ntheorem codisjoint_bot : Codisjoint a («expr⊥») ↔ a = «expr⊤» :=\n  ⟨fun h => top_unique <| h le_rfl bot_le, fun h x ha htop => h.symm.trans_le ha⟩\n#align codisjoint_bot codisjoint_bot\n-/\n\n",
 "codisjoint_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print codisjoint_assoc /-\ntheorem codisjoint_assoc : Codisjoint («expr ⊔ » a b) c ↔ Codisjoint a («expr ⊔ » b c) :=\n  @disjoint_assoc («expr ᵒᵈ» α) _ _ _ _ _\n#align codisjoint_assoc codisjoint_assoc\n-/\n\n",
 "bot_codisjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print bot_codisjoint /-\n@[simp]\ntheorem bot_codisjoint : Codisjoint («expr⊥») a ↔ a = «expr⊤» :=\n  ⟨fun h => top_unique <| h bot_le le_rfl, fun h x htop ha => h.symm.trans_le ha⟩\n#align bot_codisjoint bot_codisjoint\n-/\n\n",
 "antitone":
 "protected theorem antitone {x' y'} (h : IsCompl x y) (h' : IsCompl x' y') (hx : x ≤ x') : y' ≤ y :=\n  h'.right_le_iff.2 <| h.symm.codisjoint.mono_right hx\n#align antitone antitone\n\n",
 "Codisjoint_comm":
 "#print Codisjoint_comm /-\ntheorem Codisjoint_comm : Codisjoint a b ↔ Codisjoint b a :=\n  forall_congr' fun _ => forall_swap\n#align codisjoint.comm Codisjoint_comm\n-/\n\n"}