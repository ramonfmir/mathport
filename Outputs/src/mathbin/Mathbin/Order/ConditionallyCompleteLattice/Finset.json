{"sup'_id_eq_cSup":
 "theorem sup'_id_eq_cSup [ConditionallyCompleteLattice α] (s : Finset α) (H) : s.sup' H id = supₛ s := by\n  rw [sup'_eq_cSup_image s H, Set.image_id]\n#align sup'_id_eq_cSup sup'_id_eq_cSup\n\n",
 "sup'_eq_cSup_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem sup'_eq_cSup_image [ConditionallyCompleteLattice β] (s : Finset α) (H) (f : α → β) :\n    s.sup' H f = supₛ («expr '' » f s) := by\n  apply le_antisymm\n  · refine' Finset.sup'_le _ _ fun a ha => _\n    refine' le_csupₛ ⟨s.sup' H f, _⟩ ⟨a, ha, rfl⟩\n    rintro i ⟨j, hj, rfl⟩\n    exact Finset.le_sup' _ hj\n  · apply csupₛ_le ((coe_nonempty.mpr H).image _)\n    rintro _ ⟨a, ha, rfl⟩\n    exact Finset.le_sup' _ ha\n#align sup'_eq_cSup_image sup'_eq_cSup_image\n\n",
 "lt_cInf_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print Set.Finite.lt_cInf_iff /-\ntheorem Set.Finite.lt_cInf_iff (hs : s.finite) (h : s.nonempty) : a < infₛ s ↔ ∀ x ∈ s, a < x :=\n  @Set.Finite.cSup_lt_iff («expr ᵒᵈ» α) _ _ _ hs h\n#align set.finite.lt_cInf_iff Set.Finite.lt_cInf_iff\n-/\n\n",
 "inf'_id_eq_cInf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem inf'_id_eq_cInf [ConditionallyCompleteLattice α] (s : Finset α) (H) : s.inf' H id = infₛ s :=\n  @sup'_id_eq_csupₛ («expr ᵒᵈ» α) _ _ H\n#align inf'_id_eq_cInf inf'_id_eq_cInf\n\n",
 "inf'_eq_cInf_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem inf'_eq_cInf_image [ConditionallyCompleteLattice β] (s : Finset α) (H) (f : α → β) :\n    s.inf' H f = infₛ («expr '' » f s) :=\n  @sup'_eq_csupₛ_image _ («expr ᵒᵈ» β) _ _ H _\n#align inf'_eq_cInf_image inf'_eq_cInf_image\n\n",
 "cSup_mem":
 "#print Set.Nonempty.cSup_mem /-\ntheorem Set.Nonempty.cSup_mem (h : s.nonempty) (hs : s.finite) : supₛ s ∈ s :=\n  by\n  lift s to Finset α using hs\n  exact Finset.Nonempty.cSup_mem h\n#align set.nonempty.cSup_mem Set.Nonempty.cSup_mem\n-/\n\n",
 "cSup_lt_iff":
 "#print Set.Finite.cSup_lt_iff /-\ntheorem Set.Finite.cSup_lt_iff (hs : s.finite) (h : s.nonempty) : supₛ s < a ↔ ∀ x ∈ s, x < a :=\n  ⟨fun h x hx => (le_csupₛ hs.bdd_above hx).trans_lt h, fun H => H _ <| h.cSup_mem hs⟩\n#align set.finite.cSup_lt_iff Set.Finite.cSup_lt_iff\n-/\n\n",
 "cSup_eq_max'":
 "#print Finset.Nonempty.cSup_eq_max' /-\ntheorem Finset.Nonempty.cSup_eq_max' {s : Finset α} (h : s.nonempty) : supₛ ↑s = s.max' h :=\n  eq_of_forall_ge_iff fun a => (csupₛ_le_iff s.bdd_above h.to_set).trans (s.max'_le_iff h).symm\n#align finset.nonempty.cSup_eq_max' Finset.Nonempty.cSup_eq_max'\n-/\n\n",
 "cInf_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print Set.Nonempty.cInf_mem /-\ntheorem Set.Nonempty.cInf_mem (h : s.nonempty) (hs : s.finite) : infₛ s ∈ s :=\n  @Set.Nonempty.cSup_mem («expr ᵒᵈ» α) _ _ h hs\n#align set.nonempty.cInf_mem Set.Nonempty.cInf_mem\n-/\n\n",
 "cInf_eq_min'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print Finset.Nonempty.cInf_eq_min' /-\ntheorem Finset.Nonempty.cInf_eq_min' {s : Finset α} (h : s.nonempty) : infₛ ↑s = s.min' h :=\n  @Finset.Nonempty.cSup_eq_max' («expr ᵒᵈ» α) _ s h\n#align finset.nonempty.cInf_eq_min' Finset.Nonempty.cInf_eq_min'\n-/\n\n"}