{"supr_disjointed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem supr_disjointed (f : ℕ → α) :\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (disjointed f n) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f n) :=\n  supr_eq_supr_of_partial_sups_eq_partial_sups (partial_sups_disjointed f)\n#align supr_disjointed supr_disjointed\n\n",
 "preimage_find_eq_disjointed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_find_eq_disjointed (s : ℕ → set α) (H : ∀ x, ∃ n, x ∈ s n) [∀ x n, decidable (x ∈ s n)] (n : ℕ) :\n    «expr ⁻¹' » (fun x => nat.find (H x)) {n} = disjointed s n :=\n  by\n  ext x\n  simp [Nat.find_eq_iff, disjointed_eq_inter_compl]\n#align preimage_find_eq_disjointed preimage_find_eq_disjointed\n\n",
 "partial_sups_disjointed":
 "@[simp]\ntheorem partial_sups_disjointed (f : ℕ → α) : partial_sups (disjointed f) = partial_sups f :=\n  by\n  ext n\n  induction' n with k ih\n  · rw [partial_sups_zero, partial_sups_zero, disjointed_zero]\n  · rw [partial_sups_succ, partial_sups_succ, disjointed_succ, ih, sup_sdiff_self_right]\n#align partial_sups_disjointed partial_sups_disjointed\n\n",
 "disjointed_zero":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Yaël Dillies\n-/\n@[simp]\ntheorem disjointed_zero (f : ℕ → α) : disjointed f 0 = f 0 :=\n  rfl\n#align disjointed_zero disjointed_zero\n\n",
 "disjointed_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- `disjointed f` is the unique sequence that is pairwise disjoint and has the same partial sups\nas `f`. -/\ntheorem disjointed_unique {f d : ℕ → α} (hdisj : Pairwise («expr on » Disjoint d))\n    (hsups : partial_sups d = partial_sups f) : d = disjointed f :=\n  by\n  ext n\n  cases n\n  · rw [← partial_sups_zero d, hsups, partial_sups_zero, disjointed_zero]\n  suffices h : d n.succ = partial_sups d n.succ \\ partial_sups d n\n  · rw [h, hsups, partial_sups_succ, disjointed_succ, sup_sdiff, sdiff_self, bot_sup_eq]\n  rw [partial_sups_succ, sup_sdiff, sdiff_self, bot_sup_eq, eq_comm, sdiff_eq_self_iff_disjoint]\n  suffices h : ∀ m ≤ n, Disjoint (partial_sups d m) (d n.succ)\n  · exact h n le_rfl\n  rintro m hm\n  induction' m with m ih\n  · exact hdisj (nat.succ_ne_zero _).symm\n  rw [partial_sups_succ, disjoint_iff, inf_sup_right, sup_eq_bot_iff, ← disjoint_iff, ← disjoint_iff]\n  exact ⟨ih (nat.le_of_succ_le hm), hdisj (nat.lt_succ_of_le hm).ne⟩\n#align disjointed_unique disjointed_unique\n\n",
 "disjointed_succ":
 "theorem disjointed_succ (f : ℕ → α) (n : ℕ) : disjointed f (n + 1) = f (n + 1) \\ partial_sups f n :=\n  rfl\n#align disjointed_succ disjointed_succ\n\n",
 "disjointed_subset":
 "theorem disjointed_subset (f : ℕ → set α) (n : ℕ) : disjointed f n ⊆ f n :=\n  disjointed_le f n\n#align disjointed_subset disjointed_subset\n\n",
 "disjointed_rec_zero":
 "@[simp]\ntheorem disjointed_rec_zero {f : ℕ → α} {p : α → Sort _} (hdiff : ∀ ⦃t i⦄, p t → p (t \\ f i)) (h₀ : p (f 0)) :\n    disjointed_rec hdiff h₀ = h₀ :=\n  rfl\n#align disjointed_rec_zero disjointed_rec_zero\n\n",
 "disjointed_le_id":
 "theorem disjointed_le_id : disjointed ≤ (id : (ℕ → α) → ℕ → α) :=\n  by\n  rintro f n\n  cases n\n  · rfl\n  · exact sdiff_le\n#align disjointed_le_id disjointed_le_id\n\n",
 "disjointed_le":
 "theorem disjointed_le (f : ℕ → α) : disjointed f ≤ f :=\n  disjointed_le_id f\n#align disjointed_le disjointed_le\n\n",
 "disjointed_eq_inter_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem disjointed_eq_inter_compl (f : ℕ → set α) (n : ℕ) :\n    disjointed f n =\n      f n ∩\n        «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          («expr ᶜ» (f i)) :=\n  disjointed_eq_inf_compl f n\n#align disjointed_eq_inter_compl disjointed_eq_inter_compl\n\n",
 "disjointed_eq_inf_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem disjointed_eq_inf_compl (f : ℕ → α) (n : ℕ) :\n    disjointed f n =\n      «expr ⊓ » (f n)\n        («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n          («expr ᶜ» (f i))) :=\n  by\n  cases n\n  · rw [disjointed_zero, eq_comm, inf_eq_left]\n    simp_rw [le_infᵢ_iff]\n    exact fun i hi => (i.not_lt_zero hi).elim\n  simp_rw [disjointed_succ, partial_sups_eq_bsupr, sdiff_eq, compl_supᵢ]\n  congr\n  ext i\n  rw [Nat.lt_succ_iff]\n#align disjointed_eq_inf_compl disjointed_eq_inf_compl\n\n",
 "disjointed_eq":
 "-- TODO: Find a useful statement of `disjointed_rec_succ`.\ntheorem monotone.disjointed_eq {f : ℕ → α} (hf : monotone f) (n : ℕ) : disjointed f (n + 1) = f (n + 1) \\ f n := by\n  rw [disjointed_succ, hf.partial_sups_eq]\n#align monotone.disjointed_eq monotone.disjointed_eq\n\n",
 "disjoint_disjointed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\ntheorem disjoint_disjointed (f : ℕ → α) : Pairwise («expr on » Disjoint (disjointed f)) :=\n  by\n  refine' (Symmetric.pairwise_on Disjoint.symm _).2 fun m n h => _\n  cases n\n  · exact (nat.not_lt_zero _ h).elim\n  exact\n    disjoint_sdiff_self_right.mono_left ((disjointed_le f m).trans (le_partial_sups_of_le f (Nat.lt_add_one_iff.1 h)))\n#align disjoint_disjointed disjoint_disjointed\n\n",
 "Union_disjointed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_disjointed {f : ℕ → set α} :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (disjointed f n) =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f n) :=\n  supr_disjointed f\n#align Union_disjointed Union_disjointed\n\n"}