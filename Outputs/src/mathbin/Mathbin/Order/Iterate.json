{"strict_mono_iterate_of_lt_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If `f` is a strictly monotone map and `x < f x` at some point `x`, then the iterates `f^[n] x`\nform a strictly monotone sequence. -/\ntheorem strict_mono_iterate_of_lt_map (hf : strict_mono f) (hx : x < f x) : strict_mono fun n => («expr ^[ ]» f n) x :=\n  strictMono_nat_of_lt_succ fun n => by\n    rw [iterate_succ_apply]\n    exact hf.iterate n hx\n#align strict_mono_iterate_of_lt_map strict_mono_iterate_of_lt_map\n\n",
 "strict_anti_iterate_of_map_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If `f` is a strictly antitone map and `f x < x` at some point `x`, then the iterates `f^[n] x`\nform a strictly antitone sequence. -/\ntheorem strict_anti_iterate_of_map_lt (hf : strict_mono f) (hx : f x < x) : strict_anti fun n => («expr ^[ ]» f n) x :=\n  hf.dual.strict_mono_iterate_of_lt_map hx\n#align strict_anti_iterate_of_map_lt strict_anti_iterate_of_map_lt\n\n",
 "seq_pos_lt_seq_of_lt_of_le":
 "theorem seq_pos_lt_seq_of_lt_of_le (hf : monotone f) {n : ℕ} (hn : 0 < n) (h₀ : x 0 ≤ y 0)\n    (hx : ∀ k < n, x (k + 1) < f (x k)) (hy : ∀ k < n, f (y k) ≤ y (k + 1)) : x n < y n :=\n  by\n  induction' n with n ihn; · exact hn.false.elim\n  suffices : x n ≤ y n\n  exact (hx n n.lt_succ_self).trans_le ((hf this).trans <| hy n n.lt_succ_self)\n  cases n; · exact h₀\n  refine' (ihn n.zero_lt_succ (fun k hk => hx _ _) fun k hk => hy _ _).le <;> exact hk.trans n.succ.lt_succ_self\n#align seq_pos_lt_seq_of_lt_of_le seq_pos_lt_seq_of_lt_of_le\n\n",
 "seq_pos_lt_seq_of_le_of_lt":
 "theorem seq_pos_lt_seq_of_le_of_lt (hf : monotone f) {n : ℕ} (hn : 0 < n) (h₀ : x 0 ≤ y 0)\n    (hx : ∀ k < n, x (k + 1) ≤ f (x k)) (hy : ∀ k < n, f (y k) < y (k + 1)) : x n < y n :=\n  hf.dual.seq_pos_lt_seq_of_lt_of_le hn h₀ hy hx\n#align seq_pos_lt_seq_of_le_of_lt seq_pos_lt_seq_of_le_of_lt\n\n",
 "seq_lt_seq_of_lt_of_le":
 "theorem seq_lt_seq_of_lt_of_le (hf : monotone f) (n : ℕ) (h₀ : x 0 < y 0) (hx : ∀ k < n, x (k + 1) < f (x k))\n    (hy : ∀ k < n, f (y k) ≤ y (k + 1)) : x n < y n := by\n  cases n\n  exacts[h₀, hf.seq_pos_lt_seq_of_lt_of_le n.zero_lt_succ h₀.le hx hy]\n#align seq_lt_seq_of_lt_of_le seq_lt_seq_of_lt_of_le\n\n",
 "seq_lt_seq_of_le_of_lt":
 "theorem seq_lt_seq_of_le_of_lt (hf : monotone f) (n : ℕ) (h₀ : x 0 < y 0) (hx : ∀ k < n, x (k + 1) ≤ f (x k))\n    (hy : ∀ k < n, f (y k) < y (k + 1)) : x n < y n :=\n  hf.dual.seq_lt_seq_of_lt_of_le n h₀ hy hx\n#align seq_lt_seq_of_le_of_lt seq_lt_seq_of_le_of_lt\n\n",
 "seq_le_seq":
 "/-\nCopyright (c) 2020 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem seq_le_seq (hf : monotone f) (n : ℕ) (h₀ : x 0 ≤ y 0) (hx : ∀ k < n, x (k + 1) ≤ f (x k))\n    (hy : ∀ k < n, f (y k) ≤ y (k + 1)) : x n ≤ y n :=\n  by\n  induction' n with n ihn\n  · exact h₀\n  · refine' (hx _ n.lt_succ_self).trans ((hf <| ihn _ _).trans (hy _ n.lt_succ_self))\n    exact fun k hk => hx _ (hk.trans n.lt_succ_self)\n    exact fun k hk => hy _ (hk.trans n.lt_succ_self)\n#align seq_le_seq seq_le_seq\n\n",
 "monotone_iterate_of_le_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If `f` is a monotone map and `x ≤ f x` at some point `x`, then the iterates `f^[n] x` form\na monotone sequence. -/\ntheorem monotone_iterate_of_le_map (hf : monotone f) (hx : x ≤ f x) : monotone fun n => («expr ^[ ]» f n) x :=\n  monotone_nat_of_le_succ fun n => by\n    rw [iterate_succ_apply]\n    exact hf.iterate n hx\n#align monotone_iterate_of_le_map monotone_iterate_of_le_map\n\n",
 "monotone_iterate_of_id_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem monotone_iterate_of_id_le (h : id ≤ f) : monotone fun m => «expr ^[ ]» f m :=\n  monotone_nat_of_le_succ fun n x => by\n    rw [iterate_succ_apply']\n    exact h _\n#align monotone_iterate_of_id_le monotone_iterate_of_id_le\n\n",
 "le_iterate_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If `f ≤ g` and `g` is monotone, then `f^[n] ≤ g^[n]`. -/\ntheorem le_iterate_of_le {g : α → α} (hg : monotone g) (h : f ≤ g) (n : ℕ) : «expr ^[ ]» f n ≤ «expr ^[ ]» g n :=\n  hg.dual.iterate_le_of_le h n\n#align le_iterate_of_le le_iterate_of_le\n\n",
 "le_iterate_comp_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem le_iterate_comp_of_le (hf : monotone f) (H : h ∘ g ≤ f ∘ h) (n : ℕ) :\n    h ∘ «expr ^[ ]» g n ≤ «expr ^[ ]» f n ∘ h := fun x => by\n  refine' hf.seq_le_seq n _ (fun k hk => _) fun k hk => _ <;> simp [iterate_succ', H _]\n#align le_iterate_comp_of_le le_iterate_comp_of_le\n\n",
 "iterate_pos_lt_of_map_lt'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_lt_of_map_lt' (h : commute f g) (hf : strict_mono f) (hg : monotone g) {x} (hx : f x < g x) {n}\n    (hn : 0 < n) : («expr ^[ ]» f n) x < («expr ^[ ]» g n) x :=\n  @iterate_pos_lt_of_map_lt («expr ᵒᵈ» α) _ g f h.symm hg.dual hf.dual x hx n hn\n#align iterate_pos_lt_of_map_lt' iterate_pos_lt_of_map_lt'\n\n",
 "iterate_pos_lt_of_map_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_lt_of_map_lt (h : commute f g) (hf : monotone f) (hg : strict_mono g) {x} (hx : f x < g x) {n}\n    (hn : 0 < n) : («expr ^[ ]» f n) x < («expr ^[ ]» g n) x := by\n  refine' hf.seq_pos_lt_seq_of_le_of_lt hn _ (fun k hk => _) fun k hk => _ <;>\n    simp [iterate_succ' f, h.iterate_right _ _, hg.iterate _ hx]\n#align iterate_pos_lt_of_map_lt iterate_pos_lt_of_map_lt\n\n",
 "iterate_pos_lt_iff_map_lt'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_lt_iff_map_lt' (h : commute f g) (hf : strict_mono f) (hg : monotone g) {x n} (hn : 0 < n) :\n    («expr ^[ ]» f n) x < («expr ^[ ]» g n) x ↔ f x < g x :=\n  @iterate_pos_lt_iff_map_lt («expr ᵒᵈ» α) _ _ _ h.symm hg.dual hf.dual x n hn\n#align iterate_pos_lt_iff_map_lt' iterate_pos_lt_iff_map_lt'\n\n",
 "iterate_pos_lt_iff_map_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_lt_iff_map_lt (h : commute f g) (hf : monotone f) (hg : strict_mono g) {x n} (hn : 0 < n) :\n    («expr ^[ ]» f n) x < («expr ^[ ]» g n) x ↔ f x < g x :=\n  by\n  rcases lt_trichotomy (f x) (g x) with (H | H | H)\n  · simp only [*, iterate_pos_lt_of_map_lt]\n  · simp only [*, h.iterate_eq_of_map_eq, lt_irrefl]\n  · simp only [lt_asymm H, lt_asymm (h.symm.iterate_pos_lt_of_map_lt' hg hf H hn)]\n#align iterate_pos_lt_iff_map_lt iterate_pos_lt_iff_map_lt\n\n",
 "iterate_pos_le_iff_map_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_le_iff_map_le' (h : commute f g) (hf : strict_mono f) (hg : monotone g) {x n} (hn : 0 < n) :\n    («expr ^[ ]» f n) x ≤ («expr ^[ ]» g n) x ↔ f x ≤ g x := by\n  simpa only [not_lt] using not_congr (h.symm.iterate_pos_lt_iff_map_lt hg hf hn)\n#align iterate_pos_le_iff_map_le' iterate_pos_le_iff_map_le'\n\n",
 "iterate_pos_le_iff_map_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_le_iff_map_le (h : commute f g) (hf : monotone f) (hg : strict_mono g) {x n} (hn : 0 < n) :\n    («expr ^[ ]» f n) x ≤ («expr ^[ ]» g n) x ↔ f x ≤ g x := by\n  simpa only [not_lt] using not_congr (h.symm.iterate_pos_lt_iff_map_lt' hg hf hn)\n#align iterate_pos_le_iff_map_le iterate_pos_le_iff_map_le\n\n",
 "iterate_pos_eq_iff_map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_pos_eq_iff_map_eq (h : commute f g) (hf : monotone f) (hg : strict_mono g) {x n} (hn : 0 < n) :\n    («expr ^[ ]» f n) x = («expr ^[ ]» g n) x ↔ f x = g x := by\n  simp only [le_antisymm_iff, h.iterate_pos_le_iff_map_le hf hg hn, h.symm.iterate_pos_le_iff_map_le' hg hf hn]\n#align iterate_pos_eq_iff_map_eq iterate_pos_eq_iff_map_eq\n\n",
 "iterate_le_of_map_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_le_of_map_le (h : commute f g) (hf : monotone f) (hg : monotone g) {x} (hx : f x ≤ g x) (n : ℕ) :\n    («expr ^[ ]» f n) x ≤ («expr ^[ ]» g n) x := by\n  refine' hf.seq_le_seq n _ (fun k hk => _) fun k hk => _ <;>\n    simp [iterate_succ' f, h.iterate_right _ _, hg.iterate _ hx]\n#align iterate_le_of_map_le iterate_le_of_map_le\n\n",
 "iterate_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If `f ≤ g` and `f` is monotone, then `f^[n] ≤ g^[n]`. -/\ntheorem iterate_le_of_le {g : α → α} (hf : monotone f) (h : f ≤ g) (n : ℕ) : «expr ^[ ]» f n ≤ «expr ^[ ]» g n :=\n  hf.iterate_comp_le_of_le h n\n#align iterate_le_of_le iterate_le_of_le\n\n",
 "iterate_le_id_of_le_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_le_id_of_le_id (h : f ≤ id) (n : ℕ) : «expr ^[ ]» f n ≤ id :=\n  @id_le_iterate_of_id_le («expr ᵒᵈ» α) _ f h n\n#align iterate_le_id_of_le_id iterate_le_id_of_le_id\n\n",
 "iterate_comp_le_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem iterate_comp_le_of_le (hf : monotone f) (H : f ∘ h ≤ h ∘ g) (n : ℕ) :\n    «expr ^[ ]» f n ∘ h ≤ h ∘ «expr ^[ ]» g n :=\n  hf.dual.le_iterate_comp_of_le H n\n#align iterate_comp_le_of_le iterate_comp_le_of_le\n\n",
 "id_le_iterate_of_id_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If $x ≤ f x$ for all $x$ (we write this as `id ≤ f`), then the same is true for any iterate\n`f^[n]` of `f`. -/\ntheorem id_le_iterate_of_id_le (h : id ≤ f) (n : ℕ) : id ≤ «expr ^[ ]» f n := by\n  simpa only [iterate_id] using monotone_id.iterate_le_of_le h n\n#align id_le_iterate_of_id_le id_le_iterate_of_id_le\n\n",
 "antitone_iterate_of_map_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If `f` is a monotone map and `f x ≤ x` at some point `x`, then the iterates `f^[n] x` form\na antitone sequence. -/\ntheorem antitone_iterate_of_map_le (hf : monotone f) (hx : f x ≤ x) : antitone fun n => («expr ^[ ]» f n) x :=\n  hf.dual.monotone_iterate_of_le_map hx\n#align antitone_iterate_of_map_le antitone_iterate_of_map_le\n\n",
 "antitone_iterate_of_le_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem antitone_iterate_of_le_id (h : f ≤ id) : antitone fun m => «expr ^[ ]» f m := fun m n hmn =>\n  @monotone_iterate_of_id_le («expr ᵒᵈ» α) _ f h m n hmn\n#align antitone_iterate_of_le_id antitone_iterate_of_le_id\n\n"}