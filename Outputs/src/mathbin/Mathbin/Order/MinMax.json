{"right_comm":
 "#print Max.right_comm /-\ntheorem Max.right_comm (a b c : α) : max (max a b) c = max (max a c) b :=\n  right_comm max max_comm max_assoc a b c\n#align max.right_comm Max.right_comm\n-/\n\n",
 "min_right_comm":
 "#print min_right_comm /-\ntheorem min_right_comm (a b c : α) : min (min a b) c = min (min a c) b :=\n  right_comm min min_comm min_assoc a b c\n#align min_right_comm min_right_comm\n-/\n\n",
 "min_max_distrib_right":
 "#print min_max_distrib_right /-\ntheorem min_max_distrib_right : min (max a b) c = max (min a c) (min b c) :=\n  inf_sup_right\n#align min_max_distrib_right min_max_distrib_right\n-/\n\n",
 "min_max_distrib_left":
 "#print min_max_distrib_left /-\ntheorem min_max_distrib_left : min a (max b c) = max (min a b) (min a c) :=\n  inf_sup_left\n#align min_max_distrib_left min_max_distrib_left\n-/\n\n",
 "min_lt_of_right_lt":
 "#print min_lt_of_right_lt /-\ntheorem min_lt_of_right_lt (h : b < c) : min a b < c :=\n  (min_le_right a b).trans_lt h\n#align min_lt_of_right_lt min_lt_of_right_lt\n-/\n\n",
 "min_lt_of_left_lt":
 "#print min_lt_of_left_lt /-\ntheorem min_lt_of_left_lt (h : a < c) : min a b < c :=\n  (min_le_left a b).trans_lt h\n#align min_lt_of_left_lt min_lt_of_left_lt\n-/\n\n",
 "min_lt_min_right_iff":
 "#print min_lt_min_right_iff /-\ntheorem min_lt_min_right_iff : min a b < min a c ↔ b < c ∧ b < a := by simp_rw [min_comm a, min_lt_min_left_iff]\n#align min_lt_min_right_iff min_lt_min_right_iff\n-/\n\n",
 "min_lt_min_left_iff":
 "#print min_lt_min_left_iff /-\ntheorem min_lt_min_left_iff : min a c < min b c ↔ a < b ∧ a < c :=\n  by\n  simp_rw [lt_min_iff, min_lt_iff, or_iff_left (lt_irrefl _)]\n  exact and_congr_left fun h => or_iff_left_of_imp h.trans\n#align min_lt_min_left_iff min_lt_min_left_iff\n-/\n\n",
 "min_lt_min":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print min_lt_min /-\ntheorem min_lt_min (h₁ : a < c) (h₂ : b < d) : min a b < min c d :=\n  @max_lt_max («expr ᵒᵈ» α) _ _ _ _ _ h₁ h₂\n#align min_lt_min min_lt_min\n-/\n\n",
 "min_lt_max":
 "#print min_lt_max /-\n-- short-circuit type class inference\n-- short-circuit type class inference\ntheorem min_lt_max : min a b < max a b ↔ a ≠ b :=\n  inf_lt_sup\n#align min_lt_max min_lt_max\n-/\n\n",
 "min_lt_iff":
 "#print min_lt_iff /-\n@[simp]\ntheorem min_lt_iff : min a b < c ↔ a < c ∨ b < c :=\n  inf_lt_iff\n#align min_lt_iff min_lt_iff\n-/\n\n",
 "min_left_commutative":
 "#print min_left_commutative /-\ntheorem min_left_commutative : left_commutative (min : α → α → α) :=\n  min_left_comm\n#align min_left_commutative min_left_commutative\n-/\n\n",
 "min_le_of_right_le":
 "#print min_le_of_right_le /-\ntheorem min_le_of_right_le : b ≤ c → min a b ≤ c :=\n  inf_le_of_right_le\n#align min_le_of_right_le min_le_of_right_le\n-/\n\n",
 "min_le_of_left_le":
 "#print min_le_of_left_le /-\ntheorem min_le_of_left_le : a ≤ c → min a b ≤ c :=\n  inf_le_of_left_le\n#align min_le_of_left_le min_le_of_left_le\n-/\n\n",
 "min_le_min":
 "#print min_le_min /-\ntheorem min_le_min : a ≤ c → b ≤ d → min a b ≤ min c d :=\n  inf_le_inf\n#align min_le_min min_le_min\n-/\n\n",
 "min_le_max":
 "#print min_le_max /-\ntheorem min_le_max : min a b ≤ max a b :=\n  le_trans (min_le_left a b) (le_max_left a b)\n#align min_le_max min_le_max\n-/\n\n",
 "min_le_iff":
 "#print min_le_iff /-\n@[simp]\ntheorem min_le_iff : min a b ≤ c ↔ a ≤ c ∨ b ≤ c :=\n  inf_le_iff\n#align min_le_iff min_le_iff\n-/\n\n",
 "min_eq_right_iff":
 "#print min_eq_right_iff /-\n@[simp]\ntheorem min_eq_right_iff : min a b = b ↔ b ≤ a :=\n  inf_eq_right\n#align min_eq_right_iff min_eq_right_iff\n-/\n\n",
 "min_eq_left_iff":
 "#print min_eq_left_iff /-\n@[simp]\ntheorem min_eq_left_iff : min a b = a ↔ a ≤ b :=\n  inf_eq_left\n#align min_eq_left_iff min_eq_left_iff\n-/\n\n",
 "min_eq_iff":
 "#print min_eq_iff /-\ntheorem min_eq_iff : min a b = c ↔ a = c ∧ a ≤ b ∨ b = c ∧ b ≤ a :=\n  by\n  constructor\n  · intro h\n    refine' Or.imp (fun h' => _) (fun h' => _) (le_total a b) <;> exact ⟨by simpa [h'] using h, h'⟩\n  · rintro (⟨rfl, h⟩ | ⟨rfl, h⟩) <;> simp [h]\n#align min_eq_iff min_eq_iff\n-/\n\n",
 "min_commutative":
 "#print min_commutative /-\ntheorem min_commutative : commutative (min : α → α → α) :=\n  min_comm\n#align min_commutative min_commutative\n-/\n\n",
 "min_choice":
 "#print min_choice /-\ntheorem min_choice (a b : α) : min a b = a ∨ min a b = b := by cases le_total a b <;> simp [*]\n#align min_choice min_choice\n-/\n\n",
 "min_cases":
 "#print min_cases /-\n/-- For elements `a` and `b` of a linear order, either `min a b = a` and `a ≤ b`,\n    or `min a b = b` and `b < a`.\n    Use cases on this lemma to automate linarith in inequalities -/\ntheorem min_cases (a b : α) : min a b = a ∧ a ≤ b ∨ min a b = b ∧ b < a :=\n  by\n  by_cases a ≤ b\n  · left\n    exact ⟨min_eq_left h, h⟩\n  · right\n    exact ⟨min_eq_right (le_of_lt (not_le.mp h)), not_le.mp h⟩\n#align min_cases min_cases\n-/\n\n",
 "min_associative":
 "#print min_associative /-\ntheorem min_associative : associative (min : α → α → α) :=\n  min_assoc\n#align min_associative min_associative\n-/\n\n",
 "max_min_distrib_right":
 "#print max_min_distrib_right /-\ntheorem max_min_distrib_right : max (min a b) c = min (max a c) (max b c) :=\n  sup_inf_right\n#align max_min_distrib_right max_min_distrib_right\n-/\n\n",
 "max_min_distrib_left":
 "#print max_min_distrib_left /-\ntheorem max_min_distrib_left : max a (min b c) = min (max a b) (max a c) :=\n  sup_inf_left\n#align max_min_distrib_left max_min_distrib_left\n-/\n\n",
 "max_lt_max_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print max_lt_max_right_iff /-\ntheorem max_lt_max_right_iff : max a b < max a c ↔ b < c ∧ a < c :=\n  @min_lt_min_right_iff («expr ᵒᵈ» α) _ _ _ _\n#align max_lt_max_right_iff max_lt_max_right_iff\n-/\n\n",
 "max_lt_max_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print max_lt_max_left_iff /-\ntheorem max_lt_max_left_iff : max a c < max b c ↔ a < b ∧ c < b :=\n  @min_lt_min_left_iff («expr ᵒᵈ» α) _ _ _ _\n#align max_lt_max_left_iff max_lt_max_left_iff\n-/\n\n",
 "max_lt_max":
 "#print max_lt_max /-\ntheorem max_lt_max (h₁ : a < c) (h₂ : b < d) : max a b < max c d := by simp [lt_max_iff, max_lt_iff, *]\n#align max_lt_max max_lt_max\n-/\n\n",
 "max_lt_iff":
 "#print max_lt_iff /-\n@[simp]\ntheorem max_lt_iff : max a b < c ↔ a < c ∧ b < c :=\n  sup_lt_iff\n#align max_lt_iff max_lt_iff\n-/\n\n",
 "max_left_commutative":
 "#print max_left_commutative /-\ntheorem max_left_commutative : left_commutative (max : α → α → α) :=\n  max_left_comm\n#align max_left_commutative max_left_commutative\n-/\n\n",
 "max_le_max":
 "#print max_le_max /-\ntheorem max_le_max : a ≤ c → b ≤ d → max a b ≤ max c d :=\n  sup_le_sup\n#align max_le_max max_le_max\n-/\n\n",
 "max_le_iff":
 "#print max_le_iff /-\n@[simp]\ntheorem max_le_iff : max a b ≤ c ↔ a ≤ c ∧ b ≤ c :=\n  sup_le_iff\n#align max_le_iff max_le_iff\n-/\n\n",
 "max_eq_right_iff":
 "#print max_eq_right_iff /-\n@[simp]\ntheorem max_eq_right_iff : max a b = b ↔ a ≤ b :=\n  sup_eq_right\n#align max_eq_right_iff max_eq_right_iff\n-/\n\n",
 "max_eq_left_iff":
 "#print max_eq_left_iff /-\n@[simp]\ntheorem max_eq_left_iff : max a b = a ↔ b ≤ a :=\n  sup_eq_left\n#align max_eq_left_iff max_eq_left_iff\n-/\n\n",
 "max_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print max_eq_iff /-\ntheorem max_eq_iff : max a b = c ↔ a = c ∧ b ≤ a ∨ b = c ∧ a ≤ b :=\n  @min_eq_iff («expr ᵒᵈ» α) _ a b c\n#align max_eq_iff max_eq_iff\n-/\n\n",
 "max_commutative":
 "#print max_commutative /-\ntheorem max_commutative : commutative (max : α → α → α) :=\n  max_comm\n#align max_commutative max_commutative\n-/\n\n",
 "max_choice":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print max_choice /-\ntheorem max_choice (a b : α) : max a b = a ∨ max a b = b :=\n  @min_choice («expr ᵒᵈ» α) _ a b\n#align max_choice max_choice\n-/\n\n",
 "max_cases":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print max_cases /-\n/-- For elements `a` and `b` of a linear order, either `max a b = a` and `b ≤ a`,\n    or `max a b = b` and `a < b`.\n    Use cases on this lemma to automate linarith in inequalities -/\ntheorem max_cases (a b : α) : max a b = a ∧ b ≤ a ∨ max a b = b ∧ a < b :=\n  @min_cases («expr ᵒᵈ» α) _ a b\n#align max_cases max_cases\n-/\n\n",
 "max_associative":
 "#print max_associative /-\ntheorem max_associative : associative (max : α → α → α) :=\n  max_assoc\n#align max_associative max_associative\n-/\n\n",
 "map_min":
 "#print Antitone.map_min /-\ntheorem Antitone.map_min (hf : Antitone f) : f (min a b) = max (f a) (f b) :=\n  hf.dual.map_max\n#align antitone.map_min Antitone.map_min\n-/\n\n",
 "map_max":
 "#print Antitone.map_max /-\ntheorem Antitone.map_max (hf : Antitone f) : f (max a b) = min (f a) (f b) := by cases le_total a b <;> simp [h, hf h]\n#align antitone.map_max Antitone.map_max\n-/\n\n",
 "lt_min_iff":
 "#print lt_min_iff /-\n@[simp]\ntheorem lt_min_iff : a < min b c ↔ a < b ∧ a < c :=\n  lt_inf_iff\n#align lt_min_iff lt_min_iff\n-/\n\n",
 "lt_max_of_lt_right":
 "#print lt_max_of_lt_right /-\ntheorem lt_max_of_lt_right (h : a < c) : a < max b c :=\n  h.trans_le (le_max_right b c)\n#align lt_max_of_lt_right lt_max_of_lt_right\n-/\n\n",
 "lt_max_of_lt_left":
 "#print lt_max_of_lt_left /-\ntheorem lt_max_of_lt_left (h : a < b) : a < max b c :=\n  h.trans_le (le_max_left b c)\n#align lt_max_of_lt_left lt_max_of_lt_left\n-/\n\n",
 "lt_max_iff":
 "#print lt_max_iff /-\n@[simp]\ntheorem lt_max_iff : a < max b c ↔ a < b ∨ a < c :=\n  lt_sup_iff\n#align lt_max_iff lt_max_iff\n-/\n\n",
 "left_comm":
 "#print Max.left_comm /-\ntheorem Max.left_comm (a b c : α) : max a (max b c) = max b (max a c) :=\n  left_comm max max_comm max_assoc a b c\n#align max.left_comm Max.left_comm\n-/\n\n",
 "le_of_max_le_right":
 "#print le_of_max_le_right /-\ntheorem le_of_max_le_right {a b c : α} (h : max a b ≤ c) : b ≤ c :=\n  le_trans (le_max_right _ _) h\n#align le_of_max_le_right le_of_max_le_right\n-/\n\n",
 "le_of_max_le_left":
 "#print le_of_max_le_left /-\ntheorem le_of_max_le_left {a b c : α} (h : max a b ≤ c) : a ≤ c :=\n  le_trans (le_max_left _ _) h\n#align le_of_max_le_left le_of_max_le_left\n-/\n\n",
 "le_min_iff":
 "#print le_min_iff /-\n/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n-- translate from lattices to linear orders (sup → max, inf → min)\n@[simp]\ntheorem le_min_iff : c ≤ min a b ↔ c ≤ a ∧ c ≤ b :=\n  le_inf_iff\n#align le_min_iff le_min_iff\n-/\n\n",
 "le_max_of_le_right":
 "#print le_max_of_le_right /-\ntheorem le_max_of_le_right : a ≤ c → a ≤ max b c :=\n  le_sup_of_le_right\n#align le_max_of_le_right le_max_of_le_right\n-/\n\n",
 "le_max_of_le_left":
 "#print le_max_of_le_left /-\ntheorem le_max_of_le_left : a ≤ b → a ≤ max b c :=\n  le_sup_of_le_left\n#align le_max_of_le_left le_max_of_le_left\n-/\n\n",
 "le_max_iff":
 "#print le_max_iff /-\n@[simp]\ntheorem le_max_iff : a ≤ max b c ↔ a ≤ b ∨ a ≤ c :=\n  le_sup_iff\n#align le_max_iff le_max_iff\n-/\n\n"}