{"of_mem_or_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem is_prime.of_mem_or_mem [IsProper I] (hI : ∀ {x y : P}, «expr ⊓ » x y ∈ I → x ∈ I ∨ y ∈ I) : IsPrime I :=\n  by\n  rw [is_prime_iff]\n  use ‹_›\n  apply is_pfilter.of_def\n  · exact Set.nonempty_compl.2 (I.is_proper_iff.1 ‹_›)\n  · intro x _ y _\n    refine' ⟨«expr ⊓ » x y, _, inf_le_left, inf_le_right⟩\n    have := mt hI\n    tauto\n  · exact @mem_compl_of_ge _ _ _\n#align is_prime.of_mem_or_mem is_prime.of_mem_or_mem\n\n",
 "mem_or_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem is_prime.mem_or_mem (hI : IsPrime I) {x y : P} : «expr ⊓ » x y ∈ I → x ∈ I ∨ y ∈ I :=\n  by\n  contrapose!\n  let F := hI.compl_filter.to_pfilter\n  show x ∈ F ∧ y ∈ F → «expr ⊓ » x y ∈ F\n  exact fun h => inf_mem h.1 h.2\n#align is_prime.mem_or_mem is_prime.mem_or_mem\n\n",
 "mem_or_compl_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_prime.mem_or_compl_mem (hI : IsPrime I) : x ∈ I ∨ «expr ᶜ» x ∈ I :=\n  by\n  apply hI.mem_or_mem\n  rw [inf_compl_eq_bot]\n  exact I.bot_mem\n#align is_prime.mem_or_compl_mem is_prime.mem_or_compl_mem\n\n",
 "mem_compl_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_prime.mem_compl_of_not_mem (hI : IsPrime I) (hxnI : x ∉ I) : «expr ᶜ» x ∈ I :=\n  hI.mem_or_compl_mem.resolve_left hxnI\n#align is_prime.mem_compl_of_not_mem is_prime.mem_compl_of_not_mem\n\n",
 "is_prime_of_mem_or_compl_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_prime_of_mem_or_compl_mem [IsProper I] (h : ∀ {x : P}, x ∈ I ∨ «expr ᶜ» x ∈ I) : IsPrime I :=\n  by\n  simp only [is_prime_iff_mem_or_mem, or_iff_not_imp_left]\n  intro x y hxy hxI\n  have hxcI : «expr ᶜ» x ∈ I := h.resolve_left hxI\n  have ass : «expr ⊔ » («expr ⊓ » x y) («expr ⊓ » y («expr ᶜ» x)) ∈ I := sup_mem hxy (I.lower inf_le_right hxcI)\n  rwa [inf_comm, sup_inf_inf_compl] at ass\n#align is_prime_of_mem_or_compl_mem is_prime_of_mem_or_compl_mem\n\n",
 "is_prime_iff_mem_or_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem is_prime_iff_mem_or_mem [IsProper I] : IsPrime I ↔ ∀ {x y : P}, «expr ⊓ » x y ∈ I → x ∈ I ∨ y ∈ I :=\n  ⟨IsPrime.mem_or_mem, IsPrime.of_mem_or_mem⟩\n#align is_prime_iff_mem_or_mem is_prime_iff_mem_or_mem\n\n",
 "is_prime_iff_mem_or_compl_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_prime_iff_mem_or_compl_mem [IsProper I] : IsPrime I ↔ ∀ {x : P}, x ∈ I ∨ «expr ᶜ» x ∈ I :=\n  ⟨fun h _ => h.mem_or_compl_mem, isPrime_of_mem_or_compl_mem⟩\n#align is_prime_iff_mem_or_compl_mem is_prime_iff_mem_or_compl_mem\n\n",
 "compl_I_eq_F":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-\nCopyright (c) 2021 Noam Atar. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Noam Atar\n-/\ntheorem compl_I_eq_F : «expr ᶜ» (IF.I : Set P) = IF.F :=\n  IF.is_compl_I_F.compl_eq\n#align compl_I_eq_F compl_I_eq_F\n\n",
 "compl_F_eq_I":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_F_eq_I : «expr ᶜ» (IF.F : Set P) = IF.I :=\n  IF.is_compl_I_F.eq_compl.symm\n#align compl_F_eq_I compl_F_eq_I\n\n",
 "I_union_F":
 "theorem I_union_F : (IF.I : Set P) ∪ IF.F = Set.univ :=\n  IF.is_compl_I_F.sup_eq_top\n#align I_union_F I_union_F\n\n",
 "I_is_proper":
 "theorem I_is_proper : IsProper IF.I := by\n  cases IF.F.nonempty\n  apply is_proper_of_not_mem (_ : w ∉ IF.I)\n  rwa [← IF.compl_I_eq_F] at h\n#align I_is_proper I_is_proper\n\n",
 "I_is_prime":
 "theorem prime_pair.I_is_prime (IF : PrimePair P) : IsPrime IF.I :=\n  { IF.I_is_proper with\n    compl_filter := by\n      rw [IF.compl_I_eq_F]\n      exact IF.F.is_pfilter }\n#align prime_pair.I_is_prime prime_pair.I_is_prime\n\n",
 "F_union_I":
 "theorem F_union_I : (IF.F : Set P) ∪ IF.I = Set.univ :=\n  IF.is_compl_I_F.symm.sup_eq_top\n#align F_union_I F_union_I\n\n",
 "F_is_prime":
 "#print Order.Ideal.PrimePair.F_isPrime /-\ntheorem Order.Ideal.PrimePair.F_isPrime (IF : Ideal.PrimePair P) : IsPrime IF.F :=\n  {\n    compl_ideal := by\n      rw [IF.compl_F_eq_I]\n      exact IF.I.is_ideal }\n#align order.ideal.prime_pair.F_is_prime Order.Ideal.PrimePair.F_isPrime\n-/\n\n",
 "Disjoint":
 "#print Disjoint /-\ntheorem Disjoint : Disjoint (IF.I : Set P) IF.F :=\n  IF.is_compl_I_F.disjoint\n#align disjoint Disjoint\n-/\n\n"}