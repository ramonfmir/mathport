{"minimals_upperClosure":
 "#print IsAntichain.minimals_upperClosure /-\ntheorem IsAntichain.minimals_upperClosure (hs : IsAntichain (· ≤ ·) s) :\n    minimals (· ≤ ·) (upperClosure s : Set α) = s :=\n  hs.max_minimals (fun a ⟨⟨b, hb, hba⟩, h⟩ => by rwa [eq_of_mem_minimals ‹a ∈ _› (subset_upperClosure hb) hba])\n    fun a ha => ⟨a, ⟨subset_upperClosure ha, fun b ⟨c, hc, hcb⟩ hba => by rwa [hs.eq' ha hc (hcb.trans hba)]⟩, le_rfl⟩\n#align is_antichain.minimals_upper_closure IsAntichain.minimals_upperClosure\n-/\n\n",
 "minimals_union":
 "#print minimals_union /-\ntheorem minimals_union : minimals r (s ∪ t) ⊆ minimals r s ∪ minimals r t :=\n  maximals_union\n#align minimals_union minimals_union\n-/\n\n",
 "minimals_swap":
 "#print minimals_swap /-\ntheorem minimals_swap : minimals (swap r) s = maximals r s :=\n  rfl\n#align minimals_swap minimals_swap\n-/\n\n",
 "minimals_subset":
 "#print minimals_subset /-\ntheorem minimals_subset : minimals r s ⊆ s :=\n  sep_subset _ _\n#align minimals_subset minimals_subset\n-/\n\n",
 "minimals_singleton":
 "#print minimals_singleton /-\n@[simp]\ntheorem minimals_singleton : minimals r {a} = {a} :=\n  maximals_singleton _ _\n#align minimals_singleton minimals_singleton\n-/\n\n",
 "minimals_mono":
 "#print minimals_mono /-\ntheorem minimals_mono [is_antisymm α r₂] (h : ∀ a b, r₁ a b → r₂ a b) : minimals r₂ s ⊆ minimals r₁ s := fun a ha =>\n  ⟨ha.1, fun b hb hab => by\n    have := eq_of_mem_minimals ha hb (h _ _ hab)\n    subst this\n    exact hab⟩\n#align minimals_mono minimals_mono\n-/\n\n",
 "minimals_inter_subset":
 "#print minimals_inter_subset /-\ntheorem minimals_inter_subset : minimals r s ∩ t ⊆ minimals r (s ∩ t) :=\n  maximals_inter_subset\n#align minimals_inter_subset minimals_inter_subset\n-/\n\n",
 "minimals_idem":
 "#print minimals_idem /-\n@[simp]\ntheorem minimals_idem : minimals r (minimals r s) = minimals r s :=\n  maximals_idem\n#align minimals_idem minimals_idem\n-/\n\n",
 "minimals_eq":
 "#print IsLeast.minimals_eq /-\ntheorem IsLeast.minimals_eq (h : IsLeast s a) : minimals (· ≤ ·) s = {a} :=\n  eq_singleton_iff_unique_mem.2 ⟨h.mem_minimals, fun b hb => eq_of_mem_minimals hb h.1 <| h.2 hb.1⟩\n#align is_least.minimals_eq IsLeast.minimals_eq\n-/\n\n",
 "minimals_empty":
 "#print minimals_empty /-\n@[simp]\ntheorem minimals_empty : minimals r ∅ = ∅ :=\n  sep_empty _\n#align minimals_empty minimals_empty\n-/\n\n",
 "minimals_antichain":
 "#print minimals_antichain /-\ntheorem minimals_antichain : IsAntichain r (minimals r s) :=\n  haveI := IsAntisymm.swap r\n  (maximals_antichain _ _).swap\n#align minimals_antichain minimals_antichain\n-/\n\n",
 "mem_minimals":
 "#print IsLeast.mem_minimals /-\ntheorem IsLeast.mem_minimals (h : IsLeast s a) : a ∈ minimals (· ≤ ·) s :=\n  ⟨h.1, fun b hb _ => h.2 hb⟩\n#align is_least.mem_minimals IsLeast.mem_minimals\n-/\n\n",
 "mem_maximals":
 "#print IsGreatest.mem_maximals /-\ntheorem IsGreatest.mem_maximals (h : IsGreatest s a) : a ∈ maximals (· ≤ ·) s :=\n  ⟨h.1, fun b hb _ => h.2 hb⟩\n#align is_greatest.mem_maximals IsGreatest.mem_maximals\n-/\n\n",
 "maximals_union":
 "#print maximals_union /-\ntheorem maximals_union : maximals r (s ∪ t) ⊆ maximals r s ∪ maximals r t :=\n  by\n  intro a ha\n  obtain h | h := ha.1\n  · exact or.inl ⟨h, fun b hb => ha.2 <| or.inl hb⟩\n  · exact or.inr ⟨h, fun b hb => ha.2 <| or.inr hb⟩\n#align maximals_union maximals_union\n-/\n\n",
 "maximals_swap":
 "#print maximals_swap /-\ntheorem maximals_swap : maximals (swap r) s = minimals r s :=\n  rfl\n#align maximals_swap maximals_swap\n-/\n\n",
 "maximals_subset":
 "#print maximals_subset /-\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem maximals_subset : maximals r s ⊆ s :=\n  sep_subset _ _\n#align maximals_subset maximals_subset\n-/\n\n",
 "maximals_singleton":
 "#print maximals_singleton /-\n@[simp]\ntheorem maximals_singleton : maximals r {a} = {a} :=\n  (maximals_subset _ _).antisymm <|\n    singleton_subset_iff.2 <|\n      ⟨rfl, by\n        rintro b (rfl : b = a)\n        exact id⟩\n#align maximals_singleton maximals_singleton\n-/\n\n",
 "maximals_mono":
 "#print maximals_mono /-\ntheorem maximals_mono [is_antisymm α r₂] (h : ∀ a b, r₁ a b → r₂ a b) : maximals r₂ s ⊆ maximals r₁ s := fun a ha =>\n  ⟨ha.1, fun b hb hab => by\n    have := eq_of_mem_maximals ha hb (h _ _ hab)\n    subst this\n    exact hab⟩\n#align maximals_mono maximals_mono\n-/\n\n",
 "maximals_lowerClosure":
 "#print IsAntichain.maximals_lowerClosure /-\ntheorem IsAntichain.maximals_lowerClosure (hs : IsAntichain (· ≤ ·) s) :\n    maximals (· ≤ ·) (lowerClosure s : Set α) = s :=\n  hs.to_dual.minimals_upper_closure\n#align is_antichain.maximals_lower_closure IsAntichain.maximals_lowerClosure\n-/\n\n",
 "maximals_inter_subset":
 "#print maximals_inter_subset /-\ntheorem maximals_inter_subset : maximals r s ∩ t ⊆ maximals r (s ∩ t) := fun a ha =>\n  ⟨⟨ha.1.1, ha.2⟩, fun b hb => ha.1.2 hb.1⟩\n#align maximals_inter_subset maximals_inter_subset\n-/\n\n",
 "maximals_idem":
 "#print maximals_idem /-\n@[simp]\ntheorem maximals_idem : maximals r (maximals r s) = maximals r s :=\n  (maximals_subset _ _).antisymm fun a ha => ⟨ha, fun b hb => ha.2 hb.1⟩\n#align maximals_idem maximals_idem\n-/\n\n",
 "maximals_eq_minimals":
 "#print maximals_eq_minimals /-\ntheorem maximals_eq_minimals [is_symm α r] : maximals r s = minimals r s :=\n  by\n  congr\n  ext (a b)\n  exact comm\n#align maximals_eq_minimals maximals_eq_minimals\n-/\n\n",
 "maximals_eq":
 "#print IsGreatest.maximals_eq /-\ntheorem IsGreatest.maximals_eq (h : IsGreatest s a) : maximals (· ≤ ·) s = {a} :=\n  eq_singleton_iff_unique_mem.2 ⟨h.mem_maximals, fun b hb => eq_of_mem_maximals hb h.1 <| h.2 hb.1⟩\n#align is_greatest.maximals_eq IsGreatest.maximals_eq\n-/\n\n",
 "maximals_empty":
 "#print maximals_empty /-\n@[simp]\ntheorem maximals_empty : maximals r ∅ = ∅ :=\n  sep_empty _\n#align maximals_empty maximals_empty\n-/\n\n",
 "maximals_antichain":
 "#print maximals_antichain /-\ntheorem maximals_antichain : IsAntichain r (maximals r s) := fun a ha b hb hab h => hab <| eq_of_mem_maximals ha hb.1 h\n#align maximals_antichain maximals_antichain\n-/\n\n",
 "max_minimals":
 "#print IsAntichain.max_minimals /-\n/-- If `minimals r s` is included in but *shadows* the antichain `t`, then it is actually\nequal to `t`. -/\ntheorem IsAntichain.max_minimals (ht : IsAntichain r t) (h : minimals r s ⊆ t)\n    (hs : ∀ ⦃a⦄, a ∈ t → ∃ b ∈ minimals r s, r a b) : minimals r s = t :=\n  by\n  refine' h.antisymm fun a ha => _\n  obtain ⟨b, hb, hr⟩ := hs ha\n  rwa [of_not_not fun hab => ht ha (h hb) hab hr]\n#align is_antichain.max_minimals IsAntichain.max_minimals\n-/\n\n",
 "max_maximals":
 "#print IsAntichain.max_maximals /-\n/-- If `maximals r s` is included in but *shadows* the antichain `t`, then it is actually\nequal to `t`. -/\ntheorem IsAntichain.max_maximals (ht : IsAntichain r t) (h : maximals r s ⊆ t)\n    (hs : ∀ ⦃a⦄, a ∈ t → ∃ b ∈ maximals r s, r b a) : maximals r s = t :=\n  by\n  refine' h.antisymm fun a ha => _\n  obtain ⟨b, hb, hr⟩ := hs ha\n  rwa [of_not_not fun hab => ht (h hb) ha (ne.symm hab) hr]\n#align is_antichain.max_maximals IsAntichain.max_maximals\n-/\n\n",
 "inter_minimals_subset":
 "#print inter_minimals_subset /-\ntheorem inter_minimals_subset : s ∩ minimals r t ⊆ minimals r (s ∩ t) :=\n  inter_maximals_subset\n#align inter_minimals_subset inter_minimals_subset\n-/\n\n",
 "inter_maximals_subset":
 "#print inter_maximals_subset /-\ntheorem inter_maximals_subset : s ∩ maximals r t ⊆ maximals r (s ∩ t) := fun a ha =>\n  ⟨⟨ha.1, ha.2.1⟩, fun b hb => ha.2.2 hb.2⟩\n#align inter_maximals_subset inter_maximals_subset\n-/\n\n",
 "eq_of_mem_minimals":
 "#print eq_of_mem_minimals /-\ntheorem eq_of_mem_minimals (ha : a ∈ minimals r s) (hb : b ∈ s) (h : r b a) : a = b :=\n  antisymm (ha.2 hb h) h\n#align eq_of_mem_minimals eq_of_mem_minimals\n-/\n\n",
 "eq_of_mem_maximals":
 "#print eq_of_mem_maximals /-\ntheorem eq_of_mem_maximals (ha : a ∈ maximals r s) (hb : b ∈ s) (h : r a b) : a = b :=\n  antisymm h <| ha.2 hb h\n#align eq_of_mem_maximals eq_of_mem_maximals\n-/\n\n"}