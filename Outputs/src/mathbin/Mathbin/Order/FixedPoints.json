{"prev_fixed_le":
 "theorem prev_fixed_le {x : α} (hx : f x ≤ x) : ↑(f.prev_fixed x hx) ≤ x :=\n  f.gfp_const_inf_le x\n#align prev_fixed_le prev_fixed_le\n\n",
 "next_fixed_le_iff":
 "@[simp]\ntheorem next_fixed_le_iff {x : α} (hx : x ≤ f x) {y : fixedPoints f} : f.next_fixed x hx ≤ y ↔ x ≤ y :=\n  ⟨fun h => (f.le_next_fixed hx).trans h, f.next_fixed_le hx⟩\n#align next_fixed_le_iff next_fixed_le_iff\n\n",
 "next_fixed_le":
 "theorem next_fixed_le {x : α} (hx : x ≤ f x) {y : fixedPoints f} (h : x ≤ y) : f.next_fixed x hx ≤ y :=\n  Subtype.coe_le_coe.1 <| lfp_le _ <| sup_le h y.2.le\n#align next_fixed_le next_fixed_le\n\n",
 "map_lfp_comp":
 "-- Rolling rule\ntheorem map_lfp_comp : f (lfp (g.comp f)) = lfp (f.comp g) :=\n  le_antisymm ((f.comp g).map_lfp ▸ f.mono (lfp_le_fixed _ <| congr_arg g (f.comp g).map_lfp)) <|\n    lfp_le _ (congr_arg f (g.comp f).map_lfp).le\n#align map_lfp_comp map_lfp_comp\n\n",
 "map_lfp":
 "@[simp]\ntheorem map_lfp : f (lfp f) = lfp f :=\n  have h : f (lfp f) ≤ lfp f := f.map_le_lfp le_rfl\n  h.antisymm <| f.lfp_le <| f.mono h\n#align map_lfp map_lfp\n\n",
 "map_le_lfp":
 "theorem map_le_lfp {a : α} (ha : a ≤ f.lfp) : f a ≤ f.lfp :=\n  f.le_lfp fun b hb => (f.mono <| le_infₛ_iff.1 ha _ hb).trans hb\n#align map_le_lfp map_le_lfp\n\n",
 "map_le_gfp":
 "theorem map_le_gfp {a : α} (ha : a ≤ gfp f) : f a ≤ gfp f :=\n  f.dual.lfp_le_map ha\n#align map_le_gfp map_le_gfp\n\n",
 "map_inf_fixed_points_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem map_inf_fixed_points_le (x y : fixedPoints f) : f («expr ⊓ » x y) ≤ «expr ⊓ » x y :=\n  f.dual.le_map_sup_fixed_points x y\n#align map_inf_fixed_points_le map_inf_fixed_points_le\n\n",
 "map_gfp_comp":
 "theorem map_gfp_comp : f (g.comp f).gfp = (f.comp g).gfp :=\n  f.dual.map_lfp_comp g.dual\n#align map_gfp_comp map_gfp_comp\n\n",
 "map_gfp":
 "@[simp]\ntheorem map_gfp : f (gfp f) = gfp f :=\n  f.dual.map_lfp\n#align map_gfp map_gfp\n\n",
 "map_Inf_subset_fixed_points_le":
 "theorem map_Inf_subset_fixed_points_le (A : Set α) (hA : A ⊆ fixedPoints f) : f (infₛ A) ≤ infₛ A :=\n  le_infₛ fun x hx => hA hx ▸ (f.mono <| infₛ_le hx)\n#align map_Inf_subset_fixed_points_le map_Inf_subset_fixed_points_le\n\n",
 "lfp_lfp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n-- Diagonal rule\ntheorem lfp_lfp (h : «expr →o » α («expr →o » α α)) : lfp (lfp.comp h) = lfp h.on_diag :=\n  by\n  let a := lfp (lfp.comp h)\n  refine' (lfp_le _ _).antisymm (lfp_le _ (Eq.le _))\n  · exact lfp_le _ h.on_diag.map_lfp.le\n  have ha : (lfp ∘ h) a = a := (lfp.comp h).map_lfp\n  calc\n    h a a = h a (lfp (h a)) := congr_arg (h a) ha.symm\n    _ = lfp (h a) := (h a).map_lfp\n    _ = a := ha\n    \n#align lfp_lfp lfp_lfp\n\n",
 "lfp_le_map":
 "theorem lfp_le_map {a : α} (ha : lfp f ≤ a) : lfp f ≤ f a :=\n  calc\n    lfp f = f (lfp f) := f.map_lfp.symm\n    _ ≤ f a := f.mono ha\n    \n#align lfp_le_map lfp_le_map\n\n",
 "lfp_le_fixed":
 "theorem lfp_le_fixed {a : α} (h : f a = a) : lfp f ≤ a :=\n  f.lfp_le h.le\n#align lfp_le_fixed lfp_le_fixed\n\n",
 "lfp_le":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Kenny Lau, Yury Kudryashov\n-/\ntheorem lfp_le {a : α} (h : f a ≤ a) : lfp f ≤ a :=\n  infₛ_le h\n#align lfp_le lfp_le\n\n",
 "lfp_induction":
 "theorem lfp_induction {p : α → Prop} (step : ∀ a, p a → a ≤ lfp f → p (f a)) (hSup : ∀ s, (∀ a ∈ s, p a) → p (supₛ s)) :\n    p (lfp f) := by\n  set s := { a | a ≤ lfp f ∧ p a }\n  specialize hSup s fun a => And.right\n  suffices : Sup s = lfp f\n  exact this ▸ hSup\n  have h : Sup s ≤ lfp f := supₛ_le fun b => And.left\n  have hmem : f (Sup s) ∈ s := ⟨f.map_le_lfp h, step _ hSup h⟩\n  exact h.antisymm (f.lfp_le <| le_supₛ hmem)\n#align lfp_induction lfp_induction\n\n",
 "le_prev_fixed_iff":
 "@[simp]\ntheorem le_prev_fixed_iff {x : α} (hx : f x ≤ x) {y : fixedPoints f} : y ≤ f.prev_fixed x hx ↔ ↑y ≤ x :=\n  f.dual.next_fixed_le_iff hx\n#align le_prev_fixed_iff le_prev_fixed_iff\n\n",
 "le_prev_fixed":
 "theorem le_prev_fixed {x : α} (hx : f x ≤ x) {y : fixedPoints f} (h : ↑y ≤ x) : y ≤ f.prev_fixed x hx :=\n  (f.le_prev_fixed_iff hx).2 h\n#align le_prev_fixed le_prev_fixed\n\n",
 "le_next_fixed":
 "theorem le_next_fixed {x : α} (hx : x ≤ f x) : x ≤ f.next_fixed x hx :=\n  f.dual.prev_fixed_le hx\n#align le_next_fixed le_next_fixed\n\n",
 "le_map_sup_fixed_points":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem le_map_sup_fixed_points (x y : fixedPoints f) : («expr ⊔ » x y : α) ≤ f («expr ⊔ » x y) :=\n  calc\n    («expr ⊔ » x y : α) = «expr ⊔ » (f x) (f y) := congr_arg₂ («expr ⊔ » · ·) x.2.symm y.2.symm\n    _ ≤ f («expr ⊔ » x y) := f.mono.le_map_sup x y\n    \n#align le_map_sup_fixed_points le_map_sup_fixed_points\n\n",
 "le_map_Sup_subset_fixed_points":
 "theorem le_map_Sup_subset_fixed_points (A : Set α) (hA : A ⊆ fixedPoints f) : supₛ A ≤ f (supₛ A) :=\n  supₛ_le fun x hx => hA hx ▸ (f.mono <| le_supₛ hx)\n#align le_map_Sup_subset_fixed_points le_map_Sup_subset_fixed_points\n\n",
 "le_lfp":
 "theorem le_lfp {a : α} (h : ∀ b, f b ≤ b → a ≤ b) : a ≤ lfp f :=\n  le_infₛ h\n#align le_lfp le_lfp\n\n",
 "le_gfp":
 "theorem le_gfp {a : α} (h : a ≤ f a) : a ≤ gfp f :=\n  le_supₛ h\n#align le_gfp le_gfp\n\n",
 "is_least_lfp_le":
 "theorem is_least_lfp_le : IsLeast { a | f a ≤ a } (lfp f) :=\n  ⟨f.map_lfp.le, fun a => f.lfp_le⟩\n#align is_least_lfp_le is_least_lfp_le\n\n",
 "is_least_lfp":
 "theorem is_least_lfp : IsLeast (fixedPoints f) (lfp f) :=\n  ⟨f.is_fixed_pt_lfp, fun a => f.lfp_le_fixed⟩\n#align is_least_lfp is_least_lfp\n\n",
 "is_greatest_gfp_le":
 "theorem is_greatest_gfp_le : IsGreatest { a | a ≤ f a } (gfp f) :=\n  f.dual.is_least_lfp_le\n#align is_greatest_gfp_le is_greatest_gfp_le\n\n",
 "is_greatest_gfp":
 "theorem is_greatest_gfp : IsGreatest (fixedPoints f) (gfp f) :=\n  f.dual.is_least_lfp\n#align is_greatest_gfp is_greatest_gfp\n\n",
 "is_fixed_pt_lfp":
 "theorem is_fixed_pt_lfp : IsFixedPt f f.lfp :=\n  f.map_lfp\n#align is_fixed_pt_lfp is_fixed_pt_lfp\n\n",
 "is_fixed_pt_gfp":
 "theorem is_fixed_pt_gfp : IsFixedPt f (gfp f) :=\n  f.dual.is_fixed_pt_lfp\n#align is_fixed_pt_gfp is_fixed_pt_gfp\n\n",
 "gfp_le_map":
 "theorem gfp_le_map {a : α} (ha : gfp f ≤ a) : gfp f ≤ f a :=\n  f.dual.map_le_lfp ha\n#align gfp_le_map gfp_le_map\n\n",
 "gfp_le":
 "theorem gfp_le {a : α} (h : ∀ b, b ≤ f b → b ≤ a) : gfp f ≤ a :=\n  supₛ_le h\n#align gfp_le gfp_le\n\n",
 "gfp_induction":
 "theorem gfp_induction {p : α → Prop} (step : ∀ a, p a → gfp f ≤ a → p (f a)) (hInf : ∀ s, (∀ a ∈ s, p a) → p (infₛ s)) :\n    p (gfp f) :=\n  f.dual.lfp_induction step hInf\n#align gfp_induction gfp_induction\n\n",
 "gfp_gfp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem gfp_gfp (h : «expr →o » α («expr →o » α α)) : gfp (gfp.comp h) = gfp h.on_diag :=\n  @lfp_lfp («expr ᵒᵈ» α) _ <|\n    (OrderHom.dualIso («expr ᵒᵈ» α) («expr ᵒᵈ» α)).symm.to_order_embedding.to_order_hom.comp h.dual\n#align gfp_gfp gfp_gfp\n\n",
 "gfp_const_inf_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem gfp_const_inf_le (x : α) : gfp («expr ⊓ » (const α x) f) ≤ x :=\n  gfp_le _ fun b hb => hb.trans inf_le_left\n#align gfp_const_inf_le gfp_const_inf_le\n\n"}