{"extend_partialOrder":
 "#print extend_partialOrder /-\n/-\nCopyright (c) 2021 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- Any partial order can be extended to a linear order.\n-/\ntheorem extend_partialOrder {α : Type u} (r : α → α → Prop) [is_partial_order α r] :\n    ∃ (s : α → α → Prop)(_ : is_linear_order α s), r ≤ s :=\n  by\n  let S := { s | is_partial_order α s }\n  have hS : ∀ c, c ⊆ S → IsChain (· ≤ ·) c → ∀ y ∈ c, ∃ ub ∈ S, ∀ z ∈ c, z ≤ ub :=\n    by\n    rintro c hc₁ hc₂ s hs\n    haveI := (hc₁ hs).1\n    refine' ⟨Sup c, _, fun z hz => le_supₛ hz⟩\n    refine'\n        { refl := _\n          trans := _\n          antisymm := _ } <;>\n      simp_rw [binary_relation_supₛ_iff]\n    · intro x\n      exact ⟨s, hs, refl x⟩\n    · rintro x y z ⟨s₁, h₁s₁, h₂s₁⟩ ⟨s₂, h₁s₂, h₂s₂⟩\n      haveI : is_partial_order _ _ := hc₁ h₁s₁\n      haveI : is_partial_order _ _ := hc₁ h₁s₂\n      cases hc₂.total h₁s₁ h₁s₂\n      · exact ⟨s₂, h₁s₂, trans (h _ _ h₂s₁) h₂s₂⟩\n      · exact ⟨s₁, h₁s₁, trans h₂s₁ (h _ _ h₂s₂)⟩\n    · rintro x y ⟨s₁, h₁s₁, h₂s₁⟩ ⟨s₂, h₁s₂, h₂s₂⟩\n      haveI : is_partial_order _ _ := hc₁ h₁s₁\n      haveI : is_partial_order _ _ := hc₁ h₁s₂\n      cases hc₂.total h₁s₁ h₁s₂\n      · exact antisymm (h _ _ h₂s₁) h₂s₂\n      · apply antisymm h₂s₁ (h _ _ h₂s₂)\n  obtain ⟨s, hs₁ : is_partial_order _ _, rs, hs₂⟩ := zorn_nonempty_partialOrder₀ S hS r ‹_›\n  skip\n  refine' ⟨s, { total := _ }, rs⟩\n  intro x y\n  by_contra' h\n  let s' x' y' := s x' y' ∨ s x' x ∧ s y y'\n  rw [← hs₂ s' _ fun _ _ => or.inl] at h\n  · apply h.1 (or.inr ⟨refl _, refl _⟩)\n  · refine'\n      { refl := fun x => or.inl (refl _)\n        trans := _\n        antisymm := _ }\n    · rintro a b c (ab | ⟨ax : s a x, yb : s y b⟩) (bc | ⟨bx : s b x, yc : s y c⟩)\n      · exact or.inl (trans ab bc)\n      · exact or.inr ⟨trans ab bx, yc⟩\n      · exact or.inr ⟨ax, trans yb bc⟩\n      · exact or.inr ⟨ax, yc⟩\n    · rintro a b (ab | ⟨ax : s a x, yb : s y b⟩) (ba | ⟨bx : s b x, ya : s y a⟩)\n      · exact antisymm ab ba\n      · exact (h.2 (trans ya (trans ab bx))).elim\n      · exact (h.2 (trans yb (trans ba ax))).elim\n      · exact (h.2 (trans yb bx)).elim\n#align extend_partial_order extend_partialOrder\n-/\n\n"}