{"pairwise_disjoint_on_Ioo_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- If `α` is a linear succ order, `β` is a preorder, and `f : α → β` is an antitone function, then\nthe intervals `set.Ioo (f (order.succ n)) (f n)` are pairwise disjoint. -/\ntheorem pairwise_disjoint_on_Ioo_succ [SuccOrder α] [preorder β] {f : α → β} (hf : Antitone f) :\n    Pairwise («expr on » Disjoint fun n => Ioo (f (succ n)) (f n)) :=\n  hf.dual_left.pairwise_disjoint_on_Ioo_pred\n#align pairwise_disjoint_on_Ioo_succ pairwise_disjoint_on_Ioo_succ\n\n",
 "pairwise_disjoint_on_Ioo_pred":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- If `α` is a linear pred order, `β` is a preorder, and `f : α → β` is an antitone function, then\nthe intervals `set.Ioo (f n) (f (order.pred n))` are pairwise disjoint. -/\ntheorem pairwise_disjoint_on_Ioo_pred [PredOrder α] [preorder β] {f : α → β} (hf : Antitone f) :\n    Pairwise («expr on » Disjoint fun n => Ioo (f n) (f (pred n))) :=\n  hf.dual_left.pairwise_disjoint_on_Ioo_succ\n#align pairwise_disjoint_on_Ioo_pred pairwise_disjoint_on_Ioo_pred\n\n",
 "pairwise_disjoint_on_Ioc_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- If `α` is a linear succ order, `β` is a preorder, and `f : α → β` is an antitone function, then\nthe intervals `set.Ioc (f (order.succ n)) (f n)` are pairwise disjoint. -/\ntheorem pairwise_disjoint_on_Ioc_succ [SuccOrder α] [preorder β] {f : α → β} (hf : Antitone f) :\n    Pairwise («expr on » Disjoint fun n => Ioc (f (succ n)) (f n)) :=\n  hf.dual_left.pairwise_disjoint_on_Ioc_pred\n#align pairwise_disjoint_on_Ioc_succ pairwise_disjoint_on_Ioc_succ\n\n",
 "pairwise_disjoint_on_Ioc_pred":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- If `α` is a linear pred order, `β` is a preorder, and `f : α → β` is an antitone function, then\nthe intervals `set.Ioc (f n) (f (order.pred n))` are pairwise disjoint. -/\ntheorem pairwise_disjoint_on_Ioc_pred [PredOrder α] [preorder β] {f : α → β} (hf : Antitone f) :\n    Pairwise («expr on » Disjoint fun n => Ioc (f n) (f (pred n))) :=\n  hf.dual_left.pairwise_disjoint_on_Ioc_succ\n#align pairwise_disjoint_on_Ioc_pred pairwise_disjoint_on_Ioc_pred\n\n",
 "pairwise_disjoint_on_Ico_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- If `α` is a linear succ order, `β` is a preorder, and `f : α → β` is an antitone function, then\nthe intervals `set.Ico (f (order.succ n)) (f n)` are pairwise disjoint. -/\ntheorem pairwise_disjoint_on_Ico_succ [SuccOrder α] [preorder β] {f : α → β} (hf : Antitone f) :\n    Pairwise («expr on » Disjoint fun n => Ico (f (succ n)) (f n)) :=\n  hf.dual_left.pairwise_disjoint_on_Ico_pred\n#align pairwise_disjoint_on_Ico_succ pairwise_disjoint_on_Ico_succ\n\n",
 "pairwise_disjoint_on_Ico_pred":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-- If `α` is a linear pred order, `β` is a preorder, and `f : α → β` is an antitone function, then\nthe intervals `set.Ico (f n) (f (order.pred n))` are pairwise disjoint. -/\ntheorem pairwise_disjoint_on_Ico_pred [PredOrder α] [preorder β] {f : α → β} (hf : Antitone f) :\n    Pairwise («expr on » Disjoint fun n => Ico (f n) (f (pred n))) :=\n  hf.dual_left.pairwise_disjoint_on_Ico_succ\n#align pairwise_disjoint_on_Ico_pred pairwise_disjoint_on_Ico_pred\n\n",
 "bUnion_Ico_Ioc_map_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-\nCopyright (c) 2022 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n/-- If `α` is a linear archimedean succ order and `β` is a linear order, then for any monotone\nfunction `f` and `m n : α`, the union of intervals `set.Ioc (f i) (f (order.succ i))`, `m ≤ i < n`,\nis equal to `set.Ioc (f m) (f n)` -/\ntheorem bUnion_Ico_Ioc_map_succ [SuccOrder α] [IsSuccArchimedean α] [linear_order β] {f : α → β} (hf : Monotone f)\n    (m n : α) :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ioc (f i) (f (succ i))) =\n      Ioc (f m) (f n) :=\n  by\n  cases' le_total n m with hnm hmn\n  · rw [Ico_eq_empty_of_le hnm, Ioc_eq_empty_of_le (hf hnm), bUnion_empty]\n  · refine' Succ.rec _ _ hmn\n    · simp only [Ioc_self, Ico_self, bUnion_empty]\n    · intro k hmk ihk\n      rw [← Ioc_union_Ioc_eq_Ioc (hf hmk) (hf <| le_succ _), union_comm, ← ihk]\n      by_cases hk : IsMax k\n      · rw [hk.succ_eq, Ioc_self, empty_union]\n      · rw [Ico_succ_right_eq_insert_of_not_is_max hmk hk, bUnion_insert]\n#align bUnion_Ico_Ioc_map_succ bUnion_Ico_Ioc_map_succ\n\n"}