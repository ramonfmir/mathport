{"to_noMinOrder":
 "#print NoBotOrder.to_noMinOrder /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Yury Kudryashov, Yaël Dillies\n-/\n-- See note [lower instance priority]\n-- See note [lower instance priority]\ntheorem NoBotOrder.to_noMinOrder (α : Type _) [linear_order α] [NoBotOrder α] : NoMinOrder α :=\n  {\n    exists_lt := by\n      convert fun a : α => exists_not_ge a\n      simp_rw [not_le] }\n#align no_bot_order.to_no_min_order NoBotOrder.to_noMinOrder\n-/\n\n",
 "to_noMaxOrder":
 "#print NoTopOrder.to_noMaxOrder /-\ntheorem NoTopOrder.to_noMaxOrder (α : Type _) [linear_order α] [NoTopOrder α] : NoMaxOrder α :=\n  {\n    exists_gt := by\n      convert fun a : α => exists_not_le a\n      simp_rw [not_le] }\n#align no_top_order.to_no_max_order NoTopOrder.to_noMaxOrder\n-/\n\n",
 "snd":
 "#print IsMax.snd /-\ntheorem IsMax.snd (hx : IsMax x) : IsMax x.2 := fun c hc => (hx <| show x ≤ (x.1, c) from (and_iff_right le_rfl).2 hc).2\n#align is_max.snd IsMax.snd\n-/\n\n",
 "prod_mk":
 "#print IsMax.prod_mk /-\ntheorem IsMax.prod_mk (ha : IsMax a) (hb : IsMax b) : IsMax (a, b) := fun c hc => ⟨ha hc.1, hb hc.2⟩\n#align is_max.prod_mk IsMax.prod_mk\n-/\n\n",
 "not_lt":
 "#print IsMax.not_lt /-\ntheorem IsMax.not_lt (h : IsMax a) : ¬a < b := fun hb => hb.not_le <| h hb.le\n#align is_max.not_lt IsMax.not_lt\n-/\n\n",
 "not_isTop":
 "#print not_isTop /-\n@[simp]\ntheorem not_isTop [NoTopOrder α] (a : α) : ¬IsTop a := fun h =>\n  let ⟨b, hb⟩ := exists_not_le a\n  hb <| h _\n#align not_is_top not_isTop\n-/\n\n",
 "not_isMin_of_lt":
 "#print not_isMin_of_lt /-\n@[simp]\ntheorem not_isMin_of_lt (h : b < a) : ¬IsMin a := fun ha => ha.not_lt h\n#align not_is_min_of_lt not_isMin_of_lt\n-/\n\n",
 "not_isMin_iff":
 "#print not_isMin_iff /-\n@[simp]\ntheorem not_isMin_iff : ¬IsMin a ↔ ∃ b, b < a := by simp_rw [lt_iff_le_not_le, IsMin, not_forall, exists_prop]\n#align not_is_min_iff not_isMin_iff\n-/\n\n",
 "not_isMin":
 "#print not_isMin /-\n@[simp]\ntheorem not_isMin [NoMinOrder α] (a : α) : ¬IsMin a :=\n  not_isMin_iff.2 <| exists_lt a\n#align not_is_min not_isMin\n-/\n\n",
 "not_isMax_of_lt":
 "#print not_isMax_of_lt /-\n@[simp]\ntheorem not_isMax_of_lt (h : a < b) : ¬IsMax a := fun ha => ha.not_lt h\n#align not_is_max_of_lt not_isMax_of_lt\n-/\n\n",
 "not_isMax_iff":
 "#print not_isMax_iff /-\n@[simp]\ntheorem not_isMax_iff : ¬IsMax a ↔ ∃ b, a < b := by simp_rw [lt_iff_le_not_le, IsMax, not_forall, exists_prop]\n#align not_is_max_iff not_isMax_iff\n-/\n\n",
 "not_isMax":
 "#print not_isMax /-\n@[simp]\ntheorem not_isMax [NoMaxOrder α] (a : α) : ¬IsMax a :=\n  not_isMax_iff.2 <| exists_gt a\n#align not_is_max not_isMax\n-/\n\n",
 "not_isBot":
 "#print not_isBot /-\n@[simp]\ntheorem not_isBot [NoBotOrder α] (a : α) : ¬IsBot a := fun h =>\n  let ⟨b, hb⟩ := exists_not_ge a\n  hb <| h _\n#align not_is_bot not_isBot\n-/\n\n",
 "not_acc":
 "#print NoMaxOrder.not_acc /-\ntheorem NoMaxOrder.not_acc [LT α] [NoMaxOrder α] (a : α) : ¬acc (· > ·) a := fun h =>\n  acc.rec_on h fun x _ => (exists_gt x).rec_on\n#align no_max_order.not_acc NoMaxOrder.not_acc\n-/\n\n",
 "noTopOrder_iff_noMaxOrder":
 "#print noTopOrder_iff_noMaxOrder /-\ntheorem noTopOrder_iff_noMaxOrder (α : Type _) [linear_order α] : NoTopOrder α ↔ NoMaxOrder α :=\n  ⟨fun h =>\n    haveI := h\n    NoTopOrder.to_noMaxOrder α,\n    fun h =>\n    haveI := h\n    no_max_order.to_no_top_order α⟩\n#align no_top_order_iff_no_max_order noTopOrder_iff_noMaxOrder\n-/\n\n",
 "noBotOrder_iff_noMinOrder":
 "#print noBotOrder_iff_noMinOrder /-\ntheorem noBotOrder_iff_noMinOrder (α : Type _) [linear_order α] : NoBotOrder α ↔ NoMinOrder α :=\n  ⟨fun h =>\n    haveI := h\n    NoBotOrder.to_noMinOrder α,\n    fun h =>\n    haveI := h\n    no_min_order.to_no_bot_order α⟩\n#align no_bot_order_iff_no_min_order noBotOrder_iff_noMinOrder\n-/\n\n",
 "mono":
 "#print IsMax.mono /-\ntheorem IsMax.mono (ha : IsMax a) (h : a ≤ b) : IsMax b := fun c hc => (ha <| h.trans hc).trans h\n#align is_max.mono IsMax.mono\n-/\n\n",
 "isTop_toDual_iff":
 "#print isTop_toDual_iff /-\n@[simp]\ntheorem isTop_toDual_iff : IsTop (toDual a) ↔ IsBot a :=\n  iff.rfl\n#align is_top_to_dual_iff isTop_toDual_iff\n-/\n\n",
 "isTop_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print isTop_ofDual_iff /-\n@[simp]\ntheorem isTop_ofDual_iff {a : «expr ᵒᵈ» α} : IsTop (ofDual a) ↔ IsBot a :=\n  iff.rfl\n#align is_top_of_dual_iff isTop_ofDual_iff\n-/\n\n",
 "isTop_iff":
 "#print Prod.isTop_iff /-\ntheorem Prod.isTop_iff : IsTop x ↔ IsTop x.1 ∧ IsTop x.2 :=\n  ⟨fun hx => ⟨hx.fst, hx.snd⟩, fun h => h.1.prod_mk h.2⟩\n#align prod.is_top_iff Prod.isTop_iff\n-/\n\n",
 "isMin_toDual_iff":
 "#print isMin_toDual_iff /-\n@[simp]\ntheorem isMin_toDual_iff : IsMin (toDual a) ↔ IsMax a :=\n  iff.rfl\n#align is_min_to_dual_iff isMin_toDual_iff\n-/\n\n",
 "isMin_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print isMin_ofDual_iff /-\n@[simp]\ntheorem isMin_ofDual_iff {a : «expr ᵒᵈ» α} : IsMin (ofDual a) ↔ IsMax a :=\n  iff.rfl\n#align is_min_of_dual_iff isMin_ofDual_iff\n-/\n\n",
 "isMin_iff_forall_not_lt":
 "#print isMin_iff_forall_not_lt /-\ntheorem isMin_iff_forall_not_lt : IsMin a ↔ ∀ b, ¬b < a :=\n  ⟨fun h _ => h.not_lt, fun h b hba => of_not_not fun hab => h _ <| hba.lt_of_not_le hab⟩\n#align is_min_iff_forall_not_lt isMin_iff_forall_not_lt\n-/\n\n",
 "isMin_iff":
 "#print Prod.isMin_iff /-\ntheorem Prod.isMin_iff : IsMin x ↔ IsMin x.1 ∧ IsMin x.2 :=\n  ⟨fun hx => ⟨hx.fst, hx.snd⟩, fun h => h.1.prod_mk h.2⟩\n#align prod.is_min_iff Prod.isMin_iff\n-/\n\n",
 "isMin":
 "#print IsBot.isMin /-\nprotected theorem IsBot.isMin (h : IsBot a) : IsMin a := fun b _ => h b\n#align is_bot.is_min IsBot.isMin\n-/\n\n",
 "isMax_toDual_iff":
 "#print isMax_toDual_iff /-\n@[simp]\ntheorem isMax_toDual_iff : IsMax (toDual a) ↔ IsMin a :=\n  iff.rfl\n#align is_max_to_dual_iff isMax_toDual_iff\n-/\n\n",
 "isMax_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print isMax_ofDual_iff /-\n@[simp]\ntheorem isMax_ofDual_iff {a : «expr ᵒᵈ» α} : IsMax (ofDual a) ↔ IsMin a :=\n  iff.rfl\n#align is_max_of_dual_iff isMax_ofDual_iff\n-/\n\n",
 "isMax_iff_forall_not_lt":
 "#print isMax_iff_forall_not_lt /-\ntheorem isMax_iff_forall_not_lt : IsMax a ↔ ∀ b, ¬a < b :=\n  ⟨fun h _ => h.not_lt, fun h b hba => of_not_not fun hab => h _ <| hba.lt_of_not_le hab⟩\n#align is_max_iff_forall_not_lt isMax_iff_forall_not_lt\n-/\n\n",
 "isMax_iff":
 "#print Prod.isMax_iff /-\ntheorem Prod.isMax_iff : IsMax x ↔ IsMax x.1 ∧ IsMax x.2 :=\n  ⟨fun hx => ⟨hx.fst, hx.snd⟩, fun h => h.1.prod_mk h.2⟩\n#align prod.is_max_iff Prod.isMax_iff\n-/\n\n",
 "isMax":
 "#print IsTop.isMax /-\nprotected theorem IsTop.isMax (h : IsTop a) : IsMax a := fun b _ => h b\n#align is_top.is_max IsTop.isMax\n-/\n\n",
 "isBot_toDual_iff":
 "#print isBot_toDual_iff /-\n@[simp]\ntheorem isBot_toDual_iff : IsBot (toDual a) ↔ IsTop a :=\n  iff.rfl\n#align is_bot_to_dual_iff isBot_toDual_iff\n-/\n\n",
 "isBot_ofDual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print isBot_ofDual_iff /-\n@[simp]\ntheorem isBot_ofDual_iff {a : «expr ᵒᵈ» α} : IsBot (ofDual a) ↔ IsTop a :=\n  iff.rfl\n#align is_bot_of_dual_iff isBot_ofDual_iff\n-/\n\n",
 "isBot_iff":
 "#print Prod.isBot_iff /-\ntheorem Prod.isBot_iff : IsBot x ↔ IsBot x.1 ∧ IsBot x.2 :=\n  ⟨fun hx => ⟨hx.fst, hx.snd⟩, fun h => h.1.prod_mk h.2⟩\n#align prod.is_bot_iff Prod.isBot_iff\n-/\n\n",
 "fst":
 "#print IsMax.fst /-\ntheorem IsMax.fst (hx : IsMax x) : IsMax x.1 := fun c hc => (hx <| show x ≤ (c, x.2) from (and_iff_left le_rfl).2 hc).1\n#align is_max.fst IsMax.fst\n-/\n\n",
 "eq_of_le":
 "#print IsMax.eq_of_le /-\nprotected theorem IsMax.eq_of_le (ha : IsMax a) (h : a ≤ b) : a = b :=\n  h.antisymm <| ha h\n#align is_max.eq_of_le IsMax.eq_of_le\n-/\n\n",
 "eq_of_ge":
 "#print IsMax.eq_of_ge /-\nprotected theorem IsMax.eq_of_ge (ha : IsMax a) (h : a ≤ b) : b = a :=\n  h.antisymm' <| ha h\n#align is_max.eq_of_ge IsMax.eq_of_ge\n-/\n\n",
 "IsTop":
 "#print IsTop /-\nprotected theorem IsTop (a : α) : IsTop a := fun _ => (subsingleton.elim _ _).le\n#align is_top IsTop\n-/\n\n",
 "IsMin":
 "#print IsMin /-\nprotected theorem IsMin (a : α) : IsMin a :=\n  (Subsingleton.isBot _).is_min\n#align is_min IsMin\n-/\n\n",
 "IsMax":
 "#print IsMax /-\nprotected theorem IsMax (a : α) : IsMax a :=\n  (Subsingleton.isTop _).is_max\n#align is_max IsMax\n-/\n\n",
 "IsBot":
 "#print IsBot /-\nprotected theorem IsBot (a : α) : IsBot a := fun _ => (subsingleton.elim _ _).le\n#align is_bot IsBot\n-/\n\n"}