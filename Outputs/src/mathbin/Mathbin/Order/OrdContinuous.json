{"mono":
 "theorem mono (hf : RightOrdContinuous f) : monotone f :=\n  hf.order_dual.mono.dual\n#align mono mono\n\n",
 "map_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem map_supr (hf : LeftOrdContinuous f) (g : ι → α) :\n    f («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (g i)) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f (g i)) :=\n  by simp only [supᵢ, hf.map_Sup', ← range_comp]\n#align map_supr map_supr\n\n",
 "map_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem map_sup (hf : LeftOrdContinuous f) (x y : α) : f («expr ⊔ » x y) = «expr ⊔ » (f x) (f y) :=\n  (hf isLUB_pair).unique <| by simp only [image_pair, isLUB_pair]\n#align map_sup map_sup\n\n",
 "map_is_least":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem map_is_least (hf : RightOrdContinuous f) {s : set α} {x : α} (h : IsLeast s x) :\n    IsLeast («expr '' » f s) (f x) :=\n  hf.order_dual.map_is_greatest h\n#align map_is_least map_is_least\n\n",
 "map_is_greatest":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem map_is_greatest (hf : LeftOrdContinuous f) {s : set α} {x : α} (h : IsGreatest s x) :\n    IsGreatest («expr '' » f s) (f x) :=\n  ⟨mem_image_of_mem f h.1, (hf h.is_lub).1⟩\n#align map_is_greatest map_is_greatest\n\n",
 "map_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem map_infi (hf : RightOrdContinuous f) (g : ι → α) :\n    f («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (g i)) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f (g i)) :=\n  hf.order_dual.map_supr g\n#align map_infi map_infi\n\n",
 "map_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem map_inf (hf : RightOrdContinuous f) (x y : α) : f («expr ⊓ » x y) = «expr ⊓ » (f x) (f y) :=\n  hf.order_dual.map_sup x y\n#align map_inf map_inf\n\n",
 "map_csupr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem map_csupr (hf : LeftOrdContinuous f) {g : ι → α} (hg : BddAbove (range g)) :\n    f («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (g i)) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f (g i)) :=\n  by simp only [supᵢ, hf.map_cSup (range_nonempty _) hg, ← range_comp]\n#align map_csupr map_csupr\n\n",
 "map_cinfi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem map_cinfi (hf : RightOrdContinuous f) {g : ι → α} (hg : BddBelow (range g)) :\n    f («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (g i)) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f (g i)) :=\n  hf.order_dual.map_csupr hg\n#align map_cinfi map_cinfi\n\n",
 "map_cSup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem map_cSup (hf : LeftOrdContinuous f) {s : set α} (sne : s.nonempty) (sbdd : BddAbove s) :\n    f (supₛ s) = supₛ («expr '' » f s) :=\n  ((hf <| isLUB_csupₛ sne sbdd).cSup_eq <| sne.image f).symm\n#align map_cSup map_cSup\n\n",
 "map_cInf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem map_cInf (hf : RightOrdContinuous f) {s : set α} (sne : s.nonempty) (sbdd : BddBelow s) :\n    f (infₛ s) = infₛ («expr '' » f s) :=\n  hf.order_dual.map_cSup sne sbdd\n#align map_cInf map_cInf\n\n",
 "map_Sup'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem map_Sup' (hf : LeftOrdContinuous f) (s : set α) : f (supₛ s) = supₛ («expr '' » f s) :=\n  (hf <| isLUB_supₛ s).Sup_eq.symm\n#align map_Sup' map_Sup'\n\n",
 "map_Sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem map_Sup (hf : LeftOrdContinuous f) (s : set α) :\n    f (supₛ s) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f x) :=\n  by rw [hf.map_Sup', supₛ_image]\n#align map_Sup map_Sup\n\n",
 "map_Inf'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem map_Inf' (hf : RightOrdContinuous f) (s : set α) : f (infₛ s) = infₛ («expr '' » f s) :=\n  hf.order_dual.map_Sup' s\n#align map_Inf' map_Inf'\n\n",
 "map_Inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem map_Inf (hf : RightOrdContinuous f) (s : set α) :\n    f (infₛ s) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f x) :=\n  hf.order_dual.map_Sup s\n#align map_Inf map_Inf\n\n",
 "lt_iff":
 "theorem lt_iff (hf : RightOrdContinuous f) (h : injective f) {x y} : f x < f y ↔ x < y :=\n  hf.order_dual.lt_iff h\n#align lt_iff lt_iff\n\n",
 "le_iff":
 "theorem le_iff (hf : RightOrdContinuous f) (h : injective f) {x y} : f x ≤ f y ↔ x ≤ y :=\n  hf.order_dual.le_iff h\n#align le_iff le_iff\n\n",
 "iterate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\nprotected theorem iterate {f : α → α} (hf : RightOrdContinuous f) (n : ℕ) : RightOrdContinuous («expr ^[ ]» f n) :=\n  hf.order_dual.iterate n\n#align iterate iterate\n\n",
 "id":
 "#print id /-\nprotected theorem id : RightOrdContinuous (id : α → α) := fun s x h => by simpa only [image_id] using h\n#align id id\n-/\n\n",
 "comp":
 "theorem comp (hg : RightOrdContinuous g) (hf : RightOrdContinuous f) : RightOrdContinuous (g ∘ f) :=\n  hg.order_dual.comp hf.order_dual\n#align comp comp\n\n",
 "coe_to_order_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_order_embedding (hf : RightOrdContinuous f) (h : injective f) :\n    «expr⇑ » (hf.to_order_embedding f h) = f :=\n  rfl\n#align coe_to_order_embedding coe_to_order_embedding\n\n",
 "RightOrdContinuous":
 "#print RightOrdContinuous /-\nprotected theorem RightOrdContinuous : RightOrdContinuous e :=\n  OrderIso.leftOrdContinuous e.dual\n#align right_ord_continuous RightOrdContinuous\n-/\n\n",
 "OrderDual":
 "#print OrderDual /-\nprotected theorem OrderDual : RightOrdContinuous f → LeftOrdContinuous (to_dual ∘ f ∘ of_dual) :=\n  id\n#align order_dual OrderDual\n-/\n\n",
 "LeftOrdContinuous":
 "#print LeftOrdContinuous /-\nprotected theorem LeftOrdContinuous : LeftOrdContinuous e := fun s x hx =>\n  ⟨Monotone.mem_upperBounds_image (fun x y => e.map_rel_iff.2) hx.1, fun y hy =>\n    e.rel_symm_apply.1 <| (isLUB_le_iff hx).2 fun x' hx' => e.rel_symm_apply.2 <| hy <| mem_image_of_mem _ hx'⟩\n#align left_ord_continuous LeftOrdContinuous\n-/\n\n"}