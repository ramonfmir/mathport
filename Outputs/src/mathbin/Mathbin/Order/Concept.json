{"top_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem top_snd : («expr⊤» : Concept α β r).snd = intentClosure r univ :=\n  rfl\n#align top_snd top_snd\n\n",
 "top_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem top_fst : («expr⊤» : Concept α β r).fst = univ :=\n  rfl\n#align top_fst top_fst\n\n",
 "swap_swap":
 "@[simp]\ntheorem swap_swap (c : Concept α β r) : c.swap.swap = c :=\n  ext rfl\n#align swap_swap swap_swap\n\n",
 "swap_lt_swap_iff":
 "@[simp]\ntheorem swap_lt_swap_iff : c.swap < d.swap ↔ d < c :=\n  snd_ssubset_snd_iff\n#align swap_lt_swap_iff swap_lt_swap_iff\n\n",
 "swap_le_swap_iff":
 "@[simp]\ntheorem swap_le_swap_iff : c.swap ≤ d.swap ↔ d ≤ c :=\n  snd_subset_snd_iff\n#align swap_le_swap_iff swap_le_swap_iff\n\n",
 "sup_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_snd (c d : Concept α β r) : («expr ⊔ » c d).snd = c.snd ∩ d.snd :=\n  rfl\n#align sup_snd sup_snd\n\n",
 "sup_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_fst (c d : Concept α β r) : («expr ⊔ » c d).fst = extentClosure r (c.snd ∩ d.snd) :=\n  rfl\n#align sup_fst sup_fst\n\n",
 "subset_intentClosure_iff_subset_extentClosure":
 "#print subset_intentClosure_iff_subset_extentClosure /-\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem subset_intentClosure_iff_subset_extentClosure : t ⊆ intentClosure r s ↔ s ⊆ extentClosure r t :=\n  ⟨fun h a ha b hb => h hb ha, fun h b hb a ha => h ha hb⟩\n#align subset_intent_closure_iff_subset_extent_closure subset_intentClosure_iff_subset_extentClosure\n-/\n\n",
 "subset_intentClosure_extentClosure":
 "#print subset_intentClosure_extentClosure /-\ntheorem subset_intentClosure_extentClosure (t : set β) : t ⊆ intentClosure r (extentClosure r t) :=\n  subset_extentClosure_intentClosure _ t\n#align subset_intent_closure_extent_closure subset_intentClosure_extentClosure\n-/\n\n",
 "subset_extentClosure_intentClosure":
 "#print subset_extentClosure_intentClosure /-\ntheorem subset_extentClosure_intentClosure (s : set α) : s ⊆ extentClosure r (intentClosure r s) :=\n  (gc_intentClosure_extentClosure r).le_u_l _\n#align subset_extent_closure_intent_closure subset_extentClosure_intentClosure\n-/\n\n",
 "strict_mono_fst":
 "theorem strict_mono_fst : strict_mono (prod.fst ∘ to_prod : Concept α β r → set α) := fun c d => fst_ssubset_fst_iff.2\n#align strict_mono_fst strict_mono_fst\n\n",
 "strict_anti_snd":
 "theorem strict_anti_snd : strict_anti (prod.snd ∘ to_prod : Concept α β r → set β) := fun c d => snd_ssubset_snd_iff.2\n#align strict_anti_snd strict_anti_snd\n\n",
 "snd_subset_snd_iff":
 "@[simp]\ntheorem snd_subset_snd_iff : c.snd ⊆ d.snd ↔ d ≤ c :=\n  by\n  refine' ⟨fun h => _, fun h => _⟩\n  · rw [← fst_subset_fst_iff, ← c.closure_snd, ← d.closure_snd]\n    exact extentClosure_anti _ h\n  · rw [← c.closure_fst, ← d.closure_fst]\n    exact intentClosure_anti _ h\n#align snd_subset_snd_iff snd_subset_snd_iff\n\n",
 "snd_ssubset_snd_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp]\ntheorem snd_ssubset_snd_iff : «expr ⊂ » c.snd d.snd ↔ d < c := by\n  rw [ssubset_iff_subset_not_subset, lt_iff_le_not_le, snd_subset_snd_iff, snd_subset_snd_iff]\n#align snd_ssubset_snd_iff snd_ssubset_snd_iff\n\n",
 "snd_injective":
 "theorem snd_injective : injective fun c : Concept α β r => c.snd := fun c d => ext'\n#align snd_injective snd_injective\n\n",
 "intent_closure_Union₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp]\ntheorem intent_closure_Union₂ (f : ∀ i, κ i → set α) :\n    intentClosure r\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i j)) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (intentClosure r (f i j)) :=\n  (gc_intentClosure_extentClosure r).l_supr₂\n#align intent_closure_Union₂ intent_closure_Union₂\n\n",
 "intentClosure_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print intentClosure_unionᵢ /-\n@[simp]\ntheorem intentClosure_unionᵢ (f : ι → set α) :\n    intentClosure r\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (intentClosure r (f i)) :=\n  (gc_intentClosure_extentClosure r).l_supr\n#align intent_closure_Union intentClosure_unionᵢ\n-/\n\n",
 "intentClosure_union":
 "#print intentClosure_union /-\n@[simp]\ntheorem intentClosure_union (s₁ s₂ : set α) : intentClosure r (s₁ ∪ s₂) = intentClosure r s₁ ∩ intentClosure r s₂ :=\n  Set.ext fun _ => ball_or_left\n#align intent_closure_union intentClosure_union\n-/\n\n",
 "intentClosure_swap":
 "#print intentClosure_swap /-\ntheorem intentClosure_swap (t : set β) : intentClosure (swap r) t = extentClosure r t :=\n  rfl\n#align intent_closure_swap intentClosure_swap\n-/\n\n",
 "intentClosure_extentClosure_intentClosure":
 "#print intentClosure_extentClosure_intentClosure /-\n@[simp]\ntheorem intentClosure_extentClosure_intentClosure (s : set α) :\n    intentClosure r (extentClosure r <| intentClosure r s) = intentClosure r s :=\n  (gc_intentClosure_extentClosure r).l_u_l_eq_l _\n#align intent_closure_extent_closure_intent_closure intentClosure_extentClosure_intentClosure\n-/\n\n",
 "intentClosure_empty":
 "#print intentClosure_empty /-\n@[simp]\ntheorem intentClosure_empty : intentClosure r ∅ = univ :=\n  eq_univ_of_forall fun _ _ => false.elim\n#align intent_closure_empty intentClosure_empty\n-/\n\n",
 "intentClosure_anti":
 "#print intentClosure_anti /-\ntheorem intentClosure_anti : antitone (intentClosure r) :=\n  (gc_intentClosure_extentClosure r).monotone_l\n#align intent_closure_anti intentClosure_anti\n-/\n\n",
 "inf_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_snd (c d : Concept α β r) : («expr ⊓ » c d).snd = intentClosure r (c.fst ∩ d.fst) :=\n  rfl\n#align inf_snd inf_snd\n\n",
 "inf_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_fst (c d : Concept α β r) : («expr ⊓ » c d).fst = c.fst ∩ d.fst :=\n  rfl\n#align inf_fst inf_fst\n\n",
 "gc_intentClosure_extentClosure":
 "#print gc_intentClosure_extentClosure /-\ntheorem gc_intentClosure_extentClosure : GaloisConnection (to_dual ∘ intentClosure r) (extentClosure r ∘ of_dual) :=\n  fun s t => subset_intentClosure_iff_subset_extentClosure\n#align gc_intent_closure_extent_closure gc_intentClosure_extentClosure\n-/\n\n",
 "fst_subset_fst_iff":
 "@[simp]\ntheorem fst_subset_fst_iff : c.fst ⊆ d.fst ↔ c ≤ d :=\n  iff.rfl\n#align fst_subset_fst_iff fst_subset_fst_iff\n\n",
 "fst_ssubset_fst_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\n@[simp]\ntheorem fst_ssubset_fst_iff : «expr ⊂ » c.fst d.fst ↔ c < d :=\n  iff.rfl\n#align fst_ssubset_fst_iff fst_ssubset_fst_iff\n\n",
 "fst_injective":
 "theorem fst_injective : injective fun c : Concept α β r => c.fst := fun c d => ext\n#align fst_injective fst_injective\n\n",
 "extentClosure_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print extentClosure_unionᵢ /-\n@[simp]\ntheorem extentClosure_unionᵢ (f : ι → set β) :\n    extentClosure r\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (extentClosure r (f i)) :=\n  intentClosure_unionᵢ _ _\n#align extent_closure_Union extentClosure_unionᵢ\n-/\n\n",
 "extentClosure_union":
 "#print extentClosure_union /-\n@[simp]\ntheorem extentClosure_union (t₁ t₂ : set β) : extentClosure r (t₁ ∪ t₂) = extentClosure r t₁ ∩ extentClosure r t₂ :=\n  intentClosure_union _ _ _\n#align extent_closure_union extentClosure_union\n-/\n\n",
 "extentClosure_swap":
 "#print extentClosure_swap /-\ntheorem extentClosure_swap (s : set α) : extentClosure (swap r) s = intentClosure r s :=\n  rfl\n#align extent_closure_swap extentClosure_swap\n-/\n\n",
 "extentClosure_intentClosure_extentClosure":
 "#print extentClosure_intentClosure_extentClosure /-\n@[simp]\ntheorem extentClosure_intentClosure_extentClosure (t : set β) :\n    extentClosure r (intentClosure r <| extentClosure r t) = extentClosure r t :=\n  intentClosure_extentClosure_intentClosure _ t\n#align extent_closure_intent_closure_extent_closure extentClosure_intentClosure_extentClosure\n-/\n\n",
 "extentClosure_empty":
 "#print extentClosure_empty /-\n@[simp]\ntheorem extentClosure_empty : extentClosure r ∅ = univ :=\n  intentClosure_empty _\n#align extent_closure_empty extentClosure_empty\n-/\n\n",
 "extentClosure_anti":
 "#print extentClosure_anti /-\ntheorem extentClosure_anti : antitone (extentClosure r) :=\n  intentClosure_anti _\n#align extent_closure_anti extentClosure_anti\n-/\n\n",
 "extentClosure_Union₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print extentClosure_Union₂ /-\n@[simp]\ntheorem extentClosure_Union₂ (f : ∀ i, κ i → set β) :\n    extentClosure r\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i j)) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (extentClosure r (f i j)) :=\n  intent_closure_Union₂ _ _\n#align extent_closure_Union₂ extentClosure_Union₂\n-/\n\n",
 "ext'":
 "theorem ext' (h : c.snd = d.snd) : c = d := by\n  obtain ⟨⟨s₁, t₁⟩, _, h₁⟩ := c\n  obtain ⟨⟨s₂, t₂⟩, _, h₂⟩ := d\n  dsimp at h₁ h₂ h\n  subst h\n  subst h₁\n  subst h₂\n#align ext' ext'\n\n",
 "ext":
 "@[ext]\ntheorem ext (h : c.fst = d.fst) : c = d := by\n  obtain ⟨⟨s₁, t₁⟩, h₁, _⟩ := c\n  obtain ⟨⟨s₂, t₂⟩, h₂, _⟩ := d\n  dsimp at h₁ h₂ h\n  subst h\n  subst h₁\n  subst h₂\n#align ext ext\n\n",
 "bot_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_snd : («expr⊥» : Concept α β r).snd = univ :=\n  rfl\n#align bot_snd bot_snd\n\n",
 "bot_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_fst : («expr⊥» : Concept α β r).fst = extentClosure r univ :=\n  rfl\n#align bot_fst bot_fst\n\n",
 "Sup_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp]\ntheorem Sup_snd (S : set (Concept α β r)) :\n    (supₛ S).snd =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (c : Concept _ _ _).snd :=\n  rfl\n#align Sup_snd Sup_snd\n\n",
 "Sup_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp]\ntheorem Sup_fst (S : set (Concept α β r)) :\n    (supₛ S).fst =\n      extentClosure r\n        («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          (c : Concept _ _ _).snd) :=\n  rfl\n#align Sup_fst Sup_fst\n\n",
 "Inf_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp]\ntheorem Inf_snd (S : set (Concept α β r)) :\n    (infₛ S).snd =\n      intentClosure r\n        («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          (c : Concept _ _ _).fst) :=\n  rfl\n#align Inf_snd Inf_snd\n\n",
 "Inf_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp]\ntheorem Inf_fst (S : set (Concept α β r)) :\n    (infₛ S).fst =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (c : Concept _ _ _).fst :=\n  rfl\n#align Inf_fst Inf_fst\n\n"}