{"well_founded_iff_has_min":
 "theorem well_founded_iff_has_min {r : α → α → Prop} :\n    well_founded r ↔ ∀ s : Set α, s.nonempty → ∃ m ∈ s, ∀ x ∈ s, ¬r x m :=\n  by\n  refine' ⟨fun h => h.has_min, fun h => ⟨fun x => _⟩⟩\n  by_contra hx\n  obtain ⟨m, hm, hm'⟩ := h _ ⟨x, hx⟩\n  refine' hm ⟨_, fun y hy => _⟩\n  by_contra hy'\n  exact hm' y hy' hy\n#align well_founded_iff_has_min well_founded_iff_has_min\n\n",
 "self_le_of_strict_mono":
 "theorem self_le_of_strict_mono {f : β → β} (hf : StrictMono f) : ∀ n, n ≤ f n :=\n  by\n  by_contra' h₁\n  have h₂ := h.min_mem _ h₁\n  exact h.not_lt_min _ h₁ (hf h₂) h₂\n#align self_le_of_strict_mono self_le_of_strict_mono\n\n",
 "not_lt_min":
 "theorem not_lt_min {r : α → α → Prop} (H : well_founded r) (s : Set α) (h : s.nonempty) {x} (hx : x ∈ s) :\n    ¬r x (H.min s h) :=\n  let ⟨_, h'⟩ := Classical.choose_spec (H.has_min s h)\n  h' _ hx\n#align not_lt_min not_lt_min\n\n",
 "not_lt_argmin_on":
 "@[simp]\ntheorem not_lt_argmin_on (s : Set α) {a : α} (ha : a ∈ s) (hs : s.nonempty := Set.nonempty_of_mem ha) :\n    ¬f a < f (argminOn f h s hs) :=\n  WellFounded.not_lt_min (inv_image.wf f h) s hs ha\n#align not_lt_argmin_on not_lt_argmin_on\n\n",
 "not_lt_argmin":
 "theorem not_lt_argmin [Nonempty α] (a : α) : ¬f a < f (argmin f h) :=\n  WellFounded.not_lt_min (inv_image.wf f h) _ _ (Set.mem_univ a)\n#align not_lt_argmin not_lt_argmin\n\n",
 "min_mem":
 "theorem min_mem {r : α → α → Prop} (H : well_founded r) (s : Set α) (h : s.nonempty) : H.min s h ∈ s :=\n  let ⟨h, _⟩ := Classical.choose_spec (H.has_min s h)\n  h\n#align min_mem min_mem\n\n",
 "min_le":
 "theorem min_le {x : β} {s : Set β} (hx : x ∈ s) (hne : s.nonempty := ⟨x, hx⟩) : h.min s hne ≤ x :=\n  not_lt.1 <| h.not_lt_min _ _ hx\n#align min_le min_le\n\n",
 "lt_sup":
 "protected theorem lt_sup {r : α → α → Prop} (wf : well_founded r) {s : Set α} (h : Bounded r s) {x} (hx : x ∈ s) :\n    r x (wf.sup s h) :=\n  min_mem wf { x | ∀ a ∈ s, r a x } h x hx\n#align lt_sup lt_sup\n\n",
 "lt_succ_iff":
 "protected theorem lt_succ_iff {r : α → α → Prop} [wo : IsWellOrder α r] {x : α} (h : ∃ y, r x y) (y : α) :\n    r y (wo.wf.succ x) ↔ r y x ∨ y = x := by\n  constructor\n  · intro h'\n    have : ¬r x y := by\n      intro hy\n      rw [WellFounded.succ, dif_pos] at h'\n      exact wo.wf.not_lt_min _ h hy h'\n    rcases trichotomous_of r x y with (hy | hy | hy)\n    exfalso\n    exact this hy\n    right\n    exact hy.symm\n    left\n    exact hy\n  rintro (hy | rfl); exact trans hy (wo.wf.lt_succ h); exact wo.wf.lt_succ h\n#align lt_succ_iff lt_succ_iff\n\n",
 "lt_succ":
 "protected theorem lt_succ {r : α → α → Prop} (wf : well_founded r) {x : α} (h : ∃ y, r x y) : r x (wf.succ x) :=\n  by\n  rw [WellFounded.succ, dif_pos h]\n  apply min_mem\n#align lt_succ lt_succ\n\n",
 "is_irrefl":
 "protected theorem is_irrefl {α : Sort _} {r : α → α → Prop} (h : well_founded r) : is_irrefl α r :=\n  @IsAsymm.isIrrefl α r h.is_asymm\n#align is_irrefl is_irrefl\n\n",
 "is_asymm":
 "/-\nCopyright (c) 2020 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Mario Carneiro\n-/\nprotected theorem is_asymm {α : Sort _} {r : α → α → Prop} (h : well_founded r) : is_asymm α r :=\n  ⟨h.asymmetric⟩\n#align is_asymm is_asymm\n\n",
 "induction_bot'":
 "#print WellFounded.induction_bot' /-\n/-- Let `r` be a well-founded relation on `α`, let `f : α → β` be a function,\nlet `C : β → Prop`, and  let `bot : α`.\nThis induction principle shows that `C (f bot)` holds, given that\n* some `a` satisfies `C (f a)`, and\n* for each `b` such that `f b ≠ f bot` and `C (f b)` holds, there is `c`\n  satisfying `r c b` and `C (f c)`. -/\ntheorem WellFounded.induction_bot' {α β} {r : α → α → Prop} (hwf : well_founded r) {a bot : α} {C : β → Prop}\n    {f : α → β} (ih : ∀ b, f b ≠ f bot → C (f b) → ∃ c, r c b ∧ C (f c)) : C (f a) → C (f bot) :=\n  (hwf.apply a).induction_bot' ih\n#align well_founded.induction_bot' WellFounded.induction_bot'\n-/\n\n",
 "induction_bot":
 "#print WellFounded.induction_bot /-\n/-- Let `r` be a well-founded relation on `α`, let `C : α → Prop`, and let `bot : α`.\nThis induction principle shows that `C bot` holds, given that\n* some `a` satisfies `C a`, and\n* for each `b` that satisfies `C b`, there is `c` satisfying `r c b` and `C c`.\n\nThe naming is inspired by the fact that when `r` is transitive, it follows that `bot` is\nthe smallest element w.r.t. `r` that satisfies `C`. -/\ntheorem WellFounded.induction_bot {α} {r : α → α → Prop} (hwf : well_founded r) {a bot : α} {C : α → Prop}\n    (ih : ∀ b, b ≠ bot → C b → ∃ c, r c b ∧ C c) : C a → C bot :=\n  hwf.induction_bot' ih\n#align well_founded.induction_bot WellFounded.induction_bot\n-/\n\n",
 "has_min":
 "/-- If `r` is a well-founded relation, then any nonempty set has a minimal element\nwith respect to `r`. -/\ntheorem has_min {α} {r : α → α → Prop} (H : well_founded r) (s : Set α) : s.nonempty → ∃ a ∈ s, ∀ x ∈ s, ¬r x a\n  | ⟨a, ha⟩ =>\n    (acc.rec_on (H.apply a) fun x _ IH =>\n        not_imp_not.1 fun hne hx => hne <| ⟨x, hx, fun y hy hyx => hne <| IH y hyx hy⟩)\n      ha\n#align has_min has_min\n\n",
 "eq_strict_mono_iff_eq_range_aux":
 "private theorem eq_strict_mono_iff_eq_range_aux {f g : β → γ} (hf : StrictMono f) (hg : StrictMono g)\n    (hfg : Set.range f = Set.range g) {b : β} (H : ∀ a < b, f a = g a) : f b ≤ g b :=\n  by\n  obtain ⟨c, hc⟩ : g b ∈ Set.range f := by\n    rw [hfg]\n    exact Set.mem_range_self b\n  cases' lt_or_le c b with hcb hbc\n  · rw [H c hcb] at hc\n    rw [hg.injective hc] at hcb\n    exact hcb.false.elim\n  · rw [← hc]\n    exact hf.monotone hbc\n#align eq_strict_mono_iff_eq_range_aux eq_strict_mono_iff_eq_range_aux\n\n",
 "eq_strict_mono_iff_eq_range":
 "theorem eq_strict_mono_iff_eq_range {f g : β → γ} (hf : StrictMono f) (hg : StrictMono g) :\n    Set.range f = Set.range g ↔ f = g :=\n  ⟨fun hfg => by\n    funext a\n    apply h.induction a\n    exact fun b H =>\n      le_antisymm (eq_strict_mono_iff_eq_range_aux hf hg hfg H)\n        (eq_strict_mono_iff_eq_range_aux hg hf hfg.symm fun a hab => (H a hab).symm),\n    congr_arg _⟩\n#align eq_strict_mono_iff_eq_range eq_strict_mono_iff_eq_range\n\n",
 "argmin_on_mem":
 "@[simp]\ntheorem argmin_on_mem (s : Set α) (hs : s.nonempty) : argminOn f h s hs ∈ s :=\n  WellFounded.min_mem _ _ _\n#align argmin_on_mem argmin_on_mem\n\n",
 "argmin_on_le":
 "@[simp]\ntheorem argmin_on_le (s : Set α) {a : α} (ha : a ∈ s) (hs : s.nonempty := Set.nonempty_of_mem ha) :\n    f (argminOn f h s hs) ≤ f a :=\n  not_lt.mp <| not_lt_argminOn f h s ha hs\n#align argmin_on_le argmin_on_le\n\n",
 "argmin_le":
 "@[simp]\ntheorem argmin_le (a : α) [Nonempty α] : f (argmin f h) ≤ f a :=\n  not_lt.mp <| not_lt_argmin f h a\n#align argmin_le argmin_le\n\n"}