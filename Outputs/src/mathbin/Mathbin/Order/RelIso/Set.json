{"subrel_val":
 "#print subrel_val /-\n@[simp]\ntheorem subrel_val (r : α → α → Prop) (p : set α) {a b} : Subrel r p a b ↔ r a.1 b.1 :=\n  iff.rfl\n#align subrel_val subrel_val\n-/\n\n",
 "rel_embedding_apply":
 "@[simp]\ntheorem rel_embedding_apply (r : α → α → Prop) (p a) : Subrel.relEmbedding r p a = a.1 :=\n  rfl\n#align rel_embedding_apply rel_embedding_apply\n\n",
 "range_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem range_eq (e : «expr ≃r » r s) : Set.range e = Set.univ :=\n  e.surjective.range_eq\n#align range_eq range_eq\n\n",
 "map_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem map_sup [SemilatticeSup α] [linear_order β] [RelHomClass F ((· > ·) : β → β → Prop) ((· > ·) : α → α → Prop)]\n    (a : F) (m n : β) : a («expr ⊔ » m n) = «expr ⊔ » (a m) (a n) :=\n  @map_inf («expr ᵒᵈ» α) («expr ᵒᵈ» β) _ _ _ _ _ _ _\n#align map_sup map_sup\n\n",
 "map_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/-\nCopyright (c) 2017 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem map_inf [SemilatticeInf α] [linear_order β] [RelHomClass F ((· < ·) : β → β → Prop) ((· < ·) : α → α → Prop)]\n    (a : F) (m n : β) : a («expr ⊓ » m n) = «expr ⊓ » (a m) (a n) :=\n  (strict_mono.monotone fun x y => map_rel a).map_inf m n\n#align map_inf map_inf\n\n",
 "codRestrict_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n#print RelEmbedding.codRestrict_apply /-\n@[simp]\ntheorem RelEmbedding.codRestrict_apply (p) (f : «expr ↪r » r s) (H a) : RelEmbedding.codRestrict p f H a = ⟨f a, H a⟩ :=\n  rfl\n#align rel_embedding.cod_restrict_apply RelEmbedding.codRestrict_apply\n-/\n\n"}