{"well_founded_lift₂_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n#print wellFounded_lift₂_iff /-\n/-- A relation is well founded iff its lift to a quotient is. -/\n@[simp]\ntheorem wellFounded_lift₂_iff [s : setoid α] {r : α → α → Prop} {H} :\n    well_founded (quotient.lift₂ r H) ↔ well_founded r :=\n  ⟨fun hr => by\n    suffices ∀ {x : quotient s} {a : α}, «expr⟦ ⟧» a = x → acc r a by exact ⟨fun a => this rfl⟩\n    · refine' fun x => hr.induction x _\n      rintro x IH a rfl\n      exact ⟨_, fun b hb => IH («expr⟦ ⟧» b) hb rfl⟩, (Quotient.outRelEmbedding H).well_founded⟩\n#align well_founded_lift₂_iff wellFounded_lift₂_iff\n-/\n\n",
 "well_founded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem well_founded : ∀ (f : «expr ↪r » r s) (h : well_founded s), well_founded r\n  | f, ⟨H⟩ => ⟨fun a => f.acc _ (H _)⟩\n#align well_founded well_founded\n\n",
 "wellFounded_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →r » -/\n#print Surjective.wellFounded_iff /-\n-- TODO: define a `rel_iff_class` so we don't have to do all the `convert` trickery?\ntheorem Surjective.wellFounded_iff {f : α → β} (hf : surjective f) (o : ∀ {a b}, r a b ↔ s (f a) (f b)) :\n    well_founded r ↔ well_founded s :=\n  iff.intro\n    (by\n      refine' RelHomClass.wellFounded (rel_hom.mk _ _ : «expr →r » s r)\n      · exact Classical.choose hf.has_right_inverse\n      intro a b h; apply o.2; convert h\n      iterate 2 apply Classical.choose_spec hf.has_right_inverse)\n    (RelHomClass.wellFounded (⟨f, fun _ _ => o.1⟩ : «expr →r » r s))\n#align surjective.well_founded_iff Surjective.wellFounded_iff\n-/\n\n",
 "trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\ntheorem trans_apply (f : «expr ↪r » r s) (g : «expr ↪r » s t) (a : α) : (f.trans g) a = g (f a) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "to_rel_hom_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n-- see Note [function coercion]\n-- TODO: define and instantiate a `rel_embedding_class` when `embedding_like` is defined\n@[simp]\ntheorem to_rel_hom_eq_coe (f : «expr ↪r » r s) : f.to_rel_hom = f :=\n  rfl\n#align to_rel_hom_eq_coe to_rel_hom_eq_coe\n\n",
 "to_rel_embedding_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n-- see Note [function coercion]\n-- TODO: define and instantiate a `rel_iso_class` when `equiv_like` is defined\n@[simp]\ntheorem to_rel_embedding_eq_coe (f : «expr ≃r » r s) : f.to_rel_embedding = f :=\n  rfl\n#align to_rel_embedding_eq_coe to_rel_embedding_eq_coe\n\n",
 "to_equiv_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem to_equiv_injective : injective (to_equiv : «expr ≃r » r s → «expr ≃ » α β)\n  | ⟨e₁, o₁⟩, ⟨e₂, o₂⟩, h => by\n    congr\n    exact h\n#align to_equiv_injective to_equiv_injective\n\n",
 "symm_apply_rel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\ntheorem symm_apply_rel (e : «expr ≃r » r s) {x y} : r (e.symm x) y ↔ s x (e y) := by\n  rw [← e.map_rel_iff, e.apply_symm_apply]\n#align symm_apply_rel symm_apply_rel\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem symm_apply_apply (e : «expr ≃r » r s) (x : α) : e.symm (e x) = x :=\n  e.to_equiv.symm_apply_apply x\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\nprotected theorem surjective (e : «expr ≃r » r s) : surjective e :=\n  e.to_equiv.surjective\n#align surjective surjective\n\n",
 "rel_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\ntheorem rel_symm_apply (e : «expr ≃r » r s) {x y} : r x (e.symm y) ↔ s (e x) y := by\n  rw [← e.map_rel_iff, e.apply_symm_apply]\n#align rel_symm_apply rel_symm_apply\n\n",
 "preimage_equivalence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹'o » -/\n#print preimage_equivalence /-\ntheorem preimage_equivalence {α β} (f : α → β) {s : β → β → Prop} (hs : equivalence s) :\n    equivalence («expr ⁻¹'o » f s) :=\n  ⟨fun a => hs.1 _, fun a b h => hs.2.1 h, fun a b c h₁ h₂ => hs.2.2 h₁ h₂⟩\n#align preimage_equivalence preimage_equivalence\n-/\n\n",
 "of_monotone_coe":
 "@[simp]\ntheorem of_monotone_coe [is_trichotomous α r] [is_asymm β s] (f : α → β) (H) :\n    (@ofMonotone _ _ r s _ _ f H : α → β) = f :=\n  rfl\n#align of_monotone_coe of_monotone_coe\n\n",
 "of_map_rel_iff_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n@[simp]\ntheorem of_map_rel_iff_coe (f : α → β) [is_antisymm α r] [is_refl β s] (hf : ∀ a b, s (f a) (f b) ↔ r a b) :\n    «expr⇑ » (ofMapRelIff f hf : «expr ↪r » r s) = f :=\n  rfl\n#align of_map_rel_iff_coe of_map_rel_iff_coe\n\n",
 "map_rel_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\ntheorem map_rel_iff (f : «expr ≃r » r s) {a b} : s (f a) (f b) ↔ r a b :=\n  f.map_rel_iff'\n#align map_rel_iff map_rel_iff\n\n",
 "map_rel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →r » -/\nprotected theorem map_rel (f : «expr →r » r s) {a b} : r a b → s (f a) (f b) :=\n  f.map_rel'\n#align map_rel map_rel\n\n",
 "is_well_order":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_well_order : ∀ (f : «expr ↪r » r s) [is_well_order β s], is_well_order α r\n  | f, H => { f.is_strict_total_order with wf := f.well_founded H.wf }\n#align is_well_order is_well_order\n\n",
 "is_trichotomous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_trichotomous : ∀ (f : «expr ↪r » r s) [is_trichotomous β s], is_trichotomous α r\n  | ⟨f, o⟩, ⟨H⟩ => ⟨fun a b => (or_congr o (or_congr f.inj'.eq_iff o)).1 (H _ _)⟩\n#align is_trichotomous is_trichotomous\n\n",
 "is_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_trans : ∀ (f : «expr ↪r » r s) [is_trans β s], is_trans α r\n  | ⟨f, o⟩, ⟨H⟩ => ⟨fun a b c h₁ h₂ => o.1 (H _ _ _ (o.2 h₁) (o.2 h₂))⟩\n#align is_trans is_trans\n\n",
 "is_total":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_total : ∀ (f : «expr ↪r » r s) [is_total β s], is_total α r\n  | ⟨f, o⟩, ⟨H⟩ => ⟨fun a b => (or_congr o o).1 (H _ _)⟩\n#align is_total is_total\n\n",
 "is_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_symm (f : «expr ↪r » r s) [is_symm β s] : is_symm α r :=\n  ⟨fun a b => imp_imp_imp f.map_rel_iff.2 f.map_rel_iff.1 symm⟩\n#align is_symm is_symm\n\n",
 "is_strict_total_order":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_strict_total_order : ∀ (f : «expr ↪r » r s) [is_strict_total_order β s], is_strict_total_order α r\n  | f, H => { f.is_trichotomous, f.is_strict_order with }\n#align is_strict_total_order is_strict_total_order\n\n",
 "is_strict_order":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_strict_order : ∀ (f : «expr ↪r » r s) [is_strict_order β s], is_strict_order α r\n  | f, H => { f.is_irrefl, f.is_trans with }\n#align is_strict_order is_strict_order\n\n",
 "is_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_refl (f : «expr ↪r » r s) [is_refl β s] : is_refl α r :=\n  ⟨fun a => f.map_rel_iff.1 <| refl _⟩\n#align is_refl is_refl\n\n",
 "is_preorder":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_preorder : ∀ (f : «expr ↪r » r s) [is_preorder β s], is_preorder α r\n  | f, H => { f.is_refl, f.is_trans with }\n#align is_preorder is_preorder\n\n",
 "is_partial_order":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_partial_order : ∀ (f : «expr ↪r » r s) [is_partial_order β s], is_partial_order α r\n  | f, H => { f.is_preorder, f.is_antisymm with }\n#align is_partial_order is_partial_order\n\n",
 "is_linear_order":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_linear_order : ∀ (f : «expr ↪r » r s) [is_linear_order β s], is_linear_order α r\n  | f, H => { f.is_partial_order, f.is_total with }\n#align is_linear_order is_linear_order\n\n",
 "is_irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_irrefl (f : «expr ↪r » r s) [is_irrefl β s] : is_irrefl α r :=\n  ⟨fun a => mt f.map_rel_iff.2 (irrefl (f a))⟩\n#align is_irrefl is_irrefl\n\n",
 "is_asymm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_asymm (f : «expr ↪r » r s) [is_asymm β s] : is_asymm α r :=\n  ⟨fun a b h₁ h₂ => asymm (f.map_rel_iff.2 h₁) (f.map_rel_iff.2 h₂)⟩\n#align is_asymm is_asymm\n\n",
 "is_antisymm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem is_antisymm : ∀ (f : «expr ↪r » r s) [is_antisymm β s], is_antisymm α r\n  | ⟨f, o⟩, ⟨H⟩ => ⟨fun a b h₁ h₂ => f.inj' (H _ _ (o.2 h₁) (o.2 h₂))⟩\n#align is_antisymm is_antisymm\n\n",
 "injective_of_increasing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →r » -/\n#print RelHom.injective_of_increasing /-\n/-- An increasing function is injective -/\ntheorem RelHom.injective_of_increasing [is_trichotomous α r] [is_irrefl β s] (f : «expr →r » r s) : injective f :=\n  injective_of_increasing r s f fun x y => f.map_rel\n#align rel_hom.injective_of_increasing RelHom.injective_of_increasing\n-/\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\nprotected theorem injective (e : «expr ≃r » r s) : injective e :=\n  e.to_equiv.injective\n#align injective injective\n\n",
 "inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n@[simp]\ntheorem inj (f : «expr ↪r » r s) {a b} : f a = f b ↔ a = b :=\n  f.injective.eq_iff\n#align inj inj\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\ntheorem ext_iff {f g : «expr ≃r » r s} : f = g ↔ ∀ x, f x = g x :=\n  fun_like.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[ext]\ntheorem ext ⦃f g : «expr ≃r » r s⦄ (h : ∀ x, f x = g x) : f = g :=\n  fun_like.ext f g h\n#align ext ext\n\n",
 "eq_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹'o » -/\ntheorem eq_preimage (f : «expr ↪r » r s) : r = «expr ⁻¹'o » f s :=\n  by\n  ext (a b)\n  exact f.map_rel_iff.symm\n#align eq_preimage eq_preimage\n\n",
 "eq_iff_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem eq_iff_eq (f : «expr ≃r » r s) {a b} : f a = f b ↔ a = b :=\n  f.injective.eq_iff\n#align eq_iff_eq eq_iff_eq\n\n",
 "default_def":
 "@[simp]\ntheorem default_def (r : α → α → Prop) : default = RelIso.refl r :=\n  rfl\n#align default_def default_def\n\n",
 "coe_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_trans (f : «expr ↪r » r s) (g : «expr ↪r » s t) : «expr⇑ » (f.trans g) = g ∘ f :=\n  rfl\n#align coe_trans coe_trans\n\n",
 "coe_fn_to_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →r » -/\n@[simp]\ntheorem coe_fn_to_fun (f : «expr →r » r s) : (f.to_fun : α → β) = f :=\n  rfl\n#align coe_fn_to_fun coe_fn_to_fun\n\n",
 "coe_fn_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem coe_fn_to_equiv (f : «expr ≃r » r s) : (f.to_equiv : α → β) = f :=\n  rfl\n#align coe_fn_to_equiv coe_fn_to_equiv\n\n",
 "coe_fn_to_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n@[simp]\ntheorem coe_fn_to_embedding (f : «expr ↪r » r s) : (f.to_embedding : α → β) = f :=\n  rfl\n#align coe_fn_to_embedding coe_fn_to_embedding\n\n",
 "coe_fn_symm_mk":
 "@[simp]\ntheorem coe_fn_symm_mk (f o) : ((@rel_iso.mk _ _ r s f o).symm : β → α) = f.symm :=\n  rfl\n#align coe_fn_symm_mk coe_fn_symm_mk\n\n",
 "coe_fn_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem coe_fn_mk (f : «expr ≃ » α β) (o : ∀ ⦃a b⦄, s (f a) (f b) ↔ r a b) : (rel_iso.mk f o : α → β) = f :=\n  rfl\n#align coe_fn_mk coe_fn_mk\n\n",
 "coe_fn_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/-- The map `coe_fn : (r ≃r s) → (α → β)` is injective. Lean fails to parse\n`function.injective (λ e : r ≃r s, (e : α → β))`, so we use a trick to say the same. -/\ntheorem coe_fn_injective : @function.injective («expr ≃r » r s) (α → β) coe_fn :=\n  fun_like.coe_injective\n#align coe_fn_injective coe_fn_injective\n\n",
 "coe_coe_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n@[simp]\ntheorem coe_coe_fn (f : «expr ≃r » r s) : ((f : «expr ↪r » r s) : α → β) = f :=\n  rfl\n#align coe_coe_fn coe_coe_fn\n\n",
 "cast_trans":
 "@[simp]\nprotected theorem cast_trans {α β γ : Type u} {r : α → α → Prop} {s : β → β → Prop} {t : γ → γ → Prop} (h₁ : α = β)\n    (h₁' : β = γ) (h₂ : HEq r s) (h₂' : HEq s t) :\n    (RelIso.cast h₁ h₂).trans (RelIso.cast h₁' h₂') = RelIso.cast (h₁.trans h₁') (h₂.trans h₂') :=\n  ext fun x => by\n    subst h₁\n    rfl\n#align cast_trans cast_trans\n\n",
 "cast_symm":
 "@[simp]\nprotected theorem cast_symm {α β : Type u} {r : α → α → Prop} {s : β → β → Prop} (h₁ : α = β) (h₂ : HEq r s) :\n    (RelIso.cast h₁ h₂).symm = RelIso.cast h₁.symm h₂.symm :=\n  rfl\n#align cast_symm cast_symm\n\n",
 "cast_refl":
 "@[simp]\nprotected theorem cast_refl {α : Type u} {r : α → α → Prop} (h₁ : α = α := rfl) (h₂ : HEq r r := heq.rfl) :\n    RelIso.cast h₁ h₂ = RelIso.refl r :=\n  rfl\n#align cast_refl cast_refl\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\nprotected theorem bijective (e : «expr ≃r » r s) : bijective e :=\n  e.to_equiv.bijective\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n@[simp]\ntheorem apply_symm_apply (e : «expr ≃r » r s) (x : β) : e (e.symm x) = x :=\n  e.to_equiv.apply_symm_apply x\n#align apply_symm_apply apply_symm_apply\n\n",
 "acc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\nprotected theorem acc (f : «expr ↪r » r s) (a : α) : acc s (f a) → acc r a :=\n  by\n  generalize h : f a = b; intro ac\n  induction' ac with _ H IH generalizing a; subst h\n  exact ⟨_, fun a' h => IH (f a') (f.map_rel_iff.2 h) _ rfl⟩\n#align acc acc\n\n"}