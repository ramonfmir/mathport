{"wellFounded_antisymmetrization_iff":
 "#print wellFounded_antisymmetrization_iff /-\ntheorem wellFounded_antisymmetrization_iff :\n    well_founded (@LT.lt (Antisymmetrization α (· ≤ ·)) _) ↔ well_founded (@LT.lt α _) :=\n  ⟨fun h => ⟨fun a => acc_antisymmetrization_iff.1 <| h.apply _⟩, fun h =>\n    ⟨by\n      rintro ⟨a⟩\n      exact acc_antisymmetrization_iff.2 (h.apply a)⟩⟩\n#align well_founded_antisymmetrization_iff wellFounded_antisymmetrization_iff\n-/\n\n",
 "trans":
 "#print AntisymmRel.trans /-\n@[trans]\ntheorem AntisymmRel.trans [is_trans α r] {a b c : α} (hab : AntisymmRel r a b) (hbc : AntisymmRel r b c) :\n    AntisymmRel r a c :=\n  ⟨trans hab.1 hbc.1, trans hbc.2 hab.2⟩\n#align antisymm_rel.trans AntisymmRel.trans\n-/\n\n",
 "toAntisymmetrization_ofAntisymmetrization":
 "#print toAntisymmetrization_ofAntisymmetrization /-\n@[simp]\ntheorem toAntisymmetrization_ofAntisymmetrization (a : Antisymmetrization α r) :\n    toAntisymmetrization r (ofAntisymmetrization r a) = a :=\n  quotient.out_eq' _\n#align to_antisymmetrization_of_antisymmetrization toAntisymmetrization_ofAntisymmetrization\n-/\n\n",
 "toAntisymmetrization_mono":
 "#print toAntisymmetrization_mono /-\n@[mono]\ntheorem toAntisymmetrization_mono : monotone (@toAntisymmetrization α (· ≤ ·) _) := fun a b => id\n#align to_antisymmetrization_mono toAntisymmetrization_mono\n-/\n\n",
 "toAntisymmetrization_lt_toAntisymmetrization_iff":
 "#print toAntisymmetrization_lt_toAntisymmetrization_iff /-\n@[simp]\ntheorem toAntisymmetrization_lt_toAntisymmetrization_iff :\n    toAntisymmetrization (· ≤ ·) a < toAntisymmetrization (· ≤ ·) b ↔ a < b :=\n  iff.rfl\n#align to_antisymmetrization_lt_to_antisymmetrization_iff toAntisymmetrization_lt_toAntisymmetrization_iff\n-/\n\n",
 "toAntisymmetrization_le_toAntisymmetrization_iff":
 "#print toAntisymmetrization_le_toAntisymmetrization_iff /-\n@[simp]\ntheorem toAntisymmetrization_le_toAntisymmetrization_iff :\n    toAntisymmetrization (· ≤ ·) a ≤ toAntisymmetrization (· ≤ ·) b ↔ a ≤ b :=\n  iff.rfl\n#align to_antisymmetrization_le_to_antisymmetrization_iff toAntisymmetrization_le_toAntisymmetrization_iff\n-/\n\n",
 "symm":
 "#print AntisymmRel.symm /-\n@[symm]\ntheorem AntisymmRel.symm {a b : α} : AntisymmRel r a b → AntisymmRel r b a :=\n  And.symm\n#align antisymm_rel.symm AntisymmRel.symm\n-/\n\n",
 "ofAntisymmetrization_lt_ofAntisymmetrization_iff":
 "#print ofAntisymmetrization_lt_ofAntisymmetrization_iff /-\n@[simp]\ntheorem ofAntisymmetrization_lt_ofAntisymmetrization_iff {a b : Antisymmetrization α (· ≤ ·)} :\n    ofAntisymmetrization (· ≤ ·) a < ofAntisymmetrization (· ≤ ·) b ↔ a < b := by\n  convert to_antisymmetrization_lt_to_antisymmetrization_iff.symm <;>\n    exact (toAntisymmetrization_ofAntisymmetrization _ _).symm\n#align of_antisymmetrization_lt_of_antisymmetrization_iff ofAntisymmetrization_lt_ofAntisymmetrization_iff\n-/\n\n",
 "ofAntisymmetrization_le_ofAntisymmetrization_iff":
 "#print ofAntisymmetrization_le_ofAntisymmetrization_iff /-\n@[simp]\ntheorem ofAntisymmetrization_le_ofAntisymmetrization_iff {a b : Antisymmetrization α (· ≤ ·)} :\n    ofAntisymmetrization (· ≤ ·) a ≤ ofAntisymmetrization (· ≤ ·) b ↔ a ≤ b := by\n  convert to_antisymmetrization_le_to_antisymmetrization_iff.symm <;>\n    exact (toAntisymmetrization_ofAntisymmetrization _ _).symm\n#align of_antisymmetrization_le_of_antisymmetrization_iff ofAntisymmetrization_le_ofAntisymmetrization_iff\n-/\n\n",
 "lift_fun_antisymm_rel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⇒ » -/\nprivate theorem lift_fun_antisymm_rel (f : «expr →o » α β) :\n    («expr ⇒ » (AntisymmRel.setoid α (· ≤ ·)).r (AntisymmRel.setoid β (· ≤ ·)).r) f f := fun a b h =>\n  ⟨f.mono h.1, f.mono h.2⟩\n#align lift_fun_antisymm_rel lift_fun_antisymm_rel\n\n",
 "induction_on":
 "#print Antisymmetrization.induction_on /-\n@[elab_as_elim]\nprotected theorem Antisymmetrization.induction_on {p : Antisymmetrization α r → Prop} (a : Antisymmetrization α r)\n    (h : ∀ a, p <| toAntisymmetrization r a) : p a :=\n  Quotient.inductionOn' a h\n#align antisymmetrization.induction_on Antisymmetrization.induction_on\n-/\n\n",
 "ind":
 "#print Antisymmetrization.ind /-\n@[elab_as_elim]\nprotected theorem Antisymmetrization.ind {p : Antisymmetrization α r → Prop} :\n    (∀ a, p <| toAntisymmetrization r a) → ∀ q, p q :=\n  Quot.ind\n#align antisymmetrization.ind Antisymmetrization.ind\n-/\n\n",
 "image":
 "#print AntisymmRel.image /-\ntheorem AntisymmRel.image {a b : α} (h : AntisymmRel (· ≤ ·) a b) {f : α → β} (hf : monotone f) :\n    AntisymmRel (· ≤ ·) (f a) (f b) :=\n  ⟨hf h.1, hf h.2⟩\n#align antisymm_rel.image AntisymmRel.image\n-/\n\n",
 "dualAntisymmetrization_symm_apply":
 "#print OrderIso.dualAntisymmetrization_symm_apply /-\n@[simp]\ntheorem OrderIso.dualAntisymmetrization_symm_apply (a : α) :\n    (OrderIso.dualAntisymmetrization _).symm (toAntisymmetrization _ <| toDual a) = toDual (toAntisymmetrization _ a) :=\n  rfl\n#align order_iso.dual_antisymmetrization_symm_apply OrderIso.dualAntisymmetrization_symm_apply\n-/\n\n",
 "dualAntisymmetrization_apply":
 "#print OrderIso.dualAntisymmetrization_apply /-\n@[simp]\ntheorem OrderIso.dualAntisymmetrization_apply (a : α) :\n    OrderIso.dualAntisymmetrization _ (to_dual <| toAntisymmetrization _ a) = toAntisymmetrization _ (toDual a) :=\n  rfl\n#align order_iso.dual_antisymmetrization_apply OrderIso.dualAntisymmetrization_apply\n-/\n\n",
 "coe_antisymmetrization":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n#print OrderHom.coe_antisymmetrization /-\n@[simp]\ntheorem OrderHom.coe_antisymmetrization (f : «expr →o » α β) :\n    «expr⇑ » f.antisymmetrization = quotient.map' f (lift_fun_antisymm_rel f) :=\n  rfl\n#align order_hom.coe_antisymmetrization OrderHom.coe_antisymmetrization\n-/\n\n",
 "antisymmetrization_fibration":
 "#print antisymmetrization_fibration /-\ntheorem antisymmetrization_fibration : relation.fibration (· < ·) (· < ·) (@toAntisymmetrization α (· ≤ ·) _) :=\n  by\n  rintro a ⟨b⟩ h\n  exact ⟨b, h, rfl⟩\n#align antisymmetrization_fibration antisymmetrization_fibration\n-/\n\n",
 "antisymmetrization_apply_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n#print OrderHom.antisymmetrization_apply_mk /-\n@[simp]\ntheorem OrderHom.antisymmetrization_apply_mk (f : «expr →o » α β) (a : α) :\n    f.antisymmetrization (toAntisymmetrization _ a) = toAntisymmetrization _ (f a) :=\n  quotient.map'_mk' f (lift_fun_antisymm_rel f) _\n#align order_hom.antisymmetrization_apply_mk OrderHom.antisymmetrization_apply_mk\n-/\n\n",
 "antisymmetrization_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n#print OrderHom.antisymmetrization_apply /-\n@[simp]\ntheorem OrderHom.antisymmetrization_apply (f : «expr →o » α β) (a : Antisymmetrization α (· ≤ ·)) :\n    f.antisymmetrization a = quotient.map' f (lift_fun_antisymm_rel f) a :=\n  rfl\n#align order_hom.antisymmetrization_apply OrderHom.antisymmetrization_apply\n-/\n\n",
 "antisymmRel_swap":
 "#print antisymmRel_swap /-\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem antisymmRel_swap : AntisymmRel (swap r) = AntisymmRel r :=\n  funext fun _ => funext fun _ => propext and_comm\n#align antisymm_rel_swap antisymmRel_swap\n-/\n\n",
 "antisymmRel_refl":
 "#print antisymmRel_refl /-\n@[refl]\ntheorem antisymmRel_refl [is_refl α r] (a : α) : AntisymmRel r a a :=\n  ⟨refl _, refl _⟩\n#align antisymm_rel_refl antisymmRel_refl\n-/\n\n",
 "antisymmRel_iff_eq":
 "#print antisymmRel_iff_eq /-\n@[simp]\ntheorem antisymmRel_iff_eq [is_refl α r] [is_antisymm α r] {a b : α} : AntisymmRel r a b ↔ a = b :=\n  antisymm_iff\n#align antisymm_rel_iff_eq antisymmRel_iff_eq\n-/\n\n",
 "acc_antisymmetrization_iff":
 "#print acc_antisymmetrization_iff /-\ntheorem acc_antisymmetrization_iff : acc (· < ·) (toAntisymmetrization (· ≤ ·) a) ↔ acc (· < ·) a :=\n  ⟨fun h =>\n    haveI := InvImage.accessible _ h\n    this,\n    acc.of_fibration _ antisymmetrization_fibration⟩\n#align acc_antisymmetrization_iff acc_antisymmetrization_iff\n-/\n\n"}