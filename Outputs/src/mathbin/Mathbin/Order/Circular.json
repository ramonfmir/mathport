{"trans_left":
 "#print SBtw.sbtw.trans_left /-\n-- TODO: `alias` creates a def instead of a lemma.\n-- alias btw_trans_left        ← has_btw.btw.trans_left\ntheorem SBtw.sbtw.trans_left {a b c d : α} (h : sbtw a b c) : sbtw b d c → sbtw a d c :=\n  sbtw_trans_left h\n#align has_sbtw.sbtw.trans_left SBtw.sbtw.trans_left\n-/\n\n",
 "sbtw_trans_right":
 "#print sbtw_trans_right /-\ntheorem sbtw_trans_right {a b c d : α} (hbc : sbtw a b c) (hcd : sbtw a c d) : sbtw a b d :=\n  (hbc.cyclic_left.trans_left hcd.cyclic_left).cyclic_right\n#align sbtw_trans_right sbtw_trans_right\n-/\n\n",
 "sbtw_of_btw_not_btw":
 "#print sbtw_of_btw_not_btw /-\ntheorem sbtw_of_btw_not_btw {a b c : α} (habc : btw a b c) (hcba : ¬btw c b a) : sbtw a b c :=\n  sbtw_iff_btw_not_btw.2 ⟨habc, hcba⟩\n#align sbtw_of_btw_not_btw sbtw_of_btw_not_btw\n-/\n\n",
 "sbtw_irrefl_right":
 "#print sbtw_irrefl_right /-\ntheorem sbtw_irrefl_right {a b : α} : ¬sbtw a b b := fun h => sbtw_irrefl_left_right h.cyclic_right\n#align sbtw_irrefl_right sbtw_irrefl_right\n-/\n\n",
 "sbtw_irrefl_left_right":
 "#print sbtw_irrefl_left_right /-\ntheorem sbtw_irrefl_left_right {a b : α} : ¬sbtw a b a := fun h => h.not_btw h.btw\n#align sbtw_irrefl_left_right sbtw_irrefl_left_right\n-/\n\n",
 "sbtw_irrefl_left":
 "#print sbtw_irrefl_left /-\ntheorem sbtw_irrefl_left {a b : α} : ¬sbtw a a b := fun h => sbtw_irrefl_left_right h.cyclic_left\n#align sbtw_irrefl_left sbtw_irrefl_left\n-/\n\n",
 "sbtw_irrefl":
 "#print sbtw_irrefl /-\ntheorem sbtw_irrefl (a : α) : ¬sbtw a a a :=\n  sbtw_irrefl_left_right\n#align sbtw_irrefl sbtw_irrefl\n-/\n\n",
 "sbtw_iff_not_btw":
 "#print sbtw_iff_not_btw /-\ntheorem sbtw_iff_not_btw {a b c : α} : sbtw a b c ↔ ¬btw c b a :=\n  by\n  rw [sbtw_iff_btw_not_btw]\n  exact and_iff_right_of_imp (btw_total _ _ _).resolve_left\n#align sbtw_iff_not_btw sbtw_iff_not_btw\n-/\n\n",
 "sbtw_iff_btw_not_btw":
 "#print sbtw_iff_btw_not_btw /-\ntheorem sbtw_iff_btw_not_btw {a b c : α} : sbtw a b c ↔ btw a b c ∧ ¬btw c b a :=\n  circular_preorder.sbtw_iff_btw_not_btw\n#align sbtw_iff_btw_not_btw sbtw_iff_btw_not_btw\n-/\n\n",
 "sbtw_cyclic_right":
 "#print sbtw_cyclic_right /-\ntheorem sbtw_cyclic_right {a b c : α} (h : sbtw a b c) : sbtw c a b :=\n  h.cyclic_left.cyclic_left\n#align sbtw_cyclic_right sbtw_cyclic_right\n-/\n\n",
 "sbtw_cyclic_left":
 "#print sbtw_cyclic_left /-\ntheorem sbtw_cyclic_left {a b c : α} (h : sbtw a b c) : sbtw b c a :=\n  h.btw.cyclic_left.sbtw_of_not_btw fun h' => h.not_btw h'.cyclic_left\n#align sbtw_cyclic_left sbtw_cyclic_left\n-/\n\n",
 "sbtw_cyclic":
 "#print sbtw_cyclic /-\n/-- The order of the `↔` has been chosen so that `rw sbtw_cyclic` cycles to the right while\n`rw ←sbtw_cyclic` cycles to the left (thus following the prepended arrow). -/\ntheorem sbtw_cyclic {a b c : α} : sbtw a b c ↔ sbtw c a b :=\n  ⟨sbtw_cyclic_right, sbtw_cyclic_left⟩\n#align sbtw_cyclic sbtw_cyclic\n-/\n\n",
 "sbtw_asymm":
 "#print sbtw_asymm /-\ntheorem sbtw_asymm {a b c : α} (h : sbtw a b c) : ¬sbtw c b a :=\n  h.btw.not_sbtw\n#align sbtw_asymm sbtw_asymm\n-/\n\n",
 "right_mem_cIcc":
 "theorem right_mem_cIcc (a b : α) : b ∈ cIcc a b :=\n  btw_rfl_right\n#align right_mem_cIcc right_mem_cIcc\n\n",
 "not_sbtw_of_btw":
 "#print not_sbtw_of_btw /-\ntheorem not_sbtw_of_btw {a b c : α} (h : btw a b c) : ¬sbtw c b a := fun h' => h'.not_btw h\n#align not_sbtw_of_btw not_sbtw_of_btw\n-/\n\n",
 "not_btw_of_sbtw":
 "#print not_btw_of_sbtw /-\ntheorem not_btw_of_sbtw {a b c : α} (h : sbtw a b c) : ¬btw c b a :=\n  (sbtw_iff_btw_not_btw.1 h).2\n#align not_btw_of_sbtw not_btw_of_sbtw\n-/\n\n",
 "mem_cIoo":
 "@[simp]\ntheorem mem_cIoo {a b x : α} : x ∈ cIoo a b ↔ sbtw a x b :=\n  iff.rfl\n#align mem_cIoo mem_cIoo\n\n",
 "mem_cIcc":
 "@[simp]\ntheorem mem_cIcc {a b x : α} : x ∈ cIcc a b ↔ btw a x b :=\n  iff.rfl\n#align mem_cIcc mem_cIcc\n\n",
 "left_mem_cIcc":
 "theorem left_mem_cIcc (a b : α) : a ∈ cIcc a b :=\n  btw_rfl_left\n#align left_mem_cIcc left_mem_cIcc\n\n",
 "cyclic_left":
 "#print Btw.btw.cyclic_left /-\n-- TODO: `alias` creates a def instead of a lemma.\n-- alias btw_cyclic_left        ← has_btw.btw.cyclic_left\ntheorem Btw.btw.cyclic_left {a b c : α} (h : btw a b c) : btw b c a :=\n  btw_cyclic_left h\n#align has_btw.btw.cyclic_left Btw.btw.cyclic_left\n-/\n\n",
 "compl_cIoo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_cIoo {a b : α} : «expr ᶜ» (cIoo a b) = cIcc b a :=\n  by\n  ext\n  rw [Set.mem_cIcc, btw_iff_not_sbtw]\n  rfl\n#align compl_cIoo compl_cIoo\n\n",
 "compl_cIcc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_cIcc {a b : α} : «expr ᶜ» (cIcc a b) = cIoo b a :=\n  by\n  ext\n  rw [Set.mem_cIoo, sbtw_iff_not_btw]\n  rfl\n#align compl_cIcc compl_cIcc\n\n",
 "btw_rfl_right":
 "#print btw_rfl_right /-\ntheorem btw_rfl_right {a b : α} : btw a b b :=\n  btw_refl_right _ _\n#align btw_rfl_right btw_rfl_right\n-/\n\n",
 "btw_rfl_left_right":
 "#print btw_rfl_left_right /-\ntheorem btw_rfl_left_right {a b : α} : btw a b a :=\n  btw_refl_left_right _ _\n#align btw_rfl_left_right btw_rfl_left_right\n-/\n\n",
 "btw_rfl_left":
 "#print btw_rfl_left /-\ntheorem btw_rfl_left {a b : α} : btw a a b :=\n  btw_refl_left _ _\n#align btw_rfl_left btw_rfl_left\n-/\n\n",
 "btw_rfl":
 "#print btw_rfl /-\n/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\ntheorem btw_rfl {a : α} : btw a a a :=\n  btw_refl _\n#align btw_rfl btw_rfl\n-/\n\n",
 "btw_refl_right":
 "#print btw_refl_right /-\ntheorem btw_refl_right (a b : α) : btw a b b :=\n  btw_rfl_left_right.cyclic_left\n#align btw_refl_right btw_refl_right\n-/\n\n",
 "btw_refl_left_right":
 "#print btw_refl_left_right /-\ntheorem btw_refl_left_right (a b : α) : btw a b a :=\n  (or_self_iff _).1 (btw_total a b a)\n#align btw_refl_left_right btw_refl_left_right\n-/\n\n",
 "btw_refl_left":
 "#print btw_refl_left /-\ntheorem btw_refl_left (a b : α) : btw a a b :=\n  btw_rfl_left_right.cyclic_right\n#align btw_refl_left btw_refl_left\n-/\n\n",
 "btw_of_sbtw":
 "#print btw_of_sbtw /-\ntheorem btw_of_sbtw {a b c : α} (h : sbtw a b c) : btw a b c :=\n  (sbtw_iff_btw_not_btw.1 h).1\n#align btw_of_sbtw btw_of_sbtw\n-/\n\n",
 "btw_iff_not_sbtw":
 "#print btw_iff_not_sbtw /-\ntheorem btw_iff_not_sbtw {a b c : α} : btw a b c ↔ ¬sbtw c b a :=\n  iff_not_comm.1 sbtw_iff_not_btw\n#align btw_iff_not_sbtw btw_iff_not_sbtw\n-/\n\n",
 "btw_cyclic_right":
 "#print btw_cyclic_right /-\ntheorem btw_cyclic_right {a b c : α} (h : btw a b c) : btw c a b :=\n  h.cyclic_left.cyclic_left\n#align btw_cyclic_right btw_cyclic_right\n-/\n\n",
 "btw_cyclic":
 "#print btw_cyclic /-\n/-- The order of the `↔` has been chosen so that `rw btw_cyclic` cycles to the right while\n`rw ←btw_cyclic` cycles to the left (thus following the prepended arrow). -/\ntheorem btw_cyclic {a b c : α} : btw a b c ↔ btw c a b :=\n  ⟨btw_cyclic_right, btw_cyclic_left⟩\n#align btw_cyclic btw_cyclic\n-/\n\n",
 "antisymm":
 "#print Btw.btw.antisymm /-\n-- TODO: `alias` creates a def instead of a lemma.\n-- alias btw_antisymm        ← has_btw.btw.antisymm\ntheorem Btw.btw.antisymm {a b c : α} (h : btw a b c) : btw c b a → a = b ∨ b = c ∨ c = a :=\n  btw_antisymm h\n#align has_btw.btw.antisymm Btw.btw.antisymm\n-/\n\n"}