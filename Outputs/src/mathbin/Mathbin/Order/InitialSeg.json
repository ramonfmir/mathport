{"unique_of_trichotomous_of_irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\ntheorem unique_of_trichotomous_of_irrefl [is_trichotomous β s] [is_irrefl β s] :\n    well_founded r → subsingleton (initial_seg r s)\n  | ⟨h⟩ =>\n    ⟨fun f g =>\n      by\n      suffices (f : α → β) = g by\n        cases f\n        cases g\n        congr\n        exact RelEmbedding.coe_fn_injective this\n      funext a\n      have := h a\n      induction' this with a H IH\n      refine' extensional_of_trichotomous_of_irrefl s fun x => ⟨fun h => _, fun h => _⟩\n      · rcases f.init_iff.1 h with ⟨y, rfl, h'⟩\n        rw [IH _ h']\n        exact (g : «expr ↪r » r s).map_rel_iff.2 h'\n      · rcases g.init_iff.1 h with ⟨y, rfl, h'⟩\n        rw [← IH _ h']\n        exact (f : «expr ↪r » r s).map_rel_iff.2 h'⟩\n#align unique_of_trichotomous_of_irrefl unique_of_trichotomous_of_irrefl\n\n",
 "trans_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem trans_top [is_trans γ t] (f : principal_seg r s) (g : principal_seg s t) : (f.trans g).top = g f.top :=\n  rfl\n#align trans_top trans_top\n\n",
 "trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem trans_apply [is_trans γ t] (f : principal_seg r s) (g : principal_seg s t) (a : α) : (f.trans g) a = g (f a) :=\n  lt_le_apply _ _ _\n#align trans_apply trans_apply\n\n",
 "top_lt_top":
 "theorem top_lt_top {r : α → α → Prop} {s : β → β → Prop} {t : γ → γ → Prop} [is_well_order γ t] (f : PrincipalSeg r s)\n    (g : PrincipalSeg s t) (h : PrincipalSeg r t) : t h.top g.top :=\n  by\n  rw [subsingleton.elim h (f.trans g)]\n  apply PrincipalSeg.lt_top\n#align top_lt_top top_lt_top\n\n",
 "top_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\ntheorem top_eq [is_well_order γ t] (e : «expr ≃r » r s) (f : principal_seg r t) (g : principal_seg s t) :\n    f.top = g.top := by rw [subsingleton.elim f (PrincipalSeg.equivLT e g)] <;> rfl\n#align top_eq top_eq\n\n",
 "refl_apply":
 "@[simp]\ntheorem refl_apply (x : α) : InitialSeg.refl r x = x :=\n  rfl\n#align refl_apply refl_apply\n\n",
 "of_is_empty_top":
 "@[simp]\ntheorem of_is_empty_top (r : α → α → Prop) [is_empty α] {b : β} (H : ∀ b', ¬s b' b) : (ofIsEmpty r H).top = b :=\n  rfl\n#align of_is_empty_top of_is_empty_top\n\n",
 "of_element_top":
 "@[simp]\ntheorem of_element_top {α : Type _} (r : α → α → Prop) (a : α) : (ofElement r a).top = a :=\n  rfl\n#align of_element_top of_element_top\n\n",
 "of_element_apply":
 "@[simp]\ntheorem of_element_apply {α : Type _} (r : α → α → Prop) (a : α) (b) : ofElement r a b = b.1 :=\n  rfl\n#align of_element_apply of_element_apply\n\n",
 "not_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\ntheorem collapse_F.not_lt [is_well_order β s] (f : «expr ↪r » r s) (a : α) {b}\n    (h : ∀ (a') (h : r a' a), s (collapseF f a').1 b) : ¬s b (collapseF f a).1 :=\n  by\n  unfold collapse_F; rw [well_founded.fix_eq]\n  exact WellFounded.not_lt_min _ _ _ (show b ∈ { b | ∀ (a') (h : r a' a), s (collapse_F f a').1 b } from h)\n#align collapse_F.not_lt collapse_F.not_lt\n\n",
 "lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\ntheorem lt_top (f : principal_seg r s) (a : α) : s (f a) f.top :=\n  f.down.2 ⟨_, rfl⟩\n#align lt_top lt_top\n\n",
 "lt_le_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n@[simp]\ntheorem lt_le_top (f : principal_seg r s) (g : initial_seg s t) : (f.lt_le g).top = g f.top :=\n  rfl\n#align lt_le_top lt_le_top\n\n",
 "lt_le_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n@[simp]\ntheorem lt_le_apply (f : principal_seg r s) (g : initial_seg s t) (a : α) : (f.lt_le g) a = g (f a) :=\n  RelEmbedding.trans_apply _ _ _\n#align lt_le_apply lt_le_apply\n\n",
 "ltOrEq_apply_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n#print InitialSeg.ltOrEq_apply_right /-\ntheorem InitialSeg.ltOrEq_apply_right [is_well_order β s] (f : initial_seg r s) (g : «expr ≃r » r s) (a : α) :\n    g a = f a :=\n  InitialSeg.eq (InitialSeg.ofIso g) f a\n#align initial_seg.lt_or_eq_apply_right InitialSeg.ltOrEq_apply_right\n-/\n\n",
 "ltOrEq_apply_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n#print InitialSeg.ltOrEq_apply_left /-\ntheorem InitialSeg.ltOrEq_apply_left [is_well_order β s] (f : initial_seg r s) (g : principal_seg r s) (a : α) :\n    g a = f a :=\n  @InitialSeg.eq α β r s _ g f a\n#align initial_seg.lt_or_eq_apply_left InitialSeg.ltOrEq_apply_left\n-/\n\n",
 "lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\ntheorem collapse_F.lt [is_well_order β s] (f : «expr ↪r » r s) {a : α} :\n    ∀ {a'}, r a' a → s (collapseF f a').1 (collapseF f a).1 :=\n  show (collapseF f a).1 ∈ { b | ∀ (a') (h : r a' a), s (collapseF f a').1 b }\n    by\n    unfold collapse_F; rw [well_founded.fix_eq]\n    apply WellFounded.min_mem _ _\n#align collapse_F.lt collapse_F.lt\n\n",
 "le_add_apply":
 "@[simp]\ntheorem le_add_apply (r : α → α → Prop) (s : β → β → Prop) (a) : leAdd r s a = sum.inl a :=\n  rfl\n#align le_add_apply le_add_apply\n\n",
 "leLT_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n#print InitialSeg.leLT_apply /-\n@[simp]\ntheorem InitialSeg.leLT_apply [is_well_order β s] [is_trans γ t] (f : initial_seg r s) (g : principal_seg s t) (a : α) :\n    (f.le_lt g) a = g (f a) := by\n  delta InitialSeg.leLT; cases' h : f.lt_or_eq with f' f'\n  · simp only [PrincipalSeg.trans_apply, f.lt_or_eq_apply_left]\n  · simp only [PrincipalSeg.equivLT_apply, f.lt_or_eq_apply_right]\n#align initial_seg.le_lt_apply InitialSeg.leLT_apply\n-/\n\n",
 "irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n#print irrefl /-\ntheorem irrefl {r : α → α → Prop} [is_well_order α r] (f : principal_seg r r) : false :=\n  by\n  have := f.lt_top f.top\n  rw [show f f.top = f.top from InitialSeg.eq (↑f) (InitialSeg.refl r) f.top] at this\n  exact irrefl _ this\n#align irrefl irrefl\n-/\n\n",
 "init_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\ntheorem init_iff [is_trans β s] (f : principal_seg r s) {a : α} {b : β} : s b (f a) ↔ ∃ a', f a' = b ∧ r a' a :=\n  @InitialSeg.init_iff α β r s f a b\n#align init_iff init_iff\n\n",
 "init'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\ntheorem init' (f : initial_seg r s) {a : α} {b : β} : s b (f a) → ∃ a', f a' = b :=\n  f.init _ _\n#align init' init'\n\n",
 "init":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\ntheorem init [is_trans β s] (f : principal_seg r s) {a : α} {b : β} (h : s b (f a)) : ∃ a', f a' = b :=\n  f.down.1 <| trans h <| f.lt_top _\n#align init init\n\n",
 "equiv_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem equiv_lt_top (f : «expr ≃r » r s) (g : principal_seg s t) : (equivLT f g).top = g.top :=\n  rfl\n#align equiv_lt_top equiv_lt_top\n\n",
 "equiv_lt_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem equiv_lt_apply (f : «expr ≃r » r s) (g : principal_seg s t) (a : α) : (equivLT f g) a = g (f a) :=\n  RelEmbedding.trans_apply _ _ _\n#align equiv_lt_apply equiv_lt_apply\n\n",
 "eq_or_principal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\ntheorem eq_or_principal [is_well_order β s] (f : initial_seg r s) : surjective f ∨ ∃ b, ∀ x, s x b ↔ ∃ y, f y = x :=\n  or_iff_not_imp_right.2 fun h b =>\n    acc.rec_on (is_well_founded.wf.apply b : acc s b) fun x H IH =>\n      not_forall_not.1 fun hn =>\n        h\n          ⟨x, fun y =>\n            ⟨IH _, fun ⟨a, e⟩ => by\n              rw [← e] <;>\n                exact (trichotomous _ _).resolve_right (not_or_of_not (hn a) fun hl => not_exists.2 hn (f.init' hl))⟩⟩\n#align eq_or_principal eq_or_principal\n\n",
 "eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\nprotected theorem eq [is_well_order β s] (f g : initial_seg r s) (a) : f a = g a := by rw [subsingleton.elim f g]\n#align eq eq\n\n",
 "down":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\ntheorem down (f : principal_seg r s) : ∀ {b : β}, s b f.top ↔ ∃ a, f a = b :=\n  f.down'\n#align down down\n\n",
 "collapse_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\ntheorem collapse_apply [is_well_order β s] (f : «expr ↪r » r s) (a) : collapse f a = (collapseF f a).1 :=\n  rfl\n#align collapse_apply collapse_apply\n\n",
 "coe_fn_to_rel_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem coe_fn_to_rel_embedding (f : principal_seg r s) : (f.to_rel_embedding : α → β) = f :=\n  rfl\n#align coe_fn_to_rel_embedding coe_fn_to_rel_embedding\n\n",
 "coe_fn_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n@[simp]\ntheorem coe_fn_mk (f : «expr ↪r » r s) (t o) : (@principal_seg.mk _ _ r s f t o : α → β) = f :=\n  rfl\n#align coe_fn_mk coe_fn_mk\n\n",
 "coe_coe_fn'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\ntheorem coe_coe_fn' [is_trans β s] (f : principal_seg r s) : ((f : initial_seg r s) : α → β) = f :=\n  rfl\n#align coe_coe_fn' coe_coe_fn'\n\n",
 "coe_coe_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n@[simp]\ntheorem coe_coe_fn (f : principal_seg r s) : ((f : «expr ↪r » r s) : α → β) = f :=\n  rfl\n#align coe_coe_fn coe_coe_fn\n\n",
 "cod_restrict_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem cod_restrict_top (p) (f : principal_seg r s) (H H₂) : (codRestrict p f H H₂).top = ⟨f.top, H₂⟩ :=\n  rfl\n#align cod_restrict_top cod_restrict_top\n\n",
 "cod_restrict_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `principal_seg -/\n@[simp]\ntheorem cod_restrict_apply (p) (f : principal_seg r s) (H H₂ a) : codRestrict p f H H₂ a = ⟨f a, H a⟩ :=\n  rfl\n#align cod_restrict_apply cod_restrict_apply\n\n",
 "aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\ntheorem antisymm.aux [is_well_order α r] (f : initial_seg r s) (g : initial_seg s r) : left_inverse g f :=\n  InitialSeg.eq (f.trans g) (InitialSeg.refl _)\n#align antisymm.aux antisymm.aux\n\n",
 "antisymm_to_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n@[simp]\ntheorem antisymm_to_fun [is_well_order β s] (f : initial_seg r s) (g : initial_seg s r) : (antisymm f g : α → β) = f :=\n  rfl\n#align antisymm_to_fun antisymm_to_fun\n\n",
 "antisymm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `initial_seg -/\n@[simp]\ntheorem antisymm_symm [is_well_order α r] [is_well_order β s] (f : initial_seg r s) (g : initial_seg s r) :\n    (antisymm f g).symm = antisymm g f :=\n  RelIso.coe_fn_injective rfl\n#align antisymm_symm antisymm_symm\n\n"}