{"ωSup_zip":
 "theorem ωSup_zip (c₀ : Chain α) (c₁ : Chain β) : ωSup (c₀.zip c₁) = (ωSup c₀, ωSup c₁) :=\n  by\n  apply eq_of_forall_ge_iff; rintro ⟨z₁, z₂⟩\n  simp [ωSup_le_iff, forall_and]\n#align ωSup_zip ωSup_zip\n\n",
 "ωSup_total":
 "theorem ωSup_total {c : Chain α} {x : α} (h : ∀ i, c i ≤ x ∨ x ≤ c i) : ωSup c ≤ x ∨ x ≤ ωSup c :=\n  by_cases (fun this : ∀ i, c i ≤ x => or.inl (ωSup_le _ _ this)) fun this : ¬∀ i, c i ≤ x =>\n    have : ∃ i, ¬c i ≤ x := by simp only [not_forall] at this⊢ <;> assumption\n    let ⟨i, hx⟩ := this\n    have : x ≤ c i := (h i).resolve_left hx\n    or.inr <| le_ωSup_of_le _ this\n#align ωSup_total ωSup_total\n\n",
 "ωSup_le_ωSup_of_le":
 "@[mono]\ntheorem ωSup_le_ωSup_of_le {c₀ c₁ : Chain α} (h : c₀ ≤ c₁) : ωSup c₀ ≤ ωSup c₁ :=\n  ωSup_le _ _ fun i => Exists.rec_on (h i) fun j h => le_trans h (le_ωSup _ _)\n#align ωSup_le_ωSup_of_le ωSup_le_ωSup_of_le\n\n",
 "ωSup_le_iff":
 "theorem ωSup_le_iff (c : Chain α) (x : α) : ωSup c ≤ x ↔ ∀ i, c i ≤ x :=\n  by\n  constructor <;> intros\n  · trans ωSup c\n    exact le_ωSup _ _\n    assumption\n  exact ωSup_le _ _ ‹_›\n#align ωSup_le_iff ωSup_le_iff\n\n",
 "ωSup_eq_some":
 "theorem ωSup_eq_some {c : Chain (Part α)} {a : α} (h : some a ∈ c) : Part.ωSup c = some a :=\n  have : ∃ a, some a ∈ c := ⟨a, h⟩\n  have a' : some (Classical.choose this) ∈ c := Classical.choose_spec this\n  calc\n    Part.ωSup c = some (Classical.choose this) := dif_pos this\n    _ = some a := congr_arg _ (eq_of_chain a' h)\n    \n#align ωSup_eq_some ωSup_eq_some\n\n",
 "ωSup_eq_none":
 "theorem ωSup_eq_none {c : Chain (Part α)} (h : ¬∃ a, some a ∈ c) : Part.ωSup c = none :=\n  dif_neg h\n#align ωSup_eq_none ωSup_eq_none\n\n",
 "ωSup_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\ntheorem ωSup_def (c : Chain («expr →𝒄 » α β)) (x : α) : ωSup c x = ContinuousHom.ωSup c x :=\n  rfl\n#align ωSup_def ωSup_def\n\n",
 "ωSup_bind":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem ωSup_bind {β γ : Type v} (c : Chain α) (f : «expr →o » α (Part β)) (g : «expr →o » α (β → Part γ)) :\n    ωSup (c.map (f.bind g)) = ωSup (c.map f) >>= ωSup (c.map g) :=\n  by\n  apply eq_of_forall_ge_iff; intro x\n  simp only [ωSup_le_iff, Part.bind_le, chain.mem_map_iff, and_imp, OrderHom.bind_coe, exists_imp]\n  constructor <;> intro h'''\n  · intro b hb\n    apply ωSup_le _ _ _\n    rintro i y hy\n    simp only [Part.mem_ωSup] at hb\n    rcases hb with ⟨j, hb⟩\n    replace hb := hb.symm\n    simp only [Part.eq_some_iff, chain.map_coe, Function.comp_apply, OrderHom.apply_coe] at hy hb\n    replace hb : b ∈ f (c (max i j)) := f.mono (c.mono (le_max_right i j)) _ hb\n    replace hy : y ∈ g (c (max i j)) b := g.mono (c.mono (le_max_left i j)) _ _ hy\n    apply h''' (max i j)\n    simp only [exists_prop, Part.bind_eq_bind, Part.mem_bind_iff, chain.map_coe, Function.comp_apply, OrderHom.bind_coe]\n    exact ⟨_, hb, hy⟩\n  · intro i\n    intro y hy\n    simp only [exists_prop, Part.bind_eq_bind, Part.mem_bind_iff, chain.map_coe, Function.comp_apply,\n      OrderHom.bind_coe] at hy\n    rcases hy with ⟨b, hb₀, hb₁⟩\n    apply h''' b _\n    · apply le_ωSup (c.map g) _ _ _ hb₁\n    · apply le_ωSup (c.map f) i _ hb₀\n#align ωSup_bind ωSup_bind\n\n",
 "ωSup_apply_ωSup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\ntheorem ωSup_apply_ωSup (c₀ : Chain («expr →𝒄 » α β)) (c₁ : Chain α) :\n    ωSup c₀ (ωSup c₁) = Prod.apply (ωSup (c₀.zip c₁)) := by simp [prod.apply_apply, Prod.ωSup_zip]\n#align ωSup_apply_ωSup ωSup_apply_ωSup\n\n",
 "top_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem top_continuous : Continuous («expr⊤» : «expr →o » α β) :=\n  by\n  intro c; apply eq_of_forall_ge_iff; intro z\n  simp only [ωSup_le_iff, forall_const, chain.map_coe, (· ∘ ·), Function.const, order_hom.has_top_top,\n    OrderHom.const_coe_coe]\n#align top_continuous top_continuous\n\n",
 "to_monotone":
 "theorem continuous'.to_monotone {f : α → β} (hf : Continuous' f) : Monotone f :=\n  hf.fst\n#align continuous'.to_monotone continuous'.to_monotone\n\n",
 "to_bundled":
 "theorem continuous'.to_bundled (f : α → β) (hf : Continuous' f) : Continuous ⟨f, hf.to_monotone⟩ :=\n  hf.snd\n#align continuous'.to_bundled continuous'.to_bundled\n\n",
 "supr_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem supr_continuous {ι : Sort _} {f : ι → «expr →o » α β} (h : ∀ i, Continuous (f i)) :\n    Continuous\n      («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f i)) :=\n  supₛ_continuous _ <| Set.forall_range_iff.2 h\n#align supr_continuous supr_continuous\n\n",
 "sup_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem sup_continuous {f g : «expr →o » α β} (hf : Continuous f) (hg : Continuous g) : Continuous («expr ⊔ » f g) :=\n  by\n  rw [← supₛ_pair]; apply Sup_continuous\n  rintro f (rfl | rfl | _) <;> assumption\n#align sup_continuous sup_continuous\n\n",
 "seq_continuous'":
 "theorem seq_continuous' {β γ : Type v} (f : α → Part (β → γ)) (g : α → Part β) (hf : Continuous' f)\n    (hg : Continuous' g) : Continuous' fun x => f x <*> g x := by\n  simp only [seq_eq_bind_map] <;> apply bind_continuous' _ _ hf <;>\n        apply Pi.OmegaCompletePartialOrder.flip₂_continuous' <;>\n      intro <;>\n    apply map_continuous' _ _ hg\n#align seq_continuous' seq_continuous'\n\n",
 "of_bundled'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem continuous.of_bundled' (f : «expr →o » α β) (hf' : Continuous f) : Continuous' f :=\n  ⟨f.mono, hf'⟩\n#align continuous.of_bundled' continuous.of_bundled'\n\n",
 "of_bundled":
 "theorem continuous.of_bundled (f : α → β) (hf : Monotone f) (hf' : Continuous ⟨f, hf⟩) : Continuous' f :=\n  ⟨hf, hf'⟩\n#align continuous.of_bundled continuous.of_bundled\n\n",
 "mem_ωSup":
 "theorem mem_ωSup (x : α) (c : Chain (Part α)) : x ∈ ωSup c ↔ some x ∈ c :=\n  by\n  simp [omega_complete_partial_order.ωSup, Part.ωSup]\n  constructor\n  · split_ifs\n    swap\n    rintro ⟨⟨⟩⟩\n    intro h'\n    have hh := Classical.choose_spec h\n    simp at h'\n    subst x\n    exact hh\n  · intro h\n    have h' : ∃ a : α, some a ∈ c := ⟨_, h⟩\n    rw [dif_pos h']\n    have hh := Classical.choose_spec h'\n    rw [eq_of_chain hh h]\n    simp\n#align mem_ωSup mem_ωSup\n\n",
 "mem_map_iff":
 "theorem mem_map_iff {b : β} : b ∈ c.map f ↔ ∃ a, a ∈ c ∧ f a = b :=\n  ⟨exists_of_mem_map _, fun h => by\n    rcases h with ⟨w, h, h'⟩\n    subst b\n    apply mem_map c _ h⟩\n#align mem_map_iff mem_map_iff\n\n",
 "mem_map":
 "/-\nCopyright (c) 2020 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\ntheorem mem_map (x : α) : x ∈ c → f x ∈ Chain.map c f := fun ⟨i, h⟩ => ⟨i, h.symm ▸ rfl⟩\n#align mem_map mem_map\n\n",
 "mem_chain_of_mem_ωSup":
 "theorem mem_chain_of_mem_ωSup {c : Chain (Part α)} {a : α} (h : a ∈ Part.ωSup c) : some a ∈ c :=\n  by\n  simp [Part.ωSup] at h; split_ifs  at h\n  · have h' := Classical.choose_spec h_1\n    rw [← eq_some_iff] at h\n    rw [← h]\n    exact h'\n  · rcases h with ⟨⟨⟩⟩\n#align mem_chain_of_mem_ωSup mem_chain_of_mem_ωSup\n\n",
 "map_le_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[mono]\ntheorem map_le_map {g : «expr →o » α β} (h : f ≤ g) : c.map f ≤ c.map g := fun i => by\n  simp [mem_map_iff] <;> intros <;> exists i <;> apply h\n#align map_le_map map_le_map\n\n",
 "map_id":
 "@[simp]\ntheorem map_id : c.map OrderHom.id = c :=\n  OrderHom.comp_id _\n#align map_id map_id\n\n",
 "map_continuous'":
 "theorem map_continuous' {β γ : Type v} (f : β → γ) (g : α → Part β) (hg : Continuous' g) :\n    Continuous' fun x => f <$> g x := by\n  simp only [map_eq_bind_pure_comp] <;> apply bind_continuous' _ _ hg <;> apply const_continuous'\n#align map_continuous' map_continuous'\n\n",
 "map_comp":
 "theorem map_comp : (c.map f).map g = c.map (g.comp f) :=\n  rfl\n#align map_comp map_comp\n\n",
 "le_ωSup_of_le":
 "theorem le_ωSup_of_le {c : Chain α} {x : α} (i : ℕ) (h : x ≤ c i) : x ≤ ωSup c :=\n  le_trans h (le_ωSup c _)\n#align le_ωSup_of_le le_ωSup_of_le\n\n",
 "ite_continuous'":
 "theorem ite_continuous' {p : Prop} [hp : Decidable p] (f g : α → β) (hf : Continuous' f) (hg : Continuous' g) :\n    Continuous' fun x => if p then f x else g x := by split_ifs <;> simp [*]\n#align ite_continuous' ite_continuous'\n\n",
 "inf_continuous'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_continuous' {f g : α → β} (hf : Continuous' f) (hg : Continuous' g) : Continuous' («expr ⊓ » f g) :=\n  ⟨_, inf_continuous _ _ hf.snd hg.snd⟩\n#align inf_continuous' inf_continuous'\n\n",
 "inf_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_continuous (f g : «expr →o » α β) (hf : Continuous f) (hg : Continuous g) : Continuous («expr ⊓ » f g) :=\n  by\n  refine' fun c => eq_of_forall_ge_iff fun z => _\n  simp only [inf_le_iff, hf c, hg c, ωSup_le_iff, ← forall_or_left, ← forall_or_right, Function.comp_apply,\n    chain.map_coe, order_hom.has_inf_inf_coe]\n  exact\n    ⟨fun h _ => h _ _, fun h i j =>\n      (h (max i j)).imp (le_trans <| f.mono <| c.mono <| le_max_left _ _)\n        (le_trans <| g.mono <| c.mono <| le_max_right _ _)⟩\n#align inf_continuous inf_continuous\n\n",
 "id_continuous'":
 "theorem id_continuous' : Continuous' (@id α) :=\n  continuous_id.of_bundled' _\n#align id_continuous' id_continuous'\n\n",
 "id_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n@[simp]\ntheorem id_comp (f : «expr →𝒄 » β γ) : id.comp f = f := by ext <;> rfl\n#align id_comp id_comp\n\n",
 "forall_forall_merge'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n@[simp]\ntheorem forall_forall_merge' (c₀ : Chain («expr →𝒄 » α β)) (c₁ : Chain α) (z : β) :\n    (∀ j i : ℕ, (c₀ i) (c₁ j) ≤ z) ↔ ∀ i : ℕ, (c₀ i) (c₁ i) ≤ z := by rw [forall_swap, forall_forall_merge]\n#align forall_forall_merge' forall_forall_merge'\n\n",
 "forall_forall_merge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n/-- When proving that a chain of applications is below a bound `z`, it suffices to consider the\nfunctions and values being selected from the same index in the chains.\n\nThis lemma is more specific than necessary, i.e. `c₀` only needs to be a\nchain of monotone functions, but it is only used with continuous functions. -/\n@[simp]\ntheorem forall_forall_merge (c₀ : Chain («expr →𝒄 » α β)) (c₁ : Chain α) (z : β) :\n    (∀ i j : ℕ, (c₀ i) (c₁ j) ≤ z) ↔ ∀ i : ℕ, (c₀ i) (c₁ i) ≤ z :=\n  by\n  constructor <;> introv h\n  · apply h\n  · apply le_trans _ (h (max i j))\n    trans c₀ i (c₁ (max i j))\n    · apply (c₀ i).monotone\n      apply c₁.monotone\n      apply le_max_right\n    · apply c₀.monotone\n      apply le_max_left\n#align forall_forall_merge forall_forall_merge\n\n",
 "flip₂_continuous'":
 "theorem flip₂_continuous' (f : γ → ∀ x, β x) (hf : ∀ x, Continuous' fun g => f g x) : Continuous' f :=\n  Continuous.of_bundled _ (fun x y h a => (hf a).to_monotone h) (by intro c <;> ext a <;> apply (hf a).to_bundled _ c)\n#align flip₂_continuous' flip₂_continuous'\n\n",
 "flip₁_continuous'":
 "theorem flip₁_continuous' (f : ∀ x : α, γ → β x) (a : α) (hf : Continuous' fun x y => f y x) : Continuous' (f a) :=\n  Continuous.of_bundled _ (fun x y h => hf.to_monotone h a) fun c => congr_fun (hf.to_bundled _ c) a\n#align flip₁_continuous' flip₁_continuous'\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n@[ext]\nprotected theorem ext (f g : «expr →𝒄 » α β) (h : ∀ x, f x = g x) : f = g := by\n  cases f <;> cases g <;> congr <;> ext <;> apply h\n#align ext ext\n\n",
 "exists_of_mem_map":
 "theorem exists_of_mem_map {b : β} : b ∈ c.map f → ∃ a, a ∈ c ∧ f a = b := fun ⟨i, h⟩ => ⟨c i, ⟨i, rfl⟩, h.symm⟩\n#align exists_of_mem_map exists_of_mem_map\n\n",
 "eq_of_chain":
 "theorem eq_of_chain {c : Chain (Part α)} {a b : α} (ha : some a ∈ c) (hb : some b ∈ c) : a = b :=\n  by\n  cases' ha with i ha; replace ha := ha.symm\n  cases' hb with j hb; replace hb := hb.symm\n  wlog h : i ≤ j; · exact (this j hb i ha (le_of_not_le h)).symm\n  rw [eq_some_iff] at ha hb\n  have := c.monotone h _ ha; apply mem_unique this hb\n#align eq_of_chain eq_of_chain\n\n",
 "continuous_id":
 "#print continuous_id /-\ntheorem continuous_id : Continuous (@OrderHom.id α _) := by intro <;> rw [c.map_id] <;> rfl\n#align continuous_id continuous_id\n-/\n\n",
 "continuous_const":
 "#print continuous_const /-\ntheorem continuous_const (x : β) : Continuous (OrderHom.const α x) := fun c =>\n  eq_of_forall_ge_iff fun z => by simp [ωSup_le_iff]\n#align continuous_const continuous_const\n-/\n\n",
 "continuous_comp":
 "theorem continuous_comp (hfc : Continuous f) (hgc : Continuous g) : Continuous (g.comp f) :=\n  by\n  dsimp [Continuous] at *; intro\n  rw [hfc, hgc, chain.map_comp]\n#align continuous_comp continuous_comp\n\n",
 "continuous'_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp, norm_cast]\ntheorem continuous'_coe : ∀ {f : «expr →o » α β}, Continuous' f ↔ Continuous f\n  | ⟨f, hf⟩ => ⟨fun ⟨hf', hc⟩ => hc, fun hc => ⟨hf, hc⟩⟩\n#align continuous'_coe continuous'_coe\n\n",
 "const_continuous'":
 "theorem const_continuous' (x : β) : Continuous' (Function.const α x) :=\n  Continuous.of_bundled' (OrderHom.const α x) (continuous_const x)\n#align const_continuous' const_continuous'\n\n",
 "const_apply":
 "@[simp]\ntheorem const_apply (f : β) (a : α) : const f a = f :=\n  rfl\n#align const_apply const_apply\n\n",
 "congr_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n#print congr_fun /-\n-- Input: \\r\\MIc\ntheorem congr_fun {f g : «expr →𝒄 » α β} (h : f = g) (x : α) : f x = g x :=\n  congr_arg (fun h : «expr →𝒄 » α β => h x) h\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n#print congr_arg /-\ntheorem congr_arg (f : «expr →𝒄 » α β) {x y : α} (h : x = y) : f x = f y :=\n  congr_arg (fun x : α => f x) h\n#align congr_arg congr_arg\n-/\n\n",
 "comp_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n@[simp]\ntheorem comp_id (f : «expr →𝒄 » β γ) : f.comp id = f := by ext <;> rfl\n#align comp_id comp_id\n\n",
 "comp_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n@[simp]\ntheorem comp_assoc (f : «expr →𝒄 » γ φ) (g : «expr →𝒄 » β γ) (h : «expr →𝒄 » α β) :\n    f.comp (g.comp h) = (f.comp g).comp h := by ext <;> rfl\n#align comp_assoc comp_assoc\n\n",
 "coe_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\nprotected theorem coe_inj (f g : «expr →𝒄 » α β) (h : (f : α → β) = g) : f = g :=\n  ContinuousHom.ext _ _ <| _root_.congr_fun h\n#align coe_inj coe_inj\n\n",
 "coe_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n@[simp]\ntheorem coe_apply (a : α) (f : «expr →𝒄 » α β) : (f : «expr →o » α β) a = f a :=\n  rfl\n#align coe_apply coe_apply\n\n",
 "bot_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem bot_continuous : Continuous («expr⊥» : «expr →o » α β) :=\n  by\n  rw [← supₛ_empty]\n  exact Sup_continuous _ fun f hf => hf.elim\n#align bot_continuous bot_continuous\n\n",
 "bind_continuous'":
 "theorem bind_continuous' {β γ : Type v} (f : α → Part β) (g : α → β → Part γ) :\n    Continuous' f → Continuous' g → Continuous' fun x => f x >>= g x\n  | ⟨hf, hf'⟩, ⟨hg, hg'⟩ =>\n    Continuous.of_bundled' (OrderHom.bind ⟨f, hf⟩ ⟨g, hg⟩) (by intro c <;> rw [ωSup_bind, ← hf', ← hg'] <;> rfl)\n#align bind_continuous' bind_continuous'\n\n",
 "apply_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n@[mono]\ntheorem apply_mono {f g : «expr →𝒄 » α β} {x y : α} (h₁ : f ≤ g) (h₂ : x ≤ y) : f x ≤ g y :=\n  OrderHom.apply_mono (show (f : «expr →o » α β) ≤ g from h₁) h₂\n#align apply_mono apply_mono\n\n",
 "Sup_continuous'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem Sup_continuous' (s : Set (α → β)) (hc : ∀ f ∈ s, Continuous' f) : Continuous' (supₛ s) :=\n  by\n  lift s to Set («expr →o » α β) using fun f hf => (hc f hf).to_monotone\n  simp only [Set.ball_image_iff, continuous'_coe] at hc\n  rw [supₛ_image]\n  norm_cast\n  exact supr_continuous fun f => supr_continuous fun hf => hc f hf\n#align Sup_continuous' Sup_continuous'\n\n",
 "Sup_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n-- see Note [lower instance priority]\ntheorem Sup_continuous (s : Set <| «expr →o » α β) (hs : ∀ f ∈ s, Continuous f) : Continuous (supₛ s) :=\n  by\n  intro c\n  apply eq_of_forall_ge_iff\n  intro z\n  suffices (∀ f ∈ s, ∀ (n), (f : _) (c n) ≤ z) ↔ ∀ (n), ∀ f ∈ s, (f : _) (c n) ≤ z by\n    simpa (config := { contextual := true }) [ωSup_le_iff, hs _ _ _]\n  exact ⟨fun H n f hf => H f hf n, fun H f hf n => H n f hf⟩\n#align Sup_continuous Sup_continuous\n\n",
 "Monotone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n#print Monotone /-\nprotected theorem Monotone (f : «expr →𝒄 » α β) : Monotone f :=\n  f.monotone'\n#align monotone Monotone\n-/\n\n",
 "Continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →𝒄 » -/\n#print Continuous /-\ntheorem Continuous (F : «expr →𝒄 » α β) (C : Chain α) : F (ωSup C) = ωSup (C.map F) :=\n  continuous_hom.cont _ _\n#align continuous Continuous\n-/\n\n"}