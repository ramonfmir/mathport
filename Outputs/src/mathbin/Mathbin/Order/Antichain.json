{"top_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print IsAntichain.top_mem_iff /-\ntheorem IsAntichain.top_mem_iff [OrderTop α] (hs : IsAntichain (· ≤ ·) s) : «expr⊤» ∈ s ↔ s = {«expr⊤»} :=\n  isGreatest_top_iff.symm.trans hs.greatest_iff\n#align is_antichain.top_mem_iff IsAntichain.top_mem_iff\n-/\n\n",
 "to_dual_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem to_dual_iff [LE α] : IsAntichain (· ≤ ·) s ↔ @IsAntichain («expr ᵒᵈ» α) (· ≤ ·) s :=\n  ⟨to_dual, to_dual⟩\n#align to_dual_iff to_dual_iff\n\n",
 "to_dual":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem to_dual [LE α] (hs : IsAntichain (· ≤ ·) s) : @IsAntichain («expr ᵒᵈ» α) (· ≤ ·) s := fun a ha b hb hab =>\n  hs hb ha hab.symm\n#align to_dual to_dual\n\n",
 "swap":
 "theorem swap [is_symm α r] (hs : IsStrongAntichain r s) : IsStrongAntichain (swap r) s :=\n  hs.flip\n#align swap swap\n\n",
 "subsingleton":
 "protected theorem subsingleton [IsDirected α r] (h : IsStrongAntichain r s) : s.subsingleton := fun a ha b hb =>\n  let ⟨c, hac, hbc⟩ := directed_of r a b\n  h.eq ha hb hac hbc\n#align subsingleton subsingleton\n\n",
 "subset":
 "protected theorem subset (hs : IsWeakAntichain s) : t ⊆ s → IsWeakAntichain t :=\n  hs.subset\n#align subset subset\n\n",
 "preimage_rel_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_rel_iso {t : set β} (hs : IsAntichain r' t) (φ : «expr ≃r » r r') : IsAntichain r («expr ⁻¹' » φ t) :=\n  hs.preimage_rel_embedding φ\n#align preimage_rel_iso preimage_rel_iso\n\n",
 "preimage_rel_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_rel_embedding {t : set β} (ht : IsAntichain r' t) (φ : «expr ↪r » r r') :\n    IsAntichain r («expr ⁻¹' » φ t) := fun a ha a' ha' hne hle =>\n  ht ha ha' (fun h => hne (φ.injective h)) (φ.map_rel_iff.mpr hle)\n#align preimage_rel_embedding preimage_rel_embedding\n\n",
 "preimage_iso_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_iso_iff [LE α] [LE β] {t : set β} {φ : «expr ≃o » α β} :\n    IsAntichain (· ≤ ·) («expr ⁻¹' » φ t) ↔ IsAntichain (· ≤ ·) t :=\n  ⟨fun h => (φ.image_preimage t).subst (h.image_iso φ), fun h => h.preimage_iso _⟩\n#align preimage_iso_iff preimage_iso_iff\n\n",
 "preimage_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_iso [LE α] [LE β] {t : set β} (ht : IsAntichain (· ≤ ·) t) (φ : «expr ≃o » α β) :\n    IsAntichain (· ≤ ·) («expr ⁻¹' » φ t) :=\n  preimage_relEmbedding ht _\n#align preimage_iso preimage_iso\n\n",
 "preimage_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_embedding [LE α] [LE β] {t : set β} (ht : IsAntichain (· ≤ ·) t) (φ : «expr ↪o » α β) :\n    IsAntichain (· ≤ ·) («expr ⁻¹' » φ t) :=\n  preimage_relEmbedding ht _\n#align preimage_embedding preimage_embedding\n\n",
 "preimage_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_compl [BooleanAlgebra α] (hs : IsAntichain (· ≤ ·) s) : IsAntichain (· ≤ ·) («expr ⁻¹' » compl s) :=\n  fun a ha a' ha' hne hle => hs ha' ha (fun h => hne (compl_inj_iff.mp h.symm)) (compl_le_compl hle)\n#align preimage_compl preimage_compl\n\n",
 "preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage (hs : IsStrongAntichain r s) {f : β → α} (hf : injective f) (h : ∀ a b, r' a b → r (f a) (f b)) :\n    IsStrongAntichain r' («expr ⁻¹' » f s) := fun a ha b hb hab c =>\n  (hs ha hb (hf.ne hab) _).imp (mt <| h _ _) (mt <| h _ _)\n#align preimage preimage\n\n",
 "mono_on":
 "theorem mono_on (hs : IsAntichain r₁ s) (h : s.pairwise fun ⦃a b⦄ => r₂ a b → r₁ a b) : IsAntichain r₂ s :=\n  hs.imp_on <| h.imp fun a b h h₁ h₂ => h₁ <| h h₂\n#align mono_on mono_on\n\n",
 "mono":
 "theorem mono (hs : IsStrongAntichain r₁ s) (h : r₂ ≤ r₁) : IsStrongAntichain r₂ s :=\n  hs.mono' fun a b hab c => (hab c).imp (compl_le_compl h _ _) (compl_le_compl h _ _)\n#align mono mono\n\n",
 "least_iff":
 "#print IsAntichain.least_iff /-\ntheorem IsAntichain.least_iff (hs : IsAntichain (· ≤ ·) s) : IsLeast s a ↔ s = {a} :=\n  (and_iff_right hs).symm.trans isAntichain_and_least_iff\n#align is_antichain.least_iff IsAntichain.least_iff\n-/\n\n",
 "is_strong_antichain_insert":
 "#print isStrongAntichain_insert /-\ntheorem isStrongAntichain_insert :\n    IsStrongAntichain r (insert a s) ↔ IsStrongAntichain r s ∧ ∀ ⦃b⦄, b ∈ s → a ≠ b → ∀ c, ¬r a c ∨ ¬r b c :=\n  Set.pairwise_insert_of_symmetric fun a b h c => (h c).symm\n#align is_strong_antichain_insert isStrongAntichain_insert\n-/\n\n",
 "is_antisymm":
 "protected theorem is_antisymm (h : IsAntichain r univ) : is_antisymm α r :=\n  ⟨fun a b ha _ => h.eq trivial trivial ha⟩\n#align is_antisymm is_antisymm\n\n",
 "is_antichain_insert_of_symmetric":
 "#print isAntichain_insert_of_symmetric /-\ntheorem isAntichain_insert_of_symmetric (hr : symmetric r) :\n    IsAntichain r (insert a s) ↔ IsAntichain r s ∧ ∀ ⦃b⦄, b ∈ s → a ≠ b → ¬r a b :=\n  pairwise_insert_of_symmetric hr.compl\n#align is_antichain_insert_of_symmetric isAntichain_insert_of_symmetric\n-/\n\n",
 "is_antichain_insert":
 "#print isAntichain_insert /-\ntheorem isAntichain_insert : IsAntichain r (insert a s) ↔ IsAntichain r s ∧ ∀ ⦃b⦄, b ∈ s → a ≠ b → ¬r a b ∧ ¬r b a :=\n  Set.pairwise_insert\n#align is_antichain_insert isAntichain_insert\n-/\n\n",
 "isWeakAntichain_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print isWeakAntichain_insert /-\ntheorem isWeakAntichain_insert :\n    IsWeakAntichain (insert a s) ↔ IsWeakAntichain s ∧ ∀ ⦃b⦄, b ∈ s → a ≠ b → ¬«expr ≺ » a b ∧ ¬«expr ≺ » b a :=\n  isAntichain_insert\n#align is_weak_antichain_insert isWeakAntichain_insert\n-/\n\n",
 "isWeakAntichain":
 "#print Set.Subsingleton.isWeakAntichain /-\ntheorem Set.Subsingleton.isWeakAntichain (hs : s.subsingleton) : IsWeakAntichain s :=\n  hs.is_antichain _\n#align set.subsingleton.is_weak_antichain Set.Subsingleton.isWeakAntichain\n-/\n\n",
 "isStrongAntichain":
 "#print Set.Subsingleton.isStrongAntichain /-\ntheorem Set.Subsingleton.isStrongAntichain (hs : s.subsingleton) (r : α → α → Prop) : IsStrongAntichain r s :=\n  hs.pairwise _\n#align set.subsingleton.is_strong_antichain Set.Subsingleton.isStrongAntichain\n-/\n\n",
 "isAntichain_singleton":
 "#print isAntichain_singleton /-\ntheorem isAntichain_singleton (a : α) (r : α → α → Prop) : IsAntichain r {a} :=\n  pairwise_singleton _ _\n#align is_antichain_singleton isAntichain_singleton\n-/\n\n",
 "isAntichain_and_least_iff":
 "#print isAntichain_and_least_iff /-\ntheorem isAntichain_and_least_iff : IsAntichain (· ≤ ·) s ∧ IsLeast s a ↔ s = {a} :=\n  ⟨fun h => eq_singleton_iff_unique_mem.2 ⟨h.2.1, fun b hb => h.1.eq' hb h.2.1 (h.2.2 hb)⟩,\n    by\n    rintro rfl\n    exact ⟨isAntichain_singleton _ _, isLeast_singleton⟩⟩\n#align is_antichain_and_least_iff isAntichain_and_least_iff\n-/\n\n",
 "isAntichain_and_greatest_iff":
 "#print isAntichain_and_greatest_iff /-\ntheorem isAntichain_and_greatest_iff : IsAntichain (· ≤ ·) s ∧ IsGreatest s a ↔ s = {a} :=\n  ⟨fun h => eq_singleton_iff_unique_mem.2 ⟨h.2.1, fun b hb => h.1.eq hb h.2.1 (h.2.2 hb)⟩,\n    by\n    rintro rfl\n    exact ⟨isAntichain_singleton _ _, isGreatest_singleton⟩⟩\n#align is_antichain_and_greatest_iff isAntichain_and_greatest_iff\n-/\n\n",
 "isAntichain":
 "#print Set.Subsingleton.isAntichain /-\ntheorem Set.Subsingleton.isAntichain (hs : s.subsingleton) (r : α → α → Prop) : IsAntichain r s :=\n  hs.pairwise _\n#align set.subsingleton.is_antichain Set.Subsingleton.isAntichain\n-/\n\n",
 "insert_of_symmetric":
 "theorem insert_of_symmetric (hs : IsAntichain r s) (hr : symmetric r) (h : ∀ ⦃b⦄, b ∈ s → a ≠ b → ¬r a b) :\n    IsAntichain r (insert a s) :=\n  (isAntichain_insert_of_symmetric hr).2 ⟨hs, h⟩\n#align insert_of_symmetric insert_of_symmetric\n\n",
 "insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\nprotected theorem insert (hs : IsWeakAntichain s) :\n    (∀ ⦃b⦄, b ∈ s → a ≠ b → ¬«expr ≺ » b a) → (∀ ⦃b⦄, b ∈ s → a ≠ b → ¬«expr ≺ » a b) → IsWeakAntichain (insert a s) :=\n  hs.insert\n#align insert insert\n\n",
 "image_rel_iso_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_rel_iso_iff {φ : «expr ≃r » r r'} : IsAntichain r' («expr '' » φ s) ↔ IsAntichain r s :=\n  @image_relEmbedding_iff _ _ _ _ _ (φ : «expr ↪r » r r')\n#align image_rel_iso_iff image_rel_iso_iff\n\n",
 "image_rel_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_rel_iso (hs : IsAntichain r s) (φ : «expr ≃r » r r') : IsAntichain r' («expr '' » φ s) :=\n  hs.image_rel_embedding φ\n#align image_rel_iso image_rel_iso\n\n",
 "image_rel_embedding_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_rel_embedding_iff {φ : «expr ↪r » r r'} : IsAntichain r' («expr '' » φ s) ↔ IsAntichain r s :=\n  ⟨fun h => (φ.injective.preimage_image s).subst (h.preimage_rel_embedding φ), fun h => h.image_rel_embedding φ⟩\n#align image_rel_embedding_iff image_rel_embedding_iff\n\n",
 "image_rel_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪r » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_rel_embedding (hs : IsAntichain r s) (φ : «expr ↪r » r r') : IsAntichain r' («expr '' » φ s) :=\n  by\n  intro b hb b' hb' h₁ h₂\n  rw [Set.mem_image] at hb hb'\n  obtain ⟨⟨a, has, rfl⟩, ⟨a', has', rfl⟩⟩ := hb, hb'\n  exact hs has has' (fun haa' => h₁ (haa'.subst (by rfl))) (φ.map_rel_iff.mp h₂)\n#align image_rel_embedding image_rel_embedding\n\n",
 "image_iso_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_iso_iff [LE α] [LE β] {φ : «expr ≃o » α β} :\n    IsAntichain (· ≤ ·) («expr '' » φ s) ↔ IsAntichain (· ≤ ·) s :=\n  image_rel_embedding_iff\n#align image_iso_iff image_iso_iff\n\n",
 "image_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_iso [LE α] [LE β] (hs : IsAntichain (· ≤ ·) s) (φ : «expr ≃o » α β) :\n    IsAntichain (· ≤ ·) («expr '' » φ s) :=\n  image_relEmbedding hs _\n#align image_iso image_iso\n\n",
 "image_embedding_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_embedding_iff [LE α] [LE β] {φ : «expr ↪o » α β} :\n    IsAntichain (· ≤ ·) («expr '' » φ s) ↔ IsAntichain (· ≤ ·) s :=\n  image_rel_embedding_iff\n#align image_embedding_iff image_embedding_iff\n\n",
 "image_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_embedding [LE α] [LE β] (hs : IsAntichain (· ≤ ·) s) (φ : «expr ↪o » α β) :\n    IsAntichain (· ≤ ·) («expr '' » φ s) :=\n  image_relEmbedding hs _\n#align image_embedding image_embedding\n\n",
 "image_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_compl [BooleanAlgebra α] (hs : IsAntichain (· ≤ ·) s) : IsAntichain (· ≤ ·) («expr '' » compl s) :=\n  (hs.image_embedding (OrderIso.compl α).to_order_embedding).flip\n#align image_compl image_compl\n\n",
 "image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image (hs : IsStrongAntichain r s) {f : α → β} (hf : surjective f) (h : ∀ a b, r' (f a) (f b) → r a b) :\n    IsStrongAntichain r' («expr '' » f s) :=\n  by\n  rintro _ ⟨a, ha, rfl⟩ _ ⟨b, hb, rfl⟩ hab c\n  obtain ⟨c, rfl⟩ := hf c\n  exact (hs ha hb (ne_of_apply_ne _ hab) _).imp (mt <| h _ _) (mt <| h _ _)\n#align image image\n\n",
 "greatest_iff":
 "#print IsAntichain.greatest_iff /-\ntheorem IsAntichain.greatest_iff (hs : IsAntichain (· ≤ ·) s) : IsGreatest s a ↔ s = {a} :=\n  (and_iff_right hs).symm.trans isAntichain_and_greatest_iff\n#align is_antichain.greatest_iff IsAntichain.greatest_iff\n-/\n\n",
 "flip":
 "#print flip /-\nprotected theorem flip [is_symm α r] (hs : IsStrongAntichain r s) : IsStrongAntichain (flip r) s := fun a ha b hb h c =>\n  (hs ha hb h c).imp (mt <| symm_of r) (mt <| symm_of r)\n#align flip flip\n-/\n\n",
 "eq'":
 "protected theorem eq' (hs : IsAntichain r s) {a b : α} (ha : a ∈ s) (hb : b ∈ s) (h : r b a) : a = b :=\n  (hs.eq hb ha h).symm\n#align eq' eq'\n\n",
 "eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\nprotected theorem eq (hs : IsWeakAntichain s) : a ∈ s → b ∈ s → «expr ≺ » a b → a = b :=\n  hs.eq\n#align eq eq\n\n",
 "compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print Symmetric.compl /-\n/-\nCopyright (c) 2021 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\nprotected theorem Symmetric.compl (h : symmetric r) : symmetric («expr ᶜ» r) := fun x y hr hr' => hr <| h hr'\n#align symmetric.compl Symmetric.compl\n-/\n\n",
 "bot_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print IsAntichain.bot_mem_iff /-\ntheorem IsAntichain.bot_mem_iff [OrderBot α] (hs : IsAntichain (· ≤ ·) s) : «expr⊥» ∈ s ↔ s = {«expr⊥»} :=\n  isLeast_bot_iff.symm.trans hs.least_iff\n#align is_antichain.bot_mem_iff IsAntichain.bot_mem_iff\n-/\n\n",
 "antichain_iff":
 "#print IsGreatest.antichain_iff /-\ntheorem IsGreatest.antichain_iff (hs : IsGreatest s a) : IsAntichain (· ≤ ·) s ↔ s = {a} :=\n  (and_iff_left hs).symm.trans isAntichain_and_greatest_iff\n#align is_greatest.antichain_iff IsGreatest.antichain_iff\n-/\n\n",
 "IsAntichain":
 "#print IsAntichain /-\nprotected theorem IsAntichain [is_refl α r] (h : IsStrongAntichain r s) : IsAntichain r s :=\n  h.imp fun a b hab => (hab b).resolve_right (not_not_intro <| refl _)\n#align is_antichain IsAntichain\n-/\n\n"}