{"to_sym2":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n#print Prod.GameAdd.to_sym2 /-\ntheorem Prod.GameAdd.to_sym2 {a₁ a₂ b₁ b₂ : α} (h : Prod.GameAdd rα rα (a₁, b₁) (a₂, b₂)) :\n    Sym2.GameAdd rα («expr⟦ ⟧» (a₁, b₁)) («expr⟦ ⟧» (a₂, b₂)) :=\n  gameAdd_mk'_iff.2 <| or.inl <| h\n#align prod.game_add.to_sym2 Prod.GameAdd.to_sym2\n-/\n\n",
 "sym2_gameAdd":
 "#print WellFounded.sym2_gameAdd /-\n/-- The `sym2.game_add` relation on well-founded inputs is well-founded. -/\ntheorem WellFounded.sym2_gameAdd (h : well_founded rα) : well_founded (Sym2.GameAdd rα) :=\n  ⟨fun i => Sym2.inductionOn i fun x y => (h.apply x).sym2_game_add (h.apply y)⟩\n#align well_founded.sym2_game_add WellFounded.sym2_gameAdd\n-/\n\n",
 "snd_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add.snd_fst {a₁ a₂ b : α} (h : rα a₁ a₂) : GameAdd rα («expr⟦ ⟧» (b, a₁)) («expr⟦ ⟧» (a₂, b)) :=\n  by\n  rw [Sym2.eq_swap]\n  exact game_add.fst h\n#align game_add.snd_fst game_add.snd_fst\n\n",
 "snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add.snd {a b₁ b₂ : α} (h : rα b₁ b₂) : GameAdd rα («expr⟦ ⟧» (a, b₁)) («expr⟦ ⟧» (a, b₂)) :=\n  (prod.game_add.snd h).to_sym2\n#align game_add.snd game_add.snd\n\n",
 "rprod_le_trans_gen_game_add":
 "/-- `prod.rprod` is a subrelation of the transitive closure of `prod.game_add`. -/\ntheorem rprod_le_trans_gen_game_add : RProd rα rβ ≤ Relation.TransGen (GameAdd rα rβ) := fun _ _ h =>\n  h.rec\n    (by\n      intro _ _ _ _ hα hβ\n      exact relation.trans_gen.tail (relation.trans_gen.single <| game_add.fst hα) (game_add.snd hβ))\n#align rprod_le_trans_gen_game_add rprod_le_trans_gen_game_add\n\n",
 "prod_gameAdd":
 "#print WellFounded.prod_gameAdd /-\n/-- The `prod.game_add` relation on well-founded inputs is well-founded.\n\n  In particular, the sum of two well-founded games is well-founded. -/\ntheorem WellFounded.prod_gameAdd (hα : well_founded rα) (hβ : well_founded rβ) : well_founded (Prod.GameAdd rα rβ) :=\n  ⟨fun ⟨a, b⟩ => (hα.apply a).prod_game_add (hβ.apply b)⟩\n#align well_founded.prod_game_add WellFounded.prod_gameAdd\n-/\n\n",
 "induction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-- Induction on the well-founded `sym2.game_add` relation. -/\ntheorem game_add.induction {C : α → α → Prop} :\n    well_founded rα →\n      (∀ a₁ b₁, (∀ a₂ b₂, Sym2.GameAdd rα («expr⟦ ⟧» (a₂, b₂)) («expr⟦ ⟧» (a₁, b₁)) → C a₂ b₂) → C a₁ b₁) →\n        ∀ a b, C a b :=\n  GameAdd.fix\n#align game_add.induction game_add.induction\n\n",
 "game_add_swap_swap_mk":
 "theorem game_add_swap_swap_mk (a₁ a₂ : α) (b₁ b₂ : β) :\n    GameAdd rα rβ (a₁, b₁) (a₂, b₂) ↔ GameAdd rβ rα (b₁, a₁) (b₂, a₂) :=\n  gameAdd_swap_swap rβ rα (b₁, a₁) (b₂, a₂)\n#align game_add_swap_swap_mk game_add_swap_swap_mk\n\n",
 "game_add_swap_swap":
 "@[simp]\ntheorem game_add_swap_swap : ∀ a b : α × β, GameAdd rβ rα a.swap b.swap ↔ GameAdd rα rβ a b := fun ⟨a₁, b₁⟩ ⟨a₂, b₂⟩ =>\n  by rw [Prod.swap, game_add_mk_iff, game_add_mk_iff, or_comm']\n#align game_add_swap_swap game_add_swap_swap\n\n",
 "game_add_mk_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add_mk_iff {a₁ a₂ b₁ b₂ : α} :\n    GameAdd rα («expr⟦ ⟧» (a₁, b₁)) («expr⟦ ⟧» (a₂, b₂)) ↔\n      Prod.GameAdd rα rα (a₁, b₁) (a₂, b₂) ∨ Prod.GameAdd rα rα (b₁, a₁) (a₂, b₂) :=\n  iff.rfl\n#align game_add_mk_iff game_add_mk_iff\n\n",
 "game_add_le_lex":
 "/-- `prod.game_add` is a `subrelation` of `prod.lex`. -/\ntheorem game_add_le_lex : GameAdd rα rβ ≤ prod.lex rα rβ := fun _ _ h =>\n  h.rec (fun _ _ b => prod.lex.left b b) fun a _ _ => prod.lex.right a\n#align game_add_le_lex game_add_le_lex\n\n",
 "game_add_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add_iff :\n    ∀ {x y : α × α}, GameAdd rα («expr⟦ ⟧» x) («expr⟦ ⟧» y) ↔ Prod.GameAdd rα rα x y ∨ Prod.GameAdd rα rα x.swap y :=\n  by\n  rintro ⟨_, _⟩ ⟨_, _⟩\n  rfl\n#align game_add_iff game_add_iff\n\n",
 "fst_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add.fst_snd {a₁ a₂ b : α} (h : rα a₁ a₂) : GameAdd rα («expr⟦ ⟧» (a₁, b)) («expr⟦ ⟧» (b, a₂)) :=\n  by\n  rw [Sym2.eq_swap]\n  exact game_add.snd h\n#align game_add.fst_snd game_add.fst_snd\n\n",
 "fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add.fst {a₁ a₂ b : α} (h : rα a₁ a₂) : GameAdd rα («expr⟦ ⟧» (a₁, b)) («expr⟦ ⟧» (a₂, b)) :=\n  (prod.game_add.fst h).to_sym2\n#align game_add.fst game_add.fst\n\n",
 "fix_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\ntheorem game_add.fix_eq {C : α → α → Sort _} (hr : well_founded rα)\n    (IH : ∀ a₁ b₁, (∀ a₂ b₂, Sym2.GameAdd rα («expr⟦ ⟧» (a₂, b₂)) («expr⟦ ⟧» (a₁, b₁)) → C a₂ b₂) → C a₁ b₁) (a b : α) :\n    GameAdd.fix hr IH a b = IH a b fun a' b' h => GameAdd.fix hr IH a' b' :=\n  well_founded.fix_eq _ _ _\n#align game_add.fix_eq game_add.fix_eq\n\n"}