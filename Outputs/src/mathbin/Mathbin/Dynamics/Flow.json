{"map_zero_apply":
 "theorem map_zero_apply (x : α) : ϕ 0 x = x :=\n  ϕ.map_zero' x\n#align map_zero_apply map_zero_apply\n\n",
 "map_zero":
 "#print map_zero /-\n@[simp]\ntheorem map_zero : ϕ 0 = id :=\n  funext ϕ.map_zero'\n#align map_zero map_zero\n-/\n\n",
 "map_add":
 "#print map_add /-\ntheorem map_add (t₁ t₂ : τ) (x : α) : ϕ (t₁ + t₂) x = ϕ t₁ (ϕ t₂ x) :=\n  ϕ.map_add' _ _ _\n#align map_add map_add\n-/\n\n",
 "is_invariant_iff_image_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_invariant_iff_image_eq (s : Set α) : IsInvariant ϕ s ↔ ∀ t, «expr '' » (ϕ t) s = s :=\n  (isInvariant_iff_image _ _).trans\n    (iff.intro (fun h t => Subset.antisymm (h t) fun _ hx => ⟨_, h (-t) ⟨_, hx, rfl⟩, by simp [← map_add]⟩) fun h t =>\n      by rw [h t])\n#align is_invariant_iff_image_eq is_invariant_iff_image_eq\n\n",
 "isInvariant_iff_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print isInvariant_iff_image /-\n/-\nCopyright (c) 2020 Jean Lo. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jean Lo\n-/\ntheorem isInvariant_iff_image : IsInvariant ϕ s ↔ ∀ t, «expr '' » (ϕ t) s ⊆ s := by simp_rw [IsInvariant, maps_to']\n#align is_invariant_iff_image isInvariant_iff_image\n-/\n\n",
 "isInvariant":
 "#print IsFwInvariant.isInvariant /-\n/-- If `τ` is a `canonically_ordered_add_monoid` (e.g., `ℕ` or `ℝ≥0`), then the notions\n`is_fw_invariant` and `is_invariant` are equivalent. -/\ntheorem IsFwInvariant.isInvariant [CanonicallyOrderedAddMonoid τ] {ϕ : τ → α → α} {s : Set α} (h : IsFwInvariant ϕ s) :\n    IsInvariant ϕ s := fun t => h (zero_le t)\n#align is_fw_invariant.is_invariant IsFwInvariant.isInvariant\n-/\n\n",
 "isFwInvariant_iff_isInvariant":
 "#print isFwInvariant_iff_isInvariant /-\n/-- If `τ` is a `canonically_ordered_add_monoid` (e.g., `ℕ` or `ℝ≥0`), then the notions\n`is_fw_invariant` and `is_invariant` are equivalent. -/\ntheorem isFwInvariant_iff_isInvariant [CanonicallyOrderedAddMonoid τ] {ϕ : τ → α → α} {s : Set α} :\n    IsFwInvariant ϕ s ↔ IsInvariant ϕ s :=\n  ⟨IsFwInvariant.isInvariant, IsInvariant.isFwInvariant⟩\n#align is_fw_invariant_iff_is_invariant isFwInvariant_iff_isInvariant\n-/\n\n",
 "isFwInvariant":
 "#print IsInvariant.isFwInvariant /-\ntheorem IsInvariant.isFwInvariant [preorder τ] [Zero τ] {ϕ : τ → α → α} {s : Set α} (h : IsInvariant ϕ s) :\n    IsFwInvariant ϕ s := fun t ht => h t\n#align is_invariant.is_fw_invariant IsInvariant.isFwInvariant\n-/\n\n",
 "image_eq_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem image_eq_preimage (t : τ) (s : Set α) : «expr '' » (ϕ t) s = «expr ⁻¹' » (ϕ (-t)) s :=\n  (ϕ.to_homeomorph t).to_equiv.image_eq_preimage s\n#align image_eq_preimage image_eq_preimage\n\n",
 "ext":
 "@[ext]\ntheorem ext : ∀ {ϕ₁ ϕ₂ : Flow τ α}, (∀ t x, ϕ₁ t x = ϕ₂ t x) → ϕ₁ = ϕ₂\n  | ⟨f₁, _, _, _⟩, ⟨f₂, _, _, _⟩, h => by\n    congr\n    funext\n    exact h _ _\n#align ext ext\n\n",
 "Continuous":
 "#print Continuous /-\n@[continuity]\nprotected theorem Continuous {β : Type _} [TopologicalSpace β] {t : β → τ} (ht : Continuous t) {f : β → α}\n    (hf : Continuous f) : Continuous fun x => ϕ (t x) (f x) :=\n  ϕ.cont'.comp (ht.prod_mk hf)\n#align continuous Continuous\n-/\n\n"}