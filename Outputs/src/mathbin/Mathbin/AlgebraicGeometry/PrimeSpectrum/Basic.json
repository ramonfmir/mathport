{"zero_locus_vanishing_ideal_eq_closure":
 "theorem zero_locus_vanishing_ideal_eq_closure (t : Set (prime_spectrum R)) :\n    zero_locus (vanishing_ideal t : Set R) = closure t :=\n  by\n  apply Set.Subset.antisymm\n  · rintro x hx t' ⟨ht', ht⟩\n    obtain ⟨fs, rfl⟩ : ∃ s, t' = zero_locus s := by rwa [is_closed_iff_zero_locus] at ht'\n    rw [subset_zero_locus_iff_subset_vanishing_ideal] at ht\n    exact Set.Subset.trans ht hx\n  · rw [(is_closed_zero_locus _).closure_subset_iff]\n    exact subset_zero_locus_vanishing_ideal t\n#align zero_locus_vanishing_ideal_eq_closure zero_locus_vanishing_ideal_eq_closure\n\n",
 "zero_locus_univ":
 "@[simp]\ntheorem zero_locus_univ : zero_locus (Set.univ : Set R) = ∅ :=\n  zero_locus_empty_of_one_mem (Set.mem_univ 1)\n#align zero_locus_univ zero_locus_univ\n\n",
 "zero_locus_union":
 "theorem zero_locus_union (s s' : Set R) : zero_locus (s ∪ s') = zero_locus s ∩ zero_locus s' :=\n  (gc_set R).l_sup\n#align zero_locus_union zero_locus_union\n\n",
 "zero_locus_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem zero_locus_supr {ι : Sort _} (I : ι → Ideal R) :\n    zero_locus\n        ((«expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (I i) :\n            Ideal R) :\n          Set R) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (zero_locus (I i)) :=\n  (gc R).l_supr\n#align zero_locus_supr zero_locus_supr\n\n",
 "zero_locus_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem zero_locus_sup (I J : Ideal R) : zero_locus ((«expr ⊔ » I J : Ideal R) : Set R) = zero_locus I ∩ zero_locus J :=\n  (gc R).l_sup\n#align zero_locus_sup zero_locus_sup\n\n",
 "zero_locus_subset_zero_locus_singleton_iff":
 "theorem zero_locus_subset_zero_locus_singleton_iff (f g : R) :\n    zero_locus ({f} : Set R) ⊆ zero_locus {g} ↔ g ∈ (Ideal.span ({f} : Set R)).radical := by\n  rw [← zero_locus_span {f}, ← zero_locus_span {g}, zero_locus_subset_zero_locus_iff, Ideal.span_le,\n    Set.singleton_subset_iff, SetLike.mem_coe]\n#align zero_locus_subset_zero_locus_singleton_iff zero_locus_subset_zero_locus_singleton_iff\n\n",
 "zero_locus_subset_zero_locus_iff":
 "theorem zero_locus_subset_zero_locus_iff (I J : Ideal R) :\n    zero_locus (I : Set R) ⊆ zero_locus (J : Set R) ↔ J ≤ I.radical :=\n  ⟨fun h =>\n    Ideal.radical_le_radical_iff.mp\n      (vanishing_ideal_zero_locus_eq_radical I ▸ vanishing_ideal_zero_locus_eq_radical J ▸ vanishing_ideal_anti_mono h),\n    fun h => zero_locus_radical I ▸ zero_locus_anti_mono_ideal h⟩\n#align zero_locus_subset_zero_locus_iff zero_locus_subset_zero_locus_iff\n\n",
 "zero_locus_span":
 "@[simp]\ntheorem zero_locus_span (s : Set R) : zero_locus (Ideal.span s : Set R) = zero_locus s :=\n  by\n  ext x\n  exact (Submodule.gi R R).gc s x.as_ideal\n#align zero_locus_span zero_locus_span\n\n",
 "zero_locus_singleton_zero":
 "@[simp]\ntheorem zero_locus_singleton_zero : zero_locus ({0} : Set R) = Set.univ :=\n  zero_locus_bot\n#align zero_locus_singleton_zero zero_locus_singleton_zero\n\n",
 "zero_locus_singleton_pow":
 "@[simp]\ntheorem zero_locus_singleton_pow (f : R) (n : ℕ) (hn : 0 < n) : zero_locus ({f ^ n} : Set R) = zero_locus {f} :=\n  Set.ext fun x => by simpa using x.2.pow_mem_iff_mem n hn\n#align zero_locus_singleton_pow zero_locus_singleton_pow\n\n",
 "zero_locus_singleton_one":
 "@[simp]\ntheorem zero_locus_singleton_one : zero_locus ({1} : Set R) = ∅ :=\n  zero_locus_empty_of_one_mem (Set.mem_singleton (1 : R))\n#align zero_locus_singleton_one zero_locus_singleton_one\n\n",
 "zero_locus_singleton_mul":
 "theorem zero_locus_singleton_mul (f g : R) : zero_locus ({f * g} : Set R) = zero_locus {f} ∪ zero_locus {g} :=\n  Set.ext fun x => by simpa using x.2.mul_mem_iff_mem_or_mem\n#align zero_locus_singleton_mul zero_locus_singleton_mul\n\n",
 "zero_locus_radical":
 "@[simp]\ntheorem zero_locus_radical (I : Ideal R) : zero_locus (I.radical : Set R) = zero_locus I :=\n  vanishing_ideal_zero_locus_eq_radical I ▸ (gc R).l_u_l_eq_l I\n#align zero_locus_radical zero_locus_radical\n\n",
 "zero_locus_pow":
 "@[simp]\ntheorem zero_locus_pow (I : Ideal R) {n : ℕ} (hn : 0 < n) : zero_locus ((I ^ n : Ideal R) : Set R) = zero_locus I :=\n  zero_locus_radical (I ^ n) ▸ (I.radical_pow n hn).symm ▸ zero_locus_radical I\n#align zero_locus_pow zero_locus_pow\n\n",
 "zero_locus_mul":
 "theorem zero_locus_mul (I J : Ideal R) : zero_locus ((I * J : Ideal R) : Set R) = zero_locus I ∪ zero_locus J :=\n  Set.ext fun x => x.2.mul_le\n#align zero_locus_mul zero_locus_mul\n\n",
 "zero_locus_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem zero_locus_inf (I J : Ideal R) : zero_locus ((«expr ⊓ » I J : Ideal R) : Set R) = zero_locus I ∪ zero_locus J :=\n  Set.ext fun x => x.2.inf_le\n#align zero_locus_inf zero_locus_inf\n\n",
 "zero_locus_empty_of_one_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem zero_locus_empty_of_one_mem {s : Set R} (h : (1 : R) ∈ s) : zero_locus s = ∅ :=\n  by\n  rw [Set.eq_empty_iff_forall_not_mem]\n  intro x hx\n  rw [mem_zero_locus] at hx\n  have x_prime : x.as_ideal.is_prime := by infer_instance\n  have eq_top : x.as_ideal = «expr⊤» := by\n    rw [Ideal.eq_top_iff_one]\n    exact hx h\n  apply x_prime.ne_top eq_top\n#align zero_locus_empty_of_one_mem zero_locus_empty_of_one_mem\n\n",
 "zero_locus_empty_iff_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem zero_locus_empty_iff_eq_top {I : Ideal R} : zero_locus (I : Set R) = ∅ ↔ I = «expr⊤» :=\n  by\n  constructor\n  · contrapose!\n    intro h\n    rcases Ideal.exists_le_maximal I h with ⟨M, hM, hIM⟩\n    exact Set.Nonempty.ne_empty ⟨⟨M, hM.is_prime⟩, hIM⟩\n  · rintro rfl\n    apply zero_locus_empty_of_one_mem\n    trivial\n#align zero_locus_empty_iff_eq_top zero_locus_empty_iff_eq_top\n\n",
 "zero_locus_empty":
 "@[simp]\ntheorem zero_locus_empty : zero_locus (∅ : Set R) = Set.univ :=\n  (gc_set R).l_bot\n#align zero_locus_empty zero_locus_empty\n\n",
 "zero_locus_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem zero_locus_bot : zero_locus ((«expr⊥» : Ideal R) : Set R) = Set.univ :=\n  (gc R).l_bot\n#align zero_locus_bot zero_locus_bot\n\n",
 "zero_locus_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem zero_locus_bUnion (s : Set (Set R)) :\n    zero_locus\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" s' : Set R) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (zero_locus s') :=\n  by simp only [zero_locus_Union]\n#align zero_locus_bUnion zero_locus_bUnion\n\n",
 "zero_locus_anti_mono_ideal":
 "theorem zero_locus_anti_mono_ideal {s t : Ideal R} (h : s ≤ t) : zero_locus (t : Set R) ⊆ zero_locus (s : Set R) :=\n  (gc R).monotone_l h\n#align zero_locus_anti_mono_ideal zero_locus_anti_mono_ideal\n\n",
 "zero_locus_anti_mono":
 "theorem zero_locus_anti_mono {s t : Set R} (h : s ⊆ t) : zero_locus t ⊆ zero_locus s :=\n  (gc_set R).monotone_l h\n#align zero_locus_anti_mono zero_locus_anti_mono\n\n",
 "zero_locus_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem zero_locus_Union {ι : Sort _} (s : ι → Set R) :\n    zero_locus («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (zero_locus (s i)) :=\n  (gc_set R).l_supr\n#align zero_locus_Union zero_locus_Union\n\n",
 "vanishing_ideal_zero_locus_eq_radical":
 "@[simp]\ntheorem vanishing_ideal_zero_locus_eq_radical (I : Ideal R) : vanishing_ideal (zero_locus (I : Set R)) = I.radical :=\n  Ideal.ext fun f => by\n    rw [mem_vanishing_ideal, Ideal.radical_eq_infₛ, Submodule.mem_infₛ]\n    exact ⟨fun h x hx => h ⟨x, hx.2⟩ hx.1, fun h x hx => h x.1 ⟨hx, x.2⟩⟩\n#align vanishing_ideal_zero_locus_eq_radical vanishing_ideal_zero_locus_eq_radical\n\n",
 "vanishing_ideal_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem vanishing_ideal_univ : vanishing_ideal (∅ : Set (prime_spectrum R)) = «expr⊤» := by simpa using (gc R).u_top\n#align vanishing_ideal_univ vanishing_ideal_univ\n\n",
 "vanishing_ideal_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem vanishing_ideal_union (t t' : Set (prime_spectrum R)) :\n    vanishing_ideal (t ∪ t') = «expr ⊓ » (vanishing_ideal t) (vanishing_ideal t') :=\n  (gc R).u_inf\n#align vanishing_ideal_union vanishing_ideal_union\n\n",
 "vanishing_ideal_strict_anti_mono_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊂ » -/\ntheorem vanishing_ideal_strict_anti_mono_iff {s t : Set (prime_spectrum R)} (hs : IsClosed s) (ht : IsClosed t) :\n    «expr ⊂ » s t ↔ vanishing_ideal t < vanishing_ideal s := by\n  rw [Set.ssubset_def, vanishing_ideal_anti_mono_iff hs, vanishing_ideal_anti_mono_iff ht, lt_iff_le_not_le]\n#align vanishing_ideal_strict_anti_mono_iff vanishing_ideal_strict_anti_mono_iff\n\n",
 "vanishing_ideal_singleton":
 "@[simp]\ntheorem vanishing_ideal_singleton (x : prime_spectrum R) :\n    vanishing_ideal ({x} : Set (prime_spectrum R)) = x.as_ideal := by simp [vanishing_ideal]\n#align vanishing_ideal_singleton vanishing_ideal_singleton\n\n",
 "vanishing_ideal_eq_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem vanishing_ideal_eq_top_iff {s : Set (prime_spectrum R)} : vanishing_ideal s = «expr⊤» ↔ s = ∅ := by\n  rw [← top_le_iff, ← subset_zero_locus_iff_le_vanishing_ideal, Submodule.top_coe, zero_locus_univ,\n    Set.subset_empty_iff]\n#align vanishing_ideal_eq_top_iff vanishing_ideal_eq_top_iff\n\n",
 "vanishing_ideal_closure":
 "theorem vanishing_ideal_closure (t : Set (prime_spectrum R)) : vanishing_ideal (closure t) = vanishing_ideal t :=\n  zero_locus_vanishing_ideal_eq_closure t ▸ (gc R).u_l_u_eq_u t\n#align vanishing_ideal_closure vanishing_ideal_closure\n\n",
 "vanishing_ideal_anti_mono_iff":
 "theorem vanishing_ideal_anti_mono_iff {s t : Set (prime_spectrum R)} (ht : IsClosed t) :\n    s ⊆ t ↔ vanishing_ideal t ≤ vanishing_ideal s :=\n  ⟨vanishing_ideal_anti_mono, fun h =>\n    by\n    rw [← ht.closure_subset_iff, ← ht.closure_eq]\n    convert← zero_locus_anti_mono_ideal h <;> apply zero_locus_vanishing_ideal_eq_closure⟩\n#align vanishing_ideal_anti_mono_iff vanishing_ideal_anti_mono_iff\n\n",
 "vanishing_ideal_anti_mono":
 "theorem vanishing_ideal_anti_mono {s t : Set (prime_spectrum R)} (h : s ⊆ t) : vanishing_ideal t ≤ vanishing_ideal s :=\n  (gc R).monotone_u h\n#align vanishing_ideal_anti_mono vanishing_ideal_anti_mono\n\n",
 "vanishing_ideal_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem vanishing_ideal_Union {ι : Sort _} (t : ι → Set (prime_spectrum R)) :\n    vanishing_ideal\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i)) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        (vanishing_ideal (t i)) :=\n  (gc R).u_infi\n#align vanishing_ideal_Union vanishing_ideal_Union\n\n",
 "union_zero_locus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem union_zero_locus (s s' : Set R) :\n    zero_locus s ∪ zero_locus s' = zero_locus («expr ⊓ » (Ideal.span s) (Ideal.span s') : Ideal R) :=\n  by\n  rw [zero_locus_inf]\n  simp\n#align union_zero_locus union_zero_locus\n\n",
 "t1_space_iff_is_field":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem t1_space_iff_is_field [IsDomain R] : T1Space (prime_spectrum R) ↔ IsField R :=\n  by\n  refine' ⟨_, fun h => _⟩\n  · intro h\n    have hbot : Ideal.IsPrime («expr⊥» : Ideal R) := Ideal.bot_prime\n    exact\n      Classical.not_not.1\n        (mt\n          (Ring.ne_bot_of_isMaximal_of_not_isField <|\n            (is_closed_singleton_iff_is_maximal _).1 (t1_space.t1 ⟨«expr⊥», hbot⟩))\n          (Classical.not_not.2 rfl))\n  · refine' ⟨fun x => (is_closed_singleton_iff_is_maximal x).2 _⟩\n    by_cases hx : x.as_ideal = «expr⊥»\n    · letI := h.to_field\n      exact hx.symm ▸ Ideal.bot_isMaximal\n    · exact absurd h (Ring.not_isField_iff_exists_prime.2 ⟨x.as_ideal, ⟨hx, x.2⟩⟩)\n#align t1_space_iff_is_field t1_space_iff_is_field\n\n",
 "sup_vanishing_ideal_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem sup_vanishing_ideal_le (t t' : Set (prime_spectrum R)) :\n    «expr ⊔ » (vanishing_ideal t) (vanishing_ideal t') ≤ vanishing_ideal (t ∩ t') :=\n  by\n  intro r\n  rw [Submodule.mem_sup, mem_vanishing_ideal]\n  rintro ⟨f, hf, g, hg, rfl⟩ x ⟨hxt, hxt'⟩\n  rw [mem_vanishing_ideal] at hf hg\n  apply Submodule.add_mem <;> solve_by_elim\n#align sup_vanishing_ideal_le sup_vanishing_ideal_le\n\n",
 "subset_zero_locus_vanishing_ideal":
 "theorem subset_zero_locus_vanishing_ideal (t : Set (prime_spectrum R)) : t ⊆ zero_locus (vanishing_ideal t) :=\n  (gc R).l_u_le t\n#align subset_zero_locus_vanishing_ideal subset_zero_locus_vanishing_ideal\n\n",
 "subset_zero_locus_iff_subset_vanishing_ideal":
 "theorem subset_zero_locus_iff_subset_vanishing_ideal (t : Set (prime_spectrum R)) (s : Set R) :\n    t ⊆ zero_locus s ↔ s ⊆ vanishing_ideal t :=\n  (gc_set R) s t\n#align subset_zero_locus_iff_subset_vanishing_ideal subset_zero_locus_iff_subset_vanishing_ideal\n\n",
 "subset_zero_locus_iff_le_vanishing_ideal":
 "theorem subset_zero_locus_iff_le_vanishing_ideal (t : Set (prime_spectrum R)) (I : Ideal R) :\n    t ⊆ zero_locus I ↔ I ≤ vanishing_ideal t :=\n  ⟨fun h f k => (mem_vanishing_ideal _ _).mpr fun x j => (mem_zero_locus _ _).mpr (h j) k, fun h => fun x j =>\n    (mem_zero_locus _ _).mpr (le_trans h fun f h => ((mem_vanishing_ideal _ _).mp h) x j)⟩\n#align subset_zero_locus_iff_le_vanishing_ideal subset_zero_locus_iff_le_vanishing_ideal\n\n",
 "subset_vanishing_ideal_zero_locus":
 "theorem subset_vanishing_ideal_zero_locus (s : Set R) : s ⊆ vanishing_ideal (zero_locus s) :=\n  (gc_set R).le_u_l s\n#align subset_vanishing_ideal_zero_locus subset_vanishing_ideal_zero_locus\n\n",
 "specializes_closed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⤳ » -/\ntheorem specializes_closed_point (x : prime_spectrum R) : «expr ⤳ » x (closed_point R) :=\n  (prime_spectrum.le_iff_specializes _ _).mp (local_ring.le_maximal_ideal x.2.1)\n#align specializes_closed_point specializes_closed_point\n\n",
 "range_comap_of_surjective":
 "theorem range_comap_of_surjective (hf : surjective f) : Set.range (comap f) = zero_locus (ker f) :=\n  by\n  rw [← Set.image_univ]\n  convert image_comap_zero_locus_eq_zero_locus_comap _ _ hf _\n  rw [zero_locus_bot]\n#align range_comap_of_surjective range_comap_of_surjective\n\n",
 "prime_spectrum_prod_symm_inr_as_ideal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem prime_spectrum_prod_symm_inr_as_ideal (x : prime_spectrum S) :\n    ((prime_spectrum_prod R S).symm <| Sum.inr x).as_ideal = Ideal.prod («expr⊤») x.as_ideal :=\n  by\n  cases x\n  rfl\n#align prime_spectrum_prod_symm_inr_as_ideal prime_spectrum_prod_symm_inr_as_ideal\n\n",
 "prime_spectrum_prod_symm_inl_as_ideal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem prime_spectrum_prod_symm_inl_as_ideal (x : prime_spectrum R) :\n    ((prime_spectrum_prod R S).symm <| Sum.inl x).as_ideal = Ideal.prod x.as_ideal («expr⊤») :=\n  by\n  cases x\n  rfl\n#align prime_spectrum_prod_symm_inl_as_ideal prime_spectrum_prod_symm_inl_as_ideal\n\n",
 "preimage_comap_zero_locus_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem preimage_comap_zero_locus_aux (f : «expr →+* » R S) (s : Set R) :\n    «expr ⁻¹' » (fun y => ⟨Ideal.comap f y.as_ideal, inferInstance⟩ : prime_spectrum S → prime_spectrum R)\n        (zero_locus s) =\n      zero_locus («expr '' » f s) :=\n  by\n  ext x\n  simp only [mem_zero_locus, Set.image_subset_iff]\n  rfl\n#align preimage_comap_zero_locus_aux preimage_comap_zero_locus_aux\n\n",
 "preimage_comap_zero_locus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem preimage_comap_zero_locus (s : Set R) : «expr ⁻¹' » (comap f) (zero_locus s) = zero_locus («expr '' » f s) :=\n  preimage_comap_zero_locus_aux f s\n#align preimage_comap_zero_locus preimage_comap_zero_locus\n\n",
 "mem_zero_locus":
 "@[simp]\ntheorem mem_zero_locus (x : prime_spectrum R) (s : Set R) : x ∈ zero_locus s ↔ s ⊆ x.as_ideal :=\n  iff.rfl\n#align mem_zero_locus mem_zero_locus\n\n",
 "mem_vanishing_ideal":
 "theorem mem_vanishing_ideal (t : Set (prime_spectrum R)) (f : R) :\n    f ∈ vanishing_ideal t ↔ ∀ x : prime_spectrum R, x ∈ t → f ∈ x.as_ideal := by\n  rw [← SetLike.mem_coe, coe_vanishing_ideal, Set.mem_setOf_eq]\n#align mem_vanishing_ideal mem_vanishing_ideal\n\n",
 "mem_compl_zero_locus_iff_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem mem_compl_zero_locus_iff_not_mem {f : R} {I : prime_spectrum R} :\n    I ∈ «expr ᶜ» (zero_locus {f} : Set (prime_spectrum R)) ↔ f ∉ I.as_ideal := by\n  rw [Set.mem_compl_iff, mem_zero_locus, Set.singleton_subset_iff] <;> rfl\n#align mem_compl_zero_locus_iff_not_mem mem_compl_zero_locus_iff_not_mem\n\n",
 "mem_basic_open":
 "@[simp]\ntheorem mem_basic_open (f : R) (x : prime_spectrum R) : x ∈ basic_open f ↔ f ∉ x.as_ideal :=\n  iff.rfl\n#align mem_basic_open mem_basic_open\n\n",
 "localization_comap_range":
 "theorem localization_comap_range [Algebra R S] (M : Submonoid R) [IsLocalization M S] :\n    Set.range (comap (algebraMap R S)) = { p | Disjoint (M : Set R) p.as_ideal } :=\n  by\n  ext x\n  constructor\n  · simp_rw [disjoint_iff_inf_le]\n    rintro ⟨p, rfl⟩ x ⟨hx₁, hx₂⟩\n    exact (p.2.1 : ¬_) (p.as_ideal.eq_top_of_is_unit_mem hx₂ (is_localization.map_units S ⟨x, hx₁⟩))\n  · intro h\n    use ⟨x.as_ideal.map (algebraMap R S), IsLocalization.isPrime_of_isPrime_disjoint M S _ x.2 h⟩\n    ext1\n    exact IsLocalization.comap_map_of_isPrime_disjoint M S _ x.2 h\n#align localization_comap_range localization_comap_range\n\n",
 "localization_comap_injective":
 "theorem localization_comap_injective [Algebra R S] (M : Submonoid R) [IsLocalization M S] :\n    function.injective (comap (algebraMap R S)) := by\n  intro p q h\n  replace h := congr_arg (fun x : prime_spectrum R => Ideal.map (algebraMap R S) x.as_ideal) h\n  dsimp only at h\n  erw [IsLocalization.map_comap M S, IsLocalization.map_comap M S] at h\n  ext1\n  exact h\n#align localization_comap_injective localization_comap_injective\n\n",
 "localization_comap_inducing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem localization_comap_inducing [Algebra R S] (M : Submonoid R) [IsLocalization M S] :\n    Inducing (comap (algebraMap R S)) := by\n  constructor\n  rw [topologicalSpace_eq_iff]\n  intro U\n  simp_rw [← isClosed_compl_iff]\n  generalize «expr ᶜ» U = Z\n  simp_rw [isClosed_induced_iff, is_closed_iff_zero_locus]\n  constructor\n  · rintro ⟨s, rfl⟩\n    refine' ⟨_, ⟨«expr ⁻¹' » (algebraMap R S) (Ideal.span s), rfl⟩, _⟩\n    rw [preimage_comap_zero_locus, ← zero_locus_span, ← zero_locus_span s]\n    congr 1\n    exact congr_arg submodule.carrier (IsLocalization.map_comap M S (Ideal.span s))\n  · rintro ⟨_, ⟨t, rfl⟩, rfl⟩\n    simp\n#align localization_comap_inducing localization_comap_inducing\n\n",
 "localization_comap_embedding":
 "theorem localization_comap_embedding [Algebra R S] (M : Submonoid R) [IsLocalization M S] :\n    Embedding (comap (algebraMap R S)) :=\n  ⟨localization_comap_inducing S M, localization_comap_injective S M⟩\n#align localization_comap_embedding localization_comap_embedding\n\n",
 "localization_away_open_embedding":
 "theorem localization_away_open_embedding (S : Type v) [CommRing S] [Algebra R S] (r : R) [is_localization.away r S] :\n    OpenEmbedding (comap (algebraMap R S)) :=\n  { to_embedding := localization_comap_embedding S (Submonoid.powers r)\n    open_range := by\n      rw [localization_away_comap_range S r]\n      exact is_open_basic_open }\n#align localization_away_open_embedding localization_away_open_embedding\n\n",
 "localization_away_comap_range":
 "theorem localization_away_comap_range (S : Type v) [CommRing S] [Algebra R S] (r : R) [is_localization.away r S] :\n    Set.range (comap (algebraMap R S)) = basic_open r :=\n  by\n  rw [localization_comap_range S (Submonoid.powers r)]\n  ext\n  simp only [mem_zero_locus, basic_open_eq_zero_locus_compl, SetLike.mem_coe, Set.mem_setOf_eq,\n    Set.singleton_subset_iff, Set.mem_compl_iff, disjoint_iff_inf_le]\n  constructor\n  · intro h₁ h₂\n    exact h₁ ⟨Submonoid.mem_powers r, h₂⟩\n  · rintro h₁ _ ⟨⟨n, rfl⟩, h₃⟩\n    exact h₁ (x.2.mem_of_pow_mem _ h₃)\n#align localization_away_comap_range localization_away_comap_range\n\n",
 "le_vanishing_ideal_zero_locus":
 "theorem le_vanishing_ideal_zero_locus (I : Ideal R) : I ≤ vanishing_ideal (zero_locus I) :=\n  (gc R).le_u_l I\n#align le_vanishing_ideal_zero_locus le_vanishing_ideal_zero_locus\n\n",
 "le_iff_specializes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⤳ » -/\ntheorem le_iff_specializes (x y : prime_spectrum R) : x ≤ y ↔ «expr ⤳ » x y :=\n  (le_iff_mem_closure x y).trans specializes_iff_mem_closure.symm\n#align le_iff_specializes le_iff_specializes\n\n",
 "le_iff_mem_closure":
 "theorem le_iff_mem_closure (x y : prime_spectrum R) : x ≤ y ↔ y ∈ closure ({x} : Set (prime_spectrum R)) := by\n  rw [← as_ideal_le_as_ideal, ← zero_locus_vanishing_ideal_eq_closure, mem_zero_locus, vanishing_ideal_singleton,\n    SetLike.coe_subset_coe]\n#align le_iff_mem_closure le_iff_mem_closure\n\n",
 "is_topological_basis_basic_opens":
 "theorem is_topological_basis_basic_opens :\n    TopologicalSpace.IsTopologicalBasis (Set.range fun r : R => (basic_open r : Set (prime_spectrum R))) :=\n  by\n  apply TopologicalSpace.isTopologicalBasis_of_open_of_nhds\n  · rintro _ ⟨r, rfl⟩\n    exact is_open_basic_open\n  · rintro p U hp ⟨s, hs⟩\n    rw [← compl_compl U, Set.mem_compl_iff, ← hs, mem_zero_locus, Set.not_subset] at hp\n    obtain ⟨f, hfs, hfp⟩ := hp\n    refine' ⟨basic_open f, ⟨f, rfl⟩, hfp, _⟩\n    rw [← Set.compl_subset_compl, ← hs, basic_open_eq_zero_locus_compl, compl_compl]\n    exact zero_locus_anti_mono (set.singleton_subset_iff.mpr hfs)\n#align is_topological_basis_basic_opens is_topological_basis_basic_opens\n\n",
 "is_radical_vanishing_ideal":
 "theorem is_radical_vanishing_ideal (s : Set (prime_spectrum R)) : (vanishing_ideal s).is_radical :=\n  by\n  rw [← vanishing_ideal_closure, ← zero_locus_vanishing_ideal_eq_closure, vanishing_ideal_zero_locus_eq_radical]\n  apply Ideal.radical_isRadical\n#align is_radical_vanishing_ideal is_radical_vanishing_ideal\n\n",
 "is_open_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_open_iff (U : Set (prime_spectrum R)) : IsOpen U ↔ ∃ s, «expr ᶜ» U = zero_locus s := by\n  simp only [@eq_comm _ («expr ᶜ» U)] <;> rfl\n#align is_open_iff is_open_iff\n\n",
 "is_open_basic_open":
 "theorem is_open_basic_open {a : R} : IsOpen (basic_open a : Set (prime_spectrum R)) :=\n  (basic_open a).is_open\n#align is_open_basic_open is_open_basic_open\n\n",
 "is_local_ring_hom_iff_comap_closed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem is_local_ring_hom_iff_comap_closed_point {S : Type v} [CommRing S] [local_ring S] (f : «expr →+* » R S) :\n    is_local_ring_hom f ↔ prime_spectrum.comap f (closed_point S) = closed_point R :=\n  by\n  rw [(local_hom_tfae f).out 0 4, prime_spectrum.ext_iff]\n  rfl\n#align is_local_ring_hom_iff_comap_closed_point is_local_ring_hom_iff_comap_closed_point\n\n",
 "is_irreducible_zero_locus_iff_of_radical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprZ( )» -/\ntheorem is_irreducible_zero_locus_iff_of_radical (I : Ideal R) (hI : I.is_radical) :\n    IsIrreducible (zero_locus (I : Set R)) ↔ I.is_prime :=\n  by\n  rw [Ideal.isPrime_iff, IsIrreducible]\n  apply and_congr\n  · rw [Set.nonempty_iff_ne_empty, ne.def, zero_locus_empty_iff_eq_top]\n  · trans\n      ∀ x y : Ideal R,\n        «exprZ( )» I ⊆ «exprZ( )» x ∪ «exprZ( )» y → «exprZ( )» I ⊆ «exprZ( )» x ∨ «exprZ( )» I ⊆ «exprZ( )» y\n    · simp_rw [isPreirreducible_iff_closed_union_closed, is_closed_iff_zero_locus_ideal]\n      constructor\n      · rintro h x y\n        exact h _ _ ⟨x, rfl⟩ ⟨y, rfl⟩\n      · rintro h _ _ ⟨x, rfl⟩ ⟨y, rfl⟩\n        exact h x y\n    · simp_rw [← zero_locus_inf, subset_zero_locus_iff_le_vanishing_ideal, vanishing_ideal_zero_locus_eq_radical,\n        hI.radical]\n      constructor\n      · simp_rw [← SetLike.mem_coe, ← Set.singleton_subset_iff, ← Ideal.span_le, ←\n          Ideal.span_singleton_mul_span_singleton]\n        refine' fun h x y h' => h _ _ _\n        rw [← hI.radical_le_iff] at h'⊢\n        simpa only [Ideal.radical_inf, Ideal.radical_mul] using h'\n      · simp_rw [or_iff_not_imp_left, SetLike.not_le_iff_exists]\n        rintro h s t h' ⟨x, hx, hx'⟩ y hy\n        exact h (h' ⟨Ideal.mul_mem_right _ _ hx, Ideal.mul_mem_left _ _ hy⟩) hx'\n#align is_irreducible_zero_locus_iff_of_radical is_irreducible_zero_locus_iff_of_radical\n\n",
 "is_irreducible_zero_locus_iff":
 "theorem is_irreducible_zero_locus_iff (I : Ideal R) : IsIrreducible (zero_locus (I : Set R)) ↔ I.radical.is_prime :=\n  zero_locus_radical I ▸ is_irreducible_zero_locus_iff_of_radical _ I.radical_is_radical\n#align is_irreducible_zero_locus_iff is_irreducible_zero_locus_iff\n\n",
 "is_irreducible_iff_vanishing_ideal_is_prime":
 "theorem is_irreducible_iff_vanishing_ideal_is_prime {s : Set (prime_spectrum R)} :\n    IsIrreducible s ↔ (vanishing_ideal s).is_prime := by\n  rw [← isIrreducible_iff_closure, ← zero_locus_vanishing_ideal_eq_closure,\n    is_irreducible_zero_locus_iff_of_radical _ (is_radical_vanishing_ideal s)]\n#align is_irreducible_iff_vanishing_ideal_is_prime is_irreducible_iff_vanishing_ideal_is_prime\n\n",
 "is_compact_basic_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_compact_basic_open (f : R) : IsCompact (basic_open f : Set (prime_spectrum R)) :=\n  isCompact_of_finite_subfamily_closed fun ι Z hZc hZ =>\n    by\n    let I : ι → Ideal R := fun i => vanishing_ideal (Z i)\n    have hI : ∀ i, Z i = zero_locus (I i) := fun i => by\n      simpa only [zero_locus_vanishing_ideal_eq_closure] using (hZc i).closure_eq.symm\n    rw [basic_open_eq_zero_locus_compl f, Set.inter_comm, ← Set.diff_eq, Set.diff_eq_empty, funext hI, ←\n      zero_locus_supr] at hZ\n    obtain ⟨n, hn⟩ :\n      f ∈\n        («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n            (I i)).radical :=\n      by\n      rw [← vanishing_ideal_zero_locus_eq_radical]\n      apply vanishing_ideal_anti_mono hZ\n      exact subset_vanishing_ideal_zero_locus {f} (Set.mem_singleton f)\n    rcases Submodule.exists_finset_of_mem_supᵢ I hn with ⟨s, hs⟩\n    use s\n    -- Using simp_rw here, because `hI` and `zero_locus_supr` need to be applied underneath binders\n    simp_rw [basic_open_eq_zero_locus_compl f, Set.inter_comm («expr ᶜ» (zero_locus {f})), ← Set.diff_eq,\n      Set.diff_eq_empty, hI, ← zero_locus_supr]\n    rw [← zero_locus_radical]\n    -- this one can't be in `simp_rw` because it would loop\n    apply zero_locus_anti_mono\n    rw [Set.singleton_subset_iff]\n    exact ⟨n, hs⟩\n#align is_compact_basic_open is_compact_basic_open\n\n",
 "is_closed_zero_locus":
 "theorem is_closed_zero_locus (s : Set R) : IsClosed (zero_locus s) :=\n  by\n  rw [is_closed_iff_zero_locus]\n  exact ⟨s, rfl⟩\n#align is_closed_zero_locus is_closed_zero_locus\n\n",
 "is_closed_singleton_iff_is_maximal":
 "theorem is_closed_singleton_iff_is_maximal (x : prime_spectrum R) :\n    IsClosed ({x} : Set (prime_spectrum R)) ↔ x.as_ideal.is_maximal :=\n  by\n  refine' (is_closed_iff_zero_locus _).trans ⟨fun h => _, fun h => _⟩\n  · obtain ⟨s, hs⟩ := h\n    rw [eq_comm, Set.eq_singleton_iff_unique_mem] at hs\n    refine'\n      ⟨⟨x.2.1, fun I hI =>\n          Classical.not_not.1 (mt (Ideal.exists_le_maximal I) <| not_exists.2 fun J => not_and.2 fun hJ hIJ => _)⟩⟩\n    exact\n      ne_of_lt (lt_of_lt_of_le hI hIJ)\n        (symm <| congr_arg prime_spectrum.as_ideal (hs.2 ⟨J, hJ.is_prime⟩ fun r hr => hIJ (le_of_lt hI <| hs.1 hr)))\n  · refine' ⟨x.as_ideal.1, _⟩\n    rw [eq_comm, Set.eq_singleton_iff_unique_mem]\n    refine' ⟨fun _ h => h, fun y hy => prime_spectrum.ext _ _ (h.eq_of_le y.2.ne_top hy).symm⟩\n#align is_closed_singleton_iff_is_maximal is_closed_singleton_iff_is_maximal\n\n",
 "is_closed_range_comap_of_surjective":
 "theorem is_closed_range_comap_of_surjective (hf : surjective f) : IsClosed (Set.range (comap f)) :=\n  by\n  rw [range_comap_of_surjective _ f hf]\n  exact is_closed_zero_locus ↑(ker f)\n#align is_closed_range_comap_of_surjective is_closed_range_comap_of_surjective\n\n",
 "is_closed_iff_zero_locus_radical_ideal":
 "theorem is_closed_iff_zero_locus_radical_ideal (Z : Set (prime_spectrum R)) :\n    IsClosed Z ↔ ∃ I : Ideal R, I.is_radical ∧ Z = zero_locus I :=\n  (is_closed_iff_zero_locus_ideal _).trans\n    ⟨fun ⟨I, hI⟩ => ⟨_, I.radical_is_radical, (zero_locus_radical I).substr hI⟩, fun ⟨I, _, hI⟩ => ⟨I, hI⟩⟩\n#align is_closed_iff_zero_locus_radical_ideal is_closed_iff_zero_locus_radical_ideal\n\n",
 "is_closed_iff_zero_locus_ideal":
 "theorem is_closed_iff_zero_locus_ideal (Z : Set (prime_spectrum R)) : IsClosed Z ↔ ∃ I : Ideal R, Z = zero_locus I :=\n  (is_closed_iff_zero_locus _).trans ⟨fun ⟨s, hs⟩ => ⟨_, (zero_locus_span s).substr hs⟩, fun ⟨I, hI⟩ => ⟨I, hI⟩⟩\n#align is_closed_iff_zero_locus_ideal is_closed_iff_zero_locus_ideal\n\n",
 "is_closed_iff_zero_locus":
 "theorem is_closed_iff_zero_locus (Z : Set (prime_spectrum R)) : IsClosed Z ↔ ∃ s, Z = zero_locus s := by\n  rw [← isOpen_compl_iff, is_open_iff, compl_compl]\n#align is_closed_iff_zero_locus is_closed_iff_zero_locus\n\n",
 "is_basis_basic_opens":
 "theorem is_basis_basic_opens : TopologicalSpace.Opens.IsBasis (Set.range (@basic_open R _)) :=\n  by\n  unfold TopologicalSpace.Opens.IsBasis\n  convert is_topological_basis_basic_opens\n  rw [← Set.range_comp]\n#align is_basis_basic_opens is_basis_basic_opens\n\n",
 "image_comap_zero_locus_eq_zero_locus_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_comap_zero_locus_eq_zero_locus_comap (hf : surjective f) (I : Ideal S) :\n    «expr '' » (comap f) (zero_locus I) = zero_locus (I.comap f) :=\n  by\n  simp only [Set.ext_iff, Set.mem_image, mem_zero_locus, SetLike.coe_subset_coe]\n  refine' fun p => ⟨_, fun h_I_p => _⟩\n  · rintro ⟨p, hp, rfl⟩ a ha\n    exact hp ha\n  · have hp : ker f ≤ p.as_ideal := (Ideal.comap_mono bot_le).trans h_I_p\n    refine' ⟨⟨p.as_ideal.map f, Ideal.map_isPrime_of_surjective hf hp⟩, fun x hx => _, _⟩\n    · obtain ⟨x', rfl⟩ := hf x\n      exact Ideal.mem_map_of_mem f (h_I_p hx)\n    · ext x\n      change f x ∈ p.as_ideal.map f ↔ _\n      rw [Ideal.mem_map_iff_of_surjective f hf]\n      refine' ⟨_, fun hx => ⟨x, hx, rfl⟩⟩\n      rintro ⟨x', hx', heq⟩\n      rw [← sub_sub_cancel x' x]\n      refine' p.as_ideal.sub_mem hx' (hp _)\n      rwa [mem_ker, map_sub, sub_eq_zero]\n#align image_comap_zero_locus_eq_zero_locus_comap image_comap_zero_locus_eq_zero_locus_comap\n\n",
 "gc_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/-- `zero_locus` and `vanishing_ideal` form a galois connection. -/\ntheorem gc_set :\n    @GaloisConnection (Set R) («expr ᵒᵈ» (Set (prime_spectrum R))) _ _ (fun s => zero_locus s) fun t =>\n      vanishing_ideal t :=\n  by\n  have ideal_gc : GaloisConnection Ideal.span coe := (Submodule.gi R R).gc\n  simpa [zero_locus_span, Function.comp] using ideal_gc.compose (gc R)\n#align gc_set gc_set\n\n",
 "gc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/-- `zero_locus` and `vanishing_ideal` form a galois connection. -/\ntheorem gc :\n    @GaloisConnection (Ideal R) («expr ᵒᵈ» (Set (prime_spectrum R))) _ _ (fun I => zero_locus I) fun t =>\n      vanishing_ideal t :=\n  fun I t => subset_zero_locus_iff_le_vanishing_ideal t I\n#align gc gc\n\n",
 "comap_singleton_is_closed_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_singleton_is_closed_of_surjective (f : «expr →+* » R S) (hf : function.surjective f)\n    (x : prime_spectrum S) (hx : IsClosed ({x} : Set (prime_spectrum S))) :\n    IsClosed ({comap f x} : Set (prime_spectrum R)) :=\n  haveI : x.as_ideal.is_maximal := (is_closed_singleton_iff_is_maximal x).1 hx\n  (is_closed_singleton_iff_is_maximal _).2 (Ideal.comap_isMaximal_of_surjective f hf)\n#align comap_singleton_is_closed_of_surjective comap_singleton_is_closed_of_surjective\n\n",
 "comap_singleton_is_closed_of_is_integral":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_singleton_is_closed_of_is_integral (f : «expr →+* » R S) (hf : f.is_integral) (x : prime_spectrum S)\n    (hx : IsClosed ({x} : Set (prime_spectrum S))) : IsClosed ({comap f x} : Set (prime_spectrum R)) :=\n  (is_closed_singleton_iff_is_maximal _).2\n    (ideal.is_maximal_comap_of_is_integral_of_is_maximal' f hf x.as_ideal <|\n      (is_closed_singleton_iff_is_maximal x).1 hx)\n#align comap_singleton_is_closed_of_is_integral comap_singleton_is_closed_of_is_integral\n\n",
 "comap_residue":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem _root_.prime_spectrum.comap_residue (x : prime_spectrum (residue_field R)) :\n    prime_spectrum.comap (residue R) x = closed_point R :=\n  by\n  rw [subsingleton.elim x («expr⊥»)]\n  ext1\n  exact Ideal.mk_ker\n#align prime_spectrum.comap_residue prime_spectrum.comap_residue\n\n",
 "comap_injective_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_injective_of_surjective (f : «expr →+* » R S) (hf : function.surjective f) :\n    function.injective (comap f) := fun x y h =>\n  prime_spectrum.ext _ _\n    (Ideal.comap_injective_of_surjective f hf\n      (congr_arg prime_spectrum.as_ideal h : (comap f x).as_ideal = (comap f y).as_ideal))\n#align comap_injective_of_surjective comap_injective_of_surjective\n\n",
 "comap_inducing_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem comap_inducing_of_surjective (hf : surjective f) : Inducing (comap f) :=\n  {\n    induced :=\n      by\n      simp_rw [topologicalSpace_eq_iff, ← isClosed_compl_iff, isClosed_induced_iff, is_closed_iff_zero_locus]\n      refine' fun s =>\n        ⟨fun ⟨F, hF⟩ =>\n          ⟨zero_locus («expr ⁻¹' » f F), ⟨«expr ⁻¹' » f F, rfl⟩, by\n            rw [preimage_comap_zero_locus, surjective.image_preimage hf, hF]⟩,\n          _⟩\n      rintro ⟨-, ⟨F, rfl⟩, hF⟩\n      exact ⟨«expr '' » f F, hF.symm.trans (preimage_comap_zero_locus f F)⟩ }\n#align comap_inducing_of_surjective comap_inducing_of_surjective\n\n",
 "comap_id":
 "@[simp]\ntheorem comap_id : comap (RingHom.id R) = ContinuousMap.id _ :=\n  by\n  ext\n  rfl\n#align comap_id comap_id\n\n",
 "comap_comp_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem comap_comp_apply (f : «expr →+* » R S) (g : «expr →+* » S S') (x : prime_spectrum S') :\n    prime_spectrum.comap (g.comp f) x = (prime_spectrum.comap f) (prime_spectrum.comap g x) :=\n  rfl\n#align comap_comp_apply comap_comp_apply\n\n",
 "comap_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem comap_comp (f : «expr →+* » R S) (g : «expr →+* » S S') : comap (g.comp f) = (comap f).comp (comap g) :=\n  rfl\n#align comap_comp comap_comp\n\n",
 "comap_closed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem comap_closed_point {S : Type v} [CommRing S] [local_ring S] (f : «expr →+* » R S) [is_local_ring_hom f] :\n    prime_spectrum.comap f (closed_point S) = closed_point R :=\n  (is_local_ring_hom_iff_comap_closed_point f).mp inferInstance\n#align comap_closed_point comap_closed_point\n\n",
 "comap_as_ideal":
 "@[simp]\ntheorem comap_as_ideal (y : prime_spectrum S) : (comap f y).as_ideal = Ideal.comap f y.as_ideal :=\n  rfl\n#align comap_as_ideal comap_as_ideal\n\n",
 "coe_vanishing_ideal":
 "theorem coe_vanishing_ideal (t : Set (prime_spectrum R)) :\n    (vanishing_ideal t : Set R) = { f : R | ∀ x : prime_spectrum R, x ∈ t → f ∈ x.as_ideal } :=\n  by\n  ext f\n  rw [vanishing_ideal, SetLike.mem_coe, Submodule.mem_infᵢ]\n  apply forall_congr'; intro x\n  rw [Submodule.mem_infᵢ]\n#align coe_vanishing_ideal coe_vanishing_ideal\n\n",
 "closure_singleton":
 "#print closure_singleton /-\ntheorem closure_singleton (x) : closure ({x} : Set (prime_spectrum R)) = zero_locus x.as_ideal := by\n  rw [← zero_locus_vanishing_ideal_eq_closure, vanishing_ideal_singleton]\n#align closure_singleton closure_singleton\n-/\n\n",
 "closed_point_mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem closed_point_mem_iff (U : TopologicalSpace.Opens <| prime_spectrum R) : closed_point R ∈ U ↔ U = «expr⊤» :=\n  by\n  constructor\n  · rw [eq_top_iff]\n    exact fun h x _ => (specializes_closed_point x).mem_open U.2 h\n  · rintro rfl\n    trivial\n#align closed_point_mem_iff closed_point_mem_iff\n\n",
 "closed_embedding_comap_of_surjective":
 "theorem closed_embedding_comap_of_surjective (hf : surjective f) : ClosedEmbedding (comap f) :=\n  { induced := (comap_inducing_of_surjective S f hf).induced\n    inj := comap_injective_of_surjective f hf\n    closed_range := is_closed_range_comap_of_surjective S f hf }\n#align closed_embedding_comap_of_surjective closed_embedding_comap_of_surjective\n\n",
 "basic_open_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem basic_open_zero : basic_open (0 : R) = «expr⊥» :=\n  TopologicalSpace.Opens.ext <| by simp\n#align basic_open_zero basic_open_zero\n\n",
 "basic_open_pow":
 "@[simp]\ntheorem basic_open_pow (f : R) (n : ℕ) (hn : 0 < n) : basic_open (f ^ n) = basic_open f :=\n  TopologicalSpace.Opens.ext <| by simpa using zero_locus_singleton_pow f n hn\n#align basic_open_pow basic_open_pow\n\n",
 "basic_open_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem basic_open_one : basic_open (1 : R) = «expr⊤» :=\n  TopologicalSpace.Opens.ext <| by simp\n#align basic_open_one basic_open_one\n\n",
 "basic_open_mul_le_right":
 "theorem basic_open_mul_le_right (f g : R) : basic_open (f * g) ≤ basic_open g :=\n  by\n  rw [basic_open_mul f g]\n  exact inf_le_right\n#align basic_open_mul_le_right basic_open_mul_le_right\n\n",
 "basic_open_mul_le_left":
 "theorem basic_open_mul_le_left (f g : R) : basic_open (f * g) ≤ basic_open f :=\n  by\n  rw [basic_open_mul f g]\n  exact inf_le_left\n#align basic_open_mul_le_left basic_open_mul_le_left\n\n",
 "basic_open_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem basic_open_mul (f g : R) : basic_open (f * g) = «expr ⊓ » (basic_open f) (basic_open g) :=\n  TopologicalSpace.Opens.ext <| by simp [zero_locus_singleton_mul]\n#align basic_open_mul basic_open_mul\n\n",
 "basic_open_le_basic_open_iff":
 "theorem basic_open_le_basic_open_iff (f g : R) : basic_open f ≤ basic_open g ↔ f ∈ (Ideal.span ({g} : Set R)).radical :=\n  by\n  rw [← SetLike.coe_subset_coe, basic_open_eq_zero_locus_compl, basic_open_eq_zero_locus_compl, Set.compl_subset_compl,\n    zero_locus_subset_zero_locus_singleton_iff]\n#align basic_open_le_basic_open_iff basic_open_le_basic_open_iff\n\n",
 "basic_open_eq_zero_locus_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem basic_open_eq_zero_locus_compl (r : R) : (basic_open r : Set (prime_spectrum R)) = «expr ᶜ» (zero_locus {r}) :=\n  Set.ext fun x => by simpa only [Set.mem_compl_iff, mem_zero_locus, Set.singleton_subset_iff]\n#align basic_open_eq_zero_locus_compl basic_open_eq_zero_locus_compl\n\n",
 "basic_open_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem basic_open_eq_bot_iff (f : R) : basic_open f = «expr⊥» ↔ IsNilpotent f :=\n  by\n  rw [← TopologicalSpace.Opens.coe_inj, basic_open_eq_zero_locus_compl]\n  simp only [Set.eq_univ_iff_forall, Set.singleton_subset_iff, TopologicalSpace.Opens.coe_bot, nilpotent_iff_mem_prime,\n    Set.compl_empty_iff, mem_zero_locus, SetLike.mem_coe]\n  exact ⟨fun h I hI => h ⟨I, hI⟩, fun h ⟨I, hI⟩ => h I hI⟩\n#align basic_open_eq_bot_iff basic_open_eq_bot_iff\n\n",
 "as_ideal_lt_as_ideal":
 "@[simp]\ntheorem as_ideal_lt_as_ideal (x y : prime_spectrum R) : x.as_ideal < y.as_ideal ↔ x < y :=\n  iff.rfl\n#align as_ideal_lt_as_ideal as_ideal_lt_as_ideal\n\n",
 "as_ideal_le_as_ideal":
 "@[simp]\ntheorem as_ideal_le_as_ideal (x y : prime_spectrum R) : x.as_ideal ≤ y.as_ideal ↔ x ≤ y :=\n  iff.rfl\n#align as_ideal_le_as_ideal as_ideal_le_as_ideal\n\n",
 "PUnit":
 "#print PUnit /-\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n/-- The prime spectrum of the zero ring is empty. -/\ntheorem PUnit (x : prime_spectrum PUnit) : False :=\n  x.1.ne_top_iff_one.1 x.2.1 <| subsingleton.elim (0 : PUnit) 1 ▸ x.1.zero_mem\n#align punit PUnit\n-/\n\n"}