{"open_cover_tfae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∣_ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∣_ » -/\ntheorem is_open_immersion.open_cover_tfae {X Y : Scheme.{u}} (f : «expr ⟶ » X Y) :\n    TFAE\n      [is_open_immersion f,\n        ∃ 𝒰 : Scheme.open_cover.{u} Y,\n          ∀ i : 𝒰.J, is_open_immersion (pullback.snd : «expr ⟶ » ((𝒰.pullback_cover f).obj i) (𝒰.obj i)),\n        ∀ (𝒰 : Scheme.open_cover.{u} Y) (i : 𝒰.J),\n          is_open_immersion (pullback.snd : «expr ⟶ » ((𝒰.pullback_cover f).obj i) (𝒰.obj i)),\n        ∀ U : opens Y.carrier, is_open_immersion («expr ∣_ » f U),\n        ∀ {U : Scheme} (g : «expr ⟶ » U Y) [is_open_immersion g],\n          is_open_immersion (pullback.snd : «expr ⟶ » (pullback f g) _),\n        ∃ (ι : Type u)(U : ι → opens Y.carrier)(hU : supᵢ U = «expr⊤»), ∀ i, is_open_immersion («expr ∣_ » f (U i))] :=\n  is_open_immersion_is_local_at_target.open_cover_tfae f\n#align is_open_immersion.open_cover_tfae is_open_immersion.open_cover_tfae\n\n",
 "open_cover_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_open_immersion.open_cover_iff {X Y : Scheme.{u}} (𝒰 : Scheme.open_cover.{u} Y) (f : «expr ⟶ » X Y) :\n    is_open_immersion f ↔ ∀ i, is_open_immersion (pullback.snd : «expr ⟶ » (pullback f (𝒰.map i)) _) :=\n  is_open_immersion_is_local_at_target.open_cover_iff f 𝒰\n#align is_open_immersion.open_cover_iff is_open_immersion.open_cover_iff\n\n",
 "is_open_immersion_stable_under_composition":
 "theorem is_open_immersion_stable_under_composition : morphism_property.stable_under_composition @is_open_immersion := by\n  intro X Y Z f g h₁ h₂; infer_instance\n#align is_open_immersion_stable_under_composition is_open_immersion_stable_under_composition\n\n",
 "is_open_immersion_stable_under_base_change":
 "theorem is_open_immersion_stable_under_base_change : morphism_property.stable_under_base_change @is_open_immersion :=\n  morphism_property.stable_under_base_change.mk is_open_immersion_respects_iso <|\n    by\n    intro X Y Z f g H\n    infer_instance\n#align is_open_immersion_stable_under_base_change is_open_immersion_stable_under_base_change\n\n",
 "is_open_immersion_respects_iso":
 "theorem is_open_immersion_respects_iso : morphism_property.respects_iso @is_open_immersion :=\n  by\n  apply is_open_immersion_stable_under_composition.respects_iso\n  intro _ _ _; infer_instance\n#align is_open_immersion_respects_iso is_open_immersion_respects_iso\n\n",
 "is_open_immersion_is_local_at_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∣_ » -/\ntheorem is_open_immersion_is_local_at_target : property_is_local_at_target @is_open_immersion :=\n  by\n  constructor\n  · exact is_open_immersion_respects_iso\n  · intros\n    infer_instance\n  · intro X Y f 𝒰 H\n    rw [is_open_immersion_iff_stalk]\n    constructor\n    · apply (open_embedding_iff_open_embedding_of_supr_eq_top 𝒰.supr_opens_range f.1.base.2).mpr\n      intro i\n      have := ((is_open_immersion_respects_iso.arrow_iso_iff (morphism_restrict_opens_range f (𝒰.map i))).mpr (H i)).1\n      rwa [arrow.mk_hom, morphism_restrict_val_base] at this\n    · intro x\n      have := arrow.iso_w (morphism_restrict_stalk_map f (𝒰.map <| 𝒰.f <| f.1 x).opens_range ⟨x, 𝒰.covers _⟩)\n      dsimp only [arrow.mk_hom] at this\n      rw [this]\n      haveI : is_open_immersion («expr ∣_ » f (𝒰.map <| 𝒰.f <| f.1 x).opens_range) :=\n        (is_open_immersion_respects_iso.arrow_iso_iff (morphism_restrict_opens_range f (𝒰.map _))).mpr (H _)\n      infer_instance\n#align is_open_immersion_is_local_at_target is_open_immersion_is_local_at_target\n\n",
 "is_open_immersion_iff_stalk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem is_open_immersion_iff_stalk {f : «expr ⟶ » X Y} :\n    is_open_immersion f ↔ open_embedding f.1.base ∧ ∀ x, IsIso (PresheafedSpace.stalk_map f.1 x) :=\n  by\n  constructor\n  · intro h\n    exact ⟨h.1, infer_instance⟩\n  · rintro ⟨h₁, h₂⟩\n    exact is_open_immersion.of_stalk_iso f h₁\n#align is_open_immersion_iff_stalk is_open_immersion_iff_stalk\n\n"}