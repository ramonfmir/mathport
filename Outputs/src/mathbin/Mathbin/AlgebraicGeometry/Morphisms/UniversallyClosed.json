{"universally_closed_stable_under_composition":
 "theorem universally_closed_stable_under_composition : StableUnderComposition @universally_closed :=\n  by\n  rw [universally_closed_eq]\n  exact stable_under_composition.universally fun X Y Z f g hf hg => IsClosedMap.comp hg hf\n#align universally_closed_stable_under_composition universally_closed_stable_under_composition\n\n",
 "universally_closed_stable_under_base_change":
 "theorem universally_closed_stable_under_base_change : StableUnderBaseChange @universally_closed :=\n  universally_closed_eq.symm ▸ universally_stableUnderBaseChange (topologically @IsClosedMap)\n#align universally_closed_stable_under_base_change universally_closed_stable_under_base_change\n\n",
 "universally_closed_respects_iso":
 "theorem universally_closed_respects_iso : RespectsIso @universally_closed :=\n  universally_closed_eq.symm ▸ universally_respectsIso (topologically @IsClosedMap)\n#align universally_closed_respects_iso universally_closed_respects_iso\n\n",
 "universally_closed_is_local_at_target":
 "theorem universally_closed_is_local_at_target : property_is_local_at_target @universally_closed :=\n  by\n  rw [universally_closed_eq]\n  apply universally_is_local_at_target_of_morphism_restrict\n  ·\n    exact\n      stable_under_composition.respects_iso (fun X Y Z f g hf hg => IsClosedMap.comp hg hf) fun X Y f =>\n        (TopCat.homeoOfIso (Scheme.forget_to_Top.map_iso f)).is_closed_map\n  · intro X Y f ι U hU H\n    simp_rw [topologically, morphism_restrict_base] at H\n    exact (isClosedMap_iff_isClosedMap_of_supᵢ_eq_top hU).mpr H\n#align universally_closed_is_local_at_target universally_closed_is_local_at_target\n\n",
 "universally_closed_eq":
 "/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem universally_closed_eq : @universally_closed = universally (topologically @IsClosedMap) := by ext (X Y f);\n  rw [universally_closed_iff]\n#align universally_closed_eq universally_closed_eq\n\n",
 "open_cover_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem universally_closed.open_cover_iff {X Y : Scheme.{u}} (f : «expr ⟶ » X Y) (𝒰 : Scheme.open_cover.{u} Y) :\n    universally_closed f ↔ ∀ i, universally_closed (pullback.snd : «expr ⟶ » (pullback f (𝒰.map i)) _) :=\n  universally_closed_is_local_at_target.open_cover_iff f 𝒰\n#align universally_closed.open_cover_iff universally_closed.open_cover_iff\n\n",
 "morphism_restrict_base":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∣_ » -/\ntheorem morphism_restrict_base {X Y : Scheme} (f : «expr ⟶ » X Y) (U : Opens Y.carrier) :\n    «expr⇑ » («expr ∣_ » f U).1.base = U.1.restrict_preimage f.1 :=\n  funext fun x => Subtype.ext <| morphism_restrict_base_coe f U x\n#align morphism_restrict_base morphism_restrict_base\n\n"}