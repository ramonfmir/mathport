{"zero_def":
 "@[simp]\ntheorem zero_def : (zero : W.point) = 0 :=\n  rfl\n#align zero_def zero_def\n\n",
 "some_add_some_of_Y_ne'":
 "theorem some_add_some_of_Y_ne' (hx : x₁ = x₂) (hy : y₁ ≠ W.neg_Y x₂ y₂) :\n    some h₁ + some h₂ = -some (nonsingular_add' h₁ h₂ fun _ => hy) :=\n  some_add_some_of_Y_ne hx hy\n#align some_add_some_of_Y_ne' some_add_some_of_Y_ne'\n\n",
 "some_add_some_of_Y_ne":
 "@[simp]\ntheorem some_add_some_of_Y_ne (hx : x₁ = x₂) (hy : y₁ ≠ W.neg_Y x₂ y₂) :\n    some h₁ + some h₂ = some (nonsingular_add h₁ h₂ fun _ => hy) := by rw [← add_def, add, dif_pos hx, dif_neg hy]\n#align some_add_some_of_Y_ne some_add_some_of_Y_ne\n\n",
 "some_add_some_of_Y_eq":
 "@[simp]\ntheorem some_add_some_of_Y_eq (hx : x₁ = x₂) (hy : y₁ = W.neg_Y x₂ y₂) : some h₁ + some h₂ = 0 := by\n  rw [← add_def, add, dif_pos hx, dif_pos hy]\n#align some_add_some_of_Y_eq some_add_some_of_Y_eq\n\n",
 "some_add_some_of_X_ne'":
 "theorem some_add_some_of_X_ne' (hx : x₁ ≠ x₂) :\n    some h₁ + some h₂ = -some (nonsingular_add' h₁ h₂ fun h => (hx h).elim) :=\n  some_add_some_of_X_ne hx\n#align some_add_some_of_X_ne' some_add_some_of_X_ne'\n\n",
 "some_add_some_of_X_ne":
 "@[simp]\ntheorem some_add_some_of_X_ne (hx : x₁ ≠ x₂) : some h₁ + some h₂ = some (nonsingular_add h₁ h₂ fun h => (hx h).elim) :=\n  by rw [← add_def, add, dif_neg hx]\n#align some_add_some_of_X_ne some_add_some_of_X_ne\n\n",
 "some_add_self_of_Y_ne'":
 "theorem some_add_self_of_Y_ne' (hy : y₁ ≠ W.neg_Y x₁ y₁) :\n    some h₁ + some h₁ = -some (nonsingular_add' h₁ h₁ fun _ => hy) :=\n  some_add_some_of_Y_ne rfl hy\n#align some_add_self_of_Y_ne' some_add_self_of_Y_ne'\n\n",
 "some_add_self_of_Y_ne":
 "@[simp]\ntheorem some_add_self_of_Y_ne (hy : y₁ ≠ W.neg_Y x₁ y₁) :\n    some h₁ + some h₁ = some (nonsingular_add h₁ h₁ fun _ => hy) :=\n  some_add_some_of_Y_ne rfl hy\n#align some_add_self_of_Y_ne some_add_self_of_Y_ne\n\n",
 "some_add_self_of_Y_eq":
 "@[simp]\ntheorem some_add_self_of_Y_eq (hy : y₁ = W.neg_Y x₁ y₁) : some h₁ + some h₁ = 0 :=\n  some_add_some_of_Y_eq rfl hy\n#align some_add_self_of_Y_eq some_add_self_of_Y_eq\n\n",
 "slope_of_Y_ne_eq_eval":
 "theorem slope_of_Y_ne_eq_eval (hx : x₁ = x₂) (hy : y₁ ≠ W.neg_Y x₂ y₂) :\n    W.slope x₁ x₂ y₁ y₂ = -(W.polynomial_X.eval <| C y₁).eval x₁ / (W.polynomial_Y.eval <| C y₁).eval x₁ :=\n  by\n  rw [slope_of_Y_ne hx hy, eval_polynomial_X, neg_sub]\n  congr 1\n  rw [neg_Y, eval_polynomial_Y]\n  ring1\n#align slope_of_Y_ne_eq_eval slope_of_Y_ne_eq_eval\n\n",
 "slope_of_Y_ne":
 "@[simp]\ntheorem slope_of_Y_ne (hx : x₁ = x₂) (hy : y₁ ≠ W.neg_Y x₂ y₂) :\n    W.slope x₁ x₂ y₁ y₂ = (3 * x₁ ^ 2 + 2 * W.a₂ * x₁ + W.a₄ - W.a₁ * y₁) / (y₁ - W.neg_Y x₁ y₁) := by\n  rw [slope, dif_pos hx, dif_neg hy]\n#align slope_of_Y_ne slope_of_Y_ne\n\n",
 "slope_of_Y_eq":
 "@[simp]\ntheorem slope_of_Y_eq (hx : x₁ = x₂) (hy : y₁ = W.neg_Y x₂ y₂) : W.slope x₁ x₂ y₁ y₂ = 0 := by\n  rw [slope, dif_pos hx, dif_pos hy]\n#align slope_of_Y_eq slope_of_Y_eq\n\n",
 "slope_of_X_ne":
 "@[simp]\ntheorem slope_of_X_ne (hx : x₁ ≠ x₂) : W.slope x₁ x₂ y₁ y₂ = (y₁ - y₂) / (x₁ - x₂) := by rw [slope, dif_neg hx]\n#align slope_of_X_ne slope_of_X_ne\n\n",
 "of_base_change_injective":
 "theorem of_base_change_injective : function.injective <| of_base_change W F K :=\n  by\n  rintro (_ | _) (_ | _) h\n  · rfl\n  any_goals contradiction\n  simp only\n  exact\n    ⟨NoZeroSMulDivisors.algebraMap_injective F K (some.inj h).left,\n      NoZeroSMulDivisors.algebraMap_injective F K (some.inj h).right⟩\n#align of_base_change_injective of_base_change_injective\n\n",
 "nonsingular_neg_of":
 "theorem nonsingular_neg_of (h : W.nonsingular x₁ <| W.neg_Y x₁ y₁) : W.nonsingular x₁ y₁ :=\n  nonsingular_neg_iff.mp h\n#align nonsingular_neg_of nonsingular_neg_of\n\n",
 "nonsingular_neg_iff":
 "theorem nonsingular_neg_iff : W.nonsingular x₁ (W.neg_Y x₁ y₁) ↔ W.nonsingular x₁ y₁ :=\n  by\n  rw [nonsingular_iff, equation_neg_iff, ← neg_Y, neg_Y_neg_Y, ← @ne_comm _ y₁, nonsingular_iff]\n  exact\n    and_congr_right'\n      ((iff_congr not_and_distrib.symm not_and_distrib.symm).mpr <| not_congr <| and_congr_left fun h => by rw [← h])\n#align nonsingular_neg_iff nonsingular_neg_iff\n\n",
 "nonsingular_neg":
 "/-- The negation of a nonsingular affine point in `W` is nonsingular. -/\ntheorem nonsingular_neg (h : W.nonsingular x₁ y₁) : W.nonsingular x₁ <| W.neg_Y x₁ y₁ :=\n  nonsingular_neg_iff.mpr h\n#align nonsingular_neg nonsingular_neg\n\n",
 "nonsingular_add_of_eval_derivative_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1297540107.derivative_simp -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\ntheorem nonsingular_add_of_eval_derivative_ne_zero (hx' : W.equation (W.add_X x₁ x₂ L) (W.add_Y' x₁ x₂ y₁ L))\n    (hx : (derivative <| W.add_polynomial x₁ y₁ L).eval (W.add_X x₁ x₂ L) ≠ 0) :\n    W.nonsingular (W.add_X x₁ x₂ L) (W.add_Y' x₁ x₂ y₁ L) :=\n  by\n  rw [nonsingular, and_iff_right hx', add_Y', polynomial_X, polynomial_Y]\n  run_tac\n    eval_simp\n  contrapose! hx\n  rw [add_polynomial, line_polynomial, weierstrass_curve.polynomial]\n  run_tac\n    eval_simp\n  run_tac\n    derivative_simp\n  simp only [zero_add, add_zero, sub_zero, MulZeroClass.zero_mul, mul_one]\n  run_tac\n    eval_simp\n  linear_combination (norm := (norm_num1; ring1)) hx.left + L * hx.right\n#align nonsingular_add_of_eval_derivative_ne_zero nonsingular_add_of_eval_derivative_ne_zero\n\n",
 "nonsingular_add'":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\n/-- The addition of two nonsingular affine points in `W` on a sloped line,\nbefore applying the final negation that maps $Y$ to $-Y - a_1X - a_3$, is nonsingular. -/\ntheorem nonsingular_add' (hxy : x₁ = x₂ → y₁ ≠ W.neg_Y x₂ y₂) :\n    W.nonsingular (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.add_Y' x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) :=\n  by\n  by_cases hx₁ : W.add_X x₁ x₂ (W.slope x₁ x₂ y₁ y₂) = x₁\n  · rwa [add_Y', hx₁, sub_self, MulZeroClass.mul_zero, zero_add]\n  · by_cases hx₂ : W.add_X x₁ x₂ (W.slope x₁ x₂ y₁ y₂) = x₂\n    · by_cases hx : x₁ = x₂\n      · subst hx\n        contradiction\n      ·\n        rwa [add_Y', ← neg_sub, mul_neg, hx₂, slope_of_X_ne hx, div_mul_cancel _ <| sub_ne_zero_of_ne hx, neg_sub,\n          sub_add_cancel]\n    · apply W.nonsingular_add_of_eval_derivative_ne_zero _ _ _ _ (equation_add' h₁.1 h₂.1 hxy)\n      rw [derivative_add_polynomial_slope h₁.left h₂.left hxy]\n      run_tac\n        eval_simp\n      simpa only [neg_ne_zero, sub_self, MulZeroClass.mul_zero, add_zero] using\n        mul_ne_zero (sub_ne_zero_of_ne hx₁) (sub_ne_zero_of_ne hx₂)\n#align nonsingular_add' nonsingular_add'\n\n",
 "nonsingular_add":
 "/-- The addition of two nonsingular affine points in `W` on a sloped line is nonsingular. -/\ntheorem nonsingular_add (hxy : x₁ = x₂ → y₁ ≠ W.neg_Y x₂ y₂) :\n    W.nonsingular (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.add_Y x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) :=\n  nonsingular_neg <| nonsingular_add' h₁ h₂ hxy\n#align nonsingular_add nonsingular_add\n\n",
 "neg_zero":
 "#print neg_zero /-\n@[simp]\ntheorem neg_zero : (-0 : W.point) = 0 :=\n  rfl\n#align neg_zero neg_zero\n-/\n\n",
 "neg_some":
 "@[simp]\ntheorem neg_some (h : W.nonsingular x₁ y₁) : -some h = some (nonsingular_neg h) :=\n  rfl\n#align neg_some neg_some\n\n",
 "neg_def":
 "@[simp]\ntheorem neg_def (P : W.point) : P.neg = -P :=\n  rfl\n#align neg_def neg_def\n\n",
 "neg_add_eq_zero":
 "#print neg_add_eq_zero /-\n@[simp]\ntheorem neg_add_eq_zero (P Q : W.point) : -P + Q = 0 ↔ P = Q := by rw [add_eq_zero, neg_inj]\n#align neg_add_eq_zero neg_add_eq_zero\n-/\n\n",
 "neg_Y_neg_Y":
 "/-\nCopyright (c) 2022 David Kurniadi Angdinata. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: David Kurniadi Angdinata\n-/\ntheorem neg_Y_neg_Y : W.neg_Y x₁ (W.neg_Y x₁ y₁) = y₁ :=\n  by\n  simp only [neg_Y]\n  ring1\n#align neg_Y_neg_Y neg_Y_neg_Y\n\n",
 "eval_neg_polynomial":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\n@[simp]\ntheorem eval_neg_polynomial : (W.neg_polynomial.eval <| C y₁).eval x₁ = W.neg_Y x₁ y₁ :=\n  by\n  rw [neg_Y, sub_sub, neg_polynomial]\n  run_tac\n    eval_simp\n#align eval_neg_polynomial eval_neg_polynomial\n\n",
 "equation_neg_of":
 "theorem equation_neg_of (h : W.equation x₁ <| W.neg_Y x₁ y₁) : W.equation x₁ y₁ :=\n  equation_neg_iff.mp h\n#align equation_neg_of equation_neg_of\n\n",
 "equation_neg_iff":
 "theorem equation_neg_iff : W.equation x₁ (W.neg_Y x₁ y₁) ↔ W.equation x₁ y₁ :=\n  by\n  rw [equation_iff, equation_iff, neg_Y]\n  congr 2\n  ring1\n#align equation_neg_iff equation_neg_iff\n\n",
 "equation_neg":
 "/-- The negation of an affine point in `W` lies in `W`. -/\ntheorem equation_neg (h : W.equation x₁ y₁) : W.equation x₁ <| W.neg_Y x₁ y₁ :=\n  equation_neg_iff.mpr h\n#align equation_neg equation_neg\n\n",
 "equation_add_iff":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\ntheorem equation_add_iff :\n    W.equation (W.add_X x₁ x₂ L) (W.add_Y' x₁ x₂ y₁ L) ↔ (W.add_polynomial x₁ y₁ L).eval (W.add_X x₁ x₂ L) = 0 :=\n  by\n  rw [equation, add_Y', add_polynomial, line_polynomial, weierstrass_curve.polynomial]\n  run_tac\n    eval_simp\n#align equation_add_iff equation_add_iff\n\n",
 "equation_add'":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\n/-- The addition of two affine points in `W` on a sloped line,\nbefore applying the final negation that maps $Y$ to $-Y - a_1X - a_3$, lies in `W`. -/\ntheorem equation_add' (hxy : x₁ = x₂ → y₁ ≠ W.neg_Y x₂ y₂) :\n    W.equation (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.add_Y' x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) :=\n  by\n  rw [equation_add_iff, add_polynomial_slope h₁' h₂' hxy]\n  run_tac\n    eval_simp\n  rw [neg_eq_zero, sub_self, MulZeroClass.mul_zero]\n#align equation_add' equation_add'\n\n",
 "equation_add":
 "/-- The addition of two affine points in `W` on a sloped line lies in `W`. -/\ntheorem equation_add (hxy : x₁ = x₂ → y₁ ≠ W.neg_Y x₂ y₂) :\n    W.equation (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.add_Y x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) :=\n  equation_neg <| equation_add' h₁' h₂' hxy\n#align equation_add equation_add\n\n",
 "derivative_add_polynomial_slope":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1297540107.derivative_simp -/\ntheorem derivative_add_polynomial_slope (hxy : x₁ = x₂ → y₁ ≠ W.neg_Y x₂ y₂) :\n    derivative (W.add_polynomial x₁ y₁ <| W.slope x₁ x₂ y₁ y₂) =\n      -((X - C x₁) * (X - C x₂) + (X - C x₁) * (X - C (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂)) +\n          (X - C x₂) * (X - C (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂))) :=\n  by\n  rw [add_polynomial_slope h₁' h₂' hxy]\n  run_tac\n    derivative_simp\n  ring1\n#align derivative_add_polynomial_slope derivative_add_polynomial_slope\n\n",
 "base_change_slope_of_base_change":
 "theorem base_change_slope_of_base_change {R : Type u} [CommRing R] (W : weierstrass_curve R) (F : Type v) [Field F]\n    [Algebra R F] (K : Type w) [Field K] [Algebra R K] [Algebra F K] [IsScalarTower R F K] (x₁ x₂ y₁ y₂ : F) :\n    (W.base_change K).slope (algebraMap F K x₁) (algebraMap F K x₂) (algebraMap F K y₁) (algebraMap F K y₂) =\n      algebraMap F K ((W.base_change F).slope x₁ x₂ y₁ y₂) :=\n  by rw [← base_change_slope, base_change_base_change]\n#align base_change_slope_of_base_change base_change_slope_of_base_change\n\n",
 "base_change_slope":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.744928483.map_simp -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.744928483.map_simp -/\ntheorem base_change_slope :\n    (W.base_change K).slope (algebraMap F K x₁) (algebraMap F K x₂) (algebraMap F K y₁) (algebraMap F K y₂) =\n      algebraMap F K (W.slope x₁ x₂ y₁ y₂) :=\n  by\n  by_cases hx : x₁ = x₂\n  · by_cases hy : y₁ = W.neg_Y x₂ y₂\n    · rw [slope_of_Y_eq hx hy, slope_of_Y_eq <| congr_arg _ hx, map_zero]\n      · rw [hy, base_change_neg_Y]\n    · rw [slope_of_Y_ne hx hy, slope_of_Y_ne <| congr_arg _ hx]\n      · run_tac\n          map_simp\n        simpa only [base_change_neg_Y]\n      · rw [base_change_neg_Y]\n        contrapose! hy\n        exact NoZeroSMulDivisors.algebraMap_injective F K hy\n  · rw [slope_of_X_ne hx, slope_of_X_ne]\n    ·\n      run_tac\n        map_simp\n    · contrapose! hx\n      exact NoZeroSMulDivisors.algebraMap_injective F K hx\n#align base_change_slope base_change_slope\n\n",
 "base_change_neg_Y_of_base_change":
 "theorem base_change_neg_Y_of_base_change (x₁ y₁ : A) :\n    (W.base_change B).neg_Y (algebraMap A B x₁) (algebraMap A B y₁) = algebraMap A B ((W.base_change A).neg_Y x₁ y₁) :=\n  by rw [← base_change_neg_Y, base_change_base_change]\n#align base_change_neg_Y_of_base_change base_change_neg_Y_of_base_change\n\n",
 "base_change_neg_Y":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.744928483.map_simp -/\ntheorem base_change_neg_Y :\n    (W.base_change A).neg_Y (algebraMap R A x₁) (algebraMap R A y₁) = algebraMap R A (W.neg_Y x₁ y₁) :=\n  by\n  simp only [neg_Y]\n  run_tac\n    map_simp\n  rfl\n#align base_change_neg_Y base_change_neg_Y\n\n",
 "base_change_add_Y_of_base_change":
 "theorem base_change_add_Y_of_base_change (x₁ x₂ y₁ L : A) :\n    (W.base_change B).add_Y (algebraMap A B x₁) (algebraMap A B x₂) (algebraMap A B y₁) (algebraMap A B L) =\n      algebraMap A B ((W.base_change A).add_Y x₁ x₂ y₁ L) :=\n  by rw [← base_change_add_Y, base_change_base_change]\n#align base_change_add_Y_of_base_change base_change_add_Y_of_base_change\n\n",
 "base_change_add_Y'_of_base_change":
 "theorem base_change_add_Y'_of_base_change (x₁ x₂ y₁ L : A) :\n    (W.base_change B).add_Y' (algebraMap A B x₁) (algebraMap A B x₂) (algebraMap A B y₁) (algebraMap A B L) =\n      algebraMap A B ((W.base_change A).add_Y' x₁ x₂ y₁ L) :=\n  by rw [← base_change_add_Y', base_change_base_change]\n#align base_change_add_Y'_of_base_change base_change_add_Y'_of_base_change\n\n",
 "base_change_add_Y'":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.744928483.map_simp -/\ntheorem base_change_add_Y' :\n    (W.base_change A).add_Y' (algebraMap R A x₁) (algebraMap R A x₂) (algebraMap R A y₁) (algebraMap R A L) =\n      algebraMap R A (W.add_Y' x₁ x₂ y₁ L) :=\n  by\n  simp only [add_Y', base_change_add_X]\n  run_tac\n    map_simp\n#align base_change_add_Y' base_change_add_Y'\n\n",
 "base_change_add_Y":
 "theorem base_change_add_Y :\n    (W.base_change A).add_Y (algebraMap R A x₁) (algebraMap R A x₂) (algebraMap R A y₁) (algebraMap R A L) =\n      algebraMap R A (W.add_Y x₁ x₂ y₁ L) :=\n  by simp only [add_Y, base_change_add_Y', base_change_add_X, base_change_neg_Y]\n#align base_change_add_Y base_change_add_Y\n\n",
 "base_change_add_X_of_base_change":
 "theorem base_change_add_X_of_base_change (x₁ x₂ L : A) :\n    (W.base_change B).add_X (algebraMap A B x₁) (algebraMap A B x₂) (algebraMap A B L) =\n      algebraMap A B ((W.base_change A).add_X x₁ x₂ L) :=\n  by rw [← base_change_add_X, base_change_base_change]\n#align base_change_add_X_of_base_change base_change_add_X_of_base_change\n\n",
 "base_change_add_X":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.744928483.map_simp -/\ntheorem base_change_add_X :\n    (W.base_change A).add_X (algebraMap R A x₁) (algebraMap R A x₂) (algebraMap R A L) =\n      algebraMap R A (W.add_X x₁ x₂ L) :=\n  by\n  simp only [add_X]\n  run_tac\n    map_simp\n  rfl\n#align base_change_add_X base_change_add_X\n\n",
 "add_polynomial_slope":
 "theorem add_polynomial_slope (hxy : x₁ = x₂ → y₁ ≠ W.neg_Y x₂ y₂) :\n    W.add_polynomial x₁ y₁ (W.slope x₁ x₂ y₁ y₂) =\n      -((X - C x₁) * (X - C x₂) * (X - C (W.add_X x₁ x₂ <| W.slope x₁ x₂ y₁ y₂))) :=\n  by\n  rw [add_polynomial_eq, neg_inj, Cubic.prod_X_sub_C_eq, Cubic.toPoly_injective]\n  by_cases hx : x₁ = x₂\n  · rcases hx, Y_eq_of_Y_ne h₁' h₂' hx (hxy hx) with ⟨rfl, rfl⟩\n    rw [equation_iff] at h₁' h₂'\n    rw [slope_of_Y_ne rfl <| hxy rfl]\n    rw [neg_Y, ← sub_ne_zero] at hxy\n    ext\n    · rfl\n    · simp only [add_X]\n      ring1\n    · field_simp [hxy rfl]\n      ring1\n    · linear_combination (norm := (field_simp [hxy rfl] ; ring1)) -h₁'\n  · rw [equation_iff] at h₁' h₂'\n    rw [slope_of_X_ne hx]\n    rw [← sub_eq_zero] at hx\n    ext\n    · rfl\n    · simp only [add_X]\n      ring1\n    · apply mul_right_injective₀ hx\n      linear_combination (norm := (field_simp [hx] ; ring1)) h₂' - h₁'\n    · apply mul_right_injective₀ hx\n      linear_combination (norm := (field_simp [hx] ; ring1)) x₂ * h₁' - x₁ * h₂'\n#align add_polynomial_slope add_polynomial_slope\n\n",
 "add_polynomial_eq":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.2689713307.eval_simp -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic _private.1008198739.C_simp -/\ntheorem add_polynomial_eq :\n    W.add_polynomial x₁ y₁ L =\n      -Cubic.toPoly\n          ⟨1, -L ^ 2 - W.a₁ * L + W.a₂, 2 * x₁ * L ^ 2 + (W.a₁ * x₁ - 2 * y₁ - W.a₃) * L + (-W.a₁ * y₁ + W.a₄),\n            -x₁ ^ 2 * L ^ 2 + (2 * x₁ * y₁ + W.a₃ * x₁) * L - (y₁ ^ 2 + W.a₃ * y₁ - W.a₆)⟩ :=\n  by\n  rw [add_polynomial, line_polynomial, weierstrass_curve.polynomial, Cubic.toPoly]\n  run_tac\n    eval_simp\n  run_tac\n    C_simp\n  ring1\n#align add_polynomial_eq add_polynomial_eq\n\n",
 "add_left_neg":
 "#print add_left_neg /-\n@[simp]\ntheorem add_left_neg (P : W.point) : -P + P = 0 := by rw [add_eq_zero]\n#align add_left_neg add_left_neg\n-/\n\n",
 "add_eq_zero":
 "#print add_eq_zero /-\n@[simp]\ntheorem add_eq_zero (P Q : W.point) : P + Q = 0 ↔ P = -Q :=\n  by\n  rcases P, Q with ⟨_ | @⟨x₁, y₁, _⟩, _ | @⟨x₂, y₂, _⟩⟩\n  any_goals rfl\n  · rw [zero_def, zero_add, ← neg_eq_iff_eq_neg, neg_zero, eq_comm]\n  · simp only [neg_some]\n    constructor\n    · intro h\n      by_cases hx : x₁ = x₂\n      · by_cases hy : y₁ = W.neg_Y x₂ y₂\n        · exact ⟨hx, hy⟩\n        · rw [some_add_some_of_Y_ne hx hy] at h\n          contradiction\n      · rw [some_add_some_of_X_ne hx] at h\n        contradiction\n    · exact fun ⟨hx, hy⟩ => some_add_some_of_Y_eq hx hy\n#align add_eq_zero add_eq_zero\n-/\n\n",
 "add_def":
 "@[simp]\ntheorem add_def (P Q : W.point) : P.add Q = P + Q :=\n  rfl\n#align add_def add_def\n\n",
 "Y_eq_of_Y_ne":
 "theorem Y_eq_of_Y_ne (hx : x₁ = x₂) (hy : y₁ ≠ W.neg_Y x₂ y₂) : y₁ = y₂ :=\n  or.resolve_right (Y_eq_of_X_eq h₁' h₂' hx) hy\n#align Y_eq_of_Y_ne Y_eq_of_Y_ne\n\n",
 "Y_eq_of_X_eq":
 "theorem Y_eq_of_X_eq (hx : x₁ = x₂) : y₁ = y₂ ∨ y₁ = W.neg_Y x₂ y₂ :=\n  by\n  rw [equation_iff] at h₁' h₂'\n  rw [← sub_eq_zero, ← @sub_eq_zero _ _ y₁, ← mul_eq_zero, neg_Y]\n  linear_combination (norm := (rw [hx]; ring1)) h₁' - h₂'\n#align Y_eq_of_X_eq Y_eq_of_X_eq\n\n"}