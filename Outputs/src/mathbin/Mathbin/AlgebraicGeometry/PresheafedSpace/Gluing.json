{"π_ι_inv_app_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- `ι_inv_app` is the right inverse of `D.ι i` on `U`. -/\ntheorem π_ι_inv_app_π (i j : D.J) (U : Opens (D.U i).carrier) :\n    «expr ≫ » (D.diagram_over_open_π U i)\n        («expr ≫ » (D.ι_inv_app_π_eq_map U) («expr ≫ » (D.ι_inv_app U) (D.diagram_over_open_π U j))) =\n      D.diagram_over_open_π U j :=\n  by\n  rw [←\n    cancel_mono\n      («expr ≫ »\n        ((componentwise_diagram («expr𝖣»).diagram.multispan _).map (Quiver.Hom.op (walking_multispan.hom.snd (i, j))))\n        ((«expr𝟙») _))]\n  simp_rw [category.assoc]\n  rw [limit.w_assoc]\n  erw [limit.lift_π_assoc]\n  rw [category.comp_id, category.comp_id]\n  change «expr ≫ » _ («expr ≫ » _ («expr ≫ » («expr ≫ » _ _) _)) = _\n  rw [congr_app (D.t_id _), id_c_app]\n  simp_rw [category.assoc]\n  rw [← functor.map_comp_assoc, is_open_immersion.inv_naturality_assoc]\n  erw [is_open_immersion.app_inv_app_assoc]\n  iterate 3 rw [← functor.map_comp_assoc]\n  rw [nat_trans.naturality_assoc]\n  erw [← (D.V (i, j)).presheaf.map_comp]\n  convert limit.w (componentwise_diagram («expr𝖣»).diagram.multispan _)\n      (Quiver.Hom.op (walking_multispan.hom.fst (i, j)))\n  · rw [category.comp_id]\n    apply (config := { instances := false }) mono_comp\n    change mono ((«expr ≫ » _ (D.f j i)).c.app _)\n    rw [comp_c_app]\n    apply (config := { instances := false }) mono_comp\n    erw [D.ι_image_preimage_eq i j U]\n    all_goals infer_instance\n#align π_ι_inv_app_π π_ι_inv_app_π\n\n",
 "π_ι_inv_app_eq_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- `ι_inv_app` is the inverse of `D.ι i` on `U`. -/\ntheorem π_ι_inv_app_eq_id (i : D.J) (U : Opens (D.U i).carrier) :\n    «expr ≫ » (D.diagram_over_open_π U i) («expr ≫ » (D.ι_inv_app_π_eq_map U) (D.ι_inv_app U)) = («expr𝟙») _ :=\n  by\n  ext j\n  induction j using Opposite.rec'\n  rcases j with (⟨j, k⟩ | ⟨j⟩)\n  · rw [←\n      limit.w (componentwise_diagram («expr𝖣»).diagram.multispan _) (Quiver.Hom.op (walking_multispan.hom.fst (j, k))),\n      ← category.assoc, category.id_comp]\n    congr 1\n    simp_rw [category.assoc]\n    apply π_ι_inv_app_π\n  · simp_rw [category.assoc]\n    rw [category.id_comp]\n    apply π_ι_inv_app_π\n#align π_ι_inv_app_eq_id π_ι_inv_app_eq_id\n\n",
 "ι_open_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/-\nCopyright (c) 2021 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem ι_open_embedding [HasLimits C] (i : D.J) : OpenEmbedding ((«expr𝖣»).ι i).base :=\n  by\n  rw [← show _ = ((«expr𝖣»).ι i).base from («expr𝖣»).ι_glued_iso_inv (PresheafedSpace.forget _) _]\n  exact\n    OpenEmbedding.comp (TopCat.homeoOfIso ((«expr𝖣»).glued_iso (PresheafedSpace.forget _)).symm).open_embedding\n      (D.to_Top_glue_data.ι_open_embedding i)\n#align ι_open_embedding ι_open_embedding\n\n",
 "ι_jointly_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\ntheorem ι_jointly_surjective (x : («expr𝖣»).glued) : ∃ (i : D.J)(y : D.U i), ((«expr𝖣»).ι i).1.base y = x :=\n  («expr𝖣»).ι_jointly_surjective\n    («expr ⋙ » («expr ⋙ » LocallyRingedSpace.forget_to_SheafedSpace (SheafedSpace.forget _)) (forget TopCat)) x\n#align ι_jointly_surjective ι_jointly_surjective\n\n",
 "ι_iso_SheafedSpace_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\ntheorem ι_iso_SheafedSpace_inv (i : D.J) :\n    «expr ≫ » (D.to_SheafedSpace_glue_data.to_glue_data.ι i) D.iso_SheafedSpace.inv = ((«expr𝖣»).ι i).1 :=\n  («expr𝖣»).ι_glued_iso_inv forget_to_SheafedSpace i\n#align ι_iso_SheafedSpace_inv ι_iso_SheafedSpace_inv\n\n",
 "ι_iso_PresheafedSpace_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\ntheorem ι_iso_PresheafedSpace_inv (i : D.J) :\n    «expr ≫ » (D.to_PresheafedSpace_glue_data.to_glue_data.ι i) D.iso_PresheafedSpace.inv = («expr𝖣»).ι i :=\n  («expr𝖣»).ι_glued_iso_inv _ _\n#align ι_iso_PresheafedSpace_inv ι_iso_PresheafedSpace_inv\n\n",
 "ι_inv_app_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- It remains to show that the blue is equal to red + green in the original diagram.\n-- The proof strategy is illustrated in ![this diagram](https://i.imgur.com/mBzV1Rx.png)\n-- where we prove red = pink = light-blue = green = blue.\n-- light-blue = green is relatively easy since the part that differs does not involve\n-- partial inverses.\n/-- `ι_inv_app` is the left inverse of `D.ι i` on `U`. -/\ntheorem ι_inv_app_π {i : D.J} (U : Opens (D.U i).carrier) :\n    ∃ eq, «expr ≫ » (D.ι_inv_app U) (D.diagram_over_open_π U i) = (D.U i).presheaf.map (eqToHom Eq) :=\n  by\n  constructor\n  delta ι_inv_app\n  rw [limit.lift_π]\n  change D.opens_image_preimage_map i i U = _\n  dsimp [opens_image_preimage_map]\n  rw [congr_app (D.t_id _), id_c_app, ← functor.map_comp]\n  erw [is_open_immersion.inv_naturality_assoc, is_open_immersion.app_inv_app'_assoc]\n  simp only [eq_to_hom_op, eq_to_hom_trans, eq_to_hom_map (functor.op _), ← functor.map_comp]\n  rw [set.range_iff_surjective.mpr _]\n  · simp\n  · rw [← TopCat.epi_iff_surjective]\n    infer_instance\n#align ι_inv_app_π ι_inv_app_π\n\n",
 "ι_image_preimage_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\ntheorem ι_image_preimage_eq (i j : D.J) (U : Opens (D.U i).carrier) :\n    (Opens.map ((«expr𝖣»).ι j).base).obj ((D.ι_open_embedding i).is_open_map.functor.obj U) =\n      (D.f_open j i).open_functor.obj\n        ((Opens.map ((«expr𝖣»).t j i).base).obj ((Opens.map ((«expr𝖣»).f i j).base).obj U)) :=\n  by\n  ext1\n  dsimp only [opens.map_coe, is_open_map.functor_obj_coe]\n  rw [← show _ = ((«expr𝖣»).ι i).base from («expr𝖣»).ι_glued_iso_inv (PresheafedSpace.forget _) i, ←\n    show _ = ((«expr𝖣»).ι j).base from («expr𝖣»).ι_glued_iso_inv (PresheafedSpace.forget _) j, coe_comp, coe_comp,\n    Set.image_comp, Set.preimage_comp, Set.preimage_image_eq]\n  refine' Eq.trans (D.to_Top_glue_data.preimage_image_eq_image' _ _ _) _\n  rw [coe_comp, Set.image_comp]\n  congr 1\n  erw [Set.eq_preimage_iff_image_eq]\n  rw [← Set.image_comp]\n  change «expr '' » («expr ≫ » (D.t i j) (D.t j i)).base _ = _\n  rw [(«expr𝖣»).t_inv]\n  · simp\n  · change function.bijective (TopCat.homeoOfIso (as_iso _))\n    exact Homeomorph.bijective _\n    infer_instance\n  · rw [← TopCat.mono_iff_injective]\n    infer_instance\n#align ι_image_preimage_eq ι_image_preimage_eq\n\n",
 "snd_inv_app_t_app'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝖣» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂⁻¹ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁⁻¹ , , » -/\n/-- We can prove the `eq` along with the lemma. Thus this is bundled together here, and the\nlemma itself is separated below.\n-/\ntheorem snd_inv_app_t_app' (i j k : D.J) (U : Opens (pullback (D.f i j) (D.f i k)).carrier) :\n    ∃ eq,\n      «expr ≫ » ((«exprπ₂⁻¹ , , » i j k) U) («expr ≫ » ((D.t k i).c.app _) ((D.V (k, i)).presheaf.map (eqToHom Eq))) =\n        «expr ≫ » ((D.t' k i j).c.app _) ((«exprπ₁⁻¹ , , » k j i) (unop _)) :=\n  by\n  constructor\n  rw [← is_iso.eq_inv_comp, is_open_immersion.inv_inv_app, category.assoc, (D.t' k i j).c.naturality_assoc]\n  simp_rw [← category.assoc]\n  erw [← comp_c_app]\n  rw [congr_app (D.t_fac k i j), comp_c_app]\n  simp_rw [category.assoc]\n  erw [is_open_immersion.inv_naturality, is_open_immersion.inv_naturality_assoc, is_open_immersion.app_inv_app'_assoc]\n  simp_rw [← ((«expr𝖣»).V (k, i)).presheaf.map_comp, eq_to_hom_map (functor.op _), eq_to_hom_op, eq_to_hom_trans]\n  rintro x ⟨y, hy, eq⟩\n  replace eq := concrete_category.congr_arg ((«expr𝖣»).t i k).base Eq\n  change («expr ≫ » («exprπ₂ , , » i j k) (D.t i k)).base y = («expr ≫ » (D.t k i) (D.t i k)).base x at eq\n  rw [(«expr𝖣»).t_inv, id_base, TopCat.id_app] at eq\n  subst Eq\n  use (inv (D.t' k i j)).base y\n  change («expr ≫ » (inv (D.t' k i j)) («exprπ₁ , , » k i j)).base y = _\n  congr 2\n  rw [is_iso.inv_comp_eq, («expr𝖣»).t_fac_assoc, («expr𝖣»).t_inv, category.comp_id]\n#align snd_inv_app_t_app' snd_inv_app_t_app'\n\n",
 "snd_inv_app_t_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂⁻¹ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁⁻¹ , , » -/\n/-- The red and the blue arrows in ![this diagram](https://i.imgur.com/q6X1GJ9.png) commute. -/\n@[simp, reassoc.1]\ntheorem snd_inv_app_t_app (i j k : D.J) (U : Opens (pullback (D.f i j) (D.f i k)).carrier) :\n    «expr ≫ » ((«exprπ₂⁻¹ , , » i j k) U) ((D.t k i).c.app _) =\n      «expr ≫ » ((D.t' k i j).c.app _)\n        («expr ≫ » ((«exprπ₁⁻¹ , , » k j i) (unop _))\n          ((D.V (k, i)).presheaf.map (eqToHom (D.snd_inv_app_t_app' i j k U).some.symm))) :=\n  by\n  have e := (D.snd_inv_app_t_app' i j k U).some_spec\n  reassoc! e\n  rw [← e]\n  simp [eq_to_hom_map]\n#align snd_inv_app_t_app snd_inv_app_t_app\n\n",
 "pullback_base":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem pullback_base (i j k : D.J) (S : Set (D.V (i, j)).carrier) :\n    «expr '' » («exprπ₂ , , » i j k) («expr ⁻¹' » («exprπ₁ , , » i j k) S) =\n      «expr ⁻¹' » (D.f i k) («expr '' » (D.f i j) S) :=\n  by\n  have eq₁ : _ = («exprπ₁ , , » i j k).base := preserves_pullback.iso_hom_fst (forget C) _ _\n  have eq₂ : _ = («exprπ₂ , , » i j k).base := preserves_pullback.iso_hom_snd (forget C) _ _\n  rw [coe_to_fun_eq, coe_to_fun_eq, ← eq₁, ← eq₂, coe_comp, Set.image_comp, coe_comp, Set.preimage_comp,\n    Set.image_preimage_eq, TopCat.pullback_snd_image_fst_preimage]\n  rfl\n  rw [← TopCat.epi_iff_surjective]\n  infer_instance\n#align pullback_base pullback_base\n\n",
 "opens_image_preimage_map_app_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂⁻¹ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- This is proved separately since `reassoc` somehow timeouts.\ntheorem opens_image_preimage_map_app_assoc (i j k : D.J) (U : Opens (D.U i).carrier) {X' : C} (f' : «expr ⟶ » _ X') :\n    «expr ≫ » (D.opens_image_preimage_map i j U) («expr ≫ » ((D.f j k).c.app _) f') =\n      «expr ≫ » ((«expr ≫ » («exprπ₁ , , » j i k) («expr ≫ » (D.t j i) (D.f i j))).c.app (op U))\n        («expr ≫ » ((«exprπ₂⁻¹ , , » j i k) (unop _))\n          («expr ≫ » ((D.V (j, k)).presheaf.map (eqToHom (opens_image_preimage_map_app' D i j k U).some)) f')) :=\n  by simpa only [category.assoc] using congr_arg (fun g => «expr ≫ » g f') (opens_image_preimage_map_app D i j k U)\n#align opens_image_preimage_map_app_assoc opens_image_preimage_map_app_assoc\n\n",
 "opens_image_preimage_map_app'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂⁻¹ , , » -/\ntheorem opens_image_preimage_map_app' (i j k : D.J) (U : Opens (D.U i).carrier) :\n    ∃ eq,\n      «expr ≫ » (D.opens_image_preimage_map i j U) ((D.f j k).c.app _) =\n        «expr ≫ » ((«expr ≫ » («exprπ₁ , , » j i k) («expr ≫ » (D.t j i) (D.f i j))).c.app (op U))\n          («expr ≫ » ((«exprπ₂⁻¹ , , » j i k) (unop _)) ((D.V (j, k)).presheaf.map (eqToHom Eq))) :=\n  by\n  constructor\n  delta opens_image_preimage_map\n  simp_rw [category.assoc]\n  rw [(D.f j k).c.naturality, f_inv_app_f_app_assoc]\n  erw [← (D.V (j, k)).presheaf.map_comp]\n  simp_rw [← category.assoc]\n  erw [← comp_c_app, ← comp_c_app]\n  simp_rw [category.assoc]\n  dsimp only [functor.op, unop_op, Quiver.Hom.unop_op]\n  rw [eq_to_hom_map (opens.map _), eq_to_hom_op, eq_to_hom_trans]\n  congr\n#align opens_image_preimage_map_app' opens_image_preimage_map_app'\n\n",
 "opens_image_preimage_map_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂⁻¹ , , » -/\n/-- The red and the blue arrows in ![this diagram](https://i.imgur.com/mBzV1Rx.png) commute. -/\ntheorem opens_image_preimage_map_app (i j k : D.J) (U : Opens (D.U i).carrier) :\n    «expr ≫ » (D.opens_image_preimage_map i j U) ((D.f j k).c.app _) =\n      «expr ≫ » ((«expr ≫ » («exprπ₁ , , » j i k) («expr ≫ » (D.t j i) (D.f i j))).c.app (op U))\n        («expr ≫ » ((«exprπ₂⁻¹ , , » j i k) (unop _))\n          ((D.V (j, k)).presheaf.map (eqToHom (opens_image_preimage_map_app' D i j k U).some))) :=\n  (opens_image_preimage_map_app' D i j k U).some_spec\n#align opens_image_preimage_map_app opens_image_preimage_map_app\n\n",
 "f_inv_app_f_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₁ , , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprπ₂⁻¹ , , » -/\n/-- The red and the blue arrows in ![this diagram](https://i.imgur.com/0GiBUh6.png) commute. -/\n@[simp, reassoc.1]\ntheorem f_inv_app_f_app (i j k : D.J) (U : Opens (D.V (i, j)).carrier) :\n    «expr ≫ » ((D.f_open i j).inv_app U) ((D.f i k).c.app _) =\n      «expr ≫ » ((«exprπ₁ , , » i j k).c.app (op U))\n        («expr ≫ » ((«exprπ₂⁻¹ , , » i j k) (unop _))\n          ((D.V _).presheaf.map\n            (eqToHom\n              (by\n                delta is_open_immersion.open_functor\n                dsimp only [functor.op, IsOpenMap.functor, opens.map, unop_op]\n                congr\n                apply pullback_base)))) :=\n  by\n  have := PresheafedSpace.congr_app (@pullback.condition _ _ _ _ _ (D.f i j) (D.f i k) _)\n  dsimp only [comp_c_app] at this\n  rw [← cancel_epi (inv ((D.f_open i j).inv_app U)), is_iso.inv_hom_id_assoc, is_open_immersion.inv_inv_app]\n  simp_rw [category.assoc]\n  erw [(«exprπ₁ , , » i j k).c.naturality_assoc, reassoc_of this, ← functor.map_comp_assoc,\n    is_open_immersion.inv_naturality_assoc, is_open_immersion.app_inv_app_assoc, ← (D.V (i, k)).presheaf.map_comp, ←\n    (D.V (i, k)).presheaf.map_comp]\n  convert(category.comp_id _).symm\n  erw [(D.V (i, k)).presheaf.map_id]\n  rfl\n#align f_inv_app_f_app f_inv_app_f_app\n\n"}