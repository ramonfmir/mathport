{"eq_empty_to":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem Scheme.eq_empty_to {X : Scheme.{u}} (f : «expr ⟶ » ∅ X) : f = Scheme.empty_to X :=\n  Scheme.empty_ext f (Scheme.empty_to X)\n#align Scheme.eq_empty_to Scheme.eq_empty_to\n\n",
 "empty_is_initial_to":
 "@[simp]\ntheorem empty_is_initial_to : empty_is_initial.to = Scheme.empty_to :=\n  rfl\n#align empty_is_initial_to empty_is_initial_to\n\n",
 "empty_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\n@[ext]\ntheorem Scheme.empty_ext {X : Scheme.{u}} (f g : «expr ⟶ » ∅ X) : f = g :=\n  by\n  ext a\n  exact pempty.elim a\n#align Scheme.empty_ext Scheme.empty_ext\n\n",
 "bot_is_affine_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥_ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem bot_is_affine_open (X : Scheme) : is_affine_open («expr⊥» : opens X.carrier) :=\n  by\n  convert range_is_affine_open_of_open_immersion (initial.to X)\n  ext\n  exact (false_iff_iff _).mpr fun x => is_empty_elim (show («expr⊥_ » Scheme).carrier from x.some)\n#align bot_is_affine_open bot_is_affine_open\n\n"}