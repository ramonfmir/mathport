{"integrable_of_is_O_exp_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =O[ ] » -/\n/-- If `f` is continuous on `[a, ∞)`, and is `O (exp (-b * x))` at `∞` for some `b > 0`, then\n`f` is integrable on `(a, ∞)`. -/\ntheorem integrable_of_is_O_exp_neg {f : exprℝ → exprℝ} {a b : exprℝ} (h0 : 0 < b) (h1 : ContinuousOn f (Ici a))\n    (h2 : «expr =O[ ] » f atTop fun x => exp (-b * x)) : integrable_on f (Ioi a) :=\n  by\n  cases' h2.is_O_with with c h3\n  rw [Asymptotics.isBigOWith_iff, eventually_at_top] at h3\n  cases' h3 with r bdr\n  let v := max a r\n  -- show integrable on `(a, v]` from continuity\n  have int_left : integrable_on f (Ioc a v) :=\n    by\n    rw [← interval_integrable_iff_integrable_Ioc_of_le (le_max_left a r)]\n    have u : Icc a v ⊆ Ici a := Icc_subset_Ici_self\n    exact (h1.mono u).interval_integrable_of_Icc (le_max_left a r)\n  suffices integrable_on f (Ioi v)\n    by\n    have t : integrable_on f (Ioc a v ∪ Ioi v) := integrable_on_union.mpr ⟨int_left, this⟩\n    simpa only [Ioc_union_Ioi_eq_Ioi, le_max_iff, le_refl, true_or_iff] using t\n  -- now show integrable on `(v, ∞)` from asymptotic\n  constructor\n  · exact (h1.mono <| Ioi_subset_Ici <| le_max_left a r).ae_strongly_measurable measurable_set_Ioi\n  have : has_finite_integral (fun x : exprℝ => c * exp (-b * x)) (volume.restrict (Ioi v)) :=\n    (exp_neg_integrable_on_Ioi v h0).has_finite_integral.const_mul c\n  apply this.mono\n  refine' (ae_restrict_iff' measurable_set_Ioi).mpr _\n  refine' ae_of_all _ fun x h1x => _\n  rw [norm_mul, norm_eq_abs]\n  rw [mem_Ioi] at h1x\n  specialize bdr x ((le_max_right a r).trans h1x.le)\n  exact bdr.trans (mul_le_mul_of_nonneg_right (le_abs_self c) (norm_nonneg _))\n#align integrable_of_is_O_exp_neg integrable_of_is_O_exp_neg\n\n",
 "exp_neg_integrable_on_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2022 David Loeffler. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: David Loeffler\n-/\n/-- `exp (-b * x)` is integrable on `(a, ∞)`. -/\ntheorem exp_neg_integrable_on_Ioi (a : exprℝ) {b : exprℝ} (h : 0 < b) :\n    integrable_on (fun x : exprℝ => exp (-b * x)) (Ioi a) :=\n  by\n  have : tendsto (fun x => -exp (-b * x) / b) at_top ((nhds) (-0 / b)) :=\n    by\n    refine' tendsto.div_const (tendsto.neg _) _\n    exact tendsto_exp_at_bot.comp (tendsto_id.neg_const_mul_at_top (Right.neg_neg_iff.2 h))\n  refine' integrable_on_Ioi_deriv_of_nonneg' (fun x hx => _) (fun x hx => (exp_pos _).le) this\n  simpa [h.ne'] using ((has_deriv_at_id x).const_mul b).neg.exp.neg.div_const b\n#align exp_neg_integrable_on_Ioi exp_neg_integrable_on_Ioi\n\n"}