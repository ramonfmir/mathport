{"tendsto_filter_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/-- The main feature of the Besicovitch Vitali family is that its filter at a point `x` corresponds\nto convergence along closed balls. We record one of the two implications here, which will enable us\nto deduce specific statements on differentiation of measures in this context from the general\nversions. -/\ntheorem tendsto_filter_at (μ : measure α) [sigma_finite μ] (x : α) :\n    tendsto (fun r => closed_ball x r) (nhds_within.gt 0) ((besicovitch.vitali_family μ).filter_at x) :=\n  by\n  intro s hs\n  simp only [mem_map]\n  obtain ⟨ε, εpos, hε⟩ :\n    ∃ (ε : exprℝ)(H : ε > 0), ∀ a : set α, a ∈ (besicovitch.vitali_family μ).sets_at x → a ⊆ closed_ball x ε → a ∈ s :=\n    (vitali_family.mem_filter_at_iff _).1 hs\n  have : Ioc (0 : exprℝ) ε ∈ nhds_within.gt (0 : exprℝ) := Ioc_mem_nhds_within_Ioi ⟨le_rfl, εpos⟩\n  filter_upwards [this] with _ hr\n  apply hε\n  · exact mem_image_of_mem _ hr.1\n  · exact closed_ball_subset_closed_ball hr.2\n#align tendsto_filter_at tendsto_filter_at\n\n",
 "monotone_Union_up_to":
 "-- `Z` is the set of points that are covered by already constructed balls\n-- `R` is the supremum of the radii of balls with centers not in `Z`\n-- return an index `b` for which the center `c b` is not in `Z`, and the radius is at\n-- least `R / τ`, if such an index exists (and garbage otherwise).\ntheorem monotone_Union_up_to : monotone p.Union_up_to :=\n  by\n  intro i j hij\n  simp only [Union_up_to]\n  exact Union_mono' fun r => ⟨⟨r, r.2.trans_le hij⟩, subset.rfl⟩\n#align monotone_Union_up_to monotone_Union_up_to\n\n",
 "mem_Union_up_to_last_step":
 "/-- Every point is covered by chosen balls, before `p.last_step`. -/\ntheorem mem_Union_up_to_last_step (x : β) : p.c x ∈ p.Union_up_to p.last_step :=\n  by\n  have A : ∀ z : β, p.c z ∈ p.Union_up_to p.last_step ∨ p.τ * p.r z < p.R p.last_step :=\n    by\n    have : p.last_step ∈ { i | ¬∃ b : β, p.c b ∉ p.Union_up_to i ∧ p.R i ≤ p.τ * p.r b } :=\n      cinfₛ_mem p.last_step_nonempty\n    simpa only [not_exists, mem_set_of_eq, not_and_or, not_le, not_not_mem]\n  by_contra\n  rcases A x with (H | H)\n  · exact h H\n  have Rpos : 0 < p.R p.last_step := by apply lt_trans (mul_pos (_root_.zero_lt_one.trans p.one_lt_tau) (p.rpos _)) H\n  have B : p.τ⁻¹ * p.R p.last_step < p.R p.last_step :=\n    by\n    conv_rhs => rw [← one_mul (p.R p.last_step)]\n    exact mul_lt_mul (inv_lt_one p.one_lt_tau) le_rfl Rpos zero_le_one\n  obtain ⟨y, hy1, hy2⟩ : ∃ y : β, p.c y ∉ p.Union_up_to p.last_step ∧ p.τ⁻¹ * p.R p.last_step < p.r y :=\n    by\n    simpa only [exists_prop, mem_range, exists_exists_and_eq_and, subtype.exists, subtype.coe_mk] using\n      exists_lt_of_lt_csupₛ _ B\n    rw [← image_univ, nonempty_image_iff]\n    exact ⟨⟨_, h⟩, mem_univ _⟩\n  rcases A y with (Hy | Hy)\n  · exact hy1 Hy\n  · rw [← div_eq_inv_mul] at hy2\n    have := (div_le_iff' (_root_.zero_lt_one.trans p.one_lt_tau)).1 hy2.le\n    exact lt_irrefl _ (Hy.trans_le this)\n#align mem_Union_up_to_last_step mem_Union_up_to_last_step\n\n",
 "last_step_nonempty":
 "theorem last_step_nonempty : { i | ¬∃ b : β, p.c b ∉ p.Union_up_to i ∧ p.R i ≤ p.τ * p.r b }.nonempty :=\n  by\n  by_contra\n  suffices H : function.injective p.index\n  exact not_injective_of_ordinal p.index H\n  intro x y hxy\n  wlog x_le_y : x ≤ y := le_total x y using x y, y x\n  rcases eq_or_lt_of_le x_le_y with (rfl | H)\n  · rfl\n  simp only [nonempty_def, not_exists, exists_prop, not_and, not_lt, not_le, mem_set_of_eq, not_forall] at h\n  specialize h y\n  have A : p.c (p.index y) ∉ p.Union_up_to y :=\n    by\n    have : p.index y = classical.epsilon fun b : β => p.c b ∉ p.Union_up_to y ∧ p.R y ≤ p.τ * p.r b :=\n      by\n      rw [tau_package.index]\n      rfl\n    rw [this]\n    exact (classical.epsilon_spec h).1\n  simp only [Union_up_to, not_exists, exists_prop, mem_Union, mem_closed_ball, not_and, not_le, subtype.exists,\n    subtype.coe_mk] at A\n  specialize A x H\n  simp [hxy] at A\n  exact (lt_irrefl _ ((p.rpos (p.index y)).trans_le A)).elim\n#align last_step_nonempty last_step_nonempty\n\n",
 "inter'":
 "/-\nCopyright (c) 2021 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\ntheorem inter' (i : fin N.succ) : dist (a.c i) (a.c (last N)) ≤ a.r i + a.r (last N) :=\n  by\n  rcases lt_or_le i (last N) with (H | H)\n  · exact a.inter i H\n  · have I : i = last N := top_le_iff.1 H\n    have := (a.rpos (last N)).le\n    simp only [I, add_nonneg this this, dist_self]\n#align inter' inter'\n\n",
 "hlast'":
 "theorem hlast' (i : fin N.succ) (h : 1 ≤ τ) : a.r (last N) ≤ τ * a.r i :=\n  by\n  rcases lt_or_le i (last N) with (H | H)\n  · exact (a.hlast i H).2\n  · have : i = last N := top_le_iff.1 H\n    rw [this]\n    exact le_mul_of_one_le_left (a.rpos _).le h\n#align hlast' hlast'\n\n",
 "exists_disjoint_closed_ball_covering_ae_of_finite_measure_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- The measurable Besicovitch covering theorem. Assume that, for any `x` in a set `s`,\none is given a set of admissible closed balls centered at `x`, with arbitrarily small radii.\nThen there exists a disjoint covering of almost all `s` by admissible closed balls centered at some\npoints of `s`.\nThis version requires that the underlying measure is finite, and that the space has the Besicovitch\ncovering property (which is satisfied for instance by normed real vector spaces). It expresses the\nconclusion in a slightly awkward form (with a subset of `α × ℝ`) coming from the proof technique.\nFor a version assuming that the measure is sigma-finite,\nsee `exists_disjoint_closed_ball_covering_ae_aux`.\nFor a version giving the conclusion in a nicer form, see `exists_disjoint_closed_ball_covering_ae`.\n-/\ntheorem exists_disjoint_closed_ball_covering_ae_of_finite_measure_aux (μ : measure α) [is_finite_measure μ]\n    (f : α → set (exprℝ)) (s : set α) (hf : ∀ x ∈ s, ∀ δ > 0, (f x ∩ Ioo 0 δ).nonempty) :\n    ∃ t : set (α × exprℝ),\n      t.countable ∧\n        (∀ p : α × exprℝ, p ∈ t → p.1 ∈ s) ∧\n          (∀ p : α × exprℝ, p ∈ t → p.2 ∈ f p.1) ∧\n            μ\n                  (s \\\n                    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                      (closed_ball p.1 p.2)) =\n                0 ∧\n              t.pairwise_disjoint fun p => closed_ball p.1 p.2 :=\n  by\n  rcases has_besicovitch_covering.no_satellite_config α with ⟨N, τ, hτ, hN⟩\n  /- Introduce a property `P` on finsets saying that we have a nice disjoint covering of a\n      subset of `s` by admissible balls. -/\n  let P : Finset (α × exprℝ) → Prop := fun t =>\n    ((t : set (α × exprℝ)).pairwise_disjoint fun p => closed_ball p.1 p.2) ∧\n      (∀ p : α × exprℝ, p ∈ t → p.1 ∈ s) ∧ ∀ p : α × exprℝ, p ∈ t → p.2 ∈ f p.1\n  /- Given a finite good covering of a subset `s`, one can find a larger finite good covering,\n    covering additionally a proportion at least `1/(N+1)` of leftover points. This follows from\n    `exist_finset_disjoint_balls_large_measure` applied to balls not intersecting the initial\n    covering. -/\n  have :\n    ∀ t : Finset (α × exprℝ),\n      P t →\n        ∃ u : Finset (α × exprℝ),\n          t ⊆ u ∧\n            P u ∧\n              μ\n                  (s \\\n                    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                      (closed_ball p.1 p.2)) ≤\n                N / (N + 1) *\n                  μ\n                    (s \\\n                      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                        (closed_ball p.1 p.2)) :=\n    by\n    intro t ht\n    set B :=\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (closed_ball p.1 p.2) with\n      hB\n    have B_closed : is_closed B := is_closed_bUnion (finset.finite_to_set _) fun i hi => is_closed_ball\n    set s' := s \\ B with hs'\n    have : ∀ x ∈ s', ∃ r ∈ f x ∩ Ioo 0 1, Disjoint B (closed_ball x r) :=\n      by\n      intro x hx\n      have xs : x ∈ s := ((mem_diff x).1 hx).1\n      rcases eq_empty_or_nonempty B with (hB | hB)\n      · have : (0 : exprℝ) < 1 := zero_lt_one\n        rcases hf x xs 1 zero_lt_one with ⟨r, hr, h'r⟩\n        exact ⟨r, ⟨hr, h'r⟩, by simp only [hB, empty_disjoint]⟩\n      · let R := inf_dist x B\n        have : 0 < min R 1 := lt_min ((B_closed.not_mem_iff_inf_dist_pos hB).1 ((mem_diff x).1 hx).2) zero_lt_one\n        rcases hf x xs _ this with ⟨r, hr, h'r⟩\n        refine' ⟨r, ⟨hr, ⟨h'r.1, h'r.2.trans_le (min_le_right _ _)⟩⟩, _⟩\n        rw [disjoint_comm]\n        exact disjoint_closed_ball_of_lt_inf_dist (h'r.2.trans_le (min_le_left _ _))\n    choose! r hr using this\n    obtain ⟨v, vs', hμv, hv⟩ :\n      ∃ v : Finset α,\n        ↑v ⊆ s' ∧\n          μ\n                (s' \\\n                  «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                    (closed_ball x (r x))) ≤\n              N / (N + 1) * μ s' ∧\n            (v : set α).pairwise_disjoint fun x : α => closed_ball x (r x) :=\n      haveI rI : ∀ x ∈ s', r x ∈ Ioo (0 : exprℝ) 1 := fun x hx => (hr x hx).1.2\n      exist_finset_disjoint_balls_large_measure μ hτ hN s' r (fun x hx => (rI x hx).1) fun x hx => (rI x hx).2.le\n    refine' ⟨t ∪ Finset.image (fun x => (x, r x)) v, Finset.subset_union_left _ _, ⟨_, _, _⟩, _⟩\n    · simp only [Finset.coe_union, pairwise_disjoint_union, ht.1, true_and_iff, Finset.coe_image]\n      constructor\n      · intro p hp q hq hpq\n        rcases(mem_image _ _ _).1 hp with ⟨p', p'v, rfl⟩\n        rcases(mem_image _ _ _).1 hq with ⟨q', q'v, rfl⟩\n        refine' hv p'v q'v fun hp'q' => _\n        rw [hp'q'] at hpq\n        exact hpq rfl\n      · intro p hp q hq hpq\n        rcases(mem_image _ _ _).1 hq with ⟨q', q'v, rfl⟩\n        apply disjoint_of_subset_left _ (hr q' (vs' q'v)).2\n        rw [hB, ← finset.set_bUnion_coe]\n        exact subset_bUnion_of_mem hp\n    · intro p hp\n      rcases Finset.mem_union.1 hp with (h'p | h'p)\n      · exact ht.2.1 p h'p\n      · rcases Finset.mem_image.1 h'p with ⟨p', p'v, rfl⟩\n        exact ((mem_diff _).1 (vs' (Finset.mem_coe.2 p'v))).1\n    · intro p hp\n      rcases Finset.mem_union.1 hp with (h'p | h'p)\n      · exact ht.2.2 p h'p\n      · rcases Finset.mem_image.1 h'p with ⟨p', p'v, rfl⟩\n        exact (hr p' (vs' p'v)).1.1\n    · convert hμv using 2\n      rw [finset.set_bUnion_union, ← diff_diff, finset.set_bUnion_finset_image]\n  /- Define `F` associating to a finite good covering the above enlarged good covering, covering\n    a proportion `1/(N+1)` of leftover points. Iterating `F`, one will get larger and larger good\n    coverings, missing in the end only a measure-zero set. -/\n  choose! F hF using this\n  let u n := («expr ^[ ]» F n) ∅\n  have u_succ : ∀ n : ℕ, u n.succ = F (u n) := fun n => by simp only [u, Function.comp_apply, function.iterate_succ']\n  have Pu : ∀ n, P (u n) := by\n    intro n\n    induction' n with n IH\n    · simp only [u, P, prod.forall, id.def, function.iterate_zero]\n      simp only [Finset.not_mem_empty, is_empty.forall_iff, Finset.coe_empty, forall₂_true_iff, and_self_iff,\n        pairwise_disjoint_empty]\n    · rw [u_succ]\n      exact (hF (u n) IH).2.1\n  refine'\n    ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (u n),\n      countable_Union fun n => (u n).countable_to_set, _, _, _, _⟩\n  · intro p hp\n    rcases mem_Union.1 hp with ⟨n, hn⟩\n    exact (Pu n).2.1 p (Finset.mem_coe.1 hn)\n  · intro p hp\n    rcases mem_Union.1 hp with ⟨n, hn⟩\n    exact (Pu n).2.2 p (Finset.mem_coe.1 hn)\n  · have A :\n      ∀ n,\n        μ\n            (s \\\n              «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                (closed_ball p.fst p.snd)) ≤\n          μ\n            (s \\\n              «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                (closed_ball p.fst p.snd)) :=\n      by\n      intro n\n      apply measure_mono\n      apply diff_subset_diff (subset.refl _)\n      exact bUnion_subset_bUnion_left (subset_Union (fun i => (u i : set (α × exprℝ))) n)\n    have B :\n      ∀ n,\n        μ\n            (s \\\n              «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                (closed_ball p.fst p.snd)) ≤\n          (N / (N + 1)) ^ n * μ s :=\n      by\n      intro n\n      induction' n with n IH\n      · simp only [le_refl, diff_empty, one_mul, Union_false, Union_empty, pow_zero]\n      calc\n        μ\n              (s \\\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (closed_ball p.fst p.snd)) ≤\n            N / (N + 1) *\n              μ\n                (s \\\n                  «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                    (closed_ball p.fst p.snd)) :=\n          by\n          rw [u_succ]\n          exact (hF (u n) (Pu n)).2.2\n        _ ≤ (N / (N + 1)) ^ n.succ * μ s := by\n          rw [pow_succ, mul_assoc]\n          exact ennreal.mul_le_mul le_rfl IH\n        \n    have C : tendsto (fun n : ℕ => ((N : ennreal) / (N + 1)) ^ n * μ s) at_top ((nhds) (0 * μ s)) :=\n      by\n      apply ennreal.tendsto.mul_const _ (or.inr (measure_lt_top μ s).ne)\n      apply ennreal.tendsto_pow_at_top_nhds_0_of_lt_1\n      rw [ennreal.div_lt_iff, one_mul]\n      · conv_lhs => rw [← add_zero (N : ennreal)]\n        exact ennreal.add_lt_add_left (ennreal.nat_ne_top N) ennreal.zero_lt_one\n      · simp only [true_or_iff, add_eq_zero_iff, ne.def, not_false_iff, one_ne_zero, and_false_iff]\n      · simp only [ennreal.nat_ne_top, ne.def, not_false_iff, or_true_iff]\n    rw [zero_mul] at C\n    apply le_bot_iff.1\n    exact le_of_tendsto_of_tendsto' tendsto_const_nhds C fun n => (A n).trans (B n)\n  · refine' (pairwise_disjoint_Union _).2 fun n => (Pu n).1\n    apply (monotone_nat_of_le_succ fun n => _).directed_le\n    rw [u_succ]\n    exact (hF (u n) (Pu n)).1\n#align\n  exists_disjoint_closed_ball_covering_ae_of_finite_measure_aux exists_disjoint_closed_ball_covering_ae_of_finite_measure_aux\n\n",
 "exists_disjoint_closed_ball_covering_ae_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- The measurable Besicovitch covering theorem. Assume that, for any `x` in a set `s`,\none is given a set of admissible closed balls centered at `x`, with arbitrarily small radii.\nThen there exists a disjoint covering of almost all `s` by admissible closed balls centered at some\npoints of `s`.\nThis version requires that the underlying measure is sigma-finite, and that the space has the\nBesicovitch covering property (which is satisfied for instance by normed real vector spaces).\nIt expresses the conclusion in a slightly awkward form (with a subset of `α × ℝ`) coming from the\nproof technique.\nFor a version giving the conclusion in a nicer form, see `exists_disjoint_closed_ball_covering_ae`.\n-/\ntheorem exists_disjoint_closed_ball_covering_ae_aux (μ : measure α) [sigma_finite μ] (f : α → set (exprℝ)) (s : set α)\n    (hf : ∀ x ∈ s, ∀ δ > 0, (f x ∩ Ioo 0 δ).nonempty) :\n    ∃ t : set (α × exprℝ),\n      t.countable ∧\n        (∀ p : α × exprℝ, p ∈ t → p.1 ∈ s) ∧\n          (∀ p : α × exprℝ, p ∈ t → p.2 ∈ f p.1) ∧\n            μ\n                  (s \\\n                    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                      (closed_ball p.1 p.2)) =\n                0 ∧\n              t.pairwise_disjoint fun p => closed_ball p.1 p.2 :=\n  by\n  /- This is deduced from the finite measure case, by using a finite measure with respect to which\n    the initial sigma-finite measure is absolutely continuous. -/\n  rcases exists_absolutely_continuous_is_finite_measure μ with ⟨ν, hν, hμν⟩\n  rcases exists_disjoint_closed_ball_covering_ae_of_finite_measure_aux ν f s hf with ⟨t, t_count, ts, tr, tν, tdisj⟩\n  exact ⟨t, t_count, ts, tr, hμν tν, tdisj⟩\n#align exists_disjoint_closed_ball_covering_ae_aux exists_disjoint_closed_ball_covering_ae_aux\n\n",
 "exists_disjoint_closed_ball_covering_ae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- The measurable Besicovitch covering theorem. Assume that, for any `x` in a set `s`,\none is given a set of admissible closed balls centered at `x`, with arbitrarily small radii.\nThen there exists a disjoint covering of almost all `s` by admissible closed balls centered at some\npoints of `s`. We can even require that the radius at `x` is bounded by a given function `R x`.\n(Take `R = 1` if you don't need this additional feature).\nThis version requires that the underlying measure is sigma-finite, and that the space has the\nBesicovitch covering property (which is satisfied for instance by normed real vector spaces).\n-/\ntheorem exists_disjoint_closed_ball_covering_ae (μ : measure α) [sigma_finite μ] (f : α → set (exprℝ)) (s : set α)\n    (hf : ∀ x ∈ s, ∀ δ > 0, (f x ∩ Ioo 0 δ).nonempty) (R : α → exprℝ) (hR : ∀ x ∈ s, 0 < R x) :\n    ∃ (t : set α)(r : α → exprℝ),\n      t.countable ∧\n        t ⊆ s ∧\n          (∀ x ∈ t, r x ∈ f x ∩ Ioo 0 (R x)) ∧\n            μ\n                  (s \\\n                    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                      (closed_ball x (r x))) =\n                0 ∧\n              t.pairwise_disjoint fun x => closed_ball x (r x) :=\n  by\n  let g x := f x ∩ Ioo 0 (R x)\n  have hg : ∀ x ∈ s, ∀ δ > 0, (g x ∩ Ioo 0 δ).nonempty :=\n    by\n    intro x hx δ δpos\n    rcases hf x hx (min δ (R x)) (lt_min δpos (hR x hx)) with ⟨r, hr⟩\n    exact ⟨r, ⟨⟨hr.1, hr.2.1, hr.2.2.trans_le (min_le_right _ _)⟩, ⟨hr.2.1, hr.2.2.trans_le (min_le_left _ _)⟩⟩⟩\n  rcases exists_disjoint_closed_ball_covering_ae_aux μ g s hg with ⟨v, v_count, vs, vg, μv, v_disj⟩\n  let t := «expr '' » prod.fst v\n  have : ∀ x ∈ t, ∃ r : exprℝ, (x, r) ∈ v := by\n    intro x hx\n    rcases(mem_image _ _ _).1 hx with ⟨⟨p, q⟩, hp, rfl⟩\n    exact ⟨q, hp⟩\n  choose! r hr using this\n  have im_t : «expr '' » (fun x => (x, r x)) t = v :=\n    by\n    have I : ∀ p : α × exprℝ, p ∈ v → 0 ≤ p.2 := fun p hp => (vg p hp).2.1.le\n    apply subset.antisymm\n    · simp only [image_subset_iff]\n      rintro ⟨x, p⟩ hxp\n      simp only [mem_preimage]\n      exact hr _ (mem_image_of_mem _ hxp)\n    · rintro ⟨x, p⟩ hxp\n      have hxrx : (x, r x) ∈ v := hr _ (mem_image_of_mem _ hxp)\n      have : p = r x := by\n        by_contra\n        have A : (x, p) ≠ (x, r x) := by simpa only [true_and_iff, prod.mk.inj_iff, eq_self_iff_true, ne.def] using h\n        have H := v_disj hxp hxrx A\n        contrapose H\n        rw [not_disjoint_iff_nonempty_inter]\n        refine' ⟨x, by simp [I _ hxp, I _ hxrx]⟩\n      rw [this]\n      apply mem_image_of_mem\n      exact mem_image_of_mem _ hxp\n  refine' ⟨t, r, v_count.image _, _, _, _, _⟩\n  · intro x hx\n    rcases(mem_image _ _ _).1 hx with ⟨⟨p, q⟩, hp, rfl⟩\n    exact vs _ hp\n  · intro x hx\n    rcases(mem_image _ _ _).1 hx with ⟨⟨p, q⟩, hp, rfl⟩\n    exact vg _ (hr _ hx)\n  · have :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (closed_ball x (r x)) =\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (closed_ball p.1 p.2) :=\n      by conv_rhs => rw [bUnion_image]\n    rw [this, im_t]\n    exact μv\n  · have A : inj_on (fun x : α => (x, r x)) t := by\n      simp (config := { contextual := true }) only [inj_on, prod.mk.inj_iff, imp_true_iff, eq_self_iff_true]\n    rwa [← im_t, A.pairwise_disjoint_image] at v_disj\n#align exists_disjoint_closed_ball_covering_ae exists_disjoint_closed_ball_covering_ae\n\n",
 "exists_closed_ball_covering_tsum_measure_le":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (U «expr ⊇ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (v «expr ⊇ » s') -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- In a space with the Besicovitch property, any set `s` can be covered with balls whose measures\nadd up to at most `μ s + ε`, for any positive `ε`. This works even if one restricts the set of\nallowed radii around a point `x` to a set `f x` which accumulates at `0`. -/\ntheorem exists_closed_ball_covering_tsum_measure_le (μ : measure α) [sigma_finite μ] [measure.outer_regular μ]\n    {ε : ennreal} (hε : ε ≠ 0) (f : α → set (exprℝ)) (s : set α) (hf : ∀ x ∈ s, ∀ δ > 0, (f x ∩ Ioo 0 δ).nonempty) :\n    ∃ (t : set α)(r : α → exprℝ),\n      t.countable ∧\n        t ⊆ s ∧\n          (∀ x ∈ t, r x ∈ f x) ∧\n            s ⊆\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (closed_ball x (r x)) ∧\n              «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n                  (μ (closed_ball x (r x))) ≤\n                μ s + ε :=\n  by\n  /- For the proof, first cover almost all `s` with disjoint balls thanks to the usual Besicovitch\n    theorem. Taking the balls included in a well-chosen open neighborhood `u` of `s`, one may\n    ensure that their measures add at most to `μ s + ε / 2`. Let `s'` be the remaining set, of measure\n    `0`. Applying the other version of Besicovitch, one may cover it with at most `N` disjoint\n    subfamilies. Making sure that they are all included in a neighborhood `v` of `s'` of measure at\n    most `ε / (2 N)`, the sum of their measures is at most `ε / 2`, completing the proof. -/\n  obtain ⟨u, su, u_open, μu⟩ : ∃ (U : _)(_ : «expr ⊇ » U s), is_open U ∧ μ U ≤ μ s + ε / 2 :=\n    set.exists_is_open_le_add _ _\n      (by simpa only [or_false_iff, ne.def, ennreal.div_zero_iff, ennreal.one_ne_top, ennreal.bit0_eq_top_iff] using hε)\n  have : ∀ x ∈ s, ∃ R > 0, ball x R ⊆ u := fun x hx => metric.mem_nhds_iff.1 (u_open.mem_nhds (su hx))\n  choose! R hR using this\n  obtain ⟨t0, r0, t0_count, t0s, hr0, μt0, t0_disj⟩ :\n    ∃ (t0 : set α)(r0 : α → exprℝ),\n      t0.countable ∧\n        t0 ⊆ s ∧\n          (∀ x ∈ t0, r0 x ∈ f x ∩ Ioo 0 (R x)) ∧\n            μ\n                  (s \\\n                    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                      (closed_ball x (r0 x))) =\n                0 ∧\n              t0.pairwise_disjoint fun x => closed_ball x (r0 x) :=\n    exists_disjoint_closed_ball_covering_ae μ f s hf R fun x hx => (hR x hx).1\n  -- we have constructed an almost everywhere covering of `s` by disjoint balls. Let `s'` be the\n  -- remaining set.\n  let s' :=\n    s \\\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (closed_ball x (r0 x))\n  have s's : s' ⊆ s := diff_subset _ _\n  obtain ⟨N, τ, hτ, H⟩ : ∃ N τ, 1 < τ ∧ is_empty (besicovitch.satellite_config α N τ) :=\n    has_besicovitch_covering.no_satellite_config α\n  obtain ⟨v, s'v, v_open, μv⟩ : ∃ (v : _)(_ : «expr ⊇ » v s'), is_open v ∧ μ v ≤ μ s' + ε / 2 / N :=\n    set.exists_is_open_le_add _ _\n      (by\n        simp only [hε, ennreal.nat_ne_top, WithTop.mul_eq_top_iff, ne.def, ennreal.div_zero_iff, ennreal.one_ne_top,\n          not_false_iff, and_false_iff, false_and_iff, or_self_iff, ennreal.bit0_eq_top_iff])\n  have : ∀ x ∈ s', ∃ r1 ∈ f x ∩ Ioo (0 : exprℝ) 1, closed_ball x r1 ⊆ v :=\n    by\n    intro x hx\n    rcases metric.mem_nhds_iff.1 (v_open.mem_nhds (s'v hx)) with ⟨r, rpos, hr⟩\n    rcases hf x (s's hx) (min r 1) (lt_min rpos zero_lt_one) with ⟨R', hR'⟩\n    exact\n      ⟨R', ⟨hR'.1, hR'.2.1, hR'.2.2.trans_le (min_le_right _ _)⟩,\n        subset.trans (closed_ball_subset_ball (hR'.2.2.trans_le (min_le_left _ _))) hr⟩\n  choose! r1 hr1 using this\n  let q : ball_package s' α :=\n    { c := fun x => x\n      r := fun x => r1 x\n      rpos := fun x => (hr1 x.1 x.2).1.2.1\n      r_bound := 1\n      r_le := fun x => (hr1 x.1 x.2).1.2.2.le }\n  -- by Besicovitch, we cover `s'` with at most `N` families of disjoint balls, all included in\n  -- a suitable neighborhood `v` of `s'`.\n  obtain ⟨S, S_disj, hS⟩ :\n    ∃ S : fin N → set s',\n      (∀ i : fin N, (S i).pairwise_disjoint fun j => closed_ball (q.c j) (q.r j)) ∧\n        range q.c ⊆\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n              (ball (q.c j) (q.r j))) :=\n    exist_disjoint_covering_families hτ H q\n  have S_count : ∀ i, (S i).countable := by\n    intro i\n    apply (S_disj i).countable_of_nonempty_interior fun j hj => _\n    have : (ball (j : α) (r1 j)).nonempty := nonempty_ball.2 (q.rpos _)\n    exact this.mono ball_subset_interior_closed_ball\n  let r x := if x ∈ s' then r1 x else r0 x\n  have r_t0 : ∀ x ∈ t0, r x = r0 x := by\n    intro x hx\n    have : ¬x ∈ s' :=\n      by\n      simp only [not_exists, exists_prop, mem_Union, mem_closed_ball, not_and, not_lt, not_le, mem_diff, not_forall]\n      intro h'x\n      refine' ⟨x, hx, _⟩\n      rw [dist_self]\n      exact (hr0 x hx).2.1.le\n    simp only [r, if_neg this]\n  -- the desired covering set is given by the union of the families constructed in the first and\n  -- second steps.\n  refine'\n    ⟨t0 ∪\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          («expr '' » (coe : s' → α) (S i)),\n      r, _, _, _, _, _⟩\n  -- it remains to check that they have the desired properties\n  · exact t0_count.union (countable_Union fun i => (S_count i).image _)\n  · simp only [t0s, true_and_iff, union_subset_iff, image_subset_iff, Union_subset_iff]\n    intro i x hx\n    exact s's x.2\n  · intro x hx\n    cases hx\n    · rw [r_t0 x hx]\n      exact (hr0 _ hx).1\n    · have h'x : x ∈ s' := by\n        simp only [mem_Union, mem_image] at hx\n        rcases hx with ⟨i, y, ySi, rfl⟩\n        exact y.2\n      simp only [r, if_pos h'x, (hr1 x h'x).1.1]\n  · intro x hx\n    by_cases h'x : x ∈ s'\n    · obtain ⟨i, y, ySi, xy⟩ : ∃ (i : fin N)(y : «expr↥ » s')(ySi : y ∈ S i), x ∈ ball (y : α) (r1 y) :=\n        by\n        have A : x ∈ range q.c := by\n          simpa only [not_exists, exists_prop, mem_Union, mem_closed_ball, not_and, not_le, mem_set_of_eq,\n            Subtype.range_coe_subtype, mem_diff] using h'x\n        simpa only [mem_Union, mem_image] using hS A\n      refine' mem_Union₂.2 ⟨y, or.inr _, _⟩\n      · simp only [mem_Union, mem_image]\n        exact ⟨i, y, ySi, rfl⟩\n      · have : (y : α) ∈ s' := y.2\n        simp only [r, if_pos this]\n        exact ball_subset_closed_ball xy\n    · obtain ⟨y, yt0, hxy⟩ : ∃ y : α, y ∈ t0 ∧ x ∈ closed_ball y (r0 y) := by simpa [hx, -mem_closed_ball] using h'x\n      refine' mem_Union₂.2 ⟨y, or.inl yt0, _⟩\n      rwa [r_t0 _ yt0]\n  -- the only nontrivial property is the measure control, which we check now\n  · -- the sets in the first step have measure at most `μ s + ε / 2`\n    have A :\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (μ (closed_ball x (r x))) ≤\n        μ s + ε / 2 :=\n      calc\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r x))) =\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r0 x))) :=\n          by\n          congr 1\n          ext x\n          rw [r_t0 x x.2]\n        _ =\n            μ\n              («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                (closed_ball x (r0 x))) :=\n          by\n          haveI : Encodable t0 := t0_count.to_encodable\n          rw [measure_Union]\n          · exact (pairwise_subtype_iff_pairwise_set _ _).2 t0_disj\n          · exact fun i => measurable_set_closed_ball\n        _ ≤ μ u := by\n          apply measure_mono\n          simp only [SetCoe.forall, subtype.coe_mk, Union_subset_iff]\n          intro x hx\n          apply subset.trans (closed_ball_subset_ball (hr0 x hx).2.2) (hR x (t0s hx)).2\n        _ ≤ μ s + ε / 2 := μu\n        \n    -- each subfamily in the second step has measure at most `ε / (2 N)`.\n    have B :\n      ∀ i : fin N,\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (μ (closed_ball x (r x))) ≤\n          ε / 2 / N :=\n      fun i =>\n      calc\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r x))) =\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r x))) :=\n          by\n          have : inj_on (coe : s' → α) (S i) := subtype.coe_injective.inj_on _\n          let F : «expr ≃ » (S i) («expr '' » (coe : s' → α) (S i)) := this.bij_on_image.equiv _\n          exact (F.tsum_eq fun x => μ (closed_ball x (r x))).symm\n        _ =\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r1 x))) :=\n          by\n          congr 1\n          ext x\n          have : (x : α) ∈ s' := x.1.2\n          simp only [r, if_pos this]\n        _ =\n            μ\n              («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                (closed_ball x (r1 x))) :=\n          by\n          haveI : Encodable (S i) := (S_count i).to_encodable\n          rw [measure_Union]\n          · exact (pairwise_subtype_iff_pairwise_set _ _).2 (S_disj i)\n          · exact fun i => measurable_set_closed_ball\n        _ ≤ μ v := by\n          apply measure_mono\n          simp only [SetCoe.forall, subtype.coe_mk, Union_subset_iff]\n          intro x xs' xSi\n          exact (hr1 x xs').2\n        _ ≤ ε / 2 / N := by\n          have : μ s' = 0 := μt0\n          rwa [this, zero_add] at μv\n        \n    -- add up all these to prove the desired estimate\n    calc\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (μ (closed_ball x (r x))) ≤\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r x))) +\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r x))) :=\n        ennreal.tsum_union_le (fun x => μ (closed_ball x (r x))) _ _\n      _ ≤\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (closed_ball x (r x))) +\n            finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n                (μ (closed_ball x (r x)))) :=\n        add_le_add le_rfl (ennreal.tsum_Union_le (fun x => μ (closed_ball x (r x))) _)\n      _ ≤\n          μ s + ε / 2 +\n            finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              (ε / 2 / N) :=\n        by\n        refine' add_le_add A _\n        refine' finset.sum_le_sum _\n        intro i hi\n        exact B i\n      _ ≤ μ s + ε / 2 + ε / 2 := by\n        refine' add_le_add le_rfl _\n        simp only [finset.card_fin, finset.sum_const, nsmul_eq_mul, ennreal.mul_div_le]\n      _ = μ s + ε := by rw [add_assoc, ennreal.add_halves]\n      \n#align exists_closed_ball_covering_tsum_measure_le exists_closed_ball_covering_tsum_measure_le\n\n",
 "exist_finset_disjoint_balls_large_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- Consider, for each `x` in a set `s`, a radius `r x ∈ (0, 1]`. Then one can find finitely\nmany disjoint balls of the form `closed_ball x (r x)` covering a proportion `1/(N+1)` of `s`, if\nthere are no satellite configurations with `N+1` points.\n-/\ntheorem exist_finset_disjoint_balls_large_measure (μ : measure α) [is_finite_measure μ] {N : ℕ} {τ : exprℝ} (hτ : 1 < τ)\n    (hN : is_empty (satellite_config α N τ)) (s : set α) (r : α → exprℝ) (rpos : ∀ x ∈ s, 0 < r x)\n    (rle : ∀ x ∈ s, r x ≤ 1) :\n    ∃ t : Finset α,\n      ↑t ⊆ s ∧\n        μ\n              (s \\\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (closed_ball x (r x))) ≤\n            N / (N + 1) * μ s ∧\n          (t : set α).pairwise_disjoint fun x => closed_ball x (r x) :=\n  by\n  -- exclude the trivial case where `μ s = 0`.\n  rcases le_or_lt (μ s) 0 with (hμs | hμs)\n  · have : μ s = 0 := le_bot_iff.1 hμs\n    refine' ⟨∅, by simp only [Finset.coe_empty, empty_subset], _, _⟩\n    · simp only [this, diff_empty, Union_false, Union_empty, nonpos_iff_eq_zero, mul_zero]\n    · simp only [Finset.coe_empty, pairwise_disjoint_empty]\n  cases isEmpty_or_nonempty α\n  · simp only [eq_empty_of_is_empty s, measure_empty] at hμs\n    exact (lt_irrefl _ hμs).elim\n  have Npos : N ≠ 0 := by\n    rintro rfl\n    inhabit α\n    exact (not_isEmpty_of_nonempty _) hN\n  -- introduce a measurable superset `o` with the same measure, for measure computations\n  obtain ⟨o, so, omeas, μo⟩ : ∃ o : set α, s ⊆ o ∧ measurable_set o ∧ μ o = μ s := exists_measurable_superset μ s\n  /- We will apply the topological Besicovitch theorem, giving `N` disjoint subfamilies of balls\n    covering `s`. Among these, one of them covers a proportion at least `1/N` of `s`. A large\n    enough finite subfamily will then cover a proportion at least `1/(N+1)`. -/\n  let a : ball_package s α :=\n    { c := fun x => x\n      r := fun x => r x\n      rpos := fun x => rpos x x.2\n      r_bound := 1\n      r_le := fun x => rle x x.2 }\n  rcases exist_disjoint_covering_families hτ hN a with ⟨u, hu, hu'⟩\n  have u_count : ∀ i, (u i).countable := by\n    intro i\n    refine' (hu i).countable_of_nonempty_interior fun j hj => _\n    have : (ball (j : α) (r j)).nonempty := nonempty_ball.2 (a.rpos _)\n    exact this.mono ball_subset_interior_closed_ball\n  let v : fin N → set α := fun i =>\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n      (closed_ball x (r x))\n  have : ∀ i, measurable_set (v i) := fun i => measurable_set.bUnion (u_count i) fun b hb => measurable_set_closed_ball\n  have A :\n    s = «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s ∩ v i) :=\n    by\n    refine' subset.antisymm _ (Union_subset fun i => inter_subset_left _ _)\n    intro x hx\n    obtain ⟨i, y, hxy, h'⟩ : ∃ (i : fin N)(i_1 : «expr↥ » s)(i : i_1 ∈ u i), x ∈ ball (↑i_1) (r ↑i_1) :=\n      by\n      have : x ∈ range a.c := by simpa only [Subtype.range_coe_subtype, set_of_mem_eq]\n      simpa only [mem_Union] using hu' this\n    refine' mem_Union.2 ⟨i, ⟨hx, _⟩⟩\n    simp only [v, exists_prop, mem_Union, SetCoe.exists, exists_and_right, subtype.coe_mk]\n    exact ⟨y, ⟨y.2, by simpa only [subtype.coe_eta] ⟩, ball_subset_closed_ball h'⟩\n  have S :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (μ s / N) ≤\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (μ (s ∩ v i)) :=\n    calc\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (μ s / N) =\n          μ s :=\n        by\n        simp only [finset.card_fin, finset.sum_const, nsmul_eq_mul]\n        rw [ennreal.mul_div_cancel']\n        · simp only [Npos, ne.def, Nat.cast_eq_zero, not_false_iff]\n        · exact ennreal.nat_ne_top _\n      _ ≤\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (μ (s ∩ v i)) :=\n        by\n        conv_lhs => rw [A]\n        apply measure_Union_fintype_le\n      \n  -- choose an index `i` of a subfamily covering at least a proportion `1/N` of `s`.\n  obtain ⟨i, -, hi⟩ : ∃ (i : fin N)(hi : i ∈ finset.univ), μ s / N ≤ μ (s ∩ v i) :=\n    by\n    apply ennreal.exists_le_of_sum_le _ S\n    exact ⟨⟨0, bot_lt_iff_ne_bot.2 Npos⟩, finset.mem_univ _⟩\n  replace hi : μ s / (N + 1) < μ (s ∩ v i)\n  · apply lt_of_lt_of_le _ hi\n    apply (ennreal.mul_lt_mul_left hμs.ne' (measure_lt_top μ s).ne).2\n    rw [ennreal.inv_lt_inv]\n    conv_lhs => rw [← add_zero (N : ennreal)]\n    exact ennreal.add_lt_add_left (ennreal.nat_ne_top N) ennreal.zero_lt_one\n  have B :\n    μ (o ∩ v i) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (μ (o ∩ closed_ball x (r x))) :=\n    by\n    have :\n      o ∩ v i =\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (o ∩ closed_ball x (r x)) :=\n      by simp only [inter_Union]\n    rw [this, measure_bUnion (u_count i)]\n    · rfl\n    · exact (hu i).mono fun k => inter_subset_right _ _\n    · exact fun b hb => omeas.inter measurable_set_closed_ball\n  -- A large enough finite subfamily of `u i` will also cover a proportion `> 1/(N+1)` of `s`.\n  -- Since `s` might not be measurable, we express this in terms of the measurable superset `o`.\n  obtain ⟨w, hw⟩ :\n    ∃ w : Finset (u i),\n      μ s / (N + 1) <\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" w\n          (μ (o ∩ closed_ball (x : α) (r (x : α)))) :=\n    by\n    have C : has_sum (fun x : u i => μ (o ∩ closed_ball x (r x))) (μ (o ∩ v i)) :=\n      by\n      rw [B]\n      exact ennreal.summable.has_sum\n    have : μ s / (N + 1) < μ (o ∩ v i) := hi.trans_le (measure_mono (inter_subset_inter_left _ so))\n    exact ((tendsto_order.1 C).1 _ this).exists\n  -- Bring back the finset `w i` of `↑(u i)` to a finset of `α`, and check that it works by design.\n  refine' ⟨Finset.image (fun x : u i => x) w, _, _, _⟩\n  -- show that the finset is included in `s`.\n  · simp only [image_subset_iff, coe_coe, Finset.coe_image]\n    intro y hy\n    simp only [subtype.coe_prop, mem_preimage]\n  -- show that it covers a large enough proportion of `s`. For measure computations, we do not\n  -- use `s` (which might not be measurable), but its measurable superset `o`. Since their measures\n  -- are the same, this does not spoil the estimates\n  · suffices H :\n      μ\n          (o \\\n            «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n              (closed_ball (↑x) (r ↑x))) ≤\n        N / (N + 1) * μ s\n    · rw [finset.set_bUnion_finset_image]\n      exact le_trans (measure_mono (diff_subset_diff so (subset.refl _))) H\n    rw [← diff_inter_self_eq_diff, measure_diff_le_iff_le_add _ (inter_subset_right _ _) (measure_lt_top μ _).ne]\n    swap\n    · apply measurable_set.inter _ omeas\n      haveI : Encodable (u i) := (u_count i).to_encodable\n      exact measurable_set.Union fun b => measurable_set.Union fun hb => measurable_set_closed_ball\n    calc\n      μ o = 1 / (N + 1) * μ s + N / (N + 1) * μ s := by\n        rw [μo, ← add_mul, ennreal.div_add_div_same, add_comm, ennreal.div_self, one_mul] <;> simp\n      _ ≤\n          μ\n              («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (closed_ball (↑x) (r ↑x)) ∩\n                o) +\n            N / (N + 1) * μ s :=\n        by\n        refine' add_le_add _ le_rfl\n        rw [div_eq_mul_inv, one_mul, mul_comm, ← div_eq_mul_inv]\n        apply hw.le.trans (le_of_eq _)\n        rw [← finset.set_bUnion_coe, inter_comm _ o, inter_Union₂, finset.set_bUnion_coe, measure_bUnion_finset]\n        · have : (w : set (u i)).pairwise_disjoint fun b : u i => closed_ball (b : α) (r (b : α)) :=\n            by\n            intro k hk l hl hkl\n            exact hu i k.2 l.2 (subtype.coe_injective.ne hkl)\n          exact this.mono fun k => inter_subset_right _ _\n        · intro b hb\n          apply omeas.inter measurable_set_closed_ball\n      \n  -- show that the balls are disjoint\n  · intro k hk l hl hkl\n    obtain ⟨k', k'w, rfl⟩ : ∃ k' : u i, k' ∈ w ∧ ↑↑k' = k := by\n      simpa only [mem_image, Finset.mem_coe, coe_coe, Finset.coe_image] using hk\n    obtain ⟨l', l'w, rfl⟩ : ∃ l' : u i, l' ∈ w ∧ ↑↑l' = l := by\n      simpa only [mem_image, Finset.mem_coe, coe_coe, Finset.coe_image] using hl\n    have k'nel' : (k' : s) ≠ l' := by\n      intro h\n      rw [h] at hkl\n      exact hkl rfl\n    exact hu i k'.2 l'.2 k'nel'\n#align exist_finset_disjoint_balls_large_measure exist_finset_disjoint_balls_large_measure\n\n",
 "exist_disjoint_covering_families":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- The topological Besicovitch covering theorem: there exist finitely many families of disjoint\nballs covering all the centers in a package. More specifically, one can use `N` families if there\nare no satellite configurations with `N+1` points. -/\ntheorem exist_disjoint_covering_families {N : ℕ} {τ : exprℝ} (hτ : 1 < τ) (hN : is_empty (satellite_config α N τ))\n    (q : ball_package β α) :\n    ∃ s : fin N → set β,\n      (∀ i : fin N, (s i).pairwise_disjoint fun j => closed_ball (q.c j) (q.r j)) ∧\n        range q.c ⊆\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n              (ball (q.c j) (q.r j))) :=\n  by\n  -- first exclude the trivial case where `β` is empty (we need non-emptiness for the transfinite\n  -- induction, to be able to choose garbage when there is no point left).\n  cases isEmpty_or_nonempty β\n  · refine' ⟨fun i => ∅, fun i => pairwise_disjoint_empty, _⟩\n    rw [← image_univ, eq_empty_of_is_empty (univ : set β)]\n    simp\n  -- Now, assume `β` is nonempty.\n  let p : tau_package β α :=\n    { q with\n      τ\n      one_lt_tau := hτ }\n  -- we use for `s i` the balls of color `i`.\n  let s := fun i : fin N =>\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n      ({p.index k} : set β)\n  refine' ⟨s, fun i => _, _⟩\n  · -- show that balls of the same color are disjoint\n    intro x hx y hy x_ne_y\n    obtain ⟨jx, jx_lt, jxi, rfl⟩ : ∃ jx : ordinal, jx < p.last_step ∧ p.color jx = i ∧ x = p.index jx := by\n      simpa only [exists_prop, mem_Union, mem_singleton_iff] using hx\n    obtain ⟨jy, jy_lt, jyi, rfl⟩ : ∃ jy : ordinal, jy < p.last_step ∧ p.color jy = i ∧ y = p.index jy := by\n      simpa only [exists_prop, mem_Union, mem_singleton_iff] using hy\n    wlog (discharger := tactic.skip) jxy : jx ≤ jy := le_total jx jy using jx jy, jy jx\n    swap\n    · intro h1 h2 h3 h4 h5 h6 h7\n      rw [function.on_fun, disjoint_comm]\n      exact this h4 h5 h6 h1 h2 h3 h7.symm\n    replace jxy : jx < jy\n    · rcases lt_or_eq_of_le jxy with (H | rfl)\n      · exact H\n      · exact (x_ne_y rfl).elim\n    let A : set ℕ :=\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" {p.color j}\n    have color_j : p.color jy = Inf (univ \\ A) := by rw [tau_package.color]\n    have : p.color jy ∈ univ \\ A := by\n      rw [color_j]\n      apply cinfₛ_mem\n      refine' ⟨N, _⟩\n      simp only [not_exists, true_and_iff, exists_prop, mem_Union, mem_singleton_iff, not_and, mem_univ, mem_diff,\n        subtype.exists, subtype.coe_mk]\n      intro k hk H\n      exact (p.color_lt (hk.trans jy_lt) hN).ne'\n    simp only [not_exists, true_and_iff, exists_prop, mem_Union, mem_singleton_iff, not_and, mem_univ, mem_diff,\n      subtype.exists, subtype.coe_mk] at this\n    specialize this jx jxy\n    contrapose! this\n    simpa only [jxi, jyi, and_true_iff, eq_self_iff_true, ← not_disjoint_iff_nonempty_inter]\n  · -- show that the balls of color at most `N` cover every center.\n    refine' range_subset_iff.2 fun b => _\n    obtain ⟨a, ha⟩ : ∃ a : ordinal, a < p.last_step ∧ dist (p.c b) (p.c (p.index a)) < p.r (p.index a) := by\n      simpa only [Union_up_to, exists_prop, mem_Union, mem_ball, subtype.exists, subtype.coe_mk] using\n        p.mem_Union_up_to_last_step b\n    simp only [exists_prop, mem_Union, mem_ball, mem_singleton_iff, bUnion_and', exists_eq_left, Union_exists,\n      exists_and_left]\n    exact ⟨⟨p.color a, p.color_lt ha.1 hN⟩, a, rfl, ha⟩\n#align exist_disjoint_covering_families exist_disjoint_covering_families\n\n",
 "color_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- If there are no configurations of satellites with `N+1` points, one never uses more than `N`\ndistinct families in the Besicovitch inductive construction. -/\ntheorem color_lt {i : ordinal.{u}} (hi : i < p.last_step) {N : ℕ} (hN : is_empty (satellite_config α N p.τ)) :\n    p.color i < N :=\n  by\n  /- By contradiction, consider the first ordinal `i` for which one would have `p.color i = N`.\n    Choose for each `k < N` a ball with color `k` that intersects the ball at color `i`\n    (there is such a ball, otherwise one would have used the color `k` and not `N`).\n    Then this family of `N+1` balls forms a satellite configuration, which is forbidden by\n    the assumption `hN`. -/\n  induction' i using ordinal.induction with i IH\n  let A : set ℕ :=\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" {p.color j}\n  have color_i : p.color i = Inf (univ \\ A) := by rw [color]\n  rw [color_i]\n  have N_mem : N ∈ univ \\ A :=\n    by\n    simp only [not_exists, true_and_iff, exists_prop, mem_Union, mem_singleton_iff, mem_closed_ball, not_and, mem_univ,\n      mem_diff, subtype.exists, subtype.coe_mk]\n    intro j ji hj\n    exact (IH j ji (ji.trans hi)).ne'\n  suffices Inf (univ \\ A) ≠ N\n    by\n    rcases(cinfₛ_le (OrderBot.bddBelow (univ \\ A)) N_mem).lt_or_eq with (H | H)\n    · exact H\n    · exact (this H).elim\n  intro Inf_eq_N\n  have :\n    ∀ k,\n      k < N →\n        ∃ j,\n          j < i ∧\n            (closed_ball (p.c (p.index j)) (p.r (p.index j)) ∩\n                  closed_ball (p.c (p.index i)) (p.r (p.index i))).nonempty ∧\n              k = p.color j :=\n    by\n    intro k hk\n    rw [← Inf_eq_N] at hk\n    have : k ∈ A := by simpa only [true_and_iff, mem_univ, not_not, mem_diff] using nat.not_mem_of_lt_Inf hk\n    simp at this\n    simpa only [exists_prop, mem_Union, mem_singleton_iff, mem_closed_ball, subtype.exists, subtype.coe_mk]\n  choose! g hg using this\n  -- Choose for each `k < N` an ordinal `G k < i`  giving a ball of color `k` intersecting\n  -- the last ball.\n  let G : ℕ → ordinal := fun n => if n = N then i else g n\n  have color_G : ∀ n, n ≤ N → p.color (G n) = n := by\n    intro n hn\n    rcases hn.eq_or_lt with (rfl | H)\n    · simp only [G]\n      simp only [color_i, Inf_eq_N, if_true, eq_self_iff_true]\n    · simp only [G]\n      simp only [H.ne, (hg n H).right.right.symm, if_false]\n  have G_lt_last : ∀ n, n ≤ N → G n < p.last_step := by\n    intro n hn\n    rcases hn.eq_or_lt with (rfl | H)\n    · simp only [G]\n      simp only [hi, if_true, eq_self_iff_true]\n    · simp only [G]\n      simp only [H.ne, (hg n H).left.trans hi, if_false]\n  have fGn : ∀ n, n ≤ N → p.c (p.index (G n)) ∉ p.Union_up_to (G n) ∧ p.R (G n) ≤ p.τ * p.r (p.index (G n)) :=\n    by\n    intro n hn\n    have : p.index (G n) = classical.epsilon fun t => p.c t ∉ p.Union_up_to (G n) ∧ p.R (G n) ≤ p.τ * p.r t :=\n      by\n      rw [index]\n      rfl\n    rw [this]\n    have : ∃ t, p.c t ∉ p.Union_up_to (G n) ∧ p.R (G n) ≤ p.τ * p.r t := by\n      simpa only [not_exists, exists_prop, not_and, not_lt, not_le, mem_set_of_eq, not_forall] using\n        not_mem_of_lt_cinfₛ (G_lt_last n hn) (OrderBot.bddBelow _)\n    exact classical.epsilon_spec this\n  -- the balls with indices `G k` satisfy the characteristic property of satellite configurations.\n  have Gab :\n    ∀ a b : fin (nat.succ N),\n      G a < G b →\n        p.r (p.index (G a)) ≤ dist (p.c (p.index (G a))) (p.c (p.index (G b))) ∧\n          p.r (p.index (G b)) ≤ p.τ * p.r (p.index (G a)) :=\n    by\n    intro a b G_lt\n    have ha : (a : ℕ) ≤ N := Nat.lt_succ_iff.1 a.2\n    have hb : (b : ℕ) ≤ N := Nat.lt_succ_iff.1 b.2\n    constructor\n    · have := (fGn b hb).1\n      simp only [Union_up_to, not_exists, exists_prop, mem_Union, mem_closed_ball, not_and, not_le, subtype.exists,\n        subtype.coe_mk] at this\n      simpa only [dist_comm, mem_ball, not_lt] using this (G a) G_lt\n    · apply le_trans _ (fGn a ha).2\n      have B : p.c (p.index (G b)) ∉ p.Union_up_to (G a) :=\n        by\n        intro H\n        exact (fGn b hb).1 (p.monotone_Union_up_to G_lt.le H)\n      let b' : { t // p.c t ∉ p.Union_up_to (G a) } := ⟨p.index (G b), B⟩\n      apply @le_csupᵢ _ _ _ (fun t : { t // p.c t ∉ p.Union_up_to (G a) } => p.r t) _ b'\n      refine' ⟨p.r_bound, fun t ht => _⟩\n      simp only [exists_prop, mem_range, subtype.exists, subtype.coe_mk] at ht\n      rcases ht with ⟨u, hu⟩\n      rw [← hu.2]\n      exact p.r_le _\n  -- therefore, one may use them to construct a satellite configuration with `N+1` points\n  let sc : satellite_config α N p.τ :=\n    { c := fun k => p.c (p.index (G k))\n      r := fun k => p.r (p.index (G k))\n      rpos := fun k => p.rpos (p.index (G k))\n      h := by\n        intro a b a_ne_b\n        wlog (discharger := tactic.skip) G_le : G a ≤ G b := le_total (G a) (G b) using a b, b a\n        · have G_lt : G a < G b := by\n            rcases G_le.lt_or_eq with (H | H)\n            · exact H\n            have A : (a : ℕ) ≠ b := fin.coe_injective.ne a_ne_b\n            rw [← color_G a (Nat.lt_succ_iff.1 a.2), ← color_G b (Nat.lt_succ_iff.1 b.2), H] at A\n            exact (A rfl).elim\n          exact or.inl (Gab a b G_lt)\n        · intro a_ne_b\n          rw [or_comm']\n          exact this a_ne_b.symm\n      hlast := by\n        intro a ha\n        have I : (a : ℕ) < N := ha\n        have : G a < G (Fin.last N) := by\n          dsimp [G]\n          simp [I.ne, (hg a I).1]\n        exact Gab _ _ this\n      inter := by\n        intro a ha\n        have I : (a : ℕ) < N := ha\n        have J : G (Fin.last N) = i := by\n          dsimp [G]\n          simp only [if_true, eq_self_iff_true]\n        have K : G a = g a := by\n          dsimp [G]\n          simp [I.ne, (hg a I).1]\n        convert dist_le_add_of_nonempty_closed_ball_inter_closed_ball (hg _ I).2.1 }\n  -- this is a contradiction\n  exact (hN.false : _) sc\n#align color_lt color_lt\n\n",
 "ae_tendsto_rn_deriv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- In a space with the Besicovitch covering property, the ratio of the measure of balls converges\nalmost surely to to the Radon-Nikodym derivative. -/\ntheorem ae_tendsto_rn_deriv (ρ μ : measure β) [is_locally_finite_measure μ] [is_locally_finite_measure ρ] :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (tendsto (fun r => ρ (closed_ball x r) / μ (closed_ball x r)) (nhds_within.gt 0) ((nhds) (ρ.rn_deriv μ x))) :=\n  by\n  filter_upwards [vitali_family.ae_tendsto_rn_deriv (besicovitch.vitali_family μ) ρ] with x hx\n  exact hx.comp (tendsto_filter_at μ x)\n#align ae_tendsto_rn_deriv ae_tendsto_rn_deriv\n\n",
 "ae_tendsto_measure_inter_div_of_measurable_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Given a measurable set `s`, then `μ (s ∩ closed_ball x r) / μ (closed_ball x r)` converges when\n`r` tends to `0`, for almost every `x`. The limit is `1` for `x ∈ s` and `0` for `x ∉ s`.\nThis shows that almost every point of `s` is a Lebesgue density point for `s`.\nA version for non-measurable sets holds, but it only gives the first conclusion,\nsee `ae_tendsto_measure_inter_div`. -/\ntheorem ae_tendsto_measure_inter_div_of_measurable_set (μ : measure β) [is_locally_finite_measure μ] {s : set β}\n    (hs : measurable_set s) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (tendsto (fun r => μ (s ∩ closed_ball x r) / μ (closed_ball x r)) (nhds_within.gt 0)\n        ((nhds) (s.indicator 1 x))) :=\n  by\n  filter_upwards [vitali_family.ae_tendsto_measure_inter_div_of_measurable_set (besicovitch.vitali_family μ) hs]\n  intro x hx\n  exact hx.comp (tendsto_filter_at μ x)\n#align ae_tendsto_measure_inter_div_of_measurable_set ae_tendsto_measure_inter_div_of_measurable_set\n\n",
 "ae_tendsto_measure_inter_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Given an arbitrary set `s`, then `μ (s ∩ closed_ball x r) / μ (closed_ball x r)` converges\nto `1` when `r` tends to `0`, for almost every `x` in `s`.\nThis shows that almost every point of `s` is a Lebesgue density point for `s`.\nA stronger version holds for measurable sets, see `ae_tendsto_measure_inter_div_of_measurable_set`.\n\nSee also `is_doubling_measure.ae_tendsto_measure_inter_div`. -/\ntheorem ae_tendsto_measure_inter_div (μ : measure β) [is_locally_finite_measure μ] (s : set β) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" (μ.restrict s)\n      (tendsto (fun r => μ (s ∩ closed_ball x r) / μ (closed_ball x r)) (nhds_within.gt 0) ((nhds) 1)) :=\n  by\n  filter_upwards [vitali_family.ae_tendsto_measure_inter_div\n      (besicovitch.vitali_family μ)] with x hx using hx.comp (tendsto_filter_at μ x)\n#align ae_tendsto_measure_inter_div ae_tendsto_measure_inter_div\n\n"}