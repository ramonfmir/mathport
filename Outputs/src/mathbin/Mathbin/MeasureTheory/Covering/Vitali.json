{"exists_disjoint_subfamily_covering_enlargment_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (u «expr ⊆ » t) -/\n/-- Vitali covering theorem, closed balls version: given a family `t` of closed balls, one can\nextract a disjoint subfamily `u ⊆ t` so that all balls in `t` are covered by the 5-times\ndilations of balls in `u`. -/\ntheorem exists_disjoint_subfamily_covering_enlargment_closed_ball [MetricSpace α] (t : Set ι) (x : ι → α)\n    (r : ι → exprℝ) (R : exprℝ) (hr : ∀ a ∈ t, r a ≤ R) :\n    ∃ (u : _)(_ : u ⊆ t),\n      (u.pairwise_disjoint fun a => closedBall (x a) (r a)) ∧\n        ∀ a ∈ t, ∃ b ∈ u, closedBall (x a) (r a) ⊆ closedBall (x b) (5 * r b) :=\n  by\n  rcases eq_empty_or_nonempty t with (rfl | tnonempty)\n  · exact ⟨∅, subset.refl _, pairwise_disjoint_empty, by simp⟩\n  by_cases ht : ∀ a ∈ t, r a < 0\n  ·\n    exact\n      ⟨t, subset.rfl, fun a ha b hb hab => by\n        simp only [function.on_fun, closed_ball_eq_empty.2 (ht a ha), empty_disjoint], fun a ha =>\n        ⟨a, ha, by simp only [closed_ball_eq_empty.2 (ht a ha), empty_subset]⟩⟩\n  push_neg  at ht\n  let t' := { a ∈ t | 0 ≤ r a }\n  rcases exists_disjoint_subfamily_covering_enlargment (fun a => closed_ball (x a) (r a)) t' r 2 one_lt_two\n      (fun a ha => ha.2) R (fun a ha => hr a ha.1) fun a ha => ⟨x a, mem_closed_ball_self ha.2⟩ with\n    ⟨u, ut', u_disj, hu⟩\n  have A : ∀ a ∈ t', ∃ b ∈ u, closed_ball (x a) (r a) ⊆ closed_ball (x b) (5 * r b) :=\n    by\n    intro a ha\n    rcases hu a ha with ⟨b, bu, hb, rb⟩\n    refine' ⟨b, bu, _⟩\n    have : dist (x a) (x b) ≤ r a + r b := dist_le_add_of_nonempty_closed_ball_inter_closed_ball hb\n    apply closed_ball_subset_closed_ball'\n    linarith\n  refine' ⟨u, ut'.trans fun a ha => ha.1, u_disj, fun a ha => _⟩\n  rcases le_or_lt 0 (r a) with (h'a | h'a)\n  · exact A a ⟨ha, h'a⟩\n  · rcases ht with ⟨b, rb⟩\n    rcases A b ⟨rb.1, rb.2⟩ with ⟨c, cu, hc⟩\n    refine' ⟨c, cu, by simp only [closed_ball_eq_empty.2 h'a, empty_subset]⟩\n#align exists_disjoint_subfamily_covering_enlargment_closed_ball exists_disjoint_subfamily_covering_enlargment_closed_ball\n\n",
 "exists_disjoint_subfamily_covering_enlargment":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (u «expr ⊆ » t) -/\n/-\nCopyright (c) 2021 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n/-- Vitali covering theorem: given a set `t` of subsets of a type, one may extract a disjoint\nsubfamily `u` such that the `τ`-enlargment of this family covers all elements of `t`, where `τ > 1`\nis any fixed number.\n\nWhen `t` is a family of balls, the `τ`-enlargment of `ball x r` is `ball x ((1+2τ) r)`. In general,\nit is expressed in terms of a function `δ` (think \"radius\" or \"diameter\"), positive and bounded on\nall elements of `t`. The condition is that every element `a` of `t` should intersect an\nelement `b` of `u` of size larger than that of `a` up to `τ`, i.e., `δ b ≥ δ a / τ`.\n\nWe state the lemma slightly more generally, with an indexed family of sets `B a` for `a ∈ t`, for\nwider applicability.\n-/\ntheorem exists_disjoint_subfamily_covering_enlargment (B : ι → Set α) (t : Set ι) (δ : ι → exprℝ) (τ : exprℝ)\n    (hτ : 1 < τ) (δnonneg : ∀ a ∈ t, 0 ≤ δ a) (R : exprℝ) (δle : ∀ a ∈ t, δ a ≤ R) (hne : ∀ a ∈ t, (B a).nonempty) :\n    ∃ (u : _)(_ : u ⊆ t), u.pairwise_disjoint B ∧ ∀ a ∈ t, ∃ b ∈ u, (B a ∩ B b).nonempty ∧ δ a ≤ τ * δ b :=\n  by\n  /- The proof could be formulated as a transfinite induction. First pick an element of `t` with `δ`\n    as large as possible (up to a factor of `τ`). Then among the remaining elements not intersecting\n    the already chosen one, pick another element with large `δ`. Go on forever (transfinitely) until\n    there is nothing left.\n  \n    Instead, we give a direct Zorn-based argument. Consider a maximal family `u` of disjoint sets\n    with the following property: if an element `a` of `t` intersects some element `b` of `u`, then it\n    intersects some `b' ∈ u` with `δ b' ≥ δ a / τ`. Such a maximal family exists by Zorn. If this\n    family did not intersect some element `a ∈ t`, then take an element `a' ∈ t` which does not\n    intersect any element of `u`, with `δ a'` almost as large as possible. One checks easily\n    that `u ∪ {a'}` still has this property, contradicting the maximality. Therefore, `u`\n    intersects all elements of `t`, and by definition it satisfies all the desired properties.\n    -/\n  let T : Set (Set ι) :=\n    { u |\n      u ⊆ t ∧\n        u.pairwise_disjoint B ∧ ∀ a ∈ t, ∀ b ∈ u, (B a ∩ B b).nonempty → ∃ c ∈ u, (B a ∩ B c).nonempty ∧ δ a ≤ τ * δ c }\n  -- By Zorn, choose a maximal family in the good set `T` of disjoint families.\n  obtain ⟨u, uT, hu⟩ : ∃ u ∈ T, ∀ v ∈ T, u ⊆ v → v = u :=\n    by\n    refine' zorn_subset _ fun U UT hU => _\n    refine' ⟨⋃₀ U, _, fun s hs => subset_sUnion_of_mem hs⟩\n    simp only [Set.unionₛ_subset_iff, and_imp, exists_prop, forall_exists_index, mem_sUnion, Set.mem_setOf_eq]\n    refine'\n      ⟨fun u hu => (UT hu).1, (pairwise_disjoint_sUnion hU.directed_on).2 fun u hu => (UT hu).2.1,\n        fun a hat b u uU hbu hab => _⟩\n    obtain ⟨c, cu, ac, hc⟩ : ∃ (c : ι)(H : c ∈ u), (B a ∩ B c).nonempty ∧ δ a ≤ τ * δ c := (UT uU).2.2 a hat b hbu hab\n    exact ⟨c, ⟨u, uU, cu⟩, ac, hc⟩\n  -- the only nontrivial bit is to check that every `a ∈ t` intersects an element `b ∈ u` with\n  -- comparatively large `δ b`. Assume this is not the case, then we will contradict the maximality.\n  refine' ⟨u, uT.1, uT.2.1, fun a hat => _⟩\n  contrapose! hu\n  have a_disj : ∀ c ∈ u, Disjoint (B a) (B c) := by\n    intro c hc\n    by_contra\n    rw [not_disjoint_iff_nonempty_inter] at h\n    obtain ⟨d, du, ad, hd⟩ : ∃ (d : ι)(H : d ∈ u), (B a ∩ B d).nonempty ∧ δ a ≤ τ * δ d := uT.2.2 a hat c hc h\n    exact lt_irrefl _ ((hu d du ad).trans_le hd)\n  -- Let `A` be all the elements of `t` which do not intersect the family `u`. It is nonempty as it\n  -- contains `a`. We will pick an element `a'` of `A` with `δ a'` almost as large as possible.\n  let A := { a' | a' ∈ t ∧ ∀ c ∈ u, Disjoint (B a') (B c) }\n  have Anonempty : A.nonempty := ⟨a, hat, a_disj⟩\n  let m := Sup («expr '' » δ A)\n  have bddA : BddAbove («expr '' » δ A) := by\n    refine' ⟨R, fun x xA => _⟩\n    rcases(mem_image _ _ _).1 xA with ⟨a', ha', rfl⟩\n    exact δle a' ha'.1\n  obtain ⟨a', a'A, ha'⟩ : ∃ a' ∈ A, m / τ ≤ δ a' :=\n    by\n    have : 0 ≤ m := (δnonneg a hat).trans (le_csupₛ bddA (mem_image_of_mem _ ⟨hat, a_disj⟩))\n    rcases eq_or_lt_of_le this with (mzero | mpos)\n    · refine' ⟨a, ⟨hat, a_disj⟩, _⟩\n      simpa only [← mzero, zero_div] using δnonneg a hat\n    · have I : m / τ < m := by\n        rw [div_lt_iff (zero_lt_one.trans hτ)]\n        conv_lhs => rw [← mul_one m]\n        exact (mul_lt_mul_left mpos).2 hτ\n      rcases exists_lt_of_lt_csupₛ (nonempty_image_iff.2 Anonempty) I with ⟨x, xA, hx⟩\n      rcases(mem_image _ _ _).1 xA with ⟨a', ha', rfl⟩\n      exact ⟨a', ha', hx.le⟩\n  clear hat hu a_disj a\n  have a'_ne_u : a' ∉ u := fun H => (hne _ a'A.1).ne_empty (disjoint_self.1 (a'A.2 _ H))\n  -- we claim that `u ∪ {a'}` still belongs to `T`, contradicting the maximality of `u`.\n  refine' ⟨insert a' u, ⟨_, _, _⟩, subset_insert _ _, (ne_insert_of_not_mem _ a'_ne_u).symm⟩\n  -- check that `u ∪ {a'}` is made of elements of `t`.\n  · rw [insert_subset]\n    exact ⟨a'A.1, uT.1⟩\n  -- check that `u ∪ {a'}` is a disjoint family. This follows from the fact that `a'` does not\n  -- intersect `u`.\n  · exact uT.2.1.insert fun b bu ba' => a'A.2 b bu\n  -- check that every element `c` of `t` intersecting `u ∪ {a'}` intersects an element of this\n  -- family with large `δ`.\n  · intro c ct b ba'u hcb\n    -- if `c` already intersects an element of `u`, then it intersects an element of `u` with\n    -- large `δ` by the assumption on `u`, and there is nothing left to do.\n    by_cases H : ∃ d ∈ u, (B c ∩ B d).nonempty\n    · rcases H with ⟨d, du, hd⟩\n      rcases uT.2.2 c ct d du hd with ⟨d', d'u, hd'⟩\n      exact ⟨d', mem_insert_of_mem _ d'u, hd'⟩\n    -- otherwise, `c` belongs to `A`. The element of `u ∪ {a'}` that it intersects has to be `a'`.\n    -- moreover, `δ c` is smaller than the maximum `m` of `δ` over `A`, which is `≤ δ a' / τ`\n    -- thanks to the good choice of `a'`. This is the desired inequality.\n    · push_neg  at H\n      simp only [← not_disjoint_iff_nonempty_inter, Classical.not_not] at H\n      rcases mem_insert_iff.1 ba'u with (rfl | H')\n      · refine' ⟨b, mem_insert _ _, hcb, _⟩\n        calc\n          δ c ≤ m := le_csupₛ bddA (mem_image_of_mem _ ⟨ct, H⟩)\n          _ = τ * (m / τ) := by\n            field_simp [(zero_lt_one.trans hτ).ne']\n            ring\n          _ ≤ τ * δ b := mul_le_mul_of_nonneg_left ha' (zero_le_one.trans hτ.le)\n          \n      · rw [← not_disjoint_iff_nonempty_inter] at hcb\n        exact (hcb (H _ H')).elim\n#align exists_disjoint_subfamily_covering_enlargment exists_disjoint_subfamily_covering_enlargment\n\n",
 "exists_disjoint_covering_ae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (u «expr ⊆ » t') -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (u «expr ⊆ » t) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- The measurable Vitali covering theorem. Assume one is given a family `t` of closed sets with\nnonempty interior, such that each `a ∈ t` is included in a ball `B (x, r)` and covers a definite\nproportion of the ball `B (x, 3 r)` for a given measure `μ` (think of the situation where `μ` is\na doubling measure and `t` is a family of balls). Consider a (possibly non-measurable) set `s`\nat which the family is fine, i.e., every point of `s` belongs to arbitrarily small elements of `t`.\nThen one can extract from `t` a disjoint subfamily that covers almost all `s`.\n\nFor more flexibility, we give a statement with a parameterized family of sets.\n-/\ntheorem exists_disjoint_covering_ae [MetricSpace α] [MeasurableSpace α] [opens_measurable_space α]\n    [SecondCountableTopology α] (μ : measure α) [LocallyFiniteMeasure μ] (s : Set α) (t : Set ι) (C : nnreal)\n    (r : ι → exprℝ) (c : ι → α) (B : ι → Set α) (hB : ∀ a ∈ t, B a ⊆ closedBall (c a) (r a))\n    (μB : ∀ a ∈ t, μ (closedBall (c a) (3 * r a)) ≤ C * μ (B a)) (ht : ∀ a ∈ t, (interior (B a)).nonempty)\n    (h't : ∀ a ∈ t, IsClosed (B a)) (hf : ∀ x ∈ s, ∀ ε > (0 : exprℝ), ∃ a ∈ t, r a ≤ ε ∧ c a = x) :\n    ∃ (u : _)(_ : u ⊆ t),\n      u.countable ∧\n        u.pairwise_disjoint B ∧\n          μ\n              (s \\\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a)) =\n            0 :=\n  by\n  /- The idea of the proof is the following. Assume for simplicity that `μ` is finite. Applying the\n    abstract Vitali covering theorem with `δ = r` given by `hf`, one obtains a disjoint subfamily `u`,\n    such that any element of `t` intersects an element of `u` with comparable radius. Fix `ε > 0`.\n    Since the elements of `u` have summable measure, one can remove finitely elements `w_1, ..., w_n`.\n    so that the measure of the remaining elements is `< ε`. Consider now a point `z` not\n    in the `w_i`. There is a small ball around `z` not intersecting the `w_i` (as they are closed),\n    an element `a ∈ t` contained in this small ball (as the family `t` is fine at `z`) and an element\n    `b ∈ u` intersecting `a`, with comparable radius (by definition of `u`). Then `z` belongs to the\n    enlargement of `b`. This shows that `s \\ (w_1 ∪ ... ∪ w_n)` is contained in\n    `⋃ (b ∈ u \\ {w_1, ... w_n}) (enlargement of b)`. The measure of the latter set is bounded by\n    `∑ (b ∈ u \\ {w_1, ... w_n}) C * μ b` (by the doubling property of the measure), which is at most\n    `C ε`. Letting `ε` tend to `0` shows that `s` is almost everywhere covered by the family `u`.\n  \n    For the real argument, the measure is only locally finite. Therefore, we implement the same\n    strategy, but locally restricted to balls on which the measure is finite. For this, we do not\n    use the whole family `t`, but a subfamily `t'` supported on small balls (which is possible since\n    the family is assumed to be fine at every point of `s`).\n    -/\n  -- choose around each `x` a small ball on which the measure is finite\n  have : ∀ x, ∃ R, 0 < R ∧ R ≤ 1 ∧ μ (closed_ball x (20 * R)) < ennreal.top :=\n    by\n    intro x\n    obtain ⟨R, Rpos, μR⟩ : ∃ (R : exprℝ)(hR : 0 < R), μ (closed_ball x R) < ennreal.top :=\n      (μ.finite_at_nhds x).exists_mem_basis nhds_basis_closed_ball\n    refine' ⟨min 1 (R / 20), _, min_le_left _ _, _⟩\n    · simp only [true_and_iff, lt_min_iff, zero_lt_one]\n      linarith\n    · apply lt_of_le_of_lt (measure_mono _) μR\n      apply closed_ball_subset_closed_ball\n      calc\n        20 * min 1 (R / 20) ≤ 20 * (R / 20) := mul_le_mul_of_nonneg_left (min_le_right _ _) (by norm_num)\n        _ = R := by ring\n        \n  choose R hR0 hR1 hRμ\n  -- we restrict to a subfamily `t'` of `t`, made of elements small enough to ensure that\n  -- they only see a finite part of the measure, and with a doubling property\n  let t' := { a ∈ t | r a ≤ R (c a) }\n  -- extract a disjoint subfamily `u` of `t'` thanks to the abstract Vitali covering theorem.\n  obtain ⟨u, ut', u_disj, hu⟩ :\n    ∃ (u : _)(_ : u ⊆ t'), u.pairwise_disjoint B ∧ ∀ a ∈ t', ∃ b ∈ u, (B a ∩ B b).nonempty ∧ r a ≤ 2 * r b :=\n    by\n    have A : ∀ a ∈ t', r a ≤ 1 := by\n      intro a ha\n      apply ha.2.trans (hR1 (c a))\n    have A' : ∀ a ∈ t', (B a).nonempty := fun a hat' => Set.Nonempty.mono interior_subset (ht a hat'.1)\n    refine' exists_disjoint_subfamily_covering_enlargment B t' r 2 one_lt_two (fun a ha => _) 1 A A'\n    exact nonempty_closed_ball.1 ((A' a ha).mono (hB a ha.1))\n  have ut : u ⊆ t := fun a hau => (ut' hau).1\n  -- As the space is second countable, the family is countable since all its sets have nonempty\n  -- interior.\n  have u_count : u.countable := u_disj.countable_of_nonempty_interior fun a ha => ht a (ut ha)\n  -- the family `u` will be the desired family\n  refine' ⟨u, fun a hat' => (ut' hat').1, u_count, u_disj, _⟩\n  -- it suffices to show that it covers almost all `s` locally around each point `x`.\n  refine' null_of_locally_null _ fun x hx => _\n  -- let `v` be the subfamily of `u` made of those sets intersecting the small ball `ball x (r x)`\n  let v := { a ∈ u | (B a ∩ ball x (R x)).nonempty }\n  have vu : v ⊆ u := fun a ha => ha.1\n  -- they are all contained in a fixed ball of finite measure, thanks to our choice of `t'`\n  obtain ⟨K, μK, hK⟩ :\n    ∃ K, μ (closed_ball x K) < ennreal.top ∧ ∀ a ∈ u, (B a ∩ ball x (R x)).nonempty → B a ⊆ closed_ball x K :=\n    by\n    have Idist_v : ∀ a ∈ v, dist (c a) x ≤ r a + R x := by\n      intro a hav\n      apply dist_le_add_of_nonempty_closed_ball_inter_closed_ball\n      refine' hav.2.mono _\n      apply inter_subset_inter _ ball_subset_closed_ball\n      exact hB a (ut (vu hav))\n    set R0 := Sup («expr '' » r v) with R0_def\n    have R0_bdd : BddAbove («expr '' » r v) := by\n      refine' ⟨1, fun r' hr' => _⟩\n      rcases(mem_image _ _ _).1 hr' with ⟨b, hb, rfl⟩\n      exact le_trans (ut' (vu hb)).2 (hR1 (c b))\n    rcases le_total R0 (R x) with (H | H)\n    · refine' ⟨20 * R x, hRμ x, fun a au hax => _⟩\n      refine' (hB a (ut au)).trans _\n      apply closed_ball_subset_closed_ball'\n      have : r a ≤ R0 := le_csupₛ R0_bdd (mem_image_of_mem _ ⟨au, hax⟩)\n      linarith [Idist_v a ⟨au, hax⟩, hR0 x]\n    · have R0pos : 0 < R0 := (hR0 x).trans_le H\n      have vnonempty : v.nonempty := by\n        by_contra\n        rw [nonempty_iff_ne_empty, Classical.not_not] at h\n        simp only [h, Real.supₛ_empty, image_empty] at R0_def\n        exact lt_irrefl _ (R0pos.trans_le (le_of_eq R0_def))\n      obtain ⟨a, hav, R0a⟩ : ∃ a ∈ v, R0 / 2 < r a :=\n        by\n        obtain ⟨r', r'mem, hr'⟩ : ∃ r' ∈ «expr '' » r v, R0 / 2 < r' :=\n          exists_lt_of_lt_csupₛ (nonempty_image_iff.2 vnonempty) (half_lt_self R0pos)\n        rcases(mem_image _ _ _).1 r'mem with ⟨a, hav, rfl⟩\n        exact ⟨a, hav, hr'⟩\n      refine' ⟨8 * R0, _, _⟩\n      · apply lt_of_le_of_lt (measure_mono _) (hRμ (c a))\n        apply closed_ball_subset_closed_ball'\n        rw [dist_comm]\n        linarith [Idist_v a hav, (ut' (vu hav)).2]\n      · intro b bu hbx\n        refine' (hB b (ut bu)).trans _\n        apply closed_ball_subset_closed_ball'\n        have : r b ≤ R0 := le_csupₛ R0_bdd (mem_image_of_mem _ ⟨bu, hbx⟩)\n        linarith [Idist_v b ⟨bu, hbx⟩]\n  -- we will show that, in `ball x (R x)`, almost all `s` is covered by the family `u`.\n  refine'\n    ⟨_ ∩ ball x (R x), inter_mem_nhdsWithin _ (ball_mem_nhds _ (hR0 _)),\n      nonpos_iff_eq_zero.mp (le_of_forall_le_of_dense fun ε εpos => _)⟩\n  -- the elements of `v` are disjoint and all contained in a finite volume ball, hence the sum\n  -- of their measures is finite.\n  have I :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (B a)) <\n      ennreal.top :=\n    by\n    calc\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (B a)) =\n          μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a)) :=\n        by\n        rw [measure_bUnion (u_count.mono vu) _ fun a ha => (h't _ (vu.trans ut ha)).measurable_set]\n        exact u_disj.subset vu\n      _ ≤ μ (closed_ball x K) := (measure_mono (Union₂_subset fun a ha => hK a (vu ha) ha.2))\n      _ < ennreal.top := μK\n      \n  -- we can obtain a finite subfamily of `v`, such that the measures of the remaining elements\n  -- add up to an arbitrarily small number, say `ε / C`.\n  obtain ⟨w, hw⟩ :\n    ∃ w : Finset («expr↥ » v),\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (B a)) <\n        ε / C :=\n    haveI : 0 < ε / C := by\n      simp only [ENNReal.div_pos_iff, εpos.ne', ENNReal.coe_ne_top, ne.def, not_false_iff, and_self_iff]\n    ((tendsto_order.1 (ENNReal.tendsto_tsum_compl_atTop_zero I.ne)).2 _ this).exists\n  -- main property: the points `z` of `s` which are not covered by `u` are contained in the\n  -- enlargements of the elements not in `w`.\n  have M :\n    s \\ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a) ∩\n        ball x (R x) ⊆\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (closed_ball (c a) (3 * r a)) :=\n    by\n    intro z hz\n    set k := «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a) with\n      hk\n    have k_closed : IsClosed k := isClosed_bunionᵢ w.finite_to_set fun i hi => h't _ (ut (vu i.2))\n    have z_notmem_k : z ∉ k :=\n      by\n      simp only [not_exists, exists_prop, mem_Union, mem_sep_iff, forall_exists_index, SetCoe.exists, not_and,\n        exists_and_right, Subtype.coe_mk]\n      intro b hbv h'b h'z\n      have :\n        z ∈\n          s \\ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a) ∩\n            «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a) :=\n        mem_inter (mem_of_mem_inter_left hz) (mem_bUnion (vu hbv) h'z)\n      simpa only [diff_inter_self]\n    -- since the elements of `w` are closed and finitely many, one can find a small ball around `z`\n    -- not intersecting them\n    have : ball x (R x) \\ k ∈ (nhds) z :=\n      by\n      apply IsOpen.mem_nhds (is_open_ball.sdiff k_closed) _\n      exact (mem_diff _).2 ⟨mem_of_mem_inter_right hz, z_notmem_k⟩\n    obtain ⟨d, dpos, hd⟩ : ∃ (d : exprℝ)(dpos : 0 < d), closed_ball z d ⊆ ball x (R x) \\ k :=\n      nhds_basis_closed_ball.mem_iff.1 this\n    -- choose an element `a` of the family `t` contained in this small ball\n    obtain ⟨a, hat, ad, rfl⟩ : ∃ a ∈ t, r a ≤ min d (R z) ∧ c a = z\n    exact hf z ((mem_diff _).1 (mem_of_mem_inter_left hz)).1 (min d (R z)) (lt_min dpos (hR0 z))\n    have ax : B a ⊆ ball x (R x) := by\n      refine' (hB a hat).trans _\n      refine' subset.trans _ (hd.trans (diff_subset (ball x (R x)) k))\n      exact closed_ball_subset_closed_ball (ad.trans (min_le_left _ _))\n    -- it intersects an element `b` of `u` with comparable diameter, by definition of `u`\n    obtain ⟨b, bu, ab, bdiam⟩ : ∃ b ∈ u, (B a ∩ B b).nonempty ∧ r a ≤ 2 * r b\n    exact hu a ⟨hat, ad.trans (min_le_right _ _)⟩\n    have bv : b ∈ v := by\n      refine' ⟨bu, ab.mono _⟩\n      rw [inter_comm]\n      exact inter_subset_inter_right _ ax\n    let b' : v := ⟨b, bv⟩\n    -- `b` can not belong to `w`, as the elements of `w` do not intersect `closed_ball z d`,\n    -- contrary to `b`\n    have b'_notmem_w : b' ∉ w := by\n      intro b'w\n      have b'k : B b' ⊆ k := @Finset.subset_set_bunionᵢ_of_mem _ _ _ (fun y : v => B y) _ b'w\n      have : (ball x (R x) \\ k ∩ k).nonempty :=\n        by\n        apply ab.mono (inter_subset_inter _ b'k)\n        refine' ((hB _ hat).trans _).trans hd\n        exact closed_ball_subset_closed_ball (ad.trans (min_le_left _ _))\n      simpa only [diff_inter_self, not_nonempty_empty]\n    let b'' : { a // a ∉ w } := ⟨b', b'_notmem_w⟩\n    -- since `a` and `b` have comparable diameters, it follows that `z` belongs to the\n    -- enlargement of `b`\n    have zb : c a ∈ closed_ball (c b) (3 * r b) :=\n      by\n      rcases ab with ⟨e, ⟨ea, eb⟩⟩\n      have A : dist (c a) e ≤ r a := mem_closed_ball'.1 (hB a hat ea)\n      have B : dist e (c b) ≤ r b := mem_closed_ball.1 (hB b (ut bu) eb)\n      simp only [mem_closed_ball]\n      linarith [dist_triangle (c a) e (c b)]\n    suffices H :\n      closed_ball (c b'') (3 * r b'') ⊆\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (closed_ball (c a) (3 * r a))\n    exact H zb\n    exact subset_Union (fun a : { a // a ∉ w } => closed_ball (c a) (3 * r a)) b''\n  -- now that we have proved our main inclusion, we can use it to estimate the measure of the points\n  -- in `ball x (r x)` not covered by `u`.\n  haveI : Encodable v := (u_count.mono vu).to_encodable\n  calc\n    μ\n          (s \\ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (B a) ∩\n            ball x (R x)) ≤\n        μ\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            (closed_ball (c a) (3 * r a))) :=\n      measure_mono M\n    _ ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (μ (closed_ball (c a) (3 * r a))) :=\n      (measure_Union_le _)\n    _ ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (C * μ (B a)) :=\n      (ENNReal.tsum_le_tsum fun a => μB a (ut (vu a.1.2)))\n    _ =\n        C *\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (B a)) :=\n      ENNReal.tsum_mul_left\n    _ ≤ C * (ε / C) := (mul_le_mul_left' hw.le _)\n    _ ≤ ε := ENNReal.mul_div_le\n    \n#align exists_disjoint_covering_ae exists_disjoint_covering_ae\n\n"}