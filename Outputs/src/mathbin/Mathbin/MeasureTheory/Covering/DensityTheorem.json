{"tendsto_closed_ball_filter_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\ntheorem tendsto_closed_ball_filter_at {K : exprℝ} {x : α} {ι : Type _} {l : Filter ι} (w : ι → α) (δ : ι → exprℝ)\n    (δlim : Tendsto δ l (nhds_within.gt 0))\n    (xmem :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (x ∈ closedBall (w j) (K * δ j))) :\n    Tendsto (fun j => closedBall (w j) (δ j)) l ((vitali_family μ K).filter_at x) :=\n  by\n  refine' (VitaliFamily μ K).tendsto_filter_at_iff.mpr ⟨_, fun ε hε => _⟩\n  · filter_upwards [xmem, δlim self_mem_nhdsWithin]with j hj h'j\n    exact closed_ball_mem_vitali_family_of_dist_le_mul μ hj h'j\n  · by_cases l.ne_bot\n    swap\n    · simp [not_ne_bot.1 h]\n    have hK : 0 ≤ K := by\n      skip\n      rcases(xmem.and (δlim self_mem_nhdsWithin)).exists with ⟨j, hj, h'j⟩\n      have : 0 ≤ K * δ j := nonempty_closed_ball.1 ⟨x, hj⟩\n      exact (mul_nonneg_iff_left_nonneg_of_pos (mem_Ioi.1 h'j)).1 this\n    have δpos := eventually_mem_of_tendsto_nhdsWithin δlim\n    replace δlim := tendsto_nhds_of_tendsto_nhdsWithin δlim\n    replace hK : 0 < K + 1\n    · linarith\n    apply (((metric.tendsto_nhds.mp δlim _ (div_pos hε hK)).and δpos).and xmem).mono\n    rintro j ⟨⟨hjε, hj₀ : 0 < δ j⟩, hx⟩ y hy\n    replace hjε : (K + 1) * δ j < ε := by simpa [abs_eq_self.mpr hj₀.le] using (lt_div_iff' hK).mp hjε\n    simp only [mem_closed_ball] at hx hy⊢\n    linarith [dist_triangle_right y x (w j)]\n#align tendsto_closed_ball_filter_at tendsto_closed_ball_filter_at\n\n",
 "closed_ball_mem_vitali_family_of_dist_le_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2022 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n/- the Vitali covering theorem gives a family that works well at small scales, thanks to the\n  doubling property. We enlarge this family to add large sets, to make sure that all balls and not\n  only small ones belong to the family, for convenience. -/\n/-- In the Vitali family `is_unif_loc_doubling_measure.vitali_family K`, the sets based at `x`\ncontain all balls `closed_ball y r` when `dist x y ≤ K * r`. -/\ntheorem closed_ball_mem_vitali_family_of_dist_le_mul {K : exprℝ} {x y : α} {r : exprℝ} (h : dist x y ≤ K * r)\n    (rpos : 0 < r) : closedBall y r ∈ (vitali_family μ K).sets_at x :=\n  by\n  let R := scaling_scale_of μ (max (4 * K + 3) 3)\n  simp only [VitaliFamily, VitaliFamily.enlarge, vitali.vitali_family, mem_union, mem_set_of_eq, is_closed_ball,\n    true_and_iff, (nonempty_ball.2 rpos).mono ball_subset_interior_closed_ball, measurable_set_closed_ball]\n  /- The measure is doubling on scales smaller than `R`. Therefore, we treat differently small\n    and large balls. For large balls, this follows directly from the enlargement we used in the\n    definition. -/\n  by_cases H : closed_ball y r ⊆ closed_ball x (R / 4)\n  swap; · exact or.inr H\n  left\n  /- For small balls, there is the difficulty that `r` could be large but still the ball could be\n    small, if the annulus `{y | ε ≤ dist y x ≤ R/4}` is empty. We split between the cases `r ≤ R`\n    and `r < R`, and use the doubling for the former and rough estimates for the latter. -/\n  rcases le_or_lt r R with (hr | hr)\n  · refine' ⟨(K + 1) * r, _⟩\n    constructor\n    · apply closed_ball_subset_closed_ball'\n      rw [dist_comm]\n      linarith\n    · have I1 : closed_ball x (3 * ((K + 1) * r)) ⊆ closed_ball y ((4 * K + 3) * r) :=\n        by\n        apply closed_ball_subset_closed_ball'\n        linarith\n      have I2 : closed_ball y ((4 * K + 3) * r) ⊆ closed_ball y (max (4 * K + 3) 3 * r) :=\n        by\n        apply closed_ball_subset_closed_ball\n        exact mul_le_mul_of_nonneg_right (le_max_left _ _) rpos.le\n      apply (measure_mono (I1.trans I2)).trans\n      exact measure_mul_le_scaling_constant_of_mul _ ⟨zero_lt_three.trans_le (le_max_right _ _), le_rfl⟩ hr\n  · refine' ⟨R / 4, H, _⟩\n    have : closed_ball x (3 * (R / 4)) ⊆ closed_ball y r :=\n      by\n      apply closed_ball_subset_closed_ball'\n      have A : y ∈ closed_ball y r := mem_closed_ball_self rpos.le\n      have B := mem_closed_ball'.1 (H A)\n      linarith\n    apply (measure_mono this).trans _\n    refine' le_mul_of_one_le_left (zero_le _) _\n    exact ENNReal.one_le_coe_iff.2 (le_max_right _ _)\n#align closed_ball_mem_vitali_family_of_dist_le_mul closed_ball_mem_vitali_family_of_dist_le_mul\n\n",
 "ae_tendsto_measure_inter_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A version of *Lebesgue's density theorem* for a sequence of closed balls whose centers are\nnot required to be fixed.\n\nSee also `besicovitch.ae_tendsto_measure_inter_div`. -/\ntheorem ae_tendsto_measure_inter_div (S : Set α) (K : exprℝ) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" (μ.restrict S)\n      (∀ {ι : Type _} {l : Filter ι} (w : ι → α) (δ : ι → exprℝ) (δlim : Tendsto δ l (nhds_within.gt 0))\n        (xmem :\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n            (x ∈ closedBall (w j) (K * δ j))),\n        Tendsto (fun j => μ (S ∩ closedBall (w j) (δ j)) / μ (closedBall (w j) (δ j))) l ((nhds) 1)) :=\n  by\n  filter_upwards [(VitaliFamily μ K).ae_tendsto_measure_inter_div\n      S]with x hx ι l w δ δlim xmem using hx.comp (tendsto_closed_ball_filter_at μ _ _ δlim xmem)\n#align ae_tendsto_measure_inter_div ae_tendsto_measure_inter_div\n\n",
 "ae_tendsto_average_norm_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨍ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨍ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A version of *Lebesgue differentiation theorem* for a sequence of closed balls whose\ncenters are not required to be fixed. -/\ntheorem ae_tendsto_average_norm_sub {f : α → E} (hf : integrable f μ) (K : exprℝ) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (∀ {ι : Type _} {l : Filter ι} (w : ι → α) (δ : ι → exprℝ) (δlim : Tendsto δ l (nhds_within.gt 0))\n        (xmem :\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n            (x ∈ closedBall (w j) (K * δ j))),\n        Tendsto\n          (fun j =>\n            «expr⨍ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨍ in , ∂ »\"\n              (closedBall (w j) (δ j)) («expr‖ ‖» (f y - f x)) μ)\n          l ((nhds) 0)) :=\n  by\n  filter_upwards [(VitaliFamily μ K).ae_tendsto_average_norm_sub\n      hf]with x hx ι l w δ δlim xmem using hx.comp (tendsto_closed_ball_filter_at μ _ _ δlim xmem)\n#align ae_tendsto_average_norm_sub ae_tendsto_average_norm_sub\n\n",
 "ae_tendsto_average":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨍ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨍ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A version of *Lebesgue differentiation theorem* for a sequence of closed balls whose\ncenters are not required to be fixed. -/\ntheorem ae_tendsto_average [NormedSpace (exprℝ) E] [CompleteSpace E] {f : α → E} (hf : integrable f μ) (K : exprℝ) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (∀ {ι : Type _} {l : Filter ι} (w : ι → α) (δ : ι → exprℝ) (δlim : Tendsto δ l (nhds_within.gt 0))\n        (xmem :\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n            (x ∈ closedBall (w j) (K * δ j))),\n        Tendsto\n          (fun j =>\n            «expr⨍ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨍ in , ∂ »\"\n              (closedBall (w j) (δ j)) (f y) μ)\n          l ((nhds) (f x))) :=\n  by\n  filter_upwards [(VitaliFamily μ K).ae_tendsto_average\n      hf]with x hx ι l w δ δlim xmem using hx.comp (tendsto_closed_ball_filter_at μ _ _ δlim xmem)\n#align ae_tendsto_average ae_tendsto_average\n\n"}