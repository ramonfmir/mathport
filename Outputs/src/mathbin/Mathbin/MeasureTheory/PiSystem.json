{"subset_pi_Union_Inter":
 "theorem subset_pi_Union_Inter {π : ι → set (set α)} {S : set ι} {i : ι} (his : i ∈ S) : π i ⊆ pi_Union_Inter π S :=\n  by\n  have h_ss : {i} ⊆ S := by\n    intro j hj\n    rw [mem_singleton_iff] at hj\n    rwa [hj]\n  refine' subset.trans _ (pi_Union_Inter_mono_right h_ss)\n  rw [pi_Union_Inter_singleton]\n  exact subset_union_left _ _\n#align subset_pi_Union_Inter subset_pi_Union_Inter\n\n",
 "subset_generate_pi_system_self":
 "theorem subset_generate_pi_system_self {α} (S : set (set α)) : S ⊆ generate_pi_system S := fun s =>\n  generate_pi_system.base\n#align subset_generate_pi_system_self subset_generate_pi_system_self\n\n",
 "singleton":
 "theorem is_pi_system.singleton {α} (S : set α) : is_pi_system ({S} : set (set α)) :=\n  by\n  intro s h_s t h_t h_ne\n  rw [Set.mem_singleton_iff.1 h_s, Set.mem_singleton_iff.1 h_t, Set.inter_self, Set.mem_singleton_iff]\n#align is_pi_system.singleton is_pi_system.singleton\n\n",
 "pi_Union_Inter_singleton_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem pi_Union_Inter_singleton_left (s : ι → set α) (S : set ι) :\n    pi_Union_Inter (fun i => ({s i} : set (set α))) S =\n      { s' : set α |\n        ∃ (t : Finset ι)(htS : ↑t ⊆ S),\n          s' =\n            «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i) } :=\n  by\n  ext1 s'\n  simp_rw [pi_Union_Inter, Set.mem_singleton_iff, exists_prop, Set.mem_setOf_eq]\n  refine' ⟨fun h => _, fun ⟨t, htS, h_eq⟩ => ⟨t, htS, s, fun _ _ => rfl, h_eq⟩⟩\n  obtain ⟨t, htS, f, hft_eq, rfl⟩ := h\n  refine' ⟨t, htS, _⟩\n  congr with (i x)\n  simp_rw [Set.mem_interᵢ]\n  exact\n    ⟨fun h hit => by\n      rw [← hft_eq i hit]\n      exact h hit, fun h hit => by\n      rw [hft_eq i hit]\n      exact h hit⟩\n#align pi_Union_Inter_singleton_left pi_Union_Inter_singleton_left\n\n",
 "pi_Union_Inter_singleton":
 "theorem pi_Union_Inter_singleton (π : ι → set (set α)) (i : ι) : pi_Union_Inter π {i} = π i ∪ {univ} :=\n  by\n  ext1 s\n  simp only [pi_Union_Inter, exists_prop, mem_union]\n  refine' ⟨_, fun h => _⟩\n  · rintro ⟨t, hti, f, hfπ, rfl⟩\n    simp only [subset_singleton_iff, Finset.mem_coe] at hti\n    by_cases hi : i ∈ t\n    · have ht_eq_i : t = {i} := by\n        ext1 x\n        rw [Finset.mem_singleton]\n        exact ⟨fun h => hti x h, fun h => h.symm ▸ hi⟩\n      simp only [ht_eq_i, Finset.mem_singleton, Inter_Inter_eq_left]\n      exact or.inl (hfπ i hi)\n    · have ht_empty : t = ∅ := by\n        ext1 x\n        simp only [Finset.not_mem_empty, iff_false_iff]\n        exact fun hx => hi (hti x hx ▸ hx)\n      simp only [ht_empty, Inter_false, Inter_univ, Set.mem_singleton univ, or_true_iff]\n  · cases' h with hs hs\n    · refine' ⟨{i}, _, fun _ => s, ⟨fun x hx => _, _⟩⟩\n      · rw [Finset.coe_singleton]\n      · rw [Finset.mem_singleton] at hx\n        rwa [hx]\n      · simp only [Finset.mem_singleton, Inter_Inter_eq_left]\n    · refine' ⟨∅, _⟩\n      simpa only [Finset.coe_empty, subset_singleton_iff, mem_empty_iff_false, is_empty.forall_iff, imp_true_iff,\n        Finset.not_mem_empty, Inter_false, Inter_univ, true_and_iff, exists_const] using hs\n#align pi_Union_Inter_singleton pi_Union_Inter_singleton\n\n",
 "pi_Union_Inter_mono_right":
 "theorem pi_Union_Inter_mono_right {π : ι → set (set α)} {S T : set ι} (hST : S ⊆ T) :\n    pi_Union_Inter π S ⊆ pi_Union_Inter π T := fun s ⟨t, ht_mem, ft, hft_mem_pi, h_eq⟩ =>\n  ⟨t, ht_mem.trans hST, ft, hft_mem_pi, h_eq⟩\n#align pi_Union_Inter_mono_right pi_Union_Inter_mono_right\n\n",
 "pi_Union_Inter_mono_left":
 "theorem pi_Union_Inter_mono_left {π π' : ι → set (set α)} (h_le : ∀ i, π i ⊆ π' i) (S : set ι) :\n    pi_Union_Inter π S ⊆ pi_Union_Inter π' S := fun s ⟨t, ht_mem, ft, hft_mem_pi, h_eq⟩ =>\n  ⟨t, ht_mem, ft, fun x hxt => h_le x (hft_mem_pi x hxt), h_eq⟩\n#align pi_Union_Inter_mono_left pi_Union_Inter_mono_left\n\n",
 "of_measurable_space_to_measurable_space":
 "theorem of_measurable_space_to_measurable_space (h_inter : ∀ s₁ s₂, d.has s₁ → d.has s₂ → d.has (s₁ ∩ s₂)) :\n    of_measurable_space (d.to_measurable_space h_inter) = d :=\n  ext fun s => iff.rfl\n#align of_measurable_space_to_measurable_space of_measurable_space_to_measurable_space\n\n",
 "of_measurable_space_le_of_measurable_space_iff":
 "theorem of_measurable_space_le_of_measurable_space_iff {m₁ m₂ : measurable_space α} :\n    of_measurable_space m₁ ≤ of_measurable_space m₂ ↔ m₁ ≤ m₂ :=\n  iff.rfl\n#align of_measurable_space_le_of_measurable_space_iff of_measurable_space_le_of_measurable_space_iff\n\n",
 "mem_pi_Union_Inter_of_measurable_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem mem_pi_Union_Inter_of_measurable_set (m : ι → measurable_space α) {S : set ι} {i : ι} (hiS : i ∈ S) (s : set α)\n    (hs : (measurable_set_of (m i)) s) : s ∈ pi_Union_Inter (fun n => { s | (measurable_set_of (m n)) s }) S :=\n  subset_pi_Union_Inter hiS hs\n#align mem_pi_Union_Inter_of_measurable_set mem_pi_Union_Inter_of_measurable_set\n\n",
 "mem_generate_pi_system_Union_elim'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- Every element of the π-system generated by an indexed union of a family of π-systems\nis a finite intersection of elements from the π-systems.\nFor a total union version, see `mem_generate_pi_system_Union_elim`. -/\ntheorem mem_generate_pi_system_Union_elim' {α β} {g : β → set (set α)} {s : set β} (h_pi : ∀ b ∈ s, is_pi_system (g b))\n    (t : set α)\n    (h_t :\n      t ∈\n        generate_pi_system\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (g b))) :\n    ∃ (T : Finset β)(f : β → set α),\n      ↑T ⊆ s ∧\n        t = «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f b) ∧\n          ∀ b ∈ T, f b ∈ g b :=\n  by\n  have :\n    t ∈\n      generate_pi_system\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          ((g ∘ subtype.val) b)) :=\n    by\n    suffices h1 :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          ((g ∘ subtype.val) b) =\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (g b)\n    · rwa [h1]\n    ext x\n    simp only [exists_prop, Set.mem_unionᵢ, Function.comp_apply, subtype.exists, subtype.coe_mk]\n    rfl\n  rcases@mem_generate_pi_system_Union_elim α (subtype s) (g ∘ subtype.val) (fun b => h_pi b.val b.property) t this with\n    ⟨T, ⟨f, ⟨rfl, h_t'⟩⟩⟩\n  refine' ⟨T.image subtype.val, function.extend subtype.val f fun b : β => (∅ : set α), by simp, _, _⟩\n  · ext a\n    constructor <;>\n      · simp only [Set.mem_interᵢ, subtype.forall, finset.set_bInter_finset_image]\n        intro h1 b h_b h_b_in_T\n        have h2 := h1 b h_b h_b_in_T\n        revert h2\n        rw [subtype.val_injective.extend_apply]\n        apply id\n  · intro b h_b\n    simp_rw [Finset.mem_image, exists_prop, subtype.exists, exists_and_right, exists_eq_right] at h_b\n    cases h_b\n    have h_b_alt : b = (subtype.mk b h_b_w).val := rfl\n    rw [h_b_alt, subtype.val_injective.extend_apply]\n    apply h_t'\n    apply h_b_h\n#align mem_generate_pi_system_Union_elim' mem_generate_pi_system_Union_elim'\n\n",
 "mem_generate_pi_system_Union_elim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- Every element of the π-system generated by the union of a family of π-systems\nis a finite intersection of elements from the π-systems.\nFor an indexed union version, see `mem_generate_pi_system_Union_elim'`. -/\ntheorem mem_generate_pi_system_Union_elim {α β} {g : β → set (set α)} (h_pi : ∀ b, is_pi_system (g b)) (t : set α)\n    (h_t :\n      t ∈\n        generate_pi_system\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (g b))) :\n    ∃ (T : Finset β)(f : β → set α),\n      t = «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f b) ∧\n        ∀ b ∈ T, f b ∈ g b :=\n  by\n  induction' h_t with s h_s s t' h_gen_s h_gen_t' h_nonempty h_s h_t'\n  · rcases h_s with ⟨t', ⟨⟨b, rfl⟩, h_s_in_t'⟩⟩\n    refine' ⟨{b}, fun _ => s, _⟩\n    simpa using h_s_in_t'\n  · rcases h_t' with ⟨T_t', ⟨f_t', ⟨rfl, h_t'⟩⟩⟩\n    rcases h_s with ⟨T_s, ⟨f_s, ⟨rfl, h_s⟩⟩⟩\n    use T_s ∪ T_t', fun b : β =>\n      if b ∈ T_s then if b ∈ T_t' then f_s b ∩ f_t' b else f_s b else if b ∈ T_t' then f_t' b else (∅ : set α)\n    constructor\n    · ext a\n      simp_rw [Set.mem_inter_iff, Set.mem_interᵢ, Finset.mem_union, or_imp]\n      rw [← forall_and]\n      constructor <;> intro h1 b <;> by_cases hbs : b ∈ T_s <;> by_cases hbt : b ∈ T_t' <;> specialize h1 b <;>\n        simp only [hbs, hbt, if_true, if_false, true_imp_iff, and_self_iff, false_imp_iff, and_true_iff,\n          true_and_iff] at h1⊢\n      all_goals exact h1\n    intro b h_b\n    split_ifs with hbs hbt hbt\n    · refine' h_pi b (f_s b) (h_s b hbs) (f_t' b) (h_t' b hbt) (Set.Nonempty.mono _ h_nonempty)\n      exact Set.inter_subset_inter (Set.binterᵢ_subset_of_mem hbs) (Set.binterᵢ_subset_of_mem hbt)\n    · exact h_s b hbs\n    · exact h_t' b hbt\n    · rw [Finset.mem_union] at h_b\n      apply false.elim (h_b.elim hbs hbt)\n#align mem_generate_pi_system_Union_elim mem_generate_pi_system_Union_elim\n\n",
 "measurable_set_supr_of_mem_pi_Union_Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem measurable_set_supr_of_mem_pi_Union_Inter (m : ι → measurable_space α) (S : set ι) (t : set α)\n    (ht : t ∈ pi_Union_Inter (fun n => { s | (measurable_set_of (m n)) s }) S) :\n    (measurable_set_of\n        («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (m i)))\n      t :=\n  by\n  rcases ht with ⟨pt, hpt, ft, ht_m, rfl⟩\n  refine' pt.measurable_set_bInter fun i hi => _\n  suffices h_le :\n    m i ≤ «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (m i);\n  exact h_le (ft i) (ht_m i hi)\n  have hi' : i ∈ S := hpt hi\n  exact le_supᵢ₂ i hi'\n#align measurable_set_supr_of_mem_pi_Union_Inter measurable_set_supr_of_mem_pi_Union_Inter\n\n",
 "le_generate_from_pi_Union_Inter":
 "theorem le_generate_from_pi_Union_Inter {π : ι → set (set α)} (S : set ι) {x : ι} (hxS : x ∈ S) :\n    generate_from (π x) ≤ generate_from (pi_Union_Inter π S) :=\n  generate_from_mono (subset_pi_Union_Inter hxS)\n#align le_generate_from_pi_Union_Inter le_generate_from_pi_Union_Inter\n\n",
 "le_def":
 "theorem le_def {α} {a b : dynkin_system α} : a ≤ b ↔ a.has ≤ b.has :=\n  iff.rfl\n#align le_def le_def\n\n",
 "is_pi_system_pi_Union_Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/-- If `π` is a family of π-systems, then `pi_Union_Inter π S` is a π-system. -/\ntheorem is_pi_system_pi_Union_Inter (π : ι → set (set α)) (hpi : ∀ x, is_pi_system (π x)) (S : set ι) :\n    is_pi_system (pi_Union_Inter π S) :=\n  by\n  rintro t1 ⟨p1, hp1S, f1, hf1m, ht1_eq⟩ t2 ⟨p2, hp2S, f2, hf2m, ht2_eq⟩ h_nonempty\n  simp_rw [pi_Union_Inter, Set.mem_setOf_eq]\n  let g n := ite (n ∈ p1) (f1 n) Set.univ ∩ ite (n ∈ p2) (f2 n) Set.univ\n  have hp_union_ss : ↑(p1 ∪ p2) ⊆ S := by simp only [hp1S, hp2S, Finset.coe_union, union_subset_iff, and_self_iff]\n  use p1 ∪ p2, hp_union_ss, g\n  have h_inter_eq :\n    t1 ∩ t2 = «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (g i) :=\n    by\n    rw [ht1_eq, ht2_eq]\n    simp_rw [← Set.inf_eq_inter, g]\n    ext1 x\n    simp only [inf_eq_inter, mem_inter_iff, mem_Inter, Finset.mem_union]\n    refine' ⟨fun h i hi_mem_union => _, fun h => ⟨fun i hi1 => _, fun i hi2 => _⟩⟩\n    · split_ifs\n      exacts[⟨h.1 i h_1, h.2 i h_2⟩, ⟨h.1 i h_1, Set.mem_univ _⟩, ⟨Set.mem_univ _, h.2 i h_2⟩,\n        ⟨Set.mem_univ _, Set.mem_univ _⟩]\n    · specialize h i (or.inl hi1)\n      rw [if_pos hi1] at h\n      exact h.1\n    · specialize h i (or.inr hi2)\n      rw [if_pos hi2] at h\n      exact h.2\n  refine' ⟨fun n hn => _, h_inter_eq⟩\n  simp_rw [g]\n  split_ifs with hn1 hn2\n  · refine' hpi n (f1 n) (hf1m n hn1) (f2 n) (hf2m n hn2) (Set.nonempty_iff_ne_empty.2 fun h => _)\n    rw [h_inter_eq] at h_nonempty\n    suffices h_empty :\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (g i) = ∅\n    exact (set.not_nonempty_iff_eq_empty.mpr h_empty) h_nonempty\n    refine' le_antisymm (Set.interᵢ_subset_of_subset n _) (Set.empty_subset _)\n    refine' Set.interᵢ_subset_of_subset hn _\n    simp_rw [g, if_pos hn1, if_pos hn2]\n    exact h.subset\n  · simp [hf1m n hn1]\n  · simp [hf2m n h]\n  · exact absurd hn (by simp [hn1, h])\n#align is_pi_system_pi_Union_Inter is_pi_system_pi_Union_Inter\n\n",
 "is_pi_system_measurable_set":
 "/-\nCopyright (c) 2021 Martin Zinkevich. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Martin Zinkevich, Rémy Degenne\n-/\ntheorem is_pi_system_measurable_set {α : Type _} [measurable_space α] : is_pi_system { s : set α | measurable_set s } :=\n  fun s hs t ht _ => hs.inter ht\n#align is_pi_system_measurable_set is_pi_system_measurable_set\n\n",
 "is_pi_system_image_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_pi_system_image_Ioi (s : set α) : is_pi_system («expr '' » Ioi s) :=\n  @is_pi_system_image_Iio («expr ᵒᵈ» α) _ s\n#align is_pi_system_image_Ioi is_pi_system_image_Ioi\n\n",
 "is_pi_system_image_Iio":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_pi_system_image_Iio (s : set α) : is_pi_system («expr '' » Iio s) :=\n  by\n  rintro _ ⟨a, ha, rfl⟩ _ ⟨b, hb, rfl⟩ -\n  exact ⟨«expr ⊓ » a b, inf_ind a b ha hb, Iio_inter_Iio.symm⟩\n#align is_pi_system_image_Iio is_pi_system_image_Iio\n\n",
 "is_pi_system_generate_pi_system":
 "theorem is_pi_system_generate_pi_system {α} (S : set (set α)) : is_pi_system (generate_pi_system S) :=\n  fun s h_s t h_t h_nonempty => generate_pi_system.inter h_s h_t h_nonempty\n#align is_pi_system_generate_pi_system is_pi_system_generate_pi_system\n\n",
 "is_pi_system_Union_of_monotone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem is_pi_system_Union_of_monotone {α ι} [SemilatticeSup ι] (p : ι → set (set α)) (hp_pi : ∀ n, is_pi_system (p n))\n    (hp_mono : monotone p) :\n    is_pi_system\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (p n)) :=\n  is_pi_system_Union_of_directed_le p hp_pi (Monotone.directed_le hp_mono)\n#align is_pi_system_Union_of_monotone is_pi_system_Union_of_monotone\n\n",
 "is_pi_system_Union_of_directed_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem is_pi_system_Union_of_directed_le {α ι} (p : ι → set (set α)) (hp_pi : ∀ n, is_pi_system (p n))\n    (hp_directed : Directed (· ≤ ·) p) :\n    is_pi_system\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (p n)) :=\n  by\n  intro t1 ht1 t2 ht2 h\n  rw [Set.mem_unionᵢ] at ht1 ht2⊢\n  cases' ht1 with n ht1\n  cases' ht2 with m ht2\n  obtain ⟨k, hpnk, hpmk⟩ : ∃ k, p n ≤ p k ∧ p m ≤ p k := hp_directed n m\n  exact ⟨k, hp_pi k t1 (hpnk ht1) t2 (hpmk ht2) h⟩\n#align is_pi_system_Union_of_directed_le is_pi_system_Union_of_directed_le\n\n",
 "is_pi_system_Ixx_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem is_pi_system_Ixx_mem {Ixx : α → α → set α} {p : α → α → Prop} (Hne : ∀ {a b}, (Ixx a b).nonempty → p a b)\n    (Hi : ∀ {a₁ b₁ a₂ b₂}, Ixx a₁ b₁ ∩ Ixx a₂ b₂ = Ixx (max a₁ a₂) (min b₁ b₂)) (s t : set α) :\n    is_pi_system { S | ∃ l ∈ s, ∃ u ∈ t, ∃ hlu : p l u, Ixx l u = S } :=\n  by\n  rintro _ ⟨l₁, hls₁, u₁, hut₁, hlu₁, rfl⟩ _ ⟨l₂, hls₂, u₂, hut₂, hlu₂, rfl⟩\n  simp only [Hi, ← sup_eq_max, ← inf_eq_min]\n  exact fun H => ⟨«expr ⊔ » l₁ l₂, sup_ind l₁ l₂ hls₁ hls₂, «expr ⊓ » u₁ u₂, inf_ind u₁ u₂ hut₁ hut₂, Hne H, rfl⟩\n#align is_pi_system_Ixx_mem is_pi_system_Ixx_mem\n\n",
 "is_pi_system_Ixx":
 "theorem is_pi_system_Ixx {Ixx : α → α → set α} {p : α → α → Prop} (Hne : ∀ {a b}, (Ixx a b).nonempty → p a b)\n    (Hi : ∀ {a₁ b₁ a₂ b₂}, Ixx a₁ b₁ ∩ Ixx a₂ b₂ = Ixx (max a₁ a₂) (min b₁ b₂)) (f : ι → α) (g : ι' → α) :\n    @is_pi_system α { S | ∃ (i j : _)(h : p (f i) (g j)), Ixx (f i) (g j) = S } := by\n  simpa only [exists_range_iff] using is_pi_system_Ixx_mem (@Hne) (@Hi) (range f) (range g)\n#align is_pi_system_Ixx is_pi_system_Ixx\n\n",
 "is_pi_system_Ioo_mem":
 "theorem is_pi_system_Ioo_mem (s t : set α) : is_pi_system { S | ∃ l ∈ s, ∃ u ∈ t, ∃ h : l < u, Ioo l u = S } :=\n  is_pi_system_Ixx_mem (fun a b ⟨x, hax, hxb⟩ => hax.trans hxb) (fun _ _ _ _ => Ioo_inter_Ioo) s t\n#align is_pi_system_Ioo_mem is_pi_system_Ioo_mem\n\n",
 "is_pi_system_Ioo":
 "theorem is_pi_system_Ioo (f : ι → α) (g : ι' → α) :\n    @is_pi_system α { S | ∃ (l u : _)(h : f l < g u), Ioo (f l) (g u) = S } :=\n  is_pi_system_Ixx (fun a b ⟨x, hax, hxb⟩ => hax.trans hxb) (fun _ _ _ _ => Ioo_inter_Ioo) f g\n#align is_pi_system_Ioo is_pi_system_Ioo\n\n",
 "is_pi_system_Ioi":
 "theorem is_pi_system_Ioi : is_pi_system (range Ioi : set (set α)) :=\n  @image_univ α _ Ioi ▸ is_pi_system_image_Ioi univ\n#align is_pi_system_Ioi is_pi_system_Ioi\n\n",
 "is_pi_system_Ioc_mem":
 "theorem is_pi_system_Ioc_mem (s t : set α) : is_pi_system { S | ∃ l ∈ s, ∃ u ∈ t, ∃ h : l < u, Ioc l u = S } :=\n  is_pi_system_Ixx_mem (fun a b ⟨x, hax, hxb⟩ => hax.trans_le hxb) (fun _ _ _ _ => Ioc_inter_Ioc) s t\n#align is_pi_system_Ioc_mem is_pi_system_Ioc_mem\n\n",
 "is_pi_system_Ioc":
 "theorem is_pi_system_Ioc (f : ι → α) (g : ι' → α) :\n    @is_pi_system α { S | ∃ (i j : _)(h : f i < g j), Ioc (f i) (g j) = S } :=\n  is_pi_system_Ixx (fun a b ⟨x, hax, hxb⟩ => hax.trans_le hxb) (fun _ _ _ _ => Ioc_inter_Ioc) f g\n#align is_pi_system_Ioc is_pi_system_Ioc\n\n",
 "is_pi_system_Iio":
 "theorem is_pi_system_Iio : is_pi_system (range Iio : set (set α)) :=\n  @image_univ α _ Iio ▸ is_pi_system_image_Iio univ\n#align is_pi_system_Iio is_pi_system_Iio\n\n",
 "is_pi_system_Ico_mem":
 "theorem is_pi_system_Ico_mem (s t : set α) : is_pi_system { S | ∃ l ∈ s, ∃ u ∈ t, ∃ h : l < u, Ico l u = S } :=\n  is_pi_system_Ixx_mem (fun a b ⟨x, hax, hxb⟩ => hax.trans_lt hxb) (fun _ _ _ _ => Ico_inter_Ico) s t\n#align is_pi_system_Ico_mem is_pi_system_Ico_mem\n\n",
 "is_pi_system_Ico":
 "theorem is_pi_system_Ico (f : ι → α) (g : ι' → α) :\n    @is_pi_system α { S | ∃ (i j : _)(h : f i < g j), Ico (f i) (g j) = S } :=\n  is_pi_system_Ixx (fun a b ⟨x, hax, hxb⟩ => hax.trans_lt hxb) (fun _ _ _ _ => Ico_inter_Ico) f g\n#align is_pi_system_Ico is_pi_system_Ico\n\n",
 "is_pi_system_Icc_mem":
 "theorem is_pi_system_Icc_mem (s t : set α) : is_pi_system { S | ∃ l ∈ s, ∃ u ∈ t, ∃ h : l ≤ u, Icc l u = S } :=\n  is_pi_system_Ixx_mem (fun a b => nonempty_Icc.1) (fun _ _ _ _ => Icc_inter_Icc) s t\n#align is_pi_system_Icc_mem is_pi_system_Icc_mem\n\n",
 "is_pi_system_Icc":
 "theorem is_pi_system_Icc (f : ι → α) (g : ι' → α) :\n    @is_pi_system α { S | ∃ (i j : _)(h : f i ≤ g j), Icc (f i) (g j) = S } :=\n  is_pi_system_Ixx (fun a b => nonempty_Icc.1) (fun _ _ _ _ => Icc_inter_Icc) f g\n#align is_pi_system_Icc is_pi_system_Icc\n\n",
 "insert_univ":
 "theorem is_pi_system.insert_univ {α} {S : set (set α)} (h_pi : is_pi_system S) : is_pi_system (insert Set.univ S) :=\n  by\n  intro s hs t ht hst\n  cases hs\n  · cases ht <;> simp [hs, ht]\n  · cases ht\n    · simp [hs, ht]\n    · exact Set.mem_insert_of_mem _ (h_pi s hs t ht hst)\n#align is_pi_system.insert_univ is_pi_system.insert_univ\n\n",
 "insert_empty":
 "theorem is_pi_system.insert_empty {α} {S : set (set α)} (h_pi : is_pi_system S) : is_pi_system (insert ∅ S) :=\n  by\n  intro s hs t ht hst\n  cases hs\n  · simp [hs]\n  · cases ht\n    · simp [ht]\n    · exact Set.mem_insert_of_mem _ (h_pi s hs t ht hst)\n#align is_pi_system.insert_empty is_pi_system.insert_empty\n\n",
 "induction_on_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem induction_on_inter {C : set α → Prop} {s : set (set α)} [m : measurable_space α] (h_eq : m = generate_from s)\n    (h_inter : is_pi_system s) (h_empty : C ∅) (h_basic : ∀ t ∈ s, C t)\n    (h_compl : ∀ t, measurable_set t → C t → C («expr ᶜ» t))\n    (h_union :\n      ∀ f : ℕ → set α,\n        Pairwise («expr on » Disjoint f) →\n          (∀ i, measurable_set (f i)) →\n            (∀ i, C (f i)) →\n              C\n                («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (f i))) :\n    ∀ ⦃t⦄, measurable_set t → C t :=\n  have eq : measurable_set = dynkin_system.generate_has s :=\n    by\n    rw [h_eq, dynkin_system.generate_from_eq h_inter]\n    rfl\n  fun t ht =>\n  have : dynkin_system.generate_has s t := by rwa [eq] at ht\n  this.rec_on h_basic h_empty\n    (fun t ht =>\n      h_compl t <| by\n        rw [eq]\n        exact ht)\n    fun f hf ht =>\n    h_union f hf fun i => by\n      rw [eq]\n      exact ht _\n#align induction_on_inter induction_on_inter\n\n",
 "has_univ":
 "theorem has_univ : d.has univ := by simpa using d.has_compl d.has_empty\n#align has_univ has_univ\n\n",
 "has_diff":
 "theorem has_diff {s₁ s₂ : set α} (h₁ : d.has s₁) (h₂ : d.has s₂) (h : s₂ ⊆ s₁) : d.has (s₁ \\ s₂) :=\n  by\n  apply d.has_compl_iff.1\n  simp [diff_eq, compl_inter]\n  exact d.has_union (d.has_compl h₁) h₂ (disjoint_compl_left.mono_right h)\n#align has_diff has_diff\n\n",
 "has_compl_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem has_compl_iff {a} : d.has («expr ᶜ» a) ↔ d.has a :=\n  ⟨fun h => by simpa using d.has_compl h, fun h => d.has_compl h⟩\n#align has_compl_iff has_compl_iff\n\n",
 "has_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem has_Union {β} [countable β] {f : β → set α} (hd : Pairwise («expr on » Disjoint f)) (h : ∀ i, d.has (f i)) :\n    d.has («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  by\n  cases nonempty_encodable β\n  rw [← Encodable.unionᵢ_decode₂]\n  exact d.has_Union_nat (Encodable.unionᵢ_decode₂_disjoint_on hd) fun n => Encodable.unionᵢ_decode₂_cases d.has_empty h\n#align has_Union has_Union\n\n",
 "generate_pi_system_subset_self":
 "theorem generate_pi_system_subset_self {α} {S : set (set α)} (h_S : is_pi_system S) : generate_pi_system S ⊆ S :=\n  by\n  intro x h\n  induction' h with s h_s s u h_gen_s h_gen_u h_nonempty h_s h_u\n  · exact h_s\n  · exact h_S _ h_s _ h_u h_nonempty\n#align generate_pi_system_subset_self generate_pi_system_subset_self\n\n",
 "generate_pi_system_mono":
 "theorem generate_pi_system_mono {α} {S T : set (set α)} (hST : S ⊆ T) : generate_pi_system S ⊆ generate_pi_system T :=\n  by\n  intro t ht\n  induction' ht with s h_s s u h_gen_s h_gen_u h_nonempty h_s h_u\n  · exact generate_pi_system.base (Set.mem_of_subset_of_mem hST h_s)\n  · exact is_pi_system_generate_pi_system T _ h_s _ h_u h_nonempty\n#align generate_pi_system_mono generate_pi_system_mono\n\n",
 "generate_pi_system_measurable_set":
 "theorem generate_pi_system_measurable_set {α} [M : measurable_space α] {S : set (set α)}\n    (h_meas_S : ∀ s ∈ S, measurable_set s) (t : set α) (h_in_pi : t ∈ generate_pi_system S) : measurable_set t :=\n  by\n  induction' h_in_pi with s h_s s u h_gen_s h_gen_u h_nonempty h_s h_u\n  · apply h_meas_S _ h_s\n  · apply measurable_set.inter h_s h_u\n#align generate_pi_system_measurable_set generate_pi_system_measurable_set\n\n",
 "generate_pi_system_eq":
 "theorem generate_pi_system_eq {α} {S : set (set α)} (h_pi : is_pi_system S) : generate_pi_system S = S :=\n  Set.Subset.antisymm (generate_pi_system_subset_self h_pi) (subset_generate_pi_system_self S)\n#align generate_pi_system_eq generate_pi_system_eq\n\n",
 "generate_le":
 "theorem generate_le {s : set (set α)} (h : ∀ t ∈ s, d.has t) : generate s ≤ d := fun t ht =>\n  ht.rec_on h d.has_empty (fun a _ h => d.has_compl h) fun f hd _ hf => d.has_Union hd hf\n#align generate_le generate_le\n\n",
 "generate_inter":
 "theorem generate_inter {s : set (set α)} (hs : is_pi_system s) {t₁ t₂ : set α} (ht₁ : (generate s).has t₁)\n    (ht₂ : (generate s).has t₂) : (generate s).has (t₁ ∩ t₂) :=\n  have : generate s ≤ (generate s).restrict_on ht₂ :=\n    generate_le _ fun s₁ hs₁ =>\n      have : (generate s).has s₁ := generate_has.basic s₁ hs₁\n      have : generate s ≤ (generate s).restrict_on this :=\n        generate_le _ fun s₂ hs₂ =>\n          show (generate s).has (s₂ ∩ s₁) from\n            (s₂ ∩ s₁).eq_empty_or_nonempty.elim (fun h => h.symm ▸ generate_has.empty) fun h =>\n              generate_has.basic _ <| hs _ hs₂ _ hs₁ h\n      have : (generate s).has (t₂ ∩ s₁) := this _ ht₂\n      show (generate s).has (s₁ ∩ t₂) by rwa [inter_comm]\n  this _ ht₁\n#align generate_inter generate_inter\n\n",
 "generate_has_subset_generate_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem generate_has_subset_generate_measurable {C : set (set α)} {s : set α} (hs : (generate C).has s) :\n    (measurable_set_of (generate_from C)) s :=\n  generate_le (of_measurable_space (generate_from C)) (fun t => measurable_set_generate_from) s hs\n#align generate_has_subset_generate_measurable generate_has_subset_generate_measurable\n\n",
 "generate_has_def":
 "theorem generate_has_def {C : set (set α)} : (generate C).has = generate_has C :=\n  rfl\n#align generate_has_def generate_has_def\n\n",
 "generate_has_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem generate_has_compl {C : set (set α)} {s : set α} : generate_has C («expr ᶜ» s) ↔ generate_has C s :=\n  by\n  refine' ⟨_, generate_has.compl⟩\n  intro h\n  convert generate_has.compl h\n  simp\n#align generate_has_compl generate_has_compl\n\n",
 "generate_from_pi_Union_Inter_singleton_left":
 "theorem generate_from_pi_Union_Inter_singleton_left (s : ι → set α) (S : set ι) :\n    generate_from (pi_Union_Inter (fun k => {s k}) S) = generate_from { t | ∃ k ∈ S, s k = t } :=\n  by\n  refine' le_antisymm (generate_from_le _) (generate_from_mono _)\n  · rintro _ ⟨I, hI, f, hf, rfl⟩\n    refine' finset.measurable_set_bInter _ fun m hm => measurable_set_generate_from _\n    exact ⟨m, hI hm, (hf m hm).symm⟩\n  · rintro _ ⟨k, hk, rfl⟩\n    refine' ⟨{k}, fun m hm => _, s, fun i hi => _, _⟩\n    · rw [Finset.mem_coe, Finset.mem_singleton] at hm\n      rwa [hm]\n    · exact Set.mem_singleton _\n    · simp only [Finset.mem_singleton, Set.interᵢ_interᵢ_eq_left]\n#align generate_from_pi_Union_Inter_singleton_left generate_from_pi_Union_Inter_singleton_left\n\n",
 "generate_from_pi_Union_Inter_measurable_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem generate_from_pi_Union_Inter_measurable_set (m : ι → measurable_space α) (S : set ι) :\n    generate_from (pi_Union_Inter (fun n => { s | (measurable_set_of (m n)) s }) S) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (m i) :=\n  by\n  refine' le_antisymm _ _\n  · rw [←\n      @generate_from_measurable_set α\n        («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (m i))]\n    exact generate_from_mono (measurable_set_supr_of_mem_pi_Union_Inter m S)\n  · refine' supᵢ₂_le fun i hi => _\n    rw [← @generate_from_measurable_set α (m i)]\n    exact generate_from_mono (mem_pi_Union_Inter_of_measurable_set m hi)\n#align generate_from_pi_Union_Inter_measurable_set generate_from_pi_Union_Inter_measurable_set\n\n",
 "generate_from_pi_Union_Inter_le":
 "theorem generate_from_pi_Union_Inter_le {m : measurable_space α} (π : ι → set (set α))\n    (h : ∀ n, generate_from (π n) ≤ m) (S : set ι) : generate_from (pi_Union_Inter π S) ≤ m :=\n  by\n  refine' generate_from_le _\n  rintro t ⟨ht_p, ht_p_mem, ft, hft_mem_pi, rfl⟩\n  refine' finset.measurable_set_bInter _ fun x hx_mem => (h x) _ _\n  exact measurable_set_generate_from (hft_mem_pi x hx_mem)\n#align generate_from_pi_Union_Inter_le generate_from_pi_Union_Inter_le\n\n",
 "generate_from_measurable_set_of_generate_pi_system":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem generate_from_measurable_set_of_generate_pi_system {α} {g : set (set α)} (t : set α)\n    (ht : t ∈ generate_pi_system g) : (measurable_set_of (generate_from g)) t :=\n  @generate_pi_system_measurable_set α (generate_from g) g (fun s h_s_in_g => measurable_set_generate_from h_s_in_g) t\n    ht\n#align generate_from_measurable_set_of_generate_pi_system generate_from_measurable_set_of_generate_pi_system\n\n",
 "generate_from_generate_pi_system_eq":
 "theorem generate_from_generate_pi_system_eq {α} {g : set (set α)} :\n    generate_from (generate_pi_system g) = generate_from g :=\n  by\n  apply le_antisymm <;> apply generate_from_le\n  · exact fun t h_t => generate_from_measurable_set_of_generate_pi_system t h_t\n  · exact fun t h_t => measurable_set_generate_from (generate_pi_system.base h_t)\n#align generate_from_generate_pi_system_eq generate_from_generate_pi_system_eq\n\n",
 "generate_from_eq":
 "/-- **Dynkin's π-λ theorem**:\n  Given a collection of sets closed under binary intersections, then the Dynkin system it\n  generates is equal to the σ-algebra it generates.\n  This result is known as the π-λ theorem.\n  A collection of sets closed under binary intersection is called a π-system (often requiring\n  additionnally that is is non-empty, but we drop this condition in the formalization).\n-/\ntheorem generate_from_eq {s : set (set α)} (hs : is_pi_system s) :\n    generate_from s = (generate s).to_measurable_space fun t₁ t₂ => generate_inter hs :=\n  le_antisymm (generate_from_le fun t ht => generate_has.basic t ht)\n    (of_measurable_space_le_of_measurable_space_iff.mp <|\n      by\n      rw [of_measurable_space_to_measurable_space]\n      exact generate_le _ fun t ht => measurable_set_generate_from ht)\n#align generate_from_eq generate_from_eq\n\n",
 "ext":
 "@[ext]\ntheorem ext : ∀ {d₁ d₂ : dynkin_system α}, (∀ s : set α, d₁.has s ↔ d₂.has s) → d₁ = d₂\n  | ⟨s₁, _, _, _⟩, ⟨s₂, _, _, _⟩, h =>\n    by\n    have : s₁ = s₂ := funext fun x => propext <| h x\n    subst this\n#align ext ext\n\n",
 "comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_pi_system.comap {α β} {S : set (set β)} (h_pi : is_pi_system S) (f : α → β) :\n    is_pi_system { s : set α | ∃ t ∈ S, «expr ⁻¹' » f t = s } :=\n  by\n  rintro _ ⟨s, hs_mem, rfl⟩ _ ⟨t, ht_mem, rfl⟩ hst\n  rw [← Set.preimage_inter] at hst⊢\n  refine' ⟨s ∩ t, h_pi s hs_mem t ht_mem _, rfl⟩\n  by_contra\n  rw [Set.not_nonempty_iff_eq_empty] at h\n  rw [h] at hst\n  simpa using hst\n#align is_pi_system.comap is_pi_system.comap\n\n",
 "Union":
 "#print Union /-\ntheorem Union {s₁ s₂ : set α} (h₁ : d.has s₁) (h₂ : d.has s₂) (h : Disjoint s₁ s₂) : d.has (s₁ ∪ s₂) :=\n  by\n  rw [union_eq_Union]\n  exact d.has_Union (pairwise_disjoint_on_bool.2 h) (bool.forall_bool.2 ⟨h₂, h₁⟩)\n#align has_union Union\n-/\n\n"}