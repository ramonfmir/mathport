{"weakly_regular_of_finite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (ε «expr ≠ » 0) -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (F «expr ⊆ » s) -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U «expr ⊇ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- In a finite measure space, assume that any open set can be approximated from inside by closed\nsets. Then the measure is weakly regular. -/\ntheorem weakly_regular_of_finite [borel_space α] (μ : Measure α) [FiniteMeasure μ]\n    (H : inner_regular μ IsClosed IsOpen) : weakly_regular μ :=\n  by\n  have hfin : ∀ {s}, μ s ≠ «expr⊤» := measure_ne_top μ\n  suffices\n    ∀ s,\n      MeasurableSet s →\n        ∀ (ε) (_ : ε ≠ 0),\n          ∃ (F : _)(_ : F ⊆ s)(U : _)(_ : «expr ⊇ » U s), IsClosed F ∧ IsOpen U ∧ μ s ≤ μ F + ε ∧ μ U ≤ μ s + ε\n    by\n    refine'\n      { outer_regular := fun s hs r hr => _\n        inner_regular := H }\n    rcases exists_between hr with ⟨r', hsr', hr'r⟩\n    rcases this s hs _ (tsub_pos_iff_lt.2 hsr').ne' with ⟨-, -, U, hsU, -, hUo, -, H⟩\n    refine' ⟨U, hsU, hUo, _⟩\n    rw [add_tsub_cancel_of_le hsr'.le] at H\n    exact H.trans_lt hr'r\n  refine' measurable_set.induction_on_open _ _ _\n  /- The proof is by measurable induction: we should check that the property is true for the empty\n    set, for open sets, and is stable by taking the complement and by taking countable disjoint\n    unions. The point of the property we are proving is that it is stable by taking complements\n    (exchanging the roles of closed and open sets and thanks to the finiteness of the measure). -/\n  -- check for open set\n  · intro U hU ε hε\n    rcases H.exists_subset_lt_add isClosed_empty hU hfin hε with ⟨F, hsF, hFc, hF⟩\n    exact ⟨F, hsF, U, subset.rfl, hFc, hU, hF.le, le_self_add⟩\n  -- check for complements\n  · rintro s hs H ε hε\n    rcases H ε hε with ⟨F, hFs, U, hsU, hFc, hUo, hF, hU⟩\n    refine'\n      ⟨«expr ᶜ» U, compl_subset_compl.2 hsU, «expr ᶜ» F, compl_subset_compl.2 hFs, hUo.is_closed_compl,\n        hFc.is_open_compl, _⟩\n    simp only [measure_compl_le_add_iff, *, hUo.measurable_set, hFc.measurable_set, true_and_iff]\n  -- check for disjoint unions\n  · intro s hsd hsm H ε ε0\n    have ε0' : ε / 2 ≠ 0 := (ENNReal.half_pos ε0).ne'\n    rcases ENNReal.exists_pos_sum_of_countable' ε0' ℕ with ⟨δ, δ0, hδε⟩\n    choose F hFs U hsU hFc hUo hF hU using fun n => H n (δ n) (δ0 n).ne'\n    -- the approximating closed set is constructed by considering finitely many sets `s i`, which\n    -- cover all the measure up to `ε/2`, approximating each of these by a closed set `F i`, and\n    -- taking the union of these (finitely many) `F i`.\n    have :\n      tendsto\n        (fun t =>\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (μ (s k)) +\n            ε / 2)\n        at_top\n        (nhds <|\n          μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s n)) +\n            ε / 2) :=\n      by\n      rw [measure_Union hsd hsm]\n      exact tendsto.add ennreal.summable.has_sum tendsto_const_nhds\n    rcases(this.eventually <| lt_mem_nhds <| ENNReal.lt_add_right hfin ε0').exists with ⟨t, ht⟩\n    -- the approximating open set is constructed by taking for each `s n` an approximating open set\n    -- `U n` with measure at most `μ (s n) + δ n` for a summable `δ`, and taking the union of these.\n    refine'\n      ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (F k),\n        Union_mono fun k => Union_subset fun _ => hFs _,\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (U n),\n        Union_mono hsU, isClosed_bunionᵢ t.finite_to_set fun k _ => hFc k, isOpen_unionᵢ hUo, ht.le.trans _, _⟩\n    · calc\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (μ (s k)) +\n              ε / 2 ≤\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t\n                  (μ (F k)) +\n                finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t\n                  (δ k) +\n              ε / 2 :=\n          by\n          rw [← sum_add_distrib]\n          exact add_le_add_right (sum_le_sum fun k hk => hF k) _\n        _ ≤\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t\n                  (μ (F k)) +\n                ε / 2 +\n              ε / 2 :=\n          (add_le_add_right (add_le_add_left ((ENNReal.sum_le_tsum _).trans hδε.le) _) _)\n        _ =\n            μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (F k)) +\n              ε :=\n          _\n        \n      rw [measure_bUnion_finset, add_assoc, ENNReal.add_halves]\n      exacts[fun k _ n _ hkn => (hsd hkn).mono (hFs k) (hFs n), fun k hk => (hFc k).measurable_set]\n    ·\n      calc\n        μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (U n)) ≤\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (U n)) :=\n          measure_Union_le _\n        _ ≤\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (μ (s n) + δ n) :=\n          (ENNReal.tsum_le_tsum hU)\n        _ =\n            μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s n)) +\n              «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (δ n) :=\n          by rw [measure_Union hsd hsm, ENNReal.tsum_add]\n        _ ≤\n            μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s n)) +\n              ε :=\n          add_le_add_left (hδε.le.trans ENNReal.half_le_self) _\n        \n#align weakly_regular_of_finite weakly_regular_of_finite\n\n",
 "trans":
 "#print trans /-\ntheorem trans {q' : Set α → Prop} (H : inner_regular μ p q) (H' : inner_regular μ q q') : inner_regular μ p q' :=\n  by\n  intro U hU r hr\n  rcases H' hU r hr with ⟨F, hFU, hqF, hF⟩; rcases H hqF _ hF with ⟨K, hKF, hpK, hrK⟩\n  exact ⟨K, hKF.trans hFU, hpK, hrK⟩\n#align trans trans\n-/\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprotected theorem smul [regular μ] {x : ennreal} (hx : x ≠ ennreal.top) : («expr • » x μ).regular :=\n  by\n  haveI := outer_regular.smul μ hx\n  haveI := is_finite_measure_on_compacts.smul μ hx\n  exact ⟨regular.inner_regular.smul x⟩\n#align smul smul\n\n",
 "restrict_of_measurable_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- The restriction of a weakly regular measure to a measurable set of finite measure is\nweakly regular. -/\ntheorem restrict_of_measurable_set [borel_space α] [weakly_regular μ] (A : Set α) (hA : MeasurableSet A)\n    (h'A : μ A ≠ ennreal.top) : weakly_regular (μ.restrict A) :=\n  by\n  haveI : Fact (μ A < ennreal.top) := ⟨h'A.lt_top⟩\n  refine' inner_regular.weakly_regular_of_finite _ fun V V_open => _\n  simp only [restrict_apply' hA]\n  intro r hr\n  have : μ (V ∩ A) ≠ ennreal.top := ne_top_of_le_ne_top h'A (measure_mono <| inter_subset_right _ _)\n  rcases(V_open.measurable_set.inter hA).exists_lt_is_closed_of_ne_top this hr with ⟨F, hFVA, hFc, hF⟩\n  refine' ⟨F, hFVA.trans (inter_subset_left _ _), hFc, _⟩\n  rwa [inter_eq_self_of_subset_left (hFVA.trans <| inter_subset_right _ _)]\n#align restrict_of_measurable_set restrict_of_measurable_set\n\n",
 "outer_regular":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U «expr ⊇ » A n) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- If a measure `μ` admits finite spanning open sets such that the restriction of `μ` to each set\nis outer regular, then the original measure is outer regular as well. -/\nprotected theorem finite_spanning_sets_in.outer_regular [opens_measurable_space α] {μ : Measure α}\n    (s : μ.finite_spanning_sets_in { U | IsOpen U ∧ outer_regular (μ.restrict U) }) : outer_regular μ :=\n  by\n  refine' ⟨fun A hA r hr => _⟩\n  have hm : ∀ n, MeasurableSet (s.set n) := fun n => (s.set_mem n).1.measurable_set\n  haveI : ∀ n, outer_regular (μ.restrict (s.set n)) := fun n => (s.set_mem n).2\n  -- Note that `A = ⋃ n, A ∩ disjointed s n`. We replace `A` with this sequence.\n  obtain ⟨A, hAm, hAs, hAd, rfl⟩ :\n    ∃ A' : ℕ → Set α,\n      (∀ n, MeasurableSet (A' n)) ∧\n        (∀ n, A' n ⊆ s.set n) ∧\n          Pairwise («expr on » Disjoint A') ∧\n            A =\n              «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (A' n) :=\n    by\n    refine'\n      ⟨fun n => A ∩ disjointed s.set n, fun n => hA.inter (MeasurableSet.disjointed hm _), fun n =>\n        (inter_subset_right _ _).trans (disjointed_subset _ _),\n        (disjoint_disjointed s.set).mono fun k l hkl => hkl.mono inf_le_right inf_le_right, _⟩\n    rw [← inter_Union, unionᵢ_disjointed, s.spanning, inter_univ]\n  rcases ENNReal.exists_pos_sum_of_countable' (tsub_pos_iff_lt.2 hr).ne' ℕ with ⟨δ, δ0, hδε⟩\n  rw [lt_tsub_iff_right, add_comm] at hδε\n  have : ∀ n, ∃ (U : _)(_ : «expr ⊇ » U (A n)), IsOpen U ∧ μ U < μ (A n) + δ n :=\n    by\n    intro n\n    have H₁ : ∀ t, μ.restrict (s.set n) t = μ (t ∩ s.set n) := fun t => restrict_apply' (hm n)\n    have Ht : μ.restrict (s.set n) (A n) ≠ «expr⊤» := by\n      rw [H₁]\n      exact ((measure_mono <| inter_subset_right _ _).trans_lt (s.finite n)).ne\n    rcases(A n).exists_is_open_lt_add Ht (δ0 n).ne' with ⟨U, hAU, hUo, hU⟩\n    rw [H₁, H₁, inter_eq_self_of_subset_left (hAs _)] at hU\n    exact ⟨U ∩ s.set n, subset_inter hAU (hAs _), hUo.inter (s.set_mem n).1, hU⟩\n  choose U hAU hUo hU\n  refine'\n    ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (U n),\n      Union_mono hAU, isOpen_unionᵢ hUo, _⟩\n  calc\n    μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (U n)) ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (U n)) :=\n      measure_Union_le _\n    _ ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (μ (A n) + δ n) :=\n      (ENNReal.tsum_le_tsum fun n => (hU n).le)\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (A n)) +\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (δ n) :=\n      ENNReal.tsum_add\n    _ =\n        μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (A n)) +\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (δ n) :=\n      (congr_arg₂ (· + ·) (measure_Union hAd hAm).symm rfl)\n    _ < r := hδε\n    \n#align finite_spanning_sets_in.outer_regular finite_spanning_sets_in.outer_regular\n\n",
 "of_pseudo_emetric_space":
 "/-- In a metric space (or even a pseudo emetric space), an open set can be approximated from inside\nby closed sets. -/\ntheorem of_pseudo_emetric_space {X : Type _} [PseudoEMetricSpace X] [MeasurableSpace X] (μ : Measure X) :\n    inner_regular μ IsClosed IsOpen := by\n  intro U hU r hr\n  rcases hU.exists_Union_is_closed with ⟨F, F_closed, -, rfl, F_mono⟩\n  rw [measure_Union_eq_supr F_mono.directed_le] at hr\n  rcases lt_supᵢ_iff.1 hr with ⟨n, hn⟩\n  exact ⟨F n, subset_Union _ _, F_closed n, hn⟩\n#align of_pseudo_emetric_space of_pseudo_emetric_space\n\n",
 "measure_eq_supr_is_compact_of_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- Given a regular measure, any measurable set of finite mass can be approximated from\ninside by compact sets. -/\ntheorem _root_.measurable_set.measure_eq_supr_is_compact_of_ne_top [regular μ] ⦃A : Set α⦄ (hA : MeasurableSet A)\n    (h'A : μ A ≠ ennreal.top) :\n    μ A = «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ K) :=\n  regular.inner_regular_measurable.measure_eq_supr ⟨hA, h'A⟩\n#align measurable_set.measure_eq_supr_is_compact_of_ne_top measurable_set.measure_eq_supr_is_compact_of_ne_top\n\n",
 "measure_eq_supr_is_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- The measure of an open set is the supremum of the measures of compact sets it contains. -/\ntheorem _root_.is_open.measure_eq_supr_is_compact ⦃U : Set α⦄ (hU : IsOpen U) (μ : Measure α) [regular μ] :\n    μ U = «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ K) :=\n  regular.inner_regular.measure_eq_supr hU\n#align is_open.measure_eq_supr_is_compact is_open.measure_eq_supr_is_compact\n\n",
 "measure_eq_supr_is_closed_of_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- Given a weakly regular measure, any measurable set of finite mass can be approximated from\ninside by closed sets. -/\ntheorem _root_.measurable_set.measure_eq_supr_is_closed_of_ne_top [weakly_regular μ] ⦃A : Set α⦄ (hA : MeasurableSet A)\n    (h'A : μ A ≠ ennreal.top) :\n    μ A = «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ K) :=\n  inner_regular_measurable.measure_eq_supr ⟨hA, h'A⟩\n#align measurable_set.measure_eq_supr_is_closed_of_ne_top measurable_set.measure_eq_supr_is_closed_of_ne_top\n\n",
 "measure_eq_supr_is_closed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- If `μ` is a weakly regular measure, then any open set can be approximated by a closed subset. -/\ntheorem _root_.is_open.measure_eq_supr_is_closed ⦃U : Set α⦄ (hU : IsOpen U) (μ : Measure α) [weakly_regular μ] :\n    μ U = «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ F) :=\n  weakly_regular.inner_regular.measure_eq_supr hU\n#align is_open.measure_eq_supr_is_closed is_open.measure_eq_supr_is_closed\n\n",
 "measure_eq_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-\nCopyright (c) 2021 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris Van Doorn, Yury Kudryashov\n-/\ntheorem measure_eq_supr (H : inner_regular μ p q) (hU : q U) :\n    μ U = «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ K) :=\n  by\n  refine' le_antisymm (le_of_forall_lt fun r hr => _) (supᵢ₂_le fun K hK => supᵢ_le fun _ => μ.mono hK)\n  simpa only [lt_supᵢ_iff, exists_prop] using H hU r hr\n#align measure_eq_supr measure_eq_supr\n\n",
 "measure_eq_infi_is_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/-- For an outer regular measure, the measure of a set is the infimum of the measures of open sets\ncontaining it. -/\ntheorem _root_.set.measure_eq_infi_is_open (A : Set α) (μ : Measure α) [outer_regular μ] :\n    μ A = «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (μ U) :=\n  by\n  refine' le_antisymm (le_infᵢ₂ fun s hs => le_infᵢ fun h2s => μ.mono hs) _\n  refine' le_of_forall_lt' fun r hr => _\n  simpa only [infᵢ_lt_iff, exists_prop] using A.exists_is_open_lt_of_lt r hr\n#align set.measure_eq_infi_is_open set.measure_eq_infi_is_open\n\n",
 "measurable_set_of_open":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (ε «expr ≠ » 0) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- If a measure is inner regular (using closed or compact sets), then every measurable set of\nfinite measure can by approximated by a (closed or compact) subset. -/\ntheorem measurable_set_of_open [outer_regular μ] (H : inner_regular μ p IsOpen) (h0 : p ∅)\n    (hd : ∀ ⦃s U⦄, p s → IsOpen U → p (s \\ U)) : inner_regular μ p fun s => MeasurableSet s ∧ μ s ≠ ennreal.top :=\n  by\n  rintro s ⟨hs, hμs⟩ r hr\n  obtain ⟨ε, hε, hεs, rfl⟩ : ∃ (ε : _)(_ : ε ≠ 0), ε + ε ≤ μ s ∧ r = μ s - (ε + ε) :=\n    by\n    use (μ s - r) / 2\n    simp [*, hr.le, ENNReal.add_halves, ENNReal.sub_sub_cancel, le_add_right]\n  rcases hs.exists_is_open_diff_lt hμs hε with ⟨U, hsU, hUo, hUt, hμU⟩\n  rcases(U \\ s).exists_is_open_lt_of_lt _ hμU with ⟨U', hsU', hU'o, hμU'⟩\n  replace hsU' := diff_subset_comm.1 hsU'\n  rcases H.exists_subset_lt_add h0 hUo hUt.ne hε with ⟨K, hKU, hKc, hKr⟩\n  refine' ⟨K \\ U', fun x hx => hsU' ⟨hKU hx.1, hx.2⟩, hd hKc hU'o, ENNReal.sub_lt_of_lt_add hεs _⟩\n  calc\n    μ s ≤ μ U := μ.mono hsU\n    _ < μ K + ε := hKr\n    _ ≤ μ (K \\ U') + μ U' + ε := (add_le_add_right (tsub_le_iff_right.1 le_measure_diff) _)\n    _ ≤ μ (K \\ U') + ε + ε := by\n      mono*\n      exacts[hμU'.le, le_rfl]\n    _ = μ (K \\ U') + (ε + ε) := add_assoc _ _ _\n    \n#align measurable_set_of_open measurable_set_of_open\n\n",
 "map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\nprotected theorem map [opens_measurable_space α] [MeasurableSpace β] [TopologicalSpace β] [T2Space β] [borel_space β]\n    [regular μ] (f : «expr ≃ₜ » α β) : (Measure.map f μ).regular :=\n  by\n  haveI := outer_regular.map f μ\n  haveI := is_finite_measure_on_compacts.map μ f\n  exact\n    ⟨regular.inner_regular.map f.to_equiv f.measurable.ae_measurable (fun U hU => hU.preimage f.continuous)\n        (fun K hK => hK.image f.continuous) (fun K hK => hK.measurable_set) fun U hU => hU.measurable_set⟩\n#align map map\n\n",
 "is_compact_is_closed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- In a `σ`-compact space, any closed set can be approximated by a compact subset. -/\ntheorem is_compact_is_closed {X : Type _} [TopologicalSpace X] [SigmaCompactSpace X] [MeasurableSpace X]\n    (μ : Measure X) : inner_regular μ IsCompact IsClosed :=\n  by\n  intro F hF r hr\n  set B : ℕ → Set X := compactCovering X\n  have hBc : ∀ n, IsCompact (F ∩ B n) := fun n => (isCompact_compactCovering X n).inter_left hF\n  have hBU :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (F ∩ B n) = F := by\n    rw [← inter_Union, unionᵢ_compactCovering, Set.inter_univ]\n  have :\n    μ F =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ (F ∩ B n)) :=\n    by\n    rw [← measure_Union_eq_supr, hBU]\n    exact Monotone.directed_le fun m n h => inter_subset_inter_right _ (compactCovering_subset _ h)\n  rw [this] at hr\n  rcases lt_supᵢ_iff.1 hr with ⟨n, hn⟩\n  exact ⟨_, inter_subset_left _ _, hBc n, hn⟩\n#align is_compact_is_closed is_compact_is_closed\n\n",
 "inner_regular_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem inner_regular_measurable [weakly_regular μ] :\n    inner_regular μ IsClosed fun s => MeasurableSet s ∧ μ s ≠ ennreal.top :=\n  weakly_regular.inner_regular.measurable_set_of_open isClosed_empty fun _ _ h₁ h₂ => h₁.inter h₂.is_closed_compl\n#align inner_regular_measurable inner_regular_measurable\n\n",
 "exists_subset_lt_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » U) -/\ntheorem exists_subset_lt_add (H : inner_regular μ p q) (h0 : p ∅) (hU : q U) (hμU : μ U ≠ ennreal.top) (hε : ε ≠ 0) :\n    ∃ (K : _)(_ : K ⊆ U), p K ∧ μ U < μ K + ε :=\n  by\n  cases' eq_or_ne (μ U) 0 with h₀ h₀\n  · refine' ⟨∅, empty_subset _, h0, _⟩\n    rwa [measure_empty, h₀, zero_add, pos_iff_ne_zero]\n  · rcases H hU _ (ENNReal.sub_lt_self hμU h₀ hε) with ⟨K, hKU, hKc, hrK⟩\n    exact ⟨K, hKU, hKc, ENNReal.lt_add_of_sub_lt_right (or.inl hμU) hrK⟩\n#align exists_subset_lt_add exists_subset_lt_add\n\n",
 "exists_lt_is_compact_of_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » A) -/\n/-- If `μ` is a regular measure, then any measurable set of finite measure can be approximated by a\ncompact subset. See also `measurable_set.exists_is_compact_lt_add`. -/\ntheorem _root_.measurable_set.exists_lt_is_compact_of_ne_top [regular μ] ⦃A : Set α⦄ (hA : MeasurableSet A)\n    (h'A : μ A ≠ ennreal.top) {r : ennreal} (hr : r < μ A) : ∃ (K : _)(_ : K ⊆ A), IsCompact K ∧ r < μ K :=\n  regular.inner_regular_measurable ⟨hA, h'A⟩ _ hr\n#align measurable_set.exists_lt_is_compact_of_ne_top measurable_set.exists_lt_is_compact_of_ne_top\n\n",
 "exists_lt_is_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » U) -/\n/-- If `μ` is a regular measure, then any open set can be approximated by a compact subset. -/\ntheorem _root_.is_open.exists_lt_is_compact [regular μ] ⦃U : Set α⦄ (hU : IsOpen U) {r : ennreal} (hr : r < μ U) :\n    ∃ (K : _)(_ : K ⊆ U), IsCompact K ∧ r < μ K :=\n  regular.inner_regular hU r hr\n#align is_open.exists_lt_is_compact is_open.exists_lt_is_compact\n\n",
 "exists_lt_is_closed_of_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » A) -/\n/-- Given a weakly regular measure, any measurable set of finite mass can be approximated from\ninside by closed sets. -/\ntheorem _root_.measurable_set.exists_lt_is_closed_of_ne_top [weakly_regular μ] ⦃A : Set α⦄ (hA : MeasurableSet A)\n    (h'A : μ A ≠ ennreal.top) {r : ennreal} (hr : r < μ A) : ∃ (K : _)(_ : K ⊆ A), IsClosed K ∧ r < μ K :=\n  inner_regular_measurable ⟨hA, h'A⟩ _ hr\n#align measurable_set.exists_lt_is_closed_of_ne_top measurable_set.exists_lt_is_closed_of_ne_top\n\n",
 "exists_lt_is_closed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (F «expr ⊆ » U) -/\n-- see Note [lower instance priority]\n/-- If `μ` is a weakly regular measure, then any open set can be approximated by a closed subset. -/\ntheorem _root_.is_open.exists_lt_is_closed [weakly_regular μ] ⦃U : Set α⦄ (hU : IsOpen U) {r : ennreal} (hr : r < μ U) :\n    ∃ (F : _)(_ : F ⊆ U), IsClosed F ∧ r < μ F :=\n  weakly_regular.inner_regular hU r hr\n#align is_open.exists_lt_is_closed is_open.exists_lt_is_closed\n\n",
 "exists_is_open_lt_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U «expr ⊇ » A) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\n-- see Note [lower instance priority]\n/-- Given `r` larger than the measure of a set `A`, there exists an open superset of `A` with\nmeasure less than `r`. -/\ntheorem _root_.set.exists_is_open_lt_of_lt [outer_regular μ] (A : Set α) (r : ennreal) (hr : μ A < r) :\n    ∃ (U : _)(_ : «expr ⊇ » U A), IsOpen U ∧ μ U < r :=\n  by\n  rcases outer_regular.outer_regular (measurable_set_to_measurable μ A) r (by rwa [measure_to_measurable]) with\n    ⟨U, hAU, hUo, hU⟩\n  exact ⟨U, (subset_to_measurable _ _).trans hAU, hUo, hU⟩\n#align set.exists_is_open_lt_of_lt set.exists_is_open_lt_of_lt\n\n",
 "exists_is_open_lt_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U «expr ⊇ » A) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\ntheorem _root_.set.exists_is_open_lt_add [outer_regular μ] (A : Set α) (hA : μ A ≠ ennreal.top) {ε : ennreal}\n    (hε : ε ≠ 0) : ∃ (U : _)(_ : «expr ⊇ » U A), IsOpen U ∧ μ U < μ A + ε :=\n  A.exists_is_open_lt_of_lt _ (ENNReal.lt_add_right hA hε)\n#align set.exists_is_open_lt_add set.exists_is_open_lt_add\n\n",
 "exists_is_open_le_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U «expr ⊇ » A) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\ntheorem _root_.set.exists_is_open_le_add (A : Set α) (μ : Measure α) [outer_regular μ] {ε : ennreal} (hε : ε ≠ 0) :\n    ∃ (U : _)(_ : «expr ⊇ » U A), IsOpen U ∧ μ U ≤ μ A + ε :=\n  by\n  rcases eq_or_ne (μ A) (ennreal.top) with (H | H)\n  · exact ⟨univ, subset_univ _, isOpen_univ, by simp only [H, _root_.top_add, le_top]⟩\n  · rcases A.exists_is_open_lt_add H hε with ⟨U, AU, U_open, hU⟩\n    exact ⟨U, AU, U_open, hU.le⟩\n#align set.exists_is_open_le_add set.exists_is_open_le_add\n\n",
 "exists_is_open_diff_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U «expr ⊇ » A) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊇ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.measurable_set.exists_is_open_diff_lt [outer_regular μ] {A : Set α} (hA : MeasurableSet A)\n    (hA' : μ A ≠ ennreal.top) {ε : ennreal} (hε : ε ≠ 0) :\n    ∃ (U : _)(_ : «expr ⊇ » U A), IsOpen U ∧ μ U < ennreal.top ∧ μ (U \\ A) < ε :=\n  by\n  rcases A.exists_is_open_lt_add hA' hε with ⟨U, hAU, hUo, hU⟩\n  use U, hAU, hUo, hU.trans_le le_top\n  exact measure_diff_lt_of_lt_add hA hAU hA' hU\n#align measurable_set.exists_is_open_diff_lt measurable_set.exists_is_open_diff_lt\n\n",
 "exists_is_compact_lt_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » A) -/\n/-- If `μ` is a regular measure, then any measurable set of finite measure can be approximated by a\ncompact subset. See also `measurable_set.exists_lt_is_compact_of_ne_top`. -/\ntheorem _root_.measurable_set.exists_is_compact_lt_add [regular μ] ⦃A : Set α⦄ (hA : MeasurableSet A)\n    (h'A : μ A ≠ ennreal.top) {ε : ennreal} (hε : ε ≠ 0) : ∃ (K : _)(_ : K ⊆ A), IsCompact K ∧ μ A < μ K + ε :=\n  regular.inner_regular_measurable.exists_subset_lt_add isCompact_empty ⟨hA, h'A⟩ h'A hε\n#align measurable_set.exists_is_compact_lt_add measurable_set.exists_is_compact_lt_add\n\n",
 "exists_is_compact_diff_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » A) -/\n/-- If `μ` is a regular measure, then any measurable set of finite measure can be approximated by a\ncompact subset. See also `measurable_set.exists_is_compact_lt_add` and\n`measurable_set.exists_lt_is_compact_of_ne_top`. -/\ntheorem _root_.measurable_set.exists_is_compact_diff_lt [opens_measurable_space α] [T2Space α] [regular μ] ⦃A : Set α⦄\n    (hA : MeasurableSet A) (h'A : μ A ≠ ennreal.top) {ε : ennreal} (hε : ε ≠ 0) :\n    ∃ (K : _)(_ : K ⊆ A), IsCompact K ∧ μ (A \\ K) < ε :=\n  by\n  rcases hA.exists_is_compact_lt_add h'A hε with ⟨K, hKA, hKc, hK⟩\n  exact ⟨K, hKA, hKc, measure_diff_lt_of_lt_add hKc.measurable_set hKA (ne_top_of_le_ne_top h'A <| measure_mono hKA) hK⟩\n#align measurable_set.exists_is_compact_diff_lt measurable_set.exists_is_compact_diff_lt\n\n",
 "exists_is_closed_lt_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (K «expr ⊆ » s) -/\n/-- If `s` is a measurable set, a weakly regular measure `μ` is finite on `s`, and `ε` is a positive\nnumber, then there exist a closed set `K ⊆ s` such that `μ s < μ K + ε`. -/\ntheorem _root_.measurable_set.exists_is_closed_lt_add [weakly_regular μ] {s : Set α} (hs : MeasurableSet s)\n    (hμs : μ s ≠ ennreal.top) {ε : ennreal} (hε : ε ≠ 0) : ∃ (K : _)(_ : K ⊆ s), IsClosed K ∧ μ s < μ K + ε :=\n  inner_regular_measurable.exists_subset_lt_add isClosed_empty ⟨hs, hμs⟩ hμs hε\n#align measurable_set.exists_is_closed_lt_add measurable_set.exists_is_closed_lt_add\n\n",
 "exists_is_closed_diff_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (F «expr ⊆ » A) -/\ntheorem _root_.measurable_set.exists_is_closed_diff_lt [opens_measurable_space α] [weakly_regular μ] ⦃A : Set α⦄\n    (hA : MeasurableSet A) (h'A : μ A ≠ ennreal.top) {ε : ennreal} (hε : ε ≠ 0) :\n    ∃ (F : _)(_ : F ⊆ A), IsClosed F ∧ μ (A \\ F) < ε :=\n  by\n  rcases hA.exists_is_closed_lt_add h'A hε with ⟨F, hFA, hFc, hF⟩\n  exact ⟨F, hFA, hFc, measure_diff_lt_of_lt_add hFc.measurable_set hFA (ne_top_of_le_ne_top h'A <| measure_mono hFA) hF⟩\n#align measurable_set.exists_is_closed_diff_lt measurable_set.exists_is_closed_diff_lt\n\n",
 "exists_compact_not_null":
 "theorem exists_compact_not_null [regular μ] : (∃ K, IsCompact K ∧ μ K ≠ 0) ↔ μ ≠ 0 := by\n  simp_rw [ne.def, ← measure_univ_eq_zero, is_open_univ.measure_eq_supr_is_compact, ENNReal.supᵢ_eq_zero, not_forall,\n    exists_prop, subset_univ, true_and_iff]\n#align exists_compact_not_null exists_compact_not_null\n\n"}