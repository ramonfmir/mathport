{"tendsto_measure_of_null_frontier_of_tendsto'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem probability_measure.tendsto_measure_of_null_frontier_of_tendsto' {Ω ι : Type _} {L : filter ι}\n    [measurable_space Ω] [pseudo_emetric_space Ω] [opens_measurable_space Ω] {μ : probability_measure Ω}\n    {μs : ι → probability_measure Ω} (μs_lim : tendsto μs L ((nhds) μ)) {E : set Ω}\n    (E_nullbdry : (μ : measure Ω) (frontier E) = 0) :\n    tendsto (fun i => (μs i : measure Ω) E) L ((nhds) ((μ : measure Ω) E)) :=\n  haveI h_opens : ∀ G, is_open G → (μ : measure Ω) G ≤ L.liminf fun i => (μs i : measure Ω) G := fun G G_open =>\n    probability_measure.le_liminf_measure_open_of_tendsto μs_lim G_open\n  tendsto_measure_of_null_frontier h_opens E_nullbdry\n#align\n  probability_measure.tendsto_measure_of_null_frontier_of_tendsto' probability_measure.tendsto_measure_of_null_frontier_of_tendsto'\n\n",
 "tendsto_measure_of_null_frontier_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- One implication of the portmanteau theorem:\nWeak convergence of probability measures implies that if the boundary of a Borel set\ncarries no probability mass under the limit measure, then the limit of the measures of the set\nequals the measure of the set under the limit probability measure.\n\nA version with coercions to ordinary `ℝ≥0∞`-valued measures is\n`measure_theory.probability_measure.tendsto_measure_of_null_frontier_of_tendsto'`.\n-/\ntheorem probability_measure.tendsto_measure_of_null_frontier_of_tendsto {Ω ι : Type _} {L : filter ι}\n    [measurable_space Ω] [pseudo_emetric_space Ω] [opens_measurable_space Ω] {μ : probability_measure Ω}\n    {μs : ι → probability_measure Ω} (μs_lim : tendsto μs L ((nhds) μ)) {E : set Ω} (E_nullbdry : μ (frontier E) = 0) :\n    tendsto (fun i => μs i E) L ((nhds) (μ E)) :=\n  by\n  have E_nullbdry' : (μ : measure Ω) (frontier E) = 0 := by\n    rw [← probability_measure.ennreal_coe_fn_eq_coe_fn_to_measure, E_nullbdry, ennreal.coe_zero]\n  have key := probability_measure.tendsto_measure_of_null_frontier_of_tendsto' μs_lim E_nullbdry'\n  exact (ennreal.tendsto_to_nnreal (measure_ne_top (↑μ) E)).comp key\n#align\n  probability_measure.tendsto_measure_of_null_frontier_of_tendsto probability_measure.tendsto_measure_of_null_frontier_of_tendsto\n\n",
 "tendsto_measure_of_null_frontier":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- One implication of the portmanteau theorem:\nFor a sequence of Borel probability measures, if the liminf of the measures of any open set is at\nleast the measure of the open set under a candidate limit measure, then for any set whose\nboundary carries no probability mass under the candidate limit measure, then its measures under the\nsequence converge to its measure under the candidate limit measure.\n-/\ntheorem tendsto_measure_of_null_frontier {ι : Type _} {L : filter ι} {μ : measure Ω} {μs : ι → measure Ω}\n    [is_probability_measure μ] [∀ i, is_probability_measure (μs i)]\n    (h_opens : ∀ G, is_open G → μ G ≤ L.liminf fun i => μs i G) {E : set Ω} (E_nullbdry : μ (frontier E) = 0) :\n    L.tendsto (fun i => μs i E) ((nhds) (μ E)) :=\n  haveI h_closeds : ∀ F, is_closed F → (L.limsup fun i => μs i F) ≤ μ F :=\n    limsup_measure_closed_le_iff_liminf_measure_open_ge.mpr h_opens\n  tendsto_measure_of_le_liminf_measure_of_limsup_measure_le interior_subset subset_closure E_nullbdry\n    (h_opens _ is_open_interior) (h_closeds _ is_closed_closure)\n#align tendsto_measure_of_null_frontier tendsto_measure_of_null_frontier\n\n",
 "tendsto_measure_of_le_liminf_measure_of_limsup_measure_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n-- section\ntheorem tendsto_measure_of_le_liminf_measure_of_limsup_measure_le {ι : Type _} {L : filter ι} {μ : measure Ω}\n    {μs : ι → measure Ω} {E₀ E E₁ : set Ω} (E₀_subset : E₀ ⊆ E) (subset_E₁ : E ⊆ E₁) (nulldiff : μ (E₁ \\ E₀) = 0)\n    (h_E₀ : μ E₀ ≤ L.liminf fun i => μs i E₀) (h_E₁ : (L.limsup fun i => μs i E₁) ≤ μ E₁) :\n    L.tendsto (fun i => μs i E) ((nhds) (μ E)) :=\n  by\n  apply tendsto_of_le_liminf_of_limsup_le\n  · have E₀_ae_eq_E : «expr =ᵐ[ ] » E₀ μ E :=\n      eventually_le.antisymm E₀_subset.eventually_le (subset_E₁.eventually_le.trans (ae_le_set.mpr nulldiff))\n    calc\n      μ E = μ E₀ := measure_congr E₀_ae_eq_E.symm\n      _ ≤ L.liminf fun i => μs i E₀ := h_E₀\n      _ ≤ L.liminf fun i => μs i E := _\n      \n    · refine' liminf_le_liminf (eventually_of_forall fun _ => measure_mono E₀_subset) _\n      infer_param\n  · have E_ae_eq_E₁ : «expr =ᵐ[ ] » E μ E₁ :=\n      eventually_le.antisymm subset_E₁.eventually_le ((ae_le_set.mpr nulldiff).trans E₀_subset.eventually_le)\n    calc\n      (L.limsup fun i => μs i E) ≤ L.limsup fun i => μs i E₁ := _\n      _ ≤ μ E₁ := h_E₁\n      _ = μ E := measure_congr E_ae_eq_E₁.symm\n      \n    · refine' limsup_le_limsup (eventually_of_forall fun _ => measure_mono subset_E₁) _\n      infer_param\n#align\n  tendsto_measure_of_le_liminf_measure_of_limsup_measure_le tendsto_measure_of_le_liminf_measure_of_limsup_measure_le\n\n",
 "tendsto_lintegral_thickened_indicator_of_is_closed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The integrals of thickened indicators of a closed set against a finite measure tend to the\nmeasure of the closed set if the thickening radii tend to zero.\n-/\ntheorem tendsto_lintegral_thickened_indicator_of_is_closed {Ω : Type _} [measurable_space Ω] [pseudo_emetric_space Ω]\n    [opens_measurable_space Ω] (μ : measure Ω) [is_finite_measure μ] {F : set Ω} (F_closed : is_closed F)\n    {δs : ℕ → exprℝ} (δs_pos : ∀ n, 0 < δs n) (δs_lim : tendsto δs at_top ((nhds) 0)) :\n    tendsto (fun n => lintegral μ fun ω => (thickened_indicator (δs_pos n) F ω : ennreal)) at_top ((nhds) (μ F)) :=\n  by\n  apply\n    measure_of_cont_bdd_of_tendsto_indicator μ F_closed.measurable_set (fun n => thickened_indicator (δs_pos n) F)\n      fun n ω => thickened_indicator_le_one (δs_pos n) F ω\n  have key := thickened_indicator_tendsto_indicator_closure δs_pos δs_lim F\n  rwa [F_closed.closure_eq] at key\n#align tendsto_lintegral_thickened_indicator_of_is_closed tendsto_lintegral_thickened_indicator_of_is_closed\n\n",
 "measure_of_cont_bdd_of_tendsto_indicator":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If a sequence of bounded continuous functions tends to the indicator of a measurable set and\nthe functions are uniformly bounded, then their integrals against a finite measure tend to the\nmeasure of the set.\n\nA similar result with more general assumptions is\n`measure_theory.measure_of_cont_bdd_of_tendsto_filter_indicator`.\n-/\ntheorem measure_of_cont_bdd_of_tendsto_indicator [topological_space Ω] [opens_measurable_space Ω] (μ : measure Ω)\n    [is_finite_measure μ] {c : nnreal} {E : set Ω} (E_mble : measurable_set E)\n    (fs : ℕ → bounded_continuous_function Ω (nnreal)) (fs_bdd : ∀ n ω, fs n ω ≤ c)\n    (fs_lim :\n      tendsto (fun n : ℕ => (coe_fn : bounded_continuous_function Ω (nnreal) → Ω → nnreal) (fs n)) at_top\n        ((nhds) (indicator E fun x => (1 : nnreal)))) :\n    tendsto (fun n => lintegral μ fun ω => fs n ω) at_top ((nhds) (μ E)) :=\n  by\n  have fs_lim' :\n    ∀ ω, tendsto (fun n : ℕ => (fs n ω : nnreal)) at_top ((nhds) (indicator E (fun x => (1 : nnreal)) ω)) :=\n    by\n    rw [tendsto_pi_nhds] at fs_lim\n    exact fun ω => fs_lim ω\n  apply\n    measure_of_cont_bdd_of_tendsto_filter_indicator μ E_mble fs\n      (eventually_of_forall fun n => eventually_of_forall (fs_bdd n)) (eventually_of_forall fs_lim')\n#align measure_of_cont_bdd_of_tendsto_indicator measure_of_cont_bdd_of_tendsto_indicator\n\n",
 "measure_of_cont_bdd_of_tendsto_filter_indicator":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n--section\n/-- If bounded continuous functions tend to the indicator of a measurable set and are\nuniformly bounded, then their integrals against a finite measure tend to the measure of the set.\nThis formulation assumes:\n * the functions tend to a limit along a countably generated filter;\n * the limit is in the almost everywhere sense;\n * boundedness holds almost everywhere.\n-/\ntheorem measure_of_cont_bdd_of_tendsto_filter_indicator {ι : Type _} {L : filter ι} [L.is_countably_generated]\n    [topological_space Ω] [opens_measurable_space Ω] (μ : measure Ω) [is_finite_measure μ] {c : nnreal} {E : set Ω}\n    (E_mble : measurable_set E) (fs : ι → bounded_continuous_function Ω (nnreal))\n    (fs_bdd :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" L\n        («expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n          (fs i ω ≤ c)))\n    (fs_lim :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (tendsto (fun i : ι => (coe_fn : bounded_continuous_function Ω (nnreal) → Ω → nnreal) (fs i) ω) L\n          ((nhds) (indicator E (fun x => (1 : nnreal)) ω)))) :\n    tendsto (fun n => lintegral μ fun ω => fs n ω) L ((nhds) (μ E)) :=\n  by\n  convert finite_measure.tendsto_lintegral_nn_filter_of_le_const μ fs_bdd fs_lim\n  have aux : ∀ ω, indicator E (fun ω => (1 : ennreal)) ω = ↑(indicator E (fun ω => (1 : nnreal)) ω) := fun ω => by\n    simp only [ennreal.coe_indicator, ennreal.coe_one]\n  simp_rw [← aux, lintegral_indicator _ E_mble]\n  simp only [lintegral_one, measure.restrict_apply, measurable_set.univ, univ_inter]\n#align measure_of_cont_bdd_of_tendsto_filter_indicator measure_of_cont_bdd_of_tendsto_filter_indicator\n\n",
 "limsup_measure_le_of_le_liminf_measure_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem limsup_measure_le_of_le_liminf_measure_compl {ι : Type _} {L : filter ι} {μ : measure Ω} {μs : ι → measure Ω}\n    [is_probability_measure μ] [∀ i, is_probability_measure (μs i)] {E : set Ω} (E_mble : measurable_set E)\n    (h : μ («expr ᶜ» E) ≤ L.liminf fun i => μs i («expr ᶜ» E)) : (L.limsup fun i => μs i E) ≤ μ E :=\n  compl_compl E ▸ limsup_measure_compl_le_of_le_liminf_measure (measurable_set.compl E_mble) h\n#align limsup_measure_le_of_le_liminf_measure_compl limsup_measure_le_of_le_liminf_measure_compl\n\n",
 "limsup_measure_compl_le_of_le_liminf_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem limsup_measure_compl_le_of_le_liminf_measure {ι : Type _} {L : filter ι} {μ : measure Ω} {μs : ι → measure Ω}\n    [is_probability_measure μ] [∀ i, is_probability_measure (μs i)] {E : set Ω} (E_mble : measurable_set E)\n    (h : μ E ≤ L.liminf fun i => μs i E) : (L.limsup fun i => μs i («expr ᶜ» E)) ≤ μ («expr ᶜ» E) :=\n  by\n  by_cases L_bot : L = «expr⊥»\n  ·\n    simp only [L_bot, bot_le,\n      show limsup (fun i => μs i («expr ᶜ» E)) («expr⊥») = «expr⊥» by simp only [limsup, filter.map_bot, Limsup_bot]]\n  have : L.ne_bot := { ne' := L_bot }\n  have meas_Ec : μ («expr ᶜ» E) = 1 - μ E := by\n    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top μ E).ne\n  have meas_i_Ec : ∀ i, μs i («expr ᶜ» E) = 1 - μs i E :=\n    by\n    intro i\n    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top (μs i) E).ne\n  simp_rw [meas_Ec, meas_i_Ec]\n  have obs : (L.limsup fun i : ι => 1 - μs i E) = L.limsup ((fun x => 1 - x) ∘ fun i : ι => μs i E) := by rfl\n  rw [obs]\n  simp_rw [←\n    antitone_const_tsub.map_liminf_of_continuous_at (fun i => μs i E)\n      (ennreal.continuous_sub_left ennreal.one_ne_top).continuous_at]\n  exact antitone_const_tsub h\n#align limsup_measure_compl_le_of_le_liminf_measure limsup_measure_compl_le_of_le_liminf_measure\n\n",
 "limsup_measure_closed_le_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- One implication of the portmanteau theorem:\nWeak convergence of probability measures implies that the limsup of the measures of any closed\nset is at most the measure of the closed set under the limit probability measure.\n-/\ntheorem probability_measure.limsup_measure_closed_le_of_tendsto {Ω ι : Type _} {L : filter ι} [measurable_space Ω]\n    [pseudo_emetric_space Ω] [opens_measurable_space Ω] {μ : probability_measure Ω} {μs : ι → probability_measure Ω}\n    (μs_lim : tendsto μs L ((nhds) μ)) {F : set Ω} (F_closed : is_closed F) :\n    (L.limsup fun i => (μs i : measure Ω) F) ≤ (μ : measure Ω) F := by\n  apply\n    finite_measure.limsup_measure_closed_le_of_tendsto\n      ((probability_measure.tendsto_nhds_iff_to_finite_measures_tendsto_nhds L).mp μs_lim) F_closed\n#align probability_measure.limsup_measure_closed_le_of_tendsto probability_measure.limsup_measure_closed_le_of_tendsto\n\n",
 "limsup_measure_closed_le_iff_liminf_measure_open_ge":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-- One pair of implications of the portmanteau theorem:\nFor a sequence of Borel probability measures, the following two are equivalent:\n\n(C) The limsup of the measures of any closed set is at most the measure of the closed set\nunder a candidate limit measure.\n\n(O) The liminf of the measures of any open set is at least the measure of the open set\nunder a candidate limit measure.\n-/\ntheorem limsup_measure_closed_le_iff_liminf_measure_open_ge {ι : Type _} {L : filter ι} {μ : measure Ω}\n    {μs : ι → measure Ω} [is_probability_measure μ] [∀ i, is_probability_measure (μs i)] :\n    (∀ F, is_closed F → (L.limsup fun i => μs i F) ≤ μ F) ↔ ∀ G, is_open G → μ G ≤ L.liminf fun i => μs i G :=\n  by\n  constructor\n  · intro h G G_open\n    exact\n      le_measure_liminf_of_limsup_measure_compl_le G_open.measurable_set\n        (h («expr ᶜ» G) (is_closed_compl_iff.mpr G_open))\n  · intro h F F_closed\n    exact\n      limsup_measure_le_of_le_liminf_measure_compl F_closed.measurable_set\n        (h («expr ᶜ» F) (is_open_compl_iff.mpr F_closed))\n#align limsup_measure_closed_le_iff_liminf_measure_open_ge limsup_measure_closed_le_iff_liminf_measure_open_ge\n\n",
 "le_measure_liminf_of_limsup_measure_compl_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem le_measure_liminf_of_limsup_measure_compl_le {ι : Type _} {L : filter ι} {μ : measure Ω} {μs : ι → measure Ω}\n    [is_probability_measure μ] [∀ i, is_probability_measure (μs i)] {E : set Ω} (E_mble : measurable_set E)\n    (h : (L.limsup fun i => μs i («expr ᶜ» E)) ≤ μ («expr ᶜ» E)) : μ E ≤ L.liminf fun i => μs i E :=\n  compl_compl E ▸ le_measure_compl_liminf_of_limsup_measure_le (measurable_set.compl E_mble) h\n#align le_measure_liminf_of_limsup_measure_compl_le le_measure_liminf_of_limsup_measure_compl_le\n\n",
 "le_measure_compl_liminf_of_limsup_measure_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-\nCopyright (c) 2021 Kalle Kytölä. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kalle Kytölä\n-/\ntheorem le_measure_compl_liminf_of_limsup_measure_le {ι : Type _} {L : filter ι} {μ : measure Ω} {μs : ι → measure Ω}\n    [is_probability_measure μ] [∀ i, is_probability_measure (μs i)] {E : set Ω} (E_mble : measurable_set E)\n    (h : (L.limsup fun i => μs i E) ≤ μ E) : μ («expr ᶜ» E) ≤ L.liminf fun i => μs i («expr ᶜ» E) :=\n  by\n  by_cases L_bot : L = «expr⊥»\n  ·\n    simp only [L_bot, le_top,\n      show liminf (fun i => μs i («expr ᶜ» E)) («expr⊥») = «expr⊤» by simp only [liminf, filter.map_bot, Liminf_bot]]\n  have : L.ne_bot := { ne' := L_bot }\n  have meas_Ec : μ («expr ᶜ» E) = 1 - μ E := by\n    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top μ E).ne\n  have meas_i_Ec : ∀ i, μs i («expr ᶜ» E) = 1 - μs i E :=\n    by\n    intro i\n    simpa only [measure_univ] using measure_compl E_mble (measure_lt_top (μs i) E).ne\n  simp_rw [meas_Ec, meas_i_Ec]\n  have obs : (L.liminf fun i : ι => 1 - μs i E) = L.liminf ((fun x => 1 - x) ∘ fun i : ι => μs i E) := by rfl\n  rw [obs]\n  simp_rw [←\n    antitone_const_tsub.map_limsup_of_continuous_at (fun i => μs i E)\n      (ennreal.continuous_sub_left ennreal.one_ne_top).continuous_at]\n  exact antitone_const_tsub h\n#align le_measure_compl_liminf_of_limsup_measure_le le_measure_compl_liminf_of_limsup_measure_le\n\n",
 "le_liminf_measure_open_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- One implication of the portmanteau theorem:\nWeak convergence of probability measures implies that the liminf of the measures of any open set\nis at least the measure of the open set under the limit probability measure.\n-/\ntheorem probability_measure.le_liminf_measure_open_of_tendsto {Ω ι : Type _} {L : filter ι} [measurable_space Ω]\n    [pseudo_emetric_space Ω] [opens_measurable_space Ω] {μ : probability_measure Ω} {μs : ι → probability_measure Ω}\n    (μs_lim : tendsto μs L ((nhds) μ)) {G : set Ω} (G_open : is_open G) :\n    (μ : measure Ω) G ≤ L.liminf fun i => (μs i : measure Ω) G :=\n  haveI h_closeds : ∀ F, is_closed F → (L.limsup fun i => (μs i : measure Ω) F) ≤ (μ : measure Ω) F := fun F F_closed =>\n    probability_measure.limsup_measure_closed_le_of_tendsto μs_lim F_closed\n  le_measure_liminf_of_limsup_measure_compl_le G_open.measurable_set (h_closeds _ (is_closed_compl_iff.mpr G_open))\n#align probability_measure.le_liminf_measure_open_of_tendsto probability_measure.le_liminf_measure_open_of_tendsto\n\n",
 "exists_null_frontiers_thickening":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem exists_null_frontiers_thickening (μ : measure Ω) [sigma_finite μ] (s : set Ω) :\n    ∃ rs : ℕ → exprℝ, tendsto rs at_top ((nhds) 0) ∧ ∀ n, 0 < rs n ∧ μ (frontier (metric.thickening (rs n) s)) = 0 :=\n  by\n  rcases exists_seq_strict_anti_tendsto (0 : exprℝ) with ⟨Rs, ⟨rubbish, ⟨Rs_pos, Rs_lim⟩⟩⟩\n  have obs := fun n : ℕ => exists_null_frontier_thickening μ s (Rs_pos n)\n  refine' ⟨fun n : ℕ => (obs n).some, ⟨_, _⟩⟩\n  ·\n    exact\n      tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds Rs_lim (fun n => (obs n).some_spec.some.1.le)\n        fun n => (obs n).some_spec.some.2.le\n  · exact fun n => ⟨(obs n).some_spec.some.1, (obs n).some_spec.some_spec⟩\n#align exists_null_frontiers_thickening exists_null_frontiers_thickening\n\n",
 "exists_null_frontier_thickening":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n--section\ntheorem exists_null_frontier_thickening (μ : measure Ω) [sigma_finite μ] (s : set Ω) {a b : exprℝ} (hab : a < b) :\n    ∃ r ∈ Ioo a b, μ (frontier (metric.thickening r s)) = 0 :=\n  by\n  have mbles : ∀ r : exprℝ, measurable_set (frontier (metric.thickening r s)) := fun r =>\n    is_closed_frontier.measurable_set\n  have disjs := metric.frontier_thickening_disjoint s\n  have key := @measure.countable_meas_pos_of_disjoint_Union Ω _ _ μ _ _ mbles disjs\n  have aux := @measure_diff_null (exprℝ) _ volume (Ioo a b) _ (set.countable.measure_zero key volume)\n  have len_pos : 0 < ennreal.of_real (b - a) := by simp only [hab, ennreal.of_real_pos, sub_pos]\n  rw [← real.volume_Ioo, ← aux] at len_pos\n  rcases nonempty_of_measure_ne_zero len_pos.ne.symm with ⟨r, ⟨r_in_Ioo, hr⟩⟩\n  refine' ⟨r, r_in_Ioo, _⟩\n  simpa only [mem_set_of_eq, not_lt, le_zero_iff] using hr\n#align exists_null_frontier_thickening exists_null_frontier_thickening\n\n"}