{"trim_pre":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/-- `measure_theory.outer_measure.mk_metric'.pre m r` is a trimmed measure provided that\n`m (closure s) = m s` for any set `s`. -/\ntheorem trim_pre [MeasurableSpace X] [opens_measurable_space X] (m : Set X → ennreal) (hcl : ∀ s, m (closure s) = m s)\n    (r : ennreal) : (pre m r).trim = pre m r :=\n  by\n  refine' le_antisymm (le_pre.2 fun s hs => _) (le_trim _)\n  rw [trim_eq_infi]\n  refine'\n    infᵢ_le_of_le (closure s) <|\n      infᵢ_le_of_le subset_closure <| infᵢ_le_of_le measurable_set_closure ((pre_le _).trans_eq (hcl _))\n  rwa [diam_closure]\n#align trim_pre trim_pre\n\n",
 "trim_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem trim_mk_metric [MeasurableSpace X] [borel_space X] (m : ennreal → ennreal) :\n    (mk_metric m : OuterMeasure X).trim = mk_metric m :=\n  by\n  simp only [mk_metric, mk_metric'.eq_supr_nat, trim_supr]\n  congr 1 with n : 1\n  refine' mk_metric'.trim_pre _ (fun s => _) _\n  simp\n#align trim_mk_metric trim_mk_metric\n\n",
 "tendsto_pre_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_pre_nat (m : Set X → ennreal) (s : Set X) :\n    Tendsto (fun n : ℕ => pre m n⁻¹ s) atTop (nhds <| mk_metric' m s) :=\n  by\n  refine' (tendsto_pre m s).comp (tendsto_inf.2 ⟨ENNReal.tendsto_inv_nat_nhds_zero, _⟩)\n  refine' tendsto_principal.2 (eventually_of_forall fun n => _)\n  simp\n#align tendsto_pre_nat tendsto_pre_nat\n\n",
 "tendsto_pre":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_pre (m : Set X → ennreal) (s : Set X) :\n    Tendsto (fun r => pre m r s) (nhds_within.gt 0) (nhds <| mk_metric' m s) :=\n  by\n  rw [← map_coe_Ioi_atBot, tendsto_map'_iff]\n  simp only [mk_metric', outer_measure.supr_apply, supᵢ_subtype']\n  exact tendsto_atBot_supᵢ fun r r' hr => mono_pre _ hr _\n#align tendsto_pre tendsto_pre\n\n",
 "pre_le":
 "theorem pre_le (hs : diam s ≤ r) : pre m r s ≤ m s :=\n  (boundedBy_le _).trans <| infᵢ_le _ hs\n#align pre_le pre_le\n\n",
 "one_le_hausdorff_measure_zero_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem one_le_hausdorff_measure_zero_of_nonempty {s : Set X} (h : s.nonempty) : 1 ≤ (hausdorff_measure 0) s :=\n  by\n  rcases h with ⟨x, hx⟩\n  calc\n    (1 : ennreal) = (hausdorff_measure 0) ({x} : Set X) := (hausdorff_measure_zero_singleton x).symm\n    _ ≤ (hausdorff_measure 0) s := measure_mono (singleton_subset_iff.2 hx)\n    \n#align one_le_hausdorff_measure_zero_of_nonempty one_le_hausdorff_measure_zero_of_nonempty\n\n",
 "no_atoms_hausdorff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem no_atoms_hausdorff {d : exprℝ} (hd : 0 < d) : NoAtoms (hausdorff_measure d : Measure X) :=\n  by\n  refine' ⟨fun x => _⟩\n  rw [← nonpos_iff_eq_zero, hausdorff_measure_apply]\n  refine' supᵢ₂_le fun ε ε0 => infᵢ₂_le_of_le (fun n => {x}) _ <| infᵢ_le_of_le (fun n => _) _\n  · exact subset_Union (fun n => {x} : ℕ → Set X) 0\n  · simp only [EMetric.diam_singleton, zero_le]\n  · simp [hd]\n#align no_atoms_hausdorff no_atoms_hausdorff\n\n",
 "mono_pre_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem mono_pre_nat (m : Set X → ennreal) : Monotone fun k : ℕ => pre m k⁻¹ := fun k l h =>\n  le_pre.2 fun s hs => pre_le (hs.trans <| by simpa)\n#align mono_pre_nat mono_pre_nat\n\n",
 "mono_pre":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem mono_pre (m : Set X → ennreal) {r r' : ennreal} (h : r ≤ r') : pre m r' ≤ pre m r :=\n  le_pre.2 fun s hs => pre_le (hs.trans h)\n#align mono_pre mono_pre\n\n",
 "mk_metric_to_outer_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n@[simp]\ntheorem mk_metric_to_outer_measure (m : ennreal → ennreal) :\n    (mk_metric m : Measure X).to_outer_measure = outer_measure.mk_metric m :=\n  outer_measure.trim_mk_metric m\n#align mk_metric_to_outer_measure mk_metric_to_outer_measure\n\n",
 "mk_metric_mono_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `c ∉ {0, ∞}` and `m₁ d ≤ c * m₂ d` for `d < ε` for some `ε > 0`\n(we use `≤ᶠ[𝓝[≥] 0]` to state this), then `mk_metric m₁ hm₁ ≤ c • mk_metric m₂ hm₂`. -/\ntheorem mk_metric_mono_smul {m₁ m₂ : ennreal → ennreal} {c : ennreal} (hc : c ≠ ennreal.top) (h0 : c ≠ 0)\n    (hle : «expr ≤ᶠ[ ] » m₁ (nhds_within.ge 0) («expr • » c m₂)) :\n    (mk_metric m₁ : Measure X) ≤ «expr • » c (mk_metric m₂) :=\n  by\n  intro s hs\n  rw [← outer_measure.coe_mk_metric, coe_smul, ← outer_measure.coe_mk_metric]\n  exact outer_measure.mk_metric_mono_smul hc h0 hle s\n#align mk_metric_mono_smul mk_metric_mono_smul\n\n",
 "mk_metric_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n/-- If `m₁ d ≤ m₂ d` for `d < ε` for some `ε > 0` (we use `≤ᶠ[𝓝[≥] 0]` to state this), then\n`mk_metric m₁ hm₁ ≤ mk_metric m₂ hm₂`-/\ntheorem mk_metric_mono {m₁ m₂ : ennreal → ennreal} (hle : «expr ≤ᶠ[ ] » m₁ (nhds_within.ge 0) m₂) :\n    (mk_metric m₁ : Measure X) ≤ mk_metric m₂ := by\n  convert mk_metric_mono_smul ENNReal.one_ne_top one_ne_zero _ <;> simp [*]\n#align mk_metric_mono mk_metric_mono\n\n",
 "mk_metric_le_liminf_tsum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- To bound the Hausdorff measure (or, more generally, for a measure defined using\n`measure_theory.measure.mk_metric`) of a set, one may use coverings with maximum diameter tending to\n`0`, indexed by any sequence of countable types. -/\ntheorem mk_metric_le_liminf_tsum {β : Type _} {ι : β → Type _} [∀ n, Countable (ι n)] (s : Set X) {l : Filter β}\n    (r : β → ennreal) (hr : Tendsto r l ((nhds) 0)) (t : ∀ n : β, ι n → Set X)\n    (ht :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (∀ i, diam (t n i) ≤ r n))\n    (hst :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (s ⊆ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t n i)))\n    (m : ennreal → ennreal) :\n    mk_metric m s ≤\n      liminf\n        (fun n =>\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (m (diam (t n i))))\n        l :=\n  by\n  haveI : ∀ n, Encodable (ι n) := fun n => Encodable.ofCountable _\n  simp only [mk_metric_apply]\n  refine' supᵢ₂_le fun ε hε => _\n  refine' le_of_forall_le_of_dense fun c hc => _\n  rcases((frequently_lt_of_liminf_lt (by infer_param) hc).and_eventually\n        ((hr.eventually (gt_mem_nhds hε)).and (ht.and hst))).exists with\n    ⟨n, hn, hrn, htn, hstn⟩\n  set u : ℕ → Set X := fun j =>\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t n b)\n  refine' infᵢ₂_le_of_le u (by rwa [Union_decode₂]) _\n  refine' infᵢ_le_of_le (fun j => _) _\n  · rw [EMetric.diam_unionᵢ_mem_option]\n    exact supᵢ₂_le fun _ _ => (htn _).trans hrn.le\n  ·\n    calc\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n              (m (diam (u j)))) =\n          _ :=\n        tsum_unionᵢ_decode₂\n          (fun t : Set X =>\n            «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n              (m (diam t)))\n          (by simp) _\n      _ ≤\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (m (diam (t n i))) :=\n        (ENNReal.tsum_le_tsum fun b => supᵢ_le fun htb => le_rfl)\n      _ ≤ c := hn.le\n      \n#align mk_metric_le_liminf_tsum mk_metric_le_liminf_tsum\n\n",
 "mk_metric_le_liminf_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- To bound the Hausdorff measure (or, more generally, for a measure defined using\n`measure_theory.measure.mk_metric`) of a set, one may use coverings with maximum diameter tending to\n`0`, indexed by any sequence of finite types. -/\ntheorem mk_metric_le_liminf_sum {β : Type _} {ι : β → Type _} [hι : ∀ n, Fintype (ι n)] (s : Set X) {l : Filter β}\n    (r : β → ennreal) (hr : Tendsto r l ((nhds) 0)) (t : ∀ n : β, ι n → Set X)\n    (ht :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (∀ i, diam (t n i) ≤ r n))\n    (hst :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (s ⊆ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t n i)))\n    (m : ennreal → ennreal) :\n    mk_metric m s ≤\n      liminf\n        (fun n =>\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (m (diam (t n i))))\n        l :=\n  by simpa only [tsum_fintype] using mk_metric_le_liminf_tsum s r hr t ht hst m\n#align mk_metric_le_liminf_sum mk_metric_le_liminf_sum\n\n",
 "mk_metric_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- A formula for `measure_theory.measure.mk_metric`. -/\ntheorem mk_metric_apply (m : ennreal → ennreal) (s : Set X) :\n    mk_metric m s =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n              (m (diam (t n)))))) :=\n  by\n  classical\n    -- We mostly unfold the definitions but we need to switch the order of `∑'` and `⨅`\n    simp only [← outer_measure.coe_mk_metric, outer_measure.mk_metric, outer_measure.mk_metric',\n      outer_measure.supr_apply, outer_measure.mk_metric'.pre, outer_measure.bounded_by_apply, extend]\n    refine'\n      surjective_id.supr_congr (fun r => r) fun r =>\n        supᵢ_congr_Prop iff.rfl fun hr => surjective_id.infi_congr _ fun t => infᵢ_congr_Prop iff.rfl fun ht => _\n    dsimp\n    by_cases htr : ∀ n, diam (t n) ≤ r\n    · rw [infᵢ_eq_if, if_pos htr]\n      congr 1 with n : 1\n      simp only [infᵢ_eq_if, htr n, id, if_true, supᵢ_and']\n    · rw [infᵢ_eq_if, if_neg htr]\n      push_neg  at htr\n      rcases htr with ⟨n, hn⟩\n      refine' ENNReal.tsum_eq_top_of_eq_top ⟨n, _⟩\n      rw [supᵢ_eq_if, if_pos, infᵢ_eq_if, if_neg]\n      exact hn.not_le\n      rcases diam_pos_iff.1 ((zero_le r).trans_lt hn) with ⟨x, hx, -⟩\n      exact ⟨x, hx⟩\n#align mk_metric_apply mk_metric_apply\n\n",
 "mk_metric'_to_outer_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n@[simp]\ntheorem mk_metric'_to_outer_measure (m : Set X → ennreal) :\n    (mk_metric' m).to_outer_measure = (outer_measure.mk_metric' m).trim :=\n  rfl\n#align mk_metric'_to_outer_measure mk_metric'_to_outer_measure\n\n",
 "mk_metric'_is_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/-- An outer measure constructed using `outer_measure.mk_metric'` is a metric outer measure. -/\ntheorem mk_metric'_is_metric (m : Set X → ennreal) : (mk_metric' m).is_metric :=\n  by\n  rintro s t ⟨r, r0, hr⟩\n  refine'\n    tendsto_nhds_unique_of_eventuallyEq (mk_metric'.tendsto_pre _ _)\n      ((mk_metric'.tendsto_pre _ _).add (mk_metric'.tendsto_pre _ _)) _\n  rw [← pos_iff_ne_zero] at r0\n  filter_upwards [Ioo_mem_nhdsWithin_Ioi ⟨le_rfl, r0⟩]\n  rintro ε ⟨ε0, εr⟩\n  refine' bounded_by_union_of_top_of_nonempty_inter _\n  rintro u ⟨x, hxs, hxu⟩ ⟨y, hyt, hyu⟩\n  have : ε < diam u := εr.trans_le ((hr x hxs y hyt).trans <| edist_le_diam_of_mem hxu hyu)\n  exact infᵢ_eq_top.2 fun h => (this.not_le h).elim\n#align mk_metric'_is_metric mk_metric'_is_metric\n\n",
 "map_hausdorff_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem map_hausdorff_measure (hf : Isometry f) (hd : 0 ≤ d ∨ surjective f) :\n    Measure.map f (hausdorff_measure d) = (hausdorff_measure d).restrict (range f) :=\n  by\n  ext1 s hs\n  rw [map_apply hf.continuous.measurable hs, restrict_apply hs, hf.hausdorff_measure_preimage hd]\n#align map_hausdorff_measure map_hausdorff_measure\n\n",
 "le_pre":
 "theorem le_pre : μ ≤ pre m r ↔ ∀ s : Set X, diam s ≤ r → μ s ≤ m s := by\n  simp only [pre, le_bounded_by, extend, le_infᵢ_iff]\n#align le_pre le_pre\n\n",
 "le_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem le_mk_metric (m : ennreal → ennreal) (μ : Measure X) (ε : ennreal) (h₀ : 0 < ε)\n    (h : ∀ s : Set X, diam s ≤ ε → μ s ≤ m (diam s)) : μ ≤ mk_metric m :=\n  by\n  rw [← to_outer_measure_le, mk_metric_to_outer_measure]\n  exact outer_measure.le_mk_metric m μ.to_outer_measure ε h₀ h\n#align le_mk_metric le_mk_metric\n\n",
 "le_hausdorff_measure_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem le_hausdorff_measure_image (hf : AntilipschitzWith K f) (hd : 0 ≤ d) (s : Set X) :\n    (hausdorff_measure d) s ≤ K ^ d * (hausdorff_measure d) («expr '' » f s) :=\n  calc\n    (hausdorff_measure d) s ≤ (hausdorff_measure d) («expr ⁻¹' » f («expr '' » f s)) :=\n      measure_mono (subset_preimage_image _ _)\n    _ ≤ K ^ d * (hausdorff_measure d) («expr '' » f s) := hf.hausdorff_measure_preimage_le hd («expr '' » f s)\n    \n#align le_hausdorff_measure_image le_hausdorff_measure_image\n\n",
 "le_hausdorff_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem le_hausdorff_measure (d : exprℝ) (μ : Measure X) (ε : ennreal) (h₀ : 0 < ε)\n    (h : ∀ s : Set X, diam s ≤ ε → μ s ≤ diam s ^ d) : μ ≤ hausdorff_measure d :=\n  le_mk_metric _ μ ε h₀ h\n#align le_hausdorff_measure le_hausdorff_measure\n\n",
 "le_caratheodory":
 "theorem le_caratheodory [MeasurableSpace X] [borel_space X] (hm : is_metric μ) : ‹MeasurableSpace X› ≤ μ.caratheodory :=\n  by\n  rw [@borel_space.measurable_eq X _ _]\n  exact hm.borel_le_caratheodory\n#align le_caratheodory le_caratheodory\n\n",
 "isometry_map_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem isometry_map_mk_metric (m : ennreal → ennreal) {f : X → Y} (hf : Isometry f) (H : Monotone m ∨ surjective f) :\n    map f (mk_metric m) = restrict (range f) (mk_metric m) := by rw [← isometry_comap_mk_metric _ hf H, map_comap]\n#align isometry_map_mk_metric isometry_map_mk_metric\n\n",
 "isometry_equiv_map_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem isometry_equiv_map_mk_metric (m : ennreal → ennreal) (f : «expr ≃ᵢ » X Y) : map f (mk_metric m) = mk_metric m :=\n  by rw [← isometry_equiv_comap_mk_metric _ f, map_comap_of_surjective f.surjective]\n#align isometry_equiv_map_mk_metric isometry_equiv_map_mk_metric\n\n",
 "isometry_equiv_comap_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem isometry_equiv_comap_mk_metric (m : ennreal → ennreal) (f : «expr ≃ᵢ » X Y) :\n    comap f (mk_metric m) = mk_metric m :=\n  isometry_comap_mk_metric _ f.isometry (or.inr f.surjective)\n#align isometry_equiv_comap_mk_metric isometry_equiv_comap_mk_metric\n\n",
 "isometry_comap_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem isometry_comap_mk_metric (m : ennreal → ennreal) {f : X → Y} (hf : Isometry f) (H : Monotone m ∨ surjective f) :\n    comap f (mk_metric m) = mk_metric m :=\n  by\n  simp only [mk_metric, mk_metric', mk_metric'.pre, induced_outer_measure, comap_supr]\n  refine' surjective_id.supr_congr id fun ε => surjective_id.supr_congr id fun hε => _\n  rw [comap_bounded_by _ (H.imp (fun h_mono => _) id)]\n  · congr with s : 1\n    apply extend_congr\n    · simp [hf.ediam_image]\n    · intros\n      simp [hf.injective.subsingleton_image_iff, hf.ediam_image]\n  · intro s t hst\n    simp only [extend, le_infᵢ_iff]\n    intro ht\n    apply le_trans _ (h_mono (diam_mono hst))\n    simp only [(diam_mono hst).trans ht, le_refl, cinfᵢ_pos]\n#align isometry_comap_mk_metric isometry_comap_mk_metric\n\n",
 "hausdorff_measure_zero_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n@[simp]\ntheorem hausdorff_measure_zero_singleton (x : X) : (hausdorff_measure 0) ({x} : Set X) = 1 :=\n  by\n  apply le_antisymm\n  · let r : ℕ → ennreal := fun _ => 0\n    let t : ℕ → Unit → Set X := fun n _ => {x}\n    have ht :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" at_top\n        (∀ i, diam (t n i) ≤ r n) :=\n      by simp only [imp_true_iff, eq_self_iff_true, diam_singleton, eventually_at_top, nonpos_iff_eq_zero, exists_const]\n    simpa [liminf_const] using hausdorff_measure_le_liminf_sum 0 {x} r tendsto_const_nhds t ht\n  · rw [hausdorff_measure_apply]\n    suffices\n      (1 : ennreal) ≤\n        «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n              (diam (t n) ^ (0 : exprℝ))))\n      by\n      apply le_trans this _\n      convert le_supᵢ₂ (1 : ennreal) zero_lt_one\n      rfl\n    simp only [ennreal.rpow_zero, le_infᵢ_iff]\n    intro t hst h't\n    rcases mem_Union.1 (hst (mem_singleton x)) with ⟨m, hm⟩\n    have A : (t m).nonempty := ⟨x, hm⟩\n    calc\n      (1 : ennreal) =\n          «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" 1 :=\n        by simp only [A, csupᵢ_pos]\n      _ ≤\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" 1) :=\n        ENNReal.le_tsum _\n      \n#align hausdorff_measure_zero_singleton hausdorff_measure_zero_singleton\n\n",
 "hausdorff_measure_zero_or_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- If `d₁ < d₂`, then for any set `s` we have either `μH[d₂] s = 0`, or `μH[d₁] s = ∞`. -/\ntheorem hausdorff_measure_zero_or_top {d₁ d₂ : exprℝ} (h : d₁ < d₂) (s : Set X) :\n    (hausdorff_measure d₂) s = 0 ∨ (hausdorff_measure d₁) s = ennreal.top :=\n  by\n  by_contra' H\n  suffices ∀ c : nnreal, c ≠ 0 → (hausdorff_measure d₂) s ≤ c * (hausdorff_measure d₁) s\n    by\n    rcases ENNReal.exists_nnreal_pos_mul_lt H.2 H.1 with ⟨c, hc0, hc⟩\n    exact hc.not_le (this c (pos_iff_ne_zero.1 hc0))\n  intro c hc\n  refine' le_iff'.1 (mk_metric_mono_smul ENNReal.coe_ne_top (by exact_mod_cast hc) _) s\n  have : 0 < (c ^ (d₂ - d₁)⁻¹ : ennreal) :=\n    by\n    rw [ennreal.coe_rpow_of_ne_zero hc, pos_iff_ne_zero, ne.def, ENNReal.coe_eq_zero, nnreal.rpow_eq_zero_iff]\n    exact mt And.left hc\n  filter_upwards [Ico_mem_nhdsWithin_Ici ⟨le_rfl, this⟩]\n  rintro r ⟨hr₀, hrc⟩\n  lift r to nnreal using ne_top_of_lt hrc\n  rw [Pi.smul_apply, smul_eq_mul, ←\n    ENNReal.div_le_iff_le_mul (or.inr ENNReal.coe_ne_top) (or.inr <| mt ENNReal.coe_eq_zero.1 hc)]\n  rcases eq_or_ne r 0 with (rfl | hr₀)\n  · rcases lt_or_le 0 d₂ with (h₂ | h₂)\n    · simp only [h₂, ennreal.zero_rpow_of_pos, zero_le, ENNReal.zero_div, ENNReal.coe_zero]\n    · simp only [h.trans_le h₂, ENNReal.div_top, zero_le, ennreal.zero_rpow_of_neg, ENNReal.coe_zero]\n  · have : (r : ennreal) ≠ 0 := by simpa only [ENNReal.coe_eq_zero, ne.def] using hr₀\n    rw [← ennreal.rpow_sub _ _ this ENNReal.coe_ne_top]\n    refine' (ennreal.rpow_lt_rpow hrc (sub_pos.2 h)).le.trans _\n    rw [← ennreal.rpow_mul, inv_mul_cancel (sub_pos.2 h).ne', ennreal.rpow_one]\n    exact le_rfl\n#align hausdorff_measure_zero_or_top hausdorff_measure_zero_or_top\n\n",
 "hausdorff_measure_preimage_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem hausdorff_measure_preimage_le (hf : AntilipschitzWith K f) (hd : 0 ≤ d) (s : Set Y) :\n    (hausdorff_measure d) («expr ⁻¹' » f s) ≤ K ^ d * (hausdorff_measure d) s :=\n  by\n  rcases eq_or_ne K 0 with (rfl | h0)\n  · rcases eq_empty_or_nonempty («expr ⁻¹' » f s) with (hs | ⟨x, hx⟩)\n    · simp only [hs, measure_empty, zero_le]\n    have : «expr ⁻¹' » f s = {x} := by\n      haveI : subsingleton X := hf.subsingleton\n      have : («expr ⁻¹' » f s).subsingleton := subsingleton_univ.anti (subset_univ _)\n      exact (subsingleton_iff_singleton hx).1 this\n    rw [this]\n    rcases eq_or_lt_of_le hd with (rfl | h'd)\n    · simp only [ennreal.rpow_zero, one_mul, MulZeroClass.mul_zero]\n      rw [hausdorff_measure_zero_singleton]\n      exact one_le_hausdorff_measure_zero_of_nonempty ⟨f x, hx⟩\n    · haveI := no_atoms_hausdorff X h'd\n      simp only [zero_le, measure_singleton]\n  have hKd0 : (K : ennreal) ^ d ≠ 0 := by simp [h0]\n  have hKd : (K : ennreal) ^ d ≠ ennreal.top := by simp [hd]\n  simp only [hausdorff_measure_apply, ENNReal.mul_supᵢ, ENNReal.mul_infᵢ_of_ne hKd0 hKd, ← ENNReal.tsum_mul_left]\n  refine' supᵢ₂_le fun ε ε0 => _\n  refine' le_supᵢ₂_of_le (ε / K) (by simp [ε0.ne']) _\n  refine' le_infᵢ₂ fun t hst => le_infᵢ fun htε => _\n  replace hst : «expr ⁻¹' » f s ⊆ _ := preimage_mono hst\n  rw [preimage_Union] at hst\n  refine' infᵢ₂_le_of_le _ hst (infᵢ_le_of_le (fun n => _) _)\n  · exact (hf.ediam_preimage_le _).trans (ENNReal.mul_le_of_le_div' <| htε n)\n  · refine' ENNReal.tsum_le_tsum fun n => supᵢ_le_iff.2 fun hft => _\n    simp only [nonempty_of_nonempty_preimage hft, csupᵢ_pos]\n    rw [← ennreal.mul_rpow_of_nonneg _ _ hd]\n    exact ennreal.rpow_le_rpow (hf.ediam_preimage_le _) hd\n#align hausdorff_measure_preimage_le hausdorff_measure_preimage_le\n\n",
 "hausdorff_measure_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n@[simp]\ntheorem hausdorff_measure_preimage (e : «expr ≃ᵢ » X Y) (d : exprℝ) (s : Set Y) :\n    (hausdorff_measure d) («expr ⁻¹' » e s) = (hausdorff_measure d) s := by\n  rw [← e.image_symm, e.symm.hausdorff_measure_image]\n#align hausdorff_measure_preimage hausdorff_measure_preimage\n\n",
 "hausdorff_measure_pi_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic filter.is_bounded_default -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- In the space `ι → ℝ`, Hausdorff measure coincides exactly with Lebesgue measure. -/\n@[simp]\ntheorem hausdorff_measure_pi_real {ι : Type _} [Fintype ι] :\n    (hausdorff_measure (Fintype.card ι) : Measure (ι → exprℝ)) = volume := by\n  classical\n    -- it suffices to check that the two measures coincide on products of rational intervals\n    refine'\n      (pi_eq_generateFrom (fun i => real.borel_eq_generate_from_Ioo_rat.symm) (fun i => real.is_pi_system_Ioo_rat)\n          (fun i => real.finite_spanning_sets_in_Ioo_rat _) _).symm\n    simp only [mem_Union, mem_singleton_iff]\n    -- fix such a product `s` of rational intervals, of the form `Π (a i, b i)`.\n    intro s hs\n    choose a b H using hs\n    obtain rfl : s = fun i => Ioo (a i) (b i)\n    exact funext fun i => (H i).2\n    replace H := fun i => (H i).1\n    apply le_antisymm _\n    -- first check that `volume s ≤ μH s`\n    · have Hle : volume ≤ (hausdorff_measure (Fintype.card ι) : measure (ι → exprℝ)) :=\n        by\n        refine' le_hausdorff_measure _ _ (ennreal.top) ENNReal.coe_lt_top fun s _ => _\n        rw [ennreal.rpow_nat_cast]\n        exact real.volume_pi_le_diam_pow s\n      rw [← volume_pi_pi fun i => Ioo (a i : exprℝ) (b i)]\n      exact measure.le_iff'.1 Hle _\n    /- For the other inequality `μH s ≤ volume s`, we use a covering of `s` by sets of small diameter\n      `1/n`, namely cubes with left-most point of the form `a i + f i / n` with `f i` ranging between\n      `0` and `⌈(b i - a i) * n⌉`. Their number is asymptotic to `n^d * Π (b i - a i)`. -/\n    have I : ∀ i, 0 ≤ (b i : exprℝ) - a i := fun i => by simpa only [sub_nonneg, Rat.cast_le] using (H i).le\n    let γ := fun n : ℕ => ∀ i : ι, Fin («expr⌈ ⌉₊» (((b i : exprℝ) - a i) * n))\n    let t : ∀ n : ℕ, γ n → Set (ι → exprℝ) := fun n f => Set.pi univ fun i => Icc (a i + f i / n) (a i + (f i + 1) / n)\n    have A : tendsto (fun n : ℕ => 1 / (n : ennreal)) at_top ((nhds) 0) := by\n      simp only [one_div, ENNReal.tendsto_inv_nat_nhds_zero]\n    have B :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" at_top\n        (∀ i : γ n, diam (t n i) ≤ 1 / n) :=\n      by\n      apply eventually_at_top.2 ⟨1, fun n hn => _⟩\n      intro f\n      apply diam_pi_le_of_le fun b => _\n      simp only [Real.ediam_Icc, add_div, ENNReal.ofReal_div_of_pos (nat.cast_pos.mpr hn), le_refl,\n        add_sub_add_left_eq_sub, add_sub_cancel', ENNReal.ofReal_one, ENNReal.ofReal_coe_nat]\n    have C :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" at_top\n        ((Set.pi univ fun i : ι => Ioo (a i : exprℝ) (b i)) ⊆\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t n i)) :=\n      by\n      apply eventually_at_top.2 ⟨1, fun n hn => _⟩\n      have npos : (0 : exprℝ) < n := Nat.cast_pos.2 hn\n      intro x hx\n      simp only [mem_Ioo, mem_univ_pi] at hx\n      simp only [mem_Union, mem_Ioo, mem_univ_pi, coe_coe]\n      let f : γ n := fun i =>\n        ⟨«expr⌊ ⌋₊» ((x i - a i) * n), by\n          apply Nat.floor_lt_ceil_of_lt_of_pos\n          · refine' (mul_lt_mul_right npos).2 _\n            simp only [(hx i).right, sub_lt_sub_iff_right]\n          · refine' mul_pos _ npos\n            simpa only [Rat.cast_lt, sub_pos] using H i⟩\n      refine' ⟨f, fun i => ⟨_, _⟩⟩\n      ·\n        calc\n          (a i : exprℝ) + «expr⌊ ⌋₊» ((x i - a i) * n) / n ≤ (a i : exprℝ) + (x i - a i) * n / n :=\n            by\n            refine' add_le_add le_rfl ((div_le_div_right npos).2 _)\n            exact Nat.floor_le (mul_nonneg (sub_nonneg.2 (hx i).1.le) npos.le)\n          _ = x i := by field_simp [npos.ne']\n          \n      ·\n        calc\n          x i = (a i : exprℝ) + (x i - a i) * n / n := by field_simp [npos.ne']\n          _ ≤ (a i : exprℝ) + («expr⌊ ⌋₊» ((x i - a i) * n) + 1) / n :=\n            add_le_add le_rfl ((div_le_div_right npos).2 (Nat.lt_floor_add_one _).le)\n          \n    calc\n      (hausdorff_measure (Fintype.card ι)) (Set.pi univ fun i : ι => Ioo (a i : exprℝ) (b i)) ≤\n          liminf\n            (fun n : ℕ =>\n              finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n                (diam (t n i) ^ ↑(Fintype.card ι)))\n            at_top :=\n        hausdorff_measure_le_liminf_sum _ (Set.pi univ fun i => Ioo (a i : exprℝ) (b i))\n          (fun n : ℕ => 1 / (n : ennreal)) A t B C\n      _ ≤\n          liminf\n            (fun n : ℕ =>\n              finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n                ((1 / n) ^ Fintype.card ι))\n            at_top :=\n        by\n        refine'\n          liminf_le_liminf _\n            (by\n              run_tac\n                is_bounded_default)\n        filter_upwards [B]with _ hn\n        apply Finset.sum_le_sum fun i _ => _\n        rw [ennreal.rpow_nat_cast]\n        exact pow_le_pow_of_le_left' (hn i) _\n      _ =\n          liminf\n            (fun n : ℕ =>\n              finset.prod_univ\n                \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n                ((«expr⌈ ⌉₊» (((b i : exprℝ) - a i) * n) : ennreal) / n))\n            at_top :=\n        by\n        simp only [Finset.card_univ, Nat.cast_prod, one_mul, Fintype.card_fin, Finset.sum_const, nsmul_eq_mul,\n          Fintype.card_pi, div_eq_mul_inv, Finset.prod_mul_distrib, Finset.prod_const]\n      _ =\n          finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n            (volume (Ioo (a i : exprℝ) (b i))) :=\n        by\n        simp only [real.volume_Ioo]\n        apply tendsto.liminf_eq\n        refine' ENNReal.tendsto_finset_prod_of_ne_top _ (fun i hi => _) fun i hi => _\n        · apply\n            tendsto.congr' _\n              ((ennreal.continuous_of_real.tendsto _).comp\n                ((tendsto_nat_ceil_mul_div_atTop (I i)).comp tendsto_nat_cast_atTop_atTop))\n          apply eventually_at_top.2 ⟨1, fun n hn => _⟩\n          simp only [ENNReal.ofReal_div_of_pos (nat.cast_pos.mpr hn), comp_app, ENNReal.ofReal_coe_nat]\n        · simp only [ENNReal.ofReal_ne_top, ne.def, not_false_iff]\n      \n#align hausdorff_measure_pi_real hausdorff_measure_pi_real\n\n",
 "hausdorff_measure_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/-- Hausdorff measure `μH[d] s` is monotone in `d`. -/\ntheorem hausdorff_measure_mono {d₁ d₂ : exprℝ} (h : d₁ ≤ d₂) (s : Set X) :\n    (hausdorff_measure d₂) s ≤ (hausdorff_measure d₁) s :=\n  by\n  rcases h.eq_or_lt with (rfl | h); · exact le_rfl\n  cases' hausdorff_measure_zero_or_top h s with hs hs\n  · rw [hs]\n    exact zero_le _\n  · rw [hs]\n    exact le_top\n#align hausdorff_measure_mono hausdorff_measure_mono\n\n",
 "hausdorff_measure_le_one_of_subsingleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem hausdorff_measure_le_one_of_subsingleton {s : Set X} (hs : s.subsingleton) {d : exprℝ} (hd : 0 ≤ d) :\n    (hausdorff_measure d) s ≤ 1 :=\n  by\n  rcases eq_empty_or_nonempty s with (rfl | ⟨x, hx⟩)\n  · simp only [measure_empty, zero_le]\n  · rw [(subsingleton_iff_singleton hx).1 hs]\n    rcases eq_or_lt_of_le hd with (rfl | dpos)\n    · simp only [le_refl, hausdorff_measure_zero_singleton]\n    · haveI := no_atoms_hausdorff X dpos\n      simp only [zero_le, measure_singleton]\n#align hausdorff_measure_le_one_of_subsingleton hausdorff_measure_le_one_of_subsingleton\n\n",
 "hausdorff_measure_le_liminf_tsum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- To bound the Hausdorff measure of a set, one may use coverings with maximum diameter tending\nto `0`, indexed by any sequence of countable types. -/\ntheorem hausdorff_measure_le_liminf_tsum {β : Type _} {ι : β → Type _} [hι : ∀ n, Countable (ι n)] (d : exprℝ)\n    (s : Set X) {l : Filter β} (r : β → ennreal) (hr : Tendsto r l ((nhds) 0)) (t : ∀ n : β, ι n → Set X)\n    (ht :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (∀ i, diam (t n i) ≤ r n))\n    (hst :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (s ⊆ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t n i))) :\n    (hausdorff_measure d) s ≤\n      liminf\n        (fun n =>\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (diam (t n i) ^ d))\n        l :=\n  mk_metric_le_liminf_tsum s r hr t ht hst _\n#align hausdorff_measure_le_liminf_tsum hausdorff_measure_le_liminf_tsum\n\n",
 "hausdorff_measure_le_liminf_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- To bound the Hausdorff measure of a set, one may use coverings with maximum diameter tending\nto `0`, indexed by any sequence of finite types. -/\ntheorem hausdorff_measure_le_liminf_sum {β : Type _} {ι : β → Type _} [hι : ∀ n, Fintype (ι n)] (d : exprℝ) (s : Set X)\n    {l : Filter β} (r : β → ennreal) (hr : Tendsto r l ((nhds) 0)) (t : ∀ n : β, ι n → Set X)\n    (ht :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (∀ i, diam (t n i) ≤ r n))\n    (hst :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        (s ⊆ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t n i))) :\n    (hausdorff_measure d) s ≤\n      liminf\n        (fun n =>\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (diam (t n i) ^ d))\n        l :=\n  mk_metric_le_liminf_sum s r hr t ht hst _\n#align hausdorff_measure_le_liminf_sum hausdorff_measure_le_liminf_sum\n\n",
 "hausdorff_measure_image_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/-- If `f` is a `K`-Lipschitz map, then it increases the Hausdorff `d`-measures of sets at most\nby the factor of `K ^ d`.-/\ntheorem hausdorff_measure_image_le (h : LipschitzWith K f) {d : exprℝ} (hd : 0 ≤ d) (s : Set X) :\n    (hausdorff_measure d) («expr '' » f s) ≤ K ^ d * (hausdorff_measure d) s :=\n  (h.lipschitz_on_with s).hausdorff_measure_image_le hd\n#align hausdorff_measure_image_le hausdorff_measure_image_le\n\n",
 "hausdorff_measure_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n@[simp]\ntheorem hausdorff_measure_image (e : «expr ≃ᵢ » X Y) (d : exprℝ) (s : Set X) :\n    (hausdorff_measure d) («expr '' » e s) = (hausdorff_measure d) s :=\n  e.isometry.hausdorff_measure_image (or.inr e.surjective) s\n#align hausdorff_measure_image hausdorff_measure_image\n\n",
 "hausdorff_measure_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-- A formula for `μH[d] s`. -/\ntheorem hausdorff_measure_apply (d : exprℝ) (s : Set X) :\n    (hausdorff_measure d) s =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n              (diam (t n) ^ d)))) :=\n  mk_metric_apply _ _\n#align hausdorff_measure_apply hausdorff_measure_apply\n\n",
 "finset_Union_of_pairwise_separated":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n/-- A metric outer measure is additive on a finite set of pairwise metric separated sets. -/\ntheorem finset_Union_of_pairwise_separated (hm : is_metric μ) {I : Finset ι} {s : ι → Set X}\n    (hI : ∀ i ∈ I, ∀ j ∈ I, i ≠ j → IsMetricSeparated (s i) (s j)) :\n    μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (μ (s i)) :=\n  by\n  classical\n    induction' I using Finset.induction_on with i I hiI ihI hI\n    · simp\n    simp only [Finset.mem_insert] at hI\n    rw [Finset.set_bunionᵢ_insert, hm, ihI, Finset.sum_insert hiI]\n    exacts[fun i hi j hj hij => hI i (or.inr hi) j (or.inr hj) hij,\n      IsMetricSeparated.finset_unionᵢ_right fun j hj =>\n        hI i (or.inl rfl) j (or.inr hj) (ne_of_mem_of_not_mem hj hiI).symm]\n#align finset_Union_of_pairwise_separated finset_Union_of_pairwise_separated\n\n",
 "eq_supr_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem eq_supr_nat (m : Set X → ennreal) :\n    mk_metric' m =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (mk_metric'.pre m n⁻¹) :=\n  by\n  ext1 s\n  rw [supᵢ_apply]\n  refine'\n    tendsto_nhds_unique (mk_metric'.tendsto_pre_nat m s)\n      (tendsto_atTop_supᵢ fun k l hkl => mk_metric'.mono_pre_nat m hkl s)\n#align eq_supr_nat eq_supr_nat\n\n",
 "coe_mk_metric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem outer_measure.coe_mk_metric [MeasurableSpace X] [borel_space X] (m : ennreal → ennreal) :\n    «expr⇑ » (outer_measure.mk_metric m : OuterMeasure X) = measure.mk_metric m := by\n  rw [← measure.mk_metric_to_outer_measure, coe_to_outer_measure]\n#align outer_measure.coe_mk_metric outer_measure.coe_mk_metric\n\n",
 "borel_le_caratheodory":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/-- Caratheodory theorem. If `m` is a metric outer measure, then every Borel measurable set `t` is\nCaratheodory measurable: for any (not necessarily measurable) set `s` we have\n`μ (s ∩ t) + μ (s \\ t) = μ s`. -/\ntheorem borel_le_caratheodory (hm : is_metric μ) : borel X ≤ μ.caratheodory :=\n  by\n  rw [borel_eq_generate_from_is_closed]\n  refine' MeasurableSpace.generateFrom_le fun t ht => μ.is_caratheodory_iff_le.2 fun s => _\n  set S : ℕ → Set X := fun n => { x ∈ s | (↑n)⁻¹ ≤ inf_edist x t }\n  have n0 : ∀ {n : ℕ}, (n⁻¹ : ennreal) ≠ 0 := fun n => ENNReal.inv_ne_zero.2 (ENNReal.nat_ne_top _)\n  have Ssep : ∀ n, IsMetricSeparated (S n) t := fun n =>\n    ⟨n⁻¹, n0, fun x hx y hy => hx.2.trans <| inf_edist_le_edist_of_mem hy⟩\n  have Ssep' : ∀ n, IsMetricSeparated (S n) (s ∩ t) := fun n => (Ssep n).mono subset.rfl (inter_subset_right _ _)\n  have S_sub : ∀ n, S n ⊆ s \\ t := fun n => subset_inter (inter_subset_left _ _) (Ssep n).subset_compl_right\n  have hSs : ∀ n, μ (s ∩ t) + μ (S n) ≤ μ s := fun n =>\n    calc\n      μ (s ∩ t) + μ (S n) = μ (s ∩ t ∪ S n) := Eq.symm <| hm _ _ <| (Ssep' n).symm\n      _ ≤ μ (s ∩ t ∪ s \\ t) := by\n        mono*\n        exact le_rfl\n      _ = μ s := by rw [inter_union_diff]\n      \n  have Union_S :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (S n) = s \\ t :=\n    by\n    refine' subset.antisymm (Union_subset S_sub) _\n    rintro x ⟨hxs, hxt⟩\n    rw [mem_iff_inf_edist_zero_of_closed ht] at hxt\n    rcases ENNReal.exists_inv_nat_lt hxt with ⟨n, hn⟩\n    exact mem_Union.2 ⟨n, hxs, hn.le⟩\n  /- Now we have `∀ n, μ (s ∩ t) + μ (S n) ≤ μ s` and we need to prove\n    `μ (s ∩ t) + μ (⋃ n, S n) ≤ μ s`. We can't pass to the limit because\n    `μ` is only an outer measure. -/\n  by_cases htop : μ (s \\ t) = ennreal.top\n  · rw [htop, add_top, ← htop]\n    exact μ.mono (diff_subset _ _)\n  suffices :\n    μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (S n)) ≤\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ (S n))\n  calc\n    μ (s ∩ t) + μ (s \\ t) =\n        μ (s ∩ t) +\n          μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (S n)) :=\n      by rw [Union_S]\n    _ ≤\n        μ (s ∩ t) +\n          «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (μ (S n)) :=\n      (add_le_add le_rfl this)\n    _ =\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n          (μ (s ∩ t) + μ (S n)) :=\n      ENNReal.add_supᵢ\n    _ ≤ μ s := supᵢ_le hSs\n    \n  /- It suffices to show that `∑' k, μ (S (k + 1) \\ S k) ≠ ∞`. Indeed, if we have this,\n    then for all `N` we have `μ (⋃ n, S n) ≤ μ (S N) + ∑' k, m (S (N + k + 1) \\ S (N + k))`\n    and the second term tends to zero, see `outer_measure.Union_nat_of_monotone_of_tsum_ne_top`\n    for details. -/\n  have : ∀ n, S n ⊆ S (n + 1) := fun n x hx => ⟨hx.1, le_trans (ENNReal.inv_le_inv.2 <| Nat.cast_le.2 n.le_succ) hx.2⟩\n  refine' (μ.Union_nat_of_monotone_of_tsum_ne_top this _).le\n  clear this\n  /- While the sets `S (k + 1) \\ S k` are not pairwise metric separated, the sets in each\n    subsequence `S (2 * k + 1) \\ S (2 * k)` and `S (2 * k + 2) \\ S (2 * k)` are metric separated,\n    so `m` is additive on each of those sequences. -/\n  rw [← tsum_even_add_odd ENNReal.summable ENNReal.summable, ENNReal.add_ne_top]\n  suffices :\n    ∀ a,\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (μ (S (2 * k + 1 + a) \\ S (2 * k + a))) ≠\n        ennreal.top\n  exact ⟨by simpa using this 0, by simpa using this 1⟩\n  refine' fun r => ne_top_of_le_ne_top htop _\n  rw [← Union_S, ENNReal.tsum_eq_supᵢ_nat, supᵢ_le_iff]\n  intro n\n  rw [← hm.finset_Union_of_pairwise_separated]\n  · exact μ.mono (Union_subset fun i => Union_subset fun hi x hx => mem_Union.2 ⟨_, hx.1⟩)\n  suffices : ∀ i j, i < j → IsMetricSeparated (S (2 * i + 1 + r)) (s \\ S (2 * j + r))\n  exact fun i _ j _ hij =>\n    hij.lt_or_lt.elim (fun h => (this i j h).mono (inter_subset_left _ _) fun x hx => ⟨hx.1.1, hx.2⟩) fun h =>\n      (this j i h).symm.mono (fun x hx => ⟨hx.1.1, hx.2⟩) (inter_subset_left _ _)\n  intro i j hj\n  have A : ((↑(2 * j + r))⁻¹ : ennreal) < (↑(2 * i + 1 + r))⁻¹ :=\n    by\n    rw [ENNReal.inv_lt_inv, Nat.cast_lt]\n    linarith\n  refine' ⟨(↑(2 * i + 1 + r))⁻¹ - (↑(2 * j + r))⁻¹, by simpa using A, fun x hx y hy => _⟩\n  have : inf_edist y t < (↑(2 * j + r))⁻¹ := not_le.1 fun hle => hy.2 ⟨hy.1, hle⟩\n  rcases inf_edist_lt_iff.mp this with ⟨z, hzt, hyz⟩\n  have hxz : (↑(2 * i + 1 + r))⁻¹ ≤ edist x z := le_inf_edist.1 hx.2 _ hzt\n  apply ENNReal.le_of_add_le_add_right hyz.ne_top\n  refine' le_trans _ (edist_triangle _ _ _)\n  refine' (add_le_add le_rfl hyz.le).trans (Eq.trans_le _ hxz)\n  rw [tsub_add_cancel_of_le A.le]\n#align borel_le_caratheodory borel_le_caratheodory\n\n"}