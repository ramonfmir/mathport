{"stieltjes_function_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem _root_.monotone.stieltjes_function_eq {f : exprℝ → exprℝ} (hf : monotone f) (x : exprℝ) :\n    hf.stieltjes_function x = right_lim f x :=\n  rfl\n#align monotone.stieltjes_function_eq monotone.stieltjes_function_eq\n\n",
 "right_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem right_continuous (x : exprℝ) : continuous_within_at f (Ici x) x :=\n  f.right_continuous' x\n#align right_continuous right_continuous\n\n",
 "outer_trim":
 "theorem outer_trim : f.outer.trim = f.outer :=\n  by\n  refine' le_antisymm (fun s => _) (outer_measure.le_trim _)\n  rw [outer_measure.trim_eq_infi]\n  refine' le_infᵢ fun t => le_infᵢ fun ht => ennreal.le_of_forall_pos_le_add fun ε ε0 h => _\n  rcases ennreal.exists_pos_sum_of_countable (ennreal.coe_pos.2 ε0).ne' ℕ with ⟨ε', ε'0, hε⟩\n  refine' le_trans _ (add_le_add_left (le_of_lt hε) _)\n  rw [← ennreal.tsum_add]\n  choose g hg using\n    show ∀ i, ∃ s, t i ⊆ s ∧ measurable_set s ∧ f.outer s ≤ f.length (t i) + of_real (ε' i)\n      by\n      intro i\n      have := ennreal.lt_add_right ((ennreal.le_tsum i).trans_lt h).ne (ennreal.coe_pos.2 (ε'0 i)).ne'\n      conv at this =>\n        lhs\n        rw [length]\n      simp only [infᵢ_lt_iff] at this\n      rcases this with ⟨a, b, h₁, h₂⟩\n      rw [← f.outer_Ioc] at h₂\n      exact ⟨_, h₁, measurable_set_Ioc, le_of_lt <| by simpa using h₂⟩\n  simp at hg\n  apply infᵢ_le_of_le (Union g) _\n  apply infᵢ_le_of_le (ht.trans <| Union_mono fun i => (hg i).1) _\n  apply infᵢ_le_of_le (measurable_set.Union fun i => (hg i).2.1) _\n  exact le_trans (f.outer.Union _) (ennreal.tsum_le_tsum fun i => (hg i).2.2)\n#align outer_trim outer_trim\n\n",
 "outer_le_length":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem outer_le_length (s : set (exprℝ)) : f.outer s ≤ f.length s :=\n  outer_measure.of_function_le _\n#align outer_le_length outer_le_length\n\n",
 "outer_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem outer_Ioc (a b : exprℝ) : f.outer (Ioc a b) = of_real (f b - f a) :=\n  by\n  /- It suffices to show that, if `(a, b]` is covered by sets `s i`, then `f b - f a` is bounded\n    by `∑ f.length (s i) + ε`. The difficulty is that `f.length` is expressed in terms of half-open\n    intervals, while we would like to have a compact interval covered by open intervals to use\n    compactness and finite sums, as provided by `length_subadditive_Icc_Ioo`. The trick is to use the\n    right-continuity of `f`. If `a'` is close enough to `a` on its right, then `[a', b]` is still\n    covered by the sets `s i` and moreover `f b - f a'` is very close to `f b - f a` (up to `ε/2`).\n    Also, by definition one can cover `s i` by a half-closed interval `(p i, q i]` with `f`-length\n    very close to  that of `s i` (within a suitably small `ε' i`, say). If one moves `q i` very\n    slightly to the right, then the `f`-length will change very little by right continuity, and we\n    will get an open interval `(p i, q' i)` covering `s i` with `f (q' i) - f (p i)` within `ε' i`\n    of the `f`-length of `s i`. -/\n  refine'\n    le_antisymm\n      (by\n        rw [← f.length_Ioc]\n        apply outer_le_length)\n      (le_infᵢ₂ fun s hs => ennreal.le_of_forall_pos_le_add fun ε εpos h => _)\n  let δ := ε / 2\n  have δpos : 0 < (δ : ennreal) := by simpa using εpos.ne'\n  rcases ennreal.exists_pos_sum_of_countable δpos.ne' ℕ with ⟨ε', ε'0, hε⟩\n  obtain ⟨a', ha', aa'⟩ : ∃ a', f a' - f a < δ ∧ a < a' :=\n    by\n    have A : continuous_within_at (fun r => f r - f a) (Ioi a) a :=\n      by\n      refine' continuous_within_at.sub _ continuous_within_at_const\n      exact (f.right_continuous a).mono Ioi_subset_Ici_self\n    have B : f a - f a < δ := by rwa [sub_self, nnreal.coe_pos, ← ennreal.coe_pos]\n    exact (((tendsto_order.1 A).2 _ B).and self_mem_nhds_within).exists\n  have : ∀ i, ∃ p : exprℝ × exprℝ, s i ⊆ Ioo p.1 p.2 ∧ (of_real (f p.2 - f p.1) : ennreal) < f.length (s i) + ε' i :=\n    by\n    intro i\n    have := ennreal.lt_add_right ((ennreal.le_tsum i).trans_lt h).ne (ennreal.coe_ne_zero.2 (ε'0 i).ne')\n    conv at this =>\n      lhs\n      rw [length]\n    simp only [infᵢ_lt_iff, exists_prop] at this\n    rcases this with ⟨p, q', spq, hq'⟩\n    have : continuous_within_at (fun r => of_real (f r - f p)) (Ioi q') q' :=\n      by\n      apply ennreal.continuous_of_real.continuous_at.comp_continuous_within_at\n      refine' continuous_within_at.sub _ continuous_within_at_const\n      exact (f.right_continuous q').mono Ioi_subset_Ici_self\n    rcases(((tendsto_order.1 this).2 _ hq').and self_mem_nhds_within).exists with ⟨q, hq, q'q⟩\n    exact ⟨⟨p, q⟩, spq.trans (Ioc_subset_Ioo_right q'q), hq⟩\n  choose g hg using this\n  have I_subset :\n    Icc a' b ⊆\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ioo (g i).1 (g i).2) :=\n    calc\n      Icc a' b ⊆ Ioc a b := fun x hx => ⟨aa'.trans_le hx.1, hx.2⟩\n      _ ⊆ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i) := hs\n      _ ⊆\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            (Ioo (g i).1 (g i).2) :=\n        Union_mono fun i => (hg i).1\n      \n  calc\n    of_real (f b - f a) = of_real (f b - f a' + (f a' - f a)) := by rw [sub_add_sub_cancel]\n    _ ≤ of_real (f b - f a') + of_real (f a' - f a) := ennreal.of_real_add_le\n    _ ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (of_real (f (g i).2 - f (g i).1)) +\n          of_real δ :=\n      add_le_add (f.length_subadditive_Icc_Ioo I_subset) (ennreal.of_real_le_of_real ha'.le)\n    _ ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (f.length (s i) + ε' i) +\n          δ :=\n      add_le_add (ennreal.tsum_le_tsum fun i => (hg i).2.le) (by simp only [ennreal.of_real_coe_nnreal, le_rfl])\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (f.length (s i)) +\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (ε' i) +\n          δ :=\n      by rw [ennreal.tsum_add]\n    _ ≤\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (f.length (s i)) +\n            δ +\n          δ :=\n      add_le_add (add_le_add le_rfl hε.le) le_rfl\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (f.length (s i)) +\n          ε :=\n      by simp [add_assoc, ennreal.add_halves]\n    \n#align outer_Ioc outer_Ioc\n\n",
 "mono":
 "/-\nCopyright (c) 2021 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Yury Kudryashov, Sébastien Gouëzel\n-/\ntheorem mono : monotone f :=\n  f.mono'\n#align mono mono\n\n",
 "measure_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem measure_singleton (a : exprℝ) : f.measure {a} = of_real (f a - left_lim f a) :=\n  by\n  obtain ⟨u, u_mono, u_lt_a, u_lim⟩ :\n    ∃ u : ℕ → exprℝ, strict_mono u ∧ (∀ n : ℕ, u n < a) ∧ tendsto u at_top ((nhds) a) :=\n    exists_seq_strict_mono_tendsto a\n  have A :\n    {a} =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (Ioc (u n) a) :=\n    by\n    refine' subset.antisymm (fun x hx => by simp [mem_singleton_iff.1 hx, u_lt_a]) fun x hx => _\n    simp at hx\n    have : a ≤ x := le_of_tendsto' u_lim fun n => (hx n).1.le\n    simp [le_antisymm this (hx 0).2]\n  have L1 : tendsto (fun n => f.measure (Ioc (u n) a)) at_top ((nhds) (f.measure {a})) :=\n    by\n    rw [A]\n    refine' tendsto_measure_Inter (fun n => measurable_set_Ioc) (fun m n hmn => _) _\n    · exact Ioc_subset_Ioc (u_mono.monotone hmn) le_rfl\n    · exact ⟨0, by simpa only [measure_Ioc] using ennreal.of_real_ne_top⟩\n  have L2 : tendsto (fun n => f.measure (Ioc (u n) a)) at_top ((nhds) (of_real (f a - left_lim f a))) :=\n    by\n    simp only [measure_Ioc]\n    have : tendsto (fun n => f (u n)) at_top ((nhds) (left_lim f a)) :=\n      by\n      apply (f.mono.tendsto_left_lim a).comp\n      exact tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ u_lim (eventually_of_forall fun n => u_lt_a n)\n    exact ennreal.continuous_of_real.continuous_at.tendsto.comp (tendsto_const_nhds.sub this)\n  exact tendsto_nhds_unique L1 L2\n#align measure_singleton measure_singleton\n\n",
 "measure_Ioo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem measure_Ioo {a b : exprℝ} : f.measure (Ioo a b) = of_real (left_lim f b - f a) :=\n  by\n  rcases le_or_lt b a with (hab | hab)\n  · simp only [hab, measure_empty, Ioo_eq_empty, not_lt]\n    symm\n    simp [ennreal.of_real_eq_zero, f.mono.left_lim_le hab]\n  · have A : Disjoint (Ioo a b) {b} := by simp\n    have D : f b - f a = f b - left_lim f b + (left_lim f b - f a) := by abel\n    have := f.measure_Ioc a b\n    simp only [← Ioo_union_Icc_eq_Ioc hab le_rfl, measure_singleton, measure_union A (measurable_set_singleton b),\n      Icc_self] at this\n    rw [D, ennreal.of_real_add, add_comm] at this\n    · simpa only [ennreal.add_right_inj ennreal.of_real_ne_top]\n    · simp only [f.mono.left_lim_le, sub_nonneg]\n    · simp only [f.mono.le_left_lim hab, sub_nonneg]\n#align measure_Ioo measure_Ioo\n\n",
 "measure_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem measure_Ioc (a b : exprℝ) : f.measure (Ioc a b) = of_real (f b - f a) :=\n  by\n  rw [stieltjes_function.measure]\n  exact f.outer_Ioc a b\n#align measure_Ioc measure_Ioc\n\n",
 "measure_Ico":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem measure_Ico (a b : exprℝ) : f.measure (Ico a b) = of_real (left_lim f b - left_lim f a) :=\n  by\n  rcases le_or_lt b a with (hab | hab)\n  · simp only [hab, measure_empty, Ico_eq_empty, not_lt]\n    symm\n    simp [ennreal.of_real_eq_zero, f.mono.left_lim hab]\n  · have A : Disjoint {a} (Ioo a b) := by simp\n    simp [← Icc_union_Ioo_eq_Ico le_rfl hab, -singleton_union, hab.ne, f.mono.left_lim_le,\n      measure_union A measurable_set_Ioo, f.mono.le_left_lim hab, ← ennreal.of_real_add]\n#align measure_Ico measure_Ico\n\n",
 "measure_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem measure_Icc (a b : exprℝ) : f.measure (Icc a b) = of_real (f b - left_lim f a) :=\n  by\n  rcases le_or_lt a b with (hab | hab)\n  · have A : Disjoint {a} (Ioc a b) := by simp\n    simp [← Icc_union_Ioc_eq_Icc le_rfl hab, -singleton_union, ← ennreal.of_real_add, f.mono.left_lim_le,\n      measure_union A measurable_set_Ioc, f.mono hab]\n  · simp only [hab, measure_empty, Icc_eq_empty, not_le]\n    symm\n    simp [ennreal.of_real_eq_zero, f.mono.le_left_lim hab]\n#align measure_Icc measure_Icc\n\n",
 "measurable_set_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem measurable_set_Ioi {c : exprℝ} : (measurable_set_of f.outer.caratheodory) (Ioi c) :=\n  by\n  apply outer_measure.of_function_caratheodory fun t => _\n  refine' le_infᵢ fun a => le_infᵢ fun b => le_infᵢ fun h => _\n  refine'\n    le_trans (add_le_add (f.length_mono <| inter_subset_inter_left _ h) (f.length_mono <| diff_subset_diff_left h)) _\n  cases' le_total a c with hac hac <;> cases' le_total b c with hbc hbc\n  ·\n    simp only [Ioc_inter_Ioi, f.length_Ioc, hac, sup_eq_max, hbc, le_refl, Ioc_eq_empty, max_eq_right, min_eq_left,\n      Ioc_diff_Ioi, f.length_empty, zero_add, not_lt]\n  ·\n    simp only [hac, hbc, Ioc_inter_Ioi, Ioc_diff_Ioi, f.length_Ioc, min_eq_right, sup_eq_max, ← ennreal.of_real_add,\n      f.mono hac, f.mono hbc, sub_nonneg, sub_add_sub_cancel, le_refl, max_eq_right]\n  ·\n    simp only [hbc, le_refl, Ioc_eq_empty, Ioc_inter_Ioi, min_eq_left, Ioc_diff_Ioi, f.length_empty, zero_add,\n      or_true_iff, le_sup_iff, f.length_Ioc, not_lt]\n  ·\n    simp only [hac, hbc, Ioc_inter_Ioi, Ioc_diff_Ioi, f.length_Ioc, min_eq_right, sup_eq_max, le_refl, Ioc_eq_empty,\n      add_zero, max_eq_left, f.length_empty, not_lt]\n#align measurable_set_Ioi measurable_set_Ioi\n\n",
 "length_subadditive_Icc_Ioo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- If a compact interval `[a, b]` is covered by a union of open interval `(c i, d i)`, then\n`f b - f a ≤ ∑ f (d i) - f (c i)`. This is an auxiliary technical statement to prove the same\nstatement for half-open intervals, the point of the current statement being that one can use\ncompactness to reduce it to a finite sum, and argue by induction on the size of the covering set. -/\ntheorem length_subadditive_Icc_Ioo {a b : exprℝ} {c d : ℕ → exprℝ}\n    (ss :\n      Icc a b ⊆\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (Ioo (c i) (d i))) :\n    of_real (f b - f a) ≤\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (of_real (f (d i) - f (c i))) :=\n  by\n  suffices\n    ∀ (s : Finset ℕ) (b)\n      (cv :\n        Icc a b ⊆\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            (Ioo (c i) (d i))),\n      (of_real (f b - f a) : ennreal) ≤\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n          (of_real (f (d i) - f (c i)))\n    by\n    rcases is_compact_Icc.elim_finite_subcover_image (fun (i : ℕ) (_ : i ∈ univ) => @is_open_Ioo _ _ _ _ (c i) (d i))\n        (by simpa using ss) with\n      ⟨s, su, hf, hs⟩\n    have e :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (Ioo (c i) (d i)) =\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (Ioo (c i) (d i)) :=\n      by\n      simp only [ext_iff, exists_prop, finset.set_bUnion_coe, mem_Union, forall_const, iff_self_iff,\n        finite.mem_to_finset]\n    rw [ennreal.tsum_eq_supr_sum]\n    refine' le_trans _ (le_supᵢ _ hf.to_finset)\n    exact this hf.to_finset _ (by simpa only [e] )\n  clear ss b\n  refine' fun s => finset.strong_induction_on s fun s IH b cv => _\n  cases' le_total b a with ab ab\n  · rw [ennreal.of_real_eq_zero.2 (sub_nonpos.2 (f.mono ab))]\n    exact zero_le _\n  have := cv ⟨ab, le_rfl⟩\n  simp at this\n  rcases this with ⟨i, is, cb, bd⟩\n  rw [← Finset.insert_erase is] at cv⊢\n  rw [Finset.coe_insert, bUnion_insert] at cv\n  rw [finset.sum_insert (Finset.not_mem_erase _ _)]\n  refine' le_trans _ (add_le_add_left (IH _ (Finset.erase_ssubset is) (c i) _) _)\n  · refine' le_trans (ennreal.of_real_le_of_real _) ennreal.of_real_add_le\n    rw [sub_add_sub_cancel]\n    exact sub_le_sub_right (f.mono bd.le) _\n  · rintro x ⟨h₁, h₂⟩\n    refine' (cv ⟨h₁, le_trans h₂ (le_of_lt cb)⟩).resolve_left (mt And.left (not_lt_of_le h₂))\n#align length_subadditive_Icc_Ioo length_subadditive_Icc_Ioo\n\n",
 "length_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem length_mono {s₁ s₂ : set (exprℝ)} (h : s₁ ⊆ s₂) : f.length s₁ ≤ f.length s₂ :=\n  infᵢ_mono fun a => binfᵢ_mono fun b => h.trans\n#align length_mono length_mono\n\n",
 "length_empty":
 "@[simp]\ntheorem length_empty : f.length ∅ = 0 :=\n  nonpos_iff_eq_zero.1 <| infᵢ_le_of_le 0 <| infᵢ_le_of_le 0 <| by simp\n#align length_empty length_empty\n\n",
 "length_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem length_Ioc (a b : exprℝ) : f.length (Ioc a b) = of_real (f b - f a) :=\n  by\n  refine'\n    le_antisymm (infᵢ_le_of_le a <| infᵢ₂_le b subset.rfl)\n      (le_infᵢ fun a' => le_infᵢ fun b' => le_infᵢ fun h => ennreal.coe_le_coe.2 _)\n  cases' le_or_lt b a with ab ab\n  · rw [real.to_nnreal_of_nonpos (sub_nonpos.2 (f.mono ab))]\n    apply zero_le\n  cases' (Ioc_subset_Ioc_iff ab).1 h with h₁ h₂\n  exact real.to_nnreal_le_to_nnreal (sub_le_sub (f.mono h₁) (f.mono h₂))\n#align length_Ioc length_Ioc\n\n",
 "id_left_lim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem id_left_lim (x : exprℝ) : left_lim stieltjes_function.id x = x :=\n  tendsto_nhds_unique (stieltjes_function.id.mono.tendsto_left_lim x) <|\n    continuous_at_id.tendsto.mono_left nhds_within_le_nhds\n#align id_left_lim id_left_lim\n\n",
 "countable_left_lim_ne":
 "theorem countable_left_lim_ne (f : stieltjes_function) : set.countable { x | left_lim f x ≠ f x } :=\n  by\n  apply countable.mono _ f.mono.countable_not_continuous_at\n  intro x hx h'x\n  apply hx\n  exact tendsto_nhds_unique (f.mono.tendsto_left_lim x) (h'x.tendsto.mono_left nhds_within_le_nhds)\n#align countable_left_lim_ne countable_left_lim_ne\n\n",
 "borel_le_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem borel_le_measurable : borel (exprℝ) ≤ f.outer.caratheodory :=\n  by\n  rw [borel_eq_generate_from_Ioi]\n  refine' measurable_space.generate_from_le _\n  simp (config := { contextual := true }) [f.measurable_set_Ioi]\n#align borel_le_measurable borel_le_measurable\n\n"}