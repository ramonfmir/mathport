{"scaling_scale_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem scaling_scale_of_pos (K : exprℝ) : 0 < scaling_scale_of μ K :=\n  (eventually_measure_mul_le_scaling_constant_of_mul μ K).some_spec.1\n#align scaling_scale_of_pos scaling_scale_of_pos\n\n",
 "one_le_scaling_constant_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem one_le_scaling_constant_of (K : exprℝ) : 1 ≤ scaling_constant_of μ K :=\n  le_max_of_le_right <| le_refl 1\n#align one_le_scaling_constant_of one_le_scaling_constant_of\n\n",
 "measure_mul_le_scaling_constant_of_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem measure_mul_le_scaling_constant_of_mul {K : exprℝ} {x : α} {t r : exprℝ} (ht : t ∈ Ioc 0 K)\n    (hr : r ≤ scaling_scale_of μ K) : μ (closedBall x (t * r)) ≤ scaling_constant_of μ K * μ (closedBall x r) :=\n  (eventually_measure_mul_le_scaling_constant_of_mul μ K).some_spec.2 x t r ht hr\n#align measure_mul_le_scaling_constant_of_mul measure_mul_le_scaling_constant_of_mul\n\n",
 "exists_measure_closed_ball_le_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/-\nCopyright (c) 2022 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\ntheorem exists_measure_closed_ball_le_mul' :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n      (nhds_within.gt 0) (∀ x, μ (closedBall x (2 * ε)) ≤ doubling_constant μ * μ (closedBall x ε)) :=\n  Classical.choose_spec <| exists_measure_closed_ball_le_mul μ\n#align exists_measure_closed_ball_le_mul' exists_measure_closed_ball_le_mul'\n\n",
 "exists_eventually_forall_measure_closed_ball_le_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌈ ⌉₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\ntheorem exists_eventually_forall_measure_closed_ball_le_mul (K : exprℝ) :\n    ∃ C : nnreal,\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within.gt 0) (∀ (x t) (ht : t ≤ K), μ (closedBall x (t * ε)) ≤ C * μ (closedBall x ε)) :=\n  by\n  let C := doubling_constant μ\n  have hμ :\n    ∀ n : ℕ,\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n        (nhds_within.gt 0) (∀ x, μ (closed_ball x (2 ^ n * ε)) ≤ ↑(C ^ n) * μ (closed_ball x ε)) :=\n    by\n    intro n\n    induction' n with n ih\n    · simp\n    replace ih := eventually_nhdsWithin_pos_mul_left (two_pos : 0 < (2 : exprℝ)) ih\n    refine' (ih.and (exists_measure_closed_ball_le_mul' μ)).mono fun ε hε x => _\n    calc\n      μ (closed_ball x (2 ^ (n + 1) * ε)) = μ (closed_ball x (2 ^ n * (2 * ε))) := by rw [pow_succ', mul_assoc]\n      _ ≤ ↑(C ^ n) * μ (closed_ball x (2 * ε)) := (hε.1 x)\n      _ ≤ ↑(C ^ n) * (C * μ (closed_ball x ε)) := (ENNReal.mul_left_mono (hε.2 x))\n      _ = ↑(C ^ (n + 1)) * μ (closed_ball x ε) := by rw [← mul_assoc, pow_succ', ENNReal.coe_mul]\n      \n  rcases lt_or_le K 1 with (hK | hK)\n  · refine' ⟨1, _⟩\n    simp only [ENNReal.coe_one, one_mul]\n    exact\n      eventually_mem_nhds_within.mono fun ε hε x t ht =>\n        measure_mono <| closed_ball_subset_closed_ball (by nlinarith [mem_Ioi.mp hε])\n  · refine'\n      ⟨C ^ «expr⌈ ⌉₊» (real.logb 2 K),\n        ((hμ («expr⌈ ⌉₊» (real.logb 2 K))).and eventually_mem_nhdsWithin).mono fun ε hε x t ht =>\n          le_trans (measure_mono <| closed_ball_subset_closed_ball _) (hε.1 x)⟩\n    refine' mul_le_mul_of_nonneg_right (ht.trans _) (mem_Ioi.mp hε.2).le\n    conv_lhs => rw [← real.rpow_logb two_pos (by norm_num) (by linarith : 0 < K)]\n    rw [← real.rpow_nat_cast]\n    exact real.rpow_le_rpow_of_exponent_le one_le_two (Nat.le_ceil (real.logb 2 K))\n#align exists_eventually_forall_measure_closed_ball_le_mul exists_eventually_forall_measure_closed_ball_le_mul\n\n",
 "eventually_measure_mul_le_scaling_constant_of_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem eventually_measure_mul_le_scaling_constant_of_mul (K : exprℝ) :\n    ∃ R : exprℝ,\n      0 < R ∧\n        ∀ (x t r) (ht : t ∈ Ioc 0 K) (hr : r ≤ R),\n          μ (closedBall x (t * r)) ≤ scaling_constant_of μ K * μ (closedBall x r) :=\n  by\n  have h := Classical.choose_spec (exists_eventually_forall_measure_closed_ball_le_mul μ K)\n  rcases mem_nhdsWithin_Ioi_iff_exists_Ioc_subset.1 h with ⟨R, Rpos, hR⟩\n  refine' ⟨R, Rpos, fun x t r ht hr => _⟩\n  rcases lt_trichotomy r 0 with (rneg | rfl | rpos)\n  · have : t * r < 0 := mul_neg_of_pos_of_neg ht.1 rneg\n    simp only [closed_ball_eq_empty.2 this, measure_empty, zero_le']\n  · simp only [MulZeroClass.mul_zero, closed_ball_zero]\n    refine' le_mul_of_one_le_of_le _ le_rfl\n    apply ENNReal.one_le_coe_iff.2 (le_max_right _ _)\n  · apply (hR ⟨rpos, hr⟩ x t ht.2).trans _\n    exact mul_le_mul_right' (ENNReal.coe_le_coe.2 (le_max_left _ _)) _\n#align eventually_measure_mul_le_scaling_constant_of_mul eventually_measure_mul_le_scaling_constant_of_mul\n\n",
 "eventually_measure_le_scaling_constant_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\ntheorem eventually_measure_le_scaling_constant_mul' (K : exprℝ) (hK : 0 < K) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n      (nhds_within.gt 0) (∀ x, μ (closedBall x r) ≤ scaling_constant_of μ K⁻¹ * μ (closedBall x (K * r))) :=\n  by\n  convert eventually_nhdsWithin_pos_mul_left hK (eventually_measure_le_scaling_constant_mul μ K⁻¹)\n  ext\n  simp [inv_mul_cancel_left₀ hK.ne']\n#align eventually_measure_le_scaling_constant_mul' eventually_measure_le_scaling_constant_mul'\n\n",
 "eventually_measure_le_scaling_constant_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\ntheorem eventually_measure_le_scaling_constant_mul (K : exprℝ) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n      (nhds_within.gt 0) (∀ x, μ (closedBall x (K * r)) ≤ scaling_constant_of μ K * μ (closedBall x r)) :=\n  by\n  filter_upwards [Classical.choose_spec (exists_eventually_forall_measure_closed_ball_le_mul μ K)]with r hr x\n  exact (hr x K le_rfl).trans (mul_le_mul_right' (ENNReal.coe_le_coe.2 (le_max_left _ _)) _)\n#align eventually_measure_le_scaling_constant_mul eventually_measure_le_scaling_constant_mul\n\n"}