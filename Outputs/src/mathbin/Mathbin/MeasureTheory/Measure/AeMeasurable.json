{"sum_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[measurability]\ntheorem sum_measure [countable ι] {μ : ι → measure α} (h : ∀ i, ae_measurable f (μ i)) : ae_measurable f (sum μ) :=\n  by\n  nontriviality β\n  inhabit β\n  set s : ι → set α := fun i => to_measurable (μ i) { x | f x ≠ (h i).mk f x }\n  have hsμ : ∀ i, μ i (s i) = 0 := by\n    intro i\n    rw [measure_to_measurable]\n    exact (h i).ae_eq_mk\n  have hsm :\n    measurable_set\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) :=\n    measurable_set.Inter fun i => measurable_set_to_measurable _ _\n  have hs : ∀ i x, x ∉ s i → f x = (h i).mk f x := by\n    intro i x hx\n    contrapose! hx\n    exact subset_to_measurable _ _ hx\n  set g : α → β :=\n    («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)).piecewise\n      (const α default) f\n  refine' ⟨g, measurable_of_restrict_of_restrict_compl hsm _ _, ae_sum_iff.mpr fun i => _⟩\n  · rw [restrict_piecewise]\n    simp only [Set.restrict, const]\n    exact measurable_const\n  · rw [restrict_piecewise_compl, compl_Inter]\n    intro t ht\n    refine'\n      ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          («expr ⁻¹' » ((h i).mk f) t ∩ «expr ᶜ» (s i)),\n        measurable_set.Union fun i => (measurable_mk _ ht).inter (measurable_set_to_measurable _ _).compl, _⟩\n    ext ⟨x, hx⟩\n    simp only [mem_preimage, mem_Union, subtype.coe_mk, Set.restrict, mem_inter_iff, mem_compl_iff] at hx⊢\n    constructor\n    · rintro ⟨i, hxt, hxs⟩\n      rwa [hs _ _ hxs]\n    · rcases hx with ⟨i, hi⟩\n      rw [hs _ _ hi]\n      exact fun h => ⟨i, h, hi⟩\n  · refine' measure_mono_null (fun x (hx : f x ≠ g x) => _) (hsμ i)\n    contrapose! hx\n    refine' (piecewise_eq_of_not_mem _ _ _ _).symm\n    exact fun h => hx (mem_Inter.1 h i)\n#align sum_measure sum_measure\n\n",
 "subtype_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem subtype_mk (h : ae_measurable f μ) {s : set β} {hfs : ∀ x, f x ∈ s} : ae_measurable (codRestrict f s hfs) μ :=\n  by\n  nontriviality α; inhabit α\n  obtain ⟨g, g_meas, hg, fg⟩ : ∃ g : α → β, measurable g ∧ range g ⊆ s ∧ «expr =ᵐ[ ] » f μ g :=\n    h.exists_ae_eq_range_subset (eventually_of_forall hfs) ⟨_, hfs default⟩\n  refine' ⟨cod_restrict g s fun x => hg (mem_range_self _), measurable.subtype_mk g_meas, _⟩\n  filter_upwards [fg] with x hx\n  simpa [subtype.ext_iff]\n#align subtype_mk subtype_mk\n\n",
 "smul_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[measurability]\ntheorem smul_measure [monoid R] [DistribMulAction R (ennreal)] [IsScalarTower R (ennreal) (ennreal)]\n    (h : ae_measurable f μ) (c : R) : ae_measurable f («expr • » c μ) :=\n  ⟨h.mk f, h.measurable_mk, ae_smul_measure h.ae_eq_mk c⟩\n#align smul_measure smul_measure\n\n",
 "restrict_map_of_ae_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem measure_theory.measure.restrict_map_of_ae_measurable {f : α → δ} (hf : ae_measurable f μ) {s : set δ}\n    (hs : measurable_set s) : (μ.map f).restrict s = (μ.restrict <| «expr ⁻¹' » f s).map f :=\n  calc\n    (μ.map f).restrict s = (μ.map (hf.mk f)).restrict s :=\n      by\n      congr 1\n      apply measure.map_congr hf.ae_eq_mk\n    _ = (μ.restrict <| «expr ⁻¹' » (hf.mk f) s).map (hf.mk f) := measure.restrict_map hf.measurable_mk hs\n    _ = (μ.restrict <| «expr ⁻¹' » (hf.mk f) s).map f := measure.map_congr (ae_restrict_of_ae hf.ae_eq_mk.symm)\n    _ = (μ.restrict <| «expr ⁻¹' » f s).map f := by\n      apply congr_arg\n      ext1 t ht\n      simp only [ht, measure.restrict_apply]\n      apply measure_congr\n      apply (eventually_eq.refl _ _).inter (hf.ae_eq_mk.symm.preimage s)\n    \n#align measure_theory.measure.restrict_map_of_ae_measurable measure_theory.measure.restrict_map_of_ae_measurable\n\n",
 "restrict":
 "theorem ae_measurable.restrict (hfm : ae_measurable f μ) {s} : ae_measurable f (μ.restrict s) :=\n  ⟨ae_measurable.mk f hfm, hfm.measurable_mk, ae_restrict_of_ae hfm.ae_eq_mk⟩\n#align ae_measurable.restrict ae_measurable.restrict\n\n",
 "prod_mk":
 "@[measurability]\ntheorem prod_mk {f : α → β} {g : α → γ} (hf : ae_measurable f μ) (hg : ae_measurable g μ) :\n    ae_measurable (fun x => (f x, g x)) μ :=\n  ⟨fun a => (hf.mk f a, hg.mk g a), hf.measurable_mk.prod_mk hg.measurable_mk,\n    eventually_eq.prod_mk hf.ae_eq_mk hg.ae_eq_mk⟩\n#align prod_mk prod_mk\n\n",
 "null_measurable":
 "protected theorem null_measurable (h : ae_measurable f μ) : null_measurable f μ :=\n  let ⟨g, hgm, hg⟩ := h\n  hgm.null_measurable.congr hg.symm\n#align null_measurable null_measurable\n\n",
 "mono_set":
 "theorem mono_set {s t} (h : s ⊆ t) (ht : ae_measurable f (μ.restrict t)) : ae_measurable f (μ.restrict s) :=\n  ht.mono_measure (restrict_mono h le_rfl)\n#align mono_set mono_set\n\n",
 "mono_measure":
 "theorem mono_measure (h : ae_measurable f μ) (h' : ν ≤ μ) : ae_measurable f ν :=\n  ⟨h.mk f, h.measurable_mk, eventually.filter_mono (ae_mono h') h.ae_eq_mk⟩\n#align mono_measure mono_measure\n\n",
 "mono'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure.absolutely_continuous -/\nprotected theorem mono' (h : ae_measurable f μ) (h' : measure.absolutely_continuous ν μ) : ae_measurable f ν :=\n  ⟨h.mk f, h.measurable_mk, h' h.ae_eq_mk⟩\n#align mono' mono'\n\n",
 "map_mono_of_ae_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem measure_theory.measure.map_mono_of_ae_measurable {f : α → δ} (h : μ ≤ ν) (hf : ae_measurable f ν) :\n    μ.map f ≤ ν.map f := fun s hs => by simpa [hf, hs, hf.mono_measure h] using measure.le_iff'.1 h («expr ⁻¹' » f s)\n#align measure_theory.measure.map_mono_of_ae_measurable measure_theory.measure.map_mono_of_ae_measurable\n\n",
 "map_map_of_ae_measurable":
 "theorem map_map_of_ae_measurable {g : β → γ} {f : α → β} (hg : ae_measurable g (measure.map f μ))\n    (hf : ae_measurable f μ) : (μ.map f).map g = μ.map (g ∘ f) :=\n  by\n  ext1 s hs\n  let g' := hg.mk g\n  have A : map g (map f μ) = map g' (map f μ) :=\n    by\n    apply measure_theory.measure.map_congr\n    exact hg.ae_eq_mk\n  have B : map (g ∘ f) μ = map (g' ∘ f) μ :=\n    by\n    apply measure_theory.measure.map_congr\n    exact ae_of_ae_map hf hg.ae_eq_mk\n  simp only [A, B, hs, hg.measurable_mk.ae_measurable.comp_ae_measurable hf, hg.measurable_mk, hg.measurable_mk hs, hf,\n    map_apply, map_apply_of_ae_measurable]\n  rfl\n#align map_map_of_ae_measurable map_map_of_ae_measurable\n\n",
 "indicator":
 "@[measurability]\ntheorem ae_measurable.indicator (hfm : ae_measurable f μ) {s} (hs : measurable_set s) :\n    ae_measurable (s.indicator f) μ :=\n  (ae_measurable_indicator_iff hs).mpr hfm.restrict\n#align ae_measurable.indicator ae_measurable.indicator\n\n",
 "exists_measurable_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem exists_measurable_nonneg {β} [preorder β] [Zero β] {mβ : measurable_space β} {f : α → β}\n    (hf : ae_measurable f μ)\n    (f_nn :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (0 ≤ f t)) :\n    ∃ g, measurable g ∧ 0 ≤ g ∧ «expr =ᵐ[ ] » f μ g :=\n  by\n  obtain ⟨G, hG_meas, hG_mem, hG_ae_eq⟩ := hf.exists_ae_eq_range_subset f_nn ⟨0, le_rfl⟩\n  exact ⟨G, hG_meas, fun x => hG_mem (mem_range_self x), hG_ae_eq⟩\n#align exists_measurable_nonneg exists_measurable_nonneg\n\n",
 "exists_ae_eq_range_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem exists_ae_eq_range_subset (H : ae_measurable f μ) {t : set β}\n    (ht :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ (f x ∈ t))\n    (h₀ : t.nonempty) : ∃ g, measurable g ∧ range g ⊆ t ∧ «expr =ᵐ[ ] » f μ g :=\n  by\n  let s : set α := to_measurable μ («expr ᶜ» { x | f x = H.mk f x ∧ f x ∈ t })\n  let g : α → β := piecewise s (fun x => h₀.some) (H.mk f)\n  refine' ⟨g, _, _, _⟩\n  · exact measurable.piecewise (measurable_set_to_measurable _ _) measurable_const H.measurable_mk\n  · rintro _ ⟨x, rfl⟩\n    by_cases hx : x ∈ s\n    · simpa [g, hx] using h₀.some_mem\n    · simp only [g, hx, piecewise_eq_of_not_mem, not_false_iff]\n      contrapose! hx\n      apply subset_to_measurable\n      simp (config := { contextual := true }) only [hx, mem_compl_iff, mem_set_of_eq, not_and, not_false_iff,\n        imp_true_iff]\n  · have A : μ (to_measurable μ («expr ᶜ» { x | f x = H.mk f x ∧ f x ∈ t })) = 0 :=\n      by\n      rw [measure_to_measurable, ← compl_mem_ae_iff, compl_compl]\n      exact H.ae_eq_mk.and ht\n    filter_upwards [compl_mem_ae_iff.2 A] with x hx\n    rw [mem_compl_iff] at hx\n    simp only [g, hx, piecewise_eq_of_not_mem, not_false_iff]\n    contrapose! hx\n    apply subset_to_measurable\n    simp only [hx, mem_compl_iff, mem_set_of_eq, false_and_iff, not_false_iff]\n#align exists_ae_eq_range_subset exists_ae_eq_range_subset\n\n",
 "comp_quasi_measure_preserving":
 "theorem comp_quasi_measure_preserving {ν : measure δ} {f : α → δ} {g : δ → β} (hg : ae_measurable g ν)\n    (hf : quasi_measure_preserving f μ ν) : ae_measurable (g ∘ f) μ :=\n  (hg.mono' hf.absolutely_continuous).comp_measurable hf.measurable\n#align comp_quasi_measure_preserving comp_quasi_measure_preserving\n\n",
 "comp_measurable":
 "theorem comp_measurable {f : α → δ} {g : δ → β} (hg : ae_measurable g (μ.map f)) (hf : measurable f) :\n    ae_measurable (g ∘ f) μ :=\n  hg.comp_ae_measurable hf.ae_measurable\n#align comp_measurable comp_measurable\n\n",
 "comp_ae_measurable":
 "theorem comp_ae_measurable {f : α → δ} {g : δ → β} (hg : ae_measurable g (μ.map f)) (hf : ae_measurable f μ) :\n    ae_measurable (g ∘ f) μ :=\n  ⟨hg.mk g ∘ hf.mk f, hg.measurable_mk.comp hf.measurable_mk,\n    (ae_eq_comp hf hg.ae_eq_mk).trans (hf.ae_eq_mk.fun_comp (mk g hg))⟩\n#align comp_ae_measurable comp_ae_measurable\n\n",
 "ae_mem_imp_eq_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\ntheorem ae_mem_imp_eq_mk {s} (h : ae_measurable f (μ.restrict s)) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (x ∈ s → f x = h.mk f x) :=\n  ae_imp_of_ae_restrict h.ae_eq_mk\n#align ae_mem_imp_eq_mk ae_mem_imp_eq_mk\n\n",
 "ae_measurable_zero_measure":
 "@[simp, measurability]\ntheorem ae_measurable_zero_measure : ae_measurable f (0 : measure α) :=\n  by\n  nontriviality α; inhabit α\n  exact ⟨fun x => f default, measurable_const, rfl⟩\n#align ae_measurable_zero_measure ae_measurable_zero_measure\n\n",
 "ae_measurable_union_iff":
 "@[simp]\ntheorem _root_.ae_measurable_union_iff {s t : set α} :\n    ae_measurable f (μ.restrict (s ∪ t)) ↔ ae_measurable f (μ.restrict s) ∧ ae_measurable f (μ.restrict t) := by\n  simp only [union_eq_Union, ae_measurable_Union_iff, bool.forall_bool, cond, and_comm]\n#align ae_measurable_union_iff ae_measurable_union_iff\n\n",
 "ae_measurable_uIoc_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprΙ -/\ntheorem ae_measurable_uIoc_iff [linear_order α] {f : α → β} {a b : α} :\n    (ae_measurable f <| μ.restrict <| (exprΙ) a b) ↔\n      (ae_measurable f <| μ.restrict <| Ioc a b) ∧ (ae_measurable f <| μ.restrict <| Ioc b a) :=\n  by rw [uIoc_eq_union, ae_measurable_union_iff]\n#align ae_measurable_uIoc_iff ae_measurable_uIoc_iff\n\n",
 "ae_measurable_sum_measure_iff":
 "@[simp]\ntheorem _root_.ae_measurable_sum_measure_iff [countable ι] {μ : ι → measure α} :\n    ae_measurable f (sum μ) ↔ ∀ i, ae_measurable f (μ i) :=\n  ⟨fun h i => h.mono_measure (le_sum _ _), sum_measure⟩\n#align ae_measurable_sum_measure_iff ae_measurable_sum_measure_iff\n\n",
 "ae_measurable_smul_measure_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem ae_measurable_smul_measure_iff {c : ennreal} (hc : c ≠ 0) :\n    ae_measurable f («expr • » c μ) ↔ ae_measurable f μ :=\n  ⟨fun h => ⟨h.mk f, h.measurable_mk, (ae_smul_measure_iff hc).1 h.ae_eq_mk⟩, fun h =>\n    ⟨h.mk f, h.measurable_mk, (ae_smul_measure_iff hc).2 h.ae_eq_mk⟩⟩\n#align ae_measurable_smul_measure_iff ae_measurable_smul_measure_iff\n\n",
 "ae_measurable_restrict_of_measurable_subtype":
 "theorem ae_measurable_restrict_of_measurable_subtype {s : set α} (hs : measurable_set s)\n    (hf : measurable fun x : s => f x) : ae_measurable f (μ.restrict s) :=\n  (ae_measurable_restrict_iff_comap_subtype hs).2 hf.ae_measurable\n#align ae_measurable_restrict_of_measurable_subtype ae_measurable_restrict_of_measurable_subtype\n\n",
 "ae_measurable_restrict_iff_comap_subtype":
 "theorem ae_measurable_restrict_iff_comap_subtype {s : set α} (hs : measurable_set s) {μ : measure α} {f : α → β} :\n    ae_measurable f (μ.restrict s) ↔ ae_measurable (f ∘ coe : s → β) (comap coe μ) := by\n  rw [← map_comap_subtype_coe hs, (measurable_embedding.subtype_coe hs).ae_measurable_map_iff]\n#align ae_measurable_restrict_iff_comap_subtype ae_measurable_restrict_iff_comap_subtype\n\n",
 "ae_measurable_one":
 "@[simp, to_additive]\ntheorem ae_measurable_one [One β] : ae_measurable (fun a : α => (1 : β)) μ :=\n  measurable_one.ae_measurable\n#align ae_measurable_one ae_measurable_one\n\n",
 "ae_measurable_of_subsingleton_codomain":
 "@[nontriviality, measurability]\ntheorem ae_measurable_of_subsingleton_codomain [subsingleton β] : ae_measurable f μ :=\n  (measurable_of_subsingleton_codomain f).ae_measurable\n#align ae_measurable_of_subsingleton_codomain ae_measurable_of_subsingleton_codomain\n\n",
 "ae_measurable_of_ae_measurable_trim":
 "theorem ae_measurable_of_ae_measurable_trim {α} {m m0 : measurable_space α} {μ : measure α} (hm : m ≤ m0) {f : α → β}\n    (hf : ae_measurable f (μ.trim hm)) : ae_measurable f μ :=\n  ⟨hf.mk f, measurable.mono hf.measurable_mk hm le_rfl, ae_eq_of_ae_eq_trim hf.ae_eq_mk⟩\n#align ae_measurable_of_ae_measurable_trim ae_measurable_of_ae_measurable_trim\n\n",
 "ae_measurable_map_iff":
 "theorem measurable_embedding.ae_measurable_map_iff {g : β → γ} (hf : measurable_embedding f) :\n    ae_measurable g (μ.map f) ↔ ae_measurable (g ∘ f) μ :=\n  by\n  refine' ⟨fun H => H.comp_measurable hf.measurable, _⟩\n  rintro ⟨g₁, hgm₁, heq⟩\n  rcases hf.exists_measurable_extend hgm₁ fun x => ⟨g x⟩ with ⟨g₂, hgm₂, rfl⟩\n  exact ⟨g₂, hgm₂, hf.ae_map_iff.2 HEq⟩\n#align measurable_embedding.ae_measurable_map_iff measurable_embedding.ae_measurable_map_iff\n\n",
 "ae_measurable_map_equiv_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵐ » -/\ntheorem ae_measurable_map_equiv_iff (e : «expr ≃ᵐ » α β) {f : β → γ} :\n    ae_measurable f (μ.map e) ↔ ae_measurable (f ∘ e) μ :=\n  e.measurable_embedding.ae_measurable_map_iff\n#align ae_measurable_map_equiv_iff ae_measurable_map_equiv_iff\n\n",
 "ae_measurable_indicator_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem ae_measurable_indicator_iff {s} (hs : measurable_set s) :\n    ae_measurable (indicator s f) μ ↔ ae_measurable f (μ.restrict s) :=\n  by\n  constructor\n  · intro h\n    exact (h.mono_measure measure.restrict_le_self).congr (indicator_ae_eq_restrict hs)\n  · intro h\n    refine' ⟨indicator s (h.mk f), h.measurable_mk.indicator hs, _⟩\n    have A : «expr =ᵐ[ ] » (s.indicator f) (μ.restrict s) (s.indicator (ae_measurable.mk f h)) :=\n      (indicator_ae_eq_restrict hs).trans (h.ae_eq_mk.trans <| (indicator_ae_eq_restrict hs).symm)\n    have B : «expr =ᵐ[ ] » (s.indicator f) (μ.restrict («expr ᶜ» s)) (s.indicator (ae_measurable.mk f h)) :=\n      (indicator_ae_eq_restrict_compl hs).trans (indicator_ae_eq_restrict_compl hs).symm\n    exact ae_of_ae_restrict_of_ae_restrict_compl _ A B\n#align ae_measurable_indicator_iff ae_measurable_indicator_iff\n\n",
 "ae_measurable_iff_measurable":
 "theorem ae_measurable_iff_measurable [μ.is_complete] : ae_measurable f μ ↔ measurable f :=\n  ⟨fun h => h.null_measurable.measurable_of_complete, fun h => h.ae_measurable⟩\n#align ae_measurable_iff_measurable ae_measurable_iff_measurable\n\n",
 "ae_measurable_const'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\ntheorem ae_measurable_const'\n    (h :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (f x = f y)) :\n    ae_measurable f μ := by\n  rcases eq_or_ne μ 0 with (rfl | hμ)\n  · exact ae_measurable_zero_measure\n  · haveI := ae_ne_bot.2 hμ\n    rcases h.exists with ⟨x, hx⟩\n    exact ⟨const α (f x), measurable_const, eventually_eq.symm hx⟩\n#align ae_measurable_const' ae_measurable_const'\n\n",
 "ae_measurable_comp_iff":
 "theorem measurable_embedding.ae_measurable_comp_iff {g : β → γ} (hg : measurable_embedding g) {μ : measure α} :\n    ae_measurable (g ∘ f) μ ↔ ae_measurable f μ :=\n  by\n  refine' ⟨fun H => _, hg.measurable.comp_ae_measurable⟩\n  suffices ae_measurable ((range_splitting g ∘ range_factorization g) ∘ f) μ by\n    rwa [(right_inverse_range_splitting hg.injective).comp_eq_id] at this\n  exact hg.measurable_range_splitting.comp_ae_measurable H.subtype_mk\n#align measurable_embedding.ae_measurable_comp_iff measurable_embedding.ae_measurable_comp_iff\n\n",
 "ae_measurable_add_measure_iff":
 "@[simp]\ntheorem _root_.ae_measurable_add_measure_iff : ae_measurable f (μ + ν) ↔ ae_measurable f μ ∧ ae_measurable f ν :=\n  by\n  rw [← sum_cond, ae_measurable_sum_measure_iff, bool.forall_bool, and_comm]\n  rfl\n#align ae_measurable_add_measure_iff ae_measurable_add_measure_iff\n\n",
 "ae_measurable_Union_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem _root_.ae_measurable_Union_iff [countable ι] {s : ι → set α} :\n    ae_measurable f\n        (μ.restrict\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i))) ↔\n      ∀ i, ae_measurable f (μ.restrict (s i)) :=\n  ⟨fun h i => h.mono_measure <| restrict_mono (subset_unionᵢ _ _) le_rfl, ae_measurable.Union⟩\n#align ae_measurable_Union_iff ae_measurable_Union_iff\n\n",
 "ae_measurable_Ioi_of_forall_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem ae_measurable_Ioi_of_forall_Ioc {β} {mβ : measurable_space β} [linear_order α]\n    [(at_top : filter α).is_countably_generated] {x : α} {g : α → β}\n    (g_meas : ∀ t > x, ae_measurable g (μ.restrict (Ioc x t))) : ae_measurable g (μ.restrict (Ioi x)) :=\n  by\n  haveI : nonempty α := ⟨x⟩\n  obtain ⟨u, hu_tendsto⟩ := exists_seq_tendsto (at_top : filter α)\n  have Ioi_eq_Union :\n    Ioi x =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (Ioc x (u n)) :=\n    by\n    rw [Union_Ioc_eq_Ioi_self_iff.mpr _]\n    exact fun y _ => (hu_tendsto.eventually (eventually_ge_at_top y)).exists\n  rw [Ioi_eq_Union, ae_measurable_Union_iff]\n  intro n\n  cases lt_or_le x (u n)\n  · exact g_meas (u n) h\n  · rw [Ioc_eq_empty (not_lt.mpr h), measure.restrict_empty]\n    exact ae_measurable_zero_measure\n#align ae_measurable_Ioi_of_forall_Ioc ae_measurable_Ioi_of_forall_Ioc\n\n",
 "ae_measurable":
 "/-\nCopyright (c) 2021 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n@[nontriviality, measurability]\ntheorem subsingleton.ae_measurable [subsingleton α] : ae_measurable f μ :=\n  subsingleton.measurable.ae_measurable\n#align subsingleton.ae_measurable subsingleton.ae_measurable\n\n",
 "ae_inf_principal_eq_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\ntheorem ae_inf_principal_eq_mk {s} (h : ae_measurable f (μ.restrict s)) :\n    «expr =ᶠ[ ] » f («expr ⊓ » μ.ae ((filter.principal) s)) (h.mk f) :=\n  le_ae_restrict h.ae_eq_mk\n#align ae_inf_principal_eq_mk ae_inf_principal_eq_mk\n\n",
 "add_measure":
 "@[measurability]\ntheorem add_measure {f : α → β} (hμ : ae_measurable f μ) (hν : ae_measurable f ν) : ae_measurable f (μ + ν) :=\n  ae_measurable_add_measure_iff.2 ⟨hμ, hν⟩\n#align add_measure add_measure\n\n",
 "Union":
 "/- warning: Union clashes with has_union -> Union\nCase conversion may be inaccurate. Consider using '#align Union Unionₓ'. -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Union /-\n@[measurability]\nprotected theorem Union [countable ι] {s : ι → set α} (h : ∀ i, ae_measurable f (μ.restrict (s i))) :\n    ae_measurable f\n      (μ.restrict\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i))) :=\n  (sum_measure h).mono_measure <| restrict_Union_le\n#align Union Union\n-/\n\n"}