{"val_eq_to_measure":
 "@[simp]\ntheorem val_eq_to_measure (ν : finite_measure Ω) : ν.val = (ν : measure Ω) :=\n  rfl\n#align val_eq_to_measure val_eq_to_measure\n\n",
 "to_weak_dual_bcnn_continuous":
 "theorem to_weak_dual_bcnn_continuous : continuous (@to_weak_dual_bcnn Ω _ _ _) :=\n  continuous_induced_dom\n#align to_weak_dual_bcnn_continuous to_weak_dual_bcnn_continuous\n\n",
 "to_weak_dual_bcnn_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n@[simp]\ntheorem to_weak_dual_bcnn_apply (μ : finite_measure Ω) (f : bounded_continuous_function Ω (nnreal)) :\n    μ.to_weak_dual_bcnn f =\n      («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x)\n          (μ : measure Ω)).to_nnreal :=\n  rfl\n#align to_weak_dual_bcnn_apply to_weak_dual_bcnn_apply\n\n",
 "to_real_lintegral_eq_integral":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\ntheorem _root_.bounded_continuous_function.nnreal.to_real_lintegral_eq_integral\n    (f : bounded_continuous_function Ω (nnreal)) (μ : measure Ω) :\n    («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n          (f x : ennreal) μ).to_real =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by\n  rw [integral_eq_lintegral_of_nonneg_ae _ (nnreal.continuous_coe.comp f.continuous).measurable.ae_strongly_measurable]\n  · simp only [ennreal.of_real_coe_nnreal]\n  · apply eventually_of_forall\n    simp only [pi.zero_apply, nnreal.zero_le_coe, imp_true_iff]\n#align\n  bounded_continuous_function.nnreal.to_real_lintegral_eq_integral bounded_continuous_function.nnreal.to_real_lintegral_eq_integral\n\n",
 "to_ennreal_comp_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem _root_.bounded_continuous_function.nnreal.to_ennreal_comp_measurable {Ω : Type _} [topological_space Ω]\n    [measurable_space Ω] [opens_measurable_space Ω] (f : bounded_continuous_function Ω (nnreal)) :\n    measurable fun ω => (f ω : ennreal) :=\n  measurable_coe_nnreal_ennreal.comp f.continuous.measurable\n#align\n  bounded_continuous_function.nnreal.to_ennreal_comp_measurable bounded_continuous_function.nnreal.to_ennreal_comp_measurable\n\n",
 "test_against_nn_zero":
 "@[simp]\ntheorem test_against_nn_zero (μ : finite_measure Ω) : μ.test_against_nn 0 = 0 := by\n  simpa only [zero_mul] using μ.test_against_nn_const 0\n#align test_against_nn_zero test_against_nn_zero\n\n",
 "test_against_nn_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem test_against_nn_smul [IsScalarTower R (nnreal) (nnreal)] [pseudo_metric_space R] [Zero R]\n    [has_bounded_smul R (nnreal)] (μ : finite_measure Ω) (c : R) (f : bounded_continuous_function Ω (nnreal)) :\n    μ.test_against_nn («expr • » c f) = «expr • » c (μ.test_against_nn f) :=\n  by\n  simp only [← ennreal.coe_eq_coe, bounded_continuous_function.coe_smul, test_against_nn_coe_eq, ennreal.coe_smul]\n  simp_rw [← smul_one_smul (ennreal) c (f _ : ennreal), ← smul_one_smul (ennreal) c (lintegral _ _ : ennreal),\n    smul_eq_mul]\n  exact\n    @lintegral_const_mul _ _ (μ : measure Ω) («expr • » c 1) _\n      (bounded_continuous_function.nnreal.to_ennreal_comp_measurable f)\n#align test_against_nn_smul test_against_nn_smul\n\n",
 "test_against_nn_one":
 "@[simp]\ntheorem test_against_nn_one (μ : finite_measure Ω) : μ.test_against_nn 1 = μ.mass :=\n  by\n  simp only [test_against_nn, coe_one, pi.one_apply, ennreal.coe_one, lintegral_one]\n  rfl\n#align test_against_nn_one test_against_nn_one\n\n",
 "test_against_nn_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_mono (μ : finite_measure Ω) {f g : bounded_continuous_function Ω (nnreal)}\n    (f_le_g : (f : Ω → nnreal) ≤ g) : μ.test_against_nn f ≤ μ.test_against_nn g :=\n  by\n  simp only [← ennreal.coe_le_coe, test_against_nn_coe_eq]\n  exact lintegral_mono fun ω => ennreal.coe_mono (f_le_g ω)\n#align test_against_nn_mono test_against_nn_mono\n\n",
 "test_against_nn_lipschitz_estimate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_lipschitz_estimate (μ : finite_measure Ω) (f g : bounded_continuous_function Ω (nnreal)) :\n    μ.test_against_nn f ≤ μ.test_against_nn g + nndist f g * μ.mass :=\n  by\n  simp only [← μ.test_against_nn_const (nndist f g), ← test_against_nn_add, ← ennreal.coe_le_coe,\n    bounded_continuous_function.coe_add, const_apply, ennreal.coe_add, pi.add_apply, coe_nnreal_ennreal_nndist,\n    test_against_nn_coe_eq]\n  apply lintegral_mono\n  have le_dist : ∀ ω, dist (f ω) (g ω) ≤ nndist f g := bounded_continuous_function.dist_coe_le_dist\n  intro ω\n  have le' : f ω ≤ g ω + nndist f g :=\n    by\n    apply (nnreal.le_add_nndist (f ω) (g ω)).trans\n    rw [add_le_add_iff_left]\n    exact dist_le_coe.mp (le_dist ω)\n  have le : (f ω : ennreal) ≤ (g ω : ennreal) + nndist f g :=\n    by\n    rw [← ennreal.coe_add]\n    exact ennreal.coe_mono le'\n  rwa [coe_nnreal_ennreal_nndist] at le\n#align test_against_nn_lipschitz_estimate test_against_nn_lipschitz_estimate\n\n",
 "test_against_nn_lipschitz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_lipschitz (μ : finite_measure Ω) :\n    lipschitz_with μ.mass fun f : bounded_continuous_function Ω (nnreal) => μ.test_against_nn f :=\n  by\n  rw [lipschitz_with_iff_dist_le_mul]\n  intro f₁ f₂\n  suffices abs (μ.test_against_nn f₁ - μ.test_against_nn f₂ : exprℝ) ≤ μ.mass * dist f₁ f₂ by rwa [nnreal.dist_eq]\n  apply abs_le.mpr\n  constructor\n  · have key' := μ.test_against_nn_lipschitz_estimate f₂ f₁\n    rw [mul_comm] at key'\n    suffices ↑(μ.test_against_nn f₂) ≤ ↑(μ.test_against_nn f₁) + ↑μ.mass * dist f₁ f₂ by linarith\n    have key := nnreal.coe_mono key'\n    rwa [nnreal.coe_add, nnreal.coe_mul, nndist_comm] at key\n  · have key' := μ.test_against_nn_lipschitz_estimate f₁ f₂\n    rw [mul_comm] at key'\n    suffices ↑(μ.test_against_nn f₁) ≤ ↑(μ.test_against_nn f₂) + ↑μ.mass * dist f₁ f₂ by linarith\n    have key := nnreal.coe_mono key'\n    rwa [nnreal.coe_add, nnreal.coe_mul] at key\n#align test_against_nn_lipschitz test_against_nn_lipschitz\n\n",
 "test_against_nn_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_const (μ : finite_measure Ω) (c : nnreal) :\n    μ.test_against_nn (bounded_continuous_function.const Ω c) = c * μ.mass := by simp [← ennreal.coe_eq_coe]\n#align test_against_nn_const test_against_nn_const\n\n",
 "test_against_nn_coe_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n@[simp]\ntheorem test_against_nn_coe_eq {μ : finite_measure Ω} {f : bounded_continuous_function Ω (nnreal)} :\n    (μ.test_against_nn f : ennreal) =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω)\n        (μ : measure Ω) :=\n  ennreal.coe_to_nnreal (lintegral_lt_top_of_bounded_continuous_to_nnreal _ f).ne\n#align test_against_nn_coe_eq test_against_nn_coe_eq\n\n",
 "test_against_nn_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp]\ntheorem zero.test_against_nn_apply (f : bounded_continuous_function Ω (nnreal)) :\n    (0 : finite_measure Ω).test_against_nn f = 0 := by\n  simp only [test_against_nn, coe_zero, lintegral_zero_measure, ennreal.zero_to_nnreal]\n#align zero.test_against_nn_apply zero.test_against_nn_apply\n\n",
 "test_against_nn_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_add (μ : finite_measure Ω) (f₁ f₂ : bounded_continuous_function Ω (nnreal)) :\n    μ.test_against_nn (f₁ + f₂) = μ.test_against_nn f₁ + μ.test_against_nn f₂ :=\n  by\n  simp only [← ennreal.coe_eq_coe, bounded_continuous_function.coe_add, ennreal.coe_add, pi.add_apply,\n    test_against_nn_coe_eq]\n  exact lintegral_add_left (bounded_continuous_function.nnreal.to_ennreal_comp_measurable _) _\n#align test_against_nn_add test_against_nn_add\n\n",
 "test_against_nn":
 "theorem zero.test_against_nn : (0 : finite_measure Ω).test_against_nn = 0 :=\n  by\n  funext\n  simp only [zero.test_against_nn_apply, pi.zero_apply]\n#align zero.test_against_nn zero.test_against_nn\n\n",
 "tendsto_zero_test_against_nn_of_tendsto_zero_mass":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If the total masses of finite measures tend to zero, then the measures tend to\nzero. This formulation concerns the associated functionals on bounded continuous\nnonnegative test functions. See `finite_measure.tendsto_zero_of_tendsto_zero_mass` for\na formulation stating the weak convergence of measures. -/\ntheorem tendsto_zero_test_against_nn_of_tendsto_zero_mass {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    (mass_lim : tendsto (fun i => (μs i).mass) F ((nhds) 0)) (f : bounded_continuous_function Ω (nnreal)) :\n    tendsto (fun i => (μs i).test_against_nn f) F ((nhds) 0) :=\n  by\n  apply tendsto_iff_dist_tendsto_zero.mpr\n  have obs := fun i => (μs i).test_against_nn_lipschitz_estimate f 0\n  simp_rw [test_against_nn_zero, zero_add] at obs\n  simp_rw [show ∀ i, dist ((μs i).test_against_nn f) 0 = (μs i).test_against_nn f by\n      simp only [dist_nndist, nnreal.nndist_zero_eq_val', eq_self_iff_true, imp_true_iff]]\n  refine' squeeze_zero (fun i => nnreal.coe_nonneg _) obs _\n  simp_rw [nnreal.coe_mul]\n  have lim_pair : tendsto (fun i => (⟨nndist f 0, (μs i).mass⟩ : exprℝ × exprℝ)) F ((nhds) ⟨nndist f 0, 0⟩) :=\n    by\n    refine' (prod.tendsto_iff _ _).mpr ⟨tendsto_const_nhds, _⟩\n    exact (nnreal.continuous_coe.tendsto 0).comp mass_lim\n  have key := tendsto_mul.comp lim_pair\n  rwa [mul_zero] at key\n#align tendsto_zero_test_against_nn_of_tendsto_zero_mass tendsto_zero_test_against_nn_of_tendsto_zero_mass\n\n",
 "tendsto_zero_of_tendsto_zero_mass":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If the total masses of finite measures tend to zero, then the measures tend to zero. -/\ntheorem tendsto_zero_of_tendsto_zero_mass {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    (mass_lim : tendsto (fun i => (μs i).mass) F ((nhds) 0)) : tendsto μs F ((nhds) 0) :=\n  by\n  rw [tendsto_iff_forall_test_against_nn_tendsto]\n  intro f\n  convert tendsto_zero_test_against_nn_of_tendsto_zero_mass mass_lim f\n  rw [zero.test_against_nn_apply]\n#align tendsto_zero_of_tendsto_zero_mass tendsto_zero_of_tendsto_zero_mass\n\n",
 "tendsto_test_against_nn_of_le_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A bounded convergence theorem for a finite measure:\nIf a sequence of bounded continuous non-negative functions are uniformly bounded by a constant and\ntend pointwise to a limit, then their integrals (`measure_theory.finite_measure.test_against_nn`)\nagainst the finite measure tend to the integral of the limit.\n\nRelated results:\n * `measure_theory.finite_measure.tendsto_test_against_nn_filter_of_le_const`:\n   more general assumptions\n * `measure_theory.finite_measure.tendsto_lintegral_nn_of_le_const`:\n   using `measure_theory.lintegral` for integration.\n-/\ntheorem tendsto_test_against_nn_of_le_const {μ : finite_measure Ω} {fs : ℕ → bounded_continuous_function Ω (nnreal)}\n    {c : nnreal} (fs_le_const : ∀ n ω, fs n ω ≤ c) {f : bounded_continuous_function Ω (nnreal)}\n    (fs_lim : ∀ ω, tendsto (fun n => fs n ω) at_top ((nhds) (f ω))) :\n    tendsto (fun n => μ.test_against_nn (fs n)) at_top ((nhds) (μ.test_against_nn f)) :=\n  tendsto_test_against_nn_filter_of_le_const (eventually_of_forall fun n => eventually_of_forall (fs_le_const n))\n    (eventually_of_forall fs_lim)\n#align tendsto_test_against_nn_of_le_const tendsto_test_against_nn_of_le_const\n\n",
 "tendsto_test_against_nn_filter_of_le_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A bounded convergence theorem for a finite measure:\nIf bounded continuous non-negative functions are uniformly bounded by a constant and tend to a\nlimit, then their integrals against the finite measure tend to the integral of the limit.\nThis formulation assumes:\n * the functions tend to a limit along a countably generated filter;\n * the limit is in the almost everywhere sense;\n * boundedness holds almost everywhere;\n * integration is the pairing against non-negative continuous test functions\n   (`measure_theory.finite_measure.test_against_nn`).\n\nA related result using `measure_theory.lintegral` for integration is\n`measure_theory.finite_measure.tendsto_lintegral_nn_filter_of_le_const`.\n-/\ntheorem tendsto_test_against_nn_filter_of_le_const {ι : Type _} {L : filter ι} [L.is_countably_generated]\n    {μ : finite_measure Ω} {fs : ι → bounded_continuous_function Ω (nnreal)} {c : nnreal}\n    (fs_le_const :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" L\n        («expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\"\n          (μ : measure Ω) (fs i ω ≤ c)))\n    {f : bounded_continuous_function Ω (nnreal)}\n    (fs_lim :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\"\n        (μ : measure Ω) (tendsto (fun i => fs i ω) L ((nhds) (f ω)))) :\n    tendsto (fun i => μ.test_against_nn (fs i)) L ((nhds) (μ.test_against_nn f)) :=\n  by\n  apply (ennreal.tendsto_to_nnreal (lintegral_lt_top_of_bounded_continuous_to_nnreal (μ : measure Ω) f).ne).comp\n  exact tendsto_lintegral_nn_filter_of_le_const μ fs_le_const fs_lim\n#align tendsto_test_against_nn_filter_of_le_const tendsto_test_against_nn_filter_of_le_const\n\n",
 "tendsto_of_forall_integral_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_of_forall_integral_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    {μ : finite_measure Ω}\n    (h :\n      ∀ f : bounded_continuous_function Ω (exprℝ),\n        tendsto\n          (fun i =>\n            «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x)\n              (μs i : measure Ω))\n          F\n          ((nhds)\n            («expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x)\n              (μ : measure Ω)))) :\n    tendsto μs F ((nhds) μ) :=\n  by\n  apply (@tendsto_iff_forall_lintegral_tendsto Ω _ _ _ γ F μs μ).mpr\n  intro f\n  have key :=\n    @ennreal.tendsto_to_real_iff _ F _\n      (fun i => (lintegral_lt_top_of_bounded_continuous_to_nnreal (μs i : measure Ω) f).ne) _\n      (lintegral_lt_top_of_bounded_continuous_to_nnreal (μ : measure Ω) f).ne\n  simp only [ennreal.of_real_coe_nnreal] at key\n  apply key.mp\n  have lip : lipschitz_with 1 (coe : nnreal → exprℝ) := isometry_subtype_coe.lipschitz\n  set f₀ := bounded_continuous_function.comp _ lip f with def_f₀\n  have f₀_eq : «expr⇑ » f₀ = (coe : nnreal → exprℝ) ∘ «expr⇑ » f := by rfl\n  have f₀_nn : 0 ≤ «expr⇑ » f₀ := fun _ => by simp only [f₀_eq, pi.zero_apply, nnreal.zero_le_coe]\n  have f₀_ae_nn : «expr ≤ᵐ[ ] » 0 (μ : measure Ω) («expr⇑ » f₀) := eventually_of_forall f₀_nn\n  have f₀_ae_nns : ∀ i, «expr ≤ᵐ[ ] » 0 (μs i : measure Ω) («expr⇑ » f₀) := fun i => eventually_of_forall f₀_nn\n  have aux := integral_eq_lintegral_of_nonneg_ae f₀_ae_nn f₀.continuous.measurable.ae_strongly_measurable\n  have auxs := fun i => integral_eq_lintegral_of_nonneg_ae (f₀_ae_nns i) f₀.continuous.measurable.ae_strongly_measurable\n  simp only [f₀_eq, ennreal.of_real_coe_nnreal] at aux auxs\n  simpa only [← aux, ← auxs] using h f₀\n#align tendsto_of_forall_integral_tendsto tendsto_of_forall_integral_tendsto\n\n",
 "tendsto_lintegral_nn_of_le_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- A bounded convergence theorem for a finite measure:\nIf a sequence of bounded continuous non-negative functions are uniformly bounded by a constant\nand tend pointwise to a limit, then their integrals (`measure_theory.lintegral`) against the finite\nmeasure tend to the integral of the limit.\n\nA related result with more general assumptions is\n`measure_theory.finite_measure.tendsto_lintegral_nn_filter_of_le_const`.\n-/\ntheorem tendsto_lintegral_nn_of_le_const (μ : finite_measure Ω) {fs : ℕ → bounded_continuous_function Ω (nnreal)}\n    {c : nnreal} (fs_le_const : ∀ n ω, fs n ω ≤ c) {f : Ω → nnreal}\n    (fs_lim : ∀ ω, tendsto (fun n => fs n ω) at_top ((nhds) (f ω))) :\n    tendsto\n      (fun n =>\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (fs n ω)\n          (μ : measure Ω))\n      at_top\n      ((nhds)\n        («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω)\n          (μ : measure Ω))) :=\n  tendsto_lintegral_nn_filter_of_le_const μ (eventually_of_forall fun n => eventually_of_forall (fs_le_const n))\n    (eventually_of_forall fs_lim)\n#align tendsto_lintegral_nn_of_le_const tendsto_lintegral_nn_of_le_const\n\n",
 "tendsto_lintegral_nn_filter_of_le_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n-- section\n/-- A bounded convergence theorem for a finite measure:\nIf bounded continuous non-negative functions are uniformly bounded by a constant and tend to a\nlimit, then their integrals against the finite measure tend to the integral of the limit.\nThis formulation assumes:\n * the functions tend to a limit along a countably generated filter;\n * the limit is in the almost everywhere sense;\n * boundedness holds almost everywhere;\n * integration is `measure_theory.lintegral`, i.e., the functions and their integrals are\n   `ℝ≥0∞`-valued.\n-/\ntheorem tendsto_lintegral_nn_filter_of_le_const {ι : Type _} {L : filter ι} [L.is_countably_generated] (μ : measure Ω)\n    [is_finite_measure μ] {fs : ι → bounded_continuous_function Ω (nnreal)} {c : nnreal}\n    (fs_le_const :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" L\n        («expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n          (fs i ω ≤ c)))\n    {f : Ω → nnreal}\n    (fs_lim :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (tendsto (fun i => fs i ω) L ((nhds) (f ω)))) :\n    tendsto\n      (fun i =>\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (fs i ω)\n          μ)\n      L\n      ((nhds)\n        («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω)\n          μ)) :=\n  by\n  simpa only using\n    tendsto_lintegral_filter_of_dominated_convergence (fun _ => c)\n      (eventually_of_forall fun i => (ennreal.continuous_coe.comp (fs i).continuous).measurable) _\n      (@lintegral_const_lt_top _ _ μ _ _ (@ennreal.coe_ne_top c)).ne _\n  · simpa only [ennreal.coe_le_coe] using fs_le_const\n  · simpa only [ennreal.tendsto_coe] using fs_lim\n#align tendsto_lintegral_nn_filter_of_le_const tendsto_lintegral_nn_filter_of_le_const\n\n",
 "tendsto_iff_weak_star_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iff_weak_star_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω} {μ : finite_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔ tendsto (fun i => (μs i).to_weak_dual_bcnn) F ((nhds) μ.to_weak_dual_bcnn) :=\n  inducing.tendsto_nhds_iff ⟨rfl⟩\n#align tendsto_iff_weak_star_tendsto tendsto_iff_weak_star_tendsto\n\n",
 "tendsto_iff_forall_to_weak_dual_bcnn_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iff_forall_to_weak_dual_bcnn_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    {μ : finite_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔\n      ∀ f : bounded_continuous_function Ω (nnreal),\n        tendsto (fun i => (μs i).to_weak_dual_bcnn f) F ((nhds) (μ.to_weak_dual_bcnn f)) :=\n  by\n  rw [tendsto_iff_weak_star_tendsto, tendsto_iff_forall_eval_tendsto_top_dual_pairing]\n  rfl\n#align tendsto_iff_forall_to_weak_dual_bcnn_tendsto tendsto_iff_forall_to_weak_dual_bcnn_tendsto\n\n",
 "tendsto_iff_forall_test_against_nn_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iff_forall_test_against_nn_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    {μ : finite_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔\n      ∀ f : bounded_continuous_function Ω (nnreal),\n        tendsto (fun i => (μs i).test_against_nn f) F ((nhds) (μ.test_against_nn f)) :=\n  by\n  rw [finite_measure.tendsto_iff_forall_to_weak_dual_bcnn_tendsto]\n  rfl\n#align tendsto_iff_forall_test_against_nn_tendsto tendsto_iff_forall_test_against_nn_tendsto\n\n",
 "tendsto_iff_forall_lintegral_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- A characterization of weak convergence in terms of integrals of bounded continuous\nnonnegative functions. -/\ntheorem tendsto_iff_forall_lintegral_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    {μ : finite_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔\n      ∀ f : bounded_continuous_function Ω (nnreal),\n        tendsto\n          (fun i =>\n            «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x)\n              (μs i : measure Ω))\n          F\n          ((nhds)\n            («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x)\n              (μ : measure Ω))) :=\n  by\n  rw [tendsto_iff_forall_to_weak_dual_bcnn_tendsto]\n  simp_rw [to_weak_dual_bcnn_apply _ _, ← test_against_nn_coe_eq, ennreal.tendsto_coe, ennreal.to_nnreal_coe]\n#align tendsto_iff_forall_lintegral_tendsto tendsto_iff_forall_lintegral_tendsto\n\n",
 "tendsto_iff_forall_integral_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- A characterization of weak convergence in terms of integrals of bounded continuous\nreal-valued functions. -/\ntheorem tendsto_iff_forall_integral_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    {μ : finite_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔\n      ∀ f : bounded_continuous_function Ω (exprℝ),\n        tendsto\n          (fun i =>\n            «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x)\n              (μs i : measure Ω))\n          F\n          ((nhds)\n            («expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x)\n              (μ : measure Ω))) :=\n  by\n  refine' ⟨_, tendsto_of_forall_integral_tendsto⟩\n  rw [tendsto_iff_forall_lintegral_tendsto]\n  intro h f\n  simp_rw [bounded_continuous_function.integral_eq_integral_nnreal_part_sub]\n  set f_pos := f.nnreal_part with def_f_pos\n  set f_neg := (-f).nnreal_part with def_f_neg\n  have tends_pos :=\n    (ennreal.tendsto_to_real (lintegral_lt_top_of_bounded_continuous_to_nnreal (μ : measure Ω) f_pos).ne).comp (h f_pos)\n  have tends_neg :=\n    (ennreal.tendsto_to_real (lintegral_lt_top_of_bounded_continuous_to_nnreal (μ : measure Ω) f_neg).ne).comp (h f_neg)\n  have aux :\n    ∀ g : bounded_continuous_function Ω (nnreal),\n      (ennreal.to_real ∘ fun i : γ =>\n          «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" ↑(g x)\n            (μs i : measure Ω)) =\n        fun i : γ =>\n        («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" ↑(g x)\n            (μs i : measure Ω)).to_real :=\n    fun _ => rfl\n  simp_rw [aux, bounded_continuous_function.nnreal.to_real_lintegral_eq_integral] at tends_pos tends_neg\n  exact tendsto.sub tends_pos tends_neg\n#align tendsto_iff_forall_integral_tendsto tendsto_iff_forall_integral_tendsto\n\n",
 "smul_test_against_nn_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_test_against_nn_apply (c : nnreal) (μ : finite_measure Ω) (f : bounded_continuous_function Ω (nnreal)) :\n    («expr • » c μ).test_against_nn f = «expr • » c (μ.test_against_nn f) := by\n  simp only [test_against_nn, coe_smul, smul_eq_mul, ← ennreal.smul_to_nnreal, ennreal.smul_def, lintegral_smul_measure]\n#align smul_test_against_nn_apply smul_test_against_nn_apply\n\n",
 "restrict_nonzero_iff":
 "theorem restrict_nonzero_iff (μ : finite_measure Ω) (A : set Ω) : μ.restrict A ≠ 0 ↔ μ A ≠ 0 := by\n  rw [← mass_nonzero_iff, restrict_mass]\n#align restrict_nonzero_iff restrict_nonzero_iff\n\n",
 "restrict_measure_eq":
 "theorem restrict_measure_eq (μ : finite_measure Ω) (A : set Ω) :\n    (μ.restrict A : measure Ω) = (μ : measure Ω).restrict A :=\n  rfl\n#align restrict_measure_eq restrict_measure_eq\n\n",
 "restrict_mass":
 "theorem restrict_mass (μ : finite_measure Ω) (A : set Ω) : (μ.restrict A).mass = μ A := by\n  simp only [mass, restrict_apply μ A measurable_set.univ, univ_inter]\n#align restrict_mass restrict_mass\n\n",
 "restrict_eq_zero_iff":
 "theorem restrict_eq_zero_iff (μ : finite_measure Ω) (A : set Ω) : μ.restrict A = 0 ↔ μ A = 0 := by\n  rw [← mass_zero_iff, restrict_mass]\n#align restrict_eq_zero_iff restrict_eq_zero_iff\n\n",
 "restrict_apply_measure":
 "theorem restrict_apply_measure (μ : finite_measure Ω) (A : set Ω) {s : set Ω} (s_mble : measurable_set s) :\n    (μ.restrict A : measure Ω) s = (μ : measure Ω) (s ∩ A) :=\n  measure.restrict_apply s_mble\n#align restrict_apply_measure restrict_apply_measure\n\n",
 "restrict_apply":
 "theorem restrict_apply (μ : finite_measure Ω) (A : set Ω) {s : set Ω} (s_mble : measurable_set s) :\n    (μ.restrict A) s = μ (s ∩ A) := by\n  apply congr_arg ennreal.to_nnreal\n  exact measure.restrict_apply s_mble\n#align restrict_apply restrict_apply\n\n",
 "mass_zero_iff":
 "@[simp]\ntheorem mass_zero_iff (μ : finite_measure Ω) : μ.mass = 0 ↔ μ = 0 :=\n  by\n  refine' ⟨fun μ_mass => _, fun hμ => by simp only [hμ, zero.mass]⟩\n  ext1\n  apply measure.measure_univ_eq_zero.mp\n  rwa [← ennreal_mass, ennreal.coe_eq_zero]\n#align mass_zero_iff mass_zero_iff\n\n",
 "mass_nonzero_iff":
 "theorem mass_nonzero_iff (μ : finite_measure Ω) : μ.mass ≠ 0 ↔ μ ≠ 0 :=\n  by\n  rw [not_iff_not]\n  exact finite_measure.mass_zero_iff μ\n#align mass_nonzero_iff mass_nonzero_iff\n\n",
 "mass":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Convergence of finite measures implies the convergence of their total masses. -/\ntheorem _root_.filter.tendsto.mass {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω} {μ : finite_measure Ω}\n    (h : tendsto μs F ((nhds) μ)) : tendsto (fun i => (μs i).mass) F ((nhds) μ.mass) :=\n  (continuous_mass.tendsto μ).comp h\n#align filter.tendsto.mass filter.tendsto.mass\n\n",
 "lintegral_lt_top_of_bounded_continuous_to_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem lintegral_lt_top_of_bounded_continuous_to_real {Ω : Type _} [measurable_space Ω] [topological_space Ω]\n    (μ : measure Ω) [is_finite_measure μ] (f : bounded_continuous_function Ω (exprℝ)) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        (ennreal.of_real (f ω)) μ <\n      ennreal.top :=\n  lintegral_lt_top_of_bounded_continuous_to_nnreal _ f.nnreal_part\n#align lintegral_lt_top_of_bounded_continuous_to_real lintegral_lt_top_of_bounded_continuous_to_real\n\n",
 "lintegral_lt_top_of_bounded_continuous_to_nnreal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem _root_.measure_theory.lintegral_lt_top_of_bounded_continuous_to_nnreal (μ : measure Ω) [is_finite_measure μ]\n    (f : bounded_continuous_function Ω (nnreal)) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω) μ <\n      ennreal.top :=\n  by\n  apply is_finite_measure.lintegral_lt_top_of_bounded_to_ennreal\n  use nndist f 0\n  intro x\n  have key := bounded_continuous_function.nnreal.upper_bound f x\n  rw [ennreal.coe_le_coe]\n  have eq : nndist f 0 = ⟨dist f 0, dist_nonneg⟩ := by\n    ext\n    simp only [real.coe_to_nnreal', max_eq_left_iff, subtype.coe_mk, coe_nndist]\n  rwa [eq] at key\n#align\n  measure_theory.lintegral_lt_top_of_bounded_continuous_to_nnreal measure_theory.lintegral_lt_top_of_bounded_continuous_to_nnreal\n\n",
 "integral_eq_integral_nnreal_part_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\ntheorem _root_.bounded_continuous_function.integral_eq_integral_nnreal_part_sub (μ : measure Ω) [is_finite_measure μ]\n    (f : bounded_continuous_function Ω (exprℝ)) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f ω) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\"\n          (f.nnreal_part ω) μ -\n        «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\"\n          ((-f).nnreal_part ω) μ :=\n  by\n  simp only [f.self_eq_nnreal_part_sub_nnreal_part_neg, pi.sub_apply, integral_sub,\n    integrable_of_bounded_continuous_to_nnreal]\n#align\n  bounded_continuous_function.integral_eq_integral_nnreal_part_sub bounded_continuous_function.integral_eq_integral_nnreal_part_sub\n\n",
 "integrable_of_bounded_continuous_to_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem integrable_of_bounded_continuous_to_real (μ : measure Ω) [is_finite_measure μ]\n    (f : bounded_continuous_function Ω (exprℝ)) : integrable («expr⇑ » f) μ :=\n  by\n  refine' ⟨f.continuous.measurable.ae_strongly_measurable, _⟩\n  have aux : (coe : nnreal → exprℝ) ∘ «expr⇑ » f.nnnorm = fun x => «expr‖ ‖» (f x) :=\n    by\n    ext ω\n    simp only [Function.comp_apply, bounded_continuous_function.nnnorm_coe_fun_eq, coe_nnnorm]\n  apply (has_finite_integral_iff_norm («expr⇑ » f)).mpr\n  rw [← of_real_integral_eq_lintegral_of_real]\n  · exact ennreal.of_real_lt_top\n  · exact aux ▸ integrable_of_bounded_continuous_to_nnreal μ f.nnnorm\n  · exact eventually_of_forall fun ω => norm_nonneg (f ω)\n#align integrable_of_bounded_continuous_to_real integrable_of_bounded_continuous_to_real\n\n",
 "integrable_of_bounded_continuous_to_nnreal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n-- section\ntheorem integrable_of_bounded_continuous_to_nnreal (μ : measure Ω) [is_finite_measure μ]\n    (f : bounded_continuous_function Ω (nnreal)) : integrable ((coe : nnreal → exprℝ) ∘ «expr⇑ » f) μ :=\n  by\n  refine' ⟨(nnreal.continuous_coe.comp f.continuous).measurable.ae_strongly_measurable, _⟩\n  simp only [has_finite_integral, nnreal.nnnorm_eq]\n  exact lintegral_lt_top_of_bounded_continuous_to_nnreal _ f\n#align integrable_of_bounded_continuous_to_nnreal integrable_of_bounded_continuous_to_nnreal\n\n",
 "eq_of_forall_measure_apply_eq":
 "@[ext]\ntheorem eq_of_forall_measure_apply_eq (μ ν : finite_measure Ω)\n    (h : ∀ s : set Ω, measurable_set s → (μ : measure Ω) s = (ν : measure Ω) s) : μ = ν :=\n  by\n  ext1\n  ext1 s s_mble\n  exact h s s_mble\n#align eq_of_forall_measure_apply_eq eq_of_forall_measure_apply_eq\n\n",
 "eq_of_forall_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem eq_of_forall_apply_eq (μ ν : finite_measure Ω) (h : ∀ s : set Ω, measurable_set s → μ s = ν s) : μ = ν :=\n  by\n  ext1 s s_mble\n  simpa [ennreal_coe_fn_eq_coe_fn_to_measure] using congr_arg (coe : nnreal → ennreal) (h s s_mble)\n#align eq_of_forall_apply_eq eq_of_forall_apply_eq\n\n",
 "ennreal_mass":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n@[simp]\ntheorem ennreal_mass {μ : finite_measure Ω} : (μ.mass : ennreal) = (μ : measure Ω) univ :=\n  ennreal_coe_fn_eq_coe_fn_to_measure μ Set.univ\n#align ennreal_mass ennreal_mass\n\n",
 "ennreal_coe_fn_eq_coe_fn_to_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n@[simp]\ntheorem ennreal_coe_fn_eq_coe_fn_to_measure (ν : finite_measure Ω) (s : set Ω) : (ν s : ennreal) = (ν : measure Ω) s :=\n  ennreal.coe_to_nnreal (measure_lt_top (↑ν) s).ne\n#align ennreal_coe_fn_eq_coe_fn_to_measure ennreal_coe_fn_eq_coe_fn_to_measure\n\n",
 "continuous_test_against_nn_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- Integration of (nonnegative bounded continuous) test functions against finite Borel measures\ndepends continuously on the measure. -/\ntheorem continuous_test_against_nn_eval (f : bounded_continuous_function Ω (nnreal)) :\n    continuous fun μ : finite_measure Ω => μ.test_against_nn f :=\n  (by apply (weak_bilin.eval_continuous _ _).comp to_weak_dual_bcnn_continuous :\n    continuous ((fun φ : weak_dual (nnreal) (bounded_continuous_function Ω (nnreal)) => φ f) ∘ to_weak_dual_bcnn))\n#align continuous_test_against_nn_eval continuous_test_against_nn_eval\n\n",
 "continuous_mass":
 "/-- The total mass of a finite measure depends continuously on the measure. -/\ntheorem continuous_mass : continuous fun μ : finite_measure Ω => μ.mass :=\n  by\n  simp_rw [← test_against_nn_one]\n  exact continuous_test_against_nn_eval 1\n#align continuous_mass continuous_mass\n\n",
 "coe_zero":
 "@[simp, norm_cast]\ntheorem coe_zero : (coe : finite_measure Ω → measure Ω) 0 = 0 :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_to_weak_dual_bcnn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_weak_dual_bcnn (μ : finite_measure Ω) : «expr⇑ » μ.to_weak_dual_bcnn = μ.test_against_nn :=\n  rfl\n#align coe_to_weak_dual_bcnn coe_to_weak_dual_bcnn\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, norm_cast]\ntheorem coe_smul (c : R) (μ : finite_measure Ω) : ↑(«expr • » c μ) = («expr • » c ↑μ : measure Ω) :=\n  rfl\n#align coe_smul coe_smul\n\n",
 "coe_injective":
 "theorem coe_injective : function.injective (coe : finite_measure Ω → measure Ω) :=\n  subtype.coe_injective\n#align coe_injective coe_injective\n\n",
 "coe_fn_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp, norm_cast]\ntheorem coe_fn_zero : («expr⇑ » (0 : finite_measure Ω) : set Ω → nnreal) = (0 : set Ω → nnreal) :=\n  by\n  funext\n  rfl\n#align coe_fn_zero coe_fn_zero\n\n",
 "coe_fn_smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_fn_smul_apply [IsScalarTower R (nnreal) (nnreal)] (c : R) (μ : finite_measure Ω) (s : set Ω) :\n    («expr • » c μ) s = «expr • » c (μ s) := by simp only [coe_fn_smul, pi.smul_apply]\n#align coe_fn_smul_apply coe_fn_smul_apply\n\n",
 "coe_fn_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp, norm_cast]\ntheorem coe_fn_smul [IsScalarTower R (nnreal) (nnreal)] (c : R) (μ : finite_measure Ω) :\n    («expr⇑ » («expr • » c μ) : set Ω → nnreal) = «expr • » c («expr⇑ » μ : set Ω → nnreal) :=\n  by\n  funext\n  simp [← ennreal.coe_eq_coe, ennreal.coe_smul]\n#align coe_fn_smul coe_fn_smul\n\n",
 "coe_fn_eq_to_nnreal_coe_fn_to_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/-\nCopyright (c) 2021 Kalle Kytölä. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kalle Kytölä\n-/\ntheorem coe_fn_eq_to_nnreal_coe_fn_to_measure (ν : finite_measure Ω) :\n    (ν : set Ω → nnreal) = fun s => ((ν : measure Ω) s).to_nnreal :=\n  rfl\n#align coe_fn_eq_to_nnreal_coe_fn_to_measure coe_fn_eq_to_nnreal_coe_fn_to_measure\n\n",
 "coe_fn_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp, norm_cast]\ntheorem coe_fn_add (μ ν : finite_measure Ω) :\n    («expr⇑ » (μ + ν) : set Ω → nnreal) = («expr⇑ » μ + «expr⇑ » ν : set Ω → nnreal) :=\n  by\n  funext\n  simp [← ennreal.coe_eq_coe]\n#align coe_fn_add coe_fn_add\n\n",
 "coe_add":
 "@[simp, norm_cast]\ntheorem coe_add (μ ν : finite_measure Ω) : ↑(μ + ν) = (↑μ + ↑ν : measure Ω) :=\n  rfl\n#align coe_add coe_add\n\n",
 "apply_mono":
 "theorem apply_mono (μ : finite_measure Ω) {s₁ s₂ : set Ω} (h : s₁ ⊆ s₂) : μ s₁ ≤ μ s₂ :=\n  by\n  change ((μ : measure Ω) s₁).to_nnreal ≤ ((μ : measure Ω) s₂).to_nnreal\n  have key : (μ : measure Ω) s₁ ≤ (μ : measure Ω) s₂ := (μ : measure Ω).mono h\n  apply (ennreal.to_nnreal_le_to_nnreal (measure_ne_top _ s₁) (measure_ne_top _ s₂)).mpr key\n#align apply_mono apply_mono\n\n"}