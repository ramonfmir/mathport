{"parallelepiped_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The axis aligned parallelepiped over `ι → ℝ` is a cuboid. -/\ntheorem parallelepiped_single [DecidableEq ι] (a : ι → exprℝ) :\n    (parallelepiped fun i => Pi.single i (a i)) = Set.uIcc 0 a :=\n  by\n  ext\n  simp_rw [Set.uIcc, mem_parallelepiped_iff, Set.mem_Icc, Pi.le_def, ← forall_and, Pi.inf_apply, Pi.sup_apply, ←\n    Pi.single_smul', Pi.one_apply, Pi.zero_apply, ← Pi.smul_apply', Finset.univ_sum_single (_ : ι → exprℝ)]\n  constructor\n  · rintro ⟨t, ht, rfl⟩ i\n    specialize ht i\n    simp_rw [smul_eq_mul, Pi.mul_apply]\n    cases' le_total (a i) 0 with hai hai\n    · rw [sup_eq_left.mpr hai, inf_eq_right.mpr hai]\n      exact ⟨le_mul_of_le_one_left hai ht.2, mul_nonpos_of_nonneg_of_nonpos ht.1 hai⟩\n    · rw [sup_eq_right.mpr hai, inf_eq_left.mpr hai]\n      exact ⟨mul_nonneg ht.1 hai, mul_le_of_le_one_left hai ht.2⟩\n  · intro h\n    refine' ⟨fun i => x i / a i, fun i => _, funext fun i => _⟩\n    · specialize h i\n      cases' le_total (a i) 0 with hai hai\n      · rw [sup_eq_left.mpr hai, inf_eq_right.mpr hai] at h\n        exact ⟨div_nonneg_of_nonpos h.2 hai, div_le_one_of_ge h.1 hai⟩\n      · rw [sup_eq_right.mpr hai, inf_eq_left.mpr hai] at h\n        exact ⟨div_nonneg h.1 hai, div_le_one_of_le h.2 hai⟩\n    · specialize h i\n      simp only [smul_eq_mul, Pi.mul_apply]\n      cases' eq_or_ne (a i) 0 with hai hai\n      · rw [hai, inf_idem, sup_idem, ← le_antisymm_iff] at h\n        rw [hai, ← h, zero_div, MulZeroClass.zero_mul]\n      · rw [div_mul_cancel _ hai]\n#align parallelepiped_single parallelepiped_single\n\n",
 "parallelepiped_orthonormal_basis_one_dim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n-- The parallelepiped associated to an orthonormal basis of `ℝ` is either `[0, 1]` or `[-1, 0]`.\ntheorem parallelepiped_orthonormal_basis_one_dim (b : orthonormal_basis ι (exprℝ) (exprℝ)) :\n    parallelepiped b = Icc 0 1 ∨ parallelepiped b = Icc (-1) 0 :=\n  by\n  have e : «expr ≃ » ι (Fin 1) := by\n    apply Fintype.equivFinOfCardEq\n    simp only [← finrank_eq_card_basis b.to_basis, finrank_self]\n  have B : parallelepiped (b.reindex e) = parallelepiped b :=\n    by\n    convert parallelepiped_comp_equiv b e.symm\n    ext i\n    simp only [orthonormal_basis.coe_reindex]\n  rw [← B]\n  let F : exprℝ → Fin 1 → exprℝ := fun t => fun i => t\n  have A : Icc (0 : Fin 1 → exprℝ) 1 = «expr '' » F (Icc (0 : exprℝ) 1) :=\n    by\n    apply subset.antisymm\n    · intro x hx\n      refine' ⟨x 0, ⟨hx.1 0, hx.2 0⟩, _⟩\n      ext j\n      simp only [subsingleton.elim j 0]\n    · rintro x ⟨y, hy, rfl⟩\n      exact ⟨fun j => hy.1, fun j => hy.2⟩\n  rcases orthonormal_basis_one_dim (b.reindex e) with (H | H)\n  · left\n    simp only [H, parallelepiped, Algebra.id.smul_eq_mul, mul_one, A, Finset.sum_singleton, ← image_comp, image_id',\n      Finset.univ_unique]\n  · right\n    simp only [H, parallelepiped, Algebra.id.smul_eq_mul, mul_one]\n    rw [A]\n    simp only [← image_comp, mul_neg, mul_one, Finset.sum_singleton, image_neg, preimage_neg_Icc, neg_zero,\n      Finset.univ_unique]\n#align parallelepiped_orthonormal_basis_one_dim parallelepiped_orthonormal_basis_one_dim\n\n",
 "parallelepiped_eq_sum_segment":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem parallelepiped_eq_sum_segment (v : ι → E) :\n    parallelepiped v =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (segment (exprℝ) 0 (v i)) :=\n  by\n  ext\n  simp only [mem_parallelepiped_iff, Set.mem_finset_sum, Finset.mem_univ, forall_true_left, segment_eq_image, smul_zero,\n    zero_add, ← Set.pi_univ_Icc, Set.mem_univ_pi]\n  constructor\n  · rintro ⟨t, ht, rfl⟩\n    exact ⟨«expr • » t v, fun i => ⟨t i, ht _, by simp⟩, rfl⟩\n  rintro ⟨g, hg, rfl⟩\n  change ∀ i, _ at hg\n  choose t ht hg using hg\n  refine' ⟨t, ht, _⟩\n  simp_rw [hg]\n#align parallelepiped_eq_sum_segment parallelepiped_eq_sum_segment\n\n",
 "parallelepiped_eq_convex_hull":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- A `parallelepiped` is the convex hull of its vertices -/\ntheorem parallelepiped_eq_convex_hull (v : ι → E) :\n    parallelepiped v =\n      convexHull (exprℝ)\n        (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          {(0 : E), v i}) :=\n  by\n  -- TODO: add `convex_hull_sum` to match `convex_hull_add`\n  let this : «expr →+ » (Set E) (Set E) :=\n    { to_fun := convexHull (exprℝ)\n      map_zero' := convexHull_singleton _\n      map_add' := convexHull_add }\n  simp_rw [parallelepiped_eq_sum_segment, ← convexHull_pair]\n  exact (this.map_sum _ _).symm\n#align parallelepiped_eq_convex_hull parallelepiped_eq_convex_hull\n\n",
 "parallelepiped_comp_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing a family of vectors does not change their parallelepiped. -/\n@[simp]\ntheorem parallelepiped_comp_equiv (v : ι → E) (e : «expr ≃ » ι' ι) : parallelepiped (v ∘ e) = parallelepiped v :=\n  by\n  simp only [parallelepiped]\n  let K : «expr ≃ » (ι' → exprℝ) (ι → exprℝ) := Equiv.piCongrLeft' (fun a : ι' => exprℝ) e\n  have : Icc (0 : ι → exprℝ) 1 = «expr '' » K (Icc (0 : ι' → exprℝ) 1) :=\n    by\n    rw [← Equiv.preimage_eq_iff_eq_image]\n    ext x\n    simp only [mem_preimage, mem_Icc, Pi.le_def, Pi.zero_apply, Equiv.piCongrLeft'_apply, Pi.one_apply]\n    refine' ⟨fun h => ⟨fun i => _, fun i => _⟩, fun h => ⟨fun i => h.1 (e.symm i), fun i => h.2 (e.symm i)⟩⟩\n    · simpa only [Equiv.symm_apply_apply] using h.1 (e i)\n    · simpa only [Equiv.symm_apply_apply] using h.2 (e i)\n  rw [this, ← image_comp]\n  congr 1 with x\n  simpa only [orthonormal_basis.coe_reindex, Function.comp_apply, Equiv.symm_apply_apply, Equiv.piCongrLeft'_apply,\n    Equiv.apply_symm_apply] using (e.symm.sum_comp fun i : ι' => «expr • » (x i) (v (e i))).symm\n#align parallelepiped_comp_equiv parallelepiped_comp_equiv\n\n",
 "mem_parallelepiped_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\ntheorem mem_parallelepiped_iff (v : ι → E) (x : E) :\n    x ∈ parallelepiped v ↔\n      ∃ (t : ι → exprℝ)(ht : t ∈ Icc (0 : ι → exprℝ) 1),\n        x =\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            («expr • » (t i) (v i)) :=\n  by simp [parallelepiped, eq_comm]\n#align mem_parallelepiped_iff mem_parallelepiped_iff\n\n",
 "image_parallelepiped":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_parallelepiped (f : «expr →ₗ[ ] » E (exprℝ) F) (v : ι → E) :\n    «expr '' » f (parallelepiped v) = parallelepiped (f ∘ v) :=\n  by\n  simp only [parallelepiped, ← image_comp]\n  congr 1 with t\n  simp only [Function.comp_apply, LinearMap.map_sum, LinearMap.map_smulₛₗ, RingHom.id_apply]\n#align image_parallelepiped image_parallelepiped\n\n",
 "convex_parallelepiped":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem convex_parallelepiped (v : ι → E) : Convex (exprℝ) (parallelepiped v) :=\n  by\n  rw [parallelepiped_eq_sum_segment]\n  -- TODO: add `convex.sum` to match `convex.add`\n  let this : AddSubmonoid (Set E) :=\n    { carrier := { s | Convex (exprℝ) s }\n      zero_mem' := convex_singleton _\n      add_mem' := fun x y => Convex.add }\n  exact this.sum_mem fun i hi => convex_segment _ _\n#align convex_parallelepiped convex_parallelepiped\n\n",
 "coe_measurable_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- This instance should not be necessary, but Lean has difficulties to find it in product\nsituations if we do not declare it explicitly. -/\n-- TODO: do we want these instances for `pi_Lp` too?\ntheorem coe_measurable_equiv : «expr⇑ » (euclidean_space.measurable_equiv ι) = pi_Lp.equiv 2 _ :=\n  rfl\n#align coe_measurable_equiv coe_measurable_equiv\n\n",
 "add_haar_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem basis.add_haar_self (b : Basis ι (exprℝ) E) : b.add_haar (parallelepiped b) = 1 :=\n  by\n  rw [basis.add_haar]\n  exact add_haar_measure_self\n#align basis.add_haar_self basis.add_haar_self\n\n"}