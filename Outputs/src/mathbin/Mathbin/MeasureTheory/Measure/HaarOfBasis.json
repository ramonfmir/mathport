{"parallelepiped_orthonormal_basis_one_dim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n-- The parallelepiped associated to an orthonormal basis of `ℝ` is either `[0, 1]` or `[-1, 0]`.\ntheorem parallelepiped_orthonormal_basis_one_dim (b : orthonormal_basis ι (exprℝ) (exprℝ)) :\n    parallelepiped b = Icc 0 1 ∨ parallelepiped b = Icc (-1) 0 :=\n  by\n  have e : «expr ≃ » ι (fin 1) := by\n    apply fintype.equiv_fin_of_card_eq\n    simp only [← finrank_eq_card_basis b.to_basis, finrank_self]\n  have B : parallelepiped (b.reindex e) = parallelepiped b :=\n    by\n    convert parallelepiped_comp_equiv b e.symm\n    ext i\n    simp only [orthonormal_basis.coe_reindex]\n  rw [← B]\n  let F : exprℝ → fin 1 → exprℝ := fun t => fun i => t\n  have A : Icc (0 : fin 1 → exprℝ) 1 = «expr '' » F (Icc (0 : exprℝ) 1) :=\n    by\n    apply subset.antisymm\n    · intro x hx\n      refine' ⟨x 0, ⟨hx.1 0, hx.2 0⟩, _⟩\n      ext j\n      simp only [subsingleton.elim j 0]\n    · rintro x ⟨y, hy, rfl⟩\n      exact ⟨fun j => hy.1, fun j => hy.2⟩\n  rcases orthonormal_basis_one_dim (b.reindex e) with (H | H)\n  · left\n    simp only [H, parallelepiped, algebra.id.smul_eq_mul, mul_one, A, finset.sum_singleton, ← image_comp, image_id',\n      finset.univ_unique]\n  · right\n    simp only [H, parallelepiped, algebra.id.smul_eq_mul, mul_one]\n    rw [A]\n    simp only [← image_comp, mul_neg, mul_one, finset.sum_singleton, image_neg, preimage_neg_Icc, neg_zero,\n      finset.univ_unique]\n#align parallelepiped_orthonormal_basis_one_dim parallelepiped_orthonormal_basis_one_dim\n\n",
 "parallelepiped_comp_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing a family of vectors does not change their parallelepiped. -/\n@[simp]\ntheorem parallelepiped_comp_equiv (v : ι → E) (e : «expr ≃ » ι' ι) : parallelepiped (v ∘ e) = parallelepiped v :=\n  by\n  simp only [parallelepiped]\n  let K : «expr ≃ » (ι' → exprℝ) (ι → exprℝ) := Equiv.piCongrLeft' (fun a : ι' => exprℝ) e\n  have : Icc (0 : ι → exprℝ) 1 = «expr '' » K (Icc (0 : ι' → exprℝ) 1) :=\n    by\n    rw [← Equiv.preimage_eq_iff_eq_image]\n    ext x\n    simp only [mem_preimage, mem_Icc, Pi.le_def, pi.zero_apply, equiv.Pi_congr_left'_apply, pi.one_apply]\n    refine' ⟨fun h => ⟨fun i => _, fun i => _⟩, fun h => ⟨fun i => h.1 (e.symm i), fun i => h.2 (e.symm i)⟩⟩\n    · simpa only [equiv.symm_apply_apply] using h.1 (e i)\n    · simpa only [equiv.symm_apply_apply] using h.2 (e i)\n  rw [this, ← image_comp]\n  congr 1 with x\n  simpa only [orthonormal_basis.coe_reindex, Function.comp_apply, equiv.symm_apply_apply, equiv.Pi_congr_left'_apply,\n    equiv.apply_symm_apply] using (e.symm.sum_comp fun i : ι' => «expr • » (x i) (v (e i))).symm\n#align parallelepiped_comp_equiv parallelepiped_comp_equiv\n\n",
 "mem_parallelepiped_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\ntheorem mem_parallelepiped_iff (v : ι → E) (x : E) :\n    x ∈ parallelepiped v ↔\n      ∃ (t : ι → exprℝ)(ht : t ∈ Icc (0 : ι → exprℝ) 1),\n        x =\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            («expr • » (t i) (v i)) :=\n  by simp [parallelepiped, eq_comm]\n#align mem_parallelepiped_iff mem_parallelepiped_iff\n\n",
 "image_parallelepiped":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_parallelepiped (f : «expr →ₗ[ ] » E (exprℝ) F) (v : ι → E) :\n    «expr '' » f (parallelepiped v) = parallelepiped (f ∘ v) :=\n  by\n  simp only [parallelepiped, ← image_comp]\n  congr 1 with t\n  simp only [Function.comp_apply, linear_map.map_sum, linear_map.map_smulₛₗ, RingHom.id_apply]\n#align image_parallelepiped image_parallelepiped\n\n",
 "add_haar_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem basis.add_haar_self (b : basis ι (exprℝ) E) : b.add_haar (parallelepiped b) = 1 :=\n  by\n  rw [basis.add_haar]\n  exact add_haar_measure_self\n#align basis.add_haar_self basis.add_haar_self\n\n"}