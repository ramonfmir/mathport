{"union_right_iff":
 "@[simp]\ntheorem union_right_iff : AEDisjoint μ s (t ∪ u) ↔ AEDisjoint μ s t ∧ AEDisjoint μ s u := by\n  simp [union_eq_Union, and_comm]\n#align union_right_iff union_right_iff\n\n",
 "union_right":
 "theorem union_right (ht : AEDisjoint μ s t) (hu : AEDisjoint μ s u) : AEDisjoint μ s (t ∪ u) :=\n  union_right_iff.2 ⟨ht, hu⟩\n#align union_right union_right\n\n",
 "union_left_iff":
 "@[simp]\ntheorem union_left_iff : AEDisjoint μ (s ∪ t) u ↔ AEDisjoint μ s u ∧ AEDisjoint μ t u := by\n  simp [union_eq_Union, and_comm]\n#align union_left_iff union_left_iff\n\n",
 "union_left":
 "theorem union_left (hs : AEDisjoint μ s u) (ht : AEDisjoint μ t u) : AEDisjoint μ (s ∪ t) u :=\n  union_left_iff.mpr ⟨hs, ht⟩\n#align union_left union_left\n\n",
 "symmetric":
 "protected theorem symmetric : symmetric (AEDisjoint μ) := fun s t h => h.symm\n#align symmetric symmetric\n\n",
 "symm":
 "#print symm /-\n@[symm]\nprotected theorem symm (h : AEDisjoint μ s t) : AEDisjoint μ t s := by rwa [ae_disjoint, inter_comm]\n#align symm symm\n-/\n\n",
 "of_null_right":
 "theorem of_null_right (h : μ t = 0) : AEDisjoint μ s t :=\n  measure_mono_null (inter_subset_right _ _) h\n#align of_null_right of_null_right\n\n",
 "of_null_left":
 "theorem of_null_left (h : μ s = 0) : AEDisjoint μ s t :=\n  (of_null_right h).symm\n#align of_null_left of_null_left\n\n",
 "mono_ae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\ntheorem mono_ae (h : AEDisjoint μ s t) (hu : «expr ≤ᵐ[ ] » u μ s) (hv : «expr ≤ᵐ[ ] » v μ t) : AEDisjoint μ u v :=\n  measure_mono_null_ae (hu.inter hv) h\n#align mono_ae mono_ae\n\n",
 "mono":
 "protected theorem mono (h : AEDisjoint μ s t) (hu : u ⊆ s) (hv : v ⊆ t) : AEDisjoint μ u v :=\n  h.mono_ae hu.eventually_le hv.eventually_le\n#align mono mono\n\n",
 "measure_diff_right":
 "theorem measure_diff_right (h : AEDisjoint μ s t) : μ (t \\ s) = μ t :=\n  measure_congr h.diff_ae_eq_right\n#align measure_diff_right measure_diff_right\n\n",
 "measure_diff_left":
 "theorem measure_diff_left (h : AEDisjoint μ s t) : μ (s \\ t) = μ s :=\n  measure_congr h.diff_ae_eq_left\n#align measure_diff_left measure_diff_left\n\n",
 "exists_null_pairwise_disjoint_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/-\nCopyright (c) 2022 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n/-- If `s : ι → set α` is a countable family of pairwise a.e. disjoint sets, then there exists a\nfamily of measurable null sets `t i` such that `s i \\ t i` are pairwise disjoint. -/\ntheorem exists_null_pairwise_disjoint_diff [Countable ι] {s : ι → Set α} (hd : Pairwise («expr on » (AEDisjoint μ) s)) :\n    ∃ t : ι → Set α,\n      (∀ i, MeasurableSet (t i)) ∧ (∀ i, μ (t i) = 0) ∧ Pairwise («expr on » Disjoint fun i => s i \\ t i) :=\n  by\n  refine'\n    ⟨fun i =>\n      to_measurable μ\n        (s i ∩ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s j)),\n      fun i => measurable_set_to_measurable _ _, fun i => _, _⟩\n  · simp only [measure_to_measurable, inter_Union]\n    exact (measure_bUnion_null_iff <| to_countable _).2 fun j hj => hd (ne.symm hj)\n  · simp only [Pairwise, disjoint_left, on_fun, mem_diff, not_and, and_imp, Classical.not_not]\n    intro i j hne x hi hU hj\n    replace hU :\n      x ∉ s i ∩ «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s j) :=\n      fun h => hU (subset_to_measurable _ _ h)\n    simp only [mem_inter_iff, mem_Union, not_and, not_exists] at hU\n    exact (hU hi j hne.symm hj).elim\n#align exists_null_pairwise_disjoint_diff exists_null_pairwise_disjoint_diff\n\n",
 "exists_disjoint_diff":
 "/-- If `s` and `t` are `μ`-a.e. disjoint, then `s \\ u` and `t` are disjoint for some measurable null\nset `u`. -/\ntheorem exists_disjoint_diff (h : AEDisjoint μ s t) : ∃ u, MeasurableSet u ∧ μ u = 0 ∧ Disjoint (s \\ u) t :=\n  ⟨toMeasurable μ (s ∩ t), measurableSet_toMeasurable _ _, (measure_toMeasurable _).trans h,\n    disjoint_sdiff_self_left.mono_left fun x hx => ⟨hx.1, fun hxt => hx.2 <| subset_toMeasurable _ _ ⟨hx.1, hxt⟩⟩⟩\n#align exists_disjoint_diff exists_disjoint_diff\n\n",
 "diff_ae_eq_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem diff_ae_eq_right (h : AEDisjoint μ s t) : «expr =ᵐ[ ] » (t \\ s : Set α) μ t :=\n  h.symm.diff_ae_eq_left\n#align diff_ae_eq_right diff_ae_eq_right\n\n",
 "diff_ae_eq_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem diff_ae_eq_left (h : AEDisjoint μ s t) : «expr =ᵐ[ ] » (s \\ t : Set α) μ s :=\n  @diff_self_inter _ s t ▸ diff_null_ae_eq_self h\n#align diff_ae_eq_left diff_ae_eq_left\n\n",
 "congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n#print congr /-\nprotected theorem congr (h : AEDisjoint μ s t) (hu : «expr =ᵐ[ ] » u μ s) (hv : «expr =ᵐ[ ] » v μ t) :\n    AEDisjoint μ u v :=\n  h.mono_ae (Filter.EventuallyEq.le hu) (Filter.EventuallyEq.le hv)\n#align congr congr\n-/\n\n",
 "comm":
 "#print comm /-\nprotected theorem comm : AEDisjoint μ s t ↔ AEDisjoint μ t s :=\n  ⟨fun h => h.symm, fun h => h.symm⟩\n#align comm comm\n-/\n\n",
 "ae_disjoint_compl_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem ae_disjoint_compl_right : AEDisjoint μ s («expr ᶜ» s) :=\n  (@disjoint_compl_right _ _ s).ae_disjoint\n#align ae_disjoint_compl_right ae_disjoint_compl_right\n\n",
 "ae_disjoint_compl_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem ae_disjoint_compl_left : AEDisjoint μ («expr ᶜ» s) s :=\n  (@disjoint_compl_left _ _ s).ae_disjoint\n#align ae_disjoint_compl_left ae_disjoint_compl_left\n\n",
 "ae_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n#print Set.PairwiseDisjoint.aedisjoint /-\nprotected theorem Set.PairwiseDisjoint.aedisjoint {f : ι → Set α} {s : Set ι} (hf : s.pairwise_disjoint f) :\n    s.pairwise («expr on » (AEDisjoint μ) f) :=\n  hf.mono' fun i j h => h.ae_disjoint\n#align set.pairwise_disjoint.ae_disjoint Set.PairwiseDisjoint.aedisjoint\n-/\n\n",
 "Union_right_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem Union_right_iff [Countable ι] {t : ι → Set α} :\n    AEDisjoint μ s\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i)) ↔\n      ∀ i, AEDisjoint μ s (t i) :=\n  by simp only [ae_disjoint, inter_Union, measure_Union_null_iff]\n#align Union_right_iff Union_right_iff\n\n",
 "Union_left_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem Union_left_iff [Countable ι] {s : ι → Set α} :\n    AEDisjoint μ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i))\n        t ↔\n      ∀ i, AEDisjoint μ (s i) t :=\n  by simp only [ae_disjoint, Union_inter, measure_Union_null_iff]\n#align Union_left_iff Union_left_iff\n\n",
 "Eq":
 "#print Eq /-\nprotected theorem Eq (h : AEDisjoint μ s t) : μ (s ∩ t) = 0 :=\n  h\n#align eq Eq\n-/\n\n"}