{"val_eq_to_measure":
 "@[simp]\ntheorem val_eq_to_measure (ν : probability_measure Ω) : ν.val = (ν : measure Ω) :=\n  rfl\n#align val_eq_to_measure val_eq_to_measure\n\n",
 "to_weak_dual_bcnn_continuous":
 "theorem to_weak_dual_bcnn_continuous : continuous fun μ : probability_measure Ω => μ.to_weak_dual_bcnn :=\n  finite_measure.to_weak_dual_bcnn_continuous.comp to_finite_measure_continuous\n#align to_weak_dual_bcnn_continuous to_weak_dual_bcnn_continuous\n\n",
 "to_weak_dual_bcnn_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n@[simp]\ntheorem to_weak_dual_bcnn_apply (μ : probability_measure Ω) (f : bounded_continuous_function Ω (nnreal)) :\n    μ.to_weak_dual_bcnn f =\n      («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω)\n          (μ : measure Ω)).to_nnreal :=\n  rfl\n#align to_weak_dual_bcnn_apply to_weak_dual_bcnn_apply\n\n",
 "to_finite_measure_normalize_eq_self":
 "@[simp]\ntheorem _root_.probability_measure.to_finite_measure_normalize_eq_self {m0 : measurable_space Ω}\n    (μ : probability_measure Ω) : μ.to_finite_measure.normalize = μ :=\n  by\n  apply probability_measure.eq_of_forall_apply_eq\n  intro s s_mble\n  rw [μ.to_finite_measure.normalize_eq_of_nonzero μ.to_finite_measure_nonzero s]\n  simp only [probability_measure.mass_to_finite_measure, inv_one, one_mul,\n    probability_measure.coe_fn_comp_to_finite_measure_eq_coe_fn]\n#align probability_measure.to_finite_measure_normalize_eq_self probability_measure.to_finite_measure_normalize_eq_self\n\n",
 "to_finite_measure_nonzero":
 "theorem to_finite_measure_nonzero (μ : probability_measure Ω) : μ.to_finite_measure ≠ 0 :=\n  by\n  rw [← finite_measure.mass_nonzero_iff, μ.mass_to_finite_measure]\n  exact one_ne_zero\n#align to_finite_measure_nonzero to_finite_measure_nonzero\n\n",
 "to_finite_measure_embedding":
 "-- The canonical mapping from probability measures to finite measures is an embedding.\ntheorem to_finite_measure_embedding (Ω : Type _) [measurable_space Ω] [topological_space Ω] [opens_measurable_space Ω] :\n    embedding (to_finite_measure : probability_measure Ω → finite_measure Ω) :=\n  { induced := rfl\n    inj := fun μ ν h => subtype.eq (by convert congr_arg coe h) }\n#align to_finite_measure_embedding to_finite_measure_embedding\n\n",
 "to_finite_measure_continuous":
 "theorem to_finite_measure_continuous : continuous (to_finite_measure : probability_measure Ω → finite_measure Ω) :=\n  continuous_induced_dom\n#align to_finite_measure_continuous to_finite_measure_continuous\n\n",
 "test_against_nn_lipschitz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_lipschitz (μ : probability_measure Ω) :\n    lipschitz_with 1 fun f : bounded_continuous_function Ω (nnreal) => μ.to_finite_measure.test_against_nn f :=\n  μ.mass_to_finite_measure ▸ μ.to_finite_measure.test_against_nn_lipschitz\n#align test_against_nn_lipschitz test_against_nn_lipschitz\n\n",
 "test_against_nn_eq_mass_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem test_against_nn_eq_mass_mul (f : bounded_continuous_function Ω (nnreal)) :\n    μ.test_against_nn f = μ.mass * μ.normalize.to_finite_measure.test_against_nn f :=\n  by\n  nth_rw 1 [μ.self_eq_mass_smul_normalize]\n  rw [μ.normalize.to_finite_measure.smul_test_against_nn_apply μ.mass f, smul_eq_mul]\n#align test_against_nn_eq_mass_mul test_against_nn_eq_mass_mul\n\n",
 "tendsto_test_against_nn_of_tendsto_normalize_test_against_nn_of_tendsto_mass":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_test_against_nn_of_tendsto_normalize_test_against_nn_of_tendsto_mass {γ : Type _} {F : filter γ}\n    {μs : γ → finite_measure Ω} (μs_lim : tendsto (fun i => (μs i).normalize) F ((nhds) μ.normalize))\n    (mass_lim : tendsto (fun i => (μs i).mass) F ((nhds) μ.mass)) (f : bounded_continuous_function Ω (nnreal)) :\n    tendsto (fun i => (μs i).test_against_nn f) F ((nhds) (μ.test_against_nn f)) :=\n  by\n  by_cases h_mass : μ.mass = 0\n  · simp only [μ.mass_zero_iff.mp h_mass, zero.test_against_nn_apply, zero.mass, eq_self_iff_true] at *\n    exact tendsto_zero_test_against_nn_of_tendsto_zero_mass mass_lim f\n  simp_rw [fun i => (μs i).test_against_nn_eq_mass_mul f, μ.test_against_nn_eq_mass_mul f]\n  rw [probability_measure.tendsto_nhds_iff_to_finite_measures_tendsto_nhds] at μs_lim\n  rw [tendsto_iff_forall_test_against_nn_tendsto] at μs_lim\n  have lim_pair :\n    tendsto (fun i => (⟨(μs i).mass, (μs i).normalize.to_finite_measure.test_against_nn f⟩ : nnreal × nnreal)) F\n      ((nhds) ⟨μ.mass, μ.normalize.to_finite_measure.test_against_nn f⟩) :=\n    (prod.tendsto_iff _ _).mpr ⟨mass_lim, μs_lim f⟩\n  exact tendsto_mul.comp lim_pair\n#align\n  tendsto_test_against_nn_of_tendsto_normalize_test_against_nn_of_tendsto_mass tendsto_test_against_nn_of_tendsto_normalize_test_against_nn_of_tendsto_mass\n\n",
 "tendsto_of_tendsto_normalize_test_against_nn_of_tendsto_mass":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If the normalized versions of finite measures converge weakly and their total masses\nalso converge, then the finite measures themselves converge weakly. -/\ntheorem tendsto_of_tendsto_normalize_test_against_nn_of_tendsto_mass {γ : Type _} {F : filter γ}\n    {μs : γ → finite_measure Ω} (μs_lim : tendsto (fun i => (μs i).normalize) F ((nhds) μ.normalize))\n    (mass_lim : tendsto (fun i => (μs i).mass) F ((nhds) μ.mass)) : tendsto μs F ((nhds) μ) :=\n  by\n  rw [tendsto_iff_forall_test_against_nn_tendsto]\n  exact fun f => tendsto_test_against_nn_of_tendsto_normalize_test_against_nn_of_tendsto_mass μs_lim mass_lim f\n#align\n  tendsto_of_tendsto_normalize_test_against_nn_of_tendsto_mass tendsto_of_tendsto_normalize_test_against_nn_of_tendsto_mass\n\n",
 "tendsto_normalize_test_against_nn_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_normalize_test_against_nn_of_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    (μs_lim : tendsto μs F ((nhds) μ)) (nonzero : μ ≠ 0) (f : bounded_continuous_function Ω (nnreal)) :\n    tendsto (fun i => (μs i).normalize.to_finite_measure.test_against_nn f) F\n      ((nhds) (μ.normalize.to_finite_measure.test_against_nn f)) :=\n  by\n  have lim_mass := μs_lim.mass\n  have aux : «expr ᶜ» {(0 : nnreal)} ∈ (nhds) μ.mass :=\n    is_open_compl_singleton.mem_nhds (μ.mass_nonzero_iff.mpr nonzero)\n  have eventually_nonzero :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" F\n      (μs i ≠ 0) :=\n    by\n    simp_rw [← mass_nonzero_iff]\n    exact lim_mass aux\n  have eve :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" F\n      ((μs i).normalize.to_finite_measure.test_against_nn f = (μs i).mass⁻¹ * (μs i).test_against_nn f) :=\n    by\n    filter_upwards [eventually_iff.mp eventually_nonzero]\n    intro i hi\n    apply normalize_test_against_nn _ hi\n  simp_rw [tendsto_congr' eve, μ.normalize_test_against_nn nonzero]\n  have lim_pair :\n    tendsto (fun i => (⟨(μs i).mass⁻¹, (μs i).test_against_nn f⟩ : nnreal × nnreal)) F\n      ((nhds) ⟨μ.mass⁻¹, μ.test_against_nn f⟩) :=\n    by\n    refine' (prod.tendsto_iff _ _).mpr ⟨_, _⟩\n    · exact (continuous_on_inv₀.continuous_at aux).tendsto.comp lim_mass\n    · exact tendsto_iff_forall_test_against_nn_tendsto.mp μs_lim f\n  exact tendsto_mul.comp lim_pair\n#align tendsto_normalize_test_against_nn_of_tendsto tendsto_normalize_test_against_nn_of_tendsto\n\n",
 "tendsto_normalize_of_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If finite measures themselves converge weakly to a nonzero limit measure, then their\nnormalized versions also converge weakly. -/\ntheorem tendsto_normalize_of_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω}\n    (μs_lim : tendsto μs F ((nhds) μ)) (nonzero : μ ≠ 0) : tendsto (fun i => (μs i).normalize) F ((nhds) μ.normalize) :=\n  by\n  rw [probability_measure.tendsto_nhds_iff_to_finite_measures_tendsto_nhds, tendsto_iff_forall_test_against_nn_tendsto]\n  exact fun f => tendsto_normalize_test_against_nn_of_tendsto μs_lim nonzero f\n#align tendsto_normalize_of_tendsto tendsto_normalize_of_tendsto\n\n",
 "tendsto_normalize_iff_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- The weak convergence of finite measures to a nonzero limit can be characterized by the weak\nconvergence of both their normalized versions (probability measures) and their total masses. -/\ntheorem tendsto_normalize_iff_tendsto {γ : Type _} {F : filter γ} {μs : γ → finite_measure Ω} (nonzero : μ ≠ 0) :\n    tendsto (fun i => (μs i).normalize) F ((nhds) μ.normalize) ∧ tendsto (fun i => (μs i).mass) F ((nhds) μ.mass) ↔\n      tendsto μs F ((nhds) μ) :=\n  by\n  constructor\n  · rintro ⟨normalized_lim, mass_lim⟩\n    exact tendsto_of_tendsto_normalize_test_against_nn_of_tendsto_mass normalized_lim mass_lim\n  · intro μs_lim\n    refine' ⟨tendsto_normalize_of_tendsto μs_lim nonzero, μs_lim.mass⟩\n#align tendsto_normalize_iff_tendsto tendsto_normalize_iff_tendsto\n\n",
 "tendsto_nhds_iff_to_finite_measures_tendsto_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_nhds_iff_to_finite_measures_tendsto_nhds {δ : Type _} (F : filter δ) {μs : δ → probability_measure Ω}\n    {μ₀ : probability_measure Ω} :\n    tendsto μs F ((nhds) μ₀) ↔ tendsto (to_finite_measure ∘ μs) F ((nhds) μ₀.to_finite_measure) :=\n  embedding.tendsto_nhds_iff (to_finite_measure_embedding Ω)\n#align tendsto_nhds_iff_to_finite_measures_tendsto_nhds tendsto_nhds_iff_to_finite_measures_tendsto_nhds\n\n",
 "tendsto_iff_forall_lintegral_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- A characterization of weak convergence of probability measures by the condition that the\nintegrals of every continuous bounded nonnegative function converge to the integral of the function\nagainst the limit measure. -/\ntheorem tendsto_iff_forall_lintegral_tendsto {γ : Type _} {F : filter γ} {μs : γ → probability_measure Ω}\n    {μ : probability_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔\n      ∀ f : bounded_continuous_function Ω (nnreal),\n        tendsto\n          (fun i =>\n            «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω)\n              (μs i : measure Ω))\n          F\n          ((nhds)\n            («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω)\n              (μ : measure Ω))) :=\n  by\n  rw [tendsto_nhds_iff_to_finite_measures_tendsto_nhds]\n  exact finite_measure.tendsto_iff_forall_lintegral_tendsto\n#align tendsto_iff_forall_lintegral_tendsto tendsto_iff_forall_lintegral_tendsto\n\n",
 "tendsto_iff_forall_integral_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- The characterization of weak convergence of probability measures by the usual (defining)\ncondition that the integrals of every continuous bounded function converge to the integral of the\nfunction against the limit measure. -/\ntheorem tendsto_iff_forall_integral_tendsto {γ : Type _} {F : filter γ} {μs : γ → probability_measure Ω}\n    {μ : probability_measure Ω} :\n    tendsto μs F ((nhds) μ) ↔\n      ∀ f : bounded_continuous_function Ω (exprℝ),\n        tendsto\n          (fun i =>\n            «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f ω)\n              (μs i : measure Ω))\n          F\n          ((nhds)\n            («expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f ω)\n              (μ : measure Ω))) :=\n  by\n  rw [tendsto_nhds_iff_to_finite_measures_tendsto_nhds]\n  rw [finite_measure.tendsto_iff_forall_integral_tendsto]\n  simp only [coe_comp_to_finite_measure_eq_coe]\n#align tendsto_iff_forall_integral_tendsto tendsto_iff_forall_integral_tendsto\n\n",
 "self_eq_mass_smul_normalize":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem self_eq_mass_smul_normalize : μ = «expr • » μ.mass μ.normalize.to_finite_measure :=\n  by\n  apply eq_of_forall_apply_eq\n  intro s s_mble\n  rw [μ.self_eq_mass_mul_normalize s, coe_fn_smul_apply, smul_eq_mul,\n    probability_measure.coe_fn_comp_to_finite_measure_eq_coe_fn]\n#align self_eq_mass_smul_normalize self_eq_mass_smul_normalize\n\n",
 "self_eq_mass_mul_normalize":
 "-- namespace\n-- section\n@[simp]\ntheorem self_eq_mass_mul_normalize (s : set Ω) : μ s = μ.mass * μ.normalize s :=\n  by\n  obtain rfl | h := eq_or_ne μ 0\n  · simp only [zero.mass, coe_fn_zero, pi.zero_apply, zero_mul]\n  have mass_nonzero : μ.mass ≠ 0 := by rwa [μ.mass_nonzero_iff]\n  simp only [normalize, dif_neg mass_nonzero, ennreal.to_nnreal_mul, subtype.coe_mk,\n    probability_measure.coe_fn_eq_to_nnreal_coe_fn_to_measure, ennreal.to_nnreal_coe,\n    measure_theory.measure.coe_nnreal_smul_apply, mul_inv_cancel_left₀ mass_nonzero,\n    finite_measure.coe_fn_eq_to_nnreal_coe_fn_to_measure]\n#align self_eq_mass_mul_normalize self_eq_mass_mul_normalize\n\n",
 "normalize_test_against_nn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem normalize_test_against_nn (nonzero : μ ≠ 0) (f : bounded_continuous_function Ω (nnreal)) :\n    μ.normalize.to_finite_measure.test_against_nn f = μ.mass⁻¹ * μ.test_against_nn f := by\n  simp [μ.test_against_nn_eq_mass_mul, μ.mass_nonzero_iff.mpr nonzero]\n#align normalize_test_against_nn normalize_test_against_nn\n\n",
 "normalize_eq_of_nonzero":
 "theorem normalize_eq_of_nonzero (nonzero : μ ≠ 0) (s : set Ω) : μ.normalize s = μ.mass⁻¹ * μ s := by\n  simp only [μ.self_eq_mass_mul_normalize, μ.mass_nonzero_iff.mpr nonzero, inv_mul_cancel_left₀, ne.def, not_false_iff]\n#align normalize_eq_of_nonzero normalize_eq_of_nonzero\n\n",
 "normalize_eq_inv_mass_smul_of_nonzero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem normalize_eq_inv_mass_smul_of_nonzero (nonzero : μ ≠ 0) :\n    μ.normalize.to_finite_measure = «expr • » μ.mass⁻¹ μ :=\n  by\n  nth_rw 3 [μ.self_eq_mass_smul_normalize]\n  rw [← smul_assoc]\n  simp only [μ.mass_nonzero_iff.mpr nonzero, algebra.id.smul_eq_mul, inv_mul_cancel, ne.def, not_false_iff, one_smul]\n#align normalize_eq_inv_mass_smul_of_nonzero normalize_eq_inv_mass_smul_of_nonzero\n\n",
 "nonempty_of_probability_measure":
 "theorem nonempty_of_probability_measure (μ : probability_measure Ω) : nonempty Ω :=\n  by\n  by_contra maybe_empty\n  have zero : (μ : measure Ω) univ = 0 := by rw [univ_eq_empty_iff.mpr (not_nonempty_iff.mp maybe_empty), measure_empty]\n  rw [measure_univ] at zero\n  exact zero_ne_one zero.symm\n#align nonempty_of_probability_measure nonempty_of_probability_measure\n\n",
 "mass_to_finite_measure":
 "@[simp]\ntheorem mass_to_finite_measure (μ : probability_measure Ω) : μ.to_finite_measure.mass = 1 :=\n  μ.coe_fn_univ\n#align mass_to_finite_measure mass_to_finite_measure\n\n",
 "eq_of_forall_measure_apply_eq":
 "@[ext]\ntheorem eq_of_forall_measure_apply_eq (μ ν : probability_measure Ω)\n    (h : ∀ s : set Ω, measurable_set s → (μ : measure Ω) s = (ν : measure Ω) s) : μ = ν :=\n  by\n  ext1\n  ext1 s s_mble\n  exact h s s_mble\n#align eq_of_forall_measure_apply_eq eq_of_forall_measure_apply_eq\n\n",
 "eq_of_forall_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem eq_of_forall_apply_eq (μ ν : probability_measure Ω) (h : ∀ s : set Ω, measurable_set s → μ s = ν s) : μ = ν :=\n  by\n  ext1 s s_mble\n  simpa [ennreal_coe_fn_eq_coe_fn_to_measure] using congr_arg (coe : nnreal → ennreal) (h s s_mble)\n#align eq_of_forall_apply_eq eq_of_forall_apply_eq\n\n",
 "ennreal_coe_fn_eq_coe_fn_to_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n@[simp]\ntheorem ennreal_coe_fn_eq_coe_fn_to_measure (ν : probability_measure Ω) (s : set Ω) :\n    (ν s : ennreal) = (ν : measure Ω) s := by\n  rw [← coe_fn_comp_to_finite_measure_eq_coe_fn, finite_measure.ennreal_coe_fn_eq_coe_fn_to_measure,\n    coe_comp_to_finite_measure_eq_coe]\n#align ennreal_coe_fn_eq_coe_fn_to_measure ennreal_coe_fn_eq_coe_fn_to_measure\n\n",
 "continuous_test_against_nn_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- Integration of (nonnegative bounded continuous) test functions against Borel probability\nmeasures depends continuously on the measure. -/\ntheorem continuous_test_against_nn_eval (f : bounded_continuous_function Ω (nnreal)) :\n    continuous fun μ : probability_measure Ω => μ.to_finite_measure.test_against_nn f :=\n  (finite_measure.continuous_test_against_nn_eval f).comp to_finite_measure_continuous\n#align continuous_test_against_nn_eval continuous_test_against_nn_eval\n\n",
 "coe_to_weak_dual_bcnn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_weak_dual_bcnn (μ : probability_measure Ω) :\n    «expr⇑ » μ.to_weak_dual_bcnn = μ.to_finite_measure.test_against_nn :=\n  rfl\n#align coe_to_weak_dual_bcnn coe_to_weak_dual_bcnn\n\n",
 "coe_normalize_eq_of_nonzero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem coe_normalize_eq_of_nonzero (nonzero : μ ≠ 0) : (μ.normalize : measure Ω) = «expr • » μ.mass⁻¹ μ :=\n  by\n  ext1 s s_mble\n  simp only [← μ.normalize.ennreal_coe_fn_eq_coe_fn_to_measure s, μ.normalize_eq_of_nonzero nonzero s, ennreal.coe_mul,\n    ennreal_coe_fn_eq_coe_fn_to_measure, measure.coe_nnreal_smul_apply]\n#align coe_normalize_eq_of_nonzero coe_normalize_eq_of_nonzero\n\n",
 "coe_injective":
 "theorem coe_injective : function.injective (coe : probability_measure Ω → measure Ω) :=\n  subtype.coe_injective\n#align coe_injective coe_injective\n\n",
 "coe_fn_univ_ne_zero":
 "theorem coe_fn_univ_ne_zero (ν : probability_measure Ω) : ν univ ≠ 0 := by\n  simp only [coe_fn_univ, ne.def, one_ne_zero, not_false_iff]\n#align coe_fn_univ_ne_zero coe_fn_univ_ne_zero\n\n",
 "coe_fn_univ":
 "@[simp]\ntheorem coe_fn_univ (ν : probability_measure Ω) : ν univ = 1 :=\n  congr_arg ennreal.to_nnreal ν.prop.measure_univ\n#align coe_fn_univ coe_fn_univ\n\n",
 "coe_fn_eq_to_nnreal_coe_fn_to_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/-\nCopyright (c) 2021 Kalle Kytölä. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kalle Kytölä\n-/\ntheorem coe_fn_eq_to_nnreal_coe_fn_to_measure (ν : probability_measure Ω) :\n    (ν : set Ω → nnreal) = fun s => ((ν : measure Ω) s).to_nnreal :=\n  rfl\n#align coe_fn_eq_to_nnreal_coe_fn_to_measure coe_fn_eq_to_nnreal_coe_fn_to_measure\n\n",
 "coe_fn_comp_to_finite_measure_eq_coe_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp]\ntheorem coe_fn_comp_to_finite_measure_eq_coe_fn (ν : probability_measure Ω) :\n    (ν.to_finite_measure : set Ω → nnreal) = (ν : set Ω → nnreal) :=\n  rfl\n#align coe_fn_comp_to_finite_measure_eq_coe_fn coe_fn_comp_to_finite_measure_eq_coe_fn\n\n",
 "coe_comp_to_finite_measure_eq_coe":
 "@[simp]\ntheorem coe_comp_to_finite_measure_eq_coe (ν : probability_measure Ω) :\n    (ν.to_finite_measure : measure Ω) = (ν : measure Ω) :=\n  rfl\n#align coe_comp_to_finite_measure_eq_coe coe_comp_to_finite_measure_eq_coe\n\n",
 "average_eq_integral_normalize":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- Averaging with respect to a finite measure is the same as integraing against\n`measure_theory.finite_measure.normalize`. -/\ntheorem average_eq_integral_normalize {E : Type _} [normed_add_comm_group E] [normed_space (exprℝ) E] [complete_space E]\n    (nonzero : μ ≠ 0) (f : Ω → E) :\n    average (μ : measure Ω) f =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f ω)\n        (μ.normalize : measure Ω) :=\n  by\n  rw [μ.coe_normalize_eq_of_nonzero nonzero, average]\n  congr\n  simp only [RingHom.toFun_eq_coe, ennreal.coe_of_nnreal_hom, ennreal.coe_inv (μ.mass_nonzero_iff.mpr nonzero),\n    ennreal_mass]\n#align average_eq_integral_normalize average_eq_integral_normalize\n\n",
 "apply_mono":
 "theorem apply_mono (μ : probability_measure Ω) {s₁ s₂ : set Ω} (h : s₁ ⊆ s₂) : μ s₁ ≤ μ s₂ :=\n  by\n  rw [← coe_fn_comp_to_finite_measure_eq_coe_fn]\n  exact measure_theory.finite_measure.apply_mono _ h\n#align apply_mono apply_mono\n\n"}