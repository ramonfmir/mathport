{"with_densityᵥ_rn_deriv_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector_measure.absolutely_continuous -/\ntheorem with_densityᵥ_rn_deriv_eq (s : signed_measure α) (μ : measure α) [sigma_finite μ]\n    (h : vector_measure.absolutely_continuous s μ.to_ennreal_vector_measure) : μ.with_densityᵥ (s.rn_deriv μ) = s :=\n  by\n  rw [absolutely_continuous_ennreal_iff, (_ : μ.to_ennreal_vector_measure.ennreal_to_measure = μ),\n    total_variation_absolutely_continuous_iff] at h\n  · ext1 i hi\n    rw [with_densityᵥ_apply (integrable_rn_deriv _ _) hi, rn_deriv, integral_sub,\n      with_density_rn_deriv_to_real_eq h.1 hi, with_density_rn_deriv_to_real_eq h.2 hi]\n    · conv_rhs => rw [← s.to_signed_measure_to_jordan_decomposition]\n      erw [vector_measure.sub_apply]\n      rw [to_signed_measure_apply_measurable hi, to_signed_measure_apply_measurable hi]\n    all_goals\n      rw [← integrable_on_univ]\n      refine' integrable_on.restrict _ measurable_set.univ\n      refine' ⟨_, has_finite_integral_to_real_of_lintegral_ne_top _⟩\n      · apply measurable.ae_strongly_measurable\n        measurability\n      · rw [set_lintegral_univ]\n        exact (lintegral_rn_deriv_lt_top _ _).ne\n  · exact equiv_measure.right_inv μ\n#align with_densityᵥ_rn_deriv_eq with_densityᵥ_rn_deriv_eq\n\n",
 "with_density_rn_deriv_to_real_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure.absolutely_continuous -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\ntheorem with_density_rn_deriv_to_real_eq {μ ν : measure α} [is_finite_measure μ] [have_lebesgue_decomposition μ ν]\n    (h : measure.absolutely_continuous μ ν) {i : set α} (hi : measurable_set i) :\n    «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" i\n        (μ.rn_deriv ν x).to_real ν =\n      (μ i).to_real :=\n  by\n  rw [integral_to_real, ← with_density_apply _ hi, with_density_rn_deriv_eq μ ν h]\n  · measurability\n  · refine' ae_lt_top (μ.measurable_rn_deriv ν) (lt_of_le_of_lt (lintegral_mono_set i.subset_univ) _).ne\n    rw [← with_density_apply _ measurable_set.univ, with_density_rn_deriv_eq μ ν h]\n    exact measure_lt_top _ _\n#align with_density_rn_deriv_to_real_eq with_density_rn_deriv_to_real_eq\n\n",
 "with_density_rn_deriv_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure.absolutely_continuous -/\n/-\nCopyright (c) 2021 Kexing Ying. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kexing Ying\n-/\ntheorem with_density_rn_deriv_eq (μ ν : measure α) [have_lebesgue_decomposition μ ν]\n    (h : measure.absolutely_continuous μ ν) : ν.with_density (rn_deriv μ ν) = μ :=\n  by\n  obtain ⟨hf₁, ⟨E, hE₁, hE₂, hE₃⟩, hadd⟩ := have_lebesgue_decomposition_spec μ ν\n  have : singular_part μ ν = 0 :=\n    by\n    refine' le_antisymm (fun A hA => _) (measure.zero_le _)\n    suffices singular_part μ ν Set.univ = 0\n      by\n      rw [measure.coe_zero, pi.zero_apply, ← this]\n      exact measure_mono (Set.subset_univ _)\n    rw [← measure_add_measure_compl hE₁, hE₂, zero_add]\n    have : (singular_part μ ν + ν.with_density (rn_deriv μ ν)) («expr ᶜ» E) = μ («expr ᶜ» E) := by rw [← hadd]\n    rw [measure.coe_add, pi.add_apply, h hE₃] at this\n    exact (add_eq_zero_iff.1 this).1\n  rw [this, zero_add] at hadd\n  exact hadd.symm\n#align with_density_rn_deriv_eq with_density_rn_deriv_eq\n\n",
 "absolutely_continuous_iff_with_densityᵥ_rn_deriv_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `vector_measure.absolutely_continuous -/\n/-- The Radon-Nikodym theorem for signed measures. -/\ntheorem absolutely_continuous_iff_with_densityᵥ_rn_deriv_eq (s : signed_measure α) (μ : measure α) [sigma_finite μ] :\n    vector_measure.absolutely_continuous s μ.to_ennreal_vector_measure ↔ μ.with_densityᵥ (s.rn_deriv μ) = s :=\n  ⟨with_densityᵥ_rn_deriv_eq s μ, fun h => h ▸ with_densityᵥ_absolutely_continuous _ _⟩\n#align absolutely_continuous_iff_with_densityᵥ_rn_deriv_eq absolutely_continuous_iff_with_densityᵥ_rn_deriv_eq\n\n",
 "absolutely_continuous_iff_with_density_rn_deriv_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure.absolutely_continuous -/\n/-- **The Radon-Nikodym theorem**: Given two measures `μ` and `ν`, if\n`have_lebesgue_decomposition μ ν`, then `μ` is absolutely continuous to `ν` if and only if\n`ν.with_density (rn_deriv μ ν) = μ`. -/\ntheorem absolutely_continuous_iff_with_density_rn_deriv_eq {μ ν : measure α} [have_lebesgue_decomposition μ ν] :\n    measure.absolutely_continuous μ ν ↔ ν.with_density (rn_deriv μ ν) = μ :=\n  ⟨with_density_rn_deriv_eq μ ν, fun h => h ▸ with_density_absolutely_continuous _ _⟩\n#align absolutely_continuous_iff_with_density_rn_deriv_eq absolutely_continuous_iff_with_density_rn_deriv_eq\n\n"}