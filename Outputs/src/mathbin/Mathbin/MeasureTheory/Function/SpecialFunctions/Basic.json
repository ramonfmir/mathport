{"sqrt":
 "@[measurability]\ntheorem measurable.sqrt : measurable fun x => sqrt (f x) :=\n  continuous_sqrt.measurable.comp hf\n#align measurable.sqrt measurable.sqrt\n\n",
 "sinh":
 "@[measurability]\ntheorem measurable.sinh : measurable fun x => real.sinh (f x) :=\n  real.measurable_sinh.comp hf\n#align measurable.sinh measurable.sinh\n\n",
 "sin":
 "@[measurability]\ntheorem measurable.sin : measurable fun x => real.sin (f x) :=\n  real.measurable_sin.comp hf\n#align measurable.sin measurable.sin\n\n",
 "re":
 "@[measurability]\ntheorem ae_measurable.re (hf : ae_measurable f μ) : ae_measurable (fun x => is_R_or_C.re (f x)) μ :=\n  is_R_or_C.measurable_re.comp_ae_measurable hf\n#align ae_measurable.re ae_measurable.re\n\n",
 "measurable_sinh":
 "@[measurability]\ntheorem measurable_sinh : measurable sinh :=\n  continuous_sinh.measurable\n#align measurable_sinh measurable_sinh\n\n",
 "measurable_sin":
 "@[measurability]\ntheorem measurable_sin : measurable sin :=\n  continuous_sin.measurable\n#align measurable_sin measurable_sin\n\n",
 "measurable_re":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[measurability]\ntheorem measurable_re : measurable (re : 𝕜 → exprℝ) :=\n  continuous_re.measurable\n#align measurable_re measurable_re\n\n",
 "measurable_of_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[measurability]\ntheorem is_R_or_C.measurable_of_real : measurable (coe : exprℝ → 𝕜) :=\n  is_R_or_C.continuous_of_real.measurable\n#align is_R_or_C.measurable_of_real is_R_or_C.measurable_of_real\n\n",
 "measurable_of_re_im":
 "theorem measurable_of_re_im (hre : measurable fun x => is_R_or_C.re (f x))\n    (him : measurable fun x => is_R_or_C.im (f x)) : measurable f :=\n  by\n  convert (is_R_or_C.measurable_of_real.comp hre).add ((is_R_or_C.measurable_of_real.comp him).mul_const is_R_or_C.I)\n  · ext1 x\n    exact (is_R_or_C.re_add_im _).symm\n  all_goals infer_instance\n#align measurable_of_re_im measurable_of_re_im\n\n",
 "measurable_log":
 "@[measurability]\ntheorem measurable_log : measurable log :=\n  (measurable_of_real.comp <| real.measurable_log.comp measurable_norm).add <|\n    (measurable_of_real.comp measurable_arg).mul_const I\n#align measurable_log measurable_log\n\n",
 "measurable_im":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[measurability]\ntheorem measurable_im : measurable (im : 𝕜 → exprℝ) :=\n  continuous_im.measurable\n#align measurable_im measurable_im\n\n",
 "measurable_exp":
 "@[measurability]\ntheorem measurable_exp : measurable exp :=\n  continuous_exp.measurable\n#align measurable_exp measurable_exp\n\n",
 "measurable_cosh":
 "@[measurability]\ntheorem measurable_cosh : measurable cosh :=\n  continuous_cosh.measurable\n#align measurable_cosh measurable_cosh\n\n",
 "measurable_cos":
 "@[measurability]\ntheorem measurable_cos : measurable cos :=\n  continuous_cos.measurable\n#align measurable_cos measurable_cos\n\n",
 "measurable_arg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[measurability]\ntheorem measurable_arg : measurable arg :=\n  have A : measurable fun x : exprℂ => real.arcsin (x.im / x.abs) :=\n    real.measurable_arcsin.comp (measurable_im.div measurable_norm)\n  have B : measurable fun x : exprℂ => real.arcsin ((-x).im / x.abs) :=\n    real.measurable_arcsin.comp ((measurable_im.comp measurable_neg).div measurable_norm)\n  measurable.ite (is_closed_le continuous_const continuous_re).measurable_set A <|\n    measurable.ite (is_closed_le continuous_const continuous_im).measurable_set (B.add_const _) (B.sub_const _)\n#align measurable_arg measurable_arg\n\n",
 "measurable_arcsin":
 "@[measurability]\ntheorem measurable_arcsin : measurable arcsin :=\n  continuous_arcsin.measurable\n#align measurable_arcsin measurable_arcsin\n\n",
 "measurable_arccos":
 "@[measurability]\ntheorem measurable_arccos : measurable arccos :=\n  continuous_arccos.measurable\n#align measurable_arccos measurable_arccos\n\n",
 "log":
 "@[measurability]\ntheorem measurable.log : measurable fun x => log (f x) :=\n  measurable_log.comp hf\n#align measurable.log measurable.log\n\n",
 "im":
 "@[measurability]\ntheorem ae_measurable.im (hf : ae_measurable f μ) : ae_measurable (fun x => is_R_or_C.im (f x)) μ :=\n  is_R_or_C.measurable_im.comp_ae_measurable hf\n#align ae_measurable.im ae_measurable.im\n\n",
 "exp":
 "@[measurability]\ntheorem measurable.exp : measurable fun x => real.exp (f x) :=\n  real.measurable_exp.comp hf\n#align measurable.exp measurable.exp\n\n",
 "csinh":
 "@[measurability]\ntheorem measurable.csinh : measurable fun x => complex.sinh (f x) :=\n  complex.measurable_sinh.comp hf\n#align measurable.csinh measurable.csinh\n\n",
 "csin":
 "@[measurability]\ntheorem measurable.csin : measurable fun x => complex.sin (f x) :=\n  complex.measurable_sin.comp hf\n#align measurable.csin measurable.csin\n\n",
 "cosh":
 "@[measurability]\ntheorem measurable.cosh : measurable fun x => real.cosh (f x) :=\n  real.measurable_cosh.comp hf\n#align measurable.cosh measurable.cosh\n\n",
 "cos":
 "@[measurability]\ntheorem measurable.cos : measurable fun x => real.cos (f x) :=\n  real.measurable_cos.comp hf\n#align measurable.cos measurable.cos\n\n",
 "clog":
 "@[measurability]\ntheorem measurable.clog : measurable fun x => log (f x) :=\n  measurable_log.comp hf\n#align measurable.clog measurable.clog\n\n",
 "cexp":
 "@[measurability]\ntheorem measurable.cexp : measurable fun x => complex.exp (f x) :=\n  complex.measurable_exp.comp hf\n#align measurable.cexp measurable.cexp\n\n",
 "ccosh":
 "@[measurability]\ntheorem measurable.ccosh : measurable fun x => complex.cosh (f x) :=\n  complex.measurable_cosh.comp hf\n#align measurable.ccosh measurable.ccosh\n\n",
 "ccos":
 "@[measurability]\ntheorem measurable.ccos : measurable fun x => complex.cos (f x) :=\n  complex.measurable_cos.comp hf\n#align measurable.ccos measurable.ccos\n\n",
 "carg":
 "@[measurability]\ntheorem measurable.carg : measurable fun x => arg (f x) :=\n  measurable_arg.comp hf\n#align measurable.carg measurable.carg\n\n",
 "ae_measurable_of_re_im":
 "theorem ae_measurable_of_re_im (hre : ae_measurable (fun x => is_R_or_C.re (f x)) μ)\n    (him : ae_measurable (fun x => is_R_or_C.im (f x)) μ) : ae_measurable f μ :=\n  by\n  convert\n    (is_R_or_C.measurable_of_real.comp_ae_measurable hre).add\n      ((is_R_or_C.measurable_of_real.comp_ae_measurable him).mul_const is_R_or_C.I)\n  · ext1 x\n    exact (is_R_or_C.re_add_im _).symm\n  all_goals infer_instance\n#align ae_measurable_of_re_im ae_measurable_of_re_im\n\n"}