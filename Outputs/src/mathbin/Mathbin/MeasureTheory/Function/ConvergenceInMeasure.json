{"tendsto_in_measure_of_tendsto_snorm_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- See also `measure_theory.tendsto_in_measure_of_tendsto_snorm` which work for general\nLp-convergence for all `p ≠ 0`. -/\ntheorem tendsto_in_measure_of_tendsto_snorm_top {E} [NormedAddCommGroup E] {f : ι → α → E} {g : α → E} {l : Filter ι}\n    (hfg : Tendsto (fun n => snorm (f n - g) (ennreal.top) μ) l ((nhds) 0)) : tendsto_in_measure μ f l g :=\n  by\n  intro δ hδ\n  simp only [snorm_exponent_top, snorm_ess_sup] at hfg\n  rw [ENNReal.tendsto_nhds_zero] at hfg⊢\n  intro ε hε\n  specialize hfg (ENNReal.ofReal δ / 2) (ENNReal.div_pos_iff.2 ⟨(ENNReal.ofReal_pos.2 hδ).ne.symm, ENNReal.two_ne_top⟩)\n  refine' hfg.mono fun n hn => _\n  simp only [true_and_iff, gt_iff_lt, ge_iff_le, zero_tsub, zero_le, zero_add, Set.mem_Icc, Pi.sub_apply] at *\n  have : ess_sup (fun x : α => («expr‖ ‖₊» (f n x - g x) : ennreal)) μ < ENNReal.ofReal δ :=\n    lt_of_le_of_lt hn (ENNReal.half_lt_self (ENNReal.ofReal_pos.2 hδ).ne.symm ennreal.of_real_lt_top.ne)\n  refine' ((le_of_eq _).trans (ae_lt_of_ess_sup_lt this).le).trans hε.le\n  congr with x\n  simp only [ENNReal.ofReal_le_iff_le_toReal ennreal.coe_lt_top.ne, ENNReal.coe_toReal, not_lt, coe_nnnorm,\n    Set.mem_setOf_eq, Set.mem_compl_iff]\n  rw [← dist_eq_norm (f n x) (g x)]\n  rfl\n#align tendsto_in_measure_of_tendsto_snorm_top tendsto_in_measure_of_tendsto_snorm_top\n\n",
 "tendsto_in_measure_of_tendsto_snorm_of_strongly_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- This lemma is superceded by `measure_theory.tendsto_in_measure_of_tendsto_snorm` where we\nallow `p = ∞` and only require `ae_strongly_measurable`. -/\ntheorem tendsto_in_measure_of_tendsto_snorm_of_strongly_measurable (hp_ne_zero : p ≠ 0) (hp_ne_top : p ≠ ennreal.top)\n    (hf : ∀ n, strongly_measurable (f n)) (hg : strongly_measurable g) {l : Filter ι}\n    (hfg : Tendsto (fun n => snorm (f n - g) p μ) l ((nhds) 0)) : tendsto_in_measure μ f l g :=\n  by\n  intro ε hε\n  replace hfg :=\n    ENNReal.Tendsto.const_mul (tendsto.ennrpow_const p.to_real hfg)\n      (or.inr <| @ENNReal.ofReal_ne_top (1 / ε ^ p.to_real))\n  simp only [MulZeroClass.mul_zero, ennreal.zero_rpow_of_pos (ENNReal.toReal_pos hp_ne_zero hp_ne_top)] at hfg\n  rw [ENNReal.tendsto_nhds_zero] at hfg⊢\n  intro δ hδ\n  refine' (hfg δ hδ).mono fun n hn => _\n  refine' le_trans _ hn\n  rw [ENNReal.ofReal_div_of_pos (real.rpow_pos_of_pos hε _), ENNReal.ofReal_one, mul_comm, mul_one_div,\n    ENNReal.le_div_iff_mul_le _ (or.inl ENNReal.ofReal_ne_top), mul_comm]\n  · convert mul_meas_ge_le_pow_snorm' μ hp_ne_zero hp_ne_top ((hf n).sub hg).ae_strongly_measurable (ENNReal.ofReal ε)\n    · exact (ennreal.of_real_rpow_of_pos hε).symm\n    · ext x\n      rw [dist_eq_norm, ← ENNReal.ofReal_le_ofReal_iff (norm_nonneg _), ofReal_norm_eq_coe_nnnorm]\n      exact iff.rfl\n  · rw [ne, ENNReal.ofReal_eq_zero, not_le]\n    exact or.inl (real.rpow_pos_of_pos hε _)\n#align tendsto_in_measure_of_tendsto_snorm_of_strongly_measurable tendsto_in_measure_of_tendsto_snorm_of_strongly_measurable\n\n",
 "tendsto_in_measure_of_tendsto_snorm_of_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- This lemma is superceded by `measure_theory.tendsto_in_measure_of_tendsto_snorm` where we\nallow `p = ∞`. -/\ntheorem tendsto_in_measure_of_tendsto_snorm_of_ne_top (hp_ne_zero : p ≠ 0) (hp_ne_top : p ≠ ennreal.top)\n    (hf : ∀ n, ae_strongly_measurable (f n) μ) (hg : ae_strongly_measurable g μ) {l : Filter ι}\n    (hfg : Tendsto (fun n => snorm (f n - g) p μ) l ((nhds) 0)) : tendsto_in_measure μ f l g :=\n  by\n  refine' tendsto_in_measure.congr (fun i => (hf i).ae_eq_mk.symm) hg.ae_eq_mk.symm _\n  refine'\n    tendsto_in_measure_of_tendsto_snorm_of_strongly_measurable hp_ne_zero hp_ne_top\n      (fun i => (hf i).strongly_measurable_mk) hg.strongly_measurable_mk _\n  have : (fun n => snorm ((hf n).mk (f n) - hg.mk g) p μ) = fun n => snorm (f n - g) p μ :=\n    by\n    ext1 n\n    refine' snorm_congr_ae (eventually_eq.sub (hf n).ae_eq_mk.symm hg.ae_eq_mk.symm)\n  rw [this]\n  exact hfg\n#align tendsto_in_measure_of_tendsto_snorm_of_ne_top tendsto_in_measure_of_tendsto_snorm_of_ne_top\n\n",
 "tendsto_in_measure_of_tendsto_snorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Convergence in Lp implies convergence in measure. -/\ntheorem tendsto_in_measure_of_tendsto_snorm {l : Filter ι} (hp_ne_zero : p ≠ 0)\n    (hf : ∀ n, ae_strongly_measurable (f n) μ) (hg : ae_strongly_measurable g μ)\n    (hfg : Tendsto (fun n => snorm (f n - g) p μ) l ((nhds) 0)) : tendsto_in_measure μ f l g :=\n  by\n  by_cases hp_ne_top : p = ennreal.top\n  · subst hp_ne_top\n    exact tendsto_in_measure_of_tendsto_snorm_top hfg\n  · exact tendsto_in_measure_of_tendsto_snorm_of_ne_top hp_ne_zero hp_ne_top hf hg hfg\n#align tendsto_in_measure_of_tendsto_snorm tendsto_in_measure_of_tendsto_snorm\n\n",
 "tendsto_in_measure_of_tendsto_ae_of_strongly_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Auxiliary lemma for `tendsto_in_measure_of_tendsto_ae`. -/\ntheorem tendsto_in_measure_of_tendsto_ae_of_strongly_measurable [FiniteMeasure μ] (hf : ∀ n, strongly_measurable (f n))\n    (hg : strongly_measurable g)\n    (hfg :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (Tendsto (fun n => f n x) atTop ((nhds) (g x)))) :\n    tendsto_in_measure μ f atTop g :=\n  by\n  refine' fun ε hε => ennreal.tendsto_at_top_zero.mpr fun δ hδ => _\n  by_cases hδi : δ = ennreal.top\n  · simp only [hδi, imp_true_iff, le_top, exists_const]\n  lift δ to nnreal using hδi\n  rw [gt_iff_lt, ENNReal.coe_pos, ← NNReal.coe_pos] at hδ\n  obtain ⟨t, htm, ht, hunif⟩ := tendsto_uniformly_on_of_ae_tendsto' hf hg hfg hδ\n  rw [ENNReal.ofReal_coe_nnreal] at ht\n  rw [Metric.tendstoUniformlyOn_iff] at hunif\n  obtain ⟨N, hN⟩ := eventually_at_top.1 (hunif ε hε)\n  refine' ⟨N, fun n hn => _⟩\n  suffices : { x : α | ε ≤ dist (f n x) (g x) } ⊆ t; exact (measure_mono this).trans ht\n  rw [← Set.compl_subset_compl]\n  intro x hx\n  rw [Set.mem_compl_iff, Set.nmem_setOf_iff, dist_comm, not_le]\n  exact hN n hn x hx\n#align tendsto_in_measure_of_tendsto_ae_of_strongly_measurable tendsto_in_measure_of_tendsto_ae_of_strongly_measurable\n\n",
 "tendsto_in_measure_of_tendsto_ae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Convergence a.e. implies convergence in measure in a finite measure space. -/\ntheorem tendsto_in_measure_of_tendsto_ae [FiniteMeasure μ] (hf : ∀ n, ae_strongly_measurable (f n) μ)\n    (hfg :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (Tendsto (fun n => f n x) atTop ((nhds) (g x)))) :\n    tendsto_in_measure μ f atTop g :=\n  by\n  have hg : ae_strongly_measurable g μ := ae_strongly_measurable_of_tendsto_ae _ hf hfg\n  refine' tendsto_in_measure.congr (fun i => (hf i).ae_eq_mk.symm) hg.ae_eq_mk.symm _\n  refine'\n    tendsto_in_measure_of_tendsto_ae_of_strongly_measurable (fun i => (hf i).strongly_measurable_mk)\n      hg.strongly_measurable_mk _\n  have hf_eq_ae :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (∀ n, (hf n).mk (f n) x = f n x) :=\n    ae_all_iff.mpr fun n => (hf n).ae_eq_mk.symm\n  filter_upwards [hf_eq_ae, hg.ae_eq_mk, hfg]with x hxf hxg hxfg\n  rw [← hxg, funext fun n => hxf n]\n  exact hxfg\n#align tendsto_in_measure_of_tendsto_ae tendsto_in_measure_of_tendsto_ae\n\n",
 "tendsto_in_measure_of_tendsto_Lp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Convergence in Lp implies convergence in measure. -/\ntheorem tendsto_in_measure_of_tendsto_Lp [hp : Fact (1 ≤ p)] {f : ι → Lp E p μ} {g : Lp E p μ} {l : Filter ι}\n    (hfg : Tendsto f l ((nhds) g)) : tendsto_in_measure μ (fun n => f n) l g :=\n  tendsto_in_measure_of_tendsto_snorm (zero_lt_one.trans_le hp.elim).ne.symm (fun n => Lp.ae_strongly_measurable _)\n    (Lp.ae_strongly_measurable _) ((Lp.tendsto_Lp_iff_tendsto_ℒp' _ _).mp hfg)\n#align tendsto_in_measure_of_tendsto_Lp tendsto_in_measure_of_tendsto_Lp\n\n",
 "tendsto_in_measure_iff_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-\nCopyright (c) 2022 Rémy Degenne, Kexing Ying. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Rémy Degenne, Kexing Ying\n-/\ntheorem tendsto_in_measure_iff_norm [SeminormedAddCommGroup E] {l : Filter ι} {f : ι → α → E} {g : α → E} :\n    tendsto_in_measure μ f l g ↔\n      ∀ (ε) (hε : 0 < ε), Tendsto (fun i => μ { x | ε ≤ «expr‖ ‖» (f i x - g x) }) l ((nhds) 0) :=\n  by simp_rw [tendsto_in_measure, dist_eq_norm]\n#align tendsto_in_measure_iff_norm tendsto_in_measure_iff_norm\n\n",
 "seq_tendsto_ae_seq_succ":
 "theorem seq_tendsto_ae_seq_succ (hfg : tendsto_in_measure μ f atTop g) {n : ℕ} :\n    seq_tendsto_ae_seq hfg (n + 1) = max (seq_tendsto_ae_seq_aux hfg (n + 1)) (seq_tendsto_ae_seq hfg n + 1) := by\n  rw [seq_tendsto_ae_seq]\n#align seq_tendsto_ae_seq_succ seq_tendsto_ae_seq_succ\n\n",
 "seq_tendsto_ae_seq_strict_mono":
 "theorem seq_tendsto_ae_seq_strict_mono (hfg : tendsto_in_measure μ f atTop g) : StrictMono (seq_tendsto_ae_seq hfg) :=\n  by\n  refine' strictMono_nat_of_lt_succ fun n => _\n  rw [seq_tendsto_ae_seq_succ]\n  exact lt_of_lt_of_le (lt_add_one <| seq_tendsto_ae_seq hfg n) (le_max_right _ _)\n#align seq_tendsto_ae_seq_strict_mono seq_tendsto_ae_seq_strict_mono\n\n",
 "seq_tendsto_ae_seq_spec":
 "theorem seq_tendsto_ae_seq_spec (hfg : tendsto_in_measure μ f atTop g) (n k : ℕ) (hn : seq_tendsto_ae_seq hfg n ≤ k) :\n    μ { x | 2⁻¹ ^ n ≤ dist (f k x) (g x) } ≤ 2⁻¹ ^ n := by\n  cases n\n  · exact Classical.choose_spec (exists_nat_measure_lt_two_inv hfg 0) k hn\n  · exact Classical.choose_spec (exists_nat_measure_lt_two_inv hfg _) _ (le_trans (le_max_left _ _) hn)\n#align seq_tendsto_ae_seq_spec seq_tendsto_ae_seq_spec\n\n",
 "exists_seq_tendsto_in_measure_at_top":
 "theorem tendsto_in_measure.exists_seq_tendsto_in_measure_at_top {u : Filter ι} [NeBot u] [IsCountablyGenerated u]\n    {f : ι → α → E} {g : α → E} (hfg : tendsto_in_measure μ f u g) :\n    ∃ ns : ℕ → ι, tendsto_in_measure μ (fun n => f (ns n)) atTop g :=\n  by\n  obtain ⟨ns, h_tendsto_ns⟩ : ∃ ns : ℕ → ι, tendsto ns at_top u := exists_seq_tendsto u\n  exact ⟨ns, fun ε hε => (hfg ε hε).comp h_tendsto_ns⟩\n#align tendsto_in_measure.exists_seq_tendsto_in_measure_at_top tendsto_in_measure.exists_seq_tendsto_in_measure_at_top\n\n",
 "exists_seq_tendsto_ae'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_in_measure.exists_seq_tendsto_ae' {u : Filter ι} [NeBot u] [IsCountablyGenerated u] {f : ι → α → E}\n    {g : α → E} (hfg : tendsto_in_measure μ f u g) :\n    ∃ ns : ℕ → ι,\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (Tendsto (fun i => f (ns i) x) atTop ((nhds) (g x))) :=\n  by\n  obtain ⟨ms, hms⟩ := hfg.exists_seq_tendsto_in_measure_at_top\n  obtain ⟨ns, -, hns⟩ := hms.exists_seq_tendsto_ae\n  exact ⟨ms ∘ ns, hns⟩\n#align tendsto_in_measure.exists_seq_tendsto_ae' tendsto_in_measure.exists_seq_tendsto_ae'\n\n",
 "exists_seq_tendsto_ae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `f` is a sequence of functions which converges in measure to `g`, then there exists a\nsubsequence of `f` which converges a.e. to `g`. -/\ntheorem tendsto_in_measure.exists_seq_tendsto_ae (hfg : tendsto_in_measure μ f atTop g) :\n    ∃ ns : ℕ → ℕ,\n      StrictMono ns ∧\n        «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n          (Tendsto (fun i => f (ns i) x) atTop ((nhds) (g x))) :=\n  by\n  /- Since `f` tends to `g` in measure, it has a subsequence `k ↦ f (ns k)` such that\n    `μ {|f (ns k) - g| ≥ 2⁻ᵏ} ≤ 2⁻ᵏ` for all `k`. Defining\n    `s := ⋂ k, ⋃ i ≥ k, {|f (ns k) - g| ≥ 2⁻ᵏ}`, we see that `μ s = 0` by the\n    first Borel-Cantelli lemma.\n  \n    On the other hand, as `s` is precisely the set for which `f (ns k)`\n    doesn't converge to `g`, `f (ns k)` converges almost everywhere to `g` as required. -/\n  have h_lt_ε_real : ∀ (ε : exprℝ) (hε : 0 < ε), ∃ k : ℕ, 2 * 2⁻¹ ^ k < ε :=\n    by\n    intro ε hε\n    obtain ⟨k, h_k⟩ : ∃ k : ℕ, 2⁻¹ ^ k < ε := exists_pow_lt_of_lt_one hε (by norm_num)\n    refine' ⟨k + 1, (le_of_eq _).trans_lt h_k⟩\n    rw [pow_add]\n    ring\n  set ns := exists_seq_tendsto_ae.seq_tendsto_ae_seq hfg\n  use ns\n  let S k := { x | 2⁻¹ ^ k ≤ dist (f (ns k) x) (g x) }\n  have hμS_le : ∀ k, μ (S k) ≤ 2⁻¹ ^ k := fun k => exists_seq_tendsto_ae.seq_tendsto_ae_seq_spec hfg k (ns k) le_rfl\n  set s := filter.at_top.limsup S with hs\n  have hμs : μ s = 0 :=\n    by\n    refine' measure_limsup_eq_zero (ne_of_lt <| lt_of_le_of_lt (ENNReal.tsum_le_tsum hμS_le) _)\n    simp only [ENNReal.tsum_geometric, ENNReal.one_sub_inv_two, inv_inv]\n    decide\n  have h_tendsto : ∀ x ∈ «expr ᶜ» s, tendsto (fun i => f (ns i) x) at_top ((nhds) (g x)) :=\n    by\n    refine' fun x hx => metric.tendsto_at_top.mpr fun ε hε => _\n    rw [hs, limsup_eq_infi_supr_of_nat] at hx\n    simp only [Set.supᵢ_eq_unionᵢ, Set.infᵢ_eq_interᵢ, Set.compl_interᵢ, Set.compl_unionᵢ, Set.mem_unionᵢ,\n      Set.mem_interᵢ, Set.mem_compl_iff, Set.mem_setOf_eq, not_le] at hx\n    obtain ⟨N, hNx⟩ := hx\n    obtain ⟨k, hk_lt_ε⟩ := h_lt_ε_real ε hε\n    refine' ⟨max N (k - 1), fun n hn_ge => lt_of_le_of_lt _ hk_lt_ε⟩\n    specialize hNx n ((le_max_left _ _).trans hn_ge)\n    have h_inv_n_le_k : (2 : exprℝ)⁻¹ ^ n ≤ 2 * 2⁻¹ ^ k :=\n      by\n      rw [mul_comm, ← inv_mul_le_iff' (zero_lt_two' (exprℝ))]\n      conv_lhs =>\n        congr\n        rw [← pow_one (2 : exprℝ)⁻¹]\n      rw [← pow_add, add_comm]\n      exact\n        pow_le_pow_of_le_one (one_div (2 : exprℝ) ▸ one_half_pos.le) (inv_le_one one_le_two)\n          ((le_tsub_add.trans (add_le_add_right (le_max_right _ _) 1)).trans (add_le_add_right hn_ge 1))\n    exact le_trans hNx.le h_inv_n_le_k\n  rw [ae_iff]\n  refine' ⟨exists_seq_tendsto_ae.seq_tendsto_ae_seq_strict_mono hfg, measure_mono_null (fun x => _) hμs⟩\n  rw [Set.mem_setOf_eq, ← @Classical.not_not (x ∈ s), not_imp_not]\n  exact h_tendsto x\n#align tendsto_in_measure.exists_seq_tendsto_ae tendsto_in_measure.exists_seq_tendsto_ae\n\n",
 "exists_nat_measure_lt_two_inv":
 "theorem exists_nat_measure_lt_two_inv (hfg : tendsto_in_measure μ f atTop g) (n : ℕ) :\n    ∃ N, ∀ m ≥ N, μ { x | 2⁻¹ ^ n ≤ dist (f m x) (g x) } ≤ 2⁻¹ ^ n :=\n  by\n  specialize hfg (2⁻¹ ^ n) (by simp only [zero_lt_bit0, pow_pos, zero_lt_one, inv_pos])\n  rw [ENNReal.tendsto_atTop_zero] at hfg\n  exact hfg (2⁻¹ ^ n) (pos_iff_ne_zero.mpr fun h_zero => by simpa using pow_eq_zero h_zero)\n#align exists_nat_measure_lt_two_inv exists_nat_measure_lt_two_inv\n\n",
 "congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem congr_right (h : «expr =ᵐ[ ] » g μ g') (h_tendsto : tendsto_in_measure μ f l g) : tendsto_in_measure μ f l g' :=\n  h_tendsto.congr (fun i => EventuallyEq.rfl) h\n#align congr_right congr_right\n\n",
 "congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\ntheorem congr_left (h : ∀ i, «expr =ᵐ[ ] » (f i) μ (f' i)) (h_tendsto : tendsto_in_measure μ f l g) :\n    tendsto_in_measure μ f' l g :=\n  h_tendsto.congr h EventuallyEq.rfl\n#align congr_left congr_left\n\n",
 "congr'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\nprotected theorem congr'\n    (h_left :\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" l\n        («expr =ᵐ[ ] » (f i) μ (f' i)))\n    (h_right : «expr =ᵐ[ ] » g μ g') (h_tendsto : tendsto_in_measure μ f l g) : tendsto_in_measure μ f' l g' :=\n  by\n  intro ε hε\n  suffices «expr =ᶠ[ ] » (fun i => μ { x | ε ≤ dist (f' i x) (g' x) }) l fun i => μ { x | ε ≤ dist (f i x) (g x) }\n    by\n    rw [tendsto_congr' this]\n    exact h_tendsto ε hε\n  filter_upwards [h_left]with i h_ae_eq\n  refine' measure_congr _\n  filter_upwards [h_ae_eq, h_right]with x hxf hxg\n  rw [eq_iff_iff]\n  change ε ≤ dist (f' i x) (g' x) ↔ ε ≤ dist (f i x) (g x)\n  rw [hxg, hxf]\n#align congr' congr'\n\n",
 "congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n#print congr /-\nprotected theorem congr (h_left : ∀ i, «expr =ᵐ[ ] » (f i) μ (f' i)) (h_right : «expr =ᵐ[ ] » g μ g')\n    (h_tendsto : tendsto_in_measure μ f l g) : tendsto_in_measure μ f' l g' :=\n  tendsto_in_measure.congr' (eventually_of_forall h_left) h_right h_tendsto\n#align congr congr\n-/\n\n",
 "ae_measurable":
 "theorem tendsto_in_measure.ae_measurable {u : Filter ι} [NeBot u] [IsCountablyGenerated u] {f : ι → α → E} {g : α → E}\n    (hf : ∀ n, AEMeasurable (f n) μ) (h_tendsto : tendsto_in_measure μ f u g) : AEMeasurable g μ :=\n  by\n  obtain ⟨ns, hns⟩ := h_tendsto.exists_seq_tendsto_ae'\n  exact ae_measurable_of_tendsto_metrizable_ae at_top (fun n => hf (ns n)) hns\n#align tendsto_in_measure.ae_measurable tendsto_in_measure.ae_measurable\n\n"}