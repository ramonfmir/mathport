{"mul_continuous_on_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem integrable_on.mul_continuous_on_of_subset (hg : integrable_on g A μ) (hg' : continuous_on g' K)\n    (hA : measurable_set A) (hK : is_compact K) (hAK : A ⊆ K) : integrable_on (fun x => g x * g' x) A μ :=\n  by\n  rcases is_compact.exists_bound_of_continuous_on hK hg' with ⟨C, hC⟩\n  rw [integrable_on, ← mem_ℒp_one_iff_integrable] at hg⊢\n  have :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" (μ.restrict A)\n      («expr‖ ‖» (g x * g' x) ≤ C * «expr‖ ‖» (g x)) :=\n    by\n    filter_upwards [ae_restrict_mem hA] with x hx\n    refine' (norm_mul_le _ _).trans _\n    rw [mul_comm]\n    apply mul_le_mul_of_nonneg_right (hC x (hAK hx)) (norm_nonneg _)\n  exact mem_ℒp.of_le_mul hg (hg.ae_strongly_measurable.mul <| (hg'.mono hAK).ae_strongly_measurable hA) this\n#align integrable_on.mul_continuous_on_of_subset integrable_on.mul_continuous_on_of_subset\n\n",
 "mul_continuous_on":
 "theorem integrable_on.mul_continuous_on [t2_space X] (hg : integrable_on g K μ) (hg' : continuous_on g' K)\n    (hK : is_compact K) : integrable_on (fun x => g x * g' x) K μ :=\n  hg.mul_continuous_on_of_subset hg' hK.measurable_set hK (Subset.refl _)\n#align integrable_on.mul_continuous_on integrable_on.mul_continuous_on\n\n",
 "locally_integrable_map_homeomorph":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem locally_integrable_map_homeomorph [borel_space X] [borel_space Y] (e : «expr ≃ₜ » X Y) {f : Y → E}\n    {μ : measure X} : locally_integrable f (measure.map e μ) ↔ locally_integrable (f ∘ e) μ :=\n  by\n  refine' ⟨fun h x => _, fun h x => _⟩\n  · rcases h (e x) with ⟨U, hU, h'U⟩\n    refine' ⟨«expr ⁻¹' » e U, e.continuous.continuous_at.preimage_mem_nhds hU, _⟩\n    exact (integrable_on_map_equiv e.to_measurable_equiv).1 h'U\n  · rcases h (e.symm x) with ⟨U, hU, h'U⟩\n    refine' ⟨«expr ⁻¹' » e.symm U, e.symm.continuous.continuous_at.preimage_mem_nhds hU, _⟩\n    apply (integrable_on_map_equiv e.to_measurable_equiv).2\n    simp only [homeomorph.to_measurable_equiv_coe]\n    convert h'U\n    ext x\n    simp only [mem_preimage, homeomorph.symm_apply_apply]\n#align locally_integrable_map_homeomorph locally_integrable_map_homeomorph\n\n",
 "locally_integrable_iff":
 "theorem locally_integrable_iff [locally_compact_space X] :\n    locally_integrable f μ ↔ ∀ k : set X, is_compact k → integrable_on f k μ :=\n  by\n  refine' ⟨fun hf k hk => hf.integrable_on_is_compact hk, fun hf x => _⟩\n  obtain ⟨K, hK, h2K⟩ := exists_compact_mem_nhds x\n  exact ⟨K, h2K, hf K hK⟩\n#align locally_integrable_iff locally_integrable_iff\n\n",
 "locally_integrable_const":
 "theorem locally_integrable_const [is_locally_finite_measure μ] (c : E) : locally_integrable (fun x => c) μ :=\n  by\n  intro x\n  rcases μ.finite_at_nhds x with ⟨U, hU, h'U⟩\n  refine' ⟨U, hU, _⟩\n  simp only [h'U, integrable_on_const, or_true_iff]\n#align locally_integrable_const locally_integrable_const\n\n",
 "locally_integrable":
 "theorem antitone.locally_integrable [is_locally_finite_measure μ] (hanti : antitone f) : locally_integrable f μ :=\n  hanti.dual_right.locally_integrable\n#align antitone.locally_integrable antitone.locally_integrable\n\n",
 "integrable_on_uIoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprΙ -/\ntheorem continuous.integrable_on_uIoc [linear_order X] [compact_Icc_space X] (hf : continuous f) :\n    integrable_on f ((exprΙ) a b) μ :=\n  hf.integrable_on_Ioc\n#align continuous.integrable_on_uIoc continuous.integrable_on_uIoc\n\n",
 "integrable_on_uIcc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem continuous.integrable_on_uIcc [linear_order X] [compact_Icc_space X] (hf : continuous f) :\n    integrable_on f (set.uIcc a b) μ :=\n  hf.integrable_on_Icc\n#align continuous.integrable_on_uIcc continuous.integrable_on_uIcc\n\n",
 "integrable_on_of_nhds_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- If a function is integrable at `𝓝[s] x` for each point `x` of a compact set `s`, then it is\nintegrable on `s`. -/\ntheorem is_compact.integrable_on_of_nhds_within {K : set X} (hK : is_compact K)\n    (hf : ∀ x ∈ K, integrable_at_filter f (nhds_within K x) μ) : integrable_on f K μ :=\n  is_compact.induction_on hK integrable_on_empty (fun s t hst ht => ht.mono_set hst) (fun s t hs ht => hs.union ht) hf\n#align is_compact.integrable_on_of_nhds_within is_compact.integrable_on_of_nhds_within\n\n",
 "integrable_on_of_measure_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem antitone_on.integrable_on_of_measure_ne_top (hanti : antitone_on f s) {a b : X} (ha : IsLeast s a)\n    (hb : IsGreatest s b) (hs : μ s ≠ ennreal.top) (h's : measurable_set s) : integrable_on f s μ :=\n  hanti.dual_right.integrable_on_of_measure_ne_top ha hb hs h's\n#align antitone_on.integrable_on_of_measure_ne_top antitone_on.integrable_on_of_measure_ne_top\n\n",
 "integrable_on_nhds_is_compact":
 "/-- If a function is locally integrable, then it is integrable on an open neighborhood of any\ncompact set. -/\ntheorem locally_integrable.integrable_on_nhds_is_compact (hf : locally_integrable f μ) {k : set X} (hk : is_compact k) :\n    ∃ u, is_open u ∧ k ⊆ u ∧ integrable_on f u μ :=\n  by\n  refine' is_compact.induction_on hk _ _ _ _\n  · refine' ⟨∅, is_open_empty, subset.rfl, integrable_on_empty⟩\n  · rintro s t hst ⟨u, u_open, tu, hu⟩\n    exact ⟨u, u_open, hst.trans tu, hu⟩\n  · rintro s t ⟨u, u_open, su, hu⟩ ⟨v, v_open, tv, hv⟩\n    exact ⟨u ∪ v, u_open.union v_open, union_subset_union su tv, hu.union hv⟩\n  · intro x hx\n    rcases hf x with ⟨u, ux, hu⟩\n    rcases mem_nhds_iff.1 ux with ⟨v, vu, v_open, xv⟩\n    exact ⟨v, nhds_within_le_nhds (v_open.mem_nhds xv), v, v_open, subset.rfl, hu.mono_set vu⟩\n#align locally_integrable.integrable_on_nhds_is_compact locally_integrable.integrable_on_nhds_is_compact\n\n",
 "integrable_on_is_compact":
 "theorem antione_on.integrable_on_is_compact [is_finite_measure_on_compacts μ] (hs : is_compact s)\n    (hanti : antitone_on f s) : integrable_on f s μ :=\n  hanti.dual_right.integrable_on_is_compact hs\n#align antione_on.integrable_on_is_compact antione_on.integrable_on_is_compact\n\n",
 "integrable_on_compact":
 "/-- A function `f` continuous on a compact set `K` is integrable on this set with respect to any\nlocally finite measure. -/\ntheorem continuous_on.integrable_on_compact (hK : is_compact K) (hf : continuous_on f K) : integrable_on f K μ :=\n  by\n  letI := metrizable_space_metric X\n  apply hK.integrable_on_of_nhds_within fun x hx => _\n  exact hf.integrable_at_nhds_within_of_is_separable hK.measurable_set hK.is_separable hx\n#align continuous_on.integrable_on_compact continuous_on.integrable_on_compact\n\n",
 "integrable_on_Ioc":
 "theorem continuous.integrable_on_Ioc [preorder X] [compact_Icc_space X] (hf : continuous f) :\n    integrable_on f (Ioc a b) μ :=\n  hf.integrable_on_Icc.mono_set Ioc_subset_Icc_self\n#align continuous.integrable_on_Ioc continuous.integrable_on_Ioc\n\n",
 "integrable_on_Icc":
 "theorem continuous.integrable_on_Icc [preorder X] [compact_Icc_space X] (hf : continuous f) :\n    integrable_on f (Icc a b) μ :=\n  hf.continuous_on.integrable_on_Icc\n#align continuous.integrable_on_Icc continuous.integrable_on_Icc\n\n",
 "integrable_of_has_compact_support":
 "/-- A continuous function with compact support is integrable on the whole space. -/\ntheorem continuous.integrable_of_has_compact_support (hf : continuous f) (hcf : has_compact_support f) :\n    integrable f μ :=\n  (integrable_on_iff_integrable_of_support_subset (subset_tsupport f) measurable_set_closure).mp <|\n    hf.continuous_on.integrable_on_compact hcf\n#align continuous.integrable_of_has_compact_support continuous.integrable_of_has_compact_support\n\n",
 "indicator":
 "theorem locally_integrable.indicator (hf : locally_integrable f μ) {s : set X} (hs : measurable_set s) :\n    locally_integrable (s.indicator f) μ := by\n  intro x\n  rcases hf x with ⟨U, hU, h'U⟩\n  exact ⟨U, hU, h'U.indicator hs⟩\n#align locally_integrable.indicator locally_integrable.indicator\n\n",
 "continuous_on_mul_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem integrable_on.continuous_on_mul_of_subset (hg : continuous_on g K) (hg' : integrable_on g' A μ)\n    (hK : is_compact K) (hA : measurable_set A) (hAK : A ⊆ K) : integrable_on (fun x => g x * g' x) A μ :=\n  by\n  rcases is_compact.exists_bound_of_continuous_on hK hg with ⟨C, hC⟩\n  rw [integrable_on, ← mem_ℒp_one_iff_integrable] at hg'⊢\n  have :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" (μ.restrict A)\n      («expr‖ ‖» (g x * g' x) ≤ C * «expr‖ ‖» (g' x)) :=\n    by\n    filter_upwards [ae_restrict_mem hA] with x hx\n    refine' (norm_mul_le _ _).trans _\n    apply mul_le_mul_of_nonneg_right (hC x (hAK hx)) (norm_nonneg _)\n  exact mem_ℒp.of_le_mul hg' (((hg.mono hAK).ae_strongly_measurable hA).mul hg'.ae_strongly_measurable) this\n#align integrable_on.continuous_on_mul_of_subset integrable_on.continuous_on_mul_of_subset\n\n",
 "continuous_on_mul":
 "theorem integrable_on.continuous_on_mul [t2_space X] (hg : continuous_on g K) (hg' : integrable_on g' K μ)\n    (hK : is_compact K) : integrable_on (fun x => g x * g' x) K μ :=\n  hg'.continuous_on_mul_of_subset hg hK hK.measurable_set Subset.rfl\n#align integrable_on.continuous_on_mul integrable_on.continuous_on_mul\n\n",
 "ae_strongly_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem locally_integrable.ae_strongly_measurable [second_countable_topology X] (hf : locally_integrable f μ) :\n    ae_strongly_measurable f μ :=\n  by\n  have : ∀ x, ∃ u, is_open u ∧ x ∈ u ∧ integrable_on f u μ :=\n    by\n    intro x\n    rcases hf x with ⟨s, hs, h's⟩\n    rcases mem_nhds_iff.1 hs with ⟨u, us, u_open, xu⟩\n    exact ⟨u, u_open, xu, h's.mono_set us⟩\n  choose u u_open xu hu using this\n  obtain ⟨T, T_count, hT⟩ :\n    ∃ T : set X,\n      T.countable ∧\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (u i) = univ :=\n    by\n    have :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (u x) = univ :=\n      eq_univ_of_forall fun x => mem_Union_of_mem x (xu x)\n    rw [← this]\n    simp only [Union_coe_set, subtype.coe_mk]\n    exact is_open_Union_countable u u_open\n  have : countable T := countable_coe_iff.mpr T_count\n  rw [← @restrict_univ _ _ μ, ← hT, ae_strongly_measurable_Union_iff]\n  exact fun i => (hu i).ae_strongly_measurable\n#align locally_integrable.ae_strongly_measurable locally_integrable.ae_strongly_measurable\n\n"}