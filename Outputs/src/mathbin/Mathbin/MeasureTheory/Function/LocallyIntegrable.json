{"smul_continuous_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_continuous_on [LocallyCompactSpace X] [T2Space X] {𝕜 : Type _} [NormedField 𝕜]\n    [second_countable_topology_either X E] [NormedSpace 𝕜 E] {f : X → 𝕜} {g : X → E} {s : Set X} (hs : IsOpen s)\n    (hf : locally_integrable_on f s μ) (hg : ContinuousOn g s) :\n    locally_integrable_on (fun x => «expr • » (f x) (g x)) s μ :=\n  by\n  rw [measure_theory.locally_integrable_on_iff (or.inr hs)] at hf⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).smul_continuous_on (hg.mono hk_sub) hk_c\n#align smul_continuous_on smul_continuous_on\n\n",
 "norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem locally_integrable_on.norm (hf : locally_integrable_on f s μ) :\n    locally_integrable_on (fun x => «expr‖ ‖» (f x)) s μ := fun t ht =>\n  let ⟨U, hU_nhd, hU_int⟩ := hf t ht\n  ⟨U, hU_nhd, hU_int.norm⟩\n#align locally_integrable_on.norm locally_integrable_on.norm\n\n",
 "mul_continuous_on_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem integrable_on.mul_continuous_on_of_subset (hg : integrable_on g A μ) (hg' : ContinuousOn g' K)\n    (hA : MeasurableSet A) (hK : IsCompact K) (hAK : A ⊆ K) : integrable_on (fun x => g x * g' x) A μ :=\n  by\n  rcases IsCompact.exists_bound_of_continuousOn hK hg' with ⟨C, hC⟩\n  rw [integrable_on, ← mem_ℒp_one_iff_integrable] at hg⊢\n  have :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" (μ.restrict A)\n      («expr‖ ‖» (g x * g' x) ≤ C * «expr‖ ‖» (g x)) :=\n    by\n    filter_upwards [ae_restrict_mem hA]with x hx\n    refine' (norm_mul_le _ _).trans _\n    rw [mul_comm]\n    apply mul_le_mul_of_nonneg_right (hC x (hAK hx)) (norm_nonneg _)\n  exact mem_ℒp.of_le_mul hg (hg.ae_strongly_measurable.mul <| (hg'.mono hAK).ae_strongly_measurable hA) this\n#align integrable_on.mul_continuous_on_of_subset integrable_on.mul_continuous_on_of_subset\n\n",
 "mul_continuous_on":
 "theorem mul_continuous_on [LocallyCompactSpace X] [T2Space X] [NormedRing R] [second_countable_topology_either X R]\n    {f g : X → R} {s : Set X} (hf : locally_integrable_on f s μ) (hg : ContinuousOn g s) (hs : IsOpen s) :\n    locally_integrable_on (fun x => f x * g x) s μ :=\n  by\n  rw [measure_theory.locally_integrable_on_iff (or.inr hs)] at hf⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).mul_continuous_on (hg.mono hk_sub) hk_c\n#align mul_continuous_on mul_continuous_on\n\n",
 "mono":
 "/-\nCopyright (c) 2022 Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn\n-/\ntheorem locally_integrable_on.mono (hf : measure_theory.locally_integrable_on f s μ) {t : Set X} (hst : t ⊆ s) :\n    locally_integrable_on f t μ := fun x hx => (hf x <| hst hx).filter_mono (nhdsWithin_mono x hst)\n#align locally_integrable_on.mono locally_integrable_on.mono\n\n",
 "locally_integrable_on_univ":
 "theorem locally_integrable_on_univ : locally_integrable_on f univ μ ↔ locally_integrable f μ := by\n  simpa only [locally_integrable_on, nhdsWithin_univ, mem_univ, true_imp_iff]\n#align locally_integrable_on_univ locally_integrable_on_univ\n\n",
 "locally_integrable_on_of_locally_integrable_restrict":
 "/-- If `f` is locally integrable with respect to `μ.restrict s`, it is locally integrable on `s`.\n(See `locally_integrable_on_iff_locally_integrable_restrict` for an iff statement when `s` is\nclosed.) -/\ntheorem locally_integrable_on_of_locally_integrable_restrict [opens_measurable_space X]\n    (hf : locally_integrable f (μ.restrict s)) : locally_integrable_on f s μ :=\n  by\n  intro x hx\n  obtain ⟨t, ht_mem, ht_int⟩ := hf x\n  obtain ⟨u, hu_sub, hu_o, hu_mem⟩ := mem_nhds_iff.mp ht_mem\n  refine' ⟨_, inter_mem_nhdsWithin s (hu_o.mem_nhds hu_mem), _⟩\n  simpa only [integrable_on, measure.restrict_restrict hu_o.measurable_set, inter_comm] using ht_int.mono_set hu_sub\n#align locally_integrable_on_of_locally_integrable_restrict locally_integrable_on_of_locally_integrable_restrict\n\n",
 "locally_integrable_on_iff_locally_integrable_restrict":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-- If `s` is closed, being locally integrable on `s` wrt `μ` is equivalent to being locally\nintegrable with respect to `μ.restrict s`. For the one-way implication without assuming `s` closed,\nsee `locally_integrable_on_of_locally_integrable_restrict`. -/\ntheorem locally_integrable_on_iff_locally_integrable_restrict [opens_measurable_space X] (hs : IsClosed s) :\n    locally_integrable_on f s μ ↔ locally_integrable f (μ.restrict s) :=\n  by\n  refine' ⟨fun hf x => _, locally_integrable_on_of_locally_integrable_restrict⟩\n  by_cases h : x ∈ s\n  · obtain ⟨t, ht_nhds, ht_int⟩ := hf x h\n    obtain ⟨u, hu_o, hu_x, hu_sub⟩ := mem_nhds_within.mp ht_nhds\n    refine' ⟨u, hu_o.mem_nhds hu_x, _⟩\n    rw [integrable_on, restrict_restrict hu_o.measurable_set]\n    exact ht_int.mono_set hu_sub\n  · rw [← isOpen_compl_iff] at hs\n    refine' ⟨«expr ᶜ» s, hs.mem_nhds h, _⟩\n    rw [integrable_on, restrict_restrict, inter_comm, inter_compl_self, ← integrable_on]\n    exacts[integrable_on_empty, hs.measurable_set]\n#align locally_integrable_on_iff_locally_integrable_restrict locally_integrable_on_iff_locally_integrable_restrict\n\n",
 "locally_integrable_on_iff":
 "/-- If `s` is either open, or closed, then `f` is locally integrable on `s` iff it is integrable on\nevery compact subset contained in `s`. -/\ntheorem locally_integrable_on_iff [LocallyCompactSpace X] [T2Space X] (hs : IsClosed s ∨ IsOpen s) :\n    locally_integrable_on f s μ ↔ ∀ (k : Set X) (hk : k ⊆ s), IsCompact k → integrable_on f k μ :=\n  by\n  -- The correct condition is that `s` be *locally closed*, i.e. for every `x ∈ s` there is some\n  -- `U ∈ 𝓝 x` such that `U ∩ s` is closed. But mathlib doesn't have locally closed sets yet.\n  refine' ⟨fun hf k hk => hf.integrable_on_compact_subset hk, fun hf x hx => _⟩\n  cases hs\n  ·\n    exact\n      let ⟨K, hK, h2K⟩ := exists_compact_mem_nhds x\n      ⟨_, inter_mem_nhdsWithin s h2K,\n        hf _ (inter_subset_left _ _) (isCompact_of_isClosed_subset hK (hs.inter hK.is_closed) (inter_subset_right _ _))⟩\n  · obtain ⟨K, hK, h2K, h3K⟩ := exists_compact_subset hs hx\n    refine' ⟨K, _, hf K h3K hK⟩\n    simpa only [IsOpen.nhdsWithin_eq hs hx, interior_eq_nhds'] using h2K\n#align locally_integrable_on_iff locally_integrable_on_iff\n\n",
 "locally_integrable_on_const":
 "theorem locally_integrable_on_const [LocallyFiniteMeasure μ] (c : E) : locally_integrable_on (fun x => c) s μ :=\n  (locally_integrable_const c).locally_integrable_on s\n#align locally_integrable_on_const locally_integrable_on_const\n\n",
 "locally_integrable_on":
 "/-- A function `f` continuous on a set `K` is locally integrable on this set with respect\nto any locally finite measure. -/\ntheorem continuous_on.locally_integrable_on [second_countable_topology_either X E] (hf : ContinuousOn f K)\n    (hK : MeasurableSet K) : locally_integrable_on f K μ := fun x hx => hf.integrable_at_nhds_within hK hx\n#align continuous_on.locally_integrable_on continuous_on.locally_integrable_on\n\n",
 "locally_integrable_map_homeomorph":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem locally_integrable_map_homeomorph [borel_space X] [borel_space Y] (e : «expr ≃ₜ » X Y) {f : Y → E}\n    {μ : Measure X} : locally_integrable f (Measure.map e μ) ↔ locally_integrable (f ∘ e) μ :=\n  by\n  refine' ⟨fun h x => _, fun h x => _⟩\n  · rcases h (e x) with ⟨U, hU, h'U⟩\n    refine' ⟨«expr ⁻¹' » e U, e.continuous.continuous_at.preimage_mem_nhds hU, _⟩\n    exact (integrable_on_map_equiv e.to_measurable_equiv).1 h'U\n  · rcases h (e.symm x) with ⟨U, hU, h'U⟩\n    refine' ⟨«expr ⁻¹' » e.symm U, e.symm.continuous.continuous_at.preimage_mem_nhds hU, _⟩\n    apply (integrable_on_map_equiv e.to_measurable_equiv).2\n    simp only [homeomorph.to_measurable_equiv_coe]\n    convert h'U\n    ext x\n    simp only [mem_preimage, Homeomorph.symm_apply_apply]\n#align locally_integrable_map_homeomorph locally_integrable_map_homeomorph\n\n",
 "locally_integrable_iff":
 "theorem locally_integrable_iff [LocallyCompactSpace X] :\n    locally_integrable f μ ↔ ∀ k : Set X, IsCompact k → integrable_on f k μ :=\n  ⟨fun hf k hk => hf.integrable_on_is_compact hk, fun hf x =>\n    let ⟨K, hK, h2K⟩ := exists_compact_mem_nhds x\n    ⟨K, h2K, hf K hK⟩⟩\n#align locally_integrable_iff locally_integrable_iff\n\n",
 "locally_integrable_const":
 "theorem locally_integrable_const [LocallyFiniteMeasure μ] (c : E) : locally_integrable (fun x => c) μ :=\n  by\n  intro x\n  rcases μ.finite_at_nhds x with ⟨U, hU, h'U⟩\n  refine' ⟨U, hU, _⟩\n  simp only [h'U, integrable_on_const, or_true_iff]\n#align locally_integrable_const locally_integrable_const\n\n",
 "locally_integrable":
 "theorem antitone.locally_integrable [LocallyFiniteMeasure μ] (hanti : Antitone f) : locally_integrable f μ :=\n  hanti.dual_right.locally_integrable\n#align antitone.locally_integrable antitone.locally_integrable\n\n",
 "integrable_on_uIoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprΙ -/\ntheorem continuous.integrable_on_uIoc [linear_order X] [CompactIccSpace X] (hf : Continuous f) :\n    integrable_on f ((exprΙ) a b) μ :=\n  hf.integrable_on_Ioc\n#align continuous.integrable_on_uIoc continuous.integrable_on_uIoc\n\n",
 "integrable_on_uIcc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `set.uIcc -/\ntheorem continuous.integrable_on_uIcc [linear_order X] [CompactIccSpace X] (hf : Continuous f) :\n    integrable_on f (set.uIcc a b) μ :=\n  hf.integrable_on_Icc\n#align continuous.integrable_on_uIcc continuous.integrable_on_uIcc\n\n",
 "integrable_on_of_measure_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem antitone_on.integrable_on_of_measure_ne_top (hanti : AntitoneOn f s) {a b : X} (ha : IsLeast s a)\n    (hb : IsGreatest s b) (hs : μ s ≠ ennreal.top) (h's : MeasurableSet s) : integrable_on f s μ :=\n  hanti.dual_right.integrable_on_of_measure_ne_top ha hb hs h's\n#align antitone_on.integrable_on_of_measure_ne_top antitone_on.integrable_on_of_measure_ne_top\n\n",
 "integrable_on_nhds_is_compact":
 "/-- If a function is locally integrable, then it is integrable on an open neighborhood of any\ncompact set. -/\ntheorem locally_integrable.integrable_on_nhds_is_compact (hf : locally_integrable f μ) {k : Set X} (hk : IsCompact k) :\n    ∃ u, IsOpen u ∧ k ⊆ u ∧ integrable_on f u μ :=\n  by\n  refine' IsCompact.induction_on hk _ _ _ _\n  · refine' ⟨∅, isOpen_empty, subset.rfl, integrable_on_empty⟩\n  · rintro s t hst ⟨u, u_open, tu, hu⟩\n    exact ⟨u, u_open, hst.trans tu, hu⟩\n  · rintro s t ⟨u, u_open, su, hu⟩ ⟨v, v_open, tv, hv⟩\n    exact ⟨u ∪ v, u_open.union v_open, union_subset_union su tv, hu.union hv⟩\n  · intro x hx\n    rcases hf x with ⟨u, ux, hu⟩\n    rcases mem_nhds_iff.1 ux with ⟨v, vu, v_open, xv⟩\n    exact ⟨v, nhdsWithin_le_nhds (v_open.mem_nhds xv), v, v_open, subset.rfl, hu.mono_set vu⟩\n#align locally_integrable.integrable_on_nhds_is_compact locally_integrable.integrable_on_nhds_is_compact\n\n",
 "integrable_on_is_compact":
 "theorem antione_on.integrable_on_is_compact [FiniteMeasureOnCompacts μ] (hs : IsCompact s) (hanti : AntitoneOn f s) :\n    integrable_on f s μ :=\n  hanti.dual_right.integrable_on_is_compact hs\n#align antione_on.integrable_on_is_compact antione_on.integrable_on_is_compact\n\n",
 "integrable_on_compact_subset":
 "theorem locally_integrable_on.integrable_on_compact_subset (hf : locally_integrable_on f s μ) {t : Set X} (hst : t ⊆ s)\n    (ht : IsCompact t) : integrable_on f t μ :=\n  (hf.mono hst).integrable_on_is_compact ht\n#align locally_integrable_on.integrable_on_compact_subset locally_integrable_on.integrable_on_compact_subset\n\n",
 "integrable_on_compact":
 "/-- A function `f` continuous on a compact set `K` is integrable on this set with respect to any\nlocally finite measure. -/\ntheorem continuous_on.integrable_on_compact (hK : IsCompact K) (hf : ContinuousOn f K) : integrable_on f K μ :=\n  by\n  letI := metrizable_space_metric X\n  refine' locally_integrable_on.integrable_on_is_compact (fun x hx => _) hK\n  exact hf.integrable_at_nhds_within_of_is_separable hK.measurable_set hK.is_separable hx\n#align continuous_on.integrable_on_compact continuous_on.integrable_on_compact\n\n",
 "integrable_on_Ioc":
 "theorem continuous.integrable_on_Ioc [preorder X] [CompactIccSpace X] (hf : Continuous f) :\n    integrable_on f (Ioc a b) μ :=\n  hf.integrable_on_Icc.mono_set Ioc_subset_Icc_self\n#align continuous.integrable_on_Ioc continuous.integrable_on_Ioc\n\n",
 "integrable_on_Icc":
 "theorem continuous.integrable_on_Icc [preorder X] [CompactIccSpace X] (hf : Continuous f) :\n    integrable_on f (Icc a b) μ :=\n  hf.continuous_on.integrable_on_Icc\n#align continuous.integrable_on_Icc continuous.integrable_on_Icc\n\n",
 "integrable_of_has_compact_support":
 "/-- A continuous function with compact support is integrable on the whole space. -/\ntheorem continuous.integrable_of_has_compact_support (hf : Continuous f) (hcf : HasCompactSupport f) : integrable f μ :=\n  (integrable_on_iff_integrable_of_support_subset (subset_tsupport f)).mp <| hf.continuous_on.integrable_on_compact hcf\n#align continuous.integrable_of_has_compact_support continuous.integrable_of_has_compact_support\n\n",
 "indicator":
 "theorem locally_integrable.indicator (hf : locally_integrable f μ) {s : Set X} (hs : MeasurableSet s) :\n    locally_integrable (s.indicator f) μ := by\n  intro x\n  rcases hf x with ⟨U, hU, h'U⟩\n  exact ⟨U, hU, h'U.indicator hs⟩\n#align locally_integrable.indicator locally_integrable.indicator\n\n",
 "continuous_on_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_on_smul [LocallyCompactSpace X] [T2Space X] {𝕜 : Type _} [NormedField 𝕜]\n    [second_countable_topology_either X 𝕜] [NormedSpace 𝕜 E] {f : X → E} {g : X → 𝕜} {s : Set X} (hs : IsOpen s)\n    (hf : locally_integrable_on f s μ) (hg : ContinuousOn g s) :\n    locally_integrable_on (fun x => «expr • » (g x) (f x)) s μ :=\n  by\n  rw [measure_theory.locally_integrable_on_iff (or.inr hs)] at hf⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).continuous_on_smul (hg.mono hk_sub) hk_c\n#align continuous_on_smul continuous_on_smul\n\n",
 "continuous_on_mul_of_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem integrable_on.continuous_on_mul_of_subset (hg : ContinuousOn g K) (hg' : integrable_on g' A μ)\n    (hK : IsCompact K) (hA : MeasurableSet A) (hAK : A ⊆ K) : integrable_on (fun x => g x * g' x) A μ :=\n  by\n  rcases IsCompact.exists_bound_of_continuousOn hK hg with ⟨C, hC⟩\n  rw [integrable_on, ← mem_ℒp_one_iff_integrable] at hg'⊢\n  have :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" (μ.restrict A)\n      («expr‖ ‖» (g x * g' x) ≤ C * «expr‖ ‖» (g' x)) :=\n    by\n    filter_upwards [ae_restrict_mem hA]with x hx\n    refine' (norm_mul_le _ _).trans _\n    apply mul_le_mul_of_nonneg_right (hC x (hAK hx)) (norm_nonneg _)\n  exact mem_ℒp.of_le_mul hg' (((hg.mono hAK).ae_strongly_measurable hA).mul hg'.ae_strongly_measurable) this\n#align integrable_on.continuous_on_mul_of_subset integrable_on.continuous_on_mul_of_subset\n\n",
 "continuous_on_mul":
 "theorem continuous_on_mul [LocallyCompactSpace X] [T2Space X] [NormedRing R] [second_countable_topology_either X R]\n    {f g : X → R} {s : Set X} (hf : locally_integrable_on f s μ) (hg : ContinuousOn g s) (hs : IsOpen s) :\n    locally_integrable_on (fun x => g x * f x) s μ :=\n  by\n  rw [measure_theory.locally_integrable_on_iff (or.inr hs)] at hf⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).continuous_on_mul (hg.mono hk_sub) hk_c\n#align continuous_on_mul continuous_on_mul\n\n",
 "ae_strongly_measurable":
 "theorem locally_integrable.ae_strongly_measurable [SecondCountableTopology X] (hf : locally_integrable f μ) :\n    ae_strongly_measurable f μ := by\n  simpa only [restrict_univ] using (locally_integrable_on_univ.mpr hf).ae_strongly_measurable\n#align locally_integrable.ae_strongly_measurable locally_integrable.ae_strongly_measurable\n\n"}