{"univ":
 "@[simp]\ntheorem measurable_set.univ : measurable_set (univ : set α) := by simpa using (@measurable_set.empty α _).compl\n#align measurable_set.univ measurable_set.univ\n\n",
 "union":
 "@[simp]\ntheorem measurable_set.union {s₁ s₂ : set α} (h₁ : measurable_set s₁) (h₂ : measurable_set s₂) :\n    measurable_set (s₁ ∪ s₂) := by\n  rw [union_eq_Union]\n  exact measurable_set.Union (bool.forall_bool.2 ⟨h₂, h₁⟩)\n#align measurable_set.union measurable_set.union\n\n",
 "symm_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n@[simp]\ntheorem measurable_set.symm_diff {s₁ s₂ : set α} (h₁ : measurable_set s₁) (h₂ : measurable_set s₂) :\n    measurable_set («expr ∆ » s₁ s₂) :=\n  (h₁.diff h₂).union (h₂.diff h₁)\n#align measurable_set.symm_diff measurable_set.symm_diff\n\n",
 "sUnion":
 "theorem measurable_set.sUnion {s : set (set α)} (hs : s.countable) (h : ∀ t ∈ s, measurable_set t) :\n    measurable_set (⋃₀ s) := by\n  rw [sUnion_eq_bUnion]\n  exact measurable_set.bUnion hs h\n#align measurable_set.sUnion measurable_set.sUnion\n\n",
 "sInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\ntheorem measurable_set.sInter {s : set (set α)} (hs : s.countable) (h : ∀ t ∈ s, measurable_set t) :\n    measurable_set («expr⋂₀ » s) := by\n  rw [sInter_eq_bInter]\n  exact measurable_set.bInter hs h\n#align measurable_set.sInter measurable_set.sInter\n\n",
 "of_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem measurable_set.of_compl (h : measurable_set («expr ᶜ» s)) : measurable_set s :=\n  compl_compl s ▸ h.compl\n#align measurable_set.of_compl measurable_set.of_compl\n\n",
 "nonempty_measurable_superset":
 "/-- Every set has a measurable superset. Declare this as local instance as needed. -/\ntheorem nonempty_measurable_superset (s : set α) : nonempty { t // s ⊆ t ∧ measurable_set t } :=\n  ⟨⟨univ, subset_univ s, measurable_set.univ⟩⟩\n#align nonempty_measurable_superset nonempty_measurable_superset\n\n",
 "mk_of_closure_sets":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem mk_of_closure_sets {s : set (set α)} {hs : { t | (measurable_set_of (generate_from s)) t } = s} :\n    measurable_space.mk_of_closure s hs = generate_from s :=\n  measurable_space.ext fun t =>\n    show t ∈ s ↔ _ by\n      conv_lhs => rw [← hs]\n      rfl\n#align mk_of_closure_sets mk_of_closure_sets\n\n",
 "measurable_space_supr_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem measurable_space_supr_eq (m : ι → measurable_space α) :\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (m n) =\n      generate_from { s | ∃ n, (measurable_set_of (m n)) s } :=\n  by\n  ext s\n  rw [measurable_set_supr]\n  rfl\n#align measurable_space_supr_eq measurable_space_supr_eq\n\n",
 "measurable_set_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem measurable_set_top {s : set α} : @measurable_set _ («expr⊤») s :=\n  trivial\n#align measurable_set_top measurable_set_top\n\n",
 "measurable_set_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem measurable_set_supr {ι} {m : ι → measurable_space α} {s : set α} :\n    @measurable_set _ (supᵢ m) s ↔ generate_measurable { s : set α | ∃ i, (measurable_set_of (m i)) s } s := by\n  simp only [supᵢ, measurable_set_Sup, exists_range_iff]\n#align measurable_set_supr measurable_set_supr\n\n",
 "measurable_set_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem measurable_set_sup {m₁ m₂ : measurable_space α} {s : set α} :\n    (measurable_set_of («expr ⊔ » m₁ m₂)) s ↔ generate_measurable (measurable_set_of m₁ ∪ measurable_set_of m₂) s :=\n  iff.refl _\n#align measurable_set_sup measurable_set_sup\n\n",
 "measurable_set_sUnion":
 "theorem set.finite.measurable_set_sUnion {s : set (set α)} (hs : s.finite) (h : ∀ t ∈ s, measurable_set t) :\n    measurable_set (⋃₀ s) :=\n  measurable_set.sUnion hs.countable h\n#align set.finite.measurable_set_sUnion set.finite.measurable_set_sUnion\n\n",
 "measurable_set_sInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\ntheorem set.finite.measurable_set_sInter {s : set (set α)} (hs : s.finite) (h : ∀ t ∈ s, measurable_set t) :\n    measurable_set («expr⋂₀ » s) :=\n  measurable_set.sInter hs.countable h\n#align set.finite.measurable_set_sInter set.finite.measurable_set_sInter\n\n",
 "measurable_set_insert":
 "@[simp]\ntheorem measurable_set_insert {a : α} {s : set α} : measurable_set (insert a s) ↔ measurable_set s :=\n  ⟨fun h =>\n    if ha : a ∈ s then by rwa [← insert_eq_of_mem ha]\n    else insert_diff_self_of_not_mem ha ▸ h.diff (measurable_set_singleton _),\n    fun h => h.insert a⟩\n#align measurable_set_insert measurable_set_insert\n\n",
 "measurable_set_infi":
 "@[simp]\ntheorem measurable_set_infi {ι} {m : ι → measurable_space α} {s : set α} :\n    @measurable_set _ (infᵢ m) s ↔ ∀ i, @measurable_set _ (m i) s := by rw [infᵢ, measurable_set_Inf, forall_range_iff]\n#align measurable_set_infi measurable_set_infi\n\n",
 "measurable_set_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem measurable_set_inf {m₁ m₂ : measurable_space α} {s : set α} :\n    @measurable_set _ («expr ⊓ » m₁ m₂) s ↔ @measurable_set _ m₁ s ∧ @measurable_set _ m₂ s :=\n  iff.rfl\n#align measurable_set_inf measurable_set_inf\n\n",
 "measurable_set_generate_from":
 "theorem measurable_set_generate_from {s : set (set α)} {t : set α} (ht : t ∈ s) :\n    @measurable_set _ (generate_from s) t :=\n  generate_measurable.basic t ht\n#align measurable_set_generate_from measurable_set_generate_from\n\n",
 "measurable_set_eq":
 "theorem measurable_set_eq {a : α} : measurable_set { x | x = a } :=\n  measurable_set_singleton a\n#align measurable_set_eq measurable_set_eq\n\n",
 "measurable_set_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem measurable_set_bot_iff {s : set α} : @measurable_set α («expr⊥») s ↔ s = ∅ ∨ s = univ :=\n  let b : measurable_space α :=\n    { measurable_set' := fun s => s = ∅ ∨ s = univ\n      measurable_set_empty := or.inl rfl\n      measurable_set_compl := by simp (config := { contextual := true }) [or_imp]\n      measurable_set_Union := fun f hf =>\n        by_cases\n          (fun h : ∃ i, f i = univ =>\n            let ⟨i, hi⟩ := h\n            or.inr <| eq_univ_of_univ_subset <| hi ▸ le_supᵢ f i)\n          fun h : ¬∃ i, f i = univ =>\n          or.inl <|\n            eq_empty_of_subset_empty <|\n              Union_subset fun i =>\n                (hf i).elim (by simp (config := { contextual := true })) fun hi => false.elim <| h ⟨i, hi⟩ }\n  have : b = «expr⊥» :=\n    bot_unique fun s hs =>\n      hs.elim (fun s => s.symm ▸ @measurable_set_empty _ («expr⊥»)) fun s => s.symm ▸ @measurable_set.univ _ («expr⊥»)\n  this ▸ iff.rfl\n#align measurable_set_bot_iff measurable_set_bot_iff\n\n",
 "measurable_set_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem finset.measurable_set_bUnion {f : β → set α} (s : Finset β) (h : ∀ b ∈ s, measurable_set (f b)) :\n    measurable_set\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f b)) :=\n  s.finite_to_set.measurable_set_bUnion h\n#align finset.measurable_set_bUnion finset.measurable_set_bUnion\n\n",
 "measurable_set_bInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem finset.measurable_set_bInter {f : β → set α} (s : Finset β) (h : ∀ b ∈ s, measurable_set (f b)) :\n    measurable_set\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f b)) :=\n  s.finite_to_set.measurable_set_bInter h\n#align finset.measurable_set_bInter finset.measurable_set_bInter\n\n",
 "measurable_set_Sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem measurable_set_Sup {ms : set (measurable_space α)} {s : set α} :\n    (measurable_set_of (supₛ ms)) s ↔ generate_measurable { s : set α | ∃ m ∈ ms, (measurable_set_of m) s } s :=\n  by\n  change @measurable_set' _ (generate_from <| ⋃₀ _) _ ↔ _\n  simp [generate_from, ← set_of_exists]\n#align measurable_set_Sup measurable_set_Sup\n\n",
 "measurable_set_Inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n@[simp]\ntheorem measurable_set_Inf {ms : set (measurable_space α)} {s : set α} :\n    @measurable_set _ (infₛ ms) s ↔ ∀ m ∈ ms, @measurable_set _ m s :=\n  show s ∈ «expr⋂₀ » _ ↔ _ by simp\n#align measurable_set_Inf measurable_set_Inf\n\n",
 "measurable_set":
 "theorem set.countable.measurable_set {s : set α} (hs : s.countable) : measurable_set s :=\n  by\n  rw [← bUnion_of_singleton s]\n  exact measurable_set.bUnion hs fun b hb => measurable_set_singleton b\n#align set.countable.measurable_set set.countable.measurable_set\n\n",
 "measurable_id'":
 "theorem measurable_id' {ma : measurable_space α} : measurable fun a : α => a :=\n  measurable_id\n#align measurable_id' measurable_id'\n\n",
 "measurable_id":
 "theorem measurable_id {ma : measurable_space α} : measurable (@id α) := fun t => id\n#align measurable_id measurable_id\n\n",
 "measurable_const":
 "@[simp]\ntheorem measurable_const {ma : measurable_space α} {mb : measurable_space β} {a : α} : measurable fun b : β => a :=\n  fun s hs => measurable_set.const (a ∈ s)\n#align measurable_const measurable_const\n\n",
 "measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem measurable_space.top.measurable {α β : Type _} [measurable_space β] (f : α → β) :\n    @measurable α β («expr⊤») _ f := fun s hs => measurable_space.measurable_set_top\n#align measurable_space.top.measurable measurable_space.top.measurable\n\n",
 "le_def":
 "theorem le_def {α} {a b : measurable_space α} : a ≤ b ↔ a.measurable_set' ≤ b.measurable_set' :=\n  iff.rfl\n#align le_def le_def\n\n",
 "le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_of -/\ntheorem measurable.le {α} {m m0 : measurable_space α} {mb : measurable_space β} (hm : m ≤ m0) {f : α → β}\n    (hf : (measurable_of m) f) : (measurable_of m0) f := fun s hs => hm _ (hf hs)\n#align measurable.le measurable.le\n\n",
 "ite'":
 "theorem measurable_set.ite' {s t : set α} {p : Prop} (hs : p → measurable_set s) (ht : ¬p → measurable_set t) :\n    measurable_set (ite p s t) := by\n  split_ifs\n  exacts[hs h, ht h]\n#align measurable_set.ite' measurable_set.ite'\n\n",
 "ite":
 "@[simp]\ntheorem measurable_set.ite {t s₁ s₂ : set α} (ht : measurable_set t) (h₁ : measurable_set s₁) (h₂ : measurable_set s₂) :\n    measurable_set (t.ite s₁ s₂) :=\n  (h₁.inter ht).union (h₂.diff ht)\n#align measurable_set.ite measurable_set.ite\n\n",
 "inter":
 "@[simp]\ntheorem measurable_set.inter {s₁ s₂ : set α} (h₁ : measurable_set s₁) (h₂ : measurable_set s₂) :\n    measurable_set (s₁ ∩ s₂) := by\n  rw [inter_eq_compl_compl_union_compl]\n  exact (h₁.compl.union h₂.compl).compl\n#align measurable_set.inter measurable_set.inter\n\n",
 "insert":
 "theorem measurable_set.insert {s : set α} (hs : measurable_set s) (a : α) : measurable_set (insert a s) :=\n  (measurable_set_singleton a).union hs\n#align measurable_set.insert measurable_set.insert\n\n",
 "generate_from_sup_generate_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem generate_from_sup_generate_from {s t : set (set α)} :\n    «expr ⊔ » (generate_from s) (generate_from t) = generate_from (s ∪ t) :=\n  (@gi_generate_from α).gc.l_sup.symm\n#align generate_from_sup_generate_from generate_from_sup_generate_from\n\n",
 "generate_from_singleton_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem generate_from_singleton_univ : generate_from {Set.univ} = («expr⊥» : measurable_space α) :=\n  by\n  rw [eq_bot_iff, generate_from_le_iff]\n  simp\n#align generate_from_singleton_univ generate_from_singleton_univ\n\n",
 "generate_from_singleton_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem generate_from_singleton_empty : generate_from {∅} = («expr⊥» : measurable_space α) :=\n  by\n  rw [eq_bot_iff, generate_from_le_iff]\n  simp\n#align generate_from_singleton_empty generate_from_singleton_empty\n\n",
 "generate_from_mono":
 "@[mono]\ntheorem generate_from_mono {s t : set (set α)} (h : s ⊆ t) : generate_from s ≤ generate_from t :=\n  gi_generate_from.gc.monotone_l h\n#align generate_from_mono generate_from_mono\n\n",
 "generate_from_measurable_set":
 "@[simp]\ntheorem generate_from_measurable_set [measurable_space α] : generate_from { s : set α | measurable_set s } = ‹_› :=\n  le_antisymm (generate_from_le fun _ => id) fun s => measurable_set_generate_from\n#align generate_from_measurable_set generate_from_measurable_set\n\n",
 "generate_from_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem generate_from_le_iff {s : set (set α)} (m : measurable_space α) :\n    generate_from s ≤ m ↔ s ⊆ { t | (measurable_set_of m) t } :=\n  iff.intro (fun h u hu => h _ <| measurable_set_generate_from hu) fun h => generate_from_le h\n#align generate_from_le_iff generate_from_le_iff\n\n",
 "generate_from_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\ntheorem generate_from_le {s : set (set α)} {m : measurable_space α} (h : ∀ t ∈ s, (measurable_set_of m) t) :\n    generate_from s ≤ m := fun t (ht : generate_measurable s t) =>\n  ht.rec_on h (measurable_set_empty m) (fun s _ hs => measurable_set_compl m s hs) fun f _ hf =>\n    measurable_set_Union m f hf\n#align generate_from_le generate_from_le\n\n",
 "generate_from_insert_univ":
 "@[simp]\ntheorem generate_from_insert_univ (S : set (set α)) : generate_from (insert Set.univ S) = generate_from S :=\n  by\n  refine' le_antisymm _ (generate_from_mono (Set.subset_insert _ _))\n  rw [generate_from_le_iff]\n  intro t ht\n  cases ht\n  · rw [ht]\n    exact measurable_set.univ\n  · exact measurable_set_generate_from ht\n#align generate_from_insert_univ generate_from_insert_univ\n\n",
 "generate_from_insert_empty":
 "@[simp]\ntheorem generate_from_insert_empty (S : set (set α)) : generate_from (insert ∅ S) = generate_from S :=\n  by\n  refine' le_antisymm _ (generate_from_mono (Set.subset_insert _ _))\n  rw [generate_from_le_iff]\n  intro t ht\n  cases ht\n  · rw [ht]\n    exact @measurable_set.empty _ (generate_from S)\n  · exact measurable_set_generate_from ht\n#align generate_from_insert_empty generate_from_insert_empty\n\n",
 "generate_from_induction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n@[elab_as_elim]\ntheorem generate_from_induction (p : set α → Prop) (C : set (set α)) (hC : ∀ t ∈ C, p t) (h_empty : p ∅)\n    (h_compl : ∀ t, p t → p («expr ᶜ» t))\n    (h_Union :\n      ∀ f : ℕ → set α,\n        (∀ n, p (f n)) →\n          p («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)))\n    {s : set α} (hs : (measurable_set_of (generate_from C)) s) : p s :=\n  by\n  induction hs\n  exacts[hC _ hs_H, h_empty, h_compl _ hs_ih, h_Union hs_f hs_ih]\n#align generate_from_induction generate_from_induction\n\n",
 "generate_from_Union_measurable_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem generate_from_Union_measurable_set (m : ι → measurable_space α) :\n    generate_from\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          { t | (measurable_set_of (m n)) t }) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (m n) :=\n  (@gi_generate_from α).l_supr_u m\n#align generate_from_Union_measurable_set generate_from_Union_measurable_set\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n@[ext]\ntheorem measurable_space.ext_iff {m₁ m₂ : measurable_space α} :\n    m₁ = m₂ ↔ ∀ s : set α, (measurable_set_of m₁) s ↔ (measurable_set_of m₂) s :=\n  ⟨by\n    rintro rfl\n    intro s\n    rfl, measurable_space.ext⟩\n#align measurable_space.ext_iff measurable_space.ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n@[ext]\ntheorem measurable_space.ext :\n    ∀ {m₁ m₂ : measurable_space α}, (∀ s : set α, (measurable_set_of m₁) s ↔ (measurable_set_of m₂) s) → m₁ = m₂\n  | ⟨s₁, _, _, _⟩, ⟨s₂, _, _, _⟩, h =>\n    by\n    have : s₁ = s₂ := funext fun x => propext <| h x\n    subst this\n#align measurable_space.ext measurable_space.ext\n\n",
 "empty":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mario Carneiro\n-/\n@[simp]\ntheorem measurable_set.empty [measurable_space α] : measurable_set (∅ : set α) :=\n  ‹measurable_space α›.measurable_set_empty\n#align measurable_set.empty measurable_set.empty\n\n",
 "disjointed":
 "@[simp]\ntheorem measurable_set.disjointed {f : ℕ → set α} (h : ∀ i, measurable_set (f i)) (n) :\n    measurable_set (disjointed f n) :=\n  disjointed_rec (fun t i ht => measurable_set.diff ht <| h _) (h n)\n#align measurable_set.disjointed measurable_set.disjointed\n\n",
 "diff":
 "@[simp]\ntheorem measurable_set.diff {s₁ s₂ : set α} (h₁ : measurable_set s₁) (h₂ : measurable_set s₂) :\n    measurable_set (s₁ \\ s₂) :=\n  h₁.inter h₂.compl\n#align measurable_set.diff measurable_set.diff\n\n",
 "const":
 "@[simp]\ntheorem measurable_set.const (p : Prop) : measurable_set { a : α | p } := by\n  by_cases p <;> simp [h, measurable_set.empty] <;> apply measurable_set.univ\n#align measurable_set.const measurable_set.const\n\n",
 "congr":
 "theorem measurable_set.congr {s t : set α} (hs : measurable_set s) (h : s = t) : measurable_set t := by rwa [← h]\n#align measurable_set.congr measurable_set.congr\n\n",
 "cond":
 "@[simp]\ntheorem measurable_set.cond {s₁ s₂ : set α} (h₁ : measurable_set s₁) (h₂ : measurable_set s₂) {i : bool} :\n    measurable_set (cond i s₁ s₂) := by\n  cases i\n  exacts[h₂, h₁]\n#align measurable_set.cond measurable_set.cond\n\n",
 "compl_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem measurable_set.compl_iff : measurable_set («expr ᶜ» s) ↔ measurable_set s :=\n  ⟨measurable_set.of_compl, measurable_set.compl⟩\n#align measurable_set.compl_iff measurable_set.compl_iff\n\n",
 "compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem measurable_set.compl : measurable_set s → measurable_set («expr ᶜ» s) :=\n  ‹measurable_space α›.measurable_set_compl s\n#align measurable_set.compl measurable_set.compl\n\n",
 "comp":
 "theorem measurable.comp {mα : measurable_space α} {mβ : measurable_space β} {mγ : measurable_space γ} {g : β → γ}\n    {f : α → β} (hg : measurable g) (hf : measurable f) : measurable (g ∘ f) := fun t ht => hf (hg ht)\n#align measurable.comp measurable.comp\n\n",
 "bUnion_decode₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem measurable_set.bUnion_decode₂ [Encodable β] ⦃f : β → set α⦄ (h : ∀ b, measurable_set (f b)) (n : ℕ) :\n    measurable_set\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f b)) :=\n  Encodable.unionᵢ_decode₂_cases measurable_set.empty h\n#align measurable_set.bUnion_decode₂ measurable_set.bUnion_decode₂\n\n",
 "bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem measurable_set.bUnion {f : β → set α} {s : set β} (hs : s.countable) (h : ∀ b ∈ s, measurable_set (f b)) :\n    measurable_set\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f b)) :=\n  by\n  rw [bUnion_eq_Union]\n  haveI := hs.to_encodable\n  exact measurable_set.Union (by simpa using h)\n#align measurable_set.bUnion measurable_set.bUnion\n\n",
 "bInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem measurable_set.bInter {f : β → set α} {s : set β} (hs : s.countable) (h : ∀ b ∈ s, measurable_set (f b)) :\n    measurable_set\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f b)) :=\n  measurable_set.compl_iff.1 <| by\n    rw [compl_Inter₂]\n    exact measurable_set.bUnion hs fun b hb => (h b hb).compl\n#align measurable_set.bInter measurable_set.bInter\n\n",
 "Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem measurable_set.Union [countable ι] ⦃f : ι → set α⦄ (h : ∀ b, measurable_set (f b)) :\n    measurable_set\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f b)) :=\n  by\n  cases nonempty_encodable (PLift ι)\n  rw [← Union_plift_down, ← Encodable.unionᵢ_decode₂]\n  exact ‹measurable_space α›.measurable_set_Union _ (measurable_set.bUnion_decode₂ fun _ => h _)\n#align measurable_set.Union measurable_set.Union\n\n",
 "Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem measurable_set.Inter [countable ι] {f : ι → set α} (h : ∀ b, measurable_set (f b)) :\n    measurable_set\n      («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f b)) :=\n  measurable_set.compl_iff.1 <| by\n    rw [compl_Inter]\n    exact measurable_set.Union fun b => (h b).compl\n#align measurable_set.Inter measurable_set.Inter\n\n"}