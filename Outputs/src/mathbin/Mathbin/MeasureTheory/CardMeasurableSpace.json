{"self_subset_generate_measurable_rec":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr subset_union_of_subset_left, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel, Violeta Hernández Palacios\n-/\ntheorem self_subset_generate_measurable_rec (s : set (set α)) (i : exprω₁) : s ⊆ generate_measurable_rec s i :=\n  by\n  unfold generate_measurable_rec\n  trace\n    \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n  exact subset_rfl\n#align self_subset_generate_measurable_rec self_subset_generate_measurable_rec\n\n",
 "generate_measurable_rec_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\ntheorem generate_measurable_rec_subset (s : set (set α)) {i j : exprω₁} (h : i ≤ j) :\n    generate_measurable_rec s i ⊆ generate_measurable_rec s j := fun x hx =>\n  by\n  rcases eq_or_lt_of_le h with (rfl | h)\n  · exact hx\n  · convert Union_mem_generate_measurable_rec fun n => ⟨i, h, hx⟩\n    exact (Union_const x).symm\n#align generate_measurable_rec_subset generate_measurable_rec_subset\n\n",
 "generate_measurable_eq_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- `generate_measurable_rec s` generates precisely the smallest sigma-algebra containing `s`. -/\ntheorem generate_measurable_eq_rec (s : set (set α)) :\n    { t | generate_measurable s t } =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (generate_measurable_rec s i) :=\n  by\n  ext t; refine' ⟨fun ht => _, fun ht => _⟩\n  · inhabit exprω₁\n    induction' ht with u hu u hu IH f hf IH\n    · exact mem_Union.2 ⟨default, self_subset_generate_measurable_rec s _ hu⟩\n    · exact mem_Union.2 ⟨default, empty_mem_generate_measurable_rec s _⟩\n    · rcases mem_Union.1 IH with ⟨i, hi⟩\n      obtain ⟨j, hj⟩ := exists_gt i\n      exact mem_Union.2 ⟨j, compl_mem_generate_measurable_rec hj hi⟩\n    · have : ∀ n, ∃ i, f n ∈ generate_measurable_rec s i := fun n => by simpa using IH n\n      choose I hI using this\n      refine'\n        mem_Union.2\n          ⟨ordinal.enum (· < ·) (ordinal.lsub fun n => ordinal.typein.{u} (· < ·) (I n)) _,\n            Union_mem_generate_measurable_rec fun n => ⟨I n, _, hI n⟩⟩\n      · rw [ordinal.type_lt]\n        refine' ordinal.lsub_lt_ord_lift _ fun i => ordinal.typein_lt_self _\n        rw [mk_denumerable, lift_aleph_0, is_regular_aleph_one.cof_eq]\n        exact aleph_0_lt_aleph_one\n      · rw [← ordinal.typein_lt_typein (· < ·), ordinal.typein_enum]\n        apply ordinal.lt_lsub fun n : ℕ => _\n  · rcases ht with ⟨t, ⟨i, rfl⟩, hx⟩\n    revert t\n    apply (aleph 1).ord.out.wo.wf.induction i\n    intro j H t ht\n    unfold generate_measurable_rec at ht\n    rcases ht with (((h | h) | ⟨u, ⟨-, ⟨⟨k, hk⟩, rfl⟩, hu⟩, rfl⟩) | ⟨f, rfl⟩)\n    · exact generate_measurable.basic t h\n    · convert generate_measurable.empty\n    · exact generate_measurable.compl u (H k hk u hu)\n    · apply generate_measurable.union _ fun n => _\n      obtain ⟨-, ⟨⟨k, hk⟩, rfl⟩, hf⟩ := (f n).prop\n      exact H k hk _ hf\n#align generate_measurable_eq_rec generate_measurable_eq_rec\n\n",
 "empty_mem_generate_measurable_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\ntheorem empty_mem_generate_measurable_rec (s : set (set α)) (i : exprω₁) : ∅ ∈ generate_measurable_rec s i :=\n  by\n  unfold generate_measurable_rec\n  exact mem_union_left _ (mem_union_left _ (mem_union_right _ (mem_singleton ∅)))\n#align empty_mem_generate_measurable_rec empty_mem_generate_measurable_rec\n\n",
 "compl_mem_generate_measurable_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem compl_mem_generate_measurable_rec {s : set (set α)} {i j : exprω₁} (h : j < i) {t : set α}\n    (ht : t ∈ generate_measurable_rec s j) : «expr ᶜ» t ∈ generate_measurable_rec s i :=\n  by\n  unfold generate_measurable_rec\n  exact mem_union_left _ (mem_union_right _ ⟨t, mem_Union.2 ⟨⟨j, h⟩, ht⟩, rfl⟩)\n#align compl_mem_generate_measurable_rec compl_mem_generate_measurable_rec\n\n",
 "cardinal_measurable_set_le_continuum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.continuum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.continuum -/\n/-- If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,\nthen the sigma algebra has the same cardinality bound. -/\ntheorem cardinal_measurable_set_le_continuum {s : set (set α)} :\n    cardinal.mk s ≤ cardinal.continuum →\n      cardinal.mk { t | @measurable_set α (generate_from s) t } ≤ cardinal.continuum :=\n  cardinal_generate_measurable_le_continuum\n#align cardinal_measurable_set_le_continuum cardinal_measurable_set_le_continuum\n\n",
 "cardinal_measurable_set_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-- If a sigma-algebra is generated by a set of sets `s`, then the sigma\nalgebra has cardinality at most `(max (#s) 2) ^ ℵ₀`. -/\ntheorem cardinal_measurable_set_le (s : set (set α)) :\n    cardinal.mk { t | @measurable_set α (generate_from s) t } ≤ max (cardinal.mk s) 2 ^ aleph_0.{u} :=\n  cardinal_generate_measurable_le s\n#align cardinal_measurable_set_le cardinal_measurable_set_le\n\n",
 "cardinal_generate_measurable_rec_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.aleph_0 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr (mk_union_le _ _).trans, \",\", expr add_le_of_le C, \",\", expr mk_image_le.trans, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.aleph_0 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-- At each step of the inductive construction, the cardinality bound `≤ (max (#s) 2) ^ ℵ₀` holds.\n-/\ntheorem cardinal_generate_measurable_rec_le (s : set (set α)) (i : exprω₁) :\n    cardinal.mk (generate_measurable_rec s i) ≤ max (cardinal.mk s) 2 ^ aleph_0.{u} :=\n  by\n  apply (aleph 1).ord.out.wo.wf.induction i\n  intro i IH\n  have A := aleph_0_le_aleph 1\n  have B : aleph 1 ≤ max (cardinal.mk s) 2 ^ aleph_0.{u} :=\n    aleph_one_le_continuum.trans (power_le_power_right (le_max_right _ _))\n  have C : cardinal.aleph_0 ≤ max (cardinal.mk s) 2 ^ aleph_0.{u} := A.trans B\n  have J :\n    cardinal.mk\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (generate_measurable_rec s j.1)) ≤\n      max (cardinal.mk s) 2 ^ aleph_0.{u} :=\n    by\n    apply (mk_Union_le _).trans\n    have D :\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n          (cardinal.mk (generate_measurable_rec s j)) ≤\n        _ :=\n      csupᵢ_le' fun ⟨j, hj⟩ => IH j hj\n    apply (mul_le_mul' ((mk_subtype_le _).trans (aleph 1).mk_ord_out.le) D).trans\n    rw [mul_eq_max A C]\n    exact max_le B le_rfl\n  rw [generate_measurable_rec]\n  trace\n    \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n  · exact (le_max_left _ _).trans (self_le_power _ one_lt_aleph_0.le)\n  · rw [mk_singleton]\n    exact one_lt_aleph_0.le.trans C\n  · apply mk_range_le.trans\n    simp only [mk_pi, subtype.val_eq_coe, prod_const, lift_uzero, mk_denumerable, lift_aleph_0]\n    have := @power_le_power_right _ _ (cardinal.aleph_0) J\n    rwa [← power_mul, aleph_0_mul_aleph_0] at this\n#align cardinal_generate_measurable_rec_le cardinal_generate_measurable_rec_le\n\n",
 "cardinal_generate_measurable_le_continuum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.continuum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.continuum -/\n/-- If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,\nthen the sigma algebra has the same cardinality bound. -/\ntheorem cardinal_generate_measurable_le_continuum {s : set (set α)} (hs : cardinal.mk s ≤ cardinal.continuum) :\n    cardinal.mk { t | generate_measurable s t } ≤ cardinal.continuum :=\n  (cardinal_generate_measurable_le s).trans\n    (by\n      rw [← continuum_power_aleph_0]\n      exact_mod_cast power_le_power_right (max_le hs (nat_lt_continuum 2).le))\n#align cardinal_generate_measurable_le_continuum cardinal_generate_measurable_le_continuum\n\n",
 "cardinal_generate_measurable_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-- If a sigma-algebra is generated by a set of sets `s`, then the sigma-algebra has cardinality at\nmost `(max (#s) 2) ^ ℵ₀`. -/\ntheorem cardinal_generate_measurable_le (s : set (set α)) :\n    cardinal.mk { t | generate_measurable s t } ≤ max (cardinal.mk s) 2 ^ aleph_0.{u} :=\n  by\n  rw [generate_measurable_eq_rec]\n  apply (mk_Union_le _).trans\n  rw [(aleph 1).mk_ord_out]\n  refine' le_trans (mul_le_mul' aleph_one_le_continuum (csupᵢ_le' fun i => cardinal_generate_measurable_rec_le s i)) _\n  have := power_le_power_right (le_max_right (cardinal.mk s) 2)\n  rw [mul_eq_max aleph_0_le_continuum (aleph_0_le_continuum.trans this)]\n  exact max_le this le_rfl\n#align cardinal_generate_measurable_le cardinal_generate_measurable_le\n\n",
 "Union_mem_generate_measurable_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprω₁ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_mem_generate_measurable_rec {s : set (set α)} {i : exprω₁} {f : ℕ → set α}\n    (hf : ∀ n, ∃ j < i, f n ∈ generate_measurable_rec s j) :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f n) ∈\n      generate_measurable_rec s i :=\n  by\n  unfold generate_measurable_rec\n  exact\n    mem_union_right _\n      ⟨fun n =>\n        ⟨f n,\n          let ⟨j, hj, hf⟩ := hf n\n          mem_Union.2 ⟨⟨j, hj⟩, hf⟩⟩,\n        rfl⟩\n#align Union_mem_generate_measurable_rec Union_mem_generate_measurable_rec\n\n"}