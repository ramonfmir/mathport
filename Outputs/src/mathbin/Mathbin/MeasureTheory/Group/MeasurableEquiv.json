{"to_equiv_mul_right₀":
 "@[simp]\ntheorem to_equiv_mul_right₀ {g : G₀} (hg : g ≠ 0) : (mulRight₀ g hg).to_equiv = Equiv.mulRight₀ g hg :=\n  rfl\n#align to_equiv_mul_right₀ to_equiv_mul_right₀\n\n",
 "to_equiv_mul_right":
 "@[simp, to_additive]\ntheorem to_equiv_mul_right (g : G) : (mulRight g).to_equiv = Equiv.mulRight g :=\n  rfl\n#align to_equiv_mul_right to_equiv_mul_right\n\n",
 "to_equiv_mul_left₀":
 "@[simp]\ntheorem to_equiv_mul_left₀ {g : G₀} (hg : g ≠ 0) : (mulLeft₀ g hg).to_equiv = Equiv.mulLeft₀ g hg :=\n  rfl\n#align to_equiv_mul_left₀ to_equiv_mul_left₀\n\n",
 "to_equiv_mul_left":
 "@[simp, to_additive]\ntheorem to_equiv_mul_left (g : G) : (mulLeft g).to_equiv = Equiv.mulLeft g :=\n  rfl\n#align to_equiv_mul_left to_equiv_mul_left\n\n",
 "symm_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵐ » -/\n@[simp]\ntheorem symm_smul₀ {c : G₀} (hc : c ≠ 0) : (smul₀ c hc : «expr ≃ᵐ » α α).symm = smul₀ c⁻¹ (inv_ne_zero hc) :=\n  ext rfl\n#align symm_smul₀ symm_smul₀\n\n",
 "symm_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵐ » -/\n@[simp, to_additive]\ntheorem symm_smul (c : G) : (smul c : «expr ≃ᵐ » α α).symm = smul c⁻¹ :=\n  ext rfl\n#align symm_smul symm_smul\n\n",
 "symm_mul_right₀":
 "@[simp]\ntheorem symm_mul_right₀ {g : G₀} (hg : g ≠ 0) : (mulRight₀ g hg).symm = mulRight₀ g⁻¹ (inv_ne_zero hg) :=\n  ext rfl\n#align symm_mul_right₀ symm_mul_right₀\n\n",
 "symm_mul_right":
 "@[simp, to_additive]\ntheorem symm_mul_right (g : G) : (mulRight g).symm = mulRight g⁻¹ :=\n  ext rfl\n#align symm_mul_right symm_mul_right\n\n",
 "symm_mul_left₀":
 "@[simp]\ntheorem symm_mul_left₀ {g : G₀} (hg : g ≠ 0) : (mulLeft₀ g hg).symm = mulLeft₀ g⁻¹ (inv_ne_zero hg) :=\n  ext rfl\n#align symm_mul_left₀ symm_mul_left₀\n\n",
 "symm_mul_left":
 "@[simp, to_additive]\ntheorem symm_mul_left (g : G) : (mulLeft g).symm = mulLeft g⁻¹ :=\n  ext rfl\n#align symm_mul_left symm_mul_left\n\n",
 "symm_inv":
 "@[simp, to_additive]\ntheorem symm_inv {G} [MeasurableSpace G] [InvolutiveInv G] [MeasurableInv G] : (inv G).symm = inv G :=\n  rfl\n#align symm_inv symm_inv\n\n",
 "measurable_embedding_mul_right₀":
 "#print measurableEmbedding_mulRight₀ /-\ntheorem measurableEmbedding_mulRight₀ {g : G₀} (hg : g ≠ 0) : MeasurableEmbedding fun x => x * g :=\n  (mulRight₀ g hg).measurable_embedding\n#align measurable_embedding_mul_right₀ measurableEmbedding_mulRight₀\n-/\n\n",
 "measurable_embedding_mul_right":
 "#print measurableEmbedding_mulRight /-\n@[to_additive]\ntheorem measurableEmbedding_mulRight (g : G) : MeasurableEmbedding fun x => x * g :=\n  (mulRight g).measurable_embedding\n#align measurable_embedding_mul_right measurableEmbedding_mulRight\n#align measurable_embedding_add_right measurableEmbedding_addRight\n-/\n\n",
 "measurable_embedding_mul_left₀":
 "#print measurableEmbedding_mulLeft₀ /-\ntheorem measurableEmbedding_mulLeft₀ {g : G₀} (hg : g ≠ 0) : MeasurableEmbedding ((· * ·) g) :=\n  (mulLeft₀ g hg).measurable_embedding\n#align measurable_embedding_mul_left₀ measurableEmbedding_mulLeft₀\n-/\n\n",
 "measurable_embedding_mul_left":
 "#print measurableEmbedding_mulLeft /-\n@[to_additive]\ntheorem measurableEmbedding_mulLeft (g : G) : MeasurableEmbedding ((· * ·) g) :=\n  (mulLeft g).measurable_embedding\n#align measurable_embedding_mul_left measurableEmbedding_mulLeft\n#align measurable_embedding_add_left measurableEmbedding_addLeft\n-/\n\n",
 "measurable_embedding_const_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print measurableEmbedding_const_smul₀ /-\ntheorem measurableEmbedding_const_smul₀ {c : G₀} (hc : c ≠ 0) : MeasurableEmbedding ((«expr • » · ·) c : α → α) :=\n  (smul₀ c hc).measurable_embedding\n#align measurable_embedding_const_smul₀ measurableEmbedding_const_smul₀\n-/\n\n",
 "measurable_embedding_const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n#print measurableEmbedding_const_smul /-\n/-\nCopyright (c) 2021 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\n@[to_additive]\ntheorem measurableEmbedding_const_smul (c : G) : MeasurableEmbedding ((«expr • » · ·) c : α → α) :=\n  (smul c).measurable_embedding\n#align measurable_embedding_const_smul measurableEmbedding_const_smul\n#align measurable_embedding_const_vadd measurableEmbedding_const_vadd\n-/\n\n",
 "coe_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵐ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n@[simp]\ntheorem coe_smul₀ {c : G₀} (hc : c ≠ 0) : «expr⇑ » (smul₀ c hc : «expr ≃ᵐ » α α) = («expr • » · ·) c :=\n  rfl\n#align coe_smul₀ coe_smul₀\n\n",
 "coe_mul_right₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul_right₀ {g : G₀} (hg : g ≠ 0) : «expr⇑ » (mulRight₀ g hg) = fun x => x * g :=\n  rfl\n#align coe_mul_right₀ coe_mul_right₀\n\n",
 "coe_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, to_additive]\ntheorem coe_mul_right (g : G) : «expr⇑ » (mulRight g) = fun x => x * g :=\n  rfl\n#align coe_mul_right coe_mul_right\n\n",
 "coe_mul_left₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul_left₀ {g : G₀} (hg : g ≠ 0) : «expr⇑ » (mulLeft₀ g hg) = (· * ·) g :=\n  rfl\n#align coe_mul_left₀ coe_mul_left₀\n\n",
 "coe_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, to_additive]\ntheorem coe_mul_left (g : G) : «expr⇑ » (mulLeft g) = (· * ·) g :=\n  rfl\n#align coe_mul_left coe_mul_left\n\n"}