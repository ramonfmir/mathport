{"volume_of_add_preimage_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem volume_of_add_preimage_eq (s I : Set <| add_circle T) (u x : add_circle T) (hu : IsOfFinAddOrder u)\n    (hs : «expr =ᵐ[ ] » («expr +ᵥ » u s : Set <| add_circle T) volume s)\n    (hI : «expr =ᵐ[ ] » I volume (ball x (T / (2 * addOrderOf u)))) :\n    volume s = «expr • » (addOrderOf u) (volume (s ∩ I)) :=\n  by\n  let G := AddSubgroup.zmultiples u\n  haveI : Fintype G := @Fintype.ofFinite _ hu.finite_zmultiples\n  have hsG : ∀ g : G, «expr =ᵐ[ ] » («expr +ᵥ » g s : Set <| add_circle T) volume s :=\n    by\n    rintro ⟨y, hy⟩\n    exact (vadd_ae_eq_self_of_mem_zmultiples hs hy : _)\n  rw [(is_add_fundamental_domain_of_ae_ball I u x hu hI).measure_eq_card_smul_of_vadd_ae_eq_self s hsG,\n    add_order_eq_card_zmultiples' u, Nat.card_eq_fintype_card]\n#align volume_of_add_preimage_eq volume_of_add_preimage_eq\n\n",
 "is_add_fundamental_domain_of_ae_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/-- Let `G` be the subgroup of `add_circle T` generated by a point `u` of finite order `n : ℕ`. Then\nany set `I` that is almost equal to a ball of radius `T / 2n` is a fundamental domain for the action\nof `G` on `add_circle T` by left addition. -/\ntheorem is_add_fundamental_domain_of_ae_ball (I : Set <| add_circle T) (u x : add_circle T) (hu : IsOfFinAddOrder u)\n    (hI : «expr =ᵐ[ ] » I volume (ball x (T / (2 * addOrderOf u)))) :\n    is_add_fundamental_domain (AddSubgroup.zmultiples u) I :=\n  by\n  set G := AddSubgroup.zmultiples u\n  set n := addOrderOf u\n  set B := ball x (T / (2 * n))\n  have hn : 1 ≤ (n : exprℝ) := by\n    norm_cast\n    linarith [addOrderOf_pos' hu]\n  refine' is_add_fundamental_domain.mk_of_measure_univ_le _ _ _ _\n  ·-- `null_measurable_set I volume`\n    exact measurable_set_ball.null_measurable_set.congr hI.symm\n  · -- `∀ (g : G), g ≠ 0 → ae_disjoint volume (g +ᵥ I) I`\n    rintro ⟨g, hg⟩ hg'\n    replace hg' : g ≠ 0\n    · simpa only [ne.def, AddSubgroup.mk_eq_zero_iff] using hg'\n    change ae_disjoint volume («expr +ᵥ » g I) I\n    refine'\n      ae_disjoint.congr (Disjoint.aedisjoint _)\n        ((quasi_measure_preserving_add_left volume (-g)).vadd_ae_eq_of_ae_eq g hI) hI\n    have hBg : «expr +ᵥ » g B = ball (g + x) (T / (2 * n)) := by\n      rw [add_comm g x, ← singleton_add_ball _ x g, add_ball, thickening_singleton]\n    rw [hBg]\n    apply ball_disjoint_ball\n    rw [dist_eq_norm, add_sub_cancel, div_mul_eq_div_div, ← add_div, ← add_div, add_self_div_two,\n      div_le_iff' (by positivity : 0 < (n : exprℝ)), ← nsmul_eq_mul]\n    refine'\n      (le_add_order_smul_norm_of_is_of_fin_add_order (hu.of_mem_zmultiples hg) hg').trans\n        (nsmul_le_nsmul (norm_nonneg g) _)\n    exact nat.le_of_dvd (add_order_of_pos_iff.mpr hu) (addOrderOf_dvd_of_mem_zmultiples hg)\n  ·-- `∀ (g : G), quasi_measure_preserving (has_vadd.vadd g) volume volume`\n    exact fun g => quasi_measure_preserving_add_left volume g\n  · -- `volume univ ≤ ∑' (g : G), volume (g +ᵥ I)`\n    replace hI : «expr =ᵐ[ ] » I volume (closed_ball x (T / (2 * ↑n))) := hI.trans closed_ball_ae_eq_ball.symm\n    haveI : Fintype G := @Fintype.ofFinite _ hu.finite_zmultiples\n    have hG_card : (Finset.univ : Finset G).card = n :=\n      by\n      show _ = addOrderOf u\n      rw [add_order_eq_card_zmultiples', Nat.card_eq_fintype_card]\n      rfl\n    simp_rw [measure_vadd]\n    rw [add_circle.measure_univ, tsum_fintype, Finset.sum_const, measure_congr hI, volume_closed_ball, ←\n      ENNReal.ofReal_nsmul, mul_div, mul_div_mul_comm, div_self (@two_ne_zero (exprℝ) _ _ _ _), one_mul,\n      min_eq_right (div_le_self hT.out.le hn), hG_card, nsmul_eq_mul,\n      mul_div_cancel' T (lt_of_lt_of_le zero_lt_one hn).ne.symm]\n    exact le_refl _\n#align is_add_fundamental_domain_of_ae_ball is_add_fundamental_domain_of_ae_ball\n\n",
 "closed_ball_ae_eq_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/-\nCopyright (c) 2022 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\ntheorem closed_ball_ae_eq_ball {x : add_circle T} {ε : exprℝ} : «expr =ᵐ[ ] » (closedBall x ε) volume (ball x ε) :=\n  by\n  cases' le_or_lt ε 0 with hε hε\n  · rw [ball_eq_empty.mpr hε, ae_eq_empty, volume_closed_ball, min_eq_right (by linarith [hT.out] : 2 * ε ≤ T),\n      ENNReal.ofReal_eq_zero]\n    exact mul_nonpos_of_nonneg_of_nonpos zero_le_two hε\n  · suffices volume (closed_ball x ε) ≤ volume (ball x ε) by\n      exact (ae_eq_of_subset_of_measure_ge ball_subset_closed_ball this measurable_set_ball (measure_ne_top _ _)).symm\n    have : tendsto (fun δ => volume (closed_ball x δ)) (nhds_within.lt ε) (nhds <| volume (closed_ball x ε)) :=\n      by\n      simp_rw [volume_closed_ball]\n      refine' ENNReal.tendsto_ofReal (tendsto.min tendsto_const_nhds <| tendsto.const_mul _ _)\n      convert(@monotone_id (exprℝ) _).tendsto_nhds_within_Iio ε\n      simp\n    refine' le_of_tendsto this (mem_nhds_within_Iio_iff_exists_Ioo_subset.mpr ⟨0, hε, fun r hr => _⟩)\n    exact measure_mono (closed_ball_subset_ball hr.2)\n#align closed_ball_ae_eq_ball closed_ball_ae_eq_ball\n\n"}