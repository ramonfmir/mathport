{"lintegral_mul_right_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- Translating a function by right-multiplication does not change its `measure_theory.lintegral`\nwith respect to a right-invariant measure. -/\n@[to_additive\n      \"Translating a function by right-addition does not change its\\n`measure_theory.lintegral` with respect to a right-invariant measure.\"]\ntheorem lintegral_mul_right_eq_self [is_mul_right_invariant μ] (f : G → ennreal) (g : G) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f (x * g))\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x) μ :=\n  by\n  convert(lintegral_map_equiv f <| MeasurableEquiv.mulRight g).symm\n  simp [map_mul_right_eq_self μ g]\n#align lintegral_mul_right_eq_self lintegral_mul_right_eq_self\n\n",
 "lintegral_mul_left_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- Translating a function by left-multiplication does not change its `measure_theory.lintegral`\nwith respect to a left-invariant measure. -/\n@[to_additive\n      \"Translating a function by left-addition does not change its\\n`measure_theory.lintegral` with respect to a left-invariant measure.\"]\ntheorem lintegral_mul_left_eq_self [is_mul_left_invariant μ] (f : G → ennreal) (g : G) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f (g * x))\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x) μ :=\n  by\n  convert(lintegral_map_equiv f <| MeasurableEquiv.mulLeft g).symm\n  simp [map_mul_left_eq_self μ g]\n#align lintegral_mul_left_eq_self lintegral_mul_left_eq_self\n\n",
 "lintegral_eq_zero_of_is_mul_left_invariant":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- For nonzero regular left invariant measures, the integral of a continuous nonnegative function\n  `f` is 0 iff `f` is 0. -/\n@[to_additive\n      \"For nonzero regular left invariant measures, the integral of a continuous nonnegative\\nfunction `f` is 0 iff `f` is 0.\"]\ntheorem lintegral_eq_zero_of_is_mul_left_invariant [regular μ] (hμ : μ ≠ 0) {f : G → ennreal} (hf : Continuous f) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x) μ = 0 ↔\n      f = 0 :=\n  by\n  haveI := is_open_pos_measure_of_mul_left_invariant_of_regular hμ\n  rw [lintegral_eq_zero_iff hf.measurable, hf.ae_eq_iff_eq μ continuous_zero]\n#align lintegral_eq_zero_of_is_mul_left_invariant lintegral_eq_zero_of_is_mul_left_invariant\n\n",
 "lintegral_div_right_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n@[simp, to_additive]\ntheorem lintegral_div_right_eq_self [is_mul_right_invariant μ] (f : G → ennreal) (g : G) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f (x / g))\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x) μ :=\n  by simp_rw [div_eq_mul_inv, lintegral_mul_right_eq_self f g⁻¹]\n#align lintegral_div_right_eq_self lintegral_div_right_eq_self\n\n",
 "integral_smul_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n@[simp, to_additive]\ntheorem integral_smul_eq_self {μ : Measure α} [smul_invariant_measure G α μ] (f : α → E) {g : G} :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\"\n        (f («expr • » g x)) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by\n  have h : MeasurableEmbedding fun x : α => «expr • » g x := (MeasurableEquiv.smul g).measurable_embedding\n  rw [← h.integral_map, map_smul]\n#align integral_smul_eq_self integral_smul_eq_self\n\n",
 "integral_mul_right_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- Translating a function by right-multiplication does not change its integral with respect to a\nright-invariant measure. -/\n@[simp,\n  to_additive\n      \"Translating a function by right-addition does not change its integral with\\n  respect to a right-invariant measure.\"]\ntheorem integral_mul_right_eq_self [is_mul_right_invariant μ] (f : G → E) (g : G) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f (x * g)) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by\n  have h_mul : MeasurableEmbedding fun x => x * g := (MeasurableEquiv.mulRight g).measurable_embedding\n  rw [← h_mul.integral_map, map_mul_right_eq_self]\n#align integral_mul_right_eq_self integral_mul_right_eq_self\n\n",
 "integral_mul_left_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- Translating a function by left-multiplication does not change its integral with respect to a\nleft-invariant measure. -/\n@[simp,\n  to_additive\n      \"Translating a function by left-addition does not change its integral with\\n  respect to a left-invariant measure.\"]\ntheorem integral_mul_left_eq_self [is_mul_left_invariant μ] (f : G → E) (g : G) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f (g * x)) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by\n  have h_mul : MeasurableEmbedding fun x => g * x := (MeasurableEquiv.mulLeft g).measurable_embedding\n  rw [← h_mul.integral_map, map_mul_left_eq_self]\n#align integral_mul_left_eq_self integral_mul_left_eq_self\n\n",
 "integral_inv_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n@[to_additive]\ntheorem integral_inv_eq_self (f : G → E) (μ : Measure G) [is_inv_invariant μ] :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x⁻¹) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by\n  have h : MeasurableEmbedding fun x : G => x⁻¹ := (MeasurableEquiv.inv G).measurable_embedding\n  rw [← h.integral_map, map_inv_eq_self]\n#align integral_inv_eq_self integral_inv_eq_self\n\n",
 "integral_eq_zero_of_mul_right_eq_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- If some right-translate of a function negates it, then the integral of the function with respect\nto a right-invariant measure is 0. -/\n@[to_additive\n      \"If some right-translate of a function negates it, then the integral of the function\\nwith respect to a right-invariant measure is 0.\"]\ntheorem integral_eq_zero_of_mul_right_eq_neg [is_mul_right_invariant μ] (hf' : ∀ x, f (x * g) = -f x) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ = 0 :=\n  by simp_rw [← self_eq_neg (exprℝ) E, ← integral_neg, ← hf', integral_mul_right_eq_self]\n#align integral_eq_zero_of_mul_right_eq_neg integral_eq_zero_of_mul_right_eq_neg\n\n",
 "integral_eq_zero_of_mul_left_eq_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/-- If some left-translate of a function negates it, then the integral of the function with respect\nto a left-invariant measure is 0. -/\n@[to_additive\n      \"If some left-translate of a function negates it, then the integral of the function\\nwith respect to a left-invariant measure is 0.\"]\ntheorem integral_eq_zero_of_mul_left_eq_neg [is_mul_left_invariant μ] (hf' : ∀ x, f (g * x) = -f x) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ = 0 :=\n  by simp_rw [← self_eq_neg (exprℝ) E, ← integral_neg, ← hf', integral_mul_left_eq_self]\n#align integral_eq_zero_of_mul_left_eq_neg integral_eq_zero_of_mul_left_eq_neg\n\n",
 "integral_div_right_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n@[simp, to_additive]\ntheorem integral_div_right_eq_self [is_mul_right_invariant μ] (f : G → E) (g : G) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f (x / g)) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by simp_rw [div_eq_mul_inv, integral_mul_right_eq_self f g⁻¹]\n#align integral_div_right_eq_self integral_div_right_eq_self\n\n",
 "integral_div_left_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n@[simp, to_additive]\ntheorem integral_div_left_eq_self (f : G → E) (μ : Measure G) [is_inv_invariant μ] [is_mul_left_invariant μ] (x' : G) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f (x' / x)) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ :=\n  by simp_rw [div_eq_mul_inv, integral_inv_eq_self (fun x => f (x' * x)) μ, integral_mul_left_eq_self f x']\n#align integral_div_left_eq_self integral_div_left_eq_self\n\n",
 "integrable_comp_div_left":
 "@[simp, to_additive]\ntheorem integrable_comp_div_left (f : G → F) [is_inv_invariant μ] [is_mul_left_invariant μ] (g : G) :\n    integrable (fun t => f (g / t)) μ ↔ integrable f μ :=\n  by\n  refine' ⟨fun h => _, fun h => h.comp_div_left g⟩\n  convert h.comp_inv.comp_mul_left g⁻¹\n  simp_rw [div_inv_eq_mul, mul_inv_cancel_left]\n#align integrable_comp_div_left integrable_comp_div_left\n\n",
 "comp_mul_right":
 "@[to_additive]\ntheorem integrable.comp_mul_right {f : G → F} [is_mul_right_invariant μ] (hf : integrable f μ) (g : G) :\n    integrable (fun t => f (t * g)) μ :=\n  (hf.mono_measure (map_mul_right_eq_self μ g).le).comp_measurable <| measurable_mul_const g\n#align integrable.comp_mul_right integrable.comp_mul_right\n\n",
 "comp_mul_left":
 "@[to_additive]\ntheorem integrable.comp_mul_left {f : G → F} [is_mul_left_invariant μ] (hf : integrable f μ) (g : G) :\n    integrable (fun t => f (g * t)) μ :=\n  (hf.mono_measure (map_mul_left_eq_self μ g).le).comp_measurable <| measurable_const_mul g\n#align integrable.comp_mul_left integrable.comp_mul_left\n\n",
 "comp_inv":
 "/-\nCopyright (c) 2022 Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn\n-/\n@[to_additive]\ntheorem integrable.comp_inv [is_inv_invariant μ] {f : G → F} (hf : integrable f μ) : integrable (fun t => f t⁻¹) μ :=\n  (hf.mono_measure (map_inv_eq_self μ).le).comp_measurable measurable_inv\n#align integrable.comp_inv integrable.comp_inv\n\n",
 "comp_div_right":
 "@[to_additive]\ntheorem integrable.comp_div_right {f : G → F} [is_mul_right_invariant μ] (hf : integrable f μ) (g : G) :\n    integrable (fun t => f (t / g)) μ := by\n  simp_rw [div_eq_mul_inv]\n  exact hf.comp_mul_right g⁻¹\n#align integrable.comp_div_right integrable.comp_div_right\n\n",
 "comp_div_left":
 "@[to_additive]\ntheorem integrable.comp_div_left {f : G → F} [is_inv_invariant μ] [is_mul_left_invariant μ] (hf : integrable f μ)\n    (g : G) : integrable (fun t => f (g / t)) μ :=\n  ((measure_preserving_div_left μ g).integrable_comp hf.ae_strongly_measurable).mpr hf\n#align integrable.comp_div_left integrable.comp_div_left\n\n"}