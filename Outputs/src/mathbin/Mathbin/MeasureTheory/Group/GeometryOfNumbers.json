{"exists_pair_mem_lattice_not_disjoint_vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/-\nCopyright (c) 2021 Alex J. Best. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alex J. Best\n-/\n/-- **Blichfeldt's Theorem**. If the volume of the set `s` is larger than the covolume of the\ncountable subgroup `L` of `E`, then there exists two distincts points `x, y ∈ L` such that `(x + s)`\nand `(y + s)` are not disjoint. -/\ntheorem exists_pair_mem_lattice_not_disjoint_vadd [AddCommGroup L] [Countable L] [AddAction L E] [MeasurableSpace L]\n    [MeasurableVAdd L E] [vadd_invariant_measure L E μ] (fund : is_add_fundamental_domain L F μ)\n    (hS : NullMeasurableSet s μ) (h : μ F < μ s) : ∃ x y : L, x ≠ y ∧ ¬Disjoint («expr +ᵥ » x s) («expr +ᵥ » y s) :=\n  by\n  contrapose! h\n  exact\n    ((fund.measure_eq_tsum _).trans\n          (measure_Union₀ (Pairwise.mono h fun i j hij => (hij.mono inf_le_left inf_le_left).ae_disjoint) fun _ =>\n              (hS.vadd _).inter fund.null_measurable_set).symm).trans_le\n      (measure_mono <| Union_subset fun _ => inter_subset_right _ _)\n#align exists_pair_mem_lattice_not_disjoint_vadd exists_pair_mem_lattice_not_disjoint_vadd\n\n",
 "exists_ne_zero_mem_lattice_of_measure_mul_two_pow_lt_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (x «expr ≠ » 0) -/\n/-- The **Minkowksi Convex Body Theorem**. If `s` is a convex symmetric domain of `E` whose volume\nis large enough compared to the covolume of a lattice `L` of `E`, then it contains a non-zero\nlattice point of `L`.  -/\ntheorem exists_ne_zero_mem_lattice_of_measure_mul_two_pow_lt_measure [NormedAddCommGroup E] [NormedSpace (exprℝ) E]\n    [borel_space E] [FiniteDimensional (exprℝ) E] [is_add_haar_measure μ] {L : AddSubgroup E} [Countable L]\n    (fund : is_add_fundamental_domain L F μ) (h : μ F * 2 ^ finrank (exprℝ) E < μ s) (h_symm : ∀ x ∈ s, -x ∈ s)\n    (h_conv : Convex (exprℝ) s) : ∃ (x : _)(_ : x ≠ 0), ((x : L) : E) ∈ s :=\n  by\n  have h_vol : μ F < μ («expr • » (2⁻¹ : exprℝ) s) := by\n    rwa [add_haar_smul_of_nonneg μ (by norm_num : 0 ≤ (2 : exprℝ)⁻¹) s, ←\n      mul_lt_mul_right (pow_ne_zero (finrank (exprℝ) E) (two_ne_zero' _)) (pow_ne_top two_ne_top), mul_right_comm,\n      of_real_pow (by norm_num : 0 ≤ (2 : exprℝ)⁻¹), ← of_real_inv_of_pos zero_lt_two, of_real_bit0, of_real_one, ←\n      mul_pow, ENNReal.inv_mul_cancel two_ne_zero two_ne_top, one_pow, one_mul]\n  obtain ⟨x, y, hxy, h⟩ := exists_pair_mem_lattice_not_disjoint_vadd fund ((h_conv.smul _).null_measurable_set _) h_vol\n  obtain ⟨_, ⟨v, hv, rfl⟩, w, hw, hvw⟩ := not_disjoint_iff.mp h\n  refine' ⟨x - y, sub_ne_zero.2 hxy, _⟩\n  rw [mem_inv_smul_set_iff₀ (two_ne_zero' (exprℝ))] at hv hw\n  simp_rw [AddSubgroup.vadd_def, vadd_eq_add, add_comm _ w, ← sub_eq_sub_iff_add_eq_add, ← AddSubgroup.coe_sub] at hvw\n  rw [← hvw, ← inv_smul_smul₀ (two_ne_zero' (exprℝ)) (_ - _), smul_sub, sub_eq_add_neg, smul_add]\n  refine' h_conv hw (h_symm _ hv) _ _ _ <;> norm_num\n#align exists_ne_zero_mem_lattice_of_measure_mul_two_pow_lt_measure exists_ne_zero_mem_lattice_of_measure_mul_two_pow_lt_measure\n\n"}