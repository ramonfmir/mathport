{"sup_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print AEMeasurable.sup_const /-\n@[measurability]\ntheorem AEMeasurable.sup_const (hf : AEMeasurable f μ) (c : M) : AEMeasurable (fun x => «expr ⊔ » (f x) c) μ :=\n  (measurable_sup_const c).comp_ae_measurable hf\n#align ae_measurable.sup_const AEMeasurable.sup_const\n-/\n\n",
 "sup'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print AEMeasurable.sup' /-\n@[measurability]\ntheorem AEMeasurable.sup' (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) : AEMeasurable («expr ⊔ » f g) μ :=\n  measurable_sup.comp_ae_measurable (hf.prod_mk hg)\n#align ae_measurable.sup' AEMeasurable.sup'\n-/\n\n",
 "sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print AEMeasurable.sup /-\n@[measurability]\ntheorem AEMeasurable.sup (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) :\n    AEMeasurable (fun a => «expr ⊔ » (f a) (g a)) μ :=\n  measurable_sup.comp_ae_measurable (hf.prod_mk hg)\n#align ae_measurable.sup AEMeasurable.sup\n-/\n\n",
 "measurable_sup'":
 "#print Finset.measurable_sup' /-\n@[measurability]\ntheorem Finset.measurable_sup' {ι : Type _} {s : Finset ι} (hs : s.nonempty) {f : ι → δ → α}\n    (hf : ∀ n ∈ s, Measurable (f n)) : Measurable (s.sup' hs f) :=\n  Finset.sup'_induction hs _ (fun f hf g hg => hf.sup hg) fun n hn => hf n hn\n#align finset.measurable_sup' Finset.measurable_sup'\n-/\n\n",
 "measurable_range_sup''":
 "#print Finset.measurable_range_sup'' /-\n@[measurability]\ntheorem Finset.measurable_range_sup'' {f : ℕ → δ → α} {n : ℕ} (hf : ∀ k ≤ n, Measurable (f k)) :\n    Measurable fun x => (range (n + 1)).sup' nonempty_range_succ fun k => f k x :=\n  by\n  convert Finset.measurable_range_sup' hf\n  ext x\n  simp\n#align finset.measurable_range_sup'' Finset.measurable_range_sup''\n-/\n\n",
 "measurable_range_sup'":
 "#print Finset.measurable_range_sup' /-\n@[measurability]\ntheorem Finset.measurable_range_sup' {f : ℕ → δ → α} {n : ℕ} (hf : ∀ k ≤ n, Measurable (f k)) :\n    Measurable ((range (n + 1)).sup' nonempty_range_succ f) :=\n  by\n  simp_rw [← Nat.lt_succ_iff] at hf\n  refine' Finset.measurable_sup' _ _\n  simpa [Finset.mem_range]\n#align finset.measurable_range_sup' Finset.measurable_range_sup'\n-/\n\n",
 "inf_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print AEMeasurable.inf_const /-\n@[measurability]\ntheorem AEMeasurable.inf_const (hf : AEMeasurable f μ) (c : M) : AEMeasurable (fun x => «expr ⊓ » (f x) c) μ :=\n  (measurable_inf_const c).comp_ae_measurable hf\n#align ae_measurable.inf_const AEMeasurable.inf_const\n-/\n\n",
 "inf'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print AEMeasurable.inf' /-\n@[measurability]\ntheorem AEMeasurable.inf' (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) : AEMeasurable («expr ⊓ » f g) μ :=\n  measurable_inf.comp_ae_measurable (hf.prod_mk hg)\n#align ae_measurable.inf' AEMeasurable.inf'\n-/\n\n",
 "inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print AEMeasurable.inf /-\n@[measurability]\ntheorem AEMeasurable.inf (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) :\n    AEMeasurable (fun a => «expr ⊓ » (f a) (g a)) μ :=\n  measurable_inf.comp_ae_measurable (hf.prod_mk hg)\n#align ae_measurable.inf AEMeasurable.inf\n-/\n\n",
 "const_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print AEMeasurable.const_sup /-\n@[measurability]\ntheorem AEMeasurable.const_sup (hf : AEMeasurable f μ) (c : M) : AEMeasurable (fun x => «expr ⊔ » c (f x)) μ :=\n  (MeasurableSup.measurable_const_sup c).comp_ae_measurable hf\n#align ae_measurable.const_sup AEMeasurable.const_sup\n-/\n\n",
 "const_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print AEMeasurable.const_inf /-\n@[measurability]\ntheorem AEMeasurable.const_inf (hf : AEMeasurable f μ) (c : M) : AEMeasurable (fun x => «expr ⊓ » c (f x)) μ :=\n  (MeasurableInf.measurable_const_inf c).comp_ae_measurable hf\n#align ae_measurable.const_inf AEMeasurable.const_inf\n-/\n\n"}