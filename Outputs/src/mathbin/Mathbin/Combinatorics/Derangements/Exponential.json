{"num_derangements_tendsto_inv_e":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-\nCopyright (c) 2021 Henry Swanson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Henry Swanson, Patrick Massot\n-/\ntheorem num_derangements_tendsto_inv_e :\n    Tendsto (fun n => (numDerangements n : exprℝ) / n.factorial) atTop ((nhds) (Real.exp (-1))) :=\n  by\n  -- we show that d(n)/n! is the partial sum of exp(-1), but offset by 1.\n  -- this isn't entirely obvious, since we have to ensure that asc_factorial and\n  -- factorial interact in the right way, e.g., that k ≤ n always\n  let s : ℕ → exprℝ := fun n =>\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Finset.range n)\n      ((-1 : exprℝ) ^ k / k.factorial)\n  suffices ∀ n : ℕ, (numDerangements n : exprℝ) / n.factorial = s (n + 1)\n    by\n    simp_rw [this]\n    -- shift the function by 1, and then use the fact that the partial sums\n    -- converge to the infinite sum\n    rw [tendsto_add_at_top_iff_nat 1]\n    apply HasSum.tendsto_sum_nat\n    -- there's no specific lemma for ℝ that ∑ x^k/k! sums to exp(x), but it's\n    -- true in more general fields, so use that lemma\n    rw [real.exp_eq_exp_ℝ]\n    exact exp_series_div_has_sum_exp (exprℝ) (-1 : exprℝ)\n  intro n\n  rw [← Int.cast_ofNat, numDerangements_sum]\n  push_cast\n  rw [Finset.sum_div]\n  -- get down to individual terms\n  refine' Finset.sum_congr (refl _) _\n  intro k hk\n  have h_le : k ≤ n := finset.mem_range_succ_iff.mp hk\n  rw [Nat.ascFactorial_eq_div, add_tsub_cancel_of_le h_le]\n  push_cast [Nat.factorial_dvd_factorial h_le]\n  field_simp [Nat.factorial_ne_zero]\n  ring\n#align num_derangements_tendsto_inv_e num_derangements_tendsto_inv_e\n\n"}