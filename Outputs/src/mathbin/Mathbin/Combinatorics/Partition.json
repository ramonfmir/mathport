{"of_composition_surj":
 "/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\ntheorem of_composition_surj {n : ℕ} : function.surjective (ofComposition n) :=\n  by\n  rintro ⟨b, hb₁, hb₂⟩\n  rcases quotient.exists_rep b with ⟨b, rfl⟩\n  refine' ⟨⟨b, fun i hi => hb₁ hi, _⟩, partition.ext _ _ rfl⟩\n  simpa using hb₂\n#align of_composition_surj of_composition_surj\n\n",
 "count_of_sums_zero":
 "theorem count_of_sums_zero {n : ℕ} {l : Multiset ℕ} (hl : l.sum = n) : (ofSums n l hl).parts.count 0 = 0 :=\n  count_filter_of_neg fun h => h rfl\n#align count_of_sums_zero count_of_sums_zero\n\n",
 "count_of_sums_of_ne_zero":
 "-- The argument `n` is kept explicit here since it is useful in tactic mode proofs to generate the\n-- proof obligation `l.sum = n`.\n/-- The number of times a positive integer `i` appears in the partition `of_sums n l hl` is the same\nas the number of times it appears in the multiset `l`.\n(For `i = 0`, `partition.non_zero` combined with `multiset.count_eq_zero_of_not_mem` gives that\nthis is `0` instead.)\n-/\ntheorem count_of_sums_of_ne_zero {n : ℕ} {l : Multiset ℕ} (hl : l.sum = n) {i : ℕ} (hi : i ≠ 0) :\n    (ofSums n l hl).parts.count i = l.count i :=\n  count_filter_of_pos hi\n#align count_of_sums_of_ne_zero count_of_sums_of_ne_zero\n\n"}