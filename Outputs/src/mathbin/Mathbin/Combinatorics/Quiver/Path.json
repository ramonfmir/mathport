{"to_list_injective":
 "theorem to_list_injective (a : V) : ∀ b, injective (to_list : path a b → list V)\n  | b, nil, nil, h => rfl\n  | b, nil, @cons _ _ _ c _ p f, h => by cases h\n  | b, @cons _ _ _ c _ p f, nil, h => by cases h\n  | b, @cons _ _ _ c _ p f, @cons _ _ s t u C D, h =>\n    by\n    simp only [to_list] at h\n    obtain ⟨rfl, hAC⟩ := h\n    simp [to_list_injective _ hAC]\n#align to_list_injective to_list_injective\n\n",
 "to_list_inj":
 "@[simp]\ntheorem to_list_inj {p q : path a b} : p.to_list = q.to_list ↔ p = q :=\n  (toList_injective _ _).eq_iff\n#align to_list_inj to_list_inj\n\n",
 "to_list_comp":
 "/-- `quiver.path.to_list` is a contravariant functor. The inversion comes from `quiver.path` and\n`list` having different preferred directions for adding elements. -/\n@[simp]\ntheorem to_list_comp (p : path a b) : ∀ {c} (q : path b c), (p.comp q).to_list = q.to_list ++ p.to_list\n  | c, nil => by simp\n  | c, @cons _ _ _ d _ q f => by simp [to_list_comp]\n#align to_list_comp to_list_comp\n\n",
 "to_list_chain_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem to_list_chain_nonempty : ∀ {b} (p : path a b), p.to_list.chain (fun x y => nonempty («expr ⟶ » y x)) b\n  | b, nil => List.Chain.nil\n  | b, cons p f => p.to_list_chain_nonempty.cons ⟨f⟩\n#align to_list_chain_nonempty to_list_chain_nonempty\n\n",
 "obj_eq_of_cons_eq_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem obj_eq_of_cons_eq_cons {p : path a b} {p' : path a c} {e : «expr ⟶ » b d} {e' : «expr ⟶ » c d}\n    (h : p.cons e = p'.cons e') : b = c := by injection h\n#align obj_eq_of_cons_eq_cons obj_eq_of_cons_eq_cons\n\n",
 "nil_ne_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2021 David Wärn,. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: David Wärn, Scott Morrison\n-/\ntheorem nil_ne_cons (p : path a b) (e : «expr ⟶ » b a) : path.nil ≠ p.cons e :=\n  fun.\n#align nil_ne_cons nil_ne_cons\n\n",
 "nil_comp":
 "@[simp]\ntheorem nil_comp {a : V} : ∀ {b} (p : path a b), path.nil.comp p = p\n  | a, path.nil => rfl\n  | b, path.cons p e => by rw [comp_cons, nil_comp]\n#align nil_comp nil_comp\n\n",
 "map_path_to_path":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_path_to_path {a b : V} (f : «expr ⟶ » a b) : F.map_path f.to_path = (F.map f).to_path :=\n  rfl\n#align map_path_to_path map_path_to_path\n\n",
 "map_path_nil":
 "@[simp]\ntheorem map_path_nil (a : V) : F.map_path (path.nil : path a a) = path.nil :=\n  rfl\n#align map_path_nil map_path_nil\n\n",
 "map_path_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_path_cons {a b c : V} (p : path a b) (e : «expr ⟶ » b c) :\n    F.map_path (path.cons p e) = path.cons (F.map_path p) (F.map e) :=\n  rfl\n#align map_path_cons map_path_cons\n\n",
 "map_path_comp":
 "@[simp]\ntheorem map_path_comp {a b : V} (p : path a b) :\n    ∀ {c : V} (q : path b c), F.map_path (p.comp q) = (F.map_path p).comp (F.map_path q)\n  | _, path.nil => rfl\n  | _, path.cons p e => by dsimp; rw [map_path_comp]\n#align map_path_comp map_path_comp\n\n",
 "length_nil":
 "@[simp]\ntheorem length_nil {a : V} : (path.nil : path a a).length = 0 :=\n  rfl\n#align length_nil length_nil\n\n",
 "length_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem length_cons (a b c : V) (p : path a b) (e : «expr ⟶ » b c) : (p.cons e).length = p.length + 1 :=\n  rfl\n#align length_cons length_cons\n\n",
 "length_comp":
 "@[simp]\ntheorem length_comp (p : path a b) : ∀ {c} (q : path b c), (p.comp q).length = p.length + q.length\n  | c, nil => rfl\n  | c, cons q h => congr_arg nat.succ q.length_comp\n#align length_comp length_comp\n\n",
 "hom_heq_of_cons_eq_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem hom_heq_of_cons_eq_cons {p : path a b} {p' : path a c} {e : «expr ⟶ » b d} {e' : «expr ⟶ » c d}\n    (h : p.cons e = p'.cons e') : HEq e e' := by injection h\n#align hom_heq_of_cons_eq_cons hom_heq_of_cons_eq_cons\n\n",
 "heq_of_cons_eq_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem heq_of_cons_eq_cons {p : path a b} {p' : path a c} {e : «expr ⟶ » b d} {e' : «expr ⟶ » c d}\n    (h : p.cons e = p'.cons e') : HEq p p' := by injection h\n#align heq_of_cons_eq_cons heq_of_cons_eq_cons\n\n",
 "eq_of_length_zero":
 "theorem eq_of_length_zero (p : path a b) (hzero : p.length = 0) : a = b :=\n  by\n  cases p\n  · rfl\n  · cases nat.succ_ne_zero _ hzero\n#align eq_of_length_zero eq_of_length_zero\n\n",
 "cons_ne_nil":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem cons_ne_nil (p : path a b) (e : «expr ⟶ » b a) : p.cons e ≠ path.nil :=\n  fun.\n#align cons_ne_nil cons_ne_nil\n\n",
 "comp_nil":
 "@[simp]\ntheorem comp_nil {a b : V} (p : path a b) : p.comp path.nil = p :=\n  rfl\n#align comp_nil comp_nil\n\n",
 "comp_injective_right":
 "theorem comp_injective_right (p : path a b) : injective (p.comp : path b c → path a c) := fun q₁ q₂ h =>\n  ((comp_inj' rfl).1 h).2\n#align comp_injective_right comp_injective_right\n\n",
 "comp_injective_left":
 "theorem comp_injective_left (q : path b c) : injective fun p : path a b => p.comp q := fun p₁ p₂ h =>\n  ((comp_inj rfl).1 h).1\n#align comp_injective_left comp_injective_left\n\n",
 "comp_inj_right":
 "@[simp]\ntheorem comp_inj_right {p : path a b} {q₁ q₂ : path b c} : p.comp q₁ = p.comp q₂ ↔ q₁ = q₂ :=\n  p.comp_injective_right.eq_iff\n#align comp_inj_right comp_inj_right\n\n",
 "comp_inj_left":
 "@[simp]\ntheorem comp_inj_left {p₁ p₂ : path a b} {q : path b c} : p₁.comp q = p₂.comp q ↔ p₁ = p₂ :=\n  q.comp_injective_left.eq_iff\n#align comp_inj_left comp_inj_left\n\n",
 "comp_inj'":
 "theorem comp_inj' {p₁ p₂ : path a b} {q₁ q₂ : path b c} (h : p₁.length = p₂.length) :\n    p₁.comp q₁ = p₂.comp q₂ ↔ p₁ = p₂ ∧ q₁ = q₂ :=\n  ⟨fun h_eq => (comp_inj <| nat.add_left_cancel <| by simpa [h] using congr_arg length h_eq).1 h_eq,\n    by\n    rintro ⟨rfl, rfl⟩\n    rfl⟩\n#align comp_inj' comp_inj'\n\n",
 "comp_inj":
 "theorem comp_inj {p₁ p₂ : path a b} {q₁ q₂ : path b c} (hq : q₁.length = q₂.length) :\n    p₁.comp q₁ = p₂.comp q₂ ↔ p₁ = p₂ ∧ q₁ = q₂ :=\n  by\n  refine'\n    ⟨fun h => _, by\n      rintro ⟨rfl, rfl⟩\n      rfl⟩\n  induction' q₁ with d₁ e₁ q₁ f₁ ih generalizing q₂ <;> obtain _ | ⟨q₂, f₂⟩ := q₂\n  · exact ⟨h, rfl⟩\n  · cases hq\n  · cases hq\n  simp only [comp_cons] at h\n  obtain rfl := h.1\n  obtain ⟨rfl, rfl⟩ := ih (nat.succ.inj hq) h.2.1.eq\n  rw [h.2.2.eq]\n  exact ⟨rfl, rfl⟩\n#align comp_inj comp_inj\n\n",
 "comp_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem comp_cons {a b c d : V} (p : path a b) (q : path b c) (e : «expr ⟶ » c d) :\n    p.comp (q.cons e) = (p.comp q).cons e :=\n  rfl\n#align comp_cons comp_cons\n\n",
 "comp_assoc":
 "@[simp]\ntheorem comp_assoc {a b c : V} :\n    ∀ {d} (p : path a b) (q : path b c) (r : path c d), (p.comp q).comp r = p.comp (q.comp r)\n  | c, p, q, path.nil => rfl\n  | d, p, q, path.cons r e => by rw [comp_cons, comp_cons, comp_cons, comp_assoc]\n#align comp_assoc comp_assoc\n\n"}