{"hom_cast_eq_of_cons_eq_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem hom_cast_eq_of_cons_eq_cons {u v v' w : U} {p : path u v} {p' : path u v'} {e : «expr ⟶ » v w}\n    {e' : «expr ⟶ » v' w} (h : p.cons e = p'.cons e') : e.cast (obj_eq_of_cons_eq_cons h) rfl = e' :=\n  by\n  rw [hom.cast_eq_iff_heq]\n  exact hom_heq_of_cons_eq_cons h\n#align hom_cast_eq_of_cons_eq_cons hom_cast_eq_of_cons_eq_cons\n\n",
 "eq_nil_of_length_zero":
 "theorem eq_nil_of_length_zero {u v : U} (p : path u v) (hzero : p.length = 0) :\n    p.cast (eq_of_length_zero p hzero) rfl = path.nil := by\n  cases p <;> simpa only [nat.succ_ne_zero, length_cons] using hzero\n#align eq_nil_of_length_zero eq_nil_of_length_zero\n\n",
 "eq_cast_iff_heq":
 "theorem path.eq_cast_iff_heq {u v u' v' : U} (hu : u = u') (hv : v = v') (p : path u v) (p' : path u' v') :\n    p' = p.cast hu hv ↔ HEq p' p :=\n  ⟨fun h => ((p.cast_eq_iff_heq hu hv p').1 h.symm).symm, fun h => ((p.cast_eq_iff_heq hu hv p').2 h.symm).symm⟩\n#align path.eq_cast_iff_heq path.eq_cast_iff_heq\n\n",
 "cast_rfl_rfl":
 "@[simp]\ntheorem path.cast_rfl_rfl {u v : U} (p : path u v) : p.cast rfl rfl = p :=\n  rfl\n#align path.cast_rfl_rfl path.cast_rfl_rfl\n\n",
 "cast_nil":
 "@[simp]\ntheorem path.cast_nil {u u' : U} (hu : u = u') : (path.nil : path u u).cast hu hu = path.nil :=\n  by\n  subst_vars\n  rfl\n#align path.cast_nil path.cast_nil\n\n",
 "cast_heq":
 "theorem path.cast_heq {u v u' v' : U} (hu : u = u') (hv : v = v') (p : path u v) : HEq (p.cast hu hv) p :=\n  by\n  rw [path.cast_eq_cast]\n  exact cast_heq _ _\n#align path.cast_heq path.cast_heq\n\n",
 "cast_eq_of_cons_eq_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem cast_eq_of_cons_eq_cons {u v v' w : U} {p : path u v} {p' : path u v'} {e : «expr ⟶ » v w} {e' : «expr ⟶ » v' w}\n    (h : p.cons e = p'.cons e') : p.cast rfl (obj_eq_of_cons_eq_cons h) = p' :=\n  by\n  rw [path.cast_eq_iff_heq]\n  exact heq_of_cons_eq_cons h\n#align cast_eq_of_cons_eq_cons cast_eq_of_cons_eq_cons\n\n",
 "cast_eq_iff_heq":
 "theorem path.cast_eq_iff_heq {u v u' v' : U} (hu : u = u') (hv : v = v') (p : path u v) (p' : path u' v') :\n    p.cast hu hv = p' ↔ HEq p p' := by\n  rw [path.cast_eq_cast]\n  exact cast_eq_iff_heq\n#align path.cast_eq_iff_heq path.cast_eq_iff_heq\n\n",
 "cast_eq_cast":
 "theorem path.cast_eq_cast {u v u' v' : U} (hu : u = u') (hv : v = v') (p : path u v) :\n    p.cast hu hv = cast (by rw [hu, hv]) p :=\n  eq.drec (eq.drec (eq.refl (Path.cast (eq.refl u) (eq.refl v) p)) hu) hv\n#align path.cast_eq_cast path.cast_eq_cast\n\n",
 "cast_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem path.cast_cons {u v w u' w' : U} (p : path u v) (e : «expr ⟶ » v w) (hu : u = u') (hw : w = w') :\n    (p.cons e).cast hu hw = (p.cast hu rfl).cons (e.cast rfl hw) :=\n  by\n  subst_vars\n  rfl\n#align path.cast_cons path.cast_cons\n\n",
 "cast_cast":
 "@[simp]\ntheorem path.cast_cast {u v u' v' u'' v'' : U} (p : path u v) (hu : u = u') (hv : v = v') (hu' : u' = u'')\n    (hv' : v' = v'') : (p.cast hu hv).cast hu' hv' = p.cast (hu.trans hu') (hv.trans hv') :=\n  by\n  subst_vars\n  rfl\n#align path.cast_cast path.cast_cast\n\n"}