{"id_comp":
 "@[simp]\ntheorem id_comp {U : Type _} [Quiver U] {V : Type _} [Quiver V] (F : Prefunctor U V) : (id _).comp F = F :=\n  by\n  cases F\n  rfl\n#align id_comp id_comp\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2021 David Wärn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: David Wärn, Scott Morrison\n-/\n-- We use the same universe order as in category theory.\n-- See note [category_theory universes]\n-- type as \\h\n@[ext]\ntheorem ext {V : Type u} [Quiver.{v₁} V] {W : Type u₂} [Quiver.{v₂} W] {F G : Prefunctor V W}\n    (h_obj : ∀ X, F.obj X = G.obj X)\n    (h_map : ∀ (X Y : V) (f : «expr ⟶ » X Y), F.map f = eq.rec_on (h_obj Y).symm (eq.rec_on (h_obj X).symm (G.map f))) :\n    F = G := by\n  cases' F with F_obj _\n  cases' G with G_obj _\n  obtain rfl : F_obj = G_obj := by\n    ext X\n    apply h_obj\n  congr\n  funext X Y f\n  simpa using h_map X Y f\n#align ext ext\n\n",
 "empty_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem empty_arrow {V : Type u} (a b : Empty V) : «expr ⟶ » a b = PEmpty :=\n  rfl\n#align empty_arrow empty_arrow\n\n",
 "comp_id":
 "@[simp]\ntheorem comp_id {U : Type _} [Quiver U] {V : Type _} [Quiver V] (F : Prefunctor U V) : F.comp (id _) = F :=\n  by\n  cases F\n  rfl\n#align comp_id comp_id\n\n",
 "comp_assoc":
 "@[simp]\ntheorem comp_assoc {U V W Z : Type _} [Quiver U] [Quiver V] [Quiver W] [Quiver Z] (F : Prefunctor U V)\n    (G : Prefunctor V W) (H : Prefunctor W Z) : (F.comp G).comp H = F.comp (G.comp H) :=\n  rfl\n#align comp_assoc comp_assoc\n\n"}