{"symmetrify_reverse":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem symmetrify_reverse {a b : Symmetrify V} (e : «expr ⟶ » a b) : reverse e = e.swap :=\n  rfl\n#align symmetrify_reverse symmetrify_reverse\n\n",
 "reverse_to_path":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem path.reverse_to_path [HasReverse V] {a b : V} (f : «expr ⟶ » a b) : f.to_path.reverse = (reverse f).to_path :=\n  rfl\n#align path.reverse_to_path path.reverse_to_path\n\n",
 "reverse_reverse":
 "@[simp]\ntheorem path.reverse_reverse [HasInvolutiveReverse V] {a b : V} (p : Path a b) : p.reverse.reverse = p :=\n  by\n  induction p\n  · simp\n  · simp only [path.reverse, path.reverse_comp, path.reverse_to_path, reverse_reverse, p_ih]\n    rfl\n#align path.reverse_reverse path.reverse_reverse\n\n",
 "reverse_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem reverse_inj [HasInvolutiveReverse V] {a b : V} (f g : «expr ⟶ » a b) : reverse f = reverse g ↔ f = g :=\n  by\n  constructor\n  · rintro h\n    simpa using congr_arg Quiver.reverse h\n  · rintro h\n    congr\n    assumption\n#align reverse_inj reverse_inj\n\n",
 "reverse_comp":
 "@[simp]\ntheorem path.reverse_comp [HasReverse V] {a b c : V} (p : Path a b) (q : Path b c) :\n    (p.comp q).reverse = q.reverse.comp p.reverse := by\n  induction q\n  · simp\n  · simp [q_ih]\n#align path.reverse_comp path.reverse_comp\n\n",
 "of_reverse":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_reverse [h : HasInvolutiveReverse V] (X Y : V) (f : «expr ⟶ » X Y) :\n    (reverse <| (Push.of σ).map f) = (Push.of σ).map (reverse f) :=\n  rfl\n#align of_reverse of_reverse\n\n",
 "map_reverse'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤q » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print Prefunctor.map_reverse /-\n@[simp]\ntheorem Prefunctor.map_reverse (φ : «expr ⥤q » U V) [φ.map_reverse] {u v : U} (e : «expr ⟶ » u v) :\n    φ.map (reverse e) = reverse (φ.map e) :=\n  prefunctor.map_reverse.map_reverse' e\n#align prefunctor.map_reverse' Prefunctor.map_reverse\n-/\n\n",
 "lift_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤q » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤q » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙q » -/\n/-- `lift φ` is the only prefunctor extending `φ` and preserving reverses. -/\ntheorem lift_unique [HasReverse V'] (φ : «expr ⥤q » V V') (Φ : «expr ⥤q » (Symmetrify V) V') (hΦ : «expr ⋙q » of Φ = φ)\n    [hΦrev : Φ.map_reverse] : Φ = lift φ := by\n  subst_vars\n  fapply Prefunctor.ext\n  · rintro X\n    rfl\n  · rintro X Y f\n    cases f\n    · rfl\n    · dsimp [lift, of]\n      simp only [← Prefunctor.map_reverse, symmetrify_reverse, Sum.swap_inl]\n#align lift_unique lift_unique\n\n",
 "lift_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤q » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙q » -/\ntheorem lift_spec [HasReverse V'] (φ : «expr ⥤q » V V') : «expr ⋙q » of (lift φ) = φ :=\n  by\n  fapply Prefunctor.ext\n  · rintro X\n    rfl\n  · rintro X Y f\n    rfl\n#align lift_spec lift_spec\n\n",
 "lift_reverse":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤q » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem lift_reverse [h : HasInvolutiveReverse V'] (φ : «expr ⥤q » V V') {X Y : Symmetrify V} (f : «expr ⟶ » X Y) :\n    (lift φ).map (Quiver.reverse f) = Quiver.reverse ((lift φ).map f) :=\n  by\n  dsimp [lift]; cases f\n  · simp only\n    rfl\n  · simp only [reverse_reverse]\n    rfl\n#align lift_reverse lift_reverse\n\n",
 "eq_reverse_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem eq_reverse_iff [HasInvolutiveReverse V] {a b : V} (f : «expr ⟶ » a b) (g : «expr ⟶ » b a) :\n    f = reverse g ↔ reverse f = g := by rw [← reverse_inj, reverse_reverse]\n#align eq_reverse_iff eq_reverse_iff\n\n"}