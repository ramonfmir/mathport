{"card_bunionᵢ_le_of_intersecting":
 "#print Finset.card_bunionᵢ_le_of_intersecting /-\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\n/-- **Kleitman's theorem**. An intersecting family on `n` elements contains at most `2ⁿ⁻¹` sets, and\neach further intersecting family takes at most half of the sets that are in no previous family. -/\ntheorem Finset.card_bunionᵢ_le_of_intersecting (s : Finset ι) (f : ι → Finset (Finset α))\n    (hf : ∀ i ∈ s, (f i : Set (Finset α)).intersecting) : (s.bUnion f).card ≤ 2 ^ card α - 2 ^ (card α - s.card) :=\n  by\n  obtain hs | hs := le_total (card α) s.card\n  · rw [tsub_eq_zero_of_le hs, pow_zero]\n    refine'\n      (card_le_of_subset <|\n            bUnion_subset.2 fun i hi a ha => mem_compl.2 <| not_mem_singleton.2 <| (hf _ hi).ne_bot ha).trans_eq\n        _\n    rw [card_compl, Fintype.card_finset, card_singleton]\n  induction' s using Finset.cons_induction with i s hi ih generalizing f\n  · simp\n  classical\n    set f' : ι → Finset (Finset α) := fun j => if hj : j ∈ cons i s hi then (hf j hj).exists_card_eq.some else ∅ with\n      hf'\n    have hf₁ :\n      ∀ j, j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * (f' j).card = 2 ^ card α ∧ (f' j : Set (Finset α)).intersecting :=\n      by\n      rintro j hj\n      simp_rw [hf', dif_pos hj, ← Fintype.card_finset]\n      exact Classical.choose_spec (hf j hj).exists_card_eq\n    have hf₂ : ∀ j, j ∈ cons i s hi → IsUpperSet (f' j : Set (Finset α)) :=\n      by\n      refine' fun j hj => (hf₁ _ hj).2.2.is_upper_set' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)\n      rw [Fintype.card_finset]\n      exact (hf₁ _ hj).2.1\n    refine' (card_le_of_subset <| bUnion_mono fun j hj => (hf₁ _ hj).1).trans _\n    nth_rw 1 [cons_eq_insert i]\n    rw [bUnion_insert]\n    refine' (card_mono <| @le_sup_sdiff _ _ _ <| f' i).trans ((card_union_le _ _).trans _)\n    rw [union_sdiff_left, sdiff_eq_inter_compl]\n    refine' le_of_mul_le_mul_left _ (pow_pos zero_lt_two <| card α + 1)\n    rw [pow_succ', mul_add, mul_assoc, mul_comm _ 2, mul_assoc]\n    refine'\n      (add_le_add ((mul_le_mul_left <| pow_pos (zero_lt_two' ℕ) _).2 (hf₁ _ <| mem_cons_self _ _).2.2.card_le) <|\n            (mul_le_mul_left <| zero_lt_two' ℕ).2 <| IsUpperSet.card_inter_le_finset _ _).trans\n        _\n    · rw [coe_bUnion]\n      exact isUpperSet_unionᵢ₂ fun i hi => hf₂ _ <| subset_cons _ hi\n    · rw [coe_compl]\n      exact (hf₂ _ <| mem_cons_self _ _).compl\n    rw [mul_tsub, card_compl, Fintype.card_finset, mul_left_comm, mul_tsub, (hf₁ _ <| mem_cons_self _ _).2.1, two_mul,\n      add_tsub_cancel_left, ← mul_tsub, ← mul_two, mul_assoc, ← add_mul, mul_comm]\n    refine' mul_le_mul_left' _ _\n    refine'\n      (add_le_add_left\n            (ih ((card_le_of_subset <| subset_cons _).trans hs) _ fun i hi => (hf₁ _ <| subset_cons _ hi).2.2) _).trans\n        _\n    rw [mul_tsub, two_mul, ← pow_succ, ← add_tsub_assoc_of_le (pow_le_pow' (one_le_two : (1 : ℕ) ≤ 2) tsub_le_self),\n      tsub_add_eq_add_tsub hs, card_cons, add_tsub_add_eq_tsub_right]\n#align finset.card_bUnion_le_of_intersecting Finset.card_bunionᵢ_le_of_intersecting\n-/\n\n"}