{"sum_degrees_eq_twice_card_edges":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- The degree-sum formula.  This is also known as the handshaking lemma, which might\nmore specifically refer to `simple_graph.even_card_odd_degree_vertices`. -/\ntheorem sum_degrees_eq_twice_card_edges :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (G.degree v) =\n      2 * G.edge_finset.card :=\n  G.dart_card_eq_sum_degrees.symm.trans G.dart_card_eq_twice_card_edges\n#align sum_degrees_eq_twice_card_edges sum_degrees_eq_twice_card_edges\n\n",
 "odd_card_odd_degree_vertices_ne":
 "theorem odd_card_odd_degree_vertices_ne [fintype V] [decidable_eq V] [decidable_rel G.adj] (v : V)\n    (h : Odd (G.degree v)) : Odd (univ.filter fun w => w ≠ v ∧ Odd (G.degree w)).card :=\n  by\n  rcases G.even_card_odd_degree_vertices with ⟨k, hg⟩\n  have hk : 0 < k :=\n    by\n    have hh : (filter (fun v : V => Odd (G.degree v)) univ).nonempty :=\n      by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      use h\n    rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh\n    exact zero_lt_two\n  have hc : (fun w : V => w ≠ v ∧ Odd (G.degree w)) = fun w : V => Odd (G.degree w) ∧ w ≠ v :=\n    by\n    ext w\n    rw [and_comm']\n  simp only [hc, filter_congr_decidable]\n  rw [← filter_filter, filter_ne', card_erase_of_mem]\n  · refine' ⟨k - 1, tsub_eq_of_eq_add <| hg.trans _⟩\n    rw [add_assoc, one_add_one_eq_two, ← nat.mul_succ, ← two_mul]\n    congr\n    exact (tsub_add_cancel_of_le <| Nat.succ_le_iff.2 hk).symm\n  · simpa only [true_and_iff, mem_filter, mem_univ]\n#align odd_card_odd_degree_vertices_ne odd_card_odd_degree_vertices_ne\n\n",
 "exists_ne_odd_degree_of_exists_odd_degree":
 "theorem exists_ne_odd_degree_of_exists_odd_degree [fintype V] [decidable_rel G.adj] (v : V) (h : Odd (G.degree v)) :\n    ∃ w : V, w ≠ v ∧ Odd (G.degree w) := by\n  haveI := classical.dec_eq V\n  rcases G.odd_card_odd_degree_vertices_ne v h with ⟨k, hg⟩\n  have hg' : (filter (fun w : V => w ≠ v ∧ Odd (G.degree w)) univ).card > 0 :=\n    by\n    rw [hg]\n    apply nat.succ_pos\n  rcases card_pos.mp hg' with ⟨w, hw⟩\n  simp only [true_and_iff, mem_filter, mem_univ, ne.def] at hw\n  exact ⟨w, hw⟩\n#align exists_ne_odd_degree_of_exists_odd_degree exists_ne_odd_degree_of_exists_odd_degree\n\n",
 "even_card_odd_degree_vertices":
 "/-- The handshaking lemma.  See also `simple_graph.sum_degrees_eq_twice_card_edges`. -/\ntheorem even_card_odd_degree_vertices [fintype V] [decidable_rel G.adj] :\n    Even (univ.filter fun v => Odd (G.degree v)).card := by\n  classical\n    have h := congr_arg (fun n => ↑n : ℕ → zmod 2) G.sum_degrees_eq_twice_card_edges\n    simp only [zmod.nat_cast_self, zero_mul, nat.cast_mul] at h\n    rw [nat.cast_sum, ← sum_filter_ne_zero] at h\n    rw [@sum_congr _ _ _ _ (fun v => (G.degree v : zmod 2)) (fun v => (1 : zmod 2)) _ rfl] at h\n    · simp only [filter_congr_decidable, mul_one, nsmul_eq_mul, sum_const, ne.def] at h\n      rw [← zmod.eq_zero_iff_even]\n      convert h\n      ext v\n      rw [← zmod.ne_zero_iff_odd]\n    · intro v\n      simp only [true_and_iff, mem_filter, mem_univ, ne.def]\n      rw [zmod.eq_zero_iff_even, zmod.eq_one_iff_odd, nat.odd_iff_not_even, imp_self]\n      trivial\n#align even_card_odd_degree_vertices even_card_odd_degree_vertices\n\n",
 "edge_fiber":
 "theorem dart.edge_fiber (d : G.dart) : (univ.filter fun d' : G.dart => d'.edge = d.edge) = {d, d.symm} :=\n  Finset.ext fun d' => by simpa using dart_edge_eq_iff d' d\n#align dart.edge_fiber dart.edge_fiber\n\n",
 "dart_fst_fiber_card_eq_degree":
 "theorem dart_fst_fiber_card_eq_degree [decidable_eq V] (v : V) :\n    (univ.filter fun d : G.dart => d.fst = v).card = G.degree v := by\n  simpa only [dart_fst_fiber, finset.card_univ, card_neighbor_set_eq_degree] using\n    card_image_of_injective univ (G.dart_of_neighbor_set_injective v)\n#align dart_fst_fiber_card_eq_degree dart_fst_fiber_card_eq_degree\n\n",
 "dart_fst_fiber":
 "/-\nCopyright (c) 2020 Kyle Miller. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kyle Miller\n-/\ntheorem dart_fst_fiber [decidable_eq V] (v : V) :\n    (univ.filter fun d : G.dart => d.fst = v) = univ.image (G.dart_of_neighbor_set v) :=\n  by\n  ext d\n  simp only [mem_image, true_and_iff, mem_filter, SetCoe.exists, mem_univ, exists_prop_of_true]\n  constructor\n  · rintro rfl\n    exact ⟨_, d.is_adj, by ext <;> rfl⟩\n  · rintro ⟨e, he, rfl⟩\n    rfl\n#align dart_fst_fiber dart_fst_fiber\n\n",
 "dart_edge_fiber_card":
 "theorem dart_edge_fiber_card (e : sym2 V) (h : e ∈ G.edge_set) : (univ.filter fun d : G.dart => d.edge = e).card = 2 :=\n  by\n  refine' sym2.ind (fun v w h => _) e h\n  let d : G.dart := ⟨(v, w), h⟩\n  convert congr_arg card d.edge_fiber\n  rw [card_insert_of_not_mem, card_singleton]\n  rw [mem_singleton]\n  exact d.symm_ne.symm\n#align dart_edge_fiber_card dart_edge_fiber_card\n\n",
 "dart_card_eq_twice_card_edges":
 "theorem dart_card_eq_twice_card_edges : fintype.card G.dart = 2 * G.edge_finset.card :=\n  by\n  rw [← card_univ]\n  rw [@card_eq_sum_card_fiberwise _ _ _ dart.edge _ G.edge_finset fun d h =>\n      by\n      rw [mem_edge_finset]\n      apply dart.edge_mem]\n  rw [← mul_comm, sum_const_nat]\n  intro e h\n  apply G.dart_edge_fiber_card e\n  rwa [← mem_edge_finset]\n#align dart_card_eq_twice_card_edges dart_card_eq_twice_card_edges\n\n",
 "dart_card_eq_sum_degrees":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem dart_card_eq_sum_degrees :\n    fintype.card G.dart =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (G.degree v) :=\n  by\n  haveI := classical.dec_eq V\n  simp only [← card_univ, ← dart_fst_fiber_card_eq_degree]\n  exact card_eq_sum_card_fiberwise (by simp)\n#align dart_card_eq_sum_degrees dart_card_eq_sum_degrees\n\n"}