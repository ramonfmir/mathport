{"path_graph_preconnected":
 "theorem path_graph_preconnected (n : ℕ) : (pathGraph n).preconnected :=\n  hasse_preconnected_of_succ _\n#align path_graph_preconnected path_graph_preconnected\n\n",
 "path_graph_connected":
 "theorem path_graph_connected (n : ℕ) : (pathGraph (n + 1)).connected :=\n  ⟨pathGraph_preconnected _⟩\n#align path_graph_connected path_graph_connected\n\n",
 "hasse_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr □ » -/\n@[simp]\ntheorem hasse_prod : hasse (α × β) = «expr □ » (hasse α) (hasse β) :=\n  by\n  ext (x y)\n  simp_rw [box_prod_adj, hasse_adj, Prod.covby_iff, or_and_right, @eq_comm _ y.1, @eq_comm _ y.2, or_or_or_comm]\n#align hasse_prod hasse_prod\n\n",
 "hasse_preconnected_of_succ":
 "theorem hasse_preconnected_of_succ [SuccOrder α] [IsSuccArchimedean α] : (hasse α).preconnected := fun a b =>\n  by\n  rw [reachable_iff_refl_trans_gen]\n  exact\n    reflTransGen_of_succ _ (fun c hc => or.inl <| covby_succ_of_not_is_max hc.2.not_is_max) fun c hc =>\n      or.inr <| covby_succ_of_not_is_max hc.2.not_is_max\n#align hasse_preconnected_of_succ hasse_preconnected_of_succ\n\n",
 "hasse_preconnected_of_pred":
 "theorem hasse_preconnected_of_pred [PredOrder α] [IsPredArchimedean α] : (hasse α).preconnected := fun a b =>\n  by\n  rw [reachable_iff_refl_trans_gen, ← refl_trans_gen_swap]\n  exact\n    reflTransGen_of_pred _ (fun c hc => or.inl <| pred_covby_of_not_is_min hc.1.not_is_min) fun c hc =>\n      or.inr <| pred_covby_of_not_is_min hc.1.not_is_min\n#align hasse_preconnected_of_pred hasse_preconnected_of_pred\n\n",
 "hasse_dual_iso_symm_apply":
 "@[simp]\ntheorem hasse_dual_iso_symm_apply (a : α) : hasseDualIso.symm a = toDual a :=\n  rfl\n#align hasse_dual_iso_symm_apply hasse_dual_iso_symm_apply\n\n",
 "hasse_dual_iso_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n@[simp]\ntheorem hasse_dual_iso_apply (a : «expr ᵒᵈ» α) : hasseDualIso a = ofDual a :=\n  rfl\n#align hasse_dual_iso_apply hasse_dual_iso_apply\n\n",
 "hasse_adj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋖ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋖ » -/\n/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies\n-/\n@[simp]\ntheorem hasse_adj : (hasse α).adj a b ↔ «expr ⋖ » a b ∨ «expr ⋖ » b a :=\n  iff.rfl\n#align hasse_adj hasse_adj\n\n"}