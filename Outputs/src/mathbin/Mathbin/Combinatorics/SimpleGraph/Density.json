{"swap_mem_interedges_iff":
 "@[simp]\ntheorem swap_mem_interedges_iff {x : α × α} : x.swap ∈ G.interedges s t ↔ x ∈ G.interedges t s :=\n  swap_mem_interedges_iff G.symm\n#align swap_mem_interedges_iff swap_mem_interedges_iff\n\n",
 "mul_edge_density_le_edge_density":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem mul_edge_density_le_edge_density (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hs₂ : s₂.nonempty) (ht₂ : t₂.nonempty) :\n    (s₂.card : exprℚ) / s₁.card * (t₂.card / t₁.card) * edge_density r s₂ t₂ ≤ edge_density r s₁ t₁ :=\n  by\n  have hst : (s₂.card : exprℚ) * t₂.card ≠ 0 := by simp [hs₂.ne_empty, ht₂.ne_empty]\n  rw [edge_density, edge_density, div_mul_div_comm, mul_comm, div_mul_div_cancel _ hst]\n  refine' div_le_div_of_le (by exact_mod_cast (s₁.card * t₁.card).zero_le) _\n  exact_mod_cast card_le_of_subset (interedges_mono hs ht)\n#align mul_edge_density_le_edge_density mul_edge_density_le_edge_density\n\n",
 "mk_mem_interedges_iff":
 "theorem mk_mem_interedges_iff : (a, b) ∈ G.interedges s t ↔ a ∈ s ∧ b ∈ t ∧ G.adj a b :=\n  mk_mem_interedges_iff\n#align mk_mem_interedges_iff mk_mem_interedges_iff\n\n",
 "mk_mem_interedges_comm":
 "theorem mk_mem_interedges_comm : (a, b) ∈ G.interedges s t ↔ (b, a) ∈ G.interedges t s :=\n  mk_mem_interedges_comm G.symm\n#align mk_mem_interedges_comm mk_mem_interedges_comm\n\n",
 "mem_interedges_iff":
 "theorem mem_interedges_iff {x : α × α} : x ∈ G.interedges s t ↔ x.1 ∈ s ∧ x.2 ∈ t ∧ G.adj x.1 x.2 :=\n  mem_interedges_iff\n#align mem_interedges_iff mem_interedges_iff\n\n",
 "interedges_mono":
 "theorem interedges_mono : s₂ ⊆ s₁ → t₂ ⊆ t₁ → G.interedges s₂ t₂ ⊆ G.interedges s₁ t₁ :=\n  interedges_mono\n#align interedges_mono interedges_mono\n\n",
 "interedges_empty_left":
 "@[simp]\ntheorem interedges_empty_left (t : Finset α) : G.interedges ∅ t = ∅ :=\n  interedges_empty_left _\n#align interedges_empty_left interedges_empty_left\n\n",
 "interedges_disjoint_right":
 "theorem interedges_disjoint_right (s : Finset α) (ht : Disjoint t₁ t₂) :\n    Disjoint (G.interedges s t₁) (G.interedges s t₂) :=\n  interedges_disjoint_right _ _ ht\n#align interedges_disjoint_right interedges_disjoint_right\n\n",
 "interedges_disjoint_left":
 "theorem interedges_disjoint_left (hs : Disjoint s₁ s₂) (t : Finset α) :\n    Disjoint (G.interedges s₁ t) (G.interedges s₂ t) :=\n  interedges_disjoint_left _ hs _\n#align interedges_disjoint_left interedges_disjoint_left\n\n",
 "interedges_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem interedges_def (s t : Finset α) : G.interedges s t = (finset.product s t).filter fun e => G.adj e.1 e.2 :=\n  rfl\n#align interedges_def interedges_def\n\n",
 "interedges_bUnion_right":
 "theorem interedges_bUnion_right (s : Finset α) (t : Finset ι) (f : ι → Finset α) :\n    G.interedges s (t.bUnion f) = t.bUnion fun b => G.interedges s (f b) :=\n  interedges_bUnion_right _ _ _ _\n#align interedges_bUnion_right interedges_bUnion_right\n\n",
 "interedges_bUnion_left":
 "theorem interedges_bUnion_left (s : Finset ι) (t : Finset α) (f : ι → Finset α) :\n    G.interedges (s.bUnion f) t = s.bUnion fun a => G.interedges (f a) t :=\n  interedges_bUnion_left _ _ _ _\n#align interedges_bUnion_left interedges_bUnion_left\n\n",
 "interedges_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem interedges_bUnion (s : Finset ι) (t : Finset κ) (f : ι → Finset α) (g : κ → Finset α) :\n    G.interedges (s.bUnion f) (t.bUnion g) = (finset.product s t).bUnion fun ab => G.interedges (f ab.1) (g ab.2) :=\n  interedges_bUnion _ _ _ _ _\n#align interedges_bUnion interedges_bUnion\n\n",
 "edge_density_sub_edge_density_le_one_sub_mul":
 "theorem edge_density_sub_edge_density_le_one_sub_mul (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hs₂ : s₂.nonempty)\n    (ht₂ : t₂.nonempty) : edge_density r s₂ t₂ - edge_density r s₁ t₁ ≤ 1 - s₂.card / s₁.card * (t₂.card / t₁.card) :=\n  by\n  refine' (sub_le_sub_left (mul_edge_density_le_edge_density r hs ht hs₂ ht₂) _).trans _\n  refine' le_trans _ (mul_le_of_le_one_right _ (edge_density_le_one r s₂ t₂))\n  · rw [sub_mul, one_mul]\n  refine' sub_nonneg_of_le (mul_le_one _ (by positivity) _) <;>\n    exact div_le_one_of_le (nat.cast_le.2 (card_le_of_subset ‹_›)) (nat.cast_nonneg _)\n#align edge_density_sub_edge_density_le_one_sub_mul edge_density_sub_edge_density_le_one_sub_mul\n\n",
 "edge_density_nonneg":
 "theorem edge_density_nonneg (s t : Finset α) : 0 ≤ G.edge_density s t :=\n  edge_density_nonneg _ _ _\n#align edge_density_nonneg edge_density_nonneg\n\n",
 "edge_density_le_one":
 "theorem edge_density_le_one (s t : Finset α) : G.edge_density s t ≤ 1 :=\n  edge_density_le_one _ _ _\n#align edge_density_le_one edge_density_le_one\n\n",
 "edge_density_empty_right":
 "@[simp]\ntheorem edge_density_empty_right (s : Finset α) : G.edge_density s ∅ = 0 :=\n  edge_density_empty_right _ _\n#align edge_density_empty_right edge_density_empty_right\n\n",
 "edge_density_empty_left":
 "@[simp]\ntheorem edge_density_empty_left (t : Finset α) : G.edge_density ∅ t = 0 :=\n  edge_density_empty_left _ _\n#align edge_density_empty_left edge_density_empty_left\n\n",
 "edge_density_def":
 "theorem edge_density_def (s t : Finset α) : G.edge_density s t = (G.interedges s t).card / (s.card * t.card) :=\n  rfl\n#align edge_density_def edge_density_def\n\n",
 "edge_density_comm":
 "theorem edge_density_comm (s t : Finset α) : G.edge_density s t = G.edge_density t s :=\n  edge_density_comm G.symm s t\n#align edge_density_comm edge_density_comm\n\n",
 "edge_density_add_edge_density_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem edge_density_add_edge_density_compl (hs : s.nonempty) (ht : t.nonempty) (h : Disjoint s t) :\n    G.edge_density s t + («expr ᶜ» G).edge_density s t = 1 :=\n  by\n  rw [edge_density_def, edge_density_def, div_add_div_same, div_eq_one_iff_eq]\n  · exact_mod_cast card_interedges_add_card_interedges_compl _ h\n  · exact_mod_cast (mul_pos hs.card_pos ht.card_pos).ne'\n#align edge_density_add_edge_density_compl edge_density_add_edge_density_compl\n\n",
 "card_interedges_le_mul":
 "theorem card_interedges_le_mul (s t : Finset α) : (G.interedges s t).card ≤ s.card * t.card :=\n  card_interedges_le_mul _ _ _\n#align card_interedges_le_mul card_interedges_le_mul\n\n",
 "card_interedges_finpartition_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem card_interedges_finpartition_right [decidable_eq β] (s : Finset α) (P : finpartition t) :\n    (interedges r s t).card =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" P.parts\n        (interedges r s b).card :=\n  by\n  classical\n    simp_rw [← P.bUnion_parts, interedges_bUnion_right, id]\n    rw [card_bUnion]\n    exact fun x hx y hy h => interedges_disjoint_right r _ (P.disjoint hx hy h)\n#align card_interedges_finpartition_right card_interedges_finpartition_right\n\n",
 "card_interedges_finpartition_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem card_interedges_finpartition_left [decidable_eq α] (P : finpartition s) (t : Finset β) :\n    (interedges r s t).card =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" P.parts\n        (interedges r a t).card :=\n  by\n  classical\n    simp_rw [← P.bUnion_parts, interedges_bUnion_left, id.def]\n    rw [card_bUnion]\n    exact fun x hx y hy h => interedges_disjoint_left r (P.disjoint hx hy h) _\n#align card_interedges_finpartition_left card_interedges_finpartition_left\n\n",
 "card_interedges_finpartition":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\ntheorem card_interedges_finpartition [decidable_eq α] [decidable_eq β] (P : finpartition s) (Q : finpartition t) :\n    (interedges r s t).card =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (finset.product P.parts Q.parts) (interedges r ab.1 ab.2).card :=\n  by simp_rw [card_interedges_finpartition_left _ P, card_interedges_finpartition_right _ _ Q, sum_product]\n#align card_interedges_finpartition card_interedges_finpartition\n\n",
 "card_interedges_div_card":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem card_interedges_div_card (s t : Finset α) :\n    ((G.interedges s t).card : exprℚ) / (s.card * t.card) = G.edge_density s t :=\n  rfl\n#align card_interedges_div_card card_interedges_div_card\n\n",
 "card_interedges_comm":
 "theorem card_interedges_comm (s t : Finset α) : (interedges r s t).card = (interedges r t s).card :=\n  finset.card_congr (fun (x : α × α) _ => x.swap) (fun x => (swap_mem_interedges_iff hr).2)\n    (fun _ _ _ _ h => prod.swap_injective h) fun x h => ⟨x.swap, (swap_mem_interedges_iff hr).2 h, x.swap_swap⟩\n#align card_interedges_comm card_interedges_comm\n\n",
 "card_interedges_add_card_interedges_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem card_interedges_add_card_interedges_compl (h : Disjoint s t) :\n    (G.interedges s t).card + ((«expr ᶜ» G).interedges s t).card = s.card * t.card :=\n  by\n  rw [← card_product, interedges_def, interedges_def]\n  have :\n    ((finset.product s t).filter fun e => («expr ᶜ» G).adj e.1 e.2) =\n      (finset.product s t).filter fun e => ¬G.adj e.1 e.2 :=\n    by\n    refine' filter_congr fun x hx => _\n    rw [mem_product] at hx\n    rw [compl_adj, and_iff_right (h.forall_ne_finset hx.1 hx.2)]\n  rw [this, ← card_union_eq, filter_union_filter_neg_eq]\n  exact disjoint_filter.2 fun x _ => not_not.2\n#align card_interedges_add_card_interedges_compl card_interedges_add_card_interedges_compl\n\n",
 "abs_edge_density_sub_edge_density_le_two_mul_sub_sq":
 "theorem abs_edge_density_sub_edge_density_le_two_mul_sub_sq (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hδ₀ : 0 ≤ δ) (hδ₁ : δ < 1)\n    (hs₂ : (1 - δ) * s₁.card ≤ s₂.card) (ht₂ : (1 - δ) * t₁.card ≤ t₂.card) :\n    |edge_density r s₂ t₂ - edge_density r s₁ t₁| ≤ 2 * δ - δ ^ 2 :=\n  by\n  have hδ' : 0 ≤ 2 * δ - δ ^ 2 := by\n    rw [sub_nonneg, sq]\n    exact mul_le_mul_of_nonneg_right (hδ₁.le.trans (by norm_num)) hδ₀\n  rw [← sub_pos] at hδ₁\n  simp only [edge_density]\n  obtain rfl | hs₂' := s₂.eq_empty_or_nonempty\n  · rw [finset.card_empty, Nat.cast_zero] at hs₂\n    simpa [(nonpos_of_mul_nonpos_right hs₂ hδ₁).antisymm (nat.cast_nonneg _)] using hδ'\n  obtain rfl | ht₂' := t₂.eq_empty_or_nonempty\n  · rw [finset.card_empty, Nat.cast_zero] at ht₂\n    simpa [(nonpos_of_mul_nonpos_right ht₂ hδ₁).antisymm (nat.cast_nonneg _)] using hδ'\n  rw [show 2 * δ - δ ^ 2 = 1 - (1 - δ) * (1 - δ) by ring]\n  refine' (abs_edge_density_sub_edge_density_le_one_sub_mul r hs ht hs₂' ht₂').trans _\n  apply sub_le_sub_left (mul_le_mul ((le_div_iff _).2 hs₂) ((le_div_iff _).2 ht₂) hδ₁.le _)\n  · exact_mod_cast (hs₂'.mono hs).card_pos\n  · exact_mod_cast (ht₂'.mono ht).card_pos\n  · positivity\n#align abs_edge_density_sub_edge_density_le_two_mul_sub_sq abs_edge_density_sub_edge_density_le_two_mul_sub_sq\n\n",
 "abs_edge_density_sub_edge_density_le_two_mul":
 "/-- If `s₂ ⊆ s₁`, `t₂ ⊆ t₁` and they take up all but a `δ`-proportion, then the difference in edge\ndensities is at most `2 * δ`. -/\ntheorem abs_edge_density_sub_edge_density_le_two_mul (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hδ : 0 ≤ δ)\n    (hscard : (1 - δ) * s₁.card ≤ s₂.card) (htcard : (1 - δ) * t₁.card ≤ t₂.card) :\n    |edge_density r s₂ t₂ - edge_density r s₁ t₁| ≤ 2 * δ :=\n  by\n  cases lt_or_le δ 1\n  ·\n    exact\n      (abs_edge_density_sub_edge_density_le_two_mul_sub_sq r hs ht hδ h hscard htcard).trans\n        ((sub_le_self_iff _).2 <| sq_nonneg δ)\n  rw [two_mul]\n  refine' (abs_sub _ _).trans (add_le_add (le_trans _ h) (le_trans _ h)) <;>\n    · rw [abs_of_nonneg]\n      exact_mod_cast edge_density_le_one r _ _\n      exact_mod_cast edge_density_nonneg r _ _\n#align abs_edge_density_sub_edge_density_le_two_mul abs_edge_density_sub_edge_density_le_two_mul\n\n",
 "abs_edge_density_sub_edge_density_le_one_sub_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem abs_edge_density_sub_edge_density_le_one_sub_mul (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hs₂ : s₂.nonempty)\n    (ht₂ : t₂.nonempty) : |edge_density r s₂ t₂ - edge_density r s₁ t₁| ≤ 1 - s₂.card / s₁.card * (t₂.card / t₁.card) :=\n  by\n  have habs : abs (edge_density r s₂ t₂ - edge_density r s₁ t₁) ≤ 1 :=\n    by\n    rw [abs_sub_le_iff, ← sub_zero (1 : exprℚ)]\n    constructor <;> exact sub_le_sub (edge_density_le_one r _ _) (edge_density_nonneg r _ _)\n  refine' abs_sub_le_iff.2 ⟨edge_density_sub_edge_density_le_one_sub_mul r hs ht hs₂ ht₂, _⟩\n  rw [← add_sub_cancel (edge_density r s₁ t₁) (edge_density (fun x y => ¬r x y) s₁ t₁), ←\n    add_sub_cancel (edge_density r s₂ t₂) (edge_density (fun x y => ¬r x y) s₂ t₂),\n    edge_density_add_edge_density_compl _ (hs₂.mono hs) (ht₂.mono ht), edge_density_add_edge_density_compl _ hs₂ ht₂,\n    sub_sub_sub_cancel_left]\n  exact edge_density_sub_edge_density_le_one_sub_mul _ hs ht hs₂ ht₂\n#align abs_edge_density_sub_edge_density_le_one_sub_mul abs_edge_density_sub_edge_density_le_one_sub_mul\n\n"}