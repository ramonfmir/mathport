{"valid":
 "/-\nCopyright (c) 2021 Arthur Paulino. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Arthur Paulino, Kyle Miller\n-/\ntheorem coloring.valid {v w : V} (h : G.adj v w) : C v ≠ C w :=\n  C.map_rel h\n#align coloring.valid coloring.valid\n\n",
 "to_colorable":
 "theorem coloring.to_colorable [Fintype α] (C : G.coloring α) : G.colorable (Fintype.card α) :=\n  ⟨G.recolor_of_card_le (by simp) C⟩\n#align coloring.to_colorable coloring.to_colorable\n\n",
 "of_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\ntheorem colorable.of_embedding {V' : Type _} {G' : SimpleGraph V'} (f : «expr ↪g » G G') {n : ℕ} (h : G'.colorable n) :\n    G.colorable n :=\n  ⟨(h.to_coloring (by simp)).comp f⟩\n#align colorable.of_embedding colorable.of_embedding\n\n",
 "not_adj_of_mem_color_class":
 "theorem coloring.not_adj_of_mem_color_class {c : α} {v w : V} (hv : v ∈ C.color_class c) (hw : w ∈ C.color_class c) :\n    ¬G.adj v w := fun h => C.valid h (Eq.trans hv (Eq.symm hw))\n#align coloring.not_adj_of_mem_color_class coloring.not_adj_of_mem_color_class\n\n",
 "mono_left":
 "theorem colorable.mono_left {G' : SimpleGraph V} (h : G ≤ G') {n : ℕ} (hc : G'.colorable n) : G.colorable n :=\n  ⟨hc.some.comp (Hom.mapSpanningSubgraphs h)⟩\n#align colorable.mono_left colorable.mono_left\n\n",
 "mono":
 "-- this was strangely painful; seems like missing lemmas about embeddings\ntheorem colorable.mono {n m : ℕ} (h : n ≤ m) (hc : G.colorable n) : G.colorable m :=\n  ⟨G.recolor_of_card_le (by simp [h]) hc.some⟩\n#align colorable.mono colorable.mono\n\n",
 "mem_color_classes":
 "theorem coloring.mem_color_classes {v : V} : C.color_class (C v) ∈ C.color_classes :=\n  ⟨v, rfl⟩\n#align coloring.mem_color_classes coloring.mem_color_classes\n\n",
 "mem_color_class":
 "theorem coloring.mem_color_class (v : V) : v ∈ C.color_class (C v) :=\n  rfl\n#align coloring.mem_color_class coloring.mem_color_class\n\n",
 "is_empty_of_colorable_zero":
 "theorem is_empty_of_colorable_zero (h : G.colorable 0) : IsEmpty V :=\n  by\n  constructor\n  intro v\n  obtain ⟨i, hi⟩ := h.some v\n  exact nat.not_lt_zero _ hi\n#align is_empty_of_colorable_zero is_empty_of_colorable_zero\n\n",
 "is_empty_of_chromatic_number_eq_zero":
 "theorem is_empty_of_chromatic_number_eq_zero (G : SimpleGraph V) [Finite V] (h : G.chromatic_number = 0) : IsEmpty V :=\n  by\n  have h' := G.colorable_chromatic_number_of_fintype\n  rw [h] at h'\n  exact G.is_empty_of_colorable_zero h'\n#align is_empty_of_chromatic_number_eq_zero is_empty_of_chromatic_number_eq_zero\n\n",
 "colorable_set_nonempty_of_colorable":
 "theorem colorable_set_nonempty_of_colorable {n : ℕ} (hc : G.colorable n) : { n : ℕ | G.colorable n }.nonempty :=\n  ⟨n, hc⟩\n#align colorable_set_nonempty_of_colorable colorable_set_nonempty_of_colorable\n\n",
 "colorable_of_is_empty":
 "-- TODO make this computable\ntheorem colorable_of_is_empty [IsEmpty V] (n : ℕ) : G.colorable n :=\n  ⟨G.coloring_of_is_empty⟩\n#align colorable_of_is_empty colorable_of_is_empty\n\n",
 "colorable_of_fintype":
 "theorem colorable_of_fintype (G : SimpleGraph V) [Fintype V] : G.colorable (Fintype.card V) :=\n  G.self_coloring.to_colorable\n#align colorable_of_fintype colorable_of_fintype\n\n",
 "colorable_of_chromatic_number_pos":
 "theorem colorable_of_chromatic_number_pos (h : 0 < G.chromatic_number) : G.colorable G.chromatic_number :=\n  by\n  obtain ⟨h, hn⟩ := Nat.nonempty_of_pos_infₛ h\n  exact colorable_chromatic_number hn\n#align colorable_of_chromatic_number_pos colorable_of_chromatic_number_pos\n\n",
 "colorable_iff_exists_bdd_nat_coloring":
 "theorem colorable_iff_exists_bdd_nat_coloring (n : ℕ) : G.colorable n ↔ ∃ C : G.coloring ℕ, ∀ v, C v < n :=\n  by\n  constructor\n  · rintro hc\n    have C : G.coloring (Fin n) := hc.to_coloring (by simp)\n    let f := embedding.complete_graph Fin.valEmbedding\n    use f.to_hom.comp C\n    intro v\n    cases' C with color valid\n    exact Fin.is_lt (color v)\n  · rintro ⟨C, Cf⟩\n    refine' ⟨coloring.mk _ _⟩\n    · exact fun v => ⟨C v, Cf v⟩\n    · rintro v w hvw\n      simp only [Fin.mk_eq_mk, ne.def]\n      exact C.valid hvw\n#align colorable_iff_exists_bdd_nat_coloring colorable_iff_exists_bdd_nat_coloring\n\n",
 "colorable_chromatic_number_of_fintype":
 "theorem colorable_chromatic_number_of_fintype (G : SimpleGraph V) [Finite V] : G.colorable G.chromatic_number :=\n  by\n  cases nonempty_fintype V\n  exact colorable_chromatic_number G.colorable_of_fintype\n#align colorable_chromatic_number_of_fintype colorable_chromatic_number_of_fintype\n\n",
 "colorable_chromatic_number":
 "theorem colorable_chromatic_number {m : ℕ} (hc : G.colorable m) : G.colorable G.chromatic_number :=\n  by\n  dsimp only [chromatic_number]\n  rw [Nat.infₛ_def]\n  apply nat.find_spec\n  exact colorable_set_nonempty_of_colorable hc\n#align colorable_chromatic_number colorable_chromatic_number\n\n",
 "color_classes_is_partition":
 "theorem coloring.color_classes_is_partition : Setoid.IsPartition C.color_classes :=\n  Setoid.isPartition_classes (Setoid.ker C)\n#align coloring.color_classes_is_partition coloring.color_classes_is_partition\n\n",
 "color_classes_independent":
 "theorem coloring.color_classes_independent (c : α) : IsAntichain G.adj (C.color_class c) := fun v hv w hw h =>\n  C.not_adj_of_mem_color_class hv hw\n#align coloring.color_classes_independent coloring.color_classes_independent\n\n",
 "color_classes_finite":
 "theorem coloring.color_classes_finite [Finite α] : C.color_classes.finite :=\n  Setoid.finite_classes_ker _\n#align coloring.color_classes_finite coloring.color_classes_finite\n\n",
 "clique_free_of_chromatic_number_lt":
 "-- TODO eliminate `finite V` constraint once chromatic numbers are refactored.\n-- This is just to ensure the chromatic number exists.\ntheorem clique_free_of_chromatic_number_lt [Finite V] {n : ℕ} (hc : G.chromatic_number < n) : G.clique_free n :=\n  G.colorable_chromatic_number_of_fintype.clique_free hc\n#align clique_free_of_chromatic_number_lt clique_free_of_chromatic_number_lt\n\n",
 "clique_free":
 "protected theorem colorable.clique_free {n m : ℕ} (hc : G.colorable n) (hm : n < m) : G.clique_free m :=\n  by\n  by_contra h\n  simp only [clique_free, is_n_clique_iff, not_forall, Classical.not_not] at h\n  obtain ⟨s, h, rfl⟩ := h\n  exact nat.lt_le_antisymm hm (h.card_le_of_colorable hc)\n#align colorable.clique_free colorable.clique_free\n\n",
 "chromatic_number_top_eq_zero_of_infinite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem chromatic_number_top_eq_zero_of_infinite (V : Type _) [Infinite V] :\n    («expr⊤» : SimpleGraph V).chromatic_number = 0 :=\n  by\n  let n := («expr⊤» : SimpleGraph V).chromatic_number\n  by_contra hc\n  replace hc := pos_iff_ne_zero.mpr hc\n  apply nat.not_succ_le_self n\n  convert_to(«expr⊤» : SimpleGraph { m | m < n + 1 }).chromatic_number ≤ _\n  · simp\n  refine' (colorable_of_chromatic_number_pos hc).chromatic_number_mono_of_embedding _\n  apply embedding.complete_graph\n  exact (Function.Embedding.subtype _).trans (Infinite.natEmbedding V)\n#align chromatic_number_top_eq_zero_of_infinite chromatic_number_top_eq_zero_of_infinite\n\n",
 "chromatic_number_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem chromatic_number_top [Fintype V] : («expr⊤» : SimpleGraph V).chromatic_number = Fintype.card V :=\n  by\n  apply chromatic_number_eq_card_of_forall_surj (self_coloring _)\n  intro C\n  rw [← Finite.injective_iff_surjective]\n  intro v w\n  contrapose\n  intro h\n  exact C.valid h\n#align chromatic_number_top chromatic_number_top\n\n",
 "chromatic_number_pos":
 "theorem chromatic_number_pos [Nonempty V] {n : ℕ} (hc : G.colorable n) : 0 < G.chromatic_number :=\n  by\n  apply le_cinfₛ (colorable_set_nonempty_of_colorable hc)\n  intro m hm\n  by_contra h'\n  simp only [not_le, Nat.lt_one_iff] at h'\n  subst h'\n  obtain ⟨i, hi⟩ := hm.some (Classical.arbitrary V)\n  exact nat.not_lt_zero _ hi\n#align chromatic_number_pos chromatic_number_pos\n\n",
 "chromatic_number_mono_of_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\ntheorem colorable.chromatic_number_mono_of_embedding {V' : Type _} {G' : SimpleGraph V'} {n : ℕ} (h : G'.colorable n)\n    (f : «expr ↪g » G G') : G.chromatic_number ≤ G'.chromatic_number :=\n  h.chromatic_number_le_of_forall_imp fun _ => Colorable.of_embedding f\n#align colorable.chromatic_number_mono_of_embedding colorable.chromatic_number_mono_of_embedding\n\n",
 "chromatic_number_mono":
 "theorem colorable.chromatic_number_mono (G' : SimpleGraph V) {m : ℕ} (hc : G'.colorable m) (h : G ≤ G') :\n    G.chromatic_number ≤ G'.chromatic_number :=\n  hc.chromatic_number_le_of_forall_imp fun n => Colorable.mono_left h\n#align colorable.chromatic_number_mono colorable.chromatic_number_mono\n\n",
 "chromatic_number_le_one_of_subsingleton":
 "theorem chromatic_number_le_one_of_subsingleton (G : SimpleGraph V) [subsingleton V] : G.chromatic_number ≤ 1 :=\n  by\n  rw [chromatic_number]\n  apply cinfₛ_le chromatic_number_bdd_below\n  fconstructor\n  refine' coloring.mk (fun _ => 0) _\n  intro v w\n  rw [subsingleton.elim v w]\n  simp\n#align chromatic_number_le_one_of_subsingleton chromatic_number_le_one_of_subsingleton\n\n",
 "chromatic_number_le_of_forall_imp":
 "theorem colorable.chromatic_number_le_of_forall_imp {V' : Type _} {G' : SimpleGraph V'} {m : ℕ} (hc : G'.colorable m)\n    (h : ∀ n, G'.colorable n → G.colorable n) : G.chromatic_number ≤ G'.chromatic_number :=\n  by\n  apply cinfₛ_le chromatic_number_bdd_below\n  apply h\n  apply colorable_chromatic_number hc\n#align colorable.chromatic_number_le_of_forall_imp colorable.chromatic_number_le_of_forall_imp\n\n",
 "chromatic_number_le_of_colorable":
 "theorem chromatic_number_le_of_colorable {n : ℕ} (hc : G.colorable n) : G.chromatic_number ≤ n :=\n  by\n  rw [chromatic_number]\n  apply cinfₛ_le chromatic_number_bdd_below\n  fconstructor\n  exact Classical.choice hc\n#align chromatic_number_le_of_colorable chromatic_number_le_of_colorable\n\n",
 "chromatic_number_le_card":
 "theorem chromatic_number_le_card [Fintype α] (C : G.coloring α) : G.chromatic_number ≤ Fintype.card α :=\n  cinfₛ_le chromaticNumber_bddBelow C.to_colorable\n#align chromatic_number_le_card chromatic_number_le_card\n\n",
 "chromatic_number_eq_zero_of_isempty":
 "theorem chromatic_number_eq_zero_of_isempty (G : SimpleGraph V) [IsEmpty V] : G.chromatic_number = 0 :=\n  by\n  rw [← nonpos_iff_eq_zero]\n  apply cinfₛ_le chromatic_number_bdd_below\n  apply colorable_of_is_empty\n#align chromatic_number_eq_zero_of_isempty chromatic_number_eq_zero_of_isempty\n\n",
 "chromatic_number_eq_card_of_forall_surj":
 "theorem chromatic_number_eq_card_of_forall_surj [Fintype α] (C : G.coloring α)\n    (h : ∀ C' : G.coloring α, function.surjective C') : G.chromatic_number = Fintype.card α :=\n  by\n  apply le_antisymm\n  · apply chromatic_number_le_card C\n  · by_contra hc\n    rw [not_le] at hc\n    obtain ⟨n, cn, hc⟩ := exists_lt_of_cinfₛ_lt (colorable_set_nonempty_of_colorable C.to_colorable) hc\n    rw [← Fintype.card_fin n] at hc\n    have f := (Function.Embedding.nonempty_of_card_le (le_of_lt hc)).some\n    have C' := cn.some\n    specialize h (G.recolor_of_embedding f C')\n    change function.surjective (f ∘ C') at h\n    have h1 : function.surjective f := Function.Surjective.of_comp h\n    have h2 := Fintype.card_le_of_surjective _ h1\n    exact nat.lt_le_antisymm hc h2\n#align chromatic_number_eq_card_of_forall_surj chromatic_number_eq_card_of_forall_surj\n\n",
 "chromatic_number_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem chromatic_number_bot [Nonempty V] : («expr⊥» : SimpleGraph V).chromatic_number = 1 :=\n  by\n  let C : («expr⊥» : SimpleGraph V).coloring (Fin 1) := coloring.mk (fun _ => 0) fun v w h => false.elim h\n  apply le_antisymm\n  · exact chromatic_number_le_card C\n  · exact chromatic_number_pos C.to_colorable\n#align chromatic_number_bot chromatic_number_bot\n\n",
 "chromatic_number_bdd_below":
 "theorem chromatic_number_bdd_below : BddBelow { n : ℕ | G.colorable n } :=\n  ⟨0, fun _ _ => zero_le _⟩\n#align chromatic_number_bdd_below chromatic_number_bdd_below\n\n",
 "chromatic_number":
 "theorem complete_bipartite_graph.chromatic_number {V W : Type _} [Nonempty V] [Nonempty W] :\n    (completeBipartiteGraph V W).chromatic_number = 2 :=\n  by\n  apply chromatic_number_eq_card_of_forall_surj (complete_bipartite_graph.bicoloring V W)\n  intro C b\n  have v := Classical.arbitrary V\n  have w := Classical.arbitrary W\n  have h : (completeBipartiteGraph V W).adj (Sum.inl v) (Sum.inr w) := by simp\n  have hn := C.valid h\n  by_cases he : C (Sum.inl v) = b\n  · exact ⟨_, he⟩\n  · by_cases he' : C (Sum.inr w) = b\n    · exact ⟨_, he'⟩\n    · exfalso\n      cases b <;> simp only [eq_tt_eq_not_eq_ff, Bool.eq_false_eq_not_eq_true] at he he' <;> rw [he, he'] at hn <;>\n        contradiction\n#align complete_bipartite_graph.chromatic_number complete_bipartite_graph.chromatic_number\n\n",
 "card_le_of_coloring":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\ntheorem is_clique.card_le_of_coloring {s : Finset V} (h : G.is_clique s) [Fintype α] (C : G.coloring α) :\n    s.card ≤ Fintype.card α := by\n  rw [is_clique_iff_induce_eq] at h\n  have f : «expr ↪g » (G.induce ↑s) G := embedding.induce ↑s\n  rw [h] at f\n  convert Fintype.card_le_of_injective _ (C.comp f.to_hom).injective_of_top_hom using 1\n  simp\n#align is_clique.card_le_of_coloring is_clique.card_le_of_coloring\n\n",
 "card_le_of_colorable":
 "theorem is_clique.card_le_of_colorable {s : Finset V} (h : G.is_clique s) {n : ℕ} (hc : G.colorable n) : s.card ≤ n :=\n  by\n  convert h.card_le_of_coloring hc.some\n  simp\n#align is_clique.card_le_of_colorable is_clique.card_le_of_colorable\n\n",
 "card_le_chromatic_number":
 "-- TODO eliminate `finite V` constraint once chromatic numbers are refactored.\n-- This is just to ensure the chromatic number exists.\ntheorem is_clique.card_le_chromatic_number [Finite V] {s : Finset V} (h : G.is_clique s) :\n    s.card ≤ G.chromatic_number := by\n  cases nonempty_fintype V\n  exact h.card_le_of_colorable G.colorable_chromatic_number_of_fintype\n#align is_clique.card_le_chromatic_number is_clique.card_le_chromatic_number\n\n",
 "card_color_classes_le":
 "theorem coloring.card_color_classes_le [Fintype α] [Fintype C.color_classes] :\n    Fintype.card C.color_classes ≤ Fintype.card α :=\n  Setoid.card_classes_ker_le C\n#align coloring.card_color_classes_le coloring.card_color_classes_le\n\n"}