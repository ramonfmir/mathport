{"subset":
 "theorem is_clique.subset (h : t ⊆ s) : G.is_clique s → G.is_clique t :=\n  by\n  simp_rw [is_clique_iff]\n  exact Set.Pairwise.mono h\n#align is_clique.subset is_clique.subset\n\n",
 "not_clique_free_of_top_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem not_clique_free_of_top_embedding {n : ℕ} (f : «expr ↪g » («expr⊤» : SimpleGraph (Fin n)) G) :\n    ¬G.clique_free n :=\n  by\n  simp only [clique_free, is_n_clique_iff, is_clique_iff_induce_eq, not_forall, Classical.not_not]\n  use finset.univ.map f.to_embedding\n  simp only [card_map, Finset.card_fin, eq_self_iff_true, and_true_iff]\n  ext (⟨v, hv⟩⟨w, hw⟩)\n  simp only [coe_map, RelEmbedding.coe_toEmbedding, Set.mem_image, coe_univ, Set.mem_univ, true_and_iff] at hv hw\n  obtain ⟨v', rfl⟩ := hv\n  obtain ⟨w', rfl⟩ := hw\n  simp only [f.map_adj_iff, comap_adj, Function.Embedding.coe_subtype, Subtype.coe_mk, top_adj, ne.def,\n    Subtype.mk_eq_mk]\n  exact (Function.Embedding.apply_eq_iff_eq _ _ _).symm.not\n#align not_clique_free_of_top_embedding not_clique_free_of_top_embedding\n\n",
 "not_clique_free_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem not_clique_free_iff (n : ℕ) : ¬G.clique_free n ↔ Nonempty («expr ↪g » («expr⊤» : SimpleGraph (Fin n)) G) :=\n  by\n  constructor\n  · exact fun h => ⟨top_embedding_of_not_clique_free h⟩\n  · rintro ⟨f⟩\n    exact not_clique_free_of_top_embedding f\n#align not_clique_free_iff not_clique_free_iff\n\n",
 "not_clique_free_card_of_top_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem not_clique_free_card_of_top_embedding [Fintype α] (f : «expr ↪g » («expr⊤» : SimpleGraph α) G) :\n    ¬G.clique_free (card α) := by\n  rw [not_clique_free_iff]\n  use (iso.complete_graph (Fintype.equivFin α)).symm.to_embedding.trans f\n#align not_clique_free_card_of_top_embedding not_clique_free_card_of_top_embedding\n\n",
 "not_clique_free":
 "theorem is_n_clique.not_clique_free (hG : G.is_n_clique n s) : ¬G.clique_free n := fun h => h _ hG\n#align is_n_clique.not_clique_free is_n_clique.not_clique_free\n\n",
 "mono":
 "theorem clique_free.mono (h : m ≤ n) : G.clique_free m → G.clique_free n :=\n  by\n  rintro hG s hs\n  obtain ⟨t, hts, ht⟩ := s.exists_smaller_set _ (h.trans hs.card_eq.ge)\n  exact hG _ ⟨hs.clique.subset hts, ht⟩\n#align clique_free.mono clique_free.mono\n\n",
 "mem_clique_set_iff":
 "theorem mem_clique_set_iff : s ∈ G.clique_set n ↔ G.is_n_clique n s :=\n  iff.rfl\n#align mem_clique_set_iff mem_clique_set_iff\n\n",
 "mem_clique_finset_iff":
 "theorem mem_clique_finset_iff : s ∈ G.clique_finset n ↔ G.is_n_clique n s :=\n  mem_filter.trans <| and_iff_right <| mem_univ _\n#align mem_clique_finset_iff mem_clique_finset_iff\n\n",
 "is_n_clique_iff":
 "theorem is_n_clique_iff : G.is_n_clique n s ↔ G.is_clique s ∧ s.card = n :=\n  ⟨fun h => ⟨h.1, h.2⟩, fun h => ⟨h.1, h.2⟩⟩\n#align is_n_clique_iff is_n_clique_iff\n\n",
 "is_n_clique_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem is_n_clique_bot_iff : («expr⊥» : SimpleGraph α).is_n_clique n s ↔ n ≤ 1 ∧ s.card = n :=\n  by\n  rw [is_n_clique_iff, is_clique_bot_iff]\n  refine' and_congr_left _\n  rintro rfl\n  exact card_le_one.symm\n#align is_n_clique_bot_iff is_n_clique_bot_iff\n\n",
 "is_clique_iff_induce_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- A clique is a set of vertices whose induced graph is complete. -/\ntheorem is_clique_iff_induce_eq : G.is_clique s ↔ G.induce s = «expr⊤» :=\n  by\n  rw [is_clique_iff]\n  constructor\n  · intro h\n    ext (⟨v, hv⟩⟨w, hw⟩)\n    simp only [comap_adj, Subtype.coe_mk, top_adj, ne.def, Subtype.mk_eq_mk]\n    exact ⟨adj.ne, h hv hw⟩\n  · intro h v hv w hw hne\n    have : (G.induce s).adj ⟨v, hv⟩ ⟨w, hw⟩ = _ := rfl\n    conv_lhs at this => rw [h]\n    simpa [hne]\n#align is_clique_iff_induce_eq is_clique_iff_induce_eq\n\n",
 "is_clique_iff":
 "/-\nCopyright (c) 2022 Yaël Dillies, Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies, Bhavik Mehta\n-/\ntheorem is_clique_iff : G.is_clique s ↔ s.pairwise G.adj :=\n  iff.rfl\n#align is_clique_iff is_clique_iff\n\n",
 "is_clique_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem is_clique_bot_iff : («expr⊥» : SimpleGraph α).is_clique s ↔ (s : Set α).subsingleton :=\n  Set.pairwise_bot_iff\n#align is_clique_bot_iff is_clique_bot_iff\n\n",
 "is_3_clique_triple_iff":
 "theorem is_3_clique_triple_iff : G.is_n_clique 3 {a, b, c} ↔ G.adj a b ∧ G.adj a c ∧ G.adj b c :=\n  by\n  simp only [is_n_clique_iff, is_clique_iff, Set.pairwise_insert_of_symmetric G.symm, coe_insert]\n  have : ¬1 + 1 = 3 := by norm_num\n  by_cases hab : a = b <;> by_cases hbc : b = c <;> by_cases hac : a = c <;> subst_vars <;>\n    simp [G.ne_of_adj, and_rotate, *]\n#align is_3_clique_triple_iff is_3_clique_triple_iff\n\n",
 "is_3_clique_iff":
 "theorem is_3_clique_iff : G.is_n_clique 3 s ↔ ∃ a b c, G.adj a b ∧ G.adj a c ∧ G.adj b c ∧ s = {a, b, c} :=\n  by\n  refine' ⟨fun h => _, _⟩\n  · obtain ⟨a, b, c, -, -, -, rfl⟩ := card_eq_three.1 h.card_eq\n    refine' ⟨a, b, c, _⟩\n    rw [is_3_clique_triple_iff] at h\n    tauto\n  · rintro ⟨a, b, c, hab, hbc, hca, rfl⟩\n    exact is_3_clique_triple_iff.2 ⟨hab, hbc, hca⟩\n#align is_3_clique_iff is_3_clique_iff\n\n",
 "coe_clique_finset":
 "@[simp]\ntheorem coe_clique_finset (n : ℕ) : (G.clique_finset n : Set (Finset α)) = G.clique_set n :=\n  Set.ext fun _ => mem_cliqueFinset_iff _\n#align coe_clique_finset coe_clique_finset\n\n",
 "clique_set_mono'":
 "theorem clique_set_mono' (h : G ≤ H) : G.clique_set ≤ H.clique_set := fun _ => cliqueSet_mono h\n#align clique_set_mono' clique_set_mono'\n\n",
 "clique_set_mono":
 "@[mono]\ntheorem clique_set_mono (h : G ≤ H) : G.clique_set n ⊆ H.clique_set n := fun _ => IsNClique.mono h\n#align clique_set_mono clique_set_mono\n\n",
 "clique_set_eq_empty_iff":
 "@[simp]\ntheorem clique_set_eq_empty_iff : G.clique_set n = ∅ ↔ G.clique_free n := by\n  simp_rw [clique_free, Set.eq_empty_iff_forall_not_mem, mem_clique_set_iff]\n#align clique_set_eq_empty_iff clique_set_eq_empty_iff\n\n",
 "clique_free_of_card_lt":
 "/-- See `simple_graph.clique_free_chromatic_number_succ` for a tighter bound. -/\ntheorem clique_free_of_card_lt [Fintype α] (hc : card α < n) : G.clique_free n :=\n  by\n  by_contra h\n  refine' nat.lt_le_antisymm hc _\n  rw [clique_free_iff, not_isEmpty_iff] at h\n  simpa using Fintype.card_le_of_embedding h.some.to_embedding\n#align clique_free_of_card_lt clique_free_of_card_lt\n\n",
 "clique_free_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪g » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem clique_free_iff {n : ℕ} : G.clique_free n ↔ IsEmpty («expr ↪g » («expr⊤» : SimpleGraph (Fin n)) G) := by\n  rw [← not_iff_not, not_clique_free_iff, not_isEmpty_iff]\n#align clique_free_iff clique_free_iff\n\n",
 "clique_free_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem clique_free_bot (h : 2 ≤ n) : («expr⊥» : SimpleGraph α).clique_free n :=\n  by\n  rintro t ht\n  rw [is_n_clique_bot_iff] at ht\n  linarith\n#align clique_free_bot clique_free_bot\n\n",
 "clique_finset_mono":
 "@[mono]\ntheorem clique_finset_mono (h : G ≤ H) : G.clique_finset n ⊆ H.clique_finset n :=\n  monotone_filter_right _ fun _ => IsNClique.mono h\n#align clique_finset_mono clique_finset_mono\n\n",
 "clique_finset_eq_empty_iff":
 "@[simp]\ntheorem clique_finset_eq_empty_iff : G.clique_finset n = ∅ ↔ G.clique_free n := by\n  simp_rw [clique_free, eq_empty_iff_forall_not_mem, mem_clique_finset_iff]\n#align clique_finset_eq_empty_iff clique_finset_eq_empty_iff\n\n",
 "anti":
 "theorem clique_free.anti (h : G ≤ H) : H.clique_free n → G.clique_free n :=\n  forall_imp fun s => mt <| IsNClique.mono h\n#align clique_free.anti clique_free.anti\n\n"}