{"singleton_finsubgraph_le_adj_right":
 "theorem singleton_finsubgraph_le_adj_right {u v : V} {e : G.adj u v} : singleton_finsubgraph v ≤ finsubgraph_of_adj e :=\n  by simp [singleton_finsubgraph, finsubgraph_of_adj]\n#align singleton_finsubgraph_le_adj_right singleton_finsubgraph_le_adj_right\n\n",
 "singleton_finsubgraph_le_adj_left":
 "/-\nCopyright (c) 2022 Joanna Choules. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joanna Choules\n-/\n-- Lemmas establishing the ordering between edge- and vertex-generated subgraphs.\ntheorem singleton_finsubgraph_le_adj_left {u v : V} {e : G.adj u v} : singleton_finsubgraph u ≤ finsubgraph_of_adj e :=\n  by simp [singleton_finsubgraph, finsubgraph_of_adj]\n#align singleton_finsubgraph_le_adj_left singleton_finsubgraph_le_adj_left\n\n",
 "nonempty_hom_of_forall_finite_subgraph_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →g » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →g » -/\n/-- If every finite subgraph of a graph `G` has a homomorphism to a finite graph `F`, then there is\na homomorphism from the whole of `G` to `F`. -/\ntheorem nonempty_hom_of_forall_finite_subgraph_hom [Finite W]\n    (h : ∀ G' : G.subgraph, G'.verts.finite → «expr →g » G'.coe F) : Nonempty («expr →g » G F) :=\n  by\n  -- Obtain a `fintype` instance for `W`.\n  cases nonempty_fintype W\n  -- Establish the required interface instances.\n  haveI : ∀ G' : «expr ᵒᵖ» G.finsubgraph, Nonempty ((finsubgraph_hom_functor G F).obj G') := fun G' =>\n    ⟨h G'.unop G'.unop.property⟩\n  haveI : ∀ G' : «expr ᵒᵖ» G.finsubgraph, Fintype ((finsubgraph_hom_functor G F).obj G') :=\n    by\n    intro G'\n    haveI : Fintype («expr↥ » G'.unop.val.verts) := G'.unop.property.fintype\n    haveI : Fintype («expr↥ » G'.unop.val.verts → W) := by classical exact Pi.fintype\n    exact Fintype.ofInjective (fun f => f.to_fun) RelHom.coe_fn_injective\n  -- Use compactness to obtain a section.\n  obtain ⟨u, hu⟩ := nonempty_sections_of_finite_inverse_system (finsubgraph_hom_functor G F)\n  refine' ⟨⟨fun v => _, _⟩⟩\n  ·-- Map each vertex using the homomorphism provided for its singleton subgraph.\n    exact\n      (u (Opposite.op (singleton_finsubgraph v))).to_fun\n        ⟨v, by\n          unfold singleton_finsubgraph\n          simp⟩\n  · -- Prove that the above mapping preserves adjacency.\n    intro v v' e\n    /- The homomorphism for each edge's singleton subgraph agrees with those for its source and\n        target vertices. -/\n    have hv : «expr ⟶ » (Opposite.op (finsubgraph_of_adj e)) (Opposite.op (singleton_finsubgraph v)) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singleton_finsubgraph_le_adj_left)\n    have hv' : «expr ⟶ » (Opposite.op (finsubgraph_of_adj e)) (Opposite.op (singleton_finsubgraph v')) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singleton_finsubgraph_le_adj_right)\n    rw [← hu hv, ← hu hv']\n    apply SimpleGraph.Hom.map_adj\n    -- `v` and `v'` are definitionally adjacent in `finsubgraph_of_adj e`\n    simp [finsubgraph_of_adj]\n#align nonempty_hom_of_forall_finite_subgraph_hom nonempty_hom_of_forall_finite_subgraph_hom\n\n"}