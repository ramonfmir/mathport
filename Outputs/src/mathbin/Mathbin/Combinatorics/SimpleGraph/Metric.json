{"pos_dist_of_ne":
 "protected theorem connected.pos_dist_of_ne {u v : V} (hconn : G.connected) (hne : u ≠ v) : 0 < G.dist u v :=\n  nat.pos_of_ne_zero (by simp [hconn.dist_eq_zero_iff, hne])\n#align connected.pos_dist_of_ne connected.pos_dist_of_ne\n\n",
 "nonempty_of_pos_dist":
 "theorem nonempty_of_pos_dist {u v : V} (h : 0 < G.dist u v) : (Set.univ : set (G.walk u v)).nonempty := by\n  simpa [Set.range_nonempty_iff_nonempty, Set.nonempty_iff_univ_nonempty] using nat.nonempty_of_pos_Inf h\n#align nonempty_of_pos_dist nonempty_of_pos_dist\n\n",
 "exists_walk_of_dist":
 "protected theorem connected.exists_walk_of_dist (hconn : G.connected) (u v : V) :\n    ∃ p : G.walk u v, p.length = G.dist u v :=\n  (hconn u v).exists_walk_of_dist\n#align connected.exists_walk_of_dist connected.exists_walk_of_dist\n\n",
 "dist_triangle":
 "protected theorem connected.dist_triangle (hconn : G.connected) {u v w : V} : G.dist u w ≤ G.dist u v + G.dist v w :=\n  by\n  obtain ⟨p, hp⟩ := hconn.exists_walk_of_dist u v\n  obtain ⟨q, hq⟩ := hconn.exists_walk_of_dist v w\n  rw [← hp, ← hq, ← walk.length_append]\n  apply dist_le\n#align connected.dist_triangle connected.dist_triangle\n\n",
 "dist_self":
 "theorem dist_self {v : V} : dist G v v = 0 := by simp\n#align dist_self dist_self\n\n",
 "dist_le":
 "theorem dist_le {u v : V} (p : G.walk u v) : G.dist u v ≤ p.length :=\n  nat.Inf_le ⟨p, rfl⟩\n#align dist_le dist_le\n\n",
 "dist_eq_zero_of_not_reachable":
 "theorem dist_eq_zero_of_not_reachable {u v : V} (h : ¬G.reachable u v) : G.dist u v = 0 := by simp [h]\n#align dist_eq_zero_of_not_reachable dist_eq_zero_of_not_reachable\n\n",
 "dist_eq_zero_iff_eq_or_not_reachable":
 "@[simp]\ntheorem dist_eq_zero_iff_eq_or_not_reachable {u v : V} : G.dist u v = 0 ↔ u = v ∨ ¬G.reachable u v := by\n  simp [dist, nat.Inf_eq_zero, reachable]\n#align dist_eq_zero_iff_eq_or_not_reachable dist_eq_zero_iff_eq_or_not_reachable\n\n",
 "dist_eq_zero_iff":
 "protected theorem connected.dist_eq_zero_iff (hconn : G.connected) {u v : V} : G.dist u v = 0 ↔ u = v := by\n  simp [hconn u v]\n#align connected.dist_eq_zero_iff connected.dist_eq_zero_iff\n\n",
 "dist_comm_aux":
 "private theorem dist_comm_aux {u v : V} (h : G.reachable u v) : G.dist u v ≤ G.dist v u :=\n  by\n  obtain ⟨p, hp⟩ := h.symm.exists_walk_of_dist\n  rw [← hp, ← walk.length_reverse]\n  apply dist_le\n#align dist_comm_aux dist_comm_aux\n\n",
 "dist_comm":
 "theorem dist_comm {u v : V} : G.dist u v = G.dist v u :=\n  by\n  by_cases h : G.reachable u v\n  · apply le_antisymm (dist_comm_aux h) (dist_comm_aux h.symm)\n  · have h' : ¬G.reachable v u := fun h' => absurd h'.symm h\n    simp [h, h', dist_eq_zero_of_not_reachable]\n#align dist_comm dist_comm\n\n"}