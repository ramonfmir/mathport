{"toComposition_length":
 "#print CompositionAsSet.toComposition_length /-\n@[simp]\ntheorem CompositionAsSet.toComposition_length (c : CompositionAsSet n) : c.to_composition.length = c.length := by\n  simp [CompositionAsSet.toComposition, Composition.length, composition.blocks]\n#align composition_as_set.to_composition_length CompositionAsSet.toComposition_length\n-/\n\n",
 "toComposition_boundaries":
 "#print CompositionAsSet.toComposition_boundaries /-\n@[simp]\ntheorem CompositionAsSet.toComposition_boundaries (c : CompositionAsSet n) :\n    c.to_composition.boundaries = c.boundaries := by\n  ext j\n  simp only [c.mem_boundaries_iff_exists_blocks_sum_take_eq, Composition.boundaries, Finset.mem_map]\n  constructor\n  · rintro ⟨i, _, hi⟩\n    refine' ⟨i.1, _, _⟩\n    simpa [c.card_boundaries_eq_succ_length] using i.2\n    simp [Composition.boundary, Composition.sizeUpTo, ← hi]\n  · rintro ⟨i, i_lt, hi⟩\n    refine' ⟨i, by simp, _⟩\n    rw [c.card_boundaries_eq_succ_length] at i_lt\n    simp [Composition.boundary, nat.mod_eq_of_lt i_lt, Composition.sizeUpTo, hi]\n#align composition_as_set.to_composition_boundaries CompositionAsSet.toComposition_boundaries\n-/\n\n",
 "toComposition_blocks":
 "#print CompositionAsSet.toComposition_blocks /-\n@[simp]\ntheorem CompositionAsSet.toComposition_blocks (c : CompositionAsSet n) : c.to_composition.blocks = c.blocks :=\n  rfl\n#align composition_as_set.to_composition_blocks CompositionAsSet.toComposition_blocks\n-/\n\n",
 "toCompositionAsSet_length":
 "#print Composition.toCompositionAsSet_length /-\n@[simp]\ntheorem Composition.toCompositionAsSet_length (c : Composition n) : c.to_composition_as_set.length = c.length := by\n  simp [Composition.toCompositionAsSet, CompositionAsSet.length, c.card_boundaries_eq_succ_length]\n#align composition.to_composition_as_set_length Composition.toCompositionAsSet_length\n-/\n\n",
 "toCompositionAsSet_boundaries":
 "#print Composition.toCompositionAsSet_boundaries /-\n@[simp]\ntheorem Composition.toCompositionAsSet_boundaries (c : Composition n) :\n    c.to_composition_as_set.boundaries = c.boundaries :=\n  rfl\n#align composition.to_composition_as_set_boundaries Composition.toCompositionAsSet_boundaries\n-/\n\n",
 "toCompositionAsSet_blocks":
 "#print Composition.toCompositionAsSet_blocks /-\n@[simp]\ntheorem Composition.toCompositionAsSet_blocks (c : Composition n) : c.to_composition_as_set.blocks = c.blocks :=\n  by\n  let d := c.to_composition_as_set\n  change d.blocks = c.blocks\n  have length_eq : d.blocks.length = c.blocks.length :=\n    by\n    convert c.to_composition_as_set_length\n    simp [CompositionAsSet.blocks]\n  suffices H : ∀ i ≤ d.blocks.length, (d.blocks.take i).sum = (c.blocks.take i).sum\n  exact eq_of_sum_take_eq length_eq H\n  intro i hi\n  have i_lt : i < d.boundaries.card := by\n    convert Nat.lt_succ_iff.2 hi\n    convert d.card_boundaries_eq_succ_length\n    exact length_of_fn _\n  have i_lt' : i < c.boundaries.card := i_lt\n  have i_lt'' : i < c.length + 1 := by rwa [c.card_boundaries_eq_succ_length] at i_lt'\n  have A :\n    d.boundaries.order_emb_of_fin rfl ⟨i, i_lt⟩ =\n      c.boundaries.order_emb_of_fin c.card_boundaries_eq_succ_length ⟨i, i_lt''⟩ :=\n    rfl\n  have B : c.size_up_to i = c.boundary ⟨i, i_lt''⟩ := rfl\n  rw [d.blocks_partial_sum i_lt, CompositionAsSet.boundary, ← Composition.sizeUpTo, B, A, c.order_emb_of_fin_boundaries]\n#align composition.to_composition_as_set_blocks Composition.toCompositionAsSet_blocks\n-/\n\n",
 "sum_take_map_length_split_wrt_composition":
 "theorem sum_take_map_length_split_wrt_composition (l : List α) (c : Composition l.length) (i : ℕ) :\n    (((l.split_wrt_composition c).map length).take i).sum = c.size_up_to i :=\n  by\n  congr\n  exact map_length_split_wrt_composition l c\n#align sum_take_map_length_split_wrt_composition sum_take_map_length_split_wrt_composition\n\n",
 "sum_blocks_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem sum_blocks_fun :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (c.blocks_fun i) =\n      n :=\n  by conv_rhs => rw [← c.blocks_sum, ← of_fn_blocks_fun, sum_of_fn]\n#align sum_blocks_fun sum_blocks_fun\n\n",
 "split_wrt_composition_join":
 "/-- If one joins a list of lists and then splits the join along the right composition, one gets\nback the original list of lists. -/\n@[simp]\ntheorem split_wrt_composition_join (L : List (List α)) (c : Composition L.join.length) (h : map length L = c.blocks) :\n    splitWrtComposition (join L) c = L := by\n  simp only [eq_self_iff_true, and_self_iff, eq_iff_join_eq, join_split_wrt_composition,\n    map_length_split_wrt_composition, h]\n#align split_wrt_composition_join split_wrt_composition_join\n\n",
 "split_wrt_composition_aux_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n@[local simp]\ntheorem split_wrt_composition_aux_cons (l : List α) (n ns) :\n    l.split_wrt_composition_aux (sym.cons' n ns) = sym.cons' (take n l) ((drop n l).split_wrt_composition_aux ns) := by\n  simp [split_wrt_composition_aux]\n#align split_wrt_composition_aux_cons split_wrt_composition_aux_cons\n\n",
 "size_up_to_zero":
 "@[simp]\ntheorem size_up_to_zero : c.size_up_to 0 = 0 := by simp [size_up_to]\n#align size_up_to_zero size_up_to_zero\n\n",
 "size_up_to_succ'":
 "theorem size_up_to_succ' (i : Fin c.length) : c.size_up_to ((i : ℕ) + 1) = c.size_up_to i + c.blocks_fun i :=\n  c.size_up_to_succ i.2\n#align size_up_to_succ' size_up_to_succ'\n\n",
 "size_up_to_succ":
 "theorem size_up_to_succ {i : ℕ} (h : i < c.length) : c.size_up_to (i + 1) = c.size_up_to i + c.blocks.nth_le i h :=\n  by\n  simp only [size_up_to]\n  rw [sum_take_succ _ _ h]\n#align size_up_to_succ size_up_to_succ\n\n",
 "size_up_to_strict_mono":
 "theorem size_up_to_strict_mono {i : ℕ} (h : i < c.length) : c.size_up_to i < c.size_up_to (i + 1) :=\n  by\n  rw [c.size_up_to_succ h]\n  simp\n#align size_up_to_strict_mono size_up_to_strict_mono\n\n",
 "size_up_to_of_length_le":
 "theorem size_up_to_of_length_le (i : ℕ) (h : c.length ≤ i) : c.size_up_to i = n :=\n  by\n  dsimp [size_up_to]\n  convert c.blocks_sum\n  exact take_all_of_le h\n#align size_up_to_of_length_le size_up_to_of_length_le\n\n",
 "size_up_to_length":
 "@[simp]\ntheorem size_up_to_length : c.size_up_to c.length = n :=\n  c.size_up_to_of_length_le c.length le_rfl\n#align size_up_to_length size_up_to_length\n\n",
 "size_up_to_le":
 "theorem size_up_to_le (i : ℕ) : c.size_up_to i ≤ n :=\n  by\n  conv_rhs => rw [← c.blocks_sum, ← sum_take_add_sum_drop _ i]\n  exact nat.le_add_right _ _\n#align size_up_to_le size_up_to_le\n\n",
 "size_up_to_index_le":
 "theorem size_up_to_index_le (j : Fin n) : c.size_up_to (c.index j) ≤ j :=\n  by\n  by_contra H\n  set i := c.index j with hi\n  push_neg  at H\n  have i_pos : (0 : ℕ) < i := by\n    by_contra' i_pos\n    revert H\n    simp [nonpos_iff_eq_zero.1 i_pos, c.size_up_to_zero]\n  let i₁ := (i : ℕ).pred\n  have i₁_lt_i : i₁ < i := nat.pred_lt (ne_of_gt i_pos)\n  have i₁_succ : i₁.succ = i := nat.succ_pred_eq_of_pos i_pos\n  have := nat.find_min (c.index_exists j.2) i₁_lt_i\n  simp [lt_trans i₁_lt_i (c.index j).2, i₁_succ] at this\n  exact nat.lt_le_antisymm H this\n#align size_up_to_index_le size_up_to_index_le\n\n",
 "single_length":
 "@[simp]\ntheorem single_length {n : ℕ} (h : 0 < n) : (single n h).length = 1 :=\n  rfl\n#align single_length single_length\n\n",
 "single_embedding":
 "@[simp]\ntheorem single_embedding {n : ℕ} (h : 0 < n) (i : Fin n) :\n    (single n h).embedding ⟨0, single_length h ▸ zero_lt_one⟩ i = i :=\n  by\n  ext\n  simp\n#align single_embedding single_embedding\n\n",
 "single_blocks_fun":
 "@[simp]\ntheorem single_blocks_fun {n : ℕ} (h : 0 < n) (i : Fin (single n h).length) : (single n h).blocks_fun i = n := by\n  simp [blocks_fun, single, blocks, i.2]\n#align single_blocks_fun single_blocks_fun\n\n",
 "single_blocks":
 "@[simp]\ntheorem single_blocks {n : ℕ} (h : 0 < n) : (single n h).blocks = [n] :=\n  rfl\n#align single_blocks single_blocks\n\n",
 "sigma_eq_iff_blocks_eq":
 "/-- Two compositions (possibly of different integers) coincide if and only if they have the\nsame sequence of blocks. -/\ntheorem sigma_eq_iff_blocks_eq {c : Σn, Composition n} {c' : Σn, Composition n} : c = c' ↔ c.2.blocks = c'.2.blocks :=\n  by\n  refine' ⟨fun H => by rw [H], fun H => _⟩\n  rcases c with ⟨n, c⟩\n  rcases c' with ⟨n', c'⟩\n  have : n = n' := by rw [← c.blocks_sum, ← c'.blocks_sum, H]\n  induction this\n  simp only [true_and_iff, eq_self_iff_true, heq_iff_eq]\n  ext1\n  exact H\n#align sigma_eq_iff_blocks_eq sigma_eq_iff_blocks_eq\n\n",
 "order_emb_of_fin_boundaries":
 "/-- The canonical increasing bijection between `fin (c.length + 1)` and `c.boundaries` is\nexactly `c.boundary`. -/\ntheorem order_emb_of_fin_boundaries : c.boundaries.order_emb_of_fin c.card_boundaries_eq_succ_length = c.boundary :=\n  by\n  refine' (Finset.orderEmbOfFin_unique' _ _).symm\n  exact fun i => (Finset.mem_map' _).2 (Finset.mem_univ _)\n#align order_emb_of_fin_boundaries order_emb_of_fin_boundaries\n\n",
 "ones_size_up_to":
 "@[simp]\ntheorem ones_size_up_to (n : ℕ) (i : ℕ) : (ones n).size_up_to i = min i n := by\n  simp [size_up_to, ones_blocks, take_replicate]\n#align ones_size_up_to ones_size_up_to\n\n",
 "ones_length":
 "@[simp]\ntheorem ones_length (n : ℕ) : (ones n).length = n :=\n  List.length_replicate n 1\n#align ones_length ones_length\n\n",
 "ones_embedding":
 "@[simp]\ntheorem ones_embedding (i : Fin (ones n).length) (h : 0 < (ones n).blocks_fun i) :\n    (ones n).embedding i ⟨0, h⟩ = ⟨i, lt_of_lt_of_le i.2 (ones n).length_le⟩ :=\n  by\n  ext\n  simpa using i.2.le\n#align ones_embedding ones_embedding\n\n",
 "ones_blocks_fun":
 "@[simp]\ntheorem ones_blocks_fun (n : ℕ) (i : Fin (ones n).length) : (ones n).blocks_fun i = 1 := by\n  simp [blocks_fun, ones, blocks, i.2]\n#align ones_blocks_fun ones_blocks_fun\n\n",
 "ones_blocks":
 "@[simp]\ntheorem ones_blocks (n : ℕ) : (ones n).blocks = replicate n (1 : ℕ) :=\n  rfl\n#align ones_blocks ones_blocks\n\n",
 "one_le_blocks_fun":
 "theorem one_le_blocks_fun (i : Fin c.length) : 1 ≤ c.blocks_fun i :=\n  c.one_le_blocks (c.blocks_fun_mem_blocks i)\n#align one_le_blocks_fun one_le_blocks_fun\n\n",
 "one_le_blocks'":
 "@[simp]\ntheorem one_le_blocks' {i : ℕ} (h : i < c.length) : 1 ≤ nthLe c.blocks i h :=\n  c.one_le_blocks (nthLe_mem (blocks c) i h)\n#align one_le_blocks' one_le_blocks'\n\n",
 "one_le_blocks":
 "@[simp]\ntheorem one_le_blocks {i : ℕ} (h : i ∈ c.blocks) : 1 ≤ i :=\n  c.blocks_pos h\n#align one_le_blocks one_le_blocks\n\n",
 "of_fn_blocks_fun":
 "theorem of_fn_blocks_fun : ofFn c.blocks_fun = c.blocks :=\n  ofFn_nthLe _\n#align of_fn_blocks_fun of_fn_blocks_fun\n\n",
 "nth_le_split_wrt_composition_aux":
 "theorem nth_le_split_wrt_composition_aux (l : List α) (ns : List ℕ) {i : ℕ} (hi) :\n    nthLe (l.split_wrt_composition_aux ns) i hi = (l.take (ns.take (i + 1)).sum).drop (ns.take i).sum :=\n  by\n  induction' ns with n ns IH generalizing l i; · cases hi\n  cases i <;> simp [IH]\n  rw [add_comm n, drop_add, drop_take]\n#align nth_le_split_wrt_composition_aux nth_le_split_wrt_composition_aux\n\n",
 "nth_le_split_wrt_composition":
 "/-- The `i`-th sublist in the splitting of a list `l` along a composition `c`, is the slice of `l`\nbetween the indices `c.size_up_to i` and `c.size_up_to (i+1)`, i.e., the indices in the `i`-th\nblock of the composition. -/\ntheorem nth_le_split_wrt_composition (l : List α) (c : Composition n) {i : ℕ}\n    (hi : i < (l.split_wrt_composition c).length) :\n    nthLe (l.split_wrt_composition c) i hi = (l.take (c.size_up_to (i + 1))).drop (c.size_up_to i) :=\n  nthLe_splitWrtCompositionAux _ _ _\n#align nth_le_split_wrt_composition nth_le_split_wrt_composition\n\n",
 "ne_single_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem ne_single_iff {n : ℕ} (hn : 0 < n) {c : Composition n} : c ≠ single n hn ↔ ∀ i, c.blocks_fun i < n :=\n  by\n  rw [← not_iff_not]\n  push_neg\n  constructor\n  · rintro rfl\n    exact ⟨⟨0, by simp⟩, by simp⟩\n  · rintro ⟨i, hi⟩\n    rw [eq_single_iff_length]\n    have : ∀ j : Fin c.length, j = i := by\n      intro j\n      by_contra ji\n      apply\n        lt_irrefl\n          (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (c.blocks_fun k))\n      calc\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              (c.blocks_fun k) ≤\n            c.blocks_fun i :=\n          by simp only [c.sum_blocks_fun, hi]\n        _ <\n            finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n              (c.blocks_fun k) :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocks_fun j) fun _ _ _ => zero_le _\n        \n    simpa using Fintype.card_eq_one_of_forall_eq this\n#align ne_single_iff ne_single_iff\n\n",
 "ne_ones_iff":
 "theorem ne_ones_iff {c : Composition n} : c ≠ ones n ↔ ∃ i ∈ c.blocks, 1 < i :=\n  by\n  refine' (not_congr eq_ones_iff).trans _\n  have : ∀ j ∈ c.blocks, j = 1 ↔ j ≤ 1 := fun j hj => by simp [le_antisymm_iff, c.one_le_blocks hj]\n  simp (config := { contextual := true }) [this]\n#align ne_ones_iff ne_ones_iff\n\n",
 "monotone_size_up_to":
 "theorem monotone_size_up_to : Monotone c.size_up_to :=\n  monotone_sum_take _\n#align monotone_size_up_to monotone_size_up_to\n\n",
 "mem_range_embedding_iff'":
 "theorem mem_range_embedding_iff' {j : Fin n} {i : Fin c.length} : j ∈ Set.range (c.embedding i) ↔ i = c.index j :=\n  by\n  constructor\n  · rw [← not_imp_not]\n    intro h\n    exact Set.disjoint_right.1 (c.disjoint_range h) (c.mem_range_embedding j)\n  · intro h\n    rw [h]\n    exact c.mem_range_embedding j\n#align mem_range_embedding_iff' mem_range_embedding_iff'\n\n",
 "mem_range_embedding_iff":
 "theorem mem_range_embedding_iff {j : Fin n} {i : Fin c.length} :\n    j ∈ Set.range (c.embedding i) ↔ c.size_up_to i ≤ j ∧ (j : ℕ) < c.size_up_to (i : ℕ).succ :=\n  by\n  constructor\n  · intro h\n    rcases Set.mem_range.2 h with ⟨k, hk⟩\n    rw [Fin.ext_iff] at hk\n    change c.size_up_to i + k = (j : ℕ) at hk\n    rw [← hk]\n    simp [size_up_to_succ', k.is_lt]\n  · intro h\n    apply Set.mem_range.2\n    refine' ⟨⟨j - c.size_up_to i, _⟩, _⟩\n    · rw [tsub_lt_iff_left, ← size_up_to_succ']\n      · exact h.2\n      · exact h.1\n    · rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1\n#align mem_range_embedding_iff mem_range_embedding_iff\n\n",
 "mem_range_embedding":
 "theorem mem_range_embedding (j : Fin n) : j ∈ Set.range (c.embedding (c.index j)) :=\n  by\n  have : c.embedding (c.index j) (c.inv_embedding j) ∈ Set.range (c.embedding (c.index j)) := Set.mem_range_self _\n  rwa [c.embedding_comp_inv j] at this\n#align mem_range_embedding mem_range_embedding\n\n",
 "mem_boundaries_iff_exists_blocks_sum_take_eq":
 "theorem mem_boundaries_iff_exists_blocks_sum_take_eq {j : Fin (n + 1)} :\n    j ∈ c.boundaries ↔ ∃ i < c.boundaries.card, (c.blocks.take i).sum = j :=\n  by\n  constructor\n  · intro hj\n    rcases(c.boundaries.order_iso_of_fin rfl).surjective ⟨j, hj⟩ with ⟨i, hi⟩\n    rw [Subtype.ext_iff, Subtype.coe_mk] at hi\n    refine' ⟨i.1, i.2, _⟩\n    rw [← hi, c.blocks_partial_sum i.2]\n    rfl\n  · rintro ⟨i, hi, H⟩\n    convert(c.boundaries.order_iso_of_fin rfl ⟨i, hi⟩).2\n    have : c.boundary ⟨i, hi⟩ = j := by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]\n    exact this.symm\n#align mem_boundaries_iff_exists_blocks_sum_take_eq mem_boundaries_iff_exists_blocks_sum_take_eq\n\n",
 "map_length_split_wrt_composition_aux":
 "theorem map_length_split_wrt_composition_aux {ns : List ℕ} :\n    ∀ {l : List α}, ns.sum ≤ l.length → map length (l.split_wrt_composition_aux ns) = ns :=\n  by\n  induction' ns with n ns IH <;> intro l h <;> simp at h⊢\n  have := le_trans (nat.le_add_right _ _) h\n  rw [IH]; · simp [this]\n  rwa [length_drop, le_tsub_iff_left this]\n#align map_length_split_wrt_composition_aux map_length_split_wrt_composition_aux\n\n",
 "map_length_split_wrt_composition":
 "/-- When one splits a list along a composition `c`, the lengths of the sublists thus created are\ngiven by the block sizes in `c`. -/\ntheorem map_length_split_wrt_composition (l : List α) (c : Composition l.length) :\n    map length (l.split_wrt_composition c) = c.blocks :=\n  map_length_splitWrtCompositionAux (le_of_eq c.blocks_sum)\n#align map_length_split_wrt_composition map_length_split_wrt_composition\n\n",
 "lt_size_up_to_index_succ":
 "theorem lt_size_up_to_index_succ (j : Fin n) : (j : ℕ) < c.size_up_to (c.index j).succ :=\n  (nat.find_spec (c.index_exists j.2)).1\n#align lt_size_up_to_index_succ lt_size_up_to_index_succ\n\n",
 "lt_length'":
 "theorem lt_length' (i : Fin c.length) : (i : ℕ) < c.boundaries.card :=\n  lt_of_le_of_lt (nat.le_succ i) (c.lt_length i)\n#align lt_length' lt_length'\n\n",
 "lt_length":
 "theorem lt_length (i : Fin c.length) : (i : ℕ) + 1 < c.boundaries.card :=\n  lt_tsub_iff_right.mp i.2\n#align lt_length lt_length\n\n",
 "length_split_wrt_composition_aux":
 "theorem length_split_wrt_composition_aux (l : List α) (ns) : length (l.split_wrt_composition_aux ns) = ns.length := by\n  induction ns generalizing l <;> simp [*]\n#align length_split_wrt_composition_aux length_split_wrt_composition_aux\n\n",
 "length_split_wrt_composition":
 "/-- When one splits a list along a composition `c`, the number of sublists thus created is\n`c.length`. -/\n@[simp]\ntheorem length_split_wrt_composition (l : List α) (c : Composition n) : length (l.split_wrt_composition c) = c.length :=\n  length_splitWrtCompositionAux _ _\n#align length_split_wrt_composition length_split_wrt_composition\n\n",
 "length_pos_of_pos":
 "theorem length_pos_of_pos (h : 0 < n) : 0 < c.length :=\n  by\n  apply length_pos_of_sum_pos\n  convert h\n  exact c.blocks_sum\n#align length_pos_of_pos length_pos_of_pos\n\n",
 "length_pos_of_mem_split_wrt_composition":
 "theorem length_pos_of_mem_split_wrt_composition {l l' : List α} {c : Composition l.length}\n    (h : l' ∈ l.split_wrt_composition c) : 0 < length l' :=\n  by\n  have : l'.length ∈ (l.split_wrt_composition c).map list.length := List.mem_map_of_mem list.length h\n  rw [map_length_split_wrt_composition] at this\n  exact c.blocks_pos this\n#align length_pos_of_mem_split_wrt_composition length_pos_of_mem_split_wrt_composition\n\n",
 "length_lt_card_boundaries":
 "theorem length_lt_card_boundaries : c.length < c.boundaries.card :=\n  by\n  rw [c.card_boundaries_eq_succ_length]\n  exact lt_add_one _\n#align length_lt_card_boundaries length_lt_card_boundaries\n\n",
 "length_le":
 "theorem length_le : c.length ≤ n := by\n  conv_rhs => rw [← c.blocks_sum]\n  exact length_le_sum_of_one_le _ fun i hi => c.one_le_blocks hi\n#align length_le length_le\n\n",
 "join_split_wrt_composition_aux":
 "theorem join_split_wrt_composition_aux {ns : List ℕ} :\n    ∀ {l : List α}, ns.sum = l.length → (l.split_wrt_composition_aux ns).join = l :=\n  by\n  induction' ns with n ns IH <;> intro l h <;> simp at h⊢\n  · exact (length_eq_zero.1 h.symm).symm\n  rw [IH]; · simp\n  rwa [length_drop, ← h, add_tsub_cancel_left]\n#align join_split_wrt_composition_aux join_split_wrt_composition_aux\n\n",
 "join_split_wrt_composition":
 "/-- If one splits a list along a composition, and then joins the sublists, one gets back the\noriginal list. -/\n@[simp]\ntheorem join_split_wrt_composition (l : List α) (c : Composition l.length) : (l.split_wrt_composition c).join = l :=\n  join_splitWrtCompositionAux c.blocks_sum\n#align join_split_wrt_composition join_split_wrt_composition\n\n",
 "inv_embedding_comp":
 "theorem inv_embedding_comp (i : Fin c.length) (j : Fin (c.blocks_fun i)) :\n    (c.inv_embedding (c.embedding i j) : ℕ) = j := by\n  simp_rw [coe_inv_embedding, index_embedding, coe_embedding, add_tsub_cancel_left]\n#align inv_embedding_comp inv_embedding_comp\n\n",
 "index_exists":
 "/-- `index_exists` asserts there is some `i` with `j < c.size_up_to (i+1)`.\nIn the next definition `index` we use `nat.find` to produce the minimal such index.\n-/\ntheorem index_exists {j : ℕ} (h : j < n) : ∃ i : ℕ, j < c.size_up_to i.succ ∧ i < c.length :=\n  by\n  have n_pos : 0 < n := lt_of_le_of_lt (zero_le j) h\n  have : 0 < c.blocks.sum := by rwa [← c.blocks_sum] at n_pos\n  have length_pos : 0 < c.blocks.length := length_pos_of_sum_pos (blocks c) this\n  refine' ⟨c.length.pred, _, nat.pred_lt (ne_of_gt length_pos)⟩\n  have : c.length.pred.succ = c.length := nat.succ_pred_eq_of_pos length_pos\n  simp [this, h]\n#align index_exists index_exists\n\n",
 "index_embedding":
 "theorem index_embedding (i : Fin c.length) (j : Fin (c.blocks_fun i)) : c.index (c.embedding i j) = i :=\n  by\n  symm\n  rw [← mem_range_embedding_iff']\n  apply Set.mem_range_self\n#align index_embedding index_embedding\n\n",
 "eq_single_iff_length":
 "theorem eq_single_iff_length {n : ℕ} (h : 0 < n) {c : Composition n} : c = single n h ↔ c.length = 1 :=\n  by\n  constructor\n  · intro H\n    rw [H]\n    exact single_length h\n  · intro H\n    ext1\n    have A : c.blocks.length = 1 := H ▸ c.blocks_length\n    have B : c.blocks.sum = n := c.blocks_sum\n    rw [eq_cons_of_length_one A] at B⊢\n    simpa [single_blocks] using B\n#align eq_single_iff_length eq_single_iff_length\n\n",
 "eq_ones_iff_length":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\ntheorem eq_ones_iff_length {c : Composition n} : c = ones n ↔ c.length = n :=\n  by\n  constructor\n  · rintro rfl\n    exact ones_length n\n  · contrapose\n    intro H length_n\n    apply lt_irrefl n\n    calc\n      n = finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\" 1 :=\n        by simp [length_n]\n      _ <\n          finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n            (c.blocks_fun i) :=\n        by\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← of_fn_blocks_fun, mem_of_fn c.blocks_fun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocks_fun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i hi => by simp [blocks_fun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n      _ = n := c.sum_blocks_fun\n      \n#align eq_ones_iff_length eq_ones_iff_length\n\n",
 "eq_ones_iff_le_length":
 "theorem eq_ones_iff_le_length {c : Composition n} : c = ones n ↔ n ≤ c.length := by\n  simp [eq_ones_iff_length, le_antisymm_iff, c.length_le]\n#align eq_ones_iff_le_length eq_ones_iff_le_length\n\n",
 "eq_ones_iff":
 "theorem eq_ones_iff {c : Composition n} : c = ones n ↔ ∀ i ∈ c.blocks, i = 1 :=\n  by\n  constructor\n  · rintro rfl\n    exact fun i => eq_of_mem_replicate\n  · intro H\n    ext1\n    have A : c.blocks = replicate c.blocks.length 1 := eq_replicate_of_mem H\n    have : c.blocks.length = n := by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp\n    rw [A, this, ones_blocks]\n#align eq_ones_iff eq_ones_iff\n\n",
 "embedding_comp_inv":
 "theorem embedding_comp_inv (j : Fin n) : c.embedding (c.index j) (c.inv_embedding j) = j :=\n  by\n  rw [Fin.ext_iff]\n  apply add_tsub_cancel_of_le (c.size_up_to_index_le j)\n#align embedding_comp_inv embedding_comp_inv\n\n",
 "disjoint_range":
 "/-- The embeddings of different blocks of a composition are disjoint. -/\ntheorem disjoint_range {i₁ i₂ : Fin c.length} (h : i₁ ≠ i₂) :\n    Disjoint (Set.range (c.embedding i₁)) (Set.range (c.embedding i₂)) := by\n  classical\n    wlog h' : i₁ < i₂\n    · exact (this c h.symm (h.lt_or_lt.resolve_left h')).symm\n    by_contra d\n    obtain ⟨x, hx₁, hx₂⟩ : ∃ x : Fin n, x ∈ Set.range (c.embedding i₁) ∧ x ∈ Set.range (c.embedding i₂) :=\n      Set.not_disjoint_iff.1 d\n    have A : (i₁ : ℕ).succ ≤ i₂ := nat.succ_le_of_lt h'\n    apply lt_irrefl (x : ℕ)\n    calc\n      (x : ℕ) < c.size_up_to (i₁ : ℕ).succ := (c.mem_range_embedding_iff.1 hx₁).2\n      _ ≤ c.size_up_to (i₂ : ℕ) := (monotone_sum_take _ A)\n      _ ≤ x := (c.mem_range_embedding_iff.1 hx₂).1\n      \n#align disjoint_range disjoint_range\n\n",
 "composition_card":
 "#print composition_card /-\ntheorem composition_card (n : ℕ) : Fintype.card (Composition n) = 2 ^ (n - 1) :=\n  by\n  rw [← compositionAsSet_card n]\n  exact Fintype.card_congr (compositionEquiv n)\n#align composition_card composition_card\n-/\n\n",
 "compositionAsSet_card":
 "#print compositionAsSet_card /-\ntheorem compositionAsSet_card (n : ℕ) : Fintype.card (CompositionAsSet n) = 2 ^ (n - 1) :=\n  by\n  have : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1) := by simp\n  rw [← this]\n  exact Fintype.card_congr (compositionAsSetEquiv n)\n#align composition_as_set_card compositionAsSet_card\n-/\n\n",
 "coe_inv_embedding":
 "@[simp]\ntheorem coe_inv_embedding (j : Fin n) : (c.inv_embedding j : ℕ) = j - c.size_up_to (c.index j) :=\n  rfl\n#align coe_inv_embedding coe_inv_embedding\n\n",
 "coe_embedding":
 "@[simp]\ntheorem coe_embedding (i : Fin c.length) (j : Fin (c.blocks_fun i)) : (c.embedding i j : ℕ) = c.size_up_to i + j :=\n  rfl\n#align coe_embedding coe_embedding\n\n",
 "card_boundaries_pos":
 "theorem card_boundaries_pos : 0 < Finset.card c.boundaries :=\n  Finset.card_pos.mpr c.boundaries_nonempty\n#align card_boundaries_pos card_boundaries_pos\n\n",
 "card_boundaries_eq_succ_length":
 "theorem card_boundaries_eq_succ_length : c.boundaries.card = c.length + 1 :=\n  (tsub_eq_iff_eq_add_of_le (nat.succ_le_of_lt c.card_boundaries_pos)).mp rfl\n#align card_boundaries_eq_succ_length card_boundaries_eq_succ_length\n\n",
 "boundary_zero":
 "@[simp]\ntheorem boundary_zero : (c.boundary ⟨0, c.card_boundaries_pos⟩ : Fin (n + 1)) = 0 :=\n  by\n  rw [boundary, Finset.orderEmbOfFin_zero rfl c.card_boundaries_pos]\n  exact le_antisymm (Finset.min'_le _ _ c.zero_mem) (Fin.zero_le _)\n#align boundary_zero boundary_zero\n\n",
 "boundary_length":
 "@[simp]\ntheorem boundary_length : c.boundary ⟨c.length, c.length_lt_card_boundaries⟩ = Fin.last n :=\n  by\n  convert Finset.orderEmbOfFin_last rfl c.card_boundaries_pos\n  exact le_antisymm (Finset.le_max' _ _ c.last_mem) (Fin.le_last _)\n#align boundary_length boundary_length\n\n",
 "boundary_last":
 "@[simp]\ntheorem boundary_last : c.boundary (Fin.last c.length) = Fin.last n := by simp [boundary, Fin.ext_iff]\n#align boundary_last boundary_last\n\n",
 "boundaries_nonempty":
 "theorem boundaries_nonempty : c.boundaries.nonempty :=\n  ⟨0, c.zero_mem⟩\n#align boundaries_nonempty boundaries_nonempty\n\n",
 "blocks_sum":
 "theorem blocks_sum : c.blocks.sum = n :=\n  by\n  have : c.blocks.take c.length = c.blocks := take_all_of_le (by simp [blocks])\n  rw [← this, c.blocks_partial_sum c.length_lt_card_boundaries, c.boundary_length]\n  rfl\n#align blocks_sum blocks_sum\n\n",
 "blocks_pos'":
 "@[simp]\ntheorem blocks_pos' (i : ℕ) (h : i < c.length) : 0 < nthLe c.blocks i h :=\n  c.one_le_blocks' h\n#align blocks_pos' blocks_pos'\n\n",
 "blocks_partial_sum":
 "theorem blocks_partial_sum {i : ℕ} (h : i < c.boundaries.card) : (c.blocks.take i).sum = c.boundary ⟨i, h⟩ :=\n  by\n  induction' i with i IH\n  · simp\n  have A : i < c.blocks.length := by\n    rw [c.card_boundaries_eq_succ_length] at h\n    simp [blocks, nat.lt_of_succ_lt_succ h]\n  have B : i < c.boundaries.card := lt_of_lt_of_le A (by simp [blocks, length, nat.sub_le])\n  rw [sum_take_succ _ _ A, IH B]\n  simp only [blocks, blocks_fun, nth_le_of_fn']\n  apply add_tsub_cancel_of_le\n  simp\n#align blocks_partial_sum blocks_partial_sum\n\n",
 "blocks_length":
 "@[simp]\ntheorem blocks_length : c.blocks.length = c.length :=\n  length_ofFn _\n#align blocks_length blocks_length\n\n",
 "blocks_fun_pos":
 "theorem blocks_fun_pos (i : Fin c.length) : 0 < c.blocks_fun i :=\n  haveI : (⟨i, c.lt_length' i⟩ : Fin c.boundaries.card) < ⟨i + 1, c.lt_length i⟩ := nat.lt_succ_self _\n  lt_tsub_iff_left.mpr ((c.boundaries.order_emb_of_fin rfl).strict_mono this)\n#align blocks_fun_pos blocks_fun_pos\n\n",
 "blocks_fun_mem_blocks":
 "theorem blocks_fun_mem_blocks (i : Fin c.length) : c.blocks_fun i ∈ c.blocks :=\n  nthLe_mem _ _ _\n#align blocks_fun_mem_blocks blocks_fun_mem_blocks\n\n",
 "blocks_fun_congr":
 "theorem blocks_fun_congr {n₁ n₂ : ℕ} (c₁ : Composition n₁) (c₂ : Composition n₂) (i₁ : Fin c₁.length)\n    (i₂ : Fin c₂.length) (hn : n₁ = n₂) (hc : c₁.blocks = c₂.blocks) (hi : (i₁ : ℕ) = i₂) :\n    c₁.blocks_fun i₁ = c₂.blocks_fun i₂ := by\n  cases hn\n  rw [← composition.ext_iff] at hc\n  cases hc\n  congr\n  rwa [Fin.ext_iff]\n#align blocks_fun_congr blocks_fun_congr\n\n"}