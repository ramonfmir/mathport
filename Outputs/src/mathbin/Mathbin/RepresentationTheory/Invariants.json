{"mul_average_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- `average k G` is invariant under right multiplication by elements of `G`.\n-/\n@[simp]\ntheorem mul_average_right (g : G) : average k G * Finsupp.single g 1 = average k G :=\n  by\n  simp only [mul_one, Finset.sum_mul, Algebra.smul_mul_assoc, average, MonoidAlgebra.of_apply, Finset.sum_congr,\n    MonoidAlgebra.single_mul_single]\n  set f : G → MonoidAlgebra k G := fun x => Finsupp.single x 1\n  show\n    «expr • » ((«expr⅟») ↑(Fintype.card G))\n        (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (f (x * g))) =\n      «expr • » ((«expr⅟») ↑(Fintype.card G))\n        (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (f x))\n  rw [Function.Bijective.sum_comp (Group.mulRight_bijective g) _]\n#align mul_average_right mul_average_right\n\n",
 "mul_average_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-\nCopyright (c) 2022 Antoine Labelle. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Antoine Labelle\n-/\n/-- `average k G` is invariant under left multiplication by elements of `G`.\n-/\n@[simp]\ntheorem mul_average_left (g : G) : (Finsupp.single g 1 * average k G : MonoidAlgebra k G) = average k G :=\n  by\n  simp only [mul_one, Finset.mul_sum, Algebra.mul_smul_comm, average, MonoidAlgebra.of_apply, Finset.sum_congr,\n    MonoidAlgebra.single_mul_single]\n  set f : G → MonoidAlgebra k G := fun x => Finsupp.single x 1\n  show\n    «expr • » ((«expr⅟») ↑(Fintype.card G))\n        (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (f (g * x))) =\n      «expr • » ((«expr⅟») ↑(Fintype.card G))\n        (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (f x))\n  rw [Function.Bijective.sum_comp (Group.mulLeft_bijective g) _]\n#align mul_average_left mul_average_left\n\n",
 "mem_invariants_iff_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem mem_invariants_iff_comm {X Y : Rep k G} (f : «expr →ₗ[ ] » X.V k Y.V) (g : G) :\n    (lin_hom X.ρ Y.ρ) g f = f ↔ f.comp (X.ρ g) = (Y.ρ g).comp f :=\n  by\n  dsimp\n  erw [← ρ_Aut_apply_inv]\n  rw [← LinearMap.comp_assoc, ← ModuleCat.comp_def, ← ModuleCat.comp_def, iso.inv_comp_eq, ρ_Aut_apply_hom]\n  exact comm\n#align mem_invariants_iff_comm mem_invariants_iff_comm\n\n",
 "mem_invariants":
 "@[simp]\ntheorem mem_invariants (v : V) : v ∈ invariants ρ ↔ ∀ g : G, ρ g v = v := by rfl\n#align mem_invariants mem_invariants\n\n",
 "is_proj_average_map":
 "theorem is_proj_average_map : LinearMap.IsProj ρ.invariants ρ.average_map :=\n  ⟨ρ.average_map_invariant, ρ.average_map_id⟩\n#align is_proj_average_map is_proj_average_map\n\n",
 "invariants_eq_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem invariants_eq_inter :\n    (invariants ρ).carrier =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        (Function.fixedPoints (ρ g)) :=\n  by\n  ext\n  simp [Function.IsFixedPt]\n#align invariants_eq_inter invariants_eq_inter\n\n",
 "average_map_invariant":
 "/-- The `average_map` sends elements of `V` to the subspace of invariants.\n-/\ntheorem average_map_invariant (v : V) : average_map ρ v ∈ invariants ρ := fun g => by\n  rw [average_map, ← as_algebra_hom_single_one, ← LinearMap.mul_apply, ← map_mul (as_algebra_hom ρ), mul_average_left]\n#align average_map_invariant average_map_invariant\n\n",
 "average_map_id":
 "/-- The `average_map` acts as the identity on the subspace of invariants.\n-/\ntheorem average_map_id (v : V) (hv : v ∈ invariants ρ) : average_map ρ v = v :=\n  by\n  rw [mem_invariants] at hv\n  simp [average, map_sum, hv, Finset.card_univ, nsmul_eq_smul_cast k _ v, smul_smul]\n#align average_map_id average_map_id\n\n"}