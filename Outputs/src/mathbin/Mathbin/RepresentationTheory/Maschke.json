{"exists_left_inverse_of_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n-- Now we work over a `[field k]`.\ntheorem exists_left_inverse_of_injective (f : «expr →ₗ[ ] » V (MonoidAlgebra k G) W) (hf : f.ker = «expr⊥») :\n    ∃ g : «expr →ₗ[ ] » W (MonoidAlgebra k G) V, g.comp f = LinearMap.id :=\n  by\n  obtain ⟨φ, hφ⟩ :=\n    (f.restrict_scalars k).exists_left_inverse_of_injective\n      (by simp only [hf, Submodule.restrictScalars_bot, LinearMap.ker_restrictScalars])\n  refine' ⟨φ.equivariant_projection G, _⟩\n  apply LinearMap.ext\n  intro v\n  simp only [LinearMap.id_coe, id.def, LinearMap.comp_apply]\n  apply LinearMap.equivariantProjection_condition\n  intro v\n  have := congr_arg linear_map.to_fun hφ\n  exact congr_fun this v\n#align exists_left_inverse_of_injective exists_left_inverse_of_injective\n\n",
 "exists_is_compl":
 "theorem exists_is_compl (p : Submodule (MonoidAlgebra k G) V) : ∃ q : Submodule (MonoidAlgebra k G) V, IsCompl p q :=\n  let ⟨f, hf⟩ := MonoidAlgebra.exists_leftInverse_of_injective p.subtype p.ker_subtype\n  ⟨f.ker, LinearMap.isCompl_of_proj <| LinearMap.ext_iff.1 hf⟩\n#align exists_is_compl exists_is_compl\n\n",
 "equivariant_projection_condition":
 "-- We have a `module (monoid_algebra k G)` instance but are working with `finsupp`s,\n-- so help the elaborator unfold everything correctly.\ntheorem equivariant_projection_condition (v : V) : (π.equivariant_projection G) (i v) = v :=\n  by\n  rw [equivariant_projection, smul_apply, sum_of_conjugates_equivariant, equivariant_of_linear_of_comm_apply,\n    sum_of_conjugates]\n  rw [LinearMap.sum_apply]\n  simp only [conjugate_i π i h]\n  rw [Finset.sum_const, Finset.card_univ, nsmul_eq_smul_cast k, ← mul_smul, invertible.inv_of_mul_self, one_smul]\n#align equivariant_projection_condition equivariant_projection_condition\n\n",
 "conjugate_i":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- At first we work with any `[comm_ring k]`, and add the assumption that\n-- `[invertible (fintype.card G : k)]` when it is required.\ntheorem conjugate_i (g : G) (v : V) : (conjugate π g) (i v) = v :=\n  by\n  dsimp [conjugate]\n  simp only [← i.map_smul, h, ← mul_smul, single_mul_single, mul_one, mul_left_inv]\n  change «expr • » (1 : MonoidAlgebra k G) v = v\n  simp\n#align conjugate_i conjugate_i\n\n"}