{"σ_comp_P_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem σ_comp_P_infty (X : simplicial_object C) {n : ℕ} (i : fin (n + 1)) :\n    «expr ≫ » (X.σ i) (P_infty.f (n + 1)) = 0 :=\n  by\n  rw [P_infty_f, σ_comp_P_eq_zero X i]\n  simp only [le_add_iff_nonneg_left, zero_le]\n#align σ_comp_P_infty σ_comp_P_infty\n\n",
 "σ_comp_P_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem σ_comp_P_eq_zero (X : simplicial_object C) {n q : ℕ} (i : fin (n + 1)) (hi : n + 1 ≤ i + q) :\n    «expr ≫ » (X.σ i) ((P q).f (n + 1)) = 0 :=\n  by\n  induction' q with q hq generalizing i hi\n  · exfalso\n    have h := Fin.is_lt i\n    linarith\n  · by_cases n + 1 ≤ (i : ℕ) + q\n    · unfold P\n      simp only [homological_complex.comp_f, ← assoc]\n      rw [hq i h, zero_comp]\n    · have hi' : n = (i : ℕ) + q := by\n        cases' le_iff_exists_add.mp hi with j hj\n        rw [← Nat.lt_succ_iff, nat.succ_eq_add_one, add_assoc, hj, not_lt, add_le_iff_nonpos_right,\n          nonpos_iff_eq_zero] at h\n        rw [← add_left_inj 1, add_assoc, hj, self_eq_add_right, h]\n      cases n\n      · fin_cases i\n        rw [show q = 0 by linarith]\n        unfold P\n        simp only [id_comp, homological_complex.add_f_apply, comp_add, homological_complex.id_f, Hσ,\n          homotopy.null_homotopic_map'_f (c_mk 2 1 rfl) (c_mk 1 0 rfl), alternating_face_map_complex.obj_d_eq]\n        erw [hσ'_eq' (zero_add 0).symm, hσ'_eq' (add_zero 1).symm, comp_id, fin.sum_univ_two, fin.sum_univ_succ,\n          fin.sum_univ_two]\n        simp only [pow_zero, pow_one, pow_two, Fin.val_zero, Fin.val_one, Fin.val_two, one_zsmul, neg_zsmul,\n          Fin.mk_zero, Fin.mk_one, Fin.val_succ, pow_add, one_mul, neg_mul, neg_neg, Fin.succ_zero_eq_one,\n          Fin.succ_one_eq_two, comp_neg, neg_comp, add_comp, comp_add]\n        erw [simplicial_object.δ_comp_σ_self, simplicial_object.δ_comp_σ_self_assoc, simplicial_object.δ_comp_σ_succ,\n          comp_id, simplicial_object.δ_comp_σ_of_le X (show (0 : fin 2) ≤ Fin.castSucc 0 by rw [Fin.castSucc_zero]),\n          simplicial_object.δ_comp_σ_self_assoc, simplicial_object.δ_comp_σ_succ_assoc]\n        abel\n      · rw [← id_comp (X.σ i), ← (P_add_Q_f q n.succ : _ = («expr𝟙») (X.obj _)), add_comp, add_comp]\n        have v : higher_faces_vanish q («expr ≫ » ((P q).f n.succ) (X.σ i)) := (higher_faces_vanish.of_P q n).comp_σ hi'\n        unfold P\n        erw [← assoc, v.comp_P_eq_self, homological_complex.add_f_apply, preadditive.comp_add, comp_id,\n          v.comp_Hσ_eq hi', assoc, simplicial_object.δ_comp_σ_succ'_assoc, Fin.eta, decomposition_Q n q, sum_comp,\n          sum_comp, finset.sum_eq_zero, add_zero, add_neg_eq_zero]\n        swap\n        · ext\n          simp only [Fin.val_mk, Fin.val_succ]\n        · intro j hj\n          simp only [true_and_iff, finset.mem_univ, Finset.mem_filter] at hj\n          simp only [nat.succ_eq_add_one] at hi'\n          obtain ⟨k, hk⟩ := nat.le.dest (nat.lt_succ_iff.mp (Fin.is_lt j))\n          rw [add_comm] at hk\n          have hi'' : i = Fin.castSucc ⟨i, by linarith⟩ := by\n            ext\n            simp only [Fin.castSucc_mk, Fin.eta]\n          have eq :=\n            hq j.rev.succ\n              (by\n                simp only [← hk, Fin.rev_eq j hk.symm, nat.succ_eq_add_one, Fin.succ_mk, Fin.val_mk]\n                linarith)\n          rw [homological_complex.comp_f, assoc, assoc, assoc, hi'', simplicial_object.σ_comp_σ_assoc, reassoc_of eq,\n            zero_comp, comp_zero, comp_zero, comp_zero]\n          simp only [Fin.rev_eq j hk.symm, Fin.le_iff_val_le_val, Fin.val_mk]\n          linarith\n#align σ_comp_P_eq_zero σ_comp_P_eq_zero\n\n",
 "degeneracy_comp_P_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplex_category.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem degeneracy_comp_P_infty (X : simplicial_object C) (n : ℕ) {Δ' : simplex_category}\n    (θ : «expr ⟶ » (simplex_category.mk n) Δ') (hθ : ¬Mono θ) : «expr ≫ » (X.map θ.op) (P_infty.f n) = 0 :=\n  by\n  rw [simplex_category.mono_iff_injective] at hθ\n  cases n\n  · exfalso\n    apply hθ\n    intro x y h\n    fin_cases x\n    fin_cases y\n  · obtain ⟨i, α, h⟩ := simplex_category.eq_σ_comp_of_not_injective θ hθ\n    rw [h, op_comp, X.map_comp, assoc, show X.map (simplex_category.σ i).op = X.σ i by rfl, σ_comp_P_infty, comp_zero]\n#align degeneracy_comp_P_infty degeneracy_comp_P_infty\n\n",
 "comp_σ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2022 Joël Riou. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joël Riou\n-/\ntheorem higher_faces_vanish.comp_σ {Y : C} {X : simplicial_object C} {n b q : ℕ}\n    {φ : «expr ⟶ » Y (simplicial_object.at X (n + 1))} (v : higher_faces_vanish q φ) (hnbq : n + 1 = b + q) :\n    higher_faces_vanish q\n      («expr ≫ » φ (X.σ ⟨b, by simpa only [hnbq, Nat.lt_succ_iff, le_add_iff_nonneg_right] using zero_le q⟩)) :=\n  fun j hj =>\n  by\n  rw [assoc, simplicial_object.δ_comp_σ_of_gt', Fin.pred_succ, v.comp_δ_eq_zero_assoc _ _ hj, zero_comp]\n  · intro hj'\n    simpa only [hj', hnbq, Fin.val_zero, zero_add, add_comm b, add_assoc, false_and_iff, add_le_iff_nonpos_right,\n      le_zero_iff, add_eq_zero_iff, nat.one_ne_zero] using hj\n  · simp only [Fin.lt_iff_val_lt_val, Nat.lt_iff_add_one_le, Fin.succ_mk, Fin.val_mk, Fin.val_succ,\n      add_le_add_iff_right]\n    linarith\n#align higher_faces_vanish.comp_σ higher_faces_vanish.comp_σ\n\n"}