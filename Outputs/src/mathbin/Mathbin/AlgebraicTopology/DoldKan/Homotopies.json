{"map_hσ'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `alternating_face_map_complex -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `alternating_face_map_complex -/\n/-- The maps `hσ' q n m hnm` are compatible with the application of additive functors. -/\ntheorem map_hσ' {D : Type _} [Category D] [Preadditive D] (G : «expr ⥤ » C D) [G.additive] (X : SimplicialObject C)\n    (q n m : ℕ) (hnm : c.rel m n) :\n    (hσ' q n m hnm : «expr ⟶ » ((alternating_face_map_complex (((whiskering _ _).obj G).obj X)).X n) _) =\n      G.map (hσ' q n m hnm : «expr ⟶ » ((alternating_face_map_complex X).X n) _) :=\n  by\n  unfold hσ' hσ\n  split_ifs\n  · simp only [functor.map_zero, zero_comp]\n  · simpa only [eq_to_hom_map, functor.map_comp, functor.map_zsmul]\n#align map_hσ' map_hσ'\n\n",
 "map_Hσ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `alternating_face_map_complex -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `alternating_face_map_complex -/\n/-- The null homotopic maps `Hσ` are compatible with the application of additive functors. -/\ntheorem map_Hσ {D : Type _} [Category D] [Preadditive D] (G : «expr ⥤ » C D) [G.additive] (X : SimplicialObject C)\n    (q n : ℕ) :\n    (hσ q : «expr ⟶ » (alternating_face_map_complex (((whiskering C D).obj G).obj X)) _).f n =\n      G.map ((hσ q : «expr ⟶ » (alternating_face_map_complex X) _).f n) :=\n  by\n  unfold Hσ\n  have eq := HomologicalComplex.congr_hom (map_null_homotopic_map' G (hσ' q)) n\n  simp only [functor.map_homological_complex_map_f, ← map_hσ'] at eq\n  rw [Eq]\n  let h := (functor.congr_obj (map_alternating_face_map_complex G) X).symm\n  congr\n#align map_Hσ map_Hσ\n\n",
 "hσ'_naturality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplex_category.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplex_category.mk -/\n/-- The maps `hσ' q n m hnm` are natural on the simplicial object -/\ntheorem hσ'_naturality (q : ℕ) (n m : ℕ) (hnm : c.rel m n) {X Y : SimplicialObject C} (f : «expr ⟶ » X Y) :\n    «expr ≫ » (f.app (op (simplex_category.mk n))) (hσ' q n m hnm) =\n      «expr ≫ » (hσ' q n m hnm) (f.app (op (simplex_category.mk m))) :=\n  by\n  have h : n + 1 = m := hnm\n  subst h\n  simp only [hσ', eq_to_hom_refl, comp_id]\n  unfold hσ\n  split_ifs\n  · rw [zero_comp, comp_zero]\n  · simp only [zsmul_comp, comp_zsmul]\n    erw [f.naturality]\n    rfl\n#align hσ'_naturality hσ'_naturality\n\n",
 "hσ'_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\ntheorem hσ'_eq_zero {q n m : ℕ} (hnq : n < q) (hnm : c.rel m n) :\n    (hσ' q n m hnm : «expr ⟶ » (simplicial_object.at X n) (simplicial_object.at X m)) = 0 :=\n  by\n  simp only [hσ', hσ]\n  split_ifs\n  exact zero_comp\n#align hσ'_eq_zero hσ'_eq_zero\n\n",
 "hσ'_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem hσ'_eq' {q n a : ℕ} (ha : n = a + q) :\n    (hσ' q n (n + 1) rfl : «expr ⟶ » (simplicial_object.at X n) (simplicial_object.at X (n + 1))) =\n      «expr • » ((-1 : ℤ) ^ a) (X.σ ⟨a, Nat.lt_succ_iff.mpr (nat.le.intro (Eq.symm ha))⟩) :=\n  by rw [hσ'_eq ha rfl, eq_to_hom_refl, comp_id]\n#align hσ'_eq' hσ'_eq'\n\n",
 "hσ'_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `simplicial_object.at -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem hσ'_eq {q n a m : ℕ} (ha : n = a + q) (hnm : c.rel m n) :\n    (hσ' q n m hnm : «expr ⟶ » (simplicial_object.at X n) (simplicial_object.at X m)) =\n      «expr ≫ » («expr • » ((-1 : ℤ) ^ a) (X.σ ⟨a, Nat.lt_succ_iff.mpr (nat.le.intro (Eq.symm ha))⟩))\n        (eqToHom (by congr )) :=\n  by\n  simp only [hσ', hσ]\n  split_ifs\n  · exfalso\n    linarith\n  · have h' := tsub_eq_of_eq_add ha\n    congr\n#align hσ'_eq hσ'_eq\n\n",
 "cs_down_0_not_rel_left":
 "/-- This lemma is meant to be used with `null_homotopic_map'_f_of_not_rel_left` -/\ntheorem cs_down_0_not_rel_left (j : ℕ) : ¬c.rel 0 j := by\n  intro hj\n  dsimp at hj\n  apply nat.not_succ_le_zero j\n  rw [nat.succ_eq_add_one, hj]\n#align cs_down_0_not_rel_left cs_down_0_not_rel_left\n\n",
 "c_mk":
 "/-\nCopyright (c) 2022 Joël Riou. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joël Riou\n-/\n/-- Helper when we need some `c.rel i j` (i.e. `complex_shape.down ℕ`),\ne.g. `c_mk n (n+1) rfl` -/\ntheorem c_mk (i j : ℕ) (h : j + 1 = i) : c.rel i j :=\n  ComplexShape.down_mk i j h\n#align c_mk c_mk\n\n",
 "Hσ_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `alternating_face_map_complex -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `alternating_face_map_complex -/\n/-- In degree `0`, the null homotopic map `Hσ` is zero. -/\ntheorem Hσ_eq_zero (q : ℕ) :\n    (hσ q : «expr ⟶ » (alternating_face_map_complex X) (alternating_face_map_complex X)).f 0 = 0 :=\n  by\n  unfold Hσ\n  rw [null_homotopic_map'_f_of_not_rel_left (c_mk 1 0 rfl) cs_down_0_not_rel_left]\n  cases q\n  · rw [hσ'_eq (show 0 = 0 + 0 by rfl) (c_mk 1 0 rfl)]\n    simp only [pow_zero, Fin.mk_zero, one_zsmul, eq_to_hom_refl, category.comp_id]\n    erw [ChainComplex.of_d]\n    simp only [alternating_face_map_complex.obj_d, Fin.sum_univ_two, Fin.val_zero, pow_zero, one_zsmul, Fin.val_one,\n      pow_one, comp_add, neg_smul, one_zsmul, comp_neg, add_neg_eq_zero]\n    erw [δ_comp_σ_self, δ_comp_σ_succ]\n  · rw [hσ'_eq_zero (nat.succ_pos q) (c_mk 1 0 rfl), zero_comp]\n#align Hσ_eq_zero Hσ_eq_zero\n\n"}