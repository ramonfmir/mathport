{"simply_connected_iff_unique_homotopic":
 "theorem simply_connected_iff_unique_homotopic (X : Type _) [TopologicalSpace X] :\n    simply_connected_space X ↔ Nonempty X ∧ ∀ x y : X, Nonempty (Unique (path.homotopic.quotient x y)) :=\n  by\n  rw [simply_connected_def, equiv_punit_iff_unique]\n  rfl\n#align simply_connected_iff_unique_homotopic simply_connected_iff_unique_homotopic\n\n",
 "simply_connected_iff_paths_homotopic'":
 "/-- Another version of `simply_connected_iff_paths_homotopic` -/\ntheorem simply_connected_iff_paths_homotopic' {Y : Type _} [TopologicalSpace Y] :\n    simply_connected_space Y ↔ PathConnectedSpace Y ∧ ∀ {x y : Y} (p₁ p₂ : Path x y), path.homotopic p₁ p₂ :=\n  by\n  convert simply_connected_iff_paths_homotopic\n  simp [path.homotopic.quotient, Setoid.eq_top_iff]; rfl\n#align simply_connected_iff_paths_homotopic' simply_connected_iff_paths_homotopic'\n\n",
 "simply_connected_iff_paths_homotopic":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-- A space is simply connected iff it is path connected, and there is at most one path\n  up to homotopy between any two points. -/\ntheorem simply_connected_iff_paths_homotopic {Y : Type _} [TopologicalSpace Y] :\n    simply_connected_space Y ↔ PathConnectedSpace Y ∧ ∀ x y : Y, subsingleton (path.homotopic.quotient x y) :=\n  ⟨by\n    intro\n    constructor <;> infer_instance, fun h => by\n    cases h; rw [simply_connected_iff_unique_homotopic]\n    exact ⟨inferInstance, fun x y => ⟨uniqueOfSubsingleton («expr⟦ ⟧» (PathConnectedSpace.somePath x y))⟩⟩⟩\n#align simply_connected_iff_paths_homotopic simply_connected_iff_paths_homotopic\n\n",
 "simply_connected_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≌ » -/\n/-\nCopyright (c) 2022 Praneeth Kolichala. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Praneeth Kolichala\n-/\ntheorem simply_connected_def (X : Type _) [TopologicalSpace X] :\n    simply_connected_space X ↔ Nonempty («expr ≌ » (fundamental_groupoid X) (Discrete Unit)) :=\n  ⟨fun h => @simply_connected_space.equiv_unit X _ h, fun h => ⟨h⟩⟩\n#align simply_connected_def simply_connected_def\n\n",
 "paths_homotopic":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⟦ ⟧» -/\n/-- In a simply connected space, any two paths are homotopic -/\ntheorem paths_homotopic {x y : X} (p₁ p₂ : Path x y) : path.homotopic p₁ p₂ := by\n  simpa using @subsingleton.elim (path.homotopic.quotient x y) _ («expr⟦ ⟧» p₁) («expr⟦ ⟧» p₂)\n#align paths_homotopic paths_homotopic\n\n"}