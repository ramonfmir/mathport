{"unop_of_free_monoid":
 "theorem foldl.unop_of_free_monoid (f : β → α → β) (xs : FreeMonoid α) (a : β) :\n    unop (foldl.of_free_monoid f xs) a = list.foldl f a xs.to_list :=\n  rfl\n#align foldl.unop_of_free_monoid foldl.unop_of_free_monoid\n\n",
 "to_list_spec":
 "theorem to_list_spec (xs : t α) : to_list xs = FreeMonoid.toList (fold_map FreeMonoid.of xs) :=\n  eq.symm <|\n    calc\n      FreeMonoid.toList (fold_map FreeMonoid.of xs) = FreeMonoid.toList (fold_map FreeMonoid.of xs).reverse.reverse :=\n        by simp only [List.reverse_reverse]\n      _ = FreeMonoid.toList (list.foldr cons [] (fold_map FreeMonoid.of xs).reverse).reverse := by\n        simp only [List.foldr_eta]\n      _ = (unop (foldl.of_free_monoid (flip cons) (fold_map FreeMonoid.of xs)) []).reverse := by\n        simp [flip, List.foldr_reverse, foldl.of_free_monoid, unop_op]\n      _ = to_list xs := by\n        rw [fold_map_hom_free (foldl.of_free_monoid (flip <| @cons α))]\n        · simp only [to_list, foldl, List.reverse_inj, foldl.get, foldl.of_free_monoid_comp_of]\n        · infer_instance\n      \n#align to_list_spec to_list_spec\n\n",
 "to_list_map":
 "/-\n\n-/\ntheorem to_list_map (f : α → β) (xs : t α) : to_list (f <$> xs) = f <$> to_list xs := by\n  simp only [to_list_spec, free.map_eq_map, fold_map_hom, fold_map_map, FreeMonoid.ofList_toList, FreeMonoid.map_of,\n    (· ∘ ·)]\n#align to_list_map to_list_map\n\n",
 "to_list_eq_self":
 "@[simp]\ntheorem to_list_eq_self {xs : list α} : to_list xs = xs :=\n  by\n  simp only [to_list_spec, fold_map, traverse]\n  induction xs\n  case nil => rfl\n  case cons _ _ ih => conv_rhs => rw [← ih]; rfl\n#align to_list_eq_self to_list_eq_self\n\n",
 "of_free_monoid_comp_of":
 "@[simp]\ntheorem mfoldr.of_free_monoid_comp_of {m} [monad m] [LawfulMonad m] (f : β → α → m α) :\n    mfoldr.of_free_monoid f ∘ FreeMonoid.of = mfoldr.mk ∘ f :=\n  by\n  ext\n  simp [(· ∘ ·), mfoldr.of_free_monoid, mfoldr.mk, flip]\n#align mfoldr.of_free_monoid_comp_of mfoldr.of_free_monoid_comp_of\n\n",
 "mfoldr_to_list":
 "theorem mfoldr_to_list (f : α → β → m β) (x : β) (xs : t α) : mfoldr f x xs = List.foldrM f x (to_list xs) :=\n  by\n  change _ = mfoldr.of_free_monoid f (FreeMonoid.ofList <| to_list xs) x\n  simp only [mfoldr, to_list_spec, fold_map_hom_free (mfoldr.of_free_monoid f), mfoldr.of_free_monoid_comp_of,\n    mfoldr.get, FreeMonoid.ofList_toList]\n#align mfoldr_to_list mfoldr_to_list\n\n",
 "mfoldr_map":
 "@[simp]\ntheorem mfoldr_map (g : β → γ) (f : γ → α → m α) (a : α) (l : t β) : mfoldr f a (g <$> l) = mfoldr (f ∘ g) a l := by\n  simp only [mfoldr, fold_map_map, (· ∘ ·), flip]\n#align mfoldr_map mfoldr_map\n\n",
 "mfoldl_to_list":
 "theorem mfoldl_to_list {f : α → β → m α} {x : α} {xs : t β} : mfoldl f x xs = List.foldlM f x (to_list xs) :=\n  calc\n    mfoldl f x xs = unop (mfoldl.of_free_monoid f (FreeMonoid.ofList <| to_list xs)) x := by\n      simp only [mfoldl, to_list_spec, fold_map_hom_free (mfoldl.of_free_monoid f), mfoldl.of_free_monoid_comp_of,\n        mfoldl.get, FreeMonoid.ofList_toList]\n    _ = List.foldlM f x (to_list xs) := by simp [mfoldl.of_free_monoid, unop_op, flip]\n    \n#align mfoldl_to_list mfoldl_to_list\n\n",
 "mfoldl_map":
 "@[simp]\ntheorem mfoldl_map (g : β → γ) (f : α → γ → m α) (a : α) (l : t β) :\n    mfoldl f a (g <$> l) = mfoldl (fun x y => f x (g y)) a l := by simp only [mfoldl, fold_map_map, (· ∘ ·), flip]\n#align mfoldl_map mfoldl_map\n\n",
 "map_eq_map":
 "/-\nCopyright (c) 2018 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon, Sean Leather\n-/\ntheorem free.map_eq_map (f : α → β) (xs : list α) : f <$> xs = (FreeMonoid.map f (FreeMonoid.ofList xs)).to_list :=\n  rfl\n#align free.map_eq_map free.map_eq_map\n\n",
 "length_to_list":
 "theorem length_to_list {xs : t α} : length xs = list.length (to_list xs) :=\n  by\n  unfold length\n  rw [foldl_to_list]\n  generalize to_list xs = ys\n  let f (n : ℕ) (a : α) := n + 1\n  trans list.foldl f 0 ys\n  · generalize 0 = n\n    induction' ys with _ _ ih generalizing n\n    · simp only [List.foldl_nil]\n    · simp only [list.foldl, ih (n + 1)]\n  · induction' ys with _ tl ih\n    · simp only [list.length, List.foldl_nil]\n    · simp only [list.foldl, list.length]\n      rw [← ih]\n      exact tl.foldl_hom (fun x => x + 1) f f 0 fun n x => rfl\n#align length_to_list length_to_list\n\n",
 "foldr_to_list":
 "theorem foldr_to_list (f : α → β → β) (xs : t α) (x : β) : foldr f x xs = list.foldr f x (to_list xs) :=\n  by\n  change _ = foldr.of_free_monoid _ (FreeMonoid.ofList <| to_list xs) _\n  rw [to_list_spec, foldr, foldr.get, FreeMonoid.ofList_toList, fold_map_hom_free, foldr.of_free_monoid_comp_of]\n#align foldr_to_list foldr_to_list\n\n",
 "foldr_map":
 "@[simp]\ntheorem foldr_map (g : β → γ) (f : γ → α → α) (a : α) (l : t β) : foldr f a (g <$> l) = foldr (f ∘ g) a l := by\n  simp only [foldr, fold_map_map, (· ∘ ·), flip]\n#align foldr_map foldr_map\n\n",
 "foldl_to_list":
 "theorem foldl_to_list (f : α → β → α) (xs : t β) (x : α) : foldl f x xs = list.foldl f x (to_list xs) :=\n  by\n  rw [← FreeMonoid.toList_ofList (to_list xs), ← foldl.unop_of_free_monoid]\n  simp only [foldl, to_list_spec, fold_map_hom_free, foldl.of_free_monoid_comp_of, foldl.get, FreeMonoid.ofList_toList]\n#align foldl_to_list foldl_to_list\n\n",
 "foldl_map":
 "@[simp]\ntheorem foldl_map (g : β → γ) (f : α → γ → α) (a : α) (l : t β) :\n    foldl f a (g <$> l) = foldl (fun x y => f x (g y)) a l := by simp only [foldl, fold_map_map, (· ∘ ·), flip]\n#align foldl_map foldl_map\n\n",
 "fold_map_map":
 "theorem fold_map_map [monoid γ] (f : α → β) (g : β → γ) (xs : t α) : fold_map g (f <$> xs) = fold_map (g ∘ f) xs := by\n  simp only [fold_map, traverse_map]\n#align fold_map_map fold_map_map\n\n",
 "fold_map_hom_free":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\ntheorem fold_map_hom_free [monoid β] (f : «expr →* » (FreeMonoid α) β) (x : t α) :\n    f (fold_map FreeMonoid.of x) = fold_map (f ∘ FreeMonoid.of) x :=\n  fold_map_hom f _ x\n#align fold_map_hom_free fold_map_hom_free\n\n",
 "fold_map_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\ntheorem fold_map_hom [monoid α] [monoid β] (f : «expr →* » α β) (g : γ → α) (x : t γ) :\n    f (fold_map g x) = fold_map (f ∘ g) x :=\n  calc\n    f (fold_map g x) = f (traverse (const.mk' ∘ g) x) := rfl\n    _ = (map_fold f).app _ (traverse (const.mk' ∘ g) x) := rfl\n    _ = traverse ((map_fold f).app _ ∘ const.mk' ∘ g) x := naturality (map_fold f) _ _\n    _ = fold_map (f ∘ g) x := rfl\n    \n#align fold_map_hom fold_map_hom\n\n"}