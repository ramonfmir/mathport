{"uncurry_curry_continuous":
 "theorem uncurry_curry_continuous : continuous <| (monotone_uncurry α β γ).comp <| f.comp <| monotone_curry α β γ :=\n  continuous_comp _ _ (continuous_comp _ _ (continuous_curry _ _ _) hc) (continuous_uncurry _ _ _)\n#align uncurry_curry_continuous uncurry_curry_continuous\n\n",
 "to_unit_cont":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\ntheorem to_unit_cont (f : «expr →o » (Part α) (Part α)) (hc : continuous f) : continuous (to_unit_mono f)\n  | c => by\n    ext ⟨⟩ : 1\n    dsimp [omega_complete_partial_order.ωSup]\n    erw [hc, chain.map_comp]; rfl\n#align to_unit_cont to_unit_cont\n\n",
 "mem_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem mem_iff (a : α) (b : β a) : b ∈ Part.fix f a ↔ ∃ i, b ∈ approx f i a :=\n  by\n  by_cases h₀ : ∃ i : ℕ, (approx f i a).dom\n  · simp only [Part.fix_def f h₀]\n    constructor <;> intro hh\n    exact ⟨_, hh⟩\n    have h₁ := nat.find_spec h₀\n    rw [dom_iff_mem] at h₁\n    cases' h₁ with y h₁\n    replace h₁ := approx_mono' f _ _ h₁\n    suffices : y = b\n    subst this\n    exact h₁\n    cases' hh with i hh\n    revert h₁\n    generalize succ (nat.find h₀) = j\n    intro\n    wlog : i ≤ j := le_total i j using i j b y, j i y b\n    replace hh := approx_mono f case _ _ hh\n    apply Part.mem_unique h₁ hh\n  · simp only [fix_def' («expr⇑ » f) h₀, not_exists, false_iff_iff, not_mem_none]\n    simp only [dom_iff_mem, not_exists] at h₀\n    intro\n    apply h₀\n#align mem_iff mem_iff\n\n",
 "le_f_of_mem_approx":
 "theorem le_f_of_mem_approx {x} : x ∈ approx_chain f → x ≤ f x :=\n  by\n  simp only [(· ∈ ·), forall_exists_index]\n  rintro i rfl\n  apply approx_mono'\n#align le_f_of_mem_approx le_f_of_mem_approx\n\n",
 "fix_le":
 "theorem fix_le {X : ∀ a, Part <| β a} (hX : f X ≤ X) : Part.fix f ≤ X :=\n  by\n  rw [fix_eq_ωSup f]\n  apply ωSup_le _ _ _\n  simp only [fix.approx_chain, OrderHom.coe_fun_mk]\n  intro i\n  induction i; dsimp [fix.approx]; apply bot_le\n  trans f X; apply f.monotone i_ih\n  apply hX\n#align fix_le fix_le\n\n",
 "fix_eq_ωSup":
 "theorem fix_eq_ωSup : Part.fix f = ωSup (approx_chain f) :=\n  by\n  apply le_antisymm\n  · intro x\n    cases' exists_fix_le_approx f x with i hx\n    trans approx f i.succ x\n    · trans\n      apply hx\n      apply approx_mono' f\n    apply le_ωSup_of_le i.succ\n    dsimp [approx]\n    rfl\n  · apply ωSup_le _ _ _\n    simp only [fix.approx_chain, OrderHom.coe_fun_mk]\n    intro y x\n    apply approx_le_fix f\n#align fix_eq_ωSup fix_eq_ωSup\n\n",
 "fix_eq'":
 "/-\nCopyright (c) 2020 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\ntheorem lawful_fix.fix_eq' {α} [omega_complete_partial_order α] [lawful_fix α] {f : α → α} (hf : continuous' f) :\n    has_fix.fix f = f (has_fix.fix f) :=\n  lawful_fix.fix_eq (hf.to_bundled _)\n#align lawful_fix.fix_eq' lawful_fix.fix_eq'\n\n",
 "fix_eq":
 "theorem fix_eq : Part.fix f = f (Part.fix f) := by\n  rw [fix_eq_ωSup f, hc]\n  apply le_antisymm\n  · apply ωSup_le_ωSup_of_le _\n    intro i\n    exists i\n    intro x\n    -- intros x y hx,\n    apply le_f_of_mem_approx _ ⟨i, rfl⟩\n  · apply ωSup_le_ωSup_of_le _\n    intro i\n    exists i.succ\n    rfl\n#align fix_eq fix_eq\n\n",
 "exists_fix_le_approx":
 "theorem exists_fix_le_approx (x : α) : ∃ i, Part.fix f x ≤ approx f i x :=\n  by\n  by_cases hh : ∃ i b, b ∈ approx f i x\n  · rcases hh with ⟨i, b, hb⟩\n    exists i\n    intro b' h'\n    have hb' := approx_le_fix f i _ _ hb\n    obtain rfl := Part.mem_unique h' hb'\n    exact hb\n  · simp only [not_exists] at hh\n    exists 0\n    intro b' h'\n    simp only [mem_iff f] at h'\n    cases' h' with i h'\n    cases hh _ _ h'\n#align exists_fix_le_approx exists_fix_le_approx\n\n",
 "continuous_uncurry":
 "theorem continuous_uncurry : continuous <| monotone_uncurry α β γ := fun c =>\n  by\n  ext (x y)\n  dsimp [uncurry, ωSup]\n  rw [map_comp, map_comp]\n  rfl\n#align continuous_uncurry continuous_uncurry\n\n",
 "continuous_curry":
 "theorem continuous_curry : continuous <| monotone_curry α β γ := fun c =>\n  by\n  ext (x y)\n  dsimp [curry, ωSup]\n  rw [map_comp, map_comp]\n  rfl\n#align continuous_curry continuous_curry\n\n",
 "approx_mono'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem approx_mono' {i : ℕ} : Fix.approx f i ≤ Fix.approx f (succ i) :=\n  by\n  induction i; dsimp [approx]; apply @bot_le _ _ _ (f («expr⊥»))\n  intro ; apply f.monotone; apply i_ih\n#align approx_mono' approx_mono'\n\n",
 "approx_mono":
 "theorem approx_mono ⦃i j : ℕ⦄ (hij : i ≤ j) : approx f i ≤ approx f j :=\n  by\n  induction' j with j ih;\n  · cases hij\n    exact le_rfl\n  cases hij; · exact le_rfl\n  exact le_trans (ih ‹_›) (approx_mono' f)\n#align approx_mono approx_mono\n\n",
 "approx_mem_approx_chain":
 "theorem approx_mem_approx_chain {i} : approx f i ∈ approx_chain f :=\n  Stream'.mem_of_nth_eq rfl\n#align approx_mem_approx_chain approx_mem_approx_chain\n\n",
 "approx_le_fix":
 "theorem approx_le_fix (i : ℕ) : approx f i ≤ Part.fix f := fun a b hh =>\n  by\n  rw [mem_iff f]\n  exact ⟨_, hh⟩\n#align approx_le_fix approx_le_fix\n\n"}