{"map_equiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- The composition of `map_equiv`s is carried over the `equiv_functor`.\nFor plain `functor`s, this lemma is named `map_map` when applied\nor `map_comp_map` when not applied.\n-/\n@[simp]\ntheorem map_equiv_trans {γ : Type u₀} (ab : «expr ≃ » α β) (bc : «expr ≃ » β γ) :\n    (mapEquiv f ab).trans (mapEquiv f bc) = mapEquiv f (ab.trans bc) :=\n  Equiv.ext fun x => by simp [map_equiv, map_trans']\n#align map_equiv_trans map_equiv_trans\n\n",
 "map_equiv_symm_apply":
 "theorem map_equiv_symm_apply (y : f β) : (mapEquiv f e).symm y = equiv_functor.map e.symm y :=\n  rfl\n#align map_equiv_symm_apply map_equiv_symm_apply\n\n",
 "map_equiv_symm":
 "@[simp]\ntheorem map_equiv_symm : (mapEquiv f e).symm = mapEquiv f e.symm :=\n  Equiv.ext <| mapEquiv_symm_apply f e\n#align map_equiv_symm map_equiv_symm\n\n",
 "map_equiv_refl":
 "@[simp]\ntheorem map_equiv_refl (α) : mapEquiv f (Equiv.refl α) = Equiv.refl (f α) := by simpa [EquivFunctor.mapEquiv]\n#align map_equiv_refl map_equiv_refl\n\n",
 "map_equiv_apply":
 "/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n@[simp]\ntheorem map_equiv_apply (x : f α) : mapEquiv f e x = equiv_functor.map e x :=\n  rfl\n#align map_equiv_apply map_equiv_apply\n\n",
 "injective":
 "theorem map_equiv.injective (f : Type u₀ → Type u₁) [applicative f] [LawfulApplicative f] {α β : Type u₀}\n    (h : ∀ γ, function.injective (pure : γ → f γ)) : function.injective (@EquivFunctor.mapEquiv f _ α β) :=\n  fun e₁ e₂ H => Equiv.ext fun x => h β (by simpa [equiv_functor.map] using Equiv.congr_fun H (pure x))\n#align map_equiv.injective map_equiv.injective\n\n"}