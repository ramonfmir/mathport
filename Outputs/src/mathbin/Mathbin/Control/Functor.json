{"run_seq":
 "@[simp]\nprotected theorem run_seq {α β : Type v} (f : Comp F G (α → β)) (x : Comp F G α) :\n    (f <*> x).run = (· <*> ·) <$> f.run <*> x.run :=\n  rfl\n#align run_seq run_seq\n\n",
 "run_pure":
 "@[simp]\nprotected theorem run_pure {α : Type v} : ∀ x : α, (pure x : Comp F G α).run = pure (pure x)\n  | _ => rfl\n#align run_pure run_pure\n\n",
 "run_map":
 "@[simp]\nprotected theorem run_map {α β} (h : α → β) (x : Comp F G α) : (h <$> x).run = (· <$> ·) h <$> x.run :=\n  rfl\n#align run_map run_map\n\n",
 "of_mem_supp":
 "theorem of_mem_supp {α : Type u} {x : F α} {p : α → Prop} (h : Liftp p x) : ∀ y ∈ supp x, p y := fun y hy => hy h\n#align of_mem_supp of_mem_supp\n\n",
 "map_mk":
 "@[functor_norm]\ntheorem map_mk {α β} (h : α → β) (x : F (G α)) : h <$> Comp.mk x = Comp.mk ((· <$> ·) h <$> x) :=\n  rfl\n#align map_mk map_mk\n\n",
 "map_id":
 "#print Functor.map_id /-\n/-\nCopyright (c) 2017 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\ntheorem Functor.map_id : (· <$> ·) id = (id : F α → F α) := by apply funext <;> apply id_map\n#align functor.map_id Functor.map_id\n-/\n\n",
 "map_comp_map":
 "#print Functor.map_comp_map /-\ntheorem Functor.map_comp_map (f : α → β) (g : β → γ) : ((· <$> ·) g ∘ (· <$> ·) f : F α → F γ) = (· <$> ·) (g ∘ f) := by\n  apply funext <;> intro <;> rw [comp_map]\n#align functor.map_comp_map Functor.map_comp_map\n-/\n\n",
 "id_map":
 "protected theorem id_map : ∀ x : Comp F G α, Comp.map id x = x\n  | comp.mk x => by simp [comp.map, Functor.map_id]\n#align id_map id_map\n\n",
 "functor_id_comp":
 "theorem functor_id_comp {F} [AF : functor F] [LawfulFunctor F] : @comp.functor id F _ _ = AF :=\n  @Functor.ext F _ AF (@comp.is_lawful_functor id F _ _ _ _) _ fun α β f x => rfl\n#align functor_id_comp functor_id_comp\n\n",
 "functor_comp_id":
 "theorem functor_comp_id {F} [AF : functor F] [LawfulFunctor F] : @comp.functor F id _ _ = AF :=\n  @Functor.ext F _ AF (@comp.is_lawful_functor F id _ _ _ _) _ fun α β f x => rfl\n#align functor_comp_id functor_comp_id\n\n",
 "ext":
 "protected theorem ext {α} {x y : Comp F G α} : x.run = y.run → x = y :=\n  id\n#align ext ext\n\n",
 "comp_map":
 "protected theorem comp_map (g' : α → β) (h : β → γ) : ∀ x : Comp F G α, Comp.map (h ∘ g') x = Comp.map h (Comp.map g' x)\n  | comp.mk x => by simp [comp.map, Functor.map_comp_map g' h, functor_norm]\n#align comp_map comp_map\n\n"}