{"run_with_cont_t":
 "theorem run_with_cont_t (f : (β → m r) → α → m r) (x : cont_t r m α) : run (with_cont_t f x) = run x ∘ f :=\n  rfl\n#align run_with_cont_t run_with_cont_t\n\n",
 "run_cont_t_map_cont_t":
 "/-\nCopyright (c) 2019 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n\nMonad encapsulating continuation passing programming style, similar to\nHaskell's `Cont`, `ContT` and `MonadCont`:\n<http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Cont.html>\n-/\ntheorem run_cont_t_map_cont_t (f : m r → m r) (x : cont_t r m α) : run (map f x) = f ∘ run x :=\n  rfl\n#align run_cont_t_map_cont_t run_cont_t_map_cont_t\n\n",
 "monad_lift_bind":
 "theorem monad_lift_bind [monad m] [LawfulMonad m] {α β} (x : m α) (f : α → m β) :\n    (monad_lift (x >>= f) : cont_t r m β) = monad_lift x >>= monad_lift ∘ f :=\n  by\n  ext\n  simp only [monad_lift, has_monad_lift.monad_lift, (· ∘ ·), (· >>= ·), bind_assoc, id.def, run, cont_t.monad_lift]\n#align monad_lift_bind monad_lift_bind\n\n",
 "goto_mk_label":
 "theorem reader_t.goto_mk_label {α ρ β} (x : label α m β) (i : α) :\n    goto (reader_t.mk_label ρ x) i = monad_lift (goto x i) := by cases x <;> rfl\n#align reader_t.goto_mk_label reader_t.goto_mk_label\n\n",
 "ext":
 "@[ext]\nprotected theorem ext {x y : cont_t r m α} (h : ∀ f, x.run f = y.run f) : x = y := by ext <;> apply h\n#align ext ext\n\n"}