{"seq_map_assoc":
 "#print seq_map_assoc /-\n@[functor_norm]\ntheorem seq_map_assoc (x : F (α → β)) (f : γ → α) (y : F γ) : x <*> f <$> y = (fun m : α → β => m ∘ f) <$> x <*> y :=\n  by\n  simp [(pure_seq_eq_map _ _).symm]\n  simp [seq_assoc, (comp_map _ _ _).symm, (· ∘ ·)]\n  simp [pure_seq_eq_map]\n#align seq_map_assoc seq_map_assoc\n-/\n\n",
 "seq_eq_bind_map":
 "theorem seq_eq_bind_map {x : m α} {f : m (α → β)} : f <*> x = f >>= (· <$> x) :=\n  (bind_map_eq_seq f x).symm\n#align seq_eq_bind_map seq_eq_bind_mapₓ\n\n",
 "seq_bind_eq":
 "#print seq_bind_eq /-\ntheorem seq_bind_eq (x : m α) {g : β → m γ} {f : α → β} : f <$> x >>= g = x >>= g ∘ f :=\n  show bind (f <$> x) g = bind x (g ∘ f) by rw [← bind_pure_comp_eq_map, bind_assoc] <;> simp [pure_bind]\n#align seq_bind_eq seq_bind_eq\n-/\n\n",
 "pure_id'_seq":
 "#print pure_id'_seq /-\n@[simp]\ntheorem pure_id'_seq (x : F α) : (pure fun x => x) <*> x = x :=\n  pure_id_seq x\n#align pure_id'_seq pure_id'_seq\n-/\n\n",
 "map_seq":
 "#print map_seq /-\n@[functor_norm]\ntheorem map_seq (f : β → γ) (x : F (α → β)) (y : F α) : f <$> (x <*> y) = (· ∘ ·) f <$> x <*> y := by\n  simp [(pure_seq_eq_map _ _).symm] <;> simp [seq_assoc]\n#align map_seq map_seq\n-/\n\n",
 "map_map":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl\n\nExtends the theory on functors, applicatives and monads.\n-/\n@[functor_norm]\ntheorem Functor.map_map (m : α → β) (g : β → γ) (x : f α) : g <$> m <$> x = (g ∘ m) <$> x :=\n  (comp_map _ _ _).symm\n#align functor.map_map Functor.map_mapₓ\n\n",
 "map_bind":
 "#print map_bind /-\n-- TODO: setup `functor_norm` for `monad` laws\ntheorem map_bind (x : m α) {g : α → m β} {f : β → γ} : f <$> (x >>= g) = x >>= fun a => f <$> g a := by\n  rw [← bind_pure_comp_eq_map, bind_assoc] <;> simp [bind_pure_comp_eq_map]\n#align map_bind map_bind\n-/\n\n",
 "joinM_pure":
 "#print joinM_pure /-\n@[simp]\ntheorem joinM_pure {α : Type u} (a : m α) : joinM (pure a) = a :=\n  is_lawful_monad.pure_bind a id\n#align mjoin_pure joinM_pure\n-/\n\n",
 "joinM_map_pure":
 "#print joinM_map_pure /-\n@[simp]\ntheorem joinM_map_pure {α : Type u} (a : m α) : joinM (pure <$> a) = a := by\n  simp only [joinM, (· ∘ ·), id.def, map_bind, (bind_pure_comp_eq_map _ _).symm, bind_assoc, pure_bind, bind_pure]\n#align mjoin_map_pure joinM_map_pure\n-/\n\n",
 "joinM_map_map":
 "#print joinM_map_map /-\ntheorem joinM_map_map {α β : Type u} (f : α → β) (a : m (m α)) : joinM (functor.map f <$> a) = f <$> joinM a := by\n  simp only [joinM, (· ∘ ·), id.def, (bind_pure_comp_eq_map _ _).symm, bind_assoc, map_bind, pure_bind]\n#align mjoin_map_map joinM_map_map\n-/\n\n",
 "joinM_map_joinM":
 "#print joinM_map_joinM /-\ntheorem joinM_map_joinM {α : Type u} (a : m (m (m α))) : joinM (joinM <$> a) = joinM (joinM a) := by\n  simp only [joinM, (· ∘ ·), id.def, map_bind, (bind_pure_comp_eq_map _ _).symm, bind_assoc, pure_bind]\n#align mjoin_map_mjoin joinM_map_joinM\n-/\n\n",
 "id_map'":
 "@[simp]\ntheorem id_map' (x : f α) : (fun a => a) <$> x = x :=\n  id_map _\n#align id_map' id_map'ₓ\n\n",
 "guard_true":
 "#print guard_true /-\n@[simp]\ntheorem guard_true {h : Decidable True} : @guard F _ True h = pure () := by simp [guard]\n#align guard_true guard_true\n-/\n\n",
 "guard_false":
 "#print guard_false /-\n@[simp]\ntheorem guard_false {h : Decidable False} : @guard F _ False h = failure := by simp [guard]\n#align guard_false guard_false\n-/\n\n",
 "fish_pure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr >=> » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr >=> » -/\n#print fish_pure /-\n-- >=> is already defined in the core library but it is unusable\n-- because of its precedence (it is defined with precedence 2) and\n-- because it is defined as a lambda instead of having a named\n-- function\n@[functor_norm]\ntheorem fish_pure {α β} (f : α → m β) : «expr >=> » f pure = f := by simp only [(«expr >=> » · ·), functor_norm]\n#align fish_pure fish_pure\n-/\n\n",
 "fish_pipe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr >=> » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr >=> » -/\n#print fish_pipe /-\n@[functor_norm]\ntheorem fish_pipe {α β} (f : α → m β) : «expr >=> » pure f = f := by simp only [(«expr >=> » · ·), functor_norm]\n#align fish_pipe fish_pipe\n-/\n\n",
 "fish_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr >=> » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr >=> » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr >=> » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr >=> » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr >=> » -/\n#print fish_assoc /-\n@[functor_norm]\ntheorem fish_assoc {α β γ φ} (f : α → m β) (g : β → m γ) (h : γ → m φ) :\n    «expr >=> » («expr >=> » f g) h = «expr >=> » f («expr >=> » g h) := by simp only [(«expr >=> » · ·), functor_norm]\n#align fish_assoc fish_assoc\n-/\n\n",
 "commutative_map":
 "#print CommApplicative.commutative_map /-\ntheorem CommApplicative.commutative_map {m : Type _ → Type _} [applicative m] [CommApplicative m] {α β γ} (a : m α)\n    (b : m β) {f : α → β → γ} : f <$> a <*> b = flip f <$> b <*> a :=\n  calc\n    f <$> a <*> b = (fun p : α × β => f p.1 p.2) <$> (prod.mk <$> a <*> b) := by\n      simp [seq_map_assoc, map_seq, seq_assoc, seq_pure, map_map]\n    _ = (fun b a => f a b) <$> b <*> a := by\n      rw [is_comm_applicative.commutative_prod] <;> simp [seq_map_assoc, map_seq, seq_assoc, seq_pure, map_map]\n    \n#align is_comm_applicative.commutative_map CommApplicative.commutative_map\n-/\n\n"}