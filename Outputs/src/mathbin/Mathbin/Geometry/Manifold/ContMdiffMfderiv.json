{"tangent_map_tangent_bundle_pure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-- The derivative of the zero section of the tangent bundle maps `⟨x, v⟩` to `⟨⟨x, 0⟩, ⟨v, 0⟩⟩`.\n\nNote that, as currently framed, this is a statement in coordinates, thus reliant on the choice\nof the coordinate system we use on the tangent bundle.\n\nHowever, the result itself is coordinate-dependent only to the extent that the coordinates\ndetermine a splitting of the tangent bundle.  Moreover, there is a canonical splitting at each\npoint of the zero section (since there is a canonical horizontal space there, the tangent space\nto the zero section, in addition to the canonical vertical space which is the kernel of the\nderivative of the projection), and this canonical splitting is also the one that comes from the\ncoordinates on the tangent bundle in our definitions. So this statement is not as crazy as it\nmay seem.\n\nTODO define splittings of vector bundles; state this result invariantly. -/\ntheorem tangent_map_tangent_bundle_pure (p : tangent_bundle I M) :\n    tangent_map I I.tangent (tangent_bundle.zero_section I M) p = ⟨⟨p.1, 0⟩, ⟨p.2, 0⟩⟩ :=\n  by\n  rcases p with ⟨x, v⟩\n  have N : «expr ⁻¹' » I.symm (chart_at H x).target ∈ (nhds) (I ((chart_at H x) x)) :=\n    by\n    apply is_open.mem_nhds\n    apply (local_homeomorph.open_target _).preimage I.continuous_inv_fun\n    simp only [mfld_simps]\n  have A : mdifferentiable_at I I.tangent (fun x => @total_space_mk M (tangent_space I) x 0) x :=\n    tangent_bundle.smooth_zero_section.mdifferentiable_at\n  have B : fderiv_within 𝕜 (fun x_1 : E => (x_1, (0 : E))) (Set.range («expr⇑ » I)) (I ((chart_at H x) x)) v = (v, 0) :=\n    by\n    rw [fderiv_within_eq_fderiv, differentiable_at.fderiv_prod]\n    · simp\n    · exact differentiable_at_id'\n    · exact differentiable_at_const _\n    · exact model_with_corners.unique_diff_at_image I\n    · exact differentiable_at_id'.prod (differentiable_at_const _)\n  simp only [tangent_bundle.zero_section, tangent_map, mfderiv, A, dif_pos, chart_at,\n    basic_smooth_vector_bundle_core.chart, basic_smooth_vector_bundle_core.to_vector_bundle_core, tangent_bundle_core,\n    function.comp, continuous_linear_map.map_zero, mfld_simps]\n  rw [← fderiv_within_inter N (I.unique_diff (I ((chart_at H x) x)) (Set.mem_range_self _))] at B\n  rw [← fderiv_within_inter N (I.unique_diff (I ((chart_at H x) x)) (Set.mem_range_self _)), ← B]\n  congr 2\n  apply fderiv_within_congr _ fun y hy => _\n  · simp only [prod.mk.inj_iff, mfld_simps]\n  · apply unique_diff_within_at.inter (I.unique_diff _ _) N\n    simp only [mfld_simps]\n  · simp only [mfld_simps] at hy\n    simp only [hy, prod.mk.inj_iff, mfld_simps]\n#align tangent_map_tangent_bundle_pure tangent_map_tangent_bundle_pure\n\n",
 "smooth_zero_section":
 "theorem smooth_zero_section : smooth I I.tangent (zero_section I M) :=\n  by\n  apply basic_smooth_vector_bundle_core.smooth_const_section (tangent_bundle_core I M) 0\n  intro i j x hx\n  simp only [tangent_bundle_core, continuous_linear_map.map_zero, continuous_linear_map.coe_coe, mfld_simps]\n#align smooth_zero_section smooth_zero_section\n\n",
 "smooth_within_at_proj":
 "theorem smooth_within_at_proj {s : set (tangent_bundle I M)} {p : tangent_bundle I M} :\n    smooth_within_at I.tangent I (proj I M) s p :=\n  basic_smooth_vector_bundle_core.smooth_within_at_proj _\n#align smooth_within_at_proj smooth_within_at_proj\n\n",
 "smooth_proj":
 "theorem smooth_proj : smooth I.tangent I (proj I M) :=\n  basic_smooth_vector_bundle_core.smooth_proj _\n#align smooth_proj smooth_proj\n\n",
 "smooth_on_proj":
 "theorem smooth_on_proj {s : set (tangent_bundle I M)} : smooth_on I.tangent I (proj I M) s :=\n  basic_smooth_vector_bundle_core.smooth_on_proj _\n#align smooth_on_proj smooth_on_proj\n\n",
 "smooth_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_iff_target {f : N → Z.to_vector_bundle_core.total_space} :\n    smooth J (I.prod (model_with_corners_self 𝕜 E')) f ↔\n      continuous (Bundle.TotalSpace.proj ∘ f) ∧\n        ∀ x,\n          smooth_at J (model_with_corners_self 𝕜 (E × E'))\n            (ext_chart_at (I.prod (model_with_corners_self 𝕜 E')) (f x) ∘ f) x :=\n  by simp_rw [smooth, smooth_at, cont_mdiff, Z.cont_mdiff_at_iff_target, forall_and, continuous_iff_continuous_at]\n#align smooth_iff_target smooth_iff_target\n\n",
 "smooth_const_section":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/-- If an element of `E'` is invariant under all coordinate changes, then one can define a\ncorresponding section of the fiber bundle, which is smooth. This applies in particular to the\nzero section of a vector bundle. Another example (not yet defined) would be the identity\nsection of the endomorphism bundle of a vector bundle. -/\ntheorem smooth_const_section (v : E')\n    (h : ∀ i j : atlas H M, ∀ x ∈ i.1.source ∩ j.1.source, Z.coord_change i j (i.1 x) v = v) :\n    smooth I (I.prod (model_with_corners_self 𝕜 E'))\n      (show M → Z.to_vector_bundle_core.total_space from fun x => ⟨x, v⟩) :=\n  by\n  intro x\n  rw [cont_mdiff_at, cont_mdiff_within_at_iff']\n  constructor\n  · apply continuous.continuous_within_at\n    apply fiber_bundle_core.continuous_const_section\n    intro i j y hy\n    exact h _ _ _ hy\n  · have : cont_diff 𝕜 («expr⊤») fun y : E => (y, v) := cont_diff_id.prod cont_diff_const\n    apply this.cont_diff_within_at.congr\n    · intro y hy\n      simp only [mfld_simps] at hy\n      simp only [chart, hy, chart_at, prod.mk.inj_iff, to_vector_bundle_core, mfld_simps]\n      apply h\n      simp only [hy, subtype.val_eq_coe, mfld_simps]\n    · simp only [chart, chart_at, prod.mk.inj_iff, to_vector_bundle_core, mfld_simps]\n      apply h\n      simp only [subtype.val_eq_coe, mfld_simps]\n#align smooth_const_section smooth_const_section\n\n",
 "smooth_at_proj":
 "theorem smooth_at_proj {p : tangent_bundle I M} : smooth_at I.tangent I (proj I M) p :=\n  basic_smooth_vector_bundle_core.smooth_at_proj _\n#align smooth_at_proj smooth_at_proj\n\n",
 "mdifferentiable_within_at":
 "theorem smooth.mdifferentiable_within_at (hf : smooth I I' f) : mdifferentiable_within_at I I' f s x :=\n  hf.mdifferentiable_at.mdifferentiable_within_at\n#align smooth.mdifferentiable_within_at smooth.mdifferentiable_within_at\n\n",
 "mdifferentiable_on":
 "theorem smooth_on.mdifferentiable_on (hf : smooth_on I I' f s) : mdifferentiable_on I I' f s :=\n  hf.mdifferentiable_on le_top\n#align smooth_on.mdifferentiable_on smooth_on.mdifferentiable_on\n\n",
 "mdifferentiable_at":
 "theorem smooth.mdifferentiable_at (hf : smooth I I' f) : mdifferentiable_at I I' f x :=\n  hf.mdifferentiable x\n#align smooth.mdifferentiable_at smooth.mdifferentiable_at\n\n",
 "mdifferentiable":
 "theorem smooth.mdifferentiable (hf : smooth I I' f) : mdifferentiable I I' f :=\n  cont_mdiff.mdifferentiable hf le_top\n#align smooth.mdifferentiable smooth.mdifferentiable\n\n",
 "continuous_tangent_map":
 "/-- If a function is `C^n`, with `1 ≤ n`, then its bundled derivative is continuous. -/\ntheorem cont_mdiff.continuous_tangent_map (hf : cont_mdiff I I' n f) (hmn : 1 ≤ n) : continuous (tangent_map I I' f) :=\n  by\n  rw [← cont_mdiff_on_univ] at hf\n  rw [continuous_iff_continuous_on_univ]\n  convert hf.continuous_on_tangent_map_within hmn unique_mdiff_on_univ\n  rw [tangent_map_within_univ]\n#align cont_mdiff.continuous_tangent_map cont_mdiff.continuous_tangent_map\n\n",
 "continuous_on_tangent_map_within_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- If a function is `C^n` with `1 ≤ n` on a domain with unique derivatives, then its bundled\nderivative is continuous. In this auxiliary lemma, we prove this fact when the source and target\nspace are model spaces in models with corners. The general fact is proved in\n`cont_mdiff_on.continuous_on_tangent_map_within`-/\ntheorem cont_mdiff_on.continuous_on_tangent_map_within_aux {f : H → H'} {s : set H} (hf : cont_mdiff_on I I' n f s)\n    (hn : 1 ≤ n) (hs : unique_mdiff_on I s) :\n    continuous_on (tangent_map_within I I' f s) («expr ⁻¹' » (tangent_bundle.proj I H) s) :=\n  by\n  suffices h :\n    continuous_on\n      (fun p : H × E =>\n        (f p.fst,\n          (fderiv_within 𝕜 (written_in_ext_chart_at I I' p.fst f) («expr ⁻¹' » I.symm s ∩ range I)\n                ((ext_chart_at I p.fst) p.fst) :\n              «expr →L[ ] » E 𝕜 E')\n            p.snd))\n      («expr ⁻¹' » prod.fst s)\n  · have A := (tangent_bundle_model_space_homeomorph H I).continuous\n    rw [continuous_iff_continuous_on_univ] at A\n    have B := ((tangent_bundle_model_space_homeomorph H' I').symm.continuous.comp_continuous_on h).comp' A\n    have :\n      univ ∩ «expr ⁻¹' » («expr⇑ » (tangent_bundle_model_space_homeomorph H I)) («expr ⁻¹' » prod.fst s) =\n        «expr ⁻¹' » (tangent_bundle.proj I H) s :=\n      by\n      ext ⟨x, v⟩\n      simp only [mfld_simps]\n    rw [this] at B\n    apply B.congr\n    rintro ⟨x, v⟩ hx\n    dsimp [tangent_map_within]\n    ext\n    · rfl\n    simp only [mfld_simps]\n    apply congr_fun\n    apply congr_arg\n    rw [mdifferentiable_within_at.mfderiv_within (hf.mdifferentiable_on hn x hx)]\n    rfl\n  suffices h :\n    continuous_on\n      (fun p : H × E =>\n        (fderiv_within 𝕜 (I' ∘ f ∘ I.symm) («expr ⁻¹' » I.symm s ∩ range I) (I p.fst) : «expr →L[ ] » E 𝕜 E') p.snd)\n      («expr ⁻¹' » prod.fst s)\n  · dsimp [written_in_ext_chart_at, ext_chart_at]\n    apply continuous_on.prod (continuous_on.comp hf.continuous_on continuous_fst.continuous_on (subset.refl _))\n    apply h.congr\n    intro p hp\n    rfl\n  suffices h : continuous_on (fderiv_within 𝕜 (I' ∘ f ∘ I.symm) («expr ⁻¹' » I.symm s ∩ range I)) («expr '' » I s)\n  · have C := continuous_on.comp h I.continuous_to_fun.continuous_on (subset.refl _)\n    have A : continuous fun q : «expr →L[ ] » E 𝕜 E' × E => q.1 q.2 := is_bounded_bilinear_map_apply.continuous\n    have B :\n      continuous_on (fun p : H × E => (fderiv_within 𝕜 (I' ∘ f ∘ I.symm) («expr ⁻¹' » I.symm s ∩ range I) (I p.1), p.2))\n        («expr ⁻¹' » prod.fst s) :=\n      by\n      apply continuous_on.prod _ continuous_snd.continuous_on\n      refine' (continuous_on.comp C continuous_fst.continuous_on _ : _)\n      exact preimage_mono (subset_preimage_image _ _)\n    exact A.comp_continuous_on B\n  rw [cont_mdiff_on_iff] at hf\n  let x : H := I.symm (0 : E)\n  let y : H' := I'.symm (0 : E')\n  have A := hf.2 x y\n  simp only [I.image_eq, inter_comm, mfld_simps] at A⊢\n  apply A.continuous_on_fderiv_within _ hn\n  convert hs.unique_diff_on_target_inter x using 1\n  simp only [inter_comm, mfld_simps]\n#align cont_mdiff_on.continuous_on_tangent_map_within_aux cont_mdiff_on.continuous_on_tangent_map_within_aux\n\n",
 "continuous_on_tangent_map_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- If a function is `C^n` on a domain with unique derivatives, with `1 ≤ n`, then its bundled\nderivative is continuous there. -/\ntheorem cont_mdiff_on.continuous_on_tangent_map_within (hf : cont_mdiff_on I I' n f s) (hmn : 1 ≤ n)\n    (hs : unique_mdiff_on I s) :\n    continuous_on (tangent_map_within I I' f s) («expr ⁻¹' » (tangent_bundle.proj I M) s) :=\n  haveI :\n    cont_mdiff_on I.tangent I'.tangent 0 (tangent_map_within I I' f s) («expr ⁻¹' » (tangent_bundle.proj I M) s) :=\n    hf.cont_mdiff_on_tangent_map_within hmn hs\n  this.continuous_on\n#align cont_mdiff_on.continuous_on_tangent_map_within cont_mdiff_on.continuous_on_tangent_map_within\n\n",
 "cont_mdiff_within_at_proj":
 "theorem cont_mdiff_within_at_proj {s : set (tangent_bundle I M)} {p : tangent_bundle I M} :\n    cont_mdiff_within_at I.tangent I n (proj I M) s p :=\n  basic_smooth_vector_bundle_core.cont_mdiff_within_at_proj _\n#align cont_mdiff_within_at_proj cont_mdiff_within_at_proj\n\n",
 "cont_mdiff_tangent_map":
 "/-- If a function is `C^n`, then its bundled derivative is `C^m` when `m+1 ≤ n`. -/\ntheorem cont_mdiff.cont_mdiff_tangent_map (hf : cont_mdiff I I' n f) (hmn : m + 1 ≤ n) :\n    cont_mdiff I.tangent I'.tangent m (tangent_map I I' f) :=\n  by\n  rw [← cont_mdiff_on_univ] at hf⊢\n  convert hf.cont_mdiff_on_tangent_map_within hmn unique_mdiff_on_univ\n  rw [tangent_map_within_univ]\n#align cont_mdiff.cont_mdiff_tangent_map cont_mdiff.cont_mdiff_tangent_map\n\n",
 "cont_mdiff_proj":
 "theorem cont_mdiff_proj : cont_mdiff I.tangent I n (proj I M) :=\n  basic_smooth_vector_bundle_core.cont_mdiff_proj _\n#align cont_mdiff_proj cont_mdiff_proj\n\n",
 "cont_mdiff_on_tangent_map_within_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- If a function is `C^n` on a domain with unique derivatives, then its bundled derivative is\n`C^m` when `m+1 ≤ n`. In this auxiliary lemma, we prove this fact when the source and target space\nare model spaces in models with corners. The general fact is proved in\n`cont_mdiff_on.cont_mdiff_on_tangent_map_within` -/\ntheorem cont_mdiff_on.cont_mdiff_on_tangent_map_within_aux {f : H → H'} {s : set H} (hf : cont_mdiff_on I I' n f s)\n    (hmn : m + 1 ≤ n) (hs : unique_mdiff_on I s) :\n    cont_mdiff_on I.tangent I'.tangent m (tangent_map_within I I' f s) («expr ⁻¹' » (tangent_bundle.proj I H) s) :=\n  by\n  have m_le_n : m ≤ n := by\n    apply le_trans _ hmn\n    have : m + 0 ≤ m + 1 := add_le_add_left (zero_le _) _\n    simpa only [add_zero] using this\n  have one_le_n : 1 ≤ n := by\n    apply le_trans _ hmn\n    change 0 + 1 ≤ m + 1\n    exact add_le_add_right (zero_le _) _\n  have U' : unique_diff_on 𝕜 (range I ∩ «expr ⁻¹' » I.symm s) :=\n    by\n    intro y hy\n    simpa only [unique_mdiff_on, unique_mdiff_within_at, hy.1, inter_comm, mfld_simps] using hs (I.symm y) hy.2\n  rw [cont_mdiff_on_iff]\n  refine' ⟨hf.continuous_on_tangent_map_within_aux one_le_n hs, fun p q => _⟩\n  have A :\n    lower_set.prod (range I) univ ∩\n        «expr ⁻¹' » ((equiv.sigma_equiv_prod H E).symm ∘ fun p : E × E => (I.symm p.fst, p.snd))\n          («expr ⁻¹' » (tangent_bundle.proj I H) s) =\n      lower_set.prod (range I ∩ «expr ⁻¹' » I.symm s) univ :=\n    by\n    ext ⟨x, v⟩\n    simp only [mfld_simps]\n  suffices h :\n    cont_diff_on 𝕜 m\n      (((fun p : H' × E' => (I' p.fst, p.snd)) ∘ equiv.sigma_equiv_prod H' E') ∘\n        tangent_map_within I I' f s ∘ (equiv.sigma_equiv_prod H E).symm ∘ fun p : E × E => (I.symm p.fst, p.snd))\n      (lower_set.prod (range («expr⇑ » I) ∩ «expr ⁻¹' » («expr⇑ » I.symm) s) univ)\n  · simpa [A] using h\n  change\n    cont_diff_on 𝕜 m\n      (fun p : E × E => ((I' (f (I.symm p.fst)), (mfderiv_within I I' f s (I.symm p.fst) : E → E') p.snd) : E' × E'))\n      (lower_set.prod (range I ∩ «expr ⁻¹' » I.symm s) univ)\n  -- check that all bits in this formula are `C^n`\n  have hf' := cont_mdiff_on_iff.1 hf\n  have A : cont_diff_on 𝕜 m (I' ∘ f ∘ I.symm) (range I ∩ «expr ⁻¹' » I.symm s) := by\n    simpa only [mfld_simps] using (hf'.2 (I.symm 0) (I'.symm 0)).of_le m_le_n\n  have B : cont_diff_on 𝕜 m ((I' ∘ f ∘ I.symm) ∘ prod.fst) (lower_set.prod (range I ∩ «expr ⁻¹' » I.symm s) univ) :=\n    A.comp cont_diff_fst.cont_diff_on (prod_subset_preimage_fst _ _)\n  suffices C :\n    cont_diff_on 𝕜 m (fun p : E × E => (fderiv_within 𝕜 (I' ∘ f ∘ I.symm) («expr ⁻¹' » I.symm s ∩ range I) p.1 : _) p.2)\n      (lower_set.prod (range I ∩ «expr ⁻¹' » I.symm s) univ)\n  · apply cont_diff_on.prod B _\n    apply C.congr fun p hp => _\n    simp only [mfld_simps] at hp\n    simp only [mfderiv_within, hf.mdifferentiable_on one_le_n _ hp.2, hp.1, dif_pos, mfld_simps]\n  have D :\n    cont_diff_on 𝕜 m (fun x => fderiv_within 𝕜 (I' ∘ f ∘ I.symm) («expr ⁻¹' » I.symm s ∩ range I) x)\n      (range I ∩ «expr ⁻¹' » I.symm s) :=\n    by\n    have : cont_diff_on 𝕜 n (I' ∘ f ∘ I.symm) (range I ∩ «expr ⁻¹' » I.symm s) := by\n      simpa only [mfld_simps] using hf'.2 (I.symm 0) (I'.symm 0)\n    simpa only [inter_comm] using this.fderiv_within U' hmn\n  have := D.comp cont_diff_fst.cont_diff_on (prod_subset_preimage_fst _ _)\n  have := cont_diff_on.prod this cont_diff_snd.cont_diff_on\n  exact is_bounded_bilinear_map_apply.cont_diff.comp_cont_diff_on this\n#align cont_mdiff_on.cont_mdiff_on_tangent_map_within_aux cont_mdiff_on.cont_mdiff_on_tangent_map_within_aux\n\n",
 "cont_mdiff_on_tangent_map_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- If a function is `C^n` on a domain with unique derivatives, then its bundled derivative\nis `C^m` when `m+1 ≤ n`. -/\ntheorem cont_mdiff_on.cont_mdiff_on_tangent_map_within (hf : cont_mdiff_on I I' n f s) (hmn : m + 1 ≤ n)\n    (hs : unique_mdiff_on I s) :\n    cont_mdiff_on I.tangent I'.tangent m (tangent_map_within I I' f s) («expr ⁻¹' » (tangent_bundle.proj I M) s) :=\n  by\n  /- The strategy of the proof is to avoid unfolding the definitions, and reduce by functoriality\n    to the case of functions on the model spaces, where we have already proved the result.\n    Let `l` and `r` be the charts to the left and to the right, so that we have\n    ```\n       l^{-1}      f       r\n    H --------> M ---> M' ---> H'\n    ```\n    Then the tangent map `T(r ∘ f ∘ l)` is smooth by a previous result. Consider the composition\n    ```\n        Tl        T(r ∘ f ∘ l^{-1})         Tr^{-1}\n    TM -----> TH -------------------> TH' ---------> TM'\n    ```\n    where `Tr^{-1}` and `Tl` are the tangent maps of `r^{-1}` and `l`. Writing `Tl` and `Tr^{-1}` as\n    composition of charts (called `Dl` and `il` for `l` and `Dr` and `ir` in the proof below), it\n    follows that they are smooth. The composition of all these maps is `Tf`, and is therefore smooth\n    as a composition of smooth maps.\n    -/\n  have m_le_n : m ≤ n := by\n    apply le_trans _ hmn\n    have : m + 0 ≤ m + 1 := add_le_add_left (zero_le _) _\n    simpa only [add_zero]\n  have one_le_n : 1 ≤ n := by\n    apply le_trans _ hmn\n    change 0 + 1 ≤ m + 1\n    exact add_le_add_right (zero_le _) _\n  -- First step: local reduction on the space, to a set `s'` which is contained in chart domains.\n  refine' cont_mdiff_on_of_locally_cont_mdiff_on fun p hp => _\n  have hf' := cont_mdiff_on_iff.1 hf\n  simp [tangent_bundle.proj] at hp\n  let l := chart_at H p.1\n  set Dl := chart_at (model_prod H E) p with hDl\n  let r := chart_at H' (f p.1)\n  let Dr := chart_at (model_prod H' E') (tangent_map_within I I' f s p)\n  let il := chart_at (model_prod H E) (tangent_map I I l p)\n  let ir := chart_at (model_prod H' E') (tangent_map I I' (r ∘ f) p)\n  let s' := «expr ⁻¹' » f r.source ∩ s ∩ l.source\n  let s'_lift := «expr ⁻¹' » (tangent_bundle.proj I M) s'\n  let s'l := l.target ∩ «expr ⁻¹' » l.symm s'\n  let s'l_lift := «expr ⁻¹' » (tangent_bundle.proj I H) s'l\n  rcases continuous_on_iff'.1 hf'.1 r.source r.open_source with ⟨o, o_open, ho⟩\n  suffices h : cont_mdiff_on I.tangent I'.tangent m (tangent_map_within I I' f s) s'_lift\n  · refine' ⟨«expr ⁻¹' » (tangent_bundle.proj I M) (o ∩ l.source), _, _, _⟩\n    show is_open («expr ⁻¹' » (tangent_bundle.proj I M) (o ∩ l.source))\n    exact (is_open.inter o_open l.open_source).preimage (tangent_bundle_proj_continuous _ _)\n    show p ∈ «expr ⁻¹' » (tangent_bundle.proj I M) (o ∩ l.source)\n    · simp [tangent_bundle.proj]\n      have : p.1 ∈ «expr ⁻¹' » f r.source ∩ s := by simp [hp]\n      rw [ho] at this\n      exact this.1\n    · have : «expr ⁻¹' » (tangent_bundle.proj I M) s ∩ «expr ⁻¹' » (tangent_bundle.proj I M) (o ∩ l.source) = s'_lift :=\n        by\n        dsimp only [s'_lift, s']\n        rw [ho]\n        mfld_set_tac\n      rw [this]\n      exact h\n  /- Second step: check that all functions are smooth, and use the chain rule to write the bundled\n    derivative as a composition of a function between model spaces and of charts.\n    Convention: statements about the differentiability of `a ∘ b ∘ c` are named `diff_abc`. Statements\n    about differentiability in the bundle have a `_lift` suffix. -/\n  have U' : unique_mdiff_on I s' := by\n    apply unique_mdiff_on.inter _ l.open_source\n    rw [ho, inter_comm]\n    exact hs.inter o_open\n  have U'l : unique_mdiff_on I s'l := U'.unique_mdiff_on_preimage (mdifferentiable_chart _ _)\n  have diff_f : cont_mdiff_on I I' n f s' := hf.mono (by mfld_set_tac)\n  have diff_r : cont_mdiff_on I' I' n r r.source := cont_mdiff_on_chart\n  have diff_rf : cont_mdiff_on I I' n (r ∘ f) s' :=\n    by\n    apply cont_mdiff_on.comp diff_r diff_f fun x hx => _\n    simp only [s', mfld_simps] at hx\n    simp only [hx, mfld_simps]\n  have diff_l : cont_mdiff_on I I n l.symm s'l :=\n    haveI A : cont_mdiff_on I I n l.symm l.target := cont_mdiff_on_chart_symm\n    A.mono (by mfld_set_tac)\n  have diff_rfl : cont_mdiff_on I I' n (r ∘ f ∘ l.symm) s'l :=\n    by\n    apply cont_mdiff_on.comp diff_rf diff_l\n    mfld_set_tac\n  have diff_rfl_lift : cont_mdiff_on I.tangent I'.tangent m (tangent_map_within I I' (r ∘ f ∘ l.symm) s'l) s'l_lift :=\n    diff_rfl.cont_mdiff_on_tangent_map_within_aux hmn U'l\n  have diff_irrfl_lift :\n    cont_mdiff_on I.tangent I'.tangent m (ir ∘ tangent_map_within I I' (r ∘ f ∘ l.symm) s'l) s'l_lift :=\n    haveI A : cont_mdiff_on I'.tangent I'.tangent m ir ir.source := cont_mdiff_on_chart\n    cont_mdiff_on.comp A diff_rfl_lift fun p hp => by simp only [ir, mfld_simps]\n  have diff_Drirrfl_lift :\n    cont_mdiff_on I.tangent I'.tangent m (Dr.symm ∘ ir ∘ tangent_map_within I I' (r ∘ f ∘ l.symm) s'l) s'l_lift :=\n    by\n    have A : cont_mdiff_on I'.tangent I'.tangent m Dr.symm Dr.target := cont_mdiff_on_chart_symm\n    apply cont_mdiff_on.comp A diff_irrfl_lift fun p hp => _\n    simp only [s'l_lift, tangent_bundle.proj, mfld_simps] at hp\n    simp only [ir, @LocalEquiv.refl_coe (model_prod H' E'), hp, mfld_simps]\n  -- conclusion of this step: the composition of all the maps above is smooth\n  have diff_DrirrflilDl :\n    cont_mdiff_on I.tangent I'.tangent m (Dr.symm ∘ (ir ∘ tangent_map_within I I' (r ∘ f ∘ l.symm) s'l) ∘ il.symm ∘ Dl)\n      s'_lift :=\n    by\n    have A : cont_mdiff_on I.tangent I.tangent m Dl Dl.source := cont_mdiff_on_chart\n    have A' : cont_mdiff_on I.tangent I.tangent m Dl s'_lift :=\n      by\n      apply A.mono fun p hp => _\n      simp only [s'_lift, tangent_bundle.proj, mfld_simps] at hp\n      simp only [Dl, hp, mfld_simps]\n    have B : cont_mdiff_on I.tangent I.tangent m il.symm il.target := cont_mdiff_on_chart_symm\n    have C : cont_mdiff_on I.tangent I.tangent m (il.symm ∘ Dl) s'_lift :=\n      cont_mdiff_on.comp B A' fun p hp => by simp only [il, mfld_simps]\n    apply cont_mdiff_on.comp diff_Drirrfl_lift C fun p hp => _\n    simp only [s'_lift, tangent_bundle.proj, mfld_simps] at hp\n    simp only [il, s'l_lift, hp, tangent_bundle.proj, mfld_simps]\n  /- Third step: check that the composition of all the maps indeed coincides with the derivative we\n    are looking for -/\n  have eq_comp :\n    ∀ q ∈ s'_lift,\n      tangent_map_within I I' f s q = (Dr.symm ∘ ir ∘ tangent_map_within I I' (r ∘ f ∘ l.symm) s'l ∘ il.symm ∘ Dl) q :=\n    by\n    intro q hq\n    simp only [s'_lift, tangent_bundle.proj, mfld_simps] at hq\n    have U'q : unique_mdiff_within_at I s' q.1 := by\n      apply U'\n      simp only [hq, s', mfld_simps]\n    have U'lq : unique_mdiff_within_at I s'l (Dl q).1 := by\n      apply U'l\n      simp only [hq, s'l, mfld_simps]\n    have A :\n      tangent_map_within I I' ((r ∘ f) ∘ l.symm) s'l (il.symm (Dl q)) =\n        tangent_map_within I I' (r ∘ f) s' (tangent_map_within I I l.symm s'l (il.symm (Dl q))) :=\n      by\n      refine' tangent_map_within_comp_at (il.symm (Dl q)) _ _ (fun p hp => _) U'lq\n      · apply diff_rf.mdifferentiable_on one_le_n\n        simp only [hq, mfld_simps]\n      · apply diff_l.mdifferentiable_on one_le_n\n        simp only [s'l, hq, mfld_simps]\n      · simp only [mfld_simps] at hp\n        simp only [hp, mfld_simps]\n    have B : tangent_map_within I I l.symm s'l (il.symm (Dl q)) = q :=\n      by\n      have : tangent_map_within I I l.symm s'l (il.symm (Dl q)) = tangent_map I I l.symm (il.symm (Dl q)) :=\n        by\n        refine' tangent_map_within_eq_tangent_map U'lq _\n        refine' mdifferentiable_at_atlas_symm _ (chart_mem_atlas _ _) _\n        simp only [hq, mfld_simps]\n      rw [this, tangent_map_chart_symm, hDl]\n      · simp only [hq, mfld_simps]\n        have : q ∈ (chart_at (model_prod H E) p).source := by simp only [hq, mfld_simps]\n        exact (chart_at (model_prod H E) p).left_inv this\n      · simp only [hq, mfld_simps]\n    have C :\n      tangent_map_within I I' (r ∘ f) s' q = tangent_map_within I' I' r r.source (tangent_map_within I I' f s' q) :=\n      by\n      refine' tangent_map_within_comp_at q _ _ (fun r hr => _) U'q\n      · apply diff_r.mdifferentiable_on one_le_n\n        simp only [hq, mfld_simps]\n      · apply diff_f.mdifferentiable_on one_le_n\n        simp only [hq, mfld_simps]\n      · simp only [s', mfld_simps] at hr\n        simp only [hr, mfld_simps]\n    have D :\n      Dr.symm (ir (tangent_map_within I' I' r r.source (tangent_map_within I I' f s' q))) =\n        tangent_map_within I I' f s' q :=\n      by\n      have A :\n        tangent_map_within I' I' r r.source (tangent_map_within I I' f s' q) =\n          tangent_map I' I' r (tangent_map_within I I' f s' q) :=\n        by\n        apply tangent_map_within_eq_tangent_map\n        · apply is_open.unique_mdiff_within_at _ r.open_source\n          simp [hq]\n        · refine' mdifferentiable_at_atlas _ (chart_mem_atlas _ _) _\n          simp only [hq, mfld_simps]\n      have : f p.1 = (tangent_map_within I I' f s p).1 := rfl\n      rw [A]\n      dsimp [r, Dr]\n      rw [this, tangent_map_chart]\n      · simp only [hq, mfld_simps]\n        have : tangent_map_within I I' f s' q ∈ (chart_at (model_prod H' E') (tangent_map_within I I' f s p)).source :=\n          by simp only [hq, mfld_simps]\n        exact (chart_at (model_prod H' E') (tangent_map_within I I' f s p)).left_inv this\n      · simp only [hq, mfld_simps]\n    have E : tangent_map_within I I' f s' q = tangent_map_within I I' f s q :=\n      by\n      refine' tangent_map_within_subset (by mfld_set_tac) U'q _\n      apply hf.mdifferentiable_on one_le_n\n      simp only [hq, mfld_simps]\n    simp only [(· ∘ ·), A, B, C, D, E.symm]\n  exact diff_DrirrflilDl.congr eq_comp\n#align cont_mdiff_on.cont_mdiff_on_tangent_map_within cont_mdiff_on.cont_mdiff_on_tangent_map_within\n\n",
 "cont_mdiff_on_proj":
 "theorem cont_mdiff_on_proj {s : set (tangent_bundle I M)} : cont_mdiff_on I.tangent I n (proj I M) s :=\n  basic_smooth_vector_bundle_core.cont_mdiff_on_proj _\n#align cont_mdiff_on_proj cont_mdiff_on_proj\n\n",
 "cont_mdiff_at_proj":
 "theorem cont_mdiff_at_proj {p : tangent_bundle I M} : cont_mdiff_at I.tangent I n (proj I M) p :=\n  basic_smooth_vector_bundle_core.cont_mdiff_at_proj _\n#align cont_mdiff_at_proj cont_mdiff_at_proj\n\n",
 "cont_mdiff_at_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/-- A version of `cont_mdiff_at_iff_target` when the codomain is the total space of\n  a `basic_smooth_vector_bundle_core`. The continuity condition in the RHS is weaker. -/\ntheorem cont_mdiff_at_iff_target {f : N → Z.to_vector_bundle_core.total_space} {x : N} {n : «exprℕ∞»} :\n    cont_mdiff_at J (I.prod (model_with_corners_self 𝕜 E')) n f x ↔\n      continuous_at (Bundle.TotalSpace.proj ∘ f) x ∧\n        cont_mdiff_at J (model_with_corners_self 𝕜 (E × E')) n\n          (ext_chart_at (I.prod (model_with_corners_self 𝕜 E')) (f x) ∘ f) x :=\n  by\n  let Z' := Z.to_vector_bundle_core\n  rw [cont_mdiff_at_iff_target, and_congr_left_iff]\n  refine' fun hf => ⟨fun h => Z'.continuous_proj.continuous_at.comp h, fun h => _⟩\n  exact\n    (Z'.local_triv ⟨chart_at _ (f x).1, chart_mem_atlas _ _⟩).continuous_at_of_comp_left h (mem_chart_source _ _)\n      (h.prod hf.continuous_at.snd)\n#align cont_mdiff_at_iff_target cont_mdiff_at_iff_target\n\n"}