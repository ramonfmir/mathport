{"trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/-\nCopyright (c) 2019 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n/- Notational shortcut for the composition of local homeomorphisms and local equivs, i.e.,\n`local_homeomorph.trans` and `local_equiv.trans`.\nNote that, as is usual for equivs, the composition is from left to right, hence the direction of\nthe arrow. -/\ntheorem structure_groupoid.trans (G : structure_groupoid H) {e e' : local_homeomorph H H} (he : e ∈ G) (he' : e' ∈ G) :\n    local_homeomorph.trans e e' ∈ G :=\n  G.trans' e e' he he'\n#align structure_groupoid.trans structure_groupoid.trans\n\n",
 "symm":
 "theorem structure_groupoid.symm (G : structure_groupoid H) {e : local_homeomorph H H} (he : e ∈ G) : e.symm ∈ G :=\n  G.symm' e he\n#align structure_groupoid.symm structure_groupoid.symm\n\n",
 "subset_maximal_atlas":
 "/-- The elements of the atlas belong to the maximal atlas for any structure groupoid -/\ntheorem structure_groupoid.subset_maximal_atlas [has_groupoid M G] : atlas H M ⊆ G.maximal_atlas M := fun e he e' he' =>\n  ⟨G.compatible he he', G.compatible he' he⟩\n#align structure_groupoid.subset_maximal_atlas structure_groupoid.subset_maximal_atlas\n\n",
 "singleton_has_groupoid":
 "theorem singleton_has_groupoid {f : α → H} (h : open_embedding f) (G : structure_groupoid H)\n    [closed_under_restriction G] : @has_groupoid _ _ _ _ h.singleton_charted_space G :=\n  (h.to_local_homeomorph f).singleton_has_groupoid (by simp) G\n#align singleton_has_groupoid singleton_has_groupoid\n\n",
 "singleton_charted_space_mem_atlas_eq":
 "theorem singleton_charted_space_mem_atlas_eq (h : e.source = Set.univ) (e' : local_homeomorph α H)\n    (h' : e' ∈ (e.singleton_charted_space h).atlas) : e' = e :=\n  h'\n#align singleton_charted_space_mem_atlas_eq singleton_charted_space_mem_atlas_eq\n\n",
 "singleton_charted_space_chart_at_source":
 "theorem singleton_charted_space_chart_at_source (h : e.source = Set.univ) {x : α} :\n    (@chart_at H _ α _ (e.singleton_charted_space h) x).source = Set.univ :=\n  h\n#align singleton_charted_space_chart_at_source singleton_charted_space_chart_at_source\n\n",
 "singleton_charted_space_chart_at_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem singleton_charted_space_chart_at_eq {f : α → H} (h : open_embedding f) {x : α} :\n    «expr⇑ » (@chart_at H _ α _ h.singleton_charted_space x) = f :=\n  rfl\n#align singleton_charted_space_chart_at_eq singleton_charted_space_chart_at_eq\n\n",
 "second_countable_of_sigma_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem charted_space.second_countable_of_sigma_compact [second_countable_topology H] [sigma_compact_space M] :\n    second_countable_topology M :=\n  by\n  obtain ⟨s, hsc, hsU⟩ :\n    ∃ s,\n      set.countable s ∧\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            (chart_at H x).source =\n          univ :=\n    countable_cover_nhds_of_sigma_compact fun x : M => chart_source_mem_nhds H x\n  exact charted_space.second_countable_of_countable_cover H hsU hsc\n#align charted_space.second_countable_of_sigma_compact charted_space.second_countable_of_sigma_compact\n\n",
 "second_countable_of_countable_cover":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem charted_space.second_countable_of_countable_cover [second_countable_topology H] {s : set M}\n    (hs :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (chart_at H x).source =\n        univ)\n    (hsc : s.countable) : second_countable_topology M :=\n  by\n  haveI : ∀ x : M, second_countable_topology (chart_at H x).source := fun x =>\n    (chart_at H x).second_countable_topology_source\n  haveI := hsc.to_encodable\n  rw [bUnion_eq_Union] at hs\n  exact second_countable_topology_of_countable_cover (fun x : s => (chart_at H (x : M)).open_source) hs\n#align charted_space.second_countable_of_countable_cover charted_space.second_countable_of_countable_cover\n\n",
 "prod_charted_space_chart_at":
 "@[simp, mfld_simps]\ntheorem prod_charted_space_chart_at : chart_at (model_prod H H') x = (chart_at H x.fst).prod (chart_at H' x.snd) :=\n  rfl\n#align prod_charted_space_chart_at prod_charted_space_chart_at\n\n",
 "pi_charted_space_chart_at":
 "@[simp, mfld_simps]\ntheorem pi_charted_space_chart_at {ι : Type _} [fintype ι] (H : ι → Type _) [∀ i, topological_space (H i)]\n    (M : ι → Type _) [∀ i, topological_space (M i)] [∀ i, charted_space (H i) (M i)] (f : ∀ i, M i) :\n    chart_at (model_pi H) f = local_homeomorph.pi fun i => chart_at (H i) (f i) :=\n  rfl\n#align pi_charted_space_chart_at pi_charted_space_chart_at\n\n",
 "open_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem open_target (he : e ∈ c.atlas) : is_open e.target :=\n  by\n  have E : e.target ∩ «expr ⁻¹' » e.symm e.source = e.target :=\n    subset.antisymm (inter_subset_left _ _) fun x hx => ⟨hx, LocalEquiv.target_subset_preimage_source _ hx⟩\n  simpa [LocalEquiv.trans_source, E] using c.open_source e e he he\n#align open_target open_target\n\n",
 "open_source'":
 "theorem open_source' (he : e ∈ c.atlas) : @is_open M c.to_topological_space e.source :=\n  by\n  apply topological_space.generate_open.basic\n  simp only [exists_prop, mem_Union, mem_singleton_iff]\n  refine' ⟨e, he, univ, is_open_univ, _⟩\n  simp only [Set.univ_inter, Set.preimage_univ]\n#align open_source' open_source'\n\n",
 "model_prod_range_prod_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n-- Next lemma shows up often when dealing with derivatives, register it as simp.\n@[simp, mfld_simps]\ntheorem model_prod_range_prod_id {H : Type _} {H' : Type _} {α : Type _} (f : H → α) :\n    (range fun p : model_prod H H' => (f p.1, p.2)) = lower_set.prod (range f) (univ : set H') := by\n  rw [prod_range_univ_eq]\n#align model_prod_range_prod_id model_prod_range_prod_id\n\n",
 "mem_pregroupoid_of_eq_on_source":
 "theorem mem_pregroupoid_of_eq_on_source (PG : pregroupoid H) {e e' : local_homeomorph H H} (he' : e ≈ e')\n    (he : PG.property e e.source) : PG.property e' e'.source :=\n  by\n  rw [← he'.1]\n  exact PG.congr e.open_source he'.eq_on.symm he\n#align mem_pregroupoid_of_eq_on_source mem_pregroupoid_of_eq_on_source\n\n",
 "mem_maximal_atlas_of_mem_groupoid":
 "/-- In the model space, any element of the groupoid is in the maximal atlas. -/\ntheorem structure_groupoid.mem_maximal_atlas_of_mem_groupoid {f : local_homeomorph H H} (hf : f ∈ G) :\n    f ∈ G.maximal_atlas H := by\n  rintro e (rfl : e = local_homeomorph.refl H)\n  exact ⟨G.trans (G.symm hf) G.id_mem, G.trans (G.symm G.id_mem) hf⟩\n#align structure_groupoid.mem_maximal_atlas_of_mem_groupoid structure_groupoid.mem_maximal_atlas_of_mem_groupoid\n\n",
 "mem_maximal_atlas_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\ntheorem mem_maximal_atlas_iff {e : local_homeomorph M H} :\n    e ∈ G.maximal_atlas M ↔\n      ∀ e' ∈ atlas H M, local_homeomorph.trans e.symm e' ∈ G ∧ local_homeomorph.trans e'.symm e ∈ G :=\n  iff.rfl\n#align mem_maximal_atlas_iff mem_maximal_atlas_iff\n\n",
 "mem_groupoid_of_pregroupoid":
 "theorem mem_groupoid_of_pregroupoid {PG : pregroupoid H} {e : local_homeomorph H H} :\n    e ∈ PG.groupoid ↔ PG.property e e.source ∧ PG.property e.symm e.target :=\n  iff.rfl\n#align mem_groupoid_of_pregroupoid mem_groupoid_of_pregroupoid\n\n",
 "mem_chart_target":
 "theorem mem_chart_target (x : M) : chart_at H x x ∈ (chart_at H x).target :=\n  (chart_at H x).map_source (mem_chart_source _ _)\n#align mem_chart_target mem_chart_target\n\n",
 "mem_achart_source":
 "theorem mem_achart_source (x : M) : x ∈ (achart H x).1.source :=\n  mem_chart_source H x\n#align mem_achart_source mem_achart_source\n\n",
 "locally_connected_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If a topological space admits an atlas with locally connected charts, then the space itself is\nlocally connected. -/\ntheorem charted_space.locally_connected_space [locally_connected_space H] : locally_connected_space M :=\n  by\n  let E : M → local_homeomorph M H := chart_at H\n  refine'\n    locally_connected_space_of_connected_bases (fun x s => «expr '' » (E x).symm s)\n      (fun x s => (is_open s ∧ E x x ∈ s ∧ is_connected s) ∧ s ⊆ (E x).target) _ _\n  · intro x\n    simpa only [local_homeomorph.symm_map_nhds_eq, mem_chart_source] using\n      ((locally_connected_space.open_connected_basis (E x x)).restrict_subset\n            ((E x).open_target.mem_nhds (mem_chart_target H x))).map\n        (E x).symm\n  · rintro x s ⟨⟨-, -, hsconn⟩, hssubset⟩\n    exact hsconn.is_preconnected.image _ ((E x).continuous_on_symm.mono hssubset)\n#align charted_space.locally_connected_space charted_space.locally_connected_space\n\n",
 "locally_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If a topological space admits an atlas with locally compact charts, then the space itself\nis locally compact. -/\ntheorem charted_space.locally_compact [locally_compact_space H] : locally_compact_space M :=\n  by\n  have :\n    ∀ x : M,\n      ((nhds) x).has_basis (fun s => s ∈ (nhds) (chart_at H x x) ∧ is_compact s ∧ s ⊆ (chart_at H x).target) fun s =>\n        «expr '' » (chart_at H x).symm s :=\n    by\n    intro x\n    rw [← (chart_at H x).symm_map_nhds_eq (mem_chart_source H x)]\n    exact ((compact_basis_nhds (chart_at H x x)).has_basis_self_subset (chart_target_mem_nhds H x)).map _\n  refine' locally_compact_space_of_has_basis this _\n  rintro x s ⟨h₁, h₂, h₃⟩\n  exact h₂.image_of_continuous_on ((chart_at H x).continuous_on_symm.mono h₃)\n#align charted_space.locally_compact charted_space.locally_compact\n\n",
 "locality":
 "theorem structure_groupoid.locality (G : structure_groupoid H) {e : local_homeomorph H H}\n    (h : ∀ x ∈ e.source, ∃ s, is_open s ∧ x ∈ s ∧ e.restr s ∈ G) : e ∈ G :=\n  G.locality' e h\n#align structure_groupoid.locality structure_groupoid.locality\n\n",
 "le_iff":
 "theorem structure_groupoid.le_iff {G₁ G₂ : structure_groupoid H} : G₁ ≤ G₂ ↔ ∀ e, e ∈ G₁ → e ∈ G₂ :=\n  iff.rfl\n#align structure_groupoid.le_iff structure_groupoid.le_iff\n\n",
 "id_restr_groupoid_mem":
 "theorem id_restr_groupoid_mem {s : set H} (hs : is_open s) : of_set s hs ∈ @id_restr_groupoid H _ :=\n  ⟨s, hs, by rfl⟩\n#align id_restr_groupoid_mem id_restr_groupoid_mem\n\n",
 "id_mem_maximal_atlas":
 "/-- In the model space, the identity is in any maximal atlas. -/\ntheorem structure_groupoid.id_mem_maximal_atlas : local_homeomorph.refl H ∈ G.maximal_atlas H :=\n  G.subset_maximal_atlas <| by simp\n#align structure_groupoid.id_mem_maximal_atlas structure_groupoid.id_mem_maximal_atlas\n\n",
 "id_mem":
 "theorem structure_groupoid.id_mem (G : structure_groupoid H) : local_homeomorph.refl H ∈ G :=\n  G.id_mem'\n#align structure_groupoid.id_mem structure_groupoid.id_mem\n\n",
 "has_groupoid_of_pregroupoid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\ntheorem has_groupoid_of_pregroupoid (PG : pregroupoid H)\n    (h :\n      ∀ {e e' : local_homeomorph M H},\n        e ∈ atlas H M →\n          e' ∈ atlas H M → PG.property (local_homeomorph.trans e.symm e') (local_homeomorph.trans e.symm e').source) :\n    has_groupoid M PG.groupoid :=\n  ⟨fun e e' he he' => mem_groupoid_of_pregroupoid.mpr ⟨h he he', h he' he⟩⟩\n#align has_groupoid_of_pregroupoid has_groupoid_of_pregroupoid\n\n",
 "has_groupoid_of_le":
 "theorem has_groupoid_of_le {G₁ G₂ : structure_groupoid H} (h : has_groupoid M G₁) (hle : G₁ ≤ G₂) : has_groupoid M G₂ :=\n  ⟨fun e e' he he' => hle (h.compatible he he')⟩\n#align has_groupoid_of_le has_groupoid_of_le\n\n",
 "groupoid_of_pregroupoid_le":
 "theorem groupoid_of_pregroupoid_le (PG₁ PG₂ : pregroupoid H) (h : ∀ f s, PG₁.property f s → PG₂.property f s) :\n    PG₁.groupoid ≤ PG₂.groupoid := by\n  refine' structure_groupoid.le_iff.2 fun e he => _\n  rw [mem_groupoid_of_pregroupoid] at he⊢\n  exact ⟨h _ _ he.1, h _ _ he.2⟩\n#align groupoid_of_pregroupoid_le groupoid_of_pregroupoid_le\n\n",
 "eq_on_source":
 "theorem structure_groupoid.eq_on_source (G : structure_groupoid H) {e e' : local_homeomorph H H} (he : e ∈ G)\n    (h : e' ≈ e) : e' ∈ G :=\n  G.eq_on_source' e e' he h\n#align structure_groupoid.eq_on_source structure_groupoid.eq_on_source\n\n",
 "compatible_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/-- Changing coordinates between two elements of the maximal atlas gives rise to an element\nof the structure groupoid. -/\ntheorem structure_groupoid.compatible_of_mem_maximal_atlas {e e' : local_homeomorph M H} (he : e ∈ G.maximal_atlas M)\n    (he' : e' ∈ G.maximal_atlas M) : local_homeomorph.trans e.symm e' ∈ G :=\n  by\n  apply G.locality fun x hx => _\n  set f := chart_at H (e.symm x) with hf\n  let s := e.target ∩ «expr ⁻¹' » e.symm f.source\n  have hs : is_open s := by apply e.symm.continuous_to_fun.preimage_open_of_open <;> apply open_source\n  have xs : x ∈ s := by\n    dsimp at hx\n    simp [s, hx]\n  refine' ⟨s, hs, xs, _⟩\n  have A : local_homeomorph.trans e.symm f ∈ G := (mem_maximal_atlas_iff.1 he f (chart_mem_atlas _ _)).1\n  have B : local_homeomorph.trans f.symm e' ∈ G := (mem_maximal_atlas_iff.1 he' f (chart_mem_atlas _ _)).2\n  have C : local_homeomorph.trans (local_homeomorph.trans e.symm f) (local_homeomorph.trans f.symm e') ∈ G :=\n    G.trans A B\n  have D :\n    local_homeomorph.trans (local_homeomorph.trans e.symm f) (local_homeomorph.trans f.symm e') ≈\n      (local_homeomorph.trans e.symm e').restr s :=\n    calc\n      local_homeomorph.trans (local_homeomorph.trans e.symm f) (local_homeomorph.trans f.symm e') =\n          local_homeomorph.trans e.symm (local_homeomorph.trans (local_homeomorph.trans f f.symm) e') :=\n        by simp [trans_assoc]\n      _ ≈ local_homeomorph.trans e.symm (local_homeomorph.trans (of_set f.source f.open_source) e') := by\n        simp [eq_on_source.trans', trans_self_symm]\n      _ ≈ local_homeomorph.trans (local_homeomorph.trans e.symm (of_set f.source f.open_source)) e' := by\n        simp [trans_assoc]\n      _ ≈ local_homeomorph.trans (e.symm.restr s) e' := by simp [s, trans_of_set']\n      _ ≈ (local_homeomorph.trans e.symm e').restr s := by simp [restr_trans]\n      \n  exact G.eq_on_source C (setoid.symm D)\n#align structure_groupoid.compatible_of_mem_maximal_atlas structure_groupoid.compatible_of_mem_maximal_atlas\n\n",
 "compatible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/-- Reformulate in the `structure_groupoid` namespace the compatibility condition of charts in a\ncharted space admitting a structure groupoid, to make it more easily accessible with dot\nnotation. -/\ntheorem structure_groupoid.compatible {H : Type _} [topological_space H] (G : structure_groupoid H) {M : Type _}\n    [topological_space M] [charted_space H M] [has_groupoid M G] {e e' : local_homeomorph M H} (he : e ∈ atlas H M)\n    (he' : e' ∈ atlas H M) : local_homeomorph.trans e.symm e' ∈ G :=\n  has_groupoid.compatible G he he'\n#align structure_groupoid.compatible structure_groupoid.compatible\n\n",
 "coe_achart":
 "@[simp, mfld_simps]\ntheorem coe_achart (x : M) : (achart H x : local_homeomorph M H) = chart_at H x :=\n  rfl\n#align coe_achart coe_achart\n\n",
 "closed_under_restriction_iff_id_le":
 "/-- A groupoid is closed under restriction if and only if it contains the trivial restriction-closed\ngroupoid. -/\ntheorem closed_under_restriction_iff_id_le (G : structure_groupoid H) :\n    closed_under_restriction G ↔ id_restr_groupoid ≤ G :=\n  by\n  constructor\n  · intro _i\n    apply structure_groupoid.le_iff.mpr\n    rintro e ⟨s, hs, hes⟩\n    refine' G.eq_on_source _ hes\n    convert closed_under_restriction' G.id_mem hs\n    change s = _ ∩ _\n    rw [hs.interior_eq]\n    simp only [mfld_simps]\n  · intro h\n    constructor\n    intro e he s hs\n    rw [← of_set_trans (e : local_homeomorph H H) hs]\n    refine' G.trans _ he\n    apply structure_groupoid.le_iff.mp h\n    exact id_restr_groupoid_mem hs\n#align closed_under_restriction_iff_id_le closed_under_restriction_iff_id_le\n\n",
 "closed_under_restriction'":
 "theorem closed_under_restriction' {G : structure_groupoid H} [closed_under_restriction G] {e : local_homeomorph H H}\n    (he : e ∈ G) {s : set H} (hs : is_open s) : e.restr s ∈ G :=\n  closed_under_restriction.closed_under_restriction he s hs\n#align closed_under_restriction' closed_under_restriction'\n\n",
 "charted_space_self_prod":
 "theorem charted_space_self_prod : prod_charted_space H H H' H' = charted_space_self (H × H') :=\n  by\n  ext1\n  · simp [prod_charted_space, atlas]\n  · ext1\n    simp [chart_at_self_eq]\n    rfl\n#align charted_space_self_prod charted_space_self_prod\n\n",
 "charted_space_self_atlas":
 "/-- In the trivial charted_space structure of a space modelled over itself through the identity, the\natlas members are just the identity -/\n@[simp, mfld_simps]\ntheorem charted_space_self_atlas {H : Type _} [topological_space H] {e : local_homeomorph H H} :\n    e ∈ atlas H H ↔ e = local_homeomorph.refl H := by simp [atlas, charted_space.atlas]\n#align charted_space_self_atlas charted_space_self_atlas\n\n",
 "chart_target_mem_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem chart_target_mem_nhds (x : M) : (chart_at H x).target ∈ (nhds) (chart_at H x x) :=\n  (chart_at H x).open_target.mem_nhds <| mem_chart_target H x\n#align chart_target_mem_nhds chart_target_mem_nhds\n\n",
 "chart_source_mem_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem chart_source_mem_nhds (x : M) : (chart_at H x).source ∈ (nhds) x :=\n  (chart_at H x).open_source.mem_nhds <| mem_chart_source H x\n#align chart_source_mem_nhds chart_source_mem_nhds\n\n",
 "chart_mem_maximal_atlas":
 "theorem structure_groupoid.chart_mem_maximal_atlas [has_groupoid M G] (x : M) : chart_at H x ∈ G.maximal_atlas M :=\n  G.subset_maximal_atlas (chart_mem_atlas H x)\n#align structure_groupoid.chart_mem_maximal_atlas structure_groupoid.chart_mem_maximal_atlas\n\n",
 "chart_at_self_eq":
 "/-- In the model space, chart_at is always the identity -/\ntheorem chart_at_self_eq {H : Type _} [topological_space H] {x : H} : chart_at H x = local_homeomorph.refl H := by\n  simpa using chart_mem_atlas H x\n#align chart_at_self_eq chart_at_self_eq\n\n",
 "achart_val":
 "@[simp, mfld_simps]\ntheorem achart_val (x : M) : (achart H x).1 = chart_at H x :=\n  rfl\n#align achart_val achart_val\n\n",
 "achart_def":
 "theorem achart_def (x : M) : achart H x = ⟨chart_at H x, chart_mem_atlas H x⟩ :=\n  rfl\n#align achart_def achart_def\n\n"}