{"is_locally_constant":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-\nCopyright (c) 2022 Heather Macbeth. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Heather Macbeth\n-/\n/-- A holomorphic function on a compact complex manifold is locally constant. -/\nprotected theorem is_locally_constant {f : M → F}\n    (hf : mdifferentiable (model_with_corners_self (exprℂ) E) (model_with_corners_self (exprℂ) F) f) :\n    is_locally_constant f :=\n  by\n  haveI : locally_connected_space M := charted_space.locally_connected_space E M\n  apply is_locally_constant.of_constant_on_preconnected_clopens\n  intro s hs₂ hs₃ a ha b hb\n  have hs₁ : is_compact s := hs₃.2.is_compact\n  -- for an empty set this fact is trivial\n  rcases s.eq_empty_or_nonempty with (rfl | hs')\n  · exact false.rec _ ha\n  -- otherwise, let `p₀` be a point where the value of `f` has maximal norm\n  obtain ⟨p₀, hp₀s, hp₀⟩ := hs₁.exists_forall_ge hs' hf.continuous.norm.continuous_on\n  -- we will show `f` agrees everywhere with `f p₀`\n  suffices s ⊆ { r : M | f r = f p₀ } ∩ s by exact (this hb).1.trans (this ha).1.symm\n  clear ha hb a b\n  refine' hs₂.subset_clopen _ ⟨p₀, hp₀s, ⟨rfl, hp₀s⟩⟩\n  -- closedness of the set of points sent to `f p₀`\n  refine' ⟨_, (is_closed_singleton.preimage hf.continuous).inter hs₃.2⟩\n  -- we will show this set is open by showing it is a neighbourhood of each of its members\n  rw [is_open_iff_mem_nhds]\n  rintro p ⟨hp : f p = _, hps⟩\n  -- let `p` be  in this set\n  have hps' : s ∈ (nhds) p := hs₃.1.mem_nhds hps\n  have key₁ : «expr ⁻¹' » (chart_at E p).symm s ∈ (nhds) (chart_at E p p) :=\n    by\n    rw [← filter.mem_map, (chart_at E p).symm_map_nhds_eq (mem_chart_source E p)]\n    exact hps'\n  have key₂ : (chart_at E p).target ∈ (nhds) (chart_at E p p) :=\n    (local_homeomorph.open_target _).mem_nhds (mem_chart_target E p)\n  -- `f` pulled back by the chart at `p` is differentiable around `chart_at E p p`\n  have hf' :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n      ((nhds) (chart_at E p p)) (differentiable_at (exprℂ) (f ∘ (chart_at E p).symm) z) :=\n    by\n    refine' filter.eventually_of_mem key₂ fun z hz => _\n    have H₁ : (chart_at E p).symm z ∈ (chart_at E p).source := (chart_at E p).map_target hz\n    have H₂ : f ((chart_at E p).symm z) ∈ (chart_at F (0 : F)).source := trivial\n    have H := (mdifferentiable_at_iff_of_mem_source H₁ H₂).mp (hf ((chart_at E p).symm z))\n    simp only [differentiable_within_at_univ, mfld_simps] at H\n    simpa [local_homeomorph.right_inv _ hz] using H.2\n  -- `f` pulled back by the chart at `p` has a local max at `chart_at E p p`\n  have hf'' : is_local_max (norm ∘ f ∘ (chart_at E p).symm) (chart_at E p p) :=\n    by\n    refine' filter.eventually_of_mem key₁ fun z hz => _\n    refine' (hp₀ ((chart_at E p).symm z) hz).trans (_ : «expr‖ ‖» (f p₀) ≤ «expr‖ ‖» (f _))\n    rw [← hp, local_homeomorph.left_inv _ (mem_chart_source E p)]\n  -- so by the maximum principle `f` is equal to `f p` near `p`\n  obtain ⟨U, hU, hUf⟩ := (complex.eventually_eq_of_is_local_max_norm hf' hf'').exists_mem\n  have H₁ : «expr ⁻¹' » (chart_at E p) U ∈ (nhds) p := (chart_at E p).continuous_at (mem_chart_source E p) hU\n  have H₂ : (chart_at E p).source ∈ (nhds) p := (local_homeomorph.open_source _).mem_nhds (mem_chart_source E p)\n  apply filter.mem_of_superset (filter.inter_mem hps' (filter.inter_mem H₁ H₂))\n  rintro q ⟨hqs, hq : chart_at E p q ∈ _, hq'⟩\n  refine' ⟨_, hqs⟩\n  simpa [local_homeomorph.left_inv _ hq', hp, -norm_eq_abs] using hUf (chart_at E p q) hq\n#align is_locally_constant is_locally_constant\n\n",
 "exists_eq_const_of_compact_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- A holomorphic function on a compact connected complex manifold is the constant function `f ≡ v`,\nfor some value `v`. -/\ntheorem exists_eq_const_of_compact_space [preconnected_space M] {f : M → F}\n    (hf : mdifferentiable (model_with_corners_self (exprℂ) E) (model_with_corners_self (exprℂ) F) f) :\n    ∃ v : F, f = function.const M v :=\n  hf.is_locally_constant.exists_eq_const\n#align exists_eq_const_of_compact_space exists_eq_const_of_compact_space\n\n",
 "apply_eq_of_compact_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- A holomorphic function on a compact connected complex manifold is constant. -/\ntheorem apply_eq_of_compact_space [preconnected_space M] {f : M → F}\n    (hf : mdifferentiable (model_with_corners_self (exprℂ) E) (model_with_corners_self (exprℂ) F) f) (a b : M) :\n    f a = f b :=\n  hf.is_locally_constant.apply_eq_of_preconnected_space _ _\n#align apply_eq_of_compact_space apply_eq_of_compact_space\n\n"}