{"snd":
 "theorem smooth.snd {f : N → M × M'} (hf : smooth J (I.prod I') f) : smooth J I' fun x => (f x).2 :=\n  smooth_snd.comp hf\n#align smooth.snd smooth.snd\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self.self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smooth.smul {f : M → 𝕜} {g : M → V} (hf : smooth I (model_with_corners_self.self 𝕜) f)\n    (hg : smooth I (model_with_corners_self 𝕜 V) g) :\n    smooth I (model_with_corners_self 𝕜 V) fun p => «expr • » (f p) (g p) :=\n  hf.smul hg\n#align smooth.smul smooth.smul\n\n",
 "smooth_within_at_univ":
 "theorem smooth_within_at_univ : smooth_within_at I I' f univ x ↔ smooth_at I I' f x :=\n  cont_mdiff_within_at_univ\n#align smooth_within_at_univ smooth_within_at_univ\n\n",
 "smooth_within_at_snd":
 "theorem smooth_within_at_snd {s : Set (M × N)} {p : M × N} : smooth_within_at (I.prod J) J Prod.snd s p :=\n  cont_mdiff_within_at_snd\n#align smooth_within_at_snd smooth_within_at_snd\n\n",
 "smooth_within_at_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_within_at_pi_space :\n    smooth_within_at I (model_with_corners_self 𝕜 (∀ i, Fi i)) φ s x ↔\n      ∀ i, smooth_within_at I (model_with_corners_self 𝕜 (Fi i)) (fun x => φ x i) s x :=\n  cont_mdiff_within_at_pi_space\n#align smooth_within_at_pi_space smooth_within_at_pi_space\n\n",
 "smooth_within_at_one":
 "@[to_additive]\ntheorem smooth_within_at_one [One M'] : smooth_within_at I I' (1 : M → M') s x :=\n  cont_mdiff_within_at_one\n#align smooth_within_at_one smooth_within_at_one\n\n",
 "smooth_within_at_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_within_at_iff_target :\n    smooth_within_at I I' f s x ↔\n      ContinuousWithinAt f s x ∧ smooth_within_at I (model_with_corners_self 𝕜 E') (ext_chart_at I' (f x) ∘ f) s x :=\n  cont_mdiff_within_at_iff_target\n#align smooth_within_at_iff_target smooth_within_at_iff_target\n\n",
 "smooth_within_at_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `with_top.nat.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem smooth_within_at_iff :\n    smooth_within_at I I' f s x ↔\n      ContinuousWithinAt f s x ∧\n        cont_diff_within_at 𝕜 (with_top.nat.top) (ext_chart_at I' (f x) ∘ f ∘ (ext_chart_at I x).symm)\n          («expr ⁻¹' » (ext_chart_at I x).symm s ∩ range I) (ext_chart_at I x x) :=\n  cont_mdiff_within_at_iff\n#align smooth_within_at_iff smooth_within_at_iff\n\n",
 "smooth_within_at_id":
 "theorem smooth_within_at_id : smooth_within_at I I (id : M → M) s x :=\n  cont_mdiff_within_at_id\n#align smooth_within_at_id smooth_within_at_id\n\n",
 "smooth_within_at_fst":
 "theorem smooth_within_at_fst {s : Set (M × N)} {p : M × N} : smooth_within_at (I.prod J) I Prod.fst s p :=\n  cont_mdiff_within_at_fst\n#align smooth_within_at_fst smooth_within_at_fst\n\n",
 "smooth_within_at_const":
 "theorem smooth_within_at_const : smooth_within_at I I' (fun x : M => c) s x :=\n  cont_mdiff_within_at_const\n#align smooth_within_at_const smooth_within_at_const\n\n",
 "smooth_within_at":
 "theorem smooth_at.smooth_within_at (hf : smooth_at I I' f x) : smooth_within_at I I' f s x :=\n  cont_mdiff_at.cont_mdiff_within_at hf\n#align smooth_at.smooth_within_at smooth_at.smooth_within_at\n\n",
 "smooth_snd":
 "theorem smooth_snd : smooth (I.prod J) J (@Prod.snd M N) :=\n  cont_mdiff_snd\n#align smooth_snd smooth_snd\n\n",
 "smooth_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self.self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- On any vector space, multiplication by a scalar is a smooth operation. -/\ntheorem smooth_smul :\n    smooth ((model_with_corners_self.self 𝕜).prod (model_with_corners_self 𝕜 V)) (model_with_corners_self 𝕜 V)\n      fun p : 𝕜 × V => «expr • » p.1 p.2 :=\n  smooth_iff.2 ⟨continuous_smul, fun x y => cont_diff_smul.cont_diff_on⟩\n#align smooth_smul smooth_smul\n\n",
 "smooth_prod_assoc":
 "theorem smooth_prod_assoc :\n    smooth ((I.prod I').prod J) (I.prod (I'.prod J)) fun x : (M × M') × N => (x.1.1, x.1.2, x.2) :=\n  smooth_fst.fst.prod_mk <| smooth_fst.snd.prod_mk smooth_snd\n#align smooth_prod_assoc smooth_prod_assoc\n\n",
 "smooth_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_pi_space :\n    smooth I (model_with_corners_self 𝕜 (∀ i, Fi i)) φ ↔\n      ∀ i, smooth I (model_with_corners_self 𝕜 (Fi i)) fun x => φ x i :=\n  cont_mdiff_pi_space\n#align smooth_pi_space smooth_pi_space\n\n",
 "smooth_one":
 "@[to_additive]\ntheorem smooth_one [One M'] : smooth I I' (1 : M → M') := by simp only [Pi.one_def, smooth_const]\n#align smooth_one smooth_one\n\n",
 "smooth_on_univ":
 "theorem smooth_on_univ : smooth_on I I' f univ ↔ smooth I I' f :=\n  cont_mdiff_on_univ\n#align smooth_on_univ smooth_on_univ\n\n",
 "smooth_on_snd":
 "theorem smooth_on_snd {s : Set (M × N)} : smooth_on (I.prod J) J Prod.snd s :=\n  cont_mdiff_on_snd\n#align smooth_on_snd smooth_on_snd\n\n",
 "smooth_on_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_on_pi_space :\n    smooth_on I (model_with_corners_self 𝕜 (∀ i, Fi i)) φ s ↔\n      ∀ i, smooth_on I (model_with_corners_self 𝕜 (Fi i)) (fun x => φ x i) s :=\n  cont_mdiff_on_pi_space\n#align smooth_on_pi_space smooth_on_pi_space\n\n",
 "smooth_on_one":
 "@[to_additive]\ntheorem smooth_on_one [One M'] : smooth_on I I' (1 : M → M') s :=\n  cont_mdiff_on_one\n#align smooth_on_one smooth_on_one\n\n",
 "smooth_on_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem smooth_on_iff_target :\n    smooth_on I I' f s ↔\n      ContinuousOn f s ∧\n        ∀ y : M',\n          smooth_on I (model_with_corners_self 𝕜 E') (ext_chart_at I' y ∘ f)\n            (s ∩ «expr ⁻¹' » f (ext_chart_at I' y).source) :=\n  cont_mdiff_on_iff_target\n#align smooth_on_iff_target smooth_on_iff_target\n\n",
 "smooth_on_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem smooth_on_iff :\n    smooth_on I I' f s ↔\n      ContinuousOn f s ∧\n        ∀ (x : M) (y : M'),\n          cont_diff_on 𝕜 («expr⊤») (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm)\n            ((ext_chart_at I x).target ∩\n              «expr ⁻¹' » (ext_chart_at I x).symm (s ∩ «expr ⁻¹' » f (ext_chart_at I' y).source)) :=\n  cont_mdiff_on_iff\n#align smooth_on_iff smooth_on_iff\n\n",
 "smooth_on_id":
 "theorem smooth_on_id : smooth_on I I (id : M → M) s :=\n  cont_mdiff_on_id\n#align smooth_on_id smooth_on_id\n\n",
 "smooth_on_fst":
 "theorem smooth_on_fst {s : Set (M × N)} : smooth_on (I.prod J) I Prod.fst s :=\n  cont_mdiff_on_fst\n#align smooth_on_fst smooth_on_fst\n\n",
 "smooth_on_const":
 "theorem smooth_on_const : smooth_on I I' (fun x : M => c) s :=\n  cont_mdiff_on_const\n#align smooth_on_const smooth_on_const\n\n",
 "smooth_on":
 "theorem smooth.smooth_on (hf : smooth I I' f) : smooth_on I I' f s :=\n  cont_mdiff.cont_mdiff_on hf\n#align smooth.smooth_on smooth.smooth_on\n\n",
 "smooth_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem smooth_iff_target :\n    smooth I I' f ↔\n      Continuous f ∧\n        ∀ y : M',\n          smooth_on I (model_with_corners_self 𝕜 E') (ext_chart_at I' y ∘ f)\n            («expr ⁻¹' » f (ext_chart_at I' y).source) :=\n  cont_mdiff_iff_target\n#align smooth_iff_target smooth_iff_target\n\n",
 "smooth_iff_proj_smooth":
 "theorem smooth_iff_proj_smooth {f : M → M' × N'} :\n    smooth I (I'.prod J') f ↔ smooth I I' (Prod.fst ∘ f) ∧ smooth I J' (Prod.snd ∘ f) :=\n  by\n  constructor\n  · intro h\n    exact ⟨smooth_fst.comp h, smooth_snd.comp h⟩\n  · rintro ⟨h_fst, h_snd⟩\n    simpa only [prod.mk.eta] using h_fst.prod_mk h_snd\n#align smooth_iff_proj_smooth smooth_iff_proj_smooth\n\n",
 "smooth_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem smooth_iff :\n    smooth I I' f ↔\n      Continuous f ∧\n        ∀ (x : M) (y : M'),\n          cont_diff_on 𝕜 («expr⊤») (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm)\n            ((ext_chart_at I x).target ∩\n              «expr ⁻¹' » (ext_chart_at I x).symm («expr ⁻¹' » f (ext_chart_at I' y).source)) :=\n  cont_mdiff_iff\n#align smooth_iff smooth_iff\n\n",
 "smooth_id":
 "theorem smooth_id : smooth I I (id : M → M) :=\n  cont_mdiff_id\n#align smooth_id smooth_id\n\n",
 "smooth_fst":
 "theorem smooth_fst : smooth (I.prod J) I (@Prod.fst M N) :=\n  cont_mdiff_fst\n#align smooth_fst smooth_fst\n\n",
 "smooth_const":
 "theorem smooth_const : smooth I I' fun x : M => c :=\n  cont_mdiff_const\n#align smooth_const smooth_const\n\n",
 "smooth_at_snd":
 "theorem smooth_at_snd {p : M × N} : smooth_at (I.prod J) J Prod.snd p :=\n  cont_mdiff_at_snd\n#align smooth_at_snd smooth_at_snd\n\n",
 "smooth_at_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_at_pi_space :\n    smooth_at I (model_with_corners_self 𝕜 (∀ i, Fi i)) φ x ↔\n      ∀ i, smooth_at I (model_with_corners_self 𝕜 (Fi i)) (fun x => φ x i) x :=\n  cont_mdiff_at_pi_space\n#align smooth_at_pi_space smooth_at_pi_space\n\n",
 "smooth_at_one":
 "@[to_additive]\ntheorem smooth_at_one [One M'] : smooth_at I I' (1 : M → M') x :=\n  cont_mdiff_at_one\n#align smooth_at_one smooth_at_one\n\n",
 "smooth_at_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth_at_iff_target {x : M} :\n    smooth_at I I' f x ↔ ContinuousAt f x ∧ smooth_at I (model_with_corners_self 𝕜 E') (ext_chart_at I' (f x) ∘ f) x :=\n  cont_mdiff_at_iff_target\n#align smooth_at_iff_target smooth_at_iff_target\n\n",
 "smooth_at_id":
 "theorem smooth_at_id : smooth_at I I (id : M → M) x :=\n  cont_mdiff_at_id\n#align smooth_at_id smooth_at_id\n\n",
 "smooth_at_fst":
 "theorem smooth_at_fst {p : M × N} : smooth_at (I.prod J) I Prod.fst p :=\n  cont_mdiff_at_fst\n#align smooth_at_fst smooth_at_fst\n\n",
 "smooth_at_const":
 "theorem smooth_at_const : smooth_at I I' (fun x : M => c) x :=\n  cont_mdiff_at_const\n#align smooth_at_const smooth_at_const\n\n",
 "smooth_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem smooth_on.smooth_at (h : smooth_on I I' f s) (hx : s ∈ (nhds) x) : smooth_at I I' f x :=\n  h.cont_mdiff_at hx\n#align smooth_on.smooth_at smooth_on.smooth_at\n\n",
 "smooth":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem cont_mdiff.smooth (h : cont_mdiff I I' («expr⊤») f) : smooth I I' f :=\n  h\n#align cont_mdiff.smooth cont_mdiff.smooth\n\n",
 "prod_mk_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem smooth.prod_mk_space {f : M → E'} {g : M → F'} (hf : smooth I (model_with_corners_self 𝕜 E') f)\n    (hg : smooth I (model_with_corners_self 𝕜 F') g) :\n    smooth I (model_with_corners_self 𝕜 (E' × F')) fun x => (f x, g x) :=\n  hf.prod_mk_space hg\n#align smooth.prod_mk_space smooth.prod_mk_space\n\n",
 "prod_mk":
 "theorem smooth.prod_mk {f : M → M'} {g : M → N'} (hf : smooth I I' f) (hg : smooth I J' g) :\n    smooth I (I'.prod J') fun x => (f x, g x) :=\n  hf.prod_mk hg\n#align smooth.prod_mk smooth.prod_mk\n\n",
 "prod_map'":
 "theorem cont_mdiff_at.prod_map' {p : M × N} (hf : cont_mdiff_at I I' n f p.1) (hg : cont_mdiff_at J J' n g p.2) :\n    cont_mdiff_at (I.prod J) (I'.prod J') n (prod.map f g) p :=\n  by\n  rcases p with ⟨⟩\n  exact hf.prod_map hg\n#align cont_mdiff_at.prod_map' cont_mdiff_at.prod_map'\n\n",
 "prod_map":
 "theorem smooth.prod_map (hf : smooth I I' f) (hg : smooth J J' g) : smooth (I.prod J) (I'.prod J') (prod.map f g) :=\n  hf.prod_map hg\n#align smooth.prod_map smooth.prod_map\n\n",
 "of_succ":
 "theorem cont_mdiff.of_succ {n : ℕ} (h : cont_mdiff I I' n.succ f) : cont_mdiff I I' n f := fun x => (h x).of_succ\n#align cont_mdiff.of_succ cont_mdiff.of_succ\n\n",
 "of_le":
 "theorem cont_mdiff.of_le (hf : cont_mdiff I I' n f) (le : m ≤ n) : cont_mdiff I I' m f := fun x => (hf x).of_le le\n#align cont_mdiff.of_le cont_mdiff.of_le\n\n",
 "mono_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem cont_mdiff_within_at.mono_of_mem (hf : cont_mdiff_within_at I I' n f s x) (hts : s ∈ nhds_within t x) :\n    cont_mdiff_within_at I I' n f t x :=\n  StructureGroupoid.LocalInvariantProp.liftPropWithinAt_mono_of_mem (cont_diff_within_at_prop_mono_of_mem I I' n) hf hts\n#align cont_mdiff_within_at.mono_of_mem cont_mdiff_within_at.mono_of_mem\n\n",
 "mono":
 "theorem cont_mdiff_on.mono (hf : cont_mdiff_on I I' n f s) (hts : t ⊆ s) : cont_mdiff_on I I' n f t := fun x hx =>\n  (hf x (hts hx)).mono hts\n#align cont_mdiff_on.mono cont_mdiff_on.mono\n\n",
 "is_local_structomorph_on_cont_diff_groupoid_iff_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_local_structomorph_on_cont_diff_groupoid_iff_aux {f : LocalHomeomorph M M'}\n    (hf : LiftPropOn (cont_diff_groupoid («expr⊤») I).is_local_structomorph_within_at f f.source) :\n    smooth_on I I f f.source :=\n  by\n  -- It suffices to show smoothness near each `x`\n  apply cont_mdiff_on_of_locally_cont_mdiff_on\n  intro x hx\n  let c := chart_at H x\n  let c' := chart_at H (f x)\n  obtain ⟨-, hxf⟩ := hf x hx\n  -- Since `f` is a local structomorph, it is locally equal to some transferred element `e` of\n  -- the `cont_diff_groupoid`.\n  obtain ⟨e, he, he' : eq_on (c' ∘ f ∘ c.symm) e («expr ⁻¹' » c.symm f.source ∩ e.source), hex : c x ∈ e.source⟩ :=\n    hxf (by simp only [hx, mfld_simps])\n  -- We choose a convenient set `s` in `M`.\n  let s : Set M := (f.trans c').source ∩ ((c.trans e).trans c'.symm).source\n  refine' ⟨s, (f.trans c').open_source.inter ((c.trans e).trans c'.symm).open_source, _, _⟩\n  · simp only [mfld_simps]\n    rw [← he'] <;> simp only [hx, hex, mfld_simps]\n  -- We need to show `f` is `cont_mdiff_on` the domain `s ∩ f.source`.  We show this in two\n  -- steps: `f` is equal to `c'.symm ∘ e ∘ c` on that domain and that function is\n  -- `cont_mdiff_on` it.\n  have H₁ : cont_mdiff_on I I («expr⊤») (c'.symm ∘ e ∘ c) s :=\n    by\n    have hc' : cont_mdiff_on I I («expr⊤») c'.symm _ := cont_mdiff_on_chart_symm\n    have he'' : cont_mdiff_on I I («expr⊤») e _ := cont_mdiff_on_of_mem_cont_diff_groupoid he\n    have hc : cont_mdiff_on I I («expr⊤») c _ := cont_mdiff_on_chart\n    refine' (hc'.comp' (he''.comp' hc)).mono _\n    mfld_set_tac\n  have H₂ : eq_on f (c'.symm ∘ e ∘ c) s := by\n    intro y hy\n    simp only [mfld_simps] at hy\n    have hy₁ : f y ∈ c'.source := by simp only [hy, mfld_simps]\n    have hy₂ : y ∈ c.source := by simp only [hy, mfld_simps]\n    have hy₃ : c y ∈ «expr ⁻¹' » c.symm f.source ∩ e.source := by simp only [hy, mfld_simps]\n    calc\n      f y = c'.symm (c' (f y)) := by rw [c'.left_inv hy₁]\n      _ = c'.symm (c' (f (c.symm (c y)))) := by rw [c.left_inv hy₂]\n      _ = c'.symm (e (c y)) := by rw [← he' hy₃]\n      \n  refine' (H₁.congr H₂).mono _\n  mfld_set_tac\n#align is_local_structomorph_on_cont_diff_groupoid_iff_aux is_local_structomorph_on_cont_diff_groupoid_iff_aux\n\n",
 "is_local_structomorph_on_cont_diff_groupoid_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `local_homeomorph.trans -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- Let `M` and `M'` be smooth manifolds with the same model-with-corners, `I`.  Then `f : M → M'`\nis a local structomorphism for `I`, if and only if it is manifold-smooth on the domain of definition\nin both directions. -/\ntheorem is_local_structomorph_on_cont_diff_groupoid_iff (f : LocalHomeomorph M M') :\n    LiftPropOn (cont_diff_groupoid («expr⊤») I).is_local_structomorph_within_at f f.source ↔\n      smooth_on I I f f.source ∧ smooth_on I I f.symm f.target :=\n  by\n  constructor\n  · intro h\n    refine'\n      ⟨is_local_structomorph_on_cont_diff_groupoid_iff_aux h, is_local_structomorph_on_cont_diff_groupoid_iff_aux _⟩\n    -- todo: we can generalize this part of the proof to a lemma\n    intro X hX\n    let x := f.symm X\n    have hx : x ∈ f.source := f.symm.maps_to hX\n    let c := chart_at H x\n    let c' := chart_at H X\n    obtain ⟨-, hxf⟩ := h x hx\n    refine' ⟨(f.symm.continuous_at hX).continuous_within_at, fun h2x => _⟩\n    obtain ⟨e, he, h2e, hef, hex⟩ :\n      ∃ e : LocalHomeomorph H H,\n        e ∈ cont_diff_groupoid («expr⊤») I ∧\n          e.source ⊆ (local_homeomorph.trans c.symm (local_homeomorph.trans f c')).source ∧\n            eq_on (c' ∘ f ∘ c.symm) e e.source ∧ c x ∈ e.source :=\n      by\n      have h1 : c' = chart_at H (f x) := by simp only [f.right_inv hX]\n      have h2 :\n        «expr⇑ » c' ∘ «expr⇑ » f ∘ «expr⇑ » c.symm =\n          «expr⇑ » (local_homeomorph.trans c.symm (local_homeomorph.trans f c')) :=\n        rfl\n      have hcx : c x ∈ «expr ⁻¹' » c.symm f.source := by simp only [hx, mfld_simps]\n      rw [h2]\n      rw [← h1, h2, LocalHomeomorph.isLocalStructomorphWithinAt_iff'] at hxf\n      · exact hxf hcx\n      · mfld_set_tac\n      · apply or.inl\n        simp only [hx, h1, mfld_simps]\n    have h2X : c' X = e (c (f.symm X)) := by\n      rw [← hef hex]\n      dsimp only [Function.comp]\n      have hfX : f.symm X ∈ c.source := by simp only [hX, mfld_simps]\n      rw [c.left_inv hfX, f.right_inv hX]\n    have h3e : eq_on (c ∘ f.symm ∘ c'.symm) e.symm («expr ⁻¹' » c'.symm f.target ∩ e.target) :=\n      by\n      have h1 : eq_on (local_homeomorph.trans c.symm (local_homeomorph.trans f c')).symm e.symm (e.target ∩ e.target) :=\n        by\n        apply eq_on.symm\n        refine' e.is_image_source_target.symm_eq_on_of_inter_eq_of_eq_on _ _\n        · rw [inter_self, inter_eq_right_iff_subset.mpr h2e]\n        rw [inter_self]\n        exact hef.symm\n      have h2 : e.target ⊆ (local_homeomorph.trans c.symm (local_homeomorph.trans f c')).target :=\n        by\n        intro x hx\n        rw [← e.right_inv hx, ← hef (e.symm.maps_to hx)]\n        exact LocalHomeomorph.mapsTo _ (h2e <| e.symm.maps_to hx)\n      rw [inter_self] at h1\n      rwa [inter_eq_right_iff_subset.mpr]\n      refine' h2.trans _\n      mfld_set_tac\n    refine' ⟨e.symm, StructureGroupoid.symm _ he, h3e, _⟩\n    rw [h2X]\n    exact e.maps_to hex\n  · -- We now show the converse: a local homeomorphism `f : M → M'` which is smooth in both\n    -- directions is a local structomorphism.  We do this by proposing\n    -- `((chart_at H x).symm.trans f).trans (chart_at H (f x))` as a candidate for a structomorphism\n    -- of `H`.\n    rintro ⟨h₁, h₂⟩ x hx\n    refine' ⟨(h₁ x hx).continuous_within_at, _⟩\n    let c := chart_at H x\n    let c' := chart_at H (f x)\n    rintro (hx' : c x ∈ «expr ⁻¹' » c.symm f.source)\n    -- propose `(c.symm.trans f).trans c'` as a candidate for a local structomorphism of `H`\n    refine' ⟨(c.symm.trans f).trans c', ⟨_, _⟩, (_ : eq_on (c' ∘ f ∘ c.symm) _ _), _⟩\n    · -- smoothness of the candidate local structomorphism in the forward direction\n      intro y hy\n      simp only [mfld_simps] at hy\n      have H : cont_mdiff_within_at I I («expr⊤») f (local_homeomorph.trans f c').source ((ext_chart_at I x).symm y) :=\n        by\n        refine' (h₁ ((ext_chart_at I x).symm y) _).mono _\n        · simp only [hy, mfld_simps]\n        · mfld_set_tac\n      have hy' : (ext_chart_at I x).symm y ∈ c.source := by simp only [hy, mfld_simps]\n      have hy'' : f ((ext_chart_at I x).symm y) ∈ c'.source := by simp only [hy, mfld_simps]\n      rw [cont_mdiff_within_at_iff_of_mem_source hy' hy''] at H\n      · convert H.2.mono _\n        · simp only [hy, mfld_simps]\n        · mfld_set_tac\n      · infer_instance\n      · infer_instance\n    · -- smoothness of the candidate local structomorphism in the reverse direction\n      intro y hy\n      simp only [mfld_simps] at hy\n      have H :\n        cont_mdiff_within_at I I («expr⊤») f.symm (local_homeomorph.trans f.symm c).source\n          ((ext_chart_at I (f x)).symm y) :=\n        by\n        refine' (h₂ ((ext_chart_at I (f x)).symm y) _).mono _\n        · simp only [hy, mfld_simps]\n        · mfld_set_tac\n      have hy' : (ext_chart_at I (f x)).symm y ∈ c'.source := by simp only [hy, mfld_simps]\n      have hy'' : f.symm ((ext_chart_at I (f x)).symm y) ∈ c.source := by simp only [hy, mfld_simps]\n      rw [cont_mdiff_within_at_iff_of_mem_source hy' hy''] at H\n      · convert H.2.mono _\n        · simp only [hy, mfld_simps]\n        · mfld_set_tac\n      · infer_instance\n      · infer_instance\n    -- now check the candidate local structomorphism agrees with `f` where it is supposed to\n    · simp only [mfld_simps]\n    · simp only [hx', mfld_simps]\n#align is_local_structomorph_on_cont_diff_groupoid_iff is_local_structomorph_on_cont_diff_groupoid_iff\n\n",
 "fst":
 "theorem smooth.fst {f : N → M × M'} (hf : smooth J (I.prod I') f) : smooth J I fun x => (f x).1 :=\n  smooth_fst.comp hf\n#align smooth.fst smooth.fst\n\n",
 "continuous_within_at":
 "theorem cont_mdiff_within_at.continuous_within_at (hf : cont_mdiff_within_at I I' n f s x) : ContinuousWithinAt f s x :=\n  hf.1\n#align cont_mdiff_within_at.continuous_within_at cont_mdiff_within_at.continuous_within_at\n\n",
 "continuous_on":
 "theorem cont_mdiff_on.continuous_on (hf : cont_mdiff_on I I' n f s) : ContinuousOn f s := fun x hx =>\n  (hf x hx).continuous_within_at\n#align cont_mdiff_on.continuous_on cont_mdiff_on.continuous_on\n\n",
 "continuous_at":
 "theorem cont_mdiff_at.continuous_at (hf : cont_mdiff_at I I' n f x) : ContinuousAt f x :=\n  (continuousWithinAt_univ _ _).1 <| cont_mdiff_within_at.continuous_within_at hf\n#align cont_mdiff_at.continuous_at cont_mdiff_at.continuous_at\n\n",
 "continuous":
 "theorem cont_mdiff.continuous (hf : cont_mdiff I I' n f) : Continuous f :=\n  continuous_iff_continuousAt.2 fun x => (hf x).continuous_at\n#align cont_mdiff.continuous cont_mdiff.continuous\n\n",
 "cont_mdiff_within_at_univ":
 "theorem cont_mdiff_within_at_univ : cont_mdiff_within_at I I' n f univ x ↔ cont_mdiff_at I I' n f x :=\n  iff.rfl\n#align cont_mdiff_within_at_univ cont_mdiff_within_at_univ\n\n",
 "cont_mdiff_within_at_top":
 "theorem cont_mdiff_within_at_top : smooth_within_at I I' f s x ↔ ∀ n : ℕ, cont_mdiff_within_at I I' n f s x :=\n  ⟨fun h n => ⟨h.1, cont_diff_within_at_top.1 h.2 n⟩, fun H => ⟨(H 0).1, cont_diff_within_at_top.2 fun n => (H n).2⟩⟩\n#align cont_mdiff_within_at_top cont_mdiff_within_at_top\n\n",
 "cont_mdiff_within_at_snd":
 "theorem cont_mdiff_within_at_snd {s : Set (M × N)} {p : M × N} : cont_mdiff_within_at (I.prod J) J n Prod.snd s p :=\n  by\n  rw [cont_mdiff_within_at_iff']\n  refine' ⟨continuousWithinAt_snd, _⟩\n  refine' cont_diff_within_at_snd.congr (fun y hy => _) _\n  · simp only [mfld_simps] at hy\n    simp only [hy, mfld_simps]\n  · simp only [mfld_simps]\n#align cont_mdiff_within_at_snd cont_mdiff_within_at_snd\n\n",
 "cont_mdiff_within_at_prod_iff":
 "theorem cont_mdiff_within_at_prod_iff (f : M → M' × N') {s : Set M} {x : M} :\n    cont_mdiff_within_at I (I'.prod J') n f s x ↔\n      cont_mdiff_within_at I I' n (Prod.fst ∘ f) s x ∧ cont_mdiff_within_at I J' n (Prod.snd ∘ f) s x :=\n  by\n  refine' ⟨fun h => ⟨h.fst, h.snd⟩, fun h => _⟩\n  simpa only [prod.mk.eta] using h.1.prod_mk h.2\n#align cont_mdiff_within_at_prod_iff cont_mdiff_within_at_prod_iff\n\n",
 "cont_mdiff_within_at_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_within_at_pi_space :\n    cont_mdiff_within_at I (model_with_corners_self 𝕜 (∀ i, Fi i)) n φ s x ↔\n      ∀ i, cont_mdiff_within_at I (model_with_corners_self 𝕜 (Fi i)) n (fun x => φ x i) s x :=\n  by\n  simp only [cont_mdiff_within_at_iff, continuousWithinAt_pi, cont_diff_within_at_pi, forall_and,\n    written_in_ext_chart_at, ext_chart_at_model_space_eq_id, (· ∘ ·), LocalEquiv.refl_coe, id]\n#align cont_mdiff_within_at_pi_space cont_mdiff_within_at_pi_space\n\n",
 "cont_mdiff_within_at_one":
 "@[to_additive]\ntheorem cont_mdiff_within_at_one [One M'] : cont_mdiff_within_at I I' n (1 : M → M') s x :=\n  cont_mdiff_at_const.cont_mdiff_within_at\n#align cont_mdiff_within_at_one cont_mdiff_within_at_one\n\n",
 "cont_mdiff_within_at_inter'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem cont_mdiff_within_at_inter' (ht : t ∈ nhds_within s x) :\n    cont_mdiff_within_at I I' n f (s ∩ t) x ↔ cont_mdiff_within_at I I' n f s x :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_inter' ht\n#align cont_mdiff_within_at_inter' cont_mdiff_within_at_inter'\n\n",
 "cont_mdiff_within_at_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem cont_mdiff_within_at_inter (ht : t ∈ (nhds) x) :\n    cont_mdiff_within_at I I' n f (s ∩ t) x ↔ cont_mdiff_within_at I I' n f s x :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_inter ht\n#align cont_mdiff_within_at_inter cont_mdiff_within_at_inter\n\n",
 "cont_mdiff_within_at_iff_target_of_mem_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_within_at_iff_target_of_mem_source {x : M} {y : M'} (hy : f x ∈ (chart_at H' y).source) :\n    cont_mdiff_within_at I I' n f s x ↔\n      ContinuousWithinAt f s x ∧ cont_mdiff_within_at I (model_with_corners_self 𝕜 E') n (ext_chart_at I' y ∘ f) s x :=\n  by\n  simp_rw [cont_mdiff_within_at]\n  rw [(cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_indep_chart_target\n      (chart_mem_maximal_atlas I' y) hy,\n    and_congr_right]\n  intro hf\n  simp_rw [StructureGroupoid.liftPropWithinAt_self_target]\n  simp_rw [((chart_at H' y).continuous_at hy).comp_continuous_within_at hf]\n  rw [← ext_chart_at_source I'] at hy\n  simp_rw [(continuous_at_ext_chart_at' I' _ hy).comp_continuous_within_at hf]\n  rfl\n#align cont_mdiff_within_at_iff_target_of_mem_source cont_mdiff_within_at_iff_target_of_mem_source\n\n",
 "cont_mdiff_within_at_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/-- One can reformulate smoothness within a set at a point as continuity within this set at this\npoint, and smoothness in the corresponding extended chart in the target. -/\ntheorem cont_mdiff_within_at_iff_target :\n    cont_mdiff_within_at I I' n f s x ↔\n      ContinuousWithinAt f s x ∧\n        cont_mdiff_within_at I (model_with_corners_self 𝕜 E') n (ext_chart_at I' (f x) ∘ f) s x :=\n  by\n  simp_rw [cont_mdiff_within_at, lift_prop_within_at, ← and_assoc']\n  have cont :\n    ContinuousWithinAt f s x ∧ ContinuousWithinAt (ext_chart_at I' (f x) ∘ f) s x ↔ ContinuousWithinAt f s x :=\n    by\n    refine' ⟨fun h => h.1, fun h => ⟨h, _⟩⟩\n    have h₂ := (chart_at H' (f x)).continuous_to_fun.continuous_within_at (mem_chart_source _ _)\n    refine' ((I'.continuous_at.comp_continuous_within_at h₂).comp' h).mono_of_mem _\n    exact\n      inter_mem self_mem_nhdsWithin\n        (h.preimage_mem_nhds_within <| (chart_at _ _).open_source.mem_nhds <| mem_chart_source _ _)\n  simp_rw [cont, cont_diff_within_at_prop, ext_chart_at, local_homeomorph.extend, LocalEquiv.coe_trans,\n    model_with_corners.to_local_equiv_coe, LocalHomeomorph.coe_coe, model_with_corners_self_coe, chartAt_self_eq,\n    local_homeomorph.refl_apply, comp.left_id]\n#align cont_mdiff_within_at_iff_target cont_mdiff_within_at_iff_target\n\n",
 "cont_mdiff_within_at_iff_source_of_mem_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem cont_mdiff_within_at_iff_source_of_mem_source {x' : M} (hx' : x' ∈ (chart_at H x).source) :\n    cont_mdiff_within_at I I' n f s x' ↔\n      cont_mdiff_within_at (model_with_corners_self 𝕜 E) I' n (f ∘ (ext_chart_at I x).symm)\n        («expr ⁻¹' » (ext_chart_at I x).symm s ∩ range I) (ext_chart_at I x x') :=\n  cont_mdiff_within_at_iff_source_of_mem_maximal_atlas (chart_mem_maximal_atlas I x) hx'\n#align cont_mdiff_within_at_iff_source_of_mem_source cont_mdiff_within_at_iff_source_of_mem_source\n\n",
 "cont_mdiff_within_at_iff_source_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem cont_mdiff_within_at_iff_source_of_mem_maximal_atlas (he : e ∈ maximal_atlas I M) (hx : x ∈ e.source) :\n    cont_mdiff_within_at I I' n f s x ↔\n      cont_mdiff_within_at (model_with_corners_self 𝕜 E) I' n (f ∘ (e.extend I).symm)\n        («expr ⁻¹' » (e.extend I).symm s ∩ range I) (e.extend I x) :=\n  by\n  have h2x := hx; rw [← e.extend_source I] at h2x\n  simp_rw [cont_mdiff_within_at,\n    (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_indep_chart_source he hx,\n    StructureGroupoid.liftPropWithinAt_self_source, e.extend_symm_continuous_within_at_comp_right_iff,\n    cont_diff_within_at_prop_self_source, cont_diff_within_at_prop, Function.comp, e.left_inv hx,\n    (e.extend I).left_inv h2x]\n  rfl\n#align cont_mdiff_within_at_iff_source_of_mem_maximal_atlas cont_mdiff_within_at_iff_source_of_mem_maximal_atlas\n\n",
 "cont_mdiff_within_at_iff_of_mem_source'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem cont_mdiff_within_at_iff_of_mem_source' {x' : M} {y : M'} (hx : x' ∈ (chart_at H x).source)\n    (hy : f x' ∈ (chart_at H' y).source) :\n    cont_mdiff_within_at I I' n f s x' ↔\n      ContinuousWithinAt f s x' ∧\n        cont_diff_within_at 𝕜 n (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm)\n          ((ext_chart_at I x).target ∩\n            «expr ⁻¹' » (ext_chart_at I x).symm (s ∩ «expr ⁻¹' » f (ext_chart_at I' y).source))\n          (ext_chart_at I x x') :=\n  by\n  refine' (cont_mdiff_within_at_iff_of_mem_source hx hy).trans _\n  rw [← ext_chart_at_source I] at hx\n  rw [← ext_chart_at_source I'] at hy\n  rw [and_congr_right_iff]\n  set e := ext_chart_at I x; set e' := ext_chart_at I' (f x)\n  refine' fun hc => cont_diff_within_at_congr_nhds _\n  rw [← e.image_source_inter_eq', ← map_ext_chart_at_nhds_within_eq_image' I x hx, ←\n    map_ext_chart_at_nhds_within' I x hx, inter_comm, nhdsWithin_inter_of_mem]\n  exact hc (ext_chart_at_source_mem_nhds' _ _ hy)\n#align cont_mdiff_within_at_iff_of_mem_source' cont_mdiff_within_at_iff_of_mem_source'\n\n",
 "cont_mdiff_within_at_iff_of_mem_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- One can reformulate smoothness within a set at a point as continuity within this set at this\npoint, and smoothness in any chart containing that point. -/\ntheorem cont_mdiff_within_at_iff_of_mem_source {x' : M} {y : M'} (hx : x' ∈ (chart_at H x).source)\n    (hy : f x' ∈ (chart_at H' y).source) :\n    cont_mdiff_within_at I I' n f s x' ↔\n      ContinuousWithinAt f s x' ∧\n        cont_diff_within_at 𝕜 n (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm)\n          («expr ⁻¹' » (ext_chart_at I x).symm s ∩ range I) (ext_chart_at I x x') :=\n  cont_mdiff_within_at_iff_of_mem_maximal_atlas (chart_mem_maximal_atlas _ x) (chart_mem_maximal_atlas _ y) hx hy\n#align cont_mdiff_within_at_iff_of_mem_source cont_mdiff_within_at_iff_of_mem_source\n\n",
 "cont_mdiff_within_at_iff_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem cont_mdiff_within_at_iff_of_mem_maximal_atlas {x : M} (he : e ∈ maximal_atlas I M)\n    (he' : e' ∈ maximal_atlas I' M') (hx : x ∈ e.source) (hy : f x ∈ e'.source) :\n    cont_mdiff_within_at I I' n f s x ↔\n      ContinuousWithinAt f s x ∧\n        cont_diff_within_at 𝕜 n (e'.extend I' ∘ f ∘ (e.extend I).symm) («expr ⁻¹' » (e.extend I).symm s ∩ range I)\n          (e.extend I x) :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_indep_chart he hx he' hy\n#align cont_mdiff_within_at_iff_of_mem_maximal_atlas cont_mdiff_within_at_iff_of_mem_maximal_atlas\n\n",
 "cont_mdiff_within_at_iff_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\ntheorem cont_mdiff_within_at_iff_nat :\n    cont_mdiff_within_at I I' n f s x ↔ ∀ m : ℕ, (m : «exprℕ∞») ≤ n → cont_mdiff_within_at I I' m f s x :=\n  by\n  refine' ⟨fun h m hm => h.of_le hm, fun h => _⟩\n  cases n\n  · exact cont_mdiff_within_at_top.2 fun n => h n le_top\n  · exact h n le_rfl\n#align cont_mdiff_within_at_iff_nat cont_mdiff_within_at_iff_nat\n\n",
 "cont_mdiff_within_at_iff_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- An alternative formulation of `cont_mdiff_within_at_iff_of_mem_maximal_atlas`\n  if the set if `s` lies in `e.source`. -/\ntheorem cont_mdiff_within_at_iff_image {x : M} (he : e ∈ maximal_atlas I M) (he' : e' ∈ maximal_atlas I' M')\n    (hs : s ⊆ e.source) (hx : x ∈ e.source) (hy : f x ∈ e'.source) :\n    cont_mdiff_within_at I I' n f s x ↔\n      ContinuousWithinAt f s x ∧\n        cont_diff_within_at 𝕜 n (e'.extend I' ∘ f ∘ (e.extend I).symm) («expr '' » (e.extend I) s) (e.extend I x) :=\n  by\n  rw [cont_mdiff_within_at_iff_of_mem_maximal_atlas he he' hx hy, and_congr_right_iff]\n  refine' fun hf => cont_diff_within_at_congr_nhds _\n  simp_rw [nhdsWithin_eq_iff_eventuallyEq, e.extend_symm_preimage_inter_range_eventually_eq I hs hx]\n#align cont_mdiff_within_at_iff_image cont_mdiff_within_at_iff_image\n\n",
 "cont_mdiff_within_at_iff_cont_mdiff_on_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- A function is `C^n` within a set at a point, for `n : ℕ`, if and only if it is `C^n` on\na neighborhood of this point. -/\ntheorem cont_mdiff_within_at_iff_cont_mdiff_on_nhds {n : ℕ} :\n    cont_mdiff_within_at I I' n f s x ↔ ∃ u ∈ nhds_within (insert x s) x, cont_mdiff_on I I' n f u :=\n  by\n  constructor\n  · intro h\n    -- the property is true in charts. We will pull such a good neighborhood in the chart to the\n    -- manifold. For this, we need to restrict to a small enough set where everything makes sense\n    obtain ⟨o, o_open, xo, ho, h'o⟩ :\n      ∃ o : Set M, IsOpen o ∧ x ∈ o ∧ o ⊆ (chart_at H x).source ∧ o ∩ s ⊆ «expr ⁻¹' » f (chart_at H' (f x)).source :=\n      by\n      have : (chart_at H' (f x)).source ∈ (nhds) (f x) :=\n        IsOpen.mem_nhds (local_homeomorph.open_source _) (mem_chart_source H' (f x))\n      rcases mem_nhdsWithin.1 (h.1.preimage_mem_nhds_within this) with ⟨u, u_open, xu, hu⟩\n      refine' ⟨u ∩ (chart_at H x).source, _, ⟨xu, mem_chart_source _ _⟩, _, _⟩\n      · exact IsOpen.inter u_open (local_homeomorph.open_source _)\n      · intro y hy\n        exact hy.2\n      · intro y hy\n        exact hu ⟨hy.1.1, hy.2⟩\n    have h' : cont_mdiff_within_at I I' n f (s ∩ o) x := h.mono (inter_subset_left _ _)\n    simp only [cont_mdiff_within_at, lift_prop_within_at, cont_diff_within_at_prop] at h'\n    -- let `u` be a good neighborhood in the chart where the function is smooth\n    rcases h.2.cont_diff_on le_rfl with ⟨u, u_nhds, u_subset, hu⟩\n    -- pull it back to the manifold, and intersect with a suitable neighborhood of `x`, to get the\n    -- desired good neighborhood `v`.\n    let v := insert x s ∩ o ∩ «expr ⁻¹' » (ext_chart_at I x) u\n    have v_incl : v ⊆ (chart_at H x).source := fun y hy => ho hy.1.2\n    have v_incl' : ∀ y ∈ v, f y ∈ (chart_at H' (f x)).source :=\n      by\n      intro y hy\n      rcases hy.1.1 with (rfl | h')\n      · simp only [mfld_simps]\n      · apply h'o ⟨hy.1.2, h'⟩\n    refine' ⟨v, _, _⟩\n    show v ∈ nhds_within (insert x s) x\n    · rw [nhdsWithin_restrict _ xo o_open]\n      refine' Filter.inter_mem self_mem_nhdsWithin _\n      suffices : u ∈ nhds_within («expr '' » (ext_chart_at I x) (insert x s ∩ o)) (ext_chart_at I x x)\n      exact (continuous_at_ext_chart_at I x).continuous_within_at.preimage_mem_nhds_within' this\n      apply nhdsWithin_mono _ _ u_nhds\n      rw [image_subset_iff]\n      intro y hy\n      rcases hy.1 with (rfl | h')\n      · simp only [mem_insert_iff, mfld_simps]\n      · simp only [mem_insert_iff, ho hy.2, h', h'o ⟨hy.2, h'⟩, mfld_simps]\n    show cont_mdiff_on I I' n f v\n    · intro y hy\n      have : ContinuousWithinAt f v y :=\n        by\n        apply\n          (((continuous_on_ext_chart_at_symm I' (f x) _ _).comp' (hu _ hy.2).continuous_within_at).comp'\n              (continuous_on_ext_chart_at I x _ _)).congr_mono\n        · intro z hz\n          simp only [v_incl hz, v_incl' z hz, mfld_simps]\n        · intro z hz\n          simp only [v_incl hz, v_incl' z hz, mfld_simps]\n          exact hz.2\n        · simp only [v_incl hy, v_incl' y hy, mfld_simps]\n        · simp only [v_incl hy, v_incl' y hy, mfld_simps]\n        · simp only [v_incl hy, mfld_simps]\n      refine' (cont_mdiff_within_at_iff_of_mem_source' (v_incl hy) (v_incl' y hy)).mpr ⟨this, _⟩\n      · apply hu.mono\n        · intro z hz\n          simp only [v, mfld_simps] at hz\n          have : I ((chart_at H x) ((chart_at H x).symm (I.symm z))) ∈ u := by simp only [hz]\n          simpa only [hz, mfld_simps] using this\n        · have exty : I (chart_at H x y) ∈ u := hy.2\n          simp only [v_incl hy, v_incl' y hy, exty, hy.1.1, hy.1.2, mfld_simps]\n  · rintro ⟨u, u_nhds, hu⟩\n    have : cont_mdiff_within_at I I' (↑n) f (insert x s ∩ u) x :=\n      haveI : x ∈ insert x s := mem_insert x s\n      hu.mono (inter_subset_right _ _) _ ⟨this, mem_of_mem_nhdsWithin this u_nhds⟩\n    rw [cont_mdiff_within_at_inter' u_nhds] at this\n    exact this.mono (subset_insert x s)\n#align cont_mdiff_within_at_iff_cont_mdiff_on_nhds cont_mdiff_within_at_iff_cont_mdiff_on_nhds\n\n",
 "cont_mdiff_within_at_iff_cont_diff_within_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_within_at_iff_cont_diff_within_at {f : E → E'} {s : Set E} {x : E} :\n    cont_mdiff_within_at (model_with_corners_self 𝕜 E) (model_with_corners_self 𝕜 E') n f s x ↔\n      cont_diff_within_at 𝕜 n f s x :=\n  by\n  simp (config := { contextual := true }) only [cont_mdiff_within_at, lift_prop_within_at, cont_diff_within_at_prop,\n    iff_def, mfld_simps]\n  exact cont_diff_within_at.continuous_within_at\n#align cont_mdiff_within_at_iff_cont_diff_within_at cont_mdiff_within_at_iff_cont_diff_within_at\n\n",
 "cont_mdiff_within_at_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- One can reformulate smoothness within a set at a point as continuity within this set at this\npoint, and smoothness in the corresponding extended chart. This form states smoothness of `f`\nwritten in such a way that the set is restricted to lie within the domain/codomain of the\ncorresponding charts.\nEven though this expression is more complicated than the one in `cont_mdiff_within_at_iff`, it is\na smaller set, but their germs at `ext_chart_at I x x` are equal. It is sometimes useful to rewrite\nusing this in the goal.\n-/\ntheorem cont_mdiff_within_at_iff' :\n    cont_mdiff_within_at I I' n f s x ↔\n      ContinuousWithinAt f s x ∧\n        cont_diff_within_at 𝕜 n (ext_chart_at I' (f x) ∘ f ∘ (ext_chart_at I x).symm)\n          ((ext_chart_at I x).target ∩\n            «expr ⁻¹' » (ext_chart_at I x).symm (s ∩ «expr ⁻¹' » f (ext_chart_at I' (f x)).source))\n          (ext_chart_at I x x) :=\n  by\n  rw [cont_mdiff_within_at_iff, and_congr_right_iff]\n  set e := ext_chart_at I x; set e' := ext_chart_at I' (f x)\n  refine' fun hc => cont_diff_within_at_congr_nhds _\n  rw [← e.image_source_inter_eq', ← map_ext_chart_at_nhds_within_eq_image, ← map_ext_chart_at_nhds_within, inter_comm,\n    nhdsWithin_inter_of_mem]\n  exact hc (ext_chart_at_source_mem_nhds _ _)\n#align cont_mdiff_within_at_iff' cont_mdiff_within_at_iff'\n\n",
 "cont_mdiff_within_at_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem filter.eventually_eq.cont_mdiff_within_at_iff (h₁ : «expr =ᶠ[ ] » f₁ (nhds_within s x) f) (hx : f₁ x = f x) :\n    cont_mdiff_within_at I I' n f₁ s x ↔ cont_mdiff_within_at I I' n f s x :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_congr_iff_of_eventually_eq h₁ hx\n#align filter.eventually_eq.cont_mdiff_within_at_iff filter.eventually_eq.cont_mdiff_within_at_iff\n\n",
 "cont_mdiff_within_at_id":
 "theorem cont_mdiff_within_at_id : cont_mdiff_within_at I I n (id : M → M) s x :=\n  cont_mdiff_at_id.cont_mdiff_within_at\n#align cont_mdiff_within_at_id cont_mdiff_within_at_id\n\n",
 "cont_mdiff_within_at_fst":
 "theorem cont_mdiff_within_at_fst {s : Set (M × N)} {p : M × N} : cont_mdiff_within_at (I.prod J) I n Prod.fst s p :=\n  by\n  rw [cont_mdiff_within_at_iff']\n  refine' ⟨continuousWithinAt_fst, _⟩\n  refine' cont_diff_within_at_fst.congr (fun y hy => _) _\n  · simp only [mfld_simps] at hy\n    simp only [hy, mfld_simps]\n  · simp only [mfld_simps]\n#align cont_mdiff_within_at_fst cont_mdiff_within_at_fst\n\n",
 "cont_mdiff_within_at_const":
 "theorem cont_mdiff_within_at_const : cont_mdiff_within_at I I' n (fun x : M => c) s x :=\n  cont_mdiff_at_const.cont_mdiff_within_at\n#align cont_mdiff_within_at_const cont_mdiff_within_at_const\n\n",
 "cont_mdiff_within_at_congr_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem cont_mdiff_within_at_congr_nhds (hst : nhds_within s x = nhds_within t x) :\n    cont_mdiff_within_at I I' n f s x ↔ cont_mdiff_within_at I I' n f t x :=\n  ⟨fun h => h.mono_of_mem <| hst ▸ self_mem_nhdsWithin, fun h => h.mono_of_mem <| hst.symm ▸ self_mem_nhdsWithin⟩\n#align cont_mdiff_within_at_congr_nhds cont_mdiff_within_at_congr_nhds\n\n",
 "cont_mdiff_within_at_congr":
 "theorem cont_mdiff_within_at_congr (h₁ : ∀ y ∈ s, f₁ y = f y) (hx : f₁ x = f x) :\n    cont_mdiff_within_at I I' n f₁ s x ↔ cont_mdiff_within_at I I' n f s x :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_congr_iff h₁ hx\n#align cont_mdiff_within_at_congr cont_mdiff_within_at_congr\n\n",
 "cont_mdiff_within_at":
 "theorem cont_mdiff_at.cont_mdiff_within_at (hf : cont_mdiff_at I I' n f x) : cont_mdiff_within_at I I' n f s x :=\n  cont_mdiff_within_at.mono hf (subset_univ _)\n#align cont_mdiff_at.cont_mdiff_within_at cont_mdiff_at.cont_mdiff_within_at\n\n",
 "cont_mdiff_top":
 "theorem cont_mdiff_top : smooth I I' f ↔ ∀ n : ℕ, cont_mdiff I I' n f :=\n  ⟨fun h n => h.of_le le_top, fun h x => cont_mdiff_within_at_top.2 fun n => h n x⟩\n#align cont_mdiff_top cont_mdiff_top\n\n",
 "cont_mdiff_snd":
 "theorem cont_mdiff_snd : cont_mdiff (I.prod J) J n (@Prod.snd M N) := fun x => cont_mdiff_at_snd\n#align cont_mdiff_snd cont_mdiff_snd\n\n",
 "cont_mdiff_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_pi_space :\n    cont_mdiff I (model_with_corners_self 𝕜 (∀ i, Fi i)) n φ ↔\n      ∀ i, cont_mdiff I (model_with_corners_self 𝕜 (Fi i)) n fun x => φ x i :=\n  ⟨fun h i x => cont_mdiff_at_pi_space.1 (h x) i, fun h x => cont_mdiff_at_pi_space.2 fun i => h i x⟩\n#align cont_mdiff_pi_space cont_mdiff_pi_space\n\n",
 "cont_mdiff_one":
 "@[to_additive]\ntheorem cont_mdiff_one [One M'] : cont_mdiff I I' n (1 : M → M') := by simp only [Pi.one_def, cont_mdiff_const]\n#align cont_mdiff_one cont_mdiff_one\n\n",
 "cont_mdiff_on_univ":
 "theorem cont_mdiff_on_univ : cont_mdiff_on I I' n f univ ↔ cont_mdiff I I' n f := by\n  simp only [cont_mdiff_on, cont_mdiff, cont_mdiff_within_at_univ, forall_prop_of_true, mem_univ]\n#align cont_mdiff_on_univ cont_mdiff_on_univ\n\n",
 "cont_mdiff_on_top":
 "theorem cont_mdiff_on_top : smooth_on I I' f s ↔ ∀ n : ℕ, cont_mdiff_on I I' n f s :=\n  ⟨fun h n => h.of_le le_top, fun h x hx => cont_mdiff_within_at_top.2 fun n => h n x hx⟩\n#align cont_mdiff_on_top cont_mdiff_on_top\n\n",
 "cont_mdiff_on_symm_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `with_top.nat.top -/\n/-- The inverse of an atlas member is `C^n` for any `n`. -/\ntheorem cont_mdiff_on_symm_of_mem_maximal_atlas (h : e ∈ maximal_atlas I M) : cont_mdiff_on I I n e.symm e.target :=\n  cont_mdiff_on.of_le\n    ((cont_diff_within_at_local_invariant_prop I I (with_top.nat.top)).lift_prop_on_symm_of_mem_maximal_atlas\n      (cont_diff_within_at_prop_id I) h)\n    le_top\n#align cont_mdiff_on_symm_of_mem_maximal_atlas cont_mdiff_on_symm_of_mem_maximal_atlas\n\n",
 "cont_mdiff_on_snd":
 "theorem cont_mdiff_on_snd {s : Set (M × N)} : cont_mdiff_on (I.prod J) J n Prod.snd s := fun x hx =>\n  cont_mdiff_within_at_snd\n#align cont_mdiff_on_snd cont_mdiff_on_snd\n\n",
 "cont_mdiff_on_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_on_pi_space :\n    cont_mdiff_on I (model_with_corners_self 𝕜 (∀ i, Fi i)) n φ s ↔\n      ∀ i, cont_mdiff_on I (model_with_corners_self 𝕜 (Fi i)) n (fun x => φ x i) s :=\n  ⟨fun h i x hx => cont_mdiff_within_at_pi_space.1 (h x hx) i, fun h x hx =>\n    cont_mdiff_within_at_pi_space.2 fun i => h i x hx⟩\n#align cont_mdiff_on_pi_space cont_mdiff_on_pi_space\n\n",
 "cont_mdiff_on_one":
 "@[to_additive]\ntheorem cont_mdiff_on_one [One M'] : cont_mdiff_on I I' n (1 : M → M') s :=\n  cont_mdiff_one.cont_mdiff_on\n#align cont_mdiff_on_one cont_mdiff_on_one\n\n",
 "cont_mdiff_on_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `with_top.nat.top -/\n/-- An atlas member is `C^n` for any `n`. -/\ntheorem cont_mdiff_on_of_mem_maximal_atlas (h : e ∈ maximal_atlas I M) : cont_mdiff_on I I n e e.source :=\n  cont_mdiff_on.of_le\n    ((cont_diff_within_at_local_invariant_prop I I (with_top.nat.top)).lift_prop_on_of_mem_maximal_atlas\n      (cont_diff_within_at_prop_id I) h)\n    le_top\n#align cont_mdiff_on_of_mem_maximal_atlas cont_mdiff_on_of_mem_maximal_atlas\n\n",
 "cont_mdiff_on_of_mem_cont_diff_groupoid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- An element of `cont_diff_groupoid ⊤ I` is `C^n` for any `n`. -/\ntheorem cont_mdiff_on_of_mem_cont_diff_groupoid {e' : LocalHomeomorph H H} (h : e' ∈ cont_diff_groupoid («expr⊤») I) :\n    cont_mdiff_on I I n e' e'.source :=\n  (cont_diff_within_at_local_invariant_prop I I n).lift_prop_on_of_mem_groupoid (cont_diff_within_at_prop_id I) h\n#align cont_mdiff_on_of_mem_cont_diff_groupoid cont_mdiff_on_of_mem_cont_diff_groupoid\n\n",
 "cont_mdiff_on_of_locally_cont_mdiff_on":
 "/-- Being `C^n` is a local property. -/\ntheorem cont_mdiff_on_of_locally_cont_mdiff_on (h : ∀ x ∈ s, ∃ u, IsOpen u ∧ x ∈ u ∧ cont_mdiff_on I I' n f (s ∩ u)) :\n    cont_mdiff_on I I' n f s :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_on_of_locally_lift_prop_on h\n#align cont_mdiff_on_of_locally_cont_mdiff_on cont_mdiff_on_of_locally_cont_mdiff_on\n\n",
 "cont_mdiff_on_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- One can reformulate smoothness on a set as continuity on this set, and smoothness in any\nextended chart in the target. -/\ntheorem cont_mdiff_on_iff_target :\n    cont_mdiff_on I I' n f s ↔\n      ContinuousOn f s ∧\n        ∀ y : M',\n          cont_mdiff_on I (model_with_corners_self 𝕜 E') n (ext_chart_at I' y ∘ f)\n            (s ∩ «expr ⁻¹' » f (ext_chart_at I' y).source) :=\n  by\n  inhabit E'\n  simp only [cont_mdiff_on_iff, model_with_corners.source_eq, chartAt_self_eq, LocalHomeomorph.refl_localEquiv,\n    LocalEquiv.refl_trans, ext_chart_at, local_homeomorph.extend, Set.preimage_univ, Set.inter_univ,\n    and_congr_right_iff]\n  intro h\n  constructor\n  · refine' fun h' y => ⟨_, fun x _ => h' x y⟩\n    have h'' : ContinuousOn _ univ := (model_with_corners.continuous I').continuous_on\n    convert(h''.comp' (chart_at H' y).continuous_to_fun).comp' h\n    simp\n  · exact fun h' x y => (h' y).2 x default\n#align cont_mdiff_on_iff_target cont_mdiff_on_iff_target\n\n",
 "cont_mdiff_on_iff_source_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem cont_mdiff_on_iff_source_of_mem_maximal_atlas (he : e ∈ maximal_atlas I M) (hs : s ⊆ e.source) :\n    cont_mdiff_on I I' n f s ↔\n      cont_mdiff_on (model_with_corners_self 𝕜 E) I' n (f ∘ (e.extend I).symm) («expr '' » (e.extend I) s) :=\n  by\n  simp_rw [cont_mdiff_on, Set.ball_image_iff]\n  refine' forall₂_congr fun x hx => _\n  rw [cont_mdiff_within_at_iff_source_of_mem_maximal_atlas he (hs hx)]\n  apply cont_mdiff_within_at_congr_nhds\n  simp_rw [nhdsWithin_eq_iff_eventuallyEq, e.extend_symm_preimage_inter_range_eventually_eq I hs (hs hx)]\n#align cont_mdiff_on_iff_source_of_mem_maximal_atlas cont_mdiff_on_iff_source_of_mem_maximal_atlas\n\n",
 "cont_mdiff_on_iff_of_subset_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- If the set where you want `f` to be smooth lies entirely in a single chart, and `f` maps it\n  into a single chart, the smoothness of `f` on that set can be expressed by purely looking in\n  these charts.\n  Note: this lemma uses `ext_chart_at I x '' s` instead of `(ext_chart_at I x).symm ⁻¹' s` to ensure\n  that this set lies in `(ext_chart_at I x).target`. -/\ntheorem cont_mdiff_on_iff_of_subset_source {x : M} {y : M'} (hs : s ⊆ (chart_at H x).source)\n    (h2s : MapsTo f s (chart_at H' y).source) :\n    cont_mdiff_on I I' n f s ↔\n      ContinuousOn f s ∧\n        cont_diff_on 𝕜 n (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm) («expr '' » (ext_chart_at I x) s) :=\n  cont_mdiff_on_iff_of_mem_maximal_atlas (chart_mem_maximal_atlas I x) (chart_mem_maximal_atlas I' y) hs h2s\n#align cont_mdiff_on_iff_of_subset_source cont_mdiff_on_iff_of_subset_source\n\n",
 "cont_mdiff_on_iff_of_mem_maximal_atlas":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem cont_mdiff_on_iff_of_mem_maximal_atlas (he : e ∈ maximal_atlas I M) (he' : e' ∈ maximal_atlas I' M')\n    (hs : s ⊆ e.source) (h2s : MapsTo f s e'.source) :\n    cont_mdiff_on I I' n f s ↔\n      ContinuousOn f s ∧ cont_diff_on 𝕜 n (e'.extend I' ∘ f ∘ (e.extend I).symm) («expr '' » (e.extend I) s) :=\n  by\n  simp_rw [ContinuousOn, cont_diff_on, Set.ball_image_iff, ← forall_and, cont_mdiff_on]\n  exact forall₂_congr fun x hx => cont_mdiff_within_at_iff_image he he' hs (hs hx) (h2s hx)\n#align cont_mdiff_on_iff_of_mem_maximal_atlas cont_mdiff_on_iff_of_mem_maximal_atlas\n\n",
 "cont_mdiff_on_iff_cont_diff_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_on_iff_cont_diff_on {f : E → E'} {s : Set E} :\n    cont_mdiff_on (model_with_corners_self 𝕜 E) (model_with_corners_self 𝕜 E') n f s ↔ cont_diff_on 𝕜 n f s :=\n  forall_congr' <| by simp [cont_mdiff_within_at_iff_cont_diff_within_at]\n#align cont_mdiff_on_iff_cont_diff_on cont_mdiff_on_iff_cont_diff_on\n\n",
 "cont_mdiff_on_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- One can reformulate smoothness on a set as continuity on this set, and smoothness in any\nextended chart. -/\ntheorem cont_mdiff_on_iff :\n    cont_mdiff_on I I' n f s ↔\n      ContinuousOn f s ∧\n        ∀ (x : M) (y : M'),\n          cont_diff_on 𝕜 n (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm)\n            ((ext_chart_at I x).target ∩\n              «expr ⁻¹' » (ext_chart_at I x).symm (s ∩ «expr ⁻¹' » f (ext_chart_at I' y).source)) :=\n  by\n  constructor\n  · intro h\n    refine' ⟨fun x hx => (h x hx).1, fun x y z hz => _⟩\n    simp only [mfld_simps] at hz\n    let w := (ext_chart_at I x).symm z\n    have : w ∈ s := by simp only [w, hz, mfld_simps]\n    specialize h w this\n    have w1 : w ∈ (chart_at H x).source := by simp only [w, hz, mfld_simps]\n    have w2 : f w ∈ (chart_at H' y).source := by simp only [w, hz, mfld_simps]\n    convert((cont_mdiff_within_at_iff_of_mem_source w1 w2).mp h).2.mono _\n    · simp only [w, hz, mfld_simps]\n    · mfld_set_tac\n  · rintro ⟨hcont, hdiff⟩ x hx\n    refine' (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_within_at_iff.mpr _\n    refine' ⟨hcont x hx, _⟩\n    dsimp [cont_diff_within_at_prop]\n    convert hdiff x (f x) (ext_chart_at I x x) (by simp only [hx, mfld_simps]) using 1\n    mfld_set_tac\n#align cont_mdiff_on_iff cont_mdiff_on_iff\n\n",
 "cont_mdiff_on_id":
 "theorem cont_mdiff_on_id : cont_mdiff_on I I n (id : M → M) s :=\n  cont_mdiff_id.cont_mdiff_on\n#align cont_mdiff_on_id cont_mdiff_on_id\n\n",
 "cont_mdiff_on_fst":
 "theorem cont_mdiff_on_fst {s : Set (M × N)} : cont_mdiff_on (I.prod J) I n Prod.fst s := fun x hx =>\n  cont_mdiff_within_at_fst\n#align cont_mdiff_on_fst cont_mdiff_on_fst\n\n",
 "cont_mdiff_on_ext_chart_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_on_ext_chart_at :\n    cont_mdiff_on I (model_with_corners_self 𝕜 E) n (ext_chart_at I x) (chart_at H x).source := fun x' hx' =>\n  (cont_mdiff_at_ext_chart_at' hx').cont_mdiff_within_at\n#align cont_mdiff_on_ext_chart_at cont_mdiff_on_ext_chart_at\n\n",
 "cont_mdiff_on_const":
 "theorem cont_mdiff_on_const : cont_mdiff_on I I' n (fun x : M => c) s :=\n  cont_mdiff_const.cont_mdiff_on\n#align cont_mdiff_on_const cont_mdiff_on_const\n\n",
 "cont_mdiff_on_congr":
 "theorem cont_mdiff_on_congr (h₁ : ∀ y ∈ s, f₁ y = f y) : cont_mdiff_on I I' n f₁ s ↔ cont_mdiff_on I I' n f s :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_on_congr_iff h₁\n#align cont_mdiff_on_congr cont_mdiff_on_congr\n\n",
 "cont_mdiff_on_chart_symm":
 "theorem cont_mdiff_on_chart_symm : cont_mdiff_on I I n (chart_at H x).symm (chart_at H x).target :=\n  cont_mdiff_on_symm_of_mem_maximal_atlas <| chart_mem_maximal_atlas I x\n#align cont_mdiff_on_chart_symm cont_mdiff_on_chart_symm\n\n",
 "cont_mdiff_on_chart":
 "theorem cont_mdiff_on_chart : cont_mdiff_on I I n (chart_at H x) (chart_at H x).source :=\n  cont_mdiff_on_of_mem_maximal_atlas <| chart_mem_maximal_atlas I x\n#align cont_mdiff_on_chart cont_mdiff_on_chart\n\n",
 "cont_mdiff_on":
 "theorem cont_mdiff.cont_mdiff_on (hf : cont_mdiff I I' n f) : cont_mdiff_on I I' n f s := fun x hx =>\n  (hf x).cont_mdiff_within_at\n#align cont_mdiff.cont_mdiff_on cont_mdiff.cont_mdiff_on\n\n",
 "cont_mdiff_of_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_of_support {f : M → F} (hf : ∀ x ∈ tsupport f, cont_mdiff_at I (model_with_corners_self 𝕜 F) n f x) :\n    cont_mdiff I (model_with_corners_self 𝕜 F) n f := by\n  intro x\n  by_cases hx : x ∈ tsupport f\n  · exact hf x hx\n  · refine' cont_mdiff_at.congr_of_eventually_eq _ (eventuallyEq_zero_nhds.2 hx)\n    exact cont_mdiff_at_const\n#align cont_mdiff_of_support cont_mdiff_of_support\n\n",
 "cont_mdiff_of_locally_cont_mdiff_on":
 "theorem cont_mdiff_of_locally_cont_mdiff_on (h : ∀ x, ∃ u, IsOpen u ∧ x ∈ u ∧ cont_mdiff_on I I' n f u) :\n    cont_mdiff I I' n f :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_of_locally_lift_prop_on h\n#align cont_mdiff_of_locally_cont_mdiff_on cont_mdiff_of_locally_cont_mdiff_on\n\n",
 "cont_mdiff_model":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_model : cont_mdiff I (model_with_corners_self 𝕜 E) n I :=\n  by\n  intro x\n  refine' (cont_mdiff_at_iff _ _).mpr ⟨I.continuous_at, _⟩\n  simp only [mfld_simps]\n  refine' cont_diff_within_at_id.congr_of_eventually_eq _ _\n  · exact eventually_eq_of_mem self_mem_nhdsWithin fun x₂ => I.right_inv\n  simp_rw [Function.comp_apply, I.left_inv, id_def]\n#align cont_mdiff_model cont_mdiff_model\n\n",
 "cont_mdiff_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- One can reformulate smoothness as continuity and smoothness in any extended chart in the\ntarget. -/\ntheorem cont_mdiff_iff_target :\n    cont_mdiff I I' n f ↔\n      Continuous f ∧\n        ∀ y : M',\n          cont_mdiff_on I (model_with_corners_self 𝕜 E') n (ext_chart_at I' y ∘ f)\n            («expr ⁻¹' » f (ext_chart_at I' y).source) :=\n  by\n  rw [← cont_mdiff_on_univ, cont_mdiff_on_iff_target]\n  simp [continuous_iff_continuousOn_univ]\n#align cont_mdiff_iff_target cont_mdiff_iff_target\n\n",
 "cont_mdiff_iff_cont_diff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_iff_cont_diff {f : E → E'} :\n    cont_mdiff (model_with_corners_self 𝕜 E) (model_with_corners_self 𝕜 E') n f ↔ cont_diff 𝕜 n f := by\n  rw [← cont_diff_on_univ, ← cont_mdiff_on_univ, cont_mdiff_on_iff_cont_diff_on]\n#align cont_mdiff_iff_cont_diff cont_mdiff_iff_cont_diff\n\n",
 "cont_mdiff_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- One can reformulate smoothness as continuity and smoothness in any extended chart. -/\ntheorem cont_mdiff_iff :\n    cont_mdiff I I' n f ↔\n      Continuous f ∧\n        ∀ (x : M) (y : M'),\n          cont_diff_on 𝕜 n (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm)\n            ((ext_chart_at I x).target ∩\n              «expr ⁻¹' » (ext_chart_at I x).symm («expr ⁻¹' » f (ext_chart_at I' y).source)) :=\n  by simp [← cont_mdiff_on_univ, cont_mdiff_on_iff, continuous_iff_continuousOn_univ]\n#align cont_mdiff_iff cont_mdiff_iff\n\n",
 "cont_mdiff_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `with_top.nat.top -/\ntheorem cont_mdiff_id : cont_mdiff I I n (id : M → M) :=\n  cont_mdiff.of_le\n    ((cont_diff_within_at_local_invariant_prop I I (with_top.nat.top)).lift_prop_id (cont_diff_within_at_prop_id I))\n    le_top\n#align cont_mdiff_id cont_mdiff_id\n\n",
 "cont_mdiff_fst":
 "theorem cont_mdiff_fst : cont_mdiff (I.prod J) I n (@Prod.fst M N) := fun x => cont_mdiff_at_fst\n#align cont_mdiff_fst cont_mdiff_fst\n\n",
 "cont_mdiff_const":
 "theorem cont_mdiff_const : cont_mdiff I I' n fun x : M => c :=\n  by\n  intro x\n  refine' ⟨continuousWithinAt_const, _⟩\n  simp only [cont_diff_within_at_prop, (· ∘ ·)]\n  exact cont_diff_within_at_const\n#align cont_mdiff_const cont_mdiff_const\n\n",
 "cont_mdiff_at_top":
 "theorem cont_mdiff_at_top : smooth_at I I' f x ↔ ∀ n : ℕ, cont_mdiff_at I I' n f x :=\n  cont_mdiff_within_at_top\n#align cont_mdiff_at_top cont_mdiff_at_top\n\n",
 "cont_mdiff_at_symm_of_mem_maximal_atlas":
 "theorem cont_mdiff_at_symm_of_mem_maximal_atlas {x : H} (h : e ∈ maximal_atlas I M) (hx : x ∈ e.target) :\n    cont_mdiff_at I I n e.symm x :=\n  (cont_mdiff_on_symm_of_mem_maximal_atlas h).cont_mdiff_at <| e.open_target.mem_nhds hx\n#align cont_mdiff_at_symm_of_mem_maximal_atlas cont_mdiff_at_symm_of_mem_maximal_atlas\n\n",
 "cont_mdiff_at_snd":
 "theorem cont_mdiff_at_snd {p : M × N} : cont_mdiff_at (I.prod J) J n Prod.snd p :=\n  cont_mdiff_within_at_snd\n#align cont_mdiff_at_snd cont_mdiff_at_snd\n\n",
 "cont_mdiff_at_prod_iff":
 "theorem cont_mdiff_at_prod_iff (f : M → M' × N') {x : M} :\n    cont_mdiff_at I (I'.prod J') n f x ↔\n      cont_mdiff_at I I' n (Prod.fst ∘ f) x ∧ cont_mdiff_at I J' n (Prod.snd ∘ f) x :=\n  by\n  simp_rw [← cont_mdiff_within_at_univ]\n  exact cont_mdiff_within_at_prod_iff f\n#align cont_mdiff_at_prod_iff cont_mdiff_at_prod_iff\n\n",
 "cont_mdiff_at_pi_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_pi_space :\n    cont_mdiff_at I (model_with_corners_self 𝕜 (∀ i, Fi i)) n φ x ↔\n      ∀ i, cont_mdiff_at I (model_with_corners_self 𝕜 (Fi i)) n (fun x => φ x i) x :=\n  cont_mdiff_within_at_pi_space\n#align cont_mdiff_at_pi_space cont_mdiff_at_pi_space\n\n",
 "cont_mdiff_at_one":
 "@[to_additive]\ntheorem cont_mdiff_at_one [One M'] : cont_mdiff_at I I' n (1 : M → M') x :=\n  cont_mdiff_one.cont_mdiff_at\n#align cont_mdiff_at_one cont_mdiff_at_one\n\n",
 "cont_mdiff_at_of_mem_maximal_atlas":
 "theorem cont_mdiff_at_of_mem_maximal_atlas (h : e ∈ maximal_atlas I M) (hx : x ∈ e.source) : cont_mdiff_at I I n e x :=\n  (cont_mdiff_on_of_mem_maximal_atlas h).cont_mdiff_at <| e.open_source.mem_nhds hx\n#align cont_mdiff_at_of_mem_maximal_atlas cont_mdiff_at_of_mem_maximal_atlas\n\n",
 "cont_mdiff_at_iff_target_of_mem_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_iff_target_of_mem_source {x : M} {y : M'} (hy : f x ∈ (chart_at H' y).source) :\n    cont_mdiff_at I I' n f x ↔\n      ContinuousAt f x ∧ cont_mdiff_at I (model_with_corners_self 𝕜 E') n (ext_chart_at I' y ∘ f) x :=\n  by\n  rw [cont_mdiff_at, cont_mdiff_within_at_iff_target_of_mem_source hy, continuousWithinAt_univ, cont_mdiff_at]\n  infer_instance\n#align cont_mdiff_at_iff_target_of_mem_source cont_mdiff_at_iff_target_of_mem_source\n\n",
 "cont_mdiff_at_iff_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_iff_target {x : M} :\n    cont_mdiff_at I I' n f x ↔\n      ContinuousAt f x ∧ cont_mdiff_at I (model_with_corners_self 𝕜 E') n (ext_chart_at I' (f x) ∘ f) x :=\n  by rw [cont_mdiff_at, cont_mdiff_at, cont_mdiff_within_at_iff_target, continuousWithinAt_univ]\n#align cont_mdiff_at_iff_target cont_mdiff_at_iff_target\n\n",
 "cont_mdiff_at_iff_source_of_mem_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_iff_source_of_mem_source {x' : M} (hx' : x' ∈ (chart_at H x).source) :\n    cont_mdiff_at I I' n f x' ↔\n      cont_mdiff_within_at (model_with_corners_self 𝕜 E) I' n (f ∘ (ext_chart_at I x).symm) (range I)\n        (ext_chart_at I x x') :=\n  by simp_rw [cont_mdiff_at, cont_mdiff_within_at_iff_source_of_mem_source hx', preimage_univ, univ_inter]\n#align cont_mdiff_at_iff_source_of_mem_source cont_mdiff_at_iff_source_of_mem_source\n\n",
 "cont_mdiff_at_iff_of_mem_source":
 "theorem cont_mdiff_at_iff_of_mem_source {x' : M} {y : M'} (hx : x' ∈ (chart_at H x).source)\n    (hy : f x' ∈ (chart_at H' y).source) :\n    cont_mdiff_at I I' n f x' ↔\n      ContinuousAt f x' ∧\n        cont_diff_within_at 𝕜 n (ext_chart_at I' y ∘ f ∘ (ext_chart_at I x).symm) (range I) (ext_chart_at I x x') :=\n  (cont_mdiff_within_at_iff_of_mem_source hx hy).trans <| by rw [continuousWithinAt_univ, preimage_univ, univ_inter]\n#align cont_mdiff_at_iff_of_mem_source cont_mdiff_at_iff_of_mem_source\n\n",
 "cont_mdiff_at_iff_cont_mdiff_on_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A function is `C^n` at a point, for `n : ℕ`, if and only if it is `C^n` on\na neighborhood of this point. -/\ntheorem cont_mdiff_at_iff_cont_mdiff_on_nhds {n : ℕ} :\n    cont_mdiff_at I I' n f x ↔ ∃ u ∈ (nhds) x, cont_mdiff_on I I' n f u := by\n  simp [← cont_mdiff_within_at_univ, cont_mdiff_within_at_iff_cont_mdiff_on_nhds, nhdsWithin_univ]\n#align cont_mdiff_at_iff_cont_mdiff_on_nhds cont_mdiff_at_iff_cont_mdiff_on_nhds\n\n",
 "cont_mdiff_at_iff_cont_mdiff_at_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Note: This does not hold for `n = ∞`. `f` being `C^∞` at `x` means that for every `n`, `f` is\n`C^n` on some neighborhood of `x`, but this neighborhood can depend on `n`. -/\ntheorem cont_mdiff_at_iff_cont_mdiff_at_nhds {n : ℕ} :\n    cont_mdiff_at I I' n f x ↔\n      «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" ((nhds) x)\n        (cont_mdiff_at I I' n f x') :=\n  by\n  refine' ⟨_, fun h => h.self_of_nhds⟩\n  rw [cont_mdiff_at_iff_cont_mdiff_on_nhds]\n  rintro ⟨u, hu, h⟩\n  refine' (eventually_mem_nhds.mpr hu).mono fun x' hx' => _\n  exact (h x' <| mem_of_mem_nhds hx').cont_mdiff_at hx'\n#align cont_mdiff_at_iff_cont_mdiff_at_nhds cont_mdiff_at_iff_cont_mdiff_at_nhds\n\n",
 "cont_mdiff_at_iff_cont_diff_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_iff_cont_diff_at {f : E → E'} {x : E} :\n    cont_mdiff_at (model_with_corners_self 𝕜 E) (model_with_corners_self 𝕜 E') n f x ↔ cont_diff_at 𝕜 n f x := by\n  rw [← cont_mdiff_within_at_univ, cont_mdiff_within_at_iff_cont_diff_within_at, cont_diff_within_at_univ]\n#align cont_mdiff_at_iff_cont_diff_at cont_mdiff_at_iff_cont_diff_at\n\n",
 "cont_mdiff_at_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem filter.eventually_eq.cont_mdiff_at_iff (h₁ : «expr =ᶠ[ ] » f₁ ((nhds) x) f) :\n    cont_mdiff_at I I' n f₁ x ↔ cont_mdiff_at I I' n f x :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_at_congr_iff_of_eventually_eq h₁\n#align filter.eventually_eq.cont_mdiff_at_iff filter.eventually_eq.cont_mdiff_at_iff\n\n",
 "cont_mdiff_at_id":
 "theorem cont_mdiff_at_id : cont_mdiff_at I I n (id : M → M) x :=\n  cont_mdiff_id.cont_mdiff_at\n#align cont_mdiff_at_id cont_mdiff_at_id\n\n",
 "cont_mdiff_at_fst":
 "theorem cont_mdiff_at_fst {p : M × N} : cont_mdiff_at (I.prod J) I n Prod.fst p :=\n  cont_mdiff_within_at_fst\n#align cont_mdiff_at_fst cont_mdiff_at_fst\n\n",
 "cont_mdiff_at_extend":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_extend {x : M} (he : e ∈ maximal_atlas I M) (hx : x ∈ e.source) :\n    cont_mdiff_at I (model_with_corners_self 𝕜 E) n (e.extend I) x :=\n  (cont_mdiff_model _).comp x <| cont_mdiff_at_of_mem_maximal_atlas he hx\n#align cont_mdiff_at_extend cont_mdiff_at_extend\n\n",
 "cont_mdiff_at_ext_chart_at'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_ext_chart_at' {x' : M} (h : x' ∈ (chart_at H x).source) :\n    cont_mdiff_at I (model_with_corners_self 𝕜 E) n (ext_chart_at I x) x' :=\n  cont_mdiff_at_extend (chart_mem_maximal_atlas I x) h\n#align cont_mdiff_at_ext_chart_at' cont_mdiff_at_ext_chart_at'\n\n",
 "cont_mdiff_at_ext_chart_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff_at_ext_chart_at : cont_mdiff_at I (model_with_corners_self 𝕜 E) n (ext_chart_at I x) x :=\n  cont_mdiff_at_ext_chart_at' <| mem_chart_source H x\n#align cont_mdiff_at_ext_chart_at cont_mdiff_at_ext_chart_at\n\n",
 "cont_mdiff_at_const":
 "theorem cont_mdiff_at_const : cont_mdiff_at I I' n (fun x : M => c) x :=\n  cont_mdiff_const.cont_mdiff_at\n#align cont_mdiff_at_const cont_mdiff_at_const\n\n",
 "cont_mdiff_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem cont_mdiff_on.cont_mdiff_at (h : cont_mdiff_on I I' n f s) (hx : s ∈ (nhds) x) : cont_mdiff_at I I' n f x :=\n  (h x (mem_of_mem_nhds hx)).cont_mdiff_at hx\n#align cont_mdiff_on.cont_mdiff_at cont_mdiff_on.cont_mdiff_at\n\n",
 "cont_mdiff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem continuous_linear_map.cont_mdiff (L : «expr →L[ ] » E 𝕜 F) :\n    cont_mdiff (model_with_corners_self 𝕜 E) (model_with_corners_self 𝕜 F) n L :=\n  L.cont_diff.cont_mdiff\n#align continuous_linear_map.cont_mdiff continuous_linear_map.cont_mdiff\n\n",
 "cont_diff_within_at_prop_self_target":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem cont_diff_within_at_prop_self_target {f : H → E'} {s : Set H} {x : H} :\n    cont_diff_within_at_prop I (model_with_corners_self 𝕜 E') n f s x ↔\n      cont_diff_within_at 𝕜 n (f ∘ I.symm) («expr ⁻¹' » I.symm s ∩ range I) (I x) :=\n  iff.rfl\n#align cont_diff_within_at_prop_self_target cont_diff_within_at_prop_self_target\n\n",
 "cont_diff_within_at_prop_self_source":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/-\nCopyright (c) 2020 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel, Floris van Doorn\n-/\n-- declare a smooth manifold `M` over the pair `(E, H)`.\n-- declare a smooth manifold `M'` over the pair `(E', H')`.\n-- declare a manifold `M''` over the pair `(E'', H'')`.\n-- declare a smooth manifold `N` over the pair `(F, G)`.\n-- declare a smooth manifold `N'` over the pair `(F', G')`.\n-- F₁, F₂, F₃, F₄ are normed spaces\n-- declare functions, sets, points and smoothness indices\ntheorem cont_diff_within_at_prop_self_source {f : E → H'} {s : Set E} {x : E} :\n    cont_diff_within_at_prop (model_with_corners_self 𝕜 E) I' n f s x ↔ cont_diff_within_at 𝕜 n (I' ∘ f) s x :=\n  by\n  simp_rw [cont_diff_within_at_prop, model_with_corners_self_coe, range_id, inter_univ]\n  rfl\n#align cont_diff_within_at_prop_self_source cont_diff_within_at_prop_self_source\n\n",
 "cont_diff_within_at_prop_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_diff_within_at_prop_self {f : E → E'} {s : Set E} {x : E} :\n    cont_diff_within_at_prop (model_with_corners_self 𝕜 E) (model_with_corners_self 𝕜 E') n f s x ↔\n      cont_diff_within_at 𝕜 n f s x :=\n  cont_diff_within_at_prop_self_source (model_with_corners_self 𝕜 E')\n#align cont_diff_within_at_prop_self cont_diff_within_at_prop_self\n\n",
 "cont_diff_within_at_prop_mono_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem cont_diff_within_at_prop_mono_of_mem (n : «exprℕ∞») ⦃s x t⦄ ⦃f : H → H'⦄ (hts : s ∈ nhds_within t x)\n    (h : cont_diff_within_at_prop I I' n f s x) : cont_diff_within_at_prop I I' n f t x :=\n  by\n  refine' h.mono_of_mem _\n  refine' inter_mem _ (mem_of_superset self_mem_nhdsWithin <| inter_subset_right _ _)\n  rwa [← Filter.mem_map, ← I.image_eq, I.symm_map_nhds_within_image]\n#align cont_diff_within_at_prop_mono_of_mem cont_diff_within_at_prop_mono_of_mem\n\n",
 "cont_diff_within_at_prop_id":
 "theorem cont_diff_within_at_prop_id (x : H) : cont_diff_within_at_prop I I n id univ x :=\n  by\n  simp [cont_diff_within_at_prop]\n  have : cont_diff_within_at 𝕜 n id (range I) (I x) := cont_diff_id.cont_diff_at.cont_diff_within_at\n  apply this.congr fun y hy => _\n  · simp only [mfld_simps]\n  · simp only [model_with_corners.right_inv I hy, mfld_simps]\n#align cont_diff_within_at_prop_id cont_diff_within_at_prop_id\n\n",
 "cont_diff_within_at_local_invariant_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `with_top.nat.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `with_top.nat.top -/\n/-- Being `Cⁿ` in the model space is a local property, invariant under smooth maps. Therefore,\nit will lift nicely to manifolds. -/\ntheorem cont_diff_within_at_local_invariant_prop (n : «exprℕ∞») :\n    (cont_diff_groupoid (with_top.nat.top) I).local_invariant_prop (cont_diff_groupoid (with_top.nat.top) I')\n      (cont_diff_within_at_prop I I' n) :=\n  { is_local := by\n      intro s x u f u_open xu\n      have : «expr ⁻¹' » I.symm (s ∩ u) ∩ range I = «expr ⁻¹' » I.symm s ∩ range I ∩ «expr ⁻¹' » I.symm u := by\n        simp only [inter_right_comm, preimage_inter]\n      rw [cont_diff_within_at_prop, cont_diff_within_at_prop, this]\n      symm\n      apply cont_diff_within_at_inter\n      have : u ∈ (nhds) (I.symm (I x)) := by\n        rw [model_with_corners.left_inv]\n        exact IsOpen.mem_nhds u_open xu\n      apply ContinuousAt.preimage_mem_nhds I.continuous_symm.continuous_at this\n    right_invariance' := by\n      intro s x f e he hx h\n      rw [cont_diff_within_at_prop] at h⊢\n      have : I x = (I ∘ e.symm ∘ I.symm) (I (e x)) := by simp only [hx, mfld_simps]\n      rw [this] at h\n      have : I (e x) ∈ «expr ⁻¹' » I.symm e.target ∩ range I := by simp only [hx, mfld_simps]\n      have := ((mem_groupoid_of_pregroupoid.2 he).2.cont_diff_within_at this).of_le le_top\n      convert(h.comp' _ this).mono_of_mem _ using 1\n      · ext y\n        simp only [mfld_simps]\n      refine'\n        mem_nhds_within.mpr\n          ⟨«expr ⁻¹' » I.symm e.target, e.open_target.preimage I.continuous_symm, by\n            simp_rw [mem_preimage, I.left_inv, e.maps_to hx], _⟩\n      mfld_set_tac\n    congr_of_forall := by\n      intro s x f g h hx hf\n      apply hf.congr\n      · intro y hy\n        simp only [mfld_simps] at hy\n        simp only [h, hy, mfld_simps]\n      · simp only [hx, mfld_simps]\n    left_invariance' := by\n      intro s x f e' he' hs hx h\n      rw [cont_diff_within_at_prop] at h⊢\n      have A : (I' ∘ f ∘ I.symm) (I x) ∈ «expr ⁻¹' » I'.symm e'.source ∩ range I' := by simp only [hx, mfld_simps]\n      have := ((mem_groupoid_of_pregroupoid.2 he').1.cont_diff_within_at A).of_le le_top\n      convert this.comp _ h _\n      · ext y\n        simp only [mfld_simps]\n      · intro y hy\n        simp only [mfld_simps] at hy\n        simpa only [hy, mfld_simps] using hs hy.1 }\n#align cont_diff_within_at_local_invariant_prop cont_diff_within_at_local_invariant_prop\n\n",
 "congr_of_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem cont_mdiff_at.congr_of_eventually_eq (h : cont_mdiff_at I I' n f x) (h₁ : «expr =ᶠ[ ] » f₁ ((nhds) x) f) :\n    cont_mdiff_at I I' n f₁ x :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_at_congr_of_eventually_eq h h₁\n#align cont_mdiff_at.congr_of_eventually_eq cont_mdiff_at.congr_of_eventually_eq\n\n",
 "congr":
 "theorem cont_mdiff_on.congr (h : cont_mdiff_on I I' n f s) (h₁ : ∀ y ∈ s, f₁ y = f y) : cont_mdiff_on I I' n f₁ s :=\n  (cont_diff_within_at_local_invariant_prop I I' n).lift_prop_on_congr h h₁\n#align cont_mdiff_on.congr cont_mdiff_on.congr\n\n",
 "comp_smooth_within_at":
 "/-- `g ∘ f` is `C^∞` within `s` at `x` if `g` is `C^∞` at `f x` and\n`f` is `C^∞` within `s` at `x`. -/\ntheorem smooth_at.comp_smooth_within_at {g : M' → M''} (x : M) (hg : smooth_at I' I'' g (f x))\n    (hf : smooth_within_at I I' f s x) : smooth_within_at I I'' (g ∘ f) s x :=\n  hg.comp_cont_mdiff_within_at x hf\n#align smooth_at.comp_smooth_within_at smooth_at.comp_smooth_within_at\n\n",
 "comp_smooth_on":
 "theorem smooth.comp_smooth_on {f : M → M'} {g : M' → M''} {s : Set M} (hg : smooth I' I'' g) (hf : smooth_on I I' f s) :\n    smooth_on I I'' (g ∘ f) s :=\n  hg.smooth_on.comp hf Set.subset_preimage_univ\n#align smooth.comp_smooth_on smooth.comp_smooth_on\n\n",
 "comp_smooth":
 "theorem smooth_on.comp_smooth {t : Set M'} {g : M' → M''} (hg : smooth_on I' I'' g t) (hf : smooth I I' f)\n    (ht : ∀ x, f x ∈ t) : smooth I I'' (g ∘ f) :=\n  hg.comp_cont_mdiff hf ht\n#align smooth_on.comp_smooth smooth_on.comp_smooth\n\n",
 "comp_cont_mdiff_within_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_diff_within_at.comp_cont_mdiff_within_at {g : F → F'} {f : M → F} {s : Set M} {t : Set F} {x : M}\n    (hg : cont_diff_within_at 𝕜 n g t (f x)) (hf : cont_mdiff_within_at I (model_with_corners_self 𝕜 F) n f s x)\n    (h : s ⊆ «expr ⁻¹' » f t) : cont_mdiff_within_at I (model_with_corners_self 𝕜 F') n (g ∘ f) s x :=\n  by\n  rw [cont_mdiff_within_at_iff] at *\n  refine' ⟨hg.continuous_within_at.comp hf.1 h, _⟩\n  rw [← (ext_chart_at I x).left_inv (mem_ext_chart_source I x)] at hg\n  apply cont_diff_within_at.comp _ hg hf.2 _\n  exact (inter_subset_left _ _).trans (preimage_mono h)\n#align cont_diff_within_at.comp_cont_mdiff_within_at cont_diff_within_at.comp_cont_mdiff_within_at\n\n",
 "comp_cont_mdiff_on":
 "theorem cont_mdiff.comp_cont_mdiff_on {f : M → M'} {g : M' → M''} {s : Set M} (hg : cont_mdiff I' I'' n g)\n    (hf : cont_mdiff_on I I' n f s) : cont_mdiff_on I I'' n (g ∘ f) s :=\n  hg.cont_mdiff_on.comp hf Set.subset_preimage_univ\n#align cont_mdiff.comp_cont_mdiff_on cont_mdiff.comp_cont_mdiff_on\n\n",
 "comp_cont_mdiff_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_diff_at.comp_cont_mdiff_at {g : F → F'} {f : M → F} {x : M} (hg : cont_diff_at 𝕜 n g (f x))\n    (hf : cont_mdiff_at I (model_with_corners_self 𝕜 F) n f x) :\n    cont_mdiff_at I (model_with_corners_self 𝕜 F') n (g ∘ f) x :=\n  hg.comp_cont_mdiff_within_at hf Subset.rfl\n#align cont_diff_at.comp_cont_mdiff_at cont_diff_at.comp_cont_mdiff_at\n\n",
 "comp_cont_mdiff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_diff.comp_cont_mdiff {g : F → F'} {f : M → F} (hg : cont_diff 𝕜 n g)\n    (hf : cont_mdiff I (model_with_corners_self 𝕜 F) n f) : cont_mdiff I (model_with_corners_self 𝕜 F') n (g ∘ f) :=\n  fun x => hg.cont_diff_at.comp_cont_mdiff_at (hf x)\n#align cont_diff.comp_cont_mdiff cont_diff.comp_cont_mdiff\n\n",
 "comp'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- The composition of `C^∞` functions within domains at points is `C^∞`. -/\ntheorem smooth_within_at.comp' {t : Set M'} {g : M' → M''} (x : M) (hg : smooth_within_at I' I'' g t (f x))\n    (hf : smooth_within_at I I' f s x) : smooth_within_at I I'' (g ∘ f) (s ∩ «expr ⁻¹' » f t) x :=\n  hg.comp' x hf\n#align smooth_within_at.comp' smooth_within_at.comp'\n\n",
 "comp":
 "/-- The composition of `C^∞` functions at points is `C^∞`. -/\ntheorem smooth_at.comp {g : M' → M''} (x : M) (hg : smooth_at I' I'' g (f x)) (hf : smooth_at I I' f x) :\n    smooth_at I I'' (g ∘ f) x :=\n  hg.comp x hf\n#align smooth_at.comp smooth_at.comp\n\n",
 "clm_prod_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem cont_mdiff.clm_prod_map {g : M → «expr →L[ ] » F₁ 𝕜 F₃} {f : M → «expr →L[ ] » F₂ 𝕜 F₄}\n    (hg : cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » F₁ 𝕜 F₃)) n g)\n    (hf : cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » F₂ 𝕜 F₄)) n f) :\n    cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » (F₁ × F₂) 𝕜 (F₃ × F₄))) n fun x => (g x).prod_map (f x) :=\n  fun x => (hg x).clm_prod_map (hf x)\n#align cont_mdiff.clm_prod_map cont_mdiff.clm_prod_map\n\n",
 "clm_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\ntheorem cont_mdiff.clm_comp {g : M → «expr →L[ ] » F₁ 𝕜 F₃} {f : M → «expr →L[ ] » F₂ 𝕜 F₁}\n    (hg : cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » F₁ 𝕜 F₃)) n g)\n    (hf : cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » F₂ 𝕜 F₁)) n f) :\n    cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » F₂ 𝕜 F₃)) n fun x => (g x).comp (f x) := fun x =>\n  (hg x).clm_comp (hf x)\n#align cont_mdiff.clm_comp cont_mdiff.clm_comp\n\n",
 "clm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `model_with_corners_self -/\ntheorem cont_mdiff.clm_apply {g : M → «expr →L[ ] » F₁ 𝕜 F₂} {f : M → F₁}\n    (hg : cont_mdiff I (model_with_corners_self 𝕜 («expr →L[ ] » F₁ 𝕜 F₂)) n g)\n    (hf : cont_mdiff I (model_with_corners_self 𝕜 F₁) n f) :\n    cont_mdiff I (model_with_corners_self 𝕜 F₂) n fun x => g x (f x) := fun x => (hg x).clm_apply (hf x)\n#align cont_mdiff.clm_apply cont_mdiff.clm_apply\n\n"}