{"sum_reflection_circumcenter_weights_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- `reflection_circumcenter_weights_with_circumcenter` sums to 1. -/\n@[simp]\ntheorem sum_reflection_circumcenter_weights_with_circumcenter {n : ℕ} {i₁ i₂ : Fin (n + 1)} (h : i₁ ≠ i₂) :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (reflection_circumcenter_weights_with_circumcenter i₁ i₂ i) =\n      1 :=\n  by\n  simp_rw [sum_points_with_circumcenter, reflection_circumcenter_weights_with_circumcenter, sum_ite, sum_const,\n    filter_or, filter_eq']\n  rw [card_union_eq]\n  · simp\n  · simpa only [if_true, mem_univ, disjoint_singleton] using h\n#align sum_reflection_circumcenter_weights_with_circumcenter sum_reflection_circumcenter_weights_with_circumcenter\n\n",
 "sum_points_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- The sum of a function over `points_with_circumcenter_index`. -/\ntheorem sum_points_with_circumcenter {α : Type _} [AddCommMonoid α] {n : ℕ} (f : points_with_circumcenter_index n → α) :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\" (f i) =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (f (point_index i)) +\n        f circumcenter_index :=\n  by\n  have h : univ = insert circumcenter_index (univ.map (point_index_embedding n)) :=\n    by\n    ext x\n    refine' ⟨fun h => _, fun _ => mem_univ _⟩\n    cases' x with i\n    · exact mem_insert_of_mem (mem_map_of_mem _ (mem_univ i))\n    · exact mem_insert_self _ _\n  change\n    _ =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (f (point_index_embedding n i)) +\n        _\n  rw [add_comm, h, ← sum_map, sum_insert]\n  simp_rw [Finset.mem_map, not_exists]\n  intro x hx h\n  injection h\n#align sum_points_with_circumcenter sum_points_with_circumcenter\n\n",
 "sum_point_weights_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- `point_weights_with_circumcenter` sums to 1. -/\n@[simp]\ntheorem sum_point_weights_with_circumcenter {n : ℕ} (i : Fin (n + 1)) :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (point_weights_with_circumcenter i j) =\n      1 :=\n  by\n  convert sum_ite_eq' univ (point_index i) (Function.const _ (1 : exprℝ))\n  · ext j\n    cases j <;> simp [point_weights_with_circumcenter]\n  · simp\n#align sum_point_weights_with_circumcenter sum_point_weights_with_circumcenter\n\n",
 "sum_circumcenter_weights_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- `circumcenter_weights_with_circumcenter` sums to 1. -/\n@[simp]\ntheorem sum_circumcenter_weights_with_circumcenter (n : ℕ) :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (circumcenter_weights_with_circumcenter n i) =\n      1 :=\n  by\n  convert sum_ite_eq' univ circumcenter_index (Function.const _ (1 : exprℝ))\n  · ext ⟨j⟩ <;> simp [circumcenter_weights_with_circumcenter]\n  · simp\n#align sum_circumcenter_weights_with_circumcenter sum_circumcenter_weights_with_circumcenter\n\n",
 "sum_centroid_weights_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-- `centroid_weights_with_circumcenter` sums to 1, if the `finset` is\nnonempty. -/\n@[simp]\ntheorem sum_centroid_weights_with_circumcenter {n : ℕ} {fs : Finset (Fin (n + 1))} (h : fs.nonempty) :\n    finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (centroid_weights_with_circumcenter fs i) =\n      1 :=\n  by\n  simp_rw [sum_points_with_circumcenter, centroid_weights_with_circumcenter, add_zero, ←\n    fs.sum_centroid_weights_eq_one_of_nonempty (exprℝ) h, Set.sum_indicator_subset _ fs.subset_univ]\n  rcongr\n#align sum_centroid_weights_with_circumcenter sum_centroid_weights_with_circumcenter\n\n",
 "reflection_circumcenter_eq_affine_combination_of_points_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The reflection of the circumcenter of a simplex in an edge, in\nterms of `points_with_circumcenter`. -/\ntheorem reflection_circumcenter_eq_affine_combination_of_points_with_circumcenter {n : ℕ} (s : Simplex (exprℝ) P n)\n    {i₁ i₂ : Fin (n + 1)} (h : i₁ ≠ i₂) :\n    reflection (affineSpan (exprℝ) («expr '' » s.points {i₁, i₂})) s.circumcenter =\n      (univ : Finset (points_with_circumcenter_index n)).affine_combination (exprℝ) s.points_with_circumcenter\n        (reflection_circumcenter_weights_with_circumcenter i₁ i₂) :=\n  by\n  have hc : card ({i₁, i₂} : Finset (Fin (n + 1))) = 2 := by simp [h]\n  -- Making the next line a separate definition helps the elaborator:\n  set W : AffineSubspace (exprℝ) P := affineSpan (exprℝ) («expr '' » s.points {i₁, i₂}) with W_def\n  have h_faces : ↑(orthogonal_projection W s.circumcenter) = ↑((s.face hc).orthogonal_projection_span s.circumcenter) :=\n    by\n    apply eq_orthogonal_projection_of_eq_subspace\n    simp\n  rw [euclidean_geometry.reflection_apply, h_faces, s.orthogonal_projection_circumcenter hc, circumcenter_eq_centroid,\n    s.face_centroid_eq_centroid hc, centroid_eq_affine_combination_of_points_with_circumcenter,\n    circumcenter_eq_affine_combination_of_points_with_circumcenter, ← @vsub_eq_zero_iff_eq V, affine_combination_vsub,\n    weighted_vsub_vadd_affine_combination, affine_combination_vsub, weighted_vsub_apply, sum_points_with_circumcenter]\n  simp_rw [Pi.sub_apply, Pi.add_apply, Pi.sub_apply, sub_smul, add_smul, sub_smul, centroid_weights_with_circumcenter,\n    circumcenter_weights_with_circumcenter, reflection_circumcenter_weights_with_circumcenter, ite_smul, zero_smul,\n    sub_zero, apply_ite₂ (· + ·), add_zero, ← add_smul, hc, zero_sub, neg_smul, sub_self, add_zero]\n  convert sum_const_zero\n  norm_num\n#align reflection_circumcenter_eq_affine_combination_of_points_with_circumcenter reflection_circumcenter_eq_affine_combination_of_points_with_circumcenter\n\n",
 "points_with_circumcenter_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `points_with_circumcenter`, applied to a `point_index` value,\nequals `points` applied to that value. -/\n@[simp]\ntheorem points_with_circumcenter_point {n : ℕ} (s : Simplex (exprℝ) P n) (i : Fin (n + 1)) :\n    s.points_with_circumcenter (point_index i) = s.points i :=\n  rfl\n#align points_with_circumcenter_point points_with_circumcenter_point\n\n",
 "points_with_circumcenter_eq_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `points_with_circumcenter`, applied to `circumcenter_index`, equals the\ncircumcenter. -/\n@[simp]\ntheorem points_with_circumcenter_eq_circumcenter {n : ℕ} (s : Simplex (exprℝ) P n) :\n    s.points_with_circumcenter circumcenter_index = s.circumcenter :=\n  rfl\n#align points_with_circumcenter_eq_circumcenter points_with_circumcenter_eq_circumcenter\n\n",
 "point_eq_affine_combination_of_points_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A single vertex, in terms of `points_with_circumcenter`. -/\ntheorem point_eq_affine_combination_of_points_with_circumcenter {n : ℕ} (s : Simplex (exprℝ) P n) (i : Fin (n + 1)) :\n    s.points i =\n      (univ : Finset (points_with_circumcenter_index n)).affine_combination (exprℝ) s.points_with_circumcenter\n        (point_weights_with_circumcenter i) :=\n  by\n  rw [← points_with_circumcenter_point]\n  symm\n  refine' affine_combination_of_eq_one_of_eq_zero _ _ _ (mem_univ _) (by simp [point_weights_with_circumcenter]) _\n  intro i hi hn\n  cases i\n  · have h : i_1 ≠ i := fun h => hn (h ▸ rfl)\n    simp [point_weights_with_circumcenter, h]\n  · rfl\n#align point_eq_affine_combination_of_points_with_circumcenter point_eq_affine_combination_of_points_with_circumcenter\n\n",
 "orthogonal_projection_vadd_smul_vsub_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Adding a vector to a point in the given subspace, then taking the\northogonal projection, produces the original point if the vector is a\nmultiple of the result of subtracting a point's orthogonal projection\nfrom that point. -/\ntheorem orthogonal_projection_vadd_smul_vsub_orthogonal_projection {n : ℕ} (s : Simplex (exprℝ) P n) {p1 : P} (p2 : P)\n    (r : exprℝ) (hp : p1 ∈ affineSpan (exprℝ) (Set.range s.points)) :\n    s.orthogonal_projection_span («expr +ᵥ » («expr • » r («expr -ᵥ » p2 (s.orthogonal_projection_span p2) : V)) p1) =\n      ⟨p1, hp⟩ :=\n  orthogonal_projection_vadd_smul_vsub_orthogonal_projection _ _ _\n#align orthogonal_projection_vadd_smul_vsub_orthogonal_projection orthogonal_projection_vadd_smul_vsub_orthogonal_projection\n\n",
 "orthogonal_projection_eq_circumcenter_of_exists_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If there exists a distance that a point has from all vertices of a\nsimplex, the orthogonal projection of that point onto the subspace\nspanned by that simplex is its circumcenter.  -/\ntheorem orthogonal_projection_eq_circumcenter_of_exists_dist_eq {n : ℕ} (s : Simplex (exprℝ) P n) {p : P}\n    (hr : ∃ r, ∀ i, dist (s.points i) p = r) : ↑(s.orthogonal_projection_span p) = s.circumcenter :=\n  by\n  change ∃ r : exprℝ, ∀ i, (fun x => dist x p = r) (s.points i) at hr\n  conv at hr =>\n    congr\n    ext\n    rw [← Set.forall_range_iff]\n  rw [exists_dist_eq_iff_exists_dist_orthogonal_projection_eq (subset_affineSpan (exprℝ) _) p] at hr\n  cases' hr with r hr\n  exact s.eq_circumcenter_of_dist_eq (orthogonal_projection_mem p) fun i => hr _ (Set.mem_range_self i)\n#align orthogonal_projection_eq_circumcenter_of_exists_dist_eq orthogonal_projection_eq_circumcenter_of_exists_dist_eq\n\n",
 "orthogonal_projection_eq_circumcenter_of_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a point has the same distance from all vertices of a simplex,\nthe orthogonal projection of that point onto the subspace spanned by\nthat simplex is its circumcenter.  -/\ntheorem orthogonal_projection_eq_circumcenter_of_dist_eq {n : ℕ} (s : Simplex (exprℝ) P n) {p : P} {r : exprℝ}\n    (hr : ∀ i, dist (s.points i) p = r) : ↑(s.orthogonal_projection_span p) = s.circumcenter :=\n  s.orthogonal_projection_eq_circumcenter_of_exists_dist_eq ⟨r, hr⟩\n#align orthogonal_projection_eq_circumcenter_of_dist_eq orthogonal_projection_eq_circumcenter_of_dist_eq\n\n",
 "orthogonal_projection_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The orthogonal projection of the circumcenter onto a face is the\ncircumcenter of that face. -/\ntheorem orthogonal_projection_circumcenter {n : ℕ} (s : Simplex (exprℝ) P n) {fs : Finset (Fin (n + 1))} {m : ℕ}\n    (h : fs.card = m + 1) : ↑((s.face h).orthogonal_projection_span s.circumcenter) = (s.face h).circumcenter :=\n  haveI hr : ∃ r, ∀ i, dist ((s.face h).points i) s.circumcenter = r :=\n    by\n    use s.circumradius\n    simp [face_points]\n  orthogonal_projection_eq_circumcenter_of_exists_dist_eq _ hr\n#align orthogonal_projection_circumcenter orthogonal_projection_circumcenter\n\n",
 "mem_circumsphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All points lie in the circumsphere. -/\ntheorem mem_circumsphere {n : ℕ} (s : Simplex (exprℝ) P n) (i : Fin (n + 1)) : s.points i ∈ s.circumsphere :=\n  s.dist_circumcenter_eq_circumradius i\n#align mem_circumsphere mem_circumsphere\n\n",
 "exists_unique_dist_eq_of_insert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The induction step for the existence and uniqueness of the\ncircumcenter.  Given a nonempty set of points in a nonempty affine\nsubspace whose direction is complete, such that there is a unique\n(circumcenter, circumradius) pair for those points in that subspace,\nand a point `p` not in that subspace, there is a unique (circumcenter,\ncircumradius) pair for the set with `p` added, in the span of the\nsubspace with `p` added. -/\ntheorem exists_unique_dist_eq_of_insert {s : AffineSubspace (exprℝ) P} [CompleteSpace s.direction] {ps : Set P}\n    (hnps : ps.nonempty) {p : P} (hps : ps ⊆ s) (hp : p ∉ s)\n    (hu : ∃! cs : sphere P, cs.center ∈ s ∧ ps ⊆ (cs : Set P)) :\n    ∃! cs₂ : sphere P, cs₂.center ∈ affineSpan (exprℝ) (insert p (s : Set P)) ∧ insert p ps ⊆ (cs₂ : Set P) :=\n  by\n  haveI : Nonempty s := Set.Nonempty.to_subtype (hnps.mono hps)\n  rcases hu with ⟨⟨cc, cr⟩, ⟨hcc, hcr⟩, hcccru⟩\n  simp only at hcc hcr hcccru\n  let x := dist cc (orthogonal_projection s p)\n  let y := dist p (orthogonal_projection s p)\n  have hy0 : y ≠ 0 := dist_orthogonal_projection_ne_zero_of_not_mem hp\n  let ycc₂ := (x * x + y * y - cr * cr) / (2 * y)\n  let cc₂ := «expr +ᵥ » («expr • » (ycc₂ / y) («expr -ᵥ » p (orthogonal_projection s p) : V)) cc\n  let cr₂ := Real.sqrt (cr * cr + ycc₂ * ycc₂)\n  use ⟨cc₂, cr₂⟩\n  simp only\n  have hpo :\n    p = «expr +ᵥ » («expr • » (1 : exprℝ) («expr -ᵥ » p (orthogonal_projection s p) : V)) (orthogonal_projection s p) :=\n    by simp\n  constructor\n  · constructor\n    · refine' vadd_mem_of_mem_direction _ (mem_affineSpan (exprℝ) (Set.mem_insert_of_mem _ hcc))\n      rw [direction_affineSpan]\n      exact\n        Submodule.smul_mem _ _\n          (vsub_mem_vectorSpan (exprℝ) (Set.mem_insert _ _) (Set.mem_insert_of_mem _ (orthogonal_projection_mem _)))\n    · intro p1 hp1\n      rw [sphere.mem_coe, mem_sphere, ← mul_self_inj_of_nonneg dist_nonneg (Real.sqrt_nonneg _),\n        Real.mul_self_sqrt (add_nonneg (mul_self_nonneg _) (mul_self_nonneg _))]\n      cases hp1\n      · rw [hp1]\n        rw [hpo,\n          dist_sq_smul_orthogonal_vadd_smul_orthogonal_vadd (orthogonal_projection_mem p) hcc _ _\n            (vsub_orthogonal_projection_mem_direction_orthogonal s p),\n          ← dist_eq_norm_vsub V p, dist_comm _ cc]\n        field_simp [hy0]\n        ring\n      ·\n        rw [dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq _ (hps hp1),\n          orthogonal_projection_vadd_smul_vsub_orthogonal_projection _ _ hcc, Subtype.coe_mk,\n          dist_of_mem_subset_mk_sphere hp1 hcr, dist_eq_norm_vsub V cc₂ cc, vadd_vsub, norm_smul, ← dist_eq_norm_vsub V,\n          Real.norm_eq_abs, abs_div, abs_of_nonneg dist_nonneg, div_mul_cancel _ hy0, abs_mul_abs_self]\n  · rintro ⟨cc₃, cr₃⟩ ⟨hcc₃, hcr₃⟩\n    simp only at hcc₃ hcr₃\n    obtain ⟨t₃, cc₃', hcc₃', hcc₃''⟩ :\n      ∃ (r : exprℝ)(p0 : P)(hp0 : p0 ∈ s),\n        cc₃ = «expr +ᵥ » («expr • » r («expr -ᵥ » p ↑((orthogonal_projection s) p))) p0 :=\n      by rwa [mem_affine_span_insert_iff (orthogonal_projection_mem p)] at hcc₃\n    have hcr₃' : ∃ r, ∀ p1 ∈ ps, dist p1 cc₃ = r :=\n      ⟨cr₃, fun p1 hp1 => dist_of_mem_subset_mk_sphere (Set.mem_insert_of_mem _ hp1) hcr₃⟩\n    rw [exists_dist_eq_iff_exists_dist_orthogonal_projection_eq hps cc₃, hcc₃'',\n      orthogonal_projection_vadd_smul_vsub_orthogonal_projection _ _ hcc₃'] at hcr₃'\n    cases' hcr₃' with cr₃' hcr₃'\n    have hu := hcccru ⟨cc₃', cr₃'⟩\n    simp only at hu\n    replace hu := hu ⟨hcc₃', hcr₃'⟩\n    cases' hu with hucc hucr\n    substs hucc hucr\n    have hcr₃val : cr₃ = Real.sqrt (cr₃' * cr₃' + t₃ * y * (t₃ * y)) :=\n      by\n      cases' hnps with p0 hp0\n      have h' : ↑(⟨cc₃', hcc₃'⟩ : s) = cc₃' := rfl\n      rw [← dist_of_mem_subset_mk_sphere (Set.mem_insert_of_mem _ hp0) hcr₃, hcc₃'', ←\n        mul_self_inj_of_nonneg dist_nonneg (Real.sqrt_nonneg _),\n        Real.mul_self_sqrt (add_nonneg (mul_self_nonneg _) (mul_self_nonneg _)),\n        dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq _ (hps hp0),\n        orthogonal_projection_vadd_smul_vsub_orthogonal_projection _ _ hcc₃', h', dist_of_mem_subset_mk_sphere hp0 hcr,\n        dist_eq_norm_vsub V _ cc₃', vadd_vsub, norm_smul, ← dist_eq_norm_vsub V p, Real.norm_eq_abs, ← mul_assoc,\n        mul_comm _ (|t₃|), ← mul_assoc, abs_mul_abs_self]\n      ring\n    replace hcr₃ := dist_of_mem_subset_mk_sphere (Set.mem_insert _ _) hcr₃\n    rw [hpo, hcc₃'', hcr₃val, ← mul_self_inj_of_nonneg dist_nonneg (Real.sqrt_nonneg _),\n      dist_sq_smul_orthogonal_vadd_smul_orthogonal_vadd (orthogonal_projection_mem p) hcc₃' _ _\n        (vsub_orthogonal_projection_mem_direction_orthogonal s p),\n      dist_comm, ← dist_eq_norm_vsub V p, Real.mul_self_sqrt (add_nonneg (mul_self_nonneg _) (mul_self_nonneg _))] at\n      hcr₃\n    change x * x + _ * (y * y) = _ at hcr₃\n    rw [show x * x + (1 - t₃) * (1 - t₃) * (y * y) = x * x + y * y - 2 * y * (t₃ * y) + t₃ * y * (t₃ * y) by ring,\n      add_left_inj] at hcr₃\n    have ht₃ : t₃ = ycc₂ / y := by\n      field_simp [← hcr₃, hy0]\n      ring\n    subst ht₃\n    change cc₃ = cc₂ at hcc₃''\n    congr\n    rw [hcr₃val]\n    congr 2\n    field_simp [hy0]\n    ring\n#align exists_unique_dist_eq_of_insert exists_unique_dist_eq_of_insert\n\n",
 "exists_unique_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a finite nonempty affinely independent family of points,\nthere is a unique (circumcenter, circumradius) pair for those points\nin the affine subspace they span. -/\ntheorem _root_.affine_independent.exists_unique_dist_eq {ι : Type _} [hne : Nonempty ι] [Finite ι] {p : ι → P}\n    (ha : AffineIndependent (exprℝ) p) :\n    ∃! cs : sphere P, cs.center ∈ affineSpan (exprℝ) (Set.range p) ∧ Set.range p ⊆ (cs : Set P) :=\n  by\n  cases nonempty_fintype ι\n  induction' hn : Fintype.card ι with m hm generalizing ι\n  · exfalso\n    have h := Fintype.card_pos_iff.2 hne\n    rw [hn] at h\n    exact lt_irrefl 0 h\n  · cases m\n    · rw [Fintype.card_eq_one_iff] at hn\n      cases' hn with i hi\n      haveI : Unique ι := ⟨⟨i⟩, hi⟩\n      use ⟨p i, 0⟩\n      simp only [Set.range_unique, AffineSubspace.mem_affineSpan_singleton]\n      constructor\n      · simp_rw [hi default, Set.singleton_subset_iff, sphere.mem_coe, mem_sphere, dist_self]\n        exact ⟨rfl, rfl⟩\n      · rintro ⟨cc, cr⟩\n        simp only\n        rintro ⟨rfl, hdist⟩\n        simp_rw [Set.singleton_subset_iff, sphere.mem_coe, mem_sphere, dist_self] at hdist\n        rw [hi default, hdist]\n        exact ⟨rfl, rfl⟩\n    · have i := hne.some\n      let ι2 := { x // x ≠ i }\n      have hc : Fintype.card ι2 = m + 1 :=\n        by\n        rw [Fintype.card_of_subtype (finset.univ.filter fun x => x ≠ i)]\n        · rw [Finset.filter_not]\n          simp_rw [eq_comm]\n          rw [Finset.filter_eq, if_pos (Finset.mem_univ _), Finset.card_sdiff (Finset.subset_univ _),\n            Finset.card_singleton, Finset.card_univ, hn]\n          simp\n        · simp\n      haveI : Nonempty ι2 := Fintype.card_pos_iff.1 (hc.symm ▸ nat.zero_lt_succ _)\n      have ha2 : AffineIndependent (exprℝ) fun i2 : ι2 => p i2 := ha.subtype _\n      replace hm := hm ha2 _ hc\n      have hr : Set.range p = insert (p i) (Set.range fun i2 : ι2 => p i2) :=\n        by\n        change _ = insert _ (Set.range fun i2 : { x | x ≠ i } => p i2)\n        rw [← Set.image_eq_range, ← Set.image_univ, ← Set.image_insert_eq]\n        congr with j\n        simp [classical.em]\n      rw [hr, ← affineSpan_insert_affineSpan]\n      refine' exists_unique_dist_eq_of_insert (Set.range_nonempty _) (subset_spanPoints (exprℝ) _) _ hm\n      convert ha.not_mem_affine_span_diff i Set.univ\n      change (Set.range fun i2 : { x | x ≠ i } => p i2) = _\n      rw [← Set.image_eq_range]\n      congr with j\n      simp\n      rfl\n#align affine_independent.exists_unique_dist_eq affine_independent.exists_unique_dist_eq\n\n",
 "exists_dist_eq_iff_exists_dist_orthogonal_projection_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- There exists `r` such that `p` has distance `r` from all the\npoints of a set of points in `s` if and only if there exists (possibly\ndifferent) `r` such that its `orthogonal_projection` has that distance\nfrom all the points in that set. -/\ntheorem exists_dist_eq_iff_exists_dist_orthogonal_projection_eq {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] {ps : Set P} (hps : ps ⊆ s) (p : P) :\n    (∃ r, ∀ p1 ∈ ps, dist p1 p = r) ↔ ∃ r, ∀ p1 ∈ ps, dist p1 ↑(orthogonal_projection s p) = r :=\n  by\n  have h := dist_set_eq_iff_dist_orthogonal_projection_eq hps p\n  simp_rw [Set.pairwise_eq_iff_exists_eq] at h\n  exact h\n#align exists_dist_eq_iff_exists_dist_orthogonal_projection_eq exists_dist_eq_iff_exists_dist_orthogonal_projection_eq\n\n",
 "exists_circumsphere_eq_of_cospherical_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All n-simplices among cospherical points in an n-dimensional\nsubspace have the same circumsphere. -/\ntheorem exists_circumsphere_eq_of_cospherical_subset {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s)\n    [Nonempty s] {n : ℕ} [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = n)\n    (hc : cospherical ps) :\n    ∃ c : sphere P, ∀ sx : Simplex (exprℝ) P n, Set.range sx.points ⊆ ps → sx.circumsphere = c :=\n  by\n  obtain ⟨r, hr⟩ := exists_circumradius_eq_of_cospherical_subset h hd hc\n  obtain ⟨c, hc⟩ := exists_circumcenter_eq_of_cospherical_subset h hd hc\n  exact ⟨⟨c, r⟩, fun sx hsx => sphere.ext _ _ (hc sx hsx) (hr sx hsx)⟩\n#align exists_circumsphere_eq_of_cospherical_subset exists_circumsphere_eq_of_cospherical_subset\n\n",
 "exists_circumsphere_eq_of_cospherical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All n-simplices among cospherical points in n-space have the same\ncircumsphere. -/\ntheorem exists_circumsphere_eq_of_cospherical {ps : Set P} {n : ℕ} [FiniteDimensional (exprℝ) V]\n    (hd : finrank (exprℝ) V = n) (hc : cospherical ps) :\n    ∃ c : sphere P, ∀ sx : Simplex (exprℝ) P n, Set.range sx.points ⊆ ps → sx.circumsphere = c :=\n  by\n  haveI : Nonempty («expr⊤» : AffineSubspace (exprℝ) P) := set.univ.nonempty\n  rw [← finrank_top, ← direction_top (exprℝ) V P] at hd\n  refine' exists_circumsphere_eq_of_cospherical_subset _ hd hc\n  exact Set.subset_univ _\n#align exists_circumsphere_eq_of_cospherical exists_circumsphere_eq_of_cospherical\n\n",
 "exists_circumradius_eq_of_cospherical_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All n-simplices among cospherical points in an n-dimensional\nsubspace have the same circumradius. -/\ntheorem exists_circumradius_eq_of_cospherical_subset {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s)\n    [Nonempty s] {n : ℕ} [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = n)\n    (hc : cospherical ps) : ∃ r : exprℝ, ∀ sx : Simplex (exprℝ) P n, Set.range sx.points ⊆ ps → sx.circumradius = r :=\n  by\n  rw [cospherical_iff_exists_mem_of_finite_dimensional h] at hc\n  rcases hc with ⟨c, hc, r, hcr⟩\n  use r\n  intro sx hsxps\n  have hsx : affineSpan (exprℝ) (Set.range sx.points) = s :=\n    by\n    refine'\n      sx.independent.affine_span_eq_of_le_of_card_eq_finrank_add_one\n        (span_points_subset_coe_of_subset_coe (hsxps.trans h)) _\n    simp [hd]\n  have hc : c ∈ affineSpan (exprℝ) (Set.range sx.points) := hsx.symm ▸ hc\n  exact (sx.eq_circumradius_of_dist_eq hc fun i => hcr (sx.points i) (hsxps (Set.mem_range_self i))).symm\n#align exists_circumradius_eq_of_cospherical_subset exists_circumradius_eq_of_cospherical_subset\n\n",
 "exists_circumradius_eq_of_cospherical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All n-simplices among cospherical points in n-space have the same\ncircumradius. -/\ntheorem exists_circumradius_eq_of_cospherical {ps : Set P} {n : ℕ} [FiniteDimensional (exprℝ) V]\n    (hd : finrank (exprℝ) V = n) (hc : cospherical ps) :\n    ∃ r : exprℝ, ∀ sx : Simplex (exprℝ) P n, Set.range sx.points ⊆ ps → sx.circumradius = r :=\n  by\n  haveI : Nonempty («expr⊤» : AffineSubspace (exprℝ) P) := set.univ.nonempty\n  rw [← finrank_top, ← direction_top (exprℝ) V P] at hd\n  refine' exists_circumradius_eq_of_cospherical_subset _ hd hc\n  exact Set.subset_univ _\n#align exists_circumradius_eq_of_cospherical exists_circumradius_eq_of_cospherical\n\n",
 "exists_circumcenter_eq_of_cospherical_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All n-simplices among cospherical points in an n-dimensional\nsubspace have the same circumcenter. -/\ntheorem exists_circumcenter_eq_of_cospherical_subset {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s)\n    [Nonempty s] {n : ℕ} [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = n)\n    (hc : cospherical ps) : ∃ c : P, ∀ sx : Simplex (exprℝ) P n, Set.range sx.points ⊆ ps → sx.circumcenter = c :=\n  by\n  rw [cospherical_iff_exists_mem_of_finite_dimensional h] at hc\n  rcases hc with ⟨c, hc, r, hcr⟩\n  use c\n  intro sx hsxps\n  have hsx : affineSpan (exprℝ) (Set.range sx.points) = s :=\n    by\n    refine'\n      sx.independent.affine_span_eq_of_le_of_card_eq_finrank_add_one\n        (span_points_subset_coe_of_subset_coe (hsxps.trans h)) _\n    simp [hd]\n  have hc : c ∈ affineSpan (exprℝ) (Set.range sx.points) := hsx.symm ▸ hc\n  exact (sx.eq_circumcenter_of_dist_eq hc fun i => hcr (sx.points i) (hsxps (Set.mem_range_self i))).symm\n#align exists_circumcenter_eq_of_cospherical_subset exists_circumcenter_eq_of_cospherical_subset\n\n",
 "exists_circumcenter_eq_of_cospherical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All n-simplices among cospherical points in n-space have the same\ncircumcenter. -/\ntheorem exists_circumcenter_eq_of_cospherical {ps : Set P} {n : ℕ} [FiniteDimensional (exprℝ) V]\n    (hd : finrank (exprℝ) V = n) (hc : cospherical ps) :\n    ∃ c : P, ∀ sx : Simplex (exprℝ) P n, Set.range sx.points ⊆ ps → sx.circumcenter = c :=\n  by\n  haveI : Nonempty («expr⊤» : AffineSubspace (exprℝ) P) := set.univ.nonempty\n  rw [← finrank_top, ← direction_top (exprℝ) V P] at hd\n  refine' exists_circumcenter_eq_of_cospherical_subset _ hd hc\n  exact Set.subset_univ _\n#align exists_circumcenter_eq_of_cospherical exists_circumcenter_eq_of_cospherical\n\n",
 "eq_or_eq_reflection_of_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Suppose all distances from `p₁` and `p₂` to the points of a\nsimplex are equal, and that `p₁` and `p₂` lie in the affine span of\n`p` with the vertices of that simplex.  Then `p₁` and `p₂` are equal\nor reflections of each other in the affine span of the vertices of the\nsimplex. -/\ntheorem eq_or_eq_reflection_of_dist_eq {n : ℕ} {s : Simplex (exprℝ) P n} {p p₁ p₂ : P} {r : exprℝ}\n    (hp₁ : p₁ ∈ affineSpan (exprℝ) (insert p (Set.range s.points)))\n    (hp₂ : p₂ ∈ affineSpan (exprℝ) (insert p (Set.range s.points))) (h₁ : ∀ i, dist (s.points i) p₁ = r)\n    (h₂ : ∀ i, dist (s.points i) p₂ = r) : p₁ = p₂ ∨ p₁ = reflection (affineSpan (exprℝ) (Set.range s.points)) p₂ :=\n  by\n  let span_s := affineSpan (exprℝ) (Set.range s.points)\n  have h₁' := s.orthogonal_projection_eq_circumcenter_of_dist_eq h₁\n  have h₂' := s.orthogonal_projection_eq_circumcenter_of_dist_eq h₂\n  rw [← affineSpan_insert_affineSpan, mem_affine_span_insert_iff (orthogonal_projection_mem p)] at hp₁ hp₂\n  obtain ⟨r₁, p₁o, hp₁o, hp₁⟩ := hp₁\n  obtain ⟨r₂, p₂o, hp₂o, hp₂⟩ := hp₂\n  obtain rfl : ↑(s.orthogonal_projection_span p₁) = p₁o :=\n    by\n    subst hp₁\n    exact s.coe_orthogonal_projection_vadd_smul_vsub_orthogonal_projection hp₁o\n  rw [h₁'] at hp₁\n  obtain rfl : ↑(s.orthogonal_projection_span p₂) = p₂o :=\n    by\n    subst hp₂\n    exact s.coe_orthogonal_projection_vadd_smul_vsub_orthogonal_projection hp₂o\n  rw [h₂'] at hp₂\n  have h : s.points 0 ∈ span_s := mem_affineSpan (exprℝ) (Set.mem_range_self _)\n  have hd₁ : dist p₁ s.circumcenter * dist p₁ s.circumcenter = r * r - s.circumradius * s.circumradius :=\n    s.dist_circumcenter_sq_eq_sq_sub_circumradius h₁ h₁' h\n  have hd₂ : dist p₂ s.circumcenter * dist p₂ s.circumcenter = r * r - s.circumradius * s.circumradius :=\n    s.dist_circumcenter_sq_eq_sq_sub_circumradius h₂ h₂' h\n  rw [← hd₂, hp₁, hp₂, dist_eq_norm_vsub V _ s.circumcenter, dist_eq_norm_vsub V _ s.circumcenter, vadd_vsub, vadd_vsub,\n    ← real_inner_self_eq_norm_mul_norm, ← real_inner_self_eq_norm_mul_norm, real_inner_smul_left, real_inner_smul_left,\n    real_inner_smul_right, real_inner_smul_right, ← mul_assoc, ← mul_assoc] at hd₁\n  by_cases hp : p = s.orthogonal_projection_span p\n  · rw [simplex.orthogonal_projection_span] at hp\n    rw [hp₁, hp₂, ← hp]\n    simp only [true_or_iff, eq_self_iff_true, smul_zero, vsub_self]\n  · have hz :\n      inner.real («expr -ᵥ » p (orthogonal_projection span_s p)) («expr -ᵥ » p (orthogonal_projection span_s p)) ≠ 0 :=\n      by simpa only [ne.def, vsub_eq_zero_iff_eq, inner_self_eq_zero] using hp\n    rw [mul_left_inj' hz, mul_self_eq_mul_self_iff] at hd₁\n    rw [hp₁, hp₂]\n    cases hd₁\n    · left\n      rw [hd₁]\n    · right\n      rw [hd₁, reflection_vadd_smul_vsub_orthogonal_projection p r₂ s.circumcenter_mem_affine_span, neg_smul]\n#align eq_or_eq_reflection_of_dist_eq eq_or_eq_reflection_of_dist_eq\n\n",
 "eq_circumradius_of_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a point in the affine span from which all the points are\nequidistant, that distance is the circumradius. -/\ntheorem eq_circumradius_of_dist_eq {n : ℕ} (s : Simplex (exprℝ) P n) {p : P}\n    (hp : p ∈ affineSpan (exprℝ) (Set.range s.points)) {r : exprℝ} (hr : ∀ i, dist (s.points i) p = r) :\n    r = s.circumradius := by\n  have h := s.circumsphere_unique_dist_eq.2 ⟨p, r⟩\n  simp only [hp, hr, forall_const, eq_self_iff_true, subset_sphere, sphere.ext_iff, Set.forall_range_iff, mem_sphere,\n    true_and_iff] at h\n  exact h.2\n#align eq_circumradius_of_dist_eq eq_circumradius_of_dist_eq\n\n",
 "eq_circumcenter_of_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a point in the affine span from which all the points are\nequidistant, that point is the circumcenter. -/\ntheorem eq_circumcenter_of_dist_eq {n : ℕ} (s : Simplex (exprℝ) P n) {p : P}\n    (hp : p ∈ affineSpan (exprℝ) (Set.range s.points)) {r : exprℝ} (hr : ∀ i, dist (s.points i) p = r) :\n    p = s.circumcenter := by\n  have h := s.circumsphere_unique_dist_eq.2 ⟨p, r⟩\n  simp only [hp, hr, forall_const, eq_self_iff_true, subset_sphere, sphere.ext_iff, Set.forall_range_iff, mem_sphere,\n    true_and_iff] at h\n  exact h.1\n#align eq_circumcenter_of_dist_eq eq_circumcenter_of_dist_eq\n\n",
 "dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq {n : ℕ} (s : Simplex (exprℝ) P n)\n    {p1 : P} (p2 : P) (hp1 : p1 ∈ affineSpan (exprℝ) (Set.range s.points)) :\n    dist p1 p2 * dist p1 p2 =\n      dist p1 (s.orthogonal_projection_span p2) * dist p1 (s.orthogonal_projection_span p2) +\n        dist p2 (s.orthogonal_projection_span p2) * dist p2 (s.orthogonal_projection_span p2) :=\n  by\n  rw [pseudo_metric_space.dist_comm p2 _, dist_eq_norm_vsub V p1 _, dist_eq_norm_vsub V p1 _, dist_eq_norm_vsub V _ p2,\n    ← vsub_add_vsub_cancel p1 (s.orthogonal_projection_span p2) p2,\n    norm_add_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero]\n  exact\n    submodule.inner_right_of_mem_orthogonal (vsub_orthogonal_projection_mem_direction p2 hp1)\n      (orthogonal_projection_vsub_mem_direction_orthogonal _ p2)\n#align dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq\n\n",
 "dist_set_eq_iff_dist_orthogonal_projection_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- `p` is equidistant from a set of points in `s` if and only if its\n`orthogonal_projection` is. -/\ntheorem dist_set_eq_iff_dist_orthogonal_projection_eq {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] {ps : Set P} (hps : ps ⊆ s) (p : P) :\n    (Set.Pairwise ps fun p1 p2 => dist p1 p = dist p2 p) ↔\n      Set.Pairwise ps fun p1 p2 => dist p1 (orthogonal_projection s p) = dist p2 (orthogonal_projection s p) :=\n  ⟨fun h p1 hp1 p2 hp2 hne => (dist_eq_iff_dist_orthogonal_projection_eq p (hps hp1) (hps hp2)).1 (h hp1 hp2 hne),\n    fun h p1 hp1 p2 hp2 hne => (dist_eq_iff_dist_orthogonal_projection_eq p (hps hp1) (hps hp2)).2 (h hp1 hp2 hne)⟩\n#align dist_set_eq_iff_dist_orthogonal_projection_eq dist_set_eq_iff_dist_orthogonal_projection_eq\n\n",
 "dist_eq_iff_dist_orthogonal_projection_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 Joseph Myers. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joseph Myers\n-/\n/-- `p` is equidistant from two points in `s` if and only if its\n`orthogonal_projection` is. -/\ntheorem dist_eq_iff_dist_orthogonal_projection_eq {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] {p1 p2 : P} (p3 : P) (hp1 : p1 ∈ s) (hp2 : p2 ∈ s) :\n    dist p1 p3 = dist p2 p3 ↔ dist p1 (orthogonal_projection s p3) = dist p2 (orthogonal_projection s p3) :=\n  by\n  rw [← mul_self_inj_of_nonneg dist_nonneg dist_nonneg, ← mul_self_inj_of_nonneg dist_nonneg dist_nonneg,\n    dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq p3 hp1,\n    dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq p3 hp2]\n  simp\n#align dist_eq_iff_dist_orthogonal_projection_eq dist_eq_iff_dist_orthogonal_projection_eq\n\n",
 "dist_circumcenter_sq_eq_sq_sub_circumradius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dist_circumcenter_sq_eq_sq_sub_circumradius {n : ℕ} {r : exprℝ} (s : Simplex (exprℝ) P n) {p₁ : P}\n    (h₁ : ∀ i : Fin (n + 1), dist (s.points i) p₁ = r) (h₁' : ↑(s.orthogonal_projection_span p₁) = s.circumcenter)\n    (h : s.points 0 ∈ affineSpan (exprℝ) (Set.range s.points)) :\n    dist p₁ s.circumcenter * dist p₁ s.circumcenter = r * r - s.circumradius * s.circumradius :=\n  by\n  rw [dist_comm, ← h₁ 0, s.dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq p₁ h]\n  simp only [h₁', dist_comm p₁, add_sub_cancel', simplex.dist_circumcenter_eq_circumradius]\n#align dist_circumcenter_sq_eq_sq_sub_circumradius dist_circumcenter_sq_eq_sq_sub_circumradius\n\n",
 "dist_circumcenter_eq_circumradius'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All points have distance to the circumcenter equal to the\ncircumradius. -/\n@[simp]\ntheorem dist_circumcenter_eq_circumradius' {n : ℕ} (s : Simplex (exprℝ) P n) :\n    ∀ i, dist s.circumcenter (s.points i) = s.circumradius :=\n  by\n  intro i\n  rw [dist_comm]\n  exact dist_circumcenter_eq_circumradius _ _\n#align dist_circumcenter_eq_circumradius' dist_circumcenter_eq_circumradius'\n\n",
 "dist_circumcenter_eq_circumradius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- All points have distance from the circumcenter equal to the\ncircumradius. -/\n@[simp]\ntheorem dist_circumcenter_eq_circumradius {n : ℕ} (s : Simplex (exprℝ) P n) (i : Fin (n + 1)) :\n    dist (s.points i) s.circumcenter = s.circumradius :=\n  dist_of_mem_subset_sphere (Set.mem_range_self _) s.circumsphere_unique_dist_eq.1.2\n#align dist_circumcenter_eq_circumradius dist_circumcenter_eq_circumradius\n\n",
 "cospherical_iff_exists_mem_of_finite_dimensional":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a nonempty affine subspace, whose direction is\nfinite-dimensional, that contains a set of points, those points are\ncospherical if and only if they are equidistant from some point in\nthat subspace. -/\ntheorem cospherical_iff_exists_mem_of_finite_dimensional {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s)\n    [Nonempty s] [FiniteDimensional (exprℝ) s.direction] :\n    cospherical ps ↔ ∃ center ∈ s, ∃ radius : exprℝ, ∀ p ∈ ps, dist p center = radius :=\n  cospherical_iff_exists_mem_of_complete h\n#align cospherical_iff_exists_mem_of_finite_dimensional cospherical_iff_exists_mem_of_finite_dimensional\n\n",
 "cospherical_iff_exists_mem_of_complete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Given a nonempty affine subspace, whose direction is complete,\nthat contains a set of points, those points are cospherical if and\nonly if they are equidistant from some point in that subspace. -/\ntheorem cospherical_iff_exists_mem_of_complete {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s) [Nonempty s]\n    [CompleteSpace s.direction] : cospherical ps ↔ ∃ center ∈ s, ∃ radius : exprℝ, ∀ p ∈ ps, dist p center = radius :=\n  by\n  constructor\n  · rintro ⟨c, hcr⟩\n    rw [exists_dist_eq_iff_exists_dist_orthogonal_projection_eq h c] at hcr\n    exact ⟨orthogonal_projection s c, orthogonal_projection_mem _, hcr⟩\n  · exact fun ⟨c, hc, hd⟩ => ⟨c, hd⟩\n#align cospherical_iff_exists_mem_of_complete cospherical_iff_exists_mem_of_complete\n\n",
 "coe_orthogonal_projection_vadd_smul_vsub_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\ntheorem coe_orthogonal_projection_vadd_smul_vsub_orthogonal_projection {n : ℕ} {r₁ : exprℝ} (s : Simplex (exprℝ) P n)\n    {p p₁o : P} (hp₁o : p₁o ∈ affineSpan (exprℝ) (Set.range s.points)) :\n    ↑(s.orthogonal_projection_span («expr +ᵥ » («expr • » r₁ («expr -ᵥ » p ↑(s.orthogonal_projection_span p))) p₁o)) =\n      p₁o :=\n  congr_arg coe (orthogonal_projection_vadd_smul_vsub_orthogonal_projection _ _ _ hp₁o)\n#align coe_orthogonal_projection_vadd_smul_vsub_orthogonal_projection coe_orthogonal_projection_vadd_smul_vsub_orthogonal_projection\n\n",
 "circumsphere_unique_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The property satisfied by the circumsphere. -/\ntheorem circumsphere_unique_dist_eq {n : ℕ} (s : Simplex (exprℝ) P n) :\n    (s.circumsphere.center ∈ affineSpan (exprℝ) (Set.range s.points) ∧ Set.range s.points ⊆ s.circumsphere) ∧\n      ∀ cs : sphere P,\n        cs.center ∈ affineSpan (exprℝ) (Set.range s.points) ∧ Set.range s.points ⊆ cs → cs = s.circumsphere :=\n  s.independent.exists_unique_dist_eq.some_spec\n#align circumsphere_unique_dist_eq circumsphere_unique_dist_eq\n\n",
 "circumsphere_reindex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing a simplex along an `equiv` of index types does not change the circumsphere. -/\n@[simp]\ntheorem circumsphere_reindex {m n : ℕ} (s : Simplex (exprℝ) P m) (e : «expr ≃ » (Fin (m + 1)) (Fin (n + 1))) :\n    (s.reindex e).circumsphere = s.circumsphere :=\n  by\n  refine' s.circumsphere_unique_dist_eq.2 _ ⟨_, _⟩ <;> rw [← s.reindex_range_points e]\n  · exact (s.reindex e).circumsphere_unique_dist_eq.1.1\n  · exact (s.reindex e).circumsphere_unique_dist_eq.1.2\n#align circumsphere_reindex circumsphere_reindex\n\n",
 "circumsphere_radius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The radius of the circumsphere is the circumradius. -/\n@[simp]\ntheorem circumsphere_radius {n : ℕ} (s : Simplex (exprℝ) P n) : s.circumsphere.radius = s.circumradius :=\n  rfl\n#align circumsphere_radius circumsphere_radius\n\n",
 "circumsphere_eq_of_cospherical_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two n-simplices among cospherical points in an n-dimensional\nsubspace have the same circumsphere. -/\ntheorem circumsphere_eq_of_cospherical_subset {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s) [Nonempty s]\n    {n : ℕ} [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = n) (hc : cospherical ps)\n    {sx₁ sx₂ : Simplex (exprℝ) P n} (hsx₁ : Set.range sx₁.points ⊆ ps) (hsx₂ : Set.range sx₂.points ⊆ ps) :\n    sx₁.circumsphere = sx₂.circumsphere :=\n  by\n  rcases exists_circumsphere_eq_of_cospherical_subset h hd hc with ⟨r, hr⟩\n  rw [hr sx₁ hsx₁, hr sx₂ hsx₂]\n#align circumsphere_eq_of_cospherical_subset circumsphere_eq_of_cospherical_subset\n\n",
 "circumsphere_eq_of_cospherical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two n-simplices among cospherical points in n-space have the same\ncircumsphere. -/\ntheorem circumsphere_eq_of_cospherical {ps : Set P} {n : ℕ} [FiniteDimensional (exprℝ) V] (hd : finrank (exprℝ) V = n)\n    (hc : cospherical ps) {sx₁ sx₂ : Simplex (exprℝ) P n} (hsx₁ : Set.range sx₁.points ⊆ ps)\n    (hsx₂ : Set.range sx₂.points ⊆ ps) : sx₁.circumsphere = sx₂.circumsphere :=\n  by\n  rcases exists_circumsphere_eq_of_cospherical hd hc with ⟨r, hr⟩\n  rw [hr sx₁ hsx₁, hr sx₂ hsx₂]\n#align circumsphere_eq_of_cospherical circumsphere_eq_of_cospherical\n\n",
 "circumsphere_center":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The center of the circumsphere is the circumcenter. -/\n@[simp]\ntheorem circumsphere_center {n : ℕ} (s : Simplex (exprℝ) P n) : s.circumsphere.center = s.circumcenter :=\n  rfl\n#align circumsphere_center circumsphere_center\n\n",
 "circumradius_reindex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing a simplex along an `equiv` of index types does not change the circumradius. -/\n@[simp]\ntheorem circumradius_reindex {m n : ℕ} (s : Simplex (exprℝ) P m) (e : «expr ≃ » (Fin (m + 1)) (Fin (n + 1))) :\n    (s.reindex e).circumradius = s.circumradius := by simp_rw [← circumradius, circumsphere_reindex]\n#align circumradius_reindex circumradius_reindex\n\n",
 "circumradius_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The circumradius of a simplex with at least two points is\npositive. -/\ntheorem circumradius_pos {n : ℕ} (s : Simplex (exprℝ) P (n + 1)) : 0 < s.circumradius :=\n  by\n  refine' lt_of_le_of_ne s.circumradius_nonneg _\n  intro h\n  have hr := s.dist_circumcenter_eq_circumradius\n  simp_rw [← h, dist_eq_zero] at hr\n  have h01 := s.independent.injective.ne (by decide : (0 : Fin (n + 2)) ≠ 1)\n  simpa [hr] using h01\n#align circumradius_pos circumradius_pos\n\n",
 "circumradius_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The circumradius is non-negative. -/\ntheorem circumradius_nonneg {n : ℕ} (s : Simplex (exprℝ) P n) : 0 ≤ s.circumradius :=\n  s.dist_circumcenter_eq_circumradius 0 ▸ dist_nonneg\n#align circumradius_nonneg circumradius_nonneg\n\n",
 "circumradius_eq_of_cospherical_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two n-simplices among cospherical points in an n-dimensional\nsubspace have the same circumradius. -/\ntheorem circumradius_eq_of_cospherical_subset {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s) [Nonempty s]\n    {n : ℕ} [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = n) (hc : cospherical ps)\n    {sx₁ sx₂ : Simplex (exprℝ) P n} (hsx₁ : Set.range sx₁.points ⊆ ps) (hsx₂ : Set.range sx₂.points ⊆ ps) :\n    sx₁.circumradius = sx₂.circumradius :=\n  by\n  rcases exists_circumradius_eq_of_cospherical_subset h hd hc with ⟨r, hr⟩\n  rw [hr sx₁ hsx₁, hr sx₂ hsx₂]\n#align circumradius_eq_of_cospherical_subset circumradius_eq_of_cospherical_subset\n\n",
 "circumradius_eq_of_cospherical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two n-simplices among cospherical points in n-space have the same\ncircumradius. -/\ntheorem circumradius_eq_of_cospherical {ps : Set P} {n : ℕ} [FiniteDimensional (exprℝ) V] (hd : finrank (exprℝ) V = n)\n    (hc : cospherical ps) {sx₁ sx₂ : Simplex (exprℝ) P n} (hsx₁ : Set.range sx₁.points ⊆ ps)\n    (hsx₂ : Set.range sx₂.points ⊆ ps) : sx₁.circumradius = sx₂.circumradius :=\n  by\n  rcases exists_circumradius_eq_of_cospherical hd hc with ⟨r, hr⟩\n  rw [hr sx₁ hsx₁, hr sx₂ hsx₂]\n#align circumradius_eq_of_cospherical circumradius_eq_of_cospherical\n\n",
 "circumcenter_reindex":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-- Reindexing a simplex along an `equiv` of index types does not change the circumcenter. -/\n@[simp]\ntheorem circumcenter_reindex {m n : ℕ} (s : Simplex (exprℝ) P m) (e : «expr ≃ » (Fin (m + 1)) (Fin (n + 1))) :\n    (s.reindex e).circumcenter = s.circumcenter := by simp_rw [← circumcenter, circumsphere_reindex]\n#align circumcenter_reindex circumcenter_reindex\n\n",
 "circumcenter_mem_affine_span":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The circumcenter lies in the affine span. -/\ntheorem circumcenter_mem_affine_span {n : ℕ} (s : Simplex (exprℝ) P n) :\n    s.circumcenter ∈ affineSpan (exprℝ) (Set.range s.points) :=\n  s.circumsphere_unique_dist_eq.1.1\n#align circumcenter_mem_affine_span circumcenter_mem_affine_span\n\n",
 "circumcenter_eq_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The circumcenter of a 0-simplex equals its unique point. -/\ntheorem circumcenter_eq_point (s : Simplex (exprℝ) P 0) (i : Fin 1) : s.circumcenter = s.points i :=\n  by\n  have h := s.circumcenter_mem_affine_span\n  rw [Set.range_unique, mem_affine_span_singleton] at h\n  rw [h]\n  congr\n#align circumcenter_eq_point circumcenter_eq_point\n\n",
 "circumcenter_eq_of_range_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two simplices with the same points have the same circumcenter. -/\ntheorem circumcenter_eq_of_range_eq {n : ℕ} {s₁ s₂ : Simplex (exprℝ) P n}\n    (h : Set.range s₁.points = Set.range s₂.points) : s₁.circumcenter = s₂.circumcenter :=\n  by\n  have hs : s₁.circumcenter ∈ affineSpan (exprℝ) (Set.range s₂.points) := h ▸ s₁.circumcenter_mem_affine_span\n  have hr : ∀ i, dist (s₂.points i) s₁.circumcenter = s₁.circumradius :=\n    by\n    intro i\n    have hi : s₂.points i ∈ Set.range s₂.points := Set.mem_range_self _\n    rw [← h, Set.mem_range] at hi\n    rcases hi with ⟨j, hj⟩\n    rw [← hj, s₁.dist_circumcenter_eq_circumradius j]\n  exact s₂.eq_circumcenter_of_dist_eq hs hr\n#align circumcenter_eq_of_range_eq circumcenter_eq_of_range_eq\n\n",
 "circumcenter_eq_of_cospherical_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two n-simplices among cospherical points in an n-dimensional\nsubspace have the same circumcenter. -/\ntheorem circumcenter_eq_of_cospherical_subset {s : AffineSubspace (exprℝ) P} {ps : Set P} (h : ps ⊆ s) [Nonempty s]\n    {n : ℕ} [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = n) (hc : cospherical ps)\n    {sx₁ sx₂ : Simplex (exprℝ) P n} (hsx₁ : Set.range sx₁.points ⊆ ps) (hsx₂ : Set.range sx₂.points ⊆ ps) :\n    sx₁.circumcenter = sx₂.circumcenter :=\n  by\n  rcases exists_circumcenter_eq_of_cospherical_subset h hd hc with ⟨r, hr⟩\n  rw [hr sx₁ hsx₁, hr sx₂ hsx₂]\n#align circumcenter_eq_of_cospherical_subset circumcenter_eq_of_cospherical_subset\n\n",
 "circumcenter_eq_of_cospherical":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Two n-simplices among cospherical points in n-space have the same\ncircumcenter. -/\ntheorem circumcenter_eq_of_cospherical {ps : Set P} {n : ℕ} [FiniteDimensional (exprℝ) V] (hd : finrank (exprℝ) V = n)\n    (hc : cospherical ps) {sx₁ sx₂ : Simplex (exprℝ) P n} (hsx₁ : Set.range sx₁.points ⊆ ps)\n    (hsx₂ : Set.range sx₂.points ⊆ ps) : sx₁.circumcenter = sx₂.circumcenter :=\n  by\n  rcases exists_circumcenter_eq_of_cospherical hd hc with ⟨r, hr⟩\n  rw [hr sx₁ hsx₁, hr sx₂ hsx₂]\n#align circumcenter_eq_of_cospherical circumcenter_eq_of_cospherical\n\n",
 "circumcenter_eq_centroid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The circumcenter of a 1-simplex equals its centroid. -/\ntheorem circumcenter_eq_centroid (s : Simplex (exprℝ) P 1) : s.circumcenter = Finset.univ.centroid (exprℝ) s.points :=\n  by\n  have hr :\n    Set.Pairwise Set.univ fun i j : Fin 2 =>\n      dist (s.points i) (finset.univ.centroid (exprℝ) s.points) =\n        dist (s.points j) (finset.univ.centroid (exprℝ) s.points) :=\n    by\n    intro i hi j hj hij\n    rw [Finset.centroid_pair_fin, dist_eq_norm_vsub V (s.points i), dist_eq_norm_vsub V (s.points j),\n      vsub_vadd_eq_vsub_sub, vsub_vadd_eq_vsub_sub, ← one_smul (exprℝ) («expr -ᵥ » (s.points i) (s.points 0)), ←\n      one_smul (exprℝ) («expr -ᵥ » (s.points j) (s.points 0))]\n    fin_cases i <;> fin_cases j <;> simp [-one_smul, ← sub_smul] <;> norm_num\n  rw [Set.pairwise_eq_iff_exists_eq] at hr\n  cases' hr with r hr\n  exact\n    (s.eq_circumcenter_of_dist_eq (centroid_mem_affineSpan_of_card_eq_add_one (exprℝ) _ (Finset.card_fin 2)) fun i =>\n        hr i (Set.mem_univ _)).symm\n#align circumcenter_eq_centroid circumcenter_eq_centroid\n\n",
 "circumcenter_eq_affine_combination_of_points_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The circumcenter of a simplex, in terms of\n`points_with_circumcenter`. -/\ntheorem circumcenter_eq_affine_combination_of_points_with_circumcenter {n : ℕ} (s : Simplex (exprℝ) P n) :\n    s.circumcenter =\n      (univ : Finset (points_with_circumcenter_index n)).affine_combination (exprℝ) s.points_with_circumcenter\n        (circumcenter_weights_with_circumcenter n) :=\n  by\n  rw [← points_with_circumcenter_eq_circumcenter]\n  symm\n  refine' affine_combination_of_eq_one_of_eq_zero _ _ _ (mem_univ _) rfl _\n  rintro ⟨i⟩ hi hn <;> tauto\n#align circumcenter_eq_affine_combination_of_points_with_circumcenter circumcenter_eq_affine_combination_of_points_with_circumcenter\n\n",
 "centroid_eq_affine_combination_of_points_with_circumcenter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The centroid of some vertices of a simplex, in terms of\n`points_with_circumcenter`. -/\ntheorem centroid_eq_affine_combination_of_points_with_circumcenter {n : ℕ} (s : Simplex (exprℝ) P n)\n    (fs : Finset (Fin (n + 1))) :\n    fs.centroid (exprℝ) s.points =\n      (univ : Finset (points_with_circumcenter_index n)).affine_combination (exprℝ) s.points_with_circumcenter\n        (centroid_weights_with_circumcenter fs) :=\n  by\n  simp_rw [centroid_def, affine_combination_apply, weighted_vsub_of_point_apply, sum_points_with_circumcenter,\n    centroid_weights_with_circumcenter, points_with_circumcenter_point, zero_smul, add_zero, centroid_weights,\n    Set.sum_indicator_subset_of_eq_zero (Function.const (Fin (n + 1)) (card fs : exprℝ)⁻¹)\n      (fun i wi => «expr • » wi («expr -ᵥ » (s.points i) (Classical.choice add_torsor.nonempty))) fs.subset_univ\n      fun i => zero_smul (exprℝ) _,\n    Set.indicator_apply]\n  congr\n#align centroid_eq_affine_combination_of_points_with_circumcenter centroid_eq_affine_combination_of_points_with_circumcenter\n\n"}