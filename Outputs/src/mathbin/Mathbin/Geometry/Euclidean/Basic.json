{"vsub_orthogonal_projection_mem_direction_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- Subtracting the `orthogonal_projection` from `p` produces a result\nin the orthogonal direction. -/\ntheorem vsub_orthogonal_projection_mem_direction_orthogonal (s : AffineSubspace (exprℝ) P) [Nonempty s]\n    [CompleteSpace s.direction] (p : P) : «expr -ᵥ » p (orthogonal_projection s p) ∈ «expr ᗮ» s.direction :=\n  direction_mk' p («expr ᗮ» s.direction) ▸\n    vsub_mem_direction (self_mem_mk' _ _) (orthogonal_projection_mem_orthogonal s p)\n#align vsub_orthogonal_projection_mem_direction_orthogonal vsub_orthogonal_projection_mem_direction_orthogonal\n\n",
 "vsub_orthogonal_projection_mem_direction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Subtracting the `orthogonal_projection` from a point in the given\nsubspace produces a result in the direction of the given subspace. -/\ntheorem vsub_orthogonal_projection_mem_direction {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    {p1 : P} (p2 : P) (hp1 : p1 ∈ s) :\n    ↑(«expr -ᵥ » (⟨p1, hp1⟩ : s) (orthogonal_projection s p2) : s.direction) ∈ s.direction :=\n  («expr -ᵥ » (⟨p1, hp1⟩ : s) (orthogonal_projection s p2) : s.direction).2\n#align vsub_orthogonal_projection_mem_direction vsub_orthogonal_projection_mem_direction\n\n",
 "reflection_vadd_smul_vsub_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Reflecting a vector plus a point in the subspace produces the\nnegation of that vector plus the point if the vector is a multiple of\nthe result of subtracting a point's orthogonal projection from that\npoint. -/\ntheorem reflection_vadd_smul_vsub_orthogonal_projection {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] {p₁ : P} (p₂ : P) (r : exprℝ) (hp₁ : p₁ ∈ s) :\n    reflection s («expr +ᵥ » («expr • » r («expr -ᵥ » p₂ (orthogonal_projection s p₂))) p₁) =\n      «expr +ᵥ » (-«expr • » r («expr -ᵥ » p₂ (orthogonal_projection s p₂))) p₁ :=\n  reflection_orthogonal_vadd hp₁ (Submodule.smul_mem _ _ (vsub_orthogonal_projection_mem_direction_orthogonal s _))\n#align reflection_vadd_smul_vsub_orthogonal_projection reflection_vadd_smul_vsub_orthogonal_projection\n\n",
 "reflection_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Reflection is its own inverse. -/\n@[simp]\ntheorem reflection_symm (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction] :\n    (reflection s).symm = reflection s := by\n  ext\n  rw [← (reflection s).injective.eq_iff]\n  simp\n#align reflection_symm reflection_symm\n\n",
 "reflection_reflection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Reflecting twice in the same subspace. -/\n@[simp]\ntheorem reflection_reflection (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction] (p : P) :\n    reflection s (reflection s p) = p :=\n  by\n  have :\n    ∀ a : s,\n      ∀ b : V,\n        (_root_.orthogonal_projection s.direction) b = 0 →\n          reflection s (reflection s («expr +ᵥ » b a)) = «expr +ᵥ » b a :=\n    by\n    intro a b h\n    have : «expr -ᵥ » (a : P) («expr +ᵥ » b a) = -b := by rw [vsub_vadd_eq_vsub_sub, vsub_self, zero_sub]\n    simp [reflection, h, this]\n  rw [← vsub_vadd p (orthogonal_projection s p)]\n  exact this (orthogonal_projection s p) _ (orthogonal_projection_vsub_orthogonal_projection s p)\n#align reflection_reflection reflection_reflection\n\n",
 "reflection_orthogonal_vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/-- Reflecting an orthogonal vector plus a point in the subspace\nproduces the negation of that vector plus the point. -/\ntheorem reflection_orthogonal_vadd {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction] {p : P}\n    (hp : p ∈ s) {v : V} (hv : v ∈ «expr ᗮ» s.direction) : reflection s («expr +ᵥ » v p) = «expr +ᵥ » (-v) p :=\n  by\n  rw [reflection_apply, orthogonal_projection_vadd_eq_self hp hv, vsub_vadd_eq_vsub_sub]\n  simp\n#align reflection_orthogonal_vadd reflection_orthogonal_vadd\n\n",
 "reflection_mem_of_le_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The reflection of a point in a subspace is contained in any larger\nsubspace containing both the point and the subspace reflected in. -/\ntheorem reflection_mem_of_le_of_mem {s₁ s₂ : AffineSubspace (exprℝ) P} [Nonempty s₁] [CompleteSpace s₁.direction]\n    (hle : s₁ ≤ s₂) {p : P} (hp : p ∈ s₂) : reflection s₁ p ∈ s₂ :=\n  by\n  rw [reflection_apply]\n  have ho : ↑(orthogonal_projection s₁ p) ∈ s₂ := hle (orthogonal_projection_mem p)\n  exact vadd_mem_of_mem_direction (vsub_mem_direction ho hp) ho\n#align reflection_mem_of_le_of_mem reflection_mem_of_le_of_mem\n\n",
 "reflection_involutive":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Reflection is involutive. -/\ntheorem reflection_involutive (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction] :\n    Function.Involutive (reflection s) :=\n  reflection_reflection s\n#align reflection_involutive reflection_involutive\n\n",
 "reflection_eq_self_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A point is its own reflection if and only if it is in the\nsubspace. -/\ntheorem reflection_eq_self_iff {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction] (p : P) :\n    reflection s p = p ↔ p ∈ s :=\n  by\n  rw [← orthogonal_projection_eq_self_iff, reflection_apply]\n  constructor\n  · intro h\n    rw [← @vsub_eq_zero_iff_eq V, vadd_vsub_assoc, ← two_smul (exprℝ) («expr -ᵥ » (↑(orthogonal_projection s p)) p),\n      smul_eq_zero] at h\n    norm_num at h\n    exact h\n  · intro h\n    simp [h]\n#align reflection_eq_self_iff reflection_eq_self_iff\n\n",
 "reflection_eq_iff_orthogonal_projection_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Reflecting a point in two subspaces produces the same result if\nand only if the point has the same orthogonal projection in each of\nthose subspaces. -/\ntheorem reflection_eq_iff_orthogonal_projection_eq (s₁ s₂ : AffineSubspace (exprℝ) P) [Nonempty s₁] [Nonempty s₂]\n    [CompleteSpace s₁.direction] [CompleteSpace s₂.direction] (p : P) :\n    reflection s₁ p = reflection s₂ p ↔ (orthogonal_projection s₁ p : P) = orthogonal_projection s₂ p :=\n  by\n  rw [reflection_apply, reflection_apply]\n  constructor\n  · intro h\n    rw [← @vsub_eq_zero_iff_eq V, vsub_vadd_eq_vsub_sub, vadd_vsub_assoc, add_comm, add_sub_assoc,\n      vsub_sub_vsub_cancel_right, ←\n      two_smul (exprℝ) («expr -ᵥ » (orthogonal_projection s₁ p : P) (orthogonal_projection s₂ p)), smul_eq_zero] at h\n    norm_num at h\n    exact h\n  · intro h\n    rw [h]\n#align reflection_eq_iff_orthogonal_projection_eq reflection_eq_iff_orthogonal_projection_eq\n\n",
 "reflection_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- The result of reflecting. -/\ntheorem reflection_apply (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction] (p : P) :\n    reflection s p = «expr +ᵥ » («expr -ᵥ » (↑(orthogonal_projection s p)) p) (orthogonal_projection s p) :=\n  rfl\n#align reflection_apply reflection_apply\n\n",
 "orthogonal_projection_vsub_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Subtracting the `orthogonal_projection` from `p` produces a result in the kernel of the linear\npart of the orthogonal projection. -/\ntheorem orthogonal_projection_vsub_orthogonal_projection (s : AffineSubspace (exprℝ) P) [Nonempty s]\n    [CompleteSpace s.direction] (p : P) :\n    _root_.orthogonal_projection s.direction («expr -ᵥ » p (orthogonal_projection s p)) = 0 :=\n  by\n  apply orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero\n  intro c hc\n  rw [← neg_vsub_eq_vsub_rev, inner_neg_right, orthogonal_projection_vsub_mem_direction_orthogonal s p c hc, neg_zero]\n#align orthogonal_projection_vsub_orthogonal_projection orthogonal_projection_vsub_orthogonal_projection\n\n",
 "orthogonal_projection_vsub_mem_direction_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- Subtracting `p` from its `orthogonal_projection` produces a result\nin the orthogonal direction. -/\ntheorem orthogonal_projection_vsub_mem_direction_orthogonal (s : AffineSubspace (exprℝ) P) [Nonempty s]\n    [CompleteSpace s.direction] (p : P) : «expr -ᵥ » (orthogonal_projection s p : P) p ∈ «expr ᗮ» s.direction :=\n  orthogonal_projection_fn_vsub_mem_direction_orthogonal p\n#align orthogonal_projection_vsub_mem_direction_orthogonal orthogonal_projection_vsub_mem_direction_orthogonal\n\n",
 "orthogonal_projection_vsub_mem_direction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Subtracting a point in the given subspace from the\n`orthogonal_projection` produces a result in the direction of the\ngiven subspace. -/\ntheorem orthogonal_projection_vsub_mem_direction {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    {p1 : P} (p2 : P) (hp1 : p1 ∈ s) :\n    ↑(«expr -ᵥ » (orthogonal_projection s p2) ⟨p1, hp1⟩ : s.direction) ∈ s.direction :=\n  («expr -ᵥ » (orthogonal_projection s p2) ⟨p1, hp1⟩ : s.direction).2\n#align orthogonal_projection_vsub_mem_direction orthogonal_projection_vsub_mem_direction\n\n",
 "orthogonal_projection_vadd_smul_vsub_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Adding a vector to a point in the given subspace, then taking the\northogonal projection, produces the original point if the vector is a\nmultiple of the result of subtracting a point's orthogonal projection\nfrom that point. -/\ntheorem orthogonal_projection_vadd_smul_vsub_orthogonal_projection {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] {p1 : P} (p2 : P) (r : exprℝ) (hp : p1 ∈ s) :\n    orthogonal_projection s («expr +ᵥ » («expr • » r («expr -ᵥ » p2 (orthogonal_projection s p2) : V)) p1) = ⟨p1, hp⟩ :=\n  orthogonal_projection_vadd_eq_self hp\n    (Submodule.smul_mem _ _ (vsub_orthogonal_projection_mem_direction_orthogonal s _))\n#align orthogonal_projection_vadd_smul_vsub_orthogonal_projection orthogonal_projection_vadd_smul_vsub_orthogonal_projection\n\n",
 "orthogonal_projection_vadd_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/-- Adding a vector to a point in the given subspace, then taking the\northogonal projection, produces the original point if the vector was\nin the orthogonal direction. -/\ntheorem orthogonal_projection_vadd_eq_self {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    {p : P} (hp : p ∈ s) {v : V} (hv : v ∈ «expr ᗮ» s.direction) : orthogonal_projection s («expr +ᵥ » v p) = ⟨p, hp⟩ :=\n  by\n  have h := vsub_orthogonal_projection_mem_direction_orthogonal s («expr +ᵥ » v p)\n  rw [vadd_vsub_assoc, Submodule.add_mem_iff_right _ hv] at h\n  refine' (eq_of_vsub_eq_zero _).symm\n  ext\n  refine' Submodule.disjoint_def.1 s.direction.orthogonal_disjoint _ _ h\n  exact (_ : s.direction).2\n#align orthogonal_projection_vadd_eq_self orthogonal_projection_vadd_eq_self\n\n",
 "orthogonal_projection_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Orthogonal projection is idempotent. -/\n@[simp]\ntheorem orthogonal_projection_orthogonal_projection (s : AffineSubspace (exprℝ) P) [Nonempty s]\n    [CompleteSpace s.direction] (p : P) :\n    orthogonal_projection s (orthogonal_projection s p) = orthogonal_projection s p :=\n  by\n  ext\n  rw [orthogonal_projection_eq_self_iff]\n  exact orthogonal_projection_mem p\n#align orthogonal_projection_orthogonal_projection orthogonal_projection_orthogonal_projection\n\n",
 "orthogonal_projection_mem_subspace_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem orthogonal_projection_mem_subspace_eq_self {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] (p : s) : orthogonal_projection s p = p :=\n  by\n  ext\n  rw [orthogonal_projection_eq_self_iff]\n  exact p.2\n#align orthogonal_projection_mem_subspace_eq_self orthogonal_projection_mem_subspace_eq_self\n\n",
 "orthogonal_projection_mem_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- The `orthogonal_projection` lies in the orthogonal subspace. -/\ntheorem orthogonal_projection_mem_orthogonal (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction]\n    (p : P) : ↑(orthogonal_projection s p) ∈ mk' p («expr ᗮ» s.direction) :=\n  orthogonal_projection_fn_mem_orthogonal p\n#align orthogonal_projection_mem_orthogonal orthogonal_projection_mem_orthogonal\n\n",
 "orthogonal_projection_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The `orthogonal_projection` lies in the given subspace. -/\ntheorem orthogonal_projection_mem {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction] (p : P) :\n    ↑(orthogonal_projection s p) ∈ s :=\n  (orthogonal_projection s p).2\n#align orthogonal_projection_mem orthogonal_projection_mem\n\n",
 "orthogonal_projection_linear":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The linear map corresponding to `orthogonal_projection`. -/\n@[simp]\ntheorem orthogonal_projection_linear {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction] :\n    (orthogonal_projection s).linear = _root_.orthogonal_projection s.direction :=\n  rfl\n#align orthogonal_projection_linear orthogonal_projection_linear\n\n",
 "orthogonal_projection_fn_vsub_mem_direction_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- Subtracting `p` from its `orthogonal_projection_fn` produces a\nresult in the orthogonal direction.  This lemma is only intended for\nuse in setting up the bundled version and should not be used once that\nis defined. -/\ntheorem orthogonal_projection_fn_vsub_mem_direction_orthogonal {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] (p : P) : «expr -ᵥ » (orthogonal_projection_fn s p) p ∈ «expr ᗮ» s.direction :=\n  direction_mk' p («expr ᗮ» s.direction) ▸\n    vsub_mem_direction (orthogonal_projection_fn_mem_orthogonal p) (self_mem_mk' _ _)\n#align orthogonal_projection_fn_vsub_mem_direction_orthogonal orthogonal_projection_fn_vsub_mem_direction_orthogonal\n\n",
 "orthogonal_projection_fn_mem_orthogonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- The `orthogonal_projection_fn` lies in the orthogonal\nsubspace.  This lemma is only intended for use in setting up the\nbundled version and should not be used once that is defined. -/\ntheorem orthogonal_projection_fn_mem_orthogonal {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    (p : P) : orthogonal_projection_fn s p ∈ mk' p («expr ᗮ» s.direction) :=\n  by\n  rw [← mem_coe, ← Set.singleton_subset_iff, ← inter_eq_singleton_orthogonal_projection_fn]\n  exact Set.inter_subset_right _ _\n#align orthogonal_projection_fn_mem_orthogonal orthogonal_projection_fn_mem_orthogonal\n\n",
 "orthogonal_projection_fn_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The `orthogonal_projection_fn` lies in the given subspace.  This\nlemma is only intended for use in setting up the bundled version and\nshould not be used once that is defined. -/\ntheorem orthogonal_projection_fn_mem {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction] (p : P) :\n    orthogonal_projection_fn s p ∈ s :=\n  by\n  rw [← mem_coe, ← Set.singleton_subset_iff, ← inter_eq_singleton_orthogonal_projection_fn]\n  exact Set.inter_subset_left _ _\n#align orthogonal_projection_fn_mem orthogonal_projection_fn_mem\n\n",
 "orthogonal_projection_fn_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem orthogonal_projection_fn_eq {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction] (p : P) :\n    orthogonal_projection_fn s p = orthogonal_projection s p :=\n  rfl\n#align orthogonal_projection_fn_eq orthogonal_projection_fn_eq\n\n",
 "orthogonal_projection_eq_self_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A point equals its orthogonal projection if and only if it lies in\nthe subspace. -/\ntheorem orthogonal_projection_eq_self_iff {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    {p : P} : ↑(orthogonal_projection s p) = p ↔ p ∈ s :=\n  by\n  constructor\n  · exact fun h => h ▸ orthogonal_projection_mem p\n  · intro h\n    have hp : p ∈ (s : Set P) ∩ mk' p («expr ᗮ» s.direction) := ⟨h, self_mem_mk' p _⟩\n    rw [inter_eq_singleton_orthogonal_projection p] at hp\n    symm\n    exact hp\n#align orthogonal_projection_eq_self_iff orthogonal_projection_eq_self_iff\n\n",
 "inter_eq_singleton_orthogonal_projection_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- The intersection of the subspace and the orthogonal subspace\nthrough the given point is the `orthogonal_projection_fn` of that\npoint onto the subspace.  This lemma is only intended for use in\nsetting up the bundled version and should not be used once that is\ndefined. -/\ntheorem inter_eq_singleton_orthogonal_projection_fn {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] (p : P) : (s : Set P) ∩ mk' p («expr ᗮ» s.direction) = {orthogonal_projection_fn s p} :=\n  Classical.choose_spec <|\n    inter_eq_singleton_of_nonempty_of_isCompl (nonempty_subtype.mp ‹_›) (mk'_nonempty p («expr ᗮ» s.direction))\n      (by\n        rw [direction_mk' p («expr ᗮ» s.direction)]\n        exact submodule.is_compl_orthogonal_of_complete_space)\n#align inter_eq_singleton_orthogonal_projection_fn inter_eq_singleton_orthogonal_projection_fn\n\n",
 "inter_eq_singleton_orthogonal_projection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/-- The intersection of the subspace and the orthogonal subspace\nthrough the given point is the `orthogonal_projection` of that point\nonto the subspace. -/\ntheorem inter_eq_singleton_orthogonal_projection {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    (p : P) : (s : Set P) ∩ mk' p («expr ᗮ» s.direction) = {orthogonal_projection s p} :=\n  by\n  rw [← orthogonal_projection_fn_eq]\n  exact inter_eq_singleton_orthogonal_projection_fn p\n#align inter_eq_singleton_orthogonal_projection inter_eq_singleton_orthogonal_projection\n\n",
 "inner_weighted_vsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- The inner product of two vectors given with `weighted_vsub`, in\nterms of the pairwise distances. -/\ntheorem inner_weighted_vsub {ι₁ : Type _} {s₁ : Finset ι₁} {w₁ : ι₁ → exprℝ} (p₁ : ι₁ → P)\n    (h₁ : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s₁ (w₁ i) = 0)\n    {ι₂ : Type _} {s₂ : Finset ι₂} {w₂ : ι₂ → exprℝ} (p₂ : ι₂ → P)\n    (h₂ :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s₂ (w₂ i) = 0) :\n    inner.real (s₁.weighted_vsub p₁ w₁) (s₂.weighted_vsub p₂ w₂) =\n      -finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s₁\n            (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s₂\n              (w₁ i₁ * w₂ i₂ * (dist (p₁ i₁) (p₂ i₂) * dist (p₁ i₁) (p₂ i₂)))) /\n        2 :=\n  by\n  rw [Finset.weightedVSub_apply, Finset.weightedVSub_apply, inner_sum_smul_sum_smul_of_sum_eq_zero _ h₁ _ h₂]\n  simp_rw [vsub_sub_vsub_cancel_right]\n  rcongr (i₁ i₂) <;> rw [dist_eq_norm_vsub V (p₁ i₁) (p₂ i₂)]\n#align inner_weighted_vsub inner_weighted_vsub\n\n",
 "inner_vsub_vsub_of_dist_eq_of_dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- Suppose that `c₁` is equidistant from `p₁` and `p₂`, and the same\napplies to `c₂`.  Then the vector between `c₁` and `c₂` is orthogonal\nto that between `p₁` and `p₂`.  (In two dimensions, this says that the\ndiagonals of a kite are orthogonal.) -/\ntheorem inner_vsub_vsub_of_dist_eq_of_dist_eq {c₁ c₂ p₁ p₂ : P} (hc₁ : dist p₁ c₁ = dist p₂ c₁)\n    (hc₂ : dist p₁ c₂ = dist p₂ c₂) : inner.real («expr -ᵥ » c₂ c₁) («expr -ᵥ » p₂ p₁) = 0 :=\n  by\n  have h : inner.real («expr -ᵥ » c₂ c₁ + «expr -ᵥ » c₂ c₁) («expr -ᵥ » p₂ p₁) = 0 :=\n    by\n    conv_lhs =>\n      congr\n      congr\n      rw [← vsub_sub_vsub_cancel_right c₂ c₁ p₁]\n      skip\n      rw [← vsub_sub_vsub_cancel_right c₂ c₁ p₂]\n    rw [sub_add_sub_comm, inner_sub_left]\n    conv_lhs =>\n      congr\n      rw [← vsub_sub_vsub_cancel_right p₂ p₁ c₂]\n      skip\n      rw [← vsub_sub_vsub_cancel_right p₂ p₁ c₁]\n    rw [dist_comm p₁, dist_comm p₂, dist_eq_norm_vsub V _ p₁, dist_eq_norm_vsub V _ p₂, ←\n      real_inner_add_sub_eq_zero_iff] at hc₁ hc₂\n    simp_rw [← neg_vsub_eq_vsub_rev c₁, ← neg_vsub_eq_vsub_rev c₂, sub_neg_eq_add, neg_add_eq_sub, hc₁, hc₂, sub_zero]\n  simpa [inner_add_left, ← mul_two, (by norm_num : (2 : exprℝ) ≠ 0)] using h\n#align inner_vsub_vsub_of_dist_eq_of_dist_eq inner_vsub_vsub_of_dist_eq_of_dist_eq\n\n",
 "eq_reflection_of_eq_subspace":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem eq_reflection_of_eq_subspace {s s' : AffineSubspace (exprℝ) P} [Nonempty s] [Nonempty s']\n    [CompleteSpace s.direction] [CompleteSpace s'.direction] (h : s = s') (p : P) :\n    (reflection s p : P) = (reflection s' p : P) := by subst h\n#align eq_reflection_of_eq_subspace eq_reflection_of_eq_subspace\n\n",
 "eq_orthogonal_projection_of_eq_subspace":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem eq_orthogonal_projection_of_eq_subspace {s s' : AffineSubspace (exprℝ) P} [Nonempty s] [Nonempty s']\n    [CompleteSpace s.direction] [CompleteSpace s'.direction] (h : s = s') (p : P) :\n    (orthogonal_projection s p : P) = (orthogonal_projection s' p : P) :=\n  by\n  change orthogonal_projection_fn s p = orthogonal_projection_fn s' p\n  congr\n  exact h\n#align eq_orthogonal_projection_of_eq_subspace eq_orthogonal_projection_of_eq_subspace\n\n",
 "eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Distances `r₁` `r₂` of `p` from two different points `c₁` `c₂` determine at\nmost two points `p₁` `p₂` in a two-dimensional subspace containing those points\n(two circles intersect in at most two points). -/\ntheorem eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two {s : AffineSubspace (exprℝ) P}\n    [FiniteDimensional (exprℝ) s.direction] (hd : finrank (exprℝ) s.direction = 2) {c₁ c₂ p₁ p₂ p : P} (hc₁s : c₁ ∈ s)\n    (hc₂s : c₂ ∈ s) (hp₁s : p₁ ∈ s) (hp₂s : p₂ ∈ s) (hps : p ∈ s) {r₁ r₂ : exprℝ} (hc : c₁ ≠ c₂) (hp : p₁ ≠ p₂)\n    (hp₁c₁ : dist p₁ c₁ = r₁) (hp₂c₁ : dist p₂ c₁ = r₁) (hpc₁ : dist p c₁ = r₁) (hp₁c₂ : dist p₁ c₂ = r₂)\n    (hp₂c₂ : dist p₂ c₂ = r₂) (hpc₂ : dist p c₂ = r₂) : p = p₁ ∨ p = p₂ :=\n  by\n  have ho : inner.real («expr -ᵥ » c₂ c₁) («expr -ᵥ » p₂ p₁) = 0 :=\n    inner_vsub_vsub_of_dist_eq_of_dist_eq (hp₁c₁.trans hp₂c₁.symm) (hp₁c₂.trans hp₂c₂.symm)\n  have hop : inner.real («expr -ᵥ » c₂ c₁) («expr -ᵥ » p p₁) = 0 :=\n    inner_vsub_vsub_of_dist_eq_of_dist_eq (hp₁c₁.trans hpc₁.symm) (hp₁c₂.trans hpc₂.symm)\n  let b : Fin 2 → V := «expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\"\n  have hb : LinearIndependent (exprℝ) b :=\n    by\n    refine' linear_independent_of_ne_zero_of_inner_eq_zero _ _\n    · intro i\n      fin_cases i <;> simp [b, hc.symm, hp.symm]\n    · intro i j hij\n      fin_cases i <;> fin_cases j <;> try exact false.elim (hij rfl)\n      · exact ho\n      · rw [real_inner_comm]\n        exact ho\n  have hbs : Submodule.span (exprℝ) (Set.range b) = s.direction :=\n    by\n    refine' eq_of_le_of_finrank_eq _ _\n    · rw [Submodule.span_le, Set.range_subset_iff]\n      intro i\n      fin_cases i\n      · exact vsub_mem_direction hc₂s hc₁s\n      · exact vsub_mem_direction hp₂s hp₁s\n    · rw [finrank_span_eq_card hb, Fintype.card_fin, hd]\n  have hv : ∀ v ∈ s.direction, ∃ t₁ t₂ : exprℝ, v = «expr • » t₁ («expr -ᵥ » c₂ c₁) + «expr • » t₂ («expr -ᵥ » p₂ p₁) :=\n    by\n    intro v hv\n    have hr : Set.range b = {«expr -ᵥ » c₂ c₁, «expr -ᵥ » p₂ p₁} :=\n      by\n      have hu : (Finset.univ : Finset (Fin 2)) = {0, 1} := by decide\n      rw [← Fintype.coe_image_univ, hu]\n      simp\n      rfl\n    rw [← hbs, hr, Submodule.mem_span_insert] at hv\n    rcases hv with ⟨t₁, v', hv', hv⟩\n    rw [Submodule.mem_span_singleton] at hv'\n    rcases hv' with ⟨t₂, rfl⟩\n    exact ⟨t₁, t₂, hv⟩\n  rcases hv («expr -ᵥ » p p₁) (vsub_mem_direction hps hp₁s) with ⟨t₁, t₂, hpt⟩\n  simp only [hpt, inner_add_right, inner_smul_right, ho, MulZeroClass.mul_zero, add_zero, mul_eq_zero,\n    inner_self_eq_zero, vsub_eq_zero_iff_eq, hc.symm, or_false_iff] at hop\n  rw [hop, zero_smul, zero_add, ← eq_vadd_iff_vsub_eq] at hpt\n  subst hpt\n  have hp' : («expr -ᵥ » p₂ p₁ : V) ≠ 0 := by simp [hp.symm]\n  have hp₂ : dist («expr +ᵥ » («expr • » (1 : exprℝ) («expr -ᵥ » p₂ p₁)) p₁) c₁ = r₁ := by simp [hp₂c₁]\n  rw [← hp₁c₁, dist_smul_vadd_eq_dist _ _ hp'] at hpc₁ hp₂\n  simp only [one_ne_zero, false_or_iff] at hp₂\n  rw [hp₂.symm] at hpc₁\n  cases hpc₁ <;> simp [hpc₁]\n#align eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two\n\n",
 "eq_of_dist_eq_of_dist_eq_of_finrank_eq_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Distances `r₁` `r₂` of `p` from two different points `c₁` `c₂` determine at\nmost two points `p₁` `p₂` in two-dimensional space (two circles intersect in at\nmost two points). -/\ntheorem eq_of_dist_eq_of_dist_eq_of_finrank_eq_two [FiniteDimensional (exprℝ) V] (hd : finrank (exprℝ) V = 2)\n    {c₁ c₂ p₁ p₂ p : P} {r₁ r₂ : exprℝ} (hc : c₁ ≠ c₂) (hp : p₁ ≠ p₂) (hp₁c₁ : dist p₁ c₁ = r₁)\n    (hp₂c₁ : dist p₂ c₁ = r₁) (hpc₁ : dist p c₁ = r₁) (hp₁c₂ : dist p₁ c₂ = r₂) (hp₂c₂ : dist p₂ c₂ = r₂)\n    (hpc₂ : dist p c₂ = r₂) : p = p₁ ∨ p = p₂ :=\n  haveI hd' : finrank (exprℝ) («expr⊤» : AffineSubspace (exprℝ) P).direction = 2 :=\n    by\n    rw [direction_top, finrank_top]\n    exact hd\n  eq_of_dist_eq_of_dist_eq_of_mem_of_finrank_eq_two hd' (mem_top (exprℝ) V _) (mem_top (exprℝ) V _)\n    (mem_top (exprℝ) V _) (mem_top (exprℝ) V _) (mem_top (exprℝ) V _) hc hp hp₁c₁ hp₂c₁ hpc₁ hp₁c₂ hp₂c₂ hpc₂\n#align eq_of_dist_eq_of_dist_eq_of_finrank_eq_two eq_of_dist_eq_of_dist_eq_of_finrank_eq_two\n\n",
 "dist_sq_smul_orthogonal_vadd_smul_orthogonal_vadd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᗮ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The square of the distance between two points constructed by\nadding multiples of the same orthogonal vector to points in the same\nsubspace. -/\ntheorem dist_sq_smul_orthogonal_vadd_smul_orthogonal_vadd {s : AffineSubspace (exprℝ) P} {p1 p2 : P} (hp1 : p1 ∈ s)\n    (hp2 : p2 ∈ s) (r1 r2 : exprℝ) {v : V} (hv : v ∈ «expr ᗮ» s.direction) :\n    dist («expr +ᵥ » («expr • » r1 v) p1) («expr +ᵥ » («expr • » r2 v) p2) *\n        dist («expr +ᵥ » («expr • » r1 v) p1) («expr +ᵥ » («expr • » r2 v) p2) =\n      dist p1 p2 * dist p1 p2 + (r1 - r2) * (r1 - r2) * («expr‖ ‖» v * «expr‖ ‖» v) :=\n  calc\n    dist («expr +ᵥ » («expr • » r1 v) p1) («expr +ᵥ » («expr • » r2 v) p2) *\n          dist («expr +ᵥ » («expr • » r1 v) p1) («expr +ᵥ » («expr • » r2 v) p2) =\n        «expr‖ ‖» («expr -ᵥ » p1 p2 + «expr • » (r1 - r2) v) * «expr‖ ‖» («expr -ᵥ » p1 p2 + «expr • » (r1 - r2) v) :=\n      by\n      rw [dist_eq_norm_vsub V («expr +ᵥ » («expr • » r1 v) p1), vsub_vadd_eq_vsub_sub, vadd_vsub_assoc, sub_smul,\n        add_comm, add_sub_assoc]\n    _ =\n        «expr‖ ‖» («expr -ᵥ » p1 p2) * «expr‖ ‖» («expr -ᵥ » p1 p2) +\n          «expr‖ ‖» («expr • » (r1 - r2) v) * «expr‖ ‖» («expr • » (r1 - r2) v) :=\n      (norm_add_sq_eq_norm_sq_add_norm_sq_real\n        (submodule.inner_right_of_mem_orthogonal (vsub_mem_direction hp1 hp2) (Submodule.smul_mem _ _ hv)))\n    _ =\n        «expr‖ ‖» («expr -ᵥ » p1 p2 : V) * «expr‖ ‖» («expr -ᵥ » p1 p2 : V) +\n          |r1 - r2| * |r1 - r2| * «expr‖ ‖» v * «expr‖ ‖» v :=\n      by\n      rw [norm_smul, Real.norm_eq_abs]\n      ring\n    _ = dist p1 p2 * dist p1 p2 + (r1 - r2) * (r1 - r2) * («expr‖ ‖» v * «expr‖ ‖» v) := by\n      rw [dist_eq_norm_vsub V p1, abs_mul_abs_self, mul_assoc]\n    \n#align dist_sq_smul_orthogonal_vadd_smul_orthogonal_vadd dist_sq_smul_orthogonal_vadd_smul_orthogonal_vadd\n\n",
 "dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The square of the distance from a point in `s` to `p2` equals the\nsum of the squares of the distances of the two points to the\n`orthogonal_projection`. -/\ntheorem dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq {s : AffineSubspace (exprℝ) P}\n    [Nonempty s] [CompleteSpace s.direction] {p1 : P} (p2 : P) (hp1 : p1 ∈ s) :\n    dist p1 p2 * dist p1 p2 =\n      dist p1 (orthogonal_projection s p2) * dist p1 (orthogonal_projection s p2) +\n        dist p2 (orthogonal_projection s p2) * dist p2 (orthogonal_projection s p2) :=\n  by\n  rw [dist_comm p2 _, dist_eq_norm_vsub V p1 _, dist_eq_norm_vsub V p1 _, dist_eq_norm_vsub V _ p2, ←\n    vsub_add_vsub_cancel p1 (orthogonal_projection s p2) p2, norm_add_sq_eq_norm_sq_add_norm_sq_iff_real_inner_eq_zero]\n  exact\n    submodule.inner_right_of_mem_orthogonal (vsub_orthogonal_projection_mem_direction p2 hp1)\n      (orthogonal_projection_vsub_mem_direction_orthogonal s p2)\n#align dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq dist_sq_eq_dist_orthogonal_projection_sq_add_dist_orthogonal_projection_sq\n\n",
 "dist_smul_vadd_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-- The squared distance between points on a line (expressed as a\nmultiple of a fixed vector added to a point) and another point,\nexpressed as a quadratic. -/\ntheorem dist_smul_vadd_sq (r : exprℝ) (v : V) (p₁ p₂ : P) :\n    dist («expr +ᵥ » («expr • » r v) p₁) p₂ * dist («expr +ᵥ » («expr • » r v) p₁) p₂ =\n      inner.real v v * r * r + 2 * inner.real v («expr -ᵥ » p₁ p₂) * r +\n        inner.real («expr -ᵥ » p₁ p₂) («expr -ᵥ » p₁ p₂) :=\n  by\n  rw [dist_eq_norm_vsub V _ p₂, ← real_inner_self_eq_norm_mul_norm, vadd_vsub_assoc, real_inner_add_add_self,\n    real_inner_smul_left, real_inner_smul_left, real_inner_smul_right]\n  ring\n#align dist_smul_vadd_sq dist_smul_vadd_sq\n\n",
 "dist_smul_vadd_eq_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `inner.real -/\n/-- The condition for two points on a line to be equidistant from\nanother point. -/\ntheorem dist_smul_vadd_eq_dist {v : V} (p₁ p₂ : P) (hv : v ≠ 0) (r : exprℝ) :\n    dist («expr +ᵥ » («expr • » r v) p₁) p₂ = dist p₁ p₂ ↔\n      r = 0 ∨ r = -2 * inner.real v («expr -ᵥ » p₁ p₂) / inner.real v v :=\n  by\n  conv_lhs =>\n    rw [← mul_self_inj_of_nonneg dist_nonneg dist_nonneg, dist_smul_vadd_sq, ← sub_eq_zero, add_sub_assoc,\n      dist_eq_norm_vsub V p₁ p₂, ← real_inner_self_eq_norm_mul_norm, sub_self]\n  have hvi : inner.real v v ≠ 0 := by simpa using hv\n  have hd :\n    discrim (inner.real v v) (2 * inner.real v («expr -ᵥ » p₁ p₂)) 0 =\n      2 * inner.real v («expr -ᵥ » p₁ p₂) * (2 * inner.real v («expr -ᵥ » p₁ p₂)) :=\n    by\n    rw [discrim]\n    ring\n  rw [quadratic_eq_zero_iff hvi hd, add_left_neg, zero_div, neg_mul_eq_neg_mul, ← mul_sub_right_distrib, sub_eq_add_neg,\n    ← mul_two, mul_assoc, mul_div_assoc, mul_div_mul_left, mul_div_assoc]\n  norm_num\n#align dist_smul_vadd_eq_dist dist_smul_vadd_eq_dist\n\n",
 "dist_reflection_eq_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A point in the subspace is equidistant from another point and its\nreflection. -/\ntheorem dist_reflection_eq_of_mem (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction] {p₁ : P}\n    (hp₁ : p₁ ∈ s) (p₂ : P) : dist p₁ (reflection s p₂) = dist p₁ p₂ :=\n  by\n  rw [← reflection_eq_self_iff p₁] at hp₁\n  convert(reflection s).dist_map p₁ p₂\n  rw [hp₁]\n#align dist_reflection_eq_of_mem dist_reflection_eq_of_mem\n\n",
 "dist_reflection":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The distance between `p₁` and the reflection of `p₂` equals that\nbetween the reflection of `p₁` and `p₂`. -/\ntheorem dist_reflection (s : AffineSubspace (exprℝ) P) [Nonempty s] [CompleteSpace s.direction] (p₁ p₂ : P) :\n    dist p₁ (reflection s p₂) = dist (reflection s p₁) p₂ :=\n  by\n  conv_lhs => rw [← reflection_reflection s p₁]\n  exact (reflection s).dist_map _ _\n#align dist_reflection dist_reflection\n\n",
 "dist_orthogonal_projection_ne_zero_of_not_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The distance between a point and its orthogonal projection is\nnonzero if it does not lie in the subspace. -/\ntheorem dist_orthogonal_projection_ne_zero_of_not_mem {s : AffineSubspace (exprℝ) P} [Nonempty s]\n    [CompleteSpace s.direction] {p : P} (hp : p ∉ s) : dist p (orthogonal_projection s p) ≠ 0 :=\n  mt dist_orthogonal_projection_eq_zero_iff.mp hp\n#align dist_orthogonal_projection_ne_zero_of_not_mem dist_orthogonal_projection_ne_zero_of_not_mem\n\n",
 "dist_orthogonal_projection_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The distance to a point's orthogonal projection is 0 iff it lies in the subspace. -/\ntheorem dist_orthogonal_projection_eq_zero_iff {s : AffineSubspace (exprℝ) P} [Nonempty s] [CompleteSpace s.direction]\n    {p : P} : dist p (orthogonal_projection s p) = 0 ↔ p ∈ s := by\n  rw [dist_comm, dist_eq_zero, orthogonal_projection_eq_self_iff]\n#align dist_orthogonal_projection_eq_zero_iff dist_orthogonal_projection_eq_zero_iff\n\n",
 "dist_left_midpoint_eq_dist_right_midpoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 Joseph Myers. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joseph Myers, Manuel Candales\n-/\n/-- The midpoint of the segment AB is the same distance from A as it is from B. -/\ntheorem dist_left_midpoint_eq_dist_right_midpoint (p1 p2 : P) :\n    dist p1 (midpoint (exprℝ) p1 p2) = dist p2 (midpoint (exprℝ) p1 p2) := by\n  rw [dist_left_midpoint p1 p2, dist_right_midpoint p1 p2]\n#align dist_left_midpoint_eq_dist_right_midpoint dist_left_midpoint_eq_dist_right_midpoint\n\n",
 "dist_affine_combination":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- The distance between two points given with `affine_combination`,\nin terms of the pairwise distances between the points in that\ncombination. -/\ntheorem dist_affine_combination {ι : Type _} {s : Finset ι} {w₁ w₂ : ι → exprℝ} (p : ι → P)\n    (h₁ : finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₁ i) = 1)\n    (h₂ :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (w₂ i) = 1) :\n    by\n    have a₁ := s.affine_combination (exprℝ) p w₁ <;> have a₂ := s.affine_combination (exprℝ) p w₂ <;>\n      exact\n        dist a₁ a₂ * dist a₁ a₂ =\n          -finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                  ((w₁ - w₂) i₁ * (w₁ - w₂) i₂ * (dist (p i₁) (p i₂) * dist (p i₁) (p i₂)))) /\n            2 :=\n  by\n  rw [dist_eq_norm_vsub V (s.affine_combination (exprℝ) p w₁) (s.affine_combination (exprℝ) p w₂), ←\n    @inner_self_eq_norm_mul_norm (exprℝ), Finset.affineCombination_vsub]\n  have h :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s ((w₁ - w₂) i) =\n      0 :=\n    by simp_rw [Pi.sub_apply, Finset.sum_sub_distrib, h₁, h₂, sub_self]\n  exact inner_weighted_vsub p h p h\n#align dist_affine_combination dist_affine_combination\n\n"}