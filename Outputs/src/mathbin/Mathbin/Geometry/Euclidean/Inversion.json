{"mul_dist_le_mul_dist_add_mul_dist":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr add_nonneg, \",\", expr mul_nonneg, \",\", expr dist_nonneg, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/-- **Ptolemy's inequality**: in a quadrangle `ABCD`, `|AC| * |BD| ≤ |AB| * |CD| + |BC| * |AD|`. If\n`ABCD` is a convex cyclic polygon, then this inequality becomes an equality, see\n`euclidean_geometry.mul_dist_add_mul_dist_eq_mul_dist_of_cospherical`.  -/\ntheorem mul_dist_le_mul_dist_add_mul_dist (a b c d : P) :\n    dist a c * dist b d ≤ dist a b * dist c d + dist b c * dist a d :=\n  by\n  -- If one of the points `b`, `c`, `d` is equal to `a`, then the inequality is trivial.\n  rcases eq_or_ne b a with (rfl | hb)\n  · rw [dist_self, zero_mul, zero_add]\n  rcases eq_or_ne c a with (rfl | hc)\n  · rw [dist_self, zero_mul]\n    trace\n      \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr add_nonneg, \\\",\\\", expr mul_nonneg, \\\",\\\", expr dist_nonneg, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n  rcases eq_or_ne d a with (rfl | hd)\n  · rw [dist_self, mul_zero, add_zero, dist_comm d, dist_comm d, mul_comm]\n  /- Otherwise, we apply the triangle inequality to `euclidean_geometry.inversion a 1 b`,\n    `euclidean_geometry.inversion a 1 c`, and `euclidean_geometry.inversion a 1 d`. -/\n  have H := dist_triangle (inversion a 1 b) (inversion a 1 c) (inversion a 1 d)\n  rw [dist_inversion_inversion hb hd, dist_inversion_inversion hb hc, dist_inversion_inversion hc hd, one_pow] at H\n  rw [← dist_pos] at hb hc hd\n  rw [← div_le_div_right (mul_pos hb (mul_pos hc hd))]\n  convert H <;>\n    · field_simp [hb.ne', hc.ne', hd.ne', dist_comm a]\n      ring\n#align mul_dist_le_mul_dist_add_mul_dist mul_dist_le_mul_dist_add_mul_dist\n\n",
 "inversion_vsub_center":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr -ᵥ » -/\n/-\nCopyright (c) 2022 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov\n-/\ntheorem inversion_vsub_center (c : P) (R : exprℝ) (x : P) :\n    «expr -ᵥ » (inversion c R x) c = «expr • » ((R / dist x c) ^ 2) («expr -ᵥ » x c) :=\n  vadd_vsub _ _\n#align inversion_vsub_center inversion_vsub_center\n\n",
 "inversion_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem inversion_surjective (c : P) {R : exprℝ} (hR : R ≠ 0) : surjective (inversion c R) :=\n  (inversion_involutive c hR).surjective\n#align inversion_surjective inversion_surjective\n\n",
 "inversion_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem inversion_self (c : P) (R : exprℝ) : inversion c R c = c := by simp [inversion]\n#align inversion_self inversion_self\n\n",
 "inversion_of_mem_sphere":
 "theorem inversion_of_mem_sphere (h : x ∈ metric.sphere c R) : inversion c R x = x :=\n  h.out ▸ inversion_dist_center c x\n#align inversion_of_mem_sphere inversion_of_mem_sphere\n\n",
 "inversion_involutive":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem inversion_involutive (c : P) {R : exprℝ} (hR : R ≠ 0) : involutive (inversion c R) :=\n  inversion_inversion c hR\n#align inversion_involutive inversion_involutive\n\n",
 "inversion_inversion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem inversion_inversion (c : P) {R : exprℝ} (hR : R ≠ 0) (x : P) : inversion c R (inversion c R x) = x :=\n  by\n  rcases eq_or_ne x c with (rfl | hne)\n  · rw [inversion_self, inversion_self]\n  · rw [inversion, dist_inversion_center, inversion_vsub_center, smul_smul, ← mul_pow, div_mul_div_comm,\n      div_mul_cancel _ (dist_ne_zero.2 hne), ← sq, div_self, one_pow, one_smul, vsub_vadd]\n    exact pow_ne_zero _ hR\n#align inversion_inversion inversion_inversion\n\n",
 "inversion_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem inversion_injective (c : P) {R : exprℝ} (hR : R ≠ 0) : injective (inversion c R) :=\n  (inversion_involutive c hR).injective\n#align inversion_injective inversion_injective\n\n",
 "inversion_dist_center":
 "@[simp]\ntheorem inversion_dist_center (c x : P) : inversion c (dist x c) x = x :=\n  by\n  rcases eq_or_ne x c with (rfl | hne)\n  · apply inversion_self\n  · rw [inversion, div_self, one_pow, one_smul, vsub_vadd]\n    rwa [dist_ne_zero]\n#align inversion_dist_center inversion_dist_center\n\n",
 "inversion_bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem inversion_bijective (c : P) {R : exprℝ} (hR : R ≠ 0) : bijective (inversion c R) :=\n  (inversion_involutive c hR).bijective\n#align inversion_bijective inversion_bijective\n\n",
 "dist_inversion_inversion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Distance between the images of two points under an inversion. -/\ntheorem dist_inversion_inversion (hx : x ≠ c) (hy : y ≠ c) (R : exprℝ) :\n    dist (inversion c R x) (inversion c R y) = R ^ 2 / (dist x c * dist y c) * dist x y :=\n  by\n  dsimp only [inversion]\n  simp_rw [dist_vadd_cancel_right, dist_eq_norm_vsub V _ c]\n  simpa only [dist_vsub_cancel_right] using dist_div_norm_sq_smul (vsub_ne_zero.2 hx) (vsub_ne_zero.2 hy) R\n#align dist_inversion_inversion dist_inversion_inversion\n\n",
 "dist_inversion_center":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Distance from the image of a point under inversion to the center. This formula accidentally\nworks for `x = c`. -/\ntheorem dist_inversion_center (c x : P) (R : exprℝ) : dist (inversion c R x) c = R ^ 2 / dist x c :=\n  by\n  rcases eq_or_ne x c with (rfl | hx)\n  · simp\n  have : dist x c ≠ 0 := dist_ne_zero.2 hx\n  field_simp [inversion, norm_smul, abs_div, ← dist_eq_norm_vsub, sq, mul_assoc]\n#align dist_inversion_center dist_inversion_center\n\n",
 "dist_center_inversion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Distance from the center of an inversion to the image of a point under the inversion. This\nformula accidentally works for `x = c`. -/\ntheorem dist_center_inversion (c x : P) (R : exprℝ) : dist c (inversion c R x) = R ^ 2 / dist c x := by\n  rw [dist_comm c, dist_comm c, dist_inversion_center]\n#align dist_center_inversion dist_center_inversion\n\n"}