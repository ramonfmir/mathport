{"sum_range_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- **Faulhaber's theorem** relating the **sum of of p-th powers** to the Bernoulli numbers:\n$$\\sum_{k=0}^{n-1} k^p = \\sum_{i=0}^p B_i\\binom{p+1}{i}\\frac{n^{p+1-i}}{p+1}.$$\nSee https://proofwiki.org/wiki/Faulhaber%27s_Formula and [orosi2018faulhaber] for\nthe proof provided here. -/\ntheorem sum_range_pow (n p : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        ((k : exprℚ) ^ p) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range (p + 1))\n        (bernoulli i * (p + 1).choose i * n ^ (p + 1 - i) / (p + 1)) :=\n  by\n  have hne : ∀ m : ℕ, (nat.factorial m : exprℚ) ≠ 0 := fun m => by exact_mod_cast factorial_ne_zero m\n  -- compute the Cauchy product of two power series\n  have h_cauchy :\n    ((mk fun p => bernoulli p / nat.factorial p) * mk fun q => coeff (exprℚ) (q + 1) (exp (exprℚ) ^ n)) =\n      mk fun p =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range (p + 1))\n          (bernoulli i * (p + 1).choose i * n ^ (p + 1 - i) / nat.factorial (p + 1)) :=\n    by\n    ext q : 1\n    let f a b := bernoulli a / nat.factorial a * coeff (exprℚ) (b + 1) (exp (exprℚ) ^ n)\n    -- key step: use `power_series.coeff_mul` and then rewrite sums\n    simp only [coeff_mul, coeff_mk, cast_mul, sum_antidiagonal_eq_sum_range_succ f]\n    apply sum_congr rfl\n    simp_intro m h only [Finset.mem_range]\n    simp only [f, exp_pow_eq_rescale_exp, rescale, one_div, coeff_mk, RingHom.coe_mk, coeff_exp, RingHom.id_apply,\n      cast_mul, algebraMap_rat_rat]\n    -- manipulate factorials and binomial coefficients\n    rw [choose_eq_factorial_div_factorial h.le, eq_comm, div_eq_iff (hne q.succ), succ_eq_add_one,\n      mul_assoc _ _ ↑(nat.factorial q.succ), mul_comm _ ↑(nat.factorial q.succ), ← mul_assoc, div_mul_eq_mul_div,\n      mul_comm (↑n ^ (q - m + 1)), ← mul_assoc _ _ (↑n ^ (q - m + 1)), ← one_div, mul_one_div, div_div,\n      tsub_add_eq_add_tsub (le_of_lt_succ h), cast_div, cast_mul]\n    · ring\n    · exact factorial_mul_factorial_dvd_factorial h.le\n    · simp [hne]\n  -- same as our goal except we pull out `p!` for convenience\n  have hps :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n) (↑k ^ p) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range (p + 1))\n          (bernoulli i * (p + 1).choose i * n ^ (p + 1 - i) / nat.factorial (p + 1)) *\n        nat.factorial p :=\n    by\n    suffices\n      (mk fun p =>\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n            (↑k ^ p * algebraMap (exprℚ) (exprℚ) (nat.factorial p)⁻¹)) =\n        mk fun p =>\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            (range (p + 1)) (bernoulli i * (p + 1).choose i * n ^ (p + 1 - i) / nat.factorial (p + 1))\n      by\n      rw [← div_eq_iff (hne p), div_eq_mul_inv, sum_mul]\n      rw [power_series.ext_iff] at this\n      simpa using this p\n    -- the power series `exp ℚ - 1` is non-zero, a fact we need in order to use `mul_right_inj'`\n    have hexp : exp (exprℚ) - 1 ≠ 0 :=\n      by\n      simp only [exp, power_series.ext_iff, ne, not_forall]\n      use 1\n      simp\n    have h_r : exp (exprℚ) ^ n - 1 = X * mk fun p => coeff (exprℚ) (p + 1) (exp (exprℚ) ^ n) :=\n      by\n      have h_const : C (exprℚ) (constant_coeff (exprℚ) (exp (exprℚ) ^ n)) = 1 := by simp\n      rw [← h_const, sub_const_eq_X_mul_shift]\n    -- key step: a chain of equalities of power series\n    rw [← mul_right_inj' hexp, mul_comm, ← exp_pow_sum, geom_sum_mul, h_r, ← bernoulli_power_series_mul_exp_sub_one,\n      bernoulli_power_series, mul_right_comm]\n    simp [h_cauchy, mul_comm]\n  -- massage `hps` into our goal\n  rw [hps, sum_mul]\n  refine' sum_congr rfl fun x hx => _\n  field_simp [mul_right_comm _ ↑(nat.factorial p), ← mul_assoc _ _ ↑(nat.factorial p), cast_add_one_ne_zero, hne]\n#align sum_range_pow sum_range_pow\n\n",
 "sum_bernoulli'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem sum_bernoulli' (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        ((n.choose k : exprℚ) * bernoulli' k) =\n      n :=\n  by\n  cases n\n  · simp\n  suffices\n    (n + 1 : exprℚ) *\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (↑(n.choose k) / (n - k + 1) * bernoulli' k) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        (↑(n.succ.choose x) * bernoulli' x)\n    by\n    rw_mod_cast [sum_range_succ, bernoulli'_def, ← this, choose_succ_self_right]\n    ring\n  simp_rw [mul_sum, ← mul_assoc]\n  refine' sum_congr rfl fun k hk => _\n  congr\n  have : ((n - k : ℕ) : exprℚ) + 1 ≠ 0 := by apply_mod_cast succ_ne_zero\n  field_simp [← cast_sub (mem_range.1 hk).le, mul_comm]\n  rw_mod_cast [tsub_add_eq_add_tsub (mem_range.1 hk).le, choose_mul_succ_eq]\n#align sum_bernoulli' sum_bernoulli'\n\n",
 "sum_bernoulli":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem sum_bernoulli (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        ((n.choose k : exprℚ) * bernoulli k) =\n      if n = 1 then 1 else 0 :=\n  by\n  cases n\n  · simp\n  cases n\n  · simp\n  suffices\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n        (↑((n + 2).choose (i + 2)) * bernoulli (i + 2)) =\n      n / 2\n    by\n    simp only [this, sum_range_succ', cast_succ, bernoulli_one, bernoulli_zero, choose_one_right, mul_one,\n      choose_zero_right, cast_zero, if_false, zero_add, succ_succ_ne_one]\n    ring\n  have f := sum_bernoulli' n.succ.succ\n  simp_rw [sum_range_succ', bernoulli'_one, choose_one_right, cast_succ, ← eq_sub_iff_add_eq] at f\n  convert f\n  · funext x\n    rw [bernoulli_eq_bernoulli'_of_ne_one (succ_ne_zero x ∘ succ.inj)]\n  · simp only [one_div, mul_one, bernoulli'_zero, cast_one, choose_zero_right, add_sub_cancel]\n    ring\n#align sum_bernoulli sum_bernoulli\n\n",
 "sum_Ico_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- Alternate form of **Faulhaber's theorem**, relating the sum of p-th powers to the Bernoulli\nnumbers: $$\\sum_{k=1}^{n} k^p = \\sum_{i=0}^p (-1)^iB_i\\binom{p+1}{i}\\frac{n^{p+1-i}}{p+1}.$$\nDeduced from `sum_range_pow`. -/\ntheorem sum_Ico_pow (n p : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Ico 1 (n + 1))\n        ((k : exprℚ) ^ p) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range (p + 1))\n        (bernoulli' i * (p + 1).choose i * n ^ (p + 1 - i) / (p + 1)) :=\n  by\n  rw [← Nat.cast_succ]\n  -- dispose of the trivial case\n  cases p\n  · simp\n  let f i := bernoulli i * p.succ.succ.choose i * n ^ (p.succ.succ - i) / p.succ.succ\n  let f' i := bernoulli' i * p.succ.succ.choose i * n ^ (p.succ.succ - i) / p.succ.succ\n  suffices\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Ico 1 n.succ)\n        (↑k ^ p.succ) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (range p.succ.succ) (f' i)\n    by convert this\n  -- prove some algebraic facts that will make things easier for us later on\n  have hle := nat.le_add_left 1 n\n  have hne : (p + 1 + 1 : exprℚ) ≠ 0 := by exact_mod_cast succ_ne_zero p.succ\n  have h1 : ∀ r : exprℚ, r * (p + 1 + 1) * n ^ p.succ / (p + 1 + 1 : exprℚ) = r * n ^ p.succ := fun r => by\n    rw [mul_div_right_comm, mul_div_cancel _ hne]\n  have h2 : f 1 + n ^ p.succ = 1 / 2 * n ^ p.succ :=\n    by\n    simp_rw [f, bernoulli_one, choose_one_right, succ_sub_succ_eq_sub, cast_succ, tsub_zero, h1]\n    ring\n  have :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range p)\n        (bernoulli (i + 2) * (p + 2).choose (i + 2) * n ^ (p - i) / ↑(p + 2)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range p)\n        (bernoulli' (i + 2) * (p + 2).choose (i + 2) * n ^ (p - i) / ↑(p + 2)) :=\n    sum_congr rfl fun i h => by rw [bernoulli_eq_bernoulli'_of_ne_one (succ_succ_ne_one i)]\n  calc\n    -- replace sum over `Ico` with sum over `range` and simplify\n          finset.sum\n          \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Ico 1 n.succ)\n          (↑k ^ p.succ) =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n.succ)\n          (↑k ^ p.succ) :=\n      by simp [sum_Ico_eq_sub _ hle, succ_ne_zero]\n    -- extract the last term of the sum\n        _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n            ((k : exprℚ) ^ p.succ) +\n          n ^ p.succ :=\n      by rw [sum_range_succ]\n    -- apply the key lemma, `sum_range_pow`\n        _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            (range p.succ.succ) (f i) +\n          n ^ p.succ :=\n      by simp [f, sum_range_pow]\n    -- extract the first two terms of the sum\n        _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range p)\n                (f i.succ.succ) +\n              f 1 +\n            f 0 +\n          n ^ p.succ :=\n      by simp_rw [sum_range_succ']\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range p)\n              (f i.succ.succ) +\n            (f 1 + n ^ p.succ) +\n          f 0 :=\n      by ring\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range p)\n              (f i.succ.succ) +\n            1 / 2 * n ^ p.succ +\n          f 0 :=\n      by rw [h2]\n    -- convert from `bernoulli` to `bernoulli'`\n        _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range p)\n              (f' i.succ.succ) +\n            f' 1 +\n          f' 0 :=\n      by\n      simp only [f, f']\n      simpa [h1, fun i => show i + 2 = i + 1 + 1 from rfl]\n    -- rejoin the first two terms of the sum\n        _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n          (range p.succ.succ) (f' i) :=\n      by simp_rw [sum_range_succ']\n    \n#align sum_Ico_pow sum_Ico_pow\n\n",
 "bernoulli_zero":
 "@[simp]\ntheorem bernoulli_zero : bernoulli 0 = 1 := by simp [bernoulli]\n#align bernoulli_zero bernoulli_zero\n\n",
 "bernoulli_spec'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem bernoulli_spec' (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (antidiagonal n)\n        (((k.1 + k.2).choose k.2 : exprℚ) / (k.2 + 1) * bernoulli k.1) =\n      if n = 0 then 1 else 0 :=\n  by\n  cases n; · simp\n  rw [if_neg (succ_ne_zero _)]\n  -- algebra facts\n  have h₁ : (1, n) ∈ antidiagonal n.succ := by simp [mem_antidiagonal, add_comm]\n  have h₂ : (n : exprℚ) + 1 ≠ 0 := by apply_mod_cast succ_ne_zero\n  have h₃ : (1 + n).choose n = n + 1 := by simp [add_comm]\n  -- key equation: the corresponding fact for `bernoulli'`\n  have H := bernoulli'_spec' n.succ\n  -- massage it to match the structure of the goal, then convert piece by piece\n  rw [sum_eq_add_sum_diff_singleton h₁] at H⊢\n  apply add_eq_of_eq_sub'\n  convert eq_sub_of_add_eq' H using 1\n  · refine' sum_congr rfl fun p h => _\n    obtain ⟨h', h''⟩ : p ∈ _ ∧ p ≠ _ := by rwa [mem_sdiff, mem_singleton] at h\n    simp [bernoulli_eq_bernoulli'_of_ne_one ((not_congr (antidiagonal_congr h' h₁)).mp h'')]\n  · field_simp [h₃]\n    norm_num\n#align bernoulli_spec' bernoulli_spec'\n\n",
 "bernoulli_power_series_mul_exp_sub_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem bernoulli_power_series_mul_exp_sub_one : bernoulli_power_series A * (exp A - 1) = X :=\n  by\n  ext n\n  -- constant coefficient is a special case\n  cases n;\n  · simp\n  simp only [bernoulli_power_series, coeff_mul, coeff_X, sum_antidiagonal_succ', one_div, coeff_mk, coeff_one,\n    coeff_exp, LinearMap.map_sub, factorial, if_pos, cast_succ, cast_one, cast_mul, sub_zero, RingHom.map_one,\n    add_eq_zero_iff, if_false, _root_.inv_one, zero_add, one_ne_zero, MulZeroClass.mul_zero, and_false_iff, sub_self, ←\n    RingHom.map_mul, ← RingHom.map_sum]\n  cases n; · simp\n  rw [if_neg n.succ_succ_ne_one]\n  have hfact : ∀ m, (nat.factorial m : exprℚ) ≠ 0 := fun m => by exact_mod_cast factorial_ne_zero m\n  have hite2 : ite (n.succ = 0) 1 0 = (0 : exprℚ) := if_neg n.succ_ne_zero\n  rw [← map_zero (algebraMap (exprℚ) A), ← zero_div (nat.factorial n.succ : exprℚ), ← hite2, ← bernoulli_spec', sum_div]\n  refine' congr_arg (algebraMap (exprℚ) A) (sum_congr rfl fun x h => eq_div_of_mul_eq (hfact n.succ) _)\n  rw [mem_antidiagonal] at h\n  have hj : (x.2 + 1 : exprℚ) ≠ 0 := by exact_mod_cast succ_ne_zero _\n  field_simp [← h, mul_ne_zero hj (hfact x.2), hfact x.1, mul_comm _ (bernoulli x.1), mul_assoc, add_choose,\n    cast_div_char_zero (factorial_mul_factorial_dvd_factorial_add _ _), Nat.factorial_ne_zero, hj]\n  cc\n#align bernoulli_power_series_mul_exp_sub_one bernoulli_power_series_mul_exp_sub_one\n\n",
 "bernoulli_one":
 "@[simp]\ntheorem bernoulli_one : bernoulli 1 = -1 / 2 := by norm_num [bernoulli]\n#align bernoulli_one bernoulli_one\n\n",
 "bernoulli_eq_bernoulli'_of_ne_one":
 "theorem bernoulli_eq_bernoulli'_of_ne_one {n : ℕ} (hn : n ≠ 1) : bernoulli n = bernoulli' n :=\n  by\n  by_cases h0 : n = 0; · simp [h0]\n  rw [bernoulli, neg_one_pow_eq_pow_mod_two]\n  cases mod_two_eq_zero_or_one n; · simp [h]\n  simp [bernoulli'_odd_eq_zero (odd_iff.mpr h) (one_lt_iff_ne_zero_and_ne_one.mpr ⟨h0, hn⟩)]\n#align bernoulli_eq_bernoulli'_of_ne_one bernoulli_eq_bernoulli'_of_ne_one\n\n",
 "bernoulli'_zero":
 "@[simp]\ntheorem bernoulli'_zero : bernoulli' 0 = 1 := by\n  rw [bernoulli'_def]\n  norm_num\n#align bernoulli'_zero bernoulli'_zero\n\n",
 "bernoulli'_two":
 "@[simp]\ntheorem bernoulli'_two : bernoulli' 2 = 1 / 6 := by\n  rw [bernoulli'_def]\n  norm_num [sum_range_succ]\n#align bernoulli'_two bernoulli'_two\n\n",
 "bernoulli'_three":
 "@[simp]\ntheorem bernoulli'_three : bernoulli' 3 = 0 := by\n  rw [bernoulli'_def]\n  norm_num [sum_range_succ]\n#align bernoulli'_three bernoulli'_three\n\n",
 "bernoulli'_spec'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem bernoulli'_spec' (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (antidiagonal n)\n        (((k.1 + k.2).choose k.2 : exprℚ) / (k.2 + 1) * bernoulli' k.1) =\n      1 :=\n  by\n  refine' ((sum_antidiagonal_eq_sum_range_succ_mk _ n).trans _).trans (bernoulli'_spec n)\n  refine' sum_congr rfl fun x hx => _\n  simp only [add_tsub_cancel_of_le, mem_range_succ_iff.mp hx, cast_sub]\n#align bernoulli'_spec' bernoulli'_spec'\n\n",
 "bernoulli'_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem bernoulli'_spec (n : ℕ) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n.succ)\n        ((n.choose (n - k) : exprℚ) / (n - k + 1) * bernoulli' k) =\n      1 :=\n  by\n  rw [sum_range_succ_comm, bernoulli'_def n, tsub_self]\n  conv in n.choose (_ - _) => rw [choose_symm (mem_range.1 H).le]\n  simp only [one_mul, cast_one, sub_self, sub_add_cancel, choose_zero_right, zero_add, div_one]\n#align bernoulli'_spec bernoulli'_spec\n\n",
 "bernoulli'_power_series_mul_exp_sub_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem bernoulli'_power_series_mul_exp_sub_one : bernoulli'_power_series A * (exp A - 1) = X * exp A :=\n  by\n  ext n\n  -- constant coefficient is a special case\n  cases n\n  · simp\n  rw [bernoulli'_power_series, coeff_mul, mul_comm X, sum_antidiagonal_succ']\n  suffices\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (antidiagonal n)\n        (bernoulli' p.1 / nat.factorial p.1 * ((p.2 + 1) * nat.factorial p.2)⁻¹) =\n      (nat.factorial n)⁻¹\n    by simpa [RingHom.map_sum] using congr_arg (algebraMap (exprℚ) A) this\n  apply eq_inv_of_mul_eq_one_left\n  rw [sum_mul]\n  convert bernoulli'_spec' n using 1\n  apply sum_congr rfl\n  simp_rw [mem_antidiagonal]\n  rintro ⟨i, j⟩ rfl\n  have : (j + 1 : exprℚ) ≠ 0 := by exact_mod_cast succ_ne_zero j\n  have : (j + 1 : exprℚ) * nat.factorial j * nat.factorial i ≠ 0 := by simpa [factorial_ne_zero]\n  have := factorial_mul_factorial_dvd_factorial_add i j\n  field_simp [mul_comm _ (bernoulli' i), mul_assoc, add_choose]\n  rw_mod_cast [mul_comm (j + 1), mul_div_assoc, ← mul_assoc]\n  rw [cast_mul, cast_mul, mul_div_mul_right, cast_div_char_zero, cast_mul]\n  assumption\n  rwa [Nat.cast_succ]\n#align bernoulli'_power_series_mul_exp_sub_one bernoulli'_power_series_mul_exp_sub_one\n\n",
 "bernoulli'_one":
 "@[simp]\ntheorem bernoulli'_one : bernoulli' 1 = 1 / 2 := by\n  rw [bernoulli'_def]\n  norm_num\n#align bernoulli'_one bernoulli'_one\n\n",
 "bernoulli'_odd_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- Odd Bernoulli numbers (greater than 1) are zero. -/\ntheorem bernoulli'_odd_eq_zero {n : ℕ} (h_odd : Odd n) (hlt : 1 < n) : bernoulli' n = 0 :=\n  by\n  let B := mk fun n => bernoulli' n / nat.factorial n\n  suffices (B - eval_neg_hom B) * (exp (exprℚ) - 1) = X * (exp (exprℚ) - 1)\n    by\n    cases mul_eq_mul_right_iff.mp this <;> simp only [power_series.ext_iff, eval_neg_hom, coeff_X] at h\n    · apply eq_zero_of_neg_eq\n      specialize h n\n      split_ifs  at h <;> simp_all [h_odd.neg_one_pow, factorial_ne_zero]\n    · simpa using h 1\n  have h : B * (exp (exprℚ) - 1) = X * exp (exprℚ) := by\n    simpa [bernoulli'_power_series] using bernoulli'_power_series_mul_exp_sub_one (exprℚ)\n  rw [sub_mul, h, mul_sub X, sub_right_inj, ← neg_sub, mul_neg, neg_eq_iff_eq_neg]\n  suffices eval_neg_hom (B * (exp (exprℚ) - 1)) * exp (exprℚ) = eval_neg_hom (X * exp (exprℚ)) * exp (exprℚ) by\n    simpa [mul_assoc, sub_mul, mul_comm (eval_neg_hom (exp (exprℚ))), exp_mul_exp_neg_eq_one]\n  congr\n#align bernoulli'_odd_eq_zero bernoulli'_odd_eq_zero\n\n",
 "bernoulli'_four":
 "@[simp]\ntheorem bernoulli'_four : bernoulli' 4 = -1 / 30 :=\n  by\n  have : Nat.choose 4 2 = 6 := by decide\n  -- shrug\n  rw [bernoulli'_def]\n  norm_num [sum_range_succ, this]\n#align bernoulli'_four bernoulli'_four\n\n",
 "bernoulli'_eq_bernoulli":
 "theorem bernoulli'_eq_bernoulli (n : ℕ) : bernoulli' n = (-1) ^ n * bernoulli n := by\n  simp [bernoulli, ← mul_assoc, ← sq, ← pow_mul, mul_comm n 2, pow_mul]\n#align bernoulli'_eq_bernoulli bernoulli'_eq_bernoulli\n\n",
 "bernoulli'_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Kevin Buzzard\n-/\ntheorem bernoulli'_def' (n : ℕ) :\n    bernoulli' n =\n      1 -\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          (n.choose k / (n - k + 1) * bernoulli' k) :=\n  well_founded.fix_eq _ _ _\n#align bernoulli'_def' bernoulli'_def'\n\n",
 "bernoulli'_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem bernoulli'_def (n : ℕ) :\n    bernoulli' n =\n      1 -\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n          (n.choose k / (n - k + 1) * bernoulli' k) :=\n  by\n  rw [bernoulli'_def', ← Fin.sum_univ_eq_sum_range]\n  rfl\n#align bernoulli'_def bernoulli'_def\n\n"}