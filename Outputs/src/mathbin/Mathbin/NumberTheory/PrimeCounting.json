{"prime_nth_prime":
 "@[simp]\ntheorem prime_nth_prime (n : ℕ) : Prime (nth Prime n) :=\n  nth_mem_of_infinite _ infinite_setOf_prime _\n#align prime_nth_prime prime_nth_prime\n\n",
 "prime_counting'_nth_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n@[simp]\ntheorem prime_counting'_nth_eq (n : ℕ) : (prime_counting') (nth Prime n) = n :=\n  count_nth_of_infinite _ infinite_setOf_prime _\n#align prime_counting'_nth_eq prime_counting'_nth_eq\n\n",
 "prime_counting'_add_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `prime_counting' -/\n/-- A linear upper bound on the size of the `prime_counting'` function -/\ntheorem prime_counting'_add_le {a k : ℕ} (h0 : 0 < a) (h1 : a < k) (n : ℕ) :\n    (prime_counting') (k + n) ≤ (prime_counting') k + Nat.totient a * (n / a + 1) :=\n  calc\n    (prime_counting') (k + n) ≤ ((range k).filter Prime).card + ((Ico k (k + n)).filter Prime).card :=\n      by\n      rw [prime_counting', count_eq_card_filter_range, range_eq_Ico, ← Ico_union_Ico_eq_Ico (zero_le k) le_self_add,\n        filter_union]\n      apply card_union_le\n    _ ≤ (prime_counting') k + ((Ico k (k + n)).filter Prime).card := by rw [prime_counting', count_eq_card_filter_range]\n    _ ≤ (prime_counting') k + ((Ico k (k + n)).filter (coprime a)).card :=\n      by\n      refine' add_le_add_left (card_le_of_subset _) k.prime_counting'\n      simp only [subset_iff, and_imp, mem_filter, mem_Ico]\n      intro p succ_k_le_p p_lt_n p_prime\n      constructor\n      · exact ⟨succ_k_le_p, p_lt_n⟩\n      · rw [coprime_comm]\n        exact coprime_of_lt_prime h0 (gt_of_ge_of_gt succ_k_le_p h1) p_prime\n    _ ≤ (prime_counting') k + totient a * (n / a + 1) :=\n      by\n      rw [add_le_add_iff_left]\n      exact Ico_filter_coprime_le k n h0\n    \n#align prime_counting'_add_le prime_counting'_add_le\n\n",
 "monotone_prime_counting'":
 "/-\nCopyright (c) 2021 Bolton Bailey. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bolton Bailey\n-/\ntheorem monotone_prime_counting' : Monotone prime_counting' :=\n  count_monotone Prime\n#align monotone_prime_counting' monotone_prime_counting'\n\n",
 "monotone_prime_counting":
 "theorem monotone_prime_counting : Monotone prime_counting :=\n  monotone_prime_counting'.comp (monotone_id.add_const _)\n#align monotone_prime_counting monotone_prime_counting\n\n"}