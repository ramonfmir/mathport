{"real_main_inequality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 Patrick Stevens. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Stevens, Bolton Bailey\n-/\n/-- A reified version of the `bertrand.main_inequality` below.\nThis is not best possible: it actually holds for 464 ≤ x.\n-/\ntheorem real_main_inequality {x : exprℝ} (n_large : (512 : exprℝ) ≤ x) :\n    x * (2 * x) ^ sqrt (2 * x) * 4 ^ (2 * x / 3) ≤ 4 ^ x :=\n  by\n  let f : exprℝ → exprℝ := fun x => log x + sqrt (2 * x) * log (2 * x) - log 4 / 3 * x\n  have hf' : ∀ x, 0 < x → 0 < x * (2 * x) ^ sqrt (2 * x) / 4 ^ (x / 3) := fun x h =>\n    div_pos (mul_pos h (rpow_pos_of_pos (mul_pos two_pos h) _)) (rpow_pos_of_pos four_pos _)\n  have hf : ∀ x, 0 < x → f x = log (x * (2 * x) ^ sqrt (2 * x) / 4 ^ (x / 3)) :=\n    by\n    intro x h5\n    have h6 := mul_pos (zero_lt_two' (exprℝ)) h5\n    have h7 := rpow_pos_of_pos h6 (sqrt (2 * x))\n    rw [log_div (mul_pos h5 h7).ne' (rpow_pos_of_pos four_pos _).ne', log_mul h5.ne' h7.ne', log_rpow h6,\n      log_rpow zero_lt_four, ← mul_div_right_comm, ← mul_div, mul_comm x]\n  have h5 : 0 < x := lt_of_lt_of_le (by norm_num1) n_large\n  rw [← div_le_one (rpow_pos_of_pos four_pos x), ← div_div_eq_mul_div, ← rpow_sub four_pos, ← mul_div 2 x,\n    mul_div_left_comm, ← mul_one_sub, (by norm_num1 : (1 : exprℝ) - 2 / 3 = 1 / 3), mul_one_div, ←\n    log_nonpos_iff (hf' x h5), ← hf x h5]\n  have h : ConcaveOn (exprℝ) (Set.Ioi 0.5) f := by\n    refine'\n        ((strict_concave_on_log_Ioi.concave_on.subset (Set.Ioi_subset_Ioi _) (convex_Ioi 0.5)).add\n              ((strict_concave_on_sqrt_mul_log_Ioi.concave_on.comp_linear_map\n                    («expr • » (2 : exprℝ) LinearMap.id)).subset\n                (fun a ha => lt_of_eq_of_lt _ ((mul_lt_mul_left two_pos).mpr ha)) (convex_Ioi 0.5))).sub\n          ((convexOn_id (convex_Ioi (0.5 : exprℝ))).smul (div_nonneg (log_nonneg _) _)) <;>\n      norm_num1\n  suffices ∃ x1 x2, 0.5 < x1 ∧ x1 < x2 ∧ x2 ≤ x ∧ 0 ≤ f x1 ∧ f x2 ≤ 0\n    by\n    obtain ⟨x1, x2, h1, h2, h0, h3, h4⟩ := this\n    exact (h.right_le_of_le_left'' h1 ((h1.trans h2).trans_le h0) h2 h0 (h4.trans h3)).trans h4\n  refine' ⟨18, 512, by norm_num1, by norm_num1, le_trans (by norm_num1) n_large, _, _⟩\n  · have : sqrt (2 * 18) = 6 := (sqrt_eq_iff_mul_self_eq_of_pos (by norm_num1)).mpr (by norm_num1)\n    rw [hf, log_nonneg_iff (hf' 18 _), this] <;> norm_num1\n  · have : sqrt (2 * 512) = 32 := (sqrt_eq_iff_mul_self_eq_of_pos (by norm_num1)).mpr (by norm_num1)\n    rw [hf, log_nonpos_iff (hf' _ _), this, div_le_one (rpow_pos_of_pos four_pos _), ←\n        rpow_le_rpow_iff _ (rpow_pos_of_pos four_pos _).le three_pos, ← rpow_mul] <;>\n      norm_num1\n#align real_main_inequality real_main_inequality\n\n",
 "exists_prime_lt_and_le_two_mul_succ":
 "/-- Proves that Bertrand's postulate holds over all positive naturals less than n by identifying a\ndescending list of primes, each no more than twice the next, such that the list contains a witness\nfor each number ≤ n.\n-/\ntheorem exists_prime_lt_and_le_two_mul_succ {n} (q) {p : ℕ} (prime_p : Nat.Prime p) (covering : p ≤ 2 * q)\n    (H : n < q → ∃ p : ℕ, p.prime ∧ n < p ∧ p ≤ 2 * n) (hn : n < p) : ∃ p : ℕ, p.prime ∧ n < p ∧ p ≤ 2 * n :=\n  by\n  by_cases p ≤ 2 * n; · exact ⟨p, prime_p, hn, h⟩\n  exact H (lt_of_mul_lt_mul_left' (lt_of_lt_of_le (not_le.1 h) covering))\n#align exists_prime_lt_and_le_two_mul_succ exists_prime_lt_and_le_two_mul_succ\n\n",
 "exists_prime_lt_and_le_two_mul_eventually":
 "/-- Proves that Bertrand's postulate holds for all sufficiently large `n`.\n-/\ntheorem exists_prime_lt_and_le_two_mul_eventually (n : ℕ) (n_big : 512 ≤ n) : ∃ p : ℕ, p.prime ∧ n < p ∧ p ≤ 2 * n :=\n  by\n  -- Assume there is no prime in the range.\n  by_contra no_prime\n  -- Then we have the above sub-exponential bound on the size of this central binomial coefficient.\n  -- We now couple this bound with an exponential lower bound on the central binomial coefficient,\n  -- yielding an inequality which we have seen is false for large enough n.\n  have H1 : n * (2 * n) ^ sqrt (2 * n) * 4 ^ (2 * n / 3) ≤ 4 ^ n := bertrand_main_inequality n_big\n  have H2 : 4 ^ n < n * n.central_binom := Nat.four_pow_lt_mul_centralBinom n (le_trans (by norm_num1) n_big)\n  have H3 : n.central_binom ≤ (2 * n) ^ sqrt (2 * n) * 4 ^ (2 * n / 3) :=\n    central_binom_le_of_no_bertrand_prime n (lt_of_lt_of_le (by norm_num1) n_big) no_prime\n  rw [mul_assoc] at H1; exact not_le.2 H2 ((mul_le_mul_left' H3 n).trans H1)\n#align exists_prime_lt_and_le_two_mul_eventually exists_prime_lt_and_le_two_mul_eventually\n\n",
 "exists_prime_lt_and_le_two_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:330:4: warning: unsupported (TODO): `[tacs] -/\n/-- **Bertrand's Postulate**: For any positive natural number, there is a prime which is greater than\nit, but no more than twice as large.\n-/\ntheorem exists_prime_lt_and_le_two_mul (n : ℕ) (hn0 : n ≠ 0) : ∃ p, Nat.Prime p ∧ n < p ∧ p ≤ 2 * n :=\n  by\n  -- Split into cases whether `n` is large or small\n  cases lt_or_le 511 n\n  -- If `n` is large, apply the lemma derived from the inequalities on the central binomial\n  -- coefficient.\n  · exact exists_prime_lt_and_le_two_mul_eventually n h\n  replace h : n < 521 := h.trans_lt (by norm_num1)\n  revert h\n  -- For small `n`, supply a list of primes to cover the initial cases.\n  run_tac\n    [317, 163, 83, 43, 23, 13, 7, 5, 3, 2].mmap' fun n => sorry\n  exact fun h2 => ⟨2, prime_two, h2, nat.mul_le_mul_left 2 (nat.pos_of_ne_zero hn0)⟩\n#align exists_prime_lt_and_le_two_mul exists_prime_lt_and_le_two_mul\n\n",
 "central_binom_le_of_no_bertrand_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/-- An upper bound on the central binomial coefficient used in the proof of Bertrand's postulate.\nThe bound splits the prime factors of `central_binom n` into those\n1. At most `sqrt (2 * n)`, which contribute at most `2 * n` for each such prime.\n2. Between `sqrt (2 * n)` and `2 * n / 3`, which contribute at most `4^(2 * n / 3)` in total.\n3. Between `2 * n / 3` and `n`, which do not exist.\n4. Between `n` and `2 * n`, which would not exist in the case where Bertrand's postulate is false.\n5. Above `2 * n`, which do not exist.\n-/\ntheorem central_binom_le_of_no_bertrand_prime (n : ℕ) (n_big : 2 < n)\n    (no_prime : ¬∃ p : ℕ, Nat.Prime p ∧ n < p ∧ p ≤ 2 * n) :\n    centralBinom n ≤ (2 * n) ^ sqrt (2 * n) * 4 ^ (2 * n / 3) :=\n  by\n  have n_pos : 0 < n := (nat.zero_le _).trans_lt n_big\n  have n2_pos : 1 ≤ 2 * n := mul_pos (zero_lt_two' ℕ) n_pos\n  let S := (Finset.range (2 * n / 3 + 1)).filter Nat.Prime\n  let f x := x ^ n.central_binom.factorization x\n  have :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" S (f x) =\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n        (Finset.range (2 * n / 3 + 1)) (f x) :=\n    by\n    refine' Finset.prod_filter_of_ne fun p hp h => _\n    contrapose! h\n    dsimp only [f]\n    rw [factorization_eq_zero_of_non_prime n.central_binom h, pow_zero]\n  rw [central_binom_factorization_small n n_big no_prime, ← this, ←\n    Finset.prod_filter_mul_prod_filter_not S (· ≤ sqrt (2 * n))]\n  apply mul_le_mul'\n  · refine' (Finset.prod_le_prod' fun p hp => (_ : f p ≤ 2 * n)).trans _\n    · exact pow_factorization_choose_le (mul_pos two_pos n_pos)\n    have : (Finset.Icc 1 (sqrt (2 * n))).card = sqrt (2 * n) := by rw [card_Icc, nat.add_sub_cancel]\n    rw [Finset.prod_const]\n    refine' pow_le_pow n2_pos ((Finset.card_le_of_subset fun x hx => _).trans this.le)\n    obtain ⟨h1, h2⟩ := Finset.mem_filter.1 hx\n    exact finset.mem_Icc.mpr ⟨(Finset.mem_filter.1 h1).2.one_lt.le, h2⟩\n  · refine' le_trans _ (primorial_le_4_pow (2 * n / 3))\n    refine' (Finset.prod_le_prod' fun p hp => (_ : f p ≤ p)).trans _\n    · obtain ⟨h1, h2⟩ := Finset.mem_filter.1 hp\n      refine' (pow_le_pow (Finset.mem_filter.1 h1).2.one_lt.le _).trans (pow_one p).le\n      exact Nat.factorization_choose_le_one (sqrt_lt'.mp <| not_le.1 h2)\n    refine' Finset.prod_le_prod_of_subset_of_one_le' (Finset.filter_subset _ _) _\n    exact fun p hp _ => (Finset.mem_filter.1 hp).2.one_lt.le\n#align central_binom_le_of_no_bertrand_prime central_binom_le_of_no_bertrand_prime\n\n",
 "central_binom_factorization_small":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/-- A lemma that tells us that, in the case where Bertrand's postulate does not hold, the prime\nfactorization of the central binomial coefficent only has factors at most `2 * n / 3 + 1`.\n-/\ntheorem central_binom_factorization_small (n : ℕ) (n_large : 2 < n) (no_prime : ¬∃ p : ℕ, p.prime ∧ n < p ∧ p ≤ 2 * n) :\n    centralBinom n =\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n        (Finset.range (2 * n / 3 + 1)) (p ^ (centralBinom n).factorization p) :=\n  by\n  refine' (Eq.trans _ n.prod_pow_factorization_central_binom).symm\n  apply Finset.prod_subset\n  · exact Finset.range_subset.2 (add_le_add_right (nat.div_le_self _ _) _)\n  intro x hx h2x\n  rw [Finset.mem_range, lt_succ_iff] at hx h2x\n  rw [not_le, div_lt_iff_lt_mul' three_pos, mul_comm x] at h2x\n  replace no_prime := not_exists.mp no_prime x\n  rw [← and_assoc', not_and', not_and_or, not_lt] at no_prime\n  cases' no_prime hx with h h\n  · rw [factorization_eq_zero_of_non_prime n.central_binom h, pow_zero]\n  · rw [factorization_central_binom_of_two_mul_self_lt_three_mul n_large h h2x, pow_zero]\n#align central_binom_factorization_small central_binom_factorization_small\n\n",
 "bertrand_main_inequality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The inequality which contradicts Bertrand's postulate, for large enough `n`.\n-/\ntheorem bertrand_main_inequality {n : ℕ} (n_large : 512 ≤ n) : n * (2 * n) ^ sqrt (2 * n) * 4 ^ (2 * n / 3) ≤ 4 ^ n :=\n  by\n  rw [← @cast_le (exprℝ)]\n  simp only [cast_bit0, cast_add, cast_one, cast_mul, cast_pow, ← real.rpow_nat_cast]\n  have n_pos : 0 < n := (by decide : 0 < 512).trans_le n_large\n  have n2_pos : 1 ≤ 2 * n := mul_pos (by decide) n_pos\n  refine' trans (mul_le_mul _ _ _ _) (bertrand.real_main_inequality (by exact_mod_cast n_large))\n  · refine' mul_le_mul_of_nonneg_left _ (Nat.cast_nonneg _)\n    refine' real.rpow_le_rpow_of_exponent_le (by exact_mod_cast n2_pos) _\n    exact_mod_cast Real.nat_sqrt_le_real_sqrt\n  · exact real.rpow_le_rpow_of_exponent_le (by norm_num1) (cast_div_le.trans (by norm_cast))\n  · exact real.rpow_nonneg_of_nonneg (by norm_num1) _\n  · refine' mul_nonneg (Nat.cast_nonneg _) _\n    exact real.rpow_nonneg_of_nonneg (mul_nonneg zero_le_two (Nat.cast_nonneg _)) _\n#align bertrand_main_inequality bertrand_main_inequality\n\n"}