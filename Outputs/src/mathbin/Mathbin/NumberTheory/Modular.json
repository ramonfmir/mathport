{"three_lt_four_mul_im_sq_of_mem_fdo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\ntheorem three_lt_four_mul_im_sq_of_mem_fdo (h : z ∈ modular_group.fdo) : 3 < 4 * z.im ^ 2 :=\n  by\n  have : 1 < z.re * z.re + z.im * z.im := by simpa [complex.norm_sq_apply] using h.1\n  have := h.2\n  cases abs_cases z.re <;> nlinarith\n#align three_lt_four_mul_im_sq_of_mem_fdo three_lt_four_mul_im_sq_of_mem_fdo\n\n",
 "tendsto_norm_sq_coprime_pair":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `star_ring_end -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- The function `(c,d) → |cz+d|^2` is proper, that is, preimages of bounded-above sets are finite.\n-/\ntheorem tendsto_norm_sq_coprime_pair :\n    filter.tendsto (fun p : fin 2 → ℤ => ((p 0 : exprℂ) * z + p 1).norm_sq) cofinite at_top :=\n  by\n  -- using this instance rather than the automatic `function.module` makes unification issues in\n  -- `linear_equiv.closed_embedding_of_injective` less bad later in the proof.\n  letI : Module (exprℝ) (fin 2 → exprℝ) := normed_space.to_module\n  let π₀ : «expr →ₗ[ ] » (fin 2 → exprℝ) (exprℝ) (exprℝ) := linear_map.proj 0\n  let π₁ : «expr →ₗ[ ] » (fin 2 → exprℝ) (exprℝ) (exprℝ) := linear_map.proj 1\n  let f : «expr →ₗ[ ] » (fin 2 → exprℝ) (exprℝ) (exprℂ) := π₀.smul_right (z : exprℂ) + π₁.smul_right 1\n  have f_def : «expr⇑ » f = fun p : fin 2 → exprℝ => (p 0 : exprℂ) * ↑z + p 1 :=\n    by\n    ext1\n    dsimp only [linear_map.coe_proj, real_smul, linear_map.coe_smul_right, linear_map.add_apply]\n    rw [mul_one]\n  have :\n    (fun p : fin 2 → ℤ => norm_sq ((p 0 : exprℂ) * ↑z + ↑(p 1))) =\n      norm_sq ∘ f ∘ fun p : fin 2 → ℤ => (coe : ℤ → exprℝ) ∘ p :=\n    by\n    ext1\n    rw [f_def]\n    dsimp only [function.comp]\n    rw [of_real_int_cast, of_real_int_cast]\n  rw [this]\n  have hf : f.ker = «expr⊥» :=\n    by\n    let g : «expr →ₗ[ ] » (exprℂ) (exprℝ) (fin 2 → exprℝ) :=\n      linear_map.pi («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\")\n    suffices («expr • » (z : exprℂ).im⁻¹ g).comp f = linear_map.id by exact linear_map.ker_eq_bot_of_inverse this\n    apply linear_map.ext\n    intro c\n    have hz : (z : exprℂ).im ≠ 0 := z.2.ne'\n    rw [linear_map.comp_apply, linear_map.smul_apply, linear_map.id_apply]\n    ext i\n    dsimp only [g, pi.smul_apply, linear_map.pi_apply, smul_eq_mul]\n    fin_cases i\n    · show (z : exprℂ).im⁻¹ * (f c).im = c 0\n      rw [f_def, add_im, of_real_mul_im, of_real_im, add_zero, mul_left_comm, inv_mul_cancel hz, mul_one]\n    · show (z : exprℂ).im⁻¹ * ((z : exprℂ) * (star_ring_end) (f c)).im = c 1\n      rw [f_def, RingHom.map_add, RingHom.map_mul, mul_add, mul_left_comm, mul_conj, conj_of_real, conj_of_real, ←\n        of_real_mul, add_im, of_real_im, zero_add, inv_mul_eq_iff_eq_mul₀ hz]\n      simp only [of_real_im, of_real_re, mul_im, zero_add, mul_zero]\n  have hf' : closed_embedding f :=\n    by\n    -- for some reason we get a timeout if we try and apply this lemma in a more sensible way\n    have := @linear_equiv.closed_embedding_of_injective (exprℝ) _ (fin 2 → exprℝ) _ (id _) (exprℂ) _ _ _ _\n    rotate_left 2\n    exact f\n    exact this hf\n  have h₂ : tendsto (fun p : fin 2 → ℤ => (coe : ℤ → exprℝ) ∘ p) cofinite (cocompact _) :=\n    by\n    convert tendsto.pi_map_Coprod fun i => int.tendsto_coe_cofinite\n    · rw [Coprod_cofinite]\n    · rw [Coprod_cocompact]\n  exact tendsto_norm_sq_cocompact_at_top.comp (hf'.tendsto_cocompact.comp h₂)\n#align tendsto_norm_sq_coprime_pair tendsto_norm_sq_coprime_pair\n\n",
 "tendsto_lc_row0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The map `lc_row0` is proper, that is, preimages of cocompact sets are finite in\n`[[* , *], [c, d]]`.-/\ntheorem tendsto_lc_row0 {cd : fin 2 → ℤ} (hcd : IsCoprime (cd 0) (cd 1)) :\n    tendsto (fun g : { g : «exprSL( , )» 2 ℤ // («expr↑ₘ » g) 1 = cd } => lc_row0 cd ↑(↑g : «exprSL( , )» 2 (exprℝ)))\n      cofinite (cocompact (exprℝ)) :=\n  by\n  let mB : exprℝ → matrix (fin 2) (fin 2) (exprℝ) := fun t =>\n    of («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\")\n  have hmB : continuous mB := by\n    refine' continuous_matrix _\n    simp only [Fin.forall_fin_two, mB, continuous_const, continuous_id', of_apply, cons_val_zero, cons_val_one,\n      and_self_iff]\n  refine' filter.tendsto.of_tendsto_comp _ (comap_cocompact_le hmB)\n  let f₁ : «exprSL( , )» 2 ℤ → matrix (fin 2) (fin 2) (exprℝ) := fun g =>\n    matrix.map (↑g : matrix _ _ ℤ) (coe : ℤ → exprℝ)\n  have cocompact_ℝ_to_cofinite_ℤ_matrix :\n    tendsto (fun m : matrix (fin 2) (fin 2) ℤ => matrix.map m (coe : ℤ → exprℝ)) cofinite (cocompact _) := by\n    simpa only [Coprod_cofinite, Coprod_cocompact] using\n      tendsto.pi_map_Coprod fun i : fin 2 => tendsto.pi_map_Coprod fun j : fin 2 => int.tendsto_coe_cofinite\n  have hf₁ : tendsto f₁ cofinite (cocompact _) :=\n    cocompact_ℝ_to_cofinite_ℤ_matrix.comp subtype.coe_injective.tendsto_cofinite\n  have hf₂ : closed_embedding (lc_row0_extend hcd) :=\n    (lc_row0_extend hcd).to_continuous_linear_equiv.to_homeomorph.closed_embedding\n  convert hf₂.tendsto_cocompact.comp (hf₁.comp subtype.coe_injective.tendsto_cofinite) using 1\n  ext (⟨g, rfl⟩i j) : 3\n  fin_cases i <;> [fin_cases j, skip]\n  -- the following are proved by `simp`, but it is replaced by `simp only` to avoid timeouts.\n  ·\n    simp only [mB, mul_vec, dot_product, fin.sum_univ_two, _root_.coe_coe, coe_matrix_coe, Int.coe_castRingHom,\n      lc_row0_apply, Function.comp_apply, cons_val_zero, lc_row0_extend_apply,\n      linear_map.general_linear_group.coe_fn_general_linear_equiv, general_linear_group.to_linear_apply,\n      coe_plane_conformal_matrix, neg_neg, mul_vec_lin_apply, cons_val_one, head_cons, of_apply]\n  · convert congr_arg (fun n : ℤ => (-n : exprℝ)) g.det_coe.symm using 1\n    simp only [f₁, mul_vec, dot_product, fin.sum_univ_two, matrix.det_fin_two, Function.comp_apply, subtype.coe_mk,\n      lc_row0_extend_apply, cons_val_zero, linear_map.general_linear_group.coe_fn_general_linear_equiv,\n      general_linear_group.to_linear_apply, coe_plane_conformal_matrix, mul_vec_lin_apply, cons_val_one, head_cons,\n      map_apply, neg_mul, Int.cast_sub, Int.cast_mul, neg_sub, of_apply]\n    ring\n  · rfl\n#align tendsto_lc_row0 tendsto_lc_row0\n\n",
 "tendsto_abs_re_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\ntheorem tendsto_abs_re_smul {p : fin 2 → ℤ} (hp : IsCoprime (p 0) (p 1)) :\n    tendsto (fun g : { g : «exprSL( , )» 2 ℤ // («expr↑ₘ » g) 1 = p } => |(«expr • » (g : «exprSL( , )» 2 ℤ) z).re|)\n      cofinite at_top :=\n  by\n  suffices\n    tendsto\n      (fun g : «expr ⁻¹' » (fun g : «exprSL( , )» 2 ℤ => («expr↑ₘ » g) 1) {p} =>\n        («expr • » (g : «exprSL( , )» 2 ℤ) z).re)\n      cofinite (cocompact (exprℝ))\n    by exact tendsto_norm_cocompact_at_top.comp this\n  have : ((p 0 : exprℝ) ^ 2 + p 1 ^ 2)⁻¹ ≠ 0 := by\n    apply inv_ne_zero\n    exact_mod_cast hp.sq_add_sq_ne_zero\n  let f := homeomorph.mul_right₀ _ this\n  let ff := homeomorph.add_right (((p 1 : exprℂ) * z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1))).re\n  convert (f.trans ff).closed_embedding.tendsto_cocompact.comp (tendsto_lc_row0 hp)\n  ext g\n  change\n    («expr • » (g : «exprSL( , )» 2 ℤ) z).re =\n      lc_row0 p ↑(↑g : «exprSL( , )» 2 (exprℝ)) / (p 0 ^ 2 + p 1 ^ 2) +\n        (((p 1 : exprℂ) * z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1))).re\n  exact_mod_cast congr_arg complex.re (smul_eq_lc_row0_add z hp g.2)\n#align tendsto_abs_re_smul tendsto_abs_re_smul\n\n",
 "smul_eq_lc_row0_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-- This replaces `(g•z).re = a/c + *` in the standard theory with the following novel identity:\n  `g • z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`\n  which does not need to be decomposed depending on whether `c = 0`. -/\ntheorem smul_eq_lc_row0_add {p : fin 2 → ℤ} (hp : IsCoprime (p 0) (p 1)) (hg : («expr↑ₘ » g) 1 = p) :\n    ↑(«expr • » g z) =\n      (lc_row0 p ↑(g : «exprSL( , )» 2 (exprℝ)) : exprℂ) / (p 0 ^ 2 + p 1 ^ 2) +\n        ((p 1 : exprℂ) * z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1)) :=\n  by\n  have nonZ1 : (p 0 : exprℂ) ^ 2 + p 1 ^ 2 ≠ 0 := by exact_mod_cast hp.sq_add_sq_ne_zero\n  have : (coe : ℤ → exprℝ) ∘ p ≠ 0 := fun h => hp.ne_zero (by ext i <;> simpa using congr_fun h i)\n  have nonZ2 : (p 0 : exprℂ) * z + p 1 ≠ 0 := by simpa using linear_ne_zero _ z this\n  field_simp [nonZ1, nonZ2, denom_ne_zero, -upper_half_plane.denom, -denom_apply]\n  rw [(by simp : (p 1 : exprℂ) * z - p 0 = (p 1 * z - p 0) * ↑(det (↑g : matrix (fin 2) (fin 2) ℤ)))]\n  rw [← hg, det_fin_two]\n  simp only [Int.coe_castRingHom, coe_matrix_coe, Int.cast_mul, of_real_int_cast, map_apply, denom, Int.cast_sub,\n    _root_.coe_coe, coe_GL_pos_coe_GL_coe_matrix]\n  ring\n#align smul_eq_lc_row0_add smul_eq_lc_row0_add\n\n",
 "re_T_zpow_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem re_T_zpow_smul (n : ℤ) : («expr • » (T ^ n) z).re = z.re + n := by\n  rw [← coe_re, coe_T_zpow_smul_eq, add_re, int_cast_re, coe_re]\n#align re_T_zpow_smul re_T_zpow_smul\n\n",
 "re_T_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem re_T_smul : («expr • » T z).re = z.re + 1 := by simpa using re_T_zpow_smul z 1\n#align re_T_smul re_T_smul\n\n",
 "re_T_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem re_T_inv_smul : («expr • » T⁻¹ z).re = z.re - 1 := by simpa using re_T_zpow_smul z (-1)\n#align re_T_inv_smul re_T_inv_smul\n\n",
 "one_lt_norm_sq_T_zpow_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `upper_half_plane -/\n/-- If `z ∈ 𝒟ᵒ`, and `n : ℤ`, then `|z + n| > 1`. -/\ntheorem one_lt_norm_sq_T_zpow_smul (hz : z ∈ modular_group.fdo) (n : ℤ) :\n    1 < norm_sq («expr • » (T ^ n) z : upper_half_plane) :=\n  by\n  have hz₁ : 1 < z.re * z.re + z.im * z.im := hz.1\n  have hzn := Int.nneg_mul_add_sq_of_abs_le_one n (abs_two_mul_re_lt_one_of_mem_fdo hz).le\n  have : 1 < (z.re + ↑n) * (z.re + ↑n) + z.im * z.im := by linarith\n  simpa [coe_T_zpow, norm_sq]\n#align one_lt_norm_sq_T_zpow_smul one_lt_norm_sq_T_zpow_smul\n\n",
 "norm_sq_S_smul_lt_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `1 < |z|`, then `|S • z| < 1`. -/\ntheorem norm_sq_S_smul_lt_one (h : 1 < norm_sq z) : norm_sq ↑(«expr • » S z) < 1 := by\n  simpa [coe_S] using (inv_lt_inv z.norm_sq_pos zero_lt_one).mpr h\n#align norm_sq_S_smul_lt_one norm_sq_S_smul_lt_one\n\n",
 "lc_row0_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem lc_row0_apply (p : fin 2 → ℤ) (g : matrix (fin 2) (fin 2) (exprℝ)) : lc_row0 p g = p 0 * g 0 0 + p 1 * g 0 1 :=\n  rfl\n#align lc_row0_apply lc_row0_apply\n\n",
 "im_lt_im_S_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If `|z| < 1`, then applying `S` strictly decreases `im`. -/\ntheorem im_lt_im_S_smul (h : norm_sq z < 1) : z.im < («expr • » S z).im :=\n  by\n  have : z.im < z.im / norm_sq (z : exprℂ) :=\n    by\n    have imz : 0 < z.im := im_pos z\n    apply (lt_div_iff z.norm_sq_pos).mpr\n    nlinarith\n  convert this\n  simp only [special_linear_group.im_smul_eq_div_norm_sq]\n  field_simp [norm_sq_denom_ne_zero, norm_sq_ne_zero, S]\n#align im_lt_im_S_smul im_lt_im_S_smul\n\n",
 "im_T_zpow_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem im_T_zpow_smul (n : ℤ) : («expr • » (T ^ n) z).im = z.im := by\n  rw [← coe_im, coe_T_zpow_smul_eq, add_im, int_cast_im, add_zero, coe_im]\n#align im_T_zpow_smul im_T_zpow_smul\n\n",
 "im_T_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem im_T_smul : («expr • » T z).im = z.im := by simpa using im_T_zpow_smul z 1\n#align im_T_smul im_T_smul\n\n",
 "im_T_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem im_T_inv_smul : («expr • » T⁻¹ z).im = z.im := by simpa using im_T_zpow_smul z (-1)\n#align im_T_inv_smul im_T_inv_smul\n\n",
 "g_eq_of_c_eq_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr!![ »(matrix.notation [expr _, \",\", expr _, \";\", expr _, \",\", expr _, \"]\"] [])]] -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n-- If `c = 1`, then `g` factorises into a product terms involving only `T` and `S`.\ntheorem g_eq_of_c_eq_one (hc : («expr↑ₘ » g) 1 0 = 1) : g = T ^ («expr↑ₘ » g) 0 0 * S * T ^ («expr↑ₘ » g) 1 1 :=\n  by\n  have hg := g.det_coe.symm\n  replace hg : («expr↑ₘ » g) 0 1 = («expr↑ₘ » g) 0 0 * («expr↑ₘ » g) 1 1 - 1;\n  · rw [det_fin_two, hc] at hg\n    linarith\n  refine' subtype.ext _\n  conv_lhs => rw [matrix.eta_fin_two («expr↑ₘ » g)]\n  rw [hc, hg]\n  simp only [coe_mul, coe_T_zpow, coe_S, mul_fin_two]\n  trace\n      \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr!![ »(matrix.notation [expr _, \\\",\\\", expr _, \\\";\\\", expr _, \\\",\\\", expr _, \\\"]\\\"] [])]]\" <;>\n    ring\n#align g_eq_of_c_eq_one g_eq_of_c_eq_one\n\n",
 "exists_smul_mem_fd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `upper_half_plane -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fd -/\n/-- Any `z : ℍ` can be moved to `𝒟` by an element of `SL(2,ℤ)`  -/\ntheorem exists_smul_mem_fd (z : upper_half_plane) : ∃ g : «exprSL( , )» 2 ℤ, «expr • » g z ∈ modular_group.fd :=\n  by\n  -- obtain a g₀ which maximizes im (g • z),\n  obtain ⟨g₀, hg₀⟩ := exists_max_im z\n  -- then among those, minimize re\n  obtain ⟨g, hg, hg'⟩ := exists_row_one_eq_and_min_re z (bottom_row_coprime g₀)\n  refine' ⟨g, _⟩\n  -- `g` has same max im property as `g₀`\n  have hg₀' : ∀ g' : «exprSL( , )» 2 ℤ, («expr • » g' z).im ≤ («expr • » g z).im :=\n    by\n    have hg'' : («expr • » g z).im = («expr • » g₀ z).im := by\n      rw [special_linear_group.im_smul_eq_div_norm_sq, special_linear_group.im_smul_eq_div_norm_sq, denom_apply,\n        denom_apply, hg]\n    simpa only [hg''] using hg₀\n  constructor\n  · -- Claim: `1 ≤ ⇑norm_sq ↑(g • z)`. If not, then `S•g•z` has larger imaginary part\n    contrapose! hg₀'\n    refine' ⟨S * g, _⟩\n    rw [mul_smul]\n    exact im_lt_im_S_smul hg₀'\n  · show |(«expr • » g z).re| ≤ 1 / 2\n    -- if not, then either `T` or `T'` decrease |Re|.\n    rw [abs_le]\n    constructor\n    · contrapose! hg'\n      refine' ⟨T * g, (T_mul_apply_one _).symm, _⟩\n      rw [mul_smul, re_T_smul]\n      cases abs_cases ((«expr • » g z).re + 1) <;> cases abs_cases («expr • » g z).re <;> linarith\n    · contrapose! hg'\n      refine' ⟨T⁻¹ * g, (T_inv_mul_apply_one _).symm, _⟩\n      rw [mul_smul, re_T_inv_smul]\n      cases abs_cases ((«expr • » g z).re - 1) <;> cases abs_cases («expr • » g z).re <;> linarith\n#align exists_smul_mem_fd exists_smul_mem_fd\n\n",
 "exists_row_one_eq_and_min_re":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Given `z : ℍ` and a bottom row `(c,d)`, among the `g : SL(2,ℤ)` with this bottom row, minimize\n  `|(g•z).re|`.  -/\ntheorem exists_row_one_eq_and_min_re {cd : fin 2 → ℤ} (hcd : IsCoprime (cd 0) (cd 1)) :\n    ∃ g : «exprSL( , )» 2 ℤ,\n      («expr↑ₘ » g) 1 = cd ∧\n        ∀ g' : «exprSL( , )» 2 ℤ, («expr↑ₘ » g) 1 = («expr↑ₘ » g') 1 → |(«expr • » g z).re| ≤ |(«expr • » g' z).re| :=\n  by\n  haveI : nonempty { g : «exprSL( , )» 2 ℤ // («expr↑ₘ » g) 1 = cd } :=\n    let ⟨x, hx⟩ := bottom_row_surj hcd\n    ⟨⟨x, hx.2⟩⟩\n  obtain ⟨g, hg⟩ := filter.tendsto.exists_forall_le (tendsto_abs_re_smul z hcd)\n  refine' ⟨g, g.2, _⟩\n  · intro g1 hg1\n    have : g1 ∈ «expr ⁻¹' » (fun g : «exprSL( , )» 2 ℤ => («expr↑ₘ » g) 1) {cd} :=\n      by\n      rw [Set.mem_preimage, Set.mem_singleton_iff]\n      exact eq.trans hg1.symm (set.mem_singleton_iff.mp (set.mem_preimage.mp g.2))\n    exact hg ⟨g1, this⟩\n#align exists_row_one_eq_and_min_re exists_row_one_eq_and_min_re\n\n",
 "exists_max_im":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- For `z : ℍ`, there is a `g : SL(2,ℤ)` maximizing `(g•z).im` -/\ntheorem exists_max_im : ∃ g : «exprSL( , )» 2 ℤ, ∀ g' : «exprSL( , )» 2 ℤ, («expr • » g' z).im ≤ («expr • » g z).im :=\n  by\n  classical\n    let s : set (fin 2 → ℤ) := { cd | IsCoprime (cd 0) (cd 1) }\n    have hs : s.nonempty :=\n      ⟨«expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\",\n        isCoprime_one_left⟩\n    obtain ⟨p, hp_coprime, hp⟩ := filter.tendsto.exists_within_forall_le hs (tendsto_norm_sq_coprime_pair z)\n    obtain ⟨g, -, hg⟩ := bottom_row_surj hp_coprime\n    refine' ⟨g, fun g' => _⟩\n    rw [special_linear_group.im_smul_eq_div_norm_sq, special_linear_group.im_smul_eq_div_norm_sq, div_le_div_left]\n    · simpa [← hg] using hp ((«expr↑ₘ » g') 1) (bottom_row_coprime g')\n    · exact z.im_pos\n    · exact norm_sq_denom_pos g' z\n    · exact norm_sq_denom_pos g z\n#align exists_max_im exists_max_im\n\n",
 "exists_eq_T_zpow_of_c_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `upper_half_plane -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- If instead we had `g` and `T` of type `PSL(2, ℤ)`, then we could simply state `g = T^n`.\ntheorem exists_eq_T_zpow_of_c_eq_zero (hc : («expr↑ₘ » g) 1 0 = 0) :\n    ∃ n : ℤ, ∀ z : upper_half_plane, «expr • » g z = «expr • » (T ^ n) z :=\n  by\n  have had := g.det_coe\n  replace had : («expr↑ₘ » g) 0 0 * («expr↑ₘ » g) 1 1 = 1;\n  · rw [det_fin_two, hc] at had\n    linarith\n  rcases Int.eq_one_or_neg_one_of_mul_eq_one' had with (⟨ha, hd⟩ | ⟨ha, hd⟩)\n  · use («expr↑ₘ » g) 0 1\n    suffices g = T ^ («expr↑ₘ » g) 0 1 by\n      intro z\n      conv_lhs => rw [this]\n    ext (i j)\n    fin_cases i <;> fin_cases j <;> simp [ha, hc, hd, coe_T_zpow]\n  · use -(«expr↑ₘ » g) 0 1\n    suffices g = -T ^ (-(«expr↑ₘ » g) 0 1) by\n      intro z\n      conv_lhs => rw [this, SL_neg_smul]\n    ext (i j)\n    fin_cases i <;> fin_cases j <;> simp [ha, hc, hd, coe_T_zpow]\n#align exists_eq_T_zpow_of_c_eq_zero exists_eq_T_zpow_of_c_eq_zero\n\n",
 "eq_zero_of_mem_fdo_of_T_zpow_mem_fdo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\ntheorem eq_zero_of_mem_fdo_of_T_zpow_mem_fdo {n : ℤ} (hz : z ∈ modular_group.fdo)\n    (hg : «expr • » (T ^ n) z ∈ modular_group.fdo) : n = 0 :=\n  by\n  suffices |(n : exprℝ)| < 1 by rwa [← Int.cast_abs, ← Int.cast_one, Int.cast_lt, Int.abs_lt_one_iff] at this\n  have h₁ := hz.2\n  have h₂ := hg.2\n  rw [re_T_zpow_smul] at h₂\n  calc\n    |(n : exprℝ)| ≤ |z.re| + |z.re + (n : exprℝ)| := abs_add' (n : exprℝ) z.re\n    _ < 1 / 2 + 1 / 2 := add_lt_add h₁ h₂\n    _ = 1 := add_halves 1\n    \n#align eq_zero_of_mem_fdo_of_T_zpow_mem_fdo eq_zero_of_mem_fdo_of_T_zpow_mem_fdo\n\n",
 "eq_smul_self_of_mem_fdo_mem_fdo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Second Main Fundamental Domain Lemma: if both `z` and `g • z` are in the open domain `𝒟ᵒ`,\nwhere `z : ℍ` and `g : SL(2,ℤ)`, then `z = g • z`. -/\ntheorem eq_smul_self_of_mem_fdo_mem_fdo (hz : z ∈ modular_group.fdo) (hg : «expr • » g z ∈ modular_group.fdo) :\n    z = «expr • » g z := by\n  obtain ⟨n, hn⟩ := exists_eq_T_zpow_of_c_eq_zero (c_eq_zero hz hg)\n  rw [hn] at hg⊢\n  simp [eq_zero_of_mem_fdo_of_T_zpow_mem_fdo hz hg, one_smul]\n#align eq_smul_self_of_mem_fdo_mem_fdo eq_smul_self_of_mem_fdo_mem_fdo\n\n",
 "coe_T_zpow_smul_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem coe_T_zpow_smul_eq {n : ℤ} : (↑(«expr • » (T ^ n) z) : exprℂ) = z + n := by simp [coe_T_zpow]\n#align coe_T_zpow_smul_eq coe_T_zpow_smul_eq\n\n",
 "coe_T_zpow":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr!![ »(matrix.notation [expr _, \",\", expr _, \";\", expr _, \",\", expr _, \"]\"] [])]] -/\n/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr!![ »(matrix.notation [expr _, \",\", expr _, \";\", expr _, \",\", expr _, \"]\"] [])]] -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr!![ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation -/\ntheorem coe_T_zpow (n : ℤ) :\n    «expr↑ₘ » (T ^ n) =\n      «expr!![ » \"./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation\" :=\n  by\n  induction' n using int.induction_on with n h n h\n  · rw [zpow_zero, coe_one, matrix.one_fin_two]\n  · simp_rw [zpow_add, zpow_one, coe_mul, h, coe_T, matrix.mul_fin_two]\n    trace\n      \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr!![ »(matrix.notation [expr _, \\\",\\\", expr _, \\\";\\\", expr _, \\\",\\\", expr _, \\\"]\\\"] [])]]\"\n    rw [mul_one, mul_one, add_comm]\n  · simp_rw [zpow_sub, zpow_one, coe_mul, h, coe_T_inv, matrix.mul_fin_two]\n    trace\n        \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr!![ »(matrix.notation [expr _, \\\",\\\", expr _, \\\";\\\", expr _, \\\",\\\", expr _, \\\"]\\\"] [])]]\" <;>\n      ring\n#align coe_T_zpow coe_T_zpow\n\n",
 "coe_T_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr!![ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation -/\ntheorem coe_T_inv :\n    «expr↑ₘ » T⁻¹ =\n      «expr!![ » \"./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation\" :=\n  by simp [coe_inv, coe_T, adjugate_fin_two]\n#align coe_T_inv coe_T_inv\n\n",
 "coe_T":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr!![ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation -/\ntheorem coe_T :\n    «expr↑ₘ » T =\n      «expr!![ » \"./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation\" :=\n  rfl\n#align coe_T coe_T\n\n",
 "coe_S":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr!![ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation -/\ntheorem coe_S :\n    «expr↑ₘ » S =\n      «expr!![ » \"./././Mathport/Syntax/Translate/Expr.lean:390:14: unsupported user notation matrix.notation\" :=\n  rfl\n#align coe_S coe_S\n\n",
 "c_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/-- An auxiliary result en route to `modular_group.eq_smul_self_of_mem_fdo_mem_fdo`. -/\ntheorem c_eq_zero (hz : z ∈ modular_group.fdo) (hg : «expr • » g z ∈ modular_group.fdo) : («expr↑ₘ » g) 1 0 = 0 :=\n  by\n  have hp : ∀ {g' : «exprSL( , )» 2 ℤ} (hg' : «expr • » g' z ∈ modular_group.fdo), («expr↑ₘ » g') 1 0 ≠ 1 :=\n    by\n    intros\n    by_contra hc\n    let a := («expr↑ₘ » g') 0 0\n    let d := («expr↑ₘ » g') 1 1\n    have had : T ^ (-a) * g' = S * T ^ d := by\n      rw [g_eq_of_c_eq_one hc]\n      group\n    let w := «expr • » (T ^ (-a)) («expr • » g' z)\n    have h₁ : w = «expr • » S («expr • » (T ^ d) z) := by simp only [w, ← mul_smul, had]\n    replace h₁ : norm_sq w < 1 := h₁.symm ▸ norm_sq_S_smul_lt_one (one_lt_norm_sq_T_zpow_smul hz d)\n    have h₂ : 1 < norm_sq w := one_lt_norm_sq_T_zpow_smul hg' (-a)\n    linarith\n  have hn : («expr↑ₘ » g) 1 0 ≠ -1 := by\n    intro hc\n    replace hc : («expr↑ₘ » (-g)) 1 0 = 1\n    · simp [eq_neg_of_eq_neg hc]\n    replace hg : «expr • » (-g) z ∈ modular_group.fdo := (SL_neg_smul g z).symm ▸ hg\n    exact hp hg hc\n  specialize hp hg\n  rcases int.abs_le_one_iff.mp <| abs_c_le_one hz hg with ⟨⟩ <;> tauto\n#align c_eq_zero c_eq_zero\n\n",
 "bottom_row_surj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/-- Every pair `![c, d]` of coprime integers is the \"bottom_row\" of some element `g=[[*,*],[c,d]]`\nof `SL(2,ℤ)`. -/\ntheorem bottom_row_surj {R : Type _} [CommRing R] :\n    Set.SurjOn (fun g : «exprSL( , )» 2 R => @coe _ (matrix (fin 2) (fin 2) R) _ g 1) Set.univ\n      { cd | IsCoprime (cd 0) (cd 1) } :=\n  by\n  rintro cd ⟨b₀, a, gcd_eqn⟩\n  let A := of («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\")\n  have det_A_1 : det A = 1 := by\n    convert gcd_eqn\n    simp [A, det_fin_two, (by ring : a * cd 1 + b₀ * cd 0 = b₀ * cd 0 + a * cd 1)]\n  refine' ⟨⟨A, det_A_1⟩, Set.mem_univ _, _⟩\n  ext <;> simp [A]\n#align bottom_row_surj bottom_row_surj\n\n",
 "bottom_row_coprime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/-\nCopyright (c) 2021 Alex Kontorovich and Heather Macbeth and Marc Masdeu. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alex Kontorovich, Heather Macbeth, Marc Masdeu\n-/\n/- Disable these instances as they are not the simp-normal form, and having them disabled ensures\nwe state lemmas in this file without spurious `coe_fn` terms. -/\n/-- The two numbers `c`, `d` in the \"bottom_row\" of `g=[[*,*],[c,d]]` in `SL(2, ℤ)` are coprime. -/\ntheorem bottom_row_coprime {R : Type _} [CommRing R] (g : «exprSL( , )» 2 R) :\n    IsCoprime ((↑g : matrix (fin 2) (fin 2) R) 1 0) ((↑g : matrix (fin 2) (fin 2) R) 1 1) :=\n  by\n  use -(↑g : matrix (fin 2) (fin 2) R) 0 1, (↑g : matrix (fin 2) (fin 2) R) 0 0\n  rw [add_comm, neg_mul, ← sub_eq_add_neg, ← det_fin_two]\n  exact g.det_coe\n#align bottom_row_coprime bottom_row_coprime\n\n",
 "abs_two_mul_re_lt_one_of_mem_fdo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\ntheorem abs_two_mul_re_lt_one_of_mem_fdo (h : z ∈ modular_group.fdo) : |2 * z.re| < 1 :=\n  by\n  rw [abs_mul, abs_two, ← lt_div_iff' (zero_lt_two' (exprℝ))]\n  exact h.2\n#align abs_two_mul_re_lt_one_of_mem_fdo abs_two_mul_re_lt_one_of_mem_fdo\n\n",
 "abs_c_le_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `modular_group.fdo -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/-- An auxiliary result en route to `modular_group.c_eq_zero`. -/\ntheorem abs_c_le_one (hz : z ∈ modular_group.fdo) (hg : «expr • » g z ∈ modular_group.fdo) : |(«expr↑ₘ » g) 1 0| ≤ 1 :=\n  by\n  let c' : ℤ := («expr↑ₘ » g) 1 0\n  let c : exprℝ := (c' : exprℝ)\n  suffices 3 * c ^ 2 < 4\n    by\n    rw [← Int.cast_pow, ← Int.cast_three, ← Int.cast_four, ← Int.cast_mul, Int.cast_lt] at this\n    replace this : c' ^ 2 ≤ 1 ^ 2\n    · linarith\n    rwa [sq_le_sq, abs_one] at this\n  suffices c ≠ 0 → 9 * c ^ 4 < 16 by\n    rcases eq_or_ne c 0 with (hc | hc)\n    · rw [hc]\n      norm_num\n    · refine' (abs_lt_of_sq_lt_sq' _ (by norm_num)).2\n      specialize this hc\n      linarith\n  intro hc\n  replace hc : 0 < c ^ 4\n  · rw [pow_bit0_pos_iff] <;> trivial\n  have h₁ :=\n    mul_lt_mul_of_pos_right\n      (mul_lt_mul'' (three_lt_four_mul_im_sq_of_mem_fdo hg) (three_lt_four_mul_im_sq_of_mem_fdo hz) (by linarith)\n        (by linarith))\n      hc\n  have h₂ : (c * z.im) ^ 4 / norm_sq (denom (↑g) z) ^ 2 ≤ 1 :=\n    div_le_one_of_le (pow_four_le_pow_two_of_pow_two_le (upper_half_plane.c_mul_im_sq_le_norm_sq_denom z g))\n      (sq_nonneg _)\n  let nsq := norm_sq (denom g z)\n  calc\n    9 * c ^ 4 < c ^ 4 * z.im ^ 2 * («expr • » g z).im ^ 2 * 16 := by linarith\n    _ = c ^ 4 * z.im ^ 4 / nsq ^ 2 * 16 :=\n      by\n      rw [special_linear_group.im_smul_eq_div_norm_sq, div_pow]\n      ring\n    _ ≤ 16 := by\n      rw [← mul_pow]\n      linarith\n    \n#align abs_c_le_one abs_c_le_one\n\n",
 "T_pow_mul_apply_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n@[simp]\ntheorem T_pow_mul_apply_one (n : ℤ) (g : «exprSL( , )» 2 ℤ) : («expr↑ₘ » (T ^ n * g)) 1 = («expr↑ₘ » g) 1 := by\n  simp [coe_T_zpow, matrix.mul, matrix.dot_product, fin.sum_univ_succ]\n#align T_pow_mul_apply_one T_pow_mul_apply_one\n\n",
 "T_mul_apply_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n@[simp]\ntheorem T_mul_apply_one (g : «exprSL( , )» 2 ℤ) : («expr↑ₘ » (T * g)) 1 = («expr↑ₘ » g) 1 := by\n  simpa using T_pow_mul_apply_one 1 g\n#align T_mul_apply_one T_mul_apply_one\n\n",
 "T_inv_mul_apply_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n@[simp]\ntheorem T_inv_mul_apply_one (g : «exprSL( , )» 2 ℤ) : («expr↑ₘ » (T⁻¹ * g)) 1 = («expr↑ₘ » g) 1 := by\n  simpa using T_pow_mul_apply_one (-1) g\n#align T_inv_mul_apply_one T_inv_mul_apply_one\n\n"}