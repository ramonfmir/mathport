{"is_unit_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉ‚Çê[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Üí+* ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉ‚Çê[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\ntheorem is_unit_norm [is_galois K L] {x : (ring_of_integers) L} : is_unit (norm K x) ‚Üî is_unit x := by\n  classical\n    refine' ‚ü®fun hx => _, IsUnit.map _‚ü©\n    replace hx : is_unit (algebra_map ((ring_of_integers) K) ((ring_of_integers) L) <| norm K x) :=\n      hx.map (algebra_map ((ring_of_integers) K) <| (ring_of_integers) L)\n    refine'\n      @isUnit_of_mul_isUnit_right ((ring_of_integers) L) _\n        ‚ü®(univ \\ {alg_equiv.refl}).prod fun œÉ : ¬´expr ‚âÉ‚Çê[ ] ¬ª L K L => œÉ x,\n          prod_mem fun œÉ hœÉ => map_is_integral (œÉ : ¬´expr ‚Üí+* ¬ª L L).to_int_alg_hom x.2‚ü©\n        _ _\n    convert hx using 1\n    ext\n    push_cast\n    convert_to\n      ((univ \\ {alg_equiv.refl}).prod fun œÉ : ¬´expr ‚âÉ‚Çê[ ] ¬ª L K L => œÉ x) *\n          finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n            {alg_equiv.refl} (œÉ (x : L)) =\n        _\n    ¬∑ rw [prod_singleton, alg_equiv.coe_refl, id]\n    ¬∑ rw [prod_sdiff <| subset_univ _, ‚Üê norm_eq_prod_automorphisms, coe_algebra_map_norm]\n#align is_unit_norm is_unit_norm\n\n",
 "dvd_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/-- If `L/K` is a finite Galois extension of fields, then, for all `(x : ùìû L)` we have that\n`x ‚à£ algebra_map (ùìû K) (ùìû L) (norm K x)`. -/\ntheorem dvd_norm [is_galois K L] (x : (ring_of_integers) L) :\n    x ‚à£ algebra_map ((ring_of_integers) K) ((ring_of_integers) L) (norm K x) := by\n  classical\n    have hint :\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\"\n          (univ.erase alg_equiv.refl) (œÉ x) ‚àà\n        (ring_of_integers) L :=\n      subalgebra.prod_mem _ fun œÉ hœÉ =>\n        (mem_ring_of_integers _ _).2 (map_is_integral œÉ (ring_of_integers.is_integral_coe x))\n    refine' ‚ü®‚ü®_, hint‚ü©, subtype.ext _‚ü©\n    rw [coe_algebra_map_norm K x, norm_eq_prod_automorphisms]\n    simp [‚Üê finset.mul_prod_erase _ _ (mem_univ alg_equiv.refl)]\n#align dvd_norm dvd_norm\n\n",
 "coe_algebra_map_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ring_of_integers -/\n/-\nCopyright (c) 2022 Riccardo Brasca. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Riccardo Brasca, Eric Rodriguez\n-/\ntheorem coe_algebra_map_norm [is_separable K L] (x : (ring_of_integers) L) :\n    (algebra_map ((ring_of_integers) K) ((ring_of_integers) L) (norm K x) : L) =\n      algebra_map K L (algebra.norm K (x : L)) :=\n  rfl\n#align coe_algebra_map_norm coe_algebra_map_norm\n\n"}