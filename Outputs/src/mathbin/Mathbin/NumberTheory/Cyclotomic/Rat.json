{"sub_one_integral_power_basis_gen":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem sub_one_integral_power_basis_gen [is_cyclotomic_extension {p ^ k} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑(p ^ k)) :\n    hζ.sub_one_integral_power_basis.gen =\n      ⟨ζ - 1, subalgebra.sub_mem _ (hζ.is_integral (p ^ k).pos) (subalgebra.one_mem _)⟩ :=\n  by simp [sub_one_integral_power_basis]\n#align sub_one_integral_power_basis_gen sub_one_integral_power_basis_gen\n\n",
 "sub_one_integral_power_basis'_gen":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem sub_one_integral_power_basis'_gen [hcycl : is_cyclotomic_extension {p} (exprℚ) K] (hζ : is_primitive_root ζ p) :\n    hζ.sub_one_integral_power_basis'.gen =\n      ⟨ζ - 1, subalgebra.sub_mem _ (hζ.is_integral p.pos) (subalgebra.one_mem _)⟩ :=\n  @sub_one_integral_power_basis_gen p 1 K _ _ _ _\n    (by\n      convert hcycl\n      rw [pow_one])\n    (by rwa [pow_one])\n#align sub_one_integral_power_basis'_gen sub_one_integral_power_basis'_gen\n\n",
 "power_basis_int'_dim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.totient -/\n@[simp]\ntheorem power_basis_int'_dim [hcycl : is_cyclotomic_extension {p} (exprℚ) K] (hζ : is_primitive_root ζ p) :\n    hζ.integral_power_basis'.dim = (nat.totient) p := by\n  erw [@integral_power_basis_dim p 1 K _ _ _ _\n      (by\n        convert hcycl\n        rw [pow_one])\n      (by rwa [pow_one]),\n    pow_one]\n#align power_basis_int'_dim power_basis_int'_dim\n\n",
 "is_integral_closure_adjoin_singleton_of_prime_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- If `K` is a `p ^ k`-th cyclotomic extension of `ℚ`, then `(adjoin ℤ {ζ})` is the\nintegral closure of `ℤ` in `K`. -/\ntheorem is_integral_closure_adjoin_singleton_of_prime_pow [hcycl : is_cyclotomic_extension {p ^ k} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑(p ^ k)) : is_integral_closure (adjoin ℤ ({ζ} : set K)) ℤ K :=\n  by\n  refine' ⟨subtype.val_injective, fun x => ⟨fun h => ⟨⟨x, _⟩, rfl⟩, _⟩⟩\n  swap\n  · rintro ⟨y, rfl⟩\n    exact\n      is_integral.algebra_map\n        (le_integral_closure_iff_is_integral.1 (adjoin_le_integral_closure (hζ.is_integral (p ^ k).pos)) _)\n  let B := hζ.sub_one_power_basis (exprℚ)\n  have hint : is_integral ℤ B.gen := is_integral_sub (hζ.is_integral (p ^ k).pos) is_integral_one\n  have H := discr_mul_is_integral_mem_adjoin (exprℚ) hint h\n  obtain ⟨u, n, hun⟩ := discr_prime_pow_eq_unit_mul_pow' hζ\n  rw [hun] at H\n  replace H := subalgebra.smul_mem _ H u.inv\n  rw [← smul_assoc, ← smul_mul_assoc, Units.inv_eq_val_inv, coe_coe, zsmul_eq_mul, ← Int.cast_mul, Units.inv_mul,\n    Int.cast_one, one_mul, show «expr • » ((p : exprℚ) ^ n) x = «expr • » (((p : ℕ) : ℤ) ^ n) x by simp [smul_def]] at H\n  cases k\n  · haveI : is_cyclotomic_extension {1} (exprℚ) K := by simpa using hcycl\n    have : x ∈ («expr⊥» : subalgebra (exprℚ) K) :=\n      by\n      rw [singleton_one (exprℚ) K]\n      exact mem_top\n    obtain ⟨y, rfl⟩ := mem_bot.1 this\n    replace h := (is_integral_algebra_map_iff (algebra_map (exprℚ) K).injective).1 h\n    obtain ⟨z, hz⟩ := is_integrally_closed.is_integral_iff.1 h\n    rw [← hz, ← is_scalar_tower.algebra_map_apply]\n    exact subalgebra.algebra_map_mem _ _\n  · have hmin : (minpoly ℤ B.gen).is_eisenstein_at (submodule.span ℤ {((p : ℕ) : ℤ)}) :=\n      by\n      have h₁ := minpoly.gcd_domain_eq_field_fractions' (exprℚ) hint\n      have h₂ := hζ.minpoly_sub_one_eq_cyclotomic_comp (cyclotomic.irreducible_rat (p ^ _).pos)\n      rw [is_primitive_root.sub_one_power_basis_gen] at h₁\n      rw [h₁, ← map_cyclotomic_int, show Int.castRingHom (exprℚ) = algebra_map ℤ (exprℚ) by rfl,\n        show X + 1 = map (algebra_map ℤ (exprℚ)) (X + 1) by simp, ← map_comp] at h₂\n      haveI : CharZero (exprℚ) := StrictOrderedSemiring.to_charZero\n      rw [is_primitive_root.sub_one_power_basis_gen,\n        map_injective (algebra_map ℤ (exprℚ)) (algebra_map ℤ (exprℚ)).injective_int h₂]\n      exact cyclotomic_prime_pow_comp_X_add_one_is_eisenstein_at _ _\n    refine'\n      adjoin_le _\n        (mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at (Nat.prime_iff_prime_int.1 hp.out) hint h H\n          hmin)\n    simp only [Set.singleton_subset_iff, SetLike.mem_coe]\n    exact subalgebra.sub_mem _ (self_mem_adjoin_singleton ℤ _) (subalgebra.one_mem _)\n#align is_integral_closure_adjoin_singleton_of_prime_pow is_integral_closure_adjoin_singleton_of_prime_pow\n\n",
 "is_integral_closure_adjoin_singleton_of_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem is_integral_closure_adjoin_singleton_of_prime [hcycl : is_cyclotomic_extension {p} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑p) : is_integral_closure (adjoin ℤ ({ζ} : set K)) ℤ K :=\n  by\n  rw [← pow_one p] at hζ hcycl\n  exact is_integral_closure_adjoin_singleton_of_prime_pow hζ\n#align is_integral_closure_adjoin_singleton_of_prime is_integral_closure_adjoin_singleton_of_prime\n\n",
 "integral_power_basis_gen":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem integral_power_basis_gen [hcycl : is_cyclotomic_extension {p ^ k} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑(p ^ k)) : hζ.integral_power_basis.gen = ⟨ζ, hζ.is_integral (p ^ k).pos⟩ :=\n  subtype.ext <| show algebra_map _ K hζ.integral_power_basis.gen = _ by simpa [integral_power_basis]\n#align integral_power_basis_gen integral_power_basis_gen\n\n",
 "integral_power_basis_dim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.totient -/\n@[simp]\ntheorem integral_power_basis_dim [hcycl : is_cyclotomic_extension {p ^ k} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑(p ^ k)) : hζ.integral_power_basis.dim = (nat.totient) (p ^ k) := by\n  simp [integral_power_basis, ← cyclotomic_eq_minpoly hζ, nat_degree_cyclotomic]\n#align integral_power_basis_dim integral_power_basis_dim\n\n",
 "integral_power_basis'_gen":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem integral_power_basis'_gen [hcycl : is_cyclotomic_extension {p} (exprℚ) K] (hζ : is_primitive_root ζ p) :\n    hζ.integral_power_basis'.gen = ⟨ζ, hζ.is_integral p.pos⟩ :=\n  @integral_power_basis_gen p 1 K _ _ _ _\n    (by\n      convert hcycl\n      rw [pow_one])\n    (by rwa [pow_one])\n#align integral_power_basis'_gen integral_power_basis'_gen\n\n",
 "discr_prime_pow_ne_two'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-\nCopyright (c) 2022 Riccardo Brasca. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Riccardo Brasca\n-/\n/-- The discriminant of the power basis given by `ζ - 1`. -/\ntheorem discr_prime_pow_ne_two' [is_cyclotomic_extension {p ^ (k + 1)} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑(p ^ (k + 1))) (hk : p ^ (k + 1) ≠ 2) :\n    discr (exprℚ) (hζ.sub_one_power_basis (exprℚ)).basis =\n      (-1) ^ ((p ^ (k + 1) : ℕ).totient / 2) * p ^ ((p : ℕ) ^ k * ((p - 1) * (k + 1) - 1)) :=\n  by\n  rw [← discr_prime_pow_ne_two hζ (cyclotomic.irreducible_rat (p ^ (k + 1)).pos) hk]\n  exact hζ.discr_zeta_eq_discr_zeta_sub_one.symm\n#align discr_prime_pow_ne_two' discr_prime_pow_ne_two'\n\n",
 "discr_prime_pow_eq_unit_mul_pow'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- If `p` is a prime and `is_cyclotomic_extension {p ^ k} K L`, then there are `u : ℤˣ` and\n`n : ℕ` such that the discriminant of the power basis given by `ζ - 1` is `u * p ^ n`. Often this is\nenough and less cumbersome to use than `is_cyclotomic_extension.rat.discr_prime_pow'`. -/\ntheorem discr_prime_pow_eq_unit_mul_pow' [is_cyclotomic_extension {p ^ k} (exprℚ) K]\n    (hζ : is_primitive_root ζ ↑(p ^ k)) :\n    ∃ (u : «expr ˣ» ℤ)(n : ℕ), discr (exprℚ) (hζ.sub_one_power_basis (exprℚ)).basis = u * p ^ n :=\n  by\n  rw [hζ.discr_zeta_eq_discr_zeta_sub_one.symm]\n  exact discr_prime_pow_eq_unit_mul_pow hζ (cyclotomic.irreducible_rat (p ^ k).pos)\n#align discr_prime_pow_eq_unit_mul_pow' discr_prime_pow_eq_unit_mul_pow'\n\n",
 "discr_prime_pow'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- The discriminant of the power basis given by `ζ - 1`. Beware that in the cases `p ^ k = 1` and\n`p ^ k = 2` the formula uses `1 / 2 = 0` and `0 - 1 = 0`. It is useful only to have a uniform\nresult. See also `is_cyclotomic_extension.rat.discr_prime_pow_eq_unit_mul_pow'`. -/\ntheorem discr_prime_pow' [is_cyclotomic_extension {p ^ k} (exprℚ) K] (hζ : is_primitive_root ζ ↑(p ^ k)) :\n    discr (exprℚ) (hζ.sub_one_power_basis (exprℚ)).basis =\n      (-1) ^ ((p ^ k : ℕ).totient / 2) * p ^ ((p : ℕ) ^ (k - 1) * ((p - 1) * k - 1)) :=\n  by\n  rw [← discr_prime_pow hζ (cyclotomic.irreducible_rat (p ^ k).pos)]\n  exact hζ.discr_zeta_eq_discr_zeta_sub_one.symm\n#align discr_prime_pow' discr_prime_pow'\n\n",
 "discr_odd_prime'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem discr_odd_prime' [is_cyclotomic_extension {p} (exprℚ) K] (hζ : is_primitive_root ζ p) (hodd : p ≠ 2) :\n    discr (exprℚ) (hζ.sub_one_power_basis (exprℚ)).basis = (-1) ^ (((p : ℕ) - 1) / 2) * p ^ ((p : ℕ) - 2) :=\n  by\n  rw [← discr_odd_prime hζ (cyclotomic.irreducible_rat hp.out.pos) hodd]\n  exact hζ.discr_zeta_eq_discr_zeta_sub_one.symm\n#align discr_odd_prime' discr_odd_prime'\n\n",
 "cyclotomic_ring_is_integral_closure_of_prime_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- The integral closure of `ℤ` inside `cyclotomic_field (p ^ k) ℚ` is\n`cyclotomic_ring (p ^ k) ℤ ℚ`. -/\ntheorem cyclotomic_ring_is_integral_closure_of_prime_pow :\n    is_integral_closure (cyclotomic_ring (p ^ k) ℤ (exprℚ)) ℤ (cyclotomic_field (p ^ k) (exprℚ)) :=\n  by\n  haveI : CharZero (exprℚ) := StrictOrderedSemiring.to_charZero\n  have : is_cyclotomic_extension {p ^ k} (exprℚ) (cyclotomic_field (p ^ k) (exprℚ)) :=\n    by\n    convert cyclotomic_field.is_cyclotomic_extension (p ^ k) _\n    · exact subsingleton.elim _ _\n    · exact NeZero.charZero\n  have hζ := zeta_spec (p ^ k) (exprℚ) (cyclotomic_field (p ^ k) (exprℚ))\n  refine' ⟨is_fraction_ring.injective _ _, fun x => ⟨fun h => ⟨⟨x, _⟩, rfl⟩, _⟩⟩\n  · have := (is_integral_closure_adjoin_singleton_of_prime_pow hζ).is_integral_iff\n    obtain ⟨y, rfl⟩ := this.1 h\n    convert adjoin_mono _ y.2\n    · simp only [eq_iff_true_of_subsingleton]\n    · simp only [eq_iff_true_of_subsingleton]\n    · simp only [PNat.pow_coe, Set.singleton_subset_iff, Set.mem_setOf_eq]\n      exact hζ.pow_eq_one\n  · have : is_cyclotomic_extension {p ^ k} ℤ (cyclotomic_ring (p ^ k) ℤ (exprℚ)) :=\n      by\n      convert cyclotomic_ring.is_cyclotomic_extension _ ℤ (exprℚ)\n      · exact subsingleton.elim _ _\n      · exact NeZero.charZero\n    rintro ⟨y, rfl⟩\n    exact is_integral.algebra_map ((is_cyclotomic_extension.integral {p ^ k} ℤ _) _)\n#align cyclotomic_ring_is_integral_closure_of_prime_pow cyclotomic_ring_is_integral_closure_of_prime_pow\n\n",
 "cyclotomic_ring_is_integral_closure_of_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem cyclotomic_ring_is_integral_closure_of_prime :\n    is_integral_closure (cyclotomic_ring p ℤ (exprℚ)) ℤ (cyclotomic_field p (exprℚ)) :=\n  by\n  rw [← pow_one p]\n  exact cyclotomic_ring_is_integral_closure_of_prime_pow\n#align cyclotomic_ring_is_integral_closure_of_prime cyclotomic_ring_is_integral_closure_of_prime\n\n"}