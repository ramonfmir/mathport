{"from_zeta_aut_spec":
 "/- ./././Mathport/Syntax/Translate/Tactic/Lean3.lean:132:4: warning: unsupported: rw with cfg: { occs := occurrences.pos[occurrences.pos] «expr[ ,]»([4]) } -/\ntheorem from_zeta_aut_spec : from_zeta_aut hμ h (zeta n K L) = μ :=\n  by\n  simp_rw [from_zeta_aut, aut_equiv_pow_symm_apply]\n  generalize_proofs hζ h _ hμ _\n  rw [← hζ.power_basis_gen K]\n  rw [power_basis.equiv_of_minpoly_gen, hμ.power_basis_gen K]\n  convert h.some_spec.some_spec\n  exact ZMod.val_cast_of_lt h.some_spec.some\n#align from_zeta_aut_spec from_zeta_aut_spec\n\n",
 "aut_to_pow_injective":
 "/- ./././Mathport/Syntax/Translate/Tactic/Lean3.lean:132:4: warning: unsupported: rw with cfg: { occs := occurrences.pos[occurrences.pos] «expr[ ,]»([2]) } -/\n/-\nCopyright (c) 2022 Eric Rodriguez. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Rodriguez\n-/\n/-- `is_primitive_root.aut_to_pow` is injective in the case that it's considered over a cyclotomic\nfield extension. -/\ntheorem aut_to_pow_injective : function.injective <| hμ.aut_to_pow K :=\n  by\n  intro f g hfg\n  apply_fun Units.val  at hfg\n  simp only [is_primitive_root.coe_aut_to_pow_apply, [anonymous]] at hfg\n  generalize_proofs hf' hg'  at hfg\n  have hf := hf'.some_spec\n  have hg := hg'.some_spec\n  generalize_proofs hζ  at hf hg\n  suffices f hμ.to_roots_of_unity = g hμ.to_roots_of_unity\n    by\n    apply AlgEquiv.coe_algHom_injective\n    apply (hμ.power_basis K).alg_hom_ext\n    exact this\n  rw [ZMod.eq_iff_modEq_nat] at hfg\n  refine' (hf.trans _).trans hg.symm\n  rw [← roots_of_unity.coe_pow _ hf'.some, ← roots_of_unity.coe_pow _ hg'.some]\n  congr 1\n  rw [pow_eq_pow_iff_modEq]\n  convert hfg\n  rw [hμ.eq_order_of]\n  rw [← hμ.coe_to_roots_of_unity_coe]\n  rw [orderOf_units, orderOf_subgroup]\n#align aut_to_pow_injective aut_to_pow_injective\n\n"}