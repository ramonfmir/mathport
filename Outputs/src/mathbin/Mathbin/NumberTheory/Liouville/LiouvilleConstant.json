{"tsum_one_div_pow_factorial_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- Partial inequality, works with `m ∈ ℝ` satisfying `1 < m`. -/\ntheorem tsum_one_div_pow_factorial_lt (n : ℕ) {m : exprℝ} (m1 : 1 < m) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (1 / m ^ nat.factorial (i + (n + 1))) <\n      (1 - 1 / m)⁻¹ * (1 / m ^ nat.factorial (n + 1)) :=\n  have\n    m0 :-- two useful inequalities\n      0 <\n      m :=\n    zero_lt_one.trans m1\n  have mi : |1 / m| < 1 := (le_of_eq (abs_of_pos (one_div_pos.mpr m0))).trans_lt ((div_lt_one m0).mpr m1)\n  calc\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (1 / m ^ nat.factorial (i + (n + 1))) <\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (1 / m ^ (i + nat.factorial (n + 1))) :=-- to show the strict inequality between these series, we prove that:\n        tsum_lt_tsum_of_nonneg\n        (-- 1. the first series has non-negative terms\n        fun b => one_div_nonneg.mpr (pow_nonneg m0.le _))\n        (-- 2. the second series dominates the first\n        fun b => one_div_pow_le_one_div_pow_of_le m1.le (b.add_factorial_succ_le_factorial_add_succ n))\n        (-- 3. the term with index `i = 2` of the first series is strictly smaller than\n          -- the corresponding term of the second series\n          one_div_pow_strictAnti\n          m1 (n.add_factorial_succ_lt_factorial_add_succ rfl.le))\n        (-- 4. the second series is summable, since its terms grow quickly\n          summable_one_div_pow_of_le\n          m1 fun j => nat.le.intro rfl)\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          ((1 / m) ^ i * (1 / m ^ nat.factorial (n + 1))) :=-- split the sum in the exponent and massage\n    by\n      congr\n      ext i\n      rw [pow_add, ← div_div, div_eq_mul_one_div, one_div_pow]\n    -- factor the constant `(1 / m ^ (n + 1)!)` out of the series\n        _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            ((1 / m) ^ i) *\n          (1 / m ^ nat.factorial (n + 1)) :=\n      tsum_mul_right\n    _ = (1 - 1 / m)⁻¹ * (1 / m ^ nat.factorial (n + 1)) :=-- the series if the geometric series\n          mul_eq_mul_right_iff.mpr\n        (or.inl (tsum_geometric_of_abs_lt_1 mi))\n    \n#align tsum_one_div_pow_factorial_lt tsum_one_div_pow_factorial_lt\n\n",
 "liouville_number_tail_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-\nCopyright (c) 2020 Jujian Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Damiano Testa, Jujian Zhang\n-/\ntheorem liouville_number_tail_pos {m : exprℝ} (hm : 1 < m) (k : ℕ) : 0 < liouville_number_tail m k :=\n  calc\n    -- replace `0` with the constantly zero series `∑ i : ℕ, 0`\n        (0 : exprℝ) =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" 0 :=\n      tsum_zero.symm\n    _ <\n        liouville_number_tail m\n          k :=-- to show that a series with non-negative terms has strictly positive sum it suffices\n          -- to prove that\n          -- 1. the terms of the zero series are indeed non-negative\n          -- 2. the terms of our series are non-negative\n          -- 3. one term of our series is strictly positive -- they all are, we use the first term\n          tsum_lt_tsum_of_nonneg\n          (fun _ => rfl.le) (fun i => one_div_nonneg.mpr (pow_nonneg (zero_le_one.trans hm.le) _))\n          (one_div_pos.mpr\n            (pow_pos (zero_lt_one.trans hm)\n              (nat.factorial\n                (0 +\n                  (k +\n                    1))))) <|-- 4. our series converges -- it does since it is the tail of a converging series, though\n          -- this is not the argument here.\n          summable_one_div_pow_of_le\n          hm fun i => trans le_self_add (Nat.self_le_factorial _)\n    \n#align liouville_number_tail_pos liouville_number_tail_pos\n\n",
 "liouville_number_rat_initial_terms":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- The sum of the `k` initial terms of the Liouville number to base `m` is a ratio of natural\nnumbers where the denominator is `m ^ k!`. -/\ntheorem liouville_number_rat_initial_terms {m : ℕ} (hm : 0 < m) (k : ℕ) :\n    ∃ p : ℕ, liouville_number_initial_terms m k = p / m ^ nat.factorial k :=\n  by\n  induction' k with k h\n  · exact ⟨1, by rw [liouville_number_initial_terms, range_one, sum_singleton, Nat.cast_one]⟩\n  · rcases h with ⟨p_k, h_k⟩\n    use p_k * m ^ (nat.factorial (k + 1) - nat.factorial k) + 1\n    unfold liouville_number_initial_terms at h_k⊢\n    rw [sum_range_succ, h_k, div_add_div, div_eq_div_iff, add_mul]\n    · norm_cast\n      rw [add_mul, one_mul, Nat.factorial_succ,\n        show k.succ * nat.factorial k - nat.factorial k = (k.succ - 1) * nat.factorial k by rw [tsub_mul, one_mul],\n        nat.succ_sub_one, add_mul, one_mul, pow_add]\n      simp [mul_assoc]\n    refine' mul_ne_zero_iff.mpr ⟨_, _⟩\n    all_goals exact pow_ne_zero _ (nat.cast_ne_zero.mpr hm.ne.symm)\n#align liouville_number_rat_initial_terms liouville_number_rat_initial_terms\n\n",
 "liouville_number_eq_initial_terms_add_tail":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Split the sum definining a Liouville number into the first `k` term and the rest. -/\ntheorem liouville_number_eq_initial_terms_add_tail {m : exprℝ} (hm : 1 < m) (k : ℕ) :\n    liouville_number m = liouville_number_initial_terms m k + liouville_number_tail m k :=\n  (sum_add_tsum_nat_add _ (summable_one_div_pow_of_le hm fun i => i.self_le_factorial)).symm\n#align liouville_number_eq_initial_terms_add_tail liouville_number_eq_initial_terms_add_tail\n\n",
 "is_transcendental":
 "/- Placing this lemma outside of the `open/closed liouville`-namespace would allow to remove\n`_root_.`, at the cost of some other small weirdness. -/\ntheorem is_transcendental {m : ℕ} (hm : 2 ≤ m) : _root_.transcendental ℤ (liouville_number m) :=\n  transcendental (is_liouville hm)\n#align is_transcendental is_transcendental\n\n",
 "is_liouville":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem is_liouville {m : ℕ} (hm : 2 ≤ m) : liouville (liouville_number m) :=\n  by\n  -- two useful inequalities\n  have mZ1 : 1 < (m : ℤ) := by\n    norm_cast\n    exact one_lt_two.trans_le hm\n  have m1 : 1 < (m : exprℝ) := by\n    norm_cast\n    exact one_lt_two.trans_le hm\n  intro n\n  -- the first `n` terms sum to `p / m ^ k!`\n  rcases liouville_number_rat_initial_terms (zero_lt_two.trans_le hm) n with ⟨p, hp⟩\n  refine' ⟨p, m ^ nat.factorial n, one_lt_pow mZ1 n.factorial_ne_zero, _⟩\n  push_cast\n  -- separate out the sum of the first `n` terms and the rest\n  rw [liouville_number_eq_initial_terms_add_tail m1 n, ← hp, add_sub_cancel',\n    abs_of_nonneg (liouville_number_tail_pos m1 _).le]\n  exact\n    ⟨((lt_add_iff_pos_right _).mpr (liouville_number_tail_pos m1 n)).ne.symm,\n      (tsum_one_div_pow_factorial_lt n m1).trans_le (aux_calc _ (nat.cast_two.symm.le.trans (nat.cast_le.mpr hm)))⟩\n#align is_liouville is_liouville\n\n",
 "aux_calc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\ntheorem aux_calc (n : ℕ) {m : exprℝ} (hm : 2 ≤ m) :\n    (1 - 1 / m)⁻¹ * (1 / m ^ nat.factorial (n + 1)) ≤ 1 / (m ^ nat.factorial n) ^ n :=\n  calc\n    (1 - 1 / m)⁻¹ * (1 / m ^ nat.factorial (n + 1)) ≤\n        2 * (1 / m ^ nat.factorial (n + 1)) :=-- the second factors coincide (and are non-negative),\n        -- the first factors, satisfy the inequality `sub_one_div_inv_le_two`\n        mul_le_mul_of_nonneg_right\n        (sub_one_div_inv_le_two hm) (by positivity)\n    _ = 2 / m ^ nat.factorial (n + 1) := mul_one_div 2 _\n    _ = 2 / m ^ (nat.factorial n * (n + 1)) := congr_arg ((· / ·) 2) (congr_arg (pow m) (mul_comm _ _))\n    _ ≤ 1 / m ^ (nat.factorial n * n) :=\n      by\n      -- [ NB: in this block, I do not follow the brace convention for subgoals -- I wait until\n      --   I solve all extraneous goals at once with `exact pow_pos (zero_lt_two.trans_le hm) _`. ]\n      -- Clear denominators and massage*\n      apply (div_le_div_iff _ _).mpr\n      conv_rhs => rw [one_mul, mul_add, pow_add, mul_one, pow_mul, mul_comm, ← pow_mul]\n      -- the second factors coincide, so we prove the inequality of the first factors*\n      refine' (mul_le_mul_right _).mpr _\n      -- solve all the inequalities `0 < m ^ ??`\n      any_goals exact pow_pos (zero_lt_two.trans_le hm) _\n      -- `2 ≤ m ^ n!` is a consequence of monotonicity of exponentiation at `2 ≤ m`.\n      exact trans (trans hm (pow_one _).symm.le) (pow_mono (one_le_two.trans hm) n.factorial_pos)\n    _ = 1 / (m ^ nat.factorial n) ^ n := congr_arg ((· / ·) 1) (pow_mul m (nat.factorial n) n)\n    \n#align aux_calc aux_calc\n\n"}