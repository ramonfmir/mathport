{"prime_of_fac_equiv_neg_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-\nCopyright (c) 2022 John Nicol. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: John Nicol\n-/\n/-- For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` only if n is prime. -/\ntheorem prime_of_fac_equiv_neg_one (h : (nat.factorial (n - 1) : zmod n) = -1) (h1 : n ≠ 1) : Prime n :=\n  by\n  rcases eq_or_ne n 0 with (rfl | h0)\n  · norm_num at h\n  replace h1 : 1 < n := n.two_le_iff.mpr ⟨h0, h1⟩\n  by_contra h2\n  obtain ⟨m, hm1, hm2 : 1 < m, hm3⟩ := exists_dvd_of_not_prime2 h1 h2\n  have hm : m ∣ nat.factorial (n - 1) := Nat.dvd_factorial (pos_of_gt hm2) (le_pred_of_lt hm3)\n  refine' hm2.ne' (nat.dvd_one.mp ((Nat.dvd_add_right hm).mp (hm1.trans _)))\n  rw [← zmod.nat_coe_zmod_eq_zero_iff_dvd, cast_add, cast_one, h, add_left_neg]\n#align prime_of_fac_equiv_neg_one prime_of_fac_equiv_neg_one\n\n",
 "prime_iff_fac_equiv_neg_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nat.factorial -/\n/-- **Wilson's Theorem**: For `n ≠ 1`, `(n-1)!` is congruent to `-1` modulo `n` iff n is prime. -/\ntheorem prime_iff_fac_equiv_neg_one (h : n ≠ 1) : Prime n ↔ (nat.factorial (n - 1) : zmod n) = -1 :=\n  by\n  refine' ⟨fun h1 => _, fun h2 => prime_of_fac_equiv_neg_one h2 h⟩\n  haveI := fact.mk h1\n  exact zmod.wilsons_lemma n\n#align prime_iff_fac_equiv_neg_one prime_iff_fac_equiv_neg_one\n\n"}