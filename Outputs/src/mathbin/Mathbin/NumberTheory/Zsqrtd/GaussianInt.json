{"to_real_re":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_real_re (x : «exprℤ[i]») : ((x.re : ℤ) : exprℝ) = (x : exprℂ).re := by simp [to_complex_def]\n#align to_real_re to_real_re\n\n",
 "to_real_im":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_real_im (x : «exprℤ[i]») : ((x.im : ℤ) : exprℝ) = (x : exprℂ).im := by simp [to_complex_def]\n#align to_real_im to_real_im\n\n",
 "to_complex_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_zero : ((0 : «exprℤ[i]») : exprℂ) = 0 :=\n  to_complex.map_zero\n#align to_complex_zero to_complex_zero\n\n",
 "to_complex_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_sub (x y : «exprℤ[i]») : ((x - y : «exprℤ[i]») : exprℂ) = x - y :=\n  to_complex.map_sub _ _\n#align to_complex_sub to_complex_sub\n\n",
 "to_complex_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `star_ring_end -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_star (x : «exprℤ[i]») : ((star x : «exprℤ[i]») : exprℂ) = (star_ring_end) (x : exprℂ) :=\n  by\n  rw [to_complex_def₂, to_complex_def₂]\n  exact congr_arg₂ _ rfl (Int.cast_neg _)\n#align to_complex_star to_complex_star\n\n",
 "to_complex_re":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_re (x y : ℤ) : ((⟨x, y⟩ : «exprℤ[i]») : exprℂ).re = x := by simp [to_complex_def]\n#align to_complex_re to_complex_re\n\n",
 "to_complex_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_one : ((1 : «exprℤ[i]») : exprℂ) = 1 :=\n  to_complex.map_one\n#align to_complex_one to_complex_one\n\n",
 "to_complex_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_neg (x : «exprℤ[i]») : ((-x : «exprℤ[i]») : exprℂ) = -x :=\n  to_complex.map_neg _\n#align to_complex_neg to_complex_neg\n\n",
 "to_complex_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_mul (x y : «exprℤ[i]») : ((x * y : «exprℤ[i]») : exprℂ) = x * y :=\n  to_complex.map_mul _ _\n#align to_complex_mul to_complex_mul\n\n",
 "to_complex_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_inj {x y : «exprℤ[i]»} : (x : exprℂ) = y ↔ x = y := by cases x <;> cases y <;> simp [to_complex_def₂]\n#align to_complex_inj to_complex_inj\n\n",
 "to_complex_im":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_im (x y : ℤ) : ((⟨x, y⟩ : «exprℤ[i]») : exprℂ).im = y := by simp [to_complex_def]\n#align to_complex_im to_complex_im\n\n",
 "to_complex_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_eq_zero {x : «exprℤ[i]»} : (x : exprℂ) = 0 ↔ x = 0 := by rw [← to_complex_zero, to_complex_inj]\n#align to_complex_eq_zero to_complex_eq_zero\n\n",
 "to_complex_div_re":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem to_complex_div_re (x y : «exprℤ[i]») : ((x / y : «exprℤ[i]») : exprℂ).re = round (x / y : exprℂ).re := by\n  rw [div_def, ← @Rat.round_cast (exprℝ) _ _] <;> simp [-Rat.round_cast, mul_assoc, div_eq_mul_inv, mul_add, add_mul]\n#align to_complex_div_re to_complex_div_re\n\n",
 "to_complex_div_im":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem to_complex_div_im (x y : «exprℤ[i]») : ((x / y : «exprℤ[i]») : exprℂ).im = round (x / y : exprℂ).im := by\n  rw [div_def, ← @Rat.round_cast (exprℝ) _ _, ← @Rat.round_cast (exprℝ) _ _] <;>\n    simp [-Rat.round_cast, mul_assoc, div_eq_mul_inv, mul_add, add_mul]\n#align to_complex_div_im to_complex_div_im\n\n",
 "to_complex_def₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem to_complex_def₂ (x : «exprℤ[i]») : (x : exprℂ) = ⟨x.re, x.im⟩ := by apply Complex.ext <;> simp [to_complex_def]\n#align to_complex_def₂ to_complex_def₂\n\n",
 "to_complex_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem to_complex_def' (x y : ℤ) : ((⟨x, y⟩ : «exprℤ[i]») : exprℂ) = x + y * I := by simp [to_complex_def]\n#align to_complex_def' to_complex_def'\n\n",
 "to_complex_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/-\nCopyright (c) 2019 Chris Hughes. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Hughes\n-/\n-- Avoid making things noncomputable unnecessarily.\ntheorem to_complex_def (x : «exprℤ[i]») : (x : exprℂ) = x.re + x.im * I :=\n  rfl\n#align to_complex_def to_complex_def\n\n",
 "to_complex_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem to_complex_add (x y : «exprℤ[i]») : ((x + y : «exprℤ[i]») : exprℂ) = x + y :=\n  to_complex.map_add _ _\n#align to_complex_add to_complex_add\n\n",
 "sq_add_sq_of_nat_prime_of_not_irreducible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem sq_add_sq_of_nat_prime_of_not_irreducible (p : ℕ) [hp : Fact p.prime] (hpi : ¬Irreducible (p : «exprℤ[i]»)) :\n    ∃ a b, a ^ 2 + b ^ 2 = p :=\n  have hpu : ¬IsUnit (p : «exprℤ[i]») :=\n    mt norm_eq_one_iff.2 <| by\n      rw [norm_nat_cast, Int.natAbs_mul, mul_eq_one] <;> exact fun h => (ne_of_lt hp.1.one_lt).symm h.1\n  have hab : ∃ a b, (p : «exprℤ[i]») = a * b ∧ ¬IsUnit a ∧ ¬IsUnit b := by\n    simpa [irreducible_iff, hpu, not_forall, not_or] using hpi\n  let ⟨a, b, hpab, hau, hbu⟩ := hab\n  have hnap : (norm a).nat_abs = p :=\n    ((hp.1.mul_eq_prime_sq_iff (mt norm_eq_one_iff.1 hau) (mt norm_eq_one_iff.1 hbu)).1 <| by\n        rw [← Int.coe_nat_inj', Int.coe_nat_pow, sq, ← @norm_nat_cast (-1), hpab] <;> simp).1\n  ⟨a.re.nat_abs, a.im.nat_abs, by simpa [nat_abs_norm_eq, sq] using hnap⟩\n#align sq_add_sq_of_nat_prime_of_not_irreducible sq_add_sq_of_nat_prime_of_not_irreducible\n\n",
 "prime_of_nat_prime_of_mod_four_eq_three":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem prime_of_nat_prime_of_mod_four_eq_three (p : ℕ) [hp : Fact p.prime] (hp3 : p % 4 = 3) :\n    Prime (p : «exprℤ[i]») :=\n  irreducible_iff_prime.1 <|\n    by_contradiction fun hpi =>\n      let ⟨a, b, hab⟩ := sq_add_sq_of_nat_prime_of_not_irreducible p hpi\n      have : ∀ a b : ZMod 4, a ^ 2 + b ^ 2 ≠ p := by erw [← ZMod.nat_cast_mod p 4, hp3] <;> exact by decide\n      this a b (hab ▸ by simp)\n#align prime_of_nat_prime_of_mod_four_eq_three prime_of_nat_prime_of_mod_four_eq_three\n\n",
 "prime_iff_mod_four_eq_three_of_nat_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/-- A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` -/\ntheorem prime_iff_mod_four_eq_three_of_nat_prime (p : ℕ) [hp : Fact p.prime] : Prime (p : «exprℤ[i]») ↔ p % 4 = 3 :=\n  ⟨mod_four_eq_three_of_nat_prime_of_prime p, prime_of_nat_prime_of_mod_four_eq_three p⟩\n#align prime_iff_mod_four_eq_three_of_nat_prime prime_iff_mod_four_eq_three_of_nat_prime\n\n",
 "norm_sq_le_norm_sq_of_re_le_of_im_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem norm_sq_le_norm_sq_of_re_le_of_im_le {x y : exprℂ} (hre : |x.re| ≤ |y.re|) (him : |x.im| ≤ |y.im|) :\n    x.norm_sq ≤ y.norm_sq := by\n  rw [norm_sq_apply, norm_sq_apply, ← _root_.abs_mul_self, _root_.abs_mul, ← _root_.abs_mul_self y.re,\n      _root_.abs_mul y.re, ← _root_.abs_mul_self x.im, _root_.abs_mul x.im, ← _root_.abs_mul_self y.im,\n      _root_.abs_mul y.im] <;>\n    exact add_le_add (mul_self_le_mul_self (abs_nonneg _) hre) (mul_self_le_mul_self (abs_nonneg _) him)\n#align norm_sq_le_norm_sq_of_re_le_of_im_le norm_sq_le_norm_sq_of_re_le_of_im_le\n\n",
 "norm_sq_div_sub_div_lt_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\ntheorem norm_sq_div_sub_div_lt_one (x y : «exprℤ[i]») :\n    ((x / y : exprℂ) - ((x / y : «exprℤ[i]») : exprℂ)).norm_sq < 1 :=\n  calc\n    ((x / y : exprℂ) - ((x / y : «exprℤ[i]») : exprℂ)).norm_sq =\n        ((x / y : exprℂ).re - ((x / y : «exprℤ[i]») : exprℂ).re +\n              ((x / y : exprℂ).im - ((x / y : «exprℤ[i]») : exprℂ).im) * I :\n            exprℂ).norm_sq :=\n      congr_arg _ <| by apply Complex.ext <;> simp\n    _ ≤ (1 / 2 + 1 / 2 * I).norm_sq :=\n      (have : |(2⁻¹ : exprℝ)| = 2⁻¹ := abs_of_nonneg (by norm_num)\n      norm_sq_le_norm_sq_of_re_le_of_im_le\n        (by rw [to_complex_div_re] <;> simp [norm_sq, this] <;> simpa using abs_sub_round (x / y : exprℂ).re)\n        (by rw [to_complex_div_im] <;> simp [norm_sq, this] <;> simpa using abs_sub_round (x / y : exprℂ).im))\n    _ < 1 := by simp [norm_sq] <;> norm_num\n    \n#align norm_sq_div_sub_div_lt_one norm_sq_div_sub_div_lt_one\n\n",
 "norm_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem norm_pos {x : «exprℤ[i]»} : 0 < norm x ↔ x ≠ 0 := by\n  rw [lt_iff_le_and_ne, ne.def, eq_comm, norm_eq_zero] <;> simp [norm_nonneg]\n#align norm_pos norm_pos\n\n",
 "norm_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n#print norm_nonneg /-\ntheorem norm_nonneg (x : «exprℤ[i]») : 0 ≤ norm x :=\n  norm_nonneg (by norm_num) _\n#align norm_nonneg norm_nonneg\n-/\n\n",
 "norm_mod_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem norm_mod_lt (x : «exprℤ[i]») {y : «exprℤ[i]»} (hy : y ≠ 0) : (x % y).norm < y.norm :=\n  have : (y : exprℂ) ≠ 0 := by rwa [ne.def, ← to_complex_zero, to_complex_inj]\n  (@Int.cast_lt (exprℝ) _ _ _ _).1 <|\n    calc\n      ↑(Zsqrtd.norm (x % y)) = (x - y * (x / y : «exprℤ[i]») : exprℂ).norm_sq := by simp [mod_def]\n      _ = (y : exprℂ).norm_sq * (x / y - (x / y : «exprℤ[i]») : exprℂ).norm_sq := by\n        rw [← norm_sq_mul, mul_sub, mul_div_cancel' _ this]\n      _ < (y : exprℂ).norm_sq * 1 := (mul_lt_mul_of_pos_left (norm_sq_div_sub_div_lt_one _ _) (normSq_pos.2 this))\n      _ = Zsqrtd.norm y := by simp\n      \n#align norm_mod_lt norm_mod_lt\n\n",
 "norm_le_norm_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem norm_le_norm_mul_left (x : «exprℤ[i]») {y : «exprℤ[i]»} (hy : y ≠ 0) :\n    (norm x).nat_abs ≤ (norm (x * y)).nat_abs := by\n  rw [Zsqrtd.norm_mul, Int.natAbs_mul] <;>\n    exact\n      le_mul_of_one_le_right (nat.zero_le _)\n        (Int.ofNat_le.1 (by rw [abs_coe_nat_norm] <;> exact int.add_one_le_of_lt (norm_pos.2 hy)))\n#align norm_le_norm_mul_left norm_le_norm_mul_left\n\n",
 "norm_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n#print norm_eq_zero /-\n@[simp]\ntheorem norm_eq_zero {x : «exprℤ[i]»} : norm x = 0 ↔ x = 0 := by rw [← @Int.cast_inj (exprℝ) _ _ _] <;> simp\n#align norm_eq_zero norm_eq_zero\n-/\n\n",
 "nat_cast_real_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem nat_cast_real_norm (x : «exprℤ[i]») : (x.norm : exprℝ) = (x : exprℂ).norm_sq := by\n  rw [Zsqrtd.norm, norm_sq] <;> simp\n#align nat_cast_real_norm nat_cast_real_norm\n\n",
 "nat_cast_nat_abs_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n@[simp]\ntheorem nat_cast_nat_abs_norm {α : Type _} [Ring α] (x : «exprℤ[i]») : (x.norm.nat_abs : α) = x.norm := by\n  rw [← Int.cast_ofNat, abs_coe_nat_norm]\n#align nat_cast_nat_abs_norm nat_cast_nat_abs_norm\n\n",
 "nat_cast_complex_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℂ -/\n@[simp]\ntheorem nat_cast_complex_norm (x : «exprℤ[i]») : (x.norm : exprℂ) = (x : exprℂ).norm_sq := by\n  cases x <;> rw [Zsqrtd.norm, norm_sq] <;> simp\n#align nat_cast_complex_norm nat_cast_complex_norm\n\n",
 "nat_abs_norm_mod_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem nat_abs_norm_mod_lt (x : «exprℤ[i]») {y : «exprℤ[i]»} (hy : y ≠ 0) : (x % y).norm.nat_abs < y.norm.nat_abs :=\n  Int.ofNat_lt.1 (by simp [-Int.ofNat_lt, norm_mod_lt x hy])\n#align nat_abs_norm_mod_lt nat_abs_norm_mod_lt\n\n",
 "nat_abs_norm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem nat_abs_norm_eq (x : «exprℤ[i]») : x.norm.nat_abs = x.re.nat_abs * x.re.nat_abs + x.im.nat_abs * x.im.nat_abs :=\n  Int.ofNat.inj <| by simp; simp [Zsqrtd.norm]\n#align nat_abs_norm_eq nat_abs_norm_eq\n\n",
 "mod_four_eq_three_of_nat_prime_of_prime":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem mod_four_eq_three_of_nat_prime_of_prime (p : ℕ) [hp : Fact p.prime] (hpi : Prime (p : «exprℤ[i]»)) :\n    p % 4 = 3 :=\n  hp.1.eq_two_or_odd.elim\n    (fun hp2 =>\n      absurd hpi\n        (mt irreducible_iff_prime.2 fun ⟨hu, h⟩ =>\n          by\n          have := h ⟨1, 1⟩ ⟨1, -1⟩ (hp2.symm ▸ rfl)\n          rw [← norm_eq_one_iff, ← norm_eq_one_iff] at this\n          exact absurd this (by decide)))\n    fun hp1 =>\n    by_contradiction fun hp3 : p % 4 ≠ 3 =>\n      by\n      have hp41 : p % 4 = 1 :=\n        by\n        rw [← Nat.mod_mul_left_mod p 2 2, show 2 * 2 = 4 from rfl] at hp1\n        have := nat.mod_lt p (show 0 < 4 by decide)\n        revert this hp3 hp1\n        generalize p % 4 = m; decide!\n      let ⟨k, hk⟩ := zmod.exists_sq_eq_neg_one_iff.2 <| by rw [hp41] <;> exact by decide\n      obtain ⟨k, k_lt_p, rfl⟩ : ∃ (k' : ℕ)(h : k' < p), (k' : ZMod p) = k := by\n        refine' ⟨k.val, k.val_lt, ZMod.nat_cast_zmod_val k⟩\n      have hpk : p ∣ k ^ 2 + 1 := by\n        rw [pow_two, ← char_p.cast_eq_zero_iff (ZMod p) p, Nat.cast_add, Nat.cast_mul, Nat.cast_one, ← hk, add_left_neg]\n      have hkmul : (k ^ 2 + 1 : «exprℤ[i]») = ⟨k, 1⟩ * ⟨k, -1⟩ := by simp [sq, Zsqrtd.ext]\n      have hpne1 : p ≠ 1 := ne_of_gt hp.1.one_lt\n      have hkltp : 1 + k * k < p * p :=\n        calc\n          1 + k * k ≤ k + k * k :=\n            add_le_add_right (nat.pos_of_ne_zero fun hk0 => by clear_aux_decl <;> simp_all [pow_succ']) _\n          _ = k * (k + 1) := by simp [add_comm, mul_add]\n          _ < p * p := mul_lt_mul k_lt_p k_lt_p (nat.succ_pos _) (nat.zero_le _)\n          \n      have hpk₁ : ¬(p : «exprℤ[i]») ∣ ⟨k, -1⟩ := fun ⟨x, hx⟩ =>\n        lt_irrefl (p * x : «exprℤ[i]»).norm.nat_abs <|\n          calc\n            (norm (p * x : «exprℤ[i]»)).nat_abs = (Zsqrtd.norm ⟨k, -1⟩).nat_abs := by rw [hx]\n            _ < (norm (p : «exprℤ[i]»)).nat_abs := by simpa [add_comm, Zsqrtd.norm] using hkltp\n            _ ≤ (norm (p * x : «exprℤ[i]»)).nat_abs :=\n              norm_le_norm_mul_left _ fun hx0 =>\n                show (-1 : ℤ) ≠ 0 by decide <| by simpa [hx0] using congr_arg zsqrtd.im hx\n            \n      have hpk₂ : ¬(p : «exprℤ[i]») ∣ ⟨k, 1⟩ := fun ⟨x, hx⟩ =>\n        lt_irrefl (p * x : «exprℤ[i]»).norm.nat_abs <|\n          calc\n            (norm (p * x : «exprℤ[i]»)).nat_abs = (Zsqrtd.norm ⟨k, 1⟩).nat_abs := by rw [hx]\n            _ < (norm (p : «exprℤ[i]»)).nat_abs := by simpa [add_comm, Zsqrtd.norm] using hkltp\n            _ ≤ (norm (p * x : «exprℤ[i]»)).nat_abs :=\n              norm_le_norm_mul_left _ fun hx0 =>\n                show (1 : ℤ) ≠ 0 by decide <| by simpa [hx0] using congr_arg zsqrtd.im hx\n            \n      have hpu : ¬IsUnit (p : «exprℤ[i]») :=\n        mt norm_eq_one_iff.2\n          (by rw [norm_nat_cast, Int.natAbs_mul, mul_eq_one] <;> exact fun h => (ne_of_lt hp.1.one_lt).symm h.1)\n      obtain ⟨y, hy⟩ := hpk\n      have := hpi.2.2 ⟨k, 1⟩ ⟨k, -1⟩ ⟨y, by rw [← hkmul, ← Nat.cast_mul p, ← hy] <;> simp⟩\n      clear_aux_decl\n      tauto\n#align mod_four_eq_three_of_nat_prime_of_prime mod_four_eq_three_of_nat_prime_of_prime\n\n",
 "mod_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem mod_def (x y : «exprℤ[i]») : x % y = x - y * (x / y) :=\n  rfl\n#align mod_def mod_def\n\n",
 "div_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem div_def (x y : «exprℤ[i]») :\n    x / y = ⟨round ((x * star y).re / norm y : exprℚ), round ((x * star y).im / norm y : exprℚ)⟩ :=\n  show zsqrtd.mk _ _ = _ by simp [div_eq_mul_inv]\n#align div_def div_def\n\n",
 "abs_coe_nat_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℤ[i]» -/\ntheorem abs_coe_nat_norm (x : «exprℤ[i]») : (x.norm.nat_abs : ℤ) = x.norm :=\n  Int.natAbs_of_nonneg (norm_nonneg _)\n#align abs_coe_nat_norm abs_coe_nat_norm\n\n"}