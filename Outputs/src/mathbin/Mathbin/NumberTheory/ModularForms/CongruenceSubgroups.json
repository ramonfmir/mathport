{"is_congruence_subgroup_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\ntheorem is_congruence_subgroup_trans (H K : subgroup («exprSL( , )» 2 ℤ)) (h : H ≤ K) (h2 : is_congruence_subgroup H) :\n    is_congruence_subgroup K := by\n  obtain ⟨N, hN⟩ := h2\n  refine' ⟨N, le_trans hN h⟩\n#align is_congruence_subgroup_trans is_congruence_subgroup_trans\n\n",
 "conj_cong_is_cong":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem conj_cong_is_cong (g : conj_act («exprSL( , )» 2 ℤ)) (Γ : subgroup («exprSL( , )» 2 ℤ))\n    (h : is_congruence_subgroup Γ) : is_congruence_subgroup («expr • » g Γ) :=\n  by\n  obtain ⟨N, HN⟩ := h\n  refine' ⟨N, _⟩\n  rw [← Gamma_cong_eq_self N g, subgroup.pointwise_smul_le_pointwise_smul_iff]\n  exact HN\n#align conj_cong_is_cong conj_cong_is_cong\n\n",
 "SL_reduction_mod_hom_val":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSLMOD( )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/-\nCopyright (c) 2022 Chris Birkbeck. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Chris Birkbeck\n-/\n@[simp]\ntheorem SL_reduction_mod_hom_val (N : ℕ) (γ : «exprSL( , )» 2 ℤ) :\n    ∀ i j : fin 2, ((«exprSLMOD( )» N) γ : matrix (fin 2) (fin 2) (zmod N)) i j = (((«expr↑ₘ » γ) i j : ℤ) : zmod N) :=\n  fun i j => rfl\n#align SL_reduction_mod_hom_val SL_reduction_mod_hom_val\n\n",
 "Gamma_zero_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem Gamma_zero_bot : Gamma 0 = «expr⊥» := by\n  ext\n  simp only [Gamma_mem, coe_coe, coe_matrix_coe, Int.coe_castRingHom, map_apply, Int.cast_id, subgroup.mem_bot]\n  constructor\n  · intro h\n    ext\n    fin_cases i <;> fin_cases j\n    any_goals simp [h]\n  · intro h\n    simp [h]\n#align Gamma_zero_bot Gamma_zero_bot\n\n",
 "Gamma_one_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem Gamma_one_top : Gamma 1 = «expr⊤» := by\n  ext\n  simp\n#align Gamma_one_top Gamma_one_top\n\n",
 "Gamma_normal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSLMOD( )» -/\ntheorem Gamma_normal (N : ℕ) : subgroup.normal (Gamma N) :=\n  («exprSLMOD( )» N).normal_ker\n#align Gamma_normal Gamma_normal\n\n",
 "Gamma_mem'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSLMOD( )» -/\ntheorem Gamma_mem' (N : ℕ) (γ : «exprSL( , )» 2 ℤ) : γ ∈ Gamma N ↔ («exprSLMOD( )» N) γ = 1 :=\n  iff.rfl\n#align Gamma_mem' Gamma_mem'\n\n",
 "Gamma_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n@[simp]\ntheorem Gamma_mem (N : ℕ) (γ : «exprSL( , )» 2 ℤ) :\n    γ ∈ Gamma N ↔\n      (((«expr↑ₘ » γ) 0 0 : ℤ) : zmod N) = 1 ∧\n        (((«expr↑ₘ » γ) 0 1 : ℤ) : zmod N) = 0 ∧\n          (((«expr↑ₘ » γ) 1 0 : ℤ) : zmod N) = 0 ∧ (((«expr↑ₘ » γ) 1 1 : ℤ) : zmod N) = 1 :=\n  by\n  rw [Gamma_mem']\n  constructor\n  · intro h\n    simp [← SL_reduction_mod_hom_val N γ, h]\n  · intro h\n    ext\n    rw [SL_reduction_mod_hom_val N γ]\n    fin_cases i <;> fin_cases j\n    all_goals simp_rw [h]; rfl\n#align Gamma_mem Gamma_mem\n\n",
 "Gamma_is_cong_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem Gamma_is_cong_sub (N : «exprℕ+») : is_congruence_subgroup (Gamma N) :=\n  ⟨N, by simp only [le_refl]⟩\n#align Gamma_is_cong_sub Gamma_is_cong_sub\n\n",
 "Gamma_cong_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Gamma_cong_eq_self (N : ℕ) (g : conj_act («exprSL( , )» 2 ℤ)) : «expr • » g (Gamma N) = Gamma N := by\n  apply subgroup.normal.conj_act (Gamma_normal N)\n#align Gamma_cong_eq_self Gamma_cong_eq_self\n\n",
 "Gamma1_to_Gamma0_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\ntheorem Gamma1_to_Gamma0_mem (N : ℕ) (A : Gamma0 N) :\n    A ∈ Gamma1' N ↔\n      (((«expr↑ₘ » A) 0 0 : ℤ) : zmod N) = 1 ∧\n        (((«expr↑ₘ » A) 1 1 : ℤ) : zmod N) = 1 ∧ (((«expr↑ₘ » A) 1 0 : ℤ) : zmod N) = 0 :=\n  by\n  constructor\n  · intro ha\n    have hA := A.property\n    rw [Gamma0_mem] at hA\n    have adet := Gamma0_det N A\n    rw [matrix.det_fin_two] at adet\n    simp only [Gamma_0_map, coe_coe, coe_matrix_coe, Int.coe_castRingHom, map_apply, Gamma1_mem', MonoidHom.coe_mk,\n      subtype.val_eq_coe, Int.cast_sub, Int.cast_mul] at *\n    rw [hA, ha] at adet\n    simp only [mul_one, mul_zero, sub_zero] at adet\n    simp only [adet, hA, ha, eq_self_iff_true, and_self_iff]\n  · intro ha\n    simp only [Gamma1_mem', Gamma_0_map, MonoidHom.coe_mk, coe_coe, coe_matrix_coe, Int.coe_castRingHom, map_apply]\n    exact ha.2.1\n#align Gamma1_to_Gamma0_mem Gamma1_to_Gamma0_mem\n\n",
 "Gamma1_mem'":
 "@[simp]\ntheorem Gamma1_mem' (N : ℕ) (γ : Gamma0 N) : γ ∈ Gamma1' N ↔ (Gamma_0_map N) γ = 1 :=\n  iff.rfl\n#align Gamma1_mem' Gamma1_mem'\n\n",
 "Gamma1_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n@[simp]\ntheorem Gamma1_mem (N : ℕ) (A : «exprSL( , )» 2 ℤ) :\n    A ∈ Gamma1 N ↔\n      (((«expr↑ₘ » A) 0 0 : ℤ) : zmod N) = 1 ∧\n        (((«expr↑ₘ » A) 1 1 : ℤ) : zmod N) = 1 ∧ (((«expr↑ₘ » A) 1 0 : ℤ) : zmod N) = 0 :=\n  by\n  constructor\n  · intro ha\n    simp_rw [Gamma1, subgroup.mem_map] at ha\n    simp at ha\n    obtain ⟨⟨x, hx⟩, hxx⟩ := ha\n    rw [Gamma1_to_Gamma0_mem] at hx\n    rw [← hxx]\n    convert hx\n  · intro ha\n    simp_rw [Gamma1, subgroup.mem_map]\n    have hA : A ∈ Gamma0 N := by simp [ha.right.right, Gamma0_mem, subtype.val_eq_coe]\n    have HA : (⟨A, hA⟩ : Gamma0 N) ∈ Gamma1' N :=\n      by\n      simp only [Gamma1_to_Gamma0_mem, subgroup.coe_mk, coe_coe, coe_matrix_coe, Int.coe_castRingHom, map_apply]\n      exact ha\n    refine' ⟨(⟨(⟨A, hA⟩ : Gamma0 N), HA⟩ : (Gamma1' N : subgroup (Gamma0 N))), _⟩\n    simp\n#align Gamma1_mem Gamma1_mem\n\n",
 "Gamma1_is_congruence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem Gamma1_is_congruence (N : «exprℕ+») : is_congruence_subgroup (Gamma1 N) :=\n  by\n  refine' ⟨N, _⟩\n  intro A hA\n  simp only [Gamma1_mem, Gamma_mem] at *\n  simp only [hA, eq_self_iff_true, and_self_iff]\n#align Gamma1_is_congruence Gamma1_is_congruence\n\n",
 "Gamma1_in_Gamma0":
 "theorem Gamma1_in_Gamma0 (N : ℕ) : Gamma1 N ≤ Gamma0 N :=\n  by\n  intro x HA\n  simp only [Gamma0_mem, Gamma1_mem, coe_coe, coe_matrix_coe, Int.coe_castRingHom, map_apply] at *\n  exact HA.2.2\n#align Gamma1_in_Gamma0 Gamma1_in_Gamma0\n\n",
 "Gamma0_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprSL( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↑ₘ » -/\n@[simp]\ntheorem Gamma0_mem (N : ℕ) (A : «exprSL( , )» 2 ℤ) : A ∈ Gamma0 N ↔ (((«expr↑ₘ » A) 1 0 : ℤ) : zmod N) = 0 :=\n  iff.rfl\n#align Gamma0_mem Gamma0_mem\n\n",
 "Gamma0_is_congruence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprℕ+» -/\ntheorem Gamma0_is_congruence (N : «exprℕ+») : is_congruence_subgroup (Gamma0 N) :=\n  is_congruence_subgroup_trans _ _ (Gamma1_in_Gamma0 N) (Gamma1_is_congruence N)\n#align Gamma0_is_congruence Gamma0_is_congruence\n\n",
 "Gamma0_det":
 "theorem Gamma0_det (N : ℕ) (A : Gamma0 N) : (A.1.1.det : zmod N) = 1 := by simp [A.1.property]\n#align Gamma0_det Gamma0_det\n\n"}