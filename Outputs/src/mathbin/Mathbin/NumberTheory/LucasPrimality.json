{"lucas_primality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print lucas_primality /-\n/-\nCopyright (c) 2020 Bolton Bailey. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bolton Bailey\n-/\n/-- If `a^(p-1) = 1 mod p`, but `a^((p-1)/q) ≠ 1 mod p` for all prime factors `q` of `p-1`, then `p`\nis prime. This is true because `a` has order `p-1` in the multiplicative group mod `p`, so this\ngroup must itself have order `p-1`, which only happens when `p` is prime.\n-/\ntheorem lucas_primality (p : ℕ) (a : ZMod p) (ha : a ^ (p - 1) = 1)\n    (hd : ∀ q : ℕ, q.prime → q ∣ p - 1 → a ^ ((p - 1) / q) ≠ 1) : p.prime :=\n  by\n  have h0 : p ≠ 0 := by\n    rintro ⟨⟩\n    exact hd 2 Nat.prime_two (dvd_zero _) (pow_zero _)\n  have h1 : p ≠ 1 := by\n    rintro ⟨⟩\n    exact hd 2 Nat.prime_two (dvd_zero _) (pow_zero _)\n  have hp1 : 1 < p := lt_of_le_of_ne h0.bot_lt h1.symm\n  have order_of_a : orderOf a = p - 1 :=\n    by\n    apply orderOf_eq_of_pow_and_pow_div_prime _ ha hd\n    exact tsub_pos_of_lt hp1\n  haveI : NeZero p := ⟨h0⟩\n  rw [Nat.prime_iff_card_units]\n  -- Prove cardinality of `units` of `zmod p` is both `≤ p-1` and `≥ p-1`\n  refine' le_antisymm (Nat.card_units_zmod_lt_sub_one hp1) _\n  have hp' : p - 2 + 1 = p - 1 := tsub_add_eq_add_tsub hp1\n  let a' : «expr ˣ» (ZMod p) := Units.mkOfMulEqOne a (a ^ (p - 2)) (by rw [← pow_succ, hp', ha])\n  calc\n    p - 1 = orderOf a := order_of_a.symm\n    _ = orderOf a' := (orderOf_injective (Units.coeHom (ZMod p)) Units.ext a')\n    _ ≤ Fintype.card («expr ˣ» (ZMod p)) := orderOf_le_card_univ\n    \n#align lucas_primality lucas_primality\n-/\n\n"}