{"lift_star_lift_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem lift_star_lift_map {D : Type _} [Category D] {Z : D} (F : «expr ⥤ » C D) (M : ∀ x : C, «expr ⟶ » Z (F.obj x))\n    (hM : ∀ (x y : C) (f : «expr ⟶ » x y), «expr ≫ » (M x) (F.map f) = M y) (x : C) :\n    «expr ≫ » (lift_star F M hM).hom ((lift F M hM).map (star_initial.to (incl.obj x))) =\n      «expr ≫ » (M x) ((incl_lift F M hM).hom.app x) :=\n  by\n  erw [category.id_comp, category.comp_id]\n  rfl\n#align lift_star_lift_map lift_star_lift_map\n\n",
 "lift_map_lift_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2021 Adam Topaz. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Adam Topaz\n-/\ntheorem lift_map_lift_star {D : Type _} [Category D] {Z : D} (F : «expr ⥤ » C D) (M : ∀ x : C, «expr ⟶ » (F.obj x) Z)\n    (hM : ∀ (x y : C) (f : «expr ⟶ » x y), «expr ≫ » (F.map f) (M y) = M x) (x : C) :\n    «expr ≫ » ((lift F M hM).map (star_terminal.from (incl.obj x))) (lift_star F M hM).hom =\n      «expr ≫ » ((incl_lift F M hM).hom.app x) (M x) :=\n  by\n  erw [category.id_comp, category.comp_id]\n  rfl\n#align lift_map_lift_star lift_map_lift_star\n\n"}