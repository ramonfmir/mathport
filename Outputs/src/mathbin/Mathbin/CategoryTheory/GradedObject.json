{"zero_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem zero_apply [has_zero_morphisms C] (β : Type w) (X Y : graded_object β C) (b : β) : (0 : «expr ⟶ » X Y) b = 0 :=\n  rfl\n#align zero_apply zero_apply\n\n",
 "shift_functor_obj_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- See note [dsimp, simp].\n@[simp]\ntheorem shift_functor_obj_apply {β : Type _} [add_comm_group β] (s : β) (X : β → C) (t : β) (n : ℤ) :\n    (shift_functor (graded_object_with_shift s C) n).obj X t = X (t + «expr • » n s) :=\n  rfl\n#align shift_functor_obj_apply shift_functor_obj_apply\n\n",
 "shift_functor_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem shift_functor_map_apply {β : Type _} [add_comm_group β] (s : β) {X Y : graded_object_with_shift s C}\n    (f : «expr ⟶ » X Y) (t : β) (n : ℤ) :\n    (shift_functor (graded_object_with_shift s C) n).map f t = f (t + «expr • » n s) :=\n  rfl\n#align shift_functor_map_apply shift_functor_map_apply\n\n",
 "eq_to_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem eq_to_hom_apply {β : Type w} {X Y : ∀ b : β, C} (h : X = Y) (b : β) :\n    (eq_to_hom h : «expr ⟶ » X Y) b = eq_to_hom (by subst h) :=\n  by\n  subst h\n  rfl\n#align eq_to_hom_apply eq_to_hom_apply\n\n",
 "comap_eq_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\ntheorem comap_eq_trans {β γ : Type w} {f g h : β → γ} (k : f = g) (l : g = h) :\n    comap_eq C (k.trans l) = «expr ≪≫ » (comap_eq C k) (comap_eq C l) :=\n  by\n  ext (X b)\n  simp\n#align comap_eq_trans comap_eq_trans\n\n",
 "comap_eq_symm":
 "/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- Satisfying the inhabited linter...\n-- `s` is here to distinguish type synonyms asking for different shifts\ntheorem comap_eq_symm {β γ : Type w} {f g : β → γ} (h : f = g) : comap_eq C h.symm = (comap_eq C h).symm := by tidy\n#align comap_eq_symm comap_eq_symm\n\n"}