{"inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n@[simp]\ntheorem of_components.inv_app (app : ∀ X : C, «expr ≅ » (F.obj X) (G.obj X)) (naturality) (unit) (tensor) (X) :\n    (of_components app naturality unit tensor).inv.app X = (app X).inv := by simp [of_components]\n#align of_components.inv_app of_components.inv_app\n\n",
 "hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n@[simp]\ntheorem of_components.hom_app (app : ∀ X : C, «expr ≅ » (F.obj X) (G.obj X)) (naturality) (unit) (tensor) (X) :\n    (of_components app naturality unit tensor).hom.app X = (app X).hom :=\n  rfl\n#align of_components.hom_app of_components.hom_app\n\n",
 "comp_to_nat_trans_lax":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n@[simp]\ntheorem comp_to_nat_trans_lax {F G H : lax_monoidal_functor C D} {α : «expr ⟶ » F G} {β : «expr ⟶ » G H} :\n    («expr ≫ » α β).to_nat_trans = @category_struct.comp («expr ⥤ » C D) _ _ _ _ α.to_nat_trans β.to_nat_trans :=\n  rfl\n#align comp_to_nat_trans_lax comp_to_nat_trans_lax\n\n",
 "comp_to_nat_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n@[simp]\ntheorem comp_to_nat_trans {F G H : monoidal_functor C D} {α : «expr ⟶ » F G} {β : «expr ⟶ » G H} :\n    («expr ≫ » α β).to_nat_trans = @category_struct.comp («expr ⥤ » C D) _ _ _ _ α.to_nat_trans β.to_nat_trans :=\n  rfl\n#align comp_to_nat_trans comp_to_nat_trans\n\n"}