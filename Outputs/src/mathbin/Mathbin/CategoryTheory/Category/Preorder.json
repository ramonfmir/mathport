{"to_order_iso_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≌ » -/\n@[simp]\ntheorem equivalence.to_order_iso_symm_apply (e : «expr ≌ » X Y) (y : Y) : e.to_order_iso.symm y = e.inverse.obj y :=\n  rfl\n#align equivalence.to_order_iso_symm_apply equivalence.to_order_iso_symm_apply\n\n",
 "to_order_iso_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≌ » -/\n-- `@[simps]` on `equivalence.to_order_iso` produces lemmas that fail the `simp_nf` linter,\n-- so we provide them by hand:\n@[simp]\ntheorem equivalence.to_order_iso_apply (e : «expr ≌ » X Y) (x : X) : e.to_order_iso x = e.functor.obj x :=\n  rfl\n#align equivalence.to_order_iso_apply equivalence.to_order_iso_apply\n\n",
 "to_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem iso.to_eq {x y : X} (f : «expr ≅ » x y) : x = y :=\n  le_antisymm f.hom.le f.inv.le\n#align iso.to_eq iso.to_eq\n\n",
 "monotone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- A functor between preorder categories is monotone.\n-/\n@[mono]\ntheorem functor.monotone (f : «expr ⥤ » X Y) : monotone f.obj := fun x y hxy => (f.map hxy.hom).le\n#align functor.monotone functor.monotone\n\n",
 "le_of_op_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem le_of_op_hom {x y : «expr ᵒᵖ» X} (h : «expr ⟶ » x y) : unop y ≤ unop x :=\n  h.unop.le\n#align le_of_op_hom le_of_op_hom\n\n",
 "le_of_hom_hom_of_le":
 "@[simp]\ntheorem le_of_hom_hom_of_le {x y : X} (h : x ≤ y) : h.hom.le = h :=\n  rfl\n#align le_of_hom_hom_of_le le_of_hom_hom_of_le\n\n",
 "le_of_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- Extract the underlying inequality from a morphism in a preorder category.\n-/\ntheorem le_of_hom {x y : X} (h : «expr ⟶ » x y) : x ≤ y :=\n  h.down.down\n#align le_of_hom le_of_hom\n\n",
 "hom_of_le_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-\nCopyright (c) 2017 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Stephen Morgan, Scott Morrison, Johannes Hölzl, Reid Barton\n-/\n-- see Note [lower instance priority]\n@[simp]\ntheorem hom_of_le_refl {x : X} : (le_refl x).hom = («expr𝟙») x :=\n  rfl\n#align hom_of_le_refl hom_of_le_refl\n\n",
 "hom_of_le_le_of_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem hom_of_le_le_of_hom {x y : X} (h : «expr ⟶ » x y) : h.le.hom = h :=\n  by\n  cases h\n  cases h\n  rfl\n#align hom_of_le_le_of_hom hom_of_le_le_of_hom\n\n",
 "hom_of_le_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem hom_of_le_comp {x y z : X} (h : x ≤ y) (k : y ≤ z) : «expr ≫ » h.hom k.hom = (h.trans k).hom :=\n  rfl\n#align hom_of_le_comp hom_of_le_comp\n\n",
 "functor_obj":
 "@[simp]\ntheorem monotone.functor_obj {f : X → Y} (h : monotone f) : h.functor.obj = f :=\n  rfl\n#align monotone.functor_obj monotone.functor_obj\n\n"}