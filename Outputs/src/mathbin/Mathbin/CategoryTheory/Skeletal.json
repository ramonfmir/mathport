{"skeleton_skeletal":
 "theorem skeleton_skeletal : skeletal (skeleton C) :=\n  by\n  rintro X Y ⟨h⟩\n  have : X.out ≈ Y.out := ⟨(from_skeleton C).map_iso h⟩\n  simpa using quotient.sound this\n#align skeleton_skeletal skeleton_skeletal\n\n",
 "skeletal":
 "theorem skeletal : skeletal (thin_skeleton C) := fun X Y =>\n  quotient.induction_on₂ X Y fun x y h => h.elim fun i => i.1.le.antisymm i.2.le\n#align skeletal skeletal\n\n",
 "map_iso_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem map_iso_eq {F₁ F₂ : «expr ⥤ » D C} (h : «expr ≅ » F₁ F₂) : map F₁ = map F₂ :=\n  functor.eq_of_iso skeletal\n    { hom := map_nat_trans h.hom\n      inv := map_nat_trans h.inv }\n#align map_iso_eq map_iso_eq\n\n",
 "map_id_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\ntheorem map_id_eq : map ((«expr𝟭») C) = («expr𝟭») (thin_skeleton C) :=\n  functor.eq_of_iso skeletal <|\n    NatIso.ofComponents (fun X => quotient.rec_on_subsingleton X fun x => Iso.refl _) (by tidy)\n#align map_id_eq map_id_eq\n\n",
 "map_comp_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem map_comp_eq (F : «expr ⥤ » E D) (G : «expr ⥤ » D C) : map («expr ⋙ » F G) = «expr ⋙ » (map F) (map G) :=\n  functor.eq_of_iso skeletal <|\n    NatIso.ofComponents (fun X => quotient.rec_on_subsingleton X fun x => Iso.refl _) (by tidy)\n#align map_comp_eq map_comp_eq\n\n",
 "functor_skeletal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- If `C` is thin and skeletal, `D ⥤ C` is skeletal.\n`category_theory.functor_thin` shows it is thin also.\n-/\ntheorem functor_skeletal [Quiver.IsThin C] (hC : skeletal C) : skeletal («expr ⥤ » D C) := fun F₁ F₂ h =>\n  h.elim (functor.eq_of_iso hC)\n#align functor_skeletal functor_skeletal\n\n",
 "equiv_of_both_ways":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- TODO: state the lemmas about what happens when you compose with `to_thin_skeleton`\ntheorem equiv_of_both_ways {X Y : C} (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y X) : X ≈ Y :=\n  ⟨iso_of_both_ways f g⟩\n#align equiv_of_both_ways equiv_of_both_ways\n\n",
 "eq_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- If `C` is thin and skeletal, then any naturally isomorphic functors to `C` are equal. -/\ntheorem functor.eq_of_iso {F₁ F₂ : «expr ⥤ » D C} [Quiver.IsThin C] (hC : skeletal C) (hF : «expr ≅ » F₁ F₂) :\n    F₁ = F₂ :=\n  functor.ext (fun X => hC ⟨hF.app X⟩) fun _ _ _ => subsingleton.elim _ _\n#align functor.eq_of_iso functor.eq_of_iso\n\n",
 "comp_to_thin_skeleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem comp_to_thin_skeleton (F : «expr ⥤ » C D) :\n    «expr ⋙ » F (to_thin_skeleton D) = «expr ⋙ » (to_thin_skeleton C) (map F) :=\n  rfl\n#align comp_to_thin_skeleton comp_to_thin_skeleton\n\n"}