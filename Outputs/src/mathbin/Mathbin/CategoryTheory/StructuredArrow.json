{"w":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem w {A B : costructured_arrow S T} (f : «expr ⟶ » A B) : «expr ≫ » (S.map f.left) B.hom = A.hom := by tidy\n#align w w\n\n",
 "mono_of_mono_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The converse of this is true with additional assumptions, see `mono_iff_mono_right`. -/\ntheorem mono_of_mono_right {A B : structured_arrow S T} (f : «expr ⟶ » A B) [h : Mono f.right] : Mono f :=\n  (proj S T).mono_of_mono_map h\n#align mono_of_mono_right mono_of_mono_right\n\n",
 "mono_of_mono_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem mono_of_mono_left {A B : costructured_arrow S T} (f : «expr ⟶ » A B) [h : Mono f.left] : Mono f :=\n  (proj S T).mono_of_mono_map h\n#align mono_of_mono_left mono_of_mono_left\n\n",
 "mk_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem mk_right (f : «expr ⟶ » (S.obj Y) T) : (mk f).right = ⟨⟨⟩⟩ :=\n  rfl\n#align mk_right mk_right\n\n",
 "mk_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem mk_left (f : «expr ⟶ » (S.obj Y) T) : (mk f).left = Y :=\n  rfl\n#align mk_left mk_left\n\n",
 "mk_hom_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem mk_hom_eq_self (f : «expr ⟶ » (S.obj Y) T) : (mk f).hom = f :=\n  rfl\n#align mk_hom_eq_self mk_hom_eq_self\n\n",
 "map_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_mk {f : «expr ⟶ » (S.obj Y) T} (g : «expr ⟶ » T T') : (map g).obj (mk f) = mk («expr ≫ » f g) :=\n  rfl\n#align map_mk map_mk\n\n",
 "map_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem map_id {f : costructured_arrow S T} : (map ((«expr𝟙») T)).obj f = f :=\n  by\n  rw [eq_mk f]\n  simp\n#align map_id map_id\n\n",
 "map_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_comp {f : «expr ⟶ » T T'} {f' : «expr ⟶ » T' T''} {h : costructured_arrow S T} :\n    (map («expr ≫ » f f')).obj h = (map f').obj ((map f).obj h) :=\n  by\n  rw [eq_mk h]\n  simp\n#align map_comp map_comp\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem ext_iff {A B : costructured_arrow S T} (f g : «expr ⟶ » A B) : f = g ↔ f.left = g.left :=\n  ⟨fun h => h ▸ rfl, ext f g⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem ext {A B : costructured_arrow S T} (f g : «expr ⟶ » A B) (h : f.left = g.left) : f = g :=\n  comma_morphism.ext _ _ h (subsingleton.elim _ _)\n#align ext ext\n\n",
 "eq_mk":
 "/-- Eta rule for costructured arrows. Prefer `costructured_arrow.eta`, as equality of objects tends\n    to cause problems. -/\ntheorem eq_mk (f : costructured_arrow S T) : f = mk f.hom :=\n  by\n  cases f\n  congr\n  ext\n#align eq_mk eq_mk\n\n",
 "epi_of_epi_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem epi_of_epi_right {A B : structured_arrow S T} (f : «expr ⟶ » A B) [h : Epi f.right] : Epi f :=\n  (proj S T).epi_of_epi_map h\n#align epi_of_epi_right epi_of_epi_right\n\n",
 "epi_of_epi_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The converse of this is true with additional assumptions, see `epi_iff_epi_left`. -/\ntheorem epi_of_epi_left {A B : costructured_arrow S T} (f : «expr ⟶ » A B) [h : Epi f.left] : Epi f :=\n  (proj S T).epi_of_epi_map h\n#align epi_of_epi_left epi_of_epi_left\n\n"}