{"uncurry_exp_comparison":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem uncurry_exp_comparison (A B : C) :\n    cartesian_closed.uncurry ((exp_comparison F A).app B) =\n      «expr ≫ » (inv (prod_comparison F _ _)) (F.map ((exp.ev _).app _)) :=\n  by rw [uncurry_eq, exp_comparison_ev]\n#align uncurry_exp_comparison uncurry_exp_comparison\n\n",
 "frobenius_morphism_mate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\ntheorem frobenius_morphism_mate (h : «expr ⊣ » L F) (A : C) :\n    transfer_nat_trans_self (h.comp (exp.adjunction A)) ((exp.adjunction (F.obj A)).comp h) (frobenius_morphism F h A) =\n      exp_comparison F A :=\n  by\n  rw [← equiv.eq_symm_apply]\n  ext B : 2\n  dsimp [frobenius_morphism, transfer_nat_trans_self, transfer_nat_trans, adjunction.comp]\n  simp only [id_comp, comp_id]\n  rw [← L.map_comp_assoc, prod.map_id_comp, assoc, exp_comparison_ev, prod.map_id_comp, assoc, ← F.map_id, ←\n    prod_comparison_inv_natural_assoc, ← F.map_comp, exp.ev_coev, F.map_id («expr ⨯ » A (L.obj B)), comp_id]\n  apply prod.hom_ext\n  · rw [assoc, assoc, ← h.counit_naturality, ← L.map_comp_assoc, assoc, inv_prod_comparison_map_fst]\n    simp\n  · rw [assoc, assoc, ← h.counit_naturality, ← L.map_comp_assoc, assoc, inv_prod_comparison_map_snd]\n    simp\n#align frobenius_morphism_mate frobenius_morphism_mate\n\n",
 "frobenius_morphism_iso_of_exp_comparison_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/-- If the exponential comparison transformation (at `A`) is an isomorphism, then the Frobenius morphism\nat `A` is an isomorphism.\n-/\ntheorem frobenius_morphism_iso_of_exp_comparison_iso (h : «expr ⊣ » L F) (A : C) [i : IsIso (exp_comparison F A)] :\n    IsIso (frobenius_morphism F h A) := by\n  rw [← frobenius_morphism_mate F h] at i\n  exact @transfer_nat_trans_self_of_iso _ _ _ _ _ i\n#align frobenius_morphism_iso_of_exp_comparison_iso frobenius_morphism_iso_of_exp_comparison_iso\n\n",
 "exp_comparison_whisker_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- The exponential comparison map is natural in `A`. -/\ntheorem exp_comparison_whisker_left {A A' : C} (f : «expr ⟶ » A' A) :\n    «expr ≫ » (exp_comparison F A) (whiskerLeft _ (pre (F.map f))) =\n      «expr ≫ » (whiskerRight (pre f) _) (exp_comparison F A') :=\n  by\n  ext B\n  dsimp\n  apply uncurry_injective\n  rw [uncurry_natural_left, uncurry_natural_left, uncurry_exp_comparison, uncurry_pre, prod.map_swap_assoc, ← F.map_id,\n    exp_comparison_ev, ← F.map_id, ← prod_comparison_inv_natural_assoc, ← prod_comparison_inv_natural_assoc, ←\n    F.map_comp, ← F.map_comp, prod_map_pre_app_comp_ev]\n#align exp_comparison_whisker_left exp_comparison_whisker_left\n\n",
 "exp_comparison_iso_of_frobenius_morphism_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/-- If the Frobenius morphism at `A` is an isomorphism, then the exponential comparison transformation\n(at `A`) is an isomorphism.\n-/\ntheorem exp_comparison_iso_of_frobenius_morphism_iso (h : «expr ⊣ » L F) (A : C)\n    [i : IsIso (frobenius_morphism F h A)] : IsIso (exp_comparison F A) :=\n  by\n  rw [← frobenius_morphism_mate F h]\n  infer_instance\n#align exp_comparison_iso_of_frobenius_morphism_iso exp_comparison_iso_of_frobenius_morphism_iso\n\n",
 "exp_comparison_ev":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\ntheorem exp_comparison_ev (A B : C) :\n    «expr ≫ » (limits.prod.map ((«expr𝟙») (F.obj A)) ((exp_comparison F A).app B)) ((exp.ev (F.obj A)).app (F.obj B)) =\n      «expr ≫ » (inv (prod_comparison F _ _)) (F.map ((exp.ev _).app _)) :=\n  by\n  convert transfer_nat_trans_counit _ _ (prod_comparison_nat_iso F A).inv B\n  ext\n  simp\n#align exp_comparison_ev exp_comparison_ev\n\n",
 "coev_exp_comparison":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem coev_exp_comparison (A B : C) :\n    «expr ≫ » (F.map ((exp.coev A).app B)) ((exp_comparison F A).app («expr ⨯ » A B)) =\n      «expr ≫ » ((exp.coev _).app (F.obj B)) ((exp (F.obj A)).map (inv (prod_comparison F A B))) :=\n  by\n  convert unit_transfer_nat_trans _ _ (prod_comparison_nat_iso F A).inv B\n  ext\n  dsimp\n  simp\n#align coev_exp_comparison coev_exp_comparison\n\n"}