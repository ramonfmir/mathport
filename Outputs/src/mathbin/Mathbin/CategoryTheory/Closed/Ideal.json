{"reflective_products":
 "theorem reflective_products [HasFiniteProducts C] [Reflective i] : HasFiniteProducts D :=\n  ⟨fun n => hasLimitsOfShape_of_reflective i⟩\n#align reflective_products reflective_products\n\n",
 "prod_comparison_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- The bijection allows us to show that `prod_comparison L A B` is an isomorphism, where the inverse\nis the forward map of the identity morphism.\n-/\ntheorem prod_comparison_iso (A B : C) : IsIso (prodComparison (leftAdjoint i) A B) :=\n  ⟨⟨bijection i _ _ _ ((«expr𝟙») _), by\n      rw [← (bijection i _ _ _).injective.eq_iff, bijection_natural, ← bijection_symm_apply_id, Equiv.apply_symm_apply,\n        id_comp],\n      by rw [← bijection_natural, id_comp, ← bijection_symm_apply_id, Equiv.apply_symm_apply]⟩⟩\n#align prod_comparison_iso prod_comparison_iso\n\n",
 "mk_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/-- Given a natural isomorphism `i ⋙ exp A ⋙ left_adjoint i ⋙ i ≅ i ⋙ exp A`, we can show `i`\nis an exponential ideal.\n-/\ntheorem exponential_ideal.mk_of_iso [Reflective i]\n    (h : ∀ A : C, «expr ≅ » («expr ⋙ » i («expr ⋙ » (exp A) («expr ⋙ » (leftAdjoint i) i))) («expr ⋙ » i (exp A))) :\n    exponential_ideal i := by\n  apply exponential_ideal.mk'\n  intro B A\n  exact ⟨_, ⟨(h A).app B⟩⟩\n#align exponential_ideal.mk_of_iso exponential_ideal.mk_of_iso\n\n",
 "mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟹ » -/\n/-\nCopyright (c) 2021 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- To show `i` is an exponential ideal it suffices to show that `A ⟹ iB` is \"in\" `D` for any `A` in\n`C` and `B` in `D`.\n-/\ntheorem exponential_ideal.mk' (h : ∀ (B : D) (A : C), «expr ⟹ » A (i.obj B) ∈ i.ess_image) : exponential_ideal i :=\n  ⟨fun B hB A => by\n    rcases hB with ⟨B', ⟨iB'⟩⟩\n    exact functor.ess_image.of_iso ((exp A).map_iso iB') (h B' A)⟩\n#align exponential_ideal.mk' exponential_ideal.mk'\n\n",
 "bijection_symm_apply_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n-- It's annoying that I need to do this.\ntheorem bijection_symm_apply_id (A B : C) : (bijection i A B _).symm ((«expr𝟙») _) = prodComparison _ _ _ :=\n  by\n  dsimp [bijection]\n  rw [comp_id, comp_id, comp_id, i.map_id, comp_id, unit_comp_partial_bijective_symm_apply,\n    unit_comp_partial_bijective_symm_apply, uncurry_natural_left, uncurry_curry, uncurry_natural_left, uncurry_curry,\n    prod.lift_map_assoc, comp_id, prod.lift_map_assoc, comp_id, prod.comp_lift_assoc, prod.lift_snd,\n    prod.lift_fst_assoc, prod.lift_fst_comp_snd_comp, ← adjunction.eq_hom_equiv_apply, adjunction.hom_equiv_unit,\n    iso.comp_inv_eq, assoc, preserves_limit_pair.iso_hom]\n  apply prod.hom_ext\n  · rw [limits.prod.map_fst, assoc, assoc, prod_comparison_fst, ← i.map_comp, prod_comparison_fst]\n    apply (adjunction.of_right_adjoint i).unit.naturality\n  · rw [limits.prod.map_snd, assoc, assoc, prod_comparison_snd, ← i.map_comp, prod_comparison_snd]\n    apply (adjunction.of_right_adjoint i).unit.naturality\n#align bijection_symm_apply_id bijection_symm_apply_id\n\n",
 "bijection_natural":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem bijection_natural (A B : C) (X X' : D) (f : «expr ⟶ » ((leftAdjoint i).obj («expr ⨯ » A B)) X)\n    (g : «expr ⟶ » X X') : bijection i _ _ _ («expr ≫ » f g) = «expr ≫ » (bijection i _ _ _ f) g :=\n  by\n  dsimp [bijection]\n  apply i.map_injective\n  rw [i.image_preimage, i.map_comp, i.image_preimage, comp_id, comp_id, comp_id, comp_id, comp_id, comp_id,\n    adjunction.hom_equiv_naturality_right, ← assoc, curry_natural_right _ (i.map g),\n    unit_comp_partial_bijective_natural, uncurry_natural_right, ← assoc, curry_natural_right,\n    unit_comp_partial_bijective_natural, uncurry_natural_right, assoc]\n#align bijection_natural bijection_natural\n\n"}