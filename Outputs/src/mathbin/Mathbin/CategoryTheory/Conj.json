{"trans_conj_Aut":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n@[simp]\ntheorem trans_conj_Aut {Z : C} (β : «expr ≅ » Y Z) (f : Aut X) :\n    («expr ≪≫ » α β).conj_Aut f = β.conj_Aut (α.conj_Aut f) := by\n  simp only [conj_Aut_apply, iso.trans_symm, iso.trans_assoc]\n#align trans_conj_Aut trans_conj_Aut\n\n",
 "trans_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n@[simp]\ntheorem trans_conj {Z : C} (β : «expr ≅ » Y Z) (f : End X) : («expr ≪≫ » α β).conj f = β.conj (α.conj f) :=\n  hom_congr_trans α α β β f\n#align trans_conj trans_conj\n\n",
 "symm_self_conj":
 "@[simp]\ntheorem symm_self_conj (f : End X) : α.symm.conj (α.conj f) = f := by rw [← trans_conj, α.self_symm_id, refl_conj]\n#align symm_self_conj symm_self_conj\n\n",
 "self_symm_conj":
 "@[simp]\ntheorem self_symm_conj (f : End Y) : α.conj (α.symm.conj f) = f :=\n  α.symm.symm_self_conj f\n#align self_symm_conj self_symm_conj\n\n",
 "refl_conj":
 "@[simp]\ntheorem refl_conj (f : End X) : (Iso.refl X).conj f = f := by\n  rw [conj_apply, iso.refl_inv, iso.refl_hom, category.id_comp, category.comp_id]\n#align refl_conj refl_conj\n\n",
 "map_hom_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem map_hom_congr {X Y X₁ Y₁ : C} (α : «expr ≅ » X X₁) (β : «expr ≅ » Y Y₁) (f : «expr ⟶ » X Y) :\n    F.map (iso.hom_congr α β f) = iso.hom_congr (F.map_iso α) (F.map_iso β) (F.map f) := by simp\n#align map_hom_congr map_hom_congr\n\n",
 "map_conj_Aut":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem map_conj_Aut (F : «expr ⥤ » C D) {X Y : C} (α : «expr ≅ » X Y) (f : Aut X) :\n    F.map_iso (α.conj_Aut f) = (F.map_iso α).conj_Aut (F.map_iso f) := by\n  ext <;> simp only [map_iso_hom, iso.conj_Aut_hom, F.map_conj]\n#align map_conj_Aut map_conj_Aut\n\n",
 "map_conj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem map_conj {X Y : C} (α : «expr ≅ » X Y) (f : End X) : F.map (α.conj f) = (F.map_iso α).conj (F.map f) :=\n  map_hom_congr F α α f\n#align map_conj map_conj\n\n",
 "hom_congr_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n@[simp]\ntheorem hom_congr_trans {X₁ Y₁ X₂ Y₂ X₃ Y₃ : C} (α₁ : «expr ≅ » X₁ X₂) (β₁ : «expr ≅ » Y₁ Y₂) (α₂ : «expr ≅ » X₂ X₃)\n    (β₂ : «expr ≅ » Y₂ Y₃) (f : «expr ⟶ » X₁ Y₁) :\n    («expr ≪≫ » α₁ α₂).hom_congr («expr ≪≫ » β₁ β₂) f = (α₁.hom_congr β₁).trans (α₂.hom_congr β₂) f := by simp\n#align hom_congr_trans hom_congr_trans\n\n",
 "hom_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n@[simp]\ntheorem hom_congr_symm {X₁ Y₁ X₂ Y₂ : C} (α : «expr ≅ » X₁ X₂) (β : «expr ≅ » Y₁ Y₂) :\n    (α.hom_congr β).symm = α.symm.hom_congr β.symm :=\n  rfl\n#align hom_congr_symm hom_congr_symm\n\n",
 "hom_congr_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem hom_congr_refl {X Y : C} (f : «expr ⟶ » X Y) : (Iso.refl X).hom_congr (Iso.refl Y) f = f := by simp\n#align hom_congr_refl hom_congr_refl\n\n",
 "hom_congr_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem hom_congr_comp {X Y Z X₁ Y₁ Z₁ : C} (α : «expr ≅ » X X₁) (β : «expr ≅ » Y Y₁) (γ : «expr ≅ » Z Z₁)\n    (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) :\n    α.hom_congr γ («expr ≫ » f g) = «expr ≫ » (α.hom_congr β f) (β.hom_congr γ g) := by simp\n#align hom_congr_comp hom_congr_comp\n\n",
 "hom_congr_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2019 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n@[simp]\ntheorem hom_congr_apply {X Y X₁ Y₁ : C} (α : «expr ≅ » X X₁) (β : «expr ≅ » Y Y₁) (f : «expr ⟶ » X Y) :\n    α.hom_congr β f = «expr ≫ » α.inv («expr ≫ » f β.hom) :=\n  rfl\n#align hom_congr_apply hom_congr_apply\n\n",
 "conj_pow":
 "#print conj_pow /-\n@[simp]\ntheorem conj_pow (f : End X) (n : ℕ) : α.conj (f ^ n) = α.conj f ^ n :=\n  α.conj.to_monoid_hom.map_pow f n\n#align conj_pow conj_pow\n-/\n\n",
 "conj_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem conj_id : α.conj ((«expr𝟙») X) = («expr𝟙») Y :=\n  α.conj.map_one\n#align conj_id conj_id\n\n",
 "conj_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem conj_comp (f g : End X) : α.conj («expr ≫ » f g) = «expr ≫ » (α.conj f) (α.conj g) :=\n  α.conj.map_mul g f\n#align conj_comp conj_comp\n\n",
 "conj_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem conj_apply (f : End X) : α.conj f = «expr ≫ » α.inv («expr ≫ » f α.hom) :=\n  rfl\n#align conj_apply conj_apply\n\n",
 "conj_Aut_zpow":
 "@[simp]\ntheorem conj_Aut_zpow (f : Aut X) (n : ℤ) : α.conj_Aut (f ^ n) = α.conj_Aut f ^ n :=\n  α.conj_Aut.to_monoid_hom.map_zpow f n\n#align conj_Aut_zpow conj_Aut_zpow\n\n",
 "conj_Aut_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n@[simp]\ntheorem conj_Aut_trans (f g : Aut X) : α.conj_Aut («expr ≪≫ » f g) = «expr ≪≫ » (α.conj_Aut f) (α.conj_Aut g) :=\n  conj_Aut_mul α g f\n#align conj_Aut_trans conj_Aut_trans\n\n",
 "conj_Aut_pow":
 "@[simp]\ntheorem conj_Aut_pow (f : Aut X) (n : ℕ) : α.conj_Aut (f ^ n) = α.conj_Aut f ^ n :=\n  α.conj_Aut.to_monoid_hom.map_pow f n\n#align conj_Aut_pow conj_Aut_pow\n\n",
 "conj_Aut_mul":
 "@[simp]\ntheorem conj_Aut_mul (f g : Aut X) : α.conj_Aut (f * g) = α.conj_Aut f * α.conj_Aut g :=\n  α.conj_Aut.map_mul f g\n#align conj_Aut_mul conj_Aut_mul\n\n",
 "conj_Aut_hom":
 "@[simp]\ntheorem conj_Aut_hom (f : Aut X) : (α.conj_Aut f).hom = α.conj f.hom :=\n  rfl\n#align conj_Aut_hom conj_Aut_hom\n\n",
 "conj_Aut_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\ntheorem conj_Aut_apply (f : Aut X) : α.conj_Aut f = «expr ≪≫ » α.symm («expr ≪≫ » f α) := by\n  cases f <;> cases α <;> ext <;> rfl\n#align conj_Aut_apply conj_Aut_apply\n\n"}