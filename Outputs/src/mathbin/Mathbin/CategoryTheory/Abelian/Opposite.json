{"π_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem cokernel.π_unop :\n    (cokernel.π g.unop).op =\n      «expr ≫ » (cokernel_unop_op g).hom («expr ≫ » (kernel.ι g) (eq_to_hom (opposite.op_unop _).symm)) :=\n  by simp\n#align cokernel.π_unop cokernel.π_unop\n\n",
 "π_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- TODO: Generalize (this will work whenever f has a cokernel)\n-- (The abelian case is probably sufficient for most applications.)\n-- TODO: Generalize (this will work whenever f has a kernel)\n-- (The abelian case is probably sufficient for most applications.)\ntheorem cokernel.π_op :\n    (cokernel.π f.op).unop =\n      «expr ≫ » (cokernel_op_unop f).hom («expr ≫ » (kernel.ι f) (eq_to_hom (opposite.unop_op _).symm)) :=\n  by simp [cokernel_op_unop]\n#align cokernel.π_op cokernel.π_op\n\n",
 "ι_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem kernel.ι_unop :\n    (kernel.ι g.unop).op =\n      «expr ≫ » (eq_to_hom (opposite.op_unop _)) («expr ≫ » (cokernel.π g) (kernel_unop_op g).inv) :=\n  by simp\n#align kernel.ι_unop kernel.ι_unop\n\n",
 "ι_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem kernel.ι_op :\n    (kernel.ι f.op).unop =\n      «expr ≫ » (eq_to_hom (opposite.unop_op _)) («expr ≫ » (cokernel.π f) (kernel_op_unop f).inv) :=\n  by simp [kernel_op_unop]\n#align kernel.ι_op kernel.ι_op\n\n"}