{"π_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem cokernel.π_unop :\n    (cokernel.π g.unop).op =\n      «expr ≫ » (cokernelUnopOp g).hom («expr ≫ » (kernel.ι g) (eqToHom (Opposite.op_unop _).symm)) :=\n  by simp\n#align cokernel.π_unop cokernel.π_unop\n\n",
 "π_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- Porting note:\n-- This should have been a global instance,\n-- but triggers https://github.com/leanprover/lean4/issues/2055\n-- when ported to mathlib4.\n-- TODO: Generalize (this will work whenever f has a cokernel)\n-- (The abelian case is probably sufficient for most applications.)\n-- TODO: Generalize (this will work whenever f has a kernel)\n-- (The abelian case is probably sufficient for most applications.)\ntheorem cokernel.π_op :\n    (cokernel.π f.op).unop =\n      «expr ≫ » (cokernelOpUnop f).hom («expr ≫ » (kernel.ι f) (eqToHom (Opposite.unop_op _).symm)) :=\n  by simp [cokernel_op_unop]\n#align cokernel.π_op cokernel.π_op\n\n",
 "ι_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem kernel.ι_unop :\n    (kernel.ι g.unop).op = «expr ≫ » (eqToHom (Opposite.op_unop _)) («expr ≫ » (cokernel.π g) (kernelUnopOp g).inv) :=\n  by simp\n#align kernel.ι_unop kernel.ι_unop\n\n",
 "ι_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem kernel.ι_op :\n    (kernel.ι f.op).unop = «expr ≫ » (eqToHom (Opposite.unop_op _)) («expr ≫ » (cokernel.π f) (kernelOpUnop f).inv) :=\n  by simp [kernel_op_unop]\n#align kernel.ι_op kernel.ι_op\n\n",
 "image_ι_op_comp_image_unop_op_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem image_ι_op_comp_image_unop_op_hom : «expr ≫ » (image.ι g.unop).op (imageUnopOp g).hom = factorThruImage g :=\n  by\n  dsimp only [image_unop_op]\n  simp only [← category.assoc, ← op_comp, iso.trans_hom, iso.symm_hom, iso.op_hom, cokernel_op_op_inv,\n    cokernel_comp_is_iso_hom, cokernel_epi_comp_hom, cokernel_iso_of_eq_hom_comp_desc_assoc,\n    abelian.coimage_iso_image'_hom, eq_to_hom_refl, is_iso.inv_id, category.id_comp (cokernel.π (kernel.ι g))]\n  simp only [category.assoc, abelian.image_iso_image_hom_comp_image_ι, kernel.lift_ι, Quiver.Hom.op_unop,\n    cokernel.π_desc]\n#align image_ι_op_comp_image_unop_op_hom image_ι_op_comp_image_unop_op_hom\n\n",
 "image_unop_op_inv_comp_op_factor_thru_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem image_unop_op_inv_comp_op_factor_thru_image :\n    «expr ≫ » (imageUnopOp g).inv (factorThruImage g.unop).op = image.ι g := by\n  rw [iso.inv_comp_eq, image_unop_op_hom_comp_image_ι]\n#align image_unop_op_inv_comp_op_factor_thru_image image_unop_op_inv_comp_op_factor_thru_image\n\n",
 "image_unop_op_hom_comp_image_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem image_unop_op_hom_comp_image_ι : «expr ≫ » (imageUnopOp g).hom (image.ι g) = (factorThruImage g.unop).op := by\n  simp only [← cancel_epi (image.ι g.unop).op, ← category.assoc, image_ι_op_comp_image_unop_op_hom, ← op_comp,\n    image.fac, Quiver.Hom.op_unop]\n#align image_unop_op_hom_comp_image_ι image_unop_op_hom_comp_image_ι\n\n",
 "factor_thru_image_comp_image_unop_op_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem factor_thru_image_comp_image_unop_op_inv :\n    «expr ≫ » (factorThruImage g) (imageUnopOp g).inv = (image.ι g.unop).op := by\n  rw [iso.comp_inv_eq, image_ι_op_comp_image_unop_op_hom]\n#align factor_thru_image_comp_image_unop_op_inv factor_thru_image_comp_image_unop_op_inv\n\n"}