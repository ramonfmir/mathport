{"has_kernels":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2022 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n/-- No point making this an instance, as it requires `i`. -/\ntheorem has_kernels [preserves_finite_limits G] : has_kernels C :=\n  {\n    has_limit := fun X Y f => by\n      have := nat_iso.naturality_1 i f\n      simp at this\n      rw [← this]\n      haveI : has_kernel («expr ≫ » (G.map (F.map f)) (i.hom.app _)) := limits.has_kernel_comp_mono _ _\n      apply limits.has_kernel_iso_comp }\n#align has_kernels has_kernels\n\n",
 "has_cokernels":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- No point making this an instance, as it requires `i` and `adj`. -/\ntheorem has_cokernels : has_cokernels C :=\n  {\n    has_colimit := fun X Y f =>\n      by\n      haveI : preserves_colimits G := adj.left_adjoint_preserves_colimits\n      have := nat_iso.naturality_1 i f\n      simp at this\n      rw [← this]\n      haveI : has_cokernel («expr ≫ » (G.map (F.map f)) (i.hom.app _)) := limits.has_cokernel_comp_iso _ _\n      apply limits.has_cokernel_epi_comp }\n#align has_cokernels has_cokernels\n\n",
 "coimage_iso_image_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- We have to write an explicit `preserves_colimits` type here,\n-- as `left_adjoint_preserves_colimits` has universe variables.\n-- The account of this proof in the Stacks project omits this calculation.\ntheorem coimage_iso_image_hom {X Y : C} (f : «expr ⟶ » X Y) :\n    (coimage_iso_image F G i adj f).hom = abelian.coimage_image_comparison f :=\n  by\n  ext\n  simpa only [← G.map_comp_assoc, coimage_iso_image, nat_iso.inv_inv_app, cokernel_iso, coimage_iso_image_aux,\n    iso.trans_symm, iso.symm_symm_eq, iso.refl_trans, iso.trans_refl, iso.trans_hom, iso.symm_hom,\n    cokernel_comp_is_iso_inv, cokernel_epi_comp_inv, as_iso_hom, functor.map_iso_hom, cokernel_epi_comp_hom,\n    preserves_kernel.iso_hom, kernel_comp_mono_hom, kernel_is_iso_comp_hom, cokernel_iso_of_eq_hom_comp_desc_assoc,\n    cokernel.π_desc_assoc, category.assoc, π_comp_cokernel_iso_of_eq_inv_assoc, π_comp_cokernel_comparison_assoc,\n    kernel.lift_ι, kernel.lift_ι_assoc, kernel_iso_of_eq_hom_comp_ι_assoc, kernel_comparison_comp_ι_assoc,\n    abelian.coimage_image_factorisation] using nat_iso.naturality_1 i f\n#align coimage_iso_image_hom coimage_iso_image_hom\n\n"}