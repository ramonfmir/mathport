{"mono_of_epi_of_mono_of_mono":
 "/-\nCopyright (c) 2020 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel\n-/\n/-- The four lemma, mono version. For names of objects and morphisms, refer to the following\n    diagram:\n\n```\nA ---f--> B ---g--> C ---h--> D\n|         |         |         |\nα         β         γ         δ\n|         |         |         |\nv         v         v         v\nA' --f'-> B' --g'-> C' --h'-> D'\n```\n-/\ntheorem mono_of_epi_of_mono_of_mono (hα : Epi α) (hβ : Mono β) (hδ : Mono δ) : Mono γ :=\n  mono_of_zero_of_map_zero _ fun c hc =>\n    have : h c = 0 :=\n      suffices δ (h c) = 0 from zero_of_map_zero _ (pseudo_injective_of_mono _) _ this\n      calc\n        δ (h c) = h' (γ c) := by rw [← comp_apply, ← comm₃, comp_apply]\n        _ = h' 0 := by rw [hc]\n        _ = 0 := apply_zero _\n        \n    exists.elim ((pseudo_exact_of_exact hgh).2 _ this) fun b hb =>\n      have : g' (β b) = 0 :=\n        calc\n          g' (β b) = γ (g b) := by rw [← comp_apply, comm₂, comp_apply]\n          _ = γ c := by rw [hb]\n          _ = 0 := hc\n          \n      exists.elim ((pseudo_exact_of_exact hf'g').2 _ this) fun a' ha' =>\n        exists.elim (pseudo_surjective_of_epi α a') fun a ha =>\n          have : f a = b :=\n            suffices β (f a) = β b from pseudo_injective_of_mono _ this\n            calc\n              β (f a) = f' (α a) := by rw [← comp_apply, ← comm₁, comp_apply]\n              _ = f' a' := by rw [ha]\n              _ = β b := ha'\n              \n          calc\n            c = g b := hb.symm\n            _ = g (f a) := by rw [this]\n            _ = 0 := (pseudo_exact_of_exact hfg).1 _\n            \n#align mono_of_epi_of_mono_of_mono mono_of_epi_of_mono_of_mono\n\n",
 "is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso":
 "/-- The five lemma. For names of objects and morphisms, refer to the following diagram:\n\n```\nA ---f--> B ---g--> C ---h--> D ---i--> E\n|         |         |         |         |\nα         β         γ         δ         ε\n|         |         |         |         |\nv         v         v         v         v\nA' --f'-> B' --g'-> C' --h'-> D' --i'-> E'\n```\n-/\ntheorem is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso : IsIso γ :=\n  have : Mono γ := by apply mono_of_epi_of_mono_of_mono comm₁ comm₂ comm₃ hfg hgh hf'g' <;> infer_instance\n  have : Epi γ := by apply epi_of_epi_of_epi_of_mono comm₂ comm₃ comm₄ hhi hg'h' hh'i' <;> infer_instance\n  is_iso_of_mono_of_epi _\n#align is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso\n\n",
 "epi_of_epi_of_epi_of_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The four lemma, epi version. For names of objects and morphisms, refer to the following\n    diagram:\n\n```\nA ---f--> B ---g--> C ---h--> D\n|         |         |         |\nα         β         γ         δ\n|         |         |         |\nv         v         v         v\nA' --f'-> B' --g'-> C' --h'-> D'\n```\n-/\ntheorem epi_of_epi_of_epi_of_mono (hα : Epi α) (hγ : Epi γ) (hδ : Mono δ) : Epi β :=\n  preadditive.epi_of_cancel_zero _ fun R r hβr =>\n    have hf'r : «expr ≫ » f' r = 0 :=\n      limits.zero_of_epi_comp α <|\n        calc\n          «expr ≫ » α («expr ≫ » f' r) = «expr ≫ » f («expr ≫ » β r) := by rw [reassoc_of comm₁]\n          _ = «expr ≫ » f 0 := by rw [hβr]\n          _ = 0 := has_zero_morphisms.comp_zero _ _\n          \n    let y : «expr ⟶ » R (pushout r g') := pushout.inl\n    let z : «expr ⟶ » C' (pushout r g') := pushout.inr\n    have : Mono y :=\n      mono_inl_of_factor_thru_epi_mono_factorization r g' (cokernel.π f') (cokernel.desc f' g' hf'g'.w) (by simp)\n        (cokernel.desc f' r hf'r) (by simp) _ (colimit.is_colimit _)\n    have hz : «expr ≫ » g («expr ≫ » γ z) = 0 :=\n      calc\n        «expr ≫ » g («expr ≫ » γ z) = «expr ≫ » β («expr ≫ » g' z) := by rw [← reassoc_of comm₂]\n        _ = «expr ≫ » β («expr ≫ » r y) := by rw [← pushout.condition]\n        _ = «expr ≫ » 0 y := by rw [reassoc_of hβr]\n        _ = 0 := has_zero_morphisms.zero_comp _ _\n        \n    let v : «expr ⟶ » (pushout r g') (pushout («expr ≫ » γ z) («expr ≫ » h δ)) := pushout.inl\n    let w : «expr ⟶ » D' (pushout («expr ≫ » γ z) («expr ≫ » h δ)) := pushout.inr\n    have : Mono v :=\n      mono_inl_of_factor_thru_epi_mono_factorization _ _ (cokernel.π g) («expr ≫ » (cokernel.desc g h hgh.w) δ)\n        (by simp) (cokernel.desc _ _ hz) (by simp) _ (colimit.is_colimit _)\n    have hzv : «expr ≫ » z v = «expr ≫ » h' w :=\n      (cancel_epi γ).1 <|\n        calc\n          «expr ≫ » γ («expr ≫ » z v) = «expr ≫ » h («expr ≫ » δ w) := by\n            rw [← category.assoc, pushout.condition, category.assoc]\n          _ = «expr ≫ » γ («expr ≫ » h' w) := by rw [reassoc_of comm₃]\n          \n    suffices «expr ≫ » («expr ≫ » r y) v = 0 from zero_of_comp_mono _ (zero_of_comp_mono _ this)\n    calc\n      «expr ≫ » («expr ≫ » r y) v = «expr ≫ » g' («expr ≫ » z v) := by rw [pushout.condition, category.assoc]\n      _ = «expr ≫ » g' («expr ≫ » h' w) := by rw [hzv]\n      _ = «expr ≫ » 0 w := hg'h'.w_assoc _\n      _ = 0 := has_zero_morphisms.zero_comp _ _\n      \n#align epi_of_epi_of_epi_of_mono epi_of_epi_of_epi_of_mono\n\n"}