{"σ_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- This is the key identity satisfied by `σ`. -/\ntheorem σ_comp {X Y : C} (f : «expr ⟶ » X Y) : «expr ≫ » σ f = «expr ≫ » (limits.prod.map f f) σ :=\n  by\n  obtain ⟨g, hg⟩ := cokernel_cofork.is_colimit.desc' is_colimit_σ («expr ≫ » (limits.prod.map f f) σ) (by simp)\n  suffices hfg : f = g\n  · rw [← hg, cofork.π_of_π, hfg]\n  calc\n    f = «expr ≫ » f («expr ≫ » (prod.lift ((«expr𝟙») Y) 0) σ) := by rw [lift_σ, category.comp_id]\n    _ = «expr ≫ » (prod.lift ((«expr𝟙») X) 0) («expr ≫ » (limits.prod.map f f) σ) := by rw [lift_map_assoc]\n    _ = «expr ≫ » (prod.lift ((«expr𝟙») X) 0) («expr ≫ » σ g) := by rw [← hg, cokernel_cofork.π_of_π]\n    _ = g := by rw [← category.assoc, lift_σ, category.id_comp]\n    \n#align σ_comp σ_comp\n\n",
 "sub_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print sub_zero /-\ntheorem sub_zero {X Y : C} (a : «expr ⟶ » X Y) : a - 0 = a :=\n  by\n  rw [sub_def]\n  conv_lhs =>\n    congr\n    congr\n    rw [← category.comp_id a]\n    skip\n    rw [show 0 = «expr ≫ » a (0 : «expr ⟶ » Y Y) by simp]\n  rw [← prod.comp_lift, category.assoc, lift_σ, category.comp_id]\n#align sub_zero sub_zero\n-/\n\n",
 "sub_sub_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem sub_sub_sub {X Y : C} (a b c d : «expr ⟶ » X Y) : a - c - (b - d) = a - b - (c - d) := by\n  rw [sub_def, ← lift_sub_lift, sub_def, category.assoc, σ_comp, prod.lift_map_assoc]; rfl\n#align sub_sub_sub sub_sub_sub\n\n",
 "sub_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print sub_self /-\ntheorem sub_self {X Y : C} (a : «expr ⟶ » X Y) : a - a = 0 := by\n  rw [sub_def, ← category.comp_id a, ← prod.comp_lift, category.assoc, diag_σ, comp_zero]\n#align sub_self sub_self\n-/\n\n",
 "sub_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- We write `f - g` for `prod.lift f g ≫ σ`. \n-- We write `-f` for `0 - f`. \n-- We write `f + g` for `f - (-g)`.\ntheorem sub_def {X Y : C} (a b : «expr ⟶ » X Y) : a - b = «expr ≫ » (prod.lift a b) σ :=\n  rfl\n#align sub_def sub_def\n\n",
 "sub_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem sub_comp {X Y Z : C} (f g : «expr ⟶ » X Y) (h : «expr ⟶ » Y Z) :\n    «expr ≫ » (f - g) h = «expr ≫ » f h - «expr ≫ » g h := by\n  rw [sub_def, category.assoc, σ_comp, ← category.assoc, prod.lift_map, sub_def]\n#align sub_comp sub_comp\n\n",
 "sub_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print sub_add /-\ntheorem sub_add {X Y : C} (a b c : «expr ⟶ » X Y) : a - b + c = a - (b - c) := by\n  rw [add_def, neg_def, sub_sub_sub, sub_zero]\n#align sub_add sub_add\n-/\n\n",
 "neg_sub'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print neg_sub' /-\ntheorem neg_sub' {X Y : C} (a b : «expr ⟶ » X Y) : -(a - b) = -a + b :=\n  by\n  rw [neg_def, neg_def]\n  conv_lhs => rw [← sub_self (0 : «expr ⟶ » X Y)]\n  rw [sub_sub_sub, add_def, neg_def]\n#align neg_sub' neg_sub'\n-/\n\n",
 "neg_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print neg_sub /-\ntheorem neg_sub {X Y : C} (a b : «expr ⟶ » X Y) : -a - b = -b - a := by\n  conv_lhs => rw [neg_def, ← sub_zero b, sub_sub_sub, sub_zero, ← neg_def]\n#align neg_sub neg_sub\n-/\n\n",
 "neg_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print neg_neg /-\ntheorem neg_neg {X Y : C} (a : «expr ⟶ » X Y) : - -a = a :=\n  by\n  rw [neg_def, neg_def]\n  conv_lhs =>\n    congr\n    rw [← sub_self a]\n  rw [sub_sub_sub, sub_zero, sub_self, sub_zero]\n#align neg_neg neg_neg\n-/\n\n",
 "neg_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem neg_def {X Y : C} (a : «expr ⟶ » X Y) : -a = 0 - a :=\n  rfl\n#align neg_def neg_def\n\n",
 "neg_add_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print neg_add_self /-\ntheorem neg_add_self {X Y : C} (a : «expr ⟶ » X Y) : -a + a = 0 := by rw [add_comm, add_neg_self]\n#align neg_add_self neg_add_self\n-/\n\n",
 "neg_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print neg_add /-\ntheorem neg_add {X Y : C} (a b : «expr ⟶ » X Y) : -(a + b) = -a - b := by rw [add_def, neg_sub', add_neg]\n#align neg_add neg_add\n-/\n\n",
 "lift_σ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1]\ntheorem lift_σ {X : C} : «expr ≫ » (prod.lift ((«expr𝟙») X) 0) σ = («expr𝟙») X := by\n  rw [← category.assoc, is_iso.hom_inv_id]\n#align lift_σ lift_σ\n\n",
 "lift_sub_lift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem lift_sub_lift {X Y : C} (a b c d : «expr ⟶ » X Y) : prod.lift a b - prod.lift c d = prod.lift (a - c) (b - d) :=\n  by\n  simp only [sub_def]\n  ext\n  · rw [category.assoc, σ_comp, prod.lift_map_assoc, prod.lift_fst, prod.lift_fst, prod.lift_fst]\n  · rw [category.assoc, σ_comp, prod.lift_map_assoc, prod.lift_snd, prod.lift_snd, prod.lift_snd]\n#align lift_sub_lift lift_sub_lift\n\n",
 "lift_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[reassoc.1]\ntheorem lift_map {X Y : C} (f : «expr ⟶ » X Y) :\n    «expr ≫ » (prod.lift ((«expr𝟙») X) 0) (limits.prod.map f f) = «expr ≫ » f (prod.lift ((«expr𝟙») Y) 0) := by simp\n#align lift_map lift_map\n\n",
 "diag_σ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel\n-/\n-- It will suffice to consider some g : I ⟶ R such that p ≫ g = 0 and show that g = 0.\n-- Since C is abelian, u := ker g ≫ i is the kernel of some morphism h.\n-- By hypothesis, p factors through the kernel of g via some t.\n-- h factors through the cokernel of f via some l.\n-- i factors through u = ker h via some s.\n-- ker g is an epimorphism, but ker g ≫ g = 0 = ker g ≫ 0, so g = 0 as required.\n-- Since C is abelian, u := p ≫ coker g is the cokernel of some morphism h.\n-- By hypothesis, i factors through the cokernel of g via some t.\n-- h factors through the kernel of f via some l.\n-- p factors through u = coker h via some s.\n-- coker g is a monomorphism, but g ≫ coker g = 0 = 0 ≫ coker g, so g = 0 as required.\n@[simp, reassoc.1]\ntheorem diag_σ {X : C} : «expr ≫ » (diag X) σ = 0 := by rw [cokernel.condition_assoc, zero_comp]\n#align diag_σ diag_σ\n\n",
 "comp_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem comp_sub {X Y Z : C} (f : «expr ⟶ » X Y) (g h : «expr ⟶ » Y Z) :\n    «expr ≫ » f (g - h) = «expr ≫ » f g - «expr ≫ » f h := by rw [sub_def, ← category.assoc, prod.comp_lift, sub_def]\n#align comp_sub comp_sub\n\n",
 "comp_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem comp_add (X Y Z : C) (f : «expr ⟶ » X Y) (g h : «expr ⟶ » Y Z) :\n    «expr ≫ » f (g + h) = «expr ≫ » f g + «expr ≫ » f h := by\n  rw [add_def, comp_sub, neg_def, comp_sub, comp_zero, add_def, neg_def]\n#align comp_add comp_add\n\n",
 "add_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print add_zero /-\ntheorem add_zero {X Y : C} (a : «expr ⟶ » X Y) : a + 0 = a := by rw [add_def, neg_def, sub_self, sub_zero]\n#align add_zero add_zero\n-/\n\n",
 "add_neg_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print add_neg_self /-\ntheorem add_neg_self {X Y : C} (a : «expr ⟶ » X Y) : a + -a = 0 := by rw [add_neg, sub_self]\n#align add_neg_self add_neg_self\n-/\n\n",
 "add_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print add_neg /-\ntheorem add_neg {X Y : C} (a b : «expr ⟶ » X Y) : a + -b = a - b := by rw [add_def, neg_neg]\n#align add_neg add_neg\n-/\n\n",
 "add_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem add_def {X Y : C} (a b : «expr ⟶ » X Y) : a + b = a - -b :=\n  rfl\n#align add_def add_def\n\n",
 "add_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem add_comp (X Y Z : C) (f g : «expr ⟶ » X Y) (h : «expr ⟶ » Y Z) :\n    «expr ≫ » (f + g) h = «expr ≫ » f h + «expr ≫ » g h := by\n  rw [add_def, sub_comp, neg_def, sub_comp, zero_comp, add_def, neg_def]\n#align add_comp add_comp\n\n",
 "add_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print add_comm /-\ntheorem add_comm {X Y : C} (a b : «expr ⟶ » X Y) : a + b = b + a :=\n  by\n  rw [add_def]\n  conv_lhs => rw [← neg_neg a]\n  rw [neg_def, neg_def, neg_def, sub_sub_sub]\n  conv_lhs =>\n    congr\n    skip\n    rw [← neg_def, neg_sub]\n  rw [sub_sub_sub, add_def, ← neg_def, neg_neg b, neg_def]\n#align add_comm add_comm\n-/\n\n",
 "add_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print add_assoc /-\ntheorem add_assoc {X Y : C} (a b c : «expr ⟶ » X Y) : a + b + c = a + (b + c) :=\n  by\n  conv_lhs =>\n    congr\n    rw [add_def]\n  rw [sub_add, ← add_neg, neg_sub', neg_neg]\n#align add_assoc add_assoc\n-/\n\n"}