{"restrict_yoneda_hom_equiv_natural":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- (Implementation). Show that the bijection in `restrict_yoneda_hom_equiv` is natural (on the right).\n-/\ntheorem restrict_yoneda_hom_equiv_natural (P : «expr ⥤ » («expr ᵒᵖ» C) (Type u₁)) (E₁ E₂ : ℰ) (g : «expr ⟶ » E₁ E₂)\n    {c : Cocone _} (t : IsColimit c) (k : «expr ⟶ » c.X E₁) :\n    restrictYonedaHomEquiv A P E₂ t («expr ≫ » k g) =\n      «expr ≫ » (restrictYonedaHomEquiv A P E₁ t k) ((restrictedYoneda A).map g) :=\n  by\n  ext (_ X p)\n  apply (assoc _ _ _).symm\n#align restrict_yoneda_hom_equiv_natural restrict_yoneda_hom_equiv_natural\n\n",
 "extend_along_yoneda_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n@[simp]\ntheorem extend_along_yoneda_obj (P : «expr ⥤ » («expr ᵒᵖ» C) (Type u₁)) :\n    (extendAlongYoneda A).obj P = colimit («expr ⋙ » (CategoryOfElements.π P).left_op A) :=\n  rfl\n#align extend_along_yoneda_obj extend_along_yoneda_obj\n\n",
 "extend_along_yoneda_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem extend_along_yoneda_map {X Y : «expr ⥤ » («expr ᵒᵖ» C) (Type u₁)} (f : «expr ⟶ » X Y) :\n    (extendAlongYoneda A).map f =\n      colimit.pre («expr ⋙ » (CategoryOfElements.π Y).left_op A) (CategoryOfElements.map f).op :=\n  by\n  ext J\n  erw [colimit.ι_pre («expr ⋙ » (category_of_elements.π Y).left_op A) (category_of_elements.map f).op]\n  dsimp only [extend_along_yoneda, restrict_yoneda_hom_equiv, is_colimit.hom_iso', is_colimit.hom_iso, ulift_trivial]\n  simpa\n#align extend_along_yoneda_map extend_along_yoneda_map\n\n",
 "cocone_of_representable_ι_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n-- Marking this as a simp lemma seems to make things more awkward.\n/-- An explicit formula for the legs of the cocone `cocone_of_representable`. -/\ntheorem cocone_of_representable_ι_app (P : «expr ⥤ » («expr ᵒᵖ» C) (Type u₁)) (j : «expr ᵒᵖ» P.elements) :\n    (coconeOfRepresentable P).ι.app j = (yonedaSectionsSmall _ _).inv j.unop.2 :=\n  colimit.ι_desc _ _\n#align cocone_of_representable_ι_app cocone_of_representable_ι_app\n\n",
 "cocone_of_representable_naturality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- The legs of the cocone `cocone_of_representable` are natural in the choice of presheaf. -/\ntheorem cocone_of_representable_naturality {P₁ P₂ : «expr ⥤ » («expr ᵒᵖ» C) (Type u₁)} (α : «expr ⟶ » P₁ P₂)\n    (j : «expr ᵒᵖ» P₁.elements) :\n    «expr ≫ » ((coconeOfRepresentable P₁).ι.app j) α =\n      (coconeOfRepresentable P₂).ι.app ((CategoryOfElements.map α).op.obj j) :=\n  by\n  ext (T f)\n  simpa [cocone_of_representable_ι_app] using functor_to_types.naturality _ _ α f.op _\n#align cocone_of_representable_naturality cocone_of_representable_naturality\n\n",
 "cocone_of_representable_X":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n-- Maybe this should be reducible or an abbreviation?\n@[simp]\ntheorem cocone_of_representable_X (P : «expr ⥤ » («expr ᵒᵖ» C) (Type u₁)) : (coconeOfRepresentable P).X = P :=\n  rfl\n#align cocone_of_representable_X cocone_of_representable_X\n\n"}