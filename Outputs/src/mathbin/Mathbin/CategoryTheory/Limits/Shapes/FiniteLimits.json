{"has_finite_wide_pushouts_of_has_finite_limits":
 "/-- Finite wide pushouts are finite colimits, so if `C` has all finite colimits,\nit also has finite wide pushouts\n-/\ntheorem has_finite_wide_pushouts_of_has_finite_limits [has_finite_colimits C] : has_finite_wide_pushouts C :=\n  ‚ü®fun J _ => has_finite_colimits.out _‚ü©\n#align has_finite_wide_pushouts_of_has_finite_limits has_finite_wide_pushouts_of_has_finite_limits\n\n",
 "has_finite_wide_pullbacks_of_has_finite_limits":
 "-- We can't just made this an `abbreviation`\n-- because of https://github.com/leanprover-community/lean/issues/429\n/-- Finite wide pullbacks are finite limits, so if `C` has all finite limits,\nit also has finite wide pullbacks\n-/\ntheorem has_finite_wide_pullbacks_of_has_finite_limits [has_finite_limits C] : has_finite_wide_pullbacks C :=\n  ‚ü®fun J _ => has_finite_limits.out _‚ü©\n#align has_finite_wide_pullbacks_of_has_finite_limits has_finite_wide_pullbacks_of_has_finite_limits\n\n",
 "has_finite_limits_of_has_finite_limits_of_size":
 "/-\nCopyright (c) 2019 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- We can't just made this an `abbreviation`\n-- because of https://github.com/leanprover-community/lean/issues/429\n/-- We can always derive `has_finite_limits C` by providing limits at an\narbitrary universe. -/\ntheorem has_finite_limits_of_has_finite_limits_of_size\n    (h :\n      ‚àÄ (J : Type w) {ùí• : SmallCategory J} (hJ : @fin_category J ùí•),\n        by\n        skip\n        exact has_limits_of_shape J C) :\n    has_finite_limits C :=\n  ‚ü®fun J hJ hhJ => by\n    skip\n    let this : Category.{w, w} (ulift_hom.{w} (ULift.{w, 0} J)) :=\n      by\n      apply ulift_hom.category.{0}\n      exact CategoryTheory.uliftCategory J\n    haveI := h (ulift_hom.{w} (ULift.{w} J)) category_theory.fin_category_ulift\n    exact has_limits_of_shape_of_equivalence (ulift_hom_ulift_category.equiv.{w, w} J).symm‚ü©\n#align has_finite_limits_of_has_finite_limits_of_size has_finite_limits_of_has_finite_limits_of_size\n\n",
 "has_finite_colimits_of_has_finite_colimits_of_size":
 "/-- We can always derive `has_finite_colimits C` by providing colimits at an\narbitrary universe. -/\ntheorem has_finite_colimits_of_has_finite_colimits_of_size\n    (h :\n      ‚àÄ (J : Type w) {ùí• : SmallCategory J} (hJ : @fin_category J ùí•),\n        by\n        skip\n        exact has_colimits_of_shape J C) :\n    has_finite_colimits C :=\n  ‚ü®fun J hJ hhJ => by\n    skip\n    let this : Category.{w, w} (ulift_hom.{w} (ULift.{w, 0} J)) :=\n      by\n      apply ulift_hom.category.{0}\n      exact CategoryTheory.uliftCategory J\n    haveI := h (ulift_hom.{w} (ULift.{w} J)) category_theory.fin_category_ulift\n    exact has_colimits_of_shape_of_equivalence (ulift_hom_ulift_category.equiv.{w, w} J).symm‚ü©\n#align has_finite_colimits_of_has_finite_colimits_of_size has_finite_colimits_of_has_finite_colimits_of_size\n\n"}