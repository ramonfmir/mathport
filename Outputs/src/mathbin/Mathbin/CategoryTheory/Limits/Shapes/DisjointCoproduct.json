{"initial_mono_class_of_disjoint_coproducts":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprùüô¬ª -/\n/-\nCopyright (c) 2021 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- If `C` has disjoint coproducts, any morphism out of initial is mono. Note it isn't true in\ngeneral that `C` has strict initial objects, for instance consider the category of types and\npartial functions. -/\ntheorem initial_mono_class_of_disjoint_coproducts [CoproductsDisjoint C] : InitialMonoClass C :=\n  {\n    is_initial_mono_from := fun I X hI =>\n      coproduct_disjoint.mono_inl _ _ ((¬´exprùüô¬ª) X)\n        { desc := fun s : BinaryCofan _ _ => s.inr\n          fac' := fun s j => discrete.cases_on j fun j => walking_pair.cases_on j (hI.hom_ext _ _) (id_comp _)\n          uniq' := fun (s : BinaryCofan _ _) m w => (id_comp _).symm.trans (w ‚ü®walking_pair.right‚ü©) } }\n#align initial_mono_class_of_disjoint_coproducts initial_mono_class_of_disjoint_coproducts\n\n"}