{"unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\ntheorem unop {X : «expr ᵒᵖ» C} (h : is_zero X) : is_zero (opposite.unop X) :=\n  ⟨fun Y => ⟨⟨⟨(h.from (opposite.op Y)).unop⟩, fun f => quiver.hom.op_inj (h.eq_of_tgt _ _)⟩⟩, fun Y =>\n    ⟨⟨⟨(h.to (opposite.op Y)).unop⟩, fun f => quiver.hom.op_inj (h.eq_of_src _ _)⟩⟩⟩\n#align unop unop\n\n",
 "to_zero_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[ext]\ntheorem to_zero_ext {X : C} (f g : «expr ⟶ » X 0) : f = g :=\n  (is_zero_zero C).eq_of_tgt _ _\n#align to_zero_ext to_zero_ext\n\n",
 "to_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem to_eq (h : is_zero X) (f : «expr ⟶ » X Y) : h.to Y = f :=\n  (h.eq_to f).symm\n#align to_eq to_eq\n\n",
 "op":
 "theorem op (h : is_zero X) : is_zero (opposite.op X) :=\n  ⟨fun Y => ⟨⟨⟨(h.from (opposite.unop Y)).op⟩, fun f => quiver.hom.unop_inj (h.eq_of_tgt _ _)⟩⟩, fun Y =>\n    ⟨⟨⟨(h.to (opposite.unop Y)).op⟩, fun f => quiver.hom.unop_inj (h.eq_of_src _ _)⟩⟩⟩\n#align op op\n\n",
 "of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem of_iso (hY : is_zero Y) (e : «expr ≅ » X Y) : is_zero X :=\n  by\n  refine' ⟨fun Z => ⟨⟨⟨«expr ≫ » e.hom (hY.to Z)⟩, fun f => _⟩⟩, fun Z => ⟨⟨⟨«expr ≫ » (hY.from Z) e.inv⟩, fun f => _⟩⟩⟩\n  · rw [← cancel_epi e.inv]\n    apply hY.eq_of_src\n  · rw [← cancel_mono e.hom]\n    apply hY.eq_of_tgt\n#align of_iso of_iso\n\n",
 "obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem is_zero.obj [has_zero_object D] {F : «expr ⥤ » C D} (hF : is_zero F) (X : C) : is_zero (F.obj X) :=\n  by\n  let G : «expr ⥤ » C D := (category_theory.functor.const C).obj 0\n  have hG : is_zero G := functor.is_zero _ fun X => is_zero_zero _\n  let e : «expr ≅ » F G := hF.iso hG\n  exact (is_zero_zero _).of_iso (e.app X)\n#align is_zero.obj is_zero.obj\n\n",
 "is_zero_zero":
 "theorem is_zero_zero : is_zero (0 : C) :=\n  has_zero_object.zero.some_spec\n#align is_zero_zero is_zero_zero\n\n",
 "is_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem functor.is_zero_iff [has_zero_object D] (F : «expr ⥤ » C D) : is_zero F ↔ ∀ X, is_zero (F.obj X) :=\n  ⟨fun hF X => hF.obj X, functor.is_zero _⟩\n#align functor.is_zero_iff functor.is_zero_iff\n\n",
 "is_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem functor.is_zero (F : «expr ⥤ » C D) (hF : ∀ X, is_zero (F.obj X)) : is_zero F :=\n  by\n  constructor <;> intro G <;> refine' ⟨⟨⟨_⟩, _⟩⟩\n  · refine'\n      { app := fun X => (hF _).to _\n        naturality' := _ }\n    intros\n    exact (hF _).eq_of_src _ _\n  · intro f\n    ext\n    apply (hF _).eq_of_src _ _\n  · refine'\n      { app := fun X => (hF _).from _\n        naturality' := _ }\n    intros\n    exact (hF _).eq_of_tgt _ _\n  · intro f\n    ext\n    apply (hF _).eq_of_tgt _ _\n#align functor.is_zero functor.is_zero\n\n",
 "has_zero_object_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\ntheorem has_zero_object_unop [has_zero_object («expr ᵒᵖ» C)] : has_zero_object C :=\n  ⟨⟨opposite.unop 0, is_zero.unop (is_zero_zero («expr ᵒᵖ» C))⟩⟩\n#align has_zero_object_unop has_zero_object_unop\n\n",
 "has_zero_object":
 "theorem is_zero.has_zero_object {X : C} (hX : is_zero X) : has_zero_object C :=\n  ⟨⟨X, hX⟩⟩\n#align is_zero.has_zero_object is_zero.has_zero_object\n\n",
 "from_zero_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[ext]\ntheorem from_zero_ext {X : C} (f g : «expr ⟶ » 0 X) : f = g :=\n  (is_zero_zero C).eq_of_src _ _\n#align from_zero_ext from_zero_ext\n\n",
 "from_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem from_eq (h : is_zero X) (f : «expr ⟶ » Y X) : h.from Y = f :=\n  (h.eq_from f).symm\n#align from_eq from_eq\n\n",
 "eq_to":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2019 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison, Johan Commelin\n-/\ntheorem eq_to (h : is_zero X) (f : «expr ⟶ » X Y) : f = h.to Y :=\n  @unique.eq_default _ (id _) _\n#align eq_to eq_to\n\n",
 "eq_of_tgt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem eq_of_tgt (hX : is_zero X) (f g : «expr ⟶ » Y X) : f = g :=\n  (hX.eq_from f).trans (hX.eq_from g).symm\n#align eq_of_tgt eq_of_tgt\n\n",
 "eq_of_src":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem eq_of_src (hX : is_zero X) (f g : «expr ⟶ » X Y) : f = g :=\n  (hX.eq_to f).trans (hX.eq_to g).symm\n#align eq_of_src eq_of_src\n\n",
 "eq_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem eq_from (h : is_zero X) (f : «expr ⟶ » Y X) : f = h.from Y :=\n  @unique.eq_default _ (id _) _\n#align eq_from eq_from\n\n"}