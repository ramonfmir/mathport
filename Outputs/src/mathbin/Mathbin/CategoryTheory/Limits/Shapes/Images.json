{"uniq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- TODO we could put a category structure on `mono_factorisation f`,\n-- with the morphisms being `g : I ⟶ I'` commuting with the `m`s\n-- (they then automatically commute with the `e`s)\n-- and show that an `image_of f` gives an initial object there\n-- (uniqueness of the lift comes for free).\ntheorem has_image.uniq (F' : MonoFactorisation f) (l : «expr ⟶ » (image f) F'.I) (w : «expr ≫ » l F'.m = image.ι f) :\n    l = image.lift F' :=\n  (cancel_mono F'.m).1 (by simp [w])\n#align has_image.uniq has_image.uniq\n\n",
 "transport":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem has_image_map.transport {f g : Arrow C} [HasImage f.hom] [HasImage g.hom] (sq : «expr ⟶ » f g)\n    (F : MonoFactorisation f.hom) {F' : MonoFactorisation g.hom} (hF' : IsImage F') (map : «expr ⟶ » F.I F'.I)\n    (map_ι : «expr ≫ » map F'.m = «expr ≫ » F.m sq.right) : HasImageMap sq :=\n  HasImageMap.mk <| ImageMap.transport sq F hF' map_ι\n#align has_image_map.transport has_image_map.transport\n\n",
 "strong_epi_of_strong_epi_mono_factorisation":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If there is a single strong epi-mono factorisation of `f`, then every image factorisation is a\n    strong epi-mono factorisation. -/\ntheorem strong_epi_of_strong_epi_mono_factorisation {X Y : C} {f : «expr ⟶ » X Y} (F : StrongEpiMonoFactorisation f)\n    {F' : MonoFactorisation f} (hF' : IsImage F') : StrongEpi F'.e :=\n  by\n  rw [← is_image.e_iso_ext_hom F.to_mono_is_image hF']\n  apply strong_epi_comp\n#align strong_epi_of_strong_epi_mono_factorisation strong_epi_of_strong_epi_mono_factorisation\n\n",
 "strong_epi_factor_thru_image_of_strong_epi_mono_factorisation":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem strong_epi_factor_thru_image_of_strong_epi_mono_factorisation {X Y : C} {f : «expr ⟶ » X Y} [HasImage f]\n    (F : StrongEpiMonoFactorisation f) : StrongEpi (factorThruImage f) :=\n  strongEpi_of_strongEpiMonoFactorisation F <| Image.isImage f\n#align strong_epi_factor_thru_image_of_strong_epi_mono_factorisation strong_epi_factor_thru_image_of_strong_epi_mono_factorisation\n\n",
 "pre_comp_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image.pre_comp_ι [HasImage g] [HasImage («expr ≫ » f g)] :\n    «expr ≫ » (image.preComp f g) (image.ι g) = image.ι («expr ≫ » f g) := by simp [image.pre_comp]\n#align image.pre_comp_ι image.pre_comp_ι\n\n",
 "pre_comp_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- The two step comparison map\n  `image (f ≫ (g ≫ h)) ⟶ image (g ≫ h) ⟶ image h`\nagrees with the one step comparison map\n  `image (f ≫ (g ≫ h)) ≅ image ((f ≫ g) ≫ h) ⟶ image h`.\n -/\ntheorem image.pre_comp_comp {W : C} (h : «expr ⟶ » Z W) [HasImage («expr ≫ » g h)]\n    [HasImage («expr ≫ » f («expr ≫ » g h))] [HasImage h] [HasImage («expr ≫ » («expr ≫ » f g) h)] :\n    «expr ≫ » (image.preComp f («expr ≫ » g h)) (image.preComp g h) =\n      «expr ≫ » (image.eqToHom (Category.assoc f g h).symm) (image.preComp («expr ≫ » f g) h) :=\n  by\n  apply (cancel_mono (image.ι h)).1\n  simp [image.pre_comp, image.eq_to_hom]\n#align image.pre_comp_comp image.pre_comp_comp\n\n",
 "of_arrow_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem has_image.of_arrow_iso {f g : Arrow C} [h : HasImage f.hom] (sq : «expr ⟶ » f g) [IsIso sq] : HasImage g.hom :=\n  ⟨⟨h.exists_image.some.of_arrow_iso sq⟩⟩\n#align has_image.of_arrow_iso has_image.of_arrow_iso\n\n",
 "mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem has_strong_epi_mono_factorisations.mk (d : ∀ {X Y : C} (f : «expr ⟶ » X Y), StrongEpiMonoFactorisation f) :\n    HasStrongEpiMonoFactorisations C :=\n  ⟨fun X Y f => nonempty.intro <| d f⟩\n#align has_strong_epi_mono_factorisations.mk has_strong_epi_mono_factorisations.mk\n\n",
 "map_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem image.map_ι : «expr ≫ » (image.map sq) (image.ι g.hom) = «expr ≫ » (image.ι f.hom) sq.right := by simp\n#align image.map_ι image.map_ι\n\n",
 "map_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem image.map_id [HasImageMap ((«expr𝟙») f)] : image.map ((«expr𝟙») f) = («expr𝟙») (image f.hom) :=\n  show (HasImageMap.imageMap ((«expr𝟙») f)).map = (imageMapId f).map by congr\n#align image.map_id image.map_id\n\n",
 "map_hom_mk'_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem image.map_hom_mk'_ι {X Y P Q : C} {k : «expr ⟶ » X Y} [HasImage k] {l : «expr ⟶ » P Q} [HasImage l]\n    {m : «expr ⟶ » X P} {n : «expr ⟶ » Y Q} (w : «expr ≫ » m l = «expr ≫ » k n) [HasImageMap (Arrow.homMk' w)] :\n    «expr ≫ » (image.map (Arrow.homMk' w)) (image.ι l) = «expr ≫ » (image.ι k) n :=\n  image.map_ι _\n#align image.map_hom_mk'_ι image.map_hom_mk'_ι\n\n",
 "map_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem image.map_comp [HasImageMap («expr ≫ » sq sq')] :\n    image.map («expr ≫ » sq sq') = «expr ≫ » (image.map sq) (image.map sq') :=\n  show (HasImageMap.imageMap («expr ≫ » sq sq')).map = (imageMapComp sq sq').map by congr\n#align image.map_comp image.map_comp\n\n",
 "lift_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem is_image.lift_ι {F : MonoFactorisation f} (hF : IsImage F) :\n    «expr ≫ » (hF.lift (Image.monoFactorisation f)) (image.ι f) = F.m :=\n  hF.lift_fac _\n#align is_image.lift_ι is_image.lift_ι\n\n",
 "lift_fac":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image.lift_fac (F' : MonoFactorisation f) : «expr ≫ » (image.lift F') F'.m = image.ι f :=\n  (Image.isImage f).lift_fac' F'\n#align image.lift_fac image.lift_fac\n\n",
 "iso_strong_epi_mono_inv_comp_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem image.iso_strong_epi_mono_inv_comp_mono {I' : C} (e : «expr ⟶ » X I') (m : «expr ⟶ » I' Y)\n    (comm : «expr ≫ » e m = f) [StrongEpi e] [Mono m] : «expr ≫ » (image.isoStrongEpiMono e m comm).inv m = image.ι f :=\n  image.lift_fac _\n#align image.iso_strong_epi_mono_inv_comp_mono image.iso_strong_epi_mono_inv_comp_mono\n\n",
 "iso_strong_epi_mono_hom_comp_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem image.iso_strong_epi_mono_hom_comp_ι {I' : C} (e : «expr ⟶ » X I') (m : «expr ⟶ » I' Y)\n    (comm : «expr ≫ » e m = f) [StrongEpi e] [Mono m] :\n    «expr ≫ » (image.isoStrongEpiMono e m comm).hom (image.ι f) = m :=\n  is_image.lift_fac _ _\n#align image.iso_strong_epi_mono_hom_comp_ι image.iso_strong_epi_mono_hom_comp_ι\n\n",
 "iso_ext_inv_m":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem iso_ext_inv_m : «expr ≫ » (isoExt hF hF').inv F.m = F'.m := by simp\n#align iso_ext_inv_m iso_ext_inv_m\n\n",
 "iso_ext_hom_m":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- TODO this is another good candidate for a future `unique_up_to_canonical_iso`.\ntheorem iso_ext_hom_m : «expr ≫ » (isoExt hF hF').hom F'.m = F.m := by simp\n#align iso_ext_hom_m iso_ext_hom_m\n\n",
 "is_image_lift":
 "@[simp]\ntheorem image.is_image_lift (F : MonoFactorisation f) : (Image.isImage f).lift F = image.lift F :=\n  rfl\n#align image.is_image_lift image.is_image_lift\n\n",
 "image_mono_iso_source_inv_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image_mono_iso_source_inv_ι [Mono f] : «expr ≫ » (imageMonoIsoSource f).inv (image.ι f) = f := by\n  simp [image_mono_iso_source]\n#align image_mono_iso_source_inv_ι image_mono_iso_source_inv_ι\n\n",
 "image_mono_iso_source_hom_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image_mono_iso_source_hom_self [Mono f] : «expr ≫ » (imageMonoIsoSource f).hom f = image.ι f :=\n  by\n  conv =>\n    lhs\n    congr\n    skip\n    rw [← image_mono_iso_source_inv_ι f]\n  rw [← category.assoc, iso.hom_inv_id, category.id_comp]\n#align image_mono_iso_source_hom_self image_mono_iso_source_hom_self\n\n",
 "has_strong_epi_mono_factorisations_imp_of_is_equivalence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem has_strong_epi_mono_factorisations_imp_of_is_equivalence (F : «expr ⥤ » C D) [IsEquivalence F]\n    [h : HasStrongEpiMonoFactorisations C] : HasStrongEpiMonoFactorisations D :=\n  ⟨fun X Y f =>\n    by\n    let em : strong_epi_mono_factorisation (F.inv.map f) :=\n      (has_strong_epi_mono_factorisations.has_fac (F.inv.map f)).some\n    haveI : mono («expr ≫ » (F.map em.m) (F.as_equivalence.counit_iso.hom.app Y)) := mono_comp _ _\n    haveI : strong_epi («expr ≫ » (F.as_equivalence.counit_iso.inv.app X) (F.map em.e)) := strong_epi_comp _ _\n    exact\n      nonempty.intro\n        { I := F.obj em.I\n          e := «expr ≫ » (F.as_equivalence.counit_iso.inv.app X) (F.map em.e)\n          m := «expr ≫ » (F.map em.m) (F.as_equivalence.counit_iso.hom.app Y)\n          fac' := by\n            simpa only [category.assoc, ← F.map_comp_assoc, em.fac', is_equivalence.fun_inv_map, iso.inv_hom_id_app,\n              iso.inv_hom_id_app_assoc] using category.comp_id _ }⟩\n#align has_strong_epi_mono_factorisations_imp_of_is_equivalence has_strong_epi_mono_factorisations_imp_of_is_equivalence\n\n",
 "factor_thru_image_pre_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image.factor_thru_image_pre_comp [HasImage g] [HasImage («expr ≫ » f g)] :\n    «expr ≫ » (factorThruImage («expr ≫ » f g)) (image.preComp f g) = «expr ≫ » f (factorThruImage g) := by\n  simp [image.pre_comp]\n#align image.factor_thru_image_pre_comp image.factor_thru_image_pre_comp\n\n",
 "factor_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- see Note [lower instance priority]\ntheorem image.factor_map :\n    «expr ≫ » (factorThruImage f.hom) (image.map sq) = «expr ≫ » sq.left (factorThruImage g.hom) := by simp\n#align image.factor_map image.factor_map\n\n",
 "fac_lift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image.fac_lift (F' : MonoFactorisation f) : «expr ≫ » (factorThruImage f) (image.lift F') = F'.e :=\n  (Image.isImage f).fac_lift F'\n#align image.fac_lift image.fac_lift\n\n",
 "fac":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image.fac : «expr ≫ » (factorThruImage f) (image.ι f) = f :=\n  (Image.monoFactorisation f).fac'\n#align image.fac image.fac\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- This is the proof that `factor_thru_image f` is an epimorphism\n-- from https://en.wikipedia.org/wiki/Image_%28category_theory%29, which is in turn taken from:\n-- Mitchell, Barry (1965), Theory of categories, MR 0202787, p.12, Proposition 10.1\n@[ext]\ntheorem image.ext [HasImage f] {W : C} {g h : «expr ⟶ » (image f) W} [HasLimit (parallelPair g h)]\n    (w : «expr ≫ » (factorThruImage f) g = «expr ≫ » (factorThruImage f) h) : g = h :=\n  by\n  let q := equalizer.ι g h\n  let e' := equalizer.lift _ w\n  let F' : mono_factorisation f :=\n    { I := equalizer g h\n      m := «expr ≫ » q (image.ι f)\n      m_mono := by apply mono_comp\n      e := e' }\n  let v := image.lift F'\n  have t₀ : «expr ≫ » v («expr ≫ » q (image.ι f)) = image.ι f := image.lift_fac F'\n  have t : «expr ≫ » v q = («expr𝟙») (image f) :=\n    (cancel_mono_id (image.ι f)).1\n      (by\n        convert t₀ using 1\n        rw [category.assoc])\n  -- The proof from wikipedia next proves `q ≫ v = 𝟙 _`,\n  -- and concludes that `equalizer g h ≅ image f`,\n  -- but this isn't necessary.\n  calc\n    g = «expr ≫ » ((«expr𝟙») (image f)) g := by rw [category.id_comp]\n    _ = «expr ≫ » v («expr ≫ » q g) := by rw [← t, category.assoc]\n    _ = «expr ≫ » v («expr ≫ » q h) := by rw [equalizer.condition g h]\n    _ = «expr ≫ » ((«expr𝟙») (image f)) h := by rw [← category.assoc, t]\n    _ = h := by rw [category.id_comp]\n    \n#align image.ext image.ext\n\n",
 "eq_fac":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- As long as the category has equalizers,\nthe image inclusion maps commute with `image.eq_to_iso`.\n-/\ntheorem image.eq_fac [HasEqualizers C] (h : f = f') : image.ι f = «expr ≫ » (image.eqToIso h).hom (image.ι f') :=\n  by\n  ext\n  simp [image.eq_to_iso, image.eq_to_hom]\n#align image.eq_fac image.eq_fac\n\n",
 "epi_of_epi_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem epi_of_epi_image {X Y : C} (f : «expr ⟶ » X Y) [HasImage f] [Epi (image.ι f)] [Epi (factorThruImage f)] :\n    Epi f := by\n  rw [← image.fac f]\n  apply epi_comp\n#align epi_of_epi_image epi_of_epi_image\n\n",
 "epi_image_of_epi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem epi_image_of_epi {X Y : C} (f : «expr ⟶ » X Y) [HasImage f] [E : Epi f] : Epi (image.ι f) :=\n  by\n  rw [← image.fac f] at E\n  skip\n  exact epi_of_epi (factor_thru_image f) (image.ι f)\n#align epi_image_of_epi epi_image_of_epi\n\n",
 "e_iso_ext_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem e_iso_ext_inv : «expr ≫ » F'.e (isoExt hF hF').inv = F.e := by simp\n#align e_iso_ext_inv e_iso_ext_inv\n\n",
 "e_iso_ext_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem e_iso_ext_hom : «expr ≫ » F.e (isoExt hF hF').hom = F'.e := by simp\n#align e_iso_ext_hom e_iso_ext_hom\n\n",
 "comp_iso_inv_comp_image_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem image.comp_iso_inv_comp_image_ι [HasImage f] [IsIso g] :\n    «expr ≫ » (image.compIso f g).inv (image.ι f) = «expr ≫ » (image.ι («expr ≫ » f g)) (inv g) :=\n  by\n  ext\n  simp [image.comp_iso]\n#align image.comp_iso_inv_comp_image_ι image.comp_iso_inv_comp_image_ι\n\n",
 "comp_iso_hom_comp_image_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- Note that in general we don't have the other comparison map you might expect\n-- `image f ⟶ image (f ≫ g)`.\n@[simp, reassoc.1]\ntheorem image.comp_iso_hom_comp_image_ι [HasImage f] [IsIso g] :\n    «expr ≫ » (image.compIso f g).hom (image.ι («expr ≫ » f g)) = «expr ≫ » (image.ι f) g :=\n  by\n  ext\n  simp [image.comp_iso]\n#align image.comp_iso_hom_comp_image_ι image.comp_iso_hom_comp_image_ι\n\n",
 "as_ι":
 "@[simp]\ntheorem image.as_ι : (Image.monoFactorisation f).m = image.ι f :=\n  rfl\n#align image.as_ι image.as_ι\n\n",
 "as_factor_thru_image":
 "/-- Rewrite in terms of the `factor_thru_image` interface. -/\n@[simp]\ntheorem as_factor_thru_image : (Image.monoFactorisation f).e = factorThruImage f :=\n  rfl\n#align as_factor_thru_image as_factor_thru_image\n\n"}