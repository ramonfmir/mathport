{"π_of_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem cotrident.π_of_π [Nonempty J] {P : C} (π : «expr ⟶ » Y P)\n    (w : ∀ j₁ j₂, «expr ≫ » (f j₁) π = «expr ≫ » (f j₂) π) : (Cotrident.ofπ π w).π = π :=\n  rfl\n#align cotrident.π_of_π cotrident.π_of_π\n\n",
 "π_eq_app_one":
 "@[simp]\ntheorem cotrident.π_eq_app_one (t : Cotrident f) : t.π = t.ι.app one :=\n  rfl\n#align cotrident.π_eq_app_one cotrident.π_eq_app_one\n\n",
 "π_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem wide_coequalizer.π_desc [Nonempty J] {W : C} (k : «expr ⟶ » Y W)\n    (h : ∀ j₁ j₂, «expr ≫ » (f j₁) k = «expr ≫ » (f j₂) k) :\n    «expr ≫ » (wideCoequalizer.π f) (wideCoequalizer.desc k h) = k :=\n  colimit.ι_desc _ _\n#align wide_coequalizer.π_desc wide_coequalizer.π_desc\n\n",
 "ι_of_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- See note [dsimp, simp]\ntheorem trident.ι_of_ι [Nonempty J] {P : C} (ι : «expr ⟶ » P X) (w : ∀ j₁ j₂, «expr ≫ » ι (f j₁) = «expr ≫ » ι (f j₂)) :\n    (Trident.ofι ι w).ι = ι :=\n  rfl\n#align trident.ι_of_ι trident.ι_of_ι\n\n",
 "ι_eq_app_zero":
 "@[simp]\ntheorem trident.ι_eq_app_zero (t : Trident f) : t.ι = t.π.app zero :=\n  rfl\n#align trident.ι_eq_app_zero trident.ι_eq_app_zero\n\n",
 "trident_π_app_zero":
 "@[simp]\ntheorem wide_equalizer.trident_π_app_zero : (wideEqualizer.trident f).π.app zero = wideEqualizer.ι f :=\n  rfl\n#align wide_equalizer.trident_π_app_zero wide_equalizer.trident_π_app_zero\n\n",
 "trident_ι":
 "@[simp]\ntheorem wide_equalizer.trident_ι : (wideEqualizer.trident f).ι = wideEqualizer.ι f :=\n  rfl\n#align wide_equalizer.trident_ι wide_equalizer.trident_ι\n\n",
 "parallel_family_obj_zero":
 "@[simp]\ntheorem parallel_family_obj_zero : (parallelFamily f).obj zero = X :=\n  rfl\n#align parallel_family_obj_zero parallel_family_obj_zero\n\n",
 "parallel_family_obj_one":
 "@[simp]\ntheorem parallel_family_obj_one : (parallelFamily f).obj one = Y :=\n  rfl\n#align parallel_family_obj_one parallel_family_obj_one\n\n",
 "parallel_family_map_left":
 "@[simp]\ntheorem parallel_family_map_left {j : J} : (parallelFamily f).map (line j) = f j :=\n  rfl\n#align parallel_family_map_left parallel_family_map_left\n\n",
 "of_trident_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem cone.of_trident_π {F : «expr ⥤ » (WalkingParallelFamily J) C} (t : Trident fun j => F.map (line j)) (j) :\n    (Cone.ofTrident t).π.app j = «expr ≫ » (t.π.app j) (eqToHom (by tidy)) :=\n  rfl\n#align cone.of_trident_π cone.of_trident_π\n\n",
 "of_cotrident_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem cocone.of_cotrident_ι {F : «expr ⥤ » (WalkingParallelFamily J) C} (t : Cotrident fun j => F.map (line j)) (j) :\n    (Cocone.ofCotrident t).ι.app j = «expr ≫ » (eqToHom (by tidy)) (t.ι.app j) :=\n  rfl\n#align cocone.of_cotrident_ι cocone.of_cotrident_ι\n\n",
 "of_cone_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem trident.of_cone_π {F : «expr ⥤ » (WalkingParallelFamily J) C} (t : Cone F) (j) :\n    (Trident.ofCone t).π.app j = «expr ≫ » (t.π.app j) (eqToHom (by tidy)) :=\n  rfl\n#align trident.of_cone_π trident.of_cone_π\n\n",
 "of_cocone_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem cotrident.of_cocone_ι {F : «expr ⥤ » (WalkingParallelFamily J) C} (t : Cocone F) (j) :\n    (Cotrident.ofCocone t).ι.app j = «expr ≫ » (eqToHom (by tidy)) (t.ι.app j) :=\n  rfl\n#align cotrident.of_cocone_ι cotrident.of_cocone_ι\n\n",
 "mono_of_is_limit_parallel_family":
 "/-- The wide equalizer morphism in any limit cone is a monomorphism. -/\ntheorem mono_of_is_limit_parallel_family [Nonempty J] {c : Cone (parallelFamily f)} (i : IsLimit c) :\n    Mono (Trident.ι c) :=\n  { right_cancellation := fun Z h k w => Trident.IsLimit.hom_ext i w }\n#align mono_of_is_limit_parallel_family mono_of_is_limit_parallel_family\n\n",
 "lift_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem wide_equalizer.lift_ι [Nonempty J] {W : C} (k : «expr ⟶ » W X)\n    (h : ∀ j₁ j₂, «expr ≫ » k (f j₁) = «expr ≫ » k (f j₂)) :\n    «expr ≫ » (wideEqualizer.lift k h) (wideEqualizer.ι f) = k :=\n  limit.lift_π _ _\n#align wide_equalizer.lift_ι wide_equalizer.lift_ι\n\n",
 "hom_iso_natural":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The bijection of `cotrident.is_colimit.hom_iso` is natural in `Z`. -/\ntheorem cotrident.is_colimit.hom_iso_natural [Nonempty J] {t : Cotrident f} {Z Z' : C} (q : «expr ⟶ » Z Z')\n    (ht : IsColimit t) (k : «expr ⟶ » t.X Z) :\n    (Cotrident.IsColimit.homIso ht _ («expr ≫ » k q) : «expr ⟶ » Y Z') =\n      «expr ≫ » (Cotrident.IsColimit.homIso ht _ k : «expr ⟶ » Y Z) q :=\n  (Category.assoc _ _ _).symm\n#align cotrident.is_colimit.hom_iso_natural cotrident.is_colimit.hom_iso_natural\n\n",
 "hom_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-\nCopyright (c) 2021 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n@[simp]\ntheorem walking_parallel_family.hom_id (X : WalkingParallelFamily J) : walking_parallel_family.hom.id X = («expr𝟙») X :=\n  rfl\n#align walking_parallel_family.hom_id walking_parallel_family.hom_id\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Two maps from a wide coequalizer are equal if they are equal when composed with the wide\n    coequalizer map -/\n@[ext]\ntheorem wide_coequalizer.hom_ext [Nonempty J] {W : C} {k l : «expr ⟶ » (wideCoequalizer f) W}\n    (h : «expr ≫ » (wideCoequalizer.π f) k = «expr ≫ » (wideCoequalizer.π f) l) : k = l :=\n  Cotrident.IsColimit.hom_ext (colimit.isColimit _) h\n#align wide_coequalizer.hom_ext wide_coequalizer.hom_ext\n\n",
 "has_wide_equalizers_of_has_limit_parallel_family":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `C` has all limits of diagrams `parallel_family f`, then it has all wide equalizers -/\ntheorem has_wide_equalizers_of_has_limit_parallel_family\n    [∀ {J : Type w} {X Y : C} {f : J → «expr ⟶ » X Y}, HasLimit (parallelFamily f)] : HasWideEqualizers.{w} C :=\n  fun J => { has_limit := fun F => hasLimitOfIso (diagramIsoParallelFamily F).symm }\n#align has_wide_equalizers_of_has_limit_parallel_family has_wide_equalizers_of_has_limit_parallel_family\n\n",
 "has_wide_coequalizers_of_has_colimit_parallel_family":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `C` has all colimits of diagrams `parallel_family f`, then it has all wide coequalizers -/\ntheorem has_wide_coequalizers_of_has_colimit_parallel_family\n    [∀ {J : Type w} {X Y : C} {f : J → «expr ⟶ » X Y}, HasColimit (parallelFamily f)] : HasWideCoequalizers.{w} C :=\n  fun J => { has_colimit := fun F => hasColimitOfIso (diagramIsoParallelFamily F) }\n#align has_wide_coequalizers_of_has_colimit_parallel_family has_wide_coequalizers_of_has_colimit_parallel_family\n\n",
 "equalizer_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- To check whether two maps are equalized by both maps of a trident, it suffices to check it for\nthe first map -/\ntheorem trident.equalizer_ext [Nonempty J] (s : Trident f) {W : C} {k l : «expr ⟶ » W s.X}\n    (h : «expr ≫ » k s.ι = «expr ≫ » l s.ι) :\n    ∀ j : WalkingParallelFamily J, «expr ≫ » k (s.π.app j) = «expr ≫ » l (s.π.app j)\n  | zero => h\n  | one => by rw [← s.app_zero (Classical.arbitrary J), reassoc_of h]\n#align trident.equalizer_ext trident.equalizer_ext\n\n",
 "epi_of_is_colimit_parallel_family":
 "/-- The wide coequalizer morphism in any colimit cocone is an epimorphism. -/\ntheorem epi_of_is_colimit_parallel_family [Nonempty J] {c : Cocone (parallelFamily f)} (i : IsColimit c) :\n    Epi (c.ι.app one) :=\n  { left_cancellation := fun Z h k w => Cotrident.IsColimit.hom_ext i w }\n#align epi_of_is_colimit_parallel_family epi_of_is_colimit_parallel_family\n\n",
 "cotrident_π":
 "@[simp]\ntheorem wide_coequalizer.cotrident_π : (wideCoequalizer.cotrident f).π = wideCoequalizer.π f :=\n  rfl\n#align wide_coequalizer.cotrident_π wide_coequalizer.cotrident_π\n\n",
 "cotrident_ι_app_one":
 "@[simp]\ntheorem wide_coequalizer.cotrident_ι_app_one : (wideCoequalizer.cotrident f).ι.app one = wideCoequalizer.π f :=\n  rfl\n#align wide_coequalizer.cotrident_ι_app_one wide_coequalizer.cotrident_ι_app_one\n\n",
 "condition":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem wide_coequalizer.condition (j₁ j₂ : J) :\n    «expr ≫ » (f j₁) (wideCoequalizer.π f) = «expr ≫ » (f j₂) (wideCoequalizer.π f) :=\n  Cotrident.condition j₁ j₂ <| colimit.cocone <| parallelFamily f\n#align wide_coequalizer.condition wide_coequalizer.condition\n\n",
 "coequalizer_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- To check whether two maps are coequalized by both maps of a cotrident, it suffices to check it\nfor the second map -/\ntheorem cotrident.coequalizer_ext [Nonempty J] (s : Cotrident f) {W : C} {k l : «expr ⟶ » s.X W}\n    (h : «expr ≫ » s.π k = «expr ≫ » s.π l) :\n    ∀ j : WalkingParallelFamily J, «expr ≫ » (s.ι.app j) k = «expr ≫ » (s.ι.app j) l\n  | zero => by rw [← s.app_one (Classical.arbitrary J), category.assoc, category.assoc, h]\n  | one => h\n#align cotrident.coequalizer_ext cotrident.coequalizer_ext\n\n",
 "app_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem trident.app_zero (s : Trident f) (j : J) : «expr ≫ » (s.π.app zero) (f j) = s.π.app one := by\n  rw [← s.w (line j), parallel_family_map_left]\n#align trident.app_zero trident.app_zero\n\n",
 "app_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem cotrident.app_one (s : Cotrident f) (j : J) : «expr ≫ » (f j) (s.ι.app one) = s.ι.app zero := by\n  rw [← s.w (line j), parallel_family_map_left]\n#align cotrident.app_one cotrident.app_one\n\n"}