{"zero_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- The square with `0 : 0 ⟶ 0` on the top and `𝟙 X` on the bottom is a pushout square. -/\n@[simp]\ntheorem zero_top (X : C) : is_pushout (0 : «expr ⟶ » 0 0) (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 X) ((«expr𝟙») X) :=\n  (zero_left X).flip\n#align zero_top zero_top\n\n",
 "zero_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The square with `0 : 0 ⟶ 0` on the right and `𝟙 X` on the left is a pushout square. -/\n@[simp]\ntheorem zero_right (X : C) : is_pushout (0 : «expr ⟶ » X 0) ((«expr𝟙») X) (0 : «expr ⟶ » 0 0) (0 : «expr ⟶ » X 0) :=\n  { w := by simp\n    is_colimit' :=\n      ⟨{  desc := fun s => 0\n          fac' := fun s =>\n            by\n            have c :=\n              @pushout_cocone.coequalizer_ext _ _ _ _ _ _ _ s _ 0 ((«expr𝟙») _) (by simp)\n                (by simpa using pushout_cocone.condition s)\n            dsimp at c\n            simpa using c }⟩ }\n#align zero_right zero_right\n\n",
 "zero_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The square with `0 : 0 ⟶ 0` on the right left `𝟙 X` on the right is a pushout square. -/\n@[simp]\ntheorem zero_left (X : C) : is_pushout (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 0) ((«expr𝟙») X) (0 : «expr ⟶ » 0 X) :=\n  of_iso_pushout (by simp) («expr ≪≫ » (coprod_zero_iso X).symm (pushout_zero_zero_iso _ _).symm) (by simp) (by simp)\n#align zero_left zero_left\n\n",
 "zero_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The square with `0 : 0 ⟶ 0` on the bottom and `𝟙 X` on the top is a pushout square. -/\n@[simp]\ntheorem zero_bot (X : C) : is_pushout ((«expr𝟙») X) (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » 0 0) :=\n  (zero_right X).flip\n#align zero_bot zero_bot\n\n",
 "unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem unop {Z X Y P : «expr ᵒᵖ» C} {f : «expr ⟶ » Z X} {g : «expr ⟶ » Z Y} {inl : «expr ⟶ » X P} {inr : «expr ⟶ » Y P}\n    (h : is_pushout f g inl inr) : is_pullback inr.unop inl.unop g.unop f.unop :=\n  is_pullback.of_is_limit\n    (is_limit.of_iso_limit (limits.pushout_cocone.is_colimit_equiv_is_limit_unop h.flip.cocone h.flip.is_colimit)\n      h.to_comm_sq.flip.cocone_unop)\n#align unop unop\n\n",
 "paste_vert_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem paste_vert_iff {X₁₁ X₁₂ X₂₁ X₂₂ X₃₁ X₃₂ : C} {h₁₁ : «expr ⟶ » X₁₁ X₁₂} {h₂₁ : «expr ⟶ » X₂₁ X₂₂}\n    {h₃₁ : «expr ⟶ » X₃₁ X₃₂} {v₁₁ : «expr ⟶ » X₁₁ X₂₁} {v₁₂ : «expr ⟶ » X₁₂ X₂₂} {v₂₁ : «expr ⟶ » X₂₁ X₃₁}\n    {v₂₂ : «expr ⟶ » X₂₂ X₃₂} (s : is_pushout h₁₁ v₁₁ v₁₂ h₂₁) (e : «expr ≫ » h₂₁ v₂₂ = «expr ≫ » v₂₁ h₃₁) :\n    is_pushout h₁₁ («expr ≫ » v₁₁ v₂₁) («expr ≫ » v₁₂ v₂₂) h₃₁ ↔ is_pushout h₂₁ v₂₁ v₂₂ h₃₁ :=\n  ⟨fun h => h.of_bot e s, s.paste_vert⟩\n#align paste_vert_iff paste_vert_iff\n\n",
 "paste_vert":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- Objects here are arranged in a 3x2 grid, and indexed by their xy coordinates.\n-- Morphisms are named `hᵢⱼ` for a horizontal morphism starting at `(i,j)`,\n-- and `vᵢⱼ` for a vertical morphism starting at `(i,j)`.\n/-- Paste two pushout squares \"vertically\" to obtain another pushout square. -/\ntheorem paste_vert {X₁₁ X₁₂ X₂₁ X₂₂ X₃₁ X₃₂ : C} {h₁₁ : «expr ⟶ » X₁₁ X₁₂} {h₂₁ : «expr ⟶ » X₂₁ X₂₂}\n    {h₃₁ : «expr ⟶ » X₃₁ X₃₂} {v₁₁ : «expr ⟶ » X₁₁ X₂₁} {v₁₂ : «expr ⟶ » X₁₂ X₂₂} {v₂₁ : «expr ⟶ » X₂₁ X₃₁}\n    {v₂₂ : «expr ⟶ » X₂₂ X₃₂} (s : is_pushout h₁₁ v₁₁ v₁₂ h₂₁) (t : is_pushout h₂₁ v₂₁ v₂₂ h₃₁) :\n    is_pushout h₁₁ («expr ≫ » v₁₁ v₂₁) («expr ≫ » v₁₂ v₂₂) h₃₁ :=\n  of_is_colimit (big_square_is_pushout _ _ _ _ _ _ _ s.w t.w t.is_colimit s.is_colimit)\n#align paste_vert paste_vert\n\n",
 "paste_horiz_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem paste_horiz_iff {X₁₁ X₁₂ X₁₃ X₂₁ X₂₂ X₂₃ : C} {h₁₁ : «expr ⟶ » X₁₁ X₁₂} {h₁₂ : «expr ⟶ » X₁₂ X₁₃}\n    {h₂₁ : «expr ⟶ » X₂₁ X₂₂} {h₂₂ : «expr ⟶ » X₂₂ X₂₃} {v₁₁ : «expr ⟶ » X₁₁ X₂₁} {v₁₂ : «expr ⟶ » X₁₂ X₂₂}\n    {v₁₃ : «expr ⟶ » X₁₃ X₂₃} (s : is_pushout h₁₁ v₁₁ v₁₂ h₂₁) (e : «expr ≫ » h₁₂ v₁₃ = «expr ≫ » v₁₂ h₂₂) :\n    is_pushout («expr ≫ » h₁₁ h₁₂) v₁₁ v₁₃ («expr ≫ » h₂₁ h₂₂) ↔ is_pushout h₁₂ v₁₂ v₁₃ h₂₂ :=\n  ⟨fun h => h.of_right e s, s.paste_horiz⟩\n#align paste_horiz_iff paste_horiz_iff\n\n",
 "paste_horiz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Paste two pushout squares \"horizontally\" to obtain another pushout square. -/\ntheorem paste_horiz {X₁₁ X₁₂ X₁₃ X₂₁ X₂₂ X₂₃ : C} {h₁₁ : «expr ⟶ » X₁₁ X₁₂} {h₁₂ : «expr ⟶ » X₁₂ X₁₃}\n    {h₂₁ : «expr ⟶ » X₂₁ X₂₂} {h₂₂ : «expr ⟶ » X₂₂ X₂₃} {v₁₁ : «expr ⟶ » X₁₁ X₂₁} {v₁₂ : «expr ⟶ » X₁₂ X₂₂}\n    {v₁₃ : «expr ⟶ » X₁₃ X₂₃} (s : is_pushout h₁₁ v₁₁ v₁₂ h₂₁) (t : is_pushout h₁₂ v₁₂ v₁₃ h₂₂) :\n    is_pushout («expr ≫ » h₁₁ h₁₂) v₁₁ v₁₃ («expr ≫ » h₂₁ h₂₂) :=\n  (paste_vert s.flip t.flip).flip\n#align paste_horiz paste_horiz\n\n",
 "op":
 "theorem op (h : is_pushout f g inl inr) : is_pullback inr.op inl.op g.op f.op :=\n  is_pullback.of_is_limit\n    (is_limit.of_iso_limit (limits.pushout_cocone.is_colimit_equiv_is_limit_op h.flip.cocone h.flip.is_colimit)\n      h.to_comm_sq.flip.cocone_op)\n#align op op\n\n",
 "of_vert_is_iso":
 "theorem of_vert_is_iso [IsIso g] [IsIso inl] (sq : comm_sq f g inl inr) : is_pushout f g inl inr :=\n  (of_horiz_is_iso sq.flip).flip\n#align of_vert_is_iso of_vert_is_iso\n\n",
 "of_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Given a pushout square assembled from a pushout square on the left and\na commuting square on the right, the right square is a pushout square. -/\ntheorem of_right {X₁₁ X₁₂ X₁₃ X₂₁ X₂₂ X₂₃ : C} {h₁₁ : «expr ⟶ » X₁₁ X₁₂} {h₁₂ : «expr ⟶ » X₁₂ X₁₃}\n    {h₂₁ : «expr ⟶ » X₂₁ X₂₂} {h₂₂ : «expr ⟶ » X₂₂ X₂₃} {v₁₁ : «expr ⟶ » X₁₁ X₂₁} {v₁₂ : «expr ⟶ » X₁₂ X₂₂}\n    {v₁₃ : «expr ⟶ » X₁₃ X₂₃} (s : is_pushout («expr ≫ » h₁₁ h₁₂) v₁₁ v₁₃ («expr ≫ » h₂₁ h₂₂))\n    (p : «expr ≫ » h₁₂ v₁₃ = «expr ≫ » v₁₂ h₂₂) (t : is_pushout h₁₁ v₁₁ v₁₂ h₂₁) : is_pushout h₁₂ v₁₂ v₁₃ h₂₂ :=\n  (of_bot s.flip p.symm t.flip).flip\n#align of_right of_right\n\n",
 "of_map_of_faithful":
 "theorem is_pushout.of_map_of_faithful [reflects_colimit (span f g) F] [Faithful F]\n    (H : is_pushout (F.map f) (F.map g) (F.map h) (F.map i)) : is_pushout f g h i :=\n  H.of_map F (F.map_injective <| by simpa only [F.map_comp] using H.w)\n#align is_pushout.of_map_of_faithful is_pushout.of_map_of_faithful\n\n",
 "of_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem is_pushout.of_map [reflects_colimit (span f g) F] (e : «expr ≫ » f h = «expr ≫ » g i)\n    (H : is_pushout (F.map f) (F.map g) (F.map h) (F.map i)) : is_pushout f g h i :=\n  by\n  refine' ⟨⟨e⟩, ⟨is_colimit_of_reflects F <| _⟩⟩\n  refine' (is_colimit.equiv_of_nat_iso_of_iso (span_comp_iso F f g) _ _ (walking_span.ext _ _ _)).symm H.is_colimit\n  exacts[iso.refl _, (category.comp_id _).trans (category.id_comp _), (category.comp_id _).trans (category.id_comp _)]\n#align is_pushout.of_map is_pushout.of_map\n\n",
 "of_iso_pushout":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem of_iso_pushout (h : comm_sq f g inl inr) [has_pushout f g] (i : «expr ≅ » P (pushout f g))\n    (w₁ : «expr ≫ » inl i.hom = pushout.inl) (w₂ : «expr ≫ » inr i.hom = pushout.inr) : is_pushout f g inl inr :=\n  of_is_colimit' h\n    (limits.is_colimit.of_iso_colimit (colimit.is_colimit _)\n      (@pushout_cocone.ext _ _ _ _ _ _ _ (pushout_cocone.mk _ _ _) _ i w₁ w₂).symm)\n#align of_iso_pushout of_iso_pushout\n\n",
 "of_iso_pullback":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem of_iso_pullback (h : comm_sq fst snd f g) [has_pullback f g] (i : «expr ≅ » P (pullback f g))\n    (w₁ : «expr ≫ » i.hom pullback.fst = fst) (w₂ : «expr ≫ » i.hom pullback.snd = snd) : is_pullback fst snd f g :=\n  of_is_limit' h\n    (limits.is_limit.of_iso_limit (limit.is_limit _)\n      (@pullback_cone.ext _ _ _ _ _ _ _ (pullback_cone.mk _ _ _) _ i w₁.symm w₂.symm).symm)\n#align of_iso_pullback of_iso_pullback\n\n",
 "of_is_pullback_is_pushout":
 "theorem of_is_pullback_is_pushout (p₁ : is_pullback f g h i) (p₂ : is_pushout f g h i) : bicartesian_sq f g h i :=\n  bicartesian_sq.mk p₁.to_comm_sq ⟨p₁.is_limit⟩ ⟨p₂.is_colimit⟩\n#align of_is_pullback_is_pushout of_is_pullback_is_pushout\n\n",
 "of_is_product'":
 "/-- A variant of `of_is_product` that is more useful with `apply`. -/\ntheorem of_is_product' (h : limits.is_limit (binary_fan.mk fst snd)) (t : is_terminal Z) :\n    is_pullback fst snd (t.from _) (t.from _) :=\n  of_is_product h t\n#align of_is_product' of_is_product'\n\n",
 "of_is_product":
 "/-- If `c` is a limiting binary product cone, and we have a terminal object,\nthen we have `is_pullback c.fst c.snd 0 0`\n(where each `0` is the unique morphism to the terminal object). -/\ntheorem of_is_product {c : binary_fan X Y} (h : limits.is_limit c) (t : is_terminal Z) :\n    is_pullback c.fst c.snd (t.from _) (t.from _) :=\n  of_is_limit\n    (is_pullback_of_is_terminal_is_product _ _ _ _ t\n      (is_limit.of_iso_limit h\n        (limits.cones.ext (Iso.refl c.X)\n          (by\n            rintro ⟨⟨⟩⟩ <;>\n              · dsimp\n                simp))))\n#align of_is_product of_is_product\n\n",
 "of_is_limit'":
 "/-- A variant of `of_is_limit` that is more useful with `apply`. -/\ntheorem of_is_limit' (w : comm_sq fst snd f g) (h : limits.is_limit w.cone) : is_pullback fst snd f g :=\n  of_is_limit h\n#align of_is_limit' of_is_limit'\n\n",
 "of_is_limit":
 "/-- If `c` is a limiting pullback cone, then we have a `is_pullback c.fst c.snd f g`. -/\ntheorem of_is_limit {c : pullback_cone f g} (h : limits.is_limit c) : is_pullback c.fst c.snd f g :=\n  { w := c.condition\n    is_limit' := ⟨is_limit.of_iso_limit h (limits.pullback_cone.ext (Iso.refl _) (by tidy) (by tidy))⟩ }\n#align of_is_limit of_is_limit\n\n",
 "of_is_coproduct'":
 "/-- A variant of `of_is_coproduct` that is more useful with `apply`. -/\ntheorem of_is_coproduct' (h : limits.is_colimit (binary_cofan.mk inl inr)) (t : is_initial Z) :\n    is_pushout (t.to _) (t.to _) inl inr :=\n  of_is_coproduct h t\n#align of_is_coproduct' of_is_coproduct'\n\n",
 "of_is_coproduct":
 "/-- If `c` is a colimiting binary coproduct cocone, and we have an initial object,\nthen we have `is_pushout 0 0 c.inl c.inr`\n(where each `0` is the unique morphism from the initial object). -/\ntheorem of_is_coproduct {c : binary_cofan X Y} (h : limits.is_colimit c) (t : is_initial Z) :\n    is_pushout (t.to _) (t.to _) c.inl c.inr :=\n  of_is_colimit\n    (is_pushout_of_is_initial_is_coproduct _ _ _ _ t\n      (is_colimit.of_iso_colimit h\n        (limits.cocones.ext (Iso.refl c.X)\n          (by\n            rintro ⟨⟨⟩⟩ <;>\n              · dsimp\n                simp))))\n#align of_is_coproduct of_is_coproduct\n\n",
 "of_is_colimit'":
 "/-- A variant of `of_is_colimit` that is more useful with `apply`. -/\ntheorem of_is_colimit' (w : comm_sq f g inl inr) (h : limits.is_colimit w.cocone) : is_pushout f g inl inr :=\n  of_is_colimit h\n#align of_is_colimit' of_is_colimit'\n\n",
 "of_is_colimit":
 "/-- If `c` is a colimiting pushout cocone, then we have a `is_pushout f g c.inl c.inr`. -/\ntheorem of_is_colimit {c : pushout_cocone f g} (h : limits.is_colimit c) : is_pushout f g c.inl c.inr :=\n  { w := c.condition\n    is_colimit' := ⟨is_colimit.of_iso_colimit h (limits.pushout_cocone.ext (Iso.refl _) (by tidy) (by tidy))⟩ }\n#align of_is_colimit of_is_colimit\n\n",
 "of_is_biproduct₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- ```\n   0 -----0---> X\n   |            |\n   0           inl\n   |            |\n   v            v\n   Y --inr--> X ⊞ Y\n```\nis a bicartesian square.\n-/\ntheorem of_is_biproduct₂ {b : binary_bicone X Y} (h : b.is_bilimit) :\n    bicartesian_sq (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 Y) b.inl b.inr :=\n  of_is_pullback_is_pushout (is_pullback.of_is_bilimit' h) (is_pushout.of_is_bilimit h)\n#align of_is_biproduct₂ of_is_biproduct₂\n\n",
 "of_is_biproduct₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- ```\n X ⊞ Y --fst--> X\n   |            |\n  snd           0\n   |            |\n   v            v\n   Y -----0---> 0\n```\nis a bicartesian square.\n-/\ntheorem of_is_biproduct₁ {b : binary_bicone X Y} (h : b.is_bilimit) :\n    bicartesian_sq b.fst b.snd (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » Y 0) :=\n  of_is_pullback_is_pushout (is_pullback.of_is_bilimit h) (is_pushout.of_is_bilimit' h)\n#align of_is_biproduct₁ of_is_biproduct₁\n\n",
 "of_is_bilimit'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_is_bilimit' {b : binary_bicone X Y} (h : b.is_bilimit) :\n    is_pushout b.fst b.snd (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » Y 0) :=\n  by\n  refine' is_pushout.of_right _ (by simp) (is_pushout.inl_snd' h)\n  simp\n#align of_is_bilimit' of_is_bilimit'\n\n",
 "of_is_bilimit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_is_bilimit {b : binary_bicone X Y} (h : b.is_bilimit) :\n    is_pushout (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 Y) b.inl b.inr := by\n  convert is_pushout.of_is_coproduct' h.is_colimit has_zero_object.zero_is_initial\n#align of_is_bilimit of_is_bilimit\n\n",
 "of_horiz_is_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem of_horiz_is_iso [IsIso f] [IsIso inr] (sq : comm_sq f g inl inr) : is_pushout f g inl inr :=\n  of_is_colimit' sq\n    (by\n      refine' pushout_cocone.is_colimit.mk _ (fun s => «expr ≫ » (inv inr) s.inr) (fun s => _) (by tidy) (by tidy)\n      simp only [← cancel_epi f, s.condition, sq.w_assoc, is_iso.hom_inv_id_assoc])\n#align of_horiz_is_iso of_horiz_is_iso\n\n",
 "of_has_pushout":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The pushout provided by `has_pushout f g` fits into a `is_pushout`. -/\ntheorem of_has_pushout (f : «expr ⟶ » Z X) (g : «expr ⟶ » Z Y) [has_pushout f g] :\n    is_pushout f g (pushout.inl : «expr ⟶ » X (pushout f g)) (pushout.inr : «expr ⟶ » Y (pushout f g)) :=\n  of_is_colimit (colimit.is_colimit (span f g))\n#align of_has_pushout of_has_pushout\n\n",
 "of_has_pullback":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The pullback provided by `has_pullback f g` fits into a `is_pullback`. -/\ntheorem of_has_pullback (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) [has_pullback f g] :\n    is_pullback (pullback.fst : «expr ⟶ » (pullback f g) X) (pullback.snd : «expr ⟶ » (pullback f g) Y) f g :=\n  of_is_limit (limit.is_limit (cospan f g))\n#align of_has_pullback of_has_pullback\n\n",
 "of_has_biproduct₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- ```\n   0 -----0---> X\n   |            |\n   0           inl\n   |            |\n   v            v\n   Y --inr--> X ⊞ Y\n```\nis a bicartesian square.\n-/\n@[simp]\ntheorem of_has_biproduct₂ [has_binary_biproduct X Y] :\n    bicartesian_sq (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 Y) biprod.inl biprod.inr := by\n  convert of_is_biproduct₂ (binary_biproduct.is_bilimit X Y)\n#align of_has_biproduct₂ of_has_biproduct₂\n\n",
 "of_has_biproduct₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- ```\n X ⊞ Y --fst--> X\n   |            |\n  snd           0\n   |            |\n   v            v\n   Y -----0---> 0\n```\nis a bicartesian square.\n-/\n@[simp]\ntheorem of_has_biproduct₁ [has_binary_biproduct X Y] :\n    bicartesian_sq biprod.fst biprod.snd (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » Y 0) := by\n  convert of_is_biproduct₁ (binary_biproduct.is_bilimit X Y)\n#align of_has_biproduct₁ of_has_biproduct₁\n\n",
 "of_has_biproduct":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem of_has_biproduct (X Y : C) [has_binary_biproduct X Y] :\n    is_pushout (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 Y) biprod.inl biprod.inr :=\n  of_is_bilimit (binary_biproduct.is_bilimit X Y)\n#align of_has_biproduct of_has_biproduct\n\n",
 "of_has_binary_product'":
 "theorem of_has_binary_product' [has_binary_product X Y] [has_terminal C] :\n    is_pullback limits.prod.fst limits.prod.snd (terminal.from X) (terminal.from Y) :=\n  of_is_product (limit.is_limit _) terminal_is_terminal\n#align of_has_binary_product' of_has_binary_product'\n\n",
 "of_has_binary_product":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_has_binary_product [has_binary_product X Y] [has_zero_object C] [has_zero_morphisms C] :\n    is_pullback limits.prod.fst limits.prod.snd (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » Y 0) := by\n  convert of_is_product (limit.is_limit _) has_zero_object.zero_is_terminal\n#align of_has_binary_product of_has_binary_product\n\n",
 "of_has_binary_coproduct'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_has_binary_coproduct' [has_binary_coproduct X Y] [has_initial C] :\n    is_pushout (initial.to _) (initial.to _) (coprod.inl : «expr ⟶ » X _) (coprod.inr : «expr ⟶ » Y _) :=\n  of_is_coproduct (colimit.is_colimit _) initial_is_initial\n#align of_has_binary_coproduct' of_has_binary_coproduct'\n\n",
 "of_has_binary_coproduct":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_has_binary_coproduct [has_binary_coproduct X Y] [has_zero_object C] [has_zero_morphisms C] :\n    is_pushout (0 : «expr ⟶ » 0 X) (0 : «expr ⟶ » 0 Y) coprod.inl coprod.inr := by\n  convert of_is_coproduct (colimit.is_colimit _) has_zero_object.zero_is_initial\n#align of_has_binary_coproduct of_has_binary_coproduct\n\n",
 "of_has_binary_biproduct":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem of_has_binary_biproduct (X Y : C) [has_binary_biproduct X Y] :\n    is_pushout biprod.fst biprod.snd (0 : «expr ⟶ » X 0) (0 : «expr ⟶ » Y 0) :=\n  of_is_bilimit' (binary_biproduct.is_bilimit X Y)\n#align of_has_binary_biproduct of_has_binary_biproduct\n\n",
 "of_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Given a pushout square assembled from a pushout square on the top and\na commuting square on the bottom, the bottom square is a pushout square. -/\ntheorem of_bot {X₁₁ X₁₂ X₂₁ X₂₂ X₃₁ X₃₂ : C} {h₁₁ : «expr ⟶ » X₁₁ X₁₂} {h₂₁ : «expr ⟶ » X₂₁ X₂₂}\n    {h₃₁ : «expr ⟶ » X₃₁ X₃₂} {v₁₁ : «expr ⟶ » X₁₁ X₂₁} {v₁₂ : «expr ⟶ » X₁₂ X₂₂} {v₂₁ : «expr ⟶ » X₂₁ X₃₁}\n    {v₂₂ : «expr ⟶ » X₂₂ X₃₂} (s : is_pushout h₁₁ («expr ≫ » v₁₁ v₂₁) («expr ≫ » v₁₂ v₂₂) h₃₁)\n    (p : «expr ≫ » h₂₁ v₂₂ = «expr ≫ » v₂₁ h₃₁) (t : is_pushout h₁₁ v₁₁ v₁₂ h₂₁) : is_pushout h₂₁ v₂₁ v₂₂ h₃₁ :=\n  of_is_colimit (right_square_is_pushout _ _ _ _ _ _ _ _ p t.is_colimit s.is_colimit)\n#align of_bot of_bot\n\n",
 "map_is_pushout":
 "theorem functor.map_is_pushout [preserves_colimit (span f g) F] (s : is_pushout f g h i) :\n    is_pushout (F.map f) (F.map g) (F.map h) (F.map i) :=\n  by\n  refine'\n    is_pushout.of_is_colimit' (F.map_comm_sq s.to_comm_sq)\n      (is_colimit.equiv_of_nat_iso_of_iso (span_comp_iso F f g) _ _ (walking_span.ext _ _ _)\n        (is_colimit_of_preserves F s.is_colimit))\n  · rfl\n  · dsimp\n    simp\n  · dsimp\n    simp\n#align functor.map_is_pushout functor.map_is_pushout\n\n",
 "map_is_pullback":
 "theorem functor.map_is_pullback [preserves_limit (cospan h i) F] (s : is_pullback f g h i) :\n    is_pullback (F.map f) (F.map g) (F.map h) (F.map i) :=\n  by\n  -- This is made slightly awkward because `C` and `D` have different universes,\n  -- and so the relevant `walking_cospan` diagrams live in different universes too!\n  refine'\n    is_pullback.of_is_limit' (F.map_comm_sq s.to_comm_sq)\n      (is_limit.equiv_of_nat_iso_of_iso (cospan_comp_iso F h i) _ _ (walking_cospan.ext _ _ _)\n        (is_limit_of_preserves F s.is_limit))\n  · rfl\n  · dsimp\n    simp\n  · dsimp\n    simp\n#align functor.map_is_pullback functor.map_is_pullback\n\n",
 "map_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem is_pushout.map_iff {D : Type _} [Category D] (F : «expr ⥤ » C D) [preserves_colimit (span f g) F]\n    [reflects_colimit (span f g) F] (e : «expr ≫ » f h = «expr ≫ » g i) :\n    is_pushout (F.map f) (F.map g) (F.map h) (F.map i) ↔ is_pushout f g h i :=\n  ⟨fun h => h.of_map F e, fun h => h.map F⟩\n#align is_pushout.map_iff is_pushout.map_iff\n\n",
 "iso_pullback_inv_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem iso_pullback_inv_snd (h : is_pullback fst snd f g) [has_pullback f g] :\n    «expr ≫ » h.iso_pullback.inv snd = pullback.snd := by simp [iso.inv_comp_eq]\n#align iso_pullback_inv_snd iso_pullback_inv_snd\n\n",
 "iso_pullback_inv_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem iso_pullback_inv_fst (h : is_pullback fst snd f g) [has_pullback f g] :\n    «expr ≫ » h.iso_pullback.inv fst = pullback.fst := by simp [iso.inv_comp_eq]\n#align iso_pullback_inv_fst iso_pullback_inv_fst\n\n",
 "iso_pullback_hom_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem iso_pullback_hom_snd (h : is_pullback fst snd f g) [has_pullback f g] :\n    «expr ≫ » h.iso_pullback.hom pullback.snd = snd :=\n  by\n  dsimp [iso_pullback, cone, comm_sq.cone]\n  simp\n#align iso_pullback_hom_snd iso_pullback_hom_snd\n\n",
 "iso_pullback_hom_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem iso_pullback_hom_fst (h : is_pullback fst snd f g) [has_pullback f g] :\n    «expr ≫ » h.iso_pullback.hom pullback.fst = fst :=\n  by\n  dsimp [iso_pullback, cone, comm_sq.cone]\n  simp\n#align iso_pullback_hom_fst iso_pullback_hom_fst\n\n",
 "inr_iso_pushout_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem inr_iso_pushout_inv (h : is_pushout f g inl inr) [has_pushout f g] :\n    «expr ≫ » pushout.inr h.iso_pushout.inv = inr :=\n  by\n  dsimp [iso_pushout, cocone, comm_sq.cocone]\n  simp\n#align inr_iso_pushout_inv inr_iso_pushout_inv\n\n",
 "inr_iso_pushout_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem inr_iso_pushout_hom (h : is_pushout f g inl inr) [has_pushout f g] :\n    «expr ≫ » inr h.iso_pushout.hom = pushout.inr := by simp [← iso.eq_comp_inv]\n#align inr_iso_pushout_hom inr_iso_pushout_hom\n\n",
 "inr_fst'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem inr_fst' {b : binary_bicone X Y} (h : b.is_bilimit) :\n    is_pushout b.inr (0 : «expr ⟶ » Y 0) b.fst (0 : «expr ⟶ » 0 X) :=\n  by\n  refine' of_bot _ (by simp) (of_is_bilimit h)\n  simp\n#align inr_fst' inr_fst'\n\n",
 "inr_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The square\n```\n  Y --inr--> X ⊞ Y\n  |            |\n  0           fst\n  |            |\n  v            v\n  0 ---0-----> X\n```\nis a pushout square.\n-/\ntheorem inr_fst (X Y : C) [has_binary_biproduct X Y] :\n    is_pushout biprod.inr (0 : «expr ⟶ » Y 0) biprod.fst (0 : «expr ⟶ » 0 X) :=\n  inr_fst' (binary_biproduct.is_bilimit X Y)\n#align inr_fst inr_fst\n\n",
 "inl_snd'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem inl_snd' {b : binary_bicone X Y} (h : b.is_bilimit) :\n    is_pushout b.inl (0 : «expr ⟶ » X 0) b.snd (0 : «expr ⟶ » 0 Y) :=\n  by\n  apply flip\n  refine' of_right _ (by simp) (of_is_bilimit h)\n  simp\n#align inl_snd' inl_snd'\n\n",
 "inl_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- The square\n```\n  X --inl--> X ⊞ Y\n  |            |\n  0           snd\n  |            |\n  v            v\n  0 ---0-----> Y\n```\nis a pushout square.\n-/\ntheorem inl_snd (X Y : C) [has_binary_biproduct X Y] :\n    is_pushout biprod.inl (0 : «expr ⟶ » X 0) biprod.snd (0 : «expr ⟶ » 0 Y) :=\n  inl_snd' (binary_biproduct.is_bilimit X Y)\n#align inl_snd inl_snd\n\n",
 "inl_iso_pushout_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem inl_iso_pushout_inv (h : is_pushout f g inl inr) [has_pushout f g] :\n    «expr ≫ » pushout.inl h.iso_pushout.inv = inl :=\n  by\n  dsimp [iso_pushout, cocone, comm_sq.cocone]\n  simp\n#align inl_iso_pushout_inv inl_iso_pushout_inv\n\n",
 "inl_iso_pushout_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem inl_iso_pushout_hom (h : is_pushout f g inl inr) [has_pushout f g] :\n    «expr ≫ » inl h.iso_pushout.hom = pushout.inl := by simp [← iso.eq_comp_inv]\n#align inl_iso_pushout_hom inl_iso_pushout_hom\n\n",
 "flip_iff":
 "theorem flip_iff : is_pushout f g inl inr ↔ is_pushout g f inr inl :=\n  ⟨flip, flip⟩\n#align flip_iff flip_iff\n\n",
 "flip":
 "#print flip /-\ntheorem flip (p : bicartesian_sq f g h i) : bicartesian_sq g f i h :=\n  of_is_pullback_is_pushout p.to_is_pullback.flip p.to_is_pushout.flip\n#align flip flip\n-/\n\n",
 "cone_snd":
 "@[simp]\ntheorem cone_snd (h : is_pullback fst snd f g) : h.cone.snd = snd :=\n  rfl\n#align cone_snd cone_snd\n\n",
 "cone_fst":
 "-- Lean should make these parent projections as `lemma`, not `def`.\n@[simp]\ntheorem cone_fst (h : is_pullback fst snd f g) : h.cone.fst = fst :=\n  rfl\n#align cone_fst cone_fst\n\n",
 "cocone_inr":
 "@[simp]\ntheorem cocone_inr (h : is_pushout f g inl inr) : h.cocone.inr = inr :=\n  rfl\n#align cocone_inr cocone_inr\n\n",
 "cocone_inl":
 "@[simp]\ntheorem cocone_inl (h : is_pushout f g inl inr) : h.cocone.inl = inl :=\n  rfl\n#align cocone_inl cocone_inl\n\n"}