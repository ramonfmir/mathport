{"has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- If `F` creates limits of shape `J`, and `D` has limits of shape `J`, then\n`C` has limits of shape `J`.\n-/\ntheorem has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape (F : «expr ⥤ » C D) [has_limits_of_shape J D]\n    [creates_limits_of_shape J F] : has_limits_of_shape J C :=\n  ⟨fun G => has_limit_of_created G F⟩\n#align\n  has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape\n\n",
 "has_limits_of_has_limits_creates_limits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- If `F` creates limits, and `D` has all limits, then `C` has all limits. -/\ntheorem has_limits_of_has_limits_creates_limits (F : «expr ⥤ » C D) [has_limits_of_size.{w, w'} D]\n    [creates_limits_of_size.{w, w'} F] : has_limits_of_size.{w, w'} C :=\n  ⟨fun J I => has_limits_of_shape_of_has_limits_of_shape_creates_limits_of_shape F⟩\n#align has_limits_of_has_limits_creates_limits has_limits_of_has_limits_creates_limits\n\n",
 "has_limit_of_created":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n-- This should be used with explicit universe variables.\n-- This should be used with explicit universe variables.\n-- see Note [lower instance priority]\n-- Interface to the `creates_limit` class.\n/-- If `F` creates the limit of `K` and `K ⋙ F` has a limit, then `K` has a limit. -/\ntheorem has_limit_of_created (K : «expr ⥤ » J C) (F : «expr ⥤ » C D) [has_limit («expr ⋙ » K F)] [creates_limit K F] :\n    has_limit K :=\n  has_limit.mk\n    { cone := lift_limit (limit.is_limit («expr ⋙ » K F))\n      is_limit := lifted_limit_is_limit _ }\n#align has_limit_of_created has_limit_of_created\n\n",
 "has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- If `F` creates colimits of shape `J`, and `D` has colimits of shape `J`, then\n`C` has colimits of shape `J`.\n-/\ntheorem has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape (F : «expr ⥤ » C D)\n    [has_colimits_of_shape J D] [creates_colimits_of_shape J F] : has_colimits_of_shape J C :=\n  ⟨fun G => has_colimit_of_created G F⟩\n#align\n  has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape\n\n",
 "has_colimits_of_has_colimits_creates_colimits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- If `F` creates colimits, and `D` has all colimits, then `C` has all colimits. -/\ntheorem has_colimits_of_has_colimits_creates_colimits (F : «expr ⥤ » C D) [has_colimits_of_size.{w, w'} D]\n    [creates_colimits_of_size.{w, w'} F] : has_colimits_of_size.{w, w'} C :=\n  ⟨fun J I => has_colimits_of_shape_of_has_colimits_of_shape_creates_colimits_of_shape F⟩\n#align has_colimits_of_has_colimits_creates_colimits has_colimits_of_has_colimits_creates_colimits\n\n",
 "has_colimit_of_created":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n-- Interface to the `creates_colimit` class.\n/-- If `F` creates the limit of `K` and `K ⋙ F` has a limit, then `K` has a limit. -/\ntheorem has_colimit_of_created (K : «expr ⥤ » J C) (F : «expr ⥤ » C D) [has_colimit («expr ⋙ » K F)]\n    [creates_colimit K F] : has_colimit K :=\n  has_colimit.mk\n    { cocone := lift_colimit (colimit.is_colimit («expr ⋙ » K F))\n      is_colimit := lifted_colimit_is_colimit _ }\n#align has_colimit_of_created has_colimit_of_created\n\n"}