{"has_product_fin":
 "/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- If `C` has a terminal object and binary products, then it has a product for objects indexed by\n`fin n`.\nThis is a helper lemma for `has_finite_products_of_has_binary_and_terminal`, which is more general\nthan this.\n-/\nprivate theorem has_product_fin : ∀ (n : ℕ) (f : fin n → C), has_product f\n  | 0 => fun f =>\n    by\n    letI : has_limits_of_shape (discrete (fin 0)) C :=\n      has_limits_of_shape_of_equivalence (discrete.equivalence.{0} fin_zero_equiv'.symm)\n    infer_instance\n  | n + 1 => fun f => by\n    haveI := has_product_fin n\n    apply has_limit.mk ⟨_, extend_fan_is_limit f (limit.is_limit _) (limit.is_limit _)⟩\n#align has_product_fin has_product_fin\n\n",
 "has_finite_products_of_has_binary_and_terminal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/-- If `C` has a terminal object and binary products, then it has finite products. -/\ntheorem has_finite_products_of_has_binary_and_terminal : has_finite_products C :=\n  by\n  refine' ⟨fun n => ⟨fun K => _⟩⟩\n  letI := has_product_fin n fun n => K.obj ⟨n⟩\n  let this : «expr ≅ » (discrete.functor fun n => K.obj ⟨n⟩) K := discrete.nat_iso fun ⟨i⟩ => iso.refl _\n  apply has_limit_of_iso this\n#align has_finite_products_of_has_binary_and_terminal has_finite_products_of_has_binary_and_terminal\n\n",
 "has_finite_coproducts_of_has_binary_and_initial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/-- If `C` has an initial object and binary coproducts, then it has finite coproducts. -/\ntheorem has_finite_coproducts_of_has_binary_and_initial : has_finite_coproducts C :=\n  by\n  refine' ⟨fun n => ⟨fun K => _⟩⟩\n  letI := has_coproduct_fin n fun n => K.obj ⟨n⟩\n  let this : «expr ≅ » K (discrete.functor fun n => K.obj ⟨n⟩) := discrete.nat_iso fun ⟨i⟩ => iso.refl _\n  apply has_colimit_of_iso this\n#align has_finite_coproducts_of_has_binary_and_initial has_finite_coproducts_of_has_binary_and_initial\n\n",
 "has_coproduct_fin":
 "/-- If `C` has an initial object and binary coproducts, then it has a coproduct for objects indexed by\n`fin n`.\nThis is a helper lemma for `has_cofinite_products_of_has_binary_and_terminal`, which is more general\nthan this.\n-/\nprivate theorem has_coproduct_fin : ∀ (n : ℕ) (f : fin n → C), has_coproduct f\n  | 0 => fun f =>\n    by\n    letI : has_colimits_of_shape (discrete (fin 0)) C :=\n      has_colimits_of_shape_of_equivalence (discrete.equivalence.{0} fin_zero_equiv'.symm)\n    infer_instance\n  | n + 1 => fun f => by\n    haveI := has_coproduct_fin n\n    apply has_colimit.mk ⟨_, extend_cofan_is_colimit f (colimit.is_colimit _) (colimit.is_colimit _)⟩\n#align has_coproduct_fin has_coproduct_fin\n\n"}