{"pushout_inl_eq_pushout_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫= » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n-- We hide the \"implementation details\" inside a namespace\ntheorem pushout_inl_eq_pushout_inr (F : «expr ⥤ » walking_parallel_pair C) : pushout_inl F = pushout.inr := by\n  convert «expr ≫= » limits.coprod.inl pushout.condition <;> simp\n#align pushout_inl_eq_pushout_inr pushout_inl_eq_pushout_inr\n\n",
 "pullback_fst_eq_pullback_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta, Andrew Yang\n-/\n-- We hide the \"implementation details\" inside a namespace\ntheorem pullback_fst_eq_pullback_snd (F : «expr ⥤ » walking_parallel_pair C) : pullback_fst F = pullback.snd := by\n  convert «expr =≫ » pullback.condition limits.prod.fst <;> simp\n#align pullback_fst_eq_pullback_snd pullback_fst_eq_pullback_snd\n\n",
 "has_equalizers_of_has_pullbacks_and_binary_products":
 "-- This is not an instance, as it is not always how one wants to construct equalizers!\n/-- Any category with pullbacks and binary products, has equalizers. -/\ntheorem has_equalizers_of_has_pullbacks_and_binary_products [has_binary_products C] [has_pullbacks C] :\n    has_equalizers C :=\n  {\n    has_limit := fun F =>\n      has_limit.mk\n        { cone := equalizer_cone F\n          is_limit := equalizer_cone_is_limit F } }\n#align has_equalizers_of_has_pullbacks_and_binary_products has_equalizers_of_has_pullbacks_and_binary_products\n\n",
 "has_coequalizers_of_has_pushouts_and_binary_coproducts":
 "-- This is not an instance, as it is not always how one wants to construct equalizers!\n/-- Any category with pullbacks and binary products, has equalizers. -/\ntheorem has_coequalizers_of_has_pushouts_and_binary_coproducts [has_binary_coproducts C] [has_pushouts C] :\n    has_coequalizers C :=\n  {\n    has_colimit := fun F =>\n      has_colimit.mk\n        { cocone := coequalizer_cocone F\n          is_colimit := coequalizer_cocone_is_colimit F } }\n#align has_coequalizers_of_has_pushouts_and_binary_coproducts has_coequalizers_of_has_pushouts_and_binary_coproducts\n\n"}