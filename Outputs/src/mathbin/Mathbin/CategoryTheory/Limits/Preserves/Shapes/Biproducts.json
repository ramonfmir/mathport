{"ι_biproduct_comparison'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem ι_biproduct_comparison' (j : J) :\n    «expr ≫ » (biproduct.ι _ j) (biproduct_comparison' F f) = F.map (biproduct.ι f j) :=\n  biproduct.ι_desc _ _\n#align ι_biproduct_comparison' ι_biproduct_comparison'\n\n",
 "map_lift_map_biprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.map_lift_map_biprod (f : «expr ⟶ » W X) (g : «expr ⟶ » W Y) :\n    «expr ≫ » (F.map (biprod.lift f g)) (F.map_biprod X Y).hom = biprod.lift (F.map f) (F.map g) := by\n  ext <;> simp [← F.map_comp]\n#align biprod.map_lift_map_biprod biprod.map_lift_map_biprod\n\n",
 "map_biproduct_inv_map_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biproduct.map_biproduct_inv_map_desc (g : ∀ j, «expr ⟶ » (f j) W) :\n    «expr ≫ » (F.map_biproduct f).inv (F.map (biproduct.desc g)) = biproduct.desc fun j => F.map (g j) :=\n  by\n  ext\n  simp [← F.map_comp]\n#align biproduct.map_biproduct_inv_map_desc biproduct.map_biproduct_inv_map_desc\n\n",
 "map_biproduct_inv":
 "theorem map_biproduct_inv : (map_biproduct F f).inv = biproduct.desc fun j => F.map (biproduct.ι f j) :=\n  rfl\n#align map_biproduct_inv map_biproduct_inv\n\n",
 "map_biproduct_hom_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biproduct.map_biproduct_hom_desc (g : ∀ j, «expr ⟶ » (f j) W) :\n    «expr ≫ » (F.map_biproduct f).hom (biproduct.desc fun j => F.map (g j)) = F.map (biproduct.desc g) := by\n  rw [← biproduct.map_biproduct_inv_map_desc, iso.hom_inv_id_assoc]\n#align biproduct.map_biproduct_hom_desc biproduct.map_biproduct_hom_desc\n\n",
 "map_biproduct_hom":
 "theorem map_biproduct_hom : (map_biproduct F f).hom = biproduct.lift fun j => F.map (biproduct.π f j) :=\n  rfl\n#align map_biproduct_hom map_biproduct_hom\n\n",
 "map_biprod_inv_map_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.map_biprod_inv_map_desc (f : «expr ⟶ » X W) (g : «expr ⟶ » Y W) :\n    «expr ≫ » (F.map_biprod X Y).inv (F.map (biprod.desc f g)) = biprod.desc (F.map f) (F.map g) := by\n  ext <;> simp [← F.map_comp]\n#align biprod.map_biprod_inv_map_desc biprod.map_biprod_inv_map_desc\n\n",
 "map_biprod_inv":
 "theorem map_biprod_inv : (map_biprod F X Y).inv = biprod.desc (F.map biprod.inl) (F.map biprod.inr) :=\n  rfl\n#align map_biprod_inv map_biprod_inv\n\n",
 "map_biprod_hom_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.map_biprod_hom_desc (f : «expr ⟶ » X W) (g : «expr ⟶ » Y W) :\n    «expr ≫ » (F.map_biprod X Y).hom (biprod.desc (F.map f) (F.map g)) = F.map (biprod.desc f g) := by\n  rw [← biprod.map_biprod_inv_map_desc, iso.hom_inv_id_assoc]\n#align biprod.map_biprod_hom_desc biprod.map_biprod_hom_desc\n\n",
 "map_biprod_hom":
 "theorem map_biprod_hom : (map_biprod F X Y).hom = biprod.lift (F.map biprod.fst) (F.map biprod.snd) :=\n  rfl\n#align map_biprod_hom map_biprod_hom\n\n",
 "map_bicone_whisker":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/-\nCopyright (c) 2022 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel\n-/\ntheorem map_bicone_whisker {K : Type w₂} {g : «expr ≃ » K J} {f : J → C} (c : bicone f) :\n    F.map_bicone (c.whisker g) = (F.map_bicone c).whisker g :=\n  rfl\n#align map_bicone_whisker map_bicone_whisker\n\n",
 "lift_map_biprod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.lift_map_biprod (f : «expr ⟶ » W X) (g : «expr ⟶ » W Y) :\n    «expr ≫ » (biprod.lift (F.map f) (F.map g)) (F.map_biprod X Y).inv = F.map (biprod.lift f g) := by\n  rw [← biprod.map_lift_map_biprod, category.assoc, iso.hom_inv_id, category.comp_id]\n#align biprod.lift_map_biprod biprod.lift_map_biprod\n\n",
 "inr_biprod_comparison'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem inr_biprod_comparison' : «expr ≫ » biprod.inr (biprod_comparison' F X Y) = F.map biprod.inr :=\n  biprod.inr_desc _ _\n#align inr_biprod_comparison' inr_biprod_comparison'\n\n",
 "inl_biprod_comparison'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem inl_biprod_comparison' : «expr ≫ » biprod.inl (biprod_comparison' F X Y) = F.map biprod.inl :=\n  biprod.inl_desc _ _\n#align inl_biprod_comparison' inl_biprod_comparison'\n\n",
 "biproduct_comparison_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem biproduct_comparison_π (j : J) :\n    «expr ≫ » (biproduct_comparison F f) (biproduct.π _ j) = F.map (biproduct.π f j) :=\n  biproduct.lift_π _ _\n#align biproduct_comparison_π biproduct_comparison_π\n\n",
 "biproduct_comparison'_comp_biproduct_comparison":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨁ » -/\n/-- The composition in the opposite direction is equal to the identity if and only if `F` preserves\n    the biproduct, see `preserves_biproduct_of_mono_biproduct_comparison`.  -/\n@[simp, reassoc.1]\ntheorem biproduct_comparison'_comp_biproduct_comparison :\n    «expr ≫ » (biproduct_comparison' F f) (biproduct_comparison F f) = («expr𝟙») («expr⨁ » (F.obj ∘ f)) := by\n  classical\n    ext\n    simp [biproduct.ι_π, ← functor.map_comp, eq_to_hom_map]\n#align biproduct_comparison'_comp_biproduct_comparison biproduct_comparison'_comp_biproduct_comparison\n\n",
 "biprod_comparison_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem biprod_comparison_snd : «expr ≫ » (biprod_comparison F X Y) biprod.snd = F.map biprod.snd :=\n  biprod.lift_snd _ _\n#align biprod_comparison_snd biprod_comparison_snd\n\n",
 "biprod_comparison_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem biprod_comparison_fst : «expr ≫ » (biprod_comparison F X Y) biprod.fst = F.map biprod.fst :=\n  biprod.lift_fst _ _\n#align biprod_comparison_fst biprod_comparison_fst\n\n",
 "biprod_comparison'_comp_biprod_comparison":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊞ » -/\n/-- The composition in the opposite direction is equal to the identity if and only if `F` preserves\n    the biproduct, see `preserves_binary_biproduct_of_mono_biprod_comparison`. -/\n@[simp, reassoc.1]\ntheorem biprod_comparison'_comp_biprod_comparison :\n    «expr ≫ » (biprod_comparison' F X Y) (biprod_comparison F X Y) = («expr𝟙») («expr ⊞ » (F.obj X) (F.obj Y)) := by\n  ext <;> simp [← functor.map_comp]\n#align biprod_comparison'_comp_biprod_comparison biprod_comparison'_comp_biprod_comparison\n\n"}