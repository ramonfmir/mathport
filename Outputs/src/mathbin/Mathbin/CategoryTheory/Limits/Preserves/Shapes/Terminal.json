{"iso_hom":
 "@[simp]\ntheorem preserves_initial.iso_hom : (preserves_initial.iso G).inv = initial_comparison G :=\n  rfl\n#align preserves_initial.iso_hom preserves_initial.iso_hom\n\n",
 "has_terminal_of_has_terminal_of_preserves_limit":
 "/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- If `C` has a terminal object and `G` preserves terminal objects, then `D` has a terminal object\nalso.\nNote this property is somewhat unique to (co)limits of the empty diagram: for general `J`, if `C`\nhas limits of shape `J` and `G` preserves them, then `D` does not necessarily have limits of shape\n`J`.\n-/\ntheorem has_terminal_of_has_terminal_of_preserves_limit [preserves_limit (functor.empty.{0} C) G] : has_terminal D :=\n  ⟨fun F => by\n    haveI := has_limit.mk ⟨_, is_limit_of_has_terminal_of_preserves_limit G⟩\n    apply has_limit_of_iso F.unique_from_empty.symm⟩\n#align has_terminal_of_has_terminal_of_preserves_limit has_terminal_of_has_terminal_of_preserves_limit\n\n",
 "has_initial_of_has_initial_of_preserves_colimit":
 "/-- If `C` has a initial object and `G` preserves initial objects, then `D` has a initial object\nalso.\nNote this property is somewhat unique to colimits of the empty diagram: for general `J`, if `C`\nhas colimits of shape `J` and `G` preserves them, then `D` does not necessarily have colimits of\nshape `J`.\n-/\ntheorem has_initial_of_has_initial_of_preserves_colimit [preserves_colimit (functor.empty.{0} C) G] : has_initial D :=\n  ⟨fun F => by\n    haveI := has_colimit.mk ⟨_, is_colimit_of_has_initial_of_preserves_colimit G⟩\n    apply has_colimit_of_iso F.unique_from_empty⟩\n#align has_initial_of_has_initial_of_preserves_colimit has_initial_of_has_initial_of_preserves_colimit\n\n"}