{"zero_add_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem zero_add_inv_app (h : ShiftMkCore C A) (n : A) (X : C) :\n    (h.add 0 n).inv.app X = «expr ≫ » ((h.F n).map (h.zero.hom.app X)) (eqToHom (by dsimp <;> rw [zero_add])) := by\n  rw [← cancel_epi ((h.add 0 n).hom.app X), iso.hom_inv_id_app, h.zero_add_hom_app, category.assoc, ←\n    functor.map_comp_assoc, iso.inv_hom_id_app, Functor.map_id, category.id_comp, eq_to_hom_trans, eq_to_hom_refl]\n#align zero_add_inv_app zero_add_inv_app\n\n",
 "shift_zero_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_zero_eq_zero (X Y : C) (n : A) :\n    «expr ⟦ ⟧'» (0 : «expr ⟶ » X Y) n = (0 : «expr ⟶ » («expr ⟦ ⟧» X n) («expr ⟦ ⟧» Y n)) :=\n  CategoryTheory.Functor.map_zero _ _ _\n#align shift_zero_eq_zero shift_zero_eq_zero\n\n",
 "shift_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem shift_zero' : «expr ⟦ ⟧'» f (0 : A) = «expr ≫ » (shiftZero A X).hom («expr ≫ » f (shiftZero A Y).inv) :=\n  by\n  symm\n  apply nat_iso.naturality_2\n#align shift_zero' shift_zero'\n\n",
 "shift_shift_neg'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem shift_shift_neg' (i : A) :\n    «expr ⟦ ⟧'» («expr ⟦ ⟧'» f i) (-i) =\n      «expr ≫ » ((shiftFunctorCompIsoId C i (-i) (add_neg_self i)).hom.app X)\n        («expr ≫ » f ((shiftFunctorCompIsoId C i (-i) (add_neg_self i)).inv.app Y)) :=\n  (NatIso.naturality_2 (shiftFunctorCompIsoId C i (-i) (add_neg_self i)) f).symm\n#align shift_shift_neg' shift_shift_neg'\n\n",
 "shift_shift_functor_comp_iso_id_neg_add_self_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_shift_functor_comp_iso_id_neg_add_self_inv_app (n : A) (X : C) :\n    «expr ⟦ ⟧'» ((shiftFunctorCompIsoId C (-n) n (neg_add_self n)).inv.app X) (-n) =\n      (shiftFunctorCompIsoId C n (-n) (add_neg_self n)).inv.app («expr ⟦ ⟧» X (-n)) :=\n  by apply shift_shift_functor_comp_iso_id_inv_app\n#align shift_shift_functor_comp_iso_id_neg_add_self_inv_app shift_shift_functor_comp_iso_id_neg_add_self_inv_app\n\n",
 "shift_shift_functor_comp_iso_id_neg_add_self_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_shift_functor_comp_iso_id_neg_add_self_hom_app (n : A) (X : C) :\n    «expr ⟦ ⟧'» ((shiftFunctorCompIsoId C (-n) n (neg_add_self n)).hom.app X) (-n) =\n      (shiftFunctorCompIsoId C n (-n) (add_neg_self n)).hom.app («expr ⟦ ⟧» X (-n)) :=\n  by apply shift_shift_functor_comp_iso_id_hom_app\n#align shift_shift_functor_comp_iso_id_neg_add_self_hom_app shift_shift_functor_comp_iso_id_neg_add_self_hom_app\n\n",
 "shift_shift_functor_comp_iso_id_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_shift_functor_comp_iso_id_inv_app (n m : A) (h : n + m = 0) (X : C) :\n    «expr ⟦ ⟧'» ((shiftFunctorCompIsoId C n m h).inv.app X) n =\n      (shiftFunctorCompIsoId C m n (by rw [← neg_eq_of_add_eq_zero_left h, add_right_neg])).inv.app («expr ⟦ ⟧» X n) :=\n  by\n  rw [← cancel_mono («expr ⟦ ⟧'» ((shift_functor_comp_iso_id C n m h).hom.app X) n), ← functor.map_comp,\n    iso.inv_hom_id_app, Functor.map_id, shift_shift_functor_comp_iso_id_hom_app, iso.inv_hom_id_app]\n  rfl\n#align shift_shift_functor_comp_iso_id_inv_app shift_shift_functor_comp_iso_id_inv_app\n\n",
 "shift_shift_functor_comp_iso_id_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_shift_functor_comp_iso_id_hom_app (n m : A) (h : n + m = 0) (X : C) :\n    «expr ⟦ ⟧'» ((shiftFunctorCompIsoId C n m h).hom.app X) n =\n      (shiftFunctorCompIsoId C m n (by rw [← neg_eq_of_add_eq_zero_left h, add_right_neg])).hom.app («expr ⟦ ⟧» X n) :=\n  by\n  dsimp [shift_functor_comp_iso_id]\n  simpa only [functor.map_comp, ← shift_functor_add'_zero_add_inv_app n X, ←\n    shift_functor_add'_add_zero_inv_app n X] using\n    shift_functor_add'_assoc_inv_app n m n 0 0 n h (by rw [← neg_eq_of_add_eq_zero_left h, add_right_neg])\n      (by rw [h, zero_add]) X\n#align shift_shift_functor_comp_iso_id_hom_app shift_shift_functor_comp_iso_id_hom_app\n\n",
 "shift_shift_functor_comp_iso_id_add_neg_self_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_shift_functor_comp_iso_id_add_neg_self_inv_app (n : A) (X : C) :\n    «expr ⟦ ⟧'» ((shiftFunctorCompIsoId C n (-n) (add_neg_self n)).inv.app X) n =\n      (shiftFunctorCompIsoId C (-n) n (neg_add_self n)).inv.app («expr ⟦ ⟧» X n) :=\n  by apply shift_shift_functor_comp_iso_id_inv_app\n#align shift_shift_functor_comp_iso_id_add_neg_self_inv_app shift_shift_functor_comp_iso_id_add_neg_self_inv_app\n\n",
 "shift_shift_functor_comp_iso_id_add_neg_self_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_shift_functor_comp_iso_id_add_neg_self_hom_app (n : A) (X : C) :\n    «expr ⟦ ⟧'» ((shiftFunctorCompIsoId C n (-n) (add_neg_self n)).hom.app X) n =\n      (shiftFunctorCompIsoId C (-n) n (neg_add_self n)).hom.app («expr ⟦ ⟧» X n) :=\n  by apply shift_shift_functor_comp_iso_id_hom_app\n#align shift_shift_functor_comp_iso_id_add_neg_self_hom_app shift_shift_functor_comp_iso_id_add_neg_self_hom_app\n\n",
 "shift_shift'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_shift' (i j : A) :\n    «expr ⟦ ⟧'» («expr ⟦ ⟧'» f i) j =\n      «expr ≫ » (shiftAdd X i j).inv («expr ≫ » («expr ⟦ ⟧'» f (i + j)) (shiftAdd Y i j).hom) :=\n  by\n  symm\n  apply nat_iso.naturality_1\n#align shift_shift' shift_shift'\n\n",
 "shift_obj_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n@[simp]\ntheorem has_shift.shift_obj_obj (n : A) (X : C) : (has_shift.shift.obj ⟨n⟩).obj X = «expr ⟦ ⟧» X n :=\n  rfl\n#align has_shift.shift_obj_obj has_shift.shift_obj_obj\n\n",
 "shift_neg_shift'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem shift_neg_shift' (i : A) :\n    «expr ⟦ ⟧'» («expr ⟦ ⟧'» f (-i)) i =\n      «expr ≫ » ((shiftFunctorCompIsoId C (-i) i (neg_add_self i)).hom.app X)\n        («expr ≫ » f ((shiftFunctorCompIsoId C (-i) i (neg_add_self i)).inv.app Y)) :=\n  (NatIso.naturality_2 (shiftFunctorCompIsoId C (-i) i (neg_add_self i)) f).symm\n#align shift_neg_shift' shift_neg_shift'\n\n",
 "shift_functor_zero_inv_app_shift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_functor_zero_inv_app_shift (n : A) :\n    (shiftFunctorZero C A).inv.app («expr ⟦ ⟧» X n) =\n      «expr ≫ » («expr ⟦ ⟧'» ((shiftFunctorZero C A).inv.app X) n) ((shiftFunctorComm C n 0).inv.app X) :=\n  by\n  rw [← cancel_mono ((shift_functor_zero C A).hom.app («expr ⟦ ⟧» X n)), category.assoc, iso.inv_hom_id_app,\n    shift_functor_zero_hom_app_shift, iso.inv_hom_id_app_assoc, ← functor.map_comp, iso.inv_hom_id_app]\n  dsimp\n  rw [Functor.map_id]\n#align shift_functor_zero_inv_app_shift shift_functor_zero_inv_app_shift\n\n",
 "shift_functor_zero_hom_app_shift":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_functor_zero_hom_app_shift (n : A) :\n    (shiftFunctorZero C A).hom.app («expr ⟦ ⟧» X n) =\n      «expr ≫ » ((shiftFunctorComm C n 0).hom.app X) («expr ⟦ ⟧'» ((shiftFunctorZero C A).hom.app X) n) :=\n  by\n  rw [← shift_functor_add'_zero_add_inv_app n X, shift_functor_comm_eq C n 0 n (add_zero n)]\n  dsimp\n  rw [category.assoc, iso.hom_inv_id_app, category.comp_id, shift_functor_add'_add_zero_inv_app]\n#align shift_functor_zero_hom_app_shift shift_functor_zero_hom_app_shift\n\n",
 "shift_functor_zero_eq":
 "theorem shift_mk_core.shift_functor_zero_eq (h : ShiftMkCore C A) :\n    @shiftFunctorZero _ _ _ _ (hasShiftMk C A h) = h.zero :=\n  by\n  letI := has_shift_mk C A h\n  ext1\n  suffices (shift_functor_zero C A).inv = h.zero.inv\n    by\n    rw [← cancel_mono h.zero.inv, h.zero.hom_inv_id, ← this, iso.hom_inv_id]\n    rfl\n  rfl\n#align shift_mk_core.shift_functor_zero_eq shift_mk_core.shift_functor_zero_eq\n\n",
 "shift_functor_inv":
 "@[simp]\ntheorem shift_functor_inv (i : A) : (shiftFunctor C i).inv = shiftFunctor C (-i) :=\n  rfl\n#align shift_functor_inv shift_functor_inv\n\n",
 "shift_functor_eq":
 "theorem shift_mk_core.shift_functor_eq (h : ShiftMkCore C A) (a : A) :\n    @shiftFunctor _ _ _ _ (hasShiftMk C A h) a = h.F a :=\n  Functor.ext (by tidy) (by tidy)\n#align shift_mk_core.shift_functor_eq shift_mk_core.shift_functor_eq\n\n",
 "shift_functor_comm_symm":
 "theorem shift_functor_comm_symm (i j : A) : (shiftFunctorComm C i j).symm = shiftFunctorComm C j i :=\n  by\n  ext1\n  dsimp\n  simpa only [shift_functor_comm_eq C i j (i + j) rfl, shift_functor_comm_eq C j i (i + j) (add_comm j i)]\n#align shift_functor_comm_symm shift_functor_comm_symm\n\n",
 "shift_functor_comm_hom_app_comp_shift_shift_functor_add_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n@[reassoc.1]\ntheorem shift_functor_comm_hom_app_comp_shift_shift_functor_add_hom_app (m₁ m₂ m₃ : A) (X : C) :\n    «expr ≫ » ((shiftFunctorComm C m₁ (m₂ + m₃)).hom.app X) («expr ⟦ ⟧'» ((shiftFunctorAdd C m₂ m₃).hom.app X) m₁) =\n      «expr ≫ » ((shiftFunctorAdd C m₂ m₃).hom.app («expr ⟦ ⟧» X m₁))\n        («expr ≫ » («expr ⟦ ⟧'» ((shiftFunctorComm C m₁ m₂).hom.app X) m₃)\n          ((shiftFunctorComm C m₁ m₃).hom.app («expr ⟦ ⟧» X m₂))) :=\n  by\n  simp only [← cancel_mono ((shift_functor_comm C m₁ m₃).inv.app («expr ⟦ ⟧» X m₂)), ←\n    cancel_mono («expr ⟦ ⟧'» ((shift_functor_comm C m₁ m₂).inv.app X) m₃), category.assoc, iso.hom_inv_id_app]\n  dsimp\n  simp only [category.id_comp, ← functor.map_comp, iso.hom_inv_id_app]\n  dsimp\n  simp only [Functor.map_id, category.comp_id, shift_functor_comm_eq C _ _ _ rfl, ←\n    shift_functor_add'_eq_shift_functor_add]\n  dsimp\n  simp only [category.assoc, iso.hom_inv_id_app_assoc, iso.inv_hom_id_app_assoc, ← functor.map_comp,\n    shift_functor_add'_assoc_hom_app_assoc m₂ m₃ m₁ (m₂ + m₃) (m₁ + m₃) (m₁ + (m₂ + m₃)) rfl (add_comm m₃ m₁)\n      (add_comm _ m₁) X,\n    ←\n    shift_functor_add'_assoc_hom_app_assoc m₂ m₁ m₃ (m₁ + m₂) (m₁ + m₃) (m₁ + (m₂ + m₃)) (add_comm _ _) rfl\n      (by rw [add_comm m₂ m₁, add_assoc]) X,\n    shift_functor_add'_assoc_hom_app m₁ m₂ m₃ (m₁ + m₂) (m₂ + m₃) (m₁ + (m₂ + m₃)) rfl rfl (add_assoc _ _ _) X]\n#align shift_functor_comm_hom_app_comp_shift_shift_functor_add_hom_app shift_functor_comm_hom_app_comp_shift_shift_functor_add_hom_app\n\n",
 "shift_functor_comm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\ntheorem shift_functor_comm_eq (i j k : A) (h : i + j = k) :\n    shiftFunctorComm C i j =\n      «expr ≪≫ » (shiftFunctorAdd' C i j k h).symm (shiftFunctorAdd' C j i k (by rw [add_comm j i, h])) :=\n  by\n  subst h\n  rw [shift_functor_add'_eq_shift_functor_add]\n  rfl\n#align shift_functor_comm_eq shift_functor_comm_eq\n\n",
 "shift_functor_add_zero_add_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_functor_add_zero_add_inv_app (a : A) (X : C) :\n    (shiftFunctorAdd C 0 a).inv.app X =\n      «expr ≫ » («expr ⟦ ⟧'» ((shiftFunctorZero C A).hom.app X) a) (eqToHom (by dsimp <;> rw [zero_add])) :=\n  by\n  erw [← shift_functor_add'_zero_add_inv_app]\n  dsimp [shift_functor_add']\n  simp\n#align shift_functor_add_zero_add_inv_app shift_functor_add_zero_add_inv_app\n\n",
 "shift_functor_add_zero_add_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_functor_add_zero_add_hom_app (a : A) (X : C) :\n    (shiftFunctorAdd C 0 a).hom.app X =\n      «expr ≫ » (eqToHom (by dsimp <;> rw [zero_add])) («expr ⟦ ⟧'» ((shiftFunctorZero C A).inv.app X) a) :=\n  by\n  erw [← shift_functor_add'_zero_add_hom_app]\n  dsimp [shift_functor_add']\n  simp\n#align shift_functor_add_zero_add_hom_app shift_functor_add_zero_add_hom_app\n\n",
 "shift_functor_add_eq":
 "theorem shift_mk_core.shift_functor_add_eq (h : ShiftMkCore C A) (a b : A) :\n    @shiftFunctorAdd _ _ _ _ (hasShiftMk C A h) a b = h.add a b :=\n  by\n  letI := has_shift_mk C A h\n  ext1\n  suffices (shift_functor_add C a b).inv = (h.add a b).inv\n    by\n    rw [← cancel_mono (h.add a b).inv, (h.add a b).hom_inv_id, ← this, iso.hom_inv_id]\n    rfl\n  rfl\n#align shift_mk_core.shift_functor_add_eq shift_mk_core.shift_functor_add_eq\n\n",
 "shift_functor_add_assoc_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n@[reassoc.1]\ntheorem shift_functor_add_assoc_inv_app (a₁ a₂ a₃ : A) (X : C) :\n    «expr ≫ » («expr ⟦ ⟧'» ((shiftFunctorAdd C a₁ a₂).inv.app X) a₃) ((shiftFunctorAdd C (a₁ + a₂) a₃).inv.app X) =\n      «expr ≫ » ((shiftFunctorAdd C a₂ a₃).inv.app («expr ⟦ ⟧» X a₁))\n        ((shiftFunctorAdd' C a₁ (a₂ + a₃) (a₁ + a₂ + a₃) (add_assoc _ _ _).symm).inv.app X) :=\n  by simpa using nat_trans.congr_app (congr_arg iso.inv (shift_functor_add_assoc C a₁ a₂ a₃)) X\n#align shift_functor_add_assoc_inv_app shift_functor_add_assoc_inv_app\n\n",
 "shift_functor_add_assoc_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n@[reassoc.1]\ntheorem shift_functor_add_assoc_hom_app (a₁ a₂ a₃ : A) (X : C) :\n    «expr ≫ » ((shiftFunctorAdd C (a₁ + a₂) a₃).hom.app X) («expr ⟦ ⟧'» ((shiftFunctorAdd C a₁ a₂).hom.app X) a₃) =\n      «expr ≫ » ((shiftFunctorAdd' C a₁ (a₂ + a₃) (a₁ + a₂ + a₃) (add_assoc _ _ _).symm).hom.app X)\n        ((shiftFunctorAdd C a₂ a₃).hom.app («expr ⟦ ⟧» X a₁)) :=\n  by simpa using nat_trans.congr_app (congr_arg iso.hom (shift_functor_add_assoc C a₁ a₂ a₃)) X\n#align shift_functor_add_assoc_hom_app shift_functor_add_assoc_hom_app\n\n",
 "shift_functor_add_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\ntheorem shift_functor_add_assoc (a₁ a₂ a₃ : A) :\n    «expr ≪≫ » (shiftFunctorAdd C (a₁ + a₂) a₃)\n        («expr ≪≫ » (isoWhiskerRight (shiftFunctorAdd C a₁ a₂) _) (Functor.associator _ _ _)) =\n      «expr ≪≫ » (shiftFunctorAdd' C a₁ (a₂ + a₃) _ (add_assoc a₁ a₂ a₃).symm)\n        (isoWhiskerLeft _ (shiftFunctorAdd C a₂ a₃)) :=\n  by\n  ext X\n  simpa [shift_functor_add'_eq_shift_functor_add] using\n    nat_trans.congr_app (congr_arg iso.hom (shift_functor_add'_assoc C a₁ a₂ a₃ _ _ _ rfl rfl rfl)) X\n#align shift_functor_add_assoc shift_functor_add_assoc\n\n",
 "shift_functor_add_add_zero_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_functor_add_add_zero_inv_app (a : A) (X : C) :\n    (shiftFunctorAdd C a 0).inv.app X =\n      «expr ≫ » ((shiftFunctorZero C A).hom.app («expr ⟦ ⟧» X a)) (eqToHom (by dsimp <;> rw [add_zero])) :=\n  by\n  rw [← shift_functor_add'_add_zero_inv_app]\n  dsimp [shift_functor_add']\n  simp\n#align shift_functor_add_add_zero_inv_app shift_functor_add_add_zero_inv_app\n\n",
 "shift_functor_add_add_zero_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_functor_add_add_zero_hom_app (a : A) (X : C) :\n    (shiftFunctorAdd C a 0).hom.app X =\n      «expr ≫ » (eqToHom (by dsimp <;> rw [add_zero])) ((shiftFunctorZero C A).inv.app («expr ⟦ ⟧» X a)) :=\n  by\n  rw [← shift_functor_add'_add_zero_hom_app]\n  dsimp [shift_functor_add']\n  simp\n#align shift_functor_add_add_zero_hom_app shift_functor_add_add_zero_hom_app\n\n",
 "shift_functor_add'_zero_add_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_functor_add'_zero_add_inv_app (a : A) (X : C) :\n    (shiftFunctorAdd' C 0 a a (zero_add a)).inv.app X = «expr ⟦ ⟧'» ((shiftFunctorZero C A).hom.app X) a :=\n  by\n  have := nat_trans.congr_app (congr_arg iso.inv (shift_functor_add'_zero_add C a)) X\n  simp only [iso.trans_inv, iso_whisker_right_inv, iso.symm_inv, nat_trans.comp_app, whisker_right_app,\n    functor.left_unitor_hom_app] at this\n  dsimp at this\n  simpa only [category.comp_id] using this\n#align shift_functor_add'_zero_add_inv_app shift_functor_add'_zero_add_inv_app\n\n",
 "shift_functor_add'_zero_add_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\ntheorem shift_functor_add'_zero_add_hom_app (a : A) (X : C) :\n    (shiftFunctorAdd' C 0 a a (zero_add a)).hom.app X = «expr ⟦ ⟧'» ((shiftFunctorZero C A).inv.app X) a := by\n  simpa using nat_trans.congr_app (congr_arg iso.hom (shift_functor_add'_zero_add C a)) X\n#align shift_functor_add'_zero_add_hom_app shift_functor_add'_zero_add_hom_app\n\n",
 "shift_functor_add'_zero_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n-- Any better notational suggestions?\ntheorem shift_functor_add'_zero_add (a : A) :\n    shiftFunctorAdd' C 0 a a (zero_add a) =\n      «expr ≪≫ » (Functor.leftUnitor _).symm (isoWhiskerRight (shiftFunctorZero C A).symm (shiftFunctor C a)) :=\n  by\n  ext X\n  dsimp [shift_functor_add']\n  erw [obj_ε_app]\n  simpa [eq_to_hom_map]\n#align shift_functor_add'_zero_add shift_functor_add'_zero_add\n\n",
 "shift_functor_add'_eq_shift_functor_add":
 "theorem shift_functor_add'_eq_shift_functor_add (i j : A) :\n    shiftFunctorAdd' C i j (i + j) rfl = shiftFunctorAdd C i j :=\n  by\n  ext1\n  apply category.id_comp\n#align shift_functor_add'_eq_shift_functor_add shift_functor_add'_eq_shift_functor_add\n\n",
 "shift_functor_add'_assoc_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n@[reassoc.1]\ntheorem shift_functor_add'_assoc_inv_app (a₁ a₂ a₃ a₁₂ a₂₃ a₁₂₃ : A) (h₁₂ : a₁ + a₂ = a₁₂) (h₂₃ : a₂ + a₃ = a₂₃)\n    (h₁₂₃ : a₁ + a₂ + a₃ = a₁₂₃) (X : C) :\n    «expr ≫ » («expr ⟦ ⟧'» ((shiftFunctorAdd' C a₁ a₂ a₁₂ h₁₂).inv.app X) a₃)\n        ((shiftFunctorAdd' C a₁₂ a₃ a₁₂₃ (by rw [← h₁₂, h₁₂₃])).inv.app X) =\n      «expr ≫ » ((shiftFunctorAdd' C a₂ a₃ a₂₃ h₂₃).inv.app («expr ⟦ ⟧» X a₁))\n        ((shiftFunctorAdd' C a₁ a₂₃ a₁₂₃ (by rw [← h₂₃, ← add_assoc, h₁₂₃])).inv.app X) :=\n  by simpa using nat_trans.congr_app (congr_arg iso.inv (shift_functor_add'_assoc C _ _ _ _ _ _ h₁₂ h₂₃ h₁₂₃)) X\n#align shift_functor_add'_assoc_inv_app shift_functor_add'_assoc_inv_app\n\n",
 "shift_functor_add'_assoc_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n@[reassoc.1]\ntheorem shift_functor_add'_assoc_hom_app (a₁ a₂ a₃ a₁₂ a₂₃ a₁₂₃ : A) (h₁₂ : a₁ + a₂ = a₁₂) (h₂₃ : a₂ + a₃ = a₂₃)\n    (h₁₂₃ : a₁ + a₂ + a₃ = a₁₂₃) (X : C) :\n    «expr ≫ » ((shiftFunctorAdd' C a₁₂ a₃ a₁₂₃ (by rw [← h₁₂, h₁₂₃])).hom.app X)\n        («expr ⟦ ⟧'» ((shiftFunctorAdd' C a₁ a₂ a₁₂ h₁₂).hom.app X) a₃) =\n      «expr ≫ » ((shiftFunctorAdd' C a₁ a₂₃ a₁₂₃ (by rw [← h₂₃, ← add_assoc, h₁₂₃])).hom.app X)\n        ((shiftFunctorAdd' C a₂ a₃ a₂₃ h₂₃).hom.app («expr ⟦ ⟧» X a₁)) :=\n  by simpa using nat_trans.congr_app (congr_arg iso.hom (shift_functor_add'_assoc C _ _ _ _ _ _ h₁₂ h₂₃ h₁₂₃)) X\n#align shift_functor_add'_assoc_hom_app shift_functor_add'_assoc_hom_app\n\n",
 "shift_functor_add'_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\ntheorem shift_functor_add'_assoc (a₁ a₂ a₃ a₁₂ a₂₃ a₁₂₃ : A) (h₁₂ : a₁ + a₂ = a₁₂) (h₂₃ : a₂ + a₃ = a₂₃)\n    (h₁₂₃ : a₁ + a₂ + a₃ = a₁₂₃) :\n    «expr ≪≫ » (shiftFunctorAdd' C a₁₂ a₃ a₁₂₃ (by rw [← h₁₂, h₁₂₃]))\n        («expr ≪≫ » (isoWhiskerRight (shiftFunctorAdd' C a₁ a₂ a₁₂ h₁₂) _) (Functor.associator _ _ _)) =\n      «expr ≪≫ » (shiftFunctorAdd' C a₁ a₂₃ a₁₂₃ (by rw [← h₂₃, ← add_assoc, h₁₂₃]))\n        (isoWhiskerLeft _ (shiftFunctorAdd' C a₂ a₃ a₂₃ h₂₃)) :=\n  by\n  substs h₁₂ h₂₃ h₁₂₃\n  ext X\n  dsimp\n  simp only [shift_functor_add'_eq_shift_functor_add, category.comp_id]\n  dsimp [shift_functor_add', shift_functor_add, shift_functor]\n  simp [obj_μ_inv_app, eq_to_hom_map]\n#align shift_functor_add'_assoc shift_functor_add'_assoc\n\n",
 "shift_functor_add'_add_zero_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_functor_add'_add_zero_inv_app (a : A) (X : C) :\n    (shiftFunctorAdd' C a 0 a (add_zero a)).inv.app X = (shiftFunctorZero C A).hom.app («expr ⟦ ⟧» X a) :=\n  by\n  have := nat_trans.congr_app (congr_arg iso.inv (shift_functor_add'_add_zero C a)) X\n  simp only [iso.trans_inv, iso_whisker_left_inv, iso.symm_inv, nat_trans.comp_app, whisker_left_app,\n    functor.right_unitor_hom_app] at this\n  dsimp at this\n  simpa only [category.comp_id] using this\n#align shift_functor_add'_add_zero_inv_app shift_functor_add'_add_zero_inv_app\n\n",
 "shift_functor_add'_add_zero_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_functor_add'_add_zero_hom_app (a : A) (X : C) :\n    (shiftFunctorAdd' C a 0 a (add_zero a)).hom.app X = (shiftFunctorZero C A).inv.app («expr ⟦ ⟧» X a) := by\n  simpa using nat_trans.congr_app (congr_arg iso.hom (shift_functor_add'_add_zero C a)) X\n#align shift_functor_add'_add_zero_hom_app shift_functor_add'_add_zero_hom_app\n\n",
 "shift_functor_add'_add_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\ntheorem shift_functor_add'_add_zero (a : A) :\n    shiftFunctorAdd' C a 0 a (add_zero a) =\n      «expr ≪≫ » (Functor.rightUnitor _).symm (isoWhiskerLeft (shiftFunctor C a) (shiftFunctorZero C A).symm) :=\n  by\n  ext X\n  dsimp [shift_functor_add']\n  erw [ε_app_obj]\n  simpa [eq_to_hom_map]\n#align shift_functor_add'_add_zero shift_functor_add'_add_zero\n\n",
 "shift_equiv_triangle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧» -/\ntheorem shift_equiv_triangle (n : A) (X : C) :\n    «expr ≫ » («expr ⟦ ⟧'» (shiftShiftNeg X n).inv n) (shiftNegShift («expr ⟦ ⟧» X n) n).hom =\n      («expr𝟙») («expr ⟦ ⟧» X n) :=\n  (shiftEquiv C n).functor_unit_iso_comp X\n#align shift_equiv_triangle shift_equiv_triangle\n\n",
 "shift_comm_symm":
 "@[simp]\ntheorem shift_comm_symm (i j : A) : (shiftComm X i j).symm = shiftComm X j i :=\n  by\n  ext1\n  exact nat_trans.congr_app (congr_arg iso.hom (shift_functor_comm_symm C i j)) X\n#align shift_comm_symm shift_comm_symm\n\n",
 "shift_comm_hom_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n@[reassoc.1]\ntheorem shift_comm_hom_comp (i j : A) :\n    «expr ≫ » (shiftComm X i j).hom («expr ⟦ ⟧'» («expr ⟦ ⟧'» f j) i) =\n      «expr ≫ » («expr ⟦ ⟧'» («expr ⟦ ⟧'» f i) j) (shiftComm Y i j).hom :=\n  by rw [shift_comm', ← shift_comm_symm, iso.symm_hom, iso.inv_hom_id_assoc]\n#align shift_comm_hom_comp shift_comm_hom_comp\n\n",
 "shift_comm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/-- When shifts are indexed by an additive commutative monoid, then shifts commute. -/\ntheorem shift_comm' (i j : A) :\n    «expr ⟦ ⟧'» («expr ⟦ ⟧'» f i) j =\n      «expr ≫ » (shiftComm _ _ _).hom («expr ≫ » («expr ⟦ ⟧'» («expr ⟦ ⟧'» f j) i) (shiftComm _ _ _).hom) :=\n  by\n  erw [← shift_comm_symm Y i j, ← (shift_functor_comm C i j).hom.naturality_assoc f, iso.hom_inv_id_app,\n    category.comp_id]\n  rfl\n#align shift_comm' shift_comm'\n\n",
 "map_has_shift_of_fully_faithful_zero_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_has_shift_of_fully_faithful_zero_inv_app (X : C) :\n    F.map ((hasShiftOfFullyFaithful_zero F s i).inv.app X) =\n      «expr ≫ » ((shiftFunctorZero D A).inv.app (F.obj X)) ((i 0).inv.app X) :=\n  by\n  dsimp [has_shift_of_fully_faithful_zero]\n  simp\n#align map_has_shift_of_fully_faithful_zero_inv_app map_has_shift_of_fully_faithful_zero_inv_app\n\n",
 "map_has_shift_of_fully_faithful_zero_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_has_shift_of_fully_faithful_zero_hom_app (X : C) :\n    F.map ((hasShiftOfFullyFaithful_zero F s i).hom.app X) =\n      «expr ≫ » ((i 0).hom.app X) ((shiftFunctorZero D A).hom.app (F.obj X)) :=\n  by\n  dsimp [has_shift_of_fully_faithful_zero]\n  simp\n#align map_has_shift_of_fully_faithful_zero_hom_app map_has_shift_of_fully_faithful_zero_hom_app\n\n",
 "map_has_shift_of_fully_faithful_add_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_has_shift_of_fully_faithful_add_inv_app (a b : A) (X : C) :\n    F.map ((hasShiftOfFullyFaithful_add F s i a b).inv.app X) =\n      «expr ≫ » ((i b).hom.app ((s a).obj X))\n        («expr ≫ » («expr ⟦ ⟧'» ((i a).hom.app X) b)\n          («expr ≫ » ((shiftFunctorAdd D a b).inv.app (F.obj X)) ((i (a + b)).inv.app X))) :=\n  by\n  dsimp [has_shift_of_fully_faithful_add]\n  simp\n#align map_has_shift_of_fully_faithful_add_inv_app map_has_shift_of_fully_faithful_add_inv_app\n\n",
 "map_has_shift_of_fully_faithful_add_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟦ ⟧'» -/\n@[simp]\ntheorem map_has_shift_of_fully_faithful_add_hom_app (a b : A) (X : C) :\n    F.map ((hasShiftOfFullyFaithful_add F s i a b).hom.app X) =\n      «expr ≫ » ((i (a + b)).hom.app X)\n        («expr ≫ » ((shiftFunctorAdd D a b).hom.app (F.obj X))\n          («expr ≫ » («expr ⟦ ⟧'» ((i a).inv.app X) b) ((i b).inv.app ((s a).obj X)))) :=\n  by\n  dsimp [has_shift_of_fully_faithful_add]\n  simp\n#align map_has_shift_of_fully_faithful_add_hom_app map_has_shift_of_fully_faithful_add_hom_app\n\n",
 "assoc_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison, Johan Commelin, Andrew Yang, Joël Riou\n-/\n@[reassoc.1]\ntheorem assoc_inv_app (h : ShiftMkCore C A) (m₁ m₂ m₃ : A) (X : C) :\n    «expr ≫ » ((h.F m₃).map ((h.add m₁ m₂).inv.app X)) ((h.add (m₁ + m₂) m₃).inv.app X) =\n      «expr ≫ » ((h.add m₂ m₃).inv.app ((h.F m₁).obj X))\n        («expr ≫ » ((h.add m₁ (m₂ + m₃)).inv.app X) (eqToHom (by rw [add_assoc]))) :=\n  by\n  rw [← cancel_mono («expr ≫ » ((h.add (m₁ + m₂) m₃).hom.app X) ((h.F m₃).map ((h.add m₁ m₂).hom.app X))),\n    category.assoc, category.assoc, category.assoc, iso.inv_hom_id_app_assoc, ← functor.map_comp, iso.inv_hom_id_app,\n    Functor.map_id, h.assoc_hom_app, eq_to_hom_trans_assoc, eq_to_hom_refl, category.id_comp, iso.inv_hom_id_app_assoc,\n    iso.inv_hom_id_app]\n  rfl\n#align assoc_inv_app assoc_inv_app\n\n",
 "add_zero_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem add_zero_inv_app (h : ShiftMkCore C A) (n : A) (X : C) :\n    (h.add n 0).inv.app X = «expr ≫ » (h.zero.hom.app ((h.F n).obj X)) (eqToHom (by dsimp <;> rw [add_zero])) := by\n  rw [← cancel_epi ((h.add n 0).hom.app X), iso.hom_inv_id_app, h.add_zero_hom_app, category.assoc,\n    iso.inv_hom_id_app_assoc, eq_to_hom_trans, eq_to_hom_refl]\n#align add_zero_inv_app add_zero_inv_app\n\n"}