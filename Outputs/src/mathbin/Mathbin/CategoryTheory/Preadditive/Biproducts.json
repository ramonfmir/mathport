{"total":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊞ » -/\n/-- In any preadditive category, any binary biproduct satsifies\n`biprod.fst ≫ biprod.inl + biprod.snd ≫ biprod.inr = 𝟙 (X ⊞ Y)`.\n-/\n@[simp]\ntheorem biprod.total : «expr ≫ » biprod.fst biprod.inl + «expr ≫ » biprod.snd biprod.inr = («expr𝟙») («expr ⊞ » X Y) :=\n  by ext <;> simp [add_comp]\n#align biprod.total biprod.total\n\n",
 "snd_of_is_colimit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem snd_of_is_colimit {X Y : C} {t : BinaryBicone X Y} (ht : IsColimit t.to_cocone) :\n    t.snd = ht.desc (BinaryCofan.mk 0 ((«expr𝟙») Y)) :=\n  by\n  apply ht.uniq (binary_cofan.mk 0 ((«expr𝟙») Y))\n  rintro ⟨⟨⟩⟩ <;> dsimp <;> simp\n#align snd_of_is_colimit snd_of_is_colimit\n\n",
 "of_has_product":
 "/-- In a preadditive category, if the product over `f : J → C` exists,\n    then the biproduct over `f` exists. -/\ntheorem has_biproduct.of_has_product {J : Type} [Finite J] (f : J → C) [HasProduct f] : HasBiproduct f := by\n  cases nonempty_fintype J <;>\n    exact\n      has_biproduct.mk\n        { bicone := _\n          is_bilimit := bicone_is_bilimit_of_limit_cone_of_is_limit (limit.is_limit _) }\n#align has_biproduct.of_has_product has_biproduct.of_has_product\n\n",
 "of_has_finite_products":
 "/-- A preadditive category with finite products has finite biproducts. -/\ntheorem has_finite_biproducts.of_has_finite_products [HasFiniteProducts C] : HasFiniteBiproducts C :=\n  ⟨fun n => { has_biproduct := fun F => HasBiproduct.of_hasProduct _ }⟩\n#align has_finite_biproducts.of_has_finite_products has_finite_biproducts.of_has_finite_products\n\n",
 "of_has_finite_coproducts":
 "/-- A preadditive category with finite coproducts has finite biproducts. -/\ntheorem has_finite_biproducts.of_has_finite_coproducts [HasFiniteCoproducts C] : HasFiniteBiproducts C :=\n  ⟨fun n => { has_biproduct := fun F => HasBiproduct.of_hasCoproduct _ }⟩\n#align has_finite_biproducts.of_has_finite_coproducts has_finite_biproducts.of_has_finite_coproducts\n\n",
 "of_has_coproduct":
 "/-- In a preadditive category, if the coproduct over `f : J → C` exists,\n    then the biproduct over `f` exists. -/\ntheorem has_biproduct.of_has_coproduct {J : Type} [Finite J] (f : J → C) [HasCoproduct f] : HasBiproduct f := by\n  cases nonempty_fintype J <;>\n    exact\n      has_biproduct.mk\n        { bicone := _\n          is_bilimit := bicone_is_bilimit_of_colimit_cocone_of_is_colimit (colimit.is_colimit _) }\n#align has_biproduct.of_has_coproduct has_biproduct.of_has_coproduct\n\n",
 "of_has_binary_products":
 "/-- In a preadditive category, if all binary products exist, then all binary biproducts exist. -/\ntheorem has_binary_biproducts.of_has_binary_products [HasBinaryProducts C] : HasBinaryBiproducts C :=\n  { has_binary_biproduct := fun X Y => HasBinaryBiproduct.of_hasBinaryProduct X Y }\n#align has_binary_biproducts.of_has_binary_products has_binary_biproducts.of_has_binary_products\n\n",
 "of_has_binary_product":
 "/-- In a preadditive category, if the product of `X` and `Y` exists, then the\n    binary biproduct of `X` and `Y` exists. -/\ntheorem has_binary_biproduct.of_has_binary_product (X Y : C) [HasBinaryProduct X Y] : HasBinaryBiproduct X Y :=\n  HasBinaryBiproduct.mk\n    { bicone := _\n      is_bilimit := binaryBiconeIsBilimitOfLimitConeOfIsLimit (limit.isLimit _) }\n#align has_binary_biproduct.of_has_binary_product has_binary_biproduct.of_has_binary_product\n\n",
 "of_has_binary_coproducts":
 "/-- In a preadditive category, if all binary coproducts exist, then all binary biproducts exist. -/\ntheorem has_binary_biproducts.of_has_binary_coproducts [HasBinaryCoproducts C] : HasBinaryBiproducts C :=\n  { has_binary_biproduct := fun X Y => HasBinaryBiproduct.of_hasBinaryCoproduct X Y }\n#align has_binary_biproducts.of_has_binary_coproducts has_binary_biproducts.of_has_binary_coproducts\n\n",
 "of_has_binary_coproduct":
 "/-- In a preadditive category, if the coproduct of `X` and `Y` exists, then the\n    binary biproduct of `X` and `Y` exists. -/\ntheorem has_binary_biproduct.of_has_binary_coproduct (X Y : C) [HasBinaryCoproduct X Y] : HasBinaryBiproduct X Y :=\n  HasBinaryBiproduct.mk\n    { bicone := _\n      is_bilimit := binaryBiconeIsBilimitOfColimitCoconeOfIsColimit (colimit.isColimit _) }\n#align has_binary_biproduct.of_has_binary_coproduct has_binary_biproduct.of_has_binary_coproduct\n\n",
 "of_components_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem biprod.of_components_snd :\n    «expr ≫ » (Biprod.ofComponents f₁₁ f₁₂ f₂₁ f₂₂) biprod.snd = «expr ≫ » biprod.fst f₁₂ + «expr ≫ » biprod.snd f₂₂ :=\n  by simp [biprod.of_components]\n#align biprod.of_components_snd biprod.of_components_snd\n\n",
 "of_components_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem biprod.of_components_fst :\n    «expr ≫ » (Biprod.ofComponents f₁₁ f₁₂ f₂₁ f₂₂) biprod.fst = «expr ≫ » biprod.fst f₁₁ + «expr ≫ » biprod.snd f₂₁ :=\n  by simp [biprod.of_components]\n#align biprod.of_components_fst biprod.of_components_fst\n\n",
 "of_components_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊞ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊞ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem biprod.of_components_eq (f : «expr ⟶ » («expr ⊞ » X₁ X₂) («expr ⊞ » Y₁ Y₂)) :\n    Biprod.ofComponents («expr ≫ » biprod.inl («expr ≫ » f biprod.fst)) («expr ≫ » biprod.inl («expr ≫ » f biprod.snd))\n        («expr ≫ » biprod.inr («expr ≫ » f biprod.fst)) («expr ≫ » biprod.inr («expr ≫ » f biprod.snd)) =\n      f :=\n  by\n  ext <;>\n    simp only [category.comp_id, biprod.inr_fst, biprod.inr_snd, biprod.inl_snd, add_zero, zero_add,\n      biprod.inl_of_components, biprod.inr_of_components, eq_self_iff_true, category.assoc, comp_zero, biprod.inl_fst,\n      preadditive.add_comp]\n#align biprod.of_components_eq biprod.of_components_eq\n\n",
 "of_components_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem biprod.of_components_comp {X₁ X₂ Y₁ Y₂ Z₁ Z₂ : C} (f₁₁ : «expr ⟶ » X₁ Y₁) (f₁₂ : «expr ⟶ » X₁ Y₂)\n    (f₂₁ : «expr ⟶ » X₂ Y₁) (f₂₂ : «expr ⟶ » X₂ Y₂) (g₁₁ : «expr ⟶ » Y₁ Z₁) (g₁₂ : «expr ⟶ » Y₁ Z₂)\n    (g₂₁ : «expr ⟶ » Y₂ Z₁) (g₂₂ : «expr ⟶ » Y₂ Z₂) :\n    «expr ≫ » (Biprod.ofComponents f₁₁ f₁₂ f₂₁ f₂₂) (Biprod.ofComponents g₁₁ g₁₂ g₂₁ g₂₂) =\n      Biprod.ofComponents («expr ≫ » f₁₁ g₁₁ + «expr ≫ » f₁₂ g₂₁) («expr ≫ » f₁₁ g₁₂ + «expr ≫ » f₁₂ g₂₂)\n        («expr ≫ » f₂₁ g₁₁ + «expr ≫ » f₂₂ g₂₁) («expr ≫ » f₂₁ g₁₂ + «expr ≫ » f₂₂ g₂₂) :=\n  by\n  dsimp [biprod.of_components]\n  apply biprod.hom_ext <;> apply biprod.hom_ext' <;>\n    simp only [add_comp, comp_add, add_comp_assoc, add_zero, zero_add, biprod.inl_fst, biprod.inl_snd, biprod.inr_fst,\n      biprod.inr_snd, biprod.inl_fst_assoc, biprod.inl_snd_assoc, biprod.inr_fst_assoc, biprod.inr_snd_assoc, comp_zero,\n      zero_comp, category.comp_id, category.assoc]\n#align biprod.of_components_comp biprod.of_components_comp\n\n",
 "matrix_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem biproduct.matrix_map {K : Type} [Fintype K] [HasFiniteBiproducts C] {f : J → C} {g : K → C} {h : K → C}\n    (m : ∀ j k, «expr ⟶ » (f j) (g k)) (n : ∀ k, «expr ⟶ » (g k) (h k)) :\n    «expr ≫ » (biproduct.matrix m) (biproduct.map n) = biproduct.matrix fun j k => «expr ≫ » (m j k) (n k) :=\n  by\n  ext\n  simp\n#align biproduct.matrix_map biproduct.matrix_map\n\n",
 "matrix_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem biproduct.matrix_desc {K : Type} [Fintype K] [HasFiniteBiproducts C] {f : J → C} {g : K → C}\n    (m : ∀ j k, «expr ⟶ » (f j) (g k)) {P} (x : ∀ k, «expr ⟶ » (g k) P) :\n    «expr ≫ » (biproduct.matrix m) (biproduct.desc x) =\n      biproduct.desc fun j =>\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          («expr ≫ » (m j k) (x k)) :=\n  by\n  ext\n  simp\n#align biproduct.matrix_desc biproduct.matrix_desc\n\n",
 "map_matrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem biproduct.map_matrix {K : Type} [Fintype K] [HasFiniteBiproducts C] {f : J → C} {g : J → C} {h : K → C}\n    (m : ∀ k, «expr ⟶ » (f k) (g k)) (n : ∀ j k, «expr ⟶ » (g j) (h k)) :\n    «expr ≫ » (biproduct.map m) (biproduct.matrix n) = biproduct.matrix fun j k => «expr ≫ » (m j) (n j k) :=\n  by\n  ext\n  simp\n#align biproduct.map_matrix biproduct.map_matrix\n\n",
 "map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.map_eq [HasBinaryBiproducts C] {W X Y Z : C} {f : «expr ⟶ » W Y} {g : «expr ⟶ » X Z} :\n    biprod.map f g = «expr ≫ » biprod.fst («expr ≫ » f biprod.inl) + «expr ≫ » biprod.snd («expr ≫ » g biprod.inr) := by\n  apply biprod.hom_ext <;> apply biprod.hom_ext' <;> simp\n#align biprod.map_eq biprod.map_eq\n\n",
 "lift_matrix":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem biproduct.lift_matrix {K : Type} [Fintype K] [HasFiniteBiproducts C] {f : J → C} {g : K → C} {P}\n    (x : ∀ j, «expr ⟶ » P (f j)) (m : ∀ j k, «expr ⟶ » (f j) (g k)) :\n    «expr ≫ » (biproduct.lift x) (biproduct.matrix m) =\n      biproduct.lift fun k =>\n        finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          («expr ≫ » (x j) (m j k)) :=\n  by\n  ext\n  simp\n#align biproduct.lift_matrix biproduct.lift_matrix\n\n",
 "lift_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.lift_eq {T : C} {f : «expr ⟶ » T X} {g : «expr ⟶ » T Y} :\n    biprod.lift f g = «expr ≫ » f biprod.inl + «expr ≫ » g biprod.inr := by ext <;> simp [add_comp]\n#align biprod.lift_eq biprod.lift_eq\n\n",
 "lift_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem biprod.lift_desc {T U : C} {f : «expr ⟶ » T X} {g : «expr ⟶ » T Y} {h : «expr ⟶ » X U} {i : «expr ⟶ » Y U} :\n    «expr ≫ » (biprod.lift f g) (biprod.desc h i) = «expr ≫ » f h + «expr ≫ » g i := by\n  simp [biprod.lift_eq, biprod.desc_eq]\n#align biprod.lift_desc biprod.lift_desc\n\n",
 "inr_of_is_limit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem inr_of_is_limit {X Y : C} {t : BinaryBicone X Y} (ht : IsLimit t.to_cone) :\n    t.inr = ht.lift (BinaryFan.mk 0 ((«expr𝟙») Y)) := by\n  apply ht.uniq (binary_fan.mk 0 ((«expr𝟙») Y)) <;> rintro ⟨⟨⟩⟩ <;> dsimp <;> simp\n#align inr_of_is_limit inr_of_is_limit\n\n",
 "inr_of_components":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem biprod.inr_of_components :\n    «expr ≫ » biprod.inr (Biprod.ofComponents f₁₁ f₁₂ f₂₁ f₂₂) = «expr ≫ » f₂₁ biprod.inl + «expr ≫ » f₂₂ biprod.inr :=\n  by simp [biprod.of_components]\n#align biprod.inr_of_components biprod.inr_of_components\n\n",
 "inl_of_is_limit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem inl_of_is_limit {X Y : C} {t : BinaryBicone X Y} (ht : IsLimit t.to_cone) :\n    t.inl = ht.lift (BinaryFan.mk ((«expr𝟙») X) 0) := by\n  apply ht.uniq (binary_fan.mk ((«expr𝟙») X) 0) <;> rintro ⟨⟨⟩⟩ <;> dsimp <;> simp\n#align inl_of_is_limit inl_of_is_limit\n\n",
 "inl_of_components":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem biprod.inl_of_components :\n    «expr ≫ » biprod.inl (Biprod.ofComponents f₁₁ f₁₂ f₂₁ f₂₂) = «expr ≫ » f₁₁ biprod.inl + «expr ≫ » f₁₂ biprod.inr :=\n  by simp [biprod.of_components]\n#align biprod.inl_of_components biprod.inl_of_components\n\n",
 "has_biproduct_of_total":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- In a preadditive category, we can construct a biproduct for `f : J → C` from\nany bicone `b` for `f` satisfying `total : ∑ j : J, b.π j ≫ b.ι j = 𝟙 b.X`.\n\n(That is, such a bicone is a limit cone and a colimit cocone.)\n-/\ntheorem has_biproduct_of_total {f : J → C} (b : Bicone f)\n    (total :\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n          («expr ≫ » (b.π j) (b.ι j)) =\n        («expr𝟙») b.X) :\n    HasBiproduct f :=\n  HasBiproduct.mk\n    { bicone := b\n      is_bilimit := isBilimitOfTotal b total }\n#align has_biproduct_of_total has_biproduct_of_total\n\n",
 "has_binary_biproduct_of_total":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- In a preadditive category, we can construct a binary biproduct for `X Y : C` from\nany binary bicone `b` satisfying `total : b.fst ≫ b.inl + b.snd ≫ b.inr = 𝟙 b.X`.\n\n(That is, such a bicone is a limit cone and a colimit cocone.)\n-/\ntheorem has_binary_biproduct_of_total {X Y : C} (b : BinaryBicone X Y)\n    (total : «expr ≫ » b.fst b.inl + «expr ≫ » b.snd b.inr = («expr𝟙») b.X) : HasBinaryBiproduct X Y :=\n  HasBinaryBiproduct.mk\n    { bicone := b\n      is_bilimit := isBinaryBilimitOfTotal b total }\n#align has_binary_biproduct_of_total has_binary_biproduct_of_total\n\n",
 "fst_of_is_colimit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem fst_of_is_colimit {X Y : C} {t : BinaryBicone X Y} (ht : IsColimit t.to_cocone) :\n    t.fst = ht.desc (BinaryCofan.mk ((«expr𝟙») X) 0) :=\n  by\n  apply ht.uniq (binary_cofan.mk ((«expr𝟙») X) 0)\n  rintro ⟨⟨⟩⟩ <;> dsimp <;> simp\n#align fst_of_is_colimit fst_of_is_colimit\n\n",
 "desc_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.desc_eq {T : C} {f : «expr ⟶ » X T} {g : «expr ⟶ » Y T} :\n    biprod.desc f g = «expr ≫ » biprod.fst f + «expr ≫ » biprod.snd g := by ext <;> simp [add_comp]\n#align biprod.desc_eq biprod.desc_eq\n\n",
 "column_nonzero_of_iso'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨁ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨁ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem biproduct.column_nonzero_of_iso' {σ τ : Type} [Finite τ] {S : σ → C} [HasBiproduct S] {T : τ → C}\n    [HasBiproduct T] (s : σ) (f : «expr ⟶ » («expr⨁ » S) («expr⨁ » T)) [IsIso f] :\n    (∀ t : τ, «expr ≫ » (biproduct.ι S s) («expr ≫ » f (biproduct.π T t)) = 0) → («expr𝟙») (S s) = 0 :=\n  by\n  cases nonempty_fintype τ\n  intro z\n  set x := «expr ≫ » (biproduct.ι S s) («expr ≫ » f («expr ≫ » (inv f) (biproduct.π S s)))\n  have h₁ : x = («expr𝟙») (S s) := by simp [x]\n  have h₀ : x = 0 := by\n    dsimp [x]\n    rw [← category.id_comp (inv f), category.assoc, ← biproduct.total]\n    simp only [comp_sum_assoc]\n    conv_lhs =>\n      congr\n      apply_congr\n      skip\n      simp only [reassoc_of z]\n    simp\n  exact h₁.symm.trans h₀\n#align biproduct.column_nonzero_of_iso' biproduct.column_nonzero_of_iso'\n\n",
 "column_nonzero_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊞ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊞ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem biprod.column_nonzero_of_iso {W X Y Z : C} (f : «expr ⟶ » («expr ⊞ » W X) («expr ⊞ » Y Z)) [IsIso f] :\n    («expr𝟙») W = 0 ∨\n      «expr ≫ » biprod.inl («expr ≫ » f biprod.fst) ≠ 0 ∨ «expr ≫ » biprod.inl («expr ≫ » f biprod.snd) ≠ 0 :=\n  by\n  by_contra' h\n  rcases h with ⟨nz, a₁, a₂⟩\n  set x := «expr ≫ » biprod.inl («expr ≫ » f («expr ≫ » (inv f) biprod.fst))\n  have h₁ : x = («expr𝟙») W := by simp [x]\n  have h₀ : x = 0 := by\n    dsimp [x]\n    rw [← category.id_comp (inv f), category.assoc, ← biprod.total]\n    conv_lhs =>\n      slice 2 3\n      rw [comp_add]\n    simp only [category.assoc]\n    rw [comp_add_assoc, add_comp]\n    conv_lhs =>\n      congr\n      skip\n      slice 1 3\n      rw [a₂]\n    simp only [zero_comp, add_zero]\n    conv_lhs =>\n      slice 1 3\n      rw [a₁]\n    simp only [zero_comp]\n  exact nz (h₁.symm.trans h₀)\n#align biprod.column_nonzero_of_iso biprod.column_nonzero_of_iso\n\n",
 "binary_total":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem is_bilimit.binary_total {X Y : C} {b : BinaryBicone X Y} (i : b.is_bilimit) :\n    «expr ≫ » b.fst b.inl + «expr ≫ » b.snd b.inr = («expr𝟙») b.X :=\n  i.is_limit.hom_ext fun j => by rcases j with ⟨⟨⟩⟩ <;> simp\n#align is_bilimit.binary_total is_bilimit.binary_total\n\n",
 "add_eq_lift_id_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- The existence of binary biproducts implies that there is at most one preadditive structure. -/\ntheorem biprod.add_eq_lift_id_desc [HasBinaryBiproduct X X] :\n    f + g = «expr ≫ » (biprod.lift ((«expr𝟙») X) ((«expr𝟙») X)) (biprod.desc f g) := by simp\n#align biprod.add_eq_lift_id_desc biprod.add_eq_lift_id_desc\n\n",
 "add_eq_lift_desc_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- The existence of binary biproducts implies that there is at most one preadditive structure. -/\ntheorem biprod.add_eq_lift_desc_id [HasBinaryBiproduct Y Y] :\n    f + g = «expr ≫ » (biprod.lift f g) (biprod.desc ((«expr𝟙») Y) ((«expr𝟙») Y)) := by simp\n#align biprod.add_eq_lift_desc_id biprod.add_eq_lift_desc_id\n\n"}