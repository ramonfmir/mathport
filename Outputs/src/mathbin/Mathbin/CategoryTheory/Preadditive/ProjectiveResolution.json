{"π_f_succ":
 "/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n@[simp]\ntheorem π_f_succ {Z : C} (P : ProjectiveResolution Z) (n : ℕ) : P.π.f (n + 1) = 0 :=\n  by\n  apply zero_of_target_iso_zero\n  dsimp; rfl\n#align π_f_succ π_f_succ\n\n",
 "lift_f_one_zero_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Auxiliary lemma for `lift`. -/\n@[simp]\ntheorem lift_f_one_zero_comm {Y Z : C} (f : «expr ⟶ » Y Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :\n    «expr ≫ » (lift_f_one f P Q) (Q.complex.d 1 0) = «expr ≫ » (P.complex.d 1 0) (lift_f_zero f P Q) :=\n  by\n  dsimp [lift_f_zero, lift_f_one]\n  simp\n#align lift_f_one_zero_comm lift_f_one_zero_comm\n\n",
 "lift_commutes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- The resolution maps intertwine the lift of a morphism and that morphism. -/\n@[simp, reassoc.1]\ntheorem lift_commutes {Y Z : C} (f : «expr ⟶ » Y Z) (P : ProjectiveResolution Y) (Q : ProjectiveResolution Z) :\n    «expr ≫ » (lift f P Q) Q.π = «expr ≫ » P.π ((chain_complex.single₀ C).map f) :=\n  by\n  ext\n  dsimp [lift, lift_f_zero]\n  apply factor_thru_comp\n#align lift_commutes lift_commutes\n\n",
 "homotopy_equiv_inv_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem homotopy_equiv_inv_π {X : C} (P Q : ProjectiveResolution X) : «expr ≫ » (homotopy_equiv P Q).inv P.π = Q.π := by\n  simp [homotopy_equiv]\n#align homotopy_equiv_inv_π homotopy_equiv_inv_π\n\n",
 "homotopy_equiv_hom_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- Now that we've checked this property of the lift,\n-- we can seal away the actual definition.\n-- We don't care about the actual definitions of these homotopies.\n@[simp, reassoc.1]\ntheorem homotopy_equiv_hom_π {X : C} (P Q : ProjectiveResolution X) : «expr ≫ » (homotopy_equiv P Q).hom Q.π = P.π := by\n  simp [homotopy_equiv]\n#align homotopy_equiv_hom_π homotopy_equiv_hom_π\n\n",
 "complex_d_succ_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem complex_d_succ_comp {Z : C} (P : ProjectiveResolution Z) (n : ℕ) :\n    «expr ≫ » (P.complex.d (n + 2) (n + 1)) (P.complex.d (n + 1) n) = 0 :=\n  (P.exact _).w\n#align complex_d_succ_comp complex_d_succ_comp\n\n",
 "complex_d_comp_π_f_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem complex_d_comp_π_f_zero {Z : C} (P : ProjectiveResolution Z) : «expr ≫ » (P.complex.d 1 0) (P.π.f 0) = 0 :=\n  P.exact₀.w\n#align complex_d_comp_π_f_zero complex_d_comp_π_f_zero\n\n"}