{"of_right_exact_obj_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ᵣ » -/\n@[simp]\ntheorem AdditiveFunctor.of_right_exact_obj_fst (F : «expr ⥤ᵣ » C D) :\n    ((AdditiveFunctor.ofRightExact C D).obj F).obj = F.obj :=\n  rfl\n#align AdditiveFunctor.of_right_exact_obj_fst AdditiveFunctor.of_right_exact_obj_fst\n\n",
 "of_right_exact_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ᵣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem Additive_Functor.of_right_exact_map {F G : «expr ⥤ᵣ » C D} (α : «expr ⟶ » F G) :\n    (AdditiveFunctor.ofRightExact C D).map α = α :=\n  rfl\n#align Additive_Functor.of_right_exact_map Additive_Functor.of_right_exact_map\n\n",
 "of_left_exact_obj_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ₗ » -/\n@[simp]\ntheorem AdditiveFunctor.of_left_exact_obj_fst (F : «expr ⥤ₗ » C D) :\n    ((AdditiveFunctor.ofLeftExact C D).obj F).obj = F.obj :=\n  rfl\n#align AdditiveFunctor.of_left_exact_obj_fst AdditiveFunctor.of_left_exact_obj_fst\n\n",
 "of_left_exact_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ₗ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem Additive_Functor.of_left_exact_map {F G : «expr ⥤ₗ » C D} (α : «expr ⟶ » F G) :\n    (AdditiveFunctor.ofLeftExact C D).map α = α :=\n  rfl\n#align Additive_Functor.of_left_exact_map Additive_Functor.of_left_exact_map\n\n",
 "of_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n@[simp]\ntheorem AdditiveFunctor.of_fst (F : «expr ⥤ » C D) [F.additive] : (AdditiveFunctor.of F).1 = F :=\n  rfl\n#align AdditiveFunctor.of_fst AdditiveFunctor.of_fst\n\n",
 "of_exact_obj_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ₑ » -/\n@[simp]\ntheorem AdditiveFunctor.of_exact_obj_fst (F : «expr ⥤ₑ » C D) : ((AdditiveFunctor.ofExact C D).obj F).obj = F.obj :=\n  rfl\n#align AdditiveFunctor.of_exact_obj_fst AdditiveFunctor.of_exact_obj_fst\n\n",
 "of_exact_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ₑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem Additive_Functor.of_exact_map {F G : «expr ⥤ₑ » C D} (α : «expr ⟶ » F G) :\n    (AdditiveFunctor.ofExact C D).map α = α :=\n  rfl\n#align Additive_Functor.of_exact_map Additive_Functor.of_exact_map\n\n",
 "map_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print map_zsmul /-\n-- You can alternatively just use `functor.map_smul` here, with an explicit `(r : ℤ)` argument.\ntheorem map_zsmul {X Y : C} {f : «expr ⟶ » X Y} {r : ℤ} : F.map («expr • » r f) = «expr • » r (F.map f) :=\n  (F.map_add_hom : «expr →+ » («expr ⟶ » X Y) («expr ⟶ » (F.obj X) (F.obj Y))).map_zsmul _ _\n#align map_zsmul map_zsmul\n-/\n\n",
 "map_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print map_sum /-\n@[simp]\ntheorem map_sum {X Y : C} {α : Type _} (f : α → «expr ⟶ » X Y) (s : Finset α) :\n    F.map (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f a)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (F.map (f a)) :=\n  (F.map_add_hom : «expr →+ » («expr ⟶ » X Y) _).map_sum f s\n#align map_sum map_sum\n-/\n\n",
 "map_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print map_sub /-\n@[simp]\ntheorem map_sub {X Y : C} {f g : «expr ⟶ » X Y} : F.map (f - g) = F.map f - F.map g :=\n  (F.map_add_hom : «expr →+ » («expr ⟶ » X Y) («expr ⟶ » (F.obj X) (F.obj Y))).map_sub _ _\n#align map_sub map_sub\n-/\n\n",
 "map_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print map_nsmul /-\ntheorem map_nsmul {X Y : C} {f : «expr ⟶ » X Y} {n : ℕ} : F.map («expr • » n f) = «expr • » n (F.map f) :=\n  (F.map_add_hom : «expr →+ » («expr ⟶ » X Y) («expr ⟶ » (F.obj X) (F.obj Y))).map_nsmul _ _\n#align map_nsmul map_nsmul\n-/\n\n",
 "map_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print map_neg /-\n@[simp]\ntheorem map_neg {X Y : C} {f : «expr ⟶ » X Y} : F.map (-f) = -F.map f :=\n  (F.map_add_hom : «expr →+ » («expr ⟶ » X Y) («expr ⟶ » (F.obj X) (F.obj Y))).map_neg _\n#align map_neg map_neg\n-/\n\n",
 "map_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print map_add /-\n/-\nCopyright (c) 2021 Adam Topaz. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Adam Topaz, Scott Morrison\n-/\n@[simp]\ntheorem map_add {X Y : C} {f g : «expr ⟶ » X Y} : F.map (f + g) = F.map f + F.map g :=\n  functor.additive.map_add'\n#align map_add map_add\n-/\n\n",
 "forget_obj_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem AdditiveFunctor.forget_obj_of (F : «expr ⥤ » C D) [F.additive] :\n    (AdditiveFunctor.forget C D).obj (AdditiveFunctor.of F) = F :=\n  rfl\n#align AdditiveFunctor.forget_obj_of AdditiveFunctor.forget_obj_of\n\n",
 "forget_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤+ » -/\n@[simp]\ntheorem AdditiveFunctor.forget_obj (F : «expr ⥤+ » C D) : (AdditiveFunctor.forget C D).obj F = F.1 :=\n  rfl\n#align AdditiveFunctor.forget_obj AdditiveFunctor.forget_obj\n\n",
 "forget_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem AdditiveFunctor.forget_map (F G : «expr ⥤+ » C D) (α : «expr ⟶ » F G) :\n    (AdditiveFunctor.forget C D).map α = α :=\n  rfl\n#align AdditiveFunctor.forget_map AdditiveFunctor.forget_map\n\n",
 "coe_map_add_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem coe_map_add_hom {X Y : C} : «expr⇑ » (F.map_add_hom : «expr →+ » («expr ⟶ » X Y) _) = @map C _ D _ F X Y :=\n  rfl\n#align coe_map_add_hom coe_map_add_hom\n\n",
 "additive_of_preserves_binary_biproducts":
 "-- To talk about preservation of biproducts we need to specify universes explicitly.\ntheorem additive_of_preserves_binary_biproducts [HasBinaryBiproducts C] [PreservesZeroMorphisms F]\n    [PreservesBinaryBiproducts F] : Additive F :=\n  {\n    map_add' := fun X Y f g => by\n      rw [biprod.add_eq_lift_id_desc, F.map_comp, ← biprod.lift_map_biprod, ← biprod.map_biprod_hom_desc,\n        category.assoc, iso.inv_hom_id_assoc, F.map_id, biprod.add_eq_lift_id_desc] }\n#align additive_of_preserves_binary_biproducts additive_of_preserves_binary_biproducts\n\n"}