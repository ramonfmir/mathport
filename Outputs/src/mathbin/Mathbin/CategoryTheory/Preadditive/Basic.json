{"zsmul_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem zsmul_comp (n : ℤ) : «expr ≫ » («expr • » n f) g = «expr • » n («expr ≫ » f g) :=\n  map_zsmul (right_comp P g) n f\n#align zsmul_comp zsmul_comp\n\n",
 "sum_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem sum_comp {P Q R : C} {J : Type _} (s : Finset J) (f : J → «expr ⟶ » P Q) (g : «expr ⟶ » Q R) :\n    «expr ≫ » (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f j))\n        g =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr ≫ » (f j) g) :=\n  map_sum (right_comp P g) _ _\n#align sum_comp sum_comp\n\n",
 "sub_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel, Jakob von Raumer\n-/\n-- (the linter doesn't like `simp` on this lemma)\n@[simp, reassoc.1]\ntheorem sub_comp : «expr ≫ » (f - f') g = «expr ≫ » f g - «expr ≫ » f' g :=\n  map_sub (right_comp P g) f f'\n#align sub_comp sub_comp\n\n",
 "nsmul_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem nsmul_comp (n : ℕ) : «expr ≫ » («expr • » n f) g = «expr • » n («expr ≫ » f g) :=\n  map_nsmul (right_comp P g) n f\n#align nsmul_comp nsmul_comp\n\n",
 "neg_comp_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print neg_comp_neg /-\n@[reassoc.1]\ntheorem neg_comp_neg : «expr ≫ » (-f) (-g) = «expr ≫ » f g := by simp\n#align neg_comp_neg neg_comp_neg\n-/\n\n",
 "neg_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem neg_comp : «expr ≫ » (-f) g = -«expr ≫ » f g :=\n  map_neg (right_comp P g) f\n#align neg_comp neg_comp\n\n",
 "mono_of_kernel_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem mono_of_kernel_zero {X Y : C} {f : «expr ⟶ » X Y} [has_limit (parallel_pair f 0)] (w : kernel.ι f = 0) :\n    Mono f :=\n  mono_of_cancel_zero f fun P g h => by rw [← kernel.lift_ι f g h, w, limits.comp_zero]\n#align mono_of_kernel_zero mono_of_kernel_zero\n\n",
 "mono_of_kernel_iso_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem mono_of_kernel_iso_zero {X Y : C} {f : «expr ⟶ » X Y} [has_limit (parallel_pair f 0)]\n    (w : «expr ≅ » (kernel f) 0) : Mono f :=\n  mono_of_kernel_zero (zero_of_source_iso_zero _ w)\n#align mono_of_kernel_iso_zero mono_of_kernel_iso_zero\n\n",
 "mono_of_cancel_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem mono_of_cancel_zero {Q R : C} (f : «expr ⟶ » Q R)\n    (h : ∀ {P : C} (g : «expr ⟶ » P Q), «expr ≫ » g f = 0 → g = 0) : Mono f :=\n  ⟨fun P g g' hg => sub_eq_zero.1 <| h _ <| (map_sub (right_comp P f) g g').trans <| sub_eq_zero.2 hg⟩\n#align mono_of_cancel_zero mono_of_cancel_zero\n\n",
 "mono_iff_cancel_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem mono_iff_cancel_zero {Q R : C} (f : «expr ⟶ » Q R) :\n    Mono f ↔ ∀ (P : C) (g : «expr ⟶ » P Q), «expr ≫ » g f = 0 → g = 0 :=\n  ⟨fun m P g => zero_of_comp_mono _, mono_of_cancel_zero f⟩\n#align mono_iff_cancel_zero mono_iff_cancel_zero\n\n",
 "kernel_fork_of_fork_ι":
 "@[simp]\ntheorem kernel_fork_of_fork_ι (c : fork f g) : (kernel_fork_of_fork c).ι = c.ι :=\n  rfl\n#align kernel_fork_of_fork_ι kernel_fork_of_fork_ι\n\n",
 "kernel_fork_of_fork_of_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem kernel_fork_of_fork_of_ι {P : C} (ι : «expr ⟶ » P X) (w : «expr ≫ » ι f = «expr ≫ » ι g) :\n    kernel_fork_of_fork (fork.of_ι ι w) = kernel_fork.of_ι ι (by simp [w]) :=\n  rfl\n#align kernel_fork_of_fork_of_ι kernel_fork_of_fork_of_ι\n\n",
 "is_limit_fork_of_kernel_fork_lift":
 "@[simp]\ntheorem is_limit_fork_of_kernel_fork_lift {c : kernel_fork (f - g)} (i : is_limit c) (s : fork f g) :\n    (is_limit_fork_of_kernel_fork i).lift s = i.lift (kernel_fork_of_fork s) :=\n  rfl\n#align is_limit_fork_of_kernel_fork_lift is_limit_fork_of_kernel_fork_lift\n\n",
 "is_colimit_cofork_of_cokernel_cofork_desc":
 "@[simp]\ntheorem is_colimit_cofork_of_cokernel_cofork_desc {c : cokernel_cofork (f - g)} (i : is_colimit c) (s : cofork f g) :\n    (is_colimit_cofork_of_cokernel_cofork i).desc s = i.desc (cokernel_cofork_of_cofork s) :=\n  rfl\n#align is_colimit_cofork_of_cokernel_cofork_desc is_colimit_cofork_of_cokernel_cofork_desc\n\n",
 "has_kernel_of_has_equalizer":
 "/-- A preadditive category has a kernel for `f - g` if it has an equalizer for `f` and `g`. -/\ntheorem has_kernel_of_has_equalizer [has_equalizer f g] : has_kernel (f - g) :=\n  has_limit.mk\n    { cone := kernel_fork_of_fork (equalizer.fork f g)\n      is_limit := is_limit_kernel_fork_of_fork (limit.is_limit (parallel_pair f g)) }\n#align has_kernel_of_has_equalizer has_kernel_of_has_equalizer\n\n",
 "has_equalizers_of_has_kernels":
 "/-- If a preadditive category has all kernels, then it also has all equalizers. -/\ntheorem has_equalizers_of_has_kernels [has_kernels C] : has_equalizers C :=\n  @has_equalizers_of_has_limit_parallel_pair _ _ fun _ _ f g => has_equalizer_of_has_kernel f g\n#align has_equalizers_of_has_kernels has_equalizers_of_has_kernels\n\n",
 "has_equalizer_of_has_kernel":
 "/-- A preadditive category has an equalizer for `f` and `g` if it has a kernel for `f - g`. -/\ntheorem has_equalizer_of_has_kernel [has_kernel (f - g)] : has_equalizer f g :=\n  has_limit.mk\n    { cone := fork_of_kernel_fork _\n      is_limit := is_limit_fork_of_kernel_fork (equalizer_is_equalizer (f - g) 0) }\n#align has_equalizer_of_has_kernel has_equalizer_of_has_kernel\n\n",
 "has_cokernel_of_has_coequalizer":
 "/-- A preadditive category has a cokernel for `f - g` if it has a coequalizer for `f` and `g`. -/\ntheorem has_cokernel_of_has_coequalizer [has_coequalizer f g] : has_cokernel (f - g) :=\n  has_colimit.mk\n    { cocone := cokernel_cofork_of_cofork (coequalizer.cofork f g)\n      is_colimit := is_colimit_cokernel_cofork_of_cofork (colimit.is_colimit (parallel_pair f g)) }\n#align has_cokernel_of_has_coequalizer has_cokernel_of_has_coequalizer\n\n",
 "has_coequalizers_of_has_cokernels":
 "/-- If a preadditive category has all cokernels, then it also has all coequalizers. -/\ntheorem has_coequalizers_of_has_cokernels [has_cokernels C] : has_coequalizers C :=\n  @has_coequalizers_of_has_colimit_parallel_pair _ _ fun _ _ f g => has_coequalizer_of_has_cokernel f g\n#align has_coequalizers_of_has_cokernels has_coequalizers_of_has_cokernels\n\n",
 "has_coequalizer_of_has_cokernel":
 "/-- A preadditive category has a coequalizer for `f` and `g` if it has a cokernel for `f - g`. -/\ntheorem has_coequalizer_of_has_cokernel [has_cokernel (f - g)] : has_coequalizer f g :=\n  has_colimit.mk\n    { cocone := cofork_of_cokernel_cofork _\n      is_colimit := is_colimit_cofork_of_cokernel_cofork (coequalizer_is_coequalizer (f - g) 0) }\n#align has_coequalizer_of_has_cokernel has_coequalizer_of_has_cokernel\n\n",
 "fork_of_kernel_fork_ι":
 "@[simp]\ntheorem fork_of_kernel_fork_ι (c : kernel_fork (f - g)) : (fork_of_kernel_fork c).ι = c.ι :=\n  rfl\n#align fork_of_kernel_fork_ι fork_of_kernel_fork_ι\n\n",
 "epi_of_cokernel_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem epi_of_cokernel_zero {X Y : C} {f : «expr ⟶ » X Y} [has_colimit (parallel_pair f 0)] (w : cokernel.π f = 0) :\n    Epi f :=\n  epi_of_cancel_zero f fun P g h => by rw [← cokernel.π_desc f g h, w, limits.zero_comp]\n#align epi_of_cokernel_zero epi_of_cokernel_zero\n\n",
 "epi_of_cokernel_iso_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\ntheorem epi_of_cokernel_iso_zero {X Y : C} {f : «expr ⟶ » X Y} [has_colimit (parallel_pair f 0)]\n    (w : «expr ≅ » (cokernel f) 0) : Epi f :=\n  epi_of_cokernel_zero (zero_of_target_iso_zero _ w)\n#align epi_of_cokernel_iso_zero epi_of_cokernel_iso_zero\n\n",
 "epi_of_cancel_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem epi_of_cancel_zero {P Q : C} (f : «expr ⟶ » P Q)\n    (h : ∀ {R : C} (g : «expr ⟶ » Q R), «expr ≫ » f g = 0 → g = 0) : Epi f :=\n  ⟨fun R g g' hg => sub_eq_zero.1 <| h _ <| (map_sub (left_comp R f) g g').trans <| sub_eq_zero.2 hg⟩\n#align epi_of_cancel_zero epi_of_cancel_zero\n\n",
 "epi_iff_cancel_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem epi_iff_cancel_zero {P Q : C} (f : «expr ⟶ » P Q) :\n    Epi f ↔ ∀ (R : C) (g : «expr ⟶ » Q R), «expr ≫ » f g = 0 → g = 0 :=\n  ⟨fun e R g => zero_of_epi_comp _, epi_of_cancel_zero f⟩\n#align epi_iff_cancel_zero epi_iff_cancel_zero\n\n",
 "comp_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem comp_zsmul (n : ℤ) : «expr ≫ » f («expr • » n g) = «expr • » n («expr ≫ » f g) :=\n  map_zsmul (left_comp R f) n g\n#align comp_zsmul comp_zsmul\n\n",
 "comp_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem comp_sum {P Q R : C} {J : Type _} (s : Finset J) (f : «expr ⟶ » P Q) (g : J → «expr ⟶ » Q R) :\n    «expr ≫ » f\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (g j)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr ≫ » f (g j)) :=\n  map_sum (left_comp R f) _ _\n#align comp_sum comp_sum\n\n",
 "comp_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- The redundant simp lemma linter says that simp can prove the reassoc version of this lemma.\n@[reassoc.1, simp]\ntheorem comp_sub : «expr ≫ » f (g - g') = «expr ≫ » f g - «expr ≫ » f g' :=\n  map_sub (left_comp R f) g g'\n#align comp_sub comp_sub\n\n",
 "comp_right_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_right_eq_zero [IsIso g] : «expr ≫ » f g = 0 ↔ f = 0 := by rw [← is_iso.eq_comp_inv, limits.zero_comp]\n#align comp_right_eq_zero comp_right_eq_zero\n\n",
 "comp_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem comp_nsmul (n : ℕ) : «expr ≫ » f («expr • » n g) = «expr • » n («expr ≫ » f g) :=\n  map_nsmul (left_comp R f) n g\n#align comp_nsmul comp_nsmul\n\n",
 "comp_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- The redundant simp lemma linter says that simp can prove the reassoc version of this lemma.\n@[reassoc.1, simp]\ntheorem comp_neg : «expr ≫ » f (-g) = -«expr ≫ » f g :=\n  map_neg (left_comp R f) g\n#align comp_neg comp_neg\n\n",
 "comp_left_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_left_eq_zero [IsIso f] : «expr ≫ » f g = 0 ↔ g = 0 := by rw [← is_iso.eq_inv_comp, limits.comp_zero]\n#align comp_left_eq_zero comp_left_eq_zero\n\n",
 "cokernel_cofork_of_cofork_π":
 "@[simp]\ntheorem cokernel_cofork_of_cofork_π (c : cofork f g) : (cokernel_cofork_of_cofork c).π = c.π :=\n  rfl\n#align cokernel_cofork_of_cofork_π cokernel_cofork_of_cofork_π\n\n",
 "cokernel_cofork_of_cofork_of_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem cokernel_cofork_of_cofork_of_π {P : C} (π : «expr ⟶ » Y P) (w : «expr ≫ » f π = «expr ≫ » g π) :\n    cokernel_cofork_of_cofork (cofork.of_π π w) = cokernel_cofork.of_π π (by simp [w]) :=\n  rfl\n#align cokernel_cofork_of_cofork_of_π cokernel_cofork_of_cofork_of_π\n\n",
 "cofork_of_cokernel_cofork_π":
 "@[simp]\ntheorem cofork_of_cokernel_cofork_π (c : cokernel_cofork (f - g)) : (cofork_of_cokernel_cofork c).π = c.π :=\n  rfl\n#align cofork_of_cokernel_cofork_π cofork_of_cokernel_cofork_π\n\n"}