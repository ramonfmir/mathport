{"to_sheafify_is_locally_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n-- We need to sheafify\ntheorem to_sheafify_is_locally_surjective (F : «expr ⥤ » («expr ᵒᵖ» C) B) : is_locally_surjective J (J.to_sheafify F) :=\n  by\n  rw [is_locally_surjective_iff_whisker_forget, ← to_sheafify_comp_sheafify_comp_iso_inv]\n  apply is_locally_surjective.comp\n  · rw [is_locally_surjective_iff_image_presheaf_sheafify_eq_top, subpresheaf.eq_top_iff_is_iso]\n    exact is_iso.of_iso_inv (sheafification_iso_image_presheaf J («expr ⋙ » F (forget B)))\n  · exact is_locally_surjective_of_iso _ _\n#align to_sheafify_is_locally_surjective to_sheafify_is_locally_surjective\n\n",
 "is_locally_surjective_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_locally_surjective_of_surjective {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G)\n    (H : ∀ U, function.surjective (f.app U)) : is_locally_surjective J f :=\n  by\n  intro U s\n  obtain ⟨t, rfl⟩ := H _ s\n  rw [image_sieve_app]\n  exact J.top_mem _\n#align is_locally_surjective_of_surjective is_locally_surjective_of_surjective\n\n",
 "is_locally_surjective_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_locally_surjective_of_iso {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G) [IsIso f] :\n    is_locally_surjective J f := by\n  apply is_locally_surjective_of_surjective\n  intro U\n  apply Function.Bijective.surjective\n  rw [← is_iso_iff_bijective]\n  infer_instance\n#align is_locally_surjective_of_iso is_locally_surjective_of_iso\n\n",
 "is_locally_surjective_iff_whisker_forget":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_locally_surjective_iff_whisker_forget {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G) :\n    is_locally_surjective J f ↔ is_locally_surjective J (whiskerRight f (forget A)) := by\n  simpa only [is_locally_surjective_iff_image_presheaf_sheafify_eq_top]\n#align is_locally_surjective_iff_whisker_forget is_locally_surjective_iff_whisker_forget\n\n",
 "is_locally_surjective_iff_is_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_locally_surjective_iff_is_iso {F G : Sheaf J (Type w)} (f : «expr ⟶ » F G) :\n    is_locally_surjective J f.1 ↔ IsIso (image_sheaf_ι f) :=\n  by\n  rw [image_sheaf_ι, is_locally_surjective_iff_image_presheaf_sheafify_eq_top', subpresheaf.eq_top_iff_is_iso]\n  exact\n    ⟨fun h => @is_iso_of_reflects_iso _ _ (image_sheaf_ι f) (Sheaf_to_presheaf J _) h _, fun h =>\n      @functor.map_is_iso _ _ (Sheaf_to_presheaf J _) _ h⟩\n#align is_locally_surjective_iff_is_iso is_locally_surjective_iff_is_iso\n\n",
 "is_locally_surjective_iff_image_presheaf_sheafify_eq_top'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_locally_surjective_iff_image_presheaf_sheafify_eq_top' {F G : «expr ⥤ » («expr ᵒᵖ» C) (Type w)}\n    (f : «expr ⟶ » F G) : is_locally_surjective J f ↔ (image_presheaf f).sheafify J = «expr⊤» :=\n  by\n  simp only [subpresheaf.ext_iff, function.funext_iff, Set.ext_iff, top_subpresheaf_obj, Set.top_eq_univ, Set.mem_univ,\n    iff_true_iff]\n  exact ⟨fun H U => H (unop U), fun H U => H (op U)⟩\n#align\n  is_locally_surjective_iff_image_presheaf_sheafify_eq_top' is_locally_surjective_iff_image_presheaf_sheafify_eq_top'\n\n",
 "is_locally_surjective_iff_image_presheaf_sheafify_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_locally_surjective_iff_image_presheaf_sheafify_eq_top {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G) :\n    is_locally_surjective J f ↔ (image_presheaf (whiskerRight f (forget A))).sheafify J = «expr⊤» :=\n  by\n  simp only [subpresheaf.ext_iff, function.funext_iff, Set.ext_iff, top_subpresheaf_obj, Set.top_eq_univ, Set.mem_univ,\n    iff_true_iff]\n  exact ⟨fun H U => H (unop U), fun H U => H (op U)⟩\n#align is_locally_surjective_iff_image_presheaf_sheafify_eq_top is_locally_surjective_iff_image_presheaf_sheafify_eq_top\n\n",
 "image_sieve_whisker_forget":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem image_sieve_whisker_forget {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G) {U : C} (s : G.obj (op U)) :\n    image_sieve (whiskerRight f (forget A)) s = image_sieve f s :=\n  rfl\n#align image_sieve_whisker_forget image_sieve_whisker_forget\n\n",
 "image_sieve_eq_sieve_of_section":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem image_sieve_eq_sieve_of_section {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G) {U : C}\n    (s : G.obj (op U)) : image_sieve f s = (image_presheaf (whiskerRight f (forget A))).sieve_of_section s :=\n  rfl\n#align image_sieve_eq_sieve_of_section image_sieve_eq_sieve_of_section\n\n",
 "image_sieve_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem image_sieve_app {F G : «expr ⥤ » («expr ᵒᵖ» C) A} (f : «expr ⟶ » F G) {U : C} (s : F.obj (op U)) :\n    image_sieve f (f.app _ s) = «expr⊤» := by\n  ext (V i)\n  simp only [sieve.top_apply, iff_true_iff, image_sieve_apply]\n  have := elementwise_of (f.naturality i.op)\n  exact ⟨F.map i.op s, this s⟩\n#align image_sieve_app image_sieve_app\n\n",
 "comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem is_locally_surjective.comp {F₁ F₂ F₃ : «expr ⥤ » («expr ᵒᵖ» C) A} {f₁ : «expr ⟶ » F₁ F₂} {f₂ : «expr ⟶ » F₂ F₃}\n    (h₁ : is_locally_surjective J f₁) (h₂ : is_locally_surjective J f₂) : is_locally_surjective J («expr ≫ » f₁ f₂) :=\n  by\n  intro U s\n  have : (sieve.bind (image_sieve f₂ s) fun _ _ h => image_sieve f₁ h.some) ≤ image_sieve («expr ≫ » f₁ f₂) s :=\n    by\n    rintro V i ⟨W, i, j, H, ⟨t', ht'⟩, rfl⟩\n    refine' ⟨t', _⟩\n    rw [op_comp, F₃.map_comp, nat_trans.comp_app, comp_apply, comp_apply, ht', elementwise_of f₂.naturality,\n      H.some_spec]\n  apply J.superset_covering this\n  apply J.bind_covering\n  · apply h₂\n  · intros\n    apply h₁\n#align is_locally_surjective.comp is_locally_surjective.comp\n\n"}