{"multicospan_comp_hom_inv_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n@[simp]\ntheorem multicospan_comp_hom_inv_right (P : «expr ⥤ » («expr ᵒᵖ» C) A) {X : C} (S : J.cover X) (b) :\n    (S.multicospan_comp F P).inv.app (walking_multicospan.right b) = eqToHom rfl :=\n  rfl\n#align multicospan_comp_hom_inv_right multicospan_comp_hom_inv_right\n\n",
 "multicospan_comp_hom_inv_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n@[simp]\ntheorem multicospan_comp_hom_inv_left (P : «expr ⥤ » («expr ᵒᵖ» C) A) {X : C} (S : J.cover X) (a) :\n    (S.multicospan_comp F P).inv.app (walking_multicospan.left a) = eqToHom rfl :=\n  rfl\n#align multicospan_comp_hom_inv_left multicospan_comp_hom_inv_left\n\n",
 "multicospan_comp_hom_app_right":
 "@[simp]\ntheorem multicospan_comp_hom_app_right (b) :\n    (S.multicospan_comp F P).hom.app (walking_multicospan.right b) = eqToHom rfl :=\n  rfl\n#align multicospan_comp_hom_app_right multicospan_comp_hom_app_right\n\n",
 "multicospan_comp_hom_app_left":
 "@[simp]\ntheorem multicospan_comp_hom_app_left (a) :\n    (S.multicospan_comp F P).hom.app (walking_multicospan.left a) = eqToHom rfl :=\n  rfl\n#align multicospan_comp_hom_app_left multicospan_comp_hom_app_left\n\n",
 "multicospan_comp_app_right":
 "@[simp]\ntheorem multicospan_comp_app_right (b) : (S.multicospan_comp F P).app (walking_multicospan.right b) = eqToIso rfl :=\n  rfl\n#align multicospan_comp_app_right multicospan_comp_app_right\n\n",
 "multicospan_comp_app_left":
 "/-\nCopyright (c) 2021 Adam Topaz. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Adam Topaz\n-/\n@[simp]\ntheorem multicospan_comp_app_left (a) : (S.multicospan_comp F P).app (walking_multicospan.left a) = eqToIso rfl :=\n  rfl\n#align multicospan_comp_app_left multicospan_comp_app_left\n\n",
 "comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem presheaf.is_sheaf.comp {P : «expr ⥤ » («expr ᵒᵖ» C) A} (hP : Presheaf.IsSheaf J P) :\n    Presheaf.IsSheaf J («expr ⋙ » P F) :=\n  by\n  rw [presheaf.is_sheaf_iff_multifork] at hP⊢\n  intro X S\n  obtain ⟨h⟩ := hP X S\n  replace h := is_limit_of_preserves F h\n  replace h := limits.is_limit.of_iso_limit h (S.map_multifork F P)\n  exact ⟨limits.is_limit.postcompose_hom_equiv (S.multicospan_comp F P) _ h⟩\n#align presheaf.is_sheaf.comp presheaf.is_sheaf.comp\n\n"}