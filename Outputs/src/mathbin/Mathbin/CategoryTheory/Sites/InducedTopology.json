{"pushforward_cover_iff_cover_pullback":
 "/-\nCopyright (c) 2021 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\n-- variables (A) [full G] [faithful G]\ntheorem pushforward_cover_iff_cover_pullback {X : C} (S : sieve X) :\n    K _ (S.functor_pushforward G) ‚Üî ‚àÉ T : K (G.obj X), T.val.functor_pullback G = S :=\n  by\n  constructor\n  ¬∑ intro hS\n    exact ‚ü®‚ü®_, hS‚ü©, (sieve.fully_faithful_functor_galois_coinsertion G X).u_l_eq S‚ü©\n  ¬∑ rintro ‚ü®T, rfl‚ü©\n    exact Hld T\n#align pushforward_cover_iff_cover_pullback pushforward_cover_iff_cover_pullback\n\n",
 "over_forget_locally_cover_dense":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprùüô¬ª -/\ntheorem over_forget_locally_cover_dense (X : C) : locally_cover_dense J (over.forget X) :=\n  by\n  intro Y T\n  convert T.property\n  ext (Z f)\n  constructor\n  ¬∑ rintro ‚ü®_, _, g', hg, rfl‚ü©\n    exact T.val.downward_closed hg g'\n  ¬∑ intro hf\n    exact ‚ü®over.mk (¬´expr ‚â´ ¬ª f Y.hom), over.hom_mk f, (¬´exprùüô¬ª) _, hf, (category.id_comp _).symm‚ü©\n#align over_forget_locally_cover_dense over_forget_locally_cover_dense\n\n",
 "locally_cover_dense":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\ntheorem cover_dense.locally_cover_dense [Full G] (H : cover_dense K G) : locally_cover_dense K G :=\n  by\n  intro X T\n  refine' K.superset_covering _ (K.bind_covering T.property fun Y f Hf => H.is_cover Y)\n  rintro Y _ ‚ü®Z, _, f, hf, ‚ü®W, g, f', rfl : _ = _‚ü©, rfl‚ü©\n  use W; use G.preimage (¬´expr ‚â´ ¬ª f' f); use g\n  constructor\n  simpa using T.val.downward_closed hf f'\n  simp\n#align cover_dense.locally_cover_dense cover_dense.locally_cover_dense\n\n",
 "induced_topology_cover_preserving":
 "/-- `G` is cover-preserving wrt the induced topology. -/\ntheorem induced_topology_cover_preserving : cover_preserving Hld.induced_topology K G :=\n  ‚ü®fun _ S hS => hS‚ü©\n#align induced_topology_cover_preserving induced_topology_cover_preserving\n\n",
 "induced_topology_cover_lifting":
 "/-- `G` is cover-lifting wrt the induced topology. -/\ntheorem induced_topology_cover_lifting : cover_lifting Hld.induced_topology K G :=\n  ‚ü®fun _ S hS => Hld ‚ü®S, hS‚ü©‚ü©\n#align induced_topology_cover_lifting induced_topology_cover_lifting\n\n"}