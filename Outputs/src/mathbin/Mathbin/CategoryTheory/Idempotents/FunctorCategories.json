{"to_karoubi_comp_karoubi_functor_category_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- We construct the direct factor `Y` associated to `p : F ⟶ F` by computing\n    the equalizer of the identity and `p.app j` on each object `(j : J)`.  -/\n/-- The composition of `(J ⥤ C) ⥤ karoubi (J ⥤ C)` and `karoubi (J ⥤ C) ⥤ (J ⥤ karoubi C)`\nequals the functor `(J ⥤ C) ⥤ (J ⥤ karoubi C)` given by the composition with\n`to_karoubi C : C ⥤ karoubi C`. -/\ntheorem to_karoubi_comp_karoubi_functor_category_embedding :\n    «expr ⋙ » (toKaroubi _) (karoubiFunctorCategoryEmbedding J C) = (whiskeringRight J _ _).obj (toKaroubi C) :=\n  by\n  apply Functor.ext\n  · intro X Y f\n    ext j\n    dsimp [to_karoubi]\n    simp only [eq_to_hom_app, eq_to_hom_refl, id_comp]\n    erw [comp_id]\n  · intro X\n    apply Functor.ext\n    · intro j j' φ\n      ext\n      dsimp\n      simpa only [comp_id, id_comp]\n    · intro j\n      rfl\n#align to_karoubi_comp_karoubi_functor_category_embedding to_karoubi_comp_karoubi_functor_category_embedding\n\n",
 "app_p_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem app_p_comp : «expr ≫ » (P.p.app X) (f.f.app X) = f.f.app X :=\n  congr_app (p_comp f) X\n#align app_p_comp app_p_comp\n\n",
 "app_p_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem app_p_comm : «expr ≫ » (P.p.app X) (f.f.app X) = «expr ≫ » (f.f.app X) (Q.p.app X) :=\n  congr_app (p_comm f) X\n#align app_p_comm app_p_comm\n\n",
 "app_idem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2022 Joël Riou. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joël Riou\n-/\n@[simp, reassoc.1]\ntheorem app_idem : «expr ≫ » (P.p.app X) (P.p.app X) = P.p.app X :=\n  congr_app P.idem X\n#align app_idem app_idem\n\n",
 "app_comp_p":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem app_comp_p : «expr ≫ » (f.f.app X) (Q.p.app X) = f.f.app X :=\n  congr_app (comp_p f) X\n#align app_comp_p app_comp_p\n\n"}