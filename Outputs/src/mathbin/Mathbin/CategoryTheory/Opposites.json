{"unop_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n@[simp]\ntheorem unop_op {X Y : «expr ᵒᵖ» C} (f : «expr ≅ » X Y) : f.unop.op = f := by ext <;> rfl\n#align unop_op unop_op\n\n",
 "unop_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem unop_inv {X Y : «expr ᵒᵖ» C} (f : «expr ⟶ » X Y) [IsIso f] : (inv f).unop = inv f.unop :=\n  by\n  ext\n  rw [← unop_comp, is_iso.inv_hom_id, unop_id]\n#align unop_inv unop_inv\n\n",
 "unop_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print Quiver.Hom.unop_inj /-\ntheorem Quiver.Hom.unop_inj {X Y : «expr ᵒᵖ» C} :\n    function.injective (Quiver.Hom.unop : «expr ⟶ » X Y → «expr ⟶ » (unop Y) (unop X)) := fun _ _ H =>\n  congr_arg Quiver.Hom.op H\n#align quiver.hom.unop_inj Quiver.Hom.unop_inj\n-/\n\n",
 "unop_id_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem unop_id_op {X : C} : ((«expr𝟙») (op X)).unop = («expr𝟙») X :=\n  rfl\n#align unop_id_op unop_id_op\n\n",
 "unop_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem unop_id (F : «expr ⥤ » («expr ᵒᵖ» C) («expr ᵒᵖ» D)) : NatTrans.unop ((«expr𝟙») F) = («expr𝟙») F.unop :=\n  rfl\n#align unop_id unop_id\n\n",
 "unop_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem unop_comp {X Y Z : «expr ᵒᵖ» C} {f : «expr ⟶ » X Y} {g : «expr ⟶ » Y Z} :\n    («expr ≫ » f g).unop = «expr ≫ » g.unop f.unop :=\n  rfl\n#align unop_comp unop_comp\n\n",
 "right_op_left_op_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/-- Whenever possible, it is advisable to use the isomorphism `right_op_left_op_iso`\ninstead of this equality of functors. -/\ntheorem right_op_left_op_eq (F : «expr ⥤ » («expr ᵒᵖ» C) D) : F.right_op.left_op = F :=\n  by\n  cases F\n  rfl\n#align right_op_left_op_eq right_op_left_op_eq\n\n",
 "right_op_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem right_op_id : ((«expr𝟙») F : «expr ⟶ » F F).right_op = («expr𝟙») F.right_op :=\n  rfl\n#align right_op_id right_op_id\n\n",
 "right_op_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem right_op_comp (α : «expr ⟶ » F G) (β : «expr ⟶ » G H) :\n    («expr ≫ » α β).right_op = «expr ≫ » β.right_op α.right_op :=\n  rfl\n#align right_op_comp right_op_comp\n\n",
 "remove_unop_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem remove_unop_id (F : «expr ⥤ » («expr ᵒᵖ» C) («expr ᵒᵖ» D)) :\n    NatTrans.removeUnop ((«expr𝟙») F.unop) = («expr𝟙») F :=\n  rfl\n#align remove_unop_id remove_unop_id\n\n",
 "remove_right_op_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem remove_right_op_id : NatTrans.removeRightOp ((«expr𝟙») F.right_op) = («expr𝟙») F :=\n  rfl\n#align remove_right_op_id remove_right_op_id\n\n",
 "remove_op_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem remove_op_id (F : «expr ⥤ » C D) : NatTrans.removeOp ((«expr𝟙») F.op) = («expr𝟙») F :=\n  rfl\n#align remove_op_id remove_op_id\n\n",
 "remove_left_op_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem remove_left_op_id : NatTrans.removeLeftOp ((«expr𝟙») F.left_op) = («expr𝟙») F :=\n  rfl\n#align remove_left_op_id remove_left_op_id\n\n",
 "op_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n@[simp]\ntheorem op_unop {X Y : C} (f : «expr ≅ » X Y) : f.op.unop = f := by ext <;> rfl\n#align op_unop op_unop\n\n",
 "op_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem op_inv {X Y : C} (f : «expr ⟶ » X Y) [IsIso f] : (inv f).op = inv f.op :=\n  by\n  ext\n  rw [← op_comp, is_iso.inv_hom_id, op_id]\n#align op_inv op_inv\n\n",
 "op_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print Quiver.Hom.op_inj /-\n/-\nCopyright (c) 2017 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Stephen Morgan, Scott Morrison\n-/\n-- morphism levels before object levels. See note [category_theory universes].\ntheorem Quiver.Hom.op_inj {X Y : C} : function.injective (Quiver.Hom.op : «expr ⟶ » X Y → «expr ⟶ » (op Y) (op X)) :=\n  fun _ _ H => congr_arg Quiver.Hom.unop H\n#align quiver.hom.op_inj Quiver.Hom.op_inj\n-/\n\n",
 "op_id_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem op_id_unop {X : «expr ᵒᵖ» C} : ((«expr𝟙») (unop X)).op = («expr𝟙») X :=\n  rfl\n#align op_id_unop op_id_unop\n\n",
 "op_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem op_id (F : «expr ⥤ » C D) : NatTrans.op ((«expr𝟙») F) = («expr𝟙») F.op :=\n  rfl\n#align op_id op_id\n\n",
 "op_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem op_comp {X Y Z : C} {f : «expr ⟶ » X Y} {g : «expr ⟶ » Y Z} : («expr ≫ » f g).op = «expr ≫ » g.op f.op :=\n  rfl\n#align op_comp op_comp\n\n",
 "left_op_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem left_op_id : ((«expr𝟙») F : «expr ⟶ » F F).left_op = («expr𝟙») F.left_op :=\n  rfl\n#align left_op_id left_op_id\n\n",
 "left_op_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem left_op_comp (α : «expr ⟶ » F G) (β : «expr ⟶ » G H) :\n    («expr ≫ » α β).left_op = «expr ≫ » β.left_op α.left_op :=\n  rfl\n#align left_op_comp left_op_comp\n\n",
 "is_iso_unop_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_iso_unop_iff {X Y : «expr ᵒᵖ» C} (f : «expr ⟶ » X Y) : IsIso f.unop ↔ IsIso f := by\n  rw [← is_iso_op_iff f.unop, Quiver.Hom.op_unop]\n#align is_iso_unop_iff is_iso_unop_iff\n\n",
 "is_iso_op_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_iso_op_iff {X Y : C} (f : «expr ⟶ » X Y) : IsIso f.op ↔ IsIso f :=\n  ⟨fun hf => is_iso_of_op _, fun hf => inferInstance⟩\n#align is_iso_op_iff is_iso_op_iff\n\n",
 "is_iso_of_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `f.op` is an isomorphism `f` must be too.\n(This cannot be an instance as it would immediately loop!)\n-/\ntheorem is_iso_of_op {X Y : C} (f : «expr ⟶ » X Y) [IsIso f.op] : IsIso f :=\n  ⟨⟨(inv f.op).unop, ⟨Quiver.Hom.op_inj (by simp), Quiver.Hom.op_inj (by simp)⟩⟩⟩\n#align is_iso_of_op is_iso_of_op\n\n"}