{"id_fiber'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n-- We need to turn `F.map_id` (which is an equation between functors)\n-- into a natural isomorphism.\n@[simp]\ntheorem id_fiber' (X : grothendieck F) :\n    hom.fiber ((«expr𝟙») X) = eq_to_hom (by erw [category_theory.functor.map_id, functor.id_obj X.fiber]) :=\n  id_fiber X\n#align id_fiber' id_fiber'\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n@[ext]\ntheorem ext {X Y : grothendieck F} (f g : hom X Y) (w_base : f.base = g.base)\n    (w_fiber : «expr ≫ » (eq_to_hom (by rw [w_base])) f.fiber = g.fiber) : f = g :=\n  by\n  cases f <;> cases g\n  congr\n  dsimp at w_base\n  induction w_base\n  rfl\n  dsimp at w_base\n  induction w_base\n  simpa using w_fiber\n#align ext ext\n\n",
 "congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print congr /-\ntheorem congr {X Y : grothendieck F} {f g : «expr ⟶ » X Y} (h : f = g) :\n    f.fiber = «expr ≫ » (eq_to_hom (by subst h)) g.fiber :=\n  by\n  subst h\n  dsimp\n  simp\n#align congr congr\n-/\n\n"}