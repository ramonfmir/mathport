{"w":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem w {A B : Under X} (f : «expr ⟶ » A B) : «expr ≫ » A.hom f.right = B.hom := by have := f.w <;> tidy\n#align w w\n\n",
 "under_left":
 "@[simp]\ntheorem under_left (U : Under X) : U.left = ⟨⟨⟩⟩ := by tidy\n#align under_left under_left\n\n",
 "over_right":
 "@[simp]\ntheorem over_right (U : Over X) : U.right = ⟨⟨⟩⟩ := by tidy\n#align over_right over_right\n\n",
 "mono_of_mono_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- TODO: Show the converse holds if `T` has binary coproducts.\n/-- If `k.right` is a monomorphism, then `k` is a monomorphism. In other words, `under.forget X`\nreflects epimorphisms.\nThe converse does not hold without additional assumptions on the underlying category, see\n`category_theory.under.mono_right_of_mono`.\n-/\ntheorem mono_of_mono_right {f g : Under X} (k : «expr ⟶ » f g) [hk : Mono k.right] : Mono k :=\n  (forget X).mono_of_mono_map hk\n#align mono_of_mono_right mono_of_mono_right\n\n",
 "mono_of_mono_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `k.left` is a monomorphism, then `k` is a monomorphism. In other words, `over.forget X` reflects\nmonomorphisms.\nThe converse of `category_theory.over.mono_left_of_mono`.\n\nThis lemma is not an instance, to avoid loops in type class inference.\n-/\ntheorem mono_of_mono_left {f g : Over X} (k : «expr ⟶ » f g) [hk : Mono k.left] : Mono k :=\n  (forget X).mono_of_mono_map hk\n#align mono_of_mono_left mono_of_mono_left\n\n",
 "map_obj_right":
 "@[simp]\ntheorem map_obj_right : ((map f).obj U).right = U.right :=\n  rfl\n#align map_obj_right map_obj_right\n\n",
 "map_obj_left":
 "@[simp]\ntheorem map_obj_left : ((map f).obj U).left = U.left :=\n  rfl\n#align map_obj_left map_obj_left\n\n",
 "map_obj_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_obj_hom : ((map f).obj U).hom = «expr ≫ » f U.hom :=\n  rfl\n#align map_obj_hom map_obj_hom\n\n",
 "map_map_right":
 "@[simp]\ntheorem map_map_right : ((map f).map g).right = g.right :=\n  rfl\n#align map_map_right map_map_right\n\n",
 "map_map_left":
 "@[simp]\ntheorem map_map_left : ((map f).map g).left = g.left :=\n  rfl\n#align map_map_left map_map_left\n\n",
 "iterated_slice_forward_forget":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem iterated_slice_forward_forget :\n    «expr ⋙ » (iteratedSliceForward f) (forget f.left) = «expr ⋙ » (forget f) (forget X) :=\n  rfl\n#align iterated_slice_forward_forget iterated_slice_forward_forget\n\n",
 "iterated_slice_backward_forget_forget":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem iterated_slice_backward_forget_forget :\n    «expr ⋙ » (iteratedSliceBackward f) («expr ⋙ » (forget f) (forget X)) = forget f.left :=\n  rfl\n#align iterated_slice_backward_forget_forget iterated_slice_backward_forget_forget\n\n",
 "iso_mk_inv_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem iso_mk_inv_right {f g : Under X} (hr : «expr ≅ » f.right g.right) (hw : «expr ≫ » f.hom hr.hom = g.hom) :\n    (isoMk hr hw).inv.right = hr.inv :=\n  rfl\n#align iso_mk_inv_right iso_mk_inv_right\n\n",
 "iso_mk_hom_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem iso_mk_hom_right {f g : Under X} (hr : «expr ≅ » f.right g.right) (hw : «expr ≫ » f.hom hr.hom = g.hom) :\n    (isoMk hr hw).hom.right = hr.hom :=\n  rfl\n#align iso_mk_hom_right iso_mk_hom_right\n\n",
 "id_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem id_right (U : Under X) : comma_morphism.right ((«expr𝟙») U) = («expr𝟙») U.right :=\n  rfl\n#align id_right id_right\n\n",
 "id_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem id_left (U : Over X) : comma_morphism.left ((«expr𝟙») U) = («expr𝟙») U.left :=\n  rfl\n#align id_left id_left\n\n",
 "forget_obj":
 "@[simp]\ntheorem forget_obj {U : Under X} : (forget X).obj U = U.right :=\n  rfl\n#align forget_obj forget_obj\n\n",
 "forget_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem forget_map {U V : Under X} {f : «expr ⟶ » U V} : (forget X).map f = f.right :=\n  rfl\n#align forget_map forget_map\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- Satisfying the inhabited linter\n@[ext]\ntheorem under_morphism.ext {X : T} {U V : Under X} {f g : «expr ⟶ » U V} (h : f.right = g.right) : f = g := by tidy\n#align under_morphism.ext under_morphism.ext\n\n",
 "epi_of_epi_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `k.right` is a epimorphism, then `k` is a epimorphism. In other words, `under.forget X` reflects\nepimorphisms.\nThe converse of `category_theory.under.epi_right_of_epi`.\n\nThis lemma is not an instance, to avoid loops in type class inference.\n-/\ntheorem epi_of_epi_right {f g : Under X} (k : «expr ⟶ » f g) [hk : Epi k.right] : Epi k :=\n  (forget X).epi_of_epi_map hk\n#align epi_of_epi_right epi_of_epi_right\n\n",
 "epi_of_epi_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- TODO: Show the converse holds if `T` has binary products.\n/-- If `k.left` is an epimorphism, then `k` is an epimorphism. In other words, `over.forget X` reflects\nepimorphisms.\nThe converse does not hold without additional assumptions on the underlying category, see\n`category_theory.over.epi_left_of_epi`.\n-/\ntheorem epi_of_epi_left {f g : Over X} (k : «expr ⟶ » f g) [hk : Epi k.left] : Epi k :=\n  (forget X).epi_of_epi_map hk\n#align epi_of_epi_left epi_of_epi_left\n\n",
 "comp_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_right (a b c : Under X) (f : «expr ⟶ » a b) (g : «expr ⟶ » b c) :\n    («expr ≫ » f g).right = «expr ≫ » f.right g.right :=\n  rfl\n#align comp_right comp_right\n\n",
 "comp_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_left (a b c : Over X) (f : «expr ⟶ » a b) (g : «expr ⟶ » b c) :\n    («expr ≫ » f g).left = «expr ≫ » f.left g.left :=\n  rfl\n#align comp_left comp_left\n\n",
 "coe_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem coe_hom {X Y : T} (f : «expr ⟶ » Y X) : (f : Over X).hom = f :=\n  rfl\n#align coe_hom coe_hom\n\n"}