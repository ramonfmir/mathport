{"wide_cospan_map_term":
 "@[simp]\ntheorem wide_cospan_map_term {A : C} (s : Set (Subobject A)) (j) :\n    (wideCospan s).map (wide_pullback_shape.hom.term j) = ((equivShrink (Subobject A)).symm j).arrow :=\n  rfl\n#align wide_cospan_map_term wide_cospan_map_term\n\n",
 "underlying_iso_top_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem underlying_iso_top_hom {B : C} : (underlyingIso ((«expr𝟙») B)).hom = («expr⊤» : Subobject B).arrow :=\n  by\n  convert underlying_iso_hom_comp_eq_mk ((«expr𝟙») B)\n  simp only [comp_id]\n#align underlying_iso_top_hom underlying_iso_top_hom\n\n",
 "underlying_iso_inv_top_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1]\ntheorem underlying_iso_inv_top_arrow {B : C} :\n    «expr ≫ » (underlyingIso _).inv («expr⊤» : Subobject B).arrow = («expr𝟙») B :=\n  underlyingIso_arrow _\n#align underlying_iso_inv_top_arrow underlying_iso_inv_top_arrow\n\n",
 "top_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta, Scott Morrison\n-/\n@[simp]\ntheorem top_left (X : C) : ((«expr⊤» : MonoOver X) : C) = X :=\n  rfl\n#align top_left top_left\n\n",
 "top_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem top_factors {A B : C} (f : «expr ⟶ » A B) : («expr⊤» : Subobject B).factors f :=\n  ⟨f, comp_id _⟩\n#align top_factors top_factors\n\n",
 "top_eq_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem top_eq_id (B : C) : («expr⊤» : Subobject B) = Subobject.mk ((«expr𝟙») B) :=\n  rfl\n#align top_eq_id top_eq_id\n\n",
 "top_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem top_arrow (X : C) : («expr⊤» : MonoOver X).arrow = («expr𝟙») X :=\n  rfl\n#align top_arrow top_arrow\n\n",
 "symm_apply_mem_iff_mem_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem symm_apply_mem_iff_mem_image {α β : Type _} (e : «expr ≃ » α β) (s : Set α) (x : β) :\n    e.symm x ∈ s ↔ x ∈ «expr '' » e s :=\n  ⟨fun h => ⟨e.symm x, h, by simp⟩, by\n    rintro ⟨a, m, rfl⟩\n    simpa using m⟩\n#align symm_apply_mem_iff_mem_image symm_apply_mem_iff_mem_image\n\n",
 "supₛ_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print supₛ_le /-\ntheorem supₛ_le {A : C} (s : Set (Subobject A)) (f : Subobject A) (k : ∀ g ∈ s, g ≤ f) : sup s ≤ f :=\n  by\n  fapply le_of_comm\n  · dsimp [Sup]\n    refine' «expr ≫ » (underlying_iso _).hom (image.lift ⟨_, f.arrow, _, _⟩)\n    · refine' sigma.desc _\n      rintro ⟨g, m⟩\n      refine' underlying.map (hom_of_le (k _ _))\n      simpa [symm_apply_mem_iff_mem_image] using m\n    · ext j\n      rcases j with ⟨j, m⟩\n      dsimp [small_coproduct_desc]\n      simp\n      dsimp\n      simp\n  · dsimp [Sup]\n    simp\n#align Sup_le supₛ_le\n-/\n\n",
 "sup_factors_of_factors_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem sup_factors_of_factors_right {A B : C} {X Y : Subobject B} {f : «expr ⟶ » A B} (P : Y.factors f) :\n    («expr ⊔ » X Y).factors f :=\n  factors_of_le f le_sup_right P\n#align sup_factors_of_factors_right sup_factors_of_factors_right\n\n",
 "sup_factors_of_factors_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem sup_factors_of_factors_left {A B : C} {X Y : Subobject B} {f : «expr ⟶ » A B} (P : X.factors f) :\n    («expr ⊔ » X Y).factors f :=\n  factors_of_le f le_sup_left P\n#align sup_factors_of_factors_left sup_factors_of_factors_left\n\n",
 "pullback_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem pullback_top (f : «expr ⟶ » X Y) : (pullback f).obj («expr⊤») = «expr⊤» :=\n  Quotient.sound' ⟨MonoOver.pullbackTop f⟩\n#align pullback_top pullback_top\n\n",
 "pullback_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem pullback_self {A B : C} (f : «expr ⟶ » A B) [Mono f] : (pullback f).obj (mk f) = «expr⊤» :=\n  Quotient.sound' ⟨MonoOver.pullbackSelf f⟩\n#align pullback_self pullback_self\n\n",
 "prod_eq_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem prod_eq_inf {A : C} {f₁ f₂ : Subobject A} [HasBinaryProduct f₁ f₂] : «expr ⨯ » f₁ f₂ = «expr ⊓ » f₁ f₂ :=\n  le_antisymm (le_inf Limits.prod.fst.le Limits.prod.snd.le) (prod.lift inf_le_left.hom inf_le_right.hom).le\n#align prod_eq_inf prod_eq_inf\n\n",
 "nontrivial_of_not_is_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-- A nonzero object has nontrivial subobject lattice. -/\ntheorem nontrivial_of_not_is_zero {X : C} (h : ¬IsZero X) : Nontrivial (Subobject X) :=\n  ⟨⟨mk (0 : «expr ⟶ » 0 X), mk ((«expr𝟙») X), fun w => h (IsZero.of_iso (isZero_zero C) (isoOfMkEqMk _ _ w).symm)⟩⟩\n#align nontrivial_of_not_is_zero nontrivial_of_not_is_zero\n\n",
 "mk_eq_top_of_is_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem mk_eq_top_of_is_iso {X Y : C} (f : «expr ⟶ » X Y) [IsIso f] : mk f = «expr⊤» :=\n  (isIso_iff_mk_eq_top f).mp inferInstance\n#align mk_eq_top_of_is_iso mk_eq_top_of_is_iso\n\n",
 "mk_eq_bot_iff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem mk_eq_bot_iff_zero {f : «expr ⟶ » X Y} [Mono f] : Subobject.mk f = «expr⊥» ↔ f = 0 :=\n  ⟨fun h => by simpa [h, bot_factors_iff_zero] using mk_factors_self f, fun h =>\n    mk_eq_mk_of_comm _ _ ((isoZeroOfMonoEqZero h).trans HasZeroObject.zeroIsoInitial) (by simp [h])⟩\n#align mk_eq_bot_iff_zero mk_eq_bot_iff_zero\n\n",
 "map_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem map_top (f : «expr ⟶ » X Y) [Mono f] : (map f).obj («expr⊤») = Subobject.mk f :=\n  Quotient.sound' ⟨MonoOver.mapTop f⟩\n#align map_top map_top\n\n",
 "map_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem map_bot (f : «expr ⟶ » X Y) [Mono f] : (map f).obj («expr⊥») = «expr⊥» :=\n  Quotient.sound' ⟨MonoOver.mapBot f⟩\n#align map_bot map_bot\n\n",
 "le_supₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (f «expr ∈ » s) -/\n#print le_supₛ /-\ntheorem le_supₛ {A : C} (s : Set (Subobject A)) (f) (_ : f ∈ s) : f ≤ sup s :=\n  by\n  fapply le_of_comm\n  · dsimp [Sup]\n    refine' «expr ≫ » _ («expr ≫ » (factor_thru_image _) (underlying_iso _).inv)\n    refine' «expr ≫ » _ (sigma.ι _ ⟨equivShrink _ f, by simpa [Set.mem_image] using H⟩)\n    exact eq_to_hom (congr_arg (fun X : subobject A => (X : C)) (Equiv.symm_apply_apply _ _).symm)\n  · dsimp [Sup, small_coproduct_desc]\n    simp\n    dsimp\n    simp\n#align le_Sup le_supₛ\n-/\n\n",
 "le_infₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print le_infₛ /-\ntheorem le_infₛ {A : C} (s : Set (Subobject A)) (f : Subobject A) (k : ∀ g ∈ s, f ≤ g) : f ≤ infₛ s :=\n  by\n  fapply le_of_comm\n  · exact «expr ≫ » (limits.limit.lift _ (le_Inf_cone s f k)) (underlying_iso _).inv\n  · dsimp [Inf, wide_pullback_ι]\n    simp\n#align le_Inf le_infₛ\n-/\n\n",
 "le_inf":
 "#print le_inf /-\ntheorem le_inf {A : C} (h f g : Subobject A) : h ≤ f → h ≤ g → h ≤ (inf.obj f).obj g :=\n  Quotient.inductionOn₃' h f g\n    (by\n      rintro f g h ⟨k⟩ ⟨l⟩\n      exact ⟨mono_over.le_inf _ _ _ k l⟩)\n#align le_inf le_inf\n-/\n\n",
 "le_Inf_cone_π_app_none":
 "@[simp]\ntheorem le_Inf_cone_π_app_none {A : C} (s : Set (Subobject A)) (f : Subobject A) (k : ∀ g ∈ s, f ≤ g) :\n    (leInfCone s f k).π.app none = f.arrow :=\n  rfl\n#align le_Inf_cone_π_app_none le_Inf_cone_π_app_none\n\n",
 "is_iso_iff_mk_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_iso_iff_mk_eq_top {X Y : C} (f : «expr ⟶ » X Y) [Mono f] : IsIso f ↔ mk f = «expr⊤» :=\n  ⟨fun _ => mk_eq_mk_of_comm _ _ (as_iso f) (category.comp_id _), fun h =>\n    by\n    rw [← of_mk_le_mk_comp h.le, category.comp_id]\n    exact is_iso.of_iso (iso_of_mk_eq_mk _ _ h)⟩\n#align is_iso_iff_mk_eq_top is_iso_iff_mk_eq_top\n\n",
 "is_iso_arrow_iff_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem is_iso_arrow_iff_eq_top {Y : C} (P : Subobject Y) : IsIso P.arrow ↔ P = «expr⊤» := by\n  rw [is_iso_iff_mk_eq_top, mk_arrow]\n#align is_iso_arrow_iff_eq_top is_iso_arrow_iff_eq_top\n\n",
 "infₛ_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (f «expr ∈ » s) -/\n#print infₛ_le /-\ntheorem infₛ_le {A : C} (s : Set (Subobject A)) (f) (_ : f ∈ s) : infₛ s ≤ f :=\n  by\n  fapply le_of_comm\n  · refine'\n      «expr ≫ » (underlying_iso _).hom\n        («expr ≫ »\n          (limits.limit.π (wide_cospan s) (some ⟨equivShrink _ f, Set.mem_image_of_mem (equivShrink (subobject A)) H⟩))\n          _)\n    apply eq_to_hom\n    apply congr_arg fun X : subobject A => (X : C)\n    exact Equiv.symm_apply_apply _ _\n  · dsimp [Inf]\n    simp only [category.comp_id, category.assoc, ← underlying_iso_hom_comp_eq_mk, subobject.arrow_congr,\n      congr_arg_mpr_hom_left, iso.cancel_iso_hom_left]\n    convert limit.w (wide_cospan s) (wide_pullback_shape.hom.term _)\n#align Inf_le infₛ_le\n-/\n\n",
 "inf_pullback":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/-- `⊓` commutes with pullback. -/\ntheorem inf_pullback {X Y : C} (g : «expr ⟶ » X Y) (f₁ f₂) :\n    (pullback g).obj («expr ⊓ » f₁ f₂) = «expr ⊓ » ((pullback g).obj f₁) ((pullback g).obj f₂) :=\n  by\n  revert f₁\n  apply Quotient.ind'\n  intro f₁\n  erw [inf_def, inf_def, inf_eq_map_pullback', inf_eq_map_pullback', ← pullback_comp, ←\n    map_pullback pullback.condition (pullback_is_pullback f₁.arrow g), ← pullback_comp, pullback.condition]\n  rfl\n#align inf_pullback inf_pullback\n\n",
 "inf_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/-- `⊓` commutes with map. -/\ntheorem inf_map {X Y : C} (g : «expr ⟶ » Y X) [Mono g] (f₁ f₂) :\n    (map g).obj («expr ⊓ » f₁ f₂) = «expr ⊓ » ((map g).obj f₁) ((map g).obj f₂) :=\n  by\n  revert f₁\n  apply Quotient.ind'\n  intro f₁\n  erw [inf_def, inf_def, inf_eq_map_pullback', inf_eq_map_pullback', ← map_comp]\n  dsimp\n  rw [pullback_comp, pullback_map_self]\n#align inf_map inf_map\n\n",
 "inf_le_right":
 "#print inf_le_right /-\ntheorem inf_le_right {A : C} (f g : Subobject A) : (inf.obj f).obj g ≤ g :=\n  Quotient.inductionOn₂' f g fun a b => ⟨MonoOver.infLERight _ _⟩\n#align inf_le_right inf_le_right\n-/\n\n",
 "inf_le_left":
 "#print inf_le_left /-\ntheorem inf_le_left {A : C} (f g : Subobject A) : (inf.obj f).obj g ≤ f :=\n  Quotient.inductionOn₂' f g fun a b => ⟨MonoOver.infLELeft _ _⟩\n#align inf_le_left inf_le_left\n-/\n\n",
 "inf_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_factors {A B : C} {X Y : Subobject B} (f : «expr ⟶ » A B) :\n    («expr ⊓ » X Y).factors f ↔ X.factors f ∧ Y.factors f :=\n  ⟨fun h => ⟨factors_left_of_inf_factors h, factors_right_of_inf_factors h⟩,\n    by\n    revert X Y\n    refine' Quotient.ind₂' _\n    rintro X Y ⟨⟨g₁, rfl⟩, ⟨g₂, hg₂⟩⟩\n    exact ⟨_, pullback.lift_snd_assoc _ _ hg₂ _⟩⟩\n#align inf_factors inf_factors\n\n",
 "inf_eq_map_pullback'":
 "theorem inf_eq_map_pullback' {A : C} (f₁ : MonoOver A) (f₂ : Subobject A) :\n    (Subobject.inf.obj (Quotient.mk'' f₁)).obj f₂ =\n      (Subobject.map f₁.arrow).obj ((Subobject.pullback f₁.arrow).obj f₂) :=\n  by\n  apply Quotient.inductionOn' f₂\n  intro f₂\n  rfl\n#align inf_eq_map_pullback' inf_eq_map_pullback'\n\n",
 "inf_eq_map_pullback":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_eq_map_pullback {A : C} (f₁ : MonoOver A) (f₂ : Subobject A) :\n    («expr ⊓ » (Quotient.mk'' f₁) f₂ : Subobject A) = (map f₁.arrow).obj ((pullback f₁.arrow).obj f₂) :=\n  inf_eq_map_pullback' f₁ f₂\n#align inf_eq_map_pullback inf_eq_map_pullback\n\n",
 "inf_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_def {B : C} (m m' : Subobject B) : «expr ⊓ » m m' = (inf.obj m).obj m' :=\n  rfl\n#align inf_def inf_def\n\n",
 "inf_arrow_factors_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_arrow_factors_right {B : C} (X Y : Subobject B) : Y.factors («expr ⊓ » X Y).arrow :=\n  (factors_iff _ _).mpr ⟨ofLE («expr ⊓ » X Y) Y (inf_le_right X Y), by simp⟩\n#align inf_arrow_factors_right inf_arrow_factors_right\n\n",
 "inf_arrow_factors_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem inf_arrow_factors_left {B : C} (X Y : Subobject B) : X.factors («expr ⊓ » X Y).arrow :=\n  (factors_iff _ _).mpr ⟨ofLE («expr ⊓ » X Y) X (inf_le_left X Y), by simp⟩\n#align inf_arrow_factors_left inf_arrow_factors_left\n\n",
 "finset_sup_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem finset_sup_factors {I : Type _} {A B : C} {s : Finset I} {P : I → Subobject B} {f : «expr ⟶ » A B}\n    (h : ∃ i ∈ s, (P i).factors f) : (s.sup P).factors f := by\n  classical\n    revert h\n    apply Finset.induction_on s\n    · rintro ⟨_, ⟨⟨⟩, _⟩⟩\n    · rintro i s nm ih ⟨j, ⟨m, h⟩⟩\n      simp only [Finset.sup_insert]\n      simp at m\n      rcases m with (rfl | m)\n      · exact sup_factors_of_factors_left h\n      · exact sup_factors_of_factors_right (ih ⟨j, ⟨m, h⟩⟩)\n#align finset_sup_factors finset_sup_factors\n\n",
 "finset_inf_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem finset_inf_factors {I : Type _} {A B : C} {s : Finset I} {P : I → Subobject B} (f : «expr ⟶ » A B) :\n    (s.inf P).factors f ↔ ∀ i ∈ s, (P i).factors f := by\n  classical\n    apply Finset.induction_on s\n    · simp [top_factors]\n    · intro i s nm ih\n      simp [ih]\n#align finset_inf_factors finset_inf_factors\n\n",
 "finset_inf_arrow_factors":
 "-- `i` is explicit here because often we'd like to defer a proof of `m`\ntheorem finset_inf_arrow_factors {I : Type _} {B : C} (s : Finset I) (P : I → Subobject B) (i : I) (m : i ∈ s) :\n    (P i).factors (s.inf P).arrow := by\n  revert i m\n  classical\n    apply Finset.induction_on s\n    · rintro _ ⟨⟩\n    · intro i s nm ih j m\n      rw [Finset.inf_insert]\n      simp only [Finset.mem_insert] at m\n      rcases m with (rfl | m)\n      · rw [← factor_thru_arrow _ _ (inf_arrow_factors_left _ _)]\n        exact factors_comp_arrow _\n      · rw [← factor_thru_arrow _ _ (inf_arrow_factors_right _ _)]\n        apply factors_of_factors_right\n        exact ih _ m\n#align finset_inf_arrow_factors finset_inf_arrow_factors\n\n",
 "factors_right_of_inf_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem factors_right_of_inf_factors {A B : C} {X Y : Subobject B} {f : «expr ⟶ » A B} (h : («expr ⊓ » X Y).factors f) :\n    Y.factors f :=\n  factors_of_le _ (inf_le_right _ _) h\n#align factors_right_of_inf_factors factors_right_of_inf_factors\n\n",
 "factors_left_of_inf_factors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem factors_left_of_inf_factors {A B : C} {X Y : Subobject B} {f : «expr ⟶ » A B} (h : («expr ⊓ » X Y).factors f) :\n    X.factors f :=\n  factors_of_le _ (inf_le_left _ _) h\n#align factors_left_of_inf_factors factors_left_of_inf_factors\n\n",
 "eq_top_of_is_iso_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem eq_top_of_is_iso_arrow {Y : C} (P : Subobject Y) [IsIso P.arrow] : P = «expr⊤» :=\n  (isIso_arrow_iff_eq_top P).mp inferInstance\n#align eq_top_of_is_iso_arrow eq_top_of_is_iso_arrow\n\n",
 "bot_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥_ » -/\n@[simp]\ntheorem bot_left (X : C) : ((«expr⊥» : MonoOver X) : C) = «expr⊥_ » C :=\n  rfl\n#align bot_left bot_left\n\n",
 "bot_factors_iff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem bot_factors_iff_zero {A B : C} (f : «expr ⟶ » A B) : («expr⊥» : Subobject B).factors f ↔ f = 0 :=\n  ⟨by\n    rintro ⟨h, rfl⟩\n    simp, by\n    rintro rfl\n    exact ⟨0, by simp⟩⟩\n#align bot_factors_iff_zero bot_factors_iff_zero\n\n",
 "bot_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print bot_eq_zero /-\ntheorem bot_eq_zero {B : C} : («expr⊥» : Subobject B) = Subobject.mk (0 : «expr ⟶ » 0 B) :=\n  mk_eq_mk_of_comm _ _ (initialIsInitial.unique_up_to_iso HasZeroObject.zeroIsInitial) (by simp)\n#align bot_eq_zero bot_eq_zero\n-/\n\n",
 "bot_eq_initial_to":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem bot_eq_initial_to {B : C} : («expr⊥» : Subobject B) = Subobject.mk (initial.to B) :=\n  rfl\n#align bot_eq_initial_to bot_eq_initial_to\n\n",
 "bot_arrow_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_arrow_eq_zero [HasZeroMorphisms C] {B : C} : («expr⊥» : MonoOver B).arrow = 0 :=\n  zero_of_source_iso_zero _ botCoeIsoZero\n#align bot_arrow_eq_zero bot_arrow_eq_zero\n\n",
 "bot_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem bot_arrow {B : C} : («expr⊥» : Subobject B).arrow = 0 :=\n  zero_of_source_iso_zero _ botCoeIsoZero\n#align bot_arrow bot_arrow\n\n"}