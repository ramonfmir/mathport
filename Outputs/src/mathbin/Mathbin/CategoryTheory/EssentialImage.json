{"of_nat_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/-- If `Y` is in the essential image of `F` then it is in the essential image of `F'` as long as\n`F ≅ F'`.\n-/\ntheorem ess_image.of_nat_iso {F' : «expr ⥤ » C D} (h : «expr ≅ » F F') {Y : D} (hY : Y ∈ essImage F) :\n    Y ∈ essImage F' :=\n  hY.imp fun X => Nonempty.map fun t => «expr ≪≫ » (h.symm.app X) t\n#align ess_image.of_nat_iso ess_image.of_nat_iso\n\n",
 "of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ≪≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n/-- Being in the essential image is a \"hygenic\" property: it is preserved under isomorphism. -/\ntheorem ess_image.of_iso {Y Y' : D} (h : «expr ≅ » Y Y') (hY : Y ∈ essImage F) : Y' ∈ essImage F :=\n  hY.imp fun B => Nonempty.map («expr ≪≫ » · h)\n#align ess_image.of_iso ess_image.of_iso\n\n",
 "obj_mem_ess_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- An object in the image is in the essential image. -/\ntheorem obj_mem_ess_image (F : «expr ⥤ » D C) (Y : D) : F.obj Y ∈ essImage F :=\n  ⟨Y, ⟨Iso.refl _⟩⟩\n#align obj_mem_ess_image obj_mem_ess_image\n\n",
 "ess_image_eq_of_nat_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/-- Isomorphic functors have equal essential images. -/\ntheorem ess_image_eq_of_nat_iso {F' : «expr ⥤ » C D} (h : «expr ≅ » F F') : essImage F = essImage F' :=\n  funext fun _ => propext ⟨essImage.ofNatIso h, essImage.ofNatIso h.symm⟩\n#align ess_image_eq_of_nat_iso ess_image_eq_of_nat_iso\n\n"}