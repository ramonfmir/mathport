{"id_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem id_right : ((«expr𝟙») X : CommaMorphism X X).right = («expr𝟙») X.right :=\n  rfl\n#align id_right id_right\n\n",
 "id_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-\nCopyright (c) 2018 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison, Johan Commelin, Bhavik Mehta\n-/\n-- declare the `v`'s first; see `category_theory.category` for an explanation\n-- Satisfying the inhabited linter\n-- Satisfying the inhabited linter\n@[simp]\ntheorem id_left : ((«expr𝟙») X : CommaMorphism X X).left = («expr𝟙») X.left :=\n  rfl\n#align id_left id_left\n\n",
 "eq_to_hom_right":
 "@[simp]\ntheorem eq_to_hom_right (X Y : Comma L R) (H : X = Y) :\n    comma_morphism.right (eqToHom H) =\n      eqToHom\n        (by\n          cases H\n          rfl) :=\n  by\n  cases H\n  rfl\n#align eq_to_hom_right eq_to_hom_right\n\n",
 "eq_to_hom_left":
 "@[simp]\ntheorem eq_to_hom_left (X Y : Comma L R) (H : X = Y) :\n    comma_morphism.left (eqToHom H) =\n      eqToHom\n        (by\n          cases H\n          rfl) :=\n  by\n  cases H\n  rfl\n#align eq_to_hom_left eq_to_hom_left\n\n",
 "comp_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_right : («expr ≫ » f g).right = «expr ≫ » f.right g.right :=\n  rfl\n#align comp_right comp_right\n\n",
 "comp_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_left : («expr ≫ » f g).left = «expr ≫ » f.left g.left :=\n  rfl\n#align comp_left comp_left\n\n"}