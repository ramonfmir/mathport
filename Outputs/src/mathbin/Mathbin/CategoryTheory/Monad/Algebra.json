{"right_adjoint_forget":
 "@[simp]\ntheorem right_adjoint_forget : right_adjoint G.forget = G.cofree :=\n  rfl\n#align right_adjoint_forget right_adjoint_forget\n\n",
 "of_right_adjoint_forget":
 "@[simp]\ntheorem of_right_adjoint_forget : adjunction.of_right_adjoint T.forget = T.adj :=\n  rfl\n#align of_right_adjoint_forget of_right_adjoint_forget\n\n",
 "of_left_adjoint_forget":
 "@[simp]\ntheorem of_left_adjoint_forget : adjunction.of_left_adjoint G.forget = G.adj :=\n  rfl\n#align of_left_adjoint_forget of_left_adjoint_forget\n\n",
 "left_adjoint_forget":
 "@[simp]\ntheorem left_adjoint_forget : left_adjoint T.forget = T.free :=\n  rfl\n#align left_adjoint_forget left_adjoint_forget\n\n",
 "id_f":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem id_f (A : coalgebra G) : ((«expr𝟙») A : «expr ⟶ » A A).f = («expr𝟙») A.A :=\n  rfl\n#align id_f id_f\n\n",
 "id_eq_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem id_eq_id (A : coalgebra G) : coalgebra.hom.id A = («expr𝟙») A :=\n  rfl\n#align id_eq_id id_eq_id\n\n",
 "comp_f":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_f {A A' A'' : coalgebra G} (f : «expr ⟶ » A A') (g : «expr ⟶ » A' A'') :\n    («expr ≫ » f g).f = «expr ≫ » f.f g.f :=\n  rfl\n#align comp_f comp_f\n\n",
 "comp_eq_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_eq_comp {A A' A'' : coalgebra G} (f : «expr ⟶ » A A') (g : «expr ⟶ » A' A'') :\n    coalgebra.hom.comp f g = «expr ≫ » f g :=\n  rfl\n#align comp_eq_comp comp_eq_comp\n\n",
 "coalgebra_iso_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- The other two `simps` projection lemmas can be derived from these two, so `simp_nf` complains if\n-- those are added too\n/-- Given a coalgebra morphism whose carrier part is an isomorphism, we get a coalgebra isomorphism.\n-/\ntheorem coalgebra_iso_of_iso {A B : coalgebra G} (f : «expr ⟶ » A B) [IsIso f.f] : IsIso f :=\n  ⟨⟨{   f := inv f.f\n        h' := by\n          rw [is_iso.eq_inv_comp f.f, ← f.h_assoc]\n          simp },\n      by tidy⟩⟩\n#align coalgebra_iso_of_iso coalgebra_iso_of_iso\n\n",
 "algebra_mono_of_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- Given a coalgebra morphism whose carrier part is a monomorphism, we get an algebra monomorphism.\n-/\ntheorem algebra_mono_of_mono {X Y : coalgebra G} (f : «expr ⟶ » X Y) [h : Mono f.f] : Mono f :=\n  (forget G).mono_of_mono_map h\n#align algebra_mono_of_mono algebra_mono_of_mono\n\n",
 "algebra_iso_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- The other two `simps` projection lemmas can be derived from these two, so `simp_nf` complains if\n-- those are added too\n/-- Given an algebra morphism whose carrier part is an isomorphism, we get an algebra isomorphism.\n-/\ntheorem algebra_iso_of_iso {A B : algebra T} (f : «expr ⟶ » A B) [IsIso f.f] : IsIso f :=\n  ⟨⟨{   f := inv f.f\n        h' := by\n          rw [is_iso.eq_comp_inv f.f, category.assoc, ← f.h]\n          simp },\n      by tidy⟩⟩\n#align algebra_iso_of_iso algebra_iso_of_iso\n\n",
 "algebra_equiv_of_iso_monads_comp_forget":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n@[simp]\ntheorem algebra_equiv_of_iso_monads_comp_forget {T₁ T₂ : monad C} (h : «expr ⟶ » T₁ T₂) :\n    «expr ⋙ » (algebra_functor_of_monad_hom h) (forget _) = forget _ :=\n  rfl\n#align algebra_equiv_of_iso_monads_comp_forget algebra_equiv_of_iso_monads_comp_forget\n\n",
 "algebra_epi_of_epi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- Given a coalgebra morphism whose carrier part is an epimorphism, we get an algebra epimorphism.\n-/\ntheorem algebra_epi_of_epi {X Y : coalgebra G} (f : «expr ⟶ » X Y) [h : Epi f.f] : Epi f :=\n  (forget G).epi_of_epi_map h\n#align algebra_epi_of_epi algebra_epi_of_epi\n\n"}