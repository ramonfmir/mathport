{"vcomp_eq_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2017 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Tim Baumann, Stephen Morgan, Scott Morrison, Floris van Doorn\n-/\n-- declare the `v`'s first; see `category_theory.category` for an explanation\n@[simp]\ntheorem vcomp_eq_comp (α : «expr ⟶ » F G) (β : «expr ⟶ » G H) : vcomp α β = «expr ≫ » α β :=\n  rfl\n#align vcomp_eq_comp vcomp_eq_comp\n\n",
 "vcomp_app'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem vcomp_app' (α : «expr ⟶ » F G) (β : «expr ⟶ » G H) (X : C) :\n    («expr ≫ » α β).app X = «expr ≫ » (α.app X) (β.app X) :=\n  rfl\n#align vcomp_app' vcomp_app'\n\n",
 "naturality_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem naturality_app {F G : «expr ⥤ » C («expr ⥤ » D E)} (T : «expr ⟶ » F G) (Z : D) {X Y : C} (f : «expr ⟶ » X Y) :\n    «expr ≫ » ((F.map f).app Z) ((T.app Y).app Z) = «expr ≫ » ((T.app X).app Z) ((G.map f).app Z) :=\n  congr_fun (congr_arg app (T.naturality f)) Z\n#align naturality_app naturality_app\n\n",
 "mono_of_mono_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- A natural transformation is a monomorphism if each component is. -/\ntheorem mono_of_mono_app (α : «expr ⟶ » F G) [∀ X : C, Mono (α.app X)] : Mono α :=\n  ⟨fun H g h eq => by\n    ext X\n    rw [← cancel_mono (α.app X), ← comp_app, eq, comp_app]⟩\n#align mono_of_mono_app mono_of_mono_app\n\n",
 "map_inv_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1]\ntheorem map_inv_hom_app (F : «expr ⥤ » C («expr ⥤ » D E)) {X Y : C} (e : «expr ≅ » X Y) (Z : D) :\n    «expr ≫ » ((F.map e.inv).app Z) ((F.map e.hom).app Z) = («expr𝟙») _ := by\n  simp [← nat_trans.comp_app, ← functor.map_comp]\n#align map_inv_hom_app map_inv_hom_app\n\n",
 "map_hom_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1]\ntheorem map_hom_inv_app (F : «expr ⥤ » C («expr ⥤ » D E)) {X Y : C} (e : «expr ≅ » X Y) (Z : D) :\n    «expr ≫ » ((F.map e.hom).app Z) ((F.map e.inv).app Z) = («expr𝟙») _ := by\n  simp [← nat_trans.comp_app, ← functor.map_comp]\n#align map_hom_inv_app map_hom_inv_app\n\n",
 "id_hcomp_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ◫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n-- See note [dsimp, simp].\ntheorem id_hcomp_app {H : «expr ⥤ » E C} (α : «expr ⟶ » F G) (X : E) : («expr ◫ » ((«expr𝟙») H) α).app X = α.app _ := by\n  simp\n#align id_hcomp_app id_hcomp_app\n\n",
 "id_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem id_app (F : «expr ⥤ » C D) (X : C) : ((«expr𝟙») F : «expr ⟶ » F F).app X = («expr𝟙») (F.obj X) :=\n  rfl\n#align id_app id_app\n\n",
 "hcomp_id_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ◫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem hcomp_id_app {H : «expr ⥤ » D E} (α : «expr ⟶ » F G) (X : C) :\n    («expr ◫ » α ((«expr𝟙») H)).app X = H.map (α.app X) :=\n  by\n  dsimp\n  simp\n#align hcomp_id_app hcomp_id_app\n\n",
 "exchange":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ◫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ◫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ◫ » -/\n-- Note that we don't yet prove a `hcomp_assoc` lemma here: even stating it is painful, because we\n-- need to use associativity of functor composition. (It's true without the explicit associator,\n-- because functor composition is definitionally associative,\n-- but relying on the definitional equality causes bad problems with elaboration later.)\ntheorem exchange {I J K : «expr ⥤ » D E} (α : «expr ⟶ » F G) (β : «expr ⟶ » G H) (γ : «expr ⟶ » I J)\n    (δ : «expr ⟶ » J K) : «expr ◫ » («expr ≫ » α β) («expr ≫ » γ δ) = «expr ≫ » («expr ◫ » α γ) («expr ◫ » β δ) := by\n  ext <;> simp\n#align exchange exchange\n\n",
 "epi_of_epi_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- A natural transformation is an epimorphism if each component is. -/\ntheorem epi_of_epi_app (α : «expr ⟶ » F G) [∀ X : C, Epi (α.app X)] : Epi α :=\n  ⟨fun H g h eq => by\n    ext X\n    rw [← cancel_epi (α.app X), ← comp_app, eq, comp_app]⟩\n#align epi_of_epi_app epi_of_epi_app\n\n",
 "congr_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem congr_app {α β : «expr ⟶ » F G} (h : α = β) (X : C) : α.app X = β.app X := by rw [h]\n#align congr_app congr_app\n\n",
 "comp_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem comp_app {F G H : «expr ⥤ » C D} (α : «expr ⟶ » F G) (β : «expr ⟶ » G H) (X : C) :\n    («expr ≫ » α β).app X = «expr ≫ » (α.app X) (β.app X) :=\n  rfl\n#align comp_app comp_app\n\n",
 "app_naturality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem app_naturality {F G : «expr ⥤ » C («expr ⥤ » D E)} (T : «expr ⟶ » F G) (X : C) {Y Z : D} (f : «expr ⟶ » Y Z) :\n    «expr ≫ » ((F.obj X).map f) ((T.app X).app Z) = «expr ≫ » ((T.app X).app Y) ((G.obj X).map f) :=\n  (T.app X).naturality f\n#align app_naturality app_naturality\n\n"}