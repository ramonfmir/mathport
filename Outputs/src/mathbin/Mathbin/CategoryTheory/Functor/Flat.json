{"uniq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ü∂ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ãô ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ü∂ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ãô ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ãô ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ãô ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ü∂ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ü∂ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprùüô¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprùüô¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ãô ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚ü∂ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\n/- failed to parenthesize: parenthesize: uncaught backtrack exception\n[PrettyPrinter.parenthesize.input] (Command.declaration\n     (Command.declModifiers [] [] [] [] [] [])\n     (Command.theorem\n      \"theorem\"\n      (Command.declId `uniq [])\n      (Command.declSig\n       [(Term.implicitBinder \"{\" [`K] [\":\" (Term.app `¬´expr ‚•§ ¬ª [`J `C])] \"}\")\n        (Term.implicitBinder \"{\" [`c] [\":\" (Term.app `cone [`K])] \"}\")\n        (Term.explicitBinder \"(\" [`hc] [\":\" (Term.app `is_limit [`c])] [] \")\")\n        (Term.explicitBinder \"(\" [`s] [\":\" (Term.app `cone [(Term.app `¬´expr ‚ãô ¬ª [`K `F])])] [] \")\")\n        (Term.explicitBinder\n         \"(\"\n         [`f‚ÇÅ `f‚ÇÇ]\n         [\":\" (Term.app `¬´expr ‚ü∂ ¬ª [(Term.proj `s \".\" `X) (Term.app (Term.proj `F \".\" `obj) [(Term.proj `c \".\" `X)])])]\n         []\n         \")\")\n        (Term.explicitBinder\n         \"(\"\n         [`h‚ÇÅ]\n         [\":\"\n          (Term.forall\n           \"‚àÄ\"\n           [`j]\n           [(Term.typeSpec \":\" `J)]\n           \",\"\n           (¬´term_=_¬ª\n            (Term.app\n             `¬´expr ‚â´ ¬ª\n             [`f‚ÇÅ (Term.app (Term.proj (Term.proj (Term.app (Term.proj `F \".\" `map_cone) [`c]) \".\" `œÄ) \".\" `app) [`j])])\n            \"=\"\n            (Term.app (Term.proj (Term.proj `s \".\" `œÄ) \".\" `app) [`j])))]\n         []\n         \")\")\n        (Term.explicitBinder\n         \"(\"\n         [`h‚ÇÇ]\n         [\":\"\n          (Term.forall\n           \"‚àÄ\"\n           [`j]\n           [(Term.typeSpec \":\" `J)]\n           \",\"\n           (¬´term_=_¬ª\n            (Term.app\n             `¬´expr ‚â´ ¬ª\n             [`f‚ÇÇ (Term.app (Term.proj (Term.proj (Term.app (Term.proj `F \".\" `map_cone) [`c]) \".\" `œÄ) \".\" `app) [`j])])\n            \"=\"\n            (Term.app (Term.proj (Term.proj `s \".\" `œÄ) \".\" `app) [`j])))]\n         []\n         \")\")]\n       (Term.typeSpec \":\" (¬´term_=_¬ª `f‚ÇÅ \"=\" `f‚ÇÇ)))\n      (Command.declValSimple\n       \":=\"\n       (Term.byTactic\n        \"by\"\n        (Tactic.tacticSeq\n         (Tactic.tacticSeq1Indented\n          [(Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `Œ±‚ÇÅ\n              []\n              [(Term.typeSpec\n                \":\"\n                (Term.app\n                 `¬´expr ‚ü∂ ¬ª\n                 [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [(Term.app `F.map_cone [`c])]) (Term.app `map [`f‚ÇÅ])])\n                  (Term.app `to_diagram [`s])]))]\n              \":=\"\n              (Term.structInst\n               \"{\"\n               []\n               [(Term.structInstField\n                 (Term.structInstLVal `app [])\n                 \":=\"\n                 (Term.fun\n                  \"fun\"\n                  (Term.basicFun\n                   [`X]\n                   []\n                   \"=>\"\n                   (Term.app\n                    `eq_to_hom\n                    [(Term.byTactic\n                      \"by\"\n                      (Tactic.tacticSeq\n                       (Tactic.tacticSeq1Indented\n                        [(Tactic.simp\n                          \"simp\"\n                          []\n                          []\n                          []\n                          [\"[\" [(Tactic.simpLemma [] [(patternIgnore (token.¬´‚Üê ¬ª \"‚Üê\"))] `h‚ÇÅ)] \"]\"]\n                          [])])))]))))\n                []\n                (Term.structInstField\n                 (Term.structInstLVal `naturality' [])\n                 \":=\"\n                 (Term.fun\n                  \"fun\"\n                  (Term.basicFun\n                   [(Term.hole \"_\") (Term.hole \"_\") (Term.hole \"_\")]\n                   []\n                   \"=>\"\n                   (Term.byTactic\n                    \"by\"\n                    (Tactic.tacticSeq\n                     (Tactic.tacticSeq1Indented\n                      [(Std.Tactic.Ext.¬´tacticExt___:_¬ª \"ext\" [] []) [] (Tactic.simp \"simp\" [] [] [] [] [])]))))))]\n               (Term.optEllipsis [])\n               []\n               \"}\"))))\n           []\n           (Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `Œ±‚ÇÇ\n              []\n              [(Term.typeSpec\n                \":\"\n                (Term.app\n                 `¬´expr ‚ü∂ ¬ª\n                 [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [(Term.app `F.map_cone [`c])]) (Term.app `map [`f‚ÇÇ])])\n                  (Term.app `to_diagram [`s])]))]\n              \":=\"\n              (Term.structInst\n               \"{\"\n               []\n               [(Term.structInstField\n                 (Term.structInstLVal `app [])\n                 \":=\"\n                 (Term.fun\n                  \"fun\"\n                  (Term.basicFun\n                   [`X]\n                   []\n                   \"=>\"\n                   (Term.app\n                    `eq_to_hom\n                    [(Term.byTactic\n                      \"by\"\n                      (Tactic.tacticSeq\n                       (Tactic.tacticSeq1Indented\n                        [(Tactic.simp\n                          \"simp\"\n                          []\n                          []\n                          []\n                          [\"[\" [(Tactic.simpLemma [] [(patternIgnore (token.¬´‚Üê ¬ª \"‚Üê\"))] `h‚ÇÇ)] \"]\"]\n                          [])])))]))))\n                []\n                (Term.structInstField\n                 (Term.structInstLVal `naturality' [])\n                 \":=\"\n                 (Term.fun\n                  \"fun\"\n                  (Term.basicFun\n                   [(Term.hole \"_\") (Term.hole \"_\") (Term.hole \"_\")]\n                   []\n                   \"=>\"\n                   (Term.byTactic\n                    \"by\"\n                    (Tactic.tacticSeq\n                     (Tactic.tacticSeq1Indented\n                      [(Std.Tactic.Ext.¬´tacticExt___:_¬ª \"ext\" [] []) [] (Tactic.simp \"simp\" [] [] [] [] [])]))))))]\n               (Term.optEllipsis [])\n               []\n               \"}\"))))\n           []\n           (Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `c‚ÇÅ\n              []\n              [(Term.typeSpec\n                \":\"\n                (Term.app `cone [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [`s]) (Term.app `pre [`s.X `K `F])])]))]\n              \":=\"\n              (Term.app\n               (Term.proj\n                (Term.app\n                 `cones.postcompose\n                 [(Term.typeAscription\n                   \"(\"\n                   (Term.app `whisker_right [`Œ±‚ÇÅ (Term.app `pre [`s.X `K `F])])\n                   \":\"\n                   [(Term.hole \"_\")]\n                   \")\")])\n                \".\"\n                `obj)\n               [(Term.app `to_cone [`F `c `f‚ÇÅ])]))))\n           []\n           (Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `c‚ÇÇ\n              []\n              [(Term.typeSpec\n                \":\"\n                (Term.app `cone [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [`s]) (Term.app `pre [`s.X `K `F])])]))]\n              \":=\"\n              (Term.app\n               (Term.proj\n                (Term.app\n                 `cones.postcompose\n                 [(Term.typeAscription\n                   \"(\"\n                   (Term.app `whisker_right [`Œ±‚ÇÇ (Term.app `pre [`s.X `K `F])])\n                   \":\"\n                   [(Term.hole \"_\")]\n                   \")\")])\n                \".\"\n                `obj)\n               [(Term.app `to_cone [`F `c `f‚ÇÇ])]))))\n           []\n           (Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `c‚ÇÄ\n              []\n              []\n              \":=\"\n              (Term.app `is_cofiltered.cone [(Term.app `bicone_mk [(Term.hole \"_\") `c‚ÇÅ `c‚ÇÇ])]))))\n           []\n           (Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `g‚ÇÅ\n              []\n              [(Term.typeSpec \":\" (Term.app `¬´expr ‚ü∂ ¬ª [`c‚ÇÄ.X `c‚ÇÅ.X]))]\n              \":=\"\n              (Term.app `c‚ÇÄ.œÄ.app [`bicone.left]))))\n           []\n           (Tactic.tacticLet_\n            \"let\"\n            (Term.letDecl\n             (Term.letIdDecl\n              `g‚ÇÇ\n              []\n              [(Term.typeSpec \":\" (Term.app `¬´expr ‚ü∂ ¬ª [`c‚ÇÄ.X `c‚ÇÇ.X]))]\n              \":=\"\n              (Term.app `c‚ÇÄ.œÄ.app [`bicone.right]))))\n           []\n           (Tactic.tacticHave_\n            \"have\"\n            (Term.haveDecl\n             (Term.haveIdDecl\n              []\n              [(Term.typeSpec\n                \":\"\n                (Term.forall\n                 \"‚àÄ\"\n                 [`j]\n                 [(Term.typeSpec \":\" `J)]\n                 \",\"\n                 (¬´term_=_¬ª\n                  (Term.app `¬´expr ‚â´ ¬ª [`g‚ÇÅ.right (Term.app `c.œÄ.app [`j])])\n                  \"=\"\n                  (Term.app `¬´expr ‚â´ ¬ª [`g‚ÇÇ.right (Term.app `c.œÄ.app [`j])]))))]\n              \":=\"\n              (Term.byTactic\n               \"by\"\n               (Tactic.tacticSeq\n                (Tactic.tacticSeq1Indented\n                 [(Tactic.intro \"intro\" [`j])\n                  []\n                  (Tactic.injection\n                   \"injection\"\n                   (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.left [`j])])\n                   [\"with\" [\"_\" `e‚ÇÅ]])\n                  []\n                  (Tactic.injection\n                   \"injection\"\n                   (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.right [`j])])\n                   [\"with\" [\"_\" `e‚ÇÇ]])\n                  []\n                  (Std.Tactic.Simpa.simpa\n                   \"simpa\"\n                   []\n                   []\n                   (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] [\"using\" (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))]))))))\n           []\n           (Tactic.tacticHave_\n            \"have\"\n            (Term.haveDecl\n             (Term.haveIdDecl\n              []\n              [(Term.typeSpec \":\" (¬´term_=_¬ª (Term.app `c.extend [`g‚ÇÅ.right]) \"=\" (Term.app `c.extend [`g‚ÇÇ.right])))]\n              \":=\"\n              (Term.byTactic\n               \"by\"\n               (Tactic.tacticSeq\n                (Tactic.tacticSeq1Indented\n                 [(Tactic.unfold \"unfold\" [`cone.extend] [])\n                  []\n                  (Tactic.congr \"congr\" [(num \"1\")])\n                  []\n                  (Std.Tactic.Ext.¬´tacticExt___:_¬ª\n                   \"ext\"\n                   [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))]\n                   [])\n                  []\n                  (Tactic.apply \"apply\" `this)]))))))\n           []\n           (Mathlib.Tactic.tacticHave_ \"have\" [] [(Term.typeSpec \":\" (¬´term_=_¬ª `g‚ÇÅ.right \"=\" `g‚ÇÇ.right))])\n           []\n           (calcTactic\n            \"calc\"\n            (calcStep\n             (¬´term_=_¬ª `g‚ÇÅ.right \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÅ.right])]))\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq\n               (Tactic.tacticSeq1Indented\n                [(Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n                 []\n                 (Tactic.tidy \"tidy\" [])]))))\n            [(calcStep\n              (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÇ.right])]))\n              \":=\"\n              (Term.byTactic\n               \"by\"\n               (Tactic.tacticSeq\n                (Tactic.tacticSeq1Indented [(Tactic.congr \"congr\" []) [] (Tactic.exact \"exact\" `this)]))))\n             (calcStep\n              (¬´term_=_¬ª (Term.hole \"_\") \"=\" `g‚ÇÇ.right)\n              \":=\"\n              (Term.byTactic\n               \"by\"\n               (Tactic.tacticSeq\n                (Tactic.tacticSeq1Indented\n                 [(Mathlib.Tactic.tacticSymm_ \"symm\" [])\n                  []\n                  (Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n                  []\n                  (Tactic.tidy \"tidy\" [])]))))])\n           []\n           (calcTactic\n            \"calc\"\n            (calcStep\n             (¬´term_=_¬ª `f‚ÇÅ \"=\" (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÅ]))\n             \":=\"\n             (Term.byTactic \"by\" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])]))))\n            [(calcStep\n              (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÅ.right])]))\n              \":=\"\n              `g‚ÇÅ.w)\n             (calcStep\n              (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÇ.right])]))\n              \":=\"\n              (Term.byTactic\n               \"by\"\n               (Tactic.tacticSeq\n                (Tactic.tacticSeq1Indented\n                 [(Tactic.rwSeq \"rw\" [] (Tactic.rwRuleSeq \"[\" [(Tactic.rwRule [] `this)] \"]\") [])]))))\n             (calcStep\n              (¬´term_=_¬ª\n               (Term.hole \"_\")\n               \"=\"\n               (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÇ]))\n              \":=\"\n              `g‚ÇÇ.w.symm)\n             (calcStep\n              (¬´term_=_¬ª (Term.hole \"_\") \"=\" `f‚ÇÇ)\n              \":=\"\n              (Term.byTactic\n               \"by\"\n               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])]))))])])))\n       [])\n      []\n      []))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `Œ±‚ÇÅ\n             []\n             [(Term.typeSpec\n               \":\"\n               (Term.app\n                `¬´expr ‚ü∂ ¬ª\n                [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [(Term.app `F.map_cone [`c])]) (Term.app `map [`f‚ÇÅ])])\n                 (Term.app `to_diagram [`s])]))]\n             \":=\"\n             (Term.structInst\n              \"{\"\n              []\n              [(Term.structInstField\n                (Term.structInstLVal `app [])\n                \":=\"\n                (Term.fun\n                 \"fun\"\n                 (Term.basicFun\n                  [`X]\n                  []\n                  \"=>\"\n                  (Term.app\n                   `eq_to_hom\n                   [(Term.byTactic\n                     \"by\"\n                     (Tactic.tacticSeq\n                      (Tactic.tacticSeq1Indented\n                       [(Tactic.simp\n                         \"simp\"\n                         []\n                         []\n                         []\n                         [\"[\" [(Tactic.simpLemma [] [(patternIgnore (token.¬´‚Üê ¬ª \"‚Üê\"))] `h‚ÇÅ)] \"]\"]\n                         [])])))]))))\n               []\n               (Term.structInstField\n                (Term.structInstLVal `naturality' [])\n                \":=\"\n                (Term.fun\n                 \"fun\"\n                 (Term.basicFun\n                  [(Term.hole \"_\") (Term.hole \"_\") (Term.hole \"_\")]\n                  []\n                  \"=>\"\n                  (Term.byTactic\n                   \"by\"\n                   (Tactic.tacticSeq\n                    (Tactic.tacticSeq1Indented\n                     [(Std.Tactic.Ext.¬´tacticExt___:_¬ª \"ext\" [] []) [] (Tactic.simp \"simp\" [] [] [] [] [])]))))))]\n              (Term.optEllipsis [])\n              []\n              \"}\"))))\n          []\n          (Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `Œ±‚ÇÇ\n             []\n             [(Term.typeSpec\n               \":\"\n               (Term.app\n                `¬´expr ‚ü∂ ¬ª\n                [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [(Term.app `F.map_cone [`c])]) (Term.app `map [`f‚ÇÇ])])\n                 (Term.app `to_diagram [`s])]))]\n             \":=\"\n             (Term.structInst\n              \"{\"\n              []\n              [(Term.structInstField\n                (Term.structInstLVal `app [])\n                \":=\"\n                (Term.fun\n                 \"fun\"\n                 (Term.basicFun\n                  [`X]\n                  []\n                  \"=>\"\n                  (Term.app\n                   `eq_to_hom\n                   [(Term.byTactic\n                     \"by\"\n                     (Tactic.tacticSeq\n                      (Tactic.tacticSeq1Indented\n                       [(Tactic.simp\n                         \"simp\"\n                         []\n                         []\n                         []\n                         [\"[\" [(Tactic.simpLemma [] [(patternIgnore (token.¬´‚Üê ¬ª \"‚Üê\"))] `h‚ÇÇ)] \"]\"]\n                         [])])))]))))\n               []\n               (Term.structInstField\n                (Term.structInstLVal `naturality' [])\n                \":=\"\n                (Term.fun\n                 \"fun\"\n                 (Term.basicFun\n                  [(Term.hole \"_\") (Term.hole \"_\") (Term.hole \"_\")]\n                  []\n                  \"=>\"\n                  (Term.byTactic\n                   \"by\"\n                   (Tactic.tacticSeq\n                    (Tactic.tacticSeq1Indented\n                     [(Std.Tactic.Ext.¬´tacticExt___:_¬ª \"ext\" [] []) [] (Tactic.simp \"simp\" [] [] [] [] [])]))))))]\n              (Term.optEllipsis [])\n              []\n              \"}\"))))\n          []\n          (Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `c‚ÇÅ\n             []\n             [(Term.typeSpec\n               \":\"\n               (Term.app `cone [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [`s]) (Term.app `pre [`s.X `K `F])])]))]\n             \":=\"\n             (Term.app\n              (Term.proj\n               (Term.app\n                `cones.postcompose\n                [(Term.typeAscription\n                  \"(\"\n                  (Term.app `whisker_right [`Œ±‚ÇÅ (Term.app `pre [`s.X `K `F])])\n                  \":\"\n                  [(Term.hole \"_\")]\n                  \")\")])\n               \".\"\n               `obj)\n              [(Term.app `to_cone [`F `c `f‚ÇÅ])]))))\n          []\n          (Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `c‚ÇÇ\n             []\n             [(Term.typeSpec\n               \":\"\n               (Term.app `cone [(Term.app `¬´expr ‚ãô ¬ª [(Term.app `to_diagram [`s]) (Term.app `pre [`s.X `K `F])])]))]\n             \":=\"\n             (Term.app\n              (Term.proj\n               (Term.app\n                `cones.postcompose\n                [(Term.typeAscription\n                  \"(\"\n                  (Term.app `whisker_right [`Œ±‚ÇÇ (Term.app `pre [`s.X `K `F])])\n                  \":\"\n                  [(Term.hole \"_\")]\n                  \")\")])\n               \".\"\n               `obj)\n              [(Term.app `to_cone [`F `c `f‚ÇÇ])]))))\n          []\n          (Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `c‚ÇÄ\n             []\n             []\n             \":=\"\n             (Term.app `is_cofiltered.cone [(Term.app `bicone_mk [(Term.hole \"_\") `c‚ÇÅ `c‚ÇÇ])]))))\n          []\n          (Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `g‚ÇÅ\n             []\n             [(Term.typeSpec \":\" (Term.app `¬´expr ‚ü∂ ¬ª [`c‚ÇÄ.X `c‚ÇÅ.X]))]\n             \":=\"\n             (Term.app `c‚ÇÄ.œÄ.app [`bicone.left]))))\n          []\n          (Tactic.tacticLet_\n           \"let\"\n           (Term.letDecl\n            (Term.letIdDecl\n             `g‚ÇÇ\n             []\n             [(Term.typeSpec \":\" (Term.app `¬´expr ‚ü∂ ¬ª [`c‚ÇÄ.X `c‚ÇÇ.X]))]\n             \":=\"\n             (Term.app `c‚ÇÄ.œÄ.app [`bicone.right]))))\n          []\n          (Tactic.tacticHave_\n           \"have\"\n           (Term.haveDecl\n            (Term.haveIdDecl\n             []\n             [(Term.typeSpec\n               \":\"\n               (Term.forall\n                \"‚àÄ\"\n                [`j]\n                [(Term.typeSpec \":\" `J)]\n                \",\"\n                (¬´term_=_¬ª\n                 (Term.app `¬´expr ‚â´ ¬ª [`g‚ÇÅ.right (Term.app `c.œÄ.app [`j])])\n                 \"=\"\n                 (Term.app `¬´expr ‚â´ ¬ª [`g‚ÇÇ.right (Term.app `c.œÄ.app [`j])]))))]\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq\n               (Tactic.tacticSeq1Indented\n                [(Tactic.intro \"intro\" [`j])\n                 []\n                 (Tactic.injection\n                  \"injection\"\n                  (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.left [`j])])\n                  [\"with\" [\"_\" `e‚ÇÅ]])\n                 []\n                 (Tactic.injection\n                  \"injection\"\n                  (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.right [`j])])\n                  [\"with\" [\"_\" `e‚ÇÇ]])\n                 []\n                 (Std.Tactic.Simpa.simpa\n                  \"simpa\"\n                  []\n                  []\n                  (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] [\"using\" (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))]))))))\n          []\n          (Tactic.tacticHave_\n           \"have\"\n           (Term.haveDecl\n            (Term.haveIdDecl\n             []\n             [(Term.typeSpec \":\" (¬´term_=_¬ª (Term.app `c.extend [`g‚ÇÅ.right]) \"=\" (Term.app `c.extend [`g‚ÇÇ.right])))]\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq\n               (Tactic.tacticSeq1Indented\n                [(Tactic.unfold \"unfold\" [`cone.extend] [])\n                 []\n                 (Tactic.congr \"congr\" [(num \"1\")])\n                 []\n                 (Std.Tactic.Ext.¬´tacticExt___:_¬ª\n                  \"ext\"\n                  [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))]\n                  [])\n                 []\n                 (Tactic.apply \"apply\" `this)]))))))\n          []\n          (Mathlib.Tactic.tacticHave_ \"have\" [] [(Term.typeSpec \":\" (¬´term_=_¬ª `g‚ÇÅ.right \"=\" `g‚ÇÇ.right))])\n          []\n          (calcTactic\n           \"calc\"\n           (calcStep\n            (¬´term_=_¬ª `g‚ÇÅ.right \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÅ.right])]))\n            \":=\"\n            (Term.byTactic\n             \"by\"\n             (Tactic.tacticSeq\n              (Tactic.tacticSeq1Indented\n               [(Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n                []\n                (Tactic.tidy \"tidy\" [])]))))\n           [(calcStep\n             (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÇ.right])]))\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq\n               (Tactic.tacticSeq1Indented [(Tactic.congr \"congr\" []) [] (Tactic.exact \"exact\" `this)]))))\n            (calcStep\n             (¬´term_=_¬ª (Term.hole \"_\") \"=\" `g‚ÇÇ.right)\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq\n               (Tactic.tacticSeq1Indented\n                [(Mathlib.Tactic.tacticSymm_ \"symm\" [])\n                 []\n                 (Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n                 []\n                 (Tactic.tidy \"tidy\" [])]))))])\n          []\n          (calcTactic\n           \"calc\"\n           (calcStep\n            (¬´term_=_¬ª `f‚ÇÅ \"=\" (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÅ]))\n            \":=\"\n            (Term.byTactic \"by\" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])]))))\n           [(calcStep\n             (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÅ.right])]))\n             \":=\"\n             `g‚ÇÅ.w)\n            (calcStep\n             (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÇ.right])]))\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq\n               (Tactic.tacticSeq1Indented\n                [(Tactic.rwSeq \"rw\" [] (Tactic.rwRuleSeq \"[\" [(Tactic.rwRule [] `this)] \"]\") [])]))))\n            (calcStep\n             (¬´term_=_¬ª\n              (Term.hole \"_\")\n              \"=\"\n              (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÇ]))\n             \":=\"\n             `g‚ÇÇ.w.symm)\n            (calcStep\n             (¬´term_=_¬ª (Term.hole \"_\") \"=\" `f‚ÇÇ)\n             \":=\"\n             (Term.byTactic\n              \"by\"\n              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])]))))])])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (calcTactic\n       \"calc\"\n       (calcStep\n        (¬´term_=_¬ª `f‚ÇÅ \"=\" (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÅ]))\n        \":=\"\n        (Term.byTactic \"by\" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])]))))\n       [(calcStep\n         (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÅ.right])]))\n         \":=\"\n         `g‚ÇÅ.w)\n        (calcStep\n         (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÇ.right])]))\n         \":=\"\n         (Term.byTactic\n          \"by\"\n          (Tactic.tacticSeq\n           (Tactic.tacticSeq1Indented\n            [(Tactic.rwSeq \"rw\" [] (Tactic.rwRuleSeq \"[\" [(Tactic.rwRule [] `this)] \"]\") [])]))))\n        (calcStep\n         (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÇ]))\n         \":=\"\n         `g‚ÇÇ.w.symm)\n        (calcStep\n         (¬´term_=_¬ª (Term.hole \"_\") \"=\" `f‚ÇÇ)\n         \":=\"\n         (Term.byTactic \"by\" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])]))))])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic \"by\" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.simp \"simp\" [] [] [] [] [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.hole \"_\") \"=\" `f‚ÇÇ)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `f‚ÇÇ\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))\n      `g‚ÇÇ.w.symm\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÇ]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÇ])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `f‚ÇÇ\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      (Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      (Term.app `¬´exprùüô¬ª [])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `¬´exprùüô¬ª\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1024, term) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `¬´exprùüô¬ª []) \")\")\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren\n     \"(\"\n     (Term.app (Term.paren \"(\" (Term.app `¬´exprùüô¬ª []) \")\") [(Term.hole \"_\")])\n     \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `¬´expr ‚â´ ¬ª\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented [(Tactic.rwSeq \"rw\" [] (Tactic.rwRuleSeq \"[\" [(Tactic.rwRule [] `this)] \"]\") [])])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.rwSeq \"rw\" [] (Tactic.rwRuleSeq \"[\" [(Tactic.rwRule [] `this)] \"]\") [])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `this\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÇ.right])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÇ.right])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `F.map [`g‚ÇÇ.right])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÇ.right\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `F.map\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `F.map [`g‚ÇÇ.right]) \")\")\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `c‚ÇÄ.X.hom\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `¬´expr ‚â´ ¬ª\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))\n      `g‚ÇÅ.w\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÅ.right])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `¬´expr ‚â´ ¬ª [`c‚ÇÄ.X.hom (Term.app `F.map [`g‚ÇÅ.right])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `F.map [`g‚ÇÅ.right])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÅ.right\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `F.map\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `F.map [`g‚ÇÅ.right]) \")\")\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      `c‚ÇÄ.X.hom\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `¬´expr ‚â´ ¬ª\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))\n      (Term.byTactic \"by\" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp \"simp\" [] [] [] [] [])])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.simp \"simp\" [] [] [] [] [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª `f‚ÇÅ \"=\" (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÅ]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `¬´expr ‚â´ ¬ª [(Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")]) `f‚ÇÅ])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `f‚ÇÅ\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))\n      (Term.app (Term.app `¬´exprùüô¬ª []) [(Term.hole \"_\")])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      (Term.app `¬´exprùüô¬ª [])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `¬´exprùüô¬ª\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1024, term) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `¬´exprùüô¬ª []) \")\")\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren\n     \"(\"\n     (Term.app (Term.paren \"(\" (Term.app `¬´exprùüô¬ª []) \")\") [(Term.hole \"_\")])\n     \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `¬´expr ‚â´ ¬ª\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      `f‚ÇÅ\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (calcTactic\n       \"calc\"\n       (calcStep\n        (¬´term_=_¬ª `g‚ÇÅ.right \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÅ.right])]))\n        \":=\"\n        (Term.byTactic\n         \"by\"\n         (Tactic.tacticSeq\n          (Tactic.tacticSeq1Indented\n           [(Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n            []\n            (Tactic.tidy \"tidy\" [])]))))\n       [(calcStep\n         (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÇ.right])]))\n         \":=\"\n         (Term.byTactic\n          \"by\"\n          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.congr \"congr\" []) [] (Tactic.exact \"exact\" `this)]))))\n        (calcStep\n         (¬´term_=_¬ª (Term.hole \"_\") \"=\" `g‚ÇÇ.right)\n         \":=\"\n         (Term.byTactic\n          \"by\"\n          (Tactic.tacticSeq\n           (Tactic.tacticSeq1Indented\n            [(Mathlib.Tactic.tacticSymm_ \"symm\" [])\n             []\n             (Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n             []\n             (Tactic.tidy \"tidy\" [])]))))])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Mathlib.Tactic.tacticSymm_ \"symm\" [])\n          []\n          (Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n          []\n          (Tactic.tidy \"tidy\" [])])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.tidy \"tidy\" [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `c.extend [(Term.hole \"_\")])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `c.extend\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `c.extend [(Term.hole \"_\")]) \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `hc.uniq\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Mathlib.Tactic.tacticSymm_ \"symm\" [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.hole \"_\") \"=\" `g‚ÇÇ.right)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÇ.right\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.congr \"congr\" []) [] (Tactic.exact \"exact\" `this)])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.exact \"exact\" `this)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `this\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.congr \"congr\" [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.hole \"_\") \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÇ.right])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÇ.right])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `c.extend [`g‚ÇÇ.right])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÇ.right\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `c.extend\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `c.extend [`g‚ÇÇ.right]) \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `hc.lift\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n          []\n          (Tactic.tidy \"tidy\" [])])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.tidy \"tidy\" [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.apply \"apply\" (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `hc.uniq [(Term.app `c.extend [(Term.hole \"_\")])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `c.extend [(Term.hole \"_\")])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.hole \"_\")\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `c.extend\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `c.extend [(Term.hole \"_\")]) \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `hc.uniq\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª `g‚ÇÅ.right \"=\" (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÅ.right])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `hc.lift [(Term.app `c.extend [`g‚ÇÅ.right])])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `c.extend [`g‚ÇÅ.right])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÅ.right\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `c.extend\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesized: (Term.paren \"(\" (Term.app `c.extend [`g‚ÇÅ.right]) \")\")\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `hc.lift\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      `g‚ÇÅ.right\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Mathlib.Tactic.tacticHave_ \"have\" [] [(Term.typeSpec \":\" (¬´term_=_¬ª `g‚ÇÅ.right \"=\" `g‚ÇÇ.right))])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª `g‚ÇÅ.right \"=\" `g‚ÇÇ.right)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÇ.right\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      `g‚ÇÅ.right\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.tacticHave_\n       \"have\"\n       (Term.haveDecl\n        (Term.haveIdDecl\n         []\n         [(Term.typeSpec \":\" (¬´term_=_¬ª (Term.app `c.extend [`g‚ÇÅ.right]) \"=\" (Term.app `c.extend [`g‚ÇÇ.right])))]\n         \":=\"\n         (Term.byTactic\n          \"by\"\n          (Tactic.tacticSeq\n           (Tactic.tacticSeq1Indented\n            [(Tactic.unfold \"unfold\" [`cone.extend] [])\n             []\n             (Tactic.congr \"congr\" [(num \"1\")])\n             []\n             (Std.Tactic.Ext.¬´tacticExt___:_¬ª\n              \"ext\"\n              [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))]\n              [])\n             []\n             (Tactic.apply \"apply\" `this)]))))))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Tactic.unfold \"unfold\" [`cone.extend] [])\n          []\n          (Tactic.congr \"congr\" [(num \"1\")])\n          []\n          (Std.Tactic.Ext.¬´tacticExt___:_¬ª\n           \"ext\"\n           [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))]\n           [])\n          []\n          (Tactic.apply \"apply\" `this)])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.apply \"apply\" `this)\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `this\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Std.Tactic.Ext.¬´tacticExt___:_¬ª\n       \"ext\"\n       [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))]\n       [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.congr \"congr\" [(num \"1\")])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.unfold \"unfold\" [`cone.extend] [])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (¬´term_=_¬ª (Term.app `c.extend [`g‚ÇÅ.right]) \"=\" (Term.app `c.extend [`g‚ÇÇ.right]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `c.extend [`g‚ÇÇ.right])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÇ.right\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `c.extend\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))\n      (Term.app `c.extend [`g‚ÇÅ.right])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `g‚ÇÅ.right\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `c.extend\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.tacticHave_\n       \"have\"\n       (Term.haveDecl\n        (Term.haveIdDecl\n         []\n         [(Term.typeSpec\n           \":\"\n           (Term.forall\n            \"‚àÄ\"\n            [`j]\n            [(Term.typeSpec \":\" `J)]\n            \",\"\n            (¬´term_=_¬ª\n             (Term.app `¬´expr ‚â´ ¬ª [`g‚ÇÅ.right (Term.app `c.œÄ.app [`j])])\n             \"=\"\n             (Term.app `¬´expr ‚â´ ¬ª [`g‚ÇÇ.right (Term.app `c.œÄ.app [`j])]))))]\n         \":=\"\n         (Term.byTactic\n          \"by\"\n          (Tactic.tacticSeq\n           (Tactic.tacticSeq1Indented\n            [(Tactic.intro \"intro\" [`j])\n             []\n             (Tactic.injection\n              \"injection\"\n              (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.left [`j])])\n              [\"with\" [\"_\" `e‚ÇÅ]])\n             []\n             (Tactic.injection\n              \"injection\"\n              (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.right [`j])])\n              [\"with\" [\"_\" `e‚ÇÇ]])\n             []\n             (Std.Tactic.Simpa.simpa\n              \"simpa\"\n              []\n              []\n              (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] [\"using\" (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))]))))))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.byTactic\n       \"by\"\n       (Tactic.tacticSeq\n        (Tactic.tacticSeq1Indented\n         [(Tactic.intro \"intro\" [`j])\n          []\n          (Tactic.injection\n           \"injection\"\n           (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.left [`j])])\n           [\"with\" [\"_\" `e‚ÇÅ]])\n          []\n          (Tactic.injection\n           \"injection\"\n           (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.right [`j])])\n           [\"with\" [\"_\" `e‚ÇÇ]])\n          []\n          (Std.Tactic.Simpa.simpa\n           \"simpa\"\n           []\n           []\n           (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] [\"using\" (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))])))\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Std.Tactic.Simpa.simpa\n       \"simpa\"\n       []\n       []\n       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] [\"using\" (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])]))\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Term.app `e‚ÇÅ.symm.trans [`e‚ÇÇ])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      `e‚ÇÇ\n[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))\n      `e‚ÇÅ.symm.trans\n[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])\n[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022\n[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))\n      (Tactic.injection \"injection\" (Term.app `c‚ÇÄ.œÄ.naturality [(Term.app `bicone_hom.right [`j])]) [\"with\" [\"_\" `e‚ÇÇ]])\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '_', expected 'ident'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind '_', expected 'Lean.Parser.Term.hole'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'\n[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception\ntheorem\n  uniq\n  { K : ¬´expr ‚•§ ¬ª J C }\n      { c : cone K }\n      ( hc : is_limit c )\n      ( s : cone ¬´expr ‚ãô ¬ª K F )\n      ( f‚ÇÅ f‚ÇÇ : ¬´expr ‚ü∂ ¬ª s . X F . obj c . X )\n      ( h‚ÇÅ : ‚àÄ j : J , ¬´expr ‚â´ ¬ª f‚ÇÅ F . map_cone c . œÄ . app j = s . œÄ . app j )\n      ( h‚ÇÇ : ‚àÄ j : J , ¬´expr ‚â´ ¬ª f‚ÇÇ F . map_cone c . œÄ . app j = s . œÄ . app j )\n    : f‚ÇÅ = f‚ÇÇ\n  :=\n    by\n      let\n          Œ±‚ÇÅ\n            : ¬´expr ‚ü∂ ¬ª ¬´expr ‚ãô ¬ª to_diagram F.map_cone c map f‚ÇÅ to_diagram s\n            :=\n            { app := fun X => eq_to_hom by simp [ ‚Üê h‚ÇÅ ] naturality' := fun _ _ _ => by ext simp }\n        let\n          Œ±‚ÇÇ\n            : ¬´expr ‚ü∂ ¬ª ¬´expr ‚ãô ¬ª to_diagram F.map_cone c map f‚ÇÇ to_diagram s\n            :=\n            { app := fun X => eq_to_hom by simp [ ‚Üê h‚ÇÇ ] naturality' := fun _ _ _ => by ext simp }\n        let\n          c‚ÇÅ\n            : cone ¬´expr ‚ãô ¬ª to_diagram s pre s.X K F\n            :=\n            cones.postcompose ( whisker_right Œ±‚ÇÅ pre s.X K F : _ ) . obj to_cone F c f‚ÇÅ\n        let\n          c‚ÇÇ\n            : cone ¬´expr ‚ãô ¬ª to_diagram s pre s.X K F\n            :=\n            cones.postcompose ( whisker_right Œ±‚ÇÇ pre s.X K F : _ ) . obj to_cone F c f‚ÇÇ\n        let c‚ÇÄ := is_cofiltered.cone bicone_mk _ c‚ÇÅ c‚ÇÇ\n        let g‚ÇÅ : ¬´expr ‚ü∂ ¬ª c‚ÇÄ.X c‚ÇÅ.X := c‚ÇÄ.œÄ.app bicone.left\n        let g‚ÇÇ : ¬´expr ‚ü∂ ¬ª c‚ÇÄ.X c‚ÇÇ.X := c‚ÇÄ.œÄ.app bicone.right\n        have\n          : ‚àÄ j : J , ¬´expr ‚â´ ¬ª g‚ÇÅ.right c.œÄ.app j = ¬´expr ‚â´ ¬ª g‚ÇÇ.right c.œÄ.app j\n            :=\n            by\n              intro j\n                injection c‚ÇÄ.œÄ.naturality bicone_hom.left j with _ e‚ÇÅ\n                injection c‚ÇÄ.œÄ.naturality bicone_hom.right j with _ e‚ÇÇ\n                simpa using e‚ÇÅ.symm.trans e‚ÇÇ\n        have : c.extend g‚ÇÅ.right = c.extend g‚ÇÇ.right := by unfold cone.extend congr 1 ext x apply this\n        have : g‚ÇÅ.right = g‚ÇÇ.right\n        calc\n          g‚ÇÅ.right = hc.lift c.extend g‚ÇÅ.right := by apply hc.uniq c.extend _ tidy\n          _ = hc.lift c.extend g‚ÇÇ.right := by congr exact this _ = g‚ÇÇ.right := by symm apply hc.uniq c.extend _ tidy\n        calc\n          f‚ÇÅ = ¬´expr ‚â´ ¬ª ¬´exprùüô¬ª _ f‚ÇÅ := by simp\n          _ = ¬´expr ‚â´ ¬ª c‚ÇÄ.X.hom F.map g‚ÇÅ.right := g‚ÇÅ.w\n            _ = ¬´expr ‚â´ ¬ª c‚ÇÄ.X.hom F.map g‚ÇÇ.right := by rw [ this ]\n            _ = ¬´expr ‚â´ ¬ª ¬´exprùüô¬ª _ f‚ÇÇ := g‚ÇÇ.w.symm\n            _ = f‚ÇÇ := by simp\n#align uniq uniq\n\n",
 "flat_of_preserves_finite_limits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\ntheorem flat_of_preserves_finite_limits [has_finite_limits C] (F : ¬´expr ‚•§ ¬ª C D) [preserves_finite_limits F] :\n    representably_flat F :=\n  ‚ü®fun X =>\n    haveI : has_finite_limits (structured_arrow X F) :=\n      by\n      apply has_finite_limits_of_has_finite_limits_of_size.{v‚ÇÅ} (structured_arrow X F)\n      intro J sJ fJ; skip; constructor\n    cofiltered_of_has_finite_limits‚ü©\n#align flat_of_preserves_finite_limits flat_of_preserves_finite_limits\n\n",
 "flat_iff_Lan_flat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·µí·µñ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚•§ ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·µí·µñ¬ª -/\ntheorem flat_iff_Lan_flat (F : ¬´expr ‚•§ ¬ª C D) :\n    representably_flat F ‚Üî representably_flat (Lan F.op : ¬´expr ‚•§ ¬ª _ (¬´expr ‚•§ ¬ª (¬´expr ·µí·µñ¬ª D) (Type u‚ÇÅ))) :=\n  ‚ü®fun H => infer_instance, fun H => by\n    skip\n    haveI := preserves_finite_limits_of_flat (Lan F.op : ¬´expr ‚•§ ¬ª _ (¬´expr ‚•§ ¬ª (¬´expr ·µí·µñ¬ª D) (Type u‚ÇÅ)))\n    haveI : preserves_finite_limits F :=\n      by\n      apply preserves_finite_limits_of_preserves_finite_limits_of_size.{u‚ÇÅ}\n      intros ; skip; apply preserves_limit_of_Lan_presesrves_limit\n    apply flat_of_preserves_finite_limits‚ü©\n#align flat_iff_Lan_flat flat_iff_Lan_flat\n\n",
 "fac":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚â´ ¬ª -/\ntheorem fac (x : J) : ¬´expr ‚â´ ¬ª (lift F hc s) ((F.map_cone c).œÄ.app x) = s.œÄ.app x := by\n  simpa [lift, ‚Üê functor.map_comp]\n#align fac fac\n\n",
 "cofiltered_of_has_finite_limits":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚ä§_ ¬ª -/\n/-\nCopyright (c) 2021 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem cofiltered_of_has_finite_limits [has_finite_limits C] : is_cofiltered C :=\n  { cone_objs := fun A B => ‚ü®limits.prod A B, limits.prod.fst, limits.prod.snd, trivial‚ü©\n    cone_maps := fun A B f g => ‚ü®equalizer f g, equalizer.Œπ f g, equalizer.condition f g‚ü©\n    nonempty := ‚ü®¬´expr‚ä§_ ¬ª C‚ü© }\n#align cofiltered_of_has_finite_limits cofiltered_of_has_finite_limits\n\n"}