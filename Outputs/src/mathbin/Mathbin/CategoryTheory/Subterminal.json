{"subterminals_to_mono_over_terminal_comp_forget":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n@[simp]\ntheorem subterminals_to_mono_over_terminal_comp_forget [has_terminal C] :\n    «expr ⋙ » (subterminals_equiv_mono_over_terminal C).functor («expr ⋙ » (mono_over.forget _) (over.forget _)) =\n      subterminal_inclusion C :=\n  rfl\n#align subterminals_to_mono_over_terminal_comp_forget subterminals_to_mono_over_terminal_comp_forget\n\n",
 "mono_terminal_from":
 "/-- If `A` is subterminal, the unique morphism from it to the terminal object is a monomorphism.\nThe converse of `is_subterminal_of_mono_terminal_from`.\n-/\ntheorem is_subterminal.mono_terminal_from [has_terminal C] (hA : is_subterminal A) : Mono (terminal.from A) :=\n  hA.mono_is_terminal_from terminal_is_terminal\n#align is_subterminal.mono_terminal_from is_subterminal.mono_terminal_from\n\n",
 "mono_over_terminal_to_subterminals_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n@[simp]\ntheorem mono_over_terminal_to_subterminals_comp [has_terminal C] :\n    «expr ⋙ » (subterminals_equiv_mono_over_terminal C).inverse (subterminal_inclusion C) =\n      «expr ⋙ » (mono_over.forget _) (over.forget _) :=\n  rfl\n#align mono_over_terminal_to_subterminals_comp mono_over_terminal_to_subterminals_comp\n\n",
 "mono_is_terminal_from":
 "/-- If `A` is subterminal, the unique morphism from it to a terminal object is a monomorphism.\nThe converse of `is_subterminal_of_mono_is_terminal_from`.\n-/\ntheorem is_subterminal.mono_is_terminal_from (hA : is_subterminal A) {T : C} (hT : is_terminal T) : Mono (hT.from A) :=\n  { right_cancellation := fun Z g h _ => hA _ _ }\n#align is_subterminal.mono_is_terminal_from is_subterminal.mono_is_terminal_from\n\n",
 "is_subterminal_of_terminal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤_ » -/\ntheorem is_subterminal_of_terminal [has_terminal C] : is_subterminal («expr⊤_ » C) := fun Z f g => subsingleton.elim _ _\n#align is_subterminal_of_terminal is_subterminal_of_terminal\n\n",
 "is_subterminal_of_mono_terminal_from":
 "/-- If the unique morphism from `A` to the terminal object is a monomorphism, `A` is subterminal.\nThe converse of `is_subterminal.mono_terminal_from`.\n-/\ntheorem is_subterminal_of_mono_terminal_from [has_terminal C] [Mono (terminal.from A)] : is_subterminal A :=\n  fun Z f g => by\n  rw [← cancel_mono (terminal.from A)]\n  apply subsingleton.elim\n#align is_subterminal_of_mono_terminal_from is_subterminal_of_mono_terminal_from\n\n",
 "is_subterminal_of_mono_is_terminal_from":
 "/-- If the unique morphism from `A` to a terminal object is a monomorphism, `A` is subterminal.\nThe converse of `is_subterminal.mono_is_terminal_from`.\n-/\ntheorem is_subterminal_of_mono_is_terminal_from {T : C} (hT : is_terminal T) [Mono (hT.from A)] : is_subterminal A :=\n  fun Z f g => by\n  rw [← cancel_mono (hT.from A)]\n  apply hT.hom_ext\n#align is_subterminal_of_mono_is_terminal_from is_subterminal_of_mono_is_terminal_from\n\n",
 "is_subterminal_of_is_terminal":
 "theorem is_subterminal_of_is_terminal {T : C} (hT : is_terminal T) : is_subterminal T := fun Z f g => hT.hom_ext _ _\n#align is_subterminal_of_is_terminal is_subterminal_of_is_terminal\n\n",
 "is_subterminal_of_is_iso_diag":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/-- If the diagonal morphism of `A` is an isomorphism, then it is subterminal.\nThe converse of `is_subterminal.is_iso_diag`.\n-/\ntheorem is_subterminal_of_is_iso_diag [has_binary_product A A] [IsIso (diag A)] : is_subterminal A := fun Z f g =>\n  by\n  have : (limits.prod.fst : «expr ⟶ » («expr ⨯ » A A) _) = limits.prod.snd := by simp [← cancel_epi (diag A)]\n  rw [← prod.lift_fst f g, this, prod.lift_snd]\n#align is_subterminal_of_is_iso_diag is_subterminal_of_is_iso_diag\n\n",
 "is_iso_diag":
 "/-- If `A` is subterminal, its diagonal morphism is an isomorphism.\nThe converse of `is_subterminal_of_is_iso_diag`.\n-/\ntheorem is_subterminal.is_iso_diag (hA : is_subterminal A) [has_binary_product A A] : IsIso (diag A) :=\n  ⟨⟨limits.prod.fst,\n      ⟨by simp, by\n        rw [is_subterminal.def] at hA\n        tidy⟩⟩⟩\n#align is_subterminal.is_iso_diag is_subterminal.is_iso_diag\n\n",
 "def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\ntheorem is_subterminal.def : is_subterminal A ↔ ∀ ⦃Z : C⦄ (f g : «expr ⟶ » Z A), f = g :=\n  iff.rfl\n#align is_subterminal.def is_subterminal.def\n\n"}