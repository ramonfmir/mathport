{"prod_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-\nCopyright (c) 2017 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Stephen Morgan, Scott Morrison\n-/\n-- declare the `v`'s first; see `category_theory.category` for an explanation\n-- the generates simp lemmas like `id_fst` and `comp_snd`\n/-- Two rfl lemmas that cannot be generated by `@[simps]`. -/\n@[simp]\ntheorem prod_id (X : C) (Y : D) : («expr𝟙») (X, Y) = ((«expr𝟙») X, («expr𝟙») Y) :=\n  rfl\n#align prod_id prod_id\n\n",
 "prod_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem prod_comp {P Q R : C} {S T U : D} (f : «expr ⟶ » (P, S) (Q, T)) (g : «expr ⟶ » (Q, T) (R, U)) :\n    «expr ≫ » f g = («expr ≫ » f.1 g.1, «expr ≫ » f.2 g.2) :=\n  rfl\n#align prod_comp prod_comp\n\n",
 "is_iso_prod_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem is_iso_prod_iff {P Q : C} {S T : D} {f : «expr ⟶ » (P, S) (Q, T)} : IsIso f ↔ IsIso f.1 ∧ IsIso f.2 :=\n  by\n  constructor\n  · rintro ⟨g, hfg, hgf⟩\n    simp at hfg hgf\n    rcases hfg with ⟨hfg₁, hfg₂⟩\n    rcases hgf with ⟨hgf₁, hgf₂⟩\n    exact ⟨⟨⟨g.1, hfg₁, hgf₁⟩⟩, ⟨⟨g.2, hfg₂, hgf₂⟩⟩⟩\n  · rintro ⟨⟨g₁, hfg₁, hgf₁⟩, ⟨g₂, hfg₂, hgf₂⟩⟩\n    dsimp at hfg₁ hgf₁ hfg₂ hgf₂\n    refine' ⟨⟨(g₁, g₂), _, _⟩⟩ <;> · simp <;> constructor <;> assumption\n#align is_iso_prod_iff is_iso_prod_iff\n\n",
 "diag_obj":
 "-- Next we define the natural functors into and out of product categories. For now this doesn't\n-- address the universal properties.\n/- Because of limitations in Lean 3's handling of notations, we do not setup a notation `F × G`.\n   You can use `F.prod G` as a \"poor man's infix\", or just write `functor.prod F G`. -/\n@[simp]\ntheorem diag_obj (X : C) : (diag C).obj X = (X, X) :=\n  rfl\n#align diag_obj diag_obj\n\n",
 "diag_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem diag_map {X Y : C} (f : «expr ⟶ » X Y) : (diag C).map f = (f, f) :=\n  rfl\n#align diag_map diag_map\n\n"}