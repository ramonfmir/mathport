{"map_id_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_id_comp (F : «expr ⥤ » (C × D) E) (W : C) {X Y Z : D} (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) :\n    F.map (((«expr𝟙») W, «expr ≫ » f g) : «expr ⟶ » (W, X) (W, Z)) =\n      «expr ≫ » (F.map (((«expr𝟙») W, f) : «expr ⟶ » (W, X) (W, Y)))\n        (F.map (((«expr𝟙») W, g) : «expr ⟶ » (W, Y) (W, Z))) :=\n  by rw [← functor.map_comp, prod_comp, category.comp_id]\n#align map_id_comp map_id_comp\n\n",
 "map_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-\nCopyright (c) 2017 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Stephen Morgan, Scott Morrison\n-/\n@[simp]\ntheorem map_id (F : «expr ⥤ » (C × D) E) (X : C) (Y : D) :\n    F.map (((«expr𝟙») X, («expr𝟙») Y) : «expr ⟶ » (X, Y) (X, Y)) = («expr𝟙») (F.obj (X, Y)) :=\n  F.map_id (X, Y)\n#align map_id map_id\n\n",
 "map_comp_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_comp_id (F : «expr ⥤ » (C × D) E) (X Y Z : C) (W : D) (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) :\n    F.map ((«expr ≫ » f g, («expr𝟙») W) : «expr ⟶ » (X, W) (Z, W)) =\n      «expr ≫ » (F.map ((f, («expr𝟙») W) : «expr ⟶ » (X, W) (Y, W)))\n        (F.map ((g, («expr𝟙») W) : «expr ⟶ » (Y, W) (Z, W))) :=\n  by rw [← functor.map_comp, prod_comp, category.comp_id]\n#align map_comp_id map_comp_id\n\n",
 "diagonal'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem diagonal' (F : «expr ⥤ » (C × D) E) (X X' : C) (f : «expr ⟶ » X X') (Y Y' : D) (g : «expr ⟶ » Y Y') :\n    «expr ≫ » (F.map ((f, («expr𝟙») Y) : «expr ⟶ » (X, Y) (X', Y)))\n        (F.map (((«expr𝟙») X', g) : «expr ⟶ » (X', Y) (X', Y'))) =\n      F.map ((f, g) : «expr ⟶ » (X, Y) (X', Y')) :=\n  by rw [← functor.map_comp, prod_comp, category.id_comp, category.comp_id]\n#align diagonal' diagonal'\n\n",
 "diagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem diagonal (F : «expr ⥤ » (C × D) E) (X X' : C) (f : «expr ⟶ » X X') (Y Y' : D) (g : «expr ⟶ » Y Y') :\n    «expr ≫ » (F.map (((«expr𝟙») X, g) : «expr ⟶ » (X, Y) (X, Y')))\n        (F.map ((f, («expr𝟙») Y') : «expr ⟶ » (X, Y') (X', Y'))) =\n      F.map ((f, g) : «expr ⟶ » (X, Y) (X', Y')) :=\n  by rw [← functor.map_comp, prod_comp, category.id_comp, category.comp_id]\n#align diagonal diagonal\n\n"}