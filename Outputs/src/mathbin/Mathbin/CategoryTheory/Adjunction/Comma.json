{"nonempty_is_right_adjoint_iff_has_initial_structured_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-\nCopyright (c) 2021 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\ntheorem nonempty_is_right_adjoint_iff_has_initial_structured_arrow {G : «expr ⥤ » D C} :\n    Nonempty (IsRightAdjoint G) ↔ ∀ A, HasInitial (StructuredArrow A G) :=\n  ⟨fun ⟨h⟩ A => (mk_initial_of_left_adjoint _ h.adj A).has_initial, fun h =>\n    ⟨is_right_adjoint_of_structured_arrow_initials _⟩⟩\n#align nonempty_is_right_adjoint_iff_has_initial_structured_arrow nonempty_is_right_adjoint_iff_has_initial_structured_arrow\n\n",
 "nonempty_is_left_adjoint_iff_has_terminal_costructured_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem nonempty_is_left_adjoint_iff_has_terminal_costructured_arrow {F : «expr ⥤ » C D} :\n    Nonempty (IsLeftAdjoint F) ↔ ∀ A, HasTerminal (CostructuredArrow F A) :=\n  ⟨fun ⟨h⟩ A => (mk_terminal_of_right_adjoint _ h.adj A).has_terminal, fun h =>\n    ⟨is_left_adjoint_of_costructured_arrow_terminals _⟩⟩\n#align nonempty_is_left_adjoint_iff_has_terminal_costructured_arrow nonempty_is_left_adjoint_iff_has_terminal_costructured_arrow\n\n"}