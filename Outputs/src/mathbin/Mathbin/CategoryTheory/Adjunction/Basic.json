{"unit_naturality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem unit_naturality {X Y : C} (f : «expr ⟶ » X Y) :\n    «expr ≫ » (adj.unit.app X) (G.map (F.map f)) = «expr ≫ » f (adj.unit.app Y) :=\n  (adj.unit.naturality f).symm\n#align unit_naturality unit_naturality\n\n",
 "right_triangle_components":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1]\ntheorem right_triangle_components {Y : D} :\n    «expr ≫ » (adj.unit.app (G.obj Y)) (G.map (adj.counit.app Y)) = («expr𝟙») (G.obj Y) :=\n  congr_arg (fun t : NatTrans _ («expr ⋙ » G ((«expr𝟭») C)) => t.app Y) adj.right_triangle\n#align right_triangle_components right_triangle_components\n\n",
 "right_triangle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem right_triangle : «expr ≫ » (whiskerLeft G adj.unit) (whiskerRight adj.counit G) = NatTrans.id _ :=\n  by\n  ext; dsimp\n  erw [← adj.hom_equiv_unit, ← Equiv.eq_symm_apply, adj.hom_equiv_counit]\n  simp\n#align right_triangle right_triangle\n\n",
 "right_adjoint_of_is_equivalence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n@[simp]\ntheorem right_adjoint_of_is_equivalence {F : «expr ⥤ » C D} [IsEquivalence F] : rightAdjoint F = inv F :=\n  rfl\n#align right_adjoint_of_is_equivalence right_adjoint_of_is_equivalence\n\n",
 "left_triangle_components":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1]\ntheorem left_triangle_components :\n    «expr ≫ » (F.map (adj.unit.app X)) (adj.counit.app (F.obj X)) = («expr𝟙») (F.obj X) :=\n  congr_arg (fun t : NatTrans _ («expr ⋙ » ((«expr𝟭») C) F) => t.app X) adj.left_triangle\n#align left_triangle_components left_triangle_components\n\n",
 "left_triangle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem left_triangle : «expr ≫ » (whiskerRight adj.unit F) (whiskerLeft F adj.counit) = NatTrans.id _ :=\n  by\n  ext; dsimp\n  erw [← adj.hom_equiv_counit, Equiv.symm_apply_eq, adj.hom_equiv_unit]\n  simp\n#align left_triangle left_triangle\n\n",
 "left_adjoint_of_is_equivalence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n@[simp]\ntheorem left_adjoint_of_is_equivalence {F : «expr ⥤ » C D} [IsEquivalence F] : leftAdjoint F = inv F :=\n  rfl\n#align left_adjoint_of_is_equivalence left_adjoint_of_is_equivalence\n\n",
 "hom_equiv_symm_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem hom_equiv_symm_id (X : D) : (adj.hom_equiv _ X).symm ((«expr𝟙») _) = adj.counit.app X := by simp\n#align hom_equiv_symm_id hom_equiv_symm_id\n\n",
 "hom_equiv_naturality_right_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem hom_equiv_naturality_right_symm (f : «expr ⟶ » X (G.obj Y)) (g : «expr ⟶ » Y Y') :\n    (adj.hom_equiv X Y').symm («expr ≫ » f (G.map g)) = «expr ≫ » ((adj.hom_equiv X Y).symm f) g := by\n  rw [Equiv.symm_apply_eq] <;> simp\n#align hom_equiv_naturality_right_symm hom_equiv_naturality_right_symm\n\n",
 "hom_equiv_naturality_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem hom_equiv_naturality_right (f : «expr ⟶ » (F.obj X) Y) (g : «expr ⟶ » Y Y') :\n    (adj.hom_equiv X Y') («expr ≫ » f g) = «expr ≫ » ((adj.hom_equiv X Y) f) (G.map g) := by\n  rw [hom_equiv_unit, G.map_comp, ← assoc, ← hom_equiv_unit]\n#align hom_equiv_naturality_right hom_equiv_naturality_right\n\n",
 "hom_equiv_naturality_left_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem hom_equiv_naturality_left_symm (f : «expr ⟶ » X' X) (g : «expr ⟶ » X (G.obj Y)) :\n    (adj.hom_equiv X' Y).symm («expr ≫ » f g) = «expr ≫ » (F.map f) ((adj.hom_equiv X Y).symm g) := by\n  rw [hom_equiv_counit, F.map_comp, assoc, adj.hom_equiv_counit.symm]\n#align hom_equiv_naturality_left_symm hom_equiv_naturality_left_symm\n\n",
 "hom_equiv_naturality_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem hom_equiv_naturality_left (f : «expr ⟶ » X' X) (g : «expr ⟶ » (F.obj X) Y) :\n    (adj.hom_equiv X' Y) («expr ≫ » (F.map f) g) = «expr ≫ » f ((adj.hom_equiv X Y) g) := by\n  rw [← Equiv.eq_symm_apply] <;> simp\n#align hom_equiv_naturality_left hom_equiv_naturality_left\n\n",
 "hom_equiv_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/-\nCopyright (c) 2019 Reid Barton. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Reid Barton, Johan Commelin, Bhavik Mehta\n-/\n-- declare the `v`'s first; see `category_theory.category` for an explanation\ntheorem hom_equiv_id (X : C) : adj.hom_equiv X _ ((«expr𝟙») _) = adj.unit.app X := by simp\n#align hom_equiv_id hom_equiv_id\n\n",
 "hom_equiv_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem hom_equiv_apply_eq {A : C} {B : D} (f : «expr ⟶ » (F.obj A) B) (g : «expr ⟶ » A (G.obj B)) :\n    adj.hom_equiv A B f = g ↔ f = (adj.hom_equiv A B).symm g :=\n  ⟨fun h => by\n    cases h\n    simp, fun h => by\n    cases h\n    simp⟩\n#align hom_equiv_apply_eq hom_equiv_apply_eq\n\n",
 "he'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- Construction of a right adjoint, analogous to the above.\nprivate theorem he' {X' X Y} (f g) : «expr ≫ » (F.map f) ((e X Y).symm g) = (e X' Y).symm («expr ≫ » f g) := by\n  intros <;> rw [Equiv.eq_symm_apply, he] <;> simp\n#align he' he'\n\n",
 "eq_hom_equiv_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem eq_hom_equiv_apply {A : C} {B : D} (f : «expr ⟶ » (F.obj A) B) (g : «expr ⟶ » A (G.obj B)) :\n    g = adj.hom_equiv A B f ↔ (adj.hom_equiv A B).symm g = f :=\n  ⟨fun h => by\n    cases h\n    simp, fun h => by\n    cases h\n    simp⟩\n#align eq_hom_equiv_apply eq_hom_equiv_apply\n\n",
 "counit_naturality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem counit_naturality {X Y : D} (f : «expr ⟶ » X Y) :\n    «expr ≫ » (F.map (G.map f)) (adj.counit.app Y) = «expr ≫ » (adj.counit.app X) f :=\n  adj.counit.naturality f\n#align counit_naturality counit_naturality\n\n",
 "as_equivalence_to_adjunction_unit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≌ » -/\n@[simp]\ntheorem as_equivalence_to_adjunction_unit {e : «expr ≌ » C D} : e.functor.as_equivalence.to_adjunction.unit = e.unit :=\n  rfl\n#align as_equivalence_to_adjunction_unit as_equivalence_to_adjunction_unit\n\n",
 "as_equivalence_to_adjunction_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≌ » -/\n@[simp]\ntheorem as_equivalence_to_adjunction_counit {e : «expr ≌ » C D} :\n    e.functor.as_equivalence.to_adjunction.counit = e.counit :=\n  rfl\n#align as_equivalence_to_adjunction_counit as_equivalence_to_adjunction_counit\n\n"}