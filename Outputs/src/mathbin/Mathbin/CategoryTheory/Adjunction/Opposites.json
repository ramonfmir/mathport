{"unit_right_adjoint_uniq_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem unit_right_adjoint_uniq_hom_app {F : «expr ⥤ » C D} {G G' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') (x : C) :\n    «expr ≫ » (adj1.unit.app x) ((right_adjoint_uniq adj1 adj2).hom.app (F.obj x)) = adj2.unit.app x :=\n  by\n  apply quiver.hom.op_inj\n  convert\n    left_adjoint_uniq_hom_app_counit (op_adjoint_op_of_adjoint _ _ adj2) (op_adjoint_op_of_adjoint _ _ adj1)\n      (opposite.op x)\n  all_goals simpa\n#align unit_right_adjoint_uniq_hom_app unit_right_adjoint_uniq_hom_app\n\n",
 "unit_right_adjoint_uniq_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem unit_right_adjoint_uniq_hom {F : «expr ⥤ » C D} {G G' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') : «expr ≫ » adj1.unit (whiskerLeft F (right_adjoint_uniq adj1 adj2).hom) = adj2.unit :=\n  by\n  ext x\n  simp\n#align unit_right_adjoint_uniq_hom unit_right_adjoint_uniq_hom\n\n",
 "unit_left_adjoint_uniq_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem unit_left_adjoint_uniq_hom_app {F F' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) (x : C) :\n    «expr ≫ » (adj1.unit.app x) (G.map ((left_adjoint_uniq adj1 adj2).hom.app x)) = adj2.unit.app x :=\n  by\n  rw [← unit_left_adjoint_uniq_hom adj1 adj2]\n  rfl\n#align unit_left_adjoint_uniq_hom_app unit_left_adjoint_uniq_hom_app\n\n",
 "unit_left_adjoint_uniq_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem unit_left_adjoint_uniq_hom {F F' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) : «expr ≫ » adj1.unit (whiskerRight (left_adjoint_uniq adj1 adj2).hom G) = adj2.unit :=\n  by\n  ext x\n  rw [nat_trans.comp_app, ← hom_equiv_left_adjoint_uniq_hom_app adj1 adj2]\n  simp [-hom_equiv_left_adjoint_uniq_hom_app, ← G.map_comp]\n#align unit_left_adjoint_uniq_hom unit_left_adjoint_uniq_hom\n\n",
 "right_adjoint_uniq_trans_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem right_adjoint_uniq_trans_app {F : «expr ⥤ » C D} {G G' G'' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') (adj3 : «expr ⊣ » F G'') (x : D) :\n    «expr ≫ » ((right_adjoint_uniq adj1 adj2).hom.app x) ((right_adjoint_uniq adj2 adj3).hom.app x) =\n      (right_adjoint_uniq adj1 adj3).hom.app x :=\n  by\n  apply quiver.hom.op_inj\n  exact\n    left_adjoint_uniq_trans_app (op_adjoint_op_of_adjoint _ _ adj3) (op_adjoint_op_of_adjoint _ _ adj2)\n      (op_adjoint_op_of_adjoint _ _ adj1) (opposite.op x)\n#align right_adjoint_uniq_trans_app right_adjoint_uniq_trans_app\n\n",
 "right_adjoint_uniq_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem right_adjoint_uniq_trans {F : «expr ⥤ » C D} {G G' G'' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') (adj3 : «expr ⊣ » F G'') :\n    «expr ≫ » (right_adjoint_uniq adj1 adj2).hom (right_adjoint_uniq adj2 adj3).hom =\n      (right_adjoint_uniq adj1 adj3).hom :=\n  by\n  ext\n  simp\n#align right_adjoint_uniq_trans right_adjoint_uniq_trans\n\n",
 "right_adjoint_uniq_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem right_adjoint_uniq_refl {F : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G) :\n    (right_adjoint_uniq adj1 adj1).hom = («expr𝟙») _ :=\n  by\n  delta right_adjoint_uniq\n  simp\n#align right_adjoint_uniq_refl right_adjoint_uniq_refl\n\n",
 "right_adjoint_uniq_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n@[simp]\ntheorem right_adjoint_uniq_inv_app {F : «expr ⥤ » C D} {G G' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') (x : D) :\n    (right_adjoint_uniq adj1 adj2).inv.app x = (right_adjoint_uniq adj2 adj1).hom.app x :=\n  rfl\n#align right_adjoint_uniq_inv_app right_adjoint_uniq_inv_app\n\n",
 "right_adjoint_uniq_hom_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem right_adjoint_uniq_hom_counit {F : «expr ⥤ » C D} {G G' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') : «expr ≫ » (whiskerRight (right_adjoint_uniq adj1 adj2).hom F) adj2.counit = adj1.counit :=\n  by\n  ext\n  simp\n#align right_adjoint_uniq_hom_counit right_adjoint_uniq_hom_counit\n\n",
 "right_adjoint_uniq_hom_app_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem right_adjoint_uniq_hom_app_counit {F : «expr ⥤ » C D} {G G' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') (x : D) :\n    «expr ≫ » (F.map ((right_adjoint_uniq adj1 adj2).hom.app x)) (adj2.counit.app x) = adj1.counit.app x :=\n  by\n  apply quiver.hom.op_inj\n  convert\n    unit_left_adjoint_uniq_hom_app (op_adjoint_op_of_adjoint _ _ adj2) (op_adjoint_op_of_adjoint _ _ adj1)\n      (opposite.op x)\n  all_goals simpa\n#align right_adjoint_uniq_hom_app_counit right_adjoint_uniq_hom_app_counit\n\n",
 "left_adjoint_uniq_trans_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem left_adjoint_uniq_trans_app {F F' F'' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) (adj3 : «expr ⊣ » F'' G) (x : C) :\n    «expr ≫ » ((left_adjoint_uniq adj1 adj2).hom.app x) ((left_adjoint_uniq adj2 adj3).hom.app x) =\n      (left_adjoint_uniq adj1 adj3).hom.app x :=\n  by\n  rw [← left_adjoint_uniq_trans adj1 adj2 adj3]\n  rfl\n#align left_adjoint_uniq_trans_app left_adjoint_uniq_trans_app\n\n",
 "left_adjoint_uniq_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem left_adjoint_uniq_trans {F F' F'' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) (adj3 : «expr ⊣ » F'' G) :\n    «expr ≫ » (left_adjoint_uniq adj1 adj2).hom (left_adjoint_uniq adj2 adj3).hom = (left_adjoint_uniq adj1 adj3).hom :=\n  by\n  ext\n  apply quiver.hom.op_inj\n  apply coyoneda.map_injective\n  swap; infer_instance\n  ext\n  simp [left_adjoints_coyoneda_equiv, left_adjoint_uniq]\n#align left_adjoint_uniq_trans left_adjoint_uniq_trans\n\n",
 "left_adjoint_uniq_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem left_adjoint_uniq_refl {F : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G) :\n    (left_adjoint_uniq adj1 adj1).hom = («expr𝟙») _ := by\n  ext\n  apply quiver.hom.op_inj\n  apply coyoneda.map_injective\n  swap; infer_instance\n  ext\n  simp [left_adjoints_coyoneda_equiv, left_adjoint_uniq]\n#align left_adjoint_uniq_refl left_adjoint_uniq_refl\n\n",
 "left_adjoint_uniq_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n@[simp]\ntheorem left_adjoint_uniq_inv_app {F F' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) (x : C) :\n    (left_adjoint_uniq adj1 adj2).inv.app x = (left_adjoint_uniq adj2 adj1).hom.app x :=\n  rfl\n#align left_adjoint_uniq_inv_app left_adjoint_uniq_inv_app\n\n",
 "left_adjoint_uniq_hom_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem left_adjoint_uniq_hom_counit {F F' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) : «expr ≫ » (whiskerLeft G (left_adjoint_uniq adj1 adj2).hom) adj2.counit = adj1.counit :=\n  by\n  ext x\n  apply quiver.hom.op_inj\n  apply coyoneda.map_injective\n  swap\n  infer_instance\n  ext (y f)\n  have :\n    «expr ≫ » (F.map (adj2.unit.app (G.obj x)))\n        («expr ≫ » (adj1.counit.app (F'.obj (G.obj x))) («expr ≫ » (adj2.counit.app x) f)) =\n      «expr ≫ » (adj1.counit.app x) f :=\n    by\n    erw [← adj1.counit.naturality, ← F.map_comp_assoc]\n    simpa\n  simpa [left_adjoint_uniq, left_adjoints_coyoneda_equiv] using this\n#align left_adjoint_uniq_hom_counit left_adjoint_uniq_hom_counit\n\n",
 "left_adjoint_uniq_hom_app_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem left_adjoint_uniq_hom_app_counit {F F' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) (x : D) :\n    «expr ≫ » ((left_adjoint_uniq adj1 adj2).hom.app (G.obj x)) (adj2.counit.app x) = adj1.counit.app x :=\n  by\n  rw [← left_adjoint_uniq_hom_counit adj1 adj2]\n  rfl\n#align left_adjoint_uniq_hom_app_counit left_adjoint_uniq_hom_app_counit\n\n",
 "hom_equiv_symm_right_adjoint_uniq_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n@[simp]\ntheorem hom_equiv_symm_right_adjoint_uniq_hom_app {F : «expr ⥤ » C D} {G G' : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F G') (x : D) :\n    (adj2.hom_equiv _ _).symm ((right_adjoint_uniq adj1 adj2).hom.app x) = adj1.counit.app x :=\n  by\n  apply quiver.hom.op_inj\n  convert\n    hom_equiv_left_adjoint_uniq_hom_app (op_adjoint_op_of_adjoint _ F adj2) (op_adjoint_op_of_adjoint _ _ adj1)\n      (opposite.op x)\n  simpa\n#align hom_equiv_symm_right_adjoint_uniq_hom_app hom_equiv_symm_right_adjoint_uniq_hom_app\n\n",
 "hom_equiv_left_adjoint_uniq_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta, Thomas Read, Andrew Yang\n-/\n-- morphism levels before object levels. See note [category_theory universes].\n@[simp]\ntheorem hom_equiv_left_adjoint_uniq_hom_app {F F' : «expr ⥤ » C D} {G : «expr ⥤ » D C} (adj1 : «expr ⊣ » F G)\n    (adj2 : «expr ⊣ » F' G) (x : C) : adj1.hom_equiv _ _ ((left_adjoint_uniq adj1 adj2).hom.app x) = adj2.unit.app x :=\n  by\n  apply (adj1.hom_equiv _ _).symm.injective\n  apply quiver.hom.op_inj\n  apply coyoneda.map_injective\n  swap; infer_instance\n  ext (f y)\n  simpa [left_adjoint_uniq, left_adjoints_coyoneda_equiv]\n#align hom_equiv_left_adjoint_uniq_hom_app hom_equiv_left_adjoint_uniq_hom_app\n\n"}