{"unit_transfer_nat_trans_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem unit_transfer_nat_trans_self (f : «expr ⟶ » L₂ L₁) (X) :\n    «expr ≫ » (adj₁.unit.app _) ((transfer_nat_trans_self adj₁ adj₂ f).app _) =\n      «expr ≫ » (adj₂.unit.app X) (functor.map _ (f.app _)) :=\n  by\n  dsimp [transfer_nat_trans_self]\n  rw [id_comp, comp_id]\n  have := unit_transfer_nat_trans adj₁ adj₂ («expr ≫ » L₂.left_unitor.hom («expr ≫ » f L₁.right_unitor.inv)) X\n  dsimp at this\n  rw [this]\n  simp\n#align unit_transfer_nat_trans_self unit_transfer_nat_trans_self\n\n",
 "unit_transfer_nat_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem unit_transfer_nat_trans (f : «expr ⟶ » («expr ⋙ » G L₂) («expr ⋙ » L₁ H)) (X : C) :\n    «expr ≫ » (G.map (adj₁.unit.app X)) ((transfer_nat_trans adj₁ adj₂ f).app _) =\n      «expr ≫ » (adj₂.unit.app _) (R₂.map (f.app _)) :=\n  by\n  dsimp [transfer_nat_trans]\n  rw [← adj₂.unit_naturality_assoc, ← R₂.map_comp, ← functor.comp_map G L₂, f.naturality_assoc, functor.comp_map, ←\n    H.map_comp]\n  dsimp; simp\n#align unit_transfer_nat_trans unit_transfer_nat_trans\n\n",
 "transfer_nat_trans_self_symm_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `f` is a natural transformation whose un-transferred natural transformation is an isomorphism,\nthen `f` is an isomorphism.\nThe converse is given in `transfer_nat_trans_self_symm_iso`.\n-/\ntheorem transfer_nat_trans_self_symm_of_iso (f : «expr ⟶ » R₁ R₂) [IsIso ((transfer_nat_trans_self adj₁ adj₂).symm f)] :\n    IsIso f :=\n  by\n  suffices is_iso ((transfer_nat_trans_self adj₁ adj₂) ((transfer_nat_trans_self adj₁ adj₂).symm f)) by simpa using this\n  infer_instance\n#align transfer_nat_trans_self_symm_of_iso transfer_nat_trans_self_symm_of_iso\n\n",
 "transfer_nat_trans_self_symm_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n-- See library note [dsimp, simp]\n@[simp]\ntheorem transfer_nat_trans_self_symm_id : (transfer_nat_trans_self adj₁ adj₁).symm ((«expr𝟙») _) = («expr𝟙») _ :=\n  by\n  rw [equiv.symm_apply_eq]\n  simp\n#align transfer_nat_trans_self_symm_id transfer_nat_trans_self_symm_id\n\n",
 "transfer_nat_trans_self_symm_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem transfer_nat_trans_self_symm_comp (f g) :\n    «expr ≫ » ((transfer_nat_trans_self adj₂ adj₁).symm f) ((transfer_nat_trans_self adj₃ adj₂).symm g) =\n      (transfer_nat_trans_self adj₃ adj₁).symm («expr ≫ » g f) :=\n  by\n  rw [equiv.eq_symm_apply, ← transfer_nat_trans_self_comp _ adj₂]\n  simp\n#align transfer_nat_trans_self_symm_comp transfer_nat_trans_self_symm_comp\n\n",
 "transfer_nat_trans_self_symm_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem transfer_nat_trans_self_symm_comm {f g} (gf : «expr ≫ » g f = («expr𝟙») _) :\n    «expr ≫ » ((transfer_nat_trans_self adj₁ adj₂).symm f) ((transfer_nat_trans_self adj₂ adj₁).symm g) = («expr𝟙») _ :=\n  by rw [transfer_nat_trans_self_symm_comp, gf, transfer_nat_trans_self_symm_id]\n#align transfer_nat_trans_self_symm_comm transfer_nat_trans_self_symm_comm\n\n",
 "transfer_nat_trans_self_of_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `f` is a natural transformation whose transferred natural transformation is an isomorphism,\nthen `f` is an isomorphism.\nThe converse is given in `transfer_nat_trans_self_iso`.\n-/\ntheorem transfer_nat_trans_self_of_iso (f : «expr ⟶ » L₂ L₁) [IsIso (transfer_nat_trans_self adj₁ adj₂ f)] : IsIso f :=\n  by\n  suffices is_iso ((transfer_nat_trans_self adj₁ adj₂).symm (transfer_nat_trans_self adj₁ adj₂ f)) by simpa using this\n  infer_instance\n#align transfer_nat_trans_self_of_iso transfer_nat_trans_self_of_iso\n\n",
 "transfer_nat_trans_self_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem transfer_nat_trans_self_id : transfer_nat_trans_self adj₁ adj₁ ((«expr𝟙») _) = («expr𝟙») _ :=\n  by\n  ext\n  dsimp [transfer_nat_trans_self, transfer_nat_trans]\n  simp\n#align transfer_nat_trans_self_id transfer_nat_trans_self_id\n\n",
 "transfer_nat_trans_self_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- See library note [dsimp, simp]\ntheorem transfer_nat_trans_self_counit (f : «expr ⟶ » L₂ L₁) (X) :\n    «expr ≫ » (L₂.map ((transfer_nat_trans_self adj₁ adj₂ f).app _)) (adj₂.counit.app X) =\n      «expr ≫ » (f.app _) (adj₁.counit.app X) :=\n  by\n  dsimp [transfer_nat_trans_self]\n  rw [id_comp, comp_id]\n  have := transfer_nat_trans_counit adj₁ adj₂ («expr ≫ » L₂.left_unitor.hom («expr ≫ » f L₁.right_unitor.inv)) X\n  dsimp at this\n  rw [this]\n  simp\n#align transfer_nat_trans_self_counit transfer_nat_trans_self_counit\n\n",
 "transfer_nat_trans_self_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem transfer_nat_trans_self_comp (f g) :\n    «expr ≫ » (transfer_nat_trans_self adj₁ adj₂ f) (transfer_nat_trans_self adj₂ adj₃ g) =\n      transfer_nat_trans_self adj₁ adj₃ («expr ≫ » g f) :=\n  by\n  ext\n  dsimp [transfer_nat_trans_self, transfer_nat_trans]\n  simp only [id_comp, comp_id]\n  rw [← adj₃.unit_naturality_assoc, ← R₃.map_comp, g.naturality_assoc, L₂.map_comp, assoc, adj₂.counit_naturality,\n    adj₂.left_triangle_components_assoc, assoc]\n#align transfer_nat_trans_self_comp transfer_nat_trans_self_comp\n\n",
 "transfer_nat_trans_self_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem transfer_nat_trans_self_comm {f g} (gf : «expr ≫ » g f = («expr𝟙») _) :\n    «expr ≫ » (transfer_nat_trans_self adj₁ adj₂ f) (transfer_nat_trans_self adj₂ adj₁ g) = («expr𝟙») _ := by\n  rw [transfer_nat_trans_self_comp, gf, transfer_nat_trans_self_id]\n#align transfer_nat_trans_self_comm transfer_nat_trans_self_comm\n\n",
 "transfer_nat_trans_self_adjunction_id_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem transfer_nat_trans_self_adjunction_id_symm {L R : «expr ⥤ » C C} (adj : «expr ⊣ » L R)\n    (g : «expr ⟶ » R ((«expr𝟭») C)) (X : C) :\n    ((transfer_nat_trans_self adj adjunction.id).symm g).app X = «expr ≫ » (adj.unit.app X) (g.app (L.obj X)) :=\n  by\n  dsimp [transfer_nat_trans_self, transfer_nat_trans, adjunction.id]\n  simp only [comp_id, id_comp]\n#align transfer_nat_trans_self_adjunction_id_symm transfer_nat_trans_self_adjunction_id_symm\n\n",
 "transfer_nat_trans_self_adjunction_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem transfer_nat_trans_self_adjunction_id {L R : «expr ⥤ » C C} (adj : «expr ⊣ » L R)\n    (f : «expr ⟶ » ((«expr𝟭») C) L) (X : C) :\n    (transfer_nat_trans_self adj adjunction.id f).app X = «expr ≫ » (f.app (R.obj X)) (adj.counit.app X) :=\n  by\n  dsimp [transfer_nat_trans_self, transfer_nat_trans, adjunction.id]\n  simp only [comp_id, id_comp]\n#align transfer_nat_trans_self_adjunction_id transfer_nat_trans_self_adjunction_id\n\n",
 "transfer_nat_trans_counit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2020 Bhavik Mehta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bhavik Mehta\n-/\n-- See library note [dsimp, simp].\ntheorem transfer_nat_trans_counit (f : «expr ⟶ » («expr ⋙ » G L₂) («expr ⋙ » L₁ H)) (Y : D) :\n    «expr ≫ » (L₂.map ((transfer_nat_trans adj₁ adj₂ f).app _)) (adj₂.counit.app _) =\n      «expr ≫ » (f.app _) (H.map (adj₁.counit.app Y)) :=\n  by\n  erw [functor.map_comp]\n  simp\n#align transfer_nat_trans_counit transfer_nat_trans_counit\n\n"}