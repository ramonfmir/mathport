{"ι_jointly_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-- If there is a forgetful functor into `Type` that preserves enough (co)limits, then `D.ι` will\nbe jointly surjective. -/\ntheorem ι_jointly_surjective (F : «expr ⥤ » C (Type v)) [PreservesColimit D.diagram.multispan F]\n    [∀ i j k : D.J, PreservesLimit (cospan (D.f i j) (D.f i k)) F] (x : F.obj D.glued) :\n    ∃ (i : _)(y : F.obj (D.U i)), F.map (D.ι i) y = x :=\n  by\n  let e := D.glued_iso F\n  obtain ⟨i, y, eq⟩ := (D.map_glue_data F).types_ι_jointly_surjective (e.hom x)\n  replace eq := congr_arg e.inv Eq\n  change («expr ≫ » ((D.map_glue_data F).ι i) e.inv) y = («expr ≫ » e.hom e.inv) x at eq\n  rw [e.hom_inv_id, D.ι_glued_iso_inv] at eq\n  exact ⟨i, y, Eq⟩\n#align ι_jointly_surjective ι_jointly_surjective\n\n",
 "ι_glued_iso_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem ι_glued_iso_inv (i : D.J) : «expr ≫ » ((D.map_glue_data F).ι i) (D.glued_iso F).inv = F.map (D.ι i) := by\n  rw [iso.comp_inv_eq, ι_glued_iso_hom]\n#align ι_glued_iso_inv ι_glued_iso_inv\n\n",
 "ι_glued_iso_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem ι_glued_iso_hom (i : D.J) : «expr ≫ » (F.map (D.ι i)) (D.glued_iso F).hom = (D.map_glue_data F).ι i :=\n  by\n  erw [ι_preserves_colimits_iso_hom_assoc]\n  rw [has_colimit.iso_of_nat_iso_ι_hom]\n  erw [category.id_comp]\n  rfl\n#align ι_glued_iso_hom ι_glued_iso_hom\n\n",
 "types_π_surjective":
 "theorem types_π_surjective (D : GlueData (Type _)) : function.surjective D.π :=\n  (epi_iff_surjective _).mp inferInstance\n#align types_π_surjective types_π_surjective\n\n",
 "types_ι_jointly_surjective":
 "theorem types_ι_jointly_surjective (D : GlueData (Type _)) (x : D.glued) : ∃ (i : _)(y : D.U i), D.ι i y = x :=\n  by\n  delta CategoryTheory.GlueData.ι\n  simp_rw [← multicoequalizer.ι_sigma_π D.diagram]\n  rcases D.types_π_surjective x with ⟨x', rfl⟩\n  have := colimit.iso_colimit_cocone (types.coproduct_colimit_cocone _)\n  rw [←\n    show (colimit.iso_colimit_cocone (types.coproduct_colimit_cocone _)).inv _ = x' from\n      concrete_category.congr_hom (colimit.iso_colimit_cocone (types.coproduct_colimit_cocone _)).hom_inv_id x']\n  rcases(colimit.iso_colimit_cocone (types.coproduct_colimit_cocone _)).hom x' with ⟨i, y⟩\n  exact ⟨i, y, by simpa [← multicoequalizer.ι_sigma_π, -multicoequalizer.ι_sigma_π] ⟩\n#align types_ι_jointly_surjective types_ι_jointly_surjective\n\n",
 "t_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp, reassoc.1, elementwise]\ntheorem t_inv (i j : D.J) : «expr ≫ » (D.t i j) (D.t j i) = («expr𝟙») _ :=\n  by\n  have eq : (pullback_symmetry (D.f i i) (D.f i j)).hom = «expr ≫ » pullback.snd (inv pullback.fst) := by simp\n  have := D.cocycle i j i\n  rw [D.t'_iij, D.t'_jii, D.t'_iji, fst_eq_snd_of_mono_eq, Eq] at this\n  simp only [category.assoc, is_iso.inv_hom_id_assoc] at this\n  rw [← is_iso.eq_inv_comp, ← category.assoc, is_iso.comp_inv_eq] at this\n  simpa using this\n#align t_inv t_inv\n\n",
 "t'_jii":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem t'_jii (i j : D.J) : D.t' j i i = «expr ≫ » pullback.fst («expr ≫ » (D.t j i) (inv pullback.snd)) :=\n  by\n  rw [← category.assoc, ← D.t_fac]\n  simp\n#align t'_jii t'_jii\n\n",
 "t'_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\ntheorem t'_inv (i j k : D.J) :\n    «expr ≫ » (D.t' i j k) («expr ≫ » (pullbackSymmetry _ _).hom («expr ≫ » (D.t' j i k) (pullbackSymmetry _ _).hom)) =\n      («expr𝟙») _ :=\n  by\n  rw [← cancel_mono (pullback.fst : «expr ⟶ » (pullback (D.f i j) (D.f i k)) _)]\n  simp [t_fac, t_fac_assoc]\n#align t'_inv t'_inv\n\n",
 "t'_iji":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem t'_iji (i j : D.J) : D.t' i j i = «expr ≫ » pullback.fst («expr ≫ » (D.t i j) (inv pullback.snd)) :=\n  by\n  rw [← category.assoc, ← D.t_fac]\n  simp\n#align t'_iji t'_iji\n\n",
 "t'_iij":
 "/-\nCopyright (c) 2021 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\n@[simp]\ntheorem t'_iij (i j : D.J) : D.t' i i j = (pullbackSymmetry _ _).hom :=\n  by\n  have eq₁ := D.t_fac i i j\n  have eq₂ := (is_iso.eq_comp_inv (D.f i i)).mpr (@pullback.condition _ _ _ _ _ _ (D.f i j) _)\n  rw [D.t_id, category.comp_id, eq₂] at eq₁\n  have eq₃ := (is_iso.eq_comp_inv (D.f i i)).mp eq₁\n  rw [category.assoc, ← pullback.condition, ← category.assoc] at eq₃\n  exact mono.right_cancellation _ _ ((mono.right_cancellation _ _ eq₃).trans (pullback_symmetry_hom_comp_fst _ _).symm)\n#align t'_iij t'_iij\n\n",
 "t'_comp_eq_pullback_symmetry":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[reassoc.1]\ntheorem t'_comp_eq_pullback_symmetry (i j k : D.J) :\n    «expr ≫ » (D.t' j k i) (D.t' k i j) =\n      «expr ≫ » (pullbackSymmetry _ _).hom («expr ≫ » (D.t' j i k) (pullbackSymmetry _ _).hom) :=\n  by\n  trans inv (D.t' i j k)\n  · exact is_iso.eq_inv_of_hom_inv_id (D.cocycle _ _ _)\n  · rw [← cancel_mono (pullback.fst : «expr ⟶ » (pullback (D.f i j) (D.f i k)) _)]\n    simp [t_fac, t_fac_assoc]\n#align t'_comp_eq_pullback_symmetry t'_comp_eq_pullback_symmetry\n\n",
 "has_colimit_multispan_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem has_colimit_multispan_comp : HasColimit («expr ⋙ » D.diagram.multispan F) :=\n  ⟨⟨⟨_, preserves_colimit.preserves (colimit.isColimit _)⟩⟩⟩\n#align has_colimit_multispan_comp has_colimit_multispan_comp\n\n",
 "has_colimit_map_glue_data_diagram":
 "theorem has_colimit_map_glue_data_diagram : HasMulticoequalizer (D.map_glue_data F).diagram :=\n  hasColimitOfIso (D.diagram_iso F).symm\n#align has_colimit_map_glue_data_diagram has_colimit_map_glue_data_diagram\n\n",
 "glue_condition":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, elementwise]\ntheorem glue_condition (i j : D.J) : «expr ≫ » (D.t i j) («expr ≫ » (D.f j i) (D.ι j)) = «expr ≫ » (D.f i j) (D.ι i) :=\n  (Category.assoc _ _ _).symm.trans (Multicoequalizer.condition D.diagram ⟨i, j⟩).symm\n#align glue_condition glue_condition\n\n",
 "diagram_snd_from":
 "@[simp]\ntheorem diagram_snd_from (i j : D.J) : D.diagram.snd_from ⟨i, j⟩ = j :=\n  rfl\n#align diagram_snd_from diagram_snd_from\n\n",
 "diagram_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem diagram_snd (i j : D.J) : D.diagram.snd ⟨i, j⟩ = «expr ≫ » (D.t i j) (D.f j i) :=\n  rfl\n#align diagram_snd diagram_snd\n\n",
 "diagram_right":
 "@[simp]\ntheorem diagram_right : D.diagram.right = D.U :=\n  rfl\n#align diagram_right diagram_right\n\n",
 "diagram_left":
 "@[simp]\ntheorem diagram_left : D.diagram.left = D.V :=\n  rfl\n#align diagram_left diagram_left\n\n",
 "diagram_iso_inv_app_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem diagram_iso_inv_app_right (i : D.J) : (D.diagram_iso F).inv.app (walking_multispan.right i) = («expr𝟙») _ :=\n  rfl\n#align diagram_iso_inv_app_right diagram_iso_inv_app_right\n\n",
 "diagram_iso_inv_app_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem diagram_iso_inv_app_left (i : D.J × D.J) : (D.diagram_iso F).inv.app (walking_multispan.left i) = («expr𝟙») _ :=\n  rfl\n#align diagram_iso_inv_app_left diagram_iso_inv_app_left\n\n",
 "diagram_iso_hom_app_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem diagram_iso_hom_app_right (i : D.J) : (D.diagram_iso F).hom.app (walking_multispan.right i) = («expr𝟙») _ :=\n  rfl\n#align diagram_iso_hom_app_right diagram_iso_hom_app_right\n\n",
 "diagram_iso_hom_app_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem diagram_iso_hom_app_left (i : D.J × D.J) : (D.diagram_iso F).hom.app (walking_multispan.left i) = («expr𝟙») _ :=\n  rfl\n#align diagram_iso_hom_app_left diagram_iso_hom_app_left\n\n",
 "diagram_iso_app_right":
 "@[simp]\ntheorem diagram_iso_app_right (i : D.J) : (D.diagram_iso F).app (walking_multispan.right i) = Iso.refl _ :=\n  rfl\n#align diagram_iso_app_right diagram_iso_app_right\n\n",
 "diagram_iso_app_left":
 "@[simp]\ntheorem diagram_iso_app_left (i : D.J × D.J) : (D.diagram_iso F).app (walking_multispan.left i) = Iso.refl _ :=\n  rfl\n#align diagram_iso_app_left diagram_iso_app_left\n\n",
 "diagram_fst_from":
 "@[simp]\ntheorem diagram_fst_from (i j : D.J) : D.diagram.fst_from ⟨i, j⟩ = i :=\n  rfl\n#align diagram_fst_from diagram_fst_from\n\n",
 "diagram_fst":
 "@[simp]\ntheorem diagram_fst (i j : D.J) : D.diagram.fst ⟨i, j⟩ = D.f i j :=\n  rfl\n#align diagram_fst diagram_fst\n\n",
 "diagram_R":
 "@[simp]\ntheorem diagram_R : D.diagram.R = D.J :=\n  rfl\n#align diagram_R diagram_R\n\n",
 "diagram_L":
 "@[simp]\ntheorem diagram_L : D.diagram.L = (D.J × D.J) :=\n  rfl\n#align diagram_L diagram_L\n\n"}