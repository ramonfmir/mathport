{"right_adjoint_has_lift_iff":
 "/-- A square has a lifting if and only if its (right) adjoint square has a lifting. -/\ntheorem right_adjoint_has_lift_iff : has_lift (sq.right_adjoint adj) ↔ has_lift sq :=\n  by\n  simp only [has_lift.iff]\n  exact equiv.nonempty_congr (sq.right_adjoint_lift_struct_equiv adj).symm\n#align right_adjoint_has_lift_iff right_adjoint_has_lift_iff\n\n",
 "right_adjoint":
 "/-\nCopyright (c) 2022 Joël Riou. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joël Riou\n-/\n/-- When we have an adjunction `G ⊣ F`, any commutative square where the left\nmap is of the form `G.map i` and the right map is `p` has an \"adjoint\" commutative\nsquare whose left map is `i` and whose right map is `F.map p`. -/\ntheorem right_adjoint : comm_sq (adj.hom_equiv _ _ u) i (F.map p) (adj.hom_equiv _ _ v) :=\n  ⟨by\n    simp only [adjunction.hom_equiv_unit, assoc, ← F.map_comp, sq.w]\n    rw [F.map_comp, adjunction.unit_naturality_assoc]⟩\n#align right_adjoint right_adjoint\n\n",
 "left_adjoint_has_lift_iff":
 "/-- A (left) adjoint square has a lifting if and only if the original square has a lifting. -/\ntheorem left_adjoint_has_lift_iff : has_lift (sq.left_adjoint adj) ↔ has_lift sq :=\n  by\n  simp only [has_lift.iff]\n  exact equiv.nonempty_congr (sq.left_adjoint_lift_struct_equiv adj).symm\n#align left_adjoint_has_lift_iff left_adjoint_has_lift_iff\n\n",
 "left_adjoint":
 "/-- When we have an adjunction `G ⊣ F`, any commutative square where the left\nmap is of the form `i` and the right map is `F.map p` has an \"adjoint\" commutative\nsquare whose left map is `G.map i` and whose right map is `p`. -/\ntheorem left_adjoint : comm_sq ((adj.hom_equiv _ _).symm u) (G.map i) p ((adj.hom_equiv _ _).symm v) :=\n  ⟨by\n    simp only [adjunction.hom_equiv_counit, assoc, ← G.map_comp_assoc, ← sq.w]\n    rw [G.map_comp, assoc, adjunction.counit_naturality]⟩\n#align left_adjoint left_adjoint\n\n",
 "has_lifting_property_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊣ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem has_lifting_property_iff (adj : «expr ⊣ » G F) {A B : C} {X Y : D} (i : «expr ⟶ » A B) (p : «expr ⟶ » X Y) :\n    has_lifting_property (G.map i) p ↔ has_lifting_property i (F.map p) :=\n  by\n  constructor <;> intro <;> constructor <;> intro f g sq\n  · rw [← sq.left_adjoint_has_lift_iff adj]\n    infer_instance\n  · rw [← sq.right_adjoint_has_lift_iff adj]\n    infer_instance\n#align has_lifting_property_iff has_lifting_property_iff\n\n"}