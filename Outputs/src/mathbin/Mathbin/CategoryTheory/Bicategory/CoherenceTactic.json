{"bicategorical_comp_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bicategorical_comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2022 Yuma Mizuno. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yuma Mizuno\n-/\n-- type as \\ot \\gg\n-- type as \\ot \\gg\n-- To automatically insert unitors/associators at the beginning or end,\n-- you can use `η ⊗≫ 𝟙 _`\n@[simp]\ntheorem bicategorical_comp_refl {f g h : «expr ⟶ » a b} (η : «expr ⟶ » f g) (θ : «expr ⟶ » g h) :\n    bicategorical_comp η θ = «expr ≫ » η θ := by\n  dsimp [bicategorical_comp]\n  simp\n#align bicategorical_comp_refl bicategorical_comp_refl\n\n",
 "assoc_lift_hom₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- We have unused typeclass arguments here.\n-- They are intentional, to ensure that `simp only [assoc_lift_hom₂]` only left associates\n-- bicategorical structural morphisms.\n/-- Auxiliary simp lemma for the `coherence` tactic:\nthis move brackets to the left in order to expose a maximal prefix\nbuilt out of unitors and associators.\n-/\n@[nolint unused_arguments]\ntheorem assoc_lift_hom₂ {f g h i : «expr ⟶ » a b} [lift_hom f] [lift_hom g] [lift_hom h] (η : «expr ⟶ » f g)\n    (θ : «expr ⟶ » g h) (ι : «expr ⟶ » h i) [lift_hom₂ η] [lift_hom₂ θ] :\n    «expr ≫ » η («expr ≫ » θ ι) = «expr ≫ » («expr ≫ » η θ) ι :=\n  (Category.assoc _ _ _).symm\n#align assoc_lift_hom₂ assoc_lift_hom₂\n\n"}