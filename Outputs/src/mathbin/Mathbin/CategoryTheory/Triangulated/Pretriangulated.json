{"rot_of_dist_triangle":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (T «expr ∈ » «exprdist_triang »(C)) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/-\nCopyright (c) 2021 Luke Kershaw. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Luke Kershaw\n-/\n/-\nWe work in a preadditive category `C` equipped with an additive shift.\n-/\n/-- Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.\n-/\ntheorem rot_of_dist_triangle (T) (_ : T ∈ «exprdist_triang » C) : T.rotate ∈ «exprdist_triang » C :=\n  (rotate_distinguished_triangle T).mp H\n#align rot_of_dist_triangle rot_of_dist_triangle\n\n",
 "inv_rot_of_dist_triangle":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (T «expr ∈ » «exprdist_triang »(C)) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/-- Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.\n-/\ntheorem inv_rot_of_dist_triangle (T) (_ : T ∈ «exprdist_triang » C) : T.inv_rotate ∈ «exprdist_triang » C :=\n  (rotate_distinguished_triangle T.inv_rotate).mpr\n    (isomorphic_distinguished T H T.inv_rotate.rotate (invRotCompRot.app T))\n#align inv_rot_of_dist_triangle inv_rot_of_dist_triangle\n\n",
 "comp_dist_triangle_mor_zero₃₁":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (T «expr ∈ » «exprdist_triang »(C)) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Given any distinguished triangle\n```\n      f       g       h\n  X  ───> Y  ───> Z  ───> X⟦1⟧\n```\nthe composition `h ≫ f⟦1⟧ = 0`.\nSee <https://stacks.math.columbia.edu/tag/0146>\n-/\ntheorem comp_dist_triangle_mor_zero₃₁ (T) (_ : T ∈ «exprdist_triang » C) :\n    «expr ≫ » T.mor₃ ((shiftEquiv C 1).functor.map T.mor₁) = 0 :=\n  by\n  have H₂ := rot_of_dist_triangle C T.rotate (rot_of_dist_triangle C T H)\n  simpa using comp_dist_triangle_mor_zero₁₂ C T.rotate.rotate H₂\n#align comp_dist_triangle_mor_zero₃₁ comp_dist_triangle_mor_zero₃₁\n\n",
 "comp_dist_triangle_mor_zero₂₃":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (T «expr ∈ » «exprdist_triang »(C)) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Given any distinguished triangle\n```\n      f       g       h\n  X  ───> Y  ───> Z  ───> X⟦1⟧\n```\nthe composition `g ≫ h = 0`.\nSee <https://stacks.math.columbia.edu/tag/0146>\n-/\ntheorem comp_dist_triangle_mor_zero₂₃ (T) (_ : T ∈ «exprdist_triang » C) : «expr ≫ » T.mor₂ T.mor₃ = 0 :=\n  comp_dist_triangle_mor_zero₁₂ C T.rotate (rot_of_dist_triangle C T H)\n#align comp_dist_triangle_mor_zero₂₃ comp_dist_triangle_mor_zero₂₃\n\n",
 "comp_dist_triangle_mor_zero₁₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (T «expr ∈ » «exprdist_triang »(C)) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprdist_triang » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- Given any distinguished triangle\n```\n      f       g       h\n  X  ───> Y  ───> Z  ───> X⟦1⟧\n```\nthe composition `f ≫ g = 0`.\nSee <https://stacks.math.columbia.edu/tag/0146>\n-/\ntheorem comp_dist_triangle_mor_zero₁₂ (T) (_ : T ∈ «exprdist_triang » C) : «expr ≫ » T.mor₁ T.mor₂ = 0 :=\n  by\n  obtain ⟨c, hc⟩ :=\n    complete_distinguished_triangle_morphism _ _ (contractible_distinguished T.obj₁) H ((«expr𝟙») T.obj₁) T.mor₁ rfl\n  simpa only [contractible_triangle_mor₂, zero_comp] using hc.left.symm\n#align comp_dist_triangle_mor_zero₁₂ comp_dist_triangle_mor_zero₁₂\n\n"}