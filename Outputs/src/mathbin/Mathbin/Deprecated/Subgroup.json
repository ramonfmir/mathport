{"univ_subgroup":
 "@[to_additive]\ntheorem univ_subgroup : IsNormalSubgroup (@univ G) := by refine' { .. } <;> simp\n#align univ_subgroup univ_subgroup\n\n",
 "trivial_normal":
 "@[to_additive]\ntheorem trivial_normal : IsNormalSubgroup (trivial G) := by\n  refine' { .. } <;> simp (config := { contextual := true }) [trivial]\n#align trivial_normal trivial_normal\n\n",
 "trivial_ker_of_injective":
 "@[to_additive]\ntheorem trivial_ker_of_injective {f : G → H} (hf : IsGroupHom f) (h : function.injective f) : ker f = trivial G :=\n  Set.ext fun x =>\n    iff.intro\n      (fun hx => by\n        suffices f x = f 1 by simpa using h this\n        simp [hf.map_one] <;> rwa [mem_ker] at hx)\n      (by simp (config := { contextual := true }) [mem_ker, hf.map_one])\n#align trivial_ker_of_injective trivial_ker_of_injective\n\n",
 "trivial_ker_iff_eq_one":
 "@[to_additive]\ntheorem trivial_ker_iff_eq_one {f : G → H} (hf : IsGroupHom f) : ker f = trivial G ↔ ∀ x, f x = 1 → x = 1 := by\n  rw [Set.ext_iff] <;> simp [ker] <;>\n    exact ⟨fun h x hx => (h x).1 hx, fun h x => ⟨h x, fun hx => by rw [hx, hf.map_one]⟩⟩\n#align trivial_ker_iff_eq_one trivial_ker_iff_eq_one\n\n",
 "trivial_eq_closure":
 "@[to_additive]\ntheorem trivial_eq_closure : trivial G = Group.closure ∅ :=\n  Subset.antisymm (by simp [Set.subset_def, (Group.closure.isSubgroup _).one_mem])\n    (Group.closure_subset trivial_normal.to_is_subgroup <| by simp)\n#align trivial_eq_closure trivial_eq_closure\n\n",
 "subset_normalizer":
 "@[to_additive subset_add_normalizer]\ntheorem subset_normalizer {s : Set G} (hs : IsSubgroup s) : s ⊆ normalizer s := fun g hg n => by\n  rw [IsSubgroup.mul_mem_cancel_right hs ((IsSubgroup.inv_mem_iff hs).2 hg), IsSubgroup.mul_mem_cancel_left hs hg]\n#align subset_normalizer subset_normalizer\n\n",
 "subset_normal_closure":
 "theorem subset_normal_closure : s ⊆ normalClosure s :=\n  Set.Subset.trans subset_conjugatesOfSet conjugatesOfSet_subset_normalClosure\n#align subset_normal_closure subset_normal_closure\n\n",
 "subset_closure":
 "#print subset_closure /-\n@[to_additive]\ntheorem subset_closure {s : Set G} : s ⊆ closure s := fun a => mem_closure\n#align subset_closure subset_closure\n-/\n\n",
 "range_subgroup":
 "@[to_additive]\ntheorem range_subgroup {f : G → H} (hf : IsGroupHom f) : IsSubgroup (Set.range f) :=\n  @Set.image_univ _ _ f ▸ hf.image_subgroup univ_subgroup.to_is_subgroup\n#align range_subgroup range_subgroup\n\n",
 "preimage_normal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[to_additive]\ntheorem preimage_normal {f : G → H} (hf : IsGroupHom f) {s : Set H} (hs : IsNormalSubgroup s) :\n    IsNormalSubgroup («expr ⁻¹' » f s) :=\n  { one_mem := by simp [hf.map_one, hs.to_is_subgroup.one_mem]\n    mul_mem := by simp (config := { contextual := true }) [hf.map_mul, hs.to_is_subgroup.mul_mem]\n    inv_mem := by simp (config := { contextual := true }) [hf.map_inv, hs.to_is_subgroup.inv_mem]\n    normal := by simp (config := { contextual := true }) [hs.normal, hf.map_mul, hf.map_inv] }\n#align preimage_normal preimage_normal\n\n",
 "preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[to_additive]\ntheorem preimage {f : G → H} (hf : IsGroupHom f) {s : Set H} (hs : IsSubgroup s) : IsSubgroup («expr ⁻¹' » f s) := by\n  refine' { .. } <;>\n    simp (config := { contextual := true }) [hs.one_mem, hs.mul_mem, hs.inv_mem, hf.map_mul, hf.map_one, hf.map_inv,\n      inv_mem_class.inv_mem]\n#align preimage preimage\n\n",
 "one_ker_inv'":
 "@[to_additive]\ntheorem one_ker_inv' {f : G → H} (hf : IsGroupHom f) {a b : G} (h : f (a⁻¹ * b) = 1) : f a = f b :=\n  by\n  rw [hf.map_mul, hf.map_inv] at h\n  apply inv_injective\n  rw [eq_inv_of_mul_eq_one_left h]\n#align one_ker_inv' one_ker_inv'\n\n",
 "one_ker_inv":
 "@[to_additive]\ntheorem one_ker_inv {f : G → H} (hf : IsGroupHom f) {a b : G} (h : f (a * b⁻¹) = 1) : f a = f b :=\n  by\n  rw [hf.map_mul, hf.map_inv] at h\n  rw [← inv_inv (f b), eq_inv_of_mul_eq_one_left h]\n#align one_ker_inv one_ker_inv\n\n",
 "one_iff_ker_inv'":
 "@[to_additive]\ntheorem one_iff_ker_inv' {f : G → H} (hf : IsGroupHom f) (a b : G) : f a = f b ↔ f (a⁻¹ * b) = 1 :=\n  ⟨hf.inv_ker_one', hf.one_ker_inv'⟩\n#align one_iff_ker_inv' one_iff_ker_inv'\n\n",
 "one_iff_ker_inv":
 "@[to_additive]\ntheorem one_iff_ker_inv {f : G → H} (hf : IsGroupHom f) (a b : G) : f a = f b ↔ f (a * b⁻¹) = 1 :=\n  ⟨hf.inv_ker_one, hf.one_ker_inv⟩\n#align one_iff_ker_inv one_iff_ker_inv\n\n",
 "of_sub":
 "#print IsAddSubgroup.of_sub /-\ntheorem IsAddSubgroup.of_sub (s : Set A) (zero_mem : (0 : A) ∈ s) (sub_mem : ∀ {a b : A}, a ∈ s → b ∈ s → a - b ∈ s) :\n    IsAddSubgroup s :=\n  IsAddSubgroup.of_add_neg s zero_mem fun x y hx hy => by simpa only [sub_eq_add_neg] using sub_mem hx hy\n#align is_add_subgroup.of_sub IsAddSubgroup.of_sub\n-/\n\n",
 "of_normal":
 "#print Subgroup.of_normal /-\n-- this will never fire if it's an instance\n@[to_additive]\ntheorem Subgroup.of_normal [Group G] (s : Set G) (h : IsSubgroup s) (n : IsNormalSubgroup s) :\n    Subgroup.Normal (Subgroup.of h) :=\n  { conj_mem := n.normal }\n#align subgroup.of_normal Subgroup.of_normal\n#align add_subgroup.of_normal AddSubgroup.of_normal\n-/\n\n",
 "of_div":
 "#print IsSubgroup.of_div /-\n@[to_additive ofAdd_neg]\ntheorem IsSubgroup.of_div (s : Set G) (one_mem : (1 : G) ∈ s) (div_mem : ∀ {a b : G}, a ∈ s → b ∈ s → a * b⁻¹ ∈ s) :\n    IsSubgroup s :=\n  have inv_mem : ∀ a, a ∈ s → a⁻¹ ∈ s := fun a ha =>\n    by\n    have : 1 * a⁻¹ ∈ s := div_mem one_mem ha\n    simpa\n  { inv_mem\n    mul_mem := fun a b ha hb => by\n      have : a * b⁻¹⁻¹ ∈ s := div_mem ha (inv_mem b hb)\n      simpa\n    one_mem }\n#align is_subgroup.of_div IsSubgroup.of_div\n#align is_add_subgroup.of_add_neg IsAddSubgroup.of_add_neg\n-/\n\n",
 "normalizer_is_subgroup":
 "@[to_additive]\ntheorem normalizer_is_subgroup (s : Set G) : IsSubgroup (normalizer s) :=\n  { one_mem := by simp [normalizer]\n    mul_mem := fun a b (ha : ∀ n, n ∈ s ↔ a * n * a⁻¹ ∈ s) (hb : ∀ n, n ∈ s ↔ b * n * b⁻¹ ∈ s) n => by\n      rw [mul_inv_rev, ← mul_assoc, mul_assoc a, mul_assoc a, ← ha, ← hb]\n    inv_mem := fun a (ha : ∀ n, n ∈ s ↔ a * n * a⁻¹ ∈ s) n => by rw [ha (a⁻¹ * n * a⁻¹⁻¹)] <;> simp [mul_assoc] }\n#align normalizer_is_subgroup normalizer_is_subgroup\n\n",
 "normal_closure_subset_iff":
 "theorem normal_closure_subset_iff {s t : Set G} (ht : IsNormalSubgroup t) : s ⊆ t ↔ normalClosure s ⊆ t :=\n  ⟨normalClosure_subset ht, Set.Subset.trans subset_normalClosure⟩\n#align normal_closure_subset_iff normal_closure_subset_iff\n\n",
 "normal_closure_subset":
 "/-- The normal closure of s is the smallest normal subgroup containing s. -/\ntheorem normal_closure_subset {s t : Set G} (ht : IsNormalSubgroup t) (h : s ⊆ t) : normalClosure s ⊆ t := fun a w =>\n  by\n  induction' w with x hx x hx ihx x y hx hy ihx ihy\n  · exact conjugates_of_set_subset' ht h <| hx\n  · exact ht.to_is_subgroup.to_is_submonoid.one_mem\n  · exact ht.to_is_subgroup.inv_mem ihx\n  · exact ht.to_is_subgroup.to_is_submonoid.mul_mem ihx ihy\n#align normal_closure_subset normal_closure_subset\n\n",
 "normal_closure_mono":
 "theorem normal_closure_mono {s t : Set G} : s ⊆ t → normalClosure s ⊆ normalClosure t := fun h =>\n  normalClosure_subset normalClosure.is_normal (Set.Subset.trans h subset_normalClosure)\n#align normal_closure_mono normal_closure_mono\n\n",
 "mul_mem_cancel_right":
 "#print mul_mem_cancel_right /-\n@[to_additive]\ntheorem mul_mem_cancel_right (h : a ∈ s) : b * a ∈ s ↔ b ∈ s :=\n  ⟨fun hba => by simpa using hs.mul_mem hba (hs.inv_mem h), fun hb => hs.mul_mem hb h⟩\n#align mul_mem_cancel_right mul_mem_cancel_right\n#align add_mem_cancel_right add_mem_cancel_right\n-/\n\n",
 "mul_mem_cancel_left":
 "#print mul_mem_cancel_left /-\n@[to_additive]\ntheorem mul_mem_cancel_left (h : a ∈ s) : a * b ∈ s ↔ b ∈ s :=\n  ⟨fun hab => by simpa using hs.mul_mem (hs.inv_mem h) hab, hs.mul_mem h⟩\n#align mul_mem_cancel_left mul_mem_cancel_left\n#align add_mem_cancel_left add_mem_cancel_left\n-/\n\n",
 "mem_trivial":
 "@[simp, to_additive]\ntheorem mem_trivial {g : G} : g ∈ trivial G ↔ g = 1 :=\n  mem_singleton_iff\n#align mem_trivial mem_trivial\n\n",
 "mem_norm_comm_iff":
 "@[to_additive]\ntheorem mem_norm_comm_iff {s : Set G} (hs : IsNormalSubgroup s) {a b : G} : a * b ∈ s ↔ b * a ∈ s :=\n  ⟨mem_norm_comm hs, mem_norm_comm hs⟩\n#align mem_norm_comm_iff mem_norm_comm_iff\n\n",
 "mem_norm_comm":
 "-- Normal subgroup properties\n@[to_additive]\ntheorem mem_norm_comm {s : Set G} (hs : IsNormalSubgroup s) {a b : G} (hab : a * b ∈ s) : b * a ∈ s :=\n  by\n  have h : a⁻¹ * (a * b) * a⁻¹⁻¹ ∈ s := hs.normal (a * b) hab a⁻¹\n  simp at h <;> exact h\n#align mem_norm_comm mem_norm_comm\n\n",
 "mem_ker":
 "-- Homomorphism subgroups\n@[to_additive]\ntheorem mem_ker [Group H] (f : G → H) {x : G} : x ∈ ker f ↔ f x = 1 :=\n  mem_trivial\n#align mem_ker mem_ker\n\n",
 "mem_closure_union_iff":
 "@[to_additive]\ntheorem mem_closure_union_iff {G : Type _} [CommGroup G] {s t : Set G} {x : G} :\n    x ∈ closure (s ∪ t) ↔ ∃ y ∈ closure s, ∃ z ∈ closure t, y * z = x :=\n  by\n  simp only [closure_eq_mclosure, Monoid.mem_closure_union_iff, exists_prop, preimage_union]; constructor\n  · rintro ⟨_, ⟨ys, hys, yt, hyt, rfl⟩, _, ⟨zs, hzs, zt, hzt, rfl⟩, rfl⟩\n    refine' ⟨_, ⟨_, hys, _, hzs, rfl⟩, _, ⟨_, hyt, _, hzt, rfl⟩, _⟩\n    rw [mul_assoc, mul_assoc, mul_left_comm zs]\n  · rintro ⟨_, ⟨ys, hys, zs, hzs, rfl⟩, _, ⟨yt, hyt, zt, hzt, rfl⟩, rfl⟩\n    refine' ⟨_, ⟨ys, hys, yt, hyt, rfl⟩, _, ⟨zs, hzs, zt, hzt, rfl⟩, _⟩\n    rw [mul_assoc, mul_assoc, mul_left_comm yt]\n#align mem_closure_union_iff mem_closure_union_iff\n\n",
 "mem_closure":
 "@[to_additive]\ntheorem mem_closure {a : G} : a ∈ s → a ∈ closure s :=\n  in_closure.basic\n#align mem_closure mem_closure\n\n",
 "mem_center":
 "@[to_additive mem_add_center]\ntheorem mem_center {a : G} : a ∈ center G ↔ ∀ g, g * a = a * g :=\n  iff.rfl\n#align mem_center mem_center\n\n",
 "mclosure_subset":
 "@[to_additive]\ntheorem mclosure_subset {s : Set G} : Monoid.Closure s ⊆ closure s :=\n  Monoid.closure_subset (closure.isSubgroup _).to_is_submonoid <| subset_closure\n#align mclosure_subset mclosure_subset\n\n",
 "mclosure_inv_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[to_additive]\ntheorem mclosure_inv_subset {s : Set G} : Monoid.Closure («expr ⁻¹' » has_inv.inv s) ⊆ closure s :=\n  Monoid.closure_subset (closure.isSubgroup _).to_is_submonoid fun x hx =>\n    inv_inv x ▸ ((closure.isSubgroup _).inv_mem <| subset_closure hx)\n#align mclosure_inv_subset mclosure_inv_subset\n\n",
 "is_subgroup":
 "/-- The normal closure of a set is a subgroup. -/\ntheorem normal_closure.is_subgroup (s : Set G) : IsSubgroup (normalClosure s) :=\n  closure.isSubgroup (conjugatesOfSet s)\n#align normal_closure.is_subgroup normal_closure.is_subgroup\n\n",
 "is_normal_subgroup_ker":
 "@[to_additive]\ntheorem is_normal_subgroup_ker {f : G → H} (hf : IsGroupHom f) : IsNormalSubgroup (ker f) :=\n  hf.preimage_normal trivial_normal\n#align is_normal_subgroup_ker is_normal_subgroup_ker\n\n",
 "is_normal":
 "/-- The normal closure of s is a normal subgroup. -/\ntheorem normal_closure.is_normal : IsNormalSubgroup (normalClosure s) :=\n  { normalClosure.isSubgroup _ with\n    normal := fun n h g => by\n      induction' h with x hx x hx ihx x y hx hy ihx ihy\n      · exact conjugates_of_set_subset_normal_closure (conj_mem_conjugates_of_set hx)\n      · simpa using (normal_closure.is_subgroup s).one_mem\n      · rw [← conj_inv]\n        exact (normal_closure.is_subgroup _).inv_mem ihx\n      · rw [← conj_mul]\n        exact (normal_closure.is_subgroup _).to_is_submonoid.mul_mem ihx ihy }\n#align normal_closure.is_normal normal_closure.is_normal\n\n",
 "isSubgroup_unionᵢ_of_directed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print isSubgroup_unionᵢ_of_directed /-\n@[to_additive]\ntheorem isSubgroup_unionᵢ_of_directed {ι : Type _} [hι : Nonempty ι] {s : ι → Set G} (hs : ∀ i, IsSubgroup (s i))\n    (directed : ∀ i j, ∃ k, s i ⊆ s k ∧ s j ⊆ s k) :\n    IsSubgroup\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) :=\n  { inv_mem := fun a ha =>\n      let ⟨i, hi⟩ := Set.mem_unionᵢ.1 ha\n      Set.mem_unionᵢ.2 ⟨i, (hs i).inv_mem hi⟩\n    to_is_submonoid := isSubmonoid_unionᵢ_of_directed (fun i => (hs i).to_is_submonoid) Directed }\n#align is_subgroup_Union_of_directed isSubgroup_unionᵢ_of_directed\n#align is_add_subgroup_Union_of_directed isAddSubgroup_unionᵢ_of_directed\n-/\n\n",
 "isSubgroup_iff":
 "#print Multiplicative.isSubgroup_iff /-\ntheorem Multiplicative.isSubgroup_iff {s : Set A} : @IsSubgroup (Multiplicative A) _ s ↔ IsAddSubgroup s :=\n  ⟨by rintro ⟨⟨h₁, h₂⟩, h₃⟩ <;> exact @is_add_subgroup.mk A _ _ ⟨h₁, @h₂⟩ @h₃, fun h => Multiplicative.isSubgroup h⟩\n#align multiplicative.is_subgroup_iff Multiplicative.isSubgroup_iff\n-/\n\n",
 "isSubgroup":
 "#print Subgroup.isSubgroup /-\n@[to_additive]\ntheorem Subgroup.isSubgroup [Group G] (K : Subgroup G) : IsSubgroup (K : Set G) :=\n  { one_mem := K.one_mem'\n    mul_mem := fun _ _ => K.mul_mem'\n    inv_mem := fun _ => K.inv_mem' }\n#align subgroup.is_subgroup Subgroup.isSubgroup\n#align add_subgroup.is_add_subgroup AddSubgroup.isAddSubgroup\n-/\n\n",
 "isNormalSubgroup_of_commGroup":
 "#print isNormalSubgroup_of_commGroup /-\n@[to_additive]\ntheorem isNormalSubgroup_of_commGroup [CommGroup G] {s : Set G} (hs : IsSubgroup s) : IsNormalSubgroup s :=\n  { hs with normal := fun n hn g => by rwa [mul_right_comm, mul_right_inv, one_mul] }\n#align is_normal_subgroup_of_comm_group isNormalSubgroup_of_commGroup\n#align is_normal_add_subgroup_of_add_comm_group isNormalAddSubgroup_of_addCommGroup\n-/\n\n",
 "isNormalSubgroup_iff":
 "#print Multiplicative.isNormalSubgroup_iff /-\ntheorem Multiplicative.isNormalSubgroup_iff [AddGroup A] {s : Set A} :\n    @IsNormalSubgroup (Multiplicative A) _ s ↔ IsNormalAddSubgroup s :=\n  ⟨by rintro ⟨h₁, h₂⟩ <;> exact @is_normal_add_subgroup.mk A _ _ (Multiplicative.isSubgroup_iff.1 h₁) @h₂, fun h =>\n    Multiplicative.isNormalSubgroup h⟩\n#align multiplicative.is_normal_subgroup_iff Multiplicative.isNormalSubgroup_iff\n-/\n\n",
 "isNormalSubgroup":
 "#print Multiplicative.isNormalSubgroup /-\ntheorem Multiplicative.isNormalSubgroup [AddGroup A] {s : Set A} (hs : IsNormalAddSubgroup s) :\n    @IsNormalSubgroup (Multiplicative A) _ s :=\n  @is_normal_subgroup.mk (Multiplicative A) _ _ (Multiplicative.isSubgroup hs.to_is_add_subgroup)\n    (is_normal_add_subgroup.normal hs)\n#align multiplicative.is_normal_subgroup Multiplicative.isNormalSubgroup\n-/\n\n",
 "isNormalAddSubgroup_iff":
 "#print Additive.isNormalAddSubgroup_iff /-\ntheorem Additive.isNormalAddSubgroup_iff [Group G] {s : Set G} :\n    @IsNormalAddSubgroup (Additive G) _ s ↔ IsNormalSubgroup s :=\n  ⟨by rintro ⟨h₁, h₂⟩ <;> exact @is_normal_subgroup.mk G _ _ (Additive.isAddSubgroup_iff.1 h₁) @h₂, fun h =>\n    Additive.isNormalAddSubgroup h⟩\n#align additive.is_normal_add_subgroup_iff Additive.isNormalAddSubgroup_iff\n-/\n\n",
 "isNormalAddSubgroup":
 "#print Additive.isNormalAddSubgroup /-\ntheorem Additive.isNormalAddSubgroup [Group G] {s : Set G} (hs : IsNormalSubgroup s) :\n    @IsNormalAddSubgroup (Additive G) _ s :=\n  @is_normal_add_subgroup.mk (Additive G) _ _ (Additive.isAddSubgroup hs.to_is_subgroup) (is_normal_subgroup.normal hs)\n#align additive.is_normal_add_subgroup Additive.isNormalAddSubgroup\n-/\n\n",
 "isAddSubgroup_iff":
 "#print Additive.isAddSubgroup_iff /-\ntheorem Additive.isAddSubgroup_iff {s : Set G} : @IsAddSubgroup (Additive G) _ s ↔ IsSubgroup s :=\n  ⟨by rintro ⟨⟨h₁, h₂⟩, h₃⟩ <;> exact @is_subgroup.mk G _ _ ⟨h₁, @h₂⟩ @h₃, fun h => Additive.isAddSubgroup h⟩\n#align additive.is_add_subgroup_iff Additive.isAddSubgroup_iff\n-/\n\n",
 "isAddSubgroup":
 "#print Additive.isAddSubgroup /-\ntheorem Additive.isAddSubgroup {s : Set G} (hs : IsSubgroup s) : @IsAddSubgroup (Additive G) _ s :=\n  @is_add_subgroup.mk (Additive G) _ _ (Additive.isAddSubmonoid hs.to_is_submonoid) fun _ => hs.inv_mem\n#align additive.is_add_subgroup Additive.isAddSubgroup\n-/\n\n",
 "inv_mem_iff":
 "#print inv_mem_iff /-\n@[to_additive]\ntheorem inv_mem_iff : a⁻¹ ∈ s ↔ a ∈ s :=\n  ⟨fun h => by simpa using hs.inv_mem h, inv_mem hs⟩\n#align inv_mem_iff inv_mem_iff\n#align neg_mem_iff neg_mem_iff\n-/\n\n",
 "inv_ker_one'":
 "@[to_additive]\ntheorem inv_ker_one' {f : G → H} (hf : IsGroupHom f) {a b : G} (h : f a = f b) : f (a⁻¹ * b) = 1 :=\n  by\n  have : (f a)⁻¹ * f b = 1 := by rw [h, mul_left_inv]\n  rwa [← hf.map_inv, ← hf.map_mul] at this\n#align inv_ker_one' inv_ker_one'\n\n",
 "inv_ker_one":
 "@[to_additive]\ntheorem inv_ker_one {f : G → H} (hf : IsGroupHom f) {a b : G} (h : f a = f b) : f (a * b⁻¹) = 1 :=\n  by\n  have : f a * (f b)⁻¹ = 1 := by rw [h, mul_right_inv]\n  rwa [← hf.map_inv, ← hf.map_mul] at this\n#align inv_ker_one inv_ker_one\n\n",
 "inv_iff_ker'":
 "@[to_additive]\ntheorem inv_iff_ker' {f : G → H} (hf : IsGroupHom f) (a b : G) : f a = f b ↔ a⁻¹ * b ∈ ker f := by\n  rw [mem_ker] <;> exact one_iff_ker_inv' hf _ _\n#align inv_iff_ker' inv_iff_ker'\n\n",
 "inv_iff_ker":
 "@[to_additive]\ntheorem inv_iff_ker {f : G → H} (hf : IsGroupHom f) (a b : G) : f a = f b ↔ a * b⁻¹ ∈ ker f := by\n  rw [mem_ker] <;> exact one_iff_ker_inv hf _ _\n#align inv_iff_ker inv_iff_ker\n\n",
 "interᵢ":
 "#print IsSubgroup.interᵢ /-\n@[to_additive]\ntheorem IsSubgroup.interᵢ {ι : Sort _} {s : ι → Set G} (hs : ∀ y : ι, IsSubgroup (s y)) : IsSubgroup (Set.interᵢ s) :=\n  { IsSubmonoid.interᵢ fun y => (hs y).to_is_submonoid with\n    inv_mem := fun x h => Set.mem_interᵢ.2 fun y => is_subgroup.inv_mem (hs _) (Set.mem_interᵢ.1 h y) }\n#align is_subgroup.Inter IsSubgroup.interᵢ\n#align is_add_subgroup.Inter IsAddSubgroup.interᵢ\n-/\n\n",
 "inter":
 "#print IsSubgroup.inter /-\n@[to_additive]\ntheorem IsSubgroup.inter {s₁ s₂ : Set G} (hs₁ : IsSubgroup s₁) (hs₂ : IsSubgroup s₂) : IsSubgroup (s₁ ∩ s₂) :=\n  { IsSubmonoid.inter hs₁.to_is_submonoid hs₂.to_is_submonoid with\n    inv_mem := fun x hx => ⟨hs₁.inv_mem hx.1, hs₂.inv_mem hx.2⟩ }\n#align is_subgroup.inter IsSubgroup.inter\n#align is_add_subgroup.inter IsAddSubgroup.inter\n-/\n\n",
 "injective_of_trivial_ker":
 "@[to_additive]\ntheorem injective_of_trivial_ker {f : G → H} (hf : IsGroupHom f) (h : ker f = trivial G) : function.injective f :=\n  by\n  intro a₁ a₂ hfa\n  simp [ext_iff, ker, IsSubgroup.trivial] at h\n  have ha : a₁ * a₂⁻¹ = 1 := by rw [← h] <;> exact hf.inv_ker_one hfa\n  rw [eq_inv_of_mul_eq_one_left ha, inv_inv a₂]\n#align injective_of_trivial_ker injective_of_trivial_ker\n\n",
 "injective_iff_trivial_ker":
 "@[to_additive]\ntheorem injective_iff_trivial_ker {f : G → H} (hf : IsGroupHom f) : function.injective f ↔ ker f = trivial G :=\n  ⟨hf.trivial_ker_of_injective, hf.injective_of_trivial_ker⟩\n#align injective_iff_trivial_ker injective_iff_trivial_ker\n\n",
 "image_subgroup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[to_additive]\ntheorem image_subgroup {f : G → H} (hf : IsGroupHom f) {s : Set G} (hs : IsSubgroup s) : IsSubgroup («expr '' » f s) :=\n  { mul_mem := fun a₁ a₂ ⟨b₁, hb₁, eq₁⟩ ⟨b₂, hb₂, eq₂⟩ => ⟨b₁ * b₂, hs.mul_mem hb₁ hb₂, by simp [eq₁, eq₂, hf.map_mul]⟩\n    one_mem := ⟨1, hs.to_is_submonoid.one_mem, hf.map_one⟩\n    inv_mem := fun a ⟨b, hb, Eq⟩ =>\n      ⟨b⁻¹, hs.inv_mem hb, by\n        rw [hf.map_inv]\n        simp [*]⟩ }\n#align image_subgroup image_subgroup\n\n",
 "image_closure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[to_additive]\ntheorem image_closure [Group H] {f : G → H} (hf : IsGroupHom f) (s : Set G) :\n    «expr '' » f (closure s) = closure («expr '' » f s) :=\n  le_antisymm\n    (by\n      rintro _ ⟨x, hx, rfl⟩\n      apply in_closure.rec_on hx <;> intros\n      · solve_by_elim [subset_closure, Set.mem_image_of_mem]\n      · rw [hf.to_is_monoid_hom.map_one]\n        apply is_submonoid.one_mem (closure.is_subgroup _).to_is_submonoid\n      · rw [hf.map_inv]\n        apply is_subgroup.inv_mem (closure.is_subgroup _)\n        assumption\n      · rw [hf.to_is_monoid_hom.map_mul]\n        solve_by_elim [is_submonoid.mul_mem (closure.is_subgroup _).to_is_submonoid] )\n    (closure_subset (hf.image_subgroup <| closure.isSubgroup _) <| Set.image_subset _ subset_closure)\n#align image_closure image_closure\n\n",
 "exists_list_of_mem_closure":
 "@[to_additive]\ntheorem exists_list_of_mem_closure {s : Set G} {a : G} (h : a ∈ closure s) :\n    ∃ l : List G, (∀ x ∈ l, x ∈ s ∨ x⁻¹ ∈ s) ∧ l.prod = a :=\n  in_closure.rec_on h (fun x hxs => ⟨[x], List.forall_mem_singleton.2 <| or.inl hxs, one_mul _⟩)\n    ⟨[], List.forall_mem_nil _, rfl⟩\n    (fun x _ ⟨L, HL1, HL2⟩ =>\n      ⟨L.reverse.map has_inv.inv, fun x hx =>\n        let ⟨y, hy1, hy2⟩ := List.exists_of_mem_map hx\n        hy2 ▸ Or.imp id (by rw [inv_inv] <;> exact id) (HL1 _ <| List.mem_reverse'.1 hy1).symm,\n        HL2 ▸\n          list.rec_on L inv_one.symm fun hd tl ih => by\n            rw [List.reverse_cons, list.map_append, List.prod_append, ih, list.map_singleton, List.prod_cons,\n              List.prod_nil, mul_one, List.prod_cons, mul_inv_rev]⟩)\n    fun x y hx hy ⟨L1, HL1, HL2⟩ ⟨L2, HL3, HL4⟩ =>\n    ⟨L1 ++ L2, List.forall_mem_append.2 ⟨HL1, HL3⟩, by rw [List.prod_append, HL2, HL4]⟩\n#align exists_list_of_mem_closure exists_list_of_mem_closure\n\n",
 "eq_trivial_iff":
 "@[to_additive]\ntheorem eq_trivial_iff {s : Set G} (hs : IsSubgroup s) : s = trivial G ↔ ∀ x ∈ s, x = (1 : G) := by\n  simp only [Set.ext_iff, IsSubgroup.mem_trivial] <;>\n    exact ⟨fun h x => (h x).1, fun h x => ⟨h x, fun hx => hx.symm ▸ hs.to_is_submonoid.one_mem⟩⟩\n#align eq_trivial_iff eq_trivial_iff\n\n",
 "div_mem":
 "#print IsSubgroup.div_mem /-\n/-\nCopyright (c) 2018 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mitchell Rowett, Scott Morrison, Johan Commelin, Mario Carneiro,\n  Michael Howes\n-/\n@[to_additive]\ntheorem IsSubgroup.div_mem {s : Set G} (hs : IsSubgroup s) {x y : G} (hx : x ∈ s) (hy : y ∈ s) : x / y ∈ s := by\n  simpa only [div_eq_mul_inv] using hs.mul_mem hx (hs.inv_mem hy)\n#align is_subgroup.div_mem IsSubgroup.div_mem\n#align is_add_subgroup.sub_mem IsAddSubgroup.sub_mem\n-/\n\n",
 "conjugates_of_subset":
 "/-The normal closure of a set s is the subgroup closure of all the conjugates of\nelements of s. It is the smallest normal subgroup containing s. -/\ntheorem conjugates_of_subset {t : Set G} (ht : IsNormalSubgroup t) {a : G} (h : a ∈ t) : conjugatesOf a ⊆ t :=\n  fun x hc => by\n  obtain ⟨c, w⟩ := isConj_iff.1 hc\n  have H := is_normal_subgroup.normal ht a h c\n  rwa [← w]\n#align conjugates_of_subset conjugates_of_subset\n\n",
 "conjugates_of_set_subset_normal_closure":
 "theorem conjugates_of_set_subset_normal_closure : conjugatesOfSet s ⊆ normalClosure s :=\n  subset_closure\n#align conjugates_of_set_subset_normal_closure conjugates_of_set_subset_normal_closure\n\n",
 "conjugates_of_set_subset'":
 "theorem conjugates_of_set_subset' {s t : Set G} (ht : IsNormalSubgroup t) (h : s ⊆ t) : conjugatesOfSet s ⊆ t :=\n  Set.unionᵢ₂_subset fun x H => conjugatesOf_subset ht (h H)\n#align conjugates_of_set_subset' conjugates_of_set_subset'\n\n",
 "closure_subset_iff":
 "@[to_additive]\ntheorem closure_subset_iff {s t : Set G} (ht : IsSubgroup t) : closure s ⊆ t ↔ s ⊆ t :=\n  ⟨fun h b ha => h (mem_closure ha), fun h b ha => closure_subset ht h ha⟩\n#align closure_subset_iff closure_subset_iff\n\n",
 "closure_subset":
 "@[to_additive]\ntheorem closure_subset {s t : Set G} (ht : IsSubgroup t) (h : s ⊆ t) : closure s ⊆ t := fun a ha => by\n  induction ha <;> simp [h _, *, ht.one_mem, ht.mul_mem, IsSubgroup.inv_mem_iff]\n#align closure_subset closure_subset\n\n",
 "closure_subgroup":
 "@[simp, to_additive]\ntheorem closure_subgroup {s : Set G} (hs : IsSubgroup s) : closure s = s :=\n  Set.Subset.antisymm (closure_subset hs <| Set.Subset.refl s) subset_closure\n#align closure_subgroup closure_subgroup\n\n",
 "closure_mono":
 "#print closure_mono /-\n@[to_additive]\ntheorem closure_mono {s t : Set G} (h : s ⊆ t) : closure s ⊆ closure t :=\n  closure_subset (closure.isSubgroup _) <| Set.Subset.trans h subset_closure\n#align closure_mono closure_mono\n-/\n\n",
 "closure_eq_mclosure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[to_additive]\ntheorem closure_eq_mclosure {s : Set G} : closure s = Monoid.Closure (s ∪ «expr ⁻¹' » has_inv.inv s) :=\n  Set.Subset.antisymm\n    (@closure_subset _ _ _ (Monoid.Closure (s ∪ «expr ⁻¹' » has_inv.inv s))\n      { one_mem := (Monoid.closure.isSubmonoid _).one_mem\n        mul_mem := fun _ _ => (Monoid.closure.isSubmonoid _).mul_mem\n        inv_mem := fun x hx =>\n          monoid.in_closure.rec_on hx\n            (fun x hx =>\n              or.cases_on hx (fun hx => Monoid.subset_closure <| or.inr <| show x⁻¹⁻¹ ∈ s from (inv_inv x).symm ▸ hx)\n                fun hx => Monoid.subset_closure <| or.inl hx)\n            ((@inv_one G _).symm ▸ is_submonoid.one_mem (Monoid.closure.isSubmonoid _)) fun x y hx hy ihx ihy =>\n            (mul_inv_rev x y).symm ▸ is_submonoid.mul_mem (Monoid.closure.isSubmonoid _) ihy ihx }\n      (Set.Subset.trans (Set.subset_union_left _ _) Monoid.subset_closure))\n    (Monoid.closure_subset (closure.isSubgroup _).to_is_submonoid <|\n      Set.union_subset subset_closure fun x hx =>\n        inv_inv x ▸ (is_subgroup.inv_mem (closure.isSubgroup _) <| subset_closure hx))\n#align closure_eq_mclosure closure_eq_mclosure\n\n",
 "center_normal":
 "@[to_additive add_center_normal]\ntheorem center_normal : IsNormalSubgroup (center G) :=\n  { one_mem := by simp [center]\n    mul_mem := fun a b ha hb g => by rw [← mul_assoc, mem_center.2 ha g, mul_assoc, mem_center.2 hb g, ← mul_assoc]\n    inv_mem := fun a ha g =>\n      calc\n        g * a⁻¹ = a⁻¹ * (g * a) * a⁻¹ := by simp [ha g]\n        _ = a⁻¹ * g := by rw [← mul_assoc, mul_assoc] <;> simp\n        \n    normal := fun n ha g h =>\n      calc\n        h * (g * n * g⁻¹) = h * n := by simp [ha g, mul_assoc]\n        _ = g * g⁻¹ * n * h := by rw [ha h] <;> simp\n        _ = g * n * g⁻¹ * h := by rw [mul_assoc g, ha g⁻¹, ← mul_assoc]\n         }\n#align center_normal center_normal\n\n"}