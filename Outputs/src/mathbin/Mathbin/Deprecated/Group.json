{"to_is_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem to_is_monoid_hom (f : «expr →+* » R S) : is_monoid_hom f :=\n  { map_one := f.map_one\n    map_mul := f.map_mul }\n#align to_is_monoid_hom to_is_monoid_hom\n\n",
 "to_is_add_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem to_is_add_monoid_hom (f : «expr →+* » R S) : IsAddMonoidHom f :=\n  { map_zero := f.map_zero\n    map_add := f.map_add }\n#align to_is_add_monoid_hom to_is_add_monoid_hom\n\n",
 "to_is_add_group_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem to_is_add_group_hom (f : «expr →+* » R S) : IsAddGroupHom f :=\n  { map_add := f.map_add }\n#align to_is_add_group_hom to_is_add_group_hom\n\n",
 "sub":
 "#print IsAddGroupHom.sub /-\n/-- The difference of two additive group homomorphisms is an additive group\nhomomorphism if the target is commutative. -/\ntheorem IsAddGroupHom.sub {α β} [add_group α] [add_comm_group β] {f g : α → β} (hf : IsAddGroupHom f)\n    (hg : IsAddGroupHom g) : IsAddGroupHom fun a => f a - g a := by simpa only [sub_eq_add_neg] using hf.add hg.neg\n#align is_add_group_hom.sub IsAddGroupHom.sub\n-/\n\n",
 "mul":
 "/-- The product of group homomorphisms is a group homomorphism if the target is commutative. -/\n@[to_additive\n      \"The sum of two additive group homomorphisms is an additive group homomorphism\\nif the target is commutative.\"]\ntheorem mul {α β} [group α] [comm_group β] {f g : α → β} (hf : IsGroupHom f) (hg : IsGroupHom g) :\n    IsGroupHom fun a => f a * g a :=\n  { map_mul := (hf.to_is_mul_hom.mul hg.to_is_mul_hom).map_mul }\n#align mul mul\n\n",
 "mk'":
 "#print IsGroupHom.mk' /-\n/-- Construct `is_group_hom` from its only hypothesis. -/\n@[to_additive \"Construct `is_add_group_hom` from its only hypothesis.\"]\ntheorem IsGroupHom.mk' [group α] [group β] {f : α → β} (hf : ∀ x y, f (x * y) = f x * f y) : IsGroupHom f :=\n  { map_mul := hf }\n#align is_group_hom.mk' IsGroupHom.mk'\n-/\n\n",
 "map_one":
 "#print map_one /-\n/-- A group homomorphism sends 1 to 1. -/\n@[to_additive \"An additive group homomorphism sends 0 to 0.\"]\ntheorem map_one : f 1 = 1 :=\n  hf.to_is_monoid_hom.map_one\n#align map_one map_one\n-/\n\n",
 "map_mul":
 "#print map_mul /-\ntheorem map_mul : ∀ x y, f (x * y) = f x * f y :=\n  hf.to_is_mul_hom.map_mul\n#align map_mul map_mul\n-/\n\n",
 "map_inv":
 "#print map_inv /-\n/-- A group homomorphism sends inverses to inverses. -/\n@[to_additive \"An additive group homomorphism sends negations to negations.\"]\ntheorem map_inv (hf : IsGroupHom f) (a : α) : f a⁻¹ = (f a)⁻¹ :=\n  eq_inv_of_mul_eq_one_left <| by rw [← hf.map_mul, inv_mul_self, hf.map_one]\n#align map_inv map_inv\n-/\n\n",
 "map_div":
 "#print map_div /-\n@[to_additive]\ntheorem map_div (hf : IsGroupHom f) (a b : α) : f (a / b) = f a / f b := by\n  simp_rw [div_eq_mul_inv, hf.map_mul, hf.map_inv]\n#align map_div map_div\n-/\n\n",
 "map'":
 "theorem map' {f : M → N} (hf : is_monoid_hom f) {x : M} (h : is_unit x) : is_unit (f x) :=\n  h.map (MonoidHom.of hf)\n#align map' map'\n\n",
 "is_monoid_hom_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[to_additive]\ntheorem is_monoid_hom_coe (f : «expr →* » M N) : is_monoid_hom (f : M → N) :=\n  { map_mul := f.map_mul\n    map_one := f.map_one }\n#align is_monoid_hom_coe is_monoid_hom_coe\n\n",
 "is_monoid_hom":
 "theorem multiplicative.is_monoid_hom [add_zero_class α] [add_zero_class β] {f : α → β} (hf : IsAddMonoidHom f) :\n    @is_monoid_hom (Multiplicative α) (Multiplicative β) _ _ f :=\n  { Multiplicative.isMulHom hf.to_is_add_hom with map_one := is_add_monoid_hom.map_zero hf }\n#align multiplicative.is_monoid_hom multiplicative.is_monoid_hom\n\n",
 "is_add_monoid_hom_mul_right":
 "/-- Right multiplication in a ring is an additive monoid morphism. -/\ntheorem is_add_monoid_hom_mul_right {γ : Type _} [NonUnitalNonAssocSemiring γ] (x : γ) :\n    IsAddMonoidHom fun y : γ => y * x :=\n  { map_zero := zero_mul x\n    map_add := fun y z => add_mul y z x }\n#align is_add_monoid_hom_mul_right is_add_monoid_hom_mul_right\n\n",
 "is_add_monoid_hom_mul_left":
 "/-- Left multiplication in a ring is an additive monoid morphism. -/\ntheorem is_add_monoid_hom_mul_left {γ : Type _} [NonUnitalNonAssocSemiring γ] (x : γ) :\n    IsAddMonoidHom fun y : γ => x * y :=\n  { map_zero := mul_zero x\n    map_add := fun y z => mul_add x y z }\n#align is_add_monoid_hom_mul_left is_add_monoid_hom_mul_left\n\n",
 "isMulHom":
 "#print Multiplicative.isMulHom /-\ntheorem Multiplicative.isMulHom [Add α] [Add β] {f : α → β} (hf : IsAddHom f) :\n    @IsMulHom (Multiplicative α) (Multiplicative β) _ _ f :=\n  { map_mul := is_add_hom.map_add hf }\n#align multiplicative.is_mul_hom Multiplicative.isMulHom\n-/\n\n",
 "isGroupHom":
 "#print Multiplicative.isGroupHom /-\ntheorem Multiplicative.isGroupHom [add_group α] [add_group β] {f : α → β} (hf : IsAddGroupHom f) :\n    @IsGroupHom (Multiplicative α) (Multiplicative β) _ _ f :=\n  { map_mul := hf.to_is_add_hom.map_add }\n#align multiplicative.is_group_hom Multiplicative.isGroupHom\n-/\n\n",
 "isAddMonoidHom":
 "#print Additive.isAddMonoidHom /-\n-- defeq abuse\ntheorem Additive.isAddMonoidHom [mul_one_class α] [mul_one_class β] {f : α → β} (hf : is_monoid_hom f) :\n    @IsAddMonoidHom (Additive α) (Additive β) _ _ f :=\n  { Additive.isAddHom hf.to_is_mul_hom with map_zero := hf.map_one }\n#align additive.is_add_monoid_hom Additive.isAddMonoidHom\n-/\n\n",
 "isAddHom":
 "#print Additive.isAddHom /-\ntheorem Additive.isAddHom [Mul α] [Mul β] {f : α → β} (hf : IsMulHom f) : @IsAddHom (Additive α) (Additive β) _ _ f :=\n  { map_add := is_mul_hom.map_mul hf }\n#align additive.is_add_hom Additive.isAddHom\n-/\n\n",
 "isAddGroupHom":
 "#print Additive.isAddGroupHom /-\ntheorem Additive.isAddGroupHom [group α] [group β] {f : α → β} (hf : IsGroupHom f) :\n    @IsAddGroupHom (Additive α) (Additive β) _ _ f :=\n  { map_add := hf.to_is_mul_hom.map_mul }\n#align additive.is_add_group_hom Additive.isAddGroupHom\n-/\n\n",
 "inv":
 "/-- The inverse of a group homomorphism is a group homomorphism if the target is commutative. -/\n@[to_additive\n      \"The negation of an additive group homomorphism is an additive group homomorphism\\nif the target is commutative.\"]\ntheorem inv {α β} [group α] [comm_group β] {f : α → β} (hf : IsGroupHom f) : IsGroupHom fun a => (f a)⁻¹ :=\n  { map_mul := hf.to_is_mul_hom.inv.map_mul }\n#align inv inv\n\n",
 "injective_iff":
 "/-- A group homomorphism is injective iff its kernel is trivial. -/\n@[to_additive \"An additive group homomorphism is injective if its kernel is trivial.\"]\ntheorem injective_iff {f : α → β} (hf : IsGroupHom f) : function.injective f ↔ ∀ a, f a = 1 → a = 1 :=\n  ⟨fun h _ => by rw [← hf.map_one] <;> exact @h _ _, fun h x y hxy =>\n    eq_of_div_eq_one <| h _ <| by rwa [hf.map_div, div_eq_one]⟩\n#align injective_iff injective_iff\n\n",
 "id":
 "#print id /-\n/-- The identity is a group homomorphism. -/\n@[to_additive \"The identity is an additive group homomorphism.\"]\ntheorem id : IsGroupHom (@id α) :=\n  { map_mul := fun _ _ => rfl }\n#align id id\n-/\n\n",
 "comp":
 "/-- The composition of two group homomorphisms is a group homomorphism. -/\n@[to_additive \"The composition of two additive group homomorphisms is an additive\\ngroup homomorphism.\"]\ntheorem comp (hf : IsGroupHom f) {γ} [group γ] {g : β → γ} (hg : IsGroupHom g) : IsGroupHom (g ∘ f) :=\n  { IsMulHom.comp hf.to_is_mul_hom hg.to_is_mul_hom with }\n#align comp comp\n\n",
 "coe_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, to_additive]\ntheorem coe_of {f : M → N} (hf : is_monoid_hom f) : «expr⇑ » (MonoidHom.of hf) = f :=\n  rfl\n#align coe_of coe_of\n\n",
 "coe_map'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n@[simp]\ntheorem coe_map' {f : M → N} (hf : is_monoid_hom f) (x : «expr ˣ» M) : ↑((map' hf : «expr ˣ» M → «expr ˣ» N) x) = f x :=\n  rfl\n#align coe_map' coe_map'\n\n",
 "coe_is_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem coe_is_monoid_hom : is_monoid_hom (coe : «expr ˣ» M → M) :=\n  (coeHom M).is_monoid_hom_coe\n#align coe_is_monoid_hom coe_is_monoid_hom\n\n",
 "IsMulHom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n#print IsMulHom /-\n/-- A multiplicative isomorphism preserves multiplication (deprecated). -/\n@[to_additive \"An additive isomorphism preserves addition (deprecated).\"]\ntheorem IsMulHom (h : «expr ≃* » M N) : IsMulHom h :=\n  ⟨h.map_mul⟩\n#align is_mul_hom IsMulHom\n-/\n\n"}