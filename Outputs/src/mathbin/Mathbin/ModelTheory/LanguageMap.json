{"with_constants_rel_map_sum_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n@[simp]\ntheorem with_constants_rel_map_sum_inl [(language.with_constants L α).Structure M]\n    [(lhomWithConstants L α).is_expansion_on M] {n} {R : L.relations n} {x : Fin n → M} :\n    @RelMap (language.with_constants L α) M _ n (Sum.inl R) x = RelMap R x :=\n  (lhomWithConstants L α).map_on_relation R x\n#align with_constants_rel_map_sum_inl with_constants_rel_map_sum_inl\n\n",
 "with_constants_fun_map_sum_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n@[simp]\ntheorem with_constants_fun_map_sum_inr {a : α} {x : Fin 0 → M} :\n    @funMap (language.with_constants L α) M _ 0 (Sum.inr a : (language.with_constants L α).functions 0) x = L.con a :=\n  by\n  rw [Unique.eq_default x]\n  exact (Lhom.sum_inr : «expr →ᴸ » (constants_on α) (L.sum _)).map_on_function _ _\n#align with_constants_fun_map_sum_inr with_constants_fun_map_sum_inr\n\n",
 "with_constants_fun_map_sum_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n@[simp]\ntheorem with_constants_fun_map_sum_inl [(language.with_constants L α).Structure M]\n    [(lhomWithConstants L α).is_expansion_on M] {n} {f : L.functions n} {x : Fin n → M} :\n    @funMap (language.with_constants L α) M _ n (Sum.inl f) x = funMap f x :=\n  (lhomWithConstants L α).map_on_function f x\n#align with_constants_fun_map_sum_inl with_constants_fun_map_sum_inl\n\n",
 "sum_map_comp_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n@[simp]\ntheorem sum_map_comp_inr : Lhom.comp (ϕ.sum_map ψ) LHom.sumInr = Lhom.comp LHom.sumInr ψ :=\n  LHom.funext (funext fun _ => rfl) (funext fun _ => rfl)\n#align sum_map_comp_inr sum_map_comp_inr\n\n",
 "sum_map_comp_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n@[simp]\ntheorem sum_map_comp_inl : Lhom.comp (ϕ.sum_map ψ) LHom.sumInl = Lhom.comp LHom.sumInl ϕ :=\n  LHom.funext (funext fun _ => rfl) (funext fun _ => rfl)\n#align sum_map_comp_inl sum_map_comp_inl\n\n",
 "sum_inr_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\ntheorem sum_inr_injective : (LHom.sumInr : «expr →ᴸ » L' (L.sum L')).injective :=\n  ⟨fun n => Sum.inr_injective, fun n => Sum.inr_injective⟩\n#align sum_inr_injective sum_inr_injective\n\n",
 "sum_inl_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\ntheorem sum_inl_injective : (LHom.sumInl : «expr →ᴸ » L (L.sum L')).injective :=\n  ⟨fun n => Sum.inl_injective, fun n => Sum.inl_injective⟩\n#align sum_inl_injective sum_inl_injective\n\n",
 "sum_elim_inl_inr":
 "theorem sum_elim_inl_inr : LHom.sumInl.sum_elim LHom.sumInr = LHom.id (L.sum L') :=\n  LHom.funext (funext fun _ => Sum.elim_inl_inr) (funext fun _ => Sum.elim_inl_inr)\n#align sum_elim_inl_inr sum_elim_inl_inr\n\n",
 "sum_elim_comp_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\ntheorem sum_elim_comp_inr (ψ : «expr →ᴸ » L'' L') : Lhom.comp (ϕ.sum_elim ψ) LHom.sumInr = ψ :=\n  LHom.funext (funext fun _ => rfl) (funext fun _ => rfl)\n#align sum_elim_comp_inr sum_elim_comp_inr\n\n",
 "sum_elim_comp_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\ntheorem sum_elim_comp_inl (ψ : «expr →ᴸ » L'' L') : Lhom.comp (ϕ.sum_elim ψ) LHom.sumInl = ϕ :=\n  LHom.funext (funext fun _ => rfl) (funext fun _ => rfl)\n#align sum_elim_comp_inl sum_elim_comp_inl\n\n",
 "mk₂_funext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\ntheorem mk₂_funext {c f₁ f₂ : Type u} {r₁ r₂ : Type v} {F G : «expr →ᴸ » (Language.mk₂ c f₁ f₂ r₁ r₂) L'}\n    (h0 : ∀ c : (Language.mk₂ c f₁ f₂ r₁ r₂).constants, F.on_function c = G.on_function c)\n    (h1 : ∀ f : (Language.mk₂ c f₁ f₂ r₁ r₂).functions 1, F.on_function f = G.on_function f)\n    (h2 : ∀ f : (Language.mk₂ c f₁ f₂ r₁ r₂).functions 2, F.on_function f = G.on_function f)\n    (h1' : ∀ r : (Language.mk₂ c f₁ f₂ r₁ r₂).relations 1, F.on_relation r = G.on_relation r)\n    (h2' : ∀ r : (Language.mk₂ c f₁ f₂ r₁ r₂).relations 2, F.on_relation r = G.on_relation r) : F = G :=\n  LHom.funext\n    (funext fun n =>\n      nat.cases_on n (funext h0) fun n =>\n        nat.cases_on n (funext h1) fun n => nat.cases_on n (funext h2) fun n => funext fun f => PEmpty.elim f)\n    (funext fun n =>\n      nat.cases_on n (funext fun r => PEmpty.elim r) fun n =>\n        nat.cases_on n (funext h1') fun n => nat.cases_on n (funext h2') fun n => funext fun r => PEmpty.elim r)\n#align mk₂_funext mk₂_funext\n\n",
 "map_on_relation":
 "@[simp]\ntheorem map_on_relation {M : Type _} [L.Structure M] [L'.Structure M] [ϕ.is_expansion_on M] {n} (R : L.relations n)\n    (x : Fin n → M) : RelMap (ϕ.on_relation R) x = RelMap R x :=\n  is_expansion_on.map_on_relation R x\n#align map_on_relation map_on_relation\n\n",
 "map_on_function":
 "@[simp]\ntheorem map_on_function {M : Type _} [L.Structure M] [L'.Structure M] [ϕ.is_expansion_on M] {n} (f : L.functions n)\n    (x : Fin n → M) : funMap (ϕ.on_function f) x = funMap f x :=\n  is_expansion_on.map_on_function f x\n#align map_on_function map_on_function\n\n",
 "map_constants_comp_sum_inl":
 "@[simp]\ntheorem Lhom.map_constants_comp_sum_inl {f : α → β} :\n    (L.Lhom_with_constants_map f).comp LHom.sumInl = L.Lhom_with_constants β := by ext (n f R) <;> rfl\n#align Lhom.map_constants_comp_sum_inl Lhom.map_constants_comp_sum_inl\n\n",
 "is_expansion_on_default":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\ntheorem injective.is_expansion_on_default {ϕ : «expr →ᴸ » L L'}\n    [∀ (n) (f : L'.functions n), Decidable (f ∈ Set.range fun f : L.functions n => on_function ϕ f)]\n    [∀ (n) (r : L'.relations n), Decidable (r ∈ Set.range fun r : L.relations n => on_relation ϕ r)] (h : ϕ.injective)\n    (M : Type _) [Inhabited M] [L.Structure M] : @IsExpansionOn L L' ϕ M _ (ϕ.default_expansion M) :=\n  by\n  letI := ϕ.default_expansion M\n  refine' ⟨fun n f xs => _, fun n r xs => _⟩\n  · have hf : ϕ.on_function f ∈ Set.range fun f : L.functions n => ϕ.on_function f := ⟨f, rfl⟩\n    refine' (dif_pos hf).trans _\n    rw [h.on_function hf.some_spec]\n  · have hr : ϕ.on_relation r ∈ Set.range fun r : L.relations n => ϕ.on_relation r := ⟨r, rfl⟩\n    refine' (dif_pos hr).trans _\n    rw [h.on_relation hr.some_spec]\n#align injective.is_expansion_on_default injective.is_expansion_on_default\n\n",
 "id_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n@[simp]\ntheorem id_comp (F : «expr →ᴸ » L L') : Lhom.comp (LHom.id L') F = F :=\n  by\n  cases F\n  rfl\n#align id_comp id_comp\n\n",
 "funext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n#print funext /-\n/-\nCopyright (c) 2021 Aaron Anderson, Jesse Michael Han, Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson, Jesse Michael Han, Floris van Doorn\n-/\n-- \\^L\n@[ext]\nprotected theorem funext {F G : «expr →ᴸ » L L'} (h_fun : F.on_function = G.on_function)\n    (h_rel : F.on_relation = G.on_relation) : F = G :=\n  by\n  cases' F with Ff Fr\n  cases' G with Gf Gr\n  simp only [*]\n  exact and.intro h_fun h_rel\n#align funext funext\n-/\n\n",
 "fun_map_sum_inr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n@[simp]\ntheorem fun_map_sum_inr [(L'.sum L).Structure M] [(LHom.sumInr : «expr →ᴸ » L (L'.sum L)).is_expansion_on M] {n}\n    {f : L.functions n} {x : Fin n → M} : @funMap (L'.sum L) M _ n (Sum.inr f) x = funMap f x :=\n  (LHom.sumInr : «expr →ᴸ » L (L'.sum L)).map_on_function f x\n#align fun_map_sum_inr fun_map_sum_inr\n\n",
 "fun_map_sum_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n@[simp]\ntheorem fun_map_sum_inl [(L.sum L').Structure M] [(LHom.sumInl : «expr →ᴸ » L (L.sum L')).is_expansion_on M] {n}\n    {f : L.functions n} {x : Fin n → M} : @funMap (L.sum L') M _ n (Sum.inl f) x = funMap f x :=\n  (LHom.sumInl : «expr →ᴸ » L (L.sum L')).map_on_function f x\n#align fun_map_sum_inl fun_map_sum_inl\n\n",
 "constants_on_map_is_expansion_on":
 "theorem constants_on_map_is_expansion_on {f : α → β} {fα : α → M} {fβ : β → M} (h : fβ ∘ f = fα) :\n    @LHom.IsExpansionOn _ _ (LHom.constantsOnMap f) M (constantsOn.structure fα) (constantsOn.structure fβ) :=\n  by\n  letI := constants_on.Structure fα\n  letI := constants_on.Structure fβ\n  exact ⟨fun n => nat.cases_on n (fun F x => (congr_fun h F : _)) fun n F => isEmptyElim F, fun _ R => isEmptyElim R⟩\n#align constants_on_map_is_expansion_on constants_on_map_is_expansion_on\n\n",
 "constants_on_constants":
 "-- \\^L\ntheorem constants_on_constants : (constantsOn α).constants = α :=\n  rfl\n#align constants_on_constants constants_on_constants\n\n",
 "comp_sum_elim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\ntheorem comp_sum_elim {L3 : Language} (θ : «expr →ᴸ » L' L3) :\n    Lhom.comp θ (ϕ.sum_elim ψ) = (Lhom.comp θ ϕ).sum_elim (Lhom.comp θ ψ) :=\n  LHom.funext (funext fun n => Sum.comp_elim _ _ _) (funext fun n => Sum.comp_elim _ _ _)\n#align comp_sum_elim comp_sum_elim\n\n",
 "comp_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n@[simp]\ntheorem comp_id (F : «expr →ᴸ » L L') : Lhom.comp F (LHom.id L) = F :=\n  by\n  cases F\n  rfl\n#align comp_id comp_id\n\n",
 "comp_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Lhom.comp -/\ntheorem comp_assoc {L3 : Language} (F : «expr →ᴸ » L'' L3) (G : «expr →ᴸ » L' L'') (H : «expr →ᴸ » L L') :\n    Lhom.comp (Lhom.comp F G) H = Lhom.comp F (Lhom.comp G H) :=\n  rfl\n#align comp_assoc comp_assoc\n\n",
 "coe_con":
 "@[simp]\ntheorem coe_con {a : A} : (L.con a : M) = a :=\n  rfl\n#align coe_con coe_con\n\n",
 "card_with_constants":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem card_with_constants :\n    (language.with_constants L α).card = Cardinal.lift.{w'} L.card + Cardinal.lift.{max u v} (cardinal.mk α) := by\n  rw [with_constants, card_sum, card_constants_on]\n#align card_with_constants card_with_constants\n\n",
 "card_constants_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\ntheorem card_constants_on : (constantsOn α).card = cardinal.mk α := by simp\n#align card_constants_on card_constants_on\n\n",
 "Lhom_with_constants_injective":
 "theorem Lhom_with_constants_injective : (L.Lhom_with_constants α).injective :=\n  LHom.sumInl_injective\n#align Lhom_with_constants_injective Lhom_with_constants_injective\n\n"}