{"to_prenex_is_prenex":
 "theorem to_prenex_is_prenex (φ : L.bounded_formula α n) : φ.to_prenex.is_prenex :=\n  bounded_formula.rec_on φ (fun _ => isQF_bot.is_prenex) (fun _ _ _ => (is_atomic.equal _ _).is_prenex)\n    (fun _ _ _ _ => (is_atomic.rel _ _).is_prenex) (fun _ _ _ h1 h2 => isPrenex_toPrenexImp h1 h2) fun _ _ =>\n    is_prenex.all\n#align to_prenex_is_prenex to_prenex_is_prenex\n\n",
 "to_prenex_imp_right":
 "theorem is_qf.to_prenex_imp_right {φ : L.bounded_formula α n} :\n    ∀ {ψ : L.bounded_formula α n}, IsQF ψ → φ.to_prenex_imp_right ψ = φ.imp ψ\n  | _, is_qf.falsum => rfl\n  | _, is_qf.of_is_atomic (is_atomic.equal _ _) => rfl\n  | _, is_qf.of_is_atomic (is_atomic.rel _ _) => rfl\n  | _, is_qf.imp is_qf.falsum _ => rfl\n  | _, is_qf.imp (is_qf.of_is_atomic (is_atomic.equal _ _)) _ => rfl\n  | _, is_qf.imp (is_qf.of_is_atomic (is_atomic.rel _ _)) _ => rfl\n  | _, is_qf.imp (is_qf.imp _ _) _ => rfl\n#align is_qf.to_prenex_imp_right is_qf.to_prenex_imp_right\n\n",
 "to_prenex_imp":
 "theorem is_qf.to_prenex_imp : ∀ {φ ψ : L.bounded_formula α n}, φ.is_qf → φ.to_prenex_imp ψ = φ.to_prenex_imp_right ψ\n  | _, _, is_qf.falsum => rfl\n  | _, _, is_qf.of_is_atomic (is_atomic.equal _ _) => rfl\n  | _, _, is_qf.of_is_atomic (is_atomic.rel _ _) => rfl\n  | _, _, is_qf.imp is_qf.falsum _ => rfl\n  | _, _, is_qf.imp (is_qf.of_is_atomic (is_atomic.equal _ _)) _ => rfl\n  | _, _, is_qf.imp (is_qf.of_is_atomic (is_atomic.rel _ _)) _ => rfl\n  | _, _, is_qf.imp (is_qf.imp _ _) _ => rfl\n#align is_qf.to_prenex_imp is_qf.to_prenex_imp\n\n",
 "sum_elim_comp_relabel_aux":
 "@[simp]\ntheorem sum_elim_comp_relabel_aux {m : ℕ} {g : α → Sum β (Fin n)} {v : β → M} {xs : Fin (n + m) → M} :\n    Sum.elim v xs ∘ relabelAux g m = Sum.elim (Sum.elim v (xs ∘ castAdd m) ∘ g) (xs ∘ natAdd n) :=\n  by\n  ext x\n  cases x\n  · simp only [bounded_formula.relabel_aux, Function.comp_apply, Sum.map_inl, Sum.elim_inl]\n    cases' g x with l r <;> simp\n  · simp [bounded_formula.relabel_aux]\n#align sum_elim_comp_relabel_aux sum_elim_comp_relabel_aux\n\n",
 "relabel_sum_inl":
 "@[simp]\ntheorem relabel_sum_inl (φ : L.bounded_formula α n) :\n    (φ.relabel Sum.inl : L.bounded_formula α (0 + n)) = φ.cast_le (ge_of_eq (zero_add n)) :=\n  by\n  simp only [relabel, relabel_aux_sum_inl]\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp [Fin.natAdd_zero, cast_le_of_eq, map_term_rel]\n  · simp [Fin.natAdd_zero, cast_le_of_eq, map_term_rel]\n  · simp [map_term_rel, ih1, ih2]\n  · simp [map_term_rel, ih3, cast_le]\n#align relabel_sum_inl relabel_sum_inl\n\n",
 "relabel_relabel":
 "@[simp]\ntheorem relabel_relabel (f : α → β) (g : β → γ) (t : L.term α) : (t.relabel f).relabel g = t.relabel (g ∘ f) :=\n  by\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp [ih]\n#align relabel_relabel relabel_relabel\n\n",
 "relabel_not":
 "@[simp]\ntheorem relabel_not (g : α → Sum β (Fin n)) {k} (φ : L.bounded_formula α k) : φ.not.relabel g = (φ.relabel g).not := by\n  simp [bounded_formula.not]\n#align relabel_not relabel_not\n\n",
 "relabel_imp":
 "@[simp]\ntheorem relabel_imp (g : α → Sum β (Fin n)) {k} (φ ψ : L.bounded_formula α k) :\n    (φ.imp ψ).relabel g = (φ.relabel g).imp (ψ.relabel g) :=\n  rfl\n#align relabel_imp relabel_imp\n\n",
 "relabel_id_eq_id":
 "@[simp]\ntheorem relabel_id_eq_id : (Term.relabel id : L.term α → L.term α) = id :=\n  funext relabel_id\n#align relabel_id_eq_id relabel_id_eq_id\n\n",
 "relabel_id":
 "/-\nCopyright (c) 2021 Aaron Anderson, Jesse Michael Han, Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson, Jesse Michael Han, Floris van Doorn\n-/\ntheorem relabel_id (t : L.term α) : t.relabel id = t :=\n  by\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp [ih]\n#align relabel_id relabel_id\n\n",
 "relabel_falsum":
 "@[simp]\ntheorem relabel_falsum (g : α → Sum β (Fin n)) {k} : (falsum : L.bounded_formula α k).relabel g = falsum :=\n  rfl\n#align relabel_falsum relabel_falsum\n\n",
 "relabel_ex":
 "@[simp]\ntheorem relabel_ex (g : α → Sum β (Fin n)) {k} (φ : L.bounded_formula α (k + 1)) : φ.ex.relabel g = (φ.relabel g).ex :=\n  by simp [bounded_formula.ex]\n#align relabel_ex relabel_ex\n\n",
 "relabel_comp_relabel":
 "@[simp]\ntheorem relabel_comp_relabel (f : α → β) (g : β → γ) :\n    (Term.relabel g ∘ Term.relabel f : L.term α → L.term γ) = Term.relabel (g ∘ f) :=\n  funext (relabel_relabel f g)\n#align relabel_comp_relabel relabel_comp_relabel\n\n",
 "relabel_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem relabel_bot (g : α → Sum β (Fin n)) {k} : («expr⊥» : L.bounded_formula α k).relabel g = «expr⊥» :=\n  rfl\n#align relabel_bot relabel_bot\n\n",
 "relabel_aux_sum_inl":
 "@[simp]\ntheorem relabel_aux_sum_inl (k : ℕ) : relabelAux (Sum.inl : α → Sum α (Fin n)) k = Sum.map id (natAdd n) :=\n  by\n  ext x\n  cases x <;> · simp [relabel_aux]\n#align relabel_aux_sum_inl relabel_aux_sum_inl\n\n",
 "relabel_all":
 "@[simp]\ntheorem relabel_all (g : α → Sum β (Fin n)) {k} (φ : L.bounded_formula α (k + 1)) :\n    φ.all.relabel g = (φ.relabel g).all :=\n  by\n  rw [relabel, map_term_rel, relabel]\n  simp\n#align relabel_all relabel_all\n\n",
 "relabel":
 "theorem is_prenex.relabel {m : ℕ} {φ : L.bounded_formula α m} (h : φ.is_prenex) (f : α → Sum β (Fin n)) :\n    (φ.relabel f).is_prenex :=\n  is_prenex.rec_on h (fun _ _ h => (h.relabel f).is_prenex) (fun _ _ _ h => by simp [h.all]) fun _ _ _ h => by\n    simp [h.ex]\n#align is_prenex.relabel is_prenex.relabel\n\n",
 "on_formula_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem on_formula_symm (φ : «expr ≃ᴸ » L L') :\n    (φ.on_formula.symm : «expr ≃ » (L'.formula α) (L.formula α)) = φ.symm.on_formula :=\n  rfl\n#align on_formula_symm on_formula_symm\n\n",
 "on_formula_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᴸ » -/\n@[simp]\ntheorem on_formula_apply (φ : «expr ≃ᴸ » L L') : (φ.on_formula : L.formula α → L'.formula α) = φ.to_Lhom.on_formula :=\n  rfl\n#align on_formula_apply on_formula_apply\n\n",
 "on_bounded_formula_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem on_bounded_formula_symm (φ : «expr ≃ᴸ » L L') :\n    (φ.on_bounded_formula.symm : «expr ≃ » (L'.bounded_formula α n) (L.bounded_formula α n)) =\n      φ.symm.on_bounded_formula :=\n  rfl\n#align on_bounded_formula_symm on_bounded_formula_symm\n\n",
 "not_ex_is_qf":
 "theorem not_ex_is_qf (φ : L.bounded_formula α (n + 1)) : ¬φ.ex.is_qf := fun con =>\n  by\n  cases' Con with _ con _ _ con\n  · exact φ.not_ex_is_atomic Con\n  · exact not_all_is_qf _ Con\n#align not_ex_is_qf not_ex_is_qf\n\n",
 "not_ex_is_atomic":
 "theorem not_ex_is_atomic (φ : L.bounded_formula α (n + 1)) : ¬φ.ex.is_atomic := fun con => by cases Con\n#align not_ex_is_atomic not_ex_is_atomic\n\n",
 "not_all_is_qf":
 "theorem not_all_is_qf (φ : L.bounded_formula α (n + 1)) : ¬φ.all.is_qf := fun con =>\n  by\n  cases' Con with _ con\n  exact φ.not_all_is_atomic Con\n#align not_all_is_qf not_all_is_qf\n\n",
 "not_all_is_atomic":
 "theorem not_all_is_atomic (φ : L.bounded_formula α (n + 1)) : ¬φ.all.is_atomic := fun con => by cases Con\n#align not_all_is_atomic not_all_is_atomic\n\n",
 "not":
 "theorem is_qf.not {φ : L.bounded_formula α n} (h : IsQF φ) : IsQF φ.not :=\n  h.imp isQF_bot\n#align is_qf.not is_qf.not\n\n",
 "monotone_distinct_constants_theory":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\ntheorem monotone_distinct_constants_theory :\n    Monotone (L.distinct_constants_theory : Set α → (language.with_constants L α).Theory) := fun s t st =>\n  image_subset _ (inter_subset_inter_left _ (prod_mono st st))\n#align monotone_distinct_constants_theory monotone_distinct_constants_theory\n\n",
 "mem_on_Theory":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n@[simp]\ntheorem mem_on_Theory {g : «expr →ᴸ » L L'} {T : L.Theory} {φ : L'.sentence} :\n    φ ∈ g.on_Theory T ↔ ∃ φ₀, φ₀ ∈ T ∧ g.on_sentence φ₀ = φ :=\n  Set.mem_image _ _ _\n#align mem_on_Theory mem_on_Theory\n\n",
 "map_term_rel_map_term_rel":
 "@[simp]\ntheorem map_term_rel_map_term_rel {L'' : Language} (ft : ∀ n, L.term (Sum α (Fin n)) → L'.term (Sum β (Fin n)))\n    (fr : ∀ n, L.relations n → L'.relations n) (ft' : ∀ n, L'.term (Sum β (Fin n)) → L''.term (Sum γ (Fin n)))\n    (fr' : ∀ n, L'.relations n → L''.relations n) {n} (φ : L.bounded_formula α n) :\n    ((φ.map_term_rel ft fr fun _ => id).map_term_rel ft' fr' fun _ => id) =\n      φ.map_term_rel (fun _ => ft' _ ∘ ft _) (fun _ => fr' _ ∘ fr _) fun _ => id :=\n  by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp [map_term_rel]\n  · simp [map_term_rel]\n  · simp [map_term_rel, ih1, ih2]\n  · simp [map_term_rel, ih3]\n#align map_term_rel_map_term_rel map_term_rel_map_term_rel\n\n",
 "map_term_rel_id_id_id":
 "@[simp]\ntheorem map_term_rel_id_id_id {n} (φ : L.bounded_formula α n) :\n    (φ.map_term_rel (fun _ => id) (fun _ => id) fun _ => id) = φ :=\n  by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp [map_term_rel]\n  · simp [map_term_rel]\n  · simp [map_term_rel, ih1, ih2]\n  · simp [map_term_rel, ih3]\n#align map_term_rel_id_id_id map_term_rel_id_id_id\n\n",
 "lift_at":
 "theorem is_prenex.lift_at {k m : ℕ} (h : IsPrenex φ) : (φ.lift_at k m).is_prenex :=\n  is_prenex.rec_on h (fun _ _ ih => ih.lift_at.is_prenex) (fun _ _ _ ih => ih.cast_le.all) fun _ _ _ ih => ih.cast_le.ex\n#align is_prenex.lift_at is_prenex.lift_at\n\n",
 "is_qf_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem is_qf_bot : IsQF («expr⊥» : L.bounded_formula α n) :=\n  is_qf.falsum\n#align is_qf_bot is_qf_bot\n\n",
 "is_qf":
 "theorem is_atomic.is_qf {φ : L.bounded_formula α n} : IsAtomic φ → IsQF φ :=\n  is_qf.of_is_atomic\n#align is_atomic.is_qf is_atomic.is_qf\n\n",
 "is_prenex_to_prenex_imp_right":
 "theorem is_prenex_to_prenex_imp_right {φ ψ : L.bounded_formula α n} (hφ : IsQF φ) (hψ : IsPrenex ψ) :\n    IsPrenex (φ.to_prenex_imp_right ψ) :=\n  by\n  induction' hψ with _ _ hψ _ _ _ ih1 _ _ _ ih2\n  · rw [hψ.to_prenex_imp_right]\n    exact (hφ.imp hψ).is_prenex\n  · exact (ih1 hφ.lift_at).all\n  · exact (ih2 hφ.lift_at).ex\n#align is_prenex_to_prenex_imp_right is_prenex_to_prenex_imp_right\n\n",
 "is_prenex_to_prenex_imp":
 "theorem is_prenex_to_prenex_imp {φ ψ : L.bounded_formula α n} (hφ : IsPrenex φ) (hψ : IsPrenex ψ) :\n    IsPrenex (φ.to_prenex_imp ψ) := by\n  induction' hφ with _ _ hφ _ _ _ ih1 _ _ _ ih2\n  · rw [hφ.to_prenex_imp]\n    exact is_prenex_to_prenex_imp_right hφ hψ\n  · exact (ih1 hψ.lift_at).ex\n  · exact (ih2 hψ.lift_at).all\n#align is_prenex_to_prenex_imp is_prenex_to_prenex_imp\n\n",
 "is_prenex":
 "theorem is_atomic.is_prenex {φ : L.bounded_formula α n} (h : IsAtomic φ) : IsPrenex φ :=\n  h.is_qf.is_prenex\n#align is_atomic.is_prenex is_atomic.is_prenex\n\n",
 "is_atomic_graph":
 "-- input \\~- or \\simeq\n-- input \\==>\n-- input \\~, the ASCII character ~ has too low precedence\n-- input \\<=>\n-- input \\ex\ntheorem is_atomic_graph (f : L.functions n) : (graph f).is_atomic :=\n  bounded_formula.is_atomic.equal _ _\n#align is_atomic_graph is_atomic_graph\n\n",
 "induction_on_all_not":
 "theorem is_prenex.induction_on_all_not {P : ∀ {n}, L.bounded_formula α n → Prop} {φ : L.bounded_formula α n}\n    (h : IsPrenex φ) (hq : ∀ {m} {ψ : L.bounded_formula α m}, ψ.is_qf → P ψ)\n    (ha : ∀ {m} {ψ : L.bounded_formula α (m + 1)}, P ψ → P ψ.all)\n    (hn : ∀ {m} {ψ : L.bounded_formula α m}, P ψ → P ψ.not) : P φ :=\n  is_prenex.rec_on h (fun _ _ => hq) (fun _ _ _ => ha) fun _ _ _ ih => hn (ha (hn ih))\n#align is_prenex.induction_on_all_not is_prenex.induction_on_all_not\n\n",
 "id_on_term":
 "@[simp]\ntheorem id_on_term : ((LHom.id L).on_term : L.term α → L.term α) = id :=\n  by\n  ext t\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp_rw [on_term, ih]\n    rfl\n#align id_on_term id_on_term\n\n",
 "id_on_bounded_formula":
 "@[simp]\ntheorem id_on_bounded_formula : ((LHom.id L).on_bounded_formula : L.bounded_formula α n → L.bounded_formula α n) = id :=\n  by\n  ext f\n  induction' f with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · rw [on_bounded_formula, Lhom.id_on_term, id.def, id.def, id.def, bd_equal]\n  · rw [on_bounded_formula, Lhom.id_on_term]\n    rfl\n  · rw [on_bounded_formula, ih1, ih2, id.def, id.def, id.def]\n  · rw [on_bounded_formula, ih3, id.def, id.def]\n#align id_on_bounded_formula id_on_bounded_formula\n\n",
 "equiv_sentence_not":
 "theorem equiv_sentence_not (φ : L.formula α) : equivSentence φ.not = (equivSentence φ).not :=\n  rfl\n#align equiv_sentence_not equiv_sentence_not\n\n",
 "equiv_sentence_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem equiv_sentence_inf (φ ψ : L.formula α) :\n    equivSentence («expr ⊓ » φ ψ) = «expr ⊓ » (equivSentence φ) (equivSentence ψ) :=\n  rfl\n#align equiv_sentence_inf equiv_sentence_inf\n\n",
 "distinct_constants_theory_eq_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem distinct_constants_theory_eq_Union (s : Set α) :\n    L.distinct_constants_theory s =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (L.distinct_constants_theory (t.map (Function.Embedding.subtype fun x => x ∈ s))) :=\n  by\n  classical\n    simp only [distinct_constants_theory]\n    rw [← image_Union, ← Union_inter]\n    refine' congr rfl (congr (congr rfl _) rfl)\n    ext ⟨i, j⟩\n    simp only [prod_mk_mem_set_prod_eq, Finset.coe_map, Function.Embedding.coe_subtype, mem_Union, mem_image,\n      Finset.mem_coe, Subtype.exists, Subtype.coe_mk, exists_and_right, exists_eq_right]\n    refine' ⟨fun h => ⟨{⟨i, h.1⟩, ⟨j, h.2⟩}, ⟨h.1, _⟩, ⟨h.2, _⟩⟩, _⟩\n    · simp\n    · simp\n    · rintro ⟨t, ⟨is, _⟩, ⟨js, _⟩⟩\n      exact ⟨is, js⟩\n#align distinct_constants_theory_eq_Union distinct_constants_theory_eq_Union\n\n",
 "directed_distinct_constants_theory":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\ntheorem directed_distinct_constants_theory :\n    Directed (· ⊆ ·) (L.distinct_constants_theory : Set α → (language.with_constants L α).Theory) :=\n  Monotone.directed_le monotone_distinctConstantsTheory\n#align directed_distinct_constants_theory directed_distinct_constants_theory\n\n",
 "constants_vars_equiv_left_symm_apply":
 "@[simp]\ntheorem constants_vars_equiv_left_symm_apply (t : L.term (Sum (Sum γ α) β)) :\n    constantsVarsEquivLeft.symm t = varsToConstants (t.relabel (Equiv.sumAssoc _ _ _)) :=\n  rfl\n#align constants_vars_equiv_left_symm_apply constants_vars_equiv_left_symm_apply\n\n",
 "constants_vars_equiv_left_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.with_constants -/\n@[simp]\ntheorem constants_vars_equiv_left_apply (t : (language.with_constants L γ).term (Sum α β)) :\n    constantsVarsEquivLeft t = (constantsToVars t).relabel (Equiv.sumAssoc _ _ _).symm :=\n  rfl\n#align constants_vars_equiv_left_apply constants_vars_equiv_left_apply\n\n",
 "comp_on_term":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n@[simp]\ntheorem comp_on_term {L'' : Language} (φ : «expr →ᴸ » L' L'') (ψ : «expr →ᴸ » L L') :\n    ((φ.comp ψ).on_term : L.term α → L''.term α) = φ.on_term ∘ ψ.on_term :=\n  by\n  ext t\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp_rw [on_term, ih]\n    rfl\n#align comp_on_term comp_on_term\n\n",
 "comp_on_bounded_formula":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᴸ » -/\n@[simp]\ntheorem comp_on_bounded_formula {L'' : Language} (φ : «expr →ᴸ » L' L'') (ψ : «expr →ᴸ » L L') :\n    ((φ.comp ψ).on_bounded_formula : L.bounded_formula α n → L''.bounded_formula α n) =\n      φ.on_bounded_formula ∘ ψ.on_bounded_formula :=\n  by\n  ext f\n  induction' f with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp only [on_bounded_formula, comp_on_term, Function.comp_apply]\n    rfl\n  · simp only [on_bounded_formula, comp_on_relation, comp_on_term, Function.comp_apply]\n    rfl\n  · simp only [on_bounded_formula, Function.comp_apply, ih1, ih2, eq_self_iff_true, and_self_iff]\n  · simp only [ih3, on_bounded_formula, Function.comp_apply]\n#align comp_on_bounded_formula comp_on_bounded_formula\n\n",
 "cast_le_rfl":
 "@[simp]\ntheorem cast_le_rfl {n} (h : n ≤ n) (φ : L.bounded_formula α n) : φ.cast_le h = φ :=\n  by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp [Fin.castLE_of_eq]\n  · simp [Fin.castLE_of_eq]\n  · simp [Fin.castLE_of_eq, ih1, ih2]\n  · simp [Fin.castLE_of_eq, ih3]\n#align cast_le_rfl cast_le_rfl\n\n",
 "cast_le_comp_cast_le":
 "@[simp]\ntheorem cast_le_comp_cast_le {k m n} (km : k ≤ m) (mn : m ≤ n) :\n    (BoundedFormula.castLE mn ∘ BoundedFormula.castLE km : L.bounded_formula α k → L.bounded_formula α n) =\n      BoundedFormula.castLE (km.trans mn) :=\n  funext (castLE_castLE km mn)\n#align cast_le_comp_cast_le cast_le_comp_cast_le\n\n",
 "cast_le_cast_le":
 "@[simp]\ntheorem cast_le_cast_le {k m n} (km : k ≤ m) (mn : m ≤ n) (φ : L.bounded_formula α k) :\n    (φ.cast_le km).cast_le mn = φ.cast_le (km.trans mn) :=\n  by\n  revert m n\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3 <;> intro m n km mn\n  · rfl\n  · simp\n  · simp only [cast_le, eq_self_iff_true, heq_iff_eq, true_and_iff]\n    rw [← function.comp.assoc, relabel_comp_relabel]\n    simp\n  · simp [ih1, ih2]\n  · simp only [cast_le, ih3]\n#align cast_le_cast_le cast_le_cast_le\n\n",
 "cast_le":
 "theorem is_prenex.cast_le (hφ : IsPrenex φ) : ∀ {n} {h : l ≤ n}, (φ.cast_le h).is_prenex :=\n  is_prenex.rec_on hφ (fun _ _ ih _ _ => ih.cast_le.is_prenex) (fun _ _ _ ih _ _ => ih.all) fun _ _ _ ih _ _ => ih.ex\n#align is_prenex.cast_le is_prenex.cast_le\n\n"}