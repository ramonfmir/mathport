{"to_fun_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.hom -/\n@[simp]\ntheorem to_fun_eq_coe {f : language.hom M L N} : f.to_fun = (f : M → N) :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "to_embedding_to_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem to_embedding_to_hom (f : language.equiv M L N) : f.to_embedding.to_hom = f.to_hom :=\n  rfl\n#align to_embedding_to_hom to_embedding_to_hom\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem symm_apply_apply (f : language.equiv M L N) (a : M) : f.symm (f a) = a :=\n  f.to_equiv.symm_apply_apply a\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\ntheorem surjective (f : language.equiv M L N) : function.surjective f :=\n  equiv_like.surjective f\n#align surjective surjective\n\n",
 "sum_card":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem sum_card :\n    (cardinal.sum fun i => cardinal.mk (sequence₂ a₀ a₁ a₂ i)) = cardinal.mk a₀ + cardinal.mk a₁ + cardinal.mk a₂ :=\n  by\n  rw [sum_nat_eq_add_sum_succ, sum_nat_eq_add_sum_succ, sum_nat_eq_add_sum_succ]\n  simp [add_assoc]\n#align sum_card sum_card\n\n",
 "rel_map_sum_inr":
 "@[simp]\ntheorem rel_map_sum_inr {n : ℕ} (R : L₂.relations n) : @rel_map (L₁.sum L₂) S _ n (sum.inr R) = rel_map R :=\n  rfl\n#align rel_map_sum_inr rel_map_sum_inr\n\n",
 "rel_map_sum_inl":
 "@[simp]\ntheorem rel_map_sum_inl {n : ℕ} (R : L₁.relations n) : @rel_map (L₁.sum L₂) S _ n (sum.inl R) = rel_map R :=\n  rfl\n#align rel_map_sum_inl rel_map_sum_inl\n\n",
 "rel_map_apply₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem rel_map_apply₂ (r : r₂) (x y : M) :\n    @Structure.rel_map _ M (Structure.mk₂ c' f₁' f₂' r₁' r₂') 2 r\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") =\n      r₂' r x y :=\n  rfl\n#align rel_map_apply₂ rel_map_apply₂\n\n",
 "rel_map_apply₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem rel_map_apply₁ (r : r₁) (x : M) :\n    @Structure.rel_map _ M (Structure.mk₂ c' f₁' f₂' r₁' r₂') 1 r\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") =\n      (x ∈ r₁' r) :=\n  rfl\n#align rel_map_apply₁ rel_map_apply₁\n\n",
 "refl_apply":
 "@[simp]\ntheorem refl_apply (x : M) : refl L M x = x :=\n  rfl\n#align refl_apply refl_apply\n\n",
 "of_injective_to_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.hom -/\n@[simp]\ntheorem of_injective_to_hom [L.is_algebraic] {f : language.hom M L N} (hf : function.injective f) :\n    (of_injective hf).to_hom = f := by\n  ext\n  simp\n#align of_injective_to_hom of_injective_to_hom\n\n",
 "nonempty_of_nonempty_constants":
 "/-- Given a language with a nonempty type of constants, any structure will be nonempty. This cannot\n  be a global instance, because `L` becomes a metavariable. -/\ntheorem nonempty_of_nonempty_constants [h : nonempty L.constants] : nonempty M :=\n  h.map coe\n#align nonempty_of_nonempty_constants nonempty_of_nonempty_constants\n\n",
 "nonempty_equiv_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem empty.nonempty_equiv_iff :\n    nonempty (language.equiv M language.empty N) ↔\n      cardinal.lift.{w'} (cardinal.mk M) = cardinal.lift.{w} (cardinal.mk N) :=\n  trans ⟨nonempty.map fun f => f.to_equiv, nonempty.map fun f => { to_equiv := f }⟩ cardinal.lift_mk_eq'.symm\n#align empty.nonempty_equiv_iff empty.nonempty_equiv_iff\n\n",
 "nonempty_embedding_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.embedding -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem empty.nonempty_embedding_iff :\n    nonempty (language.embedding M language.empty N) ↔\n      cardinal.lift.{w'} (cardinal.mk M) ≤ cardinal.lift.{w} (cardinal.mk N) :=\n  trans ⟨nonempty.map fun f => f.to_embedding, nonempty.map fun f => { to_embedding := f }⟩ cardinal.lift_mk_le'.symm\n#align empty.nonempty_embedding_iff empty.nonempty_embedding_iff\n\n",
 "map_rel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem map_rel (φ : language.equiv M L N) {n : ℕ} (r : L.relations n) (x : fin n → M) :\n    rel_map r (φ ∘ x) ↔ rel_map r x :=\n  strong_hom_class.map_rel φ r x\n#align map_rel map_rel\n\n",
 "map_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem map_fun (φ : language.equiv M L N) {n : ℕ} (f : L.functions n) (x : fin n → M) :\n    φ (fun_map f x) = fun_map f (φ ∘ x) :=\n  hom_class.map_fun φ f x\n#align map_fun map_fun\n\n",
 "map_constants":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem map_constants (φ : language.equiv M L N) (c : L.constants) : φ c = c :=\n  hom_class.map_constants φ c\n#align map_constants map_constants\n\n",
 "lift_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-\nCopyright (c) 2021 Aaron Anderson, Jesse Michael Han, Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson, Jesse Michael Han, Floris van Doorn\n-/\n-- intended to be used with explicit universe parameters\n@[simp]\ntheorem lift_mk {i : ℕ} :\n    cardinal.lift (cardinal.mk (sequence₂ a₀ a₁ a₂ i)) = cardinal.mk (sequence₂ (ULift a₀) (ULift a₁) (ULift a₂) i) :=\n  by\n  rcases i with (_ | _ | _ | i) <;>\n    simp only [sequence₂, mk_ulift, mk_fintype, fintype.card_of_is_empty, Nat.cast_zero, lift_zero]\n#align lift_mk lift_mk\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\ntheorem injective (f : language.equiv M L N) : function.injective f :=\n  equiv_like.injective f\n#align injective injective\n\n",
 "id_apply":
 "@[simp]\ntheorem id_apply (x : M) : id L M x = x :=\n  rfl\n#align id_apply id_apply\n\n",
 "fun_map_sum_inr":
 "@[simp]\ntheorem fun_map_sum_inr {n : ℕ} (f : L₂.functions n) : @fun_map (L₁.sum L₂) S _ n (sum.inr f) = fun_map f :=\n  rfl\n#align fun_map_sum_inr fun_map_sum_inr\n\n",
 "fun_map_sum_inl":
 "@[simp]\ntheorem fun_map_sum_inl {n : ℕ} (f : L₁.functions n) : @fun_map (L₁.sum L₂) S _ n (sum.inl f) = fun_map f :=\n  rfl\n#align fun_map_sum_inl fun_map_sum_inl\n\n",
 "fun_map_eq_coe_constants":
 "theorem fun_map_eq_coe_constants {c : L.constants} {x : fin 0 → M} : fun_map c x = c :=\n  congr rfl (funext Fin.elim0)\n#align fun_map_eq_coe_constants fun_map_eq_coe_constants\n\n",
 "fun_map_apply₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem fun_map_apply₂ (f : f₂) (x y : M) :\n    @Structure.fun_map _ M (Structure.mk₂ c' f₁' f₂' r₁' r₂') 2 f\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") =\n      f₂' f x y :=\n  rfl\n#align fun_map_apply₂ fun_map_apply₂\n\n",
 "fun_map_apply₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr![ ,]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]» -/\n@[simp]\ntheorem fun_map_apply₁ (f : f₁) (x : M) :\n    @Structure.fun_map _ M (Structure.mk₂ c' f₁' f₂' r₁' r₂') 1 f\n        («expr![ ,]» \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr![ ,]»\") =\n      f₁' f x :=\n  rfl\n#align fun_map_apply₁ fun_map_apply₁\n\n",
 "fun_map_apply₀":
 "@[simp]\ntheorem fun_map_apply₀ (c₀ : c) {x : fin 0 → M} :\n    @Structure.fun_map _ M (Structure.mk₂ c' f₁' f₂' r₁' r₂') 0 c₀ x = c' c₀ :=\n  rfl\n#align fun_map_apply₀ fun_map_apply₀\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\ntheorem ext_iff {f g : language.equiv M L N} : f = g ↔ ∀ x, f x = g x :=\n  ⟨fun h x => h ▸ rfl, fun h => ext h⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[ext]\ntheorem ext ⦃f g : language.equiv M L N⦄ (h : ∀ x, f x = g x) : f = g :=\n  coe_injective (funext h)\n#align ext ext\n\n",
 "empty_card":
 "@[simp]\ntheorem empty_card : language.empty.card = 0 := by simp [card_eq_card_functions_add_card_relations]\n#align empty_card empty_card\n\n",
 "constants_mk₂":
 "@[simp]\ntheorem constants_mk₂ (c f₁ f₂ : Type u) (r₁ r₂ : Type v) : (language.mk₂ c f₁ f₂ r₁ r₂).constants = c :=\n  rfl\n#align constants_mk₂ constants_mk₂\n\n",
 "comp_to_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.embedding -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.embedding -/\n@[simp]\ntheorem comp_to_hom (hnp : language.embedding N L P) (hmn : language.embedding M L N) :\n    (hnp.comp hmn).to_hom = hnp.to_hom.comp hmn.to_hom := by\n  ext\n  simp only [coe_to_hom, comp_apply, hom.comp_apply]\n#align comp_to_hom comp_to_hom\n\n",
 "comp_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n/-- Composition of first-order homomorphisms is associative. -/\ntheorem comp_assoc (f : language.equiv M L N) (g : language.equiv N L P) (h : language.equiv P L Q) :\n    (h.comp g).comp f = h.comp (g.comp f) :=\n  rfl\n#align comp_assoc comp_assoc\n\n",
 "comp_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem comp_apply (g : language.equiv N L P) (f : language.equiv M L N) (x : M) : g.comp f x = g (f x) :=\n  rfl\n#align comp_apply comp_apply\n\n",
 "coe_to_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem coe_to_hom {f : language.equiv M L N} : (f.to_hom : M → N) = (f : M → N) :=\n  rfl\n#align coe_to_hom coe_to_hom\n\n",
 "coe_to_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem coe_to_embedding (f : language.equiv M L N) : (f.to_embedding : M → N) = (f : M → N) :=\n  rfl\n#align coe_to_embedding coe_to_embedding\n\n",
 "coe_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\ntheorem coe_injective : @function.injective (language.equiv M L N) (M → N) coe_fn :=\n  fun_like.coe_injective\n#align coe_injective coe_injective\n\n",
 "coe_fn_of_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.hom -/\n@[simp]\ntheorem coe_fn_of_injective [L.is_algebraic] {f : language.hom M L N} (hf : function.injective f) :\n    (of_injective hf : M → N) = f :=\n  rfl\n#align coe_fn_of_injective coe_fn_of_injective\n\n",
 "card_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem card_sum : (L.sum L').card = cardinal.lift.{max u' v'} L.card + cardinal.lift.{max u v} L'.card :=\n  by\n  simp only [card_eq_card_functions_add_card_relations, card_functions_sum, card_relations_sum, sum_add_distrib',\n    lift_add, lift_sum, lift_lift]\n  rw [add_assoc, ← add_assoc (cardinal.sum fun i => (cardinal.mk (L'.functions i)).lift),\n    add_comm (cardinal.sum fun i => (cardinal.mk (L'.functions i)).lift), add_assoc, add_assoc]\n#align card_sum card_sum\n\n",
 "card_relations_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem card_relations_sum (i : ℕ) :\n    cardinal.mk ((L.sum L').relations i) =\n      (cardinal.mk (L.relations i)).lift + cardinal.lift.{v} (cardinal.mk (L'.relations i)) :=\n  by simp [language.sum]\n#align card_relations_sum card_relations_sum\n\n",
 "card_mk₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem card_mk₂ (c f₁ f₂ : Type u) (r₁ r₂ : Type v) :\n    (language.mk₂ c f₁ f₂ r₁ r₂).card =\n      cardinal.lift.{v} (cardinal.mk c) + cardinal.lift.{v} (cardinal.mk f₁) + cardinal.lift.{v} (cardinal.mk f₂) +\n          cardinal.lift.{u} (cardinal.mk r₁) +\n        cardinal.lift.{u} (cardinal.mk r₂) :=\n  by simp [card_eq_card_functions_add_card_relations, add_assoc]\n#align card_mk₂ card_mk₂\n\n",
 "card_functions_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n@[simp]\ntheorem card_functions_sum (i : ℕ) :\n    cardinal.mk ((L.sum L').functions i) =\n      (cardinal.mk (L.functions i)).lift + cardinal.lift.{u} (cardinal.mk (L'.functions i)) :=\n  by simp [language.sum]\n#align card_functions_sum card_functions_sum\n\n",
 "card_eq_card_functions_add_card_relations":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\ntheorem card_eq_card_functions_add_card_relations :\n    L.card =\n      (cardinal.sum fun l => cardinal.lift.{v} (cardinal.mk (L.functions l))) +\n        cardinal.sum fun l => cardinal.lift.{u} (cardinal.mk (L.relations l)) :=\n  by simp [card, symbols]\n#align card_eq_card_functions_add_card_relations card_eq_card_functions_add_card_relations\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\ntheorem bijective (f : language.equiv M L N) : function.bijective f :=\n  equiv_like.bijective f\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `language.equiv -/\n@[simp]\ntheorem apply_symm_apply (f : language.equiv M L N) (a : N) : f (f.symm a) = a :=\n  f.to_equiv.apply_symm_apply a\n#align apply_symm_apply apply_symm_apply\n\n"}