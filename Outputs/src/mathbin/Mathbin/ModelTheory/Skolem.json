{"skolem₁_reduct_is_elementary":
 "theorem skolem₁_reduct_is_elementary (S : (L.sum L.skolem₁).substructure M) :\n    (Lhom.sum_inl.substructure_reduct S).is_elementary :=\n  by\n  apply (Lhom.sum_inl.substructure_reduct S).is_elementary_of_exists\n  intro n φ x a h\n  let φ' : (L.sum L.skolem₁).functions n := Lhom.sum_inr.on_function φ\n  exact\n    ⟨⟨fun_map φ' (coe ∘ x), S.fun_mem (Lhom.sum_inr.on_function φ) (coe ∘ x) fun i => (x i).2⟩,\n      classical.epsilon_spec ⟨a, h⟩⟩\n#align skolem₁_reduct_is_elementary skolem₁_reduct_is_elementary\n\n",
 "exists_small_elementary_substructure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem exists_small_elementary_substructure : ∃ S : L.elementary_substructure M, Small.{max u v} S :=\n  ⟨substructure.elementary_skolem₁_reduct («expr⊥»), infer_instance⟩\n#align exists_small_elementary_substructure exists_small_elementary_substructure\n\n",
 "exists_elementary_substructure_card_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.aleph_0 -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-- The Downward Löwenheim–Skolem theorem :\n  If `s` is a set in an `L`-structure `M` and `κ` an infinite cardinal such that\n  `max (# s, L.card) ≤ κ` and `κ ≤ # M`, then `M` has an elementary substructure containing `s` of\n  cardinality `κ`.  -/\ntheorem exists_elementary_substructure_card_eq (s : set M) (κ : cardinal.{w'}) (h1 : cardinal.aleph_0 ≤ κ)\n    (h2 : cardinal.lift.{w'} (cardinal.mk s) ≤ cardinal.lift.{w} κ)\n    (h3 : cardinal.lift.{w'} L.card ≤ cardinal.lift.{max u v} κ)\n    (h4 : cardinal.lift.{w} κ ≤ cardinal.lift.{w'} (cardinal.mk M)) :\n    ∃ S : L.elementary_substructure M, s ⊆ S ∧ cardinal.lift.{w'} (cardinal.mk S) = cardinal.lift.{w} κ :=\n  by\n  obtain ⟨s', hs'⟩ := cardinal.le_mk_iff_exists_set.1 h4\n  rw [← aleph_0_le_lift] at h1\n  rw [← hs'] at *\n  refine'\n    ⟨elementary_skolem₁_reduct (closure (L.sum L.skolem₁) (s ∪ «expr '' » equiv.ulift s')),\n      (s.subset_union_left _).trans subset_closure, _⟩\n  have h := mk_image_eq_lift _ s' equiv.ulift.injective\n  rw [lift_umax, lift_id'] at h\n  rw [coe_sort_elementary_skolem₁_reduct, ← h, lift_inj]\n  refine'\n    le_antisymm (lift_le.1 (lift_card_closure_le.trans _))\n      (mk_le_mk_of_subset ((Set.subset_union_right _ _).trans subset_closure))\n  rw [max_le_iff, aleph_0_le_lift, ← aleph_0_le_lift, h, add_eq_max, max_le_iff, lift_le]\n  refine' ⟨h1, (mk_union_le _ _).trans _, (lift_le.2 card_functions_sum_skolem₁_le).trans _⟩\n  · rw [← lift_le, lift_add, h, add_comm, add_eq_max h1]\n    exact max_le le_rfl h2\n  · rw [lift_max, lift_aleph_0, max_le_iff, aleph_0_le_lift, and_comm', ← lift_le.{_, w'}, lift_lift, lift_lift, ←\n      aleph_0_le_lift, h]\n    refine' ⟨_, h1⟩\n    simp only [← lift_lift, lift_umax, lift_umax']\n    rw [lift_lift, ← lift_lift.{w', w} L.card]\n    refine' trans (lift_le.{_, w}.2 h3) _\n    rw [lift_lift, ← lift_lift.{w, max u v}, ← hs', ← h, lift_lift, lift_lift, lift_lift]\n  · refine' trans _ (lift_le.2 (mk_le_mk_of_subset (Set.subset_union_right _ _)))\n    rw [aleph_0_le_lift, ← aleph_0_le_lift, h]\n    exact h1\n#align exists_elementary_substructure_card_eq exists_elementary_substructure_card_eq\n\n",
 "coe_sort_elementary_skolem₁_reduct":
 "theorem coe_sort_elementary_skolem₁_reduct (S : (L.sum L.skolem₁).substructure M) :\n    (S.elementary_skolem₁_reduct : Type w) = S :=\n  rfl\n#align coe_sort_elementary_skolem₁_reduct coe_sort_elementary_skolem₁_reduct\n\n",
 "card_functions_sum_skolem₁_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.aleph_0 -/\ntheorem card_functions_sum_skolem₁_le :\n    cardinal.mk (Σn, (L.sum L.skolem₁).functions n) ≤ max (cardinal.aleph_0) L.card :=\n  by\n  rw [card_functions_sum_skolem₁]\n  trans cardinal.mk (Σn, L.bounded_formula empty n)\n  · exact ⟨⟨sigma.map nat.succ fun _ => id, nat.succ_injective.sigma_map fun _ => function.injective_id⟩⟩\n  · refine' trans bounded_formula.card_le (lift_le.1 _)\n    simp only [mk_empty, lift_zero, lift_uzero, zero_add]\n#align card_functions_sum_skolem₁_le card_functions_sum_skolem₁_le\n\n",
 "card_functions_sum_skolem₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/-\nCopyright (c) 2022 Aaron Anderson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson\n-/\ntheorem card_functions_sum_skolem₁ :\n    cardinal.mk (Σn, (L.sum L.skolem₁).functions n) = cardinal.mk (Σn, L.bounded_formula empty (n + 1)) :=\n  by\n  simp only [card_functions_sum, skolem₁_functions, lift_id', mk_sigma, sum_add_distrib']\n  rw [add_comm, add_eq_max, max_eq_left]\n  · refine' sum_le_sum _ _ fun n => _\n    rw [← lift_le, lift_lift, lift_mk_le]\n    refine' ⟨⟨fun f => (func f default).bd_equal (func f default), fun f g h => _⟩⟩\n    rcases h with ⟨rfl, ⟨rfl⟩⟩\n    rfl\n  · rw [← mk_sigma]\n    exact infinite_iff.1 (infinite.of_injective (fun n => ⟨n, «expr⊥»⟩) fun x y xy => (sigma.mk.inj xy).1)\n#align card_functions_sum_skolem₁ card_functions_sum_skolem₁\n\n"}