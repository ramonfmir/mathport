{"tendsto_const_smul_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_const_smul_iff₀ {f : β → α} {l : filter β} {a : α} {c : G₀} (hc : c ≠ 0) :\n    tendsto (fun x => «expr • » c (f x)) l (nhds <| «expr • » c a) ↔ tendsto f l ((nhds) a) :=\n  tendsto_const_smul_iff (Units.mk0 c hc)\n#align tendsto_const_smul_iff₀ tendsto_const_smul_iff₀\n\n",
 "tendsto_const_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_const_smul_iff {f : β → α} {l : filter β} {a : α} {c : M} (hc : is_unit c) :\n    tendsto (fun x => «expr • » c (f x)) l (nhds <| «expr • » c a) ↔ tendsto f l ((nhds) a) :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ tendsto_const_smul_iff u\n#align tendsto_const_smul_iff tendsto_const_smul_iff\n\n",
 "smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_closed.smul₀ {𝕜 M : Type _} [DivisionRing 𝕜] [add_comm_monoid M] [topological_space M] [t1_space M]\n    [Module 𝕜 M] [has_continuous_const_smul 𝕜 M] (c : 𝕜) {s : set M} (hs : is_closed s) : is_closed («expr • » c s) :=\n  is_closed_map_smul₀ c s hs\n#align is_closed.smul₀ is_closed.smul₀\n\n",
 "smul_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_closed.smul_of_ne_zero {c : G₀} {s : set α} (hs : is_closed s) (hc : c ≠ 0) : is_closed («expr • » c s) :=\n  is_closed_map_smul_of_ne_zero hc s hs\n#align is_closed.smul_of_ne_zero is_closed.smul_of_ne_zero\n\n",
 "smul_closure_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[to_additive]\ntheorem smul_closure_subset (c : M) (s : set α) : «expr • » c (closure s) ⊆ closure («expr • » c s) :=\n  ((Set.mapsTo_image _ _).closure <| continuous_id.const_smul c).image_subset\n#align smul_closure_subset smul_closure_subset\n\n",
 "smul_closure_orbit_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[to_additive]\ntheorem smul_closure_orbit_subset (c : M) (x : α) :\n    «expr • » c (closure (mul_action.orbit M x)) ⊆ closure (mul_action.orbit M x) :=\n  (smul_closure_subset c _).trans <| closure_mono <| mul_action.smul_orbit_subset _ _\n#align smul_closure_orbit_subset smul_closure_orbit_subset\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[to_additive]\ntheorem dense.smul (c : G) {s : set α} (hs : dense s) : dense («expr • » c s) := by\n  rw [dense_iff_closure_eq] at hs⊢ <;> rw [closure_smul, hs, smul_set_univ]\n#align dense.smul dense.smul\n\n",
 "set_smul_mem_nhds_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem set_smul_mem_nhds_zero_iff {s : set α} {c : G₀} (hc : c ≠ 0) :\n    «expr • » c s ∈ (nhds) (0 : α) ↔ s ∈ (nhds) (0 : α) :=\n  by\n  refine' iff.trans _ (set_smul_mem_nhds_smul_iff hc)\n  rw [smul_zero]\n#align set_smul_mem_nhds_zero_iff set_smul_mem_nhds_zero_iff\n\n",
 "set_smul_mem_nhds_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem set_smul_mem_nhds_smul_iff {c : G₀} {s : set α} {x : α} (hc : c ≠ 0) :\n    «expr • » c s ∈ (nhds) («expr • » c x : α) ↔ s ∈ (nhds) x :=\n  by\n  refine' ⟨fun h => _, fun h => set_smul_mem_nhds_smul h hc⟩\n  rw [← inv_smul_smul₀ hc x, ← inv_smul_smul₀ hc s]\n  exact set_smul_mem_nhds_smul h (inv_ne_zero hc)\n#align set_smul_mem_nhds_smul_iff set_smul_mem_nhds_smul_iff\n\n",
 "set_smul_mem_nhds_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Scalar multiplication preserves neighborhoods. -/\ntheorem set_smul_mem_nhds_smul {c : G₀} {s : set α} {x : α} (hs : s ∈ (nhds) x) (hc : c ≠ 0) :\n    «expr • » c s ∈ (nhds) («expr • » c x : α) :=\n  by\n  rw [mem_nhds_iff] at hs⊢\n  obtain ⟨U, hs', hU, hU'⟩ := hs\n  exact ⟨«expr • » c U, Set.smul_set_mono hs', hU.smul₀ hc, Set.smul_mem_smul_set hU'⟩\n#align set_smul_mem_nhds_smul set_smul_mem_nhds_smul\n\n",
 "second_countable_topology":
 "/-- The quotient of a second countable space by a group action is second countable. -/\n@[to_additive \"The quotient of a second countable space by an additive group action is second\\ncountable.\"]\ntheorem has_continuous_const_smul.second_countable_topology [second_countable_topology T]\n    [has_continuous_const_smul Γ T] : second_countable_topology (quotient (mul_action.orbit_rel Γ T)) :=\n  topological_space.quotient.second_countable_topology is_open_map_quotient_mk_mul\n#align has_continuous_const_smul.second_countable_topology has_continuous_const_smul.second_countable_topology\n\n",
 "is_open_map_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_open_map_smul₀ {c : G₀} (hc : c ≠ 0) : is_open_map fun x : α => «expr • » c x :=\n  (homeomorph.smul_of_ne_zero c hc).is_open_map\n#align is_open_map_smul₀ is_open_map_smul₀\n\n",
 "is_open_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_open_map_smul (hc : is_unit c) : is_open_map fun x : α => «expr • » c x :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ is_open_map_smul u\n#align is_open_map_smul is_open_map_smul\n\n",
 "is_open_map_quotient_mk_mul":
 "/-- The quotient map by a group action is open, i.e. the quotient by a group action is an open\n  quotient. -/\n@[to_additive \"The quotient map by a group action is open, i.e. the quotient by a group\\naction is an open quotient. \"]\ntheorem is_open_map_quotient_mk_mul [has_continuous_const_smul Γ T] :\n    is_open_map (Quotient.mk'' : T → quotient (mul_action.orbit_rel Γ T)) :=\n  by\n  intro U hU\n  rw [is_open_coinduced, mul_action.quotient_preimage_image_eq_union_mul U]\n  exact is_open_Union fun γ => (homeomorph.smul γ).is_open_map U hU\n#align is_open_map_quotient_mk_mul is_open_map_quotient_mk_mul\n\n",
 "is_closed_map_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- `smul` is a closed map in the second argument.\n\nThe lemma that `smul` is a closed map in the first argument (for a normed space over a complete\nnormed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/\ntheorem is_closed_map_smul₀ {𝕜 M : Type _} [DivisionRing 𝕜] [add_comm_monoid M] [topological_space M] [t1_space M]\n    [Module 𝕜 M] [has_continuous_const_smul 𝕜 M] (c : 𝕜) : is_closed_map fun x : M => «expr • » c x :=\n  by\n  rcases eq_or_ne c 0 with (rfl | hne)\n  · simp only [zero_smul]\n    exact is_closed_map_const\n  · exact (homeomorph.smul_of_ne_zero c hne).is_closed_map\n#align is_closed_map_smul₀ is_closed_map_smul₀\n\n",
 "is_closed_map_smul_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- `smul` is a closed map in the second argument.\n\nThe lemma that `smul` is a closed map in the first argument (for a normed space over a complete\nnormed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/\ntheorem is_closed_map_smul_of_ne_zero {c : G₀} (hc : c ≠ 0) : is_closed_map fun x : α => «expr • » c x :=\n  (homeomorph.smul_of_ne_zero c hc).is_closed_map\n#align is_closed_map_smul_of_ne_zero is_closed_map_smul_of_ne_zero\n\n",
 "is_closed_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_closed_map_smul (hc : is_unit c) : is_closed_map fun x : α => «expr • » c x :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ is_closed_map_smul u\n#align is_closed_map_smul is_closed_map_smul\n\n",
 "interior_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem interior_smul₀ {c : G₀} (hc : c ≠ 0) (s : set α) : interior («expr • » c s) = «expr • » c (interior s) :=\n  ((homeomorph.smul_of_ne_zero c hc).image_interior s).symm\n#align interior_smul₀ interior_smul₀\n\n",
 "interior_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[to_additive]\ntheorem interior_smul (c : G) (s : set α) : interior («expr • » c s) = «expr • » c (interior s) :=\n  ((homeomorph.smul c).image_interior s).symm\n#align interior_smul interior_smul\n\n",
 "continuous_within_at_const_smul_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_within_at_const_smul_iff₀ (hc : c ≠ 0) :\n    continuous_within_at (fun x => «expr • » c (f x)) s b ↔ continuous_within_at f s b :=\n  tendsto_const_smul_iff (Units.mk0 c hc)\n#align continuous_within_at_const_smul_iff₀ continuous_within_at_const_smul_iff₀\n\n",
 "continuous_within_at_const_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_within_at_const_smul_iff (hc : is_unit c) :\n    continuous_within_at (fun x => «expr • » c (f x)) s b ↔ continuous_within_at f s b :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ continuous_within_at_const_smul_iff u\n#align continuous_within_at_const_smul_iff continuous_within_at_const_smul_iff\n\n",
 "continuous_on_const_smul_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_on_const_smul_iff₀ (hc : c ≠ 0) : continuous_on (fun x => «expr • » c (f x)) s ↔ continuous_on f s :=\n  continuous_on_const_smul_iff (Units.mk0 c hc)\n#align continuous_on_const_smul_iff₀ continuous_on_const_smul_iff₀\n\n",
 "continuous_on_const_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_on_const_smul_iff (hc : is_unit c) :\n    continuous_on (fun x => «expr • » c (f x)) s ↔ continuous_on f s :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ continuous_on_const_smul_iff u\n#align continuous_on_const_smul_iff continuous_on_const_smul_iff\n\n",
 "continuous_const_smul_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_const_smul_iff₀ (hc : c ≠ 0) : (continuous fun x => «expr • » c (f x)) ↔ continuous f :=\n  continuous_const_smul_iff (Units.mk0 c hc)\n#align continuous_const_smul_iff₀ continuous_const_smul_iff₀\n\n",
 "continuous_const_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_const_smul_iff (hc : is_unit c) : (continuous fun x => «expr • » c (f x)) ↔ continuous f :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ continuous_const_smul_iff u\n#align continuous_const_smul_iff continuous_const_smul_iff\n\n",
 "continuous_at_const_smul_iff₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_at_const_smul_iff₀ (hc : c ≠ 0) : continuous_at (fun x => «expr • » c (f x)) b ↔ continuous_at f b :=\n  continuous_at_const_smul_iff (Units.mk0 c hc)\n#align continuous_at_const_smul_iff₀ continuous_at_const_smul_iff₀\n\n",
 "continuous_at_const_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem continuous_at_const_smul_iff (hc : is_unit c) :\n    continuous_at (fun x => «expr • » c (f x)) b ↔ continuous_at f b :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ continuous_at_const_smul_iff u\n#align continuous_at_const_smul_iff continuous_at_const_smul_iff\n\n",
 "const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[continuity, to_additive]\ntheorem continuous.const_smul (hg : continuous g) (c : M) : continuous fun x => «expr • » c (g x) :=\n  (continuous_const_smul _).comp hg\n#align continuous.const_smul continuous.const_smul\n\n",
 "comp_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem has_compact_support.comp_smul {β : Type _} [Zero β] {f : α → β} (h : has_compact_support f) {c : G₀}\n    (hc : c ≠ 0) : has_compact_support fun x => f («expr • » c x) :=\n  h.comp_homeomorph (homeomorph.smul_of_ne_zero c hc)\n#align has_compact_support.comp_smul has_compact_support.comp_smul\n\n",
 "closure_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem closure_smul₀ {E} [Zero E] [MulActionWithZero G₀ E] [topological_space E] [t1_space E]\n    [has_continuous_const_smul G₀ E] (c : G₀) (s : set E) : closure («expr • » c s) = «expr • » c (closure s) :=\n  by\n  rcases eq_or_ne c 0 with (rfl | hc)\n  · rcases eq_empty_or_nonempty s with (rfl | hs)\n    · simp\n    · rw [zero_smul_set hs, zero_smul_set hs.closure]\n      exact closure_singleton\n  · exact ((homeomorph.smul_of_ne_zero c hc).image_closure s).symm\n#align closure_smul₀ closure_smul₀\n\n",
 "closure_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[to_additive]\ntheorem closure_smul (c : G) (s : set α) : closure («expr • » c s) = «expr • » c (closure s) :=\n  ((homeomorph.smul c).image_closure s).symm\n#align closure_smul closure_smul\n\n"}