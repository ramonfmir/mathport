{"vanishing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Summable.vanishing /-\ntheorem Summable.vanishing (hf : Summable f) ⦃e : Set G⦄ (he : e ∈ (nhds) (0 : G)) :\n    ∃ s : Finset α,\n      ∀ t,\n        Disjoint t s →\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (f k) ∈ e :=\n  by\n  letI : UniformSpace G := TopologicalAddGroup.toUniformSpace G\n  letI : UniformAddGroup G := comm_topologicalAddGroup_is_uniform\n  rcases hf with ⟨y, hy⟩\n  exact cauchySeq_finset_iff_vanishing.1 hy.cauchy_seq e he\n#align summable.vanishing Summable.vanishing\n-/\n\n",
 "update'":
 "#print HasSum.update' /-\n/-- Version of `has_sum.update` for `add_comm_monoid` rather than `add_comm_group`.\nRather than showing that `f.update` has a specific sum in terms of `has_sum`,\nit gives a relationship between the sums of `f` and `f.update` given that both exist. -/\ntheorem HasSum.update' {α β : Type _} [TopologicalSpace α] [AddCommMonoid α] [T2Space α] [ContinuousAdd α] {f : β → α}\n    {a a' : α} (hf : HasSum f a) (b : β) (x : α) (hf' : HasSum (f.update b x) a') : a + x = a' + f b :=\n  by\n  have : ∀ b', f b' + ite (b' = b) x 0 = f.update b x b' + ite (b' = b) (f b) 0 :=\n    by\n    intro b'\n    split_ifs with hb'\n    · simpa only [Function.update_apply, hb', eq_self_iff_true] using add_comm (f b) x\n    · simp only [Function.update_apply, hb', if_false]\n  have h := hf.add (hasSum_ite_eq b x)\n  simp_rw [this] at h\n  exact HasSum.unique h (hf'.add (hasSum_ite_eq b (f b)))\n#align has_sum.update' HasSum.update'\n-/\n\n",
 "update":
 "#print Summable.update /-\ntheorem Summable.update (hf : Summable f) (b : β) [DecidableEq β] (a : α) : Summable (update f b a) :=\n  (hf.has_sum.update b a).summable\n#align summable.update Summable.update\n-/\n\n",
 "unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n#print Summable.unop /-\ntheorem Summable.unop {f : β → «expr ᵐᵒᵖ» α} (hf : Summable f) : Summable (unop ∘ f) :=\n  hf.has_sum.unop.summable\n#align summable.unop Summable.unop\n-/\n\n",
 "unique":
 "#print HasSum.unique /-\ntheorem HasSum.unique {a₁ a₂ : α} [T2Space α] : HasSum f a₁ → HasSum f a₂ → a₁ = a₂ :=\n  tendsto_nhds_unique\n#align has_sum.unique HasSum.unique\n-/\n\n",
 "tsum_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_zero' /-\ntheorem tsum_zero' (hz : IsClosed ({0} : Set α)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (0 : α) = 0 := by\n  classical\n    rw [tsum, dif_pos summable_zero]\n    suffices ∀ x : α, HasSum (fun b : β => (0 : α)) x → x = 0 by exact this _ (Classical.choose_spec _)\n    intro x hx\n    contrapose! hx\n    simp only [HasSum, tendsto_nhds, Finset.sum_const_zero, Filter.mem_atTop_sets, ge_iff_le, Finset.le_eq_subset,\n      Set.mem_preimage, not_forall, not_exists, exists_prop, exists_and_right]\n    refine' ⟨«expr ᶜ» {0}, ⟨is_open_compl_iff.mpr hz, _⟩, fun y => ⟨⟨y, subset_refl _⟩, _⟩⟩\n    · simpa using hx\n    · simp\n#align tsum_zero' tsum_zero'\n-/\n\n",
 "tsum_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_zero /-\n@[simp]\ntheorem tsum_zero [T1Space α] :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (0 : α) = 0 :=\n  tsum_zero' isClosed_singleton\n#align tsum_zero tsum_zero\n-/\n\n",
 "tsum_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_unop /-\ntheorem tsum_unop {f : β → «expr ᵐᵒᵖ» α} :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (MulOpposite.unop (f x)) =\n      MulOpposite.unop\n        («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x)) :=\n  MulOpposite.op_injective tsum_op.symm\n#align tsum_unop tsum_unop\n-/\n\n",
 "tsum_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_univ /-\n@[simp]\ntheorem tsum_univ (f : β → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  tsum_subtype_eq_of_support_subset <| Set.subset_univ _\n#align tsum_univ tsum_univ\n-/\n\n",
 "tsum_unionᵢ_decode₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_unionᵢ_decode₂ /-\n/-- `tsum_supr_decode₂` specialized to the complete lattice of sets. -/\ntheorem tsum_unionᵢ_decode₂ (m : Set β → α) (m0 : m ∅ = 0) (s : γ → Set β) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (m («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s b))) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (m (s b)) :=\n  tsum_supᵢ_decode₂ m m0 s\n#align tsum_Union_decode₂ tsum_unionᵢ_decode₂\n-/\n\n",
 "tsum_union_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_union_disjoint /-\ntheorem tsum_union_disjoint {s t : Set β} (hd : Disjoint s t) (hs : Summable (f ∘ coe : s → α))\n    (ht : Summable (f ∘ coe : t → α)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  (hs.has_sum.add_disjoint hd ht.has_sum).tsum_eq\n#align tsum_union_disjoint tsum_union_disjoint\n-/\n\n",
 "tsum_tsum_eq_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (b' «expr ≠ » b) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_tsum_eq_single /-\ntheorem tsum_tsum_eq_single (f : β → γ → α) (b : β) (c : γ) (hfb : ∀ (b') (_ : b' ≠ b), f b' c = 0)\n    (hfc : ∀ (b' : β) (c' : γ), c' ≠ c → f b' c' = 0) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b' c') =\n      f b c :=\n  calc\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b' c') =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b' c) :=\n      tsum_congr fun b' => tsum_eq_single _ (hfc b')\n    _ = f b c := tsum_eq_single _ hfb\n    \n#align tsum_tsum_eq_single tsum_tsum_eq_single\n-/\n\n",
 "tsum_supᵢ_decode₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_supᵢ_decode₂ /-\n/-- You can compute a sum over an encodably type by summing over the natural numbers and\n  taking a supremum. This is useful for outer measures. -/\ntheorem tsum_supᵢ_decode₂ [CompleteLattice β] (m : β → α) (m0 : m («expr⊥») = 0) (s : γ → β) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s b))) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (m (s b)) :=\n  by\n  have H :\n    ∀ n,\n      m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s b)) ≠ 0 →\n        (decode₂ γ n).is_some :=\n    by\n    intro n h\n    cases' decode₂ γ n with b\n    · refine' (h <| by simp [m0]).elim\n    · exact rfl\n  symm\n  refine' tsum_eq_tsum_of_ne_zero_bij (fun a => option.get (H a.1 a.2)) _ _ _\n  · rintro ⟨m, hm⟩ ⟨n, hn⟩ e\n    have := mem_decode₂.1 (Option.get_mem (H n hn))\n    rwa [← e, mem_decode₂.1 (Option.get_mem (H m hm))] at this\n  · intro b h\n    refine' ⟨⟨encode b, _⟩, _⟩\n    · simp only [mem_support, encodek₂] at h⊢\n      convert h\n      simp [Set.ext_iff, encodek₂]\n    · exact Option.get_of_mem _ (encodek₂ _)\n  · rintro ⟨n, h⟩\n    dsimp only [Subtype.coe_mk]\n    trans\n    swap\n    rw [show decode₂ γ n = _ from Option.get_mem (H n h)]\n    congr\n    simp [ext_iff, -Option.some_get]\n#align tsum_supr_decode₂ tsum_supᵢ_decode₂\n-/\n\n",
 "tsum_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_sum /-\ntheorem tsum_sum {f : γ → β → α} {s : Finset γ} (hf : ∀ i ∈ s, Summable (f i)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i b)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i b)) :=\n  (hasSum_sum fun i hi => (hf i hi).has_sum).tsum_eq\n#align tsum_sum tsum_sum\n-/\n\n",
 "tsum_subtype_eq_of_support_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_subtype_eq_of_support_subset /-\ntheorem tsum_subtype_eq_of_support_subset {f : β → α} {s : Set β} (hs : support f ⊆ s) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  tsum_eq_tsum_of_hasSum_iff_hasSum fun x => hasSum_subtype_iff_of_support_subset hs\n#align tsum_subtype_eq_of_support_subset tsum_subtype_eq_of_support_subset\n-/\n\n",
 "tsum_subtype_add_tsum_subtype_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_subtype_add_tsum_subtype_compl /-\ntheorem tsum_subtype_add_tsum_subtype_compl [T2Space α] {f : β → α} (hf : Summable f) (s : Set β) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  ((hf.subtype s).has_sum.add_compl (hf.subtype { x | x ∉ s }).has_sum).unique hf.has_sum\n#align tsum_subtype_add_tsum_subtype_compl tsum_subtype_add_tsum_subtype_compl\n-/\n\n",
 "tsum_subtype'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Finset.tsum_subtype' /-\n@[simp]\ntheorem Finset.tsum_subtype' (s : Finset β) (f : β → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f x) :=\n  s.tsum_subtype f\n#align finset.tsum_subtype' Finset.tsum_subtype'\n-/\n\n",
 "tsum_subtype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_subtype /-\ntheorem tsum_subtype (s : Set β) (f : β → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (s.indicator f x) :=\n  tsum_eq_tsum_of_hasSum_iff_hasSum fun _ => hasSum_subtype_iff_indicator\n#align tsum_subtype tsum_subtype\n-/\n\n",
 "tsum_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_sub /-\ntheorem tsum_sub (hf : Summable f) (hg : Summable g) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b - g b) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) -\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g b) :=\n  (hf.has_sum.sub hg.has_sum).tsum_eq\n#align tsum_sub tsum_sub\n-/\n\n",
 "tsum_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_star /-\ntheorem tsum_star :\n    star («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b)) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (star (f b)) :=\n  by\n  by_cases hf : Summable f\n  · exact hf.has_sum.star.tsum_eq.symm\n  · rw [tsum_eq_zero_of_not_summable hf, tsum_eq_zero_of_not_summable (mt Summable.ofStar hf), star_zero]\n#align tsum_star tsum_star\n-/\n\n",
 "tsum_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_singleton /-\n@[simp]\ntheorem tsum_singleton (b : β) (f : β → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) = f b :=\n  by\n  rw [tsum_subtype, tsum_eq_single b]\n  · simp\n  · intro b' hb'\n    rw [Set.indicator_of_not_mem]\n    rwa [Set.mem_singleton_iff]\n  · infer_instance\n#align tsum_singleton tsum_singleton\n-/\n\n",
 "tsum_sigma'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_sigma' /-\ntheorem tsum_sigma' {γ : β → Type _} {f : (Σb : β, γ b) → δ} (h₁ : ∀ b, Summable fun c => f ⟨b, c⟩) (h₂ : Summable f) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f p) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f ⟨b, c⟩) :=\n  (h₂.has_sum.sigma fun b => (h₁ b).has_sum).tsum_eq.symm\n#align tsum_sigma' tsum_sigma'\n-/\n\n",
 "tsum_sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_sigma /-\n-- enable inferring a T3-topological space from a topological group\n-- disable getting a T0-space from a T3-space as this causes loops\ntheorem tsum_sigma [T0Space α] {γ : β → Type _} {f : (Σb : β, γ b) → α} (ha : Summable f) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f p) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f ⟨b, c⟩) :=\n  tsum_sigma' (fun b => ha.sigma_factor b) ha\n#align tsum_sigma tsum_sigma\n-/\n\n",
 "tsum_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_range /-\ntheorem tsum_range {g : γ → β} (f : β → α) (hg : injective g) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (g x)) :=\n  by rw [← Set.image_univ, tsum_image f (hg.inj_on _), tsum_univ (f ∘ g)]\n#align tsum_range tsum_range\n-/\n\n",
 "tsum_prod'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_prod' /-\ntheorem tsum_prod' {f : β × γ → δ} (h : Summable f) (h₁ : ∀ b, Summable fun c => f (b, c)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f p) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (b, c)) :=\n  (h.has_sum.prod_fiberwise fun b => (h₁ b).has_sum).tsum_eq.symm\n#align tsum_prod' tsum_prod'\n-/\n\n",
 "tsum_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_prod /-\ntheorem tsum_prod [T0Space α] {f : β × γ → α} (h : Summable f) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f p) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f ⟨b, c⟩) :=\n  tsum_prod' h h.prod_factor\n#align tsum_prod tsum_prod\n-/\n\n",
 "tsum_pi_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_pi_single /-\n@[simp]\ntheorem tsum_pi_single [DecidableEq β] (b : β) (a : α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (Pi.single b a b') =\n      a :=\n  (hasSum_pi_single b a).tsum_eq\n#align tsum_pi_single tsum_pi_single\n-/\n\n",
 "tsum_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_op /-\ntheorem tsum_op :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (MulOpposite.op (f x)) =\n      MulOpposite.op\n        («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x)) :=\n  by\n  by_cases h : Summable f\n  · exact h.has_sum.op.tsum_eq\n  · have ho := summable_op.not.mpr h\n    rw [tsum_eq_zero_of_not_summable h, tsum_eq_zero_of_not_summable ho, MulOpposite.op_zero]\n#align tsum_op tsum_op\n-/\n\n",
 "tsum_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_neg /-\ntheorem tsum_neg :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (-f b) =\n      -«expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) :=\n  by\n  by_cases hf : Summable f\n  · exact hf.has_sum.neg.tsum_eq\n  · simp [tsum_eq_zero_of_not_summable hf, tsum_eq_zero_of_not_summable (mt Summable.of_neg hf)]\n#align tsum_neg tsum_neg\n-/\n\n",
 "tsum_ite_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_ite_eq /-\n@[simp]\ntheorem tsum_ite_eq (b : β) [DecidablePred (· = b)] (a : α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (if b' = b then a else 0) =\n      a :=\n  (hasSum_ite_eq b a).tsum_eq\n#align tsum_ite_eq tsum_ite_eq\n-/\n\n",
 "tsum_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_image /-\ntheorem tsum_image {g : γ → β} (f : β → α) {s : Set γ} (hg : Set.InjOn g s) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (g x)) :=\n  ((Equiv.Set.imageOfInjOn _ _ hg).tsum_eq fun x => f x).symm\n#align tsum_image tsum_image\n-/\n\n",
 "tsum_fintype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n#print tsum_fintype /-\ntheorem tsum_fintype [Fintype β] (f : β → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\" (f b) :=\n  (hasSum_fintype f).tsum_eq\n#align tsum_fintype tsum_fintype\n-/\n\n",
 "tsum_finset_bUnion_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_finset_bUnion_disjoint /-\ntheorem tsum_finset_bUnion_disjoint {ι} {s : Finset ι} {t : ι → Set β}\n    (hd : (s : Set ι).pairwise («expr on » Disjoint t)) (hf : ∀ i ∈ s, Summable (f ∘ coe : t i → α)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x)) :=\n  (hasSum_sum_disjoint _ hd fun i hi => (hf i hi).has_sum).tsum_eq\n#align tsum_finset_bUnion_disjoint tsum_finset_bUnion_disjoint\n-/\n\n",
 "tsum_even_add_odd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_even_add_odd /-\ntheorem tsum_even_add_odd {f : ℕ → α} (he : Summable fun k => f (2 * k)) (ho : Summable fun k => f (2 * k + 1)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (2 * k)) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (f (2 * k + 1)) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f k) :=\n  (he.has_sum.even_add_odd ho.has_sum).tsum_eq.symm\n#align tsum_even_add_odd tsum_even_add_odd\n-/\n\n",
 "tsum_eq_zero_of_not_summable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_zero_of_not_summable /-\ntheorem tsum_eq_zero_of_not_summable (h : ¬Summable f) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) = 0 := by\n  simp [tsum, h]\n#align tsum_eq_zero_of_not_summable tsum_eq_zero_of_not_summable\n-/\n\n",
 "tsum_eq_zero_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_zero_add /-\ntheorem tsum_eq_zero_add [T2Space α] {f : ℕ → α} (hf : Summable f) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) =\n      f 0 +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (b + 1)) :=\n  by simpa only [sum_range_one] using (sum_add_tsum_nat_add 1 hf).symm\n#align tsum_eq_zero_add tsum_eq_zero_add\n-/\n\n",
 "tsum_eq_tsum_of_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Equiv.tsum_eq_tsum_of_support /-\ntheorem Equiv.tsum_eq_tsum_of_support {f : β → α} {g : γ → α} (e : «expr ≃ » (support f) (support g))\n    (he : ∀ x, g (e x) = f x) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g y) :=\n  tsum_eq_tsum_of_hasSum_iff_hasSum fun _ => e.has_sum_iff_of_support he\n#align equiv.tsum_eq_tsum_of_support Equiv.tsum_eq_tsum_of_support\n-/\n\n",
 "tsum_eq_tsum_of_ne_zero_bij":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_tsum_of_ne_zero_bij /-\ntheorem tsum_eq_tsum_of_ne_zero_bij {g : γ → α} (i : support g → β) (hi : ∀ ⦃x y⦄, i x = i y → (x : γ) = y)\n    (hf : support f ⊆ Set.range i) (hfg : ∀ x, f (i x) = g x) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g y) :=\n  tsum_eq_tsum_of_hasSum_iff_hasSum fun _ => hasSum_iff_hasSum_of_ne_zero_bij i hi hf hfg\n#align tsum_eq_tsum_of_ne_zero_bij tsum_eq_tsum_of_ne_zero_bij\n-/\n\n",
 "tsum_eq_tsum_of_hasSum_iff_hasSum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_tsum_of_hasSum_iff_hasSum /-\ntheorem tsum_eq_tsum_of_hasSum_iff_hasSum {f : β → α} {g : γ → α} (h : ∀ {a}, HasSum f a ↔ HasSum g a) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g c) :=\n  surjective_id.tsum_eq_tsum_of_has_sum_iff_has_sum rfl @h\n#align tsum_eq_tsum_of_has_sum_iff_has_sum tsum_eq_tsum_of_hasSum_iff_hasSum\n-/\n\n",
 "tsum_eq_sum":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (b «expr ∉ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print tsum_eq_sum /-\ntheorem tsum_eq_sum {f : β → α} {s : Finset β} (hf : ∀ (b) (_ : b ∉ s), f b = 0) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f b) :=\n  (hasSum_sum_of_ne_finset_zero hf).tsum_eq\n#align tsum_eq_sum tsum_eq_sum\n-/\n\n",
 "tsum_eq_single":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (b' «expr ≠ » b) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_single /-\ntheorem tsum_eq_single {f : β → α} (b : β) (hf : ∀ (b') (_ : b' ≠ b), f b' = 0) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) = f b :=\n  (hasSum_single b hf).tsum_eq\n#align tsum_eq_single tsum_eq_single\n-/\n\n",
 "tsum_eq_add_tsum_ite'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_add_tsum_ite' /-\n/-- Version of `tsum_eq_add_tsum_ite` for `add_comm_monoid` rather than `add_comm_group`.\nRequires a different convergence assumption involving `function.update`. -/\ntheorem tsum_eq_add_tsum_ite' {f : β → α} (b : β) (hf : Summable (f.update b 0)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      f b +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (ite (x = b) 0 (f x)) :=\n  calc\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (ite (x = b) (f x) 0 + f.update b 0 x) :=\n      tsum_congr fun n => by split_ifs <;> simp [Function.update_apply, h]\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (ite (x = b) (f x) 0) +\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (f.update b 0 x) :=\n      (tsum_add ⟨ite (b = b) (f b) 0, hasSum_single b fun b hb => if_neg hb⟩ hf)\n    _ =\n        ite (b = b) (f b) 0 +\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (f.update b 0 x) :=\n      by\n      congr\n      exact tsum_eq_single b fun b' hb' => if_neg hb'\n    _ =\n        f b +\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n            (ite (x = b) 0 (f x)) :=\n      by simp only [Function.update, eq_self_iff_true, if_true, eq_rec_constant, dite_eq_ite]\n    \n#align tsum_eq_add_tsum_ite' tsum_eq_add_tsum_ite'\n-/\n\n",
 "tsum_eq_add_tsum_ite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_eq_add_tsum_ite /-\n/-- Let `f : β → α` be a sequence with summable series and let `b ∈ β` be an index.\nLemma `tsum_eq_add_tsum_ite` writes `Σ f n` as the sum of `f b` plus the series of the\nremaining terms. -/\ntheorem tsum_eq_add_tsum_ite [DecidableEq β] (hf : Summable f) (b : β) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f n) =\n      f b +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (ite (n = b) 0 (f n)) :=\n  by\n  rw [(hasSum_ite_sub_hasSum hf.has_sum b).tsum_eq]\n  exact (add_sub_cancel'_right _ _).symm\n#align tsum_eq_add_tsum_ite tsum_eq_add_tsum_ite\n-/\n\n",
 "tsum_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Equiv.tsum_eq /-\ntheorem Equiv.tsum_eq (j : «expr ≃ » γ β) (f : β → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (j c)) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) :=\n  tsum_eq_tsum_of_hasSum_iff_hasSum fun a => j.has_sum_iff\n#align equiv.tsum_eq Equiv.tsum_eq\n-/\n\n",
 "tsum_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_empty /-\n@[simp]\ntheorem tsum_empty [IsEmpty β] :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) = 0 :=\n  hasSum_empty.tsum_eq\n#align tsum_empty tsum_empty\n-/\n\n",
 "tsum_dite_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_dite_right /-\ntheorem tsum_dite_right (P : Prop) [Decidable P] (x : β → ¬P → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (if h : P then (0 : α) else x b h) =\n      if h : P then (0 : α)\n      else «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (x b h) :=\n  by by_cases hP : P <;> simp [hP]\n#align tsum_dite_right tsum_dite_right\n-/\n\n",
 "tsum_dite_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_dite_left /-\ntheorem tsum_dite_left (P : Prop) [Decidable P] (x : β → P → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (if h : P then x b h else 0) =\n      if h : P then\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (x b h)\n      else 0 :=\n  by by_cases hP : P <;> simp [hP]\n#align tsum_dite_left tsum_dite_left\n-/\n\n",
 "tsum_const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_const_smul /-\ntheorem tsum_const_smul [T2Space α] (b : γ) (hf : Summable f) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        («expr • » b (f i)) =\n      «expr • » b\n        («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i)) :=\n  (hf.has_sum.const_smul _).tsum_eq\n#align tsum_const_smul tsum_const_smul\n-/\n\n",
 "tsum_congr_subtype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_congr_subtype /-\ntheorem tsum_congr_subtype (f : β → α) {s t : Set β} (h : s = t) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  by rw [h]\n#align tsum_congr_subtype tsum_congr_subtype\n-/\n\n",
 "tsum_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_congr /-\ntheorem tsum_congr {α β : Type _} [AddCommMonoid α] [TopologicalSpace α] {f g : β → α} (hfg : ∀ b, f b = g b) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g b) :=\n  congr_arg tsum (funext hfg)\n#align tsum_congr tsum_congr\n-/\n\n",
 "tsum_comm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_comm' /-\ntheorem tsum_comm' {f : β → γ → δ} (h : Summable (function.uncurry f)) (h₁ : ∀ b, Summable (f b))\n    (h₂ : ∀ c, Summable fun b => f b c) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b c) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b c) :=\n  by\n  erw [← tsum_prod' h h₁, ← tsum_prod' h.prod_symm h₂, ← (Equiv.prodComm γ β).tsum_eq (uncurry f)]\n  rfl\n#align tsum_comm' tsum_comm'\n-/\n\n",
 "tsum_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_comm /-\ntheorem tsum_comm [T0Space α] {f : β → γ → α} (h : Summable (function.uncurry f)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b c) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b c) :=\n  tsum_comm' h h.prod_factor h.prod_symm.prod_factor\n#align tsum_comm tsum_comm\n-/\n\n",
 "tsum_bool":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_bool /-\ntheorem tsum_bool (f : Bool → α) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i) =\n      f False + f True :=\n  by rw [tsum_fintype, Finset.sum_eq_add] <;> simp\n#align tsum_bool tsum_bool\n-/\n\n",
 "tsum_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_apply /-\ntheorem tsum_apply [∀ x, T2Space (π x)] {f : ι → ∀ x, π x} {x : α} (hf : Summable f) :\n    («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i)) x =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i x) :=\n  (Pi.hasSum.mp hf.has_sum x).tsum_eq.symm\n#align tsum_apply tsum_apply\n-/\n\n",
 "tsum_add_tsum_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_add_tsum_compl /-\ntheorem tsum_add_tsum_compl {s : Set β} (hs : Summable (f ∘ coe : s → α)) (hsc : Summable (f ∘ coe : «expr ᶜ» s → α)) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  (hs.has_sum.add_compl hsc.has_sum).tsum_eq.symm\n#align tsum_add_tsum_compl tsum_add_tsum_compl\n-/\n\n",
 "tsum_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_add /-\ntheorem tsum_add (hf : Summable f) (hg : Summable g) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b + g b) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g b) :=\n  (hf.has_sum.add hg.has_sum).tsum_eq\n#align tsum_add tsum_add\n-/\n\n",
 "trans_sub":
 "#print Summable.trans_sub /-\ntheorem Summable.trans_sub (hg : Summable g) (hfg : Summable fun b => f b - g b) : Summable f := by\n  simpa only [sub_add_cancel] using hfg.add hg\n#align summable.trans_sub Summable.trans_sub\n-/\n\n",
 "tendsto_tsum_compl_atTop_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_tsum_compl_atTop_zero /-\n/-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole\nspace. This does not need a summability assumption, as otherwise all sums are zero. -/\ntheorem tendsto_tsum_compl_atTop_zero (f : β → α) :\n    Tendsto\n      (fun s : Finset β =>\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b))\n      atTop ((nhds) 0) :=\n  by\n  by_cases H : Summable f\n  · intro e he\n    rcases exists_mem_nhds_isClosed_subset he with ⟨o, ho, o_closed, oe⟩\n    simp only [le_eq_subset, Set.mem_preimage, mem_at_top_sets, Filter.mem_map, ge_iff_le]\n    obtain ⟨s, hs⟩ :\n      ∃ s : Finset β,\n        ∀ t : Finset β,\n          Disjoint t s →\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (f b) ∈\n              o :=\n      cauchySeq_finset_iff_vanishing.1 (tendsto.cauchy_seq H.has_sum) o ho\n    refine' ⟨s, fun a sa => oe _⟩\n    have A : Summable fun b : { x // x ∉ a } => f b := a.summable_compl_iff.2 H\n    apply IsClosed.mem_of_tendsto o_closed A.has_sum (eventually_of_forall fun b => _)\n    have : Disjoint (Finset.image (fun i : { x // x ∉ a } => (i : β)) b) s :=\n      by\n      apply disjoint_left.2 fun i hi his => _\n      rcases mem_image.1 hi with ⟨i', hi', rfl⟩\n      exact i'.2 (sa his)\n    convert hs _ this using 1\n    rw [sum_image]\n    intro i hi j hj hij\n    exact Subtype.ext hij\n  · convert tendsto_const_nhds\n    ext s\n    apply tsum_eq_zero_of_not_summable\n    rwa [Finset.summable_compl_iff]\n#align tendsto_tsum_compl_at_top_zero tendsto_tsum_compl_atTop_zero\n-/\n\n",
 "tendsto_sum_nat_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_sum_nat_add /-\n/-- For `f : ℕ → α`, then `∑' k, f (k + i)` tends to zero. This does not require a summability\nassumption on `f`, as otherwise all sums are zero. -/\ntheorem tendsto_sum_nat_add [T2Space α] (f : ℕ → α) :\n    Tendsto\n      (fun i =>\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (k + i)))\n      atTop ((nhds) 0) :=\n  by\n  by_cases hf : Summable f\n  · have h₀ :\n      (fun i =>\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i) -\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range i)\n              (f j)) =\n        fun i =>\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (k + i)) :=\n      by\n      ext1 i\n      rw [sub_eq_iff_eq_add, add_comm, sum_add_tsum_nat_add i hf]\n    have h₁ :\n      tendsto\n        (fun i : ℕ =>\n          «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i))\n        at_top\n        ((nhds)\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i))) :=\n      tendsto_const_nhds\n    simpa only [h₀, sub_self] using tendsto.sub h₁ hf.has_sum.tendsto_sum_nat\n  · convert tendsto_const_nhds\n    ext1 i\n    rw [← summable_nat_add_iff i] at hf\n    · exact tsum_eq_zero_of_not_summable hf\n    · infer_instance\n#align tendsto_sum_nat_add tendsto_sum_nat_add\n-/\n\n",
 "tendsto_sum_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print HasSum.tendsto_sum_nat /-\n/-- If `f : ℕ → α` has sum `a`, then the partial sums `∑_{i=0}^{n-1} f i` converge to `a`. -/\ntheorem HasSum.tendsto_sum_nat {f : ℕ → α} (h : HasSum f a) :\n    Tendsto\n      (fun n : ℕ =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n) (f i))\n      atTop ((nhds) a) :=\n  h.comp tendsto_finset_range\n#align has_sum.tendsto_sum_nat HasSum.tendsto_sum_nat\n-/\n\n",
 "tendsto_cofinite_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Summable.tendsto_cofinite_zero /-\n/-- Series divergence test: if `f` is a convergent series, then `f x` tends to zero along\n`cofinite`. -/\ntheorem Summable.tendsto_cofinite_zero (hf : Summable f) : Tendsto f cofinite ((nhds) 0) :=\n  by\n  intro e he\n  rw [Filter.mem_map]\n  rcases hf.vanishing he with ⟨s, hs⟩\n  refine' s.eventually_cofinite_nmem.mono fun x hx => _\n  · simpa using hs {x} (disjoint_singleton_left.2 hx)\n#align summable.tendsto_cofinite_zero Summable.tendsto_cofinite_zero\n-/\n\n",
 "tendsto_atTop_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Summable.tendsto_atTop_zero /-\ntheorem Summable.tendsto_atTop_zero {f : ℕ → G} (hf : Summable f) : Tendsto f atTop ((nhds) 0) :=\n  by\n  rw [← Nat.cofinite_eq_atTop]\n  exact hf.tendsto_cofinite_zero\n#align summable.tendsto_at_top_zero Summable.tendsto_atTop_zero\n-/\n\n",
 "summable_zero":
 "#print summable_zero /-\ntheorem summable_zero : Summable (fun b => 0 : β → α) :=\n  hasSum_zero.summable\n#align summable_zero summable_zero\n-/\n\n",
 "summable_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n#print summable_unop /-\n@[simp]\ntheorem summable_unop {f : β → «expr ᵐᵒᵖ» α} : (Summable fun a => unop (f a)) ↔ Summable f :=\n  ⟨Summable.op, Summable.unop⟩\n#align summable_unop summable_unop\n-/\n\n",
 "summable_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print summable_sum /-\ntheorem summable_sum {f : γ → β → α} {s : Finset γ} (hf : ∀ i ∈ s, Summable (f i)) :\n    Summable fun b =>\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i b) :=\n  (hasSum_sum fun i hi => (hf i hi).has_sum).summable\n#align summable_sum summable_sum\n-/\n\n",
 "summable_subtype_iff_indicator":
 "#print summable_subtype_iff_indicator /-\ntheorem summable_subtype_iff_indicator {s : Set β} : Summable (f ∘ coe : s → α) ↔ Summable (s.indicator f) :=\n  exists_congr fun _ => hasSum_subtype_iff_indicator\n#align summable_subtype_iff_indicator summable_subtype_iff_indicator\n-/\n\n",
 "summable_subtype_and_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print summable_subtype_and_compl /-\ntheorem summable_subtype_and_compl {s : Set β} :\n    ((Summable fun x : s => f x) ∧ Summable fun x : «expr ᶜ» s => f x) ↔ Summable f :=\n  ⟨and_imp.2 Summable.add_compl, fun h => ⟨h.subtype s, h.subtype («expr ᶜ» s)⟩⟩\n#align summable_subtype_and_compl summable_subtype_and_compl\n-/\n\n",
 "summable_star_iff'":
 "#print summable_star_iff' /-\n@[simp]\ntheorem summable_star_iff' : Summable (star f) ↔ Summable f :=\n  summable_star_iff\n#align summable_star_iff' summable_star_iff'\n-/\n\n",
 "summable_star_iff":
 "#print summable_star_iff /-\n@[simp]\ntheorem summable_star_iff : (Summable fun b => star (f b)) ↔ Summable f :=\n  ⟨Summable.ofStar, Summable.star⟩\n#align summable_star_iff summable_star_iff\n-/\n\n",
 "summable_op":
 "#print summable_op /-\n@[simp]\ntheorem summable_op : (Summable fun a => op (f a)) ↔ Summable f :=\n  ⟨Summable.unop, Summable.op⟩\n#align summable_op summable_op\n-/\n\n",
 "summable_of_ne_finset_zero":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (b «expr ∉ » s) -/\n#print summable_of_ne_finset_zero /-\ntheorem summable_of_ne_finset_zero (hf : ∀ (b) (_ : b ∉ s), f b = 0) : Summable f :=\n  (hasSum_sum_of_ne_finset_zero hf).summable\n#align summable_of_ne_finset_zero summable_of_ne_finset_zero\n-/\n\n",
 "summable_of_eq_zero_or_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Summable.summable_of_eq_zero_or_self /-\n-- TODO: generalize to monoid with a uniform continuous subtraction operator: `(a + b) - b = a`\ntheorem Summable.summable_of_eq_zero_or_self (hf : Summable f) (h : ∀ b, g b = 0 ∨ g b = f b) : Summable g :=\n  summable_iff_vanishing.2 fun e he =>\n    let ⟨s, hs⟩ := summable_iff_vanishing.1 hf e he\n    ⟨s, fun t ht =>\n      have eq :\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            (t.filter fun b => g b = f b) (f b) =\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (g b) :=\n        calc\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n                (t.filter fun b => g b = f b) (f b) =\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n                (t.filter fun b => g b = f b) (g b) :=\n            Finset.sum_congr rfl fun b hb => (Finset.mem_filter.1 hb).2.symm\n          _ = finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (g b) :=\n            by\n            refine' Finset.sum_subset (Finset.filter_subset _ _) _\n            intro b hbt hb\n            simp only [(· ∉ ·), Finset.mem_filter, and_iff_right hbt] at hb\n            exact (h b).resolve_right hb\n          \n      Eq ▸ hs _ <| Finset.disjoint_of_subset_left (Finset.filter_subset _ _) ht⟩\n#align summable.summable_of_eq_zero_or_self Summable.summable_of_eq_zero_or_self\n-/\n\n",
 "summable_neg_iff":
 "#print summable_neg_iff /-\ntheorem summable_neg_iff : (Summable fun b => -f b) ↔ Summable f :=\n  ⟨Summable.of_neg, Summable.neg⟩\n#align summable_neg_iff summable_neg_iff\n-/\n\n",
 "summable_nat_add_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print summable_nat_add_iff /-\ntheorem summable_nat_add_iff {f : ℕ → α} (k : ℕ) : (Summable fun n => f (n + k)) ↔ Summable f :=\n  iff.symm <|\n    (Equiv.addRight\n            (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range k)\n              (f i))).surjective.summable_iff_of_has_sum_iff\n      fun a => (hasSum_nat_add_iff k).symm\n#align summable_nat_add_iff summable_nat_add_iff\n-/\n\n",
 "summable_int_of_summable_nat":
 "#print summable_int_of_summable_nat /-\ntheorem summable_int_of_summable_nat {f : ℤ → α} (hp : Summable fun n : ℕ => f n) (hn : Summable fun n : ℕ => f (-n)) :\n    Summable f :=\n  (HasSum.nonneg_add_neg hp.has_sum <| Summable.hasSum <| (summable_nat_add_iff 1).mpr hn).summable\n#align summable_int_of_summable_nat summable_int_of_summable_nat\n-/\n\n",
 "summable_iff_vanishing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print summable_iff_vanishing /-\ntheorem summable_iff_vanishing :\n    Summable f ↔\n      ∀ e ∈ (nhds) (0 : α),\n        ∃ s : Finset β,\n          ∀ t,\n            Disjoint t s →\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (f b) ∈\n                e :=\n  by rw [summable_iff_cauchySeq_finset, cauchySeq_finset_iff_vanishing]\n#align summable_iff_vanishing summable_iff_vanishing\n-/\n\n",
 "summable_iff_of_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.summable_iff_of_support /-\ntheorem Equiv.summable_iff_of_support {g : γ → α} (e : «expr ≃ » (support f) (support g))\n    (he : ∀ x : support f, g (e x) = f x) : Summable f ↔ Summable g :=\n  exists_congr fun _ => e.has_sum_iff_of_support he\n#align equiv.summable_iff_of_support Equiv.summable_iff_of_support\n-/\n\n",
 "summable_iff_of_summable_sub":
 "#print summable_iff_of_summable_sub /-\ntheorem summable_iff_of_summable_sub (hfg : Summable fun b => f b - g b) : Summable f ↔ Summable g :=\n  ⟨fun hf => hf.trans_sub <| by simpa only [neg_sub] using hfg.neg, fun hg => hg.trans_sub hfg⟩\n#align summable_iff_of_summable_sub summable_iff_of_summable_sub\n-/\n\n",
 "summable_iff_of_hasSum_iff":
 "#print Function.Surjective.summable_iff_of_hasSum_iff /-\ntheorem Function.Surjective.summable_iff_of_hasSum_iff {α' : Type _} [AddCommMonoid α'] [TopologicalSpace α']\n    {e : α' → α} (hes : function.surjective e) {f : β → α} {g : γ → α'} (he : ∀ {a}, HasSum f (e a) ↔ HasSum g a) :\n    Summable f ↔ Summable g :=\n  hes.exists.trans <| exists_congr <| @he\n#align function.surjective.summable_iff_of_has_sum_iff Function.Surjective.summable_iff_of_hasSum_iff\n-/\n\n",
 "summable_iff_cauchySeq_finset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print summable_iff_cauchySeq_finset /-\n/-- The **Cauchy criterion** for infinite sums, also known as the **Cauchy convergence test** -/\ntheorem summable_iff_cauchySeq_finset [CompleteSpace α] {f : β → α} :\n    Summable f ↔\n      CauchySeq fun s : Finset β =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f b) :=\n  cauchy_map_iff_exists_tendsto.symm\n#align summable_iff_cauchy_seq_finset summable_iff_cauchySeq_finset\n-/\n\n",
 "summable_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.summable_iff /-\ntheorem Equiv.summable_iff (e : «expr ≃ » γ β) : Summable (f ∘ e) ↔ Summable f :=\n  exists_congr fun a => e.has_sum_iff\n#align equiv.summable_iff Equiv.summable_iff\n-/\n\n",
 "summable_empty":
 "#print summable_empty /-\ntheorem summable_empty [IsEmpty β] : Summable f :=\n  hasSum_empty.summable\n#align summable_empty summable_empty\n-/\n\n",
 "summable_congr":
 "#print summable_congr /-\ntheorem summable_congr (hfg : ∀ b, f b = g b) : Summable f ↔ Summable g :=\n  iff_of_eq (congr_arg Summable <| funext hfg)\n#align summable_congr summable_congr\n-/\n\n",
 "summable_compl_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print Set.Finite.summable_compl_iff /-\ntheorem Set.Finite.summable_compl_iff {s : Set β} (hs : s.finite) : Summable (f ∘ coe : «expr ᶜ» s → α) ↔ Summable f :=\n  (hs.summable f).summable_compl_iff\n#align set.finite.summable_compl_iff Set.Finite.summable_compl_iff\n-/\n\n",
 "summable":
 "#print Pi.summable /-\ntheorem Pi.summable {f : ι → ∀ x, π x} : Summable f ↔ ∀ x, Summable fun i => f i x := by\n  simp only [Summable, Pi.hasSum, skolem]\n#align pi.summable Pi.summable\n-/\n\n",
 "sum_nat_of_sum_int":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print HasSum.sum_nat_of_sum_int /-\ntheorem HasSum.sum_nat_of_sum_int {α : Type _} [AddCommMonoid α] [TopologicalSpace α] [ContinuousAdd α] {a : α}\n    {f : ℤ → α} (hf : HasSum f a) : HasSum (fun n : ℕ => f n + f (-n)) (a + f 0) :=\n  by\n  apply (hf.add (hasSum_ite_eq (0 : ℤ) (f 0))).has_sum_of_sum_eq fun u => _\n  refine' ⟨u.image Int.natAbs, fun v' hv' => _⟩\n  let u1 := v'.image fun x : ℕ => (x : ℤ)\n  let u2 := v'.image fun x : ℕ => -(x : ℤ)\n  have A : u ⊆ u1 ∪ u2 := by\n    intro x hx\n    simp only [mem_union, mem_image, exists_prop]\n    rcases le_total 0 x with (h'x | h'x)\n    · left\n      refine' ⟨Int.natAbs x, hv' _, _⟩\n      · simp only [mem_image, exists_prop]\n        exact ⟨x, hx, rfl⟩\n      · simp only [h'x, Int.coe_natAbs, abs_eq_self]\n    · right\n      refine' ⟨Int.natAbs x, hv' _, _⟩\n      · simp only [mem_image, exists_prop]\n        exact ⟨x, hx, rfl⟩\n      · simp only [abs_of_nonpos h'x, Int.coe_natAbs, neg_neg]\n  refine' ⟨u1 ∪ u2, A, _⟩\n  calc\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (u1 ∪ u2)\n          (f x + ite (x = 0) (f 0) 0) =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (u1 ∪ u2)\n            (f x) +\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (u1 ∩ u2)\n            (f x) :=\n      by\n      rw [sum_add_distrib]\n      congr 1\n      refine' (sum_subset_zero_on_sdiff inter_subset_union _ _).symm\n      · intro x hx\n        suffices x ≠ 0 by simp only [this, if_false]\n        rintro rfl\n        simpa only [mem_sdiff, mem_union, mem_image, neg_eq_zero, or_self_iff, mem_inter, and_self_iff,\n          and_not_self_iff] using hx\n      · intro x hx\n        simp only [mem_inter, mem_image, exists_prop] at hx\n        have : x = 0 := by\n          apply le_antisymm\n          · rcases hx.2 with ⟨a, ha, rfl⟩\n            simp only [Right.neg_nonpos_iff, Nat.cast_nonneg]\n          · rcases hx.1 with ⟨a, ha, rfl⟩\n            simp only [Nat.cast_nonneg]\n        simp only [this, eq_self_iff_true, if_true]\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" u1 (f x) +\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" u2 (f x) :=\n      sum_union_inter\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" v' (f b) +\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" v' (f (-b)) :=\n      by simp only [sum_image, Nat.cast_inj, imp_self, imp_true_iff, neg_inj]\n    _ =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" v'\n          (f b + f (-b)) :=\n      sum_add_distrib.symm\n    \n#align has_sum.sum_nat_of_sum_int HasSum.sum_nat_of_sum_int\n-/\n\n",
 "sum_eq_tsum_indicator":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (x «expr ∉ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print sum_eq_tsum_indicator /-\ntheorem sum_eq_tsum_indicator (f : β → α) (s : Finset β) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (Set.indicator (↑s) f x) :=\n  have : ∀ (x) (_ : x ∉ s), Set.indicator (↑s) f x = 0 := fun x hx =>\n    Set.indicator_apply_eq_zero.2 fun hx' => (hx <| Finset.mem_coe.1 hx').elim\n  (Finset.sum_congr rfl fun x hx =>\n        (Set.indicator_apply_eq_self.2 fun hx' => (hx' <| Finset.mem_coe.2 hx).elim).symm).trans\n    (tsum_eq_sum this).symm\n#align sum_eq_tsum_indicator sum_eq_tsum_indicator\n-/\n\n",
 "sum_add_tsum_subtype_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print sum_add_tsum_subtype_compl /-\ntheorem sum_add_tsum_subtype_compl [T2Space α] {f : β → α} (hf : Summable f) (s : Finset β) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f x) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  by\n  rw [← tsum_subtype_add_tsum_subtype_compl hf s]\n  simp only [Finset.tsum_subtype', add_right_inj]\n  rfl\n#align sum_add_tsum_subtype_compl sum_add_tsum_subtype_compl\n-/\n\n",
 "sum_add_tsum_nat_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print sum_add_tsum_nat_add /-\ntheorem sum_add_tsum_nat_add [T2Space α] {f : ℕ → α} (k : ℕ) (h : Summable f) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range k) (f i) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f (i + k)) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i) :=\n  by simpa only [add_comm] using ((hasSum_nat_add_iff k).1 ((summable_nat_add_iff k).2 h).has_sum).unique h.has_sum\n#align sum_add_tsum_nat_add sum_add_tsum_nat_add\n-/\n\n",
 "sum_add_tsum_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print sum_add_tsum_compl /-\ntheorem sum_add_tsum_compl {s : Finset β} (hf : Summable f) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f x) +\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  ((s.has_sum f).add_compl (s.summable_compl_iff.2 hf).has_sum).tsum_eq.symm\n#align sum_add_tsum_compl sum_add_tsum_compl\n-/\n\n",
 "subtype":
 "#print Summable.subtype /-\ntheorem Summable.subtype (hf : Summable f) (s : Set β) : Summable (f ∘ coe : s → α) :=\n  hf.comp_injective Subtype.coe_injective\n#align summable.subtype Summable.subtype\n-/\n\n",
 "sub":
 "#print Summable.sub /-\ntheorem Summable.sub (hf : Summable f) (hg : Summable g) : Summable fun b => f b - g b :=\n  (hf.has_sum.sub hg.has_sum).summable\n#align summable.sub Summable.sub\n-/\n\n",
 "star":
 "#print Summable.star /-\ntheorem Summable.star (hf : Summable f) : Summable fun b => star (f b) :=\n  hf.has_sum.star.summable\n#align summable.star Summable.star\n-/\n\n",
 "sigma_of_hasSum":
 "#print HasSum.sigma_of_hasSum /-\ntheorem HasSum.sigma_of_hasSum [T3Space α] {γ : β → Type _} {f : (Σb : β, γ b) → α} {g : β → α} {a : α}\n    (ha : HasSum g a) (hf : ∀ b, HasSum (fun c => f ⟨b, c⟩) (g b)) (hf' : Summable f) : HasSum f a := by\n  simpa [(hf'.has_sum.sigma hf).unique ha] using hf'.has_sum\n#align has_sum.sigma_of_has_sum HasSum.sigma_of_hasSum\n-/\n\n",
 "sigma_factor":
 "#print Summable.sigma_factor /-\ntheorem Summable.sigma_factor {γ : β → Type _} {f : (Σb : β, γ b) → α} (ha : Summable f) (b : β) :\n    Summable fun c => f ⟨b, c⟩ :=\n  ha.comp_injective sigma_mk_injective\n#align summable.sigma_factor Summable.sigma_factor\n-/\n\n",
 "sigma'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Summable.sigma' /-\ntheorem Summable.sigma' [RegularSpace α] {γ : β → Type _} {f : (Σb : β, γ b) → α} (ha : Summable f)\n    (hf : ∀ b, Summable fun c => f ⟨b, c⟩) :\n    Summable fun b =>\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f ⟨b, c⟩) :=\n  (ha.has_sum.sigma fun b => (hf b).has_sum).summable\n#align summable.sigma' Summable.sigma'\n-/\n\n",
 "sigma":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Summable.sigma /-\ntheorem Summable.sigma {γ : β → Type _} {f : (Σb : β, γ b) → α} (ha : Summable f) :\n    Summable fun b =>\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f ⟨b, c⟩) :=\n  ha.sigma' fun b => ha.sigma_factor b\n#align summable.sigma Summable.sigma\n-/\n\n",
 "rel_supᵢ_tsum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print rel_supᵢ_tsum /-\n/-- If a function is countably sub-additive then it is sub-additive on countable types -/\ntheorem rel_supᵢ_tsum [CompleteLattice β] (m : β → α) (m0 : m («expr⊥») = 0) (R : α → α → Prop)\n    (m_supr :\n      ∀ s : ℕ → β,\n        R (m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s i)))\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (m (s i))))\n    (s : γ → β) :\n    R (m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s b)))\n      («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (m (s b))) :=\n  by\n  cases nonempty_encodable γ\n  rw [← supr_decode₂, ← tsum_supᵢ_decode₂ _ m0 s]\n  exact m_supr _\n#align rel_supr_tsum rel_supᵢ_tsum\n-/\n\n",
 "rel_supᵢ_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print rel_supᵢ_sum /-\n/-- If a function is countably sub-additive then it is sub-additive on finite sets -/\ntheorem rel_supᵢ_sum [CompleteLattice β] (m : β → α) (m0 : m («expr⊥») = 0) (R : α → α → Prop)\n    (m_supr :\n      ∀ s : ℕ → β,\n        R (m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s i)))\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (m (s i))))\n    (s : δ → β) (t : Finset δ) :\n    R (m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s d)))\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (m (s d))) :=\n  by\n  rw [supᵢ_subtype', ← Finset.tsum_subtype]\n  exact rel_supᵢ_tsum m m0 R m_supr _\n#align rel_supr_sum rel_supᵢ_sum\n-/\n\n",
 "rel_sup_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print rel_sup_add /-\n/-- If a function is countably sub-additive then it is binary sub-additive -/\ntheorem rel_sup_add [CompleteLattice β] (m : β → α) (m0 : m («expr⊥») = 0) (R : α → α → Prop)\n    (m_supr :\n      ∀ s : ℕ → β,\n        R (m («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s i)))\n          («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (m (s i))))\n    (s₁ s₂ : β) : R (m («expr ⊔ » s₁ s₂)) (m s₁ + m s₂) :=\n  by\n  convert rel_supᵢ_tsum m m0 R m_supr fun b => cond b s₁ s₂\n  · simp only [supᵢ_bool_eq, cond]\n  · rw [tsum_fintype, Fintype.sum_bool, cond, cond]\n#align rel_sup_add rel_sup_add\n-/\n\n",
 "prod_symm":
 "#print Summable.prod_symm /-\ntheorem Summable.prod_symm {f : β × γ → α} (hf : Summable f) : Summable fun p : γ × β => f p.swap :=\n  (Equiv.prodComm γ β).summable_iff.2 hf\n#align summable.prod_symm Summable.prod_symm\n-/\n\n",
 "prod_mk":
 "#print HasSum.prod_mk /-\ntheorem HasSum.prod_mk {f : β → α} {g : β → γ} {a : α} {b : γ} (hf : HasSum f a) (hg : HasSum g b) :\n    HasSum (fun x => (⟨f x, g x⟩ : α × γ)) ⟨a, b⟩ := by simp [HasSum, ← prod_mk_sum, Filter.Tendsto.prod_mk_nhds hf hg]\n#align has_sum.prod_mk HasSum.prod_mk\n-/\n\n",
 "prod_fiberwise":
 "#print HasSum.prod_fiberwise /-\n/-- If a series `f` on `β × γ` has sum `a` and for each `b` the restriction of `f` to `{b} × γ`\nhas sum `g b`, then the series `g` has sum `a`. -/\ntheorem HasSum.prod_fiberwise [RegularSpace α] {f : β × γ → α} {g : β → α} {a : α} (ha : HasSum f a)\n    (hf : ∀ b, HasSum (fun c => f (b, c)) (g b)) : HasSum g a :=\n  HasSum.sigma ((Equiv.sigmaEquivProd β γ).has_sum_iff.2 ha) hf\n#align has_sum.prod_fiberwise HasSum.prod_fiberwise\n-/\n\n",
 "prod_factor":
 "#print Summable.prod_factor /-\ntheorem Summable.prod_factor {f : β × γ → α} (h : Summable f) (b : β) : Summable fun c => f (b, c) :=\n  h.comp_injective fun c₁ c₂ h => (Prod.ext_iff.1 h).2\n#align summable.prod_factor Summable.prod_factor\n-/\n\n",
 "pos_add_zero_add_neg":
 "#print HasSum.pos_add_zero_add_neg /-\ntheorem HasSum.pos_add_zero_add_neg {b : α} {f : ℤ → α} (hpos : HasSum (fun n : ℕ => f (n + 1)) a)\n    (hneg : HasSum (fun n : ℕ => f (-n.succ)) b) : HasSum f (a + f 0 + b) :=\n  haveI : ∀ g : ℕ → α, HasSum (fun k => g (k + 1)) a → HasSum g (a + g 0) :=\n    by\n    intro g hg\n    simpa using (hasSum_nat_add_iff _).mp hg\n  (this (fun n => f n) hpos).nonneg_add_neg hneg\n#align has_sum.pos_add_zero_add_neg HasSum.pos_add_zero_add_neg\n-/\n\n",
 "op":
 "#print Summable.op /-\ntheorem Summable.op (hf : Summable f) : Summable (op ∘ f) :=\n  hf.has_sum.op.summable\n#align summable.op Summable.op\n-/\n\n",
 "of_neg":
 "#print Summable.of_neg /-\ntheorem Summable.of_neg (hf : Summable fun b => -f b) : Summable f := by simpa only [neg_neg] using hf.neg\n#align summable.of_neg Summable.of_neg\n-/\n\n",
 "ofStar":
 "#print Summable.ofStar /-\ntheorem Summable.ofStar (hf : Summable fun b => star (f b)) : Summable f := by simpa only [star_star] using hf.star\n#align summable.of_star Summable.ofStar\n-/\n\n",
 "nonneg_add_neg":
 "#print HasSum.nonneg_add_neg /-\ntheorem HasSum.nonneg_add_neg {b : α} {f : ℤ → α} (hnonneg : HasSum (fun n : ℕ => f n) a)\n    (hneg : HasSum (fun n : ℕ => f (-n.succ)) b) : HasSum f (a + b) :=\n  by\n  simp_rw [← Int.negSucc_coe] at hneg\n  convert hnonneg.int_rec hneg using 1\n  ext (i | j) <;> rfl\n#align has_sum.nonneg_add_neg HasSum.nonneg_add_neg\n-/\n\n",
 "neg":
 "#print Summable.neg /-\ntheorem Summable.neg (hf : Summable f) : Summable fun b => -f b :=\n  hf.has_sum.neg.summable\n#align summable.neg Summable.neg\n-/\n\n",
 "map_iff_of_leftInverse":
 "#print Summable.map_iff_of_leftInverse /-\nprotected theorem Summable.map_iff_of_leftInverse [AddCommMonoid γ] [TopologicalSpace γ] {G G'}\n    [AddMonoidHomClass G α γ] [AddMonoidHomClass G' γ α] (g : G) (g' : G') (hg : Continuous g) (hg' : Continuous g')\n    (hinv : function.left_inverse g' g) : Summable (g ∘ f) ↔ Summable f :=\n  ⟨fun h => by\n    have := h.map _ hg'\n    rwa [← function.comp.assoc, hinv.id] at this, fun h => h.map _ hg⟩\n#align summable.map_iff_of_left_inverse Summable.map_iff_of_leftInverse\n-/\n\n",
 "map_iff_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n#print Summable.map_iff_of_equiv /-\n/-- A special case of `summable.map_iff_of_left_inverse` for convenience -/\nprotected theorem Summable.map_iff_of_equiv [AddCommMonoid γ] [TopologicalSpace γ] {G} [AddEquivClass G α γ] (g : G)\n    (hg : Continuous g) (hg' : Continuous (add_equiv_class.inv g : γ → α)) : Summable (g ∘ f) ↔ Summable f :=\n  Summable.map_iff_of_leftInverse g (g : «expr ≃+ » α γ).symm hg hg' (add_equiv_class.left_inv g)\n#align summable.map_iff_of_equiv Summable.map_iff_of_equiv\n-/\n\n",
 "map":
 "#print Summable.map /-\nprotected theorem Summable.map [AddCommMonoid γ] [TopologicalSpace γ] (hf : Summable f) {G} [AddMonoidHomClass G α γ]\n    (g : G) (hg : Continuous g) : Summable (g ∘ f) :=\n  (hf.has_sum.map g hg).summable\n#align summable.map Summable.map\n-/\n\n",
 "int_rec":
 "#print HasSum.int_rec /-\n/-- If `f₀, f₁, f₂, ...` and `g₀, g₁, g₂, ...` are both convergent then so is the `ℤ`-indexed\nsequence: `..., g₂, g₁, g₀, f₀, f₁, f₂, ...`. -/\ntheorem HasSum.int_rec {b : α} {f g : ℕ → α} (hf : HasSum f a) (hg : HasSum g b) :\n    @HasSum α _ _ _ (@int.rec (fun _ => α) f g : ℤ → α) (a + b) :=\n  by\n  -- note this proof works for any two-case inductive\n  have h₁ : injective (coe : ℕ → ℤ) := @int.of_nat.inj\n  have h₂ : injective Int.negSucc := @int.neg_succ_of_nat.inj\n  have : IsCompl (Set.range (coe : ℕ → ℤ)) (Set.range Int.negSucc) :=\n    by\n    constructor\n    · rw [disjoint_iff_inf_le]\n      rintro _ ⟨⟨i, rfl⟩, ⟨j, ⟨⟩⟩⟩\n    · rw [codisjoint_iff_le_sup]\n      rintro (i | j) h\n      exacts[or.inl ⟨_, rfl⟩, or.inr ⟨_, rfl⟩]\n  exact HasSum.add_isCompl this (h₁.has_sum_range_iff.mpr hf) (h₂.has_sum_range_iff.mpr hg)\n#align has_sum.int_rec HasSum.int_rec\n-/\n\n",
 "indicator":
 "#print Summable.indicator /-\nprotected theorem Summable.indicator (hf : Summable f) (s : Set β) : Summable (s.indicator f) :=\n  hf.summable_of_eq_zero_or_self <| Set.indicator_eq_zero_or_self _ _\n#align summable.indicator Summable.indicator\n-/\n\n",
 "hasSum_zero":
 "#print hasSum_zero /-\n/-- Constant zero function has sum `0` -/\ntheorem hasSum_zero : HasSum (fun b => 0 : β → α) 0 := by simp [HasSum, tendsto_const_nhds]\n#align has_sum_zero hasSum_zero\n-/\n\n",
 "hasSum_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n#print hasSum_unop /-\n@[simp]\ntheorem hasSum_unop {f : β → «expr ᵐᵒᵖ» α} {a : «expr ᵐᵒᵖ» α} : HasSum (fun a => unop (f a)) (unop a) ↔ HasSum f a :=\n  ⟨HasSum.op, HasSum.unop⟩\n#align has_sum_unop hasSum_unop\n-/\n\n",
 "hasSum_sum_of_ne_finset_zero":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (b «expr ∉ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print hasSum_sum_of_ne_finset_zero /-\n/-- If a function `f` vanishes outside of a finite set `s`, then it `has_sum` `∑ b in s, f b`. -/\ntheorem hasSum_sum_of_ne_finset_zero (hf : ∀ (b) (_ : b ∉ s), f b = 0) :\n    HasSum f\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f b)) :=\n  (hasSum_subtype_iff_of_support_subset <| support_subset_iff'.2 hf).1 <| s.has_sum f\n#align has_sum_sum_of_ne_finset_zero hasSum_sum_of_ne_finset_zero\n-/\n\n",
 "hasSum_sum_disjoint":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr on » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print hasSum_sum_disjoint /-\ntheorem hasSum_sum_disjoint {ι} (s : Finset ι) {t : ι → Set β} {a : ι → α}\n    (hs : (s : Set ι).pairwise («expr on » Disjoint t)) (hf : ∀ i ∈ s, HasSum (f ∘ coe : t i → α) (a i)) :\n    HasSum\n      (f ∘ coe :\n        «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (t i) → α)\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (a i)) :=\n  by\n  simp_rw [hasSum_subtype_iff_indicator] at *\n  rw [Set.indicator_finset_bunionᵢ _ _ hs]\n  exact hasSum_sum hf\n#align has_sum_sum_disjoint hasSum_sum_disjoint\n-/\n\n",
 "hasSum_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print hasSum_sum /-\ntheorem hasSum_sum {f : γ → β → α} {a : γ → α} {s : Finset γ} :\n    (∀ i ∈ s, HasSum (f i) (a i)) →\n      HasSum\n        (fun b =>\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i b))\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (a i)) :=\n  Finset.induction_on s (by simp only [hasSum_zero, sum_empty, forall_true_iff])\n    (by\n      simp (config := { contextual := true }) only [HasSum.add, sum_insert, mem_insert, forall_eq_or_imp,\n        forall₂_true_iff, not_false_iff, forall_true_iff])\n#align has_sum_sum hasSum_sum\n-/\n\n",
 "hasSum_subtype_support":
 "#print hasSum_subtype_support /-\n@[simp]\ntheorem hasSum_subtype_support : HasSum (f ∘ coe : support f → α) a ↔ HasSum f a :=\n  hasSum_subtype_iff_of_support_subset <| Set.Subset.refl _\n#align has_sum_subtype_support hasSum_subtype_support\n-/\n\n",
 "hasSum_subtype_iff_of_support_subset":
 "#print hasSum_subtype_iff_of_support_subset /-\ntheorem hasSum_subtype_iff_of_support_subset {s : Set β} (hf : support f ⊆ s) :\n    HasSum (f ∘ coe : s → α) a ↔ HasSum f a :=\n  Subtype.coe_injective.has_sum_iff <| by simpa using support_subset_iff'.1 hf\n#align has_sum_subtype_iff_of_support_subset hasSum_subtype_iff_of_support_subset\n-/\n\n",
 "hasSum_subtype_iff_indicator":
 "#print hasSum_subtype_iff_indicator /-\ntheorem hasSum_subtype_iff_indicator {s : Set β} : HasSum (f ∘ coe : s → α) a ↔ HasSum (s.indicator f) a := by\n  rw [← Set.indicator_range_comp, Subtype.range_coe, hasSum_subtype_iff_of_support_subset Set.support_indicator_subset]\n#align has_sum_subtype_iff_indicator hasSum_subtype_iff_indicator\n-/\n\n",
 "hasSum_single":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (b' «expr ≠ » b) -/\n#print hasSum_single /-\ntheorem hasSum_single {f : β → α} (b : β) (hf : ∀ (b') (_ : b' ≠ b), f b' = 0) : HasSum f (f b) :=\n  suffices\n    HasSum f\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" {b} (f b'))\n    by simpa using this\n  hasSum_sum_of_ne_finset_zero <| by simpa [hf]\n#align has_sum_single hasSum_single\n-/\n\n",
 "hasSum_range_iff":
 "#print Function.Injective.hasSum_range_iff /-\ntheorem Function.Injective.hasSum_range_iff {g : γ → β} (hg : injective g) :\n    HasSum (fun x : Set.range g => f x) a ↔ HasSum (f ∘ g) a :=\n  (Equiv.ofInjective g hg).has_sum_iff.symm\n#align function.injective.has_sum_range_iff Function.Injective.hasSum_range_iff\n-/\n\n",
 "hasSum_pi_single":
 "#print hasSum_pi_single /-\ntheorem hasSum_pi_single [DecidableEq β] (b : β) (a : α) : HasSum (Pi.single b a) a :=\n  show HasSum (fun x => Pi.single b a x) a by simpa only [Pi.single_apply] using hasSum_ite_eq b a\n#align has_sum_pi_single hasSum_pi_single\n-/\n\n",
 "hasSum_op":
 "#print hasSum_op /-\n@[simp]\ntheorem hasSum_op : HasSum (fun a => op (f a)) (op a) ↔ HasSum f a :=\n  ⟨HasSum.unop, HasSum.op⟩\n#align has_sum_op hasSum_op\n-/\n\n",
 "hasSum_of_sum_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print HasSum.hasSum_of_sum_eq /-\ntheorem HasSum.hasSum_of_sum_eq {g : γ → α}\n    (h_eq :\n      ∀ u : Finset γ,\n        ∃ v : Finset β,\n          ∀ v',\n            v ⊆ v' →\n              ∃ u',\n                u ⊆ u' ∧\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" u'\n                      (g x) =\n                    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" v'\n                      (f b))\n    (hf : HasSum g a) : HasSum f a :=\n  le_trans (map_atTop_finset_sum_le_of_sum_eq h_eq) hf\n#align has_sum.has_sum_of_sum_eq HasSum.hasSum_of_sum_eq\n-/\n\n",
 "hasSum_nat_add_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print hasSum_nat_add_iff' /-\ntheorem hasSum_nat_add_iff' {f : ℕ → α} (k : ℕ) {a : α} :\n    HasSum (fun n => f (n + k))\n        (a -\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range k)\n            (f i)) ↔\n      HasSum f a :=\n  by simp [hasSum_nat_add_iff]\n#align has_sum_nat_add_iff' hasSum_nat_add_iff'\n-/\n\n",
 "hasSum_nat_add_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print hasSum_nat_add_iff /-\ntheorem hasSum_nat_add_iff {f : ℕ → α} (k : ℕ) {a : α} :\n    HasSum (fun n => f (n + k)) a ↔\n      HasSum f\n        (a +\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range k)\n            (f i)) :=\n  by\n  refine' iff.trans _ (range k).has_sum_compl_iff\n  rw [← (notMemRangeEquiv k).symm.has_sum_iff]\n  rfl\n#align has_sum_nat_add_iff hasSum_nat_add_iff\n-/\n\n",
 "hasSum_ite_sub_hasSum":
 "#print hasSum_ite_sub_hasSum /-\ntheorem hasSum_ite_sub_hasSum [DecidableEq β] (hf : HasSum f a) (b : β) :\n    HasSum (fun n => ite (n = b) 0 (f n)) (a - f b) :=\n  by\n  convert hf.update b 0 using 1\n  · ext n\n    rw [Function.update_apply]\n  · rw [sub_add_eq_add_sub, zero_add]\n#align has_sum_ite_sub_has_sum hasSum_ite_sub_hasSum\n-/\n\n",
 "hasSum_ite_eq":
 "#print hasSum_ite_eq /-\ntheorem hasSum_ite_eq (b : β) [DecidablePred (· = b)] (a : α) : HasSum (fun b' => if b' = b then a else 0) a :=\n  by\n  convert hasSum_single b _\n  · exact (if_pos rfl).symm\n  intro b' hb'\n  exact if_neg hb'\n#align has_sum_ite_eq hasSum_ite_eq\n-/\n\n",
 "hasSum_iff_tendsto_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Summable.hasSum_iff_tendsto_nat /-\ntheorem Summable.hasSum_iff_tendsto_nat [T2Space α] {f : ℕ → α} {a : α} (hf : Summable f) :\n    HasSum f a ↔\n      Tendsto\n        (fun n : ℕ =>\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range n)\n            (f i))\n        atTop ((nhds) a) :=\n  by\n  refine' ⟨fun h => h.tendsto_sum_nat, fun h => _⟩\n  rw [tendsto_nhds_unique h hf.has_sum.tendsto_sum_nat]\n  exact hf.has_sum\n#align summable.has_sum_iff_tendsto_nat Summable.hasSum_iff_tendsto_nat\n-/\n\n",
 "hasSum_iff_of_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.hasSum_iff_of_support /-\ntheorem Equiv.hasSum_iff_of_support {g : γ → α} (e : «expr ≃ » (support f) (support g))\n    (he : ∀ x : support f, g (e x) = f x) : HasSum f a ↔ HasSum g a :=\n  by\n  have : (g ∘ coe) ∘ e = f ∘ coe := funext he\n  rw [← hasSum_subtype_support, ← this, e.has_sum_iff, hasSum_subtype_support]\n#align equiv.has_sum_iff_of_support Equiv.hasSum_iff_of_support\n-/\n\n",
 "hasSum_iff_hasSum_of_ne_zero_bij":
 "#print hasSum_iff_hasSum_of_ne_zero_bij /-\ntheorem hasSum_iff_hasSum_of_ne_zero_bij {g : γ → α} (i : support g → β) (hi : ∀ ⦃x y⦄, i x = i y → (x : γ) = y)\n    (hf : support f ⊆ Set.range i) (hfg : ∀ x, f (i x) = g x) : HasSum f a ↔ HasSum g a :=\n  iff.symm <|\n    Equiv.hasSum_iff_of_support\n      (Equiv.ofBijective (fun x => ⟨i x, fun hx => x.coe_prop <| hfg x ▸ hx⟩)\n        ⟨fun x y h => Subtype.ext <| hi <| Subtype.ext_iff.1 h, fun y =>\n          (hf y.coe_prop).imp fun x hx => Subtype.ext hx⟩)\n      hfg\n#align has_sum_iff_has_sum_of_ne_zero_bij hasSum_iff_hasSum_of_ne_zero_bij\n-/\n\n",
 "hasSum_iff_hasSum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print hasSum_iff_hasSum /-\ntheorem hasSum_iff_hasSum {g : γ → α}\n    (h₁ :\n      ∀ u : Finset γ,\n        ∃ v : Finset β,\n          ∀ v',\n            v ⊆ v' →\n              ∃ u',\n                u ⊆ u' ∧\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" u'\n                      (g x) =\n                    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" v'\n                      (f b))\n    (h₂ :\n      ∀ v : Finset β,\n        ∃ u : Finset γ,\n          ∀ u',\n            u ⊆ u' →\n              ∃ v',\n                v ⊆ v' ∧\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" v'\n                      (f b) =\n                    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" u'\n                      (g x)) :\n    HasSum f a ↔ HasSum g a :=\n  ⟨HasSum.hasSum_of_sum_eq h₂, HasSum.hasSum_of_sum_eq h₁⟩\n#align has_sum_iff_has_sum hasSum_iff_hasSum\n-/\n\n",
 "hasSum_iff_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Finset.hasSum_iff_compl /-\nprotected theorem Finset.hasSum_iff_compl (s : Finset β) :\n    HasSum f a ↔\n      HasSum (fun x : { x // x ∉ s } => f x)\n        (a - finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) :=\n  (s.has_sum f).has_sum_iff_compl\n#align finset.has_sum_iff_compl Finset.hasSum_iff_compl\n-/\n\n",
 "hasSum_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Summable.hasSum_iff /-\ntheorem Summable.hasSum_iff (h : Summable f) :\n    HasSum f a ↔\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f b) = a :=\n  iff.intro HasSum.tsum_eq fun eq => Eq ▸ h.has_sum\n#align summable.has_sum_iff Summable.hasSum_iff\n-/\n\n",
 "hasSum_fintype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n#print hasSum_fintype /-\ntheorem hasSum_fintype [Fintype β] (f : β → α) :\n    HasSum f\n      (finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\"\n        (f b)) :=\n  OrderTop.tendsto_atTop_nhds _\n#align has_sum_fintype hasSum_fintype\n-/\n\n",
 "hasSum_empty":
 "#print hasSum_empty /-\ntheorem hasSum_empty [IsEmpty β] : HasSum f 0 := by convert hasSum_zero\n#align has_sum_empty hasSum_empty\n-/\n\n",
 "hasSum_compl_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print Finset.hasSum_compl_iff /-\nprotected theorem Finset.hasSum_compl_iff (s : Finset β) :\n    HasSum (fun x : { x // x ∉ s } => f x) a ↔\n      HasSum f\n        (a + finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) :=\n  (s.has_sum f).has_sum_compl_iff.trans <| by rw [add_comm]\n#align finset.has_sum_compl_iff Finset.hasSum_compl_iff\n-/\n\n",
 "hasSum":
 "#print Pi.hasSum /-\ntheorem Pi.hasSum {f : ι → ∀ x, π x} {g : ∀ x, π x} : HasSum f g ↔ ∀ x, HasSum (fun i => f i x) (g x) := by\n  simp only [HasSum, tendsto_pi_nhds, sum_apply]\n#align pi.has_sum Pi.hasSum\n-/\n\n",
 "even_add_odd":
 "#print Summable.even_add_odd /-\ntheorem Summable.even_add_odd {f : ℕ → α} (he : Summable fun k => f (2 * k)) (ho : Summable fun k => f (2 * k + 1)) :\n    Summable f :=\n  (he.has_sum.even_add_odd ho.has_sum).summable\n#align summable.even_add_odd Summable.even_add_odd\n-/\n\n",
 "eq_add_of_hasSum_ite":
 "#print eq_add_of_hasSum_ite /-\n/-- Version of `has_sum_ite_sub_has_sum` for `add_comm_monoid` rather than `add_comm_group`.\nRather than showing that the `ite` expression has a specific sum in terms of `has_sum`,\nit gives a relationship between the sums of `f` and `ite (n = b) 0 (f n)` given that both exist. -/\ntheorem eq_add_of_hasSum_ite {α β : Type _} [TopologicalSpace α] [AddCommMonoid α] [T2Space α] [ContinuousAdd α]\n    {f : β → α} {a : α} (hf : HasSum f a) (b : β) (a' : α) (hf' : HasSum (fun n => ite (n = b) 0 (f n)) a') :\n    a = a' + f b := by\n  refine' (add_zero a).symm.trans (hf.update' b 0 _)\n  convert hf'\n  exact funext (f.update_apply b 0)\n#align eq_add_of_has_sum_ite eq_add_of_hasSum_ite\n-/\n\n",
 "const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print Summable.const_smul /-\ntheorem Summable.const_smul (b : γ) (hf : Summable f) : Summable fun i => «expr • » b (f i) :=\n  (hf.has_sum.const_smul _).summable\n#align summable.const_smul Summable.const_smul\n-/\n\n",
 "congr":
 "#print Summable.congr /-\ntheorem Summable.congr (hf : Summable f) (hfg : ∀ b, f b = g b) : Summable g :=\n  (summable_congr hfg).mp hf\n#align summable.congr Summable.congr\n-/\n\n",
 "compl_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print Summable.compl_add /-\ntheorem Summable.compl_add {s : Set β} (hs : Summable (f ∘ coe : «expr ᶜ» s → α)) (hsc : Summable (f ∘ coe : s → α)) :\n    Summable f :=\n  (hs.has_sum.compl_add hsc.has_sum).summable\n#align summable.compl_add Summable.compl_add\n-/\n\n",
 "comp_injective":
 "#print Summable.comp_injective /-\ntheorem Summable.comp_injective {i : γ → β} (hf : Summable f) (hi : injective i) : Summable (f ∘ i) :=\n  by\n  simpa only [Set.indicator_range_comp] using (hi.summable_iff _).2 (hf.indicator (Set.range i))\n  exact fun x hx => Set.indicator_of_not_mem hx _\n#align summable.comp_injective Summable.comp_injective\n-/\n\n",
 "cauchySeq_finset_iff_vanishing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print cauchySeq_finset_iff_vanishing /-\ntheorem cauchySeq_finset_iff_vanishing :\n    (CauchySeq fun s : Finset β =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f b)) ↔\n      ∀ e ∈ (nhds) (0 : α),\n        ∃ s : Finset β,\n          ∀ t,\n            Disjoint t s →\n              finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t (f b) ∈\n                e :=\n  by\n  simp only [CauchySeq, cauchy_map_iff, and_iff_right at_top_ne_bot, prod_at_top_at_top_eq,\n    uniformity_eq_comap_nhds_zero α, tendsto_comap_iff, (· ∘ ·)]\n  rw [tendsto_at_top']\n  constructor\n  · intro h e he\n    rcases h e he with ⟨⟨s₁, s₂⟩, h⟩\n    use s₁ ∪ s₂\n    intro t ht\n    specialize h (s₁ ∪ s₂, s₁ ∪ s₂ ∪ t) ⟨le_sup_left, le_sup_of_le_left le_sup_right⟩\n    simpa only [Finset.sum_union ht.symm, add_sub_cancel'] using h\n  · intro h e he\n    rcases exists_nhds_half_neg he with ⟨d, hd, hde⟩\n    rcases h d hd with ⟨s, h⟩\n    use (s, s)\n    rintro ⟨t₁, t₂⟩ ⟨ht₁, ht₂⟩\n    have :\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t₂ (f b) -\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" t₁ (f b) =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (t₂ \\ s) (f b) -\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (t₁ \\ s)\n            (f b) :=\n      by simp only [(Finset.sum_sdiff ht₁).symm, (Finset.sum_sdiff ht₂).symm, add_sub_add_right_eq_sub]\n    simp only [this]\n    exact hde _ (h _ Finset.sdiff_disjoint) _ (h _ Finset.sdiff_disjoint)\n#align cauchy_seq_finset_iff_vanishing cauchySeq_finset_iff_vanishing\n-/\n\n",
 "add_isCompl":
 "#print HasSum.add_isCompl /-\ntheorem HasSum.add_isCompl {s t : Set β} (hs : IsCompl s t) (ha : HasSum (f ∘ coe : s → α) a)\n    (hb : HasSum (f ∘ coe : t → α) b) : HasSum f (a + b) := by\n  simpa [← hs.compl_eq] using (hasSum_subtype_iff_indicator.1 ha).add (hasSum_subtype_iff_indicator.1 hb)\n#align has_sum.add_is_compl HasSum.add_isCompl\n-/\n\n",
 "add_disjoint":
 "#print HasSum.add_disjoint /-\ntheorem HasSum.add_disjoint {s t : Set β} (hs : Disjoint s t) (ha : HasSum (f ∘ coe : s → α) a)\n    (hb : HasSum (f ∘ coe : t → α) b) : HasSum (f ∘ coe : s ∪ t → α) (a + b) :=\n  by\n  rw [hasSum_subtype_iff_indicator] at *\n  rw [Set.indicator_union_of_disjoint hs]\n  exact ha.add hb\n#align has_sum.add_disjoint HasSum.add_disjoint\n-/\n\n",
 "add_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print Summable.add_compl /-\ntheorem Summable.add_compl {s : Set β} (hs : Summable (f ∘ coe : s → α)) (hsc : Summable (f ∘ coe : «expr ᶜ» s → α)) :\n    Summable f :=\n  (hs.has_sum.add_compl hsc.has_sum).summable\n#align summable.add_compl Summable.add_compl\n-/\n\n",
 "add":
 "#print Summable.add /-\ntheorem Summable.add (hf : Summable f) (hg : Summable g) : Summable fun b => f b + g b :=\n  (hf.has_sum.add hg.has_sum).summable\n#align summable.add Summable.add\n-/\n\n"}