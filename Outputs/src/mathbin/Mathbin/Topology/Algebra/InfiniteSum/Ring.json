{"tsum_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Commute.tsum_right /-\ntheorem Commute.tsum_right (a) (h : ∀ i, Commute a (f i)) :\n    Commute a\n      («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i)) :=\n  if hf : Summable f then (hf.tsum_mul_left a).symm.trans ((congr_arg _ <| funext h).trans (hf.tsum_mul_right a))\n  else (tsum_eq_zero_of_not_summable hf).symm ▸ Commute.zero_right _\n#align commute.tsum_right Commute.tsum_right\n-/\n\n",
 "tsum_mul_tsum_eq_tsum_sum_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print tsum_mul_tsum_eq_tsum_sum_range /-\n/-- The **Cauchy product formula** for the product of two infinites sums indexed by `ℕ`, expressed\nby summing on `finset.range`.\n\nSee also `tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm` if `f` and `g` are absolutely summable.\n-/\ntheorem tsum_mul_tsum_eq_tsum_sum_range (hf : Summable f) (hg : Summable g)\n    (hfg : Summable fun x : ℕ × ℕ => f x.1 * g x.2) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f n) *\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g n) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range (n + 1))\n          (f k * g (n - k))) :=\n  by\n  simp_rw [← nat.sum_antidiagonal_eq_sum_range_succ fun k l => f k * g l]\n  exact tsum_mul_tsum_eq_tsum_sum_antidiagonal hf hg hfg\n#align tsum_mul_tsum_eq_tsum_sum_range tsum_mul_tsum_eq_tsum_sum_range\n-/\n\n",
 "tsum_mul_tsum_eq_tsum_sum_antidiagonal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print tsum_mul_tsum_eq_tsum_sum_antidiagonal /-\n/-- The **Cauchy product formula** for the product of two infinites sums indexed by `ℕ`, expressed\nby summing on `finset.nat.antidiagonal`.\n\nSee also `tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm` if `f` and `g` are absolutely\nsummable. -/\ntheorem tsum_mul_tsum_eq_tsum_sum_antidiagonal (hf : Summable f) (hg : Summable g)\n    (hfg : Summable fun x : ℕ × ℕ => f x.1 * g x.2) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f n) *\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g n) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n          (Nat.antidiagonal n) (f kl.1 * g kl.2)) :=\n  by\n  conv_rhs =>\n    congr\n    ext\n    rw [← Finset.sum_finset_coe, ← tsum_fintype]\n  rw [tsum_mul_tsum hf hg hfg, ← nat.sigma_antidiagonal_equiv_prod.tsum_eq (_ : ℕ × ℕ → α)]\n  exact\n    tsum_sigma' (fun n => (hasSum_fintype _).summable) (summable_mul_prod_iff_summable_mul_sigma_antidiagonal.mp hfg)\n#align tsum_mul_tsum_eq_tsum_sum_antidiagonal tsum_mul_tsum_eq_tsum_sum_antidiagonal\n-/\n\n",
 "tsum_mul_tsum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_mul_tsum /-\n/-- Product of two infinites sums indexed by arbitrary types.\n    See also `tsum_mul_tsum_of_summable_norm` if `f` and `g` are abolutely summable. -/\ntheorem tsum_mul_tsum (hf : Summable f) (hg : Summable g) (hfg : Summable fun x : ι × κ => f x.1 * g x.2) :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) *\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (g y) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (f z.1 * g z.2) :=\n  hf.has_sum.mul_eq hg.has_sum hfg.has_sum\n#align tsum_mul_tsum tsum_mul_tsum\n-/\n\n",
 "tsum_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_mul_right /-\ntheorem tsum_mul_right [T2Space α] :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x * a) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) * a :=\n  if hf : Summable f then hf.tsum_mul_right a\n  else\n    if ha : a = 0 then by simp [ha]\n    else by\n      rw [tsum_eq_zero_of_not_summable hf, tsum_eq_zero_of_not_summable (mt (summable_mul_right_iff ha).mp hf),\n        MulZeroClass.zero_mul]\n#align tsum_mul_right tsum_mul_right\n-/\n\n",
 "tsum_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_mul_left /-\ntheorem tsum_mul_left [T2Space α] :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (a * f x) =\n      a * «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) :=\n  if hf : Summable f then hf.tsum_mul_left a\n  else\n    if ha : a = 0 then by simp [ha]\n    else by\n      rw [tsum_eq_zero_of_not_summable hf, tsum_eq_zero_of_not_summable (mt (summable_mul_left_iff ha).mp hf),\n        MulZeroClass.mul_zero]\n#align tsum_mul_left tsum_mul_left\n-/\n\n",
 "tsum_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print Commute.tsum_left /-\ntheorem Commute.tsum_left (a) (h : ∀ i, Commute (f i) a) :\n    Commute («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f i))\n      a :=\n  (Commute.tsum_right _ fun i => (h i).symm).symm\n#align commute.tsum_left Commute.tsum_left\n-/\n\n",
 "tsum_div_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n#print tsum_div_const /-\ntheorem tsum_div_const [T2Space α] :\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x / a) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (f x) / a :=\n  by simpa only [div_eq_mul_inv] using tsum_mul_right\n#align tsum_div_const tsum_div_const\n-/\n\n",
 "summable_sum_mul_range_of_summable_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print summable_sum_mul_range_of_summable_mul /-\ntheorem summable_sum_mul_range_of_summable_mul (h : Summable fun x : ℕ × ℕ => f x.1 * g x.2) :\n    Summable fun n =>\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (range (n + 1))\n        (f k * g (n - k)) :=\n  by\n  simp_rw [← nat.sum_antidiagonal_eq_sum_range_succ fun k l => f k * g l]\n  exact summable_sum_mul_antidiagonal_of_summable_mul h\n#align summable_sum_mul_range_of_summable_mul summable_sum_mul_range_of_summable_mul\n-/\n\n",
 "summable_sum_mul_antidiagonal_of_summable_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print summable_sum_mul_antidiagonal_of_summable_mul /-\ntheorem summable_sum_mul_antidiagonal_of_summable_mul (h : Summable fun x : ℕ × ℕ => f x.1 * g x.2) :\n    Summable fun n =>\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (Nat.antidiagonal n) (f kl.1 * g kl.2) :=\n  by\n  rw [summable_mul_prod_iff_summable_mul_sigma_antidiagonal] at h\n  conv =>\n    congr\n    ext\n    rw [← Finset.sum_finset_coe, ← tsum_fintype]\n  exact h.sigma' fun n => (hasSum_fintype _).summable\n#align summable_sum_mul_antidiagonal_of_summable_mul summable_sum_mul_antidiagonal_of_summable_mul\n-/\n\n",
 "summable_mul_right_iff":
 "#print summable_mul_right_iff /-\ntheorem summable_mul_right_iff (h : a ≠ 0) : (Summable fun i => f i * a) ↔ Summable f :=\n  ⟨fun H => by simpa only [mul_inv_cancel_right₀ h] using H.mul_right a⁻¹, fun H => H.mul_right _⟩\n#align summable_mul_right_iff summable_mul_right_iff\n-/\n\n",
 "summable_mul_prod_iff_summable_mul_sigma_antidiagonal":
 "#print summable_mul_prod_iff_summable_mul_sigma_antidiagonal /-\n/- The family `(k, l) : ℕ × ℕ ↦ f k * g l` is summable if and only if the family\n`(n, k, l) : Σ (n : ℕ), nat.antidiagonal n ↦ f k * g l` is summable. -/\ntheorem summable_mul_prod_iff_summable_mul_sigma_antidiagonal :\n    (Summable fun x : ℕ × ℕ => f x.1 * g x.2) ↔\n      Summable fun x : Σn : ℕ, Nat.antidiagonal n => f (x.2 : ℕ × ℕ).1 * g (x.2 : ℕ × ℕ).2 :=\n  Nat.sigmaAntidiagonalEquivProd.summable_iff.symm\n#align summable_mul_prod_iff_summable_mul_sigma_antidiagonal summable_mul_prod_iff_summable_mul_sigma_antidiagonal\n-/\n\n",
 "summable_mul_left_iff":
 "#print summable_mul_left_iff /-\ntheorem summable_mul_left_iff (h : a ≠ 0) : (Summable fun i => a * f i) ↔ Summable f :=\n  ⟨fun H => by simpa only [inv_mul_cancel_left₀ h] using H.mul_left a⁻¹, fun H => H.mul_left _⟩\n#align summable_mul_left_iff summable_mul_left_iff\n-/\n\n",
 "summable_div_const_iff":
 "#print summable_div_const_iff /-\ntheorem summable_div_const_iff (h : a ≠ 0) : (Summable fun i => f i / a) ↔ Summable f := by\n  simpa only [div_eq_mul_inv] using summable_mul_right_iff (inv_ne_zero h)\n#align summable_div_const_iff summable_div_const_iff\n-/\n\n",
 "mul_right":
 "#print Summable.mul_right /-\ntheorem Summable.mul_right (a) (hf : Summable f) : Summable fun i => f i * a :=\n  (hf.has_sum.mul_right _).summable\n#align summable.mul_right Summable.mul_right\n-/\n\n",
 "mul_left":
 "#print Summable.mul_left /-\ntheorem Summable.mul_left (a) (hf : Summable f) : Summable fun i => a * f i :=\n  (hf.has_sum.mul_left _).summable\n#align summable.mul_left Summable.mul_left\n-/\n\n",
 "mul_eq":
 "#print HasSum.mul_eq /-\ntheorem HasSum.mul_eq (hf : HasSum f s) (hg : HasSum g t) (hfg : HasSum (fun x : ι × κ => f x.1 * g x.2) u) :\n    s * t = u :=\n  have key₁ : HasSum (fun i => f i * t) (s * t) := hf.mul_right t\n  have this : ∀ i : ι, HasSum (fun c : κ => f i * g c) (f i * t) := fun i => hg.mul_left (f i)\n  have key₂ : HasSum (fun i => f i * t) u := HasSum.prod_fiberwise hfg this\n  key₁.unique key₂\n#align has_sum.mul_eq HasSum.mul_eq\n-/\n\n",
 "mul":
 "#print HasSum.mul /-\ntheorem HasSum.mul (hf : HasSum f s) (hg : HasSum g t) (hfg : Summable fun x : ι × κ => f x.1 * g x.2) :\n    HasSum (fun x : ι × κ => f x.1 * g x.2) (s * t) :=\n  let ⟨u, hu⟩ := hfg\n  (hf.mul_eq hg hu).symm ▸ hu\n#align has_sum.mul HasSum.mul\n-/\n\n",
 "hasSum_mul_right_iff":
 "#print hasSum_mul_right_iff /-\ntheorem hasSum_mul_right_iff (h : a₂ ≠ 0) : HasSum (fun i => f i * a₂) (a₁ * a₂) ↔ HasSum f a₁ :=\n  ⟨fun H => by simpa only [mul_inv_cancel_right₀ h] using H.mul_right a₂⁻¹, HasSum.mul_right _⟩\n#align has_sum_mul_right_iff hasSum_mul_right_iff\n-/\n\n",
 "hasSum_mul_left_iff":
 "#print hasSum_mul_left_iff /-\ntheorem hasSum_mul_left_iff (h : a₂ ≠ 0) : HasSum (fun i => a₂ * f i) (a₂ * a₁) ↔ HasSum f a₁ :=\n  ⟨fun H => by simpa only [inv_mul_cancel_left₀ h] using H.mul_left a₂⁻¹, HasSum.mul_left _⟩\n#align has_sum_mul_left_iff hasSum_mul_left_iff\n-/\n\n",
 "hasSum_div_const_iff":
 "#print hasSum_div_const_iff /-\ntheorem hasSum_div_const_iff (h : a₂ ≠ 0) : HasSum (fun i => f i / a₂) (a₁ / a₂) ↔ HasSum f a₁ := by\n  simpa only [div_eq_mul_inv] using hasSum_mul_right_iff (inv_ne_zero h)\n#align has_sum_div_const_iff hasSum_div_const_iff\n-/\n\n",
 "div_const":
 "#print Summable.div_const /-\ntheorem Summable.div_const (h : Summable f) (b : α) : Summable fun i => f i / b :=\n  (h.has_sum.div_const _).summable\n#align summable.div_const Summable.div_const\n-/\n\n"}