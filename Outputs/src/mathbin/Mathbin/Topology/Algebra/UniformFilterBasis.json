{"cauchy_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (x y «expr ∈ » M) -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (x y «expr ∈ » M) -/\n#print cauchy_iff /-\ntheorem cauchy_iff {F : Filter G} :\n    @Cauchy G B.uniform_space F ↔ F.ne_bot ∧ ∀ U ∈ B, ∃ M ∈ F, ∀ (x) (_ : x ∈ M) (y) (_ : y ∈ M), y - x ∈ U :=\n  by\n  letI := B.uniform_space\n  haveI := B.uniform_add_group\n  suffices filter.prod F F ≤ (uniformity) G ↔ ∀ U ∈ B, ∃ M ∈ F, ∀ (x) (_ : x ∈ M) (y) (_ : y ∈ M), y - x ∈ U by\n    constructor <;> rintro ⟨h', h⟩ <;> refine' ⟨h', _⟩ <;> [rwa [← this], rwa [this]]\n  rw [uniformity_eq_comap_nhds_zero G, ← map_le_iff_le_comap]\n  change tendsto _ _ _ ↔ _\n  simp [(basis_sets F).prod_self.tendsto_iff B.nhds_zero_has_basis, @forall_swap (_ ∈ _) G]\n#align cauchy_iff cauchy_iff\n-/\n\n",
 "UniformAddGroup":
 "#print UniformAddGroup /-\n/-\nCopyright (c) 2021 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot\n-/\n/-- The uniform space structure associated to an abelian group filter basis via the associated\ntopological abelian group structure is compatible with its group structure. -/\nprotected theorem UniformAddGroup : @UniformAddGroup G B.uniform_space _ :=\n  @comm_topologicalAddGroup_is_uniform G _ B.topology B.is_topological_add_group\n#align uniform_add_group UniformAddGroup\n-/\n\n"}