{"ring_sep_rel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem ring_sep_rel (α) [CommRing α] [UniformSpace α] [UniformAddGroup α] [TopologicalRing α] :\n    separationSetoid α = Submodule.quotientRel (Ideal.closure («expr⊥»)) :=\n  Setoid.ext fun x y => (addGroup_separationRel x y).trans <| iff.trans (by rfl) (Submodule.quotientRel_r_def _).symm\n#align ring_sep_rel ring_sep_rel\n\n",
 "ring_sep_quot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem ring_sep_quot (α : Type u) [r : CommRing α] [UniformSpace α] [UniformAddGroup α] [TopologicalRing α] :\n    quotient (separationSetoid α) = «expr ⧸ » α («expr⊥» : Ideal α).closure := by rw [@ring_sep_rel α r] <;> rfl\n#align ring_sep_quot ring_sep_quot\n\n",
 "mul":
 "#print Continuous.mul /-\ntheorem Continuous.mul {β : Type _} [TopologicalSpace β] {f g : β → Completion α} (hf : Continuous f)\n    (hg : Continuous g) : Continuous fun b => f b * g b :=\n  continuous_mul.comp (hf.prod_mk hg : _)\n#align continuous.mul Continuous.mul\n-/\n\n",
 "map_smul_eq_mul_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n-- helping the elaborator\n@[simp]\ntheorem map_smul_eq_mul_coe (r : R) : Completion.map ((«expr • » · ·) r) = (· * ·) (algebraMap R A r : Completion A) :=\n  by\n  ext x\n  refine' completion.induction_on x _ fun a => _\n  · exact isClosed_eq completion.continuous_map (continuous_mul_left _)\n  · rw [map_coe (uniform_continuous_const_smul r) a, Algebra.smul_def, coe_mul]\n#align map_smul_eq_mul_coe map_smul_eq_mul_coe\n\n",
 "continuous_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print continuous_mul /-\ntheorem continuous_mul : Continuous fun p : Completion α × Completion α => p.1 * p.2 :=\n  by\n  let m := (AddMonoidHom.mul : «expr →+ » α («expr →+ » α α)).compr₂ to_compl\n  have : Continuous fun p : α × α => m p.1 p.2 := (continuous_coe α).comp continuous_mul\n  have di : DenseInducing (to_compl : α → completion α) := dense_inducing_coe\n  convert di.extend_Z_bilin di this\n  ext ⟨x, y⟩\n  rfl\n#align continuous_mul continuous_mul\n-/\n\n",
 "continuous_coe_ring_hom":
 "theorem continuous_coe_ring_hom : Continuous (coeRingHom : α → Completion α) :=\n  continuous_coe α\n#align continuous_coe_ring_hom continuous_coe_ring_hom\n\n",
 "coe_one":
 "/-\nCopyright (c) 2018 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Johannes Hölzl\n-/\n@[norm_cast]\ntheorem coe_one : ((1 : α) : Completion α) = 1 :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_mul":
 "@[norm_cast]\ntheorem coe_mul (a b : α) : ((a * b : α) : Completion α) = a * b :=\n  ((denseInducing_coe.prod denseInducing_coe).extend_eq ((continuous_coe α).comp (@continuous_mul α _ _ _)) (a, b)).symm\n#align coe_mul coe_mul\n\n",
 "algebra_map_def":
 "theorem algebra_map_def (r : R) : algebraMap R (Completion A) r = (algebraMap R A r : Completion A) :=\n  rfl\n#align algebra_map_def algebra_map_def\n\n"}