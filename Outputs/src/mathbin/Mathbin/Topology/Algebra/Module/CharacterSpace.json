{"union_zero_is_closed":
 "/-- The `character_space 𝕜 A` along with `0` is always a closed set in `weak_dual 𝕜 A`. -/\ntheorem union_zero_is_closed [t2_space 𝕜] [has_continuous_mul 𝕜] : is_closed (character_space 𝕜 A ∪ {0}) :=\n  by\n  simp only [union_zero, Set.setOf_forall]\n  exact\n    is_closed_Inter fun x =>\n      is_closed_Inter fun y => is_closed_eq (eval_continuous _) <| (eval_continuous _).mul (eval_continuous _)\n#align union_zero_is_closed union_zero_is_closed\n\n",
 "union_zero":
 "theorem union_zero : character_space 𝕜 A ∪ {0} = { φ : weak_dual 𝕜 A | ∀ x y : A, φ (x * y) = φ x * φ y } :=\n  le_antisymm\n    (by\n      rintro φ (hφ | h₀)\n      · exact hφ.2\n      · exact fun x y => by simp [Set.eq_of_mem_singleton h₀])\n    fun φ hφ => or.elim (em <| φ = 0) (fun h₀ => or.inr h₀) fun h₀ => or.inl ⟨h₀, hφ⟩\n#align union_zero union_zero\n\n",
 "is_closed":
 "/-- under suitable mild assumptions on `𝕜`, the character space is a closed set in\n`weak_dual 𝕜 A`. -/\nprotected theorem is_closed [nontrivial 𝕜] [t2_space 𝕜] [has_continuous_mul 𝕜] : is_closed (character_space 𝕜 A) :=\n  by\n  rw [eq_set_map_one_map_mul, Set.setOf_and]\n  refine' is_closed.inter (is_closed_eq (eval_continuous _) continuous_const) _\n  simpa only [(union_zero 𝕜 A).symm] using union_zero_is_closed _ _\n#align is_closed is_closed\n\n",
 "ext_ker":
 "theorem ext_ker {φ ψ : character_space 𝕜 A} (h : ring_hom.ker φ = ring_hom.ker ψ) : φ = ψ :=\n  by\n  ext\n  have : x - algebra_map 𝕜 A (ψ x) ∈ ring_hom.ker φ := by\n    simpa only [h, ring_hom.mem_ker, map_sub, alg_hom_class.commutes] using sub_self (ψ x)\n  · rwa [ring_hom.mem_ker, map_sub, alg_hom_class.commutes, sub_eq_zero] at this\n#align ext_ker ext_ker\n\n",
 "ext":
 "@[ext]\ntheorem ext {φ ψ : character_space 𝕜 A} (h : ∀ x, φ x = ψ x) : φ = ψ :=\n  fun_like.ext _ _ h\n#align ext ext\n\n",
 "eq_set_map_one_map_mul":
 "theorem eq_set_map_one_map_mul [nontrivial 𝕜] :\n    character_space 𝕜 A = { φ : weak_dual 𝕜 A | φ 1 = 1 ∧ ∀ x y : A, φ (x * y) = φ x * φ y } :=\n  by\n  ext x\n  refine' ⟨fun h => ⟨map_one (⟨x, h⟩ : character_space 𝕜 A), h.2⟩, fun h => ⟨_, h.2⟩⟩\n  rintro rfl\n  simpa using h.1\n#align eq_set_map_one_map_mul eq_set_map_one_map_mul\n\n",
 "coe_to_non_unital_alg_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_non_unital_alg_hom (φ : character_space 𝕜 A) : «expr⇑ » (to_non_unital_alg_hom φ) = φ :=\n  rfl\n#align coe_to_non_unital_alg_hom coe_to_non_unital_alg_hom\n\n",
 "coe_to_clm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_clm (φ : character_space 𝕜 A) : «expr⇑ » (to_clm φ) = φ :=\n  rfl\n#align coe_to_clm coe_to_clm\n\n",
 "coe_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-\nCopyright (c) 2022 Frédéric Dupuis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Frédéric Dupuis\n-/\n@[simp, norm_cast, protected]\ntheorem coe_coe (φ : character_space 𝕜 A) : «expr⇑ » (φ : weak_dual 𝕜 A) = φ :=\n  rfl\n#align coe_coe coe_coe\n\n",
 "apply_mem_spectrum":
 "theorem apply_mem_spectrum [nontrivial 𝕜] (φ : character_space 𝕜 A) (a : A) : φ a ∈ spectrum 𝕜 a :=\n  alg_hom.apply_mem_spectrum φ a\n#align apply_mem_spectrum apply_mem_spectrum\n\n"}