{"of_basis_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem locally_convex_space.of_basis_zero {ι : Type _} (b : ι → set E) (p : ι → Prop)\n    (hbasis : ((nhds) 0).has_basis p b) (hconvex : ∀ i, p i → convex 𝕜 (b i)) : locally_convex_space 𝕜 E :=\n  by\n  refine'\n    locally_convex_space.of_bases 𝕜 E (fun (x : E) (i : ι) => «expr '' » ((· + ·) x) (b i)) (fun _ => p) (fun x => _)\n      fun x i hi => (hconvex i hi).translate x\n  rw [← map_add_left_nhds_zero]\n  exact hbasis.map _\n#align locally_convex_space.of_basis_zero locally_convex_space.of_basis_zero\n\n",
 "of_bases":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem locally_convex_space.of_bases {ι : Type _} (b : E → ι → set E) (p : E → ι → Prop)\n    (hbasis : ∀ x : E, ((nhds) x).has_basis (p x) (b x)) (hconvex : ∀ x i, p x i → convex 𝕜 (b x i)) :\n    locally_convex_space 𝕜 E :=\n  ⟨fun x =>\n    (hbasis x).to_has_basis (fun i hi => ⟨b x i, ⟨⟨(hbasis x).mem_of_mem hi, hconvex x i hi⟩, le_refl (b x i)⟩⟩)\n      fun s hs => ⟨(hbasis x).index s hs.1, ⟨(hbasis x).property_index hs.1, (hbasis x).set_index_subset hs.1⟩⟩⟩\n#align locally_convex_space.of_bases locally_convex_space.of_bases\n\n",
 "locally_convex_space_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem locally_convex_space_infi {ts' : ι → topological_space E} (h' : ∀ i, @locally_convex_space 𝕜 E _ _ _ (ts' i)) :\n    @locally_convex_space 𝕜 E _ _ _\n      («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (ts' i)) :=\n  by\n  refine' locally_convex_space_Inf _\n  rwa [forall_range_iff]\n#align locally_convex_space_infi locally_convex_space_infi\n\n",
 "locally_convex_space_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem locally_convex_space_inf {t₁ t₂ : topological_space E} (h₁ : @locally_convex_space 𝕜 E _ _ _ t₁)\n    (h₂ : @locally_convex_space 𝕜 E _ _ _ t₂) : @locally_convex_space 𝕜 E _ _ _ («expr ⊓ » t₁ t₂) :=\n  by\n  rw [inf_eq_infᵢ]\n  refine' locally_convex_space_infi fun b => _\n  cases b <;> assumption\n#align locally_convex_space_inf locally_convex_space_inf\n\n",
 "locally_convex_space_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem locally_convex_space_induced {t : topological_space F} [locally_convex_space 𝕜 F] (f : «expr →ₗ[ ] » E 𝕜 F) :\n    @locally_convex_space 𝕜 E _ _ _ (t.induced f) :=\n  by\n  letI : topological_space E := t.induced f\n  refine'\n    locally_convex_space.of_bases 𝕜 E (fun x => preimage f) (fun x => fun s : set F => s ∈ (nhds) (f x) ∧ convex 𝕜 s)\n      (fun x => _) fun x s ⟨_, hs⟩ => hs.linear_preimage f\n  rw [nhds_induced]\n  exact (locally_convex_space.convex_basis <| f x).comap f\n#align locally_convex_space_induced locally_convex_space_induced\n\n",
 "locally_convex_space_iff_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem locally_convex_space_iff_zero :\n    locally_convex_space 𝕜 E ↔\n      ((nhds) 0 : filter E).has_basis (fun s : set E => s ∈ ((nhds) 0 : filter E) ∧ convex 𝕜 s) id :=\n  ⟨fun h => @locally_convex_space.convex_basis _ _ _ _ _ _ h 0, fun h =>\n    locally_convex_space.of_basis_zero 𝕜 E _ _ h fun s => And.right⟩\n#align locally_convex_space_iff_zero locally_convex_space_iff_zero\n\n",
 "locally_convex_space_iff_exists_convex_subset_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem locally_convex_space_iff_exists_convex_subset_zero :\n    locally_convex_space 𝕜 E ↔ ∀ U ∈ ((nhds) 0 : filter E), ∃ S ∈ ((nhds) 0 : filter E), convex 𝕜 S ∧ S ⊆ U :=\n  (locally_convex_space_iff_zero 𝕜 E).trans has_basis_self\n#align locally_convex_space_iff_exists_convex_subset_zero locally_convex_space_iff_exists_convex_subset_zero\n\n",
 "locally_convex_space_iff_exists_convex_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem locally_convex_space_iff_exists_convex_subset :\n    locally_convex_space 𝕜 E ↔ ∀ x : E, ∀ U ∈ (nhds) x, ∃ S ∈ (nhds) x, convex 𝕜 S ∧ S ⊆ U :=\n  (locally_convex_space_iff 𝕜 E).trans (forall_congr' fun x => has_basis_self)\n#align locally_convex_space_iff_exists_convex_subset locally_convex_space_iff_exists_convex_subset\n\n",
 "locally_convex_space_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-\nCopyright (c) 2022 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anatole Dedecker\n-/\ntheorem locally_convex_space_iff :\n    locally_convex_space 𝕜 E ↔ ∀ x : E, ((nhds) x).has_basis (fun s : set E => s ∈ (nhds) x ∧ convex 𝕜 s) id :=\n  ⟨@locally_convex_space.convex_basis _ _ _ _ _ _, locally_convex_space.mk⟩\n#align locally_convex_space_iff locally_convex_space_iff\n\n",
 "locally_convex_space_Inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem locally_convex_space_Inf {ts : set (topological_space E)} (h : ∀ t ∈ ts, @locally_convex_space 𝕜 E _ _ _ t) :\n    @locally_convex_space 𝕜 E _ _ _ (infₛ ts) :=\n  by\n  letI : topological_space E := Inf ts\n  refine'\n    locally_convex_space.of_bases 𝕜 E\n      (fun x => fun If : set ts × (ts → set E) =>\n        «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (If.2 i))\n      (fun x => fun If : set ts × (ts → set E) => If.1.finite ∧ ∀ i ∈ If.1, If.2 i ∈ @nhds _ (↑i) x ∧ convex 𝕜 (If.2 i))\n      (fun x => _) fun x If hif => convex_Inter fun i => convex_Inter fun hi => (hif.2 i hi).2\n  rw [nhds_Inf, ← infᵢ_subtype'']\n  exact has_basis_infi' fun i : ts => (@locally_convex_space_iff 𝕜 E _ _ _ ↑i).mp (h (↑i) i.2) x\n#align locally_convex_space_Inf locally_convex_space_Inf\n\n",
 "exists_open_convexes":
 "/-- In a locally convex space, if `s`, `t` are disjoint convex sets, `s` is compact and `t` is\nclosed, then we can find open disjoint convex sets containing them. -/\ntheorem disjoint.exists_open_convexes [locally_convex_space 𝕜 E] {s t : set E} (disj : Disjoint s t) (hs₁ : convex 𝕜 s)\n    (hs₂ : is_compact s) (ht₁ : convex 𝕜 t) (ht₂ : is_closed t) :\n    ∃ u v, is_open u ∧ is_open v ∧ convex 𝕜 u ∧ convex 𝕜 v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint u v :=\n  by\n  letI : uniform_space E := topological_add_group.to_uniform_space E\n  haveI : uniform_add_group E := topological_add_comm_group_is_uniform\n  have := (locally_convex_space.convex_open_basis_zero 𝕜 E).comap fun x : E × E => x.2 - x.1\n  rw [← uniformity_eq_comap_nhds_zero] at this\n  rcases disj.exists_uniform_thickening_of_basis this hs₂ ht₂ with ⟨V, ⟨hV0, hVopen, hVconvex⟩, hV⟩\n  refine'\n    ⟨s + V, t + V, hVopen.add_left, hVopen.add_left, hs₁.add hVconvex, ht₁.add hVconvex, subset_add_left _ hV0,\n      subset_add_left _ hV0, _⟩\n  simp_rw [← Union_add_left_image, image_add_left]\n  simp_rw [uniform_space.ball, ← preimage_comp, sub_eq_neg_add] at hV\n  exact hV\n#align disjoint.exists_open_convexes disjoint.exists_open_convexes\n\n",
 "convex_open_basis_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n-- see Note [lower instance priority]\ntheorem locally_convex_space.convex_open_basis_zero [locally_convex_space 𝕜 E] :\n    ((nhds) 0 : filter E).has_basis (fun s => (0 : E) ∈ s ∧ is_open s ∧ convex 𝕜 s) id :=\n  (locally_convex_space.convex_basis_zero 𝕜 E).to_has_basis\n    (fun s hs => ⟨interior s, ⟨mem_interior_iff_mem_nhds.mpr hs.1, is_open_interior, hs.2.interior⟩, interior_subset⟩)\n    fun s hs => ⟨s, ⟨hs.2.1.mem_nhds hs.1, hs.2.2⟩, subset_rfl⟩\n#align locally_convex_space.convex_open_basis_zero locally_convex_space.convex_open_basis_zero\n\n",
 "convex_basis_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem locally_convex_space.convex_basis_zero [locally_convex_space 𝕜 E] :\n    ((nhds) 0 : filter E).has_basis (fun s => s ∈ ((nhds) 0 : filter E) ∧ convex 𝕜 s) id :=\n  locally_convex_space.convex_basis 0\n#align locally_convex_space.convex_basis_zero locally_convex_space.convex_basis_zero\n\n"}