{"extension_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.extension_coe /-\ntheorem AddMonoidHom.extension_coe [CompleteSpace β] [SeparatedSpace β] (f : «expr →+ » α β) (hf : Continuous f)\n    (a : α) : f.extension hf a = f a :=\n  extension_coe (uniformContinuous_addMonoidHom_of_continuous hf) a\n#align add_monoid_hom.extension_coe AddMonoidHom.extension_coe\n-/\n\n",
 "dense_inducing_to_compl":
 "theorem dense_inducing_to_compl : DenseInducing (toCompl : α → Completion α) :=\n  denseInducing_coe\n#align dense_inducing_to_compl dense_inducing_to_compl\n\n",
 "continuous_to_compl":
 "theorem continuous_to_compl : Continuous (toCompl : α → Completion α) :=\n  continuous_coe α\n#align continuous_to_compl continuous_to_compl\n\n",
 "continuous_extension":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.continuous_extension /-\n@[continuity]\ntheorem AddMonoidHom.continuous_extension [CompleteSpace β] [SeparatedSpace β] (f : «expr →+ » α β)\n    (hf : Continuous f) : Continuous (f.extension hf) :=\n  continuous_extension\n#align add_monoid_hom.continuous_extension AddMonoidHom.continuous_extension\n-/\n\n",
 "continuous_completion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.continuous_completion /-\n@[continuity]\ntheorem AddMonoidHom.continuous_completion (f : «expr →+ » α β) (hf : Continuous f) :\n    Continuous (f.completion hf : Completion α → Completion β) :=\n  ContinuousMap\n#align add_monoid_hom.continuous_completion AddMonoidHom.continuous_completion\n-/\n\n",
 "completion_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.completion_zero /-\ntheorem AddMonoidHom.completion_zero : (0 : «expr →+ » α β).completion continuous_const = 0 :=\n  by\n  ext x\n  apply completion.induction_on x\n  · apply isClosed_eq ((0 : «expr →+ » α β).continuous_completion continuous_const)\n    simp [continuous_const]\n  · intro a\n    simp [(0 : «expr →+ » α β).completion_coe continuous_const, coe_zero]\n#align add_monoid_hom.completion_zero AddMonoidHom.completion_zero\n-/\n\n",
 "completion_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.completion_coe /-\ntheorem AddMonoidHom.completion_coe (f : «expr →+ » α β) (hf : Continuous f) (a : α) : f.completion hf a = f a :=\n  map_coe (uniformContinuous_addMonoidHom_of_continuous hf) a\n#align add_monoid_hom.completion_coe AddMonoidHom.completion_coe\n-/\n\n",
 "completion_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.completion_add /-\ntheorem AddMonoidHom.completion_add {γ : Type _} [AddCommGroup γ] [UniformSpace γ] [UniformAddGroup γ]\n    (f g : «expr →+ » α γ) (hf : Continuous f) (hg : Continuous g) :\n    (f + g).completion (hf.add hg) = f.completion hf + g.completion hg :=\n  by\n  have hfg := hf.add hg\n  ext x\n  apply completion.induction_on x\n  ·\n    exact\n      isClosed_eq ((f + g).continuous_completion hfg) ((f.continuous_completion hf).add (g.continuous_completion hg))\n  · intro a\n    simp [(f + g).completion_coe hfg, coe_add, f.completion_coe hf, g.completion_coe hg]\n#align add_monoid_hom.completion_add AddMonoidHom.completion_add\n-/\n\n",
 "coe_zero":
 "#print UniformSpace.Completion.coe_zero /-\n/-\nCopyright (c) 2018 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Johannes Hölzl\n-/\n@[norm_cast]\ntheorem UniformSpace.Completion.coe_zero [Zero α] : ((0 : α) : Completion α) = 0 :=\n  rfl\n#align uniform_space.completion.coe_zero UniformSpace.Completion.coe_zero\n-/\n\n",
 "coe_sub":
 "@[norm_cast]\ntheorem coe_sub (a b : α) : ((a - b : α) : Completion α) = a - b :=\n  (map₂_coe_coe a b has_sub.sub uniformContinuous_sub).symm\n#align coe_sub coe_sub\n\n",
 "coe_neg":
 "@[norm_cast]\ntheorem coe_neg (a : α) : ((-a : α) : Completion α) = -a :=\n  (map_coe uniformContinuous_neg a).symm\n#align coe_neg coe_neg\n\n",
 "coe_add":
 "@[norm_cast]\ntheorem coe_add (a b : α) : ((a + b : α) : Completion α) = a + b :=\n  (map₂_coe_coe a b (· + ·) uniformContinuous_add).symm\n#align coe_add coe_add\n\n"}