{"mem_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp, to_additive]\ntheorem mem_top (x : G) : x ∈ («expr⊤» : OpenSubgroup G) :=\n  trivial\n#align mem_top mem_top\n\n",
 "mem_nhds_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n@[to_additive]\ntheorem mem_nhds_one : (U : Set G) ∈ (nhds) (1 : G) :=\n  IsOpen.mem_nhds U.is_open U.one_mem\n#align mem_nhds_one mem_nhds_one\n\n",
 "mem_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp, to_additive]\ntheorem mem_inf {x} : x ∈ «expr ⊓ » U V ↔ x ∈ U ∧ x ∈ V :=\n  iff.rfl\n#align mem_inf mem_inf\n\n",
 "mem_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp, to_additive]\ntheorem mem_comap {H : OpenSubgroup N} {f : «expr →* » G N} {hf : Continuous f} {x : G} : x ∈ H.comap f hf ↔ f x ∈ H :=\n  iff.rfl\n#align mem_comap mem_comap\n\n",
 "mem_coe_subgroup":
 "@[simp, norm_cast, to_additive]\ntheorem mem_coe_subgroup : g ∈ (U : Subgroup G) ↔ g ∈ U :=\n  iff.rfl\n#align mem_coe_subgroup mem_coe_subgroup\n\n",
 "mem_coe_opens":
 "@[simp, norm_cast, to_additive]\ntheorem mem_coe_opens : g ∈ (U : Opens G) ↔ g ∈ U :=\n  iff.rfl\n#align mem_coe_opens mem_coe_opens\n\n",
 "is_open_of_open_subideal":
 "theorem is_open_of_open_subideal {U I : Ideal R} (h : U ≤ I) (hU : IsOpen (U : Set R)) : IsOpen (I : Set R) :=\n  Submodule.isOpen_mono h hU\n#align is_open_of_open_subideal is_open_of_open_subideal\n\n",
 "is_open_of_open_subgroup":
 "@[to_additive]\ntheorem is_open_of_open_subgroup {U : OpenSubgroup G} (h : ↑U ≤ H) : IsOpen (H : Set G) :=\n  isOpen_mono h U.is_open\n#align is_open_of_open_subgroup is_open_of_open_subgroup\n\n",
 "is_open_of_one_mem_interior":
 "/-- If a subgroup of a topological group has `1` in its interior, then it is open. -/\n@[to_additive \"If a subgroup of an additive topological group has `0` in its interior, then it is\\nopen.\"]\ntheorem is_open_of_one_mem_interior (h_1_int : (1 : G) ∈ interior (H : Set G)) : IsOpen (H : Set G) :=\n  isOpen_of_mem_nhds H <| mem_interior_iff_mem_nhds.1 h_1_int\n#align is_open_of_one_mem_interior is_open_of_one_mem_interior\n\n",
 "is_open_of_mem_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n@[to_additive]\ntheorem is_open_of_mem_nhds {g : G} (hg : (H : Set G) ∈ (nhds) g) : IsOpen (H : Set G) :=\n  by\n  refine' isOpen_iff_mem_nhds.2 fun x hx => _\n  have hg' : g ∈ H := SetLike.mem_coe.1 (mem_of_mem_nhds hg)\n  have : Filter.Tendsto (fun y => y * (x⁻¹ * g)) ((nhds) x) ((nhds) g) :=\n    (continuous_id.mul continuous_const).tendsto' _ _ (mul_inv_cancel_left _ _)\n  simpa only [SetLike.mem_coe, Filter.mem_map', H.mul_mem_cancel_right (H.mul_mem (H.inv_mem hx) hg')] using this hg\n#align is_open_of_mem_nhds is_open_of_mem_nhds\n\n",
 "is_open_mono":
 "theorem is_open_mono {U P : Submodule R M} (h : U ≤ P) (hU : IsOpen (U : Set M)) : IsOpen (P : Set M) :=\n  @AddSubgroup.isOpen_mono M _ _ _ U.to_add_subgroup P.to_add_subgroup h hU\n#align is_open_mono is_open_mono\n\n",
 "ext":
 "@[ext, to_additive]\ntheorem ext (h : ∀ x, x ∈ U ↔ x ∈ V) : U = V :=\n  SetLike.ext h\n#align ext ext\n\n",
 "comap_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[to_additive]\ntheorem comap_comap {P : Type _} [Group P] [TopologicalSpace P] (K : OpenSubgroup P) (f₂ : «expr →* » N P)\n    (hf₂ : Continuous f₂) (f₁ : «expr →* » G N) (hf₁ : Continuous f₁) :\n    (K.comap f₂ hf₂).comap f₁ hf₁ = K.comap (f₂.comp f₁) (hf₂.comp hf₁) :=\n  rfl\n#align comap_comap comap_comap\n\n",
 "coe_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp, norm_cast, to_additive]\ntheorem coe_top : ((«expr⊤» : OpenSubgroup G) : Set G) = Set.univ :=\n  rfl\n#align coe_top coe_top\n\n",
 "coe_subgroup_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp, norm_cast, to_additive]\ntheorem coe_subgroup_top : ((«expr⊤» : OpenSubgroup G) : Subgroup G) = «expr⊤» :=\n  rfl\n#align coe_subgroup_top coe_subgroup_top\n\n",
 "coe_subgroup_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp, norm_cast, to_additive]\ntheorem coe_subgroup_sup (U V : OpenSubgroup G) : (↑(«expr ⊔ » U V) : Subgroup G) = «expr ⊔ » ↑U ↑V :=\n  rfl\n#align coe_subgroup_sup coe_subgroup_sup\n\n",
 "coe_subgroup_prod":
 "@[simp, norm_cast, to_additive]\ntheorem coe_subgroup_prod (U : OpenSubgroup G) (V : OpenSubgroup H) :\n    (U.prod V : Subgroup (G × H)) = (U : Subgroup G).prod V :=\n  rfl\n#align coe_subgroup_prod coe_subgroup_prod\n\n",
 "coe_subgroup_le":
 "@[simp, norm_cast, to_additive]\ntheorem coe_subgroup_le : (U : Subgroup G) ≤ (V : Subgroup G) ↔ U ≤ V :=\n  iff.rfl\n#align coe_subgroup_le coe_subgroup_le\n\n",
 "coe_subgroup_injective":
 "/-\nCopyright (c) 2019 Johan Commelin All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[to_additive]\ntheorem coe_subgroup_injective : injective (coe : OpenSubgroup G → Subgroup G)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n#align coe_subgroup_injective coe_subgroup_injective\n\n",
 "coe_subgroup_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp, norm_cast, to_additive]\ntheorem coe_subgroup_inf : (↑(«expr ⊓ » U V) : Subgroup G) = «expr ⊓ » ↑U ↑V :=\n  rfl\n#align coe_subgroup_inf coe_subgroup_inf\n\n",
 "coe_subgroup_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp, norm_cast, to_additive]\ntheorem coe_subgroup_comap (H : OpenSubgroup N) (f : «expr →* » G N) (hf : Continuous f) :\n    (H.comap f hf : Subgroup G) = (H : Subgroup N).comap f :=\n  rfl\n#align coe_subgroup_comap coe_subgroup_comap\n\n",
 "coe_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n@[simp, norm_cast, to_additive]\ntheorem coe_prod (U : OpenSubgroup G) (V : OpenSubgroup H) : (U.prod V : Set (G × H)) = lower_set.prod U V :=\n  rfl\n#align coe_prod coe_prod\n\n",
 "coe_opens_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp, norm_cast, to_additive]\ntheorem coe_opens_top : ((«expr⊤» : OpenSubgroup G) : Opens G) = «expr⊤» :=\n  rfl\n#align coe_opens_top coe_opens_top\n\n",
 "coe_opens_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp, norm_cast, to_additive]\ntheorem coe_opens_inf : (↑(«expr ⊓ » U V) : Opens G) = «expr ⊓ » ↑U ↑V :=\n  rfl\n#align coe_opens_inf coe_opens_inf\n\n",
 "coe_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp, norm_cast, to_additive]\ntheorem coe_inf : (↑(«expr ⊓ » U V) : Set G) = (U : Set G) ∩ V :=\n  rfl\n#align coe_inf coe_inf\n\n",
 "coe_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp, norm_cast, to_additive]\ntheorem coe_comap (H : OpenSubgroup N) (f : «expr →* » G N) (hf : Continuous f) :\n    (H.comap f hf : Set G) = «expr ⁻¹' » f H :=\n  rfl\n#align coe_comap coe_comap\n\n",
 "coe_coe_subgroup":
 "@[simp, norm_cast, to_additive]\ntheorem coe_coe_subgroup : ((U : Subgroup G) : Set G) = U :=\n  rfl\n#align coe_coe_subgroup coe_coe_subgroup\n\n",
 "coe_coe_opens":
 "@[simp, norm_cast, to_additive]\ntheorem coe_coe_opens : ((U : Opens G) : Set G) = U :=\n  rfl\n#align coe_coe_opens coe_coe_opens\n\n",
 "IsOpen":
 "#print IsOpen /-\n@[to_additive]\nprotected theorem IsOpen : IsOpen (U : Set G) :=\n  U.is_open'\n#align is_open IsOpen\n-/\n\n",
 "IsClosed":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print IsClosed /-\n@[to_additive]\ntheorem IsClosed [ContinuousMul G] (U : OpenSubgroup G) : IsClosed (U : Set G) :=\n  by\n  apply isOpen_compl_iff.1\n  refine' isOpen_iff_forall_mem_open.2 fun x hx => ⟨«expr ⁻¹' » (fun y => y * x⁻¹) U, _, _, _⟩\n  · refine' fun u hux hu => hx _\n    simp only [Set.mem_preimage, SetLike.mem_coe] at hux hu⊢\n    convert U.mul_mem (U.inv_mem hux) hu\n    simp\n  · exact U.is_open.preimage (continuous_mul_right _)\n  · simp [one_mem]\n#align is_closed IsClosed\n-/\n\n",
 "IsClopen":
 "#print IsClopen /-\n@[to_additive]\ntheorem IsClopen [ContinuousMul G] (U : OpenSubgroup G) : IsClopen (U : Set G) :=\n  ⟨U.is_open, U.is_closed⟩\n#align is_clopen IsClopen\n-/\n\n"}