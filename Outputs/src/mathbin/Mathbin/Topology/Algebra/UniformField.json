{"mul_hat_inv_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\ntheorem mul_hat_inv_cancel {x : (exprhat) K} (x_ne : x ≠ 0) : x * hatInv x = 1 :=\n  by\n  haveI : T1Space ((exprhat) K) := T2Space.t1Space\n  let f := fun x : (exprhat) K => x * hat_inv x\n  let c := (coe : K → (exprhat) K)\n  change f x = 1\n  have cont : ContinuousAt f x :=\n    by\n    letI : TopologicalSpace ((exprhat) K × (exprhat) K) := prod.topological_space\n    have : ContinuousAt (fun y : (exprhat) K => ((y, hat_inv y) : (exprhat) K × (exprhat) K)) x :=\n      continuous_id.continuous_at.prod (continuous_hat_inv x_ne)\n    exact (_root_.continuous_mul.continuous_at.comp this : _)\n  have clo : x ∈ closure («expr '' » c («expr ᶜ» {0})) :=\n    by\n    have := dense_inducing_coe.dense x\n    rw [← image_univ, show (univ : Set K) = {0} ∪ «expr ᶜ» {0} from (union_compl_self _).symm, image_union] at this\n    apply mem_closure_of_mem_closure_union this\n    rw [image_singleton]\n    exact compl_singleton_mem_nhds x_ne\n  have fxclo : f x ∈ closure («expr '' » f («expr '' » c («expr ᶜ» {0}))) := mem_closure_image cont clo\n  have : «expr '' » f («expr '' » c («expr ᶜ» {0})) ⊆ {1} :=\n    by\n    rw [image_image]\n    rintro _ ⟨z, z_ne, rfl⟩\n    rw [mem_singleton_iff]\n    rw [mem_compl_singleton_iff] at z_ne\n    dsimp [c, f]\n    rw [hat_inv_extends z_ne]\n    norm_cast\n    rw [mul_inv_cancel z_ne]\n  replace fxclo := closure_mono this fxclo\n  rwa [closure_singleton, mem_singleton_iff] at fxclo\n#align mul_hat_inv_cancel mul_hat_inv_cancel\n\n",
 "hat_inv_extends":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/-\nThe value of `hat_inv` at zero is not really specified, although it's probably zero.\nHere we explicitly enforce the `inv_zero` axiom.\n-/\ntheorem hat_inv_extends {x : K} (h : x ≠ 0) : hatInv (x : (exprhat) K) = coe (x⁻¹ : K) :=\n  denseInducing_coe.extend_eq_at ((continuous_coe K).continuous_at.comp (continuous_at_inv₀ h))\n#align hat_inv_extends hat_inv_extends\n\n",
 "continuous_hat_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/-\nCopyright (c) 2019 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot\n-/\ntheorem continuous_hat_inv [CompletableTopField K] {x : (exprhat) K} (h : x ≠ 0) : ContinuousAt hatInv x :=\n  by\n  haveI : T3Space ((exprhat) K) := completion.t3_space K\n  refine' dense_inducing_coe.continuous_at_extend _\n  apply mem_of_superset (compl_singleton_mem_nhds h)\n  intro y y_ne\n  rw [mem_compl_singleton_iff] at y_ne\n  apply complete_space.complete\n  rw [← Filter.map_map]\n  apply Cauchy.map _ (completion.uniform_continuous_coe K)\n  apply completable_top_field.nice\n  · haveI := dense_inducing_coe.comap_nhds_ne_bot y\n    apply cauchy_nhds.comap\n    · rw [completion.comap_coe_eq_uniformity]\n      exact le_rfl\n  · have eq_bot : «expr ⊓ » ((nhds) (0 : (exprhat) K)) ((nhds) y) = «expr⊥» :=\n      by\n      by_contra h\n      exact y_ne (eq_of_nhds_neBot <| ne_bot_iff.mpr h).symm\n    erw [dense_inducing_coe.nhds_eq_comap (0 : K), ← Filter.comap_inf, eq_bot]\n    exact comap_bot\n#align continuous_hat_inv continuous_hat_inv\n\n",
 "coe_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhat -/\n@[norm_cast]\ntheorem coe_inv (x : K) : (x : (exprhat) K)⁻¹ = ((x⁻¹ : K) : (exprhat) K) :=\n  by\n  by_cases h : x = 0\n  · rw [h, inv_zero]\n    dsimp [has_inv.inv]\n    norm_cast\n    simp\n  · conv_lhs => dsimp [has_inv.inv]\n    rw [if_neg]\n    · exact hat_inv_extends h\n    · exact fun H => h (dense_embedding_coe.inj H)\n#align coe_inv coe_inv\n\n"}