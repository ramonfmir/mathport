{"line_map_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/-- The line map is continuous. -/\n@[continuity]\ntheorem line_map_continuous [topological_space R] [has_continuous_smul R F] {p v : F} :\n    continuous («expr⇑ » (line_map p v : «expr →ᵃ[ ] » R R F)) :=\n  continuous_iff.mpr <| (continuous_id.smul continuous_const).add <| @continuous_const _ _ _ _ (0 : F)\n#align line_map_continuous line_map_continuous\n\n",
 "homothety_is_open_map":
 "theorem homothety_is_open_map (x : F) (t : R) (ht : t ≠ 0) : is_open_map <| homothety x t := by\n  apply is_open_map.of_inverse (homothety_continuous x t⁻¹) <;> intro e <;>\n    simp [← affine_map.comp_apply, ← homothety_mul, ht]\n#align homothety_is_open_map homothety_is_open_map\n\n",
 "homothety_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[continuity]\ntheorem homothety_continuous (x : F) (t : R) : continuous <| homothety x t :=\n  by\n  suffices «expr⇑ » (homothety x t) = fun y => «expr • » t (y - x) + x\n    by\n    rw [this]\n    continuity\n  ext y\n  simp [homothety_apply]\n#align homothety_continuous homothety_continuous\n\n",
 "continuous_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵃ[ ] » -/\n/-\nCopyright (c) 2020 Frédéric Dupuis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Frédéric Dupuis\n-/\n/-- An affine map is continuous iff its underlying linear map is continuous. See also\n`affine_map.continuous_linear_iff`. -/\ntheorem continuous_iff {f : «expr →ᵃ[ ] » E R F} : continuous f ↔ continuous f.linear :=\n  by\n  constructor\n  · intro hc\n    rw [decomp' f]\n    have := hc.sub continuous_const\n    exact this\n  · intro hc\n    rw [decomp f]\n    have := hc.add continuous_const\n    exact this\n#align continuous_iff continuous_iff\n\n"}