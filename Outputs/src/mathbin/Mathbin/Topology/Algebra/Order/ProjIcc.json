{"quotientMap_projIcc":
 "#print quotientMap_projIcc /-\ntheorem quotientMap_projIcc : QuotientMap (projIcc a b h) :=\n  quotientMap_iff.2\n    ⟨projIcc_surjective h, fun s =>\n      ⟨fun hs => hs.preimage continuous_projIcc, fun hs =>\n        ⟨_, hs, by\n          ext\n          simp⟩⟩⟩\n#align quotient_map_proj_Icc quotientMap_projIcc\n-/\n\n",
 "continuous_projIcc":
 "#print continuous_projIcc /-\n@[continuity]\ntheorem continuous_projIcc : Continuous (projIcc a b h) :=\n  (continuous_const.max <| continuous_const.min continuous_id).subtype_mk _\n#align continuous_proj_Icc continuous_projIcc\n-/\n\n",
 "continuous_IccExtend_iff":
 "#print continuous_IccExtend_iff /-\n@[simp]\ntheorem continuous_IccExtend_iff {f : Icc a b → β} : Continuous (IccExtend h f) ↔ Continuous f :=\n  quotientMap_projIcc.continuous_iff.symm\n#align continuous_Icc_extend_iff continuous_IccExtend_iff\n-/\n\n",
 "Icc_extend'":
 "#print Continuous.Icc_extend' /-\n/-- A useful special case of `continuous.Icc_extend`. -/\n@[continuity]\ntheorem Continuous.Icc_extend' {f : Icc a b → β} (hf : Continuous f) : Continuous (IccExtend h f) :=\n  hf.comp continuous_projIcc\n#align continuous.Icc_extend' Continuous.Icc_extend'\n-/\n\n",
 "IccExtend'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.IccExtend' /-\n/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov, Patrick Massot\n-/\ntheorem Filter.Tendsto.IccExtend' (f : γ → Icc a b → β) {z : γ} {l : Filter α} {l' : Filter β}\n    (hf : Tendsto (uncurry f) (filter.prod ((nhds) z) (l.map (projIcc a b h))) l') :\n    Tendsto (uncurry (IccExtend h ∘ f)) (filter.prod ((nhds) z) l) l' :=\n  show Tendsto (uncurry f ∘ prod.map id (projIcc a b h)) (filter.prod ((nhds) z) l) l' from\n    hf.comp <| tendsto_id.prod_map tendsto_map\n#align filter.tendsto.Icc_extend Filter.Tendsto.IccExtend'\n-/\n\n",
 "IccExtend":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n#print ContinuousAt.IccExtend /-\ntheorem ContinuousAt.IccExtend {x : γ} (f : γ → Icc a b → β) {g : γ → α}\n    (hf : ContinuousAt (uncurry f) (x, projIcc a b h (g x))) (hg : ContinuousAt g x) :\n    ContinuousAt (fun a => IccExtend h (f a) (g a)) x :=\n  show ContinuousAt (uncurry f ∘ fun x => (x, projIcc a b h (g x))) x from\n    ContinuousAt.comp hf <| continuousAt_id.prod <| continuous_projIcc.continuous_at.comp hg\n#align continuous_at.Icc_extend ContinuousAt.IccExtend\n-/\n\n"}