{"tendsto_fract_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_fract_right' /-\ntheorem tendsto_fract_right' [OrderClosedTopology α] [TopologicalAddGroup α] (n : ℤ) :\n    Tendsto (fract : α → α) (nhds_within.ge n) ((nhds) 0) := by\n  convert(tendsto_nhdsWithin_of_tendsto_nhds tendsto_id).sub (tendsto_floor_right' n) <;> [exact (sub_self _).symm,\n    infer_instance, infer_instance]\n#align tendsto_fract_right' tendsto_fract_right'\n-/\n\n",
 "tendsto_fract_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n#print tendsto_fract_right /-\ntheorem tendsto_fract_right [OrderClosedTopology α] [TopologicalAddGroup α] (n : ℤ) :\n    Tendsto (fract : α → α) (nhds_within.ge n) (nhds_within.ge 0) :=\n  tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ (tendsto_fract_right' _) (eventually_of_forall fract_nonneg)\n#align tendsto_fract_right tendsto_fract_right\n-/\n\n",
 "tendsto_fract_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_fract_left' /-\ntheorem tendsto_fract_left' [OrderClosedTopology α] [TopologicalAddGroup α] (n : ℤ) :\n    Tendsto (fract : α → α) (nhds_within.lt n) ((nhds) 1) := by\n  convert(tendsto_nhdsWithin_of_tendsto_nhds tendsto_id).sub (tendsto_floor_left' n) <;>\n    [·\n      norm_cast\n      ring, infer_instance, infer_instance]\n#align tendsto_fract_left' tendsto_fract_left'\n-/\n\n",
 "tendsto_fract_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n#print tendsto_fract_left /-\ntheorem tendsto_fract_left [OrderClosedTopology α] [TopologicalAddGroup α] (n : ℤ) :\n    Tendsto (fract : α → α) (nhds_within.lt n) (nhds_within.lt 1) :=\n  tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ (tendsto_fract_left' _) (eventually_of_forall fract_lt_one)\n#align tendsto_fract_left tendsto_fract_left\n-/\n\n",
 "tendsto_floor_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_floor_right' /-\ntheorem tendsto_floor_right' [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => floor x : α → α) (nhds_within.ge n) ((nhds) n) :=\n  by\n  rw [← nhdsWithin_Ico_eq_nhdsWithin_Ici (lt_add_one (n : α))]\n  simpa only [floor_int_cast] using (continuousOn_floor n _ (left_mem_Ico.mpr <| lt_add_one (_ : α))).tendsto\n#align tendsto_floor_right' tendsto_floor_right'\n-/\n\n",
 "tendsto_floor_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n#print tendsto_floor_right /-\ntheorem tendsto_floor_right [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => floor x : α → α) (nhds_within.ge n) (nhds_within.ge n) :=\n  tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ (tendsto_floor_right' _)\n    (by\n      refine' eventually_nhdsWithin_of_forall fun x (hx : (n : α) ≤ x) => _\n      change _ ≤ _\n      norm_cast\n      convert← floor_mono hx\n      rw [floor_eq_iff]\n      exact ⟨le_rfl, lt_add_one _⟩)\n#align tendsto_floor_right tendsto_floor_right\n-/\n\n",
 "tendsto_floor_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_floor_left' /-\ntheorem tendsto_floor_left' [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => floor x : α → α) (nhds_within.lt n) ((nhds) (n - 1)) :=\n  by\n  rw [← nhdsWithin_univ]\n  exact tendsto_nhdsWithin_mono_right (subset_univ _) (tendsto_floor_left n)\n#align tendsto_floor_left' tendsto_floor_left'\n-/\n\n",
 "tendsto_floor_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.lt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.le -/\n#print tendsto_floor_left /-\ntheorem tendsto_floor_left [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => floor x : α → α) (nhds_within.lt n) (nhds_within.le (n - 1)) :=\n  by\n  rw [← nhdsWithin_Ico_eq_nhdsWithin_Iio (sub_one_lt (n : α))]\n  convert(tendsto_nhdsWithin_congr fun x hx => (floor_eq_on_Ico' (n - 1) x hx).symm)\n        (tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ tendsto_const_nhds\n          (eventually_of_forall fun _ => mem_Iic.mpr <| le_rfl)) <;>\n    first |norm_cast|infer_instance\n  ring\n#align tendsto_floor_left tendsto_floor_left\n-/\n\n",
 "tendsto_floor_atTop":
 "#print tendsto_floor_atTop /-\n/-\nCopyright (c) 2020 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anatole Dedecker\n-/\ntheorem tendsto_floor_atTop : Tendsto (floor : α → ℤ) atTop atTop :=\n  floor_mono.tendsto_at_top_at_top fun b =>\n    ⟨(b + 1 : ℤ), by\n      rw [floor_int_cast]\n      exact (lt_add_one _).le⟩\n#align tendsto_floor_at_top tendsto_floor_atTop\n-/\n\n",
 "tendsto_floor_atBot":
 "#print tendsto_floor_atBot /-\ntheorem tendsto_floor_atBot : Tendsto (floor : α → ℤ) atBot atBot :=\n  floor_mono.tendsto_at_bot_at_bot fun b => ⟨b, (floor_intCast _).le⟩\n#align tendsto_floor_at_bot tendsto_floor_atBot\n-/\n\n",
 "tendsto_ceil_right'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_ceil_right' /-\ntheorem tendsto_ceil_right' [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => ceil x : α → α) (nhds_within.gt n) ((nhds) (n + 1)) :=\n  by\n  rw [← nhdsWithin_univ]\n  exact tendsto_nhdsWithin_mono_right (subset_univ _) (tendsto_ceil_right n)\n#align tendsto_ceil_right' tendsto_ceil_right'\n-/\n\n",
 "tendsto_ceil_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ge -/\n#print tendsto_ceil_right /-\ntheorem tendsto_ceil_right [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => ceil x : α → α) (nhds_within.gt n) (nhds_within.ge (n + 1)) :=\n  by\n  rw [← nhdsWithin_Ioc_eq_nhdsWithin_Ioi (lt_add_one (n : α))]\n  convert(tendsto_nhdsWithin_congr fun x hx => (ceil_eq_on_Ioc' (n + 1) x hx).symm)\n        (tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ tendsto_const_nhds\n          (eventually_of_forall fun _ => mem_Ici.mpr <| le_rfl)) <;>\n    first |norm_cast|infer_instance\n  ring\n#align tendsto_ceil_right tendsto_ceil_right\n-/\n\n",
 "tendsto_ceil_left'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.le -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_ceil_left' /-\ntheorem tendsto_ceil_left' [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => ceil x : α → α) (nhds_within.le n) ((nhds) n) :=\n  by\n  rw [← nhdsWithin_Ioc_eq_nhdsWithin_Iic (sub_one_lt (n : α))]\n  simpa only [ceil_int_cast] using (continuousOn_ceil _ _ (right_mem_Ioc.mpr <| sub_one_lt (_ : α))).tendsto\n#align tendsto_ceil_left' tendsto_ceil_left'\n-/\n\n",
 "tendsto_ceil_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.le -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.le -/\n#print tendsto_ceil_left /-\ntheorem tendsto_ceil_left [OrderClosedTopology α] (n : ℤ) :\n    Tendsto (fun x => ceil x : α → α) (nhds_within.le n) (nhds_within.le n) :=\n  tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ (tendsto_ceil_left' _)\n    (by\n      refine' eventually_nhdsWithin_of_forall fun x (hx : x ≤ (n : α)) => _\n      change _ ≤ _\n      norm_cast\n      convert← ceil_mono hx\n      rw [ceil_eq_iff]\n      exact ⟨sub_one_lt _, le_rfl⟩)\n#align tendsto_ceil_left tendsto_ceil_left\n-/\n\n",
 "tendsto_ceil_atTop":
 "#print tendsto_ceil_atTop /-\ntheorem tendsto_ceil_atTop : Tendsto (ceil : α → ℤ) atTop atTop :=\n  ceil_mono.tendsto_at_top_at_top fun b => ⟨b, (ceil_intCast _).ge⟩\n#align tendsto_ceil_at_top tendsto_ceil_atTop\n-/\n\n",
 "tendsto_ceil_atBot":
 "#print tendsto_ceil_atBot /-\ntheorem tendsto_ceil_atBot : Tendsto (ceil : α → ℤ) atBot atBot :=\n  ceil_mono.tendsto_at_bot_at_bot fun b =>\n    ⟨(b - 1 : ℤ), by\n      rw [ceil_int_cast]\n      exact (sub_one_lt _).le⟩\n#align tendsto_ceil_at_bot tendsto_ceil_atBot\n-/\n\n",
 "continuousOn_fract":
 "#print continuousOn_fract /-\ntheorem continuousOn_fract [TopologicalAddGroup α] (n : ℤ) : ContinuousOn (fract : α → α) (Ico n (n + 1) : Set α) :=\n  continuousOn_id.sub (continuousOn_floor n)\n#align continuous_on_fract continuousOn_fract\n-/\n\n",
 "continuousOn_floor":
 "#print continuousOn_floor /-\ntheorem continuousOn_floor (n : ℤ) : ContinuousOn (fun x => floor x : α → α) (Ico n (n + 1) : Set α) :=\n  (continuousOn_congr <| floor_eq_on_Ico' n).mpr continuousOn_const\n#align continuous_on_floor continuousOn_floor\n-/\n\n",
 "continuousOn_ceil":
 "#print continuousOn_ceil /-\ntheorem continuousOn_ceil (n : ℤ) : ContinuousOn (fun x => ceil x : α → α) (Ioc (n - 1) n : Set α) :=\n  (continuousOn_congr <| ceil_eq_on_Ioc' n).mpr continuousOn_const\n#align continuous_on_ceil continuousOn_ceil\n-/\n\n",
 "comp_fract''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprI -/\n#print ContinuousOn.comp_fract'' /-\n/-- A special case of `continuous_on.comp_fract`. -/\ntheorem ContinuousOn.comp_fract'' {f : α → β} (h : ContinuousOn f (exprI)) (hf : f 0 = f 1) : Continuous (f ∘ fract) :=\n  ContinuousOn.comp_fract (h.comp continuousOn_snd fun x hx => (mem_prod.mp hx).2) continuous_id fun _ => hf\n#align continuous_on.comp_fract'' ContinuousOn.comp_fract''\n-/\n\n",
 "comp_fract'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprI -/\n#print ContinuousOn.comp_fract' /-\n/-- Do not use this, use `continuous_on.comp_fract` instead. -/\ntheorem ContinuousOn.comp_fract' {f : β → α → γ} (h : ContinuousOn (uncurry f) <| lower_set.prod univ (exprI))\n    (hf : ∀ s, f s 0 = f s 1) : Continuous fun st : β × α => f st.1 <| fract st.2 :=\n  by\n  change Continuous (uncurry f ∘ prod.map id fract)\n  rw [continuous_iff_continuousAt]\n  rintro ⟨s, t⟩\n  by_cases ht : t = floor t\n  · rw [ht]\n    rw [← continuousWithinAt_univ]\n    have : (univ : Set (β × α)) ⊆ lower_set.prod univ (Iio ↑(«expr⌊ ⌋» t)) ∪ lower_set.prod univ (Ici ↑(«expr⌊ ⌋» t)) :=\n      by\n      rintro p -\n      rw [← prod_union]\n      exact ⟨trivial, lt_or_le p.2 _⟩\n    refine' ContinuousWithinAt.mono _ this\n    refine' ContinuousWithinAt.union _ _\n    · simp only [ContinuousWithinAt, fract_int_cast, nhdsWithin_prod_eq, nhdsWithin_univ, id.def, comp_app, Prod.map_mk]\n      have : (uncurry f) (s, 0) = (uncurry f) (s, (1 : α)) := by simp [uncurry, hf]\n      rw [this]\n      refine' (h _ ⟨⟨⟩, by exact_mod_cast right_mem_Icc.2 (zero_le_one' α)⟩).tendsto.comp _\n      rw [nhdsWithin_prod_eq, nhdsWithin_univ]\n      rw [nhdsWithin_Icc_eq_nhdsWithin_Iic (zero_lt_one' α)]\n      exact tendsto_id.prod_map (tendsto_nhdsWithin_mono_right Iio_subset_Iic_self <| tendsto_fract_left _)\n    · simp only [ContinuousWithinAt, fract_int_cast, nhdsWithin_prod_eq, nhdsWithin_univ, id.def, comp_app, Prod.map_mk]\n      refine' (h _ ⟨⟨⟩, by exact_mod_cast left_mem_Icc.2 (zero_le_one' α)⟩).tendsto.comp _\n      rw [nhdsWithin_prod_eq, nhdsWithin_univ, nhdsWithin_Icc_eq_nhdsWithin_Ici (zero_lt_one' α)]\n      exact tendsto_id.prod_map (tendsto_fract_right _)\n  · have : t ∈ Ioo (floor t : α) ((floor t : α) + 1) := ⟨lt_of_le_of_ne (floor_le t) (ne.symm ht), lt_floor_add_one _⟩\n    apply (h ((prod.map _ fract) _) ⟨trivial, ⟨fract_nonneg _, (fract_lt_one _).le⟩⟩).tendsto.comp\n    simp only [nhds_prod_eq, nhdsWithin_prod_eq, nhdsWithin_univ, id.def, Prod.map_mk]\n    exact\n      continuous_at_id.tendsto.prod_map\n        (tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _\n          (((continuousOn_fract _ _ (Ioo_subset_Ico_self this)).mono Ioo_subset_Ico_self).continuous_at\n            (Ioo_mem_nhds this.1 this.2))\n          (eventually_of_forall fun x => ⟨fract_nonneg _, (fract_lt_one _).le⟩))\n#align continuous_on.comp_fract' ContinuousOn.comp_fract'\n-/\n\n",
 "comp_fract":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n#print ContinuousOn.comp_fract /-\ntheorem ContinuousOn.comp_fract {s : β → α} {f : β → α → γ}\n    (h : ContinuousOn (uncurry f) <| lower_set.prod univ (Icc 0 1)) (hs : Continuous s) (hf : ∀ s, f s 0 = f s 1) :\n    Continuous fun x : β => f x <| Int.fract (s x) :=\n  (h.comp_fract' hf).comp (continuous_id.prod_mk hs)\n#align continuous_on.comp_fract ContinuousOn.comp_fract\n-/\n\n"}