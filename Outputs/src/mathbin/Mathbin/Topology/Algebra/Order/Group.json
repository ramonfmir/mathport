{"tendsto_zero_iff_abs_tendsto_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_zero_iff_abs_tendsto_zero /-\ntheorem tendsto_zero_iff_abs_tendsto_zero (f : α → G) : Tendsto f l ((nhds) 0) ↔ Tendsto (abs ∘ f) l ((nhds) 0) :=\n  by\n  refine' ⟨fun h => (abs_zero : |(0 : G)| = 0) ▸ h.abs, fun h => _⟩\n  have : tendsto (fun a => -|f a|) l ((nhds) 0) := (neg_zero : -(0 : G) = 0) ▸ h.neg\n  exact tendsto_of_tendsto_of_tendsto_of_le_of_le this h (fun x => neg_abs_le_self <| f x) fun x => le_abs_self <| f x\n#align tendsto_zero_iff_abs_tendsto_zero tendsto_zero_iff_abs_tendsto_zero\n-/\n\n",
 "tendsto_abs_nhdsWithin_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n#print tendsto_abs_nhdsWithin_zero /-\ntheorem tendsto_abs_nhdsWithin_zero : Tendsto (abs : G → G) (nhds_within.ne 0) (nhds_within.gt 0) :=\n  (continuous_abs.tendsto' (0 : G) 0 abs_zero).inf <| tendsto_principal_principal.2 fun x => abs_pos.2\n#align tendsto_abs_nhds_within_zero tendsto_abs_nhdsWithin_zero\n-/\n\n",
 "continuous_abs":
 "#print continuous_abs /-\n/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n-- see Note [lower instance priority]\n-- If there exists `δ ∈ (0, ε)`, then we choose `δ`-nhd of `a` and `(ε-δ)`-nhd of `b`\n-- Otherwise `ε`-nhd of each point `a` is `{a}`\n@[continuity]\ntheorem continuous_abs : Continuous (abs : G → G) :=\n  continuous_id.max continuous_neg\n#align continuous_abs continuous_abs\n-/\n\n",
 "abs":
 "#print ContinuousOn.abs /-\nprotected theorem ContinuousOn.abs (h : ContinuousOn f s) : ContinuousOn (fun x => |f x|) s := fun x hx => (h x hx).abs\n#align continuous_on.abs ContinuousOn.abs\n-/\n\n"}