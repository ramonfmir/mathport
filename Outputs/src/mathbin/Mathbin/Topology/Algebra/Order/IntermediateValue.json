{"surjective'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/-- A continuous function which tendsto `at_bot` `at_top` and to `at_top` `at_bot` is surjective. -/\ntheorem continuous.surjective' {f : α → δ} (hf : continuous f) (h_top : tendsto f at_bot at_top)\n    (h_bot : tendsto f at_top at_bot) : function.surjective f :=\n  @continuous.surjective («expr ᵒᵈ» α) _ _ _ _ _ _ _ _ _ hf h_top h_bot\n#align continuous.surjective' continuous.surjective'\n\n",
 "surjective":
 "/-- A continuous function which tendsto `at_top` `at_top` and to `at_bot` `at_bot` is surjective. -/\ntheorem continuous.surjective {f : α → δ} (hf : continuous f) (h_top : tendsto f at_top at_top)\n    (h_bot : tendsto f at_bot at_bot) : function.surjective f := fun p =>\n  mem_range_of_exists_le_of_exists_ge hf (h_bot.eventually (eventually_le_at_bot p)).exists\n    (h_top.eventually (eventually_ge_at_top p)).exists\n#align continuous.surjective continuous.surjective\n\n",
 "surj_on_uIcc":
 "/-- **Intermediate value theorem**: if `f` is continuous on an order-connected set `s` and `a`,\n`b` are two points of this set, then `f` sends `s` to a superset of `[f x, f y]`. -/\ntheorem continuous_on.surj_on_uIcc {s : set α} [hs : OrdConnected s] {f : α → δ} (hf : continuous_on f s) {a b : α}\n    (ha : a ∈ s) (hb : b ∈ s) : SurjOn f s (uIcc (f a) (f b)) := by\n  cases' le_total (f a) (f b) with hab hab <;> simp [hf.surj_on_Icc, *]\n#align continuous_on.surj_on_uIcc continuous_on.surj_on_uIcc\n\n",
 "surj_on_of_tendsto'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/-- If a function `f : α → β` is continuous on a nonempty interval `s`, its restriction to `s`\ntends to `at_top : filter β` along `at_bot : filter ↥s` and tends to `at_bot : filter β` along\n`at_top : filter ↥s`, then the restriction of `f` to `s` is surjective. We formulate the\nconclusion as `surj_on f s univ`. -/\ntheorem continuous_on.surj_on_of_tendsto' {f : α → δ} {s : set α} [OrdConnected s] (hs : s.nonempty)\n    (hf : continuous_on f s) (hbot : tendsto (fun x : s => f x) at_bot at_top)\n    (htop : tendsto (fun x : s => f x) at_top at_bot) : SurjOn f s univ :=\n  @continuous_on.surj_on_of_tendsto α _ _ _ _ («expr ᵒᵈ» δ) _ _ _ _ _ _ hs hf hbot htop\n#align continuous_on.surj_on_of_tendsto' continuous_on.surj_on_of_tendsto'\n\n",
 "surj_on_of_tendsto":
 "/-- If a function `f : α → β` is continuous on a nonempty interval `s`, its restriction to `s`\ntends to `at_bot : filter β` along `at_bot : filter ↥s` and tends to `at_top : filter β` along\n`at_top : filter ↥s`, then the restriction of `f` to `s` is surjective. We formulate the\nconclusion as `surj_on f s univ`. -/\ntheorem continuous_on.surj_on_of_tendsto {f : α → δ} {s : set α} [OrdConnected s] (hs : s.nonempty)\n    (hf : continuous_on f s) (hbot : tendsto (fun x : s => f x) at_bot at_bot)\n    (htop : tendsto (fun x : s => f x) at_top at_top) : SurjOn f s univ :=\n  haveI := Classical.inhabited_of_nonempty hs.to_subtype\n  surj_on_iff_surjective.2 <| (continuous_on_iff_continuous_restrict.1 hf).surjective htop hbot\n#align continuous_on.surj_on_of_tendsto continuous_on.surj_on_of_tendsto\n\n",
 "surj_on_Icc":
 "/-- **Intermediate value theorem**: if `f` is continuous on an order-connected set `s` and `a`,\n`b` are two points of this set, then `f` sends `s` to a superset of `Icc (f x) (f y)`. -/\ntheorem continuous_on.surj_on_Icc {s : set α} [hs : OrdConnected s] {f : α → δ} (hf : continuous_on f s) {a b : α}\n    (ha : a ∈ s) (hb : b ∈ s) : SurjOn f s (Icc (f a) (f b)) :=\n  hs.is_preconnected.intermediate_value ha hb hf\n#align continuous_on.surj_on_Icc continuous_on.surj_on_Icc\n\n",
 "set_of_is_preconnected_subset_of_ordered":
 "/-- A preconnected set is either one of the intervals `Icc`, `Ico`, `Ioc`, `Ioo`, `Ici`, `Ioi`,\n`Iic`, `Iio`, or `univ`, or `∅`. The converse statement requires `α` to be densely ordered. Though\none can represent `∅` as `(Inf s, Inf s)`, we include it into the list of possible cases to improve\nreadability. -/\ntheorem set_of_is_preconnected_subset_of_ordered :\n    { s : set α | is_preconnected s } ⊆-- bounded intervals\n                range\n                (uncurry Icc) ∪\n              range (uncurry Ico) ∪\n            range (uncurry Ioc) ∪\n          range (uncurry Ioo) ∪\n        (-- unbounded intervals and `univ`\n                  range\n                  Ici ∪\n                range Ioi ∪\n              range Iic ∪\n            range Iio ∪\n          {univ, ∅}) :=\n  by\n  intro s hs\n  rcases hs.mem_intervals with (hs | hs | hs | hs | hs | hs | hs | hs | hs | hs)\n  · exact or.inl <| or.inl <| or.inl <| or.inl ⟨(Inf s, Sup s), hs.symm⟩\n  · exact or.inl <| or.inl <| or.inl <| or.inr ⟨(Inf s, Sup s), hs.symm⟩\n  · exact or.inl <| or.inl <| or.inr ⟨(Inf s, Sup s), hs.symm⟩\n  · exact or.inl <| or.inr ⟨(Inf s, Sup s), hs.symm⟩\n  · exact or.inr <| or.inl <| or.inl <| or.inl <| or.inl ⟨Inf s, hs.symm⟩\n  · exact or.inr <| or.inl <| or.inl <| or.inl <| or.inr ⟨Inf s, hs.symm⟩\n  · exact or.inr <| or.inl <| or.inl <| or.inr ⟨Sup s, hs.symm⟩\n  · exact or.inr <| or.inl <| or.inr ⟨Sup s, hs.symm⟩\n  · exact or.inr <| or.inr <| or.inl hs\n  · exact or.inr <| or.inr <| or.inr hs\n#align set_of_is_preconnected_subset_of_ordered set_of_is_preconnected_subset_of_ordered\n\n",
 "set_of_is_preconnected_eq_of_ordered":
 "/-- In a dense conditionally complete linear order, the set of preconnected sets is exactly\nthe set of the intervals `Icc`, `Ico`, `Ioc`, `Ioo`, `Ici`, `Ioi`, `Iic`, `Iio`, `(-∞, +∞)`,\nor `∅`. Though one can represent `∅` as `(Inf s, Inf s)`, we include it into the list of\npossible cases to improve readability. -/\ntheorem set_of_is_preconnected_eq_of_ordered :\n    { s : set α | is_preconnected s } =-- bounded intervals\n                range\n                (uncurry Icc) ∪\n              range (uncurry Ico) ∪\n            range (uncurry Ioc) ∪\n          range (uncurry Ioo) ∪\n        (-- unbounded intervals and `univ`\n                  range\n                  Ici ∪\n                range Ioi ∪\n              range Iic ∪\n            range Iio ∪\n          {univ, ∅}) :=\n  by\n  refine' subset.antisymm set_of_is_preconnected_subset_of_ordered _\n  simp only [subset_def, -mem_range, forall_range_iff, uncurry, or_imp, forall_and, mem_union, mem_set_of_eq, insert_eq,\n    mem_singleton_iff, forall_eq, forall_true_iff, and_true_iff, is_preconnected_Icc, is_preconnected_Ico,\n    is_preconnected_Ioc, is_preconnected_Ioo, is_preconnected_Ioi, is_preconnected_Iio, is_preconnected_Ici,\n    is_preconnected_Iic, is_preconnected_univ, is_preconnected_empty]\n#align set_of_is_preconnected_eq_of_ordered set_of_is_preconnected_eq_of_ordered\n\n",
 "ord_connected":
 "theorem is_preconnected.ord_connected {s : set α} (h : is_preconnected s) : OrdConnected s :=\n  ⟨fun x hx y hy => h.Icc_subset hx hy⟩\n#align is_preconnected.ord_connected is_preconnected.ord_connected\n\n",
 "mem_range_of_exists_le_of_exists_ge":
 "/-- **Intermediate Value Theorem** for continuous functions on connected spaces. -/\ntheorem mem_range_of_exists_le_of_exists_ge [preconnected_space X] {c : α} {f : X → α} (hf : continuous f)\n    (h₁ : ∃ a, f a ≤ c) (h₂ : ∃ b, c ≤ f b) : c ∈ range f :=\n  let ⟨a, ha⟩ := h₁\n  let ⟨b, hb⟩ := h₂\n  intermediate_value_univ a b hf ⟨ha, hb⟩\n#align mem_range_of_exists_le_of_exists_ge mem_range_of_exists_le_of_exists_ge\n\n",
 "mem_of_ge_of_forall_exists_gt":
 "/-- A \"continuous induction principle\" for a closed interval: if a set `s` meets `[a, b]`\non a closed subset, contains `a`, and the set `s ∩ [a, b)` has no maximal point, then `b ∈ s`. -/\ntheorem is_closed.mem_of_ge_of_forall_exists_gt {a b : α} {s : set α} (hs : is_closed (s ∩ Icc a b)) (ha : a ∈ s)\n    (hab : a ≤ b) (hgt : ∀ x ∈ s ∩ Ico a b, (s ∩ Ioc x b).nonempty) : b ∈ s :=\n  by\n  let S := s ∩ Icc a b\n  replace ha : a ∈ S\n  exact ⟨ha, left_mem_Icc.2 hab⟩\n  have Sbd : BddAbove S := ⟨b, fun z hz => hz.2.2⟩\n  let c := Sup (s ∩ Icc a b)\n  have c_mem : c ∈ S := hs.cSup_mem ⟨_, ha⟩ Sbd\n  have c_le : c ≤ b := csupₛ_le ⟨_, ha⟩ fun x hx => hx.2.2\n  cases' eq_or_lt_of_le c_le with hc hc\n  exact hc ▸ c_mem.1\n  exfalso\n  rcases hgt c ⟨c_mem.1, c_mem.2.1, hc⟩ with ⟨x, xs, cx, xb⟩\n  exact not_lt_of_le (le_csupₛ Sbd ⟨xs, le_trans (le_csupₛ Sbd ha) (le_of_lt cx), xb⟩) cx\n#align is_closed.mem_of_ge_of_forall_exists_gt is_closed.mem_of_ge_of_forall_exists_gt\n\n",
 "mem_intervals":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr or.inr, \",\", expr mem_singleton, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/\n/-- A preconnected set in a conditionally complete linear order is either one of the intervals\n`[Inf s, Sup s]`, `[Inf s, Sup s)`, `(Inf s, Sup s]`, `(Inf s, Sup s)`, `[Inf s, +∞)`,\n`(Inf s, +∞)`, `(-∞, Sup s]`, `(-∞, Sup s)`, `(-∞, +∞)`, or `∅`. The converse statement requires\n`α` to be densely ordererd. -/\ntheorem is_preconnected.mem_intervals {s : set α} (hs : is_preconnected s) :\n    s ∈\n      ({Icc (infₛ s) (supₛ s), Ico (infₛ s) (supₛ s), Ioc (infₛ s) (supₛ s), Ioo (infₛ s) (supₛ s), Ici (infₛ s),\n          Ioi (infₛ s), Iic (supₛ s), Iio (supₛ s), univ, ∅} :\n        set (set α)) :=\n  by\n  rcases s.eq_empty_or_nonempty with (rfl | hne)\n  ·\n    trace\n      \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr or.inr, \\\",\\\", expr mem_singleton, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"\n  have hs' : is_connected s := ⟨hne, hs⟩\n  by_cases hb : BddBelow s <;> by_cases ha : BddAbove s\n  · rcases mem_Icc_Ico_Ioc_Ioo_of_subset_of_subset (hs'.Ioo_cInf_cSup_subset hb ha) (subset_Icc_cinfₛ_csupₛ hb ha) with\n      (hs | hs | hs | hs)\n    · exact or.inl hs\n    · exact or.inr <| or.inl hs\n    · exact or.inr <| or.inr <| or.inl hs\n    · exact or.inr <| or.inr <| or.inr <| or.inl hs\n  · refine' or.inr <| or.inr <| or.inr <| or.inr _\n    cases' mem_Ici_Ioi_of_subset_of_subset (hs.Ioi_cInf_subset hb ha) fun x hx => cinfₛ_le hb hx with hs hs\n    · exact or.inl hs\n    · exact or.inr (or.inl hs)\n  · iterate 6 apply or.inr\n    cases' mem_Iic_Iio_of_subset_of_subset (hs.Iio_cSup_subset hb ha) fun x hx => le_csupₛ ha hx with hs hs\n    · exact or.inl hs\n    · exact or.inr (or.inl hs)\n  · iterate 8 apply or.inr\n    exact or.inl (hs.eq_univ_of_unbounded hb ha)\n#align is_preconnected.mem_intervals is_preconnected.mem_intervals\n\n",
 "is_preconnected_uIcc":
 "theorem is_preconnected_uIcc : is_preconnected (uIcc a b) :=\n  is_preconnected_Icc\n#align is_preconnected_uIcc is_preconnected_uIcc\n\n",
 "is_preconnected_iff_ord_connected":
 "theorem is_preconnected_iff_ord_connected {s : set α} : is_preconnected s ↔ OrdConnected s :=\n  ⟨is_preconnected.ord_connected, set.ord_connected.is_preconnected⟩\n#align is_preconnected_iff_ord_connected is_preconnected_iff_ord_connected\n\n",
 "is_preconnected_Ioo":
 "theorem is_preconnected_Ioo : is_preconnected (Ioo a b) :=\n  ordConnected_Ioo.is_preconnected\n#align is_preconnected_Ioo is_preconnected_Ioo\n\n",
 "is_preconnected_Ioi":
 "theorem is_preconnected_Ioi : is_preconnected (Ioi a) :=\n  ordConnected_Ioi.is_preconnected\n#align is_preconnected_Ioi is_preconnected_Ioi\n\n",
 "is_preconnected_Ioc":
 "theorem is_preconnected_Ioc : is_preconnected (Ioc a b) :=\n  ordConnected_Ioc.is_preconnected\n#align is_preconnected_Ioc is_preconnected_Ioc\n\n",
 "is_preconnected_Iio":
 "theorem is_preconnected_Iio : is_preconnected (Iio a) :=\n  ord_connected_Iio.is_preconnected\n#align is_preconnected_Iio is_preconnected_Iio\n\n",
 "is_preconnected_Iic":
 "theorem is_preconnected_Iic : is_preconnected (Iic a) :=\n  ordConnected_Iic.is_preconnected\n#align is_preconnected_Iic is_preconnected_Iic\n\n",
 "is_preconnected_Ico":
 "theorem is_preconnected_Ico : is_preconnected (Ico a b) :=\n  ordConnected_Ico.is_preconnected\n#align is_preconnected_Ico is_preconnected_Ico\n\n",
 "is_preconnected_Ici":
 "theorem is_preconnected_Ici : is_preconnected (Ici a) :=\n  ordConnected_Ici.is_preconnected\n#align is_preconnected_Ici is_preconnected_Ici\n\n",
 "is_preconnected_Icc_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_preconnected_Icc_aux (x y : α) (s t : set α) (hxy : x ≤ y) (hs : is_closed s) (ht : is_closed t)\n    (hab : Icc a b ⊆ s ∪ t) (hx : x ∈ Icc a b ∩ s) (hy : y ∈ Icc a b ∩ t) : (Icc a b ∩ (s ∩ t)).nonempty :=\n  by\n  have xyab : Icc x y ⊆ Icc a b := Icc_subset_Icc hx.1.1 hy.1.2\n  by_contra hst\n  suffices : Icc x y ⊆ s\n  exact hst ⟨y, xyab <| right_mem_Icc.2 hxy, this <| right_mem_Icc.2 hxy, hy.2⟩\n  apply (is_closed.inter hs is_closed_Icc).Icc_subset_of_forall_mem_nhds_within hx.2\n  rintro z ⟨zs, hz⟩\n  have zt : z ∈ «expr ᶜ» t := fun zt => hst ⟨z, xyab <| Ico_subset_Icc_self hz, zs, zt⟩\n  have : «expr ᶜ» t ∩ Ioc z y ∈ nhds_within.gt z :=\n    by\n    rw [← nhds_within_Ioc_eq_nhds_within_Ioi hz.2]\n    exact mem_nhds_within.2 ⟨«expr ᶜ» t, ht.is_open_compl, zt, subset.refl _⟩\n  apply mem_of_superset this\n  have : Ioc z y ⊆ s ∪ t := fun w hw => hab (xyab ⟨le_trans hz.1 (le_of_lt hw.1), hw.2⟩)\n  exact fun w ⟨wt, wzy⟩ => (this wzy).elim id fun h => (wt h).elim\n#align is_preconnected_Icc_aux is_preconnected_Icc_aux\n\n",
 "is_preconnected_Icc":
 "/-- A closed interval in a densely ordered conditionally complete linear order is preconnected. -/\ntheorem is_preconnected_Icc : is_preconnected (Icc a b) :=\n  is_preconnected_closed_iff.2\n    (by\n      rintro s t hs ht hab ⟨x, hx⟩ ⟨y, hy⟩\n      -- This used to use `wlog`, but it was causing timeouts.\n      cases le_total x y\n      · exact is_preconnected_Icc_aux x y s t h hs ht hab hx hy\n      · rw [inter_comm s t]\n        rw [union_comm s t] at hab\n        exact is_preconnected_Icc_aux y x t s h ht hs hab hy hx)\n#align is_preconnected_Icc is_preconnected_Icc\n\n",
 "is_preconnected":
 "theorem set.ord_connected.is_preconnected {s : set α} (h : s.ord_connected) : is_preconnected s :=\n  is_preconnected_of_forall_pair fun x hx y hy =>\n    ⟨uIcc x y, h.uIcc_subset hx hy, left_mem_uIcc, right_mem_uIcc, is_preconnected_uIcc⟩\n#align set.ord_connected.is_preconnected set.ord_connected.is_preconnected\n\n",
 "is_connected_Ioo":
 "theorem is_connected_Ioo (h : a < b) : is_connected (Ioo a b) :=\n  ⟨nonempty_Ioo.2 h, is_preconnected_Ioo⟩\n#align is_connected_Ioo is_connected_Ioo\n\n",
 "is_connected_Ioi":
 "theorem is_connected_Ioi [NoMaxOrder α] : is_connected (Ioi a) :=\n  ⟨nonempty_Ioi, is_preconnected_Ioi⟩\n#align is_connected_Ioi is_connected_Ioi\n\n",
 "is_connected_Ioc":
 "theorem is_connected_Ioc (h : a < b) : is_connected (Ioc a b) :=\n  ⟨nonempty_Ioc.2 h, is_preconnected_Ioc⟩\n#align is_connected_Ioc is_connected_Ioc\n\n",
 "is_connected_Iio":
 "theorem is_connected_Iio [NoMinOrder α] : is_connected (Iio a) :=\n  ⟨nonempty_Iio, is_preconnected_Iio⟩\n#align is_connected_Iio is_connected_Iio\n\n",
 "is_connected_Iic":
 "theorem is_connected_Iic : is_connected (Iic a) :=\n  ⟨nonempty_Iic, is_preconnected_Iic⟩\n#align is_connected_Iic is_connected_Iic\n\n",
 "is_connected_Ico":
 "theorem is_connected_Ico (h : a < b) : is_connected (Ico a b) :=\n  ⟨nonempty_Ico.2 h, is_preconnected_Ico⟩\n#align is_connected_Ico is_connected_Ico\n\n",
 "is_connected_Ici":
 "theorem is_connected_Ici : is_connected (Ici a) :=\n  ⟨nonempty_Ici, is_preconnected_Ici⟩\n#align is_connected_Ici is_connected_Ici\n\n",
 "is_connected_Icc":
 "theorem is_connected_Icc (h : a ≤ b) : is_connected (Icc a b) :=\n  ⟨nonempty_Icc.2 h, is_preconnected_Icc⟩\n#align is_connected_Icc is_connected_Icc\n\n",
 "intermediate_value₂_eventually₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\ntheorem is_preconnected.intermediate_value₂_eventually₂ {s : set X} (hs : is_preconnected s) {l₁ l₂ : filter X}\n    [ne_bot l₁] [ne_bot l₂] (hl₁ : l₁ ≤ (filter.principal) s) (hl₂ : l₂ ≤ (filter.principal) s) {f g : X → α}\n    (hf : continuous_on f s) (hg : continuous_on g s) (he₁ : «expr ≤ᶠ[ ] » f l₁ g) (he₂ : «expr ≤ᶠ[ ] » g l₂ f) :\n    ∃ x ∈ s, f x = g x := by\n  rw [continuous_on_iff_continuous_restrict] at hf hg\n  obtain ⟨b, h⟩ :=\n    @intermediate_value_univ₂_eventually₂ _ _ _ _ _ _ (subtype.preconnected_space hs) _ _\n      (comap_coe_ne_bot_of_le_principal hl₁) (comap_coe_ne_bot_of_le_principal hl₂) _ _ hf hg (he₁.comap _)\n      (he₂.comap _)\n  exact ⟨b, b.prop, h⟩\n#align is_preconnected.intermediate_value₂_eventually₂ is_preconnected.intermediate_value₂_eventually₂\n\n",
 "intermediate_value₂_eventually₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\ntheorem is_preconnected.intermediate_value₂_eventually₁ {s : set X} (hs : is_preconnected s) {a : X} {l : filter X}\n    (ha : a ∈ s) [ne_bot l] (hl : l ≤ (filter.principal) s) {f g : X → α} (hf : continuous_on f s)\n    (hg : continuous_on g s) (ha' : f a ≤ g a) (he : «expr ≤ᶠ[ ] » g l f) : ∃ x ∈ s, f x = g x :=\n  by\n  rw [continuous_on_iff_continuous_restrict] at hf hg\n  obtain ⟨b, h⟩ :=\n    @intermediate_value_univ₂_eventually₁ _ _ _ _ _ _ (subtype.preconnected_space hs) ⟨a, ha⟩ _\n      (comap_coe_ne_bot_of_le_principal hl) _ _ hf hg ha' (he.comap _)\n  exact ⟨b, b.prop, h⟩\n#align is_preconnected.intermediate_value₂_eventually₁ is_preconnected.intermediate_value₂_eventually₁\n\n",
 "intermediate_value₂":
 "/-- Intermediate value theorem for two functions: if `f` and `g` are two functions continuous\non a preconnected set `s` and for some `a b ∈ s` we have `f a ≤ g a` and `g b ≤ f b`,\nthen for some `x ∈ s` we have `f x = g x`. -/\ntheorem is_preconnected.intermediate_value₂ {s : set X} (hs : is_preconnected s) {a b : X} (ha : a ∈ s) (hb : b ∈ s)\n    {f g : X → α} (hf : continuous_on f s) (hg : continuous_on g s) (ha' : f a ≤ g a) (hb' : g b ≤ f b) :\n    ∃ x ∈ s, f x = g x :=\n  let ⟨x, hx⟩ :=\n    @intermediate_value_univ₂ s α _ _ _ _ (subtype.preconnected_space hs) ⟨a, ha⟩ ⟨b, hb⟩ _ _\n      (continuous_on_iff_continuous_restrict.1 hf) (continuous_on_iff_continuous_restrict.1 hg) ha' hb'\n  ⟨x, x.2, hx⟩\n#align is_preconnected.intermediate_value₂ is_preconnected.intermediate_value₂\n\n",
 "intermediate_value_univ₂_eventually₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\ntheorem intermediate_value_univ₂_eventually₂ [preconnected_space X] {l₁ l₂ : filter X} [ne_bot l₁] [ne_bot l₂]\n    {f g : X → α} (hf : continuous f) (hg : continuous g) (he₁ : «expr ≤ᶠ[ ] » f l₁ g) (he₂ : «expr ≤ᶠ[ ] » g l₂ f) :\n    ∃ x, f x = g x :=\n  let ⟨c₁, hc₁⟩ := he₁.frequently.exists\n  let ⟨c₂, hc₂⟩ := he₂.frequently.exists\n  intermediate_value_univ₂ hf hg hc₁ hc₂\n#align intermediate_value_univ₂_eventually₂ intermediate_value_univ₂_eventually₂\n\n",
 "intermediate_value_univ₂_eventually₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᶠ[ ] » -/\ntheorem intermediate_value_univ₂_eventually₁ [preconnected_space X] {a : X} {l : filter X} [ne_bot l] {f g : X → α}\n    (hf : continuous f) (hg : continuous g) (ha : f a ≤ g a) (he : «expr ≤ᶠ[ ] » g l f) : ∃ x, f x = g x :=\n  let ⟨c, hc⟩ := he.frequently.exists\n  intermediate_value_univ₂ hf hg ha hc\n#align intermediate_value_univ₂_eventually₁ intermediate_value_univ₂_eventually₁\n\n",
 "intermediate_value_univ₂":
 "/-\nCopyright (c) 2021 Yury G. Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury G. Kudryashov, Alistair Tucker\n-/\n/-- Intermediate value theorem for two functions: if `f` and `g` are two continuous functions\non a preconnected space and `f a ≤ g a` and `g b ≤ f b`, then for some `x` we have `f x = g x`. -/\ntheorem intermediate_value_univ₂ [preconnected_space X] {a b : X} {f g : X → α} (hf : continuous f) (hg : continuous g)\n    (ha : f a ≤ g a) (hb : g b ≤ f b) : ∃ x, f x = g x :=\n  by\n  obtain ⟨x, h, hfg, hgf⟩ : (univ ∩ { x | f x ≤ g x ∧ g x ≤ f x }).nonempty\n  exact\n    is_preconnected_closed_iff.1 preconnected_space.is_preconnected_univ _ _ (is_closed_le hf hg) (is_closed_le hg hf)\n      (fun x hx => le_total _ _) ⟨a, trivial, ha⟩ ⟨b, trivial, hb⟩\n  exact ⟨x, le_antisymm hfg hgf⟩\n#align intermediate_value_univ₂ intermediate_value_univ₂\n\n",
 "intermediate_value_univ":
 "/-- **Intermediate Value Theorem** for continuous functions on connected spaces. -/\ntheorem intermediate_value_univ [preconnected_space X] (a b : X) {f : X → α} (hf : continuous f) :\n    Icc (f a) (f b) ⊆ range f := fun x hx => intermediate_value_univ₂ hf continuous_const hx.1 hx.2\n#align intermediate_value_univ intermediate_value_univ\n\n",
 "intermediate_value_uIcc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- **Intermediate Value Theorem** for continuous functions on closed intervals, unordered case. -/\ntheorem intermediate_value_uIcc {a b : α} {f : α → δ} (hf : continuous_on f (uIcc a b)) :\n    uIcc (f a) (f b) ⊆ «expr '' » f (uIcc a b) := by\n  cases le_total (f a) (f b) <;> simp [*, is_preconnected_uIcc.intermediate_value]\n#align intermediate_value_uIcc intermediate_value_uIcc\n\n",
 "intermediate_value_Ioo'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem intermediate_value_Ioo' {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Ioo (f b) (f a) ⊆ «expr '' » f (Ioo a b) :=\n  or.elim (eq_or_lt_of_le hab) (fun he y h => absurd h.1 (not_lt_of_lt (he ▸ h.2))) fun hlt =>\n    @is_preconnected.intermediate_value_Ioo _ _ _ _ _ _ _ is_preconnected_Ioo _ _ (right_nhds_within_Ioo_ne_bot hlt)\n      (left_nhds_within_Ioo_ne_bot hlt) inf_le_right inf_le_right _ (hf.mono Ioo_subset_Icc_self) _ _\n      ((hf.continuous_within_at ⟨hab, refl b⟩).mono Ioo_subset_Icc_self)\n      ((hf.continuous_within_at ⟨refl a, hab⟩).mono Ioo_subset_Icc_self)\n#align intermediate_value_Ioo' intermediate_value_Ioo'\n\n",
 "intermediate_value_Ioo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem intermediate_value_Ioo {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Ioo (f a) (f b) ⊆ «expr '' » f (Ioo a b) :=\n  or.elim (eq_or_lt_of_le hab) (fun he y h => absurd h.2 (not_lt_of_lt (he ▸ h.1))) fun hlt =>\n    @is_preconnected.intermediate_value_Ioo _ _ _ _ _ _ _ is_preconnected_Ioo _ _ (left_nhds_within_Ioo_ne_bot hlt)\n      (right_nhds_within_Ioo_ne_bot hlt) inf_le_right inf_le_right _ (hf.mono Ioo_subset_Icc_self) _ _\n      ((hf.continuous_within_at ⟨refl a, hab⟩).mono Ioo_subset_Icc_self)\n      ((hf.continuous_within_at ⟨hab, refl b⟩).mono Ioo_subset_Icc_self)\n#align intermediate_value_Ioo intermediate_value_Ioo\n\n",
 "intermediate_value_Ioi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_preconnected.intermediate_value_Ioi {s : set X} (hs : is_preconnected s) {l₁ l₂ : filter X} [ne_bot l₁]\n    [ne_bot l₂] (hl₁ : l₁ ≤ (filter.principal) s) (hl₂ : l₂ ≤ (filter.principal) s) {f : X → α} (hf : continuous_on f s)\n    {v : α} (ht₁ : tendsto f l₁ ((nhds) v)) (ht₂ : tendsto f l₂ at_top) : Ioi v ⊆ «expr '' » f s := fun y h =>\n  bex_def.1 <|\n    hs.intermediate_value₂_eventually₂ hl₁ hl₂ hf continuous_on_const (eventually_le_of_tendsto_lt h ht₁)\n      (tendsto_at_top.1 ht₂ y)\n#align is_preconnected.intermediate_value_Ioi is_preconnected.intermediate_value_Ioi\n\n",
 "intermediate_value_Ioc'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem intermediate_value_Ioc' {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Ico (f b) (f a) ⊆ «expr '' » f (Ioc a b) :=\n  or.elim (eq_or_lt_of_le hab) (fun he y h => absurd h.1 (not_le_of_lt (he ▸ h.2))) fun hlt =>\n    @is_preconnected.intermediate_value_Ico _ _ _ _ _ _ _ is_preconnected_Ioc _ _ ⟨hlt, refl b⟩\n      (left_nhds_within_Ioc_ne_bot hlt) inf_le_right _ (hf.mono Ioc_subset_Icc_self) _\n      ((hf.continuous_within_at ⟨refl a, hab⟩).mono Ioc_subset_Icc_self)\n#align intermediate_value_Ioc' intermediate_value_Ioc'\n\n",
 "intermediate_value_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem intermediate_value_Ioc {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Ioc (f a) (f b) ⊆ «expr '' » f (Ioc a b) :=\n  or.elim (eq_or_lt_of_le hab) (fun he y h => absurd h.2 (not_le_of_lt (he ▸ h.1))) fun hlt =>\n    @is_preconnected.intermediate_value_Ioc _ _ _ _ _ _ _ is_preconnected_Ioc _ _ ⟨hlt, refl b⟩\n      (left_nhds_within_Ioc_ne_bot hlt) inf_le_right _ (hf.mono Ioc_subset_Icc_self) _\n      ((hf.continuous_within_at ⟨refl a, hab⟩).mono Ioc_subset_Icc_self)\n#align intermediate_value_Ioc intermediate_value_Ioc\n\n",
 "intermediate_value_Iio":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_preconnected.intermediate_value_Iio {s : set X} (hs : is_preconnected s) {l₁ l₂ : filter X} [ne_bot l₁]\n    [ne_bot l₂] (hl₁ : l₁ ≤ (filter.principal) s) (hl₂ : l₂ ≤ (filter.principal) s) {f : X → α} (hf : continuous_on f s)\n    {v : α} (ht₁ : tendsto f l₁ at_bot) (ht₂ : tendsto f l₂ ((nhds) v)) : Iio v ⊆ «expr '' » f s := fun y h =>\n  bex_def.1 <|\n    hs.intermediate_value₂_eventually₂ hl₁ hl₂ hf continuous_on_const (tendsto_at_bot.1 ht₁ y)\n      (eventually_ge_of_tendsto_gt h ht₂)\n#align is_preconnected.intermediate_value_Iio is_preconnected.intermediate_value_Iio\n\n",
 "intermediate_value_Iii":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_preconnected.intermediate_value_Iii {s : set X} (hs : is_preconnected s) {l₁ l₂ : filter X} [ne_bot l₁]\n    [ne_bot l₂] (hl₁ : l₁ ≤ (filter.principal) s) (hl₂ : l₂ ≤ (filter.principal) s) {f : X → α} (hf : continuous_on f s)\n    (ht₁ : tendsto f l₁ at_bot) (ht₂ : tendsto f l₂ at_top) : univ ⊆ «expr '' » f s := fun y h =>\n  bex_def.1 <|\n    hs.intermediate_value₂_eventually₂ hl₁ hl₂ hf continuous_on_const (tendsto_at_bot.1 ht₁ y) (tendsto_at_top.1 ht₂ y)\n#align is_preconnected.intermediate_value_Iii is_preconnected.intermediate_value_Iii\n\n",
 "intermediate_value_Iic":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_preconnected.intermediate_value_Iic {s : set X} (hs : is_preconnected s) {a : X} {l : filter X} (ha : a ∈ s)\n    [ne_bot l] (hl : l ≤ (filter.principal) s) {f : X → α} (hf : continuous_on f s) (ht : tendsto f l at_bot) :\n    Iic (f a) ⊆ «expr '' » f s := fun y h =>\n  bex_def.1 <|\n    (BEx.imp_right fun x _ => eq.symm) <|\n      hs.intermediate_value₂_eventually₁ ha hl continuous_on_const hf h (tendsto_at_bot.1 ht y)\n#align is_preconnected.intermediate_value_Iic is_preconnected.intermediate_value_Iic\n\n",
 "intermediate_value_Ico'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem intermediate_value_Ico' {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Ioc (f b) (f a) ⊆ «expr '' » f (Ico a b) :=\n  or.elim (eq_or_lt_of_le hab) (fun he y h => absurd h.1 (not_lt_of_le (he ▸ h.2))) fun hlt =>\n    @is_preconnected.intermediate_value_Ioc _ _ _ _ _ _ _ is_preconnected_Ico _ _ ⟨refl a, hlt⟩\n      (right_nhds_within_Ico_ne_bot hlt) inf_le_right _ (hf.mono Ico_subset_Icc_self) _\n      ((hf.continuous_within_at ⟨hab, refl b⟩).mono Ico_subset_Icc_self)\n#align intermediate_value_Ico' intermediate_value_Ico'\n\n",
 "intermediate_value_Ico":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem intermediate_value_Ico {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Ico (f a) (f b) ⊆ «expr '' » f (Ico a b) :=\n  or.elim (eq_or_lt_of_le hab) (fun he y h => absurd h.2 (not_lt_of_le (he ▸ h.1))) fun hlt =>\n    @is_preconnected.intermediate_value_Ico _ _ _ _ _ _ _ is_preconnected_Ico _ _ ⟨refl a, hlt⟩\n      (right_nhds_within_Ico_ne_bot hlt) inf_le_right _ (hf.mono Ico_subset_Icc_self) _\n      ((hf.continuous_within_at ⟨hab, refl b⟩).mono Ico_subset_Icc_self)\n#align intermediate_value_Ico intermediate_value_Ico\n\n",
 "intermediate_value_Ici":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_preconnected.intermediate_value_Ici {s : set X} (hs : is_preconnected s) {a : X} {l : filter X} (ha : a ∈ s)\n    [ne_bot l] (hl : l ≤ (filter.principal) s) {f : X → α} (hf : continuous_on f s) (ht : tendsto f l at_top) :\n    Ici (f a) ⊆ «expr '' » f s := fun y h =>\n  bex_def.1 <| hs.intermediate_value₂_eventually₁ ha hl hf continuous_on_const h (tendsto_at_top.1 ht y)\n#align is_preconnected.intermediate_value_Ici is_preconnected.intermediate_value_Ici\n\n",
 "intermediate_value_Icc'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- **Intermediate Value Theorem** for continuous functions on closed intervals, case\n`f a ≥ t ≥ f b`.-/\ntheorem intermediate_value_Icc' {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Icc (f b) (f a) ⊆ «expr '' » f (Icc a b) :=\n  is_preconnected_Icc.intermediate_value (right_mem_Icc.2 hab) (left_mem_Icc.2 hab) hf\n#align intermediate_value_Icc' intermediate_value_Icc'\n\n",
 "intermediate_value_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- **Intermediate Value Theorem** for continuous functions on closed intervals, case\n`f a ≤ t ≤ f b`.-/\ntheorem intermediate_value_Icc {a b : α} (hab : a ≤ b) {f : α → δ} (hf : continuous_on f (Icc a b)) :\n    Icc (f a) (f b) ⊆ «expr '' » f (Icc a b) :=\n  is_preconnected_Icc.intermediate_value (left_mem_Icc.2 hab) (right_mem_Icc.2 hab) hf\n#align intermediate_value_Icc intermediate_value_Icc\n\n",
 "intermediate_value":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/-- **Intermediate Value Theorem** for continuous functions on connected sets. -/\ntheorem is_preconnected.intermediate_value {s : set X} (hs : is_preconnected s) {a b : X} (ha : a ∈ s) (hb : b ∈ s)\n    {f : X → α} (hf : continuous_on f s) : Icc (f a) (f b) ⊆ «expr '' » f s := fun x hx =>\n  mem_image_iff_bex.2 <| hs.intermediate_value₂ ha hb hf continuous_on_const hx.1 hx.2\n#align is_preconnected.intermediate_value is_preconnected.intermediate_value\n\n",
 "eq_univ_of_unbounded":
 "/-- If preconnected set in a linear order space is unbounded below and above, then it is the whole\nspace. -/\ntheorem is_preconnected.eq_univ_of_unbounded {s : set α} (hs : is_preconnected s) (hb : ¬BddBelow s)\n    (ha : ¬BddAbove s) : s = univ := by\n  refine' eq_univ_of_forall fun x => _\n  obtain ⟨y, ys, hy⟩ : ∃ y ∈ s, y < x := not_bddBelow_iff.1 hb x\n  obtain ⟨z, zs, hz⟩ : ∃ z ∈ s, x < z := not_bddAbove_iff.1 ha x\n  exact hs.Icc_subset ys zs ⟨le_of_lt hy, le_of_lt hz⟩\n#align is_preconnected.eq_univ_of_unbounded is_preconnected.eq_univ_of_unbounded\n\n",
 "eq_Icc_cInf_cSup_of_connected_bdd_closed":
 "theorem eq_Icc_cInf_cSup_of_connected_bdd_closed {s : set α} (hc : is_connected s) (hb : BddBelow s) (ha : BddAbove s)\n    (hcl : is_closed s) : s = Icc (infₛ s) (supₛ s) :=\n  Subset.antisymm (subset_Icc_cinfₛ_csupₛ hb ha) <|\n    hc.Icc_subset (hcl.cInf_mem hc.nonempty hb) (hcl.cSup_mem hc.nonempty ha)\n#align eq_Icc_cInf_cSup_of_connected_bdd_closed eq_Icc_cInf_cSup_of_connected_bdd_closed\n\n",
 "Ioo_cInf_cSup_subset":
 "/-- A bounded connected subset of a conditionally complete linear order includes the open interval\n`(Inf s, Sup s)`. -/\ntheorem is_connected.Ioo_cInf_cSup_subset {s : set α} (hs : is_connected s) (hb : BddBelow s) (ha : BddAbove s) :\n    Ioo (infₛ s) (supₛ s) ⊆ s := fun x hx =>\n  let ⟨y, ys, hy⟩ := (isGLB_lt_iff (isGLB_cinfₛ hs.nonempty hb)).1 hx.1\n  let ⟨z, zs, hz⟩ := (lt_isLUB_iff (isLUB_csupₛ hs.nonempty ha)).1 hx.2\n  hs.Icc_subset ys zs ⟨le_of_lt hy, le_of_lt hz⟩\n#align is_connected.Ioo_cInf_cSup_subset is_connected.Ioo_cInf_cSup_subset\n\n",
 "Ioi_cInf_subset":
 "theorem is_preconnected.Ioi_cInf_subset {s : set α} (hs : is_preconnected s) (hb : BddBelow s) (ha : ¬BddAbove s) :\n    Ioi (infₛ s) ⊆ s := by\n  have sne : s.nonempty := @nonempty_of_not_bddAbove α _ s ⟨Inf ∅⟩ ha\n  intro x hx\n  obtain ⟨y, ys, hy⟩ : ∃ y ∈ s, y < x := (isGLB_lt_iff (isGLB_cinfₛ sne hb)).1 hx\n  obtain ⟨z, zs, hz⟩ : ∃ z ∈ s, x < z := not_bddAbove_iff.1 ha x\n  exact hs.Icc_subset ys zs ⟨le_of_lt hy, le_of_lt hz⟩\n#align is_preconnected.Ioi_cInf_subset is_preconnected.Ioi_cInf_subset\n\n",
 "Iio_cSup_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\ntheorem is_preconnected.Iio_cSup_subset {s : set α} (hs : is_preconnected s) (hb : ¬BddBelow s) (ha : BddAbove s) :\n    Iio (supₛ s) ⊆ s :=\n  @is_preconnected.Ioi_cInf_subset («expr ᵒᵈ» α) _ _ _ s hs ha hb\n#align is_preconnected.Iio_cSup_subset is_preconnected.Iio_cSup_subset\n\n",
 "Icc_subset_of_forall_mem_nhds_within":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.gt -/\n/-- A \"continuous induction principle\" for a closed interval: if a set `s` meets `[a, b]`\non a closed subset, contains `a`, and for any `x ∈ s ∩ [a, b)` the set `s` includes some open\nneighborhood of `x` within `(x, +∞)`, then `[a, b] ⊆ s`. -/\ntheorem is_closed.Icc_subset_of_forall_mem_nhds_within {a b : α} {s : set α} (hs : is_closed (s ∩ Icc a b)) (ha : a ∈ s)\n    (hgt : ∀ x ∈ s ∩ Ico a b, s ∈ nhds_within.gt x) : Icc a b ⊆ s :=\n  by\n  apply hs.Icc_subset_of_forall_exists_gt ha\n  rintro x ⟨hxs, hxab⟩ y hyxb\n  have : s ∩ Ioc x y ∈ nhds_within.gt x := inter_mem (hgt x ⟨hxs, hxab⟩) (Ioc_mem_nhds_within_Ioi ⟨le_rfl, hyxb⟩)\n  exact (nhds_within_Ioi_self_ne_bot' ⟨b, hxab.2⟩).nonempty_of_mem this\n#align is_closed.Icc_subset_of_forall_mem_nhds_within is_closed.Icc_subset_of_forall_mem_nhds_within\n\n",
 "Icc_subset_of_forall_exists_gt":
 "/-- A \"continuous induction principle\" for a closed interval: if a set `s` meets `[a, b]`\non a closed subset, contains `a`, and for any `a ≤ x < y ≤ b`, `x ∈ s`, the set `s ∩ (x, y]`\nis not empty, then `[a, b] ⊆ s`. -/\ntheorem is_closed.Icc_subset_of_forall_exists_gt {a b : α} {s : set α} (hs : is_closed (s ∩ Icc a b)) (ha : a ∈ s)\n    (hgt : ∀ x ∈ s ∩ Ico a b, ∀ y ∈ Ioi x, (s ∩ Ioc x y).nonempty) : Icc a b ⊆ s :=\n  by\n  intro y hy\n  have : is_closed (s ∩ Icc a y) :=\n    by\n    suffices s ∩ Icc a y = s ∩ Icc a b ∩ Icc a y by\n      rw [this]\n      exact is_closed.inter hs is_closed_Icc\n    rw [inter_assoc]\n    congr\n    exact (inter_eq_self_of_subset_right <| Icc_subset_Icc_right hy.2).symm\n  exact\n    is_closed.mem_of_ge_of_forall_exists_gt this ha hy.1 fun x hx =>\n      hgt x ⟨hx.1, Ico_subset_Ico_right hy.2 hx.2⟩ y hx.2.2\n#align is_closed.Icc_subset_of_forall_exists_gt is_closed.Icc_subset_of_forall_exists_gt\n\n",
 "Icc_subset":
 "/-- If a preconnected set contains endpoints of an interval, then it includes the whole interval. -/\ntheorem is_connected.Icc_subset {s : set α} (hs : is_connected s) {a b : α} (ha : a ∈ s) (hb : b ∈ s) : Icc a b ⊆ s :=\n  hs.2.Icc_subset ha hb\n#align is_connected.Icc_subset is_connected.Icc_subset\n\n"}