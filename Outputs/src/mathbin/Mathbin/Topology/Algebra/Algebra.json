{"topologicalClosure_minimal":
 "#print Subalgebra.topologicalClosure_minimal /-\ntheorem Subalgebra.topologicalClosure_minimal (s : Subalgebra R A) {t : Subalgebra R A} (h : s ≤ t)\n    (ht : IsClosed (t : Set A)) : s.topological_closure ≤ t :=\n  closure_minimal h ht\n#align subalgebra.topological_closure_minimal Subalgebra.topologicalClosure_minimal\n-/\n\n",
 "topologicalClosure_comap_homeomorph":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print Subalgebra.topologicalClosure_comap_homeomorph /-\n/-- This is really a statement about topological algebra isomorphisms,\nbut we don't have those, so we use the clunky approach of talking about\nan algebra homomorphism, and a separate homeomorphism,\nalong with a witness that as functions they are the same.\n-/\ntheorem Subalgebra.topologicalClosure_comap_homeomorph (s : Subalgebra R A) {B : Type _} [TopologicalSpace B] [Ring B]\n    [TopologicalRing B] [Algebra R B] (f : «expr →ₐ[ ] » B R A) (f' : «expr ≃ₜ » B A) (w : (f : B → A) = f') :\n    s.topological_closure.comap f = (s.comap f).topological_closure :=\n  by\n  apply SetLike.ext'\n  simp only [Subalgebra.topologicalClosure_coe]\n  simp only [Subalgebra.coe_comap, Subsemiring.coe_comap, AlgHom.coe_toRingHom]\n  rw [w]\n  exact f'.preimage_closure _\n#align subalgebra.topological_closure_comap_homeomorph Subalgebra.topologicalClosure_comap_homeomorph\n-/\n\n",
 "topologicalClosure_coe":
 "#print Subalgebra.topologicalClosure_coe /-\n@[simp]\ntheorem Subalgebra.topologicalClosure_coe (s : Subalgebra R A) :\n    (s.topological_closure : Set A) = closure (s : Set A) :=\n  rfl\n#align subalgebra.topological_closure_coe Subalgebra.topologicalClosure_coe\n-/\n\n",
 "self_mem_elementalAlgebra":
 "#print Algebra.self_mem_elementalAlgebra /-\ntheorem Algebra.self_mem_elementalAlgebra (x : A) : x ∈ Algebra.elementalAlgebra R x :=\n  SetLike.le_def.mp (Subalgebra.le_topologicalClosure (Algebra.adjoin R ({x} : Set A))) <|\n    Algebra.self_mem_adjoin_singleton R x\n#align algebra.self_mem_elemental_algebra Algebra.self_mem_elementalAlgebra\n-/\n\n",
 "le_topologicalClosure":
 "#print Subalgebra.le_topologicalClosure /-\ntheorem Subalgebra.le_topologicalClosure (s : Subalgebra R A) : s ≤ s.topological_closure :=\n  subset_closure\n#align subalgebra.le_topological_closure Subalgebra.le_topologicalClosure\n-/\n\n",
 "isClosed_topologicalClosure":
 "#print Subalgebra.isClosed_topologicalClosure /-\ntheorem Subalgebra.isClosed_topologicalClosure (s : Subalgebra R A) : IsClosed (s.topological_closure : Set A) := by\n  convert isClosed_closure\n#align subalgebra.is_closed_topological_closure Subalgebra.isClosed_topologicalClosure\n-/\n\n",
 "continuous_algebraMap_iff_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print continuous_algebraMap_iff_smul /-\n/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem continuous_algebraMap_iff_smul : Continuous (algebraMap R A) ↔ Continuous fun p : R × A => «expr • » p.1 p.2 :=\n  by\n  refine' ⟨fun h => _, fun h => _⟩\n  · simp only [Algebra.smul_def]\n    exact (h.comp continuous_fst).mul continuous_snd\n  · rw [algebra_map_eq_smul_one']\n    exact h.comp (continuous_id.prod_mk continuous_const)\n#align continuous_algebra_map_iff_smul continuous_algebraMap_iff_smul\n-/\n\n",
 "continuous_algebraMap":
 "#print continuous_algebraMap /-\n@[continuity]\ntheorem continuous_algebraMap [ContinuousSMul R A] : Continuous (algebraMap R A) :=\n  (continuous_algebraMap_iff_smul R A).2 continuous_smul\n#align continuous_algebra_map continuous_algebraMap\n-/\n\n",
 "continuousSMul_of_algebraMap":
 "#print continuousSMul_of_algebraMap /-\ntheorem continuousSMul_of_algebraMap (h : Continuous (algebraMap R A)) : ContinuousSMul R A :=\n  ⟨(continuous_algebraMap_iff_smul R A).1 h⟩\n#align has_continuous_smul_of_algebra_map continuousSMul_of_algebraMap\n-/\n\n",
 "algebraMapClm_toLinearMap":
 "#print algebraMapClm_toLinearMap /-\ntheorem algebraMapClm_toLinearMap : (algebraMapClm R A).to_linear_map = Algebra.linearMap R A :=\n  rfl\n#align algebra_map_clm_to_linear_map algebraMapClm_toLinearMap\n-/\n\n",
 "algebraMapClm_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n#print algebraMapClm_coe /-\ntheorem algebraMapClm_coe : «expr⇑ » (algebraMapClm R A) = algebraMap R A :=\n  rfl\n#align algebra_map_clm_coe algebraMapClm_coe\n-/\n\n"}