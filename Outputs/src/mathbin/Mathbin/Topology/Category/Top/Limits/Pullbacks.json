{"snd_open_embedding_of_left_open_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem snd_open_embedding_of_left_open_embedding {X Y S : TopCat} {f : «expr ⟶ » X S} (H : OpenEmbedding f)\n    (g : «expr ⟶ » Y S) : OpenEmbedding («expr⇑ » (pullback.snd : «expr ⟶ » (pullback f g) Y)) :=\n  by\n  convert(homeo_of_iso (as_iso (pullback.snd : «expr ⟶ » (pullback ((«expr𝟙») S) g) _))).open_embedding.comp\n      (pullback_map_open_embedding_of_open_embeddings f g ((«expr𝟙») _) g H (homeo_of_iso (iso.refl _)).open_embedding\n        ((«expr𝟙») _) rfl (by simp))\n  erw [← coe_comp]\n  simp\n#align snd_open_embedding_of_left_open_embedding snd_open_embedding_of_left_open_embedding\n\n",
 "snd_iso_of_left_embedding_range_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem snd_iso_of_left_embedding_range_subset {X Y S : TopCat} {f : «expr ⟶ » X S} (hf : Embedding f)\n    (g : «expr ⟶ » Y S) (H : Set.range g ⊆ Set.range f) : IsIso (pullback.snd : «expr ⟶ » (pullback f g) Y) :=\n  by\n  let this : «expr ≃ₜ » (pullback f g : TopCat) Y :=\n    (Homeomorph.ofEmbedding _ (snd_embedding_of_left_embedding hf g)).trans\n      { to_fun := coe\n        inv_fun := fun x =>\n          ⟨x, by\n            rw [pullback_snd_range]\n            exact ⟨_, (H (Set.mem_range_self x)).some_spec⟩⟩\n        left_inv := fun ⟨_, _⟩ => rfl\n        right_inv := fun x => rfl }\n  convert is_iso.of_iso (iso_of_homeo this)\n  ext\n  rfl\n#align snd_iso_of_left_embedding_range_subset snd_iso_of_left_embedding_range_subset\n\n",
 "snd_embedding_of_left_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem snd_embedding_of_left_embedding {X Y S : TopCat} {f : «expr ⟶ » X S} (H : Embedding f) (g : «expr ⟶ » Y S) :\n    Embedding («expr⇑ » (pullback.snd : «expr ⟶ » (pullback f g) Y)) :=\n  by\n  convert(homeo_of_iso (as_iso (pullback.snd : «expr ⟶ » (pullback ((«expr𝟙») S) g) _))).embedding.comp\n      (pullback_map_embedding_of_embeddings f g ((«expr𝟙») _) g H (homeo_of_iso (iso.refl _)).embedding ((«expr𝟙») _)\n        rfl (by simp))\n  erw [← coe_comp]\n  simp\n#align snd_embedding_of_left_embedding snd_embedding_of_left_embedding\n\n",
 "range_pullback_to_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem range_pullback_to_prod {X Y Z : TopCat} (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    Set.range (prod.lift pullback.fst pullback.snd : «expr ⟶ » (pullback f g) («expr ⨯ » X Y)) =\n      { x | («expr ≫ » Limits.prod.fst f) x = («expr ≫ » Limits.prod.snd g) x } :=\n  by\n  ext x\n  constructor\n  · rintro ⟨y, rfl⟩\n    simp only [← comp_apply, Set.mem_setOf_eq]\n    congr 1\n    simp [pullback.condition]\n  · intro h\n    use (pullback_iso_prod_subtype f g).inv ⟨⟨_, _⟩, h⟩\n    apply concrete.limit_ext\n    rintro ⟨⟨⟩⟩ <;> simp\n#align range_pullback_to_prod range_pullback_to_prod\n\n",
 "range_pullback_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If the map `S ⟶ T` is mono, then there is a description of the image of `W ×ₛ X ⟶ Y ×ₜ Z`. -/\ntheorem range_pullback_map {W X Y Z S T : TopCat} (f₁ : «expr ⟶ » W S) (f₂ : «expr ⟶ » X S) (g₁ : «expr ⟶ » Y T)\n    (g₂ : «expr ⟶ » Z T) (i₁ : «expr ⟶ » W Y) (i₂ : «expr ⟶ » X Z) (i₃ : «expr ⟶ » S T) [H₃ : Mono i₃]\n    (eq₁ : «expr ≫ » f₁ i₃ = «expr ≫ » i₁ g₁) (eq₂ : «expr ≫ » f₂ i₃ = «expr ≫ » i₂ g₂) :\n    Set.range (pullback.map f₁ f₂ g₁ g₂ i₁ i₂ i₃ eq₁ eq₂) =\n      «expr ⁻¹' » (pullback.fst : «expr ⟶ » (pullback g₁ g₂) _) (Set.range i₁) ∩\n        «expr ⁻¹' » (pullback.snd : «expr ⟶ » (pullback g₁ g₂) _) (Set.range i₂) :=\n  by\n  ext\n  constructor\n  · rintro ⟨y, rfl⟩\n    simp\n  rintro ⟨⟨x₁, hx₁⟩, ⟨x₂, hx₂⟩⟩\n  have : f₁ x₁ = f₂ x₂ := by\n    apply (TopCat.mono_iff_injective _).mp H₃\n    simp only [← comp_apply, eq₁, eq₂]\n    simp only [comp_apply, hx₁, hx₂]\n    simp only [← comp_apply, pullback.condition]\n  use (pullback_iso_prod_subtype f₁ f₂).inv ⟨⟨x₁, x₂⟩, this⟩\n  apply concrete.limit_ext\n  rintro (_ | _ | _)\n  · simp only [TopCat.comp_app, limit.lift_π_apply, category.assoc, pullback_cone.mk_π_app_one, hx₁,\n      pullback_iso_prod_subtype_inv_fst_apply, Subtype.coe_mk]\n    simp only [← comp_apply]\n    congr\n    apply limit.w _ walking_cospan.hom.inl\n  · simp [hx₁]\n  · simp [hx₂]\n#align range_pullback_map range_pullback_map\n\n",
 "pullback_topology":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem pullback_topology {X Y Z : TopCat.{u}} (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    (pullback f g).topological_space =\n      «expr ⊓ » (induced (pullback.fst : «expr ⟶ » (pullback f g) _) X.topological_space)\n        (induced (pullback.snd : «expr ⟶ » (pullback f g) _) Y.topological_space) :=\n  by\n  let homeo := homeo_of_iso (pullback_iso_prod_subtype f g)\n  refine' homeo.inducing.induced.trans _\n  change induced homeo (induced _ («expr ⊓ » _ _)) = _\n  simpa [induced_compose]\n#align pullback_topology pullback_topology\n\n",
 "pullback_snd_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem pullback_snd_range {X Y S : TopCat} (f : «expr ⟶ » X S) (g : «expr ⟶ » Y S) :\n    Set.range (pullback.snd : «expr ⟶ » (pullback f g) _) = { y : Y | ∃ x : X, f x = g y } :=\n  by\n  ext y\n  constructor\n  · rintro ⟨x, rfl⟩\n    use (pullback.fst : «expr ⟶ » (pullback f g) _) x\n    exact concrete_category.congr_hom pullback.condition x\n  · rintro ⟨x, eq⟩\n    use (TopCat.pullbackIsoProdSubtype f g).inv ⟨⟨x, y⟩, Eq⟩\n    simp\n#align pullback_snd_range pullback_snd_range\n\n",
 "pullback_snd_image_fst_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem pullback_snd_image_fst_preimage (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) (U : Set X) :\n    «expr '' » (pullback.snd : «expr ⟶ » (pullback f g) _) («expr ⁻¹' » (pullback.fst : «expr ⟶ » (pullback f g) _) U) =\n      «expr ⁻¹' » g («expr '' » f U) :=\n  by\n  ext x\n  constructor\n  · rintro ⟨y, hy, rfl⟩\n    exact ⟨(pullback.fst : «expr ⟶ » (pullback f g) _) y, hy, concrete_category.congr_hom pullback.condition y⟩\n  · rintro ⟨y, hy, eq⟩\n    exact ⟨(TopCat.pullbackIsoProdSubtype f g).inv ⟨⟨_, _⟩, Eq⟩, by simpa, by simp⟩\n#align pullback_snd_image_fst_preimage pullback_snd_image_fst_preimage\n\n",
 "pullback_map_open_embedding_of_open_embeddings":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- If there is a diagram where the morphisms `W ⟶ Y` and `X ⟶ Z` are open embeddings, and `S ⟶ T`\nis mono, then the induced morphism `W ×ₛ X ⟶ Y ×ₜ Z` is also an open embedding.\n  W  ⟶  Y\n    ↘      ↘\n      S  ⟶  T\n    ↗       ↗\n  X  ⟶  Z\n-/\ntheorem pullback_map_open_embedding_of_open_embeddings {W X Y Z S T : TopCat} (f₁ : «expr ⟶ » W S) (f₂ : «expr ⟶ » X S)\n    (g₁ : «expr ⟶ » Y T) (g₂ : «expr ⟶ » Z T) {i₁ : «expr ⟶ » W Y} {i₂ : «expr ⟶ » X Z} (H₁ : OpenEmbedding i₁)\n    (H₂ : OpenEmbedding i₂) (i₃ : «expr ⟶ » S T) [H₃ : Mono i₃] (eq₁ : «expr ≫ » f₁ i₃ = «expr ≫ » i₁ g₁)\n    (eq₂ : «expr ≫ » f₂ i₃ = «expr ≫ » i₂ g₂) : OpenEmbedding (pullback.map f₁ f₂ g₁ g₂ i₁ i₂ i₃ eq₁ eq₂) :=\n  by\n  constructor\n  · apply pullback_map_embedding_of_embeddings f₁ f₂ g₁ g₂ H₁.to_embedding H₂.to_embedding i₃ eq₁ eq₂\n  · rw [range_pullback_map]\n    apply IsOpen.inter <;> apply continuous.is_open_preimage\n    continuity\n    exacts[H₁.open_range, H₂.open_range]\n#align pullback_map_open_embedding_of_open_embeddings pullback_map_open_embedding_of_open_embeddings\n\n",
 "pullback_map_embedding_of_embeddings":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-- If there is a diagram where the morphisms `W ⟶ Y` and `X ⟶ Z` are embeddings,\nthen the induced morphism `W ×ₛ X ⟶ Y ×ₜ Z` is also an embedding.\n\n  W  ⟶  Y\n    ↘      ↘\n      S  ⟶  T\n    ↗      ↗\n  X  ⟶  Z\n-/\ntheorem pullback_map_embedding_of_embeddings {W X Y Z S T : TopCat} (f₁ : «expr ⟶ » W S) (f₂ : «expr ⟶ » X S)\n    (g₁ : «expr ⟶ » Y T) (g₂ : «expr ⟶ » Z T) {i₁ : «expr ⟶ » W Y} {i₂ : «expr ⟶ » X Z} (H₁ : Embedding i₁)\n    (H₂ : Embedding i₂) (i₃ : «expr ⟶ » S T) (eq₁ : «expr ≫ » f₁ i₃ = «expr ≫ » i₁ g₁)\n    (eq₂ : «expr ≫ » f₂ i₃ = «expr ≫ » i₂ g₂) : Embedding (pullback.map f₁ f₂ g₁ g₂ i₁ i₂ i₃ eq₁ eq₂) :=\n  by\n  refine'\n    embedding_of_embedding_compose (continuous_map.continuous_to_fun _)\n      (show Continuous (prod.lift pullback.fst pullback.snd : «expr ⟶ » (pullback g₁ g₂) («expr ⨯ » Y Z)) from\n        continuous_map.continuous_to_fun _)\n      _\n  suffices\n    Embedding («expr ≫ » (prod.lift pullback.fst pullback.snd) (limits.prod.map i₁ i₂) : «expr ⟶ » (pullback f₁ f₂) _)\n    by simpa [← coe_comp] using this\n  rw [coe_comp]\n  refine' Embedding.comp (embedding_prod_map H₁ H₂) (embedding_pullback_to_prod _ _)\n#align pullback_map_embedding_of_embeddings pullback_map_embedding_of_embeddings\n\n",
 "pullback_iso_prod_subtype_inv_snd_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem pullback_iso_prod_subtype_inv_snd_apply (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z)\n    (x : { p : X × Y // f p.1 = g p.2 }) :\n    (pullback.snd : «expr ⟶ » (pullback f g) _) ((pullbackIsoProdSubtype f g).inv x) = (x : X × Y).snd :=\n  ConcreteCategory.congr_hom (pullbackIsoProdSubtype_inv_snd f g) x\n#align pullback_iso_prod_subtype_inv_snd_apply pullback_iso_prod_subtype_inv_snd_apply\n\n",
 "pullback_iso_prod_subtype_inv_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, reassoc.1]\ntheorem pullback_iso_prod_subtype_inv_snd (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    «expr ≫ » (pullbackIsoProdSubtype f g).inv pullback.snd = pullbackSnd f g := by simpa [pullback_iso_prod_subtype]\n#align pullback_iso_prod_subtype_inv_snd pullback_iso_prod_subtype_inv_snd\n\n",
 "pullback_iso_prod_subtype_inv_fst_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem pullback_iso_prod_subtype_inv_fst_apply (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z)\n    (x : { p : X × Y // f p.1 = g p.2 }) :\n    (pullback.fst : «expr ⟶ » (pullback f g) _) ((pullbackIsoProdSubtype f g).inv x) = (x : X × Y).fst :=\n  ConcreteCategory.congr_hom (pullbackIsoProdSubtype_inv_fst f g) x\n#align pullback_iso_prod_subtype_inv_fst_apply pullback_iso_prod_subtype_inv_fst_apply\n\n",
 "pullback_iso_prod_subtype_inv_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/-\nCopyright (c) 2017 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Scott Morrison, Mario Carneiro, Andrew Yang\n-/\n@[simp, reassoc.1]\ntheorem pullback_iso_prod_subtype_inv_fst (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    «expr ≫ » (pullbackIsoProdSubtype f g).inv pullback.fst = pullbackFst f g := by simpa [pullback_iso_prod_subtype]\n#align pullback_iso_prod_subtype_inv_fst pullback_iso_prod_subtype_inv_fst\n\n",
 "pullback_iso_prod_subtype_hom_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem pullback_iso_prod_subtype_hom_snd (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    «expr ≫ » (pullbackIsoProdSubtype f g).hom (pullbackSnd f g) = pullback.snd := by\n  rw [← iso.eq_inv_comp, pullback_iso_prod_subtype_inv_snd]\n#align pullback_iso_prod_subtype_hom_snd pullback_iso_prod_subtype_hom_snd\n\n",
 "pullback_iso_prod_subtype_hom_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem pullback_iso_prod_subtype_hom_fst (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    «expr ≫ » (pullbackIsoProdSubtype f g).hom (pullbackFst f g) = pullback.fst := by\n  rw [← iso.eq_inv_comp, pullback_iso_prod_subtype_inv_fst]\n#align pullback_iso_prod_subtype_hom_fst pullback_iso_prod_subtype_hom_fst\n\n",
 "pullback_iso_prod_subtype_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem pullback_iso_prod_subtype_hom_apply {f : «expr ⟶ » X Z} {g : «expr ⟶ » Y Z} (x : pullback f g) :\n    (pullbackIsoProdSubtype f g).hom x =\n      ⟨⟨(pullback.fst : «expr ⟶ » (pullback f g) _) x, (pullback.snd : «expr ⟶ » (pullback f g) _) x⟩, by\n        simpa using concrete_category.congr_hom pullback.condition x⟩ :=\n  by\n  ext\n  exacts[concrete_category.congr_hom (pullback_iso_prod_subtype_hom_fst f g) x,\n    concrete_category.congr_hom (pullback_iso_prod_subtype_hom_snd f g) x]\n#align pullback_iso_prod_subtype_hom_apply pullback_iso_prod_subtype_hom_apply\n\n",
 "pullback_fst_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem pullback_fst_range {X Y S : TopCat} (f : «expr ⟶ » X S) (g : «expr ⟶ » Y S) :\n    Set.range (pullback.fst : «expr ⟶ » (pullback f g) _) = { x : X | ∃ y : Y, f x = g y } :=\n  by\n  ext x\n  constructor\n  · rintro ⟨y, rfl⟩\n    use (pullback.snd : «expr ⟶ » (pullback f g) _) y\n    exact concrete_category.congr_hom pullback.condition y\n  · rintro ⟨y, eq⟩\n    use (TopCat.pullbackIsoProdSubtype f g).inv ⟨⟨x, y⟩, Eq⟩\n    simp\n#align pullback_fst_range pullback_fst_range\n\n",
 "pullback_fst_image_snd_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem pullback_fst_image_snd_preimage (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) (U : Set Y) :\n    «expr '' » (pullback.fst : «expr ⟶ » (pullback f g) _) («expr ⁻¹' » (pullback.snd : «expr ⟶ » (pullback f g) _) U) =\n      «expr ⁻¹' » f («expr '' » g U) :=\n  by\n  ext x\n  constructor\n  · rintro ⟨y, hy, rfl⟩\n    exact ⟨(pullback.snd : «expr ⟶ » (pullback f g) _) y, hy, (concrete_category.congr_hom pullback.condition y).symm⟩\n  · rintro ⟨y, hy, eq⟩\n    exact ⟨(TopCat.pullbackIsoProdSubtype f g).inv ⟨⟨_, _⟩, Eq.symm⟩, by simpa, by simp⟩\n#align pullback_fst_image_snd_preimage pullback_fst_image_snd_preimage\n\n",
 "open_embedding_of_pullback_open_embeddings":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- If `X ⟶ S`, `Y ⟶ S` are open embeddings, then so is `X ×ₛ Y ⟶ S`. -/\ntheorem open_embedding_of_pullback_open_embeddings {X Y S : TopCat} {f : «expr ⟶ » X S} {g : «expr ⟶ » Y S}\n    (H₁ : OpenEmbedding f) (H₂ : OpenEmbedding g) : OpenEmbedding (limit.π (cospan f g) WalkingCospan.one) :=\n  by\n  convert H₂.comp (snd_open_embedding_of_left_open_embedding H₁ g)\n  erw [← coe_comp]\n  congr\n  exact (limit.w _ walking_cospan.hom.inr).symm\n#align open_embedding_of_pullback_open_embeddings open_embedding_of_pullback_open_embeddings\n\n",
 "inducing_pullback_to_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\ntheorem inducing_pullback_to_prod {X Y Z : TopCat} (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    Inducing («expr⇑ » (prod.lift pullback.fst pullback.snd : «expr ⟶ » (pullback f g) («expr ⨯ » X Y))) :=\n  ⟨by simp [prod_topology, pullback_topology, induced_compose, ← coe_comp]⟩\n#align inducing_pullback_to_prod inducing_pullback_to_prod\n\n",
 "fst_open_embedding_of_right_open_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem fst_open_embedding_of_right_open_embedding {X Y S : TopCat} (f : «expr ⟶ » X S) {g : «expr ⟶ » Y S}\n    (H : OpenEmbedding g) : OpenEmbedding («expr⇑ » (pullback.fst : «expr ⟶ » (pullback f g) X)) :=\n  by\n  convert(homeo_of_iso (as_iso (pullback.fst : «expr ⟶ » (pullback f ((«expr𝟙») S)) _))).open_embedding.comp\n      (pullback_map_open_embedding_of_open_embeddings f g f ((«expr𝟙») _) (homeo_of_iso (iso.refl _)).open_embedding H\n        ((«expr𝟙») _) rfl (by simp))\n  erw [← coe_comp]\n  simp\n#align fst_open_embedding_of_right_open_embedding fst_open_embedding_of_right_open_embedding\n\n",
 "fst_iso_of_right_embedding_range_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem fst_iso_of_right_embedding_range_subset {X Y S : TopCat} (f : «expr ⟶ » X S) {g : «expr ⟶ » Y S}\n    (hg : Embedding g) (H : Set.range f ⊆ Set.range g) : IsIso (pullback.fst : «expr ⟶ » (pullback f g) X) :=\n  by\n  let this : «expr ≃ₜ » (pullback f g : TopCat) X :=\n    (Homeomorph.ofEmbedding _ (fst_embedding_of_right_embedding f hg)).trans\n      { to_fun := coe\n        inv_fun := fun x =>\n          ⟨x, by\n            rw [pullback_fst_range]\n            exact ⟨_, (H (Set.mem_range_self x)).some_spec.symm⟩⟩\n        left_inv := fun ⟨_, _⟩ => rfl\n        right_inv := fun x => rfl }\n  convert is_iso.of_iso (iso_of_homeo this)\n  ext\n  rfl\n#align fst_iso_of_right_embedding_range_subset fst_iso_of_right_embedding_range_subset\n\n",
 "fst_embedding_of_right_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem fst_embedding_of_right_embedding {X Y S : TopCat} (f : «expr ⟶ » X S) {g : «expr ⟶ » Y S} (H : Embedding g) :\n    Embedding («expr⇑ » (pullback.fst : «expr ⟶ » (pullback f g) X)) :=\n  by\n  convert(homeo_of_iso (as_iso (pullback.fst : «expr ⟶ » (pullback f ((«expr𝟙») S)) _))).embedding.comp\n      (pullback_map_embedding_of_embeddings f g f ((«expr𝟙») _) (homeo_of_iso (iso.refl _)).embedding H ((«expr𝟙») _)\n        rfl (by simp))\n  erw [← coe_comp]\n  simp\n#align fst_embedding_of_right_embedding fst_embedding_of_right_embedding\n\n",
 "embedding_pullback_to_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⨯ » -/\ntheorem embedding_pullback_to_prod {X Y Z : TopCat} (f : «expr ⟶ » X Z) (g : «expr ⟶ » Y Z) :\n    Embedding («expr⇑ » (prod.lift pullback.fst pullback.snd : «expr ⟶ » (pullback f g) («expr ⨯ » X Y))) :=\n  ⟨inducing_pullback_to_prod f g, (TopCat.mono_iff_injective _).mp inferInstance⟩\n#align embedding_pullback_to_prod embedding_pullback_to_prod\n\n",
 "embedding_of_pullback_embeddings":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem embedding_of_pullback_embeddings {X Y S : TopCat} {f : «expr ⟶ » X S} {g : «expr ⟶ » Y S} (H₁ : Embedding f)\n    (H₂ : Embedding g) : Embedding (limit.π (cospan f g) WalkingCospan.one) :=\n  by\n  convert H₂.comp (snd_embedding_of_left_embedding H₁ g)\n  erw [← coe_comp]\n  congr\n  exact (limit.w _ walking_cospan.hom.inr).symm\n#align embedding_of_pullback_embeddings embedding_of_pullback_embeddings\n\n",
 "colimit_topology":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem colimit_topology (F : «expr ⥤ » J TopCat.{max v u}) :\n    (colimit F).topological_space =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        ((F.obj j).topological_space.coinduced (colimit.ι F j)) :=\n  coinduced_of_isColimit _ (colimit.isColimit F)\n#align colimit_topology colimit_topology\n\n",
 "colimit_is_open_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem colimit_is_open_iff (F : «expr ⥤ » J TopCat.{max v u}) (U : Set ((colimit F : _) : Type max v u)) :\n    IsOpen U ↔ ∀ j, IsOpen («expr ⁻¹' » (colimit.ι F j) U) :=\n  by\n  conv_lhs => rw [colimit_topology F]\n  exact isOpen_supᵢ_iff\n#align colimit_is_open_iff colimit_is_open_iff\n\n",
 "coinduced_of_is_colimit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem coinduced_of_is_colimit {F : «expr ⥤ » J TopCat.{max v u}} (c : Cocone F) (hc : IsColimit c) :\n    c.X.topological_space =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        ((F.obj j).topological_space.coinduced (c.ι.app j)) :=\n  by\n  let homeo := homeo_of_iso (hc.cocone_point_unique_up_to_iso (colimit_cocone_is_colimit F))\n  ext\n  refine' homeo.symm.is_open_preimage.symm.trans (iff.trans _ is_open_supr_iff.symm)\n  exact isOpen_supᵢ_iff\n#align coinduced_of_is_colimit coinduced_of_is_colimit\n\n",
 "coequalizer_is_open_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem coequalizer_is_open_iff (F : «expr ⥤ » WalkingParallelPair TopCat.{u}) (U : Set ((colimit F : _) : Type u)) :\n    IsOpen U ↔ IsOpen («expr ⁻¹' » (colimit.ι F walking_parallel_pair.one) U) :=\n  by\n  rw [colimit_isOpen_iff.{u}]\n  constructor\n  · intro H\n    exact H _\n  · intro H j\n    cases j\n    · rw [← colimit.w F walking_parallel_pair_hom.left]\n      exact (F.map walking_parallel_pair_hom.left).continuous_to_fun.is_open_preimage _ H\n    · exact H\n#align coequalizer_is_open_iff coequalizer_is_open_iff\n\n"}