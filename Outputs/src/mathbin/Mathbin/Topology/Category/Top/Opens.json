{"to_Top_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem to_Top_map (X : TopCat.{u}) {U V : Opens X} {f : «expr ⟶ » U V} {x} {h} :\n    ((toTopCat X).map f) ⟨x, h⟩ = ⟨x, f.le h⟩ :=\n  rfl\n#align to_Top_map to_Top_map\n\n",
 "open_embedding_obj_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem open_embedding_obj_top {X : TopCat} (U : Opens X) : U.open_embedding.is_open_map.functor.obj («expr⊤») = U :=\n  by\n  ext1\n  exact set.image_univ.trans Subtype.range_coe\n#align open_embedding_obj_top open_embedding_obj_top\n\n",
 "op_map_id_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem op_map_id_obj (U : «expr ᵒᵖ» (Opens X)) : (map ((«expr𝟙») X)).op.obj U = U := by simp\n#align op_map_id_obj op_map_id_obj\n\n",
 "op_map_comp_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem op_map_comp_obj (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) (U) :\n    (map («expr ≫ » f g)).op.obj U = (map f).op.obj ((map g).op.obj U) :=\n  rfl\n#align op_map_comp_obj op_map_comp_obj\n\n",
 "map_supᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print map_supᵢ /-\ntheorem map_supᵢ (f : «expr ⟶ » X Y) {ι : Type _} (U : ι → Opens Y) : (map f).obj (supᵢ U) = supᵢ ((map f).obj ∘ U) :=\n  by\n  ext1; rw [supr_def, supr_def, map_obj]\n  dsimp; rw [Set.preimage_unionᵢ]; rfl\n#align map_supr map_supᵢ\n-/\n\n",
 "map_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem map_obj (f : «expr ⟶ » X Y) (U) (p) : (map f).obj ⟨U, p⟩ = ⟨«expr ⁻¹' » f U, p.preimage f.continuous⟩ :=\n  rfl\n#align map_obj map_obj\n\n",
 "map_iso_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_iso_refl (f : «expr ⟶ » X Y) (h) : mapIso f f h = Iso.refl (map _) :=\n  rfl\n#align map_iso_refl map_iso_refl\n\n",
 "map_iso_inv_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_iso_inv_app (f g : «expr ⟶ » X Y) (h : f = g) (U : Opens Y) :\n    (mapIso f g h).inv.app U = eqToHom (congr_fun (congr_arg functor.obj (congr_arg map h.symm)) U) :=\n  rfl\n#align map_iso_inv_app map_iso_inv_app\n\n",
 "map_iso_hom_app":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem map_iso_hom_app (f g : «expr ⟶ » X Y) (h : f = g) (U : Opens Y) :\n    (mapIso f g h).hom.app U = eqToHom (congr_fun (congr_arg functor.obj (congr_arg map h)) U) :=\n  rfl\n#align map_iso_hom_app map_iso_hom_app\n\n",
 "map_id_obj_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem map_id_obj_unop (U : «expr ᵒᵖ» (Opens X)) : (map ((«expr𝟙») X)).obj (unop U) = unop U :=\n  let ⟨_, _⟩ := U.unop\n  rfl\n#align map_id_obj_unop map_id_obj_unop\n\n",
 "map_id_obj'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem map_id_obj' (U) (p) : (map ((«expr𝟙») X)).obj ⟨U, p⟩ = ⟨U, p⟩ :=\n  rfl\n#align map_id_obj' map_id_obj'\n\n",
 "map_id_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n@[simp]\ntheorem map_id_obj (U : Opens X) : (map ((«expr𝟙») X)).obj U = U :=\n  let ⟨_, _⟩ := U\n  rfl\n#align map_id_obj map_id_obj\n\n",
 "map_id_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟭» -/\ntheorem map_id_eq : map ((«expr𝟙») X) = («expr𝟭») (Opens X) :=\n  by\n  unfold map\n  congr\n  ext\n  rfl\n  ext\n#align map_id_eq map_id_eq\n\n",
 "map_functor_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem map_functor_eq' {X U : TopCat} (f : «expr ⟶ » U X) (hf : OpenEmbedding f) (V) :\n    ((Opens.map f).obj <| hf.is_open_map.functor.obj V) = V :=\n  Opens.ext <| Set.preimage_image_eq _ hf.inj\n#align map_functor_eq' map_functor_eq'\n\n",
 "map_functor_eq":
 "@[simp]\ntheorem map_functor_eq {X : TopCat} {U : Opens X} (V : Opens U) :\n    ((Opens.map U.inclusion).obj <| U.open_embedding.is_open_map.functor.obj V) = V :=\n  TopologicalSpace.Opens.map_functor_eq' _ U.open_embedding V\n#align map_functor_eq map_functor_eq\n\n",
 "map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n-- We could make `f g` implicit here, but it's nice to be able to see when\n-- they are the identity (often!)\ntheorem map_eq (f g : «expr ⟶ » X Y) (h : f = g) : map f = map g :=\n  by\n  unfold map\n  congr\n  ext\n  rw [h]\n  rw [h]\n  assumption'\n#align map_eq map_eq\n\n",
 "map_comp_obj_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_comp_obj_unop (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) (U) :\n    (map («expr ≫ » f g)).obj (unop U) = (map f).obj ((map g).obj (unop U)) :=\n  rfl\n#align map_comp_obj_unop map_comp_obj_unop\n\n",
 "map_comp_obj'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_comp_obj' (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) (U) (p) :\n    (map («expr ≫ » f g)).obj ⟨U, p⟩ = (map f).obj ((map g).obj ⟨U, p⟩) :=\n  rfl\n#align map_comp_obj' map_comp_obj'\n\n",
 "map_comp_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_comp_obj (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) (U) :\n    (map («expr ≫ » f g)).obj U = (map f).obj ((map g).obj U) :=\n  rfl\n#align map_comp_obj map_comp_obj\n\n",
 "map_comp_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem map_comp_map (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) {U V} (i : «expr ⟶ » U V) :\n    (map («expr ≫ » f g)).map i = (map f).map ((map g).map i) :=\n  rfl\n#align map_comp_map map_comp_map\n\n",
 "map_comp_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\ntheorem map_comp_eq (f : «expr ⟶ » X Y) (g : «expr ⟶ » Y Z) : map («expr ≫ » f g) = «expr ⋙ » (map g) (map f) :=\n  rfl\n#align map_comp_eq map_comp_eq\n\n",
 "map_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem map_coe (f : «expr ⟶ » X Y) (U : Opens Y) : ↑((map f).obj U) = «expr ⁻¹' » f U :=\n  rfl\n#align map_coe map_coe\n\n",
 "le_supr_apply_mk":
 "@[simp]\ntheorem le_supr_apply_mk {ι : Type _} (U : ι → Opens X) (i : ι) (x) (m) :\n    (leSupr U i) ⟨x, m⟩ = ⟨x, (le_supᵢ U i : _) m⟩ :=\n  rfl\n#align le_supr_apply_mk le_supr_apply_mk\n\n",
 "inf_le_left_apply_mk":
 "@[simp]\ntheorem inf_le_left_apply_mk (U V : Opens X) (x) (m) : (infLELeft U V) ⟨x, m⟩ = ⟨x, (@inf_le_left _ _ U V : _ ≤ _) m⟩ :=\n  rfl\n#align inf_le_left_apply_mk inf_le_left_apply_mk\n\n",
 "inf_le_left_apply":
 "/-\nCopyright (c) 2019 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- This is tedious, but necessary because we decided not to allow Prop as morphisms in a category...\n-- We do not mark this as a simp lemma because it breaks open `x`.\n-- Nevertheless, it is useful in `sheaf_of_functions`.\ntheorem inf_le_left_apply (U V : Opens X) (x) : (infLELeft U V) x = ⟨x.1, (@inf_le_left _ _ U V : _ ≤ _) x.2⟩ :=\n  rfl\n#align inf_le_left_apply inf_le_left_apply\n\n",
 "inclusion_top_functor":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem inclusion_top_functor (X : TopCat) :\n    (@Opens.openEmbedding X («expr⊤»)).is_open_map.functor = map (inclusionTopIso X).inv :=\n  by\n  apply functor.hext; intro ;\n  abstract obj_eq \n    ext\n    exact ⟨fun ⟨⟨_, _⟩, h, rfl⟩ => h, fun h => ⟨⟨x, trivial⟩, h, rfl⟩⟩\n  intros ; apply subsingleton.helim; congr 1\n  iterate 2 apply inclusion_top_functor.obj_eq\n#align inclusion_top_functor inclusion_top_functor\n\n",
 "inclusion_map_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem inclusion_map_eq_top {X : TopCat} (U : Opens X) : (Opens.map U.inclusion).obj U = «expr⊤» :=\n  by\n  ext1\n  exact Subtype.coe_preimage_self _\n#align inclusion_map_eq_top inclusion_map_eq_top\n\n",
 "functor_obj_map_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem functor_obj_map_obj {X Y : TopCat} {f : «expr ⟶ » X Y} (hf : IsOpenMap f) (U : Opens Y) :\n    hf.functor.obj ((Opens.map f).obj U) = «expr ⊓ » (hf.functor.obj («expr⊤»)) U :=\n  by\n  ext; constructor\n  · rintro ⟨x, hx, rfl⟩\n    exact ⟨⟨x, trivial, rfl⟩, hx⟩\n  · rintro ⟨⟨x, -, rfl⟩, hx⟩\n    exact ⟨x, hx, rfl⟩\n#align functor_obj_map_obj functor_obj_map_obj\n\n",
 "functor_map_eq_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem functor_map_eq_inf {X : TopCat} (U V : Opens X) :\n    U.open_embedding.is_open_map.functor.obj ((Opens.map U.inclusion).obj V) = «expr ⊓ » V U :=\n  by\n  ext1\n  refine' set.image_preimage_eq_inter_range.trans _\n  simpa\n#align functor_map_eq_inf functor_map_eq_inf\n\n",
 "adjunction_counit_map_functor":
 "@[simp]\ntheorem adjunction_counit_map_functor {X : TopCat} {U : Opens X} (V : Opens U) :\n    U.open_embedding.is_open_map.adjunction.counit.app (U.open_embedding.is_open_map.functor.obj V) =\n      eqToHom\n        (by\n          conv_rhs => rw [← V.map_functor_eq]\n          rfl) :=\n  by ext\n#align adjunction_counit_map_functor adjunction_counit_map_functor\n\n",
 "adjunction_counit_app_self":
 "@[simp]\ntheorem adjunction_counit_app_self {X : TopCat} (U : Opens X) :\n    U.open_embedding.is_open_map.adjunction.counit.app U = eqToHom (by simp) := by ext\n#align adjunction_counit_app_self adjunction_counit_app_self\n\n",
 "OpenEmbedding":
 "#print OpenEmbedding /-\ntheorem OpenEmbedding {X : TopCat.{u}} (U : Opens X) : OpenEmbedding (inclusion U) :=\n  IsOpen.openEmbedding_subtype_val U.2\n#align open_embedding OpenEmbedding\n-/\n\n"}