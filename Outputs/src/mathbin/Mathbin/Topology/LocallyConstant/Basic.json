{"unflip_flip":
 "@[simp]\ntheorem unflip_flip {X α β : Type _} [Fintype α] [TopologicalSpace X] (f : LocallyConstant X (α → β)) :\n    unflip f.flip = f := by\n  ext\n  rfl\n#align unflip_flip unflip_flip\n\n",
 "to_fun_eq_coe":
 "@[simp]\ntheorem to_fun_eq_coe (f : LocallyConstant X Y) : f.to_fun = f :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "to_continuous_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem to_continuous_map_injective : function.injective (toContinuousMap : LocallyConstant X Y → «exprC( , )» X Y) :=\n  fun _ _ h => ext (ContinuousMap.congr_fun h)\n#align to_continuous_map_injective to_continuous_map_injective\n\n",
 "to_continuous_map_eq_coe":
 "@[simp]\ntheorem to_continuous_map_eq_coe : f.to_continuous_map = f :=\n  rfl\n#align to_continuous_map_eq_coe to_continuous_map_eq_coe\n\n",
 "tfae":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\nprotected theorem tfae (f : X → Y) :\n    TFAE\n      [IsLocallyConstant f,\n        ∀ x,\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n            ((nhds) x) (f x' = f x),\n        ∀ x, IsOpen { x' | f x' = f x }, ∀ y, IsOpen («expr ⁻¹' » f {y}),\n        ∀ x, ∃ (U : Set X)(hU : IsOpen U)(hx : x ∈ U), ∀ x' ∈ U, f x' = f x] :=\n  by\n  tfae_have 1 → 4; exact fun h y => h {y}\n  tfae_have 4 → 3; exact fun h x => h (f x)\n  tfae_have 3 → 2; exact fun h x => IsOpen.mem_nhds (h x) rfl\n  tfae_have 2 → 5\n  · intro h x\n    rcases mem_nhds_iff.1 (h x) with ⟨U, eq, hU, hx⟩\n    exact ⟨U, hU, hx, Eq⟩\n  tfae_have 5 → 1\n  · intro h s\n    refine' isOpen_iff_forall_mem_open.2 fun x hx => _\n    rcases h x with ⟨U, hU, hxU, eq⟩\n    exact ⟨U, fun x' hx' => mem_preimage.2 <| (Eq x' hx').symm ▸ hx, hU, hxU⟩\n  tfae_finish\n#align tfae tfae\n\n",
 "range_finite":
 "theorem range_finite [CompactSpace X] (f : LocallyConstant X Y) : (Set.range f).finite :=\n  f.is_locally_constant.range_finite\n#align range_finite range_finite\n\n",
 "prod_mk":
 "theorem prod_mk {Y'} {f : X → Y} {f' : X → Y'} (hf : IsLocallyConstant f) (hf' : IsLocallyConstant f') :\n    IsLocallyConstant fun x => (f x, f' x) :=\n  (iff_eventually_eq _).2 fun x =>\n    (hf.eventually_eq x).mp <| (hf'.eventually_eq x).mono fun x' hf' hf => Prod.ext hf hf'\n#align prod_mk prod_mk\n\n",
 "one":
 "@[to_additive]\ntheorem one [One Y] : IsLocallyConstant (1 : X → Y) :=\n  const 1\n#align one one\n\n",
 "of_discrete":
 "@[nontriviality]\ntheorem of_discrete [DiscreteTopology X] (f : X → Y) : IsLocallyConstant f := fun s => isOpen_discrete _\n#align of_discrete of_discrete\n\n",
 "of_constant_on_preconnected_clopens":
 "theorem of_constant_on_preconnected_clopens [LocallyConnectedSpace X] {f : X → Y}\n    (h : ∀ U : Set X, IsPreconnected U → IsClopen U → ∀ x ∈ U, ∀ y ∈ U, f y = f x) : IsLocallyConstant f :=\n  of_constant_on_connected_components fun x =>\n    h (connectedComponent x) isPreconnected_connectedComponent isClopen_connectedComponent x mem_connectedComponent\n#align of_constant_on_preconnected_clopens of_constant_on_preconnected_clopens\n\n",
 "of_constant_on_connected_components":
 "theorem of_constant_on_connected_components [LocallyConnectedSpace X] {f : X → Y}\n    (h : ∀ x, ∀ y ∈ connectedComponent x, f y = f x) : IsLocallyConstant f :=\n  by\n  rw [iff_exists_open]\n  exact fun x => ⟨connectedComponent x, isOpen_connectedComponent, mem_connectedComponent, h x⟩\n#align of_constant_on_connected_components of_constant_on_connected_components\n\n",
 "of_constant":
 "theorem of_constant (f : X → Y) (h : ∀ x y, f x = f y) : IsLocallyConstant f :=\n  (iff_eventually_eq f).2 fun x => eventually_of_forall fun x' => h _ _\n#align of_constant of_constant\n\n",
 "of_clopen_fiber_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem of_clopen_fiber_zero {X : Type _} [TopologicalSpace X] {U : Set X} [∀ x, Decidable (x ∈ U)] (hU : IsClopen U) :\n    «expr ⁻¹' » (ofClopen hU) ({0} : Set (Fin 2)) = U := by\n  ext\n  simp only [of_clopen, mem_singleton_iff, Fin.one_eq_zero_iff, coe_mk, mem_preimage, ite_eq_left_iff,\n    Nat.succ_succ_ne_one]\n  tauto\n#align of_clopen_fiber_zero of_clopen_fiber_zero\n\n",
 "of_clopen_fiber_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem of_clopen_fiber_one {X : Type _} [TopologicalSpace X] {U : Set X} [∀ x, Decidable (x ∈ U)] (hU : IsClopen U) :\n    «expr ⁻¹' » (ofClopen hU) ({1} : Set (Fin 2)) = «expr ᶜ» U :=\n  by\n  ext\n  simp only [of_clopen, mem_singleton_iff, coe_mk, Fin.zero_eq_one_iff, mem_preimage, ite_eq_right_iff, mem_compl_iff,\n    Nat.succ_succ_ne_one]\n  tauto\n#align of_clopen_fiber_one of_clopen_fiber_one\n\n",
 "mul_indicator_of_not_mem":
 "@[to_additive]\ntheorem mul_indicator_of_not_mem (hU : IsClopen U) (h : a ∉ U) : f.mul_indicator hU a = 1 :=\n  by\n  rw [mul_indicator_apply]\n  apply Set.mulIndicator_of_not_mem h\n#align mul_indicator_of_not_mem mul_indicator_of_not_mem\n\n",
 "mul_indicator_of_mem":
 "@[to_additive]\ntheorem mul_indicator_of_mem (hU : IsClopen U) (h : a ∈ U) : f.mul_indicator hU a = f a :=\n  by\n  rw [mul_indicator_apply]\n  apply Set.mulIndicator_of_mem h\n#align mul_indicator_of_mem mul_indicator_of_mem\n\n",
 "mul_indicator_apply_eq_if":
 "@[to_additive]\ntheorem mul_indicator_apply_eq_if (hU : IsClopen U) : mulIndicator f hU a = if a ∈ U then f a else 1 :=\n  Set.mulIndicator_apply U f a\n#align mul_indicator_apply_eq_if mul_indicator_apply_eq_if\n\n",
 "mul":
 "@[to_additive]\ntheorem mul [Mul Y] ⦃f g : X → Y⦄ (hf : IsLocallyConstant f) (hg : IsLocallyConstant g) : IsLocallyConstant (f * g) :=\n  hf.comp₂ hg (· * ·)\n#align mul mul\n\n",
 "map_id":
 "@[simp]\ntheorem map_id : @map X Y Y _ id = id := by\n  ext\n  rfl\n#align map_id map_id\n\n",
 "map_comp":
 "@[simp]\ntheorem map_comp {Y₁ Y₂ Y₃ : Type _} (g : Y₂ → Y₃) (f : Y₁ → Y₂) : @map X _ _ _ g ∘ map f = map (g ∘ f) :=\n  by\n  ext\n  rfl\n#align map_comp map_comp\n\n",
 "map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem map_apply (f : Y → Z) (g : LocallyConstant X Y) : «expr⇑ » (map f g) = f ∘ g :=\n  rfl\n#align map_apply map_apply\n\n",
 "locally_constant_eq_of_fiber_zero_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem locally_constant_eq_of_fiber_zero_eq {X : Type _} [TopologicalSpace X] (f g : LocallyConstant X (Fin 2))\n    (h : «expr ⁻¹' » f ({0} : Set (Fin 2)) = «expr ⁻¹' » g {0}) : f = g :=\n  by\n  simp only [Set.ext_iff, mem_singleton_iff, mem_preimage] at h\n  ext1 x\n  exact Fin.fin_two_eq_of_eq_zero_iff (h x)\n#align locally_constant_eq_of_fiber_zero_eq locally_constant_eq_of_fiber_zero_eq\n\n",
 "is_open_fiber":
 "theorem is_open_fiber {f : X → Y} (hf : IsLocallyConstant f) (y : Y) : IsOpen { x | f x = y } :=\n  hf {y}\n#align is_open_fiber is_open_fiber\n\n",
 "is_closed_fiber":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_closed_fiber {f : X → Y} (hf : IsLocallyConstant f) (y : Y) : IsClosed { x | f x = y } :=\n  ⟨hf («expr ᶜ» {y})⟩\n#align is_closed_fiber is_closed_fiber\n\n",
 "is_clopen_fiber":
 "theorem is_clopen_fiber {f : X → Y} (hf : IsLocallyConstant f) (y : Y) : IsClopen { x | f x = y } :=\n  ⟨isOpen_fiber hf _, isClosed_fiber hf _⟩\n#align is_clopen_fiber is_clopen_fiber\n\n",
 "inv":
 "@[to_additive]\ntheorem inv [Inv Y] ⦃f : X → Y⦄ (hf : IsLocallyConstant f) : IsLocallyConstant f⁻¹ :=\n  hf.comp fun x => x⁻¹\n#align inv inv\n\n",
 "iff_is_const":
 "theorem iff_is_const [PreconnectedSpace X] {f : X → Y} : IsLocallyConstant f ↔ ∀ x y, f x = f y :=\n  ⟨fun h x y => h.apply_eq_of_is_preconnected is_preconnected_univ trivial trivial, of_constant _⟩\n#align iff_is_const iff_is_const\n\n",
 "iff_exists_open":
 "theorem iff_exists_open (f : X → Y) :\n    IsLocallyConstant f ↔ ∀ x, ∃ (U : Set X)(hU : IsOpen U)(hx : x ∈ U), ∀ x' ∈ U, f x' = f x :=\n  (IsLocallyConstant.tfae f).out 0 4\n#align iff_exists_open iff_exists_open\n\n",
 "iff_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem iff_eventually_eq (f : X → Y) :\n    IsLocallyConstant f ↔\n      ∀ x,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n          ((nhds) x) (f y = f x) :=\n  (IsLocallyConstant.tfae f).out 0 1\n#align iff_eventually_eq iff_eventually_eq\n\n",
 "iff_continuous":
 "theorem iff_continuous {_ : TopologicalSpace Y} [DiscreteTopology Y] (f : X → Y) : IsLocallyConstant f ↔ Continuous f :=\n  ⟨IsLocallyConstant.continuous, fun h s => h.is_open_preimage s (isOpen_discrete _)⟩\n#align iff_continuous iff_continuous\n\n",
 "flip_unflip":
 "@[simp]\ntheorem flip_unflip {X α β : Type _} [Fintype α] [TopologicalSpace X] (f : α → LocallyConstant X β) :\n    (unflip f).flip = f := by\n  ext\n  rfl\n#align flip_unflip flip_unflip\n\n",
 "ext_iff":
 "theorem ext_iff {f g : LocallyConstant X Y} : f = g ↔ ∀ x, f x = g x :=\n  ⟨fun h x => h ▸ rfl, fun h => ext h⟩\n#align ext_iff ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem ext ⦃f g : LocallyConstant X Y⦄ (h : ∀ x, f x = g x) : f = g :=\n  coe_injective (funext h)\n#align ext ext\n\n",
 "exists_open":
 "theorem exists_open {f : X → Y} (hf : IsLocallyConstant f) (x : X) :\n    ∃ (U : Set X)(hU : IsOpen U)(hx : x ∈ U), ∀ x' ∈ U, f x' = f x :=\n  (iff_exists_open f).1 hf x\n#align exists_open exists_open\n\n",
 "exists_eq_const":
 "theorem exists_eq_const [PreconnectedSpace X] [Nonempty Y] (f : LocallyConstant X Y) : ∃ y, f = const X y :=\n  by\n  rcases classical.em (Nonempty X) with (⟨⟨x⟩⟩ | hX)\n  · exact ⟨f x, f.eq_const x⟩\n  · exact ⟨Classical.arbitrary Y, ext fun x => (hX ⟨x⟩).elim⟩\n#align exists_eq_const exists_eq_const\n\n",
 "eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\nprotected theorem eventually_eq {f : X → Y} (hf : IsLocallyConstant f) (x : X) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" ((nhds) x)\n      (f y = f x) :=\n  (iff_eventually_eq f).1 hf x\n#align eventually_eq eventually_eq\n\n",
 "eq_const":
 "theorem eq_const [PreconnectedSpace X] (f : LocallyConstant X Y) (x : X) : f = const X (f x) :=\n  ext fun y => apply_eq_of_preconnectedSpace f _ _\n#align eq_const eq_const\n\n",
 "div":
 "@[to_additive]\ntheorem div [Div Y] ⦃f g : X → Y⦄ (hf : IsLocallyConstant f) (hg : IsLocallyConstant g) : IsLocallyConstant (f / g) :=\n  hf.comp₂ hg (· / ·)\n#align div div\n\n",
 "desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- If a composition of a function `f` followed by an injection `g` is locally\nconstant, then the locally constant property descends to `f`. -/\ntheorem desc {α β : Type _} (f : X → α) (g : α → β) (h : IsLocallyConstant (g ∘ f)) (inj : function.injective g) :\n    IsLocallyConstant f := by\n  rw [(IsLocallyConstant.tfae f).out 0 3]\n  intro a\n  have : «expr ⁻¹' » f {a} = «expr ⁻¹' » (g ∘ f) {g a} := by\n    ext x\n    simp only [mem_singleton_iff, Function.comp_apply, mem_preimage]\n    exact ⟨fun h => by rw [h], fun h => inj h⟩\n  rw [this]\n  apply h\n#align desc desc\n\n",
 "const":
 "theorem const (y : Y) : IsLocallyConstant (Function.const X y) :=\n  of_constant _ fun _ _ => rfl\n#align const const\n\n",
 "congr_fun":
 "#print congr_fun /-\ntheorem congr_fun {f g : LocallyConstant X Y} (h : f = g) (x : X) : f x = g x :=\n  congr_arg (fun h : LocallyConstant X Y => h x) h\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "#print congr_arg /-\ntheorem congr_arg (f : LocallyConstant X Y) {x y : X} (h : x = y) : f x = f y :=\n  congr_arg (fun x : X => f x) h\n#align congr_arg congr_arg\n-/\n\n",
 "comp₂":
 "theorem comp₂ {Y₁ Y₂ Z : Type _} {f : X → Y₁} {g : X → Y₂} (hf : IsLocallyConstant f) (hg : IsLocallyConstant g)\n    (h : Y₁ → Y₂ → Z) : IsLocallyConstant fun x => h (f x) (g x) :=\n  (hf.prod_mk hg).comp fun x : Y₁ × Y₂ => h x.1 x.2\n#align comp₂ comp₂\n\n",
 "comp_continuous":
 "theorem comp_continuous [TopologicalSpace Y] {g : Y → Z} {f : X → Y} (hg : IsLocallyConstant g) (hf : Continuous f) :\n    IsLocallyConstant (g ∘ f) := fun s => by\n  rw [Set.preimage_comp]\n  exact hf.is_open_preimage _ (hg _)\n#align comp_continuous comp_continuous\n\n",
 "comp":
 "theorem comp {f : X → Y} (hf : IsLocallyConstant f) (g : Y → Z) : IsLocallyConstant (g ∘ f) := fun s =>\n  by\n  rw [Set.preimage_comp]\n  exact hf _\n#align comp comp\n\n",
 "comap_id":
 "@[simp]\ntheorem comap_id : @comap X X Z _ _ id = id := by\n  ext\n  simp only [continuous_id, id.def, function.comp.right_id, coe_comap]\n#align comap_id comap_id\n\n",
 "comap_const":
 "theorem comap_const (f : X → Y) (y : Y) (h : ∀ x, f x = y) :\n    (comap f : LocallyConstant Y Z → LocallyConstant X Z) = fun g => ⟨fun x => g y, IsLocallyConstant.const _⟩ :=\n  by\n  ext; rw [coe_comap]\n  · simp only [h, coe_mk, Function.comp_apply]\n  · rw [show f = fun x => y by ext <;> apply h]\n    exact continuous_const\n#align comap_const comap_const\n\n",
 "comap_comp":
 "theorem comap_comp [TopologicalSpace Z] (f : X → Y) (g : Y → Z) (hf : Continuous f) (hg : Continuous g) :\n    @comap _ _ α _ _ f ∘ comap g = comap (g ∘ f) := by\n  ext\n  simp only [hf, hg, hg.comp hf, coe_comap]\n#align comap_comp comap_comp\n\n",
 "coe_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mk (f : X → Y) (h) : «expr⇑ » (⟨f, h⟩ : LocallyConstant X Y) = f :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_injective":
 "theorem coe_injective : @function.injective (LocallyConstant X Y) (X → Y) coe_fn\n  | ⟨f, hf⟩, ⟨g, hg⟩, h => by\n    have : f = g := h\n    subst f\n#align coe_injective coe_injective\n\n",
 "coe_inj":
 "@[simp, norm_cast]\ntheorem coe_inj {f g : LocallyConstant X Y} : (f : X → Y) = g ↔ f = g :=\n  coe_injective.eq_iff\n#align coe_inj coe_inj\n\n",
 "coe_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_desc {X α β : Type _} [TopologicalSpace X] (f : X → α) (g : α → β) (h : LocallyConstant X β)\n    (cond : g ∘ f = h) (inj : function.injective g) : «expr⇑ » (desc f h cond inj) = f :=\n  rfl\n#align coe_desc coe_desc\n\n",
 "coe_continuous_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem coe_continuous_map : ((f : «exprC( , )» X Y) : X → Y) = (f : X → Y) :=\n  rfl\n#align coe_continuous_map coe_continuous_map\n\n",
 "coe_const":
 "@[simp]\ntheorem coe_const (y : Y) : (const X y : X → Y) = Function.const X y :=\n  rfl\n#align coe_const coe_const\n\n",
 "coe_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_comap (f : X → Y) (g : LocallyConstant Y Z) (hf : Continuous f) : «expr⇑ » (comap f g) = g ∘ f :=\n  by\n  rw [comap, dif_pos hf]\n  rfl\n#align coe_comap coe_comap\n\n",
 "apply_eq_of_preconnected_space":
 "theorem apply_eq_of_preconnected_space [PreconnectedSpace X] (f : LocallyConstant X Y) (x y : X) : f x = f y :=\n  f.is_locally_constant.apply_eq_of_is_preconnected is_preconnected_univ trivial trivial\n#align apply_eq_of_preconnected_space apply_eq_of_preconnected_space\n\n",
 "apply_eq_of_is_preconnected":
 "theorem apply_eq_of_is_preconnected (f : LocallyConstant X Y) {s : Set X} (hs : IsPreconnected s) {x y : X} (hx : x ∈ s)\n    (hy : y ∈ s) : f x = f y :=\n  f.is_locally_constant.apply_eq_of_is_preconnected hs hx hy\n#align apply_eq_of_is_preconnected apply_eq_of_is_preconnected\n\n",
 "Continuous":
 "#print Continuous /-\nprotected theorem Continuous : Continuous f :=\n  f.is_locally_constant.continuous\n#align continuous Continuous\n-/\n\n"}