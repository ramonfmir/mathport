{"to_opens_injective":
 "theorem to_opens_injective : injective (to_opens : OpenNhdsOf x → Opens α)\n  | ⟨_, _⟩, ⟨_, _⟩, rfl => rfl\n#align to_opens_injective to_opens_injective\n\n",
 "supr_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem supr_mk {ι} (s : ι → Set α) (h : ∀ i, IsOpen (s i)) :\n    («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" ⟨s i, h i⟩ :\n        Opens α) =\n      ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i),\n        isOpen_unionᵢ h⟩ :=\n  by\n  rw [supr_def]\n  simp\n#align supr_mk supr_mk\n\n",
 "supr_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem supr_def {ι} (s : ι → Opens α) :\n    «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s i) =\n      ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i),\n        isOpen_unionᵢ fun i => (s i).2⟩ :=\n  by\n  ext\n  simp only [supᵢ, coe_Sup, bUnion_range]\n  rfl\n#align supr_def supr_def\n\n",
 "opens_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print Homeomorph.opensCongr_symm /-\n@[simp]\ntheorem Homeomorph.opensCongr_symm (f : «expr ≃ₜ » α β) : f.opens_congr.symm = f.symm.opens_congr :=\n  rfl\n#align homeomorph.opens_congr_symm Homeomorph.opensCongr_symm\n-/\n\n",
 "open_embedding_of_le":
 "theorem open_embedding_of_le {U V : Opens α} (i : U ≤ V) : OpenEmbedding (Set.inclusion i) :=\n  { inj := Set.inclusion_injective i\n    induced := (@induced_compose _ _ _ _ (Set.inclusion i) coe).symm\n    open_range := by\n      rw [Set.range_inclusion i]\n      exact U.is_open.preimage continuous_subtype_val }\n#align open_embedding_of_le open_embedding_of_le\n\n",
 "not_nonempty_iff_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem not_nonempty_iff_eq_bot (U : Opens α) : ¬Set.Nonempty (U : Set α) ↔ U = «expr⊥» := by\n  rw [← coe_inj, opens.coe_bot, ← Set.not_nonempty_iff_eq_empty]\n#align not_nonempty_iff_eq_bot not_nonempty_iff_eq_bot\n\n",
 "nonempty_coe_sort":
 "-- todo: make it `simp` for a `set_like`?\n@[simp]\nprotected theorem nonempty_coe_sort {U : Opens α} : Nonempty U ↔ (U : Set α).nonempty :=\n  Set.nonempty_coe_sort\n#align nonempty_coe_sort nonempty_coe_sort\n\n",
 "ne_bot_iff_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem ne_bot_iff_nonempty (U : Opens α) : U ≠ «expr⊥» ↔ Set.Nonempty (U : Set α) := by\n  rw [ne.def, ← opens.not_nonempty_iff_eq_bot, Classical.not_not]\n#align ne_bot_iff_nonempty ne_bot_iff_nonempty\n\n",
 "mk_inf_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n-- le  \n-- top \n-- bot \n-- sup \n-- inf \n-- Sup \n-- Inf\n@[simp]\ntheorem mk_inf_mk {U V : Set α} {hU : IsOpen U} {hV : IsOpen V} :\n    («expr ⊓ » ⟨U, hU⟩ ⟨V, hV⟩ : Opens α) = ⟨«expr ⊓ » U V, IsOpen.inter hU hV⟩ :=\n  rfl\n#align mk_inf_mk mk_inf_mk\n\n",
 "mk_coe":
 "@[simp]\ntheorem mk_coe (U : Opens α) : mk (↑U) U.is_open = U := by\n  cases U\n  rfl\n#align mk_coe mk_coe\n\n",
 "mem_supr":
 "@[simp]\ntheorem mem_supr {ι} {x : α} {s : ι → Opens α} : x ∈ supᵢ s ↔ ∃ i, x ∈ s i :=\n  by\n  rw [← SetLike.mem_coe]\n  simp\n#align mem_supr mem_supr\n\n",
 "mem_mk":
 "@[simp]\ntheorem mem_mk {x : α} {U : Set α} {h : IsOpen U} : @has_mem.mem _ (Opens α) _ x ⟨U, h⟩ ↔ x ∈ U :=\n  iff.rfl\n#align mem_mk mem_mk\n\n",
 "mem_Sup":
 "@[simp]\ntheorem mem_Sup {Us : Set (Opens α)} {x : α} : x ∈ supₛ Us ↔ ∃ u ∈ Us, x ∈ u := by simp_rw [supₛ_eq_supᵢ, mem_supr]\n#align mem_Sup mem_Sup\n\n",
 "mem":
 "protected theorem mem (U : OpenNhdsOf x) : x ∈ U :=\n  U.mem'\n#align mem mem\n\n",
 "is_compact_open_iff_eq_finite_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- If `α` has a basis consisting of compact opens, then an open set in `α` is compact open iff\n  it is a finite union of some elements in the basis -/\ntheorem is_basis.is_compact_open_iff_eq_finite_Union {ι : Type _} (b : ι → Opens α) (hb : IsBasis (Set.range b))\n    (hb' : ∀ i, IsCompact (b i : Set α)) (U : Set α) :\n    IsCompact U ∧ IsOpen U ↔\n      ∃ s : Set ι,\n        s.finite ∧\n          U = «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (b i) :=\n  by\n  apply isCompact_open_iff_eq_finite_unionᵢ_of_isTopologicalBasis fun i : ι => (b i).1\n  · convert hb\n    ext\n    simp\n  · exact hb'\n#align is_basis.is_compact_open_iff_eq_finite_Union is_basis.is_compact_open_iff_eq_finite_Union\n\n",
 "is_compact_element_iff":
 "@[simp]\ntheorem is_compact_element_iff (s : Opens α) : CompleteLattice.IsCompactElement s ↔ IsCompact (s : Set α) :=\n  by\n  rw [isCompact_iff_finite_subcover, CompleteLattice.isCompactElement_iff]\n  refine' ⟨_, fun H ι U hU => _⟩\n  · introv H hU hU'\n    obtain ⟨t, ht⟩ := H ι (fun i => ⟨U i, hU i⟩) (by simpa)\n    refine' ⟨t, Set.Subset.trans ht _⟩\n    rw [coe_finset_sup, Finset.sup_eq_supᵢ]\n    rfl\n  · obtain ⟨t, ht⟩ := H (fun i => U i) (fun i => (U i).is_open) (by simpa using show (s : Set α) ⊆ ↑(supᵢ U) from hU)\n    refine' ⟨t, Set.Subset.trans ht _⟩\n    simp only [Set.unionᵢ_subset_iff]\n    show ∀ i ∈ t, U i ≤ t.sup U\n    exact fun i => Finset.le_sup\n#align is_compact_element_iff is_compact_element_iff\n\n",
 "is_basis_iff_nbhd":
 "theorem is_basis_iff_nbhd {B : Set (Opens α)} : IsBasis B ↔ ∀ {U : Opens α} {x}, x ∈ U → ∃ U' ∈ B, x ∈ U' ∧ U' ≤ U :=\n  by\n  constructor <;> intro h\n  · rintro ⟨sU, hU⟩ x hx\n    rcases h.mem_nhds_iff.mp (IsOpen.mem_nhds hU hx) with ⟨sV, ⟨⟨V, H₁, H₂⟩, hsV⟩⟩\n    refine' ⟨V, H₁, _⟩\n    cases V\n    dsimp at H₂\n    subst H₂\n    exact hsV\n  · refine' is_topological_basis_of_open_of_nhds _ _\n    · rintro sU ⟨U, ⟨H₁, rfl⟩⟩\n      exact U.2\n    · intro x sU hx hsU\n      rcases@h (⟨sU, hsU⟩ : opens α) x hx with ⟨V, hV, H⟩\n      exact ⟨V, ⟨V, hV, rfl⟩, H⟩\n#align is_basis_iff_nbhd is_basis_iff_nbhd\n\n",
 "is_basis_iff_cover":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (Us «expr ⊆ » B) -/\ntheorem is_basis_iff_cover {B : Set (Opens α)} : IsBasis B ↔ ∀ U : Opens α, ∃ (Us : _)(_ : Us ⊆ B), U = supₛ Us :=\n  by\n  constructor\n  · intro hB U\n    refine' ⟨{ V : opens α | V ∈ B ∧ V ≤ U }, fun U hU => hU.left, _⟩\n    apply ext\n    rw [coe_Sup, hB.open_eq_sUnion' U.is_open]\n    simp_rw [sUnion_eq_bUnion, Union, supᵢ_and, supᵢ_image]\n    rfl\n  · intro h\n    rw [is_basis_iff_nbhd]\n    intro U x hx\n    rcases h U with ⟨Us, hUs, rfl⟩\n    rcases mem_Sup.1 hx with ⟨U, Us, xU⟩\n    exact ⟨U, hUs Us, xU, le_supₛ Us⟩\n#align is_basis_iff_cover is_basis_iff_cover\n\n",
 "gc":
 "theorem gc : GaloisConnection (coe : Opens α → Set α) interior := fun U s =>\n  ⟨fun h => interior_maximal h U.is_open, fun h => le_trans h interior_subset⟩\n#align gc gc\n\n",
 "forall":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mario Carneiro, Floris van Doorn\n-/\ntheorem forall {p : Opens α → Prop} : (∀ U, p U) ↔ ∀ (U : Set α) (hU : IsOpen U), p ⟨U, hU⟩ :=\n  ⟨fun h _ _ => h _, fun h ⟨U, hU⟩ => h _ _⟩\n#align forall forall\n\n",
 "ext":
 "@[ext]\ntheorem ext {U V : Opens α} (h : (U : Set α) = V) : U = V :=\n  SetLike.coe_injective h\n#align ext ext\n\n",
 "eq_bot_or_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- An open set in the indiscrete topology is either empty or the whole space. -/\ntheorem eq_bot_or_top {α} [t : TopologicalSpace α] (h : t = «expr⊤») (U : Opens α) : U = «expr⊥» ∨ U = «expr⊤» :=\n  by\n  simp only [← coe_inj]\n  subst h; letI : TopologicalSpace α := «expr⊤»\n  exact (is_open_top_iff _).1 U.2\n#align eq_bot_or_top eq_bot_or_top\n\n",
 "comap_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem comap_mono (f : «exprC( , )» α β) {s t : Opens β} (h : s ≤ t) : comap f s ≤ comap f t :=\n  OrderHomClass.mono (comap f) h\n#align comap_mono comap_mono\n\n",
 "comap_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem comap_injective [T0Space β] : injective (comap : «exprC( , )» α β → FrameHom (Opens β) (Opens α)) :=\n  fun f g h =>\n  ContinuousMap.ext fun a =>\n    Inseparable.eq <|\n      inseparable_iff_forall_open.2 fun s hs =>\n        have : comap f ⟨s, hs⟩ = comap g ⟨s, hs⟩ := FunLike.congr_fun h ⟨_, hs⟩\n        show a ∈ «expr ⁻¹' » f s ↔ a ∈ «expr ⁻¹' » g s from Set.ext_iff.1 (coe_inj.2 this) a\n#align comap_injective comap_injective\n\n",
 "comap_id":
 "@[simp]\ntheorem comap_id : comap (ContinuousMap.id α) = FrameHom.id _ :=\n  FrameHom.ext fun a => ext rfl\n#align comap_id comap_id\n\n",
 "comap_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\nprotected theorem comap_comp (g : «exprC( , )» β γ) (f : «exprC( , )» α β) :\n    comap (g.comp f) = (comap f).comp (comap g) :=\n  rfl\n#align comap_comp comap_comp\n\n",
 "comap_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\nprotected theorem comap_comap (g : «exprC( , )» β γ) (f : «exprC( , )» α β) (U : Opens γ) :\n    comap f (comap g U) = comap (g.comp f) U :=\n  rfl\n#align comap_comap comap_comap\n\n",
 "coe_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp, norm_cast]\ntheorem coe_top : ((«expr⊤» : Opens α) : Set α) = Set.univ :=\n  rfl\n#align coe_top coe_top\n\n",
 "coe_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp, norm_cast]\ntheorem coe_supr {ι} (s : ι → Opens α) :\n    ((«expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (s i) : Opens α) :\n        Set α) =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i) :=\n  by simp [supr_def]\n#align coe_supr coe_supr\n\n",
 "coe_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp, norm_cast]\ntheorem coe_sup (s t : Opens α) : (↑(«expr ⊔ » s t) : Set α) = s ∪ t :=\n  rfl\n#align coe_sup coe_sup\n\n",
 "coe_mk":
 "/-- the coercion `opens α → set α` applied to a pair is the same as taking the first component -/\n@[simp]\ntheorem coe_mk {U : Set α} {hU : IsOpen U} : ↑(⟨U, hU⟩ : Opens α) = U :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_inj":
 "@[simp]\ntheorem coe_inj {U V : Opens α} : (U : Set α) = V ↔ U = V :=\n  SetLike.ext'_iff.symm\n#align coe_inj coe_inj\n\n",
 "coe_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp, norm_cast]\ntheorem coe_inf (s t : Opens α) : (↑(«expr ⊓ » s t) : Set α) = s ∩ t :=\n  rfl\n#align coe_inf coe_inf\n\n",
 "coe_finset_sup":
 "@[simp, norm_cast]\ntheorem coe_finset_sup (f : ι → Opens α) (s : Finset ι) : (↑(s.sup f) : Set α) = s.sup (coe ∘ f) :=\n  map_finset_sup (⟨⟨coe, coe_sup⟩, coe_bot⟩ : SupBotHom (Opens α) (Set α)) _ _\n#align coe_finset_sup coe_finset_sup\n\n",
 "coe_finset_inf":
 "@[simp, norm_cast]\ntheorem coe_finset_inf (f : ι → Opens α) (s : Finset ι) : (↑(s.inf f) : Set α) = s.inf (coe ∘ f) :=\n  map_finset_inf (⟨⟨coe, coe_inf⟩, coe_top⟩ : InfTopHom (Opens α) (Set α)) _ _\n#align coe_finset_inf coe_finset_inf\n\n",
 "coe_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem coe_comap (f : «exprC( , )» α β) (U : Opens β) : ↑(comap f U) = «expr ⁻¹' » f U :=\n  rfl\n#align coe_comap coe_comap\n\n",
 "coe_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp, norm_cast]\ntheorem coe_bot : ((«expr⊥» : Opens α) : Set α) = ∅ :=\n  rfl\n#align coe_bot coe_bot\n\n",
 "coe_Sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp, norm_cast]\ntheorem coe_Sup {S : Set (Opens α)} :\n    (↑(supₛ S) : Set α) =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" ↑i :=\n  rfl\n#align coe_Sup coe_Sup\n\n",
 "carrier_eq_coe":
 "@[simp]\ntheorem carrier_eq_coe (U : Opens α) : U.1 = ↑U :=\n  rfl\n#align carrier_eq_coe carrier_eq_coe\n\n",
 "basis_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem basis_nhds : ((nhds) x).has_basis (fun U : OpenNhdsOf x => True) coe :=\n  (nhds_basis_opens x).to_has_basis (fun U hU => ⟨⟨⟨U, hU.2⟩, hU.1⟩, trivial, Subset.rfl⟩) fun U _ =>\n    ⟨U, ⟨⟨U.mem, U.is_open⟩, Subset.rfl⟩⟩\n#align basis_nhds basis_nhds\n\n",
 "IsOpen":
 "#print IsOpen /-\nprotected theorem IsOpen (U : OpenNhdsOf x) : IsOpen (U : Set α) :=\n  U.is_open'\n#align is_open IsOpen\n-/\n\n"}