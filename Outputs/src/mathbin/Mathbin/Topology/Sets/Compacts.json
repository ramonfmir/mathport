{"interior_nonempty":
 "theorem interior_nonempty (s : PositiveCompacts α) : (interior (s : Set α)).nonempty :=\n  s.interior_nonempty'\n#align interior_nonempty interior_nonempty\n\n",
 "ext":
 "@[ext]\nprotected theorem ext {s t : CompactOpens α} (h : (s : Set α) = t) : s = t :=\n  SetLike.ext' h\n#align ext ext\n\n",
 "exists_positive_compacts_subset":
 "#print exists_positiveCompacts_subset /-\ntheorem exists_positiveCompacts_subset [LocallyCompactSpace α] {U : Set α} (ho : IsOpen U) (hn : U.nonempty) :\n    ∃ K : PositiveCompacts α, ↑K ⊆ U :=\n  let ⟨x, hx⟩ := hn\n  let ⟨K, hKc, hxK, hKU⟩ := exists_compact_subset ho hx\n  ⟨⟨⟨K, hKc⟩, ⟨x, hxK⟩⟩, hKU⟩\n#align exists_positive_compacts_subset exists_positiveCompacts_subset\n-/\n\n",
 "equiv_to_fun_val":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- The image of a compact set under a homeomorphism can also be expressed as a preimage. -/\ntheorem equiv_to_fun_val (f : «expr ≃ₜ » α β) (K : Compacts α) : (Compacts.equiv f K).1 = «expr ⁻¹' » f.symm K.1 :=\n  congr_fun (image_eq_preimage_of_inverse f.left_inv f.right_inv) K.1\n#align equiv_to_fun_val equiv_to_fun_val\n\n",
 "coe_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem coe_top [CompactSpace α] : (↑(«expr⊤» : CompactOpens α) : Set α) = univ :=\n  rfl\n#align coe_top coe_top\n\n",
 "coe_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem coe_sup (s t : CompactOpens α) : (↑(«expr ⊔ » s t) : Set α) = s ∪ t :=\n  rfl\n#align coe_sup coe_sup\n\n",
 "coe_sdiff":
 "@[simp]\ntheorem coe_sdiff [T2Space α] (s t : CompactOpens α) : (↑(s \\ t) : Set α) = s \\ t :=\n  rfl\n#align coe_sdiff coe_sdiff\n\n",
 "coe_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n@[simp]\ntheorem coe_prod (K : CompactOpens α) (L : CompactOpens β) : (K.prod L : Set (α × β)) = lower_set.prod K L :=\n  rfl\n#align coe_prod coe_prod\n\n",
 "coe_mk":
 "@[simp]\ntheorem coe_mk (s : Compacts α) (h) : (mk s h : Set α) = s :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem coe_map {f : α → β} (hf : Continuous f) (hf' : IsOpenMap f) (s : CompactOpens α) :\n    (s.map f hf hf' : Set β) = «expr '' » f s :=\n  rfl\n#align coe_map coe_map\n\n",
 "coe_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem coe_inf [T2Space α] (s t : CompactOpens α) : (↑(«expr ⊓ » s t) : Set α) = s ∩ t :=\n  rfl\n#align coe_inf coe_inf\n\n",
 "coe_finset_sup":
 "@[simp]\ntheorem coe_finset_sup {ι : Type _} {s : Finset ι} {f : ι → Compacts α} : (↑(s.sup f) : Set α) = s.sup fun i => f i :=\n  by\n  classical\n    refine' Finset.induction_on s rfl fun a s _ h => _\n    simp_rw [Finset.sup_insert, coe_sup, sup_eq_union]\n    congr\n#align coe_finset_sup coe_finset_sup\n\n",
 "coe_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem coe_compl [T2Space α] [CompactSpace α] (s : CompactOpens α) : (↑(«expr ᶜ» s) : Set α) = «expr ᶜ» s :=\n  rfl\n#align coe_compl coe_compl\n\n",
 "coe_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem coe_bot : (↑(«expr⊥» : CompactOpens α) : Set α) = ∅ :=\n  rfl\n#align coe_bot coe_bot\n\n",
 "carrier_eq_coe":
 "@[simp]\ntheorem carrier_eq_coe (s : PositiveCompacts α) : s.carrier = s :=\n  rfl\n#align carrier_eq_coe carrier_eq_coe\n\n",
 "Nonempty":
 "#print Nonempty /-\nprotected theorem Nonempty (s : PositiveCompacts α) : (s : Set α).nonempty :=\n  s.interior_nonempty.mono interior_subset\n#align nonempty Nonempty\n-/\n\n",
 "IsOpen":
 "#print IsOpen /-\nprotected theorem IsOpen (s : CompactOpens α) : IsOpen (s : Set α) :=\n  s.is_open'\n#align is_open IsOpen\n-/\n\n",
 "IsCompact":
 "#print IsCompact /-\nprotected theorem IsCompact (s : CompactOpens α) : IsCompact (s : Set α) :=\n  s.is_compact'\n#align is_compact IsCompact\n-/\n\n"}