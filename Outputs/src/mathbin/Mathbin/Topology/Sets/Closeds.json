{"mem_infi":
 "@[simp]\ntheorem mem_infi {ι} {x : α} {s : ι → closeds α} : x ∈ infᵢ s ↔ ∀ i, x ∈ s i := by simp [← SetLike.mem_coe]\n#align mem_infi mem_infi\n\n",
 "mem_Inf":
 "@[simp]\ntheorem mem_Inf {S : set (closeds α)} {x : α} : x ∈ infₛ S ↔ ∀ s ∈ S, x ∈ s := by simp_rw [infₛ_eq_infᵢ, mem_infi]\n#align mem_Inf mem_Inf\n\n",
 "is_coatom_iff":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr∃ , »((x), _)]] -/\n/-- in a `t1_space`, coatoms of `opens α` are precisely complements of singletons:\n`(closeds.singleton x).compl`. -/\ntheorem opens.is_coatom_iff [t1_space α] {s : opens α} : IsCoatom s ↔ ∃ x, s = (closeds.singleton x).compl :=\n  by\n  rw [← s.compl_compl, ← isAtom_dual_iff_isCoatom]\n  change IsAtom (closeds.compl_order_iso α s.compl) ↔ _\n  rw [(closeds.compl_order_iso α).is_atom_iff, closeds.is_atom_iff]\n  trace\n    \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr «expr∃ , »((x), _)]]\"\n  exact closeds.compl_bijective.injective.eq_iff.symm\n#align opens.is_coatom_iff opens.is_coatom_iff\n\n",
 "is_atom_iff":
 "/-- in a `t1_space`, atoms of `closeds α` are precisely the `closeds.singleton`s. -/\ntheorem closeds.is_atom_iff [t1_space α] {s : closeds α} : IsAtom s ↔ ∃ x, s = closeds.singleton x :=\n  by\n  have : IsAtom (s : set α) ↔ IsAtom s :=\n    by\n    refine' closeds.gi.is_atom_iff' rfl (fun t ht => _) s\n    obtain ⟨x, rfl⟩ := t.is_atom_iff.mp ht\n    exact closure_singleton\n  simpa only [← this, (s : set α).is_atom_iff, SetLike.ext_iff, Set.ext_iff]\n#align closeds.is_atom_iff closeds.is_atom_iff\n\n",
 "infi_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp]\ntheorem infi_mk {ι} (s : ι → set α) (h : ∀ i, is_closed (s i)) :\n    («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" ⟨s i, h i⟩ :\n        closeds α) =\n      ⟨«expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i),\n        is_closed_Inter h⟩ :=\n  by simp [infi_def]\n#align infi_mk infi_mk\n\n",
 "infi_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem infi_def {ι} (s : ι → closeds α) :\n    «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (s i) =\n      ⟨«expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i),\n        is_closed_Inter fun i => (s i).2⟩ :=\n  by\n  ext\n  simp only [infᵢ, coe_Inf, bInter_range]\n  rfl\n#align infi_def infi_def\n\n",
 "gc":
 "theorem gc : GaloisConnection closeds.closure (coe : closeds α → set α) := fun s U =>\n  ⟨subset_closure.trans, fun h => closure_minimal h U.closed⟩\n#align gc gc\n\n",
 "ext":
 "@[ext]\nprotected theorem ext {s t : clopens α} (h : (s : set α) = t) : s = t :=\n  SetLike.ext' h\n#align ext ext\n\n",
 "compl_compl":
 "theorem opens.compl_compl (s : opens α) : s.compl.compl = s :=\n  opens.ext (compl_compl s)\n#align opens.compl_compl opens.compl_compl\n\n",
 "compl_bijective":
 "theorem opens.compl_bijective : function.bijective (@opens.compl α _) :=\n  function.bijective_iff_has_inverse.mpr ⟨closeds.compl, opens.compl_compl, closeds.compl_compl⟩\n#align opens.compl_bijective opens.compl_bijective\n\n",
 "coe_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem coe_top : (↑(«expr⊤» : clopens α) : set α) = univ :=\n  rfl\n#align coe_top coe_top\n\n",
 "coe_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem coe_sup (s t : clopens α) : (↑(«expr ⊔ » s t) : set α) = s ∪ t :=\n  rfl\n#align coe_sup coe_sup\n\n",
 "coe_sdiff":
 "@[simp]\ntheorem coe_sdiff (s t : clopens α) : (↑(s \\ t) : set α) = s \\ t :=\n  rfl\n#align coe_sdiff coe_sdiff\n\n",
 "coe_mk":
 "@[simp]\ntheorem coe_mk (s : set α) (h) : (mk s h : set α) = s :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp, norm_cast]\ntheorem coe_infi {ι} (s : ι → closeds α) :\n    ((«expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (s i) :\n          closeds α) :\n        set α) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i) :=\n  by simp [infi_def]\n#align coe_infi coe_infi\n\n",
 "coe_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem coe_inf (s t : clopens α) : (↑(«expr ⊓ » s t) : set α) = s ∩ t :=\n  rfl\n#align coe_inf coe_inf\n\n",
 "coe_finset_sup":
 "@[simp, norm_cast]\ntheorem coe_finset_sup (f : ι → closeds α) (s : Finset ι) : (↑(s.sup f) : set α) = s.sup (coe ∘ f) :=\n  map_finset_sup (⟨⟨coe, coe_sup⟩, coe_bot⟩ : sup_bot_hom (closeds α) (set α)) _ _\n#align coe_finset_sup coe_finset_sup\n\n",
 "coe_finset_inf":
 "@[simp, norm_cast]\ntheorem coe_finset_inf (f : ι → closeds α) (s : Finset ι) : (↑(s.inf f) : set α) = s.inf (coe ∘ f) :=\n  map_finset_inf (⟨⟨coe, coe_inf⟩, coe_top⟩ : inf_top_hom (closeds α) (set α)) _ _\n#align coe_finset_inf coe_finset_inf\n\n",
 "coe_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem coe_compl (s : clopens α) : (↑(«expr ᶜ» s) : set α) = «expr ᶜ» s :=\n  rfl\n#align coe_compl coe_compl\n\n",
 "coe_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem coe_bot : (↑(«expr⊥» : clopens α) : set α) = ∅ :=\n  rfl\n#align coe_bot coe_bot\n\n",
 "coe_Inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n@[simp, norm_cast]\ntheorem coe_Inf {S : set (closeds α)} :\n    (↑(infₛ S) : set α) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" ↑i :=\n  rfl\n#align coe_Inf coe_Inf\n\n",
 "closed":
 "/-\nCopyright (c) 2020 Floris van Doorn. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Floris van Doorn, Yaël Dillies\n-/\ntheorem closed (s : closeds α) : is_closed (s : set α) :=\n  s.closed'\n#align closed closed\n\n",
 "clopen":
 "theorem clopen (s : clopens α) : is_clopen (s : set α) :=\n  s.clopen'\n#align clopen clopen\n\n"}