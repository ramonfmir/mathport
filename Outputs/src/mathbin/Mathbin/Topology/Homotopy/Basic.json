{"trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem trans_apply (F : homotopy_rel f₀ f₁ S) (G : homotopy_rel f₁ f₂ S) (x : unit_interval × X) :\n    (F.trans G) x =\n      if h : (x.1 : exprℝ) ≤ 1 / 2 then F (⟨2 * x.1, (unit_interval.mul_pos_mem_iff zero_lt_two).2 ⟨x.1.2.1, h⟩⟩, x.2)\n      else G (⟨2 * x.1 - 1, unit_interval.two_mul_sub_one_mem_iff.2 ⟨(not_le.1 h).le, x.1.2.2⟩⟩, x.2) :=\n  homotopy.trans_apply _ _ _\n#align trans_apply trans_apply\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n#print trans /-\n@[trans]\ntheorem trans ⦃f g h : «exprC( , )» X Y⦄ (h₀ : homotopic_rel f g S) (h₁ : homotopic_rel g h S) : homotopic_rel f h S :=\n  h₀.map2 homotopy_rel.trans h₁\n#align trans trans\n-/\n\n",
 "symm_trans":
 "theorem symm_trans (F : homotopy_rel f₀ f₁ S) (G : homotopy_rel f₁ f₂ S) : (F.trans G).symm = G.symm.trans F.symm :=\n  homotopy_with.ext <| homotopy.congr_fun <| homotopy.symm_trans _ _\n#align symm_trans symm_trans\n\n",
 "symm_symm":
 "@[simp]\ntheorem symm_symm (F : homotopy_rel f₀ f₁ S) : F.symm.symm = F :=\n  homotopy_with.symm_symm F\n#align symm_symm symm_symm\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n#print symm /-\n@[symm]\ntheorem symm ⦃f g : «exprC( , )» X Y⦄ (h : homotopic_rel f g S) : homotopic_rel g f S :=\n  h.map homotopy_rel.symm\n#align symm symm\n-/\n\n",
 "refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n#print refl /-\n@[refl]\ntheorem refl (f : «exprC( , )» X Y) : homotopic_rel f f S :=\n  ⟨homotopy_rel.refl f S⟩\n#align refl refl\n-/\n\n",
 "prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\ntheorem prop (F : homotopy_with f₀ f₁ P) (t : unit_interval) : P (F.to_homotopy.curry t) :=\n  F.prop' t\n#align prop prop\n\n",
 "hcomp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem hcomp {f₀ f₁ : «exprC( , )» X Y} {g₀ g₁ : «exprC( , )» Y Z} (h₀ : homotopic f₀ f₁) (h₁ : homotopic g₀ g₁) :\n    homotopic (g₀.comp f₀) (g₁.comp f₁) :=\n  h₀.map2 homotopy.hcomp h₁\n#align hcomp hcomp\n\n",
 "fst_eq_snd":
 "theorem fst_eq_snd (F : homotopy_rel f₀ f₁ S) {x : X} (hx : x ∈ S) : f₀ x = f₁ x :=\n  F.eq_fst 0 hx ▸ F.eq_snd 0 hx\n#align fst_eq_snd fst_eq_snd\n\n",
 "extend_prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem extend_prop (F : homotopy_with f₀ f₁ P) (t : exprℝ) : P (F.to_homotopy.extend t) :=\n  by\n  by_cases ht₀ : 0 ≤ t\n  · by_cases ht₁ : t ≤ 1\n    · convert F.prop ⟨t, ht₀, ht₁⟩\n      ext\n      rw [F.to_homotopy.extend_apply_of_mem_I ⟨ht₀, ht₁⟩, F.to_homotopy.curry_apply]\n    · convert F.prop 1\n      ext\n      rw [F.to_homotopy.extend_apply_of_one_le (le_of_not_le ht₁), F.to_homotopy.curry_apply, F.to_homotopy.apply_one]\n  · convert F.prop 0\n    ext\n    rw [F.to_homotopy.extend_apply_of_le_zero (le_of_not_le ht₀), F.to_homotopy.curry_apply, F.to_homotopy.apply_zero]\n#align extend_prop extend_prop\n\n",
 "extend_apply_of_one_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem extend_apply_of_one_le (F : homotopy f₀ f₁) {t : exprℝ} (ht : 1 ≤ t) (x : X) : F.extend t x = f₁ x :=\n  by\n  rw [← F.apply_one]\n  exact continuous_map.congr_fun (Set.IccExtend_of_right_le (zero_le_one' (exprℝ)) F.curry ht) x\n#align extend_apply_of_one_le extend_apply_of_one_le\n\n",
 "extend_apply_of_mem_I":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n@[simp]\ntheorem extend_apply_of_mem_I (F : homotopy f₀ f₁) {t : exprℝ} (ht : t ∈ unit_interval) (x : X) :\n    F.extend t x = F (⟨t, ht⟩, x) :=\n  continuous_map.congr_fun (Set.IccExtend_of_mem (zero_le_one' (exprℝ)) F.curry ht) x\n#align extend_apply_of_mem_I extend_apply_of_mem_I\n\n",
 "extend_apply_of_le_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem extend_apply_of_le_zero (F : homotopy f₀ f₁) {t : exprℝ} (ht : t ≤ 0) (x : X) : F.extend t x = f₀ x :=\n  by\n  rw [← F.apply_zero]\n  exact continuous_map.congr_fun (Set.IccExtend_of_le_left (zero_le_one' (exprℝ)) F.curry ht) x\n#align extend_apply_of_le_zero extend_apply_of_le_zero\n\n",
 "extend_apply_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n@[simp]\ntheorem extend_apply_coe (F : homotopy f₀ f₁) (t : unit_interval) (x : X) : F.extend t x = F (t, x) :=\n  continuous_map.congr_fun (Set.Icc_extend_coe (zero_le_one' (exprℝ)) F.curry t) x\n#align extend_apply_coe extend_apply_coe\n\n",
 "ext":
 "@[ext]\ntheorem ext {F G : homotopy_with f₀ f₁ P} (h : ∀ x, F x = G x) : F = G :=\n  coe_fn_injective <| funext h\n#align ext ext\n\n",
 "equivalence":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem equivalence : equivalence fun f g : «exprC( , )» X Y => homotopic_rel f g S :=\n  ⟨refl, symm, trans⟩\n#align equivalence equivalence\n\n",
 "eq_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\ntheorem eq_snd (F : homotopy_rel f₀ f₁ S) (t : unit_interval) {x : X} (hx : x ∈ S) : F (t, x) = f₁ x :=\n  (F.prop t x hx).2\n#align eq_snd eq_snd\n\n",
 "eq_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\ntheorem eq_fst (F : homotopy_rel f₀ f₁ S) (t : unit_interval) {x : X} (hx : x ∈ S) : F (t, x) = f₀ x :=\n  (F.prop t x hx).1\n#align eq_fst eq_fst\n\n",
 "curry_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n@[simp]\ntheorem curry_apply (F : homotopy f₀ f₁) (t : unit_interval) (x : X) : F.curry t x = F (t, x) :=\n  rfl\n#align curry_apply curry_apply\n\n",
 "continuous":
 "@[continuity]\nprotected theorem continuous (F : homotopy_with f₀ f₁ P) : continuous F :=\n  F.continuous_to_fun\n#align continuous continuous\n\n",
 "congr_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n#print congr_fun /-\ntheorem congr_fun {F G : homotopy f₀ f₁} (h : F = G) (x : unit_interval × X) : F x = G x :=\n  continuous_map.congr_fun (congr_arg _ h) x\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n#print congr_arg /-\ntheorem congr_arg (F : homotopy f₀ f₁) {x y : unit_interval × X} (h : x = y) : F x = F y :=\n  F.to_continuous_map.congr_arg h\n#align congr_arg congr_arg\n-/\n\n",
 "coe_to_homotopy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_homotopy (F : homotopy_with f₀ f₁ P) : «expr⇑ » F.to_homotopy = F :=\n  rfl\n#align coe_to_homotopy coe_to_homotopy\n\n",
 "coe_to_continuous_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_continuous_map (F : homotopy_with f₀ f₁ P) : «expr⇑ » F.to_continuous_map = F :=\n  rfl\n#align coe_to_continuous_map coe_to_continuous_map\n\n",
 "coe_fn_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\ntheorem coe_fn_injective : @function.injective (homotopy_with f₀ f₁ P) (unit_interval × X → Y) coe_fn :=\n  by\n  rintro ⟨⟨⟨F, _⟩, _⟩, _⟩ ⟨⟨⟨G, _⟩, _⟩, _⟩ h\n  congr 3\n#align coe_fn_injective coe_fn_injective\n\n",
 "apply_zero":
 "@[simp]\ntheorem apply_zero (F : homotopy_with f₀ f₁ P) (x : X) : F (0, x) = f₀ x :=\n  F.map_zero_left' x\n#align apply_zero apply_zero\n\n",
 "apply_one":
 "@[simp]\ntheorem apply_one (F : homotopy_with f₀ f₁ P) (x : X) : F (1, x) = f₁ x :=\n  F.map_one_left' x\n#align apply_one apply_one\n\n"}