{"scottContinuous_of_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Tactic/Lean3.lean:565:11: unsupported: specialize non-hyp -/\n#print scottContinuous_of_continuous /-\ntheorem scottContinuous_of_continuous {α β} [OmegaCompletePartialOrder α] [OmegaCompletePartialOrder β]\n    (f : Scott α → Scott β) (hf : Continuous f) : OmegaCompletePartialOrder.Continuous' f :=\n  by\n  simp only [continuous_def, («expr ⁻¹' » · ·)] at hf\n  have h : Monotone f := by\n    intro x y h\n    cases' hf { x | ¬x ≤ f y } (notBelow_isOpen _) with hf hf'\n    clear hf'\n    specialize hf h\n    simp only [preimage, mem_set_of_eq, le_Prop_eq] at hf\n    by_contra H\n    apply hf H le_rfl\n  exists h\n  intro c\n  apply eq_of_forall_ge_iff\n  intro z\n  specialize «./././Mathport/Syntax/Translate/Tactic/Lean3.lean:565:11: unsupported: specialize non-hyp»\n  cases hf\n  specialize hf_h c\n  simp only [notBelow, OrderHom.coe_fun_mk, eq_iff_iff, mem_set_of_eq] at hf_h\n  rw [← not_iff_not]\n  simp only [ωSup_le_iff, hf_h, ωSup, supᵢ, Sup, complete_lattice.Sup, complete_semilattice_Sup.Sup, exists_prop,\n    mem_range, OrderHom.coe_fun_mk, chain.map_coe, Function.comp_apply, eq_iff_iff, not_forall]\n  tauto\n#align Scott_continuous_of_continuous scottContinuous_of_continuous\n-/\n\n",
 "notBelow_isOpen":
 "#print notBelow_isOpen /-\ntheorem notBelow_isOpen : IsOpen (notBelow y) :=\n  by\n  have h : Monotone (notBelow y) := by\n    intro x y' h\n    simp only [notBelow, setOf, le_Prop_eq]\n    intro h₀ h₁\n    apply h₀ (le_trans h h₁)\n  exists h\n  rintro c\n  apply eq_of_forall_ge_iff\n  intro z\n  rw [ωSup_le_iff]\n  simp only [ωSup_le_iff, notBelow, mem_set_of_eq, le_Prop_eq, OrderHom.coe_fun_mk, chain.map_coe, Function.comp_apply,\n    exists_imp, not_forall]\n#align not_below_is_open notBelow_isOpen\n-/\n\n",
 "isωSup_ωSup":
 "#print isωSup_ωSup /-\ntheorem isωSup_ωSup {α} [OmegaCompletePartialOrder α] (c : Chain α) : IsωSup c (ωSup c) :=\n  by\n  constructor\n  · apply le_ωSup\n  · apply ωSup_le\n#align is_ωSup_ωSup isωSup_ωSup\n-/\n\n",
 "is_ωSup_iff_is_lub":
 "/-\nCopyright (c) 2020 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon\n-/\ntheorem is_ωSup_iff_is_lub {α : Type u} [preorder α] {c : Chain α} {x : α} : IsωSup c x ↔ IsLUB (range c) x := by\n  simp [is_ωSup, IsLUB, IsLeast, upperBounds, lowerBounds]\n#align is_ωSup_iff_is_lub is_ωSup_iff_is_lub\n\n",
 "isOpen_univ":
 "#print isOpen_univ /-\ntheorem isOpen_univ : IsOpen α univ :=\n  ⟨fun x y h hx => mem_univ _, @CompleteLattice.top_continuous α Prop _ _⟩\n#align is_open_univ isOpen_univ\n-/\n\n",
 "isOpen_unionₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n#print isOpen_unionₛ /-\ntheorem isOpen_unionₛ (s : Set (Set α)) (hs : ∀ t ∈ s, IsOpen α t) : IsOpen α (⋃₀ s) :=\n  by\n  simp only [IsOpen] at hs⊢\n  convert CompleteLattice.supₛ_continuous' («expr ⁻¹' » setOf s) _\n  · ext1 x\n    simp only [supₛ_apply, set_of_bijective.surjective.exists, exists_prop, mem_preimage, SetCoe.exists, supᵢ_Prop_eq,\n      mem_set_of_eq, Subtype.coe_mk, mem_sUnion]\n  · intro p hp\n    exact hs (setOf p) (mem_preimage.1 hp)\n#align is_open_sUnion isOpen_unionₛ\n-/\n\n",
 "inter":
 "#print IsOpen.inter /-\ntheorem IsOpen.inter (s t : Set α) : IsOpen α s → IsOpen α t → IsOpen α (s ∩ t) :=\n  CompleteLattice.inf_continuous'\n#align is_open.inter IsOpen.inter\n-/\n\n",
 "continuous_of_scottContinuous":
 "#print continuous_of_scottContinuous /-\ntheorem continuous_of_scottContinuous {α β} [OmegaCompletePartialOrder α] [OmegaCompletePartialOrder β]\n    (f : Scott α → Scott β) (hf : OmegaCompletePartialOrder.Continuous' f) : Continuous f :=\n  by\n  rw [continuous_def]\n  intro s hs\n  change continuous' (s ∘ f)\n  cases' hs with hs hs'\n  cases' hf with hf hf'\n  apply continuous.of_bundled\n  apply continuous_comp _ _ hf' hs'\n#align continuous_of_Scott_continuous continuous_of_scottContinuous\n-/\n\n"}