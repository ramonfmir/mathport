{"prod_apply":
 "theorem prod_apply [e₁.is_linear 𝕜] [e₂.is_linear 𝕜] {x : B} (hx₁ : x ∈ e₁.base_set) (hx₂ : x ∈ e₂.base_set) (v₁ : E₁ x)\n    (v₂ : E₂ x) :\n    prod e₁ e₂ ⟨x, (v₁, v₂)⟩ =\n      ⟨x, e₁.continuous_linear_equiv_at 𝕜 x hx₁ v₁, e₂.continuous_linear_equiv_at 𝕜 x hx₂ v₂⟩ :=\n  rfl\n#align prod_apply prod_apply\n\n",
 "coord_changeL_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n@[simp]\ntheorem coord_changeL_prod [e₁.is_linear 𝕜] [e₁'.is_linear 𝕜] [e₂.is_linear 𝕜] [e₂'.is_linear 𝕜] ⦃b⦄\n    (hb : b ∈ (e₁.prod e₂).base_set ∩ (e₁'.prod e₂').base_set) :\n    ((e₁.prod e₂).coord_changeL 𝕜 (e₁'.prod e₂') b : «expr →L[ ] » (F₁ × F₂) 𝕜 (F₁ × F₂)) =\n      (e₁.coord_changeL 𝕜 e₁' b : «expr →L[ ] » F₁ 𝕜 F₁).prod_map (e₂.coord_changeL 𝕜 e₂' b) :=\n  by\n  rw [ContinuousLinearMap.ext_iff, ContinuousLinearMap.coe_prodMap']\n  rintro ⟨v₁, v₂⟩\n  show\n    (e₁.prod e₂).coord_changeL 𝕜 (e₁'.prod e₂') b (v₁, v₂) = (e₁.coord_changeL 𝕜 e₁' b v₁, e₂.coord_changeL 𝕜 e₂' b v₂)\n  rw [e₁.coord_changeL_apply e₁', e₂.coord_changeL_apply e₂', (e₁.prod e₂).coord_changeL_apply']\n  exacts[rfl, hb, ⟨hb.1.2, hb.2.2⟩, ⟨hb.1.1, hb.2.1⟩]\n#align coord_changeL_prod coord_changeL_prod\n\n",
 "coord_changeL":
 "/-\nCopyright © 2022 Nicolò Cavalleri. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Nicolò Cavalleri, Sébastien Gouëzel, Heather Macbeth, Floris van Doorn\n-/\ntheorem trivialization.coord_changeL (b : B) :\n    (trivialization B F).coord_changeL 𝕜 (trivialization B F) b = ContinuousLinearEquiv.refl 𝕜 F :=\n  by\n  ext v\n  rw [trivialization.coord_changeL_apply']\n  exacts[rfl, ⟨mem_univ _, mem_univ _⟩]\n#align trivialization.coord_changeL trivialization.coord_changeL\n\n",
 "continuous_linear_equiv_at_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprπ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprπ -/\n@[simp]\ntheorem trivialization.continuous_linear_equiv_at_prod {e₁ : Trivialization F₁ ((exprπ) E₁)}\n    {e₂ : Trivialization F₂ ((exprπ) E₂)} [e₁.is_linear 𝕜] [e₂.is_linear 𝕜] {x : B} (hx₁ : x ∈ e₁.base_set)\n    (hx₂ : x ∈ e₂.base_set) :\n    (e₁.prod e₂).continuous_linear_equiv_at 𝕜 x ⟨hx₁, hx₂⟩ =\n      (e₁.continuous_linear_equiv_at 𝕜 x hx₁).prod (e₂.continuous_linear_equiv_at 𝕜 x hx₂) :=\n  by\n  ext1\n  funext v\n  obtain ⟨v₁, v₂⟩ := v\n  rw [(e₁.prod e₂).continuous_linear_equiv_at_apply 𝕜, trivialization.prod]\n  exact (congr_arg Prod.snd (prod_apply 𝕜 hx₁ hx₂ v₁ v₂) : _)\n#align trivialization.continuous_linear_equiv_at_prod trivialization.continuous_linear_equiv_at_prod\n\n"}