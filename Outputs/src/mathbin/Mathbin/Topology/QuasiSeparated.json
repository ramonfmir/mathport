{"of_subset":
 "#print IsQuasiSeparated.of_subset /-\ntheorem IsQuasiSeparated.of_subset {s t : Set α} (ht : IsQuasiSeparated t) (h : s ⊆ t) : IsQuasiSeparated s :=\n  by\n  intro U V hU hU' hU'' hV hV' hV''\n  exact ht U V (hU.trans h) hU' hU'' (hV.trans h) hV' hV''\n#align is_quasi_separated.of_subset IsQuasiSeparated.of_subset\n-/\n\n",
 "of_quasiSeparatedSpace":
 "#print IsQuasiSeparated.of_quasiSeparatedSpace /-\ntheorem IsQuasiSeparated.of_quasiSeparatedSpace (s : Set α) [QuasiSeparatedSpace α] : IsQuasiSeparated s :=\n  isQuasiSeparated_univ.of_subset (Set.subset_univ _)\n#align is_quasi_separated.of_quasi_separated_space IsQuasiSeparated.of_quasiSeparatedSpace\n-/\n\n",
 "of_openEmbedding":
 "#print QuasiSeparatedSpace.of_openEmbedding /-\ntheorem QuasiSeparatedSpace.of_openEmbedding (h : OpenEmbedding f) [QuasiSeparatedSpace β] : QuasiSeparatedSpace α :=\n  isQuasiSeparated_univ_iff.mp (h.is_quasi_separated_iff.mpr <| IsQuasiSeparated.of_quasiSeparatedSpace _)\n#align quasi_separated_space.of_open_embedding QuasiSeparatedSpace.of_openEmbedding\n-/\n\n",
 "isQuasiSeparated_univ_iff":
 "#print isQuasiSeparated_univ_iff /-\n/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem isQuasiSeparated_univ_iff {α : Type _} [TopologicalSpace α] :\n    IsQuasiSeparated (Set.univ : Set α) ↔ QuasiSeparatedSpace α :=\n  by\n  rw [quasi_separated_space_iff]\n  simp [IsQuasiSeparated]\n#align is_quasi_separated_univ_iff isQuasiSeparated_univ_iff\n-/\n\n",
 "isQuasiSeparated_univ":
 "#print isQuasiSeparated_univ /-\ntheorem isQuasiSeparated_univ {α : Type _} [TopologicalSpace α] [QuasiSeparatedSpace α] :\n    IsQuasiSeparated (Set.univ : Set α) :=\n  isQuasiSeparated_univ_iff.mpr inferInstance\n#align is_quasi_separated_univ isQuasiSeparated_univ\n-/\n\n",
 "isQuasiSeparated_iff_quasiSeparatedSpace":
 "#print isQuasiSeparated_iff_quasiSeparatedSpace /-\ntheorem isQuasiSeparated_iff_quasiSeparatedSpace (s : Set α) (hs : IsOpen s) :\n    IsQuasiSeparated s ↔ QuasiSeparatedSpace s :=\n  by\n  rw [← isQuasiSeparated_univ_iff]\n  convert hs.open_embedding_subtype_coe.is_quasi_separated_iff.symm <;> simp\n#align is_quasi_separated_iff_quasi_separated_space isQuasiSeparated_iff_quasiSeparatedSpace\n-/\n\n",
 "isQuasiSeparated_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print OpenEmbedding.isQuasiSeparated_iff /-\ntheorem OpenEmbedding.isQuasiSeparated_iff (h : OpenEmbedding f) {s : Set α} :\n    IsQuasiSeparated s ↔ IsQuasiSeparated («expr '' » f s) :=\n  by\n  refine' ⟨fun hs => hs.image_of_embedding h.to_embedding, _⟩\n  intro H U V hU hU' hU'' hV hV' hV''\n  rw [h.to_embedding.is_compact_iff_is_compact_image, Set.image_inter h.inj]\n  exact\n    H («expr '' » f U) («expr '' » f V) (Set.image_subset _ hU) (h.is_open_map _ hU') (hU''.image h.continuous)\n      (Set.image_subset _ hV) (h.is_open_map _ hV') (hV''.image h.continuous)\n#align open_embedding.is_quasi_separated_iff OpenEmbedding.isQuasiSeparated_iff\n-/\n\n",
 "image_of_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print IsQuasiSeparated.image_of_embedding /-\ntheorem IsQuasiSeparated.image_of_embedding {s : Set α} (H : IsQuasiSeparated s) (h : Embedding f) :\n    IsQuasiSeparated («expr '' » f s) := by\n  intro U V hU hU' hU'' hV hV' hV''\n  convert(H («expr ⁻¹' » f U) («expr ⁻¹' » f V) _ (h.continuous.1 _ hU') _ _ (h.continuous.1 _ hV') _).image\n      h.continuous\n  · symm\n    rw [← Set.preimage_inter, Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset]\n    exact (Set.inter_subset_left _ _).trans (hU.trans (Set.image_subset_range _ _))\n  · intro x hx\n    rw [← (h.inj.inj_on _).mem_image_iff (Set.subset_univ _) trivial]\n    exact hU hx\n  · rw [h.is_compact_iff_is_compact_image]\n    convert hU''\n    rw [Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset]\n    exact hU.trans (Set.image_subset_range _ _)\n  · intro x hx\n    rw [← (h.inj.inj_on _).mem_image_iff (Set.subset_univ _) trivial]\n    exact hV hx\n  · rw [h.is_compact_iff_is_compact_image]\n    convert hV''\n    rw [Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset]\n    exact hV.trans (Set.image_subset_range _ _)\n#align is_quasi_separated.image_of_embedding IsQuasiSeparated.image_of_embedding\n-/\n\n"}