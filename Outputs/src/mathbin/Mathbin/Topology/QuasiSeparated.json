{"of_subset":
 "theorem is_quasi_separated.of_subset {s t : set α} (ht : is_quasi_separated t) (h : s ⊆ t) : is_quasi_separated s :=\n  by\n  intro U V hU hU' hU'' hV hV' hV''\n  exact ht U V (hU.trans h) hU' hU'' (hV.trans h) hV' hV''\n#align is_quasi_separated.of_subset is_quasi_separated.of_subset\n\n",
 "of_quasi_separated_space":
 "theorem is_quasi_separated.of_quasi_separated_space (s : set α) [quasi_separated_space α] : is_quasi_separated s :=\n  is_quasi_separated_univ.of_subset (Set.subset_univ _)\n#align is_quasi_separated.of_quasi_separated_space is_quasi_separated.of_quasi_separated_space\n\n",
 "of_open_embedding":
 "theorem quasi_separated_space.of_open_embedding (h : open_embedding f) [quasi_separated_space β] :\n    quasi_separated_space α :=\n  is_quasi_separated_univ_iff.mp (h.is_quasi_separated_iff.mpr <| is_quasi_separated.of_quasi_separated_space _)\n#align quasi_separated_space.of_open_embedding quasi_separated_space.of_open_embedding\n\n",
 "is_quasi_separated_univ_iff":
 "/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem is_quasi_separated_univ_iff {α : Type _} [topological_space α] :\n    is_quasi_separated (Set.univ : set α) ↔ quasi_separated_space α :=\n  by\n  rw [quasi_separated_space_iff]\n  simp [is_quasi_separated]\n#align is_quasi_separated_univ_iff is_quasi_separated_univ_iff\n\n",
 "is_quasi_separated_univ":
 "theorem is_quasi_separated_univ {α : Type _} [topological_space α] [quasi_separated_space α] :\n    is_quasi_separated (Set.univ : set α) :=\n  is_quasi_separated_univ_iff.mpr infer_instance\n#align is_quasi_separated_univ is_quasi_separated_univ\n\n",
 "is_quasi_separated_iff_quasi_separated_space":
 "theorem is_quasi_separated_iff_quasi_separated_space (s : set α) (hs : is_open s) :\n    is_quasi_separated s ↔ quasi_separated_space s :=\n  by\n  rw [← is_quasi_separated_univ_iff]\n  convert hs.open_embedding_subtype_coe.is_quasi_separated_iff.symm <;> simp\n#align is_quasi_separated_iff_quasi_separated_space is_quasi_separated_iff_quasi_separated_space\n\n",
 "is_quasi_separated_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem open_embedding.is_quasi_separated_iff (h : open_embedding f) {s : set α} :\n    is_quasi_separated s ↔ is_quasi_separated («expr '' » f s) :=\n  by\n  refine' ⟨fun hs => hs.image_of_embedding h.to_embedding, _⟩\n  intro H U V hU hU' hU'' hV hV' hV''\n  rw [h.to_embedding.is_compact_iff_is_compact_image, Set.image_inter h.inj]\n  exact\n    H («expr '' » f U) («expr '' » f V) (Set.image_subset _ hU) (h.is_open_map _ hU') (hU''.image h.continuous)\n      (Set.image_subset _ hV) (h.is_open_map _ hV') (hV''.image h.continuous)\n#align open_embedding.is_quasi_separated_iff open_embedding.is_quasi_separated_iff\n\n",
 "image_of_embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_quasi_separated.image_of_embedding {s : set α} (H : is_quasi_separated s) (h : embedding f) :\n    is_quasi_separated («expr '' » f s) := by\n  intro U V hU hU' hU'' hV hV' hV''\n  convert\n    (H («expr ⁻¹' » f U) («expr ⁻¹' » f V) _ (h.continuous.1 _ hU') _ _ (h.continuous.1 _ hV') _).image h.continuous\n  · symm\n    rw [← Set.preimage_inter, Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset]\n    exact (Set.inter_subset_left _ _).trans (hU.trans (Set.image_subset_range _ _))\n  · intro x hx\n    rw [← (h.inj.inj_on _).mem_image_iff (Set.subset_univ _) trivial]\n    exact hU hx\n  · rw [h.is_compact_iff_is_compact_image]\n    convert hU''\n    rw [Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset]\n    exact hU.trans (Set.image_subset_range _ _)\n  · intro x hx\n    rw [← (h.inj.inj_on _).mem_image_iff (Set.subset_univ _) trivial]\n    exact hV hx\n  · rw [h.is_compact_iff_is_compact_image]\n    convert hV''\n    rw [Set.image_preimage_eq_inter_range, Set.inter_eq_left_iff_subset]\n    exact hV.trans (Set.image_subset_range _ _)\n#align is_quasi_separated.image_of_embedding is_quasi_separated.image_of_embedding\n\n"}