{"union":
 "/-- The union of two Gδ sets is a Gδ set. -/\ntheorem is_Gδ.union {s t : set α} (hs : is_Gδ s) (ht : is_Gδ t) : is_Gδ (s ∪ t) :=\n  by\n  rcases hs with ⟨S, Sopen, Scount, rfl⟩\n  rcases ht with ⟨T, Topen, Tcount, rfl⟩\n  rw [sInter_union_sInter]\n  apply is_Gδ_bInter_of_open (Scount.prod Tcount)\n  rintro ⟨a, b⟩ ⟨ha, hb⟩\n  exact (Sopen a ha).union (Topen b hb)\n#align is_Gδ.union is_Gδ.union\n\n",
 "is_Gδ_univ":
 "@[simp]\ntheorem is_Gδ_univ : is_Gδ (univ : set α) :=\n  is_open_univ.is_Gδ\n#align is_Gδ_univ is_Gδ_univ\n\n",
 "is_Gδ_singleton":
 "theorem is_Gδ_singleton (a : α) : is_Gδ ({a} : set α) :=\n  by\n  rcases(nhds_basis_opens a).exists_antitone_subbasis with ⟨U, hU, h_basis⟩\n  rw [← bInter_basis_nhds h_basis.to_has_basis]\n  exact is_Gδ_bInter (to_countable _) fun n hn => (hU n).2.is_Gδ\n#align is_Gδ_singleton is_Gδ_singleton\n\n",
 "is_Gδ_set_of_continuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/-- The set of points where a function is continuous is a Gδ set. -/\ntheorem is_Gδ_set_of_continuous_at [uniform_space β] [is_countably_generated ((uniformity) β)] (f : α → β) :\n    is_Gδ { x | continuous_at f x } :=\n  by\n  obtain ⟨U, hUo, hU⟩ := (@uniformity_has_basis_open_symmetric β _).exists_antitone_subbasis\n  simp only [uniform.continuous_at_iff_prod, nhds_prod_eq]\n  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.to_has_basis, forall_prop_of_true, set_of_forall, id]\n  refine' is_Gδ_Inter fun k => is_open.is_Gδ <| is_open_iff_mem_nhds.2 fun x => _\n  rintro ⟨s, ⟨hsx, hso⟩, hsU⟩\n  filter_upwards [is_open.mem_nhds hso hsx] with _ hy using⟨s, ⟨hy, hso⟩, hsU⟩\n#align is_Gδ_set_of_continuous_at is_Gδ_set_of_continuous_at\n\n",
 "is_Gδ_sInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n/-- A countable intersection of Gδ sets is a Gδ set. -/\ntheorem is_Gδ_sInter {S : set (set α)} (h : ∀ s ∈ S, is_Gδ s) (hS : S.countable) : is_Gδ («expr⋂₀ » S) := by\n  simpa only [sInter_eq_bInter] using is_Gδ_bInter hS h\n#align is_Gδ_sInter is_Gδ_sInter\n\n",
 "is_Gδ_empty":
 "@[simp]\ntheorem is_Gδ_empty : is_Gδ (∅ : set α) :=\n  is_open_empty.is_Gδ\n#align is_Gδ_empty is_Gδ_empty\n\n",
 "is_Gδ_compl_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem is_Gδ_compl_singleton (a : α) : is_Gδ («expr ᶜ» {a} : set α) :=\n  is_open_compl_singleton.is_Gδ\n#align is_Gδ_compl_singleton is_Gδ_compl_singleton\n\n",
 "is_Gδ_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\ntheorem finset.is_Gδ_compl (s : Finset α) : is_Gδ («expr ᶜ» s : set α) :=\n  s.finite_to_set.is_Gδ_compl\n#align finset.is_Gδ_compl finset.is_Gδ_compl\n\n",
 "is_Gδ_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- The union of finitely many Gδ sets is a Gδ set. -/\ntheorem is_Gδ_bUnion {s : set ι} (hs : s.finite) {f : ι → set α} (h : ∀ i ∈ s, is_Gδ (f i)) :\n    is_Gδ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  by\n  refine' finite.induction_on hs (by simp) _ h\n  simp only [ball_insert_iff, bUnion_insert]\n  exact fun a s _ _ ihs H => H.1.union (ihs H.2)\n#align is_Gδ_bUnion is_Gδ_bUnion\n\n",
 "is_Gδ_bInter_of_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem is_Gδ_bInter_of_open {I : set ι} (hI : I.countable) {f : ι → set α} (hf : ∀ i ∈ I, is_open (f i)) :\n    is_Gδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f i)) :=\n  ⟨«expr '' » f I, by rwa [ball_image_iff], hI.image _, by rw [sInter_image]⟩\n#align is_Gδ_bInter_of_open is_Gδ_bInter_of_open\n\n",
 "is_Gδ_bInter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem is_Gδ_bInter {s : set ι} (hs : s.countable) {t : ∀ i ∈ s, set α} (ht : ∀ i ∈ s, is_Gδ (t i ‹_›)) :\n    is_Gδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (t i ‹_›)) :=\n  by\n  rw [bInter_eq_Inter]\n  haveI := hs.to_encodable\n  exact is_Gδ_Inter fun x => ht x x.2\n#align is_Gδ_bInter is_Gδ_bInter\n\n",
 "is_Gδ_Inter_of_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem is_Gδ_Inter_of_open [Encodable ι] {f : ι → set α} (hf : ∀ i, is_open (f i)) :\n    is_Gδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f i)) :=\n  ⟨range f, by rwa [forall_range_iff], countable_range _, by rw [sInter_range]⟩\n#align is_Gδ_Inter_of_open is_Gδ_Inter_of_open\n\n",
 "is_Gδ_Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/-- The intersection of an encodable family of Gδ sets is a Gδ set. -/\ntheorem is_Gδ_Inter [Encodable ι] {s : ι → set α} (hs : ∀ i, is_Gδ (s i)) :\n    is_Gδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) :=\n  by\n  choose T hTo hTc hTs using hs\n  obtain rfl : s = fun i => «expr⋂₀ » (T i) := funext hTs\n  refine'\n    ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (T i), _,\n      countable_Union hTc, (sInter_Union _).symm⟩\n  simpa [@forall_swap ι] using hTo\n#align is_Gδ_Inter is_Gδ_Inter\n\n",
 "is_Gδ":
 "theorem set.finite.is_Gδ {s : set α} (hs : s.finite) : is_Gδ s :=\n  finite.induction_on hs is_Gδ_empty fun a s _ _ hs => (is_Gδ_singleton a).union hs\n#align set.finite.is_Gδ set.finite.is_Gδ\n\n",
 "inter":
 "theorem is_Gδ.inter {s t : set α} (hs : is_Gδ s) (ht : is_Gδ t) : is_Gδ (s ∩ t) :=\n  by\n  rw [inter_eq_Inter]\n  exact is_Gδ_Inter (bool.forall_bool.2 ⟨ht, hs⟩)\n#align is_Gδ.inter is_Gδ.inter\n\n"}