{"union":
 "#print IsGδ.union /-\n/-- The union of two Gδ sets is a Gδ set. -/\ntheorem IsGδ.union {s t : Set α} (hs : IsGδ s) (ht : IsGδ t) : IsGδ (s ∪ t) :=\n  by\n  rcases hs with ⟨S, Sopen, Scount, rfl⟩\n  rcases ht with ⟨T, Topen, Tcount, rfl⟩\n  rw [sInter_union_sInter]\n  apply isGδ_binterᵢ_of_open (Scount.prod Tcount)\n  rintro ⟨a, b⟩ ⟨ha, hb⟩\n  exact (Sopen a ha).union (Topen b hb)\n#align is_Gδ.union IsGδ.union\n-/\n\n",
 "isGδ_univ":
 "#print isGδ_univ /-\n@[simp]\ntheorem isGδ_univ : IsGδ (univ : Set α) :=\n  isOpen_univ.is_Gδ\n#align is_Gδ_univ isGδ_univ\n-/\n\n",
 "isGδ_singleton":
 "#print isGδ_singleton /-\ntheorem isGδ_singleton (a : α) : IsGδ ({a} : Set α) :=\n  by\n  rcases(nhds_basis_opens a).exists_antitone_subbasis with ⟨U, hU, h_basis⟩\n  rw [← binterᵢ_basis_nhds h_basis.to_has_basis]\n  exact isGδ_binterᵢ (to_countable _) fun n hn => (hU n).2.is_Gδ\n#align is_Gδ_singleton isGδ_singleton\n-/\n\n",
 "isGδ_setOf_continuousAt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print isGδ_setOf_continuousAt /-\n/-- The set of points where a function is continuous is a Gδ set. -/\ntheorem isGδ_setOf_continuousAt [UniformSpace β] [IsCountablyGenerated ((uniformity) β)] (f : α → β) :\n    IsGδ { x | ContinuousAt f x } :=\n  by\n  obtain ⟨U, hUo, hU⟩ := (@uniformity_hasBasis_open_symmetric β _).exists_antitone_subbasis\n  simp only [Uniform.continuousAt_iff_prod, nhds_prod_eq]\n  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.to_has_basis, forall_prop_of_true, set_of_forall, id]\n  refine' isGδ_interᵢ fun k => IsOpen.isGδ <| isOpen_iff_mem_nhds.2 fun x => _\n  rintro ⟨s, ⟨hsx, hso⟩, hsU⟩\n  filter_upwards [IsOpen.mem_nhds hso hsx]with _ hy using⟨s, ⟨hy, hso⟩, hsU⟩\n#align is_Gδ_set_of_continuous_at isGδ_setOf_continuousAt\n-/\n\n",
 "isGδ_interₛ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n#print isGδ_interₛ /-\n/-- A countable intersection of Gδ sets is a Gδ set. -/\ntheorem isGδ_interₛ {S : Set (Set α)} (h : ∀ s ∈ S, IsGδ s) (hS : S.countable) : IsGδ («expr⋂₀ » S) := by\n  simpa only [sInter_eq_bInter] using isGδ_binterᵢ hS h\n#align is_Gδ_sInter isGδ_interₛ\n-/\n\n",
 "isGδ_interᵢ_of_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print isGδ_interᵢ_of_open /-\ntheorem isGδ_interᵢ_of_open [Encodable ι] {f : ι → Set α} (hf : ∀ i, IsOpen (f i)) :\n    IsGδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f i)) :=\n  ⟨range f, by rwa [forall_range_iff], countable_range _, by rw [sInter_range]⟩\n#align is_Gδ_Inter_of_open isGδ_interᵢ_of_open\n-/\n\n",
 "isGδ_interᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print isGδ_interᵢ /-\n/-- The intersection of an encodable family of Gδ sets is a Gδ set. -/\ntheorem isGδ_interᵢ [Encodable ι] {s : ι → Set α} (hs : ∀ i, IsGδ (s i)) :\n    IsGδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (s i)) :=\n  by\n  choose T hTo hTc hTs using hs\n  obtain rfl : s = fun i => «expr⋂₀ » (T i) := funext hTs\n  refine'\n    ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (T i), _,\n      countable_Union hTc, (sInter_Union _).symm⟩\n  simpa [@forall_swap ι] using hTo\n#align is_Gδ_Inter isGδ_interᵢ\n-/\n\n",
 "isGδ_empty":
 "#print isGδ_empty /-\n@[simp]\ntheorem isGδ_empty : IsGδ (∅ : Set α) :=\n  isOpen_empty.is_Gδ\n#align is_Gδ_empty isGδ_empty\n-/\n\n",
 "isGδ_compl_singleton":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print isGδ_compl_singleton /-\ntheorem isGδ_compl_singleton (a : α) : IsGδ («expr ᶜ» {a} : Set α) :=\n  isOpen_compl_singleton.is_Gδ\n#align is_Gδ_compl_singleton isGδ_compl_singleton\n-/\n\n",
 "isGδ_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print Finset.isGδ_compl /-\ntheorem Finset.isGδ_compl (s : Finset α) : IsGδ («expr ᶜ» s : Set α) :=\n  s.finite_to_set.is_Gδ_compl\n#align finset.is_Gδ_compl Finset.isGδ_compl\n-/\n\n",
 "isGδ_bunionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print isGδ_bunionᵢ /-\n/-- The union of finitely many Gδ sets is a Gδ set. -/\ntheorem isGδ_bunionᵢ {s : Set ι} (hs : s.finite) {f : ι → Set α} (h : ∀ i ∈ s, IsGδ (f i)) :\n    IsGδ («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  by\n  refine' finite.induction_on hs (by simp) _ h\n  simp only [ball_insert_iff, bUnion_insert]\n  exact fun a s _ _ ihs H => H.1.union (ihs H.2)\n#align is_Gδ_bUnion isGδ_bunionᵢ\n-/\n\n",
 "isGδ_binterᵢ_of_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print isGδ_binterᵢ_of_open /-\ntheorem isGδ_binterᵢ_of_open {I : Set ι} (hI : I.countable) {f : ι → Set α} (hf : ∀ i ∈ I, IsOpen (f i)) :\n    IsGδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f i)) :=\n  ⟨«expr '' » f I, by rwa [ball_image_iff], hI.image _, by rw [sInter_image]⟩\n#align is_Gδ_bInter_of_open isGδ_binterᵢ_of_open\n-/\n\n",
 "isGδ_binterᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n#print isGδ_binterᵢ /-\ntheorem isGδ_binterᵢ {s : Set ι} (hs : s.countable) {t : ∀ i ∈ s, Set α} (ht : ∀ i ∈ s, IsGδ (t i ‹_›)) :\n    IsGδ («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (t i ‹_›)) :=\n  by\n  rw [bInter_eq_Inter]\n  haveI := hs.to_encodable\n  exact isGδ_interᵢ fun x => ht x x.2\n#align is_Gδ_bInter isGδ_binterᵢ\n-/\n\n",
 "isGδ":
 "#print Set.Finite.isGδ /-\ntheorem Set.Finite.isGδ {s : Set α} (hs : s.finite) : IsGδ s :=\n  Finite.induction_on hs isGδ_empty fun a s _ _ hs => (isGδ_singleton a).union hs\n#align set.finite.is_Gδ Set.Finite.isGδ\n-/\n\n",
 "inter":
 "#print IsGδ.inter /-\ntheorem IsGδ.inter {s t : Set α} (hs : IsGδ s) (ht : IsGδ t) : IsGδ (s ∩ t) :=\n  by\n  rw [inter_eq_Inter]\n  exact isGδ_interᵢ (Bool.forall_bool.2 ⟨ht, hs⟩)\n#align is_Gδ.inter IsGδ.inter\n-/\n\n"}