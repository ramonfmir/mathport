{"tendsto_nhds_generate_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem tendsto_nhds_generate_from {β : Type _} {m : α → β} {f : filter α} {g : set (set β)} {b : β}\n    (h : ∀ s ∈ g, b ∈ s → «expr ⁻¹' » m s ∈ f) : tendsto m f (@nhds β (generate_from g) b) := by\n  rw [nhds_generate_from] <;>\n    exact tendsto_infi.2 fun s => tendsto_infi.2 fun ⟨hbs, hsg⟩ => tendsto_principal.2 <| h s hsg hbs\n#align tendsto_nhds_generate_from tendsto_nhds_generate_from\n\n",
 "singletons_open_iff_discrete":
 "theorem singletons_open_iff_discrete {X : Type _} [topological_space X] :\n    (∀ a : X, is_open ({a} : set X)) ↔ discrete_topology X :=\n  ⟨fun h => ⟨eq_bot_of_singletons_open h⟩, fun a _ => @is_open_discrete _ _ a _⟩\n#align singletons_open_iff_discrete singletons_open_iff_discrete\n\n",
 "set_of_is_open_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem set_of_is_open_supr {t : ι → topological_space α} :\n    { s |\n        («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (t i)).is_open\n          s } =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        { s | (t i).is_open s } :=\n  @GaloisConnection.u_infᵢ _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ _\n    (fun g t => generate_from_le_iff_subset_is_open) t\n#align set_of_is_open_supr set_of_is_open_supr\n\n",
 "set_of_is_open_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem set_of_is_open_sup (t₁ t₂ : topological_space α) :\n    { s | («expr ⊔ » t₁ t₂).is_open s } = { s | t₁.is_open s } ∩ { s | t₂.is_open s } :=\n  @GaloisConnection.u_inf _ («expr ᵒᵈ» (topological_space α)) t₁ t₂ _ _ _ _ fun g t =>\n    generate_from_le_iff_subset_is_open\n#align set_of_is_open_sup set_of_is_open_sup\n\n",
 "set_of_is_open_injective":
 "theorem set_of_is_open_injective : injective fun t : topological_space α => { s | t.is_open s } :=\n  (gi_generate_from α).u_injective\n#align set_of_is_open_injective set_of_is_open_injective\n\n",
 "set_of_is_open_Sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem set_of_is_open_Sup {T : set (topological_space α)} :\n    { s | (supₛ T).is_open s } =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n        { s | (t : topological_space α).is_open s } :=\n  @GaloisConnection.u_infₛ _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (fun g t => generate_from_le_iff_subset_is_open)\n    T\n#align set_of_is_open_Sup set_of_is_open_Sup\n\n",
 "preimage_nhds_coinduced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem preimage_nhds_coinduced [topological_space α] {π : α → β} {s : set β} {a : α}\n    (hs : s ∈ @nhds β (topological_space.coinduced π ‹_›) (π a)) : «expr ⁻¹' » π s ∈ (nhds) a :=\n  by\n  letI := topological_space.coinduced π ‹_›\n  rcases mem_nhds_iff.mp hs with ⟨V, hVs, V_op, mem_V⟩\n  exact mem_nhds_iff.mpr ⟨«expr ⁻¹' » π V, Set.preimage_mono hVs, V_op, mem_V⟩\n#align preimage_nhds_coinduced preimage_nhds_coinduced\n\n",
 "nhds_true":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n@[simp]\ntheorem nhds_true : (nhds) true = pure true :=\n  le_antisymm (le_pure_iff.2 <| is_open_singleton_true.mem_nhds <| mem_singleton _) (pure_le_nhds _)\n#align nhds_true nhds_true\n\n",
 "nhds_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem nhds_top {a : α} : @nhds α («expr⊤») a = «expr⊤» :=\n  (gc_nhds a).u_top\n#align nhds_top nhds_top\n\n",
 "nhds_mono":
 "theorem nhds_mono {t₁ t₂ : topological_space α} {a : α} (h : t₁ ≤ t₂) : @nhds α t₁ a ≤ @nhds α t₂ a :=\n  (gc_nhds a).monotone_u h\n#align nhds_mono nhds_mono\n\n",
 "nhds_mk_of_nhds_single":
 "theorem nhds_mk_of_nhds_single [decidable_eq α] {a₀ : α} {l : filter α} (h : pure a₀ ≤ l) (b : α) :\n    @nhds α (topological_space.mk_of_nhds <| update pure a₀ l) b = (update pure a₀ l : α → filter α) b :=\n  by\n  refine' nhds_mk_of_nhds _ _ (le_update_iff.mpr ⟨h, fun _ _ => le_rfl⟩) fun a s hs => _\n  rcases eq_or_ne a a₀ with (rfl | ha)\n  · refine' ⟨s, hs, subset.rfl, fun b hb => _⟩\n    rcases eq_or_ne b a with (rfl | hb)\n    · exact hs\n    · rwa [update_noteq hb]\n  · have hs' := hs\n    rw [update_noteq ha] at hs⊢\n    exact ⟨{a}, rfl, singleton_subset_iff.mpr hs, forall_eq.2 hs'⟩\n#align nhds_mk_of_nhds_single nhds_mk_of_nhds_single\n\n",
 "nhds_mk_of_nhds_filter_basis":
 "theorem nhds_mk_of_nhds_filter_basis (B : α → filter_basis α) (a : α) (h₀ : ∀ (x), ∀ n ∈ B x, x ∈ n)\n    (h₁ : ∀ (x), ∀ n ∈ B x, ∃ n₁ ∈ B x, n₁ ⊆ n ∧ ∀ x' ∈ n₁, ∃ n₂ ∈ B x', n₂ ⊆ n) :\n    @nhds α (topological_space.mk_of_nhds fun x => (B x).filter) a = (B a).filter :=\n  by\n  rw [topological_space.nhds_mk_of_nhds] <;> intro x n hn <;> obtain ⟨m, hm₁, hm₂⟩ := (B x).mem_filter_iff.mp hn\n  · exact hm₂ (h₀ _ _ hm₁)\n  · obtain ⟨n₁, hn₁, hn₂, hn₃⟩ := h₁ x m hm₁\n    refine' ⟨n₁, (B x).mem_filter_of_mem hn₁, hn₂.trans hm₂, fun x' hx' => (B x').mem_filter_iff.mp _⟩\n    obtain ⟨n₂, hn₄, hn₅⟩ := hn₃ x' hx'\n    exact ⟨n₂, hn₄, hn₅.trans hm₂⟩\n#align nhds_mk_of_nhds_filter_basis nhds_mk_of_nhds_filter_basis\n\n",
 "nhds_mk_of_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem nhds_mk_of_nhds (n : α → filter α) (a : α) (h₀ : pure ≤ n)\n    (h₁ : ∀ {a s}, s ∈ n a → ∃ t ∈ n a, t ⊆ s ∧ ∀ a' ∈ t, s ∈ n a') :\n    @nhds α (topological_space.mk_of_nhds n) a = n a :=\n  by\n  letI := topological_space.mk_of_nhds n\n  refine' le_antisymm (fun s hs => _) fun s hs => _\n  · have h₀ : { b | s ∈ n b } ⊆ s := fun b hb => mem_pure.1 <| h₀ b hb\n    have h₁ : { b | s ∈ n b } ∈ (nhds) a :=\n      by\n      refine' is_open.mem_nhds (fun b (hb : s ∈ n b) => _) hs\n      rcases h₁ hb with ⟨t, ht, hts, h⟩\n      exact mem_of_superset ht h\n    exact mem_of_superset h₁ h₀\n  · rcases(@mem_nhds_iff α (topological_space.mk_of_nhds n) _ _).1 hs with ⟨t, hts, ht, hat⟩\n    exact (n a).sets_of_superset (ht _ hat) hts\n#align nhds_mk_of_nhds nhds_mk_of_nhds\n\n",
 "nhds_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem nhds_infi {ι : Sort _} {t : ι → topological_space α} {a : α} :\n    @nhds α (infᵢ t) a =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        (@nhds α (t i) a) :=\n  (gc_nhds a).u_infi\n#align nhds_infi nhds_infi\n\n",
 "nhds_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem nhds_inf {t₁ t₂ : topological_space α} {a : α} :\n    @nhds α («expr ⊓ » t₁ t₂) a = «expr ⊓ » (@nhds α t₁ a) (@nhds α t₂ a) :=\n  (gc_nhds a).u_inf\n#align nhds_inf nhds_inf\n\n",
 "nhds_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem nhds_induced [T : topological_space α] (f : β → α) (a : β) :\n    @nhds β (topological_space.induced f T) a = comap f ((nhds) (f a)) :=\n  by\n  ext s\n  rw [mem_nhds_induced, mem_comap]\n#align nhds_induced nhds_induced\n\n",
 "nhds_generate_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\ntheorem nhds_generate_from {g : set (set α)} {a : α} :\n    @nhds α (generate_from g) a =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        ((filter.principal) s) :=\n  by\n  rw [nhds_def] <;>\n    exact\n      le_antisymm (binfᵢ_mono fun s ⟨as, sg⟩ => ⟨as, generate_open.basic _ sg⟩)\n        (le_infᵢ fun s =>\n          le_infᵢ fun ⟨as, hs⟩ => by\n            revert as; clear_; induction hs\n            case basic s hs => exact fun as => infᵢ_le_of_le s <| infᵢ_le _ ⟨as, hs⟩\n            case univ =>\n              rw [principal_univ]\n              exact fun _ => le_top\n            case inter s t hs' ht' hs ht =>\n              exact fun ⟨has, hat⟩ =>\n                calc\n                  _ ≤ «expr ⊓ » ((filter.principal) s) ((filter.principal) t) := le_inf (hs has) (ht hat)\n                  _ = _ := inf_principal\n                  \n            case sUnion k hk' hk =>\n              exact fun ⟨t, htk, hat⟩ =>\n                calc\n                  _ ≤ (filter.principal) t := hk t htk hat\n                  _ ≤ _ := le_principal_iff.2 <| subset_sUnion_of_mem htk\n                  )\n#align nhds_generate_from nhds_generate_from\n\n",
 "nhds_false":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem nhds_false : (nhds) false = «expr⊤» :=\n  topological_space.nhds_generate_from.trans <| by simp [@and_comm (_ ∈ _)]\n#align nhds_false nhds_false\n\n",
 "nhds_discrete":
 "theorem nhds_discrete (α : Type _) [topological_space α] [discrete_topology α] : @nhds α _ = pure :=\n  (discrete_topology.eq_bot α).symm ▸ nhds_bot α\n#align nhds_discrete nhds_discrete\n\n",
 "nhds_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem nhds_bot (α : Type _) : @nhds α («expr⊥») = pure :=\n  by\n  refine' le_antisymm _ (@pure_le_nhds α («expr⊥»))\n  intro a s hs\n  exact @is_open.mem_nhds α («expr⊥») a s trivial hs\n#align nhds_bot nhds_bot\n\n",
 "nhds_adjoint_nhds_of_ne":
 "theorem nhds_adjoint_nhds_of_ne {α : Type _} (a : α) (f : filter α) {b : α} (h : b ≠ a) :\n    @nhds α (nhds_adjoint a f) b = pure b := by\n  apply le_antisymm\n  · intro U hU\n    rw [mem_nhds_iff]\n    use {b}\n    simp only [and_true_iff, singleton_subset_iff, mem_singleton]\n    refine' ⟨hU, fun ha => (h.symm ha).elim⟩\n  · exact @pure_le_nhds α (nhds_adjoint a f) b\n#align nhds_adjoint_nhds_of_ne nhds_adjoint_nhds_of_ne\n\n",
 "nhds_adjoint_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem nhds_adjoint_nhds {α : Type _} (a : α) (f : filter α) : @nhds α (nhds_adjoint a f) a = «expr ⊔ » (pure a) f :=\n  by\n  ext U\n  rw [mem_nhds_iff]\n  constructor\n  · rintro ⟨t, htU, ht, hat⟩\n    exact ⟨htU hat, mem_of_superset (ht hat) htU⟩\n  · rintro ⟨haU, hU⟩\n    exact ⟨U, subset.rfl, fun h => hU, haU⟩\n#align nhds_adjoint_nhds nhds_adjoint_nhds\n\n",
 "nhds_Inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem nhds_Inf {s : set (topological_space α)} {a : α} :\n    @nhds α (infₛ s) a =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (@nhds α t a) :=\n  (gc_nhds a).u_Inf\n#align nhds_Inf nhds_Inf\n\n",
 "mono":
 "theorem is_closed.mono {α} {t₁ t₂ : topological_space α} {s : set α} (hs : @is_closed α t₂ s) (h : t₁ ≤ t₂) :\n    @is_closed α t₁ s :=\n  (@is_open_compl_iff α t₁ s).mp <| hs.is_open_compl.mono h\n#align is_closed.mono is_closed.mono\n\n",
 "mk_of_closure_sets":
 "theorem mk_of_closure_sets {s : set (set α)} {hs : { u | (topological_space.generate_from s).is_open u } = s} :\n    mk_of_closure s hs = topological_space.generate_from s :=\n  topological_space_eq hs.symm\n#align mk_of_closure_sets mk_of_closure_sets\n\n",
 "mem_nhds_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n-- 𝓝 in the induced topology\ntheorem mem_nhds_induced [T : topological_space α] (f : β → α) (a : β) (s : set β) :\n    s ∈ @nhds β (topological_space.induced f T) a ↔ ∃ u ∈ (nhds) (f a), «expr ⁻¹' » f u ⊆ s :=\n  by\n  simp only [mem_nhds_iff, is_open_induced_iff, exists_prop, Set.mem_setOf_eq]\n  constructor\n  · rintro ⟨u, usub, ⟨v, openv, ueq⟩, au⟩\n    exact ⟨v, ⟨v, Set.Subset.refl v, openv, by rwa [← ueq] at au⟩, by rw [ueq] <;> exact usub⟩\n  rintro ⟨u, ⟨v, vsubu, openv, amem⟩, finvsub⟩\n  exact ⟨«expr ⁻¹' » f v, Set.Subset.trans (Set.preimage_mono vsubu) finvsub, ⟨⟨v, openv, rfl⟩, amem⟩⟩\n#align mem_nhds_induced mem_nhds_induced\n\n",
 "mem_nhds_discrete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem mem_nhds_discrete [topological_space α] [discrete_topology α] {x : α} {s : set α} : s ∈ (nhds) x ↔ x ∈ s := by\n  rw [nhds_discrete, mem_pure]\n#align mem_nhds_discrete mem_nhds_discrete\n\n",
 "map_nhds_induced_of_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem map_nhds_induced_of_surjective [T : topological_space α] {f : β → α} (hf : surjective f) (a : β) :\n    map f (@nhds β (topological_space.induced f T) a) = (nhds) (f a) := by rw [nhds_induced, map_comap_of_surjective hf]\n#align map_nhds_induced_of_surjective map_nhds_induced_of_surjective\n\n",
 "map_nhds_induced_of_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem map_nhds_induced_of_mem {a : α} (h : range f ∈ (nhds) (f a)) : map f (@nhds α (induced f t) a) = (nhds) (f a) :=\n  by rw [nhds_induced, filter.map_comap_of_mem h]\n#align map_nhds_induced_of_mem map_nhds_induced_of_mem\n\n",
 "map_nhds_induced_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\ntheorem map_nhds_induced_eq (a : α) : map f (@nhds α (induced f t) a) = nhds_within (range f) (f a) := by\n  rw [nhds_induced, filter.map_comap, nhds_within]\n#align map_nhds_induced_eq map_nhds_induced_eq\n\n",
 "left_inverse_generate_from":
 "theorem left_inverse_generate_from :\n    left_inverse topological_space.generate_from fun t : topological_space α => { s | t.is_open s } :=\n  (gi_generate_from α).left_inverse_l_u\n#align left_inverse_generate_from left_inverse_generate_from\n\n",
 "le_of_nhds_le_nhds":
 "theorem le_of_nhds_le_nhds {t₁ t₂ : topological_space α} (h : ∀ x, @nhds α t₁ x ≤ @nhds α t₂ x) : t₁ ≤ t₂ := fun s =>\n  show @is_open α t₂ s → @is_open α t₁ s\n    by\n    simp only [is_open_iff_nhds, le_principal_iff]\n    exact fun hs a ha => h _ <| hs _ ha\n#align le_of_nhds_le_nhds le_of_nhds_le_nhds\n\n",
 "le_nhds_adjoint_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (b «expr ≠ » a) -/\ntheorem le_nhds_adjoint_iff' {α : Type _} (a : α) (f : filter α) (t : topological_space α) :\n    t ≤ nhds_adjoint a f ↔ @nhds α t a ≤ «expr ⊔ » (pure a) f ∧ ∀ (b) (_ : b ≠ a), @nhds α t b = pure b :=\n  by\n  rw [le_iff_nhds]\n  constructor\n  · intro h\n    constructor\n    · specialize h a\n      rwa [nhds_adjoint_nhds] at h\n    · intro b hb\n      apply le_antisymm _ (pure_le_nhds b)\n      specialize h b\n      rwa [nhds_adjoint_nhds_of_ne a f hb] at h\n  · rintro ⟨h, h'⟩ b\n    by_cases hb : b = a\n    · rwa [hb, nhds_adjoint_nhds]\n    · simp [nhds_adjoint_nhds_of_ne a f hb, h' b hb]\n#align le_nhds_adjoint_iff' le_nhds_adjoint_iff'\n\n",
 "le_nhds_adjoint_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem le_nhds_adjoint_iff {α : Type _} (a : α) (f : filter α) (t : topological_space α) :\n    t ≤ nhds_adjoint a f ↔ @nhds α t a ≤ «expr ⊔ » (pure a) f ∧ ∀ b, b ≠ a → t.is_open {b} :=\n  by\n  change _ ↔ _ ∧ ∀ b : α, b ≠ a → is_open {b}\n  rw [le_nhds_adjoint_iff', and_congr_right_iff]\n  apply fun h => forall_congr' fun b => _\n  rw [@is_open_singleton_iff_nhds_eq_pure α t b]\n#align le_nhds_adjoint_iff le_nhds_adjoint_iff\n\n",
 "le_induced_generate_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem le_induced_generate_from {α β} [t : topological_space α] {b : set (set β)} {f : α → β}\n    (h : ∀ a : set β, a ∈ b → is_open («expr ⁻¹' » f a)) : t ≤ induced f (generate_from b) :=\n  by\n  rw [induced_generate_from_eq]\n  apply le_generate_from\n  simp only [mem_image, and_imp, forall_apply_eq_imp_iff₂, exists_imp]\n  exact h\n#align le_induced_generate_from le_induced_generate_from\n\n",
 "le_induced":
 "theorem continuous.le_induced (h : @continuous α β t t' f) : t ≤ t'.induced f :=\n  coinduced_le_iff_le_induced.1 h.coinduced_le\n#align continuous.le_induced continuous.le_induced\n\n",
 "le_iff_nhds":
 "theorem le_iff_nhds {α : Type _} (t t' : topological_space α) : t ≤ t' ↔ ∀ x, @nhds α t x ≤ @nhds α t' x :=\n  ⟨fun h x => nhds_mono h, le_of_nhds_le_nhds⟩\n#align le_iff_nhds le_iff_nhds\n\n",
 "le_generate_from_iff_subset_is_open":
 "theorem le_generate_from_iff_subset_is_open {g : set (set α)} {t : topological_space α} :\n    t ≤ topological_space.generate_from g ↔ g ⊆ { s | t.is_open s } :=\n  generate_from_le_iff_subset_is_open\n#align le_generate_from_iff_subset_is_open le_generate_from_iff_subset_is_open\n\n",
 "le_generate_from":
 "theorem le_generate_from {t : topological_space α} {g : set (set α)} (h : ∀ s ∈ g, is_open s) : t ≤ generate_from g :=\n  le_generate_from_iff_subset_is_open.2 h\n#align le_generate_from le_generate_from\n\n",
 "le_def":
 "protected theorem topological_space.le_def {α} {t s : topological_space α} : t ≤ s ↔ s.is_open ≤ t.is_open :=\n  iff.rfl\n#align topological_space.le_def topological_space.le_def\n\n",
 "is_open_top_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- The only open sets in the indiscrete topology are the empty set and the whole space. -/\ntheorem topological_space.is_open_top_iff {α} (U : set α) :\n    («expr⊤» : topological_space α).is_open U ↔ U = ∅ ∨ U = univ :=\n  ⟨fun h => by\n    induction' h with V h _ _ _ _ ih₁ ih₂ _ _ ih\n    · cases h; · exact or.inr rfl\n    · obtain ⟨rfl | rfl, rfl | rfl⟩ := ih₁, ih₂ <;> simp\n    · rw [sUnion_eq_empty, or_iff_not_imp_left]\n      intro h\n      push_neg  at h\n      obtain ⟨U, hU, hne⟩ := h\n      have := (ih U hU).resolve_left hne\n      subst this\n      refine' sUnion_eq_univ_iff.2 fun a => ⟨_, hU, trivial⟩,\n    by\n    rintro (rfl | rfl)\n    exacts[@is_open_empty _ («expr⊤»), @is_open_univ _ («expr⊤»)]⟩\n#align topological_space.is_open_top_iff topological_space.is_open_top_iff\n\n",
 "is_open_supr_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem is_open_supr_iff {s : set α} :\n    @is_open _ («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (t i))\n        s ↔\n      ∀ i, @is_open _ (t i) s :=\n  show s ∈ set_of (supᵢ t).is_open ↔ s ∈ { x : set α | ∀ i : ι, (t i).is_open x } by simp [set_of_is_open_supr]\n#align is_open_supr_iff is_open_supr_iff\n\n",
 "is_open_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem is_open_sup {t₁ t₂ : topological_space α} {s : set α} :\n    @is_open α («expr ⊔ » t₁ t₂) s ↔ @is_open α t₁ s ∧ @is_open α t₂ s :=\n  iff.rfl\n#align is_open_sup is_open_sup\n\n",
 "is_open_singleton_true":
 "@[simp]\ntheorem is_open_singleton_true : is_open ({true} : set Prop) :=\n  topological_space.generate_open.basic _ (mem_singleton _)\n#align is_open_singleton_true is_open_singleton_true\n\n",
 "is_open_singleton_nhds_adjoint":
 "theorem is_open_singleton_nhds_adjoint {α : Type _} {a b : α} (f : filter α) (hb : b ≠ a) :\n    @is_open α (nhds_adjoint a f) {b} :=\n  by\n  rw [is_open_singleton_iff_nhds_eq_pure]\n  exact nhds_adjoint_nhds_of_ne a f hb\n#align is_open_singleton_nhds_adjoint is_open_singleton_nhds_adjoint\n\n",
 "is_open_induced_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_open_induced_iff' [t : topological_space β] {s : set α} {f : α → β} :\n    (t.induced f).is_open s ↔ ∃ t, is_open t ∧ «expr ⁻¹' » f t = s :=\n  iff.rfl\n#align is_open_induced_iff' is_open_induced_iff'\n\n",
 "is_open_induced_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_open_induced_iff [t : topological_space β] {s : set α} {f : α → β} :\n    @is_open α (t.induced f) s ↔ ∃ t, is_open t ∧ «expr ⁻¹' » f t = s :=\n  iff.rfl\n#align is_open_induced_iff is_open_induced_iff\n\n",
 "is_open_induced_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_open_induced_eq {s : set α} : @is_open _ (induced f t) s ↔ s ∈ «expr '' » (preimage f) { s | is_open s } :=\n  iff.rfl\n#align is_open_induced_eq is_open_induced_eq\n\n",
 "is_open_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_open_induced {s : set β} (h : is_open s) : (induced f t).is_open («expr ⁻¹' » f s) :=\n  ⟨s, h, rfl⟩\n#align is_open_induced is_open_induced\n\n",
 "is_open_implies_is_open_iff":
 "theorem is_open_implies_is_open_iff {a b : topological_space α} : (∀ s, a.is_open s → b.is_open s) ↔ b ≤ a :=\n  iff.rfl\n#align is_open_implies_is_open_iff is_open_implies_is_open_iff\n\n",
 "is_open_iff_continuous_mem":
 "theorem is_open_iff_continuous_mem {s : set α} : is_open s ↔ continuous fun x => x ∈ s :=\n  continuous_Prop.symm\n#align is_open_iff_continuous_mem is_open_iff_continuous_mem\n\n",
 "is_open_generate_from_of_mem":
 "/-\nCopyright (c) 2017 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Mario Carneiro\n-/\ntheorem is_open_generate_from_of_mem {g : set (set α)} {s : set α} (hs : s ∈ g) : @is_open _ (generate_from g) s :=\n  generate_open.basic s hs\n#align is_open_generate_from_of_mem is_open_generate_from_of_mem\n\n",
 "is_open_discrete":
 "@[simp]\ntheorem is_open_discrete [topological_space α] [discrete_topology α] (s : set α) : is_open s :=\n  (discrete_topology.eq_bot α).symm ▸ trivial\n#align is_open_discrete is_open_discrete\n\n",
 "is_open_coinduced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_open_coinduced {t : topological_space α} {s : set β} {f : α → β} :\n    @is_open β (topological_space.coinduced f t) s ↔ is_open («expr ⁻¹' » f s) :=\n  iff.rfl\n#align is_open_coinduced is_open_coinduced\n\n",
 "is_closed_supr_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem is_closed_supr_iff {s : set α} :\n    @is_closed _ («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (t i))\n        s ↔\n      ∀ i, @is_closed _ (t i) s :=\n  by simp [← is_open_compl_iff, is_open_supr_iff]\n#align is_closed_supr_iff is_closed_supr_iff\n\n",
 "is_closed_induced_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_closed_induced_iff' [t : topological_space β] {f : α → β} {s : set α} :\n    @is_closed α (t.induced f) s ↔ ∀ a, f a ∈ closure («expr '' » f s) → a ∈ s := by\n  simp only [← closure_subset_iff_is_closed, subset_def, closure_induced]\n#align is_closed_induced_iff' is_closed_induced_iff'\n\n",
 "is_closed_induced_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_closed_induced_iff [t : topological_space β] {s : set α} {f : α → β} :\n    @is_closed α (t.induced f) s ↔ ∃ t, is_closed t ∧ «expr ⁻¹' » f t = s :=\n  by\n  simp only [← is_open_compl_iff, is_open_induced_iff]\n  exact compl_surjective.exists.trans (by simp only [preimage_compl, compl_inj_iff])\n#align is_closed_induced_iff is_closed_induced_iff\n\n",
 "is_closed_discrete":
 "@[simp]\ntheorem is_closed_discrete [topological_space α] [discrete_topology α] (s : set α) : is_closed s :=\n  is_open_compl_iff.1 <| (discrete_topology.eq_bot α).symm ▸ trivial\n#align is_closed_discrete is_closed_discrete\n\n",
 "induced_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem induced_top : («expr⊤» : topological_space α).induced g = «expr⊤» :=\n  (gc_coinduced_induced g).u_top\n#align induced_top induced_top\n\n",
 "induced_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem equiv.induced_symm {α β : Type _} (e : «expr ≃ » α β) :\n    topological_space.induced e.symm = topological_space.coinduced e :=\n  by\n  ext (t U)\n  constructor\n  · rintro ⟨V, hV, rfl⟩\n    change t.is_open («expr ⁻¹' » e _)\n    rwa [← preimage_comp, ← equiv.coe_trans, equiv.self_trans_symm]\n  · intro hU\n    refine' ⟨«expr ⁻¹' » e U, hU, _⟩\n    rw [← preimage_comp, ← equiv.coe_trans, equiv.symm_trans_self, equiv.coe_refl, preimage_id]\n#align equiv.induced_symm equiv.induced_symm\n\n",
 "induced_mono":
 "theorem induced_mono (h : t₁ ≤ t₂) : t₁.induced g ≤ t₂.induced g :=\n  (gc_coinduced_induced g).monotone_u h\n#align induced_mono induced_mono\n\n",
 "induced_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n@[simp]\ntheorem induced_infi {ι : Sort w} {t : ι → topological_space α} :\n    («expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (t i)).induced g =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        ((t i).induced g) :=\n  (gc_coinduced_induced g).u_infi\n#align induced_infi induced_infi\n\n",
 "induced_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem induced_inf : («expr ⊓ » t₁ t₂).induced g = «expr ⊓ » (t₁.induced g) (t₂.induced g) :=\n  (gc_coinduced_induced g).u_inf\n#align induced_inf induced_inf\n\n",
 "induced_iff_nhds_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem induced_iff_nhds_eq [tα : topological_space α] [tβ : topological_space β] (f : β → α) :\n    tβ = tα.induced f ↔ ∀ b, (nhds) b = comap f (nhds <| f b) :=\n  ⟨fun h a => h.symm ▸ nhds_induced f a, fun h => eq_of_nhds_eq_nhds fun x => by rw [h, nhds_induced]⟩\n#align induced_iff_nhds_eq induced_iff_nhds_eq\n\n",
 "induced_id":
 "theorem induced_id [t : topological_space α] : t.induced id = t :=\n  topological_space_eq <| funext fun s => propext <| ⟨fun ⟨s', hs, h⟩ => h ▸ hs, fun hs => ⟨s, hs, rfl⟩⟩\n#align induced_id induced_id\n\n",
 "induced_generate_from_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem induced_generate_from_eq {α β} {b : set (set β)} {f : α → β} :\n    (generate_from b).induced f = topological_space.generate_from («expr '' » (preimage f) b) :=\n  le_antisymm (le_generate_from <| ball_image_iff.2 fun s hs => ⟨s, generate_open.basic _ hs, rfl⟩)\n    (coinduced_le_iff_le_induced.1 <| le_generate_from fun s hs => generate_open.basic _ <| mem_image_of_mem _ hs)\n#align induced_generate_from_eq induced_generate_from_eq\n\n",
 "induced_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem induced_const [t : topological_space α] {x : α} : (t.induced fun y : β => x) = «expr⊤» :=\n  le_antisymm le_top (@continuous_const β α («expr⊤») t x).le_induced\n#align induced_const induced_const\n\n",
 "induced_compose":
 "theorem induced_compose [tγ : topological_space γ] {f : α → β} {g : β → γ} :\n    (tγ.induced g).induced f = tγ.induced (g ∘ f) :=\n  topological_space_eq <|\n    funext fun s =>\n      propext <|\n        ⟨fun ⟨s', ⟨s, hs, h₂⟩, h₁⟩ => h₁ ▸ h₂ ▸ ⟨s, hs, rfl⟩, fun ⟨s, hs, h⟩ => ⟨preimage g s, ⟨s, hs, rfl⟩, h ▸ rfl⟩⟩\n#align induced_compose induced_compose\n\n",
 "generate_from_union_is_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem generate_from_union_is_open (a b : topological_space α) :\n    topological_space.generate_from ({ s | a.is_open s } ∪ { s | b.is_open s }) = «expr ⊓ » a b :=\n  @GaloisInsertion.l_sup_u _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (gi_generate_from α) a b\n#align generate_from_union_is_open generate_from_union_is_open\n\n",
 "generate_from_union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem generate_from_union (a₁ a₂ : set (set α)) :\n    topological_space.generate_from (a₁ ∪ a₂) =\n      «expr ⊓ » (topological_space.generate_from a₁) (topological_space.generate_from a₂) :=\n  @GaloisConnection.l_sup _ («expr ᵒᵈ» (topological_space α)) a₁ a₂ _ _ _ _ fun g t =>\n    generate_from_le_iff_subset_is_open\n#align generate_from_union generate_from_union\n\n",
 "generate_from_surjective":
 "theorem generate_from_surjective : surjective (topological_space.generate_from : set (set α) → topological_space α) :=\n  (gi_generate_from α).l_surjective\n#align generate_from_surjective generate_from_surjective\n\n",
 "generate_from_set_of_is_open":
 "theorem generate_from_set_of_is_open (t : topological_space α) :\n    topological_space.generate_from { s | t.is_open s } = t :=\n  (gi_generate_from α).l_u_eq t\n#align generate_from_set_of_is_open generate_from_set_of_is_open\n\n",
 "generate_from_sUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem generate_from_sUnion {S : set (set (set α))} :\n    topological_space.generate_from (⋃₀ S) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        (topological_space.generate_from s) :=\n  @GaloisConnection.l_supₛ _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (fun g t => generate_from_le_iff_subset_is_open)\n    S\n#align generate_from_sUnion generate_from_sUnion\n\n",
 "generate_from_mono":
 "theorem generate_from_mono {α} {g₁ g₂ : set (set α)} (h : g₁ ⊆ g₂) :\n    topological_space.generate_from g₁ ≤ topological_space.generate_from g₂ :=\n  (gi_generate_from _).gc.monotone_l h\n#align generate_from_mono generate_from_mono\n\n",
 "generate_from_le_iff_subset_is_open":
 "-- We'll later restate this lemma in terms of the correct order on `topological_space α`.\nprivate theorem generate_from_le_iff_subset_is_open {g : set (set α)} {t : topological_space α} :\n    topological_space.generate_from g ≤ t ↔ g ⊆ { s | t.is_open s } :=\n  iff.intro (fun ht s hs => ht _ <| topological_space.generate_open.basic s hs) fun hg s hs =>\n    hs.rec_on (fun v hv => hg hv) t.is_open_univ (fun u v _ _ => t.is_open_inter u v) fun k _ => t.is_open_sUnion k\n#align generate_from_le_iff_subset_is_open generate_from_le_iff_subset_is_open\n\n",
 "generate_from_inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem generate_from_inter (a b : topological_space α) :\n    topological_space.generate_from ({ s | a.is_open s } ∩ { s | b.is_open s }) = «expr ⊔ » a b :=\n  @GaloisInsertion.l_inf_u _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (gi_generate_from α) a b\n#align generate_from_inter generate_from_inter\n\n",
 "generate_from_Union_is_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem generate_from_Union_is_open (f : ι → topological_space α) :\n    topological_space.generate_from\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          { s | (f i).is_open s }) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f i) :=\n  @GaloisInsertion.l_supᵢ_u _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (gi_generate_from α) _ f\n#align generate_from_Union_is_open generate_from_Union_is_open\n\n",
 "generate_from_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\ntheorem generate_from_Union {f : ι → set (set α)} :\n    topological_space.generate_from\n        («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        (topological_space.generate_from (f i)) :=\n  @GaloisConnection.l_supᵢ _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ _\n    (fun g t => generate_from_le_iff_subset_is_open) f\n#align generate_from_Union generate_from_Union\n\n",
 "generate_from_Inter_of_generate_from_eq_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem generate_from_Inter_of_generate_from_eq_self (f : ι → set (set α))\n    (hf : ∀ i, { s | (topological_space.generate_from (f i)).is_open s } = f i) :\n    topological_space.generate_from\n        («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (f i)) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (topological_space.generate_from (f i)) :=\n  @GaloisInsertion.l_infᵢ_of_ul_eq_self _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (gi_generate_from α) _ f hf\n#align generate_from_Inter_of_generate_from_eq_self generate_from_Inter_of_generate_from_eq_self\n\n",
 "generate_from_Inter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem generate_from_Inter (f : ι → topological_space α) :\n    topological_space.generate_from\n        («expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\"\n          { s | (f i).is_open s }) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f i) :=\n  @GaloisInsertion.l_infᵢ_u _ («expr ᵒᵈ» (topological_space α)) _ _ _ _ (gi_generate_from α) _ f\n#align generate_from_Inter generate_from_Inter\n\n",
 "gc_nhds":
 "theorem gc_nhds (a : α) : GaloisConnection (nhds_adjoint a) fun t => @nhds α t a := fun f t =>\n  by\n  rw [le_nhds_iff]\n  exact ⟨fun H s hs has => H _ has hs, fun H s has hs => H _ hs has⟩\n#align gc_nhds gc_nhds\n\n",
 "gc_coinduced_induced":
 "theorem gc_coinduced_induced (f : α → β) :\n    GaloisConnection (topological_space.coinduced f) (topological_space.induced f) := fun f g =>\n  coinduced_le_iff_le_induced\n#align gc_coinduced_induced gc_coinduced_induced\n\n",
 "forall_open_iff_discrete":
 "theorem forall_open_iff_discrete {X : Type _} [topological_space X] : (∀ s : set X, is_open s) ↔ discrete_topology X :=\n  ⟨fun h =>\n    ⟨by\n      ext U\n      show is_open U ↔ true\n      simp [h U]⟩,\n    fun a => @is_open_discrete _ _ a⟩\n#align forall_open_iff_discrete forall_open_iff_discrete\n\n",
 "eq_of_nhds_eq_nhds":
 "theorem eq_of_nhds_eq_nhds {t₁ t₂ : topological_space α} (h : ∀ x, @nhds α t₁ x = @nhds α t₂ x) : t₁ = t₂ :=\n  le_antisymm (le_of_nhds_le_nhds fun x => le_of_eq <| h x) (le_of_nhds_le_nhds fun x => le_of_eq <| (h x).symm)\n#align eq_of_nhds_eq_nhds eq_of_nhds_eq_nhds\n\n",
 "eq_bot_of_singletons_open":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem eq_bot_of_singletons_open {t : topological_space α} (h : ∀ x, t.is_open {x}) : t = «expr⊥» :=\n  bot_unique fun s hs => bunionᵢ_of_singleton s ▸ is_open_bUnion fun x _ => h x\n#align eq_bot_of_singletons_open eq_bot_of_singletons_open\n\n",
 "discrete_topology_iff_nhds_ne":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within.ne -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem discrete_topology_iff_nhds_ne [topological_space α] :\n    discrete_topology α ↔ ∀ x : α, nhds_within.ne x = «expr⊥» :=\n  by\n  rw [discrete_topology_iff_nhds]\n  apply forall_congr' fun x => _\n  rw [nhds_within, inf_principal_eq_bot, compl_compl]\n  constructor <;> intro h\n  · rw [h]\n    exact singleton_mem_pure\n  · exact le_antisymm (le_pure_iff.mpr h) (pure_le_nhds x)\n#align discrete_topology_iff_nhds_ne discrete_topology_iff_nhds_ne\n\n",
 "discrete_topology_iff_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- This lemma characterizes discrete topological spaces as those whose singletons are\nneighbourhoods. -/\ntheorem discrete_topology_iff_nhds [topological_space α] : discrete_topology α ↔ ∀ x : α, (nhds) x = pure x :=\n  by\n  constructor <;> intro h\n  · intro x\n    rw [nhds_discrete]\n  · constructor\n    apply eq_of_nhds_eq_nhds\n    simp [h, nhds_discrete]\n#align discrete_topology_iff_nhds discrete_topology_iff_nhds\n\n",
 "continuous_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[continuity]\ntheorem continuous_top {t : (exprtspace) α} : (exprcont) t («expr⊤») f :=\n  continuous_iff_coinduced_le.2 <| le_top\n#align continuous_top continuous_top\n\n",
 "continuous_supr_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_supr_rng {t₁ : (exprtspace) α} {t₂ : ι → (exprtspace) β} {i : ι} (h : (exprcont) t₁ (t₂ i) f) :\n    (exprcont) t₁ (supᵢ t₂) f :=\n  continuous_Sup_rng ⟨i, rfl⟩ h\n#align continuous_supr_rng continuous_supr_rng\n\n",
 "continuous_supr_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_supr_dom {t₁ : ι → (exprtspace) α} {t₂ : (exprtspace) β} :\n    (exprcont) (supᵢ t₁) t₂ f ↔ ∀ i, (exprcont) (t₁ i) t₂ f := by simp only [continuous_iff_le_induced, supᵢ_le_iff]\n#align continuous_supr_dom continuous_supr_dom\n\n",
 "continuous_sup_rng_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem continuous_sup_rng_right {t₁ : (exprtspace) α} {t₃ t₂ : (exprtspace) β} :\n    (exprcont) t₁ t₃ f → (exprcont) t₁ («expr ⊔ » t₂ t₃) f :=\n  continuous_le_rng le_sup_right\n#align continuous_sup_rng_right continuous_sup_rng_right\n\n",
 "continuous_sup_rng_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem continuous_sup_rng_left {t₁ : (exprtspace) α} {t₃ t₂ : (exprtspace) β} :\n    (exprcont) t₁ t₂ f → (exprcont) t₁ («expr ⊔ » t₂ t₃) f :=\n  continuous_le_rng le_sup_left\n#align continuous_sup_rng_left continuous_sup_rng_left\n\n",
 "continuous_sup_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_sup_dom {t₁ t₂ : (exprtspace) α} {t₃ : (exprtspace) β} :\n    (exprcont) («expr ⊔ » t₁ t₂) t₃ f ↔ (exprcont) t₁ t₃ f ∧ (exprcont) t₂ t₃ f := by\n  simp only [continuous_iff_le_induced, sup_le_iff]\n#align continuous_sup_dom continuous_sup_dom\n\n",
 "continuous_of_discrete_topology":
 "@[nontriviality]\ntheorem continuous_of_discrete_topology [topological_space α] [discrete_topology α] [topological_space β] {f : α → β} :\n    continuous f :=\n  continuous_def.2 fun s hs => is_open_discrete _\n#align continuous_of_discrete_topology continuous_of_discrete_topology\n\n",
 "continuous_le_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_le_rng {t₁ : (exprtspace) α} {t₂ t₃ : (exprtspace) β} (h₁ : t₂ ≤ t₃) (h₂ : (exprcont) t₁ t₂ f) :\n    (exprcont) t₁ t₃ f := by\n  rw [continuous_def] at h₂⊢\n  intro s h\n  exact h₂ s (h₁ s h)\n#align continuous_le_rng continuous_le_rng\n\n",
 "continuous_le_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_le_dom {t₁ t₂ : (exprtspace) α} {t₃ : (exprtspace) β} (h₁ : t₂ ≤ t₁) (h₂ : (exprcont) t₁ t₃ f) :\n    (exprcont) t₂ t₃ f := by\n  rw [continuous_def] at h₂⊢\n  intro s h\n  exact h₁ _ (h₂ s h)\n#align continuous_le_dom continuous_le_dom\n\n",
 "continuous_infi_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_infi_rng {t₁ : (exprtspace) α} {t₂ : ι → (exprtspace) β} :\n    (exprcont) t₁ (infᵢ t₂) f ↔ ∀ i, (exprcont) t₁ (t₂ i) f := by simp only [continuous_iff_coinduced_le, le_infᵢ_iff]\n#align continuous_infi_rng continuous_infi_rng\n\n",
 "continuous_infi_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_infi_dom {t₁ : ι → (exprtspace) α} {t₂ : (exprtspace) β} {i : ι} :\n    (exprcont) (t₁ i) t₂ f → (exprcont) (infᵢ t₁) t₂ f :=\n  continuous_le_dom <| infᵢ_le _ _\n#align continuous_infi_dom continuous_infi_dom\n\n",
 "continuous_inf_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_inf_rng {t₁ : (exprtspace) α} {t₂ t₃ : (exprtspace) β} :\n    (exprcont) t₁ («expr ⊓ » t₂ t₃) f ↔ (exprcont) t₁ t₂ f ∧ (exprcont) t₁ t₃ f := by\n  simp only [continuous_iff_coinduced_le, le_inf_iff]\n#align continuous_inf_rng continuous_inf_rng\n\n",
 "continuous_inf_dom_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem continuous_inf_dom_right {t₁ t₂ : (exprtspace) α} {t₃ : (exprtspace) β} :\n    (exprcont) t₂ t₃ f → (exprcont) («expr ⊓ » t₁ t₂) t₃ f :=\n  continuous_le_dom inf_le_right\n#align continuous_inf_dom_right continuous_inf_dom_right\n\n",
 "continuous_inf_dom_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem continuous_inf_dom_left {t₁ t₂ : (exprtspace) α} {t₃ : (exprtspace) β} :\n    (exprcont) t₁ t₃ f → (exprcont) («expr ⊓ » t₁ t₂) t₃ f :=\n  continuous_le_dom inf_le_left\n#align continuous_inf_dom_left continuous_inf_dom_left\n\n",
 "continuous_induced_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_induced_rng {g : γ → α} {t₂ : (exprtspace) β} {t₁ : (exprtspace) γ} :\n    (exprcont) t₁ (induced f t₂) g ↔ (exprcont) t₁ t₂ (f ∘ g) := by\n  simp only [continuous_iff_le_induced, induced_compose]\n#align continuous_induced_rng continuous_induced_rng\n\n",
 "continuous_induced_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n@[continuity]\ntheorem continuous_induced_dom {t : (exprtspace) β} : (exprcont) (induced f t) t f :=\n  by\n  rw [continuous_def]\n  intro s h\n  exact ⟨_, h, rfl⟩\n#align continuous_induced_dom continuous_induced_dom\n\n",
 "continuous_iff_le_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_iff_le_induced {t₁ : (exprtspace) α} {t₂ : (exprtspace) β} :\n    (exprcont) t₁ t₂ f ↔ t₁ ≤ induced f t₂ :=\n  iff.trans continuous_iff_coinduced_le (gc_coinduced_induced f _ _)\n#align continuous_iff_le_induced continuous_iff_le_induced\n\n",
 "continuous_iff_coinduced_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_iff_coinduced_le {t₁ : (exprtspace) α} {t₂ : (exprtspace) β} :\n    (exprcont) t₁ t₂ f ↔ coinduced f t₁ ≤ t₂ :=\n  continuous_def.trans iff.rfl\n#align continuous_iff_coinduced_le continuous_iff_coinduced_le\n\n",
 "continuous_id_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_id_of_le {t t' : (exprtspace) α} (h : t ≤ t') : (exprcont) t t' id :=\n  continuous_id_iff_le.2 h\n#align continuous_id_of_le continuous_id_of_le\n\n",
 "continuous_id_iff_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_id_iff_le {t t' : (exprtspace) α} : (exprcont) t t' id ↔ t ≤ t' :=\n  @continuous_def _ _ t t' id\n#align continuous_id_iff_le continuous_id_iff_le\n\n",
 "continuous_generated_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_generated_from {t : (exprtspace) α} {b : set (set β)} (h : ∀ s ∈ b, is_open («expr ⁻¹' » f s)) :\n    (exprcont) t (generate_from b) f :=\n  continuous_iff_coinduced_le.2 <| le_generate_from h\n#align continuous_generated_from continuous_generated_from\n\n",
 "continuous_empty_function":
 "-- constructions using the complete lattice structure\ntheorem continuous_empty_function [topological_space α] [topological_space β] [is_empty β] (f : α → β) : continuous f :=\n  letI := Function.isEmpty f\n  continuous_of_discrete_topology\n#align continuous_empty_function continuous_empty_function\n\n",
 "continuous_coinduced_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_coinduced_rng {t : (exprtspace) α} : (exprcont) t (coinduced f t) f :=\n  by\n  rw [continuous_def]\n  intro s h\n  exact h\n#align continuous_coinduced_rng continuous_coinduced_rng\n\n",
 "continuous_coinduced_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_coinduced_dom {g : β → γ} {t₁ : (exprtspace) α} {t₂ : (exprtspace) γ} :\n    (exprcont) (coinduced f t₁) t₂ g ↔ (exprcont) t₁ t₂ (g ∘ f) := by\n  simp only [continuous_iff_coinduced_le, coinduced_compose]\n#align continuous_coinduced_dom continuous_coinduced_dom\n\n",
 "continuous_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[continuity]\ntheorem continuous_bot {t : (exprtspace) β} : (exprcont) («expr⊥») t f :=\n  continuous_iff_le_induced.2 <| bot_le\n#align continuous_bot continuous_bot\n\n",
 "continuous_Sup_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_Sup_rng {t₁ : (exprtspace) α} {t₂ : set ((exprtspace) β)} {t : (exprtspace) β} (h₁ : t ∈ t₂)\n    (hf : (exprcont) t₁ t f) : (exprcont) t₁ (supₛ t₂) f :=\n  continuous_iff_coinduced_le.2 <| le_supₛ_of_le h₁ <| continuous_iff_coinduced_le.1 hf\n#align continuous_Sup_rng continuous_Sup_rng\n\n",
 "continuous_Sup_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_Sup_dom {T : set ((exprtspace) α)} {t₂ : (exprtspace) β} :\n    (exprcont) (supₛ T) t₂ f ↔ ∀ t ∈ T, (exprcont) t t₂ f := by simp only [continuous_iff_le_induced, supₛ_le_iff]\n#align continuous_Sup_dom continuous_Sup_dom\n\n",
 "continuous_Prop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem continuous_Prop {p : α → Prop} : continuous p ↔ is_open { x | p x } :=\n  ⟨fun h : continuous p =>\n    by\n    have : is_open («expr ⁻¹' » p {true}) := is_open_singleton_true.preimage h\n    simpa [preimage, eq_true_iff] using this, fun h : is_open { x | p x } =>\n    continuous_generated_from fun s (hs : s = {true}) => by simp [hs, preimage, eq_true_iff, h]⟩\n#align continuous_Prop continuous_Prop\n\n",
 "continuous_Inf_rng":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_Inf_rng {t₁ : (exprtspace) α} {T : set ((exprtspace) β)} :\n    (exprcont) t₁ (infₛ T) f ↔ ∀ t ∈ T, (exprcont) t₁ t f := by simp only [continuous_iff_coinduced_le, le_infₛ_iff]\n#align continuous_Inf_rng continuous_Inf_rng\n\n",
 "continuous_Inf_dom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprtspace -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprcont -/\ntheorem continuous_Inf_dom {t₁ : set ((exprtspace) α)} {t₂ : (exprtspace) β} {t : (exprtspace) α} (h₁ : t ∈ t₁) :\n    (exprcont) t t₂ f → (exprcont) (infₛ t₁) t₂ f :=\n  continuous_le_dom <| infₛ_le h₁\n#align continuous_Inf_dom continuous_Inf_dom\n\n",
 "coinduced_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem equiv.coinduced_symm {α β : Type _} (e : «expr ≃ » α β) :\n    topological_space.coinduced e.symm = topological_space.induced e := by rw [← e.symm.induced_symm, e.symm_symm]\n#align equiv.coinduced_symm equiv.coinduced_symm\n\n",
 "coinduced_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n@[simp]\ntheorem coinduced_supr {ι : Sort w} {t : ι → topological_space α} :\n    («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (t i)).coinduced\n        f =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        ((t i).coinduced f) :=\n  (gc_coinduced_induced f).l_supr\n#align coinduced_supr coinduced_supr\n\n",
 "coinduced_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem coinduced_sup : («expr ⊔ » t₁ t₂).coinduced f = «expr ⊔ » (t₁.coinduced f) (t₂.coinduced f) :=\n  (gc_coinduced_induced f).l_sup\n#align coinduced_sup coinduced_sup\n\n",
 "coinduced_mono":
 "theorem coinduced_mono (h : t₁ ≤ t₂) : t₁.coinduced f ≤ t₂.coinduced f :=\n  (gc_coinduced_induced f).monotone_l h\n#align coinduced_mono coinduced_mono\n\n",
 "coinduced_le_iff_le_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem coinduced_le_iff_le_induced {f : α → β} {tα : topological_space α} {tβ : topological_space β} :\n    tα.coinduced f ≤ tβ ↔ tα ≤ tβ.induced f :=\n  iff.intro (fun h s ⟨t, ht, hst⟩ => hst ▸ h _ ht) fun h s hs => show tα.is_open («expr ⁻¹' » f s) from h _ ⟨s, hs, rfl⟩\n#align coinduced_le_iff_le_induced coinduced_le_iff_le_induced\n\n",
 "coinduced_le":
 "theorem continuous.coinduced_le (h : @continuous α β t t' f) : t.coinduced f ≤ t' := fun s hs =>\n  (continuous_def.1 h s hs : _)\n#align continuous.coinduced_le continuous.coinduced_le\n\n",
 "coinduced_id":
 "theorem coinduced_id [t : topological_space α] : t.coinduced id = t :=\n  topological_space_eq rfl\n#align coinduced_id coinduced_id\n\n",
 "coinduced_compose":
 "theorem coinduced_compose [tα : topological_space α] {f : α → β} {g : β → γ} :\n    (tα.coinduced f).coinduced g = tα.coinduced (g ∘ f) :=\n  topological_space_eq rfl\n#align coinduced_compose coinduced_compose\n\n",
 "coinduced_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem coinduced_bot : («expr⊥» : topological_space α).coinduced f = «expr⊥» :=\n  (gc_coinduced_induced f).l_bot\n#align coinduced_bot coinduced_bot\n\n",
 "closure_induced":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem closure_induced [t : topological_space β] {f : α → β} {a : α} {s : set α} :\n    a ∈ @closure α (topological_space.induced f t) s ↔ f a ∈ closure («expr '' » f s) := by\n  simp only [mem_closure_iff_frequently, nhds_induced, frequently_comap, mem_image, and_comm']\n#align closure_induced closure_induced\n\n"}