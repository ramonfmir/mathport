{"uniform_inducing_equiv_bounded_of_compact":
 "/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem uniform_inducing_equiv_bounded_of_compact : UniformInducing (equiv_bounded_of_compact α β) :=\n  UniformInducing.mk'\n    (by\n      simp only [has_basis_compact_convergence_uniformity.mem_iff, uniformity_basis_dist_le.mem_iff]\n      exact fun s =>\n        ⟨fun ⟨⟨a, b⟩, ⟨ha, ⟨ε, hε, hb⟩⟩, hs⟩ =>\n          ⟨{ p | ∀ x, (p.1 x, p.2 x) ∈ b }, ⟨ε, hε, fun _ h x => hb ((dist_le hε.le).mp h x)⟩, fun f g h =>\n            hs fun x hx => h x⟩,\n          fun ⟨t, ⟨ε, hε, ht⟩, hs⟩ =>\n          ⟨⟨Set.univ, { p | dist p.1 p.2 ≤ ε }⟩, ⟨isCompact_univ, ⟨ε, hε, fun _ h => h⟩⟩, fun ⟨f, g⟩ h =>\n            hs _ _ (ht ((dist_le hε.le).mpr fun x => h x (mem_univ x)))⟩⟩)\n#align uniform_inducing_equiv_bounded_of_compact uniform_inducing_equiv_bounded_of_compact\n\n",
 "uniform_embedding_equiv_bounded_of_compact":
 "theorem uniform_embedding_equiv_bounded_of_compact : UniformEmbedding (equiv_bounded_of_compact α β) :=\n  { uniform_inducing_equiv_bounded_of_compact α β with inj := (equiv_bounded_of_compact α β).injective }\n#align uniform_embedding_equiv_bounded_of_compact uniform_embedding_equiv_bounded_of_compact\n\n",
 "uniform_continuity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem uniform_continuity (f : «exprC( , )» α β) (ε : exprℝ) (h : 0 < ε) :\n    ∃ δ > 0, ∀ {x y}, dist x y < δ → dist (f x) (f y) < ε :=\n  Metric.uniformContinuous_iff.mp (CompactSpace.uniformContinuous_of_continuous f.continuous) ε h\n#align uniform_continuity uniform_continuity\n\n",
 "to_linear_comp_left_continuous_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem continuous_linear_map.to_linear_comp_left_continuous_compact (g : «expr →L[ ] » β 𝕜 γ) :\n    (g.comp_left_continuous_compact X : «expr →ₗ[ ] » («exprC( , )» X β) 𝕜 («exprC( , )» X γ)) =\n      g.comp_left_continuous 𝕜 X :=\n  by\n  ext f\n  rfl\n#align continuous_linear_map.to_linear_comp_left_continuous_compact continuous_linear_map.to_linear_comp_left_continuous_compact\n\n",
 "summable_of_locally_summable_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem summable_of_locally_summable_norm {ι : Type _} {F : ι → «exprC( , )» X E}\n    (hF : ∀ K : Compacts X, Summable fun i => «expr‖ ‖» ((F i).restrict K)) : Summable F :=\n  by\n  refine' (ContinuousMap.exists_tendsto_compactOpen_iff_forall _).2 fun K hK => _\n  lift K to compacts X using hK\n  have A :\n    ∀ s : Finset ι,\n      restrict (↑K)\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (F i)) =\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n          (restrict K (F i)) :=\n    by\n    intro s\n    ext1 x\n    simp\n  simpa only [HasSum, A] using summable_of_summable_norm (hF K)\n#align summable_of_locally_summable_norm summable_of_locally_summable_norm\n\n",
 "norm_to_continuous_map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem _root_.bounded_continuous_function.norm_to_continuous_map_eq (f : bounded_continuous_function α E) :\n    «expr‖ ‖» f.to_continuous_map = «expr‖ ‖» f :=\n  rfl\n#align bounded_continuous_function.norm_to_continuous_map_eq bounded_continuous_function.norm_to_continuous_map_eq\n\n",
 "norm_restrict_mono_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_restrict_mono_set {X : Type _} [TopologicalSpace X] (f : «exprC( , )» X E)\n    {K L : TopologicalSpace.Compacts X} (hKL : K ≤ L) : «expr‖ ‖» (f.restrict K) ≤ «expr‖ ‖» (f.restrict L) :=\n  (norm_le _ (norm_nonneg _)).mpr fun x => norm_coe_le_norm (f.restrict L) <| Set.inclusion hKL x\n#align norm_restrict_mono_set norm_restrict_mono_set\n\n",
 "norm_mk_of_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n-- TODO at some point we will need lemmas characterising this norm!\n-- At the moment the only way to reason about it is to transfer `f : C(α,E)` back to `α →ᵇ E`.\n@[simp]\ntheorem _root_.bounded_continuous_function.norm_mk_of_compact (f : «exprC( , )» α E) :\n    «expr‖ ‖» (mk_of_compact f) = «expr‖ ‖» f :=\n  rfl\n#align bounded_continuous_function.norm_mk_of_compact bounded_continuous_function.norm_mk_of_compact\n\n",
 "norm_lt_iff_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_lt_iff_of_nonempty [Nonempty α] {M : exprℝ} : «expr‖ ‖» f < M ↔ ∀ x, «expr‖ ‖» (f x) < M :=\n  @bounded_continuous_function.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _ (mk_of_compact f) _\n#align norm_lt_iff_of_nonempty norm_lt_iff_of_nonempty\n\n",
 "norm_lt_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_lt_iff {M : exprℝ} (M0 : 0 < M) : «expr‖ ‖» f < M ↔ ∀ x, «expr‖ ‖» (f x) < M :=\n  @bounded_continuous_function.norm_lt_iff_of_compact _ _ _ _ _ (mk_of_compact f) _ M0\n#align norm_lt_iff norm_lt_iff\n\n",
 "norm_le_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_le_of_nonempty [Nonempty α] {M : exprℝ} : «expr‖ ‖» f ≤ M ↔ ∀ x, «expr‖ ‖» (f x) ≤ M :=\n  @bounded_continuous_function.norm_le_of_nonempty _ _ _ _ _ (mk_of_compact f) _\n#align norm_le_of_nonempty norm_le_of_nonempty\n\n",
 "norm_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The norm of a function is controlled by the supremum of the pointwise norms -/\ntheorem norm_le {C : exprℝ} (C0 : (0 : exprℝ) ≤ C) : «expr‖ ‖» f ≤ C ↔ ∀ x : α, «expr‖ ‖» (f x) ≤ C :=\n  @bounded_continuous_function.norm_le _ _ _ _ (mk_of_compact f) _ C0\n#align norm_le norm_le\n\n",
 "norm_eq_supr_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_supr_norm :\n    «expr‖ ‖» f =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        («expr‖ ‖» (f x)) :=\n  (mk_of_compact f).norm_eq_supr_norm\n#align norm_eq_supr_norm norm_eq_supr_norm\n\n",
 "norm_coe_le_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n-- The corresponding lemmas for `bounded_continuous_function` are stated with `{f}`,\n-- and so can not be used in dot notation.\ntheorem norm_coe_le_norm (x : α) : «expr‖ ‖» (f x) ≤ «expr‖ ‖» f :=\n  (mk_of_compact f).norm_coe_le_norm x\n#align norm_coe_le_norm norm_coe_le_norm\n\n",
 "nnnorm_lt_iff_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_lt_iff_of_nonempty [Nonempty α] {M : nnreal} : «expr‖ ‖₊» f < M ↔ ∀ x, «expr‖ ‖₊» (f x) < M :=\n  f.norm_lt_iff_of_nonempty\n#align nnnorm_lt_iff_of_nonempty nnnorm_lt_iff_of_nonempty\n\n",
 "nnnorm_lt_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_lt_iff {M : nnreal} (M0 : 0 < M) : «expr‖ ‖₊» f < M ↔ ∀ x : α, «expr‖ ‖₊» (f x) < M :=\n  f.norm_lt_iff M0\n#align nnnorm_lt_iff nnnorm_lt_iff\n\n",
 "neg_norm_le_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem neg_norm_le_apply (f : «exprC( , )» α (exprℝ)) (x : α) : -«expr‖ ‖» f ≤ f x :=\n  le_trans (neg_le_neg (f.norm_coe_le_norm x)) (neg_le.mp (neg_le_abs_self (f x)))\n#align neg_norm_le_apply neg_norm_le_apply\n\n",
 "modulus_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n-- This definition allows us to separate the choice of some `δ`,\n-- and the corresponding use of `dist a b < δ → dist (f a) (f b) < ε`,\n-- even across different declarations.\ntheorem modulus_pos (f : «exprC( , )» α β) {ε : exprℝ} {h : 0 < ε} : 0 < f.modulus ε h :=\n  (Classical.choose_spec (uniform_continuity f ε h)).fst\n#align modulus_pos modulus_pos\n\n",
 "mk_of_compact_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem _root_.bounded_continuous_function.mk_of_compact_star [CompactSpace α] (f : «exprC( , )» α β) :\n    mk_of_compact (star f) = star (mk_of_compact f) :=\n  rfl\n#align bounded_continuous_function.mk_of_compact_star bounded_continuous_function.mk_of_compact_star\n\n",
 "linear_isometry_bounded_of_compact_to_isometry_equiv":
 "@[simp]\ntheorem linear_isometry_bounded_of_compact_to_isometry_equiv :\n    (linear_isometry_bounded_of_compact α E 𝕜).to_isometry_equiv = isometry_equiv_bounded_of_compact α E :=\n  rfl\n#align linear_isometry_bounded_of_compact_to_isometry_equiv linear_isometry_bounded_of_compact_to_isometry_equiv\n\n",
 "linear_isometry_bounded_of_compact_to_add_equiv":
 "@[simp]\ntheorem linear_isometry_bounded_of_compact_to_add_equiv :\n    (linear_isometry_bounded_of_compact α E 𝕜).to_linear_equiv.to_add_equiv = add_equiv_bounded_of_compact α E :=\n  rfl\n#align linear_isometry_bounded_of_compact_to_add_equiv linear_isometry_bounded_of_compact_to_add_equiv\n\n",
 "linear_isometry_bounded_of_compact_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n-- to match bounded_continuous_function.eval_clm\n-- this lemma and the next are the analogues of those autogenerated by `@[simps]` for\n-- `equiv_bounded_of_compact`, `add_equiv_bounded_of_compact`\n@[simp]\ntheorem linear_isometry_bounded_of_compact_symm_apply (f : bounded_continuous_function α E) :\n    (linear_isometry_bounded_of_compact α E 𝕜).symm f = f.to_continuous_map :=\n  rfl\n#align linear_isometry_bounded_of_compact_symm_apply linear_isometry_bounded_of_compact_symm_apply\n\n",
 "linear_isometry_bounded_of_compact_of_compact_to_equiv":
 "@[simp]\ntheorem linear_isometry_bounded_of_compact_of_compact_to_equiv :\n    (linear_isometry_bounded_of_compact α E 𝕜).to_linear_equiv.to_equiv = equiv_bounded_of_compact α E :=\n  rfl\n#align linear_isometry_bounded_of_compact_of_compact_to_equiv linear_isometry_bounded_of_compact_of_compact_to_equiv\n\n",
 "linear_isometry_bounded_of_compact_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem linear_isometry_bounded_of_compact_apply_apply (f : «exprC( , )» α E) (a : α) :\n    (linear_isometry_bounded_of_compact α E 𝕜 f) a = f a :=\n  rfl\n#align linear_isometry_bounded_of_compact_apply_apply linear_isometry_bounded_of_compact_apply_apply\n\n",
 "dist_to_continuous_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem _root_.bounded_continuous_function.dist_to_continuous_map (f g : bounded_continuous_function α β) :\n    dist f.to_continuous_map g.to_continuous_map = dist f g :=\n  rfl\n#align bounded_continuous_function.dist_to_continuous_map bounded_continuous_function.dist_to_continuous_map\n\n",
 "dist_mk_of_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem _root_.bounded_continuous_function.dist_mk_of_compact (f g : «exprC( , )» α β) :\n    dist (mk_of_compact f) (mk_of_compact g) = dist f g :=\n  rfl\n#align bounded_continuous_function.dist_mk_of_compact bounded_continuous_function.dist_mk_of_compact\n\n",
 "dist_lt_of_nonempty":
 "theorem dist_lt_of_nonempty [Nonempty α] (w : ∀ x : α, dist (f x) (g x) < C) : dist f g < C :=\n  dist_lt_iff_of_nonempty.2 w\n#align dist_lt_of_nonempty dist_lt_of_nonempty\n\n",
 "dist_lt_of_dist_lt_modulus":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dist_lt_of_dist_lt_modulus (f : «exprC( , )» α β) (ε : exprℝ) (h : 0 < ε) {a b : α}\n    (w : dist a b < f.modulus ε h) : dist (f a) (f b) < ε :=\n  (Classical.choose_spec (uniform_continuity f ε h)).snd w\n#align dist_lt_of_dist_lt_modulus dist_lt_of_dist_lt_modulus\n\n",
 "dist_lt_iff_of_nonempty":
 "theorem dist_lt_iff_of_nonempty [Nonempty α] : dist f g < C ↔ ∀ x : α, dist (f x) (g x) < C := by\n  simp only [← dist_mk_of_compact, dist_lt_iff_of_nonempty_compact, mk_of_compact_apply]\n#align dist_lt_iff_of_nonempty dist_lt_iff_of_nonempty\n\n",
 "dist_lt_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dist_lt_iff (C0 : (0 : exprℝ) < C) : dist f g < C ↔ ∀ x : α, dist (f x) (g x) < C := by\n  simp only [← dist_mk_of_compact, dist_lt_iff_of_compact C0, mk_of_compact_apply]\n#align dist_lt_iff dist_lt_iff\n\n",
 "dist_le_two_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Distance between the images of any two points is at most twice the norm of the function. -/\ntheorem dist_le_two_norm (x y : α) : dist (f x) (f y) ≤ 2 * «expr‖ ‖» f :=\n  (mk_of_compact f).dist_le_two_norm x y\n#align dist_le_two_norm dist_le_two_norm\n\n",
 "dist_le_iff_of_nonempty":
 "theorem dist_le_iff_of_nonempty [Nonempty α] : dist f g ≤ C ↔ ∀ x, dist (f x) (g x) ≤ C := by\n  simp only [← dist_mk_of_compact, dist_le_iff_of_nonempty, mk_of_compact_apply]\n#align dist_le_iff_of_nonempty dist_le_iff_of_nonempty\n\n",
 "dist_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The distance between two functions is controlled by the supremum of the pointwise distances -/\ntheorem dist_le (C0 : (0 : exprℝ) ≤ C) : dist f g ≤ C ↔ ∀ x : α, dist (f x) (g x) ≤ C := by\n  simp only [← dist_mk_of_compact, dist_le C0, mk_of_compact_apply]\n#align dist_le dist_le\n\n",
 "dist_apply_le_dist":
 "/-- The pointwise distance is controlled by the distance between functions, by definition. -/\ntheorem dist_apply_le_dist (x : α) : dist (f x) (g x) ≤ dist f g := by\n  simp only [← dist_mk_of_compact, dist_coe_le_dist, ← mk_of_compact_apply]\n#align dist_apply_le_dist dist_apply_le_dist\n\n",
 "continuous_eval_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/-- See also `continuous_map.continuous_eval_const` -/\n@[continuity]\ntheorem continuous_eval_const (x : α) : Continuous fun f : «exprC( , )» α β => f x :=\n  continuous_eval.comp (continuous_id.prod_mk continuous_const)\n#align continuous_eval_const continuous_eval_const\n\n",
 "continuous_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/-- See also `continuous_map.continuous_eval'` -/\n@[continuity]\ntheorem continuous_eval : Continuous fun p : «exprC( , )» α β × α => p.1 p.2 :=\n  continuous_eval.comp ((isometry_equiv_bounded_of_compact α β).continuous.prod_map continuous_id)\n#align continuous_eval continuous_eval\n\n",
 "continuous_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/-- See also `continuous_map.continuous_coe'` -/\ntheorem continuous_coe : @Continuous («exprC( , )» α β) (α → β) _ _ coe_fn :=\n  continuous_pi continuous_eval_const\n#align continuous_coe continuous_coe\n\n",
 "comp_right_continuous_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem comp_right_continuous_map_apply {X Y : Type _} (T : Type _) [TopologicalSpace X] [CompactSpace X]\n    [TopologicalSpace Y] [CompactSpace Y] [MetricSpace T] (f : «exprC( , )» X Y) (g : «exprC( , )» Y T) :\n    (comp_right_continuous_map T f) g = g.comp f :=\n  rfl\n#align comp_right_continuous_map_apply comp_right_continuous_map_apply\n\n",
 "comp_right_alg_hom_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem comp_right_alg_hom_continuous {X Y : Type _} (R A : Type _) [TopologicalSpace X] [CompactSpace X]\n    [TopologicalSpace Y] [CompactSpace Y] [CommSemiring R] [Semiring A] [MetricSpace A] [TopologicalSemiring A]\n    [Algebra R A] (f : «exprC( , )» X Y) : Continuous (compRightAlgHom R A f) :=\n  map_continuous (comp_right_continuous_map A f)\n#align comp_right_alg_hom_continuous comp_right_alg_hom_continuous\n\n",
 "comp_left_continuous_compact_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem continuous_linear_map.comp_left_continuous_compact_apply (g : «expr →L[ ] » β 𝕜 γ) (f : «exprC( , )» X β)\n    (x : X) : g.comp_left_continuous_compact X f x = g (f x) :=\n  rfl\n#align continuous_linear_map.comp_left_continuous_compact_apply continuous_linear_map.comp_left_continuous_compact_apply\n\n",
 "apply_le_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem apply_le_norm (f : «exprC( , )» α (exprℝ)) (x : α) : f x ≤ «expr‖ ‖» f :=\n  le_trans (le_abs.mpr (or.inl (le_refl (f x)))) (f.norm_coe_le_norm x)\n#align apply_le_norm apply_le_norm\n\n"}