{"polynomialFunctions_separatesPoints":
 "#print polynomialFunctions_separatesPoints /-\n-- TODO:\n-- if `f : R → R` is an affine equivalence, then pulling back along `f`\n-- induces a normed algebra isomorphism between `polynomial_functions X` and\n-- `polynomial_functions (f ⁻¹' X)`, intertwining the pullback along `f` of `C(R, R)` to itself.\ntheorem polynomialFunctions_separatesPoints (X : Set R) : (polynomialFunctions X).separates_points := fun x y h =>\n  by\n  -- We use `polynomial.X`, then clean up.\n  refine' ⟨_, ⟨⟨_, ⟨⟨Polynomial.X, ⟨Algebra.mem_top, rfl⟩⟩, rfl⟩⟩, _⟩⟩\n  dsimp; simp only [Polynomial.eval_X]\n  exact fun h' => h (Subtype.ext h')\n#align polynomial_functions_separates_points polynomialFunctions_separatesPoints\n-/\n\n",
 "polynomialFunctions_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n#print polynomialFunctions_coe /-\n@[simp]\ntheorem polynomialFunctions_coe (X : Set R) :\n    (polynomialFunctions X : Set («exprC( , )» X R)) = Set.range (Polynomial.toContinuousMapOnAlgHom X) :=\n  by\n  ext\n  simp [polynomialFunctions]\n#align polynomial_functions_coe polynomialFunctions_coe\n-/\n\n",
 "comap_compRightAlgHom_iccHomeoI":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n#print polynomialFunctions.comap_compRightAlgHom_iccHomeoI /-\n/-- The preimage of polynomials on `[0,1]` under the pullback map by `x ↦ (b-a) * x + a`\nis the polynomials on `[a,b]`. -/\ntheorem polynomialFunctions.comap_compRightAlgHom_iccHomeoI (a b : exprℝ) (h : a < b) :\n    (polynomialFunctions (unit_interval)).comap\n        (compRightAlgHom (exprℝ) (exprℝ) (iccHomeoI a b h).symm.to_continuous_map) =\n      polynomialFunctions (Set.Icc a b) :=\n  by\n  ext f\n  fconstructor\n  · rintro ⟨p, ⟨-, w⟩⟩\n    rw [FunLike.ext_iff] at w\n    dsimp at w\n    let q := p.comp («expr • » (b - a)⁻¹ Polynomial.X + Polynomial.C (-a * (b - a)⁻¹))\n    refine' ⟨q, ⟨_, _⟩⟩\n    · simp\n    · ext x\n      simp only [neg_mul, RingHom.map_neg, RingHom.map_mul, AlgHom.coe_toRingHom, Polynomial.eval_X,\n        Polynomial.eval_neg, Polynomial.eval_C, Polynomial.eval_smul, smul_eq_mul, Polynomial.eval_mul,\n        Polynomial.eval_add, Polynomial.coe_aeval_eq_eval, Polynomial.eval_comp,\n        polynomial.to_continuous_map_on_alg_hom_apply, polynomial.to_continuous_map_on_apply,\n        polynomial.to_continuous_map_apply]\n      convert w ⟨_, _⟩ <;> clear w\n      · -- why does `comm_ring.add` appear here!?\n        change x = (iccHomeoI a b h).symm ⟨_ + _, _⟩\n        ext\n        simp only [iccHomeoI_symm_apply_coe, Subtype.coe_mk]\n        replace h : b - a ≠ 0 := sub_ne_zero_of_ne h.ne.symm\n        simp only [mul_add]\n        field_simp\n        ring\n      · change _ + _ ∈ unit_interval\n        rw [mul_comm (b - a)⁻¹, ← neg_mul, ← add_mul, ← sub_eq_add_neg]\n        have w₁ : 0 < (b - a)⁻¹ := inv_pos.mpr (sub_pos.mpr h)\n        have w₂ : 0 ≤ (x : exprℝ) - a := sub_nonneg.mpr x.2.1\n        have w₃ : (x : exprℝ) - a ≤ b - a := sub_le_sub_right x.2.2 a\n        fconstructor\n        · exact mul_nonneg w₂ (le_of_lt w₁)\n        · rw [← div_eq_mul_inv, div_le_one (sub_pos.mpr h)]\n          exact w₃\n  · rintro ⟨p, ⟨-, rfl⟩⟩\n    let q := p.comp («expr • » (b - a) Polynomial.X + Polynomial.C a)\n    refine' ⟨q, ⟨_, _⟩⟩\n    · simp\n    · ext x\n      simp [mul_comm]\n#align polynomial_functions.comap_comp_right_alg_hom_Icc_homeo_I polynomialFunctions.comap_compRightAlgHom_iccHomeoI\n-/\n\n",
 "aeval_continuous_map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- TODO some lemmas about when `to_continuous_map_on` is injective?\n@[simp]\ntheorem aeval_continuous_map_apply (g : polynomial R) (f : «exprC( , )» α R) (x : α) :\n    ((Polynomial.aeval f) g) x = g.eval (f x) :=\n  by\n  apply Polynomial.induction_on' g\n  · intro p q hp hq\n    simp [hp, hq]\n  · intro n a\n    simp [Pi.pow_apply]\n#align aeval_continuous_map_apply aeval_continuous_map_apply\n\n"}