{"zsmul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem zsmul_apply (r : ℤ) (f : bounded_continuous_function α β) (v : α) : («expr • » r f) v = «expr • » r (f v) :=\n  rfl\n#align zsmul_apply zsmul_apply\n\n",
 "upper_bound":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- TODO: When `normed_module` has been added to `normed_space.basic`, the above facts\nshow that the space of bounded continuous functions from `α` to `β` is naturally a normed\nmodule over the algebra of bounded continuous functions from `α` to `𝕜`. -/\ntheorem nnreal.upper_bound {α : Type _} [TopologicalSpace α] (f : bounded_continuous_function α (nnreal)) (x : α) :\n    f x ≤ nndist f 0 :=\n  by\n  have key : nndist (f x) ((0 : bounded_continuous_function α (nnreal)) x) ≤ nndist f 0 :=\n    @dist_coe_le_dist α (nnreal) _ _ f 0 x\n  simp only [coe_zero, Pi.zero_apply] at key\n  rwa [NNReal.nndist_zero_eq_val' (f x)] at key\n#align nnreal.upper_bound nnreal.upper_bound\n\n",
 "uniform_continuous_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- The composition operator (in the target) with a Lipschitz map is uniformly continuous -/\ntheorem uniform_continuous_comp {G : β → γ} {C : nnreal} (H : LipschitzWith C G) :\n    UniformContinuous (comp G H : bounded_continuous_function α β → bounded_continuous_function α γ) :=\n  (lipschitz_comp H).uniform_continuous\n#align uniform_continuous_comp uniform_continuous_comp\n\n",
 "uniform_continuous_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem uniform_continuous_coe : @UniformContinuous (bounded_continuous_function α β) (α → β) _ _ coe_fn :=\n  uniformContinuous_pi.2 fun x => (lipschitz_evalx x).uniform_continuous\n#align uniform_continuous_coe uniform_continuous_coe\n\n",
 "tendsto_iff_tendsto_uniformly":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iff_tendsto_uniformly {ι : Type _} {F : ι → bounded_continuous_function α β}\n    {f : bounded_continuous_function α β} {l : Filter ι} :\n    Tendsto F l ((nhds) f) ↔ TendstoUniformly (fun i => F i) f l :=\n  iff.intro\n    (fun h =>\n      tendstoUniformly_iff.2 fun ε ε0 =>\n        (Metric.tendsto_nhds.mp h ε ε0).mp\n          (eventually_of_forall fun n hn x => lt_of_le_of_lt (dist_coe_le_dist x) (dist_comm (F n) f ▸ hn)))\n    fun h =>\n    Metric.tendsto_nhds.mpr fun ε ε_pos =>\n      (h _ (dist_mem_uniformity <| half_pos ε_pos)).mp\n        (eventually_of_forall fun n hn =>\n          lt_of_le_of_lt ((dist_le (half_pos ε_pos).le).mpr fun x => dist_comm (f x) (F n x) ▸ le_of_lt (hn x))\n            (half_lt_self ε_pos))\n#align tendsto_iff_tendsto_uniformly tendsto_iff_tendsto_uniformly\n\n",
 "sum_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem sum_apply {ι : Type _} (s : Finset ι) (f : ι → bounded_continuous_function α β) (a : α) :\n    (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) a =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i a) :=\n  by simp\n#align sum_apply sum_apply\n\n",
 "sub_apply":
 "theorem sub_apply : (f - g) x = f x - g x :=\n  rfl\n#align sub_apply sub_apply\n\n",
 "star_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem star_apply (f : bounded_continuous_function α β) (x : α) : star f x = star (f x) :=\n  rfl\n#align star_apply star_apply\n\n",
 "smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_apply (c : 𝕜) (f : bounded_continuous_function α β) (x : α) : («expr • » c f) x = «expr • » c (f x) :=\n  rfl\n#align smul_apply smul_apply\n\n",
 "self_eq_nnreal_part_sub_nnreal_part_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-- Decompose a bounded continuous function to its positive and negative parts. -/\ntheorem self_eq_nnreal_part_sub_nnreal_part_neg (f : bounded_continuous_function α (exprℝ)) :\n    «expr⇑ » f = coe ∘ f.nnreal_part - coe ∘ (-f).nnreal_part :=\n  by\n  funext x\n  dsimp\n  simp only [max_zero_sub_max_neg_zero_eq_self]\n#align self_eq_nnreal_part_sub_nnreal_part_neg self_eq_nnreal_part_sub_nnreal_part_neg\n\n",
 "restrict_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem restrict_apply (f : bounded_continuous_function α β) (s : Set α) (x : s) : f.restrict s x = f x :=\n  rfl\n#align restrict_apply restrict_apply\n\n",
 "pow_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem pow_apply (n : ℕ) (f : bounded_continuous_function α R) (v : α) : (f ^ n) v = f v ^ n :=\n  rfl\n#align pow_apply pow_apply\n\n",
 "one_comp_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp, to_additive]\ntheorem one_comp_continuous [TopologicalSpace γ] (f : «exprC( , )» γ α) :\n    (1 : bounded_continuous_function α β).comp_continuous f = 1 :=\n  rfl\n#align one_comp_continuous one_comp_continuous\n\n",
 "nsmul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem nsmul_apply (r : ℕ) (f : bounded_continuous_function α β) (v : α) : («expr • » r f) v = «expr • » r (f v) :=\n  rfl\n#align nsmul_apply nsmul_apply\n\n",
 "norm_smul_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n#print norm_smul_le /-\ntheorem norm_smul_le (f : bounded_continuous_function α 𝕜) (g : bounded_continuous_function α β) :\n    «expr‖ ‖» («expr • » f g) ≤ «expr‖ ‖» f * «expr‖ ‖» g :=\n  norm_of_normed_add_comm_group_le _ (mul_nonneg (norm_nonneg _) (norm_nonneg _)) _\n#align norm_smul_le norm_smul_le\n-/\n\n",
 "norm_of_normed_add_comm_group_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_of_normed_add_comm_group_le {f : α → β} (hfc : Continuous f) {C : exprℝ} (hC : 0 ≤ C)\n    (hfC : ∀ x, «expr‖ ‖» (f x) ≤ C) : «expr‖ ‖» (of_normed_add_comm_group f hfc C hfC) ≤ C :=\n  (norm_le hC).2 hfC\n#align norm_of_normed_add_comm_group_le norm_of_normed_add_comm_group_le\n\n",
 "norm_norm_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem norm_norm_comp : «expr‖ ‖» f.norm_comp = «expr‖ ‖» f := by simp only [norm_eq, coe_norm_comp, norm_norm]\n#align norm_norm_comp norm_norm_comp\n\n",
 "norm_lt_iff_of_nonempty_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_lt_iff_of_nonempty_compact [Nonempty α] [CompactSpace α] {f : bounded_continuous_function α β}\n    {M : exprℝ} : «expr‖ ‖» f < M ↔ ∀ x, «expr‖ ‖» (f x) < M :=\n  by\n  simp_rw [norm_def, ← dist_zero_right]\n  exact dist_lt_iff_of_nonempty_compact\n#align norm_lt_iff_of_nonempty_compact norm_lt_iff_of_nonempty_compact\n\n",
 "norm_lt_iff_of_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_lt_iff_of_compact [CompactSpace α] {f : bounded_continuous_function α β} {M : exprℝ} (M0 : 0 < M) :\n    «expr‖ ‖» f < M ↔ ∀ x, «expr‖ ‖» (f x) < M :=\n  by\n  simp_rw [norm_def, ← dist_zero_right]\n  exact dist_lt_iff_of_compact M0\n#align norm_lt_iff_of_compact norm_lt_iff_of_compact\n\n",
 "norm_le_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_le_of_nonempty [Nonempty α] {f : bounded_continuous_function α β} {M : exprℝ} :\n    «expr‖ ‖» f ≤ M ↔ ∀ x, «expr‖ ‖» (f x) ≤ M :=\n  by\n  simp_rw [norm_def, ← dist_zero_right]\n  exact dist_le_iff_of_nonempty\n#align norm_le_of_nonempty norm_le_of_nonempty\n\n",
 "norm_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The norm of a function is controlled by the supremum of the pointwise norms -/\ntheorem norm_le (C0 : (0 : exprℝ) ≤ C) : «expr‖ ‖» f ≤ C ↔ ∀ x : α, «expr‖ ‖» (f x) ≤ C := by\n  simpa using @dist_le _ _ _ _ f 0 _ C0\n#align norm_le norm_le\n\n",
 "norm_eq_zero_of_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem norm_eq_zero_of_empty [h : IsEmpty α] : «expr‖ ‖» f = 0 :=\n  dist_zero_of_empty\n#align norm_eq_zero_of_empty norm_eq_zero_of_empty\n\n",
 "norm_eq_supr_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_eq_supr_norm :\n    «expr‖ ‖» f =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        («expr‖ ‖» (f x)) :=\n  by simp_rw [norm_def, dist_eq_supr, coe_zero, Pi.zero_apply, dist_zero_right]\n#align norm_eq_supr_norm norm_eq_supr_norm\n\n",
 "norm_eq_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- When the domain is non-empty, we do not need the `0 ≤ C` condition in the formula for ‖f‖ as an\n`Inf`. -/\ntheorem norm_eq_of_nonempty [h : Nonempty α] : «expr‖ ‖» f = infₛ { C : exprℝ | ∀ x : α, «expr‖ ‖» (f x) ≤ C } :=\n  by\n  obtain ⟨a⟩ := h\n  rw [norm_eq]\n  congr\n  ext\n  simp only [and_iff_right_iff_imp]\n  exact fun h' => le_trans (norm_nonneg (f a)) (h' a)\n#align norm_eq_of_nonempty norm_eq_of_nonempty\n\n",
 "norm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- The norm of a bounded continuous function is the supremum of `‖f x‖`.\nWe use `Inf` to ensure that the definition works if `α` has no elements. -/\ntheorem norm_eq (f : bounded_continuous_function α β) :\n    «expr‖ ‖» f = infₛ { C : exprℝ | 0 ≤ C ∧ ∀ x : α, «expr‖ ‖» (f x) ≤ C } := by\n  simp [norm_def, bounded_continuous_function.dist_eq]\n#align norm_eq norm_eq\n\n",
 "norm_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- In this section, if β is a normed group, then we show that the space of bounded\ncontinuous functions from α to β inherits a normed group structure, by using\npointwise operations and checking that they are compatible with the uniform distance. -/\ntheorem norm_def : «expr‖ ‖» f = dist f 0 :=\n  rfl\n#align norm_def norm_def\n\n",
 "norm_const_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Norm of `const α b` is less than or equal to `‖b‖`. If `α` is nonempty,\nthen it is equal to `‖b‖`. -/\ntheorem norm_const_le (b : β) : «expr‖ ‖» (const α b) ≤ «expr‖ ‖» b :=\n  (norm_le (norm_nonneg b)).2 fun x => le_rfl\n#align norm_const_le norm_const_le\n\n",
 "norm_const_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem norm_const_eq [h : Nonempty α] (b : β) : «expr‖ ‖» (const α b) = «expr‖ ‖» b :=\n  le_antisymm (norm_const_le b) <| h.elim fun x => (const α b).norm_coe_le_norm x\n#align norm_const_eq norm_const_eq\n\n",
 "norm_comp_continuous_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_comp_continuous_le [TopologicalSpace γ] (f : bounded_continuous_function α β) (g : «exprC( , )» γ α) :\n    «expr‖ ‖» (f.comp_continuous g) ≤ «expr‖ ‖» f :=\n  ((lipschitz_comp_continuous g).dist_le_mul f 0).trans <| by rw [NNReal.coe_one, one_mul, dist_zero_right]\n#align norm_comp_continuous_le norm_comp_continuous_le\n\n",
 "norm_coe_le_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem norm_coe_le_norm (x : α) : «expr‖ ‖» (f x) ≤ «expr‖ ‖» f :=\n  calc\n    «expr‖ ‖» (f x) = dist (f x) ((0 : bounded_continuous_function α β) x) := by simp [dist_zero_right]\n    _ ≤ «expr‖ ‖» f := dist_coe_le_dist _\n    \n#align norm_coe_le_norm norm_coe_le_norm\n\n",
 "nnreal_part_coe_fun_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem nnreal_part_coe_fun_eq (f : bounded_continuous_function α (exprℝ)) :\n    «expr⇑ » f.nnreal_part = Real.toNNReal ∘ «expr⇑ » f :=\n  rfl\n#align nnreal_part_coe_fun_eq nnreal_part_coe_fun_eq\n\n",
 "nnnorm_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/-- The nnnorm of a function is controlled by the supremum of the pointwise nnnorms -/\ntheorem nnnorm_le (C : nnreal) : «expr‖ ‖₊» f ≤ C ↔ ∀ x : α, «expr‖ ‖₊» (f x) ≤ C :=\n  norm_le C.prop\n#align nnnorm_le nnnorm_le\n\n",
 "nnnorm_eq_supr_nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_eq_supr_nnnorm :\n    «expr‖ ‖₊» f =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        («expr‖ ‖₊» (f x)) :=\n  Subtype.ext <| (norm_eq_supr_norm f).trans <| by simp_rw [NNReal.coe_supᵢ, coe_nnnorm]\n#align nnnorm_eq_supr_nnnorm nnnorm_eq_supr_nnnorm\n\n",
 "nnnorm_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_def : «expr‖ ‖₊» f = nndist f 0 :=\n  rfl\n#align nnnorm_def nnnorm_def\n\n",
 "nnnorm_const_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_const_le (b : β) : «expr‖ ‖₊» (const α b) ≤ «expr‖ ‖₊» b :=\n  norm_const_le _\n#align nnnorm_const_le nnnorm_const_le\n\n",
 "nnnorm_const_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n@[simp]\ntheorem nnnorm_const_eq [h : Nonempty α] (b : β) : «expr‖ ‖₊» (const α b) = «expr‖ ‖₊» b :=\n  Subtype.ext <| norm_const_eq _\n#align nnnorm_const_eq nnnorm_const_eq\n\n",
 "nnnorm_coe_le_nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nnnorm_coe_le_nnnorm (x : α) : «expr‖ ‖₊» (f x) ≤ «expr‖ ‖₊» f :=\n  norm_coe_le_norm _ _\n#align nnnorm_coe_le_nnnorm nnnorm_coe_le_nnnorm\n\n",
 "nnnorm_coe_fun_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem nnnorm_coe_fun_eq (f : bounded_continuous_function α (exprℝ)) :\n    «expr⇑ » f.nnnorm = has_nnnorm.nnnorm ∘ «expr⇑ » f :=\n  rfl\n#align nnnorm_coe_fun_eq nnnorm_coe_fun_eq\n\n",
 "nndist_set_exists":
 "theorem nndist_set_exists : ∃ C, ∀ x : α, nndist (f x) (g x) ≤ C :=\n  Subtype.exists.mpr <| dist_set_exists.imp fun a ⟨ha, h⟩ => ⟨ha, h⟩\n#align nndist_set_exists nndist_set_exists\n\n",
 "nndist_le_two_nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\ntheorem nndist_le_two_nnnorm (x y : α) : nndist (f x) (f y) ≤ 2 * «expr‖ ‖₊» f :=\n  dist_le_two_norm _ _ _\n#align nndist_le_two_nnnorm nndist_le_two_nnnorm\n\n",
 "nndist_eq_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem nndist_eq_supr :\n    nndist f g =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (nndist (f x) (g x)) :=\n  Subtype.ext <| dist_eq_supr.trans <| by simp_rw [NNReal.coe_supᵢ, coe_nndist]\n#align nndist_eq_supr nndist_eq_supr\n\n",
 "nndist_eq":
 "theorem nndist_eq : nndist f g = infₛ { C | ∀ x : α, nndist (f x) (g x) ≤ C } :=\n  Subtype.ext <|\n    dist_eq.trans <| by\n      rw [NNReal.coe_infₛ, NNReal.coe_image]\n      simp_rw [mem_set_of_eq, ← NNReal.coe_le_coe, Subtype.coe_mk, exists_prop, coe_nndist]\n#align nndist_eq nndist_eq\n\n",
 "nndist_coe_le_nndist":
 "theorem nndist_coe_le_nndist (x : α) : nndist (f x) (g x) ≤ nndist f g :=\n  dist_coe_le_dist x\n#align nndist_coe_le_nndist nndist_coe_le_nndist\n\n",
 "neg_apply":
 "theorem neg_apply : (-f) x = -f x :=\n  rfl\n#align neg_apply neg_apply\n\n",
 "mul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem mul_apply (f g : bounded_continuous_function α R) (x : α) : (f * g) x = f x * g x :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "mk_of_compact_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem mk_of_compact_sub [CompactSpace α] (f g : «exprC( , )» α β) :\n    mk_of_compact (f - g) = mk_of_compact f - mk_of_compact g :=\n  rfl\n#align mk_of_compact_sub mk_of_compact_sub\n\n",
 "mk_of_compact_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp, to_additive]\ntheorem mk_of_compact_one [CompactSpace α] : mk_of_compact (1 : «exprC( , )» α β) = 1 :=\n  rfl\n#align mk_of_compact_one mk_of_compact_one\n\n",
 "mk_of_compact_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem mk_of_compact_neg [CompactSpace α] (f : «exprC( , )» α β) : mk_of_compact (-f) = -mk_of_compact f :=\n  rfl\n#align mk_of_compact_neg mk_of_compact_neg\n\n",
 "mk_of_compact_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem mk_of_compact_apply [CompactSpace α] (f : «exprC( , )» α β) (a : α) : mk_of_compact f a = f a :=\n  rfl\n#align mk_of_compact_apply mk_of_compact_apply\n\n",
 "mk_of_compact_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem mk_of_compact_add [CompactSpace α] (f g : «exprC( , )» α β) :\n    mk_of_compact (f + g) = mk_of_compact f + mk_of_compact g :=\n  rfl\n#align mk_of_compact_add mk_of_compact_add\n\n",
 "mk_of_bound_coe":
 "@[simp]\ntheorem mk_of_bound_coe {f} {C} {h} : (mk_of_bound f C h : α → β) = (f : α → β) :=\n  rfl\n#align mk_of_bound_coe mk_of_bound_coe\n\n",
 "lipschitz_evalx":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem lipschitz_evalx (x : α) : LipschitzWith 1 fun f : bounded_continuous_function α β => f x :=\n  LipschitzWith.mk_one fun f g => dist_coe_le_dist x\n#align lipschitz_evalx lipschitz_evalx\n\n",
 "lipschitz_comp_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem lipschitz_comp_continuous {δ : Type _} [TopologicalSpace δ] (g : «exprC( , )» δ α) :\n    LipschitzWith 1 fun f : bounded_continuous_function α β => f.comp_continuous g :=\n  LipschitzWith.mk_one fun f₁ f₂ => (dist_le dist_nonneg).2 fun x => dist_coe_le_dist (g x)\n#align lipschitz_comp_continuous lipschitz_comp_continuous\n\n",
 "lipschitz_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- The composition operator (in the target) with a Lipschitz map is Lipschitz -/\ntheorem lipschitz_comp {G : β → γ} {C : nnreal} (H : LipschitzWith C G) :\n    LipschitzWith C (comp G H : bounded_continuous_function α β → bounded_continuous_function α γ) :=\n  LipschitzWith.of_dist_le_mul fun f g =>\n    (dist_le (mul_nonneg C.2 dist_nonneg)).2 fun x =>\n      calc\n        dist (G (f x)) (G (g x)) ≤ C * dist (f x) (g x) := H.dist_le_mul _ _\n        _ ≤ C * dist f g := mul_le_mul_of_nonneg_left (dist_coe_le_dist _) C.2\n        \n#align lipschitz_comp lipschitz_comp\n\n",
 "isometry_extend":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem isometry_extend (f : «expr ↪ » α δ) (h : bounded_continuous_function δ β) :\n    Isometry fun g : bounded_continuous_function α β => extend f g h :=\n  Isometry.of_dist_eq fun g₁ g₂ => by simp [dist_nonneg]\n#align isometry_extend isometry_extend\n\n",
 "inducing_coe_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵤ » -/\n/-- The topology on `α →ᵇ β` is exactly the topology induced by the natural map to `α →ᵤ β`. -/\ntheorem inducing_coe_fn : Inducing (UniformFun.ofFun ∘ coe_fn : bounded_continuous_function α β → «expr →ᵤ » α β) :=\n  by\n  rw [inducing_iff_nhds]\n  refine' fun f => eq_of_forall_le_iff fun l => _\n  rw [← tendsto_iff_comap, ← tendsto_id', tendsto_iff_tendsto_uniformly, UniformFun.tendsto_iff_tendstoUniformly]\n  rfl\n#align inducing_coe_fn inducing_coe_fn\n\n",
 "forall_coe_one_iff_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[to_additive]\ntheorem forall_coe_one_iff_one (f : bounded_continuous_function α β) : (∀ x, f x = 1) ↔ f = 1 :=\n  (@FunLike.ext_iff _ _ _ _ f 1).symm\n#align forall_coe_one_iff_one forall_coe_one_iff_one\n\n",
 "extend_of_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem extend_of_empty [IsEmpty α] (f : «expr ↪ » α δ) (g : bounded_continuous_function α β)\n    (h : bounded_continuous_function δ β) : extend f g h = h :=\n  FunLike.coe_injective <| Function.extend_of_isEmpty f g h\n#align extend_of_empty extend_of_empty\n\n",
 "extend_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem extend_comp (f : «expr ↪ » α δ) (g : bounded_continuous_function α β) (h : bounded_continuous_function δ β) :\n    extend f g h ∘ f = g :=\n  extend_comp f.injective _ _\n#align extend_comp extend_comp\n\n",
 "extend_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem extend_apply' {f : «expr ↪ » α δ} {x : δ} (hx : x ∉ range f) (g : bounded_continuous_function α β)\n    (h : bounded_continuous_function δ β) : extend f g h x = h x :=\n  extend_apply' _ _ _ hx\n#align extend_apply' extend_apply'\n\n",
 "extend_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem extend_apply (f : «expr ↪ » α δ) (g : bounded_continuous_function α β) (h : bounded_continuous_function δ β)\n    (x : α) : extend f g h (f x) = g x :=\n  f.injective.extend_apply _ _ _\n#align extend_apply extend_apply\n\n",
 "ext":
 "@[ext]\ntheorem ext (h : ∀ x, f x = g x) : f = g :=\n  FunLike.ext _ _ h\n#align ext ext\n\n",
 "eval_clm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem eval_clm_apply (x : α) (f : bounded_continuous_function α β) : eval_clm 𝕜 x f = f x :=\n  rfl\n#align eval_clm_apply eval_clm_apply\n\n",
 "eq_of_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem eq_of_empty [IsEmpty α] (f g : bounded_continuous_function α β) : f = g :=\n  ext <| IsEmpty.elim ‹_›\n#align eq_of_empty eq_of_empty\n\n",
 "embedding_coe_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵤ » -/\n-- TODO: upgrade to a `uniform_embedding`\ntheorem embedding_coe_fn : Embedding (UniformFun.ofFun ∘ coe_fn : bounded_continuous_function α β → «expr →ᵤ » α β) :=\n  ⟨inducing_coe_fn, fun f g h => ext fun x => congr_fun h x⟩\n#align embedding_coe_fn embedding_coe_fn\n\n",
 "dist_zero_of_empty":
 "/-- On an empty space, bounded continuous functions are at distance 0 -/\ntheorem dist_zero_of_empty [IsEmpty α] : dist f g = 0 := by rw [(ext isEmptyElim : f = g), dist_self]\n#align dist_zero_of_empty dist_zero_of_empty\n\n",
 "dist_set_exists":
 "theorem dist_set_exists : ∃ C, 0 ≤ C ∧ ∀ x : α, dist (f x) (g x) ≤ C :=\n  by\n  rcases f.bounded_range.union g.bounded_range with ⟨C, hC⟩\n  refine' ⟨max 0 C, le_max_left _ _, fun x => (hC _ _ _ _).trans (le_max_right _ _)⟩ <;> [left, right] <;>\n    apply mem_range_self\n#align dist_set_exists dist_set_exists\n\n",
 "dist_nonneg'":
 "/- This lemma will be needed in the proof of the metric space instance, but it will become\nuseless afterwards as it will be superseded by the general result that the distance is nonnegative\nin metric spaces. -/\nprivate theorem dist_nonneg' : 0 ≤ dist f g :=\n  le_cinfₛ dist_set_exists fun C => And.left\n#align dist_nonneg' dist_nonneg'\n\n",
 "dist_lt_of_nonempty_compact":
 "theorem dist_lt_of_nonempty_compact [Nonempty α] [CompactSpace α] (w : ∀ x : α, dist (f x) (g x) < C) : dist f g < C :=\n  by\n  have c : Continuous fun x => dist (f x) (g x) := by continuity\n  obtain ⟨x, -, le⟩ := IsCompact.exists_forall_ge isCompact_univ Set.univ_nonempty (Continuous.continuousOn c)\n  exact lt_of_le_of_lt (dist_le_iff_of_nonempty.mpr fun y => le y trivial) (w x)\n#align dist_lt_of_nonempty_compact dist_lt_of_nonempty_compact\n\n",
 "dist_lt_iff_of_nonempty_compact":
 "theorem dist_lt_iff_of_nonempty_compact [Nonempty α] [CompactSpace α] : dist f g < C ↔ ∀ x : α, dist (f x) (g x) < C :=\n  ⟨fun w x => lt_of_le_of_lt (dist_coe_le_dist x) w, dist_lt_of_nonempty_compact⟩\n#align dist_lt_iff_of_nonempty_compact dist_lt_iff_of_nonempty_compact\n\n",
 "dist_lt_iff_of_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem dist_lt_iff_of_compact [CompactSpace α] (C0 : (0 : exprℝ) < C) : dist f g < C ↔ ∀ x : α, dist (f x) (g x) < C :=\n  by\n  fconstructor\n  · intro w x\n    exact lt_of_le_of_lt (dist_coe_le_dist x) w\n  · by_cases h : Nonempty α\n    · skip\n      exact dist_lt_of_nonempty_compact\n    · rintro -\n      convert C0\n      apply le_antisymm _ dist_nonneg'\n      rw [dist_eq]\n      exact cinfₛ_le ⟨0, fun C => And.left⟩ ⟨le_rfl, fun x => false.elim (h (nonempty.intro x))⟩\n#align dist_lt_iff_of_compact dist_lt_iff_of_compact\n\n",
 "dist_le_two_norm'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem dist_le_two_norm' {f : γ → β} {C : exprℝ} (hC : ∀ x, «expr‖ ‖» (f x) ≤ C) (x y : γ) :\n    dist (f x) (f y) ≤ 2 * C :=\n  calc\n    dist (f x) (f y) ≤ «expr‖ ‖» (f x) + «expr‖ ‖» (f y) := dist_le_norm_add_norm _ _\n    _ ≤ C + C := (add_le_add (hC x) (hC y))\n    _ = 2 * C := (two_mul _).symm\n    \n#align dist_le_two_norm' dist_le_two_norm'\n\n",
 "dist_le_two_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- Distance between the images of any two points is at most twice the norm of the function. -/\ntheorem dist_le_two_norm (x y : α) : dist (f x) (f y) ≤ 2 * «expr‖ ‖» f :=\n  dist_le_two_norm' f.norm_coe_le_norm x y\n#align dist_le_two_norm dist_le_two_norm\n\n",
 "dist_le_iff_of_nonempty":
 "theorem dist_le_iff_of_nonempty [Nonempty α] : dist f g ≤ C ↔ ∀ x, dist (f x) (g x) ≤ C :=\n  ⟨fun h x => le_trans (dist_coe_le_dist x) h, fun w => (dist_le (le_trans dist_nonneg (w (Nonempty.some ‹_›)))).mpr w⟩\n#align dist_le_iff_of_nonempty dist_le_iff_of_nonempty\n\n",
 "dist_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The distance between two functions is controlled by the supremum of the pointwise distances -/\ntheorem dist_le (C0 : (0 : exprℝ) ≤ C) : dist f g ≤ C ↔ ∀ x : α, dist (f x) (g x) ≤ C :=\n  ⟨fun h x => le_trans (dist_coe_le_dist x) h, fun H => cinfₛ_le ⟨0, fun C => And.left⟩ ⟨C0, H⟩⟩\n#align dist_le dist_le\n\n",
 "dist_extend_extend":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ↪ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[simp]\ntheorem dist_extend_extend (f : «expr ↪ » α δ) (g₁ g₂ : bounded_continuous_function α β)\n    (h₁ h₂ : bounded_continuous_function δ β) :\n    dist (g₁.extend f h₁) (g₂.extend f h₂) =\n      max (dist g₁ g₂) (dist (h₁.restrict («expr ᶜ» (range f))) (h₂.restrict («expr ᶜ» (range f)))) :=\n  by\n  refine' le_antisymm ((dist_le <| le_max_iff.2 <| or.inl dist_nonneg).2 fun x => _) (max_le _ _)\n  · rcases em (∃ y, f y = x) with (⟨x, rfl⟩ | hx)\n    · simp only [extend_apply]\n      exact (dist_coe_le_dist x).trans (le_max_left _ _)\n    · simp only [extend_apply' hx]\n      lift x to («expr ᶜ» (range f) : Set δ) using hx\n      calc\n        dist (h₁ x) (h₂ x) = dist (h₁.restrict («expr ᶜ» (range f)) x) (h₂.restrict («expr ᶜ» (range f)) x) := rfl\n        _ ≤ dist (h₁.restrict («expr ᶜ» (range f))) (h₂.restrict («expr ᶜ» (range f))) := (dist_coe_le_dist x)\n        _ ≤ _ := le_max_right _ _\n        \n  · refine' (dist_le dist_nonneg).2 fun x => _\n    rw [← extend_apply f g₁ h₁, ← extend_apply f g₂ h₂]\n    exact dist_coe_le_dist _\n  · refine' (dist_le dist_nonneg).2 fun x => _\n    calc\n      dist (h₁ x) (h₂ x) = dist (extend f g₁ h₁ x) (extend f g₂ h₂ x) := by\n        rw [extend_apply' x.coe_prop, extend_apply' x.coe_prop]\n      _ ≤ _ := dist_coe_le_dist _\n      \n#align dist_extend_extend dist_extend_extend\n\n",
 "dist_eq_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\ntheorem dist_eq_supr :\n    dist f g =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (dist (f x) (g x)) :=\n  by\n  cases isEmpty_or_nonempty α; · rw [supᵢ_of_empty', Real.supₛ_empty, dist_zero_of_empty]\n  refine' (dist_le_iff_of_nonempty.mpr <| le_csupᵢ _).antisymm (csupᵢ_le dist_coe_le_dist)\n  exact dist_set_exists.imp fun C hC => forall_range_iff.2 hC.2\n#align dist_eq_supr dist_eq_supr\n\n",
 "dist_eq":
 "theorem dist_eq : dist f g = infₛ { C | 0 ≤ C ∧ ∀ x : α, dist (f x) (g x) ≤ C } :=\n  rfl\n#align dist_eq dist_eq\n\n",
 "dist_coe_le_dist":
 "/-- The pointwise distance is controlled by the distance between functions, by definition. -/\ntheorem dist_coe_le_dist (x : α) : dist (f x) (g x) ≤ dist f g :=\n  le_cinfₛ dist_set_exists fun b hb => hb.2 x\n#align dist_coe_le_dist dist_coe_le_dist\n\n",
 "continuous_eval_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- When `x` is fixed, `(f : α →ᵇ β) ↦ f x` is continuous -/\n@[continuity]\ntheorem continuous_eval_const {x : α} : Continuous fun f : bounded_continuous_function α β => f x :=\n  (continuous_apply x).comp continuous_coe\n#align continuous_eval_const continuous_eval_const\n\n",
 "continuous_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- The evaluation map is continuous, as a joint function of `u` and `x` -/\n@[continuity]\ntheorem continuous_eval : Continuous fun p : bounded_continuous_function α β × α => p.1 p.2 :=\n  (continuous_prod_of_continuous_lipschitz _ 1 fun f => f.continuous) <| lipschitz_evalx\n#align continuous_eval continuous_eval\n\n",
 "continuous_comp_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem continuous_comp_continuous {δ : Type _} [TopologicalSpace δ] (g : «exprC( , )» δ α) :\n    Continuous fun f : bounded_continuous_function α β => f.comp_continuous g :=\n  (lipschitz_comp_continuous g).continuous\n#align continuous_comp_continuous continuous_comp_continuous\n\n",
 "continuous_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- The composition operator (in the target) with a Lipschitz map is continuous -/\ntheorem continuous_comp {G : β → γ} {C : nnreal} (H : LipschitzWith C G) :\n    Continuous (comp G H : bounded_continuous_function α β → bounded_continuous_function α γ) :=\n  (lipschitz_comp H).continuous\n#align continuous_comp continuous_comp\n\n",
 "continuous_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem continuous_coe : Continuous fun (f : bounded_continuous_function α β) x => f x :=\n  UniformContinuous.continuous uniform_continuous_coe\n#align continuous_coe continuous_coe\n\n",
 "const_apply'":
 "theorem const_apply' (a : α) (b : β) : (const α b : α → β) a = b :=\n  rfl\n#align const_apply' const_apply'\n\n",
 "comp_left_continuous_bounded_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →L[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n-- TODO does this work in the `has_bounded_smul` setting, too?\n@[simp]\ntheorem _root_.continuous_linear_map.comp_left_continuous_bounded_apply (g : «expr →L[ ] » β 𝕜 γ)\n    (f : bounded_continuous_function α β) (x : α) : (g.comp_left_continuous_bounded α f) x = g (f x) :=\n  rfl\n#align continuous_linear_map.comp_left_continuous_bounded_apply continuous_linear_map.comp_left_continuous_bounded_apply\n\n",
 "comp_continuous_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem comp_continuous_apply {δ : Type _} [TopologicalSpace δ] (f : bounded_continuous_function α β)\n    (g : «exprC( , )» δ α) (x : δ) : f.comp_continuous g x = f (g x) :=\n  rfl\n#align comp_continuous_apply comp_continuous_apply\n\n",
 "coe_zsmul_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_zsmul_rec : ∀ z, «expr⇑ » (zsmulRec z f) = «expr • » z f\n  | int.of_nat n => by rw [zsmulRec, Int.ofNat_eq_coe, coe_nsmul_rec, coe_nat_zsmul]\n  | -[n+1] => by rw [zsmulRec, negSucc_zsmul, coe_neg, coe_nsmul_rec]\n#align coe_zsmul_rec coe_zsmul_rec\n\n",
 "coe_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_zsmul (r : ℤ) (f : bounded_continuous_function α β) : «expr⇑ » («expr • » r f) = «expr • » r f :=\n  rfl\n#align coe_zsmul coe_zsmul\n\n",
 "coe_to_continuous_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-\nCopyright (c) 2018 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel, Mario Carneiro, Yury Kudryashov, Heather Macbeth\n-/\n@[simp]\ntheorem coe_to_continuous_fun (f : bounded_continuous_function α β) : (f.to_continuous_map : α → β) = f :=\n  rfl\n#align coe_to_continuous_fun coe_to_continuous_fun\n\n",
 "coe_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem coe_sum {ι : Type _} (s : Finset ι) (f : ι → bounded_continuous_function α β) :\n    «expr⇑ » (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i : α → β) :=\n  (@coe_fn_add_hom α β _ _ _ _).map_sum f s\n#align coe_sum coe_sum\n\n",
 "coe_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_sub : «expr⇑ » (f - g) = f - g :=\n  rfl\n#align coe_sub coe_sub\n\n",
 "coe_star":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-- The right-hand side of this equality can be parsed `star ∘ ⇑f` because of the\ninstance `pi.has_star`. Upon inspecting the goal, one sees `⊢ ⇑(star f) = star ⇑f`.-/\n@[simp]\ntheorem coe_star (f : bounded_continuous_function α β) : «expr⇑ » (star f) = star f :=\n  rfl\n#align coe_star coe_star\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_smul (c : 𝕜) (f : bounded_continuous_function α β) :\n    «expr⇑ » («expr • » c f) = fun x => «expr • » c (f x) :=\n  rfl\n#align coe_smul coe_smul\n\n",
 "coe_restrict":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp]\ntheorem coe_restrict (f : bounded_continuous_function α β) (s : Set α) : coe_fn (f.restrict s) = f ∘ coe :=\n  rfl\n#align coe_restrict coe_restrict\n\n",
 "coe_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_pow (n : ℕ) (f : bounded_continuous_function α R) : «expr⇑ » (f ^ n) = f ^ n :=\n  rfl\n#align coe_pow coe_pow\n\n",
 "coe_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp, to_additive]\ntheorem coe_one : ((1 : bounded_continuous_function α β) : α → β) = 1 :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_of_normed_add_comm_group_discrete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem coe_of_normed_add_comm_group_discrete {α : Type u} {β : Type v} [TopologicalSpace α] [DiscreteTopology α]\n    [SeminormedAddCommGroup β] (f : α → β) (C : exprℝ) (H : ∀ x, «expr‖ ‖» (f x) ≤ C) :\n    (of_normed_add_comm_group_discrete f C H : α → β) = f :=\n  rfl\n#align coe_of_normed_add_comm_group_discrete coe_of_normed_add_comm_group_discrete\n\n",
 "coe_of_normed_add_comm_group":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp]\ntheorem coe_of_normed_add_comm_group {α : Type u} {β : Type v} [TopologicalSpace α] [SeminormedAddCommGroup β]\n    (f : α → β) (Hf : Continuous f) (C : exprℝ) (H : ∀ x, «expr‖ ‖» (f x) ≤ C) :\n    (of_normed_add_comm_group f Hf C H : α → β) = f :=\n  rfl\n#align coe_of_normed_add_comm_group coe_of_normed_add_comm_group\n\n",
 "coe_nsmul_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_nsmul_rec : ∀ n, «expr⇑ » (nsmulRec n f) = «expr • » n f\n  | 0 => by rw [nsmulRec, zero_smul, coe_zero]\n  | n + 1 => by rw [nsmulRec, succ_nsmul, coe_add, coe_nsmul_rec]\n#align coe_nsmul_rec coe_nsmul_rec\n\n",
 "coe_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_nsmul (r : ℕ) (f : bounded_continuous_function α β) : «expr⇑ » («expr • » r f) = «expr • » r f :=\n  rfl\n#align coe_nsmul coe_nsmul\n\n",
 "coe_npow_rec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_npow_rec (f : bounded_continuous_function α R) : ∀ n, «expr⇑ » (npowRec n f) = f ^ n\n  | 0 => by rw [npowRec, pow_zero, coe_one]\n  | n + 1 => by rw [npowRec, pow_succ, coe_mul, coe_npow_rec]\n#align coe_npow_rec coe_npow_rec\n\n",
 "coe_norm_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n@[simp]\ntheorem coe_norm_comp : (f.norm_comp : α → exprℝ) = norm ∘ f :=\n  rfl\n#align coe_norm_comp coe_norm_comp\n\n",
 "coe_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_neg : «expr⇑ » (-f) = -f :=\n  rfl\n#align coe_neg coe_neg\n\n",
 "coe_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp, norm_cast]\ntheorem coe_nat_cast (n : ℕ) : ((n : bounded_continuous_function α R) : α → R) = n :=\n  rfl\n#align coe_nat_cast coe_nat_cast\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul (f g : bounded_continuous_function α R) : «expr⇑ » (f * g) = f * g :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "coe_le_coe_add_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem coe_le_coe_add_dist {f g : bounded_continuous_function α (exprℝ)} : f x ≤ g x + dist f g :=\n  sub_le_iff_le_add'.1 <| (abs_le.1 <| @dist_coe_le_dist _ _ _ _ f g x).2\n#align coe_le_coe_add_dist coe_le_coe_add_dist\n\n",
 "coe_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n@[simp, norm_cast]\ntheorem coe_int_cast (n : ℤ) : ((n : bounded_continuous_function α R) : α → R) = n :=\n  rfl\n#align coe_int_cast coe_int_cast\n\n",
 "coe_fn_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem coe_fn_sup (f g : bounded_continuous_function α β) : «expr⇑ » («expr ⊔ » f g) = «expr ⊔ » f g :=\n  rfl\n#align coe_fn_sup coe_fn_sup\n\n",
 "coe_fn_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_abs (f : bounded_continuous_function α β) : «expr⇑ » (|f|) = |f| :=\n  rfl\n#align coe_fn_abs coe_fn_abs\n\n",
 "coe_comp_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- We have to show that `f n` converges to a bounded continuous function.\n  For this, we prove pointwise convergence to define the limit, then check\n  it is a continuous bounded function, and then check the norm convergence. -/\n/- F : α → β,  hF : ∀ (x : α), tendsto (λ (n : ℕ), f n x) at_top (𝓝 (F x))\n  `F` is the desired limit function. Check that it is uniformly approximated by `f N` -/\n-- Check that `F` is continuous, as a uniform limit of continuous functions \n-- Check that `F` is bounded \n-- Check that `F` is close to `f N` in distance terms\n@[simp]\ntheorem coe_comp_continuous {δ : Type _} [TopologicalSpace δ] (f : bounded_continuous_function α β)\n    (g : «exprC( , )» δ α) : coe_fn (f.comp_continuous g) = f ∘ g :=\n  rfl\n#align coe_comp_continuous coe_comp_continuous\n\n",
 "coe_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- In this section, if `β` is an `add_monoid` whose addition operation is Lipschitz, then we show\nthat the space of bounded continuous functions from `α` to `β` inherits a topological `add_monoid`\nstructure, by using pointwise operations and checking that they are compatible with the uniform\ndistance.\n\nImplementation note: The material in this section could have been written for `has_lipschitz_mul`\nand transported by `@[to_additive]`.  We choose not to do this because this causes a few lemma\nnames (for example, `coe_mul`) to conflict with later lemma names for normed rings; this is only a\ntrivial inconvenience, but in any case there are no obvious applications of the multiplicative\nversion. -/\n@[simp]\ntheorem coe_add : «expr⇑ » (f + g) = f + g :=\n  rfl\n#align coe_add coe_add\n\n",
 "bounded_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\ntheorem bounded_range (f : bounded_continuous_function α β) : Bounded (range f) :=\n  bounded_range_iff.2 f.bounded\n#align bounded_range bounded_range\n\n",
 "bounded_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem bounded_image (f : bounded_continuous_function α β) (s : Set α) : Bounded («expr '' » f s) :=\n  f.bounded_range.mono <| image_subset_range _ _\n#align bounded_image bounded_image\n\n",
 "bounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\nprotected theorem bounded (f : bounded_continuous_function α β) : ∃ C, ∀ x y : α, dist (f x) (f y) ≤ C :=\n  f.map_bounded'\n#align bounded bounded\n\n",
 "bdd_above_range_norm_comp":
 "theorem bdd_above_range_norm_comp : BddAbove <| Set.range <| norm ∘ f :=\n  (Real.bounded_iff_bddBelow_bddAbove.mp <| @bounded_range _ _ _ _ f.norm_comp).2\n#align bdd_above_range_norm_comp bdd_above_range_norm_comp\n\n",
 "arzela_ascoli₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- Second version, with pointwise equicontinuity and range in a compact subset -/\ntheorem arzela_ascoli₂ (s : Set β) (hs : IsCompact s) (A : Set (bounded_continuous_function α β)) (closed : IsClosed A)\n    (in_s : ∀ (f : bounded_continuous_function α β) (x : α), f ∈ A → f x ∈ s)\n    (H : Equicontinuous (coe_fn : A → α → β)) : IsCompact A :=\n  by\n  /- This version is deduced from the previous one by restricting to the compact type in the target,\n  using compactness there and then lifting everything to the original space. -/\n  have M : LipschitzWith 1 coe := LipschitzWith.subtype_val s\n  let F : bounded_continuous_function α s → bounded_continuous_function α β := comp coe M\n  refine'\n    isCompact_of_isClosed_subset ((_ : IsCompact («expr ⁻¹' » F A)).image (continuous_comp M)) closed fun f hf => _\n  · haveI : CompactSpace s := isCompact_iff_compactSpace.1 hs\n    refine' arzela_ascoli₁ _ (continuous_iff_isClosed.1 (continuous_comp M) _ closed) _\n    rw [uniform_embedding_subtype_coe.to_uniform_inducing.equicontinuous_iff]\n    exact H.comp (A.restrict_preimage F)\n  · let g := cod_restrict s f fun x => in_s f x hf\n    rw [show f = F g by ext <;> rfl] at hf⊢\n    exact ⟨g, hf, rfl⟩\n#align arzela_ascoli₂ arzela_ascoli₂\n\n",
 "arzela_ascoli₁":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (y z «expr ∈ » U) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- Arzela-Ascoli theorem asserts that, on a compact space, a set of functions sharing\na common modulus of continuity and taking values in a compact set forms a compact\nsubset for the topology of uniform convergence. In this section, we prove this theorem\nand several useful variations around it. -/\n/-- First version, with pointwise equicontinuity and range in a compact space -/\ntheorem arzela_ascoli₁ [CompactSpace β] (A : Set (bounded_continuous_function α β)) (closed : IsClosed A)\n    (H : Equicontinuous (coe_fn : A → α → β)) : IsCompact A :=\n  by\n  simp_rw [Equicontinuous, Metric.equicontinuousAt_iff_pair] at H\n  refine' isCompact_of_totallyBounded_isClosed _ closed\n  refine' totally_bounded_of_finite_discretization fun ε ε0 => _\n  rcases exists_between ε0 with ⟨ε₁, ε₁0, εε₁⟩\n  let ε₂ := ε₁ / 2 / 2\n  /- We have to find a finite discretization of `u`, i.e., finite information\n    that is sufficient to reconstruct `u` up to ε. This information will be\n    provided by the values of `u` on a sufficiently dense set tα,\n    slightly translated to fit in a finite ε₂-dense set tβ in the image. Such\n    sets exist by compactness of the source and range. Then, to check that these\n    data determine the function up to ε, one uses the control on the modulus of\n    continuity to extend the closeness on tα to closeness everywhere. -/\n  have ε₂0 : ε₂ > 0 := half_pos (half_pos ε₁0)\n  have :\n    ∀ x : α,\n      ∃ U,\n        x ∈ U ∧\n          IsOpen U ∧\n            ∀ (y) (_ : y ∈ U) (z) (_ : z ∈ U) {f : bounded_continuous_function α β}, f ∈ A → dist (f y) (f z) < ε₂ :=\n    fun x =>\n    let ⟨U, nhdsU, hU⟩ := H x _ ε₂0\n    let ⟨V, VU, openV, xV⟩ := _root_.mem_nhds_iff.1 nhdsU\n    ⟨V, xV, openV, fun y hy z hz f hf => hU y (VU hy) z (VU hz) ⟨f, hf⟩⟩\n  choose U hU using this\n  /- For all x, the set hU x is an open set containing x on which the elements of A\n    fluctuate by at most ε₂.\n    We extract finitely many of these sets that cover the whole space, by compactness -/\n  rcases is_compact_univ.elim_finite_subcover_image (fun x _ => (hU x).2.1) fun x hx =>\n      mem_bUnion (mem_univ _) (hU x).1 with\n    ⟨tα, _, ⟨_⟩, htα⟩\n  -- tα : set α, htα : univ ⊆ ⋃x ∈ tα, U x\n  rcases@finite_cover_balls_of_compact β _ _ isCompact_univ _ ε₂0 with ⟨tβ, _, ⟨_⟩, htβ⟩\n  skip\n  -- tβ : set β, htβ : univ ⊆ ⋃y ∈ tβ, ball y ε₂ \n  -- Associate to every point `y` in the space a nearby point `F y` in tβ\n  choose F hF using fun y => show ∃ z ∈ tβ, dist y z < ε₂ by simpa using htβ (mem_univ y)\n  -- F : β → β, hF : ∀ (y : β), F y ∈ tβ ∧ dist y (F y) < ε₂ \n  /- Associate to every function a discrete approximation, mapping each point in `tα`\n    to a point in `tβ` close to its true image by the function. -/\n  refine' ⟨tα → tβ, by infer_instance, fun f a => ⟨F (f a), (hF (f a)).1⟩, _⟩\n  rintro ⟨f, hf⟩ ⟨g, hg⟩ f_eq_g\n  -- If two functions have the same approximation, then they are within distance ε\n  refine' lt_of_le_of_lt ((dist_le <| le_of_lt ε₁0).2 fun x => _) εε₁\n  obtain ⟨x', x'tα, hx'⟩ : ∃ x' ∈ tα, x ∈ U x' := mem_Union₂.1 (htα (mem_univ x))\n  calc\n    dist (f x) (g x) ≤ dist (f x) (f x') + dist (g x) (g x') + dist (f x') (g x') := dist_triangle4_right _ _ _ _\n    _ ≤ ε₂ + ε₂ + ε₁ / 2 := (le_of_lt (add_lt_add (add_lt_add _ _) _))\n    _ = ε₁ := by rw [add_halves, add_halves]\n    \n  · exact (hU x').2.2 _ hx' _ (hU x').1 hf\n  · exact (hU x').2.2 _ hx' _ (hU x').1 hg\n  · have F_f_g : F (f x') = F (g x') := (congr_arg (fun f : tα → tβ => (f ⟨x', x'tα⟩ : β)) f_eq_g : _)\n    calc\n      dist (f x') (g x') ≤ dist (f x') (F (f x')) + dist (g x') (F (f x')) := dist_triangle_right _ _ _\n      _ = dist (f x') (F (f x')) + dist (g x') (F (g x')) := by rw [F_f_g]\n      _ < ε₂ + ε₂ := (add_lt_add (hF (f x')).2 (hF (g x')).2)\n      _ = ε₁ / 2 := add_halves _\n      \n#align arzela_ascoli₁ arzela_ascoli₁\n\n",
 "arzela_ascoli":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/-- Third (main) version, with pointwise equicontinuity and range in a compact subset, but\nwithout closedness. The closure is then compact -/\ntheorem arzela_ascoli [T2Space β] (s : Set β) (hs : IsCompact s) (A : Set (bounded_continuous_function α β))\n    (in_s : ∀ (f : bounded_continuous_function α β) (x : α), f ∈ A → f x ∈ s)\n    (H : Equicontinuous (coe_fn : A → α → β)) : IsCompact (closure A) :=\n  /- This version is deduced from the previous one by checking that the closure of A, in\n    addition to being closed, still satisfies the properties of compact range and equicontinuity -/\n    arzela_ascoli₂\n    s hs (closure A) isClosed_closure\n    (fun f x hf =>\n      (mem_of_closed' hs.is_closed).2 fun ε ε0 =>\n        let ⟨g, gA, dist_fg⟩ := Metric.mem_closure_iff.1 hf ε ε0\n        ⟨g x, in_s g x gA, lt_of_le_of_lt (dist_coe_le_dist _) dist_fg⟩)\n    (H.closure' continuous_coe)\n#align arzela_ascoli arzela_ascoli\n\n",
 "algebraMap_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print algebraMap_apply /-\n@[simp]\ntheorem algebraMap_apply (k : 𝕜) (a : α) : algebraMap 𝕜 (bounded_continuous_function α γ) k a = «expr • » k 1 :=\n  by\n  rw [Algebra.algebraMap_eq_smul_one]\n  rfl\n#align algebra_map_apply algebraMap_apply\n-/\n\n",
 "add_comp_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem add_comp_continuous [TopologicalSpace γ] (h : «exprC( , )» γ α) :\n    (g + f).comp_continuous h = g.comp_continuous h + f.comp_continuous h :=\n  rfl\n#align add_comp_continuous add_comp_continuous\n\n",
 "add_apply":
 "theorem add_apply : (f + g) x = f x + g x :=\n  rfl\n#align add_apply add_apply\n\n",
 "abs_self_eq_nnreal_part_add_nnreal_part_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-- Express the absolute value of a bounded continuous function in terms of its\npositive and negative parts. -/\ntheorem abs_self_eq_nnreal_part_add_nnreal_part_neg (f : bounded_continuous_function α (exprℝ)) :\n    abs ∘ «expr⇑ » f = coe ∘ f.nnreal_part + coe ∘ (-f).nnreal_part :=\n  by\n  funext x\n  dsimp\n  simp only [max_zero_add_max_neg_zero_eq_abs_self]\n#align abs_self_eq_nnreal_part_add_nnreal_part_neg abs_self_eq_nnreal_part_add_nnreal_part_neg\n\n",
 "abs_diff_coe_le_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\ntheorem abs_diff_coe_le_dist : «expr‖ ‖» (f x - g x) ≤ dist f g :=\n  by\n  rw [dist_eq_norm]\n  exact (f - g).norm_coe_le_norm x\n#align abs_diff_coe_le_dist abs_diff_coe_le_dist\n\n",
 "Continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `bounded_continuous_function -/\n#print Continuous /-\nprotected theorem Continuous (f : bounded_continuous_function α β) : Continuous f :=\n  f.to_continuous_map.continuous\n#align continuous Continuous\n-/\n\n"}