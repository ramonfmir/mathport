{"spectrum_eq_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprC( , )¬ª -/\ntheorem spectrum_eq_range (f : ¬´exprC( , )¬ª X ùïú) : spectrum ùïú f = Set.range f :=\n  by\n  ext\n  simp only [spectrum.mem_iff, is_unit_iff_forall_ne_zero, not_forall, coe_sub, pi.sub_apply, algebra_map_apply,\n    algebra.id.smul_eq_mul, mul_one, not_not, Set.mem_range, sub_eq_zero, @eq_comm _ x _]\n#align spectrum_eq_range spectrum_eq_range\n\n",
 "is_unit_unit_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprC( , )¬ª -/\n/-\nCopyright (c) 2022 Jireh Loreaux. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jireh Loreaux\n-/\ntheorem _root_.normed_ring.is_unit_unit_continuous {f : ¬´exprC( , )¬ª X R} (h : ‚àÄ x, is_unit (f x)) :\n    continuous fun x => (h x).unit :=\n  by\n  refine'\n    continuous_induced_rng.2\n      (continuous.prod_mk f.continuous (mul_opposite.continuous_op.comp (continuous_iff_continuous_at.mpr fun x => _)))\n  have := normed_ring.inverse_continuous_at (h x).unit\n  simp only [‚Üê Ring.inverse_unit, is_unit.unit_spec, ‚Üê function.comp_apply] at this‚ä¢\n  exact this.comp (f.continuous_at x)\n#align normed_ring.is_unit_unit_continuous normed_ring.is_unit_unit_continuous\n\n",
 "is_unit_iff_forall_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprC( , )¬ª -/\ntheorem is_unit_iff_forall_ne_zero (f : ¬´exprC( , )¬ª X ùïú) : is_unit f ‚Üî ‚àÄ x, f x ‚â† 0 := by\n  simp_rw [f.is_unit_iff_forall_is_unit, isUnit_iff_ne_zero]\n#align is_unit_iff_forall_ne_zero is_unit_iff_forall_ne_zero\n\n",
 "is_unit_iff_forall_is_unit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´exprC( , )¬ª -/\ntheorem is_unit_iff_forall_is_unit (f : ¬´exprC( , )¬ª X R) : is_unit f ‚Üî ‚àÄ x, is_unit (f x) :=\n  iff.intro (fun h => fun x => ‚ü®units_lift.symm h.unit x, rfl‚ü©) fun h =>\n    ‚ü®(units_of_forall_is_unit h).units_lift, by\n      ext\n      rfl‚ü©\n#align is_unit_iff_forall_is_unit is_unit_iff_forall_is_unit\n\n"}