{"polynomial_functions_closure_eq_top'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n/-- The special case of the Weierstrass approximation theorem for the interval `[0,1]`.\nThis is just a matter of unravelling definitions and using the Bernstein approximations.\n-/\ntheorem polynomial_functions_closure_eq_top' : (polynomialFunctions (unit_interval)).topological_closure = «expr⊤» :=\n  by\n  apply eq_top_iff.mpr\n  rintro f -\n  refine' Filter.Frequently.mem_closure _\n  refine' Filter.Tendsto.frequently (bernstein_approximation_uniform f) _\n  apply frequently_of_forall\n  intro n\n  simp only [SetLike.mem_coe]\n  apply Subalgebra.sum_mem\n  rintro n -\n  apply Subalgebra.smul_mem\n  dsimp [bernstein, polynomialFunctions]\n  simp\n#align polynomial_functions_closure_eq_top' polynomial_functions_closure_eq_top'\n\n",
 "polynomial_functions_closure_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `unit_interval -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- The **Weierstrass Approximation Theorem**:\npolynomials functions on `[a, b] ⊆ ℝ` are dense in `C([a,b],ℝ)`\n\n(While we could deduce this as an application of the Stone-Weierstrass theorem,\nour proof of that relies on the fact that `abs` is in the closure of polynomials on `[-M, M]`,\nso we may as well get this done first.)\n-/\ntheorem polynomial_functions_closure_eq_top (a b : exprℝ) :\n    (polynomialFunctions (Set.Icc a b)).topological_closure = «expr⊤» :=\n  by\n  by_cases h : a < b\n  -- (Otherwise it's easy; we'll deal with that later.)\n  · -- We can pullback continuous functions on `[a,b]` to continuous functions on `[0,1]`,\n    -- by precomposing with an affine map.\n    let W : «expr →ₐ[ ] » («exprC( , )» (Set.Icc a b) (exprℝ)) (exprℝ) («exprC( , )» (unit_interval) (exprℝ)) :=\n      comp_right_alg_hom (exprℝ) (exprℝ) (iccHomeoI a b h).symm.to_continuous_map\n    -- This operation is itself a homeomorphism\n    -- (with respect to the norm topologies on continuous functions).\n    let W' : «expr ≃ₜ » («exprC( , )» (Set.Icc a b) (exprℝ)) («exprC( , )» (unit_interval) (exprℝ)) :=\n      comp_right_homeomorph (exprℝ) (iccHomeoI a b h).symm\n    have w : (W : «exprC( , )» (Set.Icc a b) (exprℝ) → «exprC( , )» (unit_interval) (exprℝ)) = W' := rfl\n    -- Thus we take the statement of the Weierstrass approximation theorem for `[0,1]`,\n    have p := polynomial_functions_closure_eq_top'\n    -- and pullback both sides, obtaining an equation between subalgebras of `C([a,b], ℝ)`.\n    apply_fun fun s => s.comap W  at p\n    simp only [Algebra.comap_top] at p\n    -- Since the pullback operation is continuous, it commutes with taking `topological_closure`,\n    rw [Subalgebra.topologicalClosure_comap_homeomorph _ W W' w] at p\n    -- and precomposing with an affine map takes polynomial functions to polynomial functions.\n    rw [polynomialFunctions.comap_compRightAlgHom_iccHomeoI] at p\n    -- 🎉\n    exact p\n  · -- Otherwise, `b ≤ a`, and the interval is a subsingleton,\n    -- so all subalgebras are the same anyway.\n    haveI : subsingleton (Set.Icc a b) :=\n      ⟨fun x y => le_antisymm ((x.2.2.trans (not_lt.mp h)).trans y.2.1) ((y.2.2.trans (not_lt.mp h)).trans x.2.1)⟩\n    apply subsingleton.elim\n#align polynomial_functions_closure_eq_top polynomial_functions_closure_eq_top\n\n",
 "exists_polynomial_near_of_continuous_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Another alternative statement of Weierstrass's theorem,\nfor those who like epsilons, but not bundled continuous functions.\n\nEvery real-valued function `ℝ → ℝ` which is continuous on `[a,b]`\ncan be approximated to within any `ε > 0` on `[a,b]` by some polynomial.\n-/\ntheorem exists_polynomial_near_of_continuous_on (a b : exprℝ) (f : exprℝ → exprℝ) (c : ContinuousOn f (Set.Icc a b))\n    (ε : exprℝ) (pos : 0 < ε) : ∃ p : polynomial (exprℝ), ∀ x ∈ Set.Icc a b, |p.eval x - f x| < ε :=\n  by\n  let f' : «exprC( , )» (Set.Icc a b) (exprℝ) := ⟨fun x => f x, continuous_on_iff_continuous_restrict.mp c⟩\n  obtain ⟨p, b⟩ := exists_polynomial_near_continuous_map a b f' ε pos\n  use p\n  rw [norm_lt_iff _ pos] at b\n  intro x m\n  exact b ⟨x, m⟩\n#align exists_polynomial_near_of_continuous_on exists_polynomial_near_of_continuous_on\n\n",
 "exists_polynomial_near_continuous_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/-- An alternative statement of Weierstrass' theorem,\nfor those who like their epsilons.\n\nEvery real-valued continuous function on `[a,b]` is within any `ε > 0` of some polynomial.\n-/\ntheorem exists_polynomial_near_continuous_map (a b : exprℝ) (f : «exprC( , )» (Set.Icc a b) (exprℝ)) (ε : exprℝ)\n    (pos : 0 < ε) : ∃ p : polynomial (exprℝ), «expr‖ ‖» (p.to_continuous_map_on _ - f) < ε :=\n  by\n  have w := mem_closure_iff_frequently.mp (continuous_map_mem_polynomial_functions_closure _ _ f)\n  rw [metric.nhds_basis_ball.frequently_iff] at w\n  obtain ⟨-, H, ⟨m, ⟨-, rfl⟩⟩⟩ := w ε pos\n  rw [Metric.mem_ball, dist_eq_norm] at H\n  exact ⟨m, H⟩\n#align exists_polynomial_near_continuous_map exists_polynomial_near_continuous_map\n\n",
 "continuous_map_mem_polynomial_functions_closure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- An alternative statement of Weierstrass' theorem.\n\nEvery real-valued continuous function on `[a,b]` is a uniform limit of polynomials.\n-/\ntheorem continuous_map_mem_polynomial_functions_closure (a b : exprℝ) (f : «exprC( , )» (Set.Icc a b) (exprℝ)) :\n    f ∈ (polynomialFunctions (Set.Icc a b)).topological_closure :=\n  by\n  rw [polynomial_functions_closure_eq_top _ _]\n  simp\n#align continuous_map_mem_polynomial_functions_closure continuous_map_mem_polynomial_functions_closure\n\n"}