{"sup_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp, norm_cast]\ntheorem sup_coe [linear_order β] [OrderClosedTopology β] (f g : «exprC( , )» α β) :\n    ((«expr ⊔ » f g : «exprC( , )» α β) : α → β) = («expr ⊔ » f g : α → β) :=\n  rfl\n#align sup_coe sup_coe\n\n",
 "sup_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem sup_apply [linear_order β] [OrderClosedTopology β] (f g : «exprC( , )» α β) (a : α) :\n    («expr ⊔ » f g) a = max (f a) (g a) :=\n  rfl\n#align sup_apply sup_apply\n\n",
 "sup'_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp, norm_cast]\ntheorem sup'_coe {ι : Type _} {s : Finset ι} (H : s.nonempty) (f : ι → «exprC( , )» β γ) :\n    ((s.sup' H f : «exprC( , )» β γ) : ι → β) = s.sup' H fun a => (f a : β → γ) :=\n  by\n  ext\n  simp [sup'_apply]\n#align sup'_coe sup'_coe\n\n",
 "sup'_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n-- TODO transfer this lattice structure to `bounded_continuous_function`\ntheorem sup'_apply {ι : Type _} {s : Finset ι} (H : s.nonempty) (f : ι → «exprC( , )» β γ) (b : β) :\n    s.sup' H f b = s.sup' H fun a => f a b :=\n  Finset.comp_sup'_eq_sup'_comp H (fun f : «exprC( , )» β γ => f b) fun i j => rfl\n#align sup'_apply sup'_apply\n\n",
 "lt_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem lt_def [partial_order β] {f g : «exprC( , )» α β} : f < g ↔ (∀ a, f a ≤ g a) ∧ ∃ a, f a < g a :=\n  Pi.lt_def\n#align lt_def lt_def\n\n",
 "le_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem le_def [partial_order β] {f g : «exprC( , )» α β} : f ≤ g ↔ ∀ a, f a ≤ g a :=\n  Pi.le_def\n#align le_def le_def\n\n",
 "inf_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp, norm_cast]\ntheorem inf_coe [linear_order β] [OrderClosedTopology β] (f g : «exprC( , )» α β) :\n    ((«expr ⊓ » f g : «exprC( , )» α β) : α → β) = («expr ⊓ » f g : α → β) :=\n  rfl\n#align inf_coe inf_coe\n\n",
 "inf_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_apply [linear_order β] [OrderClosedTopology β] (f g : «exprC( , )» α β) (a : α) :\n    («expr ⊓ » f g) a = min (f a) (g a) :=\n  rfl\n#align inf_apply inf_apply\n\n",
 "inf'_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp, norm_cast]\ntheorem inf'_coe {ι : Type _} {s : Finset ι} (H : s.nonempty) (f : ι → «exprC( , )» β γ) :\n    ((s.inf' H f : «exprC( , )» β γ) : ι → β) = s.inf' H fun a => (f a : β → γ) :=\n  @sup'_coe _ («expr ᵒᵈ» γ) _ _ _ _ _ _ H f\n#align inf'_coe inf'_coe\n\n",
 "inf'_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\ntheorem inf'_apply {ι : Type _} {s : Finset ι} (H : s.nonempty) (f : ι → «exprC( , )» β γ) (b : β) :\n    s.inf' H f b = s.inf' H fun a => f a b :=\n  @sup'_apply _ («expr ᵒᵈ» γ) _ _ _ _ _ _ H f b\n#align inf'_apply inf'_apply\n\n",
 "coe_Icc_extend":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n@[simp]\ntheorem coe_Icc_extend (f : «exprC( , )» (Set.Icc a b) β) :\n    ((IccExtend h f : «exprC( , )» α β) : α → β) = Set.IccExtend h f :=\n  rfl\n#align coe_Icc_extend coe_Icc_extend\n\n",
 "abs_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprC( , )» -/\n/-\nCopyright © 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison, Shing Tak Lam\n-/\n-- see Note [lower instance priority]\n@[simp]\ntheorem abs_apply (f : «exprC( , )» α β) (x : α) : (|f|) x = |f x| :=\n  rfl\n#align abs_apply abs_apply\n\n"}