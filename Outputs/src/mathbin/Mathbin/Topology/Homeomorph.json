{"trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem trans_apply (h₁ : «expr ≃ₜ » α β) (h₂ : «expr ≃ₜ » β γ) (a : α) : h₁.trans h₂ a = h₂ (h₁ a) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "to_equiv_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem to_equiv_injective : function.injective (to_equiv : «expr ≃ₜ » α β → «expr ≃ » α β)\n  | ⟨e, h₁, h₂⟩, ⟨e', h₁', h₂'⟩, rfl => rfl\n#align to_equiv_injective to_equiv_injective\n\n",
 "symm_trans_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem symm_trans_self (h : «expr ≃ₜ » α β) : h.symm.trans h = Homeomorph.refl β :=\n  by\n  ext\n  apply apply_symm_apply\n#align symm_trans_self symm_trans_self\n\n",
 "symm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem symm_symm (h : «expr ≃ₜ » α β) : h.symm.symm = h :=\n  ext fun _ => rfl\n#align symm_symm symm_symm\n\n",
 "symm_map_nhds_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem symm_map_nhds_eq (h : «expr ≃ₜ » α β) (x : α) : map h.symm ((nhds) (h x)) = (nhds) x := by\n  rw [h.symm.map_nhds_eq, h.symm_apply_apply]\n#align symm_map_nhds_eq symm_map_nhds_eq\n\n",
 "symm_comp_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem symm_comp_self (h : «expr ≃ₜ » α β) : «expr⇑ » h.symm ∘ «expr⇑ » h = id :=\n  funext h.symm_apply_apply\n#align symm_comp_self symm_comp_self\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem symm_apply_apply (h : «expr ≃ₜ » α β) (x : α) : h.symm (h x) = x :=\n  h.to_equiv.symm_apply_apply x\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\nprotected theorem surjective (h : «expr ≃ₜ » α β) : function.surjective h :=\n  h.to_equiv.surjective\n#align surjective surjective\n\n",
 "self_trans_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem self_trans_symm (h : «expr ≃ₜ » α β) : h.trans h.symm = Homeomorph.refl α :=\n  by\n  ext\n  apply symm_apply_apply\n#align self_trans_symm self_trans_symm\n\n",
 "self_comp_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem self_comp_symm (h : «expr ≃ₜ » α β) : «expr⇑ » h ∘ «expr⇑ » h.symm = id :=\n  funext h.apply_symm_apply\n#align self_comp_symm self_comp_symm\n\n",
 "second_countable_topology":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\nprotected theorem second_countable_topology [TopologicalSpace.SecondCountableTopology β] (h : «expr ≃ₜ » α β) :\n    TopologicalSpace.SecondCountableTopology α :=\n  h.inducing.second_countable_topology\n#align second_countable_topology second_countable_topology\n\n",
 "refl_symm":
 "@[simp]\ntheorem refl_symm : (Homeomorph.refl α).symm = Homeomorph.refl α :=\n  rfl\n#align refl_symm refl_symm\n\n",
 "range_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem range_coe (h : «expr ≃ₜ » α β) : range h = univ :=\n  h.surjective.range_eq\n#align range_coe range_coe\n\n",
 "prod_congr_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem prod_congr_symm (h₁ : «expr ≃ₜ » α β) (h₂ : «expr ≃ₜ » γ δ) :\n    (h₁.prod_congr h₂).symm = h₁.symm.prod_congr h₂.symm :=\n  rfl\n#align prod_congr_symm prod_congr_symm\n\n",
 "prod_comm_symm":
 "@[simp]\ntheorem prod_comm_symm : (prodComm α β).symm = prodComm β α :=\n  rfl\n#align prod_comm_symm prod_comm_symm\n\n",
 "preimage_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem preimage_symm (h : «expr ≃ₜ » α β) : preimage h.symm = image h :=\n  (funext h.to_equiv.image_eq_preimage).symm\n#align preimage_symm preimage_symm\n\n",
 "preimage_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_interior (h : «expr ≃ₜ » α β) (s : Set β) : «expr ⁻¹' » h (interior s) = interior («expr ⁻¹' » h s) :=\n  h.is_open_map.preimage_interior_eq_interior_preimage h.continuous _\n#align preimage_interior preimage_interior\n\n",
 "preimage_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem preimage_image (h : «expr ≃ₜ » α β) (s : Set α) : «expr ⁻¹' » h («expr '' » h s) = s :=\n  h.to_equiv.preimage_image s\n#align preimage_image preimage_image\n\n",
 "preimage_frontier":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_frontier (h : «expr ≃ₜ » α β) (s : Set β) : «expr ⁻¹' » h (frontier s) = frontier («expr ⁻¹' » h s) :=\n  h.is_open_map.preimage_frontier_eq_frontier_preimage h.continuous _\n#align preimage_frontier preimage_frontier\n\n",
 "preimage_closure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_closure (h : «expr ≃ₜ » α β) (s : Set β) : «expr ⁻¹' » h (closure s) = closure («expr ⁻¹' » h s) :=\n  h.is_open_map.preimage_closure_eq_closure_preimage h.continuous _\n#align preimage_closure preimage_closure\n\n",
 "nhds_eq_comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem nhds_eq_comap (h : «expr ≃ₜ » α β) (x : α) : (nhds) x = comap h ((nhds) (h x)) :=\n  h.embedding.to_inducing.nhds_eq_comap x\n#align nhds_eq_comap nhds_eq_comap\n\n",
 "map_nhds_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n@[simp]\ntheorem map_nhds_eq (h : «expr ≃ₜ » α β) (x : α) : map h ((nhds) x) = (nhds) (h x) :=\n  h.embedding.map_nhds_of_mem _ (by simp)\n#align map_nhds_eq map_nhds_eq\n\n",
 "map_cocompact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem map_cocompact (h : «expr ≃ₜ » α β) : map h (cocompact α) = cocompact β := by\n  rw [← h.comap_cocompact, map_comap_of_surjective h.surjective]\n#align map_cocompact map_cocompact\n\n",
 "is_open_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem is_open_preimage (h : «expr ≃ₜ » α β) {s : Set β} : IsOpen («expr ⁻¹' » h s) ↔ IsOpen s :=\n  h.quotient_map.is_open_preimage\n#align is_open_preimage is_open_preimage\n\n",
 "is_open_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem is_open_image (h : «expr ≃ₜ » α β) {s : Set α} : IsOpen («expr '' » h s) ↔ IsOpen s := by\n  rw [← preimage_symm, is_open_preimage]\n#align is_open_image is_open_image\n\n",
 "is_compact_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem is_compact_preimage {s : Set β} (h : «expr ≃ₜ » α β) : IsCompact («expr ⁻¹' » h s) ↔ IsCompact s := by\n  rw [← image_symm] <;> exact h.symm.is_compact_image\n#align is_compact_preimage is_compact_preimage\n\n",
 "is_compact_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem is_compact_image {s : Set α} (h : «expr ≃ₜ » α β) : IsCompact («expr '' » h s) ↔ IsCompact s :=\n  h.embedding.is_compact_iff_is_compact_image.symm\n#align is_compact_image is_compact_image\n\n",
 "is_closed_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem is_closed_preimage (h : «expr ≃ₜ » α β) {s : Set β} : IsClosed («expr ⁻¹' » h s) ↔ IsClosed s := by\n  simp only [← isOpen_compl_iff, ← preimage_compl, is_open_preimage]\n#align is_closed_preimage is_closed_preimage\n\n",
 "is_closed_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem is_closed_image (h : «expr ≃ₜ » α β) {s : Set α} : IsClosed («expr '' » h s) ↔ IsClosed s := by\n  rw [← preimage_symm, is_closed_preimage]\n#align is_closed_image is_closed_image\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\nprotected theorem injective (h : «expr ≃ₜ » α β) : function.injective h :=\n  h.to_equiv.injective\n#align injective injective\n\n",
 "induced_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem induced_eq (h : «expr ≃ₜ » α β) : TopologicalSpace.induced h ‹_› = ‹_› :=\n  h.inducing.1.symm\n#align induced_eq induced_eq\n\n",
 "image_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem image_symm (h : «expr ≃ₜ » α β) : image h.symm = preimage h :=\n  funext h.symm.to_equiv.image_eq_preimage\n#align image_symm image_symm\n\n",
 "image_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem image_preimage (h : «expr ≃ₜ » α β) (s : Set β) : «expr '' » h («expr ⁻¹' » h s) = s :=\n  h.to_equiv.image_preimage s\n#align image_preimage image_preimage\n\n",
 "image_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_interior (h : «expr ≃ₜ » α β) (s : Set α) : «expr '' » h (interior s) = interior («expr '' » h s) := by\n  rw [← preimage_symm, preimage_interior]\n#align image_interior image_interior\n\n",
 "image_frontier":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_frontier (h : «expr ≃ₜ » α β) (s : Set α) : «expr '' » h (frontier s) = frontier («expr '' » h s) := by\n  rw [← preimage_symm, preimage_frontier]\n#align image_frontier image_frontier\n\n",
 "image_closure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem image_closure (h : «expr ≃ₜ » α β) (s : Set α) : «expr '' » h (closure s) = closure («expr '' » h s) := by\n  rw [← preimage_symm, preimage_closure]\n#align image_closure image_closure\n\n",
 "homeomorph_mk_coe_symm":
 "@[simp]\ntheorem homeomorph_mk_coe_symm (a : Equiv α β) (b c) : ((homeomorph.mk a b c).symm : β → α) = a.symm :=\n  rfl\n#align homeomorph_mk_coe_symm homeomorph_mk_coe_symm\n\n",
 "homeomorph_mk_coe":
 "/-\nCopyright (c) 2019 Reid Barton. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Patrick Massot, Sébastien Gouëzel, Zhouhang Zhou, Reid Barton\n-/\n-- not all spaces are homeomorphic to each other\n@[simp]\ntheorem homeomorph_mk_coe (a : Equiv α β) (b c) : (homeomorph.mk a b c : α → β) = a :=\n  rfl\n#align homeomorph_mk_coe homeomorph_mk_coe\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[ext]\ntheorem ext {h h' : «expr ≃ₜ » α β} (H : ∀ x, h x = h' x) : h = h' :=\n  toEquiv_injective <| Equiv.ext H\n#align ext ext\n\n",
 "continuous_symm_of_equiv_compact_to_t2":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\ntheorem continuous_symm_of_equiv_compact_to_t2 [CompactSpace α] [T2Space β] {f : «expr ≃ » α β} (hf : Continuous f) :\n    Continuous f.symm := by\n  rw [continuous_iff_isClosed]\n  intro C hC\n  have hC' : IsClosed («expr '' » f C) := (hC.is_compact.image hf).is_closed\n  rwa [Equiv.image_eq_preimage] at hC'\n#align continuous_symm_of_equiv_compact_to_t2 continuous_symm_of_equiv_compact_to_t2\n\n",
 "continuous_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n-- otherwise `by continuity` can't prove continuity of `h.to_equiv.symm`\n@[continuity]\nprotected theorem continuous_symm (h : «expr ≃ₜ » α β) : Continuous h.symm :=\n  h.continuous_inv_fun\n#align continuous_symm continuous_symm\n\n",
 "comp_is_open_map_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem comp_is_open_map_iff' (h : «expr ≃ₜ » α β) {f : β → γ} : IsOpenMap (f ∘ h) ↔ IsOpenMap f :=\n  by\n  refine' ⟨_, fun hf => hf.comp h.is_open_map⟩\n  intro hf\n  rw [← function.comp.right_id f, ← h.self_comp_symm, ← function.comp.assoc]\n  exact hf.comp h.symm.is_open_map\n#align comp_is_open_map_iff' comp_is_open_map_iff'\n\n",
 "comp_is_open_map_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem comp_is_open_map_iff (h : «expr ≃ₜ » α β) {f : γ → α} : IsOpenMap (h ∘ f) ↔ IsOpenMap f :=\n  by\n  refine' ⟨_, fun hf => h.is_open_map.comp hf⟩\n  intro hf\n  rw [← function.comp.left_id f, ← h.symm_comp_self, function.comp.assoc]\n  exact h.symm.is_open_map.comp hf\n#align comp_is_open_map_iff comp_is_open_map_iff\n\n",
 "comp_homeomorph":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print HasCompactMulSupport.comp_homeomorph /-\n@[to_additive]\ntheorem HasCompactMulSupport.comp_homeomorph {M} [One M] {f : β → M} (hf : HasCompactMulSupport f)\n    (φ : «expr ≃ₜ » α β) : HasCompactMulSupport (f ∘ φ) :=\n  hf.comp_closed_embedding φ.closed_embedding\n#align has_compact_mul_support.comp_homeomorph HasCompactMulSupport.comp_homeomorph\n#align has_compact_support.comp_homeomorph HasCompactSupport.comp_homeomorph\n-/\n\n",
 "comp_continuous_within_at_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem comp_continuous_within_at_iff (h : «expr ≃ₜ » α β) (f : γ → α) (s : Set γ) (x : γ) :\n    ContinuousWithinAt f s x ↔ ContinuousWithinAt (h ∘ f) s x :=\n  h.inducing.continuous_within_at_iff\n#align comp_continuous_within_at_iff comp_continuous_within_at_iff\n\n",
 "comp_continuous_on_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem comp_continuous_on_iff (h : «expr ≃ₜ » α β) (f : γ → α) (s : Set γ) :\n    ContinuousOn (h ∘ f) s ↔ ContinuousOn f s :=\n  h.inducing.continuous_on_iff.symm\n#align comp_continuous_on_iff comp_continuous_on_iff\n\n",
 "comp_continuous_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem comp_continuous_iff' (h : «expr ≃ₜ » α β) {f : β → γ} : Continuous (f ∘ h) ↔ Continuous f :=\n  h.quotient_map.continuous_iff.symm\n#align comp_continuous_iff' comp_continuous_iff'\n\n",
 "comp_continuous_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem comp_continuous_iff (h : «expr ≃ₜ » α β) {f : γ → α} : Continuous (h ∘ f) ↔ Continuous f :=\n  h.inducing.continuous_iff.symm\n#align comp_continuous_iff comp_continuous_iff\n\n",
 "comp_continuous_at_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem comp_continuous_at_iff' (h : «expr ≃ₜ » α β) (f : β → γ) (x : α) :\n    ContinuousAt (f ∘ h) x ↔ ContinuousAt f (h x) :=\n  h.inducing.continuous_at_iff' (by simp)\n#align comp_continuous_at_iff' comp_continuous_at_iff'\n\n",
 "comp_continuous_at_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem comp_continuous_at_iff (h : «expr ≃ₜ » α β) (f : γ → α) (x : γ) : ContinuousAt (h ∘ f) x ↔ ContinuousAt f x :=\n  h.inducing.continuous_at_iff.symm\n#align comp_continuous_at_iff comp_continuous_at_iff\n\n",
 "comap_nhds_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n@[simp]\ntheorem comap_nhds_eq (h : «expr ≃ₜ » α β) (y : β) : comap h ((nhds) y) = (nhds) (h.symm y) := by\n  rw [h.nhds_eq_comap, h.apply_symm_apply]\n#align comap_nhds_eq comap_nhds_eq\n\n",
 "comap_cocompact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem comap_cocompact (h : «expr ≃ₜ » α β) : comap h (cocompact β) = cocompact α :=\n  (comap_cocompact_le h.continuous).antisymm <|\n    (hasBasis_cocompact.le_basis_iff (hasBasis_cocompact.comap h)).2 fun K hK =>\n      ⟨«expr ⁻¹' » h K, h.is_compact_preimage.2 hK, Subset.rfl⟩\n#align comap_cocompact comap_cocompact\n\n",
 "coinduced_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem coinduced_eq (h : «expr ≃ₜ » α β) : TopologicalSpace.coinduced h ‹_› = ‹_› :=\n  h.quotient_map.2.symm\n#align coinduced_eq coinduced_eq\n\n",
 "coe_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_equiv (h : «expr ≃ₜ » α β) : «expr⇑ » h.to_equiv = h :=\n  rfl\n#align coe_to_equiv coe_to_equiv\n\n",
 "coe_symm_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_symm_to_equiv (h : «expr ≃ₜ » α β) : «expr⇑ » h.to_equiv.symm = h.symm :=\n  rfl\n#align coe_symm_to_equiv coe_symm_to_equiv\n\n",
 "coe_punit_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_punit_prod : «expr⇑ » (punitProd α) = Prod.snd :=\n  rfl\n#align coe_punit_prod coe_punit_prod\n\n",
 "coe_prod_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_prod_congr (h₁ : «expr ≃ₜ » α β) (h₂ : «expr ≃ₜ » γ δ) : «expr⇑ » (h₁.prod_congr h₂) = prod.map h₁ h₂ :=\n  rfl\n#align coe_prod_congr coe_prod_congr\n\n",
 "coe_prod_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_prod_comm : «expr⇑ » (prodComm α β) = Prod.swap :=\n  rfl\n#align coe_prod_comm coe_prod_comm\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\nprotected theorem bijective (h : «expr ≃ₜ » α β) : function.bijective h :=\n  h.to_equiv.bijective\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem apply_symm_apply (h : «expr ≃ₜ » α β) (x : β) : h (h.symm x) = x :=\n  h.to_equiv.apply_symm_apply x\n#align apply_symm_apply apply_symm_apply\n\n",
 "T3Space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print T3Space /-\nprotected theorem T3Space [T3Space α] (h : «expr ≃ₜ » α β) : T3Space β :=\n  h.symm.embedding.t3_space\n#align t3_space T3Space\n-/\n\n",
 "T2Space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print T2Space /-\nprotected theorem T2Space [T2Space α] (h : «expr ≃ₜ » α β) : T2Space β :=\n  h.symm.embedding.t2_space\n#align t2_space T2Space\n-/\n\n",
 "T1Space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print T1Space /-\nprotected theorem T1Space [T1Space α] (h : «expr ≃ₜ » α β) : T1Space β :=\n  h.symm.embedding.t1_space\n#align t1_space T1Space\n-/\n\n",
 "T0Space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print T0Space /-\nprotected theorem T0Space [T0Space α] (h : «expr ≃ₜ » α β) : T0Space β :=\n  h.symm.embedding.t0_space\n#align t0_space T0Space\n-/\n\n",
 "QuotientMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print QuotientMap /-\nprotected theorem QuotientMap (h : «expr ≃ₜ » α β) : QuotientMap h :=\n  QuotientMap.of_quotientMap_compose h.symm.continuous h.continuous <| by simp only [self_comp_symm, QuotientMap.id]\n#align quotient_map QuotientMap\n-/\n\n",
 "Pi_congr_right_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n@[simp]\ntheorem Pi_congr_right_symm {ι : Type _} {β₁ β₂ : ι → Type _} [∀ i, TopologicalSpace (β₁ i)]\n    [∀ i, TopologicalSpace (β₂ i)] (F : ∀ i, «expr ≃ₜ » (β₁ i) (β₂ i)) :\n    (piCongrRight F).symm = piCongrRight fun i => (F i).symm :=\n  rfl\n#align Pi_congr_right_symm Pi_congr_right_symm\n\n",
 "OpenEmbedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print OpenEmbedding /-\nprotected theorem OpenEmbedding (h : «expr ≃ₜ » α β) : OpenEmbedding h :=\n  openEmbedding_of_embedding_open h.embedding h.is_open_map\n#align open_embedding OpenEmbedding\n-/\n\n",
 "NormalSpace":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print NormalSpace /-\nprotected theorem NormalSpace [NormalSpace α] (h : «expr ≃ₜ » α β) : NormalSpace β :=\n  h.symm.closed_embedding.normal_space\n#align normal_space NormalSpace\n-/\n\n",
 "IsOpenMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print IsOpenMap /-\nprotected theorem IsOpenMap (h : «expr ≃ₜ » α β) : IsOpenMap h := fun s => h.is_open_image.2\n#align is_open_map IsOpenMap\n-/\n\n",
 "IsClosedMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print IsClosedMap /-\nprotected theorem IsClosedMap (h : «expr ≃ₜ » α β) : IsClosedMap h := fun s => h.is_closed_image.2\n#align is_closed_map IsClosedMap\n-/\n\n",
 "Inducing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print Inducing /-\nprotected theorem Inducing (h : «expr ≃ₜ » α β) : Inducing h :=\n  inducing_of_inducing_compose h.continuous h.symm.continuous <| by simp only [symm_comp_self, inducing_id]\n#align inducing Inducing\n-/\n\n",
 "Embedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print Embedding /-\nprotected theorem Embedding (h : «expr ≃ₜ » α β) : Embedding h :=\n  ⟨h.inducing, h.injective⟩\n#align embedding Embedding\n-/\n\n",
 "DenseEmbedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print DenseEmbedding /-\nprotected theorem DenseEmbedding (h : «expr ≃ₜ » α β) : DenseEmbedding h :=\n  { h.embedding with dense := h.surjective.dense_range }\n#align dense_embedding DenseEmbedding\n-/\n\n",
 "Continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print Continuous /-\n@[continuity]\nprotected theorem Continuous (h : «expr ≃ₜ » α β) : Continuous h :=\n  h.continuous_to_fun\n#align continuous Continuous\n-/\n\n",
 "CompactSpace":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print CompactSpace /-\nprotected theorem CompactSpace [CompactSpace α] (h : «expr ≃ₜ » α β) : CompactSpace β :=\n  {\n    is_compact_univ := by\n      rw [← image_univ_of_surjective h.surjective, h.is_compact_image]\n      apply compact_space.is_compact_univ }\n#align compact_space CompactSpace\n-/\n\n",
 "ClosedEmbedding":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\n#print ClosedEmbedding /-\nprotected theorem ClosedEmbedding (h : «expr ≃ₜ » α β) : ClosedEmbedding h :=\n  closedEmbedding_of_embedding_closed h.embedding h.is_closed_map\n#align closed_embedding ClosedEmbedding\n-/\n\n"}