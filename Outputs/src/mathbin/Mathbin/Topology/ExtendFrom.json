{"tendsto_extendFrom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_extendFrom /-\n/-\nCopyright (c) 2020 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Anatole Dedecker\n-/\n/-- If `f` converges to some `y` as `x` tends to `x₀` within `A`,\nthen `f` tends to `extend_from A f x` as `x` tends to `x₀`. -/\ntheorem tendsto_extendFrom {A : Set X} {f : X → Y} {x : X} (h : ∃ y, Tendsto f (nhds_within A x) ((nhds) y)) :\n    Tendsto f (nhds_within A x) (nhds <| extendFrom A f x) :=\n  tendsto_nhds_limUnder h\n#align tendsto_extend_from tendsto_extendFrom\n-/\n\n",
 "extendFrom_extends":
 "#print extendFrom_extends /-\ntheorem extendFrom_extends [T2Space Y] {f : X → Y} {A : Set X} (hf : ContinuousOn f A) :\n    ∀ x ∈ A, extendFrom A f x = f x := fun x x_in => extendFrom_eq (subset_closure x_in) (hf x x_in)\n#align extend_from_extends extendFrom_extends\n-/\n\n",
 "extendFrom_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print extendFrom_eq /-\ntheorem extendFrom_eq [T2Space Y] {A : Set X} {f : X → Y} {x : X} {y : Y} (hx : x ∈ closure A)\n    (hf : Tendsto f (nhds_within A x) ((nhds) y)) : extendFrom A f x = y :=\n  haveI := mem_closure_iff_nhds_within_ne_bot.mp hx\n  tendsto_nhds_unique (tendsto_nhds_limUnder ⟨y, hf⟩) hf\n#align extend_from_eq extendFrom_eq\n-/\n\n",
 "continuous_extendFrom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print continuous_extendFrom /-\n/-- If a function `f` to a T₃ space `Y` has a limit within a\ndense set `A` for any `x`, then `extend_from A f` is continuous. -/\ntheorem continuous_extendFrom [RegularSpace Y] {f : X → Y} {A : Set X} (hA : Dense A)\n    (hf : ∀ x, ∃ y, Tendsto f (nhds_within A x) ((nhds) y)) : Continuous (extendFrom A f) :=\n  by\n  rw [continuous_iff_continuousOn_univ]\n  exact continuousOn_extendFrom (fun x _ => hA x) (by simpa using hf)\n#align continuous_extend_from continuous_extendFrom\n-/\n\n",
 "continuousOn_extendFrom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print continuousOn_extendFrom /-\n/-- If `f` is a function to a T₃ space `Y` which has a limit within `A` at any\npoint of a set `B ⊆ closure A`, then `extend_from A f` is continuous on `B`. -/\ntheorem continuousOn_extendFrom [RegularSpace Y] {f : X → Y} {A B : Set X} (hB : B ⊆ closure A)\n    (hf : ∀ x ∈ B, ∃ y, Tendsto f (nhds_within A x) ((nhds) y)) : ContinuousOn (extendFrom A f) B :=\n  by\n  set φ := extendFrom A f\n  intro x x_in\n  suffices ∀ V' ∈ (nhds) (φ x), IsClosed V' → «expr ⁻¹' » φ V' ∈ nhds_within B x by\n    simpa [ContinuousWithinAt, (closed_nhds_basis _).tendsto_right_iff]\n  intro V' V'_in V'_closed\n  obtain ⟨V, V_in, V_op, hV⟩ : ∃ V ∈ (nhds) x, IsOpen V ∧ V ∩ A ⊆ «expr ⁻¹' » f V' :=\n    by\n    have := tendsto_extendFrom (hf x x_in)\n    rcases(nhdsWithin_basis_open x A).tendsto_left_iff.mp this V' V'_in with ⟨V, ⟨hxV, V_op⟩, hV⟩\n    use V, IsOpen.mem_nhds V_op hxV, V_op, hV\n  suffices : ∀ y ∈ V ∩ B, φ y ∈ V'\n  exact mem_of_superset (inter_mem_inf V_in <| mem_principal_self B) this\n  rintro y ⟨hyV, hyB⟩\n  haveI := mem_closure_iff_nhds_within_ne_bot.mp (hB hyB)\n  have limy : tendsto f (nhds_within A y) (nhds <| φ y) := tendsto_extendFrom (hf y hyB)\n  have hVy : V ∈ (nhds) y := IsOpen.mem_nhds V_op hyV\n  have : V ∩ A ∈ nhds_within A y := by simpa [inter_comm] using inter_mem_nhdsWithin _ hVy\n  exact V'_closed.mem_of_tendsto limy (mem_of_superset this hV)\n#align continuous_on_extend_from continuousOn_extendFrom\n-/\n\n"}