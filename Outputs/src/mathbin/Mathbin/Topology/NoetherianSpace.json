{"range":
 "theorem noetherian_space.range [NoetherianSpace α] (f : α → β) (hf : Continuous f) : NoetherianSpace (Set.range f) :=\n  noetherianSpace_of_surjective (Set.codRestrict f _ Set.mem_range_self) (by continuity) fun ⟨a, b, h⟩ =>\n    ⟨b, Subtype.ext h⟩\n#align noetherian_space.range noetherian_space.range\n\n",
 "noetherian_univ_iff":
 "@[simp]\ntheorem noetherian_univ_iff : NoetherianSpace (Set.univ : Set α) ↔ NoetherianSpace α :=\n  noetherianSpace_iff_of_homeomorph (Homeomorph.Set.univ α)\n#align noetherian_univ_iff noetherian_univ_iff\n\n",
 "noetherian_space_tfae":
 "theorem noetherian_space_tfae :\n    TFAE\n      [NoetherianSpace α, well_founded fun s t : Closeds α => s < t, ∀ s : Set α, IsCompact s,\n        ∀ s : Opens α, IsCompact (s : Set α)] :=\n  by\n  tfae_have 1 ↔ 2\n  · refine' (noetherian_space_iff _).trans (Surjective.wellFounded_iff opens.compl_bijective.2 _)\n    exact fun s t => (OrderIso.compl (Set α)).lt_iff_lt.symm\n  tfae_have 1 ↔ 4\n  · exact noetherian_space_iff_opens α\n  tfae_have 1 → 3\n  · exact @noetherian_space.is_compact _ _\n  tfae_have 3 → 4\n  · exact fun H s => H s\n  tfae_finish\n#align noetherian_space_tfae noetherian_space_tfae\n\n",
 "noetherian_space_set_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t «expr ⊆ » s) -/\ntheorem noetherian_space_set_iff (s : Set α) : NoetherianSpace s ↔ ∀ (t) (_ : t ⊆ s), IsCompact t :=\n  by\n  rw [(noetherian_space_tfae s).out 0 2]\n  constructor\n  · intro H t ht\n    have := embedding_subtype_coe.is_compact_iff_is_compact_image.mp (H («expr ⁻¹' » coe t))\n    simpa [set.inter_eq_left_iff_subset.mpr ht] using this\n  · intro H t\n    refine' embedding_subtype_coe.is_compact_iff_is_compact_image.mpr (H («expr '' » coe t) _)\n    simp\n#align noetherian_space_set_iff noetherian_space_set_iff\n\n",
 "noetherian_space_of_surjective":
 "theorem noetherian_space_of_surjective [NoetherianSpace α] (f : α → β) (hf : Continuous f)\n    (hf' : function.surjective f) : NoetherianSpace β :=\n  by\n  rw [noetherian_space_iff_opens]\n  intro s\n  obtain ⟨t, e⟩ := set.image_surjective.mpr hf' s\n  exact e ▸ (noetherian_space.is_compact t).image hf\n#align noetherian_space_of_surjective noetherian_space_of_surjective\n\n",
 "noetherian_space_iff_opens":
 "/-\nCopyright (c) 2022 Andrew Yang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Andrew Yang\n-/\ntheorem noetherian_space_iff_opens : NoetherianSpace α ↔ ∀ s : Opens α, IsCompact (s : Set α) :=\n  by\n  rw [noetherian_space_iff, CompleteLattice.wellFounded_iff_isSupFiniteCompact,\n    CompleteLattice.isSupFiniteCompact_iff_all_elements_compact]\n  exact forall_congr' opens.is_compact_element_iff\n#align noetherian_space_iff_opens noetherian_space_iff_opens\n\n",
 "noetherian_space_iff_of_homeomorph":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₜ » -/\ntheorem noetherian_space_iff_of_homeomorph (f : «expr ≃ₜ » α β) : NoetherianSpace α ↔ NoetherianSpace β :=\n  ⟨fun h => @noetherianSpace_of_surjective _ _ h f f.continuous f.surjective, fun h =>\n    @noetherianSpace_of_surjective _ _ h f.symm f.symm.continuous f.symm.surjective⟩\n#align noetherian_space_iff_of_homeomorph noetherian_space_iff_of_homeomorph\n\n",
 "noetherian_space":
 "protected theorem inducing.noetherian_space [NoetherianSpace α] {i : β → α} (hi : Inducing i) : NoetherianSpace β :=\n  (noetherianSpace_iff_opens _).2 fun s => hi.is_compact_iff.1 (NoetherianSpace.isCompact _)\n#align inducing.noetherian_space inducing.noetherian_space\n\n",
 "is_compact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\nprotected theorem noetherian_space.is_compact [NoetherianSpace α] (s : Set α) : IsCompact s :=\n  by\n  refine' isCompact_iff_finite_subcover.2 fun ι U hUo hs => _\n  rcases((noetherian_space_iff_opens α).mp ‹_›\n          ⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (U i),\n            isOpen_unionᵢ hUo⟩).elim_finite_subcover\n      U hUo Set.Subset.rfl with\n    ⟨t, ht⟩\n  exact ⟨t, hs.trans ht⟩\n#align noetherian_space.is_compact noetherian_space.is_compact\n\n",
 "finite_irreducible_components":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem noetherian_space.finite_irreducible_components [NoetherianSpace α] : (irreducibleComponents α).finite := by\n  classical\n    obtain ⟨S, hS₁, hS₂⟩ := noetherian_space.exists_finset_irreducible («expr⊤» : closeds α)\n    suffices irreducibleComponents α ⊆ «expr '' » coe (S : Set <| closeds α) by\n      exact Set.Finite.subset ((set.finite.intro inferInstance).image _) this\n    intro K hK\n    obtain ⟨z, hz, hz'⟩ : ∃ (z : Set α)(H : z ∈ Finset.image coe S), K ⊆ z :=\n      by\n      convert is_irreducible_iff_sUnion_closed.mp hK.1 (S.image coe) _ _\n      · simp only [Finset.mem_image, exists_prop, forall_exists_index, and_imp]\n        rintro _ z hz rfl\n        exact z.2\n      · exact (Set.subset_univ _).trans ((congr_arg coe hS₂).trans <| by simp).subset\n    obtain ⟨s, hs, e⟩ := finset.mem_image.mp hz\n    rw [← e] at hz'\n    refine' ⟨s, hs, _⟩\n    symm\n    suffices K ≤ s by exact this.antisymm (hK.2 (hS₁ ⟨s, hs⟩) this)\n    simpa\n#align noetherian_space.finite_irreducible_components noetherian_space.finite_irreducible_components\n\n",
 "finite":
 "/-- Spaces that are both Noetherian and Hausdorff is finite. -/\ntheorem noetherian_space.finite [NoetherianSpace α] [T2Space α] : Finite α :=\n  by\n  letI : Fintype α := Set.fintypeOfFiniteUniv (noetherian_space.is_compact Set.univ).finite_of_discrete\n  infer_instance\n#align noetherian_space.finite noetherian_space.finite\n\n",
 "exists_finset_irreducible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\ntheorem noetherian_space.exists_finset_irreducible [NoetherianSpace α] (s : Closeds α) :\n    ∃ S : Finset (Closeds α), (∀ k : S, IsIrreducible (k : Set α)) ∧ s = S.sup id := by\n  classical\n    have := ((noetherian_space_tfae α).out 0 1).mp inferInstance\n    apply well_founded.induction this s\n    clear s\n    intro s H\n    by_cases h₁ : IsPreirreducible s.1\n    cases h₂ : s.1.eq_empty_or_nonempty\n    · use ∅\n      refine' ⟨fun k => k.2.elim, _⟩\n      rw [Finset.sup_empty]\n      ext1\n      exact h\n    · use {s}\n      simp only [coe_coe, Finset.sup_singleton, id.def, eq_self_iff_true, and_true_iff]\n      rintro ⟨k, hk⟩\n      cases finset.mem_singleton.mp hk\n      exact ⟨h, h₁⟩\n    · rw [isPreirreducible_iff_closed_union_closed] at h₁\n      push_neg  at h₁\n      obtain ⟨z₁, z₂, hz₁, hz₂, h, hz₁', hz₂'⟩ := h₁\n      obtain ⟨S₁, hS₁, hS₁'⟩ := H («expr ⊓ » s ⟨z₁, hz₁⟩) (inf_lt_left.2 hz₁')\n      obtain ⟨S₂, hS₂, hS₂'⟩ := H («expr ⊓ » s ⟨z₂, hz₂⟩) (inf_lt_left.2 hz₂')\n      refine' ⟨S₁ ∪ S₂, fun k => _, _⟩\n      · cases' finset.mem_union.mp k.2 with h' h'\n        exacts[hS₁ ⟨k, h'⟩, hS₂ ⟨k, h'⟩]\n      · rwa [Finset.sup_union, ← hS₁', ← hS₂', ← inf_sup_left, left_eq_inf]\n#align noetherian_space.exists_finset_irreducible noetherian_space.exists_finset_irreducible\n\n",
 "discrete":
 "-- This is not an instance since it makes a loop with `t2_space_discrete`.\ntheorem noetherian_space.discrete [NoetherianSpace α] [T2Space α] : DiscreteTopology α :=\n  ⟨eq_bot_iff.mpr fun U _ => isClosed_compl_iff.mp (NoetherianSpace.isCompact _).is_closed⟩\n#align noetherian_space.discrete noetherian_space.discrete\n\n",
 "Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem noetherian_space.Union {ι : Type _} (f : ι → Set α) [Finite ι] [hf : ∀ i, NoetherianSpace (f i)] :\n    NoetherianSpace\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  by\n  cases nonempty_fintype ι\n  simp_rw [noetherian_space_set_iff] at hf⊢\n  intro t ht\n  rw [← set.inter_eq_left_iff_subset.mpr ht, Set.inter_unionᵢ]\n  exact isCompact_unionᵢ fun i => hf i _ (Set.inter_subset_right _ _)\n#align noetherian_space.Union noetherian_space.Union\n\n"}