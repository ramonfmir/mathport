{"sum_elim":
 "#print LocallyFinite.sum_elim /-\ntheorem LocallyFinite.sum_elim {g : ι' → Set X} (hf : LocallyFinite f) (hg : LocallyFinite g) :\n    LocallyFinite (Sum.elim f g) :=\n  locallyFinite_sum.mpr ⟨hf, hg⟩\n#align locally_finite.sum_elim LocallyFinite.sum_elim\n-/\n\n",
 "subset":
 "protected theorem subset (hf : LocallyFinite f) (hg : ∀ i, g i ⊆ f i) : LocallyFinite g := fun a =>\n  let ⟨t, ht₁, ht₂⟩ := hf a\n  ⟨t, ht₁, ht₂.subset fun i hi => hi.mono <| inter_subset_inter (hg i) Subset.rfl⟩\n#align subset subset\n\n",
 "preimage_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_continuous {g : Y → X} (hf : LocallyFinite f) (hg : Continuous g) :\n    LocallyFinite fun i => «expr ⁻¹' » g (f i) := fun x =>\n  let ⟨s, hsx, hs⟩ := hf (g x)\n  ⟨«expr ⁻¹' » g s, hg.continuous_at hsx, hs.subset fun i ⟨y, hy⟩ => ⟨g y, hy⟩⟩\n#align preimage_continuous preimage_continuous\n\n",
 "point_finite":
 "theorem point_finite (hf : LocallyFinite f) (x : X) : { b | x ∈ f b }.finite :=\n  let ⟨t, hxt, ht⟩ := hf x\n  ht.subset fun b hb => ⟨x, hb, mem_of_mem_nhds hxt⟩\n#align point_finite point_finite\n\n",
 "option_elim'":
 "#print LocallyFinite.option_elim' /-\ntheorem LocallyFinite.option_elim' (hf : LocallyFinite f) (s : Set X) : LocallyFinite (Option.elim' s f) :=\n  locallyFinite_option.2 hf\n#align locally_finite.option_elim LocallyFinite.option_elim'\n-/\n\n",
 "nhdsWithin_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n#print nhdsWithin_unionᵢ /-\nprotected theorem nhdsWithin_unionᵢ (hf : LocallyFinite f) (a : X) :\n    nhds_within («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i))\n        a =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (nhds_within (f i) a) :=\n  by\n  rcases hf a with ⟨U, haU, hfin⟩\n  refine' le_antisymm _ (supᵢ_le fun i => nhdsWithin_mono _ (subset_Union _ _))\n  calc\n    nhds_within («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i))\n          a =\n        nhds_within\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i ∩ U))\n          a :=\n      by rw [← Union_inter, ← nhdsWithin_inter_of_mem' (nhdsWithin_le_nhds haU)]\n    _ =\n        nhds_within\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i ∩ U))\n          a :=\n      by simp only [mem_set_of_eq, Union_nonempty_self]\n    _ =\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n          (nhds_within (f i ∩ U) a) :=\n      (nhdsWithin_bunionᵢ hfin _ _)\n    _ ≤\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n          (nhds_within (f i ∩ U) a) :=\n      (supᵢ₂_le_supᵢ _ _)\n    _ ≤\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n          (nhds_within (f i) a) :=\n      supᵢ_mono fun i => nhdsWithin_mono _ <| inter_subset_left _ _\n    \n#align nhds_within_Union nhdsWithin_unionᵢ\n-/\n\n",
 "locally_finite_iff_small_sets":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print locallyFinite_iff_smallSets /-\ntheorem locallyFinite_iff_smallSets :\n    LocallyFinite f ↔\n      ∀ x,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n          ((nhds) x).small_sets { i | (f i ∩ s).nonempty }.finite :=\n  forall_congr' fun x =>\n    iff.symm <| eventually_small_sets' fun s t hst ht => ht.subset fun i hi => hi.mono <| inter_subset_inter_right _ hst\n#align locally_finite_iff_small_sets locallyFinite_iff_smallSets\n-/\n\n",
 "locallyFinite_sum":
 "#print locallyFinite_sum /-\ntheorem locallyFinite_sum {f : Sum ι ι' → Set X} :\n    LocallyFinite f ↔ LocallyFinite (f ∘ Sum.inl) ∧ LocallyFinite (f ∘ Sum.inr) := by\n  simp only [locallyFinite_iff_smallSets, ← forall_and, ← finite_preimage_inl_and_inr, preimage_set_of_eq, (· ∘ ·),\n    eventually_and]\n#align locally_finite_sum locallyFinite_sum\n-/\n\n",
 "locallyFinite_option":
 "#print locallyFinite_option /-\ntheorem locallyFinite_option {f : Option ι → Set X} : LocallyFinite f ↔ LocallyFinite (f ∘ some) :=\n  by\n  simp only [← (Equiv.optionEquivSumPUnit.{u} ι).symm.locally_finite_comp_iff, locallyFinite_sum,\n    locallyFinite_of_finite, and_true_iff]\n  rfl\n#align locally_finite_option locallyFinite_option\n-/\n\n",
 "locallyFinite_of_finite":
 "#print locallyFinite_of_finite /-\n/-\nCopyright (c) 2022 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n-- locally finite family [General Topology (Bourbaki, 1995)]\ntheorem locallyFinite_of_finite [Finite ι] (f : ι → Set X) : LocallyFinite f := fun x => ⟨univ, univ_mem, toFinite _⟩\n#align locally_finite_of_finite locallyFinite_of_finite\n-/\n\n",
 "locallyFinite_comp_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.locallyFinite_comp_iff /-\n@[simp]\ntheorem Equiv.locallyFinite_comp_iff (e : «expr ≃ » ι' ι) : LocallyFinite (f ∘ e) ↔ LocallyFinite f :=\n  ⟨fun h => by simpa only [(· ∘ ·), e.apply_symm_apply] using h.comp_injective e.symm.injective, fun h =>\n    h.comp_injective e.injective⟩\n#align equiv.locally_finite_comp_iff Equiv.locallyFinite_comp_iff\n-/\n\n",
 "isClosed_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print isClosed_unionᵢ /-\ntheorem isClosed_unionᵢ (hf : LocallyFinite f) (hc : ∀ i, IsClosed (f i)) :\n    IsClosed («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  by simp only [← closure_eq_iff_isClosed, hf.closure_Union, (hc _).closure_eq]\n#align is_closed_Union isClosed_unionᵢ\n-/\n\n",
 "exists_mem_basis":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem exists_mem_basis {ι' : Sort _} (hf : LocallyFinite f) {p : ι' → Prop} {s : ι' → Set X} {x : X}\n    (hb : ((nhds) x).has_basis p s) : ∃ (i : _)(hi : p i), { j | (f j ∩ s i).nonempty }.finite :=\n  let ⟨i, hpi, hi⟩ := hb.small_sets.eventually_iff.mp (hf.eventually_small_sets x)\n  ⟨i, hpi, hi Subset.rfl⟩\n#align exists_mem_basis exists_mem_basis\n\n",
 "exists_forall_eventually_eq_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F : Π a, β a` such that for any `x`, we have `f n x = F x` on the product of an infinite\ninterval `[N, +∞)` and a neighbourhood of `x`.\n\nWe formulate the conclusion in terms of the product of filter `filter.at_top` and `𝓝 x`. -/\ntheorem exists_forall_eventually_eq_prod {π : X → Sort _} {f : ℕ → ∀ x : X, π x}\n    (hf : LocallyFinite fun n => { x | f (n + 1) x ≠ f n x }) :\n    ∃ F : ∀ x : X, π x,\n      ∀ x,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n          (filter.prod atTop ((nhds) x)) (f p.1 p.2 = F p.2) :=\n  by\n  choose U hUx hU using hf\n  choose N hN using fun x => (hU x).bdd_above\n  replace hN : ∀ (x), ∀ n > N x, ∀ y ∈ U x, f (n + 1) y = f n y\n  exact fun x n hn y hy => by_contra fun hne => hn.lt.not_le <| hN x ⟨y, hne, hy⟩\n  replace hN : ∀ (x), ∀ n ≥ N x + 1, ∀ y ∈ U x, f n y = f (N x + 1) y\n  exact fun x n hn y hy => Nat.le_induction rfl (fun k hle => (hN x _ hle _ hy).trans) n hn\n  refine' ⟨fun x => f (N x + 1) x, fun x => _⟩\n  filter_upwards [Filter.prod_mem_prod (eventually_gt_at_top (N x)) (hUx x)]\n  rintro ⟨n, y⟩ ⟨hn : N x < n, hy : y ∈ U x⟩\n  calc\n    f n y = f (N x + 1) y := hN _ _ hn _ hy\n    _ = f (max (N x + 1) (N y + 1)) y := (hN _ _ (le_max_left _ _) _ hy).symm\n    _ = f (N y + 1) y := hN _ _ (le_max_right _ _) _ (mem_of_mem_nhds <| hUx y)\n    \n#align exists_forall_eventually_eq_prod exists_forall_eventually_eq_prod\n\n",
 "exists_forall_eventually_at_top_eventually_eq'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Let `f : ℕ → Π a, β a` be a sequence of (dependent) functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F : Π a, β a` such that for any `x`, for sufficiently large values of `n`, we have\n`f n y = F y` in a neighbourhood of `x`. -/\ntheorem exists_forall_eventually_at_top_eventually_eq' {π : X → Sort _} {f : ℕ → ∀ x : X, π x}\n    (hf : LocallyFinite fun n => { x | f (n + 1) x ≠ f n x }) :\n    ∃ F : ∀ x : X, π x,\n      ∀ x,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" atTop\n          («expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n            ((nhds) x) (f n y = F y)) :=\n  hf.exists_forall_eventually_eq_prod.imp fun F hF x => (hF x).curry\n#align exists_forall_eventually_at_top_eventually_eq' exists_forall_eventually_at_top_eventually_eq'\n\n",
 "exists_forall_eventually_at_top_eventually_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᶠ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- Let `f : ℕ → α → β` be a sequence of functions on a topological space. Suppose\nthat the family of sets `s n = {x | f (n + 1) x ≠ f n x}` is locally finite. Then there exists a\nfunction `F :  α → β` such that for any `x`, for sufficiently large values of `n`, we have\n`f n =ᶠ[𝓝 x] F`. -/\ntheorem exists_forall_eventually_at_top_eventually_eq {f : ℕ → X → α}\n    (hf : LocallyFinite fun n => { x | f (n + 1) x ≠ f n x }) :\n    ∃ F : X → α,\n      ∀ x,\n        «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" atTop\n          («expr =ᶠ[ ] » (f n) ((nhds) x) F) :=\n  hf.exists_forall_eventually_at_top_eventually_eq'\n#align exists_forall_eventually_at_top_eventually_eq exists_forall_eventually_at_top_eventually_eq\n\n",
 "eventually_small_sets":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\nprotected theorem eventually_small_sets (hf : LocallyFinite f) (x : X) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n      ((nhds) x).small_sets { i | (f i ∩ s).nonempty }.finite :=\n  locallyFinite_iff_smallSets.mp hf x\n#align eventually_small_sets eventually_small_sets\n\n",
 "continuous_on_Union'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem continuous_on_Union' {g : X → Y} (hf : LocallyFinite f)\n    (hc : ∀ i x, x ∈ closure (f i) → ContinuousWithinAt g (f i) x) :\n    ContinuousOn g\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  by\n  rintro x -\n  rw [ContinuousWithinAt, hf.nhds_within_Union, tendsto_supr]\n  intro i\n  by_cases hx : x ∈ closure (f i)\n  · exact hc i _ hx\n  · rw [mem_closure_iff_nhdsWithin_neBot, not_ne_bot] at hx\n    rw [hx]\n    exact tendsto_bot\n#align continuous_on_Union' continuous_on_Union'\n\n",
 "continuous_on_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem continuous_on_Union {g : X → Y} (hf : LocallyFinite f) (h_cl : ∀ i, IsClosed (f i))\n    (h_cont : ∀ i, ContinuousOn g (f i)) :\n    ContinuousOn g\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) :=\n  hf.continuous_on_Union' fun i x hx => h_cont i x <| (h_cl i).closure_subset hx\n#align continuous_on_Union continuous_on_Union\n\n",
 "continuous'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\nprotected theorem continuous' {g : X → Y} (hf : LocallyFinite f)\n    (h_cov :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) = univ)\n    (hc : ∀ i x, x ∈ closure (f i) → ContinuousWithinAt g (f i) x) : Continuous g :=\n  continuous_iff_continuousOn_univ.2 <| h_cov ▸ hf.continuous_on_Union' hc\n#align continuous' continuous'\n\n",
 "comp_injective":
 "theorem comp_injective {g : ι' → ι} (hf : LocallyFinite f) (hg : injective g) : LocallyFinite (f ∘ g) :=\n  hf.comp_inj_on (hg.inj_on _)\n#align comp_injective comp_injective\n\n",
 "comp_inj_on":
 "theorem comp_inj_on {g : ι' → ι} (hf : LocallyFinite f) (hg : InjOn g { i | (f (g i)).nonempty }) :\n    LocallyFinite (f ∘ g) := fun x =>\n  let ⟨t, htx, htf⟩ := hf x\n  ⟨t, htx, htf.preimage <| hg.mono fun i hi => hi.out.mono <| inter_subset_left _ _⟩\n#align comp_inj_on comp_inj_on\n\n",
 "closure_unionᵢ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print closure_unionᵢ /-\ntheorem closure_unionᵢ (h : LocallyFinite f) :\n    closure («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (closure (f i)) :=\n  by\n  ext x\n  simp only [mem_closure_iff_nhdsWithin_neBot, h.nhds_within_Union, supr_ne_bot, mem_Union]\n#align closure_Union closure_unionᵢ\n-/\n\n",
 "closure":
 "#print closure /-\nprotected theorem closure (hf : LocallyFinite f) : LocallyFinite fun i => closure (f i) :=\n  by\n  intro x\n  rcases hf x with ⟨s, hsx, hsf⟩\n  refine' ⟨interior s, interior_mem_nhds.2 hsx, hsf.subset fun i hi => _⟩\n  exact (hi.mono is_open_interior.closure_inter).of_closure.mono (inter_subset_inter_right _ interior_subset)\n#align closure closure\n-/\n\n",
 "Inter_compl_mem_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `f : β → set α` is a locally finite family of closed sets, then for any `x : α`, the\nintersection of the complements to `f i`, `x ∉ f i`, is a neighbourhood of `x`. -/\ntheorem Inter_compl_mem_nhds (hf : LocallyFinite f) (hc : ∀ i, IsClosed (f i)) (x : X) :\n    «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" («expr ᶜ» (f i)) ∈\n      (nhds) x :=\n  by\n  refine' IsOpen.mem_nhds _ (mem_Inter₂.2 fun i => id)\n  suffices\n    IsClosed («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i)) by\n    rwa [← isOpen_compl_iff, compl_Union, Inter_subtype] at this\n  exact (hf.comp_injective Subtype.coe_injective).is_closed_Union fun i => hc _\n#align Inter_compl_mem_nhds Inter_compl_mem_nhds\n\n",
 "Continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Continuous /-\nprotected theorem Continuous {g : X → Y} (hf : LocallyFinite f)\n    (h_cov :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f i) = univ)\n    (h_cl : ∀ i, IsClosed (f i)) (h_cont : ∀ i, ContinuousOn g (f i)) : Continuous g :=\n  continuous_iff_continuousOn_univ.2 <| h_cov ▸ hf.continuous_on_Union h_cl h_cont\n#align continuous Continuous\n-/\n\n"}