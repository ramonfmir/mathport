{"unique_uniformity_of_compact":
 "#print unique_uniformity_of_compact /-\ntheorem unique_uniformity_of_compact [t : TopologicalSpace γ] [CompactSpace γ] {u u' : UniformSpace γ}\n    (h : u.to_topological_space = t) (h' : u'.to_topological_space = t) : u = u' :=\n  by\n  apply uniformSpace_eq\n  change uniformity _ = uniformity _\n  have : @CompactSpace γ u.to_topological_space := by rwa [h]\n  have : @CompactSpace γ u'.to_topological_space := by rwa [h']\n  rw [compactSpace_uniformity, compactSpace_uniformity, h, h']\n#align unique_uniformity_of_compact unique_uniformity_of_compact\n-/\n\n",
 "uniformEquicontinuous_of_equicontinuous":
 "#print CompactSpace.uniformEquicontinuous_of_equicontinuous /-\n/-- An equicontinuous family of functions defined on a compact uniform space is automatically\nuniformly equicontinuous. -/\ntheorem CompactSpace.uniformEquicontinuous_of_equicontinuous {ι : Type _} {F : ι → β → α} [CompactSpace β]\n    (h : Equicontinuous F) : UniformEquicontinuous F :=\n  by\n  rw [equicontinuous_iff_continuous] at h\n  rw [uniformEquicontinuous_iff_uniformContinuous]\n  exact CompactSpace.uniformContinuous_of_continuous h\n#align compact_space.uniform_equicontinuous_of_equicontinuous CompactSpace.uniformEquicontinuous_of_equicontinuous\n-/\n\n",
 "uniformContinuous_of_tendsto_cocompact":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Continuous.uniformContinuous_of_tendsto_cocompact /-\ntheorem Continuous.uniformContinuous_of_tendsto_cocompact {f : α → β} {x : β} (h_cont : Continuous f)\n    (hx : Tendsto f (cocompact α) ((nhds) x)) : UniformContinuous f :=\n  uniformContinuous_def.2 fun r hr =>\n    by\n    obtain ⟨t, ht, htsymm, htr⟩ := comp_symm_mem_uniformity_sets hr\n    obtain ⟨s, hs, hst⟩ := mem_cocompact.1 (hx <| mem_nhds_left _ ht)\n    apply\n      mem_of_superset\n        (symmetrize_mem_uniformity <|\n          (hs.uniform_continuous_at_of_continuous_at f fun _ _ => h_cont.continuous_at) <| symmetrize_mem_uniformity hr)\n    rintro ⟨b₁, b₂⟩ h\n    by_cases h₁ : b₁ ∈ s; · exact (h.1 h₁).1\n    by_cases h₂ : b₂ ∈ s; · exact (h.2 h₂).2\n    apply htr\n    exact ⟨x, htsymm.mk_mem_comm.1 (hst h₁), hst h₂⟩\n#align continuous.uniform_continuous_of_tendsto_cocompact Continuous.uniformContinuous_of_tendsto_cocompact\n-/\n\n",
 "uniformContinuous_of_continuous":
 "#print HasCompactMulSupport.uniformContinuous_of_continuous /-\n@[to_additive]\ntheorem HasCompactMulSupport.uniformContinuous_of_continuous {f : α → β} [One β] (h1 : HasCompactMulSupport f)\n    (h2 : Continuous f) : UniformContinuous f :=\n  h2.uniform_continuous_of_tendsto_cocompact h1.is_one_at_infty\n#align has_compact_mul_support.uniform_continuous_of_continuous HasCompactMulSupport.uniformContinuous_of_continuous\n#align has_compact_support.uniform_continuous_of_continuous HasCompactSupport.uniformContinuous_of_continuous\n-/\n\n",
 "uniformContinuousOn_of_continuous":
 "#print IsCompact.uniformContinuousOn_of_continuous /-\n/-- Heine-Cantor: a continuous function on a compact set of a uniform space is uniformly\ncontinuous. -/\ntheorem IsCompact.uniformContinuousOn_of_continuous {s : Set α} {f : α → β} (hs : IsCompact s) (hf : ContinuousOn f s) :\n    UniformContinuousOn f s := by\n  rw [uniformContinuousOn_iff_restrict]\n  rw [isCompact_iff_compactSpace] at hs\n  rw [continuousOn_iff_continuous_restrict] at hf\n  skip\n  exact CompactSpace.uniformContinuous_of_continuous hf\n#align is_compact.uniform_continuous_on_of_continuous IsCompact.uniformContinuousOn_of_continuous\n-/\n\n",
 "uniformContinuousAt_of_continuousAt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print IsCompact.uniformContinuousAt_of_continuousAt /-\n/-- If `s` is compact and `f` is continuous at all points of `s`, then `f` is\n\"uniformly continuous at the set `s`\", i.e. `f x` is close to `f y` whenever `x ∈ s` and `y` is\nclose to `x` (even if `y` is not itself in `s`, so this is a stronger assertion than\n`uniform_continuous_on s`). -/\ntheorem IsCompact.uniformContinuousAt_of_continuousAt {r : Set (β × β)} {s : Set α} (hs : IsCompact s) (f : α → β)\n    (hf : ∀ a ∈ s, ContinuousAt f a) (hr : r ∈ (uniformity) β) :\n    { x : α × α | x.1 ∈ s → (f x.1, f x.2) ∈ r } ∈ (uniformity) α :=\n  by\n  obtain ⟨t, ht, htsymm, htr⟩ := comp_symm_mem_uniformity_sets hr\n  choose U hU T hT hb using fun a ha =>\n    exists_mem_nhds_ball_subset_of_mem_nhds ((hf a ha).preimage_mem_nhds <| mem_nhds_left _ ht)\n  obtain ⟨fs, hsU⟩ := hs.elim_nhds_subcover' U hU\n  apply mem_of_superset ((bInter_finset_mem fs).2 fun a _ => hT a a.2)\n  rintro ⟨a₁, a₂⟩ h h₁\n  obtain ⟨a, ha, haU⟩ := Set.mem_unionᵢ₂.1 (hsU h₁)\n  apply htr\n  refine' ⟨f a, htsymm.mk_mem_comm.1 (hb _ _ _ haU _), hb _ _ _ haU _⟩\n  exacts[mem_ball_self _ (hT a a.2), mem_Inter₂.1 h a ha]\n#align is_compact.uniform_continuous_at_of_continuous_at IsCompact.uniformContinuousAt_of_continuousAt\n-/\n\n",
 "tendstoUniformly":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Continuous.tendstoUniformly /-\n/-- A continuous family of functions `α → β → γ` tends uniformly to its value at `x` if `α` is\nlocally compact and `β` is compact. -/\ntheorem Continuous.tendstoUniformly [LocallyCompactSpace α] [CompactSpace β] [UniformSpace γ] (f : α → β → γ)\n    (h : Continuous (uncurry f)) (x : α) : TendstoUniformly f (f x) ((nhds) x) :=\n  h.continuous_on.tendsto_uniformly univ_mem\n#align continuous.tendsto_uniformly Continuous.tendstoUniformly\n-/\n\n",
 "nhdsSet_diagonal_eq_uniformity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_set -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print nhdsSet_diagonal_eq_uniformity /-\n/-\nCopyright (c) 2020 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Yury Kudryashov\n-/\n/-- On a compact uniform space, the topology determines the uniform structure, entourages are\nexactly the neighborhoods of the diagonal. -/\ntheorem nhdsSet_diagonal_eq_uniformity [CompactSpace α] : (nhds_set) (diagonal α) = (uniformity) α :=\n  by\n  refine' nhds_set_diagonal_le_uniformity.antisymm _\n  have :\n    ((uniformity) (α × α)).has_basis (fun U => U ∈ (uniformity) α) fun U =>\n      «expr ⁻¹' » (fun p : (α × α) × α × α => ((p.1.1, p.2.1), p.1.2, p.2.2)) (lower_set.prod U U) :=\n    by\n    rw [uniformity_prod_eq_comap_prod]\n    exact ((uniformity) α).basis_sets.prod_self.comap _\n  refine' (is_compact_diagonal.nhds_set_basis_uniformity this).ge_iff.2 fun U hU => _\n  exact mem_of_superset hU fun ⟨x, y⟩ hxy => mem_Union₂.2 ⟨(x, x), rfl, refl_mem_uniformity hU, hxy⟩\n#align nhds_set_diagonal_eq_uniformity nhdsSet_diagonal_eq_uniformity\n-/\n\n",
 "is_one_at_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print HasCompactMulSupport.is_one_at_infty /-\n/-- If `f` has compact multiplicative support, then `f` tends to 1 at infinity. -/\n@[to_additive \"If `f` has compact support, then `f` tends to zero at infinity.\"]\ntheorem HasCompactMulSupport.is_one_at_infty {f : α → γ} [TopologicalSpace γ] [One γ] (h : HasCompactMulSupport f) :\n    Tendsto f (cocompact α) ((nhds) 1) :=\n  by\n  -- porting note: move to src/topology/support.lean once the port is over\n  intro N hN\n  rw [mem_map, mem_cocompact']\n  refine' ⟨mulTSupport f, h.is_compact, _⟩\n  rw [compl_subset_comm]\n  intro v hv\n  rw [mem_preimage, image_eq_one_of_nmem_mulTSupport hv]\n  exact mem_of_mem_nhds hN\n#align has_compact_mul_support.is_one_at_infty HasCompactMulSupport.is_one_at_infty\n#align has_compact_support.is_zero_at_infty HasCompactSupport.is_zero_at_infty\n-/\n\n",
 "compactSpace_uniformity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print compactSpace_uniformity /-\n/-- On a compact uniform space, the topology determines the uniform structure, entourages are\nexactly the neighborhoods of the diagonal. -/\ntheorem compactSpace_uniformity [CompactSpace α] :\n    (uniformity) α =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" ((nhds) (x, x)) :=\n  nhdsSet_diagonal_eq_uniformity.symm.trans (nhdsSet_diagonal _)\n#align compact_space_uniformity compactSpace_uniformity\n-/\n\n"}