{"unique_uniformity_of_compact":
 "theorem unique_uniformity_of_compact [t : topological_space Œ≥] [compact_space Œ≥] {u u' : uniform_space Œ≥}\n    (h : u.to_topological_space = t) (h' : u'.to_topological_space = t) : u = u' :=\n  by\n  apply uniform_space_eq\n  change uniformity _ = uniformity _\n  have : @compact_space Œ≥ u.to_topological_space := by rwa [h]\n  have : @compact_space Œ≥ u'.to_topological_space := by rwa [h']\n  rw [compact_space_uniformity, compact_space_uniformity, h, h']\n#align unique_uniformity_of_compact unique_uniformity_of_compact\n\n",
 "uniform_equicontinuous_of_equicontinuous":
 "/-- An equicontinuous family of functions defined on a compact uniform space is automatically\nuniformly equicontinuous. -/\ntheorem compact_space.uniform_equicontinuous_of_equicontinuous {Œπ : Type _} {F : Œπ ‚Üí Œ≤ ‚Üí Œ±} [compact_space Œ≤]\n    (h : equicontinuous F) : uniform_equicontinuous F :=\n  by\n  rw [equicontinuous_iff_continuous] at h\n  rw [uniform_equicontinuous_iff_uniform_continuous]\n  exact compact_space.uniform_continuous_of_continuous h\n#align compact_space.uniform_equicontinuous_of_equicontinuous compact_space.uniform_equicontinuous_of_equicontinuous\n\n",
 "uniform_continuous_on_of_continuous":
 "/-- Heine-Cantor: a continuous function on a compact set of a uniform space is uniformly\ncontinuous. -/\ntheorem is_compact.uniform_continuous_on_of_continuous {s : set Œ±} {f : Œ± ‚Üí Œ≤} (hs : is_compact s)\n    (hf : continuous_on f s) : uniform_continuous_on f s :=\n  by\n  rw [uniform_continuous_on_iff_restrict]\n  rw [is_compact_iff_compact_space] at hs\n  rw [continuous_on_iff_continuous_restrict] at hf\n  skip\n  exact compact_space.uniform_continuous_of_continuous hf\n#align is_compact.uniform_continuous_on_of_continuous is_compact.uniform_continuous_on_of_continuous\n\n",
 "uniform_continuous_of_zero_at_infty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem continuous.uniform_continuous_of_zero_at_infty {f : Œ± ‚Üí Œ≤} [Zero Œ≤] (h_cont : continuous f)\n    (h_zero : tendsto f (cocompact Œ±) ((nhds) 0)) : uniform_continuous f :=\n  uniform_continuous_def.2 fun r hr =>\n    by\n    obtain ‚ü®t, ht, htsymm, htr‚ü© := comp_symm_mem_uniformity_sets hr\n    obtain ‚ü®s, hs, hst‚ü© := mem_cocompact.1 (h_zero <| mem_nhds_left 0 ht)\n    apply\n      mem_of_superset\n        (symmetrize_mem_uniformity <|\n          (hs.uniform_continuous_at_of_continuous_at f fun _ _ => h_cont.continuous_at) <| symmetrize_mem_uniformity hr)\n    rintro ‚ü®b‚ÇÅ, b‚ÇÇ‚ü© h\n    by_cases h‚ÇÅ : b‚ÇÅ ‚àà s; ¬∑ exact (h.1 h‚ÇÅ).1\n    by_cases h‚ÇÇ : b‚ÇÇ ‚àà s; ¬∑ exact (h.2 h‚ÇÇ).2\n    apply htr\n    exact ‚ü®0, htsymm.mk_mem_comm.1 (hst h‚ÇÅ), hst h‚ÇÇ‚ü©\n#align continuous.uniform_continuous_of_zero_at_infty continuous.uniform_continuous_of_zero_at_infty\n\n",
 "uniform_continuous_of_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/-\n    This is the difficult part of the proof. We need to prove that, for each neighborhood W\n    of the diagonal Œî, W ‚óã W is still a neighborhood of the diagonal.\n    -/\n-- The filter of neighborhoods of Œî\n-- Compositions of neighborhoods of Œî\n-- If this weren't true, then there would be V ‚àà ùìùŒî such that F ‚äì ùìü V·∂ú ‚â† ‚ä•\n-- Hence compactness would give us a cluster point (x, y) for F ‚äì ùìü V·∂ú\n-- In particular (x, y) is a cluster point of ùìü V·∂ú, hence is not in the interior of V,\n-- and a fortiori not in Œî, so x ‚â† y\n-- Since Œ≥ is compact and Hausdorff, it is normal, hence T‚ÇÉ.\n-- So there are closed neighboords V‚ÇÅ and V‚ÇÇ of x and y contained in disjoint open neighborhoods\n-- U‚ÇÅ and U‚ÇÇ.\n-- We set U‚ÇÉ := (V‚ÇÅ ‚à™ V‚ÇÇ)·∂ú so that W := U‚ÇÅ √óÀ¢ U‚ÇÅ ‚à™ U‚ÇÇ √óÀ¢ U‚ÇÇ ‚à™ U‚ÇÉ √óÀ¢ U‚ÇÉ is an open\n-- neighborhood of Œî.\n-- So W ‚óã W ‚àà F by definition of F\n-- And V‚ÇÅ √óÀ¢ V‚ÇÇ ‚àà ùìù (x, y)\n-- But (x, y) is also a cluster point of F so (V‚ÇÅ √óÀ¢ V‚ÇÇ) ‚à© (W ‚óã W) ‚â† ‚àÖ\n-- However the construction of W implies (V‚ÇÅ √óÀ¢ V‚ÇÇ) ‚à© (W ‚óã W) = ‚àÖ.\n-- Indeed assume for contradiction there is some (u, v) in the intersection.\n-- So u ‚àà V‚ÇÅ, v ‚àà V‚ÇÇ, and there exists some w such that (u, w) ‚àà W and (w ,v) ‚àà W.\n-- Because u is in V‚ÇÅ which is disjoint from U‚ÇÇ and U‚ÇÉ, (u, w) ‚àà W forces (u, w) ‚àà U‚ÇÅ √óÀ¢ U‚ÇÅ.\n-- Similarly, because v ‚àà V‚ÇÇ, (w ,v) ‚àà W forces (w, v) ‚àà U‚ÇÇ √óÀ¢ U‚ÇÇ.\n-- Hence w ‚àà U‚ÇÅ ‚à© U‚ÇÇ which is empty.\n-- So we have a contradiction\n-- Here we need to prove the topology induced by the constructed uniformity is the\n-- topology we started with.\n/-- Heine-Cantor: a continuous function on a compact uniform space is uniformly\ncontinuous. -/\ntheorem compact_space.uniform_continuous_of_continuous [compact_space Œ±] {f : Œ± ‚Üí Œ≤} (h : continuous f) :\n    uniform_continuous f :=\n  calc\n    map (prod.map f f) ((uniformity) Œ±) =\n        map (prod.map f f)\n          (¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n            ((nhds) (x, x))) :=\n      by rw [compact_space_uniformity]\n    _ =\n        ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n          (map (prod.map f f) ((nhds) (x, x))) :=\n      by rw [filter.map_supr]\n    _ ‚â§\n        ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n          ((nhds) (f x, f x)) :=\n      sup·µ¢_mono fun x => (h.prod_map h).continuous_at\n    _ ‚â§\n        ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n          ((nhds) (y, y)) :=\n      sup·µ¢_comp_le (fun y => (nhds) (y, y)) f\n    _ ‚â§ (uniformity) Œ≤ := supr_nhds_le_uniformity\n    \n#align compact_space.uniform_continuous_of_continuous compact_space.uniform_continuous_of_continuous\n\n",
 "uniform_continuous_at_of_continuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/-- If `s` is compact and `f` is continuous at all points of `s`, then `f` is\n\"uniformly continuous at the set `s`\", i.e. `f x` is close to `f y` whenever `x ‚àà s` and `y` is\nclose to `x` (even if `y` is not itself in `s`, so this is a stronger assertion than\n`uniform_continuous_on s`). -/\ntheorem is_compact.uniform_continuous_at_of_continuous_at {r : set (Œ≤ √ó Œ≤)} {s : set Œ±} (hs : is_compact s) (f : Œ± ‚Üí Œ≤)\n    (hf : ‚àÄ a ‚àà s, continuous_at f a) (hr : r ‚àà (uniformity) Œ≤) :\n    { x : Œ± √ó Œ± | x.1 ‚àà s ‚Üí (f x.1, f x.2) ‚àà r } ‚àà (uniformity) Œ± :=\n  by\n  obtain ‚ü®t, ht, htsymm, htr‚ü© := comp_symm_mem_uniformity_sets hr\n  choose U hU T hT hb using fun a ha =>\n    exists_mem_nhds_ball_subset_of_mem_nhds ((hf a ha).preimage_mem_nhds <| mem_nhds_left _ ht)\n  obtain ‚ü®fs, hsU‚ü© := hs.elim_nhds_subcover' U hU\n  apply mem_of_superset ((bInter_finset_mem fs).2 fun a _ => hT a a.2)\n  rintro ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© h h‚ÇÅ\n  obtain ‚ü®a, ha, haU‚ü© := Set.mem_union·µ¢‚ÇÇ.1 (hsU h‚ÇÅ)\n  apply htr\n  refine' ‚ü®f a, htsymm.mk_mem_comm.1 (hb _ _ _ haU _), hb _ _ _ haU _‚ü©\n  exacts[mem_ball_self _ (hT a a.2), mem_Inter‚ÇÇ.1 h a ha]\n#align is_compact.uniform_continuous_at_of_continuous_at is_compact.uniform_continuous_at_of_continuous_at\n\n",
 "tendsto_uniformly":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uncurry -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A continuous family of functions `Œ± ‚Üí Œ≤ ‚Üí Œ≥` tends uniformly to its value at `x` if `Œ±` is\nlocally compact and `Œ≤` is compact. -/\ntheorem continuous.tendsto_uniformly [locally_compact_space Œ±] [compact_space Œ≤] [uniform_space Œ≥] (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥)\n    (h : continuous (uncurry f)) (x : Œ±) : tendsto_uniformly f (f x) ((nhds) x) :=\n  h.continuous_on.tendsto_uniformly univ_mem\n#align continuous.tendsto_uniformly continuous.tendsto_uniformly\n\n",
 "nhds_set_diagonal_eq_uniformity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_set -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/-\nCopyright (c) 2020 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot, Yury Kudryashov\n-/\n/-- On a compact uniform space, the topology determines the uniform structure, entourages are\nexactly the neighborhoods of the diagonal. -/\ntheorem nhds_set_diagonal_eq_uniformity [compact_space Œ±] : (nhds_set) (diagonal Œ±) = (uniformity) Œ± :=\n  by\n  refine' nhds_set_diagonal_le_uniformity.antisymm _\n  have :\n    ((uniformity) (Œ± √ó Œ±)).has_basis (fun U => U ‚àà (uniformity) Œ±) fun U =>\n      ¬´expr ‚Åª¬π' ¬ª (fun p : (Œ± √ó Œ±) √ó Œ± √ó Œ± => ((p.1.1, p.2.1), p.1.2, p.2.2)) (lower_set.prod U U) :=\n    by\n    rw [uniformity_prod_eq_comap_prod]\n    exact ((uniformity) Œ±).basis_sets.prod_self.comap _\n  refine' (is_compact_diagonal.nhds_set_basis_uniformity this).ge_iff.2 fun U hU => _\n  exact mem_of_superset hU fun ‚ü®x, y‚ü© hxy => mem_Union‚ÇÇ.2 ‚ü®(x, x), rfl, refl_mem_uniformity hU, hxy‚ü©\n#align nhds_set_diagonal_eq_uniformity nhds_set_diagonal_eq_uniformity\n\n",
 "compact_space_uniformity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- On a compact uniform space, the topology determines the uniform structure, entourages are\nexactly the neighborhoods of the diagonal. -/\ntheorem compact_space_uniformity [compact_space Œ±] :\n    (uniformity) Œ± =\n      ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\" ((nhds) (x, x)) :=\n  nhds_set_diagonal_eq_uniformity.symm.trans (nhds_set_diagonal _)\n#align compact_space_uniformity compact_space_uniformity\n\n"}