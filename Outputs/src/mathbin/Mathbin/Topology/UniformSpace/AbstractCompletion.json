{"uniform_continuous_map₂":
 "theorem uniform_continuous_map₂ (f : α → β → γ) : UniformContinuous₂ (pkg.map₂ pkg' pkg'' f) :=\n  pkg.uniform_continuous_extension₂ pkg' _\n#align uniform_continuous_map₂ uniform_continuous_map₂\n\n",
 "uniform_continuous_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprmap -/\ntheorem uniform_continuous_map : UniformContinuous ((exprmap) f) :=\n  pkg.uniform_continuous_extend\n#align uniform_continuous_map uniform_continuous_map\n\n",
 "uniform_continuous_extension₂":
 "theorem uniform_continuous_extension₂ : UniformContinuous₂ (pkg.extend₂ pkg' f) :=\n  by\n  rw [uniformContinuous₂_def, AbstractCompletion.extend₂, uncurry_curry]\n  apply uniform_continuous_extend\n#align uniform_continuous_extension₂ uniform_continuous_extension₂\n\n",
 "uniform_continuous_extend":
 "theorem uniform_continuous_extend : UniformContinuous (pkg.extend f) :=\n  by\n  by_cases hf : UniformContinuous f\n  · rw [pkg.extend_def hf]\n    exact uniformContinuous_uniformly_extend pkg.uniform_inducing pkg.dense hf\n  · change UniformContinuous (ite _ _ _)\n    rw [if_neg hf]\n    exact uniformContinuous_of_const fun a b => by congr\n#align uniform_continuous_extend uniform_continuous_extend\n\n",
 "uniform_continuous_compare_equiv_symm":
 "theorem uniform_continuous_compare_equiv_symm : UniformContinuous (pkg.compare_equiv pkg').symm :=\n  pkg'.uniform_continuous_compare pkg\n#align uniform_continuous_compare_equiv_symm uniform_continuous_compare_equiv_symm\n\n",
 "uniform_continuous_compare_equiv":
 "theorem uniform_continuous_compare_equiv : UniformContinuous (pkg.compare_equiv pkg') :=\n  pkg.uniform_continuous_compare pkg'\n#align uniform_continuous_compare_equiv uniform_continuous_compare_equiv\n\n",
 "uniform_continuous_compare":
 "-- We can now compare two completion packages for the same uniform space\ntheorem uniform_continuous_compare : UniformContinuous (pkg.compare pkg') :=\n  pkg.uniform_continuous_extend\n#align uniform_continuous_compare uniform_continuous_compare\n\n",
 "uniform_continuous_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\ntheorem uniform_continuous_coe : UniformContinuous (exprι) :=\n  UniformInducing.uniformContinuous pkg.uniform_inducing\n#align uniform_continuous_coe uniform_continuous_coe\n\n",
 "map₂_coe_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι'' -/\ntheorem map₂_coe_coe (a : α) (b : β) (f : α → β → γ) (hf : UniformContinuous₂ f) :\n    pkg.map₂ pkg' pkg'' f ((exprι) a) ((exprι') b) = (exprι'') (f a b) :=\n  pkg.extension₂_coe_coe pkg' (pkg''.uniform_continuous_coe.comp hf) a b\n#align map₂_coe_coe map₂_coe_coe\n\n",
 "map_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatβ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprmap -/\ntheorem map_unique {f : α → β} {g : exprhatα → exprhatβ} (hg : UniformContinuous g)\n    (h : ∀ a, (exprι') (f a) = g ((exprι) a)) : (exprmap) f = g :=\n  pkg.funext (pkg.continuous_map _ _) hg.continuous <| by\n    intro a\n    change pkg.extend (exprι' ∘ f) _ = _\n    simp only [(· ∘ ·), h]\n    rw [pkg.extend_coe (hg.comp pkg.uniform_continuous_coe)]\n#align map_unique map_unique\n\n",
 "map_id":
 "@[simp]\ntheorem map_id : pkg.map pkg id = id :=\n  pkg.map_unique pkg uniformContinuous_id fun a => rfl\n#align map_id map_id\n\n",
 "map_comp":
 "theorem map_comp {g : β → γ} {f : α → β} (hg : UniformContinuous g) (hf : UniformContinuous f) :\n    pkg'.map pkg'' g ∘ pkg.map pkg' f = pkg.map pkg'' (g ∘ f) :=\n  pkg.extend_map pkg' (pkg''.uniform_continuous_coe.comp hg) hf\n#align map_comp map_comp\n\n",
 "map_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprmap -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι' -/\n@[simp]\ntheorem map_coe (hf : UniformContinuous f) (a : α) : (exprmap) f ((exprι) a) = (exprι') (f a) :=\n  pkg.extend_coe (pkg'.uniform_continuous_coe.comp hf) a\n#align map_coe map_coe\n\n",
 "inverse_compare":
 "theorem inverse_compare : pkg.compare pkg' ∘ pkg'.compare pkg = id :=\n  by\n  have uc := pkg.uniform_continuous_compare pkg'\n  have uc' := pkg'.uniform_continuous_compare pkg\n  apply pkg'.funext (uc.comp uc').continuous continuous_id\n  intro a\n  rw [comp_app, pkg'.compare_coe pkg, pkg.compare_coe pkg']\n  rfl\n#align inverse_compare inverse_compare\n\n",
 "induction_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n@[elab_as_elim]\ntheorem induction_on {p : exprhatα → Prop} (a : exprhatα) (hp : IsClosed { a | p a }) (ih : ∀ a, p ((exprι) a)) : p a :=\n  isClosed_property pkg.dense hp ih a\n#align induction_on induction_on\n\n",
 "funext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n#print funext /-\nprotected theorem funext [TopologicalSpace β] [T2Space β] {f g : exprhatα → β} (hf : Continuous f) (hg : Continuous g)\n    (h : ∀ a, f ((exprι) a) = g ((exprι) a)) : f = g :=\n  funext fun a => pkg.induction_on a (isClosed_eq hf hg) h\n#align funext funext\n-/\n\n",
 "extension₂_coe_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι' -/\ntheorem extension₂_coe_coe (hf : UniformContinuous <| uncurry f) (a : α) (b : β) :\n    pkg.extend₂ pkg' f ((exprι) a) ((exprι') b) = f a b :=\n  show (pkg.prod pkg').extend (uncurry f) ((pkg.prod pkg').coe (a, b)) = uncurry f (a, b) from\n    (pkg.prod pkg').extend_coe hf _\n#align extension₂_coe_coe extension₂_coe_coe\n\n",
 "extend_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\ntheorem extend_unique (hf : UniformContinuous f) {g : exprhatα → β} (hg : UniformContinuous g)\n    (h : ∀ a : α, f a = g ((exprι) a)) : pkg.extend f = g :=\n  by\n  apply pkg.funext pkg.continuous_extend hg.continuous\n  simpa only [pkg.extend_coe hf] using h\n#align extend_unique extend_unique\n\n",
 "extend_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprmap -/\ntheorem extend_map [CompleteSpace γ] [SeparatedSpace γ] {f : β → γ} {g : α → β} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : pkg'.extend f ∘ (exprmap) g = pkg.extend (f ∘ g) :=\n  pkg.funext (pkg'.continuous_extend.comp (pkg.continuous_map pkg' _)) pkg.continuous_extend fun a => by\n    rw [pkg.extend_coe (hf.comp hg), comp_app, pkg.map_coe pkg' hg, pkg'.extend_coe hf]\n#align extend_map extend_map\n\n",
 "extend_def":
 "theorem extend_def (hf : UniformContinuous f) : pkg.extend f = pkg.dense_inducing.extend f :=\n  if_pos hf\n#align extend_def extend_def\n\n",
 "extend_comp_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n@[simp]\ntheorem extend_comp_coe {f : exprhatα → β} (hf : UniformContinuous f) : pkg.extend (f ∘ exprι) = f :=\n  funext fun x =>\n    pkg.induction_on x (isClosed_eq pkg.continuous_extend hf.continuous) fun y =>\n      pkg.extend_coe (hf.comp <| pkg.uniform_continuous_coe) y\n#align extend_comp_coe extend_comp_coe\n\n",
 "extend_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\ntheorem extend_coe [T2Space β] (hf : UniformContinuous f) (a : α) : (pkg.extend f) ((exprι) a) = f a :=\n  by\n  rw [pkg.extend_def hf]\n  exact pkg.dense_inducing.extend_eq hf.continuous a\n#align extend_coe extend_coe\n\n",
 "continuous_map₂":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatα -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprhatβ -/\ntheorem continuous_map₂ {δ} [TopologicalSpace δ] {f : α → β → γ} {a : δ → exprhatα} {b : δ → exprhatβ}\n    (ha : Continuous a) (hb : Continuous b) : Continuous fun d : δ => pkg.map₂ pkg' pkg'' f (a d) (b d) :=\n  ((pkg.uniform_continuous_map₂ pkg' pkg'' f).continuous.comp (Continuous.prod_mk ha hb) : _)\n#align continuous_map₂ continuous_map₂\n\n",
 "continuous_extend":
 "theorem continuous_extend : Continuous (pkg.extend f) :=\n  pkg.uniform_continuous_extend.continuous\n#align continuous_extend continuous_extend\n\n",
 "continuous_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\ntheorem continuous_coe : Continuous (exprι) :=\n  pkg.uniform_continuous_coe.continuous\n#align continuous_coe continuous_coe\n\n",
 "compare_coe":
 "theorem compare_coe (a : α) : pkg.compare pkg' (pkg.coe a) = pkg'.coe a :=\n  pkg.extend_coe pkg'.uniform_continuous_coe a\n#align compare_coe compare_coe\n\n",
 "closure_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n/-\nCopyright (c) 2019 Patrick Massot. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Patrick Massot\n-/\ntheorem closure_range : closure (range (exprι)) = univ :=\n  pkg.dense.closure_range\n#align closure_range closure_range\n\n",
 "DenseInducing":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprι -/\n#print DenseInducing /-\ntheorem DenseInducing : DenseInducing (exprι) :=\n  ⟨pkg.uniform_inducing.inducing, pkg.dense⟩\n#align dense_inducing DenseInducing\n-/\n\n",
 "ContinuousMap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprmap -/\n#print ContinuousMap /-\ntheorem ContinuousMap : Continuous ((exprmap) f) :=\n  pkg.continuous_extend\n#align continuous_map ContinuousMap\n-/\n\n"}