{"uniform_equicontinuous_iff_uniform_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵤ » -/\n/-- A family `𝓕 : ι → β → α` is uniformly equicontinuous iff the function `swap 𝓕 : β → ι → α` is\nuniformly continuous *when `ι → α` is equipped with the uniform structure of uniform convergence*.\nThis is very useful for developping the equicontinuity API, but it should not be used directly\nfor other purposes. -/\ntheorem uniform_equicontinuous_iff_uniform_continuous {F : ι → β → α} :\n    uniform_equicontinuous F ↔ uniform_continuous (of_fun ∘ function.swap F : β → «expr →ᵤ » ι α) := by\n  rw [uniform_continuous, (uniform_fun.has_basis_uniformity ι α).tendsto_right_iff] <;> rfl\n#align uniform_equicontinuous_iff_uniform_continuous uniform_equicontinuous_iff_uniform_continuous\n\n",
 "uniform_equicontinuous_iff_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\ntheorem filter.has_basis.uniform_equicontinuous_iff_right {κ : Type _} {p : κ → Prop} {s : κ → set (α × α)}\n    {F : ι → β → α} (hα : ((uniformity) α).has_basis p s) :\n    uniform_equicontinuous F ↔\n      ∀ k,\n        p k →\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n            ((uniformity) β) (∀ i, (F i xy.1, F i xy.2) ∈ s k) :=\n  by\n  rw [uniform_equicontinuous_iff_uniform_continuous, uniform_continuous,\n    (uniform_fun.has_basis_uniformity_of_basis ι α hα).tendsto_right_iff]\n  rfl\n#align filter.has_basis.uniform_equicontinuous_iff_right filter.has_basis.uniform_equicontinuous_iff_right\n\n",
 "uniform_equicontinuous_iff_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\ntheorem filter.has_basis.uniform_equicontinuous_iff_left {κ : Type _} {p : κ → Prop} {s : κ → set (β × β)}\n    {F : ι → β → α} (hβ : ((uniformity) β).has_basis p s) :\n    uniform_equicontinuous F ↔\n      ∀ U ∈ (uniformity) α, ∃ (k : _)(_ : p k), ∀ x y, (x, y) ∈ s k → ∀ i, (F i x, F i y) ∈ U :=\n  by\n  rw [uniform_equicontinuous_iff_uniform_continuous, uniform_continuous,\n    hβ.tendsto_iff (uniform_fun.has_basis_uniformity ι α)]\n  simp_rw [prod.forall]\n  rfl\n#align filter.has_basis.uniform_equicontinuous_iff_left filter.has_basis.uniform_equicontinuous_iff_left\n\n",
 "uniform_equicontinuous_iff":
 "/-- Given `u : α → γ` a uniform inducing map, a family `𝓕 : ι → β → α` is uniformly equicontinuous\niff the family `𝓕'`, obtained by precomposing each function of `𝓕` by `u`, is uniformly\nequicontinuous. -/\ntheorem uniform_inducing.uniform_equicontinuous_iff {F : ι → β → α} {u : α → γ} (hu : uniform_inducing u) :\n    uniform_equicontinuous F ↔ uniform_equicontinuous ((· ∘ ·) u ∘ F) :=\n  by\n  have := uniform_fun.postcomp_uniform_inducing hu\n  rw [uniform_equicontinuous_iff_uniform_continuous, uniform_equicontinuous_iff_uniform_continuous,\n    this.uniform_continuous_iff]\n  rfl\n#align uniform_inducing.uniform_equicontinuous_iff uniform_inducing.uniform_equicontinuous_iff\n\n",
 "uniform_equicontinuous_at_iff_range":
 "/-- A family `𝓕 : ι → β → α` is uniformly equicontinuous iff `range 𝓕` is uniformly equicontinuous,\ni.e the family `coe : range F → β → α` is uniformly equicontinuous. -/\ntheorem uniform_equicontinuous_at_iff_range {F : ι → β → α} :\n    uniform_equicontinuous F ↔ uniform_equicontinuous (coe : range F → β → α) :=\n  ⟨fun h => by rw [← comp_range_splitting F] <;> exact h.comp _, fun h => h.comp (rangeFactorization F)⟩\n#align uniform_equicontinuous_at_iff_range uniform_equicontinuous_at_iff_range\n\n",
 "uniform_continuous_of_uniform_equicontinuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `𝓕 : ι → β → α` tends to `f : β → α` *pointwise* along some nontrivial filter, and if the\nfamily `𝓕` is uniformly equicontinuous, then the limit is uniformly continuous. -/\ntheorem filter.tendsto.uniform_continuous_of_uniform_equicontinuous {l : filter ι} [l.ne_bot] {F : ι → β → α}\n    {f : β → α} (h₁ : tendsto F l ((nhds) f)) (h₂ : uniform_equicontinuous F) : uniform_continuous f :=\n  (uniform_equicontinuous_at_iff_range.mp h₂).closure.uniform_continuous\n    ⟨f, mem_closure_of_tendsto h₁ <| eventually_of_forall mem_range_self⟩\n#align\n  filter.tendsto.uniform_continuous_of_uniform_equicontinuous filter.tendsto.uniform_continuous_of_uniform_equicontinuous\n\n",
 "uniform_continuous_of_mem":
 "protected theorem set.uniform_equicontinuous.uniform_continuous_of_mem {H : set <| β → α} (h : H.uniform_equicontinuous)\n    {f : β → α} (hf : f ∈ H) : uniform_continuous f :=\n  h.uniform_continuous ⟨f, hf⟩\n#align set.uniform_equicontinuous.uniform_continuous_of_mem set.uniform_equicontinuous.uniform_continuous_of_mem\n\n",
 "uniform_continuous":
 "/-- Each function of a uniformly equicontinuous family is uniformly continuous. -/\ntheorem uniform_equicontinuous.uniform_continuous {F : ι → β → α} (h : uniform_equicontinuous F) (i : ι) :\n    uniform_continuous (F i) := fun U hU => mem_map.mpr (mem_of_superset (h U hU) fun xy hxy => hxy i)\n#align uniform_equicontinuous.uniform_continuous uniform_equicontinuous.uniform_continuous\n\n",
 "mono":
 "protected theorem set.uniform_equicontinuous.mono {H H' : set <| β → α} (h : H.uniform_equicontinuous) (hH : H' ⊆ H) :\n    H'.uniform_equicontinuous :=\n  h.comp (inclusion hH)\n#align set.uniform_equicontinuous.mono set.uniform_equicontinuous.mono\n\n",
 "equicontinuous_iff_range":
 "/-- A family `𝓕 : ι → X → α` is equicontinuous iff `range 𝓕` is equicontinuous,\ni.e the family `coe : range F → X → α` is equicontinuous. -/\ntheorem equicontinuous_iff_range {F : ι → X → α} : equicontinuous F ↔ equicontinuous (coe : range F → X → α) :=\n  forall_congr' fun x₀ => equicontinuous_at_iff_range\n#align equicontinuous_iff_range equicontinuous_iff_range\n\n",
 "equicontinuous_iff_continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵤ » -/\n/-- A family `𝓕 : ι → X → α` is equicontinuous iff the function `swap 𝓕 : X → ι → α` is\ncontinuous *when `ι → α` is equipped with the topology of uniform convergence*. This is\nvery useful for developping the equicontinuity API, but it should not be used directly for other\npurposes. -/\ntheorem equicontinuous_iff_continuous {F : ι → X → α} :\n    equicontinuous F ↔ continuous (of_fun ∘ function.swap F : X → «expr →ᵤ » ι α) := by\n  simp_rw [equicontinuous, continuous_iff_continuous_at, equicontinuous_at_iff_continuous_at]\n#align equicontinuous_iff_continuous equicontinuous_iff_continuous\n\n",
 "equicontinuous_iff":
 "/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr ∀ x, (_ : exprProp())]] -/\n/-- Given `u : α → β` a uniform inducing map, a family `𝓕 : ι → X → α` is equicontinuous iff the\nfamily `𝓕'`, obtained by precomposing each function of `𝓕` by `u`, is equicontinuous. -/\ntheorem uniform_inducing.equicontinuous_iff {F : ι → X → α} {u : α → β} (hu : uniform_inducing u) :\n    equicontinuous F ↔ equicontinuous ((· ∘ ·) u ∘ F) :=\n  by\n  trace\n    \"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:76:14: unsupported tactic `congrm #[[expr ∀ x, (_ : exprProp())]]\"\n  rw [hu.equicontinuous_at_iff]\n#align uniform_inducing.equicontinuous_iff uniform_inducing.equicontinuous_iff\n\n",
 "equicontinuous_at_iff_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem filter.has_basis.equicontinuous_at_iff_right {κ : Type _} {p : κ → Prop} {s : κ → set (α × α)} {F : ι → X → α}\n    {x₀ : X} (hα : ((uniformity) α).has_basis p s) :\n    equicontinuous_at F x₀ ↔\n      ∀ k,\n        p k →\n          «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\"\n            ((nhds) x₀) (∀ i, (F i x₀, F i x) ∈ s k) :=\n  by\n  rw [equicontinuous_at_iff_continuous_at, continuous_at,\n    (uniform_fun.has_basis_nhds_of_basis ι α _ hα).tendsto_right_iff]\n  rfl\n#align filter.has_basis.equicontinuous_at_iff_right filter.has_basis.equicontinuous_at_iff_right\n\n",
 "equicontinuous_at_iff_range":
 "/-- A family `𝓕 : ι → X → α` is equicontinuous at `x₀` iff `range 𝓕` is equicontinuous at `x₀`,\ni.e the family `coe : range F → X → α` is equicontinuous at `x₀`. -/\ntheorem equicontinuous_at_iff_range {F : ι → X → α} {x₀ : X} :\n    equicontinuous_at F x₀ ↔ equicontinuous_at (coe : range F → X → α) x₀ :=\n  ⟨fun h => by rw [← comp_range_splitting F] <;> exact h.comp _, fun h => h.comp (rangeFactorization F)⟩\n#align equicontinuous_at_iff_range equicontinuous_at_iff_range\n\n",
 "equicontinuous_at_iff_pair":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x y «expr ∈ » V) -/\n/-\nCopyright (c) 2022 Anatole Dedecker. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anatole Dedecker\n-/\n/-- Reformulation of equicontinuity at `x₀` comparing two variables near `x₀` instead of comparing\nonly one with `x₀`. -/\ntheorem equicontinuous_at_iff_pair {F : ι → X → α} {x₀ : X} :\n    equicontinuous_at F x₀ ↔\n      ∀ U ∈ (uniformity) α, ∃ V ∈ (nhds) x₀, ∀ (x) (_ : x ∈ V) (y) (_ : y ∈ V) (i), (F i x, F i y) ∈ U :=\n  by\n  constructor <;> intro H U hU\n  · rcases comp_symm_mem_uniformity_sets hU with ⟨V, hV, hVsymm, hVU⟩\n    refine' ⟨_, H V hV, fun x hx y hy i => hVU (prod_mk_mem_comp_rel _ (hy i))⟩\n    exact hVsymm.mk_mem_comm.mp (hx i)\n  · rcases H U hU with ⟨V, hV, hVU⟩\n    filter_upwards [hV] using fun x hx i => hVU x₀ (mem_of_mem_nhds hV) x hx i\n#align equicontinuous_at_iff_pair equicontinuous_at_iff_pair\n\n",
 "equicontinuous_at_iff_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\ntheorem filter.has_basis.equicontinuous_at_iff_left {κ : Type _} {p : κ → Prop} {s : κ → set X} {F : ι → X → α} {x₀ : X}\n    (hX : ((nhds) x₀).has_basis p s) :\n    equicontinuous_at F x₀ ↔ ∀ U ∈ (uniformity) α, ∃ (k : _)(_ : p k), ∀ x ∈ s k, ∀ i, (F i x₀, F i x) ∈ U :=\n  by\n  rw [equicontinuous_at_iff_continuous_at, continuous_at, hX.tendsto_iff (uniform_fun.has_basis_nhds ι α _)]\n  rfl\n#align filter.has_basis.equicontinuous_at_iff_left filter.has_basis.equicontinuous_at_iff_left\n\n",
 "equicontinuous_at_iff_continuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ᵤ » -/\n/-- A family `𝓕 : ι → X → α` is equicontinuous at `x₀` iff the function `swap 𝓕 : X → ι → α` is\ncontinuous at `x₀` *when `ι → α` is equipped with the topology of uniform convergence*. This is\nvery useful for developping the equicontinuity API, but it should not be used directly for other\npurposes. -/\ntheorem equicontinuous_at_iff_continuous_at {F : ι → X → α} {x₀ : X} :\n    equicontinuous_at F x₀ ↔ continuous_at (of_fun ∘ function.swap F : X → «expr →ᵤ » ι α) x₀ := by\n  rw [continuous_at, (uniform_fun.has_basis_nhds ι α _).tendsto_right_iff] <;> rfl\n#align equicontinuous_at_iff_continuous_at equicontinuous_at_iff_continuous_at\n\n",
 "equicontinuous_at_iff":
 "/-- Given `u : α → β` a uniform inducing map, a family `𝓕 : ι → X → α` is equicontinuous at a point\n`x₀ : X` iff the family `𝓕'`, obtained by precomposing each function of `𝓕` by `u`, is\nequicontinuous at `x₀`. -/\ntheorem uniform_inducing.equicontinuous_at_iff {F : ι → X → α} {x₀ : X} {u : α → β} (hu : uniform_inducing u) :\n    equicontinuous_at F x₀ ↔ equicontinuous_at ((· ∘ ·) u ∘ F) x₀ :=\n  by\n  have := (uniform_fun.postcomp_uniform_inducing hu).inducing\n  rw [equicontinuous_at_iff_continuous_at, equicontinuous_at_iff_continuous_at, this.continuous_at_iff]\n  rfl\n#align uniform_inducing.equicontinuous_at_iff uniform_inducing.equicontinuous_at_iff\n\n",
 "equicontinuous":
 "/-- Uniform equicontinuity implies equicontinuity. -/\ntheorem uniform_equicontinuous.equicontinuous {F : ι → β → α} (h : uniform_equicontinuous F) : equicontinuous F :=\n  fun x₀ U hU => mem_of_superset (ball_mem_nhds x₀ (h U hU)) fun x hx i => hx i\n#align uniform_equicontinuous.equicontinuous uniform_equicontinuous.equicontinuous\n\n",
 "continuous_of_mem":
 "protected theorem set.equicontinuous.continuous_of_mem {H : set <| X → α} (h : H.equicontinuous) {f : X → α}\n    (hf : f ∈ H) : continuous f :=\n  h.continuous ⟨f, hf⟩\n#align set.equicontinuous.continuous_of_mem set.equicontinuous.continuous_of_mem\n\n",
 "continuous_of_equicontinuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `𝓕 : ι → X → α` tends to `f : X → α` *pointwise* along some nontrivial filter, and if the\nfamily `𝓕` is equicontinuous, then the limit is continuous. -/\ntheorem filter.tendsto.continuous_of_equicontinuous_at {l : filter ι} [l.ne_bot] {F : ι → X → α} {f : X → α}\n    (h₁ : tendsto F l ((nhds) f)) (h₂ : equicontinuous F) : continuous f :=\n  continuous_iff_continuous_at.mpr fun x => h₁.continuous_at_of_equicontinuous_at (h₂ x)\n#align filter.tendsto.continuous_of_equicontinuous_at filter.tendsto.continuous_of_equicontinuous_at\n\n",
 "continuous_at_of_mem":
 "protected theorem set.equicontinuous_at.continuous_at_of_mem {H : set <| X → α} {x₀ : X} (h : H.equicontinuous_at x₀)\n    {f : X → α} (hf : f ∈ H) : continuous_at f x₀ :=\n  h.continuous_at ⟨f, hf⟩\n#align set.equicontinuous_at.continuous_at_of_mem set.equicontinuous_at.continuous_at_of_mem\n\n",
 "continuous_at_of_equicontinuous_at":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `𝓕 : ι → X → α` tends to `f : X → α` *pointwise* along some nontrivial filter, and if the\nfamily `𝓕` is equicontinuous at some `x₀ : X`, then the limit is continuous at `x₀`. -/\ntheorem filter.tendsto.continuous_at_of_equicontinuous_at {l : filter ι} [l.ne_bot] {F : ι → X → α} {f : X → α} {x₀ : X}\n    (h₁ : tendsto F l ((nhds) f)) (h₂ : equicontinuous_at F x₀) : continuous_at f x₀ :=\n  (equicontinuous_at_iff_range.mp h₂).closure.continuous_at\n    ⟨f, mem_closure_of_tendsto h₁ <| eventually_of_forall mem_range_self⟩\n#align filter.tendsto.continuous_at_of_equicontinuous_at filter.tendsto.continuous_at_of_equicontinuous_at\n\n",
 "continuous_at":
 "/-- Each function of a family equicontinuous at `x₀` is continuous at `x₀`. -/\ntheorem equicontinuous_at.continuous_at {F : ι → X → α} {x₀ : X} (h : equicontinuous_at F x₀) (i : ι) :\n    continuous_at (F i) x₀ := by\n  intro U hU\n  rw [uniform_space.mem_nhds_iff] at hU\n  rcases hU with ⟨V, hV₁, hV₂⟩\n  exact mem_map.mpr (mem_of_superset (h V hV₁) fun x hx => hV₂ (hx i))\n#align equicontinuous_at.continuous_at equicontinuous_at.continuous_at\n\n",
 "continuous":
 "/-- Each function of an equicontinuous family is continuous. -/\ntheorem equicontinuous.continuous {F : ι → X → α} (h : equicontinuous F) (i : ι) : continuous (F i) :=\n  continuous_iff_continuous_at.mpr fun x => (h x).continuous_at i\n#align equicontinuous.continuous equicontinuous.continuous\n\n",
 "comp":
 "/-- Taking sub-families preserves uniform equicontinuity. -/\ntheorem uniform_equicontinuous.comp {F : ι → β → α} (h : uniform_equicontinuous F) (u : κ → ι) :\n    uniform_equicontinuous (F ∘ u) := fun U hU => (h U hU).mono fun x H k => H (u k)\n#align uniform_equicontinuous.comp uniform_equicontinuous.comp\n\n",
 "closure'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/-- A version of `uniform_equicontinuous.closure` applicable to subsets of types which embed\ncontinuously into `β → α` with the product topology. It turns out we don't need any other condition\non the embedding than continuity, but in practice this will mostly be applied to `fun_like` types\nwhere the coercion is injective. -/\ntheorem uniform_equicontinuous.closure' {A : set Y} {u : Y → β → α} (hA : uniform_equicontinuous (u ∘ coe : A → β → α))\n    (hu : continuous u) : uniform_equicontinuous (u ∘ coe : closure A → β → α) :=\n  by\n  intro U hU\n  rcases mem_uniformity_is_closed hU with ⟨V, hV, hVclosed, hVU⟩\n  filter_upwards [hA V hV]\n  rintro ⟨x, y⟩ hxy\n  rw [SetCoe.forall] at *\n  change A ⊆ «expr ⁻¹' » (fun f => (u f x, u f y)) V at hxy\n  refine' (closure_minimal hxy <| hVclosed.preimage <| _).trans (preimage_mono hVU)\n  exact continuous.prod_mk ((continuous_apply x).comp hu) ((continuous_apply y).comp hu)\n#align uniform_equicontinuous.closure' uniform_equicontinuous.closure'\n\n",
 "closure":
 "/-- If a set of functions is uniformly equicontinuous, its closure for the product topology is also\nuniformly equicontinuous. -/\ntheorem uniform_equicontinuous.closure {A : set <| β → α} (hA : A.uniform_equicontinuous) :\n    (closure A).uniform_equicontinuous :=\n  @uniform_equicontinuous.closure' _ _ _ _ _ _ _ id hA continuous_id\n#align uniform_equicontinuous.closure uniform_equicontinuous.closure\n\n"}