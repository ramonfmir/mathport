{"union":
 "#print IsComplete.union /-\nprotected theorem IsComplete.union {s t : Set α} (hs : IsComplete s) (ht : IsComplete t) : IsComplete (s ∪ t) :=\n  by\n  simp only [isComplete_iff_ultrafilter', Ultrafilter.union_mem_iff, or_imp] at *\n  exact fun l hl =>\n    ⟨fun hsl => (hs l hl hsl).imp fun x hx => ⟨or.inl hx.fst, hx.snd⟩, fun htl =>\n      (ht l hl htl).imp fun x hx => ⟨or.inr hx.fst, hx.snd⟩⟩\n#align is_complete.union IsComplete.union\n-/\n\n",
 "ultrafilter_of":
 "#print Cauchy.ultrafilter_of /-\ntheorem Cauchy.ultrafilter_of {l : Filter α} (h : Cauchy l) : Cauchy (@Ultrafilter.of _ l h.1 : Filter α) :=\n  by\n  haveI := h.1\n  have := Ultrafilter.of_le l\n  exact ⟨Ultrafilter.neBot _, (Filter.prod_mono this this).trans h.2⟩\n#align cauchy.ultrafilter_of Cauchy.ultrafilter_of\n-/\n\n",
 "totallyBounded_subset":
 "#print totallyBounded_subset /-\ntheorem totallyBounded_subset {s₁ s₂ : Set α} (hs : s₁ ⊆ s₂) (h : TotallyBounded s₂) : TotallyBounded s₁ := fun d hd =>\n  let ⟨t, ht₁, ht₂⟩ := h d hd\n  ⟨t, ht₁, Subset.trans hs ht₂⟩\n#align totally_bounded_subset totallyBounded_subset\n-/\n\n",
 "totallyBounded_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print CauchySeq.totallyBounded_range /-\n/-- Every Cauchy sequence over `ℕ` is totally bounded. -/\ntheorem CauchySeq.totallyBounded_range {s : ℕ → α} (hs : CauchySeq s) : TotallyBounded (range s) :=\n  by\n  refine' totallyBounded_iff_subset.2 fun a ha => _\n  cases' cauchySeq_iff.1 hs a ha with n hn\n  refine' ⟨«expr '' » s { k | k ≤ n }, image_subset_range _ _, (finite_le_nat _).image _, _⟩\n  rw [range_subset_iff, bUnion_image]\n  intro m\n  rw [mem_Union₂]\n  cases' le_total m n with hm hm\n  exacts[⟨m, hm, refl_mem_uniformity ha⟩, ⟨n, le_refl n, hn m hm n le_rfl⟩]\n#align cauchy_seq.totally_bounded_range CauchySeq.totallyBounded_range\n-/\n\n",
 "totallyBounded_of_forall_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print totallyBounded_of_forall_symm /-\ntheorem totallyBounded_of_forall_symm {s : Set α}\n    (h :\n      ∀ V ∈ (uniformity) α,\n        SymmetricRel V →\n          ∃ t : Set α,\n            Set.Finite t ∧\n              s ⊆\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (ball y V)) :\n    TotallyBounded s :=\n  UniformSpace.hasBasis_symmetric.totally_bounded_iff.2 fun V hV => by\n    simpa only [ball_eq_of_symmetry hV.2] using h V hV.1 hV.2\n#align totally_bounded_of_forall_symm totallyBounded_of_forall_symm\n-/\n\n",
 "totallyBounded_iff_ultrafilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n#print totallyBounded_iff_ultrafilter /-\ntheorem totallyBounded_iff_ultrafilter {s : Set α} :\n    TotallyBounded s ↔ ∀ f : Ultrafilter α, ↑f ≤ (filter.principal) s → Cauchy (f : Filter α) :=\n  by\n  refine' ⟨fun hs f => f.cauchy_of_totally_bounded hs, fun H => totallyBounded_iff_filter.2 _⟩\n  intro f hf hfs\n  exact ⟨Ultrafilter.of f, Ultrafilter.of_le f, H _ ((Ultrafilter.of_le f).trans hfs)⟩\n#align totally_bounded_iff_ultrafilter totallyBounded_iff_ultrafilter\n-/\n\n",
 "totallyBounded_iff_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t «expr ⊆ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print totallyBounded_iff_subset /-\ntheorem totallyBounded_iff_subset {s : Set α} :\n    TotallyBounded s ↔\n      ∀ d ∈ (uniformity) α,\n        ∃ (t : _)(_ : t ⊆ s),\n          Set.Finite t ∧\n            s ⊆\n              «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                { x | (x, y) ∈ d } :=\n  ⟨fun H d hd => H.exists_subset hd, fun H d hd =>\n    let ⟨t, _, ht⟩ := H d hd\n    ⟨t, ht⟩⟩\n#align totally_bounded_iff_subset totallyBounded_iff_subset\n-/\n\n",
 "totallyBounded_iff_filter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n#print totallyBounded_iff_filter /-\ntheorem totallyBounded_iff_filter {s : Set α} :\n    TotallyBounded s ↔ ∀ f, NeBot f → f ≤ (filter.principal) s → ∃ c ≤ f, Cauchy c :=\n  by\n  constructor\n  · intro H f hf hfs\n    exact\n      ⟨Ultrafilter.of f, Ultrafilter.of_le f,\n        (Ultrafilter.of f).cauchy_of_totally_bounded H ((Ultrafilter.of_le f).trans hfs)⟩\n  · intro H d hd\n    contrapose! H with hd_cover\n    set f :=\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        ((filter.principal)\n          (s \\\n            «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n              { x | (x, y) ∈ d }))\n    have : ne_bot f := by\n      refine' infi_ne_bot_of_directed' (directed_of_sup _) _\n      · intro t₁ t₂ h\n        exact principal_mono.2 (diff_subset_diff_right <| bUnion_subset_bUnion_left h)\n      · intro t\n        simpa [nonempty_diff] using hd_cover t t.finite_to_set\n    have : f ≤ (filter.principal) s := infᵢ_le_of_le ∅ (by simp)\n    refine' ⟨f, ‹_›, ‹_›, fun c hcf hc => _⟩\n    rcases mem_prod_same_iff.1 (hc.2 hd) with ⟨m, hm, hmd⟩\n    have : m ∩ s ∈ c := inter_mem hm (le_principal_iff.mp (hcf.trans ‹_›))\n    rcases hc.1.nonempty_of_mem this with ⟨y, hym, hys⟩\n    set ys :=\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        { x | (x, y') ∈ d }\n    have : m ⊆ ys := by simpa [ys] using fun x hx => hmd (mk_mem_prod hx hym)\n    have : c ≤ (filter.principal) (s \\ ys) := hcf.trans (infᵢ_le_of_le {y} le_rfl)\n    refine' hc.1.ne (empty_mem_iff_bot.mp _)\n    filter_upwards [le_principal_iff.1 this, hm]\n    refine' fun x hx hxm => hx.2 _\n    simpa [ys] using hmd (mk_mem_prod hxm hym)\n#align totally_bounded_iff_filter totallyBounded_iff_filter\n-/\n\n",
 "totallyBounded_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print Filter.HasBasis.totallyBounded_iff /-\ntheorem Filter.HasBasis.totallyBounded_iff {ι} {p : ι → Prop} {U : ι → Set (α × α)} (H : ((uniformity) α).has_basis p U)\n    {s : Set α} :\n    TotallyBounded s ↔\n      ∀ i,\n        p i →\n          ∃ t : Set α,\n            Set.Finite t ∧\n              s ⊆\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  { x | (x, y) ∈ U i } :=\n  H.forall_iff fun U V hUV h => h.imp fun t ht => ⟨ht.1, ht.2.trans <| unionᵢ₂_mono fun x hx y hy => hUV hy⟩\n#align filter.has_basis.totally_bounded_iff Filter.HasBasis.totallyBounded_iff\n-/\n\n",
 "totallyBounded_empty":
 "#print totallyBounded_empty /-\ntheorem totallyBounded_empty : TotallyBounded (∅ : Set α) := fun d hd => ⟨∅, finite_empty, empty_subset _⟩\n#align totally_bounded_empty totallyBounded_empty\n-/\n\n",
 "totallyBounded":
 "#print IsCompact.totallyBounded /-\nprotected theorem IsCompact.totallyBounded {s : Set α} (h : IsCompact s) : TotallyBounded s :=\n  (isCompact_iff_totallyBounded_isComplete.1 h).1\n#align is_compact.totally_bounded IsCompact.totallyBounded\n-/\n\n",
 "tendsto_uniformity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print CauchySeq.tendsto_uniformity /-\ntheorem CauchySeq.tendsto_uniformity [SemilatticeSup β] {u : β → α} (h : CauchySeq u) :\n    Tendsto (prod.map u u) atTop ((uniformity) α) := by\n  simpa only [tendsto, prod_map_map_eq', prod_at_top_at_top_eq] using h.right\n#align cauchy_seq.tendsto_uniformity CauchySeq.tendsto_uniformity\n-/\n\n",
 "tendsto_nhds_of_cauchySeq_of_subseq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print tendsto_nhds_of_cauchySeq_of_subseq /-\n/-- If a Cauchy sequence has a convergent subsequence, then it converges. -/\ntheorem tendsto_nhds_of_cauchySeq_of_subseq [SemilatticeSup β] {u : β → α} (hu : CauchySeq u) {ι : Type _} {f : ι → β}\n    {p : Filter ι} [NeBot p] (hf : Tendsto f p atTop) {a : α} (ha : Tendsto (u ∘ f) p ((nhds) a)) :\n    Tendsto u atTop ((nhds) a) :=\n  le_nhds_of_cauchy_adhp hu (mapClusterPt_of_comp hf ha)\n#align tendsto_nhds_of_cauchy_seq_of_subseq tendsto_nhds_of_cauchySeq_of_subseq\n-/\n\n",
 "tendsto_limUnder":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print CauchySeq.tendsto_limUnder /-\ntheorem CauchySeq.tendsto_limUnder [SemilatticeSup β] [CompleteSpace α] [Nonempty α] {u : β → α} (h : CauchySeq u) :\n    Tendsto u atTop (nhds <| limUnder atTop u) :=\n  h.le_nhds_Lim\n#align cauchy_seq.tendsto_lim CauchySeq.tendsto_limUnder\n-/\n\n",
 "subseq_subseq_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print CauchySeq.subseq_subseq_mem /-\ntheorem CauchySeq.subseq_subseq_mem {V : ℕ → Set (α × α)} (hV : ∀ n, V n ∈ (uniformity) α) {u : ℕ → α}\n    (hu : CauchySeq u) {f g : ℕ → ℕ} (hf : Tendsto f atTop atTop) (hg : Tendsto g atTop atTop) :\n    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, ((u ∘ f ∘ φ) n, (u ∘ g ∘ φ) n) ∈ V n :=\n  by\n  rw [cauchySeq_iff_tendsto] at hu\n  exact ((hu.comp <| hf.prod_at_top hg).comp tendsto_at_top_diagonal).subseq_mem hV\n#align cauchy_seq.subseq_subseq_mem CauchySeq.subseq_subseq_mem\n-/\n\n",
 "subseq_mem_entourage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.subseq_mem_entourage /-\ntheorem Filter.Tendsto.subseq_mem_entourage {V : ℕ → Set (α × α)} (hV : ∀ n, V n ∈ (uniformity) α) {u : ℕ → α} {a : α}\n    (hu : Tendsto u atTop ((nhds) a)) :\n    ∃ φ : ℕ → ℕ, StrictMono φ ∧ (u (φ 0), a) ∈ V 0 ∧ ∀ n, (u <| φ (n + 1), u <| φ n) ∈ V (n + 1) :=\n  by\n  rcases mem_at_top_sets.1 (hu (ball_mem_nhds a (symm_le_uniformity <| hV 0))) with ⟨n, hn⟩\n  rcases(hu.comp (tendsto_add_at_top_nat n)).cauchy_seq.subseq_mem fun n => hV (n + 1) with ⟨φ, φ_mono, hφV⟩\n  exact ⟨fun k => φ k + n, φ_mono.add_const _, hn _ le_add_self, hφV⟩\n#align filter.tendsto.subseq_mem_entourage Filter.Tendsto.subseq_mem_entourage\n-/\n\n",
 "subseq_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print CauchySeq.subseq_mem /-\ntheorem CauchySeq.subseq_mem {V : ℕ → Set (α × α)} (hV : ∀ n, V n ∈ (uniformity) α) {u : ℕ → α} (hu : CauchySeq u) :\n    ∃ φ : ℕ → ℕ, StrictMono φ ∧ ∀ n, (u <| φ (n + 1), u <| φ n) ∈ V n :=\n  by\n  have : ∀ n, ∃ N, ∀ k ≥ N, ∀ l ≥ k, (u l, u k) ∈ V n := by\n    intro n\n    rw [cauchySeq_iff] at hu\n    rcases hu _ (hV n) with ⟨N, H⟩\n    exact ⟨N, fun k hk l hl => H _ (le_trans hk hl) _ hk⟩\n  obtain ⟨φ : ℕ → ℕ, φ_extr : StrictMono φ, hφ : ∀ n, ∀ l ≥ φ n, (u l, u <| φ n) ∈ V n⟩ :=\n    extraction_forall_of_eventually' this\n  exact ⟨φ, φ_extr, fun n => hφ _ _ (φ_extr <| lt_add_one n).le⟩\n#align cauchy_seq.subseq_mem CauchySeq.subseq_mem\n-/\n\n",
 "set_seq_sub_aux":
 "theorem set_seq_sub_aux (n : ℕ) : setSeq hf U_mem n ⊆ setSeqAux hf U_mem n :=\n  binterᵢ_subset_of_mem right_mem_Iic\n#align set_seq_sub_aux set_seq_sub_aux\n\n",
 "set_seq_prod_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\ntheorem set_seq_prod_subset {N m n} (hm : N ≤ m) (hn : N ≤ n) :\n    lower_set.prod (setSeq hf U_mem m) (setSeq hf U_mem n) ⊆ U N :=\n  by\n  intro p hp\n  refine' (set_seq_aux hf U_mem N).2.snd ⟨_, _⟩ <;> apply set_seq_sub_aux\n  exact set_seq_mono hf U_mem hm hp.1\n  exact set_seq_mono hf U_mem hn hp.2\n#align set_seq_prod_subset set_seq_prod_subset\n\n",
 "set_seq_mono":
 "theorem set_seq_mono ⦃m n : ℕ⦄ (h : m ≤ n) : setSeq hf U_mem n ⊆ setSeq hf U_mem m :=\n  binterᵢ_subset_binterᵢ_left fun k hk => le_trans hk h\n#align set_seq_mono set_seq_mono\n\n",
 "set_seq_mem":
 "theorem set_seq_mem (n : ℕ) : setSeq hf U_mem n ∈ f :=\n  (binterᵢ_mem (finite_le_nat n)).2 fun m _ => (setSeqAux hf U_mem m).2.fst\n#align set_seq_mem set_seq_mem\n\n",
 "seq_pair_mem":
 "theorem seq_pair_mem ⦃N m n : ℕ⦄ (hm : N ≤ m) (hn : N ≤ n) : (seq hf U_mem m, seq hf U_mem n) ∈ U N :=\n  setSeq_prod_subset hf U_mem hm hn ⟨seq_mem hf U_mem m, seq_mem hf U_mem n⟩\n#align seq_pair_mem seq_pair_mem\n\n",
 "seq_mem":
 "theorem seq_mem (n : ℕ) : seq hf U_mem n ∈ setSeq hf U_mem n :=\n  choose_spec <| hf.1.nonempty_of_mem (setSeq_mem hf U_mem n)\n#align seq_mem seq_mem\n\n",
 "seq_is_cauchy_seq":
 "theorem seq_is_cauchy_seq : CauchySeq <| seq hf U_mem :=\n  cauchySeq_of_controlled U U_le <| seq_pair_mem hf U_mem\n#align seq_is_cauchy_seq seq_is_cauchy_seq\n\n",
 "second_countable_of_separable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/-- A separable uniform space with countably generated uniformity filter is second countable:\none obtains a countable basis by taking the balls centered at points in a dense subset,\nand with rational \"radii\" from a countable open symmetric antitone basis of `𝓤 α`. We do not\nregister this as an instance, as there is already an instance going in the other direction\nfrom second countable spaces to separable spaces, and we want to avoid loops. -/\ntheorem second_countable_of_separable [SeparableSpace α] : SecondCountableTopology α :=\n  by\n  rcases exists_countable_dense α with ⟨s, hsc, hsd⟩\n  obtain\n    ⟨t : ℕ → Set (α × α), hto : ∀ i : ℕ, t i ∈ ((uniformity) α).sets ∧ IsOpen (t i) ∧ SymmetricRel (t i), h_basis :\n      ((uniformity) α).has_antitone_basis t⟩ :=\n    (@uniformity_hasBasis_open_symmetric α _).exists_antitone_subbasis\n  choose ht_mem hto hts using hto\n  refine'\n    ⟨⟨«expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          (range fun k => ball x (t k)),\n        hsc.bUnion fun x hx => countable_range _, _⟩⟩\n  refine' (is_topological_basis_of_open_of_nhds _ _).eq_generate_from\n  · simp only [mem_Union₂, mem_range]\n    rintro _ ⟨x, hxs, k, rfl⟩\n    exact is_open_ball x (hto k)\n  · intro x V hxV hVo\n    simp only [mem_Union₂, mem_range, exists_prop]\n    rcases UniformSpace.mem_nhds_iff.1 (IsOpen.mem_nhds hVo hxV) with ⟨U, hU, hUV⟩\n    rcases comp_symm_of_uniformity hU with ⟨U', hU', hsymm, hUU'⟩\n    rcases h_basis.to_has_basis.mem_iff.1 hU' with ⟨k, -, hk⟩\n    rcases hsd.inter_open_nonempty (ball x <| t k) (is_open_ball x (hto k))\n        ⟨x, UniformSpace.mem_ball_self _ (ht_mem k)⟩ with\n      ⟨y, hxy, hys⟩\n    refine' ⟨_, ⟨y, hys, k, rfl⟩, (hts k).subset hxy, fun z hz => _⟩\n    exact hUV (ball_subset_of_comp_subset (hk hxy) hUU' (hk hz))\n#align second_countable_of_separable second_countable_of_separable\n\n",
 "prod_map":
 "#print CauchySeq.prod_map /-\ntheorem CauchySeq.prod_map {γ δ} [UniformSpace β] [SemilatticeSup γ] [SemilatticeSup δ] {u : γ → α} {v : δ → β}\n    (hu : CauchySeq u) (hv : CauchySeq v) : CauchySeq (prod.map u v) := by\n  simpa only [CauchySeq, prod_map_map_eq', prod_at_top_at_top_eq] using hu.prod hv\n#align cauchy_seq.prod_map CauchySeq.prod_map\n-/\n\n",
 "prod":
 "#print CauchySeq.prod /-\ntheorem CauchySeq.prod {γ} [UniformSpace β] [SemilatticeSup γ] {u : γ → α} {v : γ → β} (hu : CauchySeq u)\n    (hv : CauchySeq v) : CauchySeq fun x => (u x, v x) :=\n  haveI := hu.nonempty\n  (hu.prod hv).mono (tendsto.prod_mk le_rfl le_rfl)\n#align cauchy_seq.prod CauchySeq.prod\n-/\n\n",
 "nonempty":
 "#print CauchySeq.nonempty /-\ntheorem CauchySeq.nonempty [SemilatticeSup β] {u : β → α} (hu : CauchySeq u) : Nonempty β :=\n  @nonempty_of_neBot _ _ <| (map_neBot_iff _).1 hu.1\n#align cauchy_seq.nonempty CauchySeq.nonempty\n-/\n\n",
 "mono'":
 "#print Cauchy.mono' /-\ntheorem Cauchy.mono' {f g : Filter α} (h_c : Cauchy f) (hg : NeBot g) (h_le : g ≤ f) : Cauchy g :=\n  h_c.mono h_le\n#align cauchy.mono' Cauchy.mono'\n-/\n\n",
 "mono":
 "#print Cauchy.mono /-\ntheorem Cauchy.mono {f g : Filter α} [hg : NeBot g] (h_c : Cauchy f) (h_le : g ≤ f) : Cauchy g :=\n  ⟨hg, le_trans (Filter.prod_mono h_le h_le) h_c.right⟩\n#align cauchy.mono Cauchy.mono\n-/\n\n",
 "mem_entourage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print CauchySeq.mem_entourage /-\ntheorem CauchySeq.mem_entourage {β : Type _} [SemilatticeSup β] {u : β → α} (h : CauchySeq u) {V : Set (α × α)}\n    (hV : V ∈ (uniformity) α) : ∃ k₀, ∀ i j, k₀ ≤ i → k₀ ≤ j → (u i, u j) ∈ V :=\n  by\n  haveI := h.nonempty\n  have := h.tendsto_uniformity; rw [← prod_at_top_at_top_eq] at this\n  simpa [maps_to] using at_top_basis.prod_self.tendsto_left_iff.1 this V hV\n#align cauchy_seq.mem_entourage CauchySeq.mem_entourage\n-/\n\n",
 "map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n#print Cauchy.map /-\ntheorem Cauchy.map [UniformSpace β] {f : Filter α} {m : α → β} (hf : Cauchy f) (hm : UniformContinuous m) :\n    Cauchy (map m f) :=\n  ⟨hf.1.map _,\n    calc\n      filter.prod (map m f) (map m f) = map (fun p : α × α => (m p.1, m p.2)) (filter.prod f f) :=\n        Filter.prod_map_map_eq\n      _ ≤ map (fun p : α × α => (m p.1, m p.2)) ((uniformity) α) := (map_mono hf.right)\n      _ ≤ (uniformity) β := hm\n      ⟩\n#align cauchy.map Cauchy.map\n-/\n\n",
 "le_nhds_of_seq_tendsto_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If the sequence `sequentially_complete.seq` converges to `a`, then `f ≤ 𝓝 a`. -/\ntheorem le_nhds_of_seq_tendsto_nhds ⦃a : α⦄ (ha : Tendsto (seq hf U_mem) atTop ((nhds) a)) : f ≤ (nhds) a :=\n  le_nhds_of_cauchy_adhp_aux\n    (by\n      intro s hs\n      rcases U_le s hs with ⟨m, hm⟩\n      rcases tendsto_at_top'.1 ha _ (mem_nhds_left a (U_mem m)) with ⟨n, hn⟩\n      refine' ⟨set_seq hf U_mem (max m n), set_seq_mem hf U_mem _, _, seq hf U_mem (max m n), _, seq_mem hf U_mem _⟩\n      · have := le_max_left m n\n        exact Set.Subset.trans (set_seq_prod_subset hf U_mem this this) hm\n      · exact hm (hn _ <| le_max_right m n))\n#align le_nhds_of_seq_tendsto_nhds le_nhds_of_seq_tendsto_nhds\n\n",
 "le_nhds_of_cauchy_adhp_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print le_nhds_of_cauchy_adhp_aux /-\n/-- The common part of the proofs of `le_nhds_of_cauchy_adhp` and\n`sequentially_complete.le_nhds_of_seq_tendsto_nhds`: if for any entourage `s`\none can choose a set `t ∈ f` of diameter `s` such that it contains a point `y`\nwith `(x, y) ∈ s`, then `f` converges to `x`. -/\ntheorem le_nhds_of_cauchy_adhp_aux {f : Filter α} {x : α}\n    (adhs : ∀ s ∈ (uniformity) α, ∃ t ∈ f, lower_set.prod t t ⊆ s ∧ ∃ y, (x, y) ∈ s ∧ y ∈ t) : f ≤ (nhds) x :=\n  by\n  -- Consider a neighborhood `s` of `x`\n  intro s hs\n  -- Take an entourage twice smaller than `s`\n  rcases comp_mem_uniformity_sets (mem_nhds_uniformity_iff_right.1 hs) with ⟨U, U_mem, hU⟩\n  -- Take a set `t ∈ f`, `t × t ⊆ U`, and a point `y ∈ t` such that `(x, y) ∈ U`\n  rcases adhs U U_mem with ⟨t, t_mem, ht, y, hxy, hy⟩\n  apply mem_of_superset t_mem\n  -- Given a point `z ∈ t`, we have `(x, y) ∈ U` and `(y, z) ∈ t × t ⊆ U`, hence `z ∈ s`\n  exact fun z hz => hU (prod_mk_mem_compRel hxy (ht <| mk_mem_prod hy hz)) rfl\n#align le_nhds_of_cauchy_adhp_aux le_nhds_of_cauchy_adhp_aux\n-/\n\n",
 "le_nhds_of_cauchy_adhp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print le_nhds_of_cauchy_adhp /-\n/-- If `x` is an adherent (cluster) point for a Cauchy filter `f`, then it is a limit point\nfor `f`. -/\ntheorem le_nhds_of_cauchy_adhp {f : Filter α} {x : α} (hf : Cauchy f) (adhs : ClusterPt x f) : f ≤ (nhds) x :=\n  le_nhds_of_cauchy_adhp_aux\n    (by\n      intro s hs\n      obtain ⟨t, t_mem, ht⟩ : ∃ t ∈ f, lower_set.prod t t ⊆ s\n      exact (cauchy_iff.1 hf).2 s hs\n      use t, t_mem, ht\n      exact forall_mem_nonempty_iff_ne_bot.2 adhs _ (inter_mem_inf (mem_nhds_left x hs) t_mem))\n#align le_nhds_of_cauchy_adhp le_nhds_of_cauchy_adhp\n-/\n\n",
 "le_nhds_lim":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Cauchy.le_nhds_lim /-\ntheorem Cauchy.le_nhds_lim [CompleteSpace α] [Nonempty α] {f : Filter α} (hf : Cauchy f) : f ≤ (nhds) (lim f) :=\n  le_nhds_lim (complete_space.complete hf)\n#align cauchy.le_nhds_Lim Cauchy.le_nhds_lim\n-/\n\n",
 "le_nhds_iff_adhp_of_cauchy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print le_nhds_iff_adhp_of_cauchy /-\ntheorem le_nhds_iff_adhp_of_cauchy {f : Filter α} {x : α} (hf : Cauchy f) : f ≤ (nhds) x ↔ ClusterPt x f :=\n  ⟨fun h => ClusterPt.of_le_nhds' h hf.1, le_nhds_of_cauchy_adhp hf⟩\n#align le_nhds_iff_adhp_of_cauchy le_nhds_iff_adhp_of_cauchy\n-/\n\n",
 "isComplete_unionᵢ_separated":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t «expr ⊆ » S) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print isComplete_unionᵢ_separated /-\ntheorem isComplete_unionᵢ_separated {ι : Sort _} {s : ι → Set α} (hs : ∀ i, IsComplete (s i)) {U : Set (α × α)}\n    (hU : U ∈ (uniformity) α) (hd : ∀ (i j : ι), ∀ x ∈ s i, ∀ y ∈ s j, (x, y) ∈ U → i = j) :\n    IsComplete\n      («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)) :=\n  by\n  set S := «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (s i)\n  intro l hl hls\n  rw [le_principal_iff] at hls\n  cases' cauchy_iff.1 hl with hl_ne hl'\n  obtain ⟨t, htS, htl, htU⟩ : ∃ (t : _)(_ : t ⊆ S), t ∈ l ∧ lower_set.prod t t ⊆ U :=\n    by\n    rcases hl' U hU with ⟨t, htl, htU⟩\n    exact\n      ⟨t ∩ S, inter_subset_right _ _, inter_mem htl hls,\n        (Set.prod_mono (inter_subset_left _ _) (inter_subset_left _ _)).trans htU⟩\n  obtain ⟨i, hi⟩ : ∃ i, t ⊆ s i := by\n    rcases Filter.nonempty_of_mem htl with ⟨x, hx⟩\n    rcases mem_Union.1 (htS hx) with ⟨i, hi⟩\n    refine' ⟨i, fun y hy => _⟩\n    rcases mem_Union.1 (htS hy) with ⟨j, hj⟩\n    convert hj\n    exact hd i j x hi y hj (htU <| mk_mem_prod hx hy)\n  rcases hs i l hl (le_principal_iff.2 <| mem_of_superset htl hi) with ⟨x, hxs, hlx⟩\n  exact ⟨x, mem_Union.2 ⟨i, hxs⟩, hlx⟩\n#align is_complete_Union_separated isComplete_unionᵢ_separated\n-/\n\n",
 "isComplete_iff_ultrafilter'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print isComplete_iff_ultrafilter' /-\ntheorem isComplete_iff_ultrafilter' {s : Set α} :\n    IsComplete s ↔ ∀ l : Ultrafilter α, Cauchy (l : Filter α) → s ∈ l → ∃ x ∈ s, ↑l ≤ (nhds) x :=\n  isComplete_iff_ultrafilter.trans <| by simp only [le_principal_iff, Ultrafilter.mem_coe]\n#align is_complete_iff_ultrafilter' isComplete_iff_ultrafilter'\n-/\n\n",
 "isComplete_iff_ultrafilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print isComplete_iff_ultrafilter /-\ntheorem isComplete_iff_ultrafilter {s : Set α} :\n    IsComplete s ↔ ∀ l : Ultrafilter α, Cauchy (l : Filter α) → ↑l ≤ (filter.principal) s → ∃ x ∈ s, ↑l ≤ (nhds) x :=\n  by\n  refine' ⟨fun h l => h l, fun H => isComplete_iff_clusterPt.2 fun l hl hls => _⟩\n  haveI := hl.1\n  rcases H (Ultrafilter.of l) hl.ultrafilter_of ((Ultrafilter.of_le l).trans hls) with ⟨x, hxs, hxl⟩\n  exact ⟨x, hxs, (ClusterPt.of_le_nhds hxl).mono (Ultrafilter.of_le l)⟩\n#align is_complete_iff_ultrafilter isComplete_iff_ultrafilter\n-/\n\n",
 "isComplete_iff_clusterPt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n#print isComplete_iff_clusterPt /-\ntheorem isComplete_iff_clusterPt {s : Set α} :\n    IsComplete s ↔ ∀ l, Cauchy l → l ≤ (filter.principal) s → ∃ x ∈ s, ClusterPt x l :=\n  forall₃_congr fun l hl hls => exists₂_congr fun x hx => le_nhds_iff_adhp_of_cauchy hl\n#align is_complete_iff_cluster_pt isComplete_iff_clusterPt\n-/\n\n",
 "isComplete":
 "#print IsCompact.isComplete /-\nprotected theorem IsCompact.isComplete {s : Set α} (h : IsCompact s) : IsComplete s :=\n  (isCompact_iff_totallyBounded_isComplete.1 h).2\n#align is_compact.is_complete IsCompact.isComplete\n-/\n\n",
 "isCompact_of_totallyBounded_isClosed":
 "#print isCompact_of_totallyBounded_isClosed /-\n-- see Note [lower instance priority]\ntheorem isCompact_of_totallyBounded_isClosed [CompleteSpace α] {s : Set α} (ht : TotallyBounded s) (hc : IsClosed s) :\n    IsCompact s :=\n  (@isCompact_iff_totallyBounded_isComplete α _ s).2 ⟨ht, hc.is_complete⟩\n#align is_compact_of_totally_bounded_is_closed isCompact_of_totallyBounded_isClosed\n-/\n\n",
 "isCompact_iff_totallyBounded_isComplete":
 "#print isCompact_iff_totallyBounded_isComplete /-\ntheorem isCompact_iff_totallyBounded_isComplete {s : Set α} : IsCompact s ↔ TotallyBounded s ∧ IsComplete s :=\n  ⟨fun hs =>\n    ⟨totallyBounded_iff_ultrafilter.2 fun f hf =>\n        let ⟨x, xs, fx⟩ := isCompact_iff_ultrafilter_le_nhds.1 hs f hf\n        cauchy_nhds.mono fx,\n      fun f fc fs =>\n      let ⟨a, as, fa⟩ := @hs f fc.1 fs\n      ⟨a, as, le_nhds_of_cauchy_adhp fc fa⟩⟩,\n    fun ⟨ht, hc⟩ => isCompact_iff_ultrafilter_le_nhds.2 fun f hf => hc _ (totallyBounded_iff_ultrafilter.1 ht f hf) hf⟩\n#align is_compact_iff_totally_bounded_is_complete isCompact_iff_totallyBounded_isComplete\n-/\n\n",
 "image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print TotallyBounded.image /-\n/-- The image of a totally bounded set under a uniformly continuous map is totally bounded. -/\ntheorem TotallyBounded.image [UniformSpace β] {f : α → β} {s : Set α} (hs : TotallyBounded s)\n    (hf : UniformContinuous f) : TotallyBounded («expr '' » f s) := fun t ht =>\n  have : { p : α × α | (f p.1, f p.2) ∈ t } ∈ (uniformity) α := hf ht\n  let ⟨c, hfc, hct⟩ := hs _ this\n  ⟨«expr '' » f c, hfc.image f, by\n    simp [image_subset_iff]\n    simp [subset_def] at hct\n    intro x hx; simp\n    exact hct x hx⟩\n#align totally_bounded.image TotallyBounded.image\n-/\n\n",
 "exists_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t «expr ⊆ » s) -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n#print TotallyBounded.exists_subset /-\ntheorem TotallyBounded.exists_subset {s : Set α} (hs : TotallyBounded s) {U : Set (α × α)} (hU : U ∈ (uniformity) α) :\n    ∃ (t : _)(_ : t ⊆ s),\n      Set.Finite t ∧\n        s ⊆\n          «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            { x | (x, y) ∈ U } :=\n  by\n  rcases comp_symm_of_uniformity hU with ⟨r, hr, rs, rU⟩\n  rcases hs r hr with ⟨k, fk, ks⟩\n  let u := k ∩ { y | ∃ x ∈ s, (x, y) ∈ r }\n  choose hk f hfs hfr using fun x : u => x.coe_prop\n  refine' ⟨range f, _, _, _⟩\n  · exact range_subset_iff.2 hfs\n  · haveI : Fintype u := (fk.inter_of_left _).fintype\n    exact finite_range f\n  · intro x xs\n    obtain ⟨y, hy, xy⟩ : ∃ y ∈ k, (x, y) ∈ r\n    exact mem_Union₂.1 (ks xs)\n    rw [bUnion_range, mem_Union]\n    set z : «expr↥ » u := ⟨y, hy, ⟨x, xs, xy⟩⟩\n    exact ⟨z, rU <| mem_compRel.2 ⟨y, xy, rs (hfr z)⟩⟩\n#align totally_bounded.exists_subset TotallyBounded.exists_subset\n-/\n\n",
 "eventually_eventually":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᶠ in , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , » -/\n#print CauchySeq.eventually_eventually /-\ntheorem CauchySeq.eventually_eventually [SemilatticeSup β] {u : β → α} (hu : CauchySeq u) {V : Set (α × α)}\n    (hV : V ∈ (uniformity) α) :\n    «expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" atTop\n      («expr∀ᶠ in , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᶠ in , »\" atTop\n        ((u k, u l) ∈ V)) :=\n  eventually_atTop_curry <| hu.tendsto_uniformity hV\n#align cauchy_seq.eventually_eventually CauchySeq.eventually_eventually\n-/\n\n",
 "complete_univ":
 "#print complete_univ /-\ntheorem complete_univ {α : Type u} [UniformSpace α] [CompleteSpace α] : IsComplete (univ : Set α) :=\n  by\n  intro f hf _\n  rcases complete_space.complete hf with ⟨x, hx⟩\n  exact ⟨x, mem_univ x, hx⟩\n#align complete_univ complete_univ\n-/\n\n",
 "complete_of_convergent_controlled_sequences":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A uniform space is complete provided that (a) its uniformity filter has a countable basis;\n(b) any sequence satisfying a \"controlled\" version of the Cauchy condition converges. -/\ntheorem complete_of_convergent_controlled_sequences (U : ℕ → Set (α × α)) (U_mem : ∀ n, U n ∈ (uniformity) α)\n    (HU : ∀ u : ℕ → α, (∀ N m n, N ≤ m → N ≤ n → (u m, u n) ∈ U N) → ∃ a, Tendsto u atTop ((nhds) a)) :\n    CompleteSpace α := by\n  obtain ⟨U', U'_mono, hU'⟩ := ((uniformity) α).exists_antitone_seq\n  have Hmem : ∀ n, U n ∩ U' n ∈ (uniformity) α := fun n => inter_mem (U_mem n) (hU'.2 ⟨n, subset.refl _⟩)\n  refine' ⟨fun f hf => (HU (seq hf Hmem) fun N m n hm hn => _).imp <| le_nhds_of_seq_tendsto_nhds _ _ fun s hs => _⟩\n  · rcases hU'.1 hs with ⟨N, hN⟩\n    exact ⟨N, subset.trans (inter_subset_right _ _) hN⟩\n  · exact inter_subset_left _ _ (seq_pair_mem hf Hmem hm hn)\n#align complete_of_convergent_controlled_sequences complete_of_convergent_controlled_sequences\n\n",
 "complete_of_cauchy_seq_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- A sequentially complete uniform space with a countable basis of the uniformity filter is\ncomplete. -/\ntheorem complete_of_cauchy_seq_tendsto (H' : ∀ u : ℕ → α, CauchySeq u → ∃ a, Tendsto u atTop ((nhds) a)) :\n    CompleteSpace α :=\n  let ⟨U', U'_mono, hU'⟩ := ((uniformity) α).exists_antitone_seq\n  complete_of_convergent_controlled_sequences U' (fun n => hU'.2 ⟨n, Subset.refl _⟩) fun u hu =>\n    H' u <| cauchySeq_of_controlled U' (fun s hs => hU'.1 hs) hu\n#align complete_of_cauchy_seq_tendsto complete_of_cauchy_seq_tendsto\n\n",
 "completeSpace_of_isComplete_univ":
 "#print completeSpace_of_isComplete_univ /-\n/-- If `univ` is complete, the space is a complete space -/\ntheorem completeSpace_of_isComplete_univ (h : IsComplete (univ : Set α)) : CompleteSpace α :=\n  ⟨fun f hf =>\n    let ⟨x, _, hx⟩ := h f hf ((@principal_univ α).symm ▸ le_top)\n    ⟨x, hx⟩⟩\n#align complete_space_of_is_complete_univ completeSpace_of_isComplete_univ\n-/\n\n",
 "completeSpace_iff_ultrafilter":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print completeSpace_iff_ultrafilter /-\ntheorem completeSpace_iff_ultrafilter :\n    CompleteSpace α ↔ ∀ l : Ultrafilter α, Cauchy (l : Filter α) → ∃ x : α, ↑l ≤ (nhds) x := by\n  simp [completeSpace_iff_isComplete_univ, isComplete_iff_ultrafilter]\n#align complete_space_iff_ultrafilter completeSpace_iff_ultrafilter\n-/\n\n",
 "completeSpace_iff_isComplete_univ":
 "#print completeSpace_iff_isComplete_univ /-\ntheorem completeSpace_iff_isComplete_univ : CompleteSpace α ↔ IsComplete (univ : Set α) :=\n  ⟨@complete_univ α _, completeSpace_of_isComplete_univ⟩\n#align complete_space_iff_is_complete_univ completeSpace_iff_isComplete_univ\n-/\n\n",
 "comp_tendsto":
 "#print CauchySeq.comp_tendsto /-\ntheorem CauchySeq.comp_tendsto {γ} [SemilatticeSup β] [SemilatticeSup γ] [Nonempty γ] {f : β → α} (hf : CauchySeq f)\n    {g : γ → β} (hg : Tendsto g atTop atTop) : CauchySeq (f ∘ g) :=\n  cauchySeq_iff_tendsto.2 <| hf.tendsto_uniformity.comp (hg.prod_at_top hg)\n#align cauchy_seq.comp_tendsto CauchySeq.comp_tendsto\n-/\n\n",
 "comp_injective":
 "#print CauchySeq.comp_injective /-\ntheorem CauchySeq.comp_injective [SemilatticeSup β] [NoMaxOrder β] [Nonempty β] {u : ℕ → α} (hu : CauchySeq u)\n    {f : β → ℕ} (hf : injective f) : CauchySeq (u ∘ f) :=\n  hu.comp_tendsto <| Nat.cofinite_eq_atTop ▸ hf.tendsto_cofinite.mono_left atTop_le_cofinite\n#align cauchy_seq.comp_injective CauchySeq.comp_injective\n-/\n\n",
 "comp_cauchySeq":
 "#print UniformContinuous.comp_cauchySeq /-\ntheorem UniformContinuous.comp_cauchySeq {γ} [UniformSpace β] [SemilatticeSup γ] {f : α → β} (hf : UniformContinuous f)\n    {u : γ → α} (hu : CauchySeq u) : CauchySeq (f ∘ u) :=\n  hu.map hf\n#align uniform_continuous.comp_cauchy_seq UniformContinuous.comp_cauchySeq\n-/\n\n",
 "comap'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print Cauchy.comap' /-\ntheorem Cauchy.comap' [UniformSpace β] {f : Filter β} {m : α → β} (hf : Cauchy f)\n    (hm : comap (fun p : α × α => (m p.1, m p.2)) ((uniformity) β) ≤ (uniformity) α) (hb : NeBot (comap m f)) :\n    Cauchy (comap m f) :=\n  hf.comap hm\n#align cauchy.comap' Cauchy.comap'\n-/\n\n",
 "comap":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print Cauchy.comap /-\ntheorem Cauchy.comap [UniformSpace β] {f : Filter β} {m : α → β} (hf : Cauchy f)\n    (hm : comap (fun p : α × α => (m p.1, m p.2)) ((uniformity) β) ≤ (uniformity) α) [NeBot (comap m f)] :\n    Cauchy (comap m f) :=\n  ⟨‹_›,\n    calc\n      filter.prod (comap m f) (comap m f) = comap (fun p : α × α => (m p.1, m p.2)) (filter.prod f f) :=\n        Filter.prod_comap_comap_eq\n      _ ≤ comap (fun p : α × α => (m p.1, m p.2)) ((uniformity) β) := (comap_mono hf.right)\n      _ ≤ (uniformity) α := hm\n      ⟩\n#align cauchy.comap Cauchy.comap\n-/\n\n",
 "closure":
 "#print TotallyBounded.closure /-\n/-- The closure of a totally bounded set is totally bounded. -/\ntheorem TotallyBounded.closure {s : Set α} (h : TotallyBounded s) : TotallyBounded (closure s) :=\n  uniformity_hasBasis_closed.totally_bounded_iff.2 fun V hV =>\n    let ⟨t, htf, hst⟩ := h V hV.1\n    ⟨t, htf,\n      closure_minimal hst <| isClosed_bunionᵢ htf fun y hy => hV.2.preimage (continuous_id.prod_mk continuous_const)⟩\n#align totally_bounded.closure TotallyBounded.closure\n-/\n\n",
 "cauchy_pure":
 "#print cauchy_pure /-\ntheorem cauchy_pure {a : α} : Cauchy (pure a) :=\n  cauchy_nhds.mono (pure_le_nhds a)\n#align cauchy_pure cauchy_pure\n-/\n\n",
 "cauchy_of_totallyBounded":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n#print Ultrafilter.cauchy_of_totallyBounded /-\ntheorem Ultrafilter.cauchy_of_totallyBounded {s : Set α} (f : Ultrafilter α) (hs : TotallyBounded s)\n    (h : ↑f ≤ (filter.principal) s) : Cauchy (f : Filter α) :=\n  ⟨f.ne_bot', fun t ht =>\n    let ⟨t', ht'₁, ht'_symm, ht'_t⟩ := comp_symm_of_uniformity ht\n    let ⟨i, hi, hs_union⟩ := hs t' ht'₁\n    have :\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n          { x | (x, y) ∈ t' } ∈\n        f :=\n      mem_of_superset (le_principal_iff.mp h) hs_union\n    have : ∃ y ∈ i, { x | (x, y) ∈ t' } ∈ f := (Ultrafilter.finite_bunionᵢ_mem_iff hi).1 this\n    let ⟨y, hy, hif⟩ := this\n    have : lower_set.prod { x | (x, y) ∈ t' } { x | (x, y) ∈ t' } ⊆ compRel t' t' :=\n      fun ⟨x₁, x₂⟩ ⟨(h₁ : (x₁, y) ∈ t'), (h₂ : (x₂, y) ∈ t')⟩ => ⟨y, h₁, ht'_symm h₂⟩\n    mem_of_superset (prod_mem_prod hif hif) (Subset.trans this ht'_t)⟩\n#align ultrafilter.cauchy_of_totally_bounded Ultrafilter.cauchy_of_totallyBounded\n-/\n\n",
 "cauchy_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print cauchy_nhds /-\ntheorem cauchy_nhds {a : α} : Cauchy ((nhds) a) :=\n  ⟨nhds_neBot, nhds_prod_eq.symm.trans_le (nhds_le_uniformity a)⟩\n#align cauchy_nhds cauchy_nhds\n-/\n\n",
 "cauchy_map_iff_exists_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print cauchy_map_iff_exists_tendsto /-\ntheorem cauchy_map_iff_exists_tendsto [CompleteSpace α] {l : Filter β} {f : β → α} [NeBot l] :\n    Cauchy (l.map f) ↔ ∃ x, Tendsto f l ((nhds) x) :=\n  cauchy_iff_exists_le_nhds\n#align cauchy_map_iff_exists_tendsto cauchy_map_iff_exists_tendsto\n-/\n\n",
 "cauchy_map_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print cauchy_map_iff' /-\ntheorem cauchy_map_iff' {l : Filter β} [hl : NeBot l] {f : β → α} :\n    Cauchy (l.map f) ↔ Tendsto (fun p : β × β => (f p.1, f p.2)) (filter.prod l l) ((uniformity) α) :=\n  cauchy_map_iff.trans <| and_iff_right hl\n#align cauchy_map_iff' cauchy_map_iff'\n-/\n\n",
 "cauchy_map_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print cauchy_map_iff /-\ntheorem cauchy_map_iff {l : Filter β} {f : β → α} :\n    Cauchy (l.map f) ↔ NeBot l ∧ Tendsto (fun p : β × β => (f p.1, f p.2)) (filter.prod l l) ((uniformity) α) := by\n  rw [Cauchy, map_ne_bot_iff, prod_map_map_eq, tendsto]\n#align cauchy_map_iff cauchy_map_iff\n-/\n\n",
 "cauchy_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.cauchy_map /-\ntheorem Filter.Tendsto.cauchy_map {l : Filter β} [NeBot l] {f : β → α} {a : α} (h : Tendsto f l ((nhds) a)) :\n    Cauchy (map f l) :=\n  cauchy_nhds.mono h\n#align filter.tendsto.cauchy_map Filter.Tendsto.cauchy_map\n-/\n\n",
 "cauchy_iff_exists_le_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print cauchy_iff_exists_le_nhds /-\ntheorem cauchy_iff_exists_le_nhds [CompleteSpace α] {l : Filter α} [NeBot l] : Cauchy l ↔ ∃ x, l ≤ (nhds) x :=\n  ⟨complete_space.complete, fun ⟨x, hx⟩ => cauchy_nhds.mono hx⟩\n#align cauchy_iff_exists_le_nhds cauchy_iff_exists_le_nhds\n-/\n\n",
 "cauchy_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (x y «expr ∈ » t) -/\n#print cauchy_iff' /-\ntheorem cauchy_iff' {f : Filter α} :\n    Cauchy f ↔ NeBot f ∧ ∀ s ∈ (uniformity) α, ∃ t ∈ f, ∀ (x) (_ : x ∈ t) (y) (_ : y ∈ t), (x, y) ∈ s :=\n  ((uniformity) α).basis_sets.cauchy_iff\n#align cauchy_iff' cauchy_iff'\n-/\n\n",
 "cauchy_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n#print cauchy_iff /-\ntheorem cauchy_iff {f : Filter α} : Cauchy f ↔ NeBot f ∧ ∀ s ∈ (uniformity) α, ∃ t ∈ f, lower_set.prod t t ⊆ s :=\n  cauchy_iff'.trans <| by simp only [subset_def, Prod.forall, mem_prod_eq, and_imp, id, ball_mem_comm]\n#align cauchy_iff cauchy_iff\n-/\n\n",
 "cauchySeq_tendsto_of_isComplete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print cauchySeq_tendsto_of_isComplete /-\n/-- If `K` is a complete subset, then any cauchy sequence in `K` converges to a point in `K` -/\ntheorem cauchySeq_tendsto_of_isComplete [SemilatticeSup β] {K : Set α} (h₁ : IsComplete K) {u : β → α}\n    (h₂ : ∀ n, u n ∈ K) (h₃ : CauchySeq u) : ∃ v ∈ K, Tendsto u atTop ((nhds) v) :=\n  h₁ _ h₃ <|\n    le_principal_iff.2 <|\n      mem_map_iff_exists_image.2\n        ⟨univ, univ_mem, by\n          simp only [image_univ]\n          rintro _ ⟨n, rfl⟩\n          exact h₂ n⟩\n#align cauchy_seq_tendsto_of_is_complete cauchySeq_tendsto_of_isComplete\n-/\n\n",
 "cauchySeq_tendsto_of_complete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print cauchySeq_tendsto_of_complete /-\n/-- A Cauchy sequence in a complete space converges -/\ntheorem cauchySeq_tendsto_of_complete [SemilatticeSup β] [CompleteSpace α] {u : β → α} (H : CauchySeq u) :\n    ∃ x, Tendsto u atTop ((nhds) x) :=\n  complete_space.complete H\n#align cauchy_seq_tendsto_of_complete cauchySeq_tendsto_of_complete\n-/\n\n",
 "cauchySeq_of_controlled":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print cauchySeq_of_controlled /-\ntheorem cauchySeq_of_controlled [SemilatticeSup β] [Nonempty β] (U : β → Set (α × α))\n    (hU : ∀ s ∈ (uniformity) α, ∃ n, U n ⊆ s) {f : β → α} (hf : ∀ {N m n : β}, N ≤ m → N ≤ n → (f m, f n) ∈ U N) :\n    CauchySeq f :=\n  cauchySeq_iff_tendsto.2\n    (by\n      intro s hs\n      rw [mem_map, mem_at_top_sets]\n      cases' hU s hs with N hN\n      refine' ⟨(N, N), fun mn hmn => _⟩\n      cases' mn with m n\n      exact hN (hf hmn.1 hmn.2))\n#align cauchy_seq_of_controlled cauchySeq_of_controlled\n-/\n\n",
 "cauchySeq_iff_tendsto":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print cauchySeq_iff_tendsto /-\ntheorem cauchySeq_iff_tendsto [Nonempty β] [SemilatticeSup β] {u : β → α} :\n    CauchySeq u ↔ Tendsto (prod.map u u) atTop ((uniformity) α) :=\n  cauchy_map_iff'.trans <| by simp only [prod_at_top_at_top_eq, Prod.map_def]\n#align cauchy_seq_iff_tendsto cauchySeq_iff_tendsto\n-/\n\n",
 "cauchySeq_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n#print Filter.HasBasis.cauchySeq_iff' /-\ntheorem Filter.HasBasis.cauchySeq_iff' {γ} [Nonempty β] [SemilatticeSup β] {u : β → α} {p : γ → Prop}\n    {s : γ → Set (α × α)} (H : ((uniformity) α).has_basis p s) :\n    CauchySeq u ↔ ∀ i, p i → ∃ N, ∀ n ≥ N, (u n, u N) ∈ s i :=\n  by\n  refine' H.cauchy_seq_iff.trans ⟨fun h i hi => _, fun h i hi => _⟩\n  · exact (h i hi).imp fun N hN n hn => hN n hn N le_rfl\n  · rcases comp_symm_of_uniformity (H.mem_of_mem hi) with ⟨t, ht, ht', hts⟩\n    rcases H.mem_iff.1 ht with ⟨j, hj, hjt⟩\n    refine' (h j hj).imp fun N hN m hm n hn => hts ⟨u N, hjt _, ht' <| hjt _⟩\n    · exact hN m hm\n    · exact hN n hn\n#align filter.has_basis.cauchy_seq_iff' Filter.HasBasis.cauchySeq_iff'\n-/\n\n",
 "cauchySeq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (m n «expr ≥ » N) -/\n#print Filter.HasBasis.cauchySeq_iff /-\n-- see Note [nolint_ge]\n@[nolint ge_or_gt]\ntheorem Filter.HasBasis.cauchySeq_iff {γ} [Nonempty β] [SemilatticeSup β] {u : β → α} {p : γ → Prop}\n    {s : γ → Set (α × α)} (h : ((uniformity) α).has_basis p s) :\n    CauchySeq u ↔ ∀ i, p i → ∃ N, ∀ (m) (_ : m ≥ N) (n) (_ : n ≥ N), (u m, u n) ∈ s i :=\n  by\n  rw [cauchySeq_iff_tendsto, ← prod_at_top_at_top_eq]\n  refine' (at_top_basis.prod_self.tendsto_iff h).trans _\n  simp only [exists_prop, true_and_iff, maps_to, preimage, subset_def, Prod.forall, mem_prod_eq, mem_set_of_eq, mem_Ici,\n    and_imp, prod.map, ge_iff_le, @forall_swap (_ ≤ _) β]\n#align filter.has_basis.cauchy_seq_iff Filter.HasBasis.cauchySeq_iff\n-/\n\n",
 "cauchySeq_const":
 "#print cauchySeq_const /-\ntheorem cauchySeq_const [SemilatticeSup β] [Nonempty β] (x : α) : CauchySeq fun n : β => x :=\n  tendsto_const_nhds.cauchy_seq\n#align cauchy_seq_const cauchySeq_const\n-/\n\n",
 "cauchySeq_comp_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Function.Bijective.cauchySeq_comp_iff /-\ntheorem Function.Bijective.cauchySeq_comp_iff {f : ℕ → ℕ} (hf : bijective f) (u : ℕ → α) :\n    CauchySeq (u ∘ f) ↔ CauchySeq u :=\n  by\n  refine' ⟨fun H => _, fun H => H.comp_injective hf.injective⟩\n  lift f to «expr ≃ » ℕ ℕ using hf\n  simpa only [(· ∘ ·), f.apply_symm_apply] using H.comp_injective f.symm.injective\n#align function.bijective.cauchy_seq_comp_iff Function.Bijective.cauchySeq_comp_iff\n-/\n\n",
 "cauchySeq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n#print Filter.Tendsto.cauchySeq /-\ntheorem Filter.Tendsto.cauchySeq [SemilatticeSup β] [Nonempty β] {f : β → α} {x} (hx : Tendsto f atTop ((nhds) x)) :\n    CauchySeq f :=\n  hx.cauchy_map\n#align filter.tendsto.cauchy_seq Filter.Tendsto.cauchySeq\n-/\n\n"}