{"limit_is_sheaf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\ntheorem limit_is_sheaf [HasLimits C] {X : TopCat} (F : «expr ⥤ » J (presheaf.{v} C X)) (H : ∀ j, (F.obj j).is_sheaf) :\n    (limit F).is_sheaf :=\n  is_sheaf_of_is_limit F H (limit.isLimit F)\n#align limit_is_sheaf limit_is_sheaf\n\n",
 "is_sheaf_of_is_limit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⋙ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⥤ » -/\n/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem is_sheaf_of_is_limit [HasLimits C] {X : TopCat} (F : «expr ⥤ » J (presheaf.{v} C X))\n    (H : ∀ j, (F.obj j).is_sheaf) {c : Cone F} (hc : IsLimit c) : c.X.is_sheaf :=\n  by\n  let F' : «expr ⥤ » J (sheaf C X) :=\n    { obj := fun j => ⟨F.obj j, H j⟩\n      map := fun X Y f => ⟨F.map f⟩ }\n  let e : «expr ≅ » («expr ⋙ » F' (sheaf.forget C X)) F := nat_iso.of_components (fun _ => iso.refl _) (by tidy)\n  exact\n    presheaf.is_sheaf_of_iso\n      ((is_limit_of_preserves (sheaf.forget C X) (limit.is_limit F')).cone_points_iso_of_nat_iso hc e) (limit F').2\n#align is_sheaf_of_is_limit is_sheaf_of_is_limit\n\n"}