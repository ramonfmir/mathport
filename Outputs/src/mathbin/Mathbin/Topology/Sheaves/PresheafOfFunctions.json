{"presheaf_to_Types_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/-\nCopyright (c) 2019 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n@[simp]\ntheorem presheaf_to_Types_obj {T : X → Type v} {U : «expr ᵒᵖ» (opens X)} :\n    (presheaf_to_Types X T).obj U = ∀ x : unop U, T x :=\n  rfl\n#align presheaf_to_Types_obj presheaf_to_Types_obj\n\n",
 "presheaf_to_Types_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem presheaf_to_Types_map {T : X → Type v} {U V : «expr ᵒᵖ» (opens X)} {i : «expr ⟶ » U V} {f} :\n    (presheaf_to_Types X T).map i f = fun x => f (i.unop x) :=\n  rfl\n#align presheaf_to_Types_map presheaf_to_Types_map\n\n",
 "presheaf_to_Type_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n-- We don't just define this in terms of `presheaf_to_Types`,\n-- as it's helpful later to see (at a syntactic level) that `(presheaf_to_Type X T).obj U`\n-- is a non-dependent function.\n-- We don't use `@[simps]` to generate the projection lemmas here,\n-- as it turns out to be useful to have `presheaf_to_Type_map`\n-- written as an equality of functions (rather than being applied to some argument).\n@[simp]\ntheorem presheaf_to_Type_obj {T : Type v} {U : «expr ᵒᵖ» (opens X)} : (presheaf_to_Type X T).obj U = (unop U → T) :=\n  rfl\n#align presheaf_to_Type_obj presheaf_to_Type_obj\n\n",
 "presheaf_to_Type_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem presheaf_to_Type_map {T : Type v} {U V : «expr ᵒᵖ» (opens X)} {i : «expr ⟶ » U V} {f} :\n    (presheaf_to_Type X T).map i f = f ∘ i.unop :=\n  rfl\n#align presheaf_to_Type_map presheaf_to_Type_map\n\n",
 "presheaf_to_Top_obj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem presheaf_to_Top_obj (T : Top.{v}) (U : «expr ᵒᵖ» (opens X)) :\n    (presheaf_to_Top X T).obj U = «expr ⟶ » ((opens.to_Top X).obj (unop U)) T :=\n  rfl\n#align presheaf_to_Top_obj presheaf_to_Top_obj\n\n"}