{"is_sheaf_on_punit_of_is_terminal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem is_sheaf_on_punit_of_is_terminal (F : presheaf C (TopCat.of PUnit)) (it : IsTerminal <| F.obj <| op («expr⊥»)) :\n    F.is_sheaf :=\n  is_sheaf_of_is_terminal_of_indiscrete (@subsingleton.elim (TopologicalSpace PUnit) _ _ _) F it\n#align is_sheaf_on_punit_of_is_terminal is_sheaf_on_punit_of_is_terminal\n\n",
 "is_sheaf_on_punit_iff_is_terminal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem is_sheaf_on_punit_iff_is_terminal (F : presheaf C (TopCat.of PUnit)) :\n    F.is_sheaf ↔ Nonempty (IsTerminal <| F.obj <| op («expr⊥»)) :=\n  ⟨fun h => ⟨sheaf.is_terminal_of_empty ⟨F, h⟩⟩, fun ⟨it⟩ => is_sheaf_on_punit_of_is_terminal F it⟩\n#align is_sheaf_on_punit_iff_is_terminal is_sheaf_on_punit_iff_is_terminal\n\n",
 "is_sheaf_of_is_terminal_of_indiscrete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2022 Jujian Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jujian Zhang\n-/\ntheorem is_sheaf_of_is_terminal_of_indiscrete {X : TopCat.{w}} (hind : X.str = «expr⊤») (F : presheaf C X)\n    (it : IsTerminal <| F.obj <| op («expr⊥»)) : F.is_sheaf := fun c U s hs =>\n  by\n  obtain rfl | hne := eq_or_ne U («expr⊥»)\n  · intro _ _\n    rw [@exists_unique_iff_exists _ ⟨fun _ _ => _⟩]\n    · refine' ⟨it.from _, fun U hU hs => is_terminal.hom_ext _ _ _⟩\n      rwa [le_bot_iff.1 hU.le]\n    · apply it.hom_ext\n  · convert presieve.is_sheaf_for_top_sieve _\n    rw [← sieve.id_mem_iff_eq_top]\n    have := (U.eq_bot_or_top hind).resolve_left hne\n    subst this\n    obtain he | ⟨⟨x⟩⟩ := isEmpty_or_nonempty X\n    · exact (hne <| SetLike.ext'_iff.2 <| Set.univ_eq_empty_iff.2 he).elim\n    obtain ⟨U, f, hf, hm⟩ := hs x trivial\n    obtain rfl | rfl := U.eq_bot_or_top hind\n    · cases hm\n    · convert hf\n#align is_sheaf_of_is_terminal_of_indiscrete is_sheaf_of_is_terminal_of_indiscrete\n\n",
 "is_sheaf_iff_is_terminal_of_indiscrete":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem is_sheaf_iff_is_terminal_of_indiscrete {X : TopCat.{w}} (hind : X.str = «expr⊤») (F : presheaf C X) :\n    F.is_sheaf ↔ Nonempty (IsTerminal <| F.obj <| op («expr⊥»)) :=\n  ⟨fun h => ⟨sheaf.is_terminal_of_empty ⟨F, h⟩⟩, fun ⟨it⟩ => is_sheaf_of_is_terminal_of_indiscrete hind F it⟩\n#align is_sheaf_iff_is_terminal_of_indiscrete is_sheaf_iff_is_terminal_of_indiscrete\n\n"}