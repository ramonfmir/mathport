{"locally_surjective_iff_surjective_on_stalks":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- An equivalent condition for a map of presheaves to be locally surjective\nis for all the induced maps on stalks to be surjective. -/\ntheorem locally_surjective_iff_surjective_on_stalks (T : «expr ⟶ » ℱ 𝒢) :\n    is_locally_surjective T ↔ ∀ x : X, function.surjective ((stalk_functor C x).map T) :=\n  by\n  constructor <;> intro hT\n  · /- human proof:\n        Let g ∈ Γₛₜ 𝒢 x be a germ. Represent it on an open set U ⊆ X\n        as ⟨t, U⟩. By local surjectivity, pass to a smaller open set V\n        on which there exists s ∈ Γ_ ℱ V mapping to t |_ V.\n        Then the germ of s maps to g -/\n    -- Let g ∈ Γₛₜ 𝒢 x be a germ.\n    intro x g\n    -- Represent it on an open set U ⊆ X as ⟨t, U⟩.\n    obtain ⟨U, hxU, t, rfl⟩ := 𝒢.germ_exist x g\n    -- By local surjectivity, pass to a smaller open set V\n    -- on which there exists s ∈ Γ_ ℱ V mapping to t |_ V.\n    rcases hT U t x hxU with ⟨V, ι, ⟨s, h_eq⟩, hxV⟩\n    -- Then the germ of s maps to g.\n    use ℱ.germ ⟨x, hxV⟩ s\n    convert stalk_functor_map_germ_apply V ⟨x, hxV⟩ T s\n    simpa [h_eq] using germ_res_apply 𝒢 ι ⟨x, hxV⟩ t\n  · /- human proof:\n        Let U be an open set, t ∈ Γ ℱ U a section, x ∈ U a point.\n        By surjectivity on stalks, the germ of t is the image of\n        some germ f ∈ Γₛₜ ℱ x. Represent f on some open set V ⊆ X as ⟨s, V⟩.\n        Then there is some possibly smaller open set x ∈ W ⊆ V ∩ U on which\n        we have T(s) |_ W = t |_ W. -/\n    intro U t x hxU\n    set t_x := 𝒢.germ ⟨x, hxU⟩ t with ht_x\n    obtain ⟨s_x, hs_x : ((stalk_functor C x).map T) s_x = t_x⟩ := hT x t_x\n    obtain ⟨V, hxV, s, rfl⟩ := ℱ.germ_exist x s_x\n    -- rfl : ℱ.germ x s = s_x\n    have key_W :=\n      𝒢.germ_eq x hxV hxU (T.app _ s) t\n        (by\n          convert hs_x\n          symm\n          convert stalk_functor_map_germ_apply _ _ _ s)\n    obtain ⟨W, hxW, hWV, hWU, h_eq⟩ := key_W\n    refine' ⟨W, hWU, ⟨ℱ.map hWV.op s, _⟩, hxW⟩\n    convert h_eq\n    simp only [← comp_apply, T.naturality]\n#align locally_surjective_iff_surjective_on_stalks locally_surjective_iff_surjective_on_stalks\n\n",
 "is_locally_surjective_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr |_ₕ » -/\n/-\nCopyright (c) 2022 Sam van Gool and Jake Levinson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sam van Gool, Jake Levinson\n-/\ntheorem is_locally_surjective_iff (T : «expr ⟶ » ℱ 𝒢) :\n    is_locally_surjective T ↔\n      ∀ (U t), ∀ x ∈ U, ∃ (V : _)(ι : «expr ⟶ » V U), (∃ s, T.app _ s = «expr |_ₕ » t ι) ∧ x ∈ V :=\n  iff.rfl\n#align is_locally_surjective_iff is_locally_surjective_iff\n\n"}