{"continuousAt_sign_of_pos":
 "#print continuousAt_sign_of_pos /-\n/-\nCopyright (c) 2022 Joseph Myers. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joseph Myers\n-/\ntheorem continuousAt_sign_of_pos {a : α} (h : 0 < a) : ContinuousAt SignType.sign a :=\n  by\n  refine' (continuousAt_const : ContinuousAt (fun x => (1 : SignType)) a).congr _\n  rw [Filter.EventuallyEq, eventually_nhds_iff]\n  exact ⟨{ x | 0 < x }, fun x hx => (sign_pos hx).symm, isOpen_lt' 0, h⟩\n#align continuous_at_sign_of_pos continuousAt_sign_of_pos\n-/\n\n",
 "continuousAt_sign_of_neg":
 "#print continuousAt_sign_of_neg /-\ntheorem continuousAt_sign_of_neg {a : α} (h : a < 0) : ContinuousAt SignType.sign a :=\n  by\n  refine' (continuousAt_const : ContinuousAt (fun x => (-1 : SignType)) a).congr _\n  rw [Filter.EventuallyEq, eventually_nhds_iff]\n  exact ⟨{ x | x < 0 }, fun x hx => (sign_neg hx).symm, isOpen_gt' 0, h⟩\n#align continuous_at_sign_of_neg continuousAt_sign_of_neg\n-/\n\n",
 "continuousAt_sign_of_ne_zero":
 "#print continuousAt_sign_of_ne_zero /-\ntheorem continuousAt_sign_of_ne_zero {a : α} (h : a ≠ 0) : ContinuousAt SignType.sign a :=\n  by\n  rcases h.lt_or_lt with (h_neg | h_pos)\n  · exact continuousAt_sign_of_neg h_neg\n  · exact continuousAt_sign_of_pos h_pos\n#align continuous_at_sign_of_ne_zero continuousAt_sign_of_ne_zero\n-/\n\n"}