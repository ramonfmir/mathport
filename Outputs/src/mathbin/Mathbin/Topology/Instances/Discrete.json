{"discrete_topology_iff_order_topology_of_pred_succ'":
 "theorem discrete_topology_iff_order_topology_of_pred_succ' [partial_order α] [PredOrder α] [SuccOrder α] [NoMinOrder α]\n    [NoMaxOrder α] : discrete_topology α ↔ order_topology α :=\n  by\n  refine' ⟨fun h => ⟨_⟩, fun h => ⟨_⟩⟩\n  · rw [h.eq_bot]\n    exact bot_topological_space_eq_generate_from_of_pred_succ_order\n  · rw [h.topology_eq_generate_intervals]\n    exact bot_topological_space_eq_generate_from_of_pred_succ_order.symm\n#align discrete_topology_iff_order_topology_of_pred_succ' discrete_topology_iff_order_topology_of_pred_succ'\n\n",
 "discrete_topology_iff_order_topology_of_pred_succ":
 "theorem discrete_topology_iff_order_topology_of_pred_succ [linear_order α] [PredOrder α] [SuccOrder α] :\n    discrete_topology α ↔ order_topology α :=\n  by\n  refine' ⟨fun h => ⟨_⟩, fun h => ⟨_⟩⟩\n  · rw [h.eq_bot]\n    exact linear_order.bot_topological_space_eq_generate_from\n  · rw [h.topology_eq_generate_intervals]\n    exact linear_order.bot_topological_space_eq_generate_from.symm\n#align discrete_topology_iff_order_topology_of_pred_succ discrete_topology_iff_order_topology_of_pred_succ\n\n",
 "bot_topological_space_eq_generate_from_of_pred_succ_order":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2022 Rémy Degenne. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Rémy Degenne\n-/\ntheorem bot_topological_space_eq_generate_from_of_pred_succ_order {α} [partial_order α] [PredOrder α] [SuccOrder α]\n    [NoMinOrder α] [NoMaxOrder α] :\n    («expr⊥» : topological_space α) = generate_from { s | ∃ a, s = Ioi a ∨ s = Iio a } :=\n  by\n  refine' (eq_bot_of_singletons_open fun a => _).symm\n  have h_singleton_eq_inter : {a} = Iio (succ a) ∩ Ioi (pred a) :=\n    by\n    suffices h_singleton_eq_inter' : {a} = Iic a ∩ Ici a\n    · rw [h_singleton_eq_inter', ← Ioi_pred, ← Iio_succ]\n    rw [inter_comm, Ici_inter_Iic, Icc_self a]\n  rw [h_singleton_eq_inter]\n  apply is_open.inter\n  · exact is_open_generate_from_of_mem ⟨succ a, or.inr rfl⟩\n  · exact is_open_generate_from_of_mem ⟨pred a, or.inl rfl⟩\n#align\n  bot_topological_space_eq_generate_from_of_pred_succ_order bot_topological_space_eq_generate_from_of_pred_succ_order\n\n",
 "bot_topological_space_eq_generate_from":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem linear_order.bot_topological_space_eq_generate_from {α} [linear_order α] [PredOrder α] [SuccOrder α] :\n    («expr⊥» : topological_space α) = generate_from { s | ∃ a, s = Ioi a ∨ s = Iio a } :=\n  by\n  refine' (eq_bot_of_singletons_open fun a => _).symm\n  have h_singleton_eq_inter : {a} = Iic a ∩ Ici a := by rw [inter_comm, Ici_inter_Iic, Icc_self a]\n  by_cases ha_top : is_top a\n  · rw [ha_top.Iic_eq, inter_comm, inter_univ] at h_singleton_eq_inter\n    by_cases ha_bot : is_bot a\n    · rw [ha_bot.Ici_eq] at h_singleton_eq_inter\n      rw [h_singleton_eq_inter]\n      apply is_open_univ\n    · rw [isBot_iff_isMin] at ha_bot\n      rw [← Ioi_pred_of_not_is_min ha_bot] at h_singleton_eq_inter\n      rw [h_singleton_eq_inter]\n      exact is_open_generate_from_of_mem ⟨pred a, or.inl rfl⟩\n  · rw [isTop_iff_isMax] at ha_top\n    rw [← Iio_succ_of_not_is_max ha_top] at h_singleton_eq_inter\n    by_cases ha_bot : is_bot a\n    · rw [ha_bot.Ici_eq, inter_univ] at h_singleton_eq_inter\n      rw [h_singleton_eq_inter]\n      exact is_open_generate_from_of_mem ⟨succ a, or.inr rfl⟩\n    · rw [isBot_iff_isMin] at ha_bot\n      rw [← Ioi_pred_of_not_is_min ha_bot] at h_singleton_eq_inter\n      rw [h_singleton_eq_inter]\n      apply is_open.inter\n      · exact is_open_generate_from_of_mem ⟨succ a, or.inr rfl⟩\n      · exact is_open_generate_from_of_mem ⟨pred a, or.inl rfl⟩\n#align linear_order.bot_topological_space_eq_generate_from linear_order.bot_topological_space_eq_generate_from\n\n"}