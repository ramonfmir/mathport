{"supr_limsup_dimH":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- In an (extended) metric space with second countable topology, the Hausdorff dimension\nof a set `s` is the supremum over all `x` of the limit superiors of `dimH t` along\n`(ùìù[s] x).small_sets`. -/\ntheorem supr_limsup_dimH (s : set X) :\n    ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n        (limsup dimH (nhds_within s x).small_sets) =\n      dimH s :=\n  by\n  refine' le_antisymm (sup·µ¢_le fun x => _) _\n  ¬∑ refine' Limsup_le_of_le (by infer_param) (eventually_map.2 _)\n    exact eventually_small_sets.2 ‚ü®s, self_mem_nhds_within, fun t => dimH_mono‚ü©\n  ¬∑ rw [‚Üê bsupr_limsup_dimH]\n    exact sup·µ¢‚ÇÇ_le_sup·µ¢ _ _\n#align supr_limsup_dimH supr_limsup_dimH\n\n",
 "measure_zero_of_dimH_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure.absolutely_continuous -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem measure_zero_of_dimH_lt {Œº : measure X} {d : nnreal} (h : measure.absolutely_continuous Œº (hausdorff_measure d))\n    {s : set X} (hd : dimH s < d) : Œº s = 0 :=\n  h <| hausdorff_measure_of_dimH_lt hd\n#align measure_zero_of_dimH_lt measure_zero_of_dimH_lt\n\n",
 "le_dimH_of_hausdorff_measure_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem le_dimH_of_hausdorff_measure_ne_zero {s : set X} {d : nnreal} (h : (hausdorff_measure d) s ‚â† 0) : ‚Üëd ‚â§ dimH s :=\n  le_of_not_lt <| mt hausdorff_measure_of_dimH_lt h\n#align le_dimH_of_hausdorff_measure_ne_zero le_dimH_of_hausdorff_measure_ne_zero\n\n",
 "le_dimH_of_hausdorff_measure_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem le_dimH_of_hausdorff_measure_eq_top {s : set X} {d : nnreal} (h : (hausdorff_measure d) s = ennreal.top) :\n    ‚Üëd ‚â§ dimH s := by\n  rw [dimH_def]\n  exact le_sup·µ¢‚ÇÇ d h\n#align le_dimH_of_hausdorff_measure_eq_top le_dimH_of_hausdorff_measure_eq_top\n\n",
 "le_dimH_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\ntheorem le_dimH_image (hf : antilipschitz_with K f) (s : set X) : dimH s ‚â§ dimH (¬´expr '' ¬ª f s) :=\n  calc\n    dimH s ‚â§ dimH (¬´expr ‚Åª¬π' ¬ª f (¬´expr '' ¬ª f s)) := dimH_mono (subset_preimage_image _ _)\n    _ ‚â§ dimH (¬´expr '' ¬ª f s) := hf.dimH_preimage_le _\n    \n#align le_dimH_image le_dimH_image\n\n",
 "hausdorff_measure_of_lt_dimH":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem hausdorff_measure_of_lt_dimH {s : set X} {d : nnreal} (h : ‚Üëd < dimH s) :\n    (hausdorff_measure d) s = ennreal.top :=\n  by\n  simp only [dimH_def, lt_sup·µ¢_iff] at h\n  rcases h with ‚ü®d', hsd', hdd'‚ü©\n  rw [ennreal.coe_lt_coe, ‚Üê nnreal.coe_lt_coe] at hdd'\n  exact top_unique (hsd' ‚ñ∏ hausdorff_measure_mono hdd'.le _)\n#align hausdorff_measure_of_lt_dimH hausdorff_measure_of_lt_dimH\n\n",
 "hausdorff_measure_of_dimH_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\ntheorem hausdorff_measure_of_dimH_lt {s : set X} {d : nnreal} (h : dimH s < d) : (hausdorff_measure d) s = 0 :=\n  by\n  rw [dimH_def] at h\n  rcases ennreal.lt_iff_exists_nnreal_btwn.1 h with ‚ü®d', hsd', hd'd‚ü©\n  rw [ennreal.coe_lt_coe, ‚Üê nnreal.coe_lt_coe] at hd'd\n  exact (hausdorff_measure_zero_or_top hd'd s).resolve_right fun h => hsd'.not_le <| le_sup·µ¢‚ÇÇ d' h\n#align hausdorff_measure_of_dimH_lt hausdorff_measure_of_dimH_lt\n\n",
 "exists_mem_nhds_within_lt_dimH_of_lt_dimH":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚ãÉ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚ãÉ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- If `r` is less than the Hausdorff dimension of a set `s` in an (extended) metric space with\nsecond countable topology, then there exists a point `x ‚àà s` such that every neighborhood\n`t` of `x` within `s` has Hausdorff dimension greater than `r`. -/\ntheorem exists_mem_nhds_within_lt_dimH_of_lt_dimH {s : set X} {r : ennreal} (h : r < dimH s) :\n    ‚àÉ x ‚àà s, ‚àÄ t ‚àà nhds_within s x, r < dimH t := by\n  contrapose! h; choose! t htx htr using h\n  rcases countable_cover_nhds_within htx with ‚ü®S, hSs, hSc, hSU‚ü©\n  calc\n    dimH s ‚â§\n        dimH (¬´expr‚ãÉ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚ãÉ , ¬ª\" (t x)) :=\n      dimH_mono hSU\n    _ = ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\" (dimH (t x)) :=\n      dimH_bUnion hSc _\n    _ ‚â§ r := sup·µ¢‚ÇÇ_le fun x hx => htr x <| hSs hx\n    \n#align exists_mem_nhds_within_lt_dimH_of_lt_dimH exists_mem_nhds_within_lt_dimH_of_lt_dimH\n\n",
 "dimH_univ_pi_fin":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_univ_pi_fin (n : ‚Ñï) : dimH (univ : set (fin n ‚Üí expr‚Ñù)) = n := by rw [dimH_univ_pi, fintype.card_fin]\n#align dimH_univ_pi_fin dimH_univ_pi_fin\n\n",
 "dimH_univ_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_univ_pi (Œπ : Type _) [fintype Œπ] : dimH (univ : set (Œπ ‚Üí expr‚Ñù)) = fintype.card Œπ := by\n  simp only [‚Üê metric.Union_ball_nat_succ (0 : Œπ ‚Üí expr‚Ñù), dimH_Union, dimH_ball_pi _ (nat.cast_add_one_pos _),\n    sup·µ¢_const]\n#align dimH_univ_pi dimH_univ_pi\n\n",
 "dimH_univ_eq_finrank":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_univ_eq_finrank : dimH (univ : set E) = finrank (expr‚Ñù) E :=\n  dimH_of_mem_nhds (@univ_mem _ ((nhds) 0))\n#align dimH_univ_eq_finrank dimH_univ_eq_finrank\n\n",
 "dimH_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_univ : dimH (univ : set (expr‚Ñù)) = 1 := by\n  rw [dimH_univ_eq_finrank (expr‚Ñù), finite_dimensional.finrank_self, Nat.cast_one]\n#align dimH_univ dimH_univ\n\n",
 "dimH_union":
 "@[simp]\ntheorem dimH_union (s t : set X) : dimH (s ‚à™ t) = max (dimH s) (dimH t) := by\n  rw [union_eq_Union, dimH_Union, sup·µ¢_bool_eq, cond, cond, ennreal.sup_eq_max]\n#align dimH_union dimH_union\n\n",
 "dimH_subsingleton":
 "theorem dimH_subsingleton {s : set X} (h : s.subsingleton) : dimH s = 0 :=\n  by\n  borelize X\n  apply le_antisymm _ (zero_le _)\n  refine' dimH_le_of_hausdorff_measure_ne_top _\n  exact ((hausdorff_measure_le_one_of_subsingleton h le_rfl).trans_lt ennreal.one_lt_top).ne\n#align dimH_subsingleton dimH_subsingleton\n\n",
 "dimH_singleton":
 "@[simp]\ntheorem dimH_singleton (x : X) : dimH ({x} : set X) = 0 :=\n  subsingleton_singleton.dimH_zero\n#align dimH_singleton dimH_singleton\n\n",
 "dimH_sUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n@[simp]\ntheorem dimH_sUnion {S : set (set X)} (hS : S.countable) :\n    dimH (‚ãÉ‚ÇÄ S) =\n      ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\" (dimH s) :=\n  by rw [sUnion_eq_bUnion, dimH_bUnion hS]\n#align dimH_sUnion dimH_sUnion\n\n",
 "dimH_range_le_of_locally_lipschitz_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `f : X ‚Üí Y` is Lipschitz in a neighborhood of each point `x : X`, then the Hausdorff\ndimension of `range f` is at most the Hausdorff dimension of `X`. -/\ntheorem dimH_range_le_of_locally_lipschitz_on [second_countable_topology X] {f : X ‚Üí Y}\n    (hf : ‚àÄ x : X, ‚àÉ C : nnreal, ‚àÉ s ‚àà (nhds) x, lipschitz_on_with C f s) : dimH (range f) ‚â§ dimH (univ : set X) :=\n  by\n  rw [‚Üê image_univ]\n  refine' dimH_image_le_of_locally_lipschitz_on fun x _ => _\n  simpa only [exists_prop, nhds_within_univ] using hf x\n#align dimH_range_le_of_locally_lipschitz_on dimH_range_le_of_locally_lipschitz_on\n\n",
 "dimH_range_le_of_locally_holder_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-- If `f : X ‚Üí Y` is H√∂lder continuous in a neighborhood of every point `x : X` with the same\npositive exponent `r` but possibly different coefficients, then the Hausdorff dimension of the range\nof `f` is at most the Hausdorff dimension of `X` divided by `r`. -/\ntheorem dimH_range_le_of_locally_holder_on [second_countable_topology X] {r : nnreal} {f : X ‚Üí Y} (hr : 0 < r)\n    (hf : ‚àÄ x : X, ‚àÉ C : nnreal, ‚àÉ s ‚àà (nhds) x, holder_on_with C r f s) : dimH (range f) ‚â§ dimH (univ : set X) / r :=\n  by\n  rw [‚Üê image_univ]\n  refine' dimH_image_le_of_locally_holder_on hr fun x _ => _\n  simpa only [exists_prop, nhds_within_univ] using hf x\n#align dimH_range_le_of_locally_holder_on dimH_range_le_of_locally_holder_on\n\n",
 "dimH_range_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/-- The Hausdorff dimension of the range of a `C¬π`-smooth function defined on a finite dimensional\nreal normed space is at most the dimension of its domain as a vector space over `‚Ñù`. -/\ntheorem cont_diff.dimH_range_le {f : E ‚Üí F} (h : cont_diff (expr‚Ñù) 1 f) : dimH (range f) ‚â§ finrank (expr‚Ñù) E :=\n  calc\n    dimH (range f) = dimH (¬´expr '' ¬ª f univ) := by rw [image_univ]\n    _ ‚â§ dimH (univ : set E) := h.cont_diff_on.dimH_image_le convex_univ Subset.rfl\n    _ = finrank (expr‚Ñù) E := real.dimH_univ_eq_finrank E\n    \n#align cont_diff.dimH_range_le cont_diff.dimH_range_le\n\n",
 "dimH_preimage_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\ntheorem dimH_preimage_le (hf : antilipschitz_with K f) (s : set Y) : dimH (¬´expr ‚Åª¬π' ¬ª f s) ‚â§ dimH s :=\n  by\n  borelize X Y\n  refine' dimH_le fun d hd => le_dimH_of_hausdorff_measure_eq_top _\n  have := hf.hausdorff_measure_preimage_le d.coe_nonneg s\n  rw [hd, top_le_iff] at this\n  contrapose! this\n  exact ennreal.mul_ne_top (by simp) this\n#align dimH_preimage_le dimH_preimage_le\n\n",
 "dimH_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚Åª¬π' ¬ª -/\n@[simp]\ntheorem dimH_preimage (e : ¬´expr ‚âÉL[ ] ¬ª E ùïú F) (s : set F) : dimH (¬´expr ‚Åª¬π' ¬ª e s) = dimH s := by\n  rw [‚Üê e.image_symm_eq_preimage, e.symm.dimH_image]\n#align dimH_preimage dimH_preimage\n\n",
 "dimH_of_nonempty_interior":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_of_nonempty_interior {s : set E} (h : (interior s).nonempty) : dimH s = finrank (expr‚Ñù) E :=\n  let ‚ü®x, hx‚ü© := h\n  dimH_of_mem_nhds (mem_interior_iff_mem_nhds.1 hx)\n#align dimH_of_nonempty_interior dimH_of_nonempty_interior\n\n",
 "dimH_of_mem_nhds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_of_mem_nhds {x : E} {s : set E} (h : s ‚àà (nhds) x) : dimH s = finrank (expr‚Ñù) E :=\n  by\n  have e : ¬´expr ‚âÉL[ ] ¬ª E (expr‚Ñù) (fin (finrank (expr‚Ñù) E) ‚Üí expr‚Ñù) :=\n    continuous_linear_equiv.of_finrank_eq (finite_dimensional.finrank_fin_fun (expr‚Ñù)).symm\n  rw [‚Üê e.dimH_image]\n  refine' le_antisymm _ _\n  ¬∑ exact (dimH_mono (subset_univ _)).trans_eq (dimH_univ_pi_fin _)\n  ¬∑ have : ¬´expr '' ¬ª e s ‚àà (nhds) (e x) := by\n      rw [‚Üê e.map_nhds_eq]\n      exact image_mem_map h\n    rcases metric.nhds_basis_ball.mem_iff.1 this with ‚ü®r, hr0, hr‚ü©\n    simpa only [dimH_ball_pi_fin (e x) hr0] using dimH_mono hr\n#align dimH_of_mem_nhds dimH_of_mem_nhds\n\n",
 "dimH_of_hausdorff_measure_ne_zero_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem dimH_of_hausdorff_measure_ne_zero_ne_top {d : nnreal} {s : set X} (h : (hausdorff_measure d) s ‚â† 0)\n    (h' : (hausdorff_measure d) s ‚â† ennreal.top) : dimH s = d :=\n  le_antisymm (dimH_le_of_hausdorff_measure_ne_top h') (le_dimH_of_hausdorff_measure_ne_zero h)\n#align dimH_of_hausdorff_measure_ne_zero_ne_top dimH_of_hausdorff_measure_ne_zero_ne_top\n\n",
 "dimH_mono":
 "@[mono]\ntheorem dimH_mono {s t : set X} (h : s ‚äÜ t) : dimH s ‚â§ dimH t :=\n  by\n  borelize X\n  exact dimH_le fun d hd => le_dimH_of_hausdorff_measure_eq_top <| top_unique <| hd ‚ñ∏ measure_mono h\n#align dimH_mono dimH_mono\n\n",
 "dimH_le_of_hausdorff_measure_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem dimH_le_of_hausdorff_measure_ne_top {s : set X} {d : nnreal} (h : (hausdorff_measure d) s ‚â† ennreal.top) :\n    dimH s ‚â§ d :=\n  le_of_not_lt <| mt hausdorff_measure_of_lt_dimH h\n#align dimH_le_of_hausdorff_measure_ne_top dimH_le_of_hausdorff_measure_ne_top\n\n",
 "dimH_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem dimH_le {s : set X} {d : ennreal} (H : ‚àÄ d' : nnreal, (hausdorff_measure d') s = ennreal.top ‚Üí ‚Üëd' ‚â§ d) :\n    dimH s ‚â§ d :=\n  (dimH_def s).trans_le <| sup·µ¢‚ÇÇ_le H\n#align dimH_le dimH_le\n\n",
 "dimH_image_le_of_locally_lipschitz_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/-- If `s` is a set in an extended metric space `X` with second countable topology and `f : X ‚Üí Y`\nis Lipschitz in a neighborhood within `s` of every point `x ‚àà s`, then the Hausdorff dimension of\nthe image `f '' s` is at most the Hausdorff dimension of `s`. -/\ntheorem dimH_image_le_of_locally_lipschitz_on [second_countable_topology X] {f : X ‚Üí Y} {s : set X}\n    (hf : ‚àÄ x ‚àà s, ‚àÉ C : nnreal, ‚àÉ t ‚àà nhds_within s x, lipschitz_on_with C f t) : dimH (¬´expr '' ¬ª f s) ‚â§ dimH s :=\n  by\n  have : ‚àÄ x ‚àà s, ‚àÉ C : nnreal, ‚àÉ t ‚àà nhds_within s x, holder_on_with C 1 f t := by\n    simpa only [holder_on_with_one] using hf\n  simpa only [ennreal.coe_one, div_one] using dimH_image_le_of_locally_holder_on zero_lt_one this\n#align dimH_image_le_of_locally_lipschitz_on dimH_image_le_of_locally_lipschitz_on\n\n",
 "dimH_image_le_of_locally_holder_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/-- If `s` is a set in a space `X` with second countable topology and `f : X ‚Üí Y` is H√∂lder\ncontinuous in a neighborhood within `s` of every point `x ‚àà s` with the same positive exponent `r`\nbut possibly different coefficients, then the Hausdorff dimension of the image `f '' s` is at most\nthe Hausdorff dimension of `s` divided by `r`. -/\ntheorem dimH_image_le_of_locally_holder_on [second_countable_topology X] {r : nnreal} {f : X ‚Üí Y} (hr : 0 < r)\n    {s : set X} (hf : ‚àÄ x ‚àà s, ‚àÉ C : nnreal, ‚àÉ t ‚àà nhds_within s x, holder_on_with C r f t) :\n    dimH (¬´expr '' ¬ª f s) ‚â§ dimH s / r := by\n  choose! C t htn hC using hf\n  rcases countable_cover_nhds_within htn with ‚ü®u, hus, huc, huU‚ü©\n  replace huU := inter_eq_self_of_subset_left huU; rw [inter_Union‚ÇÇ] at huU\n  rw [‚Üê huU, image_Union‚ÇÇ, dimH_bUnion huc, dimH_bUnion huc]; simp only [ennreal.supr_div]\n  exact sup·µ¢‚ÇÇ_mono fun x hx => ((hC x (hus hx)).mono (inter_subset_right _ _)).dimH_image_le hr\n#align dimH_image_le_of_locally_holder_on dimH_image_le_of_locally_holder_on\n\n",
 "dimH_image_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/-- Let `f` be a function defined on a finite dimensional real normed space. If `f` is `C¬π`-smooth\non a convex set `s`, then the Hausdorff dimension of `f '' s` is less than or equal to the Hausdorff\ndimension of `s`.\n\nTODO: do we actually need `convex ‚Ñù s`? -/\ntheorem cont_diff_on.dimH_image_le {f : E ‚Üí F} {s t : set E} (hf : cont_diff_on (expr‚Ñù) 1 f s) (hc : convex (expr‚Ñù) s)\n    (ht : t ‚äÜ s) : dimH (¬´expr '' ¬ª f t) ‚â§ dimH t :=\n  dimH_image_le_of_locally_lipschitz_on fun x hx =>\n    let ‚ü®C, u, hu, hf‚ü© := (hf x (ht hx)).exists_lipschitz_on_with hc\n    ‚ü®C, u, nhds_within_mono _ ht hu, hf‚ü©\n#align cont_diff_on.dimH_image_le cont_diff_on.dimH_image_le\n\n",
 "dimH_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ‚âÉL[ ] ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n@[simp]\ntheorem dimH_image (e : ¬´expr ‚âÉL[ ] ¬ª E ùïú F) (s : set E) : dimH (¬´expr '' ¬ª e s) = dimH s :=\n  le_antisymm (e.lipschitz.dimH_image_le s) <| by\n    simpa only [e.symm_image_image] using e.symm.lipschitz.dimH_image_le (¬´expr '' ¬ª e s)\n#align dimH_image dimH_image\n\n",
 "dimH_finite":
 "theorem dimH_finite {s : set X} (hs : s.finite) : dimH s = 0 :=\n  hs.countable.dimH_zero\n#align dimH_finite dimH_finite\n\n",
 "dimH_empty":
 "@[simp]\ntheorem dimH_empty : dimH (‚àÖ : set X) = 0 :=\n  subsingleton_empty.dimH_zero\n#align dimH_empty dimH_empty\n\n",
 "dimH_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/-\nCopyright (c) 2021 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n/-- Unfold the definition of `dimH` using `[measurable_space X] [borel_space X]` from the\nenvironment. -/\ntheorem dimH_def (s : set X) :\n    dimH s = ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\" d :=\n  by\n  borelize X\n  rw [dimH]\n#align dimH_def dimH_def\n\n",
 "dimH_countable":
 "theorem dimH_countable {s : set X} (hs : s.countable) : dimH s = 0 :=\n  bunion·µ¢_of_singleton s ‚ñ∏ by simp only [dimH_bUnion hs, dimH_singleton, ennreal.supr_zero_eq_zero]\n#align dimH_countable dimH_countable\n\n",
 "dimH_coe_finset":
 "@[simp]\ntheorem dimH_coe_finset (s : Finset X) : dimH (s : set X) = 0 :=\n  s.finite_to_set.dimH_zero\n#align dimH_coe_finset dimH_coe_finset\n\n",
 "dimH_ball_pi_fin":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_ball_pi_fin {n : ‚Ñï} (x : fin n ‚Üí expr‚Ñù) {r : expr‚Ñù} (hr : 0 < r) : dimH (metric.ball x r) = n := by\n  rw [dimH_ball_pi x hr, fintype.card_fin]\n#align dimH_ball_pi_fin dimH_ball_pi_fin\n\n",
 "dimH_ball_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\ntheorem dimH_ball_pi (x : Œπ ‚Üí expr‚Ñù) {r : expr‚Ñù} (hr : 0 < r) : dimH (metric.ball x r) = fintype.card Œπ :=\n  by\n  cases isEmpty_or_nonempty Œπ\n  ¬∑ rwa [dimH_subsingleton, eq_comm, Nat.cast_eq_zero, fintype.card_eq_zero_iff]\n    exact fun x _ y _ => subsingleton.elim x y\n  ¬∑ rw [‚Üê ennreal.coe_nat]\n    have : (hausdorff_measure (fintype.card Œπ)) (metric.ball x r) = ennreal.of_real ((2 * r) ^ fintype.card Œπ) := by\n      rw [hausdorff_measure_pi_real, real.volume_pi_ball _ hr]\n    refine' dimH_of_hausdorff_measure_ne_zero_ne_top _ _ <;> rw [nnreal.coe_nat_cast, this]\n    ¬∑ simp [pow_pos (mul_pos (zero_lt_two' (expr‚Ñù)) hr)]\n    ¬∑ exact ennreal.of_real_ne_top\n#align dimH_ball_pi dimH_ball_pi\n\n",
 "dimH_bUnion":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚ãÉ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚ãÉ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n@[simp]\ntheorem dimH_bUnion {s : set Œπ} (hs : s.countable) (t : Œπ ‚Üí set X) :\n    dimH (¬´expr‚ãÉ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚ãÉ , ¬ª\" (t i)) =\n      ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\" (dimH (t i)) :=\n  by\n  haveI := hs.to_encodable\n  rw [bUnion_eq_Union, dimH_Union, ‚Üê sup·µ¢_subtype'']\n#align dimH_bUnion dimH_bUnion\n\n",
 "dimH_Union":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `hausdorff_measure -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚ãÉ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚ãÉ , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n@[simp]\ntheorem dimH_Union [Encodable Œπ] (s : Œπ ‚Üí set X) :\n    dimH (¬´expr‚ãÉ , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚ãÉ , ¬ª\" (s i)) =\n      ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\" (dimH (s i)) :=\n  by\n  borelize X\n  refine' le_antisymm (dimH_le fun d hd => _) (sup·µ¢_le fun i => dimH_mono <| subset_Union _ _)\n  contrapose! hd\n  have : ‚àÄ i, (hausdorff_measure d) (s i) = 0 := fun i =>\n    hausdorff_measure_of_dimH_lt ((le_sup·µ¢ (fun i => dimH (s i)) i).trans_lt hd)\n  rw [measure_Union_null this]\n  exact ennreal.zero_ne_top\n#align dimH_Union dimH_Union\n\n",
 "dense_compl_range_of_finrank_lt_finrank":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·∂ú¬ª -/\n/-- A particular case of Sard's Theorem. If `f` is a `C¬π` smooth map from a real vector space to a\nreal vector space `F` of strictly larger dimension, then the complement of the range of `f` is dense\nin `F`. -/\ntheorem cont_diff.dense_compl_range_of_finrank_lt_finrank [finite_dimensional (expr‚Ñù) F] {f : E ‚Üí F}\n    (h : cont_diff (expr‚Ñù) 1 f) (hEF : finrank (expr‚Ñù) E < finrank (expr‚Ñù) F) : dense (¬´expr ·∂ú¬ª (range f)) :=\n  dense_compl_of_dimH_lt_finrank <| h.dimH_range_le.trans_lt <| ennreal.coe_nat_lt_coe_nat.2 hEF\n#align cont_diff.dense_compl_range_of_finrank_lt_finrank cont_diff.dense_compl_range_of_finrank_lt_finrank\n\n",
 "dense_compl_of_dimH_lt_finrank":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·∂ú¬ª -/\ntheorem dense_compl_of_dimH_lt_finrank {s : set E} (hs : dimH s < finrank (expr‚Ñù) E) : dense (¬´expr ·∂ú¬ª s) :=\n  by\n  refine' fun x => mem_closure_iff_nhds.2 fun t ht => nonempty_iff_ne_empty.2 fun he => hs.not_le _\n  rw [‚Üê diff_eq, diff_eq_empty] at he\n  rw [‚Üê real.dimH_of_mem_nhds ht]\n  exact dimH_mono he\n#align dense_compl_of_dimH_lt_finrank dense_compl_of_dimH_lt_finrank\n\n",
 "dense_compl_image_of_dimH_lt_finrank":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expr‚Ñù -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr ·∂ú¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr '' ¬ª -/\n/-- A particular case of Sard's Theorem. Let `f : E ‚Üí F` be a map between finite dimensional real\nvector spaces. Suppose that `f` is `C¬π` smooth on a convex set `s` of Hausdorff dimension strictly\nless than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. -/\ntheorem cont_diff_on.dense_compl_image_of_dimH_lt_finrank [finite_dimensional (expr‚Ñù) F] {f : E ‚Üí F} {s t : set E}\n    (h : cont_diff_on (expr‚Ñù) 1 f s) (hc : convex (expr‚Ñù) s) (ht : t ‚äÜ s) (htF : dimH t < finrank (expr‚Ñù) F) :\n    dense (¬´expr ·∂ú¬ª (¬´expr '' ¬ª f t)) :=\n  dense_compl_of_dimH_lt_finrank <| (h.dimH_image_le hc ht).trans_lt htF\n#align cont_diff_on.dense_compl_image_of_dimH_lt_finrank cont_diff_on.dense_compl_image_of_dimH_lt_finrank\n\n",
 "bsupr_limsup_dimH":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/-- In an (extended) metric space with second countable topology, the Hausdorff dimension\nof a set `s` is the supremum over `x ‚àà s` of the limit superiors of `dimH t` along\n`(ùìù[s] x).small_sets`. -/\ntheorem bsupr_limsup_dimH (s : set X) :\n    ¬´expr‚®Ü , ¬ª \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `¬´expr‚®Ü , ¬ª\"\n        (limsup dimH (nhds_within s x).small_sets) =\n      dimH s :=\n  by\n  refine' le_antisymm (sup·µ¢‚ÇÇ_le fun x hx => _) _\n  ¬∑ refine' Limsup_le_of_le (by infer_param) (eventually_map.2 _)\n    exact eventually_small_sets.2 ‚ü®s, self_mem_nhds_within, fun t => dimH_mono‚ü©\n  ¬∑ refine' le_of_forall_ge_of_dense fun r hr => _\n    rcases exists_mem_nhds_within_lt_dimH_of_lt_dimH hr with ‚ü®x, hxs, hxr‚ü©\n    refine' le_sup·µ¢‚ÇÇ_of_le x hxs _\n    rw [limsup_eq]\n    refine' le_inf‚Çõ fun b hb => _\n    rcases eventually_small_sets.1 hb with ‚ü®t, htx, ht‚ü©\n    exact (hxr t htx).le.trans (ht t subset.rfl)\n#align bsupr_limsup_dimH bsupr_limsup_dimH\n\n"}