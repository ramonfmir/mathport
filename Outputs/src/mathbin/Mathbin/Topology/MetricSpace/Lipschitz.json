{"weaken":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\nprotected theorem weaken (hf : lipschitz_with K f) {K' : nnreal} (h : K ≤ K') : lipschitz_with K' f := fun x y =>\n  le_trans (hf x y) <| ennreal.mul_right_mono (ennreal.coe_le_coe.2 h)\n#align weaken weaken\n\n",
 "uniform_continuous_on":
 "protected theorem uniform_continuous_on (hf : lipschitz_on_with K f s) : uniform_continuous_on f s :=\n  uniform_continuous_on_iff_restrict.mpr (lipschitz_on_with_iff_restrict.mp hf).uniform_continuous\n#align uniform_continuous_on uniform_continuous_on\n\n",
 "uniform_continuous":
 "/-- A Lipschitz function is uniformly continuous -/\nprotected theorem uniform_continuous (hf : lipschitz_with K f) : uniform_continuous f :=\n  by\n  refine' emetric.uniform_continuous_iff.2 fun ε εpos => _\n  use ε / K, ennreal.div_pos_iff.2 ⟨ne_of_gt εpos, ennreal.coe_ne_top⟩\n  exact fun x y => hf.edist_lt_of_edist_lt_div\n#align uniform_continuous uniform_continuous\n\n",
 "uncurry":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\nprotected theorem uncurry {f : α → β → γ} {Kα Kβ : nnreal} (hα : ∀ b, lipschitz_with Kα fun a => f a b)\n    (hβ : ∀ a, lipschitz_with Kβ (f a)) : lipschitz_with (Kα + Kβ) (function.uncurry f) :=\n  by\n  rintro ⟨a₁, b₁⟩ ⟨a₂, b₂⟩\n  simp only [function.uncurry, ennreal.coe_add, add_mul]\n  apply le_trans (edist_triangle _ (f a₂ b₁) _)\n  exact\n    add_le_add (le_trans (hα _ _ _) <| ennreal.mul_left_mono <| le_max_left _ _)\n      (le_trans (hβ _ _ _) <| ennreal.mul_left_mono <| le_max_right _ _)\n#align uncurry uncurry\n\n",
 "subtype_val":
 "protected theorem subtype_val (s : set α) : lipschitz_with 1 (subtype.val : s → α) :=\n  lipschitz_with.of_edist_le fun x y => le_rfl\n#align subtype_val subtype_val\n\n",
 "subtype_mk":
 "theorem subtype_mk (hf : lipschitz_with K f) {p : β → Prop} (hp : ∀ x, p (f x)) :\n    lipschitz_with K (fun x => ⟨f x, hp x⟩ : α → { y // p y }) :=\n  hf\n#align subtype_mk subtype_mk\n\n",
 "subtype_coe":
 "protected theorem subtype_coe (s : set α) : lipschitz_with 1 (coe : s → α) :=\n  lipschitz_with.subtype_val s\n#align subtype_coe subtype_coe\n\n",
 "right_of_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\ntheorem bounded.right_of_prod (h : bounded (lower_set.prod s t)) (hs : s.nonempty) : bounded t := by\n  simpa only [snd_image_prod hs t] using (@lipschitz_with.prod_snd α β _ _).bounded_image h\n#align bounded.right_of_prod bounded.right_of_prod\n\n",
 "restrict":
 "protected theorem restrict (hf : lipschitz_with K f) (s : set α) : lipschitz_with K (s.restrict f) := fun x y => hf x y\n#align restrict restrict\n\n",
 "proj_Icc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\nprotected theorem proj_Icc {a b : exprℝ} (h : a ≤ b) : lipschitz_with 1 (projIcc a b h) :=\n  ((lipschitz_with.id.const_min _).const_max _).subtype_mk _\n#align proj_Icc proj_Icc\n\n",
 "prod_snd":
 "protected theorem prod_snd : lipschitz_with 1 (@prod.snd α β) :=\n  lipschitz_with.of_edist_le fun x y => le_max_right _ _\n#align prod_snd prod_snd\n\n",
 "prod_mk_right":
 "protected theorem prod_mk_right (b : β) : lipschitz_with 1 fun a : α => (a, b) := by\n  simpa only [max_eq_left zero_le_one] using lipschitz_with.id.prod (lipschitz_with.const b)\n#align prod_mk_right prod_mk_right\n\n",
 "prod_mk_left":
 "protected theorem prod_mk_left (a : α) : lipschitz_with 1 (prod.mk a : β → α × β) := by\n  simpa only [max_eq_right zero_le_one] using (lipschitz_with.const a).prod lipschitz_with.id\n#align prod_mk_left prod_mk_left\n\n",
 "prod_fst":
 "protected theorem prod_fst : lipschitz_with 1 (@prod.fst α β) :=\n  lipschitz_with.of_edist_le fun x y => le_max_left _ _\n#align prod_fst prod_fst\n\n",
 "pow":
 "protected theorem pow {f : Function.End α} {K} (h : lipschitz_with K f) :\n    ∀ n : ℕ, lipschitz_with (K ^ n) (f ^ n : Function.End α)\n  | 0 => by simpa only [pow_zero] using lipschitz_with.id\n  | n + 1 => by\n    rw [pow_succ, pow_succ]\n    exact h.mul (pow n)\n#align pow pow\n\n",
 "of_le_add_mul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\ndoesn't assume `0≤K`. -/\nprotected theorem of_le_add_mul' {f : α → exprℝ} (K : exprℝ) (h : ∀ x ∈ s, ∀ y ∈ s, f x ≤ f y + K * dist x y) :\n    lipschitz_on_with (real.to_nnreal K) f s :=\n  have I : ∀ x ∈ s, ∀ y ∈ s, f x - f y ≤ K * dist x y := fun x hx y hy => sub_le_iff_le_add'.2 (h x hx y hy)\n  lipschitz_on_with.of_dist_le' fun x hx y hy => abs_sub_le_iff.2 ⟨I x hx y hy, dist_comm y x ▸ I y hy x hx⟩\n#align of_le_add_mul' of_le_add_mul'\n\n",
 "of_le_add_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/-- For functions to `ℝ`, it suffices to prove `f x ≤ f y + K * dist x y`; this version\nassumes `0≤K`. -/\nprotected theorem of_le_add_mul {f : α → exprℝ} (K : nnreal) (h : ∀ x ∈ s, ∀ y ∈ s, f x ≤ f y + K * dist x y) :\n    lipschitz_on_with K f s := by simpa only [real.to_nnreal_coe] using lipschitz_on_with.of_le_add_mul' K h\n#align of_le_add_mul of_le_add_mul\n\n",
 "of_le_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\nprotected theorem of_le_add {f : α → exprℝ} (h : ∀ x ∈ s, ∀ y ∈ s, f x ≤ f y + dist x y) : lipschitz_on_with 1 f s :=\n  lipschitz_on_with.of_le_add_mul 1 <| by simpa only [nnreal.coe_one, one_mul]\n#align of_le_add of_le_add\n\n",
 "of_edist_le":
 "protected theorem of_edist_le (h : ∀ x y, edist (f x) (f y) ≤ edist x y) : lipschitz_with 1 f := fun x y => by\n  simp only [ennreal.coe_one, one_mul, h]\n#align of_edist_le of_edist_le\n\n",
 "of_dist_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\nprotected theorem of_dist_le' {K : exprℝ} (h : ∀ x ∈ s, ∀ y ∈ s, dist (f x) (f y) ≤ K * dist x y) :\n    lipschitz_on_with (real.to_nnreal K) f s :=\n  of_dist_le_mul fun x hx y hy =>\n    le_trans (h x hx y hy) <| mul_le_mul_of_nonneg_right (real.le_coe_to_nnreal K) dist_nonneg\n#align of_dist_le' of_dist_le'\n\n",
 "nndist_le":
 "theorem nndist_le (hf : lipschitz_with K f) (x y : α) : nndist (f x) (f y) ≤ K * nndist x y :=\n  hf.dist_le_mul x y\n#align nndist_le nndist_le\n\n",
 "mul_edist_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem mul_edist_le (h : lipschitz_with K f) (x y : α) : (K⁻¹ : ennreal) * edist (f x) (f y) ≤ edist x y :=\n  by\n  rw [mul_comm, ← div_eq_mul_inv]\n  exact ennreal.div_le_of_le_mul' (h x y)\n#align mul_edist_le mul_edist_le\n\n",
 "mul":
 "protected theorem mul {f g : Function.End α} {Kf Kg} (hf : lipschitz_with Kf f) (hg : lipschitz_with Kg g) :\n    lipschitz_with (Kf * Kg) (f * g : Function.End α) :=\n  hf.comp hg\n#align mul mul\n\n",
 "mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem lipschitz_on_with.mono [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal} {s t : set α} {f : α → β}\n    (hf : lipschitz_on_with K f t) (h : s ⊆ t) : lipschitz_on_with K f s := fun x x_in y y_in => hf (h x_in) (h y_in)\n#align lipschitz_on_with.mono lipschitz_on_with.mono\n\n",
 "mk_one":
 "protected theorem mk_one (h : ∀ x ∈ s, ∀ y ∈ s, dist (f x) (f y) ≤ dist x y) : lipschitz_on_with 1 f s :=\n  of_dist_le_mul <| by simpa only [nnreal.coe_one, one_mul] using h\n#align mk_one mk_one\n\n",
 "min_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem min_const (hf : lipschitz_with Kf f) (a : exprℝ) : lipschitz_with Kf fun x => min (f x) a := by\n  simpa only [max_eq_left (zero_le Kf)] using hf.min (lipschitz_with.const a)\n#align min_const min_const\n\n",
 "min":
 "protected theorem min (hf : lipschitz_with Kf f) (hg : lipschitz_with Kg g) :\n    lipschitz_with (max Kf Kg) fun x => min (f x) (g x) := by\n  simpa only [(· ∘ ·), one_mul] using lipschitz_with_min.comp (hf.prod hg)\n#align min min\n\n",
 "max_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem max_const (hf : lipschitz_with Kf f) (a : exprℝ) : lipschitz_with Kf fun x => max (f x) a := by\n  simpa only [max_eq_left (zero_le Kf)] using hf.max (lipschitz_with.const a)\n#align max_const max_const\n\n",
 "max":
 "protected theorem max (hf : lipschitz_with Kf f) (hg : lipschitz_with Kg g) :\n    lipschitz_with (max Kf Kg) fun x => max (f x) (g x) := by\n  simpa only [(· ∘ ·), one_mul] using lipschitz_with_max.comp (hf.prod hg)\n#align max max\n\n",
 "maps_to_emetric_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem maps_to_emetric_closed_ball (h : lipschitz_with K f) (x : α) (r : ennreal) :\n    MapsTo f (closed_ball x r) (closed_ball (f x) (K * r)) := fun y hy => h.edist_le_mul_of_le hy\n#align maps_to_emetric_closed_ball maps_to_emetric_closed_ball\n\n",
 "maps_to_emetric_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem maps_to_emetric_ball (h : lipschitz_with K f) (hK : K ≠ 0) (x : α) (r : ennreal) :\n    MapsTo f (ball x r) (ball (f x) (K * r)) := fun y hy => h.edist_lt_mul_of_lt hK hy\n#align maps_to_emetric_ball maps_to_emetric_ball\n\n",
 "maps_to_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_closed_ball (hf : lipschitz_with K f) (x : α) (r : exprℝ) :\n    MapsTo f (metric.closed_ball x r) (metric.closed_ball (f x) (K * r)) := fun y hy => hf.dist_le_mul_of_le hy\n#align maps_to_closed_ball maps_to_closed_ball\n\n",
 "maps_to_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_ball (hf : lipschitz_with K f) (hK : K ≠ 0) (x : α) (r : exprℝ) :\n    MapsTo f (metric.ball x r) (metric.ball (f x) (K * r)) := fun y hy => hf.dist_lt_mul_of_lt hK hy\n#align maps_to_ball maps_to_ball\n\n",
 "list_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/-- The product of a list of Lipschitz continuous endomorphisms is a Lipschitz continuous\nendomorphism. -/\nprotected theorem list_prod (f : ι → Function.End α) (K : ι → nnreal) (h : ∀ i, lipschitz_with (K i) (f i)) :\n    ∀ l : list ι, lipschitz_with (l.map K).prod (l.map f).prod\n  | [] => by simpa using lipschitz_with.id\n  | sym.cons' i l => by\n    simp only [list.map_cons, List.prod_cons]\n    exact (h i).mul (list_prod l)\n#align list_prod list_prod\n\n",
 "lipschitz_with_min":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem _root_.lipschitz_with_min : lipschitz_with 1 fun p : exprℝ × exprℝ => min p.1 p.2 :=\n  lipschitz_with.of_le_add fun p₁ p₂ => sub_le_iff_le_add'.1 <| (le_abs_self _).trans (abs_min_sub_min_le_max _ _ _ _)\n#align lipschitz_with_min lipschitz_with_min\n\n",
 "lipschitz_with_max":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem _root_.lipschitz_with_max : lipschitz_with 1 fun p : exprℝ × exprℝ => max p.1 p.2 :=\n  lipschitz_with.of_le_add fun p₁ p₂ => sub_le_iff_le_add'.1 <| (le_abs_self _).trans (abs_max_sub_max_le_max _ _ _ _)\n#align lipschitz_with_max lipschitz_with_max\n\n",
 "lipschitz_with_iff_dist_le_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/-\nCopyright (c) 2018 Rohan Mitta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Rohan Mitta, Kevin Buzzard, Alistair Tucker, Johannes Hölzl, Yury Kudryashov\n-/\ntheorem lipschitz_with_iff_dist_le_mul [pseudo_metric_space α] [pseudo_metric_space β] {K : nnreal} {f : α → β} :\n    lipschitz_with K f ↔ ∀ x y, dist (f x) (f y) ≤ K * dist x y :=\n  by\n  simp only [lipschitz_with, edist_nndist, dist_nndist]\n  norm_cast\n#align lipschitz_with_iff_dist_le_mul lipschitz_with_iff_dist_le_mul\n\n",
 "lipschitz_on_with_iff_restrict":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem maps_to.lipschitz_on_with_iff_restrict [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal}\n    {f : α → β} {s : set α} {t : set β} (h : MapsTo f s t) :\n    lipschitz_on_with K f s ↔ lipschitz_with K (h.restrict f s t) :=\n  lipschitz_on_with_iff_restrict\n#align maps_to.lipschitz_on_with_iff_restrict maps_to.lipschitz_on_with_iff_restrict\n\n",
 "lipschitz_on_with_iff_dist_le_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem lipschitz_on_with_iff_dist_le_mul [pseudo_metric_space α] [pseudo_metric_space β] {K : nnreal} {s : set α}\n    {f : α → β} : lipschitz_on_with K f s ↔ ∀ x ∈ s, ∀ y ∈ s, dist (f x) (f y) ≤ K * dist x y :=\n  by\n  simp only [lipschitz_on_with, edist_nndist, dist_nndist]\n  norm_cast\n#align lipschitz_on_with_iff_dist_le_mul lipschitz_on_with_iff_dist_le_mul\n\n",
 "lipschitz_on_with_empty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp]\ntheorem lipschitz_on_with_empty [pseudo_emetric_space α] [pseudo_emetric_space β] (K : nnreal) (f : α → β) :\n    lipschitz_on_with K f ∅ := fun x x_in y y_in => false.elim x_in\n#align lipschitz_on_with_empty lipschitz_on_with_empty\n\n",
 "lipschitz_on_with":
 "protected theorem lipschitz_on_with (h : lipschitz_with K f) (s : set α) : lipschitz_on_with K f s := fun x _ y _ =>\n  h x y\n#align lipschitz_on_with lipschitz_on_with\n\n",
 "lipschitz_on_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n@[simp]\ntheorem lipschitz_on_univ [pseudo_emetric_space α] [pseudo_emetric_space β] {K : nnreal} {f : α → β} :\n    lipschitz_on_with K f univ ↔ lipschitz_with K f := by simp [lipschitz_on_with, lipschitz_with]\n#align lipschitz_on_univ lipschitz_on_univ\n\n",
 "left_of_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\ntheorem bounded.left_of_prod (h : bounded (lower_set.prod s t)) (ht : t.nonempty) : bounded s := by\n  simpa only [fst_image_prod s ht] using (@lipschitz_with.prod_fst α β _ _).bounded_image h\n#align bounded.left_of_prod bounded.left_of_prod\n\n",
 "le_add_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\nprotected theorem le_add_mul {f : α → exprℝ} {K : nnreal} (h : lipschitz_on_with K f s) {x : α} (hx : x ∈ s) {y : α}\n    (hy : y ∈ s) : f x ≤ f y + K * dist x y :=\n  sub_le_iff_le_add'.1 <| le_trans (le_abs_self _) <| h.dist_le_mul x hx y hy\n#align le_add_mul le_add_mul\n\n",
 "iterate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\nprotected theorem iterate {f : α → α} (hf : lipschitz_with K f) : ∀ n, lipschitz_with (K ^ n) («expr ^[ ]» f n)\n  | 0 => by simpa only [pow_zero] using lipschitz_with.id\n  | n + 1 => by rw [pow_succ'] <;> exact (iterate n).comp hf\n#align iterate iterate\n\n",
 "iff_le_add_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\nprotected theorem iff_le_add_mul {f : α → exprℝ} {K : nnreal} :\n    lipschitz_on_with K f s ↔ ∀ x ∈ s, ∀ y ∈ s, f x ≤ f y + K * dist x y :=\n  ⟨lipschitz_on_with.le_add_mul, lipschitz_on_with.of_le_add_mul K⟩\n#align iff_le_add_mul iff_le_add_mul\n\n",
 "id":
 "#print id /-\nprotected theorem id : lipschitz_with 1 (@id α) :=\n  lipschitz_with.of_edist_le fun x y => le_rfl\n#align id id\n-/\n\n",
 "extend_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A function `f : α → ℝ` which is `K`-Lipschitz on a subset `s` admits a `K`-Lipschitz extension\nto the whole space. -/\ntheorem lipschitz_on_with.extend_real [pseudo_metric_space α] {f : α → exprℝ} {s : set α} {K : nnreal}\n    (hf : lipschitz_on_with K f s) : ∃ g : α → exprℝ, lipschitz_with K g ∧ EqOn f g s :=\n  by\n  /- An extension is given by `g y = Inf {f x + K * dist y x | x ∈ s}`. Taking `x = y`, one has\n    `g y ≤ f y` for `y ∈ s`, and the other inequality holds because `f` is `K`-Lipschitz, so that it\n    can not counterbalance the growth of `K * dist y x`. One readily checks from the formula that the\n    extended function is also `K`-Lipschitz. -/\n  rcases eq_empty_or_nonempty s with (rfl | hs)\n  · exact ⟨fun x => 0, (lipschitz_with.const _).weaken (zero_le _), eq_on_empty _ _⟩\n  have : nonempty s := by simp only [hs, nonempty_coe_sort]\n  let g := fun y : α => infᵢ fun x : s => f x + K * dist y x\n  have B : ∀ y : α, BddBelow (range fun x : s => f x + K * dist y x) :=\n    by\n    intro y\n    rcases hs with ⟨z, hz⟩\n    refine' ⟨f z - K * dist y z, _⟩\n    rintro w ⟨t, rfl⟩\n    dsimp\n    rw [sub_le_iff_le_add, add_assoc, ← mul_add, add_comm (dist y t)]\n    calc\n      f z ≤ f t + K * dist z t := hf.le_add_mul hz t.2\n      _ ≤ f t + K * (dist y z + dist y t) :=\n        add_le_add_left (mul_le_mul_of_nonneg_left (dist_triangle_left _ _ _) K.2) _\n      \n  have E : eq_on f g s := by\n    intro x hx\n    refine' le_antisymm (le_cinfᵢ fun y => hf.le_add_mul hx y.2) _\n    simpa only [add_zero, subtype.coe_mk, mul_zero, dist_self] using cinfᵢ_le (B x) ⟨x, hx⟩\n  refine' ⟨g, lipschitz_with.of_le_add_mul K fun x y => _, E⟩\n  rw [← sub_le_iff_le_add]\n  refine' le_cinfᵢ fun z => _\n  rw [sub_le_iff_le_add]\n  calc\n    g x ≤ f z + K * dist x z := cinfᵢ_le (B x) _\n    _ ≤ f z + K * dist y z + K * dist x y :=\n      by\n      rw [add_assoc, ← mul_add, add_comm (dist y z)]\n      exact add_le_add_left (mul_le_mul_of_nonneg_left (dist_triangle _ _ _) K.2) _\n    \n#align lipschitz_on_with.extend_real lipschitz_on_with.extend_real\n\n",
 "extend_pi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- A function `f : α → (ι → ℝ)` which is `K`-Lipschitz on a subset `s` admits a `K`-Lipschitz\nextension to the whole space.\nTODO: state the same result (with the same proof) for the space `ℓ^∞ (ι, ℝ)` over a possibly\ninfinite type `ι`. -/\ntheorem lipschitz_on_with.extend_pi [pseudo_metric_space α] [fintype ι] {f : α → ι → exprℝ} {s : set α} {K : nnreal}\n    (hf : lipschitz_on_with K f s) : ∃ g : α → ι → exprℝ, lipschitz_with K g ∧ EqOn f g s :=\n  by\n  have : ∀ i, ∃ g : α → exprℝ, lipschitz_with K g ∧ eq_on (fun x => f x i) g s :=\n    by\n    intro i\n    have : lipschitz_on_with K (fun x : α => f x i) s :=\n      by\n      apply lipschitz_on_with.of_dist_le_mul fun x hx y hy => _\n      exact (dist_le_pi_dist _ _ i).trans (hf.dist_le_mul x hx y hy)\n    exact this.extend_real\n  choose g hg using this\n  refine' ⟨fun x i => g i x, lipschitz_with.of_dist_le_mul fun x y => _, _⟩\n  · exact (dist_pi_le_iff (mul_nonneg K.2 dist_nonneg)).2 fun i => (hg i).1.dist_le_mul x y\n  · intro x hx\n    ext1 i\n    exact (hg i).2 hx\n#align lipschitz_on_with.extend_pi lipschitz_on_with.extend_pi\n\n",
 "eval":
 "protected theorem eval {α : ι → Type u} [∀ i, pseudo_emetric_space (α i)] [fintype ι] (i : ι) :\n    lipschitz_with 1 (function.eval i : (∀ i, α i) → α i) :=\n  lipschitz_with.of_edist_le fun f g => by convert edist_le_pi_edist f g i\n#align eval eval\n\n",
 "edist_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem edist_lt_top (hf : lipschitz_with K f) {x y : α} (h : edist x y ≠ «expr⊤») : edist (f x) (f y) < «expr⊤» :=\n  (hf x y).trans_lt <| ennreal.mul_lt_top ennreal.coe_ne_top h\n#align edist_lt_top edist_lt_top\n\n",
 "edist_lt_of_edist_lt_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem edist_lt_of_edist_lt_div (hf : lipschitz_on_with K f s) {x y : α} (hx : x ∈ s) (hy : y ∈ s) {d : ennreal}\n    (hd : edist x y < d / K) : edist (f x) (f y) < d :=\n  (lipschitz_on_with_iff_restrict.mp hf).edist_lt_of_edist_lt_div <| show edist (⟨x, hx⟩ : s) ⟨y, hy⟩ < d / K from hd\n#align edist_lt_of_edist_lt_div edist_lt_of_edist_lt_div\n\n",
 "edist_lt_mul_of_lt":
 "theorem edist_lt_mul_of_lt (h : lipschitz_with K f) (hK : K ≠ 0) (hr : edist x y < r) : edist (f x) (f y) < K * r :=\n  (h x y).trans_lt <| (ennreal.mul_lt_mul_left (ennreal.coe_ne_zero.2 hK) ennreal.coe_ne_top).2 hr\n#align edist_lt_mul_of_lt edist_lt_mul_of_lt\n\n",
 "edist_le_mul_of_le":
 "theorem edist_le_mul_of_le (h : lipschitz_with K f) (hr : edist x y ≤ r) : edist (f x) (f y) ≤ K * r :=\n  (h x y).trans <| ennreal.mul_left_mono hr\n#align edist_le_mul_of_le edist_le_mul_of_le\n\n",
 "edist_le_mul":
 "theorem edist_le_mul (h : lipschitz_with K f) (x y : α) : edist (f x) (f y) ≤ K * edist x y :=\n  h x y\n#align edist_le_mul edist_le_mul\n\n",
 "edist_iterate_succ_le_geometric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem edist_iterate_succ_le_geometric {f : α → α} (hf : lipschitz_with K f) (x n) :\n    edist ((«expr ^[ ]» f n) x) ((«expr ^[ ]» f (n + 1)) x) ≤ edist x (f x) * K ^ n :=\n  by\n  rw [iterate_succ, mul_comm]\n  simpa only [ennreal.coe_pow] using (hf.iterate n) x (f x)\n#align edist_iterate_succ_le_geometric edist_iterate_succ_le_geometric\n\n",
 "ediam_image_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem ediam_image_le (hf : lipschitz_with K f) (s : set α) : emetric.diam («expr '' » f s) ≤ K * emetric.diam s :=\n  by\n  apply emetric.diam_le\n  rintro _ ⟨x, hx, rfl⟩ _ ⟨y, hy, rfl⟩\n  exact hf.edist_le_mul_of_le (emetric.edist_le_diam_of_mem hx hy)\n#align ediam_image_le ediam_image_le\n\n",
 "dist_right":
 "protected theorem dist_right (x : α) : lipschitz_with 1 (dist x) :=\n  lipschitz_with.of_le_add fun y z => dist_triangle_right _ _ _\n#align dist_right dist_right\n\n",
 "dist_lt_mul_of_lt":
 "theorem dist_lt_mul_of_lt (hf : lipschitz_with K f) (hK : K ≠ 0) (hr : dist x y < r) : dist (f x) (f y) < K * r :=\n  (hf.dist_le_mul x y).trans_lt <| (mul_lt_mul_left <| nnreal.coe_pos.2 hK.bot_lt).2 hr\n#align dist_lt_mul_of_lt dist_lt_mul_of_lt\n\n",
 "dist_left":
 "protected theorem dist_left (y : α) : lipschitz_with 1 fun x => dist x y :=\n  lipschitz_with.of_le_add fun x z => by\n    rw [add_comm]\n    apply dist_triangle\n#align dist_left dist_left\n\n",
 "dist_le_mul_of_le":
 "theorem dist_le_mul_of_le (hf : lipschitz_with K f) (hr : dist x y ≤ r) : dist (f x) (f y) ≤ K * r :=\n  (hf.dist_le_mul x y).trans <| mul_le_mul_of_nonneg_left hr K.coe_nonneg\n#align dist_le_mul_of_le dist_le_mul_of_le\n\n",
 "dist_iterate_succ_le_geometric":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem dist_iterate_succ_le_geometric {f : α → α} (hf : lipschitz_with K f) (x n) :\n    dist ((«expr ^[ ]» f n) x) ((«expr ^[ ]» f (n + 1)) x) ≤ dist x (f x) * K ^ n :=\n  by\n  rw [iterate_succ, mul_comm]\n  simpa only [nnreal.coe_pow] using (hf.iterate n).dist_le_mul x (f x)\n#align dist_iterate_succ_le_geometric dist_iterate_succ_le_geometric\n\n",
 "dist":
 "protected theorem dist : lipschitz_with 2 (function.uncurry <| @dist α _) :=\n  lipschitz_with.uncurry lipschitz_with.dist_left lipschitz_with.dist_right\n#align dist dist\n\n",
 "diam_image_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem diam_image_le (hf : lipschitz_with K f) (s : set α) (hs : metric.bounded s) :\n    metric.diam («expr '' » f s) ≤ K * metric.diam s :=\n  metric.diam_le_of_forall_dist_le (mul_nonneg K.coe_nonneg metric.diam_nonneg) <|\n    ball_image_iff.2 fun x hx =>\n      ball_image_iff.2 fun y hy => hf.dist_le_mul_of_le <| metric.dist_le_diam_of_mem hs hx hy\n#align diam_image_le diam_image_le\n\n",
 "continuous_prod_of_continuous_lipschitz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/-- Consider a function `f : α × β → γ`. Suppose that it is continuous on each “vertical section”\n`{a} × univ`, `a : α`, and is Lipschitz continuous on each “horizontal section”\n`univ × {b}`, `b : β` with the same Lipschitz constant `K`. Then it is continuous.\n\nThe actual statement uses (Lipschitz) continuity of `λ y, f (a, y)` and `λ x, f (x, b)` instead\nof continuity of `f` on subsets of the product space. -/\ntheorem continuous_prod_of_continuous_lipschitz [pseudo_emetric_space α] [topological_space β] [pseudo_emetric_space γ]\n    (f : α × β → γ) (K : nnreal) (ha : ∀ a, continuous fun y => f (a, y))\n    (hb : ∀ b, lipschitz_with K fun x => f (x, b)) : continuous f :=\n  by\n  simp only [continuous_iff_continuous_on_univ, ← univ_prod_univ, ← lipschitz_on_univ] at *\n  exact continuous_on_prod_of_continuous_on_lipschitz_on f K (fun a _ => ha a) fun b _ => hb b\n#align continuous_prod_of_continuous_lipschitz continuous_prod_of_continuous_lipschitz\n\n",
 "continuous_on_prod_of_continuous_on_lipschitz_on":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds_within -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/-- Consider a function `f : α × β → γ`. Suppose that it is continuous on each “vertical fiber”\n`{a} × t`, `a ∈ s`, and is Lipschitz continuous on each “horizontal fiber” `s × {b}`, `b ∈ t`\nwith the same Lipschitz constant `K`. Then it is continuous on `s × t`.\n\nThe actual statement uses (Lipschitz) continuity of `λ y, f (a, y)` and `λ x, f (x, b)` instead\nof continuity of `f` on subsets of the product space. -/\ntheorem continuous_on_prod_of_continuous_on_lipschitz_on [pseudo_emetric_space α] [topological_space β]\n    [pseudo_emetric_space γ] (f : α × β → γ) {s : set α} {t : set β} (K : nnreal)\n    (ha : ∀ a ∈ s, continuous_on (fun y => f (a, y)) t) (hb : ∀ b ∈ t, lipschitz_on_with K (fun x => f (x, b)) s) :\n    continuous_on f (lower_set.prod s t) :=\n  by\n  rintro ⟨x, y⟩ ⟨hx : x ∈ s, hy : y ∈ t⟩\n  refine' emetric.tendsto_nhds.2 fun ε (ε0 : 0 < ε) => _\n  replace ε0 : 0 < ε / 2 := ennreal.half_pos (ne_of_gt ε0)\n  have εK : 0 < ε / 2 / K := ennreal.div_pos_iff.2 ⟨ε0.ne', ennreal.coe_ne_top⟩\n  have A : s ∩ emetric.ball x (ε / 2 / K) ∈ nhds_within s x := inter_mem_nhds_within _ (emetric.ball_mem_nhds _ εK)\n  have B : { b : β | b ∈ t ∧ edist (f (x, b)) (f (x, y)) < ε / 2 } ∈ nhds_within t y :=\n    inter_mem self_mem_nhds_within (ha x hx y hy (emetric.ball_mem_nhds _ ε0))\n  filter_upwards [nhds_within_prod A B]\n  rintro ⟨a, b⟩ ⟨⟨has : a ∈ s, hax : edist a x < ε / 2 / K⟩, hbt : b ∈ t, hby : edist (f (x, b)) (f (x, y)) < ε / 2⟩\n  calc\n    edist (f (a, b)) (f (x, y)) ≤ edist (f (a, b)) (f (x, b)) + edist (f (x, b)) (f (x, y)) := edist_triangle _ _ _\n    _ < ε / 2 + ε / 2 := ennreal.add_lt_add ((hb _ hbt).edist_lt_of_edist_lt_div has hx hax) hby\n    _ = ε := ennreal.add_halves ε\n    \n#align continuous_on_prod_of_continuous_on_lipschitz_on continuous_on_prod_of_continuous_on_lipschitz_on\n\n",
 "continuous_on":
 "protected theorem continuous_on (hf : lipschitz_on_with K f s) : continuous_on f s :=\n  hf.uniform_continuous_on.continuous_on\n#align continuous_on continuous_on\n\n",
 "continuous_at_of_locally_lipschitz":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- If a function is locally Lipschitz around a point, then it is continuous at this point. -/\ntheorem continuous_at_of_locally_lipschitz [pseudo_metric_space α] [pseudo_metric_space β] {f : α → β} {x : α}\n    {r : exprℝ} (hr : 0 < r) (K : exprℝ) (h : ∀ y, dist y x < r → dist (f y) (f x) ≤ K * dist y x) :\n    continuous_at f x :=\n  by\n  -- We use `h` to squeeze `dist (f y) (f x)` between `0` and `K * dist y x`\n  refine'\n    tendsto_iff_dist_tendsto_zero.2\n      (squeeze_zero' (eventually_of_forall fun _ => dist_nonneg) (mem_of_superset (ball_mem_nhds _ hr) h) _)\n  -- Then show that `K * dist y x` tends to zero as `y → x`\n  refine' (continuous_const.mul (continuous_id.dist continuous_const)).tendsto' _ _ _\n  simp\n#align continuous_at_of_locally_lipschitz continuous_at_of_locally_lipschitz\n\n",
 "continuous":
 "/-- A Lipschitz function is continuous -/\nprotected theorem continuous (hf : lipschitz_with K f) : continuous f :=\n  hf.uniform_continuous.continuous\n#align continuous continuous\n\n",
 "const_min":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem const_min (hf : lipschitz_with Kf f) (a : exprℝ) : lipschitz_with Kf fun x => min a (f x) := by\n  simpa only [min_comm] using hf.min_const a\n#align const_min const_min\n\n",
 "const_max":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem const_max (hf : lipschitz_with Kf f) (a : exprℝ) : lipschitz_with Kf fun x => max a (f x) := by\n  simpa only [max_comm] using hf.max_const a\n#align const_max const_max\n\n",
 "const":
 "protected theorem const (b : β) : lipschitz_with 0 fun a : α => b := fun x y => by simp only [edist_self, zero_le]\n#align const const\n\n",
 "comp_lipschitz_on_with":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\ntheorem comp_lipschitz_on_with {Kf Kg : nnreal} {f : β → γ} {g : α → β} {s : set α} (hf : lipschitz_with Kf f)\n    (hg : lipschitz_on_with Kg g s) : lipschitz_on_with (Kf * Kg) (f ∘ g) s :=\n  lipschitz_on_with_iff_restrict.mpr <| hf.comp hg.to_restrict\n#align comp_lipschitz_on_with comp_lipschitz_on_with\n\n",
 "comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\nprotected theorem comp {g : β → γ} {t : set β} {Kg : nnreal} (hg : lipschitz_on_with Kg g t)\n    (hf : lipschitz_on_with K f s) (hmaps : MapsTo f s t) : lipschitz_on_with (Kg * K) (g ∘ f) s :=\n  lipschitz_on_with_iff_restrict.mpr <| hg.to_restrict.comp (hf.to_restrict_maps_to hmaps)\n#align comp comp\n\n",
 "comap_cobounded_le":
 "theorem comap_cobounded_le (hf : lipschitz_with K f) : comap f (bornology.cobounded β) ≤ bornology.cobounded α :=\n  (hf.to_locally_bounded_map f).2\n#align comap_cobounded_le comap_cobounded_le\n\n",
 "coe_to_locally_bounded_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_locally_bounded_map (hf : lipschitz_with K f) : «expr⇑ » (hf.to_locally_bounded_map f) = f :=\n  rfl\n#align coe_to_locally_bounded_map coe_to_locally_bounded_map\n\n",
 "bounded_prod_of_nonempty":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\ntheorem bounded_prod_of_nonempty (hs : s.nonempty) (ht : t.nonempty) :\n    bounded (lower_set.prod s t) ↔ bounded s ∧ bounded t :=\n  ⟨fun h => ⟨h.left_of_prod ht, h.right_of_prod hs⟩, fun h => h.1.prod h.2⟩\n#align bounded_prod_of_nonempty bounded_prod_of_nonempty\n\n",
 "bounded_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\ntheorem bounded_prod : bounded (lower_set.prod s t) ↔ s = ∅ ∨ t = ∅ ∨ bounded s ∧ bounded t :=\n  by\n  rcases s.eq_empty_or_nonempty with (rfl | hs); · simp\n  rcases t.eq_empty_or_nonempty with (rfl | ht); · simp\n  simp only [bounded_prod_of_nonempty hs ht, hs.ne_empty, ht.ne_empty, false_or_iff]\n#align bounded_prod bounded_prod\n\n",
 "bounded_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem bounded_image (hf : lipschitz_with K f) {s : set α} (hs : metric.bounded s) : metric.bounded («expr '' » f s) :=\n  metric.bounded_iff_ediam_ne_top.2 <|\n    ne_top_of_le_ne_top (ennreal.mul_ne_top ennreal.coe_ne_top hs.ediam_ne_top) (hf.ediam_image_le s)\n#align bounded_image bounded_image\n\n",
 "Prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n#print Prod /-\nprotected theorem Prod {f : α → β} {Kf : nnreal} (hf : lipschitz_with Kf f) {g : α → γ} {Kg : nnreal}\n    (hg : lipschitz_with Kg g) : lipschitz_with (max Kf Kg) fun x => (f x, g x) :=\n  by\n  intro x y\n  rw [ennreal.coe_mono.map_max, prod.edist_eq, ennreal.max_mul]\n  exact max_le_max (hf x y) (hg x y)\n#align prod Prod\n-/\n\n"}