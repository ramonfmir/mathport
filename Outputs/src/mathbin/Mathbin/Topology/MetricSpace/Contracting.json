{"to_lipschitz_with":
 "/-\nCopyright (c) 2019 Rohan Mitta. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Rohan Mitta, Kevin Buzzard, Alistair Tucker, Johannes Hölzl, Yury Kudryashov\n-/\ntheorem to_lipschitz_with (hf : ContractingWith K f) : LipschitzWith K f :=\n  hf.2\n#align to_lipschitz_with to_lipschitz_with\n\n",
 "tendsto_iterate_fixed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iterate_fixed_point (x) : Tendsto (fun n => («expr ^[ ]» f n) x) atTop (nhds <| fixedPoint f hf) :=\n  by\n  convert tendsto_iterate_efixed_point hf (edist_ne_top x _)\n  refine' (fixed_point_unique _ _).symm\n  apply efixed_point_is_fixed_pt\n#align tendsto_iterate_fixed_point tendsto_iterate_fixed_point\n\n",
 "tendsto_iterate_efixed_point'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iterate_efixed_point' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) :\n    Tendsto (fun n => («expr ^[ ]» f n) x) atTop (nhds <| efixedPoint' f hsc hsf hf x hxs hx) :=\n  (Classical.choose_spec <| hf.exists_fixed_point' hsc hsf hxs hx).snd.2.1\n#align tendsto_iterate_efixed_point' tendsto_iterate_efixed_point'\n\n",
 "tendsto_iterate_efixed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_iterate_efixed_point (hf : ContractingWith K f) {x : α} (hx : edist x (f x) ≠ ennreal.top) :\n    Tendsto (fun n => («expr ^[ ]» f n) x) atTop (nhds <| efixedPoint f hf x hx) :=\n  (Classical.choose_spec <| hf.exists_fixed_point x hx).2.1\n#align tendsto_iterate_efixed_point tendsto_iterate_efixed_point\n\n",
 "restrict":
 "/-- If a map `f` is `contracting_with K`, and `s` is a forward-invariant set, then\nrestriction of `f` to `s` is `contracting_with K` as well. -/\ntheorem restrict (hf : ContractingWith K f) {s : Set α} (hs : MapsTo f s s) : ContractingWith K (hs.restrict f s s) :=\n  ⟨hf.1, fun x y => hf.2 x y⟩\n#align restrict restrict\n\n",
 "one_sub_K_pos'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem one_sub_K_pos' (hf : ContractingWith K f) : (0 : ennreal) < 1 - K := by simp [hf.1]\n#align one_sub_K_pos' one_sub_K_pos'\n\n",
 "one_sub_K_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem one_sub_K_pos (hf : ContractingWith K f) : (0 : exprℝ) < 1 - K :=\n  sub_pos.2 hf.1\n#align one_sub_K_pos one_sub_K_pos\n\n",
 "one_sub_K_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem one_sub_K_ne_zero (hf : ContractingWith K f) : (1 : ennreal) - K ≠ 0 :=\n  ne_of_gt hf.one_sub_K_pos'\n#align one_sub_K_ne_zero one_sub_K_ne_zero\n\n",
 "one_sub_K_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem one_sub_K_ne_top : (1 : ennreal) - K ≠ ennreal.top :=\n  by\n  norm_cast\n  exact ENNReal.coe_ne_top\n#align one_sub_K_ne_top one_sub_K_ne_top\n\n",
 "is_fixed_pt_fixed_point_iterate":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- If a map `f` has a contracting iterate `f^[n]`, then the fixed point of `f^[n]` is also a fixed\npoint of `f`. -/\ntheorem is_fixed_pt_fixed_point_iterate {n : ℕ} (hf : ContractingWith K («expr ^[ ]» f n)) :\n    IsFixedPt f (hf.fixed_point («expr ^[ ]» f n)) :=\n  by\n  set x := hf.fixed_point («expr ^[ ]» f n)\n  have hx : («expr ^[ ]» f n) x = x := hf.fixed_point_is_fixed_pt\n  have := hf.to_lipschitz_with.dist_le_mul x (f x)\n  rw [← iterate_succ_apply, iterate_succ_apply', hx] at this\n  contrapose! this\n  have := dist_pos.2 (ne.symm this)\n  simpa only [NNReal.coe_one, one_mul, NNReal.val_eq_coe] using (mul_lt_mul_right this).mpr hf.left\n#align is_fixed_pt_fixed_point_iterate is_fixed_pt_fixed_point_iterate\n\n",
 "fixed_point_unique'":
 "theorem fixed_point_unique' {x y} (hx : IsFixedPt f x) (hy : IsFixedPt f y) : x = y :=\n  (hf.eq_or_edist_eq_top_of_fixed_points hx hy).resolve_right (edist_ne_top _ _)\n#align fixed_point_unique' fixed_point_unique'\n\n",
 "fixed_point_unique":
 "theorem fixed_point_unique {x} (hx : IsFixedPt f x) : x = fixedPoint f hf :=\n  hf.fixed_point_unique' hx hf.fixed_point_is_fixed_pt\n#align fixed_point_unique fixed_point_unique\n\n",
 "fixed_point_lipschitz_in_map":
 "theorem fixed_point_lipschitz_in_map {g : α → α} (hg : ContractingWith K g) {C} (hfg : ∀ z, dist (f z) (g z) ≤ C) :\n    dist (fixedPoint f hf) (fixedPoint g hg) ≤ C / (1 - K) :=\n  hf.dist_fixed_point_fixed_point_of_dist_le' g hf.fixed_point_is_fixed_pt hg.fixed_point_is_fixed_pt hfg\n#align fixed_point_lipschitz_in_map fixed_point_lipschitz_in_map\n\n",
 "fixed_point_is_fixed_pt":
 "/-- The point provided by `contracting_with.fixed_point` is actually a fixed point. -/\ntheorem fixed_point_is_fixed_pt : IsFixedPt f (fixedPoint f hf) :=\n  hf.efixed_point_is_fixed_pt _\n#align fixed_point_is_fixed_pt fixed_point_is_fixed_pt\n\n",
 "exists_fixed_point'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- Banach fixed-point theorem for maps contracting on a complete subset. -/\ntheorem exists_fixed_point' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) :\n    ∃ y ∈ s,\n      IsFixedPt f y ∧\n        Tendsto (fun n => («expr ^[ ]» f n) x) atTop ((nhds) y) ∧\n          ∀ n : ℕ, edist ((«expr ^[ ]» f n) x) y ≤ edist x (f x) * K ^ n / (1 - K) :=\n  by\n  haveI := hsc.complete_space_coe\n  rcases hf.exists_fixed_point ⟨x, hxs⟩ hx with ⟨y, hfy, h_tendsto, hle⟩\n  refine' ⟨y, y.2, Subtype.ext_iff_val.1 hfy, _, fun n => _⟩\n  · convert(continuous_subtype_coe.tendsto _).comp h_tendsto\n    ext n\n    simp only [(· ∘ ·), maps_to.iterate_restrict, maps_to.coe_restrict_apply, Subtype.coe_mk]\n  · convert hle n\n    rw [maps_to.iterate_restrict, eq_comm, maps_to.coe_restrict_apply, Subtype.coe_mk]\n#align exists_fixed_point' exists_fixed_point'\n\n",
 "exists_fixed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- Banach fixed-point theorem, contraction mapping theorem, `emetric_space` version.\nA contracting map on a complete metric space has a fixed point.\nWe include more conclusions in this theorem to avoid proving them again later.\n\nThe main API for this theorem are the functions `efixed_point` and `fixed_point`,\nand lemmas about these functions. -/\ntheorem exists_fixed_point (hf : ContractingWith K f) (x : α) (hx : edist x (f x) ≠ ennreal.top) :\n    ∃ y,\n      IsFixedPt f y ∧\n        Tendsto (fun n => («expr ^[ ]» f n) x) atTop ((nhds) y) ∧\n          ∀ n : ℕ, edist ((«expr ^[ ]» f n) x) y ≤ edist x (f x) * K ^ n / (1 - K) :=\n  have : CauchySeq fun n => («expr ^[ ]» f n) x :=\n    cauchySeq_of_edist_le_geometric K (edist x (f x)) (ENNReal.coe_lt_one_iff.2 hf.1) hx\n      (hf.to_lipschitz_with.edist_iterate_succ_le_geometric x)\n  let ⟨y, hy⟩ := cauchySeq_tendsto_of_complete this\n  ⟨y, isFixedPt_of_tendsto_iterate hy hf.2.continuous.continuous_at, hy,\n    edist_le_of_edist_le_geometric_of_tendsto K (edist x (f x)) (hf.to_lipschitz_with.edist_iterate_succ_le_geometric x)\n      hy⟩\n#align exists_fixed_point exists_fixed_point\n\n",
 "eq_or_edist_eq_top_of_fixed_points":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem eq_or_edist_eq_top_of_fixed_points (hf : ContractingWith K f) {x y} (hx : IsFixedPt f x) (hy : IsFixedPt f y) :\n    x = y ∨ edist x y = ennreal.top :=\n  by\n  refine' or_iff_not_imp_right.2 fun h => edist_le_zero.1 _\n  simpa only [hx.eq, edist_self, add_zero, ENNReal.zero_div] using hf.edist_le_of_fixed_point h hy\n#align eq_or_edist_eq_top_of_fixed_points eq_or_edist_eq_top_of_fixed_points\n\n",
 "efixed_point_mem'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n-- avoid `efixed_point _` in pretty printer\ntheorem efixed_point_mem' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) :\n    efixedPoint' f hsc hsf hf x hxs hx ∈ s :=\n  (Classical.choose_spec <| hf.exists_fixed_point' hsc hsf hxs hx).fst\n#align efixed_point_mem' efixed_point_mem'\n\n",
 "efixed_point_is_fixed_pt'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem efixed_point_is_fixed_pt' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) :\n    IsFixedPt f (efixedPoint' f hsc hsf hf x hxs hx) :=\n  (Classical.choose_spec <| hf.exists_fixed_point' hsc hsf hxs hx).snd.1\n#align efixed_point_is_fixed_pt' efixed_point_is_fixed_pt'\n\n",
 "efixed_point_is_fixed_pt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n-- avoid `efixed_point _` in pretty printer\ntheorem efixed_point_is_fixed_pt (hf : ContractingWith K f) {x : α} (hx : edist x (f x) ≠ ennreal.top) :\n    IsFixedPt f (efixedPoint f hf x hx) :=\n  (Classical.choose_spec <| hf.exists_fixed_point x hx).1\n#align efixed_point_is_fixed_pt efixed_point_is_fixed_pt\n\n",
 "efixed_point_eq_of_edist_lt_top'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- If a globally contracting map `f` has two complete forward-invariant sets `s`, `t`,\nand `x ∈ s` is at a finite distance from `y ∈ t`, then the `efixed_point'` constructed by `x`\nis the same as the `efixed_point'` constructed by `y`.\n\nThis lemma takes additional arguments stating that `f` contracts on `s` and `t` because this way\nit can be used to prove the desired equality with non-trivial proofs of these facts. -/\ntheorem efixed_point_eq_of_edist_lt_top' (hf : ContractingWith K f) {s : Set α} (hsc : IsComplete s)\n    (hsf : MapsTo f s s) (hfs : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s)\n    (hx : edist x (f x) ≠ ennreal.top) {t : Set α} (htc : IsComplete t) (htf : MapsTo f t t)\n    (hft : ContractingWith K <| htf.restrict f t t) {y : α} (hyt : y ∈ t) (hy : edist y (f y) ≠ ennreal.top)\n    (hxy : edist x y ≠ ennreal.top) : efixedPoint' f hsc hsf hfs x hxs hx = efixedPoint' f htc htf hft y hyt hy :=\n  by\n  refine' (hf.eq_or_edist_eq_top_of_fixed_points _ _).elim id fun h' => false.elim (ne_of_lt _ h') <;>\n    try apply efixed_point_is_fixed_pt'\n  change edist_lt_top_setoid.rel _ _\n  trans x;\n  · symm\n    apply edist_efixed_point_lt_top'\n  trans y\n  exact lt_top_iff_ne_top.2 hxy\n  apply edist_efixed_point_lt_top'\n#align efixed_point_eq_of_edist_lt_top' efixed_point_eq_of_edist_lt_top'\n\n",
 "efixed_point_eq_of_edist_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem efixed_point_eq_of_edist_lt_top (hf : ContractingWith K f) {x : α} (hx : edist x (f x) ≠ ennreal.top) {y : α}\n    (hy : edist y (f y) ≠ ennreal.top) (h : edist x y ≠ ennreal.top) : efixedPoint f hf x hx = efixedPoint f hf y hy :=\n  by\n  refine' (hf.eq_or_edist_eq_top_of_fixed_points _ _).elim id fun h' => false.elim (ne_of_lt _ h') <;>\n    try apply efixed_point_is_fixed_pt\n  change edist_lt_top_setoid.rel _ _\n  trans x;\n  · symm\n    exact hf.edist_efixed_point_lt_top hx\n  trans y\n  exacts[lt_top_iff_ne_top.2 h, hf.edist_efixed_point_lt_top hy]\n#align efixed_point_eq_of_edist_lt_top efixed_point_eq_of_edist_lt_top\n\n",
 "edist_le_of_fixed_point":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem edist_le_of_fixed_point (hf : ContractingWith K f) {x y} (h : edist x y ≠ ennreal.top) (hy : IsFixedPt f y) :\n    edist x y ≤ edist x (f x) / (1 - K) := by simpa only [hy.eq, edist_self, add_zero] using hf.edist_inequality h\n#align edist_le_of_fixed_point edist_le_of_fixed_point\n\n",
 "edist_inequality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem edist_inequality (hf : ContractingWith K f) {x y} (h : edist x y ≠ ennreal.top) :\n    edist x y ≤ (edist x (f x) + edist y (f y)) / (1 - K) :=\n  suffices edist x y ≤ edist x (f x) + edist y (f y) + K * edist x y by\n    rwa [ENNReal.le_div_iff_mul_le (or.inl hf.one_sub_K_ne_zero) (or.inl one_sub_K_ne_top), mul_comm,\n      ENNReal.sub_mul fun _ _ => h, one_mul, tsub_le_iff_right]\n  calc\n    edist x y ≤ edist x (f x) + edist (f x) (f y) + edist (f y) y := edist_triangle4 _ _ _ _\n    _ = edist x (f x) + edist y (f y) + edist (f x) (f y) := by rw [edist_comm y, add_right_comm]\n    _ ≤ edist x (f x) + edist y (f y) + K * edist x y := add_le_add le_rfl (hf.2 _ _)\n    \n#align edist_inequality edist_inequality\n\n",
 "edist_efixed_point_lt_top'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem edist_efixed_point_lt_top' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) :\n    edist x (efixedPoint' f hsc hsf hf x hxs hx) < ennreal.top :=\n  (hf.edist_efixed_point_le' hsc hsf hxs hx).trans_lt\n    (ENNReal.mul_lt_top hx <| ENNReal.inv_ne_top.2 hf.one_sub_K_ne_zero)\n#align edist_efixed_point_lt_top' edist_efixed_point_lt_top'\n\n",
 "edist_efixed_point_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem edist_efixed_point_lt_top (hf : ContractingWith K f) {x : α} (hx : edist x (f x) ≠ ennreal.top) :\n    edist x (efixedPoint f hf x hx) < ennreal.top :=\n  (hf.edist_efixed_point_le hx).trans_lt (ENNReal.mul_lt_top hx <| ENNReal.inv_ne_top.2 hf.one_sub_K_ne_zero)\n#align edist_efixed_point_lt_top edist_efixed_point_lt_top\n\n",
 "edist_efixed_point_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem edist_efixed_point_le' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) :\n    edist x (efixedPoint' f hsc hsf hf x hxs hx) ≤ edist x (f x) / (1 - K) :=\n  by\n  convert hf.apriori_edist_iterate_efixed_point_le' hsc hsf hxs hx 0\n  rw [pow_zero, mul_one]\n#align edist_efixed_point_le' edist_efixed_point_le'\n\n",
 "edist_efixed_point_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem edist_efixed_point_le (hf : ContractingWith K f) {x : α} (hx : edist x (f x) ≠ ennreal.top) :\n    edist x (efixedPoint f hf x hx) ≤ edist x (f x) / (1 - K) :=\n  by\n  convert hf.apriori_edist_iterate_efixed_point_le hx 0\n  simp only [pow_zero, mul_one]\n#align edist_efixed_point_le edist_efixed_point_le\n\n",
 "dist_le_of_fixed_point":
 "theorem dist_le_of_fixed_point (x) {y} (hy : IsFixedPt f y) : dist x y ≤ dist x (f x) / (1 - K) := by\n  simpa only [hy.eq, dist_self, add_zero] using hf.dist_inequality x y\n#align dist_le_of_fixed_point dist_le_of_fixed_point\n\n",
 "dist_le_mul":
 "theorem dist_le_mul (x y : α) : dist (f x) (f y) ≤ K * dist x y :=\n  hf.to_lipschitz_with.dist_le_mul x y\n#align dist_le_mul dist_le_mul\n\n",
 "dist_inequality":
 "theorem dist_inequality (x y) : dist x y ≤ (dist x (f x) + dist y (f y)) / (1 - K) :=\n  suffices dist x y ≤ dist x (f x) + dist y (f y) + K * dist x y by\n    rwa [le_div_iff hf.one_sub_K_pos, mul_comm, sub_mul, one_mul, sub_le_iff_le_add]\n  calc\n    dist x y ≤ dist x (f x) + dist y (f y) + dist (f x) (f y) := dist_triangle4_right _ _ _ _\n    _ ≤ dist x (f x) + dist y (f y) + K * dist x y := add_le_add_left (hf.dist_le_mul _ _) _\n    \n#align dist_inequality dist_inequality\n\n",
 "dist_fixed_point_le":
 "theorem dist_fixed_point_le (x) : dist x (fixedPoint f hf) ≤ dist x (f x) / (1 - K) :=\n  hf.dist_le_of_fixed_point x hf.fixed_point_is_fixed_pt\n#align dist_fixed_point_le dist_fixed_point_le\n\n",
 "dist_fixed_point_fixed_point_of_dist_le'":
 "/-- Let `f` be a contracting map with constant `K`; let `g` be another map uniformly\n`C`-close to `f`. If `x` and `y` are their fixed points, then `dist x y ≤ C / (1 - K)`. -/\ntheorem dist_fixed_point_fixed_point_of_dist_le' (g : α → α) {x y} (hx : IsFixedPt f x) (hy : IsFixedPt g y) {C}\n    (hfg : ∀ z, dist (f z) (g z) ≤ C) : dist x y ≤ C / (1 - K) :=\n  calc\n    dist x y = dist y x := dist_comm x y\n    _ ≤ dist y (f y) / (1 - K) := (hf.dist_le_of_fixed_point y hx)\n    _ = dist (f y) (g y) / (1 - K) := by rw [hy.eq, dist_comm]\n    _ ≤ C / (1 - K) := (div_le_div_right hf.one_sub_K_pos).2 (hfg y)\n    \n#align dist_fixed_point_fixed_point_of_dist_le' dist_fixed_point_fixed_point_of_dist_le'\n\n",
 "apriori_edist_iterate_efixed_point_le'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem apriori_edist_iterate_efixed_point_le' {s : Set α} (hsc : IsComplete s) (hsf : MapsTo f s s)\n    (hf : ContractingWith K <| hsf.restrict f s s) {x : α} (hxs : x ∈ s) (hx : edist x (f x) ≠ ennreal.top) (n : ℕ) :\n    edist ((«expr ^[ ]» f n) x) (efixedPoint' f hsc hsf hf x hxs hx) ≤ edist x (f x) * K ^ n / (1 - K) :=\n  (Classical.choose_spec <| hf.exists_fixed_point' hsc hsf hxs hx).snd.2.2 n\n#align apriori_edist_iterate_efixed_point_le' apriori_edist_iterate_efixed_point_le'\n\n",
 "apriori_edist_iterate_efixed_point_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem apriori_edist_iterate_efixed_point_le (hf : ContractingWith K f) {x : α} (hx : edist x (f x) ≠ ennreal.top)\n    (n : ℕ) : edist ((«expr ^[ ]» f n) x) (efixedPoint f hf x hx) ≤ edist x (f x) * K ^ n / (1 - K) :=\n  (Classical.choose_spec <| hf.exists_fixed_point x hx).2.2 n\n#align apriori_edist_iterate_efixed_point_le apriori_edist_iterate_efixed_point_le\n\n",
 "apriori_dist_iterate_fixed_point_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\ntheorem apriori_dist_iterate_fixed_point_le (x n) :\n    dist ((«expr ^[ ]» f n) x) (fixedPoint f hf) ≤ dist x (f x) * K ^ n / (1 - K) :=\n  le_trans (hf.aposteriori_dist_iterate_fixed_point_le x n) <|\n    (div_le_div_right hf.one_sub_K_pos).2 <| hf.to_lipschitz_with.dist_iterate_succ_le_geometric x n\n#align apriori_dist_iterate_fixed_point_le apriori_dist_iterate_fixed_point_le\n\n",
 "aposteriori_dist_iterate_fixed_point_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/-- Aposteriori estimates on the convergence of iterates to the fixed point. -/\ntheorem aposteriori_dist_iterate_fixed_point_le (x n) :\n    dist ((«expr ^[ ]» f n) x) (fixedPoint f hf) ≤ dist ((«expr ^[ ]» f n) x) ((«expr ^[ ]» f (n + 1)) x) / (1 - K) :=\n  by\n  rw [iterate_succ']\n  apply hf.dist_fixed_point_le\n#align aposteriori_dist_iterate_fixed_point_le aposteriori_dist_iterate_fixed_point_le\n\n"}