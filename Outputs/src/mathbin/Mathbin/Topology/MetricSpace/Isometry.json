{"trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem trans_apply (h₁ : «expr ≃ᵢ » α β) (h₂ : «expr ≃ᵢ » β γ) (x : α) : h₁.trans h₂ x = h₂ (h₁ x) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "to_isometry":
 "#print Embedding.to_isometry /-\n/-- An embedding from a topological space to a metric space is an isometry with respect to the\ninduced metric space structure on the source space. -/\ntheorem Embedding.to_isometry {α β} [TopologicalSpace α] [MetricSpace β] {f : α → β} (h : Embedding f) :\n    @Isometry α β\n      (@PseudoMetricSpace.toPseudoEMetricSpace α (@metric_space.to_pseudo_metric_space α (h.comap_metric_space f)))\n      (by infer_instance) f :=\n  by\n  apply Isometry.of_dist_eq\n  intro x y\n  rfl\n#align embedding.to_isometry Embedding.to_isometry\n-/\n\n",
 "to_equiv_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem to_equiv_inj : ∀ ⦃h₁ h₂ : «expr ≃ᵢ » α β⦄, h₁.to_equiv = h₂.to_equiv → h₁ = h₂\n  | ⟨e₁, h₁⟩, ⟨e₂, h₂⟩, H => by\n    dsimp at H\n    subst e₁\n#align to_equiv_inj to_equiv_inj\n\n",
 "tendsto_nhds_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\ntheorem tendsto_nhds_iff {ι : Type _} {f : α → β} {g : ι → α} {a : Filter ι} {b : α} (hf : Isometry f) :\n    Filter.Tendsto g a ((nhds) b) ↔ Filter.Tendsto (f ∘ g) a ((nhds) (f b)) :=\n  hf.uniform_inducing.inducing.tendsto_nhds_iff\n#align tendsto_nhds_iff tendsto_nhds_iff\n\n",
 "symm_trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem symm_trans_apply (h₁ : «expr ≃ᵢ » α β) (h₂ : «expr ≃ᵢ » β γ) (x : γ) :\n    (h₁.trans h₂).symm x = h₁.symm (h₂.symm x) :=\n  rfl\n#align symm_trans_apply symm_trans_apply\n\n",
 "symm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem symm_symm (h : «expr ≃ᵢ » α β) : h.symm.symm = h :=\n  toEquiv_injective h.to_equiv.symm_symm\n#align symm_symm symm_symm\n\n",
 "symm_comp_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem symm_comp_self (h : «expr ≃ᵢ » α β) : «expr⇑ » h.symm ∘ «expr⇑ » h = id :=\n  funext fun a => h.to_equiv.left_inv a\n#align symm_comp_self symm_comp_self\n\n",
 "symm_apply_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem symm_apply_eq (h : «expr ≃ᵢ » α β) {x : α} {y : β} : h.symm y = x ↔ y = h x :=\n  h.to_equiv.symm_apply_eq\n#align symm_apply_eq symm_apply_eq\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem symm_apply_apply (h : «expr ≃ᵢ » α β) (x : α) : h.symm (h x) = x :=\n  h.to_equiv.symm_apply_apply x\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\nprotected theorem surjective (h : «expr ≃ᵢ » α β) : surjective h :=\n  h.to_equiv.surjective\n#align surjective surjective\n\n",
 "self_comp_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem self_comp_symm (h : «expr ≃ᵢ » α β) : «expr⇑ » h ∘ «expr⇑ » h.symm = id :=\n  funext fun a => h.to_equiv.right_inv a\n#align self_comp_symm self_comp_symm\n\n",
 "right_inv":
 "/-- The right inverse of an isometry is an isometry. -/\ntheorem right_inv {f : α → β} {g : β → α} (h : Isometry f) (hg : right_inverse g f) : Isometry g := fun x y => by\n  rw [← h, hg _, hg _]\n#align right_inv right_inv\n\n",
 "range_eq_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem range_eq_univ (h : «expr ≃ᵢ » α β) : range h = univ :=\n  h.to_equiv.range_eq_univ\n#align range_eq_univ range_eq_univ\n\n",
 "preimage_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem preimage_symm (h : «expr ≃ᵢ » α β) : preimage h.symm = image h :=\n  (image_eq_preimage_of_inverse h.to_equiv.left_inv h.to_equiv.right_inv).symm\n#align preimage_symm preimage_symm\n\n",
 "preimage_sphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem preimage_sphere (h : «expr ≃ᵢ » α β) (x : β) (r : exprℝ) :\n    «expr ⁻¹' » h (Metric.sphere x r) = Metric.sphere (h.symm x) r := by\n  rw [← h.isometry.preimage_sphere (h.symm x) r, h.apply_symm_apply]\n#align preimage_sphere preimage_sphere\n\n",
 "preimage_set_of_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem preimage_set_of_dist (hf : Isometry f) (x : α) (p : exprℝ → Prop) :\n    «expr ⁻¹' » f { y | p (dist y (f x)) } = { y | p (dist y x) } :=\n  by\n  ext y\n  simp [hf.dist_eq]\n#align preimage_set_of_dist preimage_set_of_dist\n\n",
 "preimage_emetric_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem preimage_emetric_closed_ball (h : «expr ≃ᵢ » α β) (x : β) (r : ennreal) :\n    «expr ⁻¹' » h (EMetric.closedBall x r) = EMetric.closedBall (h.symm x) r := by\n  rw [← h.isometry.preimage_emetric_closed_ball (h.symm x) r, h.apply_symm_apply]\n#align preimage_emetric_closed_ball preimage_emetric_closed_ball\n\n",
 "preimage_emetric_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem preimage_emetric_ball (h : «expr ≃ᵢ » α β) (x : β) (r : ennreal) :\n    «expr ⁻¹' » h (EMetric.ball x r) = EMetric.ball (h.symm x) r := by\n  rw [← h.isometry.preimage_emetric_ball (h.symm x) r, h.apply_symm_apply]\n#align preimage_emetric_ball preimage_emetric_ball\n\n",
 "preimage_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem preimage_closed_ball (h : «expr ≃ᵢ » α β) (x : β) (r : exprℝ) :\n    «expr ⁻¹' » h (Metric.closedBall x r) = Metric.closedBall (h.symm x) r := by\n  rw [← h.isometry.preimage_closed_ball (h.symm x) r, h.apply_symm_apply]\n#align preimage_closed_ball preimage_closed_ball\n\n",
 "preimage_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem preimage_ball (h : «expr ≃ᵢ » α β) (x : β) (r : exprℝ) :\n    «expr ⁻¹' » h (Metric.ball x r) = Metric.ball (h.symm x) r := by\n  rw [← h.isometry.preimage_ball (h.symm x) r, h.apply_symm_apply]\n#align preimage_ball preimage_ball\n\n",
 "nndist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\nprotected theorem nndist_eq {α β : Type _} [PseudoMetricSpace α] [PseudoMetricSpace β] (h : «expr ≃ᵢ » α β) (x y : α) :\n    nndist (h x) (h y) = nndist x y :=\n  h.isometry.nndist_eq x y\n#align nndist_eq nndist_eq\n\n",
 "mul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem mul_apply (e₁ e₂ : «expr ≃ᵢ » α α) (x : α) : (e₁ * e₂) x = e₁ (e₂ x) :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "maps_to_sphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_sphere (hf : Isometry f) (x : α) (r : exprℝ) : MapsTo f (Metric.sphere x r) (Metric.sphere (f x) r) :=\n  (hf.preimage_sphere x r).ge\n#align maps_to_sphere maps_to_sphere\n\n",
 "maps_to_emetric_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem maps_to_emetric_closed_ball (hf : Isometry f) (x : α) (r : ennreal) :\n    MapsTo f (EMetric.closedBall x r) (EMetric.closedBall (f x) r) :=\n  (hf.preimage_emetric_closed_ball x r).ge\n#align maps_to_emetric_closed_ball maps_to_emetric_closed_ball\n\n",
 "maps_to_emetric_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem maps_to_emetric_ball (hf : Isometry f) (x : α) (r : ennreal) :\n    MapsTo f (EMetric.ball x r) (EMetric.ball (f x) r) :=\n  (hf.preimage_emetric_ball x r).ge\n#align maps_to_emetric_ball maps_to_emetric_ball\n\n",
 "maps_to_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_closed_ball (hf : Isometry f) (x : α) (r : exprℝ) :\n    MapsTo f (Metric.closedBall x r) (Metric.closedBall (f x) r) :=\n  (hf.preimage_closed_ball x r).ge\n#align maps_to_closed_ball maps_to_closed_ball\n\n",
 "maps_to_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem maps_to_ball (hf : Isometry f) (x : α) (r : exprℝ) : MapsTo f (Metric.ball x r) (Metric.ball (f x) r) :=\n  (hf.preimage_ball x r).ge\n#align maps_to_ball maps_to_ball\n\n",
 "lipschitz":
 "theorem lipschitz (h : Isometry f) : LipschitzWith 1 f :=\n  LipschitzWith.of_edist_le fun x y => (h x y).le\n#align lipschitz lipschitz\n\n",
 "isometry_subtype_coe":
 "#print isometry_subtype_coe /-\n/-- The injection from a subtype is an isometry -/\ntheorem isometry_subtype_coe {s : Set α} : Isometry (coe : s → α) := fun x y => rfl\n#align isometry_subtype_coe isometry_subtype_coe\n-/\n\n",
 "isometry_subsingleton":
 "#print isometry_subsingleton /-\n/-- Any map on a subsingleton is an isometry -/\n@[nontriviality]\ntheorem isometry_subsingleton [subsingleton α] : Isometry f := fun x y => by rw [subsingleton.elim x y] <;> simp\n#align isometry_subsingleton isometry_subsingleton\n-/\n\n",
 "isometry_iff_nndist_eq":
 "#print isometry_iff_nndist_eq /-\n/-\nCopyright (c) 2018 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nIsometries of emetric and metric spaces\nAuthors: Sébastien Gouëzel\n-/\n/-- On pseudometric spaces, a map is an isometry if and only if it preserves nonnegative\ndistances. -/\ntheorem isometry_iff_nndist_eq [PseudoMetricSpace α] [PseudoMetricSpace β] {f : α → β} :\n    Isometry f ↔ ∀ x y, nndist (f x) (f y) = nndist x y := by simp only [Isometry, edist_nndist, ENNReal.coe_eq_coe]\n#align isometry_iff_nndist_eq isometry_iff_nndist_eq\n-/\n\n",
 "isometry_iff_dist_eq":
 "#print isometry_iff_dist_eq /-\n/-- On pseudometric spaces, a map is an isometry if and only if it preserves distances. -/\ntheorem isometry_iff_dist_eq [PseudoMetricSpace α] [PseudoMetricSpace β] {f : α → β} :\n    Isometry f ↔ ∀ x y, dist (f x) (f y) = dist x y := by\n  simp only [isometry_iff_nndist_eq, ← coe_nndist, NNReal.coe_eq]\n#align isometry_iff_dist_eq isometry_iff_dist_eq\n-/\n\n",
 "isometry_id":
 "#print isometry_id /-\n/-- The identity is an isometry -/\ntheorem isometry_id : Isometry (id : α → α) := fun x y => rfl\n#align isometry_id isometry_id\n-/\n\n",
 "isometry_dcomp":
 "#print isometry_dcomp /-\ntheorem isometry_dcomp {ι} [Fintype ι] {α β : ι → Type _} [∀ i, PseudoEMetricSpace (α i)]\n    [∀ i, PseudoEMetricSpace (β i)] (f : ∀ i, α i → β i) (hf : ∀ i, Isometry (f i)) : Isometry (dcomp f) := fun x y =>\n  by simp only [edist_pi_def, (hf _).edist_eq]\n#align isometry_dcomp isometry_dcomp\n-/\n\n",
 "inv_apply_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem inv_apply_self (e : «expr ≃ᵢ » α α) (x : α) : e⁻¹ (e x) = x :=\n  e.symm_apply_apply x\n#align inv_apply_self inv_apply_self\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\nprotected theorem injective (h : «expr ≃ᵢ » α β) : injective h :=\n  h.to_equiv.injective\n#align injective injective\n\n",
 "image_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem image_symm (h : «expr ≃ᵢ » α β) : image h.symm = preimage h :=\n  image_eq_preimage_of_inverse h.symm.to_equiv.left_inv h.symm.to_equiv.right_inv\n#align image_symm image_symm\n\n",
 "image_sphere":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem image_sphere (h : «expr ≃ᵢ » α β) (x : α) (r : exprℝ) :\n    «expr '' » h (Metric.sphere x r) = Metric.sphere (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_sphere, symm_symm]\n#align image_sphere image_sphere\n\n",
 "image_emetric_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem image_emetric_closed_ball (h : «expr ≃ᵢ » α β) (x : α) (r : ennreal) :\n    «expr '' » h (EMetric.closedBall x r) = EMetric.closedBall (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_emetric_closed_ball, symm_symm]\n#align image_emetric_closed_ball image_emetric_closed_ball\n\n",
 "image_emetric_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem image_emetric_ball (h : «expr ≃ᵢ » α β) (x : α) (r : ennreal) :\n    «expr '' » h (EMetric.ball x r) = EMetric.ball (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_emetric_ball, symm_symm]\n#align image_emetric_ball image_emetric_ball\n\n",
 "image_closed_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem image_closed_ball (h : «expr ≃ᵢ » α β) (x : α) (r : exprℝ) :\n    «expr '' » h (Metric.closedBall x r) = Metric.closedBall (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_closed_ball, symm_symm]\n#align image_closed_ball image_closed_ball\n\n",
 "image_ball":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem image_ball (h : «expr ≃ᵢ » α β) (x : α) (r : exprℝ) : «expr '' » h (Metric.ball x r) = Metric.ball (h x) r := by\n  rw [← h.preimage_symm, h.symm.preimage_ball, symm_symm]\n#align image_ball image_ball\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[ext]\ntheorem ext ⦃h₁ h₂ : «expr ≃ᵢ » α β⦄ (H : ∀ x, h₁ x = h₂ x) : h₁ = h₂ :=\n  toEquiv_injective <| Equiv.ext H\n#align ext ext\n\n",
 "eq_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem eq_symm_apply (h : «expr ≃ᵢ » α β) {x : α} {y : β} : x = h.symm y ↔ h x = y :=\n  h.to_equiv.eq_symm_apply\n#align eq_symm_apply eq_symm_apply\n\n",
 "edist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\nprotected theorem edist_eq (h : «expr ≃ᵢ » α β) (x y : α) : edist (h x) (h y) = edist x y :=\n  h.isometry.edist_eq x y\n#align edist_eq edist_eq\n\n",
 "ediam_univ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem ediam_univ (h : «expr ≃ᵢ » α β) : EMetric.diam (univ : Set α) = EMetric.diam (univ : Set β) := by\n  rw [← h.range_eq_univ, h.isometry.ediam_range]\n#align ediam_univ ediam_univ\n\n",
 "ediam_range":
 "theorem ediam_range (hf : Isometry f) : EMetric.diam (range f) = EMetric.diam (univ : Set α) :=\n  by\n  rw [← image_univ]\n  exact hf.ediam_image univ\n#align ediam_range ediam_range\n\n",
 "ediam_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem ediam_preimage (h : «expr ≃ᵢ » α β) (s : Set β) : EMetric.diam («expr ⁻¹' » h s) = EMetric.diam s := by\n  rw [← image_symm, ediam_image]\n#align ediam_preimage ediam_preimage\n\n",
 "ediam_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem ediam_image (h : «expr ≃ᵢ » α β) (s : Set α) : EMetric.diam («expr '' » h s) = EMetric.diam s :=\n  h.isometry.ediam_image s\n#align ediam_image ediam_image\n\n",
 "dist_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\nprotected theorem dist_eq {α β : Type _} [PseudoMetricSpace α] [PseudoMetricSpace β] (h : «expr ≃ᵢ » α β) (x y : α) :\n    dist (h x) (h y) = dist x y :=\n  h.isometry.dist_eq x y\n#align dist_eq dist_eq\n\n",
 "diam_univ":
 "theorem diam_univ : Metric.diam (univ : Set α) = Metric.diam (univ : Set β) :=\n  congr_arg ENNReal.toReal h.ediam_univ\n#align diam_univ diam_univ\n\n",
 "diam_range":
 "theorem diam_range (hf : Isometry f) : Metric.diam (range f) = Metric.diam (univ : Set α) :=\n  by\n  rw [← image_univ]\n  exact hf.diam_image univ\n#align diam_range diam_range\n\n",
 "diam_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[simp]\ntheorem diam_preimage (s : Set β) : Metric.diam («expr ⁻¹' » h s) = Metric.diam s := by rw [← image_symm, diam_image]\n#align diam_preimage diam_preimage\n\n",
 "diam_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem diam_image (s : Set α) : Metric.diam («expr '' » h s) = Metric.diam s :=\n  h.isometry.diam_image s\n#align diam_image diam_image\n\n",
 "complete_space_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\ntheorem complete_space_iff (e : «expr ≃ᵢ » α β) : CompleteSpace α ↔ CompleteSpace β :=\n  by\n  constructor <;> intro H\n  exacts[e.symm.complete_space, e.complete_space]\n#align complete_space_iff complete_space_iff\n\n",
 "comp_continuous_on_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem comp_continuous_on_iff {γ} [TopologicalSpace γ] (h : «expr ≃ᵢ » α β) {f : γ → α} {s : Set γ} :\n    ContinuousOn (h ∘ f) s ↔ ContinuousOn f s :=\n  h.to_homeomorph.comp_continuous_on_iff _ _\n#align comp_continuous_on_iff comp_continuous_on_iff\n\n",
 "comp_continuous_iff'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem comp_continuous_iff' {γ} [TopologicalSpace γ] (h : «expr ≃ᵢ » α β) {f : β → γ} :\n    Continuous (f ∘ h) ↔ Continuous f :=\n  h.to_homeomorph.comp_continuous_iff'\n#align comp_continuous_iff' comp_continuous_iff'\n\n",
 "comp_continuous_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem comp_continuous_iff {γ} [TopologicalSpace γ] (h : «expr ≃ᵢ » α β) {f : γ → α} :\n    Continuous (h ∘ f) ↔ Continuous f :=\n  h.to_homeomorph.comp_continuous_iff\n#align comp_continuous_iff comp_continuous_iff\n\n",
 "comp":
 "/-- The composition of isometries is an isometry. -/\ntheorem comp {g : β → γ} {f : α → β} (hg : Isometry g) (hf : Isometry f) : Isometry (g ∘ f) := fun x y =>\n  (hg _ _).trans (hf _ _)\n#align comp comp\n\n",
 "coe_to_homeomorph_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_homeomorph_symm (h : «expr ≃ᵢ » α β) : «expr⇑ » h.to_homeomorph.symm = h.symm :=\n  rfl\n#align coe_to_homeomorph_symm coe_to_homeomorph_symm\n\n",
 "coe_to_homeomorph":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_homeomorph (h : «expr ≃ᵢ » α β) : «expr⇑ » h.to_homeomorph = h :=\n  rfl\n#align coe_to_homeomorph coe_to_homeomorph\n\n",
 "coe_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_equiv (h : «expr ≃ᵢ » α β) : «expr⇑ » h.to_equiv = h :=\n  rfl\n#align coe_to_equiv coe_to_equiv\n\n",
 "coe_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem coe_one : «expr⇑ » (1 : «expr ≃ᵢ » α α) = id :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul (e₁ e₂ : «expr ≃ᵢ » α α) : «expr⇑ » (e₁ * e₂) = e₁ ∘ e₂ :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "coe_eq_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n-- such a bijection need not exist\ntheorem coe_eq_to_equiv (h : «expr ≃ᵢ » α β) (a : α) : h a = h.to_equiv a :=\n  rfl\n#align coe_eq_to_equiv coe_eq_to_equiv\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\nprotected theorem bijective (h : «expr ≃ᵢ » α β) : bijective h :=\n  h.to_equiv.bijective\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem apply_symm_apply (h : «expr ≃ᵢ » α β) (y : β) : h (h.symm y) = y :=\n  h.to_equiv.apply_symm_apply y\n#align apply_symm_apply apply_symm_apply\n\n",
 "apply_inv_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n@[simp]\ntheorem apply_inv_self (e : «expr ≃ᵢ » α α) (x : α) : e (e⁻¹ x) = x :=\n  e.apply_symm_apply x\n#align apply_inv_self apply_inv_self\n\n",
 "antilipschitz":
 "theorem antilipschitz (h : Isometry f) : AntilipschitzWith 1 f := fun x y => by\n  simp only [h x y, ENNReal.coe_one, one_mul, le_refl]\n#align antilipschitz antilipschitz\n\n",
 "UniformInducing":
 "#print UniformInducing /-\n/-- An isometry from a metric space is a uniform inducing map -/\nprotected theorem UniformInducing (hf : Isometry f) : UniformInducing f :=\n  hf.antilipschitz.uniform_inducing hf.uniform_continuous\n#align uniform_inducing UniformInducing\n-/\n\n",
 "UniformEmbedding":
 "#print UniformEmbedding /-\n/-- An isometry from an emetric space is a uniform embedding -/\nprotected theorem UniformEmbedding (hf : Isometry f) : UniformEmbedding f :=\n  hf.antilipschitz.uniform_embedding hf.lipschitz.uniform_continuous\n#align uniform_embedding UniformEmbedding\n-/\n\n",
 "UniformContinuous":
 "#print UniformContinuous /-\n/-- An isometry from a metric space is a uniform continuous map -/\nprotected theorem UniformContinuous (hf : Isometry f) : UniformContinuous f :=\n  hf.lipschitz.uniform_continuous\n#align uniform_continuous UniformContinuous\n-/\n\n",
 "Prod_map":
 "#print Prod_map /-\ntheorem Prod_map {δ} [PseudoEMetricSpace δ] {f : α → β} {g : γ → δ} (hf : Isometry f) (hg : Isometry g) :\n    Isometry (prod.map f g) := fun x y => by simp only [Prod.edist_eq, hf.edist_eq, hg.edist_eq, Prod_map]\n#align prod_map Prod_map\n-/\n\n",
 "Isometry":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n#print Isometry /-\nprotected theorem Isometry (h : «expr ≃ᵢ » α β) : Isometry h :=\n  h.isometry_to_fun\n#align isometry Isometry\n-/\n\n",
 "Embedding":
 "#print Embedding /-\n/-- An isometry from an emetric space is an embedding -/\nprotected theorem Embedding (hf : Isometry f) : Embedding f :=\n  hf.uniform_embedding.embedding\n#align embedding Embedding\n-/\n\n",
 "Continuous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n#print Continuous /-\nprotected theorem Continuous (h : «expr ≃ᵢ » α β) : Continuous h :=\n  h.isometry.continuous\n#align continuous Continuous\n-/\n\n",
 "CompleteSpace":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ᵢ » -/\n#print CompleteSpace /-\nprotected theorem CompleteSpace [CompleteSpace β] (e : «expr ≃ᵢ » α β) : CompleteSpace α :=\n  completeSpace_of_isComplete_univ <|\n    isComplete_of_complete_image e.isometry.uniform_inducing <| by\n      rwa [Set.image_univ, IsometryEquiv.range_eq_univ, ← completeSpace_iff_isComplete_univ]\n#align complete_space CompleteSpace\n-/\n\n",
 "ClosedEmbedding":
 "#print ClosedEmbedding /-\n/-- An isometry from a complete emetric space is a closed embedding -/\ntheorem ClosedEmbedding [CompleteSpace α] [EMetricSpace γ] {f : α → γ} (hf : Isometry f) : ClosedEmbedding f :=\n  hf.antilipschitz.closed_embedding hf.lipschitz.uniform_continuous\n#align closed_embedding ClosedEmbedding\n-/\n\n"}