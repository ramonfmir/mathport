{"tendsto_limit":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/-\nCopyright (c) 2018 Robert Y. Lewis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Robert Y. Lewis, Sébastien Gouëzel\n-/\ntheorem cau_seq.tendsto_limit [normed_ring β] [hn : IsAbsoluteValue (norm : β → exprℝ)] (f : CauSeq β norm)\n    [CauSeq.IsComplete β norm] : tendsto f at_top ((nhds) f.lim) :=\n  _root_.tendsto_nhds.mpr\n    (by\n      intro s os lfs\n      suffices ∃ a : ℕ, ∀ b : ℕ, b ≥ a → f b ∈ s by simpa using this\n      rcases metric.is_open_iff.1 os _ lfs with ⟨ε, ⟨hε, hεs⟩⟩\n      cases' setoid.symm (CauSeq.equiv_lim f) _ hε with N hN\n      exists N\n      intro b hb\n      apply hεs\n      dsimp [metric.ball]\n      rw [dist_comm, dist_eq_norm]\n      solve_by_elim)\n#align cau_seq.tendsto_limit cau_seq.tendsto_limit\n\n",
 "is_cau_seq":
 "/-\n This section shows that if we have a uniform space generated by an absolute value, topological\n completeness and Cauchy sequence completeness coincide. The problem is that there isn't\n a good notion of \"uniform space generated by an absolute value\", so right now this is\n specific to norm. Furthermore, norm only instantiates is_absolute_value on normed_division_ring.\n This needs to be fixed, since it prevents showing that ℤ_[hp] is complete\n-/\ntheorem cauchy_seq.is_cau_seq {f : ℕ → β} (hf : cauchy_seq f) : IsCauSeq norm f :=\n  by\n  cases' cauchy_iff.1 hf with hf1 hf2\n  intro ε hε\n  rcases hf2 { x | dist x.1 x.2 < ε } (dist_mem_uniformity hε) with ⟨t, ⟨ht, htsub⟩⟩\n  simp at ht; cases' ht with N hN\n  exists N\n  intro j hj\n  rw [← dist_eq_norm]\n  apply @htsub (f j, f N)\n  apply Set.mk_mem_prod <;> solve_by_elim [le_refl]\n#align cauchy_seq.is_cau_seq cauchy_seq.is_cau_seq\n\n",
 "cauchy_seq":
 "theorem cau_seq.cauchy_seq (f : CauSeq β norm) : cauchy_seq f :=\n  by\n  refine' cauchy_iff.2 ⟨by infer_instance, fun s hs => _⟩\n  rcases mem_uniformity_dist.1 hs with ⟨ε, ⟨hε, hεs⟩⟩\n  cases' CauSeq.cauchy₂ f hε with N hN\n  exists { n | n ≥ N }.image f\n  simp only [exists_prop, mem_at_top_sets, mem_map, mem_image, ge_iff_le, mem_set_of_eq]\n  constructor\n  · exists N\n    intro b hb\n    exists b\n    simp [hb]\n  · rintro ⟨a, b⟩ ⟨⟨a', ⟨ha'1, ha'2⟩⟩, ⟨b', ⟨hb'1, hb'2⟩⟩⟩\n    dsimp at ha'1 ha'2 hb'1 hb'2\n    rw [← ha'2, ← hb'2]\n    apply hεs\n    rw [dist_eq_norm]\n    apply hN <;> assumption\n#align cau_seq.cauchy_seq cau_seq.cauchy_seq\n\n",
 "cau_seq_iff_cauchy_seq":
 "/-- In a normed field, `cau_seq` coincides with the usual notion of Cauchy sequences. -/\ntheorem cau_seq_iff_cauchy_seq {α : Type u} [normed_field α] {u : ℕ → α} : IsCauSeq norm u ↔ cauchy_seq u :=\n  ⟨fun h => cau_seq.cauchy_seq ⟨u, h⟩, fun h => h.is_cau_seq⟩\n#align cau_seq_iff_cauchy_seq cau_seq_iff_cauchy_seq\n\n"}