{"uniformity_dist'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\n/-- Reformulate `completion.mem_uniformity_dist` in terms that are suitable for the definition\nof the metric space structure. -/\nprotected theorem uniformity_dist' :\n    (uniformity) (Completion α) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        ((filter.principal) { p | dist p.1 p.2 < ε.val }) :=\n  by\n  ext s; rw [mem_infi_of_directed]\n  · simp [completion.mem_uniformity_dist, subset_def]\n  · rintro ⟨r, hr⟩ ⟨p, hp⟩\n    use ⟨min r p, lt_min hr hp⟩\n    simp (config := { contextual := true }) [lt_min_iff, (· ≥ ·)]\n#align uniformity_dist' uniformity_dist'\n\n",
 "uniformity_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `filter.principal -/\nprotected theorem uniformity_dist :\n    (uniformity) (Completion α) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\"\n        ((filter.principal) { p | dist p.1 p.2 < ε }) :=\n  by simpa [infᵢ_subtype] using @completion.uniformity_dist' α _\n#align uniformity_dist uniformity_dist\n\n",
 "uniformContinuous_dist":
 "#print uniformContinuous_dist /-\n/-\nCopyright (c) 2019 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n/-- The new distance is uniformly continuous. -/\nprotected theorem uniformContinuous_dist : UniformContinuous fun p : Completion α × Completion α => dist p.1 p.2 :=\n  uniformContinuous_extension₂ dist\n#align uniform_continuous_dist uniformContinuous_dist\n-/\n\n",
 "mem_uniformity_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `lower_set.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `uniformity -/\n/-- Elements of the uniformity (defined generally for completions) can be characterized in terms\nof the distance. -/\nprotected theorem mem_uniformity_dist (s : Set (Completion α × Completion α)) :\n    s ∈ (uniformity) (Completion α) ↔ ∃ ε > 0, ∀ {a b}, dist a b < ε → (a, b) ∈ s :=\n  by\n  constructor\n  · /- Start from an entourage `s`. It contains a closed entourage `t`. Its pullback in `α` is an\n        entourage, so it contains an `ε`-neighborhood of the diagonal by definition of the entourages\n        in metric spaces. Then `t` contains an `ε`-neighborhood of the diagonal in `completion α`, as\n        closed properties pass to the completion. -/\n    intro hs\n    rcases mem_uniformity_isClosed hs with ⟨t, ht, ⟨tclosed, ts⟩⟩\n    have A : { x : α × α | (coe x.1, coe x.2) ∈ t } ∈ uniformity α :=\n      uniformContinuous_def.1 (uniform_continuous_coe α) t ht\n    rcases mem_uniformity_dist.1 A with ⟨ε, εpos, hε⟩\n    refine' ⟨ε, εpos, fun x y hxy => _⟩\n    have : ε ≤ dist x y ∨ (x, y) ∈ t := by\n      apply induction_on₂ x y\n      · have :\n          { x : completion α × completion α | ε ≤ dist x.fst x.snd ∨ (x.fst, x.snd) ∈ t } =\n            { p : completion α × completion α | ε ≤ dist p.1 p.2 } ∪ t :=\n          by ext <;> simp\n        rw [this]\n        apply IsClosed.union _ tclosed\n        exact isClosed_le continuous_const completion.uniform_continuous_dist.continuous\n      · intro x y\n        rw [completion.dist_eq]\n        by_cases h : ε ≤ dist x y\n        · exact or.inl h\n        · have Z := hε (not_le.1 h)\n          simp only [Set.mem_setOf_eq] at Z\n          exact or.inr Z\n    simp only [not_le.mpr hxy, false_or_iff, not_le] at this\n    exact ts this\n  · /- Start from a set `s` containing an ε-neighborhood of the diagonal in `completion α`. To show\n        that it is an entourage, we use the fact that `dist` is uniformly continuous on\n        `completion α × completion α` (this is a general property of the extension of uniformly\n        continuous functions). Therefore, the preimage of the ε-neighborhood of the diagonal in ℝ\n        is an entourage in `completion α × completion α`. Massaging this property, it follows that\n        the ε-neighborhood of the diagonal is an entourage in `completion α`, and therefore this is\n        also the case of `s`. -/\n    rintro ⟨ε, εpos, hε⟩\n    let r : Set (exprℝ × exprℝ) := { p | dist p.1 p.2 < ε }\n    have : r ∈ uniformity (exprℝ) := Metric.dist_mem_uniformity εpos\n    have T := uniformContinuous_def.1 (@completion.uniform_continuous_dist α _) r this\n    simp only [uniformity_prod_eq_prod, mem_prod_iff, exists_prop, Filter.mem_map, Set.mem_setOf_eq] at T\n    rcases T with ⟨t1, ht1, t2, ht2, ht⟩\n    refine' mem_of_superset ht1 _\n    have A : ∀ a b : completion α, (a, b) ∈ t1 → dist a b < ε :=\n      by\n      intro a b hab\n      have : ((a, b), (a, a)) ∈ lower_set.prod t1 t2 := ⟨hab, refl_mem_uniformity ht2⟩\n      have I := ht this\n      simp [completion.dist_self, Real.dist_eq, completion.dist_comm] at I\n      exact lt_of_le_of_lt (le_abs_self _) I\n    show t1 ⊆ s\n    · rintro ⟨a, b⟩ hp\n      have : dist a b < ε := A a b hp\n      exact hε this\n#align mem_uniformity_dist mem_uniformity_dist\n\n",
 "eq_of_dist_eq_zero":
 "#print eq_of_dist_eq_zero /-\n/-- If two points are at distance 0, then they coincide. -/\nprotected theorem eq_of_dist_eq_zero (x y : Completion α) (h : dist x y = 0) : x = y :=\n  by\n  /- This follows from the separation of `completion α` and from the description of\n    entourages in terms of the distance. -/\n  have : SeparatedSpace (completion α) := by infer_instance\n  refine' separated_def.1 this x y fun s hs => _\n  rcases(completion.mem_uniformity_dist s).1 hs with ⟨ε, εpos, hε⟩\n  rw [← h] at εpos\n  exact hε εpos\n#align eq_of_dist_eq_zero eq_of_dist_eq_zero\n-/\n\n",
 "edist_eq":
 "@[simp]\nprotected theorem edist_eq (x y : α) : edist (x : Completion α) y = edist x y :=\n  coe_isometry x y\n#align edist_eq edist_eq\n\n",
 "dist_triangle":
 "#print dist_triangle /-\nprotected theorem dist_triangle (x y z : Completion α) : dist x z ≤ dist x y + dist y z :=\n  by\n  apply induction_on₃ x y z\n  ·\n    refine' isClosed_le _ (Continuous.add _ _) <;>\n      apply_rules [completion.continuous_dist, Continuous.fst, Continuous.snd, continuous_id]\n  · intro a b c\n    rw [completion.dist_eq, completion.dist_eq, completion.dist_eq]\n    exact dist_triangle a b c\n#align dist_triangle dist_triangle\n-/\n\n",
 "dist_self":
 "#print dist_self /-\n/- Let us check that the new distance satisfies the axioms of a distance, by starting from the\nproperties on α and extending them to `completion α` by continuity. -/\nprotected theorem dist_self (x : Completion α) : dist x x = 0 :=\n  by\n  apply induction_on x\n  · refine' isClosed_eq _ continuous_const\n    exact completion.continuous_dist continuous_id continuous_id\n  · intro a\n    rw [completion.dist_eq, dist_self]\n#align dist_self dist_self\n-/\n\n",
 "dist_eq":
 "/-- The new distance is an extension of the original distance. -/\n@[simp]\nprotected theorem dist_eq (x y : α) : dist (x : Completion α) y = dist x y :=\n  Completion.extension₂_coe_coe uniformContinuous_dist _ _\n#align dist_eq dist_eq\n\n",
 "dist_comm":
 "#print dist_comm /-\nprotected theorem dist_comm (x y : Completion α) : dist x y = dist y x :=\n  by\n  apply induction_on₂ x y\n  ·\n    exact\n      isClosed_eq (completion.continuous_dist continuous_fst continuous_snd)\n        (completion.continuous_dist continuous_snd continuous_fst)\n  · intro a b\n    rw [completion.dist_eq, completion.dist_eq, dist_comm]\n#align dist_comm dist_comm\n-/\n\n",
 "continuous_dist":
 "#print continuous_dist /-\n/-- The new distance is continuous. -/\nprotected theorem continuous_dist [TopologicalSpace β] {f g : β → Completion α} (hf : Continuous f)\n    (hg : Continuous g) : Continuous fun x => dist (f x) (g x) :=\n  Completion.uniformContinuous_dist.continuous.comp (hf.prod_mk hg : _)\n#align continuous_dist continuous_dist\n-/\n\n",
 "coe_isometry":
 "/-- The embedding of a metric space in its completion is an isometry. -/\ntheorem coe_isometry : Isometry (coe : α → Completion α) :=\n  Isometry.of_dist_eq Completion.dist_eq\n#align coe_isometry coe_isometry\n\n"}