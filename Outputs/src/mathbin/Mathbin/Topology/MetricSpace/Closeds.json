{"uniform_embedding":
 "/- We will show that, if a sequence of sets `s n` satisfies\n  `edist (s n) (s (n+1)) < 2^{-n}`, then it converges. This is enough to guarantee\n  completeness, by a standard completeness criterion.\n  We use the shorthand `B n = 2^{-n}` in ennreal. -/\n/- Consider a sequence of closed sets `s n` with `edist (s n) (s (n+1)) < B n`.\n  We will show that it converges. The limit set is t0 = ⋂n, closure (⋃m≥n, s m).\n  We will have to show that a point in `s n` is close to a point in `t0`, and a point\n  in `t0` is close to a point in `s n`. The completeness then follows from a\n  standard criterion. -/\n-- The inequality is written this way to agree with `edist_le_of_edist_le_geometric_of_tendsto₀`\n/- This is the main difficulty of the proof. Starting from `x ∈ s n`, we want\n       to find a point in `t0` which is close to `x`. Define inductively a sequence of\n       points `z m` with `z n = x` and `z m ∈ s m` and `edist (z m) (z (m+1)) ≤ B m`. This is\n       possible since the Hausdorff distance between `s m` and `s (m+1)` is at most `B m`.\n       This sequence is a Cauchy sequence, therefore converging as the space is complete, to\n       a limit which satisfies the required properties. -/\n-- We prove existence of the sequence by induction.\n-- it follows from the previous bound that `z` is a Cauchy sequence\n-- therefore, it converges\n-- the limit point `y` will be the desired point, in `t0` and close to our initial point `x`.\n-- First, we check it belongs to `t0`.\n-- Then, we check that `y` is close to `x = z n`. This follows from the fact that `y`\n-- is the limit of `z k`, and the distance between `z n` and `z k` has already been estimated.\n/- For the (much easier) reverse inequality, we start from a point `x ∈ t0` and we want\n        to find a point `y ∈ s n` which is close to `x`.\n        `x` belongs to `t0`, the intersection of the closures. In particular, it is well\n        approximated by a point `z` in `⋃m≥n, s m`, say in `s m`. Since `s m` and\n        `s n` are close, this point is itself well approximated by a point `y` in `s n`,\n        as required. -/\n-- z : α,  Dxz : edist x z < B n,\n-- m : ℕ, m_ge_n : m ≥ n, hm : z ∈ s m\n-- y : α,  hy : y ∈ s n,  Dzy : edist z y < B n\n-- Deduce from the above inequalities that the distance between `s n` and `t0` is at most `2 B n`.\n-- from this, the convergence of `s n` to `t0` follows.\n/- by completeness, it suffices to show that it is totally bounded,\n    i.e., for all ε>0, there is a finite set which is ε-dense.\n    start from a set `s` which is ε-dense in α. Then the subsets of `s`\n    are finitely many, and ε-dense for the Hausdorff distance. -/\n-- s : set α,  fs : s.finite,  hs : univ ⊆ ⋃ (y : α) (H : y ∈ s), eball y δ\n-- we first show that any set is well approximated by a subset of `s`.\n-- introduce the set F of all subsets of `s` (seen as members of `closeds α`).\n-- `F` is finite\n-- `F` is ε-dense\n/-- `nonempty_compacts.to_closeds` is a uniform embedding (as it is an isometry) -/\ntheorem nonempty_compacts.to_closeds.uniform_embedding : UniformEmbedding (@NonemptyCompacts.toCloseds α _ _) :=\n  Isometry.uniformEmbedding fun x y => rfl\n#align nonempty_compacts.to_closeds.uniform_embedding nonempty_compacts.to_closeds.uniform_embedding\n\n",
 "uniform_continuous_inf_dist_Hausdorff_dist":
 "theorem uniform_continuous_inf_dist_Hausdorff_dist :\n    UniformContinuous fun p : α × NonemptyCompacts α => infDist p.1 p.2 :=\n  lipschitz_infDist.uniform_continuous\n#align uniform_continuous_inf_dist_Hausdorff_dist uniform_continuous_inf_dist_Hausdorff_dist\n\n",
 "lipschitz_inf_dist_set":
 "theorem lipschitz_inf_dist_set (x : α) : LipschitzWith 1 fun s : NonemptyCompacts α => infDist x s :=\n  LipschitzWith.of_le_add fun s t => by\n    rw [dist_comm]\n    exact inf_dist_le_inf_dist_add_Hausdorff_dist (edist_ne_top t s)\n#align lipschitz_inf_dist_set lipschitz_inf_dist_set\n\n",
 "lipschitz_inf_dist":
 "theorem lipschitz_inf_dist : LipschitzWith 2 fun p : α × NonemptyCompacts α => infDist p.1 p.2 :=\n  @LipschitzWith.uncurry _ _ _ _ _ _ (fun (x : α) (s : NonemptyCompacts α) => infDist x s) 1 1\n    (fun s => lipschitz_infDist_pt s) lipschitz_infDist_set\n#align lipschitz_inf_dist lipschitz_inf_dist\n\n",
 "is_closed_subsets_of_is_closed":
 "/-- Subsets of a given closed subset form a closed set -/\ntheorem is_closed_subsets_of_is_closed (hs : IsClosed s) : IsClosed { t : Closeds α | (t : Set α) ⊆ s } :=\n  by\n  refine' isClosed_of_closure_subset fun t ht x hx => _\n  -- t : closeds α,  ht : t ∈ closure {t : closeds α | t ⊆ s},\n  -- x : α,  hx : x ∈ t\n  -- goal : x ∈ s\n  have : x ∈ closure s := by\n    refine' mem_closure_iff.2 fun ε εpos => _\n    rcases mem_closure_iff.1 ht ε εpos with ⟨u, hu, Dtu⟩\n    -- u : closeds α,  hu : u ∈ {t : closeds α | t ⊆ s},  hu' : edist t u < ε\n    rcases exists_edist_lt_of_Hausdorff_edist_lt hx Dtu with ⟨y, hy, Dxy⟩\n    -- y : α,  hy : y ∈ u, Dxy : edist x y < ε\n    exact ⟨y, hu hy, Dxy⟩\n  rwa [hs.closure_eq] at this\n#align is_closed_subsets_of_is_closed is_closed_subsets_of_is_closed\n\n",
 "is_closed_in_closeds":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/-- The range of `nonempty_compacts.to_closeds` is closed in a complete space -/\ntheorem nonempty_compacts.is_closed_in_closeds [CompleteSpace α] :\n    IsClosed (range <| @NonemptyCompacts.toCloseds α _ _) :=\n  by\n  have : range nonempty_compacts.to_closeds = { s : closeds α | (s : Set α).nonempty ∧ IsCompact (s : Set α) } :=\n    by\n    ext s\n    refine' ⟨_, fun h => ⟨⟨⟨s, h.2⟩, h.1⟩, closeds.ext rfl⟩⟩\n    rintro ⟨s, hs, rfl⟩\n    exact ⟨s.nonempty, s.is_compact⟩\n  rw [this]\n  refine' isClosed_of_closure_subset fun s hs => ⟨_, _⟩\n  · -- take a set set t which is nonempty and at a finite distance of s\n    rcases mem_closure_iff.1 hs («expr⊤») ENNReal.coe_lt_top with ⟨t, ht, Dst⟩\n    rw [edist_comm] at Dst\n    -- since `t` is nonempty, so is `s`\n    exact nonempty_of_Hausdorff_edist_ne_top ht.1 (ne_of_lt Dst)\n  · refine' isCompact_iff_totallyBounded_isComplete.2 ⟨_, s.closed.is_complete⟩\n    refine' totally_bounded_iff.2 fun ε (εpos : 0 < ε) => _\n    -- we have to show that s is covered by finitely many eballs of radius ε\n    -- pick a nonempty compact set t at distance at most ε/2 of s\n    rcases mem_closure_iff.1 hs (ε / 2) (ENNReal.half_pos εpos.ne') with ⟨t, ht, Dst⟩\n    -- cover this space with finitely many balls of radius ε/2\n    rcases totally_bounded_iff.1 (isCompact_iff_totallyBounded_isComplete.1 ht.2).1 (ε / 2)\n        (ENNReal.half_pos εpos.ne') with\n      ⟨u, fu, ut⟩\n    refine' ⟨u, ⟨fu, fun x hx => _⟩⟩\n    -- u : set α,  fu : u.finite,  ut : t ⊆ ⋃ (y : α) (H : y ∈ u), eball y (ε / 2)\n    -- then s is covered by the union of the balls centered at u of radius ε\n    rcases exists_edist_lt_of_Hausdorff_edist_lt hx Dst with ⟨z, hz, Dxz⟩\n    rcases mem_Union₂.1 (ut hz) with ⟨y, hy, Dzy⟩\n    have : edist x y < ε :=\n      calc\n        edist x y ≤ edist x z + edist z y := edist_triangle _ _ _\n        _ < ε / 2 + ε / 2 := (ENNReal.add_lt_add Dxz Dzy)\n        _ = ε := ENNReal.add_halves _\n        \n    exact mem_bUnion hy this\n#align nonempty_compacts.is_closed_in_closeds nonempty_compacts.is_closed_in_closeds\n\n",
 "edist_eq":
 "/-- By definition, the edistance on `closeds α` is given by the Hausdorff edistance -/\ntheorem closeds.edist_eq {s t : Closeds α} : edist s t = hausdorffEdist (s : Set α) t :=\n  rfl\n#align closeds.edist_eq closeds.edist_eq\n\n",
 "dist_eq":
 "/- To obtain a countable dense subset of `nonempty_compacts α`, start from\n    a countable dense subset `s` of α, and then consider all its finite nonempty subsets.\n    This set is countable and made of nonempty compact sets. It turns out to be dense:\n    by total boundedness, any compact set `t` can be covered by finitely many small balls, and\n    approximations in `s` of the centers of these balls give the required finite approximation\n    of `t`. -/\n-- t is a compact nonempty set, that we have to approximate uniformly by a a set in `v`.\n-- construct a map F associating to a point in α an approximating point in s, up to δ/2.\n-- cover `t` with finitely many balls. Their centers form a set `a`\n-- a : set α,  af : a.finite,  ta : t ⊆ ⋃ (y : α) (H : y ∈ a), eball y (δ / 2)\n-- replace each center by a nearby approximation in `s`, giving a new set `b`\n-- keep only the points in `b` that are close to point in `t`, yielding a new set `c`\n-- points in `t` are well approximated by points in `c`\n-- points in `c` are well approximated by points in `t`\n-- it follows that their Hausdorff distance is small\n-- the set `c` is not empty, as it is well approximated by a nonempty set\n-- let `d` be the version of `c` in the type `nonempty_compacts α`\n-- we have proved that `d` is a good approximation of `t` as requested\n--section\n--namespace\n/-- The distance on `nonempty_compacts α` is the Hausdorff distance, by construction -/\ntheorem nonempty_compacts.dist_eq {x y : NonemptyCompacts α} : dist x y = hausdorffDist (x : Set α) y :=\n  rfl\n#align nonempty_compacts.dist_eq nonempty_compacts.dist_eq\n\n",
 "continuous_inf_edist_Hausdorff_edist":
 "/-\nCopyright (c) 2019 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\n/-- The edistance to a closed set depends continuously on the point and the set -/\ntheorem continuous_inf_edist_Hausdorff_edist : Continuous fun p : α × Closeds α => infEdist p.1 p.2 :=\n  by\n  refine' continuous_of_le_add_edist 2 (by simp) _\n  rintro ⟨x, s⟩ ⟨y, t⟩\n  calc\n    inf_edist x s ≤ inf_edist x t + Hausdorff_edist (t : Set α) s := inf_edist_le_inf_edist_add_Hausdorff_edist\n    _ ≤ inf_edist y t + edist x y + Hausdorff_edist (t : Set α) s :=\n      (add_le_add_right inf_edist_le_inf_edist_add_edist _)\n    _ = inf_edist y t + (edist x y + Hausdorff_edist (s : Set α) t) := by rw [add_assoc, Hausdorff_edist_comm]\n    _ ≤ inf_edist y t + (edist (x, s) (y, t) + edist (x, s) (y, t)) :=\n      (add_le_add_left (add_le_add (le_max_left _ _) (le_max_right _ _)) _)\n    _ = inf_edist y t + 2 * edist (x, s) (y, t) := by rw [← mul_two, mul_comm]\n    \n#align continuous_inf_edist_Hausdorff_edist continuous_inf_edist_Hausdorff_edist\n\n"}