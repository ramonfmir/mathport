{"quadratic_ne_zero_of_discrim_ne_sq":
 "#print quadratic_ne_zero_of_discrim_ne_sq /-\n/-- A quadratic has no root if its discriminant has no square root. -/\ntheorem quadratic_ne_zero_of_discrim_ne_sq (h : ∀ s : R, discrim a b c ≠ s ^ 2) (x : R) : a * x * x + b * x + c ≠ 0 :=\n  mt discrim_eq_sq_of_quadratic_eq_zero <| h _\n#align quadratic_ne_zero_of_discrim_ne_sq quadratic_ne_zero_of_discrim_ne_sq\n-/\n\n",
 "quadratic_eq_zero_iff_of_discrim_eq_zero":
 "#print quadratic_eq_zero_iff_of_discrim_eq_zero /-\n/-- Root of a quadratic when its discriminant equals zero -/\ntheorem quadratic_eq_zero_iff_of_discrim_eq_zero (ha : a ≠ 0) (h : discrim a b c = 0) (x : K) :\n    a * x * x + b * x + c = 0 ↔ x = -b / (2 * a) :=\n  by\n  have : discrim a b c = 0 * 0 := by rw [h, MulZeroClass.mul_zero]\n  rw [quadratic_eq_zero_iff ha this, add_zero, sub_zero, or_self_iff]\n#align quadratic_eq_zero_iff_of_discrim_eq_zero quadratic_eq_zero_iff_of_discrim_eq_zero\n-/\n\n",
 "quadratic_eq_zero_iff_discrim_eq_sq":
 "#print quadratic_eq_zero_iff_discrim_eq_sq /-\n/-- A quadratic has roots if and only if its discriminant equals some square.\n-/\ntheorem quadratic_eq_zero_iff_discrim_eq_sq [NeZero (2 : R)] [NoZeroDivisors R] (ha : a ≠ 0) {x : R} :\n    a * x * x + b * x + c = 0 ↔ discrim a b c = (2 * a * x + b) ^ 2 :=\n  by\n  refine' ⟨discrim_eq_sq_of_quadratic_eq_zero, fun h => _⟩\n  rw [discrim] at h\n  have ha : 2 * 2 * a ≠ 0 := mul_ne_zero (mul_ne_zero (NeZero.ne _) (NeZero.ne _)) ha\n  apply mul_left_cancel₀ ha\n  linear_combination -h\n#align quadratic_eq_zero_iff_discrim_eq_sq quadratic_eq_zero_iff_discrim_eq_sq\n-/\n\n",
 "quadratic_eq_zero_iff":
 "#print quadratic_eq_zero_iff /-\n/-- Roots of a quadratic equation. -/\ntheorem quadratic_eq_zero_iff (ha : a ≠ 0) {s : K} (h : discrim a b c = s * s) (x : K) :\n    a * x * x + b * x + c = 0 ↔ x = (-b + s) / (2 * a) ∨ x = (-b - s) / (2 * a) :=\n  by\n  rw [quadratic_eq_zero_iff_discrim_eq_sq ha, h, sq, mul_self_eq_mul_self_iff]\n  field_simp\n  apply or_congr\n  · constructor <;> intro h' <;> linear_combination -h'\n  · constructor <;> intro h' <;> linear_combination h'\n#align quadratic_eq_zero_iff quadratic_eq_zero_iff\n-/\n\n",
 "exists_quadratic_eq_zero":
 "#print exists_quadratic_eq_zero /-\n/-- A quadratic has roots if its discriminant has square roots -/\ntheorem exists_quadratic_eq_zero (ha : a ≠ 0) (h : ∃ s, discrim a b c = s * s) : ∃ x, a * x * x + b * x + c = 0 :=\n  by\n  rcases h with ⟨s, hs⟩\n  use (-b + s) / (2 * a)\n  rw [quadratic_eq_zero_iff ha hs]\n  simp\n#align exists_quadratic_eq_zero exists_quadratic_eq_zero\n-/\n\n",
 "discrim_neg":
 "#print discrim_neg /-\n/-\nCopyright (c) 2019 Zhouhang Zhou. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Zhouhang Zhou\n-/\n@[simp]\ntheorem discrim_neg [Ring R] (a b c : R) : discrim (-a) (-b) (-c) = discrim a b c := by simp [discrim]\n#align discrim_neg discrim_neg\n-/\n\n",
 "discrim_lt_zero_of_neg":
 "#print discrim_lt_zero_of_neg /-\ntheorem discrim_lt_zero_of_neg (ha : a ≠ 0) (h : ∀ x : K, a * x * x + b * x + c < 0) : discrim a b c < 0 :=\n  discrim_neg a b c ▸ discrim_lt_zero (neg_ne_zero.2 ha) (by simpa only [neg_mul, ← neg_add, neg_pos] )\n#align discrim_lt_zero_of_neg discrim_lt_zero_of_neg\n-/\n\n",
 "discrim_lt_zero":
 "#print discrim_lt_zero /-\n/-- If a polynomial of degree 2 is always positive, then its discriminant is negative,\nat least when the coefficient of the quadratic term is nonzero.\n-/\ntheorem discrim_lt_zero (ha : a ≠ 0) (h : ∀ x : K, 0 < a * x * x + b * x + c) : discrim a b c < 0 :=\n  by\n  have : ∀ x : K, 0 ≤ a * x * x + b * x + c := fun x => le_of_lt (h x)\n  refine' lt_of_le_of_ne (discrim_le_zero this) _\n  intro h'\n  have := h (-b / (2 * a))\n  have : a * (-b / (2 * a)) * (-b / (2 * a)) + b * (-b / (2 * a)) + c = 0 := by\n    rw [quadratic_eq_zero_iff_of_discrim_eq_zero ha h' (-b / (2 * a))]\n  linarith\n#align discrim_lt_zero discrim_lt_zero\n-/\n\n",
 "discrim_le_zero_of_nonpos":
 "#print discrim_le_zero_of_nonpos /-\ntheorem discrim_le_zero_of_nonpos (h : ∀ x : K, a * x * x + b * x + c ≤ 0) : discrim a b c ≤ 0 :=\n  discrim_neg a b c ▸ discrim_le_zero (by simpa only [neg_mul, ← neg_add, neg_nonneg] )\n#align discrim_le_zero_of_nonpos discrim_le_zero_of_nonpos\n-/\n\n",
 "discrim_le_zero":
 "#print discrim_le_zero /-\n/-- If a polynomial of degree 2 is always nonnegative, then its discriminant is nonpositive. -/\ntheorem discrim_le_zero (h : ∀ x : K, 0 ≤ a * x * x + b * x + c) : discrim a b c ≤ 0 :=\n  by\n  rw [discrim, sq]\n  obtain ha | rfl | ha : a < 0 ∨ a = 0 ∨ 0 < a := lt_trichotomy a 0\n  -- if a < 0\n  · have : tendsto (fun x => (a * x + b) * x + c) at_top at_bot :=\n      tendsto_at_bot_add_const_right _ c\n        ((tendsto_at_bot_add_const_right _ b (tendsto_id.neg_const_mul_at_top ha)).at_bot_mul_at_top tendsto_id)\n    rcases(this.eventually (eventually_lt_at_bot 0)).exists with ⟨x, hx⟩\n    exact false.elim ((h x).not_lt <| by rwa [← add_mul])\n  -- if a = 0\n  · rcases eq_or_ne b 0 with (rfl | hb)\n    · simp\n    · have := h ((-c - 1) / b)\n      rw [mul_div_cancel' _ hb] at this\n      linarith\n  -- if a > 0\n  · have ha' : 0 ≤ 4 * a := mul_nonneg zero_le_four ha.le\n    have := h (-b / (2 * a))\n    convert neg_nonpos.2 (mul_nonneg ha' (h (-b / (2 * a))))\n    field_simp [ha.ne']\n    ring\n#align discrim_le_zero discrim_le_zero\n-/\n\n",
 "discrim_eq_sq_of_quadratic_eq_zero":
 "#print discrim_eq_sq_of_quadratic_eq_zero /-\ntheorem discrim_eq_sq_of_quadratic_eq_zero {x : R} (h : a * x * x + b * x + c = 0) :\n    discrim a b c = (2 * a * x + b) ^ 2 := by\n  rw [discrim]\n  linear_combination -4 * a * h\n#align discrim_eq_sq_of_quadratic_eq_zero discrim_eq_sq_of_quadratic_eq_zero\n-/\n\n"}