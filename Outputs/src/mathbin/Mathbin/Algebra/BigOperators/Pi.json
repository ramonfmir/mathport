{"univ_prod_mulSingle":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n#print Finset.univ_prod_mulSingle /-\n@[to_additive]\ntheorem Finset.univ_prod_mulSingle [Fintype I] (f : ∀ i, Z i) :\n    finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (Pi.mulSingle i (f i)) =\n      f :=\n  by\n  ext a\n  simp\n#align finset.univ_prod_mul_single Finset.univ_prod_mulSingle\n#align finset.univ_sum_single Finset.univ_sum_single\n-/\n\n",
 "snd_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n@[to_additive]\ntheorem snd_prod :\n    (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f c)).2 =\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f c).2 :=\n  (MonoidHom.snd α β).map_prod f s\n#align snd_prod snd_prod\n\n",
 "prod_mk_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n#print prod_mk_prod /-\n@[to_additive prod_mk_sum]\ntheorem prod_mk_prod {α β γ : Type _} [CommMonoid α] [CommMonoid β] (s : Finset γ) (f : γ → α) (g : γ → β) :\n    (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f x),\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (g x)) =\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f x, g x) :=\n  haveI := Classical.decEq γ\n  Finset.induction_on s rfl (by simp (config := { contextual := true }) [Prod.ext_iff])\n#align prod_mk_prod prod_mk_prod\n#align prod_mk_sum prod_mk_sum\n-/\n\n",
 "prod_fn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n#print Finset.prod_fn /-\n/-- An 'unapplied' analogue of `finset.prod_apply`. -/\n@[to_additive \"An 'unapplied' analogue of `finset.sum_apply`.\"]\ntheorem Finset.prod_fn {α : Type _} {β : α → Type _} {γ} [∀ a, CommMonoid (β a)] (s : Finset γ) (g : γ → ∀ a, β a) :\n    finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (g c) = fun a =>\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (g c a) :=\n  funext fun a => Finset.prod_apply _ _ _\n#align finset.prod_fn Finset.prod_fn\n#align finset.sum_fn Finset.sum_fn\n-/\n\n",
 "prod_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ -/\n#print Fintype.prod_apply /-\n@[simp, to_additive]\ntheorem Fintype.prod_apply {α : Type _} {β : α → Type _} {γ : Type _} [Fintype γ] [∀ a, CommMonoid (β a)] (a : α)\n    (g : γ → ∀ a, β a) :\n    (finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\" (g c))\n        a =\n      finset.prod_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod_univ\"\n        (g c a) :=\n  Finset.prod_apply a Finset.univ g\n#align fintype.prod_apply Fintype.prod_apply\n#align fintype.sum_apply Fintype.sum_apply\n-/\n\n",
 "multiset_prod_apply":
 "@[to_additive]\ntheorem multiset_prod_apply {α : Type _} {β : α → Type _} [∀ a, CommMonoid (β a)] (a : α) (s : Multiset (∀ a, β a)) :\n    s.prod a = (s.map fun f : ∀ a, β a => f a).prod :=\n  (evalMonoidHom β a).map_multiset_prod _\n#align multiset_prod_apply multiset_prod_apply\n\n",
 "list_prod_apply":
 "/-\nCopyright (c) 2018 Simon Hudon. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Simon Hudon, Patrick Massot\n-/\n@[to_additive]\ntheorem list_prod_apply {α : Type _} {β : α → Type _} [∀ a, Monoid (β a)] (a : α) (l : List (∀ a, β a)) :\n    l.prod a = (l.map fun f : ∀ a, β a => f a).prod :=\n  (evalMonoidHom β a).map_list_prod _\n#align list_prod_apply list_prod_apply\n\n",
 "functions_ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n#print MonoidHom.functions_ext' /-\n/-- This is used as the ext lemma instead of `monoid_hom.functions_ext` for reasons explained in\nnote [partially-applied ext lemmas]. -/\n@[ext,\n  to_additive\n      \"\\nThis is used as the ext lemma instead of `add_monoid_hom.functions_ext` for reasons explained in\\nnote [partially-applied ext lemmas].\"]\ntheorem MonoidHom.functions_ext' [Finite I] (M : Type _) [CommMonoid M] (g h : «expr →* » (∀ i, Z i) M)\n    (H : ∀ i, g.comp (MonoidHom.single Z i) = h.comp (MonoidHom.single Z i)) : g = h :=\n  g.functions_ext M h fun i => MonoidHom.congr_fun (H i)\n#align monoid_hom.functions_ext' MonoidHom.functions_ext'\n#align add_monoid_hom.functions_ext' AddMonoidHom.functions_ext'\n-/\n\n",
 "functions_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.functions_ext /-\n@[ext]\ntheorem RingHom.functions_ext [Finite I] (G : Type _) [NonAssocSemiring G] (g h : «expr →+* » (∀ i, f i) G)\n    (H : ∀ (i : I) (x : f i), g (single i x) = h (single i x)) : g = h :=\n  RingHom.coe_addMonoidHom_injective <| @AddMonoidHom.functions_ext I _ f _ _ G _ (g : «expr →+ » (∀ i, f i) G) h H\n#align ring_hom.functions_ext RingHom.functions_ext\n-/\n\n",
 "fst_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n@[to_additive]\ntheorem fst_prod :\n    (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f c)).1 =\n      finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f c).1 :=\n  (MonoidHom.fst α β).map_prod f s\n#align fst_prod fst_prod\n\n"}