{"prod_cons_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n-- Convert the fintype instance expression `ft` to a list of its elements.\n-- Unfold it to the `fintype.mk` constructor and a list of arguments.\n-- try some other parsers\n@[to_additive]\ntheorem list.prod_cons_congr {α : Type _} [monoid α] (xs : list α) (x y z : α) (his : xs.prod = y) (hi : x * y = z) :\n    (sym.cons' x xs).prod = z := by rw [List.prod_cons, his, hi]\n#align list.prod_cons_congr list.prod_cons_congr\n\n",
 "prod_congr":
 "@[to_additive]\ntheorem multiset.prod_congr {α : Type _} [comm_monoid α] {xs : Multiset α} {xs' : list α} {z : α}\n    (h₁ : xs = (xs' : Multiset α)) (h₂ : xs'.prod = z) : xs.prod = z := by rw [← h₂, ← Multiset.coe_prod, h₁]\n#align multiset.prod_congr multiset.prod_congr\n\n",
 "not_mem_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n/-\nCopyright (c) 2022 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\ntheorem list.not_mem_cons {α : Type _} {x y : α} {ys : list α} (h₁ : x ≠ y) (h₂ : x ∉ ys) : x ∉ sym.cons' y ys :=\n  fun h => ((List.mem_cons _ _ _).mp h).elim h₁ h₂\n#align list.not_mem_cons list.not_mem_cons\n\n",
 "mk_congr":
 "theorem finset.mk_congr {α : Type _} {xs xs' : Multiset α} (h : xs = xs') (nd nd') :\n    finset.mk xs nd = finset.mk xs' nd' := by congr <;> assumption\n#align finset.mk_congr finset.mk_congr\n\n",
 "map_cons_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\ntheorem list.map_cons_congr {α β : Type _} (f : α → β) {x : α} {xs : list α} {fx : β} {fxs : list β} (h₁ : f x = fx)\n    (h₂ : xs.map f = fxs) : (sym.cons' x xs).map f = sym.cons' fx fxs := by rw [list.map_cons, h₁, h₂]\n#align list.map_cons_congr list.map_cons_congr\n\n",
 "map_congr":
 "#print Multiset.map_congr /-\ntheorem Multiset.map_congr {α β : Type _} (f : α → β) {xs : Multiset α} {xs' : list α} {ys : list β}\n    (xs_eq : xs = (xs' : Multiset α)) (ys_eq : xs'.map f = ys) : xs.map f = (ys : Multiset β) := by\n  rw [← ys_eq, ← Multiset.coe_map, xs_eq]\n#align multiset.map_congr Multiset.map_congr\n-/\n\n",
 "insert_eq_coe_list_of_mem":
 "theorem finset.insert_eq_coe_list_of_mem {α : Type _} [decidable_eq α] (x : α) (xs : Finset α) {xs' : list α}\n    (h : x ∈ xs') (nd_xs : xs'.nodup) (hxs' : xs = finset.mk (↑xs') (Multiset.coe_nodup.mpr nd_xs)) :\n    insert x xs = finset.mk (↑xs') (Multiset.coe_nodup.mpr nd_xs) :=\n  by\n  have h : x ∈ xs := by simpa [hxs'] using h\n  rw [Finset.insert_eq_of_mem h, hxs']\n#align finset.insert_eq_coe_list_of_mem finset.insert_eq_coe_list_of_mem\n\n",
 "insert_eq_coe_list_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `sym.cons' -/\ntheorem finset.insert_eq_coe_list_cons {α : Type _} [decidable_eq α] (x : α) (xs : Finset α) {xs' : list α}\n    (h : x ∉ xs') (nd_xs : xs'.nodup) (nd_xxs : (sym.cons' x xs').nodup)\n    (hxs' : xs = finset.mk (↑xs') (Multiset.coe_nodup.mpr nd_xs)) :\n    insert x xs = finset.mk (↑(sym.cons' x xs')) (Multiset.coe_nodup.mpr nd_xxs) :=\n  by\n  have h : x ∉ xs := by simpa [hxs'] using h\n  rw [← Finset.val_inj, Finset.insert_val_of_not_mem h, hxs']\n  simp only [Multiset.cons_coe]\n#align finset.insert_eq_coe_list_cons finset.insert_eq_coe_list_cons\n\n",
 "eval_prod_of_list":
 "@[to_additive]\ntheorem finset.eval_prod_of_list {β α : Type _} [comm_monoid β] (s : Finset α) (f : α → β) {is : list α}\n    (his : is.nodup) (hs : finset.mk (↑is) (Multiset.coe_nodup.mpr his) = s) {x : β} (hx : (is.map f).prod = x) :\n    s.prod f = x := by rw [← hs, finset.prod_mk, Multiset.coe_map, Multiset.coe_prod, hx]\n#align finset.eval_prod_of_list finset.eval_prod_of_list\n\n",
 "cons_congr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\ntheorem multiset.cons_congr {α : Type _} (x : α) {xs : Multiset α} {xs' : list α} (xs_eq : (xs' : Multiset α) = xs) :\n    (list.cons x xs' : Multiset α) = «expr ::ₘ » x xs := by rw [← xs_eq] <;> rfl\n#align multiset.cons_congr multiset.cons_congr\n\n"}