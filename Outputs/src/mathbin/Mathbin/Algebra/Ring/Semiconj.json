{"sub_right":
 "@[simp]\ntheorem sub_right (h : SemiconjBy a x y) (h' : SemiconjBy a x' y') : SemiconjBy a (x - x') (y - y') := by\n  simpa only [sub_eq_add_neg] using h.add_right h'.neg_right\n#align sub_right sub_right\n\n",
 "sub_left":
 "@[simp]\ntheorem sub_left (ha : SemiconjBy a x y) (hb : SemiconjBy b x y) : SemiconjBy (a - b) x y := by\n  simpa only [sub_eq_add_neg] using ha.add_left hb.neg_left\n#align sub_left sub_left\n\n",
 "neg_right_iff":
 "@[simp]\ntheorem neg_right_iff : SemiconjBy a (-x) (-y) ↔ SemiconjBy a x y :=\n  ⟨fun h => neg_neg x ▸ neg_neg y ▸ h.neg_right, SemiconjBy.neg_right⟩\n#align neg_right_iff neg_right_iff\n\n",
 "neg_right":
 "theorem neg_right (h : SemiconjBy a x y) : SemiconjBy a (-x) (-y) := by simp only [SemiconjBy, h.eq, neg_mul, mul_neg]\n#align neg_right neg_right\n\n",
 "neg_one_right":
 "@[simp]\ntheorem neg_one_right (a : R) : SemiconjBy a (-1) (-1) :=\n  (one_right a).neg_right\n#align neg_one_right neg_one_right\n\n",
 "neg_one_left":
 "@[simp]\ntheorem neg_one_left (x : R) : SemiconjBy (-1) x x :=\n  (SemiconjBy.one_left x).neg_left\n#align neg_one_left neg_one_left\n\n",
 "neg_left_iff":
 "@[simp]\ntheorem neg_left_iff : SemiconjBy (-a) x y ↔ SemiconjBy a x y :=\n  ⟨fun h => neg_neg a ▸ h.neg_left, SemiconjBy.neg_left⟩\n#align neg_left_iff neg_left_iff\n\n",
 "neg_left":
 "theorem neg_left (h : SemiconjBy a x y) : SemiconjBy (-a) x y := by simp only [SemiconjBy, h.eq, neg_mul, mul_neg]\n#align neg_left neg_left\n\n",
 "add_right":
 "/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Yury Kudryashov, Neil Strickland\n-/\n@[simp]\ntheorem add_right [Distrib R] {a x y x' y' : R} (h : SemiconjBy a x y) (h' : SemiconjBy a x' y') :\n    SemiconjBy a (x + x') (y + y') := by simp only [SemiconjBy, left_distrib, right_distrib, h.eq, h'.eq]\n#align add_right add_right\n\n",
 "add_left":
 "@[simp]\ntheorem add_left [Distrib R] {a b x y : R} (ha : SemiconjBy a x y) (hb : SemiconjBy b x y) : SemiconjBy (a + b) x y :=\n  by simp only [SemiconjBy, left_distrib, right_distrib, ha.eq, hb.eq]\n#align add_left add_left\n\n"}