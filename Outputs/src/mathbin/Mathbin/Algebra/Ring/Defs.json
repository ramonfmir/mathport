{"two_mul":
 "#print two_mul /-\ntheorem two_mul [RightDistribClass α] (n : α) : 2 * n = n + n :=\n  eq.trans (right_distrib 1 1 n) (by simp)\n#align two_mul two_mul\n-/\n\n",
 "sub_one_mul":
 "#print sub_one_mul /-\ntheorem sub_one_mul (a b : α) : (a - 1) * b = a * b - b := by rw [sub_mul, one_mul]\n#align sub_one_mul sub_one_mul\n-/\n\n",
 "sub_mul_add_eq_of_mul_add_eq_mul_add":
 "#print sub_mul_add_eq_of_mul_add_eq_mul_add /-\n/-- A simplification of one side of an equation exploiting right distributivity in rings\n  and the definition of subtraction. -/\ntheorem sub_mul_add_eq_of_mul_add_eq_mul_add : a * e + c = b * e + d → (a - b) * e + c = d := fun h =>\n  calc\n    (a - b) * e + c = a * e + c - b * e := by simp [sub_mul, sub_add_eq_add_sub]\n    _ = d := by rw [h]; simp [@add_sub_cancel α]\n    \n#align sub_mul_add_eq_of_mul_add_eq_mul_add sub_mul_add_eq_of_mul_add_eq_mul_add\n-/\n\n",
 "right_distrib":
 "#print right_distrib /-\ntheorem right_distrib [Mul R] [Add R] [RightDistribClass R] (a b c : R) : (a + b) * c = a * c + b * c :=\n  right_distrib_class.right_distrib a b c\n#align right_distrib right_distrib\n-/\n\n",
 "one_sub_mul":
 "#print one_sub_mul /-\ntheorem one_sub_mul (a b : α) : (1 - a) * b = b - a * b := by rw [sub_mul, one_mul]\n#align one_sub_mul one_sub_mul\n-/\n\n",
 "one_add_one_eq_two":
 "#print one_add_one_eq_two /-\ntheorem one_add_one_eq_two : 1 + 1 = (2 : α) :=\n  rfl\n#align one_add_one_eq_two one_add_one_eq_two\n-/\n\n",
 "one_add_mul":
 "#print one_add_mul /-\ntheorem one_add_mul [RightDistribClass α] (a b : α) : (1 + a) * b = b + a * b := by rw [add_mul, one_mul]\n#align one_add_mul one_add_mul\n-/\n\n",
 "neg_one_mul":
 "#print neg_one_mul /-\n/-- The additive inverse of one multiplied by an element of a ring is the element's additive\n  inverse. -/\ntheorem neg_one_mul (a : α) : -1 * a = -a := by simp\n#align neg_one_mul neg_one_mul\n-/\n\n",
 "neg_mul_neg":
 "#print neg_mul_neg /-\ntheorem neg_mul_neg (a b : α) : -a * -b = a * b := by simp\n#align neg_mul_neg neg_mul_neg\n-/\n\n",
 "neg_mul_eq_neg_mul":
 "#print neg_mul_eq_neg_mul /-\ntheorem neg_mul_eq_neg_mul (a b : α) : -(a * b) = -a * b :=\n  (neg_mul _ _).symm\n#align neg_mul_eq_neg_mul neg_mul_eq_neg_mul\n-/\n\n",
 "neg_mul_eq_mul_neg":
 "#print neg_mul_eq_mul_neg /-\ntheorem neg_mul_eq_mul_neg (a b : α) : -(a * b) = a * -b :=\n  (mul_neg _ _).symm\n#align neg_mul_eq_mul_neg neg_mul_eq_mul_neg\n-/\n\n",
 "neg_mul_comm":
 "#print neg_mul_comm /-\ntheorem neg_mul_comm (a b : α) : -a * b = a * -b := by simp\n#align neg_mul_comm neg_mul_comm\n-/\n\n",
 "neg_mul":
 "#print neg_mul /-\n@[simp]\ntheorem neg_mul (a b : α) : -a * b = -(a * b) :=\n  has_distrib_neg.neg_mul _ _\n#align neg_mul neg_mul\n-/\n\n",
 "neg_eq_neg_one_mul":
 "#print neg_eq_neg_one_mul /-\ntheorem neg_eq_neg_one_mul (a : α) : -a = -1 * a := by simp\n#align neg_eq_neg_one_mul neg_eq_neg_one_mul\n-/\n\n",
 "mul_two":
 "#print mul_two /-\ntheorem mul_two [LeftDistribClass α] (n : α) : n * 2 = n + n :=\n  (left_distrib n 1 1).trans (by simp)\n#align mul_two mul_two\n-/\n\n",
 "mul_sub_right_distrib":
 "#print mul_sub_right_distrib /-\ntheorem mul_sub_right_distrib (a b c : α) : (a - b) * c = a * c - b * c := by\n  simpa only [sub_eq_add_neg, neg_mul_eq_neg_mul] using add_mul a (-b) c\n#align mul_sub_right_distrib mul_sub_right_distrib\n-/\n\n",
 "mul_sub_one":
 "#print mul_sub_one /-\ntheorem mul_sub_one (a b : α) : a * (b - 1) = a * b - a := by rw [mul_sub, mul_one]\n#align mul_sub_one mul_sub_one\n-/\n\n",
 "mul_sub_left_distrib":
 "#print mul_sub_left_distrib /-\n-- We defer the instance `non_unital_non_assoc_ring.to_has_distrib_neg` to `algebra.ring.basic`\n-- as it relies on the lemma `eq_neg_of_add_eq_zero_left`.\ntheorem mul_sub_left_distrib (a b c : α) : a * (b - c) = a * b - a * c := by\n  simpa only [sub_eq_add_neg, neg_mul_eq_mul_neg] using mul_add a b (-c)\n#align mul_sub_left_distrib mul_sub_left_distrib\n-/\n\n",
 "mul_one_sub":
 "#print mul_one_sub /-\ntheorem mul_one_sub (a b : α) : a * (1 - b) = a - a * b := by rw [mul_sub, mul_one]\n#align mul_one_sub mul_one_sub\n-/\n\n",
 "mul_one_add":
 "#print mul_one_add /-\ntheorem mul_one_add [LeftDistribClass α] (a b : α) : a * (1 + b) = a + a * b := by rw [mul_add, mul_one]\n#align mul_one_add mul_one_add\n-/\n\n",
 "mul_neg_one":
 "#print mul_neg_one /-\n/-- An element of a ring multiplied by the additive inverse of one is the element's additive\n  inverse. -/\ntheorem mul_neg_one (a : α) : a * -1 = -a := by simp\n#align mul_neg_one mul_neg_one\n-/\n\n",
 "mul_neg":
 "#print mul_neg /-\n@[simp]\ntheorem mul_neg (a b : α) : a * -b = -(a * b) :=\n  has_distrib_neg.mul_neg _ _\n#align mul_neg mul_neg\n-/\n\n",
 "mul_ite":
 "#print mul_ite /-\n@[to_additive]\ntheorem mul_ite {α} [Mul α] (P : Prop) [decidable P] (a b c : α) :\n    (a * if P then b else c) = if P then a * b else a * c := by split_ifs <;> rfl\n#align mul_ite mul_ite\n-/\n\n",
 "mul_boole":
 "#print mul_boole /-\n-- We make `mul_ite` and `ite_mul` simp lemmas,\n-- but not `add_ite` or `ite_add`.\n-- The problem we're trying to avoid is dealing with\n-- summations of the form `∑ x in s, (f x + ite P 1 0)`,\n-- in which `add_ite` followed by `sum_ite` would needlessly slice up\n-- the `f x` terms according to whether `P` holds at `x`.\n-- There doesn't appear to be a corresponding difficulty so far with\n-- `mul_ite` and `ite_mul`.\n@[simp]\ntheorem mul_boole {α} [mul_zero_one_class α] (P : Prop) [decidable P] (a : α) :\n    (a * if P then 1 else 0) = if P then a else 0 := by simp\n#align mul_boole mul_boole\n-/\n\n",
 "mul_add_one":
 "#print mul_add_one /-\ntheorem mul_add_one [LeftDistribClass α] (a b : α) : a * (b + 1) = a * b + a := by rw [mul_add, mul_one]\n#align mul_add_one mul_add_one\n-/\n\n",
 "mul_add_eq_mul_add_iff_sub_mul_add_eq":
 "#print mul_add_eq_mul_add_iff_sub_mul_add_eq /-\n/-- An iff statement following from right distributivity in rings and the definition\n  of subtraction. -/\ntheorem mul_add_eq_mul_add_iff_sub_mul_add_eq : a * e + c = b * e + d ↔ (a - b) * e + c = d :=\n  calc\n    a * e + c = b * e + d ↔ a * e + c = d + b * e := by simp [add_comm]\n    _ ↔ a * e + c - b * e = d := iff.intro (fun h => by rw [h]; simp) fun h => by rw [← h]; simp\n    _ ↔ (a - b) * e + c = d := by simp [sub_mul, sub_add_eq_add_sub]\n    \n#align mul_add_eq_mul_add_iff_sub_mul_add_eq mul_add_eq_mul_add_iff_sub_mul_add_eq\n-/\n\n",
 "left_distrib":
 "#print left_distrib /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Yury Kudryashov, Neil Strickland\n-/\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\ntheorem left_distrib [Mul R] [Add R] [LeftDistribClass R] (a b c : R) : a * (b + c) = a * b + a * c :=\n  left_distrib_class.left_distrib a b c\n#align left_distrib left_distrib\n-/\n\n",
 "ite_mul_zero_right":
 "#print ite_mul_zero_right /-\ntheorem ite_mul_zero_right {α : Type _} [mul_zero_class α] (P : Prop) [decidable P] (a b : α) :\n    ite P (a * b) 0 = a * ite P b 0 := by by_cases h : P <;> simp [h]\n#align ite_mul_zero_right ite_mul_zero_right\n-/\n\n",
 "ite_mul_zero_left":
 "#print ite_mul_zero_left /-\ntheorem ite_mul_zero_left {α : Type _} [mul_zero_class α] (P : Prop) [decidable P] (a b : α) :\n    ite P (a * b) 0 = ite P a 0 * b := by by_cases h : P <;> simp [h]\n#align ite_mul_zero_left ite_mul_zero_left\n-/\n\n",
 "ite_mul":
 "#print ite_mul /-\n@[to_additive]\ntheorem ite_mul {α} [Mul α] (P : Prop) [decidable P] (a b c : α) :\n    (if P then a else b) * c = if P then a * c else b * c := by split_ifs <;> rfl\n#align ite_mul ite_mul\n-/\n\n",
 "ite_and_mul_zero":
 "#print ite_and_mul_zero /-\ntheorem ite_and_mul_zero {α : Type _} [mul_zero_class α] (P Q : Prop) [decidable P] [decidable Q] (a b : α) :\n    ite (P ∧ Q) (a * b) 0 = ite P a 0 * ite Q b 0 := by\n  simp only [← ite_and, ite_mul, mul_ite, mul_zero, zero_mul, and_comm']\n#align ite_and_mul_zero ite_and_mul_zero\n-/\n\n",
 "distrib_three_right":
 "#print distrib_three_right /-\ntheorem distrib_three_right [Mul R] [Add R] [RightDistribClass R] (a b c d : R) :\n    (a + b + c) * d = a * d + b * d + c * d := by simp [right_distrib]\n#align distrib_three_right distrib_three_right\n-/\n\n",
 "boole_mul":
 "#print boole_mul /-\n@[simp]\ntheorem boole_mul {α} [mul_zero_one_class α] (P : Prop) [decidable P] (a : α) :\n    (if P then 1 else 0) * a = if P then a else 0 := by simp\n#align boole_mul boole_mul\n-/\n\n",
 "bit0_eq_two_mul":
 "#print bit0_eq_two_mul /-\ntheorem bit0_eq_two_mul [RightDistribClass α] (n : α) : bit0 n = 2 * n :=\n  (two_mul _).symm\n#align bit0_eq_two_mul bit0_eq_two_mul\n-/\n\n",
 "add_one_mul":
 "#print add_one_mul /-\ntheorem add_one_mul [RightDistribClass α] (a b : α) : (a + 1) * b = a * b + b := by rw [add_mul, one_mul]\n#align add_one_mul add_one_mul\n-/\n\n",
 "add_mul_self_eq":
 "#print add_mul_self_eq /-\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\ntheorem add_mul_self_eq (a b : α) : (a + b) * (a + b) = a * a + 2 * a * b + b * b := by\n  simp only [two_mul, add_mul, mul_add, add_assoc, mul_comm b]\n#align add_mul_self_eq add_mul_self_eq\n-/\n\n"}