{"trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\ntheorem trans_apply (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') (a : R) : e₁.trans e₂ a = e₂ (e₁ a) :=\n  rfl\n#align trans_apply trans_apply\n\n",
 "to_ring_hom_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_ring_hom_trans (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂).to_ring_hom = e₂.to_ring_hom.comp e₁.to_ring_hom :=\n  rfl\n#align to_ring_hom_trans to_ring_hom_trans\n\n",
 "to_ring_hom_refl":
 "@[simp]\ntheorem to_ring_hom_refl : (RingEquiv.refl R).to_ring_hom = RingHom.id R :=\n  rfl\n#align to_ring_hom_refl to_ring_hom_refl\n\n",
 "to_ring_hom_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\ntheorem to_ring_hom_eq_coe (f : «expr ≃+* » R S) : f.to_ring_hom = ↑f :=\n  rfl\n#align to_ring_hom_eq_coe to_ring_hom_eq_coe\n\n",
 "to_ring_hom_comp_symm_to_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_ring_hom_comp_symm_to_ring_hom (e : «expr ≃+* » R S) :\n    e.to_ring_hom.comp e.symm.to_ring_hom = RingHom.id _ :=\n  by\n  ext\n  simp\n#align to_ring_hom_comp_symm_to_ring_hom to_ring_hom_comp_symm_to_ring_hom\n\n",
 "to_ring_hom_apply_symm_to_ring_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_ring_hom_apply_symm_to_ring_hom_apply (e : «expr ≃+* » R S) :\n    ∀ y : S, e.to_ring_hom (e.symm.to_ring_hom y) = y :=\n  e.to_equiv.apply_symm_apply\n#align to_ring_hom_apply_symm_to_ring_hom_apply to_ring_hom_apply_symm_to_ring_hom_apply\n\n",
 "to_opposite_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem to_opposite_symm_apply (r : «expr ᵐᵒᵖ» R) : (toOpposite R).symm r = unop r :=\n  rfl\n#align to_opposite_symm_apply to_opposite_symm_apply\n\n",
 "to_opposite_apply":
 "@[simp]\ntheorem to_opposite_apply (r : R) : toOpposite R r = op r :=\n  rfl\n#align to_opposite_apply to_opposite_apply\n\n",
 "to_non_unital_ring_hom_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_non_unital_ring_hom_trans (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂).to_non_unital_ring_hom = e₂.to_non_unital_ring_hom.comp e₁.to_non_unital_ring_hom :=\n  rfl\n#align to_non_unital_ring_hom_trans to_non_unital_ring_hom_trans\n\n",
 "to_non_unital_ring_hom_refl":
 "@[simp]\ntheorem to_non_unital_ring_hom_refl : (RingEquiv.refl R).to_non_unital_ring_hom = NonUnitalRingHom.id R :=\n  rfl\n#align to_non_unital_ring_hom_refl to_non_unital_ring_hom_refl\n\n",
 "to_non_unital_ring_hom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ+* » -/\ntheorem to_non_unital_ring_hom_injective :\n    function.injective (toNonUnitalRingHom : «expr ≃+* » R S → «expr →ₙ+* » R S) := fun f g h =>\n  RingEquiv.ext (NonUnitalRingHom.ext_iff.1 h)\n#align to_non_unital_ring_hom_injective to_non_unital_ring_hom_injective\n\n",
 "to_non_unital_ring_hom_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- The instance priority is lowered here so that in the case when `R` and `S` are both unital, Lean\nwill first find and use `ring_equiv.has_coe_to_ring_hom`. -/\ntheorem to_non_unital_ring_hom_eq_coe (f : «expr ≃+* » R S) : f.to_non_unital_ring_hom = ↑f :=\n  rfl\n#align to_non_unital_ring_hom_eq_coe to_non_unital_ring_hom_eq_coe\n\n",
 "to_non_unital_ring_hom_comp_symm_to_non_unital_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_non_unital_ring_hom_comp_symm_to_non_unital_ring_hom (e : «expr ≃+* » R S) :\n    e.to_non_unital_ring_hom.comp e.symm.to_non_unital_ring_hom = NonUnitalRingHom.id _ :=\n  by\n  ext\n  simp\n#align to_non_unital_ring_hom_comp_symm_to_non_unital_ring_hom to_non_unital_ring_hom_comp_symm_to_non_unital_ring_hom\n\n",
 "to_non_unital_ring_hom_commutes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ+* » -/\n/-- The two paths coercion can take to a `non_unital_ring_hom` are equivalent -/\n@[simp, norm_cast]\ntheorem to_non_unital_ring_hom_commutes (f : «expr ≃+* » R S) :\n    ((f : «expr →+* » R S) : «expr →ₙ+* » R S) = (f : «expr →ₙ+* » R S) :=\n  rfl\n#align to_non_unital_ring_hom_commutes to_non_unital_ring_hom_commutes\n\n",
 "to_non_unital_ring_hom_apply_symm_to_non_unital_ring_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_non_unital_ring_hom_apply_symm_to_non_unital_ring_hom_apply (e : «expr ≃+* » R S) :\n    ∀ y : S, e.to_non_unital_ring_hom (e.symm.to_non_unital_ring_hom y) = y :=\n  e.to_equiv.apply_symm_apply\n#align to_non_unital_ring_hom_apply_symm_to_non_unital_ring_hom_apply to_non_unital_ring_hom_apply_symm_to_non_unital_ring_hom_apply\n\n",
 "to_mul_equiv_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_mul_equiv_eq_coe (f : «expr ≃+* » R S) : f.to_mul_equiv = ↑f :=\n  rfl\n#align to_mul_equiv_eq_coe to_mul_equiv_eq_coe\n\n",
 "to_monoid_hom_refl":
 "@[simp]\ntheorem to_monoid_hom_refl : (RingEquiv.refl R).to_monoid_hom = MonoidHom.id R :=\n  rfl\n#align to_monoid_hom_refl to_monoid_hom_refl\n\n",
 "to_monoid_hom_commutes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n/-- The two paths coercion can take to an `monoid_hom` are equivalent -/\ntheorem to_monoid_hom_commutes (f : «expr ≃+* » R S) :\n    (f : «expr →+* » R S).to_monoid_hom = (f : «expr ≃* » R S).to_monoid_hom :=\n  rfl\n#align to_monoid_hom_commutes to_monoid_hom_commutes\n\n",
 "to_fun_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_fun_eq_coe (f : «expr ≃+* » R S) : f.to_fun = f :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "to_equiv_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/-\nCopyright (c) 2018 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Callum Sutton, Yury Kudryashov\n-/\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n-- See note [lower instance priority]\n@[simp]\ntheorem to_equiv_eq_coe (f : «expr ≃+* » R S) : f.to_equiv = f :=\n  rfl\n#align to_equiv_eq_coe to_equiv_eq_coe\n\n",
 "to_equiv_commutes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n/-- The two paths coercion can take to an `equiv` are equivalent -/\ntheorem to_equiv_commutes (f : «expr ≃+* » R S) : (f : «expr ≃+ » R S).to_equiv = (f : «expr ≃* » R S).to_equiv :=\n  rfl\n#align to_equiv_commutes to_equiv_commutes\n\n",
 "to_add_monoid_hom_refl":
 "@[simp]\ntheorem to_add_monoid_hom_refl : (RingEquiv.refl R).to_add_monoid_hom = AddMonoidHom.id R :=\n  rfl\n#align to_add_monoid_hom_refl to_add_monoid_hom_refl\n\n",
 "to_add_monoid_hom_commutes":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/-- The two paths coercion can take to an `add_monoid_hom` are equivalent -/\ntheorem to_add_monoid_hom_commutes (f : «expr ≃+* » R S) :\n    (f : «expr →+* » R S).to_add_monoid_hom = (f : «expr ≃+ » R S).to_add_monoid_hom :=\n  rfl\n#align to_add_monoid_hom_commutes to_add_monoid_hom_commutes\n\n",
 "to_add_equiv_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem to_add_equiv_eq_coe (f : «expr ≃+* » R S) : f.to_add_equiv = ↑f :=\n  rfl\n#align to_add_equiv_eq_coe to_add_equiv_eq_coe\n\n",
 "toRingHom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print toRingHom_injective /-\ntheorem toRingHom_injective : function.injective (toRingHom : «expr ≃+* » R S → «expr →+* » R S) := fun f g h =>\n  RingEquiv.ext (RingHom.ext_iff.1 h)\n#align to_ring_hom_injective toRingHom_injective\n-/\n\n",
 "symm_trans_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_trans_self (e : «expr ≃+* » R S) : e.symm.trans e = RingEquiv.refl S :=\n  ext e.4\n#align symm_trans_self symm_trans_self\n\n",
 "symm_trans_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_trans_apply (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') (a : S') :\n    (e₁.trans e₂).symm a = e₁.symm (e₂.symm a) :=\n  rfl\n#align symm_trans_apply symm_trans_apply\n\n",
 "symm_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\ntheorem symm_trans (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') : (e₁.trans e₂).symm = e₂.symm.trans e₁.symm :=\n  rfl\n#align symm_trans symm_trans\n\n",
 "symm_to_ring_hom_comp_to_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_to_ring_hom_comp_to_ring_hom (e : «expr ≃+* » R S) :\n    e.symm.to_ring_hom.comp e.to_ring_hom = RingHom.id _ :=\n  by\n  ext\n  simp\n#align symm_to_ring_hom_comp_to_ring_hom symm_to_ring_hom_comp_to_ring_hom\n\n",
 "symm_to_ring_hom_apply_to_ring_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_to_ring_hom_apply_to_ring_hom_apply (e : «expr ≃+* » R S) :\n    ∀ x : R, e.symm.to_ring_hom (e.to_ring_hom x) = x :=\n  Equiv.symm_apply_apply e.to_equiv\n#align symm_to_ring_hom_apply_to_ring_hom_apply symm_to_ring_hom_apply_to_ring_hom_apply\n\n",
 "symm_to_non_unital_ring_hom_comp_to_non_unital_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_to_non_unital_ring_hom_comp_to_non_unital_ring_hom (e : «expr ≃+* » R S) :\n    e.symm.to_non_unital_ring_hom.comp e.to_non_unital_ring_hom = NonUnitalRingHom.id _ :=\n  by\n  ext\n  simp\n#align symm_to_non_unital_ring_hom_comp_to_non_unital_ring_hom symm_to_non_unital_ring_hom_comp_to_non_unital_ring_hom\n\n",
 "symm_to_non_unital_ring_hom_apply_to_non_unital_ring_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_to_non_unital_ring_hom_apply_to_non_unital_ring_hom_apply (e : «expr ≃+* » R S) :\n    ∀ x : R, e.symm.to_non_unital_ring_hom (e.to_non_unital_ring_hom x) = x :=\n  Equiv.symm_apply_apply e.to_equiv\n#align symm_to_non_unital_ring_hom_apply_to_non_unital_ring_hom_apply symm_to_non_unital_ring_hom_apply_to_non_unital_ring_hom_apply\n\n",
 "symm_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_symm (e : «expr ≃+* » R S) : e.symm.symm = e :=\n  ext fun x => rfl\n#align symm_symm symm_symm\n\n",
 "symm_mk":
 "@[simp]\ntheorem symm_mk (f : R → S) (g h₁ h₂ h₃ h₄) :\n    (mk f g h₁ h₂ h₃ h₄).symm =\n      { (mk f g h₁ h₂ h₃ h₄).symm with\n        to_fun := g\n        inv_fun := f } :=\n  rfl\n#align symm_mk symm_mk\n\n",
 "symm_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem symm_comp (e : «expr ≃+* » R S) : (e.symm : «expr →+* » S R).comp (e : «expr →+* » R S) = RingHom.id R :=\n  RingHom.ext e.symm_apply_apply\n#align symm_comp symm_comp\n\n",
 "symm_bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\ntheorem symm_bijective : function.bijective (RingEquiv.symm : «expr ≃+* » R S → «expr ≃+* » S R) :=\n  Equiv.bijective ⟨RingEquiv.symm, RingEquiv.symm, symm_symm, symm_symm⟩\n#align symm_bijective symm_bijective\n\n",
 "symm_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem symm_apply_apply (e : «expr ≃+* » R S) : ∀ x, e.symm (e x) = x :=\n  e.to_equiv.symm_apply_apply\n#align symm_apply_apply symm_apply_apply\n\n",
 "surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\nprotected theorem surjective (e : «expr ≃+* » R S) : function.surjective e :=\n  EquivLike.surjective e\n#align surjective surjective\n\n",
 "self_trans_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem self_trans_symm (e : «expr ≃+* » R S) : e.trans e.symm = RingEquiv.refl R :=\n  ext e.3\n#align self_trans_symm self_trans_symm\n\n",
 "refl_apply":
 "@[simp]\ntheorem refl_apply (x : R) : RingEquiv.refl R x = x :=\n  rfl\n#align refl_apply refl_apply\n\n",
 "of_bijective_apply":
 "theorem of_bijective_apply [NonUnitalRingHomClass F R S] (f : F) (hf : function.bijective f) (x : R) :\n    ofBijective f hf x = f x :=\n  rfl\n#align of_bijective_apply of_bijective_apply\n\n",
 "mk_coe'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem mk_coe' (e : «expr ≃+* » R S) (f h₁ h₂ h₃ h₄) :\n    (ring_equiv.mk f («expr⇑ » e) h₁ h₂ h₃ h₄ : «expr ≃+* » S R) = e.symm :=\n  symm_bijective.injective <| ext fun x => rfl\n#align mk_coe' mk_coe'\n\n",
 "mk_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem mk_coe (e : «expr ≃+* » R S) (e' h₁ h₂ h₃ h₄) : (⟨e, e', h₁, h₂, h₃, h₄⟩ : «expr ≃+* » R S) = e :=\n  ext fun _ => rfl\n#align mk_coe mk_coe\n\n",
 "map_zero":
 "#print map_zero /-\n/-- A ring isomorphism sends zero to zero. -/\nprotected theorem map_zero : f 0 = 0 :=\n  map_zero f\n#align map_zero map_zero\n-/\n\n",
 "map_sub":
 "#print map_sub /-\nprotected theorem map_sub : f (x - y) = f x - f y :=\n  map_sub f x y\n#align map_sub map_sub\n-/\n\n",
 "map_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print map_pow /-\nprotected theorem map_pow (f : «expr ≃+* » R S) (a) : ∀ n : ℕ, f (a ^ n) = f a ^ n :=\n  map_pow f a\n#align map_pow map_pow\n-/\n\n",
 "map_one":
 "#print map_one /-\n/-- A ring isomorphism sends one to one. -/\nprotected theorem map_one : f 1 = 1 :=\n  map_one f\n#align map_one map_one\n-/\n\n",
 "map_neg_one":
 "@[simp]\ntheorem map_neg_one : f (-1) = -1 :=\n  f.map_one ▸ f.map_neg 1\n#align map_neg_one map_neg_one\n\n",
 "map_neg":
 "#print map_neg /-\nprotected theorem map_neg : f (-x) = -f x :=\n  map_neg f x\n#align map_neg map_neg\n-/\n\n",
 "map_ne_zero_iff":
 "#print map_ne_zero_iff /-\ntheorem map_ne_zero_iff : f x ≠ 0 ↔ x ≠ 0 :=\n  AddEquivClass.map_ne_zero_iff f\n#align map_ne_zero_iff map_ne_zero_iff\n-/\n\n",
 "map_ne_one_iff":
 "#print map_ne_one_iff /-\ntheorem map_ne_one_iff : f x ≠ 1 ↔ x ≠ 1 :=\n  MulEquivClass.map_ne_one_iff f\n#align map_ne_one_iff map_ne_one_iff\n-/\n\n",
 "map_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print map_mul /-\n/-- A ring isomorphism preserves multiplication. -/\nprotected theorem map_mul (e : «expr ≃+* » R S) (x y : R) : e (x * y) = e x * e y :=\n  map_mul e x y\n#align map_mul map_mul\n-/\n\n",
 "map_eq_zero_iff":
 "#print map_eq_zero_iff /-\nprotected theorem map_eq_zero_iff : f x = 0 ↔ x = 0 :=\n  AddEquivClass.map_eq_zero_iff f\n#align map_eq_zero_iff map_eq_zero_iff\n-/\n\n",
 "map_eq_one_iff":
 "#print map_eq_one_iff /-\nprotected theorem map_eq_one_iff : f x = 1 ↔ x = 1 :=\n  MulEquivClass.map_eq_one_iff f\n#align map_eq_one_iff map_eq_one_iff\n-/\n\n",
 "map_eq_neg_one_iff":
 "theorem map_eq_neg_one_iff {x : R} : f x = -1 ↔ x = -1 := by\n  rw [← neg_eq_iff_eq_neg, ← neg_eq_iff_eq_neg, ← map_neg, RingEquiv.map_eq_one_iff]\n#align map_eq_neg_one_iff map_eq_neg_one_iff\n\n",
 "map_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print map_add /-\n/-- A ring isomorphism preserves addition. -/\nprotected theorem map_add (e : «expr ≃+* » R S) (x y : R) : e (x + y) = e x + e y :=\n  map_add e x y\n#align map_add map_add\n-/\n\n",
 "inv_fun_eq_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem inv_fun_eq_symm (f : «expr ≃+* » R S) : f.inv_fun = f.symm :=\n  rfl\n#align inv_fun_eq_symm inv_fun_eq_symm\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\nprotected theorem injective (e : «expr ≃+* » R S) : function.injective e :=\n  EquivLike.injective e\n#align injective injective\n\n",
 "image_eq_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem image_eq_preimage (e : «expr ≃+* » R S) (s : Set R) : «expr '' » e s = «expr ⁻¹' » e.symm s :=\n  e.to_equiv.image_eq_preimage s\n#align image_eq_preimage image_eq_preimage\n\n",
 "ext_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\nprotected theorem ext_iff {f g : «expr ≃+* » R S} : f = g ↔ ∀ x, f x = g x :=\n  FunLike.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/-- Two ring isomorphisms agree if they are defined by the\n    same underlying function. -/\n@[ext]\ntheorem ext {f g : «expr ≃+* » R S} (h : ∀ x, f x = g x) : f = g :=\n  FunLike.ext f g h\n#align ext ext\n\n",
 "congr_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print congr_fun /-\nprotected theorem congr_fun {f g : «expr ≃+* » R S} (h : f = g) (x : R) : f x = g x :=\n  FunLike.congr_fun h x\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print congr_arg /-\nprotected theorem congr_arg {f : «expr ≃+* » R S} {x x' : R} : x = x' → f x = f x' :=\n  FunLike.congr_arg f\n#align congr_arg congr_arg\n-/\n\n",
 "comp_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem comp_symm (e : «expr ≃+* » R S) : (e : «expr →+* » R S).comp (e.symm : «expr →+* » S R) = RingHom.id S :=\n  RingHom.ext e.apply_symm_apply\n#align comp_symm comp_symm\n\n",
 "coe_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem coe_trans (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') : (e₁.trans e₂ : R → S') = e₂ ∘ e₁ :=\n  rfl\n#align coe_trans coe_trans\n\n",
 "coe_to_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp, norm_cast]\ntheorem coe_to_ring_hom (f : «expr ≃+* » R S) : «expr⇑ » (f : «expr →+* » R S) = f :=\n  rfl\n#align coe_to_ring_hom coe_to_ring_hom\n\n",
 "coe_to_non_unital_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ+* » -/\n@[simp, norm_cast]\ntheorem coe_to_non_unital_ring_hom (f : «expr ≃+* » R S) : «expr⇑ » (f : «expr →ₙ+* » R S) = f :=\n  rfl\n#align coe_to_non_unital_ring_hom coe_to_non_unital_ring_hom\n\n",
 "coe_to_mul_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n@[simp, norm_cast]\ntheorem coe_to_mul_equiv (f : «expr ≃+* » R S) : «expr⇑ » (f : «expr ≃* » R S) = f :=\n  rfl\n#align coe_to_mul_equiv coe_to_mul_equiv\n\n",
 "coe_to_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem coe_to_equiv_symm (e : «expr ≃+* » R S) : (e.symm : «expr ≃ » S R) = (e : «expr ≃ » R S).symm :=\n  rfl\n#align coe_to_equiv_symm coe_to_equiv_symm\n\n",
 "coe_to_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n@[simp]\ntheorem coe_to_equiv (f : «expr ≃+* » R S) : «expr⇑ » (f : «expr ≃ » R S) = f :=\n  rfl\n#align coe_to_equiv coe_to_equiv\n\n",
 "coe_to_add_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n@[simp, norm_cast]\ntheorem coe_to_add_equiv (f : «expr ≃+* » R S) : «expr⇑ » (f : «expr ≃+ » R S) = f :=\n  rfl\n#align coe_to_add_equiv coe_to_add_equiv\n\n",
 "coe_ring_hom_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem coe_ring_hom_trans [NonAssocSemiring S'] (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂ : «expr →+* » R S') = (e₂ : «expr →+* » S S').comp ↑e₁ :=\n  rfl\n#align coe_ring_hom_trans coe_ring_hom_trans\n\n",
 "coe_ring_hom_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp]\ntheorem coe_ring_hom_refl : (RingEquiv.refl R : «expr →* » R R) = RingHom.id R :=\n  rfl\n#align coe_ring_hom_refl coe_ring_hom_refl\n\n",
 "coe_ring_hom_inj_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem coe_ring_hom_inj_iff {R S : Type _} [NonAssocSemiring R] [NonAssocSemiring S] (f g : «expr ≃+* » R S) :\n    f = g ↔ (f : «expr →+* » R S) = g :=\n  ⟨congr_arg _, fun h => ext <| RingHom.ext_iff.mp h⟩\n#align coe_ring_hom_inj_iff coe_ring_hom_inj_iff\n\n",
 "coe_of_bijective":
 "@[simp]\ntheorem coe_of_bijective [NonUnitalRingHomClass F R S] (f : F) (hf : function.bijective f) :\n    (ofBijective f hf : R → S) = f :=\n  rfl\n#align coe_of_bijective coe_of_bijective\n\n",
 "coe_non_unital_ring_hom_inj_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ+* » -/\ntheorem coe_non_unital_ring_hom_inj_iff {R S : Type _} [NonUnitalNonAssocSemiring R] [NonUnitalNonAssocSemiring S]\n    (f g : «expr ≃+* » R S) : f = g ↔ (f : «expr →ₙ+* » R S) = g :=\n  ⟨congr_arg _, fun h => ext <| NonUnitalRingHom.ext_iff.mp h⟩\n#align coe_non_unital_ring_hom_inj_iff coe_non_unital_ring_hom_inj_iff\n\n",
 "coe_mul_equiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n@[simp]\ntheorem coe_mul_equiv_trans (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂ : «expr ≃* » R S') = (e₁ : «expr ≃* » R S).trans ↑e₂ :=\n  rfl\n#align coe_mul_equiv_trans coe_mul_equiv_trans\n\n",
 "coe_mul_equiv_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃* » -/\n@[simp]\ntheorem coe_mul_equiv_refl : (RingEquiv.refl R : «expr ≃* » R R) = MulEquiv.refl R :=\n  rfl\n#align coe_mul_equiv_refl coe_mul_equiv_refl\n\n",
 "coe_monoid_hom_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n@[simp]\ntheorem coe_monoid_hom_trans [NonAssocSemiring S'] (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂ : «expr →* » R S') = (e₂ : «expr →* » S S').comp ↑e₁ :=\n  rfl\n#align coe_monoid_hom_trans coe_monoid_hom_trans\n\n",
 "coe_monoid_hom_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\ntheorem coe_monoid_hom_refl : (RingEquiv.refl R : «expr →* » R R) = MonoidHom.id R :=\n  rfl\n#align coe_monoid_hom_refl coe_monoid_hom_refl\n\n",
 "coe_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem coe_mk (e e' h₁ h₂ h₃ h₄) : «expr⇑ » (⟨e, e', h₁, h₂, h₃, h₄⟩ : «expr ≃+* » R S) = e :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_add_monoid_hom_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem coe_add_monoid_hom_trans [NonAssocSemiring S'] (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂ : «expr →+ » R S') = (e₂ : «expr →+ » S S').comp ↑e₁ :=\n  rfl\n#align coe_add_monoid_hom_trans coe_add_monoid_hom_trans\n\n",
 "coe_add_monoid_hom_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem coe_add_monoid_hom_refl : (RingEquiv.refl R : «expr →+ » R R) = AddMonoidHom.id R :=\n  rfl\n#align coe_add_monoid_hom_refl coe_add_monoid_hom_refl\n\n",
 "coe_add_equiv_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n@[simp]\ntheorem coe_add_equiv_trans (e₁ : «expr ≃+* » R S) (e₂ : «expr ≃+* » S S') :\n    (e₁.trans e₂ : «expr ≃+ » R S') = (e₁ : «expr ≃+ » R S).trans ↑e₂ :=\n  rfl\n#align coe_add_equiv_trans coe_add_equiv_trans\n\n",
 "coe_add_equiv_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n@[simp]\ntheorem coe_add_equiv_refl : (RingEquiv.refl R : «expr ≃+ » R R) = AddEquiv.refl R :=\n  rfl\n#align coe_add_equiv_refl coe_add_equiv_refl\n\n",
 "bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\nprotected theorem bijective (e : «expr ≃+* » R S) : function.bijective e :=\n  EquivLike.bijective e\n#align bijective bijective\n\n",
 "apply_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem apply_symm_apply (e : «expr ≃+* » R S) : ∀ x, e (e.symm x) = x :=\n  e.to_equiv.apply_symm_apply\n#align apply_symm_apply apply_symm_apply\n\n",
 "Pi_congr_right_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem Pi_congr_right_trans {ι : Type _} {R S T : ι → Type _} [∀ i, NonUnitalNonAssocSemiring (R i)]\n    [∀ i, NonUnitalNonAssocSemiring (S i)] [∀ i, NonUnitalNonAssocSemiring (T i)] (e : ∀ i, «expr ≃+* » (R i) (S i))\n    (f : ∀ i, «expr ≃+* » (S i) (T i)) :\n    (piCongrRight e).trans (piCongrRight f) = piCongrRight fun i => (e i).trans (f i) :=\n  rfl\n#align Pi_congr_right_trans Pi_congr_right_trans\n\n",
 "Pi_congr_right_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n@[simp]\ntheorem Pi_congr_right_symm {ι : Type _} {R S : ι → Type _} [∀ i, NonUnitalNonAssocSemiring (R i)]\n    [∀ i, NonUnitalNonAssocSemiring (S i)] (e : ∀ i, «expr ≃+* » (R i) (S i)) :\n    (piCongrRight e).symm = piCongrRight fun i => (e i).symm :=\n  rfl\n#align Pi_congr_right_symm Pi_congr_right_symm\n\n",
 "Pi_congr_right_refl":
 "@[simp]\ntheorem Pi_congr_right_refl {ι : Type _} {R : ι → Type _} [∀ i, NonUnitalNonAssocSemiring (R i)] :\n    (piCongrRight fun i => RingEquiv.refl (R i)) = RingEquiv.refl _ :=\n  rfl\n#align Pi_congr_right_refl Pi_congr_right_refl\n\n",
 "NoZeroDivisors":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print NoZeroDivisors /-\n/-- If two rings are isomorphic, and the second doesn't have zero divisors,\nthen so does the first. -/\nprotected theorem NoZeroDivisors {A : Type _} (B : Type _) [Ring A] [Ring B] [NoZeroDivisors B] (e : «expr ≃+* » A B) :\n    NoZeroDivisors A :=\n  {\n    eq_zero_or_eq_zero_of_mul_eq_zero := fun x y hxy =>\n      by\n      have : e x * e y = 0 := by rw [← e.map_mul, hxy, e.map_zero]\n      simpa using eq_zero_or_eq_zero_of_mul_eq_zero this }\n#align no_zero_divisors NoZeroDivisors\n-/\n\n",
 "IsDomain":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+* » -/\n#print IsDomain /-\n/-- If two rings are isomorphic, and the second is a domain, then so is the first. -/\nprotected theorem IsDomain {A : Type _} (B : Type _) [Ring A] [Ring B] [IsDomain B] (e : «expr ≃+* » A B) :\n    IsDomain A := by\n  haveI : Nontrivial A := ⟨⟨e.symm 0, e.symm 1, e.symm.injective.ne zero_ne_one⟩⟩\n  haveI := e.no_zero_divisors B\n  exact NoZeroDivisors.to_isDomain _\n#align is_domain IsDomain\n-/\n\n"}