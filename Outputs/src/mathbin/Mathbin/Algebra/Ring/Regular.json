{"isRightRegular_of_non_zero_divisor":
 "#print isRightRegular_of_non_zero_divisor /-\n/-- Right `mul` by a `k : α` over `[ring α]` is injective, if `k` is not a zero divisor.\nThe typeclass that restricts all terms of `α` to have this property is `no_zero_divisors`. -/\ntheorem isRightRegular_of_non_zero_divisor [NonUnitalNonAssocRing α] (k : α) (h : ∀ x : α, x * k = 0 → x = 0) :\n    IsRightRegular k := by\n  refine' fun x y (h' : x * k = y * k) => sub_eq_zero.mp (h _ _)\n  rw [sub_mul, sub_eq_zero, h']\n#align is_right_regular_of_non_zero_divisor isRightRegular_of_non_zero_divisor\n-/\n\n",
 "isRegular_of_ne_zero'":
 "#print isRegular_of_ne_zero' /-\ntheorem isRegular_of_ne_zero' [NonUnitalNonAssocRing α] [NoZeroDivisors α] {k : α} (hk : k ≠ 0) : IsRegular k :=\n  ⟨isLeftRegular_of_non_zero_divisor k fun x h =>\n      (no_zero_divisors.eq_zero_or_eq_zero_of_mul_eq_zero h).resolve_left hk,\n    isRightRegular_of_non_zero_divisor k fun x h =>\n      (no_zero_divisors.eq_zero_or_eq_zero_of_mul_eq_zero h).resolve_right hk⟩\n#align is_regular_of_ne_zero' isRegular_of_ne_zero'\n-/\n\n",
 "isRegular_iff_ne_zero'":
 "#print isRegular_iff_ne_zero' /-\ntheorem isRegular_iff_ne_zero' [Nontrivial α] [NonUnitalNonAssocRing α] [NoZeroDivisors α] {k : α} :\n    IsRegular k ↔ k ≠ 0 :=\n  ⟨fun h => by\n    rintro rfl\n    exact not_not.mpr h.left not_isLeftRegular_zero, isRegular_of_ne_zero'⟩\n#align is_regular_iff_ne_zero' isRegular_iff_ne_zero'\n-/\n\n",
 "isLeftRegular_of_non_zero_divisor":
 "#print isLeftRegular_of_non_zero_divisor /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Yury Kudryashov, Neil Strickland\n-/\n/-- Left `mul` by a `k : α` over `[ring α]` is injective, if `k` is not a zero divisor.\nThe typeclass that restricts all terms of `α` to have this property is `no_zero_divisors`. -/\ntheorem isLeftRegular_of_non_zero_divisor [NonUnitalNonAssocRing α] (k : α) (h : ∀ x : α, k * x = 0 → x = 0) :\n    IsLeftRegular k := by\n  refine' fun x y (h' : k * x = k * y) => sub_eq_zero.mp (h _ _)\n  rw [mul_sub, sub_eq_zero, h']\n#align is_left_regular_of_non_zero_divisor isLeftRegular_of_non_zero_divisor\n-/\n\n"}