{"sub_right":
 "@[simp]\ntheorem sub_right : Commute a b → Commute a c → Commute a (b - c) :=\n  SemiconjBy.sub_right\n#align sub_right sub_right\n\n",
 "sub_left":
 "@[simp]\ntheorem sub_left : Commute a c → Commute b c → Commute (a - b) c :=\n  SemiconjBy.sub_left\n#align sub_left sub_left\n\n",
 "neg_right_iff":
 "@[simp]\ntheorem neg_right_iff : Commute a (-b) ↔ Commute a b :=\n  SemiconjBy.neg_right_iff\n#align neg_right_iff neg_right_iff\n\n",
 "neg_right":
 "theorem neg_right : Commute a b → Commute a (-b) :=\n  SemiconjBy.neg_right\n#align neg_right neg_right\n\n",
 "neg_one_right":
 "@[simp]\ntheorem neg_one_right (a : R) : Commute a (-1) :=\n  SemiconjBy.neg_one_right a\n#align neg_one_right neg_one_right\n\n",
 "neg_one_left":
 "@[simp]\ntheorem neg_one_left (a : R) : Commute (-1) a :=\n  SemiconjBy.neg_one_left a\n#align neg_one_left neg_one_left\n\n",
 "neg_left_iff":
 "@[simp]\ntheorem neg_left_iff : Commute (-a) b ↔ Commute a b :=\n  SemiconjBy.neg_left_iff\n#align neg_left_iff neg_left_iff\n\n",
 "neg_left":
 "theorem neg_left : Commute a b → Commute (-a) b :=\n  SemiconjBy.neg_left\n#align neg_left neg_left\n\n",
 "mul_self_sub_one":
 "#print mul_self_sub_one /-\ntheorem mul_self_sub_one [NonAssocRing R] (a : R) : a * a - 1 = (a + 1) * (a - 1) := by\n  rw [← (Commute.one_right a).mul_self_sub_mul_self_eq, mul_one]\n#align mul_self_sub_one mul_self_sub_one\n-/\n\n",
 "mul_self_sub_mul_self_eq'":
 "theorem mul_self_sub_mul_self_eq' [NonUnitalNonAssocRing R] {a b : R} (h : Commute a b) :\n    a * a - b * b = (a - b) * (a + b) := by rw [mul_add, sub_mul, sub_mul, h.eq, sub_add_sub_cancel]\n#align mul_self_sub_mul_self_eq' mul_self_sub_mul_self_eq'\n\n",
 "mul_self_sub_mul_self_eq":
 "/-- Representation of a difference of two squares of commuting elements as a product. -/\ntheorem mul_self_sub_mul_self_eq [NonUnitalNonAssocRing R] {a b : R} (h : Commute a b) :\n    a * a - b * b = (a + b) * (a - b) := by rw [add_mul, mul_sub, mul_sub, h.eq, sub_add_sub_cancel]\n#align mul_self_sub_mul_self_eq mul_self_sub_mul_self_eq\n\n",
 "mul_self_sub_mul_self":
 "#print mul_self_sub_mul_self /-\n/-- Representation of a difference of two squares in a commutative ring as a product. -/\ntheorem mul_self_sub_mul_self [CommRing R] (a b : R) : a * a - b * b = (a + b) * (a - b) :=\n  (Commute.all a b).mul_self_sub_mul_self_eq\n#align mul_self_sub_mul_self mul_self_sub_mul_self\n-/\n\n",
 "mul_self_eq_one_iff":
 "#print mul_self_eq_one_iff /-\ntheorem mul_self_eq_one_iff [NonAssocRing R] [NoZeroDivisors R] {a : R} : a * a = 1 ↔ a = 1 ∨ a = -1 := by\n  rw [← (Commute.one_right a).mul_self_eq_mul_self_iff, mul_one]\n#align mul_self_eq_one_iff mul_self_eq_one_iff\n-/\n\n",
 "mul_self_eq_mul_self_iff":
 "#print mul_self_eq_mul_self_iff /-\ntheorem mul_self_eq_mul_self_iff [CommRing R] [NoZeroDivisors R] {a b : R} : a * a = b * b ↔ a = b ∨ a = -b :=\n  (Commute.all a b).mul_self_eq_mul_self_iff\n#align mul_self_eq_mul_self_iff mul_self_eq_mul_self_iff\n-/\n\n",
 "inv_eq_self_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/-- In the unit group of an integral domain, a unit is its own inverse iff the unit is one or\n  one's additive inverse. -/\ntheorem inv_eq_self_iff [Ring R] [NoZeroDivisors R] (u : «expr ˣ» R) : u⁻¹ = u ↔ u = 1 ∨ u = -1 :=\n  by\n  rw [inv_eq_iff_mul_eq_one]\n  simp only [ext_iff]\n  push_cast\n  exact mul_self_eq_one_iff\n#align inv_eq_self_iff inv_eq_self_iff\n\n",
 "bit1_right":
 "theorem bit1_right [NonAssocSemiring R] {x y : R} (h : Commute x y) : Commute x (bit1 y) :=\n  h.bit0_right.add_right (Commute.one_right x)\n#align bit1_right bit1_right\n\n",
 "bit1_left":
 "theorem bit1_left [NonAssocSemiring R] {x y : R} (h : Commute x y) : Commute (bit1 x) y :=\n  h.bit0_left.add_left (Commute.one_left y)\n#align bit1_left bit1_left\n\n",
 "bit0_right":
 "theorem bit0_right [Distrib R] {x y : R} (h : Commute x y) : Commute x (bit0 y) :=\n  h.add_right h\n#align bit0_right bit0_right\n\n",
 "bit0_left":
 "theorem bit0_left [Distrib R] {x y : R} (h : Commute x y) : Commute (bit0 x) y :=\n  h.add_left h\n#align bit0_left bit0_left\n\n",
 "add_right":
 "/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Yury Kudryashov, Neil Strickland\n-/\n@[simp]\ntheorem add_right [Distrib R] {a b c : R} : Commute a b → Commute a c → Commute a (b + c) :=\n  SemiconjBy.add_right\n#align add_right add_right\n\n",
 "add_left":
 "@[simp]\ntheorem add_left [Distrib R] {a b c : R} : Commute a c → Commute b c → Commute (a + b) c :=\n  SemiconjBy.add_left\n#align add_left add_left\n\n"}