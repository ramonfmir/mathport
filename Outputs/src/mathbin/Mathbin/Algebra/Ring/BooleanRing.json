{"toBoolRing_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print toBoolRing_top /-\n@[simp]\ntheorem toBoolRing_top : toBoolRing («expr⊤» : α) = 1 :=\n  rfl\n#align to_boolring_top toBoolRing_top\n-/\n\n",
 "toBoolRing_symm_eq":
 "#print toBoolRing_symm_eq /-\n@[simp]\ntheorem toBoolRing_symm_eq : (@toBoolRing α).symm = ofBoolRing :=\n  rfl\n#align to_boolring_symm_eq toBoolRing_symm_eq\n-/\n\n",
 "toBoolRing_symmDiff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n#print toBoolRing_symmDiff /-\n@[simp]\ntheorem toBoolRing_symmDiff (a b : α) : toBoolRing («expr ∆ » a b) = toBoolRing a + toBoolRing b :=\n  rfl\n#align to_boolring_symm_diff toBoolRing_symmDiff\n-/\n\n",
 "toBoolRing_ofBoolRing":
 "#print toBoolRing_ofBoolRing /-\n@[simp]\ntheorem toBoolRing_ofBoolRing (a : AsBoolRing α) : toBoolRing (ofBoolRing a) = a :=\n  rfl\n#align to_boolring_of_boolring toBoolRing_ofBoolRing\n-/\n\n",
 "toBoolRing_inj":
 "#print toBoolRing_inj /-\n@[simp]\ntheorem toBoolRing_inj {a b : α} : toBoolRing a = toBoolRing b ↔ a = b :=\n  iff.rfl\n#align to_boolring_inj toBoolRing_inj\n-/\n\n",
 "toBoolRing_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print toBoolRing_inf /-\n@[simp]\ntheorem toBoolRing_inf (a b : α) : toBoolRing («expr ⊓ » a b) = toBoolRing a * toBoolRing b :=\n  rfl\n#align to_boolring_inf toBoolRing_inf\n-/\n\n",
 "toBoolRing_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print toBoolRing_bot /-\n@[simp]\ntheorem toBoolRing_bot : toBoolRing («expr⊥» : α) = 0 :=\n  rfl\n#align to_boolring_bot toBoolRing_bot\n-/\n\n",
 "toBoolAlg_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print toBoolAlg_zero /-\n@[simp]\ntheorem toBoolAlg_zero : toBoolAlg (0 : α) = «expr⊥» :=\n  rfl\n#align to_boolalg_zero toBoolAlg_zero\n-/\n\n",
 "toBoolAlg_symm_eq":
 "#print toBoolAlg_symm_eq /-\n-- Note [lower instance priority]\n@[simp]\ntheorem toBoolAlg_symm_eq : (@toBoolAlg α).symm = ofBoolAlg :=\n  rfl\n#align to_boolalg_symm_eq toBoolAlg_symm_eq\n-/\n\n",
 "toBoolAlg_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print toBoolAlg_one /-\n@[simp]\ntheorem toBoolAlg_one : toBoolAlg (1 : α) = «expr⊤» :=\n  rfl\n#align to_boolalg_one toBoolAlg_one\n-/\n\n",
 "toBoolAlg_ofBoolAlg":
 "#print toBoolAlg_ofBoolAlg /-\n@[simp]\ntheorem toBoolAlg_ofBoolAlg (a : AsBoolAlg α) : toBoolAlg (ofBoolAlg a) = a :=\n  rfl\n#align to_boolalg_of_boolalg toBoolAlg_ofBoolAlg\n-/\n\n",
 "toBoolAlg_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print toBoolAlg_mul /-\n@[simp]\ntheorem toBoolAlg_mul (a b : α) : toBoolAlg (a * b) = «expr ⊓ » (toBoolAlg a) (toBoolAlg b) :=\n  rfl\n#align to_boolalg_mul toBoolAlg_mul\n-/\n\n",
 "toBoolAlg_inj":
 "#print toBoolAlg_inj /-\n@[simp]\ntheorem toBoolAlg_inj {a b : α} : toBoolAlg a = toBoolAlg b ↔ a = b :=\n  iff.rfl\n#align to_boolalg_inj toBoolAlg_inj\n-/\n\n",
 "toBoolAlg_add_add_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print toBoolAlg_add_add_mul /-\n-- `to_boolalg_add` simplifies the LHS but this lemma is eligible to `dsimp`\n@[simp, nolint simp_nf]\ntheorem toBoolAlg_add_add_mul (a b : α) : toBoolAlg (a + b + a * b) = «expr ⊔ » (toBoolAlg a) (toBoolAlg b) :=\n  rfl\n#align to_boolalg_add_add_mul toBoolAlg_add_add_mul\n-/\n\n",
 "toBoolAlg_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n#print toBoolAlg_add /-\n@[simp]\ntheorem toBoolAlg_add (a b : α) : toBoolAlg (a + b) = «expr ∆ » (toBoolAlg a) (toBoolAlg b) :=\n  (ofBoolAlg_symmDiff _ _).symm\n#align to_boolalg_add toBoolAlg_add\n-/\n\n",
 "sup_inf_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print sup_inf_self /-\ntheorem sup_inf_self (a b : α) : «expr ⊔ » a («expr ⊓ » a b) = a :=\n  by\n  dsimp only [(«expr ⊔ » · ·), («expr ⊓ » · ·)]\n  assoc_rw [mul_self, add_self, add_zero]\n#align sup_inf_self sup_inf_self\n-/\n\n",
 "sup_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print sup_comm /-\n-- Note [lower instance priority]\ntheorem sup_comm (a b : α) : «expr ⊔ » a b = «expr ⊔ » b a :=\n  by\n  dsimp only [(«expr ⊔ » · ·)]\n  ring\n#align sup_comm sup_comm\n-/\n\n",
 "sup_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print sup_assoc /-\ntheorem sup_assoc (a b c : α) : «expr ⊔ » («expr ⊔ » a b) c = «expr ⊔ » a («expr ⊔ » b c) :=\n  by\n  dsimp only [(«expr ⊔ » · ·)]\n  ring\n#align sup_assoc sup_assoc\n-/\n\n",
 "sub_eq_add":
 "#print sub_eq_add /-\n@[simp]\ntheorem sub_eq_add : a - b = a + b := by rw [sub_eq_add_neg, add_right_inj, neg_eq]\n#align sub_eq_add sub_eq_add\n-/\n\n",
 "of_boolalg_symm_diff_aux":
 "private theorem of_boolalg_symm_diff_aux (a b : α) : (a + b + a * b) * (1 + a * b) = a + b :=\n  calc\n    (a + b + a * b) * (1 + a * b) = a + b + (a * b + a * b * (a * b)) + (a * (b * b) + a * a * b) := by ring\n    _ = a + b := by simp only [mul_self, add_self, add_zero]\n    \n#align of_boolalg_symm_diff_aux of_boolalg_symm_diff_aux\n\n",
 "ofBoolRing_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print ofBoolRing_zero /-\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n@[simp]\ntheorem ofBoolRing_zero : ofBoolRing (0 : AsBoolRing α) = «expr⊥» :=\n  rfl\n#align of_boolring_zero ofBoolRing_zero\n-/\n\n",
 "ofBoolRing_toBoolRing":
 "#print ofBoolRing_toBoolRing /-\n@[simp]\ntheorem ofBoolRing_toBoolRing (a : α) : ofBoolRing (toBoolRing a) = a :=\n  rfl\n#align of_boolring_to_boolring ofBoolRing_toBoolRing\n-/\n\n",
 "ofBoolRing_symm_eq":
 "#print ofBoolRing_symm_eq /-\n@[simp]\ntheorem ofBoolRing_symm_eq : (@ofBoolRing α).symm = toBoolRing :=\n  rfl\n#align of_boolring_symm_eq ofBoolRing_symm_eq\n-/\n\n",
 "ofBoolRing_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n#print ofBoolRing_sub /-\n-- `sub_eq_add` simplifies the LHS but this lemma is eligible for `dsimp`\n@[simp, nolint simp_nf]\ntheorem ofBoolRing_sub (a b : AsBoolRing α) : ofBoolRing (a - b) = «expr ∆ » (ofBoolRing a) (ofBoolRing b) :=\n  rfl\n#align of_boolring_sub ofBoolRing_sub\n-/\n\n",
 "ofBoolRing_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print ofBoolRing_one /-\n@[simp]\ntheorem ofBoolRing_one : ofBoolRing (1 : AsBoolRing α) = «expr⊤» :=\n  rfl\n#align of_boolring_one ofBoolRing_one\n-/\n\n",
 "ofBoolRing_neg":
 "#print ofBoolRing_neg /-\n-- `sub_eq_add` proves this lemma but it is eligible for `dsimp`\n@[simp, nolint simp_nf]\ntheorem ofBoolRing_neg (a : AsBoolRing α) : ofBoolRing (-a) = ofBoolRing a :=\n  rfl\n#align of_boolring_neg ofBoolRing_neg\n-/\n\n",
 "ofBoolRing_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print ofBoolRing_mul /-\n@[simp]\ntheorem ofBoolRing_mul (a b : AsBoolRing α) : ofBoolRing (a * b) = «expr ⊓ » (ofBoolRing a) (ofBoolRing b) :=\n  rfl\n#align of_boolring_mul ofBoolRing_mul\n-/\n\n",
 "ofBoolRing_le_ofBoolRing_iff":
 "#print ofBoolRing_le_ofBoolRing_iff /-\n@[simp]\ntheorem ofBoolRing_le_ofBoolRing_iff {a b : AsBoolRing α} : ofBoolRing a ≤ ofBoolRing b ↔ a * b = a :=\n  inf_eq_left.symm\n#align of_boolring_le_of_boolring_iff ofBoolRing_le_ofBoolRing_iff\n-/\n\n",
 "ofBoolRing_inj":
 "#print ofBoolRing_inj /-\n@[simp]\ntheorem ofBoolRing_inj {a b : AsBoolRing α} : ofBoolRing a = ofBoolRing b ↔ a = b :=\n  iff.rfl\n#align of_boolring_inj ofBoolRing_inj\n-/\n\n",
 "ofBoolRing_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n#print ofBoolRing_add /-\n@[simp]\ntheorem ofBoolRing_add (a b : AsBoolRing α) : ofBoolRing (a + b) = «expr ∆ » (ofBoolRing a) (ofBoolRing b) :=\n  rfl\n#align of_boolring_add ofBoolRing_add\n-/\n\n",
 "ofBoolAlg_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print ofBoolAlg_top /-\n@[simp]\ntheorem ofBoolAlg_top : ofBoolAlg («expr⊤» : AsBoolAlg α) = 1 :=\n  rfl\n#align of_boolalg_top ofBoolAlg_top\n-/\n\n",
 "ofBoolAlg_toBoolAlg":
 "#print ofBoolAlg_toBoolAlg /-\n@[simp]\ntheorem ofBoolAlg_toBoolAlg (a : α) : ofBoolAlg (toBoolAlg a) = a :=\n  rfl\n#align of_boolalg_to_boolalg ofBoolAlg_toBoolAlg\n-/\n\n",
 "ofBoolAlg_symm_eq":
 "#print ofBoolAlg_symm_eq /-\n@[simp]\ntheorem ofBoolAlg_symm_eq : (@ofBoolAlg α).symm = toBoolAlg :=\n  rfl\n#align of_boolalg_symm_eq ofBoolAlg_symm_eq\n-/\n\n",
 "ofBoolAlg_symmDiff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ∆ » -/\n#print ofBoolAlg_symmDiff /-\n@[simp]\ntheorem ofBoolAlg_symmDiff (a b : AsBoolAlg α) : ofBoolAlg («expr ∆ » a b) = ofBoolAlg a + ofBoolAlg b :=\n  by\n  rw [symmDiff_eq_sup_sdiff_inf]\n  exact of_boolalg_symm_diff_aux _ _\n#align of_boolalg_symm_diff ofBoolAlg_symmDiff\n-/\n\n",
 "ofBoolAlg_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print ofBoolAlg_sup /-\n@[simp]\ntheorem ofBoolAlg_sup (a b : AsBoolAlg α) :\n    ofBoolAlg («expr ⊔ » a b) = ofBoolAlg a + ofBoolAlg b + ofBoolAlg a * ofBoolAlg b :=\n  rfl\n#align of_boolalg_sup ofBoolAlg_sup\n-/\n\n",
 "ofBoolAlg_sdiff":
 "#print ofBoolAlg_sdiff /-\n@[simp]\ntheorem ofBoolAlg_sdiff (a b : AsBoolAlg α) : ofBoolAlg (a \\ b) = ofBoolAlg a * (1 + ofBoolAlg b) :=\n  rfl\n#align of_boolalg_sdiff ofBoolAlg_sdiff\n-/\n\n",
 "ofBoolAlg_mul_ofBoolAlg_eq_left_iff":
 "#print ofBoolAlg_mul_ofBoolAlg_eq_left_iff /-\n@[simp]\ntheorem ofBoolAlg_mul_ofBoolAlg_eq_left_iff {a b : AsBoolAlg α} : ofBoolAlg a * ofBoolAlg b = ofBoolAlg a ↔ a ≤ b :=\n  @inf_eq_left (AsBoolAlg α) _ _ _\n#align of_boolalg_mul_of_boolalg_eq_left_iff ofBoolAlg_mul_ofBoolAlg_eq_left_iff\n-/\n\n",
 "ofBoolAlg_inj":
 "#print ofBoolAlg_inj /-\n@[simp]\ntheorem ofBoolAlg_inj {a b : AsBoolAlg α} : ofBoolAlg a = ofBoolAlg b ↔ a = b :=\n  iff.rfl\n#align of_boolalg_inj ofBoolAlg_inj\n-/\n\n",
 "ofBoolAlg_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print ofBoolAlg_inf /-\n@[simp]\ntheorem ofBoolAlg_inf (a b : AsBoolAlg α) : ofBoolAlg («expr ⊓ » a b) = ofBoolAlg a * ofBoolAlg b :=\n  rfl\n#align of_boolalg_inf ofBoolAlg_inf\n-/\n\n",
 "ofBoolAlg_compl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n#print ofBoolAlg_compl /-\n@[simp]\ntheorem ofBoolAlg_compl (a : AsBoolAlg α) : ofBoolAlg («expr ᶜ» a) = 1 + ofBoolAlg a :=\n  rfl\n#align of_boolalg_compl ofBoolAlg_compl\n-/\n\n",
 "ofBoolAlg_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print ofBoolAlg_bot /-\n@[simp]\ntheorem ofBoolAlg_bot : ofBoolAlg («expr⊥» : AsBoolAlg α) = 0 :=\n  rfl\n#align of_boolalg_bot ofBoolAlg_bot\n-/\n\n",
 "neg_eq":
 "#print neg_eq /-\n@[simp]\ntheorem neg_eq : -a = a :=\n  calc\n    -a = -a + 0 := by rw [add_zero]\n    _ = -a + -a + a := by rw [← neg_add_self, add_assoc]\n    _ = a := by rw [add_self, zero_add]\n    \n#align neg_eq neg_eq\n-/\n\n",
 "mul_self":
 "#print mul_self /-\n/-\nCopyright (c) 2021 Bryan Gin-ge Chen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Bryan Gin-ge Chen, Yaël Dillies\n-/\n@[simp]\ntheorem mul_self : a * a = a :=\n  boolean_ring.mul_self _\n#align mul_self mul_self\n-/\n\n",
 "mul_one_add_self":
 "#print mul_one_add_self /-\n@[simp]\ntheorem mul_one_add_self : a * (1 + a) = 0 := by rw [mul_add, mul_one, mul_self, add_self]\n#align mul_one_add_self mul_one_add_self\n-/\n\n",
 "mul_add_mul":
 "#print mul_add_mul /-\n@[simp]\ntheorem mul_add_mul : a * b + b * a = 0 :=\n  by\n  have : a + b = a + b + (a * b + b * a) :=\n    calc\n      a + b = (a + b) * (a + b) := by rw [mul_self]\n      _ = a * a + a * b + (b * a + b * b) := by rw [add_mul, mul_add, mul_add]\n      _ = a + a * b + (b * a + b) := by simp only [mul_self]\n      _ = a + b + (a * b + b * a) := by abel\n      \n  rwa [self_eq_add_right] at this\n#align mul_add_mul mul_add_mul\n-/\n\n",
 "le_sup_inf_aux":
 "theorem le_sup_inf_aux (a b c : α) : (a + b + a * b) * (a + c + a * c) = a + b * c + a * (b * c) :=\n  calc\n    (a + b + a * b) * (a + c + a * c) =\n        a * a + b * c + a * (b * c) + (a * b + a * a * b) + (a * c + a * a * c) + (a * b * c + a * a * b * c) :=\n      by ring\n    _ = a + b * c + a * (b * c) := by simp only [mul_self, add_self, add_zero]\n    \n#align le_sup_inf_aux le_sup_inf_aux\n\n",
 "le_sup_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print le_sup_inf /-\ntheorem le_sup_inf (a b c : α) :\n    «expr ⊔ » («expr ⊓ » («expr ⊔ » a b) («expr ⊔ » a c)) («expr ⊔ » a («expr ⊓ » b c)) = «expr ⊔ » a («expr ⊓ » b c) :=\n  by\n  dsimp only [(«expr ⊔ » · ·), («expr ⊓ » · ·)]\n  rw [le_sup_inf_aux, add_self, mul_self, zero_add]\n#align le_sup_inf le_sup_inf\n-/\n\n",
 "inf_sup_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n#print inf_sup_self /-\ntheorem inf_sup_self (a b : α) : «expr ⊓ » a («expr ⊔ » a b) = a :=\n  by\n  dsimp only [(«expr ⊔ » · ·), («expr ⊓ » · ·)]\n  rw [mul_add, mul_add, mul_self, ← mul_assoc, mul_self, add_assoc, add_self, add_zero]\n#align inf_sup_self inf_sup_self\n-/\n\n",
 "inf_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print inf_comm /-\ntheorem inf_comm (a b : α) : «expr ⊓ » a b = «expr ⊓ » b a :=\n  by\n  dsimp only [(«expr ⊓ » · ·)]\n  ring\n#align inf_comm inf_comm\n-/\n\n",
 "inf_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n#print inf_assoc /-\ntheorem inf_assoc (a b c : α) : «expr ⊓ » («expr ⊓ » a b) c = «expr ⊓ » a («expr ⊓ » b c) :=\n  by\n  dsimp only [(«expr ⊓ » · ·)]\n  ring\n#align inf_assoc inf_assoc\n-/\n\n",
 "asBoolRing_id":
 "#print BoundedLatticeHom.asBoolRing_id /-\n@[simp]\ntheorem BoundedLatticeHom.asBoolRing_id : (BoundedLatticeHom.id α).as_boolring = RingHom.id _ :=\n  rfl\n#align bounded_lattice_hom.as_boolring_id BoundedLatticeHom.asBoolRing_id\n-/\n\n",
 "asBoolRing_comp":
 "#print BoundedLatticeHom.asBoolRing_comp /-\n@[simp]\ntheorem BoundedLatticeHom.asBoolRing_comp (g : BoundedLatticeHom β γ) (f : BoundedLatticeHom α β) :\n    (g.comp f).as_boolring = g.as_boolring.comp f.as_boolring :=\n  rfl\n#align bounded_lattice_hom.as_boolring_comp BoundedLatticeHom.asBoolRing_comp\n-/\n\n",
 "asBoolAlg_id":
 "#print RingHom.asBoolAlg_id /-\n@[simp]\ntheorem RingHom.asBoolAlg_id : (RingHom.id α).as_boolalg = BoundedLatticeHom.id _ :=\n  rfl\n#align ring_hom.as_boolalg_id RingHom.asBoolAlg_id\n-/\n\n",
 "asBoolAlg_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.asBoolAlg_comp /-\n@[simp]\ntheorem RingHom.asBoolAlg_comp (g : «expr →+* » β γ) (f : «expr →+* » α β) :\n    (g.comp f).as_boolalg = g.as_boolalg.comp f.as_boolalg :=\n  rfl\n#align ring_hom.as_boolalg_comp RingHom.asBoolAlg_comp\n-/\n\n",
 "add_self":
 "#print add_self /-\n@[simp]\ntheorem add_self : a + a = 0 :=\n  by\n  have : a + a = a + a + (a + a) :=\n    calc\n      a + a = (a + a) * (a + a) := by rw [mul_self]\n      _ = a * a + a * a + (a * a + a * a) := by rw [add_mul, mul_add]\n      _ = a + a + (a + a) := by rw [mul_self]\n      \n  rwa [self_eq_add_left] at this\n#align add_self add_self\n-/\n\n",
 "add_eq_zero'":
 "#print add_eq_zero' /-\ntheorem add_eq_zero' : a + b = 0 ↔ a = b :=\n  calc\n    a + b = 0 ↔ a = -b := add_eq_zero_iff_eq_neg\n    _ ↔ a = b := by rw [neg_eq]\n    \n#align add_eq_zero' add_eq_zero'\n-/\n\n"}