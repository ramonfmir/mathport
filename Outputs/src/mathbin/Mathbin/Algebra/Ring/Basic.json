{"vieta_formula_quadratic":
 "#print vieta_formula_quadratic /-\n/-- Vieta's formula for a quadratic equation, relating the coefficients of the polynomial with\n  its roots. This particular version states that if we have a root `x` of a monic quadratic\n  polynomial, then there is another root `y` such that `x + y` is negative the `a_1` coefficient\n  and `x * y` is the `a_0` coefficient. -/\ntheorem vieta_formula_quadratic {b c x : α} (h : x * x - b * x + c = 0) :\n    ∃ y : α, y * y - b * y + c = 0 ∧ x + y = b ∧ x * y = c :=\n  by\n  have : c = x * (b - x) := (eq_neg_of_add_eq_zero_right h).trans (by simp [mul_sub, mul_comm])\n  refine' ⟨b - x, _, by simp, by rw [this]⟩\n  rw [this, sub_add, ← sub_mul, sub_self]\n#align Vieta_formula_quadratic vieta_formula_quadratic\n-/\n\n",
 "to_noZeroDivisors":
 "#print IsRightCancelMulZero.to_noZeroDivisors /-\ntheorem IsRightCancelMulZero.to_noZeroDivisors [Ring α] [is_right_cancel_mul_zero α] : no_zero_divisors α :=\n  by\n  refine' ⟨fun x y h => _⟩\n  by_cases hy : y = 0\n  · right\n    exact hy\n  · left\n    rw [← sub_zero (x * y), ← zero_mul y, ← sub_mul] at h\n    convert is_right_cancel_mul_zero.mul_right_cancel_of_ne_zero hy h\n    rw [sub_zero]\n#align is_right_cancel_mul_zero.to_no_zero_divisors IsRightCancelMulZero.to_noZeroDivisors\n-/\n\n",
 "to_isDomain":
 "#print NoZeroDivisors.to_isDomain /-\ntheorem NoZeroDivisors.to_isDomain [Ring α] [h : nontrivial α] [no_zero_divisors α] : IsDomain α :=\n  { NoZeroDivisors.to_isCancelMulZero α, h with }\n#align no_zero_divisors.to_is_domain NoZeroDivisors.to_isDomain\n-/\n\n",
 "succ_ne_self":
 "#print succ_ne_self /-\ntheorem succ_ne_self [NonAssocRing α] [nontrivial α] (a : α) : a + 1 ≠ a := fun h =>\n  one_ne_zero ((add_right_inj a).mp (by simp [h]))\n#align succ_ne_self succ_ne_self\n-/\n\n",
 "pred_ne_self":
 "#print pred_ne_self /-\ntheorem pred_ne_self [NonAssocRing α] [nontrivial α] (a : α) : a - 1 ≠ a := fun h =>\n  one_ne_zero (neg_injective ((add_right_inj a).mp (by simpa [sub_eq_add_neg] using h)))\n#align pred_ne_self pred_ne_self\n-/\n\n",
 "mul_right_apply":
 "theorem mul_right_apply {R : Type _} [NonUnitalNonAssocSemiring R] (a r : R) : mulRight r a = a * r :=\n  rfl\n#align mul_right_apply mul_right_apply\n\n",
 "map_bit0":
 "#print map_bit0 /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Yury Kudryashov, Neil Strickland\n-/\n/-- Additive homomorphisms preserve `bit0`. -/\n@[simp]\ntheorem map_bit0 (f : F) (a : α) : (f (bit0 a) : β) = bit0 (f a) :=\n  map_add _ _ _\n#align map_bit0 map_bit0\n-/\n\n",
 "inv_neg'":
 "#print inv_neg' /-\n@[simp]\ntheorem inv_neg' (a : α) : (-a)⁻¹ = -a⁻¹ := by\n  rw [eq_comm, eq_inv_iff_mul_eq_one, neg_mul, mul_neg, neg_neg, mul_left_inv]\n#align inv_neg' inv_neg'\n-/\n\n",
 "coe_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul_right {R : Type _} [NonUnitalNonAssocSemiring R] (r : R) : «expr⇑ » (mulRight r) = (· * r) :=\n  rfl\n#align coe_mul_right coe_mul_right\n\n",
 "coe_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_mul_left {R : Type _} [NonUnitalNonAssocSemiring R] (r : R) : «expr⇑ » (mulLeft r) = (· * ·) r :=\n  rfl\n#align coe_mul_left coe_mul_left\n\n"}