{"smul_mem_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_mem_pointwise_smul (m : R') (r : A) (S : subalgebra R A) : r ∈ S → «expr • » m r ∈ «expr • » m S :=\n  (Set.smul_mem_smul_set : _ → _ ∈ «expr • » m (S : set A))\n#align smul_mem_pointwise_smul smul_mem_pointwise_smul\n\n",
 "pointwise_smul_to_subsemiring":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_to_subsemiring (m : R') (S : subalgebra R A) :\n    («expr • » m S).to_subsemiring = «expr • » m S.to_subsemiring :=\n  rfl\n#align pointwise_smul_to_subsemiring pointwise_smul_to_subsemiring\n\n",
 "pointwise_smul_to_subring":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_to_subring {R' R A : Type _} [Semiring R'] [CommRing R] [Ring A] [MulSemiringAction R' A]\n    [algebra R A] [SMulCommClass R' R A] (m : R') (S : subalgebra R A) :\n    («expr • » m S).to_subring = «expr • » m S.to_subring :=\n  rfl\n#align pointwise_smul_to_subring pointwise_smul_to_subring\n\n",
 "pointwise_smul_to_submodule":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_to_submodule (m : R') (S : subalgebra R A) :\n    («expr • » m S).to_submodule = «expr • » m S.to_submodule :=\n  rfl\n#align pointwise_smul_to_submodule pointwise_smul_to_submodule\n\n",
 "mul_to_submodule_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-\nCopyright (c) 2021 Eric Weiser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\ntheorem mul_to_submodule_le (S T : subalgebra R A) : S.to_submodule * T.to_submodule ≤ («expr ⊔ » S T).to_submodule :=\n  by\n  rw [submodule.mul_le]\n  intro y hy z hz\n  show y * z ∈ «expr ⊔ » S T\n  exact mul_mem (algebra.mem_sup_left hy) (algebra.mem_sup_right hz)\n#align mul_to_submodule_le mul_to_submodule_le\n\n",
 "mul_to_submodule":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/-- When `A` is commutative, `subalgebra.mul_to_submodule_le` is strict. -/\ntheorem mul_to_submodule {R : Type _} {A : Type _} [CommSemiring R] [CommSemiring A] [algebra R A]\n    (S T : subalgebra R A) : S.to_submodule * T.to_submodule = («expr ⊔ » S T).to_submodule :=\n  by\n  refine' le_antisymm (mul_to_submodule_le _ _) _\n  rintro x (hx : x ∈ algebra.adjoin R (S ∪ T : set A))\n  refine' algebra.adjoin_induction hx (fun x hx => _) (fun r => _) (fun _ _ => submodule.add_mem _) fun x y hx hy => _\n  · cases' hx with hxS hxT\n    · rw [← mul_one x]\n      exact submodule.mul_mem_mul hxS (show (1 : A) ∈ T from one_mem T)\n    · rw [← one_mul x]\n      exact submodule.mul_mem_mul (show (1 : A) ∈ S from one_mem S) hxT\n  · rw [← one_mul (algebra_map _ _ _)]\n    exact submodule.mul_mem_mul (show (1 : A) ∈ S from one_mem S) (algebra_map_mem _ _)\n  have := submodule.mul_mem_mul hx hy\n  rwa [mul_assoc, mul_comm _ T.to_submodule, ← mul_assoc _ _ S.to_submodule, mul_self, mul_comm T.to_submodule, ←\n    mul_assoc, mul_self] at this\n#align mul_to_submodule mul_to_submodule\n\n",
 "mul_self":
 "/-- As submodules, subalgebras are idempotent. -/\n@[simp]\ntheorem mul_self (S : subalgebra R A) : S.to_submodule * S.to_submodule = S.to_submodule :=\n  by\n  apply le_antisymm\n  · refine' (mul_to_submodule_le _ _).trans_eq _\n    rw [sup_idem]\n  · intro x hx1\n    rw [← mul_one x]\n    exact submodule.mul_mem_mul hx1 (show (1 : A) ∈ S from one_mem S)\n#align mul_self mul_self\n\n",
 "coe_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_pointwise_smul (m : R') (S : subalgebra R A) : ↑(«expr • » m S) = «expr • » m (S : set A) :=\n  rfl\n#align coe_pointwise_smul coe_pointwise_smul\n\n"}