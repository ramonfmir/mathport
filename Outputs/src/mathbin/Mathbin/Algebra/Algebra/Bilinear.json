{"pow_mul_right":
 "@[simp]\ntheorem pow_mul_right (a : A) (n : ℕ) : mulRight R a ^ n = mulRight R (a ^ n) :=\n  by\n  simp only [mul_right, ← Algebra.coe_lmul_eq_mul]\n  exact LinearMap.coe_injective (((mul_right R a).coe_pow n).symm ▸ mul_right_iterate a n)\n#align pow_mul_right pow_mul_right\n\n",
 "pow_mul_left":
 "@[simp]\ntheorem pow_mul_left (a : A) (n : ℕ) : mulLeft R a ^ n = mulLeft R (a ^ n) := by\n  simpa only [mul_left, ← Algebra.coe_lmul_eq_mul] using ((Algebra.lmul R A).map_pow a n).symm\n#align pow_mul_left pow_mul_left\n\n",
 "mul_right_zero_eq_zero":
 "@[simp]\ntheorem mul_right_zero_eq_zero : mulRight R (0 : A) = 0 :=\n  (mul R A).flip.map_zero\n#align mul_right_zero_eq_zero mul_right_zero_eq_zero\n\n",
 "mul_right_to_add_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem mul_right_to_add_monoid_hom (a : A) : (mulRight R a : «expr →+ » A A) = AddMonoidHom.mulRight a :=\n  rfl\n#align mul_right_to_add_monoid_hom mul_right_to_add_monoid_hom\n\n",
 "mul_right_one":
 "@[simp]\ntheorem mul_right_one : mulRight R (1 : A) = LinearMap.id :=\n  by\n  ext\n  simp only [LinearMap.id_coe, mul_one, id.def, mul_right_apply]\n#align mul_right_one mul_right_one\n\n",
 "mul_right_mul":
 "@[simp]\ntheorem mul_right_mul (a b : A) : mulRight R (a * b) = (mulRight R b).comp (mulRight R a) :=\n  by\n  ext\n  simp only [mul_right_apply, comp_apply, mul_assoc]\n#align mul_right_mul mul_right_mul\n\n",
 "mul_right_injective":
 "#print mul_right_injective /-\ntheorem mul_right_injective [NoZeroDivisors A] {x : A} (hx : x ≠ 0) : function.injective (mulRight R x) :=\n  by\n  letI : Nontrivial A := ⟨⟨x, 0, hx⟩⟩\n  letI := NoZeroDivisors.to_isDomain A\n  exact mul_left_injective₀ hx\n#align mul_right_injective mul_right_injective\n-/\n\n",
 "mul_right_eq_zero_iff":
 "@[simp]\ntheorem mul_right_eq_zero_iff (a : A) : mulRight R a = 0 ↔ a = 0 :=\n  by\n  constructor <;> intro h\n  · rw [← one_mul a, ← mul_right_apply a 1, h, LinearMap.zero_apply]\n  · rw [h]\n    exact mul_right_zero_eq_zero\n#align mul_right_eq_zero_iff mul_right_eq_zero_iff\n\n",
 "mul_right_apply":
 "@[simp]\ntheorem mul_right_apply (a b : A) : mulRight R a b = b * a :=\n  rfl\n#align mul_right_apply mul_right_apply\n\n",
 "mul_left_zero_eq_zero":
 "@[simp]\ntheorem mul_left_zero_eq_zero : mulLeft R (0 : A) = 0 :=\n  (mul R A).map_zero\n#align mul_left_zero_eq_zero mul_left_zero_eq_zero\n\n",
 "mul_left_to_add_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Yury Kudryashov\n-/\n@[simp]\ntheorem mul_left_to_add_monoid_hom (a : A) : (mulLeft R a : «expr →+ » A A) = AddMonoidHom.mulLeft a :=\n  rfl\n#align mul_left_to_add_monoid_hom mul_left_to_add_monoid_hom\n\n",
 "mul_left_right_apply":
 "@[simp]\ntheorem mul_left_right_apply (a b x : A) : mulLeftRight R (a, b) x = a * x * b :=\n  rfl\n#align mul_left_right_apply mul_left_right_apply\n\n",
 "mul_left_one":
 "@[simp]\ntheorem mul_left_one : mulLeft R (1 : A) = LinearMap.id :=\n  by\n  ext\n  simp only [LinearMap.id_coe, one_mul, id.def, mul_left_apply]\n#align mul_left_one mul_left_one\n\n",
 "mul_left_mul":
 "@[simp]\ntheorem mul_left_mul (a b : A) : mulLeft R (a * b) = (mulLeft R a).comp (mulLeft R b) :=\n  by\n  ext\n  simp only [mul_left_apply, comp_apply, mul_assoc]\n#align mul_left_mul mul_left_mul\n\n",
 "mul_left_injective":
 "#print mul_left_injective /-\ntheorem mul_left_injective [NoZeroDivisors A] {x : A} (hx : x ≠ 0) : function.injective (mulLeft R x) :=\n  by\n  letI : Nontrivial A := ⟨⟨x, 0, hx⟩⟩\n  letI := NoZeroDivisors.to_isDomain A\n  exact mul_right_injective₀ hx\n#align mul_left_injective mul_left_injective\n-/\n\n",
 "mul_left_eq_zero_iff":
 "@[simp]\ntheorem mul_left_eq_zero_iff (a : A) : mulLeft R a = 0 ↔ a = 0 :=\n  by\n  constructor <;> intro h\n  · rw [← mul_one a, ← mul_left_apply a 1, h, LinearMap.zero_apply]\n  · rw [h]\n    exact mul_left_zero_eq_zero\n#align mul_left_eq_zero_iff mul_left_eq_zero_iff\n\n",
 "mul_left_apply":
 "@[simp]\ntheorem mul_left_apply (a b : A) : mulLeft R a b = a * b :=\n  rfl\n#align mul_left_apply mul_left_apply\n\n",
 "mul_injective":
 "theorem mul_injective [NoZeroDivisors A] {x : A} (hx : x ≠ 0) : function.injective (mul R A x) :=\n  by\n  letI : Nontrivial A := ⟨⟨x, 0, hx⟩⟩\n  letI := NoZeroDivisors.to_isDomain A\n  exact mul_right_injective₀ hx\n#align mul_injective mul_injective\n\n",
 "mul_apply'":
 "@[simp]\ntheorem mul_apply' (a b : A) : mul R A a b = a * b :=\n  rfl\n#align mul_apply' mul_apply'\n\n",
 "mul'_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n@[simp]\ntheorem mul'_apply {a b : A} : mul' R A («expr ⊗ₜ » a b) = a * b :=\n  rfl\n#align mul'_apply mul'_apply\n\n",
 "commute_mul_left_right":
 "theorem commute_mul_left_right (a b : A) : Commute (mulLeft R a) (mulRight R b) :=\n  by\n  ext c\n  exact (mul_assoc a c b).symm\n#align commute_mul_left_right commute_mul_left_right\n\n",
 "coe_lmul_eq_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n#print Algebra.coe_lmul_eq_mul /-\n@[simp]\ntheorem Algebra.coe_lmul_eq_mul : «expr⇑ » (Algebra.lmul R A) = mul R A :=\n  rfl\n#align algebra.coe_lmul_eq_mul Algebra.coe_lmul_eq_mul\n-/\n\n"}