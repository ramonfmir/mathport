{"snd_zero":
 "@[simp]\ntheorem snd_zero [Zero R] [Zero A] : (0 : unitization R A).snd = 0 :=\n  rfl\n#align snd_zero snd_zero\n\n",
 "snd_star":
 "@[simp]\ntheorem snd_star [Star R] [Star A] (x : unitization R A) : (star x).snd = star x.snd :=\n  rfl\n#align snd_star snd_star\n\n",
 "snd_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem snd_smul [SMul S R] [SMul S A] (s : S) (x : unitization R A) : («expr • » s x).snd = «expr • » s x.snd :=\n  rfl\n#align snd_smul snd_smul\n\n",
 "snd_one":
 "@[simp]\ntheorem snd_one [One R] [Zero A] : (1 : unitization R A).snd = 0 :=\n  rfl\n#align snd_one snd_one\n\n",
 "snd_neg":
 "@[simp]\ntheorem snd_neg [Neg R] [Neg A] (x : unitization R A) : (-x).snd = -x.snd :=\n  rfl\n#align snd_neg snd_neg\n\n",
 "snd_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem snd_mul [Mul R] [Add A] [Mul A] [SMul R A] (x₁ x₂ : unitization R A) :\n    (x₁ * x₂).snd = «expr • » x₁.fst x₂.snd + «expr • » x₂.fst x₁.snd + x₁.snd * x₂.snd :=\n  rfl\n#align snd_mul snd_mul\n\n",
 "snd_inl":
 "@[simp]\ntheorem snd_inl [Zero A] (r : R) : (inl r : unitization R A).snd = 0 :=\n  rfl\n#align snd_inl snd_inl\n\n",
 "snd_coe":
 "@[simp]\ntheorem snd_coe [Zero R] (a : A) : (a : unitization R A).snd = a :=\n  rfl\n#align snd_coe snd_coe\n\n",
 "snd_add":
 "@[simp]\ntheorem snd_add [Add R] [Add A] (x₁ x₂ : unitization R A) : (x₁ + x₂).snd = x₁.snd + x₂.snd :=\n  rfl\n#align snd_add snd_add\n\n",
 "linear_map_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/-- This cannot be marked `@[ext]` as it ends up being used instead of `linear_map.prod_ext` when\nworking with `R × A`. -/\ntheorem linear_map_ext {N} [Semiring S] [add_comm_monoid R] [add_comm_monoid A] [add_comm_monoid N] [Module S R]\n    [Module S A] [Module S N] ⦃f g : «expr →ₗ[ ] » (unitization R A) S N⦄ (hl : ∀ r, f (inl r) = g (inl r))\n    (hr : ∀ a : A, f a = g a) : f = g :=\n  linear_map.prod_ext (linear_map.ext hl) (linear_map.ext hr)\n#align linear_map_ext linear_map_ext\n\n",
 "lift_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem lift_symm_apply (φ : «expr →ₐ[ ] » (unitization R A) R C) (a : A) : unitization.lift.symm φ a = φ a :=\n  rfl\n#align lift_symm_apply lift_symm_apply\n\n",
 "inl_zero":
 "@[simp]\ntheorem inl_zero [Zero R] [Zero A] : (inl 0 : unitization R A) = 0 :=\n  rfl\n#align inl_zero inl_zero\n\n",
 "inl_star":
 "@[simp]\ntheorem inl_star [Star R] [add_monoid A] [StarAddMonoid A] (r : R) : inl (star r) = star (inl r : unitization R A) :=\n  ext rfl (by simp only [snd_star, star_zero, snd_inl])\n#align inl_star inl_star\n\n",
 "inl_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem inl_smul [monoid S] [add_monoid A] [SMul S R] [DistribMulAction S A] (s : S) (r : R) :\n    (inl («expr • » s r) : unitization R A) = «expr • » s (inl r) :=\n  ext rfl (smul_zero s).symm\n#align inl_smul inl_smul\n\n",
 "inl_one":
 "@[simp]\ntheorem inl_one [One R] [Zero A] : (inl 1 : unitization R A) = 1 :=\n  rfl\n#align inl_one inl_one\n\n",
 "inl_neg":
 "@[simp]\ntheorem inl_neg [Neg R] [add_group A] (r : R) : (inl (-r) : unitization R A) = -inl r :=\n  ext rfl neg_zero.symm\n#align inl_neg inl_neg\n\n",
 "inl_mul_inl":
 "theorem inl_mul_inl [monoid R] [NonUnitalNonAssocSemiring A] [DistribMulAction R A] (r₁ r₂ : R) :\n    (inl r₁ * inl r₂ : unitization R A) = inl (r₁ * r₂) :=\n  (inl_mul A r₁ r₂).symm\n#align inl_mul_inl inl_mul_inl\n\n",
 "inl_mul_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem inl_mul_coe [Semiring R] [NonUnitalNonAssocSemiring A] [DistribMulAction R A] (r : R) (a : A) :\n    (inl r * a : unitization R A) = ↑(«expr • » r a) :=\n  ext (mul_zero r) <|\n    show «expr • » r a + «expr • » (0 : R) 0 + 0 * a = «expr • » r a by rw [smul_zero, add_zero, zero_mul, add_zero]\n#align inl_mul_coe inl_mul_coe\n\n",
 "inl_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem inl_mul [monoid R] [NonUnitalNonAssocSemiring A] [DistribMulAction R A] (r₁ r₂ : R) :\n    (inl (r₁ * r₂) : unitization R A) = inl r₁ * inl r₂ :=\n  ext rfl <| show (0 : A) = «expr • » r₁ (0 : A) + «expr • » r₂ 0 + 0 * 0 by simp only [smul_zero, add_zero, mul_zero]\n#align inl_mul inl_mul\n\n",
 "inl_injective":
 "theorem inl_injective [Zero A] : function.injective (inl : R → unitization R A) :=\n  function.left_inverse.injective <| fst_inl _\n#align inl_injective inl_injective\n\n",
 "inl_fst_add_coe_snd_eq":
 "theorem inl_fst_add_coe_snd_eq [add_zero_class R] [add_zero_class A] (x : unitization R A) : inl x.fst + ↑x.snd = x :=\n  ext (add_zero x.1) (zero_add x.2)\n#align inl_fst_add_coe_snd_eq inl_fst_add_coe_snd_eq\n\n",
 "inl_add":
 "@[simp]\ntheorem inl_add [Add R] [add_zero_class A] (r₁ r₂ : R) : (inl (r₁ + r₂) : unitization R A) = inl r₁ + inl r₂ :=\n  ext rfl (add_zero 0).symm\n#align inl_add inl_add\n\n",
 "ind":
 "/-- To show a property hold on all `unitization R A` it suffices to show it holds\non terms of the form `inl r + a`.\n\nThis can be used as `induction x using unitization.ind`. -/\ntheorem ind {R A} [add_zero_class R] [add_zero_class A] {P : unitization R A → Prop}\n    (h : ∀ (r : R) (a : A), P (inl r + a)) (x) : P x :=\n  inl_fst_add_coe_snd_eq x ▸ h x.1 x.2\n#align ind ind\n\n",
 "fst_zero":
 "@[simp]\ntheorem fst_zero [Zero R] [Zero A] : (0 : unitization R A).fst = 0 :=\n  rfl\n#align fst_zero fst_zero\n\n",
 "fst_star":
 "@[simp]\ntheorem fst_star [Star R] [Star A] (x : unitization R A) : (star x).fst = star x.fst :=\n  rfl\n#align fst_star fst_star\n\n",
 "fst_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem fst_smul [SMul S R] [SMul S A] (s : S) (x : unitization R A) : («expr • » s x).fst = «expr • » s x.fst :=\n  rfl\n#align fst_smul fst_smul\n\n",
 "fst_one":
 "@[simp]\ntheorem fst_one [One R] [Zero A] : (1 : unitization R A).fst = 1 :=\n  rfl\n#align fst_one fst_one\n\n",
 "fst_neg":
 "@[simp]\ntheorem fst_neg [Neg R] [Neg A] (x : unitization R A) : (-x).fst = -x.fst :=\n  rfl\n#align fst_neg fst_neg\n\n",
 "fst_mul":
 "@[simp]\ntheorem fst_mul [Mul R] [Add A] [Mul A] [SMul R A] (x₁ x₂ : unitization R A) : (x₁ * x₂).fst = x₁.fst * x₂.fst :=\n  rfl\n#align fst_mul fst_mul\n\n",
 "fst_inl":
 "@[simp]\ntheorem fst_inl [Zero A] (r : R) : (inl r : unitization R A).fst = r :=\n  rfl\n#align fst_inl fst_inl\n\n",
 "fst_coe":
 "@[simp]\ntheorem fst_coe [Zero R] (a : A) : (a : unitization R A).fst = 0 :=\n  rfl\n#align fst_coe fst_coe\n\n",
 "fst_add":
 "@[simp]\ntheorem fst_add [Add R] [Add A] (x₁ x₂ : unitization R A) : (x₁ + x₂).fst = x₁.fst + x₂.fst :=\n  rfl\n#align fst_add fst_add\n\n",
 "ext":
 "/-\nCopyright (c) 2022 Jireh Loreaux. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jireh Loreaux\n-/\n@[ext]\ntheorem ext {x y : unitization R A} (h1 : x.fst = y.fst) (h2 : x.snd = y.snd) : x = y :=\n  Prod.ext h1 h2\n#align ext ext\n\n",
 "coe_zero":
 "@[simp]\ntheorem coe_zero [Zero R] [Zero A] : ↑(0 : A) = (0 : unitization R A) :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_star":
 "@[simp]\ntheorem coe_star [add_monoid R] [StarAddMonoid R] [Star A] (a : A) : ↑(star a) = star (a : unitization R A) :=\n  ext (by simp only [fst_star, star_zero, fst_coe]) rfl\n#align coe_star coe_star\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_smul [Zero R] [Zero S] [SMulWithZero S R] [SMul S A] (r : S) (m : A) :\n    (↑(«expr • » r m) : unitization R A) = «expr • » r m :=\n  ext (smul_zero _).symm rfl\n#align coe_smul coe_smul\n\n",
 "coe_neg":
 "@[simp]\ntheorem coe_neg [add_group R] [Neg A] (m : A) : (↑(-m) : unitization R A) = -m :=\n  ext neg_zero.symm rfl\n#align coe_neg coe_neg\n\n",
 "coe_mul_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem coe_mul_inl [Semiring R] [NonUnitalNonAssocSemiring A] [DistribMulAction R A] (r : R) (a : A) :\n    (a * inl r : unitization R A) = ↑(«expr • » r a) :=\n  ext (zero_mul r) <|\n    show «expr • » (0 : R) 0 + «expr • » r a + a * 0 = «expr • » r a by rw [smul_zero, zero_add, mul_zero, add_zero]\n#align coe_mul_inl coe_mul_inl\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_mul [Semiring R] [add_comm_monoid A] [Mul A] [SMulWithZero R A] (a₁ a₂ : A) :\n    (↑(a₁ * a₂) : unitization R A) = a₁ * a₂ :=\n  ext (mul_zero _).symm <|\n    show a₁ * a₂ = «expr • » (0 : R) a₂ + «expr • » (0 : R) a₁ + a₁ * a₂ by simp only [zero_smul, zero_add]\n#align coe_mul coe_mul\n\n",
 "coe_injective":
 "theorem coe_injective [Zero R] : function.injective (coe : A → unitization R A) :=\n  function.left_inverse.injective <| snd_coe _\n#align coe_injective coe_injective\n\n",
 "coe_add":
 "@[simp]\ntheorem coe_add [add_zero_class R] [Add A] (m₁ m₂ : A) : (↑(m₁ + m₂) : unitization R A) = m₁ + m₂ :=\n  ext (add_zero 0).symm rfl\n#align coe_add coe_add\n\n",
 "algebra_map_eq_inl_ring_hom_comp":
 "theorem algebra_map_eq_inl_ring_hom_comp :\n    algebra_map S (unitization R A) = (inl_ring_hom R A).comp (algebra_map S R) :=\n  rfl\n#align algebra_map_eq_inl_ring_hom_comp algebra_map_eq_inl_ring_hom_comp\n\n",
 "algebra_map_eq_inl_hom":
 "theorem algebra_map_eq_inl_hom : algebra_map R (unitization R A) = inl_ring_hom R A :=\n  rfl\n#align algebra_map_eq_inl_hom algebra_map_eq_inl_hom\n\n",
 "algebra_map_eq_inl_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem algebra_map_eq_inl_comp : «expr⇑ » (algebra_map S (unitization R A)) = inl ∘ algebra_map S R :=\n  rfl\n#align algebra_map_eq_inl_comp algebra_map_eq_inl_comp\n\n",
 "algebra_map_eq_inl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem algebra_map_eq_inl : «expr⇑ » (algebra_map R (unitization R A)) = inl :=\n  rfl\n#align algebra_map_eq_inl algebra_map_eq_inl\n\n",
 "alg_hom_ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/-- See note [partially-applied ext lemmas] -/\n@[ext]\ntheorem alg_hom_ext' {φ ψ : «expr →ₐ[ ] » (unitization R A) R C}\n    (h :\n      φ.to_non_unital_alg_hom.comp (coe_non_unital_alg_hom R A) =\n        ψ.to_non_unital_alg_hom.comp (coe_non_unital_alg_hom R A)) :\n    φ = ψ :=\n  alg_hom_ext (non_unital_alg_hom.congr_fun h) (by simp [alg_hom.commutes])\n#align alg_hom_ext' alg_hom_ext'\n\n",
 "alg_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem alg_hom_ext {φ ψ : «expr →ₐ[ ] » (unitization R A) S B} (h : ∀ a : A, φ a = ψ a)\n    (h' : ∀ r, φ (algebra_map R (unitization R A) r) = ψ (algebra_map R (unitization R A) r)) : φ = ψ :=\n  by\n  ext\n  induction x using unitization.ind\n  simp only [map_add, ← algebra_map_eq_inl, h, h']\n#align alg_hom_ext alg_hom_ext\n\n"}