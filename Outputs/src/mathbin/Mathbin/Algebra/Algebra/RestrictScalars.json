{"smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.smul_def /-\ntheorem RestrictScalars.smul_def (c : R) (x : RestrictScalars R S M) :\n    «expr • » c x =\n      (RestrictScalars.addEquiv R S M).symm («expr • » (algebraMap R S c) (RestrictScalars.addEquiv R S M x)) :=\n  rfl\n#align restrict_scalars.smul_def RestrictScalars.smul_def\n-/\n\n",
 "ringEquiv_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.ringEquiv_map_smul /-\n@[simp]\ntheorem RestrictScalars.ringEquiv_map_smul (r : R) (x : RestrictScalars R S A) :\n    RestrictScalars.ringEquiv R S A («expr • » r x) =\n      «expr • » (algebraMap R S r) (RestrictScalars.ringEquiv R S A x) :=\n  rfl\n#align restrict_scalars.ring_equiv_map_smul RestrictScalars.ringEquiv_map_smul\n-/\n\n",
 "ringEquiv_algebraMap":
 "#print RestrictScalars.ringEquiv_algebraMap /-\n@[simp]\ntheorem RestrictScalars.ringEquiv_algebraMap (r : R) :\n    RestrictScalars.ringEquiv R S A (algebraMap R (RestrictScalars R S A) r) = algebraMap S A (algebraMap R S r) :=\n  rfl\n#align restrict_scalars.ring_equiv_algebra_map RestrictScalars.ringEquiv_algebraMap\n-/\n\n",
 "lsmul_apply_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.lsmul_apply_apply /-\ntheorem RestrictScalars.lsmul_apply_apply (s : S) (x : RestrictScalars R S M) :\n    RestrictScalars.lsmul R S M s x =\n      (RestrictScalars.addEquiv R S M).symm («expr • » s (RestrictScalars.addEquiv R S M x)) :=\n  rfl\n#align restrict_scalars.lsmul_apply_apply RestrictScalars.lsmul_apply_apply\n-/\n\n",
 "addEquiv_symm_map_smul_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.addEquiv_symm_map_smul_smul /-\ntheorem RestrictScalars.addEquiv_symm_map_smul_smul (r : R) (s : S) (x : M) :\n    (RestrictScalars.addEquiv R S M).symm («expr • » («expr • » r s) x) =\n      «expr • » r ((RestrictScalars.addEquiv R S M).symm («expr • » s x)) :=\n  by\n  rw [Algebra.smul_def, mul_smul]\n  rfl\n#align restrict_scalars.add_equiv_symm_map_smul_smul RestrictScalars.addEquiv_symm_map_smul_smul\n-/\n\n",
 "addEquiv_symm_map_algebraMap_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.addEquiv_symm_map_algebraMap_smul /-\ntheorem RestrictScalars.addEquiv_symm_map_algebraMap_smul (r : R) (x : M) :\n    (RestrictScalars.addEquiv R S M).symm («expr • » (algebraMap R S r) x) =\n      «expr • » r ((RestrictScalars.addEquiv R S M).symm x) :=\n  rfl\n#align restrict_scalars.add_equiv_symm_map_algebra_map_smul RestrictScalars.addEquiv_symm_map_algebraMap_smul\n-/\n\n",
 "addEquiv_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.addEquiv_map_smul /-\n/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Yury Kudryashov\n-/\n-- We use `restrict_scalars.module_orig` in the implementation,\n-- but not in the type.\n@[simp]\ntheorem RestrictScalars.addEquiv_map_smul (c : R) (x : RestrictScalars R S M) :\n    RestrictScalars.addEquiv R S M («expr • » c x) = «expr • » (algebraMap R S c) (RestrictScalars.addEquiv R S M x) :=\n  rfl\n#align restrict_scalars.add_equiv_map_smul RestrictScalars.addEquiv_map_smul\n-/\n\n"}