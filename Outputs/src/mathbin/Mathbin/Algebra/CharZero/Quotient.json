{"zsmul_mem_zmultiples_iff_exists_sub_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- `z • r` is a multiple of `p` iff `r` is `pk/z` above a multiple of `p`, where `0 ≤ k < |z|`. -/\ntheorem zsmul_mem_zmultiples_iff_exists_sub_div {r : R} {z : ℤ} (hz : z ≠ 0) :\n    «expr • » z r ∈ add_subgroup.zmultiples p ↔\n      ∃ k : fin z.nat_abs, r - «expr • » (k : ℕ) (p / z : R) ∈ add_subgroup.zmultiples p :=\n  by\n  rw [add_subgroup.mem_zmultiples_iff]\n  simp_rw [add_subgroup.mem_zmultiples_iff, div_eq_mul_inv, ← smul_mul_assoc, eq_sub_iff_add_eq]\n  have hz' : (z : R) ≠ 0 := int.cast_ne_zero.mpr hz\n  conv_rhs => simp (config := { singlePass := true }) only [← (mul_right_injective₀ hz').eq_iff]\n  simp_rw [← zsmul_eq_mul, smul_add, ← mul_smul_comm, zsmul_eq_mul (z : R)⁻¹, mul_inv_cancel hz', mul_one, ←\n    coe_nat_zsmul, smul_smul, ← add_smul]\n  constructor\n  · rintro ⟨k, h⟩\n    simp_rw [← h]\n    refine' ⟨⟨(k % z).to_nat, _⟩, k / z, _⟩\n    · rw [← Int.ofNat_lt, Int.toNat_of_nonneg (Int.emod_nonneg _ hz)]\n      exact (Int.emod_lt _ hz).trans_eq (Int.abs_eq_natAbs _)\n    rw [Fin.val_mk, Int.toNat_of_nonneg (Int.emod_nonneg _ hz), Int.div_add_mod]\n  · rintro ⟨k, n, h⟩\n    exact ⟨_, h⟩\n#align zsmul_mem_zmultiples_iff_exists_sub_div zsmul_mem_zmultiples_iff_exists_sub_div\n\n",
 "zmultiples_zsmul_eq_zsmul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem zmultiples_zsmul_eq_zsmul_iff {ψ θ : «expr ⧸ » R (add_subgroup.zmultiples p)} {z : ℤ} (hz : z ≠ 0) :\n    «expr • » z ψ = «expr • » z θ ↔ ∃ k : fin z.nat_abs, ψ = θ + «expr • » (k : ℕ) (p / z : R) :=\n  by\n  induction ψ using Quotient.inductionOn'\n  induction θ using Quotient.inductionOn'\n  have : (quotient.mk' : R → «expr ⧸ » R (add_subgroup.zmultiples p)) = coe := rfl\n  simp only [this]\n  simp_rw [← coe_zsmul, ← coe_nsmul, ← coe_add, quotient_add_group.eq_iff_sub_mem, ← smul_sub, ← sub_sub,\n    add_subgroup.zsmul_mem_zmultiples_iff_exists_sub_div hz]\n#align zmultiples_zsmul_eq_zsmul_iff zmultiples_zsmul_eq_zsmul_iff\n\n",
 "zmultiples_nsmul_eq_nsmul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem zmultiples_nsmul_eq_nsmul_iff {ψ θ : «expr ⧸ » R (add_subgroup.zmultiples p)} {n : ℕ} (hz : n ≠ 0) :\n    «expr • » n ψ = «expr • » n θ ↔ ∃ k : fin n, ψ = θ + «expr • » (k : ℕ) (p / n : R) :=\n  by\n  simp_rw [← coe_nat_zsmul ψ, ← coe_nat_zsmul θ, zmultiples_zsmul_eq_zsmul_iff (int.coe_nat_ne_zero.mpr hz),\n    Int.cast_ofNat]\n  rfl\n#align zmultiples_nsmul_eq_nsmul_iff zmultiples_nsmul_eq_nsmul_iff\n\n",
 "nsmul_mem_zmultiples_iff_exists_sub_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem nsmul_mem_zmultiples_iff_exists_sub_div {r : R} {n : ℕ} (hn : n ≠ 0) :\n    «expr • » n r ∈ add_subgroup.zmultiples p ↔\n      ∃ k : fin n, r - «expr • » (k : ℕ) (p / n : R) ∈ add_subgroup.zmultiples p :=\n  by\n  simp_rw [← coe_nat_zsmul r, zsmul_mem_zmultiples_iff_exists_sub_div (int.coe_nat_ne_zero.mpr hn), Int.cast_ofNat]\n  rfl\n#align nsmul_mem_zmultiples_iff_exists_sub_div nsmul_mem_zmultiples_iff_exists_sub_div\n\n"}