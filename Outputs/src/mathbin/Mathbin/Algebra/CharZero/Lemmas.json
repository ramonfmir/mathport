{"zero_ne_bit0":
 "#print zero_ne_bit0 /-\ntheorem zero_ne_bit0 : 0 ≠ bit0 a ↔ a ≠ 0 :=\n  zero_eq_bit0.not\n#align zero_ne_bit0 zero_ne_bit0\n-/\n\n",
 "zero_eq_bit0":
 "#print zero_eq_bit0 /-\n@[simp]\ntheorem zero_eq_bit0 {a : R} : 0 = bit0 a ↔ a = 0 := by\n  rw [eq_comm]\n  exact bit0_eq_zero\n#align zero_eq_bit0 zero_eq_bit0\n-/\n\n",
 "sub_half":
 "#print sub_half /-\ntheorem sub_half (a : R) : a - a / 2 = a / 2 := by rw [sub_eq_iff_eq_add, add_halves']\n#align sub_half sub_half\n-/\n\n",
 "one_eq_bit1":
 "#print one_eq_bit1 /-\n@[simp]\ntheorem one_eq_bit1 {a : R} : 1 = bit1 a ↔ a = 0 := by\n  rw [eq_comm]\n  exact bit1_eq_one\n#align one_eq_bit1 one_eq_bit1\n-/\n\n",
 "neg_eq_self_iff":
 "#print neg_eq_self_iff /-\ntheorem neg_eq_self_iff {a : R} : -a = a ↔ a = 0 :=\n  neg_eq_iff_add_eq_zero.trans add_self_eq_zero\n#align neg_eq_self_iff neg_eq_self_iff\n-/\n\n",
 "nat_mul_inj'":
 "#print nat_mul_inj' /-\ntheorem nat_mul_inj' {n : ℕ} {a b : R} (h : (n : R) * a = (n : R) * b) (w : n ≠ 0) : a = b := by\n  simpa [w] using nat_mul_inj h\n#align nat_mul_inj' nat_mul_inj'\n-/\n\n",
 "nat_mul_inj":
 "#print nat_mul_inj /-\ntheorem nat_mul_inj {n : ℕ} {a b : R} (h : (n : R) * a = (n : R) * b) : n = 0 ∨ a = b :=\n  by\n  rw [← sub_eq_zero, ← mul_sub, mul_eq_zero, sub_eq_zero] at h\n  exact_mod_cast h\n#align nat_mul_inj nat_mul_inj\n-/\n\n",
 "injective_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.injective_nat /-\ntheorem RingHom.injective_nat (f : «expr →+* » ℕ R) [CharZero R] : function.injective f :=\n  subsingleton.elim (nat.cast_ring_hom _) f ▸ Nat.cast_injective\n#align ring_hom.injective_nat RingHom.injective_nat\n-/\n\n",
 "half_sub":
 "#print half_sub /-\ntheorem half_sub (a : R) : a / 2 - a = -(a / 2) := by rw [← neg_sub, sub_half]\n#align half_sub half_sub\n-/\n\n",
 "half_add_self":
 "#print half_add_self /-\n@[simp]\ntheorem half_add_self (a : R) : (a + a) / 2 = a := by rw [← mul_two, mul_div_cancel a two_ne_zero]\n#align half_add_self half_add_self\n-/\n\n",
 "eq_neg_self_iff":
 "#print eq_neg_self_iff /-\ntheorem eq_neg_self_iff {a : R} : a = -a ↔ a = 0 :=\n  eq_neg_iff_add_eq_zero.trans add_self_eq_zero\n#align eq_neg_self_iff eq_neg_self_iff\n-/\n\n",
 "charZero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.charZero_iff /-\ntheorem RingHom.charZero_iff {ϕ : «expr →+* » R S} (hϕ : function.injective ϕ) : CharZero R ↔ CharZero S :=\n  ⟨fun hR => ⟨by intro a b h <;> rwa [← @Nat.cast_inj R, ← hϕ.eq_iff, map_nat_cast ϕ, map_nat_cast ϕ]⟩, fun hS =>\n    ϕ.char_zero⟩\n#align ring_hom.char_zero_iff RingHom.charZero_iff\n-/\n\n",
 "charZero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.charZero /-\ntheorem RingHom.charZero (ϕ : «expr →+* » R S) [hS : CharZero S] : CharZero R :=\n  ⟨fun a b h => char_zero.cast_injective (by rw [← map_nat_cast ϕ, ← map_nat_cast ϕ, h])⟩\n#align ring_hom.char_zero RingHom.charZero\n-/\n\n",
 "cast_pow_eq_one":
 "/-\nCopyright (c) 2014 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem cast_pow_eq_one {R : Type _} [Semiring R] [CharZero R] (q : ℕ) (n : ℕ) (hn : n ≠ 0) : (q : R) ^ n = 1 ↔ q = 1 :=\n  by\n  rw [← cast_pow, cast_eq_one]\n  exact pow_eq_one_iff hn\n#align cast_pow_eq_one cast_pow_eq_one\n\n",
 "cast_div_char_zero":
 "@[simp, norm_cast]\ntheorem cast_div_char_zero {k : Type _} [Field k] [CharZero k] {m n : ℕ} (n_dvd : n ∣ m) : ((m / n : ℕ) : k) = m / n :=\n  by\n  rcases eq_or_ne n 0 with (rfl | hn)\n  · simp\n  · exact cast_div n_dvd (cast_ne_zero.2 hn)\n#align cast_div_char_zero cast_div_char_zero\n\n",
 "bit1_injective":
 "#print bit1_injective /-\ntheorem bit1_injective : function.injective (bit1 : R → R) := fun a b h =>\n  by\n  simp only [bit1, add_left_inj] at h\n  exact bit0_injective h\n#align bit1_injective bit1_injective\n-/\n\n",
 "bit1_eq_one":
 "#print bit1_eq_one /-\n@[simp]\ntheorem bit1_eq_one {a : R} : bit1 a = 1 ↔ a = 0 := by rw [show (1 : R) = bit1 0 by simp, bit1_eq_bit1]\n#align bit1_eq_one bit1_eq_one\n-/\n\n",
 "bit1_eq_bit1":
 "#print bit1_eq_bit1 /-\n@[simp]\ntheorem bit1_eq_bit1 {a b : R} : bit1 a = bit1 b ↔ a = b :=\n  bit1_injective.eq_iff\n#align bit1_eq_bit1 bit1_eq_bit1\n-/\n\n",
 "bit0_ne_zero":
 "#print bit0_ne_zero /-\ntheorem bit0_ne_zero : bit0 a ≠ 0 ↔ a ≠ 0 :=\n  bit0_eq_zero.not\n#align bit0_ne_zero bit0_ne_zero\n-/\n\n",
 "bit0_injective":
 "#print bit0_injective /-\ntheorem bit0_injective : function.injective (bit0 : R → R) := fun a b h =>\n  by\n  dsimp [bit0] at h\n  simp only [(two_mul a).symm, (two_mul b).symm] at h\n  refine' nat_mul_inj' _ two_ne_zero\n  exact_mod_cast h\n#align bit0_injective bit0_injective\n-/\n\n",
 "bit0_eq_zero":
 "#print bit0_eq_zero /-\n@[simp]\ntheorem bit0_eq_zero {a : R} : bit0 a = 0 ↔ a = 0 :=\n  add_self_eq_zero\n#align bit0_eq_zero bit0_eq_zero\n-/\n\n",
 "bit0_eq_bit0":
 "#print bit0_eq_bit0 /-\n@[simp]\ntheorem bit0_eq_bit0 {a b : R} : bit0 a = bit0 b ↔ a = b :=\n  bit0_injective.eq_iff\n#align bit0_eq_bit0 bit0_eq_bit0\n-/\n\n",
 "add_self_eq_zero":
 "#print add_self_eq_zero /-\n@[simp]\ntheorem add_self_eq_zero {a : R} : a + a = 0 ↔ a = 0 := by\n  simp only [(two_mul a).symm, mul_eq_zero, two_ne_zero, false_or_iff]\n#align add_self_eq_zero add_self_eq_zero\n-/\n\n",
 "add_halves'":
 "#print add_halves' /-\n@[simp]\ntheorem add_halves' (a : R) : a / 2 + a / 2 = a := by rw [← add_div, half_add_self]\n#align add_halves' add_halves'\n-/\n\n"}