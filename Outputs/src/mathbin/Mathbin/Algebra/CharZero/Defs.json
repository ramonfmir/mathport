{"charZero_of_inj_zero":
 "#print charZero_of_inj_zero /-\n/-\nCopyright (c) 2014 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\ntheorem charZero_of_inj_zero {R : Type _} [AddGroupWithOne R] (H : ∀ n : ℕ, (n : R) = 0 → n = 0) : CharZero R :=\n  ⟨fun m n h => by\n    induction' m with m ih generalizing n;\n    · rw [H n]\n      rw [← h, Nat.cast_zero]\n    cases' n with n;\n    · apply H\n      rw [h, Nat.cast_zero]\n    simp_rw [Nat.cast_succ, add_right_cancel_iff] at h; rwa [ih]⟩\n#align char_zero_of_inj_zero charZero_of_inj_zero\n-/\n\n",
 "cast_ne_zero":
 "@[norm_cast]\ntheorem cast_ne_zero {n : ℕ} : (n : R) ≠ 0 ↔ n ≠ 0 :=\n  not_congr cast_eq_zero\n#align cast_ne_zero cast_ne_zero\n\n",
 "cast_ne_one":
 "@[norm_cast]\ntheorem cast_ne_one {n : ℕ} : (n : R) ≠ 1 ↔ n ≠ 1 :=\n  cast_eq_one.not\n#align cast_ne_one cast_ne_one\n\n",
 "cast_injective":
 "theorem cast_injective : function.injective (coe : ℕ → R) :=\n  char_zero.cast_injective\n#align cast_injective cast_injective\n\n",
 "cast_inj":
 "#print cast_inj /-\n@[simp, norm_cast]\ntheorem cast_inj {m n : ℕ} : (m : R) = n ↔ m = n :=\n  cast_injective.eq_iff\n#align cast_inj cast_inj\n-/\n\n",
 "cast_eq_zero":
 "@[simp, norm_cast]\ntheorem cast_eq_zero {n : ℕ} : (n : R) = 0 ↔ n = 0 := by rw [← cast_zero, cast_inj]\n#align cast_eq_zero cast_eq_zero\n\n",
 "cast_eq_one":
 "@[simp, norm_cast]\ntheorem cast_eq_one {n : ℕ} : (n : R) = 1 ↔ n = 1 := by rw [← cast_one, cast_inj]\n#align cast_eq_one cast_eq_one\n\n",
 "cast_add_one_ne_zero":
 "theorem cast_add_one_ne_zero (n : ℕ) : (n + 1 : R) ≠ 0 := by exact_mod_cast n.succ_ne_zero\n#align cast_add_one_ne_zero cast_add_one_ne_zero\n\n"}