{"zero_quot":
 "-- note we can't define a `rel.pow` as `rel` isn't reflexive so `rel r 1 1` isn't true\ntheorem zero_quot : (⟨Quot.mk _ 0⟩ : ring_quot r) = 0 :=\n  show _ = zero r by rw [zero]\n#align zero_quot zero_quot\n\n",
 "sub_right":
 "theorem rel.sub_right {R : Type u₁} [Ring R] {r : R → R → Prop} ⦃a b c : R⦄ (h : rel r b c) : rel r (a - b) (a - c) :=\n  by simp only [sub_eq_add_neg, h.neg.add_right]\n#align rel.sub_right rel.sub_right\n\n",
 "sub_quot":
 "theorem sub_quot {R : Type u₁} [Ring R] (r : R → R → Prop) {a b} :\n    (⟨Quot.mk _ a⟩ - ⟨Quot.mk _ b⟩ : ring_quot r) = ⟨Quot.mk _ (a - b)⟩ :=\n  by\n  show sub r _ _ = _\n  rw [sub]\n  rfl\n#align sub_quot sub_quot\n\n",
 "sub_left":
 "theorem rel.sub_left {R : Type u₁} [Ring R] {r : R → R → Prop} ⦃a b c : R⦄ (h : rel r a b) : rel r (a - c) (b - c) := by\n  simp only [sub_eq_add_neg, h.add_left]\n#align rel.sub_left rel.sub_left\n\n",
 "star'_quot":
 "theorem star'_quot (hr : ∀ a b, r a b → r (star a) (star b)) {a} :\n    (star' r hr ⟨Quot.mk _ a⟩ : ring_quot r) = ⟨Quot.mk _ (star a)⟩ :=\n  by\n  show star' r _ _ = _\n  rw [star']\n  rfl\n#align star'_quot star'_quot\n\n",
 "star":
 "theorem rel.star ⦃a b : R⦄ (h : rel r a b) : rel r (star a) (star b) :=\n  by\n  induction h\n  · exact rel.of (hr _ _ h_h)\n  · rw [star_add, star_add]\n    exact rel.add_left h_ih\n  · rw [star_mul, star_mul]\n    exact rel.mul_right h_ih\n  · rw [star_mul, star_mul]\n    exact rel.mul_left h_ih\n#align rel.star rel.star\n\n",
 "smul_quot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_quot [algebra S R] {n : S} {a : R} :\n    («expr • » n ⟨Quot.mk _ a⟩ : ring_quot r) = ⟨Quot.mk _ («expr • » n a)⟩ :=\n  by\n  show smul r _ _ = _\n  rw [smul]\n  rfl\n#align smul_quot smul_quot\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem rel.smul {r : A → A → Prop} (k : S) ⦃a b : A⦄ (h : rel r a b) : rel r («expr • » k a) («expr • » k b) := by\n  simp only [algebra.smul_def, rel.mul_right h]\n#align rel.smul rel.smul\n\n",
 "ring_quot_to_ideal_quotient_apply":
 "@[simp]\ntheorem ring_quot_to_ideal_quotient_apply (r : B → B → Prop) (x : B) :\n    ring_quot_to_ideal_quotient r (mk_ring_hom r x) = ideal.quotient.mk _ x :=\n  by\n  simp_rw [ring_quot_to_ideal_quotient, lift, mk_ring_hom]\n  rfl\n#align ring_quot_to_ideal_quotient_apply ring_quot_to_ideal_quotient_apply\n\n",
 "ring_quot_ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[ext]\ntheorem ring_quot_ext' {s : A → A → Prop} (f g : «expr →ₐ[ ] » (ring_quot s) S B)\n    (w : f.comp (mk_alg_hom S s) = g.comp (mk_alg_hom S s)) : f = g :=\n  by\n  ext\n  rcases mk_alg_hom_surjective S s x with ⟨x, rfl⟩\n  exact (alg_hom.congr_fun w x : _)\n#align ring_quot_ext' ring_quot_ext'\n\n",
 "ring_quot_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[ext]\ntheorem ring_quot_ext {T : Type u₄} [Semiring T] {r : R → R → Prop} (f g : «expr →+* » (ring_quot r) T)\n    (w : f.comp (mk_ring_hom r) = g.comp (mk_ring_hom r)) : f = g :=\n  by\n  ext\n  rcases mk_ring_hom_surjective r x with ⟨x, rfl⟩\n  exact (RingHom.congr_fun w x : _)\n#align ring_quot_ext ring_quot_ext\n\n",
 "pow_quot":
 "theorem pow_quot {a} {n : ℕ} : (⟨Quot.mk _ a⟩ ^ n : ring_quot r) = ⟨Quot.mk _ (a ^ n)⟩ :=\n  by\n  show npow r _ _ = _\n  rw [npow]\n#align pow_quot pow_quot\n\n",
 "one_quot":
 "theorem one_quot : (⟨Quot.mk _ 1⟩ : ring_quot r) = 1 :=\n  show _ = one r by rw [one]\n#align one_quot one_quot\n\n",
 "neg_quot":
 "theorem neg_quot {R : Type u₁} [Ring R] (r : R → R → Prop) {a} : (-⟨Quot.mk _ a⟩ : ring_quot r) = ⟨Quot.mk _ (-a)⟩ :=\n  by\n  show neg r _ = _\n  rw [neg]\n  rfl\n#align neg_quot neg_quot\n\n",
 "neg":
 "theorem rel.neg {R : Type u₁} [Ring R] {r : R → R → Prop} ⦃a b : R⦄ (h : rel r a b) : rel r (-a) (-b) := by\n  simp only [neg_eq_neg_one_mul a, neg_eq_neg_one_mul b, rel.mul_right h]\n#align rel.neg rel.neg\n\n",
 "mul_quot":
 "theorem mul_quot {a b} : (⟨Quot.mk _ a⟩ * ⟨Quot.mk _ b⟩ : ring_quot r) = ⟨Quot.mk _ (a * b)⟩ :=\n  by\n  show mul r _ _ = _\n  rw [mul]\n  rfl\n#align mul_quot mul_quot\n\n",
 "mk_ring_hom_surjective":
 "theorem mk_ring_hom_surjective (r : R → R → Prop) : function.surjective (mk_ring_hom r) :=\n  by\n  dsimp [mk_ring_hom]\n  rintro ⟨⟨⟩⟩\n  simp\n#align mk_ring_hom_surjective mk_ring_hom_surjective\n\n",
 "mk_ring_hom_rel":
 "theorem mk_ring_hom_rel {r : R → R → Prop} {x y : R} (w : r x y) : mk_ring_hom r x = mk_ring_hom r y := by\n  simp [mk_ring_hom, quot.sound (rel.of w)]\n#align mk_ring_hom_rel mk_ring_hom_rel\n\n",
 "mk_alg_hom_surjective":
 "theorem mk_alg_hom_surjective (s : A → A → Prop) : function.surjective (mk_alg_hom S s) :=\n  by\n  dsimp [mk_alg_hom, mk_ring_hom]\n  rintro ⟨⟨a⟩⟩\n  use a\n  rfl\n#align mk_alg_hom_surjective mk_alg_hom_surjective\n\n",
 "mk_alg_hom_rel":
 "theorem mk_alg_hom_rel {s : A → A → Prop} {x y : A} (w : s x y) : mk_alg_hom S s x = mk_alg_hom S s y := by\n  simp [mk_alg_hom, mk_ring_hom, quot.sound (rel.of w)]\n#align mk_alg_hom_rel mk_alg_hom_rel\n\n",
 "mk_alg_hom_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem mk_alg_hom_coe (s : A → A → Prop) : (mk_alg_hom S s : «expr →+* » A (ring_quot s)) = mk_ring_hom s :=\n  by\n  simp_rw [mk_alg_hom, mk_ring_hom]\n  rfl\n#align mk_alg_hom_coe mk_alg_hom_coe\n\n",
 "lift_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n-- note this is essentially `lift.symm_apply_eq.mp h`\ntheorem lift_unique (f : «expr →+* » R T) {r : R → R → Prop} (w : ∀ ⦃x y⦄, r x y → f x = f y)\n    (g : «expr →+* » (ring_quot r) T) (h : g.comp (mk_ring_hom r) = f) : g = lift ⟨f, w⟩ :=\n  by\n  ext\n  simp [h]\n#align lift_unique lift_unique\n\n",
 "lift_mk_ring_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n@[simp]\ntheorem lift_mk_ring_hom_apply (f : «expr →+* » R T) {r : R → R → Prop} (w : ∀ ⦃x y⦄, r x y → f x = f y) (x) :\n    lift ⟨f, w⟩ (mk_ring_hom r x) = f x := by\n  simp_rw [lift, mk_ring_hom]\n  rfl\n#align lift_mk_ring_hom_apply lift_mk_ring_hom_apply\n\n",
 "lift_alg_hom_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n-- note this is essentially `(lift_alg_hom S).symm_apply_eq.mp h`\ntheorem lift_alg_hom_unique (f : «expr →ₐ[ ] » A S B) {s : A → A → Prop} (w : ∀ ⦃x y⦄, s x y → f x = f y)\n    (g : «expr →ₐ[ ] » (ring_quot s) S B) (h : g.comp (mk_alg_hom S s) = f) : g = lift_alg_hom S ⟨f, w⟩ :=\n  by\n  ext\n  simp [h]\n#align lift_alg_hom_unique lift_alg_hom_unique\n\n",
 "lift_alg_hom_mk_alg_hom_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n@[simp]\ntheorem lift_alg_hom_mk_alg_hom_apply (f : «expr →ₐ[ ] » A S B) {s : A → A → Prop} (w : ∀ ⦃x y⦄, s x y → f x = f y)\n    (x) : (lift_alg_hom S ⟨f, w⟩) ((mk_alg_hom S s) x) = f x :=\n  by\n  simp_rw [lift_alg_hom, mk_alg_hom, mk_ring_hom]\n  rfl\n#align lift_alg_hom_mk_alg_hom_apply lift_alg_hom_mk_alg_hom_apply\n\n",
 "ideal_quotient_to_ring_quot_apply":
 "@[simp]\ntheorem ideal_quotient_to_ring_quot_apply (r : B → B → Prop) (x : B) :\n    ideal_quotient_to_ring_quot r (ideal.quotient.mk _ x) = mk_ring_hom r x :=\n  rfl\n#align ideal_quotient_to_ring_quot_apply ideal_quotient_to_ring_quot_apply\n\n",
 "eq_lift_comp_mk_ring_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem eq_lift_comp_mk_ring_hom {r : R → R → Prop} (f : «expr →+* » (ring_quot r) T) :\n    f =\n      lift\n        ⟨f.comp (mk_ring_hom r), fun x y h => by\n          dsimp\n          rw [mk_ring_hom_rel h]⟩ :=\n  by\n  conv_lhs => rw [← lift.apply_symm_apply f]\n  rw [lift]\n  rfl\n#align eq_lift_comp_mk_ring_hom eq_lift_comp_mk_ring_hom\n\n",
 "eq_lift_alg_hom_comp_mk_alg_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\ntheorem eq_lift_alg_hom_comp_mk_alg_hom {s : A → A → Prop} (f : «expr →ₐ[ ] » (ring_quot s) S B) :\n    f =\n      lift_alg_hom S\n        ⟨f.comp (mk_alg_hom S s), fun x y h => by\n          dsimp\n          erw [mk_alg_hom_rel S h]⟩ :=\n  by\n  conv_lhs => rw [← (lift_alg_hom S).apply_symm_apply f]\n  rw [lift_alg_hom]\n  rfl\n#align eq_lift_alg_hom_comp_mk_alg_hom eq_lift_alg_hom_comp_mk_alg_hom\n\n",
 "add_right":
 "/-\nCopyright (c) 2020 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem rel.add_right {r : R → R → Prop} ⦃a b c : R⦄ (h : rel r b c) : rel r (a + b) (a + c) :=\n  by\n  rw [add_comm a b, add_comm a c]\n  exact rel.add_left h\n#align rel.add_right rel.add_right\n\n",
 "add_quot":
 "theorem add_quot {a b} : (⟨Quot.mk _ a⟩ + ⟨Quot.mk _ b⟩ : ring_quot r) = ⟨Quot.mk _ (a + b)⟩ :=\n  by\n  show add r _ _ = _\n  rw [add]\n  rfl\n#align add_quot add_quot\n\n"}