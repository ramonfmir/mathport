{"smul_eval_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_eval_smul (m : M) (f : polynomial S) (x : S) :\n    («expr • » m f).eval («expr • » m x) = «expr • » m (f.eval x) :=\n  polynomial.induction_on f (fun r => by rw [smul_C, eval_C, eval_C])\n    (fun f g ihf ihg => by rw [smul_add, eval_add, ihf, ihg, eval_add, smul_add]) fun n r ih => by\n    rw [smul_mul', smul_pow', smul_C, smul_X, eval_mul, eval_C, eval_pow, eval_X, eval_mul, eval_C, eval_pow, eval_X,\n      smul_mul', smul_pow']\n#align smul_eval_smul smul_eval_smul\n\n",
 "smul_eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_eval [MulSemiringAction G S] (g : G) (f : polynomial S) (x : S) :\n    («expr • » g f).eval x = «expr • » g (f.eval («expr • » g⁻¹ x)) := by rw [← smul_eval_smul, smul_inv_smul]\n#align smul_eval smul_eval\n\n",
 "smul_eq_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\ntheorem smul_eq_map [MulSemiringAction M R] (m : M) : («expr • » · ·) m = map (MulSemiringAction.toRingHom M R m) :=\n  by\n  suffices\n    DistribMulAction.toAddMonoidHom (polynomial R) m =\n      (map_ring_hom (MulSemiringAction.toRingHom M R m)).to_add_monoid_hom\n    by\n    ext1 r\n    exact AddMonoidHom.congr_fun this r\n  ext (n r) : 2\n  change «expr • » m (monomial n r) = map (MulSemiringAction.toRingHom M R m) (monomial n r)\n  simpa only [polynomial.map_monomial, polynomial.smul_monomial]\n#align smul_eq_map smul_eq_map\n\n",
 "smul_X":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem smul_X (m : M) : («expr • » m X : polynomial R) = X :=\n  (smul_eq_map R m).symm ▸ map_X _\n#align smul_X smul_X\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem prod_X_sub_smul.smul (x : R) (g : G) : «expr • » g (prod_X_sub_smul G R x) = prod_X_sub_smul G R x :=\n  finset.smul_prod.trans <|\n    fintype.prod_bijective _ (MulAction.bijective g) _ _ fun g' => by\n      rw [of_quotient_stabilizer_smul, smul_sub, polynomial.smul_X, polynomial.smul_C]\n#align prod_X_sub_smul.smul prod_X_sub_smul.smul\n\n",
 "monic":
 "theorem prod_X_sub_smul.monic (x : R) : (prod_X_sub_smul G R x).monic :=\n  polynomial.monic_prod_of_monic _ _ fun g _ => polynomial.monic_X_sub_C _\n#align prod_X_sub_smul.monic prod_X_sub_smul.monic\n\n",
 "eval_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem eval_smul' [MulSemiringAction G S] (g : G) (f : polynomial S) (x : S) :\n    f.eval («expr • » g x) = «expr • » g ((«expr • » g⁻¹ f).eval x) := by rw [← smul_eval_smul, smul_inv_smul]\n#align eval_smul' eval_smul'\n\n",
 "eval":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\ntheorem prod_X_sub_smul.eval (x : R) : (prod_X_sub_smul G R x).eval x = 0 :=\n  (monoid_hom.map_prod ((polynomial.aeval x).to_ring_hom.to_monoid_hom : «expr →* » (polynomial R) R) _ _).trans <|\n    finset.prod_eq_zero (finset.mem_univ <| quotient_group.mk 1) <| by simp\n#align prod_X_sub_smul.eval prod_X_sub_smul.eval\n\n",
 "coeff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem prod_X_sub_smul.coeff (x : R) (g : G) (n : ℕ) :\n    «expr • » g ((prod_X_sub_smul G R x).coeff n) = (prod_X_sub_smul G R x).coeff n := by\n  rw [← polynomial.coeff_smul, prod_X_sub_smul.smul]\n#align prod_X_sub_smul.coeff prod_X_sub_smul.coeff\n\n",
 "coe_polynomial":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+*[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `polynomial -/\n@[simp]\ntheorem coe_polynomial (g : «expr →+*[ ] » P M Q) : (g.polynomial : polynomial P → polynomial Q) = map g :=\n  rfl\n#align coe_polynomial coe_polynomial\n\n"}