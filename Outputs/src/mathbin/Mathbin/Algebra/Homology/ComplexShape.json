{"symm_symm":
 "/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin, Scott Morrison\n-/\n@[simp]\ntheorem symm_symm (c : complex_shape ι) : c.symm.symm = c :=\n  by\n  ext\n  simp\n#align symm_symm symm_symm\n\n",
 "prev_eq'":
 "theorem prev_eq' (c : complex_shape ι) {i j : ι} (h : c.rel i j) : c.prev j = i :=\n  by\n  apply c.prev_eq _ h\n  dsimp only [prev]\n  rw [dif_pos]\n  exact Exists.choose_spec ⟨i, h⟩\n#align prev_eq' prev_eq'\n\n",
 "next_eq'":
 "theorem next_eq' (c : complex_shape ι) {i j : ι} (h : c.rel i j) : c.next i = j :=\n  by\n  apply c.next_eq _ h\n  dsimp only [next]\n  rw [dif_pos]\n  exact Exists.choose_spec ⟨j, h⟩\n#align next_eq' next_eq'\n\n",
 "down_mk":
 "theorem down_mk {α : Type _} [add_right_cancel_semigroup α] [One α] (i j : α) (h : j + 1 = i) : (down α).rel i j :=\n  down'_mk (1 : α) i j h\n#align down_mk down_mk\n\n",
 "down'_mk":
 "theorem down'_mk {α : Type _} [add_right_cancel_semigroup α] (a : α) (i j : α) (h : j + a = i) : (down' a).rel i j :=\n  h\n#align down'_mk down'_mk\n\n"}