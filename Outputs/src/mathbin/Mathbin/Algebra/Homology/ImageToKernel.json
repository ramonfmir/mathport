{"π_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.π_map /-\n@[simp, reassoc.1, elementwise]\ntheorem homology.π_map (p : α.right = β.left) :\n    «expr ≫ » (homology.π f g w) (homology.map w w' α β p) = «expr ≫ » (kernelSubobjectMap β) (homology.π f' g' w') :=\n  by simp only [homology.π, homology.map, cokernel.π_desc]\n#align homology.π_map homology.π_map\n-/\n\n",
 "π_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.π_desc /-\n@[simp, reassoc.1, elementwise]\ntheorem homology.π_desc {D : V} (k : «expr ⟶ » (kernelSubobject g : V) D) (p : «expr ≫ » (imageToKernel f g w) k = 0) :\n    «expr ≫ » (homology.π f g w) (homology.desc f g w k p) = k := by simp [homology.π, homology.desc]\n#align homology.π_desc homology.π_desc\n-/\n\n",
 "subobject_ofLE_as_imageToKernel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print subobject_ofLE_as_imageToKernel /-\n/-- Prefer `image_to_kernel`. -/\n@[simp]\ntheorem subobject_ofLE_as_imageToKernel (w : «expr ≫ » f g = 0) (h) :\n    Subobject.ofLE (imageSubobject f) (kernelSubobject g) h = imageToKernel f g w :=\n  rfl\n#align subobject_of_le_as_image_to_kernel subobject_ofLE_as_imageToKernel\n-/\n\n",
 "map_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n#print homology.map_id /-\n@[simp]\ntheorem homology.map_id : homology.map w w ((«expr𝟙») _) ((«expr𝟙») _) rfl = («expr𝟙») _ := by\n  ext <;> simp only [homology.π_map, kernel_subobject_map_id, category.id_comp, category.comp_id]\n#align homology.map_id homology.map_id\n-/\n\n",
 "map_desc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.map_desc /-\n@[simp, reassoc.1, elementwise]\ntheorem homology.map_desc (p : α.right = β.left) {D : V} (k : «expr ⟶ » (kernelSubobject g' : V) D)\n    (z : «expr ≫ » (imageToKernel f' g' w') k = 0) :\n    «expr ≫ » (homology.map w w' α β p) (homology.desc f' g' w' k z) =\n      homology.desc f g w («expr ≫ » (kernelSubobjectMap β) k)\n        (by simp only [image_subobject_map_comp_image_to_kernel_assoc w w' α β p, z, comp_zero]) :=\n  by ext <;> simp only [homology.π_desc, homology.π_map_assoc]\n#align homology.map_desc homology.map_desc\n-/\n\n",
 "map_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.map_comp /-\n@[reassoc.1]\ntheorem homology.map_comp (p₁ : α₁.right = β₁.left) (p₂ : α₂.right = β₂.left) :\n    «expr ≫ » (homology.map w₁ w₂ α₁ β₁ p₁) (homology.map w₂ w₃ α₂ β₂ p₂) =\n      homology.map w₁ w₃ («expr ≫ » α₁ α₂) («expr ≫ » β₁ β₂) (homology.comp_right_eq_comp_left p₁ p₂) :=\n  by ext <;> simp only [kernel_subobject_map_comp, homology.π_map_assoc, homology.π_map, category.assoc]\n#align homology.map_comp homology.map_comp\n-/\n\n",
 "image_le_kernel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print image_le_kernel /-\n/-\nCopyright (c) 2021 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\ntheorem image_le_kernel (w : «expr ≫ » f g = 0) : imageSubobject f ≤ kernelSubobject g :=\n  imageSubobject_le_mk _ _ (kernel.lift _ _ w) (by simp)\n#align image_le_kernel image_le_kernel\n-/\n\n",
 "imageToKernel_zero_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print imageToKernel_zero_right /-\ntheorem imageToKernel_zero_right [HasImages V] {w} :\n    imageToKernel f (0 : «expr ⟶ » B C) w =\n      «expr ≫ » (imageSubobject f).arrow (inv (kernelSubobject (0 : «expr ⟶ » B C)).arrow) :=\n  by\n  ext\n  simp\n#align image_to_kernel_zero_right imageToKernel_zero_right\n-/\n\n",
 "imageToKernel_zero_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n#print imageToKernel_zero_left /-\n@[simp]\ntheorem imageToKernel_zero_left [HasKernels V] [HasZeroObject V] {w} : imageToKernel (0 : «expr ⟶ » A B) g w = 0 :=\n  by\n  ext\n  simp\n#align image_to_kernel_zero_left imageToKernel_zero_left\n-/\n\n",
 "imageToKernel_epi_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel_epi_comp /-\n@[simp]\ntheorem imageToKernel_epi_comp {Z : V} (h : «expr ⟶ » Z A) [Epi h] (w) :\n    imageToKernel («expr ≫ » h f) g w =\n      «expr ≫ » (Subobject.ofLE _ _ (imageSubobject_comp_le h f))\n        (imageToKernel f g ((cancel_epi h).mp (by simpa using w : «expr ≫ » h («expr ≫ » f g) = «expr ≫ » h 0))) :=\n  by\n  ext\n  simp\n#align image_to_kernel_epi_comp imageToKernel_epi_comp\n-/\n\n",
 "imageToKernel_comp_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel_comp_right /-\ntheorem imageToKernel_comp_right {D : V} (h : «expr ⟶ » C D) (w : «expr ≫ » f g = 0) :\n    imageToKernel f («expr ≫ » g h) (by simp [reassoc_of w]) =\n      «expr ≫ » (imageToKernel f g w) (Subobject.ofLE _ _ (kernelSubobject_comp_le g h)) :=\n  by\n  ext\n  simp\n#align image_to_kernel_comp_right imageToKernel_comp_right\n-/\n\n",
 "imageToKernel_comp_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel_comp_mono /-\n@[simp]\ntheorem imageToKernel_comp_mono {D : V} (h : «expr ⟶ » C D) [Mono h] (w) :\n    imageToKernel f («expr ≫ » g h) w =\n      «expr ≫ »\n        (imageToKernel f g ((cancel_mono h).mp (by simpa using w : «expr ≫ » («expr ≫ » f g) h = «expr ≫ » 0 h)))\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv :=\n  by\n  ext\n  simp\n#align image_to_kernel_comp_mono imageToKernel_comp_mono\n-/\n\n",
 "imageToKernel_comp_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel_comp_left /-\ntheorem imageToKernel_comp_left {Z : V} (h : «expr ⟶ » Z A) (w : «expr ≫ » f g = 0) :\n    imageToKernel («expr ≫ » h f) g (by simp [w]) =\n      «expr ≫ » (Subobject.ofLE _ _ (imageSubobject_comp_le h f)) (imageToKernel f g w) :=\n  by\n  ext\n  simp\n#align image_to_kernel_comp_left imageToKernel_comp_left\n-/\n\n",
 "imageToKernel_comp_hom_inv_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≅ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel_comp_hom_inv_comp /-\n@[simp]\ntheorem imageToKernel_comp_hom_inv_comp [HasEqualizers V] [HasImages V] {Z : V} {i : «expr ≅ » B Z} (w) :\n    imageToKernel («expr ≫ » f i.hom) («expr ≫ » i.inv g) w =\n      «expr ≫ » (imageSubobjectCompIso _ _).hom\n        («expr ≫ » (imageToKernel f g (by simpa using w)) (kernelSubobjectIsoComp i.inv g).inv) :=\n  by\n  ext\n  simp\n#align image_to_kernel_comp_hom_inv_comp imageToKernel_comp_hom_inv_comp\n-/\n\n",
 "imageToKernel_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel_arrow /-\n@[simp, reassoc.1, elementwise]\ntheorem imageToKernel_arrow (w : «expr ≫ » f g = 0) :\n    «expr ≫ » (imageToKernel f g w) (kernelSubobject g).arrow = (imageSubobject f).arrow := by simp [imageToKernel]\n#align image_to_kernel_arrow imageToKernel_arrow\n-/\n\n",
 "imageToKernel'_kernelSubobjectIso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageToKernel'_kernelSubobjectIso /-\n@[simp]\ntheorem imageToKernel'_kernelSubobjectIso (w : «expr ≫ » f g = 0) :\n    «expr ≫ » (imageToKernel' f g w) (kernelSubobjectIso g).inv =\n      «expr ≫ » (imageSubobjectIso f).inv (imageToKernel f g w) :=\n  by\n  ext\n  simp [imageToKernel']\n#align image_to_kernel'_kernel_subobject_iso imageToKernel'_kernelSubobjectIso\n-/\n\n",
 "imageSubobjectMap_comp_imageToKernel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageSubobjectMap_comp_imageToKernel /-\n/-- Given compatible commutative squares between\na pair `f g` and a pair `f' g'` satisfying `f ≫ g = 0` and `f' ≫ g' = 0`,\nthe `image_to_kernel` morphisms intertwine the induced map on kernels and the induced map on images.\n-/\n@[reassoc.1]\ntheorem imageSubobjectMap_comp_imageToKernel (p : α.right = β.left) :\n    «expr ≫ » (imageToKernel f g w) (kernelSubobjectMap β) = «expr ≫ » (imageSubobjectMap α) (imageToKernel f' g' w') :=\n  by\n  ext\n  simp [p]\n#align image_subobject_map_comp_image_to_kernel imageSubobjectMap_comp_imageToKernel\n-/\n\n",
 "imageSubobjectIso_imageToKernel'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print imageSubobjectIso_imageToKernel' /-\n@[simp]\ntheorem imageSubobjectIso_imageToKernel' (w : «expr ≫ » f g = 0) :\n    «expr ≫ » (imageSubobjectIso f).hom (imageToKernel' f g w) =\n      «expr ≫ » (imageToKernel f g w) (kernelSubobjectIso g).hom :=\n  by\n  ext\n  simp [imageToKernel']\n#align image_subobject_iso_image_to_kernel' imageSubobjectIso_imageToKernel'\n-/\n\n",
 "factorThruImageSubobject_comp_imageToKernel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print factorThruImageSubobject_comp_imageToKernel /-\n-- This is less useful as a `simp` lemma than it initially appears,\n-- as it \"loses\" the information the morphism factors through the image.\ntheorem factorThruImageSubobject_comp_imageToKernel (w : «expr ≫ » f g = 0) :\n    «expr ≫ » (factorThruImageSubobject f) (imageToKernel f g w) = factorThruKernelSubobject g f w :=\n  by\n  ext\n  simp\n#align factor_thru_image_subobject_comp_image_to_kernel factorThruImageSubobject_comp_imageToKernel\n-/\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.ext /-\n/-- To check two morphisms out of `homology f g w` are equal, it suffices to check on cycles. -/\n@[ext]\ntheorem homology.ext {D : V} {k k' : «expr ⟶ » (homology f g w) D}\n    (p : «expr ≫ » (homology.π f g w) k = «expr ≫ » (homology.π f g w) k') : k = k' :=\n  by\n  ext\n  exact p\n#align homology.ext homology.ext\n-/\n\n",
 "condition":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.condition /-\n@[simp]\ntheorem homology.condition : «expr ≫ » (imageToKernel f g w) (homology.π f g w) = 0 :=\n  cokernel.condition _\n#align homology.condition homology.condition\n-/\n\n",
 "comp_right_eq_comp_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n#print homology.comp_right_eq_comp_left /-\n/-- Auxiliary lemma for homology computations. -/\ntheorem homology.comp_right_eq_comp_left {V : Type _} [Category V] {A₁ B₁ C₁ A₂ B₂ C₂ A₃ B₃ C₃ : V}\n    {f₁ : «expr ⟶ » A₁ B₁} {g₁ : «expr ⟶ » B₁ C₁} {f₂ : «expr ⟶ » A₂ B₂} {g₂ : «expr ⟶ » B₂ C₂} {f₃ : «expr ⟶ » A₃ B₃}\n    {g₃ : «expr ⟶ » B₃ C₃} {α₁ : «expr ⟶ » (Arrow.mk f₁) (Arrow.mk f₂)} {β₁ : «expr ⟶ » (Arrow.mk g₁) (Arrow.mk g₂)}\n    {α₂ : «expr ⟶ » (Arrow.mk f₂) (Arrow.mk f₃)} {β₂ : «expr ⟶ » (Arrow.mk g₂) (Arrow.mk g₃)} (p₁ : α₁.right = β₁.left)\n    (p₂ : α₂.right = β₂.left) : («expr ≫ » α₁ α₂).right = («expr ≫ » β₁ β₂).left := by\n  simp only [comma.comp_left, comma.comp_right, p₁, p₂]\n#align homology.comp_right_eq_comp_left homology.comp_right_eq_comp_left\n-/\n\n"}