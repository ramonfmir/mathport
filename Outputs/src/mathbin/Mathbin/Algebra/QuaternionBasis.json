{"lift_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `quaternion_algebra -/\ntheorem lift_zero : q.lift (0 : quaternion_algebra R c₁ c₂) = 0 := by simp [lift]\n#align lift_zero lift_zero\n\n",
 "lift_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `quaternion_algebra -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem lift_smul (r : R) (x : quaternion_algebra R c₁ c₂) : q.lift («expr • » r x) = «expr • » r (q.lift x) := by\n  simp [lift, mul_smul, ← Algebra.smul_def]\n#align lift_smul lift_smul\n\n",
 "lift_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `quaternion_algebra -/\ntheorem lift_one : q.lift (1 : quaternion_algebra R c₁ c₂) = 1 := by simp [lift]\n#align lift_one lift_one\n\n",
 "lift_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `quaternion_algebra -/\ntheorem lift_mul (x y : quaternion_algebra R c₁ c₂) : q.lift (x * y) = q.lift x * q.lift y :=\n  by\n  simp only [lift, Algebra.algebraMap_eq_smul_one]\n  simp only [add_mul]\n  simp only [add_mul, mul_add, smul_mul_assoc, mul_smul_comm, one_mul, mul_one, ← Algebra.smul_def, smul_add, smul_smul]\n  simp only [i_mul_i, j_mul_j, i_mul_j, j_mul_i, i_mul_k, k_mul_i, k_mul_j, j_mul_k, k_mul_k]\n  simp only [smul_smul, smul_neg, sub_eq_add_neg, add_smul, ← add_assoc, mul_neg, neg_smul]\n  simp only [mul_right_comm _ _ (c₁ * c₂), mul_comm _ (c₁ * c₂)]\n  simp only [mul_comm _ c₁, mul_right_comm _ _ c₁]\n  simp only [mul_comm _ c₂, mul_right_comm _ _ c₂]\n  simp only [← mul_comm c₁ c₂, ← mul_assoc]\n  simp [sub_eq_add_neg, add_smul, ← add_assoc]\n  abel\n#align lift_mul lift_mul\n\n",
 "lift_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `quaternion_algebra -/\ntheorem lift_add (x y : quaternion_algebra R c₁ c₂) : q.lift (x + y) = q.lift x + q.lift y :=\n  by\n  simp [lift, add_smul]\n  abel\n#align lift_add lift_add\n\n",
 "k_mul_k":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem k_mul_k : q.k * q.k = -«expr • » (c₁ * c₂) 1 := by\n  rw [← i_mul_j, mul_assoc, ← mul_assoc q.j _ _, j_mul_i, ← i_mul_j, ← mul_assoc, mul_neg, ← mul_assoc, i_mul_i,\n    smul_mul_assoc, one_mul, neg_mul, smul_mul_assoc, j_mul_j, smul_smul]\n#align k_mul_k k_mul_k\n\n",
 "k_mul_j":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem k_mul_j : q.k * q.j = «expr • » c₂ q.i := by rw [← i_mul_j, mul_assoc, j_mul_j, mul_smul_comm, mul_one]\n#align k_mul_j k_mul_j\n\n",
 "k_mul_i":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem k_mul_i : q.k * q.i = «expr • » (-c₁) q.j := by rw [← i_mul_j, mul_assoc, j_mul_i, mul_neg, i_mul_k, neg_smul]\n#align k_mul_i k_mul_i\n\n",
 "j_mul_k":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem j_mul_k : q.j * q.k = «expr • » (-c₂) q.i := by rw [← i_mul_j, ← mul_assoc, j_mul_i, neg_mul, k_mul_j, neg_smul]\n#align j_mul_k j_mul_k\n\n",
 "i_mul_k":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem i_mul_k : q.i * q.k = «expr • » c₁ q.j := by rw [← i_mul_j, ← mul_assoc, i_mul_i, smul_mul_assoc, one_mul]\n#align i_mul_k i_mul_k\n\n",
 "ext":
 "/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- Since `k` is redundant, it is not necessary to show `q₁.k = q₂.k` when showing `q₁ = q₂`. -/\n@[ext]\nprotected theorem ext ⦃q₁ q₂ : basis A c₁ c₂⦄ (hi : q₁.i = q₂.i) (hj : q₁.j = q₂.j) : q₁ = q₂ :=\n  by\n  cases q₁\n  cases q₂\n  congr\n  rw [← q₁_i_mul_j, ← q₂_i_mul_j]\n  congr\n#align ext ext\n\n"}