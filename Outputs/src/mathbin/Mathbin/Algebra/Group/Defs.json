{"zpow_zero":
 "#print zpow_zero /-\n@[simp, to_additive zero_zsmul]\ntheorem zpow_zero (a : G) : a ^ (0 : ℤ) = 1 :=\n  div_inv_monoid.zpow_zero' a\n#align zpow_zero zpow_zero\n#align zero_zsmul zero_zsmul\n-/\n\n",
 "zpow_ofNat":
 "/- warning: zpow_of_nat clashes with zpow_coe_nat -> zpow_ofNat\nCase conversion may be inaccurate. Consider using '#align zpow_of_nat zpow_ofNatₓ'. -/\n#print zpow_ofNat /-\n@[to_additive ofNat_zsmul]\ntheorem zpow_ofNat (a : G) (n : ℕ) : a ^ int.of_nat n = a ^ n :=\n  zpow_ofNat a n\n#align zpow_of_nat zpow_ofNat\n#align of_nat_zsmul ofNat_zsmul\n-/\n\n",
 "zpow_negSucc":
 "#print zpow_negSucc /-\n@[simp, to_additive]\ntheorem zpow_negSucc (a : G) (n : ℕ) : a ^ -[n+1] = (a ^ (n + 1))⁻¹ :=\n  by\n  rw [← zpow_ofNat]\n  exact div_inv_monoid.zpow_neg' n a\n#align zpow_neg_succ_of_nat zpow_negSucc\n#align zsmul_neg_succ_of_nat negSucc_zsmul\n-/\n\n",
 "zpow_eq_pow":
 "#print zpow_eq_pow /-\n@[simp, to_additive zsmul_eq_smul]\ntheorem zpow_eq_pow (n : ℤ) (x : G) : div_inv_monoid.zpow n x = x ^ n :=\n  rfl\n#align zpow_eq_pow zpow_eq_pow\n#align zsmul_eq_smul zsmul_eq_smul\n-/\n\n",
 "toIsRightCancelMul":
 "#print CommSemigroup.IsLeftCancelMul.toIsRightCancelMul /-\n/-- Any `comm_semigroup G` that satisfies `is_left_cancel_mul G` also satisfies\n`is_right_cancel_mul G`. -/\n@[to_additive AddCommSemigroup.IsLeftCancelAdd.toIsRightCancelAdd\n      \"Any\\n`add_comm_semigroup G` that satisfies `is_left_cancel_add G` also satisfies\\n`is_left_cancel_add G`.\"]\ntheorem CommSemigroup.IsLeftCancelMul.toIsRightCancelMul (G : Type u) [CommSemigroup G] [IsLeftCancelMul G] :\n    IsRightCancelMul G :=\n  ⟨fun a b c h => mul_left_cancel <| (mul_comm _ _).trans (h.trans <| mul_comm _ _)⟩\n#align comm_semigroup.is_left_cancel_mul.to_is_right_cancel_mul CommSemigroup.IsLeftCancelMul.toIsRightCancelMul\n#align add_comm_semigroup.is_left_cancel_add.to_is_right_cancel_add AddCommSemigroup.IsLeftCancelAdd.toIsRightCancelAdd\n-/\n\n",
 "toIsLeftCancelMul":
 "#print CommSemigroup.IsRightCancelMul.toIsLeftCancelMul /-\n/-- Any `comm_semigroup G` that satisfies `is_right_cancel_mul G` also satisfies\n`is_left_cancel_mul G`. -/\n@[to_additive AddCommSemigroup.IsRightCancelAdd.toIsLeftCancelAdd\n      \"Any\\n`add_comm_semigroup G` that satisfies `is_right_cancel_add G` also satisfies\\n`is_right_cancel_add G`.\"]\ntheorem CommSemigroup.IsRightCancelMul.toIsLeftCancelMul (G : Type u) [CommSemigroup G] [IsRightCancelMul G] :\n    IsLeftCancelMul G :=\n  ⟨fun a b c h => mul_right_cancel <| (mul_comm _ _).trans (h.trans <| mul_comm _ _)⟩\n#align comm_semigroup.is_right_cancel_mul.to_is_left_cancel_mul CommSemigroup.IsRightCancelMul.toIsLeftCancelMul\n#align add_comm_semigroup.is_right_cancel_add.to_is_left_cancel_add AddCommSemigroup.IsRightCancelAdd.toIsLeftCancelAdd\n-/\n\n",
 "toIsCancelMul":
 "#print CommSemigroup.IsRightCancelMul.toIsCancelMul /-\n/-- Any `comm_semigroup G` that satisfies `is_right_cancel_mul G` also satisfies\n`is_cancel_mul G`. -/\n@[to_additive AddCommSemigroup.IsRightCancelAdd.toIsCancelAdd\n      \"Any `add_comm_semigroup G`\\nthat satisfies `is_right_cancel_add G` also satisfies `is_cancel_add G`.\"]\ntheorem CommSemigroup.IsRightCancelMul.toIsCancelMul (G : Type u) [CommSemigroup G] [IsRightCancelMul G] :\n    IsCancelMul G :=\n  { ‹IsRightCancelMul G›, CommSemigroup.IsRightCancelMul.toIsLeftCancelMul G with }\n#align comm_semigroup.is_right_cancel_mul.to_is_cancel_mul CommSemigroup.IsRightCancelMul.toIsCancelMul\n#align add_comm_semigroup.is_right_cancel_add.to_is_cancel_add AddCommSemigroup.IsRightCancelAdd.toIsCancelAdd\n-/\n\n",
 "toGroup_injective":
 "#print CommGroup.toGroup_injective /-\n@[to_additive]\ntheorem CommGroup.toGroup_injective {G : Type u} : function.injective (@comm_group.to_group G) :=\n  by\n  rintro ⟨⟩ ⟨⟩ ⟨⟩\n  rfl\n#align comm_group.to_group_injective CommGroup.toGroup_injective\n#align add_comm_group.to_add_group_injective AddCommGroup.toAddGroup_injective\n-/\n\n",
 "toDivInvMonoid_injective":
 "#print Group.toDivInvMonoid_injective /-\n-- see Note [lower instance priority]\n@[to_additive]\ntheorem Group.toDivInvMonoid_injective {G : Type _} : function.injective (@group.to_div_inv_monoid G) :=\n  by\n  rintro ⟨⟩ ⟨⟩ ⟨⟩\n  rfl\n#align group.to_div_inv_monoid_injective Group.toDivInvMonoid_injective\n#align add_group.to_sub_neg_add_monoid_injective AddGroup.toSubNegAddMonoid_injective\n-/\n\n",
 "pow_zero":
 "#print pow_zero /-\n-- the attributes are intentionally out of order. `zero_smul` proves `zero_nsmul`.\n@[to_additive zero_nsmul, simp]\ntheorem pow_zero (a : M) : a ^ 0 = 1 :=\n  Monoid.npow_zero _\n#align pow_zero pow_zero\n#align zero_nsmul zero_nsmul\n-/\n\n",
 "pow_succ":
 "#print pow_succ /-\n@[to_additive succ_nsmul]\ntheorem pow_succ (a : M) (n : ℕ) : a ^ (n + 1) = a * a ^ n :=\n  Monoid.npow_succ n a\n#align pow_succ pow_succ\n#align succ_nsmul succ_nsmul\n-/\n\n",
 "one_mul":
 "#print one_mul /-\n@[ematch, simp, to_additive]\ntheorem one_mul : ∀ a : M, 1 * a = a :=\n  mul_one_class.one_mul\n#align one_mul one_mul\n#align zero_add zero_add\n-/\n\n",
 "npow_eq_pow":
 "#print npow_eq_pow /-\n-- use `x * npow_rec n x` and not `npow_rec n x * x` in the definition to make sure that\n-- definitional unfolding of `npow_rec` is blocked, to avoid deep recursion issues.\n@[simp, to_additive nsmul_eq_smul]\ntheorem npow_eq_pow (n : ℕ) (x : M) : monoid.npow n x = x ^ n :=\n  rfl\n#align npow_eq_pow npow_eq_pow\n#align nsmul_eq_smul nsmul_eq_smul\n-/\n\n",
 "mul_right_inv":
 "#print mul_right_inv /-\n@[simp, to_additive]\ntheorem mul_right_inv (a : G) : a * a⁻¹ = 1 := by rw [← mul_left_inv a⁻¹, inv_eq_of_mul (mul_left_inv a)]\n#align mul_right_inv mul_right_inv\n#align add_right_neg add_right_neg\n-/\n\n",
 "mul_right_injective":
 "#print mul_right_injective /-\n@[to_additive]\ntheorem mul_right_injective (a : G) : function.injective ((· * ·) a) := fun b c => mul_left_cancel\n#align mul_right_injective mul_right_injective\n#align add_right_injective add_right_injective\n-/\n\n",
 "mul_right_inj":
 "#print mul_right_inj /-\n@[simp, to_additive]\ntheorem mul_right_inj (a : G) {b c : G} : a * b = a * c ↔ b = c :=\n  (mul_right_injective a).eq_iff\n#align mul_right_inj mul_right_inj\n#align add_right_inj add_right_inj\n-/\n\n",
 "mul_right_cancel_iff":
 "#print mul_right_cancel_iff /-\n@[to_additive]\ntheorem mul_right_cancel_iff : b * a = c * a ↔ b = c :=\n  ⟨mul_right_cancel, congr_arg _⟩\n#align mul_right_cancel_iff mul_right_cancel_iff\n#align add_right_cancel_iff add_right_cancel_iff\n-/\n\n",
 "mul_right_cancel":
 "#print mul_right_cancel /-\n@[to_additive]\ntheorem mul_right_cancel : a * b = c * b → a = c :=\n  is_right_cancel_mul.mul_right_cancel a b c\n#align mul_right_cancel mul_right_cancel\n#align add_right_cancel add_right_cancel\n-/\n\n",
 "mul_one":
 "#print mul_one /-\n@[ematch, simp, to_additive]\ntheorem mul_one : ∀ a : M, a * 1 = a :=\n  mul_one_class.mul_one\n#align mul_one mul_one\n#align add_zero add_zero\n-/\n\n",
 "mul_ne_mul_right":
 "#print mul_ne_mul_right /-\n@[to_additive]\ntheorem mul_ne_mul_right (a : G) {b c : G} : a * b ≠ a * c ↔ b ≠ c :=\n  (mul_right_injective a).ne_iff\n#align mul_ne_mul_right mul_ne_mul_right\n#align add_ne_add_right add_ne_add_right\n-/\n\n",
 "mul_ne_mul_left":
 "#print mul_ne_mul_left /-\n@[to_additive]\ntheorem mul_ne_mul_left (a : G) {b c : G} : b * a ≠ c * a ↔ b ≠ c :=\n  (mul_left_injective a).ne_iff\n#align mul_ne_mul_left mul_ne_mul_left\n#align add_ne_add_left add_ne_add_left\n-/\n\n",
 "mul_left_inv":
 "#print mul_left_inv /-\n@[simp, to_additive]\ntheorem mul_left_inv : ∀ a : G, a⁻¹ * a = 1 :=\n  group.mul_left_inv\n#align mul_left_inv mul_left_inv\n#align add_left_neg add_left_neg\n-/\n\n",
 "mul_left_injective":
 "#print mul_left_injective /-\n@[to_additive]\ntheorem mul_left_injective (a : G) : function.injective fun x => x * a := fun b c => mul_right_cancel\n#align mul_left_injective mul_left_injective\n#align add_left_injective add_left_injective\n-/\n\n",
 "mul_left_inj":
 "#print mul_left_inj /-\n@[simp, to_additive]\ntheorem mul_left_inj (a : G) {b c : G} : b * a = c * a ↔ b = c :=\n  (mul_left_injective a).eq_iff\n#align mul_left_inj mul_left_inj\n#align add_left_inj add_left_inj\n-/\n\n",
 "mul_left_cancel_iff":
 "#print mul_left_cancel_iff /-\n@[to_additive]\ntheorem mul_left_cancel_iff : a * b = a * c ↔ b = c :=\n  ⟨mul_left_cancel, congr_arg _⟩\n#align mul_left_cancel_iff mul_left_cancel_iff\n#align add_left_cancel_iff add_left_cancel_iff\n-/\n\n",
 "mul_left_cancel":
 "#print mul_left_cancel /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Simon Hudon, Mario Carneiro\n-/\n/- Additive \"sister\" structures.\n   Example, add_semigroup mirrors semigroup.\n   These structures exist just to help automation.\n   In an alternative design, we could have the binary operation as an\n   extra argument for semigroup, monoid, group, etc. However, the lemmas\n   would be hard to index since they would not contain any constant.\n   For example, mul_assoc would be\n\n   lemma mul_assoc {α : Type u} {op : α → α → α} [semigroup α op] :\n                   ∀ a b c : α, op (op a b) c = op a (op b c) :=\n    semigroup.mul_assoc\n\n   The simplifier cannot effectively use this lemma since the pattern for\n   the left-hand-side would be\n\n        ?op (?op ?a ?b) ?c\n\n   Remark: we use a tactic for transporting theorems from the multiplicative fragment\n   to the additive one.\n-/\n@[to_additive]\ntheorem mul_left_cancel : a * b = a * c → b = c :=\n  is_left_cancel_mul.mul_left_cancel a b c\n#align mul_left_cancel mul_left_cancel\n#align add_left_cancel add_left_cancel\n-/\n\n",
 "mul_inv_self":
 "#print mul_inv_self /-\n@[to_additive]\ntheorem mul_inv_self (a : G) : a * a⁻¹ = 1 :=\n  mul_right_inv a\n#align mul_inv_self mul_inv_self\n#align add_neg_self add_neg_self\n-/\n\n",
 "mul_inv_rev":
 "#print mul_inv_rev /-\n/- Despite the asymmetry of `neg_eq_of_add`, the symmetric version is true thanks to the\ninvolutivity of negation. -/\n/- Despite the asymmetry of `inv_eq_of_mul`, the symmetric version is true thanks to the\ninvolutivity of inversion. -/\n@[simp, to_additive neg_add_rev]\ntheorem mul_inv_rev (a b : G) : (a * b)⁻¹ = b⁻¹ * a⁻¹ :=\n  division_monoid.mul_inv_rev _ _\n#align mul_inv_rev mul_inv_rev\n#align neg_add_rev neg_add_rev\n-/\n\n",
 "mul_inv_cancel_right":
 "#print mul_inv_cancel_right /-\n@[simp, to_additive]\ntheorem mul_inv_cancel_right (a b : G) : a * b * b⁻¹ = a := by rw [mul_assoc, mul_right_inv, mul_one]\n#align mul_inv_cancel_right mul_inv_cancel_right\n#align add_neg_cancel_right add_neg_cancel_right\n-/\n\n",
 "mul_inv_cancel_left":
 "#print mul_inv_cancel_left /-\n@[simp, to_additive]\ntheorem mul_inv_cancel_left (a b : G) : a * (a⁻¹ * b) = b := by rw [← mul_assoc, mul_right_inv, one_mul]\n#align mul_inv_cancel_left mul_inv_cancel_left\n#align add_neg_cancel_left add_neg_cancel_left\n-/\n\n",
 "mul_comm":
 "#print mul_comm /-\n@[no_rsimp, to_additive]\ntheorem mul_comm : ∀ a b : G, a * b = b * a :=\n  comm_semigroup.mul_comm\n#align mul_comm mul_comm\n#align add_comm add_comm\n-/\n\n",
 "mul_assoc":
 "#print mul_assoc /-\n@[no_rsimp, to_additive]\ntheorem mul_assoc : ∀ a b c : G, a * b * c = a * (b * c) :=\n  semigroup.mul_assoc\n#align mul_assoc mul_assoc\n#align add_assoc add_assoc\n-/\n\n",
 "left_inv_eq_right_inv":
 "#print left_inv_eq_right_inv /-\n@[to_additive]\ntheorem left_inv_eq_right_inv {a b c : M} (hba : b * a = 1) (hac : a * c = 1) : b = c := by\n  rw [← one_mul c, ← hba, mul_assoc, hac, mul_one b]\n#align left_inv_eq_right_inv left_inv_eq_right_inv\n#align left_neg_eq_right_neg left_neg_eq_right_neg\n-/\n\n",
 "inv_one":
 "#print inv_one /-\n@[simp, to_additive]\ntheorem inv_one : (1 : G)⁻¹ = 1 :=\n  inv_one_class.inv_one\n#align inv_one inv_one\n#align neg_zero neg_zero\n-/\n\n",
 "inv_mul_self":
 "#print inv_mul_self /-\n@[to_additive]\ntheorem inv_mul_self (a : G) : a⁻¹ * a = 1 :=\n  mul_left_inv a\n#align inv_mul_self inv_mul_self\n#align neg_add_self neg_add_self\n-/\n\n",
 "inv_mul_cancel_right":
 "#print inv_mul_cancel_right /-\n@[simp, to_additive]\ntheorem inv_mul_cancel_right (a b : G) : a * b⁻¹ * b = a := by rw [mul_assoc, mul_left_inv, mul_one]\n#align inv_mul_cancel_right inv_mul_cancel_right\n#align neg_add_cancel_right neg_add_cancel_right\n-/\n\n",
 "inv_mul_cancel_left":
 "#print inv_mul_cancel_left /-\n@[simp, to_additive]\ntheorem inv_mul_cancel_left (a b : G) : a⁻¹ * (a * b) = b := by rw [← mul_assoc, mul_left_inv, one_mul]\n#align inv_mul_cancel_left inv_mul_cancel_left\n#align neg_add_cancel_left neg_add_cancel_left\n-/\n\n",
 "inv_inv":
 "#print inv_inv /-\n-- see Note [lower instance priority]\n-- ensure that we don't go via these typeclasses to find `has_inv` on groups and groups with zero\n@[simp, to_additive]\ntheorem inv_inv (a : G) : a⁻¹⁻¹ = a :=\n  has_involutive_inv.inv_inv _\n#align inv_inv inv_inv\n#align neg_neg neg_neg\n-/\n\n",
 "inv_eq_of_mul_eq_one_right":
 "#print inv_eq_of_mul_eq_one_right /-\n@[to_additive]\ntheorem inv_eq_of_mul_eq_one_right : a * b = 1 → a⁻¹ = b :=\n  division_monoid.inv_eq_of_mul _ _\n#align inv_eq_of_mul_eq_one_right inv_eq_of_mul_eq_one_right\n#align neg_eq_of_add_eq_zero_right neg_eq_of_add_eq_zero_right\n-/\n\n",
 "inv_eq_of_mul":
 "@[to_additive]\nprivate theorem inv_eq_of_mul (h : a * b = 1) : a⁻¹ = b :=\n  left_inv_eq_right_inv (inv_mul_self a) h\n#align inv_eq_of_mul inv_eq_of_mul\n\n",
 "ext":
 "#print MulOneClass.ext /-\n@[ext, to_additive]\ntheorem MulOneClass.ext {M : Type u} : ∀ ⦃m₁ m₂ : MulOneClass M⦄, m₁.mul = m₂.mul → m₁ = m₂ :=\n  by\n  rintro ⟨one₁, mul₁, one_mul₁, mul_one₁⟩ ⟨one₂, mul₂, one_mul₂, mul_one₂⟩ (rfl : mul₁ = mul₂)\n  congr\n  exact (one_mul₂ one₁).symm.trans (mul_one₁ one₂)\n#align mul_one_class.ext MulOneClass.ext\n#align add_zero_class.ext AddZeroClass.ext\n-/\n\n",
 "div_eq_mul_inv":
 "#print div_eq_mul_inv /-\n/-- Dividing by an element is the same as multiplying by its inverse.\n\nThis is a duplicate of `div_inv_monoid.div_eq_mul_inv` ensuring that the types unfold better.\n-/\n@[to_additive\n      \"Subtracting an element is the same as adding by its negative.\\n\\nThis is a duplicate of `sub_neg_monoid.sub_eq_mul_neg` ensuring that the types unfold better.\"]\ntheorem div_eq_mul_inv (a b : G) : a / b = a * b⁻¹ :=\n  div_inv_monoid.div_eq_mul_inv _ _\n#align div_eq_mul_inv div_eq_mul_inv\n#align sub_eq_add_neg sub_eq_add_neg\n-/\n\n"}