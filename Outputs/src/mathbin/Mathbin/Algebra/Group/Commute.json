{"units_of_coe":
 "@[to_additive]\ntheorem units_of_coe : Commute (u₁ : M) u₂ → Commute u₁ u₂ :=\n  SemiconjBy.units_of_val\n#align units_of_coe units_of_coe\n\n",
 "units_inv_right_iff":
 "@[simp, to_additive]\ntheorem units_inv_right_iff : Commute a ↑u⁻¹ ↔ Commute a u :=\n  SemiconjBy.units_inv_right_iff\n#align units_inv_right_iff units_inv_right_iff\n\n",
 "units_inv_right":
 "@[to_additive]\ntheorem units_inv_right : Commute a u → Commute a ↑u⁻¹ :=\n  SemiconjBy.units_inv_right\n#align units_inv_right units_inv_right\n\n",
 "units_inv_left_iff":
 "@[simp, to_additive]\ntheorem units_inv_left_iff : Commute (↑u⁻¹) a ↔ Commute (↑u) a :=\n  SemiconjBy.units_inv_symm_left_iff\n#align units_inv_left_iff units_inv_left_iff\n\n",
 "units_inv_left":
 "@[to_additive]\ntheorem units_inv_left : Commute (↑u) a → Commute (↑u⁻¹) a :=\n  SemiconjBy.units_inv_symm_left\n#align units_inv_left units_inv_left\n\n",
 "units_coe_iff":
 "@[simp, to_additive]\ntheorem units_coe_iff : Commute (u₁ : M) u₂ ↔ Commute u₁ u₂ :=\n  SemiconjBy.units_val_iff\n#align units_coe_iff units_coe_iff\n\n",
 "units_coe":
 "@[to_additive]\ntheorem units_coe : Commute u₁ u₂ → Commute (u₁ : M) u₂ :=\n  SemiconjBy.units_val\n#align units_coe units_coe\n\n",
 "symm_iff":
 "@[to_additive]\nprotected theorem symm_iff {a b : S} : Commute a b ↔ Commute b a :=\n  ⟨Commute.symm, Commute.symm⟩\n#align symm_iff symm_iff\n\n",
 "symm":
 "#print symm /-\n/-- If `a` commutes with `b`, then `b` commutes with `a`. -/\n@[symm, to_additive \"If `a` commutes with `b`, then `b` commutes with `a`.\"]\nprotected theorem symm {a b : S} (h : Commute a b) : Commute b a :=\n  eq.symm h\n#align symm symm\n-/\n\n",
 "self_pow":
 "@[simp, to_additive]\ntheorem self_pow (a : M) (n : ℕ) : Commute a (a ^ n) :=\n  (Commute.refl a).pow_right n\n#align self_pow self_pow\n\n",
 "right_comm":
 "#print right_comm /-\n@[to_additive]\nprotected theorem right_comm (h : Commute b c) (a : S) : a * b * c = a * c * b := by simp only [mul_assoc, h.eq]\n#align right_comm right_comm\n-/\n\n",
 "refl":
 "#print refl /-\n/-- Any element commutes with itself. -/\n@[refl, simp, to_additive \"Any element commutes with itself.\"]\nprotected theorem refl (a : S) : Commute a a :=\n  eq.refl (a * a)\n#align refl refl\n-/\n\n",
 "pow_succ'":
 "#print pow_succ' /-\n@[to_additive succ_nsmul']\ntheorem pow_succ' (a : M) (n : ℕ) : a ^ (n + 1) = a ^ n * a :=\n  (pow_succ a n).trans (self_pow _ _)\n#align pow_succ' pow_succ'\n-/\n\n",
 "pow_self":
 "@[simp, to_additive]\ntheorem pow_self (a : M) (n : ℕ) : Commute (a ^ n) a :=\n  (Commute.refl a).pow_left n\n#align pow_self pow_self\n\n",
 "pow_right":
 "@[simp, to_additive]\ntheorem pow_right (h : Commute a b) (n : ℕ) : Commute a (b ^ n) :=\n  h.pow_right n\n#align pow_right pow_right\n\n",
 "pow_pow_self":
 "@[simp, to_additive]\ntheorem pow_pow_self (a : M) (m n : ℕ) : Commute (a ^ m) (a ^ n) :=\n  (Commute.refl a).pow_pow m n\n#align pow_pow_self pow_pow_self\n\n",
 "pow_pow":
 "@[simp, to_additive]\ntheorem pow_pow (h : Commute a b) (m n : ℕ) : Commute (a ^ m) (b ^ n) :=\n  (h.pow_left m).pow_right n\n#align pow_pow pow_pow\n\n",
 "pow_left":
 "@[simp, to_additive]\ntheorem pow_left (h : Commute a b) (n : ℕ) : Commute (a ^ n) b :=\n  (h.symm.pow_right n).symm\n#align pow_left pow_left\n\n",
 "one_right":
 "@[simp, to_additive]\ntheorem one_right (a : M) : Commute a 1 :=\n  SemiconjBy.one_right a\n#align one_right one_right\n\n",
 "one_left":
 "@[simp, to_additive]\ntheorem one_left (a : M) : Commute 1 a :=\n  SemiconjBy.one_left a\n#align one_left one_left\n\n",
 "mul_right":
 "-- This instance is useful for `finset.noncomm_prod`\n/-- If `a` commutes with both `b` and `c`, then it commutes with their product. -/\n@[simp, to_additive \"If `a` commutes with both `b` and `c`, then it commutes with their sum.\"]\ntheorem mul_right (hab : Commute a b) (hac : Commute a c) : Commute a (b * c) :=\n  hab.mul_right hac\n#align mul_right mul_right\n\n",
 "mul_left":
 "/-- If both `a` and `b` commute with `c`, then their product commutes with `c`. -/\n@[simp, to_additive \"If both `a` and `b` commute with `c`, then their product commutes with `c`.\"]\ntheorem mul_left (hac : Commute a c) (hbc : Commute b c) : Commute (a * b) c :=\n  hac.mul_left hbc\n#align mul_left mul_left\n\n",
 "mul_inv_cancel_comm_assoc":
 "#print mul_inv_cancel_comm_assoc /-\n@[simp, to_additive]\ntheorem mul_inv_cancel_comm_assoc : a * (b * a⁻¹) = b :=\n  (Commute.all a b).mul_inv_cancel_assoc\n#align mul_inv_cancel_comm_assoc mul_inv_cancel_comm_assoc\n-/\n\n",
 "mul_inv_cancel_comm":
 "#print mul_inv_cancel_comm /-\n@[simp, to_additive]\ntheorem mul_inv_cancel_comm : a * b * a⁻¹ = b :=\n  (Commute.all a b).mul_inv_cancel\n#align mul_inv_cancel_comm mul_inv_cancel_comm\n-/\n\n",
 "mul_inv_cancel_assoc":
 "@[to_additive]\ntheorem mul_inv_cancel_assoc (h : Commute a b) : a * (b * a⁻¹) = b := by rw [← mul_assoc, h.mul_inv_cancel]\n#align mul_inv_cancel_assoc mul_inv_cancel_assoc\n\n",
 "mul_inv_cancel":
 "#print mul_inv_cancel /-\n@[to_additive]\nprotected theorem mul_inv_cancel (h : Commute a b) : a * b * a⁻¹ = b := by rw [h.eq, mul_inv_cancel_right]\n#align mul_inv_cancel mul_inv_cancel\n-/\n\n",
 "left_comm":
 "#print left_comm /-\n@[to_additive]\nprotected theorem left_comm (h : Commute a b) (c) : a * (b * c) = b * (a * c) := by simp only [← mul_assoc, h.eq]\n#align left_comm left_comm\n-/\n\n",
 "is_unit_mul_self_iff":
 "#print isUnit_mul_self_iff /-\n@[simp, to_additive]\ntheorem isUnit_mul_self_iff : is_unit (a * a) ↔ is_unit a :=\n  (Commute.refl a).is_unit_mul_iff.trans (and_self_iff _)\n#align is_unit_mul_self_iff isUnit_mul_self_iff\n-/\n\n",
 "is_unit_mul_iff":
 "@[to_additive]\ntheorem is_unit_mul_iff (h : Commute a b) : is_unit (a * b) ↔ is_unit a ∧ is_unit b :=\n  ⟨fun ⟨u, hu⟩ => ⟨(u.left_of_mul a b hu.symm h).is_unit, (u.right_of_mul a b hu.symm h).is_unit⟩, fun H => H.1.mul H.2⟩\n#align is_unit_mul_iff is_unit_mul_iff\n\n",
 "inv_right_iff":
 "@[simp, to_additive]\ntheorem inv_right_iff : Commute a b⁻¹ ↔ Commute a b :=\n  SemiconjBy.inv_right_iff\n#align inv_right_iff inv_right_iff\n\n",
 "inv_right":
 "@[to_additive]\ntheorem inv_right : Commute a b → Commute a b⁻¹ :=\n  SemiconjBy.inv_right\n#align inv_right inv_right\n\n",
 "inv_mul_cancel_comm_assoc":
 "#print inv_mul_cancel_comm_assoc /-\n@[simp, to_additive]\ntheorem inv_mul_cancel_comm_assoc : a⁻¹ * (b * a) = b :=\n  (Commute.all a b).inv_mul_cancel_assoc\n#align inv_mul_cancel_comm_assoc inv_mul_cancel_comm_assoc\n-/\n\n",
 "inv_mul_cancel_comm":
 "#print inv_mul_cancel_comm /-\n@[simp, to_additive]\ntheorem inv_mul_cancel_comm : a⁻¹ * b * a = b :=\n  (Commute.all a b).inv_mul_cancel\n#align inv_mul_cancel_comm inv_mul_cancel_comm\n-/\n\n",
 "inv_mul_cancel_assoc":
 "@[to_additive]\ntheorem inv_mul_cancel_assoc (h : Commute a b) : a⁻¹ * (b * a) = b := by rw [← mul_assoc, h.inv_mul_cancel]\n#align inv_mul_cancel_assoc inv_mul_cancel_assoc\n\n",
 "inv_mul_cancel":
 "#print inv_mul_cancel /-\n@[to_additive]\nprotected theorem inv_mul_cancel (h : Commute a b) : a⁻¹ * b * a = b := by rw [h.inv_left.eq, inv_mul_cancel_right]\n#align inv_mul_cancel inv_mul_cancel\n-/\n\n",
 "inv_left_iff":
 "@[simp, to_additive]\ntheorem inv_left_iff : Commute a⁻¹ b ↔ Commute a b :=\n  SemiconjBy.inv_symm_left_iff\n#align inv_left_iff inv_left_iff\n\n",
 "inv_left":
 "@[to_additive]\ntheorem inv_left : Commute a b → Commute a⁻¹ b :=\n  SemiconjBy.inv_symm_left\n#align inv_left inv_left\n\n",
 "inv_inv_iff":
 "@[simp, to_additive]\ntheorem inv_inv_iff : Commute a⁻¹ b⁻¹ ↔ Commute a b :=\n  SemiconjBy.inv_inv_symm_iff\n#align inv_inv_iff inv_inv_iff\n\n",
 "inv_inv":
 "#print inv_inv /-\n@[to_additive]\ntheorem inv_inv : Commute a b → Commute a⁻¹ b⁻¹ :=\n  SemiconjBy.inv_inv_symm\n#align inv_inv inv_inv\n-/\n\n",
 "eq":
 "/-\nCopyright (c) 2019 Neil Strickland. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Neil Strickland, Yury Kudryashov\n-/\n/-- Equality behind `commute a b`; useful for rewriting. -/\n@[to_additive \"Equality behind `add_commute a b`; useful for rewriting.\"]\nprotected theorem eq {a b : S} (h : Commute a b) : a * b = b * a :=\n  h\n#align eq eq\n\n",
 "all":
 "@[to_additive]\nprotected theorem all {S : Type _} [comm_semigroup S] (a b : S) : Commute a b :=\n  mul_comm a b\n#align all all\n\n",
 "SemiconjBy":
 "#print SemiconjBy /-\n@[to_additive]\nprotected theorem SemiconjBy {a b : S} (h : Commute a b) : SemiconjBy a b b :=\n  h\n#align semiconj_by SemiconjBy\n-/\n\n"}