{"to_mul_symm_eq":
 "@[simp]\ntheorem to_mul_symm_eq : (@toMul α).symm = of_mul :=\n  rfl\n#align to_mul_symm_eq to_mul_symm_eq\n\n",
 "to_add_symm_eq":
 "@[simp]\ntheorem to_add_symm_eq : (@toAdd α).symm = of_add :=\n  rfl\n#align to_add_symm_eq to_add_symm_eq\n\n",
 "toMul_zero":
 "#print toMul_zero /-\n@[simp]\ntheorem toMul_zero [One α] : (0 : Additive α).to_mul = 1 :=\n  rfl\n#align to_mul_zero toMul_zero\n-/\n\n",
 "toMul_sub":
 "#print toMul_sub /-\n@[simp]\ntheorem toMul_sub [Div α] (x y : Additive α) : (x - y).to_mul = x.to_mul / y.to_mul :=\n  rfl\n#align to_mul_sub toMul_sub\n-/\n\n",
 "toMul_ofMul":
 "#print toMul_ofMul /-\n@[simp]\ntheorem toMul_ofMul (x : α) : (Additive.ofMul x).to_mul = x :=\n  rfl\n#align to_mul_of_mul toMul_ofMul\n-/\n\n",
 "toMul_neg":
 "#print toMul_neg /-\n@[simp]\ntheorem toMul_neg [Inv α] (x : Additive α) : (-x).to_mul = x.to_mul⁻¹ :=\n  rfl\n#align to_mul_neg toMul_neg\n-/\n\n",
 "toMul_add":
 "#print toMul_add /-\n@[simp]\ntheorem toMul_add [Mul α] (x y : Additive α) : (x + y).to_mul = x.to_mul * y.to_mul :=\n  rfl\n#align to_mul_add toMul_add\n-/\n\n",
 "toAdd_one":
 "#print toAdd_one /-\n@[simp]\ntheorem toAdd_one [Zero α] : (1 : Multiplicative α).to_add = 0 :=\n  rfl\n#align to_add_one toAdd_one\n-/\n\n",
 "toAdd_ofAdd":
 "#print toAdd_ofAdd /-\n@[simp]\ntheorem toAdd_ofAdd (x : α) : (Multiplicative.ofAdd x).to_add = x :=\n  rfl\n#align to_add_of_add toAdd_ofAdd\n-/\n\n",
 "toAdd_mul":
 "#print toAdd_mul /-\n@[simp]\ntheorem toAdd_mul [Add α] (x y : Multiplicative α) : (x * y).to_add = x.to_add + y.to_add :=\n  rfl\n#align to_add_mul toAdd_mul\n-/\n\n",
 "toAdd_inv":
 "#print toAdd_inv /-\n@[simp]\ntheorem toAdd_inv [Neg α] (x : Multiplicative α) : x⁻¹.to_add = -x.to_add :=\n  rfl\n#align to_add_inv toAdd_inv\n-/\n\n",
 "toAdd_div":
 "#print toAdd_div /-\n@[simp]\ntheorem toAdd_div [Sub α] (x y : Multiplicative α) : (x / y).to_add = x.to_add - y.to_add :=\n  rfl\n#align to_add_div toAdd_div\n-/\n\n",
 "of_mul_symm_eq":
 "/-\nCopyright (c) 2018 Mario Carneiro. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro\n-/\n@[simp]\ntheorem of_mul_symm_eq : (@ofMul α).symm = to_mul :=\n  rfl\n#align of_mul_symm_eq of_mul_symm_eq\n\n",
 "of_add_symm_eq":
 "@[simp]\ntheorem of_add_symm_eq : (@ofAdd α).symm = to_add :=\n  rfl\n#align of_add_symm_eq of_add_symm_eq\n\n",
 "ofMul_toMul":
 "#print ofMul_toMul /-\n@[simp]\ntheorem ofMul_toMul (x : Additive α) : Additive.ofMul x.to_mul = x :=\n  rfl\n#align of_mul_to_mul ofMul_toMul\n-/\n\n",
 "ofMul_one":
 "#print ofMul_one /-\n@[simp]\ntheorem ofMul_one [One α] : @Additive.ofMul α 1 = 0 :=\n  rfl\n#align of_mul_one ofMul_one\n-/\n\n",
 "ofMul_mul":
 "#print ofMul_mul /-\n@[simp]\ntheorem ofMul_mul [Mul α] (x y : α) : Additive.ofMul (x * y) = Additive.ofMul x + Additive.ofMul y :=\n  rfl\n#align of_mul_mul ofMul_mul\n-/\n\n",
 "ofMul_inv":
 "#print ofMul_inv /-\n@[simp]\ntheorem ofMul_inv [Inv α] (x : α) : Additive.ofMul x⁻¹ = -Additive.ofMul x :=\n  rfl\n#align of_mul_inv ofMul_inv\n-/\n\n",
 "ofMul_eq_zero":
 "#print ofMul_eq_zero /-\n@[simp]\ntheorem ofMul_eq_zero {A : Type _} [One A] {x : A} : Additive.ofMul x = 0 ↔ x = 1 :=\n  iff.rfl\n#align of_mul_eq_zero ofMul_eq_zero\n-/\n\n",
 "ofMul_div":
 "#print ofMul_div /-\n@[simp]\ntheorem ofMul_div [Div α] (x y : α) : Additive.ofMul (x / y) = Additive.ofMul x - Additive.ofMul y :=\n  rfl\n#align of_mul_div ofMul_div\n-/\n\n",
 "ofAdd_zero":
 "#print ofAdd_zero /-\n@[simp]\ntheorem ofAdd_zero [Zero α] : @Multiplicative.ofAdd α 0 = 1 :=\n  rfl\n#align of_add_zero ofAdd_zero\n-/\n\n",
 "ofAdd_toAdd":
 "#print ofAdd_toAdd /-\n@[simp]\ntheorem ofAdd_toAdd (x : Multiplicative α) : Multiplicative.ofAdd x.to_add = x :=\n  rfl\n#align of_add_to_add ofAdd_toAdd\n-/\n\n",
 "ofAdd_sub":
 "#print ofAdd_sub /-\n@[simp]\ntheorem ofAdd_sub [Sub α] (x y : α) : Multiplicative.ofAdd (x - y) = Multiplicative.ofAdd x / Multiplicative.ofAdd y :=\n  rfl\n#align of_add_sub ofAdd_sub\n-/\n\n",
 "ofAdd_neg":
 "#print ofAdd_neg /-\n@[simp]\ntheorem ofAdd_neg [Neg α] (x : α) : Multiplicative.ofAdd (-x) = (Multiplicative.ofAdd x)⁻¹ :=\n  rfl\n#align of_add_neg ofAdd_neg\n-/\n\n",
 "ofAdd_eq_one":
 "#print ofAdd_eq_one /-\n@[simp]\ntheorem ofAdd_eq_one {A : Type _} [Zero A] {x : A} : Multiplicative.ofAdd x = 1 ↔ x = 0 :=\n  iff.rfl\n#align of_add_eq_one ofAdd_eq_one\n-/\n\n",
 "ofAdd_add":
 "#print ofAdd_add /-\n@[simp]\ntheorem ofAdd_add [Add α] (x y : α) : Multiplicative.ofAdd (x + y) = Multiplicative.ofAdd x * Multiplicative.ofAdd y :=\n  rfl\n#align of_add_add ofAdd_add\n-/\n\n"}