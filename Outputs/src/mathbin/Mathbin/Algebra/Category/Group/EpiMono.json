{"τ_symm_apply_infinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprτ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem τ_symm_apply_infinity : (Equiv.symm (exprτ)) («expr∞») = from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩ :=\n  by rw [tau, Equiv.symm_swap, Equiv.swap_apply_right]\n#align τ_symm_apply_infinity τ_symm_apply_infinity\n\n",
 "τ_symm_apply_from_coset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprτ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem τ_symm_apply_from_coset : (Equiv.symm (exprτ)) (from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩) = «expr∞» :=\n  by rw [tau, Equiv.symm_swap, Equiv.swap_apply_left]\n#align τ_symm_apply_from_coset τ_symm_apply_from_coset\n\n",
 "τ_apply_infinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprτ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem τ_apply_infinity : (exprτ) («expr∞») = from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩ :=\n  Equiv.swap_apply_right _ _\n#align τ_apply_infinity τ_apply_infinity\n\n",
 "τ_apply_from_coset'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprτ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem τ_apply_from_coset' (x : B) (hx : x ∈ f.range) :\n    (exprτ) (from_coset ⟨left_coset x f.range.carrier, ⟨x, rfl⟩⟩) = «expr∞» :=\n  (fromCoset_eq_of_mem_range _ hx).symm ▸ τ_apply_from_coset _\n#align τ_apply_from_coset' τ_apply_from_coset'\n\n",
 "τ_apply_from_coset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprτ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem τ_apply_from_coset : (exprτ) (from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩) = «expr∞» :=\n  Equiv.swap_apply_left _ _\n#align τ_apply_from_coset τ_apply_from_coset\n\n",
 "surjective_of_epi":
 "theorem surjective_of_epi [Epi f] : function.surjective f :=\n  by\n  by_contra r\n  push_neg  at r\n  rcases r with ⟨b, hb⟩\n  exact surjective_of_epi_auxs.g_ne_h f b (fun ⟨c, hc⟩ => hb _ hc) ((cancel_epi f).1 (surjective_of_epi_auxs.comp_eq f))\n#align surjective_of_epi surjective_of_epi\n\n",
 "range_eq_top_of_epi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[to_additive]\ntheorem range_eq_top_of_epi [Epi f] : f.range = «expr⊤» :=\n  MonoidHom.range_eq_top_of_cancel fun u v h =>\n    (@cancel_epi _ _ _ _ _ f _ (show «expr ⟶ » B ⟨«expr ⧸ » B (MonoidHom.range f)⟩ from u) v).1 h\n#align range_eq_top_of_epi range_eq_top_of_epi\n\n",
 "range_eq_top_of_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[to_additive AddMonoidHom.range_eq_top_of_cancel]\ntheorem range_eq_top_of_cancel {f : «expr →* » A B}\n    (h : ∀ u v : «expr →* » B («expr ⧸ » B f.range), u.comp f = v.comp f → u = v) : f.range = «expr⊤» :=\n  by\n  specialize h 1 (QuotientGroup.mk' _) _\n  · ext1\n    simp only [one_apply, coe_comp, coe_mk', Function.comp_apply]\n    rw [show (1 : «expr ⧸ » B f.range) = (1 : B) from QuotientGroup.mk_one _, QuotientGroup.eq, inv_one, one_mul]\n    exact ⟨x, rfl⟩\n  replace h : (QuotientGroup.mk' _).ker = (1 : «expr →* » B («expr ⧸ » B f.range)).ker := by rw [h]\n  rwa [ker_one, QuotientGroup.ker_mk'] at h\n#align range_eq_top_of_cancel range_eq_top_of_cancel\n\n",
 "one_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprX' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print one_smul /-\ntheorem one_smul (x : exprX') : «expr • » (1 : B) x = x :=\n  match x with\n  | from_coset y => by\n    change from_coset _ = from_coset _\n    simp only [← subtype.val_eq_coe, one_leftCoset, Subtype.ext_iff_val]\n  | «expr∞» => rfl\n#align one_smul one_smul\n-/\n\n",
 "mul_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprX' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem mul_smul (b b' : B) (x : exprX') : «expr • » (b * b') x = «expr • » b («expr • » b' x) :=\n  match x with\n  | from_coset y => by\n    change from_coset _ = from_coset _\n    simp only [← subtype.val_eq_coe, leftCoset_assoc]\n  | «expr∞» => rfl\n#align mul_smul mul_smul\n\n",
 "mono_iff_ker_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[to_additive AddCommGroupCat.mono_iff_ker_eq_bot]\ntheorem mono_iff_ker_eq_bot : Mono f ↔ f.ker = «expr⊥» :=\n  ⟨fun h => @ker_eq_bot_of_mono f h, fun h => ConcreteCategory.mono_of_injective _ <| (MonoidHom.ker_eq_bot_iff f).1 h⟩\n#align mono_iff_ker_eq_bot mono_iff_ker_eq_bot\n\n",
 "mono_iff_injective":
 "@[to_additive AddCommGroupCat.mono_iff_injective]\ntheorem mono_iff_injective : Mono f ↔ function.injective f :=\n  iff.trans (mono_iff_ker_eq_bot f) <| MonoidHom.ker_eq_bot_iff f\n#align mono_iff_injective mono_iff_injective\n\n",
 "ker_eq_bot_of_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[to_additive AddCommGroupCat.ker_eq_bot_of_mono]\ntheorem ker_eq_bot_of_mono [Mono f] : f.ker = «expr⊥» :=\n  MonoidHom.ker_eq_bot_of_cancel fun u v =>\n    (@cancel_mono _ _ _ _ _ f _ (show «expr ⟶ » (CommGroupCat.of f.ker) A from u) _).1\n#align ker_eq_bot_of_mono ker_eq_bot_of_mono\n\n",
 "ker_eq_bot_of_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2022 Jujian Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jujian Zhang\n-/\n@[to_additive AddMonoidHom.ker_eq_bot_of_cancel]\ntheorem ker_eq_bot_of_cancel {f : «expr →* » A B} (h : ∀ u v : «expr →* » f.ker A, f.comp u = f.comp v → u = v) :\n    f.ker = «expr⊥» := by simpa using _root_.congr_arg range (h f.ker.subtype 1 (by tidy))\n#align ker_eq_bot_of_cancel ker_eq_bot_of_cancel\n\n",
 "h_apply_infinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem h_apply_infinity (x : B) (hx : x ∈ f.range) : ((exprh) x) («expr∞») = «expr∞» :=\n  by\n  simp only [H, MonoidHom.coe_mk, Equiv.toFun_as_coe, Equiv.coe_trans, Function.comp_apply]\n  rw [τ_symm_apply_infinity, g_apply_from_coset]\n  simpa only [← subtype.val_eq_coe] using τ_apply_from_coset' f x hx\n#align h_apply_infinity h_apply_infinity\n\n",
 "h_apply_from_coset_nin_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprX' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\ntheorem h_apply_from_coset_nin_range (x : B) (hx : x ∈ f.range) (b : B) (hb : b ∉ f.range) :\n    ((exprh) x) (from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩) =\n      from_coset ⟨left_coset (x * b) f.range.carrier, ⟨x * b, rfl⟩⟩ :=\n  by\n  simp only [H, tau, MonoidHom.coe_mk, Equiv.toFun_as_coe, Equiv.coe_trans, Function.comp_apply]\n  rw [Equiv.symm_swap,\n    @Equiv.swap_apply_of_ne_of_ne (exprX') _ (from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩) («expr∞»)\n      (from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩) (from_coset_ne_of_nin_range _ hb) (by simp)]\n  simp only [g_apply_from_coset, ← subtype.val_eq_coe, leftCoset_assoc]\n  refine' Equiv.swap_apply_of_ne_of_ne (from_coset_ne_of_nin_range _ fun r => hb _) (by simp)\n  convert Subgroup.mul_mem _ (Subgroup.inv_mem _ hx) r\n  rw [← mul_assoc, mul_left_inv, one_mul]\n#align h_apply_from_coset_nin_range h_apply_from_coset_nin_range\n\n",
 "h_apply_from_coset'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\ntheorem h_apply_from_coset' (x : B) (b : B) (hb : b ∈ f.range) :\n    ((exprh) x) (from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩) =\n      from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩ :=\n  (fromCoset_eq_of_mem_range _ hb).symm ▸ h_apply_from_coset f x\n#align h_apply_from_coset' h_apply_from_coset'\n\n",
 "h_apply_from_coset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\ntheorem h_apply_from_coset (x : B) :\n    ((exprh) x) (from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩) =\n      from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩ :=\n  by simp [H, τ_symm_apply_from_coset, g_apply_infinity, τ_apply_infinity]\n#align h_apply_from_coset h_apply_from_coset\n\n",
 "g_ne_h":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\ntheorem g_ne_h (x : B) (hx : x ∉ f.range) : exprg ≠ exprh :=\n  by\n  intro r\n  replace r := FunLike.congr_fun (FunLike.congr_fun r x) (from_coset ⟨f.range, ⟨1, one_leftCoset _⟩⟩)\n  rw [H, g_apply_from_coset, MonoidHom.coe_mk, tau] at r\n  simp only [MonoidHom.coe_range, Subtype.coe_mk, Equiv.symm_swap, Equiv.toFun_as_coe, Equiv.coe_trans,\n    Function.comp_apply] at r\n  erw [Equiv.swap_apply_left, g_apply_infinity, Equiv.swap_apply_right] at r\n  exact from_coset_ne_of_nin_range _ hx r\n#align g_ne_h g_ne_h\n\n",
 "g_apply_infinity":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∞» -/\ntheorem g_apply_infinity (x : B) : ((exprg) x) («expr∞») = «expr∞» :=\n  rfl\n#align g_apply_infinity g_apply_infinity\n\n",
 "g_apply_from_coset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprX -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\ntheorem g_apply_from_coset (x : B) (y : exprX) : ((exprg) x) (from_coset y) = from_coset ⟨left_coset x y, by tidy⟩ :=\n  rfl\n#align g_apply_from_coset g_apply_from_coset\n\n",
 "from_coset_ne_of_nin_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\ntheorem from_coset_ne_of_nin_range {b : B} (hb : b ∉ f.range) :\n    from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩ ≠ from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩ :=\n  by\n  intro r\n  simp only [Subtype.mk_eq_mk] at r\n  change left_coset b f.range = f.range at r\n  nth_rw 2 [show (f.range : Set B) = left_coset 1 f.range from (one_leftCoset _).symm] at r\n  rw [leftCoset_eq_iff, mul_one] at r\n  exact hb (inv_inv b ▸ Subgroup.inv_mem _ r)\n#align from_coset_ne_of_nin_range from_coset_ne_of_nin_range\n\n",
 "from_coset_eq_of_mem_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\ntheorem from_coset_eq_of_mem_range {b : B} (hb : b ∈ f.range) :\n    from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩ = from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩ :=\n  by\n  congr\n  change left_coset b f.range = f.range\n  nth_rw 2 [show (f.range : Set B) = left_coset 1 f.range from (one_leftCoset _).symm]\n  rw [leftCoset_eq_iff, mul_one]\n  exact Subgroup.inv_mem _ hb\n#align from_coset_eq_of_mem_range from_coset_eq_of_mem_range\n\n",
 "epi_iff_surjective":
 "@[to_additive]\ntheorem epi_iff_surjective : Epi f ↔ function.surjective f := by\n  rw [epi_iff_range_eq_top, MonoidHom.range_top_iff_surjective]\n#align epi_iff_surjective epi_iff_surjective\n\n",
 "epi_iff_range_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[to_additive]\ntheorem epi_iff_range_eq_top : Epi f ↔ f.range = «expr⊤» :=\n  ⟨fun hf => range_eq_top_of_epi _, fun hf =>\n    ConcreteCategory.epi_of_surjective _ <| MonoidHom.range_top_iff_surjective.mp hf⟩\n#align epi_iff_range_eq_top epi_iff_range_eq_top\n\n",
 "comp_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprSX' -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\ntheorem comp_eq : «expr ≫ » f (show «expr ⟶ » B (GroupCat.of (exprSX')) from exprg) = «expr ≫ » f (exprh) :=\n  FunLike.ext _ _ fun a => by\n    simp only [comp_apply, show (exprh) (f a) = _ from (by simp [← agree] : f a ∈ { b | (exprh) b = (exprg) b })]\n#align comp_eq comp_eq\n\n",
 "agree":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `left_coset -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprh -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprg -/\ntheorem agree : f.range.carrier = { x | (exprh) x = (exprg) x } :=\n  by\n  refine' Set.ext fun b => ⟨_, fun hb : (exprh) b = (exprg) b => by_contradiction fun r => _⟩\n  · rintro ⟨a, rfl⟩\n    change (exprh) (f a) = (exprg) (f a)\n    ext ⟨⟨_, ⟨y, rfl⟩⟩⟩\n    · rw [g_apply_from_coset]\n      by_cases m : y ∈ f.range\n      · rw [h_apply_from_coset' _ _ _ m, from_coset_eq_of_mem_range _ m]\n        change from_coset _ = from_coset ⟨left_coset (f a) (left_coset y _), _⟩\n        simpa only [← from_coset_eq_of_mem_range _ (Subgroup.mul_mem _ ⟨a, rfl⟩ m), leftCoset_assoc]\n      · rw [h_apply_from_coset_nin_range _ _ ⟨_, rfl⟩ _ m]\n        simpa only [← subtype.val_eq_coe, leftCoset_assoc]\n    · rw [g_apply_infinity, h_apply_infinity _ _ ⟨_, rfl⟩]\n  · have eq1 :\n      ((exprh) b) (from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩) =\n        from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩ :=\n      by simp [H, tau, g_apply_infinity]\n    have eq2 :\n      ((exprg) b) (from_coset ⟨f.range.carrier, ⟨1, one_leftCoset _⟩⟩) =\n        from_coset ⟨left_coset b f.range.carrier, ⟨b, rfl⟩⟩ :=\n      rfl\n    exact (from_coset_ne_of_nin_range _ r).symm (by rw [← eq1, ← eq2, FunLike.congr_fun hb])\n#align agree agree\n\n"}