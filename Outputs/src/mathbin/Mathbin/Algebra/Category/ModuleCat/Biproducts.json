{"biproduct_iso_pi_inv_comp_π":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp, elementwise]\ntheorem biproduct_iso_pi_inv_comp_π [fintype J] (f : J → Module.{v} R) (j : J) :\n    «expr ≫ » (biproduct_iso_pi f).inv (biproduct.π f j) = (linear_map.proj j : «expr →ₗ[ ] » (∀ j, f j) R (f j)) :=\n  is_limit.cone_point_unique_up_to_iso_inv_comp _ _ (discrete.mk j)\n#align biproduct_iso_pi_inv_comp_π biproduct_iso_pi_inv_comp_π\n\n",
 "biprod_iso_prod_inv_comp_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, elementwise]\ntheorem biprod_iso_prod_inv_comp_snd (M N : Module.{v} R) :\n    «expr ≫ » (biprod_iso_prod M N).inv biprod.snd = linear_map.snd R M N :=\n  is_limit.cone_point_unique_up_to_iso_inv_comp _ _ (discrete.mk walking_pair.right)\n#align biprod_iso_prod_inv_comp_snd biprod_iso_prod_inv_comp_snd\n\n",
 "biprod_iso_prod_inv_comp_fst":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, elementwise]\ntheorem biprod_iso_prod_inv_comp_fst (M N : Module.{v} R) :\n    «expr ≫ » (biprod_iso_prod M N).inv biprod.fst = linear_map.fst R M N :=\n  is_limit.cone_point_unique_up_to_iso_inv_comp _ _ (discrete.mk walking_pair.left)\n#align biprod_iso_prod_inv_comp_fst biprod_iso_prod_inv_comp_fst\n\n",
 "binary_product_limit_cone_cone_π_app_right":
 "@[simp]\ntheorem binary_product_limit_cone_cone_π_app_right (M N : Module.{v} R) :\n    (binary_product_limit_cone M N).cone.π.app ⟨walking_pair.right⟩ = linear_map.snd R M N :=\n  rfl\n#align binary_product_limit_cone_cone_π_app_right binary_product_limit_cone_cone_π_app_right\n\n",
 "binary_product_limit_cone_cone_π_app_left":
 "/-\nCopyright (c) 2022 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- As `Module R` is preadditive, and has all limits, it automatically has biproducts.\n-- We now construct explicit limit data,\n-- so we can compare the biproducts to the usual unbundled constructions.\n@[simp]\ntheorem binary_product_limit_cone_cone_π_app_left (M N : Module.{v} R) :\n    (binary_product_limit_cone M N).cone.π.app ⟨walking_pair.left⟩ = linear_map.fst R M N :=\n  rfl\n#align binary_product_limit_cone_cone_π_app_left binary_product_limit_cone_cone_π_app_left\n\n"}