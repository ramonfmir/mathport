{"quot_zero":
 "/-\nCopyright (c) 2019 Scott Morrison. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Scott Morrison\n-/\n-- [ROBOT VOICE]:\n-- You should pretend for now that this file was automatically generated.\n-- It follows the same template as colimits in Mon.\n-- There's always `of`\n-- Then one generator for each operation\n-- Make it an equivalence relation:\n-- There's always a `map` relation\n-- Then one relation per operation, describing the interaction with `of`\n-- Then one relation per argument of each operation\n-- And one relation per axiom\n@[simp]\ntheorem quot_zero : Quot.mk Setoid.r zero = (0 : colimit_type F) :=\n  rfl\n#align quot_zero quot_zero\n\n",
 "quot_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem quot_smul (s x) : Quot.mk Setoid.r (smul s x) = («expr • » s (Quot.mk Setoid.r x) : colimit_type F) :=\n  rfl\n#align quot_smul quot_smul\n\n",
 "quot_neg":
 "@[simp]\ntheorem quot_neg (x) : Quot.mk Setoid.r (neg x) = (-Quot.mk Setoid.r x : colimit_type F) :=\n  rfl\n#align quot_neg quot_neg\n\n",
 "quot_add":
 "@[simp]\ntheorem quot_add (x y) : Quot.mk Setoid.r (add x y) = (Quot.mk Setoid.r x + Quot.mk Setoid.r y : colimit_type F) :=\n  rfl\n#align quot_add quot_add\n\n",
 "cocone_naturality_components":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n@[simp]\ntheorem cocone_naturality_components (j j' : J) (f : «expr ⟶ » j j') (x : F.obj j) :\n    (cocone_morphism F j') (F.map f x) = (cocone_morphism F j) x :=\n  by\n  rw [← cocone_naturality F f]\n  rfl\n#align cocone_naturality_components cocone_naturality_components\n\n",
 "cocone_naturality":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp]\ntheorem cocone_naturality {j j' : J} (f : «expr ⟶ » j j') :\n    «expr ≫ » (F.map f) (cocone_morphism F j') = cocone_morphism F j :=\n  by\n  ext\n  apply quot.sound\n  apply relation.map\n#align cocone_naturality cocone_naturality\n\n"}