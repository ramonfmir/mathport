{"range_mkq_cokernel_iso_range_quotient_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom_left -/\n@[simp, elementwise]\ntheorem range_mkq_cokernel_iso_range_quotient_inv :\n    «expr ≫ » (Module.as_hom_left f.range.mkq) (cokernel_iso_range_quotient f).inv = cokernel.π f := by\n  convert colimit.iso_colimit_cocone_ι_inv ⟨_, cokernel_is_colimit f⟩ _ <;> rfl\n#align range_mkq_cokernel_iso_range_quotient_inv range_mkq_cokernel_iso_range_quotient_inv\n\n",
 "kernel_iso_ker_inv_kernel_ι":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- We now show this isomorphism commutes with the inclusion of the kernel into the source.\n@[simp, elementwise]\ntheorem kernel_iso_ker_inv_kernel_ι : «expr ≫ » (kernel_iso_ker f).inv (kernel.ι f) = f.ker.subtype :=\n  limit.iso_limit_cone_inv_π _ _\n#align kernel_iso_ker_inv_kernel_ι kernel_iso_ker_inv_kernel_ι\n\n",
 "kernel_iso_ker_hom_ker_subtype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n@[simp, elementwise]\ntheorem kernel_iso_ker_hom_ker_subtype : «expr ≫ » (kernel_iso_ker f).hom f.ker.subtype = kernel.ι f :=\n  is_limit.cone_point_unique_up_to_iso_inv_comp _ (limit.is_limit _) walking_parallel_pair.zero\n#align kernel_iso_ker_hom_ker_subtype kernel_iso_ker_hom_ker_subtype\n\n",
 "has_kernels_Module":
 "/-\nCopyright (c) 2020 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel\n-/\n/-- The category of R-modules has kernels, given by the inclusion of the kernel submodule. -/\ntheorem has_kernels_Module : has_kernels (Module R) :=\n  ⟨fun X Y f => has_limit.mk ⟨_, kernel_is_limit f⟩⟩\n#align has_kernels_Module has_kernels_Module\n\n",
 "has_cokernels_Module":
 "/-- The category or R-modules has cokernels, given by the projection onto the quotient. -/\ntheorem has_cokernels_Module : has_cokernels (Module R) :=\n  ⟨fun X Y f => has_colimit.mk ⟨_, cokernel_is_colimit f⟩⟩\n#align has_cokernels_Module has_cokernels_Module\n\n",
 "cokernel_π_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\ntheorem cokernel_π_ext {M N : Module.{u} R} (f : «expr ⟶ » M N) {x y : N} (m : M) (w : x = y + f m) :\n    cokernel.π f x = cokernel.π f y := by\n  subst w\n  simp\n#align cokernel_π_ext cokernel_π_ext\n\n",
 "cokernel_π_cokernel_iso_range_quotient_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n-- We now show this isomorphism commutes with the projection of target to the cokernel.\n@[simp, elementwise]\ntheorem cokernel_π_cokernel_iso_range_quotient_hom :\n    «expr ≫ » (cokernel.π f) (cokernel_iso_range_quotient f).hom = f.range.mkq := by\n  convert colimit.iso_colimit_cocone_ι_hom _ _ <;> rfl\n#align cokernel_π_cokernel_iso_range_quotient_hom cokernel_π_cokernel_iso_range_quotient_hom\n\n"}