{"projective_of_free":
 "-- We transport the corresponding result from `module.projective`.\n/-- Modules that have a basis are projective. -/\ntheorem projective_of_free {ι : Type _} (b : Basis ι R M) : Projective M :=\n  Projective.of_iso (ModuleCat.ofSelfIso _) (is_projective.iff_projective.mp (Module.Projective.of_basis b))\n#align projective_of_free projective_of_free\n\n",
 "iff_projective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `Module.as_hom -/\n/-\nCopyright (c) 2020 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel, Scott Morrison\n-/\n/-- The categorical notion of projective object agrees with the explicit module-theoretic notion. -/\ntheorem is_projective.iff_projective {R : Type u} [Ring R] {P : Type max u v} [AddCommGroup P] [Module R P] :\n    Module.Projective R P ↔ Projective (ModuleCat.of R P) :=\n  by\n  refine' ⟨fun h => _, fun h => _⟩\n  · letI : Module.Projective R («expr↥ » (ModuleCat.of R P)) := h\n    exact ⟨fun E X f e epi => Module.projective_lifting_property _ _ ((ModuleCat.epi_iff_surjective _).mp epi)⟩\n  · refine' Module.Projective.of_lifting_property _\n    intro E X mE mX sE sX f g s\n    haveI : epi (Module.as_hom f) := (ModuleCat.epi_iff_surjective (Module.as_hom f)).mpr s\n    letI : projective (ModuleCat.of R P) := h\n    exact\n      ⟨projective.factor_thru (Module.as_hom g) (Module.as_hom f),\n        projective.factor_thru_comp (Module.as_hom g) (Module.as_hom f)⟩\n#align is_projective.iff_projective is_projective.iff_projective\n\n"}