{"to_kernel_subobject_arrow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2021 Markus Himmel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Markus Himmel\n-/\n@[simp]\ntheorem to_kernel_subobject_arrow {M N : ModuleCat R} {f : «expr ⟶ » M N} (x : LinearMap.ker f) :\n    (kernelSubobject f).arrow (to_kernel_subobject x) = x.1 := by simp [to_kernel_subobject]\n#align to_kernel_subobject_arrow to_kernel_subobject_arrow\n\n",
 "cokernel_π_image_subobject_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-- An extensionality lemma showing that two elements of a cokernel by an image\nare equal if they differ by an element of the image.\n\nThe application is for homology:\ntwo elements in homology are equal if they differ by a boundary.\n-/\n@[ext]\ntheorem cokernel_π_image_subobject_ext {L M N : ModuleCat.{v} R} (f : «expr ⟶ » L M) [HasImage f]\n    (g : «expr ⟶ » (imageSubobject f : ModuleCat.{v} R) N) [HasCokernel g] {x y : N} (l : L)\n    (w : x = y + g (factorThruImageSubobject f l)) : cokernel.π g x = cokernel.π g y :=\n  by\n  subst w\n  simp\n#align cokernel_π_image_subobject_ext cokernel_π_image_subobject_ext\n\n"}