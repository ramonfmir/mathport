{"smul_tmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ , ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ , ] » -/\n@[simp]\nprotected theorem smul_tmul {M : ModuleCat.{v} R} (s s' : S) (m : M) :\n    «expr • » s («expr ⊗ₜ[ , ] » s' R f m : (extend_scalars f).obj M) = «expr ⊗ₜ[ , ] » (s * s') R f m :=\n  rfl\n#align smul_tmul smul_tmul\n\n",
 "smul_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem restrict_scalars.smul_def' {R : Type u₁} {S : Type u₂} [Ring R] [Ring S] (f : «expr →+* » R S)\n    {M : ModuleCat.{v} S} (r : R) (m : M) : («expr • » r m : (restrict_scalars f).obj M) = («expr • » (f r) m : M) :=\n  rfl\n#align restrict_scalars.smul_def' restrict_scalars.smul_def'\n\n",
 "smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print RestrictScalars.smul_def /-\n@[simp]\ntheorem RestrictScalars.smul_def {R : Type u₁} {S : Type u₂} [Ring R] [Ring S] (f : «expr →+* » R S)\n    {M : ModuleCat.{v} S} (r : R) (m : (restrict_scalars f).obj M) : «expr • » r m = («expr • » (f r) m : M) :=\n  rfl\n#align restrict_scalars.smul_def RestrictScalars.smul_def\n-/\n\n",
 "map_tmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ , ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ , ] » -/\n@[simp]\ntheorem map_tmul {M M' : ModuleCat.{v} R} (g : «expr ⟶ » M M') (s : S) (m : M) :\n    (extend_scalars f).map g («expr ⊗ₜ[ , ] » s R f m) = «expr ⊗ₜ[ , ] » s R f (g m) :=\n  rfl\n#align map_tmul map_tmul\n\n",
 "map_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/-\nCopyright (c) 2022 Jujian Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jujian Zhang\n-/\n@[simp]\ntheorem restrict_scalars.map_apply {R : Type u₁} {S : Type u₂} [Ring R] [Ring S] (f : «expr →+* » R S)\n    {M M' : ModuleCat.{v} S} (g : «expr ⟶ » M M') (x) : (restrict_scalars f).map g x = g x :=\n  rfl\n#align restrict_scalars.map_apply restrict_scalars.map_apply\n\n",
 "map'_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr𝟙» -/\n-- This notation is necessary because we need to reason about `s ⊗ₜ m` where `s : S` and `m : M`;\n-- without this notation, one need to work with `s : (restrict_scalars f).obj ⟨S⟩`.\n-- The \"by apply\" part makes this require 75% fewer heartbeats to process (#16371).\ntheorem map'_id {M : ModuleCat.{v} R} : map' f ((«expr𝟙») M) = («expr𝟙») _ :=\n  LinearMap.ext fun x : obj' f M => by\n    dsimp only [map', ModuleCat.id_apply]\n    induction' x using TensorProduct.induction_on with _ _ m s ihx ihy\n    · simp only [map_zero]\n    · rw [linear_map.base_change_tmul, ModuleCat.id_apply]\n    · rw [map_add, ihx, ihy]\n#align map'_id map'_id\n\n",
 "map'_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⟶ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≫ » -/\ntheorem map'_comp {M₁ M₂ M₃ : ModuleCat.{v} R} (l₁₂ : «expr ⟶ » M₁ M₂) (l₂₃ : «expr ⟶ » M₂ M₃) :\n    map' f («expr ≫ » l₁₂ l₂₃) = «expr ≫ » (map' f l₁₂) (map' f l₂₃) :=\n  LinearMap.ext fun x : obj' f M₁ => by\n    dsimp only [map']\n    induction' x using TensorProduct.induction_on with _ _ x y ihx ihy\n    · rfl\n    · rfl\n    · simp only [map_add, ihx, ihy]\n#align map'_comp map'_comp\n\n"}