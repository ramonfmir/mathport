{"to_units_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\ntheorem to_units_injective : function.injective (toUnits : unitary R → «expr ˣ» R) := fun x y h =>\n  subtype.ext <| Units.ext_iff.mp h\n#align to_units_injective to_units_injective\n\n",
 "star_mul_self_of_mem":
 "@[simp]\ntheorem star_mul_self_of_mem {U : R} (hU : U ∈ unitary R) : star U * U = 1 :=\n  hU.1\n#align star_mul_self_of_mem star_mul_self_of_mem\n\n",
 "star_mul_self":
 "@[simp]\ntheorem star_mul_self (U : unitary R) : star U * U = 1 :=\n  subtype.ext <| coe_star_mul_self U\n#align star_mul_self star_mul_self\n\n",
 "star_mem_iff":
 "@[simp]\ntheorem star_mem_iff {U : R} : star U ∈ unitary R ↔ U ∈ unitary R :=\n  ⟨fun h => star_star U ▸ star_mem h, star_mem⟩\n#align star_mem_iff star_mem_iff\n\n",
 "star_mem":
 "theorem star_mem {U : R} (hU : U ∈ unitary R) : star U ∈ unitary R :=\n  ⟨by rw [star_star, mul_star_self_of_mem hU], by rw [star_star, star_mul_self_of_mem hU]⟩\n#align star_mem star_mem\n\n",
 "star_eq_inv'":
 "theorem star_eq_inv' : (star : unitary R → unitary R) = has_inv.inv :=\n  rfl\n#align star_eq_inv' star_eq_inv'\n\n",
 "star_eq_inv":
 "theorem star_eq_inv (U : unitary R) : star U = U⁻¹ :=\n  rfl\n#align star_eq_inv star_eq_inv\n\n",
 "mul_star_self_of_mem":
 "@[simp]\ntheorem mul_star_self_of_mem {U : R} (hU : U ∈ unitary R) : U * star U = 1 :=\n  hU.2\n#align mul_star_self_of_mem mul_star_self_of_mem\n\n",
 "mul_star_self":
 "@[simp]\ntheorem mul_star_self (U : unitary R) : U * star U = 1 :=\n  subtype.ext <| coe_mul_star_self U\n#align mul_star_self mul_star_self\n\n",
 "mem_iff_star_mul_self":
 "theorem mem_iff_star_mul_self {U : R} : U ∈ unitary R ↔ star U * U = 1 :=\n  mem_iff.trans <| and_iff_left_of_imp fun h => mul_comm (star U) U ▸ h\n#align mem_iff_star_mul_self mem_iff_star_mul_self\n\n",
 "mem_iff_self_mul_star":
 "theorem mem_iff_self_mul_star {U : R} : U ∈ unitary R ↔ U * star U = 1 :=\n  mem_iff.trans <| and_iff_right_of_imp fun h => mul_comm U (star U) ▸ h\n#align mem_iff_self_mul_star mem_iff_self_mul_star\n\n",
 "mem_iff":
 "/-\nCopyright (c) 2022 Frédéric Dupuis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Shing Tak Lam, Frédéric Dupuis\n-/\ntheorem mem_iff {U : R} : U ∈ unitary R ↔ star U * U = 1 ∧ U * star U = 1 :=\n  iff.rfl\n#align mem_iff mem_iff\n\n",
 "coe_zpow":
 "@[norm_cast]\ntheorem coe_zpow (U : unitary R) (z : ℤ) : ↑(U ^ z) = (U ^ z : R) :=\n  by\n  induction z\n  · simp [SubmonoidClass.coe_pow]\n  · simp [coe_inv]\n#align coe_zpow coe_zpow\n\n",
 "coe_star_mul_self":
 "theorem coe_star_mul_self (U : unitary R) : (star U : R) * U = 1 :=\n  star_mul_self_of_mem U.prop\n#align coe_star_mul_self coe_star_mul_self\n\n",
 "coe_star":
 "@[simp, norm_cast]\ntheorem coe_star {U : unitary R} : ↑(star U) = (star U : R) :=\n  rfl\n#align coe_star coe_star\n\n",
 "coe_neg":
 "@[norm_cast]\ntheorem coe_neg (U : unitary R) : ↑(-U) = (-U : R) :=\n  rfl\n#align coe_neg coe_neg\n\n",
 "coe_mul_star_self":
 "theorem coe_mul_star_self (U : unitary R) : (U : R) * star U = 1 :=\n  mul_star_self_of_mem U.prop\n#align coe_mul_star_self coe_mul_star_self\n\n",
 "coe_inv":
 "@[norm_cast]\ntheorem coe_inv (U : unitary R) : ↑U⁻¹ = (U⁻¹ : R) :=\n  eq_inv_of_mul_eq_one_right <| coe_mul_star_self _\n#align coe_inv coe_inv\n\n",
 "coe_div":
 "@[norm_cast]\ntheorem coe_div (U₁ U₂ : unitary R) : ↑(U₁ / U₂) = (U₁ / U₂ : R) := by\n  simp only [div_eq_mul_inv, coe_inv, Submonoid.coe_mul]\n#align coe_div coe_div\n\n"}