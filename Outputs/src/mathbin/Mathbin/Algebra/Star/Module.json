{"star_rat_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem star_rat_smul {R : Type _} [add_comm_group R] [StarAddMonoid R] [Module (exprℚ) R] (x : R) (n : exprℚ) :\n    star («expr • » n x) = «expr • » n (star x) :=\n  map_rat_smul (starAddEquiv : «expr ≃+ » R R) _ _\n#align star_rat_smul star_rat_smul\n\n",
 "star_rat_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem star_rat_cast_smul [DivisionRing R] [add_comm_group M] [Module R M] [StarAddMonoid M] (n : exprℚ) (x : M) :\n    star («expr • » (n : R) x) = «expr • » (n : R) (star x) :=\n  map_rat_cast_smul (starAddEquiv : «expr ≃+ » M M) _ _ _ x\n#align star_rat_cast_smul star_rat_cast_smul\n\n",
 "star_nat_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem star_nat_cast_smul [Semiring R] [add_comm_monoid M] [Module R M] [StarAddMonoid M] (n : ℕ) (x : M) :\n    star («expr • » (n : R) x) = «expr • » (n : R) (star x) :=\n  map_nat_cast_smul (starAddEquiv : «expr ≃+ » M M) R R n x\n#align star_nat_cast_smul star_nat_cast_smul\n\n",
 "star_inv_nat_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem star_inv_nat_cast_smul [DivisionRing R] [add_comm_group M] [Module R M] [StarAddMonoid M] (n : ℕ) (x : M) :\n    star («expr • » (n⁻¹ : R) x) = «expr • » (n⁻¹ : R) (star x) :=\n  map_inv_nat_cast_smul (starAddEquiv : «expr ≃+ » M M) R R n x\n#align star_inv_nat_cast_smul star_inv_nat_cast_smul\n\n",
 "star_inv_int_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem star_inv_int_cast_smul [DivisionRing R] [add_comm_group M] [Module R M] [StarAddMonoid M] (n : ℤ) (x : M) :\n    star («expr • » (n⁻¹ : R) x) = «expr • » (n⁻¹ : R) (star x) :=\n  map_inv_int_cast_smul (starAddEquiv : «expr ≃+ » M M) R R n x\n#align star_inv_int_cast_smul star_inv_int_cast_smul\n\n",
 "star_int_cast_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser, Frédéric Dupuis\n-/\n@[simp]\ntheorem star_int_cast_smul [Ring R] [add_comm_group M] [Module R M] [StarAddMonoid M] (n : ℤ) (x : M) :\n    star («expr • » (n : R) x) = «expr • » (n : R) (star x) :=\n  map_int_cast_smul (starAddEquiv : «expr ≃+ » M M) R R n x\n#align star_int_cast_smul star_int_cast_smul\n\n",
 "self_adjoint_part_add_skew_adjoint_part":
 "theorem star_module.self_adjoint_part_add_skew_adjoint_part (x : A) :\n    (self_adjoint_part R x : A) + skew_adjoint_part R x = x := by\n  simp only [smul_sub, self_adjoint_part_apply_coe, smul_add, skew_adjoint_part_apply_coe, add_add_sub_cancel,\n    inv_of_two_smul_add_inv_of_two_smul]\n#align star_module.self_adjoint_part_add_skew_adjoint_part star_module.self_adjoint_part_add_skew_adjoint_part\n\n",
 "algebra_map_star_comm":
 "@[simp]\ntheorem algebra_map_star_comm {R A : Type _} [CommSemiring R] [StarRing R] [Semiring A] [StarSemigroup A] [algebra R A]\n    [StarModule R A] (r : R) : algebra_map R A (star r) = star (algebra_map R A r) := by\n  simp only [algebra.algebra_map_eq_smul_one, star_smul, star_one]\n#align algebra_map_star_comm algebra_map_star_comm\n\n"}