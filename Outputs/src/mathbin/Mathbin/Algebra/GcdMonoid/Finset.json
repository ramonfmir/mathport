{"normalize_lcm":
 "#print normalize_lcm /-\n@[simp]\ntheorem normalize_lcm : normalize (s.lcm f) = s.lcm f := by simp [lcm_def]\n#align normalize_lcm normalize_lcm\n-/\n\n",
 "normalize_gcd":
 "#print normalize_gcd /-\n@[simp]\ntheorem normalize_gcd : normalize (s.gcd f) = s.gcd f := by simp [gcd_def]\n#align normalize_gcd normalize_gcd\n-/\n\n",
 "lcm_union":
 "theorem lcm_union [decidable_eq β] : (s₁ ∪ s₂).lcm f = gcd_monoid.lcm (s₁.lcm f) (s₂.lcm f) :=\n  Finset.induction_on s₁ (by rw [empty_union, lcm_empty, lcm_one_left, normalize_lcm]) fun a s has ih => by\n    rw [insert_union, lcm_insert, lcm_insert, ih, lcm_assoc]\n#align lcm_union lcm_union\n\n",
 "lcm_singleton":
 "@[simp]\ntheorem lcm_singleton {b : β} : ({b} : Finset β).lcm f = normalize (f b) :=\n  multiset.lcm_singleton\n#align lcm_singleton lcm_singleton\n\n",
 "lcm_mono_fun":
 "theorem lcm_mono_fun {g : β → α} (h : ∀ b ∈ s, f b ∣ g b) : s.lcm f ∣ s.lcm g :=\n  lcm_dvd fun b hb => (h b hb).trans (dvd_lcm hb)\n#align lcm_mono_fun lcm_mono_fun\n\n",
 "lcm_mono":
 "theorem lcm_mono (h : s₁ ⊆ s₂) : s₁.lcm f ∣ s₂.lcm f :=\n  lcm_dvd fun b hb => dvd_lcm (h hb)\n#align lcm_mono lcm_mono\n\n",
 "lcm_insert":
 "@[simp]\ntheorem lcm_insert [decidable_eq β] {b : β} : (insert b s : Finset β).lcm f = gcd_monoid.lcm (f b) (s.lcm f) :=\n  by\n  by_cases h : b ∈ s\n  · rw [insert_eq_of_mem h, (lcm_eq_right_iff (f b) (s.lcm f) (multiset.normalize_lcm (s.1.map f))).2 (dvd_lcm h)]\n  apply fold_insert h\n#align lcm_insert lcm_insert\n\n",
 "lcm_image":
 "theorem lcm_image [decidable_eq β] {g : γ → β} (s : Finset γ) : (s.image g).lcm f = s.lcm (f ∘ g) := by\n  classical induction' s using Finset.induction with c s hc ih <;> simp [*]\n#align lcm_image lcm_image\n\n",
 "lcm_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print lcm_eq_zero_iff /-\ntheorem lcm_eq_zero_iff [nontrivial α] : s.lcm f = 0 ↔ 0 ∈ «expr '' » f s := by\n  simp only [Multiset.mem_map, lcm_def, multiset.lcm_eq_zero_iff, Set.mem_image, mem_coe, ← Finset.mem_def]\n#align lcm_eq_zero_iff lcm_eq_zero_iff\n-/\n\n",
 "lcm_eq_lcm_image":
 "theorem lcm_eq_lcm_image [decidable_eq α] : s.lcm f = (s.image f).lcm id :=\n  eq.symm <| lcm_image _\n#align lcm_eq_lcm_image lcm_eq_lcm_image\n\n",
 "lcm_empty":
 "@[simp]\ntheorem lcm_empty : (∅ : Finset β).lcm f = 1 :=\n  fold_empty\n#align lcm_empty lcm_empty\n\n",
 "lcm_dvd_iff":
 "#print lcm_dvd_iff /-\n@[simp]\ntheorem lcm_dvd_iff {a : α} : s.lcm f ∣ a ↔ ∀ b ∈ s, f b ∣ a :=\n  by\n  apply iff.trans multiset.lcm_dvd\n  simp only [Multiset.mem_map, and_imp, exists_imp]\n  exact ⟨fun k b hb => k _ _ hb rfl, fun k a' b hb h => h ▸ k _ hb⟩\n#align lcm_dvd_iff lcm_dvd_iff\n-/\n\n",
 "lcm_dvd":
 "#print lcm_dvd /-\ntheorem lcm_dvd {a : α} : (∀ b ∈ s, f b ∣ a) → s.lcm f ∣ a :=\n  lcm_dvd_iff.2\n#align lcm_dvd lcm_dvd\n-/\n\n",
 "lcm_def":
 "/-\nCopyright (c) 2020 Aaron Anderson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson\n-/\ntheorem lcm_def : s.lcm f = (s.1.map f).lcm :=\n  rfl\n#align lcm_def lcm_def\n\n",
 "lcm_congr":
 "theorem lcm_congr {f g : β → α} (hs : s₁ = s₂) (hfg : ∀ a ∈ s₂, f a = g a) : s₁.lcm f = s₂.lcm g :=\n  by\n  subst hs\n  exact finset.fold_congr hfg\n#align lcm_congr lcm_congr\n\n",
 "gcd_union":
 "theorem gcd_union [decidable_eq β] : (s₁ ∪ s₂).gcd f = gcd_monoid.gcd (s₁.gcd f) (s₂.gcd f) :=\n  Finset.induction_on s₁ (by rw [empty_union, gcd_empty, gcd_zero_left, normalize_gcd]) fun a s has ih => by\n    rw [insert_union, gcd_insert, gcd_insert, ih, gcd_assoc]\n#align gcd_union gcd_union\n\n",
 "gcd_singleton":
 "@[simp]\ntheorem gcd_singleton {b : β} : ({b} : Finset β).gcd f = normalize (f b) :=\n  multiset.gcd_singleton\n#align gcd_singleton gcd_singleton\n\n",
 "gcd_mul_right":
 "#print gcd_mul_right /-\ntheorem gcd_mul_right {a : α} : (s.gcd fun x => f x * a) = s.gcd f * normalize a := by\n  classical\n    apply s.induction_on\n    · simp\n    intro b t hbt h\n    rw [gcd_insert, gcd_insert, h, ← gcd_mul_right]\n    apply ((normalize_associated a).mul_left _).gcd_eq_right\n#align gcd_mul_right gcd_mul_right\n-/\n\n",
 "gcd_mul_left":
 "#print gcd_mul_left /-\ntheorem gcd_mul_left {a : α} : (s.gcd fun x => a * f x) = normalize a * s.gcd f := by\n  classical\n    apply s.induction_on\n    · simp\n    intro b t hbt h\n    rw [gcd_insert, gcd_insert, h, ← gcd_mul_left]\n    apply ((normalize_associated a).mul_right _).gcd_eq_right\n#align gcd_mul_left gcd_mul_left\n-/\n\n",
 "gcd_mono_fun":
 "theorem gcd_mono_fun {g : β → α} (h : ∀ b ∈ s, f b ∣ g b) : s.gcd f ∣ s.gcd g :=\n  dvd_gcd fun b hb => (gcd_dvd hb).trans (h b hb)\n#align gcd_mono_fun gcd_mono_fun\n\n",
 "gcd_mono":
 "theorem gcd_mono (h : s₁ ⊆ s₂) : s₂.gcd f ∣ s₁.gcd f :=\n  dvd_gcd fun b hb => gcd_dvd (h hb)\n#align gcd_mono gcd_mono\n\n",
 "gcd_insert":
 "@[simp]\ntheorem gcd_insert [decidable_eq β] {b : β} : (insert b s : Finset β).gcd f = gcd_monoid.gcd (f b) (s.gcd f) :=\n  by\n  by_cases h : b ∈ s\n  · rw [insert_eq_of_mem h, (gcd_eq_right_iff (f b) (s.gcd f) (multiset.normalize_gcd (s.1.map f))).2 (gcd_dvd h)]\n  apply fold_insert h\n#align gcd_insert gcd_insert\n\n",
 "gcd_image":
 "theorem gcd_image [decidable_eq β] {g : γ → β} (s : Finset γ) : (s.image g).gcd f = s.gcd (f ∘ g) := by\n  classical induction' s using Finset.induction with c s hc ih <;> simp [*]\n#align gcd_image gcd_image\n\n",
 "gcd_eq_zero_iff":
 "#print gcd_eq_zero_iff /-\ntheorem gcd_eq_zero_iff : s.gcd f = 0 ↔ ∀ x : β, x ∈ s → f x = 0 :=\n  by\n  rw [gcd_def, multiset.gcd_eq_zero_iff]\n  constructor <;> intro h\n  · intro b bs\n    apply h (f b)\n    simp only [Multiset.mem_map, mem_def.1 bs]\n    use b\n    simp [mem_def.1 bs]\n  · intro a as\n    rw [Multiset.mem_map] at as\n    rcases as with ⟨b, ⟨bs, rfl⟩⟩\n    apply h b (mem_def.1 bs)\n#align gcd_eq_zero_iff gcd_eq_zero_iff\n-/\n\n",
 "gcd_eq_of_dvd_sub":
 "theorem gcd_eq_of_dvd_sub {s : Finset β} {f g : β → α} {a : α} (h : ∀ x : β, x ∈ s → a ∣ f x - g x) :\n    gcd_monoid.gcd a (s.gcd f) = gcd_monoid.gcd a (s.gcd g) := by\n  classical\n    revert h\n    apply s.induction_on\n    · simp\n    intro b s bs hi h\n    rw [gcd_insert, gcd_insert, gcd_comm (f b), ← gcd_assoc, hi fun x hx => h _ (mem_insert_of_mem hx), gcd_comm a,\n      gcd_assoc, gcd_comm a (gcd_monoid.gcd _ _), gcd_comm (g b), gcd_assoc _ _ a, gcd_comm _ a]\n    exact congr_arg _ (gcd_eq_of_dvd_sub_right (h _ (mem_insert_self _ _)))\n#align gcd_eq_of_dvd_sub gcd_eq_of_dvd_sub\n\n",
 "gcd_eq_gcd_image":
 "theorem gcd_eq_gcd_image [decidable_eq α] : s.gcd f = (s.image f).gcd id :=\n  eq.symm <| gcd_image _\n#align gcd_eq_gcd_image gcd_eq_gcd_image\n\n",
 "gcd_eq_gcd_filter_ne_zero":
 "theorem gcd_eq_gcd_filter_ne_zero [decidable_pred fun x : β => f x = 0] : s.gcd f = (s.filter fun x => f x ≠ 0).gcd f :=\n  by\n  classical\n    trans ((s.filter fun x => f x = 0) ∪ s.filter fun x => f x ≠ 0).gcd f\n    · rw [filter_union_filter_neg_eq]\n    rw [gcd_union]\n    trans gcd_monoid.gcd (0 : α) _\n    · refine' congr (congr rfl _) rfl\n      apply s.induction_on\n      · simp\n      intro a s has h\n      rw [filter_insert]\n      split_ifs with h1 <;> simp [h, h1]\n    simp [gcd_zero_left, normalize_gcd]\n#align gcd_eq_gcd_filter_ne_zero gcd_eq_gcd_filter_ne_zero\n\n",
 "gcd_empty":
 "@[simp]\ntheorem gcd_empty : (∅ : Finset β).gcd f = 0 :=\n  fold_empty\n#align gcd_empty gcd_empty\n\n",
 "gcd_dvd":
 "theorem gcd_dvd {b : β} (hb : b ∈ s) : s.gcd f ∣ f b :=\n  dvd_gcd_iff.1 dvd_rfl _ hb\n#align gcd_dvd gcd_dvd\n\n",
 "gcd_def":
 "theorem gcd_def : s.gcd f = (s.1.map f).gcd :=\n  rfl\n#align gcd_def gcd_def\n\n",
 "gcd_congr":
 "theorem gcd_congr {f g : β → α} (hs : s₁ = s₂) (hfg : ∀ a ∈ s₂, f a = g a) : s₁.gcd f = s₂.gcd g :=\n  by\n  subst hs\n  exact finset.fold_congr hfg\n#align gcd_congr gcd_congr\n\n",
 "extract_gcd'":
 "theorem extract_gcd' (f g : β → α) (hs : ∃ x, x ∈ s ∧ f x ≠ 0) (hg : ∀ b ∈ s, f b = s.gcd f * g b) : s.gcd g = 1 :=\n  ((@mul_right_eq_self₀ _ _ (s.gcd f) _).1 <| by\n        conv_lhs => rw [← normalize_gcd, ← gcd_mul_left, ← gcd_congr rfl hg]).resolve_right <|\n    by\n    contrapose! hs\n    exact gcd_eq_zero_iff.1 hs\n#align extract_gcd' extract_gcd'\n\n",
 "extract_gcd":
 "#print extract_gcd /-\ntheorem extract_gcd (f : β → α) (hs : s.nonempty) : ∃ g : β → α, (∀ b ∈ s, f b = s.gcd f * g b) ∧ s.gcd g = 1 := by\n  classical\n    by_cases h : ∀ x ∈ s, f x = (0 : α)\n    · refine' ⟨fun b => 1, fun b hb => by rw [h b hb, gcd_eq_zero_iff.2 h, mul_one], _⟩\n      rw [gcd_eq_gcd_image, image_const hs, gcd_singleton, id, normalize_one]\n    · choose g' hg using @gcd_dvd _ _ _ _ s f\n      have := fun b hb => _\n      push_neg  at h\n      refine' ⟨fun b => if hb : b ∈ s then g' hb else 0, this, extract_gcd' f _ h this⟩\n      rw [dif_pos hb, hg hb]\n#align extract_gcd extract_gcd\n-/\n\n",
 "dvd_lcm":
 "theorem dvd_lcm {b : β} (hb : b ∈ s) : f b ∣ s.lcm f :=\n  lcm_dvd_iff.1 dvd_rfl _ hb\n#align dvd_lcm dvd_lcm\n\n",
 "dvd_gcd_iff":
 "#print dvd_gcd_iff /-\ntheorem dvd_gcd_iff {a : α} : a ∣ s.gcd f ↔ ∀ b ∈ s, a ∣ f b :=\n  by\n  apply iff.trans multiset.dvd_gcd\n  simp only [Multiset.mem_map, and_imp, exists_imp]\n  exact ⟨fun k b hb => k _ _ hb rfl, fun k a' b hb h => h ▸ k _ hb⟩\n#align dvd_gcd_iff dvd_gcd_iff\n-/\n\n",
 "dvd_gcd":
 "theorem dvd_gcd {a : α} : (∀ b ∈ s, a ∣ f b) → a ∣ s.gcd f :=\n  dvd_gcd_iff.2\n#align dvd_gcd dvd_gcd\n\n"}