{"normalize_lcm":
 "#print normalize_lcm /-\n@[simp]\ntheorem normalize_lcm (s : Multiset α) : normalize s.lcm = s.lcm :=\n  Multiset.induction_on s (by simp) fun a s IH => by simp\n#align normalize_lcm normalize_lcm\n-/\n\n",
 "normalize_gcd":
 "#print normalize_gcd /-\n@[simp]\ntheorem normalize_gcd (s : Multiset α) : normalize s.gcd = s.gcd :=\n  Multiset.induction_on s (by simp) fun a s IH => by simp\n#align normalize_gcd normalize_gcd\n-/\n\n",
 "lcm_zero":
 "/-\nCopyright (c) 2020 Aaron Anderson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Aaron Anderson\n-/\n@[simp]\ntheorem lcm_zero : (0 : Multiset α).lcm = 1 :=\n  fold_zero _ _\n#align lcm_zero lcm_zero\n\n",
 "lcm_union":
 "@[simp]\ntheorem lcm_union (s₁ s₂ : Multiset α) : (s₁ ∪ s₂).lcm = gcd_monoid.lcm s₁.lcm s₂.lcm :=\n  by\n  rw [← lcm_dedup, dedup_ext.2, lcm_dedup, lcm_add]\n  simp\n#align lcm_union lcm_union\n\n",
 "lcm_singleton":
 "@[simp]\ntheorem lcm_singleton {a : α} : ({a} : Multiset α).lcm = normalize a :=\n  (fold_singleton _ _ _).trans <| lcm_one_right _\n#align lcm_singleton lcm_singleton\n\n",
 "lcm_ndunion":
 "@[simp]\ntheorem lcm_ndunion (s₁ s₂ : Multiset α) : (ndunion s₁ s₂).lcm = gcd_monoid.lcm s₁.lcm s₂.lcm :=\n  by\n  rw [← lcm_dedup, dedup_ext.2, lcm_dedup, lcm_add]\n  simp\n#align lcm_ndunion lcm_ndunion\n\n",
 "lcm_ndinsert":
 "@[simp]\ntheorem lcm_ndinsert (a : α) (s : Multiset α) : (ndinsert a s).lcm = gcd_monoid.lcm a s.lcm :=\n  by\n  rw [← lcm_dedup, dedup_ext.2, lcm_dedup, lcm_cons]\n  simp\n#align lcm_ndinsert lcm_ndinsert\n\n",
 "lcm_mono":
 "theorem lcm_mono {s₁ s₂ : Multiset α} (h : s₁ ⊆ s₂) : s₁.lcm ∣ s₂.lcm :=\n  lcm_dvd.2 fun b hb => dvd_lcm (h hb)\n#align lcm_mono lcm_mono\n\n",
 "lcm_eq_zero_iff":
 "#print lcm_eq_zero_iff /-\n@[simp]\ntheorem lcm_eq_zero_iff [Nontrivial α] (s : Multiset α) : s.lcm = 0 ↔ (0 : α) ∈ s :=\n  by\n  induction' s using Multiset.induction_on with a s ihs\n  · simp only [lcm_zero, one_ne_zero, not_mem_zero]\n  · simp only [mem_cons, lcm_cons, lcm_eq_zero_iff, ihs, @eq_comm _ a]\n#align lcm_eq_zero_iff lcm_eq_zero_iff\n-/\n\n",
 "lcm_dvd":
 "#print lcm_dvd /-\ntheorem lcm_dvd {s : Multiset α} {a : α} : s.lcm ∣ a ↔ ∀ b ∈ s, b ∣ a :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [or_imp, forall_and, lcm_dvd_iff])\n#align lcm_dvd lcm_dvd\n-/\n\n",
 "lcm_dedup":
 "@[simp]\ntheorem lcm_dedup (s : Multiset α) : (dedup s).lcm = s.lcm :=\n  Multiset.induction_on s (by simp) fun a s IH =>\n    by\n    by_cases a ∈ s <;> simp [IH, h]\n    unfold lcm\n    rw [← cons_erase h, fold_cons_left, ← lcm_assoc, lcm_same]\n    apply lcm_eq_of_associated_left (associated_normalize _)\n#align lcm_dedup lcm_dedup\n\n",
 "lcm_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem lcm_cons (a : α) (s : Multiset α) : («expr ::ₘ » a s).lcm = gcd_monoid.lcm a s.lcm :=\n  fold_cons_left _ _ _ _\n#align lcm_cons lcm_cons\n\n",
 "lcm_add":
 "@[simp]\ntheorem lcm_add (s₁ s₂ : Multiset α) : (s₁ + s₂).lcm = gcd_monoid.lcm s₁.lcm s₂.lcm :=\n  Eq.trans (by simp [lcm]) (fold_add _ _ _ _ _)\n#align lcm_add lcm_add\n\n",
 "gcd_zero":
 "@[simp]\ntheorem gcd_zero : (0 : Multiset α).gcd = 0 :=\n  fold_zero _ _\n#align gcd_zero gcd_zero\n\n",
 "gcd_union":
 "@[simp]\ntheorem gcd_union (s₁ s₂ : Multiset α) : (s₁ ∪ s₂).gcd = gcd_monoid.gcd s₁.gcd s₂.gcd :=\n  by\n  rw [← gcd_dedup, dedup_ext.2, gcd_dedup, gcd_add]\n  simp\n#align gcd_union gcd_union\n\n",
 "gcd_singleton":
 "@[simp]\ntheorem gcd_singleton {a : α} : ({a} : Multiset α).gcd = normalize a :=\n  (fold_singleton _ _ _).trans <| gcd_zero_right _\n#align gcd_singleton gcd_singleton\n\n",
 "gcd_ndunion":
 "@[simp]\ntheorem gcd_ndunion (s₁ s₂ : Multiset α) : (ndunion s₁ s₂).gcd = gcd_monoid.gcd s₁.gcd s₂.gcd :=\n  by\n  rw [← gcd_dedup, dedup_ext.2, gcd_dedup, gcd_add]\n  simp\n#align gcd_ndunion gcd_ndunion\n\n",
 "gcd_ndinsert":
 "@[simp]\ntheorem gcd_ndinsert (a : α) (s : Multiset α) : (ndinsert a s).gcd = gcd_monoid.gcd a s.gcd :=\n  by\n  rw [← gcd_dedup, dedup_ext.2, gcd_dedup, gcd_cons]\n  simp\n#align gcd_ndinsert gcd_ndinsert\n\n",
 "gcd_mono":
 "theorem gcd_mono {s₁ s₂ : Multiset α} (h : s₁ ⊆ s₂) : s₂.gcd ∣ s₁.gcd :=\n  dvd_gcd.2 fun b hb => gcd_dvd (h hb)\n#align gcd_mono gcd_mono\n\n",
 "gcd_map_mul":
 "theorem gcd_map_mul (a : α) (s : Multiset α) : (s.map ((· * ·) a)).gcd = normalize a * s.gcd :=\n  by\n  refine' s.induction_on _ fun b s ih => _\n  · simp_rw [map_zero, gcd_zero, MulZeroClass.mul_zero]\n  · simp_rw [map_cons, gcd_cons, ← gcd_mul_left]\n    rw [ih]\n    apply ((normalize_associated a).mul_right _).gcd_eq_right\n#align gcd_map_mul gcd_map_mul\n\n",
 "gcd_eq_zero_iff":
 "#print gcd_eq_zero_iff /-\ntheorem gcd_eq_zero_iff (s : Multiset α) : s.gcd = 0 ↔ ∀ x : α, x ∈ s → x = 0 :=\n  by\n  constructor\n  · intro h x hx\n    apply eq_zero_of_zero_dvd\n    rw [← h]\n    apply gcd_dvd hx\n  · apply s.induction_on\n    · simp\n    intro a s sgcd h\n    simp [h a (mem_cons_self a s), sgcd fun x hx => h x (mem_cons_of_mem hx)]\n#align gcd_eq_zero_iff gcd_eq_zero_iff\n-/\n\n",
 "gcd_dvd":
 "theorem gcd_dvd {s : Multiset α} {a : α} (h : a ∈ s) : s.gcd ∣ a :=\n  dvd_gcd.1 dvd_rfl _ h\n#align gcd_dvd gcd_dvd\n\n",
 "gcd_dedup":
 "@[simp]\ntheorem gcd_dedup (s : Multiset α) : (dedup s).gcd = s.gcd :=\n  Multiset.induction_on s (by simp) fun a s IH =>\n    by\n    by_cases a ∈ s <;> simp [IH, h]\n    unfold gcd\n    rw [← cons_erase h, fold_cons_left, ← gcd_assoc, gcd_same]\n    apply (associated_normalize _).gcd_eq_left\n#align gcd_dedup gcd_dedup\n\n",
 "gcd_cons":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n@[simp]\ntheorem gcd_cons (a : α) (s : Multiset α) : («expr ::ₘ » a s).gcd = gcd_monoid.gcd a s.gcd :=\n  fold_cons_left _ _ _ _\n#align gcd_cons gcd_cons\n\n",
 "gcd_add":
 "@[simp]\ntheorem gcd_add (s₁ s₂ : Multiset α) : (s₁ + s₂).gcd = gcd_monoid.gcd s₁.gcd s₂.gcd :=\n  Eq.trans (by simp [gcd]) (fold_add _ _ _ _ _)\n#align gcd_add gcd_add\n\n",
 "extract_gcd'":
 "theorem extract_gcd' (s t : Multiset α) (hs : ∃ x, x ∈ s ∧ x ≠ (0 : α)) (ht : s = t.map ((· * ·) s.gcd)) : t.gcd = 1 :=\n  ((@mul_right_eq_self₀ _ _ s.gcd _).1 <| by conv_lhs => rw [← normalize_gcd, ← gcd_map_mul, ← ht]).resolve_right <|\n    by\n    contrapose! hs\n    exact s.gcd_eq_zero_iff.1 hs\n#align extract_gcd' extract_gcd'\n\n",
 "extract_gcd":
 "#print extract_gcd /-\ntheorem extract_gcd (s : Multiset α) (hs : s ≠ 0) : ∃ t : Multiset α, s = t.map ((· * ·) s.gcd) ∧ t.gcd = 1 := by\n  classical\n    by_cases h : ∀ x ∈ s, x = (0 : α)\n    · use replicate s.card 1\n      rw [map_replicate, eq_replicate, mul_one, s.gcd_eq_zero_iff.2 h, ← nsmul_singleton, ← gcd_dedup]\n      rw [dedup_nsmul (card_pos.2 hs).ne', dedup_singleton, gcd_singleton]\n      exact ⟨⟨rfl, h⟩, normalize_one⟩\n    · choose f hf using @gcd_dvd _ _ _ s\n      have := _\n      push_neg  at h\n      refine' ⟨s.pmap @f fun _ => id, this, extract_gcd' s _ h this⟩\n      rw [map_pmap]\n      conv_lhs => rw [← s.map_id, ← s.pmap_eq_map _ _ fun _ => id]\n      congr with (x hx)\n      rw [id, ← hf hx]\n#align extract_gcd extract_gcd\n-/\n\n",
 "dvd_lcm":
 "theorem dvd_lcm {s : Multiset α} {a : α} (h : a ∈ s) : a ∣ s.lcm :=\n  lcm_dvd.1 dvd_rfl _ h\n#align dvd_lcm dvd_lcm\n\n",
 "dvd_gcd":
 "theorem dvd_gcd {s : Multiset α} {a : α} : a ∣ s.gcd ↔ ∀ b ∈ s, a ∣ b :=\n  Multiset.induction_on s (by simp) (by simp (config := { contextual := true }) [or_imp, forall_and, dvd_gcd_iff])\n#align dvd_gcd dvd_gcd\n\n"}