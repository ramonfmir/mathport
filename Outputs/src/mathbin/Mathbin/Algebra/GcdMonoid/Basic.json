{"prime_of_irreducible":
 "theorem prime_of_irreducible [GCDMonoid α] {x : α} (hi : Irreducible x) : Prime x :=\n  ⟨hi.ne_zero,\n    ⟨hi.1, fun a b h => by\n      cases' gcd_dvd_left x a with y hy\n      cases' hi.is_unit_or_is_unit hy with hu hu\n      · right\n        trans gcd (x * b) (a * b)\n        apply dvd_gcd (dvd_mul_right x b) h\n        rw [(gcd_mul_right' b x a).dvd_iff_dvd_left]\n        exact (associated_unit_mul_left _ _ hu).dvd\n      · left\n        rw [hy]\n        exact dvd_trans (associated_mul_unit_left _ _ hu).dvd (gcd_dvd_right x a)⟩⟩\n#align prime_of_irreducible prime_of_irreducible\n\n",
 "pow_dvd_of_mul_eq_pow":
 "#print pow_dvd_of_mul_eq_pow /-\ntheorem pow_dvd_of_mul_eq_pow [GCDMonoid α] {a b c d₁ d₂ : α} (ha : a ≠ 0) (hab : IsUnit (gcd a b)) {k : ℕ}\n    (h : a * b = c ^ k) (hc : c = d₁ * d₂) (hd₁ : d₁ ∣ a) : d₁ ^ k ≠ 0 ∧ d₁ ^ k ∣ a :=\n  by\n  have h1 : IsUnit (gcd (d₁ ^ k) b) := by\n    apply isUnit_of_dvd_one\n    trans gcd d₁ b ^ k\n    · exact gcd_pow_left_dvd_pow_gcd\n    · apply IsUnit.dvd\n      apply IsUnit.pow\n      apply isUnit_of_dvd_one\n      apply dvd_trans _ hab.dvd\n      apply gcd_dvd_gcd hd₁ (dvd_refl b)\n  have h2 : d₁ ^ k ∣ a * b := by\n    use d₂ ^ k\n    rw [h, hc]\n    exact mul_pow d₁ d₂ k\n  rw [mul_comm] at h2\n  have h3 : d₁ ^ k ∣ a := by\n    apply (dvd_gcd_mul_of_dvd_mul h2).trans\n    rw [IsUnit.mul_left_dvd _ _ _ h1]\n  have h4 : d₁ ^ k ≠ 0 := by\n    intro hdk\n    rw [hdk] at h3\n    apply absurd (zero_dvd_iff.mp h3) ha\n  exact ⟨h4, h3⟩\n#align pow_dvd_of_mul_eq_pow pow_dvd_of_mul_eq_pow\n-/\n\n",
 "out_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem out_top : («expr⊤» : Associates α).out = 0 :=\n  normalize_zero\n#align out_top out_top\n\n",
 "out_one":
 "@[simp]\ntheorem out_one : (1 : Associates α).out = 1 :=\n  normalize_one\n#align out_one out_one\n\n",
 "out_mul":
 "theorem out_mul (a b : Associates α) : (a * b).out = a.out * b.out :=\n  quotient.induction_on₂ a b fun a b => by\n    simp only [Associates.quotient_mk_eq_mk, out_mk, mk_mul_mk, normalize.map_mul]\n#align out_mul out_mul\n\n",
 "out_mk":
 "@[simp]\ntheorem out_mk (a : α) : (Associates.mk a).out = normalize a :=\n  rfl\n#align out_mk out_mk\n\n",
 "out_injective":
 "theorem out_injective : function.injective (Associates.out : _ → α) :=\n  function.left_inverse.injective mk_out\n#align out_injective out_injective\n\n",
 "out_dvd_iff":
 "theorem out_dvd_iff (a : α) (b : Associates α) : b.out ∣ a ↔ b ≤ Associates.mk a :=\n  Quotient.inductionOn b <| by simp [Associates.out_mk, Associates.quotient_mk_eq_mk, mk_le_mk_iff_dvd_iff]\n#align out_dvd_iff out_dvd_iff\n\n",
 "normalize_zero":
 "#print normalize_zero /-\n@[simp]\ntheorem normalize_zero : normalize (0 : α) = 0 :=\n  normalize.map_zero\n#align normalize_zero normalize_zero\n-/\n\n",
 "normalize_out":
 "@[simp]\ntheorem normalize_out (a : Associates α) : normalize a.out = a.out :=\n  Quotient.inductionOn a normalize_idem\n#align normalize_out normalize_out\n\n",
 "normalize_one":
 "#print normalize_one /-\n@[simp]\ntheorem normalize_one : normalize (1 : α) = 1 :=\n  normalize.map_one\n#align normalize_one normalize_one\n-/\n\n",
 "normalize_lcm":
 "#print normalize_lcm /-\n@[simp]\ntheorem normalize_lcm [NormalizedGCDMonoid α] (a b : α) : normalize (lcm a b) = lcm a b :=\n  normalized_gcd_monoid.normalize_lcm a b\n#align normalize_lcm normalize_lcm\n-/\n\n",
 "normalize_idem":
 "#print normalize_idem /-\ntheorem normalize_idem (x : α) : normalize (normalize x) = normalize x := by simp\n#align normalize_idem normalize_idem\n-/\n\n",
 "normalize_gcd":
 "#print normalize_gcd /-\n@[simp]\ntheorem normalize_gcd [NormalizedGCDMonoid α] : ∀ a b : α, normalize (gcd a b) = gcd a b :=\n  normalized_gcd_monoid.normalize_gcd\n#align normalize_gcd normalize_gcd\n-/\n\n",
 "normalize_eq_zero":
 "#print normalize_eq_zero /-\ntheorem normalize_eq_zero {x : α} : normalize x = 0 ↔ x = 0 :=\n  ⟨fun hx => (associated_zero_iff_eq_zero x).1 <| hx ▸ associated_normalize _, by rintro rfl <;> exact normalize_zero⟩\n#align normalize_eq_zero normalize_eq_zero\n-/\n\n",
 "normalize_eq_one":
 "#print normalize_eq_one /-\ntheorem normalize_eq_one {a : G₀} (h0 : a ≠ 0) : normalize a = 1 := by simp [normalize_apply, h0]\n#align normalize_eq_one normalize_eq_one\n-/\n\n",
 "normalize_eq_normalize_iff":
 "#print normalize_eq_normalize_iff /-\ntheorem normalize_eq_normalize_iff {x y : α} : normalize x = normalize y ↔ x ∣ y ∧ y ∣ x :=\n  ⟨fun h => ⟨Units.dvd_mul_right.1 ⟨_, h.symm⟩, Units.dvd_mul_right.1 ⟨_, h⟩⟩, fun ⟨hxy, hyx⟩ =>\n    normalize_eq_normalize hxy hyx⟩\n#align normalize_eq_normalize_iff normalize_eq_normalize_iff\n-/\n\n",
 "normalize_eq_normalize":
 "#print normalize_eq_normalize /-\ntheorem normalize_eq_normalize {a b : α} (hab : a ∣ b) (hba : b ∣ a) : normalize a = normalize b :=\n  by\n  nontriviality α\n  rcases associated_of_dvd_dvd hab hba with ⟨u, rfl⟩\n  refine' by_cases (by rintro rfl <;> simp only [MulZeroClass.zero_mul]) fun ha : a ≠ 0 => _\n  suffices a * ↑(norm_unit a) = a * ↑u * ↑(norm_unit a) * ↑u⁻¹ by\n    simpa only [normalize_apply, mul_assoc, norm_unit_mul ha u.ne_zero, norm_unit_coe_units]\n  calc\n    a * ↑(norm_unit a) = a * ↑(norm_unit a) * ↑u * ↑u⁻¹ := (Units.mul_inv_cancel_right _ _).symm\n    _ = a * ↑u * ↑(norm_unit a) * ↑u⁻¹ := by rw [mul_right_comm a]\n    \n#align normalize_eq_normalize normalize_eq_normalize\n-/\n\n",
 "normalize_eq":
 "#print normalize_eq /-\n@[simp]\ntheorem normalize_eq (x : α) : normalize x = x :=\n  mul_one x\n#align normalize_eq normalize_eq\n-/\n\n",
 "normalize_dvd_iff":
 "#print normalize_dvd_iff /-\n--can be proven by simp\ntheorem normalize_dvd_iff {a b : α} : normalize a ∣ b ↔ a ∣ b :=\n  Units.mul_right_dvd\n#align normalize_dvd_iff normalize_dvd_iff\n-/\n\n",
 "normalize_coe_units":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print normalize_coe_units /-\ntheorem normalize_coe_units (u : «expr ˣ» α) : normalize (u : α) = 1 := by simp\n#align normalize_coe_units normalize_coe_units\n-/\n\n",
 "normalize_associated_iff":
 "#print normalize_associated_iff /-\ntheorem normalize_associated_iff {x y : α} : Associated (normalize x) y ↔ Associated x y :=\n  ⟨fun h => (associated_normalize _).trans h, fun h => (normalize_associated _).trans h⟩\n#align normalize_associated_iff normalize_associated_iff\n-/\n\n",
 "normalize_associated":
 "#print normalize_associated /-\ntheorem normalize_associated (x : α) : Associated (normalize x) x :=\n  (associated_normalize _).symm\n#align normalize_associated normalize_associated\n-/\n\n",
 "normalize_apply":
 "#print normalize_apply /-\n@[simp]\ntheorem normalize_apply (x : α) : normalize x = x * norm_unit x :=\n  rfl\n#align normalize_apply normalize_apply\n-/\n\n",
 "normUnit_one":
 "#print normUnit_one /-\n/-\nCopyright (c) 2018 Johannes Hölzl. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Jens Wagemaker\n-/\n@[simp]\ntheorem normUnit_one : norm_unit (1 : α) = 1 :=\n  norm_unit_coe_units 1\n#align norm_unit_one normUnit_one\n-/\n\n",
 "normUnit_mul_normUnit":
 "#print normUnit_mul_normUnit /-\n@[simp]\ntheorem normUnit_mul_normUnit (a : α) : norm_unit (a * norm_unit a) = 1 :=\n  by\n  nontriviality α using subsingleton.elim a 0\n  obtain rfl | h := eq_or_ne a 0\n  · rw [norm_unit_zero, MulZeroClass.zero_mul, norm_unit_zero]\n  · rw [norm_unit_mul h (Units.ne_zero _), norm_unit_coe_units, mul_inv_eq_one]\n#align norm_unit_mul_norm_unit normUnit_mul_normUnit\n-/\n\n",
 "normUnit_eq_one":
 "#print normUnit_eq_one /-\n-- see Note [lower instance priority]\n@[simp]\ntheorem normUnit_eq_one (x : α) : norm_unit x = 1 :=\n  rfl\n#align norm_unit_eq_one normUnit_eq_one\n-/\n\n",
 "mk_out":
 "@[simp]\ntheorem mk_out (a : Associates α) : Associates.mk a.out = a :=\n  Quotient.inductionOn a mk_normalize\n#align mk_out mk_out\n\n",
 "mk_normalize":
 "#print Associates.mk_normalize /-\ntheorem Associates.mk_normalize (x : α) : Associates.mk (normalize x) = Associates.mk x :=\n  Associates.mk_eq_mk_iff_associated.2 (normalize_associated _)\n#align associates.mk_normalize Associates.mk_normalize\n-/\n\n",
 "map_mk_unit_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\nprivate theorem map_mk_unit_aux [DecidableEq α] {f : «expr →* » (Associates α) α}\n    (hinv : function.right_inverse f Associates.mk) (a : α) :\n    a * ↑(Classical.choose (associated_map_mk hinv a)) = f (Associates.mk a) :=\n  Classical.choose_spec (associated_map_mk hinv a)\n#align map_mk_unit_aux map_mk_unit_aux\n\n",
 "lcm_units_coe_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print lcm_units_coe_right /-\n@[simp]\ntheorem lcm_units_coe_right [NormalizedGCDMonoid α] (a : α) (u : «expr ˣ» α) : lcm a ↑u = normalize a :=\n  (lcm_comm a u).trans <| lcm_units_coe_left _ _\n#align lcm_units_coe_right lcm_units_coe_right\n-/\n\n",
 "lcm_units_coe_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print lcm_units_coe_left /-\n@[simp]\ntheorem lcm_units_coe_left [NormalizedGCDMonoid α] (u : «expr ˣ» α) (a : α) : lcm (↑u) a = normalize a :=\n  lcm_eq_normalize (lcm_dvd Units.coe_dvd dvd_rfl) (dvd_lcm_right _ _)\n#align lcm_units_coe_left lcm_units_coe_left\n-/\n\n",
 "lcm_same":
 "#print lcm_same /-\n@[simp]\ntheorem lcm_same [NormalizedGCDMonoid α] (a : α) : lcm a a = normalize a :=\n  lcm_eq_normalize (lcm_dvd dvd_rfl dvd_rfl) (dvd_lcm_left _ _)\n#align lcm_same lcm_same\n-/\n\n",
 "lcm_one_right":
 "#print lcm_one_right /-\n@[simp]\ntheorem lcm_one_right [NormalizedGCDMonoid α] (a : α) : lcm a 1 = normalize a :=\n  lcm_units_coe_right a 1\n#align lcm_one_right lcm_one_right\n-/\n\n",
 "lcm_one_left":
 "#print lcm_one_left /-\n@[simp]\ntheorem lcm_one_left [NormalizedGCDMonoid α] (a : α) : lcm 1 a = normalize a :=\n  lcm_units_coe_left 1 a\n#align lcm_one_left lcm_one_left\n-/\n\n",
 "lcm_mul_right":
 "#print lcm_mul_right /-\n@[simp]\ntheorem lcm_mul_right [NormalizedGCDMonoid α] (a b c : α) : lcm (b * a) (c * a) = lcm b c * normalize a := by\n  simp only [mul_comm, lcm_mul_left]\n#align lcm_mul_right lcm_mul_right\n-/\n\n",
 "lcm_mul_left":
 "#print lcm_mul_left /-\n@[simp]\ntheorem lcm_mul_left [NormalizedGCDMonoid α] (a b c : α) : lcm (a * b) (a * c) = normalize a * lcm b c :=\n  by_cases (by rintro rfl <;> simp only [MulZeroClass.zero_mul, lcm_zero_left, normalize_zero]) fun ha : a ≠ 0 =>\n    suffices lcm (a * b) (a * c) = normalize (a * lcm b c) by simpa only [normalize.map_mul, normalize_lcm]\n    have : a ∣ lcm (a * b) (a * c) := (dvd_mul_right _ _).trans (dvd_lcm_left _ _)\n    let ⟨d, Eq⟩ := this\n    lcm_eq_normalize (lcm_dvd (mul_dvd_mul_left a (dvd_lcm_left _ _)) (mul_dvd_mul_left a (dvd_lcm_right _ _)))\n      (Eq.symm ▸\n        (mul_dvd_mul_left a <|\n          lcm_dvd ((mul_dvd_mul_iff_left ha).1 <| Eq ▸ dvd_lcm_left _ _)\n            ((mul_dvd_mul_iff_left ha).1 <| Eq ▸ dvd_lcm_right _ _)))\n#align lcm_mul_left lcm_mul_left\n-/\n\n",
 "lcm_eq_zero_iff":
 "#print lcm_eq_zero_iff /-\n@[simp]\ntheorem lcm_eq_zero_iff [GCDMonoid α] (a b : α) : lcm a b = 0 ↔ a = 0 ∨ b = 0 :=\n  iff.intro\n    (fun h : lcm a b = 0 =>\n      by\n      have : Associated (a * b) 0 := (gcd_mul_lcm a b).symm.trans <| by rw [h, MulZeroClass.mul_zero]\n      simpa only [associated_zero_iff_eq_zero, mul_eq_zero] )\n    (by rintro (rfl | rfl) <;> [apply lcm_zero_left, apply lcm_zero_right])\n#align lcm_eq_zero_iff lcm_eq_zero_iff\n-/\n\n",
 "lcm_eq_right_iff":
 "#print lcm_eq_right_iff /-\ntheorem lcm_eq_right_iff [NormalizedGCDMonoid α] (a b : α) (h : normalize b = b) : lcm a b = b ↔ a ∣ b := by\n  simpa only [lcm_comm b a] using lcm_eq_left_iff b a h\n#align lcm_eq_right_iff lcm_eq_right_iff\n-/\n\n",
 "lcm_eq_one_iff":
 "#print lcm_eq_one_iff /-\n@[simp]\ntheorem lcm_eq_one_iff [NormalizedGCDMonoid α] (a b : α) : lcm a b = 1 ↔ a ∣ 1 ∧ b ∣ 1 :=\n  iff.intro (fun eq => Eq ▸ ⟨dvd_lcm_left _ _, dvd_lcm_right _ _⟩) fun ⟨⟨c, hc⟩, ⟨d, hd⟩⟩ =>\n    show lcm (Units.mkOfMulEqOne a c hc.symm : α) (Units.mkOfMulEqOne b d hd.symm) = 1 by\n      rw [lcm_units_coe_left, normalize_coe_units]\n#align lcm_eq_one_iff lcm_eq_one_iff\n-/\n\n",
 "lcm_eq_of_associated_right":
 "#print lcm_eq_of_associated_right /-\ntheorem lcm_eq_of_associated_right [NormalizedGCDMonoid α] {m n : α} (h : Associated m n) (k : α) : lcm k m = lcm k n :=\n  dvd_antisymm_of_normalize_eq (normalize_lcm _ _) (normalize_lcm _ _) (lcm_dvd_lcm dvd_rfl h.dvd)\n    (lcm_dvd_lcm dvd_rfl h.symm.dvd)\n#align lcm_eq_of_associated_right lcm_eq_of_associated_right\n-/\n\n",
 "lcm_eq_of_associated_left":
 "#print lcm_eq_of_associated_left /-\ntheorem lcm_eq_of_associated_left [NormalizedGCDMonoid α] {m n : α} (h : Associated m n) (k : α) : lcm m k = lcm n k :=\n  dvd_antisymm_of_normalize_eq (normalize_lcm _ _) (normalize_lcm _ _) (lcm_dvd_lcm h.dvd dvd_rfl)\n    (lcm_dvd_lcm h.symm.dvd dvd_rfl)\n#align lcm_eq_of_associated_left lcm_eq_of_associated_left\n-/\n\n",
 "lcm_eq_normalize":
 "#print lcm_eq_normalize /-\ntheorem lcm_eq_normalize [NormalizedGCDMonoid α] {a b c : α} (habc : lcm a b ∣ c) (hcab : c ∣ lcm a b) :\n    lcm a b = normalize c :=\n  normalize_lcm a b ▸ normalize_eq_normalize habc hcab\n#align lcm_eq_normalize lcm_eq_normalize\n-/\n\n",
 "lcm_eq_left_iff":
 "#print lcm_eq_left_iff /-\ntheorem lcm_eq_left_iff [NormalizedGCDMonoid α] (a b : α) (h : normalize a = a) : lcm a b = a ↔ b ∣ a :=\n  iff.intro (fun eq => Eq ▸ dvd_lcm_right _ _) fun hab =>\n    dvd_antisymm_of_normalize_eq (normalize_lcm _ _) h (lcm_dvd (dvd_refl a) hab) (dvd_lcm_left _ _)\n#align lcm_eq_left_iff lcm_eq_left_iff\n-/\n\n",
 "lcm_dvd_lcm_mul_right_right":
 "#print lcm_dvd_lcm_mul_right_right /-\ntheorem lcm_dvd_lcm_mul_right_right [GCDMonoid α] (m n k : α) : lcm m n ∣ lcm m (n * k) :=\n  lcm_dvd_lcm dvd_rfl (dvd_mul_right _ _)\n#align lcm_dvd_lcm_mul_right_right lcm_dvd_lcm_mul_right_right\n-/\n\n",
 "lcm_dvd_lcm_mul_right":
 "#print lcm_dvd_lcm_mul_right /-\ntheorem lcm_dvd_lcm_mul_right [GCDMonoid α] (m n k : α) : lcm m n ∣ lcm (m * k) n :=\n  lcm_dvd_lcm (dvd_mul_right _ _) dvd_rfl\n#align lcm_dvd_lcm_mul_right lcm_dvd_lcm_mul_right\n-/\n\n",
 "lcm_dvd_lcm_mul_left_right":
 "#print lcm_dvd_lcm_mul_left_right /-\ntheorem lcm_dvd_lcm_mul_left_right [GCDMonoid α] (m n k : α) : lcm m n ∣ lcm m (k * n) :=\n  lcm_dvd_lcm dvd_rfl (dvd_mul_left _ _)\n#align lcm_dvd_lcm_mul_left_right lcm_dvd_lcm_mul_left_right\n-/\n\n",
 "lcm_dvd_lcm_mul_left":
 "#print lcm_dvd_lcm_mul_left /-\ntheorem lcm_dvd_lcm_mul_left [GCDMonoid α] (m n k : α) : lcm m n ∣ lcm (k * m) n :=\n  lcm_dvd_lcm (dvd_mul_left _ _) dvd_rfl\n#align lcm_dvd_lcm_mul_left lcm_dvd_lcm_mul_left\n-/\n\n",
 "lcm_dvd_lcm":
 "#print lcm_dvd_lcm /-\ntheorem lcm_dvd_lcm [GCDMonoid α] {a b c d : α} (hab : a ∣ b) (hcd : c ∣ d) : lcm a c ∣ lcm b d :=\n  lcm_dvd (hab.trans (dvd_lcm_left _ _)) (hcd.trans (dvd_lcm_right _ _))\n#align lcm_dvd_lcm lcm_dvd_lcm\n-/\n\n",
 "lcm_dvd_iff":
 "#print lcm_dvd_iff /-\ntheorem lcm_dvd_iff [GCDMonoid α] {a b c : α} : lcm a b ∣ c ↔ a ∣ c ∧ b ∣ c :=\n  by\n  by_cases this : a = 0 ∨ b = 0\n  ·\n    rcases this with (rfl | rfl) <;>\n      simp (config := { contextual := true }) only [iff_def, lcm_zero_left, lcm_zero_right, zero_dvd_iff, dvd_zero,\n        eq_self_iff_true, and_true_iff, imp_true_iff]\n  · obtain ⟨h1, h2⟩ := not_or.1 this\n    have h : gcd a b ≠ 0 := fun H => h1 ((gcd_eq_zero_iff _ _).1 H).1\n    rw [← mul_dvd_mul_iff_left h, (gcd_mul_lcm a b).dvd_iff_dvd_left, ← (gcd_mul_right' c a b).dvd_iff_dvd_right,\n      dvd_gcd_iff, mul_comm b c, mul_dvd_mul_iff_left h1, mul_dvd_mul_iff_right h2, and_comm']\n#align lcm_dvd_iff lcm_dvd_iff\n-/\n\n",
 "lcm_dvd":
 "#print lcm_dvd /-\ntheorem lcm_dvd [GCDMonoid α] {a b c : α} (hab : a ∣ b) (hcb : c ∣ b) : lcm a c ∣ b :=\n  lcm_dvd_iff.2 ⟨hab, hcb⟩\n#align lcm_dvd lcm_dvd\n-/\n\n",
 "lcm_comm'":
 "#print lcm_comm' /-\ntheorem lcm_comm' [GCDMonoid α] (a b : α) : Associated (lcm a b) (lcm b a) :=\n  associated_of_dvd_dvd (lcm_dvd (dvd_lcm_right _ _) (dvd_lcm_left _ _))\n    (lcm_dvd (dvd_lcm_right _ _) (dvd_lcm_left _ _))\n#align lcm_comm' lcm_comm'\n-/\n\n",
 "lcm_comm":
 "#print lcm_comm /-\ntheorem lcm_comm [NormalizedGCDMonoid α] (a b : α) : lcm a b = lcm b a :=\n  dvd_antisymm_of_normalize_eq (normalize_lcm _ _) (normalize_lcm _ _) (lcm_dvd (dvd_lcm_right _ _) (dvd_lcm_left _ _))\n    (lcm_dvd (dvd_lcm_right _ _) (dvd_lcm_left _ _))\n#align lcm_comm lcm_comm\n-/\n\n",
 "lcm_assoc'":
 "#print lcm_assoc' /-\ntheorem lcm_assoc' [GCDMonoid α] (m n k : α) : Associated (lcm (lcm m n) k) (lcm m (lcm n k)) :=\n  associated_of_dvd_dvd\n    (lcm_dvd (lcm_dvd (dvd_lcm_left _ _) ((dvd_lcm_left _ _).trans (dvd_lcm_right _ _)))\n      ((dvd_lcm_right _ _).trans (dvd_lcm_right _ _)))\n    (lcm_dvd ((dvd_lcm_left _ _).trans (dvd_lcm_left _ _))\n      (lcm_dvd ((dvd_lcm_right _ _).trans (dvd_lcm_left _ _)) (dvd_lcm_right _ _)))\n#align lcm_assoc' lcm_assoc'\n-/\n\n",
 "lcm_assoc":
 "#print lcm_assoc /-\ntheorem lcm_assoc [NormalizedGCDMonoid α] (m n k : α) : lcm (lcm m n) k = lcm m (lcm n k) :=\n  dvd_antisymm_of_normalize_eq (normalize_lcm _ _) (normalize_lcm _ _)\n    (lcm_dvd (lcm_dvd (dvd_lcm_left _ _) ((dvd_lcm_left _ _).trans (dvd_lcm_right _ _)))\n      ((dvd_lcm_right _ _).trans (dvd_lcm_right _ _)))\n    (lcm_dvd ((dvd_lcm_left _ _).trans (dvd_lcm_left _ _))\n      (lcm_dvd ((dvd_lcm_right _ _).trans (dvd_lcm_left _ _)) (dvd_lcm_right _ _)))\n#align lcm_assoc lcm_assoc\n-/\n\n",
 "isUnit_gcd_of_eq_mul_gcd":
 "#print isUnit_gcd_of_eq_mul_gcd /-\ntheorem isUnit_gcd_of_eq_mul_gcd {α : Type _} [CancelCommMonoidWithZero α] [GCDMonoid α] {x y x' y' : α}\n    (ex : x = gcd x y * x') (ey : y = gcd x y * y') (h : gcd x y ≠ 0) : IsUnit (gcd x' y') :=\n  by\n  rw [← associated_one_iff_isUnit]\n  refine' Associated.of_mul_left _ (Associated.refl <| gcd x y) h\n  convert(gcd_mul_left' _ _ _).symm using 1\n  rw [← ex, ← ey, mul_one]\n#align is_unit_gcd_of_eq_mul_gcd isUnit_gcd_of_eq_mul_gcd\n-/\n\n",
 "irreducible_iff_prime":
 "theorem irreducible_iff_prime [GCDMonoid α] {p : α} : Irreducible p ↔ Prime p :=\n  ⟨prime_of_irreducible, Prime.irreducible⟩\n#align irreducible_iff_prime irreducible_iff_prime\n\n",
 "gcd_zero_right'":
 "#print gcd_zero_right' /-\ntheorem gcd_zero_right' [GCDMonoid α] (a : α) : Associated (gcd a 0) a :=\n  associated_of_dvd_dvd (gcd_dvd_left a 0) (dvd_gcd (dvd_refl a) (dvd_zero _))\n#align gcd_zero_right' gcd_zero_right'\n-/\n\n",
 "gcd_zero_right":
 "#print gcd_zero_right /-\n@[simp]\ntheorem gcd_zero_right [NormalizedGCDMonoid α] (a : α) : gcd a 0 = normalize a :=\n  gcd_eq_normalize (gcd_dvd_left a 0) (dvd_gcd (dvd_refl a) (dvd_zero _))\n#align gcd_zero_right gcd_zero_right\n-/\n\n",
 "gcd_zero_left'":
 "#print gcd_zero_left' /-\ntheorem gcd_zero_left' [GCDMonoid α] (a : α) : Associated (gcd 0 a) a :=\n  associated_of_dvd_dvd (gcd_dvd_right 0 a) (dvd_gcd (dvd_zero _) (dvd_refl a))\n#align gcd_zero_left' gcd_zero_left'\n-/\n\n",
 "gcd_zero_left":
 "#print gcd_zero_left /-\n@[simp]\ntheorem gcd_zero_left [NormalizedGCDMonoid α] (a : α) : gcd 0 a = normalize a :=\n  gcd_eq_normalize (gcd_dvd_right 0 a) (dvd_gcd (dvd_zero _) (dvd_refl a))\n#align gcd_zero_left gcd_zero_left\n-/\n\n",
 "gcd_same":
 "#print gcd_same /-\n@[simp]\ntheorem gcd_same [NormalizedGCDMonoid α] (a : α) : gcd a a = normalize a :=\n  gcd_eq_normalize (gcd_dvd_left _ _) (dvd_gcd (dvd_refl a) (dvd_refl a))\n#align gcd_same gcd_same\n-/\n\n",
 "gcd_pow_right_dvd_pow_gcd":
 "#print gcd_pow_right_dvd_pow_gcd /-\ntheorem gcd_pow_right_dvd_pow_gcd [GCDMonoid α] {a b : α} {k : ℕ} : gcd a (b ^ k) ∣ gcd a b ^ k :=\n  by\n  by_cases hg : gcd a b = 0\n  · rw [gcd_eq_zero_iff] at hg\n    rcases hg with ⟨rfl, rfl⟩\n    exact (gcd_zero_left' (0 ^ k : α)).dvd.trans (pow_dvd_pow_of_dvd (gcd_zero_left' (0 : α)).symm.dvd _)\n  · induction' k with k hk\n    · simp only [pow_zero]\n      exact (gcd_one_right' a).dvd\n    rw [pow_succ, pow_succ]\n    trans gcd a b * gcd a (b ^ k)\n    apply gcd_mul_dvd_mul_gcd a b (b ^ k)\n    exact (mul_dvd_mul_iff_left hg).mpr hk\n#align gcd_pow_right_dvd_pow_gcd gcd_pow_right_dvd_pow_gcd\n-/\n\n",
 "gcd_pow_left_dvd_pow_gcd":
 "#print gcd_pow_left_dvd_pow_gcd /-\ntheorem gcd_pow_left_dvd_pow_gcd [GCDMonoid α] {a b : α} {k : ℕ} : gcd (a ^ k) b ∣ gcd a b ^ k :=\n  calc\n    gcd (a ^ k) b ∣ gcd b (a ^ k) := (gcd_comm' _ _).dvd\n    _ ∣ gcd b a ^ k := gcd_pow_right_dvd_pow_gcd\n    _ ∣ gcd a b ^ k := pow_dvd_pow_of_dvd (gcd_comm' _ _).dvd _\n    \n#align gcd_pow_left_dvd_pow_gcd gcd_pow_left_dvd_pow_gcd\n-/\n\n",
 "gcd_one_right'":
 "#print gcd_one_right' /-\n@[simp]\ntheorem gcd_one_right' [GCDMonoid α] (a : α) : Associated (gcd a 1) 1 :=\n  associated_of_dvd_dvd (gcd_dvd_right _ _) (one_dvd _)\n#align gcd_one_right' gcd_one_right'\n-/\n\n",
 "gcd_one_right":
 "#print gcd_one_right /-\n@[simp]\ntheorem gcd_one_right [NormalizedGCDMonoid α] (a : α) : gcd a 1 = 1 :=\n  dvd_antisymm_of_normalize_eq (normalize_gcd _ _) normalize_one (gcd_dvd_right _ _) (one_dvd _)\n#align gcd_one_right gcd_one_right\n-/\n\n",
 "gcd_one_left'":
 "#print gcd_one_left' /-\n@[simp]\ntheorem gcd_one_left' [GCDMonoid α] (a : α) : Associated (gcd 1 a) 1 :=\n  associated_of_dvd_dvd (gcd_dvd_left _ _) (one_dvd _)\n#align gcd_one_left' gcd_one_left'\n-/\n\n",
 "gcd_one_left":
 "#print gcd_one_left /-\n@[simp]\ntheorem gcd_one_left [NormalizedGCDMonoid α] (a : α) : gcd 1 a = 1 :=\n  dvd_antisymm_of_normalize_eq (normalize_gcd _ _) normalize_one (gcd_dvd_left _ _) (one_dvd _)\n#align gcd_one_left gcd_one_left\n-/\n\n",
 "gcd_mul_right'":
 "#print gcd_mul_right' /-\n@[simp]\ntheorem gcd_mul_right' [GCDMonoid α] (a b c : α) : Associated (gcd (b * a) (c * a)) (gcd b c * a) := by\n  simp only [mul_comm, gcd_mul_left']\n#align gcd_mul_right' gcd_mul_right'\n-/\n\n",
 "gcd_mul_right":
 "#print gcd_mul_right /-\n@[simp]\ntheorem gcd_mul_right [NormalizedGCDMonoid α] (a b c : α) : gcd (b * a) (c * a) = gcd b c * normalize a := by\n  simp only [mul_comm, gcd_mul_left]\n#align gcd_mul_right gcd_mul_right\n-/\n\n",
 "gcd_mul_left'":
 "#print gcd_mul_left' /-\ntheorem gcd_mul_left' [GCDMonoid α] (a b c : α) : Associated (gcd (a * b) (a * c)) (a * gcd b c) :=\n  by\n  obtain rfl | ha := eq_or_ne a 0\n  · simp only [MulZeroClass.zero_mul, gcd_zero_left']\n  obtain ⟨d, eq⟩ := dvd_gcd (dvd_mul_right a b) (dvd_mul_right a c)\n  apply associated_of_dvd_dvd\n  · rw [Eq]\n    apply mul_dvd_mul_left\n    exact\n      dvd_gcd ((mul_dvd_mul_iff_left ha).1 <| Eq ▸ gcd_dvd_left _ _)\n        ((mul_dvd_mul_iff_left ha).1 <| Eq ▸ gcd_dvd_right _ _)\n  · exact dvd_gcd (mul_dvd_mul_left a <| gcd_dvd_left _ _) (mul_dvd_mul_left a <| gcd_dvd_right _ _)\n#align gcd_mul_left' gcd_mul_left'\n-/\n\n",
 "gcd_mul_left":
 "#print gcd_mul_left /-\n@[simp]\ntheorem gcd_mul_left [NormalizedGCDMonoid α] (a b c : α) : gcd (a * b) (a * c) = normalize a * gcd b c :=\n  by_cases (by rintro rfl <;> simp only [MulZeroClass.zero_mul, gcd_zero_left, normalize_zero]) fun ha : a ≠ 0 =>\n    suffices gcd (a * b) (a * c) = normalize (a * gcd b c) by simpa only [normalize.map_mul, normalize_gcd]\n    let ⟨d, Eq⟩ := dvd_gcd (dvd_mul_right a b) (dvd_mul_right a c)\n    gcd_eq_normalize\n      (Eq.symm ▸ mul_dvd_mul_left a <|\n        show d ∣ gcd b c from\n          dvd_gcd ((mul_dvd_mul_iff_left ha).1 <| Eq ▸ gcd_dvd_left _ _)\n            ((mul_dvd_mul_iff_left ha).1 <| Eq ▸ gcd_dvd_right _ _))\n      (dvd_gcd (mul_dvd_mul_left a <| gcd_dvd_left _ _) (mul_dvd_mul_left a <| gcd_dvd_right _ _))\n#align gcd_mul_left gcd_mul_left\n-/\n\n",
 "gcd_mul_lcm":
 "#print gcd_mul_lcm /-\ntheorem gcd_mul_lcm [GCDMonoid α] : ∀ a b : α, Associated (gcd a b * lcm a b) (a * b) :=\n  gcd_monoid.gcd_mul_lcm\n#align gcd_mul_lcm gcd_mul_lcm\n-/\n\n",
 "gcd_mul_dvd_mul_gcd":
 "#print gcd_mul_dvd_mul_gcd /-\ntheorem gcd_mul_dvd_mul_gcd [GCDMonoid α] (k m n : α) : gcd k (m * n) ∣ gcd k m * gcd k n :=\n  by\n  obtain ⟨m', n', hm', hn', h⟩ := exists_dvd_and_dvd_of_dvd_mul (gcd_dvd_right k (m * n))\n  replace h : gcd k (m * n) = m' * n' := h\n  rw [h]\n  have hm'n' : m' * n' ∣ k := h ▸ gcd_dvd_left _ _\n  apply mul_dvd_mul\n  · have hm'k : m' ∣ k := (dvd_mul_right m' n').trans hm'n'\n    exact dvd_gcd hm'k hm'\n  · have hn'k : n' ∣ k := (dvd_mul_left n' m').trans hm'n'\n    exact dvd_gcd hn'k hn'\n#align gcd_mul_dvd_mul_gcd gcd_mul_dvd_mul_gcd\n-/\n\n",
 "gcd_greatest_associated":
 "#print gcd_greatest_associated /-\ntheorem gcd_greatest_associated {α : Type _} [CancelCommMonoidWithZero α] [GCDMonoid α] {a b d : α} (hda : d ∣ a)\n    (hdb : d ∣ b) (hd : ∀ e : α, e ∣ a → e ∣ b → e ∣ d) : Associated d (gcd_monoid.gcd a b) :=\n  haveI h := hd _ (gcd_monoid.gcd_dvd_left a b) (gcd_monoid.gcd_dvd_right a b)\n  associated_of_dvd_dvd (gcd_monoid.dvd_gcd hda hdb) h\n#align gcd_greatest_associated gcd_greatest_associated\n-/\n\n",
 "gcd_greatest":
 "#print gcd_greatest /-\ntheorem gcd_greatest {α : Type _} [CancelCommMonoidWithZero α] [NormalizedGCDMonoid α] {a b d : α} (hda : d ∣ a)\n    (hdb : d ∣ b) (hd : ∀ e : α, e ∣ a → e ∣ b → e ∣ d) : gcd_monoid.gcd a b = normalize d :=\n  haveI h := hd _ (gcd_monoid.gcd_dvd_left a b) (gcd_monoid.gcd_dvd_right a b)\n  gcd_eq_normalize h (gcd_monoid.dvd_gcd hda hdb)\n#align gcd_greatest gcd_greatest\n-/\n\n",
 "gcd_eq_zero_iff":
 "#print gcd_eq_zero_iff /-\n@[simp]\ntheorem gcd_eq_zero_iff [GCDMonoid α] (a b : α) : gcd a b = 0 ↔ a = 0 ∧ b = 0 :=\n  iff.intro\n    (fun h => by\n      let ⟨ca, ha⟩ := gcd_dvd_left a b\n      let ⟨cb, hb⟩ := gcd_dvd_right a b\n      rw [h, MulZeroClass.zero_mul] at ha hb <;> exact ⟨ha, hb⟩)\n    fun ⟨ha, hb⟩ => by\n    rw [ha, hb, ← zero_dvd_iff]\n    apply dvd_gcd <;> rfl\n#align gcd_eq_zero_iff gcd_eq_zero_iff\n-/\n\n",
 "gcd_eq_right_iff":
 "#print gcd_eq_right_iff /-\ntheorem gcd_eq_right_iff [NormalizedGCDMonoid α] (a b : α) (h : normalize b = b) : gcd a b = b ↔ b ∣ a := by\n  simpa only [gcd_comm a b] using gcd_eq_left_iff b a h\n#align gcd_eq_right_iff gcd_eq_right_iff\n-/\n\n",
 "gcd_eq_right":
 "#print Associated.gcd_eq_right /-\ntheorem Associated.gcd_eq_right [NormalizedGCDMonoid α] {m n : α} (h : Associated m n) (k : α) : gcd k m = gcd k n :=\n  dvd_antisymm_of_normalize_eq (normalize_gcd _ _) (normalize_gcd _ _) (gcd_dvd_gcd dvd_rfl h.dvd)\n    (gcd_dvd_gcd dvd_rfl h.symm.dvd)\n#align associated.gcd_eq_right Associated.gcd_eq_right\n-/\n\n",
 "gcd_eq_of_dvd_sub_right":
 "#print gcd_eq_of_dvd_sub_right /-\ntheorem gcd_eq_of_dvd_sub_right {a b c : α} (h : a ∣ b - c) : gcd a b = gcd a c :=\n  by\n  apply dvd_antisymm_of_normalize_eq (normalize_gcd _ _) (normalize_gcd _ _) <;> rw [dvd_gcd_iff] <;>\n    refine' ⟨gcd_dvd_left _ _, _⟩\n  · rcases h with ⟨d, hd⟩\n    rcases gcd_dvd_right a b with ⟨e, he⟩\n    rcases gcd_dvd_left a b with ⟨f, hf⟩\n    use e - f * d\n    rw [mul_sub, ← he, ← mul_assoc, ← hf, ← hd, sub_sub_cancel]\n  · rcases h with ⟨d, hd⟩\n    rcases gcd_dvd_right a c with ⟨e, he⟩\n    rcases gcd_dvd_left a c with ⟨f, hf⟩\n    use e + f * d\n    rw [mul_add, ← he, ← mul_assoc, ← hf, ← hd, ← add_sub_assoc, add_comm c b, add_sub_cancel]\n#align gcd_eq_of_dvd_sub_right gcd_eq_of_dvd_sub_right\n-/\n\n",
 "gcd_eq_of_dvd_sub_left":
 "#print gcd_eq_of_dvd_sub_left /-\ntheorem gcd_eq_of_dvd_sub_left {a b c : α} (h : a ∣ b - c) : gcd b a = gcd c a := by\n  rw [gcd_comm _ a, gcd_comm _ a, gcd_eq_of_dvd_sub_right h]\n#align gcd_eq_of_dvd_sub_left gcd_eq_of_dvd_sub_left\n-/\n\n",
 "gcd_eq_normalize":
 "#print gcd_eq_normalize /-\ntheorem gcd_eq_normalize [NormalizedGCDMonoid α] {a b c : α} (habc : gcd a b ∣ c) (hcab : c ∣ gcd a b) :\n    gcd a b = normalize c :=\n  normalize_gcd a b ▸ normalize_eq_normalize habc hcab\n#align gcd_eq_normalize gcd_eq_normalize\n-/\n\n",
 "gcd_eq_left_iff":
 "#print gcd_eq_left_iff /-\ntheorem gcd_eq_left_iff [NormalizedGCDMonoid α] (a b : α) (h : normalize a = a) : gcd a b = a ↔ a ∣ b :=\n  iff.intro (fun eq => Eq ▸ gcd_dvd_right _ _) fun hab =>\n    dvd_antisymm_of_normalize_eq (normalize_gcd _ _) h (gcd_dvd_left _ _) (dvd_gcd (dvd_refl a) hab)\n#align gcd_eq_left_iff gcd_eq_left_iff\n-/\n\n",
 "gcd_eq_left":
 "#print Associated.gcd_eq_left /-\ntheorem Associated.gcd_eq_left [NormalizedGCDMonoid α] {m n : α} (h : Associated m n) (k : α) : gcd m k = gcd n k :=\n  dvd_antisymm_of_normalize_eq (normalize_gcd _ _) (normalize_gcd _ _) (gcd_dvd_gcd h.dvd dvd_rfl)\n    (gcd_dvd_gcd h.symm.dvd dvd_rfl)\n#align associated.gcd_eq_left Associated.gcd_eq_left\n-/\n\n",
 "gcd_dvd_gcd_mul_right_right":
 "#print gcd_dvd_gcd_mul_right_right /-\ntheorem gcd_dvd_gcd_mul_right_right [GCDMonoid α] (m n k : α) : gcd m n ∣ gcd m (n * k) :=\n  gcd_dvd_gcd dvd_rfl (dvd_mul_right _ _)\n#align gcd_dvd_gcd_mul_right_right gcd_dvd_gcd_mul_right_right\n-/\n\n",
 "gcd_dvd_gcd_mul_right":
 "#print gcd_dvd_gcd_mul_right /-\ntheorem gcd_dvd_gcd_mul_right [GCDMonoid α] (m n k : α) : gcd m n ∣ gcd (m * k) n :=\n  gcd_dvd_gcd (dvd_mul_right _ _) dvd_rfl\n#align gcd_dvd_gcd_mul_right gcd_dvd_gcd_mul_right\n-/\n\n",
 "gcd_dvd_gcd_mul_left_right":
 "#print gcd_dvd_gcd_mul_left_right /-\ntheorem gcd_dvd_gcd_mul_left_right [GCDMonoid α] (m n k : α) : gcd m n ∣ gcd m (k * n) :=\n  gcd_dvd_gcd dvd_rfl (dvd_mul_left _ _)\n#align gcd_dvd_gcd_mul_left_right gcd_dvd_gcd_mul_left_right\n-/\n\n",
 "gcd_dvd_gcd_mul_left":
 "#print gcd_dvd_gcd_mul_left /-\ntheorem gcd_dvd_gcd_mul_left [GCDMonoid α] (m n k : α) : gcd m n ∣ gcd (k * m) n :=\n  gcd_dvd_gcd (dvd_mul_left _ _) dvd_rfl\n#align gcd_dvd_gcd_mul_left gcd_dvd_gcd_mul_left\n-/\n\n",
 "gcd_dvd_gcd":
 "#print gcd_dvd_gcd /-\ntheorem gcd_dvd_gcd [GCDMonoid α] {a b c d : α} (hab : a ∣ b) (hcd : c ∣ d) : gcd a c ∣ gcd b d :=\n  dvd_gcd ((gcd_dvd_left _ _).trans hab) ((gcd_dvd_right _ _).trans hcd)\n#align gcd_dvd_gcd gcd_dvd_gcd\n-/\n\n",
 "gcd_comm'":
 "#print gcd_comm' /-\ntheorem gcd_comm' [GCDMonoid α] (a b : α) : Associated (gcd a b) (gcd b a) :=\n  associated_of_dvd_dvd (dvd_gcd (gcd_dvd_right _ _) (gcd_dvd_left _ _))\n    (dvd_gcd (gcd_dvd_right _ _) (gcd_dvd_left _ _))\n#align gcd_comm' gcd_comm'\n-/\n\n",
 "gcd_comm":
 "#print gcd_comm /-\ntheorem gcd_comm [NormalizedGCDMonoid α] (a b : α) : gcd a b = gcd b a :=\n  dvd_antisymm_of_normalize_eq (normalize_gcd _ _) (normalize_gcd _ _) (dvd_gcd (gcd_dvd_right _ _) (gcd_dvd_left _ _))\n    (dvd_gcd (gcd_dvd_right _ _) (gcd_dvd_left _ _))\n#align gcd_comm gcd_comm\n-/\n\n",
 "gcd_assoc'":
 "#print gcd_assoc' /-\ntheorem gcd_assoc' [GCDMonoid α] (m n k : α) : Associated (gcd (gcd m n) k) (gcd m (gcd n k)) :=\n  associated_of_dvd_dvd\n    (dvd_gcd ((gcd_dvd_left (gcd m n) k).trans (gcd_dvd_left m n))\n      (dvd_gcd ((gcd_dvd_left (gcd m n) k).trans (gcd_dvd_right m n)) (gcd_dvd_right (gcd m n) k)))\n    (dvd_gcd (dvd_gcd (gcd_dvd_left m (gcd n k)) ((gcd_dvd_right m (gcd n k)).trans (gcd_dvd_left n k)))\n      ((gcd_dvd_right m (gcd n k)).trans (gcd_dvd_right n k)))\n#align gcd_assoc' gcd_assoc'\n-/\n\n",
 "gcd_assoc":
 "#print gcd_assoc /-\ntheorem gcd_assoc [NormalizedGCDMonoid α] (m n k : α) : gcd (gcd m n) k = gcd m (gcd n k) :=\n  dvd_antisymm_of_normalize_eq (normalize_gcd _ _) (normalize_gcd _ _)\n    (dvd_gcd ((gcd_dvd_left (gcd m n) k).trans (gcd_dvd_left m n))\n      (dvd_gcd ((gcd_dvd_left (gcd m n) k).trans (gcd_dvd_right m n)) (gcd_dvd_right (gcd m n) k)))\n    (dvd_gcd (dvd_gcd (gcd_dvd_left m (gcd n k)) ((gcd_dvd_right m (gcd n k)).trans (gcd_dvd_left n k)))\n      ((gcd_dvd_right m (gcd n k)).trans (gcd_dvd_right n k)))\n#align gcd_assoc gcd_assoc\n-/\n\n",
 "extract_gcd":
 "#print extract_gcd /-\ntheorem extract_gcd {α : Type _} [CancelCommMonoidWithZero α] [GCDMonoid α] (x y : α) :\n    ∃ x' y', x = gcd x y * x' ∧ y = gcd x y * y' ∧ IsUnit (gcd x' y') :=\n  by\n  by_cases h : gcd x y = 0\n  · obtain ⟨rfl, rfl⟩ := (gcd_eq_zero_iff x y).1 h\n    simp_rw [← associated_one_iff_isUnit]\n    exact ⟨1, 1, by rw [h, MulZeroClass.zero_mul], by rw [h, MulZeroClass.zero_mul], gcd_one_left' 1⟩\n  obtain ⟨x', ex⟩ := gcd_dvd_left x y\n  obtain ⟨y', ey⟩ := gcd_dvd_right x y\n  exact ⟨x', y', ex, ey, isUnit_gcd_of_eq_mul_gcd ex ey h⟩\n#align extract_gcd extract_gcd\n-/\n\n",
 "exists_eq_pow_of_mul_eq_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print exists_eq_pow_of_mul_eq_pow /-\ntheorem exists_eq_pow_of_mul_eq_pow [GCDMonoid α] [Unique («expr ˣ» α)] {a b c : α} (hab : IsUnit (gcd a b)) {k : ℕ}\n    (h : a * b = c ^ k) : ∃ d : α, a = d ^ k :=\n  let ⟨d, hd⟩ := exists_associated_pow_of_mul_eq_pow hab h\n  ⟨d, (associated_iff_eq.mp hd).symm⟩\n#align exists_eq_pow_of_mul_eq_pow exists_eq_pow_of_mul_eq_pow\n-/\n\n",
 "exists_dvd_and_dvd_of_dvd_mul":
 "#print exists_dvd_and_dvd_of_dvd_mul /-\n/-- Represent a divisor of `m * n` as a product of a divisor of `m` and a divisor of `n`.\n\nIn other words, the nonzero elements of a `gcd_monoid` form a decomposition monoid\n(more widely known as a pre-Schreier domain in the context of rings).\n\nNote: In general, this representation is highly non-unique.\n\nSee `nat.prod_dvd_and_dvd_of_dvd_prod` for a constructive version on `ℕ`.  -/\ntheorem exists_dvd_and_dvd_of_dvd_mul [GCDMonoid α] {m n k : α} (H : k ∣ m * n) :\n    ∃ d₁ d₂, d₁ ∣ m ∧ d₂ ∣ n ∧ k = d₁ * d₂ := by\n  by_cases h0 : gcd k m = 0\n  · rw [gcd_eq_zero_iff] at h0\n    rcases h0 with ⟨rfl, rfl⟩\n    refine' ⟨0, n, dvd_refl 0, dvd_refl n, _⟩\n    simp\n  · obtain ⟨a, ha⟩ := gcd_dvd_left k m\n    refine' ⟨gcd k m, a, gcd_dvd_right _ _, _, ha⟩\n    suffices h : gcd k m * a ∣ gcd k m * n\n    · cases' h with b hb\n      use b\n      rw [mul_assoc] at hb\n      apply mul_left_cancel₀ h0 hb\n    rw [← ha]\n    exact dvd_gcd_mul_of_dvd_mul H\n#align exists_dvd_and_dvd_of_dvd_mul exists_dvd_and_dvd_of_dvd_mul\n-/\n\n",
 "exists_associated_pow_of_mul_eq_pow":
 "#print exists_associated_pow_of_mul_eq_pow /-\ntheorem exists_associated_pow_of_mul_eq_pow [GCDMonoid α] {a b c : α} (hab : IsUnit (gcd a b)) {k : ℕ}\n    (h : a * b = c ^ k) : ∃ d : α, Associated (d ^ k) a :=\n  by\n  cases subsingleton_or_nontrivial α\n  · use 0\n    rw [subsingleton.elim a (0 ^ k)]\n  by_cases ha : a = 0\n  · use 0\n    rw [ha]\n    obtain rfl | hk := k.eq_zero_or_pos\n    · exfalso\n      revert h\n      rw [ha, MulZeroClass.zero_mul, pow_zero]\n      apply zero_ne_one\n    · rw [zero_pow hk]\n  by_cases hb : b = 0\n  · use 1\n    rw [one_pow]\n    apply (associated_one_iff_is_unit.mpr hab).symm.trans\n    rw [hb]\n    exact gcd_zero_right' a\n  obtain rfl | hk := k.eq_zero_or_pos\n  · use 1\n    rw [pow_zero] at h⊢\n    use Units.mkOfMulEqOne _ _ h\n    rw [Units.val_mkOfMulEqOne, one_mul]\n  have hc : c ∣ a * b := by\n    rw [h]\n    exact dvd_pow_self _ hk.ne'\n  obtain ⟨d₁, d₂, hd₁, hd₂, hc⟩ := exists_dvd_and_dvd_of_dvd_mul hc\n  use d₁\n  obtain ⟨h0₁, ⟨a', ha'⟩⟩ := pow_dvd_of_mul_eq_pow ha hab h hc hd₁\n  rw [mul_comm] at h hc\n  rw [(gcd_comm' a b).is_unit_iff] at hab\n  obtain ⟨h0₂, ⟨b', hb'⟩⟩ := pow_dvd_of_mul_eq_pow hb hab h hc hd₂\n  rw [ha', hb', hc, mul_pow] at h\n  have h' : a' * b' = 1 := by\n    apply (mul_right_inj' h0₁).mp\n    rw [mul_one]\n    apply (mul_right_inj' h0₂).mp\n    rw [← h]\n    rw [mul_assoc, mul_comm a', ← mul_assoc _ b', ← mul_assoc b', mul_comm b']\n  use Units.mkOfMulEqOne _ _ h'\n  rw [Units.val_mkOfMulEqOne, ha']\n#align exists_associated_pow_of_mul_eq_pow exists_associated_pow_of_mul_eq_pow\n-/\n\n",
 "dvd_out_iff":
 "theorem dvd_out_iff (a : α) (b : Associates α) : a ∣ b.out ↔ Associates.mk a ≤ b :=\n  Quotient.inductionOn b <| by simp [Associates.out_mk, Associates.quotient_mk_eq_mk, mk_le_mk_iff_dvd_iff]\n#align dvd_out_iff dvd_out_iff\n\n",
 "dvd_normalize_iff":
 "#print dvd_normalize_iff /-\n--can be proven by simp\ntheorem dvd_normalize_iff {a b : α} : a ∣ normalize b ↔ a ∣ b :=\n  Units.dvd_mul_right\n#align dvd_normalize_iff dvd_normalize_iff\n-/\n\n",
 "dvd_mul_gcd_of_dvd_mul":
 "#print dvd_mul_gcd_of_dvd_mul /-\ntheorem dvd_mul_gcd_of_dvd_mul [GCDMonoid α] {m n k : α} (H : k ∣ m * n) : k ∣ m * gcd k n :=\n  by\n  rw [mul_comm] at H⊢\n  exact dvd_gcd_mul_of_dvd_mul H\n#align dvd_mul_gcd_of_dvd_mul dvd_mul_gcd_of_dvd_mul\n-/\n\n",
 "dvd_mul":
 "#print dvd_mul /-\ntheorem dvd_mul [GCDMonoid α] {k m n : α} : k ∣ m * n ↔ ∃ d₁ d₂, d₁ ∣ m ∧ d₂ ∣ n ∧ k = d₁ * d₂ :=\n  by\n  refine' ⟨exists_dvd_and_dvd_of_dvd_mul, _⟩\n  rintro ⟨d₁, d₂, hy, hz, rfl⟩\n  exact mul_dvd_mul hy hz\n#align dvd_mul dvd_mul\n-/\n\n",
 "dvd_lcm_right":
 "#print dvd_lcm_right /-\ntheorem dvd_lcm_right [GCDMonoid α] (a b : α) : b ∣ lcm a b :=\n  (lcm_dvd_iff.1 (dvd_refl (lcm a b))).2\n#align dvd_lcm_right dvd_lcm_right\n-/\n\n",
 "dvd_lcm_left":
 "#print dvd_lcm_left /-\ntheorem dvd_lcm_left [GCDMonoid α] (a b : α) : a ∣ lcm a b :=\n  (lcm_dvd_iff.1 (dvd_refl (lcm a b))).1\n#align dvd_lcm_left dvd_lcm_left\n-/\n\n",
 "dvd_gcd_mul_of_dvd_mul":
 "#print dvd_gcd_mul_of_dvd_mul /-\ntheorem dvd_gcd_mul_of_dvd_mul [GCDMonoid α] {m n k : α} (H : k ∣ m * n) : k ∣ gcd k m * n :=\n  (dvd_gcd (dvd_mul_right _ n) H).trans (gcd_mul_right' n k m).dvd\n#align dvd_gcd_mul_of_dvd_mul dvd_gcd_mul_of_dvd_mul\n-/\n\n",
 "dvd_gcd_iff":
 "#print dvd_gcd_iff /-\ntheorem dvd_gcd_iff [GCDMonoid α] (a b c : α) : a ∣ gcd b c ↔ a ∣ b ∧ a ∣ c :=\n  iff.intro (fun h => ⟨h.trans (gcd_dvd_left _ _), h.trans (gcd_dvd_right _ _)⟩) fun ⟨hab, hac⟩ => dvd_gcd hab hac\n#align dvd_gcd_iff dvd_gcd_iff\n-/\n\n",
 "dvd_antisymm_of_normalize_eq":
 "#print dvd_antisymm_of_normalize_eq /-\ntheorem dvd_antisymm_of_normalize_eq {a b : α} (ha : normalize a = a) (hb : normalize b = b) (hab : a ∣ b)\n    (hba : b ∣ a) : a = b :=\n  ha ▸ hb ▸ normalize_eq_normalize hab hba\n#align dvd_antisymm_of_normalize_eq dvd_antisymm_of_normalize_eq\n-/\n\n",
 "coe_norm_unit":
 "-- see Note [lower instance priority]\n-- `split_ifs` wants to split `normalize`, so handle the cases manually\n@[simp]\ntheorem coe_norm_unit {a : G₀} (h0 : a ≠ 0) : (↑(norm_unit a) : G₀) = a⁻¹ := by simp [norm_unit, h0]\n#align coe_norm_unit coe_norm_unit\n\n",
 "associated_normalize_iff":
 "#print associated_normalize_iff /-\ntheorem associated_normalize_iff {x y : α} : Associated x (normalize y) ↔ Associated x y :=\n  ⟨fun h => h.trans (normalize_associated y), fun h => h.trans (associated_normalize y)⟩\n#align associated_normalize_iff associated_normalize_iff\n-/\n\n",
 "associated_normalize":
 "#print associated_normalize /-\ntheorem associated_normalize (x : α) : Associated x (normalize x) :=\n  ⟨_, rfl⟩\n#align associated_normalize associated_normalize\n-/\n\n"}