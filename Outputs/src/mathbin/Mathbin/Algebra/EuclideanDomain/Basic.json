{"zero_mod":
 "@[simp]\ntheorem zero_mod (b : R) : 0 % b = 0 :=\n  mod_eq_zero.2 (dvd_zero _)\n#align zero_mod zero_mod\n\n",
 "zero_div":
 "#print zero_div /-\n@[simp]\ntheorem zero_div {a : R} : 0 / a = 0 :=\n  by_cases (fun a0 : a = 0 => a0.symm ▸ div_zero 0) fun a0 => by\n    simpa only [MulZeroClass.zero_mul] using mul_div_cancel 0 a0\n#align zero_div zero_div\n-/\n\n",
 "xgcd_aux_val":
 "theorem xgcd_aux_val (x y : R) : xgcdAux x 1 0 y 0 1 = (gcd x y, xgcd x y) := by\n  rw [xgcd, ← xgcd_aux_fst x y 1 0 0 1, prod.mk.eta]\n#align xgcd_aux_val xgcd_aux_val\n\n",
 "xgcd_aux_fst":
 "@[simp]\ntheorem xgcd_aux_fst (x y : R) : ∀ s t s' t', (xgcdAux x s t y s' t').1 = gcd x y :=\n  GCD.induction x y\n    (by\n      intros\n      rw [xgcd_zero_left, gcd_zero_left])\n    fun x y h IH s t s' t' => by\n    simp only [xgcd_aux_rec h, if_neg h, IH]\n    rw [← gcd_val]\n#align xgcd_aux_fst xgcd_aux_fst\n\n",
 "xgcd_aux_P":
 "theorem xgcd_aux_P (a b : R) {r r' : R} :\n    ∀ {s t s' t'}, P a b (r, s, t) → P a b (r', s', t') → P a b (xgcdAux r s t r' s' t') :=\n  GCD.induction r r'\n    (by\n      intros\n      simpa only [xgcd_zero_left] )\n    fun x y h IH s t s' t' p p' => by\n    rw [xgcd_aux_rec h]; refine' IH _ p; unfold P at p p'⊢\n    rw [mul_sub, mul_sub, add_sub, sub_add_eq_add_sub, ← p', sub_sub, mul_comm _ s, ← mul_assoc, mul_comm _ t, ←\n      mul_assoc, ← add_mul, ← p, mod_eq_sub_mul_div]\n#align xgcd_aux_P xgcd_aux_P\n\n",
 "mul_div_mul_comm_of_dvd_dvd":
 "theorem mul_div_mul_comm_of_dvd_dvd {a b c d : R} (hac : c ∣ a) (hbd : d ∣ b) : a * b / (c * d) = a / c * (b / d) :=\n  by\n  rcases eq_or_ne c 0 with (rfl | hc0); · simp\n  rcases eq_or_ne d 0 with (rfl | hd0); · simp\n  obtain ⟨k1, rfl⟩ := hac\n  obtain ⟨k2, rfl⟩ := hbd\n  rw [mul_div_cancel_left _ hc0, mul_div_cancel_left _ hd0, mul_mul_mul_comm,\n    mul_div_cancel_left _ (mul_ne_zero hc0 hd0)]\n#align mul_div_mul_comm_of_dvd_dvd mul_div_mul_comm_of_dvd_dvd\n\n",
 "mul_div_mul_cancel":
 "theorem mul_div_mul_cancel {a b c : R} (ha : a ≠ 0) (hcb : c ∣ b) : a * b / (a * c) = b / c :=\n  by\n  by_cases hc : c = 0; · simp [hc]\n  refine' eq_div_of_mul_eq_right hc (mul_left_cancel₀ ha _)\n  rw [← mul_assoc, ← mul_div_assoc _ (mul_dvd_mul_left a hcb), mul_div_cancel_left _ (mul_ne_zero ha hc)]\n#align mul_div_mul_cancel mul_div_mul_cancel\n\n",
 "mul_div_cancel_left":
 "#print mul_div_cancel_left /-\n/-\nCopyright (c) 2018 Louis Carlin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Louis Carlin, Mario Carneiro\n-/\ntheorem mul_div_cancel_left {a : R} (b) (a0 : a ≠ 0) : a * b / a = b :=\n  Eq.symm <|\n    eq_of_sub_eq_zero <|\n      by_contradiction fun h => by\n        have := mul_left_not_lt a h\n        rw [mul_sub, sub_eq_iff_eq_add'.2 (div_add_mod (a * b) a).symm] at this\n        exact this (mod_lt _ a0)\n#align mul_div_cancel_left mul_div_cancel_left\n-/\n\n",
 "mul_div_cancel":
 "#print mul_div_cancel /-\ntheorem mul_div_cancel (a) {b : R} (b0 : b ≠ 0) : a * b / b = a :=\n  by\n  rw [mul_comm]\n  exact mul_div_cancel_left a b0\n#align mul_div_cancel mul_div_cancel\n-/\n\n",
 "mul_div_assoc":
 "#print mul_div_assoc /-\ntheorem mul_div_assoc (x : R) {y z : R} (h : z ∣ y) : x * y / z = x * (y / z) := by\n  classical\n    by_cases hz : z = 0\n    · subst hz\n      rw [div_zero, div_zero, MulZeroClass.mul_zero]\n    rcases h with ⟨p, rfl⟩\n    rw [mul_div_cancel_left _ hz, mul_left_comm, mul_div_cancel_left _ hz]\n#align mul_div_assoc mul_div_assoc\n-/\n\n",
 "mod_self":
 "@[simp]\ntheorem mod_self (a : R) : a % a = 0 :=\n  mod_eq_zero.2 dvd_rfl\n#align mod_self mod_self\n\n",
 "mod_one":
 "@[simp]\ntheorem mod_one (a : R) : a % 1 = 0 :=\n  mod_eq_zero.2 (one_dvd _)\n#align mod_one mod_one\n\n",
 "mod_eq_zero":
 "@[simp]\ntheorem mod_eq_zero {a b : R} : a % b = 0 ↔ b ∣ a :=\n  ⟨fun h => by\n    rw [← div_add_mod a b, h, add_zero]\n    exact dvd_mul_right _ _, fun ⟨c, e⟩ =>\n    by\n    rw [e, ← add_left_cancel_iff, div_add_mod, add_zero]\n    haveI := Classical.dec\n    by_cases b0 : b = 0\n    · simp only [b0, MulZeroClass.zero_mul]\n    · rw [mul_div_cancel_left _ b0]⟩\n#align mod_eq_zero mod_eq_zero\n\n",
 "lcm_zero_right":
 "@[simp]\ntheorem lcm_zero_right (x : R) : lcm x 0 = 0 := by rw [lcm, MulZeroClass.mul_zero, zero_div]\n#align lcm_zero_right lcm_zero_right\n\n",
 "lcm_zero_left":
 "@[simp]\ntheorem lcm_zero_left (x : R) : lcm 0 x = 0 := by rw [lcm, MulZeroClass.zero_mul, zero_div]\n#align lcm_zero_left lcm_zero_left\n\n",
 "lcm_eq_zero_iff":
 "#print lcm_eq_zero_iff /-\n@[simp]\ntheorem lcm_eq_zero_iff {x y : R} : lcm x y = 0 ↔ x = 0 ∨ y = 0 :=\n  by\n  constructor\n  · intro hxy\n    rw [lcm, mul_div_assoc _ (gcd_dvd_right _ _), mul_eq_zero] at hxy\n    apply or_of_or_of_imp_right hxy\n    intro hy\n    by_cases hgxy : gcd x y = 0\n    · rw [EuclideanDomain.gcd_eq_zero_iff] at hgxy\n      exact hgxy.2\n    · rcases gcd_dvd x y with ⟨⟨r, hr⟩, ⟨s, hs⟩⟩\n      generalize gcd x y = g at hr hs hy hgxy⊢\n      subst hs\n      rw [mul_div_cancel_left _ hgxy] at hy\n      rw [hy, MulZeroClass.mul_zero]\n  rintro (hx | hy)\n  · rw [hx, lcm_zero_left]\n  · rw [hy, lcm_zero_right]\n#align lcm_eq_zero_iff lcm_eq_zero_iff\n-/\n\n",
 "lcm_dvd_iff":
 "#print lcm_dvd_iff /-\n@[simp]\ntheorem lcm_dvd_iff {x y z : R} : lcm x y ∣ z ↔ x ∣ z ∧ y ∣ z :=\n  ⟨fun hz => ⟨(dvd_lcm_left _ _).trans hz, (dvd_lcm_right _ _).trans hz⟩, fun ⟨hxz, hyz⟩ => lcm_dvd hxz hyz⟩\n#align lcm_dvd_iff lcm_dvd_iff\n-/\n\n",
 "lcm_dvd":
 "#print lcm_dvd /-\ntheorem lcm_dvd {x y z : R} (hxz : x ∣ z) (hyz : y ∣ z) : lcm x y ∣ z :=\n  by\n  rw [lcm]\n  by_cases hxy : gcd x y = 0\n  · rw [hxy, div_zero]\n    rw [EuclideanDomain.gcd_eq_zero_iff] at hxy\n    rwa [hxy.1] at hxz\n  rcases gcd_dvd x y with ⟨⟨r, hr⟩, ⟨s, hs⟩⟩\n  suffices x * y ∣ z * gcd x y by\n    cases' this with p hp\n    use p\n    generalize gcd x y = g at hxy hs hp⊢\n    subst hs\n    rw [mul_left_comm, mul_div_cancel_left _ hxy, ← mul_left_inj' hxy, hp]\n    rw [← mul_assoc]\n    simp only [mul_right_comm]\n  rw [gcd_eq_gcd_ab, mul_add]\n  apply dvd_add\n  · rw [mul_left_comm]\n    exact mul_dvd_mul_left _ (hyz.mul_right _)\n  · rw [mul_left_comm, mul_comm]\n    exact mul_dvd_mul_left _ (hxz.mul_right _)\n#align lcm_dvd lcm_dvd\n-/\n\n",
 "gcd_zero_right":
 "#print gcd_zero_right /-\n@[simp]\ntheorem gcd_zero_right (a : R) : gcd a 0 = a := by\n  rw [gcd]\n  split_ifs <;> simp only [h, zero_mod, gcd_zero_left]\n#align gcd_zero_right gcd_zero_right\n-/\n\n",
 "gcd_val":
 "theorem gcd_val (a b : R) : gcd a b = gcd (b % a) a := by\n  rw [gcd]\n  split_ifs <;> [simp only [h, mod_zero, gcd_zero_right], rfl]\n#align gcd_val gcd_val\n\n",
 "gcd_self":
 "@[simp]\ntheorem gcd_self (a : R) : gcd a a = a :=\n  gcd_eq_left.2 dvd_rfl\n#align gcd_self gcd_self\n\n",
 "gcd_one_left":
 "#print gcd_one_left /-\n@[simp]\ntheorem gcd_one_left (a : R) : gcd 1 a = 1 :=\n  gcd_eq_left.2 (one_dvd _)\n#align gcd_one_left gcd_one_left\n-/\n\n",
 "gcd_mul_lcm":
 "#print gcd_mul_lcm /-\n@[simp]\ntheorem gcd_mul_lcm (x y : R) : gcd x y * lcm x y = x * y :=\n  by\n  rw [lcm]; by_cases h : gcd x y = 0\n  · rw [h, MulZeroClass.zero_mul]\n    rw [EuclideanDomain.gcd_eq_zero_iff] at h\n    rw [h.1, MulZeroClass.zero_mul]\n  rcases gcd_dvd x y with ⟨⟨r, hr⟩, ⟨s, hs⟩⟩\n  generalize gcd x y = g at h hr⊢; subst hr\n  rw [mul_assoc, mul_div_cancel_left _ h]\n#align gcd_mul_lcm gcd_mul_lcm\n-/\n\n",
 "gcd_eq_zero_iff":
 "#print gcd_eq_zero_iff /-\nprotected theorem gcd_eq_zero_iff {a b : R} : gcd a b = 0 ↔ a = 0 ∧ b = 0 :=\n  ⟨fun h => by simpa [h] using gcd_dvd a b, by\n    rintro ⟨rfl, rfl⟩\n    exact gcd_zero_right _⟩\n#align gcd_eq_zero_iff gcd_eq_zero_iff\n-/\n\n",
 "gcd_eq_left":
 "theorem gcd_eq_left {a b : R} : gcd a b = a ↔ a ∣ b :=\n  ⟨fun h => by\n    rw [← h]\n    apply gcd_dvd_right, fun h => by rw [gcd_val, mod_eq_zero.2 h, gcd_zero_left]⟩\n#align gcd_eq_left gcd_eq_left\n\n",
 "gcd_eq_gcd_ab":
 "/-- An explicit version of **Bézout's lemma** for Euclidean domains. -/\ntheorem gcd_eq_gcd_ab (a b : R) : (gcd a b : R) = a * gcdA a b + b * gcdB a b :=\n  by\n  have :=\n    @xgcd_aux_P _ _ _ a b a b 1 0 0 1 (by rw [P, mul_one, MulZeroClass.mul_zero, add_zero])\n      (by rw [P, mul_one, MulZeroClass.mul_zero, zero_add])\n  rwa [xgcd_aux_val, xgcd_val] at this\n#align gcd_eq_gcd_ab gcd_eq_gcd_ab\n\n",
 "gcd_dvd_right":
 "theorem gcd_dvd_right (a b : R) : gcd a b ∣ b :=\n  (gcd_dvd a b).right\n#align gcd_dvd_right gcd_dvd_right\n\n",
 "gcd_dvd_left":
 "theorem gcd_dvd_left (a b : R) : gcd a b ∣ a :=\n  (gcd_dvd a b).left\n#align gcd_dvd_left gcd_dvd_left\n\n",
 "gcd_dvd":
 "theorem gcd_dvd (a b : R) : gcd a b ∣ a ∧ gcd a b ∣ b :=\n  GCD.induction a b\n    (fun b => by\n      rw [gcd_zero_left]\n      exact ⟨dvd_zero _, dvd_rfl⟩)\n    fun a b aneq ⟨IH₁, IH₂⟩ => by\n    rw [gcd_val]\n    exact ⟨IH₂, (dvd_mod_iff IH₂).1 IH₁⟩\n#align gcd_dvd gcd_dvd\n\n",
 "eq_div_of_mul_eq_right":
 "theorem eq_div_of_mul_eq_right {a b c : R} (ha : a ≠ 0) (h : a * b = c) : b = c / a := by\n  rw [← h, mul_div_cancel_left _ ha]\n#align eq_div_of_mul_eq_right eq_div_of_mul_eq_right\n\n",
 "eq_div_of_mul_eq_left":
 "theorem eq_div_of_mul_eq_left {a b c : R} (hb : b ≠ 0) (h : a * b = c) : a = c / b := by rw [← h, mul_div_cancel _ hb]\n#align eq_div_of_mul_eq_left eq_div_of_mul_eq_left\n\n",
 "dvd_mod_iff":
 "theorem dvd_mod_iff {a b c : R} (h : c ∣ b) : c ∣ a % b ↔ c ∣ a := by rw [← dvd_add_right (h.mul_right _), div_add_mod]\n#align dvd_mod_iff dvd_mod_iff\n\n",
 "dvd_lcm_right":
 "#print dvd_lcm_right /-\ntheorem dvd_lcm_right (x y : R) : y ∣ lcm x y :=\n  by_cases\n    (fun hxy : gcd x y = 0 => by\n      rw [lcm, hxy, div_zero]\n      exact dvd_zero _)\n    fun hxy =>\n    let ⟨z, hz⟩ := (gcd_dvd x y).1\n    ⟨z, Eq.symm <| eq_div_of_mul_eq_right hxy <| by rw [← mul_assoc, mul_right_comm, ← hz]⟩\n#align dvd_lcm_right dvd_lcm_right\n-/\n\n",
 "dvd_lcm_left":
 "#print dvd_lcm_left /-\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\ntheorem dvd_lcm_left (x y : R) : x ∣ lcm x y :=\n  by_cases\n    (fun hxy : gcd x y = 0 => by\n      rw [lcm, hxy, div_zero]\n      exact dvd_zero _)\n    fun hxy =>\n    let ⟨z, hz⟩ := (gcd_dvd x y).2\n    ⟨z, Eq.symm <| eq_div_of_mul_eq_left hxy <| by rw [mul_right_comm, mul_assoc, ← hz]⟩\n#align dvd_lcm_left dvd_lcm_left\n-/\n\n",
 "dvd_gcd":
 "theorem dvd_gcd {a b c : R} : c ∣ a → c ∣ b → c ∣ gcd a b :=\n  GCD.induction a b (fun _ _ H => by simpa only [gcd_zero_left] using H) fun a b a0 IH ca cb =>\n    by\n    rw [gcd_val]\n    exact IH ((dvd_mod_iff ca).2 cb) ca\n#align dvd_gcd dvd_gcd\n\n",
 "dvd_div_of_mul_dvd":
 "theorem dvd_div_of_mul_dvd {a b c : R} (h : a * b ∣ c) : b ∣ c / a :=\n  by\n  rcases eq_or_ne a 0 with (rfl | ha)\n  · simp only [div_zero, dvd_zero]\n  rcases h with ⟨d, rfl⟩\n  refine' ⟨d, _⟩\n  rw [mul_assoc, mul_div_cancel_left _ ha]\n#align dvd_div_of_mul_dvd dvd_div_of_mul_dvd\n\n",
 "div_self":
 "#print div_self /-\n@[simp]\ntheorem div_self {a : R} (a0 : a ≠ 0) : a / a = 1 := by simpa only [one_mul] using mul_div_cancel 1 a0\n#align div_self div_self\n-/\n\n",
 "div_one":
 "#print div_one /-\n-- This generalizes `int.div_one`, see note [simp-normal form]\n@[simp]\ntheorem div_one (p : R) : p / 1 = p :=\n  (EuclideanDomain.eq_div_of_mul_eq_left (one_ne_zero' R) (mul_one p)).symm\n#align div_one div_one\n-/\n\n",
 "div_dvd_of_dvd":
 "theorem div_dvd_of_dvd {p q : R} (hpq : q ∣ p) : p / q ∣ p :=\n  by\n  by_cases hq : q = 0\n  · rw [hq, zero_dvd_iff] at hpq\n    rw [hpq]\n    exact dvd_zero _\n  use q\n  rw [mul_comm, ← EuclideanDomain.mul_div_assoc _ hpq, mul_comm, EuclideanDomain.mul_div_cancel _ hq]\n#align div_dvd_of_dvd div_dvd_of_dvd\n\n"}