{"zero_ne_trop_coe":
 "@[simp]\ntheorem zero_ne_trop_coe (x : R) : (0 : Tropical (WithTop R)) ≠ trop x :=\n  fun.\n#align zero_ne_trop_coe zero_ne_trop_coe\n\n",
 "untrop_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem untrop_zpow [add_group R] (x : Tropical R) (n : ℤ) : untrop (x ^ n) = «expr • » n (untrop x) :=\n  rfl\n#align untrop_zpow untrop_zpow\n\n",
 "untrop_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem untrop_zero [Top R] : untrop (0 : Tropical R) = «expr⊤» :=\n  rfl\n#align untrop_zero untrop_zero\n\n",
 "untrop_trop":
 "@[simp]\ntheorem untrop_trop (x : R) : untrop (trop x) = x :=\n  rfl\n#align untrop_trop untrop_trop\n\n",
 "untrop_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem untrop_sup (x y : Tropical R) : untrop («expr ⊔ » x y) = «expr ⊔ » (untrop x) (untrop y) :=\n  rfl\n#align untrop_sup untrop_sup\n\n",
 "untrop_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem untrop_pow {α : Type _} [SMul α R] (x : Tropical R) (n : α) : untrop (x ^ n) = «expr • » n (untrop x) :=\n  rfl\n#align untrop_pow untrop_pow\n\n",
 "untrop_one":
 "@[simp]\ntheorem untrop_one [Zero R] : untrop (1 : Tropical R) = 0 :=\n  rfl\n#align untrop_one untrop_one\n\n",
 "untrop_mul":
 "@[simp]\ntheorem untrop_mul [Add R] (x y : Tropical R) : untrop (x * y) = untrop x + untrop y :=\n  rfl\n#align untrop_mul untrop_mul\n\n",
 "untrop_monotone":
 "theorem untrop_monotone [preorder R] : monotone (untrop : Tropical R → R) := fun _ _ => id\n#align untrop_monotone untrop_monotone\n\n",
 "untrop_max":
 "@[simp]\ntheorem untrop_max (x y : Tropical R) : untrop (max x y) = max (untrop x) (untrop y) :=\n  rfl\n#align untrop_max untrop_max\n\n",
 "untrop_lt_iff":
 "@[simp]\ntheorem untrop_lt_iff [LT R] {x y : Tropical R} : untrop x < untrop y ↔ x < y :=\n  iff.rfl\n#align untrop_lt_iff untrop_lt_iff\n\n",
 "untrop_le_iff":
 "@[simp]\ntheorem untrop_le_iff [LE R] {x y : Tropical R} : untrop x ≤ untrop y ↔ x ≤ y :=\n  iff.rfl\n#align untrop_le_iff untrop_le_iff\n\n",
 "untrop_inv":
 "@[simp]\ntheorem untrop_inv [Neg R] (x : Tropical R) : untrop x⁻¹ = -untrop x :=\n  rfl\n#align untrop_inv untrop_inv\n\n",
 "untrop_injective":
 "theorem untrop_injective : function.injective (untrop : Tropical R → R) := fun _ _ => id\n#align untrop_injective untrop_injective\n\n",
 "untrop_inj_iff":
 "@[simp]\ntheorem untrop_inj_iff (x y : Tropical R) : untrop x = untrop y ↔ x = y :=\n  iff.rfl\n#align untrop_inj_iff untrop_inj_iff\n\n",
 "untrop_eq_iff_eq_trop":
 "theorem untrop_eq_iff_eq_trop {x} {y : R} : untrop x = y ↔ x = trop y :=\n  tropEquiv.symm.apply_eq_iff_eq_symm_apply\n#align untrop_eq_iff_eq_trop untrop_eq_iff_eq_trop\n\n",
 "untrop_div":
 "@[simp]\ntheorem untrop_div [Sub R] (x y : Tropical R) : untrop (x / y) = untrop x - untrop y :=\n  rfl\n#align untrop_div untrop_div\n\n",
 "untrop_add":
 "@[simp]\ntheorem untrop_add (x y : Tropical R) : untrop (x + y) = min (untrop x) (untrop y) :=\n  rfl\n#align untrop_add untrop_add\n\n",
 "trop_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem trop_zsmul [add_group R] (x : R) (n : ℤ) : trop («expr • » n x) = trop x ^ n :=\n  rfl\n#align trop_zsmul trop_zsmul\n\n",
 "trop_zero":
 "@[simp]\ntheorem trop_zero [Zero R] : trop (0 : R) = 1 :=\n  rfl\n#align trop_zero trop_zero\n\n",
 "trop_untrop":
 "@[simp]\ntheorem trop_untrop (x : Tropical R) : trop (untrop x) = x :=\n  rfl\n#align trop_untrop trop_untrop\n\n",
 "trop_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem trop_top [Top R] : trop («expr⊤» : R) = 0 :=\n  rfl\n#align trop_top trop_top\n\n",
 "trop_sup_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\ntheorem trop_sup_def (x y : Tropical R) : «expr ⊔ » x y = trop («expr ⊔ » (untrop x) (untrop y)) :=\n  rfl\n#align trop_sup_def trop_sup_def\n\n",
 "trop_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem trop_smul {α : Type _} [SMul α R] (x : R) (n : α) : trop («expr • » n x) = trop x ^ n :=\n  rfl\n#align trop_smul trop_smul\n\n",
 "trop_order_iso_symm_coe_fn":
 "@[simp]\ntheorem trop_order_iso_symm_coe_fn [preorder R] : (tropOrderIso.symm : Tropical R → R) = untrop :=\n  rfl\n#align trop_order_iso_symm_coe_fn trop_order_iso_symm_coe_fn\n\n",
 "trop_order_iso_coe_fn":
 "@[simp]\ntheorem trop_order_iso_coe_fn [preorder R] : (tropOrderIso : R → Tropical R) = trop :=\n  rfl\n#align trop_order_iso_coe_fn trop_order_iso_coe_fn\n\n",
 "trop_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem trop_nsmul [add_monoid R] (x : R) (n : ℕ) : trop («expr • » n x) = trop x ^ n :=\n  rfl\n#align trop_nsmul trop_nsmul\n\n",
 "trop_mul_def":
 "theorem trop_mul_def [Add R] (x y : Tropical R) : x * y = trop (untrop x + untrop y) :=\n  rfl\n#align trop_mul_def trop_mul_def\n\n",
 "trop_monotone":
 "theorem trop_monotone [preorder R] : monotone (trop : R → Tropical R) := fun _ _ => id\n#align trop_monotone trop_monotone\n\n",
 "trop_min":
 "@[simp]\ntheorem trop_min (x y : R) : trop (min x y) = trop x + trop y :=\n  rfl\n#align trop_min trop_min\n\n",
 "trop_max_def":
 "theorem trop_max_def (x y : Tropical R) : max x y = trop (max (untrop x) (untrop y)) :=\n  rfl\n#align trop_max_def trop_max_def\n\n",
 "trop_injective":
 "/-\nCopyright (c) 2021 Yakov Pechersky. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yakov Pechersky\n-/\ntheorem trop_injective : function.injective (trop : R → Tropical R) := fun _ _ => id\n#align trop_injective trop_injective\n\n",
 "trop_inj_iff":
 "@[simp]\ntheorem trop_inj_iff (x y : R) : trop x = trop y ↔ x = y :=\n  iff.rfl\n#align trop_inj_iff trop_inj_iff\n\n",
 "trop_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem trop_inf (x y : R) : trop («expr ⊓ » x y) = trop x + trop y :=\n  rfl\n#align trop_inf trop_inf\n\n",
 "trop_equiv_symm_coe_fn":
 "@[simp]\ntheorem trop_equiv_symm_coe_fn : (tropEquiv.symm : Tropical R → R) = untrop :=\n  rfl\n#align trop_equiv_symm_coe_fn trop_equiv_symm_coe_fn\n\n",
 "trop_equiv_coe_fn":
 "@[simp]\ntheorem trop_equiv_coe_fn : (tropEquiv : R → Tropical R) = trop :=\n  rfl\n#align trop_equiv_coe_fn trop_equiv_coe_fn\n\n",
 "trop_eq_iff_eq_untrop":
 "theorem trop_eq_iff_eq_untrop {x : R} {y} : trop x = y ↔ x = untrop y :=\n  tropEquiv.apply_eq_iff_eq_symm_apply\n#align trop_eq_iff_eq_untrop trop_eq_iff_eq_untrop\n\n",
 "trop_coe_ne_zero":
 "@[simp]\ntheorem trop_coe_ne_zero (x : R) : trop (x : WithTop R) ≠ 0 :=\n  fun.\n#align trop_coe_ne_zero trop_coe_ne_zero\n\n",
 "trop_add_def":
 "theorem trop_add_def (x y : Tropical R) : x + y = trop (min (untrop x) (untrop y)) :=\n  rfl\n#align trop_add_def trop_add_def\n\n",
 "trop_add":
 "@[simp]\ntheorem trop_add [Add R] (x y : R) : trop (x + y) = trop x * trop y :=\n  rfl\n#align trop_add trop_add\n\n",
 "surjective_untrop":
 "theorem surjective_untrop : function.surjective (untrop : Tropical R → R) :=\n  tropEquiv.symm.surjective\n#align surjective_untrop surjective_untrop\n\n",
 "surjective_trop":
 "theorem surjective_trop : function.surjective (trop : R → Tropical R) :=\n  tropEquiv.surjective\n#align surjective_trop surjective_trop\n\n",
 "succ_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print succ_nsmul /-\n@[simp]\ntheorem succ_nsmul {R} [linear_order R] [OrderTop R] (x : Tropical R) (n : ℕ) : «expr • » (n + 1) x = x :=\n  by\n  induction' n with n IH\n  · simp\n  · rw [add_nsmul, IH, one_nsmul, add_self]\n#align succ_nsmul succ_nsmul\n-/\n\n",
 "right_inverse_trop":
 "theorem right_inverse_trop : function.right_inverse (trop : R → Tropical R) untrop :=\n  trop_untrop\n#align right_inverse_trop right_inverse_trop\n\n",
 "mul_eq_zero_iff":
 "-- TODO: find/create the right classes to make this hold (for enat, ennreal, etc)\n-- Requires `zero_eq_bot` to be true\n-- lemma add_eq_zero_iff {a b : tropical R} :\n--   a + b = 1 ↔ a = 1 ∨ b = 1 := sorry\n@[simp]\ntheorem mul_eq_zero_iff {R : Type _} [LinearOrderedAddCommMonoid R] {a b : Tropical (WithTop R)} :\n    a * b = 0 ↔ a = 0 ∨ b = 0 := by simp [← untrop_inj_iff, WithTop.add_eq_top]\n#align mul_eq_zero_iff mul_eq_zero_iff\n\n",
 "min_eq_add":
 "@[simp]\ntheorem min_eq_add : (min : Tropical R → Tropical R → Tropical R) = (· + ·) :=\n  rfl\n#align min_eq_add min_eq_add\n\n",
 "left_inverse_trop":
 "theorem left_inverse_trop : function.left_inverse (trop : R → Tropical R) untrop :=\n  trop_untrop\n#align left_inverse_trop left_inverse_trop\n\n",
 "le_zero":
 "@[simp]\ntheorem le_zero [LE R] [OrderTop R] (x : Tropical R) : x ≤ 0 :=\n  le_top\n#align le_zero le_zero\n\n",
 "injective_untrop":
 "theorem injective_untrop : function.injective (untrop : Tropical R → R) :=\n  tropEquiv.symm.injective\n#align injective_untrop injective_untrop\n\n",
 "injective_trop":
 "theorem injective_trop : function.injective (trop : R → Tropical R) :=\n  tropEquiv.injective\n#align injective_trop injective_trop\n\n",
 "inf_eq_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n@[simp]\ntheorem inf_eq_add : ((«expr ⊓ » · ·) : Tropical R → Tropical R → Tropical R) = (· + ·) :=\n  rfl\n#align inf_eq_add inf_eq_add\n\n",
 "bit0":
 "#print bit0 /-\n@[simp]\ntheorem bit0 (x : Tropical R) : bit0 x = x :=\n  add_self x\n#align bit0 bit0\n-/\n\n",
 "add_self":
 "@[simp]\ntheorem add_self (x : Tropical R) : x + x = x :=\n  untrop_injective (min_eq_right le_rfl)\n#align add_self add_self\n\n",
 "add_pow":
 "@[simp]\ntheorem add_pow [linear_order R] [add_monoid R] [covariant_class R R (· + ·) (· ≤ ·)]\n    [covariant_class R R (function.swap (· + ·)) (· ≤ ·)] (x y : Tropical R) (n : ℕ) : (x + y) ^ n = x ^ n + y ^ n :=\n  by\n  cases' le_total x y with h h\n  · rw [add_eq_left h, add_eq_left (pow_le_pow_of_le_left' h _)]\n  · rw [add_eq_right h, add_eq_right (pow_le_pow_of_le_left' h _)]\n#align add_pow add_pow\n\n",
 "add_eq_zero_iff":
 "#print add_eq_zero_iff /-\n@[simp]\ntheorem add_eq_zero_iff {a b : Tropical (WithTop R)} : a + b = 0 ↔ a = 0 ∧ b = 0 :=\n  by\n  rw [add_eq_iff]\n  constructor\n  · rintro (⟨rfl, h⟩ | ⟨rfl, h⟩)\n    · exact ⟨rfl, le_antisymm (le_zero _) h⟩\n    · exact ⟨le_antisymm (le_zero _) h, rfl⟩\n  · rintro ⟨rfl, rfl⟩\n    simp\n#align add_eq_zero_iff add_eq_zero_iff\n-/\n\n",
 "add_eq_right_iff":
 "theorem add_eq_right_iff {x y : Tropical R} : x + y = y ↔ y ≤ x := by\n  rw [trop_add_def, trop_eq_iff_eq_untrop, ← untrop_le_iff, min_eq_right_iff]\n#align add_eq_right_iff add_eq_right_iff\n\n",
 "add_eq_right":
 "@[simp]\ntheorem add_eq_right ⦃x y : Tropical R⦄ (h : y ≤ x) : x + y = y :=\n  untrop_injective (by simpa using h)\n#align add_eq_right add_eq_right\n\n",
 "add_eq_left_iff":
 "theorem add_eq_left_iff {x y : Tropical R} : x + y = x ↔ x ≤ y := by\n  rw [trop_add_def, trop_eq_iff_eq_untrop, ← untrop_le_iff, min_eq_left_iff]\n#align add_eq_left_iff add_eq_left_iff\n\n",
 "add_eq_left":
 "@[simp]\ntheorem add_eq_left ⦃x y : Tropical R⦄ (h : x ≤ y) : x + y = x :=\n  untrop_injective (by simpa using h)\n#align add_eq_left add_eq_left\n\n",
 "add_eq_iff":
 "theorem add_eq_iff {x y z : Tropical R} : x + y = z ↔ x = z ∧ x ≤ y ∨ y = z ∧ y ≤ x :=\n  by\n  rw [trop_add_def, trop_eq_iff_eq_untrop]\n  simp [min_eq_iff]\n#align add_eq_iff add_eq_iff\n\n"}