{"traverse_pure'":
 "@[simp, to_additive]\ntheorem traverse_pure' : traverse F ∘ pure = fun x => (pure <$> F x : m (free_semigroup β)) :=\n  rfl\n#align traverse_pure' traverse_pure'\n\n",
 "traverse_pure":
 "@[simp, to_additive]\ntheorem traverse_pure (x) : traverse F (pure x : free_semigroup α) = pure <$> F x :=\n  rfl\n#align traverse_pure traverse_pure\n\n",
 "traverse_mul'":
 "@[simp, to_additive]\ntheorem traverse_mul' :\n    function.comp (traverse F) ∘ @has_mul.mul (free_semigroup α) _ = fun x y =>\n      (· * ·) <$> traverse F x <*> traverse F y :=\n  funext fun x => funext fun y => traverse_mul F x y\n#align traverse_mul' traverse_mul'\n\n",
 "traverse_mul":
 "@[simp, to_additive]\ntheorem traverse_mul (x y : free_semigroup α) : traverse F (x * y) = (· * ·) <$> traverse F x <*> traverse F y :=\n  let ⟨x, L1⟩ := x\n  let ⟨y, L2⟩ := y\n  list.rec_on L1 (fun x => rfl)\n    (fun hd tl ih x =>\n      show\n        (· * ·) <$> pure <$> F x <*> traverse F (mk hd tl * mk y L2) =\n          (· * ·) <$> ((· * ·) <$> pure <$> F x <*> traverse F (mk hd tl)) <*> traverse F (mk y L2)\n        by rw [ih] <;> simp only [(· ∘ ·), (mul_assoc _ _ _).symm, functor_norm])\n    x\n#align traverse_mul traverse_mul\n\n",
 "traverse_eq":
 "@[simp, to_additive]\ntheorem traverse_eq (x) : free_semigroup.traverse F x = traverse F x :=\n  rfl\n#align traverse_eq traverse_eq\n\n",
 "to_free_semigroup_of":
 "@[simp, to_additive]\ntheorem to_free_semigroup_of (x : α) : to_free_semigroup (of x) = free_semigroup.of x :=\n  rfl\n#align to_free_semigroup_of to_free_semigroup_of\n\n",
 "to_free_semigroup_map":
 "@[to_additive]\ntheorem to_free_semigroup_map (f : α → β) (x : free_magma α) :\n    (map f x).to_free_semigroup = free_semigroup.map f x.to_free_semigroup :=\n  fun_like.congr_fun (to_free_semigroup_comp_map f) x\n#align to_free_semigroup_map to_free_semigroup_map\n\n",
 "to_free_semigroup_comp_of":
 "@[simp, to_additive]\ntheorem to_free_semigroup_comp_of : @to_free_semigroup α ∘ of = free_semigroup.of :=\n  rfl\n#align to_free_semigroup_comp_of to_free_semigroup_comp_of\n\n",
 "to_free_semigroup_comp_map":
 "@[to_additive]\ntheorem to_free_semigroup_comp_map (f : α → β) :\n    to_free_semigroup.comp (map f) = (free_semigroup.map f).comp to_free_semigroup :=\n  by\n  ext1\n  rfl\n#align to_free_semigroup_comp_map to_free_semigroup_comp_map\n\n",
 "tail_mul":
 "@[simp, to_additive]\ntheorem tail_mul (x y : free_semigroup α) : (x * y).2 = x.2 ++ y.1 :: y.2 :=\n  rfl\n#align tail_mul tail_mul\n\n",
 "quot_mk_assoc_left":
 "@[to_additive]\ntheorem quot_mk_assoc_left (x y z w : α) : Quot.mk (assoc_rel α) (x * (y * z * w)) = Quot.mk _ (x * (y * (z * w))) :=\n  quot.sound (assoc_rel.left _ _ _ _)\n#align quot_mk_assoc_left quot_mk_assoc_left\n\n",
 "quot_mk_assoc":
 "@[to_additive]\ntheorem quot_mk_assoc (x y z : α) : Quot.mk (assoc_rel α) (x * y * z) = Quot.mk _ (x * (y * z)) :=\n  quot.sound (assoc_rel.intro _ _ _)\n#align quot_mk_assoc quot_mk_assoc\n\n",
 "pure_seq":
 "@[simp, to_additive]\ntheorem pure_seq {f : α → β} {x : free_semigroup α} : pure f <*> x = f <$> x :=\n  rfl\n#align pure_seq pure_seq\n\n",
 "pure_bind":
 "@[simp, to_additive]\ntheorem pure_bind (f : α → free_semigroup β) (x) : pure x >>= f = f x :=\n  rfl\n#align pure_bind pure_bind\n\n",
 "mul_seq":
 "@[simp, to_additive]\ntheorem mul_seq {f g : free_semigroup (α → β)} {x : free_semigroup α} : f * g <*> x = (f <*> x) * (g <*> x) :=\n  mul_bind _ _ _\n#align mul_seq mul_seq\n\n",
 "mul_map_seq":
 "@[simp, to_additive]\ntheorem mul_map_seq (x y : free_semigroup α) :\n    ((· * ·) <$> x <*> y : id (free_semigroup α)) = (x * y : free_semigroup α) :=\n  rfl\n#align mul_map_seq mul_map_seq\n\n",
 "mul_eq":
 "/-\nCopyright (c) 2019 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\n@[simp, to_additive]\ntheorem mul_eq (x y : free_magma α) : mul x y = x * y :=\n  rfl\n#align mul_eq mul_eq\n\n",
 "mul_bind":
 "@[simp, to_additive]\ntheorem mul_bind (f : α → free_semigroup β) (x y : free_semigroup α) : x * y >>= f = (x >>= f) * (y >>= f) :=\n  map_mul (lift f) _ _\n#align mul_bind mul_bind\n\n",
 "mk_mul_mk":
 "@[simp, to_additive]\ntheorem mk_mul_mk (x y : α) (L1 L2 : list α) : mk x L1 * mk y L2 = mk x (L1 ++ y :: L2) :=\n  rfl\n#align mk_mul_mk mk_mul_mk\n\n",
 "map_pure":
 "@[simp, to_additive]\ntheorem map_pure (f : α → β) (x) : (f <$> pure x : free_semigroup β) = pure (f x) :=\n  rfl\n#align map_pure map_pure\n\n",
 "map_of":
 "@[simp, to_additive]\ntheorem map_of (x) : map f (of x) = of (f x) :=\n  rfl\n#align map_of map_of\n\n",
 "map_mul'":
 "@[simp, to_additive]\ntheorem map_mul' (f : α → β) (x y : free_semigroup α) : f <$> (x * y) = f <$> x * f <$> y :=\n  map_mul (map f) _ _\n#align map_mul' map_mul'\n\n",
 "lift_of_mul":
 "@[to_additive]\ntheorem lift_of_mul (x y) : lift f (of x * y) = f x * lift f y := by rw [map_mul, lift_of]\n#align lift_of_mul lift_of_mul\n\n",
 "lift_of":
 "@[simp, to_additive]\ntheorem lift_of (x : α) : lift f (of x) = f x :=\n  rfl\n#align lift_of lift_of\n\n",
 "lift_comp_of'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ* » -/\n@[simp, to_additive]\ntheorem lift_comp_of' (f : «expr →ₙ* » (free_semigroup α) β) : lift (f ∘ of) = f :=\n  hom_ext rfl\n#align lift_comp_of' lift_comp_of'\n\n",
 "lift_comp_of":
 "@[simp, to_additive]\ntheorem lift_comp_of : lift f ∘ of = f :=\n  rfl\n#align lift_comp_of lift_comp_of\n\n",
 "length_to_free_semigroup":
 "@[simp, to_additive]\ntheorem length_to_free_semigroup (x : free_magma α) : x.to_free_semigroup.length = x.length :=\n  free_magma.rec_on_mul x (fun x => rfl) fun x y hx hy => by rw [map_mul, free_semigroup.length_mul, length, hx, hy]\n#align length_to_free_semigroup length_to_free_semigroup\n\n",
 "length_of":
 "@[simp, to_additive]\ntheorem length_of (x : α) : (of x).length = 1 :=\n  rfl\n#align length_of length_of\n\n",
 "length_mul":
 "@[simp, to_additive]\ntheorem length_mul (x y : free_semigroup α) : (x * y).length = x.length + y.length := by\n  simp [length, ← add_assoc, add_right_comm]\n#align length_mul length_mul\n\n",
 "length_map":
 "@[simp, to_additive]\ntheorem length_map (x) : (map f x).length = x.length :=\n  free_semigroup.rec_on_mul x (fun x => rfl) fun x y hx hy => by simp only [map_mul, length_mul, *]\n#align length_map length_map\n\n",
 "induction_on":
 "@[elab_as_elim, to_additive]\nprotected theorem induction_on {C : assoc_quotient α → Prop} (x : assoc_quotient α) (ih : ∀ x, C (of x)) : C x :=\n  Quot.inductionOn x ih\n#align induction_on induction_on\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ* » -/\n@[ext, to_additive]\ntheorem hom_ext {β : Type v} [Mul β] {f g : «expr →ₙ* » (free_semigroup α) β} (h : f ∘ of = g ∘ of) : f = g :=\n  fun_like.ext _ _ fun x => free_semigroup.rec_on_mul x (congr_fun h) fun x y hx hy => by simp only [map_mul, *]\n#align hom_ext hom_ext\n\n",
 "head_mul":
 "@[simp, to_additive]\ntheorem head_mul (x y : free_semigroup α) : (x * y).1 = x.1 :=\n  rfl\n#align head_mul head_mul\n\n"}