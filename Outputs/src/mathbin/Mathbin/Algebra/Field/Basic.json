{"to_lex_rat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem to_lex_rat_cast [RatCast α] (n : exprℚ) : to_lex (n : α) = n :=\n  rfl\n#align to_lex_rat_cast to_lex_rat_cast\n\n",
 "to_dual_rat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n-- See note [reducible non-instances]\n-- See note [reducible non-instances]\n@[simp]\ntheorem to_dual_rat_cast [RatCast α] (n : exprℚ) : toDual (n : α) = n :=\n  rfl\n#align to_dual_rat_cast to_dual_rat_cast\n\n",
 "sub_div'":
 "#print sub_div' /-\n@[field_simps]\ntheorem sub_div' (a b c : K) (hc : c ≠ 0) : b - a / c = (b * c - a) / c := by simpa using div_sub_div b a one_ne_zero hc\n#align sub_div' sub_div'\n-/\n\n",
 "sub_div":
 "#print sub_div /-\ntheorem sub_div (a b c : K) : (a - b) / c = a / c - b / c :=\n  (div_sub_div_same _ _ _).symm\n#align sub_div sub_div\n-/\n\n",
 "same_sub_div":
 "#print same_sub_div /-\ntheorem same_sub_div {a b : K} (h : b ≠ 0) : (b - a) / b = 1 - a / b := by\n  simpa only [← @div_self _ _ b h] using (div_sub_div_same b a b).symm\n#align same_sub_div same_sub_div\n-/\n\n",
 "same_add_div":
 "#print same_add_div /-\ntheorem same_add_div (h : b ≠ 0) : (b + a) / b = 1 + a / b := by rw [← div_self h, add_div]\n#align same_add_div same_add_div\n-/\n\n",
 "one_sub_div":
 "#print one_sub_div /-\ntheorem one_sub_div {a b : K} (h : b ≠ 0) : 1 - a / b = (b - a) / b :=\n  (same_sub_div h).symm\n#align one_sub_div one_sub_div\n-/\n\n",
 "one_div_neg_one_eq_neg_one":
 "#print one_div_neg_one_eq_neg_one /-\ntheorem one_div_neg_one_eq_neg_one : (1 : K) / -1 = -1 :=\n  have : -1 * -1 = (1 : K) := by rw [neg_mul_neg, one_mul]\n  eq.symm (eq_one_div_of_mul_eq_one_right this)\n#align one_div_neg_one_eq_neg_one one_div_neg_one_eq_neg_one\n-/\n\n",
 "one_div_neg_eq_neg_one_div":
 "#print one_div_neg_eq_neg_one_div /-\ntheorem one_div_neg_eq_neg_one_div (a : K) : 1 / -a = -(1 / a) :=\n  calc\n    1 / -a = 1 / (-1 * a) := by rw [neg_eq_neg_one_mul]\n    _ = 1 / a * (1 / -1) := by rw [one_div_mul_one_div_rev]\n    _ = 1 / a * -1 := by rw [one_div_neg_one_eq_neg_one]\n    _ = -(1 / a) := by rw [mul_neg, mul_one]\n    \n#align one_div_neg_eq_neg_one_div one_div_neg_eq_neg_one_div\n-/\n\n",
 "one_div_mul_sub_mul_one_div_eq_one_div_add_one_div":
 "#print one_div_mul_sub_mul_one_div_eq_one_div_add_one_div /-\ntheorem one_div_mul_sub_mul_one_div_eq_one_div_add_one_div (ha : a ≠ 0) (hb : b ≠ 0) :\n    1 / a * (b - a) * (1 / b) = 1 / a - 1 / b := by\n  rw [mul_sub_left_distrib (1 / a), one_div_mul_cancel ha, mul_sub_right_distrib, one_mul, mul_assoc,\n    mul_one_div_cancel hb, mul_one]\n#align one_div_mul_sub_mul_one_div_eq_one_div_add_one_div one_div_mul_sub_mul_one_div_eq_one_div_add_one_div\n-/\n\n",
 "one_div_mul_add_mul_one_div_eq_one_div_add_one_div":
 "#print one_div_mul_add_mul_one_div_eq_one_div_add_one_div /-\ntheorem one_div_mul_add_mul_one_div_eq_one_div_add_one_div (ha : a ≠ 0) (hb : b ≠ 0) :\n    1 / a * (a + b) * (1 / b) = 1 / a + 1 / b := by\n  rw [mul_add, one_div_mul_cancel ha, add_mul, one_mul, mul_assoc, mul_one_div_cancel hb, mul_one, add_comm]\n#align one_div_mul_add_mul_one_div_eq_one_div_add_one_div one_div_mul_add_mul_one_div_eq_one_div_add_one_div\n-/\n\n",
 "one_div_add_one_div":
 "#print one_div_add_one_div /-\ntheorem one_div_add_one_div (ha : a ≠ 0) (hb : b ≠ 0) : 1 / a + 1 / b = (a + b) / (a * b) := by\n  rw [div_add_div _ _ ha hb, one_mul, mul_one, add_comm]\n#align one_div_add_one_div one_div_add_one_div\n-/\n\n",
 "one_add_div":
 "#print one_add_div /-\ntheorem one_add_div (h : b ≠ 0) : 1 + a / b = (b + a) / b :=\n  (same_add_div h).symm\n#align one_add_div one_add_div\n-/\n\n",
 "of_lex_rat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem of_lex_rat_cast [RatCast α] (n : exprℚ) : (of_lex n : α) = n :=\n  rfl\n#align of_lex_rat_cast of_lex_rat_cast\n\n",
 "of_dual_rat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem of_dual_rat_cast [RatCast α] (n : exprℚ) : (ofDual n : α) = n :=\n  rfl\n#align of_dual_rat_cast of_dual_rat_cast\n\n",
 "neg_inv":
 "#print neg_inv /-\ntheorem neg_inv : -a⁻¹ = (-a)⁻¹ := by rw [inv_eq_one_div, inv_eq_one_div, div_neg_eq_neg_div]\n#align neg_inv neg_inv\n-/\n\n",
 "neg_div_self":
 "#print neg_div_self /-\n@[simp]\ntheorem neg_div_self {a : K} (h : a ≠ 0) : -a / a = -1 := by rw [neg_div, div_self h]\n#align neg_div_self neg_div_self\n-/\n\n",
 "neg_div_neg_eq":
 "#print neg_div_neg_eq /-\ntheorem neg_div_neg_eq (a b : K) : -a / -b = a / b := by rw [div_neg_eq_neg_div, neg_div, neg_neg]\n#align neg_div_neg_eq neg_div_neg_eq\n-/\n\n",
 "neg_div'":
 "#print neg_div' /-\n@[field_simps]\ntheorem neg_div' (a b : K) : -(b / a) = -b / a := by simp [neg_div]\n#align neg_div' neg_div'\n-/\n\n",
 "neg_div":
 "#print neg_div /-\ntheorem neg_div (a b : K) : -b / a = -(b / a) := by rw [neg_eq_neg_one_mul, mul_div_assoc, ← neg_eq_neg_one_mul]\n#align neg_div neg_div\n-/\n\n",
 "inv_sub_inv'":
 "#print inv_sub_inv' /-\n/-- See `inv_sub_inv` for the more convenient version when `K` is commutative. -/\ntheorem inv_sub_inv' {a b : K} (ha : a ≠ 0) (hb : b ≠ 0) : a⁻¹ - b⁻¹ = a⁻¹ * (b - a) * b⁻¹ := by\n  rw [mul_sub, sub_mul, mul_inv_cancel_right₀ hb, inv_mul_cancel ha, one_mul]\n#align inv_sub_inv' inv_sub_inv'\n-/\n\n",
 "inv_sub_inv":
 "#print inv_sub_inv /-\ntheorem inv_sub_inv {a b : K} (ha : a ≠ 0) (hb : b ≠ 0) : a⁻¹ - b⁻¹ = (b - a) / (a * b) := by\n  rw [inv_eq_one_div, inv_eq_one_div, div_sub_div _ _ ha hb, one_mul, mul_one]\n#align inv_sub_inv inv_sub_inv\n-/\n\n",
 "inv_neg":
 "#print inv_neg /-\ntheorem inv_neg : (-a)⁻¹ = -a⁻¹ := by rw [neg_inv]\n#align inv_neg inv_neg\n-/\n\n",
 "inv_add_inv":
 "#print inv_add_inv /-\ntheorem inv_add_inv (ha : a ≠ 0) (hb : b ≠ 0) : a⁻¹ + b⁻¹ = (a + b) / (a * b) := by\n  rw [inv_eq_one_div, inv_eq_one_div, one_div_add_one_div ha hb]\n#align inv_add_inv inv_add_inv\n-/\n\n",
 "injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n-- see Note [lower instance priority]\nprotected theorem injective [DivisionRing α] [Semiring β] [nontrivial β] (f : «expr →+* » α β) : injective f :=\n  (injective_iff_map_eq_zero f).2 fun x => (map_eq_zero f).1\n#align injective injective\n\n",
 "div_sub_same":
 "#print div_sub_same /-\ntheorem div_sub_same {a b : K} (h : b ≠ 0) : (a - b) / b = a / b - 1 := by\n  simpa only [← @div_self _ _ b h] using (div_sub_div_same a b b).symm\n#align div_sub_same div_sub_same\n-/\n\n",
 "div_sub_one":
 "#print div_sub_one /-\ntheorem div_sub_one {a b : K} (h : b ≠ 0) : a / b - 1 = (a - b) / b :=\n  (div_sub_same h).symm\n#align div_sub_one div_sub_one\n-/\n\n",
 "div_sub_div_same":
 "#print div_sub_div_same /-\ntheorem div_sub_div_same (a b c : K) : a / c - b / c = (a - b) / c := by\n  rw [sub_eq_add_neg, ← neg_div, div_add_div_same, sub_eq_add_neg]\n#align div_sub_div_same div_sub_div_same\n-/\n\n",
 "div_sub_div":
 "#print div_sub_div /-\n@[field_simps]\ntheorem div_sub_div (a : K) {b : K} (c : K) {d : K} (hb : b ≠ 0) (hd : d ≠ 0) :\n    a / b - c / d = (a * d - b * c) / (b * d) := by\n  simp [sub_eq_add_neg]\n  rw [neg_eq_neg_one_mul, ← mul_div_assoc, div_add_div _ _ hb hd, ← mul_assoc, mul_comm b, mul_assoc, ←\n    neg_eq_neg_one_mul]\n#align div_sub_div div_sub_div\n-/\n\n",
 "div_sub'":
 "#print div_sub' /-\n@[field_simps]\ntheorem div_sub' (a b c : K) (hc : c ≠ 0) : a / c - b = (a - c * b) / c := by simpa using div_sub_div a b hc one_ne_zero\n#align div_sub' div_sub'\n-/\n\n",
 "div_neg_self":
 "#print div_neg_self /-\n@[simp]\ntheorem div_neg_self {a : K} (h : a ≠ 0) : a / -a = -1 := by rw [div_neg_eq_neg_div, div_self h]\n#align div_neg_self div_neg_self\n-/\n\n",
 "div_neg_eq_neg_div":
 "#print div_neg_eq_neg_div /-\ntheorem div_neg_eq_neg_div (a b : K) : b / -a = -(b / a) :=\n  calc\n    b / -a = b * (1 / -a) := by rw [← inv_eq_one_div, division_def]\n    _ = b * -(1 / a) := by rw [one_div_neg_eq_neg_one_div]\n    _ = -(b * (1 / a)) := by rw [neg_mul_eq_mul_neg]\n    _ = -(b / a) := by rw [mul_one_div]\n    \n#align div_neg_eq_neg_div div_neg_eq_neg_div\n-/\n\n",
 "div_neg":
 "#print div_neg /-\ntheorem div_neg (a : K) : a / -b = -(a / b) := by rw [← div_neg_eq_neg_div]\n#align div_neg div_neg\n-/\n\n",
 "div_add_same":
 "#print div_add_same /-\ntheorem div_add_same (h : b ≠ 0) : (a + b) / b = a / b + 1 := by rw [← div_self h, add_div]\n#align div_add_same div_add_same\n-/\n\n",
 "div_add_one":
 "#print div_add_one /-\ntheorem div_add_one (h : b ≠ 0) : a / b + 1 = (a + b) / b :=\n  (div_add_same h).symm\n#align div_add_one div_add_one\n-/\n\n",
 "div_add_div_same":
 "#print div_add_div_same /-\n@[field_simps]\ntheorem div_add_div_same (a b c : α) : a / c + b / c = (a + b) / c :=\n  (add_div _ _ _).symm\n#align div_add_div_same div_add_div_same\n-/\n\n",
 "div_add_div":
 "#print div_add_div /-\n-- see Note [lower instance priority]\ntheorem div_add_div (a : α) (c : α) (hb : b ≠ 0) (hd : d ≠ 0) : a / b + c / d = (a * d + b * c) / (b * d) := by\n  rw [← mul_div_mul_right _ b hd, ← mul_div_mul_left c d hb, div_add_div_same]\n#align div_add_div div_add_div\n-/\n\n",
 "div_add'":
 "#print div_add' /-\n@[field_simps]\ntheorem div_add' (a b c : α) (hc : c ≠ 0) : a / c + b = (a + b * c) / c := by rwa [add_comm, add_div', add_comm]\n#align div_add' div_add'\n-/\n\n",
 "add_div_eq_mul_add_div":
 "#print add_div_eq_mul_add_div /-\ntheorem add_div_eq_mul_add_div (a b : α) (hc : c ≠ 0) : a + b / c = (a * c + b) / c :=\n  (eq_div_iff_mul_eq hc).2 <| by rw [right_distrib, div_mul_cancel _ hc]\n#align add_div_eq_mul_add_div add_div_eq_mul_add_div\n-/\n\n",
 "add_div'":
 "#print add_div' /-\n@[field_simps]\ntheorem add_div' (a b c : α) (hc : c ≠ 0) : b + a / c = (b * c + a) / c := by rw [add_div, mul_div_cancel _ hc]\n#align add_div' add_div'\n-/\n\n",
 "add_div":
 "#print add_div /-\n/-\nCopyright (c) 2014 Robert Lewis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Robert Lewis, Leonardo de Moura, Johannes Hölzl, Mario Carneiro\n-/\ntheorem add_div (a b c : α) : (a + b) / c = a / c + b / c := by simp_rw [div_eq_mul_inv, add_mul]\n#align add_div add_div\n-/\n\n"}