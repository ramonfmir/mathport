{"uniq_inv_of_isField":
 "#print uniq_inv_of_isField /-\n/-- For each field, and for each nonzero element of said field, there is a unique inverse.\nSince `is_field` doesn't remember the data of an `inv` function and as such,\na lemma that there is a unique inverse could be useful.\n-/\ntheorem uniq_inv_of_isField (R : Type u) [Ring R] (hf : IsField R) : ∀ x : R, x ≠ 0 → ∃! y : R, x * y = 1 :=\n  by\n  intro x hx\n  apply exists_unique_of_exists_of_unique\n  · exact hf.mul_inv_cancel hx\n  · intro y z hxy hxz\n    calc\n      y = y * (x * z) := by rw [hxz, mul_one]\n      _ = x * y * z := by rw [← mul_assoc, hf.mul_comm y x]\n      _ = z := by rw [hxy, one_mul]\n      \n#align uniq_inv_of_is_field uniq_inv_of_isField\n-/\n\n",
 "toIsField":
 "#print Field.toIsField /-\n/-- Transferring from `field` to `is_field`. -/\ntheorem Field.toIsField (R : Type u) [Field R] : IsField R :=\n  Semifield.toIsField _\n#align field.to_is_field Field.toIsField\n-/\n\n",
 "smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_def (a : exprℚ) (x : K) : «expr • » a x = ↑a * x :=\n  division_ring.qsmul_eq_mul' a x\n#align smul_def smul_def\n\n",
 "not_isField_of_subsingleton":
 "#print not_isField_of_subsingleton /-\n@[simp]\ntheorem not_isField_of_subsingleton (R : Type u) [Semiring R] [subsingleton R] : ¬IsField R := fun h =>\n  let ⟨x, y, h⟩ := h.exists_pair_ne\n  h (subsingleton.elim _ _)\n#align not_is_field_of_subsingleton not_isField_of_subsingleton\n-/\n\n",
 "nontrivial":
 "#print IsField.nontrivial /-\n@[simp]\ntheorem IsField.nontrivial {R : Type u} [Semiring R] (h : IsField R) : nontrivial R :=\n  ⟨h.exists_pair_ne⟩\n#align is_field.nontrivial IsField.nontrivial\n-/\n\n",
 "cast_mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-\nCopyright (c) 2014 Robert Lewis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Robert Lewis, Leonardo de Moura, Johannes Hölzl, Mario Carneiro\n-/\n-- see Note [lower instance priority]\n-- see Note [coercion into rings]\ntheorem cast_mk' (a b h1 h2) : ((⟨a, b, h1, h2⟩ : exprℚ) : K) = a * b⁻¹ :=\n  DivisionRing.ratCast_mk _ _ _ _\n#align cast_mk' cast_mk'\n\n",
 "cast_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem cast_def : ∀ r : exprℚ, (r : K) = r.num / r.denom\n  | ⟨a, b, h1, h2⟩ => (cast_mk' _ _ _ _).trans (div_eq_mul_inv _ _).symm\n#align cast_def cast_def\n\n"}