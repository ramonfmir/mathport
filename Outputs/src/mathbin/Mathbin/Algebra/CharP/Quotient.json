{"quotient'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/-- If an ideal does not contain any coercions of natural numbers other than zero, then its quotient\ninherits the characteristic of the underlying ring. -/\ntheorem quotient' {R : Type _} [CommRing R] (p : ℕ) [char_p R p] (I : ideal R)\n    (h : ∀ x : ℕ, (x : R) ∈ I → (x : R) = 0) : char_p («expr ⧸ » R I) p :=\n  ⟨fun x => by\n    rw [← cast_eq_zero_iff R p x, ← map_nat_cast (ideal.quotient.mk I)]\n    refine' ideal.quotient.eq.trans (_ : ↑x - 0 ∈ I ↔ _)\n    rw [sub_zero]\n    exact ⟨h x, fun h' => h'.symm ▸ I.zero_mem⟩⟩\n#align quotient' quotient'\n\n",
 "quotient":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Eric Wieser\n-/\ntheorem quotient (R : Type u) [CommRing R] (p : ℕ) [hp1 : fact p.prime] (hp2 : ↑p ∈ nonunits R) :\n    char_p («expr ⧸ » R (ideal.span {p} : ideal R)) p :=\n  have hp0 : (p : «expr ⧸ » R (ideal.span {p} : ideal R)) = 0 :=\n    map_nat_cast (ideal.quotient.mk (ideal.span {p} : ideal R)) p ▸\n      ideal.quotient.eq_zero_iff_mem.2 (ideal.subset_span <| Set.mem_singleton _)\n  ring_char.of_eq <|\n    or.resolve_left ((Nat.dvd_prime hp1.1).1 <| ring_char.dvd hp0) fun h1 =>\n      hp2 <|\n        isUnit_iff_dvd_one.2 <|\n          ideal.mem_span_singleton.1 <|\n            ideal.quotient.eq_zero_iff_mem.1 <| @subsingleton.elim (@char_p.subsingleton _ <| ring_char.of_eq h1) _ _\n#align quotient quotient\n\n"}