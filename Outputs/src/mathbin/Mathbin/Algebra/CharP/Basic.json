{"two_ne_zero":
 "#print Ring.two_ne_zero /-\n/-- We have `2 ≠ 0` in a nontrivial ring whose characteristic is not `2`. -/\n@[protected]\ntheorem Ring.two_ne_zero {R : Type _} [NonAssocSemiring R] [Nontrivial R] (hR : ringChar R ≠ 2) : (2 : R) ≠ 0 :=\n  by\n  rw [ne.def, (by norm_cast : (2 : R) = (2 : ℕ)), ringChar.spec, Nat.dvd_prime Nat.prime_two]\n  exact mt (or_iff_left hR).mp CharP.ringChar_ne_one\n#align ring.two_ne_zero Ring.two_ne_zero\n-/\n\n",
 "sum_pow_char":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print sum_pow_char /-\ntheorem sum_pow_char {ι : Type _} (s : Finset ι) (f : ι → R) :\n    finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i) ^ p =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (f i ^ p) :=\n  (frobenius R p).map_sum _ _\n#align sum_pow_char sum_pow_char\n-/\n\n",
 "sub_pow_char_pow_of_commute":
 "#print sub_pow_char_pow_of_commute /-\ntheorem sub_pow_char_pow_of_commute [Ring R] {p : ℕ} [Fact p.prime] [CharP R p] {n : ℕ} (x y : R) (h : Commute x y) :\n    (x - y) ^ p ^ n = x ^ p ^ n - y ^ p ^ n := by\n  induction n; · simp\n  rw [pow_succ', pow_mul, pow_mul, pow_mul, n_ih]\n  apply sub_pow_char_of_commute; apply Commute.pow_pow h\n#align sub_pow_char_pow_of_commute sub_pow_char_pow_of_commute\n-/\n\n",
 "sub_pow_char_pow":
 "#print sub_pow_char_pow /-\ntheorem sub_pow_char_pow [CommRing R] {p : ℕ} [Fact p.prime] [CharP R p] {n : ℕ} (x y : R) :\n    (x - y) ^ p ^ n = x ^ p ^ n - y ^ p ^ n :=\n  sub_pow_char_pow_of_commute _ _ _ (Commute.all _ _)\n#align sub_pow_char_pow sub_pow_char_pow\n-/\n\n",
 "sub_pow_char_of_commute":
 "#print sub_pow_char_of_commute /-\ntheorem sub_pow_char_of_commute [Ring R] {p : ℕ} [Fact p.prime] [CharP R p] (x y : R) (h : Commute x y) :\n    (x - y) ^ p = x ^ p - y ^ p :=\n  by\n  rw [eq_sub_iff_add_eq, ← add_pow_char_of_commute _ _ _ (Commute.sub_left h rfl)]\n  simp; repeat' infer_instance\n#align sub_pow_char_of_commute sub_pow_char_of_commute\n-/\n\n",
 "sub_pow_char":
 "#print sub_pow_char /-\ntheorem sub_pow_char [CommRing R] {p : ℕ} [Fact p.prime] [CharP R p] (x y : R) : (x - y) ^ p = x ^ p - y ^ p :=\n  sub_pow_char_of_commute _ _ _ (Commute.all _ _)\n#align sub_pow_char sub_pow_char\n-/\n\n",
 "spec":
 "theorem spec : ∀ x : ℕ, (x : R) = 0 ↔ ringChar R ∣ x := by\n  letI := (Classical.choose_spec (CharP.exists_unique R)).1 <;> unfold ringChar <;>\n    exact char_p.cast_eq_zero_iff R (ringChar R)\n#align spec spec\n\n",
 "ring_char_of_prime_eq_zero":
 "theorem ring_char_of_prime_eq_zero [Nontrivial R] {p : ℕ} (hprime : Nat.Prime p) (hp0 : (p : R) = 0) : ringChar R = p :=\n  or.resolve_left ((Nat.dvd_prime hprime).1 (ringChar.dvd hp0)) ringChar_ne_one\n#align ring_char_of_prime_eq_zero ring_char_of_prime_eq_zero\n\n",
 "ring_char_ne_zero_of_finite":
 "theorem ring_char_ne_zero_of_finite [Finite R] : ringChar R ≠ 0 :=\n  char_ne_zero_of_finite R (ringChar R)\n#align ring_char_ne_zero_of_finite ring_char_ne_zero_of_finite\n\n",
 "ring_char_ne_one":
 "theorem ring_char_ne_one [Nontrivial R] : ringChar R ≠ 1 :=\n  by\n  intro h\n  apply zero_ne_one' R\n  symm\n  rw [← Nat.cast_one, ringChar.spec, h]\n#align ring_char_ne_one ring_char_ne_one\n\n",
 "pow_prime_pow_mul_eq_one_iff":
 "@[simp]\ntheorem pow_prime_pow_mul_eq_one_iff (p k m : ℕ) [Fact p.prime] [CharP R p] (x : R) : x ^ (p ^ k * m) = 1 ↔ x ^ m = 1 :=\n  by\n  induction' k with k hk\n  · rw [pow_zero, one_mul]\n  · refine' ⟨fun h => _, fun h => _⟩\n    · rw [pow_succ, mul_assoc, pow_mul', ← frobenius_def, ← frobenius_one p] at h\n      exact hk.1 (frobenius_inj R p h)\n    · rw [pow_mul', h, one_pow]\n#align pow_prime_pow_mul_eq_one_iff pow_prime_pow_mul_eq_one_iff\n\n",
 "of_not_dvd":
 "theorem of_not_dvd [CharP R p] (h : ¬p ∣ n) : NeZero (n : R) :=\n  ⟨(char_p.cast_eq_zero_iff R p n).not.mpr h⟩\n#align of_not_dvd of_not_dvd\n\n",
 "of_eq":
 "#print of_eq /-\ntheorem of_eq {p : ℕ} (h : ringChar R = p) : CharP R p :=\n  CharP.congr (ringChar R) h\n#align of_eq of_eq\n-/\n\n",
 "not_char_dvd":
 "theorem not_char_dvd (p : ℕ) [CharP R p] (k : ℕ) [h : NeZero (k : R)] : ¬p ∣ k := by\n  rwa [← char_p.cast_eq_zero_iff R p k, ← ne.def, ← neZero_iff]\n#align not_char_dvd not_char_dvd\n\n",
 "nontrivial_of_char_ne_one":
 "theorem nontrivial_of_char_ne_one {v : ℕ} (hv : v ≠ 1) [hr : CharP R v] : Nontrivial R :=\n  ⟨⟨(1 : ℕ), 0, fun h => hv <| by rwa [char_p.cast_eq_zero_iff _ v, Nat.dvd_one] at h <;> assumption⟩⟩\n#align nontrivial_of_char_ne_one nontrivial_of_char_ne_one\n\n",
 "neg_one_pow_char_pow":
 "#print CharP.neg_one_pow_char_pow /-\ntheorem CharP.neg_one_pow_char_pow [CommRing R] (p n : ℕ) [CharP R p] [Fact p.prime] : (-1 : R) ^ p ^ n = -1 :=\n  by\n  rw [eq_neg_iff_add_eq_zero]\n  nth_rw 2 [← one_pow (p ^ n)]\n  rw [← add_pow_char_pow, add_left_neg, zero_pow (pow_pos (fact.out (Nat.Prime p)).pos _)]\n#align char_p.neg_one_pow_char_pow CharP.neg_one_pow_char_pow\n-/\n\n",
 "neg_one_pow_char":
 "#print CharP.neg_one_pow_char /-\ntheorem CharP.neg_one_pow_char [CommRing R] (p : ℕ) [CharP R p] [Fact p.prime] : (-1 : R) ^ p = -1 :=\n  by\n  rw [eq_neg_iff_add_eq_zero]\n  nth_rw 2 [← one_pow p]\n  rw [← add_pow_char, add_left_neg, zero_pow (fact.out (Nat.Prime p)).pos]\n#align char_p.neg_one_pow_char CharP.neg_one_pow_char\n-/\n\n",
 "neg_one_ne_one_of_char_ne_two":
 "#print Ring.neg_one_ne_one_of_char_ne_two /-\n-- We have `char_p.neg_one_ne_one`, which assumes `[ring R] (p : ℕ) [char_p R p] [fact (2 < p)]`.\n-- This is a version using `ring_char` instead.\n/-- Characteristic `≠ 2` and nontrivial implies that `-1 ≠ 1`. -/\ntheorem Ring.neg_one_ne_one_of_char_ne_two {R : Type _} [NonAssocRing R] [Nontrivial R] (hR : ringChar R ≠ 2) :\n    (-1 : R) ≠ 1 := fun h => Ring.two_ne_zero hR (neg_eq_iff_add_eq_zero.mp h)\n#align ring.neg_one_ne_one_of_char_ne_two Ring.neg_one_ne_one_of_char_ne_two\n-/\n\n",
 "neg_one_ne_one":
 "#print CharP.neg_one_ne_one /-\ntheorem CharP.neg_one_ne_one [Ring R] (p : ℕ) [CharP R p] [Fact (2 < p)] : (-1 : R) ≠ (1 : R) :=\n  by\n  suffices (2 : R) ≠ 0 by\n    symm\n    rw [ne.def, ← sub_eq_zero, sub_neg_eq_add]\n    exact this\n  intro h\n  rw [show (2 : R) = (2 : ℕ) by norm_cast] at h\n  have := (char_p.cast_eq_zero_iff R p 2).mp h\n  have := nat.le_of_dvd (by decide) this\n  rw [fact_iff] at *\n  linarith\n#align char_p.neg_one_ne_one CharP.neg_one_ne_one\n-/\n\n",
 "natCast_eq_natCast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [MOD ]» -/\n#print CharP.natCast_eq_natCast /-\ntheorem CharP.natCast_eq_natCast [AddGroupWithOne R] (p : ℕ) [CharP R p] {a b : ℕ} :\n    (a : R) = b ↔ «expr ≡ [MOD ]» a b p :=\n  by\n  rw [← Int.cast_ofNat, ← Int.cast_ofNat b]\n  exact (CharP.intCast_eq_intCast _ _).trans Int.coe_nat_modEq_iff\n#align char_p.nat_cast_eq_nat_cast CharP.natCast_eq_natCast\n-/\n\n",
 "multiset_sum_pow_char":
 "#print multiset_sum_pow_char /-\ntheorem multiset_sum_pow_char (s : Multiset R) : s.sum ^ p = (s.map (· ^ p)).sum :=\n  (frobenius R p).map_multiset_sum _\n#align multiset_sum_pow_char multiset_sum_pow_char\n-/\n\n",
 "map_iterate_frobenius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n#print RingHom.map_iterate_frobenius /-\ntheorem RingHom.map_iterate_frobenius (n : ℕ) :\n    g ((«expr ^[ ]» (frobenius R p) n) x) = («expr ^[ ]» (frobenius S p) n) (g x) :=\n  g.to_monoid_hom.map_iterate_frobenius p x n\n#align ring_hom.map_iterate_frobenius RingHom.map_iterate_frobenius\n-/\n\n",
 "map_frobenius":
 "#print RingHom.map_frobenius /-\ntheorem RingHom.map_frobenius : g (frobenius R p x) = frobenius S p (g x) :=\n  g.map_pow x p\n#align ring_hom.map_frobenius RingHom.map_frobenius\n-/\n\n",
 "list_sum_pow_char":
 "#print list_sum_pow_char /-\ntheorem list_sum_pow_char (l : List R) : l.sum ^ p = (l.map (· ^ p)).sum :=\n  (frobenius R p).map_list_sum _\n#align list_sum_pow_char list_sum_pow_char\n-/\n\n",
 "iterate_map_frobenius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n#print RingHom.iterate_map_frobenius /-\ntheorem RingHom.iterate_map_frobenius (f : «expr →+* » R R) (p : ℕ) [Fact p.prime] [CharP R p] (n : ℕ) :\n    («expr ^[ ]» f n) (frobenius R p x) = frobenius R p ((«expr ^[ ]» f n) x) :=\n  f.iterate_map_pow _ _ _\n#align ring_hom.iterate_map_frobenius RingHom.iterate_map_frobenius\n-/\n\n",
 "iterate_frobenius":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ^[ ]» -/\n#print iterate_frobenius /-\ntheorem iterate_frobenius (n : ℕ) : («expr ^[ ]» (frobenius R p) n) x = x ^ p ^ n :=\n  by\n  induction n; · simp\n  rw [Function.iterate_succ', pow_succ', pow_mul, Function.comp_apply, frobenius_def, n_ih]\n#align iterate_frobenius iterate_frobenius\n-/\n\n",
 "isSquare_of_charTwo'":
 "#print isSquare_of_charTwo' /-\n/-- If `ring_char R = 2`, where `R` is a finite reduced commutative ring,\nthen every `a : R` is a square. -/\ntheorem isSquare_of_charTwo' {R : Type _} [Finite R] [CommRing R] [IsReduced R] [CharP R 2] (a : R) : IsSquare a :=\n  by\n  cases nonempty_fintype R\n  exact\n    Exists.imp (fun b h => pow_two b ▸ Eq.symm h)\n      (((Fintype.bijective_iff_injective_and_card _).mpr ⟨frobenius_inj R 2, rfl⟩).surjective a)\n#align is_square_of_char_two' isSquare_of_charTwo'\n-/\n\n",
 "int_cast_eq_zero_iff":
 "#print CharP.int_cast_eq_zero_iff /-\ntheorem CharP.int_cast_eq_zero_iff [AddGroupWithOne R] (p : ℕ) [CharP R p] (a : ℤ) : (a : R) = 0 ↔ (p : ℤ) ∣ a :=\n  by\n  rcases lt_trichotomy a 0 with (h | rfl | h)\n  · rw [← neg_eq_zero, ← Int.cast_neg, ← dvd_neg]\n    lift -a to ℕ using neg_nonneg.mpr (le_of_lt h) with b\n    rw [Int.cast_ofNat, char_p.cast_eq_zero_iff R p, Int.coe_nat_dvd]\n  · simp only [Int.cast_zero, eq_self_iff_true, dvd_zero]\n  · lift a to ℕ using le_of_lt h with b\n    rw [Int.cast_ofNat, char_p.cast_eq_zero_iff R p, Int.coe_nat_dvd]\n#align char_p.int_cast_eq_zero_iff CharP.int_cast_eq_zero_iff\n-/\n\n",
 "intCast_eq_intCast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≡ [ZMOD ]» -/\n#print CharP.intCast_eq_intCast /-\ntheorem CharP.intCast_eq_intCast [AddGroupWithOne R] (p : ℕ) [CharP R p] {a b : ℤ} :\n    (a : R) = b ↔ «expr ≡ [ZMOD ]» a b p := by\n  rw [eq_comm, ← sub_eq_zero, ← Int.cast_sub, CharP.int_cast_eq_zero_iff R p, Int.modEq_iff_dvd]\n#align char_p.int_cast_eq_int_cast CharP.intCast_eq_intCast\n-/\n\n",
 "frobenius_zero":
 "#print frobenius_zero /-\ntheorem frobenius_zero : frobenius R p 0 = 0 :=\n  (frobenius R p).map_zero\n#align frobenius_zero frobenius_zero\n-/\n\n",
 "frobenius_sub":
 "#print frobenius_sub /-\ntheorem frobenius_sub : frobenius R p (x - y) = frobenius R p x - frobenius R p y :=\n  (frobenius R p).map_sub x y\n#align frobenius_sub frobenius_sub\n-/\n\n",
 "frobenius_one":
 "#print frobenius_one /-\ntheorem frobenius_one : frobenius R p 1 = 1 :=\n  one_pow _\n#align frobenius_one frobenius_one\n-/\n\n",
 "frobenius_neg":
 "#print frobenius_neg /-\ntheorem frobenius_neg : frobenius R p (-x) = -frobenius R p x :=\n  (frobenius R p).map_neg x\n#align frobenius_neg frobenius_neg\n-/\n\n",
 "frobenius_nat_cast":
 "#print frobenius_nat_cast /-\ntheorem frobenius_nat_cast (n : ℕ) : frobenius R p n = n :=\n  map_natCast (frobenius R p) n\n#align frobenius_nat_cast frobenius_nat_cast\n-/\n\n",
 "frobenius_mul":
 "#print frobenius_mul /-\ntheorem frobenius_mul : frobenius R p (x * y) = frobenius R p x * frobenius R p y :=\n  (frobenius R p).map_mul x y\n#align frobenius_mul frobenius_mul\n-/\n\n",
 "frobenius_inj":
 "#print frobenius_inj /-\ntheorem frobenius_inj [CommRing R] [IsReduced R] (p : ℕ) [Fact p.prime] [CharP R p] :\n    function.injective (frobenius R p) := fun x h H =>\n  by\n  rw [← sub_eq_zero] at H⊢\n  rw [← frobenius_sub] at H\n  exact is_reduced.eq_zero _ ⟨_, H⟩\n#align frobenius_inj frobenius_inj\n-/\n\n",
 "frobenius_def":
 "#print frobenius_def /-\ntheorem frobenius_def : frobenius R p x = x ^ p :=\n  rfl\n#align frobenius_def frobenius_def\n-/\n\n",
 "frobenius_add":
 "#print frobenius_add /-\ntheorem frobenius_add : frobenius R p (x + y) = frobenius R p x + frobenius R p y :=\n  (frobenius R p).map_add x y\n#align frobenius_add frobenius_add\n-/\n\n",
 "false_of_nontrivial_of_char_one":
 "-- see Note [lower instance priority]\ntheorem false_of_nontrivial_of_char_one [Nontrivial R] [CharP R 1] : False :=\n  false_of_nontrivial_of_subsingleton R\n#align false_of_nontrivial_of_char_one false_of_nontrivial_of_char_one\n\n",
 "exists_unique":
 "#print CharP.exists_unique /-\ntheorem CharP.exists_unique [NonAssocSemiring R] : ∃! p, CharP R p :=\n  let ⟨c, H⟩ := CharP.exists R\n  ⟨c, H, fun y H2 => CharP.eq R H2 H⟩\n#align char_p.exists_unique CharP.exists_unique\n-/\n\n",
 "exists_add_pow_prime_pow_eq":
 "#print exists_add_pow_prime_pow_eq /-\ntheorem exists_add_pow_prime_pow_eq (hp : p.prime) (x y : R) (n : ℕ) :\n    ∃ r, (x + y) ^ p ^ n = x ^ p ^ n + y ^ p ^ n + p * r :=\n  (Commute.all x y).exists_add_pow_prime_pow_eq hp n\n#align exists_add_pow_prime_pow_eq exists_add_pow_prime_pow_eq\n-/\n\n",
 "exists_add_pow_prime_eq":
 "#print exists_add_pow_prime_eq /-\ntheorem exists_add_pow_prime_eq (hp : p.prime) (x y : R) : ∃ r, (x + y) ^ p = x ^ p + y ^ p + p * r :=\n  (Commute.all x y).exists_add_pow_prime_eq hp\n#align exists_add_pow_prime_eq exists_add_pow_prime_eq\n-/\n\n",
 "exists":
 "#print CharP.exists /-\ntheorem CharP.exists [NonAssocSemiring R] : ∃ p, CharP R p :=\n  letI := Classical.decEq R\n  by_cases\n    (fun H : ∀ p : ℕ, (p : R) = 0 → p = 0 =>\n      ⟨0, ⟨fun x => by rw [zero_dvd_iff] <;> exact ⟨H x, by rintro rfl <;> simp⟩⟩⟩)\n    fun H =>\n    ⟨nat.find (not_forall.1 H),\n      ⟨fun x =>\n        ⟨fun H1 =>\n          nat.dvd_of_mod_eq_zero\n            (by_contradiction fun H2 =>\n              nat.find_min (not_forall.1 H)\n                (nat.mod_lt x <| nat.pos_of_ne_zero <| not_of_not_imp <| nat.find_spec (not_forall.1 H))\n                (not_imp_of_and_not\n                  ⟨by\n                    rwa [← nat.mod_add_div x (nat.find (not_forall.1 H)), Nat.cast_add, Nat.cast_mul,\n                      of_not_not (not_not_of_not_imp <| nat.find_spec (not_forall.1 H)), MulZeroClass.zero_mul,\n                      add_zero] at H1,\n                    H2⟩)),\n          fun H1 => by\n          rw [← Nat.mul_div_cancel' H1, Nat.cast_mul, of_not_not (not_not_of_not_imp <| nat.find_spec (not_forall.1 H)),\n            MulZeroClass.zero_mul]⟩⟩⟩\n#align char_p.exists CharP.exists\n-/\n\n",
 "eq_zero":
 "@[simp]\ntheorem eq_zero [CharZero R] : ringChar R = 0 :=\n  eq R 0\n#align eq_zero eq_zero\n\n",
 "eq_self_iff_eq_zero_of_char_ne_two":
 "#print Ring.eq_self_iff_eq_zero_of_char_ne_two /-\n/-- Characteristic `≠ 2` in a domain implies that `-a = a` iff `a = 0`. -/\ntheorem Ring.eq_self_iff_eq_zero_of_char_ne_two {R : Type _} [NonAssocRing R] [Nontrivial R] [NoZeroDivisors R]\n    (hR : ringChar R ≠ 2) {a : R} : -a = a ↔ a = 0 :=\n  ⟨fun h => (mul_eq_zero.mp <| (two_mul a).trans <| neg_eq_iff_add_eq_zero.mp h).resolve_left (Ring.two_ne_zero hR),\n    fun h => ((congr_arg (fun x => -x) h).trans neg_zero).trans h.symm⟩\n#align ring.eq_self_iff_eq_zero_of_char_ne_two Ring.eq_self_iff_eq_zero_of_char_ne_two\n-/\n\n",
 "eq_iff":
 "theorem eq_iff {p : ℕ} : ringChar R = p ↔ CharP R p :=\n  ⟨of_eq, @eq R _ p⟩\n#align eq_iff eq_iff\n\n",
 "eq":
 "#print CharP.eq /-\ntheorem CharP.eq [AddMonoidWithOne R] {p q : ℕ} (c1 : CharP R p) (c2 : CharP R q) : p = q :=\n  nat.dvd_antisymm ((char_p.cast_eq_zero_iff R p q).1 (CharP.cast_eq_zero _ _))\n    ((char_p.cast_eq_zero_iff R q p).1 (CharP.cast_eq_zero _ _))\n#align char_p.eq CharP.eq\n-/\n\n",
 "dvd":
 "theorem dvd {x : ℕ} (hx : (x : R) = 0) : ringChar R ∣ x :=\n  (spec R x).1 hx\n#align dvd dvd\n\n",
 "congr":
 "#print CharP.congr /-\ntheorem CharP.congr {R : Type u} [AddMonoidWithOne R] {p : ℕ} (q : ℕ) [hq : CharP R q] (h : q = p) : CharP R p :=\n  h ▸ hq\n#align char_p.congr CharP.congr\n-/\n\n",
 "char_p_to_char_zero":
 "theorem char_p_to_char_zero (R : Type _) [AddGroupWithOne R] [CharP R 0] : CharZero R :=\n  charZero_of_inj_zero fun n h0 => eq_zero_of_zero_dvd ((cast_eq_zero_iff R 0 n).mp h0)\n#align char_p_to_char_zero char_p_to_char_zero\n\n",
 "char_ne_zero_of_finite":
 "/-- The characteristic of a finite ring cannot be zero. -/\ntheorem char_ne_zero_of_finite (p : ℕ) [CharP R p] [Finite R] : p ≠ 0 :=\n  by\n  rintro rfl\n  haveI : CharZero R := char_p_to_char_zero R\n  cases nonempty_fintype R\n  exact absurd Nat.cast_injective (not_injective_infinite_finite (coe : ℕ → R))\n#align char_ne_zero_of_finite char_ne_zero_of_finite\n\n",
 "char_ne_one":
 "theorem char_ne_one [Nontrivial R] (p : ℕ) [hc : CharP R p] : p ≠ 1 := fun hp : p = 1 =>\n  have : (1 : R) = 0 := by simpa using (cast_eq_zero_iff R p 1).mpr (hp ▸ dvd_refl p)\n  absurd this one_ne_zero\n#align char_ne_one char_ne_one\n\n",
 "char_is_prime_or_zero":
 "theorem char_is_prime_or_zero (p : ℕ) [hc : CharP R p] : Nat.Prime p ∨ p = 0 :=\n  match p, hc with\n  | 0, _ => or.inr rfl\n  | 1, hc => absurd (Eq.refl (1 : ℕ)) (@char_ne_one R _ _ (1 : ℕ) hc)\n  | m + 2, hc => or.inl (@char_is_prime_of_two_le R _ _ (m + 2) hc (nat.le_add_left 2 m))\n#align char_is_prime_or_zero char_is_prime_or_zero\n\n",
 "char_is_prime_of_two_le":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (d «expr ∣ » p) -/\ntheorem char_is_prime_of_two_le (p : ℕ) [hc : CharP R p] (hp : 2 ≤ p) : Nat.Prime p :=\n  suffices ∀ (d) (_ : d ∣ p), d = 1 ∨ d = p from Nat.prime_def_lt''.mpr ⟨hp, this⟩\n  fun (d : ℕ) (hdvd : ∃ e, p = d * e) =>\n  let ⟨e, hmul⟩ := hdvd\n  have : (p : R) = 0 := (cast_eq_zero_iff R p p).mpr (dvd_refl p)\n  have : (d : R) * e = 0 := @cast_mul R _ d e ▸ hmul ▸ this\n  or.elim (eq_zero_or_eq_zero_of_mul_eq_zero this)\n    (fun hd : (d : R) = 0 =>\n      have : p ∣ d := (cast_eq_zero_iff R p d).mp hd\n      show d = 1 ∨ d = p from or.inr (dvd_antisymm ⟨e, hmul⟩ this))\n    fun he : (e : R) = 0 =>\n    have : p ∣ e := (cast_eq_zero_iff R p e).mp he\n    have : e ∣ p := dvd_of_mul_left_eq d (Eq.symm hmul)\n    have : e = p := dvd_antisymm ‹e ∣ p› ‹p ∣ e›\n    have h₀ : 0 < p := two_pos.trans_le hp\n    have : d * p = 1 * p := by rw [‹e = p›] at hmul <;> rw [one_mul] <;> exact Eq.symm hmul\n    show d = 1 ∨ d = p from or.inl (mul_right_cancel₀ h₀.ne' this)\n#align char_is_prime_of_two_le char_is_prime_of_two_le\n\n",
 "char_is_prime_of_pos":
 "theorem char_is_prime_of_pos (p : ℕ) [NeZero p] [CharP R p] : Fact p.prime :=\n  ⟨(CharP.char_is_prime_or_zero R _).resolve_right <| NeZero.ne p⟩\n#align char_is_prime_of_pos char_is_prime_of_pos\n\n",
 "char_is_prime":
 "theorem char_is_prime (p : ℕ) [CharP R p] : p.prime :=\n  or.resolve_right (char_is_prime_or_zero R p) (char_ne_zero_of_finite R p)\n#align char_is_prime char_is_prime\n\n",
 "charP_of_prime_pow_injective":
 "#print charP_of_prime_pow_injective /-\ntheorem charP_of_prime_pow_injective (R) [Ring R] [Fintype R] (p : ℕ) [hp : Fact p.prime] (n : ℕ)\n    (hn : Fintype.card R = p ^ n) (hR : ∀ i ≤ n, (p ^ i : R) = 0 → i = n) : CharP R (p ^ n) :=\n  by\n  obtain ⟨c, hc⟩ := CharP.exists R\n  skip\n  have hcpn : c ∣ p ^ n := by rw [← char_p.cast_eq_zero_iff R c, ← hn, CharP.cast_card_eq_zero]\n  obtain ⟨i, hi, hc⟩ : ∃ i ≤ n, c = p ^ i := by rwa [Nat.dvd_prime_pow hp.1] at hcpn\n  obtain rfl : i = n := by\n    apply hR i hi\n    rw [← Nat.cast_pow, ← hc, CharP.cast_eq_zero]\n  rwa [← hc]\n#align char_p_of_prime_pow_injective charP_of_prime_pow_injective\n-/\n\n",
 "charP_of_ne_zero":
 "#print charP_of_ne_zero /-\ntheorem charP_of_ne_zero (hn : Fintype.card R = n) (hR : ∀ i < n, (i : R) = 0 → i = 0) : CharP R n :=\n  {\n    cast_eq_zero_iff := by\n      have H : (n : R) = 0 := by rw [← hn, CharP.cast_card_eq_zero]\n      intro k\n      constructor\n      · intro h\n        rw [← nat.mod_add_div k n, Nat.cast_add, Nat.cast_mul, H, MulZeroClass.zero_mul, add_zero] at h\n        rw [nat.dvd_iff_mod_eq_zero]\n        apply hR _ (nat.mod_lt _ _) h\n        rw [← hn, Fintype.card_pos_iff]\n        exact ⟨0⟩\n      · rintro ⟨k, rfl⟩\n        rw [Nat.cast_mul, H, MulZeroClass.zero_mul] }\n#align char_p_of_ne_zero charP_of_ne_zero\n-/\n\n",
 "charP_iff_charP":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.charP_iff_charP /-\ntheorem RingHom.charP_iff_charP {K L : Type _} [DivisionRing K] [Semiring L] [Nontrivial L] (f : «expr →+* » K L)\n    (p : ℕ) : CharP K p ↔ CharP L p := by simp only [charP_iff, ← f.injective.eq_iff, map_natCast f, f.map_zero]\n#align ring_hom.char_p_iff_char_p RingHom.charP_iff_charP\n-/\n\n",
 "cast_ring_char":
 "@[simp]\ntheorem nat.cast_ring_char : (ringChar R : R) = 0 := by rw [ringChar.spec]\n#align nat.cast_ring_char nat.cast_ring_char\n\n",
 "cast_injOn_of_ringChar_ne_two":
 "#print Int.cast_injOn_of_ringChar_ne_two /-\n/-- If two integers from `{0, 1, -1}` result in equal elements in a ring `R`\nthat is nontrivial and of characteristic not `2`, then they are equal. -/\ntheorem Int.cast_injOn_of_ringChar_ne_two {R : Type _} [NonAssocRing R] [Nontrivial R] (hR : ringChar R ≠ 2) :\n    ({0, 1, -1} : Set ℤ).inj_on (coe : ℤ → R) := by\n  intro a ha b hb h\n  apply eq_of_sub_eq_zero\n  by_contra hf\n  change a = 0 ∨ a = 1 ∨ a = -1 at ha\n  change b = 0 ∨ b = 1 ∨ b = -1 at hb\n  have hh : a - b = 1 ∨ b - a = 1 ∨ a - b = 2 ∨ b - a = 2 :=\n    by\n    rcases ha with (ha | ha | ha) <;> rcases hb with (hb | hb | hb)\n    pick_goal 5\n    pick_goal 9\n    -- move goals with `a = b` to the front\n    iterate 3 rw [ha, hb, sub_self] at hf; tauto\n    -- 6 goals remain\n    all_goals rw [ha, hb]; norm_num\n  have h' : ((a - b : ℤ) : R) = 0 := by exact_mod_cast sub_eq_zero_of_eq h\n  have h'' : ((b - a : ℤ) : R) = 0 := by exact_mod_cast sub_eq_zero_of_eq h.symm\n  rcases hh with (hh | hh | hh | hh)\n  · rw [hh, (by norm_cast : ((1 : ℤ) : R) = 1)] at h'\n    exact one_ne_zero h'\n  · rw [hh, (by norm_cast : ((1 : ℤ) : R) = 1)] at h''\n    exact one_ne_zero h''\n  · rw [hh, (by norm_cast : ((2 : ℤ) : R) = 2)] at h'\n    exact Ring.two_ne_zero hR h'\n  · rw [hh, (by norm_cast : ((2 : ℤ) : R) = 2)] at h''\n    exact Ring.two_ne_zero hR h''\n#align int.cast_inj_on_of_ring_char_ne_two Int.cast_injOn_of_ringChar_ne_two\n-/\n\n",
 "cast_eq_zero":
 "#print CharP.cast_eq_zero /-\n@[simp]\ntheorem CharP.cast_eq_zero [AddMonoidWithOne R] (p : ℕ) [CharP R p] : (p : R) = 0 :=\n  (char_p.cast_eq_zero_iff R p p).2 (dvd_refl p)\n#align char_p.cast_eq_zero CharP.cast_eq_zero\n-/\n\n",
 "cast_eq_mod":
 "theorem cast_eq_mod (p : ℕ) [CharP R p] (k : ℕ) : (k : R) = (k % p : ℕ) :=\n  calc\n    (k : R) = ↑(k % p + p * (k / p)) := by rw [nat.mod_add_div]\n    _ = ↑(k % p) := by simp [cast_eq_zero]\n    \n#align cast_eq_mod cast_eq_mod\n\n",
 "cast_card_eq_zero":
 "#print CharP.cast_card_eq_zero /-\n@[simp]\ntheorem CharP.cast_card_eq_zero [AddGroupWithOne R] [Fintype R] : (Fintype.card R : R) = 0 := by\n  rw [← nsmul_one, card_nsmul_eq_zero]\n#align char_p.cast_card_eq_zero CharP.cast_card_eq_zero\n-/\n\n",
 "add_pow_prime_pow_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print add_pow_prime_pow_eq /-\ntheorem add_pow_prime_pow_eq (hp : p.prime) (x y : R) (n : ℕ) :\n    (x + y) ^ p ^ n =\n      x ^ p ^ n + y ^ p ^ n +\n        p *\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            (Finset.Ioo 0 (p ^ n)) (x ^ k * y ^ (p ^ n - k) * ↑((p ^ n).choose k / p)) :=\n  (Commute.all x y).add_pow_prime_pow_eq hp n\n#align add_pow_prime_pow_eq add_pow_prime_pow_eq\n-/\n\n",
 "add_pow_prime_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n#print add_pow_prime_eq /-\ntheorem add_pow_prime_eq (hp : p.prime) (x y : R) :\n    (x + y) ^ p =\n      x ^ p + y ^ p +\n        p *\n          finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            (Finset.Ioo 0 p) (x ^ k * y ^ (p - k) * ↑(p.choose k / p)) :=\n  (Commute.all x y).add_pow_prime_eq hp\n#align add_pow_prime_eq add_pow_prime_eq\n-/\n\n",
 "add_pow_char_pow_of_commute":
 "#print add_pow_char_pow_of_commute /-\ntheorem add_pow_char_pow_of_commute [Semiring R] {p n : ℕ} [hp : Fact p.prime] [CharP R p] (x y : R) (h : Commute x y) :\n    (x + y) ^ p ^ n = x ^ p ^ n + y ^ p ^ n :=\n  by\n  let ⟨r, hr⟩ := h.exists_add_pow_prime_pow_eq hp.out n\n  simp [hr]\n#align add_pow_char_pow_of_commute add_pow_char_pow_of_commute\n-/\n\n",
 "add_pow_char_pow":
 "#print add_pow_char_pow /-\ntheorem add_pow_char_pow [CommSemiring R] {p : ℕ} [Fact p.prime] [CharP R p] {n : ℕ} (x y : R) :\n    (x + y) ^ p ^ n = x ^ p ^ n + y ^ p ^ n :=\n  add_pow_char_pow_of_commute _ _ _ (Commute.all _ _)\n#align add_pow_char_pow add_pow_char_pow\n-/\n\n",
 "add_pow_char_of_commute":
 "#print add_pow_char_of_commute /-\ntheorem add_pow_char_of_commute [Semiring R] {p : ℕ} [hp : Fact p.prime] [CharP R p] (x y : R) (h : Commute x y) :\n    (x + y) ^ p = x ^ p + y ^ p := by\n  let ⟨r, hr⟩ := h.exists_add_pow_prime_eq hp.out\n  simp [hr]\n#align add_pow_char_of_commute add_pow_char_of_commute\n-/\n\n",
 "add_pow_char":
 "#print add_pow_char /-\ntheorem add_pow_char [CommSemiring R] {p : ℕ} [Fact p.prime] [CharP R p] (x y : R) : (x + y) ^ p = x ^ p + y ^ p :=\n  add_pow_char_of_commute _ _ _ (Commute.all _ _)\n#align add_pow_char add_pow_char\n-/\n\n",
 "addOrderOf_one":
 "#print CharP.addOrderOf_one /-\ntheorem CharP.addOrderOf_one (R) [Semiring R] : CharP R (addOrderOf (1 : R)) :=\n  ⟨fun n => by rw [← Nat.smul_one_eq_coe, addOrderOf_dvd_iff_nsmul_eq_zero]⟩\n#align char_p.add_order_of_one CharP.addOrderOf_one\n-/\n\n",
 "Eq":
 "#print Eq /-\ntheorem Eq (p : ℕ) [C : CharP R p] : ringChar R = p :=\n  ((Classical.choose_spec (CharP.exists_unique R)).2 p C).symm\n#align eq Eq\n-/\n\n"}