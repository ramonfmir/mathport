{"ring_char_eq":
 "theorem algebra.ring_char_eq : ring_char K = ring_char L :=\n  by\n  rw [ring_char.eq_iff, algebra.char_p_iff K L]\n  apply ring_char.char_p\n#align algebra.ring_char_eq algebra.ring_char_eq\n\n",
 "char_zero_of_is_fraction_ring":
 "/-- If `R` has characteristic `0`, then so does Frac(R). -/\ntheorem char_zero_of_is_fraction_ring [CharZero R] : CharZero K :=\n  @char_p.char_p_to_char_zero K _ (char_p_of_is_fraction_ring R 0)\n#align char_zero_of_is_fraction_ring char_zero_of_is_fraction_ring\n\n",
 "char_zero_of_injective_algebra_map":
 "/-- If the algebra map `R →+* A` is injective and `R` has characteristic zero then so does `A`. -/\ntheorem char_zero_of_injective_algebra_map {R A : Type _} [CommSemiring R] [Semiring A] [algebra R A]\n    (h : function.injective (algebra_map R A)) [CharZero R] : CharZero A :=\n  {\n    cast_injective := fun x y hxy =>\n      by\n      change algebra_map ℕ A x = algebra_map ℕ A y at hxy\n      rw [is_scalar_tower.algebra_map_apply ℕ R A x] at hxy\n      rw [is_scalar_tower.algebra_map_apply ℕ R A y] at hxy\n      exact char_zero.cast_injective (h hxy) }\n#align char_zero_of_injective_algebra_map char_zero_of_injective_algebra_map\n\n",
 "char_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- A nontrivial `ℚ`-algebra has characteristic zero.\n\nThis cannot be a (local) instance because it would immediately form a loop with the\ninstance `algebra_rat`. It's probably easier to go the other way: prove `char_zero R` and\nautomatically receive an `algebra ℚ R` instance.\n-/\ntheorem algebra_rat.char_zero [Ring R] [algebra (exprℚ) R] : CharZero R :=\n  @char_p.char_p_to_char_zero R _ (algebra_rat.char_p_zero R)\n#align algebra_rat.char_zero algebra_rat.char_zero\n\n",
 "char_p_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n-- `char_p.char_p_to_char_zero A _ (char_p_of_injective_algebra_map h 0)` does not work\n-- here as it would require `ring A`.\n/-- A nontrivial `ℚ`-algebra has `char_p` equal to zero.\n\nThis cannot be a (local) instance because it would immediately form a loop with the\ninstance `algebra_rat`. It's probably easier to go the other way: prove `char_zero R` and\nautomatically receive an `algebra ℚ R` instance.\n-/\ntheorem algebra_rat.char_p_zero [Semiring R] [algebra (exprℚ) R] : char_p R 0 :=\n  char_p_of_injective_algebra_map (algebra_map (exprℚ) R).injective 0\n#align algebra_rat.char_p_zero algebra_rat.char_p_zero\n\n",
 "char_p_of_is_fraction_ring":
 "/-- If `R` has characteristic `p`, then so does Frac(R). -/\ntheorem char_p_of_is_fraction_ring [char_p R p] : char_p K p :=\n  char_p_of_injective_algebra_map (is_fraction_ring.injective R K) p\n#align char_p_of_is_fraction_ring char_p_of_is_fraction_ring\n\n",
 "char_p_of_injective_algebra_map'":
 "theorem char_p_of_injective_algebra_map' (R A : Type _) [Field R] [Semiring A] [algebra R A] [nontrivial A] (p : ℕ)\n    [char_p R p] : char_p A p :=\n  char_p_of_injective_algebra_map (algebra_map R A).injective p\n#align char_p_of_injective_algebra_map' char_p_of_injective_algebra_map'\n\n",
 "char_p_of_injective_algebra_map":
 "/-\nCopyright (c) 2021 Jon Eugster. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jon Eugster, Eric Wieser\n-/\n/-- If the algebra map `R →+* A` is injective then `A` has the same characteristic as `R`. -/\ntheorem char_p_of_injective_algebra_map {R A : Type _} [CommSemiring R] [Semiring A] [algebra R A]\n    (h : function.injective (algebra_map R A)) (p : ℕ) [char_p R p] : char_p A p :=\n  {\n    cast_eq_zero_iff := fun x => by\n      rw [← char_p.cast_eq_zero_iff R p x]\n      change algebra_map ℕ A x = 0 ↔ algebra_map ℕ R x = 0\n      rw [is_scalar_tower.algebra_map_apply ℕ R A x]\n      refine' iff.trans _ h.eq_iff\n      rw [RingHom.map_zero] }\n#align char_p_of_injective_algebra_map char_p_of_injective_algebra_map\n\n",
 "char_p_iff":
 "theorem algebra.char_p_iff (p : ℕ) : char_p K p ↔ char_p L p :=\n  (algebra_map K L).char_p_iff_char_p p\n#align algebra.char_p_iff algebra.char_p_iff\n\n"}