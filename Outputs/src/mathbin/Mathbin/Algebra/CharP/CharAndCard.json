{"prime_dvd_char_iff_dvd_card":
 "/-- The prime divisors of the characteristic of a finite commutative ring are exactly\nthe prime divisors of its cardinality. -/\ntheorem prime_dvd_char_iff_dvd_card {R : Type _} [CommRing R] [fintype R] (p : ℕ) [fact p.prime] :\n    p ∣ ring_char R ↔ p ∣ fintype.card R :=\n  by\n  refine'\n    ⟨fun h =>\n      h.trans <|\n        int.coe_nat_dvd.mp <|\n          (char_p.int_cast_eq_zero_iff R (ring_char R) (fintype.card R)).mp <| by\n            exact_mod_cast char_p.cast_card_eq_zero R,\n      fun h => _⟩\n  by_contra h₀\n  rcases exists_prime_add_order_of_dvd_card p h with ⟨r, hr⟩\n  have hr₁ := add_order_of_nsmul_eq_zero r\n  rw [hr, nsmul_eq_mul] at hr₁\n  rcases is_unit.exists_left_inv ((is_unit_iff_not_dvd_char R p).mpr h₀) with ⟨u, hu⟩\n  apply_fun (· * ·) u  at hr₁\n  rw [mul_zero, ← mul_assoc, hu, one_mul] at hr₁\n  exact mt add_monoid.order_of_eq_one_iff.mpr (ne_of_eq_of_ne hr (Nat.Prime.ne_one (fact.out p.prime))) hr₁\n#align prime_dvd_char_iff_dvd_card prime_dvd_char_iff_dvd_card\n\n",
 "not_is_unit_prime_of_dvd_card":
 "/-- A prime that does not divide the cardinality of a finite commutative ring `R`\nis a unit in `R`. -/\ntheorem not_is_unit_prime_of_dvd_card {R : Type _} [CommRing R] [fintype R] (p : ℕ) [fact p.prime]\n    (hp : p ∣ fintype.card R) : ¬is_unit (p : R) :=\n  mt (is_unit_iff_not_dvd_char R p).mp (not_not.mpr ((prime_dvd_char_iff_dvd_card p).mpr hp))\n#align not_is_unit_prime_of_dvd_card not_is_unit_prime_of_dvd_card\n\n",
 "is_unit_iff_not_dvd_char_of_ring_char_ne_zero":
 "/-\nCopyright (c) 2022 Michael Stoll. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Michael Stoll\n-/\n/-- A prime `p` is a unit in a commutative ring `R` of nonzero characterstic iff it does not divide\nthe characteristic. -/\ntheorem is_unit_iff_not_dvd_char_of_ring_char_ne_zero (R : Type _) [CommRing R] (p : ℕ) [fact p.prime]\n    (hR : ring_char R ≠ 0) : is_unit (p : R) ↔ ¬p ∣ ring_char R :=\n  by\n  have hch := char_p.cast_eq_zero R (ring_char R)\n  have hp : p.prime := fact.out p.prime\n  constructor\n  · rintro h₁ ⟨q, hq⟩\n    rcases is_unit.exists_left_inv h₁ with ⟨a, ha⟩\n    have h₃ : ¬ring_char R ∣ q := by\n      rintro ⟨r, hr⟩\n      rw [hr, ← mul_assoc, mul_comm p, mul_assoc] at hq\n      nth_rw 1 [← mul_one (ring_char R)] at hq\n      exact Nat.Prime.not_dvd_one hp ⟨r, mul_left_cancel₀ hR hq⟩\n    have h₄ := mt (char_p.int_cast_eq_zero_iff R (ring_char R) q).mp\n    apply_fun (coe : ℕ → R)  at hq\n    apply_fun (· * ·) a  at hq\n    rw [nat.cast_mul, hch, mul_zero, ← mul_assoc, ha, one_mul] at hq\n    norm_cast  at h₄\n    exact h₄ h₃ hq.symm\n  · intro h\n    rcases(hp.coprime_iff_not_dvd.mpr h).is_coprime with ⟨a, b, hab⟩\n    apply_fun (coe : ℤ → R)  at hab\n    push_cast at hab\n    rw [hch, mul_zero, add_zero, mul_comm] at hab\n    exact isUnit_of_mul_eq_one (p : R) a hab\n#align is_unit_iff_not_dvd_char_of_ring_char_ne_zero is_unit_iff_not_dvd_char_of_ring_char_ne_zero\n\n",
 "is_unit_iff_not_dvd_char":
 "/-- A prime `p` is a unit in a finite commutative ring `R`\niff it does not divide the characteristic. -/\ntheorem is_unit_iff_not_dvd_char (R : Type _) [CommRing R] (p : ℕ) [fact p.prime] [Finite R] :\n    is_unit (p : R) ↔ ¬p ∣ ring_char R :=\n  is_unit_iff_not_dvd_char_of_ring_char_ne_zero R p <| char_p.char_ne_zero_of_finite R (ring_char R)\n#align is_unit_iff_not_dvd_char is_unit_iff_not_dvd_char\n\n"}