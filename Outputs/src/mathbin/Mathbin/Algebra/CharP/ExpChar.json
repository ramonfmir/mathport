{"exp_char_one_of_char_zero":
 "/-\nCopyright (c) 2021 Jakob Scholbach. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jakob Scholbach\n-/\n/-- The exponential characteristic is one if the characteristic is zero. -/\ntheorem exp_char_one_of_char_zero (q : ℕ) [hp : char_p R 0] [hq : exp_char R q] : q = 1 :=\n  by\n  cases' hq with q hq_one hq_prime\n  · rfl\n  · exact false.elim (lt_irrefl _ ((hp.eq R hq_hchar).symm ▸ hq_prime : (0 : ℕ).prime).pos)\n#align exp_char_one_of_char_zero exp_char_one_of_char_zero\n\n",
 "exp_char_one_iff_char_zero":
 "-- see Note [lower instance priority]\n/-- The exponential characteristic is one iff the characteristic is zero. -/\ntheorem exp_char_one_iff_char_zero (p q : ℕ) [char_p R p] [exp_char R q] : q = 1 ↔ p = 0 :=\n  by\n  constructor\n  · rintro rfl\n    exact char_zero_of_exp_char_one R p\n  · rintro rfl\n    exact exp_char_one_of_char_zero R q\n#align exp_char_one_iff_char_zero exp_char_one_iff_char_zero\n\n",
 "exp_char_is_prime_or_one":
 "/-- The exponential characteristic is a prime number or one. -/\ntheorem exp_char_is_prime_or_one (q : ℕ) [hq : exp_char R q] : Nat.Prime q ∨ q = 1 :=\n  or_iff_not_imp_right.mpr fun h => by\n    cases' char_p.exists R with p hp\n    have p_ne_zero : p ≠ 0 := by\n      intro p_zero\n      have : char_p R 0 := by rwa [← p_zero]\n      have : q = 1 := exp_char_one_of_char_zero R q\n      contradiction\n    have p_eq_q : p = q := (char_eq_exp_char_iff R p q).mpr (char_prime_of_ne_zero R p_ne_zero)\n    cases' char_p.char_is_prime_or_zero R p with pprime\n    · rwa [p_eq_q] at pprime\n    · contradiction\n#align exp_char_is_prime_or_one exp_char_is_prime_or_one\n\n",
 "char_zero_of_exp_char_one":
 "/-- The exponential characteristic is one if the characteristic is zero. -/\ntheorem char_zero_of_exp_char_one (p : ℕ) [hp : char_p R p] [hq : exp_char R 1] : p = 0 :=\n  by\n  cases hq\n  · exact char_p.eq R hp infer_instance\n  · exact false.elim (char_p.char_ne_one R 1 rfl)\n#align char_zero_of_exp_char_one char_zero_of_exp_char_one\n\n",
 "char_prime_of_ne_zero":
 "/-- A helper lemma: the characteristic is prime if it is non-zero. -/\ntheorem char_prime_of_ne_zero {p : ℕ} [hp : char_p R p] (p_ne_zero : p ≠ 0) : Nat.Prime p :=\n  by\n  cases' char_p.char_is_prime_or_zero R p with h h\n  · exact h\n  · contradiction\n#align char_prime_of_ne_zero char_prime_of_ne_zero\n\n",
 "char_eq_exp_char_iff":
 "/-- The characteristic equals the exponential characteristic iff the former is prime. -/\ntheorem char_eq_exp_char_iff (p q : ℕ) [hp : char_p R p] [hq : exp_char R q] : p = q ↔ p.prime :=\n  by\n  cases' hq with q hq_one hq_prime\n  · apply iff_of_false\n    · rintro rfl\n      exact one_ne_zero (hp.eq R (char_p.of_char_zero R))\n    · intro pprime\n      rw [(char_p.eq R hp infer_instance : p = 0)] at pprime\n      exact Nat.not_prime_zero pprime\n  · exact ⟨fun hpq => hpq.symm ▸ hq_prime, fun _ => char_p.eq R hp hq_hchar⟩\n#align char_eq_exp_char_iff char_eq_exp_char_iff\n\n"}