{"expChar_one_of_char_zero":
 "#print expChar_one_of_char_zero /-\n/-\nCopyright (c) 2021 Jakob Scholbach. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jakob Scholbach\n-/\n/-- The exponential characteristic is one if the characteristic is zero. -/\ntheorem expChar_one_of_char_zero (q : ℕ) [hp : CharP R 0] [hq : ExpChar R q] : q = 1 :=\n  by\n  cases' hq with q hq_one hq_prime\n  · rfl\n  · exact false.elim (lt_irrefl _ ((hp.eq R hq_hchar).symm ▸ hq_prime : (0 : ℕ).prime).pos)\n#align exp_char_one_of_char_zero expChar_one_of_char_zero\n-/\n\n",
 "expChar_one_iff_char_zero":
 "#print expChar_one_iff_char_zero /-\n-- see Note [lower instance priority]\n/-- The exponential characteristic is one iff the characteristic is zero. -/\ntheorem expChar_one_iff_char_zero (p q : ℕ) [CharP R p] [ExpChar R q] : q = 1 ↔ p = 0 :=\n  by\n  constructor\n  · rintro rfl\n    exact char_zero_of_expChar_one R p\n  · rintro rfl\n    exact expChar_one_of_char_zero R q\n#align exp_char_one_iff_char_zero expChar_one_iff_char_zero\n-/\n\n",
 "expChar_is_prime_or_one":
 "#print expChar_is_prime_or_one /-\n/-- The exponential characteristic is a prime number or one. -/\ntheorem expChar_is_prime_or_one (q : ℕ) [hq : ExpChar R q] : Nat.Prime q ∨ q = 1 :=\n  or_iff_not_imp_right.mpr fun h => by\n    cases' CharP.exists R with p hp\n    have p_ne_zero : p ≠ 0 := by\n      intro p_zero\n      have : CharP R 0 := by rwa [← p_zero]\n      have : q = 1 := expChar_one_of_char_zero R q\n      contradiction\n    have p_eq_q : p = q := (char_eq_expChar_iff R p q).mpr (char_prime_of_ne_zero R p_ne_zero)\n    cases' CharP.char_is_prime_or_zero R p with pprime\n    · rwa [p_eq_q] at pprime\n    · contradiction\n#align exp_char_is_prime_or_one expChar_is_prime_or_one\n-/\n\n",
 "char_zero_of_expChar_one":
 "#print char_zero_of_expChar_one /-\n/-- The exponential characteristic is one if the characteristic is zero. -/\ntheorem char_zero_of_expChar_one (p : ℕ) [hp : CharP R p] [hq : ExpChar R 1] : p = 0 :=\n  by\n  cases hq\n  · exact CharP.eq R hp inferInstance\n  · exact false.elim (CharP.char_ne_one R 1 rfl)\n#align char_zero_of_exp_char_one char_zero_of_expChar_one\n-/\n\n",
 "char_prime_of_ne_zero":
 "#print char_prime_of_ne_zero /-\n/-- A helper lemma: the characteristic is prime if it is non-zero. -/\ntheorem char_prime_of_ne_zero {p : ℕ} [hp : CharP R p] (p_ne_zero : p ≠ 0) : Nat.Prime p :=\n  by\n  cases' CharP.char_is_prime_or_zero R p with h h\n  · exact h\n  · contradiction\n#align char_prime_of_ne_zero char_prime_of_ne_zero\n-/\n\n",
 "char_eq_expChar_iff":
 "#print char_eq_expChar_iff /-\n/-- The characteristic equals the exponential characteristic iff the former is prime. -/\ntheorem char_eq_expChar_iff (p q : ℕ) [hp : CharP R p] [hq : ExpChar R q] : p = q ↔ p.prime :=\n  by\n  cases' hq with q hq_one hq_prime\n  · apply iff_of_false\n    · rintro rfl\n      exact one_ne_zero (hp.eq R (CharP.ofCharZero R))\n    · intro pprime\n      rw [(CharP.eq R hp inferInstance : p = 0)] at pprime\n      exact Nat.not_prime_zero pprime\n  · exact ⟨fun hpq => hpq.symm ▸ hq_prime, fun _ => CharP.eq R hp hq_hchar⟩\n#align char_eq_exp_char_iff char_eq_expChar_iff\n-/\n\n"}