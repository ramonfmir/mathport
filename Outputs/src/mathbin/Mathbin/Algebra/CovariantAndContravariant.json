{"rel_of_act_rel_act":
 "#print rel_of_act_rel_act /-\ntheorem rel_of_act_rel_act (m : M) {a b : N} (ab : r (μ m a) (μ m b)) : r a b :=\n  contravariant_class.elim _ ab\n#align rel_of_act_rel_act rel_of_act_rel_act\n-/\n\n",
 "rel_iff_cov":
 "#print rel_iff_cov /-\n/-\nCopyright (c) 2021 Damiano Testa. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Damiano Testa\n-/\n-- TODO: convert `has_exists_mul_of_le`, `has_exists_add_of_le`?\n-- TODO: relationship with `con/add_con`\n-- TODO: include equivalence of `left_cancel_semigroup` with\n-- `semigroup partial_order contravariant_class α α (*) (≤)`?\n-- TODO : use ⇒, as per Eric's suggestion?  See\n-- https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/ordered.20stuff/near/236148738\n-- for a discussion.\ntheorem rel_iff_cov [CovariantClass M N μ r] [ContravariantClass M N μ r] (m : M) {a b : N} :\n    r (μ m a) (μ m b) ↔ r a b :=\n  ⟨contravariant_class.elim _, covariant_class.elim _⟩\n#align rel_iff_cov rel_iff_cov\n-/\n\n",
 "rel_act_of_rel_of_rel_act":
 "#print rel_act_of_rel_of_rel_act /-\ntheorem rel_act_of_rel_of_rel_act (ab : r a b) (rr : r c (μ m a)) : r c (μ m b) :=\n  trans rr (act_rel_act_of_rel _ ab)\n#align rel_act_of_rel_of_rel_act rel_act_of_rel_of_rel_act\n-/\n\n",
 "rel_act_of_act_rel_act_of_rel_act":
 "#print rel_act_of_act_rel_act_of_rel_act /-\ntheorem rel_act_of_act_rel_act_of_rel_act (ab : r (μ m a) (μ m b)) (rr : r b (μ m c)) : r a (μ m c) :=\n  trans (rel_of_act_rel_act m ab) rr\n#align rel_act_of_act_rel_act_of_rel_act rel_act_of_act_rel_act_of_rel_act\n-/\n\n",
 "monotone_of_const":
 "#print Covariant.monotone_of_const /-\n/-- The partial application of a constant to a covariant operator is monotone. -/\ntheorem Covariant.monotone_of_const [CovariantClass M N μ (· ≤ ·)] (m : M) : Monotone (μ m) := fun a b ha =>\n  covariant_class.elim m ha\n#align covariant.monotone_of_const Covariant.monotone_of_const\n-/\n\n",
 "flip":
 "#print Contravariant.flip /-\ntheorem Contravariant.flip (h : Contravariant M N μ r) : Contravariant M N μ (flip r) := fun a b c hbc => h a hbc\n#align contravariant.flip Contravariant.flip\n-/\n\n",
 "covariant_swap_iff_contravariant_swap":
 "#print Group.covariant_swap_iff_contravariant_swap /-\n@[to_additive]\ntheorem Group.covariant_swap_iff_contravariant_swap [Group N] :\n    Covariant N N (swap (· * ·)) r ↔ Contravariant N N (swap (· * ·)) r :=\n  by\n  refine' ⟨fun h a b c bc => _, fun h a b c bc => _⟩\n  · rw [← mul_inv_cancel_right b a, ← mul_inv_cancel_right c a]\n    exact h a⁻¹ bc\n  · rw [← mul_inv_cancel_right b a, ← mul_inv_cancel_right c a] at bc\n    exact h a⁻¹ bc\n#align group.covariant_swap_iff_contravariant_swap Group.covariant_swap_iff_contravariant_swap\n#align add_group.covariant_swap_iff_contravariant_swap AddGroup.covariant_swap_iff_contravariant_swap\n-/\n\n",
 "covariant_of_const'":
 "#print Antitone.covariant_of_const' /-\n/-- Dual of `monotone.covariant_of_const'` -/\ntheorem Antitone.covariant_of_const' {μ : N → N → N} [CovariantClass N N (swap μ) (· ≤ ·)] (hf : Antitone f) (m : N) :\n    Antitone fun n => f (μ n m) :=\n  hf.comp_monotone <| Covariant.monotone_of_const m\n#align antitone.covariant_of_const' Antitone.covariant_of_const'\n-/\n\n",
 "covariant_of_const":
 "#print Antitone.covariant_of_const /-\n/-- Dual of `monotone.covariant_of_const` -/\ntheorem Antitone.covariant_of_const [CovariantClass M N μ (· ≤ ·)] (hf : Antitone f) (m : M) :\n    Antitone fun n => f (μ m n) :=\n  hf.comp_monotone <| Covariant.monotone_of_const m\n#align antitone.covariant_of_const Antitone.covariant_of_const\n-/\n\n",
 "covariant_lt_iff_contravariant_le":
 "#print covariant_lt_iff_contravariant_le /-\ntheorem covariant_lt_iff_contravariant_le [linear_order N] : Covariant M N μ (· < ·) ↔ Contravariant M N μ (· ≤ ·) :=\n  ⟨fun h a b c bc => not_lt.mp fun k => not_lt.mpr bc (h _ k), fun h a b c bc =>\n    not_le.mp fun k => not_le.mpr bc (h _ k)⟩\n#align covariant_lt_iff_contravariant_le covariant_lt_iff_contravariant_le\n-/\n\n",
 "covariant_le_of_covariant_lt":
 "#print covariant_le_of_covariant_lt /-\ntheorem covariant_le_of_covariant_lt [partial_order N] : Covariant M N μ (· < ·) → Covariant M N μ (· ≤ ·) :=\n  by\n  refine' fun h a b c bc => _\n  rcases le_iff_eq_or_lt.mp bc with (rfl | bc)\n  · exact rfl.le\n  · exact (h _ bc).le\n#align covariant_le_of_covariant_lt covariant_le_of_covariant_lt\n-/\n\n",
 "covariant_le_iff_contravariant_lt":
 "#print covariant_le_iff_contravariant_lt /-\ntheorem covariant_le_iff_contravariant_lt [linear_order N] : Covariant M N μ (· ≤ ·) ↔ Contravariant M N μ (· < ·) :=\n  ⟨fun h a b c bc => not_le.mp fun k => not_le.mpr bc (h _ k), fun h a b c bc =>\n    not_lt.mp fun k => not_lt.mpr bc (h _ k)⟩\n#align covariant_le_iff_contravariant_lt covariant_le_iff_contravariant_lt\n-/\n\n",
 "covariant_iff_contravariant":
 "#print Group.covariant_iff_contravariant /-\n@[to_additive]\ntheorem Group.covariant_iff_contravariant [Group N] : Covariant N N (· * ·) r ↔ Contravariant N N (· * ·) r :=\n  by\n  refine' ⟨fun h a b c bc => _, fun h a b c bc => _⟩\n  · rw [← inv_mul_cancel_left a b, ← inv_mul_cancel_left a c]\n    exact h a⁻¹ bc\n  · rw [← inv_mul_cancel_left a b, ← inv_mul_cancel_left a c] at bc\n    exact h a⁻¹ bc\n#align group.covariant_iff_contravariant Group.covariant_iff_contravariant\n#align add_group.covariant_iff_contravariant AddGroup.covariant_iff_contravariant\n-/\n\n",
 "covariant_flip_mul_iff":
 "#print covariant_flip_mul_iff /-\n@[to_additive]\ntheorem covariant_flip_mul_iff [CommSemigroup N] : Covariant N N (flip (· * ·)) r ↔ Covariant N N (· * ·) r := by\n  rw [IsSymmOp.flip_eq]\n#align covariant_flip_mul_iff covariant_flip_mul_iff\n#align covariant_flip_add_iff covariant_flip_add_iff\n-/\n\n",
 "contravariant_lt_of_contravariant_le":
 "#print contravariant_lt_of_contravariant_le /-\ntheorem contravariant_lt_of_contravariant_le [partial_order N] :\n    Contravariant M N μ (· ≤ ·) → Contravariant M N μ (· < ·) :=\n  by\n  refine' fun h a b c bc => lt_iff_le_and_ne.mpr ⟨h a bc.le, _⟩\n  rintro rfl\n  exact lt_irrefl _ bc\n#align contravariant_lt_of_contravariant_le contravariant_lt_of_contravariant_le\n-/\n\n",
 "contravariant_flip_mul_iff":
 "#print contravariant_flip_mul_iff /-\n@[to_additive]\ntheorem contravariant_flip_mul_iff [CommSemigroup N] :\n    Contravariant N N (flip (· * ·)) r ↔ Contravariant N N (· * ·) r := by rw [IsSymmOp.flip_eq]\n#align contravariant_flip_mul_iff contravariant_flip_mul_iff\n#align contravariant_flip_add_iff contravariant_flip_add_iff\n-/\n\n",
 "act_rel_of_rel_of_act_rel":
 "#print act_rel_of_rel_of_act_rel /-\n--  Lemmas with 3 elements.\ntheorem act_rel_of_rel_of_act_rel (ab : r a b) (rl : r (μ m b) c) : r (μ m a) c :=\n  trans (act_rel_act_of_rel m ab) rl\n#align act_rel_of_rel_of_act_rel act_rel_of_rel_of_act_rel\n-/\n\n",
 "act_rel_of_act_rel_of_rel_act_rel":
 "#print act_rel_of_act_rel_of_rel_act_rel /-\n--  Lemmas with 3 elements.\ntheorem act_rel_of_act_rel_of_rel_act_rel (ab : r (μ m a) b) (rl : r (μ m b) (μ m c)) : r (μ m a) c :=\n  trans ab (rel_of_act_rel_act m rl)\n#align act_rel_of_act_rel_of_rel_act_rel act_rel_of_act_rel_of_rel_act_rel\n-/\n\n",
 "act_rel_act_of_rel_of_rel":
 "#print act_rel_act_of_rel_of_rel /-\n--  Lemma with 4 elements.\ntheorem act_rel_act_of_rel_of_rel (ab : r a b) (cd : r c d) : r (mu a c) (mu b d) :=\n  trans (act_rel_act_of_rel c ab : _) (act_rel_act_of_rel b cd)\n#align act_rel_act_of_rel_of_rel act_rel_act_of_rel_of_rel\n-/\n\n",
 "act_rel_act_of_rel":
 "#print act_rel_act_of_rel /-\ntheorem act_rel_act_of_rel (m : M) {a b : N} (ab : r a b) : r (μ m a) (μ m b) :=\n  covariant_class.elim _ ab\n#align act_rel_act_of_rel act_rel_act_of_rel\n-/\n\n"}