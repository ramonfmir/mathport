{"sub_le":
 "protected theorem sub_le (a b c : R) : abv (a - c) ≤ abv (a - b) + abv (b - c) := by\n  simpa [sub_eq_add_neg, add_assoc] using abv.add_le (a - b) (b - c)\n#align sub_le sub_le\n\n",
 "sub_abv_le_abv_sub":
 "theorem sub_abv_le_abv_sub (a b : R) : abv a - abv b ≤ abv (a - b) :=\n  (toAbsoluteValue abv).le_sub a b\n#align sub_abv_le_abv_sub sub_abv_le_abv_sub\n\n",
 "pos_iff":
 "@[simp]\nprotected theorem pos_iff {x : R} : 0 < abv x ↔ x ≠ 0 :=\n  ⟨fun h₁ => mt abv.eq_zero.mpr h₁.ne', abv.pos⟩\n#align pos_iff pos_iff\n\n",
 "pos":
 "protected theorem pos {x : R} (hx : x ≠ 0) : 0 < abv x :=\n  lt_of_le_of_ne (abv.nonneg x) (ne.symm <| mt abv.eq_zero.mp hx)\n#align pos pos\n\n",
 "nonneg":
 "protected theorem nonneg (x : R) : 0 ≤ abv x :=\n  abv.nonneg' x\n#align nonneg nonneg\n\n",
 "ne_zero":
 "protected theorem ne_zero {x : R} (hx : x ≠ 0) : abv x ≠ 0 :=\n  (abv.pos hx).ne'\n#align ne_zero ne_zero\n\n",
 "neZero_iff":
 "#print neZero_iff /-\nprotected theorem neZero_iff {x : R} : abv x ≠ 0 ↔ x ≠ 0 :=\n  abv.eq_zero.not\n#align ne_zero_iff neZero_iff\n-/\n\n",
 "map_zero":
 "#print map_zero /-\n@[simp]\nprotected theorem map_zero : abv 0 = 0 :=\n  abv.eq_zero.2 rfl\n#align map_zero map_zero\n-/\n\n",
 "map_sub_eq_zero_iff":
 "@[simp]\ntheorem map_sub_eq_zero_iff (a b : R) : abv (a - b) = 0 ↔ a = b :=\n  abv.eq_zero.trans sub_eq_zero\n#align map_sub_eq_zero_iff map_sub_eq_zero_iff\n\n",
 "map_sub":
 "#print map_sub /-\nprotected theorem map_sub (a b : R) : abv (a - b) = abv (b - a) := by rw [← neg_sub, abv.map_neg]\n#align map_sub map_sub\n-/\n\n",
 "map_pow":
 "#print map_pow /-\n@[simp]\nprotected theorem map_pow (a : R) (n : ℕ) : abv (a ^ n) = abv a ^ n :=\n  abv.to_monoid_hom.map_pow a n\n#align map_pow map_pow\n-/\n\n",
 "map_one_of_is_regular":
 "theorem map_one_of_is_regular (h : IsLeftRegular (abv 1)) : abv 1 = 1 :=\n  h <| by simp [← abv.map_mul]\n#align map_one_of_is_regular map_one_of_is_regular\n\n",
 "map_one":
 "#print map_one /-\n-- all of these are true for `no_zero_divisors S`; but it doesn't work smoothly with the\n-- `is_domain`/`cancel_monoid_with_zero` API\n@[simp]\nprotected theorem map_one : abv 1 = 1 :=\n  abv.map_one_of_is_regular (isRegular_of_ne_zero <| abv.ne_zero one_ne_zero).left\n#align map_one map_one\n-/\n\n",
 "map_neg":
 "#print map_neg /-\n@[simp]\nprotected theorem map_neg (a : R) : abv (-a) = abv a :=\n  by\n  by_cases ha : a = 0; · simp [ha]\n  refine' (mul_self_eq_mul_self_iff.mp (by rw [← abv.map_mul, neg_mul_neg, abv.map_mul])).resolve_right _\n  exact ((neg_lt_zero.mpr (abv.pos ha)).trans (abv.pos (neg_ne_zero.mpr ha))).ne'\n#align map_neg map_neg\n-/\n\n",
 "map_mul":
 "#print map_mul /-\n@[simp]\nprotected theorem map_mul (x y : R) : abv (x * y) = abv x * abv y :=\n  abv.map_mul' x y\n#align map_mul map_mul\n-/\n\n",
 "le_sub":
 "protected theorem le_sub (a b : R) : abv a - abv b ≤ abv (a - b) :=\n  sub_le_iff_le_add.2 <| by simpa using abv.add_le (a - b) b\n#align le_sub le_sub\n\n",
 "ext":
 "@[ext]\ntheorem ext ⦃f g : AbsoluteValue R S⦄ : (∀ x, f x = g x) → f = g :=\n  fun_like.ext _ _\n#align ext ext\n\n",
 "eq_zero":
 "@[simp]\nprotected theorem eq_zero {x : R} : abv x = 0 ↔ x = 0 :=\n  abv.eq_zero' x\n#align eq_zero eq_zero\n\n",
 "coe_to_mul_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_mul_hom : «expr⇑ » abv.to_mul_hom = abv :=\n  rfl\n#align coe_to_mul_hom coe_to_mul_hom\n\n",
 "coe_to_monoid_with_zero_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_monoid_with_zero_hom : «expr⇑ » abv.to_monoid_with_zero_hom = abv :=\n  rfl\n#align coe_to_monoid_with_zero_hom coe_to_monoid_with_zero_hom\n\n",
 "coe_to_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_to_monoid_hom : «expr⇑ » abv.to_monoid_hom = abv :=\n  rfl\n#align coe_to_monoid_hom coe_to_monoid_hom\n\n",
 "coe_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙ* » -/\n/-\nCopyright (c) 2021 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Mario Carneiro, Anne Baanen\n-/\n@[simp]\ntheorem coe_mk (f : «expr →ₙ* » R S) {h₁ h₂ h₃} : (absolute_value.mk f h₁ h₂ h₃ : R → S) = f :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "add_le":
 "protected theorem add_le (x y : R) : abv (x + y) ≤ abv x + abv y :=\n  abv.add_le' x y\n#align add_le add_le\n\n",
 "abv_zero":
 "theorem abv_zero : abv 0 = 0 :=\n  (toAbsoluteValue abv).map_zero\n#align abv_zero abv_zero\n\n",
 "abv_sub_le":
 "theorem abv_sub_le (a b c : R) : abv (a - c) ≤ abv (a - b) + abv (b - c) := by\n  simpa [sub_eq_add_neg, add_assoc] using abv_add abv (a - b) (b - c)\n#align abv_sub_le abv_sub_le\n\n",
 "abv_sub":
 "theorem abv_sub (a b : R) : abv (a - b) = abv (b - a) :=\n  (toAbsoluteValue abv).map_sub a b\n#align abv_sub abv_sub\n\n",
 "abv_pow":
 "theorem abv_pow [nontrivial R] (abv : R → S) [IsAbsoluteValue abv] (a : R) (n : ℕ) : abv (a ^ n) = abv a ^ n :=\n  (toAbsoluteValue abv).map_pow a n\n#align abv_pow abv_pow\n\n",
 "abv_pos":
 "theorem abv_pos {a : R} : 0 < abv a ↔ a ≠ 0 :=\n  (toAbsoluteValue abv).pos_iff\n#align abv_pos abv_pos\n\n",
 "abv_one'":
 "theorem abv_one' : abv 1 = 1 :=\n  (toAbsoluteValue abv).map_one_of_is_regular <|\n    (isRegular_of_ne_zero <| (toAbsoluteValue abv).ne_zero one_ne_zero).left\n#align abv_one' abv_one'\n\n",
 "abv_one":
 "theorem abv_one [nontrivial R] : abv 1 = 1 :=\n  (toAbsoluteValue abv).map_one\n#align abv_one abv_one\n\n",
 "abv_neg":
 "theorem abv_neg (a : R) : abv (-a) = abv a :=\n  (toAbsoluteValue abv).map_neg a\n#align abv_neg abv_neg\n\n",
 "abv_inv":
 "theorem abv_inv (a : R) : abv a⁻¹ = (abv a)⁻¹ :=\n  map_inv₀ (abvHom' abv) a\n#align abv_inv abv_inv\n\n",
 "abv_div":
 "theorem abv_div (a b : R) : abv (a / b) = abv a / abv b :=\n  map_div₀ (abvHom' abv) a b\n#align abv_div abv_div\n\n",
 "abs_abv_sub_le_abv_sub":
 "theorem abs_abv_sub_le_abv_sub (a b : R) : abs (abv a - abv b) ≤ abv (a - b) :=\n  (toAbsoluteValue abv).abs_abv_sub_le_abv_sub a b\n#align abs_abv_sub_le_abv_sub abs_abv_sub_le_abv_sub\n\n"}