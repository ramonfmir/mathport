{"map_tsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n#print OrderIso.map_tsub /-\n/-- An order isomorphism between types with ordered subtraction preserves subtraction provided that\nit preserves addition. -/\ntheorem OrderIso.map_tsub {M N : Type _} [preorder M] [Add M] [Sub M] [OrderedSub M] [partial_order N] [Add N] [Sub N]\n    [OrderedSub N] (e : «expr ≃o » M N) (h_add : ∀ a b, e (a + b) = e a + e b) (a b : M) : e (a - b) = e a - e b :=\n  by\n  set e_add : «expr ≃+ » M N := { e with map_add' := h_add }\n  refine' le_antisymm _ (e_add.to_add_hom.le_map_tsub e.monotone a b)\n  suffices e (e.symm (e a) - e.symm (e b)) ≤ e (e.symm (e a - e b)) by simpa\n  exact e.monotone (e_add.symm.to_add_hom.le_map_tsub e.symm.monotone _ _)\n#align order_iso.map_tsub OrderIso.map_tsub\n-/\n\n",
 "le_tsub_mul":
 "#print le_tsub_mul /-\ntheorem le_tsub_mul {R : Type _} [CommSemiring R] [preorder R] [Sub R] [OrderedSub R]\n    [covariant_class R R (· * ·) (· ≤ ·)] {a b c : R} : a * c - b * c ≤ (a - b) * c := by\n  simpa only [mul_comm _ c] using le_mul_tsub\n#align le_tsub_mul le_tsub_mul\n-/\n\n",
 "le_mul_tsub":
 "#print le_mul_tsub /-\ntheorem le_mul_tsub {R : Type _} [Distrib R] [preorder R] [Sub R] [OrderedSub R] [covariant_class R R (· * ·) (· ≤ ·)]\n    {a b c : R} : a * b - a * c ≤ a * (b - c) :=\n  (AddHom.mulLeft a).le_map_tsub (monotone_id.const_mul' a) _ _\n#align le_mul_tsub le_mul_tsub\n-/\n\n",
 "le_map_tsub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n#print AddMonoidHom.le_map_tsub /-\ntheorem AddMonoidHom.le_map_tsub [preorder β] [add_comm_monoid β] [Sub β] [OrderedSub β] (f : «expr →+ » α β)\n    (hf : monotone f) (a b : α) : f a - f b ≤ f (a - b) :=\n  f.to_add_hom.le_map_tsub hf a b\n#align add_monoid_hom.le_map_tsub AddMonoidHom.le_map_tsub\n-/\n\n"}