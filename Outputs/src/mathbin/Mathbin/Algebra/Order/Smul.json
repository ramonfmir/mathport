{"upperBounds_smul_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print upperBounds_smul_of_pos /-\n@[simp]\ntheorem upperBounds_smul_of_pos (hc : 0 < c) : upperBounds («expr • » c s) = «expr • » c (upperBounds s) :=\n  (OrderIso.smulLeft _ hc).upper_bounds_image\n#align upper_bounds_smul_of_pos upperBounds_smul_of_pos\n-/\n\n",
 "strictMono_smul_left":
 "#print strictMono_smul_left /-\ntheorem strictMono_smul_left (hc : 0 < c) : StrictMono (has_smul.smul c : M → M) := fun a b h =>\n  smul_lt_smul_of_pos h hc\n#align strict_mono_smul_left strictMono_smul_left\n-/\n\n",
 "smul_upperBounds_subset_upperBounds_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_upperBounds_subset_upperBounds_smul /-\ntheorem smul_upperBounds_subset_upperBounds_smul (hc : 0 ≤ c) :\n    «expr • » c (upperBounds s) ⊆ upperBounds («expr • » c s) :=\n  (monotone_smul_left hc).image_upper_bounds_subset_upper_bounds_image\n#align smul_upper_bounds_subset_upper_bounds_smul smul_upperBounds_subset_upperBounds_smul\n-/\n\n",
 "smul_pos_iff_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_pos_iff_of_pos /-\ntheorem smul_pos_iff_of_pos (hc : 0 < c) : 0 < «expr • » c a ↔ 0 < a :=\n  calc\n    0 < «expr • » c a ↔ «expr • » c 0 < «expr • » c a := by rw [smul_zero]\n    _ ↔ 0 < a := smul_lt_smul_iff_of_pos hc\n    \n#align smul_pos_iff_of_pos smul_pos_iff_of_pos\n-/\n\n",
 "smul_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print BddAbove.smul_of_nonneg /-\ntheorem BddAbove.smul_of_nonneg (hs : BddAbove s) (hc : 0 ≤ c) : BddAbove («expr • » c s) :=\n  (monotone_smul_left hc).map_bdd_above hs\n#align bdd_above.smul_of_nonneg BddAbove.smul_of_nonneg\n-/\n\n",
 "smul_nonpos_of_nonneg_of_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_nonpos_of_nonneg_of_nonpos /-\ntheorem smul_nonpos_of_nonneg_of_nonpos (hc : 0 ≤ c) (ha : a ≤ 0) : «expr • » c a ≤ 0 :=\n  @smul_nonneg R («expr ᵒᵈ» M) _ _ _ _ _ _ hc ha\n#align smul_nonpos_of_nonneg_of_nonpos smul_nonpos_of_nonneg_of_nonpos\n-/\n\n",
 "smul_nonneg_of_pos_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem smul_nonneg_of_pos_of_nonneg (ha : 0 < a) (hb : 0 ≤ b) : 0 ≤ «expr • » a b :=\n  smul_nonneg ha.le hb\n#align smul_nonneg_of_pos_of_nonneg smul_nonneg_of_pos_of_nonneg\n\n",
 "smul_nonneg_of_nonneg_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem smul_nonneg_of_nonneg_of_pos (ha : 0 ≤ a) (hb : 0 < b) : 0 ≤ «expr • » a b :=\n  smul_nonneg ha hb.le\n#align smul_nonneg_of_nonneg_of_pos smul_nonneg_of_nonneg_of_pos\n\n",
 "smul_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_nonneg /-\ntheorem smul_nonneg (hc : 0 ≤ c) (ha : 0 ≤ a) : 0 ≤ «expr • » c a :=\n  calc\n    (0 : M) = «expr • » c (0 : M) := (smul_zero c).symm\n    _ ≤ «expr • » c a := smul_le_smul_of_nonneg ha hc\n    \n#align smul_nonneg smul_nonneg\n-/\n\n",
 "smul_ne_zero_of_pos_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem smul_ne_zero_of_pos_of_ne_zero [preorder R] (ha : 0 < a) (hb : b ≠ 0) : «expr • » a b ≠ 0 :=\n  smul_ne_zero ha.ne' hb\n#align smul_ne_zero_of_pos_of_ne_zero smul_ne_zero_of_pos_of_ne_zero\n\n",
 "smul_ne_zero_of_ne_zero_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem smul_ne_zero_of_ne_zero_of_pos [preorder M] (ha : a ≠ 0) (hb : 0 < b) : «expr • » a b ≠ 0 :=\n  smul_ne_zero ha hb.ne'\n#align smul_ne_zero_of_ne_zero_of_pos smul_ne_zero_of_ne_zero_of_pos\n\n",
 "smul_lt_smul_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_lt_smul_of_pos /-\n/-\nCopyright (c) 2020 Frédéric Dupuis. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Frédéric Dupuis\n-/\ntheorem smul_lt_smul_of_pos : a < b → 0 < c → «expr • » c a < «expr • » c b :=\n  ordered_smul.smul_lt_smul_of_pos\n#align smul_lt_smul_of_pos smul_lt_smul_of_pos\n-/\n\n",
 "smul_lt_smul_iff_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_lt_smul_iff_of_pos /-\ntheorem smul_lt_smul_iff_of_pos (hc : 0 < c) : «expr • » c a < «expr • » c b ↔ a < b :=\n  ⟨fun h => lt_of_smul_lt_smul_of_nonneg h hc.le, fun h => smul_lt_smul_of_pos h hc⟩\n#align smul_lt_smul_iff_of_pos smul_lt_smul_iff_of_pos\n-/\n\n",
 "smul_lowerBounds_subset_lowerBounds_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_lowerBounds_subset_lowerBounds_smul /-\ntheorem smul_lowerBounds_subset_lowerBounds_smul (hc : 0 ≤ c) :\n    «expr • » c (lowerBounds s) ⊆ lowerBounds («expr • » c s) :=\n  (monotone_smul_left hc).image_lower_bounds_subset_lower_bounds_image\n#align smul_lower_bounds_subset_lower_bounds_smul smul_lowerBounds_subset_lowerBounds_smul\n-/\n\n",
 "smul_le_smul_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_le_smul_of_nonneg /-\ntheorem smul_le_smul_of_nonneg (h₁ : a ≤ b) (h₂ : 0 ≤ c) : «expr • » c a ≤ «expr • » c b :=\n  by\n  rcases h₁.eq_or_lt with (rfl | hab)\n  · rfl\n  · rcases h₂.eq_or_lt with (rfl | hc)\n    · rw [zero_smul, zero_smul]\n    · exact (smul_lt_smul_of_pos hab hc).le\n#align smul_le_smul_of_nonneg smul_le_smul_of_nonneg\n-/\n\n",
 "smul_le_smul_iff_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_le_smul_iff_of_pos /-\n/- Sometimes Lean fails to apply the dependent version to non-dependent functions, so we define\nanother instance. -/\n-- Sometimes Lean fails to unify the module with the scalars, so we define another instance.\ntheorem smul_le_smul_iff_of_pos (hc : 0 < c) : «expr • » c a ≤ «expr • » c b ↔ a ≤ b :=\n  ⟨fun h => inv_smul_smul₀ hc.ne' a ▸ inv_smul_smul₀ hc.ne' b ▸ smul_le_smul_of_nonneg h (inv_nonneg.2 hc.le), fun h =>\n    smul_le_smul_of_nonneg h hc.le⟩\n#align smul_le_smul_iff_of_pos smul_le_smul_iff_of_pos\n-/\n\n",
 "monotone_smul_left":
 "#print monotone_smul_left /-\ntheorem monotone_smul_left (hc : 0 ≤ c) : Monotone (has_smul.smul c : M → M) := fun a b h => smul_le_smul_of_nonneg h hc\n#align monotone_smul_left monotone_smul_left\n-/\n\n",
 "mk''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print OrderedSMul.mk'' /-\n/-- To prove that a linear ordered monoid is an ordered module, it suffices to verify only the first\naxiom of `ordered_smul`. -/\ntheorem OrderedSMul.mk'' [OrderedSemiring 𝕜] [LinearOrderedAddCommMonoid M] [SMulWithZero 𝕜 M]\n    (h : ∀ ⦃c : 𝕜⦄, 0 < c → StrictMono fun a : M => «expr • » c a) : OrderedSMul 𝕜 M :=\n  { smul_lt_smul_of_pos := fun a b c hab hc => h hc hab\n    lt_of_smul_lt_smul_of_pos := fun a b c hab hc => (h hc).lt_iff_lt.1 hab }\n#align ordered_smul.mk'' OrderedSMul.mk''\n-/\n\n",
 "mk'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print OrderedSMul.mk' /-\n-- TODO: `linear_ordered_field M → ordered_smul ℚ M`\n/-- To prove that a vector space over a linear ordered field is ordered, it suffices to verify only\nthe first axiom of `ordered_smul`. -/\ntheorem OrderedSMul.mk' (h : ∀ ⦃a b : M⦄ ⦃c : 𝕜⦄, a < b → 0 < c → «expr • » c a ≤ «expr • » c b) : OrderedSMul 𝕜 M :=\n  by\n  have hlt' : ∀ ⦃a b : M⦄ ⦃c : 𝕜⦄, a < b → 0 < c → «expr • » c a < «expr • » c b :=\n    by\n    refine' fun a b c hab hc => (h hab hc).lt_of_ne _\n    rw [ne.def, hc.ne'.is_unit.smul_left_cancel]\n    exact hab.ne\n  refine' { smul_lt_smul_of_pos := hlt'.. }\n  intro a b c hab hc\n  obtain ⟨c, rfl⟩ := hc.ne'.is_unit\n  rw [← inv_smul_smul c a, ← inv_smul_smul c b]\n  refine' hlt' hab (pos_of_mul_pos_right _ hc.le)\n  simp only [c.mul_inv, zero_lt_one]\n#align ordered_smul.mk' OrderedSMul.mk'\n-/\n\n",
 "lt_of_smul_lt_smul_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print lt_of_smul_lt_smul_of_nonneg /-\ntheorem lt_of_smul_lt_smul_of_nonneg (h : «expr • » c a < «expr • » c b) (hc : 0 ≤ c) : a < b :=\n  hc.eq_or_lt.elim (fun hc => false.elim <| lt_irrefl (0 : M) <| by rwa [← hc, zero_smul, zero_smul] at h)\n    (ordered_smul.lt_of_smul_lt_smul_of_pos h)\n#align lt_of_smul_lt_smul_of_nonneg lt_of_smul_lt_smul_of_nonneg\n-/\n\n",
 "lt_inv_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print lt_inv_smul_iff /-\ntheorem lt_inv_smul_iff (h : 0 < c) : a < «expr • » c⁻¹ b ↔ «expr • » c a < b :=\n  by\n  rw [← smul_lt_smul_iff_of_pos h, smul_inv_smul₀ h.ne']\n  infer_instance\n#align lt_inv_smul_iff lt_inv_smul_iff\n-/\n\n",
 "lowerBounds_smul_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print lowerBounds_smul_of_pos /-\n@[simp]\ntheorem lowerBounds_smul_of_pos (hc : 0 < c) : lowerBounds («expr • » c s) = «expr • » c (lowerBounds s) :=\n  (OrderIso.smulLeft _ hc).lower_bounds_image\n#align lower_bounds_smul_of_pos lowerBounds_smul_of_pos\n-/\n\n",
 "le_inv_smul_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print le_inv_smul_iff /-\ntheorem le_inv_smul_iff (h : 0 < c) : a ≤ «expr • » c⁻¹ b ↔ «expr • » c a ≤ b :=\n  by\n  rw [← smul_le_smul_iff_of_pos h, smul_inv_smul₀ h.ne']\n  infer_instance\n#align le_inv_smul_iff le_inv_smul_iff\n-/\n\n",
 "inv_smul_lt_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print inv_smul_lt_iff /-\ntheorem inv_smul_lt_iff (h : 0 < c) : «expr • » c⁻¹ a < b ↔ a < «expr • » c b :=\n  by\n  rw [← smul_lt_smul_iff_of_pos h, smul_inv_smul₀ h.ne']\n  infer_instance\n#align inv_smul_lt_iff inv_smul_lt_iff\n-/\n\n",
 "inv_smul_le_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print inv_smul_le_iff /-\ntheorem inv_smul_le_iff (h : 0 < c) : «expr • » c⁻¹ a ≤ b ↔ a ≤ «expr • » c b :=\n  by\n  rw [← smul_le_smul_iff_of_pos h, smul_inv_smul₀ h.ne']\n  infer_instance\n#align inv_smul_le_iff inv_smul_le_iff\n-/\n\n",
 "eq_of_smul_eq_smul_of_pos_of_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print eq_of_smul_eq_smul_of_pos_of_le /-\ntheorem eq_of_smul_eq_smul_of_pos_of_le (h₁ : «expr • » c a = «expr • » c b) (hc : 0 < c) (hle : a ≤ b) : a = b :=\n  hle.lt_or_eq.resolve_left fun hlt => (smul_lt_smul_of_pos hlt hc).ne h₁\n#align eq_of_smul_eq_smul_of_pos_of_le eq_of_smul_eq_smul_of_pos_of_le\n-/\n\n",
 "bddBelow_smul_iff_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print bddBelow_smul_iff_of_pos /-\n@[simp]\ntheorem bddBelow_smul_iff_of_pos (hc : 0 < c) : BddBelow («expr • » c s) ↔ BddBelow s :=\n  (OrderIso.smulLeft _ hc).bdd_below_image\n#align bdd_below_smul_iff_of_pos bddBelow_smul_iff_of_pos\n-/\n\n",
 "bddAbove_smul_iff_of_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print bddAbove_smul_iff_of_pos /-\n@[simp]\ntheorem bddAbove_smul_iff_of_pos (hc : 0 < c) : BddAbove («expr • » c s) ↔ BddAbove s :=\n  (OrderIso.smulLeft _ hc).bdd_above_image\n#align bdd_above_smul_iff_of_pos bddAbove_smul_iff_of_pos\n-/\n\n"}