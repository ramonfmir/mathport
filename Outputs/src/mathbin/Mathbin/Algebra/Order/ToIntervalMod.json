{"to_Ioc_mod_zsmul_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_mod_zsmul_add (a b : α) (m : ℤ) : to_Ioc_mod hp a («expr • » m p + b) = to_Ioc_mod hp a b := by\n  rw [add_comm, to_Ioc_mod_add_zsmul]\n#align to_Ioc_mod_zsmul_add to_Ioc_mod_zsmul_add\n\n",
 "to_Ioc_mod_to_Ioc_mod":
 "@[simp]\ntheorem to_Ioc_mod_to_Ioc_mod (a₁ a₂ b : α) : to_Ioc_mod hp a₁ (to_Ioc_mod hp a₂ b) = to_Ioc_mod hp a₁ b :=\n  (to_Ioc_mod_eq_to_Ioc_mod _).2 ⟨to_Ioc_div hp a₂ b, self_sub_to_Ioc_mod hp a₂ b⟩\n#align to_Ioc_mod_to_Ioc_mod to_Ioc_mod_to_Ioc_mod\n\n",
 "to_Ioc_mod_to_Ico_mod":
 "@[simp]\ntheorem to_Ioc_mod_to_Ico_mod (a₁ a₂ b : α) : to_Ioc_mod hp a₁ (to_Ico_mod hp a₂ b) = to_Ioc_mod hp a₁ b :=\n  (to_Ioc_mod_eq_to_Ioc_mod _).2 ⟨to_Ico_div hp a₂ b, self_sub_to_Ico_mod hp a₂ b⟩\n#align to_Ioc_mod_to_Ico_mod to_Ioc_mod_to_Ico_mod\n\n",
 "to_Ioc_mod_sub_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_mod_sub_zsmul (a b : α) (m : ℤ) : to_Ioc_mod hp a (b - «expr • » m p) = to_Ioc_mod hp a b := by\n  rw [sub_eq_add_neg, ← neg_smul, to_Ioc_mod_add_zsmul]\n#align to_Ioc_mod_sub_zsmul to_Ioc_mod_sub_zsmul\n\n",
 "to_Ioc_mod_sub_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_mod_sub_self (a b : α) : to_Ioc_mod hp a b - b = «expr • » (-to_Ioc_div hp a b) p := by\n  rw [to_Ioc_mod, sub_sub_cancel_left, neg_smul]\n#align to_Ioc_mod_sub_self to_Ioc_mod_sub_self\n\n",
 "to_Ioc_mod_sub'":
 "theorem to_Ioc_mod_sub' (a b c : α) : to_Ioc_mod hp a (b - c) = to_Ioc_mod hp (a + c) b - c := by\n  simp_rw [to_Ioc_mod, to_Ioc_div_sub', sub_right_comm]\n#align to_Ioc_mod_sub' to_Ioc_mod_sub'\n\n",
 "to_Ioc_mod_sub":
 "@[simp]\ntheorem to_Ioc_mod_sub (a b : α) : to_Ioc_mod hp a (b - p) = to_Ioc_mod hp a b := by\n  simpa only [one_zsmul] using to_Ioc_mod_sub_zsmul hp a b 1\n#align to_Ioc_mod_sub to_Ioc_mod_sub\n\n",
 "to_Ioc_mod_periodic":
 "theorem to_Ioc_mod_periodic (a : α) : Function.Periodic (to_Ioc_mod hp a) p :=\n  to_Ioc_mod_add_right hp a\n#align to_Ioc_mod_periodic to_Ioc_mod_periodic\n\n",
 "to_Ioc_mod_neg":
 "theorem to_Ioc_mod_neg (a b : α) : to_Ioc_mod hp a (-b) = p - to_Ico_mod hp (-a) b :=\n  by\n  simp_rw [to_Ioc_mod, to_Ico_mod, to_Ioc_div_neg, neg_smul, add_smul]\n  abel\n#align to_Ioc_mod_neg to_Ioc_mod_neg\n\n",
 "to_Ioc_mod_mem_Ioc":
 "theorem to_Ioc_mod_mem_Ioc (a b : α) : to_Ioc_mod hp a b ∈ Set.Ioc a (a + p) :=\n  sub_to_Ioc_div_zsmul_mem_Ioc hp a b\n#align to_Ioc_mod_mem_Ioc to_Ioc_mod_mem_Ioc\n\n",
 "to_Ioc_mod_le_to_Ico_mod_add":
 "theorem to_Ioc_mod_le_to_Ico_mod_add (a b : α) : to_Ioc_mod hp a b ≤ to_Ico_mod hp a b + p :=\n  by\n  rw [to_Ico_mod, to_Ioc_mod, sub_add, sub_le_sub_iff_left, sub_le_iff_le_add, ← add_one_zsmul,\n    (zsmul_strictMono_left hp).le_iff_le]\n  apply (to_Ioc_div_wcovby_to_Ico_div _ _ _).le_succ\n#align to_Ioc_mod_le_to_Ico_mod_add to_Ioc_mod_le_to_Ico_mod_add\n\n",
 "to_Ioc_mod_le_right":
 "theorem to_Ioc_mod_le_right (a b : α) : to_Ioc_mod hp a b ≤ a + p :=\n  (Set.mem_Ioc.1 (to_Ioc_mod_mem_Ioc hp a b)).2\n#align to_Ioc_mod_le_right to_Ioc_mod_le_right\n\n",
 "to_Ioc_mod_eq_to_Ioc_mod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_Ioc_mod_eq_to_Ioc_mod : to_Ioc_mod hp a b = to_Ioc_mod hp a c ↔ ∃ n : ℤ, c - b = «expr • » n p :=\n  by\n  refine' ⟨fun h => ⟨to_Ioc_div hp a c - to_Ioc_div hp a b, _⟩, fun h => _⟩\n  · conv_lhs => rw [← to_Ioc_mod_add_to_Ioc_div_zsmul hp a b, ← to_Ioc_mod_add_to_Ioc_div_zsmul hp a c]\n    rw [h, sub_smul]\n    abel\n  · rcases h with ⟨z, hz⟩\n    rw [sub_eq_iff_eq_add] at hz\n    rw [hz, to_Ioc_mod_zsmul_add]\n#align to_Ioc_mod_eq_to_Ioc_mod to_Ioc_mod_eq_to_Ioc_mod\n\n",
 "to_Ioc_mod_eq_sub_fract_mul":
 "theorem to_Ioc_mod_eq_sub_fract_mul (a b : α) : to_Ioc_mod hp a b = a + p - Int.fract ((a + p - b) / p) * p :=\n  by\n  rw [to_Ioc_mod, to_Ioc_div_eq_neg_floor, Int.fract]\n  field_simp [hp.ne.symm]\n  ring\n#align to_Ioc_mod_eq_sub_fract_mul to_Ioc_mod_eq_sub_fract_mul\n\n",
 "to_Ioc_mod_eq_self":
 "theorem to_Ioc_mod_eq_self : to_Ioc_mod hp a b = b ↔ b ∈ Set.Ioc a (a + p) :=\n  by\n  rw [to_Ioc_mod_eq_iff, and_iff_left]\n  exact ⟨0, by simp⟩\n#align to_Ioc_mod_eq_self to_Ioc_mod_eq_self\n\n",
 "to_Ioc_mod_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_Ioc_mod_eq_iff : to_Ioc_mod hp a b = c ↔ c ∈ Set.Ioc a (a + p) ∧ ∃ z : ℤ, b = c + «expr • » z p :=\n  by\n  refine'\n    ⟨fun h => ⟨h ▸ to_Ioc_mod_mem_Ioc hp a b, to_Ioc_div hp a b, h ▸ (to_Ioc_mod_add_to_Ioc_div_zsmul hp _ _).symm⟩, _⟩\n  simp_rw [← @sub_eq_iff_eq_add]\n  rintro ⟨hc, n, rfl⟩\n  rw [← to_Ioc_div_eq_of_sub_zsmul_mem_Ioc hp hc, to_Ioc_mod]\n#align to_Ioc_mod_eq_iff to_Ioc_mod_eq_iff\n\n",
 "to_Ioc_mod_apply_right":
 "theorem to_Ioc_mod_apply_right (a : α) : to_Ioc_mod hp a (a + p) = a + p :=\n  by\n  rw [to_Ioc_mod_eq_iff hp, Set.right_mem_Ioc]\n  exact ⟨lt_add_of_pos_right _ hp, 0, by simp⟩\n#align to_Ioc_mod_apply_right to_Ioc_mod_apply_right\n\n",
 "to_Ioc_mod_apply_left":
 "@[simp]\ntheorem to_Ioc_mod_apply_left (a : α) : to_Ioc_mod hp a a = a + p :=\n  by\n  rw [to_Ioc_mod_eq_iff hp, Set.right_mem_Ioc]\n  exact ⟨lt_add_of_pos_right _ hp, -1, by simp⟩\n#align to_Ioc_mod_apply_left to_Ioc_mod_apply_left\n\n",
 "to_Ioc_mod_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_mod_add_zsmul (a b : α) (m : ℤ) : to_Ioc_mod hp a (b + «expr • » m p) = to_Ioc_mod hp a b :=\n  by\n  rw [to_Ioc_mod, to_Ioc_div_add_zsmul, to_Ioc_mod, add_smul]\n  abel\n#align to_Ioc_mod_add_zsmul to_Ioc_mod_add_zsmul\n\n",
 "to_Ioc_mod_add_to_Ioc_div_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_mod_add_to_Ioc_div_zsmul (a b : α) : to_Ioc_mod hp a b + «expr • » (to_Ioc_div hp a b) p = b := by\n  rw [to_Ioc_mod, sub_add_cancel]\n#align to_Ioc_mod_add_to_Ioc_div_zsmul to_Ioc_mod_add_to_Ioc_div_zsmul\n\n",
 "to_Ioc_mod_add_right'":
 "theorem to_Ioc_mod_add_right' (a b c : α) : to_Ioc_mod hp a (b + c) = to_Ioc_mod hp (a - c) b + c := by\n  simp_rw [to_Ioc_mod, to_Ioc_div_add_right', sub_add_eq_add_sub]\n#align to_Ioc_mod_add_right' to_Ioc_mod_add_right'\n\n",
 "to_Ioc_mod_add_right":
 "@[simp]\ntheorem to_Ioc_mod_add_right (a b : α) : to_Ioc_mod hp a (b + p) = to_Ioc_mod hp a b := by\n  simpa only [one_zsmul] using to_Ioc_mod_add_zsmul hp a b 1\n#align to_Ioc_mod_add_right to_Ioc_mod_add_right\n\n",
 "to_Ioc_mod_add_left":
 "@[simp]\ntheorem to_Ioc_mod_add_left (a b : α) : to_Ioc_mod hp a (p + b) = to_Ioc_mod hp a b := by\n  rw [add_comm, to_Ioc_mod_add_right]\n#align to_Ioc_mod_add_left to_Ioc_mod_add_left\n\n",
 "to_Ioc_div_zsmul_sub_to_Ioc_mod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_div_zsmul_sub_to_Ioc_mod (a b : α) : «expr • » (to_Ioc_div hp a b) p + to_Ioc_mod hp a b = b := by\n  rw [add_comm, to_Ioc_mod_add_to_Ioc_div_zsmul]\n#align to_Ioc_div_zsmul_sub_to_Ioc_mod to_Ioc_div_zsmul_sub_to_Ioc_mod\n\n",
 "to_Ioc_div_zsmul_sub_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_div_zsmul_sub_self (a b : α) : «expr • » (to_Ioc_div hp a b) p - b = -to_Ioc_mod hp a b := by\n  rw [to_Ioc_mod, neg_sub]\n#align to_Ioc_div_zsmul_sub_self to_Ioc_div_zsmul_sub_self\n\n",
 "to_Ioc_div_zsmul_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_div_zsmul_add (a b : α) (m : ℤ) : to_Ioc_div hp a («expr • » m p + b) = to_Ioc_div hp a b + m := by\n  rw [add_comm, to_Ioc_div_add_zsmul, add_comm]\n#align to_Ioc_div_zsmul_add to_Ioc_div_zsmul_add\n\n",
 "to_Ioc_div_wcovby_to_Ico_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⩿ » -/\ntheorem to_Ioc_div_wcovby_to_Ico_div (a b : α) : «expr ⩿ » (to_Ioc_div hp a b) (to_Ico_div hp a b) :=\n  by\n  suffices to_Ioc_div hp a b = to_Ico_div hp a b ∨ to_Ioc_div hp a b + 1 = to_Ico_div hp a b by\n    rwa [wcovby_iff_eq_or_covby, ← Order.succ_eq_iff_covby]\n  rw [eq_comm, ← add_comm_group.not_modeq_iff_to_Ico_div_eq_to_Ioc_div, eq_comm, ←\n    add_comm_group.modeq_iff_to_Ico_div_eq_to_Ioc_div_add_one]\n  exact em' _\n#align to_Ioc_div_wcovby_to_Ico_div to_Ioc_div_wcovby_to_Ico_div\n\n",
 "to_Ioc_div_sub_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_div_sub_zsmul (a b : α) (m : ℤ) : to_Ioc_div hp a (b - «expr • » m p) = to_Ioc_div hp a b - m := by\n  rw [sub_eq_add_neg, ← neg_smul, to_Ioc_div_add_zsmul, sub_eq_add_neg]\n#align to_Ioc_div_sub_zsmul to_Ioc_div_sub_zsmul\n\n",
 "to_Ioc_div_sub'":
 "theorem to_Ioc_div_sub' (a b c : α) : to_Ioc_div hp a (b - c) = to_Ioc_div hp (a + c) b :=\n  by\n  apply to_Ioc_div_eq_of_sub_zsmul_mem_Ioc\n  rw [← sub_right_comm, Set.sub_mem_Ioc_iff_left, add_right_comm]\n  exact sub_to_Ioc_div_zsmul_mem_Ioc hp (a + c) b\n#align to_Ioc_div_sub' to_Ioc_div_sub'\n\n",
 "to_Ioc_div_sub":
 "@[simp]\ntheorem to_Ioc_div_sub (a b : α) : to_Ioc_div hp a (b - p) = to_Ioc_div hp a b - 1 := by\n  simpa only [one_zsmul] using to_Ioc_div_sub_zsmul hp a b 1\n#align to_Ioc_div_sub to_Ioc_div_sub\n\n",
 "to_Ioc_div_neg":
 "theorem to_Ioc_div_neg (a b : α) : to_Ioc_div hp a (-b) = -(to_Ico_div hp (-a) b + 1) := by\n  rw [← neg_neg b, to_Ico_div_neg, neg_neg, neg_neg, neg_add', neg_neg, add_sub_cancel]\n#align to_Ioc_div_neg to_Ioc_div_neg\n\n",
 "to_Ioc_div_eq_of_sub_zsmul_mem_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_Ioc_div_eq_of_sub_zsmul_mem_Ioc (h : b - «expr • » n p ∈ Set.Ioc a (a + p)) : to_Ioc_div hp a b = n :=\n  ((existsUnique_sub_zsmul_mem_Ioc hp b a).some_spec.2 _ h).symm\n#align to_Ioc_div_eq_of_sub_zsmul_mem_Ioc to_Ioc_div_eq_of_sub_zsmul_mem_Ioc\n\n",
 "to_Ioc_div_eq_neg_floor":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\ntheorem to_Ioc_div_eq_neg_floor (a b : α) : to_Ioc_div hp a b = -«expr⌊ ⌋» ((a + p - b) / p) :=\n  by\n  refine' to_Ioc_div_eq_of_sub_zsmul_mem_Ioc hp _\n  rw [Set.mem_Ioc, zsmul_eq_mul, Int.cast_neg, neg_mul, sub_neg_eq_add, ← sub_nonneg, sub_add_eq_sub_sub]\n  refine' ⟨_, Int.sub_floor_div_mul_nonneg _ hp⟩\n  rw [← add_lt_add_iff_right p, add_assoc, add_comm b, ← sub_lt_iff_lt_add, add_comm (_ * _), ← sub_lt_iff_lt_add]\n  exact Int.sub_floor_div_mul_lt _ hp\n#align to_Ioc_div_eq_neg_floor to_Ioc_div_eq_neg_floor\n\n",
 "to_Ioc_div_apply_right":
 "theorem to_Ioc_div_apply_right (a : α) : to_Ioc_div hp a (a + p) = 0 :=\n  to_Ioc_div_eq_of_sub_zsmul_mem_Ioc hp <| by simp [hp]\n#align to_Ioc_div_apply_right to_Ioc_div_apply_right\n\n",
 "to_Ioc_div_apply_left":
 "@[simp]\ntheorem to_Ioc_div_apply_left (a : α) : to_Ioc_div hp a a = -1 :=\n  to_Ioc_div_eq_of_sub_zsmul_mem_Ioc hp <| by simp [hp]\n#align to_Ioc_div_apply_left to_Ioc_div_apply_left\n\n",
 "to_Ioc_div_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ioc_div_add_zsmul (a b : α) (m : ℤ) : to_Ioc_div hp a (b + «expr • » m p) = to_Ioc_div hp a b + m :=\n  to_Ioc_div_eq_of_sub_zsmul_mem_Ioc hp <| by\n    simpa only [add_smul, add_sub_add_right_eq_sub] using sub_to_Ioc_div_zsmul_mem_Ioc hp a b\n#align to_Ioc_div_add_zsmul to_Ioc_div_add_zsmul\n\n",
 "to_Ioc_div_add_right'":
 "theorem to_Ioc_div_add_right' (a b c : α) : to_Ioc_div hp a (b + c) = to_Ioc_div hp (a - c) b := by\n  rw [← sub_neg_eq_add, to_Ioc_div_sub', sub_eq_add_neg]\n#align to_Ioc_div_add_right' to_Ioc_div_add_right'\n\n",
 "to_Ioc_div_add_right":
 "@[simp]\ntheorem to_Ioc_div_add_right (a b : α) : to_Ioc_div hp a (b + p) = to_Ioc_div hp a b + 1 := by\n  simpa only [one_zsmul] using to_Ioc_div_add_zsmul hp a b 1\n#align to_Ioc_div_add_right to_Ioc_div_add_right\n\n",
 "to_Ioc_div_add_left":
 "@[simp]\ntheorem to_Ioc_div_add_left (a b : α) : to_Ioc_div hp a (p + b) = to_Ioc_div hp a b + 1 := by\n  rw [add_comm, to_Ioc_div_add_right]\n#align to_Ioc_div_add_left to_Ioc_div_add_left\n\n",
 "to_Ico_mod_zsmul_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_mod_zsmul_add (a b : α) (m : ℤ) : to_Ico_mod hp a («expr • » m p + b) = to_Ico_mod hp a b := by\n  rw [add_comm, to_Ico_mod_add_zsmul]\n#align to_Ico_mod_zsmul_add to_Ico_mod_zsmul_add\n\n",
 "to_Ico_mod_zero_one":
 "theorem to_Ico_mod_zero_one (b : α) : to_Ico_mod (zero_lt_one' α) 0 b = Int.fract b := by\n  simp [to_Ico_mod_eq_add_fract_mul]\n#align to_Ico_mod_zero_one to_Ico_mod_zero_one\n\n",
 "to_Ico_mod_to_Ioc_mod":
 "@[simp]\ntheorem to_Ico_mod_to_Ioc_mod (a₁ a₂ b : α) : to_Ico_mod hp a₁ (to_Ioc_mod hp a₂ b) = to_Ico_mod hp a₁ b :=\n  (to_Ico_mod_eq_to_Ico_mod _).2 ⟨to_Ioc_div hp a₂ b, self_sub_to_Ioc_mod hp a₂ b⟩\n#align to_Ico_mod_to_Ioc_mod to_Ico_mod_to_Ioc_mod\n\n",
 "to_Ico_mod_to_Ico_mod":
 "@[simp]\ntheorem to_Ico_mod_to_Ico_mod (a₁ a₂ b : α) : to_Ico_mod hp a₁ (to_Ico_mod hp a₂ b) = to_Ico_mod hp a₁ b :=\n  (to_Ico_mod_eq_to_Ico_mod _).2 ⟨to_Ico_div hp a₂ b, self_sub_to_Ico_mod hp a₂ b⟩\n#align to_Ico_mod_to_Ico_mod to_Ico_mod_to_Ico_mod\n\n",
 "to_Ico_mod_sub_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_mod_sub_zsmul (a b : α) (m : ℤ) : to_Ico_mod hp a (b - «expr • » m p) = to_Ico_mod hp a b := by\n  rw [sub_eq_add_neg, ← neg_smul, to_Ico_mod_add_zsmul]\n#align to_Ico_mod_sub_zsmul to_Ico_mod_sub_zsmul\n\n",
 "to_Ico_mod_sub_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_mod_sub_self (a b : α) : to_Ico_mod hp a b - b = «expr • » (-to_Ico_div hp a b) p := by\n  rw [to_Ico_mod, sub_sub_cancel_left, neg_smul]\n#align to_Ico_mod_sub_self to_Ico_mod_sub_self\n\n",
 "to_Ico_mod_sub'":
 "theorem to_Ico_mod_sub' (a b c : α) : to_Ico_mod hp a (b - c) = to_Ico_mod hp (a + c) b - c := by\n  simp_rw [to_Ico_mod, to_Ico_div_sub', sub_right_comm]\n#align to_Ico_mod_sub' to_Ico_mod_sub'\n\n",
 "to_Ico_mod_sub":
 "@[simp]\ntheorem to_Ico_mod_sub (a b : α) : to_Ico_mod hp a (b - p) = to_Ico_mod hp a b := by\n  simpa only [one_zsmul] using to_Ico_mod_sub_zsmul hp a b 1\n#align to_Ico_mod_sub to_Ico_mod_sub\n\n",
 "to_Ico_mod_periodic":
 "theorem to_Ico_mod_periodic (a : α) : Function.Periodic (to_Ico_mod hp a) p :=\n  to_Ico_mod_add_right hp a\n#align to_Ico_mod_periodic to_Ico_mod_periodic\n\n",
 "to_Ico_mod_neg":
 "theorem to_Ico_mod_neg (a b : α) : to_Ico_mod hp a (-b) = p - to_Ioc_mod hp (-a) b :=\n  by\n  simp_rw [to_Ico_mod, to_Ioc_mod, to_Ico_div_neg, neg_smul, add_smul]\n  abel\n#align to_Ico_mod_neg to_Ico_mod_neg\n\n",
 "to_Ico_mod_mem_Ico'":
 "theorem to_Ico_mod_mem_Ico' (b : α) : to_Ico_mod hp 0 b ∈ Set.Ico 0 p :=\n  by\n  convert to_Ico_mod_mem_Ico hp 0 b\n  exact (zero_add p).symm\n#align to_Ico_mod_mem_Ico' to_Ico_mod_mem_Ico'\n\n",
 "to_Ico_mod_mem_Ico":
 "theorem to_Ico_mod_mem_Ico (a b : α) : to_Ico_mod hp a b ∈ Set.Ico a (a + p) :=\n  sub_to_Ico_div_zsmul_mem_Ico hp a b\n#align to_Ico_mod_mem_Ico to_Ico_mod_mem_Ico\n\n",
 "to_Ico_mod_lt_right":
 "theorem to_Ico_mod_lt_right (a b : α) : to_Ico_mod hp a b < a + p :=\n  (Set.mem_Ico.1 (to_Ico_mod_mem_Ico hp a b)).2\n#align to_Ico_mod_lt_right to_Ico_mod_lt_right\n\n",
 "to_Ico_mod_le_to_Ioc_mod":
 "theorem to_Ico_mod_le_to_Ioc_mod (a b : α) : to_Ico_mod hp a b ≤ to_Ioc_mod hp a b :=\n  by\n  rw [to_Ico_mod, to_Ioc_mod, sub_le_sub_iff_left]\n  exact zsmul_mono_left hp.le (to_Ioc_div_wcovby_to_Ico_div _ _ _).le\n#align to_Ico_mod_le_to_Ioc_mod to_Ico_mod_le_to_Ioc_mod\n\n",
 "to_Ico_mod_eq_to_Ico_mod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_Ico_mod_eq_to_Ico_mod : to_Ico_mod hp a b = to_Ico_mod hp a c ↔ ∃ n : ℤ, c - b = «expr • » n p :=\n  by\n  refine' ⟨fun h => ⟨to_Ico_div hp a c - to_Ico_div hp a b, _⟩, fun h => _⟩\n  · conv_lhs => rw [← to_Ico_mod_add_to_Ico_div_zsmul hp a b, ← to_Ico_mod_add_to_Ico_div_zsmul hp a c]\n    rw [h, sub_smul]\n    abel\n  · rcases h with ⟨z, hz⟩\n    rw [sub_eq_iff_eq_add] at hz\n    rw [hz, to_Ico_mod_zsmul_add]\n#align to_Ico_mod_eq_to_Ico_mod to_Ico_mod_eq_to_Ico_mod\n\n",
 "to_Ico_mod_eq_self":
 "theorem to_Ico_mod_eq_self : to_Ico_mod hp a b = b ↔ b ∈ Set.Ico a (a + p) :=\n  by\n  rw [to_Ico_mod_eq_iff, and_iff_left]\n  exact ⟨0, by simp⟩\n#align to_Ico_mod_eq_self to_Ico_mod_eq_self\n\n",
 "to_Ico_mod_eq_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_Ico_mod_eq_iff : to_Ico_mod hp a b = c ↔ c ∈ Set.Ico a (a + p) ∧ ∃ z : ℤ, b = c + «expr • » z p :=\n  by\n  refine'\n    ⟨fun h => ⟨h ▸ to_Ico_mod_mem_Ico hp a b, to_Ico_div hp a b, h ▸ (to_Ico_mod_add_to_Ico_div_zsmul _ _ _).symm⟩, _⟩\n  simp_rw [← @sub_eq_iff_eq_add]\n  rintro ⟨hc, n, rfl⟩\n  rw [← to_Ico_div_eq_of_sub_zsmul_mem_Ico hp hc, to_Ico_mod]\n#align to_Ico_mod_eq_iff to_Ico_mod_eq_iff\n\n",
 "to_Ico_mod_eq_fract_mul":
 "theorem to_Ico_mod_eq_fract_mul (b : α) : to_Ico_mod hp 0 b = Int.fract (b / p) * p := by\n  simp [to_Ico_mod_eq_add_fract_mul]\n#align to_Ico_mod_eq_fract_mul to_Ico_mod_eq_fract_mul\n\n",
 "to_Ico_mod_eq_add_fract_mul":
 "theorem to_Ico_mod_eq_add_fract_mul (a b : α) : to_Ico_mod hp a b = a + Int.fract ((b - a) / p) * p :=\n  by\n  rw [to_Ico_mod, to_Ico_div_eq_floor, Int.fract]\n  field_simp [hp.ne.symm]\n  ring\n#align to_Ico_mod_eq_add_fract_mul to_Ico_mod_eq_add_fract_mul\n\n",
 "to_Ico_mod_apply_right":
 "theorem to_Ico_mod_apply_right (a : α) : to_Ico_mod hp a (a + p) = a :=\n  by\n  rw [to_Ico_mod_eq_iff hp, Set.left_mem_Ico]\n  exact ⟨lt_add_of_pos_right _ hp, 1, by simp⟩\n#align to_Ico_mod_apply_right to_Ico_mod_apply_right\n\n",
 "to_Ico_mod_apply_left":
 "@[simp]\ntheorem to_Ico_mod_apply_left (a : α) : to_Ico_mod hp a a = a :=\n  by\n  rw [to_Ico_mod_eq_iff hp, Set.left_mem_Ico]\n  exact ⟨lt_add_of_pos_right _ hp, 0, by simp⟩\n#align to_Ico_mod_apply_left to_Ico_mod_apply_left\n\n",
 "to_Ico_mod_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_mod_add_zsmul (a b : α) (m : ℤ) : to_Ico_mod hp a (b + «expr • » m p) = to_Ico_mod hp a b :=\n  by\n  rw [to_Ico_mod, to_Ico_div_add_zsmul, to_Ico_mod, add_smul]\n  abel\n#align to_Ico_mod_add_zsmul to_Ico_mod_add_zsmul\n\n",
 "to_Ico_mod_add_to_Ico_div_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_mod_add_to_Ico_div_zsmul (a b : α) : to_Ico_mod hp a b + «expr • » (to_Ico_div hp a b) p = b := by\n  rw [to_Ico_mod, sub_add_cancel]\n#align to_Ico_mod_add_to_Ico_div_zsmul to_Ico_mod_add_to_Ico_div_zsmul\n\n",
 "to_Ico_mod_add_right'":
 "theorem to_Ico_mod_add_right' (a b c : α) : to_Ico_mod hp a (b + c) = to_Ico_mod hp (a - c) b + c := by\n  simp_rw [to_Ico_mod, to_Ico_div_add_right', sub_add_eq_add_sub]\n#align to_Ico_mod_add_right' to_Ico_mod_add_right'\n\n",
 "to_Ico_mod_add_right":
 "@[simp]\ntheorem to_Ico_mod_add_right (a b : α) : to_Ico_mod hp a (b + p) = to_Ico_mod hp a b := by\n  simpa only [one_zsmul] using to_Ico_mod_add_zsmul hp a b 1\n#align to_Ico_mod_add_right to_Ico_mod_add_right\n\n",
 "to_Ico_mod_add_left":
 "@[simp]\ntheorem to_Ico_mod_add_left (a b : α) : to_Ico_mod hp a (p + b) = to_Ico_mod hp a b := by\n  rw [add_comm, to_Ico_mod_add_right]\n#align to_Ico_mod_add_left to_Ico_mod_add_left\n\n",
 "to_Ico_div_zsmul_sub_to_Ico_mod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_div_zsmul_sub_to_Ico_mod (a b : α) : «expr • » (to_Ico_div hp a b) p + to_Ico_mod hp a b = b := by\n  rw [add_comm, to_Ico_mod_add_to_Ico_div_zsmul]\n#align to_Ico_div_zsmul_sub_to_Ico_mod to_Ico_div_zsmul_sub_to_Ico_mod\n\n",
 "to_Ico_div_zsmul_sub_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_div_zsmul_sub_self (a b : α) : «expr • » (to_Ico_div hp a b) p - b = -to_Ico_mod hp a b := by\n  rw [to_Ico_mod, neg_sub]\n#align to_Ico_div_zsmul_sub_self to_Ico_div_zsmul_sub_self\n\n",
 "to_Ico_div_zsmul_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_div_zsmul_add (a b : α) (m : ℤ) : to_Ico_div hp a («expr • » m p + b) = m + to_Ico_div hp a b := by\n  rw [add_comm, to_Ico_div_add_zsmul, add_comm]\n#align to_Ico_div_zsmul_add to_Ico_div_zsmul_add\n\n",
 "to_Ico_div_zero_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\ntheorem to_Ico_div_zero_one (b : α) : to_Ico_div (zero_lt_one' α) 0 b = «expr⌊ ⌋» b := by simp [to_Ico_div_eq_floor]\n#align to_Ico_div_zero_one to_Ico_div_zero_one\n\n",
 "to_Ico_div_sub_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_div_sub_zsmul (a b : α) (m : ℤ) : to_Ico_div hp a (b - «expr • » m p) = to_Ico_div hp a b - m := by\n  rw [sub_eq_add_neg, ← neg_smul, to_Ico_div_add_zsmul, sub_eq_add_neg]\n#align to_Ico_div_sub_zsmul to_Ico_div_sub_zsmul\n\n",
 "to_Ico_div_sub'":
 "theorem to_Ico_div_sub' (a b c : α) : to_Ico_div hp a (b - c) = to_Ico_div hp (a + c) b :=\n  by\n  apply to_Ico_div_eq_of_sub_zsmul_mem_Ico\n  rw [← sub_right_comm, Set.sub_mem_Ico_iff_left, add_right_comm]\n  exact sub_to_Ico_div_zsmul_mem_Ico hp (a + c) b\n#align to_Ico_div_sub' to_Ico_div_sub'\n\n",
 "to_Ico_div_sub":
 "@[simp]\ntheorem to_Ico_div_sub (a b : α) : to_Ico_div hp a (b - p) = to_Ico_div hp a b - 1 := by\n  simpa only [one_zsmul] using to_Ico_div_sub_zsmul hp a b 1\n#align to_Ico_div_sub to_Ico_div_sub\n\n",
 "to_Ico_div_neg":
 "theorem to_Ico_div_neg (a b : α) : to_Ico_div hp a (-b) = -(to_Ioc_div hp (-a) b + 1) :=\n  by\n  suffices to_Ico_div hp a (-b) = -to_Ioc_div hp (-(a + p)) b by\n    rwa [neg_add, ← sub_eq_add_neg, ← to_Ioc_div_add_right', to_Ioc_div_add_right] at this\n  rw [← neg_eq_iff_eq_neg, eq_comm]\n  apply to_Ioc_div_eq_of_sub_zsmul_mem_Ioc\n  obtain ⟨hc, ho⟩ := sub_to_Ico_div_zsmul_mem_Ico hp a (-b)\n  rw [← neg_lt_neg_iff, neg_sub' (-b), neg_neg, ← neg_smul] at ho\n  rw [← neg_le_neg_iff, neg_sub' (-b), neg_neg, ← neg_smul] at hc\n  refine' ⟨ho, hc.trans_eq _⟩\n  rw [neg_add, neg_add_cancel_right]\n#align to_Ico_div_neg to_Ico_div_neg\n\n",
 "to_Ico_div_eq_of_sub_zsmul_mem_Ico":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_Ico_div_eq_of_sub_zsmul_mem_Ico (h : b - «expr • » n p ∈ Set.Ico a (a + p)) : to_Ico_div hp a b = n :=\n  ((existsUnique_sub_zsmul_mem_Ico hp b a).some_spec.2 _ h).symm\n#align to_Ico_div_eq_of_sub_zsmul_mem_Ico to_Ico_div_eq_of_sub_zsmul_mem_Ico\n\n",
 "to_Ico_div_eq_floor":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\ntheorem to_Ico_div_eq_floor (a b : α) : to_Ico_div hp a b = «expr⌊ ⌋» ((b - a) / p) :=\n  by\n  refine' to_Ico_div_eq_of_sub_zsmul_mem_Ico hp _\n  rw [Set.mem_Ico, zsmul_eq_mul, ← sub_nonneg, add_comm, sub_right_comm, ← sub_lt_iff_lt_add, sub_right_comm _ _ a]\n  exact ⟨Int.sub_floor_div_mul_nonneg _ hp, Int.sub_floor_div_mul_lt _ hp⟩\n#align to_Ico_div_eq_floor to_Ico_div_eq_floor\n\n",
 "to_Ico_div_apply_right":
 "theorem to_Ico_div_apply_right (a : α) : to_Ico_div hp a (a + p) = 1 :=\n  to_Ico_div_eq_of_sub_zsmul_mem_Ico hp <| by simp [hp]\n#align to_Ico_div_apply_right to_Ico_div_apply_right\n\n",
 "to_Ico_div_apply_left":
 "@[simp]\ntheorem to_Ico_div_apply_left (a : α) : to_Ico_div hp a a = 0 :=\n  to_Ico_div_eq_of_sub_zsmul_mem_Ico hp <| by simp [hp]\n#align to_Ico_div_apply_left to_Ico_div_apply_left\n\n",
 "to_Ico_div_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_Ico_div_add_zsmul (a b : α) (m : ℤ) : to_Ico_div hp a (b + «expr • » m p) = to_Ico_div hp a b + m :=\n  to_Ico_div_eq_of_sub_zsmul_mem_Ico hp <| by\n    simpa only [add_smul, add_sub_add_right_eq_sub] using sub_to_Ico_div_zsmul_mem_Ico hp a b\n#align to_Ico_div_add_zsmul to_Ico_div_add_zsmul\n\n",
 "to_Ico_div_add_right'":
 "theorem to_Ico_div_add_right' (a b c : α) : to_Ico_div hp a (b + c) = to_Ico_div hp (a - c) b := by\n  rw [← sub_neg_eq_add, to_Ico_div_sub', sub_eq_add_neg]\n#align to_Ico_div_add_right' to_Ico_div_add_right'\n\n",
 "to_Ico_div_add_right":
 "@[simp]\ntheorem to_Ico_div_add_right (a b : α) : to_Ico_div hp a (b + p) = to_Ico_div hp a b + 1 := by\n  simpa only [one_zsmul] using to_Ico_div_add_zsmul hp a b 1\n#align to_Ico_div_add_right to_Ico_div_add_right\n\n",
 "to_Ico_div_add_left":
 "@[simp]\ntheorem to_Ico_div_add_left (a b : α) : to_Ico_div hp a (p + b) = to_Ico_div hp a b + 1 := by\n  rw [add_comm, to_Ico_div_add_right]\n#align to_Ico_div_add_left to_Ico_div_add_left\n\n",
 "tfae_modeq":
 "theorem tfae_modeq :\n    TFAE\n      [ModEq p a b, to_Ico_mod hp a b ≠ to_Ioc_mod hp a b, to_Ico_mod hp a b + p = to_Ioc_mod hp a b,\n        to_Ico_mod hp a b = a] :=\n  by\n  rw [modeq]\n  tfae_have 2 → 1\n  · rw [← not_exists, not_imp_not]\n    exact fun ⟨i, hi⟩ =>\n      ((to_Ico_mod_eq_iff hp).2 ⟨Set.Ioo_subset_Ico_self hi, i, (sub_add_cancel b _).symm⟩).trans\n        ((to_Ioc_mod_eq_iff hp).2 ⟨Set.Ioo_subset_Ioc_self hi, i, (sub_add_cancel b _).symm⟩).symm\n  tfae_have 3 → 2\n  · intro h\n    rw [← h, ne, eq_comm, add_right_eq_self]\n    exact hp.ne'\n  tfae_have 4 → 3\n  · intro h\n    rw [h, eq_comm, to_Ioc_mod_eq_iff, Set.right_mem_Ioc]\n    refine' ⟨lt_add_of_pos_right a hp, to_Ico_div hp a b - 1, _⟩\n    rw [sub_one_zsmul, add_add_add_comm, add_right_neg, add_zero]\n    conv_lhs => rw [← to_Ico_mod_add_to_Ico_div_zsmul hp a b, h]\n  tfae_have 1 → 4\n  · rw [← not_exists, not_imp_comm]\n    have h' := to_Ico_mod_mem_Ico hp a b\n    exact fun h => ⟨_, h'.1.lt_of_ne' h, h'.2⟩\n  tfae_finish\n#align tfae_modeq tfae_modeq\n\n",
 "sub_to_Ioc_div_zsmul_mem_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem sub_to_Ioc_div_zsmul_mem_Ioc (a b : α) : b - «expr • » (to_Ioc_div hp a b) p ∈ Set.Ioc a (a + p) :=\n  (existsUnique_sub_zsmul_mem_Ioc hp b a).some_spec.1\n#align sub_to_Ioc_div_zsmul_mem_Ioc sub_to_Ioc_div_zsmul_mem_Ioc\n\n",
 "sub_to_Ico_div_zsmul_mem_Ico":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-\nCopyright (c) 2022 Joseph Myers. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Joseph Myers\n-/\ntheorem sub_to_Ico_div_zsmul_mem_Ico (a b : α) : b - «expr • » (to_Ico_div hp a b) p ∈ Set.Ico a (a + p) :=\n  (existsUnique_sub_zsmul_mem_Ico hp b a).some_spec.1\n#align sub_to_Ico_div_zsmul_mem_Ico sub_to_Ico_div_zsmul_mem_Ico\n\n",
 "self_sub_to_Ioc_mod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem self_sub_to_Ioc_mod (a b : α) : b - to_Ioc_mod hp a b = «expr • » (to_Ioc_div hp a b) p := by\n  rw [to_Ioc_mod, sub_sub_cancel]\n#align self_sub_to_Ioc_mod self_sub_to_Ioc_mod\n\n",
 "self_sub_to_Ioc_div_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem self_sub_to_Ioc_div_zsmul (a b : α) : b - «expr • » (to_Ioc_div hp a b) p = to_Ioc_mod hp a b :=\n  rfl\n#align self_sub_to_Ioc_div_zsmul self_sub_to_Ioc_div_zsmul\n\n",
 "self_sub_to_Ico_mod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem self_sub_to_Ico_mod (a b : α) : b - to_Ico_mod hp a b = «expr • » (to_Ico_div hp a b) p := by\n  rw [to_Ico_mod, sub_sub_cancel]\n#align self_sub_to_Ico_mod self_sub_to_Ico_mod\n\n",
 "self_sub_to_Ico_div_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem self_sub_to_Ico_div_zsmul (a b : α) : b - «expr • » (to_Ico_div hp a b) p = to_Ico_mod hp a b :=\n  rfl\n#align self_sub_to_Ico_div_zsmul self_sub_to_Ico_div_zsmul\n\n",
 "not_modeq_iff_to_Ico_mod_eq_to_Ioc_mod":
 "theorem not_modeq_iff_to_Ico_mod_eq_to_Ioc_mod : ¬ModEq p a b ↔ to_Ico_mod hp a b = to_Ioc_mod hp a b :=\n  (modeq_iff_to_Ico_mod_ne_to_Ioc_mod _).not_left\n#align not_modeq_iff_to_Ico_mod_eq_to_Ioc_mod not_modeq_iff_to_Ico_mod_eq_to_Ioc_mod\n\n",
 "not_modeq_iff_to_Ico_div_eq_to_Ioc_div":
 "theorem not_modeq_iff_to_Ico_div_eq_to_Ioc_div : ¬ModEq p a b ↔ to_Ico_div hp a b = to_Ioc_div hp a b := by\n  rw [not_modeq_iff_to_Ico_mod_eq_to_Ioc_mod hp, to_Ico_mod, to_Ioc_mod, sub_right_inj,\n    (zsmul_strictMono_left hp).injective.eq_iff]\n#align not_modeq_iff_to_Ico_div_eq_to_Ioc_div not_modeq_iff_to_Ico_div_eq_to_Ioc_div\n\n",
 "not_modeq_iff_ne_mod_zmultiples":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\ntheorem not_modeq_iff_ne_mod_zmultiples : ¬ModEq p a b ↔ (b : «expr ⧸ » α (AddSubgroup.zmultiples p)) ≠ a :=\n  (modEq_iff_eq_mod_zmultiples hp).not\n#align not_modeq_iff_ne_mod_zmultiples not_modeq_iff_ne_mod_zmultiples\n\n",
 "not_modeq_iff_ne_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem not_modeq_iff_ne_add_zsmul : ¬ModEq p a b ↔ ∀ z : ℤ, b ≠ a + «expr • » z p := by\n  rw [modeq_iff_eq_add_zsmul hp, not_exists]\n#align not_modeq_iff_ne_add_zsmul not_modeq_iff_ne_add_zsmul\n\n",
 "modeq_iff_to_Ioc_mod_eq_right":
 "theorem modeq_iff_to_Ioc_mod_eq_right : ModEq p a b ↔ to_Ioc_mod hp a b = a + p :=\n  by\n  rw [modeq_iff_to_Ico_mod_ne_to_Ioc_mod hp, ne, to_Ico_mod_eq_iff hp, not_iff_comm]\n  obtain ⟨h₁, h₂⟩ := to_Ioc_mod_mem_Ioc hp a b\n  exact ⟨fun h => ⟨⟨h₁.le, h₂.lt_of_ne h⟩, _, (to_Ioc_mod_add_to_Ioc_div_zsmul _ _ _).symm⟩, fun h => h.1.2.ne⟩\n#align modeq_iff_to_Ioc_mod_eq_right modeq_iff_to_Ioc_mod_eq_right\n\n",
 "modeq_iff_to_Ico_mod_ne_to_Ioc_mod":
 "theorem modeq_iff_to_Ico_mod_ne_to_Ioc_mod : ModEq p a b ↔ to_Ico_mod hp a b ≠ to_Ioc_mod hp a b :=\n  (tfae_modeq hp a b).out 0 1\n#align modeq_iff_to_Ico_mod_ne_to_Ioc_mod modeq_iff_to_Ico_mod_ne_to_Ioc_mod\n\n",
 "modeq_iff_to_Ico_mod_eq_left":
 "theorem modeq_iff_to_Ico_mod_eq_left : ModEq p a b ↔ to_Ico_mod hp a b = a :=\n  (tfae_modeq hp a b).out 0 3\n#align modeq_iff_to_Ico_mod_eq_left modeq_iff_to_Ico_mod_eq_left\n\n",
 "modeq_iff_to_Ico_mod_add_period_eq_to_Ioc_mod":
 "theorem modeq_iff_to_Ico_mod_add_period_eq_to_Ioc_mod : ModEq p a b ↔ to_Ico_mod hp a b + p = to_Ioc_mod hp a b :=\n  (tfae_modeq hp a b).out 0 2\n#align modeq_iff_to_Ico_mod_add_period_eq_to_Ioc_mod modeq_iff_to_Ico_mod_add_period_eq_to_Ioc_mod\n\n",
 "modeq_iff_to_Ico_div_eq_to_Ioc_div_add_one":
 "theorem modeq_iff_to_Ico_div_eq_to_Ioc_div_add_one : ModEq p a b ↔ to_Ico_div hp a b = to_Ioc_div hp a b + 1 := by\n  rw [modeq_iff_to_Ico_mod_add_period_eq_to_Ioc_mod hp, to_Ico_mod, to_Ioc_mod, ← eq_sub_iff_add_eq, sub_sub,\n    sub_right_inj, ← add_one_zsmul, (zsmul_strictMono_left hp).injective.eq_iff]\n#align modeq_iff_to_Ico_div_eq_to_Ioc_div_add_one modeq_iff_to_Ico_div_eq_to_Ioc_div_add_one\n\n",
 "modeq_iff_eq_mod_zmultiples":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\ntheorem modeq_iff_eq_mod_zmultiples : ModEq p a b ↔ (b : «expr ⧸ » α (AddSubgroup.zmultiples p)) = a := by\n  simp_rw [modeq_iff_eq_add_zsmul hp, QuotientAddGroup.eq_iff_sub_mem, AddSubgroup.mem_zmultiples_iff,\n    eq_sub_iff_add_eq', eq_comm]\n#align modeq_iff_eq_mod_zmultiples modeq_iff_eq_mod_zmultiples\n\n",
 "modeq_iff_eq_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem modeq_iff_eq_add_zsmul : ModEq p a b ↔ ∃ z : ℤ, b = a + «expr • » z p :=\n  by\n  rw [modeq_iff_to_Ico_mod_eq_left hp]\n  constructor <;> intro h\n  · rw [← h]\n    exact ⟨_, (to_Ico_mod_add_to_Ico_div_zsmul _ _ _).symm⟩\n  · rw [to_Ico_mod_eq_iff, Set.left_mem_Ico]\n    exact ⟨lt_add_of_pos_right a hp, h⟩\n#align modeq_iff_eq_add_zsmul modeq_iff_eq_add_zsmul\n\n",
 "left_lt_to_Ioc_mod":
 "theorem left_lt_to_Ioc_mod (a b : α) : a < to_Ioc_mod hp a b :=\n  (Set.mem_Ioc.1 (to_Ioc_mod_mem_Ioc hp a b)).1\n#align left_lt_to_Ioc_mod left_lt_to_Ioc_mod\n\n",
 "left_le_to_Ico_mod":
 "theorem left_le_to_Ico_mod (a b : α) : a ≤ to_Ico_mod hp a b :=\n  (Set.mem_Ico.1 (to_Ico_mod_mem_Ico hp a b)).1\n#align left_le_to_Ico_mod left_le_to_Ico_mod\n\n",
 "equiv_Ioc_mod_coe":
 "@[simp]\ntheorem quotient_add_group.equiv_Ioc_mod_coe (a b : α) :\n    quotient_add_group.equiv_Ioc_mod hp a ↑b = ⟨to_Ioc_mod hp a b, to_Ioc_mod_mem_Ioc hp a _⟩ :=\n  rfl\n#align quotient_add_group.equiv_Ioc_mod_coe quotient_add_group.equiv_Ioc_mod_coe\n\n",
 "equiv_Ico_mod_coe":
 "@[simp]\ntheorem quotient_add_group.equiv_Ico_mod_coe (a b : α) :\n    quotient_add_group.equiv_Ico_mod hp a ↑b = ⟨to_Ico_mod hp a b, to_Ico_mod_mem_Ico hp a _⟩ :=\n  rfl\n#align quotient_add_group.equiv_Ico_mod_coe quotient_add_group.equiv_Ico_mod_coe\n\n",
 "Union_Ioc_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Union_Ioc_zsmul :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ioc («expr • » n p) («expr • » (n + 1) p)) =\n      univ :=\n  by simpa only [zero_add] using Union_Ioc_add_zsmul hp 0\n#align Union_Ioc_zsmul Union_Ioc_zsmul\n\n",
 "Union_Ioc_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Ioc_int_cast :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ioc (n : α) (n + 1)) =\n      Set.univ :=\n  by simpa only [zero_add] using Union_Ioc_add_int_cast (0 : α)\n#align Union_Ioc_int_cast Union_Ioc_int_cast\n\n",
 "Union_Ioc_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Union_Ioc_add_zsmul :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ioc (a + «expr • » n p) (a + «expr • » (n + 1) p)) =\n      univ :=\n  by\n  refine' eq_univ_iff_forall.mpr fun b => mem_Union.mpr _\n  rcases sub_to_Ioc_div_zsmul_mem_Ioc hp a b with ⟨hl, hr⟩\n  refine' ⟨to_Ioc_div hp a b, ⟨lt_sub_iff_add_lt.mp hl, _⟩⟩\n  rw [add_smul, one_smul, ← add_assoc]\n  convert sub_le_iff_le_add.mp hr using 1; abel\n#align Union_Ioc_add_zsmul Union_Ioc_add_zsmul\n\n",
 "Union_Ioc_add_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Ioc_add_int_cast :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ioc (a + n) (a + n + 1)) =\n      Set.univ :=\n  by simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using Union_Ioc_add_zsmul zero_lt_one a\n#align Union_Ioc_add_int_cast Union_Ioc_add_int_cast\n\n",
 "Union_Ico_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Union_Ico_zsmul :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ico («expr • » n p) («expr • » (n + 1) p)) =\n      univ :=\n  by simpa only [zero_add] using Union_Ico_add_zsmul hp 0\n#align Union_Ico_zsmul Union_Ico_zsmul\n\n",
 "Union_Ico_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Ico_int_cast :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ico (n : α) (n + 1)) =\n      Set.univ :=\n  by simpa only [zero_add] using Union_Ico_add_int_cast (0 : α)\n#align Union_Ico_int_cast Union_Ico_int_cast\n\n",
 "Union_Ico_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Union_Ico_add_zsmul :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ico (a + «expr • » n p) (a + «expr • » (n + 1) p)) =\n      univ :=\n  by\n  refine' eq_univ_iff_forall.mpr fun b => mem_Union.mpr _\n  rcases sub_to_Ico_div_zsmul_mem_Ico hp a b with ⟨hl, hr⟩\n  refine' ⟨to_Ico_div hp a b, ⟨le_sub_iff_add_le.mp hl, _⟩⟩\n  rw [add_smul, one_smul, ← add_assoc]\n  convert sub_lt_iff_lt_add.mp hr using 1; abel\n#align Union_Ico_add_zsmul Union_Ico_add_zsmul\n\n",
 "Union_Ico_add_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Ico_add_int_cast :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Ico (a + n) (a + n + 1)) =\n      Set.univ :=\n  by simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using Union_Ico_add_zsmul zero_lt_one a\n#align Union_Ico_add_int_cast Union_Ico_add_int_cast\n\n",
 "Union_Icc_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Union_Icc_zsmul :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Icc («expr • » n p) («expr • » (n + 1) p)) =\n      univ :=\n  by simpa only [zero_add] using Union_Icc_add_zsmul hp 0\n#align Union_Icc_zsmul Union_Icc_zsmul\n\n",
 "Union_Icc_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Icc_int_cast :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Icc (n : α) (n + 1)) =\n      Set.univ :=\n  by simpa only [zero_add] using Union_Icc_add_int_cast (0 : α)\n#align Union_Icc_int_cast Union_Icc_int_cast\n\n",
 "Union_Icc_add_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Union_Icc_add_zsmul :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Icc (a + «expr • » n p) (a + «expr • » (n + 1) p)) =\n      univ :=\n  by\n  simpa only [Union_Ioc_add_zsmul hp a, univ_subset_iff] using\n    Union_mono fun n : ℤ => (Ioc_subset_Icc_self : Ioc (a + «expr • » n p) (a + «expr • » (n + 1) p) ⊆ Icc _ _)\n#align Union_Icc_add_zsmul Union_Icc_add_zsmul\n\n",
 "Union_Icc_add_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\ntheorem Union_Icc_add_int_cast :\n    «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Icc (a + n) (a + n + 1)) =\n      Set.univ :=\n  by simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using Union_Icc_add_zsmul zero_lt_one a\n#align Union_Icc_add_int_cast Union_Icc_add_int_cast\n\n",
 "Ico_eq_locus_Ioc_eq_Union_Ioo":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem Ico_eq_locus_Ioc_eq_Union_Ioo :\n    { b | to_Ico_mod hp a b = to_Ioc_mod hp a b } =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (Set.Ioo (a + «expr • » z p) (a + p + «expr • » z p)) :=\n  by ext1;\n  simp_rw [Set.mem_setOf, Set.mem_unionᵢ, ← Set.sub_mem_Ioo_iff_left, ←\n    add_comm_group.not_modeq_iff_to_Ico_mod_eq_to_Ioc_mod, AddCommGroup.ModEq, not_forall, Classical.not_not]\n#align Ico_eq_locus_Ioc_eq_Union_Ioo Ico_eq_locus_Ioc_eq_Union_Ioo\n\n"}