{"ring_hom_monotone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\ntheorem ring_hom_monotone (hR : ∀ r : R, 0 ≤ r → ∃ s : R, s ^ 2 = r) (f : «expr →+* » R S) : Monotone f :=\n  (monotone_iff_map_nonneg f).2 fun r h => by\n    obtain ⟨s, rfl⟩ := hR r h\n    rw [map_pow]\n    apply sq_nonneg\n#align ring_hom_monotone ring_hom_monotone\n\n",
 "mem_cut_map_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n@[simp]\ntheorem mem_cut_map_iff : b ∈ cut_map β a ↔ ∃ q : exprℚ, (q : α) < a ∧ (q : β) = b :=\n  iff.rfl\n#align mem_cut_map_iff mem_cut_map_iff\n\n",
 "lt_induced_map_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem lt_induced_map_iff : b < induced_map α β a ↔ ∃ q : exprℚ, b < q ∧ (q : α) < a :=\n  ⟨fun h => (exists_rat_btwn h).imp fun q => And.imp_right coe_lt_induced_map_iff.1, fun ⟨q, hbq, hqa⟩ =>\n    hbq.trans <| by rwa [coe_lt_induced_map_iff]⟩\n#align lt_induced_map_iff lt_induced_map_iff\n\n",
 "le_induced_map_mul_self_of_mem_cut_map":
 "/-- Preparatory lemma for `induced_ring_hom`. -/\ntheorem le_induced_map_mul_self_of_mem_cut_map (ha : 0 < a) (b : β) (hb : b ∈ cut_map β (a * a)) :\n    b ≤ induced_map α β a * induced_map α β a :=\n  by\n  obtain ⟨q, hb, rfl⟩ := hb\n  obtain ⟨q', hq', hqq', hqa⟩ := exists_rat_pow_btwn two_ne_zero hb (mul_self_pos.2 ha.ne')\n  trans (q' : β) ^ 2\n  exact_mod_cast hqq'.le\n  rw [pow_two] at hqa⊢\n  exact\n    mul_self_le_mul_self (by exact_mod_cast hq'.le)\n      (le_csupₛ (cut_map_bdd_above β a) <| coe_mem_cut_map_iff.2 <| lt_of_mul_self_lt_mul_self ha.le hqa)\n#align le_induced_map_mul_self_of_mem_cut_map le_induced_map_mul_self_of_mem_cut_map\n\n",
 "induced_order_ring_iso_symm":
 "@[simp]\ntheorem induced_order_ring_iso_symm : (induced_order_ring_iso β γ).symm = induced_order_ring_iso γ β :=\n  rfl\n#align induced_order_ring_iso_symm induced_order_ring_iso_symm\n\n",
 "induced_order_ring_iso_self":
 "@[simp]\ntheorem induced_order_ring_iso_self : induced_order_ring_iso β β = OrderRingIso.refl β :=\n  OrderRingIso.ext induced_map_self\n#align induced_order_ring_iso_self induced_order_ring_iso_self\n\n",
 "induced_map_zero":
 "@[simp]\ntheorem induced_map_zero : induced_map α β 0 = 0 := by exact_mod_cast induced_map_rat α β 0\n#align induced_map_zero induced_map_zero\n\n",
 "induced_map_self":
 "@[simp]\ntheorem induced_map_self (b : β) : induced_map β β b = b :=\n  eq_of_forall_rat_lt_iff_lt fun q => coe_lt_induced_map_iff\n#align induced_map_self induced_map_self\n\n",
 "induced_map_rat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem induced_map_rat (q : exprℚ) : induced_map α β (q : α) = q :=\n  by\n  refine' csupₛ_eq_of_forall_le_of_forall_lt_exists_gt (cut_map_nonempty β q) (fun x h => _) fun w h => _\n  · rw [cut_map_coe] at h\n    obtain ⟨r, h, rfl⟩ := h\n    exact le_of_lt h\n  · obtain ⟨q', hwq, hq⟩ := exists_rat_btwn h\n    rw [cut_map_coe]\n    exact ⟨q', ⟨_, hq, rfl⟩, hwq⟩\n#align induced_map_rat induced_map_rat\n\n",
 "induced_map_one":
 "@[simp]\ntheorem induced_map_one : induced_map α β 1 = 1 := by exact_mod_cast induced_map_rat α β 1\n#align induced_map_one induced_map_one\n\n",
 "induced_map_nonneg":
 "theorem induced_map_nonneg (ha : 0 ≤ a) : 0 ≤ induced_map α β a :=\n  (induced_map_zero α _).ge.trans <| induced_map_mono _ _ ha\n#align induced_map_nonneg induced_map_nonneg\n\n",
 "induced_map_mono":
 "theorem induced_map_mono : Monotone (induced_map α β) := fun a b h =>\n  csupₛ_le_csupₛ (cut_map_bdd_above β _) (cut_map_nonempty β _) (cut_map_mono β h)\n#align induced_map_mono induced_map_mono\n\n",
 "induced_map_inv_self":
 "@[simp]\ntheorem induced_map_inv_self (b : β) : induced_map γ β (induced_map β γ b) = b := by\n  rw [induced_map_induced_map, induced_map_self]\n#align induced_map_inv_self induced_map_inv_self\n\n",
 "induced_map_induced_map":
 "@[simp]\ntheorem induced_map_induced_map (a : α) : induced_map β γ (induced_map α β a) = induced_map α γ a :=\n  eq_of_forall_rat_lt_iff_lt fun q => by\n    rw [coe_lt_induced_map_iff, coe_lt_induced_map_iff, iff.comm, coe_lt_induced_map_iff]\n#align induced_map_induced_map induced_map_induced_map\n\n",
 "induced_map_add":
 "theorem induced_map_add (x y : α) : induced_map α β (x + y) = induced_map α β x + induced_map α β y :=\n  by\n  rw [[anonymous], cut_map_add]\n  exact csupₛ_add (cut_map_nonempty β x) (cut_map_bdd_above β x) (cut_map_nonempty β y) (cut_map_bdd_above β y)\n#align induced_map_add induced_map_add\n\n",
 "exists_mem_cut_map_mul_self_of_lt_induced_map_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/-- Preparatory lemma for `induced_ring_hom`. -/\ntheorem exists_mem_cut_map_mul_self_of_lt_induced_map_mul_self (ha : 0 < a) (b : β)\n    (hba : b < induced_map α β a * induced_map α β a) : ∃ c ∈ cut_map β (a * a), b < c :=\n  by\n  obtain hb | hb := lt_or_le b 0\n  · refine' ⟨0, _, hb⟩\n    rw [← Rat.cast_zero, coe_mem_cut_map_iff, Rat.cast_zero]\n    exact mul_self_pos.2 ha.ne'\n  obtain ⟨q, hq, hbq, hqa⟩ := exists_rat_pow_btwn two_ne_zero hba (hb.trans_lt hba)\n  rw [← cast_pow] at hbq\n  refine' ⟨(q ^ 2 : exprℚ), coe_mem_cut_map_iff.2 _, hbq⟩\n  rw [pow_two] at hqa⊢\n  push_cast\n  obtain ⟨q', hq', hqa'⟩ := lt_induced_map_iff.1 (lt_of_mul_self_lt_mul_self _ hqa)\n  exact mul_self_lt_mul_self (by exact_mod_cast hq.le) (hqa'.trans' <| by assumption_mod_cast)\n  exact induced_map_nonneg ha.le\n#align exists_mem_cut_map_mul_self_of_lt_induced_map_mul_self exists_mem_cut_map_mul_self_of_lt_induced_map_mul_self\n\n",
 "cut_map_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem cut_map_self (a : α) : cut_map α a = Iio a ∩ range (coe : exprℚ → α) :=\n  by\n  ext\n  constructor\n  · rintro ⟨q, h, rfl⟩\n    exact ⟨h, q, rfl⟩\n  · rintro ⟨h, q, rfl⟩\n    exact ⟨q, h, rfl⟩\n#align cut_map_self cut_map_self\n\n",
 "cut_map_nonempty":
 "theorem cut_map_nonempty (a : α) : (cut_map β a).nonempty :=\n  Nonempty.image _ <| exists_rat_lt a\n#align cut_map_nonempty cut_map_nonempty\n\n",
 "cut_map_mono":
 "/-\nCopyright (c) 2022 Alex J. Best. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Alex J. Best, Yaël Dillies\n-/\n-- see Note [lower instance priority]\ntheorem cut_map_mono (h : a₁ ≤ a₂) : cut_map β a₁ ⊆ cut_map β a₂ :=\n  image_subset _ fun _ => h.trans_lt'\n#align cut_map_mono cut_map_mono\n\n",
 "cut_map_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem cut_map_coe (q : exprℚ) : cut_map β (q : α) = «expr '' » coe { r : exprℚ | (r : β) < q } := by\n  simp_rw [cut_map, Rat.cast_lt]\n#align cut_map_coe cut_map_coe\n\n",
 "cut_map_bdd_above":
 "theorem cut_map_bdd_above (a : α) : BddAbove (cut_map β a) :=\n  by\n  obtain ⟨q, hq⟩ := exists_rat_gt a\n  exact ⟨q, ball_image_iff.2 fun r hr => by exact_mod_cast (hq.trans' hr).le⟩\n#align cut_map_bdd_above cut_map_bdd_above\n\n",
 "cut_map_add":
 "theorem cut_map_add (a b : α) : cut_map β (a + b) = cut_map β a + cut_map β b :=\n  by\n  refine' (image_subset_iff.2 fun q hq => _).antisymm _\n  · rw [mem_set_of_eq, ← sub_lt_iff_lt_add] at hq\n    obtain ⟨q₁, hq₁q, hq₁ab⟩ := exists_rat_btwn hq\n    refine' ⟨q₁, q - q₁, _, _, add_sub_cancel'_right _ _⟩ <;> try norm_cast <;> rwa [coe_mem_cut_map_iff]\n    exact_mod_cast sub_lt_comm.mp hq₁q\n  · rintro _ ⟨_, _, ⟨qa, ha, rfl⟩, ⟨qb, hb, rfl⟩, rfl⟩\n    refine' ⟨qa + qb, _, by norm_cast⟩\n    rw [mem_set_of_eq, cast_add]\n    exact add_lt_add ha hb\n#align cut_map_add cut_map_add\n\n",
 "coe_mem_cut_map_iff":
 "@[simp]\ntheorem coe_mem_cut_map_iff [CharZero β] : (q : β) ∈ cut_map β a ↔ (q : α) < a :=\n  Rat.cast_injective.mem_set_image\n#align coe_mem_cut_map_iff coe_mem_cut_map_iff\n\n",
 "coe_lt_induced_map_iff":
 "theorem coe_lt_induced_map_iff : (q : β) < induced_map α β a ↔ (q : α) < a :=\n  by\n  refine' ⟨fun h => _, fun hq => _⟩\n  · rw [← induced_map_rat α] at h\n    exact (induced_map_mono α β).reflect_lt h\n  · obtain ⟨q', hq, hqa⟩ := exists_rat_btwn hq\n    apply lt_csupₛ_of_lt (cut_map_bdd_above β a) (coe_mem_cut_map_iff.mpr hqa)\n    exact_mod_cast hq\n#align coe_lt_induced_map_iff coe_lt_induced_map_iff\n\n",
 "coe_induced_order_ring_iso":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n-- reduce to the case of x = y\n-- reduce to the case of 0 < x\n-- prove that the (Sup of rationals less than x) ^ 2 is the Sup of the set of rationals less\n-- than (x ^ 2) by showing it is an upper bound and any smaller number is not an upper bound\n@[simp]\ntheorem coe_induced_order_ring_iso : «expr⇑ » (induced_order_ring_iso β γ) = induced_map β γ :=\n  rfl\n#align coe_induced_order_ring_iso coe_induced_order_ring_iso\n\n"}