{"zero_lt_iff":
 "#print zero_lt_iff /-\ntheorem zero_lt_iff : 0 < a ↔ a ≠ 0 :=\n  ⟨ne_of_gt, fun h => lt_of_le_of_ne zero_le' h.symm⟩\n#align zero_lt_iff zero_lt_iff\n-/\n\n",
 "zero_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print Units.zero_lt /-\n@[simp]\ntheorem Units.zero_lt (u : «expr ˣ» α) : (0 : α) < u :=\n  zero_lt_iff.2 <| u.ne_zero\n#align units.zero_lt Units.zero_lt\n-/\n\n",
 "zero_le'":
 "#print zero_le' /-\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau, Johan Commelin, Patrick Massot\n-/\n/-\nThe following facts are true more generally in a (linearly) ordered commutative monoid.\n-/\n@[simp]\ntheorem zero_le' : 0 ≤ a := by simpa only [MulZeroClass.mul_zero, mul_one] using mul_le_mul_left' zero_le_one a\n#align zero_le' zero_le'\n-/\n\n",
 "one_le_mul₀":
 "#print one_le_mul₀ /-\n/-- Alias of `one_le_mul'` for unification. -/\ntheorem one_le_mul₀ (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b :=\n  one_le_mul ha hb\n#align one_le_mul₀ one_le_mul₀\n-/\n\n",
 "one_le_inv₀":
 "#print one_le_inv₀ /-\ntheorem one_le_inv₀ (ha : a ≠ 0) : 1 ≤ a⁻¹ ↔ a ≤ 1 :=\n  @one_le_inv' _ _ _ _ <| Units.mk0 a ha\n#align one_le_inv₀ one_le_inv₀\n-/\n\n",
 "not_lt_zero'":
 "#print not_lt_zero' /-\n@[simp]\ntheorem not_lt_zero' : ¬a < 0 :=\n  not_lt_of_le zero_le'\n#align not_lt_zero' not_lt_zero'\n-/\n\n",
 "ne_zero_of_lt":
 "#print ne_zero_of_lt /-\ntheorem ne_zero_of_lt (h : b < a) : a ≠ 0 := fun h1 => not_lt_zero' <| show b < 0 from h1 ▸ h\n#align ne_zero_of_lt ne_zero_of_lt\n-/\n\n",
 "mul_lt_right₀":
 "#print mul_lt_right₀ /-\ntheorem mul_lt_right₀ (c : α) (h : a < b) (hc : c ≠ 0) : a * c < b * c :=\n  by\n  contrapose! h\n  exact le_of_le_mul_right hc h\n#align mul_lt_right₀ mul_lt_right₀\n-/\n\n",
 "mul_lt_mul₀":
 "#print mul_lt_mul₀ /-\ntheorem mul_lt_mul₀ (hab : a < b) (hcd : c < d) : a * c < b * d :=\n  mul_lt_mul_of_lt_of_le₀ hab.le (ne_zero_of_lt hab) hcd\n#align mul_lt_mul₀ mul_lt_mul₀\n-/\n\n",
 "mul_lt_mul_of_lt_of_le₀":
 "#print mul_lt_mul_of_lt_of_le₀ /-\ntheorem mul_lt_mul_of_lt_of_le₀ (hab : a ≤ b) (hb : b ≠ 0) (hcd : c < d) : a * c < b * d :=\n  have hd : d ≠ 0 := ne_zero_of_lt hcd\n  if ha : a = 0 then by\n    rw [ha, MulZeroClass.zero_mul, zero_lt_iff]\n    exact mul_ne_zero hb hd\n  else\n    if hc : c = 0 then by\n      rw [hc, MulZeroClass.mul_zero, zero_lt_iff]\n      exact mul_ne_zero hb hd\n    else show Units.mk0 a ha * Units.mk0 c hc < Units.mk0 b hb * Units.mk0 d hd from mul_lt_mul_of_le_of_lt hab hcd\n#align mul_lt_mul_of_lt_of_le₀ mul_lt_mul_of_lt_of_le₀\n-/\n\n",
 "mul_le_one₀":
 "#print mul_le_one₀ /-\n-- TODO: Do we really need the following two?\n/-- Alias of `mul_le_one'` for unification. -/\ntheorem mul_le_one₀ (ha : a ≤ 1) (hb : b ≤ 1) : a * b ≤ 1 :=\n  mul_le_one' ha hb\n#align mul_le_one₀ mul_le_one₀\n-/\n\n",
 "mul_le_mul_right₀":
 "#print mul_le_mul_right₀ /-\ntheorem mul_le_mul_right₀ (hc : c ≠ 0) : a * c ≤ b * c ↔ a ≤ b :=\n  ⟨le_of_le_mul_right hc, fun hab => mul_le_mul_right' hab _⟩\n#align mul_le_mul_right₀ mul_le_mul_right₀\n-/\n\n",
 "mul_le_mul_left₀":
 "#print mul_le_mul_left₀ /-\ntheorem mul_le_mul_left₀ (ha : a ≠ 0) : a * b ≤ a * c ↔ b ≤ c :=\n  by\n  simp only [mul_comm a]\n  exact mul_le_mul_right₀ ha\n#align mul_le_mul_left₀ mul_le_mul_left₀\n-/\n\n",
 "mul_inv_lt_of_lt_mul₀":
 "#print mul_inv_lt_of_lt_mul₀ /-\ntheorem mul_inv_lt_of_lt_mul₀ (h : x < y * z) : x * z⁻¹ < y :=\n  by\n  contrapose! h\n  simpa only [inv_inv] using mul_inv_le_of_le_mul h\n#align mul_inv_lt_of_lt_mul₀ mul_inv_lt_of_lt_mul₀\n-/\n\n",
 "mul_inv_le_of_le_mul":
 "#print mul_inv_le_of_le_mul /-\ntheorem mul_inv_le_of_le_mul (hab : a ≤ b * c) : a * c⁻¹ ≤ b :=\n  by\n  by_cases h : c = 0\n  · simp [h]\n  · exact le_of_le_mul_right h (by simpa [h] using hab)\n#align mul_inv_le_of_le_mul mul_inv_le_of_le_mul\n-/\n\n",
 "mul_inv_le_iff₀":
 "#print mul_inv_le_iff₀ /-\ntheorem mul_inv_le_iff₀ (hc : c ≠ 0) : a * c⁻¹ ≤ b ↔ a ≤ b * c :=\n  ⟨fun h => inv_inv c ▸ le_mul_inv_of_mul_le (inv_ne_zero hc) h, mul_inv_le_of_le_mul⟩\n#align mul_inv_le_iff₀ mul_inv_le_iff₀\n-/\n\n",
 "mulRight₀'_symm":
 "#print OrderIso.mulRight₀'_symm /-\ntheorem OrderIso.mulRight₀'_symm {a : α} (ha : a ≠ 0) :\n    (OrderIso.mulRight₀' ha).symm = OrderIso.mulRight₀' (inv_ne_zero ha) :=\n  by\n  ext\n  rfl\n#align order_iso.mul_right₀'_symm OrderIso.mulRight₀'_symm\n-/\n\n",
 "mulLeft₀'_symm":
 "#print OrderIso.mulLeft₀'_symm /-\ntheorem OrderIso.mulLeft₀'_symm {a : α} (ha : a ≠ 0) :\n    (OrderIso.mulLeft₀' ha).symm = OrderIso.mulLeft₀' (inv_ne_zero ha) :=\n  by\n  ext\n  rfl\n#align order_iso.mul_left₀'_symm OrderIso.mulLeft₀'_symm\n-/\n\n",
 "lt_of_mul_lt_mul_of_le₀":
 "#print lt_of_mul_lt_mul_of_le₀ /-\ntheorem lt_of_mul_lt_mul_of_le₀ (h : a * b < c * d) (hc : 0 < c) (hh : c ≤ a) : b < d :=\n  by\n  have ha : a ≠ 0 := ne_of_gt (lt_of_lt_of_le hc hh)\n  simp_rw [← inv_le_inv₀ ha (ne_of_gt hc)] at hh\n  have := mul_lt_mul_of_lt_of_le₀ hh (inv_ne_zero (ne_of_gt hc)) h\n  simpa [inv_mul_cancel_left₀ ha, inv_mul_cancel_left₀ (ne_of_gt hc)] using this\n#align lt_of_mul_lt_mul_of_le₀ lt_of_mul_lt_mul_of_le₀\n-/\n\n",
 "le_zero_iff":
 "#print le_zero_iff /-\n@[simp]\ntheorem le_zero_iff : a ≤ 0 ↔ a = 0 :=\n  ⟨fun h => le_antisymm h zero_le', fun h => h ▸ le_rfl⟩\n#align le_zero_iff le_zero_iff\n-/\n\n",
 "le_of_le_mul_right":
 "#print le_of_le_mul_right /-\ntheorem le_of_le_mul_right (h : c ≠ 0) (hab : a * c ≤ b * c) : a ≤ b := by\n  simpa only [mul_inv_cancel_right₀ h] using mul_le_mul_right' hab c⁻¹\n#align le_of_le_mul_right le_of_le_mul_right\n-/\n\n",
 "le_mul_inv_of_mul_le":
 "#print le_mul_inv_of_mul_le /-\ntheorem le_mul_inv_of_mul_le (h : c ≠ 0) (hab : a * c ≤ b) : a ≤ b * c⁻¹ :=\n  le_of_le_mul_right h (by simpa [h] using hab)\n#align le_mul_inv_of_mul_le le_mul_inv_of_mul_le\n-/\n\n",
 "le_mul_inv_iff₀":
 "#print le_mul_inv_iff₀ /-\ntheorem le_mul_inv_iff₀ (hc : c ≠ 0) : a ≤ b * c⁻¹ ↔ a * c ≤ b :=\n  ⟨fun h => inv_inv c ▸ mul_inv_le_of_le_mul h, le_mul_inv_of_mul_le hc⟩\n#align le_mul_inv_iff₀ le_mul_inv_iff₀\n-/\n\n",
 "le_div_iff₀":
 "#print le_div_iff₀ /-\ntheorem le_div_iff₀ (hc : c ≠ 0) : a ≤ b / c ↔ a * c ≤ b := by rw [div_eq_mul_inv, le_mul_inv_iff₀ hc]\n#align le_div_iff₀ le_div_iff₀\n-/\n\n",
 "inv_mul_lt_of_lt_mul₀":
 "#print inv_mul_lt_of_lt_mul₀ /-\ntheorem inv_mul_lt_of_lt_mul₀ (h : x < y * z) : y⁻¹ * x < z :=\n  by\n  rw [mul_comm] at *\n  exact mul_inv_lt_of_lt_mul₀ h\n#align inv_mul_lt_of_lt_mul₀ inv_mul_lt_of_lt_mul₀\n-/\n\n",
 "inv_lt_inv₀":
 "#print inv_lt_inv₀ /-\ntheorem inv_lt_inv₀ (ha : a ≠ 0) (hb : b ≠ 0) : a⁻¹ < b⁻¹ ↔ b < a :=\n  show (Units.mk0 a ha)⁻¹ < (Units.mk0 b hb)⁻¹ ↔ Units.mk0 b hb < Units.mk0 a ha from inv_lt_inv_iff\n#align inv_lt_inv₀ inv_lt_inv₀\n-/\n\n",
 "inv_le_one₀":
 "#print inv_le_one₀ /-\ntheorem inv_le_one₀ (ha : a ≠ 0) : a⁻¹ ≤ 1 ↔ 1 ≤ a :=\n  @inv_le_one' _ _ _ _ <| Units.mk0 a ha\n#align inv_le_one₀ inv_le_one₀\n-/\n\n",
 "inv_le_inv₀":
 "#print inv_le_inv₀ /-\ntheorem inv_le_inv₀ (ha : a ≠ 0) (hb : b ≠ 0) : a⁻¹ ≤ b⁻¹ ↔ b ≤ a :=\n  show (Units.mk0 a ha)⁻¹ ≤ (Units.mk0 b hb)⁻¹ ↔ Units.mk0 b hb ≤ Units.mk0 a ha from inv_le_inv_iff\n#align inv_le_inv₀ inv_le_inv₀\n-/\n\n",
 "div_le_iff₀":
 "#print div_le_iff₀ /-\ntheorem div_le_iff₀ (hc : c ≠ 0) : a / c ≤ b ↔ a ≤ b * c := by rw [div_eq_mul_inv, mul_inv_le_iff₀ hc]\n#align div_le_iff₀ div_le_iff₀\n-/\n\n",
 "div_le_div₀":
 "#print div_le_div₀ /-\ntheorem div_le_div₀ (a b c d : α) (hb : b ≠ 0) (hd : d ≠ 0) : a * b⁻¹ ≤ c * d⁻¹ ↔ a * d ≤ c * b :=\n  if ha : a = 0 then by simp [ha]\n  else\n    if hc : c = 0 then by simp [inv_ne_zero hb, hc, hd]\n    else\n      show\n        Units.mk0 a ha * (Units.mk0 b hb)⁻¹ ≤ Units.mk0 c hc * (Units.mk0 d hd)⁻¹ ↔\n          Units.mk0 a ha * Units.mk0 d hd ≤ Units.mk0 c hc * Units.mk0 b hb\n        from mul_inv_le_mul_inv_iff'\n#align div_le_div₀ div_le_div₀\n-/\n\n",
 "div_le_div_right₀":
 "#print div_le_div_right₀ /-\ntheorem div_le_div_right₀ (hc : c ≠ 0) : a / c ≤ b / c ↔ a ≤ b := by\n  rw [div_eq_mul_inv, div_eq_mul_inv, mul_le_mul_right₀ (inv_ne_zero hc)]\n#align div_le_div_right₀ div_le_div_right₀\n-/\n\n",
 "div_le_div_left₀":
 "#print div_le_div_left₀ /-\ntheorem div_le_div_left₀ (ha : a ≠ 0) (hb : b ≠ 0) (hc : c ≠ 0) : a / b ≤ a / c ↔ c ≤ b := by\n  simp only [div_eq_mul_inv, mul_le_mul_left₀ ha, inv_le_inv₀ hb hc]\n#align div_le_div_left₀ div_le_div_left₀\n-/\n\n"}