{"top_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print top_add /-\n-- see Note [lower instance priority]\n@[simp]\ntheorem top_add (a : α) : «expr⊤» + a = «expr⊤» :=\n  linear_ordered_add_comm_monoid_with_top.top_add' a\n#align top_add top_add\n-/\n\n",
 "to_covariantClass_right":
 "#print Mul.to_covariantClass_right /-\n/- This is not an instance, to avoid creating a loop in the type-class system: in a\n`right_cancel_semigroup` with a `partial_order`, assuming `covariant_class M M (swap (*)) (<)`\nimplies `covariant_class M M (swap (*)) (≤)`, see\n`right_cancel_semigroup.covariant_swap_mul_lt_of_covariant_swap_mul_le`. -/\n@[to_additive]\ntheorem Mul.to_covariantClass_right (M : Type _) [Mul M] [partial_order M] [CovariantClass M M (swap (· * ·)) (· < ·)] :\n    CovariantClass M M (swap (· * ·)) (· ≤ ·) :=\n  ⟨covariant_le_of_covariant_lt _ _ _ covariant_class.elim⟩\n#align has_mul.to_covariant_class_right Mul.to_covariantClass_right\n#align has_add.to_covariant_class_right Add.to_covariantClass_right\n-/\n\n",
 "to_covariantClass_left":
 "#print Mul.to_covariantClass_left /-\n/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro, Johannes Hölzl\n-/\n/- This instance can be proven with `by apply_instance`.  However, `with_bot ℕ` does not\npick up a `covariant_class M M (function.swap (*)) (≤)` instance without it (see PR #7940). -/\n/- This is not an instance, to avoid creating a loop in the type-class system: in a\n`left_cancel_semigroup` with a `partial_order`, assuming `covariant_class M M (*) (≤)` implies\n`covariant_class M M (*) (<)`, see `left_cancel_semigroup.covariant_mul_lt_of_covariant_mul_le`. -/\n@[to_additive]\ntheorem Mul.to_covariantClass_left (M : Type _) [Mul M] [partial_order M] [CovariantClass M M (· * ·) (· < ·)] :\n    CovariantClass M M (· * ·) (· ≤ ·) :=\n  ⟨covariant_le_of_covariant_lt _ _ _ covariant_class.elim⟩\n#align has_mul.to_covariant_class_left Mul.to_covariantClass_left\n#align has_add.to_covariant_class_left Add.to_covariantClass_left\n-/\n\n",
 "bit0_pos":
 "#print bit0_pos /-\ntheorem bit0_pos [OrderedAddCommMonoid α] {a : α} (h : 0 < a) : 0 < bit0 a :=\n  add_pos' h h\n#align bit0_pos bit0_pos\n-/\n\n",
 "add_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n#print add_top /-\n@[simp]\ntheorem add_top (a : α) : a + «expr⊤» = «expr⊤» :=\n  trans (add_comm _ _) (top_add _)\n#align add_top add_top\n-/\n\n"}