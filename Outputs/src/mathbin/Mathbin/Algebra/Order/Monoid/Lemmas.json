{"one_lt_of_lt_mul_right":
 "#print one_lt_of_lt_mul_right /-\n@[to_additive]\ntheorem one_lt_of_lt_mul_right [contravariant_class α α (· * ·) (· < ·)] {a b : α} (h : a < a * b) : 1 < b :=\n  lt_of_mul_lt_mul_left' <| by simpa only [mul_one]\n#align one_lt_of_lt_mul_right one_lt_of_lt_mul_right\n-/\n\n",
 "one_lt_of_lt_mul_left":
 "#print one_lt_of_lt_mul_left /-\n@[to_additive]\ntheorem one_lt_of_lt_mul_left [contravariant_class α α (swap (· * ·)) (· < ·)] {a b : α} (h : b < a * b) : 1 < a :=\n  lt_of_mul_lt_mul_right' <| by simpa only [one_mul]\n#align one_lt_of_lt_mul_left one_lt_of_lt_mul_left\n-/\n\n",
 "one_lt_mul_of_lt_of_le":
 "#print Right.one_lt_mul_of_lt_of_le /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.one_lt_mul_of_lt_of_le`. -/\n@[to_additive Right.add_pos_of_pos_of_nonneg\n      \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_pos_of_pos_of_nonneg`.\"]\ntheorem Right.one_lt_mul_of_lt_of_le [covariant_class α α (swap (· * ·)) (· < ·)] {a b : α} (ha : 1 < a) (hb : 1 ≤ b) :\n    1 < a * b :=\n  lt_mul_of_one_lt_of_le ha hb\n#align right.one_lt_mul_of_lt_of_le Right.one_lt_mul_of_lt_of_le\n-/\n\n",
 "one_lt_mul_of_le_of_lt":
 "#print Right.one_lt_mul_of_le_of_lt /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.one_lt_mul_of_le_of_lt`. -/\n@[to_additive Right.add_pos_of_nonneg_of_pos\n      \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_pos_of_nonneg_of_pos`.\"]\ntheorem Right.one_lt_mul_of_le_of_lt [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (ha : 1 ≤ a) (hb : 1 < b) :\n    1 < a * b :=\n  lt_mul_of_one_le_of_lt ha hb\n#align right.one_lt_mul_of_le_of_lt Right.one_lt_mul_of_le_of_lt\n-/\n\n",
 "one_lt_mul'":
 "#print Right.one_lt_mul' /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.one_lt_mul'`. -/\n@[to_additive Right.add_pos' \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_pos'`.\"]\ntheorem Right.one_lt_mul' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (ha : 1 < a) (hb : 1 < b) :\n    1 < a * b :=\n  lt_mul_of_one_lt_of_lt' ha hb\n#align right.one_lt_mul' Right.one_lt_mul'\n-/\n\n",
 "one_lt_mul":
 "#print Right.one_lt_mul /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.one_lt_mul`. -/\n@[to_additive Right.add_pos \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_pos`.\"]\ntheorem Right.one_lt_mul [covariant_class α α (swap (· * ·)) (· < ·)] {a b : α} (ha : 1 < a) (hb : 1 < b) : 1 < a * b :=\n  lt_mul_of_one_lt_of_lt ha hb\n#align right.one_lt_mul Right.one_lt_mul\n-/\n\n",
 "one_le_of_le_mul_right":
 "#print one_le_of_le_mul_right /-\n@[to_additive]\ntheorem one_le_of_le_mul_right [contravariant_class α α (· * ·) (· ≤ ·)] {a b : α} (h : a ≤ a * b) : 1 ≤ b :=\n  le_of_mul_le_mul_left' <| by simpa only [mul_one]\n#align one_le_of_le_mul_right one_le_of_le_mul_right\n-/\n\n",
 "one_le_of_le_mul_left":
 "#print one_le_of_le_mul_left /-\n@[to_additive]\ntheorem one_le_of_le_mul_left [contravariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (h : b ≤ a * b) : 1 ≤ a :=\n  le_of_mul_le_mul_right' <| by simpa only [one_mul]\n#align one_le_of_le_mul_left one_le_of_le_mul_left\n-/\n\n",
 "one_le_mul":
 "#print Right.one_le_mul /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.one_le_mul`. -/\n@[to_additive Right.add_nonneg \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_nonneg`.\"]\ntheorem Right.one_le_mul [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ a * b :=\n  le_mul_of_one_le_of_le ha hb\n#align right.one_le_mul Right.one_le_mul\n-/\n\n",
 "mul_strict_mono'":
 "#print MonotoneOn.mul_strict_mono' /-\n/-- The product of a monotone function and a strictly monotone function is strictly monotone. -/\n@[to_additive add_strict_mono \"The sum of a monotone function and a strictly monotone function is strictly monotone.\"]\ntheorem MonotoneOn.mul_strict_mono' [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    {f g : β → α} (hf : monotone_on f s) (hg : strict_mono_on g s) : strict_mono_on (fun x => f x * g x) s :=\n  fun x hx y hy h => mul_lt_mul_of_le_of_lt (hf hx hy h.le) (hg hx hy h)\n#align monotone_on.mul_strict_mono' MonotoneOn.mul_strict_mono'\n-/\n\n",
 "mul_strict_anti'":
 "#print AntitoneOn.mul_strict_anti' /-\n/-- The product of a antitone function and a strictly antitone function is strictly antitone. -/\n@[to_additive add_strict_anti \"The sum of a antitone function and a strictly antitone function is strictly antitone.\"]\ntheorem AntitoneOn.mul_strict_anti' [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    {f g : β → α} (hf : antitone_on f s) (hg : strict_anti_on g s) : strict_anti_on (fun x => f x * g x) s :=\n  fun x hx y hy h => mul_lt_mul_of_le_of_lt (hf hx hy h.le) (hg hx hy h)\n#align antitone_on.mul_strict_anti' AntitoneOn.mul_strict_anti'\n-/\n\n",
 "mul_right_cancel''":
 "#print mul_right_cancel'' /-\n@[to_additive]\ntheorem mul_right_cancel'' [contravariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (h : a * b = c * b) : a = c :=\n  le_antisymm (le_of_mul_le_mul_right' h.le) (le_of_mul_le_mul_right' h.ge)\n#align mul_right_cancel'' mul_right_cancel''\n-/\n\n",
 "mul_monotone'":
 "#print StrictMonoOn.mul_monotone' /-\n/-- The product of a strictly monotone function and a monotone function is strictly monotone. -/\n@[to_additive add_monotone \"The sum of a strictly monotone function and a monotone function is strictly monotone.\"]\ntheorem StrictMonoOn.mul_monotone' (hf : strict_mono_on f s) (hg : monotone_on g s) :\n    strict_mono_on (fun x => f x * g x) s := fun x hx y hy h => mul_lt_mul_of_lt_of_le (hf hx hy h) (hg hx hy h.le)\n#align strict_mono_on.mul_monotone' StrictMonoOn.mul_monotone'\n-/\n\n",
 "mul_lt_one_of_lt_of_le":
 "#print Right.mul_lt_one_of_lt_of_le /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.mul_lt_one_of_lt_of_le`. -/\n@[to_additive Right.add_neg_of_neg_of_nonpos\n      \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_neg_of_neg_of_nonpos`.\"]\ntheorem Right.mul_lt_one_of_lt_of_le [covariant_class α α (swap (· * ·)) (· < ·)] {a b : α} (ha : a < 1) (hb : b ≤ 1) :\n    a * b < 1 :=\n  mul_lt_of_lt_one_of_le ha hb\n#align right.mul_lt_one_of_lt_of_le Right.mul_lt_one_of_lt_of_le\n-/\n\n",
 "mul_lt_one_of_le_of_lt":
 "#print Right.mul_lt_one_of_le_of_lt /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.mul_lt_one_of_le_of_lt`. -/\n@[to_additive Right.add_neg_of_nonpos_of_neg\n      \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_neg_of_nonpos_of_neg`.\"]\ntheorem Right.mul_lt_one_of_le_of_lt [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (ha : a ≤ 1) (hb : b < 1) :\n    a * b < 1 :=\n  mul_lt_of_le_one_of_lt ha hb\n#align right.mul_lt_one_of_le_of_lt Right.mul_lt_one_of_le_of_lt\n-/\n\n",
 "mul_lt_one'":
 "#print Right.mul_lt_one' /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.mul_lt_one'`. -/\n@[to_additive \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_neg'`.\"]\ntheorem Right.mul_lt_one' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (ha : a < 1) (hb : b < 1) :\n    a * b < 1 :=\n  mul_lt_of_lt_one_of_lt' ha hb\n#align right.mul_lt_one' Right.mul_lt_one'\n-/\n\n",
 "mul_lt_one":
 "#print Right.mul_lt_one /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.mul_lt_one`. -/\n@[to_additive \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_neg`.\"]\ntheorem Right.mul_lt_one [covariant_class α α (swap (· * ·)) (· < ·)] {a b : α} (ha : a < 1) (hb : b < 1) : a * b < 1 :=\n  mul_lt_of_lt_one_of_lt ha hb\n#align right.mul_lt_one Right.mul_lt_one\n-/\n\n",
 "mul_lt_of_mul_lt_right":
 "#print mul_lt_of_mul_lt_right /-\n@[to_additive]\ntheorem mul_lt_of_mul_lt_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c d : α} (h : a * b < c)\n    (hle : d ≤ a) : d * b < c :=\n  (mul_le_mul_right' hle b).trans_lt h\n#align mul_lt_of_mul_lt_right mul_lt_of_mul_lt_right\n-/\n\n",
 "mul_lt_of_mul_lt_left":
 "#print mul_lt_of_mul_lt_left /-\n@[to_additive]\ntheorem mul_lt_of_mul_lt_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c d : α} (h : a * b < c) (hle : d ≤ b) :\n    a * d < c :=\n  (mul_le_mul_left' hle a).trans_lt h\n#align mul_lt_of_mul_lt_left mul_lt_of_mul_lt_left\n-/\n\n",
 "mul_lt_of_lt_one_right'":
 "#print mul_lt_of_lt_one_right' /-\n@[to_additive add_lt_of_neg_right]\ntheorem mul_lt_of_lt_one_right' [covariant_class α α (· * ·) (· < ·)] (a : α) {b : α} (h : b < 1) : a * b < a :=\n  calc\n    a * b < a * 1 := mul_lt_mul_left' h a\n    _ = a := mul_one a\n    \n#align mul_lt_of_lt_one_right' mul_lt_of_lt_one_right'\n-/\n\n",
 "mul_lt_of_lt_one_of_lt'":
 "#print mul_lt_of_lt_one_of_lt' /-\n@[to_additive]\ntheorem mul_lt_of_lt_one_of_lt' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (ha : a < 1) (hbc : b < c) :\n    a * b < c :=\n  mul_lt_of_le_one_of_lt ha.le hbc\n#align mul_lt_of_lt_one_of_lt' mul_lt_of_lt_one_of_lt'\n-/\n\n",
 "mul_lt_of_lt_one_of_lt":
 "#print mul_lt_of_lt_one_of_lt /-\n@[to_additive]\ntheorem mul_lt_of_lt_one_of_lt [covariant_class α α (swap (· * ·)) (· < ·)] {a b c : α} (ha : a < 1) (hb : b < c) :\n    a * b < c :=\n  calc\n    a * b < 1 * b := mul_lt_mul_right' ha b\n    _ = b := one_mul b\n    _ < c := hb\n    \n#align mul_lt_of_lt_one_of_lt mul_lt_of_lt_one_of_lt\n-/\n\n",
 "mul_lt_of_lt_one_of_le":
 "#print mul_lt_of_lt_one_of_le /-\n@[to_additive]\ntheorem mul_lt_of_lt_one_of_le [covariant_class α α (swap (· * ·)) (· < ·)] {a b c : α} (ha : a < 1) (hbc : b ≤ c) :\n    a * b < c :=\n  calc\n    a * b < 1 * b := mul_lt_mul_right' ha b\n    _ = b := one_mul b\n    _ ≤ c := hbc\n    \n#align mul_lt_of_lt_one_of_le mul_lt_of_lt_one_of_le\n-/\n\n",
 "mul_lt_of_lt_one_left'":
 "#print mul_lt_of_lt_one_left' /-\n@[to_additive add_lt_of_neg_left]\ntheorem mul_lt_of_lt_one_left' [covariant_class α α (swap (· * ·)) (· < ·)] (a : α) {b : α} (h : b < 1) : b * a < a :=\n  calc\n    b * a < 1 * a := mul_lt_mul_right' h a\n    _ = a := one_mul a\n    \n#align mul_lt_of_lt_one_left' mul_lt_of_lt_one_left'\n-/\n\n",
 "mul_lt_of_lt_of_lt_one'":
 "#print mul_lt_of_lt_of_lt_one' /-\n@[to_additive]\ntheorem mul_lt_of_lt_of_lt_one' [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (hbc : b < c) (ha : a < 1) :\n    b * a < c :=\n  mul_lt_of_lt_of_le_one hbc ha.le\n#align mul_lt_of_lt_of_lt_one' mul_lt_of_lt_of_lt_one'\n-/\n\n",
 "mul_lt_of_lt_of_lt_one":
 "#print mul_lt_of_lt_of_lt_one /-\n@[to_additive]\ntheorem mul_lt_of_lt_of_lt_one [covariant_class α α (· * ·) (· < ·)] {a b c : α} (hbc : b < c) (ha : a < 1) :\n    b * a < c :=\n  calc\n    b * a < b * 1 := mul_lt_mul_left' ha b\n    _ = b := mul_one b\n    _ < c := hbc\n    \n#align mul_lt_of_lt_of_lt_one mul_lt_of_lt_of_lt_one\n-/\n\n",
 "mul_lt_of_lt_of_le_one":
 "#print mul_lt_of_lt_of_le_one /-\n@[to_additive]\ntheorem mul_lt_of_lt_of_le_one [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (hbc : b < c) (ha : a ≤ 1) :\n    b * a < c :=\n  calc\n    b * a ≤ b * 1 := mul_le_mul_left' ha b\n    _ = b := mul_one b\n    _ < c := hbc\n    \n#align mul_lt_of_lt_of_le_one mul_lt_of_lt_of_le_one\n-/\n\n",
 "mul_lt_of_le_one_of_lt":
 "#print mul_lt_of_le_one_of_lt /-\n@[to_additive]\ntheorem mul_lt_of_le_one_of_lt [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (ha : a ≤ 1) (hb : b < c) :\n    a * b < c :=\n  calc\n    a * b ≤ 1 * b := mul_le_mul_right' ha b\n    _ = b := one_mul b\n    _ < c := hb\n    \n#align mul_lt_of_le_one_of_lt mul_lt_of_le_one_of_lt\n-/\n\n",
 "mul_lt_of_le_of_lt_one":
 "#print mul_lt_of_le_of_lt_one /-\n@[to_additive]\ntheorem mul_lt_of_le_of_lt_one [covariant_class α α (· * ·) (· < ·)] {a b c : α} (hbc : b ≤ c) (ha : a < 1) :\n    b * a < c :=\n  calc\n    b * a < b * 1 := mul_lt_mul_left' ha b\n    _ = b := mul_one b\n    _ ≤ c := hbc\n    \n#align mul_lt_of_le_of_lt_one mul_lt_of_le_of_lt_one\n-/\n\n",
 "mul_lt_mul_right'":
 "#print mul_lt_mul_right' /-\n@[to_additive add_lt_add_right]\ntheorem mul_lt_mul_right' [covariant_class α α (swap (· * ·)) (· < ·)] {b c : α} (bc : b < c) (a : α) : b * a < c * a :=\n  covariant_class.elim a bc\n#align mul_lt_mul_right' mul_lt_mul_right'\n-/\n\n",
 "mul_lt_mul_of_lt_of_lt":
 "#print mul_lt_mul_of_lt_of_lt /-\n@[to_additive]\ntheorem mul_lt_mul_of_lt_of_lt [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (swap (· * ·)) (· < ·)]\n    {a b c d : α} (h₁ : a < b) (h₂ : c < d) : a * c < b * d :=\n  calc\n    a * c < a * d := mul_lt_mul_left' h₂ a\n    _ < b * d := mul_lt_mul_right' h₁ d\n    \n#align mul_lt_mul_of_lt_of_lt mul_lt_mul_of_lt_of_lt\n-/\n\n",
 "mul_lt_mul_of_lt_of_le":
 "#print mul_lt_mul_of_lt_of_le /-\n@[to_additive]\ntheorem mul_lt_mul_of_lt_of_le [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (swap (· * ·)) (· < ·)]\n    {a b c d : α} (h₁ : a < b) (h₂ : c ≤ d) : a * c < b * d :=\n  (mul_le_mul_left' h₂ _).trans_lt (mul_lt_mul_right' h₁ d)\n#align mul_lt_mul_of_lt_of_le mul_lt_mul_of_lt_of_le\n-/\n\n",
 "mul_lt_mul_of_le_of_lt":
 "#print mul_lt_mul_of_le_of_lt /-\n@[to_additive]\ntheorem mul_lt_mul_of_le_of_lt [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    {a b c d : α} (h₁ : a ≤ b) (h₂ : c < d) : a * c < b * d :=\n  (mul_le_mul_right' h₁ _).trans_lt (mul_lt_mul_left' h₂ b)\n#align mul_lt_mul_of_le_of_lt mul_lt_mul_of_le_of_lt\n-/\n\n",
 "mul_lt_mul_left'":
 "#print mul_lt_mul_left' /-\n@[to_additive add_lt_add_left]\ntheorem mul_lt_mul_left' [covariant_class α α (· * ·) (· < ·)] {b c : α} (bc : b < c) (a : α) : a * b < a * c :=\n  covariant_class.elim _ bc\n#align mul_lt_mul_left' mul_lt_mul_left'\n-/\n\n",
 "mul_lt_mul_iff_right":
 "#print mul_lt_mul_iff_right /-\n@[simp, to_additive]\ntheorem mul_lt_mul_iff_right [covariant_class α α (swap (· * ·)) (· < ·)]\n    [contravariant_class α α (swap (· * ·)) (· < ·)] (a : α) {b c : α} : b * a < c * a ↔ b < c :=\n  rel_iff_cov α α (swap (· * ·)) (· < ·) a\n#align mul_lt_mul_iff_right mul_lt_mul_iff_right\n-/\n\n",
 "mul_lt_mul_iff_left":
 "#print mul_lt_mul_iff_left /-\n@[simp, to_additive]\ntheorem mul_lt_mul_iff_left [covariant_class α α (· * ·) (· < ·)] [contravariant_class α α (· * ·) (· < ·)] (a : α)\n    {b c : α} : a * b < a * c ↔ b < c :=\n  rel_iff_cov α α (· * ·) (· < ·) a\n#align mul_lt_mul_iff_left mul_lt_mul_iff_left\n-/\n\n",
 "mul_lt_mul":
 "#print Right.mul_lt_mul /-\n/-- Only assumes right strict covariance. -/\n@[to_additive \"Only assumes right strict covariance\"]\ntheorem Right.mul_lt_mul [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (swap (· * ·)) (· < ·)]\n    {a b c d : α} (h₁ : a < b) (h₂ : c < d) : a * c < b * d :=\n  mul_lt_mul_of_lt_of_le h₁ h₂.le\n#align right.mul_lt_mul Right.mul_lt_mul\n-/\n\n",
 "mul_lt_iff_lt_one_right'":
 "#print mul_lt_iff_lt_one_right' /-\n@[simp, to_additive add_lt_iff_neg_right]\ntheorem mul_lt_iff_lt_one_right' [covariant_class α α (swap (· * ·)) (· < ·)]\n    [contravariant_class α α (swap (· * ·)) (· < ·)] {a : α} (b : α) : a * b < b ↔ a < 1 :=\n  iff.trans (by rw [one_mul]) (mul_lt_mul_iff_right b)\n#align mul_lt_iff_lt_one_right' mul_lt_iff_lt_one_right'\n-/\n\n",
 "mul_lt_iff_lt_one_left'":
 "#print mul_lt_iff_lt_one_left' /-\n@[simp, to_additive add_lt_iff_neg_left]\ntheorem mul_lt_iff_lt_one_left' [covariant_class α α (· * ·) (· < ·)] [contravariant_class α α (· * ·) (· < ·)]\n    {a b : α} : a * b < a ↔ b < 1 :=\n  iff.trans (by rw [mul_one]) (mul_lt_mul_iff_left a)\n#align mul_lt_iff_lt_one_left' mul_lt_iff_lt_one_left'\n-/\n\n",
 "mul_left_cancel''":
 "#print mul_left_cancel'' /-\n@[to_additive]\ntheorem mul_left_cancel'' [contravariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (h : a * b = a * c) : b = c :=\n  (le_of_mul_le_mul_left' h.le).antisymm (le_of_mul_le_mul_left' h.ge)\n#align mul_left_cancel'' mul_left_cancel''\n-/\n\n",
 "mul_le_one":
 "#print Right.mul_le_one /-\n/-- Assumes right covariance.\nThe lemma assuming left covariance is `left.mul_le_one`. -/\n@[to_additive \"Assumes right covariance.\\nThe lemma assuming left covariance is `left.add_nonpos`.\"]\ntheorem Right.mul_le_one [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (ha : a ≤ 1) (hb : b ≤ 1) : a * b ≤ 1 :=\n  mul_le_of_le_one_of_le ha hb\n#align right.mul_le_one Right.mul_le_one\n-/\n\n",
 "mul_le_of_mul_le_right":
 "#print mul_le_of_mul_le_right /-\n@[to_additive]\ntheorem mul_le_of_mul_le_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c d : α} (h : a * b ≤ c)\n    (hle : d ≤ a) : d * b ≤ c :=\n  (mul_le_mul_right' hle b).trans h\n#align mul_le_of_mul_le_right mul_le_of_mul_le_right\n-/\n\n",
 "mul_le_of_mul_le_left":
 "#print mul_le_of_mul_le_left /-\n@[to_additive]\ntheorem mul_le_of_mul_le_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c d : α} (h : a * b ≤ c) (hle : d ≤ b) :\n    a * d ≤ c :=\n  @act_rel_of_rel_of_act_rel _ _ _ (· ≤ ·) _ ⟨fun _ _ _ => le_trans⟩ a _ _ _ hle h\n#align mul_le_of_mul_le_left mul_le_of_mul_le_left\n-/\n\n",
 "mul_le_of_le_one_right'":
 "#print mul_le_of_le_one_right' /-\n@[to_additive add_le_of_nonpos_right]\ntheorem mul_le_of_le_one_right' [covariant_class α α (· * ·) (· ≤ ·)] {a b : α} (h : b ≤ 1) : a * b ≤ a :=\n  calc\n    a * b ≤ a * 1 := mul_le_mul_left' h a\n    _ = a := mul_one a\n    \n#align mul_le_of_le_one_right' mul_le_of_le_one_right'\n-/\n\n",
 "mul_le_of_le_one_of_le":
 "#print mul_le_of_le_one_of_le /-\n@[to_additive]\ntheorem mul_le_of_le_one_of_le [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (ha : a ≤ 1) (hbc : b ≤ c) :\n    a * b ≤ c :=\n  calc\n    a * b ≤ 1 * b := mul_le_mul_right' ha b\n    _ = b := one_mul b\n    _ ≤ c := hbc\n    \n#align mul_le_of_le_one_of_le mul_le_of_le_one_of_le\n-/\n\n",
 "mul_le_of_le_one_left'":
 "#print mul_le_of_le_one_left' /-\n@[to_additive add_le_of_nonpos_left]\ntheorem mul_le_of_le_one_left' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (h : b ≤ 1) : b * a ≤ a :=\n  calc\n    b * a ≤ 1 * a := mul_le_mul_right' h a\n    _ = a := one_mul a\n    \n#align mul_le_of_le_one_left' mul_le_of_le_one_left'\n-/\n\n",
 "mul_le_of_le_of_le_one":
 "#print mul_le_of_le_of_le_one /-\n@[to_additive]\ntheorem mul_le_of_le_of_le_one [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (hbc : b ≤ c) (ha : a ≤ 1) :\n    b * a ≤ c :=\n  calc\n    b * a ≤ b * 1 := mul_le_mul_left' ha b\n    _ = b := mul_one b\n    _ ≤ c := hbc\n    \n#align mul_le_of_le_of_le_one mul_le_of_le_of_le_one\n-/\n\n",
 "mul_le_mul_three":
 "#print mul_le_mul_three /-\n@[to_additive]\ntheorem mul_le_mul_three [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    {a b c d e f : α} (h₁ : a ≤ d) (h₂ : b ≤ e) (h₃ : c ≤ f) : a * b * c ≤ d * e * f :=\n  mul_le_mul' (mul_le_mul' h₁ h₂) h₃\n#align mul_le_mul_three mul_le_mul_three\n-/\n\n",
 "mul_le_mul_right'":
 "#print mul_le_mul_right' /-\n/- The prime on this lemma is present only on the multiplicative version.  The unprimed version\nis taken by the analogous lemma for semiring, with an extra non-negativity assumption. -/\n@[to_additive add_le_add_right]\ntheorem mul_le_mul_right' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {b c : α} (bc : b ≤ c) (a : α) : b * a ≤ c * a :=\n  covariant_class.elim a bc\n#align mul_le_mul_right' mul_le_mul_right'\n-/\n\n",
 "mul_le_mul_left'":
 "#print mul_le_mul_left' /-\n/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro, Johannes Hölzl, Damiano Testa,\nYuyang Zhao\n-/\n-- TODO: If possible, uniformize lemma names, taking special care of `'`,\n-- after the `ordered`-refactor is done.\n/- The prime on this lemma is present only on the multiplicative version.  The unprimed version\nis taken by the analogous lemma for semiring, with an extra non-negativity assumption. -/\n@[to_additive add_le_add_left]\ntheorem mul_le_mul_left' [covariant_class α α (· * ·) (· ≤ ·)] {b c : α} (bc : b ≤ c) (a : α) : a * b ≤ a * c :=\n  covariant_class.elim _ bc\n#align mul_le_mul_left' mul_le_mul_left'\n-/\n\n",
 "mul_le_mul_iff_right":
 "#print mul_le_mul_iff_right /-\n@[to_additive]\nprotected theorem mul_le_mul_iff_right [comm_semigroup α] [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α}\n    (ha : MulLECancellable a) : b * a ≤ c * a ↔ b ≤ c := by rw [mul_comm b, mul_comm c, ha.mul_le_mul_iff_left]\n#align mul_le_mul_iff_right mul_le_mul_iff_right\n-/\n\n",
 "mul_le_mul_iff_of_ge":
 "#print mul_le_mul_iff_of_ge /-\n@[to_additive]\ntheorem mul_le_mul_iff_of_ge [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (swap (· * ·)) (· < ·)] {a₁ a₂ b₁ b₂ : α} (ha : a₁ ≤ a₂)\n    (hb : b₁ ≤ b₂) : a₂ * b₂ ≤ a₁ * b₁ ↔ a₁ = a₂ ∧ b₁ = b₂ :=\n  by\n  refine'\n    ⟨fun h => _, by\n      rintro ⟨rfl, rfl⟩\n      rfl⟩\n  simp only [eq_iff_le_not_lt, ha, hb, true_and_iff]\n  refine' ⟨fun ha => h.not_lt _, fun hb => h.not_lt _⟩\n  · exact mul_lt_mul_of_lt_of_le ha hb\n  · exact mul_lt_mul_of_le_of_lt ha hb\n#align mul_le_mul_iff_of_ge mul_le_mul_iff_of_ge\n-/\n\n",
 "mul_le_mul_iff_left":
 "#print mul_le_mul_iff_left /-\n@[to_additive]\nprotected theorem mul_le_mul_iff_left [Mul α] [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α}\n    (ha : MulLECancellable a) : a * b ≤ a * c ↔ b ≤ c :=\n  ⟨fun h => ha h, fun h => mul_le_mul_left' h a⟩\n#align mul_le_mul_iff_left mul_le_mul_iff_left\n-/\n\n",
 "mul_le_mul'":
 "#print mul_le_mul' /-\n@[to_additive add_le_add]\ntheorem mul_le_mul' [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c d : α}\n    (h₁ : a ≤ b) (h₂ : c ≤ d) : a * c ≤ b * d :=\n  (mul_le_mul_left' h₂ _).trans (mul_le_mul_right' h₁ d)\n#align mul_le_mul' mul_le_mul'\n-/\n\n",
 "mul_le_iff_le_one_right'":
 "#print mul_le_iff_le_one_right' /-\n@[simp, to_additive add_le_iff_nonpos_right]\ntheorem mul_le_iff_le_one_right' [covariant_class α α (· * ·) (· ≤ ·)] [contravariant_class α α (· * ·) (· ≤ ·)] (a : α)\n    {b : α} : a * b ≤ a ↔ b ≤ 1 :=\n  iff.trans (by rw [mul_one]) (mul_le_mul_iff_left a)\n#align mul_le_iff_le_one_right' mul_le_iff_le_one_right'\n-/\n\n",
 "mul_le_iff_le_one_right":
 "#print mul_le_iff_le_one_right /-\n@[to_additive]\nprotected theorem mul_le_iff_le_one_right [mul_one_class α] [covariant_class α α (· * ·) (· ≤ ·)] {a b : α}\n    (ha : MulLECancellable a) : a * b ≤ a ↔ b ≤ 1 :=\n  iff.trans (by rw [mul_one]) ha.mul_le_mul_iff_left\n#align mul_le_iff_le_one_right mul_le_iff_le_one_right\n-/\n\n",
 "mul_le_iff_le_one_left'":
 "#print mul_le_iff_le_one_left' /-\n@[simp, to_additive add_le_iff_nonpos_left]\ntheorem mul_le_iff_le_one_left' [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    [contravariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} : a * b ≤ b ↔ a ≤ 1 :=\n  iff.trans (by rw [one_mul]) (mul_le_mul_iff_right b)\n#align mul_le_iff_le_one_left' mul_le_iff_le_one_left'\n-/\n\n",
 "mul_le_iff_le_one_left":
 "#print mul_le_iff_le_one_left /-\n@[to_additive]\nprotected theorem mul_le_iff_le_one_left [comm_monoid α] [covariant_class α α (· * ·) (· ≤ ·)] {a b : α}\n    (ha : MulLECancellable a) : b * a ≤ a ↔ b ≤ 1 := by rw [mul_comm, ha.mul_le_iff_le_one_right]\n#align mul_le_iff_le_one_left mul_le_iff_le_one_left\n-/\n\n",
 "mul_eq_one_iff'":
 "#print mul_eq_one_iff' /-\n@[to_additive]\ntheorem mul_eq_one_iff' [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α}\n    (ha : 1 ≤ a) (hb : 1 ≤ b) : a * b = 1 ↔ a = 1 ∧ b = 1 :=\n  iff.intro\n    (fun hab : a * b = 1 =>\n      have : a ≤ 1 := hab ▸ le_mul_of_le_of_one_le le_rfl hb\n      have : a = 1 := le_antisymm this ha\n      have : b ≤ 1 := hab ▸ le_mul_of_one_le_of_le ha le_rfl\n      have : b = 1 := le_antisymm this hb\n      and.intro ‹a = 1› ‹b = 1›)\n    fun ⟨ha', hb'⟩ => by rw [ha', hb', mul_one]\n#align mul_eq_one_iff' mul_eq_one_iff'\n-/\n\n",
 "mul_eq_mul_iff_eq_and_eq":
 "#print Right.mul_eq_mul_iff_eq_and_eq /-\n@[to_additive]\ntheorem Right.mul_eq_mul_iff_eq_and_eq [covariant_class α α (· * ·) (· ≤ ·)] [contravariant_class α α (· * ·) (· ≤ ·)]\n    [covariant_class α α (swap (· * ·)) (· < ·)] [contravariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c d : α}\n    (hac : a ≤ c) (hbd : b ≤ d) : a * b = c * d ↔ a = c ∧ b = d :=\n  by\n  refine' ⟨fun h => _, fun h => congr_arg₂ (· * ·) h.1 h.2⟩\n  rcases hac.eq_or_lt with (rfl | hac)\n  · exact ⟨rfl, mul_left_cancel'' h⟩\n  rcases eq_or_lt_of_le hbd with (rfl | hbd)\n  · exact ⟨mul_right_cancel'' h, rfl⟩\n  exact ((Right.mul_lt_mul hac hbd).ne h).elim\n#align right.mul_eq_mul_iff_eq_and_eq Right.mul_eq_mul_iff_eq_and_eq\n-/\n\n",
 "mul_const'":
 "#print StrictAntiOn.mul_const' /-\n@[to_additive add_const]\ntheorem StrictAntiOn.mul_const' (hf : strict_anti_on f s) (c : α) : strict_anti_on (fun x => f x * c) s :=\n  fun a ha b hb ab => mul_lt_mul_right' (hf ha hb ab) c\n#align strict_anti_on.mul_const' StrictAntiOn.mul_const'\n-/\n\n",
 "mul_antitone'":
 "#print StrictAntiOn.mul_antitone' /-\n/-- The product of a strictly antitone function and a antitone function is strictly antitone. -/\n@[to_additive add_antitone \"The sum of a strictly antitone function and a antitone function is strictly antitone.\"]\ntheorem StrictAntiOn.mul_antitone' (hf : strict_anti_on f s) (hg : antitone_on g s) :\n    strict_anti_on (fun x => f x * g x) s := fun x hx y hy h => mul_lt_mul_of_lt_of_le (hf hx hy h) (hg hx hy h.le)\n#align strict_anti_on.mul_antitone' StrictAntiOn.mul_antitone'\n-/\n\n",
 "mulLECancellable_one":
 "#print mulLECancellable_one /-\n@[to_additive]\ntheorem mulLECancellable_one [monoid α] [LE α] : MulLECancellable (1 : α) := fun a b => by simpa only [one_mul] using id\n#align mul_le_cancellable_one mulLECancellable_one\n-/\n\n",
 "mul'":
 "#print StrictAntiOn.mul' /-\n/-- The product of two strictly antitone functions is strictly antitone. -/\n@[to_additive add \"The sum of two strictly antitone functions is strictly antitone.\"]\ntheorem StrictAntiOn.mul' [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (swap (· * ·)) (· < ·)]\n    (hf : strict_anti_on f s) (hg : strict_anti_on g s) : strict_anti_on (fun x => f x * g x) s := fun a ha b hb ab =>\n  mul_lt_mul_of_lt_of_lt (hf ha hb ab) (hg ha hb ab)\n#align strict_anti_on.mul' StrictAntiOn.mul'\n-/\n\n",
 "min_le_max_of_mul_le_mul":
 "#print min_le_max_of_mul_le_mul /-\n@[to_additive]\ntheorem min_le_max_of_mul_le_mul (h : a * b ≤ c * d) : min a b ≤ max c d :=\n  by\n  simp_rw [min_le_iff, le_max_iff]\n  contrapose! h\n  exact mul_lt_mul_of_lt_of_lt h.1.1 h.2.2\n#align min_le_max_of_mul_le_mul min_le_max_of_mul_le_mul\n-/\n\n",
 "lt_one_of_mul_lt_right":
 "#print lt_one_of_mul_lt_right /-\n@[to_additive]\ntheorem lt_one_of_mul_lt_right [contravariant_class α α (· * ·) (· < ·)] {a b : α} (h : a * b < a) : b < 1 :=\n  lt_of_mul_lt_mul_left' <| by simpa only [mul_one]\n#align lt_one_of_mul_lt_right lt_one_of_mul_lt_right\n-/\n\n",
 "lt_one_of_mul_lt_left":
 "#print lt_one_of_mul_lt_left /-\n@[to_additive]\ntheorem lt_one_of_mul_lt_left [contravariant_class α α (swap (· * ·)) (· < ·)] {a b : α} (h : a * b < b) : a < 1 :=\n  lt_of_mul_lt_mul_right' <| by simpa only [one_mul]\n#align lt_one_of_mul_lt_left lt_one_of_mul_lt_left\n-/\n\n",
 "lt_of_mul_lt_of_one_le_right":
 "#print lt_of_mul_lt_of_one_le_right /-\n@[to_additive]\ntheorem lt_of_mul_lt_of_one_le_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (h : a * b < c)\n    (hle : 1 ≤ a) : b < c :=\n  (le_mul_of_one_le_left' hle).trans_lt h\n#align lt_of_mul_lt_of_one_le_right lt_of_mul_lt_of_one_le_right\n-/\n\n",
 "lt_of_mul_lt_of_one_le_left":
 "#print lt_of_mul_lt_of_one_le_left /-\n@[to_additive]\ntheorem lt_of_mul_lt_of_one_le_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (h : a * b < c) (hle : 1 ≤ b) :\n    a < c :=\n  (le_mul_of_one_le_right' hle).trans_lt h\n#align lt_of_mul_lt_of_one_le_left lt_of_mul_lt_of_one_le_left\n-/\n\n",
 "lt_of_mul_lt_mul_right'":
 "#print lt_of_mul_lt_mul_right' /-\n@[to_additive lt_of_add_lt_add_right]\ntheorem lt_of_mul_lt_mul_right' [contravariant_class α α (swap (· * ·)) (· < ·)] {a b c : α} (bc : b * a < c * a) :\n    b < c :=\n  contravariant_class.elim a bc\n#align lt_of_mul_lt_mul_right' lt_of_mul_lt_mul_right'\n-/\n\n",
 "lt_of_mul_lt_mul_left'":
 "#print lt_of_mul_lt_mul_left' /-\n@[to_additive lt_of_add_lt_add_left]\ntheorem lt_of_mul_lt_mul_left' [contravariant_class α α (· * ·) (· < ·)] {a b c : α} (bc : a * b < a * c) : b < c :=\n  contravariant_class.elim _ bc\n#align lt_of_mul_lt_mul_left' lt_of_mul_lt_mul_left'\n-/\n\n",
 "lt_of_lt_mul_of_le_one_right":
 "#print lt_of_lt_mul_of_le_one_right /-\n@[to_additive]\ntheorem lt_of_lt_mul_of_le_one_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (h : a < b * c)\n    (hle : b ≤ 1) : a < c :=\n  h.trans_le (mul_le_of_le_one_left' hle)\n#align lt_of_lt_mul_of_le_one_right lt_of_lt_mul_of_le_one_right\n-/\n\n",
 "lt_of_lt_mul_of_le_one_left":
 "#print lt_of_lt_mul_of_le_one_left /-\n@[to_additive]\ntheorem lt_of_lt_mul_of_le_one_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (h : a < b * c) (hle : c ≤ 1) :\n    a < b :=\n  h.trans_le (mul_le_of_le_one_right' hle)\n#align lt_of_lt_mul_of_le_one_left lt_of_lt_mul_of_le_one_left\n-/\n\n",
 "lt_mul_of_one_lt_right'":
 "#print lt_mul_of_one_lt_right' /-\n@[to_additive lt_add_of_pos_right]\ntheorem lt_mul_of_one_lt_right' [covariant_class α α (· * ·) (· < ·)] (a : α) {b : α} (h : 1 < b) : a < a * b :=\n  calc\n    a = a * 1 := (mul_one a).symm\n    _ < a * b := mul_lt_mul_left' h a\n    \n#align lt_mul_of_one_lt_right' lt_mul_of_one_lt_right'\n-/\n\n",
 "lt_mul_of_one_lt_of_lt'":
 "#print lt_mul_of_one_lt_of_lt' /-\n@[to_additive]\ntheorem lt_mul_of_one_lt_of_lt' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (ha : 1 < a) (hbc : b < c) :\n    b < a * c :=\n  lt_mul_of_one_le_of_lt ha.le hbc\n#align lt_mul_of_one_lt_of_lt' lt_mul_of_one_lt_of_lt'\n-/\n\n",
 "lt_mul_of_one_lt_of_lt":
 "#print lt_mul_of_one_lt_of_lt /-\n@[to_additive]\ntheorem lt_mul_of_one_lt_of_lt [covariant_class α α (swap (· * ·)) (· < ·)] {a b c : α} (ha : 1 < a) (hbc : b < c) :\n    b < a * c :=\n  calc\n    b < c := hbc\n    _ = 1 * c := (one_mul c).symm\n    _ < a * c := mul_lt_mul_right' ha c\n    \n#align lt_mul_of_one_lt_of_lt lt_mul_of_one_lt_of_lt\n-/\n\n",
 "lt_mul_of_one_lt_of_le":
 "#print lt_mul_of_one_lt_of_le /-\n@[to_additive]\ntheorem lt_mul_of_one_lt_of_le [covariant_class α α (swap (· * ·)) (· < ·)] {a b c : α} (ha : 1 < a) (hbc : b ≤ c) :\n    b < a * c :=\n  calc\n    b ≤ c := hbc\n    _ = 1 * c := (one_mul c).symm\n    _ < a * c := mul_lt_mul_right' ha c\n    \n#align lt_mul_of_one_lt_of_le lt_mul_of_one_lt_of_le\n-/\n\n",
 "lt_mul_of_one_lt_left'":
 "#print lt_mul_of_one_lt_left' /-\n@[to_additive lt_add_of_pos_left]\ntheorem lt_mul_of_one_lt_left' [covariant_class α α (swap (· * ·)) (· < ·)] (a : α) {b : α} (h : 1 < b) : a < b * a :=\n  calc\n    a = 1 * a := (one_mul a).symm\n    _ < b * a := mul_lt_mul_right' h a\n    \n#align lt_mul_of_one_lt_left' lt_mul_of_one_lt_left'\n-/\n\n",
 "lt_mul_of_one_le_of_lt":
 "#print lt_mul_of_one_le_of_lt /-\n@[to_additive]\ntheorem lt_mul_of_one_le_of_lt [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (ha : 1 ≤ a) (hbc : b < c) :\n    b < a * c :=\n  calc\n    b < c := hbc\n    _ = 1 * c := (one_mul c).symm\n    _ ≤ a * c := mul_le_mul_right' ha c\n    \n#align lt_mul_of_one_le_of_lt lt_mul_of_one_le_of_lt\n-/\n\n",
 "lt_mul_of_lt_of_one_lt'":
 "#print lt_mul_of_lt_of_one_lt' /-\n@[to_additive]\ntheorem lt_mul_of_lt_of_one_lt' [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (hbc : b < c) (ha : 1 < a) :\n    b < c * a :=\n  lt_mul_of_lt_of_one_le hbc ha.le\n#align lt_mul_of_lt_of_one_lt' lt_mul_of_lt_of_one_lt'\n-/\n\n",
 "lt_mul_of_lt_of_one_lt":
 "#print lt_mul_of_lt_of_one_lt /-\n@[to_additive]\ntheorem lt_mul_of_lt_of_one_lt [covariant_class α α (· * ·) (· < ·)] {a b c : α} (hbc : b < c) (ha : 1 < a) :\n    b < c * a :=\n  calc\n    b < c := hbc\n    _ = c * 1 := (mul_one c).symm\n    _ < c * a := mul_lt_mul_left' ha c\n    \n#align lt_mul_of_lt_of_one_lt lt_mul_of_lt_of_one_lt\n-/\n\n",
 "lt_mul_of_lt_of_one_le":
 "#print lt_mul_of_lt_of_one_le /-\n@[to_additive]\ntheorem lt_mul_of_lt_of_one_le [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (hbc : b < c) (ha : 1 ≤ a) :\n    b < c * a :=\n  calc\n    b < c := hbc\n    _ = c * 1 := (mul_one c).symm\n    _ ≤ c * a := mul_le_mul_left' ha c\n    \n#align lt_mul_of_lt_of_one_le lt_mul_of_lt_of_one_le\n-/\n\n",
 "lt_mul_of_lt_mul_right":
 "#print lt_mul_of_lt_mul_right /-\n@[to_additive]\ntheorem lt_mul_of_lt_mul_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c d : α} (h : a < b * c)\n    (hle : b ≤ d) : a < d * c :=\n  h.trans_le (mul_le_mul_right' hle c)\n#align lt_mul_of_lt_mul_right lt_mul_of_lt_mul_right\n-/\n\n",
 "lt_mul_of_lt_mul_left":
 "#print lt_mul_of_lt_mul_left /-\n@[to_additive]\ntheorem lt_mul_of_lt_mul_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c d : α} (h : a < b * c) (hle : c ≤ d) :\n    a < b * d :=\n  h.trans_le (mul_le_mul_left' hle b)\n#align lt_mul_of_lt_mul_left lt_mul_of_lt_mul_left\n-/\n\n",
 "lt_mul_of_le_of_one_lt":
 "#print lt_mul_of_le_of_one_lt /-\n@[to_additive]\ntheorem lt_mul_of_le_of_one_lt [covariant_class α α (· * ·) (· < ·)] {a b c : α} (hbc : b ≤ c) (ha : 1 < a) :\n    b < c * a :=\n  calc\n    b ≤ c := hbc\n    _ = c * 1 := (mul_one c).symm\n    _ < c * a := mul_lt_mul_left' ha c\n    \n#align lt_mul_of_le_of_one_lt lt_mul_of_le_of_one_lt\n-/\n\n",
 "lt_mul_iff_one_lt_right'":
 "#print lt_mul_iff_one_lt_right' /-\n@[simp, to_additive lt_add_iff_pos_right]\ntheorem lt_mul_iff_one_lt_right' [covariant_class α α (· * ·) (· < ·)] [contravariant_class α α (· * ·) (· < ·)] (a : α)\n    {b : α} : a < a * b ↔ 1 < b :=\n  iff.trans (by rw [mul_one]) (mul_lt_mul_iff_left a)\n#align lt_mul_iff_one_lt_right' lt_mul_iff_one_lt_right'\n-/\n\n",
 "lt_mul_iff_one_lt_left'":
 "#print lt_mul_iff_one_lt_left' /-\n@[simp, to_additive lt_add_iff_pos_left]\ntheorem lt_mul_iff_one_lt_left' [covariant_class α α (swap (· * ·)) (· < ·)]\n    [contravariant_class α α (swap (· * ·)) (· < ·)] (a : α) {b : α} : a < b * a ↔ 1 < b :=\n  iff.trans (by rw [one_mul]) (mul_lt_mul_iff_right a)\n#align lt_mul_iff_one_lt_left' lt_mul_iff_one_lt_left'\n-/\n\n",
 "le_one_of_mul_le_right":
 "#print le_one_of_mul_le_right /-\n@[to_additive]\ntheorem le_one_of_mul_le_right [contravariant_class α α (· * ·) (· ≤ ·)] {a b : α} (h : a * b ≤ a) : b ≤ 1 :=\n  le_of_mul_le_mul_left' <| by simpa only [mul_one]\n#align le_one_of_mul_le_right le_one_of_mul_le_right\n-/\n\n",
 "le_one_of_mul_le_left":
 "#print le_one_of_mul_le_left /-\n@[to_additive]\ntheorem le_one_of_mul_le_left [contravariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (h : a * b ≤ b) : a ≤ 1 :=\n  le_of_mul_le_mul_right' <| by simpa only [one_mul]\n#align le_one_of_mul_le_left le_one_of_mul_le_left\n-/\n\n",
 "le_of_mul_le_of_one_le_right":
 "#print le_of_mul_le_of_one_le_right /-\n@[to_additive]\ntheorem le_of_mul_le_of_one_le_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (h : a * b ≤ c)\n    (hle : 1 ≤ a) : b ≤ c :=\n  (le_mul_of_one_le_left' hle).trans h\n#align le_of_mul_le_of_one_le_right le_of_mul_le_of_one_le_right\n-/\n\n",
 "le_of_mul_le_of_one_le_left":
 "#print le_of_mul_le_of_one_le_left /-\n@[to_additive]\ntheorem le_of_mul_le_of_one_le_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (h : a * b ≤ c) (hle : 1 ≤ b) :\n    a ≤ c :=\n  (le_mul_of_one_le_right' hle).trans h\n#align le_of_mul_le_of_one_le_left le_of_mul_le_of_one_le_left\n-/\n\n",
 "le_of_mul_le_mul_right'":
 "#print le_of_mul_le_mul_right' /-\n@[to_additive le_of_add_le_add_right]\ntheorem le_of_mul_le_mul_right' [contravariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (bc : b * a ≤ c * a) :\n    b ≤ c :=\n  contravariant_class.elim a bc\n#align le_of_mul_le_mul_right' le_of_mul_le_mul_right'\n-/\n\n",
 "le_of_mul_le_mul_left'":
 "#print le_of_mul_le_mul_left' /-\n@[to_additive le_of_add_le_add_left]\ntheorem le_of_mul_le_mul_left' [contravariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (bc : a * b ≤ a * c) : b ≤ c :=\n  contravariant_class.elim _ bc\n#align le_of_mul_le_mul_left' le_of_mul_le_mul_left'\n-/\n\n",
 "le_of_le_mul_of_le_one_right":
 "#print le_of_le_mul_of_le_one_right /-\n@[to_additive]\ntheorem le_of_le_mul_of_le_one_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (h : a ≤ b * c)\n    (hle : b ≤ 1) : a ≤ c :=\n  h.trans (mul_le_of_le_one_left' hle)\n#align le_of_le_mul_of_le_one_right le_of_le_mul_of_le_one_right\n-/\n\n",
 "le_of_le_mul_of_le_one_left":
 "#print le_of_le_mul_of_le_one_left /-\n@[to_additive]\ntheorem le_of_le_mul_of_le_one_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (h : a ≤ b * c) (hle : c ≤ 1) :\n    a ≤ b :=\n  h.trans (mul_le_of_le_one_right' hle)\n#align le_of_le_mul_of_le_one_left le_of_le_mul_of_le_one_left\n-/\n\n",
 "le_mul_of_one_le_right'":
 "#print le_mul_of_one_le_right' /-\n-- using one\n@[to_additive le_add_of_nonneg_right]\ntheorem le_mul_of_one_le_right' [covariant_class α α (· * ·) (· ≤ ·)] {a b : α} (h : 1 ≤ b) : a ≤ a * b :=\n  calc\n    a = a * 1 := (mul_one a).symm\n    _ ≤ a * b := mul_le_mul_left' h a\n    \n#align le_mul_of_one_le_right' le_mul_of_one_le_right'\n-/\n\n",
 "le_mul_of_one_le_of_le":
 "#print le_mul_of_one_le_of_le /-\n@[to_additive]\ntheorem le_mul_of_one_le_of_le [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c : α} (ha : 1 ≤ a) (hbc : b ≤ c) :\n    b ≤ a * c :=\n  calc\n    b ≤ c := hbc\n    _ = 1 * c := (one_mul c).symm\n    _ ≤ a * c := mul_le_mul_right' ha c\n    \n#align le_mul_of_one_le_of_le le_mul_of_one_le_of_le\n-/\n\n",
 "le_mul_of_one_le_left'":
 "#print le_mul_of_one_le_left' /-\n@[to_additive le_add_of_nonneg_left]\ntheorem le_mul_of_one_le_left' [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b : α} (h : 1 ≤ b) : a ≤ b * a :=\n  calc\n    a = 1 * a := (one_mul a).symm\n    _ ≤ b * a := mul_le_mul_right' h a\n    \n#align le_mul_of_one_le_left' le_mul_of_one_le_left'\n-/\n\n",
 "le_mul_of_le_of_one_le":
 "#print le_mul_of_le_of_one_le /-\n@[to_additive]\ntheorem le_mul_of_le_of_one_le [covariant_class α α (· * ·) (· ≤ ·)] {a b c : α} (hbc : b ≤ c) (ha : 1 ≤ a) :\n    b ≤ c * a :=\n  calc\n    b ≤ c := hbc\n    _ = c * 1 := (mul_one c).symm\n    _ ≤ c * a := mul_le_mul_left' ha c\n    \n#align le_mul_of_le_of_one_le le_mul_of_le_of_one_le\n-/\n\n",
 "le_mul_of_le_mul_right":
 "#print le_mul_of_le_mul_right /-\n@[to_additive]\ntheorem le_mul_of_le_mul_right [covariant_class α α (swap (· * ·)) (· ≤ ·)] {a b c d : α} (h : a ≤ b * c)\n    (hle : b ≤ d) : a ≤ d * c :=\n  h.trans (mul_le_mul_right' hle c)\n#align le_mul_of_le_mul_right le_mul_of_le_mul_right\n-/\n\n",
 "le_mul_of_le_mul_left":
 "#print le_mul_of_le_mul_left /-\n@[to_additive]\ntheorem le_mul_of_le_mul_left [covariant_class α α (· * ·) (· ≤ ·)] {a b c d : α} (h : a ≤ b * c) (hle : c ≤ d) :\n    a ≤ b * d :=\n  @rel_act_of_rel_of_rel_act _ _ _ (· ≤ ·) _ ⟨fun _ _ _ => le_trans⟩ b _ _ _ hle h\n#align le_mul_of_le_mul_left le_mul_of_le_mul_left\n-/\n\n",
 "le_mul_iff_one_le_right'":
 "#print le_mul_iff_one_le_right' /-\n@[simp, to_additive le_add_iff_nonneg_right]\ntheorem le_mul_iff_one_le_right' [covariant_class α α (· * ·) (· ≤ ·)] [contravariant_class α α (· * ·) (· ≤ ·)] (a : α)\n    {b : α} : a ≤ a * b ↔ 1 ≤ b :=\n  iff.trans (by rw [mul_one]) (mul_le_mul_iff_left a)\n#align le_mul_iff_one_le_right' le_mul_iff_one_le_right'\n-/\n\n",
 "le_mul_iff_one_le_right":
 "#print le_mul_iff_one_le_right /-\n@[to_additive]\nprotected theorem le_mul_iff_one_le_right [mul_one_class α] [covariant_class α α (· * ·) (· ≤ ·)] {a b : α}\n    (ha : MulLECancellable a) : a ≤ a * b ↔ 1 ≤ b :=\n  iff.trans (by rw [mul_one]) ha.mul_le_mul_iff_left\n#align le_mul_iff_one_le_right le_mul_iff_one_le_right\n-/\n\n",
 "le_mul_iff_one_le_left'":
 "#print le_mul_iff_one_le_left' /-\n@[simp, to_additive le_add_iff_nonneg_left]\ntheorem le_mul_iff_one_le_left' [covariant_class α α (swap (· * ·)) (· ≤ ·)]\n    [contravariant_class α α (swap (· * ·)) (· ≤ ·)] (a : α) {b : α} : a ≤ b * a ↔ 1 ≤ b :=\n  iff.trans (by rw [one_mul]) (mul_le_mul_iff_right a)\n#align le_mul_iff_one_le_left' le_mul_iff_one_le_left'\n-/\n\n",
 "le_mul_iff_one_le_left":
 "#print le_mul_iff_one_le_left /-\n@[to_additive]\nprotected theorem le_mul_iff_one_le_left [comm_monoid α] [covariant_class α α (· * ·) (· ≤ ·)] {a b : α}\n    (ha : MulLECancellable a) : a ≤ b * a ↔ 1 ≤ b := by rw [mul_comm, ha.le_mul_iff_one_le_right]\n#align le_mul_iff_one_le_left le_mul_iff_one_le_left\n-/\n\n",
 "injective_left":
 "@[to_additive]\nprotected theorem injective_left [comm_semigroup α] [partial_order α] {a : α} (ha : MulLECancellable a) :\n    injective (· * a) := fun b c h => ha.injective <| by rwa [mul_comm a, mul_comm a]\n#align injective_left injective_left\n\n",
 "injective":
 "@[to_additive]\nprotected theorem injective [Mul α] [partial_order α] {a : α} (ha : MulLECancellable a) : injective ((· * ·) a) :=\n  fun b c h => le_antisymm (ha h.le) (ha h.ge)\n#align injective injective\n\n",
 "inj_left":
 "@[to_additive]\nprotected theorem inj_left [comm_semigroup α] [partial_order α] {a b c : α} (hc : MulLECancellable c) :\n    a * c = b * c ↔ a = b :=\n  hc.injective_left.eq_iff\n#align inj_left inj_left\n\n",
 "inj":
 "@[to_additive]\nprotected theorem inj [Mul α] [partial_order α] {a b c : α} (ha : MulLECancellable a) : a * b = a * c ↔ b = c :=\n  ha.injective.eq_iff\n#align inj inj\n\n",
 "exists_square_le":
 "#print exists_square_le /-\ntheorem exists_square_le [covariant_class α α (· * ·) (· < ·)] (a : α) : ∃ b : α, b * b ≤ a :=\n  by\n  by_cases h : a < 1\n  · use a\n    have : a * a < a * 1 := mul_lt_mul_left' h a\n    rw [mul_one] at this\n    exact le_of_lt this\n  · use 1\n    push_neg  at h\n    rwa [mul_one]\n#align exists_square_le exists_square_le\n-/\n\n",
 "eq_one_of_one_le_mul_right":
 "#print eq_one_of_one_le_mul_right /-\n@[to_additive eq_zero_of_add_nonneg_right]\ntheorem eq_one_of_one_le_mul_right (ha : a ≤ 1) (hb : b ≤ 1) (hab : 1 ≤ a * b) : b = 1 :=\n  hb.eq_of_not_lt fun h => hab.not_lt <| Right.mul_lt_one_of_le_of_lt ha h\n#align eq_one_of_one_le_mul_right eq_one_of_one_le_mul_right\n-/\n\n",
 "eq_one_of_one_le_mul_left":
 "#print eq_one_of_one_le_mul_left /-\n@[to_additive eq_zero_of_add_nonneg_left]\ntheorem eq_one_of_one_le_mul_left (ha : a ≤ 1) (hb : b ≤ 1) (hab : 1 ≤ a * b) : a = 1 :=\n  ha.eq_of_not_lt fun h => hab.not_lt <| mul_lt_one_of_lt_of_le h hb\n#align eq_one_of_one_le_mul_left eq_one_of_one_le_mul_left\n-/\n\n",
 "eq_one_of_mul_le_one_right":
 "#print eq_one_of_mul_le_one_right /-\n@[to_additive]\ntheorem eq_one_of_mul_le_one_right (ha : 1 ≤ a) (hb : 1 ≤ b) (hab : a * b ≤ 1) : b = 1 :=\n  hb.eq_of_not_gt fun h => hab.not_lt <| Right.one_lt_mul_of_le_of_lt ha h\n#align eq_one_of_mul_le_one_right eq_one_of_mul_le_one_right\n-/\n\n",
 "eq_one_of_mul_le_one_left":
 "#print eq_one_of_mul_le_one_left /-\n@[to_additive]\ntheorem eq_one_of_mul_le_one_left (ha : 1 ≤ a) (hb : 1 ≤ b) (hab : a * b ≤ 1) : a = 1 :=\n  ha.eq_of_not_gt fun h => hab.not_lt <| one_lt_mul_of_lt_of_le' h hb\n#align eq_one_of_mul_le_one_left eq_one_of_mul_le_one_left\n-/\n\n",
 "const_mul'":
 "#print StrictAntiOn.const_mul' /-\n@[to_additive const_add]\ntheorem StrictAntiOn.const_mul' (hf : strict_anti_on f s) (c : α) : strict_anti_on (fun x => c * f x) s :=\n  fun a ha b hb ab => mul_lt_mul_left' (hf ha hb ab) c\n#align strict_anti_on.const_mul' StrictAntiOn.const_mul'\n-/\n\n",
 "cmp_mul_right'":
 "#print cmp_mul_right' /-\n@[simp, to_additive cmp_add_right]\ntheorem cmp_mul_right' {α : Type _} [Mul α] [linear_order α] [covariant_class α α (swap (· * ·)) (· < ·)] (a b c : α) :\n    cmp (a * c) (b * c) = cmp a b :=\n  (strictMono_id.mul_const' c).cmp_map_eq a b\n#align cmp_mul_right' cmp_mul_right'\n-/\n\n",
 "cmp_mul_left'":
 "#print cmp_mul_left' /-\n@[simp, to_additive cmp_add_left]\ntheorem cmp_mul_left' {α : Type _} [Mul α] [linear_order α] [covariant_class α α (· * ·) (· < ·)] (a b c : α) :\n    cmp (a * b) (a * c) = cmp b c :=\n  (strictMono_id.const_mul' a).cmp_map_eq b c\n#align cmp_mul_left' cmp_mul_left'\n-/\n\n",
 "bit0_strict_mono":
 "#print bit0_strict_mono /-\ntheorem bit0_strict_mono [covariant_class α α (· + ·) (· < ·)] [covariant_class α α (swap (· + ·)) (· < ·)] :\n    strict_mono (bit0 : α → α) := fun a b h => add_lt_add h h\n#align bit0_strict_mono bit0_strict_mono\n-/\n\n",
 "bit0_mono":
 "#print bit0_mono /-\ntheorem bit0_mono [covariant_class α α (· + ·) (· ≤ ·)] [covariant_class α α (swap (· + ·)) (· ≤ ·)] :\n    monotone (bit0 : α → α) := fun a b h => add_le_add h h\n#align bit0_mono bit0_mono\n-/\n\n",
 "MulLECancellable":
 "#print Contravariant.MulLECancellable /-\n@[to_additive]\ntheorem Contravariant.MulLECancellable [Mul α] [LE α] [contravariant_class α α (· * ·) (· ≤ ·)] {a : α} :\n    MulLECancellable a := fun b c => le_of_mul_le_mul_left'\n#align contravariant.mul_le_cancellable Contravariant.MulLECancellable\n-/\n\n"}