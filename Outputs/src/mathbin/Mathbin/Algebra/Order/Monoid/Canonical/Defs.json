{"self_le_mul_right":
 "#print self_le_mul_right /-\n@[to_additive]\ntheorem self_le_mul_right (a b : α) : a ≤ a * b :=\n  le_self_mul\n#align self_le_mul_right self_le_mul_right\n#align self_le_add_right self_le_add_right\n-/\n\n",
 "self_le_mul_left":
 "#print self_le_mul_left /-\n@[to_additive]\ntheorem self_le_mul_left (a b : α) : a ≤ b * a :=\n  le_mul_self\n#align self_le_mul_left self_le_mul_left\n#align self_le_add_left self_le_add_left\n-/\n\n",
 "pos_of_gt":
 "#print pos_of_gt /-\ntheorem pos_of_gt {M : Type _} [CanonicallyOrderedAddMonoid M] {n m : M} (h : n < m) : 0 < m :=\n  lt_of_le_of_lt (zero_le _) h\n#align pos_of_gt pos_of_gt\n-/\n\n",
 "pos":
 "theorem pos {M} (a : M) [CanonicallyOrderedAddMonoid M] [NeZero a] : 0 < a :=\n  (zero_le a).lt_of_ne <| ne_zero.out.symm\n#align pos pos\n\n",
 "one_min":
 "#print one_min /-\n@[simp, to_additive]\ntheorem one_min (a : α) : min 1 a = 1 :=\n  min_eq_left (one_le a)\n#align one_min one_min\n#align zero_min zero_min\n-/\n\n",
 "one_lt_mul_iff":
 "#print one_lt_mul_iff /-\n@[simp, to_additive add_pos_iff]\ntheorem one_lt_mul_iff : 1 < a * b ↔ 1 < a ∨ 1 < b := by\n  simp only [one_lt_iff_ne_one, ne.def, mul_eq_one_iff, not_and_or]\n#align one_lt_mul_iff one_lt_mul_iff\n#align add_pos_iff add_pos_iff\n-/\n\n",
 "one_lt_iff_ne_one":
 "#print one_lt_iff_ne_one /-\n@[to_additive]\ntheorem one_lt_iff_ne_one : 1 < a ↔ a ≠ 1 :=\n  (one_le a).lt_iff_ne.trans ne_comm\n#align one_lt_iff_ne_one one_lt_iff_ne_one\n#align pos_iff_ne_zero pos_iff_ne_zero\n-/\n\n",
 "one_le":
 "#print one_le /-\n@[simp, to_additive zero_le]\ntheorem one_le (a : α) : 1 ≤ a :=\n  le_iff_exists_mul.mpr ⟨a, (one_mul _).symm⟩\n#align one_le one_le\n#align zero_le zero_le\n-/\n\n",
 "of_gt":
 "theorem of_gt {M} [CanonicallyOrderedAddMonoid M] {x y : M} (h : x < y) : NeZero y :=\n  of_pos <| pos_of_gt h\n#align of_gt of_gt\n\n",
 "mul_eq_one_iff":
 "#print mul_eq_one_iff /-\n--TODO: This is a special case of `mul_eq_one`. We need the instance\n-- `canonically_ordered_monoid α → unique αˣ`\n@[simp, to_additive]\ntheorem mul_eq_one_iff : a * b = 1 ↔ a = 1 ∧ b = 1 :=\n  mul_eq_one_iff' (one_le _) (one_le _)\n#align mul_eq_one_iff mul_eq_one_iff\n#align add_eq_zero_iff add_eq_zero_iff\n-/\n\n",
 "min_one":
 "#print min_one /-\n@[simp, to_additive]\ntheorem min_one (a : α) : min a 1 = 1 :=\n  min_eq_right (one_le a)\n#align min_one min_one\n#align min_zero min_zero\n-/\n\n",
 "min_mul_distrib'":
 "#print min_mul_distrib' /-\n@[to_additive]\ntheorem min_mul_distrib' (a b c : α) : min (a * b) c = min (min a c * min b c) c := by\n  simpa [min_comm _ c] using min_mul_distrib c a b\n#align min_mul_distrib' min_mul_distrib'\n#align min_add_distrib' min_add_distrib'\n-/\n\n",
 "min_mul_distrib":
 "#print min_mul_distrib /-\n-- 1 < p is still an often-used `fact`, due to `nat.prime` implying it, and it implying `nontrivial`\n-- on `zmod`'s ring structure. We cannot just set this to be any `x < y`, else that becomes a\n-- metavariable and it will hugely slow down typeclass inference.\n-- see Note [lower instance priority]\n@[to_additive]\ntheorem min_mul_distrib (a b c : α) : min a (b * c) = min a (min a b * min a c) :=\n  by\n  cases' le_total a b with hb hb\n  · simp [hb, le_mul_right]\n  · cases' le_total a c with hc hc\n    · simp [hc, le_mul_left]\n    · simp [hb, hc]\n#align min_mul_distrib min_mul_distrib\n#align min_add_distrib min_add_distrib\n-/\n\n",
 "lt_iff_exists_mul":
 "#print lt_iff_exists_mul /-\n@[to_additive]\ntheorem lt_iff_exists_mul [CovariantClass α α (· * ·) (· < ·)] : a < b ↔ ∃ c > 1, b = a * c :=\n  by\n  simp_rw [lt_iff_le_and_ne, and_comm', le_iff_exists_mul, ← exists_and_left, exists_prop]\n  apply exists_congr; intro c\n  rw [and_congr_left_iff, gt_iff_lt]; rintro rfl\n  constructor\n  · rw [one_lt_iff_ne_one]\n    apply mt\n    rintro rfl\n    rw [mul_one]\n  · rw [← (self_le_mul_right a c).lt_iff_ne]\n    apply lt_mul_of_one_lt_right'\n#align lt_iff_exists_mul lt_iff_exists_mul\n#align lt_iff_exists_add lt_iff_exists_add\n-/\n\n",
 "le_self_mul":
 "#print le_self_mul /-\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\n@[to_additive]\ntheorem le_self_mul : a ≤ a * c :=\n  canonically_ordered_monoid.le_self_mul _ _\n#align le_self_mul le_self_mul\n#align le_self_add le_self_add\n-/\n\n",
 "le_one_iff_eq_one":
 "#print le_one_iff_eq_one /-\n@[simp, to_additive]\ntheorem le_one_iff_eq_one : a ≤ 1 ↔ a = 1 :=\n  (one_le a).le_iff_eq\n#align le_one_iff_eq_one le_one_iff_eq_one\n#align nonpos_iff_eq_zero nonpos_iff_eq_zero\n-/\n\n",
 "le_of_mul_le_right":
 "#print le_of_mul_le_right /-\n@[to_additive]\ntheorem le_of_mul_le_right : a * b ≤ c → b ≤ c :=\n  le_mul_self.trans\n#align le_of_mul_le_right le_of_mul_le_right\n#align le_of_add_le_right le_of_add_le_right\n-/\n\n",
 "le_of_mul_le_left":
 "#print le_of_mul_le_left /-\n@[to_additive]\ntheorem le_of_mul_le_left : a * b ≤ c → a ≤ c :=\n  le_self_mul.trans\n#align le_of_mul_le_left le_of_mul_le_left\n#align le_of_add_le_left le_of_add_le_left\n-/\n\n",
 "le_of_forall_one_lt_lt_mul'":
 "#print le_of_forall_one_lt_lt_mul' /-\n@[to_additive]\ntheorem le_of_forall_one_lt_lt_mul' (h : ∀ ε : α, 1 < ε → a < b * ε) : a ≤ b :=\n  le_of_forall_one_lt_le_mul fun ε hε => (h _ hε).le\n#align le_of_forall_one_lt_lt_mul' le_of_forall_one_lt_lt_mul'\n#align le_of_forall_pos_lt_add' le_of_forall_pos_lt_add'\n-/\n\n",
 "le_of_forall_one_lt_le_mul":
 "#print le_of_forall_one_lt_le_mul /-\n@[to_additive]\ntheorem le_of_forall_one_lt_le_mul (h : ∀ ε : α, 1 < ε → a ≤ b * ε) : a ≤ b :=\n  le_of_forall_le_of_dense fun x hxb =>\n    by\n    obtain ⟨ε, rfl⟩ := exists_mul_of_le hxb.le\n    exact h _ ((lt_mul_iff_one_lt_right' b).1 hxb)\n#align le_of_forall_one_lt_le_mul le_of_forall_one_lt_le_mul\n#align le_of_forall_pos_le_add le_of_forall_pos_le_add\n-/\n\n",
 "le_mul_self":
 "#print le_mul_self /-\n@[to_additive]\ntheorem le_mul_self : a ≤ b * a := by\n  rw [mul_comm]\n  exact le_self_mul\n#align le_mul_self le_mul_self\n#align le_add_self le_add_self\n-/\n\n",
 "le_mul_right":
 "#print le_mul_right /-\n@[to_additive]\ntheorem le_mul_right (h : a ≤ b) : a ≤ b * c :=\n  calc\n    a = a * 1 := by simp\n    _ ≤ b * c := mul_le_mul' h (one_le _)\n    \n#align le_mul_right le_mul_right\n#align le_add_right le_add_right\n-/\n\n",
 "le_mul_of_le_right":
 "#print le_mul_of_le_right /-\n@[to_additive]\ntheorem le_mul_of_le_right : a ≤ c → a ≤ b * c :=\n  le_mul_self.trans'\n#align le_mul_of_le_right le_mul_of_le_right\n#align le_add_of_le_right le_add_of_le_right\n-/\n\n",
 "le_mul_of_le_left":
 "#print le_mul_of_le_left /-\n@[to_additive]\ntheorem le_mul_of_le_left : a ≤ b → a ≤ b * c :=\n  le_self_mul.trans'\n#align le_mul_of_le_left le_mul_of_le_left\n#align le_add_of_le_left le_add_of_le_left\n-/\n\n",
 "le_mul_left":
 "#print le_mul_left /-\n@[to_additive]\ntheorem le_mul_left (h : a ≤ c) : a ≤ b * c :=\n  calc\n    a = 1 * a := by simp\n    _ ≤ b * c := mul_le_mul' (one_le _) h\n    \n#align le_mul_left le_mul_left\n#align le_add_left le_add_left\n-/\n\n",
 "le_iff_forall_one_lt_lt_mul'":
 "#print le_iff_forall_one_lt_lt_mul' /-\n@[to_additive]\ntheorem le_iff_forall_one_lt_lt_mul' : a ≤ b ↔ ∀ ε, 1 < ε → a < b * ε :=\n  ⟨fun h ε => lt_mul_of_le_of_one_lt h, le_of_forall_one_lt_lt_mul'⟩\n#align le_iff_forall_one_lt_lt_mul' le_iff_forall_one_lt_lt_mul'\n#align le_iff_forall_pos_lt_add' le_iff_forall_pos_lt_add'\n-/\n\n",
 "le_iff_exists_mul'":
 "#print le_iff_exists_mul' /-\n@[to_additive]\ntheorem le_iff_exists_mul' : a ≤ b ↔ ∃ c, b = c * a := by simpa only [mul_comm _ a] using le_iff_exists_mul\n#align le_iff_exists_mul' le_iff_exists_mul'\n#align le_iff_exists_add' le_iff_exists_add'\n-/\n\n",
 "le_iff_exists_mul":
 "#print le_iff_exists_mul /-\n@[to_additive]\ntheorem le_iff_exists_mul : a ≤ b ↔ ∃ c, b = a * c :=\n  ⟨exists_mul_of_le, by\n    rintro ⟨c, rfl⟩\n    exact le_self_mul⟩\n#align le_iff_exists_mul le_iff_exists_mul\n#align le_iff_exists_add le_iff_exists_add\n-/\n\n",
 "exists_one_lt_mul_of_lt'":
 "#print exists_one_lt_mul_of_lt' /-\n/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro, Johannes Hölzl\n-/\n-- See note [lower instance priority]\n@[to_additive]\ntheorem exists_one_lt_mul_of_lt' (h : a < b) : ∃ c, 1 < c ∧ a * c = b :=\n  by\n  obtain ⟨c, rfl⟩ := exists_mul_of_le h.le\n  exact ⟨c, one_lt_of_lt_mul_right h, rfl⟩\n#align exists_one_lt_mul_of_lt' exists_one_lt_mul_of_lt'\n#align exists_pos_add_of_lt' exists_pos_add_of_lt'\n-/\n\n",
 "exists_one_lt_mul_of_lt":
 "#print exists_one_lt_mul_of_lt /-\n@[to_additive]\ntheorem exists_one_lt_mul_of_lt (h : a < b) : ∃ (c : _)(hc : 1 < c), a * c = b :=\n  by\n  obtain ⟨c, hc⟩ := le_iff_exists_mul.1 h.le\n  refine' ⟨c, one_lt_iff_ne_one.2 _, hc.symm⟩\n  rintro rfl\n  simpa [hc, lt_irrefl] using h\n#align exists_one_lt_mul_of_lt exists_one_lt_mul_of_lt\n#align exists_pos_add_of_lt exists_pos_add_of_lt\n-/\n\n",
 "eq_one_or_one_lt":
 "#print eq_one_or_one_lt /-\n@[to_additive]\ntheorem eq_one_or_one_lt : a = 1 ∨ 1 < a :=\n  (one_le a).eq_or_lt.imp_left Eq.symm\n#align eq_one_or_one_lt eq_one_or_one_lt\n#align eq_zero_or_pos eq_zero_or_pos\n-/\n\n",
 "bot_eq_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print bot_eq_one' /-\n/-- In a linearly ordered monoid, we are happy for `bot_eq_one` to be a `@[simp]` lemma. -/\n@[simp, to_additive \"In a linearly ordered monoid, we are happy for `bot_eq_zero` to be a `@[simp]` lemma\"]\ntheorem bot_eq_one' : («expr⊥» : α) = 1 :=\n  bot_eq_one\n#align bot_eq_one' bot_eq_one'\n#align bot_eq_zero' bot_eq_zero'\n-/\n\n",
 "bot_eq_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n#print bot_eq_one /-\n@[to_additive]\ntheorem bot_eq_one : («expr⊥» : α) = 1 :=\n  le_antisymm bot_le (one_le («expr⊥»))\n#align bot_eq_one bot_eq_one\n#align bot_eq_zero bot_eq_zero\n-/\n\n"}