{"mul_lt_mul_iff_of_le_of_le":
 "#print mul_lt_mul_iff_of_le_of_le /-\n@[to_additive]\ntheorem mul_lt_mul_iff_of_le_of_le [covariant_class α α (function.swap (· * ·)) (· < ·)]\n    [covariant_class α α (· * ·) (· < ·)] [covariant_class α α (function.swap (· * ·)) (· ≤ ·)] {a b c d : α}\n    (ac : a ≤ c) (bd : b ≤ d) : a * b < c * d ↔ a < c ∨ b < d :=\n  by\n  refine' ⟨lt_or_lt_of_mul_lt_mul, fun h => _⟩\n  cases' h with ha hb\n  · exact mul_lt_mul_of_lt_of_le ha bd\n  · exact mul_lt_mul_of_le_of_lt ac hb\n#align mul_lt_mul_iff_of_le_of_le mul_lt_mul_iff_of_le_of_le\n-/\n\n",
 "min_mul_mul_right":
 "#print min_mul_mul_right /-\n@[to_additive]\ntheorem min_mul_mul_right (a b c : α) : min (a * c) (b * c) = min a b * c :=\n  (monotone_id.mul_const' c).map_min.symm\n#align min_mul_mul_right min_mul_mul_right\n-/\n\n",
 "min_mul_mul_left":
 "#print min_mul_mul_left /-\n@[to_additive]\ntheorem min_mul_mul_left (a b c : α) : min (a * b) (a * c) = a * min b c :=\n  (monotone_id.const_mul' a).map_min.symm\n#align min_mul_mul_left min_mul_mul_left\n-/\n\n",
 "min_mul_max":
 "#print min_mul_max /-\n@[to_additive]\ntheorem min_mul_max [linear_order α] [comm_semigroup α] (n m : α) : min n m * max n m = n * m :=\n  fn_min_mul_fn_max id n m\n#align min_mul_max min_mul_max\n-/\n\n",
 "min_le_mul_of_one_le_right":
 "#print min_le_mul_of_one_le_right /-\n@[to_additive]\ntheorem min_le_mul_of_one_le_right [covariant_class α α (· * ·) (· ≤ ·)] {a b : α} (hb : 1 ≤ b) : min a b ≤ a * b :=\n  min_le_iff.2 <| or.inl <| le_mul_of_one_le_right' hb\n#align min_le_mul_of_one_le_right min_le_mul_of_one_le_right\n-/\n\n",
 "min_le_mul_of_one_le_left":
 "#print min_le_mul_of_one_le_left /-\n@[to_additive]\ntheorem min_le_mul_of_one_le_left [covariant_class α α (function.swap (· * ·)) (· ≤ ·)] {a b : α} (ha : 1 ≤ a) :\n    min a b ≤ a * b :=\n  min_le_iff.2 <| or.inr <| le_mul_of_one_le_left' ha\n#align min_le_mul_of_one_le_left min_le_mul_of_one_le_left\n-/\n\n",
 "max_mul_mul_right":
 "#print max_mul_mul_right /-\n@[to_additive]\ntheorem max_mul_mul_right (a b c : α) : max (a * c) (b * c) = max a b * c :=\n  (monotone_id.mul_const' c).map_max.symm\n#align max_mul_mul_right max_mul_mul_right\n-/\n\n",
 "max_mul_mul_left":
 "#print max_mul_mul_left /-\n@[to_additive]\ntheorem max_mul_mul_left (a b c : α) : max (a * b) (a * c) = a * max b c :=\n  (monotone_id.const_mul' a).map_max.symm\n#align max_mul_mul_left max_mul_mul_left\n-/\n\n",
 "max_le_mul_of_one_le":
 "#print max_le_mul_of_one_le /-\n@[to_additive]\ntheorem max_le_mul_of_one_le [covariant_class α α (· * ·) (· ≤ ·)] [covariant_class α α (function.swap (· * ·)) (· ≤ ·)]\n    {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) : max a b ≤ a * b :=\n  max_le_iff.2 ⟨le_mul_of_one_le_right' hb, le_mul_of_one_le_left' ha⟩\n#align max_le_mul_of_one_le max_le_mul_of_one_le\n-/\n\n",
 "lt_or_lt_of_mul_lt_mul":
 "#print lt_or_lt_of_mul_lt_mul /-\n@[to_additive]\ntheorem lt_or_lt_of_mul_lt_mul [covariant_class α α (function.swap (· * ·)) (· ≤ ·)] {a b m n : α} (h : m * n < a * b) :\n    m < a ∨ n < b := by\n  contrapose! h\n  exact mul_le_mul' h.1 h.2\n#align lt_or_lt_of_mul_lt_mul lt_or_lt_of_mul_lt_mul\n-/\n\n",
 "fn_min_mul_fn_max":
 "#print fn_min_mul_fn_max /-\n/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro, Johannes Hölzl\n-/\n@[to_additive]\ntheorem fn_min_mul_fn_max [linear_order α] [comm_semigroup β] (f : α → β) (n m : α) :\n    f (min n m) * f (max n m) = f n * f m := by cases' le_total n m with h h <;> simp [h, mul_comm]\n#align fn_min_mul_fn_max fn_min_mul_fn_max\n-/\n\n"}