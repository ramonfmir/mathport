{"self_lt_inv":
 "#print Right.self_lt_inv /-\n@[to_additive]\ntheorem Right.self_lt_inv (h : a < 1) : a < a⁻¹ :=\n  lt_trans h (Right.one_lt_inv_iff.mpr h)\n#align right.self_lt_inv Right.self_lt_inv\n#align right.self_lt_neg Right.self_lt_neg\n-/\n\n",
 "self_le_inv":
 "#print Right.self_le_inv /-\n@[to_additive]\ntheorem Right.self_le_inv (h : a ≤ 1) : a ≤ a⁻¹ :=\n  le_trans h (Right.one_le_inv_iff.mpr h)\n#align right.self_le_inv Right.self_le_inv\n#align right.self_le_neg Right.self_le_neg\n-/\n\n",
 "one_lt_inv_iff":
 "#print Right.one_lt_inv_iff /-\n/-- Uses `right` co(ntra)variant. -/\n@[simp, to_additive Right.neg_pos_iff \"Uses `right` co(ntra)variant.\"]\ntheorem Right.one_lt_inv_iff : 1 < a⁻¹ ↔ a < 1 := by rw [← mul_lt_mul_iff_right a, inv_mul_self, one_mul]\n#align right.one_lt_inv_iff Right.one_lt_inv_iff\n#align right.neg_pos_iff Right.neg_pos_iff\n-/\n\n",
 "one_lt_div'":
 "#print one_lt_div' /-\n@[simp, to_additive sub_pos]\ntheorem one_lt_div' : 1 < a / b ↔ b < a := by\n  rw [← mul_lt_mul_iff_right b, one_mul, div_eq_mul_inv, inv_mul_cancel_right]\n#align one_lt_div' one_lt_div'\n#align sub_pos sub_pos\n-/\n\n",
 "one_le_inv_of_le_one":
 "#print one_le_inv_of_le_one /-\n@[to_additive neg_nonneg_of_nonpos]\ntheorem one_le_inv_of_le_one : a ≤ 1 → 1 ≤ a⁻¹ :=\n  one_le_inv'.mpr\n#align one_le_inv_of_le_one one_le_inv_of_le_one\n#align neg_nonneg_of_nonpos neg_nonneg_of_nonpos\n-/\n\n",
 "one_le_inv_iff":
 "#print Right.one_le_inv_iff /-\n/-- Uses `right` co(ntra)variant. -/\n@[simp, to_additive Right.nonneg_neg_iff \"Uses `right` co(ntra)variant.\"]\ntheorem Right.one_le_inv_iff : 1 ≤ a⁻¹ ↔ a ≤ 1 :=\n  by\n  rw [← mul_le_mul_iff_right a]\n  simp\n#align right.one_le_inv_iff Right.one_le_inv_iff\n#align right.nonneg_neg_iff Right.nonneg_neg_iff\n-/\n\n",
 "one_le_div'":
 "#print one_le_div' /-\n@[simp, to_additive sub_nonneg]\ntheorem one_le_div' : 1 ≤ a / b ↔ b ≤ a := by\n  rw [← mul_le_mul_iff_right b, one_mul, div_eq_mul_inv, inv_mul_cancel_right]\n#align one_le_div' one_le_div'\n#align sub_nonneg sub_nonneg\n-/\n\n",
 "mul_lt_mul_left'":
 "#print LinearOrderedCommGroup.mul_lt_mul_left' /-\n@[to_additive LinearOrderedAddCommGroup.add_lt_add_left]\ntheorem LinearOrderedCommGroup.mul_lt_mul_left' (a b : α) (h : a < b) (c : α) : c * a < c * b :=\n  mul_lt_mul_left' h c\n#align linear_ordered_comm_group.mul_lt_mul_left' LinearOrderedCommGroup.mul_lt_mul_left'\n#align linear_ordered_add_comm_group.add_lt_add_left LinearOrderedAddCommGroup.add_lt_add_left\n-/\n\n",
 "mul_inv_lt_one_iff":
 "#print mul_inv_lt_one_iff /-\n@[to_additive]\ntheorem mul_inv_lt_one_iff : b * a⁻¹ < 1 ↔ b < a :=\n  trans mul_inv_lt_iff_lt_mul <| by rw [one_mul]\n#align mul_inv_lt_one_iff mul_inv_lt_one_iff\n#align add_neg_neg_iff add_neg_neg_iff\n-/\n\n",
 "mul_inv_lt_mul_inv_iff'":
 "#print mul_inv_lt_mul_inv_iff' /-\n@[to_additive add_neg_lt_add_neg_iff]\ntheorem mul_inv_lt_mul_inv_iff' : a * b⁻¹ < c * d⁻¹ ↔ a * d < c * b := by\n  rw [mul_comm c, mul_inv_lt_inv_mul_iff, mul_comm]\n#align mul_inv_lt_mul_inv_iff' mul_inv_lt_mul_inv_iff'\n#align add_neg_lt_add_neg_iff add_neg_lt_add_neg_iff\n-/\n\n",
 "mul_inv_lt_inv_mul_iff":
 "#print mul_inv_lt_inv_mul_iff /-\n@[to_additive]\ntheorem mul_inv_lt_inv_mul_iff : a * b⁻¹ < d⁻¹ * c ↔ d * a < c * b := by\n  rw [← mul_lt_mul_iff_left d, ← mul_lt_mul_iff_right b, mul_inv_cancel_left, mul_assoc, inv_mul_cancel_right]\n#align mul_inv_lt_inv_mul_iff mul_inv_lt_inv_mul_iff\n#align add_neg_lt_neg_add_iff add_neg_lt_neg_add_iff\n-/\n\n",
 "mul_inv_lt_iff_lt_mul":
 "#print mul_inv_lt_iff_lt_mul /-\n@[simp, to_additive]\ntheorem mul_inv_lt_iff_lt_mul : a * b⁻¹ < c ↔ a < c * b := by rw [← mul_lt_mul_iff_right b, inv_mul_cancel_right]\n#align mul_inv_lt_iff_lt_mul mul_inv_lt_iff_lt_mul\n#align add_neg_lt_iff_lt_add add_neg_lt_iff_lt_add\n-/\n\n",
 "mul_inv_lt_iff_le_mul'":
 "#print mul_inv_lt_iff_le_mul' /-\n@[simp, to_additive]\ntheorem mul_inv_lt_iff_le_mul' : a * b⁻¹ < c ↔ a < b * c := by rw [← inv_mul_lt_iff_lt_mul, mul_comm]\n#align mul_inv_lt_iff_le_mul' mul_inv_lt_iff_le_mul'\n#align add_neg_lt_iff_le_add' add_neg_lt_iff_le_add'\n-/\n\n",
 "mul_inv_le_one_iff_le":
 "#print mul_inv_le_one_iff_le /-\n@[simp, to_additive]\ntheorem mul_inv_le_one_iff_le : a * b⁻¹ ≤ 1 ↔ a ≤ b :=\n  mul_inv_le_iff_le_mul.trans <| by rw [one_mul]\n#align mul_inv_le_one_iff_le mul_inv_le_one_iff_le\n#align add_neg_nonpos_iff_le add_neg_nonpos_iff_le\n-/\n\n",
 "mul_inv_le_one_iff":
 "#print mul_inv_le_one_iff /-\n@[to_additive]\ntheorem mul_inv_le_one_iff : b * a⁻¹ ≤ 1 ↔ b ≤ a :=\n  trans mul_inv_le_iff_le_mul <| by rw [one_mul]\n#align mul_inv_le_one_iff mul_inv_le_one_iff\n#align add_neg_nonpos_iff add_neg_nonpos_iff\n-/\n\n",
 "mul_inv_le_mul_inv_iff'":
 "#print mul_inv_le_mul_inv_iff' /-\n@[to_additive add_neg_le_add_neg_iff]\ntheorem mul_inv_le_mul_inv_iff' : a * b⁻¹ ≤ c * d⁻¹ ↔ a * d ≤ c * b := by\n  rw [mul_comm c, mul_inv_le_inv_mul_iff, mul_comm]\n#align mul_inv_le_mul_inv_iff' mul_inv_le_mul_inv_iff'\n#align add_neg_le_add_neg_iff add_neg_le_add_neg_iff\n-/\n\n",
 "mul_inv_le_inv_mul_iff":
 "#print mul_inv_le_inv_mul_iff /-\n@[to_additive]\ntheorem mul_inv_le_inv_mul_iff : a * b⁻¹ ≤ d⁻¹ * c ↔ d * a ≤ c * b := by\n  rw [← mul_le_mul_iff_left d, ← mul_le_mul_iff_right b, mul_inv_cancel_left, mul_assoc, inv_mul_cancel_right]\n#align mul_inv_le_inv_mul_iff mul_inv_le_inv_mul_iff\n#align add_neg_le_neg_add_iff add_neg_le_neg_add_iff\n-/\n\n",
 "mul_inv_le_iff_le_mul'":
 "#print mul_inv_le_iff_le_mul' /-\n@[simp, to_additive]\ntheorem mul_inv_le_iff_le_mul' : a * b⁻¹ ≤ c ↔ a ≤ b * c := by rw [← inv_mul_le_iff_le_mul, mul_comm]\n#align mul_inv_le_iff_le_mul' mul_inv_le_iff_le_mul'\n#align add_neg_le_iff_le_add' add_neg_le_iff_le_add'\n-/\n\n",
 "mul_inv_le_iff_le_mul":
 "#print mul_inv_le_iff_le_mul /-\n@[simp, to_additive]\ntheorem mul_inv_le_iff_le_mul : a * b⁻¹ ≤ c ↔ a ≤ c * b :=\n  (mul_le_mul_iff_right b).symm.trans <| by rw [inv_mul_cancel_right]\n#align mul_inv_le_iff_le_mul mul_inv_le_iff_le_mul\n#align add_neg_le_iff_le_add add_neg_le_iff_le_add\n-/\n\n",
 "lt_mul_inv_iff_mul_lt":
 "#print lt_mul_inv_iff_mul_lt /-\n@[simp, to_additive]\ntheorem lt_mul_inv_iff_mul_lt : c < a * b⁻¹ ↔ c * b < a :=\n  (mul_lt_mul_iff_right b).symm.trans <| by rw [inv_mul_cancel_right]\n#align lt_mul_inv_iff_mul_lt lt_mul_inv_iff_mul_lt\n#align lt_add_neg_iff_add_lt lt_add_neg_iff_add_lt\n-/\n\n",
 "lt_mul_inv_iff_lt":
 "#print lt_mul_inv_iff_lt /-\n@[to_additive]\ntheorem lt_mul_inv_iff_lt : 1 < a * b⁻¹ ↔ b < a := by rw [← mul_lt_mul_iff_right b, one_mul, inv_mul_cancel_right]\n#align lt_mul_inv_iff_lt lt_mul_inv_iff_lt\n#align lt_add_neg_iff_lt lt_add_neg_iff_lt\n-/\n\n",
 "lt_inv_mul_iff_mul_lt":
 "#print lt_inv_mul_iff_mul_lt /-\n@[simp, to_additive]\ntheorem lt_inv_mul_iff_mul_lt : b < a⁻¹ * c ↔ a * b < c :=\n  by\n  rw [← mul_lt_mul_iff_left a]\n  simp\n#align lt_inv_mul_iff_mul_lt lt_inv_mul_iff_mul_lt\n#align lt_neg_add_iff_add_lt lt_neg_add_iff_add_lt\n-/\n\n",
 "lt_inv_mul_iff_lt":
 "#print lt_inv_mul_iff_lt /-\n@[to_additive]\ntheorem lt_inv_mul_iff_lt : 1 < b⁻¹ * a ↔ b < a := by rw [← mul_lt_mul_iff_left b, mul_one, mul_inv_cancel_left]\n#align lt_inv_mul_iff_lt lt_inv_mul_iff_lt\n#align lt_neg_add_iff_lt lt_neg_add_iff_lt\n-/\n\n",
 "lt_inv_iff_mul_lt_one'":
 "#print lt_inv_iff_mul_lt_one' /-\n@[to_additive]\ntheorem lt_inv_iff_mul_lt_one' : a < b⁻¹ ↔ b * a < 1 :=\n  (mul_lt_mul_iff_left b).symm.trans <| by rw [mul_inv_self]\n#align lt_inv_iff_mul_lt_one' lt_inv_iff_mul_lt_one'\n#align lt_neg_iff_add_neg' lt_neg_iff_add_neg'\n-/\n\n",
 "lt_inv_iff_mul_lt_one":
 "#print lt_inv_iff_mul_lt_one /-\n@[to_additive]\ntheorem lt_inv_iff_mul_lt_one : a < b⁻¹ ↔ a * b < 1 :=\n  (mul_lt_mul_iff_right b).symm.trans <| by rw [inv_mul_self]\n#align lt_inv_iff_mul_lt_one lt_inv_iff_mul_lt_one\n#align lt_neg_iff_add_neg lt_neg_iff_add_neg\n-/\n\n",
 "lt_inv'":
 "#print lt_inv' /-\n@[to_additive lt_neg]\ntheorem lt_inv' : a < b⁻¹ ↔ b < a⁻¹ := by rw [← inv_lt_inv_iff, inv_inv]\n#align lt_inv' lt_inv'\n#align lt_neg lt_neg\n-/\n\n",
 "lt_div_iff_mul_lt'":
 "#print lt_div_iff_mul_lt' /-\n@[to_additive]\ntheorem lt_div_iff_mul_lt' : b < c / a ↔ a * b < c := by rw [lt_div_iff_mul_lt, mul_comm]\n#align lt_div_iff_mul_lt' lt_div_iff_mul_lt'\n#align lt_sub_iff_add_lt' lt_sub_iff_add_lt'\n-/\n\n",
 "lt_div_iff_mul_lt":
 "#print lt_div_iff_mul_lt /-\n@[to_additive]\ntheorem lt_div_iff_mul_lt : a < c / b ↔ a * b < c := by\n  rw [← mul_lt_mul_iff_right b, div_eq_mul_inv, inv_mul_cancel_right]\n#align lt_div_iff_mul_lt lt_div_iff_mul_lt\n#align lt_sub_iff_add_lt lt_sub_iff_add_lt\n-/\n\n",
 "lt_div_comm":
 "#print lt_div_comm /-\n@[to_additive]\ntheorem lt_div_comm : a < b / c ↔ c < b / a :=\n  lt_div_iff_mul_lt'.trans lt_div_iff_mul_lt.symm\n#align lt_div_comm lt_div_comm\n#align lt_sub_comm lt_sub_comm\n-/\n\n",
 "le_of_forall_one_lt_lt_mul":
 "#print le_of_forall_one_lt_lt_mul /-\n@[to_additive]\ntheorem le_of_forall_one_lt_lt_mul (h : ∀ ε : α, 1 < ε → a < b * ε) : a ≤ b :=\n  le_of_not_lt fun h₁ => lt_irrefl a (by simpa using h _ (lt_inv_mul_iff_lt.mpr h₁))\n#align le_of_forall_one_lt_lt_mul le_of_forall_one_lt_lt_mul\n#align le_of_forall_pos_lt_add le_of_forall_pos_lt_add\n-/\n\n",
 "le_mul_inv_iff_mul_le":
 "#print le_mul_inv_iff_mul_le /-\n@[simp, to_additive]\ntheorem le_mul_inv_iff_mul_le : c ≤ a * b⁻¹ ↔ c * b ≤ a :=\n  (mul_le_mul_iff_right b).symm.trans <| by rw [inv_mul_cancel_right]\n#align le_mul_inv_iff_mul_le le_mul_inv_iff_mul_le\n#align le_add_neg_iff_add_le le_add_neg_iff_add_le\n-/\n\n",
 "le_mul_inv_iff_le":
 "#print le_mul_inv_iff_le /-\n@[to_additive]\ntheorem le_mul_inv_iff_le : 1 ≤ a * b⁻¹ ↔ b ≤ a := by rw [← mul_le_mul_iff_right b, one_mul, inv_mul_cancel_right]\n#align le_mul_inv_iff_le le_mul_inv_iff_le\n#align le_add_neg_iff_le le_add_neg_iff_le\n-/\n\n",
 "le_inv_mul_iff_mul_le":
 "#print le_inv_mul_iff_mul_le /-\n@[simp, to_additive]\ntheorem le_inv_mul_iff_mul_le : b ≤ a⁻¹ * c ↔ a * b ≤ c :=\n  by\n  rw [← mul_le_mul_iff_left a]\n  simp\n#align le_inv_mul_iff_mul_le le_inv_mul_iff_mul_le\n#align le_neg_add_iff_add_le le_neg_add_iff_add_le\n-/\n\n",
 "le_inv_mul_iff_le":
 "#print le_inv_mul_iff_le /-\n@[to_additive]\ntheorem le_inv_mul_iff_le : 1 ≤ b⁻¹ * a ↔ b ≤ a := by rw [← mul_le_mul_iff_left b, mul_one, mul_inv_cancel_left]\n#align le_inv_mul_iff_le le_inv_mul_iff_le\n#align le_neg_add_iff_le le_neg_add_iff_le\n-/\n\n",
 "le_inv_iff_mul_le_one_right":
 "#print le_inv_iff_mul_le_one_right /-\n@[to_additive]\ntheorem le_inv_iff_mul_le_one_right : a ≤ b⁻¹ ↔ a * b ≤ 1 :=\n  (mul_le_mul_iff_right b).symm.trans <| by rw [inv_mul_self]\n#align le_inv_iff_mul_le_one_right le_inv_iff_mul_le_one_right\n#align le_neg_iff_add_nonpos_right le_neg_iff_add_nonpos_right\n-/\n\n",
 "le_inv_iff_mul_le_one_left":
 "#print le_inv_iff_mul_le_one_left /-\n@[to_additive]\ntheorem le_inv_iff_mul_le_one_left : a ≤ b⁻¹ ↔ b * a ≤ 1 :=\n  (mul_le_mul_iff_left b).symm.trans <| by rw [mul_inv_self]\n#align le_inv_iff_mul_le_one_left le_inv_iff_mul_le_one_left\n#align le_neg_iff_add_nonpos_left le_neg_iff_add_nonpos_left\n-/\n\n",
 "le_iff_forall_one_lt_lt_mul":
 "#print le_iff_forall_one_lt_lt_mul /-\n@[to_additive]\ntheorem le_iff_forall_one_lt_lt_mul : a ≤ b ↔ ∀ ε, 1 < ε → a < b * ε :=\n  ⟨fun h ε => lt_mul_of_le_of_one_lt h, le_of_forall_one_lt_lt_mul⟩\n#align le_iff_forall_one_lt_lt_mul le_iff_forall_one_lt_lt_mul\n#align le_iff_forall_pos_lt_add le_iff_forall_pos_lt_add\n-/\n\n",
 "le_div_self_iff":
 "#print le_div_self_iff /-\n@[simp, to_additive]\ntheorem le_div_self_iff (a : α) {b : α} : a ≤ a / b ↔ b ≤ 1 := by simp [div_eq_mul_inv]\n#align le_div_self_iff le_div_self_iff\n#align le_sub_self_iff le_sub_self_iff\n-/\n\n",
 "le_div_iff_mul_le'":
 "#print le_div_iff_mul_le' /-\n@[to_additive]\ntheorem le_div_iff_mul_le' : b ≤ c / a ↔ a * b ≤ c := by rw [le_div_iff_mul_le, mul_comm]\n#align le_div_iff_mul_le' le_div_iff_mul_le'\n#align le_sub_iff_add_le' le_sub_iff_add_le'\n-/\n\n",
 "le_div_iff_mul_le":
 "#print le_div_iff_mul_le /-\n@[to_additive]\ntheorem le_div_iff_mul_le : a ≤ c / b ↔ a * b ≤ c := by\n  rw [← mul_le_mul_iff_right b, div_eq_mul_inv, inv_mul_cancel_right]\n#align le_div_iff_mul_le le_div_iff_mul_le\n#align le_sub_iff_add_le le_sub_iff_add_le\n-/\n\n",
 "le_div_comm":
 "#print le_div_comm /-\n@[to_additive]\ntheorem le_div_comm : a ≤ b / c ↔ c ≤ b / a :=\n  le_div_iff_mul_le'.trans le_div_iff_mul_le.symm\n#align le_div_comm le_div_comm\n#align le_sub_comm le_sub_comm\n-/\n\n",
 "inv_mul_lt_one_iff_lt":
 "#print inv_mul_lt_one_iff_lt /-\n@[simp, to_additive]\ntheorem inv_mul_lt_one_iff_lt : a * b⁻¹ < 1 ↔ a < b := by rw [← mul_lt_mul_iff_right b, inv_mul_cancel_right, one_mul]\n#align inv_mul_lt_one_iff_lt inv_mul_lt_one_iff_lt\n#align neg_add_neg_iff_lt neg_add_neg_iff_lt\n-/\n\n",
 "inv_mul_lt_one_iff":
 "#print inv_mul_lt_one_iff /-\n@[to_additive]\ntheorem inv_mul_lt_one_iff : a⁻¹ * b < 1 ↔ b < a :=\n  trans inv_mul_lt_iff_lt_mul <| by rw [mul_one]\n#align inv_mul_lt_one_iff inv_mul_lt_one_iff\n#align neg_add_neg_iff neg_add_neg_iff\n-/\n\n",
 "inv_mul_lt_iff_lt_mul'":
 "#print inv_mul_lt_iff_lt_mul' /-\n@[to_additive]\ntheorem inv_mul_lt_iff_lt_mul' : c⁻¹ * a < b ↔ a < b * c := by rw [inv_mul_lt_iff_lt_mul, mul_comm]\n#align inv_mul_lt_iff_lt_mul' inv_mul_lt_iff_lt_mul'\n#align neg_add_lt_iff_lt_add' neg_add_lt_iff_lt_add'\n-/\n\n",
 "inv_mul_lt_iff_lt_mul":
 "#print inv_mul_lt_iff_lt_mul /-\n@[simp, to_additive]\ntheorem inv_mul_lt_iff_lt_mul : b⁻¹ * a < c ↔ a < b * c := by rw [← mul_lt_mul_iff_left b, mul_inv_cancel_left]\n#align inv_mul_lt_iff_lt_mul inv_mul_lt_iff_lt_mul\n#align neg_add_lt_iff_lt_add neg_add_lt_iff_lt_add\n-/\n\n",
 "inv_mul_le_one_iff":
 "#print inv_mul_le_one_iff /-\n@[to_additive]\ntheorem inv_mul_le_one_iff : a⁻¹ * b ≤ 1 ↔ b ≤ a :=\n  trans inv_mul_le_iff_le_mul <| by rw [mul_one]\n#align inv_mul_le_one_iff inv_mul_le_one_iff\n#align neg_add_nonpos_iff neg_add_nonpos_iff\n-/\n\n",
 "inv_mul_le_iff_le_mul'":
 "#print inv_mul_le_iff_le_mul' /-\n@[to_additive]\ntheorem inv_mul_le_iff_le_mul' : c⁻¹ * a ≤ b ↔ a ≤ b * c := by rw [inv_mul_le_iff_le_mul, mul_comm]\n#align inv_mul_le_iff_le_mul' inv_mul_le_iff_le_mul'\n#align neg_add_le_iff_le_add' neg_add_le_iff_le_add'\n-/\n\n",
 "inv_mul_le_iff_le_mul":
 "#print inv_mul_le_iff_le_mul /-\n@[simp, to_additive]\ntheorem inv_mul_le_iff_le_mul : b⁻¹ * a ≤ c ↔ a ≤ b * c := by rw [← mul_le_mul_iff_left b, mul_inv_cancel_left]\n#align inv_mul_le_iff_le_mul inv_mul_le_iff_le_mul\n#align neg_add_le_iff_le_add neg_add_le_iff_le_add\n-/\n\n",
 "inv_lt_self":
 "#print Right.inv_lt_self /-\n@[to_additive]\ntheorem Right.inv_lt_self (h : 1 < a) : a⁻¹ < a :=\n  (Right.inv_lt_one_iff.mpr h).trans h\n#align right.inv_lt_self Right.inv_lt_self\n#align right.neg_lt_self Right.neg_lt_self\n-/\n\n",
 "inv_lt_one_of_one_lt":
 "#print inv_lt_one_of_one_lt /-\n--  The additive version is also a `linarith` lemma.\n@[to_additive]\ntheorem inv_lt_one_of_one_lt : 1 < a → a⁻¹ < 1 :=\n  inv_lt_one_iff_one_lt.mpr\n#align inv_lt_one_of_one_lt inv_lt_one_of_one_lt\n#align neg_neg_of_pos neg_neg_of_pos\n-/\n\n",
 "inv_lt_one_iff":
 "#print Right.inv_lt_one_iff /-\n/-- Uses `right` co(ntra)variant. -/\n@[simp, to_additive Right.neg_neg_iff \"Uses `right` co(ntra)variant.\"]\ntheorem Right.inv_lt_one_iff : a⁻¹ < 1 ↔ 1 < a := by rw [← mul_lt_mul_iff_right a, inv_mul_self, one_mul]\n#align right.inv_lt_one_iff Right.inv_lt_one_iff\n#align right.neg_neg_iff Right.neg_neg_iff\n-/\n\n",
 "inv_lt_inv_iff":
 "#print inv_lt_inv_iff /-\n@[simp, to_additive]\ntheorem inv_lt_inv_iff : a⁻¹ < b⁻¹ ↔ b < a :=\n  by\n  rw [← mul_lt_mul_iff_left a, ← mul_lt_mul_iff_right b]\n  simp\n#align inv_lt_inv_iff inv_lt_inv_iff\n#align neg_lt_neg_iff neg_lt_neg_iff\n-/\n\n",
 "inv_lt_inv'":
 "#print inv_lt_inv' /-\n@[to_additive neg_lt_neg]\ntheorem inv_lt_inv' : a < b → b⁻¹ < a⁻¹ :=\n  inv_lt_inv_iff.mpr\n#align inv_lt_inv' inv_lt_inv'\n#align neg_lt_neg neg_lt_neg\n-/\n\n",
 "inv_lt_iff_one_lt_mul'":
 "#print inv_lt_iff_one_lt_mul' /-\n@[to_additive]\ntheorem inv_lt_iff_one_lt_mul' : a⁻¹ < b ↔ 1 < a * b :=\n  (mul_lt_mul_iff_left a).symm.trans <| by rw [mul_inv_self]\n#align inv_lt_iff_one_lt_mul' inv_lt_iff_one_lt_mul'\n#align neg_lt_iff_pos_add' neg_lt_iff_pos_add'\n-/\n\n",
 "inv_lt_iff_one_lt_mul":
 "#print inv_lt_iff_one_lt_mul /-\n@[to_additive]\ntheorem inv_lt_iff_one_lt_mul : a⁻¹ < b ↔ 1 < b * a :=\n  (mul_lt_mul_iff_right a).symm.trans <| by rw [inv_mul_self]\n#align inv_lt_iff_one_lt_mul inv_lt_iff_one_lt_mul\n#align neg_lt_iff_pos_add neg_lt_iff_pos_add\n-/\n\n",
 "inv_lt_div_iff_lt_mul'":
 "#print inv_lt_div_iff_lt_mul' /-\n@[to_additive]\ntheorem inv_lt_div_iff_lt_mul' : b⁻¹ < a / c ↔ c < a * b :=\n  lt_div_iff_mul_lt.trans inv_mul_lt_iff_lt_mul'\n#align inv_lt_div_iff_lt_mul' inv_lt_div_iff_lt_mul'\n#align neg_lt_sub_iff_lt_add' neg_lt_sub_iff_lt_add'\n-/\n\n",
 "inv_lt_div_iff_lt_mul":
 "#print inv_lt_div_iff_lt_mul /-\n@[simp, to_additive]\ntheorem inv_lt_div_iff_lt_mul : a⁻¹ < b / c ↔ c < a * b := by\n  rw [div_eq_mul_inv, lt_mul_inv_iff_mul_lt, inv_mul_lt_iff_lt_mul]\n#align inv_lt_div_iff_lt_mul inv_lt_div_iff_lt_mul\n#align neg_lt_sub_iff_lt_add neg_lt_sub_iff_lt_add\n-/\n\n",
 "inv_lt'":
 "#print inv_lt' /-\n@[to_additive neg_lt]\ntheorem inv_lt' : a⁻¹ < b ↔ b⁻¹ < a := by rw [← inv_lt_inv_iff, inv_inv]\n#align inv_lt' inv_lt'\n#align neg_lt neg_lt\n-/\n\n",
 "inv_le_self":
 "#print Right.inv_le_self /-\n@[to_additive]\ntheorem Right.inv_le_self (h : 1 ≤ a) : a⁻¹ ≤ a :=\n  le_trans (Right.inv_le_one_iff.mpr h) h\n#align right.inv_le_self Right.inv_le_self\n#align right.neg_le_self Right.neg_le_self\n-/\n\n",
 "inv_le_one_of_one_le":
 "#print inv_le_one_of_one_le /-\n--  The additive version is also a `linarith` lemma.\n@[to_additive]\ntheorem inv_le_one_of_one_le : 1 ≤ a → a⁻¹ ≤ 1 :=\n  inv_le_one'.mpr\n#align inv_le_one_of_one_le inv_le_one_of_one_le\n#align neg_nonpos_of_nonneg neg_nonpos_of_nonneg\n-/\n\n",
 "inv_le_one_iff":
 "#print Right.inv_le_one_iff /-\n/-- Uses `right` co(ntra)variant. -/\n@[simp, to_additive Right.neg_nonpos_iff \"Uses `right` co(ntra)variant.\"]\ntheorem Right.inv_le_one_iff : a⁻¹ ≤ 1 ↔ 1 ≤ a :=\n  by\n  rw [← mul_le_mul_iff_right a]\n  simp\n#align right.inv_le_one_iff Right.inv_le_one_iff\n#align right.neg_nonpos_iff Right.neg_nonpos_iff\n-/\n\n",
 "inv_le_inv_iff":
 "#print inv_le_inv_iff /-\n@[simp, to_additive]\ntheorem inv_le_inv_iff : a⁻¹ ≤ b⁻¹ ↔ b ≤ a :=\n  by\n  rw [← mul_le_mul_iff_left a, ← mul_le_mul_iff_right b]\n  simp\n#align inv_le_inv_iff inv_le_inv_iff\n#align neg_le_neg_iff neg_le_neg_iff\n-/\n\n",
 "inv_le_inv'":
 "#print inv_le_inv' /-\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\n-- See note [lower instance priority]\n/- The following lemmas are stated so that the `norm_num` tactic can use them with the\nexpected signatures.  -/\n@[to_additive neg_le_neg]\ntheorem inv_le_inv' : a ≤ b → b⁻¹ ≤ a⁻¹ :=\n  inv_le_inv_iff.mpr\n#align inv_le_inv' inv_le_inv'\n#align neg_le_neg neg_le_neg\n-/\n\n",
 "inv_le_iff_one_le_mul'":
 "#print inv_le_iff_one_le_mul' /-\n@[to_additive neg_le_iff_add_nonneg']\ntheorem inv_le_iff_one_le_mul' : a⁻¹ ≤ b ↔ 1 ≤ a * b :=\n  (mul_le_mul_iff_left a).symm.trans <| by rw [mul_inv_self]\n#align inv_le_iff_one_le_mul' inv_le_iff_one_le_mul'\n#align neg_le_iff_add_nonneg' neg_le_iff_add_nonneg'\n-/\n\n",
 "inv_le_iff_one_le_mul":
 "#print inv_le_iff_one_le_mul /-\n@[to_additive neg_le_iff_add_nonneg]\ntheorem inv_le_iff_one_le_mul : a⁻¹ ≤ b ↔ 1 ≤ b * a :=\n  (mul_le_mul_iff_right a).symm.trans <| by rw [inv_mul_self]\n#align inv_le_iff_one_le_mul inv_le_iff_one_le_mul\n#align neg_le_iff_add_nonneg neg_le_iff_add_nonneg\n-/\n\n",
 "inv_le_div_iff_le_mul'":
 "#print inv_le_div_iff_le_mul' /-\n@[to_additive]\ntheorem inv_le_div_iff_le_mul' : a⁻¹ ≤ b / c ↔ c ≤ a * b := by rw [inv_le_div_iff_le_mul, mul_comm]\n#align inv_le_div_iff_le_mul' inv_le_div_iff_le_mul'\n#align neg_le_sub_iff_le_add' neg_le_sub_iff_le_add'\n-/\n\n",
 "inv_le_div_iff_le_mul":
 "#print inv_le_div_iff_le_mul /-\n@[simp, to_additive]\ntheorem inv_le_div_iff_le_mul : b⁻¹ ≤ a / c ↔ c ≤ a * b :=\n  le_div_iff_mul_le.trans inv_mul_le_iff_le_mul'\n#align inv_le_div_iff_le_mul inv_le_div_iff_le_mul\n#align neg_le_sub_iff_le_add neg_le_sub_iff_le_add\n-/\n\n",
 "inv":
 "#print StrictAntiOn.inv /-\n@[to_additive]\ntheorem StrictAntiOn.inv (hf : StrictAntiOn f s) : StrictMonoOn (fun x => (f x)⁻¹) s := fun x hx y hy hxy =>\n  inv_lt_inv_iff.2 (hf hx hy hxy)\n#align strict_anti_on.inv StrictAntiOn.inv\n#align strict_anti_on.neg StrictAntiOn.neg\n-/\n\n",
 "exists_one_lt'":
 "#print exists_one_lt' /-\n@[to_additive exists_zero_lt]\ntheorem exists_one_lt' [Nontrivial α] : ∃ a : α, 1 < a :=\n  by\n  obtain ⟨y, hy⟩ := Decidable.exists_ne (1 : α)\n  cases hy.lt_or_lt\n  · exact ⟨y⁻¹, one_lt_inv'.mpr h⟩\n  · exact ⟨y, h⟩\n#align exists_one_lt' exists_one_lt'\n#align exists_zero_lt exists_zero_lt\n-/\n\n",
 "eq_one_of_inv_eq'":
 "#print eq_one_of_inv_eq' /-\n@[to_additive eq_zero_of_neg_eq]\ntheorem eq_one_of_inv_eq' (h : a⁻¹ = a) : a = 1 :=\n  match lt_trichotomy a 1 with\n  | or.inl h₁ =>\n    have : 1 < a := h ▸ one_lt_inv_of_inv h₁\n    absurd h₁ this.asymm\n  | or.inr (or.inl h₁) => h₁\n  | or.inr (or.inr h₁) =>\n    have : a < 1 := h ▸ inv_lt_one'.mpr h₁\n    absurd h₁ this.asymm\n#align eq_one_of_inv_eq' eq_one_of_inv_eq'\n#align eq_zero_of_neg_eq eq_zero_of_neg_eq\n-/\n\n",
 "div_lt_self_iff":
 "#print div_lt_self_iff /-\n@[simp, to_additive]\ntheorem div_lt_self_iff (a : α) {b : α} : a / b < a ↔ 1 < b := by simp [div_eq_mul_inv]\n#align div_lt_self_iff div_lt_self_iff\n#align sub_lt_self_iff sub_lt_self_iff\n-/\n\n",
 "div_lt_one'":
 "#print div_lt_one' /-\n@[simp, to_additive sub_neg]\ntheorem div_lt_one' : a / b < 1 ↔ a < b := by\n  rw [← mul_lt_mul_iff_right b, one_mul, div_eq_mul_inv, inv_mul_cancel_right]\n#align div_lt_one' div_lt_one'\n#align sub_neg sub_neg\n-/\n\n",
 "div_lt_iff_lt_mul'":
 "#print div_lt_iff_lt_mul' /-\n@[to_additive]\ntheorem div_lt_iff_lt_mul' : a / b < c ↔ a < b * c := by rw [div_lt_iff_lt_mul, mul_comm]\n#align div_lt_iff_lt_mul' div_lt_iff_lt_mul'\n#align sub_lt_iff_lt_add' sub_lt_iff_lt_add'\n-/\n\n",
 "div_lt_iff_lt_mul":
 "#print div_lt_iff_lt_mul /-\n@[to_additive]\ntheorem div_lt_iff_lt_mul : a / c < b ↔ a < b * c := by\n  rw [← mul_lt_mul_iff_right c, div_eq_mul_inv, inv_mul_cancel_right]\n#align div_lt_iff_lt_mul div_lt_iff_lt_mul\n#align sub_lt_iff_lt_add sub_lt_iff_lt_add\n-/\n\n",
 "div_lt_div_right'":
 "#print div_lt_div_right' /-\n@[to_additive sub_lt_sub_right]\ntheorem div_lt_div_right' (h : a < b) (c : α) : a / c < b / c :=\n  (div_lt_div_iff_right c).2 h\n#align div_lt_div_right' div_lt_div_right'\n#align sub_lt_sub_right sub_lt_sub_right\n-/\n\n",
 "div_lt_div_left'":
 "#print div_lt_div_left' /-\n@[to_additive sub_lt_sub_left]\ntheorem div_lt_div_left' (h : a < b) (c : α) : c / b < c / a :=\n  (div_lt_div_iff_left c).2 h\n#align div_lt_div_left' div_lt_div_left'\n#align sub_lt_sub_left sub_lt_sub_left\n-/\n\n",
 "div_lt_div_iff_right":
 "#print div_lt_div_iff_right /-\n--  Most of the lemmas that are primed in this section appear in ordered_field. \n--  I (DT) did not try to minimise the assumptions.\n@[simp, to_additive]\ntheorem div_lt_div_iff_right (c : α) : a / c < b / c ↔ a < b := by\n  simpa only [div_eq_mul_inv] using mul_lt_mul_iff_right _\n#align div_lt_div_iff_right div_lt_div_iff_right\n#align sub_lt_sub_iff_right sub_lt_sub_iff_right\n-/\n\n",
 "div_lt_div_iff_left":
 "#print div_lt_div_iff_left /-\n@[simp, to_additive]\ntheorem div_lt_div_iff_left (a : α) : a / b < a / c ↔ c < b := by\n  rw [div_eq_mul_inv, div_eq_mul_inv, ← mul_lt_mul_iff_left a⁻¹, inv_mul_cancel_left, inv_mul_cancel_left,\n    inv_lt_inv_iff]\n#align div_lt_div_iff_left div_lt_div_iff_left\n#align sub_lt_sub_iff_left sub_lt_sub_iff_left\n-/\n\n",
 "div_lt_div_iff'":
 "#print div_lt_div_iff' /-\n@[to_additive sub_lt_sub_iff]\ntheorem div_lt_div_iff' : a / b < c / d ↔ a * d < c * b := by simpa only [div_eq_mul_inv] using mul_inv_lt_mul_inv_iff'\n#align div_lt_div_iff' div_lt_div_iff'\n#align sub_lt_sub_iff sub_lt_sub_iff\n-/\n\n",
 "div_lt_div''":
 "#print div_lt_div'' /-\n@[to_additive sub_lt_sub]\ntheorem div_lt_div'' (hab : a < b) (hcd : c < d) : a / d < b / c :=\n  by\n  rw [div_eq_mul_inv, div_eq_mul_inv, mul_comm b, mul_inv_lt_inv_mul_iff, mul_comm]\n  exact mul_lt_mul_of_lt_of_lt hab hcd\n#align div_lt_div'' div_lt_div''\n#align sub_lt_sub sub_lt_sub\n-/\n\n",
 "div_lt_comm":
 "#print div_lt_comm /-\n@[to_additive]\ntheorem div_lt_comm : a / b < c ↔ a / c < b :=\n  div_lt_iff_lt_mul'.trans div_lt_iff_lt_mul.symm\n#align div_lt_comm div_lt_comm\n#align sub_lt_comm sub_lt_comm\n-/\n\n",
 "div_le_self_iff":
 "#print div_le_self_iff /-\n@[simp, to_additive]\ntheorem div_le_self_iff (a : α) {b : α} : a / b ≤ a ↔ 1 ≤ b := by simp [div_eq_mul_inv]\n#align div_le_self_iff div_le_self_iff\n#align sub_le_self_iff sub_le_self_iff\n-/\n\n",
 "div_le_one'":
 "#print div_le_one' /-\n@[simp, to_additive sub_nonpos]\ntheorem div_le_one' : a / b ≤ 1 ↔ a ≤ b := by\n  rw [← mul_le_mul_iff_right b, one_mul, div_eq_mul_inv, inv_mul_cancel_right]\n#align div_le_one' div_le_one'\n#align sub_nonpos sub_nonpos\n-/\n\n",
 "div_le_inv_mul_iff":
 "#print div_le_inv_mul_iff /-\n/-  I (DT) introduced this lemma to prove (the additive version `sub_le_sub_flip` of)\n`div_le_div_flip` below.  Now I wonder what is the point of either of these lemmas... -/\n@[to_additive]\ntheorem div_le_inv_mul_iff [CovariantClass α α (swap (· * ·)) (· ≤ ·)] : a / b ≤ a⁻¹ * b ↔ a ≤ b :=\n  by\n  rw [div_eq_mul_inv, mul_inv_le_inv_mul_iff]\n  exact ⟨fun h => not_lt.mp fun k => not_lt.mpr h (mul_lt_mul_of_lt_of_lt k k), fun h => mul_le_mul' h h⟩\n#align div_le_inv_mul_iff div_le_inv_mul_iff\n#align sub_le_neg_add_iff sub_le_neg_add_iff\n-/\n\n",
 "div_le_iff_le_mul'":
 "#print div_le_iff_le_mul' /-\n@[to_additive]\ntheorem div_le_iff_le_mul' : a / b ≤ c ↔ a ≤ b * c := by rw [div_le_iff_le_mul, mul_comm]\n#align div_le_iff_le_mul' div_le_iff_le_mul'\n#align sub_le_iff_le_add' sub_le_iff_le_add'\n-/\n\n",
 "div_le_iff_le_mul":
 "#print div_le_iff_le_mul /-\n@[to_additive]\ntheorem div_le_iff_le_mul : a / c ≤ b ↔ a ≤ b * c := by\n  rw [← mul_le_mul_iff_right c, div_eq_mul_inv, inv_mul_cancel_right]\n#align div_le_iff_le_mul div_le_iff_le_mul\n#align sub_le_iff_le_add sub_le_iff_le_add\n-/\n\n",
 "div_le_div_right'":
 "#print div_le_div_right' /-\n@[to_additive sub_le_sub_right]\ntheorem div_le_div_right' (h : a ≤ b) (c : α) : a / c ≤ b / c :=\n  (div_le_div_iff_right c).2 h\n#align div_le_div_right' div_le_div_right'\n#align sub_le_sub_right sub_le_sub_right\n-/\n\n",
 "div_le_div_left'":
 "#print div_le_div_left' /-\n@[to_additive sub_le_sub_left]\ntheorem div_le_div_left' (h : a ≤ b) (c : α) : c / b ≤ c / a :=\n  (div_le_div_iff_left c).2 h\n#align div_le_div_left' div_le_div_left'\n#align sub_le_sub_left sub_le_sub_left\n-/\n\n",
 "div_le_div_iff_right":
 "#print div_le_div_iff_right /-\n--  Most of the lemmas that are primed in this section appear in ordered_field. \n--  I (DT) did not try to minimise the assumptions.\n@[simp, to_additive]\ntheorem div_le_div_iff_right (c : α) : a / c ≤ b / c ↔ a ≤ b := by\n  simpa only [div_eq_mul_inv] using mul_le_mul_iff_right _\n#align div_le_div_iff_right div_le_div_iff_right\n#align sub_le_sub_iff_right sub_le_sub_iff_right\n-/\n\n",
 "div_le_div_iff_left":
 "#print div_le_div_iff_left /-\n-- TODO: Should we get rid of `sub_le_iff_le_add` in favor of\n-- (a renamed version of) `tsub_le_iff_right`?\n-- see Note [lower instance priority]\n@[simp, to_additive]\ntheorem div_le_div_iff_left (a : α) : a / b ≤ a / c ↔ c ≤ b := by\n  rw [div_eq_mul_inv, div_eq_mul_inv, ← mul_le_mul_iff_left a⁻¹, inv_mul_cancel_left, inv_mul_cancel_left,\n    inv_le_inv_iff]\n#align div_le_div_iff_left div_le_div_iff_left\n#align sub_le_sub_iff_left sub_le_sub_iff_left\n-/\n\n",
 "div_le_div_iff'":
 "#print div_le_div_iff' /-\n@[to_additive sub_le_sub_iff]\ntheorem div_le_div_iff' : a / b ≤ c / d ↔ a * d ≤ c * b := by simpa only [div_eq_mul_inv] using mul_inv_le_mul_inv_iff'\n#align div_le_div_iff' div_le_div_iff'\n#align sub_le_sub_iff sub_le_sub_iff\n-/\n\n",
 "div_le_div_flip":
 "#print div_le_div_flip /-\n--  What is the point of this lemma?  See comment about `div_le_inv_mul_iff` above.\n@[simp, to_additive]\ntheorem div_le_div_flip {α : Type _} [CommGroup α] [linear_order α] [CovariantClass α α (· * ·) (· ≤ ·)] {a b : α} :\n    a / b ≤ b / a ↔ a ≤ b := by\n  rw [div_eq_mul_inv b, mul_comm]\n  exact div_le_inv_mul_iff\n#align div_le_div_flip div_le_div_flip\n#align sub_le_sub_flip sub_le_sub_flip\n-/\n\n",
 "div_le_div''":
 "#print div_le_div'' /-\n@[to_additive sub_le_sub]\ntheorem div_le_div'' (hab : a ≤ b) (hcd : c ≤ d) : a / d ≤ b / c :=\n  by\n  rw [div_eq_mul_inv, div_eq_mul_inv, mul_comm b, mul_inv_le_inv_mul_iff, mul_comm]\n  exact mul_le_mul' hab hcd\n#align div_le_div'' div_le_div''\n#align sub_le_sub sub_le_sub\n-/\n\n",
 "div_le_comm":
 "#print div_le_comm /-\n@[to_additive]\ntheorem div_le_comm : a / b ≤ c ↔ a / c ≤ b :=\n  div_le_iff_le_mul'.trans div_le_iff_le_mul.symm\n#align div_le_comm div_le_comm\n#align sub_le_comm sub_le_comm\n-/\n\n",
 "cmp_div_one'":
 "#print cmp_div_one' /-\n@[simp, to_additive cmp_sub_zero]\ntheorem cmp_div_one' [CovariantClass α α (swap (· * ·)) (· ≤ ·)] (a b : α) : cmp (a / b) 1 = cmp a b := by\n  rw [← cmp_mul_right' _ _ b, one_mul, div_mul_cancel']\n#align cmp_div_one' cmp_div_one'\n#align cmp_sub_zero cmp_sub_zero\n-/\n\n"}