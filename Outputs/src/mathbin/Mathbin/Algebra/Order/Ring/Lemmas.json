{"zero_lt_mul_right":
 "#print zero_lt_mul_right /-\n@[simp]\ntheorem zero_lt_mul_right [MulPosStrictMono α] [MulPosReflectLT α] (h : 0 < c) : 0 < b * c ↔ 0 < b :=\n  by\n  convert mul_lt_mul_right h\n  simp\n#align zero_lt_mul_right zero_lt_mul_right\n-/\n\n",
 "zero_lt_mul_left":
 "#print zero_lt_mul_left /-\n@[simp]\ntheorem zero_lt_mul_left [PosMulStrictMono α] [PosMulReflectLT α] (h : 0 < c) : 0 < c * b ↔ 0 < b :=\n  by\n  convert mul_lt_mul_left h\n  simp\n#align zero_lt_mul_left zero_lt_mul_left\n-/\n\n",
 "toPosMulStrictMono":
 "#print PosMulMono.toPosMulStrictMono /-\ntheorem PosMulMono.toPosMulStrictMono [PosMulMono α] : PosMulStrictMono α :=\n  ⟨fun x a b h => (mul_le_mul_of_nonneg_left h.le x.2.le).lt_of_ne (h.ne ∘ mul_left_cancel₀ x.2.ne')⟩\n#align pos_mul_mono.to_pos_mul_strict_mono PosMulMono.toPosMulStrictMono\n-/\n\n",
 "toPosMulReflectLT":
 "#print PosMulMono.toPosMulReflectLT /-\ntheorem PosMulMono.toPosMulReflectLT [PosMulMono α] : PosMulReflectLT α :=\n  ⟨fun x a b h => lt_of_not_le fun h' => h.not_le <| mul_le_mul_of_nonneg_left h' x.prop⟩\n#align pos_mul_mono.to_pos_mul_reflect_lt PosMulMono.toPosMulReflectLT\n-/\n\n",
 "toPosMulMonoRev":
 "#print PosMulReflectLT.toPosMulMonoRev /-\ntheorem PosMulReflectLT.toPosMulMonoRev [PosMulReflectLT α] : PosMulMonoRev α :=\n  ⟨fun x a b h =>\n    h.eq_or_lt.elim (le_of_eq ∘ mul_left_cancel₀ x.2.ne.symm) fun h' => (lt_of_mul_lt_mul_left h' x.2.le).le⟩\n#align pos_mul_reflect_lt.to_pos_mul_mono_rev PosMulReflectLT.toPosMulMonoRev\n-/\n\n",
 "toPosMulMono":
 "#print PosMulReflectLT.toPosMulMono /-\ntheorem PosMulReflectLT.toPosMulMono [PosMulReflectLT α] : PosMulMono α :=\n  ⟨fun x a b h => le_of_not_lt fun h' => h.not_lt <| lt_of_mul_lt_mul_left h' x.prop⟩\n#align pos_mul_reflect_lt.to_pos_mul_mono PosMulReflectLT.toPosMulMono\n-/\n\n",
 "toMulPosStrictMono":
 "#print MulPosMono.toMulPosStrictMono /-\ntheorem MulPosMono.toMulPosStrictMono [MulPosMono α] : MulPosStrictMono α :=\n  ⟨fun x a b h => (mul_le_mul_of_nonneg_right h.le x.2.le).lt_of_ne (h.ne ∘ mul_right_cancel₀ x.2.ne')⟩\n#align mul_pos_mono.to_mul_pos_strict_mono MulPosMono.toMulPosStrictMono\n-/\n\n",
 "toMulPosReflectLT":
 "#print MulPosMono.toMulPosReflectLT /-\ntheorem MulPosMono.toMulPosReflectLT [MulPosMono α] : MulPosReflectLT α :=\n  ⟨fun x a b h => lt_of_not_le fun h' => h.not_le <| mul_le_mul_of_nonneg_right h' x.prop⟩\n#align mul_pos_mono.to_mul_pos_reflect_lt MulPosMono.toMulPosReflectLT\n-/\n\n",
 "toMulPosMonoRev":
 "#print MulPosReflectLT.toMulPosMonoRev /-\ntheorem MulPosReflectLT.toMulPosMonoRev [MulPosReflectLT α] : MulPosMonoRev α :=\n  ⟨fun x a b h =>\n    h.eq_or_lt.elim (le_of_eq ∘ mul_right_cancel₀ x.2.ne.symm) fun h' => (lt_of_mul_lt_mul_right h' x.2.le).le⟩\n#align mul_pos_reflect_lt.to_mul_pos_mono_rev MulPosReflectLT.toMulPosMonoRev\n-/\n\n",
 "toMulPosMono":
 "#print MulPosReflectLT.toMulPosMono /-\ntheorem MulPosReflectLT.toMulPosMono [MulPosReflectLT α] : MulPosMono α :=\n  ⟨fun x a b h => le_of_not_lt fun h' => h.not_lt <| lt_of_mul_lt_mul_right h' x.prop⟩\n#align mul_pos_reflect_lt.to_mul_pos_mono MulPosReflectLT.toMulPosMono\n-/\n\n",
 "pos_of_mul_pos_right":
 "#print pos_of_mul_pos_right /-\ntheorem pos_of_mul_pos_right [PosMulReflectLT α] (h : 0 < a * b) (ha : 0 ≤ a) : 0 < b :=\n  lt_of_mul_lt_mul_left ((MulZeroClass.mul_zero a).symm ▸ h : a * 0 < a * b) ha\n#align pos_of_mul_pos_right pos_of_mul_pos_right\n-/\n\n",
 "pos_of_mul_pos_left":
 "#print pos_of_mul_pos_left /-\ntheorem pos_of_mul_pos_left [MulPosReflectLT α] (h : 0 < a * b) (hb : 0 ≤ b) : 0 < a :=\n  lt_of_mul_lt_mul_right ((MulZeroClass.zero_mul b).symm ▸ h : 0 * b < a * b) hb\n#align pos_of_mul_pos_left pos_of_mul_pos_left\n-/\n\n",
 "pos_iff_pos_of_mul_pos":
 "#print pos_iff_pos_of_mul_pos /-\ntheorem pos_iff_pos_of_mul_pos [PosMulReflectLT α] [MulPosReflectLT α] (hab : 0 < a * b) : 0 < a ↔ 0 < b :=\n  ⟨pos_of_mul_pos_right hab ∘ le_of_lt, pos_of_mul_pos_left hab ∘ le_of_lt⟩\n#align pos_iff_pos_of_mul_pos pos_iff_pos_of_mul_pos\n-/\n\n",
 "pos_and_pos_or_neg_and_neg_of_mul_pos":
 "#print pos_and_pos_or_neg_and_neg_of_mul_pos /-\ntheorem pos_and_pos_or_neg_and_neg_of_mul_pos [PosMulMono α] [MulPosMono α] (hab : 0 < a * b) :\n    0 < a ∧ 0 < b ∨ a < 0 ∧ b < 0 := by\n  rcases lt_trichotomy 0 a with (ha | rfl | ha)\n  · refine' or.inl ⟨ha, lt_imp_lt_of_le_imp_le (fun hb => _) hab⟩\n    exact mul_nonpos_of_nonneg_of_nonpos ha.le hb\n  · rw [MulZeroClass.zero_mul] at hab\n    exact hab.false.elim\n  · refine' or.inr ⟨ha, lt_imp_lt_of_le_imp_le (fun hb => _) hab⟩\n    exact mul_nonpos_of_nonpos_of_nonneg ha.le hb\n#align pos_and_pos_or_neg_and_neg_of_mul_pos pos_and_pos_or_neg_and_neg_of_mul_pos\n-/\n\n",
 "posMulStrictMono_iff_posMulMonoRev":
 "#print posMulStrictMono_iff_posMulMonoRev /-\ntheorem posMulStrictMono_iff_posMulMonoRev : PosMulStrictMono α ↔ PosMulMonoRev α :=\n  ⟨@pos_mul_strict_mono.to_pos_mul_mono_rev _ _ _ _, @PosMulMonoRev.toPosMulStrictMono _ _ _ _⟩\n#align pos_mul_strict_mono_iff_pos_mul_mono_rev posMulStrictMono_iff_posMulMonoRev\n-/\n\n",
 "posMulStrictMono_iff_mulPosStrictMono":
 "#print posMulStrictMono_iff_mulPosStrictMono /-\ntheorem posMulStrictMono_iff_mulPosStrictMono : PosMulStrictMono α ↔ MulPosStrictMono α := by simp! only [mul_comm]\n#align pos_mul_strict_mono_iff_mul_pos_strict_mono posMulStrictMono_iff_mulPosStrictMono\n-/\n\n",
 "posMulReflectLT_iff_mulPosReflectLT":
 "#print posMulReflectLT_iff_mulPosReflectLT /-\ntheorem posMulReflectLT_iff_mulPosReflectLT : PosMulReflectLT α ↔ MulPosReflectLT α := by simp! only [mul_comm]\n#align pos_mul_reflect_lt_iff_mul_pos_reflect_lt posMulReflectLT_iff_mulPosReflectLT\n-/\n\n",
 "posMulReflectLT_iff_contravariant_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print posMulReflectLT_iff_contravariant_pos /-\ntheorem posMulReflectLT_iff_contravariant_pos :\n    PosMulReflectLT α ↔ ContravariantClass («exprα>0») α (fun x y => x * y) (· < ·) :=\n  ⟨@PosMulReflectLT.to_contravariantClass_pos_mul_lt _ _ _ _, fun h =>\n    ⟨fun a b c h => by\n      obtain ha | ha := a.prop.eq_or_gt\n      · simpa [ha] using h\n      · exact @contravariant_class.elim («exprα>0») α (fun x y => x * y) (· < ·) _ ⟨_, ha⟩ _ _ h⟩⟩\n#align pos_mul_reflect_lt_iff_contravariant_pos posMulReflectLT_iff_contravariant_pos\n-/\n\n",
 "posMulMono_iff_posMulStrictMono":
 "#print posMulMono_iff_posMulStrictMono /-\ntheorem posMulMono_iff_posMulStrictMono : PosMulMono α ↔ PosMulStrictMono α :=\n  ⟨@PosMulMono.toPosMulStrictMono α _ _, @PosMulStrictMono.toPosMulMono α _ _⟩\n#align pos_mul_mono_iff_pos_mul_strict_mono posMulMono_iff_posMulStrictMono\n-/\n\n",
 "posMulMono_iff_posMulReflectLT":
 "#print posMulMono_iff_posMulReflectLT /-\ntheorem posMulMono_iff_posMulReflectLT : PosMulMono α ↔ PosMulReflectLT α :=\n  ⟨@PosMulMono.toPosMulReflectLT _ _ _ _, @PosMulReflectLT.toPosMulMono _ _ _ _⟩\n#align pos_mul_mono_iff_pos_mul_reflect_lt posMulMono_iff_posMulReflectLT\n-/\n\n",
 "posMulMono_iff_mulPosMono":
 "#print posMulMono_iff_mulPosMono /-\ntheorem posMulMono_iff_mulPosMono : PosMulMono α ↔ MulPosMono α := by simp! only [mul_comm]\n#align pos_mul_mono_iff_mul_pos_mono posMulMono_iff_mulPosMono\n-/\n\n",
 "posMulMono_iff_covariant_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print posMulMono_iff_covariant_pos /-\ntheorem posMulMono_iff_covariant_pos : PosMulMono α ↔ CovariantClass («exprα>0») α (fun x y => x * y) (· ≤ ·) :=\n  ⟨@PosMulMono.to_covariantClass_pos_mul_le _ _ _ _, fun h =>\n    ⟨fun a b c h => by\n      obtain ha | ha := a.prop.eq_or_gt\n      · simp only [ha, MulZeroClass.zero_mul]\n      · exact @covariant_class.elim («exprα>0») α (fun x y => x * y) (· ≤ ·) _ ⟨_, ha⟩ _ _ h⟩⟩\n#align pos_mul_mono_iff_covariant_pos posMulMono_iff_covariant_pos\n-/\n\n",
 "posMulMonoRev_iff_posMulReflectLT":
 "#print posMulMonoRev_iff_posMulReflectLT /-\ntheorem posMulMonoRev_iff_posMulReflectLT : PosMulMonoRev α ↔ PosMulReflectLT α :=\n  ⟨@PosMulMonoRev.toPosMulReflectLT α _ _, @PosMulReflectLT.toPosMulMonoRev α _ _⟩\n#align pos_mul_mono_rev_iff_pos_mul_reflect_lt posMulMonoRev_iff_posMulReflectLT\n-/\n\n",
 "posMulMonoRev_iff_mulPosMonoRev":
 "#print posMulMonoRev_iff_mulPosMonoRev /-\ntheorem posMulMonoRev_iff_mulPosMonoRev : PosMulMonoRev α ↔ MulPosMonoRev α := by simp! only [mul_comm]\n#align pos_mul_mono_rev_iff_mul_pos_mono_rev posMulMonoRev_iff_mulPosMonoRev\n-/\n\n",
 "one_lt_mul_of_lt_of_lt":
 "#print Right.one_lt_mul_of_lt_of_lt /-\n/-- Assumes right covariance. -/\ntheorem Right.one_lt_mul_of_lt_of_lt [MulPosStrictMono α] (ha : 1 < a) (hb : 1 < b) (b0 : 0 < b) : 1 < a * b :=\n  lt_mul_of_one_lt_of_lt_of_pos ha hb b0\n#align right.one_lt_mul_of_lt_of_lt Right.one_lt_mul_of_lt_of_lt\n-/\n\n",
 "one_lt_mul_of_lt_of_le_of_pos":
 "#print Right.one_lt_mul_of_lt_of_le_of_pos /-\n/-- Assumes right covariance. -/\ntheorem Right.one_lt_mul_of_lt_of_le_of_pos [MulPosStrictMono α] (ha : 1 < a) (hb : 1 ≤ b) (b0 : 0 < b) : 1 < a * b :=\n  lt_mul_of_one_lt_of_le_of_pos ha hb b0\n#align right.one_lt_mul_of_lt_of_le_of_pos Right.one_lt_mul_of_lt_of_le_of_pos\n-/\n\n",
 "one_lt_mul_of_le_of_lt_of_pos":
 "#print Left.one_lt_mul_of_le_of_lt_of_pos /-\n/-- Assumes left covariance. -/\ntheorem Left.one_lt_mul_of_le_of_lt_of_pos [PosMulStrictMono α] (ha : 1 ≤ a) (hb : 1 < b) (a0 : 0 < a) : 1 < a * b :=\n  lt_mul_of_le_of_one_lt_of_pos ha hb a0\n#align left.one_lt_mul_of_le_of_lt_of_pos Left.one_lt_mul_of_le_of_lt_of_pos\n-/\n\n",
 "one_lt_mul_of_le_of_lt_of_nonneg":
 "#print Right.one_lt_mul_of_le_of_lt_of_nonneg /-\n/-- Assumes right covariance. -/\ntheorem Right.one_lt_mul_of_le_of_lt_of_nonneg [MulPosMono α] (ha : 1 ≤ a) (hb : 1 < b) (b0 : 0 ≤ b) : 1 < a * b :=\n  lt_mul_of_one_le_of_lt_of_nonneg ha hb b0\n#align right.one_lt_mul_of_le_of_lt_of_nonneg Right.one_lt_mul_of_le_of_lt_of_nonneg\n-/\n\n",
 "one_le_mul_of_le_of_le":
 "#print Right.one_le_mul_of_le_of_le /-\n/-- Assumes right covariance. -/\ntheorem Right.one_le_mul_of_le_of_le [MulPosMono α] (ha : 1 ≤ a) (hb : 1 ≤ b) (b0 : 0 ≤ b) : 1 ≤ a * b :=\n  le_mul_of_one_le_of_le_of_nonneg ha hb b0\n#align right.one_le_mul_of_le_of_le Right.one_le_mul_of_le_of_le\n-/\n\n",
 "neg_of_mul_pos_right":
 "#print neg_of_mul_pos_right /-\ntheorem neg_of_mul_pos_right [PosMulMono α] [MulPosMono α] (h : 0 < a * b) (ha : a ≤ 0) : b < 0 :=\n  ((pos_and_pos_or_neg_and_neg_of_mul_pos h).resolve_left fun h => h.1.not_le ha).2\n#align neg_of_mul_pos_right neg_of_mul_pos_right\n-/\n\n",
 "neg_of_mul_pos_left":
 "#print neg_of_mul_pos_left /-\ntheorem neg_of_mul_pos_left [PosMulMono α] [MulPosMono α] (h : 0 < a * b) (ha : b ≤ 0) : a < 0 :=\n  ((pos_and_pos_or_neg_and_neg_of_mul_pos h).resolve_left fun h => h.2.not_le ha).1\n#align neg_of_mul_pos_left neg_of_mul_pos_left\n-/\n\n",
 "neg_of_mul_neg_right":
 "#print Right.neg_of_mul_neg_right /-\ntheorem Right.neg_of_mul_neg_right [MulPosMono α] (h : a * b < 0) (h1 : 0 ≤ b) : a < 0 :=\n  lt_of_not_ge fun h2 : a ≥ 0 => (Right.mul_nonneg h2 h1).not_lt h\n#align right.neg_of_mul_neg_right Right.neg_of_mul_neg_right\n-/\n\n",
 "neg_of_mul_neg_left":
 "#print Right.neg_of_mul_neg_left /-\ntheorem Right.neg_of_mul_neg_left [MulPosMono α] (h : a * b < 0) (h1 : 0 ≤ a) : b < 0 :=\n  lt_of_not_ge fun h2 : b ≥ 0 => (Right.mul_nonneg h1 h2).not_lt h\n#align right.neg_of_mul_neg_left Right.neg_of_mul_neg_left\n-/\n\n",
 "neg_iff_neg_of_mul_pos":
 "#print neg_iff_neg_of_mul_pos /-\ntheorem neg_iff_neg_of_mul_pos [PosMulMono α] [MulPosMono α] (hab : 0 < a * b) : a < 0 ↔ b < 0 :=\n  ⟨neg_of_mul_pos_right hab ∘ le_of_lt, neg_of_mul_pos_left hab ∘ le_of_lt⟩\n#align neg_iff_neg_of_mul_pos neg_iff_neg_of_mul_pos\n-/\n\n",
 "mul_self_le_mul_self":
 "#print mul_self_le_mul_self /-\ntheorem mul_self_le_mul_self [PosMulMono α] [MulPosMono α] (ha : 0 ≤ a) (hab : a ≤ b) : a * a ≤ b * b :=\n  mul_le_mul hab hab ha <| ha.trans hab\n#align mul_self_le_mul_self mul_self_le_mul_self\n-/\n\n",
 "mul_right_cancel_iff_of_pos":
 "#print mul_right_cancel_iff_of_pos /-\ntheorem mul_right_cancel_iff_of_pos [MulPosMonoRev α] (b0 : 0 < b) : a * b = c * b ↔ a = c :=\n  ⟨fun h => (le_of_mul_le_mul_of_pos_right h.le b0).antisymm <| le_of_mul_le_mul_of_pos_right h.ge b0, congr_arg _⟩\n#align mul_right_cancel_iff_of_pos mul_right_cancel_iff_of_pos\n-/\n\n",
 "mul_pos":
 "#print Right.mul_pos /-\n/-- Assumes right covariance. -/\ntheorem Right.mul_pos [MulPosStrictMono α] (ha : 0 < a) (hb : 0 < b) : 0 < a * b := by\n  simpa only [MulZeroClass.zero_mul] using mul_lt_mul_of_pos_right ha hb\n#align right.mul_pos Right.mul_pos\n-/\n\n",
 "mul_nonpos_of_nonpos_of_nonneg":
 "#print mul_nonpos_of_nonpos_of_nonneg /-\ntheorem mul_nonpos_of_nonpos_of_nonneg [MulPosMono α] (ha : a ≤ 0) (hb : 0 ≤ b) : a * b ≤ 0 := by\n  simpa only [MulZeroClass.zero_mul] using mul_le_mul_of_nonneg_right ha hb\n#align mul_nonpos_of_nonpos_of_nonneg mul_nonpos_of_nonpos_of_nonneg\n-/\n\n",
 "mul_nonpos_of_nonneg_of_nonpos":
 "#print mul_nonpos_of_nonneg_of_nonpos /-\ntheorem mul_nonpos_of_nonneg_of_nonpos [PosMulMono α] (ha : 0 ≤ a) (hb : b ≤ 0) : a * b ≤ 0 := by\n  simpa only [MulZeroClass.mul_zero] using mul_le_mul_of_nonneg_left hb ha\n#align mul_nonpos_of_nonneg_of_nonpos mul_nonpos_of_nonneg_of_nonpos\n-/\n\n",
 "mul_nonneg":
 "#print Right.mul_nonneg /-\n/-- Assumes right covariance. -/\ntheorem Right.mul_nonneg [MulPosMono α] (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a * b := by\n  simpa only [MulZeroClass.zero_mul] using mul_le_mul_of_nonneg_right ha hb\n#align right.mul_nonneg Right.mul_nonneg\n-/\n\n",
 "mul_neg_of_pos_of_neg":
 "#print mul_neg_of_pos_of_neg /-\ntheorem mul_neg_of_pos_of_neg [PosMulStrictMono α] (ha : 0 < a) (hb : b < 0) : a * b < 0 := by\n  simpa only [MulZeroClass.mul_zero] using mul_lt_mul_of_pos_left hb ha\n#align mul_neg_of_pos_of_neg mul_neg_of_pos_of_neg\n-/\n\n",
 "mul_neg_of_neg_of_pos":
 "#print mul_neg_of_neg_of_pos /-\ntheorem mul_neg_of_neg_of_pos [MulPosStrictMono α] (ha : a < 0) (hb : 0 < b) : a * b < 0 := by\n  simpa only [MulZeroClass.zero_mul] using mul_lt_mul_of_pos_right ha hb\n#align mul_neg_of_neg_of_pos mul_neg_of_neg_of_pos\n-/\n\n",
 "mul_lt_one_of_lt_of_le_of_pos":
 "#print Right.mul_lt_one_of_lt_of_le_of_pos /-\n/-- Assumes right covariance. -/\ntheorem Right.mul_lt_one_of_lt_of_le_of_pos [MulPosStrictMono α] (ha : a < 1) (hb : b ≤ 1) (b0 : 0 < b) : a * b < 1 :=\n  mul_lt_of_lt_one_of_le_of_pos ha hb b0\n#align right.mul_lt_one_of_lt_of_le_of_pos Right.mul_lt_one_of_lt_of_le_of_pos\n-/\n\n",
 "mul_lt_one_of_le_of_lt_of_nonneg":
 "#print Right.mul_lt_one_of_le_of_lt_of_nonneg /-\n/-- Assumes right covariance. -/\ntheorem Right.mul_lt_one_of_le_of_lt_of_nonneg [MulPosMono α] (ha : a ≤ 1) (hb : b < 1) (b0 : 0 ≤ b) : a * b < 1 :=\n  mul_lt_of_le_one_of_lt_of_nonneg ha hb b0\n#align right.mul_lt_one_of_le_of_lt_of_nonneg Right.mul_lt_one_of_le_of_lt_of_nonneg\n-/\n\n",
 "mul_lt_of_mul_lt_of_nonneg_right":
 "#print mul_lt_of_mul_lt_of_nonneg_right /-\ntheorem mul_lt_of_mul_lt_of_nonneg_right [MulPosMono α] (h : a * b < c) (hda : d ≤ a) (hb : 0 ≤ b) : d * b < c :=\n  (mul_le_mul_of_nonneg_right hda hb).trans_lt h\n#align mul_lt_of_mul_lt_of_nonneg_right mul_lt_of_mul_lt_of_nonneg_right\n-/\n\n",
 "mul_lt_of_mul_lt_of_nonneg_left":
 "#print mul_lt_of_mul_lt_of_nonneg_left /-\ntheorem mul_lt_of_mul_lt_of_nonneg_left [PosMulMono α] (h : a * b < c) (hdb : d ≤ b) (ha : 0 ≤ a) : a * d < c :=\n  (mul_le_mul_of_nonneg_left hdb ha).trans_lt h\n#align mul_lt_of_mul_lt_of_nonneg_left mul_lt_of_mul_lt_of_nonneg_left\n-/\n\n",
 "mul_lt_of_lt_one_right":
 "#print mul_lt_of_lt_one_right /-\ntheorem mul_lt_of_lt_one_right [PosMulStrictMono α] (ha : 0 < a) (h : b < 1) : a * b < a := by\n  simpa only [mul_one] using mul_lt_mul_of_pos_left h ha\n#align mul_lt_of_lt_one_right mul_lt_of_lt_one_right\n-/\n\n",
 "mul_lt_of_lt_one_of_lt_of_pos":
 "#print mul_lt_of_lt_one_of_lt_of_pos /-\ntheorem mul_lt_of_lt_one_of_lt_of_pos [PosMulStrictMono α] [MulPosStrictMono α] (ha : a < 1) (bc : b < c) (a0 : 0 < a)\n    (c0 : 0 < c) : a * b < c :=\n  (mul_lt_mul_of_pos_left bc a0).trans <| mul_lt_of_lt_one_left c0 ha\n#align mul_lt_of_lt_one_of_lt_of_pos mul_lt_of_lt_one_of_lt_of_pos\n-/\n\n",
 "mul_lt_of_lt_one_of_le_of_pos":
 "#print mul_lt_of_lt_one_of_le_of_pos /-\ntheorem mul_lt_of_lt_one_of_le_of_pos [MulPosStrictMono α] (ha : a < 1) (h : b ≤ c) (hb : 0 < b) : a * b < c :=\n  (mul_lt_of_lt_one_left hb ha).trans_le h\n#align mul_lt_of_lt_one_of_le_of_pos mul_lt_of_lt_one_of_le_of_pos\n-/\n\n",
 "mul_lt_of_lt_one_of_le'":
 "#print mul_lt_of_lt_one_of_le' /-\ntheorem mul_lt_of_lt_one_of_le' [PosMulMono α] [MulPosStrictMono α] (ha : a < 1) (bc : b ≤ c) (a0 : 0 ≤ a)\n    (c0 : 0 < c) : a * b < c :=\n  (mul_le_mul_of_nonneg_left bc a0).trans_lt <| mul_lt_of_lt_one_left c0 ha\n#align mul_lt_of_lt_one_of_le' mul_lt_of_lt_one_of_le'\n-/\n\n",
 "mul_lt_of_lt_one_left":
 "#print mul_lt_of_lt_one_left /-\ntheorem mul_lt_of_lt_one_left [MulPosStrictMono α] (hb : 0 < b) (h : a < 1) : a * b < b := by\n  simpa only [one_mul] using mul_lt_mul_of_pos_right h hb\n#align mul_lt_of_lt_one_left mul_lt_of_lt_one_left\n-/\n\n",
 "mul_lt_of_lt_of_lt_one_of_pos":
 "#print mul_lt_of_lt_of_lt_one_of_pos /-\ntheorem mul_lt_of_lt_of_lt_one_of_pos [PosMulMono α] [MulPosStrictMono α] (bc : b < c) (ha : a ≤ 1) (a0 : 0 < a)\n    (c0 : 0 ≤ c) : b * a < c :=\n  (mul_lt_mul_of_pos_right bc a0).trans_le <| mul_le_of_le_one_right c0 ha\n#align mul_lt_of_lt_of_lt_one_of_pos mul_lt_of_lt_of_lt_one_of_pos\n-/\n\n",
 "mul_lt_of_lt_of_le_one_of_nonneg":
 "#print Left.mul_lt_of_lt_of_le_one_of_nonneg /-\n/-- Assumes left covariance. -/\ntheorem Left.mul_lt_of_lt_of_le_one_of_nonneg [PosMulMono α] (ha : a < 1) (hb : b ≤ 1) (a0 : 0 ≤ a) : a * b < 1 :=\n  mul_lt_of_lt_of_le_one_of_nonneg ha hb a0\n#align left.mul_lt_of_lt_of_le_one_of_nonneg Left.mul_lt_of_lt_of_le_one_of_nonneg\n-/\n\n",
 "mul_lt_of_lt_of_le_one'":
 "#print mul_lt_of_lt_of_le_one' /-\ntheorem mul_lt_of_lt_of_le_one' [PosMulMono α] [MulPosStrictMono α] (bc : b < c) (ha : a ≤ 1) (a0 : 0 < a)\n    (c0 : 0 ≤ c) : b * a < c :=\n  (mul_lt_mul_of_pos_right bc a0).trans_le <| mul_le_of_le_one_right c0 ha\n#align mul_lt_of_lt_of_le_one' mul_lt_of_lt_of_le_one'\n-/\n\n",
 "mul_lt_of_le_one_of_lt_of_nonneg":
 "#print mul_lt_of_le_one_of_lt_of_nonneg /-\ntheorem mul_lt_of_le_one_of_lt_of_nonneg [MulPosMono α] (ha : a ≤ 1) (h : b < c) (hb : 0 ≤ b) : a * b < c :=\n  (mul_le_of_le_one_left hb ha).trans_lt h\n#align mul_lt_of_le_one_of_lt_of_nonneg mul_lt_of_le_one_of_lt_of_nonneg\n-/\n\n",
 "mul_lt_of_le_one_of_lt'":
 "#print mul_lt_of_le_one_of_lt' /-\ntheorem mul_lt_of_le_one_of_lt' [PosMulStrictMono α] [MulPosMono α] (ha : a ≤ 1) (bc : b < c) (a0 : 0 < a)\n    (c0 : 0 ≤ c) : a * b < c :=\n  (mul_lt_mul_of_pos_left bc a0).trans_le <| mul_le_of_le_one_left c0 ha\n#align mul_lt_of_le_one_of_lt' mul_lt_of_le_one_of_lt'\n-/\n\n",
 "mul_lt_of_le_of_lt_one_of_pos":
 "#print Left.mul_lt_of_le_of_lt_one_of_pos /-\n/-- Assumes left covariance. -/\ntheorem Left.mul_lt_of_le_of_lt_one_of_pos [PosMulStrictMono α] (ha : a ≤ 1) (hb : b < 1) (a0 : 0 < a) : a * b < 1 :=\n  mul_lt_of_le_of_lt_one_of_pos ha hb a0\n#align left.mul_lt_of_le_of_lt_one_of_pos Left.mul_lt_of_le_of_lt_one_of_pos\n-/\n\n",
 "mul_lt_of_le_of_lt_one'":
 "#print mul_lt_of_le_of_lt_one' /-\ntheorem mul_lt_of_le_of_lt_one' [PosMulStrictMono α] [MulPosMono α] (bc : b ≤ c) (ha : a < 1) (a0 : 0 ≤ a)\n    (c0 : 0 < c) : b * a < c :=\n  (mul_le_mul_of_nonneg_right bc a0).trans_lt <| mul_lt_of_lt_one_right c0 ha\n#align mul_lt_of_le_of_lt_one' mul_lt_of_le_of_lt_one'\n-/\n\n",
 "mul_lt_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mul_lt_mul_right /-\n@[simp]\ntheorem mul_lt_mul_right [MulPosStrictMono α] [MulPosReflectLT α] (a0 : 0 < a) : b * a < c * a ↔ b < c :=\n  @rel_iff_cov («exprα>0») α (fun x y => y * x) (· < ·) _ _ ⟨a, a0⟩ _ _\n#align mul_lt_mul_right mul_lt_mul_right\n-/\n\n",
 "mul_lt_mul_of_pos_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mul_lt_mul_of_pos_right /-\ntheorem mul_lt_mul_of_pos_right [MulPosStrictMono α] (bc : b < c) (a0 : 0 < a) : b * a < c * a :=\n  @covariant_class.elim («exprα>0») α (fun x y => y * x) (· < ·) _ ⟨a, a0⟩ _ _ bc\n#align mul_lt_mul_of_pos_right mul_lt_mul_of_pos_right\n-/\n\n",
 "mul_lt_mul_of_pos_of_pos":
 "#print mul_lt_mul_of_pos_of_pos /-\ntheorem mul_lt_mul_of_pos_of_pos [PosMulStrictMono α] [MulPosStrictMono α] (h₁ : a < b) (h₂ : c < d) (a0 : 0 < a)\n    (d0 : 0 < d) : a * c < b * d :=\n  (mul_lt_mul_of_pos_left h₂ a0).trans (mul_lt_mul_of_pos_right h₁ d0)\n#align mul_lt_mul_of_pos_of_pos mul_lt_mul_of_pos_of_pos\n-/\n\n",
 "mul_lt_mul_of_pos_of_nonneg":
 "#print mul_lt_mul_of_pos_of_nonneg /-\ntheorem mul_lt_mul_of_pos_of_nonneg [PosMulStrictMono α] [MulPosMono α] (h₁ : a ≤ b) (h₂ : c < d) (a0 : 0 < a)\n    (d0 : 0 ≤ d) : a * c < b * d :=\n  (mul_lt_mul_of_pos_left h₂ a0).trans_le (mul_le_mul_of_nonneg_right h₁ d0)\n#align mul_lt_mul_of_pos_of_nonneg mul_lt_mul_of_pos_of_nonneg\n-/\n\n",
 "mul_lt_mul_of_pos_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mul_lt_mul_of_pos_left /-\ntheorem mul_lt_mul_of_pos_left [PosMulStrictMono α] (bc : b < c) (a0 : 0 < a) : a * b < a * c :=\n  @covariant_class.elim («exprα>0») α (fun x y => x * y) (· < ·) _ ⟨a, a0⟩ _ _ bc\n#align mul_lt_mul_of_pos_left mul_lt_mul_of_pos_left\n-/\n\n",
 "mul_lt_mul_of_nonneg_of_pos":
 "#print mul_lt_mul_of_nonneg_of_pos /-\ntheorem mul_lt_mul_of_nonneg_of_pos [PosMulMono α] [MulPosStrictMono α] (h₁ : a < b) (h₂ : c ≤ d) (a0 : 0 ≤ a)\n    (d0 : 0 < d) : a * c < b * d :=\n  (mul_le_mul_of_nonneg_left h₂ a0).trans_lt (mul_lt_mul_of_pos_right h₁ d0)\n#align mul_lt_mul_of_nonneg_of_pos mul_lt_mul_of_nonneg_of_pos\n-/\n\n",
 "mul_lt_mul_of_lt_of_lt'":
 "#print mul_lt_mul_of_lt_of_lt' /-\ntheorem mul_lt_mul_of_lt_of_lt' [PosMulStrictMono α] [MulPosStrictMono α] (h₁ : a < b) (h₂ : c < d) (b0 : 0 < b)\n    (c0 : 0 < c) : a * c < b * d :=\n  (mul_lt_mul_of_pos_right h₁ c0).trans (mul_lt_mul_of_pos_left h₂ b0)\n#align mul_lt_mul_of_lt_of_lt' mul_lt_mul_of_lt_of_lt'\n-/\n\n",
 "mul_lt_mul_of_le_of_lt'":
 "#print mul_lt_mul_of_le_of_lt' /-\ntheorem mul_lt_mul_of_le_of_lt' [PosMulMono α] [MulPosStrictMono α] (h₁ : a < b) (h₂ : c ≤ d) (b0 : 0 ≤ b)\n    (c0 : 0 < c) : a * c < b * d :=\n  (mul_lt_mul_of_pos_right h₁ c0).trans_le (mul_le_mul_of_nonneg_left h₂ b0)\n#align mul_lt_mul_of_le_of_lt' mul_lt_mul_of_le_of_lt'\n-/\n\n",
 "mul_lt_mul_of_le_of_le'":
 "#print mul_lt_mul_of_le_of_le' /-\ntheorem mul_lt_mul_of_le_of_le' [PosMulStrictMono α] [MulPosMono α] (h₁ : a ≤ b) (h₂ : c < d) (b0 : 0 < b)\n    (c0 : 0 ≤ c) : a * c < b * d :=\n  (mul_le_mul_of_nonneg_right h₁ c0).trans_lt (mul_lt_mul_of_pos_left h₂ b0)\n#align mul_lt_mul_of_le_of_le' mul_lt_mul_of_le_of_le'\n-/\n\n",
 "mul_lt_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mul_lt_mul_left /-\n@[simp]\ntheorem mul_lt_mul_left [PosMulStrictMono α] [PosMulReflectLT α] (a0 : 0 < a) : a * b < a * c ↔ b < c :=\n  @rel_iff_cov («exprα>0») α (fun x y => x * y) (· < ·) _ _ ⟨a, a0⟩ _ _\n#align mul_lt_mul_left mul_lt_mul_left\n-/\n\n",
 "mul_lt_iff_lt_one_right":
 "#print mul_lt_iff_lt_one_right /-\n@[simp]\ntheorem mul_lt_iff_lt_one_right [PosMulStrictMono α] [PosMulReflectLT α] (a0 : 0 < a) : a * b < a ↔ b < 1 :=\n  iff.trans (by rw [mul_one]) (mul_lt_mul_left a0)\n#align mul_lt_iff_lt_one_right mul_lt_iff_lt_one_right\n-/\n\n",
 "mul_lt_iff_lt_one_left":
 "#print mul_lt_iff_lt_one_left /-\n@[simp]\ntheorem mul_lt_iff_lt_one_left [MulPosStrictMono α] [MulPosReflectLT α] (b0 : 0 < b) : a * b < b ↔ a < 1 :=\n  iff.trans (by rw [one_mul]) (mul_lt_mul_right b0)\n#align mul_lt_iff_lt_one_left mul_lt_iff_lt_one_left\n-/\n\n",
 "mul_left_cancel_iff_of_pos":
 "#print mul_left_cancel_iff_of_pos /-\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\n-- see Note [lower instance priority]\ntheorem mul_left_cancel_iff_of_pos [PosMulMonoRev α] (a0 : 0 < a) : a * b = a * c ↔ b = c :=\n  ⟨fun h => (le_of_mul_le_mul_of_pos_left h.le a0).antisymm <| le_of_mul_le_mul_of_pos_left h.ge a0, congr_arg _⟩\n#align mul_left_cancel_iff_of_pos mul_left_cancel_iff_of_pos\n-/\n\n",
 "mul_le_one_of_le_of_le":
 "#print Right.mul_le_one_of_le_of_le /-\n/-- Assumes right covariance. -/\ntheorem Right.mul_le_one_of_le_of_le [MulPosMono α] (ha : a ≤ 1) (hb : b ≤ 1) (b0 : 0 ≤ b) : a * b ≤ 1 :=\n  mul_le_of_le_one_of_le_of_nonneg ha hb b0\n#align right.mul_le_one_of_le_of_le Right.mul_le_one_of_le_of_le\n-/\n\n",
 "mul_le_of_mul_le_of_nonneg_right":
 "#print mul_le_of_mul_le_of_nonneg_right /-\ntheorem mul_le_of_mul_le_of_nonneg_right [MulPosMono α] (h : a * b ≤ c) (hle : d ≤ a) (b0 : 0 ≤ b) : d * b ≤ c :=\n  (mul_le_mul_of_nonneg_right hle b0).trans h\n#align mul_le_of_mul_le_of_nonneg_right mul_le_of_mul_le_of_nonneg_right\n-/\n\n",
 "mul_le_of_mul_le_of_nonneg_left":
 "#print mul_le_of_mul_le_of_nonneg_left /-\ntheorem mul_le_of_mul_le_of_nonneg_left [PosMulMono α] (h : a * b ≤ c) (hle : d ≤ b) (a0 : 0 ≤ a) : a * d ≤ c :=\n  (mul_le_mul_of_nonneg_left hle a0).trans h\n#align mul_le_of_mul_le_of_nonneg_left mul_le_of_mul_le_of_nonneg_left\n-/\n\n",
 "mul_le_of_le_one_right":
 "#print mul_le_of_le_one_right /-\ntheorem mul_le_of_le_one_right [PosMulMono α] (ha : 0 ≤ a) (h : b ≤ 1) : a * b ≤ a := by\n  simpa only [mul_one] using mul_le_mul_of_nonneg_left h ha\n#align mul_le_of_le_one_right mul_le_of_le_one_right\n-/\n\n",
 "mul_le_of_le_one_of_le_of_nonneg":
 "#print mul_le_of_le_one_of_le_of_nonneg /-\ntheorem mul_le_of_le_one_of_le_of_nonneg [MulPosMono α] (ha : a ≤ 1) (h : b ≤ c) (hb : 0 ≤ b) : a * b ≤ c :=\n  (mul_le_of_le_one_left hb ha).trans h\n#align mul_le_of_le_one_of_le_of_nonneg mul_le_of_le_one_of_le_of_nonneg\n-/\n\n",
 "mul_le_of_le_one_of_le'":
 "#print mul_le_of_le_one_of_le' /-\ntheorem mul_le_of_le_one_of_le' [PosMulMono α] [MulPosMono α] (ha : a ≤ 1) (bc : b ≤ c) (a0 : 0 ≤ a) (c0 : 0 ≤ c) :\n    a * b ≤ c :=\n  (mul_le_mul_of_nonneg_left bc a0).trans <| mul_le_of_le_one_left c0 ha\n#align mul_le_of_le_one_of_le' mul_le_of_le_one_of_le'\n-/\n\n",
 "mul_le_of_le_one_left":
 "#print mul_le_of_le_one_left /-\ntheorem mul_le_of_le_one_left [MulPosMono α] (hb : 0 ≤ b) (h : a ≤ 1) : a * b ≤ b := by\n  simpa only [one_mul] using mul_le_mul_of_nonneg_right h hb\n#align mul_le_of_le_one_left mul_le_of_le_one_left\n-/\n\n",
 "mul_le_of_le_of_le_one_of_nonneg":
 "#print mul_le_of_le_of_le_one_of_nonneg /-\n/- Yaël: What's the point of these lemmas? They just chain an existing lemma with an assumption in\nall possible ways, thereby artificially inflating the API and making the truly relevant lemmas hard\nto find -/\ntheorem mul_le_of_le_of_le_one_of_nonneg [PosMulMono α] (h : b ≤ c) (ha : a ≤ 1) (hb : 0 ≤ b) : b * a ≤ c :=\n  (mul_le_of_le_one_right hb ha).trans h\n#align mul_le_of_le_of_le_one_of_nonneg mul_le_of_le_of_le_one_of_nonneg\n-/\n\n",
 "mul_le_of_le_of_le_one'":
 "#print mul_le_of_le_of_le_one' /-\ntheorem mul_le_of_le_of_le_one' [PosMulMono α] [MulPosMono α] (bc : b ≤ c) (ha : a ≤ 1) (a0 : 0 ≤ a) (c0 : 0 ≤ c) :\n    b * a ≤ c :=\n  (mul_le_mul_of_nonneg_right bc a0).trans <| mul_le_of_le_one_right c0 ha\n#align mul_le_of_le_of_le_one' mul_le_of_le_of_le_one'\n-/\n\n",
 "mul_le_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mul_le_mul_right /-\n@[simp]\ntheorem mul_le_mul_right [MulPosMono α] [MulPosMonoRev α] (a0 : 0 < a) : b * a ≤ c * a ↔ b ≤ c :=\n  @rel_iff_cov («exprα>0») α (fun x y => y * x) (· ≤ ·) _ _ ⟨a, a0⟩ _ _\n#align mul_le_mul_right mul_le_mul_right\n-/\n\n",
 "mul_le_mul_of_nonneg_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα≥0» -/\n#print mul_le_mul_of_nonneg_right /-\ntheorem mul_le_mul_of_nonneg_right [MulPosMono α] (h : b ≤ c) (a0 : 0 ≤ a) : b * a ≤ c * a :=\n  @covariant_class.elim («exprα≥0») α (fun x y => y * x) (· ≤ ·) _ ⟨a, a0⟩ _ _ h\n#align mul_le_mul_of_nonneg_right mul_le_mul_of_nonneg_right\n-/\n\n",
 "mul_le_mul_of_nonneg_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα≥0» -/\n#print mul_le_mul_of_nonneg_left /-\n/-\nCopyright (c) 2022 Damiano Testa. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Damiano Testa, Yuyang Zhao\n-/\n/- Notations for nonnegative and positive elements\nhttps://\nleanprover.zulipchat.com/#narrow/stream/113488-general/topic/notation.20for.20positive.20elements\n-/\ntheorem mul_le_mul_of_nonneg_left [PosMulMono α] (h : b ≤ c) (a0 : 0 ≤ a) : a * b ≤ a * c :=\n  @covariant_class.elim («exprα≥0») α (fun x y => x * y) (· ≤ ·) _ ⟨a, a0⟩ _ _ h\n#align mul_le_mul_of_nonneg_left mul_le_mul_of_nonneg_left\n-/\n\n",
 "mul_le_mul_of_le_of_le":
 "#print mul_le_mul_of_le_of_le /-\ntheorem mul_le_mul_of_le_of_le [PosMulMono α] [MulPosMono α] (h₁ : a ≤ b) (h₂ : c ≤ d) (a0 : 0 ≤ a) (d0 : 0 ≤ d) :\n    a * c ≤ b * d :=\n  (mul_le_mul_of_nonneg_left h₂ a0).trans <| mul_le_mul_of_nonneg_right h₁ d0\n#align mul_le_mul_of_le_of_le mul_le_mul_of_le_of_le\n-/\n\n",
 "mul_le_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mul_le_mul_left /-\n@[simp]\ntheorem mul_le_mul_left [PosMulMono α] [PosMulMonoRev α] (a0 : 0 < a) : a * b ≤ a * c ↔ b ≤ c :=\n  @rel_iff_cov («exprα>0») α (fun x y => x * y) (· ≤ ·) _ _ ⟨a, a0⟩ _ _\n#align mul_le_mul_left mul_le_mul_left\n-/\n\n",
 "mul_le_mul":
 "#print mul_le_mul /-\ntheorem mul_le_mul [PosMulMono α] [MulPosMono α] (h₁ : a ≤ b) (h₂ : c ≤ d) (c0 : 0 ≤ c) (b0 : 0 ≤ b) : a * c ≤ b * d :=\n  (mul_le_mul_of_nonneg_right h₁ c0).trans <| mul_le_mul_of_nonneg_left h₂ b0\n#align mul_le_mul mul_le_mul\n-/\n\n",
 "mul_le_iff_le_one_right":
 "#print mul_le_iff_le_one_right /-\n@[simp]\ntheorem mul_le_iff_le_one_right [PosMulMono α] [PosMulMonoRev α] (a0 : 0 < a) : a * b ≤ a ↔ b ≤ 1 :=\n  iff.trans (by rw [mul_one]) (mul_le_mul_left a0)\n#align mul_le_iff_le_one_right mul_le_iff_le_one_right\n-/\n\n",
 "mul_le_iff_le_one_left":
 "#print mul_le_iff_le_one_left /-\n@[simp]\ntheorem mul_le_iff_le_one_left [MulPosMono α] [MulPosMonoRev α] (b0 : 0 < b) : a * b ≤ b ↔ a ≤ 1 :=\n  iff.trans (by rw [one_mul]) (mul_le_mul_right b0)\n#align mul_le_iff_le_one_left mul_le_iff_le_one_left\n-/\n\n",
 "mul_eq_mul_iff_eq_and_eq_of_pos'":
 "#print mul_eq_mul_iff_eq_and_eq_of_pos' /-\ntheorem mul_eq_mul_iff_eq_and_eq_of_pos' [PosMulStrictMono α] [MulPosStrictMono α] [PosMulMonoRev α] [MulPosMonoRev α]\n    (hac : a ≤ b) (hbd : c ≤ d) (b0 : 0 < b) (c0 : 0 < c) : a * c = b * d ↔ a = b ∧ c = d :=\n  by\n  refine' ⟨fun h => _, fun h => congr_arg₂ (· * ·) h.1 h.2⟩\n  rcases hac.eq_or_lt with (rfl | hac)\n  · exact ⟨rfl, (mul_left_cancel_iff_of_pos b0).mp h⟩\n  rcases eq_or_lt_of_le hbd with (rfl | hbd)\n  · exact ⟨(mul_right_cancel_iff_of_pos c0).mp h, rfl⟩\n  exact ((mul_lt_mul_of_lt_of_lt' hac hbd b0 c0).ne h).elim\n#align mul_eq_mul_iff_eq_and_eq_of_pos' mul_eq_mul_iff_eq_and_eq_of_pos'\n-/\n\n",
 "mul_eq_mul_iff_eq_and_eq_of_pos":
 "#print mul_eq_mul_iff_eq_and_eq_of_pos /-\ntheorem mul_eq_mul_iff_eq_and_eq_of_pos [PosMulStrictMono α] [MulPosStrictMono α] [PosMulMonoRev α] [MulPosMonoRev α]\n    (hac : a ≤ b) (hbd : c ≤ d) (a0 : 0 < a) (d0 : 0 < d) : a * c = b * d ↔ a = b ∧ c = d :=\n  by\n  refine' ⟨fun h => _, fun h => congr_arg₂ (· * ·) h.1 h.2⟩\n  rcases hac.eq_or_lt with (rfl | hac)\n  · exact ⟨rfl, (mul_left_cancel_iff_of_pos a0).mp h⟩\n  rcases eq_or_lt_of_le hbd with (rfl | hbd)\n  · exact ⟨(mul_right_cancel_iff_of_pos d0).mp h, rfl⟩\n  exact ((mul_lt_mul_of_pos_of_pos hac hbd a0 d0).ne h).elim\n#align mul_eq_mul_iff_eq_and_eq_of_pos mul_eq_mul_iff_eq_and_eq_of_pos\n-/\n\n",
 "mulPosStrictMono_iff_mulPosMonoRev":
 "#print mulPosStrictMono_iff_mulPosMonoRev /-\ntheorem mulPosStrictMono_iff_mulPosMonoRev : MulPosStrictMono α ↔ MulPosMonoRev α :=\n  ⟨@mul_pos_strict_mono.to_mul_pos_mono_rev _ _ _ _, @MulPosMonoRev.toMulPosStrictMono _ _ _ _⟩\n#align mul_pos_strict_mono_iff_mul_pos_mono_rev mulPosStrictMono_iff_mulPosMonoRev\n-/\n\n",
 "mulPosReflectLT_iff_contravariant_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mulPosReflectLT_iff_contravariant_pos /-\ntheorem mulPosReflectLT_iff_contravariant_pos :\n    MulPosReflectLT α ↔ ContravariantClass («exprα>0») α (fun x y => y * x) (· < ·) :=\n  ⟨@MulPosReflectLT.to_contravariantClass_pos_mul_lt _ _ _ _, fun h =>\n    ⟨fun a b c h => by\n      obtain ha | ha := a.prop.eq_or_gt\n      · simpa [ha] using h\n      · exact @contravariant_class.elim («exprα>0») α (fun x y => y * x) (· < ·) _ ⟨_, ha⟩ _ _ h⟩⟩\n#align mul_pos_reflect_lt_iff_contravariant_pos mulPosReflectLT_iff_contravariant_pos\n-/\n\n",
 "mulPosMono_iff_mulPosStrictMono":
 "#print mulPosMono_iff_mulPosStrictMono /-\ntheorem mulPosMono_iff_mulPosStrictMono : MulPosMono α ↔ MulPosStrictMono α :=\n  ⟨@MulPosMono.toMulPosStrictMono α _ _, @MulPosStrictMono.toMulPosMono α _ _⟩\n#align mul_pos_mono_iff_mul_pos_strict_mono mulPosMono_iff_mulPosStrictMono\n-/\n\n",
 "mulPosMono_iff_mulPosReflectLT":
 "#print mulPosMono_iff_mulPosReflectLT /-\ntheorem mulPosMono_iff_mulPosReflectLT : MulPosMono α ↔ MulPosReflectLT α :=\n  ⟨@MulPosMono.toMulPosReflectLT _ _ _ _, @MulPosReflectLT.toMulPosMono _ _ _ _⟩\n#align mul_pos_mono_iff_mul_pos_reflect_lt mulPosMono_iff_mulPosReflectLT\n-/\n\n",
 "mulPosMono_iff_covariant_pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print mulPosMono_iff_covariant_pos /-\ntheorem mulPosMono_iff_covariant_pos : MulPosMono α ↔ CovariantClass («exprα>0») α (fun x y => y * x) (· ≤ ·) :=\n  ⟨@MulPosMono.to_covariantClass_pos_mul_le _ _ _ _, fun h =>\n    ⟨fun a b c h => by\n      obtain ha | ha := a.prop.eq_or_gt\n      · simp only [ha, MulZeroClass.mul_zero]\n      · exact @covariant_class.elim («exprα>0») α (fun x y => y * x) (· ≤ ·) _ ⟨_, ha⟩ _ _ h⟩⟩\n#align mul_pos_mono_iff_covariant_pos mulPosMono_iff_covariant_pos\n-/\n\n",
 "mulPosMonoRev_iff_mulPosReflectLT":
 "#print mulPosMonoRev_iff_mulPosReflectLT /-\ntheorem mulPosMonoRev_iff_mulPosReflectLT : MulPosMonoRev α ↔ MulPosReflectLT α :=\n  ⟨@MulPosMonoRev.toMulPosReflectLT α _ _, @MulPosReflectLT.toMulPosMonoRev α _ _⟩\n#align mul_pos_mono_rev_iff_mul_pos_reflect_lt mulPosMonoRev_iff_mulPosReflectLT\n-/\n\n",
 "lt_of_mul_lt_of_one_le_of_nonneg_left":
 "#print lt_of_mul_lt_of_one_le_of_nonneg_left /-\ntheorem lt_of_mul_lt_of_one_le_of_nonneg_left [PosMulMono α] (h : a * b < c) (hle : 1 ≤ b) (ha : 0 ≤ a) : a < c :=\n  (le_mul_of_one_le_right ha hle).trans_lt h\n#align lt_of_mul_lt_of_one_le_of_nonneg_left lt_of_mul_lt_of_one_le_of_nonneg_left\n-/\n\n",
 "lt_of_mul_lt_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα≥0» -/\n#print lt_of_mul_lt_mul_right /-\ntheorem lt_of_mul_lt_mul_right [MulPosReflectLT α] (h : b * a < c * a) (a0 : 0 ≤ a) : b < c :=\n  @contravariant_class.elim («exprα≥0») α (fun x y => y * x) (· < ·) _ ⟨a, a0⟩ _ _ h\n#align lt_of_mul_lt_mul_right lt_of_mul_lt_mul_right\n-/\n\n",
 "lt_of_mul_lt_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα≥0» -/\n#print lt_of_mul_lt_mul_left /-\ntheorem lt_of_mul_lt_mul_left [PosMulReflectLT α] (h : a * b < a * c) (a0 : 0 ≤ a) : b < c :=\n  @contravariant_class.elim («exprα≥0») α (fun x y => x * y) (· < ·) _ ⟨a, a0⟩ _ _ h\n#align lt_of_mul_lt_mul_left lt_of_mul_lt_mul_left\n-/\n\n",
 "lt_of_lt_mul_of_le_one_of_nonneg_right":
 "#print lt_of_lt_mul_of_le_one_of_nonneg_right /-\ntheorem lt_of_lt_mul_of_le_one_of_nonneg_right [MulPosMono α] (h : a < b * c) (hb : b ≤ 1) (hc : 0 ≤ c) : a < c :=\n  h.trans_le <| mul_le_of_le_one_left hc hb\n#align lt_of_lt_mul_of_le_one_of_nonneg_right lt_of_lt_mul_of_le_one_of_nonneg_right\n-/\n\n",
 "lt_of_lt_mul_of_le_one_of_nonneg_left":
 "#print lt_of_lt_mul_of_le_one_of_nonneg_left /-\ntheorem lt_of_lt_mul_of_le_one_of_nonneg_left [PosMulMono α] (h : a < b * c) (hc : c ≤ 1) (hb : 0 ≤ b) : a < b :=\n  h.trans_le <| mul_le_of_le_one_right hb hc\n#align lt_of_lt_mul_of_le_one_of_nonneg_left lt_of_lt_mul_of_le_one_of_nonneg_left\n-/\n\n",
 "lt_mul_of_one_lt_right":
 "#print lt_mul_of_one_lt_right /-\ntheorem lt_mul_of_one_lt_right [PosMulStrictMono α] (ha : 0 < a) (h : 1 < b) : a < a * b := by\n  simpa only [mul_one] using mul_lt_mul_of_pos_left h ha\n#align lt_mul_of_one_lt_right lt_mul_of_one_lt_right\n-/\n\n",
 "lt_mul_of_one_lt_of_lt_of_pos":
 "#print lt_mul_of_one_lt_of_lt_of_pos /-\ntheorem lt_mul_of_one_lt_of_lt_of_pos [MulPosStrictMono α] (ha : 1 < a) (h : b < c) (hc : 0 < c) : b < a * c :=\n  h.trans <| lt_mul_of_one_lt_left hc ha\n#align lt_mul_of_one_lt_of_lt_of_pos lt_mul_of_one_lt_of_lt_of_pos\n-/\n\n",
 "lt_mul_of_one_lt_of_lt_of_nonneg":
 "#print lt_mul_of_one_lt_of_lt_of_nonneg /-\ntheorem lt_mul_of_one_lt_of_lt_of_nonneg [MulPosMono α] (ha : 1 ≤ a) (h : b < c) (hc : 0 ≤ c) : b < a * c :=\n  h.trans_le <| le_mul_of_one_le_left hc ha\n#align lt_mul_of_one_lt_of_lt_of_nonneg lt_mul_of_one_lt_of_lt_of_nonneg\n-/\n\n",
 "lt_mul_of_one_lt_of_le_of_pos":
 "#print lt_mul_of_one_lt_of_le_of_pos /-\ntheorem lt_mul_of_one_lt_of_le_of_pos [MulPosStrictMono α] (ha : 1 < a) (h : b ≤ c) (hc : 0 < c) : b < a * c :=\n  h.trans_lt <| lt_mul_of_one_lt_left hc ha\n#align lt_mul_of_one_lt_of_le_of_pos lt_mul_of_one_lt_of_le_of_pos\n-/\n\n",
 "lt_mul_of_one_lt_left":
 "#print lt_mul_of_one_lt_left /-\ntheorem lt_mul_of_one_lt_left [MulPosStrictMono α] (hb : 0 < b) (h : 1 < a) : b < a * b := by\n  simpa only [one_mul] using mul_lt_mul_of_pos_right h hb\n#align lt_mul_of_one_lt_left lt_mul_of_one_lt_left\n-/\n\n",
 "lt_mul_of_one_le_of_lt_of_nonneg":
 "#print lt_mul_of_one_le_of_lt_of_nonneg /-\ntheorem lt_mul_of_one_le_of_lt_of_nonneg [MulPosMono α] (ha : 1 ≤ a) (h : b < c) (hc : 0 ≤ c) : b < a * c :=\n  h.trans_le <| le_mul_of_one_le_left hc ha\n#align lt_mul_of_one_le_of_lt_of_nonneg lt_mul_of_one_le_of_lt_of_nonneg\n-/\n\n",
 "lt_mul_of_lt_of_one_lt_of_pos":
 "#print lt_mul_of_lt_of_one_lt_of_pos /-\ntheorem lt_mul_of_lt_of_one_lt_of_pos [PosMulStrictMono α] [MulPosStrictMono α] (bc : b < c) (ha : 1 < a) (a0 : 0 < a)\n    (b0 : 0 < b) : b < c * a :=\n  (lt_mul_of_one_lt_right b0 ha).trans <| mul_lt_mul_of_pos_right bc a0\n#align lt_mul_of_lt_of_one_lt_of_pos lt_mul_of_lt_of_one_lt_of_pos\n-/\n\n",
 "lt_mul_of_lt_of_one_le_of_nonneg":
 "#print Left.lt_mul_of_lt_of_one_le_of_nonneg /-\n/-- Assumes left covariance. -/\ntheorem Left.lt_mul_of_lt_of_one_le_of_nonneg [PosMulMono α] (ha : 1 < a) (hb : 1 ≤ b) (a0 : 0 ≤ a) : 1 < a * b :=\n  lt_mul_of_lt_of_one_le_of_nonneg ha hb a0\n#align left.lt_mul_of_lt_of_one_le_of_nonneg Left.lt_mul_of_lt_of_one_le_of_nonneg\n-/\n\n",
 "lt_mul_of_lt_of_one_le'":
 "#print lt_mul_of_lt_of_one_le' /-\ntheorem lt_mul_of_lt_of_one_le' [PosMulMono α] [MulPosStrictMono α] (bc : b < c) (ha : 1 ≤ a) (a0 : 0 < a)\n    (b0 : 0 ≤ b) : b < c * a :=\n  (le_mul_of_one_le_right b0 ha).trans_lt <| mul_lt_mul_of_pos_right bc a0\n#align lt_mul_of_lt_of_one_le' lt_mul_of_lt_of_one_le'\n-/\n\n",
 "lt_mul_of_lt_mul_of_nonneg_right":
 "#print lt_mul_of_lt_mul_of_nonneg_right /-\ntheorem lt_mul_of_lt_mul_of_nonneg_right [MulPosMono α] (h : a < b * c) (hbd : b ≤ d) (hc : 0 ≤ c) : a < d * c :=\n  h.trans_le <| mul_le_mul_of_nonneg_right hbd hc\n#align lt_mul_of_lt_mul_of_nonneg_right lt_mul_of_lt_mul_of_nonneg_right\n-/\n\n",
 "lt_mul_of_lt_mul_of_nonneg_left":
 "#print lt_mul_of_lt_mul_of_nonneg_left /-\ntheorem lt_mul_of_lt_mul_of_nonneg_left [PosMulMono α] (h : a < b * c) (hcd : c ≤ d) (hb : 0 ≤ b) : a < b * d :=\n  h.trans_le <| mul_le_mul_of_nonneg_left hcd hb\n#align lt_mul_of_lt_mul_of_nonneg_left lt_mul_of_lt_mul_of_nonneg_left\n-/\n\n",
 "lt_mul_of_le_of_one_lt_of_pos":
 "#print lt_mul_of_le_of_one_lt_of_pos /-\ntheorem lt_mul_of_le_of_one_lt_of_pos [PosMulStrictMono α] (bc : b ≤ c) (ha : 1 < a) (c0 : 0 < c) : b < c * a :=\n  bc.trans_lt <| lt_mul_of_one_lt_right c0 ha\n#align lt_mul_of_le_of_one_lt_of_pos lt_mul_of_le_of_one_lt_of_pos\n-/\n\n",
 "lt_mul_of_le_of_one_lt'":
 "#print lt_mul_of_le_of_one_lt' /-\ntheorem lt_mul_of_le_of_one_lt' [PosMulStrictMono α] [MulPosMono α] (bc : b ≤ c) (ha : 1 < a) (a0 : 0 ≤ a)\n    (b0 : 0 < b) : b < c * a :=\n  (lt_mul_of_one_lt_right b0 ha).trans_le <| mul_le_mul_of_nonneg_right bc a0\n#align lt_mul_of_le_of_one_lt' lt_mul_of_le_of_one_lt'\n-/\n\n",
 "lt_mul_iff_one_lt_right":
 "#print lt_mul_iff_one_lt_right /-\n@[simp]\ntheorem lt_mul_iff_one_lt_right [PosMulStrictMono α] [PosMulReflectLT α] (a0 : 0 < a) : a < a * b ↔ 1 < b :=\n  iff.trans (by rw [mul_one]) (mul_lt_mul_left a0)\n#align lt_mul_iff_one_lt_right lt_mul_iff_one_lt_right\n-/\n\n",
 "lt_mul_iff_one_lt_left":
 "#print lt_mul_iff_one_lt_left /-\n@[simp]\ntheorem lt_mul_iff_one_lt_left [MulPosStrictMono α] [MulPosReflectLT α] (a0 : 0 < a) : a < b * a ↔ 1 < b :=\n  iff.trans (by rw [one_mul]) (mul_lt_mul_right a0)\n#align lt_mul_iff_one_lt_left lt_mul_iff_one_lt_left\n-/\n\n",
 "le_of_mul_le_of_one_le_of_nonneg_left":
 "#print le_of_mul_le_of_one_le_of_nonneg_left /-\ntheorem le_of_mul_le_of_one_le_of_nonneg_left [PosMulMono α] (h : a * b ≤ c) (hb : 1 ≤ b) (ha : 0 ≤ a) : a ≤ c :=\n  (le_mul_of_one_le_right ha hb).trans h\n#align le_of_mul_le_of_one_le_of_nonneg_left le_of_mul_le_of_one_le_of_nonneg_left\n-/\n\n",
 "le_of_mul_le_of_one_le_nonneg_right":
 "#print le_of_mul_le_of_one_le_nonneg_right /-\ntheorem le_of_mul_le_of_one_le_nonneg_right [MulPosMono α] (h : a * b ≤ c) (ha : 1 ≤ a) (hb : 0 ≤ b) : b ≤ c :=\n  (le_mul_of_one_le_left hb ha).trans h\n#align le_of_mul_le_of_one_le_nonneg_right le_of_mul_le_of_one_le_nonneg_right\n-/\n\n",
 "le_of_mul_le_mul_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print le_of_mul_le_mul_right /-\ntheorem le_of_mul_le_mul_right [MulPosMonoRev α] (bc : b * a ≤ c * a) (a0 : 0 < a) : b ≤ c :=\n  @contravariant_class.elim («exprα>0») α (fun x y => y * x) (· ≤ ·) _ ⟨a, a0⟩ _ _ bc\n#align le_of_mul_le_mul_right le_of_mul_le_mul_right\n-/\n\n",
 "le_of_mul_le_mul_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«exprα>0» -/\n#print le_of_mul_le_mul_left /-\ntheorem le_of_mul_le_mul_left [PosMulMonoRev α] (bc : a * b ≤ a * c) (a0 : 0 < a) : b ≤ c :=\n  @contravariant_class.elim («exprα>0») α (fun x y => x * y) (· ≤ ·) _ ⟨a, a0⟩ _ _ bc\n#align le_of_mul_le_mul_left le_of_mul_le_mul_left\n-/\n\n",
 "le_of_le_mul_of_le_one_of_nonneg_right":
 "#print le_of_le_mul_of_le_one_of_nonneg_right /-\ntheorem le_of_le_mul_of_le_one_of_nonneg_right [MulPosMono α] (h : a ≤ b * c) (hb : b ≤ 1) (hc : 0 ≤ c) : a ≤ c :=\n  h.trans <| mul_le_of_le_one_left hc hb\n#align le_of_le_mul_of_le_one_of_nonneg_right le_of_le_mul_of_le_one_of_nonneg_right\n-/\n\n",
 "le_of_le_mul_of_le_one_of_nonneg_left":
 "#print le_of_le_mul_of_le_one_of_nonneg_left /-\ntheorem le_of_le_mul_of_le_one_of_nonneg_left [PosMulMono α] (h : a ≤ b * c) (hc : c ≤ 1) (hb : 0 ≤ b) : a ≤ b :=\n  h.trans <| mul_le_of_le_one_right hb hc\n#align le_of_le_mul_of_le_one_of_nonneg_left le_of_le_mul_of_le_one_of_nonneg_left\n-/\n\n",
 "le_mul_of_one_le_right":
 "#print le_mul_of_one_le_right /-\ntheorem le_mul_of_one_le_right [PosMulMono α] (ha : 0 ≤ a) (h : 1 ≤ b) : a ≤ a * b := by\n  simpa only [mul_one] using mul_le_mul_of_nonneg_left h ha\n#align le_mul_of_one_le_right le_mul_of_one_le_right\n-/\n\n",
 "le_mul_of_one_le_of_le_of_nonneg":
 "#print le_mul_of_one_le_of_le_of_nonneg /-\ntheorem le_mul_of_one_le_of_le_of_nonneg [MulPosMono α] (ha : 1 ≤ a) (bc : b ≤ c) (c0 : 0 ≤ c) : b ≤ a * c :=\n  bc.trans <| le_mul_of_one_le_left c0 ha\n#align le_mul_of_one_le_of_le_of_nonneg le_mul_of_one_le_of_le_of_nonneg\n-/\n\n",
 "le_mul_of_one_le_left":
 "#print le_mul_of_one_le_left /-\ntheorem le_mul_of_one_le_left [MulPosMono α] (hb : 0 ≤ b) (h : 1 ≤ a) : b ≤ a * b := by\n  simpa only [one_mul] using mul_le_mul_of_nonneg_right h hb\n#align le_mul_of_one_le_left le_mul_of_one_le_left\n-/\n\n",
 "le_mul_of_le_of_one_le_of_nonneg":
 "#print le_mul_of_le_of_one_le_of_nonneg /-\ntheorem le_mul_of_le_of_one_le_of_nonneg [PosMulMono α] (h : b ≤ c) (ha : 1 ≤ a) (hc : 0 ≤ c) : b ≤ c * a :=\n  h.trans <| le_mul_of_one_le_right hc ha\n#align le_mul_of_le_of_one_le_of_nonneg le_mul_of_le_of_one_le_of_nonneg\n-/\n\n",
 "le_mul_of_le_of_one_le'":
 "#print le_mul_of_le_of_one_le' /-\ntheorem le_mul_of_le_of_one_le' [PosMulMono α] [MulPosMono α] (bc : b ≤ c) (ha : 1 ≤ a) (a0 : 0 ≤ a) (b0 : 0 ≤ b) :\n    b ≤ c * a :=\n  (le_mul_of_one_le_right b0 ha).trans <| mul_le_mul_of_nonneg_right bc a0\n#align le_mul_of_le_of_one_le' le_mul_of_le_of_one_le'\n-/\n\n",
 "le_mul_of_le_mul_of_nonneg_right":
 "#print le_mul_of_le_mul_of_nonneg_right /-\ntheorem le_mul_of_le_mul_of_nonneg_right [MulPosMono α] (h : a ≤ b * c) (hle : b ≤ d) (c0 : 0 ≤ c) : a ≤ d * c :=\n  h.trans (mul_le_mul_of_nonneg_right hle c0)\n#align le_mul_of_le_mul_of_nonneg_right le_mul_of_le_mul_of_nonneg_right\n-/\n\n",
 "le_mul_of_le_mul_of_nonneg_left":
 "#print le_mul_of_le_mul_of_nonneg_left /-\ntheorem le_mul_of_le_mul_of_nonneg_left [PosMulMono α] (h : a ≤ b * c) (hle : c ≤ d) (b0 : 0 ≤ b) : a ≤ b * d :=\n  h.trans (mul_le_mul_of_nonneg_left hle b0)\n#align le_mul_of_le_mul_of_nonneg_left le_mul_of_le_mul_of_nonneg_left\n-/\n\n",
 "le_mul_iff_one_le_right":
 "#print le_mul_iff_one_le_right /-\n@[simp]\ntheorem le_mul_iff_one_le_right [PosMulMono α] [PosMulMonoRev α] (a0 : 0 < a) : a ≤ a * b ↔ 1 ≤ b :=\n  iff.trans (by rw [mul_one]) (mul_le_mul_left a0)\n#align le_mul_iff_one_le_right le_mul_iff_one_le_right\n-/\n\n",
 "le_mul_iff_one_le_left":
 "#print le_mul_iff_one_le_left /-\n@[simp]\ntheorem le_mul_iff_one_le_left [MulPosMono α] [MulPosMonoRev α] (a0 : 0 < a) : a ≤ b * a ↔ 1 ≤ b :=\n  iff.trans (by rw [one_mul]) (mul_le_mul_right a0)\n#align le_mul_iff_one_le_left le_mul_iff_one_le_left\n-/\n\n",
 "exists_square_le'":
 "#print exists_square_le' /-\n-- Yaël: What's the point of this lemma? If we have `0 * 0 = 0`, then we can just take `b = 0`.\n-- proven with `a0 : 0 ≤ a` as `exists_square_le`\ntheorem exists_square_le' [PosMulStrictMono α] (a0 : 0 < a) : ∃ b : α, b * b ≤ a :=\n  by\n  obtain ha | ha := lt_or_le a 1\n  · exact ⟨a, (mul_lt_of_lt_one_right a0 ha).le⟩\n  · exact ⟨1, by rwa [mul_one]⟩\n#align exists_square_le' exists_square_le'\n-/\n\n"}