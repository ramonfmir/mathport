{"zpow_zpow_self":
 "@[simp, to_additive]\ntheorem zpow_zpow_self : Commute (a ^ m) (a ^ n) :=\n  (Commute.refl a).zpow_zpow m n\n#align zpow_zpow_self zpow_zpow_self\n\n",
 "zpow_zpow":
 "@[to_additive]\ntheorem zpow_zpow (h : Commute a b) (m n : ℤ) : Commute (a ^ m) (b ^ n) :=\n  (h.zpow_left m).zpow_right n\n#align zpow_zpow zpow_zpow\n\n",
 "zpow_two":
 "#print zpow_two /-\n@[to_additive two_zsmul]\ntheorem zpow_two (a : G) : a ^ (2 : ℤ) = a * a :=\n  by\n  convert pow_two a using 1\n  exact zpow_ofNat a 2\n#align zpow_two zpow_two\n-/\n\n",
 "zpow_self":
 "@[simp, to_additive]\ntheorem zpow_self : Commute (a ^ n) a :=\n  (Commute.refl a).zpow_left n\n#align zpow_self zpow_self\n\n",
 "zpow_right":
 "@[simp, to_additive]\ntheorem zpow_right (h : Commute a b) (m : ℤ) : Commute a (b ^ m) :=\n  h.zpow_right m\n#align zpow_right zpow_right\n\n",
 "zpow_one":
 "#print zpow_one /-\n-- the below line causes the linter to complain :-/\n-- attribute [simps] pow_monoid_hom nsmul_add_monoid_hom\n@[simp, to_additive one_zsmul]\ntheorem zpow_one (a : G) : a ^ (1 : ℤ) = a := by\n  convert pow_one a using 1\n  exact zpow_ofNat a 1\n#align zpow_one zpow_one\n-/\n\n",
 "zpow_neg_one":
 "#print zpow_neg_one /-\n@[to_additive neg_one_zsmul]\ntheorem zpow_neg_one (x : G) : x ^ (-1 : ℤ) = x⁻¹ :=\n  (zpow_negSucc x 0).trans <| congr_arg has_inv.inv (pow_one x)\n#align zpow_neg_one zpow_neg_one\n-/\n\n",
 "zpow_neg_coe_of_pos":
 "#print zpow_neg_coe_of_pos /-\n@[to_additive]\ntheorem zpow_neg_coe_of_pos (a : G) : ∀ {n : ℕ}, 0 < n → a ^ (-(n : ℤ)) = (a ^ n)⁻¹\n  | n + 1, _ => zpow_negSucc _ _\n#align zpow_neg_coe_of_pos zpow_neg_coe_of_pos\n-/\n\n",
 "zpow_neg":
 "#print zpow_neg /-\n@[simp, to_additive neg_zsmul]\ntheorem zpow_neg (a : α) : ∀ n : ℤ, a ^ (-n) = (a ^ n)⁻¹\n  | (n + 1 : ℕ) => div_inv_monoid.zpow_neg' _ _\n  | 0 => by\n    change a ^ (0 : ℤ) = (a ^ (0 : ℤ))⁻¹\n    simp\n  | -[n+1] => by\n    rw [zpow_negSucc, inv_inv, ← zpow_ofNat]\n    rfl\n#align zpow_neg zpow_neg\n-/\n\n",
 "zpow_left":
 "@[simp, to_additive]\ntheorem zpow_left (h : Commute a b) (m : ℤ) : Commute (a ^ m) b :=\n  (h.symm.zpow_right m).symm\n#align zpow_left zpow_left\n\n",
 "self_zpow":
 "@[simp, to_additive]\ntheorem self_zpow : Commute a (a ^ n) :=\n  (Commute.refl a).zpow_right n\n#align self_zpow self_zpow\n\n",
 "pow_two":
 "#print pow_two /-\n/-- Note that most of the lemmas about powers of two refer to it as `sq`. -/\n@[to_additive two_nsmul, nolint to_additive_doc]\ntheorem pow_two (a : M) : a ^ 2 = a * a := by rw [pow_succ, pow_one]\n#align pow_two pow_two\n-/\n\n",
 "pow_three'":
 "#print pow_three' /-\ntheorem pow_three' (a : M) : a ^ 3 = a * a * a := by rw [pow_succ', pow_two]\n#align pow_three' pow_three'\n-/\n\n",
 "pow_three":
 "#print pow_three /-\ntheorem pow_three (a : M) : a ^ 3 = a * (a * a) := by rw [pow_succ, pow_two]\n#align pow_three pow_three\n-/\n\n",
 "pow_sub_mul_pow":
 "#print pow_sub_mul_pow /-\n@[to_additive sub_nsmul_nsmul_add]\ntheorem pow_sub_mul_pow (a : M) {m n : ℕ} (h : m ≤ n) : a ^ (n - m) * a ^ m = a ^ n := by\n  rw [← pow_add, nat.sub_add_cancel h]\n#align pow_sub_mul_pow pow_sub_mul_pow\n-/\n\n",
 "pow_sub":
 "#print pow_sub /-\n@[to_additive sub_nsmul]\ntheorem pow_sub (a : G) {m n : ℕ} (h : n ≤ m) : a ^ (m - n) = a ^ m * (a ^ n)⁻¹ :=\n  eq_mul_inv_of_mul_eq <| by rw [← pow_add, nat.sub_add_cancel h]\n#align pow_sub pow_sub\n-/\n\n",
 "pow_right_comm":
 "#print pow_right_comm /-\n@[to_additive nsmul_left_comm]\ntheorem pow_right_comm (a : M) (m n : ℕ) : (a ^ m) ^ n = (a ^ n) ^ m := by rw [← pow_mul, nat.mul_comm, pow_mul]\n#align pow_right_comm pow_right_comm\n-/\n\n",
 "pow_one":
 "#print pow_one /-\n@[simp, to_additive one_nsmul]\ntheorem pow_one (a : M) : a ^ 1 = a := by rw [pow_succ, pow_zero, mul_one]\n#align pow_one pow_one\n-/\n\n",
 "pow_mul_pow_sub":
 "#print pow_mul_pow_sub /-\n@[to_additive nsmul_add_sub_nsmul]\ntheorem pow_mul_pow_sub (a : M) {m n : ℕ} (h : m ≤ n) : a ^ m * a ^ (n - m) = a ^ n := by\n  rw [← pow_add, nat.add_comm, nat.sub_add_cancel h]\n#align pow_mul_pow_sub pow_mul_pow_sub\n-/\n\n",
 "pow_mul_pow_eq_one":
 "#print pow_mul_pow_eq_one /-\n@[to_additive]\ntheorem pow_mul_pow_eq_one {a b : M} (n : ℕ) (h : a * b = 1) : a ^ n * b ^ n = 1 :=\n  by\n  induction' n with n hn\n  · simp\n  ·\n    calc\n      a ^ n.succ * b ^ n.succ = a ^ n * a * (b * b ^ n) := by rw [pow_succ', pow_succ]\n      _ = a ^ n * (a * b) * b ^ n := by simp only [mul_assoc]\n      _ = 1 := by simp [h, hn]\n      \n#align pow_mul_pow_eq_one pow_mul_pow_eq_one\n-/\n\n",
 "pow_mul_comm'":
 "#print pow_mul_comm' /-\n@[to_additive]\ntheorem pow_mul_comm' (a : M) (n : ℕ) : a ^ n * a = a * a ^ n :=\n  commute.pow_self a n\n#align pow_mul_comm' pow_mul_comm'\n-/\n\n",
 "pow_mul_comm":
 "#print pow_mul_comm /-\n@[to_additive]\ntheorem pow_mul_comm (a : M) (m n : ℕ) : a ^ m * a ^ n = a ^ n * a ^ m :=\n  Commute.pow_pow_self a m n\n#align pow_mul_comm pow_mul_comm\n-/\n\n",
 "pow_mul'":
 "#print pow_mul' /-\n@[to_additive mul_nsmul']\ntheorem pow_mul' (a : M) (m n : ℕ) : a ^ (m * n) = (a ^ n) ^ m := by rw [nat.mul_comm, pow_mul]\n#align pow_mul' pow_mul'\n-/\n\n",
 "pow_mul":
 "#print pow_mul /-\n@[to_additive mul_nsmul]\ntheorem pow_mul (a : M) (m n : ℕ) : a ^ (m * n) = (a ^ m) ^ n :=\n  by\n  induction' n with n ih\n  · rw [nat.mul_zero, pow_zero, pow_zero]\n  · rw [nat.mul_succ, pow_add, pow_succ', ih]\n#align pow_mul pow_mul\n-/\n\n",
 "pow_ite":
 "#print pow_ite /-\n/-\nCopyright (c) 2015 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Robert Y. Lewis\n-/\n@[simp]\ntheorem pow_ite (P : Prop) [decidable P] (a : M) (b c : ℕ) : (a ^ if P then b else c) = if P then a ^ b else a ^ c := by\n  split_ifs <;> rfl\n#align pow_ite pow_ite\n-/\n\n",
 "pow_inv_comm":
 "#print pow_inv_comm /-\n@[to_additive]\ntheorem pow_inv_comm (a : G) (m n : ℕ) : a⁻¹ ^ m * a ^ n = a ^ n * a⁻¹ ^ m :=\n  (Commute.refl a).inv_left.pow_pow _ _\n#align pow_inv_comm pow_inv_comm\n-/\n\n",
 "pow_eq_pow_mod":
 "#print pow_eq_pow_mod /-\n/-- If `x ^ n = 1`, then `x ^ m` is the same as `x ^ (m % n)` -/\n@[to_additive nsmul_eq_mod_nsmul \"If `n • x = 0`, then `m • x` is the same as `(m % n) • x`\"]\ntheorem pow_eq_pow_mod {M : Type _} [monoid M] {x : M} (m : ℕ) {n : ℕ} (h : x ^ n = 1) : x ^ m = x ^ (m % n) :=\n  by\n  have t := congr_arg (fun a => x ^ a) ((nat.add_comm _ _).trans (nat.mod_add_div _ _)).symm\n  dsimp at t\n  rw [t, pow_add, pow_mul, h, one_pow, one_mul]\n#align pow_eq_pow_mod pow_eq_pow_mod\n-/\n\n",
 "pow_dvd_pow":
 "#print pow_dvd_pow /-\ntheorem pow_dvd_pow [monoid R] (a : R) {m n : ℕ} (h : m ≤ n) : a ^ m ∣ a ^ n :=\n  ⟨a ^ (n - m), by rw [← pow_add, nat.add_comm, nat.sub_add_cancel h]⟩\n#align pow_dvd_pow pow_dvd_pow\n-/\n\n",
 "pow_boole":
 "#print pow_boole /-\n@[simp]\ntheorem pow_boole (P : Prop) [decidable P] (a : M) : (a ^ if P then 1 else 0) = if P then a else 1 := by simp\n#align pow_boole pow_boole\n-/\n\n",
 "pow_bit1'":
 "#print pow_bit1' /-\n@[to_additive bit1_nsmul']\ntheorem pow_bit1' (a : M) (n : ℕ) : a ^ bit1 n = (a * a) ^ n * a := by rw [bit1, pow_succ', pow_bit0']\n#align pow_bit1' pow_bit1'\n-/\n\n",
 "pow_bit1":
 "#print pow_bit1 /-\n@[to_additive bit1_nsmul]\ntheorem pow_bit1 (a : M) (n : ℕ) : a ^ bit1 n = a ^ n * a ^ n * a := by rw [bit1, pow_succ', pow_bit0]\n#align pow_bit1 pow_bit1\n-/\n\n",
 "pow_bit0'":
 "#print pow_bit0' /-\n@[to_additive bit0_nsmul']\ntheorem pow_bit0' (a : M) (n : ℕ) : a ^ bit0 n = (a * a) ^ n := by rw [pow_bit0, (Commute.refl a).mul_pow]\n#align pow_bit0' pow_bit0'\n-/\n\n",
 "pow_bit0":
 "#print pow_bit0 /-\n@[to_additive bit0_nsmul]\ntheorem pow_bit0 (a : M) (n : ℕ) : a ^ bit0 n = a ^ n * a ^ n :=\n  pow_add _ _ _\n#align pow_bit0 pow_bit0\n-/\n\n",
 "pow_add":
 "#print pow_add /-\n@[to_additive add_nsmul]\ntheorem pow_add (a : M) (m n : ℕ) : a ^ (m + n) = a ^ m * a ^ n := by\n  induction' n with n ih <;> [rw [nat.add_zero, pow_zero, mul_one],\n    rw [pow_succ', ← mul_assoc, ← ih, ← pow_succ', nat.add_assoc]]\n#align pow_add pow_add\n-/\n\n",
 "one_zpow":
 "#print one_zpow /-\n-- the attributes are intentionally out of order. `smul_zero` proves `zsmul_zero`.\n@[to_additive zsmul_zero, simp]\ntheorem one_zpow : ∀ n : ℤ, (1 : α) ^ n = 1\n  | (n : ℕ) => by rw [zpow_ofNat, one_pow]\n  | -[n+1] => by rw [zpow_negSucc, one_pow, inv_one]\n#align one_zpow one_zpow\n-/\n\n",
 "one_pow":
 "#print one_pow /-\n-- the attributes are intentionally out of order. `smul_zero` proves `nsmul_zero`.\n@[to_additive nsmul_zero, simp]\ntheorem one_pow (n : ℕ) : (1 : M) ^ n = 1 := by\n  induction' n with n ih <;> [exact pow_zero _, rw [pow_succ, ih, one_mul]]\n#align one_pow one_pow\n-/\n\n",
 "one_div_zpow":
 "#print one_div_zpow /-\n@[to_additive zsmul_zero_sub]\ntheorem one_div_zpow (a : α) (n : ℤ) : (1 / a) ^ n = 1 / a ^ n := by simp_rw [one_div, inv_zpow]\n#align one_div_zpow one_div_zpow\n-/\n\n",
 "one_div_pow":
 "#print one_div_pow /-\n@[to_additive nsmul_zero_sub]\ntheorem one_div_pow (a : α) (n : ℕ) : (1 / a) ^ n = 1 / a ^ n := by simp_rw [one_div, inv_pow]\n#align one_div_pow one_div_pow\n-/\n\n",
 "ofMul_zpow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print ofMul_zpow /-\ntheorem ofMul_zpow [div_inv_monoid G] (x : G) (n : ℤ) : Additive.ofMul (x ^ n) = «expr • » n (Additive.ofMul x) :=\n  rfl\n#align of_mul_zpow ofMul_zpow\n-/\n\n",
 "ofMul_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print ofMul_pow /-\ntheorem ofMul_pow [monoid A] (x : A) (n : ℕ) : Additive.ofMul (x ^ n) = «expr • » n (Additive.ofMul x) :=\n  rfl\n#align of_mul_pow ofMul_pow\n-/\n\n",
 "ofAdd_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print ofAdd_zsmul /-\ntheorem ofAdd_zsmul [sub_neg_monoid A] (x : A) (n : ℤ) :\n    Multiplicative.ofAdd («expr • » n x) = Multiplicative.ofAdd x ^ n :=\n  rfl\n#align of_add_zsmul ofAdd_zsmul\n-/\n\n",
 "ofAdd_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print ofAdd_nsmul /-\ntheorem ofAdd_nsmul [add_monoid A] (x : A) (n : ℕ) :\n    Multiplicative.ofAdd («expr • » n x) = Multiplicative.ofAdd x ^ n :=\n  rfl\n#align of_add_nsmul ofAdd_nsmul\n-/\n\n",
 "mul_zpow_neg_one":
 "#print mul_zpow_neg_one /-\n@[to_additive neg_one_zsmul_add]\ntheorem mul_zpow_neg_one (a b : α) : (a * b) ^ (-1 : ℤ) = b ^ (-1 : ℤ) * a ^ (-1 : ℤ) := by\n  simp_rw [zpow_neg_one, mul_inv_rev]\n#align mul_zpow_neg_one mul_zpow_neg_one\n-/\n\n",
 "mul_zpow":
 "#print mul_zpow /-\n@[to_additive zsmul_add]\ntheorem mul_zpow (a b : α) : ∀ n : ℤ, (a * b) ^ n = a ^ n * b ^ n :=\n  (Commute.all a b).mul_zpow\n#align mul_zpow mul_zpow\n-/\n\n",
 "mul_pow":
 "#print mul_pow /-\n@[to_additive nsmul_add]\ntheorem mul_pow (a b : M) (n : ℕ) : (a * b) ^ n = a ^ n * b ^ n :=\n  (Commute.all a b).mul_pow n\n#align mul_pow mul_pow\n-/\n\n",
 "ite_pow":
 "#print ite_pow /-\n@[simp]\ntheorem ite_pow (P : Prop) [decidable P] (a b : M) (c : ℕ) : (if P then a else b) ^ c = if P then a ^ c else b ^ c := by\n  split_ifs <;> rfl\n#align ite_pow ite_pow\n-/\n\n",
 "inv_zpow'":
 "#print inv_zpow' /-\n@[simp, to_additive zsmul_neg']\ntheorem inv_zpow' (a : α) (n : ℤ) : a⁻¹ ^ n = a ^ (-n) := by rw [inv_zpow, zpow_neg]\n#align inv_zpow' inv_zpow'\n-/\n\n",
 "inv_zpow":
 "#print inv_zpow /-\n@[to_additive zsmul_neg]\ntheorem inv_zpow (a : α) : ∀ n : ℤ, a⁻¹ ^ n = (a ^ n)⁻¹\n  | (n : ℕ) => by rw [zpow_ofNat, zpow_ofNat, inv_pow]\n  | -[n+1] => by rw [zpow_negSucc, zpow_negSucc, inv_pow]\n#align inv_zpow inv_zpow\n-/\n\n",
 "inv_pow_sub":
 "#print inv_pow_sub /-\n@[to_additive sub_nsmul_neg]\ntheorem inv_pow_sub (a : G) {m n : ℕ} (h : n ≤ m) : a⁻¹ ^ (m - n) = (a ^ m)⁻¹ * a ^ n := by\n  rw [pow_sub a⁻¹ h, inv_pow, inv_pow, inv_inv]\n#align inv_pow_sub inv_pow_sub\n-/\n\n",
 "inv_pow":
 "#print inv_pow /-\n@[simp, to_additive]\ntheorem inv_pow (a : α) : ∀ n : ℕ, a⁻¹ ^ n = (a ^ n)⁻¹\n  | 0 => by rw [pow_zero, pow_zero, inv_one]\n  | n + 1 => by rw [pow_succ', pow_succ, inv_pow, mul_inv_rev]\n#align inv_pow inv_pow\n-/\n\n",
 "dvd_pow_self":
 "#print dvd_pow_self /-\ntheorem dvd_pow_self (a : M) {n : ℕ} (hn : n ≠ 0) : a ∣ a ^ n :=\n  dvd_rfl.pow hn\n#align dvd_pow_self dvd_pow_self\n-/\n\n",
 "dvd_pow":
 "#print dvd_pow /-\ntheorem dvd_pow {x y : M} (hxy : x ∣ y) : ∀ {n : ℕ} (hn : n ≠ 0), x ∣ y ^ n\n  | 0, hn => (hn rfl).elim\n  | n + 1, hn => by\n    rw [pow_succ]\n    exact hxy.mul_right _\n#align dvd_pow dvd_pow\n-/\n\n",
 "div_zpow":
 "#print div_zpow /-\n@[simp, to_additive zsmul_sub]\ntheorem div_zpow (a b : α) (n : ℤ) : (a / b) ^ n = a ^ n / b ^ n := by simp only [div_eq_mul_inv, mul_zpow, inv_zpow]\n#align div_zpow div_zpow\n-/\n\n",
 "div_pow":
 "#print div_pow /-\n@[simp, to_additive nsmul_sub]\ntheorem div_pow (a b : α) (n : ℕ) : (a / b) ^ n = a ^ n / b ^ n := by simp only [div_eq_mul_inv, mul_pow, inv_pow]\n#align div_pow div_pow\n-/\n\n"}