{"zero_pow_le_one":
 "#print zero_pow_le_one /-\ntheorem zero_pow_le_one : ∀ n : ℕ, (0 : R) ^ n ≤ 1\n  | 0 => (pow_zero _).le\n  | n + 1 => by\n    rw [zero_pow n.succ_pos]\n    exact zero_le_one\n#align zero_pow_le_one zero_pow_le_one\n-/\n\n",
 "two_mul_le_add_sq":
 "#print two_mul_le_add_sq /-\n/-- Arithmetic mean-geometric mean (AM-GM) inequality for linearly ordered commutative rings. -/\ntheorem two_mul_le_add_sq (a b : R) : 2 * a * b ≤ a ^ 2 + b ^ 2 :=\n  sub_nonneg.mp ((sub_add_eq_add_sub _ _ _).subst ((sub_sq a b).subst (sq_nonneg _)))\n#align two_mul_le_add_sq two_mul_le_add_sq\n-/\n\n",
 "strictMonoOn_pow":
 "#print strictMonoOn_pow /-\ntheorem strictMonoOn_pow (hn : 0 < n) : StrictMonoOn (fun x : R => x ^ n) (Set.Ici 0) := fun x hx y hy h =>\n  pow_lt_pow_of_lt_left h hx hn\n#align strict_mono_on_pow strictMonoOn_pow\n-/\n\n",
 "strictAnti_pow":
 "#print strictAnti_pow /-\ntheorem strictAnti_pow (h₀ : 0 < a) (h₁ : a < 1) : StrictAnti fun n : ℕ => a ^ n :=\n  strictAnti_nat_of_succ_lt fun n => by\n    simpa only [pow_succ, one_mul] using mul_lt_mul h₁ le_rfl (pow_pos h₀ n) zero_le_one\n#align strict_anti_pow strictAnti_pow\n-/\n\n",
 "sq_pos_of_pos":
 "#print sq_pos_of_pos /-\ntheorem sq_pos_of_pos (ha : 0 < a) : 0 < a ^ 2 := by\n  rw [sq]\n  exact mul_pos ha ha\n#align sq_pos_of_pos sq_pos_of_pos\n-/\n\n",
 "sq_pos_of_neg":
 "#print sq_pos_of_neg /-\ntheorem sq_pos_of_neg (ha : a < 0) : 0 < a ^ 2 :=\n  pow_bit0_pos_of_neg ha _\n#align sq_pos_of_neg sq_pos_of_neg\n-/\n\n",
 "sq_pos_of_ne_zero":
 "#print sq_pos_of_ne_zero /-\ntheorem sq_pos_of_ne_zero (a : R) (h : a ≠ 0) : 0 < a ^ 2 :=\n  pow_bit0_pos h 1\n#align sq_pos_of_ne_zero sq_pos_of_ne_zero\n-/\n\n",
 "sq_pos_iff":
 "#print sq_pos_iff /-\ntheorem sq_pos_iff (a : R) : 0 < a ^ 2 ↔ a ≠ 0 :=\n  pow_bit0_pos_iff a one_ne_zero\n#align sq_pos_iff sq_pos_iff\n-/\n\n",
 "sq_nonneg":
 "#print sq_nonneg /-\ntheorem sq_nonneg (a : R) : 0 ≤ a ^ 2 :=\n  pow_bit0_nonneg a 1\n#align sq_nonneg sq_nonneg\n-/\n\n",
 "sq_lt_sq'":
 "#print sq_lt_sq' /-\ntheorem sq_lt_sq' (h1 : -y < x) (h2 : x < y) : x ^ 2 < y ^ 2 :=\n  sq_lt_sq.2 (lt_of_lt_of_le (abs_lt.2 ⟨h1, h2⟩) (le_abs_self _))\n#align sq_lt_sq' sq_lt_sq'\n-/\n\n",
 "sq_lt_sq":
 "#print sq_lt_sq /-\ntheorem sq_lt_sq : x ^ 2 < y ^ 2 ↔ |x| < |y| := by\n  simpa only [sq_abs] using (@strictMonoOn_pow R _ _ two_pos).lt_iff_lt (abs_nonneg x) (abs_nonneg y)\n#align sq_lt_sq sq_lt_sq\n-/\n\n",
 "sq_lt_one_iff_abs_lt_one":
 "#print sq_lt_one_iff_abs_lt_one /-\n@[simp]\ntheorem sq_lt_one_iff_abs_lt_one (x : R) : x ^ 2 < 1 ↔ |x| < 1 := by\n  simpa only [one_pow, abs_one] using @sq_lt_sq _ _ x 1\n#align sq_lt_one_iff_abs_lt_one sq_lt_one_iff_abs_lt_one\n-/\n\n",
 "sq_lt_one_iff":
 "#print sq_lt_one_iff /-\ntheorem sq_lt_one_iff {a : R} (ha : 0 ≤ a) : a ^ 2 < 1 ↔ a < 1 :=\n  pow_lt_one_iff_of_nonneg ha (nat.succ_ne_zero _)\n#align sq_lt_one_iff sq_lt_one_iff\n-/\n\n",
 "sq_le_sq'":
 "#print sq_le_sq' /-\ntheorem sq_le_sq' (h1 : -y ≤ x) (h2 : x ≤ y) : x ^ 2 ≤ y ^ 2 :=\n  sq_le_sq.2 (le_trans (abs_le.mpr ⟨h1, h2⟩) (le_abs_self _))\n#align sq_le_sq' sq_le_sq'\n-/\n\n",
 "sq_le_sq":
 "#print sq_le_sq /-\ntheorem sq_le_sq : x ^ 2 ≤ y ^ 2 ↔ |x| ≤ |y| := by\n  simpa only [sq_abs] using (@strictMonoOn_pow R _ _ two_pos).le_iff_le (abs_nonneg x) (abs_nonneg y)\n#align sq_le_sq sq_le_sq\n-/\n\n",
 "sq_le_one_iff_abs_le_one":
 "#print sq_le_one_iff_abs_le_one /-\n@[simp]\ntheorem sq_le_one_iff_abs_le_one (x : R) : x ^ 2 ≤ 1 ↔ |x| ≤ 1 := by\n  simpa only [one_pow, abs_one] using @sq_le_sq _ _ x 1\n#align sq_le_one_iff_abs_le_one sq_le_one_iff_abs_le_one\n-/\n\n",
 "sq_le_one_iff":
 "#print sq_le_one_iff /-\ntheorem sq_le_one_iff {a : R} (ha : 0 ≤ a) : a ^ 2 ≤ 1 ↔ a ≤ 1 :=\n  pow_le_one_iff_of_nonneg ha (nat.succ_ne_zero _)\n#align sq_le_one_iff sq_le_one_iff\n-/\n\n",
 "sq_eq_sq_iff_abs_eq_abs":
 "#print sq_eq_sq_iff_abs_eq_abs /-\ntheorem sq_eq_sq_iff_abs_eq_abs (x y : R) : x ^ 2 = y ^ 2 ↔ |x| = |y| := by simp only [le_antisymm_iff, sq_le_sq]\n#align sq_eq_sq_iff_abs_eq_abs sq_eq_sq_iff_abs_eq_abs\n-/\n\n",
 "sq_eq_sq":
 "#print sq_eq_sq /-\n@[simp]\ntheorem sq_eq_sq {a b : R} (ha : 0 ≤ a) (hb : 0 ≤ b) : a ^ 2 = b ^ 2 ↔ a = b :=\n  pow_left_inj ha hb (by decide)\n#align sq_eq_sq sq_eq_sq\n-/\n\n",
 "sq_abs":
 "#print sq_abs /-\ntheorem sq_abs (x : R) : |x| ^ 2 = x ^ 2 := by simpa only [sq] using abs_mul_abs_self x\n#align sq_abs sq_abs\n-/\n\n",
 "pow_strictMono_right'":
 "#print pow_strictMono_right' /-\n/-- See also `pow_strict_mono_right` -/\n@[nolint to_additive_doc, to_additive nsmul_strictMono_left]\ntheorem pow_strictMono_right' {n : ℕ} (hn : n ≠ 0) : StrictMono fun a : M => a ^ n :=\n  strictMono_id.pow_right' hn\n#align pow_strict_mono_right' pow_strictMono_right'\n#align nsmul_strict_mono_left nsmul_strictMono_left\n-/\n\n",
 "pow_strictMono_right":
 "#print pow_strictMono_right /-\ntheorem pow_strictMono_right (h : 1 < a) : StrictMono fun n : ℕ => a ^ n :=\n  have : 0 < a := zero_le_one.trans_lt h\n  strictMono_nat_of_lt_succ fun n => by\n    simpa only [one_mul, pow_succ] using mul_lt_mul h (le_refl (a ^ n)) (pow_pos this _) this.le\n#align pow_strict_mono_right pow_strictMono_right\n-/\n\n",
 "pow_strictMono_left":
 "#print pow_strictMono_left /-\n@[to_additive nsmul_strictMono_right]\ntheorem pow_strictMono_left [CovariantClass M M (· * ·) (· < ·)] {a : M} (ha : 1 < a) :\n    StrictMono ((· ^ ·) a : ℕ → M) := fun m n => pow_lt_pow' ha\n#align pow_strict_mono_left pow_strictMono_left\n#align nsmul_strict_mono_right nsmul_strictMono_right\n-/\n\n",
 "pow_right'":
 "#print StrictMono.pow_right' /-\n@[to_additive StrictMono.nsmul_left]\ntheorem StrictMono.pow_right' (hf : StrictMono f) : ∀ {n : ℕ}, n ≠ 0 → StrictMono fun a => f a ^ n\n  | 0, hn => (hn rfl).elim\n  | 1, hn => by simpa\n  | nat.succ <| nat.succ n, hn => by\n    simp_rw [pow_succ _ (n + 1)]\n    exact hf.mul' (StrictMono.pow_right' n.succ_ne_zero)\n#align strict_mono.pow_right' StrictMono.pow_right'\n#align strict_mono.nsmul_left StrictMono.nsmul_left\n-/\n\n",
 "pow_right":
 "#print Monotone.pow_right /-\n@[to_additive Monotone.nsmul_left]\ntheorem Monotone.pow_right {f : β → M} (hf : Monotone f) : ∀ n : ℕ, Monotone fun a => f a ^ n\n  | 0 => by simpa using monotone_const\n  | n + 1 => by\n    simp_rw [pow_succ]\n    exact hf.mul' (Monotone.pow_right _)\n#align monotone.pow_right Monotone.pow_right\n#align monotone.nsmul_left Monotone.nsmul_left\n-/\n\n",
 "pow_pos_iff":
 "#print pow_pos_iff /-\ntheorem pow_pos_iff (hn : 0 < n) : 0 < a ^ n ↔ 0 < a := by simp_rw [zero_lt_iff, pow_ne_zero_iff hn]\n#align pow_pos_iff pow_pos_iff\n-/\n\n",
 "pow_pos":
 "#print pow_pos /-\ntheorem pow_pos {a : R} (H : 0 < a) (n : ℕ) : 0 < a ^ n :=\n  pos_iff_ne_zero.2 <| pow_ne_zero _ H.ne'\n#align pow_pos pow_pos\n-/\n\n",
 "pow_mono_right":
 "#print pow_mono_right /-\n@[to_additive nsmul_mono_left]\ntheorem pow_mono_right (n : ℕ) : Monotone fun a : M => a ^ n :=\n  monotone_id.pow_right _\n#align pow_mono_right pow_mono_right\n#align nsmul_mono_left nsmul_mono_left\n-/\n\n",
 "pow_mono":
 "#print pow_mono /-\ntheorem pow_mono (h : 1 ≤ a) : Monotone fun n : ℕ => a ^ n :=\n  monotone_nat_of_le_succ fun n => by\n    rw [pow_succ]\n    exact le_mul_of_one_le_left (pow_nonneg (zero_le_one.trans h) _) h\n#align pow_mono pow_mono\n-/\n\n",
 "pow_lt_self_of_lt_one":
 "#print pow_lt_self_of_lt_one /-\ntheorem pow_lt_self_of_lt_one (h₀ : 0 < a) (h₁ : a < 1) (hn : 1 < n) : a ^ n < a :=\n  calc\n    a ^ n < a ^ 1 := pow_lt_pow_of_lt_one h₀ h₁ hn\n    _ = a := pow_one _\n    \n#align pow_lt_self_of_lt_one pow_lt_self_of_lt_one\n-/\n\n",
 "pow_lt_pow₀":
 "#print pow_lt_pow₀ /-\ntheorem pow_lt_pow₀ (ha : 1 < a) (hmn : m < n) : a ^ m < a ^ n :=\n  by\n  induction' hmn with n hmn ih\n  exacts[pow_lt_pow_succ ha, lt_trans ih (pow_lt_pow_succ ha)]\n#align pow_lt_pow₀ pow_lt_pow₀\n-/\n\n",
 "pow_lt_pow_succ":
 "#print pow_lt_pow_succ /-\ntheorem pow_lt_pow_succ (ha : 1 < a) : a ^ n < a ^ n.succ :=\n  by\n  rw [← one_mul (a ^ n), pow_succ]\n  exact mul_lt_right₀ _ ha (pow_ne_zero _ (zero_lt_one.trans ha).ne')\n#align pow_lt_pow_succ pow_lt_pow_succ\n-/\n\n",
 "pow_lt_pow_of_lt_one":
 "#print pow_lt_pow_of_lt_one /-\ntheorem pow_lt_pow_of_lt_one (h : 0 < a) (ha : a < 1) {i j : ℕ} (hij : i < j) : a ^ j < a ^ i :=\n  (pow_lt_pow_iff_of_lt_one h ha).2 hij\n#align pow_lt_pow_of_lt_one pow_lt_pow_of_lt_one\n-/\n\n",
 "pow_lt_pow_of_lt_left":
 "#print pow_lt_pow_of_lt_left /-\ntheorem pow_lt_pow_of_lt_left (h : x < y) (hx : 0 ≤ x) : ∀ {n : ℕ}, 0 < n → x ^ n < y ^ n\n  | 0, hn => hn.false.elim\n  | n + 1, _ => by\n    simpa only [pow_succ'] using\n      mul_lt_mul_of_le_of_le' (pow_le_pow_of_le_left hx h.le _) h (pow_pos (hx.trans_lt h) _) hx\n#align pow_lt_pow_of_lt_left pow_lt_pow_of_lt_left\n-/\n\n",
 "pow_lt_pow_iff_of_lt_one":
 "#print pow_lt_pow_iff_of_lt_one /-\ntheorem pow_lt_pow_iff_of_lt_one (h₀ : 0 < a) (h₁ : a < 1) : a ^ m < a ^ n ↔ n < m :=\n  (strictAnti_pow h₀ h₁).lt_iff_lt\n#align pow_lt_pow_iff_of_lt_one pow_lt_pow_iff_of_lt_one\n-/\n\n",
 "pow_lt_pow_iff'":
 "#print pow_lt_pow_iff' /-\n@[to_additive nsmul_lt_nsmul_iff]\ntheorem pow_lt_pow_iff' (ha : 1 < a) : a ^ m < a ^ n ↔ m < n :=\n  (pow_strictMono_left ha).lt_iff_lt\n#align pow_lt_pow_iff' pow_lt_pow_iff'\n#align nsmul_lt_nsmul_iff nsmul_lt_nsmul_iff\n-/\n\n",
 "pow_lt_pow_iff":
 "#print pow_lt_pow_iff /-\ntheorem pow_lt_pow_iff (h : 1 < a) : a ^ n < a ^ m ↔ n < m :=\n  (pow_strictMono_right h).lt_iff_lt\n#align pow_lt_pow_iff pow_lt_pow_iff\n-/\n\n",
 "pow_lt_pow'":
 "#print pow_lt_pow' /-\n@[to_additive nsmul_lt_nsmul]\ntheorem pow_lt_pow' [CovariantClass M M (· * ·) (· < ·)] {a : M} {n m : ℕ} (ha : 1 < a) (h : n < m) : a ^ n < a ^ m :=\n  by\n  rcases nat.le.dest h with ⟨k, rfl⟩; clear h\n  rw [pow_add, pow_succ', mul_assoc, ← pow_succ]\n  exact lt_mul_of_one_lt_right' _ (one_lt_pow' ha k.succ_ne_zero)\n#align pow_lt_pow' pow_lt_pow'\n#align nsmul_lt_nsmul nsmul_lt_nsmul\n-/\n\n",
 "pow_lt_pow":
 "#print pow_lt_pow /-\ntheorem pow_lt_pow (h : 1 < a) (h2 : n < m) : a ^ n < a ^ m :=\n  pow_strictMono_right h h2\n#align pow_lt_pow pow_lt_pow\n-/\n\n",
 "pow_lt_one_of_lt":
 "#print Right.pow_lt_one_of_lt /-\n@[to_additive Right.pow_neg]\ntheorem Right.pow_lt_one_of_lt [CovariantClass M M (swap (· * ·)) (· < ·)] {n : ℕ} {x : M} (hn : 0 < n) (h : x < 1) :\n    x ^ n < 1 :=\n  Nat.le_induction ((pow_one _).trans_lt h)\n    (fun n _ ih => by\n      rw [pow_succ]\n      exact Right.mul_lt_one h ih)\n    _ (Nat.succ_le_iff.2 hn)\n#align right.pow_lt_one_of_lt Right.pow_lt_one_of_lt\n#align right.pow_neg Right.pow_neg\n-/\n\n",
 "pow_lt_one_iff_of_nonneg":
 "#print pow_lt_one_iff_of_nonneg /-\ntheorem pow_lt_one_iff_of_nonneg {a : R} (ha : 0 ≤ a) {n : ℕ} (hn : n ≠ 0) : a ^ n < 1 ↔ a < 1 :=\n  lt_iff_lt_of_le_iff_le (one_le_pow_iff_of_nonneg ha hn)\n#align pow_lt_one_iff_of_nonneg pow_lt_one_iff_of_nonneg\n-/\n\n",
 "pow_lt_one_iff":
 "#print Right.pow_lt_one_iff /-\n@[to_additive Right.nsmul_neg_iff]\ntheorem Right.pow_lt_one_iff [CovariantClass M M (swap (· * ·)) (· < ·)] {n : ℕ} {x : M} (hn : 0 < n) :\n    x ^ n < 1 ↔ x < 1 :=\n  ⟨fun H =>\n    not_le.mp fun k =>\n      H.not_le <|\n        haveI := Mul.to_covariantClass_right M\n        Right.one_le_pow_of_le k,\n    Right.pow_lt_one_of_lt hn⟩\n#align right.pow_lt_one_iff Right.pow_lt_one_iff\n#align right.nsmul_neg_iff Right.nsmul_neg_iff\n-/\n\n",
 "pow_lt_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print pow_lt_one' /-\n@[to_additive nsmul_neg]\ntheorem pow_lt_one' {a : M} (ha : a < 1) {k : ℕ} (hk : k ≠ 0) : a ^ k < 1 :=\n  @one_lt_pow' («expr ᵒᵈ» M) _ _ _ _ ha k hk\n#align pow_lt_one' pow_lt_one'\n#align nsmul_neg nsmul_neg\n-/\n\n",
 "pow_lt_one":
 "#print pow_lt_one /-\ntheorem pow_lt_one (h₀ : 0 ≤ a) (h₁ : a < 1) : ∀ {n : ℕ} (hn : n ≠ 0), a ^ n < 1\n  | 0, h => (h rfl).elim\n  | n + 1, h => by\n    rw [pow_succ]\n    exact mul_lt_one_of_nonneg_of_lt_one_left h₀ h₁ (pow_le_one _ h₀ h₁.le)\n#align pow_lt_one pow_lt_one\n-/\n\n",
 "pow_left_inj":
 "#print pow_left_inj /-\n@[simp]\ntheorem pow_left_inj {x y : R} {n : ℕ} (Hxpos : 0 ≤ x) (Hypos : 0 ≤ y) (Hnpos : 0 < n) : x ^ n = y ^ n ↔ x = y :=\n  (@strictMonoOn_pow R _ _ Hnpos).eq_iff_eq Hxpos Hypos\n#align pow_left_inj pow_left_inj\n-/\n\n",
 "pow_le_pow_of_le_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print pow_le_pow_of_le_one' /-\n@[to_additive nsmul_le_nsmul_of_nonpos]\ntheorem pow_le_pow_of_le_one' {a : M} {n m : ℕ} (ha : a ≤ 1) (h : n ≤ m) : a ^ m ≤ a ^ n :=\n  @pow_le_pow' («expr ᵒᵈ» M) _ _ _ _ _ _ ha h\n#align pow_le_pow_of_le_one' pow_le_pow_of_le_one'\n#align nsmul_le_nsmul_of_nonpos nsmul_le_nsmul_of_nonpos\n-/\n\n",
 "pow_le_pow_of_le_left'":
 "#print pow_le_pow_of_le_left' /-\n/-\nCopyright (c) 2015 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Robert Y. Lewis\n-/\n@[to_additive nsmul_le_nsmul_of_le_right, mono]\ntheorem pow_le_pow_of_le_left' [CovariantClass M M (swap (· * ·)) (· ≤ ·)] {a b : M} (hab : a ≤ b) :\n    ∀ i : ℕ, a ^ i ≤ b ^ i\n  | 0 => by simp\n  | k + 1 => by\n    rw [pow_succ, pow_succ]\n    exact mul_le_mul' hab (pow_le_pow_of_le_left' k)\n#align pow_le_pow_of_le_left' pow_le_pow_of_le_left'\n#align nsmul_le_nsmul_of_le_right nsmul_le_nsmul_of_le_right\n-/\n\n",
 "pow_le_pow_of_le_left":
 "#print pow_le_pow_of_le_left /-\n@[mono]\ntheorem pow_le_pow_of_le_left {a b : R} (ha : 0 ≤ a) (hab : a ≤ b) : ∀ i : ℕ, a ^ i ≤ b ^ i\n  | 0 => by simp\n  | k + 1 => by\n    rw [pow_succ, pow_succ]\n    exact mul_le_mul hab (pow_le_pow_of_le_left _) (pow_nonneg ha _) (le_trans ha hab)\n#align pow_le_pow_of_le_left pow_le_pow_of_le_left\n-/\n\n",
 "pow_le_pow_iff'":
 "#print pow_le_pow_iff' /-\n@[to_additive nsmul_le_nsmul_iff]\ntheorem pow_le_pow_iff' (ha : 1 < a) : a ^ m ≤ a ^ n ↔ m ≤ n :=\n  (pow_strictMono_left ha).le_iff_le\n#align pow_le_pow_iff' pow_le_pow_iff'\n#align nsmul_le_nsmul_iff nsmul_le_nsmul_iff\n-/\n\n",
 "pow_le_pow_iff":
 "#print pow_le_pow_iff /-\ntheorem pow_le_pow_iff (h : 1 < a) : a ^ n ≤ a ^ m ↔ n ≤ m :=\n  (pow_strictMono_right h).le_iff_le\n#align pow_le_pow_iff pow_le_pow_iff\n-/\n\n",
 "pow_le_pow'":
 "#print pow_le_pow' /-\n@[to_additive nsmul_le_nsmul]\ntheorem pow_le_pow' {a : M} {n m : ℕ} (ha : 1 ≤ a) (h : n ≤ m) : a ^ n ≤ a ^ m :=\n  let ⟨k, hk⟩ := nat.le.dest h\n  calc\n    a ^ n ≤ a ^ n * a ^ k := le_mul_of_one_le_right' (one_le_pow_of_one_le' ha _)\n    _ = a ^ m := by rw [← hk, pow_add]\n    \n#align pow_le_pow' pow_le_pow'\n#align nsmul_le_nsmul nsmul_le_nsmul\n-/\n\n",
 "pow_le_pow":
 "#print pow_le_pow /-\ntheorem pow_le_pow (ha : 1 ≤ a) (h : n ≤ m) : a ^ n ≤ a ^ m :=\n  pow_mono ha h\n#align pow_le_pow pow_le_pow\n-/\n\n",
 "pow_le_one_of_le":
 "#print Right.pow_le_one_of_le /-\n@[to_additive Right.pow_nonpos]\ntheorem Right.pow_le_one_of_le (hx : x ≤ 1) : ∀ {n : ℕ}, x ^ n ≤ 1\n  | 0 => (pow_zero _).le\n  | n + 1 => by\n    rw [pow_succ]\n    exact Right.mul_le_one hx Right.pow_le_one_of_le\n#align right.pow_le_one_of_le Right.pow_le_one_of_le\n#align right.pow_nonpos Right.pow_nonpos\n-/\n\n",
 "pow_le_one_iff_of_nonneg":
 "#print pow_le_one_iff_of_nonneg /-\ntheorem pow_le_one_iff_of_nonneg {a : R} (ha : 0 ≤ a) {n : ℕ} (hn : n ≠ 0) : a ^ n ≤ 1 ↔ a ≤ 1 :=\n  by\n  refine' ⟨_, pow_le_one n ha⟩\n  rw [← not_lt, ← not_lt]\n  exact mt fun h => one_lt_pow h hn\n#align pow_le_one_iff_of_nonneg pow_le_one_iff_of_nonneg\n-/\n\n",
 "pow_le_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print pow_le_one_iff /-\n@[to_additive]\ntheorem pow_le_one_iff {x : M} {n : ℕ} (hn : n ≠ 0) : x ^ n ≤ 1 ↔ x ≤ 1 :=\n  @one_le_pow_iff («expr ᵒᵈ» M) _ _ _ _ _ hn\n#align pow_le_one_iff pow_le_one_iff\n#align nsmul_nonpos_iff nsmul_nonpos_iff\n-/\n\n",
 "pow_le_one'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n#print pow_le_one' /-\n@[to_additive nsmul_nonpos]\ntheorem pow_le_one' {a : M} (H : a ≤ 1) (n : ℕ) : a ^ n ≤ 1 :=\n  @one_le_pow_of_one_le' («expr ᵒᵈ» M) _ _ _ _ H n\n#align pow_le_one' pow_le_one'\n#align nsmul_nonpos nsmul_nonpos\n-/\n\n",
 "pow_le_one":
 "#print pow_le_one /-\ntheorem pow_le_one : ∀ (n : ℕ) (h₀ : 0 ≤ a) (h₁ : a ≤ 1), a ^ n ≤ 1\n  | 0, h₀, h₁ => (pow_zero a).le\n  | n + 1, h₀, h₁ => (pow_succ' a n).le.trans (mul_le_one (pow_le_one n h₀ h₁) h₀ h₁)\n#align pow_le_one pow_le_one\n-/\n\n",
 "pow_four_le_pow_two_of_pow_two_le":
 "#print pow_four_le_pow_two_of_pow_two_le /-\ntheorem pow_four_le_pow_two_of_pow_two_le {x y : R} (h : x ^ 2 ≤ y) : x ^ 4 ≤ y ^ 2 :=\n  (pow_mul x 2 2).symm ▸ pow_le_pow_of_le_left (sq_nonneg x) h 2\n#align pow_four_le_pow_two_of_pow_two_le pow_four_le_pow_two_of_pow_two_le\n-/\n\n",
 "pow_eq_one_iff":
 "#print pow_eq_one_iff /-\n@[to_additive]\ntheorem pow_eq_one_iff {x : M} {n : ℕ} (hn : n ≠ 0) : x ^ n = 1 ↔ x = 1 := by\n  simp only [le_antisymm_iff, pow_le_one_iff hn, one_le_pow_iff hn]\n#align pow_eq_one_iff pow_eq_one_iff\n#align nsmul_eq_zero_iff nsmul_eq_zero_iff\n-/\n\n",
 "pow_bit1_neg":
 "#print pow_bit1_neg /-\ntheorem pow_bit1_neg (ha : a < 0) (n : ℕ) : a ^ bit1 n < 0 :=\n  by\n  rw [bit1, pow_succ]\n  exact mul_neg_of_neg_of_pos ha (pow_bit0_pos_of_neg ha n)\n#align pow_bit1_neg pow_bit1_neg\n-/\n\n",
 "pow_bit0_pos_of_neg":
 "#print pow_bit0_pos_of_neg /-\ntheorem pow_bit0_pos_of_neg (ha : a < 0) (n : ℕ) : 0 < a ^ bit0 n :=\n  by\n  rw [pow_bit0']\n  exact pow_pos (mul_pos_of_neg_of_neg ha ha) _\n#align pow_bit0_pos_of_neg pow_bit0_pos_of_neg\n-/\n\n",
 "pow_bit0_pos_iff":
 "#print pow_bit0_pos_iff /-\ntheorem pow_bit0_pos_iff (a : R) {n : ℕ} (hn : n ≠ 0) : 0 < a ^ bit0 n ↔ a ≠ 0 :=\n  by\n  refine' ⟨fun h => _, fun h => pow_bit0_pos h n⟩\n  rintro rfl\n  rw [zero_pow (Nat.zero_lt_bit0 hn)] at h\n  exact lt_irrefl _ h\n#align pow_bit0_pos_iff pow_bit0_pos_iff\n-/\n\n",
 "pow_bit0_pos":
 "#print pow_bit0_pos /-\ntheorem pow_bit0_pos {a : R} (h : a ≠ 0) (n : ℕ) : 0 < a ^ bit0 n :=\n  (pow_bit0_nonneg a n).lt_of_ne (pow_ne_zero _ h).symm\n#align pow_bit0_pos pow_bit0_pos\n-/\n\n",
 "pow_bit0_nonneg":
 "#print pow_bit0_nonneg /-\ntheorem pow_bit0_nonneg (a : R) (n : ℕ) : 0 ≤ a ^ bit0 n :=\n  by\n  rw [pow_bit0]\n  exact mul_self_nonneg _\n#align pow_bit0_nonneg pow_bit0_nonneg\n-/\n\n",
 "pow_add_pow_le":
 "#print pow_add_pow_le /-\ntheorem pow_add_pow_le (hx : 0 ≤ x) (hy : 0 ≤ y) (hn : n ≠ 0) : x ^ n + y ^ n ≤ (x + y) ^ n :=\n  by\n  rcases nat.exists_eq_succ_of_ne_zero hn with ⟨k, rfl⟩\n  induction' k with k ih; · simp only [pow_one]\n  let n := k.succ\n  have h1 := add_nonneg (mul_nonneg hx (pow_nonneg hy n)) (mul_nonneg hy (pow_nonneg hx n))\n  have h2 := add_nonneg hx hy\n  calc\n    x ^ n.succ + y ^ n.succ ≤ x * x ^ n + y * y ^ n + (x * y ^ n + y * x ^ n) :=\n      by\n      rw [pow_succ _ n, pow_succ _ n]\n      exact le_add_of_nonneg_right h1\n    _ = (x + y) * (x ^ n + y ^ n) := by\n      rw [add_mul, mul_add, mul_add, add_comm (y * x ^ n), ← add_assoc, ← add_assoc, add_assoc (x * x ^ n) (x * y ^ n),\n        add_comm (x * y ^ n) (y * y ^ n), ← add_assoc]\n    _ ≤ (x + y) ^ n.succ := by\n      rw [pow_succ _ n]\n      exact mul_le_mul_of_nonneg_left (ih (nat.succ_ne_zero k)) h2\n    \n#align pow_add_pow_le pow_add_pow_le\n-/\n\n",
 "pow_abs":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →* » -/\n#print pow_abs /-\ntheorem pow_abs (a : R) (n : ℕ) : |a| ^ n = |a ^ n| :=\n  ((absHom.to_monoid_hom : «expr →* » R R).map_pow a n).symm\n#align pow_abs pow_abs\n-/\n\n",
 "one_lt_sq_iff_one_lt_abs":
 "#print one_lt_sq_iff_one_lt_abs /-\n@[simp]\ntheorem one_lt_sq_iff_one_lt_abs (x : R) : 1 < x ^ 2 ↔ 1 < |x| := by\n  simpa only [one_pow, abs_one] using @sq_lt_sq _ _ 1 x\n#align one_lt_sq_iff_one_lt_abs one_lt_sq_iff_one_lt_abs\n-/\n\n",
 "one_lt_sq_iff":
 "#print one_lt_sq_iff /-\ntheorem one_lt_sq_iff {a : R} (ha : 0 ≤ a) : 1 < a ^ 2 ↔ 1 < a :=\n  one_lt_pow_iff_of_nonneg ha (nat.succ_ne_zero _)\n#align one_lt_sq_iff one_lt_sq_iff\n-/\n\n",
 "one_lt_pow_iff_of_nonneg":
 "#print one_lt_pow_iff_of_nonneg /-\ntheorem one_lt_pow_iff_of_nonneg {a : R} (ha : 0 ≤ a) {n : ℕ} (hn : n ≠ 0) : 1 < a ^ n ↔ 1 < a :=\n  lt_iff_lt_of_le_iff_le (pow_le_one_iff_of_nonneg ha hn)\n#align one_lt_pow_iff_of_nonneg one_lt_pow_iff_of_nonneg\n-/\n\n",
 "one_lt_pow_iff":
 "#print one_lt_pow_iff /-\n@[to_additive nsmul_pos_iff]\ntheorem one_lt_pow_iff {x : M} {n : ℕ} (hn : n ≠ 0) : 1 < x ^ n ↔ 1 < x :=\n  lt_iff_lt_of_le_iff_le (pow_le_one_iff hn)\n#align one_lt_pow_iff one_lt_pow_iff\n#align nsmul_pos_iff nsmul_pos_iff\n-/\n\n",
 "one_lt_pow'":
 "#print one_lt_pow' /-\n@[to_additive nsmul_pos]\ntheorem one_lt_pow' {a : M} (ha : 1 < a) {k : ℕ} (hk : k ≠ 0) : 1 < a ^ k :=\n  by\n  rcases nat.exists_eq_succ_of_ne_zero hk with ⟨l, rfl⟩\n  clear hk\n  induction' l with l IH\n  · simpa using ha\n  · rw [pow_succ]\n    exact one_lt_mul'' ha IH\n#align one_lt_pow' one_lt_pow'\n#align nsmul_pos nsmul_pos\n-/\n\n",
 "one_lt_pow":
 "#print one_lt_pow /-\ntheorem one_lt_pow (ha : 1 < a) : ∀ {n : ℕ} (hn : n ≠ 0), 1 < a ^ n\n  | 0, h => (h rfl).elim\n  | n + 1, h => by\n    rw [pow_succ]\n    exact one_lt_mul_of_lt_of_le ha (one_le_pow_of_one_le ha.le _)\n#align one_lt_pow one_lt_pow\n-/\n\n",
 "one_le_zpow":
 "#print one_le_zpow /-\n@[to_additive zsmul_nonneg]\ntheorem one_le_zpow {x : G} (H : 1 ≤ x) {n : ℤ} (hn : 0 ≤ n) : 1 ≤ x ^ n :=\n  by\n  lift n to ℕ using hn\n  rw [zpow_ofNat]\n  apply one_le_pow_of_one_le' H\n#align one_le_zpow one_le_zpow\n#align zsmul_nonneg zsmul_nonneg\n-/\n\n",
 "one_le_sq_iff_one_le_abs":
 "#print one_le_sq_iff_one_le_abs /-\n@[simp]\ntheorem one_le_sq_iff_one_le_abs (x : R) : 1 ≤ x ^ 2 ↔ 1 ≤ |x| := by\n  simpa only [one_pow, abs_one] using @sq_le_sq _ _ 1 x\n#align one_le_sq_iff_one_le_abs one_le_sq_iff_one_le_abs\n-/\n\n",
 "one_le_sq_iff":
 "#print one_le_sq_iff /-\ntheorem one_le_sq_iff {a : R} (ha : 0 ≤ a) : 1 ≤ a ^ 2 ↔ 1 ≤ a :=\n  one_le_pow_iff_of_nonneg ha (nat.succ_ne_zero _)\n#align one_le_sq_iff one_le_sq_iff\n-/\n\n",
 "one_le_pow_of_one_le'":
 "#print one_le_pow_of_one_le' /-\n@[to_additive nsmul_nonneg]\ntheorem one_le_pow_of_one_le' {a : M} (H : 1 ≤ a) : ∀ n : ℕ, 1 ≤ a ^ n\n  | 0 => by simp\n  | k + 1 => by\n    rw [pow_succ]\n    exact one_le_mul H (one_le_pow_of_one_le' k)\n#align one_le_pow_of_one_le' one_le_pow_of_one_le'\n#align nsmul_nonneg nsmul_nonneg\n-/\n\n",
 "one_le_pow_of_one_le":
 "#print one_le_pow_of_one_le /-\ntheorem one_le_pow_of_one_le (H : 1 ≤ a) : ∀ n : ℕ, 1 ≤ a ^ n\n  | 0 => by rw [pow_zero]\n  | n + 1 => by\n    rw [pow_succ]\n    simpa only [mul_one] using mul_le_mul H (one_le_pow_of_one_le n) zero_le_one (le_trans zero_le_one H)\n#align one_le_pow_of_one_le one_le_pow_of_one_le\n-/\n\n",
 "one_le_pow_of_le":
 "#print Right.one_le_pow_of_le /-\n@[to_additive Right.pow_nonneg]\ntheorem Right.one_le_pow_of_le (hx : 1 ≤ x) : ∀ {n : ℕ}, 1 ≤ x ^ n\n  | 0 => (pow_zero _).ge\n  | n + 1 => by\n    rw [pow_succ]\n    exact Right.one_le_mul hx Right.one_le_pow_of_le\n#align right.one_le_pow_of_le Right.one_le_pow_of_le\n#align right.pow_nonneg Right.pow_nonneg\n-/\n\n",
 "one_le_pow_iff_of_nonneg":
 "#print one_le_pow_iff_of_nonneg /-\ntheorem one_le_pow_iff_of_nonneg {a : R} (ha : 0 ≤ a) {n : ℕ} (hn : n ≠ 0) : 1 ≤ a ^ n ↔ 1 ≤ a :=\n  by\n  refine' ⟨_, fun h => one_le_pow_of_one_le h n⟩\n  rw [← not_lt, ← not_lt]\n  exact mt fun h => pow_lt_one ha h hn\n#align one_le_pow_iff_of_nonneg one_le_pow_iff_of_nonneg\n-/\n\n",
 "one_le_pow_iff":
 "#print one_le_pow_iff /-\n@[to_additive nsmul_nonneg_iff]\ntheorem one_le_pow_iff {x : M} {n : ℕ} (hn : n ≠ 0) : 1 ≤ x ^ n ↔ 1 ≤ x :=\n  ⟨le_imp_le_of_lt_imp_lt fun h => pow_lt_one' h hn, fun h => one_le_pow_of_one_le' h n⟩\n#align one_le_pow_iff one_le_pow_iff\n#align nsmul_nonneg_iff nsmul_nonneg_iff\n-/\n\n",
 "min_lt_of_mul_lt_sq":
 "#print min_lt_of_mul_lt_sq /-\n@[to_additive min_lt_of_add_lt_two_nsmul]\ntheorem min_lt_of_mul_lt_sq {a b c : M} (h : a * b < c ^ 2) : min a b < c := by\n  simpa using min_lt_max_of_mul_lt_mul (h.trans_eq <| pow_two _)\n#align min_lt_of_mul_lt_sq min_lt_of_mul_lt_sq\n#align min_lt_of_add_lt_two_nsmul min_lt_of_add_lt_two_nsmul\n-/\n\n",
 "min_lt_max_of_mul_lt_mul":
 "#print min_lt_max_of_mul_lt_mul /-\n@[to_additive]\ntheorem min_lt_max_of_mul_lt_mul {a b c d : M} (h : a * b < c * d) : min a b < max c d :=\n  lt_of_pow_lt_pow' 2 <| by\n    simp_rw [pow_two]\n    exact (mul_le_mul' inf_le_left inf_le_right).trans_lt (h.trans_le <| mul_le_mul' le_sup_left le_sup_right)\n#align min_lt_max_of_mul_lt_mul min_lt_max_of_mul_lt_mul\n#align min_lt_max_of_add_lt_add min_lt_max_of_add_lt_add\n-/\n\n",
 "min_le_of_mul_le_sq":
 "#print min_le_of_mul_le_sq /-\n@[to_additive min_le_of_add_le_two_nsmul]\ntheorem min_le_of_mul_le_sq {a b c : M} (h : a * b ≤ c ^ 2) : min a b ≤ c := by\n  simpa using min_le_max_of_mul_le_mul (h.trans_eq <| pow_two _)\n#align min_le_of_mul_le_sq min_le_of_mul_le_sq\n#align min_le_of_add_le_two_nsmul min_le_of_add_le_two_nsmul\n-/\n\n",
 "map_sub_swap":
 "theorem map_sub_swap (x y : R) : f (x - y) = f (y - x) := by rw [← map_neg, neg_sub]\n#align map_sub_swap map_sub_swap\n\n",
 "map_neg_one":
 "theorem map_neg_one : f (-1) = 1 :=\n  (pow_eq_one_iff (nat.succ_ne_zero 1)).1 <| by rw [← map_pow, neg_one_sq, map_one]\n#align map_neg_one map_neg_one\n\n",
 "map_neg":
 "#print map_neg /-\n@[simp]\ntheorem map_neg (x : R) : f (-x) = f x := by rw [← neg_one_mul, map_mul, map_neg_one, one_mul]\n#align map_neg map_neg\n-/\n\n",
 "lt_of_pow_lt_pow'":
 "#print lt_of_pow_lt_pow' /-\n@[to_additive lt_of_nsmul_lt_nsmul]\ntheorem lt_of_pow_lt_pow' {a b : M} (n : ℕ) : a ^ n < b ^ n → a < b :=\n  (pow_mono_right _).reflect_lt\n#align lt_of_pow_lt_pow' lt_of_pow_lt_pow'\n#align lt_of_nsmul_lt_nsmul lt_of_nsmul_lt_nsmul\n-/\n\n",
 "lt_of_pow_lt_pow":
 "#print lt_of_pow_lt_pow /-\ntheorem lt_of_pow_lt_pow {a b : R} (n : ℕ) (hb : 0 ≤ b) (h : a ^ n < b ^ n) : a < b :=\n  lt_of_not_ge fun hn => not_lt_of_ge (pow_le_pow_of_le_left hb hn _) h\n#align lt_of_pow_lt_pow lt_of_pow_lt_pow\n-/\n\n",
 "lt_of_mul_self_lt_mul_self":
 "#print lt_of_mul_self_lt_mul_self /-\ntheorem lt_of_mul_self_lt_mul_self (hb : 0 ≤ b) : a * a < b * b → a < b :=\n  by\n  simp_rw [← sq]\n  exact lt_of_pow_lt_pow _ hb\n#align lt_of_mul_self_lt_mul_self lt_of_mul_self_lt_mul_self\n-/\n\n",
 "lt_max_of_sq_lt_mul":
 "#print lt_max_of_sq_lt_mul /-\n@[to_additive lt_max_of_two_nsmul_lt_add]\ntheorem lt_max_of_sq_lt_mul {a b c : M} (h : a ^ 2 < b * c) : a < max b c := by\n  simpa using min_lt_max_of_mul_lt_mul ((pow_two _).symm.trans_lt h)\n#align lt_max_of_sq_lt_mul lt_max_of_sq_lt_mul\n#align lt_max_of_two_nsmul_lt_add lt_max_of_two_nsmul_lt_add\n-/\n\n",
 "le_self_pow":
 "#print le_self_pow /-\ntheorem le_self_pow (ha : 1 ≤ a) (h : m ≠ 0) : a ≤ a ^ m :=\n  (pow_one a).symm.trans_le (pow_le_pow ha <| pos_iff_ne_zero.mpr h)\n#align le_self_pow le_self_pow\n-/\n\n",
 "le_of_pow_le_pow'":
 "#print le_of_pow_le_pow' /-\n@[to_additive le_of_nsmul_le_nsmul]\ntheorem le_of_pow_le_pow' {a b : M} {n : ℕ} (hn : n ≠ 0) : a ^ n ≤ b ^ n → a ≤ b :=\n  (pow_strictMono_right' hn).le_iff_le.1\n#align le_of_pow_le_pow' le_of_pow_le_pow'\n#align le_of_nsmul_le_nsmul le_of_nsmul_le_nsmul\n-/\n\n",
 "le_of_pow_le_pow":
 "#print le_of_pow_le_pow /-\ntheorem le_of_pow_le_pow {a b : R} (n : ℕ) (hb : 0 ≤ b) (hn : 0 < n) (h : a ^ n ≤ b ^ n) : a ≤ b :=\n  le_of_not_lt fun h1 => not_le_of_lt (pow_lt_pow_of_lt_left h1 hb hn) h\n#align le_of_pow_le_pow le_of_pow_le_pow\n-/\n\n",
 "le_max_of_sq_le_mul":
 "#print le_max_of_sq_le_mul /-\n@[to_additive le_max_of_two_nsmul_le_add]\ntheorem le_max_of_sq_le_mul {a b c : M} (h : a ^ 2 ≤ b * c) : a ≤ max b c := by\n  simpa using min_le_max_of_mul_le_mul ((pow_two _).symm.trans_le h)\n#align le_max_of_sq_le_mul le_max_of_sq_le_mul\n#align le_max_of_two_nsmul_le_add le_max_of_two_nsmul_le_add\n-/\n\n",
 "abs_sq":
 "#print abs_sq /-\ntheorem abs_sq (x : R) : |x ^ 2| = x ^ 2 := by simpa only [sq] using abs_mul_self x\n#align abs_sq abs_sq\n-/\n\n",
 "abs_pow_eq_one":
 "#print abs_pow_eq_one /-\ntheorem abs_pow_eq_one (a : R) {n : ℕ} (h : 0 < n) : |a ^ n| = 1 ↔ |a| = 1 :=\n  by\n  convert pow_left_inj (abs_nonneg a) zero_le_one h\n  exacts[(pow_abs _ _).symm, (one_pow _).symm]\n#align abs_pow_eq_one abs_pow_eq_one\n-/\n\n",
 "abs_neg_one_pow":
 "#print abs_neg_one_pow /-\ntheorem abs_neg_one_pow (n : ℕ) : |(-1 : R) ^ n| = 1 := by rw [← pow_abs, abs_neg, abs_one, one_pow]\n#align abs_neg_one_pow abs_neg_one_pow\n-/\n\n",
 "abs_lt_of_sq_lt_sq'":
 "#print abs_lt_of_sq_lt_sq' /-\ntheorem abs_lt_of_sq_lt_sq' (h : x ^ 2 < y ^ 2) (hy : 0 ≤ y) : -y < x ∧ x < y :=\n  abs_lt.mp <| abs_lt_of_sq_lt_sq h hy\n#align abs_lt_of_sq_lt_sq' abs_lt_of_sq_lt_sq'\n-/\n\n",
 "abs_lt_of_sq_lt_sq":
 "#print abs_lt_of_sq_lt_sq /-\ntheorem abs_lt_of_sq_lt_sq (h : x ^ 2 < y ^ 2) (hy : 0 ≤ y) : |x| < y := by rwa [← abs_of_nonneg hy, ← sq_lt_sq]\n#align abs_lt_of_sq_lt_sq abs_lt_of_sq_lt_sq\n-/\n\n",
 "abs_le_of_sq_le_sq'":
 "#print abs_le_of_sq_le_sq' /-\ntheorem abs_le_of_sq_le_sq' (h : x ^ 2 ≤ y ^ 2) (hy : 0 ≤ y) : -y ≤ x ∧ x ≤ y :=\n  abs_le.mp <| abs_le_of_sq_le_sq h hy\n#align abs_le_of_sq_le_sq' abs_le_of_sq_le_sq'\n-/\n\n",
 "abs_le_of_sq_le_sq":
 "#print abs_le_of_sq_le_sq /-\ntheorem abs_le_of_sq_le_sq (h : x ^ 2 ≤ y ^ 2) (hy : 0 ≤ y) : |x| ≤ y := by rwa [← abs_of_nonneg hy, ← sq_le_sq]\n#align abs_le_of_sq_le_sq abs_le_of_sq_le_sq\n-/\n\n"}