{"zero_pow_eq_zero":
 "#print zero_pow_eq_zero /-\n@[simp]\ntheorem zero_pow_eq_zero [nontrivial M] {n : ℕ} : (0 : M) ^ n = 0 ↔ 0 < n :=\n  by\n  constructor <;> intro h\n  · rw [pos_iff_ne_zero]\n    rintro rfl\n    simpa using h\n  · exact zero_pow' n h.ne.symm\n#align zero_pow_eq_zero zero_pow_eq_zero\n-/\n\n",
 "zero_pow_eq":
 "#print zero_pow_eq /-\ntheorem zero_pow_eq (n : ℕ) : (0 : M) ^ n = if n = 0 then 1 else 0 :=\n  by\n  split_ifs with h\n  · rw [h, pow_zero]\n  · rw [zero_pow (nat.pos_of_ne_zero h)]\n#align zero_pow_eq zero_pow_eq\n-/\n\n",
 "zero_pow'":
 "#print zero_pow' /-\n@[simp]\ntheorem zero_pow' : ∀ n : ℕ, n ≠ 0 → (0 : M) ^ n = 0\n  | 0, h => absurd rfl h\n  | k + 1, h => by\n    rw [pow_succ]\n    exact zero_mul _\n#align zero_pow' zero_pow'\n-/\n\n",
 "zero_pow":
 "#print zero_pow /-\n/-\nCopyright (c) 2015 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Robert Y. Lewis\n-/\ntheorem zero_pow : ∀ {n : ℕ}, 0 < n → (0 : M) ^ n = 0\n  | n + 1, _ => by rw [pow_succ, zero_mul]\n#align zero_pow zero_pow\n-/\n\n",
 "sub_sq'":
 "#print sub_sq' /-\ntheorem sub_sq' (a b : R) : (a - b) ^ 2 = a ^ 2 + b ^ 2 - 2 * a * b := by\n  rw [sub_eq_add_neg, add_sq', neg_sq, mul_neg, ← sub_eq_add_neg]\n#align sub_sq' sub_sq'\n-/\n\n",
 "sub_sq":
 "#print sub_sq /-\ntheorem sub_sq (a b : R) : (a - b) ^ 2 = a ^ 2 - 2 * a * b + b ^ 2 := by\n  rw [sub_eq_add_neg, add_sq, neg_sq, mul_neg, ← sub_eq_add_neg]\n#align sub_sq sub_sq\n-/\n\n",
 "sq_sub_sq":
 "#print sq_sub_sq /-\ntheorem sq_sub_sq (a b : R) : a ^ 2 - b ^ 2 = (a + b) * (a - b) :=\n  (Commute.all a b).sq_sub_sq\n#align sq_sub_sq sq_sub_sq\n-/\n\n",
 "sq_ne_one_iff":
 "#print sq_ne_one_iff /-\ntheorem sq_ne_one_iff : a ^ 2 ≠ 1 ↔ a ≠ 1 ∧ a ≠ -1 :=\n  sq_eq_one_iff.not.trans not_or\n#align sq_ne_one_iff sq_ne_one_iff\n-/\n\n",
 "sq_eq_zero_iff":
 "#print sq_eq_zero_iff /-\ntheorem sq_eq_zero_iff [no_zero_divisors M] {a : M} : a ^ 2 = 0 ↔ a = 0 :=\n  pow_eq_zero_iff two_pos\n#align sq_eq_zero_iff sq_eq_zero_iff\n-/\n\n",
 "sq_eq_sq_iff_eq_or_eq_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print sq_eq_sq_iff_eq_or_eq_neg /-\n-- Copies of the above comm_ring lemmas for `units R`.\nprotected theorem sq_eq_sq_iff_eq_or_eq_neg {a b : «expr ˣ» R} : a ^ 2 = b ^ 2 ↔ a = b ∨ a = -b := by\n  simp_rw [ext_iff, coe_pow, sq_eq_sq_iff_eq_or_eq_neg, Units.val_neg]\n#align sq_eq_sq_iff_eq_or_eq_neg sq_eq_sq_iff_eq_or_eq_neg\n-/\n\n",
 "sq_eq_one_iff":
 "#print sq_eq_one_iff /-\n@[simp]\ntheorem sq_eq_one_iff : a ^ 2 = 1 ↔ a = 1 ∨ a = -1 := by rw [← (Commute.one_right a).sq_eq_sq_iff_eq_or_eq_neg, one_pow]\n#align sq_eq_one_iff sq_eq_one_iff\n-/\n\n",
 "pow_ne_zero_iff":
 "#print pow_ne_zero_iff /-\ntheorem pow_ne_zero_iff [no_zero_divisors M] {a : M} {n : ℕ} (hn : 0 < n) : a ^ n ≠ 0 ↔ a ≠ 0 :=\n  (pow_eq_zero_iff hn).not\n#align pow_ne_zero_iff pow_ne_zero_iff\n-/\n\n",
 "pow_ne_zero":
 "#print pow_ne_zero /-\n@[field_simps]\ntheorem pow_ne_zero [no_zero_divisors M] {a : M} (n : ℕ) (h : a ≠ 0) : a ^ n ≠ 0 :=\n  mt pow_eq_zero h\n#align pow_ne_zero pow_ne_zero\n-/\n\n",
 "pow_eq_zero_of_le":
 "#print pow_eq_zero_of_le /-\ntheorem pow_eq_zero_of_le {x : M} {n m : ℕ} (hn : n ≤ m) (hx : x ^ n = 0) : x ^ m = 0 := by\n  rw [← tsub_add_cancel_of_le hn, pow_add, hx, mul_zero]\n#align pow_eq_zero_of_le pow_eq_zero_of_le\n-/\n\n",
 "pow_eq_zero_iff'":
 "#print pow_eq_zero_iff' /-\ntheorem pow_eq_zero_iff' [no_zero_divisors M] [nontrivial M] {a : M} {n : ℕ} : a ^ n = 0 ↔ a = 0 ∧ n ≠ 0 := by\n  cases (zero_le n).eq_or_gt <;> simp [*, ne_of_gt]\n#align pow_eq_zero_iff' pow_eq_zero_iff'\n-/\n\n",
 "pow_eq_zero_iff":
 "#print pow_eq_zero_iff /-\n@[simp]\ntheorem pow_eq_zero_iff [no_zero_divisors M] {a : M} {n : ℕ} (hn : 0 < n) : a ^ n = 0 ↔ a = 0 :=\n  by\n  refine' ⟨pow_eq_zero, _⟩\n  rintro rfl\n  exact zero_pow hn\n#align pow_eq_zero_iff pow_eq_zero_iff\n-/\n\n",
 "pow_eq_zero":
 "#print pow_eq_zero /-\ntheorem pow_eq_zero [no_zero_divisors M] {x : M} {n : ℕ} (H : x ^ n = 0) : x = 0 :=\n  by\n  induction' n with n ih\n  · rw [pow_zero] at H\n    rw [← mul_one x, H, mul_zero]\n  · rw [pow_succ] at H\n    exact or.cases_on (mul_eq_zero.1 H) id ih\n#align pow_eq_zero pow_eq_zero\n-/\n\n",
 "pow_dvd_pow_iff":
 "#print pow_dvd_pow_iff /-\ntheorem pow_dvd_pow_iff [cancel_comm_monoid_with_zero R] {x : R} {n m : ℕ} (h0 : x ≠ 0) (h1 : ¬is_unit x) :\n    x ^ n ∣ x ^ m ↔ n ≤ m := by\n  constructor\n  · intro h\n    rw [← not_lt]\n    intro hmn\n    apply h1\n    have : x ^ m * x ∣ x ^ m * 1 := by\n      rw [← pow_succ', mul_one]\n      exact (pow_dvd_pow _ (nat.succ_le_of_lt hmn)).trans h\n    rwa [mul_dvd_mul_iff_left, ← isUnit_iff_dvd_one] at this\n    apply pow_ne_zero m h0\n  · apply pow_dvd_pow\n#align pow_dvd_pow_iff pow_dvd_pow_iff\n-/\n\n",
 "powMonoidWithZeroHom_apply":
 "#print powMonoidWithZeroHom_apply /-\n@[simp]\ntheorem powMonoidWithZeroHom_apply (a : M) : pow_monoid_with_zero_hom hn a = a ^ n :=\n  rfl\n#align pow_monoid_with_zero_hom_apply powMonoidWithZeroHom_apply\n-/\n\n",
 "neg_sq":
 "#print neg_sq /-\n@[simp]\ntheorem neg_sq (a : R) : (-a) ^ 2 = a ^ 2 := by simp [sq]\n#align neg_sq neg_sq\n-/\n\n",
 "neg_pow_bit1":
 "#print neg_pow_bit1 /-\n@[simp]\ntheorem neg_pow_bit1 (a : R) (n : ℕ) : (-a) ^ bit1 n = -a ^ bit1 n := by\n  simp only [bit1, pow_succ, neg_pow_bit0, neg_mul_eq_neg_mul]\n#align neg_pow_bit1 neg_pow_bit1\n-/\n\n",
 "neg_pow_bit0":
 "#print neg_pow_bit0 /-\n@[simp]\ntheorem neg_pow_bit0 (a : R) (n : ℕ) : (-a) ^ bit0 n = a ^ bit0 n := by rw [pow_bit0', neg_mul_neg, pow_bit0']\n#align neg_pow_bit0 neg_pow_bit0\n-/\n\n",
 "neg_pow":
 "#print neg_pow /-\ntheorem neg_pow (a : R) (n : ℕ) : (-a) ^ n = (-1) ^ n * a ^ n :=\n  neg_one_mul a ▸ (Commute.neg_one_left a).mul_pow n\n#align neg_pow neg_pow\n-/\n\n",
 "neg_one_sq":
 "#print neg_one_sq /-\n@[simp]\ntheorem neg_one_sq : (-1 : R) ^ 2 = 1 := by rw [neg_sq, one_pow]\n#align neg_one_sq neg_one_sq\n-/\n\n",
 "neg_one_pow_mul_eq_zero_iff":
 "#print neg_one_pow_mul_eq_zero_iff /-\n@[simp]\ntheorem neg_one_pow_mul_eq_zero_iff {n : ℕ} {r : R} : (-1) ^ n * r = 0 ↔ r = 0 := by\n  rcases neg_one_pow_eq_or R n with ⟨⟩ <;> simp [h]\n#align neg_one_pow_mul_eq_zero_iff neg_one_pow_mul_eq_zero_iff\n-/\n\n",
 "neg_one_pow_eq_or":
 "#print neg_one_pow_eq_or /-\ntheorem neg_one_pow_eq_or : ∀ n : ℕ, (-1 : R) ^ n = 1 ∨ (-1 : R) ^ n = -1\n  | 0 => or.inl (pow_zero _)\n  | n + 1 =>\n    (neg_one_pow_eq_or n).swap.imp (fun h => by rw [pow_succ, h, neg_one_mul, neg_neg]) fun h => by\n      rw [pow_succ, h, mul_one]\n#align neg_one_pow_eq_or neg_one_pow_eq_or\n-/\n\n",
 "ne_zero_pow":
 "#print ne_zero_pow /-\ntheorem ne_zero_pow {a : M} {n : ℕ} (hn : n ≠ 0) : a ^ n ≠ 0 → a ≠ 0 :=\n  by\n  contrapose!\n  rintro rfl\n  exact zero_pow' n hn\n#align ne_zero_pow ne_zero_pow\n-/\n\n",
 "mul_neg_one_pow_eq_zero_iff":
 "#print mul_neg_one_pow_eq_zero_iff /-\n@[simp]\ntheorem mul_neg_one_pow_eq_zero_iff {n : ℕ} {r : R} : r * (-1) ^ n = 0 ↔ r = 0 := by\n  rcases neg_one_pow_eq_or R n with ⟨⟩ <;> simp [h]\n#align mul_neg_one_pow_eq_zero_iff mul_neg_one_pow_eq_zero_iff\n-/\n\n",
 "min_pow_dvd_add":
 "#print min_pow_dvd_add /-\ntheorem min_pow_dvd_add {n m : ℕ} {a b c : R} (ha : c ^ n ∣ a) (hb : c ^ m ∣ b) : c ^ min n m ∣ a + b :=\n  by\n  replace ha := (pow_dvd_pow c (min_le_left n m)).trans ha\n  replace hb := (pow_dvd_pow c (min_le_right n m)).trans hb\n  exact dvd_add ha hb\n#align min_pow_dvd_add min_pow_dvd_add\n-/\n\n",
 "map_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n#print RingHom.map_pow /-\nprotected theorem RingHom.map_pow (f : «expr →+* » R S) (a) : ∀ n : ℕ, f (a ^ n) = f a ^ n :=\n  map_pow f a\n#align ring_hom.map_pow RingHom.map_pow\n-/\n\n",
 "inverse_pow":
 "theorem ring.inverse_pow (r : M) : ∀ n : ℕ, Ring.inverse r ^ n = Ring.inverse (r ^ n)\n  | 0 => by rw [pow_zero, pow_zero, Ring.inverse_one]\n  | n + 1 => by rw [pow_succ, pow_succ', Ring.mul_inverse_rev' ((Commute.refl r).pow_left n), ring.inverse_pow]\n#align ring.inverse_pow ring.inverse_pow\n\n",
 "eq_or_eq_neg_of_sq_eq_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n#print eq_or_eq_neg_of_sq_eq_sq /-\nprotected theorem eq_or_eq_neg_of_sq_eq_sq (a b : «expr ˣ» R) (h : a ^ 2 = b ^ 2) : a = b ∨ a = -b :=\n  units.sq_eq_sq_iff_eq_or_eq_neg.1 h\n#align eq_or_eq_neg_of_sq_eq_sq eq_or_eq_neg_of_sq_eq_sq\n-/\n\n",
 "coe_powMonoidWithZeroHom":
 "#print coe_powMonoidWithZeroHom /-\n@[simp]\ntheorem coe_powMonoidWithZeroHom : (pow_monoid_with_zero_hom hn : M → M) = (· ^ n) :=\n  rfl\n#align coe_pow_monoid_with_zero_hom coe_powMonoidWithZeroHom\n-/\n\n",
 "add_sq'":
 "#print add_sq' /-\ntheorem add_sq' (a b : R) : (a + b) ^ 2 = a ^ 2 + b ^ 2 + 2 * a * b := by\n  rw [add_sq, add_assoc, add_comm _ (b ^ 2), add_assoc]\n#align add_sq' add_sq'\n-/\n\n",
 "add_sq":
 "#print add_sq /-\ntheorem add_sq (a b : R) : (a + b) ^ 2 = a ^ 2 + 2 * a * b + b ^ 2 := by simp only [sq, add_mul_self_eq]\n#align add_sq add_sq\n-/\n\n"}