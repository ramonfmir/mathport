{"snd_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number -/\n/-- A version of `triv_sq_zero_ext.snd_mul` with `*` instead of `•`. -/\n@[simp]\ntheorem snd_mul [Semiring R] (x y : dual_number R) : snd (x * y) = fst x * snd y + fst y * snd x :=\n  snd_mul _ _\n#align snd_mul snd_mul\n\n",
 "snd_eps":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n@[simp]\ntheorem snd_eps [Zero R] [One R] : snd (dual_number.eps) = (1 : R) :=\n  snd_inr _ _\n#align snd_eps snd_eps\n\n",
 "lift_eps":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number -/\n-- Lifting `dual_number.eps` itself gives the identity.\n@[simp]\ntheorem lift_eps : lift ⟨dual_number.eps, eps_mul_eps⟩ = alg_hom.id R (dual_number R) :=\n  alg_hom_ext <| lift_apply_eps _\n#align lift_eps lift_eps\n\n",
 "lift_apply_eps":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number -/\n-- When applied to `ε`, `dual_number.lift` produces the element of `A` that squares to 0.\n@[simp]\ntheorem lift_apply_eps (e : { e : A // e * e = 0 }) : lift e (dual_number.eps : dual_number R) = e :=\n  (triv_sq_zero_ext.lift_aux_apply_inr _ _ _).trans <| one_smul _ _\n#align lift_apply_eps lift_apply_eps\n\n",
 "inr_eq_smul_eps":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number -/\n@[simp]\ntheorem inr_eq_smul_eps [mul_zero_one_class R] (r : R) : inr r = («expr • » r (dual_number.eps) : dual_number R) :=\n  ext (mul_zero r).symm (mul_one r).symm\n#align inr_eq_smul_eps inr_eq_smul_eps\n\n",
 "fst_eps":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n@[simp]\ntheorem fst_eps [Zero R] [One R] : fst (dual_number.eps) = (0 : R) :=\n  fst_inr _ _\n#align fst_eps fst_eps\n\n",
 "eps_mul_eps":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number -/\n@[simp]\ntheorem eps_mul_eps [Semiring R] : (dual_number.eps * dual_number.eps : dual_number R) = 0 :=\n  inr_mul_inr _ _ _\n#align eps_mul_eps eps_mul_eps\n\n",
 "alg_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `dual_number.eps -/\n/-- For two algebra morphisms out of `R[ε]` to agree, it suffices for them to agree on `ε`. -/\n@[ext]\ntheorem alg_hom_ext {A} [CommSemiring R] [Semiring A] [algebra R A] ⦃f g : «expr →ₐ[ ] » (dual_number R) R A⦄\n    (h : f (dual_number.eps) = g (dual_number.eps)) : f = g :=\n  alg_hom_ext' <| linear_map.ext_ring <| h\n#align alg_hom_ext alg_hom_ext\n\n"}