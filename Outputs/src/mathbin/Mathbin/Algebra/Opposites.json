{"unop_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem unop_zero [Zero α] : unop (0 : «expr ᵐᵒᵖ» α) = 0 :=\n  rfl\n#align unop_zero unop_zero\n\n",
 "unop_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[to_additive]\ntheorem unop_surjective : surjective (unop : «expr ᵐᵒᵖ» α → α) :=\n  unop_bijective.surjective\n#align unop_surjective unop_surjective\n\n",
 "unop_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem unop_sub [Sub α] (x y : «expr ᵐᵒᵖ» α) : unop (x - y) = unop x - unop y :=\n  rfl\n#align unop_sub unop_sub\n\n",
 "unop_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, to_additive]\ntheorem unop_smul {R : Type _} [SMul R α] (c : R) (a : «expr ᵐᵒᵖ» α) : unop («expr • » c a) = «expr • » c (unop a) :=\n  rfl\n#align unop_smul unop_smul\n\n",
 "unop_op":
 "/-\nCopyright (c) 2018 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\n@[simp, to_additive]\ntheorem unop_op (x : α) : unop (op x) = x :=\n  rfl\n#align unop_op unop_op\n\n",
 "unop_one":
 "@[simp]\ntheorem unop_one [One α] : unop 1 = (1 : α) :=\n  rfl\n#align unop_one unop_one\n\n",
 "unop_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem unop_neg [Neg α] (x : «expr ᵐᵒᵖ» α) : unop (-x) = -unop x :=\n  rfl\n#align unop_neg unop_neg\n\n",
 "unop_ne_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\ntheorem unop_ne_zero_iff [Zero α] (a : «expr ᵐᵒᵖ» α) : a.unop ≠ (0 : α) ↔ a ≠ (0 : «expr ᵐᵒᵖ» α) :=\n  not_congr <| unop_eq_zero_iff a\n#align unop_ne_zero_iff unop_ne_zero_iff\n\n",
 "unop_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵃᵒᵖ» -/\n@[simp]\ntheorem unop_mul [Mul α] (a b : «expr ᵃᵒᵖ» α) : unop (a * b) = unop a * unop b :=\n  rfl\n#align unop_mul unop_mul\n\n",
 "unop_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵃᵒᵖ» -/\n@[simp]\ntheorem unop_inv [Inv α] (a : «expr ᵃᵒᵖ» α) : unop a⁻¹ = (unop a)⁻¹ :=\n  rfl\n#align unop_inv unop_inv\n\n",
 "unop_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[to_additive]\ntheorem unop_injective : injective (unop : «expr ᵐᵒᵖ» α → α) :=\n  unop_bijective.injective\n#align unop_injective unop_injective\n\n",
 "unop_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp, to_additive]\ntheorem unop_inj {x y : «expr ᵐᵒᵖ» α} : unop x = unop y ↔ x = y :=\n  unop_injective.eq_iff\n#align unop_inj unop_inj\n\n",
 "unop_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem unop_eq_zero_iff [Zero α] (a : «expr ᵐᵒᵖ» α) : a.unop = (0 : α) ↔ a = (0 : «expr ᵐᵒᵖ» α) :=\n  unop_injective.eq_iff' rfl\n#align unop_eq_zero_iff unop_eq_zero_iff\n\n",
 "unop_eq_one_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵃᵒᵖ» -/\n@[simp]\ntheorem unop_eq_one_iff [One α] {a : «expr ᵃᵒᵖ» α} : unop a = 1 ↔ a = 1 :=\n  unop_injective.eq_iff' unop_one\n#align unop_eq_one_iff unop_eq_one_iff\n\n",
 "unop_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵃᵒᵖ» -/\n@[simp]\ntheorem unop_div [Div α] (a b : «expr ᵃᵒᵖ» α) : unop (a / b) = unop a / unop b :=\n  rfl\n#align unop_div unop_div\n\n",
 "unop_comp_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp, to_additive]\ntheorem unop_comp_op : (unop : «expr ᵐᵒᵖ» α → α) ∘ op = id :=\n  rfl\n#align unop_comp_op unop_comp_op\n\n",
 "unop_bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[to_additive]\ntheorem unop_bijective : bijective (unop : «expr ᵐᵒᵖ» α → α) :=\n  opEquiv.symm.bijective\n#align unop_bijective unop_bijective\n\n",
 "unop_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem unop_add [Add α] (x y : «expr ᵐᵒᵖ» α) : unop (x + y) = unop x + unop y :=\n  rfl\n#align unop_add unop_add\n\n",
 "op_zero":
 "@[simp]\ntheorem op_zero [Zero α] : op (0 : α) = 0 :=\n  rfl\n#align op_zero op_zero\n\n",
 "op_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp, to_additive]\ntheorem op_unop (x : «expr ᵐᵒᵖ» α) : op (unop x) = x :=\n  rfl\n#align op_unop op_unop\n\n",
 "op_surjective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[to_additive]\ntheorem op_surjective : surjective (op : α → «expr ᵐᵒᵖ» α) :=\n  op_bijective.surjective\n#align op_surjective op_surjective\n\n",
 "op_sub":
 "@[simp]\ntheorem op_sub [Sub α] (x y : α) : op (x - y) = op x - op y :=\n  rfl\n#align op_sub op_sub\n\n",
 "op_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, to_additive]\ntheorem op_smul {R : Type _} [SMul R α] (c : R) (a : α) : op («expr • » c a) = «expr • » c (op a) :=\n  rfl\n#align op_smul op_smul\n\n",
 "op_one":
 "@[simp]\ntheorem op_one [One α] : op (1 : α) = 1 :=\n  rfl\n#align op_one op_one\n\n",
 "op_neg":
 "@[simp]\ntheorem op_neg [Neg α] (x : α) : op (-x) = -op x :=\n  rfl\n#align op_neg op_neg\n\n",
 "op_ne_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\ntheorem op_ne_zero_iff [Zero α] (a : α) : op a ≠ (0 : «expr ᵐᵒᵖ» α) ↔ a ≠ (0 : α) :=\n  not_congr <| op_eq_zero_iff a\n#align op_ne_zero_iff op_ne_zero_iff\n\n",
 "op_mul":
 "@[simp]\ntheorem op_mul [Mul α] (a b : α) : op (a * b) = op a * op b :=\n  rfl\n#align op_mul op_mul\n\n",
 "op_inv":
 "@[simp]\ntheorem op_inv [Inv α] (a : α) : op a⁻¹ = (op a)⁻¹ :=\n  rfl\n#align op_inv op_inv\n\n",
 "op_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[to_additive]\ntheorem op_injective : injective (op : α → «expr ᵐᵒᵖ» α) :=\n  op_bijective.injective\n#align op_injective op_injective\n\n",
 "op_inj":
 "@[simp, to_additive]\ntheorem op_inj {x y : α} : op x = op y ↔ x = y :=\n  op_injective.eq_iff\n#align op_inj op_inj\n\n",
 "op_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp]\ntheorem op_eq_zero_iff [Zero α] (a : α) : op a = (0 : «expr ᵐᵒᵖ» α) ↔ a = (0 : α) :=\n  op_injective.eq_iff' rfl\n#align op_eq_zero_iff op_eq_zero_iff\n\n",
 "op_eq_one_iff":
 "@[simp]\ntheorem op_eq_one_iff [One α] {a : α} : op a = 1 ↔ a = 1 :=\n  op_injective.eq_iff' op_one\n#align op_eq_one_iff op_eq_one_iff\n\n",
 "op_div":
 "@[simp]\ntheorem op_div [Div α] (a b : α) : op (a / b) = op a / op b :=\n  rfl\n#align op_div op_div\n\n",
 "op_comp_unop":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[simp, to_additive]\ntheorem op_comp_unop : (op : α → «expr ᵐᵒᵖ» α) ∘ unop = id :=\n  rfl\n#align op_comp_unop op_comp_unop\n\n",
 "op_bijective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n@[to_additive]\ntheorem op_bijective : bijective (op : α → «expr ᵐᵒᵖ» α) :=\n  opEquiv.bijective\n#align op_bijective op_bijective\n\n",
 "op_add":
 "@[simp]\ntheorem op_add [Add α] (x y : α) : op (x + y) = op x + op y :=\n  rfl\n#align op_add op_add\n\n"}