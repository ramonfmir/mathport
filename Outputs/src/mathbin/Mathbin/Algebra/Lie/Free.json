{"sub_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\ntheorem rel.sub_right {a b : (exprlib) R X} (c : (exprlib) R X) (h : rel R X a b) : rel R X (a - c) (b - c) := by\n  simpa only [sub_eq_add_neg] using h.add_right (-c)\n#align rel.sub_right rel.sub_right\n\n",
 "sub_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\ntheorem rel.sub_left (a : (exprlib) R X) {b c : (exprlib) R X} (h : rel R X b c) : rel R X (a - b) (a - c) := by\n  simpa only [sub_eq_add_neg] using h.neg.add_left a\n#align rel.sub_left rel.sub_left\n\n",
 "smul_of_tower":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem rel.smul_of_tower {S : Type _} [monoid S] [DistribMulAction S R] [IsScalarTower S R R] (t : S)\n    (a b : (exprlib) R X) (h : rel R X a b) : rel R X («expr • » t a) («expr • » t b) :=\n  by\n  rw [← smul_one_smul R t a, ← smul_one_smul R t b]\n  exact h.smul _\n#align rel.smul_of_tower rel.smul_of_tower\n\n",
 "of_comp_lift":
 "@[simp]\ntheorem of_comp_lift (f : X → L) : lift R f ∘ of R = f :=\n  (lift R).left_inv f\n#align of_comp_lift of_comp_lift\n\n",
 "neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\ntheorem rel.neg {a b : (exprlib) R X} (h : rel R X a b) : rel R X (-a) (-b) := by\n  simpa only [neg_one_smul] using h.smul (-1)\n#align rel.neg rel.neg\n\n",
 "lift_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ⁅ ⁆ » -/\n@[simp]\ntheorem lift_unique (f : X → L) (g : «expr →ₗ⁅ ⁆ » (free_lie_algebra R X) R L) : g ∘ of R = f ↔ g = lift R f :=\n  (lift R).symm_apply_eq\n#align lift_unique lift_unique\n\n",
 "lift_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ⁅ ⁆ » -/\n@[simp]\ntheorem lift_symm_apply (F : «expr →ₗ⁅ ⁆ » (free_lie_algebra R X) R L) : (lift R).symm F = F ∘ of R :=\n  rfl\n#align lift_symm_apply lift_symm_apply\n\n",
 "lift_of_apply":
 "@[simp]\ntheorem lift_of_apply (f : X → L) (x) : lift R f (of R x) = f x := by\n  rw [← Function.comp_apply (lift R f) (of R) x, of_comp_lift]\n#align lift_of_apply lift_of_apply\n\n",
 "lift_comp_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ⁅ ⁆ » -/\n@[simp]\ntheorem lift_comp_of (F : «expr →ₗ⁅ ⁆ » (free_lie_algebra R X) R L) : lift R (F ∘ of R) = F :=\n  by\n  rw [← lift_symm_apply]\n  exact (lift R).apply_symm_apply F\n#align lift_comp_of lift_comp_of\n\n",
 "lift_aux_spec":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\ntheorem lift_aux_spec (f : X → L) (a b : (exprlib) R X) (h : free_lie_algebra.rel R X a b) :\n    lift_aux R f a = lift_aux R f b := by\n  induction h\n  case lie_self a' => simp only [lift_aux_map_mul, non_unital_alg_hom.map_zero, lie_self]\n  case leibniz_lie a' b' c' => simp only [lift_aux_map_mul, lift_aux_map_add, sub_add_cancel, lie_lie]\n  case smul t a' b' h₁ h₂ => simp only [lift_aux_map_smul, h₂]\n  case add_right a' b' c' h₁ h₂ => simp only [lift_aux_map_add, h₂]\n  case mul_left a' b' c' h₁ h₂ => simp only [lift_aux_map_mul, h₂]\n  case mul_right a' b' c' h₁ h₂ => simp only [lift_aux_map_mul, h₂]\n#align lift_aux_spec lift_aux_spec\n\n",
 "lift_aux_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem lift_aux_map_smul (f : X → L) (t : R) (a : (exprlib) R X) :\n    lift_aux R f («expr • » t a) = «expr • » t (lift_aux R f a) :=\n  non_unital_alg_hom.map_smul _ t a\n#align lift_aux_map_smul lift_aux_map_smul\n\n",
 "lift_aux_map_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\ntheorem lift_aux_map_mul (f : X → L) (a b : (exprlib) R X) :\n    lift_aux R f (a * b) = «expr⁅ , ⁆» (lift_aux R f a) (lift_aux R f b) :=\n  non_unital_alg_hom.map_mul _ a b\n#align lift_aux_map_mul lift_aux_map_mul\n\n",
 "lift_aux_map_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\ntheorem lift_aux_map_add (f : X → L) (a b : (exprlib) R X) : lift_aux R f (a + b) = lift_aux R f a + lift_aux R f b :=\n  non_unital_alg_hom.map_add _ a b\n#align lift_aux_map_add lift_aux_map_add\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ⁅ ⁆ » -/\n@[ext]\ntheorem hom_ext {F₁ F₂ : «expr →ₗ⁅ ⁆ » (free_lie_algebra R X) R L} (h : ∀ x, F₁ (of R x) = F₂ (of R x)) : F₁ = F₂ :=\n  have h' : (lift R).symm F₁ = (lift R).symm F₂ := by ext; simp [h]\n  (lift R).symm.injective h'\n#align hom_ext hom_ext\n\n",
 "add_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprlib -/\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n/- We save characters by using Bourbaki's name `lib` (as in «libre») for\n`free_non_unital_non_assoc_algebra` in this file. -/\ntheorem rel.add_left (a : (exprlib) R X) {b c : (exprlib) R X} (h : rel R X b c) : rel R X (a + b) (a + c) :=\n  by\n  rw [add_comm _ b, add_comm _ c]\n  exact h.add_right _\n#align rel.add_left rel.add_left\n\n"}