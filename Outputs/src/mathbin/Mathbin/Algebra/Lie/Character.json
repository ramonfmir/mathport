{"lie_character_apply_of_mem_derived":
 "theorem lie_character_apply_of_mem_derived (χ : lie_character R L) {x : L} (h : x ∈ derived_series R L 1) : χ x = 0 :=\n  by\n  rw [derived_series_def, derived_series_of_ideal_succ, derived_series_of_ideal_zero, ← lie_submodule.mem_coe_submodule,\n    lie_submodule.lie_ideal_oper_eq_linear_span] at h\n  apply submodule.span_induction h\n  · rintro y ⟨⟨z, hz⟩, ⟨⟨w, hw⟩, rfl⟩⟩\n    apply lie_character_apply_lie\n  · exact χ.map_zero\n  · intro y z hy hz\n    rw [lie_hom.map_add, hy, hz, add_zero]\n  · intro t y hy\n    rw [lie_hom.map_smul, hy, smul_zero]\n#align lie_character_apply_of_mem_derived lie_character_apply_of_mem_derived\n\n",
 "lie_character_apply_lie":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n@[simp]\ntheorem lie_character_apply_lie (χ : lie_character R L) (x y : L) : χ («expr⁅ , ⁆» x y) = 0 := by\n  rw [lie_hom.map_lie, lie_ring.of_associative_ring_bracket, mul_comm, sub_self]\n#align lie_character_apply_lie lie_character_apply_lie\n\n"}