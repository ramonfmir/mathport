{"mk_eq_zero":
 "@[simp]\ntheorem mk_eq_zero {m : M} : mk' N m = 0 ↔ m ∈ N :=\n  submodule.quotient.mk_eq_zero N.to_submodule\n#align mk_eq_zero mk_eq_zero\n\n",
 "mk_bracket":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem mk_bracket (x y : L) : mk («expr⁅ , ⁆» x y) = «expr⁅ , ⁆» (mk x : «expr ⧸ » L I) (mk y : «expr ⧸ » L I) :=\n  rfl\n#align mk_bracket mk_bracket\n\n",
 "mk'_ker":
 "@[simp]\ntheorem mk'_ker : (mk' N).ker = N := by\n  ext\n  simp\n#align mk'_ker mk'_ker\n\n",
 "map_mk'_eq_bot_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem map_mk'_eq_bot_le : map (mk' N) N' = «expr⊥» ↔ N' ≤ N := by rw [← lie_module_hom.le_ker_iff_map, mk'_ker]\n#align map_mk'_eq_bot_le map_mk'_eq_bot_le\n\n",
 "lie_module_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ⁅ , ⁆ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/-- Two `lie_module_hom`s from a quotient lie module are equal if their compositions with\n`lie_submodule.quotient.mk'` are equal.\n\nSee note [partially-applied ext lemmas]. -/\n@[ext]\ntheorem lie_module_hom_ext ⦃f g : «expr →ₗ⁅ , ⁆ » («expr ⧸ » M N) R L M⦄ (h : f.comp (mk' N) = g.comp (mk' N)) :\n    f = g :=\n  lie_module_hom.ext fun x => Quotient.inductionOn' x <| lie_module_hom.congr_fun h\n#align lie_module_hom_ext lie_module_hom_ext\n\n",
 "is_quotient_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\ntheorem is_quotient_mk (m : M) : quotient.mk' m = (mk m : «expr ⧸ » M N) :=\n  rfl\n#align is_quotient_mk is_quotient_mk\n\n"}