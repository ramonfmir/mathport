{"reindex_lie_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ⁅ ⁆ » -/\n@[simp]\ntheorem matrix.reindex_lie_equiv_symm :\n    (matrix.reindex_lie_equiv e : «expr ≃ₗ⁅ ⁆ » _ R _).symm = matrix.reindex_lie_equiv e.symm :=\n  rfl\n#align matrix.reindex_lie_equiv_symm matrix.reindex_lie_equiv_symm\n\n",
 "reindex_lie_equiv_apply":
 "@[simp]\ntheorem matrix.reindex_lie_equiv_apply (M : matrix n n R) : matrix.reindex_lie_equiv e M = matrix.reindex e e M :=\n  rfl\n#align matrix.reindex_lie_equiv_apply matrix.reindex_lie_equiv_apply\n\n",
 "lie_equiv_matrix'_symm_apply":
 "@[simp]\ntheorem lie_equiv_matrix'_symm_apply (A : matrix n n R) : (@lie_equiv_matrix' R _ n _ _).symm A = A.to_lin' :=\n  rfl\n#align lie_equiv_matrix'_symm_apply lie_equiv_matrix'_symm_apply\n\n",
 "lie_equiv_matrix'_apply":
 "/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n@[simp]\ntheorem lie_equiv_matrix'_apply (f : module.End R (n → R)) : lie_equiv_matrix' f = f.to_matrix' :=\n  rfl\n#align lie_equiv_matrix'_apply lie_equiv_matrix'_apply\n\n",
 "lie_conj_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem matrix.lie_conj_symm_apply (P A : matrix n n R) (h : Invertible P) :\n    (P.lie_conj h).symm A = matrix.mul (matrix.mul P⁻¹ A) P := by\n  simp [linear_equiv.symm_conj_apply, matrix.lie_conj, linear_map.to_matrix'_comp, linear_map.to_matrix'_to_lin']\n#align matrix.lie_conj_symm_apply matrix.lie_conj_symm_apply\n\n",
 "lie_conj_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `matrix.mul -/\n@[simp]\ntheorem matrix.lie_conj_apply (P A : matrix n n R) (h : Invertible P) :\n    P.lie_conj h A = matrix.mul (matrix.mul P A) P⁻¹ := by\n  simp [linear_equiv.conj_apply, matrix.lie_conj, linear_map.to_matrix'_comp, linear_map.to_matrix'_to_lin']\n#align matrix.lie_conj_apply matrix.lie_conj_apply\n\n"}