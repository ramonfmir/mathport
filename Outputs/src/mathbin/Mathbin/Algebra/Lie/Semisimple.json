{"subsingleton_of_semisimple_lie_abelian":
 "/-- A semisimple Abelian Lie algebra is trivial. -/\ntheorem subsingleton_of_semisimple_lie_abelian [is_semisimple R L] [h : is_lie_abelian L] : subsingleton L :=\n  by\n  rw [is_lie_abelian_iff_center_eq_top R L, center_eq_bot_of_semisimple] at h\n  exact (lie_submodule.subsingleton_iff R L L).mp (subsingleton_of_bot_eq_top h)\n#align subsingleton_of_semisimple_lie_abelian subsingleton_of_semisimple_lie_abelian\n\n",
 "is_semisimple_iff_no_solvable_ideals":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\ntheorem is_semisimple_iff_no_solvable_ideals : is_semisimple R L ↔ ∀ I : lie_ideal R L, is_solvable R I → I = «expr⊥» :=\n  ⟨fun h => supₛ_eq_bot.mp h.semisimple, fun h => ⟨supₛ_eq_bot.mpr h⟩⟩\n#align is_semisimple_iff_no_solvable_ideals is_semisimple_iff_no_solvable_ideals\n\n",
 "is_semisimple_iff_no_abelian_ideals":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem is_semisimple_iff_no_abelian_ideals : is_semisimple R L ↔ ∀ I : lie_ideal R L, is_lie_abelian I → I = «expr⊥» :=\n  by\n  rw [is_semisimple_iff_no_solvable_ideals]\n  constructor <;> intro h₁ I h₂\n  · haveI : is_lie_abelian I := h₂\n    apply h₁\n    exact lie_algebra.of_abelian_is_solvable R I\n  · haveI : IsSolvable R I := h₂\n    rw [← abelian_of_solvable_ideal_eq_bot_iff]\n    apply h₁\n    exact abelian_derived_abelian_of_ideal I\n#align is_semisimple_iff_no_abelian_ideals is_semisimple_iff_no_abelian_ideals\n\n",
 "center_eq_bot_of_semisimple":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem center_eq_bot_of_semisimple [h : is_semisimple R L] : center R L = «expr⊥» :=\n  by\n  rw [is_semisimple_iff_no_abelian_ideals] at h\n  apply h\n  infer_instance\n#align center_eq_bot_of_semisimple center_eq_bot_of_semisimple\n\n",
 "ad_ker_eq_bot_of_semisimple":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem ad_ker_eq_bot_of_semisimple [is_semisimple R L] : (ad R L).ker = «expr⊥» := by simp\n#align ad_ker_eq_bot_of_semisimple ad_ker_eq_bot_of_semisimple\n\n",
 "abelian_radical_of_semisimple":
 "theorem abelian_radical_of_semisimple [is_semisimple R L] : is_lie_abelian (radical R L) :=\n  by\n  rw [is_semisimple.semisimple]\n  exact is_lie_abelian_bot R L\n#align abelian_radical_of_semisimple abelian_radical_of_semisimple\n\n",
 "abelian_radical_iff_solvable_is_abelian":
 "/-- The two properties shown to be equivalent here are possible definitions for a Lie algebra\nto be reductive.\n\nNote that there is absolutely [no agreement](https://mathoverflow.net/questions/284713/) on what\nthe label 'reductive' should mean when the coefficients are not a field of characteristic zero. -/\ntheorem abelian_radical_iff_solvable_is_abelian [IsNoetherian R L] :\n    is_lie_abelian (radical R L) ↔ ∀ I : lie_ideal R L, is_solvable R I → is_lie_abelian I :=\n  by\n  constructor\n  · rintro h₁ I h₂\n    rw [lie_ideal.solvable_iff_le_radical] at h₂\n    exact (lie_ideal.hom_of_le_injective h₂).is_lie_abelian h₁\n  · intro h\n    apply h\n    infer_instance\n#align abelian_radical_iff_solvable_is_abelian abelian_radical_iff_solvable_is_abelian\n\n"}