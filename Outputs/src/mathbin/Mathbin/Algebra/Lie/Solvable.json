{"solvable_iff_le_radical":
 "/-- The `→` direction of this lemma is actually true without the `is_noetherian` assumption. -/\ntheorem lie_ideal.solvable_iff_le_radical [is_noetherian R L] (I : lie_ideal R L) : is_solvable R I ↔ I ≤ radical R L :=\n  ⟨fun h => le_supₛ h, fun h => le_solvable_ideal_solvable h infer_instance⟩\n#align lie_ideal.solvable_iff_le_radical lie_ideal.solvable_iff_le_radical\n\n",
 "solvable_iff_equiv_solvable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ₗ⁅ ⁆ » -/\ntheorem solvable_iff_equiv_solvable (e : «expr ≃ₗ⁅ ⁆ » L' R L) : is_solvable R L' ↔ is_solvable R L :=\n  by\n  constructor <;> intro h\n  · exact e.symm.injective.lie_algebra_is_solvable\n  · exact e.injective.lie_algebra_is_solvable\n#align solvable_iff_equiv_solvable solvable_iff_equiv_solvable\n\n",
 "lie_algebra_is_solvable":
 "theorem surjective.lie_algebra_is_solvable [h₁ : is_solvable R L'] (h₂ : surjective f) : is_solvable R L :=\n  by\n  obtain ⟨k, hk⟩ := id h₁\n  use k\n  rw [← lie_ideal.derived_series_map_eq k h₂, hk]\n  simp only [lie_ideal.map_eq_bot_iff, bot_le]\n#align surjective.lie_algebra_is_solvable surjective.lie_algebra_is_solvable\n\n",
 "le_solvable_ideal_solvable":
 "theorem le_solvable_ideal_solvable {I J : lie_ideal R L} (h₁ : I ≤ J) (h₂ : is_solvable R J) : is_solvable R I :=\n  (lie_ideal.hom_of_le_injective h₁).lie_algebra_is_solvable\n#align le_solvable_ideal_solvable le_solvable_ideal_solvable\n\n",
 "is_solvable_range":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ⁅ ⁆ » -/\ntheorem lie_hom.is_solvable_range (f : «expr →ₗ⁅ ⁆ » L' R L) [h : lie_algebra.is_solvable R L'] :\n    lie_algebra.is_solvable R f.range :=\n  f.surjective_range_restrict.lie_algebra_is_solvable\n#align lie_hom.is_solvable_range lie_hom.is_solvable_range\n\n",
 "derived_series_of_ideal_zero":
 "/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n@[simp]\ntheorem derived_series_of_ideal_zero : derived_series_of_ideal R L 0 I = I :=\n  rfl\n#align derived_series_of_ideal_zero derived_series_of_ideal_zero\n\n",
 "derived_series_of_ideal_succ_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\ntheorem derived_series_of_ideal_succ_le (k : ℕ) : (exprD) (k + 1) I ≤ (exprD) k I :=\n  derived_series_of_ideal_le (le_refl I) k.le_succ\n#align derived_series_of_ideal_succ_le derived_series_of_ideal_succ_le\n\n",
 "derived_series_of_ideal_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n@[simp]\ntheorem derived_series_of_ideal_succ (k : ℕ) :\n    derived_series_of_ideal R L (k + 1) I =\n      «expr⁅ , ⁆» (derived_series_of_ideal R L k I) (derived_series_of_ideal R L k I) :=\n  function.iterate_succ_apply' (fun I => «expr⁅ , ⁆» I I) k I\n#align derived_series_of_ideal_succ derived_series_of_ideal_succ\n\n",
 "derived_series_of_ideal_mono":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\ntheorem derived_series_of_ideal_mono {I J : lie_ideal R L} (h : I ≤ J) (k : ℕ) : (exprD) k I ≤ (exprD) k J :=\n  derived_series_of_ideal_le h (le_refl k)\n#align derived_series_of_ideal_mono derived_series_of_ideal_mono\n\n",
 "derived_series_of_ideal_le_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\ntheorem derived_series_of_ideal_le_self (k : ℕ) : (exprD) k I ≤ I :=\n  derived_series_of_ideal_le (le_refl I) (zero_le k)\n#align derived_series_of_ideal_le_self derived_series_of_ideal_le_self\n\n",
 "derived_series_of_ideal_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n@[mono]\ntheorem derived_series_of_ideal_le {I J : lie_ideal R L} {k l : ℕ} (h₁ : I ≤ J) (h₂ : l ≤ k) :\n    (exprD) k I ≤ (exprD) l J := by\n  revert l; induction' k with k ih <;> intro l h₂\n  · rw [le_zero_iff] at h₂\n    rw [h₂, derived_series_of_ideal_zero]\n    exact h₁\n  · have h : l = k.succ ∨ l ≤ k := by rwa [le_iff_eq_or_lt, Nat.lt_succ_iff] at h₂\n    cases h\n    · rw [h, derived_series_of_ideal_succ, derived_series_of_ideal_succ]\n      exact lie_submodule.mono_lie _ _ _ _ (ih (le_refl k)) (ih (le_refl k))\n    · rw [derived_series_of_ideal_succ]\n      exact le_trans (lie_submodule.lie_le_left _ _) (ih h)\n#align derived_series_of_ideal_le derived_series_of_ideal_le\n\n",
 "derived_series_of_ideal_antitone":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\ntheorem derived_series_of_ideal_antitone {k l : ℕ} (h : l ≤ k) : (exprD) k I ≤ (exprD) l I :=\n  derived_series_of_ideal_le (le_refl I) h\n#align derived_series_of_ideal_antitone derived_series_of_ideal_antitone\n\n",
 "derived_series_of_ideal_add_le_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\ntheorem derived_series_of_ideal_add_le_add (J : lie_ideal R L) (k l : ℕ) :\n    (exprD) (k + l) (I + J) ≤ (exprD) k I + (exprD) l J :=\n  by\n  let D₁ : «expr →o » (lie_ideal R L) (lie_ideal R L) :=\n    { to_fun := fun I => «expr⁅ , ⁆» I I\n      monotone' := fun I J h => lie_submodule.mono_lie I J I J h h }\n  have h₁ : ∀ I J : lie_ideal R L, D₁ («expr ⊔ » I J) ≤ «expr ⊔ » (D₁ I) J := by\n    simp [lie_submodule.lie_le_right, lie_submodule.lie_le_left, le_sup_of_le_right]\n  rw [← D₁.iterate_sup_le_sup_iff] at h₁\n  exact h₁ k l I J\n#align derived_series_of_ideal_add_le_add derived_series_of_ideal_add_le_add\n\n",
 "derived_series_of_ideal_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprD -/\ntheorem derived_series_of_ideal_add (k l : ℕ) : (exprD) (k + l) I = (exprD) k ((exprD) l I) :=\n  by\n  induction' k with k ih\n  · rw [zero_add, derived_series_of_ideal_zero]\n  · rw [nat.succ_add k l, derived_series_of_ideal_succ, derived_series_of_ideal_succ, ih]\n#align derived_series_of_ideal_add derived_series_of_ideal_add\n\n",
 "derived_series_of_derived_length_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem derived_series_of_derived_length_succ (I : lie_ideal R L) (k : ℕ) :\n    derived_length_of_ideal R L I = k + 1 ↔\n      is_lie_abelian (derived_series_of_ideal R L k I) ∧ derived_series_of_ideal R L k I ≠ «expr⊥» :=\n  by\n  rw [abelian_iff_derived_succ_eq_bot]\n  let s := { k | derived_series_of_ideal R L k I = «expr⊥» }\n  change Inf s = k + 1 ↔ k + 1 ∈ s ∧ k ∉ s\n  have hs : ∀ k₁ k₂ : ℕ, k₁ ≤ k₂ → k₁ ∈ s → k₂ ∈ s :=\n    by\n    intro k₁ k₂ h₁₂ h₁\n    suffices derived_series_of_ideal R L k₂ I ≤ «expr⊥» by exact eq_bot_iff.mpr this\n    change derived_series_of_ideal R L k₁ I = «expr⊥» at h₁\n    rw [← h₁]\n    exact derived_series_of_ideal_antitone I h₁₂\n  exact nat.Inf_upward_closed_eq_succ_iff hs k\n#align derived_series_of_derived_length_succ derived_series_of_derived_length_succ\n\n",
 "derived_series_of_bot_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem derived_series_of_bot_eq_bot (k : ℕ) : derived_series_of_ideal R L k («expr⊥») = «expr⊥» :=\n  by\n  rw [eq_bot_iff]\n  exact derived_series_of_ideal_le_self («expr⊥») k\n#align derived_series_of_bot_eq_bot derived_series_of_bot_eq_bot\n\n",
 "derived_series_map_le":
 "theorem derived_series_map_le (k : ℕ) : (derived_series R L' k).map f ≤ derived_series R L k :=\n  by\n  induction' k with k ih\n  · simp only [derived_series_def, derived_series_of_ideal_zero, le_top]\n  · simp only [derived_series_def, derived_series_of_ideal_succ] at ih⊢\n    exact le_trans (map_bracket_le f) (lie_submodule.mono_lie _ _ _ _ ih ih)\n#align derived_series_map_le derived_series_map_le\n\n",
 "derived_series_map_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem derived_series_map_eq (k : ℕ) (h : function.surjective f) :\n    (derived_series R L' k).map f = derived_series R L k :=\n  by\n  induction' k with k ih\n  · change («expr⊤» : lie_ideal R L').map f = «expr⊤»\n    rw [← f.ideal_range_eq_map]\n    exact f.ideal_range_eq_top_of_surjective h\n  · simp only [derived_series_def, map_bracket_eq f h, ih, derived_series_of_ideal_succ]\n#align derived_series_map_eq derived_series_map_eq\n\n",
 "derived_series_eq_derived_series_of_ideal_map":
 "theorem derived_series_eq_derived_series_of_ideal_map (k : ℕ) :\n    (derived_series R I k).map I.incl = derived_series_of_ideal R L k I :=\n  by\n  rw [derived_series_eq_derived_series_of_ideal_comap, map_comap_incl, inf_eq_right]\n  apply derived_series_of_ideal_le_self\n#align derived_series_eq_derived_series_of_ideal_map derived_series_eq_derived_series_of_ideal_map\n\n",
 "derived_series_eq_derived_series_of_ideal_comap":
 "theorem derived_series_eq_derived_series_of_ideal_comap (k : ℕ) :\n    derived_series R I k = (derived_series_of_ideal R L k I).comap I.incl :=\n  by\n  induction' k with k ih\n  · simp only [derived_series_def, comap_incl_self, derived_series_of_ideal_zero]\n  · simp only [derived_series_def, derived_series_of_ideal_succ] at ih⊢\n    rw [ih]\n    exact comap_bracket_incl_of_le I (derived_series_of_ideal_le_self I k) (derived_series_of_ideal_le_self I k)\n#align derived_series_eq_derived_series_of_ideal_comap derived_series_eq_derived_series_of_ideal_comap\n\n",
 "derived_series_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem derived_series_eq_bot_iff (k : ℕ) :\n    derived_series R I k = «expr⊥» ↔ derived_series_of_ideal R L k I = «expr⊥» := by\n  rw [← derived_series_eq_derived_series_of_ideal_map, map_eq_bot_iff, ker_incl, eq_bot_iff]\n#align derived_series_eq_bot_iff derived_series_eq_bot_iff\n\n",
 "derived_series_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem derived_series_def (k : ℕ) : derived_series R L k = derived_series_of_ideal R L k («expr⊤») :=\n  rfl\n#align derived_series_def derived_series_def\n\n",
 "derived_series_add_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr↥ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem derived_series_add_eq_bot {k l : ℕ} {I J : lie_ideal R L} (hI : derived_series R I k = «expr⊥»)\n    (hJ : derived_series R J l = «expr⊥») : derived_series R («expr↥ » (I + J)) (k + l) = «expr⊥» :=\n  by\n  rw [lie_ideal.derived_series_eq_bot_iff] at hI hJ⊢\n  rw [← le_bot_iff]\n  let D := derived_series_of_ideal R L; change D k I = «expr⊥» at hI; change D l J = «expr⊥» at hJ\n  calc\n    D (k + l) (I + J) ≤ D k I + D l J := derived_series_of_ideal_add_le_add I J k l\n    _ ≤ «expr⊥» := by\n      rw [hI, hJ]\n      simp\n    \n#align derived_series_add_eq_bot derived_series_add_eq_bot\n\n",
 "derived_length_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem derived_length_zero (I : lie_ideal R L) [hI : is_solvable R I] :\n    derived_length_of_ideal R L I = 0 ↔ I = «expr⊥» :=\n  by\n  let s := { k | derived_series_of_ideal R L k I = «expr⊥» }\n  change Inf s = 0 ↔ _\n  have hne : s ≠ ∅ := by\n    obtain ⟨k, hk⟩ := id hI\n    refine' set.nonempty.ne_empty ⟨k, _⟩\n    rw [derived_series_def, lie_ideal.derived_series_eq_bot_iff] at hk\n    exact hk\n  simp [hne]\n#align derived_length_zero derived_length_zero\n\n",
 "derived_length_eq_derived_length_of_ideal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem derived_length_eq_derived_length_of_ideal (I : lie_ideal R L) :\n    derived_length R I = derived_length_of_ideal R L I :=\n  by\n  let s₁ := { k | derived_series R I k = «expr⊥» }\n  let s₂ := { k | derived_series_of_ideal R L k I = «expr⊥» }\n  change Inf s₁ = Inf s₂\n  congr ; ext k; exact I.derived_series_eq_bot_iff k\n#align derived_length_eq_derived_length_of_ideal derived_length_eq_derived_length_of_ideal\n\n",
 "center_le_radical":
 "theorem center_le_radical : center R L ≤ radical R L :=\n  have h : is_solvable R (center R L) := by infer_instance\n  le_supₛ h\n#align center_le_radical center_le_radical\n\n",
 "abelian_of_solvable_ideal_eq_bot_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem abelian_of_solvable_ideal_eq_bot_iff (I : lie_ideal R L) [h : is_solvable R I] :\n    derived_abelian_of_ideal I = «expr⊥» ↔ I = «expr⊥» :=\n  by\n  dsimp only [derived_abelian_of_ideal]\n  cases' h : derived_length_of_ideal R L I with k\n  · rw [derived_length_zero] at h\n    rw [h]\n    rfl\n  · obtain ⟨h₁, h₂⟩ := (derived_series_of_derived_length_succ R L I k).mp h\n    have h₃ : I ≠ «expr⊥» := by\n      intro contra\n      apply h₂\n      rw [contra]\n      apply derived_series_of_bot_eq_bot\n    change derived_series_of_ideal R L k I = «expr⊥» ↔ I = «expr⊥»\n    constructor <;> contradiction\n#align abelian_of_solvable_ideal_eq_bot_iff abelian_of_solvable_ideal_eq_bot_iff\n\n",
 "abelian_iff_derived_succ_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem abelian_iff_derived_succ_eq_bot (I : lie_ideal R L) (k : ℕ) :\n    is_lie_abelian (derived_series_of_ideal R L k I) ↔ derived_series_of_ideal R L (k + 1) I = «expr⊥» := by\n  rw [add_comm, derived_series_of_ideal_add I 1 k, abelian_iff_derived_one_eq_bot]\n#align abelian_iff_derived_succ_eq_bot abelian_iff_derived_succ_eq_bot\n\n",
 "abelian_iff_derived_one_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem abelian_iff_derived_one_eq_bot : is_lie_abelian I ↔ derived_series_of_ideal R L 1 I = «expr⊥» := by\n  rw [derived_series_of_ideal_succ, derived_series_of_ideal_zero, lie_submodule.lie_abelian_iff_lie_self_eq_bot]\n#align abelian_iff_derived_one_eq_bot abelian_iff_derived_one_eq_bot\n\n",
 "abelian_derived_abelian_of_ideal":
 "theorem abelian_derived_abelian_of_ideal (I : lie_ideal R L) : is_lie_abelian (derived_abelian_of_ideal I) :=\n  by\n  dsimp only [derived_abelian_of_ideal]\n  cases' h : derived_length_of_ideal R L I with k\n  · exact is_lie_abelian_bot R L\n  · rw [derived_series_of_derived_length_succ] at h\n    exact h.1\n#align abelian_derived_abelian_of_ideal abelian_derived_abelian_of_ideal\n\n"}