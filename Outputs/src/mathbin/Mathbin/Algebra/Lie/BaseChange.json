{"bracket_tmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n@[simp]\ntheorem bracket_tmul (s t : A) (x y : L) :\n    «expr⁅ , ⁆» («expr ⊗ₜ[ ] » s R x) («expr ⊗ₜ[ ] » t R y) = «expr ⊗ₜ » (s * t) («expr⁅ , ⁆» x y) := by\n  rw [bracket_def, bracket'_tmul]\n#align bracket_tmul bracket_tmul\n\n",
 "bracket_lie_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\nprivate theorem bracket_lie_smul (a : A) (x y : tensor_product A R L) :\n    «expr⁅ , ⁆» x («expr • » a y) = «expr • » a («expr⁅ , ⁆» x y) :=\n  by\n  apply x.induction_on\n  · simp only [zero_lie, smul_zero]\n  · intro a₁ l₁\n    apply y.induction_on\n    · simp only [lie_zero, smul_zero]\n    · intro a₂ l₂\n      simp only [bracket_def, bracket', TensorProduct.smul_tmul', mul_left_comm a₁ a a₂, TensorProduct.curry_apply,\n        LinearMap.mul'_apply, Algebra.id.smul_eq_mul, Function.comp_apply, LinearEquiv.coe_coe, LinearMap.coe_comp,\n        TensorProduct.map_tmul, TensorProduct.tensorTensorTensorComm_tmul]\n    · intro z₁ z₂ h₁ h₂\n      simp only [h₁, h₂, smul_add, lie_add]\n  · intro z₁ z₂ h₁ h₂\n    simp only [h₁, h₂, smul_add, add_lie]\n#align bracket_lie_smul bracket_lie_smul\n\n",
 "bracket_lie_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\nprivate theorem bracket_lie_self (x : tensor_product A R L) : «expr⁅ , ⁆» x x = 0 :=\n  by\n  simp only [bracket_def]\n  apply x.induction_on\n  · simp only [LinearMap.map_zero, eq_self_iff_true, LinearMap.zero_apply]\n  · intro a l\n    simp only [bracket'_tmul, TensorProduct.tmul_zero, eq_self_iff_true, lie_self]\n  · intro z₁ z₂ h₁ h₂\n    suffices bracket' R A L z₁ z₂ + bracket' R A L z₂ z₁ = 0 by\n      rw [LinearMap.map_add, LinearMap.map_add, LinearMap.add_apply, LinearMap.add_apply, h₁, h₂, zero_add, add_zero,\n        add_comm, this]\n    apply z₁.induction_on\n    · simp only [LinearMap.map_zero, add_zero, LinearMap.zero_apply]\n    · intro a₁ l₁\n      apply z₂.induction_on\n      · simp only [LinearMap.map_zero, add_zero, LinearMap.zero_apply]\n      · intro a₂ l₂\n        simp only [← lie_skew l₂ l₁, mul_comm a₁ a₂, TensorProduct.tmul_neg, bracket'_tmul, add_right_neg]\n      · intro y₁ y₂ hy₁ hy₂\n        simp only [hy₁, hy₂, add_add_add_comm, add_zero, LinearMap.add_apply, LinearMap.map_add]\n    · intro y₁ y₂ hy₁ hy₂\n      simp only [add_add_add_comm, hy₁, hy₂, add_zero, LinearMap.add_apply, LinearMap.map_add]\n#align bracket_lie_self bracket_lie_self\n\n",
 "bracket_leibniz_lie":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\nprivate theorem bracket_leibniz_lie (x y z : tensor_product A R L) :\n    «expr⁅ , ⁆» x («expr⁅ , ⁆» y z) = «expr⁅ , ⁆» («expr⁅ , ⁆» x y) z + «expr⁅ , ⁆» y («expr⁅ , ⁆» x z) :=\n  by\n  simp only [bracket_def]\n  apply x.induction_on\n  · simp only [LinearMap.map_zero, add_zero, eq_self_iff_true, LinearMap.zero_apply]\n  · intro a₁ l₁\n    apply y.induction_on\n    · simp only [LinearMap.map_zero, add_zero, eq_self_iff_true, LinearMap.zero_apply]\n    · intro a₂ l₂\n      apply z.induction_on\n      · simp only [LinearMap.map_zero, add_zero]\n      · intro a₃ l₃\n        simp only [bracket'_tmul]\n        rw [mul_left_comm a₂ a₁ a₃, mul_assoc, leibniz_lie, TensorProduct.tmul_add]\n      · intro u₁ u₂ h₁ h₂\n        simp only [add_add_add_comm, h₁, h₂, LinearMap.map_add]\n    · intro u₁ u₂ h₁ h₂\n      simp only [add_add_add_comm, h₁, h₂, LinearMap.add_apply, LinearMap.map_add]\n  · intro u₁ u₂ h₁ h₂\n    simp only [add_add_add_comm, h₁, h₂, LinearMap.add_apply, LinearMap.map_add]\n#align bracket_leibniz_lie bracket_leibniz_lie\n\n",
 "bracket_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `tensor_product -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\nprivate theorem bracket_def (x y : tensor_product A R L) : «expr⁅ , ⁆» x y = bracket' R A L x y :=\n  rfl\n#align bracket_def bracket_def\n\n",
 "bracket'_tmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊗ₜ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⁅ , ⁆» -/\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n@[simp]\nprivate theorem bracket'_tmul (s t : A) (x y : L) :\n    bracket' R A L («expr ⊗ₜ[ ] » s R x) («expr ⊗ₜ[ ] » t R y) = «expr ⊗ₜ » (s * t) («expr⁅ , ⁆» x y) := by\n  simp [bracket']\n#align bracket'_tmul bracket'_tmul\n\n"}