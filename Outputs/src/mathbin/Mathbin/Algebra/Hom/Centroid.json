{"zero_apply":
 "@[simp]\ntheorem zero_apply (a : α) : (0 : centroid_hom α) a = 0 :=\n  rfl\n#align zero_apply zero_apply\n\n",
 "to_fun_eq_coe":
 "/-\nCopyright (c) 2022 Yaël Dillies. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yaël Dillies, Christopher Hoskin\n-/\n-- Making `centroid_hom` an old structure will allow the lemma `to_add_monoid_hom_eq_coe`\n-- to be true by `rfl`. After upgrading to Lean 4, this should no longer be needed\n-- because eta for structures should provide the same result.\n@[simp]\ntheorem to_fun_eq_coe {f : centroid_hom α} : f.to_fun = (f : α → α) :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "to_add_monoid_hom_eq_coe":
 "@[simp]\ntheorem to_add_monoid_hom_eq_coe (f : centroid_hom α) : f.to_add_monoid_hom = f :=\n  rfl\n#align to_add_monoid_hom_eq_coe to_add_monoid_hom_eq_coe\n\n",
 "to_End_zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_End_zsmul (x : centroid_hom α) (n : ℤ) : («expr • » n x).to_End = «expr • » n x.to_End :=\n  rfl\n#align to_End_zsmul to_End_zsmul\n\n",
 "to_End_zero":
 "@[simp]\ntheorem to_End_zero : (0 : centroid_hom α).to_End = 0 :=\n  rfl\n#align to_End_zero to_End_zero\n\n",
 "to_End_sub":
 "@[simp]\ntheorem to_End_sub (x y : centroid_hom α) : (x - y).to_End = x.to_End - y.to_End :=\n  rfl\n#align to_End_sub to_End_sub\n\n",
 "to_End_pow":
 "@[simp]\ntheorem to_End_pow (x : centroid_hom α) (n : ℕ) : (x ^ n).to_End = x.to_End ^ n :=\n  by\n  ext\n  rfl\n#align to_End_pow to_End_pow\n\n",
 "to_End_one":
 "@[simp]\ntheorem to_End_one : (1 : centroid_hom α).to_End = 1 :=\n  rfl\n#align to_End_one to_End_one\n\n",
 "to_End_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem to_End_nsmul (x : centroid_hom α) (n : ℕ) : («expr • » n x).to_End = «expr • » n x.to_End :=\n  rfl\n#align to_End_nsmul to_End_nsmul\n\n",
 "to_End_neg":
 "@[simp]\ntheorem to_End_neg (x : centroid_hom α) : (-x).to_End = -x.to_End :=\n  rfl\n#align to_End_neg to_End_neg\n\n",
 "to_End_nat_cast":
 "@[simp, norm_cast]\ntheorem to_End_nat_cast (n : ℕ) : (n : centroid_hom α).to_End = ↑n :=\n  rfl\n#align to_End_nat_cast to_End_nat_cast\n\n",
 "to_End_mul":
 "@[simp]\ntheorem to_End_mul (x y : centroid_hom α) : (x * y).to_End = x.to_End * y.to_End :=\n  rfl\n#align to_End_mul to_End_mul\n\n",
 "to_End_int_cast":
 "@[simp, norm_cast]\ntheorem to_End_int_cast (z : ℤ) : (z : centroid_hom α).to_End = ↑z :=\n  rfl\n#align to_End_int_cast to_End_int_cast\n\n",
 "to_End_injective":
 "theorem to_End_injective : injective (centroid_hom.to_End : centroid_hom α → AddMonoid.End α) :=\n  coe_to_add_monoid_hom_injective\n#align to_End_injective to_End_injective\n\n",
 "to_End_add":
 "@[simp]\ntheorem to_End_add (x y : centroid_hom α) : (x + y).to_End = x.to_End + y.to_End :=\n  rfl\n#align to_End_add to_End_add\n\n",
 "sub_apply":
 "@[simp]\ntheorem sub_apply (f g : centroid_hom α) (a : α) : (f - g) a = f a - g a :=\n  rfl\n#align sub_apply sub_apply\n\n",
 "one_apply":
 "@[simp]\ntheorem one_apply (a : α) : (1 : centroid_hom α) a = a :=\n  rfl\n#align one_apply one_apply\n\n",
 "nsmul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- Eligible for `dsimp`\n@[simp, nolint simp_nf]\ntheorem nsmul_apply (f : centroid_hom α) (n : ℕ) (a : α) : («expr • » n f) a = «expr • » n (f a) :=\n  rfl\n#align nsmul_apply nsmul_apply\n\n",
 "neg_apply":
 "@[simp]\ntheorem neg_apply (f : centroid_hom α) (a : α) : (-f) a = -f a :=\n  rfl\n#align neg_apply neg_apply\n\n",
 "nat_cast_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem nat_cast_apply (n : ℕ) (m : α) : (n : centroid_hom α) m = «expr • » n m :=\n  rfl\n#align nat_cast_apply nat_cast_apply\n\n",
 "mul_apply":
 "@[simp]\ntheorem mul_apply (f g : centroid_hom α) (a : α) : (f * g) a = f (g a) :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "int_cast_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem int_cast_apply (z : ℤ) (m : α) : (z : centroid_hom α) m = «expr • » z m :=\n  rfl\n#align int_cast_apply int_cast_apply\n\n",
 "id_comp":
 "@[simp]\ntheorem id_comp (f : centroid_hom α) : (centroid_hom.id α).comp f = f :=\n  ext fun a => rfl\n#align id_comp id_comp\n\n",
 "id_apply":
 "@[simp]\ntheorem id_apply (a : α) : centroid_hom.id α a = a :=\n  rfl\n#align id_apply id_apply\n\n",
 "ext":
 "@[ext]\ntheorem ext {f g : centroid_hom α} (h : ∀ a, f a = g a) : f = g :=\n  fun_like.ext f g h\n#align ext ext\n\n",
 "copy_eq":
 "theorem copy_eq (f : centroid_hom α) (f' : α → α) (h : f' = f) : f.copy f' h = f :=\n  fun_like.ext' h\n#align copy_eq copy_eq\n\n",
 "comp_mul_comm":
 "-- cf `add_monoid.End.semiring`\ntheorem comp_mul_comm (T S : centroid_hom α) (a b : α) : (T ∘ S) (a * b) = (S ∘ T) (a * b) := by\n  rw [comp_app, map_mul_right, map_mul_left, ← map_mul_right, ← map_mul_left]\n#align comp_mul_comm comp_mul_comm\n\n",
 "comp_id":
 "@[simp]\ntheorem comp_id (f : centroid_hom α) : f.comp (centroid_hom.id α) = f :=\n  ext fun a => rfl\n#align comp_id comp_id\n\n",
 "comp_assoc":
 "@[simp]\ntheorem comp_assoc (h g f : centroid_hom α) : (h.comp g).comp f = h.comp (g.comp f) :=\n  rfl\n#align comp_assoc comp_assoc\n\n",
 "comp_apply":
 "@[simp]\ntheorem comp_apply (g f : centroid_hom α) (a : α) : g.comp f a = g (f a) :=\n  rfl\n#align comp_apply comp_apply\n\n",
 "coe_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_zero : «expr⇑ » (0 : centroid_hom α) = 0 :=\n  rfl\n#align coe_zero coe_zero\n\n",
 "coe_to_add_monoid_hom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem coe_to_add_monoid_hom_injective : injective (coe : centroid_hom α → «expr →+ » α α) := fun f g h =>\n  ext fun a =>\n    haveI := fun_like.congr_fun h a\n    this\n#align coe_to_add_monoid_hom_injective coe_to_add_monoid_hom_injective\n\n",
 "coe_to_add_monoid_hom_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp, norm_cast]\ntheorem coe_to_add_monoid_hom_id : (centroid_hom.id α : «expr →+ » α α) = AddMonoidHom.id α :=\n  rfl\n#align coe_to_add_monoid_hom_id coe_to_add_monoid_hom_id\n\n",
 "coe_to_add_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp, norm_cast]\ntheorem coe_to_add_monoid_hom (f : centroid_hom α) : «expr⇑ » (f : «expr →+ » α α) = f :=\n  rfl\n#align coe_to_add_monoid_hom coe_to_add_monoid_hom\n\n",
 "coe_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_sub (f g : centroid_hom α) : «expr⇑ » (f - g) = f - g :=\n  rfl\n#align coe_sub coe_sub\n\n",
 "coe_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_one : «expr⇑ » (1 : centroid_hom α) = id :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- Eligible for `dsimp`\n@[simp, norm_cast, nolint simp_nf]\ntheorem coe_nsmul (f : centroid_hom α) (n : ℕ) : «expr⇑ » («expr • » n f) = «expr • » n f :=\n  rfl\n#align coe_nsmul coe_nsmul\n\n",
 "coe_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_neg (f : centroid_hom α) : «expr⇑ » (-f) = -f :=\n  rfl\n#align coe_neg coe_neg\n\n",
 "coe_nat_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- cf.`add_monoid_hom.add_comm_monoid`\n@[simp, norm_cast]\ntheorem coe_nat_cast (n : ℕ) : «expr⇑ » (n : centroid_hom α) = «expr • » n id :=\n  rfl\n#align coe_nat_cast coe_nat_cast\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_mul (f g : centroid_hom α) : «expr⇑ » (f * g) = f ∘ g :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "coe_int_cast":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp, norm_cast]\ntheorem coe_int_cast (z : ℤ) : «expr⇑ » (z : centroid_hom α) = «expr • » z id :=\n  rfl\n#align coe_int_cast coe_int_cast\n\n",
 "coe_id":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_id : «expr⇑ » (centroid_hom.id α) = id :=\n  rfl\n#align coe_id coe_id\n\n",
 "coe_copy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_copy (f : centroid_hom α) (f' : α → α) (h : f' = f) : «expr⇑ » (f.copy f' h) = f' :=\n  rfl\n#align coe_copy coe_copy\n\n",
 "coe_comp_add_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp, norm_cast]\ntheorem coe_comp_add_monoid_hom (g f : centroid_hom α) : (g.comp f : «expr →+ » α α) = (g : «expr →+ » α α).comp f :=\n  rfl\n#align coe_comp_add_monoid_hom coe_comp_add_monoid_hom\n\n",
 "coe_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_comp (g f : centroid_hom α) : «expr⇑ » (g.comp f) = g ∘ f :=\n  rfl\n#align coe_comp coe_comp\n\n",
 "coe_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp, norm_cast]\ntheorem coe_add (f g : centroid_hom α) : «expr⇑ » (f + g) = f + g :=\n  rfl\n#align coe_add coe_add\n\n",
 "cancel_right":
 "theorem cancel_right {g₁ g₂ f : centroid_hom α} (hf : surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| fun_like.ext_iff.1 h, congr_arg _⟩\n#align cancel_right cancel_right\n\n",
 "cancel_left":
 "theorem cancel_left {g f₁ f₂ : centroid_hom α} (hg : injective g) : g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n#align cancel_left cancel_left\n\n",
 "add_apply":
 "@[simp]\ntheorem add_apply (f g : centroid_hom α) (a : α) : (f + g) a = f a + g a :=\n  rfl\n#align add_apply add_apply\n\n"}