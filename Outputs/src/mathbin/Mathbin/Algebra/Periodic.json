{"zsmul_sub_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.zsmul_sub_eq [add_comm_group α] (h : periodic f c) (n : ℤ) : f («expr • » n c - x) = f (-x) := by\n  simpa only [sub_eq_neg_add] using h.zsmul n (-x)\n#align periodic.zsmul_sub_eq periodic.zsmul_sub_eq\n\n",
 "zsmul_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.zsmul_eq [add_group α] (h : periodic f c) (n : ℤ) : f («expr • » n c) = f 0 :=\n  (h.zsmul n).eq\n#align periodic.zsmul_eq periodic.zsmul_eq\n\n",
 "zsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.zsmul [add_group α] (h : periodic f c) (n : ℤ) : periodic f («expr • » n c) :=\n  by\n  cases n\n  · simpa only [Int.ofNat_eq_coe, coe_nat_zsmul] using h.nsmul n\n  · simpa only [negSucc_zsmul] using (h.nsmul n.succ).neg\n#align periodic.zsmul periodic.zsmul\n\n",
 "sub_zsmul_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.sub_zsmul_eq [add_group α] (h : periodic f c) (n : ℤ) : f (x - «expr • » n c) = f x :=\n  (h.zsmul n).sub_eq x\n#align periodic.sub_zsmul_eq periodic.sub_zsmul_eq\n\n",
 "sub_period":
 "theorem periodic.sub_period [add_comm_group α] (h1 : periodic f c₁) (h2 : periodic f c₂) : periodic f (c₁ - c₂) :=\n  by\n  let h := h2.neg\n  simp_all [sub_eq_add_neg, add_comm c₁, ← add_assoc]\n#align periodic.sub_period periodic.sub_period\n\n",
 "sub_nsmul_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.sub_nsmul_eq [add_group α] (h : periodic f c) (n : ℕ) : f (x - «expr • » n c) = f x := by\n  simpa only [sub_eq_add_neg] using h.neg_nsmul n x\n#align periodic.sub_nsmul_eq periodic.sub_nsmul_eq\n\n",
 "sub_nat_mul_eq":
 "theorem periodic.sub_nat_mul_eq [Ring α] (h : periodic f c) (n : ℕ) : f (x - n * c) = f x := by\n  simpa only [nsmul_eq_mul] using h.sub_nsmul_eq n\n#align periodic.sub_nat_mul_eq periodic.sub_nat_mul_eq\n\n",
 "sub_int_mul_eq":
 "theorem periodic.sub_int_mul_eq [Ring α] (h : periodic f c) (n : ℤ) : f (x - n * c) = f x :=\n  (h.int_mul n).sub_eq x\n#align periodic.sub_int_mul_eq periodic.sub_int_mul_eq\n\n",
 "sub_eq'":
 "theorem antiperiodic.sub_eq' [add_comm_group α] [Neg β] (h : antiperiodic f c) : f (c - x) = -f (-x) := by\n  simpa only [sub_eq_neg_add] using h (-x)\n#align antiperiodic.sub_eq' antiperiodic.sub_eq'\n\n",
 "sub_eq":
 "theorem antiperiodic.sub_eq [add_group α] [InvolutiveNeg β] (h : antiperiodic f c) (x : α) : f (x - c) = -f x := by\n  simp only [eq_neg_iff_eq_neg.mp (h (x - c)), sub_add_cancel]\n#align antiperiodic.sub_eq antiperiodic.sub_eq\n\n",
 "sub_const":
 "theorem antiperiodic.sub_const [add_comm_group α] [Neg β] (h : antiperiodic f c) (a : α) :\n    antiperiodic (fun x => f (x - a)) c := fun x => by\n  simpa [add_comm x c, add_sub_assoc, add_comm c (x - a)] using h (x - a)\n#align antiperiodic.sub_const antiperiodic.sub_const\n\n",
 "sub_antiperiod_eq":
 "theorem periodic.sub_antiperiod_eq [add_comm_group α] [InvolutiveNeg β] (h1 : periodic f c₁) (h2 : antiperiodic f c₂) :\n    f (c₁ - c₂) = -f 0 :=\n  (h1.sub_antiperiod h2).eq\n#align periodic.sub_antiperiod_eq periodic.sub_antiperiod_eq\n\n",
 "sub_antiperiod":
 "theorem periodic.sub_antiperiod [add_comm_group α] [InvolutiveNeg β] (h1 : periodic f c₁) (h2 : antiperiodic f c₂) :\n    antiperiodic f (c₁ - c₂) := by\n  let h := h2.neg\n  simp_all [sub_eq_add_neg, add_comm c₁, ← add_assoc]\n#align periodic.sub_antiperiod periodic.sub_antiperiod\n\n",
 "sub":
 "theorem antiperiodic.sub [add_comm_group α] [InvolutiveNeg β] (h1 : antiperiodic f c₁) (h2 : antiperiodic f c₂) :\n    periodic f (c₁ - c₂) := by\n  let h := h2.neg\n  simp_all [sub_eq_add_neg, add_comm c₁, ← add_assoc]\n#align antiperiodic.sub antiperiodic.sub\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem antiperiodic.smul [Add α] [monoid γ] [add_group β] [DistribMulAction γ β] (h : antiperiodic f c) (a : γ) :\n    antiperiodic («expr • » a f) c := by simp_all\n#align antiperiodic.smul antiperiodic.smul\n\n",
 "periodic_with_period_zero":
 "theorem periodic_with_period_zero [add_zero_class α] (f : α → β) : periodic f 0 := fun x => by rw [add_zero]\n#align periodic_with_period_zero periodic_with_period_zero\n\n",
 "periodic_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n@[to_additive]\ntheorem _root_.finset.periodic_prod [Add α] [comm_monoid β] {ι : Type _} {f : ι → α → β} (s : Finset ι)\n    (hs : ∀ i ∈ s, periodic (f i) c) :\n    periodic (finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i))\n      c :=\n  s.prod_to_list f ▸ (s.to_list.map f).periodic_prod (by simpa [-periodic] )\n#align finset.periodic_prod finset.periodic_prod\n\n",
 "periodic":
 "/-- If a function is `antiperiodic` with antiperiod `c`, then it is also `periodic` with period\n  `2 * c`. -/\ntheorem antiperiodic.periodic [Semiring α] [InvolutiveNeg β] (h : antiperiodic f c) : periodic f (2 * c) := by\n  simp [two_mul, ← add_assoc, h _]\n#align antiperiodic.periodic antiperiodic.periodic\n\n",
 "nsmul_sub_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.nsmul_sub_eq [add_comm_group α] (h : periodic f c) (n : ℕ) : f («expr • » n c - x) = f (-x) := by\n  simpa only [sub_eq_neg_add] using h.nsmul n (-x)\n#align periodic.nsmul_sub_eq periodic.nsmul_sub_eq\n\n",
 "nsmul_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.nsmul_eq [add_monoid α] (h : periodic f c) (n : ℕ) : f («expr • » n c) = f 0 :=\n  (h.nsmul n).eq\n#align periodic.nsmul_eq periodic.nsmul_eq\n\n",
 "nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.nsmul [add_monoid α] (h : periodic f c) (n : ℕ) : periodic f («expr • » n c) := by\n  induction n <;> simp_all [nat.succ_eq_add_one, add_nsmul, ← add_assoc, zero_nsmul]\n#align periodic.nsmul periodic.nsmul\n\n",
 "neg_nsmul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem periodic.neg_nsmul [add_group α] (h : periodic f c) (n : ℕ) : periodic f (-«expr • » n c) :=\n  (h.nsmul n).neg\n#align periodic.neg_nsmul periodic.neg_nsmul\n\n",
 "neg_nat_mul":
 "theorem periodic.neg_nat_mul [Ring α] (h : periodic f c) (n : ℕ) : periodic f (-(n * c)) :=\n  (h.nat_mul n).neg\n#align periodic.neg_nat_mul periodic.neg_nat_mul\n\n",
 "neg_eq":
 "theorem antiperiodic.neg_eq [add_group α] [InvolutiveNeg β] (h : antiperiodic f c) : f (-c) = -f 0 := by\n  simpa only [zero_add] using h.neg 0\n#align antiperiodic.neg_eq antiperiodic.neg_eq\n\n",
 "neg":
 "theorem antiperiodic.neg [add_group α] [InvolutiveNeg β] (h : antiperiodic f c) : antiperiodic f (-c) := by\n  simpa only [sub_eq_add_neg, antiperiodic] using h.sub_eq\n#align antiperiodic.neg antiperiodic.neg\n\n",
 "nat_odd_mul_antiperiodic":
 "theorem antiperiodic.nat_odd_mul_antiperiodic [Semiring α] [InvolutiveNeg β] (h : antiperiodic f c) (n : ℕ) :\n    antiperiodic f (n * (2 * c) + c) := fun x => by rw [← add_assoc, h, h.periodic.nat_mul]\n#align antiperiodic.nat_odd_mul_antiperiodic antiperiodic.nat_odd_mul_antiperiodic\n\n",
 "nat_mul_sub_eq":
 "theorem periodic.nat_mul_sub_eq [Ring α] (h : periodic f c) (n : ℕ) : f (n * c - x) = f (-x) := by\n  simpa only [sub_eq_neg_add] using h.nat_mul n (-x)\n#align periodic.nat_mul_sub_eq periodic.nat_mul_sub_eq\n\n",
 "nat_mul_eq_of_eq_zero":
 "theorem antiperiodic.nat_mul_eq_of_eq_zero [CommSemiring α] [neg_zero_class β] (h : antiperiodic f c) (hi : f 0 = 0)\n    (n : ℕ) : f (n * c) = 0 := by\n  induction' n with k hk\n  · simp [hi]\n  · simp [hk, add_mul, h (k * c)]\n#align antiperiodic.nat_mul_eq_of_eq_zero antiperiodic.nat_mul_eq_of_eq_zero\n\n",
 "nat_mul_eq":
 "theorem periodic.nat_mul_eq [Semiring α] (h : periodic f c) (n : ℕ) : f (n * c) = f 0 :=\n  (h.nat_mul n).eq\n#align periodic.nat_mul_eq periodic.nat_mul_eq\n\n",
 "nat_mul":
 "theorem periodic.nat_mul [Semiring α] (h : periodic f c) (n : ℕ) : periodic f (n * c) := by\n  simpa only [nsmul_eq_mul] using h.nsmul n\n#align periodic.nat_mul periodic.nat_mul\n\n",
 "nat_even_mul_periodic":
 "theorem antiperiodic.nat_even_mul_periodic [Semiring α] [InvolutiveNeg β] (h : antiperiodic f c) (n : ℕ) :\n    periodic f (n * (2 * c)) :=\n  h.periodic.nat_mul n\n#align antiperiodic.nat_even_mul_periodic antiperiodic.nat_even_mul_periodic\n\n",
 "mul_const_inv":
 "theorem antiperiodic.mul_const_inv [DivisionRing α] [Neg β] (h : antiperiodic f c) {a : α} (ha : a ≠ 0) :\n    antiperiodic (fun x => f (x * a⁻¹)) (c * a) :=\n  h.const_inv_smul₀ <| (MulOpposite.op_ne_zero_iff a).mpr ha\n#align antiperiodic.mul_const_inv antiperiodic.mul_const_inv\n\n",
 "mul_const'":
 "theorem antiperiodic.mul_const' [DivisionRing α] [Neg β] (h : antiperiodic f c) {a : α} (ha : a ≠ 0) :\n    antiperiodic (fun x => f (x * a)) (c / a) := by simpa only [div_eq_mul_inv] using h.mul_const ha\n#align antiperiodic.mul_const' antiperiodic.mul_const'\n\n",
 "mul_const":
 "theorem antiperiodic.mul_const [DivisionRing α] [Neg β] (h : antiperiodic f c) {a : α} (ha : a ≠ 0) :\n    antiperiodic (fun x => f (x * a)) (c * a⁻¹) :=\n  h.const_smul₀ <| (MulOpposite.op_ne_zero_iff a).mpr ha\n#align antiperiodic.mul_const antiperiodic.mul_const\n\n",
 "mul":
 "theorem antiperiodic.mul [Add α] [Mul β] [HasDistribNeg β] (hf : antiperiodic f c) (hg : antiperiodic g c) :\n    periodic (f * g) c := by simp_all\n#align antiperiodic.mul antiperiodic.mul\n\n",
 "map_vadd_zmultiples":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\ntheorem periodic.map_vadd_zmultiples [add_comm_group α] (hf : periodic f c) (a : add_subgroup.zmultiples c) (x : α) :\n    f («expr +ᵥ » a x) = f x := by\n  rcases a with ⟨_, m, rfl⟩\n  simp [add_subgroup.vadd_def, add_comm _ x, hf.zsmul m x]\n#align periodic.map_vadd_zmultiples periodic.map_vadd_zmultiples\n\n",
 "map_vadd_multiples":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr +ᵥ » -/\ntheorem periodic.map_vadd_multiples [add_comm_monoid α] (hf : periodic f c) (a : add_submonoid.multiples c) (x : α) :\n    f («expr +ᵥ » a x) = f x := by\n  rcases a with ⟨_, m, rfl⟩\n  simp [AddSubmonoid.vadd_def, add_comm _ x, hf.nsmul m x]\n#align periodic.map_vadd_multiples periodic.map_vadd_multiples\n\n",
 "lift_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⧸ » -/\n@[simp]\ntheorem periodic.lift_coe [add_group α] (h : periodic f c) (a : α) :\n    h.lift (a : «expr ⧸ » α (add_subgroup.zmultiples c)) = f a :=\n  rfl\n#align periodic.lift_coe periodic.lift_coe\n\n",
 "int_odd_mul_antiperiodic":
 "theorem antiperiodic.int_odd_mul_antiperiodic [Ring α] [InvolutiveNeg β] (h : antiperiodic f c) (n : ℤ) :\n    antiperiodic f (n * (2 * c) + c) := fun x => by rw [← add_assoc, h, h.periodic.int_mul]\n#align antiperiodic.int_odd_mul_antiperiodic antiperiodic.int_odd_mul_antiperiodic\n\n",
 "int_mul_sub_eq":
 "theorem periodic.int_mul_sub_eq [Ring α] (h : periodic f c) (n : ℤ) : f (n * c - x) = f (-x) := by\n  simpa only [sub_eq_neg_add] using h.int_mul n (-x)\n#align periodic.int_mul_sub_eq periodic.int_mul_sub_eq\n\n",
 "int_mul_eq_of_eq_zero":
 "theorem antiperiodic.int_mul_eq_of_eq_zero [CommRing α] [subtraction_monoid β] (h : antiperiodic f c) (hi : f 0 = 0)\n    (n : ℤ) : f (n * c) = 0 :=\n  by\n  rcases int.even_or_odd n with (⟨k, rfl⟩ | ⟨k, rfl⟩) <;>\n    have hk : (k : α) * (2 * c) = 2 * k * c := by rw [mul_left_comm, ← mul_assoc]\n  · simpa [← two_mul, hk, hi] using (h.int_even_mul_periodic k).eq\n  · simpa [add_mul, hk, hi] using (h.int_odd_mul_antiperiodic k).eq\n#align antiperiodic.int_mul_eq_of_eq_zero antiperiodic.int_mul_eq_of_eq_zero\n\n",
 "int_mul_eq":
 "theorem periodic.int_mul_eq [Ring α] (h : periodic f c) (n : ℤ) : f (n * c) = f 0 :=\n  (h.int_mul n).eq\n#align periodic.int_mul_eq periodic.int_mul_eq\n\n",
 "int_mul":
 "theorem periodic.int_mul [Ring α] (h : periodic f c) (n : ℤ) : periodic f (n * c) := by\n  simpa only [zsmul_eq_mul] using h.zsmul n\n#align periodic.int_mul periodic.int_mul\n\n",
 "int_even_mul_periodic":
 "theorem antiperiodic.int_even_mul_periodic [Ring α] [InvolutiveNeg β] (h : antiperiodic f c) (n : ℤ) :\n    periodic f (n * (2 * c)) :=\n  h.periodic.int_mul n\n#align antiperiodic.int_even_mul_periodic antiperiodic.int_even_mul_periodic\n\n",
 "image_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem periodic.image_Ioc [LinearOrderedAddCommGroup α] [Archimedean α] (h : periodic f c) (hc : 0 < c) (a : α) :\n    «expr '' » f (Set.Ioc a (a + c)) = Set.range f :=\n  (Set.image_subset_range _ _).antisymm <|\n    Set.range_subset_iff.2 fun x =>\n      let ⟨y, hy, hyx⟩ := h.exists_mem_Ioc hc x a\n      ⟨y, hy, hyx.symm⟩\n#align periodic.image_Ioc periodic.image_Ioc\n\n",
 "funext'":
 "theorem antiperiodic.funext' [Add α] [InvolutiveNeg β] (h : antiperiodic f c) : (fun x => -f (x + c)) = f :=\n  (eq_neg_iff_eq_neg.mp h.funext).symm\n#align antiperiodic.funext' antiperiodic.funext'\n\n",
 "funext":
 "theorem antiperiodic.funext [Add α] [Neg β] (h : antiperiodic f c) : (fun x => f (x + c)) = -f :=\n  funext h\n#align antiperiodic.funext antiperiodic.funext\n\n",
 "fract_periodic":
 "theorem int.fract_periodic (α) [LinearOrderedRing α] [FloorRing α] : function.periodic Int.fract (1 : α) := by\n  exact_mod_cast fun a => Int.fract_add_int a 1\n#align int.fract_periodic int.fract_periodic\n\n",
 "exists_mem_Ioc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some\n  `y ∈ Ioc a (a + c)` such that `f x = f y`. -/\ntheorem periodic.exists_mem_Ioc [LinearOrderedAddCommGroup α] [Archimedean α] (h : periodic f c) (hc : 0 < c) (x a) :\n    ∃ y ∈ Set.Ioc a (a + c), f x = f y :=\n  let ⟨n, H, _⟩ := existsUnique_add_zsmul_mem_Ioc hc x a\n  ⟨x + «expr • » n c, H, (h.zsmul n x).symm⟩\n#align periodic.exists_mem_Ioc periodic.exists_mem_Ioc\n\n",
 "exists_mem_Ico₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some\n  `y ∈ Ico 0 c` such that `f x = f y`. -/\ntheorem periodic.exists_mem_Ico₀ [LinearOrderedAddCommGroup α] [Archimedean α] (h : periodic f c) (hc : 0 < c) (x) :\n    ∃ y ∈ Set.Ico 0 c, f x = f y :=\n  let ⟨n, H, _⟩ := existsUnique_zsmul_near_of_pos' hc x\n  ⟨x - «expr • » n c, H, (h.sub_zsmul_eq n).symm⟩\n#align periodic.exists_mem_Ico₀ periodic.exists_mem_Ico₀\n\n",
 "exists_mem_Ico":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- If a function `f` is `periodic` with positive period `c`, then for all `x` there exists some\n  `y ∈ Ico a (a + c)` such that `f x = f y`. -/\ntheorem periodic.exists_mem_Ico [LinearOrderedAddCommGroup α] [Archimedean α] (h : periodic f c) (hc : 0 < c) (x a) :\n    ∃ y ∈ Set.Ico a (a + c), f x = f y :=\n  let ⟨n, H, _⟩ := existsUnique_add_zsmul_mem_Ico hc x a\n  ⟨x + «expr • » n c, H, (h.zsmul n x).symm⟩\n#align periodic.exists_mem_Ico periodic.exists_mem_Ico\n\n",
 "eq":
 "theorem antiperiodic.eq [add_zero_class α] [Neg β] (h : antiperiodic f c) : f c = -f 0 := by\n  simpa only [zero_add] using h 0\n#align antiperiodic.eq antiperiodic.eq\n\n",
 "div_inv":
 "theorem antiperiodic.div_inv [DivisionRing α] [Neg β] (h : antiperiodic f c) {a : α} (ha : a ≠ 0) :\n    antiperiodic (fun x => f (x / a)) (c * a) := by simpa only [div_eq_mul_inv] using h.mul_const_inv ha\n#align antiperiodic.div_inv antiperiodic.div_inv\n\n",
 "div_const":
 "theorem periodic.div_const [DivisionRing α] (h : periodic f c) (a : α) : periodic (fun x => f (x / a)) (c * a) := by\n  simpa only [div_eq_mul_inv] using h.mul_const_inv a\n#align periodic.div_const periodic.div_const\n\n",
 "div":
 "theorem antiperiodic.div [Add α] [division_monoid β] [HasDistribNeg β] (hf : antiperiodic f c) (hg : antiperiodic g c) :\n    periodic (f / g) c := by simp_all [neg_div_neg_eq]\n#align antiperiodic.div antiperiodic.div\n\n",
 "const_sub":
 "theorem antiperiodic.const_sub [add_comm_group α] [InvolutiveNeg β] (h : antiperiodic f c) (a : α) :\n    antiperiodic (fun x => f (a - x)) c := by\n  rw [← neg_neg c]\n  refine' antiperiodic.neg _\n  intro x\n  simpa [sub_add_eq_sub_sub] using h (a - x)\n#align antiperiodic.const_sub antiperiodic.const_sub\n\n",
 "const_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem antiperiodic.const_smul₀ [add_comm_monoid α] [Neg β] [DivisionRing γ] [Module γ α] (h : antiperiodic f c)\n    {a : γ} (ha : a ≠ 0) : antiperiodic (fun x => f («expr • » a x)) («expr • » a⁻¹ c) := fun x => by\n  simpa only [smul_add, smul_inv_smul₀ ha] using h («expr • » a x)\n#align antiperiodic.const_smul₀ antiperiodic.const_smul₀\n\n",
 "const_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem antiperiodic.const_smul [add_monoid α] [Neg β] [group γ] [DistribMulAction γ α] (h : antiperiodic f c) (a : γ) :\n    antiperiodic (fun x => f («expr • » a x)) («expr • » a⁻¹ c) := fun x => by\n  simpa only [smul_add, smul_inv_smul] using h («expr • » a x)\n#align antiperiodic.const_smul antiperiodic.const_smul\n\n",
 "const_mul":
 "theorem antiperiodic.const_mul [DivisionRing α] [Neg β] (h : antiperiodic f c) {a : α} (ha : a ≠ 0) :\n    antiperiodic (fun x => f (a * x)) (a⁻¹ * c) :=\n  h.const_smul₀ ha\n#align antiperiodic.const_mul antiperiodic.const_mul\n\n",
 "const_inv_smul₀":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem antiperiodic.const_inv_smul₀ [add_comm_monoid α] [Neg β] [DivisionRing γ] [Module γ α] (h : antiperiodic f c)\n    {a : γ} (ha : a ≠ 0) : antiperiodic (fun x => f («expr • » a⁻¹ x)) («expr • » a c) := by\n  simpa only [inv_inv] using h.const_smul₀ (inv_ne_zero ha)\n#align antiperiodic.const_inv_smul₀ antiperiodic.const_inv_smul₀\n\n",
 "const_inv_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem antiperiodic.const_inv_smul [add_monoid α] [Neg β] [group γ] [DistribMulAction γ α] (h : antiperiodic f c)\n    (a : γ) : antiperiodic (fun x => f («expr • » a⁻¹ x)) («expr • » a c) := by\n  simpa only [inv_inv] using h.const_smul a⁻¹\n#align antiperiodic.const_inv_smul antiperiodic.const_inv_smul\n\n",
 "const_inv_mul":
 "theorem antiperiodic.const_inv_mul [DivisionRing α] [Neg β] (h : antiperiodic f c) {a : α} (ha : a ≠ 0) :\n    antiperiodic (fun x => f (a⁻¹ * x)) (a * c) :=\n  h.const_inv_smul₀ ha\n#align antiperiodic.const_inv_mul antiperiodic.const_inv_mul\n\n",
 "const_add":
 "theorem antiperiodic.const_add [add_semigroup α] [Neg β] (h : antiperiodic f c) (a : α) :\n    antiperiodic (fun x => f (a + x)) c := fun x => by simpa [add_assoc] using h (a + x)\n#align antiperiodic.const_add antiperiodic.const_add\n\n",
 "comp_add_hom":
 "theorem periodic.comp_add_hom [Add α] [Add γ] (h : periodic f c) (g : AddHom γ α) (g_inv : α → γ)\n    (hg : right_inverse g_inv g) : periodic (f ∘ g) (g_inv c) := fun x => by\n  simp only [hg c, h (g x), AddHom.map_add, comp_app]\n#align periodic.comp_add_hom periodic.comp_add_hom\n\n",
 "comp":
 "theorem periodic.comp [Add α] (h : periodic f c) (g : β → γ) : periodic (g ∘ f) c := by simp_all\n#align periodic.comp periodic.comp\n\n",
 "add_period":
 "theorem periodic.add_period [add_semigroup α] (h1 : periodic f c₁) (h2 : periodic f c₂) : periodic f (c₁ + c₂) := by\n  simp_all [← add_assoc]\n#align periodic.add_period periodic.add_period\n\n",
 "add_const":
 "theorem antiperiodic.add_const [add_comm_semigroup α] [Neg β] (h : antiperiodic f c) (a : α) :\n    antiperiodic (fun x => f (x + a)) c := fun x => by\n  simpa [add_assoc x c a, add_comm c, ← add_assoc x a c] using h (x + a)\n#align antiperiodic.add_const antiperiodic.add_const\n\n",
 "add_antiperiod_eq":
 "theorem periodic.add_antiperiod_eq [add_group α] [Neg β] (h1 : periodic f c₁) (h2 : antiperiodic f c₂) :\n    f (c₁ + c₂) = -f 0 :=\n  (h1.add_antiperiod h2).eq\n#align periodic.add_antiperiod_eq periodic.add_antiperiod_eq\n\n",
 "add_antiperiod":
 "theorem periodic.add_antiperiod [add_group α] [Neg β] (h1 : periodic f c₁) (h2 : antiperiodic f c₂) :\n    antiperiodic f (c₁ + c₂) := by simp_all [← add_assoc]\n#align periodic.add_antiperiod periodic.add_antiperiod\n\n",
 "add":
 "theorem antiperiodic.add [add_group α] [InvolutiveNeg β] (h1 : antiperiodic f c₁) (h2 : antiperiodic f c₂) :\n    periodic f (c₁ + c₂) := by simp_all [← add_assoc]\n#align antiperiodic.add antiperiodic.add\n\n"}