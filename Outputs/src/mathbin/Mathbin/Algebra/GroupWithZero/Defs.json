{"zero_ne_mul_self":
 "#print zero_ne_mul_self /-\ntheorem zero_ne_mul_self : 0 ≠ a * a ↔ a ≠ 0 :=\n  zero_eq_mul_self.not\n#align zero_ne_mul_self zero_ne_mul_self\n-/\n\n",
 "zero_mul":
 "/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n-- We have to fix the universe of `G₀` here, since the default argument to\n-- `group_with_zero.div'` cannot contain a universe metavariable.\n@[ematch, simp]\ntheorem zero_mul (a : M₀) : 0 * a = 0 :=\n  mul_zero_class.zero_mul a\n#align zero_mul zero_mul\n\n",
 "zero_eq_mul_self":
 "#print zero_eq_mul_self /-\ntheorem zero_eq_mul_self : 0 = a * a ↔ a = 0 := by simp\n#align zero_eq_mul_self zero_eq_mul_self\n-/\n\n",
 "zero_eq_mul":
 "#print zero_eq_mul /-\n/-- If `α` has no zero divisors, then the product of two elements equals zero iff one of them\nequals zero. -/\n@[simp]\ntheorem zero_eq_mul : 0 = a * b ↔ a = 0 ∨ b = 0 := by rw [eq_comm, mul_eq_zero]\n#align zero_eq_mul zero_eq_mul\n-/\n\n",
 "to_is_right_cancel_mul_zero":
 "theorem is_left_cancel_mul_zero.to_is_right_cancel_mul_zero [is_left_cancel_mul_zero M₀] :\n    is_right_cancel_mul_zero M₀ :=\n  ⟨fun a b c ha h => mul_left_cancel₀ ha <| (mul_comm _ _).trans <| h.trans (mul_comm _ _)⟩\n#align is_left_cancel_mul_zero.to_is_right_cancel_mul_zero is_left_cancel_mul_zero.to_is_right_cancel_mul_zero\n\n",
 "to_is_left_cancel_mul_zero":
 "theorem is_right_cancel_mul_zero.to_is_left_cancel_mul_zero [is_right_cancel_mul_zero M₀] :\n    is_left_cancel_mul_zero M₀ :=\n  ⟨fun a b c ha h => mul_right_cancel₀ ha <| (mul_comm _ _).trans <| h.trans (mul_comm _ _)⟩\n#align is_right_cancel_mul_zero.to_is_left_cancel_mul_zero is_right_cancel_mul_zero.to_is_left_cancel_mul_zero\n\n",
 "to_is_cancel_mul_zero":
 "theorem is_right_cancel_mul_zero.to_is_cancel_mul_zero [is_right_cancel_mul_zero M₀] : is_cancel_mul_zero M₀ :=\n  { ‹is_right_cancel_mul_zero M₀›, is_right_cancel_mul_zero.to_is_left_cancel_mul_zero with }\n#align is_right_cancel_mul_zero.to_is_cancel_mul_zero is_right_cancel_mul_zero.to_is_cancel_mul_zero\n\n",
 "pullback_nonzero":
 "#print pullback_nonzero /-\n/-- Pullback a `nontrivial` instance along a function sending `0` to `0` and `1` to `1`. -/\ntheorem pullback_nonzero [Zero M₀'] [One M₀'] (f : M₀' → M₀) (zero : f 0 = 0) (one : f 1 = 1) : nontrivial M₀' :=\n  ⟨⟨0, 1,\n      mt (congr_arg f) <| by\n        rw [zero, one]\n        exact zero_ne_one⟩⟩\n#align pullback_nonzero pullback_nonzero\n-/\n\n",
 "mul_zero":
 "@[ematch, simp]\ntheorem mul_zero (a : M₀) : a * 0 = 0 :=\n  mul_zero_class.mul_zero a\n#align mul_zero mul_zero\n\n",
 "mul_self_ne_zero":
 "#print mul_self_ne_zero /-\ntheorem mul_self_ne_zero : a * a ≠ 0 ↔ a ≠ 0 :=\n  mul_self_eq_zero.not\n#align mul_self_ne_zero mul_self_ne_zero\n-/\n\n",
 "mul_self_eq_zero":
 "#print mul_self_eq_zero /-\ntheorem mul_self_eq_zero : a * a = 0 ↔ a = 0 := by simp\n#align mul_self_eq_zero mul_self_eq_zero\n-/\n\n",
 "mul_right_injective₀":
 "#print mul_right_injective₀ /-\ntheorem mul_right_injective₀ (ha : a ≠ 0) : function.injective ((· * ·) a) := fun b c => mul_left_cancel₀ ha\n#align mul_right_injective₀ mul_right_injective₀\n-/\n\n",
 "mul_right_cancel₀":
 "#print mul_right_cancel₀ /-\ntheorem mul_right_cancel₀ (hb : b ≠ 0) (h : a * b = c * b) : a = c :=\n  is_right_cancel_mul_zero.mul_right_cancel_of_ne_zero hb h\n#align mul_right_cancel₀ mul_right_cancel₀\n-/\n\n",
 "mul_ne_zero_iff":
 "#print mul_ne_zero_iff /-\n/-- If `α` has no zero divisors, then the product of two elements is nonzero iff both of them\nare nonzero. -/\ntheorem mul_ne_zero_iff : a * b ≠ 0 ↔ a ≠ 0 ∧ b ≠ 0 :=\n  mul_eq_zero.not.trans not_or\n#align mul_ne_zero_iff mul_ne_zero_iff\n-/\n\n",
 "mul_ne_zero_comm":
 "#print mul_ne_zero_comm /-\n/-- If `α` has no zero divisors, then for elements `a, b : α`, `a * b` is nonzero iff so is\n`b * a`. -/\ntheorem mul_ne_zero_comm : a * b ≠ 0 ↔ b * a ≠ 0 :=\n  mul_eq_zero_comm.not\n#align mul_ne_zero_comm mul_ne_zero_comm\n-/\n\n",
 "mul_left_injective₀":
 "#print mul_left_injective₀ /-\ntheorem mul_left_injective₀ (hb : b ≠ 0) : function.injective fun a => a * b := fun a c => mul_right_cancel₀ hb\n#align mul_left_injective₀ mul_left_injective₀\n-/\n\n",
 "mul_left_cancel₀":
 "#print mul_left_cancel₀ /-\ntheorem mul_left_cancel₀ (ha : a ≠ 0) (h : a * b = a * c) : b = c :=\n  is_left_cancel_mul_zero.mul_left_cancel_of_ne_zero ha h\n#align mul_left_cancel₀ mul_left_cancel₀\n-/\n\n",
 "mul_inv_cancel":
 "#print mul_inv_cancel /-\n@[simp]\ntheorem mul_inv_cancel {a : G₀} (h : a ≠ 0) : a * a⁻¹ = 1 :=\n  group_with_zero.mul_inv_cancel a h\n#align mul_inv_cancel mul_inv_cancel\n-/\n\n",
 "mul_eq_zero_of_right":
 "#print mul_eq_zero_of_right /-\ntheorem mul_eq_zero_of_right (a : M₀) {b : M₀} (h : b = 0) : a * b = 0 :=\n  h.symm ▸ mul_zero a\n#align mul_eq_zero_of_right mul_eq_zero_of_right\n-/\n\n",
 "mul_eq_zero_of_left":
 "#print mul_eq_zero_of_left /-\ntheorem mul_eq_zero_of_left {a : M₀} (h : a = 0) (b : M₀) : a * b = 0 :=\n  h.symm ▸ zero_mul b\n#align mul_eq_zero_of_left mul_eq_zero_of_left\n-/\n\n",
 "mul_eq_zero_comm":
 "#print mul_eq_zero_comm /-\n/-- If `α` has no zero divisors, then for elements `a, b : α`, `a * b` equals zero iff so is\n`b * a`. -/\ntheorem mul_eq_zero_comm : a * b = 0 ↔ b * a = 0 :=\n  mul_eq_zero.trans <| (or_comm' _ _).trans mul_eq_zero.symm\n#align mul_eq_zero_comm mul_eq_zero_comm\n-/\n\n",
 "mul_eq_zero":
 "#print mul_eq_zero /-\n/-- If `α` has no zero divisors, then the product of two elements equals zero iff one of them\nequals zero. -/\n@[simp]\ntheorem mul_eq_zero : a * b = 0 ↔ a = 0 ∨ b = 0 :=\n  ⟨eq_zero_or_eq_zero_of_mul_eq_zero, fun o => o.elim (fun h => mul_eq_zero_of_left h b) (mul_eq_zero_of_right a)⟩\n#align mul_eq_zero mul_eq_zero\n-/\n\n",
 "inv_zero":
 "/- By defining this _after_ `semigroup_with_zero`, we ensure that searches for `mul_zero_class` find\nthis class first. -/\n-- see Note [lower instance priority]\n@[simp]\ntheorem inv_zero : (0 : G₀)⁻¹ = 0 :=\n  group_with_zero.inv_zero\n#align inv_zero inv_zero\n\n"}