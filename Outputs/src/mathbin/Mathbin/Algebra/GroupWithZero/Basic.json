{"zero_ne_one_or_forall_eq_0":
 "#print zero_ne_one_or_forall_eq_0 /-\n/-- In a monoid with zero, either zero and one are nonequal, or zero is the only element. -/\ntheorem zero_ne_one_or_forall_eq_0 : (0 : M₀) ≠ 1 ∨ ∀ a : M₀, a = 0 :=\n  not_or_of_imp eq_zero_of_zero_eq_one\n#align zero_ne_one_or_forall_eq_0 zero_ne_one_or_forall_eq_0\n-/\n\n",
 "zero_mul_eq_const":
 "#print zero_mul_eq_const /-\n/-- To match `one_mul_eq_id`. -/\ntheorem zero_mul_eq_const : (· * ·) (0 : M₀) = function.const _ 0 :=\n  funext zero_mul\n#align zero_mul_eq_const zero_mul_eq_const\n-/\n\n",
 "zero_eq_inv":
 "#print zero_eq_inv /-\n@[simp]\ntheorem zero_eq_inv {a : G₀} : 0 = a⁻¹ ↔ 0 = a :=\n  eq_comm.trans <| inv_eq_zero.trans eq_comm\n#align zero_eq_inv zero_eq_inv\n-/\n\n",
 "zero_div":
 "#print zero_div /-\n-- See note [lower instance priority]\n@[simp]\ntheorem zero_div (a : G₀) : 0 / a = 0 := by rw [div_eq_mul_inv, zero_mul]\n#align zero_div zero_div\n-/\n\n",
 "subsingleton_iff_zero_eq_one":
 "#print subsingleton_iff_zero_eq_one /-\n/-- In a monoid with zero, zero equals one if and only if all elements of that semiring\nare equal. -/\ntheorem subsingleton_iff_zero_eq_one : (0 : M₀) = 1 ↔ subsingleton M₀ :=\n  ⟨fun h => @unique.subsingleton _ (uniqueOfZeroEqOne h), fun h => @subsingleton.elim _ h _ _⟩\n#align subsingleton_iff_zero_eq_one subsingleton_iff_zero_eq_one\n-/\n\n",
 "right_ne_zero_of_mul_eq_one":
 "#print right_ne_zero_of_mul_eq_one /-\ntheorem right_ne_zero_of_mul_eq_one (h : a * b = 1) : b ≠ 0 :=\n  right_ne_zero_of_mul <| ne_zero_of_eq_one h\n#align right_ne_zero_of_mul_eq_one right_ne_zero_of_mul_eq_one\n-/\n\n",
 "right_ne_zero_of_mul":
 "#print right_ne_zero_of_mul /-\ntheorem right_ne_zero_of_mul : a * b ≠ 0 → b ≠ 0 :=\n  mt (mul_eq_zero_of_right a)\n#align right_ne_zero_of_mul right_ne_zero_of_mul\n-/\n\n",
 "one_div_ne_zero":
 "#print one_div_ne_zero /-\ntheorem one_div_ne_zero {a : G₀} (h : a ≠ 0) : 1 / a ≠ 0 := by simpa only [one_div] using inv_ne_zero h\n#align one_div_ne_zero one_div_ne_zero\n-/\n\n",
 "ne_zero_of_one_div_ne_zero":
 "#print ne_zero_of_one_div_ne_zero /-\ntheorem ne_zero_of_one_div_ne_zero {a : G₀} (h : 1 / a ≠ 0) : a ≠ 0 := fun ha : a = 0 => by rw [ha, div_zero] at h;\n  contradiction\n#align ne_zero_of_one_div_ne_zero ne_zero_of_one_div_ne_zero\n-/\n\n",
 "ne_zero_and_ne_zero_of_mul":
 "#print ne_zero_and_ne_zero_of_mul /-\ntheorem ne_zero_and_ne_zero_of_mul (h : a * b ≠ 0) : a ≠ 0 ∧ b ≠ 0 :=\n  ⟨left_ne_zero_of_mul h, right_ne_zero_of_mul h⟩\n#align ne_zero_and_ne_zero_of_mul ne_zero_and_ne_zero_of_mul\n-/\n\n",
 "mul_zero_eq_const":
 "#print mul_zero_eq_const /-\n/-- To match `mul_one_eq_id`. -/\ntheorem mul_zero_eq_const : (· * (0 : M₀)) = function.const _ 0 :=\n  funext mul_zero\n#align mul_zero_eq_const mul_zero_eq_const\n-/\n\n",
 "mul_self_mul_inv":
 "#print mul_self_mul_inv /-\n/-- Multiplying `a` by itself and then by its inverse results in `a`\n(whether or not `a` is zero). -/\n@[simp]\ntheorem mul_self_mul_inv (a : G₀) : a * a * a⁻¹ = a :=\n  by\n  by_cases h : a = 0\n  · rw [h, inv_zero, mul_zero]\n  · rw [mul_assoc, mul_inv_cancel h, mul_one]\n#align mul_self_mul_inv mul_self_mul_inv\n-/\n\n",
 "mul_self_div_self":
 "#print mul_self_div_self /-\n/-- Multiplying `a` by itself and then dividing by itself results in `a`, whether or not `a` is\nzero. -/\n@[simp]\ntheorem mul_self_div_self (a : G₀) : a * a / a = a := by rw [div_eq_mul_inv, mul_self_mul_inv a]\n#align mul_self_div_self mul_self_div_self\n-/\n\n",
 "mul_right_surjective₀":
 "#print mul_right_surjective₀ /-\ntheorem mul_right_surjective₀ {a : G₀} (h : a ≠ 0) : surjective fun g => g * a := fun g =>\n  ⟨g * a⁻¹, by simp [mul_assoc, inv_mul_cancel h]⟩\n#align mul_right_surjective₀ mul_right_surjective₀\n-/\n\n",
 "mul_right_injective":
 "theorem group_with_zero.mul_right_injective (h : x ≠ 0) : function.injective fun y => y * x := fun y y' w => by\n  simpa only [mul_assoc, mul_inv_cancel h, mul_one] using congr_arg (fun y => y * x⁻¹) w\n#align group_with_zero.mul_right_injective group_with_zero.mul_right_injective\n\n",
 "mul_right_inj'":
 "#print mul_right_inj' /-\ntheorem mul_right_inj' (ha : a ≠ 0) : a * b = a * c ↔ b = c :=\n  (mul_right_injective₀ ha).eq_iff\n#align mul_right_inj' mul_right_inj'\n-/\n\n",
 "mul_right_eq_self₀":
 "#print mul_right_eq_self₀ /-\ntheorem mul_right_eq_self₀ : a * b = a ↔ b = 1 ∨ a = 0 :=\n  calc\n    a * b = a ↔ a * b = a * 1 := by rw [mul_one]\n    _ ↔ b = 1 ∨ a = 0 := mul_eq_mul_left_iff\n    \n#align mul_right_eq_self₀ mul_right_eq_self₀\n-/\n\n",
 "mul_ne_zero":
 "#print mul_ne_zero /-\n@[field_simps]\ntheorem mul_ne_zero (ha : a ≠ 0) (hb : b ≠ 0) : a * b ≠ 0 :=\n  mt eq_zero_or_eq_zero_of_mul_eq_zero <| not_or.mpr ⟨ha, hb⟩\n#align mul_ne_zero mul_ne_zero\n-/\n\n",
 "mul_left_surjective₀":
 "#print mul_left_surjective₀ /-\ntheorem mul_left_surjective₀ {a : G₀} (h : a ≠ 0) : surjective fun g => a * g := fun g =>\n  ⟨a⁻¹ * g, by simp [← mul_assoc, mul_inv_cancel h]⟩\n#align mul_left_surjective₀ mul_left_surjective₀\n-/\n\n",
 "mul_left_injective":
 "theorem group_with_zero.mul_left_injective (h : x ≠ 0) : function.injective fun y => x * y := fun y y' w => by\n  simpa only [← mul_assoc, inv_mul_cancel h, one_mul] using congr_arg (fun y => x⁻¹ * y) w\n#align group_with_zero.mul_left_injective group_with_zero.mul_left_injective\n\n",
 "mul_left_inj'":
 "#print mul_left_inj' /-\n-- see Note [lower instance priority]\ntheorem mul_left_inj' (hc : c ≠ 0) : a * c = b * c ↔ a = b :=\n  (mul_left_injective₀ hc).eq_iff\n#align mul_left_inj' mul_left_inj'\n-/\n\n",
 "mul_left_eq_self₀":
 "#print mul_left_eq_self₀ /-\ntheorem mul_left_eq_self₀ : a * b = b ↔ a = 1 ∨ b = 0 :=\n  calc\n    a * b = b ↔ a * b = 1 * b := by rw [one_mul]\n    _ ↔ a = 1 ∨ b = 0 := mul_eq_mul_right_iff\n    \n#align mul_left_eq_self₀ mul_left_eq_self₀\n-/\n\n",
 "mul_inv_mul_self":
 "#print mul_inv_mul_self /-\n/-- Multiplying `a` by its inverse and then by itself results in `a`\n(whether or not `a` is zero). -/\n@[simp]\ntheorem mul_inv_mul_self (a : G₀) : a * a⁻¹ * a = a :=\n  by\n  by_cases h : a = 0\n  · rw [h, inv_zero, mul_zero]\n  · rw [mul_inv_cancel h, one_mul]\n#align mul_inv_mul_self mul_inv_mul_self\n-/\n\n",
 "mul_inv_cancel_right₀":
 "#print mul_inv_cancel_right₀ /-\n@[simp]\ntheorem mul_inv_cancel_right₀ (h : b ≠ 0) (a : G₀) : a * b * b⁻¹ = a :=\n  calc\n    a * b * b⁻¹ = a * (b * b⁻¹) := mul_assoc _ _ _\n    _ = a := by simp [h]\n    \n#align mul_inv_cancel_right₀ mul_inv_cancel_right₀\n-/\n\n",
 "mul_inv_cancel_left₀":
 "#print mul_inv_cancel_left₀ /-\n@[simp]\ntheorem mul_inv_cancel_left₀ (h : a ≠ 0) (b : G₀) : a * (a⁻¹ * b) = b :=\n  calc\n    a * (a⁻¹ * b) = a * a⁻¹ * b := (mul_assoc _ _ _).symm\n    _ = b := by simp [h]\n    \n#align mul_inv_cancel_left₀ mul_inv_cancel_left₀\n-/\n\n",
 "mul_eq_zero_of_ne_zero_imp_eq_zero":
 "#print mul_eq_zero_of_ne_zero_imp_eq_zero /-\ntheorem mul_eq_zero_of_ne_zero_imp_eq_zero {a b : M₀} (h : a ≠ 0 → b = 0) : a * b = 0 :=\n  if ha : a = 0 then by rw [ha, zero_mul] else by rw [h ha, mul_zero]\n#align mul_eq_zero_of_ne_zero_imp_eq_zero mul_eq_zero_of_ne_zero_imp_eq_zero\n-/\n\n",
 "mul_eq_mul_right_iff":
 "#print mul_eq_mul_right_iff /-\n@[simp]\ntheorem mul_eq_mul_right_iff : a * c = b * c ↔ a = b ∨ c = 0 := by\n  by_cases hc : c = 0 <;> [simp [hc], simp [mul_left_inj', hc]]\n#align mul_eq_mul_right_iff mul_eq_mul_right_iff\n-/\n\n",
 "mul_eq_mul_left_iff":
 "#print mul_eq_mul_left_iff /-\n@[simp]\ntheorem mul_eq_mul_left_iff : a * b = a * c ↔ b = c ∨ a = 0 := by\n  by_cases ha : a = 0 <;> [simp [ha], simp [mul_right_inj', ha]]\n#align mul_eq_mul_left_iff mul_eq_mul_left_iff\n-/\n\n",
 "left_ne_zero_of_mul_eq_one":
 "#print left_ne_zero_of_mul_eq_one /-\ntheorem left_ne_zero_of_mul_eq_one (h : a * b = 1) : a ≠ 0 :=\n  left_ne_zero_of_mul <| ne_zero_of_eq_one h\n#align left_ne_zero_of_mul_eq_one left_ne_zero_of_mul_eq_one\n-/\n\n",
 "left_ne_zero_of_mul":
 "#print left_ne_zero_of_mul /-\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\ntheorem left_ne_zero_of_mul : a * b ≠ 0 → a ≠ 0 :=\n  mt fun h => mul_eq_zero_of_left h b\n#align left_ne_zero_of_mul left_ne_zero_of_mul\n-/\n\n",
 "inv_ne_zero":
 "#print inv_ne_zero /-\ntheorem inv_ne_zero (h : a ≠ 0) : a⁻¹ ≠ 0 := fun a_eq_0 => by simpa [a_eq_0] using mul_inv_cancel h\n#align inv_ne_zero inv_ne_zero\n-/\n\n",
 "inv_mul_mul_self":
 "#print inv_mul_mul_self /-\n/-- Multiplying `a⁻¹` by `a` twice results in `a` (whether or not `a`\nis zero). -/\n@[simp]\ntheorem inv_mul_mul_self (a : G₀) : a⁻¹ * a * a = a :=\n  by\n  by_cases h : a = 0\n  · rw [h, inv_zero, mul_zero]\n  · rw [inv_mul_cancel h, one_mul]\n#align inv_mul_mul_self inv_mul_mul_self\n-/\n\n",
 "inv_mul_cancel_right₀":
 "#print inv_mul_cancel_right₀ /-\n@[simp]\ntheorem inv_mul_cancel_right₀ (h : b ≠ 0) (a : G₀) : a * b⁻¹ * b = a :=\n  calc\n    a * b⁻¹ * b = a * (b⁻¹ * b) := mul_assoc _ _ _\n    _ = a := by simp [h]\n    \n#align inv_mul_cancel_right₀ inv_mul_cancel_right₀\n-/\n\n",
 "inv_mul_cancel_left₀":
 "#print inv_mul_cancel_left₀ /-\n@[simp]\ntheorem inv_mul_cancel_left₀ (h : a ≠ 0) (b : G₀) : a⁻¹ * (a * b) = b :=\n  calc\n    a⁻¹ * (a * b) = a⁻¹ * a * b := (mul_assoc _ _ _).symm\n    _ = b := by simp [h]\n    \n#align inv_mul_cancel_left₀ inv_mul_cancel_left₀\n-/\n\n",
 "inv_mul_cancel":
 "#print inv_mul_cancel /-\n@[simp]\ntheorem inv_mul_cancel (h : a ≠ 0) : a⁻¹ * a = 1 :=\n  calc\n    a⁻¹ * a = a⁻¹ * a * a⁻¹ * a⁻¹⁻¹ := by simp [inv_ne_zero h]\n    _ = a⁻¹ * a⁻¹⁻¹ := by simp [h]\n    _ = 1 := by simp [inv_ne_zero h]\n    \n#align inv_mul_cancel inv_mul_cancel\n-/\n\n",
 "inv_eq_zero":
 "#print inv_eq_zero /-\n@[simp]\ntheorem inv_eq_zero {a : G₀} : a⁻¹ = 0 ↔ a = 0 := by rw [inv_eq_iff_inv_eq, inv_zero, eq_comm]\n#align inv_eq_zero inv_eq_zero\n-/\n\n",
 "inv_eq_of_mul":
 "private theorem inv_eq_of_mul (h : a * b = 1) : a⁻¹ = b := by\n  rw [← inv_mul_cancel_left₀ (left_ne_zero_of_mul_eq_one h) b, h, mul_one]\n#align inv_eq_of_mul inv_eq_of_mul\n\n",
 "eq_zero_of_zero_eq_one":
 "#print eq_zero_of_zero_eq_one /-\n/-- In a monoid with zero, if zero equals one, then zero is the only element. -/\ntheorem eq_zero_of_zero_eq_one (h : (0 : M₀) = 1) (a : M₀) : a = 0 := by rw [← mul_one a, ← h, mul_zero]\n#align eq_zero_of_zero_eq_one eq_zero_of_zero_eq_one\n-/\n\n",
 "eq_zero_of_one_div_eq_zero":
 "#print eq_zero_of_one_div_eq_zero /-\ntheorem eq_zero_of_one_div_eq_zero {a : G₀} (h : 1 / a = 0) : a = 0 :=\n  by_cases (fun ha => ha) fun ha => ((one_div_ne_zero ha) h).elim\n#align eq_zero_of_one_div_eq_zero eq_zero_of_one_div_eq_zero\n-/\n\n",
 "eq_zero_of_mul_self_eq_zero":
 "#print eq_zero_of_mul_self_eq_zero /-\ntheorem eq_zero_of_mul_self_eq_zero (h : a * a = 0) : a = 0 :=\n  (eq_zero_or_eq_zero_of_mul_eq_zero h).elim id id\n#align eq_zero_of_mul_self_eq_zero eq_zero_of_mul_self_eq_zero\n-/\n\n",
 "eq_zero_of_mul_eq_self_right":
 "#print eq_zero_of_mul_eq_self_right /-\n/-- An element of a `cancel_monoid_with_zero` fixed by right multiplication by an element other\nthan one must be zero. -/\ntheorem eq_zero_of_mul_eq_self_right (h₁ : b ≠ 1) (h₂ : a * b = a) : a = 0 :=\n  by_contradiction fun ha => h₁ <| mul_left_cancel₀ ha <| h₂.symm ▸ (mul_one a).symm\n#align eq_zero_of_mul_eq_self_right eq_zero_of_mul_eq_self_right\n-/\n\n",
 "eq_zero_of_mul_eq_self_left":
 "#print eq_zero_of_mul_eq_self_left /-\n/-- An element of a `cancel_monoid_with_zero` fixed by left multiplication by an element other\nthan one must be zero. -/\ntheorem eq_zero_of_mul_eq_self_left (h₁ : b ≠ 1) (h₂ : b * a = a) : a = 0 :=\n  by_contradiction fun ha => h₁ <| mul_right_cancel₀ ha <| h₂.symm ▸ (one_mul a).symm\n#align eq_zero_of_mul_eq_self_left eq_zero_of_mul_eq_self_left\n-/\n\n",
 "eq_of_zero_eq_one":
 "#print eq_of_zero_eq_one /-\ntheorem eq_of_zero_eq_one (h : (0 : M₀) = 1) (a b : M₀) : a = b :=\n  @subsingleton.elim _ (subsingleton_of_zero_eq_one h) a b\n#align eq_of_zero_eq_one eq_of_zero_eq_one\n-/\n\n",
 "div_zero":
 "#print div_zero /-\n@[simp]\ntheorem div_zero (a : G₀) : a / 0 = 0 := by rw [div_eq_mul_inv, inv_zero, mul_zero]\n#align div_zero div_zero\n-/\n\n",
 "div_self_mul_self'":
 "#print div_self_mul_self' /-\n@[simp]\ntheorem div_self_mul_self' (a : G₀) : a / (a * a) = a⁻¹ :=\n  calc\n    a / (a * a) = a⁻¹⁻¹ * a⁻¹ * a⁻¹ := by simp [mul_inv_rev]\n    _ = a⁻¹ := inv_mul_mul_self _\n    \n#align div_self_mul_self' div_self_mul_self'\n-/\n\n",
 "div_self_mul_self":
 "#print div_self_mul_self /-\n/-- Dividing `a` by itself and then multiplying by itself results in `a`, whether or not `a` is\nzero. -/\n@[simp]\ntheorem div_self_mul_self (a : G₀) : a / a * a = a := by rw [div_eq_mul_inv, mul_inv_mul_self a]\n#align div_self_mul_self div_self_mul_self\n-/\n\n",
 "div_mul_eq_mul_div₀":
 "#print div_mul_eq_mul_div₀ /-\ntheorem div_mul_eq_mul_div₀ (a b c : G₀) : a / c * b = a * b / c := by simp_rw [div_eq_mul_inv, mul_assoc, mul_comm c⁻¹]\n#align div_mul_eq_mul_div₀ div_mul_eq_mul_div₀\n-/\n\n",
 "div_div_self":
 "#print div_div_self /-\n/-- Dividing `a` by the result of dividing `a` by itself results in\n`a` (whether or not `a` is zero). -/\n@[simp]\ntheorem div_div_self (a : G₀) : a / (a / a) = a :=\n  by\n  rw [div_div_eq_mul_div]\n  exact mul_self_div_self a\n#align div_div_self div_div_self\n-/\n\n"}