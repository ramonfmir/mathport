{"zpow_zpow₀":
 "#print Commute.zpow_zpow₀ /-\ntheorem Commute.zpow_zpow₀ {a b : G₀} (h : Commute a b) (m n : ℤ) : Commute (a ^ m) (b ^ n) :=\n  (h.zpow_left₀ m).zpow_right₀ n\n#align commute.zpow_zpow₀ Commute.zpow_zpow₀\n-/\n\n",
 "zpow_zpow_self₀":
 "#print Commute.zpow_zpow_self₀ /-\ntheorem Commute.zpow_zpow_self₀ (a : G₀) (m n : ℤ) : Commute (a ^ m) (a ^ n) :=\n  (Commute.refl a).zpow_zpow₀ m n\n#align commute.zpow_zpow_self₀ Commute.zpow_zpow_self₀\n-/\n\n",
 "zpow_sub₀":
 "#print zpow_sub₀ /-\ntheorem zpow_sub₀ {a : G₀} (ha : a ≠ 0) (z1 z2 : ℤ) : a ^ (z1 - z2) = a ^ z1 / a ^ z2 := by\n  rw [sub_eq_add_neg, zpow_add₀ ha, zpow_neg, div_eq_mul_inv]\n#align zpow_sub₀ zpow_sub₀\n-/\n\n",
 "zpow_sub_one₀":
 "#print zpow_sub_one₀ /-\ntheorem zpow_sub_one₀ {a : G₀} (ha : a ≠ 0) (n : ℤ) : a ^ (n - 1) = a ^ n * a⁻¹ :=\n  calc\n    a ^ (n - 1) = a ^ (n - 1) * a * a⁻¹ := by rw [mul_assoc, mul_inv_cancel ha, mul_one]\n    _ = a ^ n * a⁻¹ := by rw [← zpow_add_one₀ ha, sub_add_cancel]\n    \n#align zpow_sub_one₀ zpow_sub_one₀\n-/\n\n",
 "zpow_self₀":
 "#print Commute.zpow_self₀ /-\ntheorem Commute.zpow_self₀ (a : G₀) (n : ℤ) : Commute (a ^ n) a :=\n  (Commute.refl a).zpow_left₀ n\n#align commute.zpow_self₀ Commute.zpow_self₀\n-/\n\n",
 "zpow_right₀":
 "#print Commute.zpow_right₀ /-\ntheorem Commute.zpow_right₀ {a b : G₀} (h : Commute a b) : ∀ m : ℤ, Commute a (b ^ m) :=\n  h.zpow_right₀\n#align commute.zpow_right₀ Commute.zpow_right₀\n-/\n\n",
 "zpow_one_add₀":
 "#print zpow_one_add₀ /-\ntheorem zpow_one_add₀ {a : G₀} (h : a ≠ 0) (i : ℤ) : a ^ (1 + i) = a * a ^ i := by rw [zpow_add₀ h, zpow_one]\n#align zpow_one_add₀ zpow_one_add₀\n-/\n\n",
 "zpow_neg_mul_zpow_self":
 "#print zpow_neg_mul_zpow_self /-\ntheorem zpow_neg_mul_zpow_self (n : ℤ) {x : G₀} (h : x ≠ 0) : x ^ (-n) * x ^ n = 1 :=\n  by\n  rw [zpow_neg]\n  exact inv_mul_cancel (zpow_ne_zero n h)\n#align zpow_neg_mul_zpow_self zpow_neg_mul_zpow_self\n-/\n\n",
 "zpow_ne_zero_of_ne_zero":
 "#print zpow_ne_zero_of_ne_zero /-\ntheorem zpow_ne_zero_of_ne_zero {a : G₀} (ha : a ≠ 0) : ∀ z : ℤ, a ^ z ≠ 0\n  | (n : ℕ) => by\n    rw [zpow_ofNat]\n    exact pow_ne_zero _ ha\n  | -[n+1] => by\n    rw [zpow_negSucc]\n    exact inv_ne_zero (pow_ne_zero _ ha)\n#align zpow_ne_zero_of_ne_zero zpow_ne_zero_of_ne_zero\n-/\n\n",
 "zpow_ne_zero":
 "#print zpow_ne_zero /-\ntheorem zpow_ne_zero {x : G₀} (n : ℤ) : x ≠ 0 → x ^ n ≠ 0 :=\n  mt zpow_eq_zero\n#align zpow_ne_zero zpow_ne_zero\n-/\n\n",
 "zpow_left₀":
 "#print Commute.zpow_left₀ /-\ntheorem Commute.zpow_left₀ {a b : G₀} (h : Commute a b) (m : ℤ) : Commute (a ^ m) b :=\n  (h.symm.zpow_right₀ m).symm\n#align commute.zpow_left₀ Commute.zpow_left₀\n-/\n\n",
 "zpow_eq_zero_iff":
 "#print zpow_eq_zero_iff /-\ntheorem zpow_eq_zero_iff {a : G₀} {n : ℤ} (hn : n ≠ 0) : a ^ n = 0 ↔ a = 0 :=\n  ⟨zpow_eq_zero, fun ha => ha.symm ▸ zero_zpow _ hn⟩\n#align zpow_eq_zero_iff zpow_eq_zero_iff\n-/\n\n",
 "zpow_eq_zero":
 "#print zpow_eq_zero /-\ntheorem zpow_eq_zero {x : G₀} {n : ℤ} (h : x ^ n = 0) : x = 0 :=\n  by_contradiction fun hx => zpow_ne_zero_of_ne_zero hx n h\n#align zpow_eq_zero zpow_eq_zero\n-/\n\n",
 "zpow_bit1₀":
 "#print zpow_bit1₀ /-\ntheorem zpow_bit1₀ (a : G₀) (n : ℤ) : a ^ bit1 n = a ^ n * a ^ n * a :=\n  by\n  rw [← zpow_bit0, bit1, zpow_add', zpow_one]\n  right; left\n  apply bit1_ne_zero\n#align zpow_bit1₀ zpow_bit1₀\n-/\n\n",
 "zpow_bit1'":
 "#print zpow_bit1' /-\ntheorem zpow_bit1' (a : G₀) (n : ℤ) : a ^ bit1 n = (a * a) ^ n * a := by rw [zpow_bit1₀, (Commute.refl a).mul_zpow]\n#align zpow_bit1' zpow_bit1'\n-/\n\n",
 "zpow_add₀":
 "#print zpow_add₀ /-\ntheorem zpow_add₀ {a : G₀} (ha : a ≠ 0) (m n : ℤ) : a ^ (m + n) = a ^ m * a ^ n :=\n  by\n  induction' n using int.induction_on with n ihn n ihn\n  case hz => simp\n  · simp only [← add_assoc, zpow_add_one₀ ha, ihn, mul_assoc]\n  · rw [zpow_sub_one₀ ha, ← mul_assoc, ← ihn, ← zpow_sub_one₀ ha, add_sub_assoc]\n#align zpow_add₀ zpow_add₀\n-/\n\n",
 "zpow_add_one₀":
 "#print zpow_add_one₀ /-\ntheorem zpow_add_one₀ {a : G₀} (ha : a ≠ 0) : ∀ n : ℤ, a ^ (n + 1) = a ^ n * a\n  | (n : ℕ) => by simp only [← Int.ofNat_succ, zpow_ofNat, pow_succ']\n  | -[0+1] => by erw [zpow_zero, zpow_negSucc, pow_one, inv_mul_cancel ha]\n  | -[n + 1+1] => by\n    rw [Int.negSucc_eq, zpow_neg, neg_add, neg_add_cancel_right, zpow_neg, ← Int.ofNat_succ, zpow_ofNat, zpow_ofNat,\n      pow_succ _ (n + 1), mul_inv_rev, mul_assoc, inv_mul_cancel ha, mul_one]\n#align zpow_add_one₀ zpow_add_one₀\n-/\n\n",
 "zpow_add'":
 "#print zpow_add' /-\ntheorem zpow_add' {a : G₀} {m n : ℤ} (h : a ≠ 0 ∨ m + n ≠ 0 ∨ m = 0 ∧ n = 0) : a ^ (m + n) = a ^ m * a ^ n :=\n  by\n  by_cases hm : m = 0; · simp [hm]\n  by_cases hn : n = 0; · simp [hn]\n  by_cases ha : a = 0\n  · subst a\n    simp only [false_or_iff, eq_self_iff_true, not_true, ne.def, hm, hn, false_and_iff, or_false_iff] at h\n    rw [zero_zpow _ h, zero_zpow _ hm, zero_mul]\n  · exact zpow_add₀ ha m n\n#align zpow_add' zpow_add'\n-/\n\n",
 "zero_zpow_eq":
 "#print zero_zpow_eq /-\ntheorem zero_zpow_eq (n : ℤ) : (0 : G₀) ^ n = if n = 0 then 1 else 0 :=\n  by\n  split_ifs with h\n  · rw [h, zpow_zero]\n  · rw [zero_zpow _ h]\n#align zero_zpow_eq zero_zpow_eq\n-/\n\n",
 "zero_zpow":
 "#print zero_zpow /-\ntheorem zero_zpow : ∀ z : ℤ, z ≠ 0 → (0 : G₀) ^ z = 0\n  | (n : ℕ), h => by\n    rw [zpow_ofNat, zero_pow']\n    simpa using h\n  | -[n+1], h => by simp\n#align zero_zpow zero_zpow\n-/\n\n",
 "self_zpow₀":
 "#print Commute.self_zpow₀ /-\ntheorem Commute.self_zpow₀ (a : G₀) (n : ℤ) : Commute a (a ^ n) :=\n  (Commute.refl a).zpow_right₀ n\n#align commute.self_zpow₀ Commute.self_zpow₀\n-/\n\n",
 "pow_sub₀":
 "#print pow_sub₀ /-\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\ntheorem pow_sub₀ (a : G₀) {m n : ℕ} (ha : a ≠ 0) (h : n ≤ m) : a ^ (m - n) = a ^ m * (a ^ n)⁻¹ :=\n  by\n  have h1 : m - n + n = m := tsub_add_cancel_of_le h\n  have h2 : a ^ (m - n) * a ^ n = a ^ m := by rw [← pow_add, h1]\n  simpa only [div_eq_mul_inv] using eq_div_of_mul_eq (pow_ne_zero _ ha) h2\n#align pow_sub₀ pow_sub₀\n-/\n\n",
 "pow_sub_of_lt":
 "#print pow_sub_of_lt /-\ntheorem pow_sub_of_lt (a : G₀) {m n : ℕ} (h : n < m) : a ^ (m - n) = a ^ m * (a ^ n)⁻¹ :=\n  by\n  obtain rfl | ha := eq_or_ne a 0\n  · rw [zero_pow (tsub_pos_of_lt h), zero_pow (n.zero_le.trans_lt h), zero_mul]\n  · exact pow_sub₀ _ ha h.le\n#align pow_sub_of_lt pow_sub_of_lt\n-/\n\n",
 "pow_inv_comm₀":
 "#print pow_inv_comm₀ /-\ntheorem pow_inv_comm₀ (a : G₀) (m n : ℕ) : a⁻¹ ^ m * a ^ n = a ^ n * a⁻¹ ^ m :=\n  (Commute.refl a).inv_left₀.pow_pow m n\n#align pow_inv_comm₀ pow_inv_comm₀\n-/\n\n",
 "map_zpow₀":
 "#print map_zpow₀ /-\n/-- If a monoid homomorphism `f` between two `group_with_zero`s maps `0` to `0`, then it maps `x^n`,\n`n : ℤ`, to `(f x)^n`. -/\n@[simp]\ntheorem map_zpow₀ {F G₀ G₀' : Type _} [group_with_zero G₀] [group_with_zero G₀'] [MonoidWithZeroHomClass F G₀ G₀']\n    (f : F) (x : G₀) (n : ℤ) : f (x ^ n) = f x ^ n :=\n  map_zpow' f (map_inv₀ f) x n\n#align map_zpow₀ map_zpow₀\n-/\n\n",
 "inv_pow_sub₀":
 "#print inv_pow_sub₀ /-\ntheorem inv_pow_sub₀ (ha : a ≠ 0) (h : n ≤ m) : a⁻¹ ^ (m - n) = (a ^ m)⁻¹ * a ^ n := by\n  rw [pow_sub₀ _ (inv_ne_zero ha) h, inv_pow, inv_pow, inv_inv]\n#align inv_pow_sub₀ inv_pow_sub₀\n-/\n\n",
 "inv_pow_sub_of_lt":
 "#print inv_pow_sub_of_lt /-\ntheorem inv_pow_sub_of_lt (a : G₀) (h : n < m) : a⁻¹ ^ (m - n) = (a ^ m)⁻¹ * a ^ n := by\n  rw [pow_sub_of_lt a⁻¹ h, inv_pow, inv_pow, inv_inv]\n#align inv_pow_sub_of_lt inv_pow_sub_of_lt\n-/\n\n",
 "div_sq_cancel":
 "#print div_sq_cancel /-\ntheorem div_sq_cancel (a b : G₀) : a ^ 2 * b / a = a * b :=\n  by\n  by_cases ha : a = 0\n  · simp [ha]\n  rw [sq, mul_assoc, mul_div_cancel_left _ ha]\n#align div_sq_cancel div_sq_cancel\n-/\n\n"}