{"smul_mk0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_mk0 {α : Type _} [SMul G₀ α] {g : G₀} (hg : g ≠ 0) (a : α) : «expr • » (mk0 g hg) a = «expr • » g a :=\n  rfl\n#align smul_mk0 smul_mk0\n\n",
 "one_div_mul_cancel":
 "#print one_div_mul_cancel /-\ntheorem one_div_mul_cancel (h : a ≠ 0) : 1 / a * a = 1 :=\n  h.is_unit.one_div_mul_cancel\n#align one_div_mul_cancel one_div_mul_cancel\n-/\n\n",
 "mul_one_div_cancel":
 "#print mul_one_div_cancel /-\ntheorem mul_one_div_cancel (h : a ≠ 0) : a * (1 / a) = 1 :=\n  h.is_unit.mul_one_div_cancel\n#align mul_one_div_cancel mul_one_div_cancel\n-/\n\n",
 "mul_mul_div":
 "#print mul_mul_div /-\ntheorem mul_mul_div (a : G₀) (hb : b ≠ 0) : a = a * b * (1 / b) :=\n  (hb.is_unit.mul_mul_div _).symm\n#align mul_mul_div mul_mul_div\n-/\n\n",
 "mul_inv_eq_one₀":
 "#print mul_inv_eq_one₀ /-\ntheorem mul_inv_eq_one₀ (hb : b ≠ 0) : a * b⁻¹ = 1 ↔ a = b :=\n  hb.is_unit.mul_inv_eq_one\n#align mul_inv_eq_one₀ mul_inv_eq_one₀\n-/\n\n",
 "mul_inv_eq_iff_eq_mul₀":
 "#print mul_inv_eq_iff_eq_mul₀ /-\ntheorem mul_inv_eq_iff_eq_mul₀ (hb : b ≠ 0) : a * b⁻¹ = c ↔ a = c * b :=\n  hb.is_unit.mul_inv_eq_iff_eq_mul\n#align mul_inv_eq_iff_eq_mul₀ mul_inv_eq_iff_eq_mul₀\n-/\n\n",
 "mul_eq_one_iff_inv_eq₀":
 "#print mul_eq_one_iff_inv_eq₀ /-\ntheorem mul_eq_one_iff_inv_eq₀ (ha : a ≠ 0) : a * b = 1 ↔ a⁻¹ = b :=\n  ha.is_unit.mul_eq_one_iff_inv_eq\n#align mul_eq_one_iff_inv_eq₀ mul_eq_one_iff_inv_eq₀\n-/\n\n",
 "mul_eq_one_iff_eq_inv₀":
 "#print mul_eq_one_iff_eq_inv₀ /-\ntheorem mul_eq_one_iff_eq_inv₀ (hb : b ≠ 0) : a * b = 1 ↔ a = b⁻¹ :=\n  hb.is_unit.mul_eq_one_iff_eq_inv\n#align mul_eq_one_iff_eq_inv₀ mul_eq_one_iff_eq_inv₀\n-/\n\n",
 "mul_eq_mul_of_div_eq_div":
 "#print mul_eq_mul_of_div_eq_div /-\ntheorem mul_eq_mul_of_div_eq_div (a : G₀) {b : G₀} (c : G₀) {d : G₀} (hb : b ≠ 0) (hd : d ≠ 0) (h : a / b = c / d) :\n    a * d = c * b := by rw [← mul_one a, ← div_self hb, ← mul_comm_div, h, div_mul_eq_mul_div, div_mul_cancel _ hd]\n#align mul_eq_mul_of_div_eq_div mul_eq_mul_of_div_eq_div\n-/\n\n",
 "mul_div_mul_right":
 "#print mul_div_mul_right /-\ntheorem mul_div_mul_right (a b : G₀) (hc : c ≠ 0) : a * c / (b * c) = a / b :=\n  hc.is_unit.mul_div_mul_right _ _\n#align mul_div_mul_right mul_div_mul_right\n-/\n\n",
 "mul_div_mul_left":
 "#print mul_div_mul_left /-\ntheorem mul_div_mul_left (a b : G₀) (hc : c ≠ 0) : c * a / (c * b) = a / b :=\n  hc.is_unit.mul_div_mul_left _ _\n#align mul_div_mul_left mul_div_mul_left\n-/\n\n",
 "mul_div_cancel_of_imp'":
 "#print mul_div_cancel_of_imp' /-\ntheorem mul_div_cancel_of_imp' {a b : G₀} (h : b = 0 → a = 0) : b * (a / b) = a := by\n  rw [mul_comm, div_mul_cancel_of_imp h]\n#align mul_div_cancel_of_imp' mul_div_cancel_of_imp'\n-/\n\n",
 "mul_div_cancel_of_imp":
 "#print mul_div_cancel_of_imp /-\ntheorem mul_div_cancel_of_imp {a b : G₀} (h : b = 0 → a = 0) : a * b / b = a :=\n  by_cases (fun hb : b = 0 => by simp [*]) (mul_div_cancel a)\n#align mul_div_cancel_of_imp mul_div_cancel_of_imp\n-/\n\n",
 "mul_div_cancel_left_of_imp":
 "#print mul_div_cancel_left_of_imp /-\ntheorem mul_div_cancel_left_of_imp {a b : G₀} (h : a = 0 → b = 0) : a * b / a = b := by\n  rw [mul_comm, mul_div_cancel_of_imp h]\n#align mul_div_cancel_left_of_imp mul_div_cancel_left_of_imp\n-/\n\n",
 "mul_div_cancel_left":
 "#print mul_div_cancel_left /-\ntheorem mul_div_cancel_left (b : G₀) (ha : a ≠ 0) : a * b / a = b :=\n  ha.is_unit.mul_div_cancel_left _\n#align mul_div_cancel_left mul_div_cancel_left\n-/\n\n",
 "mul_div_cancel'":
 "#print mul_div_cancel' /-\ntheorem mul_div_cancel' (a : G₀) (hb : b ≠ 0) : b * (a / b) = a :=\n  hb.is_unit.mul_div_cancel' _\n#align mul_div_cancel' mul_div_cancel'\n-/\n\n",
 "mul_div_cancel":
 "#print mul_div_cancel /-\n@[simp]\ntheorem mul_div_cancel (a : G₀) (h : b ≠ 0) : a * b / b = a :=\n  h.is_unit.mul_div_cancel _\n#align mul_div_cancel mul_div_cancel\n-/\n\n",
 "map_ne_zero":
 "#print map_ne_zero /-\ntheorem map_ne_zero : f a ≠ 0 ↔ a ≠ 0 :=\n  ⟨fun hfa ha => hfa <| ha.symm ▸ map_zero f, fun ha => ((IsUnit.mk0 a ha).map f).ne_zero⟩\n#align map_ne_zero map_ne_zero\n-/\n\n",
 "map_inv₀":
 "#print map_inv₀ /-\n/-- A monoid homomorphism between groups with zeros sending `0` to `0` sends `a⁻¹` to `(f a)⁻¹`. -/\n@[simp]\ntheorem map_inv₀ : f a⁻¹ = (f a)⁻¹ := by\n  by_cases h : a = 0; · simp [h]\n  apply eq_inv_of_mul_eq_one_left\n  rw [← map_mul, inv_mul_cancel h, map_one]\n#align map_inv₀ map_inv₀\n-/\n\n",
 "map_eq_zero":
 "#print map_eq_zero /-\n@[simp]\ntheorem map_eq_zero : f a = 0 ↔ a = 0 :=\n  not_iff_not.1 (map_ne_zero f)\n#align map_eq_zero map_eq_zero\n-/\n\n",
 "map_div₀":
 "#print map_div₀ /-\n@[simp]\ntheorem map_div₀ : f (a / b) = f a / f b :=\n  map_div' f (map_inv₀ f) a b\n#align map_div₀ map_div₀\n-/\n\n",
 "inverse_apply":
 "#print MonoidWithZero.inverse_apply /-\n@[simp]\ntheorem MonoidWithZero.inverse_apply {M : Type _} [comm_monoid_with_zero M] (a : M) :\n    MonoidWithZero.inverse a = Ring.inverse a :=\n  rfl\n#align monoid_with_zero.inverse_apply MonoidWithZero.inverse_apply\n-/\n\n",
 "inv_mul_eq_one₀":
 "#print inv_mul_eq_one₀ /-\ntheorem inv_mul_eq_one₀ (ha : a ≠ 0) : a⁻¹ * b = 1 ↔ a = b :=\n  ha.is_unit.inv_mul_eq_one\n#align inv_mul_eq_one₀ inv_mul_eq_one₀\n-/\n\n",
 "inv_mul_eq_iff_eq_mul₀":
 "#print inv_mul_eq_iff_eq_mul₀ /-\ntheorem inv_mul_eq_iff_eq_mul₀ (ha : a ≠ 0) : a⁻¹ * b = c ↔ b = a * c :=\n  ha.is_unit.inv_mul_eq_iff_eq_mul\n#align inv_mul_eq_iff_eq_mul₀ inv_mul_eq_iff_eq_mul₀\n-/\n\n",
 "eq_on_inv₀":
 "#print eq_on_inv₀ /-\ntheorem eq_on_inv₀ (f g : F') (h : f a = g a) : f a⁻¹ = g a⁻¹ :=\n  by\n  rcases eq_or_ne a 0 with (rfl | ha)\n  · rw [inv_zero, map_zero, map_zero]\n  · exact (IsUnit.mk0 a ha).eq_on_inv f g h\n#align eq_on_inv₀ eq_on_inv₀\n-/\n\n",
 "eq_mul_inv_iff_mul_eq₀":
 "#print eq_mul_inv_iff_mul_eq₀ /-\ntheorem eq_mul_inv_iff_mul_eq₀ (hc : c ≠ 0) : a = b * c⁻¹ ↔ a * c = b :=\n  hc.is_unit.eq_mul_inv_iff_mul_eq\n#align eq_mul_inv_iff_mul_eq₀ eq_mul_inv_iff_mul_eq₀\n-/\n\n",
 "eq_inv_mul_iff_mul_eq₀":
 "#print eq_inv_mul_iff_mul_eq₀ /-\ntheorem eq_inv_mul_iff_mul_eq₀ (hb : b ≠ 0) : a = b⁻¹ * c ↔ b * a = c :=\n  hb.is_unit.eq_inv_mul_iff_mul_eq\n#align eq_inv_mul_iff_mul_eq₀ eq_inv_mul_iff_mul_eq₀\n-/\n\n",
 "eq_div_of_mul_eq":
 "#print eq_div_of_mul_eq /-\ntheorem eq_div_of_mul_eq (hc : c ≠ 0) : a * c = b → a = b / c :=\n  hc.is_unit.eq_div_of_mul_eq\n#align eq_div_of_mul_eq eq_div_of_mul_eq\n-/\n\n",
 "eq_div_iff_mul_eq":
 "#print eq_div_iff_mul_eq /-\ntheorem eq_div_iff_mul_eq (hc : c ≠ 0) : a = b / c ↔ a * c = b :=\n  hc.is_unit.eq_div_iff\n#align eq_div_iff_mul_eq eq_div_iff_mul_eq\n-/\n\n",
 "eq_div_iff":
 "#print eq_div_iff /-\n@[field_simps]\ntheorem eq_div_iff (hb : b ≠ 0) : c = a / b ↔ c * b = a :=\n  hb.is_unit.eq_div_iff\n#align eq_div_iff eq_div_iff\n-/\n\n",
 "divp_mk0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ₚ » -/\n#print divp_mk0 /-\n@[simp]\ntheorem divp_mk0 (a : G₀) {b : G₀} (hb : b ≠ 0) : «expr /ₚ » a (Units.mk0 b hb) = a / b :=\n  divp_eq_div _ _\n#align divp_mk0 divp_mk0\n-/\n\n",
 "div_self":
 "#print div_self /-\n/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[simp]\ntheorem div_self (h : a ≠ 0) : a / a = 1 :=\n  h.is_unit.div_self\n#align div_self div_self\n-/\n\n",
 "div_mul_right":
 "#print div_mul_right /-\n-- comm\ntheorem div_mul_right (b : G₀) (ha : a ≠ 0) : a / (a * b) = 1 / b :=\n  ha.is_unit.div_mul_right _\n#align div_mul_right div_mul_right\n-/\n\n",
 "div_mul_left":
 "#print div_mul_left /-\ntheorem div_mul_left (hb : b ≠ 0) : b / (a * b) = 1 / a :=\n  hb.is_unit.div_mul_left\n#align div_mul_left div_mul_left\n-/\n\n",
 "div_mul_div_cancel":
 "#print div_mul_div_cancel /-\ntheorem div_mul_div_cancel (a : G₀) (hc : c ≠ 0) : a / c * (c / b) = a / b := by\n  rw [← mul_div_assoc, div_mul_cancel _ hc]\n#align div_mul_div_cancel div_mul_div_cancel\n-/\n\n",
 "div_mul_cancel_of_imp":
 "#print div_mul_cancel_of_imp /-\ntheorem div_mul_cancel_of_imp {a b : G₀} (h : b = 0 → a = 0) : a / b * b = a :=\n  by_cases (fun hb : b = 0 => by simp [*]) (div_mul_cancel a)\n#align div_mul_cancel_of_imp div_mul_cancel_of_imp\n-/\n\n",
 "div_mul_cancel":
 "#print div_mul_cancel /-\n@[simp]\ntheorem div_mul_cancel (a : G₀) (h : b ≠ 0) : a / b * b = a :=\n  h.is_unit.div_mul_cancel _\n#align div_mul_cancel div_mul_cancel\n-/\n\n",
 "div_left_inj'":
 "#print div_left_inj' /-\ntheorem div_left_inj' (hc : c ≠ 0) : a / c = b / c ↔ a = b :=\n  hc.is_unit.div_left_inj\n#align div_left_inj' div_left_inj'\n-/\n\n",
 "div_helper":
 "#print div_helper /-\ntheorem div_helper (b : G₀) (h : a ≠ 0) : 1 / (a * b) * a = 1 / b := by\n  rw [div_mul_eq_mul_div, one_mul, div_mul_right _ h]\n#align div_helper div_helper\n-/\n\n",
 "div_eq_one_iff_eq":
 "#print div_eq_one_iff_eq /-\ntheorem div_eq_one_iff_eq (hb : b ≠ 0) : a / b = 1 ↔ a = b :=\n  hb.is_unit.div_eq_one_iff_eq\n#align div_eq_one_iff_eq div_eq_one_iff_eq\n-/\n\n",
 "div_eq_of_eq_mul":
 "#print div_eq_of_eq_mul /-\ntheorem div_eq_of_eq_mul (hb : b ≠ 0) : a = c * b → a / b = c :=\n  hb.is_unit.div_eq_of_eq_mul\n#align div_eq_of_eq_mul div_eq_of_eq_mul\n-/\n\n",
 "div_eq_iff_mul_eq":
 "#print div_eq_iff_mul_eq /-\ntheorem div_eq_iff_mul_eq (hb : b ≠ 0) : a / b = c ↔ c * b = a :=\n  hb.is_unit.div_eq_iff.trans eq_comm\n#align div_eq_iff_mul_eq div_eq_iff_mul_eq\n-/\n\n",
 "div_eq_iff":
 "#print div_eq_iff /-\n@[field_simps]\ntheorem div_eq_iff (hb : b ≠ 0) : a / b = c ↔ a = c * b :=\n  hb.is_unit.div_eq_iff\n#align div_eq_iff div_eq_iff\n-/\n\n",
 "div_eq_div_iff":
 "#print div_eq_div_iff /-\n@[field_simps]\ntheorem div_eq_div_iff (hb : b ≠ 0) (hd : d ≠ 0) : a / b = c / d ↔ a * d = c * b :=\n  hb.is_unit.div_eq_div_iff hd.is_unit\n#align div_eq_div_iff div_eq_div_iff\n-/\n\n",
 "div_div_div_cancel_right":
 "#print div_div_div_cancel_right /-\ntheorem div_div_div_cancel_right (a : G₀) (hc : c ≠ 0) : a / c / (b / c) = a / b := by\n  rw [div_div_eq_mul_div, div_mul_cancel _ hc]\n#align div_div_div_cancel_right div_div_div_cancel_right\n-/\n\n",
 "div_div_cancel'":
 "#print div_div_cancel' /-\ntheorem div_div_cancel' (ha : a ≠ 0) : a / (a / b) = b :=\n  ha.is_unit.div_div_cancel\n#align div_div_cancel' div_div_cancel'\n-/\n\n",
 "coe_inverse":
 "#print MonoidWithZero.coe_inverse /-\n@[simp]\ntheorem MonoidWithZero.coe_inverse {M : Type _} [comm_monoid_with_zero M] :\n    (MonoidWithZero.inverse : M → M) = Ring.inverse :=\n  rfl\n#align monoid_with_zero.coe_inverse MonoidWithZero.coe_inverse\n-/\n\n"}