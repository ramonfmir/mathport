{"zero_dvd_iff":
 "#print zero_dvd_iff /-\n/-- Given an element `a` of a commutative semigroup with zero, there exists another element whose\n    product with zero equals `a` iff `a` equals zero. -/\n@[simp]\ntheorem zero_dvd_iff : 0 ∣ a ↔ a = 0 :=\n  ⟨eq_zero_of_zero_dvd, fun h => by\n    rw [h]\n    use 0\n    simp⟩\n#align zero_dvd_iff zero_dvd_iff\n-/\n\n",
 "ne_zero_of_dvd_ne_zero":
 "#print ne_zero_of_dvd_ne_zero /-\ntheorem ne_zero_of_dvd_ne_zero {p q : α} (h₁ : q ≠ 0) (h₂ : p ∣ q) : p ≠ 0 :=\n  by\n  rcases h₂ with ⟨u, rfl⟩\n  exact left_ne_zero_of_mul h₁\n#align ne_zero_of_dvd_ne_zero ne_zero_of_dvd_ne_zero\n-/\n\n",
 "mul_dvd_mul_iff_right":
 "#print mul_dvd_mul_iff_right /-\n/-- Given two elements `a`, `b` of a commutative `cancel_monoid_with_zero` and a nonzero\n  element `c`, `a*c` divides `b*c` iff `a` divides `b`. -/\ntheorem mul_dvd_mul_iff_right [CancelCommMonoidWithZero α] {a b c : α} (hc : c ≠ 0) : a * c ∣ b * c ↔ a ∣ b :=\n  exists_congr fun d => by rw [mul_right_comm, mul_left_inj' hc]\n#align mul_dvd_mul_iff_right mul_dvd_mul_iff_right\n-/\n\n",
 "mul_dvd_mul_iff_left":
 "#print mul_dvd_mul_iff_left /-\n/-- Given two elements `b`, `c` of a `cancel_monoid_with_zero` and a nonzero element `a`,\n `a*b` divides `a*c` iff `b` divides `c`. -/\ntheorem mul_dvd_mul_iff_left [CancelMonoidWithZero α] {a b c : α} (ha : a ≠ 0) : a * b ∣ a * c ↔ b ∣ c :=\n  exists_congr fun d => by rw [mul_assoc, mul_right_inj' ha]\n#align mul_dvd_mul_iff_left mul_dvd_mul_iff_left\n-/\n\n",
 "eq_zero_of_zero_dvd":
 "#print eq_zero_of_zero_dvd /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Floris van Doorn, Amelia Livingston, Yury Kudryashov,\nNeil Strickland, Aaron Anderson\n-/\ntheorem eq_zero_of_zero_dvd (h : 0 ∣ a) : a = 0 :=\n  Dvd.elim h fun c H' => H'.trans (MulZeroClass.zero_mul c)\n#align eq_zero_of_zero_dvd eq_zero_of_zero_dvd\n-/\n\n",
 "eq_of_forall_dvd'":
 "#print eq_of_forall_dvd' /-\ntheorem eq_of_forall_dvd' (h : ∀ c, c ∣ a ↔ c ∣ b) : a = b :=\n  ((h _).1 dvd_rfl).antisymm <| (h _).2 dvd_rfl\n#align eq_of_forall_dvd' eq_of_forall_dvd'\n-/\n\n",
 "eq_of_forall_dvd":
 "#print eq_of_forall_dvd /-\ntheorem eq_of_forall_dvd (h : ∀ c, a ∣ c ↔ b ∣ c) : a = b :=\n  ((h _).2 dvd_rfl).antisymm <| (h _).1 dvd_rfl\n#align eq_of_forall_dvd eq_of_forall_dvd\n-/\n\n",
 "dvd_zero":
 "#print dvd_zero /-\n@[simp]\ntheorem dvd_zero (a : α) : a ∣ 0 :=\n  Dvd.intro 0 (by simp)\n#align dvd_zero dvd_zero\n-/\n\n",
 "dvd_antisymm'":
 "#print dvd_antisymm' /-\n--This lemma is in core, so we protect it here\ntheorem dvd_antisymm' : a ∣ b → b ∣ a → b = a :=\n  flip dvd_antisymm\n#align dvd_antisymm' dvd_antisymm'\n-/\n\n",
 "dvd_antisymm":
 "#print dvd_antisymm /-\ntheorem dvd_antisymm : a ∣ b → b ∣ a → a = b :=\n  by\n  rintro ⟨c, rfl⟩ ⟨d, hcd⟩\n  rw [mul_assoc, eq_comm, mul_right_eq_self₀, mul_eq_one] at hcd\n  obtain ⟨rfl, -⟩ | rfl := hcd <;> simp\n#align dvd_antisymm dvd_antisymm\n-/\n\n",
 "dvd_and_not_dvd_iff":
 "#print dvd_and_not_dvd_iff /-\ntheorem dvd_and_not_dvd_iff [CancelCommMonoidWithZero α] {x y : α} : x ∣ y ∧ ¬y ∣ x ↔ DvdNotUnit x y :=\n  ⟨fun ⟨⟨d, hd⟩, hyx⟩ =>\n    ⟨fun hx0 => by simpa [hx0] using hyx,\n      ⟨d, mt isUnit_iff_dvd_one.1 fun ⟨e, he⟩ => hyx ⟨e, by rw [hd, mul_assoc, ← he, mul_one]⟩, hd⟩⟩,\n    fun ⟨hx0, d, hdu, hdx⟩ =>\n    ⟨⟨d, hdx⟩, fun ⟨e, he⟩ =>\n      hdu\n        (isUnit_of_dvd_one _\n          ⟨e,\n            mul_left_cancel₀ hx0 <| by\n              conv =>\n                  lhs\n                  rw [he, hdx] <;>\n                simp [mul_assoc]⟩)⟩⟩\n#align dvd_and_not_dvd_iff dvd_and_not_dvd_iff\n-/\n\n",
 "dvdNotUnit_of_dvd_of_not_dvd":
 "#print dvdNotUnit_of_dvd_of_not_dvd /-\ntheorem dvdNotUnit_of_dvd_of_not_dvd {a b : α} (hd : a ∣ b) (hnd : ¬b ∣ a) : DvdNotUnit a b :=\n  by\n  constructor\n  · rintro rfl\n    exact hnd (dvd_zero _)\n  · rcases hd with ⟨c, rfl⟩\n    refine' ⟨c, _, rfl⟩\n    rintro ⟨u, rfl⟩\n    simpa using hnd\n#align dvd_not_unit_of_dvd_of_not_dvd dvdNotUnit_of_dvd_of_not_dvd\n-/\n\n"}