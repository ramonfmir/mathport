{"zero_right":
 "/-\nCopyright (c) 2020 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-/\n@[simp]\ntheorem zero_right [MulZeroClass G₀] (a : G₀) : SemiconjBy a 0 0 := by\n  simp only [SemiconjBy, MulZeroClass.mul_zero, MulZeroClass.zero_mul]\n#align zero_right zero_right\n\n",
 "zero_left":
 "@[simp]\ntheorem zero_left [MulZeroClass G₀] (x y : G₀) : SemiconjBy 0 x y := by\n  simp only [SemiconjBy, MulZeroClass.mul_zero, MulZeroClass.zero_mul]\n#align zero_left zero_left\n\n",
 "inv_symm_left₀":
 "theorem inv_symm_left₀ (h : SemiconjBy a x y) : SemiconjBy a⁻¹ y x :=\n  SemiconjBy.inv_symm_left_iff₀.2 h\n#align inv_symm_left₀ inv_symm_left₀\n\n",
 "inv_symm_left_iff₀":
 "@[simp]\ntheorem inv_symm_left_iff₀ : SemiconjBy a⁻¹ x y ↔ SemiconjBy a y x :=\n  by_cases (fun ha : a = 0 => by simp only [ha, inv_zero, SemiconjBy.zero_left]) fun ha =>\n    @units_inv_symm_left_iff _ _ (Units.mk0 a ha) _ _\n#align inv_symm_left_iff₀ inv_symm_left_iff₀\n\n",
 "inv_right₀":
 "theorem inv_right₀ (h : SemiconjBy a x y) : SemiconjBy a x⁻¹ y⁻¹ :=\n  by\n  by_cases ha : a = 0\n  · simp only [ha, zero_left]\n  by_cases hx : x = 0\n  · subst x\n    simp only [SemiconjBy, MulZeroClass.mul_zero, @eq_comm _ _ (y * a), mul_eq_zero] at h\n    simp [h.resolve_right ha]\n  · have := mul_ne_zero ha hx\n    rw [h.eq, mul_ne_zero_iff] at this\n    exact @units_inv_right _ _ _ (Units.mk0 x hx) (Units.mk0 y this.1) h\n#align inv_right₀ inv_right₀\n\n",
 "inv_right_iff₀":
 "@[simp]\ntheorem inv_right_iff₀ : SemiconjBy a x⁻¹ y⁻¹ ↔ SemiconjBy a x y :=\n  ⟨fun h => inv_inv x ▸ inv_inv y ▸ h.inv_right₀, inv_right₀⟩\n#align inv_right_iff₀ inv_right_iff₀\n\n",
 "div_right":
 "theorem div_right (h : SemiconjBy a x y) (h' : SemiconjBy a x' y') : SemiconjBy a (x / x') (y / y') :=\n  by\n  rw [div_eq_mul_inv, div_eq_mul_inv]\n  exact h.mul_right h'.inv_right₀\n#align div_right div_right\n\n"}