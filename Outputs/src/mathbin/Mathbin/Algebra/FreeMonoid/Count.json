{"countp_of'":
 "theorem countp_of' (x : α) : countp p (of x) = if p x then Multiplicative.ofAdd 1 else Multiplicative.ofAdd 0 :=\n  rfl\n#align countp_of' countp_of'\n\n",
 "countp_of":
 "theorem countp_of (x : α) : countp p (of x) = if p x then Multiplicative.ofAdd 1 else 1 := by\n  rw [countp_of', ofAdd_zero]\n#align countp_of countp_of\n\n",
 "countp_apply":
 "-- `rfl` is not transitive\ntheorem countp_apply (l : FreeAddMonoid α) : countp p l = Multiplicative.ofAdd (List.countp p l) :=\n  rfl\n#align countp_apply countp_apply\n\n",
 "count_of":
 "theorem count_of [DecidableEq α] (x y : α) :\n    count x (of y) = @Pi.mulSingle α (fun _ => Multiplicative ℕ) _ _ x (Multiplicative.ofAdd 1) y := by\n  simp only [count, countp_of, Pi.mulSingle_apply, eq_comm]\n#align count_of count_of\n\n",
 "count_apply":
 "theorem count_apply [DecidableEq α] (x : α) (l : FreeAddMonoid α) : count x l = Multiplicative.ofAdd (List.count x l) :=\n  rfl\n#align count_apply count_apply\n\n"}