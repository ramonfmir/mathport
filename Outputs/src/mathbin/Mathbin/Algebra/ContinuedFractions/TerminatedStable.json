{"terminated_stable":
 "/-\nCopyright (c) 2020 Kevin Kappelmann. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin Kappelmann\n-/\n/-- If a gcf terminated at position `n`, it also terminated at `m ≥ n`.-/\ntheorem terminated_stable (n_le_m : n ≤ m) (terminated_at_n : g.terminated_at n) : g.terminated_at m :=\n  g.s.terminated_stable n_le_m terminated_at_n\n#align terminated_stable terminated_stable\n\n",
 "numerators_stable_of_terminated":
 "theorem numerators_stable_of_terminated (n_le_m : n ≤ m) (terminated_at_n : g.terminated_at n) :\n    g.numerators m = g.numerators n := by\n  simp only [num_eq_conts_a, continuants_stable_of_terminated n_le_m terminated_at_n]\n#align numerators_stable_of_terminated numerators_stable_of_terminated\n\n",
 "denominators_stable_of_terminated":
 "theorem denominators_stable_of_terminated (n_le_m : n ≤ m) (terminated_at_n : g.terminated_at n) :\n    g.denominators m = g.denominators n := by\n  simp only [denom_eq_conts_b, continuants_stable_of_terminated n_le_m terminated_at_n]\n#align denominators_stable_of_terminated denominators_stable_of_terminated\n\n",
 "convergents_stable_of_terminated":
 "theorem convergents_stable_of_terminated (n_le_m : n ≤ m) (terminated_at_n : g.terminated_at n) :\n    g.convergents m = g.convergents n := by\n  simp only [convergents, denominators_stable_of_terminated n_le_m terminated_at_n,\n    numerators_stable_of_terminated n_le_m terminated_at_n]\n#align convergents_stable_of_terminated convergents_stable_of_terminated\n\n",
 "convergents'_stable_of_terminated":
 "theorem convergents'_stable_of_terminated (n_le_m : n ≤ m) (terminated_at_n : g.terminated_at n) :\n    g.convergents' m = g.convergents' n := by\n  simp only [convergents', convergents'_aux_stable_of_terminated n_le_m terminated_at_n]\n#align convergents'_stable_of_terminated convergents'_stable_of_terminated\n\n",
 "convergents'_aux_stable_step_of_terminated":
 "theorem convergents'_aux_stable_step_of_terminated {s : seq <| pair K} (terminated_at_n : s.terminated_at n) :\n    convergents'_aux s (n + 1) = convergents'_aux s n :=\n  by\n  change s.nth n = none at terminated_at_n\n  induction' n with n IH generalizing s\n  case zero => simp only [convergents'_aux, terminated_at_n, seq.head]\n  case succ =>\n    cases' s_head_eq : s.head with gp_head\n    case none => simp only [convergents'_aux, s_head_eq]\n    case some =>\n      have : s.tail.terminated_at n := by simp only [seq.terminated_at, s.nth_tail, terminated_at_n]\n      simp only [convergents'_aux, s_head_eq, IH this]\n#align convergents'_aux_stable_step_of_terminated convergents'_aux_stable_step_of_terminated\n\n",
 "convergents'_aux_stable_of_terminated":
 "theorem convergents'_aux_stable_of_terminated {s : seq <| pair K} (n_le_m : n ≤ m)\n    (terminated_at_n : s.terminated_at n) : convergents'_aux s m = convergents'_aux s n :=\n  by\n  induction' n_le_m with m n_le_m IH\n  · rfl\n  · refine' (convergents'_aux_stable_step_of_terminated _).trans IH\n    exact s.terminated_stable n_le_m terminated_at_n\n#align convergents'_aux_stable_of_terminated convergents'_aux_stable_of_terminated\n\n",
 "continuants_stable_of_terminated":
 "theorem continuants_stable_of_terminated (n_le_m : n ≤ m) (terminated_at_n : g.terminated_at n) :\n    g.continuants m = g.continuants n := by\n  simp only [nth_cont_eq_succ_nth_cont_aux,\n    continuants_aux_stable_of_terminated (nat.pred_le_iff.elim_left n_le_m) terminated_at_n]\n#align continuants_stable_of_terminated continuants_stable_of_terminated\n\n",
 "continuants_aux_stable_step_of_terminated":
 "theorem continuants_aux_stable_step_of_terminated (terminated_at_n : g.terminated_at n) :\n    g.continuants_aux (n + 2) = g.continuants_aux (n + 1) :=\n  by\n  rw [terminated_at_iff_s_none] at terminated_at_n\n  simp only [terminated_at_n, continuants_aux]\n#align continuants_aux_stable_step_of_terminated continuants_aux_stable_step_of_terminated\n\n",
 "continuants_aux_stable_of_terminated":
 "theorem continuants_aux_stable_of_terminated (n_lt_m : n < m) (terminated_at_n : g.terminated_at n) :\n    g.continuants_aux m = g.continuants_aux (n + 1) :=\n  by\n  refine' Nat.le_induction rfl (fun k hnk hk => _) _ n_lt_m\n  rcases Nat.exists_eq_add_of_lt hnk with ⟨k, rfl⟩\n  refine' (continuants_aux_stable_step_of_terminated _).trans hk\n  exact terminated_stable (nat.le_add_right _ _) terminated_at_n\n#align continuants_aux_stable_of_terminated continuants_aux_stable_of_terminated\n\n"}