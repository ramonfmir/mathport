{"of_is_simple_continued_fraction":
 "/-\nCopyright (c) 2021 Kevin Kappelmann. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin Kappelmann\n-/\ntheorem generalized_continued_fraction.of_is_simple_continued_fraction : (of v).is_simple_continued_fraction :=\n  fun _ _ nth_part_num_eq => of_part_num_eq_one nth_part_num_eq\n#align generalized_continued_fraction.of_is_simple_continued_fraction generalized_continued_fraction.of_is_simple_continued_fraction\n\n",
 "of_is_continued_fraction":
 "theorem simple_continued_fraction.of_is_continued_fraction : (simple_continued_fraction.of v).is_continued_fraction :=\n  fun _ denom nth_part_denom_eq => lt_of_lt_of_le zero_lt_one (of_one_le_nth_part_denom nth_part_denom_eq)\n#align simple_continued_fraction.of_is_continued_fraction simple_continued_fraction.of_is_continued_fraction\n\n",
 "of_convergents_eq_convergents'":
 "theorem of_convergents_eq_convergents' : (of v).convergents = (of v).convergents' :=\n  @ContinuedFraction.convergents_eq_convergents' _ _ (continued_fraction.of v)\n#align of_convergents_eq_convergents' of_convergents_eq_convergents'\n\n",
 "of_convergence_epsilon":
 "theorem of_convergence_epsilon : ∀ ε > (0 : K), ∃ N : ℕ, ∀ n ≥ N, |v - (of v).convergents n| < ε :=\n  by\n  intro ε ε_pos\n  -- use the archimedean property to obtian a suitable N\n  rcases(exists_nat_gt (1 / ε) : ∃ N' : ℕ, 1 / ε < N') with ⟨N', one_div_ε_lt_N'⟩\n  let N := max N' 5\n  -- set minimum to 5 to have N ≤ fib N work\n  exists N\n  intro n n_ge_N\n  let g := of v\n  cases' decidable.em (g.terminated_at n) with terminated_at_n not_terminated_at_n\n  · have : v = g.convergents n := of_correctness_of_terminated_at terminated_at_n\n    have : v - g.convergents n = 0 := sub_eq_zero.elim_right this\n    rw [this]\n    exact_mod_cast ε_pos\n  · let B := g.denominators n\n    let nB := g.denominators (n + 1)\n    have abs_v_sub_conv_le : |v - g.convergents n| ≤ 1 / (B * nB) := abs_sub_convergents_le not_terminated_at_n\n    suffices : 1 / (B * nB) < ε\n    exact lt_of_le_of_lt abs_v_sub_conv_le this\n    -- show that `0 < (B * nB)` and then multiply by `B * nB` to get rid of the division\n    have nB_ineq : (fib (n + 2) : K) ≤ nB :=\n      haveI : ¬g.terminated_at (n + 1 - 1) := not_terminated_at_n\n      succ_nth_fib_le_of_nth_denom (or.inr this)\n    have B_ineq : (fib (n + 1) : K) ≤ B :=\n      haveI : ¬g.terminated_at (n - 1) := mt (terminated_stable n.pred_le) not_terminated_at_n\n      succ_nth_fib_le_of_nth_denom (or.inr this)\n    have zero_lt_B : 0 < B :=\n      haveI : (0 : K) < fib (n + 1) := by exact_mod_cast fib_pos n.zero_lt_succ\n      lt_of_lt_of_le this B_ineq\n    have zero_lt_mul_conts : 0 < B * nB :=\n      by\n      have : 0 < nB :=\n        haveI : (0 : K) < fib (n + 2) := by exact_mod_cast fib_pos (n + 1).zero_lt_succ\n        lt_of_lt_of_le this nB_ineq\n      solve_by_elim [mul_pos]\n    suffices : 1 < ε * (B * nB)\n    exact (div_lt_iff zero_lt_mul_conts).elim_right this\n    -- use that `N ≥ n` was obtained from the archimedean property to show the following\n    have one_lt_ε_mul_N : 1 < ε * n :=\n      by\n      have one_lt_ε_mul_N' : 1 < ε * (N' : K) := (div_lt_iff' ε_pos).elim_left one_div_ε_lt_N'\n      have : (N' : K) ≤ N := by exact_mod_cast le_max_left _ _\n      have : ε * N' ≤ ε * n := (mul_le_mul_left ε_pos).elim_right (le_trans this (by exact_mod_cast n_ge_N))\n      exact lt_of_lt_of_le one_lt_ε_mul_N' this\n    suffices : ε * n ≤ ε * (B * nB)\n    exact lt_of_lt_of_le one_lt_ε_mul_N this\n    -- cancel `ε`\n    suffices : (n : K) ≤ B * nB\n    exact (mul_le_mul_left ε_pos).elim_right this\n    show (n : K) ≤ B * nB\n    calc\n      (n : K) ≤ fib n := by exact_mod_cast le_fib_self <| le_trans (le_max_right N' 5) n_ge_N\n      _ ≤ fib (n + 1) := by exact_mod_cast fib_le_fib_succ\n      _ ≤ fib (n + 1) * fib (n + 1) := by exact_mod_cast (fib (n + 1)).le_mul_self\n      _ ≤ fib (n + 1) * fib (n + 2) :=\n        (mul_le_mul_of_nonneg_left (by exact_mod_cast fib_le_fib_succ) (by exact_mod_cast (fib (n + 1)).zero_le))\n      _ ≤ B * nB := mul_le_mul B_ineq nB_ineq (by exact_mod_cast (fib (n + 2)).zero_le) (le_of_lt zero_lt_B)\n      \n#align of_convergence_epsilon of_convergence_epsilon\n\n",
 "of_convergence":
 "theorem of_convergence [OrderTopology K] : Filter.Tendsto (of v).convergents Filter.atTop <| nhds v := by\n  simpa [LinearOrderedAddCommGroup.tendsto_nhds, abs_sub_comm] using of_convergence_epsilon v\n#align of_convergence of_convergence\n\n",
 "convergents_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⌊ ⌋» -/\n/-- The recurrence relation for the `convergents` of the continued fraction expansion\nof an element `v` of `K` in terms of the convergents of the inverse of its fractional part.\n-/\ntheorem convergents_succ (n : ℕ) : (of v).convergents (n + 1) = «expr⌊ ⌋» v + 1 / (of (Int.fract v)⁻¹).convergents n :=\n  by rw [of_convergents_eq_convergents', convergents'_succ, of_convergents_eq_convergents']\n#align convergents_succ convergents_succ\n\n"}