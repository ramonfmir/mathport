{"numerators_recurrence":
 "/-- Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂`. -/\ntheorem numerators_recurrence {gp : Pair K} {ppredA predA : K} (succ_nth_s_eq : g.s.nth (n + 1) = some gp)\n    (nth_num_eq : g.numerators n = ppredA) (succ_nth_num_eq : g.numerators (n + 1) = predA) :\n    g.numerators (n + 2) = gp.b * predA + gp.a * ppredA :=\n  by\n  obtain ⟨ppredConts, nth_conts_eq, ⟨rfl⟩⟩ : ∃ conts, g.continuants n = conts ∧ conts.a = ppredA\n  exact exists_conts_a_of_num nth_num_eq\n  obtain ⟨predConts, succ_nth_conts_eq, ⟨rfl⟩⟩ : ∃ conts, g.continuants (n + 1) = conts ∧ conts.a = predA\n  exact exists_conts_a_of_num succ_nth_num_eq\n  rw [num_eq_conts_a, continuants_recurrence succ_nth_s_eq nth_conts_eq succ_nth_conts_eq]\n#align numerators_recurrence numerators_recurrence\n\n",
 "denominators_recurrence":
 "/-- Shows that `Bₙ = bₙ * Bₙ₋₁ + aₙ * Bₙ₋₂`. -/\ntheorem denominators_recurrence {gp : Pair K} {ppredB predB : K} (succ_nth_s_eq : g.s.nth (n + 1) = some gp)\n    (nth_denom_eq : g.denominators n = ppredB) (succ_nth_denom_eq : g.denominators (n + 1) = predB) :\n    g.denominators (n + 2) = gp.b * predB + gp.a * ppredB :=\n  by\n  obtain ⟨ppredConts, nth_conts_eq, ⟨rfl⟩⟩ : ∃ conts, g.continuants n = conts ∧ conts.b = ppredB\n  exact exists_conts_b_of_denom nth_denom_eq\n  obtain ⟨predConts, succ_nth_conts_eq, ⟨rfl⟩⟩ : ∃ conts, g.continuants (n + 1) = conts ∧ conts.b = predB\n  exact exists_conts_b_of_denom succ_nth_denom_eq\n  rw [denom_eq_conts_b, continuants_recurrence succ_nth_s_eq nth_conts_eq succ_nth_conts_eq]\n#align denominators_recurrence denominators_recurrence\n\n",
 "continuants_recurrence_aux":
 "theorem continuants_recurrence_aux {gp ppred pred : Pair K} (nth_s_eq : g.s.nth n = some gp)\n    (nth_conts_aux_eq : g.continuants_aux n = ppred) (succ_nth_conts_aux_eq : g.continuants_aux (n + 1) = pred) :\n    g.continuants (n + 1) = ⟨gp.b * pred.a + gp.a * ppred.a, gp.b * pred.b + gp.a * ppred.b⟩ := by\n  simp [nth_cont_eq_succ_nth_cont_aux, continuants_aux_recurrence nth_s_eq nth_conts_aux_eq succ_nth_conts_aux_eq]\n#align continuants_recurrence_aux continuants_recurrence_aux\n\n",
 "continuants_recurrence":
 "/-- Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂` and `Bₙ = bₙ * Bₙ₋₁ + aₙ * Bₙ₋₂`. -/\ntheorem continuants_recurrence {gp ppred pred : Pair K} (succ_nth_s_eq : g.s.nth (n + 1) = some gp)\n    (nth_conts_eq : g.continuants n = ppred) (succ_nth_conts_eq : g.continuants (n + 1) = pred) :\n    g.continuants (n + 2) = ⟨gp.b * pred.a + gp.a * ppred.a, gp.b * pred.b + gp.a * ppred.b⟩ :=\n  by\n  rw [nth_cont_eq_succ_nth_cont_aux] at nth_conts_eq succ_nth_conts_eq\n  exact continuants_recurrence_aux succ_nth_s_eq nth_conts_eq succ_nth_conts_eq\n#align continuants_recurrence continuants_recurrence\n\n",
 "continuants_aux_recurrence":
 "/-\nCopyright (c) 2019 Kevin Kappelmann. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kevin Kappelmann\n-/\ntheorem continuants_aux_recurrence {gp ppred pred : Pair K} (nth_s_eq : g.s.nth n = some gp)\n    (nth_conts_aux_eq : g.continuants_aux n = ppred) (succ_nth_conts_aux_eq : g.continuants_aux (n + 1) = pred) :\n    g.continuants_aux (n + 2) = ⟨gp.b * pred.a + gp.a * ppred.a, gp.b * pred.b + gp.a * ppred.b⟩ := by\n  simp [*, continuants_aux, next_continuants, next_denominator, next_numerator]\n#align continuants_aux_recurrence continuants_aux_recurrence\n\n"}