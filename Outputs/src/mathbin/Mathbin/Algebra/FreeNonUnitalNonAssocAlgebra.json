{"of_comp_lift":
 "@[simp]\ntheorem of_comp_lift (f : X → A) : lift R f ∘ of R = f :=\n  (lift R).left_inv f\n#align of_comp_lift of_comp_lift\n\n",
 "lift_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙₐ[ ] » -/\n@[simp]\ntheorem lift_unique (f : X → A) (F : «expr →ₙₐ[ ] » (FreeNonUnitalNonAssocAlgebra R X) R A) :\n    F ∘ of R = f ↔ F = lift R f :=\n  (lift R).symm_apply_eq\n#align lift_unique lift_unique\n\n",
 "lift_symm_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙₐ[ ] » -/\n/-\nCopyright (c) 2021 Oliver Nash. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Oliver Nash\n-/\n@[simp]\ntheorem lift_symm_apply (F : «expr →ₙₐ[ ] » (FreeNonUnitalNonAssocAlgebra R X) R A) : (lift R).symm F = F ∘ of R :=\n  rfl\n#align lift_symm_apply lift_symm_apply\n\n",
 "lift_of_apply":
 "@[simp]\ntheorem lift_of_apply (f : X → A) (x) : lift R f (of R x) = f x :=\n  congr_fun (of_comp_lift _ f) x\n#align lift_of_apply lift_of_apply\n\n",
 "lift_comp_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙₐ[ ] » -/\n@[simp]\ntheorem lift_comp_of (F : «expr →ₙₐ[ ] » (FreeNonUnitalNonAssocAlgebra R X) R A) : lift R (F ∘ of R) = F :=\n  (lift R).apply_symm_apply F\n#align lift_comp_of lift_comp_of\n\n",
 "hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₙₐ[ ] » -/\n@[ext]\ntheorem hom_ext {F₁ F₂ : «expr →ₙₐ[ ] » (FreeNonUnitalNonAssocAlgebra R X) R A} (h : ∀ x, F₁ (of R x) = F₂ (of R x)) :\n    F₁ = F₂ :=\n  (lift R).symm.injective <| funext h\n#align hom_ext hom_ext\n\n"}