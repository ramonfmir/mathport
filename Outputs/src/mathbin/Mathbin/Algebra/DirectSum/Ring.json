{"to_semiring_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n@[simp]\ntheorem to_semiring_of (f : ∀ i, «expr →+ » (A i) R) (hone hmul) (i : ι) (x : A i) :\n    to_semiring f hone hmul (of _ i x) = f _ x :=\n  toAddMonoid_of f i x\n#align to_semiring_of to_semiring_of\n\n",
 "to_semiring_coe_add_monoid_hom":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n@[simp]\ntheorem to_semiring_coe_add_monoid_hom (f : ∀ i, «expr →+ » (A i) R) (hone hmul) :\n    (to_semiring f hone hmul :\n        «expr →+ »\n          (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) R) =\n      toAddMonoid f :=\n  rfl\n#align to_semiring_coe_add_monoid_hom to_semiring_coe_add_monoid_hom\n\n",
 "ring_hom_ext'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/-- If two ring homomorphisms from `⨁ i, A i` are equal on each `of A i y`,\nthen they are equal.\n\nSee note [partially-applied ext lemmas]. -/\n@[ext]\ntheorem ring_hom_ext'\n    ⦃F G :\n      «expr →+* »\n        (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) R⦄\n    (h : ∀ i, (↑F : «expr →+ » _ R).comp (of A i) = (↑G : «expr →+ » _ R).comp (of A i)) : F = G :=\n  RingHom.coe_addMonoidHom_injective <| DirectSum.addHom_ext' h\n#align ring_hom_ext' ring_hom_ext'\n\n",
 "ring_hom_ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/-- Two `ring_hom`s out of a direct sum are equal if they agree on the generators. -/\ntheorem ring_hom_ext\n    ⦃f g :\n      «expr →+* »\n        (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) R⦄\n    (h : ∀ i x, f (of A i x) = g (of A i x)) : f = g :=\n  ring_hom_ext' fun i => AddMonoidHom.ext <| h i\n#align ring_hom_ext ring_hom_ext\n\n",
 "one_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n#print one_mul /-\nprivate theorem one_mul\n    (x : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) :\n    1 * x = x :=\n  by\n  suffices\n    mul_hom A 1 =\n      AddMonoidHom.id\n        (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i))\n    from AddMonoidHom.congr_fun this x\n  apply add_hom_ext; intro i xi\n  unfold has_one.one\n  rw [mul_hom_of_of]\n  exact of_eq_of_graded_monoid_eq (one_mul <| GradedMonoid.mk i xi)\n#align one_mul one_mul\n-/\n\n",
 "of_zero_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem of_zero_smul {i} (a : A 0) (b : A i) : of _ _ («expr • » a b) = of _ _ a * of _ _ b :=\n  (of_eq_of_graded_monoid_eq (GradedMonoid.mk_zero_smul a b)).trans (of_mul_of _ _).symm\n#align of_zero_smul of_zero_smul\n\n",
 "of_zero_pow":
 "@[simp]\ntheorem of_zero_pow (a : A 0) : ∀ n : ℕ, of _ 0 (a ^ n) = of _ 0 a ^ n\n  | 0 => by rw [pow_zero, pow_zero, direct_sum.of_zero_one]\n  | n + 1 => by rw [pow_succ, pow_succ, of_zero_mul, of_zero_pow]\n#align of_zero_pow of_zero_pow\n\n",
 "of_zero_one":
 "@[simp]\ntheorem of_zero_one : of _ 0 (1 : A 0) = 1 :=\n  rfl\n#align of_zero_one of_zero_one\n\n",
 "of_zero_mul":
 "@[simp]\ntheorem of_zero_mul (a b : A 0) : of _ 0 (a * b) = of _ 0 a * of _ 0 b :=\n  of_zero_smul A a b\n#align of_zero_mul of_zero_mul\n\n",
 "of_pow":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem of_pow {i} (a : A i) (n : ℕ) : of _ i a ^ n = of _ («expr • » n i) (graded_monoid.gmonoid.gnpow _ a) :=\n  by\n  induction' n with n\n  · exact of_eq_of_graded_monoid_eq (pow_zero <| GradedMonoid.mk _ a).symm\n  · rw [pow_succ, n_ih, of_mul_of]\n    exact of_eq_of_graded_monoid_eq (pow_succ (GradedMonoid.mk _ a) n).symm\n#align of_pow of_pow\n\n",
 "of_nat_cast":
 "@[simp]\ntheorem of_nat_cast (n : ℕ) : of A 0 n = n :=\n  rfl\n#align of_nat_cast of_nat_cast\n\n",
 "of_mul_of":
 "theorem of_mul_of {i j} (a : A i) (b : A j) : of _ i a * of _ j b = of _ (i + j) (graded_monoid.ghas_mul.mul a b) :=\n  mul_hom_of_of a b\n#align of_mul_of of_mul_of\n\n",
 "of_list_dprod":
 "theorem of_list_dprod {α} (l : List α) (fι : α → ι) (fA : ∀ a, A (fι a)) :\n    of A _ (l.dprod fι fA) = (l.map fun a => of A (fι a) (fA a)).prod :=\n  by\n  induction l\n  · simp only [List.map_nil, List.prod_nil, List.dProd_nil]\n    rfl\n  · simp only [list.map_cons, List.prod_cons, List.dProd_cons, ← l_ih, direct_sum.of_mul_of]\n    rfl\n#align of_list_dprod of_list_dprod\n\n",
 "of_int_cast":
 "@[simp]\ntheorem of_int_cast (n : ℤ) : of A 0 n = n :=\n  rfl\n#align of_int_cast of_int_cast\n\n",
 "of_eq_of_graded_monoid_eq":
 "/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\ntheorem of_eq_of_graded_monoid_eq {A : ι → Type _} [∀ i : ι, AddCommMonoid (A i)] {i j : ι} {a : A i} {b : A j}\n    (h : GradedMonoid.mk i a = GradedMonoid.mk j b) : DirectSum.of A i a = DirectSum.of A j b :=\n  Dfinsupp.single_eq_of_sigma_eq h\n#align of_eq_of_graded_monoid_eq of_eq_of_graded_monoid_eq\n\n",
 "mul_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n#print mul_one /-\nprivate theorem mul_one\n    (x : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) :\n    x * 1 = x :=\n  by\n  suffices\n    (mul_hom A).flip 1 =\n      AddMonoidHom.id\n        (direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i))\n    from AddMonoidHom.congr_fun this x\n  apply add_hom_ext; intro i xi\n  unfold has_one.one\n  rw [flip_apply, mul_hom_of_of]\n  exact of_eq_of_graded_monoid_eq (mul_one <| GradedMonoid.mk i xi)\n#align mul_one mul_one\n-/\n\n",
 "mul_hom_of_of":
 "theorem mul_hom_of_of {i j} (a : A i) (b : A j) :\n    mul_hom A (of _ i a) (of _ j b) = of _ (i + j) (graded_monoid.ghas_mul.mul a b) :=\n  by\n  unfold MulHom\n  rw [to_add_monoid_of, flip_apply, to_add_monoid_of, flip_apply, coe_comp, Function.comp_apply, comp_hom_apply_apply,\n    coe_comp, Function.comp_apply, gmul_hom_apply_apply]\n#align mul_hom_of_of mul_hom_of_of\n\n",
 "mul_eq_sum_support_ghas_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.product -/\n/-- A heavily unfolded version of the definition of multiplication -/\ntheorem mul_eq_sum_support_ghas_mul [∀ (i : ι) (x : A i), Decidable (x ≠ 0)]\n    (a a' : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) :\n    a * a' =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n        (finset.product (Dfinsupp.support a) (Dfinsupp.support a'))\n        (DirectSum.of _ _ (graded_monoid.ghas_mul.mul (a ij.fst) (a' ij.snd))) :=\n  by simp only [mul_eq_dfinsupp_sum, Dfinsupp.sum, Finset.sum_product]\n#align mul_eq_sum_support_ghas_mul mul_eq_sum_support_ghas_mul\n\n",
 "mul_eq_dfinsupp_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\ntheorem mul_eq_dfinsupp_sum [∀ (i : ι) (x : A i), Decidable (x ≠ 0)]\n    (a a' : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) :\n    a * a' = a.sum fun i ai => a'.sum fun j aj => DirectSum.of _ _ <| graded_monoid.ghas_mul.mul ai aj :=\n  by\n  change MulHom _ a a' = _\n  simpa only [MulHom, to_add_monoid, Dfinsupp.liftAddHom_apply, Dfinsupp.sumAddHom_apply,\n    AddMonoidHom.dfinsupp_sum_apply, flip_apply, AddMonoidHom.dfinsupp_sumAddHom_apply]\n#align mul_eq_dfinsupp_sum mul_eq_dfinsupp_sum\n\n",
 "mul_comm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n#print mul_comm /-\nprivate theorem mul_comm\n    (a b : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) :\n    a * b = b * a :=\n  by\n  suffices mul_hom A = (mul_hom A).flip from AddMonoidHom.congr_fun (AddMonoidHom.congr_fun this a) b\n  apply add_hom_ext; intro ai ax; apply add_hom_ext; intro bi bx\n  rw [AddMonoidHom.flip_apply, mul_hom_of_of, mul_hom_of_of]\n  exact of_eq_of_graded_monoid_eq (gcomm_semiring.mul_comm ⟨ai, ax⟩ ⟨bi, bx⟩)\n#align mul_comm mul_comm\n-/\n\n",
 "mul_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `direct_sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum -/\n#print mul_assoc /-\nprivate theorem mul_assoc\n    (a b c : direct_sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `direct_sum\" (A i)) :\n    a * b * c = a * (b * c) :=\n  by\n  suffices\n    (-- `λ a b c, a * b * c` as a bundled hom\n              mul_hom\n              A).comp_hom.comp\n        (mul_hom A) =\n      (AddMonoidHom.compHom flipHom <|\n          (-- `λ a b c, a * (b * c)` as a bundled hom\n                    mul_hom\n                    A).flip.comp_hom.comp\n            (mul_hom A)).flip\n    from AddMonoidHom.congr_fun (AddMonoidHom.congr_fun (AddMonoidHom.congr_fun this a) b) c\n  ext (ai ax bi bx ci cx) : 6\n  dsimp only [coe_comp, Function.comp_apply, comp_hom_apply_apply, flip_apply, flip_hom_apply]\n  rw [mul_hom_of_of, mul_hom_of_of, mul_hom_of_of, mul_hom_of_of]\n  exact of_eq_of_graded_monoid_eq (mul_assoc (GradedMonoid.mk ai ax) ⟨bi, bx⟩ ⟨ci, cx⟩)\n#align mul_assoc mul_assoc\n-/\n\n",
 "list_prod_of_fn_of_eq_dprod":
 "theorem list_prod_of_fn_of_eq_dprod (n : ℕ) (fι : Fin n → ι) (fA : ∀ a, A (fι a)) :\n    (List.ofFn fun a => of A (fι a) (fA a)).prod = of A _ ((List.finRange n).dprod fι fA) := by\n  rw [List.ofFn_eq_map, of_list_dprod]\n#align list_prod_of_fn_of_eq_dprod list_prod_of_fn_of_eq_dprod\n\n"}