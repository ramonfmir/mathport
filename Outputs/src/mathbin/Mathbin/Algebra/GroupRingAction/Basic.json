{"toRingHom_injective":
 "#print toRingHom_injective /-\n/-\nCopyright (c) 2020 Kenny Lau. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kenny Lau\n-/\n-- note we could not use `extends` since these typeclasses are made with `old_structure_cmd`\ntheorem toRingHom_injective [MulSemiringAction M R] [FaithfulSMul M R] :\n    function.injective (MulSemiringAction.toRingHom M R) := fun m₁ m₂ h =>\n  eq_of_smul_eq_smul fun r => RingHom.ext_iff.1 h r\n#align to_ring_hom_injective toRingHom_injective\n-/\n\n",
 "smul_inv''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n#print smul_inv'' /-\n/-- Note that `smul_inv'` refers to the group case, and `smul_inv` has an additional inverse\non `x`. -/\n@[simp]\ntheorem smul_inv'' [MulSemiringAction M F] (x : M) (m : F) : «expr • » x m⁻¹ = («expr • » x m)⁻¹ :=\n  map_inv₀ (MulSemiringAction.toRingHom M F x) _\n#align smul_inv'' smul_inv''\n-/\n\n"}