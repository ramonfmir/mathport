{"support_smul_subset_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_smul_subset_right [add_monoid A] [monoid B] [DistribMulAction B A] (b : B) (f : α → A) :\n    support («expr • » b f) ⊆ support f := fun x hbf hf => hbf <| by rw [pi.smul_apply, hf, smul_zero]\n#align support_smul_subset_right support_smul_subset_right\n\n",
 "support_smul_subset_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_smul_subset_left [Zero M] [Zero β] [SMulWithZero M β] (f : α → M) (g : α → β) :\n    support («expr • » f g) ⊆ support f := fun x hfg hf => hfg <| by rw [Pi.smul_apply', hf, zero_smul]\n#align support_smul_subset_left support_smul_subset_left\n\n",
 "support_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_smul [Zero R] [Zero M] [SMulWithZero R M] [NoZeroSMulDivisors R M] (f : α → R) (g : α → M) :\n    support («expr • » f g) = support f ∩ support g :=\n  ext fun x => smul_ne_zero_iff\n#align support_smul support_smul\n\n",
 "support_prod_subset":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem support_prod_subset [comm_monoid_with_zero A] (s : Finset α) (f : α → β → A) :\n    (support fun x =>\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i x)) ⊆\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (support (f i)) :=\n  fun x hx => mem_interᵢ₂.2 fun i hi H => hx <| finset.prod_eq_zero hi H\n#align support_prod_subset support_prod_subset\n\n",
 "support_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , » -/\ntheorem support_prod [comm_monoid_with_zero A] [no_zero_divisors A] [nontrivial A] (s : Finset α) (f : α → β → A) :\n    (support fun x =>\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i x)) =\n      «expr⋂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋂ , »\" (support (f i)) :=\n  Set.ext fun x => by simp only [support, ne.def, finset.prod_eq_zero_iff, mem_set_of_eq, Set.mem_interᵢ, not_exists]\n#align support_prod support_prod\n\n",
 "support_mul_subset_right":
 "@[simp]\ntheorem support_mul_subset_right [mul_zero_class R] (f g : α → R) : (support fun x => f x * g x) ⊆ support g :=\n  fun x hfg hg => hfg <| by simp only [hg, mul_zero]\n#align support_mul_subset_right support_mul_subset_right\n\n",
 "support_mul_subset_left":
 "@[simp]\ntheorem support_mul_subset_left [mul_zero_class R] (f g : α → R) : (support fun x => f x * g x) ⊆ support f :=\n  fun x hfg hf => hfg <| by simp only [hf, zero_mul]\n#align support_mul_subset_left support_mul_subset_left\n\n",
 "support_mul":
 "@[simp]\ntheorem support_mul [mul_zero_class R] [no_zero_divisors R] (f g : α → R) :\n    (support fun x => f x * g x) = support f ∩ support g :=\n  support_smul f g\n#align support_mul support_mul\n\n",
 "support_inv":
 "@[simp]\ntheorem support_inv [group_with_zero G₀] (f : α → G₀) : (support fun x => (f x)⁻¹) = support f :=\n  Set.ext fun x => not_congr inv_eq_zero\n#align support_inv support_inv\n\n",
 "support_div":
 "@[simp]\ntheorem support_div [group_with_zero G₀] (f g : α → G₀) : (support fun x => f x / g x) = support f ∩ support g := by\n  simp [div_eq_mul_inv]\n#align support_div support_div\n\n",
 "support_const_smul_of_ne_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem support_const_smul_of_ne_zero [Semiring R] [add_comm_monoid M] [Module R M] [NoZeroSMulDivisors R M] (c : R)\n    (g : α → M) (hc : c ≠ 0) : support («expr • » c g) = support g :=\n  ext fun x => by simp only [hc, mem_support, pi.smul_apply, ne.def, smul_eq_zero, false_or_iff]\n#align support_const_smul_of_ne_zero support_const_smul_of_ne_zero\n\n",
 "range_subset_insert_image_mul_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[to_additive]\ntheorem range_subset_insert_image_mul_support (f : α → M) : range f ⊆ insert 1 («expr '' » f (mul_support f)) := by\n  simpa only [range_subset_iff, mem_insert_iff, or_iff_not_imp_left] using fun x (hx : x ∈ mul_support f) =>\n    mem_image_of_mem f hx\n#align range_subset_insert_image_mul_support range_subset_insert_image_mul_support\n\n",
 "nmem_mul_support":
 "@[to_additive]\ntheorem nmem_mul_support {f : α → M} {x : α} : x ∉ mul_support f ↔ f x = 1 :=\n  not_not\n#align nmem_mul_support nmem_mul_support\n\n",
 "mul_support_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[to_additive]\ntheorem mul_support_supr [ConditionallyCompleteLattice M] [nonempty ι] (f : ι → α → M) :\n    (mul_support fun x =>\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (f i x)) ⊆\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (mul_support (f i)) :=\n  by\n  rw [mul_support_subset_iff']\n  simp only [mem_Union, not_exists, nmem_mul_support]\n  intro x hx\n  simp only [hx, csupᵢ_const]\n#align mul_support_supr mul_support_supr\n\n",
 "mul_support_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[to_additive]\ntheorem mul_support_sup [SemilatticeSup M] (f g : α → M) :\n    (mul_support fun x => «expr ⊔ » (f x) (g x)) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_binop_subset («expr ⊔ » · ·) sup_idem f g\n#align mul_support_sup mul_support_sup\n\n",
 "mul_support_subset_iff'":
 "/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x «expr ∉ » s) -/\n@[to_additive]\ntheorem mul_support_subset_iff' {f : α → M} {s : set α} : mul_support f ⊆ s ↔ ∀ (x) (_ : x ∉ s), f x = 1 :=\n  forall_congr' fun x => not_imp_comm\n#align mul_support_subset_iff' mul_support_subset_iff'\n\n",
 "mul_support_subset_iff":
 "@[simp, to_additive]\ntheorem mul_support_subset_iff {f : α → M} {s : set α} : mul_support f ⊆ s ↔ ∀ x, f x ≠ 1 → x ∈ s :=\n  iff.rfl\n#align mul_support_subset_iff mul_support_subset_iff\n\n",
 "mul_support_subset_comp":
 "@[to_additive]\ntheorem mul_support_subset_comp {g : M → N} (hg : ∀ {x}, g x = 1 → x = 1) (f : α → M) :\n    mul_support f ⊆ mul_support (g ∘ f) := fun x => mt hg\n#align mul_support_subset_comp mul_support_subset_comp\n\n",
 "mul_support_prod_mk'":
 "@[to_additive support_prod_mk']\ntheorem mul_support_prod_mk' (f : α → M × N) :\n    mul_support f = (mul_support fun x => (f x).1) ∪ mul_support fun x => (f x).2 := by\n  simp only [← mul_support_prod_mk, prod.mk.eta]\n#align mul_support_prod_mk' mul_support_prod_mk'\n\n",
 "mul_support_prod_mk":
 "@[to_additive support_prod_mk]\ntheorem mul_support_prod_mk (f : α → M) (g : α → N) :\n    (mul_support fun x => (f x, g x)) = mul_support f ∪ mul_support g :=\n  Set.ext fun x => by simp only [mul_support, not_and_or, mem_union, mem_set_of_eq, Prod.mk_eq_one, ne.def]\n#align mul_support_prod_mk mul_support_prod_mk\n\n",
 "mul_support_prod":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[to_additive]\ntheorem mul_support_prod [comm_monoid M] (s : Finset α) (f : α → β → M) :\n    (mul_support fun x =>\n        finset.prod \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.prod\" s (f i x)) ⊆\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (mul_support (f i)) :=\n  by\n  rw [mul_support_subset_iff']\n  simp only [mem_Union, not_exists, nmem_mul_support]\n  exact fun x => finset.prod_eq_one\n#align mul_support_prod mul_support_prod\n\n",
 "mul_support_pow":
 "@[to_additive]\ntheorem mul_support_pow [monoid M] (f : α → M) (n : ℕ) : (mul_support fun x => f x ^ n) ⊆ mul_support f :=\n  by\n  induction' n with n hfn\n  · simpa only [pow_zero, mul_support_one] using empty_subset _\n  · simpa only [pow_succ] using (mul_support_mul f _).trans (union_subset subset.rfl hfn)\n#align mul_support_pow mul_support_pow\n\n",
 "mul_support_one_sub'":
 "theorem mul_support_one_sub' [One R] [add_group R] (f : α → R) : mul_support (1 - f) = support f := by\n  rw [sub_eq_add_neg, mul_support_one_add', support_neg']\n#align mul_support_one_sub' mul_support_one_sub'\n\n",
 "mul_support_one_sub":
 "theorem mul_support_one_sub [One R] [add_group R] (f : α → R) : (mul_support fun x => 1 - f x) = support f :=\n  mul_support_one_sub' f\n#align mul_support_one_sub mul_support_one_sub\n\n",
 "mul_support_one_add'":
 "theorem mul_support_one_add' [One R] [add_left_cancel_monoid R] (f : α → R) : mul_support (1 + f) = support f :=\n  mul_support_one_add f\n#align mul_support_one_add' mul_support_one_add'\n\n",
 "mul_support_one_add":
 "theorem mul_support_one_add [One R] [add_left_cancel_monoid R] (f : α → R) :\n    (mul_support fun x => 1 + f x) = support f :=\n  Set.ext fun x => not_congr add_right_eq_self\n#align mul_support_one_add mul_support_one_add\n\n",
 "mul_support_one'":
 "@[simp, to_additive]\ntheorem mul_support_one' : mul_support (1 : α → M) = ∅ :=\n  mul_support_eq_empty_iff.2 rfl\n#align mul_support_one' mul_support_one'\n\n",
 "mul_support_one":
 "@[simp, to_additive]\ntheorem mul_support_one : (mul_support fun x : α => (1 : M)) = ∅ :=\n  mul_support_one'\n#align mul_support_one mul_support_one\n\n",
 "mul_support_nonempty_iff":
 "@[simp, to_additive]\ntheorem mul_support_nonempty_iff {f : α → M} : (mul_support f).nonempty ↔ f ≠ 1 := by\n  rw [nonempty_iff_ne_empty, ne.def, mul_support_eq_empty_iff]\n#align mul_support_nonempty_iff mul_support_nonempty_iff\n\n",
 "mul_support_mul_single_subset":
 "@[to_additive]\ntheorem mul_support_mul_single_subset : mul_support (mulSingle a b) ⊆ {a} := fun x hx =>\n  by_contra fun hx' => hx <| mulSingle_eq_of_ne hx' _\n#align mul_support_mul_single_subset mul_support_mul_single_subset\n\n",
 "mul_support_mul_single_one":
 "@[to_additive]\ntheorem mul_support_mul_single_one : mul_support (mulSingle a (1 : B)) = ∅ := by simp\n#align mul_support_mul_single_one mul_support_mul_single_one\n\n",
 "mul_support_mul_single_of_ne":
 "@[simp, to_additive]\ntheorem mul_support_mul_single_of_ne (h : b ≠ 1) : mul_support (mulSingle a b) = {a} :=\n  mul_support_mul_single_subset.antisymm fun x (hx : x = a) => by rwa [mem_mul_support, hx, mul_single_eq_same]\n#align mul_support_mul_single_of_ne mul_support_mul_single_of_ne\n\n",
 "mul_support_mul_single_disjoint":
 "@[to_additive]\ntheorem mul_support_mul_single_disjoint {b' : B} (hb : b ≠ 1) (hb' : b' ≠ 1) {i j : A} :\n    Disjoint (mul_support (mulSingle i b)) (mul_support (mulSingle j b')) ↔ i ≠ j := by\n  rw [mul_support_mul_single_of_ne hb, mul_support_mul_single_of_ne hb', disjoint_singleton]\n#align mul_support_mul_single_disjoint mul_support_mul_single_disjoint\n\n",
 "mul_support_mul_single":
 "@[to_additive]\ntheorem mul_support_mul_single [decidable_eq B] : mul_support (mulSingle a b) = if b = 1 then ∅ else {a} := by\n  split_ifs with h <;> simp [h]\n#align mul_support_mul_single mul_support_mul_single\n\n",
 "mul_support_mul_inv":
 "@[to_additive]\ntheorem mul_support_mul_inv : (mul_support fun x => f x * (g x)⁻¹) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_binop_subset (fun a b => a * b⁻¹) (by simp) f g\n#align mul_support_mul_inv mul_support_mul_inv\n\n",
 "mul_support_mul":
 "@[to_additive]\ntheorem mul_support_mul [mul_one_class M] (f g : α → M) :\n    (mul_support fun x => f x * g x) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_binop_subset (· * ·) (one_mul _) f g\n#align mul_support_mul mul_support_mul\n\n",
 "mul_support_min":
 "@[to_additive]\ntheorem mul_support_min [linear_order M] (f g : α → M) :\n    (mul_support fun x => min (f x) (g x)) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_inf f g\n#align mul_support_min mul_support_min\n\n",
 "mul_support_max":
 "@[to_additive]\ntheorem mul_support_max [linear_order M] (f g : α → M) :\n    (mul_support fun x => max (f x) (g x)) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_sup f g\n#align mul_support_max mul_support_max\n\n",
 "mul_support_inv'":
 "@[simp, to_additive]\ntheorem mul_support_inv' : mul_support f⁻¹ = mul_support f :=\n  mul_support_inv f\n#align mul_support_inv' mul_support_inv'\n\n",
 "mul_support_inv":
 "@[simp, to_additive]\ntheorem mul_support_inv : (mul_support fun x => (f x)⁻¹) = mul_support f :=\n  ext fun _ => inv_ne_one\n#align mul_support_inv mul_support_inv\n\n",
 "mul_support_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵒᵈ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[to_additive]\ntheorem mul_support_infi [ConditionallyCompleteLattice M] [nonempty ι] (f : ι → α → M) :\n    (mul_support fun x =>\n        «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (f i x)) ⊆\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n        (mul_support (f i)) :=\n  @mul_support_supr _ («expr ᵒᵈ» M) ι ⟨(1 : M)⟩ _ _ f\n#align mul_support_infi mul_support_infi\n\n",
 "mul_support_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[to_additive]\ntheorem mul_support_inf [SemilatticeInf M] (f g : α → M) :\n    (mul_support fun x => «expr ⊓ » (f x) (g x)) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_binop_subset («expr ⊓ » · ·) inf_idem f g\n#align mul_support_inf mul_support_inf\n\n",
 "mul_support_eq_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/-\nCopyright (c) 2020 Yury Kudryashov. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Yury Kudryashov\n-/\n@[to_additive]\ntheorem mul_support_eq_preimage (f : α → M) : mul_support f = «expr ⁻¹' » f («expr ᶜ» {1}) :=\n  rfl\n#align mul_support_eq_preimage mul_support_eq_preimage\n\n",
 "mul_support_eq_iff":
 "@[to_additive]\ntheorem mul_support_eq_iff {f : α → M} {s : set α} :\n    mul_support f = s ↔ (∀ x, x ∈ s → f x ≠ 1) ∧ ∀ x, x ∉ s → f x = 1 := by\n  simp only [Set.ext_iff, mem_mul_support, ne.def, imp_not_comm, ← forall_and, ← iff_def, ← xor_iff_not_iff', ←\n    xor_iff_iff_not]\n#align mul_support_eq_iff mul_support_eq_iff\n\n",
 "mul_support_eq_empty_iff":
 "@[simp, to_additive]\ntheorem mul_support_eq_empty_iff {f : α → M} : mul_support f = ∅ ↔ f = 1 :=\n  by\n  simp_rw [← subset_empty_iff, mul_support_subset_iff', funext_iff]\n  simp\n#align mul_support_eq_empty_iff mul_support_eq_empty_iff\n\n",
 "mul_support_div":
 "@[to_additive]\ntheorem mul_support_div : (mul_support fun x => f x / g x) ⊆ mul_support f ∪ mul_support g :=\n  mul_support_binop_subset (· / ·) one_div_one f g\n#align mul_support_div mul_support_div\n\n",
 "mul_support_disjoint_iff":
 "@[to_additive]\ntheorem mul_support_disjoint_iff {f : α → M} {s : set α} : Disjoint (mul_support f) s ↔ EqOn f 1 s := by\n  simp_rw [← subset_compl_iff_disjoint_right, mul_support_subset_iff', not_mem_compl_iff, eq_on, pi.one_apply]\n#align mul_support_disjoint_iff mul_support_disjoint_iff\n\n",
 "mul_support_const":
 "@[to_additive]\ntheorem mul_support_const {c : M} (hc : c ≠ 1) : (mul_support fun x : α => c) = Set.univ :=\n  by\n  ext x\n  simp [hc]\n#align mul_support_const mul_support_const\n\n",
 "mul_support_comp_subset":
 "@[to_additive]\ntheorem mul_support_comp_subset {g : M → N} (hg : g 1 = 1) (f : α → M) : mul_support (g ∘ f) ⊆ mul_support f := fun x =>\n  mt fun h => by simp only [(· ∘ ·), *]\n#align mul_support_comp_subset mul_support_comp_subset\n\n",
 "mul_support_comp_eq_preimage":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n@[to_additive]\ntheorem mul_support_comp_eq_preimage (g : β → M) (f : α → β) : mul_support (g ∘ f) = «expr ⁻¹' » f (mul_support g) :=\n  rfl\n#align mul_support_comp_eq_preimage mul_support_comp_eq_preimage\n\n",
 "mul_support_comp_eq":
 "@[to_additive]\ntheorem mul_support_comp_eq (g : M → N) (hg : ∀ {x}, g x = 1 ↔ x = 1) (f : α → M) :\n    mul_support (g ∘ f) = mul_support f :=\n  Set.ext fun x => not_congr hg\n#align mul_support_comp_eq mul_support_comp_eq\n\n",
 "mul_support_binop_subset":
 "@[to_additive]\ntheorem mul_support_binop_subset (op : M → N → P) (op1 : op 1 1 = 1) (f : α → M) (g : α → N) :\n    (mul_support fun x => op (f x) (g x)) ⊆ mul_support f ∪ mul_support g := fun x hx =>\n  not_or_of_imp fun hf hg => hx <| by simp only [hf, hg, op1]\n#align mul_support_binop_subset mul_support_binop_subset\n\n",
 "mul_support_along_fiber_subset":
 "@[to_additive]\ntheorem mul_support_along_fiber_subset (f : α × β → M) (a : α) :\n    (mul_support fun b => f (a, b)) ⊆ (mul_support f).image prod.snd := by tidy\n#align mul_support_along_fiber_subset mul_support_along_fiber_subset\n\n",
 "mul_support_along_fiber_finite_of_finite":
 "@[simp, to_additive]\ntheorem mul_support_along_fiber_finite_of_finite (f : α × β → M) (a : α) (h : (mul_support f).finite) :\n    (mul_support fun b => f (a, b)).finite :=\n  (h.image prod.snd).subset (mul_support_along_fiber_subset f a)\n#align mul_support_along_fiber_finite_of_finite mul_support_along_fiber_finite_of_finite\n\n",
 "mul_support_add_one'":
 "theorem mul_support_add_one' [One R] [add_right_cancel_monoid R] (f : α → R) : mul_support (f + 1) = support f :=\n  mul_support_add_one f\n#align mul_support_add_one' mul_support_add_one'\n\n",
 "mul_support_add_one":
 "theorem mul_support_add_one [One R] [add_right_cancel_monoid R] (f : α → R) :\n    (mul_support fun x => f x + 1) = support f :=\n  Set.ext fun x => not_congr add_left_eq_self\n#align mul_support_add_one mul_support_add_one\n\n",
 "mem_mul_support":
 "@[simp, to_additive]\ntheorem mem_mul_support {f : α → M} {x : α} : x ∈ mul_support f ↔ f x ≠ 1 :=\n  iff.rfl\n#align mem_mul_support mem_mul_support\n\n",
 "image_inter_mul_support_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[to_additive]\ntheorem image_inter_mul_support_eq {s : set β} {g : β → α} :\n    «expr '' » g s ∩ mul_support f = «expr '' » g (s ∩ mul_support (f ∘ g)) := by\n  rw [mul_support_comp_eq_preimage f g, image_inter_preimage]\n#align image_inter_mul_support_eq image_inter_mul_support_eq\n\n",
 "disjoint_mul_support_iff":
 "@[to_additive]\ntheorem disjoint_mul_support_iff {f : α → M} {s : set α} : Disjoint s (mul_support f) ↔ EqOn f 1 s := by\n  rw [disjoint_comm, mul_support_disjoint_iff]\n#align disjoint_mul_support_iff disjoint_mul_support_iff\n\n",
 "compl_mul_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n@[to_additive]\ntheorem compl_mul_support {f : α → M} : «expr ᶜ» (mul_support f) = { x | f x = 1 } :=\n  ext fun x => nmem_mul_support\n#align compl_mul_support compl_mul_support\n\n"}