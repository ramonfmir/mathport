{"zero":
 "theorem zero : (0 : cubic R).to_poly = 0 :=\n  of_d_eq_zero'\n#align zero zero\n\n",
 "to_poly_injective":
 "theorem to_poly_injective (P Q : cubic R) : P.to_poly = Q.to_poly ↔ P = Q :=\n  ⟨fun h => ext P Q (a_of_eq h) (b_of_eq h) (c_of_eq h) (d_of_eq h), congr_arg to_poly⟩\n#align to_poly_injective to_poly_injective\n\n",
 "to_poly_eq_zero_iff":
 "theorem to_poly_eq_zero_iff (P : cubic R) : P.to_poly = 0 ↔ P = 0 := by rw [← zero, to_poly_injective]\n#align to_poly_eq_zero_iff to_poly_eq_zero_iff\n\n",
 "splits_iff_roots_eq_three":
 "theorem splits_iff_roots_eq_three (ha : P.a ≠ 0) : splits φ P.to_poly ↔ ∃ x y z : K, (map φ P).roots = {x, y, z} := by\n  rw [splits_iff_card_roots ha, card_eq_three]\n#align splits_iff_roots_eq_three splits_iff_roots_eq_three\n\n",
 "splits_iff_card_roots":
 "theorem splits_iff_card_roots (ha : P.a ≠ 0) : splits φ P.to_poly ↔ (map φ P).roots.card = 3 :=\n  by\n  replace ha : (map φ P).a ≠ 0 := (_root_.map_ne_zero φ).mpr ha\n  nth_rw_lhs 1 [← RingHom.id_comp φ]\n  rw [roots, ← splits_map_iff, ← map_to_poly, splits_iff_card_roots, ←\n    ((degree_eq_iff_nat_degree_eq <| ne_zero_of_a_ne_zero ha).mp <| degree_of_a_ne_zero ha : _ = 3)]\n#align splits_iff_card_roots splits_iff_card_roots\n\n",
 "prod_X_sub_C_eq":
 "theorem prod_X_sub_C_eq [CommRing S] {x y z : S} :\n    (X - C x) * (X - C y) * (X - C z) = to_poly ⟨1, -(x + y + z), x * y + x * z + y * z, -(x * y * z)⟩ := by\n  rw [← one_mul <| X - C x, ← C_1, C_mul_prod_X_sub_C_eq, one_mul, one_mul, one_mul]\n#align prod_X_sub_C_eq prod_X_sub_C_eq\n\n",
 "of_d_eq_zero'":
 "theorem of_d_eq_zero' : (⟨0, 0, 0, 0⟩ : cubic R).to_poly = 0 :=\n  of_d_eq_zero rfl rfl rfl rfl\n#align of_d_eq_zero' of_d_eq_zero'\n\n",
 "of_d_eq_zero":
 "theorem of_d_eq_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) (hd : P.d = 0) : P.to_poly = 0 := by\n  rw [of_c_eq_zero ha hb hc, hd, C_0]\n#align of_d_eq_zero of_d_eq_zero\n\n",
 "of_c_eq_zero'":
 "theorem of_c_eq_zero' : to_poly ⟨0, 0, 0, d⟩ = C d :=\n  of_c_eq_zero rfl rfl rfl\n#align of_c_eq_zero' of_c_eq_zero'\n\n",
 "of_c_eq_zero":
 "theorem of_c_eq_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) : P.to_poly = C P.d := by\n  rw [of_b_eq_zero ha hb, hc, C_0, zero_mul, zero_add]\n#align of_c_eq_zero of_c_eq_zero\n\n",
 "of_b_eq_zero'":
 "theorem of_b_eq_zero' : to_poly ⟨0, 0, c, d⟩ = C c * X + C d :=\n  of_b_eq_zero rfl rfl\n#align of_b_eq_zero' of_b_eq_zero'\n\n",
 "of_b_eq_zero":
 "theorem of_b_eq_zero (ha : P.a = 0) (hb : P.b = 0) : P.to_poly = C P.c * X + C P.d := by\n  rw [of_a_eq_zero ha, hb, C_0, zero_mul, zero_add]\n#align of_b_eq_zero of_b_eq_zero\n\n",
 "of_a_eq_zero'":
 "theorem of_a_eq_zero' : to_poly ⟨0, b, c, d⟩ = C b * X ^ 2 + C c * X + C d :=\n  of_a_eq_zero rfl\n#align of_a_eq_zero' of_a_eq_zero'\n\n",
 "of_a_eq_zero":
 "theorem of_a_eq_zero (ha : P.a = 0) : P.to_poly = C P.b * X ^ 2 + C P.c * X + C P.d := by\n  rw [to_poly, ha, C_0, zero_mul, zero_add]\n#align of_a_eq_zero of_a_eq_zero\n\n",
 "ne_zero_of_d_ne_zero":
 "theorem ne_zero_of_d_ne_zero (hd : P.d ≠ 0) : P.to_poly ≠ 0 :=\n  (or_imp.mp (or_imp.mp (or_imp.mp ne_zero).2).2).2 hd\n#align ne_zero_of_d_ne_zero ne_zero_of_d_ne_zero\n\n",
 "ne_zero_of_c_ne_zero":
 "theorem ne_zero_of_c_ne_zero (hc : P.c ≠ 0) : P.to_poly ≠ 0 :=\n  (or_imp.mp (or_imp.mp (or_imp.mp ne_zero).2).2).1 hc\n#align ne_zero_of_c_ne_zero ne_zero_of_c_ne_zero\n\n",
 "ne_zero_of_b_ne_zero":
 "theorem ne_zero_of_b_ne_zero (hb : P.b ≠ 0) : P.to_poly ≠ 0 :=\n  (or_imp.mp (or_imp.mp ne_zero).2).1 hb\n#align ne_zero_of_b_ne_zero ne_zero_of_b_ne_zero\n\n",
 "ne_zero_of_a_ne_zero":
 "theorem ne_zero_of_a_ne_zero (ha : P.a ≠ 0) : P.to_poly ≠ 0 :=\n  (or_imp.mp ne_zero).1 ha\n#align ne_zero_of_a_ne_zero ne_zero_of_a_ne_zero\n\n",
 "ne_zero":
 "private theorem ne_zero (h0 : P.a ≠ 0 ∨ P.b ≠ 0 ∨ P.c ≠ 0 ∨ P.d ≠ 0) : P.to_poly ≠ 0 :=\n  by\n  contrapose! h0\n  rw [(to_poly_eq_zero_iff P).mp h0]\n  exact ⟨rfl, rfl, rfl, rfl⟩\n#align ne_zero ne_zero\n\n",
 "nat_degree_of_zero":
 "@[simp]\ntheorem nat_degree_of_zero : (0 : cubic R).to_poly.nat_degree = 0 :=\n  nat_degree_of_c_eq_zero'\n#align nat_degree_of_zero nat_degree_of_zero\n\n",
 "nat_degree_of_c_ne_zero'":
 "@[simp]\ntheorem nat_degree_of_c_ne_zero' (hc : c ≠ 0) : (to_poly ⟨0, 0, c, d⟩).nat_degree = 1 :=\n  nat_degree_of_c_ne_zero rfl rfl hc\n#align nat_degree_of_c_ne_zero' nat_degree_of_c_ne_zero'\n\n",
 "nat_degree_of_c_ne_zero":
 "@[simp]\ntheorem nat_degree_of_c_ne_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c ≠ 0) : P.to_poly.nat_degree = 1 := by\n  rw [of_b_eq_zero ha hb, nat_degree_linear hc]\n#align nat_degree_of_c_ne_zero nat_degree_of_c_ne_zero\n\n",
 "nat_degree_of_c_eq_zero'":
 "@[simp]\ntheorem nat_degree_of_c_eq_zero' : (to_poly ⟨0, 0, 0, d⟩).nat_degree = 0 :=\n  nat_degree_of_c_eq_zero rfl rfl rfl\n#align nat_degree_of_c_eq_zero' nat_degree_of_c_eq_zero'\n\n",
 "nat_degree_of_c_eq_zero":
 "@[simp]\ntheorem nat_degree_of_c_eq_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) : P.to_poly.nat_degree = 0 := by\n  rw [of_c_eq_zero ha hb hc, nat_degree_C]\n#align nat_degree_of_c_eq_zero nat_degree_of_c_eq_zero\n\n",
 "nat_degree_of_b_ne_zero'":
 "@[simp]\ntheorem nat_degree_of_b_ne_zero' (hb : b ≠ 0) : (to_poly ⟨0, b, c, d⟩).nat_degree = 2 :=\n  nat_degree_of_b_ne_zero rfl hb\n#align nat_degree_of_b_ne_zero' nat_degree_of_b_ne_zero'\n\n",
 "nat_degree_of_b_ne_zero":
 "@[simp]\ntheorem nat_degree_of_b_ne_zero (ha : P.a = 0) (hb : P.b ≠ 0) : P.to_poly.nat_degree = 2 := by\n  rw [of_a_eq_zero ha, nat_degree_quadratic hb]\n#align nat_degree_of_b_ne_zero nat_degree_of_b_ne_zero\n\n",
 "nat_degree_of_b_eq_zero'":
 "theorem nat_degree_of_b_eq_zero' : (to_poly ⟨0, 0, c, d⟩).nat_degree ≤ 1 :=\n  nat_degree_of_b_eq_zero rfl rfl\n#align nat_degree_of_b_eq_zero' nat_degree_of_b_eq_zero'\n\n",
 "nat_degree_of_b_eq_zero":
 "theorem nat_degree_of_b_eq_zero (ha : P.a = 0) (hb : P.b = 0) : P.to_poly.nat_degree ≤ 1 := by\n  simpa only [of_b_eq_zero ha hb] using nat_degree_linear_le\n#align nat_degree_of_b_eq_zero nat_degree_of_b_eq_zero\n\n",
 "nat_degree_of_a_ne_zero'":
 "@[simp]\ntheorem nat_degree_of_a_ne_zero' (ha : a ≠ 0) : (to_poly ⟨a, b, c, d⟩).nat_degree = 3 :=\n  nat_degree_of_a_ne_zero ha\n#align nat_degree_of_a_ne_zero' nat_degree_of_a_ne_zero'\n\n",
 "nat_degree_of_a_ne_zero":
 "@[simp]\ntheorem nat_degree_of_a_ne_zero (ha : P.a ≠ 0) : P.to_poly.nat_degree = 3 :=\n  nat_degree_cubic ha\n#align nat_degree_of_a_ne_zero nat_degree_of_a_ne_zero\n\n",
 "nat_degree_of_a_eq_zero'":
 "theorem nat_degree_of_a_eq_zero' : (to_poly ⟨0, b, c, d⟩).nat_degree ≤ 2 :=\n  nat_degree_of_a_eq_zero rfl\n#align nat_degree_of_a_eq_zero' nat_degree_of_a_eq_zero'\n\n",
 "nat_degree_of_a_eq_zero":
 "theorem nat_degree_of_a_eq_zero (ha : P.a = 0) : P.to_poly.nat_degree ≤ 2 := by\n  simpa only [of_a_eq_zero ha] using nat_degree_quadratic_le\n#align nat_degree_of_a_eq_zero nat_degree_of_a_eq_zero\n\n",
 "monic_of_d_eq_one'":
 "theorem monic_of_d_eq_one' : (to_poly ⟨0, 0, 0, 1⟩).monic :=\n  monic_of_d_eq_one rfl rfl rfl rfl\n#align monic_of_d_eq_one' monic_of_d_eq_one'\n\n",
 "monic_of_d_eq_one":
 "theorem monic_of_d_eq_one (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) (hd : P.d = 1) : P.to_poly.monic := by\n  rw [monic, leading_coeff_of_c_eq_zero ha hb hc, hd]\n#align monic_of_d_eq_one monic_of_d_eq_one\n\n",
 "monic_of_c_eq_one'":
 "theorem monic_of_c_eq_one' : (to_poly ⟨0, 0, 1, d⟩).monic :=\n  monic_of_c_eq_one rfl rfl rfl\n#align monic_of_c_eq_one' monic_of_c_eq_one'\n\n",
 "monic_of_c_eq_one":
 "theorem monic_of_c_eq_one (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 1) : P.to_poly.monic :=\n  by\n  nontriviality\n  rw [monic,\n    leading_coeff_of_c_ne_zero ha hb <| by\n      rw [hc]\n      exact one_ne_zero,\n    hc]\n#align monic_of_c_eq_one monic_of_c_eq_one\n\n",
 "monic_of_b_eq_one'":
 "theorem monic_of_b_eq_one' : (to_poly ⟨0, 1, c, d⟩).monic :=\n  monic_of_b_eq_one rfl rfl\n#align monic_of_b_eq_one' monic_of_b_eq_one'\n\n",
 "monic_of_b_eq_one":
 "theorem monic_of_b_eq_one (ha : P.a = 0) (hb : P.b = 1) : P.to_poly.monic :=\n  by\n  nontriviality\n  rw [monic,\n    leading_coeff_of_b_ne_zero ha <| by\n      rw [hb]\n      exact one_ne_zero,\n    hb]\n#align monic_of_b_eq_one monic_of_b_eq_one\n\n",
 "monic_of_a_eq_one'":
 "theorem monic_of_a_eq_one' : (to_poly ⟨1, b, c, d⟩).monic :=\n  monic_of_a_eq_one rfl\n#align monic_of_a_eq_one' monic_of_a_eq_one'\n\n",
 "monic_of_a_eq_one":
 "theorem monic_of_a_eq_one (ha : P.a = 1) : P.to_poly.monic :=\n  by\n  nontriviality\n  rw [monic,\n    leading_coeff_of_a_ne_zero <| by\n      rw [ha]\n      exact one_ne_zero,\n    ha]\n#align monic_of_a_eq_one monic_of_a_eq_one\n\n",
 "mem_roots_iff":
 "theorem mem_roots_iff [IsDomain R] (h0 : P.to_poly ≠ 0) (x : R) :\n    x ∈ P.roots ↔ P.a * x ^ 3 + P.b * x ^ 2 + P.c * x + P.d = 0 :=\n  by\n  rw [roots, mem_roots h0, is_root, to_poly]\n  simp only [eval_C, eval_X, eval_add, eval_mul, eval_pow]\n#align mem_roots_iff mem_roots_iff\n\n",
 "map_to_poly":
 "theorem map_to_poly : (map φ P).to_poly = polynomial.map φ P.to_poly := by\n  simp only [map, to_poly, map_C, map_X, polynomial.map_add, polynomial.map_mul, polynomial.map_pow]\n#align map_to_poly map_to_poly\n\n",
 "map_roots":
 "theorem map_roots [IsDomain S] : (map φ P).roots = (polynomial.map φ P.to_poly).roots := by rw [roots, map_to_poly]\n#align map_roots map_roots\n\n",
 "leading_coeff_of_c_ne_zero'":
 "@[simp]\ntheorem leading_coeff_of_c_ne_zero' (hc : c ≠ 0) : (to_poly ⟨0, 0, c, d⟩).leading_coeff = c :=\n  leading_coeff_of_c_ne_zero rfl rfl hc\n#align leading_coeff_of_c_ne_zero' leading_coeff_of_c_ne_zero'\n\n",
 "leading_coeff_of_c_ne_zero":
 "@[simp]\ntheorem leading_coeff_of_c_ne_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c ≠ 0) : P.to_poly.leading_coeff = P.c := by\n  rw [of_b_eq_zero ha hb, leading_coeff_linear hc]\n#align leading_coeff_of_c_ne_zero leading_coeff_of_c_ne_zero\n\n",
 "leading_coeff_of_c_eq_zero'":
 "@[simp]\ntheorem leading_coeff_of_c_eq_zero' : (to_poly ⟨0, 0, 0, d⟩).leading_coeff = d :=\n  leading_coeff_of_c_eq_zero rfl rfl rfl\n#align leading_coeff_of_c_eq_zero' leading_coeff_of_c_eq_zero'\n\n",
 "leading_coeff_of_c_eq_zero":
 "@[simp]\ntheorem leading_coeff_of_c_eq_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) : P.to_poly.leading_coeff = P.d := by\n  rw [of_c_eq_zero ha hb hc, leading_coeff_C]\n#align leading_coeff_of_c_eq_zero leading_coeff_of_c_eq_zero\n\n",
 "leading_coeff_of_b_ne_zero'":
 "@[simp]\ntheorem leading_coeff_of_b_ne_zero' (hb : b ≠ 0) : (to_poly ⟨0, b, c, d⟩).leading_coeff = b :=\n  leading_coeff_of_b_ne_zero rfl hb\n#align leading_coeff_of_b_ne_zero' leading_coeff_of_b_ne_zero'\n\n",
 "leading_coeff_of_b_ne_zero":
 "@[simp]\ntheorem leading_coeff_of_b_ne_zero (ha : P.a = 0) (hb : P.b ≠ 0) : P.to_poly.leading_coeff = P.b := by\n  rw [of_a_eq_zero ha, leading_coeff_quadratic hb]\n#align leading_coeff_of_b_ne_zero leading_coeff_of_b_ne_zero\n\n",
 "leading_coeff_of_a_ne_zero'":
 "@[simp]\ntheorem leading_coeff_of_a_ne_zero' (ha : a ≠ 0) : (to_poly ⟨a, b, c, d⟩).leading_coeff = a :=\n  leading_coeff_of_a_ne_zero ha\n#align leading_coeff_of_a_ne_zero' leading_coeff_of_a_ne_zero'\n\n",
 "leading_coeff_of_a_ne_zero":
 "@[simp]\ntheorem leading_coeff_of_a_ne_zero (ha : P.a ≠ 0) : P.to_poly.leading_coeff = P.a :=\n  leading_coeff_cubic ha\n#align leading_coeff_of_a_ne_zero leading_coeff_of_a_ne_zero\n\n",
 "eq_sum_three_roots":
 "theorem eq_sum_three_roots (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) :\n    map φ P = ⟨φ P.a, φ P.a * -(x + y + z), φ P.a * (x * y + x * z + y * z), φ P.a * -(x * y * z)⟩ :=\n  by\n  apply_fun to_poly\n  any_goals exact fun P Q => (to_poly_injective P Q).mp\n  rw [eq_prod_three_roots ha h3, C_mul_prod_X_sub_C_eq]\n#align eq_sum_three_roots eq_sum_three_roots\n\n",
 "eq_prod_three_roots":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\ntheorem eq_prod_three_roots (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) :\n    (map φ P).to_poly = C (φ P.a) * (X - C x) * (X - C y) * (X - C z) :=\n  by\n  rw [map_to_poly,\n    eq_prod_roots_of_splits <|\n      (splits_iff_roots_eq_three ha).mpr <| exists.intro x <| exists.intro y <| exists.intro z h3,\n    leading_coeff_of_a_ne_zero ha, ← map_roots, h3]\n  change C (φ P.a) * («expr ::ₘ » (X - C x) («expr ::ₘ » (X - C y) {X - C z})).prod = _\n  rw [prod_cons, prod_cons, prod_singleton, mul_assoc, mul_assoc]\n#align eq_prod_three_roots eq_prod_three_roots\n\n",
 "disc_ne_zero_iff_roots_nodup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ::ₘ » -/\ntheorem disc_ne_zero_iff_roots_nodup (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) :\n    P.disc ≠ 0 ↔ (map φ P).roots.nodup :=\n  by\n  rw [disc_ne_zero_iff_roots_ne ha h3, h3]\n  change _ ↔ («expr ::ₘ » x («expr ::ₘ » y {z})).nodup\n  rw [nodup_cons, nodup_cons, mem_cons, mem_singleton, mem_singleton]\n  simp only [nodup_singleton]\n  tauto\n#align disc_ne_zero_iff_roots_nodup disc_ne_zero_iff_roots_nodup\n\n",
 "disc_ne_zero_iff_roots_ne":
 "theorem disc_ne_zero_iff_roots_ne (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) :\n    P.disc ≠ 0 ↔ x ≠ y ∧ x ≠ z ∧ y ≠ z :=\n  by\n  rw [← _root_.map_ne_zero φ, disc_eq_prod_three_roots ha h3, pow_two]\n  simp_rw [mul_ne_zero_iff, sub_ne_zero, _root_.map_ne_zero, and_self_iff, and_iff_right ha, and_assoc']\n#align disc_ne_zero_iff_roots_ne disc_ne_zero_iff_roots_ne\n\n",
 "disc_eq_prod_three_roots":
 "theorem disc_eq_prod_three_roots (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) :\n    φ P.disc = (φ P.a * φ P.a * (x - y) * (x - z) * (y - z)) ^ 2 :=\n  by\n  simp only [disc, RingHom.map_add, RingHom.map_sub, RingHom.map_mul, map_pow]\n  simp only [RingHom.map_one, map_bit0, map_bit1]\n  rw [b_eq_three_roots ha h3, c_eq_three_roots ha h3, d_eq_three_roots ha h3]\n  ring1\n#align disc_eq_prod_three_roots disc_eq_prod_three_roots\n\n",
 "degree_of_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem degree_of_zero : (0 : cubic R).to_poly.degree = «expr⊥» :=\n  degree_of_d_eq_zero'\n#align degree_of_zero degree_of_zero\n\n",
 "degree_of_d_ne_zero'":
 "@[simp]\ntheorem degree_of_d_ne_zero' (hd : d ≠ 0) : (to_poly ⟨0, 0, 0, d⟩).degree = 0 :=\n  degree_of_d_ne_zero rfl rfl rfl hd\n#align degree_of_d_ne_zero' degree_of_d_ne_zero'\n\n",
 "degree_of_d_ne_zero":
 "@[simp]\ntheorem degree_of_d_ne_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) (hd : P.d ≠ 0) : P.to_poly.degree = 0 := by\n  rw [of_c_eq_zero ha hb hc, degree_C hd]\n#align degree_of_d_ne_zero degree_of_d_ne_zero\n\n",
 "degree_of_d_eq_zero'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem degree_of_d_eq_zero' : (⟨0, 0, 0, 0⟩ : cubic R).to_poly.degree = «expr⊥» :=\n  degree_of_d_eq_zero rfl rfl rfl rfl\n#align degree_of_d_eq_zero' degree_of_d_eq_zero'\n\n",
 "degree_of_d_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem degree_of_d_eq_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) (hd : P.d = 0) : P.to_poly.degree = «expr⊥» :=\n  by rw [of_d_eq_zero ha hb hc hd, degree_zero]\n#align degree_of_d_eq_zero degree_of_d_eq_zero\n\n",
 "degree_of_c_ne_zero'":
 "@[simp]\ntheorem degree_of_c_ne_zero' (hc : c ≠ 0) : (to_poly ⟨0, 0, c, d⟩).degree = 1 :=\n  degree_of_c_ne_zero rfl rfl hc\n#align degree_of_c_ne_zero' degree_of_c_ne_zero'\n\n",
 "degree_of_c_ne_zero":
 "@[simp]\ntheorem degree_of_c_ne_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c ≠ 0) : P.to_poly.degree = 1 := by\n  rw [of_b_eq_zero ha hb, degree_linear hc]\n#align degree_of_c_ne_zero degree_of_c_ne_zero\n\n",
 "degree_of_c_eq_zero'":
 "theorem degree_of_c_eq_zero' : (to_poly ⟨0, 0, 0, d⟩).degree ≤ 0 :=\n  degree_of_c_eq_zero rfl rfl rfl\n#align degree_of_c_eq_zero' degree_of_c_eq_zero'\n\n",
 "degree_of_c_eq_zero":
 "theorem degree_of_c_eq_zero (ha : P.a = 0) (hb : P.b = 0) (hc : P.c = 0) : P.to_poly.degree ≤ 0 := by\n  simpa only [of_c_eq_zero ha hb hc] using degree_C_le\n#align degree_of_c_eq_zero degree_of_c_eq_zero\n\n",
 "degree_of_b_ne_zero'":
 "@[simp]\ntheorem degree_of_b_ne_zero' (hb : b ≠ 0) : (to_poly ⟨0, b, c, d⟩).degree = 2 :=\n  degree_of_b_ne_zero rfl hb\n#align degree_of_b_ne_zero' degree_of_b_ne_zero'\n\n",
 "degree_of_b_ne_zero":
 "@[simp]\ntheorem degree_of_b_ne_zero (ha : P.a = 0) (hb : P.b ≠ 0) : P.to_poly.degree = 2 := by\n  rw [of_a_eq_zero ha, degree_quadratic hb]\n#align degree_of_b_ne_zero degree_of_b_ne_zero\n\n",
 "degree_of_b_eq_zero'":
 "theorem degree_of_b_eq_zero' : (to_poly ⟨0, 0, c, d⟩).degree ≤ 1 :=\n  degree_of_b_eq_zero rfl rfl\n#align degree_of_b_eq_zero' degree_of_b_eq_zero'\n\n",
 "degree_of_b_eq_zero":
 "theorem degree_of_b_eq_zero (ha : P.a = 0) (hb : P.b = 0) : P.to_poly.degree ≤ 1 := by\n  simpa only [of_b_eq_zero ha hb] using degree_linear_le\n#align degree_of_b_eq_zero degree_of_b_eq_zero\n\n",
 "degree_of_a_ne_zero'":
 "@[simp]\ntheorem degree_of_a_ne_zero' (ha : a ≠ 0) : (to_poly ⟨a, b, c, d⟩).degree = 3 :=\n  degree_of_a_ne_zero ha\n#align degree_of_a_ne_zero' degree_of_a_ne_zero'\n\n",
 "degree_of_a_ne_zero":
 "@[simp]\ntheorem degree_of_a_ne_zero (ha : P.a ≠ 0) : P.to_poly.degree = 3 :=\n  degree_cubic ha\n#align degree_of_a_ne_zero degree_of_a_ne_zero\n\n",
 "degree_of_a_eq_zero'":
 "theorem degree_of_a_eq_zero' : (to_poly ⟨0, b, c, d⟩).degree ≤ 2 :=\n  degree_of_a_eq_zero rfl\n#align degree_of_a_eq_zero' degree_of_a_eq_zero'\n\n",
 "degree_of_a_eq_zero":
 "theorem degree_of_a_eq_zero (ha : P.a = 0) : P.to_poly.degree ≤ 2 := by\n  simpa only [of_a_eq_zero ha] using degree_quadratic_le\n#align degree_of_a_eq_zero degree_of_a_eq_zero\n\n",
 "d_of_eq":
 "theorem d_of_eq (h : P.to_poly = Q.to_poly) : P.d = Q.d := by rw [← coeff_eq_d, h, coeff_eq_d]\n#align d_of_eq d_of_eq\n\n",
 "d_eq_three_roots":
 "theorem d_eq_three_roots (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) : φ P.d = φ P.a * -(x * y * z) := by\n  injection eq_sum_three_roots ha h3\n#align d_eq_three_roots d_eq_three_roots\n\n",
 "coeffs":
 "private theorem coeffs :\n    (∀ n > 3, P.to_poly.coeff n = 0) ∧\n      P.to_poly.coeff 3 = P.a ∧ P.to_poly.coeff 2 = P.b ∧ P.to_poly.coeff 1 = P.c ∧ P.to_poly.coeff 0 = P.d :=\n  by\n  simp only [to_poly, coeff_add, coeff_C, coeff_C_mul_X, coeff_C_mul_X_pow]\n  norm_num\n  intro n hn\n  repeat' rw [if_neg]\n  any_goals linarith only [hn]\n  repeat' rw [zero_add]\n#align coeffs coeffs\n\n",
 "coeff_eq_zero":
 "@[simp]\ntheorem coeff_eq_zero {n : ℕ} (hn : 3 < n) : P.to_poly.coeff n = 0 :=\n  coeffs.1 n hn\n#align coeff_eq_zero coeff_eq_zero\n\n",
 "coeff_eq_d":
 "@[simp]\ntheorem coeff_eq_d : P.to_poly.coeff 0 = P.d :=\n  coeffs.2.2.2.2\n#align coeff_eq_d coeff_eq_d\n\n",
 "coeff_eq_c":
 "@[simp]\ntheorem coeff_eq_c : P.to_poly.coeff 1 = P.c :=\n  coeffs.2.2.2.1\n#align coeff_eq_c coeff_eq_c\n\n",
 "coeff_eq_b":
 "@[simp]\ntheorem coeff_eq_b : P.to_poly.coeff 2 = P.b :=\n  coeffs.2.2.1\n#align coeff_eq_b coeff_eq_b\n\n",
 "coeff_eq_a":
 "@[simp]\ntheorem coeff_eq_a : P.to_poly.coeff 3 = P.a :=\n  coeffs.2.1\n#align coeff_eq_a coeff_eq_a\n\n",
 "card_roots_of_disc_ne_zero":
 "theorem card_roots_of_disc_ne_zero [decidable_eq K] (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z})\n    (hd : P.disc ≠ 0) : (map φ P).roots.to_finset.card = 3 :=\n  by\n  rw [to_finset_card_of_nodup <| (disc_ne_zero_iff_roots_nodup ha h3).mp hd, ← splits_iff_card_roots ha,\n    splits_iff_roots_eq_three ha]\n  exact ⟨x, ⟨y, ⟨z, h3⟩⟩⟩\n#align card_roots_of_disc_ne_zero card_roots_of_disc_ne_zero\n\n",
 "card_roots_le":
 "theorem card_roots_le [IsDomain R] [decidable_eq R] : P.roots.to_finset.card ≤ 3 :=\n  by\n  apply (to_finset_card_le P.to_poly.roots).trans\n  by_cases hP : P.to_poly = 0\n  ·\n    exact\n      (card_roots' P.to_poly).trans\n        (by\n          rw [hP, nat_degree_zero]\n          exact zero_le 3)\n  · exact WithBot.coe_le_coe.1 ((card_roots hP).trans degree_cubic_le)\n#align card_roots_le card_roots_le\n\n",
 "c_of_eq":
 "theorem c_of_eq (h : P.to_poly = Q.to_poly) : P.c = Q.c := by rw [← coeff_eq_c, h, coeff_eq_c]\n#align c_of_eq c_of_eq\n\n",
 "c_eq_three_roots":
 "theorem c_eq_three_roots (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) : φ P.c = φ P.a * (x * y + x * z + y * z) :=\n  by injection eq_sum_three_roots ha h3\n#align c_eq_three_roots c_eq_three_roots\n\n",
 "b_of_eq":
 "theorem b_of_eq (h : P.to_poly = Q.to_poly) : P.b = Q.b := by rw [← coeff_eq_b, h, coeff_eq_b]\n#align b_of_eq b_of_eq\n\n",
 "b_eq_three_roots":
 "theorem b_eq_three_roots (ha : P.a ≠ 0) (h3 : (map φ P).roots = {x, y, z}) : φ P.b = φ P.a * -(x + y + z) := by\n  injection eq_sum_three_roots ha h3\n#align b_eq_three_roots b_eq_three_roots\n\n",
 "a_of_eq":
 "theorem a_of_eq (h : P.to_poly = Q.to_poly) : P.a = Q.a := by rw [← coeff_eq_a, h, coeff_eq_a]\n#align a_of_eq a_of_eq\n\n",
 "C_mul_prod_X_sub_C_eq":
 "/-\nCopyright (c) 2022 David Kurniadi Angdinata. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: David Kurniadi Angdinata\n-/\ntheorem C_mul_prod_X_sub_C_eq [CommRing S] {w x y z : S} :\n    C w * (X - C x) * (X - C y) * (X - C z) =\n      to_poly ⟨w, w * -(x + y + z), w * (x * y + x * z + y * z), w * -(x * y * z)⟩ :=\n  by\n  simp only [to_poly, C_neg, C_add, C_mul]\n  ring1\n#align C_mul_prod_X_sub_C_eq C_mul_prod_X_sub_C_eq\n\n"}