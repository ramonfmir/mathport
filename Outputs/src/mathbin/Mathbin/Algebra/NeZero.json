{"zero_ne_one'":
 "#print zero_ne_one' /-\ntheorem zero_ne_one' [NeZero (1 : α)] : (0 : α) ≠ 1 :=\n  NeZero.ne' (1 : α)\n#align zero_ne_one' zero_ne_one'\n-/\n\n",
 "zero_ne_one":
 "#print zero_ne_one /-\n@[simp]\ntheorem zero_ne_one [NeZero (1 : α)] : (0 : α) ≠ 1 :=\n  NeZero.ne' (1 : α)\n#align zero_ne_one zero_ne_one\n-/\n\n",
 "two_ne_zero'":
 "#print two_ne_zero' /-\ntheorem two_ne_zero' [Add α] [NeZero (2 : α)] : (2 : α) ≠ 0 :=\n  NeZero.ne (2 : α)\n#align two_ne_zero' two_ne_zero'\n-/\n\n",
 "two_ne_zero":
 "#print two_ne_zero /-\ntheorem two_ne_zero [Add α] [NeZero (2 : α)] : (2 : α) ≠ 0 :=\n  NeZero.ne (2 : α)\n#align two_ne_zero two_ne_zero\n-/\n\n",
 "trans":
 "#print trans /-\ntheorem trans [Zero M] [Coe R S] [CoeTC S M] (h : NeZero ((r : S) : M)) : NeZero (r : M) :=\n  ⟨h.out⟩\n#align trans trans\n-/\n\n",
 "three_ne_zero'":
 "#print three_ne_zero' /-\ntheorem three_ne_zero' [Add α] [NeZero (3 : α)] : (3 : α) ≠ 0 :=\n  NeZero.ne (3 : α)\n#align three_ne_zero' three_ne_zero'\n-/\n\n",
 "three_ne_zero":
 "#print three_ne_zero /-\ntheorem three_ne_zero [Add α] [NeZero (3 : α)] : (3 : α) ≠ 0 :=\n  NeZero.ne (3 : α)\n#align three_ne_zero three_ne_zero\n-/\n\n",
 "one_ne_zero'":
 "#print one_ne_zero' /-\ntheorem one_ne_zero' [NeZero (1 : α)] : (1 : α) ≠ 0 :=\n  NeZero.ne (1 : α)\n#align one_ne_zero' one_ne_zero'\n-/\n\n",
 "one_ne_zero":
 "#print one_ne_zero /-\n@[simp]\ntheorem one_ne_zero [NeZero (1 : α)] : (1 : α) ≠ 0 :=\n  NeZero.ne (1 : α)\n#align one_ne_zero one_ne_zero\n-/\n\n",
 "of_pos":
 "--{a : ℕ+}\ntheorem of_pos [preorder M] [Zero M] (h : 0 < x) : NeZero x :=\n  ⟨ne_of_gt h⟩\n#align of_pos of_pos\n\n",
 "not_neZero":
 "#print not_neZero /-\ntheorem not_neZero {R : Type _} [Zero R] {n : R} : ¬NeZero n ↔ n = 0 := by simp [neZero_iff]\n#align not_ne_zero not_neZero\n-/\n\n",
 "ne_zero_of_eq_one":
 "#print ne_zero_of_eq_one /-\ntheorem ne_zero_of_eq_one [NeZero (1 : α)] {a : α} (h : a = 1) : a ≠ 0 :=\n  calc\n    a = 1 := h\n    _ ≠ 0 := one_ne_zero\n    \n#align ne_zero_of_eq_one ne_zero_of_eq_one\n-/\n\n",
 "neZero_iff":
 "#print neZero_iff /-\ntheorem neZero_iff {R : Type _} [Zero R] {n : R} : NeZero n ↔ n ≠ 0 :=\n  ⟨fun h => h.out, ne_zero.mk⟩\n#align ne_zero_iff neZero_iff\n-/\n\n",
 "ne'":
 "#print NeZero.ne' /-\ntheorem NeZero.ne' {R} [Zero R] (n : R) [h : NeZero n] : 0 ≠ n :=\n  h.out.symm\n#align ne_zero.ne' NeZero.ne'\n-/\n\n",
 "ne":
 "#print NeZero.ne /-\n/-\nCopyright (c) 2021 Eric Rodriguez. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Rodriguez\n-/\ntheorem NeZero.ne {R} [Zero R] (n : R) [h : NeZero n] : n ≠ 0 :=\n  h.out\n#align ne_zero.ne NeZero.ne\n-/\n\n",
 "four_ne_zero'":
 "#print four_ne_zero' /-\ntheorem four_ne_zero' [Add α] [NeZero (4 : α)] : (4 : α) ≠ 0 :=\n  NeZero.ne (4 : α)\n#align four_ne_zero' four_ne_zero'\n-/\n\n",
 "four_ne_zero":
 "#print four_ne_zero /-\ntheorem four_ne_zero [Add α] [NeZero (4 : α)] : (4 : α) ≠ 0 :=\n  NeZero.ne (4 : α)\n#align four_ne_zero four_ne_zero\n-/\n\n",
 "eq_zero_or_neZero":
 "#print eq_zero_or_neZero /-\ntheorem eq_zero_or_neZero {α} [Zero α] (a : α) : a = 0 ∨ NeZero a :=\n  (eq_or_ne a 0).imp_right ne_zero.mk\n#align eq_zero_or_ne_zero eq_zero_or_neZero\n-/\n\n"}