{"zero_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n@[simp]\ntheorem zero_div_of (g : G) : «expr /ᵒᶠ » (0 : AddMonoidAlgebra k G) g = 0 :=\n  map_zero _\n#align zero_div_of zero_div_of\n\n",
 "support_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n@[simp]\ntheorem support_div_of (g : G) (x : AddMonoidAlgebra k G) :\n    («expr /ᵒᶠ » x g).support = x.support.preimage ((· + ·) g) (Function.Injective.injOn (add_right_injective g) _) :=\n  rfl\n#align support_div_of support_div_of\n\n",
 "of'_mul_mod_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\ntheorem of'_mul_mod_of (g : G) (x : AddMonoidAlgebra k G) : «expr %ᵒᶠ » (of' k G g * x) g = 0 :=\n  by\n  ext g'\n  rw [Finsupp.zero_apply]\n  obtain ⟨d, rfl⟩ | h := em (∃ d, g' = g + d)\n  · rw [mod_of_apply_self_add]\n  · rw [mod_of_apply_of_not_exists_add _ _ _ h, of'_apply, single_mul_apply_of_not_exists_add _ _ h]\n#align of'_mul_mod_of of'_mul_mod_of\n\n",
 "of'_mul_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\ntheorem of'_mul_div_of (a : G) (x : AddMonoidAlgebra k G) : «expr /ᵒᶠ » (of' k G a * x) a = x :=\n  by\n  ext b\n  rw [AddMonoidAlgebra.divOf_apply, of'_apply, single_mul_apply_aux, one_mul]\n  intro c\n  exact add_right_inj _\n#align of'_mul_div_of of'_mul_div_of\n\n",
 "of'_mod_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\ntheorem of'_mod_of (g : G) : «expr %ᵒᶠ » (of' k G g) g = 0 := by\n  simpa only [one_mul] using mul_of'_mod_of (1 : AddMonoidAlgebra k G) g\n#align of'_mod_of of'_mod_of\n\n",
 "of'_dvd_iff_mod_of_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\ntheorem of'_dvd_iff_mod_of_eq_zero {x : AddMonoidAlgebra k G} {g : G} : of' k G g ∣ x ↔ «expr %ᵒᶠ » x g = 0 :=\n  by\n  constructor\n  · rintro ⟨x, rfl⟩\n    rw [of'_mul_mod_of]\n  · intro h\n    rw [← div_of_add_mod_of x g, h, add_zero]\n    exact dvd_mul_right _ _\n#align of'_dvd_iff_mod_of_eq_zero of'_dvd_iff_mod_of_eq_zero\n\n",
 "of'_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\ntheorem of'_div_of (a : G) : «expr /ᵒᶠ » (of' k G a) a = 1 := by\n  simpa only [one_mul] using mul_of'_div_of (1 : AddMonoidAlgebra k G) a\n#align of'_div_of of'_div_of\n\n",
 "mul_of'_mod_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\ntheorem mul_of'_mod_of (x : AddMonoidAlgebra k G) (g : G) : «expr %ᵒᶠ » (x * of' k G g) g = 0 :=\n  by\n  ext g'\n  rw [Finsupp.zero_apply]\n  obtain ⟨d, rfl⟩ | h := em (∃ d, g' = g + d)\n  · rw [mod_of_apply_self_add]\n  · rw [mod_of_apply_of_not_exists_add _ _ _ h, of'_apply, mul_single_apply_of_not_exists_add]\n    simpa only [add_comm] using h\n#align mul_of'_mod_of mul_of'_mod_of\n\n",
 "mul_of'_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\ntheorem mul_of'_div_of (x : AddMonoidAlgebra k G) (a : G) : «expr /ᵒᶠ » (x * of' k G a) a = x :=\n  by\n  ext b\n  rw [AddMonoidAlgebra.divOf_apply, of'_apply, mul_single_apply_aux, mul_one]\n  intro c\n  rw [add_comm]\n  exact add_right_inj _\n#align mul_of'_div_of mul_of'_div_of\n\n",
 "mod_of_apply_self_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\n@[simp]\ntheorem mod_of_apply_self_add (x : AddMonoidAlgebra k G) (g : G) (d : G) : («expr %ᵒᶠ » x g) (g + d) = 0 :=\n  modOf_apply_of_exists_add _ _ _ ⟨_, rfl⟩\n#align mod_of_apply_self_add mod_of_apply_self_add\n\n",
 "mod_of_apply_of_not_exists_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\n@[simp]\ntheorem mod_of_apply_of_not_exists_add (x : AddMonoidAlgebra k G) (g : G) (g' : G) (h : ¬∃ d, g' = g + d) :\n    («expr %ᵒᶠ » x g) g' = x g' :=\n  Finsupp.filter_apply_pos _ _ h\n#align mod_of_apply_of_not_exists_add mod_of_apply_of_not_exists_add\n\n",
 "mod_of_apply_of_exists_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\n@[simp]\ntheorem mod_of_apply_of_exists_add (x : AddMonoidAlgebra k G) (g : G) (g' : G) (h : ∃ d, g' = g + d) :\n    («expr %ᵒᶠ » x g) g' = 0 :=\n  Finsupp.filter_apply_neg _ _ <| by rwa [Classical.not_not]\n#align mod_of_apply_of_exists_add mod_of_apply_of_exists_add\n\n",
 "mod_of_apply_add_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\n@[simp]\ntheorem mod_of_apply_add_self (x : AddMonoidAlgebra k G) (g : G) (d : G) : («expr %ᵒᶠ » x g) (d + g) = 0 :=\n  modOf_apply_of_exists_add _ _ _ ⟨_, add_comm _ _⟩\n#align mod_of_apply_add_self mod_of_apply_add_self\n\n",
 "mod_of_add_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\ntheorem mod_of_add_div_of (x : AddMonoidAlgebra k G) (g : G) : «expr %ᵒᶠ » x g + of' k G g * «expr /ᵒᶠ » x g = x := by\n  rw [add_comm, div_of_add_mod_of]\n#align mod_of_add_div_of mod_of_add_div_of\n\n",
 "div_of_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n@[simp]\ntheorem div_of_zero (x : AddMonoidAlgebra k G) : «expr /ᵒᶠ » x 0 = x :=\n  by\n  ext\n  simp only [AddMonoidAlgebra.divOf_apply, zero_add]\n#align div_of_zero div_of_zero\n\n",
 "div_of_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n-- note: comapping by `+ g` has the effect of subtracting `g` from every element in the support, and\n-- discarding the elements of the support from which `g` can't be subtracted. If `G` is an additive\n-- group, such as `ℤ` when used for `laurent_polynomial`, then no discarding occurs.\n@[simp]\ntheorem div_of_apply (g : G) (x : AddMonoidAlgebra k G) (g' : G) : («expr /ᵒᶠ » x g) g' = x (g + g') :=\n  rfl\n#align div_of_apply div_of_apply\n\n",
 "div_of_add_mod_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr %ᵒᶠ » -/\ntheorem div_of_add_mod_of (x : AddMonoidAlgebra k G) (g : G) : of' k G g * «expr /ᵒᶠ » x g + «expr %ᵒᶠ » x g = x :=\n  by\n  ext g'\n  simp_rw [Finsupp.add_apply]\n  obtain ⟨d, rfl⟩ | h := em (∃ d, g' = g + d)\n  swap\n  · rw [mod_of_apply_of_not_exists_add _ _ _ h, of'_apply, single_mul_apply_of_not_exists_add _ _ h, zero_add]\n  · rw [mod_of_apply_self_add, add_zero]\n    rw [of'_apply, single_mul_apply_aux _ _ _, one_mul, div_of_apply]\n    intro a\n    exact add_right_inj _\n#align div_of_add_mod_of div_of_add_mod_of\n\n",
 "div_of_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\ntheorem div_of_add (x : AddMonoidAlgebra k G) (a b : G) : «expr /ᵒᶠ » x (a + b) = «expr /ᵒᶠ » («expr /ᵒᶠ » x a) b :=\n  by\n  ext\n  simp only [AddMonoidAlgebra.divOf_apply, add_assoc]\n#align div_of_add div_of_add\n\n",
 "add_div_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr /ᵒᶠ » -/\ntheorem add_div_of (x y : AddMonoidAlgebra k G) (g : G) : «expr /ᵒᶠ » (x + y) g = «expr /ᵒᶠ » x g + «expr /ᵒᶠ » y g :=\n  map_add _ _ _\n#align add_div_of add_div_of\n\n"}