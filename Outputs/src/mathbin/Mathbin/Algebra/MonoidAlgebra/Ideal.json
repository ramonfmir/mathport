{"mem_ideal_span_of_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print MonoidAlgebra.mem_ideal_span_of_image /-\n/-\nCopyright (c) 2023 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n/-- If `x` belongs to the ideal generated by generators in `s`, then every element of the support of\n`x` factors through an element of `s`.\n\nWe could spell `∃ d, m = d * m` as `mul_opposite.op m' ∣ mul_opposite.op m` but this would be worse.\n-/\ntheorem MonoidAlgebra.mem_ideal_span_of_image [Monoid G] [Semiring k] {s : Set G} {x : MonoidAlgebra k G} :\n    x ∈ Ideal.span («expr '' » (MonoidAlgebra.of k G) s) ↔ ∀ m ∈ x.support, ∃ m' ∈ s, ∃ d, m = d * m' :=\n  by\n  let RHS : Ideal (MonoidAlgebra k G) :=\n    { carrier := { p | ∀ m : G, m ∈ p.support → ∃ m' ∈ s, ∃ d, m = d * m' }\n      add_mem' := fun x y hx hy m hm => by\n        classical exact (Finset.mem_union.1 <| Finsupp.support_add hm).elim (hx m) (hy m)\n      zero_mem' := fun m hm => by cases hm\n      smul_mem' := fun x y hy m hm =>\n        by\n        replace hm := finset.mem_bUnion.mp (Finsupp.support_sum hm)\n        obtain ⟨xm, hxm, hm⟩ := hm\n        replace hm := finset.mem_bUnion.mp (Finsupp.support_sum hm)\n        obtain ⟨ym, hym, hm⟩ := hm\n        replace hm := finset.mem_singleton.mp (Finsupp.support_single_subset hm)\n        obtain rfl := hm\n        refine' (hy _ hym).imp fun sm => Exists.imp fun hsm => _\n        rintro ⟨d, rfl⟩\n        exact ⟨xm * d, (mul_assoc _ _ _).symm⟩ }\n  change _ ↔ x ∈ RHS\n  constructor\n  · revert x\n    refine' Ideal.span_le.2 _\n    rintro _ ⟨i, hi, rfl⟩ m hm\n    refine' ⟨_, hi, 1, _⟩\n    obtain rfl := finset.mem_singleton.mp (Finsupp.support_single_subset hm)\n    exact (one_mul _).symm\n  · intro hx\n    rw [← Finsupp.sum_single x]\n    apply Ideal.sum_mem _ fun i hi => _\n    obtain ⟨d, hd, d2, rfl⟩ := hx _ hi\n    convert Ideal.mul_mem_left _ (id <| Finsupp.single d2 <| x (d2 * d) : MonoidAlgebra k G) _\n    pick_goal 3\n    refine' Ideal.subset_span ⟨_, hd, rfl⟩\n    rw [id.def, MonoidAlgebra.of_apply, MonoidAlgebra.single_mul_single, mul_one]\n#align monoid_algebra.mem_ideal_span_of_image MonoidAlgebra.mem_ideal_span_of_image\n-/\n\n",
 "mem_ideal_span_of'_image":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n#print AddMonoidAlgebra.mem_ideal_span_of'_image /-\n/-- If `x` belongs to the ideal generated by generators in `s`, then every element of the support of\n`x` factors additively through an element of `s`.\n-/\ntheorem AddMonoidAlgebra.mem_ideal_span_of'_image [AddMonoid A] [Semiring k] {s : Set A} {x : AddMonoidAlgebra k A} :\n    x ∈ Ideal.span («expr '' » (AddMonoidAlgebra.of' k A) s) ↔ ∀ m ∈ x.support, ∃ m' ∈ s, ∃ d, m = d + m' :=\n  @MonoidAlgebra.mem_ideal_span_of_image k (Multiplicative A) _ _ _ _\n#align add_monoid_algebra.mem_ideal_span_of'_image AddMonoidAlgebra.mem_ideal_span_of'_image\n-/\n\n"}