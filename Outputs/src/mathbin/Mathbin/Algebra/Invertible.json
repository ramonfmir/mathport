{"one_sub_invOf_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print one_sub_invOf_two /-\n@[simp]\ntheorem one_sub_invOf_two [Ring α] [Invertible (2 : α)] : 1 - ((«expr⅟») 2 : α) = («expr⅟») 2 :=\n  (isUnit_of_invertible (2 : α)).mul_right_inj.1 <| by rw [mul_sub, mul_invOf_self, mul_one, bit0, add_sub_cancel]\n#align one_sub_inv_of_two one_sub_invOf_two\n-/\n\n",
 "nonzero_of_invertible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print nonzero_of_invertible /-\ntheorem nonzero_of_invertible [MulZeroOneClass α] (a : α) [Nontrivial α] [Invertible a] : a ≠ 0 := fun ha =>\n  zero_ne_one <|\n    calc\n      0 = («expr⅟») a * a := by simp [ha]\n      _ = 1 := invOf_mul_self a\n      \n#align nonzero_of_invertible nonzero_of_invertible\n-/\n\n",
 "nonempty_invertible_iff_isUnit":
 "#print nonempty_invertible_iff_isUnit /-\n@[simp]\ntheorem nonempty_invertible_iff_isUnit [Monoid α] (a : α) : Nonempty (Invertible a) ↔ IsUnit a :=\n  ⟨nonempty.rec <| @isUnit_of_invertible _ _ _, IsUnit.nonempty_invertible⟩\n#align nonempty_invertible_iff_is_unit nonempty_invertible_iff_isUnit\n-/\n\n",
 "nonempty_invertible":
 "#print IsUnit.nonempty_invertible /-\ntheorem IsUnit.nonempty_invertible [Monoid α] {a : α} (h : IsUnit a) : Nonempty (Invertible a) :=\n  let ⟨x, hx⟩ := h\n  ⟨x.invertible.copy _ hx.symm⟩\n#align is_unit.nonempty_invertible IsUnit.nonempty_invertible\n-/\n\n",
 "mul_mul_invOf_self_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print mul_mul_invOf_self_cancel /-\n@[simp]\ntheorem mul_mul_invOf_self_cancel [Monoid α] (a b : α) [Invertible b] : a * b * («expr⅟») b = a := by simp [mul_assoc]\n#align mul_mul_inv_of_self_cancel mul_mul_invOf_self_cancel\n-/\n\n",
 "mul_inv_cancel_of_invertible":
 "#print mul_inv_cancel_of_invertible /-\n@[simp]\ntheorem mul_inv_cancel_of_invertible (a : α) [Invertible a] : a * a⁻¹ = 1 :=\n  mul_inv_cancel (nonzero_of_invertible a)\n#align mul_inv_cancel_of_invertible mul_inv_cancel_of_invertible\n-/\n\n",
 "mul_invOf_self_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print mul_invOf_self_assoc /-\n@[simp]\ntheorem mul_invOf_self_assoc [Monoid α] (a b : α) [Invertible a] : a * ((«expr⅟») a * b) = b := by\n  rw [← mul_assoc, mul_invOf_self, one_mul]\n#align mul_inv_of_self_assoc mul_invOf_self_assoc\n-/\n\n",
 "mul_invOf_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print mul_invOf_self /-\n@[simp]\ntheorem mul_invOf_self [Mul α] [One α] (a : α) [Invertible a] : a * («expr⅟») a = 1 :=\n  invertible.mul_inv_of_self\n#align mul_inv_of_self mul_invOf_self\n-/\n\n",
 "mul_invOf_mul_self_cancel":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print mul_invOf_mul_self_cancel /-\n@[simp]\ntheorem mul_invOf_mul_self_cancel [Monoid α] (a b : α) [Invertible b] : a * («expr⅟») b * b = a := by simp [mul_assoc]\n#align mul_inv_of_mul_self_cancel mul_invOf_mul_self_cancel\n-/\n\n",
 "mul_div_cancel_of_invertible":
 "#print mul_div_cancel_of_invertible /-\n@[simp]\ntheorem mul_div_cancel_of_invertible (a b : α) [Invertible b] : a * b / b = a :=\n  mul_div_cancel a (nonzero_of_invertible b)\n#align mul_div_cancel_of_invertible mul_div_cancel_of_invertible\n-/\n\n",
 "map_invOf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print map_invOf /-\n/-- Note that the `invertible (f r)` argument can be satisfied by using `letI := invertible.map f r`\nbefore applying this lemma. -/\ntheorem map_invOf {R : Type _} {S : Type _} {F : Type _} [MulOneClass R] [Monoid S] [MonoidHomClass F R S] (f : F)\n    (r : R) [Invertible r] [Invertible (f r)] : f ((«expr⅟») r) = («expr⅟») (f r) :=\n  by\n  letI := Invertible.map f r\n  convert rfl\n#align map_inv_of map_invOf\n-/\n\n",
 "isUnit_of_invertible":
 "#print isUnit_of_invertible /-\ntheorem isUnit_of_invertible [Monoid α] (a : α) [Invertible a] : IsUnit a :=\n  ⟨unitOfInvertible a, rfl⟩\n#align is_unit_of_invertible isUnit_of_invertible\n-/\n\n",
 "invertible_unique":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invertible_unique /-\ntheorem invertible_unique {α : Type u} [Monoid α] (a b : α) [Invertible a] [Invertible b] (h : a = b) :\n    («expr⅟») a = («expr⅟») b := by\n  apply invOf_eq_right_inv\n  rw [h, mul_invOf_self]\n#align invertible_unique invertible_unique\n-/\n\n",
 "inverse_invertible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print Ring.inverse_invertible /-\n/-- A variant of `ring.inverse_unit`. -/\n@[simp]\ntheorem Ring.inverse_invertible (x : α) [Invertible x] : Ring.inverse x = («expr⅟») x :=\n  Ring.inverse_unit (unitOfInvertible _)\n#align ring.inverse_invertible Ring.inverse_invertible\n-/\n\n",
 "inv_mul_cancel_of_invertible":
 "#print inv_mul_cancel_of_invertible /-\n@[simp]\ntheorem inv_mul_cancel_of_invertible (a : α) [Invertible a] : a⁻¹ * a = 1 :=\n  inv_mul_cancel (nonzero_of_invertible a)\n#align inv_mul_cancel_of_invertible inv_mul_cancel_of_invertible\n-/\n\n",
 "invOf_units":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ˣ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_units /-\n@[simp]\ntheorem invOf_units [Monoid α] (u : «expr ˣ» α) [Invertible (u : α)] : («expr⅟») (u : α) = ↑u⁻¹ :=\n  invOf_eq_right_inv u.mul_inv\n#align inv_of_units invOf_units\n-/\n\n",
 "invOf_two_add_invOf_two":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_two_add_invOf_two /-\n@[simp]\ntheorem invOf_two_add_invOf_two [NonAssocSemiring α] [Invertible (2 : α)] : ((«expr⅟») 2 : α) + ((«expr⅟») 2 : α) = 1 :=\n  by rw [← two_mul, mul_invOf_self]\n#align inv_of_two_add_inv_of_two invOf_two_add_invOf_two\n-/\n\n",
 "invOf_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print Commute.invOf_right /-\ntheorem Commute.invOf_right [Monoid α] {a b : α} [Invertible b] (h : Commute a b) : Commute a ((«expr⅟») b) :=\n  calc\n    a * («expr⅟») b = («expr⅟») b * (b * a * («expr⅟») b) := by simp [mul_assoc]\n    _ = («expr⅟») b * (a * b * («expr⅟») b) := by rw [h.eq]\n    _ = («expr⅟») b * a := by simp [mul_assoc]\n    \n#align commute.inv_of_right Commute.invOf_right\n-/\n\n",
 "invOf_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_one /-\n@[simp]\ntheorem invOf_one [Monoid α] [Invertible (1 : α)] : («expr⅟») (1 : α) = 1 :=\n  invOf_eq_right_inv (mul_one _)\n#align inv_of_one invOf_one\n-/\n\n",
 "invOf_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_neg /-\n@[simp]\ntheorem invOf_neg [Monoid α] [HasDistribNeg α] (a : α) [Invertible a] [Invertible (-a)] :\n    («expr⅟») (-a) = -(«expr⅟») a :=\n  invOf_eq_right_inv (by simp)\n#align inv_of_neg invOf_neg\n-/\n\n",
 "invOf_mul_self_assoc":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_mul_self_assoc /-\n@[simp]\ntheorem invOf_mul_self_assoc [Monoid α] (a b : α) [Invertible a] : («expr⅟») a * (a * b) = b := by\n  rw [← mul_assoc, invOf_mul_self, one_mul]\n#align inv_of_mul_self_assoc invOf_mul_self_assoc\n-/\n\n",
 "invOf_mul_self":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_mul_self /-\n/-\nCopyright (c) 2020 Anne Baanen. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Anne Baanen\n-/\n-- This notation has the same precedence as `has_inv.inv`.\n@[simp]\ntheorem invOf_mul_self [Mul α] [One α] (a : α) [Invertible a] : («expr⅟») a * a = 1 :=\n  invertible.inv_of_mul_self\n#align inv_of_mul_self invOf_mul_self\n-/\n\n",
 "invOf_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_mul /-\n@[simp]\ntheorem invOf_mul [Monoid α] (a b : α) [Invertible a] [Invertible b] [Invertible (a * b)] :\n    («expr⅟») (a * b) = («expr⅟») b * («expr⅟») a :=\n  invOf_eq_right_inv (by simp [← mul_assoc])\n#align inv_of_mul invOf_mul\n-/\n\n",
 "invOf_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print Commute.invOf_left /-\ntheorem Commute.invOf_left [Monoid α] {a b : α} [Invertible b] (h : Commute b a) : Commute ((«expr⅟») b) a :=\n  calc\n    («expr⅟») b * a = («expr⅟») b * (a * b * («expr⅟») b) := by simp [mul_assoc]\n    _ = («expr⅟») b * (b * a * («expr⅟») b) := by rw [h.eq]\n    _ = a * («expr⅟») b := by simp [mul_assoc]\n    \n#align commute.inv_of_left Commute.invOf_left\n-/\n\n",
 "invOf_invOf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_invOf /-\n@[simp]\ntheorem invOf_invOf [Monoid α] (a : α) [Invertible a] [Invertible ((«expr⅟») a)] : («expr⅟») ((«expr⅟») a) = a :=\n  invOf_eq_right_inv (invOf_mul_self _)\n#align inv_of_inv_of invOf_invOf\n-/\n\n",
 "invOf_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_inj /-\n@[simp]\ntheorem invOf_inj [Monoid α] {a b : α} [Invertible a] [Invertible b] : («expr⅟») a = («expr⅟») b ↔ a = b :=\n  ⟨invertible_unique _ _, invertible_unique _ _⟩\n#align inv_of_inj invOf_inj\n-/\n\n",
 "invOf_eq_right_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_eq_right_inv /-\ntheorem invOf_eq_right_inv [Monoid α] {a b : α} [Invertible a] (hac : a * b = 1) : («expr⅟») a = b :=\n  left_inv_eq_right_inv (invOf_mul_self _) hac\n#align inv_of_eq_right_inv invOf_eq_right_inv\n-/\n\n",
 "invOf_eq_left_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_eq_left_inv /-\ntheorem invOf_eq_left_inv [Monoid α] {a b : α} [Invertible a] (hac : b * a = 1) : («expr⅟») a = b :=\n  (left_inv_eq_right_inv hac (mul_invOf_self _)).symm\n#align inv_of_eq_left_inv invOf_eq_left_inv\n-/\n\n",
 "invOf_eq_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_eq_inv /-\n@[simp]\ntheorem invOf_eq_inv (a : α) [Invertible a] : («expr⅟») a = a⁻¹ :=\n  invOf_eq_right_inv (mul_inv_cancel (nonzero_of_invertible a))\n#align inv_of_eq_inv invOf_eq_inv\n-/\n\n",
 "invOf_eq_group_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_eq_group_inv /-\n@[simp]\ntheorem invOf_eq_group_inv [Group α] (a : α) [Invertible a] : («expr⅟») a = a⁻¹ :=\n  invOf_eq_right_inv (mul_inv_self a)\n#align inv_of_eq_group_inv invOf_eq_group_inv\n-/\n\n",
 "invOf_div":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print invOf_div /-\n@[simp]\ntheorem invOf_div (a b : α) [Invertible a] [Invertible b] [Invertible (a / b)] : («expr⅟») (a / b) = b / a :=\n  invOf_eq_right_inv (by simp [← mul_div_assoc])\n#align inv_of_div invOf_div\n-/\n\n",
 "div_self_of_invertible":
 "#print div_self_of_invertible /-\n@[simp]\ntheorem div_self_of_invertible (a : α) [Invertible a] : a / a = 1 :=\n  div_self (nonzero_of_invertible a)\n#align div_self_of_invertible div_self_of_invertible\n-/\n\n",
 "div_mul_cancel_of_invertible":
 "#print div_mul_cancel_of_invertible /-\n@[simp]\ntheorem div_mul_cancel_of_invertible (a b : α) [Invertible b] : a / b * b = a :=\n  div_mul_cancel a (nonzero_of_invertible b)\n#align div_mul_cancel_of_invertible div_mul_cancel_of_invertible\n-/\n\n",
 "commute_invOf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⅟» -/\n#print commute_invOf /-\ntheorem commute_invOf {M : Type _} [One M] [Mul M] (m : M) [Invertible m] : Commute m ((«expr⅟») m) :=\n  calc\n    m * («expr⅟») m = 1 := mul_invOf_self m\n    _ = («expr⅟») m * m := (invOf_mul_self m).symm\n    \n#align commute_inv_of commute_invOf\n-/\n\n"}