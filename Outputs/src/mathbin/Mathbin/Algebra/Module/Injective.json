{"le_max":
 "theorem extension_of.le_max {c : Set (ExtensionOf i f)} (hchain : IsChain (· ≤ ·) c) (hnonempty : c.nonempty)\n    (a : ExtensionOf i f) (ha : a ∈ c) : a ≤ ExtensionOf.max hchain hnonempty :=\n  LinearPMap.le_supₛ (IsChain.directedOn <| chain_linearPMap_of_chain_extensionOf hchain) <|\n    (Set.mem_image _ _ _).mpr ⟨a, ha, rfl⟩\n#align extension_of.le_max extension_of.le_max\n\n",
 "injective_object_of_injective_module":
 "#print Module.injective_object_of_injective_module /-\n/-\nCopyright (c) 2022 Jujian Zhang. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jujian Zhang\n-/\ntheorem Module.injective_object_of_injective_module [Module.Injective.{u, v} R Q] :\n    CategoryTheory.Injective.{max u v} (⟨Q⟩ : ModuleCat.{max u v} R) :=\n  {\n    factors := fun X Y g f mn =>\n      by\n      rcases module.injective.out X Y f ((ModuleCat.mono_iff_injective f).mp mn) g with ⟨h, eq1⟩\n      exact ⟨h, LinearMap.ext eq1⟩ }\n#align module.injective_object_of_injective_module Module.injective_object_of_injective_module\n-/\n\n",
 "injective_module_of_injective_object":
 "#print Module.injective_module_of_injective_object /-\ntheorem Module.injective_module_of_injective_object [CategoryTheory.Injective.{max u v} (⟨Q⟩ : ModuleCat.{max u v} R)] :\n    Module.Injective.{u, v} R Q :=\n  {\n    out := fun X Y ins1 ins2 ins3 ins4 f hf g => by\n      skip\n      rcases@category_theory.injective.factors (ModuleCat R) _ ⟨Q⟩ _ ⟨X⟩ ⟨Y⟩ g f\n          ((ModuleCat.mono_iff_injective _).mpr hf) with\n        ⟨h, rfl⟩\n      exact ⟨h, fun x => rfl⟩ }\n#align module.injective_module_of_injective_object Module.injective_module_of_injective_object\n-/\n\n",
 "injective_iff_injective_object":
 "#print Module.injective_iff_injective_object /-\ntheorem Module.injective_iff_injective_object :\n    Module.Injective.{u, v} R Q ↔ CategoryTheory.Injective.{max u v} (⟨Q⟩ : ModuleCat.{max u v} R) :=\n  ⟨fun h => @Module.injective_object_of_injective_module R _ Q _ _ h, fun h =>\n    @Module.injective_module_of_injective_object R _ Q _ _ h⟩\n#align module.injective_iff_injective_object Module.injective_iff_injective_object\n-/\n\n",
 "injective":
 "/-- **Baer's criterion** for injective module : a Baer module is an injective module, i.e. if every\nlinear map from an ideal can be extended, then the module is injective.-/\nprotected theorem injective (h : Module.Baer R Q) : Module.Injective R Q :=\n  {\n    out := fun X Y ins1 ins2 ins3 ins4 i hi f =>\n      haveI : Fact (function.injective i) := ⟨hi⟩\n      ⟨{  to_fun := fun y =>\n            (extension_of_max i f).to_linear_pmap ⟨y, (extension_of_max_to_submodule_eq_top i f h).symm ▸ trivial⟩\n          map_add' := fun x y => by\n            rw [← LinearPMap.map_add]\n            congr\n          map_smul' := fun r x => by\n            rw [← LinearPMap.map_smul]\n            congr },\n        fun x => ((extension_of_max i f).is_extension x).symm⟩ }\n#align injective injective\n\n",
 "extension_to_fun_wd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem extension_of_max_adjoin.extension_to_fun_wd (h : Module.Baer R Q) {y : N}\n    (x : «expr ⊔ » (extensionOfMax i f).domain (Submodule.span R {y})) (a : (extensionOfMax i f).domain) (r : R)\n    (eq1 : ↑x = ↑a + «expr • » r y) :\n    ExtensionOfMaxAdjoin.extensionToFun i f h x =\n      (extensionOfMax i f).to_linear_pmap a + ExtensionOfMaxAdjoin.extendIdealTo i f h y r :=\n  by\n  cases' a with a ha\n  rw [Subtype.coe_mk] at eq1\n  have eq2 : (extension_of_max_adjoin.fst i x - a : N) = «expr • » (r - extension_of_max_adjoin.snd i x) y := by\n    rwa [extension_of_max_adjoin.eqn, ← sub_eq_zero, ← sub_sub_sub_eq, sub_eq_zero, ← sub_smul] at eq1\n  have eq3 :=\n    extension_of_max_adjoin.extend_ideal_to_eq i f h (r - extension_of_max_adjoin.snd i x)\n      (by rw [← eq2] <;> exact Submodule.sub_mem _ (extension_of_max_adjoin.fst i x).2 ha)\n  simp only [map_sub, sub_smul, sub_eq_iff_eq_add] at eq3\n  unfold extension_of_max_adjoin.extension_to_fun\n  rw [eq3, ← add_assoc, ← (extension_of_max i f).to_linear_pmap.map_add, AddMemClass.mk_add_mk]\n  congr\n  ext\n  rw [Subtype.coe_mk, add_sub, ← eq1]\n  exact eq_sub_of_add_eq (extension_of_max_adjoin.eqn _ _).symm\n#align extension_of_max_adjoin.extension_to_fun_wd extension_of_max_adjoin.extension_to_fun_wd\n\n",
 "extension_of_max_to_submodule_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\ntheorem extension_of_max_to_submodule_eq_top (h : Module.Baer R Q) : (extensionOfMax i f).domain = «expr⊤» :=\n  by\n  refine' submodule.eq_top_iff'.mpr fun y => _\n  rw [← extension_of_max_is_max i f _ (extension_of_max_le i f h), extension_of_max_adjoin, Submodule.mem_sup]\n  exact ⟨0, Submodule.zero_mem _, y, Submodule.mem_span_singleton_self _, zero_add _⟩\n#align extension_of_max_to_submodule_eq_top extension_of_max_to_submodule_eq_top\n\n",
 "extension_of_max_le":
 "theorem extension_of_max_le (h : Module.Baer R Q) {y : N} : extensionOfMax i f ≤ extensionOfMaxAdjoin i f h y :=\n  ⟨le_sup_left, fun x x' EQ => by\n    symm\n    change extension_of_max_adjoin.extension_to_fun i f h _ = _\n    rw [extension_of_max_adjoin.extension_to_fun_wd i f h x' x 0 (by simp [EQ]), map_zero, add_zero]⟩\n#align extension_of_max_le extension_of_max_le\n\n",
 "extension_of_max_is_max":
 "theorem extension_of_max_is_max : ∀ a : ExtensionOf i f, extensionOfMax i f ≤ a → a = extensionOfMax i f :=\n  (@zorn_nonempty_partialOrder (ExtensionOf i f) _ ⟨Inhabited.default⟩ fun c hchain hnonempty =>\n      ⟨ExtensionOf.max hchain hnonempty, ExtensionOf.le_max hchain hnonempty⟩).some_spec\n#align extension_of_max_is_max extension_of_max_is_max\n\n",
 "extend_ideal_to_wd'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem extension_of_max_adjoin.extend_ideal_to_wd' (h : Module.Baer R Q) {y : N} (r : R) (eq1 : «expr • » r y = 0) :\n    ExtensionOfMaxAdjoin.extendIdealTo i f h y r = 0 :=\n  by\n  rw [extension_of_max_adjoin.extend_ideal_to_is_extension i f h y r\n      (by rw [eq1] <;> exact Submodule.zero_mem _ : «expr • » r y ∈ _)]\n  simp only [extension_of_max_adjoin.ideal_to, LinearMap.coe_mk, eq1, Subtype.coe_mk, ← ZeroMemClass.zero_def,\n    (extension_of_max i f).to_linear_pmap.map_zero]\n#align extension_of_max_adjoin.extend_ideal_to_wd' extension_of_max_adjoin.extend_ideal_to_wd'\n\n",
 "extend_ideal_to_wd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem extension_of_max_adjoin.extend_ideal_to_wd (h : Module.Baer R Q) {y : N} (r r' : R)\n    (eq1 : «expr • » r y = «expr • » r' y) :\n    ExtensionOfMaxAdjoin.extendIdealTo i f h y r = ExtensionOfMaxAdjoin.extendIdealTo i f h y r' :=\n  by\n  rw [← sub_eq_zero, ← map_sub]\n  convert extension_of_max_adjoin.extend_ideal_to_wd' i f h (r - r') _\n  rw [sub_smul, sub_eq_zero, eq1]\n#align extension_of_max_adjoin.extend_ideal_to_wd extension_of_max_adjoin.extend_ideal_to_wd\n\n",
 "extend_ideal_to_is_extension":
 "theorem extension_of_max_adjoin.extend_ideal_to_is_extension (h : Module.Baer R Q) (y : N) :\n    ∀ (x : R) (mem : x ∈ ExtensionOfMaxAdjoin.ideal i f y),\n      ExtensionOfMaxAdjoin.extendIdealTo i f h y x = ExtensionOfMaxAdjoin.idealTo i f y ⟨x, mem⟩ :=\n  (h (ExtensionOfMaxAdjoin.ideal i f y) (ExtensionOfMaxAdjoin.idealTo i f y)).some_spec\n#align extension_of_max_adjoin.extend_ideal_to_is_extension extension_of_max_adjoin.extend_ideal_to_is_extension\n\n",
 "extend_ideal_to_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem extension_of_max_adjoin.extend_ideal_to_eq (h : Module.Baer R Q) {y : N} (r : R)\n    (hr : «expr • » r y ∈ (extensionOfMax i f).domain) :\n    ExtensionOfMaxAdjoin.extendIdealTo i f h y r = (extensionOfMax i f).to_linear_pmap ⟨«expr • » r y, hr⟩ := by\n  simp only [extension_of_max_adjoin.extend_ideal_to_is_extension i f h _ _ hr, extension_of_max_adjoin.ideal_to,\n    LinearMap.coe_mk, Subtype.coe_mk]\n#align extension_of_max_adjoin.extend_ideal_to_eq extension_of_max_adjoin.extend_ideal_to_eq\n\n",
 "ext_iff":
 "theorem extension_of.ext_iff {a b : ExtensionOf i f} :\n    a = b ↔\n      ∃ domain_eq : a.domain = b.domain,\n        ∀ ⦃x : a.domain⦄ ⦃y : b.domain⦄, (x : N) = y → a.to_linear_pmap x = b.to_linear_pmap y :=\n  ⟨fun r => r ▸ ⟨rfl, fun x y h => congr_arg a.to_fun <| by exact_mod_cast h⟩, fun ⟨h1, h2⟩ => ExtensionOf.ext h1 h2⟩\n#align extension_of.ext_iff extension_of.ext_iff\n\n",
 "ext":
 "@[ext]\ntheorem extension_of.ext {a b : ExtensionOf i f} (domain_eq : a.domain = b.domain)\n    (to_fun_eq : ∀ ⦃x : a.domain⦄ ⦃y : b.domain⦄, (x : N) = y → a.to_linear_pmap x = b.to_linear_pmap y) : a = b :=\n  by\n  rcases a with ⟨a, a_le, e1⟩\n  rcases b with ⟨b, b_le, e2⟩\n  congr\n  exact LinearPMap.ext domain_eq to_fun_eq\n#align extension_of.ext extension_of.ext\n\n",
 "eqn":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem extension_of_max_adjoin.eqn {y : N} (x : «expr ⊔ » (extensionOfMax i f).domain (Submodule.span R {y})) :\n    ↑x = ↑(ExtensionOfMaxAdjoin.fst i x) + «expr • » (ExtensionOfMaxAdjoin.snd i x) y :=\n  (extension_of_max_adjoin.aux1 i x).some_spec.some_spec\n#align extension_of_max_adjoin.eqn extension_of_max_adjoin.eqn\n\n",
 "chain_linear_pmap_of_chain_extension_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem chain_linear_pmap_of_chain_extension_of {c : Set (ExtensionOf i f)} (hchain : IsChain (· ≤ ·) c) :\n    IsChain (· ≤ ·) <| «expr '' » (fun x : ExtensionOf i f => x.to_linear_pmap) c :=\n  by\n  rintro _ ⟨a, a_mem, rfl⟩ _ ⟨b, b_mem, rfl⟩ neq\n  exact hchain a_mem b_mem (ne_of_apply_ne _ neq)\n#align chain_linear_pmap_of_chain_extension_of chain_linear_pmap_of_chain_extension_of\n\n",
 "aux1":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprivate theorem extension_of_max_adjoin.aux1 {y : N}\n    (x : «expr ⊔ » (extensionOfMax i f).domain (Submodule.span R {y})) :\n    ∃ (a : (extensionOfMax i f).domain)(b : R), x.1 = a.1 + «expr • » b y :=\n  by\n  have mem1 : x.1 ∈ (_ : Set _) := x.2\n  rw [Submodule.coe_sup] at mem1\n  rcases mem1 with ⟨a, b, a_mem, b_mem : b ∈ (Submodule.span R _ : Submodule R N), eq1⟩\n  rw [Submodule.mem_span_singleton] at b_mem\n  rcases b_mem with ⟨z, eq2⟩\n  exact ⟨⟨a, a_mem⟩, z, by rw [← eq1, ← eq2]⟩\n#align extension_of_max_adjoin.aux1 extension_of_max_adjoin.aux1\n\n"}