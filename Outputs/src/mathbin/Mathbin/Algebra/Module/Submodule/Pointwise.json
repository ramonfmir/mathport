{"zero_eq_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem zero_eq_bot : (0 : submodule R M) = «expr⊥» :=\n  rfl\n#align zero_eq_bot zero_eq_bot\n\n",
 "span_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem span_smul (a : α) (s : set M) : span R («expr • » a s) = «expr • » a (span R s) :=\n  eq.symm (span_image _).symm\n#align span_smul span_smul\n\n",
 "smul_sup'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- See also `submodule.smul_sup`. -/\ntheorem smul_sup' (a : α) (S T : submodule R M) :\n    «expr • » a («expr ⊔ » S T) = «expr ⊔ » («expr • » a S) («expr • » a T) :=\n  map_sup _ _ _\n#align smul_sup' smul_sup'\n\n",
 "smul_span":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_span (a : α) (s : set M) : «expr • » a (span R s) = span R («expr • » a s) :=\n  map_span _ _\n#align smul_span smul_span\n\n",
 "smul_mem_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_mem_pointwise_smul (m : M) (a : α) (S : submodule R M) : m ∈ S → «expr • » a m ∈ «expr • » a S :=\n  (Set.smul_mem_smul_set : _ → _ ∈ «expr • » a (S : set M))\n#align smul_mem_pointwise_smul smul_mem_pointwise_smul\n\n",
 "smul_le_self_of_tower":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_le_self_of_tower {α : Type _} [Semiring α] [Module α R] [Module α M] [SMulCommClass α R M]\n    [IsScalarTower α R M] (a : α) (S : submodule R M) : «expr • » a S ≤ S :=\n  by\n  rintro y ⟨x, hx, rfl⟩\n  exact smul_of_tower_mem _ a hx\n#align smul_le_self_of_tower smul_le_self_of_tower\n\n",
 "smul_bot'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/-- See also `submodule.smul_bot`. -/\n@[simp]\ntheorem smul_bot' (a : α) : «expr • » a («expr⊥» : submodule R M) = «expr⊥» :=\n  map_bot _\n#align smul_bot' smul_bot'\n\n",
 "pointwise_smul_to_add_submonoid":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_to_add_submonoid (a : α) (S : submodule R M) :\n    («expr • » a S).to_add_submonoid = «expr • » a S.to_add_submonoid :=\n  rfl\n#align pointwise_smul_to_add_submonoid pointwise_smul_to_add_submonoid\n\n",
 "pointwise_smul_to_add_subgroup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem pointwise_smul_to_add_subgroup {R M : Type _} [Ring R] [add_comm_group M] [DistribMulAction α M] [Module R M]\n    [SMulCommClass α R M] (a : α) (S : submodule R M) :\n    («expr • » a S).to_add_subgroup = «expr • » a S.to_add_subgroup :=\n  rfl\n#align pointwise_smul_to_add_subgroup pointwise_smul_to_add_subgroup\n\n",
 "neg_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊤» -/\n@[simp]\ntheorem neg_top : -(«expr⊤» : submodule R M) = «expr⊤» :=\n  SetLike.coe_injective <| set.neg_univ\n#align neg_top neg_top\n\n",
 "neg_to_add_submonoid":
 "@[simp]\ntheorem neg_to_add_submonoid (S : submodule R M) : (-S).to_add_submonoid = -S.to_add_submonoid :=\n  rfl\n#align neg_to_add_submonoid neg_to_add_submonoid\n\n",
 "neg_supr":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n@[simp]\ntheorem neg_supr {ι : Sort _} (S : ι → submodule R M) :\n    -«expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (S i) =\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (-S i) :=\n  (neg_order_iso : «expr ≃o » (submodule R M) (submodule R M)).map_supr _\n#align neg_supr neg_supr\n\n",
 "neg_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem neg_sup (S T : submodule R M) : -«expr ⊔ » S T = «expr ⊔ » (-S) (-T) :=\n  (neg_order_iso : «expr ≃o » (submodule R M) (submodule R M)).map_sup S T\n#align neg_sup neg_sup\n\n",
 "neg_le_neg":
 "#print neg_le_neg /-\n@[simp]\ntheorem neg_le_neg (S T : submodule R M) : -S ≤ -T ↔ S ≤ T :=\n  SetLike.coe_subset_coe.symm.trans set.neg_subset_neg\n#align neg_le_neg neg_le_neg\n-/\n\n",
 "neg_le":
 "#print neg_le /-\ntheorem neg_le (S T : submodule R M) : -S ≤ T ↔ S ≤ -T :=\n  SetLike.coe_subset_coe.symm.trans set.neg_subset\n#align neg_le neg_le\n-/\n\n",
 "neg_infi":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃o » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨅ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , » -/\n@[simp]\ntheorem neg_infi {ι : Sort _} (S : ι → submodule R M) :\n    -«expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (S i) =\n      «expr⨅ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨅ , »\" (-S i) :=\n  (neg_order_iso : «expr ≃o » (submodule R M) (submodule R M)).map_infi _\n#align neg_infi neg_infi\n\n",
 "neg_inf":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊓ » -/\n@[simp]\ntheorem neg_inf (S T : submodule R M) : -«expr ⊓ » S T = «expr ⊓ » (-S) (-T) :=\n  SetLike.coe_injective set.inter_neg\n#align neg_inf neg_inf\n\n",
 "neg_eq_self":
 "#print neg_eq_self /-\n@[simp]\ntheorem neg_eq_self [Ring R] [add_comm_group M] [Module R M] (p : submodule R M) : -p = p :=\n  ext fun _ => p.neg_mem_iff\n#align neg_eq_self neg_eq_self\n-/\n\n",
 "neg_bot":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\n@[simp]\ntheorem neg_bot : -(«expr⊥» : submodule R M) = «expr⊥» :=\n  SetLike.coe_injective <| (set.neg_singleton 0).trans <| congr_arg _ neg_zero\n#align neg_bot neg_bot\n\n",
 "mem_neg":
 "@[simp]\ntheorem mem_neg {g : M} {S : submodule R M} : g ∈ -S ↔ -g ∈ S :=\n  iff.rfl\n#align mem_neg mem_neg\n\n",
 "coe_set_neg":
 "/-\nCopyright (c) 2021 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-/\n@[simp]\ntheorem coe_set_neg (S : submodule R M) : ↑(-S) = -(S : set M) :=\n  rfl\n#align coe_set_neg coe_set_neg\n\n",
 "coe_pointwise_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem coe_pointwise_smul (a : α) (S : submodule R M) : ↑(«expr • » a S) = «expr • » a (S : set M) :=\n  rfl\n#align coe_pointwise_smul coe_pointwise_smul\n\n",
 "closure_neg":
 "theorem closure_neg (s : set M) : span R (-s) = -span R s :=\n  by\n  apply le_antisymm\n  · rw [span_le, coe_set_neg, ← set.neg_subset, neg_neg]\n    exact subset_span\n  · rw [neg_le, span_le, coe_set_neg, ← set.neg_subset]\n    exact subset_span\n#align closure_neg closure_neg\n\n",
 "add_eq_sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\n@[simp]\ntheorem add_eq_sup (p q : submodule R M) : p + q = «expr ⊔ » p q :=\n  rfl\n#align add_eq_sup add_eq_sup\n\n"}