{"zero_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem zero_comp (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) :\n    ((0 : «expr →ₛₗ[ ] » M₂ σ₂₃ M₃).comp f : «expr →ₛₗ[ ] » M σ₁₃ M₃) = 0 :=\n  rfl\n#align zero_comp zero_comp\n\n",
 "zero_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n-- example application of this instance: if S -> T -> R are homomorphisms of commutative rings and\n-- M and M₂ are R-modules then the S-module and T-module structures on Hom_R(M,M₂) are compatible.\n@[simp]\ntheorem zero_apply (x : M) : (0 : «expr →ₛₗ[ ] » M σ₁₂ M₂) x = 0 :=\n  rfl\n#align zero_apply zero_apply\n\n",
 "to_rat_linear_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\ntheorem add_monoid_hom.to_rat_linear_map_injective [add_comm_group M] [Module (exprℚ) M] [add_comm_group M₂]\n    [Module (exprℚ) M₂] : function.injective (@add_monoid_hom.to_rat_linear_map M M₂ _ _ _ _) :=\n  by\n  intro f g h\n  ext\n  exact linear_map.congr_fun h x\n#align add_monoid_hom.to_rat_linear_map_injective add_monoid_hom.to_rat_linear_map_injective\n\n",
 "to_nat_linear_map_injective":
 "theorem add_monoid_hom.to_nat_linear_map_injective [add_comm_monoid M] [add_comm_monoid M₂] :\n    function.injective (@add_monoid_hom.to_nat_linear_map M M₂ _ _) :=\n  by\n  intro f g h\n  ext\n  exact linear_map.congr_fun h x\n#align add_monoid_hom.to_nat_linear_map_injective add_monoid_hom.to_nat_linear_map_injective\n\n",
 "to_linear_map_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem to_linear_map_injective {f g : «expr →+[ ] » M R M₂}\n    (h : (f : «expr →ₗ[ ] » M R M₂) = (g : «expr →ₗ[ ] » M R M₂)) : f = g :=\n  by\n  ext m\n  exact linear_map.congr_fun h m\n#align to_linear_map_injective to_linear_map_injective\n\n",
 "to_linear_map_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+[ ] » -/\n@[simp]\ntheorem to_linear_map_eq_coe (f : «expr →+[ ] » M R M₂) : f.to_linear_map = ↑f :=\n  rfl\n#align to_linear_map_eq_coe to_linear_map_eq_coe\n\n",
 "to_int_linear_map_injective":
 "theorem add_monoid_hom.to_int_linear_map_injective [add_comm_group M] [add_comm_group M₂] :\n    function.injective (@add_monoid_hom.to_int_linear_map M M₂ _ _) :=\n  by\n  intro f g h\n  ext\n  exact linear_map.congr_fun h x\n#align add_monoid_hom.to_int_linear_map_injective add_monoid_hom.to_int_linear_map_injective\n\n",
 "to_fun_eq_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem to_fun_eq_coe {f : «expr →ₛₗ[ ] » M σ M₃} : f.to_fun = (f : M → M₃) :=\n  rfl\n#align to_fun_eq_coe to_fun_eq_coe\n\n",
 "to_add_monoid_hom_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\ntheorem to_add_monoid_hom_injective :\n    function.injective (to_add_monoid_hom : «expr →ₛₗ[ ] » M σ M₃ → «expr →+ » M M₃) := fun f g h =>\n  ext <| AddMonoidHom.congr_fun h\n#align to_add_monoid_hom_injective to_add_monoid_hom_injective\n\n",
 "to_add_monoid_hom_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem to_add_monoid_hom_coe : «expr⇑ » f.to_add_monoid_hom = f :=\n  rfl\n#align to_add_monoid_hom_coe to_add_monoid_hom_coe\n\n",
 "sub_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\ntheorem sub_comp (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) (g h : «expr →ₛₗ[ ] » M₂ σ₂₃ N₃) :\n    (g - h).comp f = g.comp f - h.comp f :=\n  rfl\n#align sub_comp sub_comp\n\n",
 "sub_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem sub_apply (f g : «expr →ₛₗ[ ] » M σ₁₂ N₂) (x : M) : (f - g) x = f x - g x :=\n  rfl\n#align sub_apply sub_apply\n\n",
 "smul_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\nprotected theorem smul_def (f : module.End R M) (a : M) : «expr • » f a = f a :=\n  rfl\n#align smul_def smul_def\n\n",
 "smul_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_comp (a : S₃) (g : «expr →ₛₗ[ ] » M₂ σ₂₃ M₃) (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) :\n    («expr • » a g).comp f = «expr • » a (g.comp f) :=\n  rfl\n#align smul_comp smul_comp\n\n",
 "smul_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem smul_apply (a : S) (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) (x : M) : («expr • » a f) x = «expr • » a (f x) :=\n  rfl\n#align smul_apply smul_apply\n\n",
 "restrict_scalars_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem restrict_scalars_injective :\n    function.injective (restrict_scalars R : «expr →ₗ[ ] » M S M₂ → «expr →ₗ[ ] » M R M₂) := fun fₗ gₗ h =>\n  ext (linear_map.congr_fun h : _)\n#align restrict_scalars_injective restrict_scalars_injective\n\n",
 "restrict_scalars_inj":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp]\ntheorem restrict_scalars_inj (fₗ gₗ : «expr →ₗ[ ] » M S M₂) : fₗ.restrict_scalars R = gₗ.restrict_scalars R ↔ fₗ = gₗ :=\n  (restrict_scalars_injective R).eq_iff\n#align restrict_scalars_inj restrict_scalars_inj\n\n",
 "restrict_scalars_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\ntheorem restrict_scalars_apply (fₗ : «expr →ₗ[ ] » M S M₂) (x) : restrict_scalars R fₗ x = fₗ x :=\n  rfl\n#align restrict_scalars_apply restrict_scalars_apply\n\n",
 "preimage_smul_setₛₗ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem _root_.preimage_smul_setₛₗ [semilinear_map_class F σ M M₃] {c : R} (hc : is_unit c) (s : set M₃) :\n    «expr ⁻¹' » h («expr • » (σ c) s) = «expr • » c («expr ⁻¹' » h s) :=\n  by\n  apply Set.Subset.antisymm\n  · rintro x ⟨y, ys, hy⟩\n    refine' ⟨«expr • » (hc.unit.inv : R) x, _, _⟩\n    ·\n      simp only [← hy, smul_smul, Set.mem_preimage, Units.inv_eq_val_inv, map_smulₛₗ h, ← map_mul, IsUnit.val_inv_mul,\n        one_smul, map_one, ys]\n    · simp only [smul_smul, IsUnit.mul_val_inv, one_smul, Units.inv_eq_val_inv]\n  · rintro x ⟨y, hy, rfl⟩\n    refine' ⟨h y, hy, by simp only [RingHom.id_apply, map_smulₛₗ h]⟩\n#align preimage_smul_setₛₗ preimage_smul_setₛₗ\n\n",
 "preimage_smul_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem _root_.preimage_smul_set [linear_map_class F R M M₂] {c : R} (hc : is_unit c) (s : set M₂) :\n    «expr ⁻¹' » h («expr • » c s) = «expr • » c («expr ⁻¹' » h s) :=\n  preimage_smul_setₛₗ _ _ _ h hc s\n#align preimage_smul_set preimage_smul_set\n\n",
 "one_eq_id":
 "theorem one_eq_id : (1 : module.End R M) = id :=\n  rfl\n#align one_eq_id one_eq_id\n\n",
 "one_apply":
 "@[simp]\ntheorem one_apply (x : M) : (1 : module.End R M) x = x :=\n  rfl\n#align one_apply one_apply\n\n",
 "neg_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem neg_comp (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) (g : «expr →ₛₗ[ ] » M₂ σ₂₃ N₃) : (-g).comp f = -g.comp f :=\n  rfl\n#align neg_comp neg_comp\n\n",
 "neg_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem neg_apply (f : «expr →ₛₗ[ ] » M σ₁₂ N₂) (x : M) : (-f) x = -f x :=\n  rfl\n#align neg_apply neg_apply\n\n",
 "nat_cast_def":
 "theorem End.nat_cast_def (n : ℕ) [add_comm_monoid N₁] [Module R N₁] :\n    (↑n : module.End R N₁) = module.to_module_End R N₁ n :=\n  rfl\n#align End.nat_cast_def End.nat_cast_def\n\n",
 "nat_cast_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- See also `module.End.nat_cast_def`. -/\n@[simp]\ntheorem _root_.module.End.nat_cast_apply (n : ℕ) (m : M) : (↑n : module.End R M) m = «expr • » n m :=\n  rfl\n#align module.End.nat_cast_apply module.End.nat_cast_apply\n\n",
 "mul_eq_comp":
 "theorem mul_eq_comp (f g : module.End R M) : f * g = f.comp g :=\n  rfl\n#align mul_eq_comp mul_eq_comp\n\n",
 "mul_apply":
 "@[simp]\ntheorem mul_apply (f g : module.End R M) (x : M) : (f * g) x = f (g x) :=\n  rfl\n#align mul_apply mul_apply\n\n",
 "mk_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem mk_coe (f : «expr →ₛₗ[ ] » M σ M₃) (h₁ h₂) : (linear_map.mk f h₁ h₂ : «expr →ₛₗ[ ] » M σ M₃) = f :=\n  ext fun _ => rfl\n#align mk_coe mk_coe\n\n",
 "mk'_apply":
 "@[simp]\ntheorem mk'_apply {f : M → M₂} (H : is_linear_map R f) (x : M) : mk' f H x = f x :=\n  rfl\n#align mk'_apply mk'_apply\n\n",
 "map_zero":
 "#print map_zero /-\ntheorem map_zero : f (0 : M) = (0 : M₂) :=\n  (lin.mk' f).map_zero\n#align map_zero map_zero\n-/\n\n",
 "map_sub":
 "#print map_sub /-\ntheorem map_sub (x y) : f (x - y) = f x - f y :=\n  (lin.mk' f).map_sub x y\n#align map_sub map_sub\n-/\n\n",
 "map_smulₛₗ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- TODO: `simp` isn't picking up `map_smulₛₗ` for `linear_map`s without specifying `map_smulₛₗ f`\n@[simp]\nprotected theorem map_smulₛₗ (c : R) (x : M) : f («expr • » c x) = «expr • » (σ c) (f x) :=\n  map_smulₛₗ f c x\n#align map_smulₛₗ map_smulₛₗ\n\n",
 "map_smul_of_tower":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem map_smul_of_tower {R S : Type _} [Semiring S] [SMul R M] [Module S M] [SMul R M₂] [Module S M₂]\n    [compatible_smul M M₂ R S] (fₗ : «expr →ₗ[ ] » M S M₂) (c : R) (x : M) : fₗ («expr • » c x) = «expr • » c (fₗ x) :=\n  compatible_smul.map_smul fₗ c x\n#align map_smul_of_tower map_smul_of_tower\n\n",
 "map_smul_inv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprotected theorem map_smul_inv {σ' : «expr →+* » S R} [RingHomInvPair σ σ'] (c : S) (x : M) :\n    «expr • » c (f x) = f («expr • » (σ' c) x) := by simp\n#align map_smul_inv map_smul_inv\n\n",
 "map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\nprotected theorem map_smul (c : R) (x : M) : fₗ («expr • » c x) = «expr • » c (fₗ x) :=\n  map_smul fₗ c x\n#align map_smul map_smul\n\n",
 "map_neg":
 "#print map_neg /-\ntheorem map_neg (x : M) : f (-x) = -f x :=\n  (lin.mk' f).map_neg x\n#align map_neg map_neg\n-/\n\n",
 "map_eq_zero_iff":
 "#print map_eq_zero_iff /-\n-- TODO: generalize to `zero_hom_class`\n@[simp]\ntheorem map_eq_zero_iff (h : function.injective f) {x : M} : f x = 0 ↔ x = 0 :=\n  ⟨fun w => by\n    apply h\n    simp [w], fun w => by\n    subst w\n    simp⟩\n#align map_eq_zero_iff map_eq_zero_iff\n-/\n\n",
 "map_add":
 "#print map_add /-\nprotected theorem map_add (x y : M) : f (x + y) = f x + f y :=\n  map_add f x y\n#align map_add map_add\n-/\n\n",
 "is_linear_map_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_linear_map_smul' {R M : Type _} [Semiring R] [add_comm_monoid M] [Module R M] (a : M) :\n    is_linear_map R fun c : R => «expr • » c a :=\n  is_linear_map.mk (fun x y => add_smul x y a) fun x y => mul_smul x y a\n#align is_linear_map_smul' is_linear_map_smul'\n\n",
 "is_linear_map_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem is_linear_map_smul {R M : Type _} [CommSemiring R] [add_comm_monoid M] [Module R M] (c : R) :\n    is_linear_map R fun z : M => «expr • » c z :=\n  by\n  refine' is_linear_map.mk (smul_add c) _\n  intro _ _\n  simp only [smul_smul, mul_comm]\n#align is_linear_map_smul is_linear_map_smul\n\n",
 "is_linear_map_neg":
 "theorem is_linear_map_neg : is_linear_map R fun z : M => -z :=\n  is_linear_map.mk neg_add fun x y => (smul_neg x y).symm\n#align is_linear_map_neg is_linear_map_neg\n\n",
 "is_linear":
 "theorem is_linear : is_linear_map R fₗ :=\n  ⟨fₗ.map_add', fₗ.map_smul'⟩\n#align is_linear is_linear\n\n",
 "int_cast_def":
 "theorem End.int_cast_def (z : ℤ) [add_comm_group N₁] [Module R N₁] :\n    (↑z : module.End R N₁) = module.to_module_End R N₁ z :=\n  rfl\n#align End.int_cast_def End.int_cast_def\n\n",
 "int_cast_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- See also `module.End.int_cast_def`. -/\n@[simp]\ntheorem _root_.module.End.int_cast_apply (z : ℤ) (m : N₁) : (↑z : module.End R N₁) m = «expr • » z m :=\n  rfl\n#align module.End.int_cast_apply module.End.int_cast_apply\n\n",
 "image_smul_setₛₗ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n@[simp]\ntheorem _root_.image_smul_setₛₗ [semilinear_map_class F σ M M₃] (c : R) (s : set M) :\n    «expr '' » h («expr • » c s) = «expr • » (σ c) («expr '' » h s) :=\n  by\n  apply Set.Subset.antisymm\n  · rintro x ⟨y, ⟨z, zs, rfl⟩, rfl⟩\n    exact ⟨h z, Set.mem_image_of_mem _ zs, (map_smulₛₗ _ _ _).symm⟩\n  · rintro x ⟨y, ⟨z, hz, rfl⟩, rfl⟩\n    exact (Set.mem_image _ _ _).2 ⟨«expr • » c z, Set.smul_mem_smul_set hz, map_smulₛₗ _ _ _⟩\n#align image_smul_setₛₗ image_smul_setₛₗ\n\n",
 "image_smul_set":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr '' » -/\ntheorem _root_.image_smul_set [linear_map_class F R M M₂] (c : R) (s : set M) :\n    «expr '' » h («expr • » c s) = «expr • » c («expr '' » h s) :=\n  image_smul_setₛₗ _ _ _ h c s\n#align image_smul_set image_smul_set\n\n",
 "id_comp":
 "@[simp]\ntheorem id_comp : id.comp f = f :=\n  linear_map.ext fun x => rfl\n#align id_comp id_comp\n\n",
 "id_coe":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp, norm_cast]\ntheorem id_coe : ((linear_map.id : «expr →ₗ[ ] » M R M) : M → M) = _root_.id :=\n  rfl\n#align id_coe id_coe\n\n",
 "id_apply":
 "theorem id_apply (x : M) : @id R M _ _ _ x = x :=\n  rfl\n#align id_apply id_apply\n\n",
 "ext_ring_op":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᵐᵒᵖ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[ext]\ntheorem ext_ring_op {σ : «expr →+* » («expr ᵐᵒᵖ» R) S} {f g : «expr →ₛₗ[ ] » R σ M₃} (h : f 1 = g 1) : f = g :=\n  ext fun x => by rw [← one_mul x, ← op_smul_eq_mul, f.map_smulₛₗ, g.map_smulₛₗ, h]\n#align ext_ring_op ext_ring_op\n\n",
 "ext_ring_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\ntheorem ext_ring_iff {σ : «expr →+* » R R} {f g : «expr →ₛₗ[ ] » R σ M} : f = g ↔ f 1 = g 1 :=\n  ⟨fun h => h ▸ rfl, ext_ring⟩\n#align ext_ring_iff ext_ring_iff\n\n",
 "ext_ring":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/-- If two `σ`-linear maps from `R` are equal on `1`, then they are equal. -/\n@[ext]\ntheorem ext_ring {f g : «expr →ₛₗ[ ] » R σ M₃} (h : f 1 = g 1) : f = g :=\n  ext fun x => by rw [← mul_one x, ← smul_eq_mul, f.map_smulₛₗ, g.map_smulₛₗ, h]\n#align ext_ring ext_ring\n\n",
 "ext_iff":
 "theorem ext_iff : f = g ↔ ∀ x, f x = g x :=\n  fun_like.ext_iff\n#align ext_iff ext_iff\n\n",
 "ext":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[ext]\ntheorem ext {f g : «expr →ₛₗ[ ] » M σ M₃} (h : ∀ x, f x = g x) : f = g :=\n  fun_like.ext f g h\n#align ext ext\n\n",
 "default_def":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem default_def : (default : «expr →ₛₗ[ ] » M σ₁₂ M₂) = 0 :=\n  rfl\n#align default_def default_def\n\n",
 "copy_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem copy_eq (f : «expr →ₛₗ[ ] » M σ M₃) (f' : M → M₃) (h : f' = «expr⇑ » f) : f.copy f' h = f :=\n  fun_like.ext' h\n#align copy_eq copy_eq\n\n",
 "congr_fun":
 "#print congr_fun /-\n/-- If two linear maps are equal, they are equal at each point. -/\nprotected theorem congr_fun (h : f = g) (x : M) : f x = g x :=\n  fun_like.congr_fun h x\n#align congr_fun congr_fun\n-/\n\n",
 "congr_arg":
 "#print congr_arg /-\nprotected theorem congr_arg {x x' : M} : x = x' → f x = f x' :=\n  fun_like.congr_arg f\n#align congr_arg congr_arg\n-/\n\n",
 "comp_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem comp_zero (g : «expr →ₛₗ[ ] » M₂ σ₂₃ M₃) :\n    (g.comp (0 : «expr →ₛₗ[ ] » M σ₁₂ M₂) : «expr →ₛₗ[ ] » M σ₁₃ M₃) = 0 :=\n  ext fun c => by rw [comp_apply, zero_apply, zero_apply, g.map_zero]\n#align comp_zero comp_zero\n\n",
 "comp_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\ntheorem comp_sub (f g : «expr →ₛₗ[ ] » M σ₁₂ N₂) (h : «expr →ₛₗ[ ] » N₂ σ₂₃ N₃) :\n    h.comp (g - f) = h.comp g - h.comp f :=\n  ext fun _ => h.map_sub _ _\n#align comp_sub comp_sub\n\n",
 "comp_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n-- TODO: generalize this to semilinear maps\ntheorem comp_smul [Module R M₂] [Module R M₃] [SMulCommClass R S M₂] [DistribMulAction S M₃] [SMulCommClass R S M₃]\n    [compatible_smul M₃ M₂ S R] (g : «expr →ₗ[ ] » M₃ R M₂) (a : S) (f : «expr →ₗ[ ] » M R M₃) :\n    g.comp («expr • » a f) = «expr • » a (g.comp f) :=\n  ext fun x => g.map_smul_of_tower _ _\n#align comp_smul comp_smul\n\n",
 "comp_neg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem comp_neg (f : «expr →ₛₗ[ ] » M σ₁₂ N₂) (g : «expr →ₛₗ[ ] » N₂ σ₂₃ N₃) : g.comp (-f) = -g.comp f :=\n  ext fun _ => g.map_neg _\n#align comp_neg comp_neg\n\n",
 "comp_id":
 "@[simp]\ntheorem comp_id : f.comp id = f :=\n  linear_map.ext fun x => rfl\n#align comp_id comp_id\n\n",
 "comp_apply":
 "theorem comp_apply (x : M₁) : f.comp g x = f (g x) :=\n  rfl\n#align comp_apply comp_apply\n\n",
 "comp_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\ntheorem comp_add (f g : «expr →ₛₗ[ ] » M σ₁₂ M₂) (h : «expr →ₛₗ[ ] » M₂ σ₂₃ M₃) :\n    (h.comp (f + g) : «expr →ₛₗ[ ] » M σ₁₃ M₃) = h.comp f + h.comp g :=\n  ext fun _ => h.map_add _ _\n#align comp_add comp_add\n\n",
 "coe_to_rat_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℚ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem add_monoid_hom.coe_to_rat_linear_map [add_comm_group M] [Module (exprℚ) M] [add_comm_group M₂]\n    [Module (exprℚ) M₂] (f : «expr →+ » M M₂) : «expr⇑ » f.to_rat_linear_map = f :=\n  rfl\n#align add_monoid_hom.coe_to_rat_linear_map add_monoid_hom.coe_to_rat_linear_map\n\n",
 "coe_to_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n@[simp, norm_cast]\ntheorem coe_to_linear_map (f : «expr →+[ ] » M R M₂) : ((f : «expr →ₗ[ ] » M R M₂) : M → M₂) = f :=\n  rfl\n#align coe_to_linear_map coe_to_linear_map\n\n",
 "coe_to_int_linear_map":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem add_monoid_hom.coe_to_int_linear_map [add_comm_group M] [add_comm_group M₂] (f : «expr →+ » M M₂) :\n    «expr⇑ » f.to_int_linear_map = f :=\n  rfl\n#align add_monoid_hom.coe_to_int_linear_map add_monoid_hom.coe_to_int_linear_map\n\n",
 "coe_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem coe_smul (a : S) (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) : «expr⇑ » («expr • » a f) = «expr • » a f :=\n  rfl\n#align coe_smul coe_smul\n\n",
 "coe_restrict_scalars":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_restrict_scalars (fₗ : «expr →ₗ[ ] » M S M₂) : «expr⇑ » (restrict_scalars R fₗ) = fₗ :=\n  rfl\n#align coe_restrict_scalars coe_restrict_scalars\n\n",
 "coe_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem coe_one : «expr⇑ » (1 : module.End R M) = _root_.id :=\n  rfl\n#align coe_one coe_one\n\n",
 "coe_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\ntheorem coe_mul (f g : module.End R M) : «expr⇑ » (f * g) = f ∘ g :=\n  rfl\n#align coe_mul coe_mul\n\n",
 "coe_mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →+* » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem coe_mk {σ : «expr →+* » R S} (f : M → M₃) (h₁ h₂) :\n    ((linear_map.mk f h₁ h₂ : «expr →ₛₗ[ ] » M σ M₃) : M → M₃) = f :=\n  rfl\n#align coe_mk coe_mk\n\n",
 "coe_injective":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\ntheorem coe_injective : @injective («expr →ₛₗ[ ] » M σ M₃) (M → M₃) coe_fn :=\n  fun_like.coe_injective\n#align coe_injective coe_injective\n\n",
 "coe_copy":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_copy (f : «expr →ₛₗ[ ] » M σ M₃) (f' : M → M₃) (h : f' = «expr⇑ » f) : «expr⇑ » (f.copy f' h) = f' :=\n  rfl\n#align coe_copy coe_copy\n\n",
 "coe_comp":
 "@[simp, norm_cast]\ntheorem coe_comp : (f.comp g : M₁ → M₃) = f ∘ g :=\n  rfl\n#align coe_comp coe_comp\n\n",
 "cancel_right":
 "theorem cancel_right (hg : function.surjective g) : f.comp g = f'.comp g ↔ f = f' :=\n  ⟨fun h => ext <| hg.forall.2 (ext_iff.1 h), fun h => h ▸ rfl⟩\n#align cancel_right cancel_right\n\n",
 "cancel_left":
 "theorem cancel_left (hf : function.injective f) : f.comp g = f.comp g' ↔ g = g' :=\n  ⟨fun h => ext fun x => hf <| by rw [← comp_apply, h, comp_apply], fun h => h ▸ rfl⟩\n#align cancel_left cancel_left\n\n",
 "add_comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\ntheorem add_comp (f : «expr →ₛₗ[ ] » M σ₁₂ M₂) (g h : «expr →ₛₗ[ ] » M₂ σ₂₃ M₃) :\n    ((h + g).comp f : «expr →ₛₗ[ ] » M σ₁₃ M₃) = h.comp f + g.comp f :=\n  rfl\n#align add_comp add_comp\n\n",
 "add_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr →ₛₗ[ ] » -/\n@[simp]\ntheorem add_apply (f g : «expr →ₛₗ[ ] » M σ₁₂ M₂) (x : M) : (f + g) x = f x + g x :=\n  rfl\n#align add_apply add_apply\n\n"}