{"to_pmf_dirac":
 "@[simp]\ntheorem to_pmf_dirac [Countable α] [h : MeasurableSingletonClass α] : (Measure.dirac a).to_pmf = pure a := by\n  rw [to_pmf_eq_iff_to_measure_eq, to_measure_pure]\n#align to_pmf_dirac to_pmf_dirac\n\n",
 "to_outer_measure_pure_apply":
 "@[simp]\ntheorem to_outer_measure_pure_apply : (pure a).to_outer_measure s = if a ∈ s then 1 else 0 :=\n  by\n  refine' (to_outer_measure_apply (pure a) s).trans _\n  split_ifs with ha ha\n  · refine' (tsum_congr fun b => _).trans (tsum_ite_eq a 1)\n    exact ite_eq_left_iff.2 fun hb => symm (ite_eq_right_iff.2 fun h => (hb <| h.symm ▸ ha).elim)\n  · refine' (tsum_congr fun b => _).trans tsum_zero\n    exact ite_eq_right_iff.2 fun hb => ite_eq_right_iff.2 fun h => (ha <| h ▸ hb).elim\n#align to_outer_measure_pure_apply to_outer_measure_pure_apply\n\n",
 "to_outer_measure_bind_on_support_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n@[simp]\ntheorem to_outer_measure_bind_on_support_apply :\n    (p.bind_on_support f).to_outer_measure s =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (p a * if h : p a = 0 then 0 else (f a h).to_outer_measure s) :=\n  by\n  simp only [to_outer_measure_apply, Set.indicator_apply, bind_on_support_apply]\n  calc\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (ite (b ∈ s)\n            («expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (p a * dite (p a = 0) (fun h => 0) fun h => f a h b))\n            0) =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (ite (b ∈ s) (p a * dite (p a = 0) (fun h => 0) fun h => f a h b) 0) :=\n      tsum_congr fun b => by split_ifs with hbs <;> simp only [eq_self_iff_true, tsum_zero]\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (ite (b ∈ s) (p a * dite (p a = 0) (fun h => 0) fun h => f a h b) 0) :=\n      ENNReal.tsum_comm\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a *\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (ite (b ∈ s) (dite (p a = 0) (fun h => 0) fun h => f a h b) 0)) :=\n      (tsum_congr fun a => by simp only [← ENNReal.tsum_mul_left, mul_ite, MulZeroClass.mul_zero])\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a *\n            dite (p a = 0) (fun h => 0) fun h =>\n              «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n                (ite (b ∈ s) (f a h b) 0)) :=\n      tsum_congr fun a => by split_ifs with ha <;> simp only [if_t_t, tsum_zero, eq_self_iff_true]\n    \n#align to_outer_measure_bind_on_support_apply to_outer_measure_bind_on_support_apply\n\n",
 "to_outer_measure_bind_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n@[simp]\ntheorem to_outer_measure_bind_apply :\n    (p.bind f).to_outer_measure s =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (p a * (f a).to_outer_measure s) :=\n  calc\n    (p.bind f).to_outer_measure s =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (if b ∈ s then\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (p a * f a b)\n          else 0) :=\n      by simp [to_outer_measure_apply, Set.indicator_apply]\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a * if b ∈ s then f a b else 0) :=\n      (tsum_congr fun b => by split_ifs <;> simp)\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a * if b ∈ s then f a b else 0) :=\n      (tsum_comm' ENNReal.summable (fun _ => ENNReal.summable) fun _ => ENNReal.summable)\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a *\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (if b ∈ s then f a b else 0)) :=\n      (tsum_congr fun a => ENNReal.tsum_mul_left)\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a *\n            «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n              (if b ∈ s then f a b else 0)) :=\n      (tsum_congr fun a => (congr_arg fun x => p a * x) <| tsum_congr fun b => by split_ifs <;> rfl)\n    _ =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (p a * (f a).to_outer_measure s) :=\n      tsum_congr fun a => by simp only [to_outer_measure_apply, Set.indicator_apply]\n    \n#align to_outer_measure_bind_apply to_outer_measure_bind_apply\n\n",
 "to_measure_pure_apply":
 "/-- The measure of a set under `pure a` is `1` for sets containing `a` and `0` otherwise -/\n@[simp]\ntheorem to_measure_pure_apply (hs : MeasurableSet s) : (pure a).to_measure s = if a ∈ s then 1 else 0 :=\n  (toMeasure_apply_eq_toOuterMeasure_apply (pure a) s hs).trans (toOuterMeasure_pure_apply a s)\n#align to_measure_pure_apply to_measure_pure_apply\n\n",
 "to_measure_pure":
 "theorem to_measure_pure : (pure a).to_measure = Measure.dirac a :=\n  Measure.ext fun s hs => by simpa only [to_measure_pure_apply a s hs, measure.dirac_apply' a hs]\n#align to_measure_pure to_measure_pure\n\n",
 "to_measure_bind_on_support_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- The measure of a set under `p.bind_on_support f` is the sum over `a : α`\n  of the probability of `a` under `p` times the measure of the set under `f a _`.\n  The additional if statement is needed since `f` is only a partial function -/\n@[simp]\ntheorem to_measure_bind_on_support_apply [MeasurableSpace β] (hs : MeasurableSet s) :\n    (p.bind_on_support f).to_measure s =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (p a * if h : p a = 0 then 0 else (f a h).to_measure s) :=\n  by simp only [to_measure_apply_eq_to_outer_measure_apply _ _ hs, to_outer_measure_bind_on_support_apply]\n#align to_measure_bind_on_support_apply to_measure_bind_on_support_apply\n\n",
 "to_measure_bind_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- The measure of a set under `p.bind f` is the sum over `a : α`\n  of the probability of `a` under `p` times the measure of the set under `f a` -/\n@[simp]\ntheorem to_measure_bind_apply [MeasurableSpace β] (hs : MeasurableSet s) :\n    (p.bind f).to_measure s =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (p a * (f a).to_measure s) :=\n  (toMeasure_apply_eq_toOuterMeasure_apply (p.bind f) s hs).trans\n    ((toOuterMeasure_bind_apply p f s).trans\n      (tsum_congr fun a => congr_arg (fun x => p a * x) (toMeasure_apply_eq_toOuterMeasure_apply (f a) s hs).symm))\n#align to_measure_bind_apply to_measure_bind_apply\n\n",
 "support_pure":
 "@[simp]\ntheorem support_pure : (pure a).support = {a} :=\n  Set.ext fun a' => by simp [mem_support_iff]\n#align support_pure support_pure\n\n",
 "support_bind_on_support":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem support_bind_on_support :\n    (p.bind_on_support f).support =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f a h).support :=\n  by\n  refine' Set.ext fun b => _\n  simp only [ENNReal.tsum_eq_zero, not_or, mem_support_iff, bind_on_support_apply, ne.def, not_forall, mul_eq_zero,\n    Set.mem_unionᵢ]\n  exact\n    ⟨fun hb =>\n      let ⟨a, ⟨ha, ha'⟩⟩ := hb\n      ⟨a, ha, by simpa [ha] using ha'⟩,\n      fun hb =>\n      let ⟨a, ha, ha'⟩ := hb\n      ⟨a, ⟨ha, by simpa [(mem_support_iff _ a).1 ha] using ha'⟩⟩⟩\n#align support_bind_on_support support_bind_on_support\n\n",
 "support_bind":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n@[simp]\ntheorem support_bind :\n    (p.bind f).support =\n      «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\" (f a).support :=\n  Set.ext fun b => by simp [mem_support_iff, ENNReal.tsum_eq_zero, not_or]\n#align support_bind support_bind\n\n",
 "pure_bind_on_support":
 "@[simp]\ntheorem pure_bind_on_support (a : α) (f : ∀ (a' : α) (ha : a' ∈ (pure a).support), Pmf β) :\n    (pure a).bind_on_support f = f a ((mem_support_pure_iff a a).mpr rfl) :=\n  by\n  refine' Pmf.ext fun b => _\n  simp only [bind_on_support_apply, pure_apply]\n  refine' trans (tsum_congr fun a' => _) (tsum_ite_eq a _)\n  by_cases h : a' = a <;> simp [h]\n#align pure_bind_on_support pure_bind_on_support\n\n",
 "pure_bind":
 "@[simp]\ntheorem pure_bind (a : α) (f : α → Pmf β) : (pure a).bind f = f a :=\n  by\n  have : ∀ b a', ite (a' = a) 1 0 * f a' b = ite (a' = a) (f a b) 0 := fun b a' => by\n    split_ifs <;> simp <;> subst h <;> simp\n  ext b <;> simp [this]\n#align pure_bind pure_bind\n\n",
 "pure_apply_self":
 "@[simp]\ntheorem pure_apply_self : pure a a = 1 :=\n  if_pos rfl\n#align pure_apply_self pure_apply_self\n\n",
 "pure_apply_of_ne":
 "theorem pure_apply_of_ne (h : a' ≠ a) : pure a a' = 0 :=\n  if_neg h\n#align pure_apply_of_ne pure_apply_of_ne\n\n",
 "pure_apply":
 "/-\nCopyright (c) 2020 Devon Tuma. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johannes Hölzl, Devon Tuma\n-/\n@[simp]\ntheorem pure_apply : pure a a' = if a' = a then 1 else 0 :=\n  rfl\n#align pure_apply pure_apply\n\n",
 "mem_support_pure_iff":
 "theorem mem_support_pure_iff : a' ∈ (pure a).support ↔ a' = a := by simp\n#align mem_support_pure_iff mem_support_pure_iff\n\n",
 "mem_support_bind_on_support_iff":
 "theorem mem_support_bind_on_support_iff (b : β) :\n    b ∈ (p.bind_on_support f).support ↔ ∃ (a : α)(h : a ∈ p.support), b ∈ (f a h).support := by\n  simp only [support_bind_on_support, Set.mem_setOf_eq, Set.mem_unionᵢ]\n#align mem_support_bind_on_support_iff mem_support_bind_on_support_iff\n\n",
 "mem_support_bind_iff":
 "theorem mem_support_bind_iff (b : β) : b ∈ (p.bind f).support ↔ ∃ a ∈ p.support, b ∈ (f a).support := by\n  simp only [support_bind, Set.mem_unionᵢ, Set.mem_setOf_eq]\n#align mem_support_bind_iff mem_support_bind_iff\n\n",
 "bind_pure":
 "#print bind_pure /-\n@[simp]\ntheorem bind_pure : p.bind pure = p :=\n  Pmf.ext fun x =>\n    (bind_apply _ _ _).trans\n      (trans (tsum_eq_single x fun y hy => by rw [pure_apply_of_ne _ _ hy.symm, MulZeroClass.mul_zero]) <| by\n        rw [pure_apply_self, mul_one])\n#align bind_pure bind_pure\n-/\n\n",
 "bind_on_support_pure":
 "theorem bind_on_support_pure (p : Pmf α) : (p.bind_on_support fun a _ => pure a) = p := by\n  simp only [Pmf.bind_pure, Pmf.bindOnSupport_eq_bind]\n#align bind_on_support_pure bind_on_support_pure\n\n",
 "bind_on_support_eq_zero_iff":
 "theorem bind_on_support_eq_zero_iff (b : β) : p.bind_on_support f b = 0 ↔ ∀ (a) (ha : p a ≠ 0), f a ha b = 0 :=\n  by\n  simp only [bind_on_support_apply, ENNReal.tsum_eq_zero, mul_eq_zero, or_iff_not_imp_left]\n  exact ⟨fun h a ha => trans (dif_neg ha).symm (h a ha), fun h a ha => trans (dif_neg ha) (h a ha)⟩\n#align bind_on_support_eq_zero_iff bind_on_support_eq_zero_iff\n\n",
 "bind_on_support_eq_bind":
 "/-- `bind_on_support` reduces to `bind` if `f` doesn't depend on the additional hypothesis -/\n@[simp]\ntheorem bind_on_support_eq_bind (p : Pmf α) (f : α → Pmf β) : (p.bind_on_support fun a _ => f a) = p.bind f :=\n  by\n  ext (b x)\n  have : ∀ a, ite (p a = 0) 0 (p a * f a b) = p a * f a b := fun a =>\n    ite_eq_right_iff.2 fun h => h.symm ▸ symm (MulZeroClass.zero_mul <| f a b)\n  simp only [bind_on_support_apply fun a _ => f a, p.bind_apply f, dite_eq_ite, mul_ite, MulZeroClass.mul_zero, this]\n#align bind_on_support_eq_bind bind_on_support_eq_bind\n\n",
 "bind_on_support_comm":
 "theorem bind_on_support_comm (p : Pmf α) (q : Pmf β) (f : ∀ a ∈ p.support, ∀ b ∈ q.support, Pmf γ) :\n    (p.bind_on_support fun a ha => q.bind_on_support (f a ha)) =\n      q.bind_on_support fun b hb => p.bind_on_support fun a ha => f a ha b hb :=\n  by\n  apply Pmf.ext; rintro c\n  simp only [ennreal.coe_eq_coe.symm, bind_on_support_apply, ← tsum_dite_right, ennreal.tsum_mul_left.symm,\n    ennreal.tsum_mul_right.symm]\n  refine' trans ENNReal.tsum_comm (tsum_congr fun b => tsum_congr fun a => _)\n  split_ifs with h1 h2 h2 <;> ring\n#align bind_on_support_comm bind_on_support_comm\n\n",
 "bind_on_support_bind_on_support":
 "@[simp]\ntheorem bind_on_support_bind_on_support (p : Pmf α) (f : ∀ a ∈ p.support, Pmf β)\n    (g : ∀ b ∈ (p.bind_on_support f).support, Pmf γ) :\n    (p.bind_on_support f).bind_on_support g =\n      p.bind_on_support fun a ha =>\n        (f a ha).bind_on_support fun b hb => g b ((mem_support_bindOnSupport_iff f b).mpr ⟨a, ha, hb⟩) :=\n  by\n  refine' Pmf.ext fun a => _\n  simp only [ennreal.coe_eq_coe.symm, bind_on_support_apply, ← tsum_dite_right, ennreal.tsum_mul_left.symm,\n    ennreal.tsum_mul_right.symm]\n  simp only [ENNReal.tsum_eq_zero, ENNReal.coe_eq_coe, ENNReal.coe_eq_zero, ENNReal.coe_zero, dite_eq_left_iff,\n    mul_eq_zero]\n  refine' ennreal.tsum_comm.trans (tsum_congr fun a' => tsum_congr fun b => _)\n  split_ifs\n  any_goals ring1\n  · have := h_1 a'\n    simp [h] at this\n    contradiction\n  · simp [h_2]\n#align bind_on_support_bind_on_support bind_on_support_bind_on_support\n\n",
 "bind_on_support_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n@[simp]\ntheorem bind_on_support_apply (b : β) :\n    p.bind_on_support f b =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (p a * if h : p a = 0 then 0 else f a h b) :=\n  rfl\n#align bind_on_support_apply bind_on_support_apply\n\n",
 "bind_const":
 "@[simp]\ntheorem bind_const (p : Pmf α) (q : Pmf β) : (p.bind fun _ => q) = q :=\n  Pmf.ext fun x => by rw [bind_apply, ENNReal.tsum_mul_right, tsum_coe, one_mul]\n#align bind_const bind_const\n\n",
 "bind_comm":
 "theorem bind_comm (p : Pmf α) (q : Pmf β) (f : α → β → Pmf γ) :\n    (p.bind fun a => q.bind (f a)) = q.bind fun b => p.bind fun a => f a b :=\n  Pmf.ext fun b => by\n    simpa only [ennreal.coe_eq_coe.symm, bind_apply, ennreal.tsum_mul_left.symm, ennreal.tsum_mul_right.symm, mul_assoc,\n      mul_left_comm, mul_comm] using ENNReal.tsum_comm\n#align bind_comm bind_comm\n\n",
 "bind_bind":
 "@[simp]\ntheorem bind_bind : (p.bind f).bind g = p.bind fun a => (f a).bind g :=\n  Pmf.ext fun b => by\n    simpa only [ennreal.coe_eq_coe.symm, bind_apply, ennreal.tsum_mul_left.symm, ennreal.tsum_mul_right.symm, mul_assoc,\n      mul_left_comm, mul_comm] using ENNReal.tsum_comm\n#align bind_bind bind_bind\n\n",
 "bind_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n@[simp]\ntheorem bind_apply (b : β) :\n    p.bind f b =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (p a * f a b) :=\n  rfl\n#align bind_apply bind_apply\n\n"}