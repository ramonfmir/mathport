{"lintegral_mul_indicator_eq_lintegral_mul_lintegral_indicator":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-\nCopyright (c) 2021 Martin Zinkevich. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Martin Zinkevich, Vincent Beffara\n-/\n/-- If a random variable `f` in `ℝ≥0∞` is independent of an event `T`, then if you restrict the\n  random variable to `T`, then `E[f * indicator T c 0]=E[f] * E[indicator T c 0]`. It is useful for\n  `lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space`. -/\ntheorem lintegral_mul_indicator_eq_lintegral_mul_lintegral_indicator {Mf mΩ : MeasurableSpace Ω} {μ : measure Ω}\n    (hMf : Mf ≤ mΩ) (c : ennreal) {T : Set Ω} (h_meas_T : MeasurableSet T)\n    (h_ind : indep_sets { s | (measurable_set_of Mf) s } {T} μ) (h_meas_f : (measurable_of Mf) f) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        (f ω * T.indicator (fun _ => c) ω) μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω) μ *\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n          (T.indicator (fun _ => c) ω) μ :=\n  by\n  revert f\n  have h_mul_indicator : ∀ g, Measurable g → Measurable fun a => g a * T.indicator (fun x => c) a := fun g h_mg =>\n    h_mg.mul (measurable_const.indicator h_meas_T)\n  apply measurable.ennreal_induction\n  · intro c' s' h_meas_s'\n    simp_rw [← inter_indicator_mul]\n    rw [lintegral_indicator _ (MeasurableSet.inter (hMf _ h_meas_s') h_meas_T), lintegral_indicator _ (hMf _ h_meas_s'),\n      lintegral_indicator _ h_meas_T]\n    simp only [measurable_const, lintegral_const, univ_inter, lintegral_const_mul, MeasurableSet.univ,\n      measure.restrict_apply]\n    ring_nf\n    congr\n    rw [mul_comm, h_ind s' T h_meas_s' (Set.mem_singleton _)]\n  · intro f' g h_univ h_meas_f' h_meas_g h_ind_f' h_ind_g\n    have h_measM_f' : Measurable f' := h_meas_f'.mono hMf le_rfl\n    have h_measM_g : Measurable g := h_meas_g.mono hMf le_rfl\n    simp_rw [Pi.add_apply, right_distrib]\n    rw [lintegral_add_left (h_mul_indicator _ h_measM_f'), lintegral_add_left h_measM_f', right_distrib, h_ind_f',\n      h_ind_g]\n  · intro f h_meas_f h_mono_f h_ind_f\n    have h_measM_f : ∀ n, Measurable (f n) := fun n => (h_meas_f n).mono hMf le_rfl\n    simp_rw [ENNReal.supᵢ_mul]\n    rw [lintegral_supr h_measM_f h_mono_f, lintegral_supr, ENNReal.supᵢ_mul]\n    · simp_rw [← h_ind_f]\n    · exact fun n => h_mul_indicator _ (h_measM_f n)\n    · exact fun m n h_le a => mul_le_mul_right' (h_mono_f h_le a) _\n#align lintegral_mul_indicator_eq_lintegral_mul_lintegral_indicator lintegral_mul_indicator_eq_lintegral_mul_lintegral_indicator\n\n",
 "lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- If `f` and `g` are independent random variables with values in `ℝ≥0∞`,\n   then `E[f * g] = E[f] * E[g]`. However, instead of directly using the independence\n   of the random variables, it uses the independence of measurable spaces for the\n   domains of `f` and `g`. This is similar to the sigma-algebra approach to\n   independence. See `lintegral_mul_eq_lintegral_mul_lintegral_of_independent_fn` for\n   a more common variant of the product of independent variables. -/\ntheorem lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space {Mf Mg mΩ : MeasurableSpace Ω}\n    {μ : measure Ω} (hMf : Mf ≤ mΩ) (hMg : Mg ≤ mΩ) (h_ind : indep Mf Mg μ) (h_meas_f : (measurable_of Mf) f)\n    (h_meas_g : (measurable_of Mg) g) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω * g ω)\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω) μ *\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (g ω) μ :=\n  by\n  revert g\n  have h_measM_f : Measurable f := h_meas_f.mono hMf le_rfl\n  apply measurable.ennreal_induction\n  · intro c s h_s\n    apply lintegral_mul_indicator_eq_lintegral_mul_lintegral_indicator hMf _ (hMg _ h_s) _ h_meas_f\n    apply indep_sets_of_indep_sets_of_le_right h_ind\n    rwa [singleton_subset_iff]\n  · intro f' g h_univ h_measMg_f' h_measMg_g h_ind_f' h_ind_g'\n    have h_measM_f' : Measurable f' := h_measMg_f'.mono hMg le_rfl\n    have h_measM_g : Measurable g := h_measMg_g.mono hMg le_rfl\n    simp_rw [Pi.add_apply, left_distrib]\n    rw [lintegral_add_left h_measM_f', lintegral_add_left (h_measM_f.mul h_measM_f'), left_distrib, h_ind_f', h_ind_g']\n  · intro f' h_meas_f' h_mono_f' h_ind_f'\n    have h_measM_f' : ∀ n, Measurable (f' n) := fun n => (h_meas_f' n).mono hMg le_rfl\n    simp_rw [ENNReal.mul_supᵢ]\n    rw [lintegral_supr, lintegral_supr h_measM_f' h_mono_f', ENNReal.mul_supᵢ]\n    · simp_rw [← h_ind_f']\n    · exact fun n => h_measM_f.mul (h_measM_f' n)\n    · exact fun n m (h_le : n ≤ m) a => mul_le_mul_left' (h_mono_f' h_le a) _\n#align lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space\n\n",
 "lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun''":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\ntheorem lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'' (h_meas_f : AEMeasurable f μ)\n    (h_meas_g : AEMeasurable g μ) (h_indep_fun : indep_fun f g μ) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω * g ω)\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω) μ *\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (g ω) μ :=\n  lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun' h_meas_f h_meas_g h_indep_fun\n#align lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'' lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun''\n\n",
 "lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- If `f` and `g` with values in `ℝ≥0∞` are independent and almost everywhere measurable,\n   then `E[f * g] = E[f] * E[g]` (slightly generalizing\n   `lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun`). -/\ntheorem lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun' (h_meas_f : AEMeasurable f μ)\n    (h_meas_g : AEMeasurable g μ) (h_indep_fun : indep_fun f g μ) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" ((f * g) ω)\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω) μ *\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (g ω) μ :=\n  by\n  have fg_ae : «expr =ᵐ[ ] » (f * g) μ (h_meas_f.mk _ * h_meas_g.mk _) := h_meas_f.ae_eq_mk.mul h_meas_g.ae_eq_mk\n  rw [lintegral_congr_ae h_meas_f.ae_eq_mk, lintegral_congr_ae h_meas_g.ae_eq_mk, lintegral_congr_ae fg_ae]\n  apply lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun h_meas_f.measurable_mk h_meas_g.measurable_mk\n  exact h_indep_fun.ae_eq h_meas_f.ae_eq_mk h_meas_g.ae_eq_mk\n#align lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun' lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'\n\n",
 "lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- If `f` and `g` are independent random variables with values in `ℝ≥0∞`,\n   then `E[f * g] = E[f] * E[g]`. -/\ntheorem lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun (h_meas_f : Measurable f) (h_meas_g : Measurable g)\n    (h_indep_fun : indep_fun f g μ) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" ((f * g) ω)\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f ω) μ *\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (g ω) μ :=\n  lintegral_mul_eq_lintegral_mul_lintegral_of_independent_measurable_space (measurable_iff_comap_le.1 h_meas_f)\n    (measurable_iff_comap_le.1 h_meas_g) h_indep_fun (Measurable.of_comap_le le_rfl) (Measurable.of_comap_le le_rfl)\n#align lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun\n\n",
 "integral_mul_of_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/-- The (Bochner) integral of the product of two independent, nonnegative random\n  variables is the product of their integrals. The proof is just plumbing around\n  `lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'`. -/\ntheorem indep_fun.integral_mul_of_nonneg (hXY : indep_fun X Y μ) (hXp : 0 ≤ X) (hYp : 0 ≤ Y) (hXm : AEMeasurable X μ)\n    (hYm : AEMeasurable Y μ) : integral μ (X * Y) = integral μ X * integral μ Y :=\n  by\n  have h1 : AEMeasurable (fun a => ENNReal.ofReal (X a)) μ := ennreal.measurable_of_real.comp_ae_measurable hXm\n  have h2 : AEMeasurable (fun a => ENNReal.ofReal (Y a)) μ := ennreal.measurable_of_real.comp_ae_measurable hYm\n  have h3 : AEMeasurable (X * Y) μ := hXm.mul hYm\n  have h4 : «expr ≤ᵐ[ ] » 0 μ (X * Y) := ae_of_all _ fun ω => mul_nonneg (hXp ω) (hYp ω)\n  rw [integral_eq_lintegral_of_nonneg_ae (ae_of_all _ hXp) hXm.ae_strongly_measurable,\n    integral_eq_lintegral_of_nonneg_ae (ae_of_all _ hYp) hYm.ae_strongly_measurable,\n    integral_eq_lintegral_of_nonneg_ae h4 h3.ae_strongly_measurable]\n  simp_rw [← ENNReal.toReal_mul, Pi.mul_apply, ENNReal.ofReal_mul (hXp _)]\n  congr\n  apply lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun' h1 h2\n  exact hXY.comp ennreal.measurable_of_real ennreal.measurable_of_real\n#align indep_fun.integral_mul_of_nonneg indep_fun.integral_mul_of_nonneg\n\n",
 "integral_mul_of_integrable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- The (Bochner) integral of the product of two independent, integrable random\n  variables is the product of their integrals. The proof is pedestrian decomposition\n  into their positive and negative parts in order to apply `indep_fun.integral_mul_of_nonneg`\n  four times. -/\ntheorem indep_fun.integral_mul_of_integrable (hXY : indep_fun X Y μ) (hX : integrable X μ) (hY : integrable Y μ) :\n    integral μ (X * Y) = integral μ X * integral μ Y :=\n  by\n  let pos : exprℝ → exprℝ := fun x => max x 0\n  let neg : exprℝ → exprℝ := fun x => max (-x) 0\n  have posm : Measurable pos := measurable_id'.max measurable_const\n  have negm : Measurable neg := measurable_id'.neg.max measurable_const\n  let Xp := pos ∘ X\n  -- `X⁺` would look better but it makes `simp_rw` below fail\n  let Xm := neg ∘ X\n  let Yp := pos ∘ Y\n  let Ym := neg ∘ Y\n  have hXpm : X = Xp - Xm := funext fun ω => (max_zero_sub_max_neg_zero_eq_self (X ω)).symm\n  have hYpm : Y = Yp - Ym := funext fun ω => (max_zero_sub_max_neg_zero_eq_self (Y ω)).symm\n  have hp1 : 0 ≤ Xm := fun ω => le_max_right _ _\n  have hp2 : 0 ≤ Xp := fun ω => le_max_right _ _\n  have hp3 : 0 ≤ Ym := fun ω => le_max_right _ _\n  have hp4 : 0 ≤ Yp := fun ω => le_max_right _ _\n  have hm1 : AEMeasurable Xm μ := hX.1.ae_measurable.neg.max aemeasurable_const\n  have hm2 : AEMeasurable Xp μ := hX.1.ae_measurable.max aemeasurable_const\n  have hm3 : AEMeasurable Ym μ := hY.1.ae_measurable.neg.max aemeasurable_const\n  have hm4 : AEMeasurable Yp μ := hY.1.ae_measurable.max aemeasurable_const\n  have hv1 : integrable Xm μ := hX.neg_part\n  have hv2 : integrable Xp μ := hX.pos_part\n  have hv3 : integrable Ym μ := hY.neg_part\n  have hv4 : integrable Yp μ := hY.pos_part\n  have hi1 : indep_fun Xm Ym μ := hXY.comp negm negm\n  have hi2 : indep_fun Xp Ym μ := hXY.comp posm negm\n  have hi3 : indep_fun Xm Yp μ := hXY.comp negm posm\n  have hi4 : indep_fun Xp Yp μ := hXY.comp posm posm\n  have hl1 : integrable (Xm * Ym) μ := hi1.integrable_mul hv1 hv3\n  have hl2 : integrable (Xp * Ym) μ := hi2.integrable_mul hv2 hv3\n  have hl3 : integrable (Xm * Yp) μ := hi3.integrable_mul hv1 hv4\n  have hl4 : integrable (Xp * Yp) μ := hi4.integrable_mul hv2 hv4\n  have hl5 : integrable (Xp * Yp - Xm * Yp) μ := hl4.sub hl3\n  have hl6 : integrable (Xp * Ym - Xm * Ym) μ := hl2.sub hl1\n  simp_rw [hXpm, hYpm, mul_sub, sub_mul]\n  rw [integral_sub' hl5 hl6, integral_sub' hl4 hl3, integral_sub' hl2 hl1, integral_sub' hv2 hv1, integral_sub' hv4 hv3,\n    hi1.integral_mul_of_nonneg hp1 hp3 hm1 hm3, hi2.integral_mul_of_nonneg hp2 hp3 hm2 hm3,\n    hi3.integral_mul_of_nonneg hp1 hp4 hm1 hm4, hi4.integral_mul_of_nonneg hp2 hp4 hm2 hm4]\n  ring\n#align indep_fun.integral_mul_of_integrable indep_fun.integral_mul_of_integrable\n\n",
 "integral_mul'":
 "theorem indep_fun.integral_mul' (hXY : indep_fun X Y μ) (hX : ae_strongly_measurable X μ)\n    (hY : ae_strongly_measurable Y μ) : (integral μ fun ω => X ω * Y ω) = integral μ X * integral μ Y :=\n  hXY.integral_mul hX hY\n#align indep_fun.integral_mul' indep_fun.integral_mul'\n\n",
 "integral_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/-- The (Bochner) integral of the product of two independent random\n  variables is the product of their integrals. -/\ntheorem indep_fun.integral_mul (hXY : indep_fun X Y μ) (hX : ae_strongly_measurable X μ)\n    (hY : ae_strongly_measurable Y μ) : integral μ (X * Y) = integral μ X * integral μ Y :=\n  by\n  by_cases h'X : «expr =ᵐ[ ] » X μ 0\n  · have h' : «expr =ᵐ[ ] » (X * Y) μ 0 := by\n      filter_upwards [h'X]with ω hω\n      simp [hω]\n    simp only [integral_congr_ae h'X, integral_congr_ae h', Pi.zero_apply, integral_const, Algebra.id.smul_eq_mul,\n      MulZeroClass.mul_zero, MulZeroClass.zero_mul]\n  by_cases h'Y : «expr =ᵐ[ ] » Y μ 0\n  · have h' : «expr =ᵐ[ ] » (X * Y) μ 0 := by\n      filter_upwards [h'Y]with ω hω\n      simp [hω]\n    simp only [integral_congr_ae h'Y, integral_congr_ae h', Pi.zero_apply, integral_const, Algebra.id.smul_eq_mul,\n      MulZeroClass.mul_zero, MulZeroClass.zero_mul]\n  by_cases h : integrable (X * Y) μ\n  · have HX : integrable X μ := hXY.integrable_left_of_integrable_mul h hX hY h'Y\n    have HY : integrable Y μ := hXY.integrable_right_of_integrable_mul h hX hY h'X\n    exact hXY.integral_mul_of_integrable HX HY\n  · have I : ¬(integrable X μ ∧ integrable Y μ) := by\n      rintro ⟨HX, HY⟩\n      exact h (hXY.integrable_mul HX HY)\n    rw [not_and_or] at I\n    cases I <;> simp [integral_undef, I, h]\n#align indep_fun.integral_mul indep_fun.integral_mul\n\n",
 "integrable_right_of_integrable_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/-- If the product of two independent real_valued random variables is integrable and the\nfirst one is not almost everywhere zero, then the second one is integrable. -/\ntheorem indep_fun.integrable_right_of_integrable_mul {β : Type _} [MeasurableSpace β] {X Y : Ω → β}\n    [NormedDivisionRing β] [borel_space β] (hXY : indep_fun X Y μ) (h'XY : integrable (X * Y) μ)\n    (hX : ae_strongly_measurable X μ) (hY : ae_strongly_measurable Y μ) (h'X : ¬«expr =ᵐ[ ] » X μ 0) : integrable Y μ :=\n  by\n  refine' ⟨hY, _⟩\n  have I :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        («expr‖ ‖₊» (X ω)) μ ≠\n      0 :=\n    by\n    intro H\n    have I : «expr =ᵐ[ ] » (fun ω => ↑(«expr‖ ‖₊» (X ω))) μ 0 := (lintegral_eq_zero_iff' hX.ennnorm).1 H\n    apply h'X\n    filter_upwards [I]with ω hω\n    simpa using hω\n  apply lt_top_iff_ne_top.2 fun H => _\n  have J : indep_fun (fun ω => ↑(«expr‖ ‖₊» (X ω))) (fun ω => ↑(«expr‖ ‖₊» (Y ω))) μ :=\n    by\n    have M : Measurable fun x : β => («expr‖ ‖₊» x : ennreal) := measurable_nnnorm.coe_nnreal_ennreal\n    apply indep_fun.comp hXY M M\n  have A :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        («expr‖ ‖₊» (X ω * Y ω)) μ <\n      ennreal.top :=\n    h'XY.2\n  simp only [nnnorm_mul, ENNReal.coe_mul] at A\n  rw [lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'' hX.ennnorm hY.ennnorm J, H] at A\n  simpa [ENNReal.top_mul', I] using A\n#align indep_fun.integrable_right_of_integrable_mul indep_fun.integrable_right_of_integrable_mul\n\n",
 "integrable_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- The product of two independent, integrable, real_valued random variables is integrable. -/\ntheorem indep_fun.integrable_mul {β : Type _} [MeasurableSpace β] {X Y : Ω → β} [NormedDivisionRing β] [borel_space β]\n    (hXY : indep_fun X Y μ) (hX : integrable X μ) (hY : integrable Y μ) : integrable (X * Y) μ :=\n  by\n  let nX : Ω → ENNReal := fun a => «expr‖ ‖₊» (X a)\n  let nY : Ω → ENNReal := fun a => «expr‖ ‖₊» (Y a)\n  have hXY' : indep_fun (fun a => «expr‖ ‖₊» (X a)) (fun a => «expr‖ ‖₊» (Y a)) μ :=\n    hXY.comp measurable_nnnorm measurable_nnnorm\n  have hXY'' : indep_fun nX nY μ := hXY'.comp measurable_coe_nnreal_ennreal measurable_coe_nnreal_ennreal\n  have hnX : AEMeasurable nX μ := hX.1.ae_measurable.nnnorm.coe_nnreal_ennreal\n  have hnY : AEMeasurable nY μ := hY.1.ae_measurable.nnnorm.coe_nnreal_ennreal\n  have hmul :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (nX a * nY a)\n        μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (nX a) μ *\n        «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (nY a)\n          μ :=\n    by convert lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun' hnX hnY hXY''\n  refine' ⟨hX.1.mul hY.1, _⟩\n  simp_rw [has_finite_integral, Pi.mul_apply, nnnorm_mul, ENNReal.coe_mul, hmul]\n  exact ennreal.mul_lt_top_iff.mpr (or.inl ⟨hX.2, hY.2⟩)\n#align indep_fun.integrable_mul indep_fun.integrable_mul\n\n",
 "integrable_left_of_integrable_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/-- If the product of two independent real_valued random variables is integrable and\nthe second one is not almost everywhere zero, then the first one is integrable. -/\ntheorem indep_fun.integrable_left_of_integrable_mul {β : Type _} [MeasurableSpace β] {X Y : Ω → β}\n    [NormedDivisionRing β] [borel_space β] (hXY : indep_fun X Y μ) (h'XY : integrable (X * Y) μ)\n    (hX : ae_strongly_measurable X μ) (hY : ae_strongly_measurable Y μ) (h'Y : ¬«expr =ᵐ[ ] » Y μ 0) : integrable X μ :=\n  by\n  refine' ⟨hX, _⟩\n  have I :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        («expr‖ ‖₊» (Y ω)) μ ≠\n      0 :=\n    by\n    intro H\n    have I : «expr =ᵐ[ ] » (fun ω => ↑(«expr‖ ‖₊» (Y ω))) μ 0 := (lintegral_eq_zero_iff' hY.ennnorm).1 H\n    apply h'Y\n    filter_upwards [I]with ω hω\n    simpa using hω\n  apply lt_top_iff_ne_top.2 fun H => _\n  have J : indep_fun (fun ω => ↑(«expr‖ ‖₊» (X ω))) (fun ω => ↑(«expr‖ ‖₊» (Y ω))) μ :=\n    by\n    have M : Measurable fun x : β => («expr‖ ‖₊» x : ennreal) := measurable_nnnorm.coe_nnreal_ennreal\n    apply indep_fun.comp hXY M M\n  have A :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        («expr‖ ‖₊» (X ω * Y ω)) μ <\n      ennreal.top :=\n    h'XY.2\n  simp only [nnnorm_mul, ENNReal.coe_mul] at A\n  rw [lintegral_mul_eq_lintegral_mul_lintegral_of_indep_fun'' hX.ennnorm hY.ennnorm J, H] at A\n  simpa [ENNReal.top_mul', I] using A\n#align indep_fun.integrable_left_of_integrable_mul indep_fun.integrable_left_of_integrable_mul\n\n",
 "indep_fun_iff_integral_comp_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/-- Independence of functions `f` and `g` into arbitrary types is characterized by the relation\n  `E[(φ ∘ f) * (ψ ∘ g)] = E[φ ∘ f] * E[ψ ∘ g]` for all measurable `φ` and `ψ` with values in `ℝ`\n  satisfying appropriate integrability conditions. -/\ntheorem indep_fun_iff_integral_comp_mul [FiniteMeasure μ] {β β' : Type _} {mβ : MeasurableSpace β}\n    {mβ' : MeasurableSpace β'} {f : Ω → β} {g : Ω → β'} {hfm : Measurable f} {hgm : Measurable g} :\n    indep_fun f g μ ↔\n      ∀ {φ : β → exprℝ} {ψ : β' → exprℝ},\n        Measurable φ →\n          Measurable ψ →\n            integrable (φ ∘ f) μ →\n              integrable (ψ ∘ g) μ → integral μ (φ ∘ f * ψ ∘ g) = integral μ (φ ∘ f) * integral μ (ψ ∘ g) :=\n  by\n  refine' ⟨fun hfg _ _ hφ hψ => indep_fun.integral_mul_of_integrable (hfg.comp hφ hψ), _⟩\n  rintro h _ _ ⟨A, hA, rfl⟩ ⟨B, hB, rfl⟩\n  specialize\n    h (measurable_one.indicator hA) (measurable_one.indicator hB)\n      ((integrable_const 1).indicator (hfm.comp measurable_id hA))\n      ((integrable_const 1).indicator (hgm.comp measurable_id hB))\n  rwa [← ENNReal.toReal_eq_toReal (measure_ne_top μ _), ENNReal.toReal_mul, ←\n    integral_indicator_one ((hfm hA).inter (hgm hB)), ← integral_indicator_one (hfm hA), ←\n    integral_indicator_one (hgm hB), Set.inter_indicator_one]\n  exact ENNReal.mul_ne_top (measure_ne_top μ _) (measure_ne_top μ _)\n#align indep_fun_iff_integral_comp_mul indep_fun_iff_integral_comp_mul\n\n"}