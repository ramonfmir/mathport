{"zero_apply":
 "@[simp]\ntheorem zero_apply (a : α) : (0 : kernel α β) a = 0 :=\n  rfl\n#align zero_apply zero_apply\n\n",
 "sum_fintype":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum_univ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ -/\n@[simp]\ntheorem sum_fintype [fintype ι] (κ : ι → kernel α β) :\n    kernel.sum κ =\n      finset.sum_univ \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum_univ\" (κ i) :=\n  by\n  ext (a s hs)\n  simp only [sum_apply' κ a hs, finset_sum_apply' _ κ a s, tsum_fintype]\n#align sum_fintype sum_fintype\n\n",
 "sum_comm":
 "theorem sum_comm [countable ι] (κ : ι → ι → kernel α β) :\n    (kernel.sum fun n => kernel.sum (κ n)) = kernel.sum fun m => kernel.sum fun n => κ n m :=\n  by\n  ext (a s hs)\n  simp_rw [sum_apply]\n  rw [measure.sum_comm]\n#align sum_comm sum_comm\n\n",
 "sum_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\ntheorem sum_apply' [countable ι] (κ : ι → kernel α β) (a : α) {s : set β} (hs : measurable_set s) :\n    kernel.sum κ a s =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (κ n a s) :=\n  by rw [sum_apply κ a, measure.sum_apply _ hs]\n#align sum_apply' sum_apply'\n\n",
 "sum_apply":
 "theorem sum_apply [countable ι] (κ : ι → kernel α β) (a : α) : kernel.sum κ a = measure.sum fun n => κ n a :=\n  rfl\n#align sum_apply sum_apply\n\n",
 "sum_add":
 "theorem sum_add [countable ι] (κ η : ι → kernel α β) : (kernel.sum fun n => κ n + η n) = kernel.sum κ + kernel.sum η :=\n  by\n  ext (a s hs)\n  simp only [coe_fn_add, pi.add_apply, sum_apply, measure.sum_apply _ hs, pi.add_apply, measure.coe_add,\n    tsum_add ennreal.summable ennreal.summable]\n#align sum_add sum_add\n\n",
 "restrict_apply'":
 "theorem restrict_apply' (κ : kernel α β) (hs : measurable_set s) (a : α) (ht : measurable_set t) :\n    kernel.restrict κ hs a t = (κ a) (t ∩ s) := by rw [restrict_apply κ hs a, measure.restrict_apply ht]\n#align restrict_apply' restrict_apply'\n\n",
 "restrict_apply":
 "theorem restrict_apply (κ : kernel α β) (hs : measurable_set s) (a : α) : kernel.restrict κ hs a = (κ a).restrict s :=\n  rfl\n#align restrict_apply restrict_apply\n\n",
 "measure_sum_seq":
 "theorem measure_sum_seq (κ : kernel α β) [h : is_s_finite_kernel κ] (a : α) : (measure.sum fun n => seq κ n a) = κ a :=\n  by rw [← kernel.sum_apply, kernel_sum_seq κ]\n#align measure_sum_seq measure_sum_seq\n\n",
 "measure_le_bound":
 "theorem kernel.measure_le_bound (κ : kernel α β) [h : is_finite_kernel κ] (a : α) (s : set β) :\n    κ a s ≤ is_finite_kernel.bound κ :=\n  (measure_mono (Set.subset_univ s)).trans (h.exists_univ_le.some_spec.2 a)\n#align kernel.measure_le_bound kernel.measure_le_bound\n\n",
 "measurable_set_lintegral'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , ∂ » -/\ntheorem measurable_set_lintegral' (κ : kernel α β) [is_s_finite_kernel κ] {f : β → ennreal} (hf : measurable f)\n    {s : set β} (hs : measurable_set s) :\n    measurable fun a =>\n      «expr∫⁻ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , ∂ »\" s\n        (f b) (κ a) :=\n  measurable_set_lintegral κ (hf.comp measurable_snd) hs\n#align measurable_set_lintegral' measurable_set_lintegral'\n\n",
 "measurable_set_lintegral":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , ∂ » -/\ntheorem measurable_set_lintegral (κ : kernel α β) [is_s_finite_kernel κ] {f : α → β → ennreal}\n    (hf : measurable (function.uncurry f)) {s : set β} (hs : measurable_set s) :\n    measurable fun a =>\n      «expr∫⁻ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , ∂ »\" s\n        (f a b) (κ a) :=\n  by\n  simp_rw [← lintegral_restrict κ hs]\n  exact measurable_lintegral _ hf\n#align measurable_set_lintegral measurable_set_lintegral\n\n",
 "measurable_prod_mk_mem_of_finite":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ᶜ» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/-- This is an auxiliary lemma for `measurable_prod_mk_mem`. -/\ntheorem measurable_prod_mk_mem_of_finite (κ : kernel α β) {t : set (α × β)} (ht : measurable_set t)\n    (hκs : ∀ a, is_finite_measure (κ a)) : measurable fun a => κ a { b | (a, b) ∈ t } :=\n  by\n  -- `t` is a measurable set in the product `α × β`: we use that the product σ-algebra is generated\n  -- by boxes to prove the result by induction.\n  refine' measurable_space.induction_on_inter generate_from_prod.symm is_pi_system_prod _ _ _ _ ht\n  ·-- case `t = ∅`\n    simp only [Set.mem_empty_iff_false, Set.setOf_false, measure_empty, measurable_const]\n  · -- case of a box: `t = t₁ ×ˢ t₂` for measurable sets `t₁` and `t₂`\n    intro t' ht'\n    simp only [Set.mem_image2, Set.mem_setOf_eq, exists_and_left] at ht'\n    obtain ⟨t₁, ht₁, t₂, ht₂, rfl⟩ := ht'\n    simp only [Set.prod_mk_mem_set_prod_eq]\n    classical\n      have h_eq_ite : (fun a => κ a { b : β | a ∈ t₁ ∧ b ∈ t₂ }) = fun a => ite (a ∈ t₁) (κ a t₂) 0 :=\n        by\n        ext1 a\n        split_ifs\n        · simp only [h, true_and_iff]\n          rfl\n        · simp only [h, false_and_iff, Set.setOf_false, Set.inter_empty, measure_empty]\n      rw [h_eq_ite]\n      exact measurable.ite ht₁ (kernel.measurable_coe κ ht₂) measurable_const\n  · -- we assume that the result is true for `t` and we prove it for `tᶜ`\n    intro t' ht' h_meas\n    have h_eq_sdiff : ∀ a, { b : β | (a, b) ∈ «expr ᶜ» t' } = Set.univ \\ { b : β | (a, b) ∈ t' } :=\n      by\n      intro a\n      ext1 b\n      simp only [Set.mem_compl_iff, Set.mem_setOf_eq, Set.mem_diff, Set.mem_univ, true_and_iff]\n    simp_rw [h_eq_sdiff]\n    have : (fun a => κ a (Set.univ \\ { b : β | (a, b) ∈ t' })) = fun a => κ a Set.univ - κ a { b : β | (a, b) ∈ t' } :=\n      by\n      ext1 a\n      rw [← Set.diff_inter_self_eq_diff, Set.inter_univ, measure_diff]\n      · exact Set.subset_univ _\n      · exact (@measurable_prod_mk_left α β _ _ a) t' ht'\n      · exact measure_ne_top _ _\n    rw [this]\n    exact measurable.sub (kernel.measurable_coe κ measurable_set.univ) h_meas\n  · -- we assume that the result is true for a family of disjoint sets and prove it for their union\n    intro f h_disj hf_meas hf\n    have h_Union :\n      (fun a =>\n          κ a\n            { b : β |\n              (a, b) ∈\n                «expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n                  (f i) }) =\n        fun a =>\n        κ a\n          («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n            { b : β | (a, b) ∈ f i }) :=\n      by\n      ext1 a\n      congr with b\n      simp only [Set.mem_unionᵢ, Set.supᵢ_eq_unionᵢ, Set.mem_setOf_eq]\n      rfl\n    rw [h_Union]\n    have h_tsum :\n      (fun a =>\n          κ a\n            («expr⋃ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⋃ , »\"\n              { b : β | (a, b) ∈ f i })) =\n        fun a =>\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (κ a { b : β | (a, b) ∈ f i }) :=\n      by\n      ext1 a\n      rw [measure_Union]\n      · intro i j hij s hsi hsj b hbs\n        have habi : {(a, b)} ⊆ f i := by\n          rw [Set.singleton_subset_iff]\n          exact hsi hbs\n        have habj : {(a, b)} ⊆ f j := by\n          rw [Set.singleton_subset_iff]\n          exact hsj hbs\n        simpa only [Set.bot_eq_empty, Set.le_eq_subset, Set.singleton_subset_iff, Set.mem_empty_iff_false] using\n          h_disj hij habi habj\n      · exact fun i => (@measurable_prod_mk_left α β _ _ a) _ (hf_meas i)\n    rw [h_tsum]\n    exact measurable.ennreal_tsum hf\n#align measurable_prod_mk_mem_of_finite measurable_prod_mk_mem_of_finite\n\n",
 "measurable_prod_mk_mem":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\ntheorem measurable_prod_mk_mem (κ : kernel α β) [is_s_finite_kernel κ] {t : set (α × β)} (ht : measurable_set t) :\n    measurable fun a => κ a { b | (a, b) ∈ t } :=\n  by\n  rw [← kernel_sum_seq κ]\n  have :\n    ∀ a,\n      kernel.sum (seq κ) a { b : β | (a, b) ∈ t } =\n        «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n          (seq κ n a { b : β | (a, b) ∈ t }) :=\n    fun a => kernel.sum_apply' _ _ (measurable_prod_mk_left ht)\n  simp_rw [this]\n  refine' measurable.ennreal_tsum fun n => _\n  exact measurable_prod_mk_mem_of_finite (seq κ n) ht infer_instance\n#align measurable_prod_mk_mem measurable_prod_mk_mem\n\n",
 "measurable_lintegral_indicator_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\ntheorem measurable_lintegral_indicator_const (κ : kernel α β) [is_s_finite_kernel κ] {t : set (α × β)}\n    (ht : measurable_set t) (c : ennreal) :\n    measurable fun a =>\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        (t.indicator (function.const (α × β) c) (a, b)) (κ a) :=\n  by\n  simp_rw [lintegral_indicator_const_comp measurable_prod_mk_left ht _]\n  exact measurable.const_mul (measurable_prod_mk_mem _ ht) c\n#align measurable_lintegral_indicator_const measurable_lintegral_indicator_const\n\n",
 "measurable_lintegral'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\ntheorem measurable_lintegral' (κ : kernel α β) [is_s_finite_kernel κ] {f : β → ennreal} (hf : measurable f) :\n    measurable fun a =>\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f b)\n        (κ a) :=\n  measurable_lintegral κ (hf.comp measurable_snd)\n#align measurable_lintegral' measurable_lintegral'\n\n",
 "measurable_lintegral":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-- For an s-finite kernel `κ` and a function `f : α → β → ℝ≥0∞` which is measurable when seen as a\nmap from `α × β` (hypothesis `measurable (function.uncurry f)`), the integral\n`a ↦ ∫⁻ b, f a b ∂(κ a)` is measurable. -/\ntheorem measurable_lintegral (κ : kernel α β) [is_s_finite_kernel κ] {f : α → β → ennreal}\n    (hf : measurable (function.uncurry f)) :\n    measurable fun a =>\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f a b)\n        (κ a) :=\n  by\n  let F : ℕ → simple_func (α × β) (ennreal) := simple_func.eapprox (function.uncurry f)\n  have h :\n    ∀ a,\n      «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (F n a) =\n        function.uncurry f a :=\n    simple_func.supr_eapprox_apply (function.uncurry f) hf\n  simp only [prod.forall, function.uncurry_apply_pair] at h\n  simp_rw [← h]\n  have :\n    ∀ a,\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n          («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\" (F n (a, b)))\n          (κ a) =\n        «expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n          («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n            (F n (a, b)) (κ a)) :=\n    by\n    intro a\n    rw [lintegral_supr]\n    · exact fun n => (F n).measurable.comp measurable_prod_mk_left\n    · exact fun i j hij b => simple_func.monotone_eapprox (function.uncurry f) hij _\n  simp_rw [this]\n  refine' measurable_supr fun n => simple_func.induction _ _ (F n)\n  · intro c t ht\n    simp only [simple_func.const_zero, simple_func.coe_piecewise, simple_func.coe_const, simple_func.coe_zero,\n      set.piecewise_eq_indicator]\n    exact measurable_lintegral_indicator_const κ ht c\n  · intro g₁ g₂ h_disj hm₁ hm₂\n    simp only [simple_func.coe_add, pi.add_apply]\n    have h_add :\n      (fun a =>\n          «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n            (g₁ (a, b) + g₂ (a, b)) (κ a)) =\n        (fun a =>\n            «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n              (g₁ (a, b)) (κ a)) +\n          fun a =>\n          «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n            (g₂ (a, b)) (κ a) :=\n      by\n      ext1 a\n      rw [pi.add_apply, lintegral_add_left (g₁.measurable.comp measurable_prod_mk_left)]\n    rw [h_add]\n    exact measurable.add hm₁ hm₂\n#align measurable_lintegral measurable_lintegral\n\n",
 "measurable_coe":
 "protected theorem measurable_coe (κ : kernel α β) {s : set β} (hs : measurable_set s) : measurable fun a => κ a s :=\n  (measure.measurable_coe hs).comp (kernel.measurable κ)\n#align measurable_coe measurable_coe\n\n",
 "measurable":
 "protected theorem measurable (κ : kernel α β) : measurable κ :=\n  κ.prop\n#align measurable measurable\n\n",
 "lintegral_restrict":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , ∂ » -/\ntheorem lintegral_restrict (κ : kernel α β) (hs : measurable_set s) (a : α) (f : β → ennreal) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f b)\n        (kernel.restrict κ hs a) =\n      «expr∫⁻ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ in , ∂ »\" s\n        (f b) (κ a) :=\n  by rw [restrict_apply]\n#align lintegral_restrict lintegral_restrict\n\n",
 "kernel_sum_seq":
 "theorem kernel_sum_seq (κ : kernel α β) [h : is_s_finite_kernel κ] : kernel.sum (seq κ) = κ :=\n  h.tsum_finite.some_spec.2.symm\n#align kernel_sum_seq kernel_sum_seq\n\n",
 "is_s_finite_kernel_sum_of_denumerable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\ntheorem is_s_finite_kernel_sum_of_denumerable [denumerable ι] {κs : ι → kernel α β}\n    (hκs : ∀ n, is_s_finite_kernel (κs n)) : is_s_finite_kernel (kernel.sum κs) :=\n  by\n  let e : «expr ≃ » ℕ (ι × ℕ) := denumerable.equiv₂ ℕ (ι × ℕ)\n  refine' ⟨⟨fun n => seq (κs (e n).1) (e n).2, infer_instance, _⟩⟩\n  have hκ_eq : kernel.sum κs = kernel.sum fun n => kernel.sum (seq (κs n)) := by simp_rw [kernel_sum_seq]\n  ext (a s hs) : 2\n  rw [hκ_eq]\n  simp_rw [kernel.sum_apply' _ _ hs]\n  change\n    «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        (seq (κs i) m a s) =\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\"\n        ((fun im : ι × ℕ => seq (κs im.fst) im.snd a s) (e n))\n  rw [e.tsum_eq]\n  · rw [tsum_prod' ennreal.summable fun _ => ennreal.summable]\n  · infer_instance\n#align is_s_finite_kernel_sum_of_denumerable is_s_finite_kernel_sum_of_denumerable\n\n",
 "is_s_finite_kernel_sum":
 "theorem is_s_finite_kernel_sum [countable ι] {κs : ι → kernel α β} (hκs : ∀ n, is_s_finite_kernel (κs n)) :\n    is_s_finite_kernel (kernel.sum κs) := by\n  cases fintype_or_infinite ι\n  · rw [sum_fintype]\n    exact is_s_finite_kernel.finset_sum finset.univ fun i _ => hκs i\n  haveI : Encodable ι := Encodable.ofCountable ι\n  haveI : denumerable ι := denumerable.of_encodable_of_infinite ι\n  exact is_s_finite_kernel_sum_of_denumerable hκs\n#align is_s_finite_kernel_sum is_s_finite_kernel_sum\n\n",
 "finset_sum_apply'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem finset_sum_apply' (I : Finset ι) (κ : ι → kernel α β) (a : α) (s : set β) :\n    (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κ i)) a s =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κ i a s) :=\n  by rw [finset_sum_apply, measure.finset_sum_apply]\n#align finset_sum_apply' finset_sum_apply'\n\n",
 "finset_sum_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem finset_sum_apply (I : Finset ι) (κ : ι → kernel α β) (a : α) :\n    (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κ i)) a =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κ i a) :=\n  by rw [coe_finset_sum, finset.sum_apply]\n#align finset_sum_apply finset_sum_apply\n\n",
 "finset_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem is_s_finite_kernel.finset_sum {κs : ι → kernel α β} (I : Finset ι) (h : ∀ i ∈ I, is_s_finite_kernel (κs i)) :\n    is_s_finite_kernel\n      (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κs i)) :=\n  by\n  classical\n    induction' I using Finset.induction with i I hi_nmem_I h_ind h\n    · rw [finset.sum_empty]\n      infer_instance\n    · rw [finset.sum_insert hi_nmem_I]\n      haveI : is_s_finite_kernel (κs i) := h i (Finset.mem_insert_self _ _)\n      have :\n        is_s_finite_kernel\n          (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κs x)) :=\n        h_ind fun i hiI => h i (Finset.mem_insert_of_mem hiI)\n      exact is_s_finite_kernel.add _ _\n#align is_s_finite_kernel.finset_sum is_s_finite_kernel.finset_sum\n\n",
 "ext_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\ntheorem ext_fun {κ η : kernel α β}\n    (h :\n      ∀ a f,\n        measurable f →\n          «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f b)\n              (κ a) =\n            «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f b)\n              (η a)) :\n    κ = η := by\n  ext (a s hs)\n  specialize h a (s.indicator fun _ => 1) (measurable.indicator measurable_const hs)\n  simp_rw [lintegral_indicator_const hs, one_mul] at h\n  rw [h]\n#align ext_fun ext_fun\n\n",
 "ext":
 "@[ext]\ntheorem ext {κ : kernel α β} {η : kernel α β} (h : ∀ a, κ a = η a) : κ = η :=\n  by\n  ext1\n  ext1 a\n  exact h a\n#align ext ext\n\n",
 "deterministic_apply'":
 "theorem deterministic_apply' {f : α → β} (hf : measurable f) (a : α) {s : set β} (hs : measurable_set s) :\n    deterministic hf a s = s.indicator (fun _ => 1) (f a) :=\n  by\n  rw [deterministic]\n  change measure.dirac (f a) s = s.indicator 1 (f a)\n  simp_rw [measure.dirac_apply' _ hs]\n#align deterministic_apply' deterministic_apply'\n\n",
 "deterministic_apply":
 "theorem deterministic_apply {f : α → β} (hf : measurable f) (a : α) : deterministic hf a = measure.dirac (f a) :=\n  rfl\n#align deterministic_apply deterministic_apply\n\n",
 "coe_fn_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/-\nCopyright (c) 2022 Rémy Degenne. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Rémy Degenne\n-/\n@[simp]\ntheorem coe_fn_zero : «expr⇑ » (0 : kernel α β) = 0 :=\n  rfl\n#align coe_fn_zero coe_fn_zero\n\n",
 "coe_fn_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n@[simp]\ntheorem coe_fn_add (κ η : kernel α β) : «expr⇑ » (κ + η) = κ + η :=\n  rfl\n#align coe_fn_add coe_fn_add\n\n",
 "coe_finset_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⇑ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n@[simp]\ntheorem coe_finset_sum (I : Finset ι) (κ : ι → kernel α β) :\n    «expr⇑ » (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κ i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" I (κ i) :=\n  (coe_add_hom α β).map_sum _ _\n#align coe_finset_sum coe_finset_sum\n\n",
 "bound_ne_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem is_finite_kernel.bound_ne_top (κ : kernel α β) [h : is_finite_kernel κ] :\n    is_finite_kernel.bound κ ≠ ennreal.top :=\n  (is_finite_kernel.bound_lt_top κ).ne\n#align is_finite_kernel.bound_ne_top is_finite_kernel.bound_ne_top\n\n",
 "bound_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem is_finite_kernel.bound_lt_top (κ : kernel α β) [h : is_finite_kernel κ] :\n    is_finite_kernel.bound κ < ennreal.top :=\n  h.exists_univ_le.some_spec.1\n#align is_finite_kernel.bound_lt_top is_finite_kernel.bound_lt_top\n\n"}