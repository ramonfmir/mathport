{"map_measure_zero":
 "@[simp]\ntheorem map_measure_zero (κ : kernel α β) : map_measure κ 0 = 0 :=\n  by\n  ext1 s hs\n  rw [map_measure_apply κ 0 hs, lintegral_zero_measure, measure.coe_zero, Pi.zero_apply]\n#align map_measure_zero map_measure_zero\n\n",
 "map_measure_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem map_measure_smul (κ : kernel α β) (μ : measure α) (r : ennreal) :\n    map_measure κ («expr • » r μ) = «expr • » r (map_measure κ μ) :=\n  by\n  ext1 s hs\n  rw [map_measure_apply κ («expr • » r μ) hs, lintegral_smul_measure, measure.coe_smul, Pi.smul_apply,\n    map_measure_apply κ μ hs, smul_eq_mul]\n#align map_measure_smul map_measure_smul\n\n",
 "map_measure_apply":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/-\nCopyright (c) 2023 Kexing Ying. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kexing Ying\n-/\n@[simp]\ntheorem map_measure_apply (κ : kernel α β) (μ : measure α) {s : Set β} (hs : MeasurableSet s) :\n    map_measure κ μ s =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (κ x s) μ :=\n  by rw [map_measure, measure.of_measurable_apply s hs]\n#align map_measure_apply map_measure_apply\n\n",
 "map_measure_add":
 "@[simp]\ntheorem map_measure_add (κ : kernel α β) (μ ν : measure α) :\n    map_measure κ (μ + ν) = map_measure κ μ + map_measure κ ν :=\n  by\n  ext1 s hs\n  rw [map_measure_apply κ (μ + ν) hs, lintegral_add_measure, measure.coe_add, Pi.add_apply, map_measure_apply κ μ hs,\n    map_measure_apply κ ν hs]\n#align map_measure_add map_measure_add\n\n",
 "lintegral_map_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\ntheorem lintegral_map_measure (κ : kernel α β) [is_s_finite_kernel κ] (μ : measure α) [FiniteMeasure μ]\n    {f : β → ennreal} (hf : Measurable f) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f b)\n        (map_measure κ μ) =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        («expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f b)\n          (κ a))\n        μ :=\n  by\n  by_cases hα : Nonempty α\n  · have := const_apply μ hα.some\n    swap\n    infer_instance\n    conv_rhs => rw [← this]\n    rw [← lintegral_comp _ _ _ hf, ← comp_const_apply_eq_map_measure κ μ hα.some]\n  · haveI := not_nonempty_iff.1 hα\n    rw [μ.eq_zero_of_is_empty, map_measure_zero, lintegral_zero_measure, lintegral_zero_measure]\n#align lintegral_map_measure lintegral_map_measure\n\n",
 "def":
 "theorem invariant.def (hκ : invariant κ μ) : map_measure κ μ = μ :=\n  hκ\n#align invariant.def invariant.def\n\n",
 "const_map_measure_eq_comp_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `kernel.comp -/\ntheorem const_map_measure_eq_comp_const (κ : kernel α β) [is_s_finite_kernel κ] (μ : measure α) [FiniteMeasure μ] :\n    const α (map_measure κ μ) = kernel.comp κ (const α μ) :=\n  by\n  ext1 a; ext1 s hs\n  rw [const_apply, map_measure_apply _ _ hs, comp_apply _ _ _ hs, const_apply]\n#align const_map_measure_eq_comp_const const_map_measure_eq_comp_const\n\n",
 "comp_const_apply_eq_map_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `kernel.comp -/\ntheorem comp_const_apply_eq_map_measure (κ : kernel α β) [is_s_finite_kernel κ] (μ : measure α) [FiniteMeasure μ]\n    (a : α) : (kernel.comp κ (const α μ)) a = map_measure κ μ := by\n  rw [← const_apply (map_measure κ μ) a, const_map_measure_eq_comp_const κ μ]\n#align comp_const_apply_eq_map_measure comp_const_apply_eq_map_measure\n\n",
 "comp_const":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `kernel.comp -/\ntheorem invariant.comp_const [is_s_finite_kernel κ] [FiniteMeasure μ] (hκ : invariant κ μ) :\n    kernel.comp κ (const α μ) = const α μ := by rw [← const_map_measure_eq_comp_const κ μ, hκ.def]\n#align invariant.comp_const invariant.comp_const\n\n",
 "comp_apply_eq_map_measure":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `kernel.comp -/\ntheorem comp_apply_eq_map_measure (η : kernel β γ) [is_s_finite_kernel η] (κ : kernel α β) [is_s_finite_kernel κ]\n    (a : α) : (kernel.comp η κ) a = map_measure η (κ a) :=\n  by\n  ext1 s hs\n  rw [comp_apply η κ a hs, map_measure_apply η _ hs]\n#align comp_apply_eq_map_measure comp_apply_eq_map_measure\n\n",
 "comp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `kernel.comp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `kernel.comp -/\ntheorem invariant.comp [is_s_finite_kernel κ] [is_s_finite_kernel η] [FiniteMeasure μ] (hκ : invariant κ μ)\n    (hη : invariant η μ) : invariant (kernel.comp κ η) μ :=\n  by\n  by_cases hα : Nonempty α\n  ·\n    simp_rw [invariant, ← comp_const_apply_eq_map_measure (kernel.comp κ η) μ hα.some, comp_assoc, hη.comp_const,\n      hκ.comp_const, const_apply]\n  · haveI := not_nonempty_iff.1 hα\n    exact subsingleton.elim _ _\n#align invariant.comp invariant.comp\n\n"}