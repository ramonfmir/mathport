{"variance_zero":
 "@[simp]\ntheorem variance_zero (μ : measure Ω) : variance 0 μ = 0 := by\n  simp only [variance, evariance_zero, ennreal.zero_to_real]\n#align variance_zero variance_zero\n\n",
 "variance_sum":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/-- The variance of a finite sum of pairwise independent random variables is the sum of the\nvariances. -/\ntheorem indep_fun.variance_sum [is_probability_measure (measure_space.volume : measure Ω)] {ι : Type _}\n    {X : ι → Ω → exprℝ} {s : Finset ι} (hs : ∀ i ∈ s, mem_ℒp (X i) 2)\n    (h : Set.Pairwise ↑s fun i j => indep_fun (X i) (X j)) :\n    probability_theory.variance\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s (X i)) =\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n        (probability_theory.variance (X i)) :=\n  by\n  classical\n    induction' s using Finset.induction_on with k s ks IH\n    · simp only [finset.sum_empty, variance_zero]\n    rw [variance_def' (mem_ℒp_finset_sum' _ hs), sum_insert ks, sum_insert ks]\n    simp only [add_sq']\n    calc\n      expected_value\n              (X k ^ 2 +\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                      (X i) ^\n                    2 +\n                2 * X k *\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                    (X i)) -\n            expected_value\n                (X k +\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                    (X i)) ^\n              2 =\n          expected_value (X k ^ 2) +\n                expected_value\n                  (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                      (X i) ^\n                    2) +\n              expected_value\n                (2 * X k *\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                    (X i)) -\n            (expected_value (X k) +\n                expected_value\n                  (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                    (X i))) ^\n              2 :=\n        by\n        rw [integral_add', integral_add', integral_add']\n        · exact mem_ℒp.integrable one_le_two (hs _ (mem_insert_self _ _))\n        · apply integrable_finset_sum' _ fun i hi => _\n          exact mem_ℒp.integrable one_le_two (hs _ (mem_insert_of_mem hi))\n        · exact mem_ℒp.integrable_sq (hs _ (mem_insert_self _ _))\n        · apply mem_ℒp.integrable_sq\n          exact mem_ℒp_finset_sum' _ fun i hi => hs _ (mem_insert_of_mem hi)\n        · apply integrable.add\n          · exact mem_ℒp.integrable_sq (hs _ (mem_insert_self _ _))\n          · apply mem_ℒp.integrable_sq\n            exact mem_ℒp_finset_sum' _ fun i hi => hs _ (mem_insert_of_mem hi)\n        · rw [mul_assoc]\n          apply integrable.const_mul _ (2 : exprℝ)\n          simp only [mul_sum, sum_apply, pi.mul_apply]\n          apply integrable_finset_sum _ fun i hi => _\n          apply\n            indep_fun.integrable_mul _ (mem_ℒp.integrable one_le_two (hs _ (mem_insert_self _ _)))\n              (mem_ℒp.integrable one_le_two (hs _ (mem_insert_of_mem hi)))\n          apply h (mem_insert_self _ _) (mem_insert_of_mem hi)\n          exact fun hki => ks (hki.symm ▸ hi)\n      _ =\n          probability_theory.variance (X k) +\n              probability_theory.variance\n                (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                  (X i)) +\n            (expected_value\n                (2 * X k *\n                  finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                    (X i)) -\n              2 * expected_value (X k) *\n                expected_value\n                  (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                    (X i))) :=\n        by\n        rw [variance_def' (hs _ (mem_insert_self _ _)),\n          variance_def' (mem_ℒp_finset_sum' _ fun i hi => hs _ (mem_insert_of_mem hi))]\n        ring\n      _ =\n          probability_theory.variance (X k) +\n            probability_theory.variance\n              (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n                (X i)) :=\n        by\n        simp only [mul_assoc, integral_mul_left, pi.mul_apply, pi.bit0_apply, pi.one_apply, sum_apply,\n          add_right_eq_self, mul_sum]\n        rw [integral_finset_sum s fun i hi => _]; swap\n        · apply integrable.const_mul _ (2 : exprℝ)\n          apply\n            indep_fun.integrable_mul _ (mem_ℒp.integrable one_le_two (hs _ (mem_insert_self _ _)))\n              (mem_ℒp.integrable one_le_two (hs _ (mem_insert_of_mem hi)))\n          apply h (mem_insert_self _ _) (mem_insert_of_mem hi)\n          exact fun hki => ks (hki.symm ▸ hi)\n        rw [integral_finset_sum s fun i hi => mem_ℒp.integrable one_le_two (hs _ (mem_insert_of_mem hi)), mul_sum,\n          mul_sum, ← sum_sub_distrib]\n        apply finset.sum_eq_zero fun i hi => _\n        rw [integral_mul_left, indep_fun.integral_mul', sub_self]\n        · apply h (mem_insert_self _ _) (mem_insert_of_mem hi)\n          exact fun hki => ks (hki.symm ▸ hi)\n        · exact mem_ℒp.ae_strongly_measurable (hs _ (mem_insert_self _ _))\n        · exact mem_ℒp.ae_strongly_measurable (hs _ (mem_insert_of_mem hi))\n      _ =\n          probability_theory.variance (X k) +\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" s\n              (probability_theory.variance (X i)) :=\n        by rw [IH (fun i hi => hs i (mem_insert_of_mem hi)) (h.mono (by simp only [coe_insert, Set.subset_insert]))]\n      \n#align indep_fun.variance_sum indep_fun.variance_sum\n\n",
 "variance_smul'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem variance_smul' {A : Type _} [CommSemiring A] [algebra A (exprℝ)] (c : A) (X : Ω → exprℝ) (μ : measure Ω) :\n    variance («expr • » c X) μ = «expr • » (c ^ 2) (variance X μ) :=\n  by\n  convert variance_smul (algebra_map A (exprℝ) c) X μ\n  · ext1 x\n    simp only [algebra_map_smul]\n  · simp only [algebra.smul_def, map_pow]\n#align variance_smul' variance_smul'\n\n",
 "variance_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem variance_smul (c : exprℝ) (X : Ω → exprℝ) (μ : measure Ω) : variance («expr • » c X) μ = c ^ 2 * variance X μ :=\n  variance_mul c X μ\n#align variance_smul variance_smul\n\n",
 "variance_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem variance_nonneg (X : Ω → exprℝ) (μ : measure Ω) : 0 ≤ variance X μ :=\n  ennreal.to_real_nonneg\n#align variance_nonneg variance_nonneg\n\n",
 "variance_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem variance_mul (c : exprℝ) (X : Ω → exprℝ) (μ : measure Ω) :\n    variance (fun ω => c * X ω) μ = c ^ 2 * variance X μ :=\n  by\n  rw [variance, evariance_mul, ennreal.to_real_mul, ennreal.to_real_of_real (sq_nonneg _)]\n  rfl\n#align variance_mul variance_mul\n\n",
 "variance_le_expectation_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\ntheorem variance_le_expectation_sq [is_probability_measure (measure_space.volume : measure Ω)] {X : Ω → exprℝ}\n    (hm : ae_strongly_measurable X (measure_space.volume)) : probability_theory.variance X ≤ expected_value (X ^ 2) :=\n  by\n  by_cases hX : mem_ℒp X 2\n  · rw [variance_def' hX]\n    simp only [sq_nonneg, sub_le_self_iff]\n  rw [variance, evariance_eq_lintegral_of_real, ← integral_eq_lintegral_of_nonneg_ae]\n  by_cases hint : integrable X; swap\n  · simp only [integral_undef hint, pi.pow_apply, pi.sub_apply, sub_zero]\n  · rw [integral_undef]\n    · exact integral_nonneg fun a => sq_nonneg _\n    · intro h\n      have A : mem_ℒp (X - fun ω : Ω => expected_value X) 2 (measure_space.volume) :=\n        (mem_ℒp_two_iff_integrable_sq (hint.ae_strongly_measurable.sub ae_strongly_measurable_const)).2 h\n      have B : mem_ℒp (fun ω : Ω => expected_value X) 2 (measure_space.volume) := mem_ℒp_const _\n      apply hX\n      convert A.add B\n      simp\n  · exact ae_of_all _ fun x => sq_nonneg _\n  · exact (ae_measurable.pow_const (hm.ae_measurable.sub_const _) _).ae_strongly_measurable\n#align variance_le_expectation_sq variance_le_expectation_sq\n\n",
 "variance_eq_of_integral_eq_zero":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\ntheorem _root_.measure_theory.mem_ℒp.variance_eq_of_integral_eq_zero (hX : mem_ℒp X 2 μ)\n    (hXint : condexp.probability μ X = 0) : variance X μ = condexp.probability μ (X ^ 2) :=\n  by\n  rw [variance, evariance_eq_lintegral_of_real, ← of_real_integral_eq_lintegral_of_real, ennreal.to_real_of_real] <;>\n    simp_rw [hXint, sub_zero]\n  · rfl\n  · exact integral_nonneg fun ω => pow_two_nonneg _\n  · convert hX.integrable_norm_rpow ennreal.two_ne_zero ennreal.two_ne_top\n    ext ω\n    simp only [pi.sub_apply, real.norm_eq_abs, ennreal.to_real_bit0, ennreal.one_to_real, real.rpow_two, pow_bit0_abs]\n  · exact ae_of_all _ fun ω => pow_two_nonneg _\n#align measure_theory.mem_ℒp.variance_eq_of_integral_eq_zero measure_theory.mem_ℒp.variance_eq_of_integral_eq_zero\n\n",
 "variance_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\ntheorem _root_.measure_theory.mem_ℒp.variance_eq [is_finite_measure μ] (hX : mem_ℒp X 2 μ) :\n    variance X μ = condexp.probability μ ((X - fun ω => condexp.probability μ X) ^ 2) :=\n  by\n  rw [variance, evariance_eq_lintegral_of_real, ← of_real_integral_eq_lintegral_of_real, ennreal.to_real_of_real]\n  · rfl\n  · exact integral_nonneg fun ω => pow_two_nonneg _\n  · convert\n      (hX.sub <| mem_ℒp_const (condexp.probability μ X)).integrable_norm_rpow ennreal.two_ne_zero ennreal.two_ne_top\n    ext ω\n    simp only [pi.sub_apply, real.norm_eq_abs, ennreal.to_real_bit0, ennreal.one_to_real, real.rpow_two, pow_bit0_abs]\n  · exact ae_of_all _ fun ω => pow_two_nonneg _\n#align measure_theory.mem_ℒp.variance_eq measure_theory.mem_ℒp.variance_eq\n\n",
 "variance_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\ntheorem variance_def' [is_probability_measure (measure_space.volume : measure Ω)] {X : Ω → exprℝ} (hX : mem_ℒp X 2) :\n    probability_theory.variance X = expected_value (X ^ 2) - expected_value X ^ 2 :=\n  by\n  rw [hX.variance_eq, sub_sq', integral_sub', integral_add']; rotate_left\n  · exact hX.integrable_sq\n  · convert integrable_const (expected_value X ^ 2)\n    infer_instance\n  · apply hX.integrable_sq.add\n    convert integrable_const (expected_value X ^ 2)\n    infer_instance\n  · exact ((hX.integrable one_le_two).const_mul 2).mul_const' _\n  simp only [integral_mul_right, pi.pow_apply, pi.mul_apply, pi.bit0_apply, pi.one_apply,\n    integral_const (integral (measure_space.volume) X ^ 2), integral_mul_left (2 : exprℝ), one_mul, variance,\n    pi.pow_apply, measure_univ, ennreal.one_to_real, algebra.id.smul_eq_mul]\n  ring\n#align variance_def' variance_def'\n\n",
 "variance_add":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/-- The variance of the sum of two independent random variables is the sum of the variances. -/\ntheorem indep_fun.variance_add [is_probability_measure (measure_space.volume : measure Ω)] {X Y : Ω → exprℝ}\n    (hX : mem_ℒp X 2) (hY : mem_ℒp Y 2) (h : indep_fun X Y) :\n    probability_theory.variance (X + Y) = probability_theory.variance X + probability_theory.variance Y :=\n  calc\n    probability_theory.variance (X + Y) =\n        (expected_value fun a => X a ^ 2 + Y a ^ 2 + 2 * X a * Y a) - expected_value (X + Y) ^ 2 :=\n      by simp [variance_def' (hX.add hY), add_sq']\n    _ =\n        expected_value (X ^ 2) + expected_value (Y ^ 2) + 2 * expected_value (X * Y) -\n          (expected_value X + expected_value Y) ^ 2 :=\n      by\n      simp only [pi.add_apply, pi.pow_apply, pi.mul_apply, mul_assoc]\n      rw [integral_add, integral_add, integral_add, integral_mul_left]\n      · exact hX.integrable one_le_two\n      · exact hY.integrable one_le_two\n      · exact hX.integrable_sq\n      · exact hY.integrable_sq\n      · exact hX.integrable_sq.add hY.integrable_sq\n      · apply integrable.const_mul\n        exact h.integrable_mul (hX.integrable one_le_two) (hY.integrable one_le_two)\n    _ =\n        expected_value (X ^ 2) + expected_value (Y ^ 2) + 2 * (expected_value X * expected_value Y) -\n          (expected_value X + expected_value Y) ^ 2 :=\n      by\n      congr\n      exact h.integral_mul_of_integrable (hX.integrable one_le_two) (hY.integrable one_le_two)\n    _ = probability_theory.variance X + probability_theory.variance Y :=\n      by\n      simp only [variance_def', hX, hY, pi.pow_apply]\n      ring\n    \n#align indep_fun.variance_add indep_fun.variance_add\n\n",
 "of_real_variance_eq":
 "theorem _root_.measure_theory.mem_ℒp.of_real_variance_eq [is_finite_measure μ] (hX : mem_ℒp X 2 μ) :\n    ennreal.of_real (variance X μ) = evariance X μ :=\n  by\n  rw [variance, ennreal.of_real_to_real]\n  exact hX.evariance_lt_top.ne\n#align measure_theory.mem_ℒp.of_real_variance_eq measure_theory.mem_ℒp.of_real_variance_eq\n\n",
 "meas_ge_le_variance_div_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.variance -/\n/-- *Chebyshev's inequality* : one can control the deviation probability of a real random variable\nfrom its expectation in terms of the variance. -/\ntheorem meas_ge_le_variance_div_sq [is_finite_measure (measure_space.volume : measure Ω)] {X : Ω → exprℝ}\n    (hX : mem_ℒp X 2) {c : exprℝ} (hc : 0 < c) :\n    (measure_space.volume) { ω | c ≤ |X ω - expected_value X| } ≤\n      ennreal.of_real (probability_theory.variance X / c ^ 2) :=\n  by\n  rw [ennreal.of_real_div_of_pos (sq_pos_of_ne_zero _ hc.ne.symm), hX.of_real_variance_eq]\n  convert @meas_ge_le_evariance_div_sq _ _ _ hX.1 c.to_nnreal (by simp [hc])\n  · simp only [real.coe_to_nnreal', max_le_iff, abs_nonneg, and_true_iff]\n  · rw [ennreal.of_real_pow hc.le]\n    rfl\n#align meas_ge_le_variance_div_sq meas_ge_le_variance_div_sq\n\n",
 "meas_ge_le_evariance_div_sq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.evariance -/\n/-- *Chebyshev's inequality* for `ℝ≥0∞`-valued variance. -/\ntheorem meas_ge_le_evariance_div_sq {X : Ω → exprℝ} (hX : ae_strongly_measurable X (measure_space.volume)) {c : nnreal}\n    (hc : c ≠ 0) :\n    (measure_space.volume) { ω | ↑c ≤ |X ω - expected_value X| } ≤ probability_theory.evariance X / c ^ 2 :=\n  by\n  have A : (c : ennreal) ≠ 0 := by rwa [ne.def, ennreal.coe_eq_zero]\n  have B : ae_strongly_measurable (fun ω : Ω => expected_value X) (measure_space.volume) := ae_strongly_measurable_const\n  convert meas_ge_le_mul_pow_snorm (measure_space.volume) ennreal.two_ne_zero ennreal.two_ne_top (hX.sub B) A\n  · ext ω\n    simp only [pi.sub_apply, ennreal.coe_le_coe, ← real.norm_eq_abs, ← coe_nnnorm, nnreal.coe_le_coe,\n      ennreal.of_real_coe_nnreal]\n  · rw [snorm_eq_lintegral_rpow_nnnorm ennreal.two_ne_zero ennreal.two_ne_top]\n    simp only [ennreal.to_real_bit0, ennreal.one_to_real, pi.sub_apply, one_div]\n    rw [div_eq_mul_inv, ennreal.inv_pow, mul_comm, ennreal.rpow_two]\n    congr\n    simp_rw [← ennreal.rpow_mul, inv_mul_cancel (two_ne_zero : (2 : exprℝ) ≠ 0), ennreal.rpow_two, ennreal.rpow_one,\n      evariance]\n#align meas_ge_le_evariance_div_sq meas_ge_le_evariance_div_sq\n\n",
 "evariance_zero":
 "@[simp]\ntheorem evariance_zero : evariance 0 μ = 0 := by simp [evariance]\n#align evariance_zero evariance_zero\n\n",
 "evariance_mul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem evariance_mul (c : exprℝ) (X : Ω → exprℝ) (μ : measure Ω) :\n    evariance (fun ω => c * X ω) μ = ennreal.of_real (c ^ 2) * evariance X μ :=\n  by\n  rw [evariance, evariance, ← lintegral_const_mul' _ _ ennreal.of_real_lt_top.ne]\n  congr\n  ext1 ω\n  rw [ennreal.of_real, ← ennreal.coe_pow, ← ennreal.coe_pow, ← ennreal.coe_mul]\n  congr\n  rw [← sq_abs, ← real.rpow_two, real.to_nnreal_rpow_of_nonneg (abs_nonneg _), nnreal.rpow_two, ← mul_pow,\n    real.to_nnreal_mul_nnnorm _ (abs_nonneg _)]\n  conv_rhs => rw [← nnnorm_norm, norm_mul, norm_abs_eq_norm, ← norm_mul, nnnorm_norm, mul_sub]\n  congr\n  rw [mul_comm]\n  simp_rw [← smul_eq_mul, ← integral_smul_const, smul_eq_mul, mul_comm]\n#align evariance_mul evariance_mul\n\n",
 "evariance_lt_top_iff_mem_ℒp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem evariance_lt_top_iff_mem_ℒp [is_finite_measure μ] (hX : ae_strongly_measurable X μ) :\n    evariance X μ < ennreal.top ↔ mem_ℒp X 2 μ :=\n  by\n  refine' ⟨_, measure_theory.mem_ℒp.evariance_lt_top⟩\n  contrapose\n  rw [not_lt, top_le_iff]\n  exact evariance_eq_top hX\n#align evariance_lt_top_iff_mem_ℒp evariance_lt_top_iff_mem_ℒp\n\n",
 "evariance_lt_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel, Kexing Ying\n-/\ntheorem _root_.measure_theory.mem_ℒp.evariance_lt_top [is_finite_measure μ] (hX : mem_ℒp X 2 μ) :\n    evariance X μ < ennreal.top :=\n  by\n  have := ennreal.pow_lt_top (hX.sub <| mem_ℒp_const <| condexp.probability μ X).2 2\n  rw [snorm_eq_lintegral_rpow_nnnorm ennreal.two_ne_zero ennreal.two_ne_top, ← ennreal.rpow_two] at this\n  simp only [pi.sub_apply, ennreal.to_real_bit0, ennreal.one_to_real, one_div] at this\n  rw [← ennreal.rpow_mul, inv_mul_cancel (two_ne_zero : (2 : exprℝ) ≠ 0), ennreal.rpow_one] at this\n  simp_rw [ennreal.rpow_two] at this\n  exact this\n#align measure_theory.mem_ℒp.evariance_lt_top measure_theory.mem_ℒp.evariance_lt_top\n\n",
 "evariance_eq_zero_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\ntheorem evariance_eq_zero_iff (hX : ae_measurable X μ) :\n    evariance X μ = 0 ↔ «expr =ᵐ[ ] » X μ fun ω => condexp.probability μ X :=\n  by\n  rw [evariance, lintegral_eq_zero_iff']\n  constructor <;> intro hX <;> filter_upwards [hX] with ω hω\n  · simp only [pi.zero_apply, pow_eq_zero_iff, Nat.succ_pos', ennreal.coe_eq_zero, nnnorm_eq_zero, sub_eq_zero] at hω\n    exact hω\n  · rw [hω]\n    simp\n  · measurability\n#align evariance_eq_zero_iff evariance_eq_zero_iff\n\n",
 "evariance_eq_top":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\ntheorem evariance_eq_top [is_finite_measure μ] (hXm : ae_strongly_measurable X μ) (hX : ¬mem_ℒp X 2 μ) :\n    evariance X μ = ennreal.top := by\n  by_contra h\n  rw [← ne.def, ← lt_top_iff_ne_top] at h\n  have : mem_ℒp (fun ω => X ω - condexp.probability μ X) 2 μ :=\n    by\n    refine' ⟨hXm.sub ae_strongly_measurable_const, _⟩\n    rw [snorm_eq_lintegral_rpow_nnnorm ennreal.two_ne_zero ennreal.two_ne_top]\n    simp only [ennreal.to_real_bit0, ennreal.one_to_real, ennreal.rpow_two, ne.def]\n    exact ennreal.rpow_lt_top_of_nonneg (by simp) h.ne\n  refine' hX _\n  convert this.add (mem_ℒp_const <| condexp.probability μ X)\n  ext ω\n  rw [pi.add_apply, sub_add_cancel]\n#align evariance_eq_top evariance_eq_top\n\n",
 "evariance_eq_lintegral_of_real":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\ntheorem evariance_eq_lintegral_of_real (X : Ω → exprℝ) (μ : measure Ω) :\n    evariance X μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\"\n        (ennreal.of_real ((X ω - condexp.probability μ X) ^ 2)) μ :=\n  by\n  rw [evariance]\n  congr\n  ext1 ω\n  rw [pow_two, ← ennreal.coe_mul, ← nnnorm_mul, ← pow_two]\n  congr\n  exact (real.to_nnreal_eq_nnnorm_of_nonneg <| sq_nonneg _).symm\n#align evariance_eq_lintegral_of_real evariance_eq_lintegral_of_real\n\n",
 "evariance_def'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_space.volume -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `probability_theory.evariance -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `expected_value -/\ntheorem evariance_def' [is_probability_measure (measure_space.volume : measure Ω)] {X : Ω → exprℝ}\n    (hX : ae_strongly_measurable X (measure_space.volume)) :\n    probability_theory.evariance X =\n      «expr∫⁻ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , »\"\n          («expr‖ ‖₊» (X ω) ^ 2) -\n        ennreal.of_real (expected_value X ^ 2) :=\n  by\n  by_cases hℒ : mem_ℒp X 2\n  · rw [← hℒ.of_real_variance_eq, variance_def' hℒ, ennreal.of_real_sub _ (sq_nonneg _)]\n    congr\n    simp_rw [← ennreal.coe_pow]\n    rw [lintegral_coe_eq_integral]\n    · congr 2 with ω\n      simp only [pi.pow_apply, nnreal.coe_pow, coe_nnnorm, real.norm_eq_abs, pow_bit0_abs]\n    · exact hℒ.abs.integrable_sq\n  · symm\n    rw [evariance_eq_top hX hℒ, ennreal.sub_eq_top_iff]\n    refine' ⟨_, ennreal.of_real_ne_top⟩\n    rw [mem_ℒp, not_and] at hℒ\n    specialize hℒ hX\n    simp only [snorm_eq_lintegral_rpow_nnnorm ennreal.two_ne_zero ennreal.two_ne_top, not_lt, top_le_iff,\n      ennreal.to_real_bit0, ennreal.one_to_real, ennreal.rpow_two, one_div, ennreal.rpow_eq_top_iff, inv_lt_zero,\n      inv_pos, zero_lt_bit0, zero_lt_one, and_true_iff, or_iff_not_imp_left, not_and_or] at hℒ\n    exact hℒ fun _ => zero_le_two\n#align evariance_def' evariance_def'\n\n"}