{"zero_le_of_predictable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n-- Note that one cannot use `submartingale.zero_le_of_predictable` to prove the other two\n-- corresponding lemmas without imposing more restrictions to the ordering of `E`\n/-- A predictable submartingale is a.e. greater equal than its initial state. -/\ntheorem submartingale.zero_le_of_predictable [preorder E] [sigma_finite_filtration μ 𝒢] {f : ℕ → Ω → E}\n    (hfmgle : submartingale f 𝒢 μ) (hfadp : adapted 𝒢 fun n => f (n + 1)) (n : ℕ) : «expr ≤ᵐ[ ] » (f 0) μ (f n) :=\n  by\n  induction' n with k ih\n  · rfl\n  ·\n    exact\n      ih.trans\n        ((hfmgle.2.1 k (k + 1) k.le_succ).trans_eq <|\n          germ.coe_eq.mp <| congr_arg coe <| condexp_of_strongly_measurable (𝒢.le _) (hfadp _) <| hfmgle.integrable _)\n#align submartingale.zero_le_of_predictable submartingale.zero_le_of_predictable\n\n",
 "supermartingale_of_set_integral_succ_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\ntheorem supermartingale_of_set_integral_succ_le [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ)\n    (hf :\n      ∀ i,\n        ∀ s : set Ω,\n          (measurable_set_of (𝒢 i)) s →\n            «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n                (f (i + 1) ω) μ ≤\n              «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\"\n                s (f i ω) μ) :\n    supermartingale f 𝒢 μ := by\n  rw [← neg_neg f]\n  refine' (submartingale_of_set_integral_le_succ hadp.neg (fun i => (hint i).neg) _).neg\n  simpa only [integral_neg, pi.neg_apply, neg_le_neg_iff]\n#align supermartingale_of_set_integral_succ_le supermartingale_of_set_integral_succ_le\n\n",
 "supermartingale_of_condexp_sub_nonneg_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem supermartingale_of_condexp_sub_nonneg_nat [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ) (hf : ∀ i, «expr ≤ᵐ[ ] » 0 μ (measure_theory.condexp μ (f i - f (i + 1)) (𝒢 i))) :\n    supermartingale f 𝒢 μ := by\n  rw [← neg_neg f]\n  refine' (submartingale_of_condexp_sub_nonneg_nat hadp.neg (fun i => (hint i).neg) _).neg\n  simpa only [pi.zero_apply, pi.neg_apply, neg_sub_neg]\n#align supermartingale_of_condexp_sub_nonneg_nat supermartingale_of_condexp_sub_nonneg_nat\n\n",
 "supermartingale_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem supermartingale_nat [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ) (hf : ∀ i, «expr ≤ᵐ[ ] » (measure_theory.condexp μ (f (i + 1)) (𝒢 i)) μ (f i)) :\n    supermartingale f 𝒢 μ := by\n  rw [← neg_neg f]\n  refine'\n    (submartingale_nat hadp.neg (fun i => (hint i).neg) fun i => eventually_le.trans _ (condexp_neg _).symm.le).neg\n  filter_upwards [hf i] with x hx using neg_le_neg hx\n#align supermartingale_nat supermartingale_nat\n\n",
 "supermartingale":
 "theorem supermartingale [preorder E] (hf : martingale f ℱ μ) : supermartingale f ℱ μ :=\n  ⟨hf.1, fun i j hij => (hf.2 i j hij).le, fun i => hf.integrable i⟩\n#align supermartingale supermartingale\n\n",
 "sup":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊔ » -/\nprotected theorem sup {f g : ι → Ω → exprℝ} (hf : submartingale f ℱ μ) (hg : submartingale g ℱ μ) :\n    submartingale («expr ⊔ » f g) ℱ μ :=\n  by\n  refine'\n    ⟨fun i => @strongly_measurable.sup _ _ _ _ (ℱ i) _ _ _ (hf.adapted i) (hg.adapted i), fun i j hij => _, fun i =>\n      integrable.sup (hf.integrable _) (hg.integrable _)⟩\n  refine' eventually_le.sup_le _ _\n  ·\n    exact\n      eventually_le.trans (hf.2.1 i j hij)\n        (condexp_mono (hf.integrable _) (integrable.sup (hf.integrable j) (hg.integrable j))\n          (eventually_of_forall fun x => le_max_left _ _))\n  ·\n    exact\n      eventually_le.trans (hg.2.1 i j hij)\n        (condexp_mono (hg.integrable _) (integrable.sup (hf.integrable j) (hg.integrable j))\n          (eventually_of_forall fun x => le_max_right _ _))\n#align sup sup\n\n",
 "sum_mul_sub'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/-- Given a discrete submartingale `f` and a predictable process `ξ` (i.e. `ξ (n + 1)` is adapted)\nthe process defined by `λ n, ∑ k in finset.range n, ξ (k + 1) * (f (k + 1) - f k)` is also a\nsubmartingale. -/\ntheorem submartingale.sum_mul_sub' [is_finite_measure μ] {R : exprℝ} {ξ f : ℕ → Ω → exprℝ} (hf : submartingale f 𝒢 μ)\n    (hξ : adapted 𝒢 fun n => ξ (n + 1)) (hbdd : ∀ n ω, ξ n ω ≤ R) (hnonneg : ∀ n ω, 0 ≤ ξ n ω) :\n    submartingale\n      (fun n =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Finset.range n)\n          (ξ (k + 1) * (f (k + 1) - f k)))\n      𝒢 μ :=\n  hf.sum_mul_sub hξ (fun n => hbdd _) fun n => hnonneg _\n#align submartingale.sum_mul_sub' submartingale.sum_mul_sub'\n\n",
 "sum_mul_sub":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\ntheorem submartingale.sum_mul_sub [is_finite_measure μ] {R : exprℝ} {ξ f : ℕ → Ω → exprℝ} (hf : submartingale f 𝒢 μ)\n    (hξ : adapted 𝒢 ξ) (hbdd : ∀ n ω, ξ n ω ≤ R) (hnonneg : ∀ n ω, 0 ≤ ξ n ω) :\n    submartingale\n      (fun n =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Finset.range n)\n          (ξ k * (f (k + 1) - f k)))\n      𝒢 μ :=\n  by\n  have hξbdd : ∀ i, ∃ C, ∀ ω, |ξ i ω| ≤ C := fun i => ⟨R, fun ω => (abs_of_nonneg (hnonneg i ω)).trans_le (hbdd i ω)⟩\n  have hint :\n    ∀ m,\n      integrable\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n          (Finset.range m) (ξ k * (f (k + 1) - f k)))\n        μ :=\n    fun m =>\n    integrable_finset_sum' _ fun i hi =>\n      integrable.bdd_mul ((hf.integrable _).sub (hf.integrable _)) hξ.strongly_measurable.ae_strongly_measurable\n        (hξbdd _)\n  have hadp :\n    adapted 𝒢 fun n =>\n      finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Finset.range n)\n        (ξ k * (f (k + 1) - f k)) :=\n    by\n    intro m\n    refine' finset.strongly_measurable_sum' _ fun i hi => _\n    rw [Finset.mem_range] at hi\n    exact\n      (hξ.strongly_measurable_le hi.le).mul\n        ((hf.adapted.strongly_measurable_le (nat.succ_le_of_lt hi)).sub (hf.adapted.strongly_measurable_le hi.le))\n  refine' submartingale_of_condexp_sub_nonneg_nat hadp hint fun i => _\n  simp only [← finset.sum_Ico_eq_sub _ (nat.le_succ _), finset.sum_apply, pi.mul_apply, pi.sub_apply,\n    nat.Ico_succ_singleton, finset.sum_singleton]\n  exact\n    eventually_le.trans\n      (eventually_le.mul_nonneg (eventually_of_forall (hnonneg _)) (hf.condexp_sub_nonneg (nat.le_succ _)))\n      (condexp_strongly_measurable_mul (hξ _)\n            (((hf.integrable _).sub (hf.integrable _)).bdd_mul hξ.strongly_measurable.ae_strongly_measurable (hξbdd _))\n            ((hf.integrable _).sub (hf.integrable _))).symm.le\n#align submartingale.sum_mul_sub submartingale.sum_mul_sub\n\n",
 "submartingale_of_set_integral_le_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\ntheorem submartingale_of_set_integral_le_succ [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ)\n    (hf :\n      ∀ i,\n        ∀ s : set Ω,\n          (measurable_set_of (𝒢 i)) s →\n            «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n                (f i ω) μ ≤\n              «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\"\n                s (f (i + 1) ω) μ) :\n    submartingale f 𝒢 μ :=\n  by\n  refine' submartingale_of_set_integral_le hadp hint fun i j hij s hs => _\n  induction' hij with k hk₁ hk₂\n  · exact le_rfl\n  · exact le_trans hk₂ (hf k s (𝒢.mono hk₁ _ hs))\n#align submartingale_of_set_integral_le_succ submartingale_of_set_integral_le_succ\n\n",
 "submartingale_of_set_integral_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\ntheorem submartingale_of_set_integral_le [is_finite_measure μ] {f : ι → Ω → exprℝ} (hadp : adapted ℱ f)\n    (hint : ∀ i, integrable (f i) μ)\n    (hf :\n      ∀ i j : ι,\n        i ≤ j →\n          ∀ s : set Ω,\n            (measurable_set_of (ℱ i)) s →\n              «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\"\n                  s (f i ω) μ ≤\n                «expr∫ in , ∂ »\n                  \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s (f j ω)\n                  μ) :\n    submartingale f ℱ μ := by\n  refine' ⟨hadp, fun i j hij => _, hint⟩\n  suffices «expr ≤ᵐ[ ] » (f i) (μ.trim (ℱ.le i)) (measure_theory.condexp μ (f j) (ℱ i)) by\n    exact ae_le_of_ae_le_trim this\n  suffices «expr ≤ᵐ[ ] » 0 (μ.trim (ℱ.le i)) (measure_theory.condexp μ (f j) (ℱ i) - f i)\n    by\n    filter_upwards [this] with x hx\n    rwa [← sub_nonneg]\n  refine'\n    ae_nonneg_of_forall_set_integral_nonneg\n      ((integrable_condexp.sub (hint i)).trim _ (strongly_measurable_condexp.sub <| hadp i)) fun s hs h's => _\n  specialize hf i j hij s hs\n  rwa [← set_integral_trim _ (strongly_measurable_condexp.sub <| hadp i) hs,\n    integral_sub' integrable_condexp.integrable_on (hint i).integrable_on, sub_nonneg,\n    set_integral_condexp (ℱ.le i) (hint j) hs]\n#align submartingale_of_set_integral_le submartingale_of_set_integral_le\n\n",
 "submartingale_of_condexp_sub_nonneg_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem submartingale_of_condexp_sub_nonneg_nat [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ) (hf : ∀ i, «expr ≤ᵐ[ ] » 0 μ (measure_theory.condexp μ (f (i + 1) - f i) (𝒢 i))) :\n    submartingale f 𝒢 μ := by\n  refine' submartingale_nat hadp hint fun i => _\n  rw [← condexp_of_strongly_measurable (𝒢.le _) (hadp _) (hint _), ← eventually_sub_nonneg]\n  exact eventually_le.trans (hf i) (condexp_sub (hint _) (hint _)).le\n  infer_instance\n#align submartingale_of_condexp_sub_nonneg_nat submartingale_of_condexp_sub_nonneg_nat\n\n",
 "submartingale_of_condexp_sub_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem submartingale_of_condexp_sub_nonneg [is_finite_measure μ] {f : ι → Ω → exprℝ} (hadp : adapted ℱ f)\n    (hint : ∀ i, integrable (f i) μ)\n    (hf : ∀ i j, i ≤ j → «expr ≤ᵐ[ ] » 0 μ (measure_theory.condexp μ (f j - f i) (ℱ i))) : submartingale f ℱ μ :=\n  by\n  refine' ⟨hadp, fun i j hij => _, hint⟩\n  rw [← condexp_of_strongly_measurable (ℱ.le _) (hadp _) (hint _), ← eventually_sub_nonneg]\n  exact eventually_le.trans (hf i j hij) (condexp_sub (hint _) (hint _)).le\n  infer_instance\n#align submartingale_of_condexp_sub_nonneg submartingale_of_condexp_sub_nonneg\n\n",
 "submartingale_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem submartingale_nat [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ) (hf : ∀ i, «expr ≤ᵐ[ ] » (f i) μ (measure_theory.condexp μ (f (i + 1)) (𝒢 i))) :\n    submartingale f 𝒢 μ :=\n  by\n  refine' submartingale_of_set_integral_le_succ hadp hint fun i s hs => _\n  have :\n    «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n        (f (i + 1) ω) μ =\n      «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n        ((measure_theory.condexp μ (f (i + 1)) (𝒢 i)) ω) μ :=\n    (set_integral_condexp (𝒢.le i) (hint _) hs).symm\n  rw [this]\n  exact set_integral_mono_ae (hint i).integrable_on integrable_condexp.integrable_on (hf i)\n#align submartingale_nat submartingale_nat\n\n",
 "submartingale_iff_condexp_sub_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem submartingale_iff_condexp_sub_nonneg [is_finite_measure μ] {f : ι → Ω → exprℝ} :\n    submartingale f ℱ μ ↔\n      adapted ℱ f ∧\n        (∀ i, integrable (f i) μ) ∧ ∀ i j, i ≤ j → «expr ≤ᵐ[ ] » 0 μ (measure_theory.condexp μ (f j - f i) (ℱ i)) :=\n  ⟨fun h => ⟨h.adapted, h.integrable, fun i j => h.condexp_sub_nonneg⟩, fun ⟨hadp, hint, h⟩ =>\n    submartingale_of_condexp_sub_nonneg hadp hint h⟩\n#align submartingale_iff_condexp_sub_nonneg submartingale_iff_condexp_sub_nonneg\n\n",
 "submartingale":
 "theorem submartingale [preorder E] (hf : martingale f ℱ μ) : submartingale f ℱ μ :=\n  ⟨hf.1, fun i j hij => (hf.2 i j hij).symm.le, fun i => hf.integrable i⟩\n#align submartingale submartingale\n\n",
 "sub_supermartingale":
 "theorem sub_supermartingale [preorder E] [covariant_class E E (· + ·) (· ≤ ·)] (hf : submartingale f ℱ μ)\n    (hg : supermartingale g ℱ μ) : submartingale (f - g) ℱ μ :=\n  by\n  rw [sub_eq_add_neg]\n  exact hf.add hg.neg\n#align sub_supermartingale sub_supermartingale\n\n",
 "sub_submartingale":
 "theorem sub_submartingale [preorder E] [covariant_class E E (· + ·) (· ≤ ·)] (hf : supermartingale f ℱ μ)\n    (hg : submartingale g ℱ μ) : supermartingale (f - g) ℱ μ :=\n  by\n  rw [sub_eq_add_neg]\n  exact hf.add hg.neg\n#align sub_submartingale sub_submartingale\n\n",
 "sub_martingale":
 "theorem sub_martingale [preorder E] [covariant_class E E (· + ·) (· ≤ ·)] (hf : supermartingale f ℱ μ)\n    (hg : martingale g ℱ μ) : supermartingale (f - g) ℱ μ :=\n  hf.sub_submartingale hg.submartingale\n#align sub_martingale sub_martingale\n\n",
 "sub":
 "theorem sub (hf : martingale f ℱ μ) (hg : martingale g ℱ μ) : martingale (f - g) ℱ μ :=\n  by\n  rw [sub_eq_add_neg]\n  exact hf.add hg.neg\n#align sub sub\n\n",
 "strongly_measurable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `strongly_measurable_of -/\n@[protected]\ntheorem strongly_measurable [LE E] (hf : submartingale f ℱ μ) (i : ι) : (strongly_measurable_of (ℱ i)) (f i) :=\n  hf.adapted i\n#align strongly_measurable strongly_measurable\n\n",
 "smul_nonpos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_nonpos {f : ι → Ω → F} {c : exprℝ} (hc : c ≤ 0) (hf : submartingale f ℱ μ) :\n    supermartingale («expr • » c f) ℱ μ :=\n  by\n  rw [← neg_neg c,\n    (by\n      ext (i x)\n      simp : «expr • » (- -c) f = -«expr • » (-c) f)]\n  exact (hf.smul_nonneg <| neg_nonneg.2 hc).neg\n#align smul_nonpos smul_nonpos\n\n",
 "smul_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul_nonneg {f : ι → Ω → F} {c : exprℝ} (hc : 0 ≤ c) (hf : submartingale f ℱ μ) :\n    submartingale («expr • » c f) ℱ μ :=\n  by\n  rw [← neg_neg c,\n    (by\n      ext (i x)\n      simp : «expr • » (- -c) f = -«expr • » c (-f))]\n  exact supermartingale.neg (hf.neg.smul_nonneg hc)\n#align smul_nonneg smul_nonneg\n\n",
 "smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem smul (c : exprℝ) (hf : martingale f ℱ μ) : martingale («expr • » c f) ℱ μ :=\n  by\n  refine' ⟨hf.adapted.smul c, fun i j hij => _⟩\n  refine' (condexp_smul c (f j)).trans ((hf.2 i j hij).mono fun x hx => _)\n  rw [pi.smul_apply, hx, pi.smul_apply, pi.smul_apply]\n#align smul smul\n\n",
 "set_integral_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/-- The converse of this lemma is `measure_theory.submartingale_of_set_integral_le`. -/\ntheorem set_integral_le [sigma_finite_filtration μ ℱ] {f : ι → Ω → exprℝ} (hf : submartingale f ℱ μ) {i j : ι}\n    (hij : i ≤ j) {s : set Ω} (hs : (measurable_set_of (ℱ i)) s) :\n    «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s (f i ω)\n        μ ≤\n      «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n        (f j ω) μ :=\n  by\n  rw [← neg_le_neg_iff, ← integral_neg, ← integral_neg]\n  exact supermartingale.set_integral_le hf.neg hij hs\n#align set_integral_le set_integral_le\n\n",
 "set_integral_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\ntheorem set_integral_eq [sigma_finite_filtration μ ℱ] (hf : martingale f ℱ μ) {i j : ι} (hij : i ≤ j) {s : set Ω}\n    (hs : (measurable_set_of (ℱ i)) s) :\n    «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s (f i ω)\n        μ =\n      «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n        (f j ω) μ :=\n  by\n  rw [← @set_integral_condexp _ _ _ _ _ (ℱ i) m0 _ _ _ (ℱ.le i) _ (hf.integrable j) hs]\n  refine' set_integral_congr_ae (ℱ.le i s hs) _\n  filter_upwards [hf.2 i j hij] with _ heq _ using heq.symm\n#align set_integral_eq set_integral_eq\n\n",
 "pos":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁺» -/\nprotected theorem pos {f : ι → Ω → exprℝ} (hf : submartingale f ℱ μ) : submartingale («expr ⁺» f) ℱ μ :=\n  hf.sup (martingale_zero _ _ _).submartingale\n#align pos pos\n\n",
 "neg":
 "theorem neg [preorder E] [covariant_class E E (· + ·) (· ≤ ·)] (hf : submartingale f ℱ μ) : supermartingale (-f) ℱ μ :=\n  by\n  refine' ⟨hf.1.neg, fun i j hij => (condexp_neg (f j)).le.trans _, fun i => (hf.2.2 i).neg⟩\n  filter_upwards [hf.2.1 i j hij] with _ _\n  simpa\n#align neg neg\n\n",
 "martingale_zero":
 "theorem martingale_zero (ℱ : filtration ι m0) (μ : measure Ω) : martingale (0 : ι → Ω → E) ℱ μ :=\n  ⟨adapted_zero E ℱ, fun i j hij => by\n    rw [pi.zero_apply, condexp_zero]\n    simp⟩\n#align martingale_zero martingale_zero\n\n",
 "martingale_of_set_integral_eq_succ":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measurable_set_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ in , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ » -/\ntheorem martingale_of_set_integral_eq_succ [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ)\n    (hf :\n      ∀ i,\n        ∀ s : set Ω,\n          (measurable_set_of (𝒢 i)) s →\n            «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\" s\n                (f i ω) μ =\n              «expr∫ in , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ in , ∂ »\"\n                s (f (i + 1) ω) μ) :\n    martingale f 𝒢 μ :=\n  martingale_iff.2\n    ⟨supermartingale_of_set_integral_succ_le hadp hint fun i s hs => (hf i s hs).ge,\n      submartingale_of_set_integral_le_succ hadp hint fun i s hs => (hf i s hs).le⟩\n#align martingale_of_set_integral_eq_succ martingale_of_set_integral_eq_succ\n\n",
 "martingale_of_condexp_sub_eq_zero_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem martingale_of_condexp_sub_eq_zero_nat [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f)\n    (hint : ∀ i, integrable (f i) μ) (hf : ∀ i, «expr =ᵐ[ ] » (measure_theory.condexp μ (f (i + 1) - f i) (𝒢 i)) μ 0) :\n    martingale f 𝒢 μ :=\n  by\n  refine'\n    martingale_iff.2\n      ⟨supermartingale_of_condexp_sub_nonneg_nat hadp hint fun i => _,\n        submartingale_of_condexp_sub_nonneg_nat hadp hint fun i => (hf i).symm.le⟩\n  rw [← neg_sub]\n  refine' (eventually_eq.trans _ (condexp_neg _).symm).le\n  filter_upwards [hf i] with x hx\n  simpa only [pi.zero_apply, pi.neg_apply, zero_eq_neg]\n#align martingale_of_condexp_sub_eq_zero_nat martingale_of_condexp_sub_eq_zero_nat\n\n",
 "martingale_nat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem martingale_nat [is_finite_measure μ] {f : ℕ → Ω → exprℝ} (hadp : adapted 𝒢 f) (hint : ∀ i, integrable (f i) μ)\n    (hf : ∀ i, «expr =ᵐ[ ] » (f i) μ (measure_theory.condexp μ (f (i + 1)) (𝒢 i))) : martingale f 𝒢 μ :=\n  martingale_iff.2\n    ⟨supermartingale_nat hadp hint fun i => (hf i).symm.le, submartingale_nat hadp hint fun i => (hf i).le⟩\n#align martingale_nat martingale_nat\n\n",
 "martingale_iff":
 "theorem martingale_iff [partial_order E] : martingale f ℱ μ ↔ supermartingale f ℱ μ ∧ submartingale f ℱ μ :=\n  ⟨fun hf => ⟨hf.supermartingale, hf.submartingale⟩, fun ⟨hf₁, hf₂⟩ =>\n    ⟨hf₁.1, fun i j hij => (hf₁.2.1 i j hij).antisymm (hf₂.2.1 i j hij)⟩⟩\n#align martingale_iff martingale_iff\n\n",
 "martingale_const_fun":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `strongly_measurable_of -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⊥» -/\ntheorem martingale_const_fun [OrderBot ι] (ℱ : filtration ι m0) (μ : measure Ω) [is_finite_measure μ] {f : Ω → E}\n    (hf : (strongly_measurable_of (ℱ («expr⊥»))) f) (hfint : integrable f μ) : martingale (fun _ => f) ℱ μ :=\n  by\n  refine' ⟨fun i => hf.mono <| ℱ.mono bot_le, fun i j hij => _⟩\n  rw [condexp_of_strongly_measurable (ℱ.le _) (hf.mono <| ℱ.mono bot_le) hfint]\n  infer_instance\n#align martingale_const_fun martingale_const_fun\n\n",
 "martingale_const":
 "/-\nCopyright (c) 2021 Rémy Degenne. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Rémy Degenne, Kexing Ying\n-/\ntheorem martingale_const (ℱ : filtration ι m0) (μ : measure Ω) [is_finite_measure μ] (x : E) :\n    martingale (fun _ _ => x) ℱ μ :=\n  ⟨adapted_const ℱ _, fun i j hij => by rw [condexp_const (ℱ.le _)]⟩\n#align martingale_const martingale_const\n\n",
 "martingale_condexp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem martingale_condexp (f : Ω → E) (ℱ : filtration ι m0) (μ : measure Ω) [sigma_finite_filtration μ ℱ] :\n    martingale (fun i => measure_theory.condexp μ f (ℱ i)) ℱ μ :=\n  ⟨fun i => strongly_measurable_condexp, fun i j hij => condexp_condexp_of_le (ℱ.mono hij) (ℱ.le j)⟩\n#align martingale_condexp martingale_condexp\n\n",
 "le_zero_of_predictable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/-- A predictable supermartingale is a.e. less equal than its initial state. -/\ntheorem supermartingale.le_zero_of_predictable [preorder E] [sigma_finite_filtration μ 𝒢] {f : ℕ → Ω → E}\n    (hfmgle : supermartingale f 𝒢 μ) (hfadp : adapted 𝒢 fun n => f (n + 1)) (n : ℕ) : «expr ≤ᵐ[ ] » (f n) μ (f 0) :=\n  by\n  induction' n with k ih\n  · rfl\n  ·\n    exact\n      ((germ.coe_eq.mp <|\n                  congr_arg coe <|\n                    condexp_of_strongly_measurable (𝒢.le _) (hfadp _) <| hfmgle.integrable _).symm.trans_le\n            (hfmgle.2.1 k (k + 1) k.le_succ)).trans\n        ih\n#align supermartingale.le_zero_of_predictable supermartingale.le_zero_of_predictable\n\n",
 "integrable_stopped_value":
 "@[protected]\ntheorem integrable_stopped_value [LE E] {f : ℕ → Ω → E} (hf : submartingale f 𝒢 μ) {τ : Ω → ℕ}\n    (hτ : is_stopping_time 𝒢 τ) {N : ℕ} (hbdd : ∀ ω, τ ω ≤ N) : integrable (stopped_value f τ) μ :=\n  integrable_stopped_value ℕ hτ hf.integrable hbdd\n#align integrable_stopped_value integrable_stopped_value\n\n",
 "integrable":
 "@[protected]\ntheorem integrable [LE E] (hf : submartingale f ℱ μ) (i : ι) : integrable (f i) μ :=\n  hf.2.2 i\n#align integrable integrable\n\n",
 "eq_zero_of_predictable":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/-- A predictable martingale is a.e. equal to its initial state. -/\ntheorem martingale.eq_zero_of_predictable [sigma_finite_filtration μ 𝒢] {f : ℕ → Ω → E} (hfmgle : martingale f 𝒢 μ)\n    (hfadp : adapted 𝒢 fun n => f (n + 1)) (n : ℕ) : «expr =ᵐ[ ] » (f n) μ (f 0) :=\n  by\n  induction' n with k ih\n  · rfl\n  ·\n    exact\n      ((germ.coe_eq.mp\n                  (congr_arg coe <| condexp_of_strongly_measurable (𝒢.le _) (hfadp _) (hfmgle.integrable _))).symm.trans\n            (hfmgle.2 k (k + 1) k.le_succ)).trans\n        ih\n#align martingale.eq_zero_of_predictable martingale.eq_zero_of_predictable\n\n",
 "condexp_sub_nonneg":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem submartingale.condexp_sub_nonneg {f : ι → Ω → exprℝ} (hf : submartingale f ℱ μ) {i j : ι} (hij : i ≤ j) :\n    «expr ≤ᵐ[ ] » 0 μ (measure_theory.condexp μ (f j - f i) (ℱ i)) :=\n  by\n  by_cases h : sigma_finite (μ.trim (ℱ.le i))\n  swap; · rw [condexp_of_not_sigma_finite (ℱ.le i) h]\n  refine' eventually_le.trans _ (condexp_sub (hf.integrable _) (hf.integrable _)).symm.le\n  rw [eventually_sub_nonneg, condexp_of_strongly_measurable (ℱ.le _) (hf.adapted _) (hf.integrable _)]\n  · exact hf.2.1 i j hij\n  · exact h\n#align submartingale.condexp_sub_nonneg submartingale.condexp_sub_nonneg\n\n",
 "condexp_ae_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem condexp_ae_le [LE E] (hf : supermartingale f ℱ μ) {i j : ι} (hij : i ≤ j) :\n    «expr ≤ᵐ[ ] » (measure_theory.condexp μ (f j) (ℱ i)) μ (f i) :=\n  hf.2.1 i j hij\n#align condexp_ae_le condexp_ae_le\n\n",
 "condexp_ae_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem condexp_ae_eq (hf : martingale f ℱ μ) {i j : ι} (hij : i ≤ j) :\n    «expr =ᵐ[ ] » (measure_theory.condexp μ (f j) (ℱ i)) μ (f i) :=\n  hf.2 i j hij\n#align condexp_ae_eq condexp_ae_eq\n\n",
 "ae_le_condexp":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\ntheorem ae_le_condexp [LE E] (hf : submartingale f ℱ μ) {i j : ι} (hij : i ≤ j) :\n    «expr ≤ᵐ[ ] » (f i) μ (measure_theory.condexp μ (f j) (ℱ i)) :=\n  hf.2.1 i j hij\n#align ae_le_condexp ae_le_condexp\n\n",
 "add_martingale":
 "theorem add_martingale [preorder E] [covariant_class E E (· + ·) (· ≤ ·)] (hf : submartingale f ℱ μ)\n    (hg : martingale g ℱ μ) : submartingale (f + g) ℱ μ :=\n  hf.add hg.submartingale\n#align add_martingale add_martingale\n\n",
 "add":
 "theorem add [preorder E] [covariant_class E E (· + ·) (· ≤ ·)] (hf : submartingale f ℱ μ) (hg : submartingale g ℱ μ) :\n    submartingale (f + g) ℱ μ :=\n  by\n  refine' ⟨hf.1.add hg.1, fun i j hij => _, fun i => (hf.2.2 i).add (hg.2.2 i)⟩\n  refine' eventually_le.trans _ (condexp_add (hf.integrable j) (hg.integrable j)).symm.le\n  filter_upwards [hf.2.1 i j hij, hg.2.1 i j hij]\n  intros\n  refine' add_le_add _ _ <;> assumption\n#align add add\n\n",
 "adapted":
 "@[protected]\ntheorem adapted [LE E] (hf : submartingale f ℱ μ) : adapted ℱ f :=\n  hf.1\n#align adapted adapted\n\n"}