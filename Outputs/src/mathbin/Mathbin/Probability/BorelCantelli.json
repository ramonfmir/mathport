{"measure_limsup_eq_one":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nhds -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- **The second Borel-Cantelli lemma**: Given a sequence of independent sets `(sₙ)` such that\n`∑ n, μ sₙ = ∞`, `limsup sₙ` has measure 1. -/\ntheorem measure_limsup_eq_one {s : ℕ → Set Ω} (hsm : ∀ n, MeasurableSet (s n)) (hs : Indep_set s μ)\n    (hs' :\n      «expr∑' , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∑' , »\" (μ (s n)) =\n        ennreal.top) :\n    μ (limsup s atTop) = 1 :=\n  by\n  rw [measure_congr\n      (eventually_eq_set.2 (ae_mem_limsup_at_top_iff μ <| measurable_set_filtration_of_set' hsm) :\n        «expr =ᵐ[ ] » (limsup s at_top : Set Ω) μ\n          { ω |\n            tendsto\n              (fun n =>\n                finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n                  (Finset.range n)\n                  ((measure_theory.condexp μ ((s (k + 1)).indicator (1 : Ω → exprℝ)) (filtration_of_set hsm k)) ω))\n              at_top at_top })]\n  suffices\n    «expr =ᵐ[ ] »\n      { ω |\n        tendsto\n          (fun n =>\n            finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n              (Finset.range n)\n              ((measure_theory.condexp μ ((s (k + 1)).indicator (1 : Ω → exprℝ)) (filtration_of_set hsm k)) ω))\n          at_top at_top }\n      μ Set.univ\n    by rw [measure_congr this, measure_univ]\n  have :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n      (∀ n, (measure_theory.condexp μ ((s (n + 1)).indicator (1 : Ω → exprℝ)) (filtration_of_set hsm n)) ω = _) :=\n    ae_all_iff.2 fun n => hs.condexp_indicator_filtration_of_set_ae_eq hsm n.lt_succ_self\n  filter_upwards [this]with ω hω\n  refine' eq_true (_ : tendsto _ _ _)\n  simp_rw [hω]\n  have htends :\n    tendsto\n      (fun n =>\n        finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\" (Finset.range n)\n          (μ (s (k + 1))))\n      at_top ((nhds) (ennreal.top)) :=\n    by\n    rw [← ENNReal.tsum_add_one_eq_top hs' (measure_ne_top _ _)]\n    exact ENNReal.tendsto_nat_tsum _\n  rw [ENNReal.tendsto_nhds_top_iff_nnreal] at htends\n  refine' tendsto_at_top_at_top_of_monotone' _ _\n  · refine' monotone_nat_of_le_succ fun n => _\n    rw [← sub_nonneg, Finset.sum_range_succ_sub_sum]\n    exact ENNReal.toReal_nonneg\n  · rintro ⟨B, hB⟩\n    refine' not_eventually.2 (frequently_of_forall fun n => _) (htends B.to_nnreal)\n    rw [mem_upperBounds] at hB\n    specialize\n      hB\n        (finset.sum \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `finset.sum\"\n            (Finset.range n) (μ (s (k + 1)))).to_real\n        _\n    · refine' ⟨n, _⟩\n      rw [ENNReal.toReal_sum]\n      exact fun _ _ => measure_ne_top _ _\n    · rw [not_lt, ← ENNReal.toReal_le_toReal (ENNReal.sum_lt_top _).ne ENNReal.coe_ne_top]\n      · exact hB.trans (by simp)\n      · exact fun _ _ => measure_ne_top _ _\n#align measure_limsup_eq_one measure_limsup_eq_one\n\n",
 "indep_comap_natural_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr⨆ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , » -/\n/-\nCopyright (c) 2022 Kexing Ying. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Kexing Ying\n-/\ntheorem Indep_fun.indep_comap_natural_of_lt (hf : ∀ i, strongly_measurable (f i)) (hfi : Indep_fun (fun i => mβ) f μ)\n    (hij : i < j) : indep (MeasurableSpace.comap (f j) mβ) (filtration.natural f hf i) μ :=\n  by\n  suffices\n    indep\n      («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (MeasurableSpace.comap (f k) mβ))\n      («expr⨆ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr⨆ , »\"\n        (MeasurableSpace.comap (f k) mβ))\n      μ\n    by rwa [supᵢ_singleton] at this\n  exact indep_supr_of_disjoint (fun k => (hf k).measurable.comap_le) hfi (by simpa)\n#align Indep_fun.indep_comap_natural_of_lt Indep_fun.indep_comap_natural_of_lt\n\n",
 "condexp_natrual_ae_eq_of_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `condexp.probability -/\ntheorem Indep_fun.condexp_natrual_ae_eq_of_lt [SecondCountableTopology β] [CompleteSpace β] [NormedSpace (exprℝ) β]\n    (hf : ∀ i, strongly_measurable (f i)) (hfi : Indep_fun (fun i => mβ) f μ) (hij : i < j) :\n    «expr =ᵐ[ ] » (measure_theory.condexp μ (f j) (filtration.natural f hf i)) μ fun ω => condexp.probability μ (f j) :=\n  condexp_indep_eq (hf j).measurable.comap_le (filtration.le _ _) (comap_measurable <| f j).strongly_measurable\n    (hfi.indep_comap_natural_of_lt hf hij)\n#align Indep_fun.condexp_natrual_ae_eq_of_lt Indep_fun.condexp_natrual_ae_eq_of_lt\n\n",
 "condexp_indicator_filtration_of_set_ae_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `measure_theory.condexp -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem Indep_set.condexp_indicator_filtration_of_set_ae_eq (hsm : ∀ n, MeasurableSet (s n)) (hs : Indep_set s μ)\n    (hij : i < j) :\n    «expr =ᵐ[ ] » (measure_theory.condexp μ ((s j).indicator (fun ω => 1 : Ω → exprℝ)) (filtration_of_set hsm i)) μ\n      fun ω => (μ (s j)).to_real :=\n  by\n  rw [filtration.filtration_of_set_eq_natural hsm]\n  refine' (Indep_fun.condexp_natrual_ae_eq_of_lt _ hs.Indep_fun_indicator hij).trans _\n  · simp only [integral_indicator_const _ (hsm _), Algebra.id.smul_eq_mul, mul_one]\n  · infer_instance\n#align Indep_set.condexp_indicator_filtration_of_set_ae_eq Indep_set.condexp_indicator_filtration_of_set_ae_eq\n\n"}