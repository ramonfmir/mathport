{"variance_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem variance_eq {f : α → exprℝ} {g : β → exprℝ} (h : ident_distrib f g μ ν) : variance f μ = variance g ν :=\n  by\n  rw [variance, h.evariance_eq]\n  rfl\n#align variance_eq variance_eq\n\n",
 "uniform_integrable_of_ident_distrib_aux":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- This lemma is superceded by `mem_ℒp.uniform_integrable_of_ident_distrib` which only require\n`ae_strongly_measurable`. -/\ntheorem mem_ℒp.uniform_integrable_of_ident_distrib_aux {ι : Type _} {f : ι → α → E} {j : ι} {p : ennreal} (hp : 1 ≤ p)\n    (hp' : p ≠ ennreal.top) (hℒp : mem_ℒp (f j) p μ) (hfmeas : ∀ i, strongly_measurable (f i))\n    (hf : ∀ i, ident_distrib (f i) (f j) μ μ) : uniform_integrable f p μ :=\n  by\n  refine' uniform_integrable_of' hp hp' hfmeas fun ε hε => _\n  by_cases hι : nonempty ι\n  swap\n  · exact ⟨0, fun i => false.elim (hι <| nonempty.intro i)⟩\n  obtain ⟨C, hC₁, hC₂⟩ := hℒp.snorm_indicator_norm_ge_pos_le μ (hfmeas _) hε\n  have hmeas : ∀ i, measurable_set { x | (⟨C, hC₁.le⟩ : nnreal) ≤ «expr‖ ‖₊» (f i x) } := fun i =>\n    measurable_set_le measurable_const (hfmeas _).measurable.nnnorm\n  refine' ⟨⟨C, hC₁.le⟩, fun i => le_trans (le_of_eq _) hC₂⟩\n  have :\n    { x : α | (⟨C, hC₁.le⟩ : nnreal) ≤ «expr‖ ‖₊» (f i x) }.indicator (f i) =\n      (fun x : E => if (⟨C, hC₁.le⟩ : nnreal) ≤ «expr‖ ‖₊» x then x else 0) ∘ f i :=\n    by\n    ext x\n    simp only [set.indicator, Set.mem_setOf_eq]\n  simp_rw [coe_nnnorm, this]\n  rw [← snorm_map_measure _ (hf i).ae_measurable_fst, (hf i).map_eq, snorm_map_measure _ (hf j).ae_measurable_fst]\n  · rfl\n  all_goals exact ae_strongly_measurable_id.indicator (measurable_set_le measurable_const measurable_nnnorm)\n#align mem_ℒp.uniform_integrable_of_ident_distrib_aux mem_ℒp.uniform_integrable_of_ident_distrib_aux\n\n",
 "uniform_integrable_of_ident_distrib":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/-- A sequence of identically distributed Lᵖ functions is p-uniformly integrable. -/\ntheorem mem_ℒp.uniform_integrable_of_ident_distrib {ι : Type _} {f : ι → α → E} {j : ι} {p : ennreal} (hp : 1 ≤ p)\n    (hp' : p ≠ ennreal.top) (hℒp : mem_ℒp (f j) p μ) (hf : ∀ i, ident_distrib (f i) (f j) μ μ) :\n    uniform_integrable f p μ :=\n  by\n  have hfmeas : ∀ i, ae_strongly_measurable (f i) μ := fun i => (hf i).ae_strongly_measurable_iff.2 hℒp.1\n  set g : ι → α → E := fun i => (hfmeas i).some\n  have hgmeas : ∀ i, strongly_measurable (g i) := fun i => (Exists.choose_spec <| hfmeas i).1\n  have hgeq : ∀ i, «expr =ᵐ[ ] » (g i) μ (f i) := fun i => (Exists.choose_spec <| hfmeas i).2.symm\n  have hgℒp : mem_ℒp (g j) p μ := hℒp.ae_eq (hgeq j).symm\n  exact\n    uniform_integrable.ae_eq\n      (mem_ℒp.uniform_integrable_of_ident_distrib_aux hp hp' hgℒp hgmeas fun i =>\n        (ident_distrib.of_ae_eq (hgmeas i).ae_measurable (hgeq i)).trans\n          ((hf i).trans <| ident_distrib.of_ae_eq (hfmeas j).ae_measurable (hgeq j).symm))\n      hgeq\n#align mem_ℒp.uniform_integrable_of_ident_distrib mem_ℒp.uniform_integrable_of_ident_distrib\n\n",
 "trans":
 "#print trans /-\nprotected theorem trans {ρ : measure δ} {h : δ → γ} (h₁ : ident_distrib f g μ ν) (h₂ : ident_distrib g h ν ρ) :\n    ident_distrib f h μ ρ :=\n  { ae_measurable_fst := h₁.ae_measurable_fst\n    ae_measurable_snd := h₂.ae_measurable_snd\n    map_eq := h₁.map_eq.trans h₂.map_eq }\n#align trans trans\n-/\n\n",
 "symm":
 "#print symm /-\nprotected theorem symm (h : ident_distrib f g μ ν) : ident_distrib g f ν μ :=\n  { ae_measurable_fst := h.ae_measurable_snd\n    ae_measurable_snd := h.ae_measurable_fst\n    map_eq := h.map_eq.symm }\n#align symm symm\n-/\n\n",
 "sq":
 "#print sq /-\nprotected theorem sq [Pow γ ℕ] [has_measurable_pow γ ℕ] (h : ident_distrib f g μ ν) :\n    ident_distrib (fun x => f x ^ 2) (fun x => g x ^ 2) μ ν :=\n  h.comp (measurable_id.pow_const 2)\n#align sq sq\n-/\n\n",
 "snorm_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal.top -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem snorm_eq [normed_add_comm_group γ] [opens_measurable_space γ] (h : ident_distrib f g μ ν) (p : ennreal) :\n    snorm f p μ = snorm g p ν := by\n  by_cases h0 : p = 0\n  · simp [h0]\n  by_cases h_top : p = ennreal.top\n  · simp only [h_top, snorm, snorm_ess_sup, ennreal.top_ne_zero, eq_self_iff_true, if_true, if_false]\n    apply ess_sup_eq\n    exact h.comp (measurable_coe_nnreal_ennreal.comp measurable_nnnorm)\n  simp only [snorm_eq_snorm' h0 h_top, snorm', one_div]\n  congr 1\n  apply lintegral_eq\n  exact h.comp (measurable.pow_const (measurable_coe_nnreal_ennreal.comp measurable_nnnorm) p.to_real)\n#align snorm_eq snorm_eq\n\n",
 "refl":
 "#print refl /-\n/-\nCopyright (c) 2022 Sébastien Gouëzel. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Sébastien Gouëzel\n-/\nprotected theorem refl (hf : ae_measurable f μ) : ident_distrib f f μ μ :=\n  { ae_measurable_fst := hf\n    ae_measurable_snd := hf\n    map_eq := rfl }\n#align refl refl\n-/\n\n",
 "pow":
 "protected theorem pow [Pow γ ℕ] [has_measurable_pow γ ℕ] (h : ident_distrib f g μ ν) {n : ℕ} :\n    ident_distrib (fun x => f x ^ n) (fun x => g x ^ n) μ ν :=\n  h.comp (measurable_id.pow_const n)\n#align pow pow\n\n",
 "of_ae_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr =ᵐ[ ] » -/\nprotected theorem of_ae_eq {g : α → γ} (hf : ae_measurable f μ) (heq : «expr =ᵐ[ ] » f μ g) : ident_distrib f g μ μ :=\n  { ae_measurable_fst := hf\n    ae_measurable_snd := hf.congr HEq\n    map_eq := measure.map_congr HEq }\n#align of_ae_eq of_ae_eq\n\n",
 "norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\nprotected theorem norm [normed_add_comm_group γ] [borel_space γ] (h : ident_distrib f g μ ν) :\n    ident_distrib (fun x => «expr‖ ‖» (f x)) (fun x => «expr‖ ‖» (g x)) μ ν :=\n  h.comp measurable_norm\n#align norm norm\n\n",
 "nnnorm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\nprotected theorem nnnorm [normed_add_comm_group γ] [borel_space γ] (h : ident_distrib f g μ ν) :\n    ident_distrib (fun x => «expr‖ ‖₊» (f x)) (fun x => «expr‖ ‖₊» (g x)) μ ν :=\n  h.comp measurable_nnnorm\n#align nnnorm nnnorm\n\n",
 "mul_const":
 "@[to_additive]\ntheorem mul_const [Mul γ] [has_measurable_mul γ] (h : ident_distrib f g μ ν) (c : γ) :\n    ident_distrib (fun x => f x * c) (fun x => g x * c) μ ν :=\n  h.comp (measurable_mul_const c)\n#align mul_const mul_const\n\n",
 "mem_ℒp_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem mem_ℒp_snd [normed_add_comm_group γ] [borel_space γ] {p : ennreal} (h : ident_distrib f g μ ν)\n    (hf : mem_ℒp f p μ) : mem_ℒp g p ν :=\n  by\n  refine' ⟨h.ae_strongly_measurable_snd hf.ae_strongly_measurable, _⟩\n  rw [← h.snorm_eq]\n  exact hf.2\n#align mem_ℒp_snd mem_ℒp_snd\n\n",
 "mem_ℒp_iff":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\ntheorem mem_ℒp_iff [normed_add_comm_group γ] [borel_space γ] {p : ennreal} (h : ident_distrib f g μ ν) :\n    mem_ℒp f p μ ↔ mem_ℒp g p ν :=\n  ⟨fun hf => h.mem_ℒp_snd hf, fun hg => h.symm.mem_ℒp_snd hg⟩\n#align mem_ℒp_iff mem_ℒp_iff\n\n",
 "measure_mem_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⁻¹' » -/\ntheorem measure_mem_eq (h : ident_distrib f g μ ν) {s : set γ} (hs : measurable_set s) :\n    μ («expr ⁻¹' » f s) = ν («expr ⁻¹' » g s) := by\n  rw [← measure.map_apply_of_ae_measurable h.ae_measurable_fst hs, ←\n    measure.map_apply_of_ae_measurable h.ae_measurable_snd hs, h.map_eq]\n#align measure_mem_eq measure_mem_eq\n\n",
 "lintegral_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫⁻ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ » -/\ntheorem lintegral_eq {f : α → ennreal} {g : β → ennreal} (h : ident_distrib f g μ ν) :\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (f x) μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (g x) ν :=\n  by\n  change\n    «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (id (f x)) μ =\n      «expr∫⁻ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫⁻ , ∂ »\" (id (g x)) ν\n  rw [← lintegral_map' ae_measurable_id h.ae_measurable_fst, ← lintegral_map' ae_measurable_id h.ae_measurable_snd,\n    h.map_eq]\n#align lintegral_eq lintegral_eq\n\n",
 "integral_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\ntheorem integral_eq [normed_add_comm_group γ] [normed_space (exprℝ) γ] [complete_space γ] [borel_space γ]\n    (h : ident_distrib f g μ ν) :\n    «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x) μ =\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (g x) ν :=\n  by\n  by_cases hf : ae_strongly_measurable f μ\n  · have A : ae_strongly_measurable id (measure.map f μ) :=\n      by\n      rw [ae_strongly_measurable_iff_ae_measurable_separable]\n      rcases(ae_strongly_measurable_iff_ae_measurable_separable.1 hf).2 with ⟨t, t_sep, ht⟩\n      refine' ⟨ae_measurable_id, ⟨closure t, t_sep.closure, _⟩⟩\n      rw [ae_map_iff h.ae_measurable_fst]\n      · filter_upwards [ht] with x hx using subset_closure hx\n      · exact is_closed_closure.measurable_set\n    change\n      «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (id (f x)) μ =\n        «expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (id (g x)) ν\n    rw [← integral_map h.ae_measurable_fst A]\n    rw [h.map_eq] at A\n    rw [← integral_map h.ae_measurable_snd A, h.map_eq]\n  · rw [integral_non_ae_strongly_measurable hf]\n    rw [h.ae_strongly_measurable_iff] at hf\n    rw [integral_non_ae_strongly_measurable hf]\n#align integral_eq integral_eq\n\n",
 "integrable_snd":
 "theorem integrable_snd [normed_add_comm_group γ] [borel_space γ] (h : ident_distrib f g μ ν) (hf : integrable f μ) :\n    integrable g ν := by\n  rw [← mem_ℒp_one_iff_integrable] at hf⊢\n  exact h.mem_ℒp_snd hf\n#align integrable_snd integrable_snd\n\n",
 "integrable_iff":
 "theorem integrable_iff [normed_add_comm_group γ] [borel_space γ] (h : ident_distrib f g μ ν) :\n    integrable f μ ↔ integrable g ν :=\n  ⟨fun hf => h.integrable_snd hf, fun hg => h.symm.integrable_snd hg⟩\n#align integrable_iff integrable_iff\n\n",
 "evariance_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `exprℝ -/\ntheorem evariance_eq {f : α → exprℝ} {g : β → exprℝ} (h : ident_distrib f g μ ν) : evariance f μ = evariance g ν :=\n  by\n  convert\n    (h.sub_const\n              («expr∫ , ∂ » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∫ , ∂ »\" (f x)\n                μ)).nnnorm.coe_nnreal_ennreal.sq.lintegral_eq\n  rw [h.integral_eq]\n  rfl\n#align evariance_eq evariance_eq\n\n",
 "ess_sup_eq":
 "theorem ess_sup_eq [ConditionallyCompleteLinearOrder γ] [topological_space γ] [opens_measurable_space γ]\n    [order_closed_topology γ] (h : ident_distrib f g μ ν) : ess_sup f μ = ess_sup g ν :=\n  by\n  have I : ∀ a, μ { x : α | a < f x } = ν { x : β | a < g x } := fun a => h.measure_mem_eq measurable_set_Ioi\n  simp_rw [ess_sup_eq_Inf, I]\n#align ess_sup_eq ess_sup_eq\n\n",
 "div_const":
 "@[to_additive]\ntheorem div_const [Div γ] [has_measurable_div γ] (h : ident_distrib f g μ ν) (c : γ) :\n    ident_distrib (fun x => f x / c) (fun x => g x / c) μ ν :=\n  h.comp (has_measurable_div.measurable_div_const c)\n#align div_const div_const\n\n",
 "const_mul":
 "@[to_additive]\ntheorem const_mul [Mul γ] [has_measurable_mul γ] (h : ident_distrib f g μ ν) (c : γ) :\n    ident_distrib (fun x => c * f x) (fun x => c * g x) μ ν :=\n  h.comp (measurable_const_mul c)\n#align const_mul const_mul\n\n",
 "const_div":
 "@[to_additive]\ntheorem const_div [Div γ] [has_measurable_div γ] (h : ident_distrib f g μ ν) (c : γ) :\n    ident_distrib (fun x => c / f x) (fun x => c / g x) μ ν :=\n  h.comp (has_measurable_div.measurable_const_div c)\n#align const_div const_div\n\n",
 "comp_of_ae_measurable":
 "protected theorem comp_of_ae_measurable {u : γ → δ} (h : ident_distrib f g μ ν)\n    (hu : ae_measurable u (measure.map f μ)) : ident_distrib (u ∘ f) (u ∘ g) μ ν :=\n  { ae_measurable_fst := hu.comp_ae_measurable h.ae_measurable_fst\n    ae_measurable_snd := by\n      rw [h.map_eq] at hu\n      exact hu.comp_ae_measurable h.ae_measurable_snd\n    map_eq :=\n      by\n      rw [← ae_measurable.map_map_of_ae_measurable hu h.ae_measurable_fst, ←\n        ae_measurable.map_map_of_ae_measurable _ h.ae_measurable_snd, h.map_eq]\n      rwa [← h.map_eq] }\n#align comp_of_ae_measurable comp_of_ae_measurable\n\n",
 "comp":
 "protected theorem comp {u : γ → δ} (h : ident_distrib f g μ ν) (hu : measurable u) :\n    ident_distrib (u ∘ f) (u ∘ g) μ ν :=\n  h.comp_of_ae_measurable hu.ae_measurable\n#align comp comp\n\n",
 "coe_nnreal_ennreal":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `nnreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `ennreal -/\nprotected theorem coe_nnreal_ennreal {f : α → nnreal} {g : β → nnreal} (h : ident_distrib f g μ ν) :\n    ident_distrib (fun x => (f x : ennreal)) (fun x => (g x : ennreal)) μ ν :=\n  h.comp measurable_coe_nnreal_ennreal\n#align coe_nnreal_ennreal coe_nnreal_ennreal\n\n",
 "ae_strongly_measurable_snd":
 "/-- If `f` and `g` are identically distributed and `f` is a.e. strongly measurable, so is `g`. -/\ntheorem ae_strongly_measurable_snd [topological_space γ] [metrizable_space γ] [borel_space γ]\n    (h : ident_distrib f g μ ν) (hf : ae_strongly_measurable f μ) : ae_strongly_measurable g ν :=\n  by\n  refine' ae_strongly_measurable_iff_ae_measurable_separable.2 ⟨h.ae_measurable_snd, _⟩\n  rcases(ae_strongly_measurable_iff_ae_measurable_separable.1 hf).2 with ⟨t, t_sep, ht⟩\n  refine' ⟨closure t, t_sep.closure, _⟩\n  apply h.ae_mem_snd is_closed_closure.measurable_set\n  filter_upwards [ht] with x hx using subset_closure hx\n#align ae_strongly_measurable_snd ae_strongly_measurable_snd\n\n",
 "ae_strongly_measurable_iff":
 "theorem ae_strongly_measurable_iff [topological_space γ] [metrizable_space γ] [borel_space γ]\n    (h : ident_distrib f g μ ν) : ae_strongly_measurable f μ ↔ ae_strongly_measurable g ν :=\n  ⟨fun hf => h.ae_strongly_measurable_snd hf, fun hg => h.symm.ae_strongly_measurable_snd hg⟩\n#align ae_strongly_measurable_iff ae_strongly_measurable_iff\n\n",
 "ae_strongly_measurable_fst":
 "/-- In a second countable topology, the first function in an identically distributed pair is a.e.\nstrongly measurable. So is the second function, but use `h.symm.ae_strongly_measurable_fst` as\n`h.ae_strongly_measurable_snd` has a different meaning.-/\ntheorem ae_strongly_measurable_fst [topological_space γ] [metrizable_space γ] [opens_measurable_space γ]\n    [second_countable_topology γ] (h : ident_distrib f g μ ν) : ae_strongly_measurable f μ :=\n  h.ae_measurable_fst.ae_strongly_measurable\n#align ae_strongly_measurable_fst ae_strongly_measurable_fst\n\n",
 "ae_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\ntheorem ae_snd (h : ident_distrib f g μ ν) {p : γ → Prop} (pmeas : measurable_set { x | p x })\n    (hp :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (p (f x))) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" ν (p (g x)) :=\n  by\n  apply (ae_map_iff h.ae_measurable_snd pmeas).1\n  rw [← h.map_eq]\n  exact (ae_map_iff h.ae_measurable_fst pmeas).2 hp\n#align ae_snd ae_snd\n\n",
 "ae_mem_snd":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr∀ᵐ ∂ , » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , » -/\ntheorem ae_mem_snd (h : ident_distrib f g μ ν) {t : set γ} (tmeas : measurable_set t)\n    (ht :\n      «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" μ\n        (f x ∈ t)) :\n    «expr∀ᵐ ∂ , » \"./././Mathport/Syntax/Translate/Expr.lean:210:13: unsupported notation `«expr∀ᵐ ∂ , »\" ν (g x ∈ t) :=\n  h.ae_snd tmeas ht\n#align ae_mem_snd ae_mem_snd\n\n"}