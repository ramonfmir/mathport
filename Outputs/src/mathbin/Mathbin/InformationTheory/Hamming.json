{"to_hamming_zero":
 "@[simp]\ntheorem to_hamming_zero [∀ i, Zero (β i)] : to_hamming (0 : ∀ i, β i) = 0 :=\n  rfl\n#align to_hamming_zero to_hamming_zero\n\n",
 "to_hamming_symm_eq":
 "@[simp]\ntheorem to_hamming_symm_eq : (@to_hamming _ β).symm = of_hamming :=\n  rfl\n#align to_hamming_symm_eq to_hamming_symm_eq\n\n",
 "to_hamming_sub":
 "@[simp]\ntheorem to_hamming_sub [∀ i, Sub (β i)] {x y : ∀ i, β i} : to_hamming (x - y) = to_hamming x - to_hamming y :=\n  rfl\n#align to_hamming_sub to_hamming_sub\n\n",
 "to_hamming_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem to_hamming_smul [∀ i, SMul α (β i)] {r : α} {x : ∀ i, β i} :\n    to_hamming («expr • » r x) = «expr • » r (to_hamming x) :=\n  rfl\n#align to_hamming_smul to_hamming_smul\n\n",
 "to_hamming_of_hamming":
 "@[simp]\ntheorem to_hamming_of_hamming (x : hamming β) : to_hamming (of_hamming x) = x :=\n  rfl\n#align to_hamming_of_hamming to_hamming_of_hamming\n\n",
 "to_hamming_neg":
 "@[simp]\ntheorem to_hamming_neg [∀ i, Neg (β i)] {x : ∀ i, β i} : to_hamming (-x) = -to_hamming x :=\n  rfl\n#align to_hamming_neg to_hamming_neg\n\n",
 "to_hamming_inj":
 "@[simp]\ntheorem to_hamming_inj {x y : ∀ i, β i} : to_hamming x = to_hamming y ↔ x = y :=\n  iff.rfl\n#align to_hamming_inj to_hamming_inj\n\n",
 "to_hamming_add":
 "@[simp]\ntheorem to_hamming_add [∀ i, Add (β i)] {x y : ∀ i, β i} : to_hamming (x + y) = to_hamming x + to_hamming y :=\n  rfl\n#align to_hamming_add to_hamming_add\n\n",
 "swap_hamming_dist":
 "/-- Corresponds to `swap_dist`. -/\ntheorem swap_hamming_dist : swap (@hamming_dist _ β _ _) = hamming_dist :=\n  by\n  funext x y\n  exact hamming_dist_comm _ _\n#align swap_hamming_dist swap_hamming_dist\n\n",
 "of_hamming_zero":
 "@[simp]\ntheorem of_hamming_zero [∀ i, Zero (β i)] : of_hamming (0 : hamming β) = 0 :=\n  rfl\n#align of_hamming_zero of_hamming_zero\n\n",
 "of_hamming_to_hamming":
 "@[simp]\ntheorem of_hamming_to_hamming (x : ∀ i, β i) : of_hamming (to_hamming x) = x :=\n  rfl\n#align of_hamming_to_hamming of_hamming_to_hamming\n\n",
 "of_hamming_symm_eq":
 "@[simp]\ntheorem of_hamming_symm_eq : (@of_hamming _ β).symm = to_hamming :=\n  rfl\n#align of_hamming_symm_eq of_hamming_symm_eq\n\n",
 "of_hamming_sub":
 "@[simp]\ntheorem of_hamming_sub [∀ i, Sub (β i)] {x y : hamming β} : of_hamming (x - y) = of_hamming x - of_hamming y :=\n  rfl\n#align of_hamming_sub of_hamming_sub\n\n",
 "of_hamming_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n@[simp]\ntheorem of_hamming_smul [∀ i, SMul α (β i)] {r : α} {x : hamming β} :\n    of_hamming («expr • » r x) = «expr • » r (of_hamming x) :=\n  rfl\n#align of_hamming_smul of_hamming_smul\n\n",
 "of_hamming_neg":
 "@[simp]\ntheorem of_hamming_neg [∀ i, Neg (β i)] {x : hamming β} : of_hamming (-x) = -of_hamming x :=\n  rfl\n#align of_hamming_neg of_hamming_neg\n\n",
 "of_hamming_inj":
 "@[simp]\ntheorem of_hamming_inj {x y : hamming β} : of_hamming x = of_hamming y ↔ x = y :=\n  iff.rfl\n#align of_hamming_inj of_hamming_inj\n\n",
 "of_hamming_add":
 "@[simp]\ntheorem of_hamming_add [∀ i, Add (β i)] {x y : hamming β} : of_hamming (x + y) = of_hamming x + of_hamming y :=\n  rfl\n#align of_hamming_add of_hamming_add\n\n",
 "norm_eq_hamming_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖» -/\n@[simp, push_cast]\ntheorem norm_eq_hamming_norm [∀ i, Zero (β i)] (x : hamming β) : «expr‖ ‖» x = hamming_norm (of_hamming x) :=\n  rfl\n#align norm_eq_hamming_norm norm_eq_hamming_norm\n\n",
 "nnnorm_eq_hamming_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr‖ ‖₊» -/\n@[simp, push_cast]\ntheorem nnnorm_eq_hamming_norm [∀ i, add_comm_group (β i)] (x : hamming β) :\n    «expr‖ ‖₊» x = hamming_norm (of_hamming x) :=\n  rfl\n#align nnnorm_eq_hamming_norm nnnorm_eq_hamming_norm\n\n",
 "nndist_eq_hamming_dist":
 "@[simp, push_cast]\ntheorem nndist_eq_hamming_dist (x y : hamming β) : nndist x y = hamming_dist (of_hamming x) (of_hamming y) :=\n  rfl\n#align nndist_eq_hamming_dist nndist_eq_hamming_dist\n\n",
 "hamming_zero_eq_dist":
 "/-- Corresponds to `zero_eq_dist`. -/\n@[simp]\ntheorem hamming_zero_eq_dist {x y : ∀ i, β i} : 0 = hamming_dist x y ↔ x = y := by rw [eq_comm, hamming_dist_eq_zero]\n#align hamming_zero_eq_dist hamming_zero_eq_dist\n\n",
 "hamming_norm_zero":
 "/-- Corresponds to `norm_zero`. -/\n@[simp]\ntheorem hamming_norm_zero : hamming_norm (0 : ∀ i, β i) = 0 :=\n  hamming_dist_self _\n#align hamming_norm_zero hamming_norm_zero\n\n",
 "hamming_norm_smul_le_hamming_norm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem hamming_norm_smul_le_hamming_norm [Zero α] [∀ i, SMulWithZero α (β i)] {k : α} {x : ∀ i, β i} :\n    hamming_norm («expr • » k x) ≤ hamming_norm x :=\n  hamming_norm_comp_le_hamming_norm (fun i (c : β i) => «expr • » k c) fun i => by simp_rw [smul_zero]\n#align hamming_norm_smul_le_hamming_norm hamming_norm_smul_le_hamming_norm\n\n",
 "hamming_norm_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem hamming_norm_smul [Zero α] [∀ i, SMulWithZero α (β i)] {k : α} (hk : ∀ i, IsSMulRegular (β i) k)\n    (x : ∀ i, β i) : hamming_norm («expr • » k x) = hamming_norm x :=\n  hamming_norm_comp (fun i (c : β i) => «expr • » k c) hk fun i => by simp_rw [smul_zero]\n#align hamming_norm_smul hamming_norm_smul\n\n",
 "hamming_norm_pos_iff":
 "/-- Corresponds to `norm_pos_iff`. -/\n@[simp]\ntheorem hamming_norm_pos_iff {x : ∀ i, β i} : 0 < hamming_norm x ↔ x ≠ 0 :=\n  hamming_dist_pos\n#align hamming_norm_pos_iff hamming_norm_pos_iff\n\n",
 "hamming_norm_nonneg":
 "/-- Corresponds to `norm_nonneg`. -/\n@[simp]\ntheorem hamming_norm_nonneg {x : ∀ i, β i} : 0 ≤ hamming_norm x :=\n  zero_le _\n#align hamming_norm_nonneg hamming_norm_nonneg\n\n",
 "hamming_norm_ne_zero_iff":
 "/-- Corresponds to `norm_ne_zero_iff`. -/\ntheorem hamming_norm_ne_zero_iff {x : ∀ i, β i} : hamming_norm x ≠ 0 ↔ x ≠ 0 :=\n  hamming_norm_eq_zero.not\n#align hamming_norm_ne_zero_iff hamming_norm_ne_zero_iff\n\n",
 "hamming_norm_lt_one":
 "@[simp]\ntheorem hamming_norm_lt_one {x : ∀ i, β i} : hamming_norm x < 1 ↔ x = 0 :=\n  hamming_dist_lt_one\n#align hamming_norm_lt_one hamming_norm_lt_one\n\n",
 "hamming_norm_le_card_fintype":
 "theorem hamming_norm_le_card_fintype {x : ∀ i, β i} : hamming_norm x ≤ fintype.card ι :=\n  hamming_dist_le_card_fintype\n#align hamming_norm_le_card_fintype hamming_norm_le_card_fintype\n\n",
 "hamming_norm_eq_zero":
 "/-- Corresponds to `norm_eq_zero`. -/\n@[simp]\ntheorem hamming_norm_eq_zero {x : ∀ i, β i} : hamming_norm x = 0 ↔ x = 0 :=\n  hamming_dist_eq_zero\n#align hamming_norm_eq_zero hamming_norm_eq_zero\n\n",
 "hamming_norm_comp_le_hamming_norm":
 "theorem hamming_norm_comp_le_hamming_norm (f : ∀ i, γ i → β i) {x : ∀ i, γ i} (hf : ∀ i, f i 0 = 0) :\n    (hamming_norm fun i => f i (x i)) ≤ hamming_norm x :=\n  by\n  convert hamming_dist_comp_le_hamming_dist f\n  simp_rw [hf]\n  rfl\n#align hamming_norm_comp_le_hamming_norm hamming_norm_comp_le_hamming_norm\n\n",
 "hamming_norm_comp":
 "theorem hamming_norm_comp (f : ∀ i, γ i → β i) {x : ∀ i, γ i} (hf₁ : ∀ i, injective (f i)) (hf₂ : ∀ i, f i 0 = 0) :\n    (hamming_norm fun i => f i (x i)) = hamming_norm x :=\n  by\n  convert hamming_dist_comp f hf₁\n  simp_rw [hf₂]\n  rfl\n#align hamming_norm_comp hamming_norm_comp\n\n",
 "hamming_dist_zero_right":
 "/-- Corresponds to `dist_zero_right`. -/\n@[simp]\ntheorem hamming_dist_zero_right (x : ∀ i, β i) : hamming_dist x 0 = hamming_norm x :=\n  rfl\n#align hamming_dist_zero_right hamming_dist_zero_right\n\n",
 "hamming_dist_zero_left":
 "/-- Corresponds to `dist_zero_left`. -/\n@[simp]\ntheorem hamming_dist_zero_left : hamming_dist (0 : ∀ i, β i) = hamming_norm :=\n  funext fun x => by rw [hamming_dist_comm, hamming_dist_zero_right]\n#align hamming_dist_zero_left hamming_dist_zero_left\n\n",
 "hamming_dist_triangle_right":
 "/-- Corresponds to `dist_triangle_right`. -/\ntheorem hamming_dist_triangle_right (x y z : ∀ i, β i) : hamming_dist x y ≤ hamming_dist x z + hamming_dist y z :=\n  by\n  rw [hamming_dist_comm y]\n  exact hamming_dist_triangle _ _ _\n#align hamming_dist_triangle_right hamming_dist_triangle_right\n\n",
 "hamming_dist_triangle_left":
 "/-- Corresponds to `dist_triangle_left`. -/\ntheorem hamming_dist_triangle_left (x y z : ∀ i, β i) : hamming_dist x y ≤ hamming_dist z x + hamming_dist z y :=\n  by\n  rw [hamming_dist_comm z]\n  exact hamming_dist_triangle _ _ _\n#align hamming_dist_triangle_left hamming_dist_triangle_left\n\n",
 "hamming_dist_triangle":
 "/-- Corresponds to `dist_triangle`. -/\ntheorem hamming_dist_triangle (x y z : ∀ i, β i) : hamming_dist x z ≤ hamming_dist x y + hamming_dist y z := by\n  classical\n    simp_rw [hamming_dist]\n    refine' le_trans (card_mono _) (card_union_le _ _)\n    rw [← filter_or]\n    refine' monotone_filter_right _ _\n    intro i h\n    by_contra' H\n    exact h (eq.trans H.1 H.2)\n#align hamming_dist_triangle hamming_dist_triangle\n\n",
 "hamming_dist_smul_le_hamming_dist":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\ntheorem hamming_dist_smul_le_hamming_dist [∀ i, SMul α (β i)] {k : α} {x y : ∀ i, β i} :\n    hamming_dist («expr • » k x) («expr • » k y) ≤ hamming_dist x y :=\n  hamming_dist_comp_le_hamming_dist fun i => («expr • » · ·) k\n#align hamming_dist_smul_le_hamming_dist hamming_dist_smul_le_hamming_dist\n\n",
 "hamming_dist_smul":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:219:4: warning: unsupported binary notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr • » -/\n/-- Corresponds to `dist_smul` with the discrete norm on `α`. -/\ntheorem hamming_dist_smul [∀ i, SMul α (β i)] {k : α} {x y : ∀ i, β i} (hk : ∀ i, IsSMulRegular (β i) k) :\n    hamming_dist («expr • » k x) («expr • » k y) = hamming_dist x y :=\n  hamming_dist_comp (fun i => («expr • » · ·) k) hk\n#align hamming_dist_smul hamming_dist_smul\n\n",
 "hamming_dist_self":
 "/-\nCopyright (c) 2022 Wrenna Robson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Wrenna Robson\n-/\n/-- Corresponds to `dist_self`. -/\n@[simp]\ntheorem hamming_dist_self (x : ∀ i, β i) : hamming_dist x x = 0 :=\n  by\n  rw [hamming_dist, card_eq_zero, filter_eq_empty_iff]\n  exact fun _ _ H => H rfl\n#align hamming_dist_self hamming_dist_self\n\n",
 "hamming_dist_pos":
 "/-- Corresponds to `dist_pos`. -/\n@[simp]\ntheorem hamming_dist_pos {x y : ∀ i, β i} : 0 < hamming_dist x y ↔ x ≠ y := by\n  rw [← hamming_dist_ne_zero, iff_not_comm, not_lt, le_zero_iff]\n#align hamming_dist_pos hamming_dist_pos\n\n",
 "hamming_dist_nonneg":
 "/-- Corresponds to `dist_nonneg`. -/\ntheorem hamming_dist_nonneg {x y : ∀ i, β i} : 0 ≤ hamming_dist x y :=\n  zero_le _\n#align hamming_dist_nonneg hamming_dist_nonneg\n\n",
 "hamming_dist_ne_zero":
 "/-- Corresponds to `dist_ne_zero`. -/\ntheorem hamming_dist_ne_zero {x y : ∀ i, β i} : hamming_dist x y ≠ 0 ↔ x ≠ y :=\n  hamming_dist_eq_zero.not\n#align hamming_dist_ne_zero hamming_dist_ne_zero\n\n",
 "hamming_dist_lt_one":
 "@[simp]\ntheorem hamming_dist_lt_one {x y : ∀ i, β i} : hamming_dist x y < 1 ↔ x = y := by\n  rw [Nat.lt_one_iff, hamming_dist_eq_zero]\n#align hamming_dist_lt_one hamming_dist_lt_one\n\n",
 "hamming_dist_le_card_fintype":
 "theorem hamming_dist_le_card_fintype {x y : ∀ i, β i} : hamming_dist x y ≤ fintype.card ι :=\n  card_le_univ _\n#align hamming_dist_le_card_fintype hamming_dist_le_card_fintype\n\n",
 "hamming_dist_eq_zero":
 "/-- Corresponds to `dist_eq_zero`. -/\n@[simp]\ntheorem hamming_dist_eq_zero {x y : ∀ i, β i} : hamming_dist x y = 0 ↔ x = y :=\n  ⟨eq_of_hamming_dist_eq_zero, fun H => by\n    rw [H]\n    exact hamming_dist_self _⟩\n#align hamming_dist_eq_zero hamming_dist_eq_zero\n\n",
 "hamming_dist_eq_hamming_norm":
 "/-- Corresponds to `dist_eq_norm`. -/\ntheorem hamming_dist_eq_hamming_norm [∀ i, add_group (β i)] (x y : ∀ i, β i) :\n    hamming_dist x y = hamming_norm (x - y) := by simp_rw [hamming_norm, hamming_dist, pi.sub_apply, sub_ne_zero]\n#align hamming_dist_eq_hamming_norm hamming_dist_eq_hamming_norm\n\n",
 "hamming_dist_comp_le_hamming_dist":
 "theorem hamming_dist_comp_le_hamming_dist (f : ∀ i, γ i → β i) {x y : ∀ i, γ i} :\n    (hamming_dist (fun i => f i (x i)) fun i => f i (y i)) ≤ hamming_dist x y :=\n  card_mono (monotone_filter_right _ fun i H1 H2 => H1 <| congr_arg (f i) H2)\n#align hamming_dist_comp_le_hamming_dist hamming_dist_comp_le_hamming_dist\n\n",
 "hamming_dist_comp":
 "theorem hamming_dist_comp (f : ∀ i, γ i → β i) {x y : ∀ i, γ i} (hf : ∀ i, injective (f i)) :\n    (hamming_dist (fun i => f i (x i)) fun i => f i (y i)) = hamming_dist x y :=\n  by\n  refine' le_antisymm (hamming_dist_comp_le_hamming_dist _) _\n  exact card_mono (monotone_filter_right _ fun i H1 H2 => H1 <| hf i H2)\n#align hamming_dist_comp hamming_dist_comp\n\n",
 "hamming_dist_comm":
 "/-- Corresponds to `dist_comm`. -/\ntheorem hamming_dist_comm (x y : ∀ i, β i) : hamming_dist x y = hamming_dist y x := by simp_rw [hamming_dist, ne_comm]\n#align hamming_dist_comm hamming_dist_comm\n\n",
 "eq_of_hamming_dist_eq_zero":
 "/-- Corresponds to `eq_of_dist_eq_zero`. -/\ntheorem eq_of_hamming_dist_eq_zero {x y : ∀ i, β i} : hamming_dist x y = 0 → x = y := by\n  simp_rw [hamming_dist, card_eq_zero, filter_eq_empty_iff, not_not, funext_iff, mem_univ, forall_true_left, imp_self]\n#align eq_of_hamming_dist_eq_zero eq_of_hamming_dist_eq_zero\n\n",
 "dist_eq_hamming_dist":
 "@[simp, push_cast]\ntheorem dist_eq_hamming_dist (x y : hamming β) : dist x y = hamming_dist (of_hamming x) (of_hamming y) :=\n  rfl\n#align dist_eq_hamming_dist dist_eq_hamming_dist\n\n"}