{"sq_le_two_pow_add_one_minus_three":
 "-- All the inequalities from this point onwards are specific to the main proof.\nprivate theorem sq_le_two_pow_add_one_minus_three (n : ℕ) : n ^ 2 ≤ 2 ^ (n + 1) - 3 :=\n  by\n  induction' n with k hk\n  · norm_num\n  · cases k\n    · norm_num\n    · rw [succ_eq_add_one, add_sq, pow_succ 2, two_mul (2 ^ _), add_tsub_assoc_of_le, add_comm (2 ^ _), add_assoc]\n      · apply add_le_add hk\n        norm_num\n        apply succ_le_of_lt\n        rw [pow_succ, mul_lt_mul_left (zero_lt_two' ℕ)]\n        apply lt_two_pow\n      · rw [pow_succ, pow_succ]\n        linarith [one_le_pow k 2 zero_lt_two]\n#align sq_le_two_pow_add_one_minus_three sq_le_two_pow_add_one_minus_three\n\n",
 "one_lt_ack_succ_right":
 "theorem one_lt_ack_succ_right : ∀ m n, 1 < ack m (n + 1)\n  | 0, n => by simp\n  | m + 1, n => by\n    rw [ack_succ_succ]\n    cases exists_eq_succ_of_ne_zero (ack_pos (m + 1) n).ne'\n    rw [h]\n    apply one_lt_ack_succ_right\n#align one_lt_ack_succ_right one_lt_ack_succ_right\n\n",
 "one_lt_ack_succ_left":
 "theorem one_lt_ack_succ_left : ∀ m n, 1 < ack (m + 1) n\n  | 0, n => by simp\n  | m + 1, 0 => by\n    rw [ack_succ_zero]\n    apply one_lt_ack_succ_left\n  | m + 1, n + 1 => by\n    rw [ack_succ_succ]\n    apply one_lt_ack_succ_left\n#align one_lt_ack_succ_left one_lt_ack_succ_left\n\n",
 "not_primrec₂_ack":
 "/-- The Ackermann function is not primitive recursive. -/\ntheorem not_primrec₂_ack : ¬primrec₂ ack := fun h => not_primrec_ack_self <| h.comp primrec.id primrec.id\n#align not_primrec₂_ack not_primrec₂_ack\n\n",
 "not_primrec_ack_self":
 "theorem not_primrec_ack_self : ¬_root_.primrec fun n => ack n n :=\n  by\n  rw [primrec.nat_iff]\n  exact not_nat_primrec_ack_self\n#align not_primrec_ack_self not_primrec_ack_self\n\n",
 "not_nat_primrec_ack_self":
 "theorem not_nat_primrec_ack_self : ¬nat.primrec fun n => ack n n := fun h =>\n  by\n  cases' exists_lt_ack_of_nat_primrec h with m hm\n  exact (hm m).false\n#align not_nat_primrec_ack_self not_nat_primrec_ack_self\n\n",
 "max_ack_right":
 "theorem max_ack_right (m n₁ n₂ : ℕ) : ack m (max n₁ n₂) = max (ack m n₁) (ack m n₂) :=\n  (ack_mono_right m).map_max\n#align max_ack_right max_ack_right\n\n",
 "max_ack_left":
 "theorem max_ack_left (m₁ m₂ n : ℕ) : ack (max m₁ m₂) n = max (ack m₁ n) (ack m₂ n) :=\n  (ack_mono_left n).map_max\n#align max_ack_left max_ack_left\n\n",
 "lt_ack_right":
 "theorem lt_ack_right (m n : ℕ) : n < ack m n :=\n  (self_le_add_left n m).trans_lt <| add_lt_ack m n\n#align lt_ack_right lt_ack_right\n\n",
 "lt_ack_left":
 "theorem lt_ack_left (m n : ℕ) : m < ack m n :=\n  (self_le_add_right m n).trans_lt <| add_lt_ack m n\n#align lt_ack_left lt_ack_left\n\n",
 "exists_lt_ack_of_nat_primrec":
 "/-- If `f` is primitive recursive, there exists `m` such that `f n < ack m n` for all `n`. -/\ntheorem exists_lt_ack_of_nat_primrec {f : ℕ → ℕ} (hf : nat.primrec f) : ∃ m, ∀ n, f n < ack m n :=\n  by\n  induction' hf with f g hf hg IHf IHg f g hf hg IHf IHg f g hf hg IHf IHg\n  -- Zero function:\n  · exact ⟨0, ack_pos 0⟩\n  -- Successor function:\n  · refine' ⟨1, fun n => _⟩\n    rw [succ_eq_one_add]\n    apply add_lt_ack\n  -- Left projection:\n  · refine' ⟨0, fun n => _⟩\n    rw [ack_zero, lt_succ_iff]\n    exact unpair_left_le n\n  -- Right projection:\n  · refine' ⟨0, fun n => _⟩\n    rw [ack_zero, lt_succ_iff]\n    exact unpair_right_le n\n  all_goals cases' IHf with a ha; cases' IHg with b hb\n  -- Pairing:\n  · refine'\n      ⟨max a b + 3, fun n =>\n        (mkpair_lt_max_add_one_sq _ _).trans_le <|\n          (Nat.pow_le_pow_of_le_left (add_le_add_right _ _) 2).trans <| ack_add_one_sq_lt_ack_add_three _ _⟩\n    rw [max_ack_left]\n    exact max_le_max (ha n).le (hb n).le\n  -- Composition:\n  ·\n    exact\n      ⟨max a b + 2, fun n =>\n        (ha _).trans <| (ack_strict_mono_right a <| hb n).trans <| ack_ack_lt_ack_max_add_two a b n⟩\n  -- Primitive recursion operator:\n  · -- We prove this simpler inequality first.\n    have : ∀ {m n}, elim (f m) (fun y IH => g <| mkpair m <| mkpair y IH) n < ack (max a b + 9) (m + n) :=\n      by\n      intro m n\n      -- We induct on n.\n      induction' n with n IH\n      -- The base case is easy.\n      · apply (ha m).trans (ack_strict_mono_left m <| (le_max_left a b).trans_lt _)\n        linarith\n      · -- We get rid of the first `mkpair`.\n        rw [elim_succ]\n        apply (hb _).trans ((ack_mkpair_lt _ _ _).trans_le _)\n        -- If m is the maximum, we get a very weak inequality.\n        cases' lt_or_le _ m with h₁ h₁\n        · rw [max_eq_left h₁.le]\n          exact ack_le_ack (add_le_add (le_max_right a b) <| by norm_num) (self_le_add_right m _)\n        rw [max_eq_right h₁]\n        -- We get rid of the second `mkpair`.\n        apply (ack_mkpair_lt _ _ _).le.trans\n        -- If n is the maximum, we get a very weak inequality.\n        cases' lt_or_le _ n with h₂ h₂\n        · rw [max_eq_left h₂.le, add_assoc]\n          exact ack_le_ack (add_le_add (le_max_right a b) <| by norm_num) ((le_succ n).trans <| self_le_add_left _ _)\n        rw [max_eq_right h₂]\n        -- We now use the inductive hypothesis, and some simple algebraic manipulation.\n        apply (ack_strict_mono_right _ IH).le.trans\n        rw [add_succ m, add_succ _ 8, ack_succ_succ (_ + 8), add_assoc]\n        exact ack_mono_left _ (add_le_add (le_max_right a b) le_rfl)\n    -- The proof is now simple.\n    exact ⟨max a b + 9, fun n => this.trans_le <| ack_mono_right _ <| unpair_add_le n⟩\n#align exists_lt_ack_of_nat_primrec exists_lt_ack_of_nat_primrec\n\n",
 "add_lt_ack":
 "theorem add_lt_ack : ∀ m n, m + n < ack m n\n  | 0, n => by simp\n  | m + 1, 0 => by simpa using add_lt_ack m 1\n  | m + 1, n + 1 =>\n    calc\n      m + 1 + n + 1 ≤ m + (m + n + 2) := by linarith\n      _ < ack m (m + n + 2) := add_lt_ack _ _\n      _ ≤ ack m (ack (m + 1) n) :=\n        ack_mono_right m <| le_of_eq_of_le (by ring_nf) <| succ_le_of_lt <| add_lt_ack (m + 1) n\n      _ = ack (m + 1) (n + 1) := (ack_succ_succ m n).symm\n      \n#align add_lt_ack add_lt_ack\n\n",
 "add_add_one_le_ack":
 "theorem add_add_one_le_ack (m n : ℕ) : m + n + 1 ≤ ack m n :=\n  succ_le_of_lt (add_lt_ack m n)\n#align add_add_one_le_ack add_add_one_le_ack\n\n",
 "ack_zero":
 "/-\nCopyright (c) 2022 Violeta Hernández Palacios. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Violeta Hernández Palacios\n-/\n@[simp]\ntheorem ack_zero (n : ℕ) : ack 0 n = n + 1 := by rw [ack]\n#align ack_zero ack_zero\n\n",
 "ack_two":
 "@[simp]\ntheorem ack_two (n : ℕ) : ack 2 n = 2 * n + 3 :=\n  by\n  induction' n with n IH\n  · simp\n  · simp [IH, mul_succ]\n#align ack_two ack_two\n\n",
 "ack_three_aux":
 "private theorem ack_three_aux (n : ℕ) : (ack 3 n : ℤ) = 2 ^ (n + 3) - 3 :=\n  by\n  induction' n with n IH\n  · simp\n    norm_num\n  · simp [IH, pow_succ]\n    rw [mul_sub, sub_add]\n    norm_num\n#align ack_three_aux ack_three_aux\n\n",
 "ack_three":
 "@[simp]\ntheorem ack_three (n : ℕ) : ack 3 n = 2 ^ (n + 3) - 3 := by\n  zify\n  rw [cast_sub]\n  · exact_mod_cast ack_three_aux n\n  · have H : 3 ≤ 2 ^ 3 := by norm_num\n    exact H.trans (pow_mono one_le_two <| le_add_left le_rfl)\n#align ack_three ack_three\n\n",
 "ack_succ_zero":
 "@[simp]\ntheorem ack_succ_zero (m : ℕ) : ack (m + 1) 0 = ack m 1 := by rw [ack]\n#align ack_succ_zero ack_succ_zero\n\n",
 "ack_succ_succ":
 "@[simp]\ntheorem ack_succ_succ (m n : ℕ) : ack (m + 1) (n + 1) = ack m (ack (m + 1) n) := by rw [ack]\n#align ack_succ_succ ack_succ_succ\n\n",
 "ack_succ_right_le_ack_succ_left":
 "theorem ack_succ_right_le_ack_succ_left (m n : ℕ) : ack m (n + 1) ≤ ack (m + 1) n :=\n  by\n  cases n\n  · simp\n  · rw [ack_succ_succ, succ_eq_add_one]\n    apply ack_mono_right m (le_trans _ <| add_add_one_le_ack _ n)\n    linarith\n#align ack_succ_right_le_ack_succ_left ack_succ_right_le_ack_succ_left\n\n",
 "ack_strict_mono_right":
 "theorem ack_strict_mono_right : ∀ m, strict_mono (ack m)\n  | 0, n₁, n₂, h => by simpa using h\n  | m + 1, 0, n + 1, h => by\n    rw [ack_succ_zero, ack_succ_succ]\n    exact ack_strict_mono_right _ (one_lt_ack_succ_left m n)\n  | m + 1, n₁ + 1, n₂ + 1, h => by\n    rw [ack_succ_succ, ack_succ_succ]\n    apply ack_strict_mono_right _ (ack_strict_mono_right _ _)\n    rwa [add_lt_add_iff_right] at h\n#align ack_strict_mono_right ack_strict_mono_right\n\n",
 "ack_strict_mono_left'":
 "-- we reorder the arguments to appease the equation compiler\nprivate theorem ack_strict_mono_left' : ∀ {m₁ m₂} (n), m₁ < m₂ → ack m₁ n < ack m₂ n\n  | m, 0, n => fun h => (nat.not_lt_zero m h).elim\n  | 0, m + 1, 0 => fun h => by simpa using one_lt_ack_succ_right m 0\n  | 0, m + 1, n + 1 => fun h => by\n    rw [ack_zero, ack_succ_succ]\n    apply lt_of_le_of_lt (le_trans _ <| add_le_add_left (add_add_one_le_ack _ _) m) (add_lt_ack _ _)\n    linarith\n  | m₁ + 1, m₂ + 1, 0 => fun h => by simpa using ack_strict_mono_left' 1 ((add_lt_add_iff_right 1).1 h)\n  | m₁ + 1, m₂ + 1, n + 1 => fun h => by\n    rw [ack_succ_succ, ack_succ_succ]\n    exact\n      (ack_strict_mono_left' _ <| (add_lt_add_iff_right 1).1 h).trans\n        (ack_strict_mono_right _ <| ack_strict_mono_left' n h)\n#align ack_strict_mono_left' ack_strict_mono_left'\n\n",
 "ack_strict_mono_left":
 "theorem ack_strict_mono_left (n : ℕ) : strict_mono fun m => ack m n := fun m₁ m₂ => ack_strict_mono_left' n\n#align ack_strict_mono_left ack_strict_mono_left\n\n",
 "ack_pos":
 "theorem ack_pos : ∀ m n, 0 < ack m n\n  | 0, n => by simp\n  | m + 1, 0 => by\n    rw [ack_succ_zero]\n    apply ack_pos\n  | m + 1, n + 1 => by\n    rw [ack_succ_succ]\n    apply ack_pos\n#align ack_pos ack_pos\n\n",
 "ack_one":
 "@[simp]\ntheorem ack_one (n : ℕ) : ack 1 n = n + 2 := by\n  induction' n with n IH\n  · simp\n  · simp [IH]\n#align ack_one ack_one\n\n",
 "ack_mono_right":
 "theorem ack_mono_right (m : ℕ) : monotone (ack m) :=\n  (ack_strict_mono_right m).monotone\n#align ack_mono_right ack_mono_right\n\n",
 "ack_mono_left":
 "theorem ack_mono_left (n : ℕ) : monotone fun m => ack m n :=\n  (ack_strict_mono_left n).monotone\n#align ack_mono_left ack_mono_left\n\n",
 "ack_mkpair_lt":
 "theorem ack_mkpair_lt (m n k : ℕ) : ack m (mkpair n k) < ack (m + 4) (max n k) :=\n  (ack_strict_mono_right m <| mkpair_lt_max_add_one_sq n k).trans <| ack_add_one_sq_lt_ack_add_four _ _\n#align ack_mkpair_lt ack_mkpair_lt\n\n",
 "ack_lt_iff_right":
 "@[simp]\ntheorem ack_lt_iff_right {m n₁ n₂ : ℕ} : ack m n₁ < ack m n₂ ↔ n₁ < n₂ :=\n  (ack_strict_mono_right m).lt_iff_lt\n#align ack_lt_iff_right ack_lt_iff_right\n\n",
 "ack_lt_iff_left":
 "@[simp]\ntheorem ack_lt_iff_left {m₁ m₂ n : ℕ} : ack m₁ n < ack m₂ n ↔ m₁ < m₂ :=\n  (ack_strict_mono_left n).lt_iff_lt\n#align ack_lt_iff_left ack_lt_iff_left\n\n",
 "ack_le_iff_right":
 "@[simp]\ntheorem ack_le_iff_right {m n₁ n₂ : ℕ} : ack m n₁ ≤ ack m n₂ ↔ n₁ ≤ n₂ :=\n  (ack_strict_mono_right m).le_iff_le\n#align ack_le_iff_right ack_le_iff_right\n\n",
 "ack_le_iff_left":
 "@[simp]\ntheorem ack_le_iff_left {m₁ m₂ n : ℕ} : ack m₁ n ≤ ack m₂ n ↔ m₁ ≤ m₂ :=\n  (ack_strict_mono_left n).le_iff_le\n#align ack_le_iff_left ack_le_iff_left\n\n",
 "ack_le_ack":
 "theorem ack_le_ack {m₁ m₂ n₁ n₂ : ℕ} (hm : m₁ ≤ m₂) (hn : n₁ ≤ n₂) : ack m₁ n₁ ≤ ack m₂ n₂ :=\n  (ack_mono_left n₁ hm).trans <| ack_mono_right m₂ hn\n#align ack_le_ack ack_le_ack\n\n",
 "ack_injective_right":
 "theorem ack_injective_right (m : ℕ) : function.injective (ack m) :=\n  (ack_strict_mono_right m).injective\n#align ack_injective_right ack_injective_right\n\n",
 "ack_injective_left":
 "theorem ack_injective_left (n : ℕ) : function.injective fun m => ack m n :=\n  (ack_strict_mono_left n).injective\n#align ack_injective_left ack_injective_left\n\n",
 "ack_inj_right":
 "@[simp]\ntheorem ack_inj_right {m n₁ n₂ : ℕ} : ack m n₁ = ack m n₂ ↔ n₁ = n₂ :=\n  (ack_injective_right m).eq_iff\n#align ack_inj_right ack_inj_right\n\n",
 "ack_inj_left":
 "@[simp]\ntheorem ack_inj_left {m₁ m₂ n : ℕ} : ack m₁ n = ack m₂ n ↔ m₁ = m₂ :=\n  (ack_injective_left n).eq_iff\n#align ack_inj_left ack_inj_left\n\n",
 "ack_add_one_sq_lt_ack_add_three":
 "theorem ack_add_one_sq_lt_ack_add_three : ∀ m n, (ack m n + 1) ^ 2 ≤ ack (m + 3) n\n  | 0, n => by simpa using sq_le_two_pow_add_one_minus_three (n + 2)\n  | m + 1, 0 => by\n    rw [ack_succ_zero, ack_succ_zero]\n    apply ack_add_one_sq_lt_ack_add_three\n  | m + 1, n + 1 => by\n    rw [ack_succ_succ, ack_succ_succ]\n    apply (ack_add_one_sq_lt_ack_add_three _ _).trans (ack_mono_right _ <| ack_mono_left _ _)\n    linarith\n#align ack_add_one_sq_lt_ack_add_three ack_add_one_sq_lt_ack_add_three\n\n",
 "ack_add_one_sq_lt_ack_add_four":
 "theorem ack_add_one_sq_lt_ack_add_four (m n : ℕ) : ack m ((n + 1) ^ 2) < ack (m + 4) n :=\n  calc\n    ack m ((n + 1) ^ 2) < ack m ((ack m n + 1) ^ 2) :=\n      ack_strict_mono_right m <| pow_lt_pow_of_lt_left (succ_lt_succ <| lt_ack_right m n) zero_lt_two\n    _ ≤ ack m (ack (m + 3) n) := ack_mono_right m <| ack_add_one_sq_lt_ack_add_three m n\n    _ ≤ ack (m + 2) (ack (m + 3) n) := ack_mono_left _ <| by linarith\n    _ = ack (m + 3) (n + 1) := (ack_succ_succ _ n).symm\n    _ ≤ ack (m + 4) n := ack_succ_right_le_ack_succ_left _ n\n    \n#align ack_add_one_sq_lt_ack_add_four ack_add_one_sq_lt_ack_add_four\n\n",
 "ack_ack_lt_ack_max_add_two":
 "theorem ack_ack_lt_ack_max_add_two (m n k : ℕ) : ack m (ack n k) < ack (max m n + 2) k :=\n  calc\n    ack m (ack n k) ≤ ack (max m n) (ack n k) := ack_mono_left _ (le_max_left _ _)\n    _ < ack (max m n) (ack (max m n + 1) k) :=\n      ack_strict_mono_right _ <| ack_strict_mono_left k <| lt_succ_of_le <| le_max_right m n\n    _ = ack (max m n + 1) (k + 1) := (ack_succ_succ _ _).symm\n    _ ≤ ack (max m n + 2) k := ack_succ_right_le_ack_succ_left _ _\n    \n#align ack_ack_lt_ack_max_add_two ack_ack_lt_ack_max_add_two\n\n"}