{"unary_decode_encode_nat":
 "theorem unary_decode_encode_nat : ∀ n, unary_decode_nat (unary_encode_nat n) = n := fun n =>\n  nat.rec rfl (fun (m : ℕ) hm => (congr_arg nat.succ hm.symm).symm) n\n#align unary_decode_encode_nat unary_decode_encode_nat\n\n",
 "left_inverse_section_inclusion":
 "theorem left_inverse_section_inclusion : function.left_inverse section_Γ'_bool inclusion_bool_Γ' := fun x =>\n  bool.cases_on x rfl rfl\n#align left_inverse_section_inclusion left_inverse_section_inclusion\n\n",
 "inclusion_bool_Γ'_injective":
 "theorem inclusion_bool_Γ'_injective : function.injective inclusion_bool_Γ' :=\n  function.has_left_inverse.injective (Exists.intro section_Γ'_bool left_inverse_section_inclusion)\n#align inclusion_bool_Γ'_injective inclusion_bool_Γ'_injective\n\n",
 "encode_pos_num_nonempty":
 "theorem encode_pos_num_nonempty (n : PosNum) : encode_pos_num n ≠ [] :=\n  pos_num.cases_on n (List.cons_ne_nil _ _) (fun m => List.cons_ne_nil _ _) fun m => List.cons_ne_nil _ _\n#align encode_pos_num_nonempty encode_pos_num_nonempty\n\n",
 "encode_injective":
 "/-\nCopyright (c) 2020 Pim Spelier, Daan van Gent. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Pim Spelier, Daan van Gent\n-/\ntheorem encoding.encode_injective {α : Type u} (e : encoding α) : function.injective e.encode :=\n  by\n  refine' fun _ _ h => option.some_injective _ _\n  rw [← e.decode_encode, ← e.decode_encode, h]\n#align encoding.encode_injective encoding.encode_injective\n\n",
 "decode_encode_pos_num":
 "theorem decode_encode_pos_num : ∀ n, decode_pos_num (encode_pos_num n) = n :=\n  by\n  intro n\n  induction' n with m hm m hm <;> unfold encode_pos_num decode_pos_num\n  · rfl\n  · rw [hm]\n    exact if_neg (encode_pos_num_nonempty m)\n  · exact congr_arg pos_num.bit0 hm\n#align decode_encode_pos_num decode_encode_pos_num\n\n",
 "decode_encode_num":
 "theorem decode_encode_num : ∀ n, decode_num (encode_num n) = n :=\n  by\n  intro n\n  cases n <;> unfold encode_num decode_num\n  · rfl\n  rw [decode_encode_pos_num n]\n  rw [pos_num.cast_to_num]\n  exact if_neg (encode_pos_num_nonempty n)\n#align decode_encode_num decode_encode_num\n\n",
 "decode_encode_nat":
 "theorem decode_encode_nat : ∀ n, decode_nat (encode_nat n) = n :=\n  by\n  intro n\n  conv_rhs => rw [← num.to_of_nat n]\n  exact congr_arg coe (decode_encode_num ↑n)\n#align decode_encode_nat decode_encode_nat\n\n",
 "decode_encode_bool":
 "theorem decode_encode_bool : ∀ b, decode_bool (encode_bool b) = b := fun b => bool.cases_on b rfl rfl\n#align decode_encode_bool decode_encode_bool\n\n",
 "card_le_card_list":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\ntheorem encoding.card_le_card_list {α : Type u} (e : encoding.{u, v} α) :\n    cardinal.lift.{v} (cardinal.mk α) ≤ cardinal.lift.{u} (cardinal.mk (list e.Γ)) :=\n  cardinal.lift_mk_le'.2 ⟨⟨e.encode, e.encode_injective⟩⟩\n#align encoding.card_le_card_list encoding.card_le_card_list\n\n",
 "card_le_aleph_0":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.mk -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `cardinal.aleph_0 -/\ntheorem fin_encoding.card_le_aleph_0 {α : Type u} (e : fin_encoding α) : cardinal.mk α ≤ cardinal.aleph_0 :=\n  haveI : Encodable e.Γ := fintype.to_encodable _\n  e.to_encoding.card_le_aleph_0\n#align fin_encoding.card_le_aleph_0 fin_encoding.card_le_aleph_0\n\n"}