{"transitive_oneOneReducible":
 "#print transitive_oneOneReducible /-\ntheorem transitive_oneOneReducible {α} [Primcodable α] : transitive (@OneOneReducible α α _ _) := fun p q r =>\n  OneOneReducible.trans\n#align transitive_one_one_reducible transitive_oneOneReducible\n-/\n\n",
 "transitive_manyOneReducible":
 "#print transitive_manyOneReducible /-\ntheorem transitive_manyOneReducible {α} [Primcodable α] : transitive (@ManyOneReducible α α _ _) := fun p q r =>\n  ManyOneReducible.trans\n#align transitive_many_one_reducible transitive_manyOneReducible\n-/\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.Computable.trans /-\ntheorem Equiv.Computable.trans {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {e₁ : «expr ≃ » α β}\n    {e₂ : «expr ≃ » β γ} : e₁.computable → e₂.computable → (e₁.trans e₂).computable\n  | ⟨l₁, r₁⟩, ⟨l₂, r₂⟩ => ⟨l₂.comp l₁, r₁.comp r₂⟩\n#align equiv.computable.trans Equiv.Computable.trans\n-/\n\n",
 "to_many_one":
 "#print OneOneEquiv.to_many_one /-\ntheorem OneOneEquiv.to_many_one {α β} [Primcodable α] [Primcodable β] {p : α → Prop} {q : β → Prop} :\n    OneOneEquiv p q → ManyOneEquiv p q\n  | ⟨pq, qp⟩ => ⟨pq.to_many_one, qp.to_many_one⟩\n#align one_one_equiv.to_many_one OneOneEquiv.to_many_one\n-/\n\n",
 "toNat_manyOneReducible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n#print toNat_manyOneReducible /-\n@[simp]\ntheorem toNat_manyOneReducible {p : Set α} : «expr ≤₀ » (toNat p) p :=\n  ⟨fun n => (encodable.decode α n).get_or_else default, Computable.option_getD Computable.decode (Computable.const _),\n    fun _ => iff.rfl⟩\n#align to_nat_many_one_reducible toNat_manyOneReducible\n-/\n\n",
 "toNat_manyOneEquiv":
 "#print toNat_manyOneEquiv /-\n@[simp]\ntheorem toNat_manyOneEquiv {p : Set α} : ManyOneEquiv (toNat p) p := by simp [ManyOneEquiv]\n#align to_nat_many_one_equiv toNat_manyOneEquiv\n-/\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print Equiv.Computable.symm /-\ntheorem Equiv.Computable.symm {α β} [Primcodable α] [Primcodable β] {e : «expr ≃ » α β} :\n    e.computable → e.symm.computable :=\n  And.symm\n#align equiv.computable.symm Equiv.Computable.symm\n-/\n\n",
 "reflexive_oneOneReducible":
 "#print reflexive_oneOneReducible /-\ntheorem reflexive_oneOneReducible {α} [Primcodable α] : reflexive (@OneOneReducible α α _ _) :=\n  oneOneReducible_refl\n#align reflexive_one_one_reducible reflexive_oneOneReducible\n-/\n\n",
 "reflexive_manyOneReducible":
 "#print reflexive_manyOneReducible /-\ntheorem reflexive_manyOneReducible {α} [Primcodable α] : reflexive (@ManyOneReducible α α _ _) :=\n  manyOneReducible_refl\n#align reflexive_many_one_reducible reflexive_manyOneReducible\n-/\n\n",
 "oneOneReducible_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n#print oneOneReducible_refl /-\n@[refl]\ntheorem oneOneReducible_refl {α} [Primcodable α] (p : α → Prop) : «expr ≤₁ » p p :=\n  ⟨id, Computable.id, injective_id, by simp⟩\n#align one_one_reducible_refl oneOneReducible_refl\n-/\n\n",
 "oneOneEquiv_refl":
 "#print oneOneEquiv_refl /-\n@[refl]\ntheorem oneOneEquiv_refl {α} [Primcodable α] (p : α → Prop) : OneOneEquiv p p :=\n  ⟨oneOneReducible_refl _, oneOneReducible_refl _⟩\n#align one_one_equiv_refl oneOneEquiv_refl\n-/\n\n",
 "of_le_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n@[simp]\ntheorem of_le_of {p : α → Prop} {q : β → Prop} : of p ≤ of q ↔ «expr ≤₀ » p q :=\n  manyOneReducible_toNat_toNat\n#align of_le_of of_le_of\n\n",
 "of_equiv_symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n#print OneOneReducible.of_equiv_symm /-\ntheorem OneOneReducible.of_equiv_symm {α β} [Primcodable α] [Primcodable β] {e : «expr ≃ » α β} (q : β → Prop)\n    (h : Computable e.symm) : «expr ≤₁ » q (q ∘ e) := by convert OneOneReducible.of_equiv _ h <;> funext <;> simp\n#align one_one_reducible.of_equiv_symm OneOneReducible.of_equiv_symm\n-/\n\n",
 "of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≃ » -/\n#print ManyOneEquiv.of_equiv /-\ntheorem ManyOneEquiv.of_equiv {α β} [Primcodable α] [Primcodable β] {e : «expr ≃ » α β} (h : e.computable) {p} :\n    ManyOneEquiv (p ∘ e) p :=\n  (OneOneEquiv.of_equiv h).to_many_one\n#align many_one_equiv.of_equiv ManyOneEquiv.of_equiv\n-/\n\n",
 "of_eq_of":
 "@[simp]\ntheorem of_eq_of {p : α → Prop} {q : β → Prop} : of p = of q ↔ ManyOneEquiv p q := by simp [of, Quotient.eq'']\n#align of_eq_of of_eq_of\n\n",
 "mk":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n#print OneOneReducible.mk /-\ntheorem OneOneReducible.mk {α β} [Primcodable α] [Primcodable β] {f : α → β} (q : β → Prop) (h : Computable f)\n    (i : injective f) : «expr ≤₁ » (fun a => q (f a)) q :=\n  ⟨f, h, i, fun a => iff.rfl⟩\n#align one_one_reducible.mk OneOneReducible.mk\n-/\n\n",
 "manyOneReducible_toNat_toNat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n#print manyOneReducible_toNat_toNat /-\n@[simp]\ntheorem manyOneReducible_toNat_toNat {p : Set α} {q : Set β} : «expr ≤₀ » (toNat p) (toNat q) ↔ «expr ≤₀ » p q :=\n  ⟨fun h => manyOneReducible_toNat.trans (h.trans toNat_manyOneReducible), fun h =>\n    toNat_manyOneReducible.trans (h.trans manyOneReducible_toNat)⟩\n#align many_one_reducible_to_nat_to_nat manyOneReducible_toNat_toNat\n-/\n\n",
 "manyOneReducible_toNat":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n#print manyOneReducible_toNat /-\n@[simp]\ntheorem manyOneReducible_toNat {p : Set α} : «expr ≤₀ » p (toNat p) :=\n  ⟨encodable.encode, Computable.encode, by simp [toNat, setOf]⟩\n#align many_one_reducible_to_nat manyOneReducible_toNat\n-/\n\n",
 "manyOneReducible_refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n#print manyOneReducible_refl /-\n@[refl]\ntheorem manyOneReducible_refl {α} [Primcodable α] (p : α → Prop) : «expr ≤₀ » p p :=\n  ⟨id, Computable.id, by simp⟩\n#align many_one_reducible_refl manyOneReducible_refl\n-/\n\n",
 "manyOneEquiv_up":
 "#print manyOneEquiv_up /-\ntheorem manyOneEquiv_up {α} [Primcodable α] {p : α → Prop} : ManyOneEquiv (p ∘ Ulower.up) p :=\n  ManyOneEquiv.of_equiv Ulower.down_computable.symm\n#align many_one_equiv_up manyOneEquiv_up\n-/\n\n",
 "manyOneEquiv_toNat":
 "#print manyOneEquiv_toNat /-\n@[simp]\ntheorem manyOneEquiv_toNat (p : Set α) (q : Set β) : ManyOneEquiv (toNat p) (toNat q) ↔ ManyOneEquiv p q := by\n  simp [ManyOneEquiv]\n#align many_one_equiv_to_nat manyOneEquiv_toNat\n-/\n\n",
 "manyOneEquiv_refl":
 "#print manyOneEquiv_refl /-\n@[refl]\ntheorem manyOneEquiv_refl {α} [Primcodable α] (p : α → Prop) : ManyOneEquiv p p :=\n  ⟨manyOneReducible_refl _, manyOneReducible_refl _⟩\n#align many_one_equiv_refl manyOneEquiv_refl\n-/\n\n",
 "lift_on₂_eq":
 "@[simp]\nprotected theorem lift_on₂_eq {φ} (p q : Set ℕ) (f : Set ℕ → Set ℕ → φ)\n    (h : ∀ p₁ p₂ q₁ q₂, ManyOneEquiv p₁ p₂ → ManyOneEquiv q₁ q₂ → f p₁ q₁ = f p₂ q₂) :\n    (of p).lift_on₂ (of q) f h = f p q :=\n  rfl\n#align lift_on₂_eq lift_on₂_eq\n\n",
 "lift_on_eq":
 "@[simp]\nprotected theorem lift_on_eq {φ} (p : Set ℕ) (f : Set ℕ → φ) (h : ∀ p q, ManyOneEquiv p q → f p = f q) :\n    (of p).lift_on f h = f p :=\n  rfl\n#align lift_on_eq lift_on_eq\n\n",
 "le_trans":
 "#print le_trans /-\nprivate theorem le_trans {d₁ d₂ d₃ : ManyOneDegree} : d₁ ≤ d₂ → d₂ ≤ d₃ → d₁ ≤ d₃ :=\n  by\n  induction d₁ using ManyOneDegree.ind_on\n  induction d₂ using ManyOneDegree.ind_on\n  induction d₃ using ManyOneDegree.ind_on\n  apply ManyOneReducible.trans\n#align le_trans le_trans\n-/\n\n",
 "le_refl":
 "#print le_refl /-\nprivate theorem le_refl (d : ManyOneDegree) : d ≤ d := by induction d using ManyOneDegree.ind_on <;> simp\n#align le_refl le_refl\n-/\n\n",
 "le_congr_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n#print OneOneEquiv.le_congr_right /-\ntheorem OneOneEquiv.le_congr_right {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop} {q : β → Prop}\n    {r : γ → Prop} (h : OneOneEquiv q r) : «expr ≤₁ » p q ↔ «expr ≤₁ » p r :=\n  ⟨fun h' => h'.trans h.1, fun h' => h'.trans h.2⟩\n#align one_one_equiv.le_congr_right OneOneEquiv.le_congr_right\n-/\n\n",
 "le_congr_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n#print OneOneEquiv.le_congr_left /-\ntheorem OneOneEquiv.le_congr_left {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop} {q : β → Prop}\n    {r : γ → Prop} (h : OneOneEquiv p q) : «expr ≤₁ » p r ↔ «expr ≤₁ » q r :=\n  ⟨h.2.trans, h.1.trans⟩\n#align one_one_equiv.le_congr_left OneOneEquiv.le_congr_left\n-/\n\n",
 "le_antisymm":
 "#print le_antisymm /-\nprivate theorem le_antisymm {d₁ d₂ : ManyOneDegree} : d₁ ≤ d₂ → d₂ ≤ d₁ → d₁ = d₂ :=\n  by\n  induction d₁ using ManyOneDegree.ind_on\n  induction d₂ using ManyOneDegree.ind_on\n  intro hp hq\n  simp_all only [ManyOneEquiv, of_le_of, of_eq_of, true_and_iff]\n#align le_antisymm le_antisymm\n-/\n\n",
 "le_add_right":
 "#print le_add_right /-\n@[simp]\nprotected theorem le_add_right (d₁ d₂ : ManyOneDegree) : d₂ ≤ d₁ + d₂ :=\n  (ManyOneDegree.add_le.1 (by rfl)).2\n#align le_add_right le_add_right\n-/\n\n",
 "le_add_left":
 "#print le_add_left /-\n@[simp]\nprotected theorem le_add_left (d₁ d₂ : ManyOneDegree) : d₁ ≤ d₁ + d₂ :=\n  (ManyOneDegree.add_le.1 (by rfl)).1\n#align le_add_left le_add_left\n-/\n\n",
 "ind_on":
 "@[elab_as_elim]\nprotected theorem ind_on {C : ManyOneDegree → Prop} (d : ManyOneDegree) (h : ∀ p : Set ℕ, C (of p)) : C d :=\n  Quotient.inductionOn' d h\n#align ind_on ind_on\n\n",
 "eqv":
 "#print Computable.eqv /-\ntheorem Computable.eqv (α) [Denumerable α] : (Denumerable.eqv α).computable :=\n  ⟨Computable.encode, Computable.ofNat _⟩\n#align computable.eqv Computable.eqv\n-/\n\n",
 "equiv₂":
 "#print Computable.equiv₂ /-\ntheorem Computable.equiv₂ (α β) [Denumerable α] [Denumerable β] : (Denumerable.equiv₂ α β).computable :=\n  (Computable.eqv _).trans (Computable.eqv _).symm\n#align computable.equiv₂ Computable.equiv₂\n-/\n\n",
 "equivalence_of_oneOneEquiv":
 "#print equivalence_of_oneOneEquiv /-\ntheorem equivalence_of_oneOneEquiv {α} [Primcodable α] : equivalence (@OneOneEquiv α α _ _) :=\n  ⟨oneOneEquiv_refl, fun x y => OneOneEquiv.symm, fun x y z => OneOneEquiv.trans⟩\n#align equivalence_of_one_one_equiv equivalence_of_oneOneEquiv\n-/\n\n",
 "equivalence_of_manyOneEquiv":
 "#print equivalence_of_manyOneEquiv /-\ntheorem equivalence_of_manyOneEquiv {α} [Primcodable α] : equivalence (@ManyOneEquiv α α _ _) :=\n  ⟨manyOneEquiv_refl, fun x y => ManyOneEquiv.symm, fun x y z => ManyOneEquiv.trans⟩\n#align equivalence_of_many_one_equiv equivalence_of_manyOneEquiv\n-/\n\n",
 "down_computable":
 "#print Ulower.down_computable /-\n@[simp]\ntheorem Ulower.down_computable {α} [Primcodable α] : (Ulower.equiv α).computable :=\n  ⟨Primrec.ulower_down.to_comp, Primrec.ulower_up.to_comp⟩\n#align ulower.down_computable Ulower.down_computable\n-/\n\n",
 "disjoin_right":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊕' » -/\n#print OneOneReducible.disjoin_right /-\ntheorem OneOneReducible.disjoin_right {α β} [Primcodable α] [Primcodable β] {p : α → Prop} {q : β → Prop} :\n    «expr ≤₁ » q («expr ⊕' » p q) :=\n  ⟨Sum.inr, Computable.sum_inr, fun x y => Sum.inr.inj_iff.1, fun a => iff.rfl⟩\n#align one_one_reducible.disjoin_right OneOneReducible.disjoin_right\n-/\n\n",
 "disjoin_manyOneReducible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊕' » -/\n#print disjoin_manyOneReducible /-\ntheorem disjoin_manyOneReducible {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop} {q : β → Prop}\n    {r : γ → Prop} : «expr ≤₀ » p r → «expr ≤₀ » q r → «expr ≤₀ » («expr ⊕' » p q) r\n  | ⟨f, c₁, h₁⟩, ⟨g, c₂, h₂⟩ =>\n    ⟨Sum.elim f g, Computable.id.sum_cases (c₁.comp Computable.snd).to₂ (c₂.comp Computable.snd).to₂, fun x => by\n      cases x <;> [apply h₁, apply h₂]⟩\n#align disjoin_many_one_reducible disjoin_manyOneReducible\n-/\n\n",
 "disjoin_left":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊕' » -/\n#print OneOneReducible.disjoin_left /-\ntheorem OneOneReducible.disjoin_left {α β} [Primcodable α] [Primcodable β] {p : α → Prop} {q : β → Prop} :\n    «expr ≤₁ » p («expr ⊕' » p q) :=\n  ⟨Sum.inl, Computable.sum_inl, fun x y => Sum.inl.inj_iff.1, fun a => iff.rfl⟩\n#align one_one_reducible.disjoin_left OneOneReducible.disjoin_left\n-/\n\n",
 "disjoin_le":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊕' » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\n#print disjoin_le /-\ntheorem disjoin_le {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop} {q : β → Prop}\n    {r : γ → Prop} : «expr ≤₀ » («expr ⊕' » p q) r ↔ «expr ≤₀ » p r ∧ «expr ≤₀ » q r :=\n  ⟨fun h => ⟨OneOneReducible.disjoin_left.to_many_one.trans h, OneOneReducible.disjoin_right.to_many_one.trans h⟩,\n    fun ⟨h₁, h₂⟩ => disjoin_manyOneReducible h₁ h₂⟩\n#align disjoin_le disjoin_le\n-/\n\n",
 "congr_right":
 "#print OneOneEquiv.congr_right /-\ntheorem OneOneEquiv.congr_right {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop} {q : β → Prop}\n    {r : γ → Prop} (h : OneOneEquiv q r) : OneOneEquiv p q ↔ OneOneEquiv p r :=\n  and_congr h.le_congr_right h.le_congr_left\n#align one_one_equiv.congr_right OneOneEquiv.congr_right\n-/\n\n",
 "congr_left":
 "#print OneOneEquiv.congr_left /-\ntheorem OneOneEquiv.congr_left {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop} {q : β → Prop}\n    {r : γ → Prop} (h : OneOneEquiv p q) : OneOneEquiv p r ↔ OneOneEquiv q r :=\n  and_congr h.le_congr_left h.le_congr_right\n#align one_one_equiv.congr_left OneOneEquiv.congr_left\n-/\n\n",
 "computable_of_one_one_reducible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₁ » -/\ntheorem computable_of_one_one_reducible {p : α → Prop} {q : β → Prop} (h : «expr ≤₁ » p q) :\n    ComputablePred q → ComputablePred p :=\n  computable_of_manyOneReducible h.to_many_one\n#align computable_of_one_one_reducible computable_of_one_one_reducible\n\n",
 "computable_of_many_one_reducible":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≤₀ » -/\ntheorem computable_of_many_one_reducible {p : α → Prop} {q : β → Prop} (h₁ : «expr ≤₀ » p q) (h₂ : ComputablePred q) :\n    ComputablePred p := by\n  rcases h₁ with ⟨f, c, hf⟩\n  rw [show p = fun a => q (f a) from Set.ext hf]\n  rcases computable_iff.1 h₂ with ⟨g, hg, rfl⟩\n  exact ⟨by infer_instance, by simpa using hg.comp c⟩\n#align computable_of_many_one_reducible computable_of_many_one_reducible\n\n",
 "add_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ⊕' » -/\n@[simp]\ntheorem add_of (p : Set α) (q : Set β) : of («expr ⊕' » p q) = of p + of q :=\n  of_eq_of.mpr\n    ⟨disjoin_manyOneReducible (manyOneReducible_toNat.trans OneOneReducible.disjoin_left.to_many_one)\n        (manyOneReducible_toNat.trans OneOneReducible.disjoin_right.to_many_one),\n      disjoin_manyOneReducible (toNat_manyOneReducible.trans OneOneReducible.disjoin_left.to_many_one)\n        (toNat_manyOneReducible.trans OneOneReducible.disjoin_right.to_many_one)⟩\n#align add_of add_of\n\n",
 "add_le":
 "#print add_le /-\n@[simp]\nprotected theorem add_le {d₁ d₂ d₃ : ManyOneDegree} : d₁ + d₂ ≤ d₃ ↔ d₁ ≤ d₃ ∧ d₂ ≤ d₃ :=\n  by\n  induction d₁ using ManyOneDegree.ind_on\n  induction d₂ using ManyOneDegree.ind_on\n  induction d₃ using ManyOneDegree.ind_on\n  simpa only [← add_of, of_le_of] using disjoin_le\n#align add_le add_le\n-/\n\n"}