{"to_NFA_eval_from_match":
 "@[simp]\ntheorem to_NFA_eval_from_match (M : DFA α σ) (start : σ) (s : list α) :\n    M.to_NFA.eval_from {start} s = {M.eval_from start s} :=\n  by\n  change list.foldl M.to_NFA.step_set {start} s = {list.foldl M.step start s}\n  induction' s with a s ih generalizing start\n  · tauto\n  · rw [list.foldl, list.foldl, show M.to_NFA.step_set {start} a = {M.step start a} by simpa [NFA.step_set] ]\n    tauto\n#align to_NFA_eval_from_match to_NFA_eval_from_match\n\n",
 "to_NFA_correct":
 "@[simp]\ntheorem to_NFA_correct (M : DFA α σ) : M.to_NFA.accepts = M.accepts :=\n  by\n  ext x\n  change (∃ S H, S ∈ M.to_NFA.eval_from {M.start} x) ↔ _\n  rw [to_NFA_eval_from_match]\n  constructor\n  · rintro ⟨S, hS₁, hS₂⟩\n    rwa [set.mem_singleton_iff.mp hS₂] at hS₁\n  · exact fun h => ⟨M.eval x, h, rfl⟩\n#align to_NFA_correct to_NFA_correct\n\n",
 "to_DFA_correct":
 "@[simp]\ntheorem to_DFA_correct : M.to_DFA.accepts = M.accepts := by\n  ext x\n  rw [accepts, DFA.accepts, eval, DFA.eval]\n  change list.foldl _ _ _ ∈ { S | _ } ↔ _\n  constructor <;> · exact fun ⟨w, h2, h3⟩ => ⟨w, h3, h2⟩\n#align to_DFA_correct to_DFA_correct\n\n",
 "step_set_empty":
 "@[simp]\ntheorem step_set_empty (a : α) : M.step_set ∅ a = ∅ := by simp_rw [step_set, Union_false, Union_empty]\n#align step_set_empty step_set_empty\n\n",
 "pumping_lemma":
 "theorem pumping_lemma [fintype σ] {x : list α} (hx : x ∈ M.accepts) (hlen : fintype.card (set σ) ≤ list.length x) :\n    ∃ a b c,\n      x = a ++ b ++ c ∧\n        a.length + b.length ≤ fintype.card (set σ) ∧ b ≠ [] ∧ {a} * language.star {b} * {c} ≤ M.accepts :=\n  by\n  rw [← to_DFA_correct] at hx⊢\n  exact M.to_DFA.pumping_lemma hx hlen\n#align pumping_lemma pumping_lemma\n\n",
 "mem_step_set":
 "/-\nCopyright (c) 2020 Fox Thomson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Fox Thomson\n-/\ntheorem mem_step_set (s : σ) (S : set σ) (a : α) : s ∈ M.step_set S a ↔ ∃ t ∈ S, s ∈ M.step t a :=\n  mem_Union₂\n#align mem_step_set mem_step_set\n\n",
 "eval_singleton":
 "@[simp]\ntheorem eval_singleton (a : α) : M.eval [a] = M.step_set M.start a :=\n  rfl\n#align eval_singleton eval_singleton\n\n",
 "eval_nil":
 "@[simp]\ntheorem eval_nil : M.eval [] = M.start :=\n  rfl\n#align eval_nil eval_nil\n\n",
 "eval_from_singleton":
 "@[simp]\ntheorem eval_from_singleton (S : set σ) (a : α) : M.eval_from S [a] = M.step_set S a :=\n  rfl\n#align eval_from_singleton eval_from_singleton\n\n",
 "eval_from_nil":
 "@[simp]\ntheorem eval_from_nil (S : set σ) : M.eval_from S [] = S :=\n  rfl\n#align eval_from_nil eval_from_nil\n\n",
 "eval_from_append_singleton":
 "@[simp]\ntheorem eval_from_append_singleton (S : set σ) (x : list α) (a : α) :\n    M.eval_from S (x ++ [a]) = M.step_set (M.eval_from S x) a := by\n  simp only [eval_from, List.foldl_append, List.foldl_cons, List.foldl_nil]\n#align eval_from_append_singleton eval_from_append_singleton\n\n",
 "eval_append_singleton":
 "@[simp]\ntheorem eval_append_singleton (x : list α) (a : α) : M.eval (x ++ [a]) = M.step_set (M.eval x) a :=\n  eval_from_append_singleton _ _ _ _\n#align eval_append_singleton eval_append_singleton\n\n"}