{"zero_rmatch":
 "@[simp]\ntheorem zero_rmatch (x : list α) : rmatch 0 x = ff := by induction x <;> simp [rmatch, match_epsilon, *]\n#align zero_rmatch zero_rmatch\n\n",
 "zero_def":
 "/-\nCopyright (c) 2020 Fox Thomson. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Fox Thomson\n-/\n@[simp]\ntheorem zero_def : (zero : regular_expression α) = 0 :=\n  rfl\n#align zero_def zero_def\n\n",
 "star_rmatch_iff":
 "theorem star_rmatch_iff (P : regular_expression α) :\n    ∀ x : list α, (star P).rmatch x ↔ ∃ S : list (list α), x = S.join ∧ ∀ t ∈ S, t ≠ [] ∧ P.rmatch t\n  | x =>\n    by\n    have A : ∀ m n : ℕ, n < m + n + 1 := by\n      intro m n\n      convert add_lt_add_of_le_of_lt (add_le_add (zero_le m) (le_refl n)) zero_lt_one\n      simp\n    have IH := fun t (h : list.length t < list.length x) => star_rmatch_iff t\n    clear star_rmatch_iff\n    constructor\n    · cases' x with a x\n      · intro\n        fconstructor\n        exact []\n        tauto\n      · rw [rmatch, deriv, mul_rmatch_iff]\n        rintro ⟨t, u, hs, ht, hu⟩\n        have hwf : u.length < (list.cons a x).length :=\n          by\n          rw [hs, list.length_cons, list.length_append]\n          apply A\n        rw [IH _ hwf] at hu\n        rcases hu with ⟨S', hsum, helem⟩\n        use (a :: t) :: S'\n        constructor\n        · simp [hs, hsum]\n        · intro t' ht'\n          cases' ht' with ht' ht'\n          · rw [ht']\n            exact ⟨by decide, ht⟩\n          · exact helem _ ht'\n    · rintro ⟨S, hsum, helem⟩\n      cases' x with a x\n      · decide\n      · rw [rmatch, deriv, mul_rmatch_iff]\n        cases' S with t' U\n        · exact ⟨[], [], by tauto⟩\n        · cases' t' with b t\n          · simp only [forall_eq_or_imp, List.mem_cons] at helem\n            simp only [eq_self_iff_true, not_true, ne.def, false_and_iff] at helem\n            cases helem\n          simp only [list.join, list.cons_append] at hsum\n          refine' ⟨t, U.join, hsum.2, _, _⟩\n          · specialize helem (b :: t) (by simp)\n            rw [rmatch] at helem\n            convert helem.2\n            exact hsum.1\n          · have hwf : U.join.length < (list.cons a x).length :=\n              by\n              rw [hsum.1, hsum.2]\n              simp only [list.length_append, List.length_join, list.length]\n              apply A\n            rw [IH _ hwf]\n            refine' ⟨U, rfl, fun t h => helem t _⟩\n            right\n            assumption termination_by' ⟨fun L₁ L₂ : list _ => L₁.length < L₂.length, inv_image.wf _ Nat.lt_wfRel⟩\n#align star_rmatch_iff star_rmatch_iff\n\n",
 "rmatch_iff_matches":
 "@[simp]\ntheorem rmatch_iff_matches (P : regular_expression α) : ∀ x : list α, P.rmatch x ↔ x ∈ P.matches :=\n  by\n  intro x\n  induction P generalizing x\n  all_goals\n    try rw [zero_def]\n    try rw [one_def]\n    try rw [plus_def]\n    try rw [comp_def]\n    rw [matches]\n  case zero =>\n    rw [zero_rmatch]\n    tauto\n  case epsilon =>\n    rw [one_rmatch_iff]\n    rfl\n  case char =>\n    rw [char_rmatch_iff]\n    rfl\n  case plus _ _ ih₁ ih₂ =>\n    rw [add_rmatch_iff, ih₁, ih₂]\n    rfl\n  case\n    comp P Q ih₁ ih₂ =>\n    simp only [mul_rmatch_iff, comp_def, language.mul_def, exists_and_left, Set.mem_image2, Set.image_prod]\n    constructor\n    · rintro ⟨x, y, hsum, hmatch₁, hmatch₂⟩\n      rw [ih₁] at hmatch₁\n      rw [ih₂] at hmatch₂\n      exact ⟨x, hmatch₁, y, hmatch₂, hsum.symm⟩\n    · rintro ⟨x, hmatch₁, y, hmatch₂, hsum⟩\n      rw [← ih₁] at hmatch₁\n      rw [← ih₂] at hmatch₂\n      exact ⟨x, y, hsum.symm, hmatch₁, hmatch₂⟩\n  case star _ ih =>\n    rw [star_rmatch_iff, language.star_def_nonempty]\n    constructor\n    all_goals\n      rintro ⟨S, hx, hS⟩\n      refine' ⟨S, hx, _⟩\n      intro y\n      specialize hS y\n    · rw [← ih y]\n      tauto\n    · rw [ih y]\n      tauto\n#align rmatch_iff_matches rmatch_iff_matches\n\n",
 "plus_def":
 "@[simp]\ntheorem plus_def (P Q : regular_expression α) : plus P Q = P + Q :=\n  rfl\n#align plus_def plus_def\n\n",
 "one_rmatch_iff":
 "theorem one_rmatch_iff (x : list α) : rmatch 1 x ↔ x = [] := by induction x <;> simp [rmatch, match_epsilon, *]\n#align one_rmatch_iff one_rmatch_iff\n\n",
 "one_def":
 "@[simp]\ntheorem one_def : (epsilon : regular_expression α) = 1 :=\n  rfl\n#align one_def one_def\n\n",
 "mul_rmatch_iff":
 "theorem mul_rmatch_iff (P Q : regular_expression α) (x : list α) :\n    (P * Q).rmatch x ↔ ∃ t u : list α, x = t ++ u ∧ P.rmatch t ∧ Q.rmatch u :=\n  by\n  induction' x with a x ih generalizing P Q\n  · rw [rmatch, match_epsilon]\n    constructor\n    · intro h\n      refine' ⟨[], [], rfl, _⟩\n      rw [rmatch, rmatch]\n      rwa [Bool.and_coe_iff] at h\n    · rintro ⟨t, u, h₁, h₂⟩\n      cases' List.append_eq_nil.1 h₁.symm with ht hu\n      subst ht\n      subst hu\n      repeat' rw [rmatch] at h₂\n      simp [h₂]\n  · rw [rmatch, deriv]\n    split_ifs with hepsilon\n    · rw [add_rmatch_iff, ih]\n      constructor\n      · rintro (⟨t, u, _⟩ | h)\n        · exact ⟨a :: t, u, by tauto⟩\n        · exact ⟨[], a :: x, rfl, hepsilon, h⟩\n      · rintro ⟨t, u, h, hP, hQ⟩\n        cases' t with b t\n        · right\n          rw [list.nil_append] at h\n          rw [← h] at hQ\n          exact hQ\n        · left\n          simp only [list.cons_append] at h\n          refine' ⟨t, u, h.2, _, hQ⟩\n          rw [rmatch] at hP\n          convert hP\n          exact h.1\n    · rw [ih]\n      constructor <;> rintro ⟨t, u, h, hP, hQ⟩\n      · exact ⟨a :: t, u, by tauto⟩\n      · cases' t with b t\n        · contradiction\n        · simp only [list.cons_append] at h\n          refine' ⟨t, u, h.2, _, hQ⟩\n          rw [rmatch] at hP\n          convert hP\n          exact h.1\n#align mul_rmatch_iff mul_rmatch_iff\n\n",
 "matches_zero":
 "@[simp]\ntheorem matches_zero : (0 : regular_expression α).matches = 0 :=\n  rfl\n#align matches_zero matches_zero\n\n",
 "matches_star":
 "@[simp]\ntheorem matches_star (P : regular_expression α) : P.star.matches = P.matches.star :=\n  rfl\n#align matches_star matches_star\n\n",
 "matches_pow":
 "@[simp]\ntheorem matches_pow (P : regular_expression α) : ∀ n : ℕ, (P ^ n).matches = P.matches ^ n\n  | 0 => matches_epsilon\n  | n + 1 => (matches_mul _ _).trans <| eq.trans (congr_arg _ (matches_pow n)) (pow_succ _ _).symm\n#align matches_pow matches_pow\n\n",
 "matches_mul":
 "@[simp]\ntheorem matches_mul (P Q : regular_expression α) : (P * Q).matches = P.matches * Q.matches :=\n  rfl\n#align matches_mul matches_mul\n\n",
 "matches_map":
 "/-- The language of the map is the map of the language. -/\n@[simp]\ntheorem matches_map (f : α → β) : ∀ P : regular_expression α, (P.map f).matches = language.map f P.matches\n  | 0 => (map_zero _).symm\n  | 1 => (map_one _).symm\n  | char a => by\n    rw [eq_comm]\n    exact image_singleton\n  | R + S => by simp only [matches_map, map, matches_add, map_add]\n  | R * S => by simp only [matches_map, map, matches_mul, map_mul]\n  | star R => by\n    simp_rw [map, matches, matches_map]\n    rw [language.star_eq_supr_pow, language.star_eq_supr_pow]\n    simp_rw [← map_pow]\n    exact image_Union.symm\n#align matches_map matches_map\n\n",
 "matches_epsilon":
 "@[simp]\ntheorem matches_epsilon : (1 : regular_expression α).matches = 1 :=\n  rfl\n#align matches_epsilon matches_epsilon\n\n",
 "matches_char":
 "@[simp]\ntheorem matches_char (a : α) : (char a).matches = {[a]} :=\n  rfl\n#align matches_char matches_char\n\n",
 "matches_add":
 "@[simp]\ntheorem matches_add (P Q : regular_expression α) : (P + Q).matches = P.matches + Q.matches :=\n  rfl\n#align matches_add matches_add\n\n",
 "map_pow":
 "#print map_pow /-\n@[simp]\nprotected theorem map_pow (f : α → β) (P : regular_expression α) : ∀ n : ℕ, map f (P ^ n) = map f P ^ n\n  | 0 => rfl\n  | n + 1 => (congr_arg ((· * ·) (map f P)) (map_pow n) : _)\n#align map_pow map_pow\n-/\n\n",
 "map_map":
 "@[simp]\ntheorem map_map (g : β → γ) (f : α → β) : ∀ P : regular_expression α, (P.map f).map g = P.map (g ∘ f)\n  | 0 => rfl\n  | 1 => rfl\n  | char a => rfl\n  | R + S => by simp_rw [map, map_map]\n  | R * S => by simp_rw [map, map_map]\n  | star R => by simp_rw [map, map_map]\n#align map_map map_map\n\n",
 "map_id":
 "@[simp]\ntheorem map_id : ∀ P : regular_expression α, P.map id = P\n  | 0 => rfl\n  | 1 => rfl\n  | char a => rfl\n  | R + S => by simp_rw [map, map_id]\n  | R * S => by simp_rw [map, map_id]\n  | star R => by simp_rw [map, map_id]\n#align map_id map_id\n\n",
 "deriv_zero":
 "@[simp]\ntheorem deriv_zero (a : α) : deriv 0 a = 0 :=\n  rfl\n#align deriv_zero deriv_zero\n\n",
 "deriv_star":
 "@[simp]\ntheorem deriv_star (P : regular_expression α) (a : α) : deriv P.star a = deriv P a * star P :=\n  rfl\n#align deriv_star deriv_star\n\n",
 "deriv_one":
 "@[simp]\ntheorem deriv_one (a : α) : deriv 1 a = 0 :=\n  rfl\n#align deriv_one deriv_one\n\n",
 "deriv_char_self":
 "@[simp]\ntheorem deriv_char_self (a : α) : deriv (char a) a = 1 :=\n  if_pos rfl\n#align deriv_char_self deriv_char_self\n\n",
 "deriv_char_of_ne":
 "@[simp]\ntheorem deriv_char_of_ne (h : a ≠ b) : deriv (char a) b = 0 :=\n  if_neg h\n#align deriv_char_of_ne deriv_char_of_ne\n\n",
 "deriv_add":
 "@[simp]\ntheorem deriv_add (P Q : regular_expression α) (a : α) : deriv (P + Q) a = deriv P a + deriv Q a :=\n  rfl\n#align deriv_add deriv_add\n\n",
 "comp_def":
 "@[simp]\ntheorem comp_def (P Q : regular_expression α) : comp P Q = P * Q :=\n  rfl\n#align comp_def comp_def\n\n",
 "char_rmatch_iff":
 "theorem char_rmatch_iff (a : α) (x : list α) : rmatch (char a) x ↔ x = [a] :=\n  by\n  cases' x with _ x\n  decide\n  cases x\n  rw [rmatch, deriv]\n  split_ifs <;> tauto\n  rw [rmatch, deriv]\n  split_ifs\n  rw [one_rmatch_iff]\n  tauto\n  rw [zero_rmatch]\n  tauto\n#align char_rmatch_iff char_rmatch_iff\n\n",
 "add_rmatch_iff":
 "theorem add_rmatch_iff (P Q : regular_expression α) (x : list α) : (P + Q).rmatch x ↔ P.rmatch x ∨ Q.rmatch x :=\n  by\n  induction' x with _ _ ih generalizing P Q\n  · simp only [rmatch, match_epsilon, Bool.or_coe_iff]\n  · repeat' rw [rmatch]\n    rw [deriv]\n    exact ih _ _\n#align add_rmatch_iff add_rmatch_iff\n\n"}