{"uncurry_curry":
 "@[simp]\ntheorem uncurry_curry (f : α × β → φ) : uncurry (curry f) = f :=\n  funext fun ⟨a, b⟩ => rfl\n#align uncurry_curry uncurry_curry\n\n",
 "surjective_id":
 "theorem surjective_id : surjective (@id α) := fun a => ⟨a, rfl⟩\n#align surjective_id surjective_id\n\n",
 "surjective":
 "theorem has_right_inverse.surjective {f : α → β} : HasRightInverse f → surjective f\n  | ⟨finv, inv⟩ => inv.surjective\n#align has_right_inverse.surjective has_right_inverse.surjective\n\n",
 "right_inverse_of_injective_of_left_inverse":
 "theorem right_inverse_of_injective_of_left_inverse {f : α → β} {g : β → α} (injf : injective f)\n    (lfg : left_inverse f g) : right_inverse f g := fun x =>\n  have h : f (g (f x)) = f x := lfg (f x)\n  injf h\n#align right_inverse_of_injective_of_left_inverse right_inverse_of_injective_of_left_inverse\n\n",
 "right_id":
 "@[simp]\ntheorem comp.right_id (f : α → β) : f ∘ id = f :=\n  rfl\n#align comp.right_id comp.right_id\n\n",
 "left_inverse_of_surjective_of_right_inverse":
 "theorem left_inverse_of_surjective_of_right_inverse {f : α → β} {g : β → α} (surjf : surjective f)\n    (rfg : right_inverse f g) : left_inverse f g := fun y =>\n  exists.elim (surjf y) fun x hx =>\n    calc\n      f (g y) = f (g (f x)) := hx ▸ rfl\n      _ = f x := eq.symm (rfg x) ▸ rfl\n      _ = y := hx\n      \n#align left_inverse_of_surjective_of_right_inverse left_inverse_of_surjective_of_right_inverse\n\n",
 "left_id":
 "@[simp]\ntheorem comp.left_id (f : α → β) : id ∘ f = f :=\n  rfl\n#align comp.left_id comp.left_id\n\n",
 "injective_id":
 "theorem injective_id : injective (@id α) := fun a₁ a₂ h => h\n#align injective_id injective_id\n\n",
 "injective":
 "theorem has_left_inverse.injective {f : α → β} : HasLeftInverse f → injective f := fun h =>\n  exists.elim h fun finv inv => inv.injective\n#align has_left_inverse.injective has_left_inverse.injective\n\n",
 "id":
 "protected theorem right_inverse.id {g : β → α} {f : α → β} (h : right_inverse g f) : f ∘ g = id :=\n  funext h\n#align right_inverse.id right_inverse.id\n\n",
 "curry_uncurry":
 "@[simp]\ntheorem curry_uncurry (f : α → β → φ) : curry (uncurry f) = f :=\n  rfl\n#align curry_uncurry curry_uncurry\n\n",
 "comp_const_right":
 "theorem comp_const_right (f : β → φ) (b : β) : f ∘ const α b = const α (f b) :=\n  rfl\n#align comp_const_right comp_const_right\n\n",
 "comp_app":
 "@[simp]\ntheorem comp_app (f : β → φ) (g : α → β) (a : α) : (f ∘ g) a = f (g a) :=\n  rfl\n#align comp_app comp_app\n\n",
 "comp":
 "theorem bijective.comp {g : β → φ} {f : α → β} : bijective g → bijective f → bijective (g ∘ f)\n  | ⟨h_ginj, h_gsurj⟩, ⟨h_finj, h_fsurj⟩ => ⟨h_ginj.comp h_finj, h_gsurj.comp h_fsurj⟩\n#align bijective.comp bijective.comp\n\n",
 "bijective_id":
 "theorem bijective_id : bijective (@id α) :=\n  ⟨injective_id, surjective_id⟩\n#align bijective_id bijective_id\n\n",
 "assoc":
 "theorem comp.assoc (f : φ → δ) (g : β → φ) (h : α → β) : (f ∘ g) ∘ h = f ∘ g ∘ h :=\n  rfl\n#align comp.assoc comp.assoc\n\n"}