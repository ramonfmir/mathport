{"zero_nonneg":
 "protected theorem zero_nonneg : 0 ≤ (0 : ℤ) :=\n  le_refl 0\n#align zero_nonneg zero_nonneg\n\n",
 "zero_ne_neg_of_ne":
 "protected theorem zero_ne_neg_of_ne {a : ℤ} (h : 0 ≠ a) : 0 ≠ -a :=\n  ne.symm (int.neg_ne_zero_of_ne (ne.symm h))\n#align zero_ne_neg_of_ne zero_ne_neg_of_ne\n\n",
 "zero_le_of_nat":
 "theorem zero_le_of_nat (n : ℕ) : 0 ≤ of_nat n :=\n  @le.intro _ _ n (by rw [int.zero_add, int.coe_nat_eq])\n#align zero_le_of_nat zero_le_of_nat\n\n",
 "one_pos":
 "#print one_pos /-\nprotected theorem one_pos : 0 < (1 : int) :=\n  int.zero_lt_one\n#align one_pos one_pos\n-/\n\n",
 "one_nonneg":
 "protected theorem one_nonneg : 0 ≤ (1 : ℤ) :=\n  le_of_lt int.zero_lt_one\n#align one_nonneg one_nonneg\n\n",
 "of_nat_nat_abs_eq_of_nonneg":
 "theorem of_nat_nat_abs_eq_of_nonneg : ∀ {a : ℤ}, 0 ≤ a → of_nat (natAbs a) = a\n  | of_nat n, h => rfl\n  | neg_succ_of_nat n, h => absurd (neg_succ_of_nat_lt_zero n) (not_lt_of_ge h)\n#align of_nat_nat_abs_eq_of_nonneg of_nat_nat_abs_eq_of_nonneg\n\n",
 "nonneg_of_pos":
 "protected theorem nonneg_of_pos {a : ℤ} : 0 < a → 0 ≤ a :=\n  le_of_lt\n#align nonneg_of_pos nonneg_of_pos\n\n",
 "neg_succ_of_nat_lt_zero":
 "theorem neg_succ_of_nat_lt_zero (n : ℕ) : negSucc n < 0 :=\n  @lt.intro _ _ n\n    (by\n      simp [neg_succ_of_nat_coe, Int.ofNat_succ, Int.ofNat_add, Int.ofNat_one, int.add_comm, int.add_left_comm,\n        int.neg_add, int.add_right_neg, int.zero_add])\n#align neg_succ_of_nat_lt_zero neg_succ_of_nat_lt_zero\n\n",
 "neg_ne_zero_of_ne":
 "protected theorem neg_ne_zero_of_ne {a : ℤ} : a ≠ 0 → -a ≠ 0 := fun h₁ h₂ =>\n  by\n  have : -a = -0 := by rwa [int.neg_zero]\n  have : a = 0 := Int.neg_eq_neg this\n  contradiction\n#align neg_ne_zero_of_ne neg_ne_zero_of_ne\n\n",
 "neg_ne_of_pos":
 "protected theorem neg_ne_of_pos {a b : ℤ} : 0 < a → 0 < b → -a ≠ b := fun h₁ h₂ h =>\n  by\n  rw [← h] at h₂\n  change 0 < a at h₁\n  have := le_of_lt h₁\n  exact absurd (le_of_lt h₁) (not_le_of_gt (int.neg_of_neg_pos h₂))\n#align neg_ne_of_pos neg_ne_of_pos\n\n",
 "ne_of_nat_ne_nonneg_case":
 "protected theorem ne_of_nat_ne_nonneg_case {a b : ℤ} {n m : nat} (ha : 0 ≤ a) (hb : 0 ≤ b) (e1 : natAbs a = n)\n    (e2 : natAbs b = m) (h : n ≠ m) : a ≠ b :=\n  have : natAbs a ≠ natAbs b := by rwa [e1, e2]\n  ne_of_nat_abs_ne_nat_abs_of_nonneg ha hb this\n#align ne_of_nat_ne_nonneg_case ne_of_nat_ne_nonneg_case\n\n",
 "ne_of_nat_abs_ne_nat_abs_of_nonneg":
 "theorem ne_of_nat_abs_ne_nat_abs_of_nonneg {a b : ℤ} (ha : 0 ≤ a) (hb : 0 ≤ b) (h : natAbs a ≠ natAbs b) : a ≠ b :=\n  fun h =>\n  by\n  have : of_nat (natAbs a) = of_nat (natAbs b) := by\n    rwa [of_nat_nat_abs_eq_of_nonneg ha, of_nat_nat_abs_eq_of_nonneg hb]\n  injection this\n  contradiction\n#align ne_of_nat_abs_ne_nat_abs_of_nonneg ne_of_nat_abs_ne_nat_abs_of_nonneg\n\n",
 "ne_neg_of_pos":
 "protected theorem ne_neg_of_pos {a b : ℤ} : 0 < a → 0 < b → a ≠ -b := fun h₁ h₂ => ne.symm (int.neg_ne_of_pos h₂ h₁)\n#align ne_neg_of_pos ne_neg_of_pos\n\n",
 "ne_neg_of_ne":
 "/-\nCopyright (c) 2016 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura\n-/\nprotected theorem ne_neg_of_ne {a b : ℤ} : a ≠ b → -a ≠ -b := fun h₁ h₂ => absurd (Int.neg_eq_neg h₂) h₁\n#align ne_neg_of_ne ne_neg_of_ne\n\n",
 "nat_abs_of_neg_succ_of_nat":
 "theorem nat_abs_of_neg_succ_of_nat (n : ℕ) : natAbs (negSucc n) = nat.succ n :=\n  rfl\n#align nat_abs_of_neg_succ_of_nat nat_abs_of_neg_succ_of_nat\n\n",
 "nat_abs_of_nat_core":
 "theorem nat_abs_of_nat_core (n : ℕ) : natAbs (of_nat n) = n :=\n  rfl\n#align nat_abs_of_nat_core nat_abs_of_nat_core\n\n",
 "nat_abs_bit1_nonneg_step":
 "protected theorem nat_abs_bit1_nonneg_step {a : int} {n : nat} (h₁ : 0 ≤ a) (h₂ : natAbs a = n) :\n    natAbs (bit1 a) = bit1 n := by rw [← h₂]; apply int.nat_abs_bit1_nonneg h₁\n#align nat_abs_bit1_nonneg_step nat_abs_bit1_nonneg_step\n\n",
 "nat_abs_bit1_nonneg":
 "protected theorem nat_abs_bit1_nonneg {a : int} (h : 0 ≤ a) : natAbs (bit1 a) = bit1 (natAbs a) :=\n  show natAbs (bit0 a + 1) = bit0 (natAbs a) + natAbs 1 by\n    rw [int.nat_abs_add_nonneg (int.bit0_nonneg h) (le_of_lt int.zero_lt_one), int.nat_abs_bit0]\n#align nat_abs_bit1_nonneg nat_abs_bit1_nonneg\n\n",
 "nat_abs_bit0_step":
 "protected theorem nat_abs_bit0_step {a : int} {n : nat} (h : natAbs a = n) : natAbs (bit0 a) = bit0 n := by rw [← h];\n  apply int.nat_abs_bit0\n#align nat_abs_bit0_step nat_abs_bit0_step\n\n",
 "nat_abs_bit0":
 "protected theorem nat_abs_bit0 : ∀ a : int, natAbs (bit0 a) = bit0 (natAbs a)\n  | of_nat n => int.nat_abs_add_nonneg (zero_le_of_nat n) (zero_le_of_nat n)\n  | neg_succ_of_nat n => int.nat_abs_add_neg (neg_succ_of_nat_lt_zero n) (neg_succ_of_nat_lt_zero n)\n#align nat_abs_bit0 nat_abs_bit0\n\n",
 "nat_abs_add_nonneg":
 "protected theorem nat_abs_add_nonneg : ∀ {a b : int}, 0 ≤ a → 0 ≤ b → natAbs (a + b) = natAbs a + natAbs b\n  | of_nat n, of_nat m, h₁, h₂ => by\n    have : of_nat n + of_nat m = of_nat (n + m) := rfl\n    simp [nat_abs_of_nat_core, this]\n  | _, neg_succ_of_nat m, h₁, h₂ => absurd (neg_succ_of_nat_lt_zero m) (not_lt_of_ge h₂)\n  | neg_succ_of_nat n, _, h₁, h₂ => absurd (neg_succ_of_nat_lt_zero n) (not_lt_of_ge h₁)\n#align nat_abs_add_nonneg nat_abs_add_nonneg\n\n",
 "nat_abs_add_neg":
 "protected theorem nat_abs_add_neg : ∀ {a b : int}, a < 0 → b < 0 → natAbs (a + b) = natAbs a + natAbs b\n  | neg_succ_of_nat n, neg_succ_of_nat m, h₁, h₂ =>\n    by\n    have : -[n+1] + -[m+1] = -[nat.succ (n + m)+1] := rfl\n    simp [nat_abs_of_neg_succ_of_nat, this, nat.succ_add, nat.add_succ]\n#align nat_abs_add_neg nat_abs_add_neg\n\n",
 "bit1_pos":
 "#print bit1_pos /-\nprotected theorem bit1_pos {a : ℤ} : 0 ≤ a → 0 < bit1 a := fun h =>\n  int.lt_add_of_le_of_pos (int.add_nonneg h h) int.zero_lt_one\n#align bit1_pos bit1_pos\n-/\n\n",
 "bit1_nonneg":
 "protected theorem bit1_nonneg {a : ℤ} : 0 ≤ a → 0 ≤ bit1 a := fun h => le_of_lt (int.bit1_pos h)\n#align bit1_nonneg bit1_nonneg\n\n",
 "bit0_pos":
 "#print bit0_pos /-\nprotected theorem bit0_pos {a : ℤ} : 0 < a → 0 < bit0 a := fun h => int.add_pos h h\n#align bit0_pos bit0_pos\n-/\n\n",
 "bit0_nonneg":
 "protected theorem bit0_nonneg {a : ℤ} : 0 ≤ a → 0 ≤ bit0 a := fun h => int.add_nonneg h h\n#align bit0_nonneg bit0_nonneg\n\n"}