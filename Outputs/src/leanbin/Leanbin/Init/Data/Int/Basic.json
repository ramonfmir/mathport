{"zero_ne_one":
 "#print zero_ne_one /-\nprotected theorem zero_ne_one : (0 : int) ≠ 1 := fun h : 0 = 1 => succ_ne_zero _ (int.of_nat.inj h).symm\n#align zero_ne_one zero_ne_one\n-/\n\n",
 "zero_mul":
 "#print MulZeroClass.zero_mul /-\nprotected theorem MulZeroClass.zero_mul (a : ℤ) : 0 * a = 0 :=\n  int.mul_comm a 0 ▸ int.mul_zero a\n#align zero_mul MulZeroClass.zero_mul\n-/\n\n",
 "zero_add":
 "#print zero_add /-\nprotected theorem zero_add (a : ℤ) : 0 + a = a :=\n  int.add_comm a 0 ▸ int.add_zero a\n#align zero_add zero_add\n-/\n\n",
 "to_nat_sub":
 "theorem to_nat_sub (m n : ℕ) : to_nat (m - n) = m - n := by\n  rw [← Int.subNatNat_eq_coe] <;>\n    exact\n      sub_nat_nat_elim m n (fun m n i => toNat i = m - n) (fun i n => by rw [nat.add_sub_cancel_left] <;> rfl)\n        fun i n => by rw [nat.add_assoc, nat.sub_eq_zero_of_le (nat.le_add_right _ _)] <;> rfl\n#align to_nat_sub to_nat_sub\n\n",
 "sub_nat_self":
 "theorem sub_nat_self : ∀ n, sub_nat_nat n n = 0\n  | 0 => rfl\n  | succ m => by rw [sub_nat_nat_of_sub_eq_zero, nat.sub_self, of_nat_zero]; rw [nat.sub_self]\n#align sub_nat_self sub_nat_self\n\n",
 "sub_nat_nat_sub":
 "theorem sub_nat_nat_sub {m n : ℕ} (h : n ≤ m) (k : ℕ) : sub_nat_nat (m - n) k = sub_nat_nat m (k + n) :=\n  calc\n    sub_nat_nat (m - n) k = sub_nat_nat (m - n + n) (k + n) := by rw [sub_nat_nat_add_add]\n    _ = sub_nat_nat m (k + n) := by rw [nat.sub_add_cancel h]\n    \n#align sub_nat_nat_sub sub_nat_nat_sub\n\n",
 "sub_nat_nat_of_sub_eq_zero":
 "-- m ≥ n\n-- m < n, and n - m = succ k\ntheorem sub_nat_nat_of_sub_eq_zero {m n : ℕ} (h : n - m = 0) : sub_nat_nat m n = of_nat (m - n) := by\n  unfold sub_nat_nat; rw [h]; unfold sub_nat_nat._match_1\n#align sub_nat_nat_of_sub_eq_zero sub_nat_nat_of_sub_eq_zero\n\n",
 "sub_nat_nat_of_sub_eq_succ":
 "theorem sub_nat_nat_of_sub_eq_succ {m n k : ℕ} (h : n - m = succ k) : sub_nat_nat m n = -[k+1] := by unfold sub_nat_nat;\n  rw [h]; unfold sub_nat_nat._match_1\n#align sub_nat_nat_of_sub_eq_succ sub_nat_nat_of_sub_eq_succ\n\n",
 "sub_nat_nat_of_lt":
 "theorem sub_nat_nat_of_lt {m n : ℕ} (h : m < n) : sub_nat_nat m n = -[pred (n - m)+1] :=\n  by\n  have : n - m = succ (pred (n - m)) := Eq.symm (succ_pred_eq_of_pos (nat.sub_pos_of_lt h))\n  rw [sub_nat_nat_of_sub_eq_succ this]\n#align sub_nat_nat_of_lt sub_nat_nat_of_lt\n\n",
 "sub_nat_nat_of_le":
 "theorem sub_nat_nat_of_le {m n : ℕ} (h : n ≤ m) : sub_nat_nat m n = of_nat (m - n) :=\n  subNatNat_of_sub_eq_zero (nat.sub_eq_zero_of_le h)\n#align sub_nat_nat_of_le sub_nat_nat_of_le\n\n",
 "sub_nat_nat_eq_coe":
 "protected theorem sub_nat_nat_eq_coe {m n : ℕ} : sub_nat_nat m n = ↑m - ↑n :=\n  subNatNat_elim m n (fun m n i => i = ↑m - ↑n)\n    (fun i n => by\n      simp [Int.ofNat_add, int.add_left_comm, int.add_assoc, int.add_right_neg]\n      rfl)\n    fun i n => by\n    rw [Int.ofNat_add, Int.ofNat_add, Int.ofNat_one, Int.negSucc_eq, int.sub_eq_add_neg, int.neg_add, int.neg_add,\n      int.neg_add, ← int.add_assoc, ← int.add_assoc, int.add_right_neg, int.zero_add]\n#align sub_nat_nat_eq_coe sub_nat_nat_eq_coe\n\n",
 "sub_nat_nat_elim":
 "theorem sub_nat_nat_elim (m n : ℕ) (P : ℕ → ℕ → ℤ → Prop) (hp : ∀ i n, P (n + i) n (of_nat i))\n    (hn : ∀ i m, P m (m + i + 1) -[i+1]) : P m n (sub_nat_nat m n) :=\n  by\n  have H : ∀ k, n - m = k → P m n (nat.cases_on k (of_nat (m - n)) fun a => -[a+1]) :=\n    by\n    intro k\n    cases k\n    · intro e\n      cases' nat.le.dest (nat.le_of_sub_eq_zero e) with k h\n      rw [h.symm, nat.add_sub_cancel_left]\n      apply hp\n    · intro heq\n      have h : m ≤ n := nat.le_of_lt (nat.lt_of_sub_eq_succ HEq)\n      rw [nat.sub_eq_iff_eq_add h] at heq\n      rw [HEq, nat.add_comm]\n      apply hn\n  delta sub_nat_nat\n  exact H _ rfl\n#align sub_nat_nat_elim sub_nat_nat_elim\n\n",
 "sub_nat_nat_add_right":
 "theorem sub_nat_nat_add_right {m n : ℕ} : sub_nat_nat m (m + n + 1) = negSucc n :=\n  calc\n    sub_nat_nat._match_1 m (m + n + 1) (m + n + 1 - m) = sub_nat_nat._match_1 m (m + n + 1) (m + (n + 1) - m) := by\n      rw [nat.add_assoc]\n    _ = sub_nat_nat._match_1 m (m + n + 1) (n + 1) := by rw [nat.add_sub_cancel_left]\n    _ = negSucc n := rfl\n    \n#align sub_nat_nat_add_right sub_nat_nat_add_right\n\n",
 "sub_nat_nat_add_neg_succ_of_nat":
 "theorem sub_nat_nat_add_neg_succ_of_nat (m n k : ℕ) : sub_nat_nat m n + -[k+1] = sub_nat_nat m (n + succ k) :=\n  by\n  have h := le_or_lt n m\n  cases' h with h' h'\n  · rw [sub_nat_nat_of_le h']\n    simp\n    rw [sub_nat_nat_sub h', nat.add_comm]\n  have h₂ : m < n + succ k := nat.lt_of_lt_of_le h' (nat.le_add_right _ _)\n  have h₃ : m ≤ n + k := le_of_succ_le_succ h₂\n  rw [sub_nat_nat_of_lt h', sub_nat_nat_of_lt h₂]\n  simp [nat.add_comm]\n  rw [← add_succ, succ_pred_eq_of_pos (nat.sub_pos_of_lt h'), add_succ, succ_sub h₃, pred_succ]\n  rw [nat.add_comm n, nat.add_sub_assoc (le_of_lt h')]\n#align sub_nat_nat_add_neg_succ_of_nat sub_nat_nat_add_neg_succ_of_nat\n\n",
 "sub_nat_nat_add_left":
 "theorem sub_nat_nat_add_left {m n : ℕ} : sub_nat_nat (m + n) m = of_nat n :=\n  by\n  dsimp only [sub_nat_nat]\n  rw [nat.sub_eq_zero_of_le]\n  dsimp only [sub_nat_nat._match_1]\n  rw [nat.add_sub_cancel_left]\n  apply nat.le_add_right\n#align sub_nat_nat_add_left sub_nat_nat_add_left\n\n",
 "sub_nat_nat_add_add":
 "theorem sub_nat_nat_add_add (m n k : ℕ) : sub_nat_nat (m + k) (n + k) = sub_nat_nat m n :=\n  subNatNat_elim m n (fun m n i => sub_nat_nat (m + k) (n + k) = i)\n    (fun i n => by\n      have : n + i + k = n + k + i := by simp [nat.add_comm, nat.add_left_comm]\n      rw [this]\n      exact sub_nat_nat_add_left)\n    fun i m => by\n    have : m + i + 1 + k = m + k + i + 1 := by simp [nat.add_comm, nat.add_left_comm]\n    rw [this]\n    exact sub_nat_nat_add_right\n#align sub_nat_nat_add_add sub_nat_nat_add_add\n\n",
 "sub_nat_nat_add":
 "theorem sub_nat_nat_add (m n k : ℕ) : sub_nat_nat (m + n) k = of_nat m + sub_nat_nat n k :=\n  by\n  have h := le_or_lt k n\n  cases' h with h' h'\n  · rw [sub_nat_nat_of_le h']\n    have h₂ : k ≤ m + n := le_trans h' (nat.le_add_left _ _)\n    rw [sub_nat_nat_of_le h₂]\n    simp\n    rw [nat.add_sub_assoc h']\n  rw [sub_nat_nat_of_lt h']; simp; rw [succ_pred_eq_of_pos (nat.sub_pos_of_lt h')]\n  trans; rw [← nat.sub_add_cancel (le_of_lt h')]\n  apply sub_nat_nat_add_add\n#align sub_nat_nat_add sub_nat_nat_add\n\n",
 "sub_eq_add_neg":
 "#print sub_eq_add_neg /-\nprotected theorem sub_eq_add_neg {a b : ℤ} : a - b = a + -b :=\n  rfl\n#align sub_eq_add_neg sub_eq_add_neg\n-/\n\n",
 "sign_zero":
 "#print sign_zero /-\n@[simp]\ntheorem sign_zero : sign 0 = 0 :=\n  rfl\n#align sign_zero sign_zero\n-/\n\n",
 "sign_one":
 "#print sign_one /-\n@[simp]\ntheorem sign_one : sign 1 = 1 :=\n  rfl\n#align sign_one sign_one\n-/\n\n",
 "sign_neg_one":
 "@[simp]\ntheorem sign_neg_one : sign (-1) = -1 :=\n  rfl\n#align sign_neg_one sign_neg_one\n\n",
 "sign_mul_nat_abs":
 "theorem sign_mul_nat_abs : ∀ a : ℤ, sign a * natAbs a = a\n  | (n + 1 : ℕ) => int.one_mul _\n  | 0 => rfl\n  | -[n+1] => (int.neg_eq_neg_one_mul _).symm\n#align sign_mul_nat_abs sign_mul_nat_abs\n\n",
 "one_mul":
 "#print one_mul /-\n-- Since mod x y is always nonnegative when y ≠ 0, we can make a nat version of it\nprotected theorem one_mul : ∀ a : ℤ, (1 : ℤ) * a = a\n  | of_nat n => show of_nat (1 * n) = of_nat n by rw [nat.one_mul]\n  | -[n+1] => show -[1 * n+1] = -[n+1] by rw [nat.one_mul]\n#align one_mul one_mul\n-/\n\n",
 "of_nat_zero":
 "theorem of_nat_zero : of_nat (0 : Nat) = (0 : int) :=\n  rfl\n#align of_nat_zero of_nat_zero\n\n",
 "of_nat_succ":
 "theorem of_nat_succ (n : ℕ) : of_nat (succ n) = of_nat n + 1 :=\n  rfl\n#align of_nat_succ of_nat_succ\n\n",
 "of_nat_sub":
 "theorem of_nat_sub {n m : ℕ} (h : m ≤ n) : of_nat (n - m) = of_nat n - of_nat m :=\n  show of_nat (n - m) = of_nat n + neg_of_nat m from\n    match m, h with\n    | 0, h => rfl\n    | succ m, h =>\n      show of_nat (n - succ m) = sub_nat_nat n (succ m) by delta sub_nat_nat <;> rw [nat.sub_eq_zero_of_le h] <;> rfl\n#align of_nat_sub of_nat_sub\n\n",
 "of_nat_one":
 "theorem of_nat_one : of_nat (1 : Nat) = (1 : int) :=\n  rfl\n#align of_nat_one of_nat_one\n\n",
 "of_nat_mul_sub_nat_nat":
 "theorem of_nat_mul_sub_nat_nat (m n k : ℕ) : of_nat m * sub_nat_nat n k = sub_nat_nat (m * n) (m * k) :=\n  by\n  have h₀ : m > 0 ∨ 0 = m := decidable.lt_or_eq_of_le m.zero_le\n  cases' h₀ with h₀ h₀\n  · have h := nat.lt_or_ge n k\n    cases' h with h h\n    · have h' : m * n < m * k := nat.mul_lt_mul_of_pos_left h h₀\n      rw [sub_nat_nat_of_lt h, sub_nat_nat_of_lt h']\n      simp\n      rw [succ_pred_eq_of_pos (nat.sub_pos_of_lt h)]\n      rw [← neg_of_nat_of_succ, nat.mul_sub_left_distrib]\n      rw [← succ_pred_eq_of_pos (nat.sub_pos_of_lt h')]\n      rfl\n    have h' : m * k ≤ m * n := nat.mul_le_mul_left _ h\n    rw [sub_nat_nat_of_le h, sub_nat_nat_of_le h']\n    simp\n    rw [nat.mul_sub_left_distrib]\n  have h₂ : of_nat 0 = 0 := rfl\n  subst h₀\n  simp [h₂, int.zero_mul, nat.zero_mul]\n#align of_nat_mul_sub_nat_nat of_nat_mul_sub_nat_nat\n\n",
 "of_nat_mul_of_nat":
 "theorem of_nat_mul_of_nat (m n : Nat) : of_nat m * of_nat n = of_nat (m * n) :=\n  rfl\n#align of_nat_mul_of_nat of_nat_mul_of_nat\n\n",
 "of_nat_mul_neg_succ_of_nat":
 "theorem of_nat_mul_neg_succ_of_nat (m n : Nat) : of_nat m * -[n+1] = neg_of_nat (m * succ n) :=\n  rfl\n#align of_nat_mul_neg_succ_of_nat of_nat_mul_neg_succ_of_nat\n\n",
 "of_nat_mul_neg_of_nat":
 "theorem of_nat_mul_neg_of_nat (m : ℕ) : ∀ n, of_nat m * neg_of_nat n = neg_of_nat (m * n)\n  | 0 => rfl\n  | succ n => by unfold neg_of_nat; simp\n#align of_nat_mul_neg_of_nat of_nat_mul_neg_of_nat\n\n",
 "of_nat_mul":
 "theorem of_nat_mul (n m : ℕ) : of_nat (n * m) = of_nat n * of_nat m :=\n  rfl\n#align of_nat_mul of_nat_mul\n\n",
 "of_nat_eq_of_nat_iff":
 "theorem of_nat_eq_of_nat_iff (m n : ℕ) : of_nat m = of_nat n ↔ m = n :=\n  iff.intro int.of_nat.inj (congr_arg _)\n#align of_nat_eq_of_nat_iff of_nat_eq_of_nat_iff\n\n",
 "of_nat_eq_coe":
 "theorem of_nat_eq_coe (n : ℕ) : of_nat n = ↑n :=\n  rfl\n#align of_nat_eq_coe of_nat_eq_coe\n\n",
 "of_nat_add_of_nat":
 "theorem of_nat_add_of_nat (m n : Nat) : of_nat m + of_nat n = of_nat (m + n) :=\n  rfl\n#align of_nat_add_of_nat of_nat_add_of_nat\n\n",
 "of_nat_add_neg_succ_of_nat":
 "theorem of_nat_add_neg_succ_of_nat (m n : Nat) : of_nat m + -[n+1] = sub_nat_nat m (succ n) :=\n  rfl\n#align of_nat_add_neg_succ_of_nat of_nat_add_neg_succ_of_nat\n\n",
 "of_nat_add":
 "theorem of_nat_add (n m : ℕ) : of_nat (n + m) = of_nat n + of_nat m :=\n  rfl\n#align of_nat_add of_nat_add\n\n",
 "neg_zero":
 "#print neg_zero /-\n-- defeq to algebra.sub which gives subtraction for arbitrary `add_group`s\nprotected theorem neg_zero : -(0 : ℤ) = 0 :=\n  rfl\n#align neg_zero neg_zero\n-/\n\n",
 "neg_succ_of_nat_of_nat":
 "theorem neg_succ_of_nat_of_nat (m n : Nat) : -[m+1] * of_nat n = neg_of_nat (succ m * n) :=\n  rfl\n#align neg_succ_of_nat_of_nat neg_succ_of_nat_of_nat\n\n",
 "neg_succ_of_nat_mul_sub_nat_nat":
 "theorem neg_succ_of_nat_mul_sub_nat_nat (m n k : ℕ) :\n    -[m+1] * sub_nat_nat n k = sub_nat_nat (succ m * k) (succ m * n) :=\n  by\n  have h := nat.lt_or_ge n k\n  cases' h with h h\n  · have h' : succ m * n < succ m * k := nat.mul_lt_mul_of_pos_left h (nat.succ_pos m)\n    rw [sub_nat_nat_of_lt h, sub_nat_nat_of_le (le_of_lt h')]\n    simp [succ_pred_eq_of_pos (nat.sub_pos_of_lt h), nat.mul_sub_left_distrib]\n  have h' : n > k ∨ k = n := decidable.lt_or_eq_of_le h\n  cases' h' with h' h'\n  · have h₁ : succ m * n > succ m * k := nat.mul_lt_mul_of_pos_left h' (nat.succ_pos m)\n    rw [sub_nat_nat_of_le h, sub_nat_nat_of_lt h₁]\n    simp [nat.mul_sub_left_distrib, nat.mul_comm]\n    rw [nat.mul_comm k, nat.mul_comm n, ← succ_pred_eq_of_pos (nat.sub_pos_of_lt h₁), ← neg_of_nat_of_succ]\n    rfl\n  subst h'\n  simp\n  rfl\n#align neg_succ_of_nat_mul_sub_nat_nat neg_succ_of_nat_mul_sub_nat_nat\n\n",
 "neg_succ_of_nat_mul_neg_of_nat":
 "theorem neg_succ_of_nat_mul_neg_of_nat (m : ℕ) : ∀ n, -[m+1] * neg_of_nat n = of_nat (succ m * n)\n  | 0 => rfl\n  | succ n => by unfold neg_of_nat; simp\n#align neg_succ_of_nat_mul_neg_of_nat neg_succ_of_nat_mul_neg_of_nat\n\n",
 "neg_succ_of_nat_inj_iff":
 "theorem neg_succ_of_nat_inj_iff {m n : ℕ} : negSucc m = negSucc n ↔ m = n :=\n  ⟨neg_succ_of_nat.inj, fun H => by simp [H]⟩\n#align neg_succ_of_nat_inj_iff neg_succ_of_nat_inj_iff\n\n",
 "neg_succ_of_nat_eq":
 "theorem neg_succ_of_nat_eq (n : ℕ) : -[n+1] = -(n + 1) :=\n  rfl\n#align neg_succ_of_nat_eq neg_succ_of_nat_eq\n\n",
 "neg_succ_of_nat_coe'":
 "theorem neg_succ_of_nat_coe' (n : ℕ) : -[n+1] = -↑n - 1 := by rw [int.sub_eq_add_neg, ← int.neg_add] <;> rfl\n#align neg_succ_of_nat_coe' neg_succ_of_nat_coe'\n\n",
 "neg_succ_of_nat_coe":
 "theorem neg_succ_of_nat_coe (n : ℕ) : -[n+1] = -↑(n + 1) :=\n  rfl\n#align neg_succ_of_nat_coe neg_succ_of_nat_coe\n\n",
 "neg_succ_of_nat_add_of_nat":
 "theorem neg_succ_of_nat_add_of_nat (m n : Nat) : -[m+1] + of_nat n = sub_nat_nat n (succ m) :=\n  rfl\n#align neg_succ_of_nat_add_of_nat neg_succ_of_nat_add_of_nat\n\n",
 "neg_succ_of_nat_add_neg_succ_of_nat":
 "theorem neg_succ_of_nat_add_neg_succ_of_nat (m n : Nat) : -[m+1] + -[n+1] = -[succ (m + n)+1] :=\n  rfl\n#align neg_succ_of_nat_add_neg_succ_of_nat neg_succ_of_nat_add_neg_succ_of_nat\n\n",
 "neg_of_nat_zero":
 "theorem neg_of_nat_zero : -of_nat 0 = 0 :=\n  rfl\n#align neg_of_nat_zero neg_of_nat_zero\n\n",
 "neg_of_nat_of_succ":
 "theorem neg_of_nat_of_succ (n : ℕ) : -of_nat (succ n) = -[n+1] :=\n  rfl\n#align neg_of_nat_of_succ neg_of_nat_of_succ\n\n",
 "neg_of_nat_mul_of_nat":
 "theorem neg_of_nat_mul_of_nat (m n : ℕ) : neg_of_nat m * of_nat n = neg_of_nat (m * n) := by rw [int.mul_comm];\n  simp [of_nat_mul_neg_of_nat, nat.mul_comm]\n#align neg_of_nat_mul_of_nat neg_of_nat_mul_of_nat\n\n",
 "neg_of_nat_mul_neg_succ_of_nat":
 "theorem neg_of_nat_mul_neg_succ_of_nat (m n : ℕ) : neg_of_nat n * -[m+1] = of_nat (n * succ m) := by rw [int.mul_comm];\n  simp [neg_succ_of_nat_mul_neg_of_nat, nat.mul_comm]\n#align neg_of_nat_mul_neg_succ_of_nat neg_of_nat_mul_neg_succ_of_nat\n\n",
 "neg_of_nat_eq_sub_nat_nat_zero":
 "theorem neg_of_nat_eq_sub_nat_nat_zero : ∀ n, neg_of_nat n = sub_nat_nat 0 n\n  | 0 => rfl\n  | succ n => rfl\n#align neg_of_nat_eq_sub_nat_nat_zero neg_of_nat_eq_sub_nat_nat_zero\n\n",
 "neg_of_nat_add":
 "theorem neg_of_nat_add (m n : ℕ) : neg_of_nat m + neg_of_nat n = neg_of_nat (m + n) :=\n  by\n  cases m\n  · cases n\n    · simp\n      rfl\n    simp [nat.zero_add]\n    rfl\n  cases n\n  · simp\n    rfl\n  simp [nat.succ_add]; rfl\n#align neg_of_nat_add neg_of_nat_add\n\n",
 "neg_neg_of_nat_succ":
 "theorem neg_neg_of_nat_succ (n : ℕ) : - -[n+1] = of_nat (succ n) :=\n  rfl\n#align neg_neg_of_nat_succ neg_neg_of_nat_succ\n\n",
 "neg_neg":
 "#print neg_neg /-\nprotected theorem neg_neg : ∀ a : ℤ, - -a = a\n  | of_nat 0 => rfl\n  | of_nat (n + 1) => rfl\n  | -[n+1] => rfl\n#align neg_neg neg_neg\n-/\n\n",
 "neg_inj":
 "#print neg_inj /-\nprotected theorem neg_inj {a b : ℤ} (h : -a = -b) : a = b := by rw [← int.neg_neg a, ← int.neg_neg b, h]\n#align neg_inj neg_inj\n-/\n\n",
 "neg_eq_neg_one_mul":
 "#print neg_eq_neg_one_mul /-\nprotected theorem neg_eq_neg_one_mul : ∀ a : ℤ, -a = -1 * a\n  | of_nat 0 => rfl\n  | of_nat (n + 1) =>\n    show _ = -[1 * n + 0+1] by\n      rw [nat.one_mul]\n      rfl\n  | -[n+1] =>\n    show _ = of_nat _ by\n      rw [nat.one_mul]\n      rfl\n#align neg_eq_neg_one_mul neg_eq_neg_one_mul\n-/\n\n",
 "neg_add":
 "#print neg_add /-\nprotected theorem neg_add {a b : ℤ} : -(a + b) = -a + -b :=\n  calc\n    -(a + b) = -(a + b) + (a + b) + -a + -b :=\n      by\n      rw [int.add_assoc, int.add_comm (-a), int.add_assoc, int.add_assoc, ← int.add_assoc b]\n      rw [int.add_right_neg, int.zero_add, int.add_right_neg, int.add_zero]\n    _ = -a + -b := by rw [int.add_left_neg, int.zero_add]\n    \n#align neg_add neg_add\n-/\n\n",
 "nat_abs_zero":
 "theorem nat_abs_zero : natAbs (0 : int) = (0 : Nat) :=\n  rfl\n#align nat_abs_zero nat_abs_zero\n\n",
 "nat_abs_pos_of_ne_zero":
 "theorem nat_abs_pos_of_ne_zero {a : ℤ} (h : a ≠ 0) : 0 < natAbs a :=\n  (nat.eq_zero_or_pos _).resolve_left <| mt eq_zero_of_natAbs_eq_zero h\n#align nat_abs_pos_of_ne_zero nat_abs_pos_of_ne_zero\n\n",
 "nat_abs_one":
 "theorem nat_abs_one : natAbs (1 : int) = (1 : Nat) :=\n  rfl\n#align nat_abs_one nat_abs_one\n\n",
 "nat_abs_of_nat":
 "theorem nat_abs_of_nat (n : ℕ) : natAbs ↑n = n :=\n  rfl\n#align nat_abs_of_nat nat_abs_of_nat\n\n",
 "nat_abs_neg":
 "@[simp]\ntheorem nat_abs_neg (a : ℤ) : natAbs (-a) = natAbs a :=\n  by\n  cases' a with n n\n  cases n <;> rfl\n  rfl\n#align nat_abs_neg nat_abs_neg\n\n",
 "nat_abs_mul_self":
 "theorem nat_abs_mul_self : ∀ {a : ℤ}, ↑(natAbs a * natAbs a) = a * a\n  | of_nat m => rfl\n  | -[m'+1] => rfl\n#align nat_abs_mul_self nat_abs_mul_self\n\n",
 "nat_abs_eq":
 "theorem nat_abs_eq : ∀ a : ℤ, a = natAbs a ∨ a = -natAbs a\n  | of_nat m => or.inl rfl\n  | -[m'+1] => or.inr rfl\n#align nat_abs_eq nat_abs_eq\n\n",
 "mul_zero":
 "#print MulZeroClass.mul_zero /-\nprotected theorem MulZeroClass.mul_zero : ∀ a : ℤ, a * 0 = 0\n  | of_nat m => rfl\n  | -[m+1] => rfl\n#align mul_zero MulZeroClass.mul_zero\n-/\n\n",
 "mul_one":
 "#print mul_one /-\nprotected theorem mul_one (a : ℤ) : a * 1 = a := by rw [int.mul_comm, int.one_mul]\n#align mul_one mul_one\n-/\n\n",
 "mul_neg_succ_of_nat_neg_succ_of_nat":
 "theorem mul_neg_succ_of_nat_neg_succ_of_nat (m n : Nat) : -[m+1] * -[n+1] = of_nat (succ m * succ n) :=\n  rfl\n#align mul_neg_succ_of_nat_neg_succ_of_nat mul_neg_succ_of_nat_neg_succ_of_nat\n\n",
 "mul_comm":
 "#print mul_comm /-\nprotected theorem mul_comm : ∀ a b : ℤ, a * b = b * a\n  | of_nat m, of_nat n => by simp [nat.mul_comm]\n  | of_nat m, -[n+1] => by simp [nat.mul_comm]\n  | -[m+1], of_nat n => by simp [nat.mul_comm]\n  | -[m+1], -[n+1] => by simp [nat.mul_comm]\n#align mul_comm mul_comm\n-/\n\n",
 "mul_assoc":
 "#print mul_assoc /-\nprotected theorem mul_assoc : ∀ a b c : ℤ, a * b * c = a * (b * c)\n  | of_nat m, of_nat n, of_nat k => by simp [nat.mul_assoc]\n  | of_nat m, of_nat n, -[k+1] => by simp [nat.mul_assoc]\n  | of_nat m, -[n+1], of_nat k => by simp [nat.mul_assoc]\n  | of_nat m, -[n+1], -[k+1] => by simp [nat.mul_assoc]\n  | -[m+1], of_nat n, of_nat k => by simp [nat.mul_assoc]\n  | -[m+1], of_nat n, -[k+1] => by simp [nat.mul_assoc]\n  | -[m+1], -[n+1], of_nat k => by simp [nat.mul_assoc]\n  | -[m+1], -[n+1], -[k+1] => by simp [nat.mul_assoc]\n#align mul_assoc mul_assoc\n-/\n\n",
 "eq_zero_of_nat_abs_eq_zero":
 "theorem eq_zero_of_nat_abs_eq_zero : ∀ {a : ℤ}, natAbs a = 0 → a = 0\n  | of_nat m, H => congr_arg of_nat H\n  | -[m'+1], H => absurd H (succ_ne_zero _)\n#align eq_zero_of_nat_abs_eq_zero eq_zero_of_nat_abs_eq_zero\n\n",
 "eq_coe_or_neg":
 "theorem eq_coe_or_neg (a : ℤ) : ∃ n : ℕ, a = n ∨ a = -n :=\n  ⟨_, natAbs_eq a⟩\n#align eq_coe_or_neg eq_coe_or_neg\n\n",
 "distrib_right":
 "protected theorem distrib_right (a b c : ℤ) : (a + b) * c = a * c + b * c := by rw [int.mul_comm, Int.mul_add];\n  simp [int.mul_comm]\n#align distrib_right distrib_right\n\n",
 "distrib_left":
 "protected theorem distrib_left : ∀ a b c : ℤ, a * (b + c) = a * b + a * c\n  | of_nat m, of_nat n, of_nat k => by simp [nat.left_distrib]\n  | of_nat m, of_nat n, -[k+1] => by\n    simp [neg_of_nat_eq_sub_nat_nat_zero]\n    rw [← sub_nat_nat_add]; rfl\n  | of_nat m, -[n+1], of_nat k => by\n    simp [neg_of_nat_eq_sub_nat_nat_zero]\n    rw [int.add_comm, ← sub_nat_nat_add]; rfl\n  | of_nat m, -[n+1], -[k+1] => by simp; rw [← nat.left_distrib, add_succ, succ_add]\n  | -[m+1], of_nat n, of_nat k => by simp [nat.mul_comm]; rw [← nat.right_distrib, nat.mul_comm]\n  | -[m+1], of_nat n, -[k+1] => by\n    simp [neg_of_nat_eq_sub_nat_nat_zero]\n    rw [int.add_comm, ← sub_nat_nat_add]; rfl\n  | -[m+1], -[n+1], of_nat k => by\n    simp [neg_of_nat_eq_sub_nat_nat_zero]\n    rw [← sub_nat_nat_add]; rfl\n  | -[m+1], -[n+1], -[k+1] => by simp; rw [← nat.left_distrib, add_succ, succ_add]\n#align distrib_left distrib_left\n\n",
 "coe_nat_zero":
 "protected theorem coe_nat_zero : ↑(0 : ℕ) = (0 : ℤ) :=\n  rfl\n#align coe_nat_zero coe_nat_zero\n\n",
 "coe_nat_succ":
 "protected theorem coe_nat_succ (n : ℕ) : (↑(succ n) : ℤ) = ↑n + 1 :=\n  rfl\n#align coe_nat_succ coe_nat_succ\n\n",
 "coe_nat_sub":
 "protected theorem coe_nat_sub {n m : ℕ} : n ≤ m → (↑(m - n) : ℤ) = ↑m - ↑n :=\n  ofNat_sub\n#align coe_nat_sub coe_nat_sub\n\n",
 "coe_nat_one":
 "protected theorem coe_nat_one : ↑(1 : ℕ) = (1 : ℤ) :=\n  rfl\n#align coe_nat_one coe_nat_one\n\n",
 "coe_nat_mul_out":
 "protected theorem coe_nat_mul_out (m n : ℕ) : ↑m * ↑n = (↑(m * n) : ℤ) :=\n  rfl\n#align coe_nat_mul_out coe_nat_mul_out\n\n",
 "coe_nat_mul":
 "protected theorem coe_nat_mul (m n : ℕ) : (↑(m * n) : ℤ) = ↑m * ↑n :=\n  rfl\n#align coe_nat_mul coe_nat_mul\n\n",
 "coe_nat_inj":
 "protected theorem coe_nat_inj {m n : ℕ} (h : (↑m : ℤ) = ↑n) : m = n :=\n  int.of_nat.inj h\n#align coe_nat_inj coe_nat_inj\n\n",
 "coe_nat_eq_coe_nat_iff":
 "protected theorem coe_nat_eq_coe_nat_iff (m n : ℕ) : (↑m : ℤ) = ↑n ↔ m = n :=\n  ofNat_inj m n\n#align coe_nat_eq_coe_nat_iff coe_nat_eq_coe_nat_iff\n\n",
 "coe_nat_eq":
 "/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n-/\nprotected theorem coe_nat_eq (n : ℕ) : ↑n = int.of_nat n :=\n  rfl\n#align coe_nat_eq coe_nat_eq\n\n",
 "coe_nat_add_out":
 "protected theorem coe_nat_add_out (m n : ℕ) : ↑m + ↑n = (m + n : ℤ) :=\n  rfl\n#align coe_nat_add_out coe_nat_add_out\n\n",
 "coe_nat_add_one_out":
 "protected theorem coe_nat_add_one_out (n : ℕ) : ↑n + (1 : ℤ) = ↑(succ n) :=\n  rfl\n#align coe_nat_add_one_out coe_nat_add_one_out\n\n",
 "coe_nat_add":
 "protected theorem coe_nat_add (m n : ℕ) : (↑(m + n) : ℤ) = ↑m + ↑n :=\n  rfl\n#align coe_nat_add coe_nat_add\n\n",
 "add_zero":
 "#print add_zero /-\nprotected theorem add_zero : ∀ a : ℤ, a + 0 = a\n  | of_nat n => rfl\n  | -[n+1] => rfl\n#align add_zero add_zero\n-/\n\n",
 "add_right_neg":
 "#print add_right_neg /-\nprotected theorem add_right_neg (a : ℤ) : a + -a = 0 := by rw [int.add_comm, int.add_left_neg]\n#align add_right_neg add_right_neg\n-/\n\n",
 "add_left_neg":
 "#print add_left_neg /-\nprotected theorem add_left_neg : ∀ a : ℤ, -a + a = 0\n  | of_nat 0 => rfl\n  | of_nat (succ m) => by simp\n  | -[m+1] => by simp\n#align add_left_neg add_left_neg\n-/\n\n",
 "add_left_comm":
 "#print add_left_comm /-\nprotected theorem add_left_comm (a b c : ℤ) : a + (b + c) = b + (a + c) := by\n  rw [← int.add_assoc, int.add_comm a, int.add_assoc]\n#align add_left_comm add_left_comm\n-/\n\n",
 "add_left_cancel":
 "#print add_left_cancel /-\nprotected theorem add_left_cancel {a b c : ℤ} (h : a + b = a + c) : b = c :=\n  by\n  have : -a + (a + b) = -a + (a + c) := by rw [h]\n  rwa [← int.add_assoc, ← int.add_assoc, int.add_left_neg, int.zero_add, int.zero_add] at this\n#align add_left_cancel add_left_cancel\n-/\n\n",
 "add_comm":
 "#print add_comm /-\n-- There are three main conventions for integer division,\n-- referred here as the E, F, T rounding conventions.\n-- All three pairs satisfy the identity x % y + (x / y) * y = x\n-- unconditionally.\n-- E-rounding: This pair satisfies 0 ≤ mod x y < nat_abs y for y ≠ 0\n-- F-rounding: This pair satisfies fdiv x y = floor (x / y)\n-- T-rounding: This pair satisfies quot x y = round_to_zero (x / y)\n/-\n   int is a ring\n-/\nprotected theorem add_comm : ∀ a b : ℤ, a + b = b + a\n  | of_nat n, of_nat m => by simp [nat.add_comm]\n  | of_nat n, -[m+1] => rfl\n  | -[n+1], of_nat m => rfl\n  | -[n+1], -[m+1] => by simp [nat.add_comm]\n#align add_comm add_comm\n-/\n\n",
 "add_assoc_aux2":
 "theorem add_assoc_aux2 (m n k : ℕ) : -[m+1] + -[n+1] + of_nat k = -[m+1] + (-[n+1] + of_nat k) := by simp [add_succ];\n  rw [int.add_comm, sub_nat_nat_add_neg_succ_of_nat]; simp [add_succ, succ_add, nat.add_comm]\n#align add_assoc_aux2 add_assoc_aux2\n\n",
 "add_assoc_aux1":
 "theorem add_assoc_aux1 (m n : ℕ) : ∀ c : ℤ, of_nat m + of_nat n + c = of_nat m + (of_nat n + c)\n  | of_nat k => by simp [nat.add_assoc]\n  | -[k+1] => by simp [sub_nat_nat_add]\n#align add_assoc_aux1 add_assoc_aux1\n\n",
 "add_assoc":
 "#print add_assoc /-\nprotected theorem add_assoc : ∀ a b c : ℤ, a + b + c = a + (b + c)\n  | of_nat m, of_nat n, c => Int.add_assoc.aux1 _ _ _\n  | of_nat m, b, of_nat k => by\n    rw [int.add_comm, ← add_assoc_aux1, int.add_comm (of_nat k), add_assoc_aux1, int.add_comm b]\n  | a, of_nat n, of_nat k => by\n    rw [int.add_comm, int.add_comm a, ← add_assoc_aux1, int.add_comm a, int.add_comm (of_nat k)]\n  | -[m+1], -[n+1], of_nat k => Int.add_assoc.aux2 _ _ _\n  | -[m+1], of_nat n, -[k+1] => by\n    rw [int.add_comm, ← add_assoc_aux2, int.add_comm (of_nat n), ← add_assoc_aux2, int.add_comm -[m+1]]\n  | of_nat m, -[n+1], -[k+1] => by\n    rw [int.add_comm, int.add_comm (of_nat m), int.add_comm (of_nat m), ← add_assoc_aux2, int.add_comm -[k+1]]\n  | -[m+1], -[n+1], -[k+1] => by simp [add_succ, nat.add_comm, nat.add_left_comm, neg_of_nat_of_succ]\n#align add_assoc add_assoc\n-/\n\n"}