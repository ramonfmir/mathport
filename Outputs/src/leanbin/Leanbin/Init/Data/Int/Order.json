{"zero_lt_one":
 "#print zero_lt_one /-\nprotected theorem zero_lt_one : (0 : ℤ) < 1 :=\n  trivial\n#align zero_lt_one zero_lt_one\n-/\n\n",
 "sub_self":
 "#print sub_self /-\nprotected theorem sub_self (a : ℤ) : a - a = 0 := by rw [int.sub_eq_add_neg, int.add_right_neg]\n#align sub_self sub_self\n-/\n\n",
 "sub_right_lt_of_lt_add":
 "#print sub_right_lt_of_lt_add /-\nprotected theorem sub_right_lt_of_lt_add {a b c : ℤ} (h : a < b + c) : a - c < b :=\n  by\n  have h := int.add_lt_add_right h (-c)\n  rwa [int.add_neg_cancel_right] at h\n#align sub_right_lt_of_lt_add sub_right_lt_of_lt_add\n-/\n\n",
 "sub_right_le_of_le_add":
 "protected theorem sub_right_le_of_le_add {a b c : ℤ} (h : a ≤ b + c) : a - c ≤ b :=\n  by\n  have h := int.add_le_add_right h (-c)\n  rwa [int.add_neg_cancel_right] at h\n#align sub_right_le_of_le_add sub_right_le_of_le_add\n\n",
 "sub_pos_of_lt":
 "#print sub_pos_of_lt /-\nprotected theorem sub_pos_of_lt {a b : ℤ} (h : b < a) : 0 < a - b :=\n  by\n  have h := int.add_lt_add_right h (-b)\n  rwa [int.add_right_neg] at h\n#align sub_pos_of_lt sub_pos_of_lt\n-/\n\n",
 "sub_one_lt_of_le":
 "theorem sub_one_lt_of_le {a b : ℤ} (H : a ≤ b) : a - 1 < b :=\n  int.sub_right_lt_of_lt_add <| lt_add_one_of_le H\n#align sub_one_lt_of_le sub_one_lt_of_le\n\n",
 "sub_nonpos_of_le":
 "#print sub_nonpos_of_le /-\nprotected theorem sub_nonpos_of_le {a b : ℤ} (h : a ≤ b) : a - b ≤ 0 :=\n  by\n  have h := int.add_le_add_right h (-b)\n  rwa [int.add_right_neg] at h\n#align sub_nonpos_of_le sub_nonpos_of_le\n-/\n\n",
 "sub_nonneg_of_le":
 "#print sub_nonneg_of_le /-\nprotected theorem sub_nonneg_of_le {a b : ℤ} (h : b ≤ a) : 0 ≤ a - b :=\n  by\n  have h := int.add_le_add_right h (-b)\n  rwa [int.add_right_neg] at h\n#align sub_nonneg_of_le sub_nonneg_of_le\n-/\n\n",
 "sub_neg_of_lt":
 "#print sub_neg_of_lt /-\nprotected theorem sub_neg_of_lt {a b : ℤ} (h : a < b) : a - b < 0 :=\n  by\n  have h := int.add_lt_add_right h (-b)\n  rwa [int.add_right_neg] at h\n#align sub_neg_of_lt sub_neg_of_lt\n-/\n\n",
 "sub_mul":
 "#print sub_mul /-\nprotected theorem sub_mul (a b c : ℤ) : (a - b) * c = a * c - b * c :=\n  calc\n    (a - b) * c = a * c + -b * c := Int.add_mul a (-b) c\n    _ = a * c - b * c := by simp\n    \n#align sub_mul sub_mul\n-/\n\n",
 "sub_lt_sub_right":
 "#print sub_lt_sub_right /-\nprotected theorem sub_lt_sub_right {a b : ℤ} (h : a < b) (c : ℤ) : a - c < b - c :=\n  int.add_lt_add_right h (-c)\n#align sub_lt_sub_right sub_lt_sub_right\n-/\n\n",
 "sub_lt_sub_of_lt_of_le":
 "protected theorem sub_lt_sub_of_lt_of_le {a b c d : ℤ} (hab : a < b) (hcd : c ≤ d) : a - d < b - c :=\n  int.add_lt_add_of_lt_of_le hab (int.neg_le_neg hcd)\n#align sub_lt_sub_of_lt_of_le sub_lt_sub_of_lt_of_le\n\n",
 "sub_lt_sub_of_le_of_lt":
 "protected theorem sub_lt_sub_of_le_of_lt {a b c d : ℤ} (hab : a ≤ b) (hcd : c < d) : a - d < b - c :=\n  int.add_lt_add_of_le_of_lt hab (int.neg_lt_neg hcd)\n#align sub_lt_sub_of_le_of_lt sub_lt_sub_of_le_of_lt\n\n",
 "sub_lt_sub_left":
 "#print sub_lt_sub_left /-\nprotected theorem sub_lt_sub_left {a b : ℤ} (h : a < b) (c : ℤ) : c - b < c - a :=\n  int.add_lt_add_left (int.neg_lt_neg h) c\n#align sub_lt_sub_left sub_lt_sub_left\n-/\n\n",
 "sub_lt_sub":
 "#print sub_lt_sub /-\nprotected theorem sub_lt_sub {a b c d : ℤ} (hab : a < b) (hcd : c < d) : a - d < b - c :=\n  int.add_lt_add hab (int.neg_lt_neg hcd)\n#align sub_lt_sub sub_lt_sub\n-/\n\n",
 "sub_lt_self":
 "#print sub_lt_self /-\nprotected theorem sub_lt_self (a : ℤ) {b : ℤ} (h : 0 < b) : a - b < a :=\n  calc\n    a - b = a + -b := rfl\n    _ < a + 0 := (int.add_lt_add_left (int.neg_neg_of_pos h) _)\n    _ = a := by rw [int.add_zero]\n    \n#align sub_lt_self sub_lt_self\n-/\n\n",
 "sub_lt_of_sub_lt":
 "protected theorem sub_lt_of_sub_lt {a b c : ℤ} (h : a - b < c) : a - c < b :=\n  int.sub_left_lt_of_lt_add (int.lt_add_of_sub_right_lt h)\n#align sub_lt_of_sub_lt sub_lt_of_sub_lt\n\n",
 "sub_left_lt_of_lt_add":
 "#print sub_left_lt_of_lt_add /-\nprotected theorem sub_left_lt_of_lt_add {a b c : ℤ} (h : a < b + c) : a - b < c :=\n  by\n  have h := int.add_lt_add_right h (-b)\n  rwa [int.add_comm b c, int.add_neg_cancel_right] at h\n#align sub_left_lt_of_lt_add sub_left_lt_of_lt_add\n-/\n\n",
 "sub_left_le_of_le_add":
 "#print sub_left_le_of_le_add /-\nprotected theorem sub_left_le_of_le_add {a b c : ℤ} (h : a ≤ b + c) : a - b ≤ c :=\n  by\n  have h := int.add_le_add_right h (-b)\n  rwa [int.add_comm b c, int.add_neg_cancel_right] at h\n#align sub_left_le_of_le_add sub_left_le_of_le_add\n-/\n\n",
 "sub_le_sub_right":
 "#print sub_le_sub_right /-\nprotected theorem sub_le_sub_right {a b : ℤ} (h : a ≤ b) (c : ℤ) : a - c ≤ b - c :=\n  int.add_le_add_right h (-c)\n#align sub_le_sub_right sub_le_sub_right\n-/\n\n",
 "sub_le_sub_left":
 "#print sub_le_sub_left /-\nprotected theorem sub_le_sub_left {a b : ℤ} (h : a ≤ b) (c : ℤ) : c - b ≤ c - a :=\n  int.add_le_add_left (int.neg_le_neg h) c\n#align sub_le_sub_left sub_le_sub_left\n-/\n\n",
 "sub_le_sub":
 "#print sub_le_sub /-\nprotected theorem sub_le_sub {a b c d : ℤ} (hab : a ≤ b) (hcd : c ≤ d) : a - d ≤ b - c :=\n  int.add_le_add hab (int.neg_le_neg hcd)\n#align sub_le_sub sub_le_sub\n-/\n\n",
 "sub_le_self":
 "#print sub_le_self /-\nprotected theorem sub_le_self (a : ℤ) {b : ℤ} (h : 0 ≤ b) : a - b ≤ a :=\n  calc\n    a - b = a + -b := rfl\n    _ ≤ a + 0 := (int.add_le_add_left (int.neg_nonpos_of_nonneg h) _)\n    _ = a := by rw [int.add_zero]\n    \n#align sub_le_self sub_le_self\n-/\n\n",
 "sub_le_of_sub_le":
 "protected theorem sub_le_of_sub_le {a b c : ℤ} (h : a - b ≤ c) : a - c ≤ b :=\n  int.sub_left_le_of_le_add (int.le_add_of_sub_right_le h)\n#align sub_le_of_sub_le sub_le_of_sub_le\n\n",
 "sub_eq_zero_of_eq":
 "#print sub_eq_zero_of_eq /-\nprotected theorem sub_eq_zero_of_eq {a b : ℤ} (h : a = b) : a - b = 0 := by rw [h, int.sub_self]\n#align sub_eq_zero_of_eq sub_eq_zero_of_eq\n-/\n\n",
 "sub_eq_zero_iff_eq":
 "protected theorem sub_eq_zero_iff_eq {a b : ℤ} : a - b = 0 ↔ a = b :=\n  ⟨int.eq_of_sub_eq_zero, int.sub_eq_zero_of_eq⟩\n#align sub_eq_zero_iff_eq sub_eq_zero_iff_eq\n\n",
 "sub_add_cancel":
 "#print sub_add_cancel /-\nprotected theorem sub_add_cancel (a b : ℤ) : a - b + b = a :=\n  int.neg_add_cancel_right a b\n#align sub_add_cancel sub_add_cancel\n-/\n\n",
 "sign_of_succ":
 "theorem sign_of_succ (n : Nat) : sign (nat.succ n) = 1 :=\n  rfl\n#align sign_of_succ sign_of_succ\n\n",
 "sign_eq_zero_iff_zero":
 "theorem sign_eq_zero_iff_zero (a : ℤ) : sign a = 0 ↔ a = 0 :=\n  ⟨eq_zero_of_sign_eq_zero, fun h => by rw [h, sign_zero]⟩\n#align sign_eq_zero_iff_zero sign_eq_zero_iff_zero\n\n",
 "sign_eq_one_of_pos":
 "theorem sign_eq_one_of_pos {a : ℤ} (h : 0 < a) : sign a = 1 :=\n  match a, eq_succ_of_zero_lt h with\n  | _, ⟨n, rfl⟩ => rfl\n#align sign_eq_one_of_pos sign_eq_one_of_pos\n\n",
 "sign_eq_one_iff_pos":
 "theorem sign_eq_one_iff_pos (a : ℤ) : sign a = 1 ↔ 0 < a :=\n  ⟨pos_of_sign_eq_one, sign_eq_one_of_pos⟩\n#align sign_eq_one_iff_pos sign_eq_one_iff_pos\n\n",
 "sign_eq_neg_one_of_neg":
 "theorem sign_eq_neg_one_of_neg {a : ℤ} (h : a < 0) : sign a = -1 :=\n  match a, eq_negSucc_of_lt_zero h with\n  | _, ⟨n, rfl⟩ => rfl\n#align sign_eq_neg_one_of_neg sign_eq_neg_one_of_neg\n\n",
 "sign_eq_neg_one_iff_neg":
 "theorem sign_eq_neg_one_iff_neg (a : ℤ) : sign a = -1 ↔ a < 0 :=\n  ⟨neg_of_sign_eq_neg_one, sign_eq_neg_one_of_neg⟩\n#align sign_eq_neg_one_iff_neg sign_eq_neg_one_iff_neg\n\n",
 "pos_of_sign_eq_one":
 "theorem pos_of_sign_eq_one : ∀ {a : ℤ}, sign a = 1 → 0 < a\n  | (n + 1 : ℕ), _ => ofNat_lt_ofNat_of_lt (nat.succ_pos _)\n#align pos_of_sign_eq_one pos_of_sign_eq_one\n\n",
 "pos_of_neg_neg":
 "#print pos_of_neg_neg /-\nprotected theorem pos_of_neg_neg {a : ℤ} (h : -a < 0) : 0 < a :=\n  have : -a < -0 := by rwa [int.neg_zero]\n  int.lt_of_neg_lt_neg this\n#align pos_of_neg_neg pos_of_neg_neg\n-/\n\n",
 "of_nat_nonneg":
 "theorem of_nat_nonneg (n : ℕ) : 0 ≤ of_nat n :=\n  trivial\n#align of_nat_nonneg of_nat_nonneg\n\n",
 "of_nat_nat_abs_of_nonpos":
 "theorem of_nat_nat_abs_of_nonpos {a : ℤ} (H : a ≤ 0) : (natAbs a : ℤ) = -a := by\n  rw [← nat_abs_neg, nat_abs_of_nonneg (int.neg_nonneg_of_nonpos H)]\n#align of_nat_nat_abs_of_nonpos of_nat_nat_abs_of_nonpos\n\n",
 "nonpos_of_neg_nonneg":
 "#print nonpos_of_neg_nonneg /-\nprotected theorem nonpos_of_neg_nonneg {a : ℤ} (h : 0 ≤ -a) : a ≤ 0 :=\n  have : -0 ≤ -a := by rwa [int.neg_zero]\n  int.le_of_neg_le_neg this\n#align nonpos_of_neg_nonneg nonpos_of_neg_nonneg\n-/\n\n",
 "nonneg_or_nonneg_neg":
 "theorem nonneg_or_nonneg_neg (a : ℤ) : NonNeg a ∨ NonNeg (-a) :=\n  int.cases_on a (fun n => or.inl trivial) fun n => or.inr trivial\n#align nonneg_or_nonneg_neg nonneg_or_nonneg_neg\n\n",
 "nonneg_of_neg_nonpos":
 "#print nonneg_of_neg_nonpos /-\nprotected theorem nonneg_of_neg_nonpos {a : ℤ} (h : -a ≤ 0) : 0 ≤ a :=\n  have : -a ≤ -0 := by rwa [int.neg_zero]\n  int.le_of_neg_le_neg this\n#align nonneg_of_neg_nonpos nonneg_of_neg_nonpos\n-/\n\n",
 "neg_succ_lt_zero":
 "theorem neg_succ_lt_zero (n : ℕ) : -[n+1] < 0 :=\n  lt_of_not_ge fun h => by\n    let ⟨m, h⟩ := eq_ofNat_of_zero_le h\n    contradiction\n#align neg_succ_lt_zero neg_succ_lt_zero\n\n",
 "neg_pos_of_neg":
 "#print neg_pos_of_neg /-\nprotected theorem neg_pos_of_neg {a : ℤ} (h : a < 0) : 0 < -a :=\n  by\n  have : -0 < -a := int.neg_lt_neg h\n  rwa [int.neg_zero] at this\n#align neg_pos_of_neg neg_pos_of_neg\n-/\n\n",
 "neg_of_sign_eq_neg_one":
 "theorem neg_of_sign_eq_neg_one : ∀ {a : ℤ}, sign a = -1 → a < 0\n  | (n + 1 : ℕ), h => nomatch h\n  | 0, h => nomatch h\n  | -[n+1], _ => negSucc_lt_zero _\n#align neg_of_sign_eq_neg_one neg_of_sign_eq_neg_one\n\n",
 "neg_of_neg_pos":
 "#print neg_of_neg_pos /-\nprotected theorem neg_of_neg_pos {a : ℤ} (h : 0 < -a) : a < 0 :=\n  have : -0 < -a := by rwa [int.neg_zero]\n  int.lt_of_neg_lt_neg this\n#align neg_of_neg_pos neg_of_neg_pos\n-/\n\n",
 "neg_nonpos_of_nonneg":
 "#print neg_nonpos_of_nonneg /-\nprotected theorem neg_nonpos_of_nonneg {a : ℤ} (h : 0 ≤ a) : -a ≤ 0 :=\n  by\n  have : -a ≤ -0 := int.neg_le_neg h\n  rwa [int.neg_zero] at this\n#align neg_nonpos_of_nonneg neg_nonpos_of_nonneg\n-/\n\n",
 "neg_nonneg_of_nonpos":
 "#print neg_nonneg_of_nonpos /-\nprotected theorem neg_nonneg_of_nonpos {a : ℤ} (h : a ≤ 0) : 0 ≤ -a :=\n  by\n  have : -0 ≤ -a := int.neg_le_neg h\n  rwa [int.neg_zero] at this\n#align neg_nonneg_of_nonpos neg_nonneg_of_nonpos\n-/\n\n",
 "neg_neg_of_pos":
 "#print neg_neg_of_pos /-\nprotected theorem neg_neg_of_pos {a : ℤ} (h : 0 < a) : -a < 0 :=\n  by\n  have : -a < -0 := int.neg_lt_neg h\n  rwa [int.neg_zero] at this\n#align neg_neg_of_pos neg_neg_of_pos\n-/\n\n",
 "neg_mul_neg":
 "#print neg_mul_neg /-\nprotected theorem neg_mul_neg (a b : ℤ) : -a * -b = a * b := by simp\n#align neg_mul_neg neg_mul_neg\n-/\n\n",
 "neg_mul_eq_neg_mul_symm":
 "theorem neg_mul_eq_neg_mul_symm (a b : ℤ) : -a * b = -(a * b) :=\n  Eq.symm (int.neg_mul_eq_neg_mul a b)\n#align neg_mul_eq_neg_mul_symm neg_mul_eq_neg_mul_symm\n\n",
 "neg_mul_eq_neg_mul":
 "#print neg_mul_eq_neg_mul /-\nprotected theorem neg_mul_eq_neg_mul (a b : ℤ) : -(a * b) = -a * b :=\n  int.neg_eq_of_add_eq_zero (by rw [← Int.add_mul, int.add_right_neg, int.zero_mul])\n#align neg_mul_eq_neg_mul neg_mul_eq_neg_mul\n-/\n\n",
 "neg_mul_eq_mul_neg":
 "#print neg_mul_eq_mul_neg /-\nprotected theorem neg_mul_eq_mul_neg (a b : ℤ) : -(a * b) = a * -b :=\n  int.neg_eq_of_add_eq_zero (by rw [← Int.mul_add, int.add_right_neg, int.mul_zero])\n#align neg_mul_eq_mul_neg neg_mul_eq_mul_neg\n-/\n\n",
 "neg_mul_comm":
 "#print neg_mul_comm /-\nprotected theorem neg_mul_comm (a b : ℤ) : -a * b = a * -b := by simp\n#align neg_mul_comm neg_mul_comm\n-/\n\n",
 "neg_lt_sub_right_of_lt_add":
 "protected theorem neg_lt_sub_right_of_lt_add {a b c : ℤ} (h : c < a + b) : -b < a - c :=\n  int.lt_sub_left_of_add_lt (int.sub_right_lt_of_lt_add h)\n#align neg_lt_sub_right_of_lt_add neg_lt_sub_right_of_lt_add\n\n",
 "neg_lt_sub_left_of_lt_add":
 "protected theorem neg_lt_sub_left_of_lt_add {a b c : ℤ} (h : c < a + b) : -a < b - c :=\n  by\n  have h := int.lt_neg_add_of_add_lt (int.sub_left_lt_of_lt_add h)\n  rwa [int.add_comm] at h\n#align neg_lt_sub_left_of_lt_add neg_lt_sub_left_of_lt_add\n\n",
 "neg_lt_of_neg_lt":
 "#print neg_lt_of_neg_lt /-\nprotected theorem neg_lt_of_neg_lt {a b : ℤ} (h : -a < b) : -b < a :=\n  by\n  have h := int.neg_lt_neg h\n  rwa [int.neg_neg] at h\n#align neg_lt_of_neg_lt neg_lt_of_neg_lt\n-/\n\n",
 "neg_lt_neg":
 "#print neg_lt_neg /-\nprotected theorem neg_lt_neg {a b : ℤ} (h : a < b) : -b < -a :=\n  by\n  have : 0 < -a + b := int.add_left_neg a ▸ int.add_lt_add_left h (-a)\n  have : 0 + -b < -a + b + -b := int.add_lt_add_right this (-b)\n  rwa [int.add_neg_cancel_right, int.zero_add] at this\n#align neg_lt_neg neg_lt_neg\n-/\n\n",
 "neg_le_sub_right_of_le_add":
 "protected theorem neg_le_sub_right_of_le_add {a b c : ℤ} (h : c ≤ a + b) : -b ≤ a - c :=\n  int.le_sub_left_of_add_le (int.sub_right_le_of_le_add h)\n#align neg_le_sub_right_of_le_add neg_le_sub_right_of_le_add\n\n",
 "neg_le_sub_left_of_le_add":
 "protected theorem neg_le_sub_left_of_le_add {a b c : ℤ} (h : c ≤ a + b) : -a ≤ b - c :=\n  by\n  have h := int.le_neg_add_of_add_le (int.sub_left_le_of_le_add h)\n  rwa [int.add_comm] at h\n#align neg_le_sub_left_of_le_add neg_le_sub_left_of_le_add\n\n",
 "neg_le_of_neg_le":
 "#print neg_le_of_neg_le /-\nprotected theorem neg_le_of_neg_le {a b : ℤ} (h : -a ≤ b) : -b ≤ a :=\n  by\n  have h := int.neg_le_neg h\n  rwa [int.neg_neg] at h\n#align neg_le_of_neg_le neg_le_of_neg_le\n-/\n\n",
 "neg_le_neg":
 "#print neg_le_neg /-\nprotected theorem neg_le_neg {a b : ℤ} (h : a ≤ b) : -b ≤ -a :=\n  by\n  have : 0 ≤ -a + b := int.add_left_neg a ▸ int.add_le_add_left h (-a)\n  have : 0 + -b ≤ -a + b + -b := int.add_le_add_right this (-b)\n  rwa [int.add_neg_cancel_right, int.zero_add] at this\n#align neg_le_neg neg_le_neg\n-/\n\n",
 "neg_eq_of_add_eq_zero":
 "@[simp]\nprotected theorem neg_eq_of_add_eq_zero {a b : ℤ} (h : a + b = 0) : -a = b := by\n  rw [← int.add_zero (-a), ← h, ← int.add_assoc, int.add_left_neg, int.zero_add]\n#align neg_eq_of_add_eq_zero neg_eq_of_add_eq_zero\n\n",
 "neg_add_lt_right_of_lt_add":
 "protected theorem neg_add_lt_right_of_lt_add {a b c : ℤ} (h : a < b + c) : -c + a < b :=\n  by\n  rw [int.add_comm] at h\n  exact int.neg_add_lt_left_of_lt_add h\n#align neg_add_lt_right_of_lt_add neg_add_lt_right_of_lt_add\n\n",
 "neg_add_lt_of_lt_add":
 "#print neg_add_lt_of_lt_add /-\nprotected theorem neg_add_lt_of_lt_add {a b c : ℤ} (h : a < b + c) : -b + a < c :=\n  by\n  have h := int.add_lt_add_left h (-b)\n  rwa [int.neg_add_cancel_left] at h\n#align neg_add_lt_of_lt_add neg_add_lt_of_lt_add\n-/\n\n",
 "neg_add_lt_left_of_lt_add":
 "protected theorem neg_add_lt_left_of_lt_add {a b c : ℤ} (h : a < b + c) : -b + a < c :=\n  by\n  rw [int.add_comm]\n  exact int.sub_left_lt_of_lt_add h\n#align neg_add_lt_left_of_lt_add neg_add_lt_left_of_lt_add\n\n",
 "neg_add_le_right_of_le_add":
 "protected theorem neg_add_le_right_of_le_add {a b c : ℤ} (h : a ≤ b + c) : -c + a ≤ b :=\n  by\n  rw [int.add_comm] at h\n  exact int.neg_add_le_left_of_le_add h\n#align neg_add_le_right_of_le_add neg_add_le_right_of_le_add\n\n",
 "neg_add_le_of_le_add":
 "#print neg_add_le_of_le_add /-\nprotected theorem neg_add_le_of_le_add {a b c : ℤ} (h : a ≤ b + c) : -b + a ≤ c :=\n  by\n  have h := int.add_le_add_left h (-b)\n  rwa [int.neg_add_cancel_left] at h\n#align neg_add_le_of_le_add neg_add_le_of_le_add\n-/\n\n",
 "neg_add_le_left_of_le_add":
 "protected theorem neg_add_le_left_of_le_add {a b c : ℤ} (h : a ≤ b + c) : -b + a ≤ c :=\n  by\n  rw [int.add_comm]\n  exact int.sub_left_le_of_le_add h\n#align neg_add_le_left_of_le_add neg_add_le_left_of_le_add\n\n",
 "neg_add_cancel_right":
 "#print neg_add_cancel_right /-\nprotected theorem neg_add_cancel_right (a b : ℤ) : a + -b + b = a := by\n  rw [int.add_assoc, int.add_left_neg, int.add_zero]\n#align neg_add_cancel_right neg_add_cancel_right\n-/\n\n",
 "neg_add_cancel_left":
 "#print neg_add_cancel_left /-\nprotected theorem neg_add_cancel_left (a b : ℤ) : -a + (a + b) = b := by\n  rw [← int.add_assoc, int.add_left_neg, int.zero_add]\n#align neg_add_cancel_left neg_add_cancel_left\n-/\n\n",
 "ne_of_lt":
 "#print ne_of_lt /-\nprotected theorem ne_of_lt {a b : ℤ} (h : a < b) : a ≠ b := fun this : a = b =>\n  absurd (by rw [this] at h; exact h) (int.lt_irrefl b)\n#align ne_of_lt ne_of_lt\n-/\n\n",
 "nat_abs_of_nonneg":
 "theorem nat_abs_of_nonneg {a : ℤ} (H : 0 ≤ a) : (natAbs a : ℤ) = a :=\n  match a, eq_ofNat_of_zero_le H with\n  | _, ⟨n, rfl⟩ => rfl\n#align nat_abs_of_nonneg nat_abs_of_nonneg\n\n",
 "mul_sub":
 "#print mul_sub /-\nprotected theorem mul_sub (a b c : ℤ) : a * (b - c) = a * b - a * c :=\n  calc\n    a * (b - c) = a * b + a * -c := Int.mul_add a b (-c)\n    _ = a * b - a * c := by simp\n    \n#align mul_sub mul_sub\n-/\n\n",
 "mul_self_lt_mul_self":
 "#print mul_self_lt_mul_self /-\nprotected theorem mul_self_lt_mul_self {a b : ℤ} (h1 : 0 ≤ a) (h2 : a < b) : a * a < b * b :=\n  int.mul_lt_mul' (le_of_lt h2) h2 h1 (lt_of_le_of_lt h1 h2)\n#align mul_self_lt_mul_self mul_self_lt_mul_self\n-/\n\n",
 "mul_self_le_mul_self":
 "#print mul_self_le_mul_self /-\nprotected theorem mul_self_le_mul_self {a b : ℤ} (h1 : 0 ≤ a) (h2 : a ≤ b) : a * a ≤ b * b :=\n  int.mul_le_mul h2 h2 h1 (le_trans h1 h2)\n#align mul_self_le_mul_self mul_self_le_mul_self\n-/\n\n",
 "mul_pos_of_neg_of_neg":
 "#print mul_pos_of_neg_of_neg /-\nprotected theorem mul_pos_of_neg_of_neg {a b : ℤ} (ha : a < 0) (hb : b < 0) : 0 < a * b :=\n  by\n  have : 0 * b < a * b := int.mul_lt_mul_of_neg_right ha hb\n  rwa [int.zero_mul] at this\n#align mul_pos_of_neg_of_neg mul_pos_of_neg_of_neg\n-/\n\n",
 "mul_pos":
 "#print mul_pos /-\nprotected theorem mul_pos {a b : ℤ} (ha : 0 < a) (hb : 0 < b) : 0 < a * b :=\n  lt.elim ha fun n => fun hn =>\n    lt.elim hb fun m => fun hm =>\n      lt.intro\n        (show 0 + ↑(nat.succ (nat.succ n * m + n)) = a * b\n          by\n          rw [← hn, ← hm]; simp [Int.ofNat_zero]\n          rw [← Int.ofNat_mul]; simp [nat.mul_succ, nat.add_succ, nat.succ_add])\n#align mul_pos mul_pos\n-/\n\n",
 "mul_nonpos_of_nonpos_of_nonneg":
 "#print mul_nonpos_of_nonpos_of_nonneg /-\nprotected theorem mul_nonpos_of_nonpos_of_nonneg {a b : ℤ} (ha : a ≤ 0) (hb : 0 ≤ b) : a * b ≤ 0 :=\n  by\n  have h : a * b ≤ 0 * b := int.mul_le_mul_of_nonneg_right ha hb\n  rwa [int.zero_mul] at h\n#align mul_nonpos_of_nonpos_of_nonneg mul_nonpos_of_nonpos_of_nonneg\n-/\n\n",
 "mul_nonpos_of_nonneg_of_nonpos":
 "#print mul_nonpos_of_nonneg_of_nonpos /-\nprotected theorem mul_nonpos_of_nonneg_of_nonpos {a b : ℤ} (ha : 0 ≤ a) (hb : b ≤ 0) : a * b ≤ 0 :=\n  by\n  have h : a * b ≤ a * 0 := int.mul_le_mul_of_nonneg_left hb ha\n  rwa [int.mul_zero] at h\n#align mul_nonpos_of_nonneg_of_nonpos mul_nonpos_of_nonneg_of_nonpos\n-/\n\n",
 "mul_nonneg_of_nonpos_of_nonpos":
 "#print mul_nonneg_of_nonpos_of_nonpos /-\nprotected theorem mul_nonneg_of_nonpos_of_nonpos {a b : ℤ} (ha : a ≤ 0) (hb : b ≤ 0) : 0 ≤ a * b :=\n  by\n  have : 0 * b ≤ a * b := int.mul_le_mul_of_nonpos_right ha hb\n  rwa [int.zero_mul] at this\n#align mul_nonneg_of_nonpos_of_nonpos mul_nonneg_of_nonpos_of_nonpos\n-/\n\n",
 "mul_nonneg":
 "#print mul_nonneg /-\nprotected theorem mul_nonneg {a b : ℤ} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a * b :=\n  le.elim ha fun n => fun hn =>\n    le.elim hb fun m => fun hm => le.intro (show 0 + ↑n * ↑m = a * b by rw [← hn, ← hm]; simp [int.zero_add])\n#align mul_nonneg mul_nonneg\n-/\n\n",
 "mul_neg_of_pos_of_neg":
 "#print mul_neg_of_pos_of_neg /-\nprotected theorem mul_neg_of_pos_of_neg {a b : ℤ} (ha : 0 < a) (hb : b < 0) : a * b < 0 :=\n  by\n  have h : a * b < a * 0 := int.mul_lt_mul_of_pos_left hb ha\n  rwa [int.mul_zero] at h\n#align mul_neg_of_pos_of_neg mul_neg_of_pos_of_neg\n-/\n\n",
 "mul_neg_of_neg_of_pos":
 "#print mul_neg_of_neg_of_pos /-\nprotected theorem mul_neg_of_neg_of_pos {a b : ℤ} (ha : a < 0) (hb : 0 < b) : a * b < 0 :=\n  by\n  have h : a * b < 0 * b := int.mul_lt_mul_of_pos_right ha hb\n  rwa [int.zero_mul] at h\n#align mul_neg_of_neg_of_pos mul_neg_of_neg_of_pos\n-/\n\n",
 "mul_neg_eq_neg_mul_symm":
 "theorem mul_neg_eq_neg_mul_symm (a b : ℤ) : a * -b = -(a * b) :=\n  Eq.symm (int.neg_mul_eq_mul_neg a b)\n#align mul_neg_eq_neg_mul_symm mul_neg_eq_neg_mul_symm\n\n",
 "mul_lt_mul_of_pos_right":
 "#print mul_lt_mul_of_pos_right /-\nprotected theorem mul_lt_mul_of_pos_right {a b c : ℤ} (h₁ : a < b) (h₂ : 0 < c) : a * c < b * c :=\n  by\n  have : 0 < b - a := int.sub_pos_of_lt h₁\n  have : 0 < (b - a) * c := int.mul_pos this h₂\n  rw [int.sub_mul] at this\n  exact int.lt_of_sub_pos this\n#align mul_lt_mul_of_pos_right mul_lt_mul_of_pos_right\n-/\n\n",
 "mul_lt_mul_of_pos_left":
 "#print mul_lt_mul_of_pos_left /-\nprotected theorem mul_lt_mul_of_pos_left {a b c : ℤ} (h₁ : a < b) (h₂ : 0 < c) : c * a < c * b :=\n  by\n  have : 0 < b - a := int.sub_pos_of_lt h₁\n  have : 0 < c * (b - a) := int.mul_pos h₂ this\n  rw [int.mul_sub] at this\n  exact int.lt_of_sub_pos this\n#align mul_lt_mul_of_pos_left mul_lt_mul_of_pos_left\n-/\n\n",
 "mul_lt_mul_of_neg_right":
 "#print mul_lt_mul_of_neg_right /-\nprotected theorem mul_lt_mul_of_neg_right {a b c : ℤ} (h : b < a) (hc : c < 0) : a * c < b * c :=\n  have : -c > 0 := int.neg_pos_of_neg hc\n  have : b * -c < a * -c := int.mul_lt_mul_of_pos_right h this\n  have : -(b * c) < -(a * c) := by rwa [← int.neg_mul_eq_mul_neg, ← int.neg_mul_eq_mul_neg] at this\n  int.lt_of_neg_lt_neg this\n#align mul_lt_mul_of_neg_right mul_lt_mul_of_neg_right\n-/\n\n",
 "mul_lt_mul_of_neg_left":
 "#print mul_lt_mul_of_neg_left /-\nprotected theorem mul_lt_mul_of_neg_left {a b c : ℤ} (h : b < a) (hc : c < 0) : c * a < c * b :=\n  have : -c > 0 := int.neg_pos_of_neg hc\n  have : -c * b < -c * a := int.mul_lt_mul_of_pos_left h this\n  have : -(c * b) < -(c * a) := by rwa [← int.neg_mul_eq_neg_mul, ← int.neg_mul_eq_neg_mul] at this\n  int.lt_of_neg_lt_neg this\n#align mul_lt_mul_of_neg_left mul_lt_mul_of_neg_left\n-/\n\n",
 "mul_lt_mul'":
 "#print mul_lt_mul' /-\nprotected theorem mul_lt_mul' {a b c d : ℤ} (h1 : a ≤ c) (h2 : b < d) (h3 : 0 ≤ b) (h4 : 0 < c) : a * b < c * d :=\n  calc\n    a * b ≤ c * b := int.mul_le_mul_of_nonneg_right h1 h3\n    _ < c * d := int.mul_lt_mul_of_pos_left h2 h4\n    \n#align mul_lt_mul' mul_lt_mul'\n-/\n\n",
 "mul_lt_mul":
 "#print mul_lt_mul /-\nprotected theorem mul_lt_mul {a b c d : ℤ} (hac : a < c) (hbd : b ≤ d) (pos_b : 0 < b) (nn_c : 0 ≤ c) : a * b < c * d :=\n  calc\n    a * b < c * b := int.mul_lt_mul_of_pos_right hac pos_b\n    _ ≤ c * d := int.mul_le_mul_of_nonneg_left hbd nn_c\n    \n#align mul_lt_mul mul_lt_mul\n-/\n\n",
 "mul_le_mul_of_nonpos_right":
 "#print mul_le_mul_of_nonpos_right /-\nprotected theorem mul_le_mul_of_nonpos_right {a b c : ℤ} (h : b ≤ a) (hc : c ≤ 0) : a * c ≤ b * c :=\n  have : -c ≥ 0 := int.neg_nonneg_of_nonpos hc\n  have : b * -c ≤ a * -c := int.mul_le_mul_of_nonneg_right h this\n  have : -(b * c) ≤ -(a * c) := by rwa [← int.neg_mul_eq_mul_neg, ← int.neg_mul_eq_mul_neg] at this\n  int.le_of_neg_le_neg this\n#align mul_le_mul_of_nonpos_right mul_le_mul_of_nonpos_right\n-/\n\n",
 "mul_le_mul_of_nonneg_right":
 "#print mul_le_mul_of_nonneg_right /-\nprotected theorem mul_le_mul_of_nonneg_right {a b c : ℤ} (h₁ : a ≤ b) (h₂ : 0 ≤ c) : a * c ≤ b * c :=\n  by\n  by_cases hba : b ≤ a; · simp [le_antisymm hba h₁]\n  by_cases hc0 : c ≤ 0; · simp [le_antisymm hc0 h₂, int.mul_zero]\n  exact (le_not_le_of_lt (int.mul_lt_mul_of_pos_right (lt_of_le_not_le h₁ hba) (lt_of_le_not_le h₂ hc0))).left\n#align mul_le_mul_of_nonneg_right mul_le_mul_of_nonneg_right\n-/\n\n",
 "mul_le_mul_of_nonneg_left":
 "#print mul_le_mul_of_nonneg_left /-\nprotected theorem mul_le_mul_of_nonneg_left {a b c : ℤ} (h₁ : a ≤ b) (h₂ : 0 ≤ c) : c * a ≤ c * b :=\n  by\n  by_cases hba : b ≤ a; · simp [le_antisymm hba h₁]\n  by_cases hc0 : c ≤ 0; · simp [le_antisymm hc0 h₂, int.zero_mul]\n  exact (le_not_le_of_lt (int.mul_lt_mul_of_pos_left (lt_of_le_not_le h₁ hba) (lt_of_le_not_le h₂ hc0))).left\n#align mul_le_mul_of_nonneg_left mul_le_mul_of_nonneg_left\n-/\n\n",
 "mul_le_mul":
 "#print mul_le_mul /-\n-- TODO: there are four variations, depending on which variables we assume to be nonneg\nprotected theorem mul_le_mul {a b c d : ℤ} (hac : a ≤ c) (hbd : b ≤ d) (nn_b : 0 ≤ b) (nn_c : 0 ≤ c) : a * b ≤ c * d :=\n  calc\n    a * b ≤ c * b := int.mul_le_mul_of_nonneg_right hac nn_b\n    _ ≤ c * d := int.mul_le_mul_of_nonneg_left hbd nn_c\n    \n#align mul_le_mul mul_le_mul\n-/\n\n",
 "lt_succ":
 "theorem lt_succ (a : ℤ) : a < a + 1 :=\n  int.le_refl (a + 1)\n#align lt_succ lt_succ\n\n",
 "lt_sub_right_of_add_lt":
 "#print lt_sub_right_of_add_lt /-\nprotected theorem lt_sub_right_of_add_lt {a b c : ℤ} (h : a + b < c) : a < c - b :=\n  by\n  have h := int.add_lt_add_right h (-b)\n  rwa [int.add_neg_cancel_right] at h\n#align lt_sub_right_of_add_lt lt_sub_right_of_add_lt\n-/\n\n",
 "lt_sub_left_of_add_lt":
 "#print lt_sub_left_of_add_lt /-\nprotected theorem lt_sub_left_of_add_lt {a b c : ℤ} (h : a + b < c) : b < c - a :=\n  by\n  have h := int.add_lt_add_right h (-a)\n  rwa [int.add_comm a b, int.add_neg_cancel_right] at h\n#align lt_sub_left_of_add_lt lt_sub_left_of_add_lt\n-/\n\n",
 "lt_of_sub_pos":
 "#print lt_of_sub_pos /-\nprotected theorem lt_of_sub_pos {a b : ℤ} (h : 0 < a - b) : b < a :=\n  by\n  have h := int.add_lt_add_right h b\n  rwa [int.sub_add_cancel, int.zero_add] at h\n#align lt_of_sub_pos lt_of_sub_pos\n-/\n\n",
 "lt_of_sub_neg":
 "#print lt_of_sub_neg /-\nprotected theorem lt_of_sub_neg {a b : ℤ} (h : a - b < 0) : a < b :=\n  by\n  have h := int.add_lt_add_right h b\n  rwa [int.sub_add_cancel, int.zero_add] at h\n#align lt_of_sub_neg lt_of_sub_neg\n-/\n\n",
 "lt_of_neg_lt_neg":
 "#print lt_of_neg_lt_neg /-\nprotected theorem lt_of_neg_lt_neg {a b : ℤ} (h : -b < -a) : a < b :=\n  int.neg_neg a ▸ int.neg_neg b ▸ int.neg_lt_neg h\n#align lt_of_neg_lt_neg lt_of_neg_lt_neg\n-/\n\n",
 "lt_of_le_sub_one":
 "theorem lt_of_le_sub_one {a b : ℤ} (H : a ≤ b - 1) : a < b :=\n  int.add_le_of_le_sub_right H\n#align lt_of_le_sub_one lt_of_le_sub_one\n\n",
 "lt_of_coe_nat_lt_coe_nat":
 "theorem lt_of_coe_nat_lt_coe_nat {m n : ℕ} (h : (↑m : ℤ) < ↑n) : m < n :=\n  (ofNat_lt _ _).mp h\n#align lt_of_coe_nat_lt_coe_nat lt_of_coe_nat_lt_coe_nat\n\n",
 "lt_of_add_one_le":
 "theorem lt_of_add_one_le {a b : ℤ} (H : a + 1 ≤ b) : a < b :=\n  H\n#align lt_of_add_one_le lt_of_add_one_le\n\n",
 "lt_of_add_lt_add_right":
 "#print lt_of_add_lt_add_right /-\nprotected theorem lt_of_add_lt_add_right {a b c : ℤ} (h : a + b < c + b) : a < c :=\n  int.lt_of_add_lt_add_left (show b + a < b + c by rw [int.add_comm b a, int.add_comm b c]; assumption)\n#align lt_of_add_lt_add_right lt_of_add_lt_add_right\n-/\n\n",
 "lt_of_add_lt_add_left":
 "#print lt_of_add_lt_add_left /-\nprotected theorem lt_of_add_lt_add_left {a b c : ℤ} (h : a + b < a + c) : b < c :=\n  by\n  have : -a + (a + b) < -a + (a + c) := int.add_lt_add_left h _\n  simp [int.neg_add_cancel_left] at this\n  assumption\n#align lt_of_add_lt_add_left lt_of_add_lt_add_left\n-/\n\n",
 "lt_neg_of_lt_neg":
 "#print lt_neg_of_lt_neg /-\nprotected theorem lt_neg_of_lt_neg {a b : ℤ} (h : a < -b) : b < -a :=\n  by\n  have h := int.neg_lt_neg h\n  rwa [int.neg_neg] at h\n#align lt_neg_of_lt_neg lt_neg_of_lt_neg\n-/\n\n",
 "lt_neg_add_of_add_lt":
 "#print lt_neg_add_of_add_lt /-\nprotected theorem lt_neg_add_of_add_lt {a b c : ℤ} (h : a + b < c) : b < -a + c :=\n  by\n  have h := int.add_lt_add_left h (-a)\n  rwa [int.neg_add_cancel_left] at h\n#align lt_neg_add_of_add_lt lt_neg_add_of_add_lt\n-/\n\n",
 "lt_irrefl":
 "#print lt_irrefl /-\nprotected theorem lt_irrefl (a : ℤ) : ¬a < a := fun this : a < a =>\n  lt.elim this fun n => fun hn : a + nat.succ n = a =>\n    have : a + nat.succ n = a + 0 := by rw [hn, int.add_zero]\n    have : nat.succ n = 0 := Int.ofNat.inj (int.add_left_cancel this)\n    show False from nat.succ_ne_zero _ this\n#align lt_irrefl lt_irrefl\n-/\n\n",
 "lt_iff_le_not_le":
 "#print lt_iff_le_not_le /-\nprotected theorem lt_iff_le_not_le {a b : ℤ} : a < b ↔ a ≤ b ∧ ¬b ≤ a :=\n  by\n  simp [int.lt_iff_le_and_ne]; constructor <;> intro h\n  · cases' h with hab hn\n    constructor\n    · assumption\n    · intro hba\n      simp [int.le_antisymm hab hba] at *\n      contradiction\n  · cases' h with hab hn\n    constructor\n    · assumption\n    · intro h\n      simp_all\n#align lt_iff_le_not_le lt_iff_le_not_le\n-/\n\n",
 "lt_iff_le_and_ne":
 "#print lt_iff_le_and_ne /-\nprotected theorem lt_iff_le_and_ne (a b : ℤ) : a < b ↔ a ≤ b ∧ a ≠ b :=\n  iff.intro (fun h => ⟨le_of_lt h, int.ne_of_lt h⟩) fun ⟨aleb, aneb⟩ =>\n    le.elim aleb fun n => fun hn : a + n = b =>\n      have : n ≠ 0 := fun this : n = 0 => aneb (by rw [← hn, this, Int.ofNat_zero, int.add_zero])\n      have : n = nat.succ (nat.pred n) := Eq.symm (nat.succ_pred_eq_of_pos (nat.pos_of_ne_zero this))\n      lt.intro (by rw [this] at hn; exact hn)\n#align lt_iff_le_and_ne lt_iff_le_and_ne\n-/\n\n",
 "lt_iff_add_one_le":
 "/-\nCopyright (c) 2016 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad\n\nThe order relation on the integers.\n-/\ntheorem lt_iff_add_one_le (a b : ℤ) : a < b ↔ a + 1 ≤ b :=\n  iff.refl _\n#align lt_iff_add_one_le lt_iff_add_one_le\n\n",
 "lt_add_succ":
 "theorem lt_add_succ (a : ℤ) (n : ℕ) : a < a + ↑(nat.succ n) :=\n  le.intro\n    (show a + 1 + n = a + nat.succ n\n      by\n      simp [int.coe_nat_eq, int.add_comm, int.add_left_comm]\n      rfl)\n#align lt_add_succ lt_add_succ\n\n",
 "lt_add_one_of_le":
 "theorem lt_add_one_of_le {a b : ℤ} (H : a ≤ b) : a < b + 1 :=\n  int.add_le_add_right H 1\n#align lt_add_one_of_le lt_add_one_of_le\n\n",
 "lt_add_of_sub_right_lt":
 "#print lt_add_of_sub_right_lt /-\nprotected theorem lt_add_of_sub_right_lt {a b c : ℤ} (h : a - c < b) : a < b + c :=\n  by\n  have h := int.add_lt_add_right h c\n  rwa [int.sub_add_cancel] at h\n#align lt_add_of_sub_right_lt lt_add_of_sub_right_lt\n-/\n\n",
 "lt_add_of_sub_left_lt":
 "#print lt_add_of_sub_left_lt /-\nprotected theorem lt_add_of_sub_left_lt {a b c : ℤ} (h : a - b < c) : a < b + c :=\n  by\n  have h := int.add_lt_add_right h b\n  rwa [int.sub_add_cancel, int.add_comm] at h\n#align lt_add_of_sub_left_lt lt_add_of_sub_left_lt\n-/\n\n",
 "lt_add_of_pos_right":
 "#print lt_add_of_pos_right /-\nprotected theorem lt_add_of_pos_right (a : ℤ) {b : ℤ} (h : 0 < b) : a < a + b :=\n  by\n  have : a + 0 < a + b := int.add_lt_add_left h a\n  rwa [int.add_zero] at this\n#align lt_add_of_pos_right lt_add_of_pos_right\n-/\n\n",
 "lt_add_of_pos_left":
 "#print lt_add_of_pos_left /-\nprotected theorem lt_add_of_pos_left (a : ℤ) {b : ℤ} (h : 0 < b) : a < b + a :=\n  by\n  have : 0 + a < b + a := int.add_lt_add_right h a\n  rwa [int.zero_add] at this\n#align lt_add_of_pos_left lt_add_of_pos_left\n-/\n\n",
 "lt_add_of_neg_lt_sub_right":
 "protected theorem lt_add_of_neg_lt_sub_right {a b c : ℤ} (h : -b < a - c) : c < a + b :=\n  int.lt_add_of_sub_right_lt (int.add_lt_of_lt_sub_left h)\n#align lt_add_of_neg_lt_sub_right lt_add_of_neg_lt_sub_right\n\n",
 "lt_add_of_neg_lt_sub_left":
 "protected theorem lt_add_of_neg_lt_sub_left {a b c : ℤ} (h : -a < b - c) : c < a + b :=\n  int.lt_add_of_neg_add_lt_left (int.add_lt_of_lt_sub_right h)\n#align lt_add_of_neg_lt_sub_left lt_add_of_neg_lt_sub_left\n\n",
 "lt_add_of_neg_add_lt_right":
 "protected theorem lt_add_of_neg_add_lt_right {a b c : ℤ} (h : -c + a < b) : a < b + c :=\n  by\n  rw [int.add_comm] at h\n  exact int.lt_add_of_sub_right_lt h\n#align lt_add_of_neg_add_lt_right lt_add_of_neg_add_lt_right\n\n",
 "lt_add_of_neg_add_lt_left":
 "#print lt_add_of_neg_add_lt_left /-\nprotected theorem lt_add_of_neg_add_lt_left {a b c : ℤ} (h : -b + a < c) : a < b + c :=\n  by\n  rw [int.add_comm] at h\n  exact int.lt_add_of_sub_left_lt h\n#align lt_add_of_neg_add_lt_left lt_add_of_neg_add_lt_left\n-/\n\n",
 "lt_add_of_neg_add_lt":
 "#print lt_add_of_neg_add_lt /-\nprotected theorem lt_add_of_neg_add_lt {a b c : ℤ} (h : -b + a < c) : a < b + c :=\n  by\n  have h := int.add_lt_add_left h b\n  rwa [int.add_neg_cancel_left] at h\n#align lt_add_of_neg_add_lt lt_add_of_neg_add_lt\n-/\n\n",
 "lt_add_of_le_of_pos":
 "#print lt_add_of_le_of_pos /-\nprotected theorem lt_add_of_le_of_pos {a b c : ℤ} (hbc : b ≤ c) (ha : 0 < a) : b < c + a :=\n  int.add_zero b ▸ int.add_lt_add_of_le_of_lt hbc ha\n#align lt_add_of_le_of_pos lt_add_of_le_of_pos\n-/\n\n",
 "le_trans":
 "#print le_trans /-\nprotected theorem le_trans {a b c : ℤ} (h₁ : a ≤ b) (h₂ : b ≤ c) : a ≤ c :=\n  le.elim h₁ fun n => fun hn : a + n = b =>\n    le.elim h₂ fun m => fun hm : b + m = c => by apply le.intro; rw [← hm, ← hn, int.add_assoc]; rfl\n#align le_trans le_trans\n-/\n\n",
 "le_total":
 "#print le_total /-\nprotected theorem le_total (a b : ℤ) : a ≤ b ∨ b ≤ a :=\n  or.imp_right\n    (fun H : NonNeg (-(b - a)) =>\n      have : -(b - a) = a - b := by simp [int.add_comm]\n      show NonNeg (a - b) from this ▸ H)\n    (nonneg_or_nonneg_neg (b - a))\n#align le_total le_total\n-/\n\n",
 "le_sub_right_of_add_le":
 "#print le_sub_right_of_add_le /-\nprotected theorem le_sub_right_of_add_le {a b c : ℤ} (h : a + b ≤ c) : a ≤ c - b :=\n  by\n  have h := int.add_le_add_right h (-b)\n  rwa [int.add_neg_cancel_right] at h\n#align le_sub_right_of_add_le le_sub_right_of_add_le\n-/\n\n",
 "le_sub_one_of_lt":
 "theorem le_sub_one_of_lt {a b : ℤ} (H : a < b) : a ≤ b - 1 :=\n  int.le_sub_right_of_add_le H\n#align le_sub_one_of_lt le_sub_one_of_lt\n\n",
 "le_sub_left_of_add_le":
 "#print le_sub_left_of_add_le /-\nprotected theorem le_sub_left_of_add_le {a b c : ℤ} (h : a + b ≤ c) : b ≤ c - a :=\n  by\n  have h := int.add_le_add_right h (-a)\n  rwa [int.add_comm a b, int.add_neg_cancel_right] at h\n#align le_sub_left_of_add_le le_sub_left_of_add_le\n-/\n\n",
 "le_refl":
 "#print le_refl /-\nprotected theorem le_refl (a : ℤ) : a ≤ a :=\n  le.intro (int.add_zero a)\n#align le_refl le_refl\n-/\n\n",
 "le_of_sub_one_lt":
 "theorem le_of_sub_one_lt {a b : ℤ} (H : a - 1 < b) : a ≤ b :=\n  le_of_lt_add_one <| int.lt_add_of_sub_right_lt H\n#align le_of_sub_one_lt le_of_sub_one_lt\n\n",
 "le_of_sub_nonpos":
 "#print le_of_sub_nonpos /-\nprotected theorem le_of_sub_nonpos {a b : ℤ} (h : a - b ≤ 0) : a ≤ b :=\n  by\n  have h := int.add_le_add_right h b\n  rwa [int.sub_add_cancel, int.zero_add] at h\n#align le_of_sub_nonpos le_of_sub_nonpos\n-/\n\n",
 "le_of_sub_nonneg":
 "#print le_of_sub_nonneg /-\nprotected theorem le_of_sub_nonneg {a b : ℤ} (h : 0 ≤ a - b) : b ≤ a :=\n  by\n  have h := int.add_le_add_right h b\n  rwa [int.sub_add_cancel, int.zero_add] at h\n#align le_of_sub_nonneg le_of_sub_nonneg\n-/\n\n",
 "le_of_neg_le_neg":
 "#print le_of_neg_le_neg /-\nprotected theorem le_of_neg_le_neg {a b : ℤ} (h : -b ≤ -a) : a ≤ b :=\n  suffices - -a ≤ - -b by simp [int.neg_neg] at this; assumption\n  int.neg_le_neg h\n#align le_of_neg_le_neg le_of_neg_le_neg\n-/\n\n",
 "le_of_lt_add_one":
 "theorem le_of_lt_add_one {a b : ℤ} (H : a < b + 1) : a ≤ b :=\n  int.le_of_add_le_add_right H\n#align le_of_lt_add_one le_of_lt_add_one\n\n",
 "le_of_lt":
 "#print le_of_lt /-\ntheorem le_of_lt {a b : ℤ} (h : a < b) : a ≤ b :=\n  lt.elim h fun n => fun hn : a + nat.succ n = b => le.intro hn\n#align le_of_lt le_of_lt\n-/\n\n",
 "le_of_coe_nat_le_coe_nat":
 "theorem le_of_coe_nat_le_coe_nat {m n : ℕ} (h : (↑m : ℤ) ≤ ↑n) : m ≤ n :=\n  le.elim h fun k => fun hk : ↑m + ↑k = ↑n =>\n    have : m + k = n := Int.ofNat.inj ((Int.ofNat_add m k).trans hk)\n    nat.le.intro this\n#align le_of_coe_nat_le_coe_nat le_of_coe_nat_le_coe_nat\n\n",
 "le_of_add_le_add_right":
 "#print le_of_add_le_add_right /-\nprotected theorem le_of_add_le_add_right {a b c : ℤ} (h : a + b ≤ c + b) : a ≤ c :=\n  int.le_of_add_le_add_left (show b + a ≤ b + c by rw [int.add_comm b a, int.add_comm b c]; assumption)\n#align le_of_add_le_add_right le_of_add_le_add_right\n-/\n\n",
 "le_of_add_le_add_left":
 "#print le_of_add_le_add_left /-\nprotected theorem le_of_add_le_add_left {a b c : ℤ} (h : a + b ≤ a + c) : b ≤ c :=\n  by\n  have : -a + (a + b) ≤ -a + (a + c) := int.add_le_add_left h _\n  simp [int.neg_add_cancel_left] at this\n  assumption\n#align le_of_add_le_add_left le_of_add_le_add_left\n-/\n\n",
 "le_neg_of_le_neg":
 "#print le_neg_of_le_neg /-\nprotected theorem le_neg_of_le_neg {a b : ℤ} (h : a ≤ -b) : b ≤ -a :=\n  by\n  have h := int.neg_le_neg h\n  rwa [int.neg_neg] at h\n#align le_neg_of_le_neg le_neg_of_le_neg\n-/\n\n",
 "le_neg_add_of_add_le":
 "#print le_neg_add_of_add_le /-\nprotected theorem le_neg_add_of_add_le {a b c : ℤ} (h : a + b ≤ c) : b ≤ -a + c :=\n  by\n  have h := int.add_le_add_left h (-a)\n  rwa [int.neg_add_cancel_left] at h\n#align le_neg_add_of_add_le le_neg_add_of_add_le\n-/\n\n",
 "le_nat_abs":
 "theorem le_nat_abs {a : ℤ} : a ≤ natAbs a :=\n  or.elim (le_total 0 a) (fun h => by rw [eq_nat_abs_of_zero_le h] <;> rfl) fun h => le_trans h (ofNat_zero_le _)\n#align le_nat_abs le_nat_abs\n\n",
 "le_antisymm":
 "#print le_antisymm /-\nprotected theorem le_antisymm {a b : ℤ} (h₁ : a ≤ b) (h₂ : b ≤ a) : a = b :=\n  le.elim h₁ fun n => fun hn : a + n = b =>\n    le.elim h₂ fun m => fun hm : b + m = a =>\n      have : a + ↑(n + m) = a + 0 := by rw [Int.ofNat_add, ← int.add_assoc, hn, hm, int.add_zero a]\n      have : (↑(n + m) : ℤ) = 0 := int.add_left_cancel this\n      have : n + m = 0 := Int.ofNat.inj this\n      have : n = 0 := nat.eq_zero_of_add_eq_zero_right this\n      show a = b by rw [← hn, this, Int.ofNat_zero, int.add_zero a]\n#align le_antisymm le_antisymm\n-/\n\n",
 "le_add_of_sub_right_le":
 "protected theorem le_add_of_sub_right_le {a b c : ℤ} (h : a - c ≤ b) : a ≤ b + c :=\n  by\n  have h := int.add_le_add_right h c\n  rwa [int.sub_add_cancel] at h\n#align le_add_of_sub_right_le le_add_of_sub_right_le\n\n",
 "le_add_of_sub_left_le":
 "#print le_add_of_sub_left_le /-\nprotected theorem le_add_of_sub_left_le {a b c : ℤ} (h : a - b ≤ c) : a ≤ b + c :=\n  by\n  have h := int.add_le_add_right h b\n  rwa [int.sub_add_cancel, int.add_comm] at h\n#align le_add_of_sub_left_le le_add_of_sub_left_le\n-/\n\n",
 "le_add_of_nonneg_right":
 "#print le_add_of_nonneg_right /-\nprotected theorem le_add_of_nonneg_right {a b : ℤ} (h : 0 ≤ b) : a ≤ a + b :=\n  by\n  have : a + b ≥ a + 0 := int.add_le_add_left h a\n  rwa [int.add_zero] at this\n#align le_add_of_nonneg_right le_add_of_nonneg_right\n-/\n\n",
 "le_add_of_nonneg_left":
 "#print le_add_of_nonneg_left /-\nprotected theorem le_add_of_nonneg_left {a b : ℤ} (h : 0 ≤ b) : a ≤ b + a :=\n  by\n  have : 0 + a ≤ b + a := int.add_le_add_right h a\n  rwa [int.zero_add] at this\n#align le_add_of_nonneg_left le_add_of_nonneg_left\n-/\n\n",
 "le_add_of_neg_le_sub_right":
 "protected theorem le_add_of_neg_le_sub_right {a b c : ℤ} (h : -b ≤ a - c) : c ≤ a + b :=\n  int.le_add_of_sub_right_le (int.add_le_of_le_sub_left h)\n#align le_add_of_neg_le_sub_right le_add_of_neg_le_sub_right\n\n",
 "le_add_of_neg_le_sub_left":
 "protected theorem le_add_of_neg_le_sub_left {a b c : ℤ} (h : -a ≤ b - c) : c ≤ a + b :=\n  int.le_add_of_neg_add_le_left (int.add_le_of_le_sub_right h)\n#align le_add_of_neg_le_sub_left le_add_of_neg_le_sub_left\n\n",
 "le_add_of_neg_add_le_right":
 "protected theorem le_add_of_neg_add_le_right {a b c : ℤ} (h : -c + a ≤ b) : a ≤ b + c :=\n  by\n  rw [int.add_comm] at h\n  exact int.le_add_of_sub_right_le h\n#align le_add_of_neg_add_le_right le_add_of_neg_add_le_right\n\n",
 "le_add_of_neg_add_le_left":
 "protected theorem le_add_of_neg_add_le_left {a b c : ℤ} (h : -b + a ≤ c) : a ≤ b + c :=\n  by\n  rw [int.add_comm] at h\n  exact int.le_add_of_sub_left_le h\n#align le_add_of_neg_add_le_left le_add_of_neg_add_le_left\n\n",
 "le_add_of_neg_add_le":
 "protected theorem le_add_of_neg_add_le {a b c : ℤ} (h : -b + a ≤ c) : a ≤ b + c :=\n  by\n  have h := int.add_le_add_left h b\n  rwa [int.add_neg_cancel_left] at h\n#align le_add_of_neg_add_le le_add_of_neg_add_le\n\n",
 "intro_sub":
 "theorem le.intro_sub {a b : ℤ} {n : ℕ} (h : b - a = n) : a ≤ b :=\n  show NonNeg (b - a) by rw [h] <;> trivial\n#align le.intro_sub le.intro_sub\n\n",
 "intro":
 "theorem lt.intro {a b : ℤ} {n : ℕ} (h : a + nat.succ n = b) : a < b :=\n  h ▸ lt_add_succ a n\n#align lt.intro lt.intro\n\n",
 "exists_eq_neg_of_nat":
 "theorem exists_eq_neg_of_nat {a : ℤ} (H : a ≤ 0) : ∃ n : ℕ, a = -n :=\n  let ⟨n, h⟩ := eq_ofNat_of_zero_le (int.neg_nonneg_of_nonpos H)\n  ⟨n, int.eq_neg_of_eq_neg h.symm⟩\n#align exists_eq_neg_of_nat exists_eq_neg_of_nat\n\n",
 "eq_zero_or_eq_zero_of_mul_eq_zero":
 "protected theorem eq_zero_or_eq_zero_of_mul_eq_zero {a b : ℤ} (h : a * b = 0) : a = 0 ∨ b = 0 :=\n  match lt_trichotomy 0 a with\n  | or.inl hlt₁ =>\n    match lt_trichotomy 0 b with\n    | or.inl hlt₂ => by\n      have : 0 < a * b := int.mul_pos hlt₁ hlt₂\n      rw [h] at this\n      exact absurd this (lt_irrefl _)\n    | or.inr (or.inl heq₂) => or.inr heq₂.symm\n    | or.inr (or.inr hgt₂) => by\n      have : 0 > a * b := int.mul_neg_of_pos_of_neg hlt₁ hgt₂\n      rw [h] at this\n      exact absurd this (lt_irrefl _)\n  | or.inr (or.inl heq₁) => or.inl heq₁.symm\n  | or.inr (or.inr hgt₁) =>\n    match lt_trichotomy 0 b with\n    | or.inl hlt₂ => by\n      have : 0 > a * b := int.mul_neg_of_neg_of_pos hgt₁ hlt₂\n      rw [h] at this\n      exact absurd this (lt_irrefl _)\n    | or.inr (or.inl heq₂) => or.inr heq₂.symm\n    | or.inr (or.inr hgt₂) => by\n      have : 0 < a * b := int.mul_pos_of_neg_of_neg hgt₁ hgt₂\n      rw [h] at this\n      exact absurd this (lt_irrefl _)\n#align eq_zero_or_eq_zero_of_mul_eq_zero eq_zero_or_eq_zero_of_mul_eq_zero\n\n",
 "eq_zero_of_sign_eq_zero":
 "theorem eq_zero_of_sign_eq_zero : ∀ {a : ℤ}, sign a = 0 → a = 0\n  | 0, _ => rfl\n#align eq_zero_of_sign_eq_zero eq_zero_of_sign_eq_zero\n\n",
 "eq_succ_of_zero_lt":
 "theorem eq_succ_of_zero_lt {a : ℤ} (h : 0 < a) : ∃ n : ℕ, a = n.succ :=\n  let ⟨n, (h : ↑(1 + n) = a)⟩ := le.dest h\n  ⟨n, by rw [nat.add_comm] at h <;> exact h.symm⟩\n#align eq_succ_of_zero_lt eq_succ_of_zero_lt\n\n",
 "eq_one_of_mul_eq_self_right":
 "theorem eq_one_of_mul_eq_self_right {a b : ℤ} (Hpos : b ≠ 0) (H : b * a = b) : a = 1 :=\n  int.eq_of_mul_eq_mul_left Hpos (by rw [int.mul_one, H])\n#align eq_one_of_mul_eq_self_right eq_one_of_mul_eq_self_right\n\n",
 "eq_one_of_mul_eq_self_left":
 "theorem eq_one_of_mul_eq_self_left {a b : ℤ} (Hpos : a ≠ 0) (H : b * a = a) : b = 1 :=\n  int.eq_of_mul_eq_mul_right Hpos (by rw [int.one_mul, H])\n#align eq_one_of_mul_eq_self_left eq_one_of_mul_eq_self_left\n\n",
 "eq_of_sub_eq_zero":
 "#print eq_of_sub_eq_zero /-\nprotected theorem eq_of_sub_eq_zero {a b : ℤ} (h : a - b = 0) : a = b :=\n  by\n  have : 0 + b = b := by rw [int.zero_add]\n  have : a - b + b = b := by rwa [h]\n  rwa [int.sub_eq_add_neg, int.neg_add_cancel_right] at this\n#align eq_of_sub_eq_zero eq_of_sub_eq_zero\n-/\n\n",
 "eq_of_mul_eq_mul_right":
 "protected theorem eq_of_mul_eq_mul_right {a b c : ℤ} (ha : a ≠ 0) (h : b * a = c * a) : b = c :=\n  have : b * a - c * a = 0 := int.sub_eq_zero_of_eq h\n  have : (b - c) * a = 0 := by rw [int.sub_mul, this]\n  have : b - c = 0 := (Int.eq_zero_or_eq_zero_of_mul_eq_zero this).resolve_right ha\n  int.eq_of_sub_eq_zero this\n#align eq_of_mul_eq_mul_right eq_of_mul_eq_mul_right\n\n",
 "eq_of_mul_eq_mul_left":
 "protected theorem eq_of_mul_eq_mul_left {a b c : ℤ} (ha : a ≠ 0) (h : a * b = a * c) : b = c :=\n  have : a * b - a * c = 0 := int.sub_eq_zero_of_eq h\n  have : a * (b - c) = 0 := by rw [int.mul_sub, this]\n  have : b - c = 0 := (Int.eq_zero_or_eq_zero_of_mul_eq_zero this).resolve_left ha\n  int.eq_of_sub_eq_zero this\n#align eq_of_mul_eq_mul_left eq_of_mul_eq_mul_left\n\n",
 "eq_neg_succ_of_lt_zero":
 "theorem eq_neg_succ_of_lt_zero : ∀ {a : ℤ}, a < 0 → ∃ n : ℕ, a = -[n+1]\n  | (n : ℕ), h => absurd h (not_lt_of_ge (ofNat_zero_le _))\n  | -[n+1], h => ⟨n, rfl⟩\n#align eq_neg_succ_of_lt_zero eq_neg_succ_of_lt_zero\n\n",
 "eq_neg_of_eq_neg":
 "protected theorem eq_neg_of_eq_neg {a b : ℤ} (h : a = -b) : b = -a := by rw [h, int.neg_neg]\n#align eq_neg_of_eq_neg eq_neg_of_eq_neg\n\n",
 "eq_nat_abs_of_zero_le":
 "theorem eq_nat_abs_of_zero_le {a : ℤ} (h : 0 ≤ a) : a = natAbs a :=\n  by\n  let ⟨n, e⟩ := eq_ofNat_of_zero_le h\n  rw [e] <;> rfl\n#align eq_nat_abs_of_zero_le eq_nat_abs_of_zero_le\n\n",
 "eq_coe_of_zero_le":
 "theorem eq_coe_of_zero_le {a : ℤ} (h : 0 ≤ a) : ∃ n : ℕ, a = n :=\n  by\n  have t := le.dest_sub h\n  simp at t\n  exact t\n#align eq_coe_of_zero_le eq_coe_of_zero_le\n\n",
 "elim":
 "theorem lt.elim {a b : ℤ} (h : a < b) {P : Prop} (h' : ∀ n : ℕ, a + ↑(nat.succ n) = b → P) : P :=\n  exists.elim (lt.dest h) h'\n#align lt.elim lt.elim\n\n",
 "dest_sub":
 "theorem le.dest_sub {a b : ℤ} (h : a ≤ b) : ∃ n : ℕ, b - a = n :=\n  nonneg.elim h\n#align le.dest_sub le.dest_sub\n\n",
 "dest":
 "theorem lt.dest {a b : ℤ} (h : a < b) : ∃ n : ℕ, a + ↑(nat.succ n) = b :=\n  le.elim h fun n => fun hn : a + 1 + n = b => exists.intro n (by rw [← hn, int.add_assoc, int.add_comm 1]; rfl)\n#align lt.dest lt.dest\n\n",
 "coe_zero_le":
 "theorem coe_zero_le (n : ℕ) : 0 ≤ (↑n : ℤ) :=\n  ofNat_le_ofNat_of_le n.zero_le\n#align coe_zero_le coe_zero_le\n\n",
 "coe_succ_pos":
 "theorem coe_succ_pos (n : Nat) : 0 < (nat.succ n : ℤ) :=\n  ofNat_lt_ofNat_of_lt (nat.succ_pos _)\n#align coe_succ_pos coe_succ_pos\n\n",
 "coe_nat_lt_coe_nat_of_lt":
 "theorem coe_nat_lt_coe_nat_of_lt {m n : ℕ} (h : m < n) : (↑m : ℤ) < ↑n :=\n  (ofNat_lt _ _).mpr h\n#align coe_nat_lt_coe_nat_of_lt coe_nat_lt_coe_nat_of_lt\n\n",
 "coe_nat_lt_coe_nat_iff":
 "theorem coe_nat_lt_coe_nat_iff (n m : ℕ) : (↑n : ℤ) < ↑m ↔ n < m := by\n  rw [lt_iff_add_one_le, ← Int.ofNat_succ, coe_nat_le_coe_nat_iff]; rfl\n#align coe_nat_lt_coe_nat_iff coe_nat_lt_coe_nat_iff\n\n",
 "coe_nat_le_coe_nat_of_le":
 "theorem coe_nat_le_coe_nat_of_le {m n : ℕ} (h : m ≤ n) : (↑m : ℤ) ≤ ↑n :=\n  match nat.le.dest h with\n  | ⟨k, (hk : m + k = n)⟩ => le.intro (by rw [← hk]; rfl)\n#align coe_nat_le_coe_nat_of_le coe_nat_le_coe_nat_of_le\n\n",
 "coe_nat_le_coe_nat_iff":
 "theorem coe_nat_le_coe_nat_iff (m n : ℕ) : (↑m : ℤ) ≤ ↑n ↔ m ≤ n :=\n  iff.intro le_of_ofNat_le_ofNat ofNat_le_ofNat_of_le\n#align coe_nat_le_coe_nat_iff coe_nat_le_coe_nat_iff\n\n",
 "add_sub_cancel":
 "#print add_sub_cancel /-\nprotected theorem add_sub_cancel (a b : ℤ) : a + b - b = a :=\n  int.add_neg_cancel_right a b\n#align add_sub_cancel add_sub_cancel\n-/\n\n",
 "add_sub_assoc":
 "#print add_sub_assoc /-\nprotected theorem add_sub_assoc (a b c : ℤ) : a + b - c = a + (b - c) := by\n  rw [int.sub_eq_add_neg, int.add_assoc, ← int.sub_eq_add_neg]\n#align add_sub_assoc add_sub_assoc\n-/\n\n",
 "add_pos_of_pos_of_nonneg":
 "#print add_pos_of_pos_of_nonneg /-\nprotected theorem add_pos_of_pos_of_nonneg {a b : ℤ} (ha : 0 < a) (hb : 0 ≤ b) : 0 < a + b :=\n  int.zero_add (0 : ℤ) ▸ int.add_lt_add_of_lt_of_le ha hb\n#align add_pos_of_pos_of_nonneg add_pos_of_pos_of_nonneg\n-/\n\n",
 "add_pos_of_nonneg_of_pos":
 "#print add_pos_of_nonneg_of_pos /-\nprotected theorem add_pos_of_nonneg_of_pos {a b : ℤ} (ha : 0 ≤ a) (hb : 0 < b) : 0 < a + b :=\n  int.zero_add (0 : ℤ) ▸ int.add_lt_add_of_le_of_lt ha hb\n#align add_pos_of_nonneg_of_pos add_pos_of_nonneg_of_pos\n-/\n\n",
 "add_pos":
 "#print add_pos /-\nprotected theorem add_pos {a b : ℤ} (ha : 0 < a) (hb : 0 < b) : 0 < a + b :=\n  int.zero_add (0 : ℤ) ▸ int.add_lt_add ha hb\n#align add_pos add_pos\n-/\n\n",
 "add_one_le_of_lt":
 "theorem add_one_le_of_lt {a b : ℤ} (H : a < b) : a + 1 ≤ b :=\n  H\n#align add_one_le_of_lt add_one_le_of_lt\n\n",
 "add_nonpos":
 "#print add_nonpos /-\nprotected theorem add_nonpos {a b : ℤ} (ha : a ≤ 0) (hb : b ≤ 0) : a + b ≤ 0 :=\n  int.zero_add (0 : ℤ) ▸ int.add_le_add ha hb\n#align add_nonpos add_nonpos\n-/\n\n",
 "add_nonneg":
 "#print add_nonneg /-\n-- here we start using properties of zero.\nprotected theorem add_nonneg {a b : ℤ} (ha : 0 ≤ a) (hb : 0 ≤ b) : 0 ≤ a + b :=\n  int.zero_add (0 : ℤ) ▸ int.add_le_add ha hb\n#align add_nonneg add_nonneg\n-/\n\n",
 "add_neg_of_nonpos_of_neg":
 "#print add_neg_of_nonpos_of_neg /-\nprotected theorem add_neg_of_nonpos_of_neg {a b : ℤ} (ha : a ≤ 0) (hb : b < 0) : a + b < 0 :=\n  int.zero_add (0 : ℤ) ▸ int.add_lt_add_of_le_of_lt ha hb\n#align add_neg_of_nonpos_of_neg add_neg_of_nonpos_of_neg\n-/\n\n",
 "add_neg_of_neg_of_nonpos":
 "#print add_neg_of_neg_of_nonpos /-\nprotected theorem add_neg_of_neg_of_nonpos {a b : ℤ} (ha : a < 0) (hb : b ≤ 0) : a + b < 0 :=\n  int.zero_add (0 : ℤ) ▸ int.add_lt_add_of_lt_of_le ha hb\n#align add_neg_of_neg_of_nonpos add_neg_of_neg_of_nonpos\n-/\n\n",
 "add_neg_cancel_right":
 "#print add_neg_cancel_right /-\nprotected theorem add_neg_cancel_right (a b : ℤ) : a + b + -b = a := by\n  rw [int.add_assoc, int.add_right_neg, int.add_zero]\n#align add_neg_cancel_right add_neg_cancel_right\n-/\n\n",
 "add_neg_cancel_left":
 "#print add_neg_cancel_left /-\nprotected theorem add_neg_cancel_left (a b : ℤ) : a + (-a + b) = b := by\n  rw [← int.add_assoc, int.add_right_neg, int.zero_add]\n#align add_neg_cancel_left add_neg_cancel_left\n-/\n\n",
 "add_neg":
 "#print add_neg /-\nprotected theorem add_neg {a b : ℤ} (ha : a < 0) (hb : b < 0) : a + b < 0 :=\n  int.zero_add (0 : ℤ) ▸ int.add_lt_add ha hb\n#align add_neg add_neg\n-/\n\n",
 "add_lt_of_lt_sub_right":
 "#print add_lt_of_lt_sub_right /-\nprotected theorem add_lt_of_lt_sub_right {a b c : ℤ} (h : a < c - b) : a + b < c :=\n  by\n  have h := int.add_lt_add_right h b\n  rwa [int.sub_add_cancel] at h\n#align add_lt_of_lt_sub_right add_lt_of_lt_sub_right\n-/\n\n",
 "add_lt_of_lt_sub_left":
 "#print add_lt_of_lt_sub_left /-\nprotected theorem add_lt_of_lt_sub_left {a b c : ℤ} (h : b < c - a) : a + b < c :=\n  by\n  have h := int.add_lt_add_left h a\n  rwa [← int.add_sub_assoc, int.add_comm a c, int.add_sub_cancel] at h\n#align add_lt_of_lt_sub_left add_lt_of_lt_sub_left\n-/\n\n",
 "add_lt_of_lt_neg_add":
 "#print add_lt_of_lt_neg_add /-\nprotected theorem add_lt_of_lt_neg_add {a b c : ℤ} (h : b < -a + c) : a + b < c :=\n  by\n  have h := int.add_lt_add_left h a\n  rwa [int.add_neg_cancel_left] at h\n#align add_lt_of_lt_neg_add add_lt_of_lt_neg_add\n-/\n\n",
 "add_lt_add_right":
 "#print add_lt_add_right /-\nprotected theorem add_lt_add_right {a b : ℤ} (h : a < b) (c : ℤ) : a + c < b + c :=\n  by\n  rw [int.add_comm a c, int.add_comm b c]\n  exact int.add_lt_add_left h c\n#align add_lt_add_right add_lt_add_right\n-/\n\n",
 "add_lt_add_of_lt_of_le":
 "#print add_lt_add_of_lt_of_le /-\nprotected theorem add_lt_add_of_lt_of_le {a b c d : ℤ} (h₁ : a < b) (h₂ : c ≤ d) : a + c < b + d :=\n  lt_of_lt_of_le (int.add_lt_add_right h₁ c) (int.add_le_add_left h₂ b)\n#align add_lt_add_of_lt_of_le add_lt_add_of_lt_of_le\n-/\n\n",
 "add_lt_add_of_le_of_lt":
 "#print add_lt_add_of_le_of_lt /-\nprotected theorem add_lt_add_of_le_of_lt {a b c d : ℤ} (h₁ : a ≤ b) (h₂ : c < d) : a + c < b + d :=\n  lt_of_le_of_lt (int.add_le_add_right h₁ c) (int.add_lt_add_left h₂ b)\n#align add_lt_add_of_le_of_lt add_lt_add_of_le_of_lt\n-/\n\n",
 "add_lt_add_left":
 "#print add_lt_add_left /-\nprotected theorem add_lt_add_left {a b : ℤ} (h : a < b) (c : ℤ) : c + a < c + b :=\n  Iff.mpr (int.lt_iff_le_and_ne _ _)\n    (and.intro (int.add_le_add_left (le_of_lt h) _) fun heq =>\n      int.lt_irrefl b (by rw [int.add_left_cancel HEq] at h; exact h))\n#align add_lt_add_left add_lt_add_left\n-/\n\n",
 "add_lt_add":
 "#print add_lt_add /-\nprotected theorem add_lt_add {a b c d : ℤ} (h₁ : a < b) (h₂ : c < d) : a + c < b + d :=\n  lt_trans (int.add_lt_add_right h₁ c) (int.add_lt_add_left h₂ b)\n#align add_lt_add add_lt_add\n-/\n\n",
 "add_le_of_le_sub_right":
 "#print add_le_of_le_sub_right /-\nprotected theorem add_le_of_le_sub_right {a b c : ℤ} (h : a ≤ c - b) : a + b ≤ c :=\n  by\n  have h := int.add_le_add_right h b\n  rwa [int.sub_add_cancel] at h\n#align add_le_of_le_sub_right add_le_of_le_sub_right\n-/\n\n",
 "add_le_of_le_sub_left":
 "#print add_le_of_le_sub_left /-\nprotected theorem add_le_of_le_sub_left {a b c : ℤ} (h : b ≤ c - a) : a + b ≤ c :=\n  by\n  have h := int.add_le_add_left h a\n  rwa [← int.add_sub_assoc, int.add_comm a c, int.add_sub_cancel] at h\n#align add_le_of_le_sub_left add_le_of_le_sub_left\n-/\n\n",
 "add_le_of_le_neg_add":
 "#print add_le_of_le_neg_add /-\nprotected theorem add_le_of_le_neg_add {a b c : ℤ} (h : b ≤ -a + c) : a + b ≤ c :=\n  by\n  have h := int.add_le_add_left h a\n  rwa [int.add_neg_cancel_left] at h\n#align add_le_of_le_neg_add add_le_of_le_neg_add\n-/\n\n",
 "add_le_add_three":
 "#print add_le_add_three /-\nprotected theorem add_le_add_three {a b c d e f : ℤ} (h₁ : a ≤ d) (h₂ : b ≤ e) (h₃ : c ≤ f) : a + b + c ≤ d + e + f :=\n  by\n  apply le_trans\n  apply int.add_le_add\n  apply int.add_le_add\n  assumption'\n  apply le_refl\n#align add_le_add_three add_le_add_three\n-/\n\n",
 "add_le_add_right":
 "#print add_le_add_right /-\nprotected theorem add_le_add_right {a b : ℤ} (h : a ≤ b) (c : ℤ) : a + c ≤ b + c :=\n  int.add_comm c a ▸ int.add_comm c b ▸ int.add_le_add_left h c\n#align add_le_add_right add_le_add_right\n-/\n\n",
 "add_le_add_left":
 "#print add_le_add_left /-\nprotected theorem add_le_add_left {a b : ℤ} (h : a ≤ b) (c : ℤ) : c + a ≤ c + b :=\n  le.elim h fun n => fun hn : a + n = b => le.intro (show c + a + n = c + b by rw [int.add_assoc, hn])\n#align add_le_add_left add_le_add_left\n-/\n\n",
 "add_le_add":
 "#print add_le_add /-\nprotected theorem add_le_add {a b c d : ℤ} (h₁ : a ≤ b) (h₂ : c ≤ d) : a + c ≤ b + d :=\n  le_trans (int.add_le_add_right h₁ c) (int.add_le_add_left h₂ b)\n#align add_le_add add_le_add\n-/\n\n"}