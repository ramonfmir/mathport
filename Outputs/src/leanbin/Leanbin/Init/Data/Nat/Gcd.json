{"induction":
 "@[elab_as_elim]\ntheorem gcd.induction {P : ℕ → ℕ → Prop} (m n : ℕ) (H0 : ∀ n, P 0 n) (H1 : ∀ m n, 0 < m → P (n % m) m → P m n) :\n    P m n :=\n  @induction _ _ lt_wfRel (fun m => ∀ n, P m n) m\n    (fun k IH => by\n      induction' k with k ih\n      exact H0\n      exact fun n => H1 _ _ (succ_pos _) (IH _ (mod_lt _ (succ_pos _)) _))\n    n\n#align gcd.induction gcd.induction\n\n",
 "gcd_zero_right":
 "#print gcd_zero_right /-\n@[simp]\ntheorem gcd_zero_right (n : ℕ) : gcd n 0 = n := by cases n <;> simp [gcd]\n#align gcd_zero_right gcd_zero_right\n-/\n\n",
 "gcd_zero_left":
 "#print gcd_zero_left /-\n/-\nCopyright (c) 2014 Jeremy Avigad. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro\n\n-/\n@[simp]\ntheorem gcd_zero_left (x : nat) : gcd 0 x = x := by simp [gcd]\n#align gcd_zero_left gcd_zero_left\n-/\n\n",
 "gcd_succ":
 "@[simp]\ntheorem gcd_succ (x y : nat) : gcd (succ x) y = gcd (y % succ x) (succ x) := by simp [gcd]\n#align gcd_succ gcd_succ\n\n",
 "gcd_self":
 "@[simp]\ntheorem gcd_self (n : ℕ) : gcd n n = n := by cases n <;> simp [gcd, mod_self]\n#align gcd_self gcd_self\n\n",
 "gcd_rec":
 "theorem gcd_rec (m n : ℕ) : gcd m n = gcd (n % m) m := by cases m <;> simp [gcd]\n#align gcd_rec gcd_rec\n\n",
 "gcd_one_left":
 "#print gcd_one_left /-\n@[simp]\ntheorem gcd_one_left (n : ℕ) : gcd 1 n = 1 := by simp [gcd]\n#align gcd_one_left gcd_one_left\n-/\n\n",
 "gcd_def":
 "theorem gcd_def (x y : ℕ) : gcd x y = if x = 0 then y else gcd (y % x) x := by cases x <;> simp [gcd, succ_ne_zero]\n#align gcd_def gcd_def\n\n"}