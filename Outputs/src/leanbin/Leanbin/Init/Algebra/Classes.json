{"trichotomous_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print trichotomous_of /-\n@[elab_without_expected_type]\ntheorem trichotomous_of [is_trichotomous α r] : ∀ a b : α, «expr ≺ » a b ∨ a = b ∨ «expr ≺ » b a :=\n  trichotomous\n#align trichotomous_of trichotomous_of\n-/\n\n",
 "trichotomous":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print trichotomous /-\ntheorem trichotomous [is_trichotomous α r] : ∀ a b : α, «expr ≺ » a b ∨ a = b ∨ «expr ≺ » b a :=\n  is_trichotomous.trichotomous\n#align trichotomous trichotomous\n-/\n\n",
 "trans_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print trans_of /-\n@[elab_without_expected_type]\ntheorem trans_of [is_trans α r] {a b c : α} : «expr ≺ » a b → «expr ≺ » b c → «expr ≺ » a c :=\n  trans\n#align trans_of trans_of\n-/\n\n",
 "trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print trans /-\ntheorem trans [is_trans α r] {a b c : α} : «expr ≺ » a b → «expr ≺ » b c → «expr ≺ » a c :=\n  is_trans.trans _ _ _\n#align trans trans\n-/\n\n",
 "total_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print total_of /-\n@[elab_without_expected_type]\ntheorem total_of [is_total α r] (a b : α) : «expr ≺ » a b ∨ «expr ≺ » b a :=\n  is_total.total _ _\n#align total_of total_of\n-/\n\n",
 "symm_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print symm_of /-\n@[elab_without_expected_type]\ntheorem symm_of [is_symm α r] {a b : α} : «expr ≺ » a b → «expr ≺ » b a :=\n  symm\n#align symm_of symm_of\n-/\n\n",
 "symm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print symm /-\ntheorem symm [is_symm α r] {a b : α} : «expr ≺ » a b → «expr ≺ » b a :=\n  is_symm.symm _ _\n#align symm symm\n-/\n\n",
 "refl_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print refl_of /-\n@[elab_without_expected_type]\ntheorem refl_of [is_refl α r] (a : α) : «expr ≺ » a a :=\n  refl a\n#align refl_of refl_of\n-/\n\n",
 "refl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print refl /-\ntheorem refl [is_refl α r] (a : α) : «expr ≺ » a a :=\n  is_refl.refl a\n#align refl refl\n-/\n\n",
 "not_lt_of_lt":
 "#print not_lt_of_lt /-\ntheorem not_lt_of_lt {α : Type u} {lt : α → α → Prop} [is_strict_order α lt] {a b} : lt a b → ¬lt b a := fun h₁ h₂ =>\n  absurd (trans_of lt h₁ h₂) (irrefl_of lt _)\n#align not_lt_of_lt not_lt_of_lt\n-/\n\n",
 "not_lt_of_equiv'":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\ntheorem not_lt_of_equiv' {a b : α} : equiv a b → ¬«expr ≺ » b a := fun h => h.2\n#align not_lt_of_equiv' not_lt_of_equiv'\n\n",
 "not_lt_of_equiv":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\ntheorem not_lt_of_equiv {a b : α} : equiv a b → ¬«expr ≺ » a b := fun h => h.1\n#align not_lt_of_equiv not_lt_of_equiv\n\n",
 "lt_of_lt_of_incomp":
 "#print lt_of_lt_of_incomp /-\ntheorem lt_of_lt_of_incomp {α : Type u} {lt : α → α → Prop} [is_strict_weak_order α lt] [DecidableRel lt] :\n    ∀ {a b c}, lt a b → ¬lt b c ∧ ¬lt c b → lt a c := fun a b c hab ⟨nbc, ncb⟩ =>\n  have nca : ¬lt c a := fun hca => absurd (trans_of lt hca hab) ncb\n  decidable.by_contradiction fun nac : ¬lt a c =>\n    have : ¬lt a b ∧ ¬lt b a := incomp_trans_of lt ⟨nac, nca⟩ ⟨ncb, nbc⟩\n    absurd hab this.1\n#align lt_of_lt_of_incomp lt_of_lt_of_incomp\n-/\n\n",
 "lt_of_incomp_of_lt":
 "#print lt_of_incomp_of_lt /-\ntheorem lt_of_incomp_of_lt {α : Type u} {lt : α → α → Prop} [is_strict_weak_order α lt] [DecidableRel lt] :\n    ∀ {a b c}, ¬lt a b ∧ ¬lt b a → lt b c → lt a c := fun a b c ⟨nab, nba⟩ hbc =>\n  have nca : ¬lt c a := fun hca => absurd (trans_of lt hbc hca) nba\n  decidable.by_contradiction fun nac : ¬lt a c =>\n    have : ¬lt b c ∧ ¬lt c b := incomp_trans_of lt ⟨nba, nab⟩ ⟨nac, nca⟩\n    absurd hbc this.1\n#align lt_of_incomp_of_lt lt_of_incomp_of_lt\n-/\n\n",
 "is_strict_weak_order_of_is_total_preorder":
 "-- Notation for the equivalence relation induced by lt\ntheorem is_strict_weak_order_of_is_total_preorder {α : Type u} {le : α → α → Prop} {lt : α → α → Prop} [DecidableRel le]\n    [s : is_total_preorder α le] (h : ∀ a b, lt a b ↔ ¬le b a) : is_strict_weak_order α lt :=\n  { trans := fun a b c hab hbc =>\n      have nba : ¬le b a := Iff.mp (h _ _) hab\n      have ncb : ¬le c b := Iff.mp (h _ _) hbc\n      have hab : le a b := or.resolve_left (total_of le b a) nba\n      have nca : ¬le c a := fun hca : le c a =>\n        have hcb : le c b := trans_of le hca hab\n        absurd hcb ncb\n      Iff.mpr (h _ _) nca\n    irrefl := fun a hlt => absurd (refl_of le a) (Iff.mp (h _ _) hlt)\n    incomp_trans := fun a b c ⟨nab, nba⟩ ⟨nbc, ncb⟩ =>\n      have hba : le b a := decidable.of_not_not (Iff.mp (not_congr (h _ _)) nab)\n      have hab : le a b := decidable.of_not_not (Iff.mp (not_congr (h _ _)) nba)\n      have hcb : le c b := decidable.of_not_not (Iff.mp (not_congr (h _ _)) nbc)\n      have hbc : le b c := decidable.of_not_not (Iff.mp (not_congr (h _ _)) ncb)\n      have hac : le a c := trans_of le hab hbc\n      have hca : le c a := trans_of le hcb hba\n      and.intro (fun n => absurd hca (Iff.mp (h _ _) n)) fun n => absurd hac (Iff.mp (h _ _) n) }\n#align is_strict_weak_order_of_is_total_preorder is_strict_weak_order_of_is_total_preorder\n\n",
 "irrefl_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print irrefl_of /-\n@[elab_without_expected_type]\ntheorem irrefl_of [is_irrefl α r] (a : α) : ¬«expr ≺ » a a :=\n  irrefl a\n#align irrefl_of irrefl_of\n-/\n\n",
 "irrefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print irrefl /-\n/-\nCopyright (c) 2017 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura\n-/\n/-\n-- The following type class doesn't seem very useful, a regular simp lemma should work for this.\nclass is_inv (α : Type u) (β : Type v) (f : α → β) (g : out β → α) : Prop :=\n(inv : ∀ a, g (f a) = a)\n\n-- The following one can also be handled using a regular simp lemma\nclass is_idempotent (α : Type u) (f : α → α) : Prop :=\n(idempotent : ∀ a, f (f a) = f a)\n-/\ntheorem irrefl [is_irrefl α r] (a : α) : ¬«expr ≺ » a a :=\n  is_irrefl.irrefl a\n#align irrefl irrefl\n-/\n\n",
 "incomp_trans_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print incomp_trans_of /-\n@[elab_without_expected_type]\ntheorem incomp_trans_of [is_incomp_trans α r] {a b c : α} :\n    ¬«expr ≺ » a b ∧ ¬«expr ≺ » b a → ¬«expr ≺ » b c ∧ ¬«expr ≺ » c b → ¬«expr ≺ » a c ∧ ¬«expr ≺ » c a :=\n  incomp_trans\n#align incomp_trans_of incomp_trans_of\n-/\n\n",
 "incomp_trans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print incomp_trans /-\ntheorem incomp_trans [is_incomp_trans α r] {a b c : α} :\n    ¬«expr ≺ » a b ∧ ¬«expr ≺ » b a → ¬«expr ≺ » b c ∧ ¬«expr ≺ » c b → ¬«expr ≺ » a c ∧ ¬«expr ≺ » c a :=\n  is_incomp_trans.incomp_trans _ _ _\n#align incomp_trans incomp_trans\n-/\n\n",
 "incomp_iff_eq":
 "#print incomp_iff_eq /-\ntheorem incomp_iff_eq {α : Type u} {lt : α → α → Prop} [is_trichotomous α lt] [is_irrefl α lt] (a b) :\n    ¬lt a b ∧ ¬lt b a ↔ a = b :=\n  iff.intro eq_of_incomp fun hab => Eq.subst hab (and.intro (irrefl_of lt a) (irrefl_of lt a))\n#align incomp_iff_eq incomp_iff_eq\n-/\n\n",
 "etrans":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\ntheorem etrans {a b c : α} : equiv a b → equiv b c → equiv a c :=\n  incomp_trans\n#align etrans etrans\n\n",
 "esymm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\ntheorem esymm {a b : α} : equiv a b → equiv b a := fun ⟨h₁, h₂⟩ => ⟨h₂, h₁⟩\n#align esymm esymm\n\n",
 "erefl":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `equiv -/\ntheorem erefl (a : α) : equiv a a :=\n  ⟨irrefl a, irrefl a⟩\n#align erefl erefl\n\n",
 "eqv_lt_iff_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≈[ ] » -/\n#print eqv_lt_iff_eq /-\ntheorem eqv_lt_iff_eq {α : Type u} {lt : α → α → Prop} [is_trichotomous α lt] [is_irrefl α lt] (a b) :\n    «expr ≈[ ] » a lt b ↔ a = b :=\n  incomp_iff_eq a b\n#align eqv_lt_iff_eq eqv_lt_iff_eq\n-/\n\n",
 "eq_of_incomp":
 "#print eq_of_incomp /-\ntheorem eq_of_incomp {α : Type u} {lt : α → α → Prop} [is_trichotomous α lt] {a b} : ¬lt a b ∧ ¬lt b a → a = b :=\n  fun ⟨nab, nba⟩ =>\n  match trichotomous_of lt a b with\n  | or.inl hab => absurd hab nab\n  | or.inr (or.inl hab) => hab\n  | or.inr (or.inr hba) => absurd hba nba\n#align eq_of_incomp eq_of_incomp\n-/\n\n",
 "eq_of_eqv_lt":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≈[ ] » -/\n#print eq_of_eqv_lt /-\ntheorem eq_of_eqv_lt {α : Type u} {lt : α → α → Prop} [is_trichotomous α lt] {a b} : «expr ≈[ ] » a lt b → a = b :=\n  eq_of_incomp\n#align eq_of_eqv_lt eq_of_eqv_lt\n-/\n\n",
 "asymm_of":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print asymm_of /-\n@[elab_without_expected_type]\ntheorem asymm_of [is_asymm α r] {a b : α} : «expr ≺ » a b → ¬«expr ≺ » b a :=\n  asymm\n#align asymm_of asymm_of\n-/\n\n",
 "asymm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print asymm /-\ntheorem asymm [is_asymm α r] {a b : α} : «expr ≺ » a b → ¬«expr ≺ » b a :=\n  is_asymm.asymm _ _\n#align asymm asymm\n-/\n\n",
 "antisymm":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\n#print antisymm /-\ntheorem antisymm [is_antisymm α r] {a b : α} : «expr ≺ » a b → «expr ≺ » b a → a = b :=\n  is_antisymm.antisymm _ _\n#align antisymm antisymm\n-/\n\n"}