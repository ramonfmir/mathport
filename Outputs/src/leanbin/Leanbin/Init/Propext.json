{"to_eq":
 "theorem iff.to_eq {a b : Prop} (h : a ↔ b) : a = b :=\n  propext h\n#align iff.to_eq iff.to_eq\n\n",
 "imp_congr_eq":
 "#print imp_congr_eq /-\ntheorem imp_congr_eq {a b c d : Prop} (h₁ : a = c) (h₂ : b = d) : (a → b) = (c → d) :=\n  propext (imp_congr h₁.to_iff h₂.to_iff)\n#align imp_congr_eq imp_congr_eq\n-/\n\n",
 "imp_congr_ctx_eq":
 "#print imp_congr_ctx_eq /-\ntheorem imp_congr_ctx_eq {a b c d : Prop} (h₁ : a = c) (h₂ : c → b = d) : (a → b) = (c → d) :=\n  propext (imp_congr_ctx h₁.to_iff fun hc => (h₂ hc).to_iff)\n#align imp_congr_ctx_eq imp_congr_ctx_eq\n-/\n\n",
 "iff_eq_eq":
 "#print iff_eq_eq /-\ntheorem iff_eq_eq {a b : Prop} : (a ↔ b) = (a = b) :=\n  propext (iff.intro (fun h => iff.to_eq h) fun h => h.to_iff)\n#align iff_eq_eq iff_eq_eq\n-/\n\n",
 "forall_congr":
 "#print forall_congr /-\n/-\nCopyright (c) 2016 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthor: Leonardo de Moura\n-/\ntheorem forall_congr {a : Sort u} {p q : a → Prop} (h : ∀ x, p x = q x) : (∀ x, p x) = ∀ x, q x :=\n  propext (forall_congr' fun a => (h a).to_iff)\n#align forall_congr_eq forall_congr\n-/\n\n",
 "eq_true":
 "#print eq_true /-\ntheorem eq_true {a : Prop} (h : a) : a = true :=\n  propext (iff_true_intro h)\n#align eq_true_intro eq_true\n-/\n\n",
 "eq_false":
 "#print eq_false /-\ntheorem eq_false {a : Prop} (h : ¬a) : a = false :=\n  propext (iff_false_intro h)\n#align eq_false_intro eq_false\n-/\n\n"}