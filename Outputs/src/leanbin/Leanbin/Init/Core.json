{"trans":
 "@[trans]\ntheorem eq.trans {α : Sort u} {a b c : α} (h₁ : a = b) (h₂ : b = c) : a = c :=\n  h₂ ▸ h₁\n#align eq.trans eq.trans\n\n",
 "symm":
 "@[symm]\ntheorem eq.symm {α : Sort u} {a b : α} (h : a = b) : b = a :=\n  h ▸ rfl\n#align eq.symm eq.symm\n\n",
 "subst":
 "-- eq basic support \n-- This is a `def`, so that it can be used as pattern in the equation compiler.\n@[elab_as_elim, subst]\ntheorem eq.subst {α : Sort u} {P : α → Prop} {a b : α} (h₁ : a = b) (h₂ : P a) : P b :=\n  eq.rec h₂ h₁\n#align eq.subst eq.subst\n\n",
 "right":
 "/- warning: and.elim_right clashes with and.right -> And.right\nCase conversion may be inaccurate. Consider using '#align and.elim_right And.rightₓ'. -/\n#print And.right /-\ntheorem And.right {a b : Prop} (h : and a b) : b :=\n  h.2\n#align and.elim_right And.right\n-/\n\n",
 "left":
 "/- warning: and.elim_left clashes with and.left -> And.left\nCase conversion may be inaccurate. Consider using '#align and.elim_left And.leftₓ'. -/\n#print And.left /-\n/-\nCopyright (c) 2014 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Leonardo de Moura\n\nnotation, basic datatypes and type classes\n-/\ntheorem And.left {a b : Prop} (h : and a b) : a :=\n  h.1\n#align and.elim_left And.left\n-/\n\n",
 "intro_right":
 "theorem Or.intro_right (a : Prop) {b : Prop} (hb : b) : or a b :=\n  or.inr hb\n#align or.intro_right Or.intro_rightₓ\n\n",
 "intro_left":
 "theorem or.intro_left {a : Prop} (b : Prop) (ha : a) : or a b :=\n  or.inl ha\n#align or.intro_left or.intro_left\n\n",
 "inj":
 "theorem pprod.mk.inj {α : Sort u} {β : Sort v} {x₁ : α} {y₁ : β} {x₂ : α} {y₂ : β} :\n    pprod.mk x₁ y₁ = pprod.mk x₂ y₂ → and (x₁ = x₂) (y₁ = y₂) := fun h => pprod.no_confusion h fun h₁ h₂ => ⟨h₁, h₂⟩\n#align pprod.mk.inj pprod.mk.inj\n\n",
 "eq_of_heq":
 "#print eq_of_heq /-\n-- This is a `def`, so that it can be used as pattern in the equation compiler.\ntheorem eq_of_heq {α : Sort u} {a a' : α} (h : HEq a a') : a = a' :=\n  have : ∀ (α' : Sort u) (a' : α') (h₁ : @HEq α a α' a') (h₂ : α = α'), (eq.rec_on h₂ a : α') = a' :=\n    fun (α' : Sort u) (a' : α') (h₁ : @HEq α a α' a') => heq.rec_on h₁ fun h₂ : α = α => rfl\n  show (eq.rec_on (eq.refl α) a : α) = a' from this α a' h (eq.refl α)\n#align eq_of_heq eq_of_heq\n-/\n\n",
 "add_zero":
 "#print Nat.add_zero /-\n-- Note this is different to `|`.\n/- We mark the following definitions as pattern to make sure they can be used in recursive equations,\n     and reduced by the equation compiler. -/\n/-\n  Global declarations of right binding strength\n\n  If a module reassigns these, it will be incompatible with other modules that adhere to these\n  conventions.\n\n  When hovering over a symbol, use \"C-c C-k\" to see how to input it.\n-/\n-- the strength of application, identifiers, (, [, etc.\n-- input with \\sy or \\-1 or \\inv\n-- notation for n-ary tuples\n-- sizeof\ntheorem Nat.add_zero (n : nat) : n + 0 = n :=\n  rfl\n#align nat_add_zero Nat.add_zero\n-/\n\n"}