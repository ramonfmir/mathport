{"wf":
 "theorem wf : well_founded (inv_image r f) :=\n  ⟨fun a => accessible (apply h (f a))⟩\n#align wf wf\n\n",
 "sizeof_measure_wf":
 "theorem sizeof_measure_wf (α : Sort u) [SizeOf α] : well_founded (sizeof_measure α) :=\n  measure_wf SizeOf.sizeOf\n#align sizeof_measure_wf sizeof_measure_wf\n\n",
 "rprod_wf":
 "-- The relational product of well founded relations is well-founded\ntheorem rprod_wf (ha : well_founded ra) (hb : well_founded rb) : well_founded (RProd ra rb) :=\n  subrelation.wf rprod_sub_lex (lex_wf ha hb)\n#align rprod_wf rprod_wf\n\n",
 "rprod_sub_lex":
 "-- relational product is a subrelation of the lex\ntheorem rprod_sub_lex : ∀ a b, RProd ra rb a b → lex ra rb a b := fun a b h =>\n  prod.rprod.rec_on h fun a₁ b₁ a₂ b₂ h₁ h₂ => lex.left b₁ b₂ h₁\n#align rprod_sub_lex rprod_sub_lex\n\n",
 "measure_wf":
 "theorem measure_wf {α : Sort u} (f : α → ℕ) : well_founded (measure f) :=\n  inv_image.wf f Nat.lt_wfRel\n#align measure_wf measure_wf\n\n",
 "lt_wfRel":
 "#print Nat.lt_wfRel /-\n/-- less-than is well-founded -/\ntheorem Nat.lt_wfRel : well_founded Nat.lt :=\n  ⟨nat.rec (acc.intro 0 fun n h => absurd h (nat.not_lt_zero n)) fun n ih =>\n      acc.intro (nat.succ n) fun m h =>\n        or.elim (nat.eq_or_lt_of_le (nat.le_of_succ_le_succ h)) (fun e => eq.substr e ih) (acc.inv ih)⟩\n#align nat.lt_wf Nat.lt_wfRel\n-/\n\n",
 "lex_wf":
 "-- The lexicographical order of well founded relations is well-founded\ntheorem lex_wf (ha : well_founded ra) (hb : well_founded rb) : well_founded (lex ra rb) :=\n  ⟨fun p => cases_on p fun a b => lex_accessible (apply ha a) (well_founded.apply hb) b⟩\n#align lex_wf lex_wf\n\n",
 "lex_accessible":
 "-- Lexicographical order based on ra and rb\n-- relational product based on ra and rb\ntheorem lex_accessible {a} (aca : acc ra a) (acb : ∀ b, acc rb b) : ∀ b, acc (lex ra rb) (a, b) :=\n  acc.rec_on aca fun xa aca iha b =>\n    acc.rec_on (acb b) fun xb acb ihb =>\n      acc.intro (xa, xb) fun p lt =>\n        have aux : xa = xa → xb = xb → acc (lex ra rb) p :=\n          @prod.lex.rec_on α β ra rb (fun p₁ p₂ => fst p₂ = xa → snd p₂ = xb → acc (lex ra rb) p₁) p (xa, xb) lt\n            (fun a₁ b₁ a₂ b₂ h (eq₂ : a₂ = xa) (eq₃ : b₂ = xb) => iha a₁ (eq.rec_on eq₂ h) b₁)\n            fun a b₁ b₂ h (eq₂ : a = xa) (eq₃ : b₂ = xb) => eq.rec_on eq₂.symm (ihb b₁ (eq.rec_on eq₃ h))\n        aux rfl rfl\n#align lex_accessible lex_accessible\n\n",
 "inv":
 "/-\nCopyright (c) 2014 Microsoft Corporation. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthor: Leonardo de Moura\n-/\ntheorem inv {x y : α} (h₁ : acc r x) (h₂ : r y x) : acc r y :=\n  acc.rec_on h₁ (fun x₁ ac₁ ih h₂ => ac₁ y h₂) h₂\n#align inv inv\n\n",
 "induction":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\ntheorem induction {C : α → Prop} (a : α) (h : ∀ x, (∀ y, «expr ≺ » y x → C y) → C x) : C a :=\n  recursion a h\n#align induction induction\n\n",
 "fix_eq":
 "/-- Well-founded fixpoint satisfies fixpoint equation -/\ntheorem fix_eq (hwf : well_founded r) (F : ∀ x, (∀ y, r y x → C y) → C x) (x : α) :\n    fix hwf F x = F x fun y h => fix hwf F y :=\n  fix_F_eq F x (apply hwf x)\n#align fix_eq fix_eq\n\n",
 "fix_F_eq":
 "/- ./././Mathport/Syntax/Translate/Expr.lean:207:4: warning: unsupported notation `«expr ≺ » -/\ntheorem fix_F_eq (x : α) (acx : acc r x) :\n    fix_F F x acx = F x fun (y : α) (p : «expr ≺ » y x) => fix_F F y (acc.inv acx p) :=\n  acc.drec (fun x r ih => rfl) acx\n#align fix_F_eq fix_F_eq\n\n",
 "empty_wf":
 "/-- Empty relation is well-founded -/\ntheorem empty_wf {α : Sort u} : well_founded (@empty_relation α) :=\n  well_founded.intro fun a : α => acc.intro a fun (b : α) (lt : false) => false.rec _ lt\n#align empty_wf empty_wf\n\n",
 "accessible":
 "-- The inverse image of a well-founded relation is well-founded\ntheorem accessible {a : α} (ac : acc r (f a)) : acc (inv_image r f) a :=\n  acc_aux ac a rfl\n#align accessible accessible\n\n"}